head	1.6;
access;
symbols
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.66
	gdb_6_3-20041019-branchpoint:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.68
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.64
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.62
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.60
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.58
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.56
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.54
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.52
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	kettenis_sparc-20030918-branch:1.5.0.50
	kettenis_sparc-20030918-branchpoint:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.48
	cagney_x86i386-20030821-branch:1.5.0.46
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.44
	gdb_6_0-2003-06-23-branchpoint:1.5
	jimb-ppc64-linux-20030613-branch:1.5.0.42
	jimb-ppc64-linux-20030613-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.40
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.38
	cagney_writestrings-20030508-branchpoint:1.5
	jimb-ppc64-linux-20030528-branch:1.5.0.36
	jimb-ppc64-linux-20030528-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.34
	cagney_fileio-20030521-branchpoint:1.5
	kettenis_i386newframe-20030517-mergepoint:1.5
	jimb-ppc64-linux-20030509-branch:1.5.0.32
	jimb-ppc64-linux-20030509-branchpoint:1.5
	kettenis_i386newframe-20030504-mergepoint:1.5
	carlton_dictionary-20030430-merge:1.5
	kettenis_i386newframe-20030419-branch:1.5.0.30
	kettenis_i386newframe-20030419-branchpoint:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	kettenis_i386newframe-20030406-branch:1.5.0.28
	kettenis_i386newframe-20030406-branchpoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.26
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.24
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.22
	cagney_lazyid-20030317-branchpoint:1.5
	kettenis-i386newframe-20030316-mergepoint:1.5
	offbyone-20030313-branch:1.5.0.20
	offbyone-20030313-branchpoint:1.5
	kettenis-i386newframe-20030308-branch:1.5.0.18
	kettenis-i386newframe-20030308-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.16
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.14
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.12
	cagney-unwind-20030108-branchpoint:1.5
	carlton_dictionary-20021223-merge:1.5
	gdb_5_3-2002-12-12-release:1.5
	carlton_dictionary-20021115-merge:1.5
	kseitz_interps-20021105-merge:1.5
	kseitz_interps-20021103-merge:1.5
	drow-cplus-merge-20021020:1.5
	drow-cplus-merge-20021025:1.5
	carlton_dictionary-20021025-merge:1.5
	carlton_dictionary-20021011-merge:1.5
	drow-cplus-branch:1.5.0.10
	drow-cplus-branchpoint:1.5
	kseitz_interps-20020930-merge:1.5
	carlton_dictionary-20020927-merge:1.5
	carlton_dictionary-branch:1.5.0.8
	carlton_dictionary-20020920-branchpoint:1.5
	gdb_5_3-branch:1.5.0.6
	gdb_5_3-2002-09-04-branchpoint:1.5
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.4
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.5.0.2
	readline_4_3-import-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	kseitz_interps-20020528-branch:1.4.0.8
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.6
	cagney_regbuf-20020515-branchpoint:1.4
	jimb-macro-020506-branch:1.4.0.4
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.6.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.6
	gdb_5_0-2000-05-19-release:1.1.1.6
	gdb_4_18_2-2000-05-18-release:1.1.1.6
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.6
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.6
	gdb_5_0-2000-04-10-branch:1.1.1.6.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.6
	repo-unification-2000-02-06:1.1.1.6
	gdb-2000-02-04:1.1.1.6
	gdb-2000-02-02:1.1.1.6
	gdb-2000-02-01:1.1.1.6
	gdb-2000-01-31:1.1.1.6
	gdb-2000-01-26:1.1.1.6
	gdb-2000-01-24:1.1.1.6
	gdb-2000-01-17:1.1.1.6
	gdb-2000-01-10:1.1.1.6
	gdb-2000-01-05:1.1.1.6
	gdb-1999-12-21:1.1.1.6
	gdb-1999-12-13:1.1.1.6
	gdb-1999-12-07:1.1.1.6
	gdb-1999-12-06:1.1.1.6
	gdb-1999-11-16:1.1.1.6
	gdb-1999-11-08:1.1.1.6
	gdb-1999-11-01:1.1.1.6
	gdb-1999-10-25:1.1.1.6
	gdb-1999-10-18:1.1.1.6
	gdb-1999-10-11:1.1.1.6
	gdb-1999-10-04:1.1.1.6
	gdb-1999-09-28:1.1.1.5
	gdb-1999-09-21:1.1.1.5
	gdb-1999-09-13:1.1.1.5
	gdb-1999-09-08:1.1.1.5
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2004.11.12.16.45.29;	author cagney;	state dead;
branches;
next	1.5;

1.5
date	2002.07.16.14.30.14;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.14.19.50.01;	author brolley;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2001.03.05.16.00.17;	author brolley;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.06.16.58.40;	author brolley;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.02;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.02;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.32.16;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.17.31.35;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.08.09.21.36.14;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.09.09.00.01.47;	author shebs;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.10.05.23.13.37;	author jsm;	state Exp;
branches;
next	;

1.4.8.1
date	2002.07.22.21.47.26;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@2004-11-12  Andrew Cagney  <cagney@@gnu.org>

	* d30v, fr30, mn10200, z8k: Delete directory.
@
text
@// OBSOLETE /* Simulator instruction semantics for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #define WANT_CPU fr30bf
// OBSOLETE #define WANT_CPU_FR30BF
// OBSOLETE 
// OBSOLETE #include "sim-main.h"
// OBSOLETE #include "cgen-mem.h"
// OBSOLETE #include "cgen-ops.h"
// OBSOLETE 
// OBSOLETE #undef GET_ATTR
// OBSOLETE #if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_##attr)
// OBSOLETE #else
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_/**/attr)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE /* This is used so that we can compile two copies of the semantic code,
// OBSOLETE    one with full feature support and one without that runs fast(er).
// OBSOLETE    FAST_P, when desired, is defined on the command line, -DFAST_P=1.  */
// OBSOLETE #if FAST_P
// OBSOLETE #define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_semf_,fn)
// OBSOLETE #undef TRACE_RESULT
// OBSOLETE #define TRACE_RESULT(cpu, abuf, name, type, val)
// OBSOLETE #else
// OBSOLETE #define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_sem_,fn)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE /* x-invalid: --invalid-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_invalid) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     /* Update the recorded pc in the cpu state struct.
// OBSOLETE        Only necessary for WITH_SCACHE case, but to avoid the
// OBSOLETE        conditional compilation ....  */
// OBSOLETE     SET_H_PC (pc);
// OBSOLETE     /* Virtual insns have zero size.  Overwrite vpc with address of next insn
// OBSOLETE        using the default-insn-bitsize spec.  When executing insns in parallel
// OBSOLETE        we may want to queue the fault and continue execution.  */
// OBSOLETE     vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE     vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-after: --after-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_after) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_after (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-before: --before-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_before) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_before (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-cti-chain: --cti-chain-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_cti_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       pbb_br_type, pbb_br_npc);
// OBSOLETE     BREAK (sem);
// OBSOLETE #else
// OBSOLETE     /* FIXME: Allow provision of explicit ifmt spec in insn spec.  */
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       CPU_PBB_BR_TYPE (current_cpu),
// OBSOLETE 			       CPU_PBB_BR_NPC (current_cpu));
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-chain: --chain-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     vpc = fr30bf_pbb_chain (current_cpu, sem_arg);
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     BREAK (sem);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-begin: --begin-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_begin) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #if defined DEFINE_SWITCH || defined FAST_P
// OBSOLETE     /* In the switch case FAST_P is a constant, allowing several optimizations
// OBSOLETE        in any called inline functions.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, FAST_P);
// OBSOLETE #else
// OBSOLETE #if 0 /* cgen engine can't handle dynamic fast/full switching yet.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, STATE_RUN_FAST_P (CPU_STATE (current_cpu)));
// OBSOLETE #else
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, 0);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* add: add $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,add) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addi: add $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* add2: add2 $m4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,add2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addc: addc $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ADDCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addn: addn $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addni: addn $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addni) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addn2: addn2 $m4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addn2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* sub: sub $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,sub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* subc: subc $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,subc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* subn: subn $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,subn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* cmp: cmp $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,cmp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* cmpi: cmp $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,cmpi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* cmp2: cmp2 $m4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,cmp2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* and: and $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,and) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ANDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* or: or $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,or) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eor: eor $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eor) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = XORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andm: and $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andh: andh $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andb: andb $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orm: or $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orh: orh $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orb: orb $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eorm: eor $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eorm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = XORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eorh: eorh $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eorh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = XORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eorb: eorb $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eorb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = XORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bandl: bandl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bandl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (FLD (f_u4), 240), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* borl: borl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,borl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beorl: beorl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beorl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bandh: bandh $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bandh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (SLLQI (FLD (f_u4), 4), 15), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* borh: borh $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,borh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beorh: beorh $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beorh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* btstl: btstl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,btstl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* btsth: btsth $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,btsth) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mul: mul $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mul) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (EXTSIDI (* FLD (i_Rj)), EXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQDI (tmp_tmp, MAKEDI (0, 0));
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ORIF (GTDI (tmp_tmp, MAKEDI (0, 2147483647)), LTDI (tmp_tmp, NEGDI (MAKEDI (0, 0x80000000))));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mulu: mulu $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mulu) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (ZEXTSIDI (* FLD (i_Rj)), ZEXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mulh: mulh $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mulh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULHI (TRUNCSIHI (* FLD (i_Rj)), TRUNCSIHI (* FLD (i_Ri)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* muluh: muluh $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,muluh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULSI (ANDSI (* FLD (i_Rj), 65535), ANDSI (* FLD (i_Ri), 65535));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div0s: div0s $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div0s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = XORBI (CPU (h_d0bit), LTSI (* FLD (i_Ri), 0));
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NEBI (CPU (h_d0bit), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = 0xffffffff;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div0u: div0u $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div0u) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div1: div1 $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (LTSI (GET_H_DR (((UINT) 5)), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (NOTBI (XORBI (XORBI (CPU (h_d0bit), CPU (h_d1bit)), CPU (h_cbit)))) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div2: div2 $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (EQSI (tmp_tmp, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 1;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div3: div3 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_zbit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div4s: div4s */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div4s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = NEGSI (GET_H_DR (((UINT) 5)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsl: lsl $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsli: lsl $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsli) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsl2: lsl2 $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsl2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsr: lsr $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsri: lsr $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsri) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsr2: lsr2 $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsr2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* asr: asr $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,asr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* asri: asr $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,asri) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* asr2: asr2 $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,asr2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldi8: ldi:8 $i8,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldi8) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi8.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i8);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldi20: ldi:20 $i20,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldi20) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi20.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i20);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldi32: ldi:32 $i32,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldi32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi32.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 6);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i32);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ld: ld @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lduh: lduh @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lduh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldub: ldub @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr13: ld @@($R13,$Rj),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr13uh: lduh @@($R13,$Rj),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr13uh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr13ub: ldub @@($R13,$Rj),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr13ub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr14: ld @@($R14,$disp10),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr14) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr14uh: lduh @@($R14,$disp9),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr14uh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14uh.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr14ub: ldub @@($R14,$disp8),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr14ub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14ub.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15: ld @@($R15,$udisp6),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_udisp6), CPU (h_gr[((UINT) 15)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15gr: ld @@$R15+,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15gr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15gr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NESI (FLD (f_Ri), 15)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15dr: ld @@$R15+,$Rs2 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (FLD (f_Rs2), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15ps: ld @@$R15+,$ps */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* st: st $Ri,@@$Rj */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,st) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* sth: sth $Ri,@@$Rj */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,sth) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stb: stb $Ri,@@$Rj */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str13: st $Ri,@@($R13,$Rj) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str13h: sth $Ri,@@($R13,$Rj) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str13b: stb $Ri,@@($R13,$Rj) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str14: st $Ri,@@($R14,$disp10) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str14) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str14h: sth $Ri,@@($R14,$disp9) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str14h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14h.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str14b: stb $Ri,@@($R14,$disp8) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str14b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14b.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15: st $Ri,@@($R15,$udisp6) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_udisp6)), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15gr: st $Ri,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15gr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15gr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15dr: st $Rs2,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GET_H_DR (FLD (f_Rs2));
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15ps: st $ps,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mov: mov $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mov) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Rj);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* movdr: mov $Rs1,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,movdr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_DR (FLD (f_Rs1));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* movps: mov $ps,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,movps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mov2dr: mov $Ri,$Rs1 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mov2dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_DR (FLD (f_Rs1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mov2ps: mov $Ri,$ps */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mov2ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* jmp: jmp @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,jmp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* jmpd: jmp:d @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,jmpd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* callr: call @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,callr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* callrd: call:d @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,callrd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* call: call $label12 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,call) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* calld: call:d $label12 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,calld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ret: ret */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ret) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ret:d: ret:d */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ret_d) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* int: int $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,int) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_int (current_cpu, pc, FLD (f_u8));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* inte: inte */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,inte) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_inte (current_cpu, pc);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* reti: reti */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,reti) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (GET_H_SBIT (), 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* brad: bra:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,brad) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bra: bra $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bra) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnod: bno:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnod) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bno: bno $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bno) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beqd: beq:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beqd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beq: beq $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beq) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bned: bne:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bned) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bne: bne $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bne) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bcd: bc:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bcd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bc: bc $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bncd: bnc:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bncd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnc: bnc $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnd: bn:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bn: bn $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bpd: bp:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bpd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bp: bp $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bvd: bv:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bvd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bv: bv $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnvd: bnv:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnvd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnv: bnv $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bltd: blt:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bltd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* blt: blt $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,blt) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bged: bge:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bged) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bge: bge $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bge) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bled: ble:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bled) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ble: ble $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ble) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bgtd: bgt:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bgtd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bgt: bgt $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bgt) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* blsd: bls:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,blsd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bls: bls $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bls) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bhid: bhi:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bhid) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bhi: bhi $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bhi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13: dmov $R13,@@$dir10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13h: dmovh $R13,@@$dir9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13b: dmovb $R13,@@$dir8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13pi: dmov @@$R13+,@@$dir10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13pih: dmovh @@$R13+,@@$dir9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13pih) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13pib: dmovb @@$R13+,@@$dir8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13pib) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr15pi: dmov @@$R15+,@@$dir10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr15pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13: dmov @@$dir10,$R13 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13h: dmovh @@$dir9,$R13 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13b: dmovb @@$dir8,$R13 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13pi: dmov @@$dir10,@@$R13+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13pih: dmovh @@$dir9,@@$R13+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13pih) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     SETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13pib: dmovb @@$dir8,@@$R13+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13pib) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     SETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r15pd: dmov @@$dir10,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r15pd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldres: ldres @@$Ri+,$u4 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldres) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stres: stres $u4,@@$Ri+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stres) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copop: copop $u4c,$ccc,$CRj,$CRi */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copop) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copld: copld $u4c,$ccc,$Rjc,$CRi */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copst: copst $u4c,$ccc,$CRj,$Ric */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copst) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copsv: copsv $u4c,$ccc,$CRj,$Ric */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copsv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* nop: nop */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,nop) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andccr: andccr $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andccr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orccr: orccr $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orccr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ORQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stilm: stilm $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stilm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDSI (FLD (f_u8), 31);
// OBSOLETE     SET_H_ILM (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ilm", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addsp: addsp $s10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addsp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_s10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extsb: extsb $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extsb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extub: extub $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extsh: extsh $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extsh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extuh: extuh $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extuh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldm0: ldm0 ($reglist_low_ld) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldm0) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm0.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 0)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 1)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 2)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 3)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 4)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 5)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 6)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 7)]) = opval;
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldm1: ldm1 ($reglist_hi_ld) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldm1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm1.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 8)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 9)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 10)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 11)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 12)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 128)) {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stm0: stm0 ($reglist_low_st) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stm0) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm0.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 7)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 6)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 5)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 4)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 3)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 2)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 1)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 0)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stm1: stm1 ($reglist_hi_st) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stm1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm1.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 1)) {
// OBSOLETE {
// OBSOLETE   SI tmp_save_r15;
// OBSOLETE   tmp_save_r15 = CPU (h_gr[((UINT) 15)]);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_save_r15;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 12)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 11)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 10)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 9)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 8)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* enter: enter $u10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,enter) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, tmp_tmp, opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), FLD (f_u10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* leave: leave */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,leave) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 14)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, SUBSI (CPU (h_gr[((UINT) 15)]), 4));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* xchb: xchb @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,xchb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     UQI opval = tmp_tmp;
// OBSOLETE     SETMEMUQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Table of all semantic fns.  */
// OBSOLETE 
// OBSOLETE static const struct sem_fn_desc sem_fns[] = {
// OBSOLETE   { FR30BF_INSN_X_INVALID, SEM_FN_NAME (fr30bf,x_invalid) },
// OBSOLETE   { FR30BF_INSN_X_AFTER, SEM_FN_NAME (fr30bf,x_after) },
// OBSOLETE   { FR30BF_INSN_X_BEFORE, SEM_FN_NAME (fr30bf,x_before) },
// OBSOLETE   { FR30BF_INSN_X_CTI_CHAIN, SEM_FN_NAME (fr30bf,x_cti_chain) },
// OBSOLETE   { FR30BF_INSN_X_CHAIN, SEM_FN_NAME (fr30bf,x_chain) },
// OBSOLETE   { FR30BF_INSN_X_BEGIN, SEM_FN_NAME (fr30bf,x_begin) },
// OBSOLETE   { FR30BF_INSN_ADD, SEM_FN_NAME (fr30bf,add) },
// OBSOLETE   { FR30BF_INSN_ADDI, SEM_FN_NAME (fr30bf,addi) },
// OBSOLETE   { FR30BF_INSN_ADD2, SEM_FN_NAME (fr30bf,add2) },
// OBSOLETE   { FR30BF_INSN_ADDC, SEM_FN_NAME (fr30bf,addc) },
// OBSOLETE   { FR30BF_INSN_ADDN, SEM_FN_NAME (fr30bf,addn) },
// OBSOLETE   { FR30BF_INSN_ADDNI, SEM_FN_NAME (fr30bf,addni) },
// OBSOLETE   { FR30BF_INSN_ADDN2, SEM_FN_NAME (fr30bf,addn2) },
// OBSOLETE   { FR30BF_INSN_SUB, SEM_FN_NAME (fr30bf,sub) },
// OBSOLETE   { FR30BF_INSN_SUBC, SEM_FN_NAME (fr30bf,subc) },
// OBSOLETE   { FR30BF_INSN_SUBN, SEM_FN_NAME (fr30bf,subn) },
// OBSOLETE   { FR30BF_INSN_CMP, SEM_FN_NAME (fr30bf,cmp) },
// OBSOLETE   { FR30BF_INSN_CMPI, SEM_FN_NAME (fr30bf,cmpi) },
// OBSOLETE   { FR30BF_INSN_CMP2, SEM_FN_NAME (fr30bf,cmp2) },
// OBSOLETE   { FR30BF_INSN_AND, SEM_FN_NAME (fr30bf,and) },
// OBSOLETE   { FR30BF_INSN_OR, SEM_FN_NAME (fr30bf,or) },
// OBSOLETE   { FR30BF_INSN_EOR, SEM_FN_NAME (fr30bf,eor) },
// OBSOLETE   { FR30BF_INSN_ANDM, SEM_FN_NAME (fr30bf,andm) },
// OBSOLETE   { FR30BF_INSN_ANDH, SEM_FN_NAME (fr30bf,andh) },
// OBSOLETE   { FR30BF_INSN_ANDB, SEM_FN_NAME (fr30bf,andb) },
// OBSOLETE   { FR30BF_INSN_ORM, SEM_FN_NAME (fr30bf,orm) },
// OBSOLETE   { FR30BF_INSN_ORH, SEM_FN_NAME (fr30bf,orh) },
// OBSOLETE   { FR30BF_INSN_ORB, SEM_FN_NAME (fr30bf,orb) },
// OBSOLETE   { FR30BF_INSN_EORM, SEM_FN_NAME (fr30bf,eorm) },
// OBSOLETE   { FR30BF_INSN_EORH, SEM_FN_NAME (fr30bf,eorh) },
// OBSOLETE   { FR30BF_INSN_EORB, SEM_FN_NAME (fr30bf,eorb) },
// OBSOLETE   { FR30BF_INSN_BANDL, SEM_FN_NAME (fr30bf,bandl) },
// OBSOLETE   { FR30BF_INSN_BORL, SEM_FN_NAME (fr30bf,borl) },
// OBSOLETE   { FR30BF_INSN_BEORL, SEM_FN_NAME (fr30bf,beorl) },
// OBSOLETE   { FR30BF_INSN_BANDH, SEM_FN_NAME (fr30bf,bandh) },
// OBSOLETE   { FR30BF_INSN_BORH, SEM_FN_NAME (fr30bf,borh) },
// OBSOLETE   { FR30BF_INSN_BEORH, SEM_FN_NAME (fr30bf,beorh) },
// OBSOLETE   { FR30BF_INSN_BTSTL, SEM_FN_NAME (fr30bf,btstl) },
// OBSOLETE   { FR30BF_INSN_BTSTH, SEM_FN_NAME (fr30bf,btsth) },
// OBSOLETE   { FR30BF_INSN_MUL, SEM_FN_NAME (fr30bf,mul) },
// OBSOLETE   { FR30BF_INSN_MULU, SEM_FN_NAME (fr30bf,mulu) },
// OBSOLETE   { FR30BF_INSN_MULH, SEM_FN_NAME (fr30bf,mulh) },
// OBSOLETE   { FR30BF_INSN_MULUH, SEM_FN_NAME (fr30bf,muluh) },
// OBSOLETE   { FR30BF_INSN_DIV0S, SEM_FN_NAME (fr30bf,div0s) },
// OBSOLETE   { FR30BF_INSN_DIV0U, SEM_FN_NAME (fr30bf,div0u) },
// OBSOLETE   { FR30BF_INSN_DIV1, SEM_FN_NAME (fr30bf,div1) },
// OBSOLETE   { FR30BF_INSN_DIV2, SEM_FN_NAME (fr30bf,div2) },
// OBSOLETE   { FR30BF_INSN_DIV3, SEM_FN_NAME (fr30bf,div3) },
// OBSOLETE   { FR30BF_INSN_DIV4S, SEM_FN_NAME (fr30bf,div4s) },
// OBSOLETE   { FR30BF_INSN_LSL, SEM_FN_NAME (fr30bf,lsl) },
// OBSOLETE   { FR30BF_INSN_LSLI, SEM_FN_NAME (fr30bf,lsli) },
// OBSOLETE   { FR30BF_INSN_LSL2, SEM_FN_NAME (fr30bf,lsl2) },
// OBSOLETE   { FR30BF_INSN_LSR, SEM_FN_NAME (fr30bf,lsr) },
// OBSOLETE   { FR30BF_INSN_LSRI, SEM_FN_NAME (fr30bf,lsri) },
// OBSOLETE   { FR30BF_INSN_LSR2, SEM_FN_NAME (fr30bf,lsr2) },
// OBSOLETE   { FR30BF_INSN_ASR, SEM_FN_NAME (fr30bf,asr) },
// OBSOLETE   { FR30BF_INSN_ASRI, SEM_FN_NAME (fr30bf,asri) },
// OBSOLETE   { FR30BF_INSN_ASR2, SEM_FN_NAME (fr30bf,asr2) },
// OBSOLETE   { FR30BF_INSN_LDI8, SEM_FN_NAME (fr30bf,ldi8) },
// OBSOLETE   { FR30BF_INSN_LDI20, SEM_FN_NAME (fr30bf,ldi20) },
// OBSOLETE   { FR30BF_INSN_LDI32, SEM_FN_NAME (fr30bf,ldi32) },
// OBSOLETE   { FR30BF_INSN_LD, SEM_FN_NAME (fr30bf,ld) },
// OBSOLETE   { FR30BF_INSN_LDUH, SEM_FN_NAME (fr30bf,lduh) },
// OBSOLETE   { FR30BF_INSN_LDUB, SEM_FN_NAME (fr30bf,ldub) },
// OBSOLETE   { FR30BF_INSN_LDR13, SEM_FN_NAME (fr30bf,ldr13) },
// OBSOLETE   { FR30BF_INSN_LDR13UH, SEM_FN_NAME (fr30bf,ldr13uh) },
// OBSOLETE   { FR30BF_INSN_LDR13UB, SEM_FN_NAME (fr30bf,ldr13ub) },
// OBSOLETE   { FR30BF_INSN_LDR14, SEM_FN_NAME (fr30bf,ldr14) },
// OBSOLETE   { FR30BF_INSN_LDR14UH, SEM_FN_NAME (fr30bf,ldr14uh) },
// OBSOLETE   { FR30BF_INSN_LDR14UB, SEM_FN_NAME (fr30bf,ldr14ub) },
// OBSOLETE   { FR30BF_INSN_LDR15, SEM_FN_NAME (fr30bf,ldr15) },
// OBSOLETE   { FR30BF_INSN_LDR15GR, SEM_FN_NAME (fr30bf,ldr15gr) },
// OBSOLETE   { FR30BF_INSN_LDR15DR, SEM_FN_NAME (fr30bf,ldr15dr) },
// OBSOLETE   { FR30BF_INSN_LDR15PS, SEM_FN_NAME (fr30bf,ldr15ps) },
// OBSOLETE   { FR30BF_INSN_ST, SEM_FN_NAME (fr30bf,st) },
// OBSOLETE   { FR30BF_INSN_STH, SEM_FN_NAME (fr30bf,sth) },
// OBSOLETE   { FR30BF_INSN_STB, SEM_FN_NAME (fr30bf,stb) },
// OBSOLETE   { FR30BF_INSN_STR13, SEM_FN_NAME (fr30bf,str13) },
// OBSOLETE   { FR30BF_INSN_STR13H, SEM_FN_NAME (fr30bf,str13h) },
// OBSOLETE   { FR30BF_INSN_STR13B, SEM_FN_NAME (fr30bf,str13b) },
// OBSOLETE   { FR30BF_INSN_STR14, SEM_FN_NAME (fr30bf,str14) },
// OBSOLETE   { FR30BF_INSN_STR14H, SEM_FN_NAME (fr30bf,str14h) },
// OBSOLETE   { FR30BF_INSN_STR14B, SEM_FN_NAME (fr30bf,str14b) },
// OBSOLETE   { FR30BF_INSN_STR15, SEM_FN_NAME (fr30bf,str15) },
// OBSOLETE   { FR30BF_INSN_STR15GR, SEM_FN_NAME (fr30bf,str15gr) },
// OBSOLETE   { FR30BF_INSN_STR15DR, SEM_FN_NAME (fr30bf,str15dr) },
// OBSOLETE   { FR30BF_INSN_STR15PS, SEM_FN_NAME (fr30bf,str15ps) },
// OBSOLETE   { FR30BF_INSN_MOV, SEM_FN_NAME (fr30bf,mov) },
// OBSOLETE   { FR30BF_INSN_MOVDR, SEM_FN_NAME (fr30bf,movdr) },
// OBSOLETE   { FR30BF_INSN_MOVPS, SEM_FN_NAME (fr30bf,movps) },
// OBSOLETE   { FR30BF_INSN_MOV2DR, SEM_FN_NAME (fr30bf,mov2dr) },
// OBSOLETE   { FR30BF_INSN_MOV2PS, SEM_FN_NAME (fr30bf,mov2ps) },
// OBSOLETE   { FR30BF_INSN_JMP, SEM_FN_NAME (fr30bf,jmp) },
// OBSOLETE   { FR30BF_INSN_JMPD, SEM_FN_NAME (fr30bf,jmpd) },
// OBSOLETE   { FR30BF_INSN_CALLR, SEM_FN_NAME (fr30bf,callr) },
// OBSOLETE   { FR30BF_INSN_CALLRD, SEM_FN_NAME (fr30bf,callrd) },
// OBSOLETE   { FR30BF_INSN_CALL, SEM_FN_NAME (fr30bf,call) },
// OBSOLETE   { FR30BF_INSN_CALLD, SEM_FN_NAME (fr30bf,calld) },
// OBSOLETE   { FR30BF_INSN_RET, SEM_FN_NAME (fr30bf,ret) },
// OBSOLETE   { FR30BF_INSN_RET_D, SEM_FN_NAME (fr30bf,ret_d) },
// OBSOLETE   { FR30BF_INSN_INT, SEM_FN_NAME (fr30bf,int) },
// OBSOLETE   { FR30BF_INSN_INTE, SEM_FN_NAME (fr30bf,inte) },
// OBSOLETE   { FR30BF_INSN_RETI, SEM_FN_NAME (fr30bf,reti) },
// OBSOLETE   { FR30BF_INSN_BRAD, SEM_FN_NAME (fr30bf,brad) },
// OBSOLETE   { FR30BF_INSN_BRA, SEM_FN_NAME (fr30bf,bra) },
// OBSOLETE   { FR30BF_INSN_BNOD, SEM_FN_NAME (fr30bf,bnod) },
// OBSOLETE   { FR30BF_INSN_BNO, SEM_FN_NAME (fr30bf,bno) },
// OBSOLETE   { FR30BF_INSN_BEQD, SEM_FN_NAME (fr30bf,beqd) },
// OBSOLETE   { FR30BF_INSN_BEQ, SEM_FN_NAME (fr30bf,beq) },
// OBSOLETE   { FR30BF_INSN_BNED, SEM_FN_NAME (fr30bf,bned) },
// OBSOLETE   { FR30BF_INSN_BNE, SEM_FN_NAME (fr30bf,bne) },
// OBSOLETE   { FR30BF_INSN_BCD, SEM_FN_NAME (fr30bf,bcd) },
// OBSOLETE   { FR30BF_INSN_BC, SEM_FN_NAME (fr30bf,bc) },
// OBSOLETE   { FR30BF_INSN_BNCD, SEM_FN_NAME (fr30bf,bncd) },
// OBSOLETE   { FR30BF_INSN_BNC, SEM_FN_NAME (fr30bf,bnc) },
// OBSOLETE   { FR30BF_INSN_BND, SEM_FN_NAME (fr30bf,bnd) },
// OBSOLETE   { FR30BF_INSN_BN, SEM_FN_NAME (fr30bf,bn) },
// OBSOLETE   { FR30BF_INSN_BPD, SEM_FN_NAME (fr30bf,bpd) },
// OBSOLETE   { FR30BF_INSN_BP, SEM_FN_NAME (fr30bf,bp) },
// OBSOLETE   { FR30BF_INSN_BVD, SEM_FN_NAME (fr30bf,bvd) },
// OBSOLETE   { FR30BF_INSN_BV, SEM_FN_NAME (fr30bf,bv) },
// OBSOLETE   { FR30BF_INSN_BNVD, SEM_FN_NAME (fr30bf,bnvd) },
// OBSOLETE   { FR30BF_INSN_BNV, SEM_FN_NAME (fr30bf,bnv) },
// OBSOLETE   { FR30BF_INSN_BLTD, SEM_FN_NAME (fr30bf,bltd) },
// OBSOLETE   { FR30BF_INSN_BLT, SEM_FN_NAME (fr30bf,blt) },
// OBSOLETE   { FR30BF_INSN_BGED, SEM_FN_NAME (fr30bf,bged) },
// OBSOLETE   { FR30BF_INSN_BGE, SEM_FN_NAME (fr30bf,bge) },
// OBSOLETE   { FR30BF_INSN_BLED, SEM_FN_NAME (fr30bf,bled) },
// OBSOLETE   { FR30BF_INSN_BLE, SEM_FN_NAME (fr30bf,ble) },
// OBSOLETE   { FR30BF_INSN_BGTD, SEM_FN_NAME (fr30bf,bgtd) },
// OBSOLETE   { FR30BF_INSN_BGT, SEM_FN_NAME (fr30bf,bgt) },
// OBSOLETE   { FR30BF_INSN_BLSD, SEM_FN_NAME (fr30bf,blsd) },
// OBSOLETE   { FR30BF_INSN_BLS, SEM_FN_NAME (fr30bf,bls) },
// OBSOLETE   { FR30BF_INSN_BHID, SEM_FN_NAME (fr30bf,bhid) },
// OBSOLETE   { FR30BF_INSN_BHI, SEM_FN_NAME (fr30bf,bhi) },
// OBSOLETE   { FR30BF_INSN_DMOVR13, SEM_FN_NAME (fr30bf,dmovr13) },
// OBSOLETE   { FR30BF_INSN_DMOVR13H, SEM_FN_NAME (fr30bf,dmovr13h) },
// OBSOLETE   { FR30BF_INSN_DMOVR13B, SEM_FN_NAME (fr30bf,dmovr13b) },
// OBSOLETE   { FR30BF_INSN_DMOVR13PI, SEM_FN_NAME (fr30bf,dmovr13pi) },
// OBSOLETE   { FR30BF_INSN_DMOVR13PIH, SEM_FN_NAME (fr30bf,dmovr13pih) },
// OBSOLETE   { FR30BF_INSN_DMOVR13PIB, SEM_FN_NAME (fr30bf,dmovr13pib) },
// OBSOLETE   { FR30BF_INSN_DMOVR15PI, SEM_FN_NAME (fr30bf,dmovr15pi) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13, SEM_FN_NAME (fr30bf,dmov2r13) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13H, SEM_FN_NAME (fr30bf,dmov2r13h) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13B, SEM_FN_NAME (fr30bf,dmov2r13b) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13PI, SEM_FN_NAME (fr30bf,dmov2r13pi) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13PIH, SEM_FN_NAME (fr30bf,dmov2r13pih) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13PIB, SEM_FN_NAME (fr30bf,dmov2r13pib) },
// OBSOLETE   { FR30BF_INSN_DMOV2R15PD, SEM_FN_NAME (fr30bf,dmov2r15pd) },
// OBSOLETE   { FR30BF_INSN_LDRES, SEM_FN_NAME (fr30bf,ldres) },
// OBSOLETE   { FR30BF_INSN_STRES, SEM_FN_NAME (fr30bf,stres) },
// OBSOLETE   { FR30BF_INSN_COPOP, SEM_FN_NAME (fr30bf,copop) },
// OBSOLETE   { FR30BF_INSN_COPLD, SEM_FN_NAME (fr30bf,copld) },
// OBSOLETE   { FR30BF_INSN_COPST, SEM_FN_NAME (fr30bf,copst) },
// OBSOLETE   { FR30BF_INSN_COPSV, SEM_FN_NAME (fr30bf,copsv) },
// OBSOLETE   { FR30BF_INSN_NOP, SEM_FN_NAME (fr30bf,nop) },
// OBSOLETE   { FR30BF_INSN_ANDCCR, SEM_FN_NAME (fr30bf,andccr) },
// OBSOLETE   { FR30BF_INSN_ORCCR, SEM_FN_NAME (fr30bf,orccr) },
// OBSOLETE   { FR30BF_INSN_STILM, SEM_FN_NAME (fr30bf,stilm) },
// OBSOLETE   { FR30BF_INSN_ADDSP, SEM_FN_NAME (fr30bf,addsp) },
// OBSOLETE   { FR30BF_INSN_EXTSB, SEM_FN_NAME (fr30bf,extsb) },
// OBSOLETE   { FR30BF_INSN_EXTUB, SEM_FN_NAME (fr30bf,extub) },
// OBSOLETE   { FR30BF_INSN_EXTSH, SEM_FN_NAME (fr30bf,extsh) },
// OBSOLETE   { FR30BF_INSN_EXTUH, SEM_FN_NAME (fr30bf,extuh) },
// OBSOLETE   { FR30BF_INSN_LDM0, SEM_FN_NAME (fr30bf,ldm0) },
// OBSOLETE   { FR30BF_INSN_LDM1, SEM_FN_NAME (fr30bf,ldm1) },
// OBSOLETE   { FR30BF_INSN_STM0, SEM_FN_NAME (fr30bf,stm0) },
// OBSOLETE   { FR30BF_INSN_STM1, SEM_FN_NAME (fr30bf,stm1) },
// OBSOLETE   { FR30BF_INSN_ENTER, SEM_FN_NAME (fr30bf,enter) },
// OBSOLETE   { FR30BF_INSN_LEAVE, SEM_FN_NAME (fr30bf,leave) },
// OBSOLETE   { FR30BF_INSN_XCHB, SEM_FN_NAME (fr30bf,xchb) },
// OBSOLETE   { 0, 0 }
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* Add the semantic fns to IDESC_TABLE.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE SEM_FN_NAME (fr30bf,init_idesc_table) (SIM_CPU *current_cpu)
// OBSOLETE {
// OBSOLETE   IDESC *idesc_table = CPU_IDESC (current_cpu);
// OBSOLETE   const struct sem_fn_desc *sf;
// OBSOLETE   int mach_num = MACH_NUM (CPU_MACH (current_cpu));
// OBSOLETE 
// OBSOLETE   for (sf = &sem_fns[0]; sf->fn != 0; ++sf)
// OBSOLETE     {
// OBSOLETE       const CGEN_INSN *insn = idesc_table[sf->index].idata;
// OBSOLETE       int valid_p = (CGEN_INSN_VIRTUAL_P (insn)
// OBSOLETE 		     || CGEN_INSN_MACH_HAS_P (insn, mach_num));
// OBSOLETE #if FAST_P
// OBSOLETE       if (valid_p)
// OBSOLETE 	idesc_table[sf->index].sem_fast = sf->fn;
// OBSOLETE       else
// OBSOLETE 	idesc_table[sf->index].sem_fast = SEM_FN_NAME (fr30bf,x_invalid);
// OBSOLETE #else
// OBSOLETE       if (valid_p)
// OBSOLETE 	idesc_table[sf->index].sem_full = sf->fn;
// OBSOLETE       else
// OBSOLETE 	idesc_table[sf->index].sem_full = SEM_FN_NAME (fr30bf,x_invalid);
// OBSOLETE #endif
// OBSOLETE     }
// OBSOLETE }
@


1.5
log
@Obsolete fr30.
@
text
@@


1.4
log
@2001-11-14  Dave Brolley  <brolley@@redhat.com>

	* arch.c: Regenerate.
	* arch.h: Regenerate.
	* cpu.c: Regenerate.
	* cpu.h: Regenerate.
	* cpuall.h: Regenerate.
	* decode.c: Regenerate.
	* decode.h: Regenerate.
	* model.c: Regenerate.
	* sem-switch.c: Regenerate.
	* sem.c: Regenerate.
@
text
@d1 5729
a5729 5730
/* Simulator instruction semantics for fr30bf.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

This file is part of the GNU simulators.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

#define WANT_CPU fr30bf
#define WANT_CPU_FR30BF

#include "sim-main.h"
#include "cgen-mem.h"
#include "cgen-ops.h"

#undef GET_ATTR
#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
#define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_##attr)
#else
#define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_/**/attr)
#endif

/* This is used so that we can compile two copies of the semantic code,
   one with full feature support and one without that runs fast(er).
   FAST_P, when desired, is defined on the command line, -DFAST_P=1.  */
#if FAST_P
#define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_semf_,fn)
#undef TRACE_RESULT
#define TRACE_RESULT(cpu, abuf, name, type, val)
#else
#define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_sem_,fn)
#endif

/* x-invalid: --invalid-- */

static SEM_PC
SEM_FN_NAME (fr30bf,x_invalid) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
    /* Update the recorded pc in the cpu state struct.
       Only necessary for WITH_SCACHE case, but to avoid the
       conditional compilation ....  */
    SET_H_PC (pc);
    /* Virtual insns have zero size.  Overwrite vpc with address of next insn
       using the default-insn-bitsize spec.  When executing insns in parallel
       we may want to queue the fault and continue execution.  */
    vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
    vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
  }

  return vpc;
#undef FLD
}

/* x-after: --after-- */

static SEM_PC
SEM_FN_NAME (fr30bf,x_after) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
    fr30bf_pbb_after (current_cpu, sem_arg);
#endif
  }

  return vpc;
#undef FLD
}

/* x-before: --before-- */

static SEM_PC
SEM_FN_NAME (fr30bf,x_before) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
    fr30bf_pbb_before (current_cpu, sem_arg);
#endif
  }

  return vpc;
#undef FLD
}

/* x-cti-chain: --cti-chain-- */

static SEM_PC
SEM_FN_NAME (fr30bf,x_cti_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
#ifdef DEFINE_SWITCH
    vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
			       pbb_br_type, pbb_br_npc);
    BREAK (sem);
#else
    /* FIXME: Allow provision of explicit ifmt spec in insn spec.  */
    vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
			       CPU_PBB_BR_TYPE (current_cpu),
			       CPU_PBB_BR_NPC (current_cpu));
#endif
#endif
  }

  return vpc;
#undef FLD
}

/* x-chain: --chain-- */

static SEM_PC
SEM_FN_NAME (fr30bf,x_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
    vpc = fr30bf_pbb_chain (current_cpu, sem_arg);
#ifdef DEFINE_SWITCH
    BREAK (sem);
#endif
#endif
  }

  return vpc;
#undef FLD
}

/* x-begin: --begin-- */

static SEM_PC
SEM_FN_NAME (fr30bf,x_begin) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);

  {
#if WITH_SCACHE_PBB_FR30BF
#if defined DEFINE_SWITCH || defined FAST_P
    /* In the switch case FAST_P is a constant, allowing several optimizations
       in any called inline functions.  */
    vpc = fr30bf_pbb_begin (current_cpu, FAST_P);
#else
#if 0 /* cgen engine can't handle dynamic fast/full switching yet.  */
    vpc = fr30bf_pbb_begin (current_cpu, STATE_RUN_FAST_P (CPU_STATE (current_cpu)));
#else
    vpc = fr30bf_pbb_begin (current_cpu, 0);
#endif
#endif
#endif
  }

  return vpc;
#undef FLD
}

/* add: add $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,add) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* addi: add $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,addi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* add2: add2 $m4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,add2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* addc: addc $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,addc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = ADDCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
  {
    BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* addn: addn $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,addn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* addni: addn $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,addni) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* addn2: addn2 $m4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,addn2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* sub: sub $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,sub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* subc: subc $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,subc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = SUBCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
  {
    BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* subn: subn $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,subn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* cmp: cmp $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,cmp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp1;
  {
    BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  tmp_tmp1 = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp1, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp1, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* cmpi: cmp $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,cmpi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp1;
  {
    BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_u4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_u4));
{
  {
    BI opval = EQSI (tmp_tmp1, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp1, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* cmp2: cmp2 $m4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,cmp2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp1;
  {
    BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
  {
    BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_m4), 0);
    CPU (h_cbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_m4));
{
  {
    BI opval = EQSI (tmp_tmp1, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp1, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* and: and $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,and) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ANDSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* or: or $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,or) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ORSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* eor: eor $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,eor) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = XORSI (* FLD (i_Ri), * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
{
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
}

  return vpc;
#undef FLD
}

/* andm: and $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,andm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = ANDSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* andh: andh $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,andh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  HI tmp_tmp;
  tmp_tmp = ANDHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQHI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTHI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    HI opval = tmp_tmp;
    SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* andb: andb $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,andb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ANDQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    QI opval = tmp_tmp;
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* orm: or $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,orm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = ORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* orh: orh $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,orh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  HI tmp_tmp;
  tmp_tmp = ORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQHI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTHI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    HI opval = tmp_tmp;
    SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* orb: orb $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,orb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    QI opval = tmp_tmp;
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* eorm: eor $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,eorm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = XORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQSI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTSI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* eorh: eorh $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,eorh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  HI tmp_tmp;
  tmp_tmp = XORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQHI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTHI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    HI opval = tmp_tmp;
    SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* eorb: eorb $Rj,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,eorb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = XORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
{
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}
  {
    QI opval = tmp_tmp;
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* bandl: bandl $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,bandl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ANDQI (ORQI (FLD (f_u4), 240), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* borl: borl $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,borl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* beorl: beorl $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,beorl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = XORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* bandh: bandh $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,bandh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ANDQI (ORQI (SLLQI (FLD (f_u4), 4), 15), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* borh: borh $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,borh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = ORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* beorh: beorh $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,beorh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = XORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
    SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* btstl: btstl $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,btstl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ANDQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = 0;
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* btsth: btsth $u4,@@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,btsth) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  QI tmp_tmp;
  tmp_tmp = ANDQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
  {
    BI opval = EQQI (tmp_tmp, 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = LTQI (tmp_tmp, 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* mul: mul $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,mul) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  DI tmp_tmp;
  tmp_tmp = MULDI (EXTSIDI (* FLD (i_Rj)), EXTSIDI (* FLD (i_Ri)));
  {
    SI opval = TRUNCDISI (tmp_tmp);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQDI (tmp_tmp, MAKEDI (0, 0));
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = ORIF (GTDI (tmp_tmp, MAKEDI (0, 2147483647)), LTDI (tmp_tmp, NEGDI (MAKEDI (0, 0x80000000))));
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* mulu: mulu $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,mulu) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  DI tmp_tmp;
  tmp_tmp = MULDI (ZEXTSIDI (* FLD (i_Rj)), ZEXTSIDI (* FLD (i_Ri)));
  {
    SI opval = TRUNCDISI (tmp_tmp);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 4)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    BI opval = NESI (GET_H_DR (((UINT) 4)), 0);
    CPU (h_vbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* mulh: mulh $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,mulh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = MULHI (TRUNCSIHI (* FLD (i_Rj)), TRUNCSIHI (* FLD (i_Ri)));
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* muluh: muluh $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,muluh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = MULSI (ANDSI (* FLD (i_Rj), 65535), ANDSI (* FLD (i_Ri), 65535));
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* div0s: div0s $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,div0s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
    CPU (h_d0bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
  }
  {
    BI opval = XORBI (CPU (h_d0bit), LTSI (* FLD (i_Ri), 0));
    CPU (h_d1bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
  }
if (NEBI (CPU (h_d0bit), 0)) {
  {
    SI opval = 0xffffffff;
    SET_H_DR (((UINT) 4), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
} else {
  {
    SI opval = 0;
    SET_H_DR (((UINT) 4), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* div0u: div0u $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,div0u) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    BI opval = 0;
    CPU (h_d0bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
  }
  {
    BI opval = 0;
    CPU (h_d1bit) = opval;
    TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
  }
  {
    SI opval = 0;
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* div1: div1 $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,div1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  {
    SI opval = SLLSI (GET_H_DR (((UINT) 4)), 1);
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
if (LTSI (GET_H_DR (((UINT) 5)), 0)) {
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 4)), 1);
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
  {
    SI opval = SLLSI (GET_H_DR (((UINT) 5)), 1);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
if (EQBI (CPU (h_d1bit), 1)) {
{
  tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
} else {
{
  tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
}
if (NOTBI (XORBI (XORBI (CPU (h_d0bit), CPU (h_d1bit)), CPU (h_cbit)))) {
{
  {
    SI opval = tmp_tmp;
    SET_H_DR (((UINT) 4), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = ORSI (GET_H_DR (((UINT) 5)), 1);
    SET_H_DR (((UINT) 5), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
}
  {
    BI opval = EQSI (GET_H_DR (((UINT) 4)), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* div2: div2 $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,div2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
if (EQBI (CPU (h_d1bit), 1)) {
{
  tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
} else {
{
  tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
  {
    BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
}
if (EQSI (tmp_tmp, 0)) {
{
  {
    BI opval = 1;
    CPU (h_zbit) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
  {
    SI opval = 0;
    SET_H_DR (((UINT) 4), opval);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_zbit) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* div3: div3 */

static SEM_PC
SEM_FN_NAME (fr30bf,div3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (EQBI (CPU (h_zbit), 1)) {
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 5)), 1);
    SET_H_DR (((UINT) 5), opval);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* div4s: div4s */

static SEM_PC
SEM_FN_NAME (fr30bf,div4s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (EQBI (CPU (h_d1bit), 1)) {
  {
    SI opval = NEGSI (GET_H_DR (((UINT) 5)));
    SET_H_DR (((UINT) 5), opval);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* lsl: lsl $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,lsl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ANDSI (* FLD (i_Rj), 31);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* lsli: lsl $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,lsli) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = FLD (f_u4);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* lsl2: lsl2 $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,lsl2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ADDSI (FLD (f_u4), 16);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* lsr: lsr $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,lsr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ANDSI (* FLD (i_Rj), 31);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* lsri: lsr $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,lsri) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = FLD (f_u4);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* lsr2: lsr2 $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,lsr2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ADDSI (FLD (f_u4), 16);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* asr: asr $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,asr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ANDSI (* FLD (i_Rj), 31);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRASI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* asri: asr $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,asri) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = FLD (f_u4);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRASI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* asr2: asr2 $u4,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,asr2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_shift;
  tmp_shift = ADDSI (FLD (f_u4), 16);
if (NESI (tmp_shift, 0)) {
{
  {
    BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
  {
    SI opval = SRASI (* FLD (i_Ri), tmp_shift);
    * FLD (i_Ri) = opval;
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
} else {
  {
    BI opval = 0;
    CPU (h_cbit) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
  }
}
  {
    BI opval = LTSI (* FLD (i_Ri), 0);
    CPU (h_nbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
  }
  {
    BI opval = EQSI (* FLD (i_Ri), 0);
    CPU (h_zbit) = opval;
    TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
  }
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* ldi8: ldi:8 $i8,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldi8) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldi8.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = FLD (f_i8);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldi20: ldi:20 $i20,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldi20) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldi20.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

  {
    SI opval = FLD (f_i20);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldi32: ldi:32 $i32,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldi32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldi32.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 6);

  {
    SI opval = FLD (f_i32);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ld: ld @@$Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* lduh: lduh @@$Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,lduh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUHI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldub: ldub @@$Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr13: ld @@($R13,$Rj),$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr13uh: lduh @@($R13,$Rj),$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr13uh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr13ub: ldub @@($R13,$Rj),$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr13ub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr14: ld @@($R14,$disp10),$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr14) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr14.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr14uh: lduh @@($R14,$disp9),$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr14uh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr14uh.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr14ub: ldub @@($R14,$disp8),$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr14ub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr14ub.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr15: ld @@($R15,$udisp6),$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr15) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr15.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_udisp6), CPU (h_gr[((UINT) 15)])));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldr15gr: ld @@$R15+,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr15gr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr15gr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
if (NESI (FLD (f_Ri), 15)) {
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* ldr15dr: ld @@$R15+,$Rs2 */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr15dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    SET_H_DR (FLD (f_Rs2), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* ldr15ps: ld @@$R15+,$ps */

static SEM_PC
SEM_FN_NAME (fr30bf,ldr15ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addsp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    SET_H_PS (opval);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* st: st $Ri,@@$Rj */

static SEM_PC
SEM_FN_NAME (fr30bf,st) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* sth: sth $Ri,@@$Rj */

static SEM_PC
SEM_FN_NAME (fr30bf,sth) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = * FLD (i_Ri);
    SETMEMHI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stb: stb $Ri,@@$Rj */

static SEM_PC
SEM_FN_NAME (fr30bf,stb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = * FLD (i_Ri);
    SETMEMQI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str13: st $Ri,@@($R13,$Rj) */

static SEM_PC
SEM_FN_NAME (fr30bf,str13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str13h: sth $Ri,@@($R13,$Rj) */

static SEM_PC
SEM_FN_NAME (fr30bf,str13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = * FLD (i_Ri);
    SETMEMHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str13b: stb $Ri,@@($R13,$Rj) */

static SEM_PC
SEM_FN_NAME (fr30bf,str13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = * FLD (i_Ri);
    SETMEMQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str14: st $Ri,@@($R14,$disp10) */

static SEM_PC
SEM_FN_NAME (fr30bf,str14) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str14.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str14h: sth $Ri,@@($R14,$disp9) */

static SEM_PC
SEM_FN_NAME (fr30bf,str14h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str14h.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = * FLD (i_Ri);
    SETMEMHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str14b: stb $Ri,@@($R14,$disp8) */

static SEM_PC
SEM_FN_NAME (fr30bf,str14b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str14b.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = * FLD (i_Ri);
    SETMEMQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str15: st $Ri,@@($R15,$udisp6) */

static SEM_PC
SEM_FN_NAME (fr30bf,str15) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str15.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_udisp6)), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* str15gr: st $Ri,@@-$R15 */

static SEM_PC
SEM_FN_NAME (fr30bf,str15gr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_str15gr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = * FLD (i_Ri);
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* str15dr: st $Rs2,@@-$R15 */

static SEM_PC
SEM_FN_NAME (fr30bf,str15dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = GET_H_DR (FLD (f_Rs2));
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* str15ps: st $ps,@@-$R15 */

static SEM_PC
SEM_FN_NAME (fr30bf,str15ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addsp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = GET_H_PS ();
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* mov: mov $Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,mov) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldr13.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Rj);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* movdr: mov $Rs1,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,movdr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_movdr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GET_H_DR (FLD (f_Rs1));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* movps: mov $ps,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,movps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_movdr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GET_H_PS ();
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* mov2dr: mov $Ri,$Rs1 */

static SEM_PC
SEM_FN_NAME (fr30bf,mov2dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = * FLD (i_Ri);
    SET_H_DR (FLD (f_Rs1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* mov2ps: mov $Ri,$ps */

static SEM_PC
SEM_FN_NAME (fr30bf,mov2ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = * FLD (i_Ri);
    SET_H_PS (opval);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* jmp: jmp @@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,jmp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* jmpd: jmp:d @@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,jmpd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* callr: call @@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,callr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ADDSI (pc, 2);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* callrd: call:d @@$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,callrd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_mov2dr.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
{
  {
    SI opval = ADDSI (pc, 4);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = * FLD (i_Ri);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* call: call $label12 */

static SEM_PC
SEM_FN_NAME (fr30bf,call) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_call.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ADDSI (pc, 2);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = FLD (i_label12);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* calld: call:d $label12 */

static SEM_PC
SEM_FN_NAME (fr30bf,calld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_call.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
{
  {
    SI opval = ADDSI (pc, 4);
    SET_H_DR (((UINT) 1), opval);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    USI opval = FLD (i_label12);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* ret: ret */

static SEM_PC
SEM_FN_NAME (fr30bf,ret) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = GET_H_DR (((UINT) 1));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* ret:d: ret:d */

static SEM_PC
SEM_FN_NAME (fr30bf,ret_d) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = GET_H_DR (((UINT) 1));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* int: int $u8 */

static SEM_PC
SEM_FN_NAME (fr30bf,int) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_int.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
; /*clobber*/
; /*clobber*/
; /*clobber*/
  {
    SI opval = fr30_int (current_cpu, pc, FLD (f_u8));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* inte: inte */

static SEM_PC
SEM_FN_NAME (fr30bf,inte) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
; /*clobber*/
; /*clobber*/
; /*clobber*/
  {
    SI opval = fr30_inte (current_cpu, pc);
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* reti: reti */

static SEM_PC
SEM_FN_NAME (fr30bf,reti) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (EQBI (GET_H_SBIT (), 0)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
    SET_H_DR (((UINT) 2), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
    SET_H_PS (opval);
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
    SET_H_DR (((UINT) 2), opval);
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
} else {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
    SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
    SET_H_DR (((UINT) 3), opval);
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
    SET_H_PS (opval);
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
  }
  {
    SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
    SET_H_DR (((UINT) 3), opval);
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* brad: bra:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,brad) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bra: bra $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bra) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }

  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bnod: bno:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bnod) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
((void) 0); /*nop*/
}

  return vpc;
#undef FLD
}

/* bno: bno $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bno) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

((void) 0); /*nop*/

  return vpc;
#undef FLD
}

/* beqd: beq:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,beqd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_zbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* beq: beq $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,beq) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_zbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bned: bne:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bned) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bne: bne $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bne) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bcd: bc:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bcd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_cbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bc: bc $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_cbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bncd: bnc:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bncd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_cbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bnc: bnc $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bnc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_cbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bnd: bn:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bnd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_nbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bn: bn $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_nbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bpd: bp:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bpd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bp: bp $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bvd: bv:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bvd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (CPU (h_vbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bv: bv $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (CPU (h_vbit)) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bnvd: bnv:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bnvd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (CPU (h_vbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bnv: bnv $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bnv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (CPU (h_vbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 2);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bltd: blt:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bltd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* blt: blt $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,blt) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bged: bge:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bged) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bge: bge $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bge) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bled: ble:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bled) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* ble: ble $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,ble) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bgtd: bgt:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bgtd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bgt: bgt $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bgt) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* blsd: bls:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,blsd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bls: bls $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bls) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bhid: bhi:d $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bhid) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* bhi: bhi $label9 */

static SEM_PC
SEM_FN_NAME (fr30bf,bhi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_brad.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_BRANCH_INIT
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
  {
    USI opval = FLD (i_label9);
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
  }
}

  abuf->written = written;
  SEM_BRANCH_FINI (vpc);
  return vpc;
#undef FLD
}

/* dmovr13: dmov $R13,@@$dir10 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmovr13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* dmovr13h: dmovh $R13,@@$dir9 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmovr13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    HI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* dmovr13b: dmovb $R13,@@$dir8 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmovr13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    QI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* dmovr13pi: dmov @@$R13+,@@$dir10 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmovr13pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
    SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* dmovr13pih: dmovh @@$R13+,@@$dir9 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmovr13pih) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    HI opval = GETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
    SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* dmovr13pib: dmovb @@$R13+,@@$dir8 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmovr13pib) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    QI opval = GETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
    SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* dmovr15pi: dmov @@$R15+,@@$dir10 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmovr15pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* dmov2r13: dmov @@$dir10,$R13 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmov2r13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* dmov2r13h: dmovh @@$dir9,$R13 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmov2r13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* dmov2r13b: dmovb @@$dir8,$R13 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmov2r13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* dmov2r13pi: dmov @@$dir10,@@$R13+ */

static SEM_PC
SEM_FN_NAME (fr30bf,dmov2r13pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* dmov2r13pih: dmovh @@$dir9,@@$R13+ */

static SEM_PC
SEM_FN_NAME (fr30bf,dmov2r13pih) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    HI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
    SETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* dmov2r13pib: dmovb @@$dir8,@@$R13+ */

static SEM_PC
SEM_FN_NAME (fr30bf,dmov2r13pib) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    QI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
    SETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
    CPU (h_gr[((UINT) 13)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* dmov2r15pd: dmov @@$dir10,@@-$R15 */

static SEM_PC
SEM_FN_NAME (fr30bf,dmov2r15pd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* ldres: ldres @@$Ri+,$u4 */

static SEM_PC
SEM_FN_NAME (fr30bf,ldres) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), 4);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stres: stres $u4,@@$Ri+ */

static SEM_PC
SEM_FN_NAME (fr30bf,stres) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (* FLD (i_Ri), 4);
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* copop: copop $u4c,$ccc,$CRj,$CRi */

static SEM_PC
SEM_FN_NAME (fr30bf,copop) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

  return vpc;
#undef FLD
}

/* copld: copld $u4c,$ccc,$Rjc,$CRi */

static SEM_PC
SEM_FN_NAME (fr30bf,copld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

  return vpc;
#undef FLD
}

/* copst: copst $u4c,$ccc,$CRj,$Ric */

static SEM_PC
SEM_FN_NAME (fr30bf,copst) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

  return vpc;
#undef FLD
}

/* copsv: copsv $u4c,$ccc,$CRj,$Ric */

static SEM_PC
SEM_FN_NAME (fr30bf,copsv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);

((void) 0); /*nop*/

  return vpc;
#undef FLD
}

/* nop: nop */

static SEM_PC
SEM_FN_NAME (fr30bf,nop) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.fmt_empty.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

((void) 0); /*nop*/

  return vpc;
#undef FLD
}

/* andccr: andccr $u8 */

static SEM_PC
SEM_FN_NAME (fr30bf,andccr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_int.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    UQI opval = ANDQI (GET_H_CCR (), FLD (f_u8));
    SET_H_CCR (opval);
    TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* orccr: orccr $u8 */

static SEM_PC
SEM_FN_NAME (fr30bf,orccr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_int.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    UQI opval = ORQI (GET_H_CCR (), FLD (f_u8));
    SET_H_CCR (opval);
    TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* stilm: stilm $u8 */

static SEM_PC
SEM_FN_NAME (fr30bf,stilm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_int.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    UQI opval = ANDSI (FLD (f_u8), 31);
    SET_H_ILM (opval);
    TRACE_RESULT (current_cpu, abuf, "ilm", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* addsp: addsp $s10 */

static SEM_PC
SEM_FN_NAME (fr30bf,addsp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_addsp.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_s10));
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* extsb: extsb $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,extsb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = EXTQISI (ANDQI (* FLD (i_Ri), 255));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* extub: extub $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,extub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ZEXTQISI (ANDQI (* FLD (i_Ri), 255));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* extsh: extsh $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,extsh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = EXTHISI (ANDHI (* FLD (i_Ri), 65535));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* extuh: extuh $Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,extuh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add2.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

  {
    SI opval = ZEXTHISI (ANDHI (* FLD (i_Ri), 65535));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }

  return vpc;
#undef FLD
}

/* ldm0: ldm0 ($reglist_low_ld) */

static SEM_PC
SEM_FN_NAME (fr30bf,ldm0) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldm0.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_low_ld), 1)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 0)]) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 2)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 1)]) = opval;
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 4)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 2)]) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 8)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 3)]) = opval;
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 16)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 4)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 32)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 5)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 64)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 6)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_ld), 128)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 7)]) = opval;
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* ldm1: ldm1 ($reglist_hi_ld) */

static SEM_PC
SEM_FN_NAME (fr30bf,ldm1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_ldm1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_hi_ld), 1)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 8)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 2)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 9)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 4)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 10)]) = opval;
    written |= (1 << 3);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 8)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 11)]) = opval;
    written |= (1 << 4);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 16)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 12)]) = opval;
    written |= (1 << 5);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 32)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 13)]) = opval;
    written |= (1 << 6);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 64)) {
{
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 14)]) = opval;
    written |= (1 << 7);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_ld), 128)) {
  {
    SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 8);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* stm0: stm0 ($reglist_low_st) */

static SEM_PC
SEM_FN_NAME (fr30bf,stm0) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_stm0.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_low_st), 1)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 7)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 2)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 6)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 4)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 5)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 8)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 4)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 16)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 3)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 32)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 2)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 64)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 1)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_low_st), 128)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 0)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 11);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* stm1: stm1 ($reglist_hi_st) */

static SEM_PC
SEM_FN_NAME (fr30bf,stm1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_stm1.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
if (ANDSI (FLD (f_reglist_hi_st), 1)) {
{
  SI tmp_save_r15;
  tmp_save_r15 = CPU (h_gr[((UINT) 15)]);
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = tmp_save_r15;
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 2)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 14)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 4)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 13)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 8)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 12)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 16)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 11)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 32)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 10)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 64)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 9)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
if (ANDSI (FLD (f_reglist_hi_st), 128)) {
{
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    written |= (1 << 9);
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = CPU (h_gr[((UINT) 8)]);
    SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
    written |= (1 << 10);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}
}
}

  abuf->written = written;
  return vpc;
#undef FLD
}

/* enter: enter $u10 */

static SEM_PC
SEM_FN_NAME (fr30bf,enter) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_enter.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
  {
    SI opval = CPU (h_gr[((UINT) 14)]);
    SETMEMSI (current_cpu, pc, tmp_tmp, opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
  {
    SI opval = tmp_tmp;
    CPU (h_gr[((UINT) 14)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), FLD (f_u10));
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* leave: leave */

static SEM_PC
SEM_FN_NAME (fr30bf,leave) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_enter.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  {
    SI opval = ADDSI (CPU (h_gr[((UINT) 14)]), 4);
    CPU (h_gr[((UINT) 15)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    SI opval = GETMEMSI (current_cpu, pc, SUBSI (CPU (h_gr[((UINT) 15)]), 4));
    CPU (h_gr[((UINT) 14)]) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* xchb: xchb @@$Rj,$Ri */

static SEM_PC
SEM_FN_NAME (fr30bf,xchb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
{
#define FLD(f) abuf->fields.sfmt_add.f
  ARGBUF *abuf = SEM_ARGBUF (sem_arg);
  int UNUSED written = 0;
  IADDR UNUSED pc = abuf->addr;
  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);

{
  SI tmp_tmp;
  tmp_tmp = * FLD (i_Ri);
  {
    SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
    * FLD (i_Ri) = opval;
    TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
  }
  {
    UQI opval = tmp_tmp;
    SETMEMUQI (current_cpu, pc, * FLD (i_Rj), opval);
    TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
  }
}

  return vpc;
#undef FLD
}

/* Table of all semantic fns.  */

static const struct sem_fn_desc sem_fns[] = {
  { FR30BF_INSN_X_INVALID, SEM_FN_NAME (fr30bf,x_invalid) },
  { FR30BF_INSN_X_AFTER, SEM_FN_NAME (fr30bf,x_after) },
  { FR30BF_INSN_X_BEFORE, SEM_FN_NAME (fr30bf,x_before) },
  { FR30BF_INSN_X_CTI_CHAIN, SEM_FN_NAME (fr30bf,x_cti_chain) },
  { FR30BF_INSN_X_CHAIN, SEM_FN_NAME (fr30bf,x_chain) },
  { FR30BF_INSN_X_BEGIN, SEM_FN_NAME (fr30bf,x_begin) },
  { FR30BF_INSN_ADD, SEM_FN_NAME (fr30bf,add) },
  { FR30BF_INSN_ADDI, SEM_FN_NAME (fr30bf,addi) },
  { FR30BF_INSN_ADD2, SEM_FN_NAME (fr30bf,add2) },
  { FR30BF_INSN_ADDC, SEM_FN_NAME (fr30bf,addc) },
  { FR30BF_INSN_ADDN, SEM_FN_NAME (fr30bf,addn) },
  { FR30BF_INSN_ADDNI, SEM_FN_NAME (fr30bf,addni) },
  { FR30BF_INSN_ADDN2, SEM_FN_NAME (fr30bf,addn2) },
  { FR30BF_INSN_SUB, SEM_FN_NAME (fr30bf,sub) },
  { FR30BF_INSN_SUBC, SEM_FN_NAME (fr30bf,subc) },
  { FR30BF_INSN_SUBN, SEM_FN_NAME (fr30bf,subn) },
  { FR30BF_INSN_CMP, SEM_FN_NAME (fr30bf,cmp) },
  { FR30BF_INSN_CMPI, SEM_FN_NAME (fr30bf,cmpi) },
  { FR30BF_INSN_CMP2, SEM_FN_NAME (fr30bf,cmp2) },
  { FR30BF_INSN_AND, SEM_FN_NAME (fr30bf,and) },
  { FR30BF_INSN_OR, SEM_FN_NAME (fr30bf,or) },
  { FR30BF_INSN_EOR, SEM_FN_NAME (fr30bf,eor) },
  { FR30BF_INSN_ANDM, SEM_FN_NAME (fr30bf,andm) },
  { FR30BF_INSN_ANDH, SEM_FN_NAME (fr30bf,andh) },
  { FR30BF_INSN_ANDB, SEM_FN_NAME (fr30bf,andb) },
  { FR30BF_INSN_ORM, SEM_FN_NAME (fr30bf,orm) },
  { FR30BF_INSN_ORH, SEM_FN_NAME (fr30bf,orh) },
  { FR30BF_INSN_ORB, SEM_FN_NAME (fr30bf,orb) },
  { FR30BF_INSN_EORM, SEM_FN_NAME (fr30bf,eorm) },
  { FR30BF_INSN_EORH, SEM_FN_NAME (fr30bf,eorh) },
  { FR30BF_INSN_EORB, SEM_FN_NAME (fr30bf,eorb) },
  { FR30BF_INSN_BANDL, SEM_FN_NAME (fr30bf,bandl) },
  { FR30BF_INSN_BORL, SEM_FN_NAME (fr30bf,borl) },
  { FR30BF_INSN_BEORL, SEM_FN_NAME (fr30bf,beorl) },
  { FR30BF_INSN_BANDH, SEM_FN_NAME (fr30bf,bandh) },
  { FR30BF_INSN_BORH, SEM_FN_NAME (fr30bf,borh) },
  { FR30BF_INSN_BEORH, SEM_FN_NAME (fr30bf,beorh) },
  { FR30BF_INSN_BTSTL, SEM_FN_NAME (fr30bf,btstl) },
  { FR30BF_INSN_BTSTH, SEM_FN_NAME (fr30bf,btsth) },
  { FR30BF_INSN_MUL, SEM_FN_NAME (fr30bf,mul) },
  { FR30BF_INSN_MULU, SEM_FN_NAME (fr30bf,mulu) },
  { FR30BF_INSN_MULH, SEM_FN_NAME (fr30bf,mulh) },
  { FR30BF_INSN_MULUH, SEM_FN_NAME (fr30bf,muluh) },
  { FR30BF_INSN_DIV0S, SEM_FN_NAME (fr30bf,div0s) },
  { FR30BF_INSN_DIV0U, SEM_FN_NAME (fr30bf,div0u) },
  { FR30BF_INSN_DIV1, SEM_FN_NAME (fr30bf,div1) },
  { FR30BF_INSN_DIV2, SEM_FN_NAME (fr30bf,div2) },
  { FR30BF_INSN_DIV3, SEM_FN_NAME (fr30bf,div3) },
  { FR30BF_INSN_DIV4S, SEM_FN_NAME (fr30bf,div4s) },
  { FR30BF_INSN_LSL, SEM_FN_NAME (fr30bf,lsl) },
  { FR30BF_INSN_LSLI, SEM_FN_NAME (fr30bf,lsli) },
  { FR30BF_INSN_LSL2, SEM_FN_NAME (fr30bf,lsl2) },
  { FR30BF_INSN_LSR, SEM_FN_NAME (fr30bf,lsr) },
  { FR30BF_INSN_LSRI, SEM_FN_NAME (fr30bf,lsri) },
  { FR30BF_INSN_LSR2, SEM_FN_NAME (fr30bf,lsr2) },
  { FR30BF_INSN_ASR, SEM_FN_NAME (fr30bf,asr) },
  { FR30BF_INSN_ASRI, SEM_FN_NAME (fr30bf,asri) },
  { FR30BF_INSN_ASR2, SEM_FN_NAME (fr30bf,asr2) },
  { FR30BF_INSN_LDI8, SEM_FN_NAME (fr30bf,ldi8) },
  { FR30BF_INSN_LDI20, SEM_FN_NAME (fr30bf,ldi20) },
  { FR30BF_INSN_LDI32, SEM_FN_NAME (fr30bf,ldi32) },
  { FR30BF_INSN_LD, SEM_FN_NAME (fr30bf,ld) },
  { FR30BF_INSN_LDUH, SEM_FN_NAME (fr30bf,lduh) },
  { FR30BF_INSN_LDUB, SEM_FN_NAME (fr30bf,ldub) },
  { FR30BF_INSN_LDR13, SEM_FN_NAME (fr30bf,ldr13) },
  { FR30BF_INSN_LDR13UH, SEM_FN_NAME (fr30bf,ldr13uh) },
  { FR30BF_INSN_LDR13UB, SEM_FN_NAME (fr30bf,ldr13ub) },
  { FR30BF_INSN_LDR14, SEM_FN_NAME (fr30bf,ldr14) },
  { FR30BF_INSN_LDR14UH, SEM_FN_NAME (fr30bf,ldr14uh) },
  { FR30BF_INSN_LDR14UB, SEM_FN_NAME (fr30bf,ldr14ub) },
  { FR30BF_INSN_LDR15, SEM_FN_NAME (fr30bf,ldr15) },
  { FR30BF_INSN_LDR15GR, SEM_FN_NAME (fr30bf,ldr15gr) },
  { FR30BF_INSN_LDR15DR, SEM_FN_NAME (fr30bf,ldr15dr) },
  { FR30BF_INSN_LDR15PS, SEM_FN_NAME (fr30bf,ldr15ps) },
  { FR30BF_INSN_ST, SEM_FN_NAME (fr30bf,st) },
  { FR30BF_INSN_STH, SEM_FN_NAME (fr30bf,sth) },
  { FR30BF_INSN_STB, SEM_FN_NAME (fr30bf,stb) },
  { FR30BF_INSN_STR13, SEM_FN_NAME (fr30bf,str13) },
  { FR30BF_INSN_STR13H, SEM_FN_NAME (fr30bf,str13h) },
  { FR30BF_INSN_STR13B, SEM_FN_NAME (fr30bf,str13b) },
  { FR30BF_INSN_STR14, SEM_FN_NAME (fr30bf,str14) },
  { FR30BF_INSN_STR14H, SEM_FN_NAME (fr30bf,str14h) },
  { FR30BF_INSN_STR14B, SEM_FN_NAME (fr30bf,str14b) },
  { FR30BF_INSN_STR15, SEM_FN_NAME (fr30bf,str15) },
  { FR30BF_INSN_STR15GR, SEM_FN_NAME (fr30bf,str15gr) },
  { FR30BF_INSN_STR15DR, SEM_FN_NAME (fr30bf,str15dr) },
  { FR30BF_INSN_STR15PS, SEM_FN_NAME (fr30bf,str15ps) },
  { FR30BF_INSN_MOV, SEM_FN_NAME (fr30bf,mov) },
  { FR30BF_INSN_MOVDR, SEM_FN_NAME (fr30bf,movdr) },
  { FR30BF_INSN_MOVPS, SEM_FN_NAME (fr30bf,movps) },
  { FR30BF_INSN_MOV2DR, SEM_FN_NAME (fr30bf,mov2dr) },
  { FR30BF_INSN_MOV2PS, SEM_FN_NAME (fr30bf,mov2ps) },
  { FR30BF_INSN_JMP, SEM_FN_NAME (fr30bf,jmp) },
  { FR30BF_INSN_JMPD, SEM_FN_NAME (fr30bf,jmpd) },
  { FR30BF_INSN_CALLR, SEM_FN_NAME (fr30bf,callr) },
  { FR30BF_INSN_CALLRD, SEM_FN_NAME (fr30bf,callrd) },
  { FR30BF_INSN_CALL, SEM_FN_NAME (fr30bf,call) },
  { FR30BF_INSN_CALLD, SEM_FN_NAME (fr30bf,calld) },
  { FR30BF_INSN_RET, SEM_FN_NAME (fr30bf,ret) },
  { FR30BF_INSN_RET_D, SEM_FN_NAME (fr30bf,ret_d) },
  { FR30BF_INSN_INT, SEM_FN_NAME (fr30bf,int) },
  { FR30BF_INSN_INTE, SEM_FN_NAME (fr30bf,inte) },
  { FR30BF_INSN_RETI, SEM_FN_NAME (fr30bf,reti) },
  { FR30BF_INSN_BRAD, SEM_FN_NAME (fr30bf,brad) },
  { FR30BF_INSN_BRA, SEM_FN_NAME (fr30bf,bra) },
  { FR30BF_INSN_BNOD, SEM_FN_NAME (fr30bf,bnod) },
  { FR30BF_INSN_BNO, SEM_FN_NAME (fr30bf,bno) },
  { FR30BF_INSN_BEQD, SEM_FN_NAME (fr30bf,beqd) },
  { FR30BF_INSN_BEQ, SEM_FN_NAME (fr30bf,beq) },
  { FR30BF_INSN_BNED, SEM_FN_NAME (fr30bf,bned) },
  { FR30BF_INSN_BNE, SEM_FN_NAME (fr30bf,bne) },
  { FR30BF_INSN_BCD, SEM_FN_NAME (fr30bf,bcd) },
  { FR30BF_INSN_BC, SEM_FN_NAME (fr30bf,bc) },
  { FR30BF_INSN_BNCD, SEM_FN_NAME (fr30bf,bncd) },
  { FR30BF_INSN_BNC, SEM_FN_NAME (fr30bf,bnc) },
  { FR30BF_INSN_BND, SEM_FN_NAME (fr30bf,bnd) },
  { FR30BF_INSN_BN, SEM_FN_NAME (fr30bf,bn) },
  { FR30BF_INSN_BPD, SEM_FN_NAME (fr30bf,bpd) },
  { FR30BF_INSN_BP, SEM_FN_NAME (fr30bf,bp) },
  { FR30BF_INSN_BVD, SEM_FN_NAME (fr30bf,bvd) },
  { FR30BF_INSN_BV, SEM_FN_NAME (fr30bf,bv) },
  { FR30BF_INSN_BNVD, SEM_FN_NAME (fr30bf,bnvd) },
  { FR30BF_INSN_BNV, SEM_FN_NAME (fr30bf,bnv) },
  { FR30BF_INSN_BLTD, SEM_FN_NAME (fr30bf,bltd) },
  { FR30BF_INSN_BLT, SEM_FN_NAME (fr30bf,blt) },
  { FR30BF_INSN_BGED, SEM_FN_NAME (fr30bf,bged) },
  { FR30BF_INSN_BGE, SEM_FN_NAME (fr30bf,bge) },
  { FR30BF_INSN_BLED, SEM_FN_NAME (fr30bf,bled) },
  { FR30BF_INSN_BLE, SEM_FN_NAME (fr30bf,ble) },
  { FR30BF_INSN_BGTD, SEM_FN_NAME (fr30bf,bgtd) },
  { FR30BF_INSN_BGT, SEM_FN_NAME (fr30bf,bgt) },
  { FR30BF_INSN_BLSD, SEM_FN_NAME (fr30bf,blsd) },
  { FR30BF_INSN_BLS, SEM_FN_NAME (fr30bf,bls) },
  { FR30BF_INSN_BHID, SEM_FN_NAME (fr30bf,bhid) },
  { FR30BF_INSN_BHI, SEM_FN_NAME (fr30bf,bhi) },
  { FR30BF_INSN_DMOVR13, SEM_FN_NAME (fr30bf,dmovr13) },
  { FR30BF_INSN_DMOVR13H, SEM_FN_NAME (fr30bf,dmovr13h) },
  { FR30BF_INSN_DMOVR13B, SEM_FN_NAME (fr30bf,dmovr13b) },
  { FR30BF_INSN_DMOVR13PI, SEM_FN_NAME (fr30bf,dmovr13pi) },
  { FR30BF_INSN_DMOVR13PIH, SEM_FN_NAME (fr30bf,dmovr13pih) },
  { FR30BF_INSN_DMOVR13PIB, SEM_FN_NAME (fr30bf,dmovr13pib) },
  { FR30BF_INSN_DMOVR15PI, SEM_FN_NAME (fr30bf,dmovr15pi) },
  { FR30BF_INSN_DMOV2R13, SEM_FN_NAME (fr30bf,dmov2r13) },
  { FR30BF_INSN_DMOV2R13H, SEM_FN_NAME (fr30bf,dmov2r13h) },
  { FR30BF_INSN_DMOV2R13B, SEM_FN_NAME (fr30bf,dmov2r13b) },
  { FR30BF_INSN_DMOV2R13PI, SEM_FN_NAME (fr30bf,dmov2r13pi) },
  { FR30BF_INSN_DMOV2R13PIH, SEM_FN_NAME (fr30bf,dmov2r13pih) },
  { FR30BF_INSN_DMOV2R13PIB, SEM_FN_NAME (fr30bf,dmov2r13pib) },
  { FR30BF_INSN_DMOV2R15PD, SEM_FN_NAME (fr30bf,dmov2r15pd) },
  { FR30BF_INSN_LDRES, SEM_FN_NAME (fr30bf,ldres) },
  { FR30BF_INSN_STRES, SEM_FN_NAME (fr30bf,stres) },
  { FR30BF_INSN_COPOP, SEM_FN_NAME (fr30bf,copop) },
  { FR30BF_INSN_COPLD, SEM_FN_NAME (fr30bf,copld) },
  { FR30BF_INSN_COPST, SEM_FN_NAME (fr30bf,copst) },
  { FR30BF_INSN_COPSV, SEM_FN_NAME (fr30bf,copsv) },
  { FR30BF_INSN_NOP, SEM_FN_NAME (fr30bf,nop) },
  { FR30BF_INSN_ANDCCR, SEM_FN_NAME (fr30bf,andccr) },
  { FR30BF_INSN_ORCCR, SEM_FN_NAME (fr30bf,orccr) },
  { FR30BF_INSN_STILM, SEM_FN_NAME (fr30bf,stilm) },
  { FR30BF_INSN_ADDSP, SEM_FN_NAME (fr30bf,addsp) },
  { FR30BF_INSN_EXTSB, SEM_FN_NAME (fr30bf,extsb) },
  { FR30BF_INSN_EXTUB, SEM_FN_NAME (fr30bf,extub) },
  { FR30BF_INSN_EXTSH, SEM_FN_NAME (fr30bf,extsh) },
  { FR30BF_INSN_EXTUH, SEM_FN_NAME (fr30bf,extuh) },
  { FR30BF_INSN_LDM0, SEM_FN_NAME (fr30bf,ldm0) },
  { FR30BF_INSN_LDM1, SEM_FN_NAME (fr30bf,ldm1) },
  { FR30BF_INSN_STM0, SEM_FN_NAME (fr30bf,stm0) },
  { FR30BF_INSN_STM1, SEM_FN_NAME (fr30bf,stm1) },
  { FR30BF_INSN_ENTER, SEM_FN_NAME (fr30bf,enter) },
  { FR30BF_INSN_LEAVE, SEM_FN_NAME (fr30bf,leave) },
  { FR30BF_INSN_XCHB, SEM_FN_NAME (fr30bf,xchb) },
  { 0, 0 }
};

/* Add the semantic fns to IDESC_TABLE.  */

void
SEM_FN_NAME (fr30bf,init_idesc_table) (SIM_CPU *current_cpu)
{
  IDESC *idesc_table = CPU_IDESC (current_cpu);
  const struct sem_fn_desc *sf;
  int mach_num = MACH_NUM (CPU_MACH (current_cpu));

  for (sf = &sem_fns[0]; sf->fn != 0; ++sf)
    {
      const CGEN_INSN *insn = idesc_table[sf->index].idata;
      int valid_p = (CGEN_INSN_VIRTUAL_P (insn)
		     || CGEN_INSN_MACH_HAS_P (insn, mach_num));
#if FAST_P
      if (valid_p)
	idesc_table[sf->index].sem_fast = sf->fn;
      else
	idesc_table[sf->index].sem_fast = SEM_FN_NAME (fr30bf,x_invalid);
#else
      if (valid_p)
	idesc_table[sf->index].sem_full = sf->fn;
      else
	idesc_table[sf->index].sem_full = SEM_FN_NAME (fr30bf,x_invalid);
#endif
    }
}

@


1.4.8.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d1 5730
a5730 5729
// OBSOLETE /* Simulator instruction semantics for fr30bf.
// OBSOLETE 
// OBSOLETE THIS FILE IS MACHINE GENERATED WITH CGEN.
// OBSOLETE 
// OBSOLETE Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE This file is part of the GNU simulators.
// OBSOLETE 
// OBSOLETE This program is free software; you can redistribute it and/or modify
// OBSOLETE it under the terms of the GNU General Public License as published by
// OBSOLETE the Free Software Foundation; either version 2, or (at your option)
// OBSOLETE any later version.
// OBSOLETE 
// OBSOLETE This program is distributed in the hope that it will be useful,
// OBSOLETE but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE You should have received a copy of the GNU General Public License along
// OBSOLETE with this program; if not, write to the Free Software Foundation, Inc.,
// OBSOLETE 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
// OBSOLETE 
// OBSOLETE */
// OBSOLETE 
// OBSOLETE #define WANT_CPU fr30bf
// OBSOLETE #define WANT_CPU_FR30BF
// OBSOLETE 
// OBSOLETE #include "sim-main.h"
// OBSOLETE #include "cgen-mem.h"
// OBSOLETE #include "cgen-ops.h"
// OBSOLETE 
// OBSOLETE #undef GET_ATTR
// OBSOLETE #if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_##attr)
// OBSOLETE #else
// OBSOLETE #define GET_ATTR(cpu, num, attr) CGEN_ATTR_VALUE (NULL, abuf->idesc->attrs, CGEN_INSN_/**/attr)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE /* This is used so that we can compile two copies of the semantic code,
// OBSOLETE    one with full feature support and one without that runs fast(er).
// OBSOLETE    FAST_P, when desired, is defined on the command line, -DFAST_P=1.  */
// OBSOLETE #if FAST_P
// OBSOLETE #define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_semf_,fn)
// OBSOLETE #undef TRACE_RESULT
// OBSOLETE #define TRACE_RESULT(cpu, abuf, name, type, val)
// OBSOLETE #else
// OBSOLETE #define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_sem_,fn)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE /* x-invalid: --invalid-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_invalid) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     /* Update the recorded pc in the cpu state struct.
// OBSOLETE        Only necessary for WITH_SCACHE case, but to avoid the
// OBSOLETE        conditional compilation ....  */
// OBSOLETE     SET_H_PC (pc);
// OBSOLETE     /* Virtual insns have zero size.  Overwrite vpc with address of next insn
// OBSOLETE        using the default-insn-bitsize spec.  When executing insns in parallel
// OBSOLETE        we may want to queue the fault and continue execution.  */
// OBSOLETE     vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE     vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-after: --after-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_after) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_after (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-before: --before-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_before) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     fr30bf_pbb_before (current_cpu, sem_arg);
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-cti-chain: --cti-chain-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_cti_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       pbb_br_type, pbb_br_npc);
// OBSOLETE     BREAK (sem);
// OBSOLETE #else
// OBSOLETE     /* FIXME: Allow provision of explicit ifmt spec in insn spec.  */
// OBSOLETE     vpc = fr30bf_pbb_cti_chain (current_cpu, sem_arg,
// OBSOLETE 			       CPU_PBB_BR_TYPE (current_cpu),
// OBSOLETE 			       CPU_PBB_BR_NPC (current_cpu));
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-chain: --chain-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_chain) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE     vpc = fr30bf_pbb_chain (current_cpu, sem_arg);
// OBSOLETE #ifdef DEFINE_SWITCH
// OBSOLETE     BREAK (sem);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* x-begin: --begin-- */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,x_begin) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 0);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE #if WITH_SCACHE_PBB_FR30BF
// OBSOLETE #if defined DEFINE_SWITCH || defined FAST_P
// OBSOLETE     /* In the switch case FAST_P is a constant, allowing several optimizations
// OBSOLETE        in any called inline functions.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, FAST_P);
// OBSOLETE #else
// OBSOLETE #if 0 /* cgen engine can't handle dynamic fast/full switching yet.  */
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, STATE_RUN_FAST_P (CPU_STATE (current_cpu)));
// OBSOLETE #else
// OBSOLETE     vpc = fr30bf_pbb_begin (current_cpu, 0);
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE #endif
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* add: add $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,add) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addi: add $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* add2: add2 $m4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,add2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addc: addc $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ADDCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addn: addn $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addni: addn $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addni) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addn2: addn2 $m4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addn2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* sub: sub $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,sub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* subc: subc $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,subc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBCSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), CPU (h_cbit));
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* subn: subn $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,subn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* cmp: cmp $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,cmp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), * FLD (i_Rj), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* cmpi: cmp $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,cmpi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_u4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_u4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* cmp2: cmp2 $m4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,cmp2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp1;
// OBSOLETE   {
// OBSOLETE     BI opval = SUBOFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (* FLD (i_Ri), FLD (f_m4), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   tmp_tmp1 = SUBSI (* FLD (i_Ri), FLD (f_m4));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp1, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* and: and $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,and) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ANDSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* or: or $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,or) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eor: eor $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eor) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = XORSI (* FLD (i_Ri), * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andm: and $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andh: andh $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andb: andb $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orm: or $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = ORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orh: orh $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = ORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orb: orb $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eorm: eor $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eorm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = XORSI (GETMEMSI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eorh: eorh $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eorh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   HI tmp_tmp;
// OBSOLETE   tmp_tmp = XORHI (GETMEMHI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTHI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     HI opval = tmp_tmp;
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* eorb: eorb $Rj,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,eorb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = XORQI (GETMEMQI (current_cpu, pc, * FLD (i_Ri)), * FLD (i_Rj));
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     QI opval = tmp_tmp;
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bandl: bandl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bandl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (FLD (f_u4), 240), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* borl: borl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,borl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beorl: beorl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beorl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bandh: bandh $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bandh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ANDQI (ORQI (SLLQI (FLD (f_u4), 4), 15), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* borh: borh $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,borh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = ORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beorh: beorh $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beorh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = XORQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Ri), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* btstl: btstl $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,btstl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (FLD (f_u4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* btsth: btsth $u4,@@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,btsth) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   QI tmp_tmp;
// OBSOLETE   tmp_tmp = ANDQI (SLLQI (FLD (f_u4), 4), GETMEMQI (current_cpu, pc, * FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     BI opval = EQQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTQI (tmp_tmp, 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mul: mul $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mul) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (EXTSIDI (* FLD (i_Rj)), EXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQDI (tmp_tmp, MAKEDI (0, 0));
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = ORIF (GTDI (tmp_tmp, MAKEDI (0, 2147483647)), LTDI (tmp_tmp, NEGDI (MAKEDI (0, 0x80000000))));
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mulu: mulu $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mulu) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   DI tmp_tmp;
// OBSOLETE   tmp_tmp = MULDI (ZEXTSIDI (* FLD (i_Rj)), ZEXTSIDI (* FLD (i_Ri)));
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (tmp_tmp);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = TRUNCDISI (SRLDI (tmp_tmp, 32));
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_vbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "vbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mulh: mulh $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mulh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULHI (TRUNCSIHI (* FLD (i_Rj)), TRUNCSIHI (* FLD (i_Ri)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* muluh: muluh $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,muluh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = MULSI (ANDSI (* FLD (i_Rj), 65535), ANDSI (* FLD (i_Ri), 65535));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = GESI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div0s: div0s $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div0s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (GET_H_DR (((UINT) 5)), 0);
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = XORBI (CPU (h_d0bit), LTSI (* FLD (i_Ri), 0));
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NEBI (CPU (h_d0bit), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = 0xffffffff;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div0u: div0u $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div0u) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d0bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d0bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_d1bit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "d1bit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div1: div1 $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (LTSI (GET_H_DR (((UINT) 5)), 0)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 4)), 1);
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (NOTBI (XORBI (XORBI (CPU (h_d0bit), CPU (h_d1bit)), CPU (h_cbit)))) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ORSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (GET_H_DR (((UINT) 4)), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div2: div2 $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE {
// OBSOLETE   tmp_tmp = ADDSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = ADDCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   tmp_tmp = SUBSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri));
// OBSOLETE   {
// OBSOLETE     BI opval = SUBCFSI (GET_H_DR (((UINT) 4)), * FLD (i_Ri), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (EQSI (tmp_tmp, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = 1;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = 0;
// OBSOLETE     SET_H_DR (((UINT) 4), opval);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div3: div3 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div3) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_zbit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 5)), 1);
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* div4s: div4s */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,div4s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (CPU (h_d1bit), 1)) {
// OBSOLETE   {
// OBSOLETE     SI opval = NEGSI (GET_H_DR (((UINT) 5)));
// OBSOLETE     SET_H_DR (((UINT) 5), opval);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsl: lsl $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsl) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsli: lsl $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsli) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsl2: lsl2 $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsl2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (32, tmp_shift))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SLLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsr: lsr $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsri: lsr $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsri) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lsr2: lsr2 $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lsr2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRLSI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* asr: asr $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,asr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ANDSI (* FLD (i_Rj), 31);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* asri: asr $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,asri) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = FLD (f_u4);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* asr2: asr2 $u4,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,asr2) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_shift;
// OBSOLETE   tmp_shift = ADDSI (FLD (f_u4), 16);
// OBSOLETE if (NESI (tmp_shift, 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     BI opval = NESI (ANDSI (* FLD (i_Ri), SLLSI (1, SUBSI (tmp_shift, 1))), 0);
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SRASI (* FLD (i_Ri), tmp_shift);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE   {
// OBSOLETE     BI opval = 0;
// OBSOLETE     CPU (h_cbit) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "cbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE   {
// OBSOLETE     BI opval = LTSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_nbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "nbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     BI opval = EQSI (* FLD (i_Ri), 0);
// OBSOLETE     CPU (h_zbit) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "zbit", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldi8: ldi:8 $i8,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldi8) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi8.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i8);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldi20: ldi:20 $i20,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldi20) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi20.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i20);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldi32: ldi:32 $i32,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldi32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldi32.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 6);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = FLD (f_i32);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ld: ld @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* lduh: lduh @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,lduh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldub: ldub @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr13: ld @@($R13,$Rj),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr13uh: lduh @@($R13,$Rj),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr13uh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr13ub: ldub @@($R13,$Rj),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr13ub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr14: ld @@($R14,$disp10),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr14) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr14uh: lduh @@($R14,$disp9),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr14uh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14uh.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr14ub: ldub @@($R14,$disp8),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr14ub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr14ub.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15: ld @@($R15,$udisp6),$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, ADDSI (FLD (f_udisp6), CPU (h_gr[((UINT) 15)])));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15gr: ld @@$R15+,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15gr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15gr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE if (NESI (FLD (f_Ri), 15)) {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15dr: ld @@$R15+,$Rs2 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SET_H_DR (FLD (f_Rs2), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldr15ps: ld @@$R15+,$ps */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldr15ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* st: st $Ri,@@$Rj */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,st) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* sth: sth $Ri,@@$Rj */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,sth) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stb: stb $Ri,@@$Rj */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str13: st $Ri,@@($R13,$Rj) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str13h: sth $Ri,@@($R13,$Rj) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str13b: stb $Ri,@@($R13,$Rj) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (* FLD (i_Rj), CPU (h_gr[((UINT) 13)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str14: st $Ri,@@($R14,$disp10) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str14) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (FLD (f_disp10), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str14h: sth $Ri,@@($R14,$disp9) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str14h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14h.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMHI (current_cpu, pc, ADDSI (FLD (f_disp9), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str14b: stb $Ri,@@($R14,$disp8) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str14b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str14b.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMQI (current_cpu, pc, ADDSI (FLD (f_disp8), CPU (h_gr[((UINT) 14)])), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15: st $Ri,@@($R15,$udisp6) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SETMEMSI (current_cpu, pc, ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_udisp6)), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15gr: st $Ri,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15gr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_str15gr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15dr: st $Rs2,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr15dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = GET_H_DR (FLD (f_Rs2));
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* str15ps: st $ps,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,str15ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mov: mov $Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mov) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldr13.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Rj);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* movdr: mov $Rs1,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,movdr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_DR (FLD (f_Rs1));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* movps: mov $ps,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,movps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_movdr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GET_H_PS ();
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mov2dr: mov $Ri,$Rs1 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mov2dr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_DR (FLD (f_Rs1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* mov2ps: mov $Ri,$ps */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,mov2ps) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* jmp: jmp @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,jmp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* jmpd: jmp:d @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,jmpd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* callr: call @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,callr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* callrd: call:d @@$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,callrd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_mov2dr.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = * FLD (i_Ri);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* call: call $label12 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,call) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 2);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* calld: call:d $label12 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,calld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_call.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (pc, 4);
// OBSOLETE     SET_H_DR (((UINT) 1), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label12);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ret: ret */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ret) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ret:d: ret:d */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ret_d) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = GET_H_DR (((UINT) 1));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* int: int $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,int) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_int (current_cpu, pc, FLD (f_u8));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* inte: inte */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,inte) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE ; /*clobber*/
// OBSOLETE   {
// OBSOLETE     SI opval = fr30_inte (current_cpu, pc);
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* reti: reti */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,reti) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (EQBI (GET_H_SBIT (), 0)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 2)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 2)), 4);
// OBSOLETE     SET_H_DR (((UINT) 2), opval);
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE } else {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SEM_BRANCH_VIA_ADDR (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, GET_H_DR (((UINT) 3)));
// OBSOLETE     SET_H_PS (opval);
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ps", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (GET_H_DR (((UINT) 3)), 4);
// OBSOLETE     SET_H_DR (((UINT) 3), opval);
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "dr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* brad: bra:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,brad) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bra: bra $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bra) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnod: bno:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnod) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bno: bno $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bno) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beqd: beq:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beqd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* beq: beq $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,beq) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_zbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bned: bne:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bned) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bne: bne $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bne) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bcd: bc:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bcd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bc: bc $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_cbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bncd: bnc:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bncd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnc: bnc $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnc) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_cbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnd: bn:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bn: bn $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bn) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_nbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bpd: bp:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bpd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bp: bp $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bvd: bv:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bvd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bv: bv $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (CPU (h_vbit)) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnvd: bnv:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnvd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bnv: bnv $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bnv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (CPU (h_vbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 2);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bltd: blt:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bltd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* blt: blt $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,blt) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (XORBI (CPU (h_vbit), CPU (h_nbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bged: bge:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bged) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bge: bge $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bge) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (XORBI (CPU (h_vbit), CPU (h_nbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bled: ble:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bled) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ble: ble $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ble) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bgtd: bgt:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bgtd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bgt: bgt $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bgt) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (XORBI (CPU (h_vbit), CPU (h_nbit)), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* blsd: bls:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,blsd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bls: bls $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bls) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (ORBI (CPU (h_cbit), CPU (h_zbit))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bhid: bhi:d $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bhid) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* bhi: bhi $label9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,bhi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_brad.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_BRANCH_INIT
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE if (NOTBI (ORBI (CPU (h_cbit), CPU (h_zbit)))) {
// OBSOLETE   {
// OBSOLETE     USI opval = FLD (i_label9);
// OBSOLETE     SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "pc", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   SEM_BRANCH_FINI (vpc);
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13: dmov $R13,@@$dir10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13h: dmovh $R13,@@$dir9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     HI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13b: dmovb $R13,@@$dir8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     QI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13pi: dmov @@$R13+,@@$dir10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13pih: dmovh @@$R13+,@@$dir9 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13pih) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMHI (current_cpu, pc, FLD (f_dir9), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr13pib: dmovb @@$R13+,@@$dir8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr13pib) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]));
// OBSOLETE     SETMEMQI (current_cpu, pc, FLD (f_dir8), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmovr15pi: dmov @@$R15+,@@$dir10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmovr15pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     SETMEMSI (current_cpu, pc, FLD (f_dir10), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13: dmov @@$dir10,$R13 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13h: dmovh @@$dir9,$R13 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13h) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13b: dmovb @@$dir8,$R13 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13b) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13pi: dmov @@$dir10,@@$R13+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13pi) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13pih: dmovh @@$dir9,@@$R13+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13pih) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pih.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     HI opval = GETMEMHI (current_cpu, pc, FLD (f_dir9));
// OBSOLETE     SETMEMHI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 2);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r13pib: dmovb @@$dir8,@@$R13+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r13pib) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr13pib.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     QI opval = GETMEMQI (current_cpu, pc, FLD (f_dir8));
// OBSOLETE     SETMEMQI (current_cpu, pc, CPU (h_gr[((UINT) 13)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 13)]), 1);
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* dmov2r15pd: dmov @@$dir10,@@-$R15 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,dmov2r15pd) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_dmovr15pi.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, FLD (f_dir10));
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldres: ldres @@$Ri+,$u4 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldres) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stres: stres $u4,@@$Ri+ */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stres) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (* FLD (i_Ri), 4);
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copop: copop $u4c,$ccc,$CRj,$CRi */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copop) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copld: copld $u4c,$ccc,$Rjc,$CRi */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copld) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copst: copst $u4c,$ccc,$CRj,$Ric */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copst) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* copsv: copsv $u4c,$ccc,$CRj,$Ric */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,copsv) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* nop: nop */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,nop) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.fmt_empty.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE ((void) 0); /*nop*/
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* andccr: andccr $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,andccr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* orccr: orccr $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,orccr) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ORQI (GET_H_CCR (), FLD (f_u8));
// OBSOLETE     SET_H_CCR (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ccr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stilm: stilm $u8 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stilm) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_int.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     UQI opval = ANDSI (FLD (f_u8), 31);
// OBSOLETE     SET_H_ILM (opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "ilm", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* addsp: addsp $s10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,addsp) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_addsp.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), FLD (f_s10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extsb: extsb $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extsb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extub: extub $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extub) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTQISI (ANDQI (* FLD (i_Ri), 255));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extsh: extsh $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extsh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = EXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* extuh: extuh $Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,extuh) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add2.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE   {
// OBSOLETE     SI opval = ZEXTHISI (ANDHI (* FLD (i_Ri), 65535));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldm0: ldm0 ($reglist_low_ld) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldm0) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm0.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 0)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 1)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 2)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 3)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 4)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 5)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 6)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_ld), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 7)]) = opval;
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* ldm1: ldm1 ($reglist_hi_ld) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,ldm1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_ldm1.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 8)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 9)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 10)]) = opval;
// OBSOLETE     written |= (1 << 3);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 11)]) = opval;
// OBSOLETE     written |= (1 << 4);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 12)]) = opval;
// OBSOLETE     written |= (1 << 5);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 13)]) = opval;
// OBSOLETE     written |= (1 << 6);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     written |= (1 << 7);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_ld), 128)) {
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 8);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stm0: stm0 ($reglist_low_st) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stm0) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm0.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 1)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 7)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 6)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 5)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 4)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 3)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 2)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 1)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_low_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 0)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 11);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* stm1: stm1 ($reglist_hi_st) */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,stm1) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_stm1.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 1)) {
// OBSOLETE {
// OBSOLETE   SI tmp_save_r15;
// OBSOLETE   tmp_save_r15 = CPU (h_gr[((UINT) 15)]);
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_save_r15;
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 2)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 4)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 13)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 8)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 12)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 16)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 11)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 32)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 10)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 64)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 9)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE if (ANDSI (FLD (f_reglist_hi_st), 128)) {
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     written |= (1 << 9);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 8)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, CPU (h_gr[((UINT) 15)]), opval);
// OBSOLETE     written |= (1 << 10);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   abuf->written = written;
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* enter: enter $u10 */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,enter) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = SUBSI (CPU (h_gr[((UINT) 15)]), 4);
// OBSOLETE   {
// OBSOLETE     SI opval = CPU (h_gr[((UINT) 14)]);
// OBSOLETE     SETMEMSI (current_cpu, pc, tmp_tmp, opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = tmp_tmp;
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = SUBSI (CPU (h_gr[((UINT) 15)]), FLD (f_u10));
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* leave: leave */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,leave) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_enter.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   {
// OBSOLETE     SI opval = ADDSI (CPU (h_gr[((UINT) 14)]), 4);
// OBSOLETE     CPU (h_gr[((UINT) 15)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMSI (current_cpu, pc, SUBSI (CPU (h_gr[((UINT) 15)]), 4));
// OBSOLETE     CPU (h_gr[((UINT) 14)]) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* xchb: xchb @@$Rj,$Ri */
// OBSOLETE 
// OBSOLETE static SEM_PC
// OBSOLETE SEM_FN_NAME (fr30bf,xchb) (SIM_CPU *current_cpu, SEM_ARG sem_arg)
// OBSOLETE {
// OBSOLETE #define FLD(f) abuf->fields.sfmt_add.f
// OBSOLETE   ARGBUF *abuf = SEM_ARGBUF (sem_arg);
// OBSOLETE   int UNUSED written = 0;
// OBSOLETE   IADDR UNUSED pc = abuf->addr;
// OBSOLETE   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
// OBSOLETE 
// OBSOLETE {
// OBSOLETE   SI tmp_tmp;
// OBSOLETE   tmp_tmp = * FLD (i_Ri);
// OBSOLETE   {
// OBSOLETE     SI opval = GETMEMUQI (current_cpu, pc, * FLD (i_Rj));
// OBSOLETE     * FLD (i_Ri) = opval;
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "gr", 'x', opval);
// OBSOLETE   }
// OBSOLETE   {
// OBSOLETE     UQI opval = tmp_tmp;
// OBSOLETE     SETMEMUQI (current_cpu, pc, * FLD (i_Rj), opval);
// OBSOLETE     TRACE_RESULT (current_cpu, abuf, "memory", 'x', opval);
// OBSOLETE   }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE   return vpc;
// OBSOLETE #undef FLD
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Table of all semantic fns.  */
// OBSOLETE 
// OBSOLETE static const struct sem_fn_desc sem_fns[] = {
// OBSOLETE   { FR30BF_INSN_X_INVALID, SEM_FN_NAME (fr30bf,x_invalid) },
// OBSOLETE   { FR30BF_INSN_X_AFTER, SEM_FN_NAME (fr30bf,x_after) },
// OBSOLETE   { FR30BF_INSN_X_BEFORE, SEM_FN_NAME (fr30bf,x_before) },
// OBSOLETE   { FR30BF_INSN_X_CTI_CHAIN, SEM_FN_NAME (fr30bf,x_cti_chain) },
// OBSOLETE   { FR30BF_INSN_X_CHAIN, SEM_FN_NAME (fr30bf,x_chain) },
// OBSOLETE   { FR30BF_INSN_X_BEGIN, SEM_FN_NAME (fr30bf,x_begin) },
// OBSOLETE   { FR30BF_INSN_ADD, SEM_FN_NAME (fr30bf,add) },
// OBSOLETE   { FR30BF_INSN_ADDI, SEM_FN_NAME (fr30bf,addi) },
// OBSOLETE   { FR30BF_INSN_ADD2, SEM_FN_NAME (fr30bf,add2) },
// OBSOLETE   { FR30BF_INSN_ADDC, SEM_FN_NAME (fr30bf,addc) },
// OBSOLETE   { FR30BF_INSN_ADDN, SEM_FN_NAME (fr30bf,addn) },
// OBSOLETE   { FR30BF_INSN_ADDNI, SEM_FN_NAME (fr30bf,addni) },
// OBSOLETE   { FR30BF_INSN_ADDN2, SEM_FN_NAME (fr30bf,addn2) },
// OBSOLETE   { FR30BF_INSN_SUB, SEM_FN_NAME (fr30bf,sub) },
// OBSOLETE   { FR30BF_INSN_SUBC, SEM_FN_NAME (fr30bf,subc) },
// OBSOLETE   { FR30BF_INSN_SUBN, SEM_FN_NAME (fr30bf,subn) },
// OBSOLETE   { FR30BF_INSN_CMP, SEM_FN_NAME (fr30bf,cmp) },
// OBSOLETE   { FR30BF_INSN_CMPI, SEM_FN_NAME (fr30bf,cmpi) },
// OBSOLETE   { FR30BF_INSN_CMP2, SEM_FN_NAME (fr30bf,cmp2) },
// OBSOLETE   { FR30BF_INSN_AND, SEM_FN_NAME (fr30bf,and) },
// OBSOLETE   { FR30BF_INSN_OR, SEM_FN_NAME (fr30bf,or) },
// OBSOLETE   { FR30BF_INSN_EOR, SEM_FN_NAME (fr30bf,eor) },
// OBSOLETE   { FR30BF_INSN_ANDM, SEM_FN_NAME (fr30bf,andm) },
// OBSOLETE   { FR30BF_INSN_ANDH, SEM_FN_NAME (fr30bf,andh) },
// OBSOLETE   { FR30BF_INSN_ANDB, SEM_FN_NAME (fr30bf,andb) },
// OBSOLETE   { FR30BF_INSN_ORM, SEM_FN_NAME (fr30bf,orm) },
// OBSOLETE   { FR30BF_INSN_ORH, SEM_FN_NAME (fr30bf,orh) },
// OBSOLETE   { FR30BF_INSN_ORB, SEM_FN_NAME (fr30bf,orb) },
// OBSOLETE   { FR30BF_INSN_EORM, SEM_FN_NAME (fr30bf,eorm) },
// OBSOLETE   { FR30BF_INSN_EORH, SEM_FN_NAME (fr30bf,eorh) },
// OBSOLETE   { FR30BF_INSN_EORB, SEM_FN_NAME (fr30bf,eorb) },
// OBSOLETE   { FR30BF_INSN_BANDL, SEM_FN_NAME (fr30bf,bandl) },
// OBSOLETE   { FR30BF_INSN_BORL, SEM_FN_NAME (fr30bf,borl) },
// OBSOLETE   { FR30BF_INSN_BEORL, SEM_FN_NAME (fr30bf,beorl) },
// OBSOLETE   { FR30BF_INSN_BANDH, SEM_FN_NAME (fr30bf,bandh) },
// OBSOLETE   { FR30BF_INSN_BORH, SEM_FN_NAME (fr30bf,borh) },
// OBSOLETE   { FR30BF_INSN_BEORH, SEM_FN_NAME (fr30bf,beorh) },
// OBSOLETE   { FR30BF_INSN_BTSTL, SEM_FN_NAME (fr30bf,btstl) },
// OBSOLETE   { FR30BF_INSN_BTSTH, SEM_FN_NAME (fr30bf,btsth) },
// OBSOLETE   { FR30BF_INSN_MUL, SEM_FN_NAME (fr30bf,mul) },
// OBSOLETE   { FR30BF_INSN_MULU, SEM_FN_NAME (fr30bf,mulu) },
// OBSOLETE   { FR30BF_INSN_MULH, SEM_FN_NAME (fr30bf,mulh) },
// OBSOLETE   { FR30BF_INSN_MULUH, SEM_FN_NAME (fr30bf,muluh) },
// OBSOLETE   { FR30BF_INSN_DIV0S, SEM_FN_NAME (fr30bf,div0s) },
// OBSOLETE   { FR30BF_INSN_DIV0U, SEM_FN_NAME (fr30bf,div0u) },
// OBSOLETE   { FR30BF_INSN_DIV1, SEM_FN_NAME (fr30bf,div1) },
// OBSOLETE   { FR30BF_INSN_DIV2, SEM_FN_NAME (fr30bf,div2) },
// OBSOLETE   { FR30BF_INSN_DIV3, SEM_FN_NAME (fr30bf,div3) },
// OBSOLETE   { FR30BF_INSN_DIV4S, SEM_FN_NAME (fr30bf,div4s) },
// OBSOLETE   { FR30BF_INSN_LSL, SEM_FN_NAME (fr30bf,lsl) },
// OBSOLETE   { FR30BF_INSN_LSLI, SEM_FN_NAME (fr30bf,lsli) },
// OBSOLETE   { FR30BF_INSN_LSL2, SEM_FN_NAME (fr30bf,lsl2) },
// OBSOLETE   { FR30BF_INSN_LSR, SEM_FN_NAME (fr30bf,lsr) },
// OBSOLETE   { FR30BF_INSN_LSRI, SEM_FN_NAME (fr30bf,lsri) },
// OBSOLETE   { FR30BF_INSN_LSR2, SEM_FN_NAME (fr30bf,lsr2) },
// OBSOLETE   { FR30BF_INSN_ASR, SEM_FN_NAME (fr30bf,asr) },
// OBSOLETE   { FR30BF_INSN_ASRI, SEM_FN_NAME (fr30bf,asri) },
// OBSOLETE   { FR30BF_INSN_ASR2, SEM_FN_NAME (fr30bf,asr2) },
// OBSOLETE   { FR30BF_INSN_LDI8, SEM_FN_NAME (fr30bf,ldi8) },
// OBSOLETE   { FR30BF_INSN_LDI20, SEM_FN_NAME (fr30bf,ldi20) },
// OBSOLETE   { FR30BF_INSN_LDI32, SEM_FN_NAME (fr30bf,ldi32) },
// OBSOLETE   { FR30BF_INSN_LD, SEM_FN_NAME (fr30bf,ld) },
// OBSOLETE   { FR30BF_INSN_LDUH, SEM_FN_NAME (fr30bf,lduh) },
// OBSOLETE   { FR30BF_INSN_LDUB, SEM_FN_NAME (fr30bf,ldub) },
// OBSOLETE   { FR30BF_INSN_LDR13, SEM_FN_NAME (fr30bf,ldr13) },
// OBSOLETE   { FR30BF_INSN_LDR13UH, SEM_FN_NAME (fr30bf,ldr13uh) },
// OBSOLETE   { FR30BF_INSN_LDR13UB, SEM_FN_NAME (fr30bf,ldr13ub) },
// OBSOLETE   { FR30BF_INSN_LDR14, SEM_FN_NAME (fr30bf,ldr14) },
// OBSOLETE   { FR30BF_INSN_LDR14UH, SEM_FN_NAME (fr30bf,ldr14uh) },
// OBSOLETE   { FR30BF_INSN_LDR14UB, SEM_FN_NAME (fr30bf,ldr14ub) },
// OBSOLETE   { FR30BF_INSN_LDR15, SEM_FN_NAME (fr30bf,ldr15) },
// OBSOLETE   { FR30BF_INSN_LDR15GR, SEM_FN_NAME (fr30bf,ldr15gr) },
// OBSOLETE   { FR30BF_INSN_LDR15DR, SEM_FN_NAME (fr30bf,ldr15dr) },
// OBSOLETE   { FR30BF_INSN_LDR15PS, SEM_FN_NAME (fr30bf,ldr15ps) },
// OBSOLETE   { FR30BF_INSN_ST, SEM_FN_NAME (fr30bf,st) },
// OBSOLETE   { FR30BF_INSN_STH, SEM_FN_NAME (fr30bf,sth) },
// OBSOLETE   { FR30BF_INSN_STB, SEM_FN_NAME (fr30bf,stb) },
// OBSOLETE   { FR30BF_INSN_STR13, SEM_FN_NAME (fr30bf,str13) },
// OBSOLETE   { FR30BF_INSN_STR13H, SEM_FN_NAME (fr30bf,str13h) },
// OBSOLETE   { FR30BF_INSN_STR13B, SEM_FN_NAME (fr30bf,str13b) },
// OBSOLETE   { FR30BF_INSN_STR14, SEM_FN_NAME (fr30bf,str14) },
// OBSOLETE   { FR30BF_INSN_STR14H, SEM_FN_NAME (fr30bf,str14h) },
// OBSOLETE   { FR30BF_INSN_STR14B, SEM_FN_NAME (fr30bf,str14b) },
// OBSOLETE   { FR30BF_INSN_STR15, SEM_FN_NAME (fr30bf,str15) },
// OBSOLETE   { FR30BF_INSN_STR15GR, SEM_FN_NAME (fr30bf,str15gr) },
// OBSOLETE   { FR30BF_INSN_STR15DR, SEM_FN_NAME (fr30bf,str15dr) },
// OBSOLETE   { FR30BF_INSN_STR15PS, SEM_FN_NAME (fr30bf,str15ps) },
// OBSOLETE   { FR30BF_INSN_MOV, SEM_FN_NAME (fr30bf,mov) },
// OBSOLETE   { FR30BF_INSN_MOVDR, SEM_FN_NAME (fr30bf,movdr) },
// OBSOLETE   { FR30BF_INSN_MOVPS, SEM_FN_NAME (fr30bf,movps) },
// OBSOLETE   { FR30BF_INSN_MOV2DR, SEM_FN_NAME (fr30bf,mov2dr) },
// OBSOLETE   { FR30BF_INSN_MOV2PS, SEM_FN_NAME (fr30bf,mov2ps) },
// OBSOLETE   { FR30BF_INSN_JMP, SEM_FN_NAME (fr30bf,jmp) },
// OBSOLETE   { FR30BF_INSN_JMPD, SEM_FN_NAME (fr30bf,jmpd) },
// OBSOLETE   { FR30BF_INSN_CALLR, SEM_FN_NAME (fr30bf,callr) },
// OBSOLETE   { FR30BF_INSN_CALLRD, SEM_FN_NAME (fr30bf,callrd) },
// OBSOLETE   { FR30BF_INSN_CALL, SEM_FN_NAME (fr30bf,call) },
// OBSOLETE   { FR30BF_INSN_CALLD, SEM_FN_NAME (fr30bf,calld) },
// OBSOLETE   { FR30BF_INSN_RET, SEM_FN_NAME (fr30bf,ret) },
// OBSOLETE   { FR30BF_INSN_RET_D, SEM_FN_NAME (fr30bf,ret_d) },
// OBSOLETE   { FR30BF_INSN_INT, SEM_FN_NAME (fr30bf,int) },
// OBSOLETE   { FR30BF_INSN_INTE, SEM_FN_NAME (fr30bf,inte) },
// OBSOLETE   { FR30BF_INSN_RETI, SEM_FN_NAME (fr30bf,reti) },
// OBSOLETE   { FR30BF_INSN_BRAD, SEM_FN_NAME (fr30bf,brad) },
// OBSOLETE   { FR30BF_INSN_BRA, SEM_FN_NAME (fr30bf,bra) },
// OBSOLETE   { FR30BF_INSN_BNOD, SEM_FN_NAME (fr30bf,bnod) },
// OBSOLETE   { FR30BF_INSN_BNO, SEM_FN_NAME (fr30bf,bno) },
// OBSOLETE   { FR30BF_INSN_BEQD, SEM_FN_NAME (fr30bf,beqd) },
// OBSOLETE   { FR30BF_INSN_BEQ, SEM_FN_NAME (fr30bf,beq) },
// OBSOLETE   { FR30BF_INSN_BNED, SEM_FN_NAME (fr30bf,bned) },
// OBSOLETE   { FR30BF_INSN_BNE, SEM_FN_NAME (fr30bf,bne) },
// OBSOLETE   { FR30BF_INSN_BCD, SEM_FN_NAME (fr30bf,bcd) },
// OBSOLETE   { FR30BF_INSN_BC, SEM_FN_NAME (fr30bf,bc) },
// OBSOLETE   { FR30BF_INSN_BNCD, SEM_FN_NAME (fr30bf,bncd) },
// OBSOLETE   { FR30BF_INSN_BNC, SEM_FN_NAME (fr30bf,bnc) },
// OBSOLETE   { FR30BF_INSN_BND, SEM_FN_NAME (fr30bf,bnd) },
// OBSOLETE   { FR30BF_INSN_BN, SEM_FN_NAME (fr30bf,bn) },
// OBSOLETE   { FR30BF_INSN_BPD, SEM_FN_NAME (fr30bf,bpd) },
// OBSOLETE   { FR30BF_INSN_BP, SEM_FN_NAME (fr30bf,bp) },
// OBSOLETE   { FR30BF_INSN_BVD, SEM_FN_NAME (fr30bf,bvd) },
// OBSOLETE   { FR30BF_INSN_BV, SEM_FN_NAME (fr30bf,bv) },
// OBSOLETE   { FR30BF_INSN_BNVD, SEM_FN_NAME (fr30bf,bnvd) },
// OBSOLETE   { FR30BF_INSN_BNV, SEM_FN_NAME (fr30bf,bnv) },
// OBSOLETE   { FR30BF_INSN_BLTD, SEM_FN_NAME (fr30bf,bltd) },
// OBSOLETE   { FR30BF_INSN_BLT, SEM_FN_NAME (fr30bf,blt) },
// OBSOLETE   { FR30BF_INSN_BGED, SEM_FN_NAME (fr30bf,bged) },
// OBSOLETE   { FR30BF_INSN_BGE, SEM_FN_NAME (fr30bf,bge) },
// OBSOLETE   { FR30BF_INSN_BLED, SEM_FN_NAME (fr30bf,bled) },
// OBSOLETE   { FR30BF_INSN_BLE, SEM_FN_NAME (fr30bf,ble) },
// OBSOLETE   { FR30BF_INSN_BGTD, SEM_FN_NAME (fr30bf,bgtd) },
// OBSOLETE   { FR30BF_INSN_BGT, SEM_FN_NAME (fr30bf,bgt) },
// OBSOLETE   { FR30BF_INSN_BLSD, SEM_FN_NAME (fr30bf,blsd) },
// OBSOLETE   { FR30BF_INSN_BLS, SEM_FN_NAME (fr30bf,bls) },
// OBSOLETE   { FR30BF_INSN_BHID, SEM_FN_NAME (fr30bf,bhid) },
// OBSOLETE   { FR30BF_INSN_BHI, SEM_FN_NAME (fr30bf,bhi) },
// OBSOLETE   { FR30BF_INSN_DMOVR13, SEM_FN_NAME (fr30bf,dmovr13) },
// OBSOLETE   { FR30BF_INSN_DMOVR13H, SEM_FN_NAME (fr30bf,dmovr13h) },
// OBSOLETE   { FR30BF_INSN_DMOVR13B, SEM_FN_NAME (fr30bf,dmovr13b) },
// OBSOLETE   { FR30BF_INSN_DMOVR13PI, SEM_FN_NAME (fr30bf,dmovr13pi) },
// OBSOLETE   { FR30BF_INSN_DMOVR13PIH, SEM_FN_NAME (fr30bf,dmovr13pih) },
// OBSOLETE   { FR30BF_INSN_DMOVR13PIB, SEM_FN_NAME (fr30bf,dmovr13pib) },
// OBSOLETE   { FR30BF_INSN_DMOVR15PI, SEM_FN_NAME (fr30bf,dmovr15pi) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13, SEM_FN_NAME (fr30bf,dmov2r13) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13H, SEM_FN_NAME (fr30bf,dmov2r13h) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13B, SEM_FN_NAME (fr30bf,dmov2r13b) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13PI, SEM_FN_NAME (fr30bf,dmov2r13pi) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13PIH, SEM_FN_NAME (fr30bf,dmov2r13pih) },
// OBSOLETE   { FR30BF_INSN_DMOV2R13PIB, SEM_FN_NAME (fr30bf,dmov2r13pib) },
// OBSOLETE   { FR30BF_INSN_DMOV2R15PD, SEM_FN_NAME (fr30bf,dmov2r15pd) },
// OBSOLETE   { FR30BF_INSN_LDRES, SEM_FN_NAME (fr30bf,ldres) },
// OBSOLETE   { FR30BF_INSN_STRES, SEM_FN_NAME (fr30bf,stres) },
// OBSOLETE   { FR30BF_INSN_COPOP, SEM_FN_NAME (fr30bf,copop) },
// OBSOLETE   { FR30BF_INSN_COPLD, SEM_FN_NAME (fr30bf,copld) },
// OBSOLETE   { FR30BF_INSN_COPST, SEM_FN_NAME (fr30bf,copst) },
// OBSOLETE   { FR30BF_INSN_COPSV, SEM_FN_NAME (fr30bf,copsv) },
// OBSOLETE   { FR30BF_INSN_NOP, SEM_FN_NAME (fr30bf,nop) },
// OBSOLETE   { FR30BF_INSN_ANDCCR, SEM_FN_NAME (fr30bf,andccr) },
// OBSOLETE   { FR30BF_INSN_ORCCR, SEM_FN_NAME (fr30bf,orccr) },
// OBSOLETE   { FR30BF_INSN_STILM, SEM_FN_NAME (fr30bf,stilm) },
// OBSOLETE   { FR30BF_INSN_ADDSP, SEM_FN_NAME (fr30bf,addsp) },
// OBSOLETE   { FR30BF_INSN_EXTSB, SEM_FN_NAME (fr30bf,extsb) },
// OBSOLETE   { FR30BF_INSN_EXTUB, SEM_FN_NAME (fr30bf,extub) },
// OBSOLETE   { FR30BF_INSN_EXTSH, SEM_FN_NAME (fr30bf,extsh) },
// OBSOLETE   { FR30BF_INSN_EXTUH, SEM_FN_NAME (fr30bf,extuh) },
// OBSOLETE   { FR30BF_INSN_LDM0, SEM_FN_NAME (fr30bf,ldm0) },
// OBSOLETE   { FR30BF_INSN_LDM1, SEM_FN_NAME (fr30bf,ldm1) },
// OBSOLETE   { FR30BF_INSN_STM0, SEM_FN_NAME (fr30bf,stm0) },
// OBSOLETE   { FR30BF_INSN_STM1, SEM_FN_NAME (fr30bf,stm1) },
// OBSOLETE   { FR30BF_INSN_ENTER, SEM_FN_NAME (fr30bf,enter) },
// OBSOLETE   { FR30BF_INSN_LEAVE, SEM_FN_NAME (fr30bf,leave) },
// OBSOLETE   { FR30BF_INSN_XCHB, SEM_FN_NAME (fr30bf,xchb) },
// OBSOLETE   { 0, 0 }
// OBSOLETE };
// OBSOLETE 
// OBSOLETE /* Add the semantic fns to IDESC_TABLE.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE SEM_FN_NAME (fr30bf,init_idesc_table) (SIM_CPU *current_cpu)
// OBSOLETE {
// OBSOLETE   IDESC *idesc_table = CPU_IDESC (current_cpu);
// OBSOLETE   const struct sem_fn_desc *sf;
// OBSOLETE   int mach_num = MACH_NUM (CPU_MACH (current_cpu));
// OBSOLETE 
// OBSOLETE   for (sf = &sem_fns[0]; sf->fn != 0; ++sf)
// OBSOLETE     {
// OBSOLETE       const CGEN_INSN *insn = idesc_table[sf->index].idata;
// OBSOLETE       int valid_p = (CGEN_INSN_VIRTUAL_P (insn)
// OBSOLETE 		     || CGEN_INSN_MACH_HAS_P (insn, mach_num));
// OBSOLETE #if FAST_P
// OBSOLETE       if (valid_p)
// OBSOLETE 	idesc_table[sf->index].sem_fast = sf->fn;
// OBSOLETE       else
// OBSOLETE 	idesc_table[sf->index].sem_fast = SEM_FN_NAME (fr30bf,x_invalid);
// OBSOLETE #else
// OBSOLETE       if (valid_p)
// OBSOLETE 	idesc_table[sf->index].sem_full = sf->fn;
// OBSOLETE       else
// OBSOLETE 	idesc_table[sf->index].sem_full = SEM_FN_NAME (fr30bf,x_invalid);
// OBSOLETE #endif
// OBSOLETE     }
// OBSOLETE }
@


1.3
log
@2001-03-05  Dave Brolley  <brolley@@

        * arch.c: Regenerate.
        * arch.h: Regenerate.
        * cpu.c: Regenerate.
        * cpu.h: Regenerate.
        * cpuall.h: Regenerate.
        * decode.c: Regenerate.
        * decode.h: Regenerate.
        * model.c: Regenerate.
        * sem-switch.c: Regenerate.
        * sem.c: Regenerate.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
d7 1
a7 1
This file is part of the GNU Simulators.
@


1.2
log
@2000-10-06  Dave Brolley  <brolley@@redhat.com>

	* sem.c: Regenerated.
	* sem-switch.c: Regenerated.
@
text
@d5 1
a5 1
Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
d33 1
d35 3
d229 1
a229 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d274 1
a274 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d319 1
a319 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d366 1
a366 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d400 1
a400 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d421 1
a421 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d442 1
a442 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d474 1
a474 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d521 1
a521 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d555 1
a555 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d703 1
a703 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d738 1
a738 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d773 1
a773 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1329 1
a1329 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1334 1
a1334 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1374 1
a1374 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1379 1
a1379 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1417 1
a1417 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1450 1
a1450 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1495 1
a1495 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1502 1
a1502 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1537 1
a1537 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1561 1
a1561 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1567 1
a1567 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1573 1
a1573 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1601 1
a1601 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1606 1
a1606 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1668 1
a1668 1
    TRACE_RESULT (current_cpu, abuf, "dr-4", 'x', opval);
d1702 1
a1702 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1727 1
a1727 1
    TRACE_RESULT (current_cpu, abuf, "dr-5", 'x', opval);
d1762 1
a1762 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1816 1
a1816 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1870 1
a1870 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1924 1
a1924 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d1978 1
a1978 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2032 1
a2032 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2086 1
a2086 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2140 1
a2140 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2194 1
a2194 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2236 1
a2236 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2257 1
a2257 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2278 1
a2278 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2299 1
a2299 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2320 1
a2320 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2341 1
a2341 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2362 1
a2362 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2383 1
a2383 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2404 1
a2404 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2425 1
a2425 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2446 1
a2446 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2467 1
a2467 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2488 1
a2488 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2510 1
a2510 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2517 1
a2517 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2544 1
a2544 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2549 1
a2549 1
    TRACE_RESULT (current_cpu, abuf, "Rs2", 'x', opval);
d2577 1
a2577 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2812 1
a2812 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2842 1
a2842 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2870 1
a2870 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d2897 1
a2897 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2918 1
a2918 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2939 1
a2939 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d2960 1
a2960 1
    TRACE_RESULT (current_cpu, abuf, "Rs1", 'x', opval);
d3052 1
a3052 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3083 1
a3083 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3114 1
a3114 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3145 1
a3145 1
    TRACE_RESULT (current_cpu, abuf, "dr-1", 'x', opval);
d3288 1
a3288 1
    TRACE_RESULT (current_cpu, abuf, "dr-2", 'x', opval);
d3300 1
a3300 1
    TRACE_RESULT (current_cpu, abuf, "dr-2", 'x', opval);
d3315 1
a3315 1
    TRACE_RESULT (current_cpu, abuf, "dr-3", 'x', opval);
d3327 1
a3327 1
    TRACE_RESULT (current_cpu, abuf, "dr-3", 'x', opval);
d4289 1
a4289 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4317 1
a4317 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4345 1
a4345 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4373 1
a4373 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4395 1
a4395 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4416 1
a4416 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4437 1
a4437 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4464 1
a4464 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4492 1
a4492 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4520 1
a4520 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d4543 1
a4543 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4570 1
a4570 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4591 1
a4591 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4760 1
a4760 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4781 1
a4781 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4802 1
a4802 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4823 1
a4823 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4844 1
a4844 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
d4869 1
a4869 1
    TRACE_RESULT (current_cpu, abuf, "gr-0", 'x', opval);
d4875 1
a4875 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4885 1
a4885 1
    TRACE_RESULT (current_cpu, abuf, "gr-1", 'x', opval);
d4891 1
a4891 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4901 1
a4901 1
    TRACE_RESULT (current_cpu, abuf, "gr-2", 'x', opval);
d4907 1
a4907 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4917 1
a4917 1
    TRACE_RESULT (current_cpu, abuf, "gr-3", 'x', opval);
d4923 1
a4923 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4933 1
a4933 1
    TRACE_RESULT (current_cpu, abuf, "gr-4", 'x', opval);
d4939 1
a4939 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4949 1
a4949 1
    TRACE_RESULT (current_cpu, abuf, "gr-5", 'x', opval);
d4955 1
a4955 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4965 1
a4965 1
    TRACE_RESULT (current_cpu, abuf, "gr-6", 'x', opval);
d4971 1
a4971 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d4981 1
a4981 1
    TRACE_RESULT (current_cpu, abuf, "gr-7", 'x', opval);
d4987 1
a4987 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5016 1
a5016 1
    TRACE_RESULT (current_cpu, abuf, "gr-8", 'x', opval);
d5022 1
a5022 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5032 1
a5032 1
    TRACE_RESULT (current_cpu, abuf, "gr-9", 'x', opval);
d5038 1
a5038 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5048 1
a5048 1
    TRACE_RESULT (current_cpu, abuf, "gr-10", 'x', opval);
d5054 1
a5054 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5064 1
a5064 1
    TRACE_RESULT (current_cpu, abuf, "gr-11", 'x', opval);
d5070 1
a5070 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5080 1
a5080 1
    TRACE_RESULT (current_cpu, abuf, "gr-12", 'x', opval);
d5086 1
a5086 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5096 1
a5096 1
    TRACE_RESULT (current_cpu, abuf, "gr-13", 'x', opval);
d5102 1
a5102 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5112 1
a5112 1
    TRACE_RESULT (current_cpu, abuf, "gr-14", 'x', opval);
d5118 1
a5118 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5127 1
a5127 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5155 1
a5155 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5171 1
a5171 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5187 1
a5187 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5203 1
a5203 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5219 1
a5219 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5235 1
a5235 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5251 1
a5251 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5267 1
a5267 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5304 1
a5304 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5320 1
a5320 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5336 1
a5336 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5352 1
a5352 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5368 1
a5368 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5384 1
a5384 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5400 1
a5400 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5416 1
a5416 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5455 1
a5455 1
    TRACE_RESULT (current_cpu, abuf, "gr-14", 'x', opval);
d5460 1
a5460 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5483 1
a5483 1
    TRACE_RESULT (current_cpu, abuf, "gr-15", 'x', opval);
d5488 1
a5488 1
    TRACE_RESULT (current_cpu, abuf, "gr-14", 'x', opval);
d5513 1
a5513 1
    TRACE_RESULT (current_cpu, abuf, "Ri", 'x', opval);
@


1.1
log
@Initial revision
@
text
@d35 11
d48 1
a48 1
SEM_PC
d58 3
a60 2
#if WITH_SCACHE
    /* Update the recorded pc in the cpu state struct.  */
d62 5
a66 4
#endif
    sim_engine_invalid_insn (current_cpu, pc);
    sim_io_error (CPU_STATE (current_cpu), "invalid insn not handled\n");
    /* NOTREACHED */
d75 1
a75 1
SEM_PC
d96 1
a96 1
SEM_PC
d117 1
a117 1
SEM_PC
d130 1
a130 1
			       pbb_br_npc_ptr, pbb_br_npc);
d135 1
a135 1
			       CPU_PBB_BR_NPC_PTR (current_cpu),
d147 1
a147 1
SEM_PC
d171 1
a171 1
SEM_PC
d182 1
a182 1
#ifdef DEFINE_SWITCH
d187 1
d189 3
d202 1
a202 1
SEM_PC
d205 1
a205 1
#define FLD(f) abuf->fields.fmt_add.f
d211 1
a211 1
do {
d227 1
a227 1
do {
d238 2
a239 2
} while (0);
} while (0);
d247 1
a247 1
SEM_PC
d250 1
a250 1
#define FLD(f) abuf->fields.fmt_addi.f
d256 1
a256 1
do {
d272 1
a272 1
do {
d283 2
a284 2
} while (0);
} while (0);
d292 1
a292 1
SEM_PC
d295 1
a295 1
#define FLD(f) abuf->fields.fmt_add2.f
d301 1
a301 1
do {
d317 1
a317 1
do {
d328 2
a329 2
} while (0);
} while (0);
d337 1
a337 1
SEM_PC
d340 1
a340 1
#define FLD(f) abuf->fields.fmt_addc.f
d346 1
a346 1
do {
d364 1
a364 1
do {
d375 2
a376 2
} while (0);
} while (0);
d384 1
a384 1
SEM_PC
d387 1
a387 1
#define FLD(f) abuf->fields.fmt_addn.f
d405 1
a405 1
SEM_PC
d408 1
a408 1
#define FLD(f) abuf->fields.fmt_addni.f
d426 1
a426 1
SEM_PC
d429 1
a429 1
#define FLD(f) abuf->fields.fmt_addn2.f
d447 1
a447 1
SEM_PC
d450 1
a450 1
#define FLD(f) abuf->fields.fmt_add.f
d456 1
a456 1
do {
d472 1
a472 1
do {
d483 2
a484 2
} while (0);
} while (0);
d492 1
a492 1
SEM_PC
d495 1
a495 1
#define FLD(f) abuf->fields.fmt_addc.f
d501 1
a501 1
do {
d519 1
a519 1
do {
d530 2
a531 2
} while (0);
} while (0);
d539 1
a539 1
SEM_PC
d542 1
a542 1
#define FLD(f) abuf->fields.fmt_addn.f
d560 1
a560 1
SEM_PC
d563 1
a563 1
#define FLD(f) abuf->fields.fmt_cmp.f
d569 1
a569 1
do {
d582 1
a582 1
do {
d593 2
a594 2
} while (0);
} while (0);
d602 1
a602 1
SEM_PC
d605 1
a605 1
#define FLD(f) abuf->fields.fmt_cmpi.f
d611 1
a611 1
do {
d624 1
a624 1
do {
d635 2
a636 2
} while (0);
} while (0);
d644 1
a644 1
SEM_PC
d647 1
a647 1
#define FLD(f) abuf->fields.fmt_cmp2.f
d653 1
a653 1
do {
d666 1
a666 1
do {
d677 2
a678 2
} while (0);
} while (0);
d686 1
a686 1
SEM_PC
d689 1
a689 1
#define FLD(f) abuf->fields.fmt_and.f
d695 1
a695 1
do {
d701 1
a701 1
do {
d712 2
a713 2
} while (0);
} while (0);
d721 1
a721 1
SEM_PC
d724 1
a724 1
#define FLD(f) abuf->fields.fmt_and.f
d730 1
a730 1
do {
d736 1
a736 1
do {
d747 2
a748 2
} while (0);
} while (0);
d756 1
a756 1
SEM_PC
d759 1
a759 1
#define FLD(f) abuf->fields.fmt_and.f
d765 1
a765 1
do {
d771 1
a771 1
do {
d782 2
a783 2
} while (0);
} while (0);
d791 1
a791 1
SEM_PC
d794 1
a794 1
#define FLD(f) abuf->fields.fmt_andm.f
d800 1
a800 1
do {
d803 1
a803 1
do {
d814 1
a814 1
} while (0);
d820 1
a820 1
} while (0);
d828 1
a828 1
SEM_PC
d831 1
a831 1
#define FLD(f) abuf->fields.fmt_andh.f
d837 1
a837 1
do {
d840 1
a840 1
do {
d851 1
a851 1
} while (0);
d857 1
a857 1
} while (0);
d865 1
a865 1
SEM_PC
d868 1
a868 1
#define FLD(f) abuf->fields.fmt_andb.f
d874 1
a874 1
do {
d877 1
a877 1
do {
d888 1
a888 1
} while (0);
d894 1
a894 1
} while (0);
d902 1
a902 1
SEM_PC
d905 1
a905 1
#define FLD(f) abuf->fields.fmt_andm.f
d911 1
a911 1
do {
d914 1
a914 1
do {
d925 1
a925 1
} while (0);
d931 1
a931 1
} while (0);
d939 1
a939 1
SEM_PC
d942 1
a942 1
#define FLD(f) abuf->fields.fmt_andh.f
d948 1
a948 1
do {
d951 1
a951 1
do {
d962 1
a962 1
} while (0);
d968 1
a968 1
} while (0);
d976 1
a976 1
SEM_PC
d979 1
a979 1
#define FLD(f) abuf->fields.fmt_andb.f
d985 1
a985 1
do {
d988 1
a988 1
do {
d999 1
a999 1
} while (0);
d1005 1
a1005 1
} while (0);
d1013 1
a1013 1
SEM_PC
d1016 1
a1016 1
#define FLD(f) abuf->fields.fmt_andm.f
d1022 1
a1022 1
do {
d1025 1
a1025 1
do {
d1036 1
a1036 1
} while (0);
d1042 1
a1042 1
} while (0);
d1050 1
a1050 1
SEM_PC
d1053 1
a1053 1
#define FLD(f) abuf->fields.fmt_andh.f
d1059 1
a1059 1
do {
d1062 1
a1062 1
do {
d1073 1
a1073 1
} while (0);
d1079 1
a1079 1
} while (0);
d1087 1
a1087 1
SEM_PC
d1090 1
a1090 1
#define FLD(f) abuf->fields.fmt_andb.f
d1096 1
a1096 1
do {
d1099 1
a1099 1
do {
d1110 1
a1110 1
} while (0);
d1116 1
a1116 1
} while (0);
d1124 1
a1124 1
SEM_PC
d1127 1
a1127 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1145 1
a1145 1
SEM_PC
d1148 1
a1148 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1166 1
a1166 1
SEM_PC
d1169 1
a1169 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1187 1
a1187 1
SEM_PC
d1190 1
a1190 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1208 1
a1208 1
SEM_PC
d1211 1
a1211 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1229 1
a1229 1
SEM_PC
d1232 1
a1232 1
#define FLD(f) abuf->fields.fmt_bandl.f
d1250 1
a1250 1
SEM_PC
d1253 1
a1253 1
#define FLD(f) abuf->fields.fmt_btstl.f
d1259 1
a1259 1
do {
d1272 1
a1272 1
} while (0);
d1280 1
a1280 1
SEM_PC
d1283 1
a1283 1
#define FLD(f) abuf->fields.fmt_btstl.f
d1289 1
a1289 1
do {
d1302 1
a1302 1
} while (0);
d1310 1
a1310 1
SEM_PC
d1313 1
a1313 1
#define FLD(f) abuf->fields.fmt_mul.f
d1319 1
a1319 1
do {
d1347 1
a1347 1
} while (0);
d1355 1
a1355 1
SEM_PC
d1358 1
a1358 1
#define FLD(f) abuf->fields.fmt_mulu.f
d1364 1
a1364 1
do {
d1392 1
a1392 1
} while (0);
d1400 1
a1400 1
SEM_PC
d1403 1
a1403 1
#define FLD(f) abuf->fields.fmt_mulh.f
d1409 1
a1409 1
do {
d1425 1
a1425 1
} while (0);
d1433 1
a1433 1
SEM_PC
d1436 1
a1436 1
#define FLD(f) abuf->fields.fmt_mulh.f
d1442 1
a1442 1
do {
d1458 1
a1458 1
} while (0);
d1466 1
a1466 1
SEM_PC
d1469 1
a1469 1
#define FLD(f) abuf->fields.fmt_div0s.f
d1475 1
a1475 1
do {
d1501 1
a1501 1
} while (0);
d1510 1
a1510 1
SEM_PC
d1513 1
a1513 1
#define FLD(f) abuf->fields.fmt_div0u.f
d1519 1
a1519 1
do {
d1535 1
a1535 1
} while (0);
d1543 1
a1543 1
SEM_PC
d1546 1
a1546 1
#define FLD(f) abuf->fields.fmt_div1.f
d1552 1
a1552 1
do {
d1572 1
a1572 1
do {
d1580 1
a1580 1
} while (0);
d1582 1
a1582 1
do {
d1590 1
a1590 1
} while (0);
d1593 1
a1593 1
do {
d1604 1
a1604 1
} while (0);
d1611 1
a1611 1
} while (0);
d1620 1
a1620 1
SEM_PC
d1623 1
a1623 1
#define FLD(f) abuf->fields.fmt_div2.f
d1629 1
a1629 1
do {
d1632 1
a1632 1
do {
d1640 1
a1640 1
} while (0);
d1642 1
a1642 1
do {
d1650 1
a1650 1
} while (0);
d1653 1
a1653 1
do {
d1666 1
a1666 1
} while (0);
d1675 1
a1675 1
} while (0);
d1684 1
a1684 1
SEM_PC
d1687 1
a1687 1
#define FLD(f) abuf->fields.fmt_div3.f
d1709 1
a1709 1
SEM_PC
d1712 1
a1712 1
#define FLD(f) abuf->fields.fmt_div4s.f
d1734 1
a1734 1
SEM_PC
d1737 1
a1737 1
#define FLD(f) abuf->fields.fmt_lsl.f
d1743 1
a1743 1
do {
d1747 1
a1747 1
do {
d1760 1
a1760 1
} while (0);
d1779 1
a1779 1
} while (0);
d1788 1
a1788 1
SEM_PC
d1791 1
a1791 1
#define FLD(f) abuf->fields.fmt_lsli.f
d1797 1
a1797 1
do {
d1801 1
a1801 1
do {
d1814 1
a1814 1
} while (0);
d1833 1
a1833 1
} while (0);
d1842 1
a1842 1
SEM_PC
d1845 1
a1845 1
#define FLD(f) abuf->fields.fmt_lsli.f
d1851 1
a1851 1
do {
d1855 1
a1855 1
do {
d1868 1
a1868 1
} while (0);
d1887 1
a1887 1
} while (0);
d1896 1
a1896 1
SEM_PC
d1899 1
a1899 1
#define FLD(f) abuf->fields.fmt_lsl.f
d1905 1
a1905 1
do {
d1909 1
a1909 1
do {
d1922 1
a1922 1
} while (0);
d1941 1
a1941 1
} while (0);
d1950 1
a1950 1
SEM_PC
d1953 1
a1953 1
#define FLD(f) abuf->fields.fmt_lsli.f
d1959 1
a1959 1
do {
d1963 1
a1963 1
do {
d1976 1
a1976 1
} while (0);
d1995 1
a1995 1
} while (0);
d2004 1
a2004 1
SEM_PC
d2007 1
a2007 1
#define FLD(f) abuf->fields.fmt_lsli.f
d2013 1
a2013 1
do {
d2017 1
a2017 1
do {
d2030 1
a2030 1
} while (0);
d2049 1
a2049 1
} while (0);
d2058 1
a2058 1
SEM_PC
d2061 1
a2061 1
#define FLD(f) abuf->fields.fmt_lsl.f
d2067 1
a2067 1
do {
d2071 1
a2071 1
do {
d2084 1
a2084 1
} while (0);
d2103 1
a2103 1
} while (0);
d2112 1
a2112 1
SEM_PC
d2115 1
a2115 1
#define FLD(f) abuf->fields.fmt_lsli.f
d2121 1
a2121 1
do {
d2125 1
a2125 1
do {
d2138 1
a2138 1
} while (0);
d2157 1
a2157 1
} while (0);
d2166 1
a2166 1
SEM_PC
d2169 1
a2169 1
#define FLD(f) abuf->fields.fmt_lsli.f
d2175 1
a2175 1
do {
d2179 1
a2179 1
do {
d2192 1
a2192 1
} while (0);
d2211 1
a2211 1
} while (0);
d2220 1
a2220 1
SEM_PC
d2223 1
a2223 1
#define FLD(f) abuf->fields.fmt_ldi8.f
d2241 1
a2241 1
SEM_PC
d2244 1
a2244 1
#define FLD(f) abuf->fields.fmt_ldi20.f
d2262 1
a2262 1
SEM_PC
d2265 1
a2265 1
#define FLD(f) abuf->fields.fmt_ldi32.f
d2283 1
a2283 1
SEM_PC
d2286 1
a2286 1
#define FLD(f) abuf->fields.fmt_ld.f
d2304 1
a2304 1
SEM_PC
d2307 1
a2307 1
#define FLD(f) abuf->fields.fmt_lduh.f
d2325 1
a2325 1
SEM_PC
d2328 1
a2328 1
#define FLD(f) abuf->fields.fmt_ldub.f
d2346 1
a2346 1
SEM_PC
d2349 1
a2349 1
#define FLD(f) abuf->fields.fmt_ldr13.f
d2367 1
a2367 1
SEM_PC
d2370 1
a2370 1
#define FLD(f) abuf->fields.fmt_ldr13uh.f
d2388 1
a2388 1
SEM_PC
d2391 1
a2391 1
#define FLD(f) abuf->fields.fmt_ldr13ub.f
d2409 1
a2409 1
SEM_PC
d2412 1
a2412 1
#define FLD(f) abuf->fields.fmt_ldr14.f
d2430 1
a2430 1
SEM_PC
d2433 1
a2433 1
#define FLD(f) abuf->fields.fmt_ldr14uh.f
d2451 1
a2451 1
SEM_PC
d2454 1
a2454 1
#define FLD(f) abuf->fields.fmt_ldr14ub.f
d2472 1
a2472 1
SEM_PC
d2475 1
a2475 1
#define FLD(f) abuf->fields.fmt_ldr15.f
d2493 1
a2493 1
SEM_PC
d2496 1
a2496 1
#define FLD(f) abuf->fields.fmt_ldr15gr.f
d2502 1
a2502 1
do {
d2516 1
a2516 1
} while (0);
d2525 1
a2525 1
SEM_PC
d2528 1
a2528 1
#define FLD(f) abuf->fields.fmt_ldr15dr.f
d2534 1
a2534 1
do {
d2547 1
a2547 1
} while (0);
d2555 1
a2555 1
SEM_PC
d2558 1
a2558 1
#define FLD(f) abuf->fields.fmt_ldr15ps.f
d2564 1
a2564 1
do {
d2575 1
a2575 1
} while (0);
d2583 1
a2583 1
SEM_PC
d2586 1
a2586 1
#define FLD(f) abuf->fields.fmt_st.f
d2604 1
a2604 1
SEM_PC
d2607 1
a2607 1
#define FLD(f) abuf->fields.fmt_sth.f
d2625 1
a2625 1
SEM_PC
d2628 1
a2628 1
#define FLD(f) abuf->fields.fmt_stb.f
d2646 1
a2646 1
SEM_PC
d2649 1
a2649 1
#define FLD(f) abuf->fields.fmt_str13.f
d2667 1
a2667 1
SEM_PC
d2670 1
a2670 1
#define FLD(f) abuf->fields.fmt_str13h.f
d2688 1
a2688 1
SEM_PC
d2691 1
a2691 1
#define FLD(f) abuf->fields.fmt_str13b.f
d2709 1
a2709 1
SEM_PC
d2712 1
a2712 1
#define FLD(f) abuf->fields.fmt_str14.f
d2730 1
a2730 1
SEM_PC
d2733 1
a2733 1
#define FLD(f) abuf->fields.fmt_str14h.f
d2751 1
a2751 1
SEM_PC
d2754 1
a2754 1
#define FLD(f) abuf->fields.fmt_str14b.f
d2772 1
a2772 1
SEM_PC
d2775 1
a2775 1
#define FLD(f) abuf->fields.fmt_str15.f
d2793 1
a2793 1
SEM_PC
d2796 1
a2796 1
#define FLD(f) abuf->fields.fmt_str15gr.f
d2802 1
a2802 1
do {
d2815 1
a2815 1
} while (0);
d2823 1
a2823 1
SEM_PC
d2826 1
a2826 1
#define FLD(f) abuf->fields.fmt_str15dr.f
d2832 1
a2832 1
do {
d2845 1
a2845 1
} while (0);
d2853 1
a2853 1
SEM_PC
d2856 1
a2856 1
#define FLD(f) abuf->fields.fmt_str15ps.f
d2862 1
a2862 1
do {
d2873 1
a2873 1
} while (0);
d2881 1
a2881 1
SEM_PC
d2884 1
a2884 1
#define FLD(f) abuf->fields.fmt_mov.f
d2902 1
a2902 1
SEM_PC
d2905 1
a2905 1
#define FLD(f) abuf->fields.fmt_movdr.f
d2923 1
a2923 1
SEM_PC
d2926 1
a2926 1
#define FLD(f) abuf->fields.fmt_movps.f
d2944 1
a2944 1
SEM_PC
d2947 1
a2947 1
#define FLD(f) abuf->fields.fmt_mov2dr.f
d2965 1
a2965 1
SEM_PC
d2968 1
a2968 1
#define FLD(f) abuf->fields.fmt_mov2ps.f
d2986 1
a2986 1
SEM_PC
d2989 1
a2989 1
#define FLD(f) abuf->fields.cti.fields.fmt_jmp.f
d3009 1
a3009 1
SEM_PC
d3012 1
a3012 1
#define FLD(f) abuf->fields.cti.fields.fmt_jmp.f
d3019 1
a3019 1
do {
d3025 1
a3025 1
} while (0);
d3034 1
a3034 1
SEM_PC
d3037 1
a3037 1
#define FLD(f) abuf->fields.cti.fields.fmt_callr.f
d3044 1
a3044 1
do {
d3055 1
a3055 1
} while (0);
d3064 1
a3064 1
SEM_PC
d3067 1
a3067 1
#define FLD(f) abuf->fields.cti.fields.fmt_callr.f
d3074 2
a3075 2
do {
do {
d3086 2
a3087 2
} while (0);
} while (0);
d3096 1
a3096 1
SEM_PC
d3099 1
a3099 1
#define FLD(f) abuf->fields.cti.fields.fmt_call.f
d3106 1
a3106 1
do {
d3114 1
a3114 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3117 1
a3117 1
} while (0);
d3126 1
a3126 1
SEM_PC
d3129 1
a3129 1
#define FLD(f) abuf->fields.cti.fields.fmt_call.f
d3136 2
a3137 2
do {
do {
d3145 1
a3145 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3148 2
a3149 2
} while (0);
} while (0);
d3158 1
a3158 1
SEM_PC
d3161 1
a3161 1
#define FLD(f) abuf->fields.cti.fields.fmt_ret.f
d3181 1
a3181 1
SEM_PC
d3184 1
a3184 1
#define FLD(f) abuf->fields.cti.fields.fmt_ret.f
d3191 1
a3191 1
do {
d3197 1
a3197 1
} while (0);
d3206 1
a3206 1
SEM_PC
d3209 1
a3209 1
#define FLD(f) abuf->fields.cti.fields.fmt_int.f
d3216 1
a3216 1
do {
d3225 1
a3225 1
} while (0);
d3234 1
a3234 1
SEM_PC
d3237 1
a3237 1
#define FLD(f) abuf->fields.cti.fields.fmt_inte.f
d3244 1
a3244 1
do {
d3253 1
a3253 1
} while (0);
d3262 1
a3262 1
SEM_PC
d3265 1
a3265 1
#define FLD(f) abuf->fields.cti.fields.fmt_reti.f
d3273 1
a3273 1
do {
d3298 1
a3298 1
} while (0);
d3300 1
a3300 1
do {
d3325 1
a3325 1
} while (0);
d3336 1
a3336 1
SEM_PC
d3339 1
a3339 1
#define FLD(f) abuf->fields.cti.fields.fmt_brad.f
d3346 1
a3346 1
do {
d3349 1
a3349 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3352 1
a3352 1
} while (0);
d3361 1
a3361 1
SEM_PC
d3364 1
a3364 1
#define FLD(f) abuf->fields.cti.fields.fmt_brad.f
d3373 1
a3373 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3384 1
a3384 1
SEM_PC
d3387 1
a3387 1
#define FLD(f) abuf->fields.fmt_bnod.f
d3393 3
a3395 3
do {
do { } while (0); /*nop*/
} while (0);
d3403 1
a3403 1
SEM_PC
d3406 1
a3406 1
#define FLD(f) abuf->fields.fmt_bnod.f
d3412 1
a3412 1
do { } while (0); /*nop*/
d3420 1
a3420 1
SEM_PC
d3423 1
a3423 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3430 1
a3430 1
do {
d3434 1
a3434 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3439 1
a3439 1
} while (0);
d3449 1
a3449 1
SEM_PC
d3452 1
a3452 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3462 1
a3462 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3476 1
a3476 1
SEM_PC
d3479 1
a3479 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3486 1
a3486 1
do {
d3490 1
a3490 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3495 1
a3495 1
} while (0);
d3505 1
a3505 1
SEM_PC
d3508 1
a3508 1
#define FLD(f) abuf->fields.cti.fields.fmt_beqd.f
d3518 1
a3518 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3532 1
a3532 1
SEM_PC
d3535 1
a3535 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3542 1
a3542 1
do {
d3546 1
a3546 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3551 1
a3551 1
} while (0);
d3561 1
a3561 1
SEM_PC
d3564 1
a3564 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3574 1
a3574 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3588 1
a3588 1
SEM_PC
d3591 1
a3591 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3598 1
a3598 1
do {
d3602 1
a3602 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3607 1
a3607 1
} while (0);
d3617 1
a3617 1
SEM_PC
d3620 1
a3620 1
#define FLD(f) abuf->fields.cti.fields.fmt_bcd.f
d3630 1
a3630 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3644 1
a3644 1
SEM_PC
d3647 1
a3647 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3654 1
a3654 1
do {
d3658 1
a3658 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3663 1
a3663 1
} while (0);
d3673 1
a3673 1
SEM_PC
d3676 1
a3676 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3686 1
a3686 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3700 1
a3700 1
SEM_PC
d3703 1
a3703 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3710 1
a3710 1
do {
d3714 1
a3714 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3719 1
a3719 1
} while (0);
d3729 1
a3729 1
SEM_PC
d3732 1
a3732 1
#define FLD(f) abuf->fields.cti.fields.fmt_bnd.f
d3742 1
a3742 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3756 1
a3756 1
SEM_PC
d3759 1
a3759 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3766 1
a3766 1
do {
d3770 1
a3770 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3775 1
a3775 1
} while (0);
d3785 1
a3785 1
SEM_PC
d3788 1
a3788 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3798 1
a3798 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3812 1
a3812 1
SEM_PC
d3815 1
a3815 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3822 1
a3822 1
do {
d3826 1
a3826 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3831 1
a3831 1
} while (0);
d3841 1
a3841 1
SEM_PC
d3844 1
a3844 1
#define FLD(f) abuf->fields.cti.fields.fmt_bvd.f
d3854 1
a3854 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3868 1
a3868 1
SEM_PC
d3871 1
a3871 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3878 1
a3878 1
do {
d3882 1
a3882 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3887 1
a3887 1
} while (0);
d3897 1
a3897 1
SEM_PC
d3900 1
a3900 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3910 1
a3910 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3924 1
a3924 1
SEM_PC
d3927 1
a3927 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3934 1
a3934 1
do {
d3938 1
a3938 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3943 1
a3943 1
} while (0);
d3953 1
a3953 1
SEM_PC
d3956 1
a3956 1
#define FLD(f) abuf->fields.cti.fields.fmt_bltd.f
d3966 1
a3966 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3980 1
a3980 1
SEM_PC
d3983 1
a3983 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d3990 1
a3990 1
do {
d3994 1
a3994 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d3999 1
a3999 1
} while (0);
d4009 1
a4009 1
SEM_PC
d4012 1
a4012 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d4022 1
a4022 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4036 1
a4036 1
SEM_PC
d4039 1
a4039 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d4046 1
a4046 1
do {
d4050 1
a4050 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4055 1
a4055 1
} while (0);
d4065 1
a4065 1
SEM_PC
d4068 1
a4068 1
#define FLD(f) abuf->fields.cti.fields.fmt_bled.f
d4078 1
a4078 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4092 1
a4092 1
SEM_PC
d4095 1
a4095 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4102 1
a4102 1
do {
d4106 1
a4106 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4111 1
a4111 1
} while (0);
d4121 1
a4121 1
SEM_PC
d4124 1
a4124 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4134 1
a4134 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4148 1
a4148 1
SEM_PC
d4151 1
a4151 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4158 1
a4158 1
do {
d4162 1
a4162 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4167 1
a4167 1
} while (0);
d4177 1
a4177 1
SEM_PC
d4180 1
a4180 1
#define FLD(f) abuf->fields.cti.fields.fmt_blsd.f
d4190 1
a4190 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc, SEM_BRANCH_ADDR_CACHE (sem_arg));
d4204 1
a4204 1
SEM_PC
d4207 1
a4207 1
#define FLD(f) abuf->fields.fmt_dmovr13.f
d4225 1
a4225 1
SEM_PC
d4228 1
a4228 1
#define FLD(f) abuf->fields.fmt_dmovr13h.f
d4246 1
a4246 1
SEM_PC
d4249 1
a4249 1
#define FLD(f) abuf->fields.fmt_dmovr13b.f
d4267 1
a4267 1
SEM_PC
d4270 1
a4270 1
#define FLD(f) abuf->fields.fmt_dmovr13pi.f
d4276 1
a4276 1
do {
d4287 1
a4287 1
} while (0);
d4295 1
a4295 1
SEM_PC
d4298 1
a4298 1
#define FLD(f) abuf->fields.fmt_dmovr13pih.f
d4304 1
a4304 1
do {
d4315 1
a4315 1
} while (0);
d4323 1
a4323 1
SEM_PC
d4326 1
a4326 1
#define FLD(f) abuf->fields.fmt_dmovr13pib.f
d4332 1
a4332 1
do {
d4343 1
a4343 1
} while (0);
d4351 1
a4351 1
SEM_PC
d4354 1
a4354 1
#define FLD(f) abuf->fields.fmt_dmovr15pi.f
d4360 1
a4360 1
do {
d4371 1
a4371 1
} while (0);
d4379 1
a4379 1
SEM_PC
d4382 1
a4382 1
#define FLD(f) abuf->fields.fmt_dmov2r13.f
d4400 1
a4400 1
SEM_PC
d4403 1
a4403 1
#define FLD(f) abuf->fields.fmt_dmov2r13h.f
d4421 1
a4421 1
SEM_PC
d4424 1
a4424 1
#define FLD(f) abuf->fields.fmt_dmov2r13b.f
d4442 1
a4442 1
SEM_PC
d4445 1
a4445 1
#define FLD(f) abuf->fields.fmt_dmov2r13pi.f
d4451 1
a4451 1
do {
d4462 1
a4462 1
} while (0);
d4470 1
a4470 1
SEM_PC
d4473 1
a4473 1
#define FLD(f) abuf->fields.fmt_dmov2r13pih.f
d4479 1
a4479 1
do {
d4490 1
a4490 1
} while (0);
d4498 1
a4498 1
SEM_PC
d4501 1
a4501 1
#define FLD(f) abuf->fields.fmt_dmov2r13pib.f
d4507 1
a4507 1
do {
d4518 1
a4518 1
} while (0);
d4526 1
a4526 1
SEM_PC
d4529 1
a4529 1
#define FLD(f) abuf->fields.fmt_dmov2r15pd.f
d4535 1
a4535 1
do {
d4546 1
a4546 1
} while (0);
d4554 1
a4554 1
SEM_PC
d4557 1
a4557 1
#define FLD(f) abuf->fields.fmt_ldres.f
d4575 1
a4575 1
SEM_PC
d4578 1
a4578 1
#define FLD(f) abuf->fields.fmt_ldres.f
d4596 1
a4596 1
SEM_PC
d4599 1
a4599 1
#define FLD(f) abuf->fields.fmt_copop.f
d4605 1
a4605 1
do { } while (0); /*nop*/
d4613 1
a4613 1
SEM_PC
d4616 1
a4616 1
#define FLD(f) abuf->fields.fmt_copld.f
d4622 1
a4622 1
do { } while (0); /*nop*/
d4630 1
a4630 1
SEM_PC
d4633 1
a4633 1
#define FLD(f) abuf->fields.fmt_copst.f
d4639 1
a4639 1
do { } while (0); /*nop*/
d4647 1
a4647 1
SEM_PC
d4650 1
a4650 1
#define FLD(f) abuf->fields.fmt_copst.f
d4656 1
a4656 1
do { } while (0); /*nop*/
d4664 1
a4664 1
SEM_PC
d4667 1
a4667 1
#define FLD(f) abuf->fields.fmt_nop.f
d4673 1
a4673 1
do { } while (0); /*nop*/
d4681 1
a4681 1
SEM_PC
d4684 1
a4684 1
#define FLD(f) abuf->fields.fmt_andccr.f
d4702 1
a4702 1
SEM_PC
d4705 1
a4705 1
#define FLD(f) abuf->fields.fmt_andccr.f
d4723 1
a4723 1
SEM_PC
d4726 1
a4726 1
#define FLD(f) abuf->fields.fmt_stilm.f
d4744 1
a4744 1
SEM_PC
d4747 1
a4747 1
#define FLD(f) abuf->fields.fmt_addsp.f
d4765 1
a4765 1
SEM_PC
d4768 1
a4768 1
#define FLD(f) abuf->fields.fmt_extsb.f
d4786 1
a4786 1
SEM_PC
d4789 1
a4789 1
#define FLD(f) abuf->fields.fmt_extub.f
d4807 1
a4807 1
SEM_PC
d4810 1
a4810 1
#define FLD(f) abuf->fields.fmt_extsh.f
d4828 1
a4828 1
SEM_PC
d4831 1
a4831 1
#define FLD(f) abuf->fields.fmt_extuh.f
d4849 1
a4849 1
SEM_PC
d4852 1
a4852 1
#define FLD(f) abuf->fields.fmt_ldm0.f
d4858 1
a4858 1
do {
d4860 1
a4860 1
do {
d4873 1
a4873 1
} while (0);
d4876 1
a4876 1
do {
d4889 1
a4889 1
} while (0);
d4892 1
a4892 1
do {
d4905 1
a4905 1
} while (0);
d4908 1
a4908 1
do {
d4921 1
a4921 1
} while (0);
d4924 1
a4924 1
do {
d4937 1
a4937 1
} while (0);
d4940 1
a4940 1
do {
d4953 1
a4953 1
} while (0);
d4956 1
a4956 1
do {
d4969 1
a4969 1
} while (0);
d4972 1
a4972 1
do {
a4984 1
} while (0);
d4986 2
a4987 1
} while (0);
d4996 1
a4996 1
SEM_PC
d4999 1
a4999 1
#define FLD(f) abuf->fields.fmt_ldm1.f
d5005 1
a5005 1
do {
d5007 1
a5007 1
do {
d5020 1
a5020 1
} while (0);
d5023 1
a5023 1
do {
d5036 1
a5036 1
} while (0);
d5039 1
a5039 1
do {
d5052 1
a5052 1
} while (0);
d5055 1
a5055 1
do {
d5068 1
a5068 1
} while (0);
d5071 1
a5071 1
do {
d5084 1
a5084 1
} while (0);
d5087 1
a5087 1
do {
d5100 1
a5100 1
} while (0);
d5103 1
a5103 1
do {
d5116 1
a5116 1
} while (0);
d5126 1
a5126 1
} while (0);
d5135 1
a5135 1
SEM_PC
d5138 1
a5138 1
#define FLD(f) abuf->fields.fmt_stm0.f
d5144 1
a5144 1
do {
d5146 1
a5146 1
do {
d5159 1
a5159 1
} while (0);
d5162 1
a5162 1
do {
d5175 1
a5175 1
} while (0);
d5178 1
a5178 1
do {
d5191 1
a5191 1
} while (0);
d5194 1
a5194 1
do {
d5207 1
a5207 1
} while (0);
d5210 1
a5210 1
do {
d5223 1
a5223 1
} while (0);
d5226 1
a5226 1
do {
d5239 1
a5239 1
} while (0);
d5242 1
a5242 1
do {
d5255 1
a5255 1
} while (0);
d5258 1
a5258 1
do {
a5270 1
} while (0);
d5272 2
a5273 1
} while (0);
d5282 1
a5282 1
SEM_PC
d5285 1
a5285 1
#define FLD(f) abuf->fields.fmt_stm1.f
d5291 1
a5291 1
do {
d5293 1
a5293 1
do {
d5308 1
a5308 1
} while (0);
d5311 1
a5311 1
do {
d5324 1
a5324 1
} while (0);
d5327 1
a5327 1
do {
d5340 1
a5340 1
} while (0);
d5343 1
a5343 1
do {
d5356 1
a5356 1
} while (0);
d5359 1
a5359 1
do {
d5372 1
a5372 1
} while (0);
d5375 1
a5375 1
do {
d5388 1
a5388 1
} while (0);
d5391 1
a5391 1
do {
d5404 1
a5404 1
} while (0);
d5407 1
a5407 1
do {
a5419 1
} while (0);
d5421 2
a5422 1
} while (0);
d5431 1
a5431 1
SEM_PC
d5434 1
a5434 1
#define FLD(f) abuf->fields.fmt_enter.f
d5440 1
a5440 1
do {
d5458 1
a5458 1
} while (0);
d5466 1
a5466 1
SEM_PC
d5469 1
a5469 1
#define FLD(f) abuf->fields.fmt_leave.f
d5475 1
a5475 1
do {
d5486 1
a5486 1
} while (0);
d5494 1
a5494 1
SEM_PC
d5497 1
a5497 1
#define FLD(f) abuf->fields.fmt_xchb.f
d5503 1
a5503 1
do {
d5516 1
a5516 1
} while (0);
d5520 205
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d194 1
a194 1
{
d210 1
a210 1
{
d221 2
a222 2
}
}
d239 1
a239 1
{
d255 1
a255 1
{
d266 2
a267 2
}
}
d284 1
a284 1
{
d300 1
a300 1
{
d311 2
a312 2
}
}
d329 1
a329 1
{
d347 1
a347 1
{
d358 2
a359 2
}
}
d439 1
a439 1
{
d455 1
a455 1
{
d466 2
a467 2
}
}
d484 1
a484 1
{
d502 1
a502 1
{
d513 2
a514 2
}
}
d552 1
a552 1
{
d565 1
a565 1
{
d576 2
a577 2
}
}
d594 1
a594 1
{
d607 1
a607 1
{
d618 2
a619 2
}
}
d636 1
a636 1
{
d649 1
a649 1
{
d660 2
a661 2
}
}
d678 1
a678 1
{
d684 1
a684 1
{
d695 2
a696 2
}
}
d713 1
a713 1
{
d719 1
a719 1
{
d730 2
a731 2
}
}
d748 1
a748 1
{
d754 1
a754 1
{
d765 2
a766 2
}
}
d783 1
a783 1
{
d786 1
a786 1
{
d797 1
a797 1
}
d803 1
a803 1
}
d820 1
a820 1
{
d823 1
a823 1
{
d834 1
a834 1
}
d840 1
a840 1
}
d857 1
a857 1
{
d860 1
a860 1
{
d871 1
a871 1
}
d877 1
a877 1
}
d894 1
a894 1
{
d897 1
a897 1
{
d908 1
a908 1
}
d914 1
a914 1
}
d931 1
a931 1
{
d934 1
a934 1
{
d945 1
a945 1
}
d951 1
a951 1
}
d968 1
a968 1
{
d971 1
a971 1
{
d982 1
a982 1
}
d988 1
a988 1
}
d1005 1
a1005 1
{
d1008 1
a1008 1
{
d1019 1
a1019 1
}
d1025 1
a1025 1
}
d1042 1
a1042 1
{
d1045 1
a1045 1
{
d1056 1
a1056 1
}
d1062 1
a1062 1
}
d1079 1
a1079 1
{
d1082 1
a1082 1
{
d1093 1
a1093 1
}
d1099 1
a1099 1
}
d1242 1
a1242 1
{
d1255 1
a1255 1
}
d1272 1
a1272 1
{
d1285 1
a1285 1
}
d1302 1
a1302 1
{
d1330 1
a1330 1
}
d1347 1
a1347 1
{
d1375 1
a1375 1
}
d1392 1
a1392 1
{
d1408 1
a1408 1
}
d1425 1
a1425 1
{
d1441 1
a1441 1
}
d1458 1
a1458 1
{
d1484 1
a1484 1
}
d1502 1
a1502 1
{
d1518 1
a1518 1
}
d1535 1
a1535 1
{
d1555 1
a1555 1
{
d1563 1
a1563 1
}
d1565 1
a1565 1
{
d1573 1
a1573 1
}
d1576 1
a1576 1
{
d1587 1
a1587 1
}
d1594 1
a1594 1
}
d1612 1
a1612 1
{
d1615 1
a1615 1
{
d1623 1
a1623 1
}
d1625 1
a1625 1
{
d1633 1
a1633 1
}
d1636 1
a1636 1
{
d1649 1
a1649 1
}
d1658 1
a1658 1
}
d1726 1
a1726 1
{
d1730 1
a1730 1
{
d1743 1
a1743 1
}
d1762 1
a1762 1
}
d1780 1
a1780 1
{
d1784 1
a1784 1
{
d1797 1
a1797 1
}
d1816 1
a1816 1
}
d1834 1
a1834 1
{
d1838 1
a1838 1
{
d1851 1
a1851 1
}
d1870 1
a1870 1
}
d1888 1
a1888 1
{
d1892 1
a1892 1
{
d1905 1
a1905 1
}
d1924 1
a1924 1
}
d1942 1
a1942 1
{
d1946 1
a1946 1
{
d1959 1
a1959 1
}
d1978 1
a1978 1
}
d1996 1
a1996 1
{
d2000 1
a2000 1
{
d2013 1
a2013 1
}
d2032 1
a2032 1
}
d2050 1
a2050 1
{
d2054 1
a2054 1
{
d2067 1
a2067 1
}
d2086 1
a2086 1
}
d2104 1
a2104 1
{
d2108 1
a2108 1
{
d2121 1
a2121 1
}
d2140 1
a2140 1
}
d2158 1
a2158 1
{
d2162 1
a2162 1
{
d2175 1
a2175 1
}
d2194 1
a2194 1
}
d2485 1
a2485 1
{
d2499 1
a2499 1
}
d2517 1
a2517 1
{
d2530 1
a2530 1
}
d2547 1
a2547 1
{
d2558 1
a2558 1
}
d2785 1
a2785 1
{
d2798 1
a2798 1
}
d2815 1
a2815 1
{
d2828 1
a2828 1
}
d2845 1
a2845 1
{
d2856 1
a2856 1
}
d3002 1
a3002 1
{
d3008 1
a3008 1
}
d3027 1
a3027 1
{
d3038 1
a3038 1
}
d3057 2
a3058 2
{
{
d3069 2
a3070 2
}
}
d3089 1
a3089 1
{
d3100 1
a3100 1
}
d3119 2
a3120 2
{
{
d3131 2
a3132 2
}
}
d3174 1
a3174 1
{
d3180 1
a3180 1
}
d3199 1
a3199 1
{
d3208 1
a3208 1
}
d3227 1
a3227 1
{
d3236 1
a3236 1
}
d3256 1
a3256 1
{
d3281 1
a3281 1
}
d3283 1
a3283 1
{
d3308 1
a3308 1
}
d3329 1
a3329 1
{
d3335 1
a3335 1
}
d3376 1
a3376 1
{
d3378 1
a3378 1
}
d3413 1
a3413 1
{
d3422 1
a3422 1
}
d3469 1
a3469 1
{
d3478 1
a3478 1
}
d3525 1
a3525 1
{
d3534 1
a3534 1
}
d3581 1
a3581 1
{
d3590 1
a3590 1
}
d3637 1
a3637 1
{
d3646 1
a3646 1
}
d3693 1
a3693 1
{
d3702 1
a3702 1
}
d3749 1
a3749 1
{
d3758 1
a3758 1
}
d3805 1
a3805 1
{
d3814 1
a3814 1
}
d3861 1
a3861 1
{
d3870 1
a3870 1
}
d3917 1
a3917 1
{
d3926 1
a3926 1
}
d3973 1
a3973 1
{
d3982 1
a3982 1
}
d4029 1
a4029 1
{
d4038 1
a4038 1
}
d4085 1
a4085 1
{
d4094 1
a4094 1
}
d4141 1
a4141 1
{
d4150 1
a4150 1
}
d4259 1
a4259 1
{
d4270 1
a4270 1
}
d4287 1
a4287 1
{
d4298 1
a4298 1
}
d4315 1
a4315 1
{
d4326 1
a4326 1
}
d4343 1
a4343 1
{
d4354 1
a4354 1
}
d4434 1
a4434 1
{
d4445 1
a4445 1
}
d4462 1
a4462 1
{
d4473 1
a4473 1
}
d4490 1
a4490 1
{
d4501 1
a4501 1
}
d4518 1
a4518 1
{
d4529 1
a4529 1
}
d4841 1
a4841 1
{
d4843 1
a4843 1
{
d4856 1
a4856 1
}
d4859 1
a4859 1
{
d4872 1
a4872 1
}
d4875 1
a4875 1
{
d4888 1
a4888 1
}
d4891 1
a4891 1
{
d4904 1
a4904 1
}
d4907 1
a4907 1
{
d4920 1
a4920 1
}
d4923 1
a4923 1
{
d4936 1
a4936 1
}
d4939 1
a4939 1
{
d4952 1
a4952 1
}
d4955 1
a4955 1
{
d4968 1
d4970 1
a4970 2
}
}
d4988 1
a4988 1
{
d4990 1
a4990 1
{
d5003 1
a5003 1
}
d5006 1
a5006 1
{
d5019 1
a5019 1
}
d5022 1
a5022 1
{
d5035 1
a5035 1
}
d5038 1
a5038 1
{
d5051 1
a5051 1
}
d5054 1
a5054 1
{
d5067 1
a5067 1
}
d5070 1
a5070 1
{
d5083 1
a5083 1
}
d5086 1
a5086 1
{
d5099 1
a5099 1
}
d5109 1
a5109 1
}
d5127 1
a5127 1
{
d5129 1
a5129 1
{
d5142 1
a5142 1
}
d5145 1
a5145 1
{
d5158 1
a5158 1
}
d5161 1
a5161 1
{
d5174 1
a5174 1
}
d5177 1
a5177 1
{
d5190 1
a5190 1
}
d5193 1
a5193 1
{
d5206 1
a5206 1
}
d5209 1
a5209 1
{
d5222 1
a5222 1
}
d5225 1
a5225 1
{
d5238 1
a5238 1
}
d5241 1
a5241 1
{
d5254 1
d5256 1
a5256 2
}
}
d5274 1
a5274 1
{
d5276 1
a5276 1
{
d5291 1
a5291 1
}
d5294 1
a5294 1
{
d5307 1
a5307 1
}
d5310 1
a5310 1
{
d5323 1
a5323 1
}
d5326 1
a5326 1
{
d5339 1
a5339 1
}
d5342 1
a5342 1
{
d5355 1
a5355 1
}
d5358 1
a5358 1
{
d5371 1
a5371 1
}
d5374 1
a5374 1
{
d5387 1
a5387 1
}
d5390 1
a5390 1
{
d5403 1
d5405 1
a5405 2
}
}
d5423 1
a5423 1
{
d5441 1
a5441 1
}
d5458 1
a5458 1
{
d5469 1
a5469 1
}
d5486 1
a5486 1
{
d5499 1
a5499 1
}
@


1.1.1.3
log
@import gdb-1999-07-07 pre reformat
@
text
@d2290 1
a2290 1
#define FLD(f) abuf->fields.fmt_ld.f
d2311 1
a2311 1
#define FLD(f) abuf->fields.fmt_ld.f
d2353 1
a2353 1
#define FLD(f) abuf->fields.fmt_ldr13.f
d2374 1
a2374 1
#define FLD(f) abuf->fields.fmt_ldr13.f
d2590 1
a2590 1
#define FLD(f) abuf->fields.fmt_st.f
d2611 1
a2611 1
#define FLD(f) abuf->fields.fmt_st.f
d2653 1
a2653 1
#define FLD(f) abuf->fields.fmt_str13.f
d2674 1
a2674 1
#define FLD(f) abuf->fields.fmt_str13.f
d4599 1
a4599 1
#define FLD(f) abuf->fields.fmt_copop.f
d4616 1
a4616 1
#define FLD(f) abuf->fields.fmt_copop.f
d4633 1
a4633 1
#define FLD(f) abuf->fields.fmt_copop.f
d4650 1
a4650 1
#define FLD(f) abuf->fields.fmt_bnod.f
@


1.1.1.4
log
@import gdb-1999-08-09 snapshot
@
text
@a34 11
/* This is used so that we can compile two copies of the semantic code,
   one with full feature support and one without that runs fast(er).
   FAST_P, when desired, is defined on the command line, -DFAST_P=1.  */
#if FAST_P
#define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_semf_,fn)
#undef TRACE_RESULT
#define TRACE_RESULT(cpu, abuf, name, type, val)
#else
#define SEM_FN_NAME(cpu,fn) XCONCAT3 (cpu,_sem_,fn)
#endif

d37 1
a37 1
static SEM_PC
d62 1
a62 1
static SEM_PC
d83 1
a83 1
static SEM_PC
d104 1
a104 1
static SEM_PC
d117 1
a117 1
			       pbb_br_type, pbb_br_npc);
d122 1
a122 1
			       CPU_PBB_BR_TYPE (current_cpu),
d134 1
a134 1
static SEM_PC
d158 1
a158 1
static SEM_PC
d185 1
a185 1
static SEM_PC
d188 1
a188 1
#define FLD(f) abuf->fields.sfmt_add.f
d230 1
a230 1
static SEM_PC
d233 1
a233 1
#define FLD(f) abuf->fields.sfmt_addi.f
d275 1
a275 1
static SEM_PC
d278 1
a278 1
#define FLD(f) abuf->fields.sfmt_add2.f
d320 1
a320 1
static SEM_PC
d323 1
a323 1
#define FLD(f) abuf->fields.sfmt_add.f
d367 1
a367 1
static SEM_PC
d370 1
a370 1
#define FLD(f) abuf->fields.sfmt_add.f
d388 1
a388 1
static SEM_PC
d391 1
a391 1
#define FLD(f) abuf->fields.sfmt_addi.f
d409 1
a409 1
static SEM_PC
d412 1
a412 1
#define FLD(f) abuf->fields.sfmt_add2.f
d430 1
a430 1
static SEM_PC
d433 1
a433 1
#define FLD(f) abuf->fields.sfmt_add.f
d475 1
a475 1
static SEM_PC
d478 1
a478 1
#define FLD(f) abuf->fields.sfmt_add.f
d522 1
a522 1
static SEM_PC
d525 1
a525 1
#define FLD(f) abuf->fields.sfmt_add.f
d543 1
a543 1
static SEM_PC
d546 1
a546 1
#define FLD(f) abuf->fields.sfmt_str13.f
d585 1
a585 1
static SEM_PC
d588 1
a588 1
#define FLD(f) abuf->fields.sfmt_addi.f
d627 1
a627 1
static SEM_PC
d630 1
a630 1
#define FLD(f) abuf->fields.sfmt_add2.f
d669 1
a669 1
static SEM_PC
d672 1
a672 1
#define FLD(f) abuf->fields.sfmt_add.f
d704 1
a704 1
static SEM_PC
d707 1
a707 1
#define FLD(f) abuf->fields.sfmt_add.f
d739 1
a739 1
static SEM_PC
d742 1
a742 1
#define FLD(f) abuf->fields.sfmt_add.f
d774 1
a774 1
static SEM_PC
d777 1
a777 1
#define FLD(f) abuf->fields.sfmt_str13.f
d811 1
a811 1
static SEM_PC
d814 1
a814 1
#define FLD(f) abuf->fields.sfmt_str13.f
d848 1
a848 1
static SEM_PC
d851 1
a851 1
#define FLD(f) abuf->fields.sfmt_str13.f
d885 1
a885 1
static SEM_PC
d888 1
a888 1
#define FLD(f) abuf->fields.sfmt_str13.f
d922 1
a922 1
static SEM_PC
d925 1
a925 1
#define FLD(f) abuf->fields.sfmt_str13.f
d959 1
a959 1
static SEM_PC
d962 1
a962 1
#define FLD(f) abuf->fields.sfmt_str13.f
d996 1
a996 1
static SEM_PC
d999 1
a999 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1033 1
a1033 1
static SEM_PC
d1036 1
a1036 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1070 1
a1070 1
static SEM_PC
d1073 1
a1073 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1107 1
a1107 1
static SEM_PC
d1110 1
a1110 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1128 1
a1128 1
static SEM_PC
d1131 1
a1131 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1149 1
a1149 1
static SEM_PC
d1152 1
a1152 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1170 1
a1170 1
static SEM_PC
d1173 1
a1173 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1191 1
a1191 1
static SEM_PC
d1194 1
a1194 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1212 1
a1212 1
static SEM_PC
d1215 1
a1215 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1233 1
a1233 1
static SEM_PC
d1236 1
a1236 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1263 1
a1263 1
static SEM_PC
d1266 1
a1266 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1293 1
a1293 1
static SEM_PC
d1296 1
a1296 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1338 1
a1338 1
static SEM_PC
d1341 1
a1341 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1383 1
a1383 1
static SEM_PC
d1386 1
a1386 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1416 1
a1416 1
static SEM_PC
d1419 1
a1419 1
#define FLD(f) abuf->fields.sfmt_str13.f
d1449 1
a1449 1
static SEM_PC
d1452 1
a1452 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1493 1
a1493 1
static SEM_PC
d1496 1
a1496 1
#define FLD(f) abuf->fields.fmt_empty.f
d1526 1
a1526 1
static SEM_PC
d1529 1
a1529 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1603 1
a1603 1
static SEM_PC
d1606 1
a1606 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d1667 1
a1667 1
static SEM_PC
d1670 1
a1670 1
#define FLD(f) abuf->fields.fmt_empty.f
d1692 1
a1692 1
static SEM_PC
d1695 1
a1695 1
#define FLD(f) abuf->fields.fmt_empty.f
d1717 1
a1717 1
static SEM_PC
d1720 1
a1720 1
#define FLD(f) abuf->fields.sfmt_add.f
d1771 1
a1771 1
static SEM_PC
d1774 1
a1774 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1825 1
a1825 1
static SEM_PC
d1828 1
a1828 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1879 1
a1879 1
static SEM_PC
d1882 1
a1882 1
#define FLD(f) abuf->fields.sfmt_add.f
d1933 1
a1933 1
static SEM_PC
d1936 1
a1936 1
#define FLD(f) abuf->fields.sfmt_addi.f
d1987 1
a1987 1
static SEM_PC
d1990 1
a1990 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2041 1
a2041 1
static SEM_PC
d2044 1
a2044 1
#define FLD(f) abuf->fields.sfmt_add.f
d2095 1
a2095 1
static SEM_PC
d2098 1
a2098 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2149 1
a2149 1
static SEM_PC
d2152 1
a2152 1
#define FLD(f) abuf->fields.sfmt_addi.f
d2203 1
a2203 1
static SEM_PC
d2206 1
a2206 1
#define FLD(f) abuf->fields.sfmt_ldi8.f
d2224 1
a2224 1
static SEM_PC
d2227 1
a2227 1
#define FLD(f) abuf->fields.sfmt_ldi20.f
d2245 1
a2245 1
static SEM_PC
d2248 1
a2248 1
#define FLD(f) abuf->fields.sfmt_ldi32.f
d2266 1
a2266 1
static SEM_PC
d2269 1
a2269 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2287 1
a2287 1
static SEM_PC
d2290 1
a2290 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2308 1
a2308 1
static SEM_PC
d2311 1
a2311 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2329 1
a2329 1
static SEM_PC
d2332 1
a2332 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2350 1
a2350 1
static SEM_PC
d2353 1
a2353 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2371 1
a2371 1
static SEM_PC
d2374 1
a2374 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2392 1
a2392 1
static SEM_PC
d2395 1
a2395 1
#define FLD(f) abuf->fields.sfmt_ldr14.f
d2413 1
a2413 1
static SEM_PC
d2416 1
a2416 1
#define FLD(f) abuf->fields.sfmt_ldr14uh.f
d2434 1
a2434 1
static SEM_PC
d2437 1
a2437 1
#define FLD(f) abuf->fields.sfmt_ldr14ub.f
d2455 1
a2455 1
static SEM_PC
d2458 1
a2458 1
#define FLD(f) abuf->fields.sfmt_ldr15.f
d2476 1
a2476 1
static SEM_PC
d2479 1
a2479 1
#define FLD(f) abuf->fields.sfmt_ldr15gr.f
d2508 1
a2508 1
static SEM_PC
d2511 1
a2511 1
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
d2538 1
a2538 1
static SEM_PC
d2541 1
a2541 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d2566 1
a2566 1
static SEM_PC
d2569 1
a2569 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2587 1
a2587 1
static SEM_PC
d2590 1
a2590 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2608 1
a2608 1
static SEM_PC
d2611 1
a2611 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2629 1
a2629 1
static SEM_PC
d2632 1
a2632 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2650 1
a2650 1
static SEM_PC
d2653 1
a2653 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2671 1
a2671 1
static SEM_PC
d2674 1
a2674 1
#define FLD(f) abuf->fields.sfmt_str13.f
d2692 1
a2692 1
static SEM_PC
d2695 1
a2695 1
#define FLD(f) abuf->fields.sfmt_str14.f
d2713 1
a2713 1
static SEM_PC
d2716 1
a2716 1
#define FLD(f) abuf->fields.sfmt_str14h.f
d2734 1
a2734 1
static SEM_PC
d2737 1
a2737 1
#define FLD(f) abuf->fields.sfmt_str14b.f
d2755 1
a2755 1
static SEM_PC
d2758 1
a2758 1
#define FLD(f) abuf->fields.sfmt_str15.f
d2776 1
a2776 1
static SEM_PC
d2779 1
a2779 1
#define FLD(f) abuf->fields.sfmt_str15gr.f
d2806 1
a2806 1
static SEM_PC
d2809 1
a2809 1
#define FLD(f) abuf->fields.sfmt_ldr15dr.f
d2836 1
a2836 1
static SEM_PC
d2839 1
a2839 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d2864 1
a2864 1
static SEM_PC
d2867 1
a2867 1
#define FLD(f) abuf->fields.sfmt_ldr13.f
d2885 1
a2885 1
static SEM_PC
d2888 1
a2888 1
#define FLD(f) abuf->fields.sfmt_movdr.f
d2906 1
a2906 1
static SEM_PC
d2909 1
a2909 1
#define FLD(f) abuf->fields.sfmt_movdr.f
d2927 1
a2927 1
static SEM_PC
d2930 1
a2930 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2948 1
a2948 1
static SEM_PC
d2951 1
a2951 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2969 1
a2969 1
static SEM_PC
d2972 1
a2972 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d2992 1
a2992 1
static SEM_PC
d2995 1
a2995 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3017 1
a3017 1
static SEM_PC
d3020 1
a3020 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3047 1
a3047 1
static SEM_PC
d3050 1
a3050 1
#define FLD(f) abuf->fields.sfmt_mov2dr.f
d3079 1
a3079 1
static SEM_PC
d3082 1
a3082 1
#define FLD(f) abuf->fields.sfmt_call.f
d3097 1
a3097 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3109 1
a3109 1
static SEM_PC
d3112 1
a3112 1
#define FLD(f) abuf->fields.sfmt_call.f
d3128 1
a3128 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3141 1
a3141 1
static SEM_PC
d3144 1
a3144 1
#define FLD(f) abuf->fields.fmt_empty.f
d3164 1
a3164 1
static SEM_PC
d3167 1
a3167 1
#define FLD(f) abuf->fields.fmt_empty.f
d3189 1
a3189 1
static SEM_PC
d3192 1
a3192 1
#define FLD(f) abuf->fields.sfmt_int.f
d3217 1
a3217 1
static SEM_PC
d3220 1
a3220 1
#define FLD(f) abuf->fields.fmt_empty.f
d3245 1
a3245 1
static SEM_PC
d3248 1
a3248 1
#define FLD(f) abuf->fields.fmt_empty.f
d3319 1
a3319 1
static SEM_PC
d3322 1
a3322 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3332 1
a3332 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3344 1
a3344 1
static SEM_PC
d3347 1
a3347 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3356 1
a3356 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3367 1
a3367 1
static SEM_PC
d3370 1
a3370 1
#define FLD(f) abuf->fields.fmt_empty.f
d3386 1
a3386 1
static SEM_PC
d3389 1
a3389 1
#define FLD(f) abuf->fields.fmt_empty.f
d3403 1
a3403 1
static SEM_PC
d3406 1
a3406 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3417 1
a3417 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3432 1
a3432 1
static SEM_PC
d3435 1
a3435 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3445 1
a3445 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3459 1
a3459 1
static SEM_PC
d3462 1
a3462 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3473 1
a3473 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3488 1
a3488 1
static SEM_PC
d3491 1
a3491 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3501 1
a3501 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3515 1
a3515 1
static SEM_PC
d3518 1
a3518 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3529 1
a3529 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3544 1
a3544 1
static SEM_PC
d3547 1
a3547 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3557 1
a3557 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3571 1
a3571 1
static SEM_PC
d3574 1
a3574 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3585 1
a3585 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3600 1
a3600 1
static SEM_PC
d3603 1
a3603 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3613 1
a3613 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3627 1
a3627 1
static SEM_PC
d3630 1
a3630 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3641 1
a3641 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3656 1
a3656 1
static SEM_PC
d3659 1
a3659 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3669 1
a3669 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3683 1
a3683 1
static SEM_PC
d3686 1
a3686 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3697 1
a3697 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3712 1
a3712 1
static SEM_PC
d3715 1
a3715 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3725 1
a3725 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3739 1
a3739 1
static SEM_PC
d3742 1
a3742 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3753 1
a3753 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3768 1
a3768 1
static SEM_PC
d3771 1
a3771 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3781 1
a3781 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3795 1
a3795 1
static SEM_PC
d3798 1
a3798 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3809 1
a3809 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3824 1
a3824 1
static SEM_PC
d3827 1
a3827 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3837 1
a3837 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3851 1
a3851 1
static SEM_PC
d3854 1
a3854 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3865 1
a3865 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3880 1
a3880 1
static SEM_PC
d3883 1
a3883 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3893 1
a3893 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3907 1
a3907 1
static SEM_PC
d3910 1
a3910 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3921 1
a3921 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3936 1
a3936 1
static SEM_PC
d3939 1
a3939 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3949 1
a3949 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3963 1
a3963 1
static SEM_PC
d3966 1
a3966 1
#define FLD(f) abuf->fields.sfmt_brad.f
d3977 1
a3977 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d3992 1
a3992 1
static SEM_PC
d3995 1
a3995 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4005 1
a4005 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4019 1
a4019 1
static SEM_PC
d4022 1
a4022 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4033 1
a4033 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4048 1
a4048 1
static SEM_PC
d4051 1
a4051 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4061 1
a4061 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4075 1
a4075 1
static SEM_PC
d4078 1
a4078 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4089 1
a4089 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4104 1
a4104 1
static SEM_PC
d4107 1
a4107 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4117 1
a4117 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4131 1
a4131 1
static SEM_PC
d4134 1
a4134 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4145 1
a4145 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4160 1
a4160 1
static SEM_PC
d4163 1
a4163 1
#define FLD(f) abuf->fields.sfmt_brad.f
d4173 1
a4173 1
    SEM_BRANCH_VIA_CACHE (current_cpu, sem_arg, opval, vpc);
d4187 1
a4187 1
static SEM_PC
d4190 1
a4190 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4208 1
a4208 1
static SEM_PC
d4211 1
a4211 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4229 1
a4229 1
static SEM_PC
d4232 1
a4232 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4250 1
a4250 1
static SEM_PC
d4253 1
a4253 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4278 1
a4278 1
static SEM_PC
d4281 1
a4281 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4306 1
a4306 1
static SEM_PC
d4309 1
a4309 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4334 1
a4334 1
static SEM_PC
d4337 1
a4337 1
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
d4362 1
a4362 1
static SEM_PC
d4365 1
a4365 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4383 1
a4383 1
static SEM_PC
d4386 1
a4386 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4404 1
a4404 1
static SEM_PC
d4407 1
a4407 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4425 1
a4425 1
static SEM_PC
d4428 1
a4428 1
#define FLD(f) abuf->fields.sfmt_dmovr13pi.f
d4453 1
a4453 1
static SEM_PC
d4456 1
a4456 1
#define FLD(f) abuf->fields.sfmt_dmovr13pih.f
d4481 1
a4481 1
static SEM_PC
d4484 1
a4484 1
#define FLD(f) abuf->fields.sfmt_dmovr13pib.f
d4509 1
a4509 1
static SEM_PC
d4512 1
a4512 1
#define FLD(f) abuf->fields.sfmt_dmovr15pi.f
d4537 1
a4537 1
static SEM_PC
d4540 1
a4540 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4558 1
a4558 1
static SEM_PC
d4561 1
a4561 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4579 1
a4579 1
static SEM_PC
d4582 1
a4582 1
#define FLD(f) abuf->fields.fmt_empty.f
d4596 1
a4596 1
static SEM_PC
d4599 1
a4599 1
#define FLD(f) abuf->fields.fmt_empty.f
d4613 1
a4613 1
static SEM_PC
d4616 1
a4616 1
#define FLD(f) abuf->fields.fmt_empty.f
d4630 1
a4630 1
static SEM_PC
d4633 1
a4633 1
#define FLD(f) abuf->fields.fmt_empty.f
d4647 1
a4647 1
static SEM_PC
d4650 1
a4650 1
#define FLD(f) abuf->fields.fmt_empty.f
d4664 1
a4664 1
static SEM_PC
d4667 1
a4667 1
#define FLD(f) abuf->fields.sfmt_int.f
d4685 1
a4685 1
static SEM_PC
d4688 1
a4688 1
#define FLD(f) abuf->fields.sfmt_int.f
d4706 1
a4706 1
static SEM_PC
d4709 1
a4709 1
#define FLD(f) abuf->fields.sfmt_int.f
d4727 1
a4727 1
static SEM_PC
d4730 1
a4730 1
#define FLD(f) abuf->fields.sfmt_addsp.f
d4748 1
a4748 1
static SEM_PC
d4751 1
a4751 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4769 1
a4769 1
static SEM_PC
d4772 1
a4772 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4790 1
a4790 1
static SEM_PC
d4793 1
a4793 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4811 1
a4811 1
static SEM_PC
d4814 1
a4814 1
#define FLD(f) abuf->fields.sfmt_add2.f
d4832 1
a4832 1
static SEM_PC
d4835 1
a4835 1
#define FLD(f) abuf->fields.sfmt_ldm0.f
d4979 1
a4979 1
static SEM_PC
d4982 1
a4982 1
#define FLD(f) abuf->fields.sfmt_ldm1.f
d5118 1
a5118 1
static SEM_PC
d5121 1
a5121 1
#define FLD(f) abuf->fields.sfmt_stm0.f
d5265 1
a5265 1
static SEM_PC
d5268 1
a5268 1
#define FLD(f) abuf->fields.sfmt_stm1.f
d5414 1
a5414 1
static SEM_PC
d5417 1
a5417 1
#define FLD(f) abuf->fields.sfmt_enter.f
d5449 1
a5449 1
static SEM_PC
d5452 1
a5452 1
#define FLD(f) abuf->fields.sfmt_enter.f
d5477 1
a5477 1
static SEM_PC
d5480 1
a5480 1
#define FLD(f) abuf->fields.sfmt_add.f
a5502 195
}

/* Table of all semantic fns.  */

static const struct sem_fn_desc sem_fns[] = {
  { FR30BF_INSN_X_INVALID, SEM_FN_NAME (fr30bf,x_invalid) },
  { FR30BF_INSN_X_AFTER, SEM_FN_NAME (fr30bf,x_after) },
  { FR30BF_INSN_X_BEFORE, SEM_FN_NAME (fr30bf,x_before) },
  { FR30BF_INSN_X_CTI_CHAIN, SEM_FN_NAME (fr30bf,x_cti_chain) },
  { FR30BF_INSN_X_CHAIN, SEM_FN_NAME (fr30bf,x_chain) },
  { FR30BF_INSN_X_BEGIN, SEM_FN_NAME (fr30bf,x_begin) },
  { FR30BF_INSN_ADD, SEM_FN_NAME (fr30bf,add) },
  { FR30BF_INSN_ADDI, SEM_FN_NAME (fr30bf,addi) },
  { FR30BF_INSN_ADD2, SEM_FN_NAME (fr30bf,add2) },
  { FR30BF_INSN_ADDC, SEM_FN_NAME (fr30bf,addc) },
  { FR30BF_INSN_ADDN, SEM_FN_NAME (fr30bf,addn) },
  { FR30BF_INSN_ADDNI, SEM_FN_NAME (fr30bf,addni) },
  { FR30BF_INSN_ADDN2, SEM_FN_NAME (fr30bf,addn2) },
  { FR30BF_INSN_SUB, SEM_FN_NAME (fr30bf,sub) },
  { FR30BF_INSN_SUBC, SEM_FN_NAME (fr30bf,subc) },
  { FR30BF_INSN_SUBN, SEM_FN_NAME (fr30bf,subn) },
  { FR30BF_INSN_CMP, SEM_FN_NAME (fr30bf,cmp) },
  { FR30BF_INSN_CMPI, SEM_FN_NAME (fr30bf,cmpi) },
  { FR30BF_INSN_CMP2, SEM_FN_NAME (fr30bf,cmp2) },
  { FR30BF_INSN_AND, SEM_FN_NAME (fr30bf,and) },
  { FR30BF_INSN_OR, SEM_FN_NAME (fr30bf,or) },
  { FR30BF_INSN_EOR, SEM_FN_NAME (fr30bf,eor) },
  { FR30BF_INSN_ANDM, SEM_FN_NAME (fr30bf,andm) },
  { FR30BF_INSN_ANDH, SEM_FN_NAME (fr30bf,andh) },
  { FR30BF_INSN_ANDB, SEM_FN_NAME (fr30bf,andb) },
  { FR30BF_INSN_ORM, SEM_FN_NAME (fr30bf,orm) },
  { FR30BF_INSN_ORH, SEM_FN_NAME (fr30bf,orh) },
  { FR30BF_INSN_ORB, SEM_FN_NAME (fr30bf,orb) },
  { FR30BF_INSN_EORM, SEM_FN_NAME (fr30bf,eorm) },
  { FR30BF_INSN_EORH, SEM_FN_NAME (fr30bf,eorh) },
  { FR30BF_INSN_EORB, SEM_FN_NAME (fr30bf,eorb) },
  { FR30BF_INSN_BANDL, SEM_FN_NAME (fr30bf,bandl) },
  { FR30BF_INSN_BORL, SEM_FN_NAME (fr30bf,borl) },
  { FR30BF_INSN_BEORL, SEM_FN_NAME (fr30bf,beorl) },
  { FR30BF_INSN_BANDH, SEM_FN_NAME (fr30bf,bandh) },
  { FR30BF_INSN_BORH, SEM_FN_NAME (fr30bf,borh) },
  { FR30BF_INSN_BEORH, SEM_FN_NAME (fr30bf,beorh) },
  { FR30BF_INSN_BTSTL, SEM_FN_NAME (fr30bf,btstl) },
  { FR30BF_INSN_BTSTH, SEM_FN_NAME (fr30bf,btsth) },
  { FR30BF_INSN_MUL, SEM_FN_NAME (fr30bf,mul) },
  { FR30BF_INSN_MULU, SEM_FN_NAME (fr30bf,mulu) },
  { FR30BF_INSN_MULH, SEM_FN_NAME (fr30bf,mulh) },
  { FR30BF_INSN_MULUH, SEM_FN_NAME (fr30bf,muluh) },
  { FR30BF_INSN_DIV0S, SEM_FN_NAME (fr30bf,div0s) },
  { FR30BF_INSN_DIV0U, SEM_FN_NAME (fr30bf,div0u) },
  { FR30BF_INSN_DIV1, SEM_FN_NAME (fr30bf,div1) },
  { FR30BF_INSN_DIV2, SEM_FN_NAME (fr30bf,div2) },
  { FR30BF_INSN_DIV3, SEM_FN_NAME (fr30bf,div3) },
  { FR30BF_INSN_DIV4S, SEM_FN_NAME (fr30bf,div4s) },
  { FR30BF_INSN_LSL, SEM_FN_NAME (fr30bf,lsl) },
  { FR30BF_INSN_LSLI, SEM_FN_NAME (fr30bf,lsli) },
  { FR30BF_INSN_LSL2, SEM_FN_NAME (fr30bf,lsl2) },
  { FR30BF_INSN_LSR, SEM_FN_NAME (fr30bf,lsr) },
  { FR30BF_INSN_LSRI, SEM_FN_NAME (fr30bf,lsri) },
  { FR30BF_INSN_LSR2, SEM_FN_NAME (fr30bf,lsr2) },
  { FR30BF_INSN_ASR, SEM_FN_NAME (fr30bf,asr) },
  { FR30BF_INSN_ASRI, SEM_FN_NAME (fr30bf,asri) },
  { FR30BF_INSN_ASR2, SEM_FN_NAME (fr30bf,asr2) },
  { FR30BF_INSN_LDI8, SEM_FN_NAME (fr30bf,ldi8) },
  { FR30BF_INSN_LDI20, SEM_FN_NAME (fr30bf,ldi20) },
  { FR30BF_INSN_LDI32, SEM_FN_NAME (fr30bf,ldi32) },
  { FR30BF_INSN_LD, SEM_FN_NAME (fr30bf,ld) },
  { FR30BF_INSN_LDUH, SEM_FN_NAME (fr30bf,lduh) },
  { FR30BF_INSN_LDUB, SEM_FN_NAME (fr30bf,ldub) },
  { FR30BF_INSN_LDR13, SEM_FN_NAME (fr30bf,ldr13) },
  { FR30BF_INSN_LDR13UH, SEM_FN_NAME (fr30bf,ldr13uh) },
  { FR30BF_INSN_LDR13UB, SEM_FN_NAME (fr30bf,ldr13ub) },
  { FR30BF_INSN_LDR14, SEM_FN_NAME (fr30bf,ldr14) },
  { FR30BF_INSN_LDR14UH, SEM_FN_NAME (fr30bf,ldr14uh) },
  { FR30BF_INSN_LDR14UB, SEM_FN_NAME (fr30bf,ldr14ub) },
  { FR30BF_INSN_LDR15, SEM_FN_NAME (fr30bf,ldr15) },
  { FR30BF_INSN_LDR15GR, SEM_FN_NAME (fr30bf,ldr15gr) },
  { FR30BF_INSN_LDR15DR, SEM_FN_NAME (fr30bf,ldr15dr) },
  { FR30BF_INSN_LDR15PS, SEM_FN_NAME (fr30bf,ldr15ps) },
  { FR30BF_INSN_ST, SEM_FN_NAME (fr30bf,st) },
  { FR30BF_INSN_STH, SEM_FN_NAME (fr30bf,sth) },
  { FR30BF_INSN_STB, SEM_FN_NAME (fr30bf,stb) },
  { FR30BF_INSN_STR13, SEM_FN_NAME (fr30bf,str13) },
  { FR30BF_INSN_STR13H, SEM_FN_NAME (fr30bf,str13h) },
  { FR30BF_INSN_STR13B, SEM_FN_NAME (fr30bf,str13b) },
  { FR30BF_INSN_STR14, SEM_FN_NAME (fr30bf,str14) },
  { FR30BF_INSN_STR14H, SEM_FN_NAME (fr30bf,str14h) },
  { FR30BF_INSN_STR14B, SEM_FN_NAME (fr30bf,str14b) },
  { FR30BF_INSN_STR15, SEM_FN_NAME (fr30bf,str15) },
  { FR30BF_INSN_STR15GR, SEM_FN_NAME (fr30bf,str15gr) },
  { FR30BF_INSN_STR15DR, SEM_FN_NAME (fr30bf,str15dr) },
  { FR30BF_INSN_STR15PS, SEM_FN_NAME (fr30bf,str15ps) },
  { FR30BF_INSN_MOV, SEM_FN_NAME (fr30bf,mov) },
  { FR30BF_INSN_MOVDR, SEM_FN_NAME (fr30bf,movdr) },
  { FR30BF_INSN_MOVPS, SEM_FN_NAME (fr30bf,movps) },
  { FR30BF_INSN_MOV2DR, SEM_FN_NAME (fr30bf,mov2dr) },
  { FR30BF_INSN_MOV2PS, SEM_FN_NAME (fr30bf,mov2ps) },
  { FR30BF_INSN_JMP, SEM_FN_NAME (fr30bf,jmp) },
  { FR30BF_INSN_JMPD, SEM_FN_NAME (fr30bf,jmpd) },
  { FR30BF_INSN_CALLR, SEM_FN_NAME (fr30bf,callr) },
  { FR30BF_INSN_CALLRD, SEM_FN_NAME (fr30bf,callrd) },
  { FR30BF_INSN_CALL, SEM_FN_NAME (fr30bf,call) },
  { FR30BF_INSN_CALLD, SEM_FN_NAME (fr30bf,calld) },
  { FR30BF_INSN_RET, SEM_FN_NAME (fr30bf,ret) },
  { FR30BF_INSN_RET_D, SEM_FN_NAME (fr30bf,ret_d) },
  { FR30BF_INSN_INT, SEM_FN_NAME (fr30bf,int) },
  { FR30BF_INSN_INTE, SEM_FN_NAME (fr30bf,inte) },
  { FR30BF_INSN_RETI, SEM_FN_NAME (fr30bf,reti) },
  { FR30BF_INSN_BRAD, SEM_FN_NAME (fr30bf,brad) },
  { FR30BF_INSN_BRA, SEM_FN_NAME (fr30bf,bra) },
  { FR30BF_INSN_BNOD, SEM_FN_NAME (fr30bf,bnod) },
  { FR30BF_INSN_BNO, SEM_FN_NAME (fr30bf,bno) },
  { FR30BF_INSN_BEQD, SEM_FN_NAME (fr30bf,beqd) },
  { FR30BF_INSN_BEQ, SEM_FN_NAME (fr30bf,beq) },
  { FR30BF_INSN_BNED, SEM_FN_NAME (fr30bf,bned) },
  { FR30BF_INSN_BNE, SEM_FN_NAME (fr30bf,bne) },
  { FR30BF_INSN_BCD, SEM_FN_NAME (fr30bf,bcd) },
  { FR30BF_INSN_BC, SEM_FN_NAME (fr30bf,bc) },
  { FR30BF_INSN_BNCD, SEM_FN_NAME (fr30bf,bncd) },
  { FR30BF_INSN_BNC, SEM_FN_NAME (fr30bf,bnc) },
  { FR30BF_INSN_BND, SEM_FN_NAME (fr30bf,bnd) },
  { FR30BF_INSN_BN, SEM_FN_NAME (fr30bf,bn) },
  { FR30BF_INSN_BPD, SEM_FN_NAME (fr30bf,bpd) },
  { FR30BF_INSN_BP, SEM_FN_NAME (fr30bf,bp) },
  { FR30BF_INSN_BVD, SEM_FN_NAME (fr30bf,bvd) },
  { FR30BF_INSN_BV, SEM_FN_NAME (fr30bf,bv) },
  { FR30BF_INSN_BNVD, SEM_FN_NAME (fr30bf,bnvd) },
  { FR30BF_INSN_BNV, SEM_FN_NAME (fr30bf,bnv) },
  { FR30BF_INSN_BLTD, SEM_FN_NAME (fr30bf,bltd) },
  { FR30BF_INSN_BLT, SEM_FN_NAME (fr30bf,blt) },
  { FR30BF_INSN_BGED, SEM_FN_NAME (fr30bf,bged) },
  { FR30BF_INSN_BGE, SEM_FN_NAME (fr30bf,bge) },
  { FR30BF_INSN_BLED, SEM_FN_NAME (fr30bf,bled) },
  { FR30BF_INSN_BLE, SEM_FN_NAME (fr30bf,ble) },
  { FR30BF_INSN_BGTD, SEM_FN_NAME (fr30bf,bgtd) },
  { FR30BF_INSN_BGT, SEM_FN_NAME (fr30bf,bgt) },
  { FR30BF_INSN_BLSD, SEM_FN_NAME (fr30bf,blsd) },
  { FR30BF_INSN_BLS, SEM_FN_NAME (fr30bf,bls) },
  { FR30BF_INSN_BHID, SEM_FN_NAME (fr30bf,bhid) },
  { FR30BF_INSN_BHI, SEM_FN_NAME (fr30bf,bhi) },
  { FR30BF_INSN_DMOVR13, SEM_FN_NAME (fr30bf,dmovr13) },
  { FR30BF_INSN_DMOVR13H, SEM_FN_NAME (fr30bf,dmovr13h) },
  { FR30BF_INSN_DMOVR13B, SEM_FN_NAME (fr30bf,dmovr13b) },
  { FR30BF_INSN_DMOVR13PI, SEM_FN_NAME (fr30bf,dmovr13pi) },
  { FR30BF_INSN_DMOVR13PIH, SEM_FN_NAME (fr30bf,dmovr13pih) },
  { FR30BF_INSN_DMOVR13PIB, SEM_FN_NAME (fr30bf,dmovr13pib) },
  { FR30BF_INSN_DMOVR15PI, SEM_FN_NAME (fr30bf,dmovr15pi) },
  { FR30BF_INSN_DMOV2R13, SEM_FN_NAME (fr30bf,dmov2r13) },
  { FR30BF_INSN_DMOV2R13H, SEM_FN_NAME (fr30bf,dmov2r13h) },
  { FR30BF_INSN_DMOV2R13B, SEM_FN_NAME (fr30bf,dmov2r13b) },
  { FR30BF_INSN_DMOV2R13PI, SEM_FN_NAME (fr30bf,dmov2r13pi) },
  { FR30BF_INSN_DMOV2R13PIH, SEM_FN_NAME (fr30bf,dmov2r13pih) },
  { FR30BF_INSN_DMOV2R13PIB, SEM_FN_NAME (fr30bf,dmov2r13pib) },
  { FR30BF_INSN_DMOV2R15PD, SEM_FN_NAME (fr30bf,dmov2r15pd) },
  { FR30BF_INSN_LDRES, SEM_FN_NAME (fr30bf,ldres) },
  { FR30BF_INSN_STRES, SEM_FN_NAME (fr30bf,stres) },
  { FR30BF_INSN_COPOP, SEM_FN_NAME (fr30bf,copop) },
  { FR30BF_INSN_COPLD, SEM_FN_NAME (fr30bf,copld) },
  { FR30BF_INSN_COPST, SEM_FN_NAME (fr30bf,copst) },
  { FR30BF_INSN_COPSV, SEM_FN_NAME (fr30bf,copsv) },
  { FR30BF_INSN_NOP, SEM_FN_NAME (fr30bf,nop) },
  { FR30BF_INSN_ANDCCR, SEM_FN_NAME (fr30bf,andccr) },
  { FR30BF_INSN_ORCCR, SEM_FN_NAME (fr30bf,orccr) },
  { FR30BF_INSN_STILM, SEM_FN_NAME (fr30bf,stilm) },
  { FR30BF_INSN_ADDSP, SEM_FN_NAME (fr30bf,addsp) },
  { FR30BF_INSN_EXTSB, SEM_FN_NAME (fr30bf,extsb) },
  { FR30BF_INSN_EXTUB, SEM_FN_NAME (fr30bf,extub) },
  { FR30BF_INSN_EXTSH, SEM_FN_NAME (fr30bf,extsh) },
  { FR30BF_INSN_EXTUH, SEM_FN_NAME (fr30bf,extuh) },
  { FR30BF_INSN_LDM0, SEM_FN_NAME (fr30bf,ldm0) },
  { FR30BF_INSN_LDM1, SEM_FN_NAME (fr30bf,ldm1) },
  { FR30BF_INSN_STM0, SEM_FN_NAME (fr30bf,stm0) },
  { FR30BF_INSN_STM1, SEM_FN_NAME (fr30bf,stm1) },
  { FR30BF_INSN_ENTER, SEM_FN_NAME (fr30bf,enter) },
  { FR30BF_INSN_LEAVE, SEM_FN_NAME (fr30bf,leave) },
  { FR30BF_INSN_XCHB, SEM_FN_NAME (fr30bf,xchb) },
  { 0, 0 }
};

/* Add the semantic fns to IDESC_TABLE.  */

void
SEM_FN_NAME (fr30bf,init_idesc_table) (SIM_CPU *current_cpu)
{
  IDESC *idesc_table = CPU_IDESC (current_cpu);
  const struct sem_fn_desc *sf;

  for (sf = &sem_fns[0]; sf->fn != 0; ++sf)
    {
#if FAST_P
      idesc_table[sf->index].sem_fast = sf->fn;
#else
      idesc_table[sf->index].sem_full = sf->fn;
#endif
    }
@


1.1.1.5
log
@import gdb-1999-09-08 snapshot
@
text
@a5699 1
  int mach_num = MACH_NUM (CPU_MACH (current_cpu));
a5702 1
      int valid_p = CGEN_INSN_MACH_HAS_P (idesc_table[sf->index].idata, mach_num);
d5704 1
a5704 4
      if (valid_p)
	idesc_table[sf->index].sem_fast = sf->fn;
      else
	idesc_table[sf->index].sem_fast = SEM_FN_NAME (fr30bf,x_invalid);
d5706 1
a5706 4
      if (valid_p)
	idesc_table[sf->index].sem_full = sf->fn;
      else
	idesc_table[sf->index].sem_full = SEM_FN_NAME (fr30bf,x_invalid);
@


1.1.1.6
log
@import gdb-1999-10-04 snapshot
@
text
@d58 2
a59 3
    /* Update the recorded pc in the cpu state struct.
       Only necessary for WITH_SCACHE case, but to avoid the
       conditional compilation ....  */
d61 4
a64 5
    /* Virtual insns have zero size.  Overwrite vpc with address of next insn
       using the default-insn-bitsize spec.  When executing insns in parallel
       we may want to queue the fault and continue execution.  */
    vpc = SEM_NEXT_VPC (sem_arg, pc, 2);
    vpc = sim_engine_invalid_insn (current_cpu, pc, vpc);
d3388 1
a3388 1
((void) 0); /*nop*/
d3406 1
a3406 1
((void) 0); /*nop*/
d4599 1
a4599 1
((void) 0); /*nop*/
d4616 1
a4616 1
((void) 0); /*nop*/
d4633 1
a4633 1
((void) 0); /*nop*/
d4650 1
a4650 1
((void) 0); /*nop*/
d4667 1
a4667 1
((void) 0); /*nop*/
d5704 1
a5704 3
      const CGEN_INSN *insn = idesc_table[sf->index].idata;
      int valid_p = (CGEN_INSN_VIRTUAL_P (insn)
		     || CGEN_INSN_MACH_HAS_P (insn, mach_num));
@


