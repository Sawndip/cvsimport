head	1.13;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.13
	gdb_7_6-2013-04-26-release:1.13
	gdb_7_6-branch:1.13.0.2
	gdb_7_6-2013-03-12-branchpoint:1.13
	gdb_7_5_1-2012-11-29-release:1.12
	gdb_7_5-2012-08-17-release:1.12
	gdb_7_5-branch:1.12.0.2
	gdb_7_5-2012-07-18-branchpoint:1.12
	gdb_7_4_1-2012-04-26-release:1.11.4.1
	gdb_7_4-2012-01-24-release:1.11.4.1
	gdb_7_4-branch:1.11.0.4
	gdb_7_4-2011-12-13-branchpoint:1.11
	gdb_7_3_1-2011-09-04-release:1.11
	gdb_7_3-2011-07-26-release:1.11
	gdb_7_3-branch:1.11.0.2
	gdb_7_3-2011-04-01-branchpoint:1.11
	gdb_7_2-2010-09-02-release:1.10
	gdb_7_2-branch:1.10.0.4
	gdb_7_2-2010-07-07-branchpoint:1.10
	gdb_7_1-2010-03-18-release:1.10
	gdb_7_1-branch:1.10.0.2
	gdb_7_1-2010-02-18-branchpoint:1.10
	gdb_7_0_1-2009-12-22-release:1.9
	gdb_7_0-2009-10-06-release:1.9
	gdb_7_0-branch:1.9.0.4
	gdb_7_0-2009-09-16-branchpoint:1.9
	arc-sim-20090309:1.8
	msnyder-checkpoint-072509-branch:1.9.0.2
	msnyder-checkpoint-072509-branchpoint:1.9
	arc-insight_6_8-branch:1.8.0.16
	arc-insight_6_8-branchpoint:1.8
	insight_6_8-branch:1.8.0.14
	insight_6_8-branchpoint:1.8
	reverse-20081226-branch:1.8.0.12
	reverse-20081226-branchpoint:1.8
	multiprocess-20081120-branch:1.8.0.10
	multiprocess-20081120-branchpoint:1.8
	reverse-20080930-branch:1.8.0.8
	reverse-20080930-branchpoint:1.8
	reverse-20080717-branch:1.8.0.6
	reverse-20080717-branchpoint:1.8
	msnyder-reverse-20080609-branch:1.8.0.4
	msnyder-reverse-20080609-branchpoint:1.8
	drow-reverse-20070409-branch:1.6.0.2
	drow-reverse-20070409-branchpoint:1.6
	gdb_6_8-2008-03-27-release:1.8
	gdb_6_8-branch:1.8.0.2
	gdb_6_8-2008-02-26-branchpoint:1.8
	gdb_6_7_1-2007-10-29-release:1.7
	gdb_6_7-2007-10-10-release:1.7
	gdb_6_7-branch:1.7.0.2
	gdb_6_7-2007-09-07-branchpoint:1.7
	insight_6_6-20070208-release:1.5
	gdb_6_6-2006-12-18-release:1.5
	gdb_6_6-branch:1.5.0.48
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb-csl-symbian-6_4_50_20060226-12:1.5
	gdb-csl-sourcerygxx-3_4_4-25:1.5
	nickrob-async-20060828-mergepoint:1.5
	gdb-csl-symbian-6_4_50_20060226-11:1.5
	gdb-csl-sourcerygxx-4_1-17:1.5
	gdb-csl-20060226-branch-local-2:1.5
	gdb-csl-sourcerygxx-4_1-14:1.5
	gdb-csl-sourcerygxx-4_1-13:1.5
	gdb-csl-sourcerygxx-4_1-12:1.5
	gdb-csl-sourcerygxx-3_4_4-21:1.5
	gdb_6_5-20060621-release:1.5
	gdb-csl-sourcerygxx-4_1-9:1.5
	gdb-csl-sourcerygxx-4_1-8:1.5
	gdb-csl-sourcerygxx-4_1-7:1.5
	gdb-csl-arm-2006q1-6:1.5
	gdb-csl-sourcerygxx-4_1-6:1.5
	gdb-csl-symbian-6_4_50_20060226-10:1.5
	gdb-csl-symbian-6_4_50_20060226-9:1.5
	gdb-csl-symbian-6_4_50_20060226-8:1.5
	gdb-csl-coldfire-4_1-11:1.5
	gdb-csl-sourcerygxx-3_4_4-19:1.5
	gdb-csl-coldfire-4_1-10:1.5
	gdb_6_5-branch:1.5.0.46
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb-csl-sourcerygxx-4_1-5:1.5
	nickrob-async-20060513-branch:1.5.0.44
	nickrob-async-20060513-branchpoint:1.5
	gdb-csl-sourcerygxx-4_1-4:1.5
	msnyder-reverse-20060502-branch:1.5.0.42
	msnyder-reverse-20060502-branchpoint:1.5
	gdb-csl-morpho-4_1-4:1.5
	gdb-csl-sourcerygxx-3_4_4-17:1.5
	readline_5_1-import-branch:1.5.0.40
	readline_5_1-import-branchpoint:1.5
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.5
	gdb-csl-symbian-20060226-branch:1.5.0.38
	gdb-csl-symbian-20060226-branchpoint:1.5
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.5
	msnyder-reverse-20060331-branch:1.5.0.36
	msnyder-reverse-20060331-branchpoint:1.5
	gdb-csl-available-20060303-branch:1.5.0.34
	gdb-csl-available-20060303-branchpoint:1.5
	gdb-csl-20060226-branch:1.5.0.32
	gdb-csl-20060226-branchpoint:1.5
	gdb_6_4-20051202-release:1.5
	msnyder-fork-checkpoint-branch:1.5.0.30
	msnyder-fork-checkpoint-branchpoint:1.5
	gdb-csl-gxxpro-6_3-branch:1.5.0.28
	gdb-csl-gxxpro-6_3-branchpoint:1.5
	gdb_6_4-branch:1.5.0.26
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb-csl-arm-20051020-branch:1.5.0.24
	gdb-csl-arm-20051020-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.22
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb-csl-arm-20050325-2005-q1b:1.5
	gdb-csl-arm-20050325-2005-q1a:1.5
	csl-arm-20050325-branch:1.5.0.20
	csl-arm-20050325-branchpoint:1.5
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.16
	gdb_6_3-20041019-branchpoint:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.18
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.14
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.12
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.10
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.6
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.4
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.2
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.1.1.3
	gdb_6_0-2003-10-04-release:1.1.1.3
	kettenis_sparc-20030918-branch:1.1.1.3.0.68
	kettenis_sparc-20030918-branchpoint:1.1.1.3
	carlton_dictionary-20030917-merge:1.1.1.3
	ezannoni_pie-20030916-branchpoint:1.1.1.3
	ezannoni_pie-20030916-branch:1.1.1.3.0.66
	cagney_x86i386-20030821-branch:1.1.1.3.0.64
	cagney_x86i386-20030821-branchpoint:1.1.1.3
	carlton_dictionary-20030805-merge:1.1.1.3
	carlton_dictionary-20030627-merge:1.1.1.3
	gdb_6_0-branch:1.1.1.3.0.62
	gdb_6_0-2003-06-23-branchpoint:1.1.1.3
	jimb-ppc64-linux-20030613-branch:1.1.1.3.0.60
	jimb-ppc64-linux-20030613-branchpoint:1.1.1.3
	cagney_convert-20030606-branch:1.1.1.3.0.58
	cagney_convert-20030606-branchpoint:1.1.1.3
	cagney_writestrings-20030508-branch:1.1.1.3.0.56
	cagney_writestrings-20030508-branchpoint:1.1.1.3
	jimb-ppc64-linux-20030528-branch:1.1.1.3.0.54
	jimb-ppc64-linux-20030528-branchpoint:1.1.1.3
	carlton_dictionary-20030523-merge:1.1.1.3
	cagney_fileio-20030521-branch:1.1.1.3.0.52
	cagney_fileio-20030521-branchpoint:1.1.1.3
	kettenis_i386newframe-20030517-mergepoint:1.1.1.3
	jimb-ppc64-linux-20030509-branch:1.1.1.3.0.50
	jimb-ppc64-linux-20030509-branchpoint:1.1.1.3
	kettenis_i386newframe-20030504-mergepoint:1.1.1.3
	carlton_dictionary-20030430-merge:1.1.1.3
	kettenis_i386newframe-20030419-branch:1.1.1.3.0.48
	kettenis_i386newframe-20030419-branchpoint:1.1.1.3
	carlton_dictionary-20030416-merge:1.1.1.3
	cagney_frameaddr-20030409-mergepoint:1.1.1.3
	kettenis_i386newframe-20030406-branch:1.1.1.3.0.46
	kettenis_i386newframe-20030406-branchpoint:1.1.1.3
	cagney_frameaddr-20030403-branchpoint:1.1.1.3
	cagney_frameaddr-20030403-branch:1.1.1.3.0.44
	cagney_framebase-20030330-mergepoint:1.1.1.3
	cagney_framebase-20030326-branch:1.1.1.3.0.42
	cagney_framebase-20030326-branchpoint:1.1.1.3
	cagney_lazyid-20030317-branch:1.1.1.3.0.40
	cagney_lazyid-20030317-branchpoint:1.1.1.3
	kettenis-i386newframe-20030316-mergepoint:1.1.1.3
	offbyone-20030313-branch:1.1.1.3.0.38
	offbyone-20030313-branchpoint:1.1.1.3
	kettenis-i386newframe-20030308-branch:1.1.1.3.0.36
	kettenis-i386newframe-20030308-branchpoint:1.1.1.3
	carlton_dictionary-20030305-merge:1.1.1.3
	cagney_offbyone-20030303-branch:1.1.1.3.0.34
	cagney_offbyone-20030303-branchpoint:1.1.1.3
	carlton_dictionary-20030207-merge:1.1.1.3
	interps-20030202-branch:1.1.1.3.0.32
	interps-20030202-branchpoint:1.1.1.3
	cagney-unwind-20030108-branch:1.1.1.3.0.30
	cagney-unwind-20030108-branchpoint:1.1.1.3
	carlton_dictionary-20021223-merge:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.3
	carlton_dictionary-20021115-merge:1.1.1.3
	kseitz_interps-20021105-merge:1.1.1.3
	kseitz_interps-20021103-merge:1.1.1.3
	drow-cplus-merge-20021020:1.1.1.3
	drow-cplus-merge-20021025:1.1.1.3
	carlton_dictionary-20021025-merge:1.1.1.3
	carlton_dictionary-20021011-merge:1.1.1.3
	drow-cplus-branch:1.1.1.3.0.28
	drow-cplus-branchpoint:1.1.1.3
	kseitz_interps-20020930-merge:1.1.1.3
	carlton_dictionary-20020927-merge:1.1.1.3
	carlton_dictionary-branch:1.1.1.3.0.26
	carlton_dictionary-20020920-branchpoint:1.1.1.3
	gdb_5_3-branch:1.1.1.3.0.24
	gdb_5_3-2002-09-04-branchpoint:1.1.1.3
	kseitz_interps-20020829-merge:1.1.1.3
	cagney_sysregs-20020825-branch:1.1.1.3.0.22
	cagney_sysregs-20020825-branchpoint:1.1.1.3
	readline_4_3-import-branch:1.1.1.3.0.20
	readline_4_3-import-branchpoint:1.1.1.3
	gdb_5_2_1-2002-07-23-release:1.1.1.3
	kseitz_interps-20020528-branch:1.1.1.3.0.18
	kseitz_interps-20020528-branchpoint:1.1.1.3
	cagney_regbuf-20020515-branch:1.1.1.3.0.16
	cagney_regbuf-20020515-branchpoint:1.1.1.3
	jimb-macro-020506-branch:1.1.1.3.0.14
	jimb-macro-020506-branchpoint:1.1.1.3
	gdb_5_2-2002-04-29-release:1.1.1.3
	gdb_5_2-branch:1.1.1.3.0.12
	gdb_5_2-2002-03-03-branchpoint:1.1.1.3
	gdb_5_1_1-2002-01-24-release:1.1.1.3
	gdb_5_1_0_1-2002-01-03-release:1.1.1.3
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.3.0.10
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.3
	gdb_5_1-2001-11-21-release:1.1.1.3
	gdb_s390-2001-09-26-branch:1.1.1.3.0.8
	gdb_s390-2001-09-26-branchpoint:1.1.1.3
	gdb_5_1-2001-07-29-branch:1.1.1.3.0.6
	gdb_5_1-2001-07-29-branchpoint:1.1.1.3
	insight-precleanup-2001-01-01:1.1.1.3
	gdb-premipsmulti-2000-06-06-branch:1.1.1.3.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.3
	gdb_5_0-2000-05-19-release:1.1.1.3
	gdb_4_18_2-2000-05-18-release:1.1.1.3
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.3
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.3
	gdb_5_0-2000-04-10-branch:1.1.1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.3
	repo-unification-2000-02-06:1.1.1.3
	gdb-2000-02-04:1.1.1.3
	gdb-2000-02-02:1.1.1.3
	gdb-2000-02-01:1.1.1.3
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.3
	gdb-1999-12-07:1.1.1.3
	gdb-1999-12-06:1.1.1.3
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.13
date	2013.01.01.06.41.38;	author brobecke;	state Exp;
branches;
next	1.12;

1.12
date	2012.01.04.08.28.13;	author brobecke;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.01.15.34.02;	author brobecke;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2010.01.01.10.03.31;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.14.10.53.08;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.01.22.53.25;	author drow;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.24.14.28.37;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.09.17.59.18;	author drow;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.11.11.33.44;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.07.16.13.06;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.07.02.58.01;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.07.02.27.45;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.06;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.11.4.1
date	2012.01.06.04.54.53;	author brobecke;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.35.06;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.33.00;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.10.05.23.13.56;	author jsm;	state Exp;
branches
	1.1.1.3.26.1
	1.1.1.3.28.1;
next	;

1.1.1.3.26.1
date	2003.12.16.00.01.26;	author carlton;	state Exp;
branches;
next	;

1.1.1.3.28.1
date	2003.12.14.20.28.25;	author drow;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@/* m32r exception, interrupt, and trap (EIT) support
   Copyright (C) 1998-2013 Free Software Foundation, Inc.
   Contributed by Cygnus Solutions.

   This file is part of GDB, the GNU debugger.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "sim-main.h"
#include "targ-vals.h"

#define TRAP_FLUSH_CACHE 12
/* The semantic code invokes this for invalid (unrecognized) instructions.  */

SEM_PC
sim_engine_invalid_insn (SIM_CPU *current_cpu, IADDR cia, SEM_PC pc)
{
  SIM_DESC sd = CPU_STATE (current_cpu);

#if 0
  if (STATE_ENVIRONMENT (sd) == OPERATING_ENVIRONMENT)
    {
      h_bsm_set (current_cpu, h_sm_get (current_cpu));
      h_bie_set (current_cpu, h_ie_get (current_cpu));
      h_bcond_set (current_cpu, h_cond_get (current_cpu));
      /* sm not changed */
      h_ie_set (current_cpu, 0);
      h_cond_set (current_cpu, 0);

      h_bpc_set (current_cpu, cia);

      sim_engine_restart (CPU_STATE (current_cpu), current_cpu, NULL,
			  EIT_RSVD_INSN_ADDR);
    }
  else
#endif
    sim_engine_halt (sd, current_cpu, NULL, cia, sim_stopped, SIM_SIGILL);

  return pc;
}

/* Process an address exception.  */

void
m32r_core_signal (SIM_DESC sd, SIM_CPU *current_cpu, sim_cia cia,
		  unsigned int map, int nr_bytes, address_word addr,
		  transfer_type transfer, sim_core_signals sig)
{
  if (STATE_ENVIRONMENT (sd) == OPERATING_ENVIRONMENT)
    {
      m32rbf_h_cr_set (current_cpu, H_CR_BBPC,
		       m32rbf_h_cr_get (current_cpu, H_CR_BPC));
      switch (MACH_NUM (CPU_MACH (current_cpu)))
	{
	case MACH_M32R:
	  m32rbf_h_bpsw_set (current_cpu, m32rbf_h_psw_get (current_cpu));
	  /* sm not changed.  */
	  m32rbf_h_psw_set (current_cpu, m32rbf_h_psw_get (current_cpu) & 0x80);
	  break;
	case MACH_M32RX:
  	  m32rxf_h_bpsw_set (current_cpu, m32rxf_h_psw_get (current_cpu));
  	  /* sm not changed.  */
  	  m32rxf_h_psw_set (current_cpu, m32rxf_h_psw_get (current_cpu) & 0x80);
	  break;
	case MACH_M32R2:
	  m32r2f_h_bpsw_set (current_cpu, m32r2f_h_psw_get (current_cpu));
	  /* sm not changed.  */
	  m32r2f_h_psw_set (current_cpu, m32r2f_h_psw_get (current_cpu) & 0x80);
	  break;
	default:
	  abort ();
	}
	    
      m32rbf_h_cr_set (current_cpu, H_CR_BPC, cia);

      sim_engine_restart (CPU_STATE (current_cpu), current_cpu, NULL,
			  EIT_ADDR_EXCP_ADDR);
    }
  else
    sim_core_signal (sd, current_cpu, cia, map, nr_bytes, addr,
		     transfer, sig);
}

/* Read/write functions for system call interface.  */

static int
syscall_read_mem (host_callback *cb, struct cb_syscall *sc,
		  unsigned long taddr, char *buf, int bytes)
{
  SIM_DESC sd = (SIM_DESC) sc->p1;
  SIM_CPU *cpu = (SIM_CPU *) sc->p2;

  return sim_core_read_buffer (sd, cpu, read_map, buf, taddr, bytes);
}

static int
syscall_write_mem (host_callback *cb, struct cb_syscall *sc,
		   unsigned long taddr, const char *buf, int bytes)
{
  SIM_DESC sd = (SIM_DESC) sc->p1;
  SIM_CPU *cpu = (SIM_CPU *) sc->p2;

  return sim_core_write_buffer (sd, cpu, write_map, buf, taddr, bytes);
}

/* Trap support.
   The result is the pc address to continue at.
   Preprocessing like saving the various registers has already been done.  */

USI
m32r_trap (SIM_CPU *current_cpu, PCADDR pc, int num)
{
  SIM_DESC sd = CPU_STATE (current_cpu);
  host_callback *cb = STATE_CALLBACK (sd);

#ifdef SIM_HAVE_BREAKPOINTS
  /* Check for breakpoints "owned" by the simulator first, regardless
     of --environment.  */
  if (num == TRAP_BREAKPOINT)
    {
      /* First try sim-break.c.  If it's a breakpoint the simulator "owns"
	 it doesn't return.  Otherwise it returns and let's us try.  */
      sim_handle_breakpoint (sd, current_cpu, pc);
      /* Fall through.  */
    }
#endif

  if (STATE_ENVIRONMENT (sd) == OPERATING_ENVIRONMENT)
    {
      /* The new pc is the trap vector entry.
	 We assume there's a branch there to some handler.
         Use cr5 as EVB (EIT Vector Base) register.  */
      /* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
      USI new_pc = m32rbf_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
      return new_pc;
    }

  switch (num)
    {
    case TRAP_SYSCALL :
      {
	CB_SYSCALL s;

	CB_SYSCALL_INIT (&s);
	s.func = m32rbf_h_gr_get (current_cpu, 0);
	s.arg1 = m32rbf_h_gr_get (current_cpu, 1);
	s.arg2 = m32rbf_h_gr_get (current_cpu, 2);
	s.arg3 = m32rbf_h_gr_get (current_cpu, 3);

	if (s.func == TARGET_SYS_exit)
	  {
	    sim_engine_halt (sd, current_cpu, NULL, pc, sim_exited, s.arg1);
	  }

	s.p1 = (PTR) sd;
	s.p2 = (PTR) current_cpu;
	s.read_mem = syscall_read_mem;
	s.write_mem = syscall_write_mem;
	cb_syscall (cb, &s);
	m32rbf_h_gr_set (current_cpu, 2, s.errcode);
	m32rbf_h_gr_set (current_cpu, 0, s.result);
	m32rbf_h_gr_set (current_cpu, 1, s.result2);
	break;
      }

    case TRAP_BREAKPOINT:
      sim_engine_halt (sd, current_cpu, NULL, pc,
		       sim_stopped, SIM_SIGTRAP);
      break;

    case TRAP_FLUSH_CACHE:
      /* Do nothing.  */
      break;

    default :
      {
	/* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
        /* Use cr5 as EVB (EIT Vector Base) register.  */
        USI new_pc = m32rbf_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
	return new_pc;
      }
    }

  /* Fake an "rte" insn.  */
  /* FIXME: Should duplicate all of rte processing.  */
  return (pc & -4) + 4;
}
@


1.12
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 2003, 2007-2012 Free Software Foundation, Inc.
@


1.11
log
@run copyright.sh for 2011.
@
text
@d2 1
a2 2
   Copyright (C) 1998, 2003, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.11.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 2
a3 1
   Copyright (C) 1998, 2003, 2007-2012 Free Software Foundation, Inc.
@


1.10
log
@Update copyright notices to add year 2010.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 2003, 2007, 2008, 2009, 2010
@


1.9
log
@        Update the copyright notice of some of the files I missed
        in the previous copyright update.
@
text
@d2 2
a3 1
   Copyright (C) 1998, 2003, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.8
log
@	Updated copyright notices for most files.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 2003, 2007, 2008 Free Software Foundation, Inc.
@


1.7
log
@        Switch the license of all files explicitly copyright the FSF
        to GPLv3.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 2003, 2007 Free Software Foundation, Inc.
@


1.6
log
@Copyright updates for 2007.
@
text
@d9 2
a10 2
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
d17 2
a18 3
   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.5
log
@Add support for the m32r2 processor
@
text
@d2 1
a2 1
   Copyright (C) 1998, 2003 Free Software Foundation, Inc.
@


1.4
log
@More reversion of incomplete m32r changes.  Should be back to normal.
@
text
@d2 1
a2 1
   Copyright (C) 1998 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GDB, the GNU debugger.
d7 13
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d24 1
d27 2
a28 2
void
sim_engine_invalid_insn (SIM_CPU *current_cpu, IADDR cia)
d50 2
d63 24
a86 6
      a_m32r_h_cr_set (current_cpu, H_CR_BBPC,
		       a_m32r_h_cr_get (current_cpu, H_CR_BPC));
      a_m32r_h_bpsw_set (current_cpu, a_m32r_h_psw_get (current_cpu));
      /* sm not changed */
      a_m32r_h_psw_set (current_cpu, a_m32r_h_psw_get (current_cpu) & 0x80);
      a_m32r_h_cr_set (current_cpu, H_CR_BPC, cia);
d143 4
a146 2
	 We assume there's a branch there to some handler.  */
      USI new_pc = EIT_TRAP_BASE_ADDR + num * 4;
d157 4
a160 4
	s.func = a_m32r_h_gr_get (current_cpu, 0);
	s.arg1 = a_m32r_h_gr_get (current_cpu, 1);
	s.arg2 = a_m32r_h_gr_get (current_cpu, 2);
	s.arg3 = a_m32r_h_gr_get (current_cpu, 3);
d172 3
a174 3
	a_m32r_h_gr_set (current_cpu, 2, s.errcode);
	a_m32r_h_gr_set (current_cpu, 0, s.result);
	a_m32r_h_gr_set (current_cpu, 1, s.result2);
d183 4
d189 3
a191 1
	USI new_pc = EIT_TRAP_BASE_ADDR + num * 4;
@


1.3
log
@Revert last commit, build problems.
@
text
@d24 1
a24 3
/* The semantic code invokes this for invalid (unrecognized) instructions.
   CIA is the address with the invalid insn.
   VPC is the virtual pc of the following insn.  */
d26 2
a27 2
SEM_PC
sim_engine_invalid_insn (SIM_CPU *current_cpu, IADDR cia, SEM_PC vpc)
a48 1
  return vpc;
d62 3
a64 12
      if (MACH_NUM (CPU_MACH (current_cpu)) == MACH_M32R)
	{
	  m32rbf_h_bpsw_set (current_cpu, m32rbf_h_psw_get (current_cpu));
	  /* sm not changed */
	  m32rbf_h_psw_set (current_cpu, m32rbf_h_psw_get (current_cpu) & 0x80);
	}
      else
	{
	  m32rxf_h_bpsw_set (current_cpu, m32rxf_h_psw_get (current_cpu));
	  /* sm not changed */
	  m32rxf_h_psw_set (current_cpu, m32rxf_h_psw_get (current_cpu) & 0x80);
	}
@


1.2
log
@2003-12-02  Kazuhiro Inaoka <inaoka.kazuhiro@@renesas.com>

        * Makefile.in : Add new machine m32r2.
        * m32r2.c : New file for m32r2.
	* mloop2.in : Ditto
	* model2.c : Ditto
	* sem2-switch.c : Ditto
        * m32r-sim.h : Add EVB register.
        * sim-if.h : Ditto
        * sim-main.h : Ditto
        * traps.c : Ditto
@
text
@a23 1
#define TRAP_FLUSH_CACHE 12
d71 1
a71 1
      else if (MACH_NUM (CPU_MACH (current_cpu)) == MACH_M32RX)
a76 6
      else
	{
	  m32r2f_h_bpsw_set (current_cpu, m32r2f_h_psw_get (current_cpu));
	  /* sm not changed */
	  m32r2f_h_psw_set (current_cpu, m32r2f_h_psw_get (current_cpu) & 0x80);
	}
d134 2
a135 4
	 We assume there's a branch there to some handler.
         Use cr5 as EVB (EIT Vector Base) register.  */
      /* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
      USI new_pc = a_m32r_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
a171 4
    case TRAP_FLUSH_CACHE:
      /* Do nothing.  */
      break;

d174 1
a174 3
	/* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
        /* Use cr5 as EVB (EIT Vector Base) register.  */
        USI new_pc = a_m32r_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
@


1.1
log
@Initial revision
@
text
@d24 4
a27 1
/* The semantic code invokes this for invalid (unrecognized) instructions.  */
d29 2
a30 2
void
sim_engine_invalid_insn (SIM_CPU *current_cpu, IADDR cia)
d52 1
d66 18
a83 3
      a_m32r_h_bpsw_set (current_cpu, a_m32r_h_psw_get (current_cpu));
      /* sm not changed */
      a_m32r_h_psw_set (current_cpu, a_m32r_h_psw_get (current_cpu) & 0x80);
d141 4
a144 2
	 We assume there's a branch there to some handler.  */
      USI new_pc = EIT_TRAP_BASE_ADDR + num * 4;
d181 4
d187 3
a189 1
	USI new_pc = EIT_TRAP_BASE_ADDR + num * 4;
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d62 3
a64 12
      if (MACH_NUM (CPU_MACH (current_cpu)) == MACH_M32R)
	{
	  m32rbf_h_bpsw_set (current_cpu, m32rbf_h_psw_get (current_cpu));
	  /* sm not changed */
	  m32rbf_h_psw_set (current_cpu, m32rbf_h_psw_get (current_cpu) & 0x80);
	}
      else
	{
	  m32rxf_h_bpsw_set (current_cpu, m32rxf_h_psw_get (current_cpu));
	  /* sm not changed */
	  m32rxf_h_psw_set (current_cpu, m32rxf_h_psw_get (current_cpu) & 0x80);
	}
@


1.1.1.3
log
@import gdb-1999-10-04 snapshot
@
text
@d24 1
a24 3
/* The semantic code invokes this for invalid (unrecognized) instructions.
   CIA is the address with the invalid insn.
   VPC is the virtual pc of the following insn.  */
d26 2
a27 2
SEM_PC
sim_engine_invalid_insn (SIM_CPU *current_cpu, IADDR cia, SEM_PC vpc)
a48 1
  return vpc;
@


1.1.1.3.26.1
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 2003 Free Software Foundation, Inc.
d5 1
a5 1
   This file is part of GDB, the GNU debugger.
d7 13
a19 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d24 3
a26 2
#define TRAP_FLUSH_CACHE 12
/* The semantic code invokes this for invalid (unrecognized) instructions.  */
d29 1
a29 1
sim_engine_invalid_insn (SIM_CPU *current_cpu, IADDR cia, SEM_PC pc)
d51 1
a51 2

  return pc;
d63 3
a65 3
      m32rbf_h_cr_set (current_cpu, H_CR_BBPC,
		       m32rbf_h_cr_get (current_cpu, H_CR_BPC));
      switch (MACH_NUM (CPU_MACH (current_cpu)))
a66 1
	case MACH_M32R:
d68 1
a68 1
	  /* sm not changed.  */
a69 13
	  break;
	case MACH_M32RX:
  	  m32rxf_h_bpsw_set (current_cpu, m32rxf_h_psw_get (current_cpu));
  	  /* sm not changed.  */
  	  m32rxf_h_psw_set (current_cpu, m32rxf_h_psw_get (current_cpu) & 0x80);
	  break;
	case MACH_M32R2:
	  m32r2f_h_bpsw_set (current_cpu, m32r2f_h_psw_get (current_cpu));
	  /* sm not changed.  */
	  m32r2f_h_psw_set (current_cpu, m32r2f_h_psw_get (current_cpu) & 0x80);
	  break;
	default:
	  abort ();
d71 7
a77 2
	    
      m32rbf_h_cr_set (current_cpu, H_CR_BPC, cia);
d134 2
a135 4
	 We assume there's a branch there to some handler.
         Use cr5 as EVB (EIT Vector Base) register.  */
      /* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
      USI new_pc = m32rbf_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
d146 4
a149 4
	s.func = m32rbf_h_gr_get (current_cpu, 0);
	s.arg1 = m32rbf_h_gr_get (current_cpu, 1);
	s.arg2 = m32rbf_h_gr_get (current_cpu, 2);
	s.arg3 = m32rbf_h_gr_get (current_cpu, 3);
d161 3
a163 3
	m32rbf_h_gr_set (current_cpu, 2, s.errcode);
	m32rbf_h_gr_set (current_cpu, 0, s.result);
	m32rbf_h_gr_set (current_cpu, 1, s.result2);
a171 4
    case TRAP_FLUSH_CACHE:
      /* Do nothing.  */
      break;

d174 1
a174 3
	/* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
        /* Use cr5 as EVB (EIT Vector Base) register.  */
        USI new_pc = m32rbf_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
@


1.1.1.3.28.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright (C) 1998, 2003 Free Software Foundation, Inc.
d5 1
a5 1
   This file is part of GDB, the GNU debugger.
d7 13
a19 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d24 3
a26 2
#define TRAP_FLUSH_CACHE 12
/* The semantic code invokes this for invalid (unrecognized) instructions.  */
d29 1
a29 1
sim_engine_invalid_insn (SIM_CPU *current_cpu, IADDR cia, SEM_PC pc)
d51 1
a51 2

  return pc;
d63 3
a65 3
      m32rbf_h_cr_set (current_cpu, H_CR_BBPC,
		       m32rbf_h_cr_get (current_cpu, H_CR_BPC));
      switch (MACH_NUM (CPU_MACH (current_cpu)))
a66 1
	case MACH_M32R:
d68 1
a68 1
	  /* sm not changed.  */
a69 13
	  break;
	case MACH_M32RX:
  	  m32rxf_h_bpsw_set (current_cpu, m32rxf_h_psw_get (current_cpu));
  	  /* sm not changed.  */
  	  m32rxf_h_psw_set (current_cpu, m32rxf_h_psw_get (current_cpu) & 0x80);
	  break;
	case MACH_M32R2:
	  m32r2f_h_bpsw_set (current_cpu, m32r2f_h_psw_get (current_cpu));
	  /* sm not changed.  */
	  m32r2f_h_psw_set (current_cpu, m32r2f_h_psw_get (current_cpu) & 0x80);
	  break;
	default:
	  abort ();
d71 7
a77 2
	    
      m32rbf_h_cr_set (current_cpu, H_CR_BPC, cia);
d134 2
a135 4
	 We assume there's a branch there to some handler.
         Use cr5 as EVB (EIT Vector Base) register.  */
      /* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
      USI new_pc = m32rbf_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
d146 4
a149 4
	s.func = m32rbf_h_gr_get (current_cpu, 0);
	s.arg1 = m32rbf_h_gr_get (current_cpu, 1);
	s.arg2 = m32rbf_h_gr_get (current_cpu, 2);
	s.arg3 = m32rbf_h_gr_get (current_cpu, 3);
d161 3
a163 3
	m32rbf_h_gr_set (current_cpu, 2, s.errcode);
	m32rbf_h_gr_set (current_cpu, 0, s.result);
	m32rbf_h_gr_set (current_cpu, 1, s.result2);
a171 4
    case TRAP_FLUSH_CACHE:
      /* Do nothing.  */
      break;

d174 1
a174 3
	/* USI new_pc = EIT_TRAP_BASE_ADDR + num * 4; */
        /* Use cr5 as EVB (EIT Vector Base) register.  */
        USI new_pc = m32rbf_h_cr_get (current_cpu, 5) + 0x40 + num * 4;
@


