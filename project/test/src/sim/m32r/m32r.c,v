head	1.13;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.13
	gdb_7_6-2013-04-26-release:1.13
	gdb_7_6-branch:1.13.0.2
	gdb_7_6-2013-03-12-branchpoint:1.13
	gdb_7_5_1-2012-11-29-release:1.12
	gdb_7_5-2012-08-17-release:1.12
	gdb_7_5-branch:1.12.0.2
	gdb_7_5-2012-07-18-branchpoint:1.12
	gdb_7_4_1-2012-04-26-release:1.11.4.1
	gdb_7_4-2012-01-24-release:1.11.4.1
	gdb_7_4-branch:1.11.0.4
	gdb_7_4-2011-12-13-branchpoint:1.11
	gdb_7_3_1-2011-09-04-release:1.11
	gdb_7_3-2011-07-26-release:1.11
	gdb_7_3-branch:1.11.0.2
	gdb_7_3-2011-04-01-branchpoint:1.11
	gdb_7_2-2010-09-02-release:1.10
	gdb_7_2-branch:1.10.0.4
	gdb_7_2-2010-07-07-branchpoint:1.10
	gdb_7_1-2010-03-18-release:1.10
	gdb_7_1-branch:1.10.0.2
	gdb_7_1-2010-02-18-branchpoint:1.10
	gdb_7_0_1-2009-12-22-release:1.9
	gdb_7_0-2009-10-06-release:1.9
	gdb_7_0-branch:1.9.0.4
	gdb_7_0-2009-09-16-branchpoint:1.9
	arc-sim-20090309:1.8
	msnyder-checkpoint-072509-branch:1.9.0.2
	msnyder-checkpoint-072509-branchpoint:1.9
	arc-insight_6_8-branch:1.8.0.16
	arc-insight_6_8-branchpoint:1.8
	insight_6_8-branch:1.8.0.14
	insight_6_8-branchpoint:1.8
	reverse-20081226-branch:1.8.0.12
	reverse-20081226-branchpoint:1.8
	multiprocess-20081120-branch:1.8.0.10
	multiprocess-20081120-branchpoint:1.8
	reverse-20080930-branch:1.8.0.8
	reverse-20080930-branchpoint:1.8
	reverse-20080717-branch:1.8.0.6
	reverse-20080717-branchpoint:1.8
	msnyder-reverse-20080609-branch:1.8.0.4
	msnyder-reverse-20080609-branchpoint:1.8
	drow-reverse-20070409-branch:1.6.0.2
	drow-reverse-20070409-branchpoint:1.6
	gdb_6_8-2008-03-27-release:1.8
	gdb_6_8-branch:1.8.0.2
	gdb_6_8-2008-02-26-branchpoint:1.8
	gdb_6_7_1-2007-10-29-release:1.7
	gdb_6_7-2007-10-10-release:1.7
	gdb_6_7-branch:1.7.0.2
	gdb_6_7-2007-09-07-branchpoint:1.7
	insight_6_6-20070208-release:1.5
	gdb_6_6-2006-12-18-release:1.5
	gdb_6_6-branch:1.5.0.48
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb-csl-symbian-6_4_50_20060226-12:1.5
	gdb-csl-sourcerygxx-3_4_4-25:1.5
	nickrob-async-20060828-mergepoint:1.5
	gdb-csl-symbian-6_4_50_20060226-11:1.5
	gdb-csl-sourcerygxx-4_1-17:1.5
	gdb-csl-20060226-branch-local-2:1.5
	gdb-csl-sourcerygxx-4_1-14:1.5
	gdb-csl-sourcerygxx-4_1-13:1.5
	gdb-csl-sourcerygxx-4_1-12:1.5
	gdb-csl-sourcerygxx-3_4_4-21:1.5
	gdb_6_5-20060621-release:1.5
	gdb-csl-sourcerygxx-4_1-9:1.5
	gdb-csl-sourcerygxx-4_1-8:1.5
	gdb-csl-sourcerygxx-4_1-7:1.5
	gdb-csl-arm-2006q1-6:1.5
	gdb-csl-sourcerygxx-4_1-6:1.5
	gdb-csl-symbian-6_4_50_20060226-10:1.5
	gdb-csl-symbian-6_4_50_20060226-9:1.5
	gdb-csl-symbian-6_4_50_20060226-8:1.5
	gdb-csl-coldfire-4_1-11:1.5
	gdb-csl-sourcerygxx-3_4_4-19:1.5
	gdb-csl-coldfire-4_1-10:1.5
	gdb_6_5-branch:1.5.0.46
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb-csl-sourcerygxx-4_1-5:1.5
	nickrob-async-20060513-branch:1.5.0.44
	nickrob-async-20060513-branchpoint:1.5
	gdb-csl-sourcerygxx-4_1-4:1.5
	msnyder-reverse-20060502-branch:1.5.0.42
	msnyder-reverse-20060502-branchpoint:1.5
	gdb-csl-morpho-4_1-4:1.5
	gdb-csl-sourcerygxx-3_4_4-17:1.5
	readline_5_1-import-branch:1.5.0.40
	readline_5_1-import-branchpoint:1.5
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.5
	gdb-csl-symbian-20060226-branch:1.5.0.38
	gdb-csl-symbian-20060226-branchpoint:1.5
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.5
	msnyder-reverse-20060331-branch:1.5.0.36
	msnyder-reverse-20060331-branchpoint:1.5
	gdb-csl-available-20060303-branch:1.5.0.34
	gdb-csl-available-20060303-branchpoint:1.5
	gdb-csl-20060226-branch:1.5.0.32
	gdb-csl-20060226-branchpoint:1.5
	gdb_6_4-20051202-release:1.5
	msnyder-fork-checkpoint-branch:1.5.0.30
	msnyder-fork-checkpoint-branchpoint:1.5
	gdb-csl-gxxpro-6_3-branch:1.5.0.28
	gdb-csl-gxxpro-6_3-branchpoint:1.5
	gdb_6_4-branch:1.5.0.26
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb-csl-arm-20051020-branch:1.5.0.24
	gdb-csl-arm-20051020-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.22
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb-csl-arm-20050325-2005-q1b:1.5
	gdb-csl-arm-20050325-2005-q1a:1.5
	csl-arm-20050325-branch:1.5.0.20
	csl-arm-20050325-branchpoint:1.5
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.16
	gdb_6_3-20041019-branchpoint:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.18
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.14
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.12
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.10
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.6
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.4
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.2
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.1.1.2
	gdb_6_0-2003-10-04-release:1.1.1.2
	kettenis_sparc-20030918-branch:1.1.1.2.0.68
	kettenis_sparc-20030918-branchpoint:1.1.1.2
	carlton_dictionary-20030917-merge:1.1.1.2
	ezannoni_pie-20030916-branchpoint:1.1.1.2
	ezannoni_pie-20030916-branch:1.1.1.2.0.66
	cagney_x86i386-20030821-branch:1.1.1.2.0.64
	cagney_x86i386-20030821-branchpoint:1.1.1.2
	carlton_dictionary-20030805-merge:1.1.1.2
	carlton_dictionary-20030627-merge:1.1.1.2
	gdb_6_0-branch:1.1.1.2.0.62
	gdb_6_0-2003-06-23-branchpoint:1.1.1.2
	jimb-ppc64-linux-20030613-branch:1.1.1.2.0.60
	jimb-ppc64-linux-20030613-branchpoint:1.1.1.2
	cagney_convert-20030606-branch:1.1.1.2.0.58
	cagney_convert-20030606-branchpoint:1.1.1.2
	cagney_writestrings-20030508-branch:1.1.1.2.0.56
	cagney_writestrings-20030508-branchpoint:1.1.1.2
	jimb-ppc64-linux-20030528-branch:1.1.1.2.0.54
	jimb-ppc64-linux-20030528-branchpoint:1.1.1.2
	carlton_dictionary-20030523-merge:1.1.1.2
	cagney_fileio-20030521-branch:1.1.1.2.0.52
	cagney_fileio-20030521-branchpoint:1.1.1.2
	kettenis_i386newframe-20030517-mergepoint:1.1.1.2
	jimb-ppc64-linux-20030509-branch:1.1.1.2.0.50
	jimb-ppc64-linux-20030509-branchpoint:1.1.1.2
	kettenis_i386newframe-20030504-mergepoint:1.1.1.2
	carlton_dictionary-20030430-merge:1.1.1.2
	kettenis_i386newframe-20030419-branch:1.1.1.2.0.48
	kettenis_i386newframe-20030419-branchpoint:1.1.1.2
	carlton_dictionary-20030416-merge:1.1.1.2
	cagney_frameaddr-20030409-mergepoint:1.1.1.2
	kettenis_i386newframe-20030406-branch:1.1.1.2.0.46
	kettenis_i386newframe-20030406-branchpoint:1.1.1.2
	cagney_frameaddr-20030403-branchpoint:1.1.1.2
	cagney_frameaddr-20030403-branch:1.1.1.2.0.44
	cagney_framebase-20030330-mergepoint:1.1.1.2
	cagney_framebase-20030326-branch:1.1.1.2.0.42
	cagney_framebase-20030326-branchpoint:1.1.1.2
	cagney_lazyid-20030317-branch:1.1.1.2.0.40
	cagney_lazyid-20030317-branchpoint:1.1.1.2
	kettenis-i386newframe-20030316-mergepoint:1.1.1.2
	offbyone-20030313-branch:1.1.1.2.0.38
	offbyone-20030313-branchpoint:1.1.1.2
	kettenis-i386newframe-20030308-branch:1.1.1.2.0.36
	kettenis-i386newframe-20030308-branchpoint:1.1.1.2
	carlton_dictionary-20030305-merge:1.1.1.2
	cagney_offbyone-20030303-branch:1.1.1.2.0.34
	cagney_offbyone-20030303-branchpoint:1.1.1.2
	carlton_dictionary-20030207-merge:1.1.1.2
	interps-20030202-branch:1.1.1.2.0.32
	interps-20030202-branchpoint:1.1.1.2
	cagney-unwind-20030108-branch:1.1.1.2.0.30
	cagney-unwind-20030108-branchpoint:1.1.1.2
	carlton_dictionary-20021223-merge:1.1.1.2
	gdb_5_3-2002-12-12-release:1.1.1.2
	carlton_dictionary-20021115-merge:1.1.1.2
	kseitz_interps-20021105-merge:1.1.1.2
	kseitz_interps-20021103-merge:1.1.1.2
	drow-cplus-merge-20021020:1.1.1.2
	drow-cplus-merge-20021025:1.1.1.2
	carlton_dictionary-20021025-merge:1.1.1.2
	carlton_dictionary-20021011-merge:1.1.1.2
	drow-cplus-branch:1.1.1.2.0.28
	drow-cplus-branchpoint:1.1.1.2
	kseitz_interps-20020930-merge:1.1.1.2
	carlton_dictionary-20020927-merge:1.1.1.2
	carlton_dictionary-branch:1.1.1.2.0.26
	carlton_dictionary-20020920-branchpoint:1.1.1.2
	gdb_5_3-branch:1.1.1.2.0.24
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	kseitz_interps-20020829-merge:1.1.1.2
	cagney_sysregs-20020825-branch:1.1.1.2.0.22
	cagney_sysregs-20020825-branchpoint:1.1.1.2
	readline_4_3-import-branch:1.1.1.2.0.20
	readline_4_3-import-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	kseitz_interps-20020528-branch:1.1.1.2.0.18
	kseitz_interps-20020528-branchpoint:1.1.1.2
	cagney_regbuf-20020515-branch:1.1.1.2.0.16
	cagney_regbuf-20020515-branchpoint:1.1.1.2
	jimb-macro-020506-branch:1.1.1.2.0.14
	jimb-macro-020506-branchpoint:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.12
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.2
	gdb_5_1_0_1-2002-01-03-release:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.2.0.10
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.2
	gdb_5_1-2001-11-21-release:1.1.1.2
	gdb_s390-2001-09-26-branch:1.1.1.2.0.8
	gdb_s390-2001-09-26-branchpoint:1.1.1.2
	gdb_5_1-2001-07-29-branch:1.1.1.2.0.6
	gdb_5_1-2001-07-29-branchpoint:1.1.1.2
	insight-precleanup-2001-01-01:1.1.1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.2.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.2
	gdb_5_0-2000-05-19-release:1.1.1.2
	gdb_4_18_2-2000-05-18-release:1.1.1.2
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.2
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.2
	gdb_5_0-2000-04-10-branch:1.1.1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.2
	repo-unification-2000-02-06:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.13
date	2013.01.01.06.41.38;	author brobecke;	state Exp;
branches;
next	1.12;

1.12
date	2012.01.04.08.28.13;	author brobecke;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.01.15.34.02;	author brobecke;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2010.01.01.10.03.31;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.14.10.53.08;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.01.22.53.25;	author drow;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.24.14.28.37;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.09.17.59.18;	author drow;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.11.11.33.44;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.07.16.13.06;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.07.02.58.01;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.07.02.27.45;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.06;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.11.4.1
date	2012.01.06.04.54.51;	author brobecke;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.35.06;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.32.56;	author shebs;	state Exp;
branches
	1.1.1.2.26.1
	1.1.1.2.28.1;
next	;

1.1.1.2.26.1
date	2003.12.16.00.01.23;	author carlton;	state Exp;
branches;
next	;

1.1.1.2.28.1
date	2003.12.14.20.28.25;	author drow;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@/* m32r simulator support code
   Copyright (C) 1996-2013 Free Software Foundation, Inc.
   Contributed by Cygnus Support.

   This file is part of GDB, the GNU debugger.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#define WANT_CPU m32rbf
#define WANT_CPU_M32RBF

#include "sim-main.h"
#include "cgen-mem.h"
#include "cgen-ops.h"

/* Decode gdb ctrl register number.  */

int
m32r_decode_gdb_ctrl_regnum (int gdb_regnum)
{
  switch (gdb_regnum)
    {
      case PSW_REGNUM : return H_CR_PSW;
      case CBR_REGNUM : return H_CR_CBR;
      case SPI_REGNUM : return H_CR_SPI;
      case SPU_REGNUM : return H_CR_SPU;
      case BPC_REGNUM : return H_CR_BPC;
      case BBPSW_REGNUM : return H_CR_BBPSW;
      case BBPC_REGNUM : return H_CR_BBPC;
      case EVB_REGNUM : return H_CR_CR5;
    }
  abort ();
}

/* The contents of BUF are in target byte order.  */

int
m32rbf_fetch_register (SIM_CPU *current_cpu, int rn, unsigned char *buf, int len)
{
  if (rn < 16)
    SETTWI (buf, m32rbf_h_gr_get (current_cpu, rn));
  else
    switch (rn)
      {
      case PSW_REGNUM :
      case CBR_REGNUM :
      case SPI_REGNUM :
      case SPU_REGNUM :
      case BPC_REGNUM :
      case BBPSW_REGNUM :
      case BBPC_REGNUM :
	SETTWI (buf, m32rbf_h_cr_get (current_cpu,
				      m32r_decode_gdb_ctrl_regnum (rn)));
	break;
      case PC_REGNUM :
	SETTWI (buf, m32rbf_h_pc_get (current_cpu));
	break;
      case ACCL_REGNUM :
	SETTWI (buf, GETLODI (m32rbf_h_accum_get (current_cpu)));
	break;
      case ACCH_REGNUM :
	SETTWI (buf, GETHIDI (m32rbf_h_accum_get (current_cpu)));
	break;
      default :
	return 0;
      }

  return -1; /*FIXME*/
}

/* The contents of BUF are in target byte order.  */

int
m32rbf_store_register (SIM_CPU *current_cpu, int rn, unsigned char *buf, int len)
{
  if (rn < 16)
    m32rbf_h_gr_set (current_cpu, rn, GETTWI (buf));
  else
    switch (rn)
      {
      case PSW_REGNUM :
      case CBR_REGNUM :
      case SPI_REGNUM :
      case SPU_REGNUM :
      case BPC_REGNUM :
      case BBPSW_REGNUM :
      case BBPC_REGNUM :
	m32rbf_h_cr_set (current_cpu,
			 m32r_decode_gdb_ctrl_regnum (rn),
			 GETTWI (buf));
	break;
      case PC_REGNUM :
	m32rbf_h_pc_set (current_cpu, GETTWI (buf));
	break;
      case ACCL_REGNUM :
	{
	  DI val = m32rbf_h_accum_get (current_cpu);
	  SETLODI (val, GETTWI (buf));
	  m32rbf_h_accum_set (current_cpu, val);
	  break;
	}
      case ACCH_REGNUM :
	{
	  DI val = m32rbf_h_accum_get (current_cpu);
	  SETHIDI (val, GETTWI (buf));
	  m32rbf_h_accum_set (current_cpu, val);
	  break;
	}
      default :
	return 0;
      }

  return -1; /*FIXME*/
}

USI
m32rbf_h_cr_get_handler (SIM_CPU *current_cpu, UINT cr)
{
  switch (cr)
    {
    case H_CR_PSW : /* psw */
      return (((CPU (h_bpsw) & 0xc1) << 8)
	      | ((CPU (h_psw) & 0xc0) << 0)
	      | GET_H_COND ());
    case H_CR_BBPSW : /* backup backup psw */
      return CPU (h_bbpsw) & 0xc1;
    case H_CR_CBR : /* condition bit */
      return GET_H_COND ();
    case H_CR_SPI : /* interrupt stack pointer */
      if (! GET_H_SM ())
	return CPU (h_gr[H_GR_SP]);
      else
	return CPU (h_cr[H_CR_SPI]);
    case H_CR_SPU : /* user stack pointer */
      if (GET_H_SM ())
	return CPU (h_gr[H_GR_SP]);
      else
	return CPU (h_cr[H_CR_SPU]);
    case H_CR_BPC : /* backup pc */
      return CPU (h_cr[H_CR_BPC]) & 0xfffffffe;
    case H_CR_BBPC : /* backup backup pc */
      return CPU (h_cr[H_CR_BBPC]) & 0xfffffffe;
    case 4 : /* ??? unspecified, but apparently available */
    case 5 : /* ??? unspecified, but apparently available */
      return CPU (h_cr[cr]);
    default :
      return 0;
    }
}

void
m32rbf_h_cr_set_handler (SIM_CPU *current_cpu, UINT cr, USI newval)
{
  switch (cr)
    {
    case H_CR_PSW : /* psw */
      {
	int old_sm = (CPU (h_psw) & 0x80) != 0;
	int new_sm = (newval & 0x80) != 0;
	CPU (h_bpsw) = (newval >> 8) & 0xff;
	CPU (h_psw) = newval & 0xff;
	SET_H_COND (newval & 1);
	/* When switching stack modes, update the registers.  */
	if (old_sm != new_sm)
	  {
	    if (old_sm)
	      {
		/* Switching user -> system.  */
		CPU (h_cr[H_CR_SPU]) = CPU (h_gr[H_GR_SP]);
		CPU (h_gr[H_GR_SP]) = CPU (h_cr[H_CR_SPI]);
	      }
	    else
	      {
		/* Switching system -> user.  */
		CPU (h_cr[H_CR_SPI]) = CPU (h_gr[H_GR_SP]);
		CPU (h_gr[H_GR_SP]) = CPU (h_cr[H_CR_SPU]);
	      }
	  }
	break;
      }
    case H_CR_BBPSW : /* backup backup psw */
      CPU (h_bbpsw) = newval & 0xff;
      break;
    case H_CR_CBR : /* condition bit */
      SET_H_COND (newval & 1);
      break;
    case H_CR_SPI : /* interrupt stack pointer */
      if (! GET_H_SM ())
	CPU (h_gr[H_GR_SP]) = newval;
      else
	CPU (h_cr[H_CR_SPI]) = newval;
      break;
    case H_CR_SPU : /* user stack pointer */
      if (GET_H_SM ())
	CPU (h_gr[H_GR_SP]) = newval;
      else
	CPU (h_cr[H_CR_SPU]) = newval;
      break;
    case H_CR_BPC : /* backup pc */
      CPU (h_cr[H_CR_BPC]) = newval;
      break;
    case H_CR_BBPC : /* backup backup pc */
      CPU (h_cr[H_CR_BBPC]) = newval;
      break;
    case 4 : /* ??? unspecified, but apparently available */
    case 5 : /* ??? unspecified, but apparently available */
      CPU (h_cr[cr]) = newval;
      break;
    default :
      /* ignore */
      break;
    }
}

/* Cover fns to access h-psw.  */

UQI
m32rbf_h_psw_get_handler (SIM_CPU *current_cpu)
{
  return (CPU (h_psw) & 0xfe) | (CPU (h_cond) & 1);
}

void
m32rbf_h_psw_set_handler (SIM_CPU *current_cpu, UQI newval)
{
  CPU (h_psw) = newval;
  CPU (h_cond) = newval & 1;
}

/* Cover fns to access h-accum.  */

DI
m32rbf_h_accum_get_handler (SIM_CPU *current_cpu)
{
  /* Sign extend the top 8 bits.  */
  DI r;
#if 1
  r = ANDDI (CPU (h_accum), MAKEDI (0xffffff, 0xffffffff));
  r = XORDI (r, MAKEDI (0x800000, 0));
  r = SUBDI (r, MAKEDI (0x800000, 0));
#else
  SI hi,lo;
  r = CPU (h_accum);
  hi = GETHIDI (r);
  lo = GETLODI (r);
  hi = ((hi & 0xffffff) ^ 0x800000) - 0x800000;
  r = MAKEDI (hi, lo);
#endif
  return r;
}

void
m32rbf_h_accum_set_handler (SIM_CPU *current_cpu, DI newval)
{
  CPU (h_accum) = newval;
}

#if WITH_PROFILE_MODEL_P

/* FIXME: Some of these should be inline or macros.  Later.  */

/* Initialize cycle counting for an insn.
   FIRST_P is non-zero if this is the first insn in a set of parallel
   insns.  */

void
m32rbf_model_insn_before (SIM_CPU *cpu, int first_p)
{
  M32R_MISC_PROFILE *mp = CPU_M32R_MISC_PROFILE (cpu);
  mp->cti_stall = 0;
  mp->load_stall = 0;
  if (first_p)
    {
      mp->load_regs_pending = 0;
      mp->biggest_cycles = 0;
    }
}

/* Record the cycles computed for an insn.
   LAST_P is non-zero if this is the last insn in a set of parallel insns,
   and we update the total cycle count.
   CYCLES is the cycle count of the insn.  */

void
m32rbf_model_insn_after (SIM_CPU *cpu, int last_p, int cycles)
{
  PROFILE_DATA *p = CPU_PROFILE_DATA (cpu);
  M32R_MISC_PROFILE *mp = CPU_M32R_MISC_PROFILE (cpu);
  unsigned long total = cycles + mp->cti_stall + mp->load_stall;

  if (last_p)
    {
      unsigned long biggest = total > mp->biggest_cycles ? total : mp->biggest_cycles;
      PROFILE_MODEL_TOTAL_CYCLES (p) += biggest;
      PROFILE_MODEL_CUR_INSN_CYCLES (p) = total;
    }
  else
    {
      /* Here we take advantage of the fact that !last_p -> first_p.  */
      mp->biggest_cycles = total;
      PROFILE_MODEL_CUR_INSN_CYCLES (p) = total;
    }

  /* Branch and load stall counts are recorded independently of the
     total cycle count.  */
  PROFILE_MODEL_CTI_STALL_CYCLES (p) += mp->cti_stall;
  PROFILE_MODEL_LOAD_STALL_CYCLES (p) += mp->load_stall;

  mp->load_regs = mp->load_regs_pending;
}

static INLINE void
check_load_stall (SIM_CPU *cpu, int regno)
{
  UINT h_gr = CPU_M32R_MISC_PROFILE (cpu)->load_regs;

  if (regno != -1
      && (h_gr & (1 << regno)) != 0)
    {
      CPU_M32R_MISC_PROFILE (cpu)->load_stall += 2;
      if (TRACE_INSN_P (cpu))
	cgen_trace_printf (cpu, " ; Load stall of 2 cycles.");
    }
}

int
m32rbf_model_m32r_d_u_exec (SIM_CPU *cpu, const IDESC *idesc,
			    int unit_num, int referenced,
			    INT sr, INT sr2, INT dr)
{
  check_load_stall (cpu, sr);
  check_load_stall (cpu, sr2);
  return idesc->timing->units[unit_num].done;
}

int
m32rbf_model_m32r_d_u_cmp (SIM_CPU *cpu, const IDESC *idesc,
			   int unit_num, int referenced,
			   INT src1, INT src2)
{
  check_load_stall (cpu, src1);
  check_load_stall (cpu, src2);
  return idesc->timing->units[unit_num].done;
}

int
m32rbf_model_m32r_d_u_mac (SIM_CPU *cpu, const IDESC *idesc,
			   int unit_num, int referenced,
			   INT src1, INT src2)
{
  check_load_stall (cpu, src1);
  check_load_stall (cpu, src2);
  return idesc->timing->units[unit_num].done;
}

int
m32rbf_model_m32r_d_u_cti (SIM_CPU *cpu, const IDESC *idesc,
			   int unit_num, int referenced,
			   INT sr)
{
  PROFILE_DATA *profile = CPU_PROFILE_DATA (cpu);
  int taken_p = (referenced & (1 << 1)) != 0;

  check_load_stall (cpu, sr);
  if (taken_p)
    {
      CPU_M32R_MISC_PROFILE (cpu)->cti_stall += 2;
      PROFILE_MODEL_TAKEN_COUNT (profile) += 1;
    }
  else
    PROFILE_MODEL_UNTAKEN_COUNT (profile) += 1;
  return idesc->timing->units[unit_num].done;
}

int
m32rbf_model_m32r_d_u_load (SIM_CPU *cpu, const IDESC *idesc,
			    int unit_num, int referenced,
			    INT sr, INT dr)
{
  CPU_M32R_MISC_PROFILE (cpu)->load_regs_pending |= (1 << dr);
  check_load_stall (cpu, sr);
  return idesc->timing->units[unit_num].done;
}

int
m32rbf_model_m32r_d_u_store (SIM_CPU *cpu, const IDESC *idesc,
			     int unit_num, int referenced,
			     INT src1, INT src2)
{
  check_load_stall (cpu, src1);
  check_load_stall (cpu, src2);
  return idesc->timing->units[unit_num].done;
}

int
m32rbf_model_test_u_exec (SIM_CPU *cpu, const IDESC *idesc,
			  int unit_num, int referenced)
{
  return idesc->timing->units[unit_num].done;
}

#endif /* WITH_PROFILE_MODEL_P */
@


1.12
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 1
a2 2
   Copyright (C) 1996-1998, 2003, 2007-2012 Free Software Foundation,
   Inc.
@


1.11
log
@run copyright.sh for 2011.
@
text
@d2 2
a3 2
   Copyright (C) 1996, 1997, 1998, 2003, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.11.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 2
a3 2
   Copyright (C) 1996-1998, 2003, 2007-2012 Free Software Foundation,
   Inc.
@


1.10
log
@Update copyright notices to add year 2010.
@
text
@d2 1
a2 1
   Copyright (C) 1996, 1997, 1998, 2003, 2007, 2008, 2009, 2010
@


1.9
log
@        Update the copyright notice of some of the files I missed
        in the previous copyright update.
@
text
@d2 1
a2 1
   Copyright (C) 1996, 1997, 1998, 2003, 2007, 2008, 2009
@


1.8
log
@	Updated copyright notices for most files.
@
text
@d2 1
a2 1
   Copyright (C) 1996, 1997, 1998, 2003, 2007, 2008
@


1.7
log
@        Switch the license of all files explicitly copyright the FSF
        to GPLv3.
@
text
@d2 2
a3 1
   Copyright (C) 1996, 1997, 1998, 2003, 2007 Free Software Foundation, Inc.
@


1.6
log
@Copyright updates for 2007.
@
text
@d9 2
a10 2
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
d17 2
a18 3
   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.5
log
@Add support for the m32r2 processor
@
text
@d2 1
a2 1
   Copyright (C) 1996, 1997, 1998, 2003 Free Software Foundation, Inc.
@


1.4
log
@More reversion of incomplete m32r changes.  Should be back to normal.
@
text
@d2 1
a2 1
   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GDB, the GNU debugger.
d7 13
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d42 1
d53 1
a53 1
    SETTWI (buf, a_m32r_h_gr_get (current_cpu, rn));
d64 1
a64 1
	SETTWI (buf, a_m32r_h_cr_get (current_cpu,
d68 1
a68 1
	SETTWI (buf, a_m32r_h_pc_get (current_cpu));
d71 1
a71 1
	SETTWI (buf, GETLODI (a_m32r_h_accum_get (current_cpu)));
d74 1
a74 1
	SETTWI (buf, GETHIDI (a_m32r_h_accum_get (current_cpu)));
d89 1
a89 1
    a_m32r_h_gr_set (current_cpu, rn, GETTWI (buf));
d100 1
a100 1
	a_m32r_h_cr_set (current_cpu,
d105 1
a105 1
	a_m32r_h_pc_set (current_cpu, GETTWI (buf));
d109 1
a109 1
	  DI val = a_m32r_h_accum_get (current_cpu);
d111 1
a111 1
	  a_m32r_h_accum_set (current_cpu, val);
d116 1
a116 1
	  DI val = a_m32r_h_accum_get (current_cpu);
d118 1
a118 1
	  a_m32r_h_accum_set (current_cpu, val);
@


1.3
log
@Revert last commit, build problems.
@
text
@a50 2
  int mach = MACH_NUM (CPU_MACH (current_cpu));

d67 1
a67 4
	if (mach == MACH_M32R)
	  SETTWI (buf, m32rbf_h_pc_get (current_cpu));
	else
	  SETTWI (buf, m32rxf_h_pc_get (current_cpu));
d70 1
a70 4
	if (mach == MACH_M32R)
	  SETTWI (buf, GETLODI (m32rbf_h_accum_get (current_cpu)));
	else
	  SETTWI (buf, GETLODI (m32rxf_h_accum_get (current_cpu)));
d73 1
a73 4
	if (mach == MACH_M32R)
	  SETTWI (buf, GETHIDI (m32rbf_h_accum_get (current_cpu)));
	else
	  SETTWI (buf, GETHIDI (m32rxf_h_accum_get (current_cpu)));
a86 2
  int mach = MACH_NUM (CPU_MACH (current_cpu));

d104 1
a104 4
	if (mach == MACH_M32R)
	  m32rbf_h_pc_set (current_cpu, GETTWI (buf));
	else
	  m32rxf_h_pc_set (current_cpu, GETTWI (buf));
d108 1
a108 5
	  DI val;
	  if (mach == MACH_M32R)
	    val = m32rbf_h_accum_get (current_cpu);
	  else
	    val = m32rxf_h_accum_get (current_cpu);
d110 1
a110 4
	  if (mach == MACH_M32R)
	    m32rbf_h_accum_set (current_cpu, val);
	  else
	    m32rxf_h_accum_set (current_cpu, val);
d115 1
a115 5
	  DI val;
	  if (mach == MACH_M32R)
	    val = m32rbf_h_accum_get (current_cpu);
	  else
	    val = m32rxf_h_accum_get (current_cpu);
d117 1
a117 4
	  if (mach == MACH_M32R)
	    m32rbf_h_accum_set (current_cpu, val);
	  else
	    m32rxf_h_accum_set (current_cpu, val);
a124 78
}

/* Cover fns for mach independent register accesses.  */

SI
a_m32r_h_gr_get (SIM_CPU *current_cpu, UINT regno)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      return m32rbf_h_gr_get (current_cpu, regno);
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      return m32rxf_h_gr_get (current_cpu, regno);
#endif
    default :
      abort ();
    }
}

void
a_m32r_h_gr_set (SIM_CPU *current_cpu, UINT regno, SI newval)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      m32rbf_h_gr_set (current_cpu, regno, newval);
      break;
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      m32rxf_h_gr_set (current_cpu, regno, newval);
      break;
#endif
    default :
      abort ();
    }
}

USI
a_m32r_h_cr_get (SIM_CPU *current_cpu, UINT regno)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      return m32rbf_h_cr_get (current_cpu, regno);
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      return m32rxf_h_cr_get (current_cpu, regno);
#endif
    default :
      abort ();
    }
}

void
a_m32r_h_cr_set (SIM_CPU *current_cpu, UINT regno, USI newval)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      m32rbf_h_cr_set (current_cpu, regno, newval);
      break;
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      m32rxf_h_cr_set (current_cpu, regno, newval);
      break;
#endif
    default :
      abort ();
    }
@


1.2
log
@2003-12-02  Kazuhiro Inaoka <inaoka.kazuhiro@@renesas.com>

        * Makefile.in : Add new machine m32r2.
        * m32r2.c : New file for m32r2.
	* mloop2.in : Ditto
	* model2.c : Ditto
	* sem2-switch.c : Ditto
        * m32r-sim.h : Add EVB register.
        * sim-if.h : Ditto
        * sim-main.h : Ditto
        * traps.c : Ditto
@
text
@a41 1
      case EVB_REGNUM : return H_CR_CR5;
a64 1
      case EVB_REGNUM :
d71 1
a71 1
	else if (mach == MACH_M32RX)
a72 2
	else
	  SETTWI (buf, m32r2f_h_pc_get (current_cpu));
d77 1
a77 1
	else if (mach == MACH_M32RX)
a78 2
	else
	  SETTWI (buf, GETLODI (m32r2f_h_accum_get (current_cpu)));
d83 1
a83 1
	else if (mach == MACH_M32RX)
a84 2
	else
	  SETTWI (buf, GETHIDI (m32r2f_h_accum_get (current_cpu)));
a111 1
      case EVB_REGNUM :
d119 1
a119 1
	else if (mach == MACH_M32RX)
a120 2
	else
	  m32r2f_h_pc_set (current_cpu, GETTWI (buf));
d127 1
a127 1
	  else if (mach == MACH_M32RX)
a128 2
	  else
	    val = m32r2f_h_accum_get (current_cpu);
d132 1
a132 1
	  else if (mach == MACH_M32RX)
a133 2
	  else
	    m32r2f_h_accum_set (current_cpu, val);
d141 1
a141 1
	  else if (mach == MACH_M32RX)
a142 2
	  else
	    val = m32r2f_h_accum_get (current_cpu);
d146 1
a146 1
	  else if (mach == MACH_M32RX)
a147 2
	  else
	    m32r2f_h_accum_set (current_cpu, val);
a171 4
#ifdef HAVE_CPU_M32R2F
    case MACH_M32R2 : 
      return m32r2f_h_gr_get (current_cpu, regno);
#endif
a191 5
#ifdef HAVE_CPU_M32RXF
    case MACH_M32R2 : 
      m32r2f_h_gr_set (current_cpu, regno, newval);
      break;
#endif
a209 4
#ifdef HAVE_CPU_M32R2F
    case MACH_M32R2 : 
      return m32r2f_h_cr_get (current_cpu, regno);
#endif
a227 5
      break;
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32R2 : 
      m32r2f_h_cr_set (current_cpu, regno, newval);
@


1.1
log
@Initial revision
@
text
@d42 1
d52 2
d66 1
d71 6
a76 1
	SETTWI (buf, a_m32r_h_pc_get (current_cpu));
d79 6
a84 1
	SETTWI (buf, GETLODI (a_m32r_h_accum_get (current_cpu)));
d87 6
a92 1
	SETTWI (buf, GETHIDI (a_m32r_h_accum_get (current_cpu)));
d106 2
d120 1
d126 6
a131 1
	a_m32r_h_pc_set (current_cpu, GETTWI (buf));
d135 7
a141 1
	  DI val = a_m32r_h_accum_get (current_cpu);
d143 6
a148 1
	  a_m32r_h_accum_set (current_cpu, val);
d153 7
a159 1
	  DI val = a_m32r_h_accum_get (current_cpu);
d161 6
a166 1
	  a_m32r_h_accum_set (current_cpu, val);
d174 96
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@a50 2
  int mach = MACH_NUM (CPU_MACH (current_cpu));

d67 1
a67 4
	if (mach == MACH_M32R)
	  SETTWI (buf, m32rbf_h_pc_get (current_cpu));
	else
	  SETTWI (buf, m32rxf_h_pc_get (current_cpu));
d70 1
a70 4
	if (mach == MACH_M32R)
	  SETTWI (buf, GETLODI (m32rbf_h_accum_get (current_cpu)));
	else
	  SETTWI (buf, GETLODI (m32rxf_h_accum_get (current_cpu)));
d73 1
a73 4
	if (mach == MACH_M32R)
	  SETTWI (buf, GETHIDI (m32rbf_h_accum_get (current_cpu)));
	else
	  SETTWI (buf, GETHIDI (m32rxf_h_accum_get (current_cpu)));
a86 2
  int mach = MACH_NUM (CPU_MACH (current_cpu));

d104 1
a104 4
	if (mach == MACH_M32R)
	  m32rbf_h_pc_set (current_cpu, GETTWI (buf));
	else
	  m32rxf_h_pc_set (current_cpu, GETTWI (buf));
d108 1
a108 5
	  DI val;
	  if (mach == MACH_M32R)
	    val = m32rbf_h_accum_get (current_cpu);
	  else
	    val = m32rxf_h_accum_get (current_cpu);
d110 1
a110 4
	  if (mach == MACH_M32R)
	    m32rbf_h_accum_set (current_cpu, val);
	  else
	    m32rxf_h_accum_set (current_cpu, val);
d115 1
a115 5
	  DI val;
	  if (mach == MACH_M32R)
	    val = m32rbf_h_accum_get (current_cpu);
	  else
	    val = m32rxf_h_accum_get (current_cpu);
d117 1
a117 4
	  if (mach == MACH_M32R)
	    m32rbf_h_accum_set (current_cpu, val);
	  else
	    m32rxf_h_accum_set (current_cpu, val);
a124 78
}

/* Cover fns for mach independent register accesses.  */

SI
a_m32r_h_gr_get (SIM_CPU *current_cpu, UINT regno)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      return m32rbf_h_gr_get (current_cpu, regno);
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      return m32rxf_h_gr_get (current_cpu, regno);
#endif
    default :
      abort ();
    }
}

void
a_m32r_h_gr_set (SIM_CPU *current_cpu, UINT regno, SI newval)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      m32rbf_h_gr_set (current_cpu, regno, newval);
      break;
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      m32rxf_h_gr_set (current_cpu, regno, newval);
      break;
#endif
    default :
      abort ();
    }
}

USI
a_m32r_h_cr_get (SIM_CPU *current_cpu, UINT regno)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      return m32rbf_h_cr_get (current_cpu, regno);
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      return m32rxf_h_cr_get (current_cpu, regno);
#endif
    default :
      abort ();
    }
}

void
a_m32r_h_cr_set (SIM_CPU *current_cpu, UINT regno, USI newval)
{
  switch (MACH_NUM (CPU_MACH (current_cpu)))
    {
#ifdef HAVE_CPU_M32RBF
    case MACH_M32R : 
      m32rbf_h_cr_set (current_cpu, regno, newval);
      break;
#endif
#ifdef HAVE_CPU_M32RXF
    case MACH_M32RX : 
      m32rxf_h_cr_set (current_cpu, regno, newval);
      break;
#endif
    default :
      abort ();
    }
@


1.1.1.2.26.1
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d2 1
a2 1
   Copyright (C) 1996, 1997, 1998, 2003 Free Software Foundation, Inc.
d5 1
a5 1
   This file is part of GDB, the GNU debugger.
d7 13
a19 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a41 1
      case EVB_REGNUM : return H_CR_CR5;
d51 2
d54 1
a54 1
    SETTWI (buf, m32rbf_h_gr_get (current_cpu, rn));
d65 1
a65 1
	SETTWI (buf, m32rbf_h_cr_get (current_cpu,
d69 4
a72 1
	SETTWI (buf, m32rbf_h_pc_get (current_cpu));
d75 4
a78 1
	SETTWI (buf, GETLODI (m32rbf_h_accum_get (current_cpu)));
d81 4
a84 1
	SETTWI (buf, GETHIDI (m32rbf_h_accum_get (current_cpu)));
d98 2
d101 1
a101 1
    m32rbf_h_gr_set (current_cpu, rn, GETTWI (buf));
d112 1
a112 1
	m32rbf_h_cr_set (current_cpu,
d117 4
a120 1
	m32rbf_h_pc_set (current_cpu, GETTWI (buf));
d124 5
a128 1
	  DI val = m32rbf_h_accum_get (current_cpu);
d130 4
a133 1
	  m32rbf_h_accum_set (current_cpu, val);
d138 5
a142 1
	  DI val = m32rbf_h_accum_get (current_cpu);
d144 4
a147 1
	  m32rbf_h_accum_set (current_cpu, val);
d155 78
@


1.1.1.2.28.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright (C) 1996, 1997, 1998, 2003 Free Software Foundation, Inc.
d5 1
a5 1
   This file is part of GDB, the GNU debugger.
d7 13
a19 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a41 1
      case EVB_REGNUM : return H_CR_CR5;
d51 2
d54 1
a54 1
    SETTWI (buf, m32rbf_h_gr_get (current_cpu, rn));
d65 1
a65 1
	SETTWI (buf, m32rbf_h_cr_get (current_cpu,
d69 4
a72 1
	SETTWI (buf, m32rbf_h_pc_get (current_cpu));
d75 4
a78 1
	SETTWI (buf, GETLODI (m32rbf_h_accum_get (current_cpu)));
d81 4
a84 1
	SETTWI (buf, GETHIDI (m32rbf_h_accum_get (current_cpu)));
d98 2
d101 1
a101 1
    m32rbf_h_gr_set (current_cpu, rn, GETTWI (buf));
d112 1
a112 1
	m32rbf_h_cr_set (current_cpu,
d117 4
a120 1
	m32rbf_h_pc_set (current_cpu, GETTWI (buf));
d124 5
a128 1
	  DI val = m32rbf_h_accum_get (current_cpu);
d130 4
a133 1
	  m32rbf_h_accum_set (current_cpu, val);
d138 5
a142 1
	  DI val = m32rbf_h_accum_get (current_cpu);
d144 4
a147 1
	  m32rbf_h_accum_set (current_cpu, val);
d155 78
@


