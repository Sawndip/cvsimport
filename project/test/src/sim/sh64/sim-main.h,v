head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.38
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.36
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.34
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.32
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.30
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.28
	gdb_7_1-2010-02-18-branchpoint:1.1
	gdb_7_0_1-2009-12-22-release:1.1
	gdb_7_0-2009-10-06-release:1.1
	gdb_7_0-branch:1.1.0.26
	gdb_7_0-2009-09-16-branchpoint:1.1
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.1.0.24
	msnyder-checkpoint-072509-branchpoint:1.1
	arc-insight_6_8-branch:1.1.0.22
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.20
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.18
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.16
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.14
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.12
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.10
	msnyder-reverse-20080609-branchpoint:1.1
	drow-reverse-20070409-branch:1.1.0.8
	drow-reverse-20070409-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.6
	gdb_6_8-2008-02-26-branchpoint:1.1
	gdb_6_7_1-2007-10-29-release:1.1
	gdb_6_7-2007-10-10-release:1.1
	gdb_6_7-branch:1.1.0.4
	gdb_6_7-2007-09-07-branchpoint:1.1
	gdb-csl-arm-20051020-branch:1.1.0.2
	gdb-csl-arm-20051020-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.02.01.11.44.27;	author bje;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* Contribute Hitachi SH5 simulator.
@
text
@/* Main header for the Hitachi SH64 architecture.  */

#ifndef SIM_MAIN_H
#define SIM_MAIN_H

#define USING_SIM_BASE_H /* FIXME: quick hack */

struct _sim_cpu; /* FIXME: should be in sim-basics.h */
typedef struct _sim_cpu SIM_CPU;

/* sim-basics.h includes config.h but cgen-types.h must be included before
   sim-basics.h and cgen-types.h needs config.h.  */
#include "config.h"

#include "symcat.h"
#include "sim-basics.h"
#include "cgen-types.h"
#include "sh-desc.h"
#include "sh-opc.h"
#include "arch.h"

/* These must be defined before sim-base.h.  */
typedef UDI sim_cia;

#define CIA_GET(cpu)     CPU_PC_GET (cpu)
#define CIA_SET(cpu,val) CPU_PC_SET ((cpu), (val) | (sh64_h_ism_get (cpu)))

#include "sim-base.h"
#include "cgen-sim.h"
#include "sh64-sim.h"

/* The _sim_cpu struct.  */

struct _sim_cpu {
  /* sim/common cpu base.  */
  sim_cpu_base base;

  /* Static parts of cgen.  */
  CGEN_CPU cgen_cpu;

  /* CPU specific parts go here.
     Note that in files that don't need to access these pieces WANT_CPU_FOO
     won't be defined and thus these parts won't appear.  This is ok in the
     sense that things work.  It is a source of bugs though.
     One has to of course be careful to not take the size of this
     struct and no structure members accessed in non-cpu specific files can
     go after here.  Oh for a better language.  */
#if defined (WANT_CPU_SH64)
  SH64_CPU_DATA cpu_data;
#endif
};

/* The sim_state struct.  */

struct sim_state {
  sim_cpu *cpu;
#define STATE_CPU(sd, n) (/*&*/ (sd)->cpu)

  CGEN_STATE cgen_state;

  sim_state_base base;
};

/* Misc.  */

/* Catch address exceptions.  */
extern SIM_CORE_SIGNAL_FN sh64_core_signal;
#define SIM_CORE_SIGNAL(SD,CPU,CIA,MAP,NR_BYTES,ADDR,TRANSFER,ERROR) \
sh64_core_signal ((SD), (CPU), (CIA), (MAP), (NR_BYTES), (ADDR), \
		  (TRANSFER), (ERROR))

/* Default memory size.  */
#define SH64_DEFAULT_MEM_SIZE 0x800000 /* 8M */

#endif /* SIM_MAIN_H */
@
