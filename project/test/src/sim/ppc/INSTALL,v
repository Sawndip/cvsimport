head	1.1;
branch	1.1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1.1.1
	gdb_7_6-2013-04-26-release:1.1.1.1
	gdb_7_6-branch:1.1.1.1.0.154
	gdb_7_6-2013-03-12-branchpoint:1.1.1.1
	gdb_7_5_1-2012-11-29-release:1.1.1.1
	gdb_7_5-2012-08-17-release:1.1.1.1
	gdb_7_5-branch:1.1.1.1.0.152
	gdb_7_5-2012-07-18-branchpoint:1.1.1.1
	gdb_7_4_1-2012-04-26-release:1.1.1.1
	gdb_7_4-2012-01-24-release:1.1.1.1
	gdb_7_4-branch:1.1.1.1.0.150
	gdb_7_4-2011-12-13-branchpoint:1.1.1.1
	gdb_7_3_1-2011-09-04-release:1.1.1.1
	gdb_7_3-2011-07-26-release:1.1.1.1
	gdb_7_3-branch:1.1.1.1.0.148
	gdb_7_3-2011-04-01-branchpoint:1.1.1.1
	gdb_7_2-2010-09-02-release:1.1.1.1
	gdb_7_2-branch:1.1.1.1.0.146
	gdb_7_2-2010-07-07-branchpoint:1.1.1.1
	gdb_7_1-2010-03-18-release:1.1.1.1
	gdb_7_1-branch:1.1.1.1.0.144
	gdb_7_1-2010-02-18-branchpoint:1.1.1.1
	gdb_7_0_1-2009-12-22-release:1.1.1.1
	gdb_7_0-2009-10-06-release:1.1.1.1
	gdb_7_0-branch:1.1.1.1.0.142
	gdb_7_0-2009-09-16-branchpoint:1.1.1.1
	arc-sim-20090309:1.1.1.1
	msnyder-checkpoint-072509-branch:1.1.1.1.0.140
	msnyder-checkpoint-072509-branchpoint:1.1.1.1
	arc-insight_6_8-branch:1.1.1.1.0.138
	arc-insight_6_8-branchpoint:1.1.1.1
	insight_6_8-branch:1.1.1.1.0.136
	insight_6_8-branchpoint:1.1.1.1
	reverse-20081226-branch:1.1.1.1.0.134
	reverse-20081226-branchpoint:1.1.1.1
	multiprocess-20081120-branch:1.1.1.1.0.132
	multiprocess-20081120-branchpoint:1.1.1.1
	reverse-20080930-branch:1.1.1.1.0.130
	reverse-20080930-branchpoint:1.1.1.1
	reverse-20080717-branch:1.1.1.1.0.128
	reverse-20080717-branchpoint:1.1.1.1
	msnyder-reverse-20080609-branch:1.1.1.1.0.126
	msnyder-reverse-20080609-branchpoint:1.1.1.1
	drow-reverse-20070409-branch:1.1.1.1.0.124
	drow-reverse-20070409-branchpoint:1.1.1.1
	gdb_6_8-2008-03-27-release:1.1.1.1
	gdb_6_8-branch:1.1.1.1.0.122
	gdb_6_8-2008-02-26-branchpoint:1.1.1.1
	gdb_6_7_1-2007-10-29-release:1.1.1.1
	gdb_6_7-2007-10-10-release:1.1.1.1
	gdb_6_7-branch:1.1.1.1.0.120
	gdb_6_7-2007-09-07-branchpoint:1.1.1.1
	insight_6_6-20070208-release:1.1.1.1
	gdb_6_6-2006-12-18-release:1.1.1.1
	gdb_6_6-branch:1.1.1.1.0.118
	gdb_6_6-2006-11-15-branchpoint:1.1.1.1
	insight_6_5-20061003-release:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-12:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-25:1.1.1.1
	nickrob-async-20060828-mergepoint:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-11:1.1.1.1
	gdb-csl-sourcerygxx-4_1-17:1.1.1.1
	gdb-csl-20060226-branch-local-2:1.1.1.1
	gdb-csl-sourcerygxx-4_1-14:1.1.1.1
	gdb-csl-sourcerygxx-4_1-13:1.1.1.1
	gdb-csl-sourcerygxx-4_1-12:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1.1.1
	gdb_6_5-20060621-release:1.1.1.1
	gdb-csl-sourcerygxx-4_1-9:1.1.1.1
	gdb-csl-sourcerygxx-4_1-8:1.1.1.1
	gdb-csl-sourcerygxx-4_1-7:1.1.1.1
	gdb-csl-arm-2006q1-6:1.1.1.1
	gdb-csl-sourcerygxx-4_1-6:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1.1.1
	gdb-csl-coldfire-4_1-11:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1.1.1
	gdb-csl-coldfire-4_1-10:1.1.1.1
	gdb_6_5-branch:1.1.1.1.0.116
	gdb_6_5-2006-05-14-branchpoint:1.1.1.1
	gdb-csl-sourcerygxx-4_1-5:1.1.1.1
	nickrob-async-20060513-branch:1.1.1.1.0.114
	nickrob-async-20060513-branchpoint:1.1.1.1
	gdb-csl-sourcerygxx-4_1-4:1.1.1.1
	msnyder-reverse-20060502-branch:1.1.1.1.0.112
	msnyder-reverse-20060502-branchpoint:1.1.1.1
	gdb-csl-morpho-4_1-4:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1.1.1
	readline_5_1-import-branch:1.1.1.1.0.110
	readline_5_1-import-branchpoint:1.1.1.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1.1.1
	gdb-csl-symbian-20060226-branch:1.1.1.1.0.108
	gdb-csl-symbian-20060226-branchpoint:1.1.1.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1.1.1
	msnyder-reverse-20060331-branch:1.1.1.1.0.106
	msnyder-reverse-20060331-branchpoint:1.1.1.1
	gdb-csl-available-20060303-branch:1.1.1.1.0.104
	gdb-csl-available-20060303-branchpoint:1.1.1.1
	gdb-csl-20060226-branch:1.1.1.1.0.102
	gdb-csl-20060226-branchpoint:1.1.1.1
	gdb_6_4-20051202-release:1.1.1.1
	msnyder-fork-checkpoint-branch:1.1.1.1.0.100
	msnyder-fork-checkpoint-branchpoint:1.1.1.1
	gdb-csl-gxxpro-6_3-branch:1.1.1.1.0.98
	gdb-csl-gxxpro-6_3-branchpoint:1.1.1.1
	gdb_6_4-branch:1.1.1.1.0.96
	gdb_6_4-2005-11-01-branchpoint:1.1.1.1
	gdb-csl-arm-20051020-branch:1.1.1.1.0.94
	gdb-csl-arm-20051020-branchpoint:1.1.1.1
	msnyder-tracepoint-checkpoint-branch:1.1.1.1.0.92
	msnyder-tracepoint-checkpoint-branchpoint:1.1.1.1
	gdb-csl-arm-20050325-2005-q1b:1.1.1.1
	gdb-csl-arm-20050325-2005-q1a:1.1.1.1
	csl-arm-20050325-branch:1.1.1.1.0.90
	csl-arm-20050325-branchpoint:1.1.1.1
	gdb_6_3-20041109-release:1.1.1.1
	gdb_6_3-branch:1.1.1.1.0.86
	gdb_6_3-20041019-branchpoint:1.1.1.1
	drow_intercu-merge-20040921:1.1.1.1
	drow_intercu-merge-20040915:1.1.1.1
	jimb-gdb_6_2-e500-branch:1.1.1.1.0.88
	jimb-gdb_6_2-e500-branchpoint:1.1.1.1
	gdb_6_2-20040730-release:1.1.1.1
	gdb_6_2-branch:1.1.1.1.0.84
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1.1.1
	gdb_6_1_1-20040616-release:1.1.1.1
	gdb_6_1-2004-04-05-release:1.1.1.1
	drow_intercu-merge-20040402:1.1.1.1
	drow_intercu-merge-20040327:1.1.1.1
	ezannoni_pie-20040323-branch:1.1.1.1.0.82
	ezannoni_pie-20040323-branchpoint:1.1.1.1
	cagney_tramp-20040321-mergepoint:1.1.1.1
	cagney_tramp-20040309-branch:1.1.1.1.0.80
	cagney_tramp-20040309-branchpoint:1.1.1.1
	gdb_6_1-branch:1.1.1.1.0.78
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1.1.1
	drow_intercu-20040221-branch:1.1.1.1.0.76
	drow_intercu-20040221-branchpoint:1.1.1.1
	cagney_bfdfile-20040213-branch:1.1.1.1.0.74
	cagney_bfdfile-20040213-branchpoint:1.1.1.1
	drow-cplus-merge-20040208:1.1.1.1
	carlton_dictionary-20040126-merge:1.1.1.1
	cagney_bigcore-20040122-branch:1.1.1.1.0.72
	cagney_bigcore-20040122-branchpoint:1.1.1.1
	drow-cplus-merge-20040113:1.1.1.1
	drow-cplus-merge-20031224:1.1.1.1
	drow-cplus-merge-20031220:1.1.1.1
	carlton_dictionary-20031215-merge:1.1.1.1
	drow-cplus-merge-20031214:1.1.1.1
	carlton-dictionary-20031111-merge:1.1.1.1
	gdb_6_0-2003-10-04-release:1.1.1.1
	kettenis_sparc-20030918-branch:1.1.1.1.0.70
	kettenis_sparc-20030918-branchpoint:1.1.1.1
	carlton_dictionary-20030917-merge:1.1.1.1
	ezannoni_pie-20030916-branchpoint:1.1.1.1
	ezannoni_pie-20030916-branch:1.1.1.1.0.68
	cagney_x86i386-20030821-branch:1.1.1.1.0.66
	cagney_x86i386-20030821-branchpoint:1.1.1.1
	carlton_dictionary-20030805-merge:1.1.1.1
	carlton_dictionary-20030627-merge:1.1.1.1
	gdb_6_0-branch:1.1.1.1.0.64
	gdb_6_0-2003-06-23-branchpoint:1.1.1.1
	jimb-ppc64-linux-20030613-branch:1.1.1.1.0.62
	jimb-ppc64-linux-20030613-branchpoint:1.1.1.1
	cagney_convert-20030606-branch:1.1.1.1.0.60
	cagney_convert-20030606-branchpoint:1.1.1.1
	cagney_writestrings-20030508-branch:1.1.1.1.0.58
	cagney_writestrings-20030508-branchpoint:1.1.1.1
	jimb-ppc64-linux-20030528-branch:1.1.1.1.0.56
	jimb-ppc64-linux-20030528-branchpoint:1.1.1.1
	carlton_dictionary-20030523-merge:1.1.1.1
	cagney_fileio-20030521-branch:1.1.1.1.0.54
	cagney_fileio-20030521-branchpoint:1.1.1.1
	kettenis_i386newframe-20030517-mergepoint:1.1.1.1
	jimb-ppc64-linux-20030509-branch:1.1.1.1.0.52
	jimb-ppc64-linux-20030509-branchpoint:1.1.1.1
	kettenis_i386newframe-20030504-mergepoint:1.1.1.1
	carlton_dictionary-20030430-merge:1.1.1.1
	kettenis_i386newframe-20030419-branch:1.1.1.1.0.50
	kettenis_i386newframe-20030419-branchpoint:1.1.1.1
	carlton_dictionary-20030416-merge:1.1.1.1
	cagney_frameaddr-20030409-mergepoint:1.1.1.1
	kettenis_i386newframe-20030406-branch:1.1.1.1.0.48
	kettenis_i386newframe-20030406-branchpoint:1.1.1.1
	cagney_frameaddr-20030403-branchpoint:1.1.1.1
	cagney_frameaddr-20030403-branch:1.1.1.1.0.46
	cagney_framebase-20030330-mergepoint:1.1.1.1
	cagney_framebase-20030326-branch:1.1.1.1.0.44
	cagney_framebase-20030326-branchpoint:1.1.1.1
	cagney_lazyid-20030317-branch:1.1.1.1.0.42
	cagney_lazyid-20030317-branchpoint:1.1.1.1
	kettenis-i386newframe-20030316-mergepoint:1.1.1.1
	offbyone-20030313-branch:1.1.1.1.0.40
	offbyone-20030313-branchpoint:1.1.1.1
	kettenis-i386newframe-20030308-branch:1.1.1.1.0.38
	kettenis-i386newframe-20030308-branchpoint:1.1.1.1
	carlton_dictionary-20030305-merge:1.1.1.1
	cagney_offbyone-20030303-branch:1.1.1.1.0.36
	cagney_offbyone-20030303-branchpoint:1.1.1.1
	carlton_dictionary-20030207-merge:1.1.1.1
	interps-20030202-branch:1.1.1.1.0.34
	interps-20030202-branchpoint:1.1.1.1
	cagney-unwind-20030108-branch:1.1.1.1.0.32
	cagney-unwind-20030108-branchpoint:1.1.1.1
	carlton_dictionary-20021223-merge:1.1.1.1
	gdb_5_3-2002-12-12-release:1.1.1.1
	carlton_dictionary-20021115-merge:1.1.1.1
	kseitz_interps-20021105-merge:1.1.1.1
	kseitz_interps-20021103-merge:1.1.1.1
	drow-cplus-merge-20021020:1.1.1.1
	drow-cplus-merge-20021025:1.1.1.1
	carlton_dictionary-20021025-merge:1.1.1.1
	carlton_dictionary-20021011-merge:1.1.1.1
	drow-cplus-branch:1.1.1.1.0.30
	drow-cplus-branchpoint:1.1.1.1
	kseitz_interps-20020930-merge:1.1.1.1
	carlton_dictionary-20020927-merge:1.1.1.1
	carlton_dictionary-branch:1.1.1.1.0.28
	carlton_dictionary-20020920-branchpoint:1.1.1.1
	gdb_5_3-branch:1.1.1.1.0.26
	gdb_5_3-2002-09-04-branchpoint:1.1.1.1
	kseitz_interps-20020829-merge:1.1.1.1
	cagney_sysregs-20020825-branch:1.1.1.1.0.24
	cagney_sysregs-20020825-branchpoint:1.1.1.1
	readline_4_3-import-branch:1.1.1.1.0.22
	readline_4_3-import-branchpoint:1.1.1.1
	gdb_5_2_1-2002-07-23-release:1.1.1.1
	kseitz_interps-20020528-branch:1.1.1.1.0.20
	kseitz_interps-20020528-branchpoint:1.1.1.1
	cagney_regbuf-20020515-branch:1.1.1.1.0.18
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	jimb-macro-020506-branch:1.1.1.1.0.16
	jimb-macro-020506-branchpoint:1.1.1.1
	gdb_5_2-2002-04-29-release:1.1.1.1
	gdb_5_2-branch:1.1.1.1.0.14
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	gdb_5_1_0_1-2002-01-03-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.10
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.8
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	99.04.16.01.35.08;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.08;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
		PSIM - model the PowerPC environment

    Copyright (C) 1994-1996, Andrew Cagney <cagney@@highland.com.au>.

    ----------------------------------------------------------------------


			Building PSIM

	This file describes how to build the program PSIM

	o	Walk through a basic build

	o	Discussion of PSIM's components and
		how they relate to the build process

	o	Detailed description of each of PSIM's
		compile time configuration options


    ----------------------------------------------------------------------


BUILDING PSIM:

PSIM 1.0.2 is included in GDB-4.16.  To build PSIM you will need the
following:

	gdb-4.16.tar.gz		Available from your favorite GNU
				ftp site

	gcc			GCC version two includes suport
				for long long (64bit integer)
				arrithemetic which PSIM uses.  Hence
				it is recommended that you build PSIM
				using GCC.
				
Method:

	1.	Unpack gdb

		$ cd .../scratch
		$ gunzip < gdb-4.16.tar.gz | tar xf -


	2.	Configure gdb

		First consult the gdb documentation

		$ cd .../scratch
		$ cd gdb-4.16
		$ more README
		$ more gdb/README

		then something like (I assume SH):

		$ CC=gcc ./configure \
                        --enable-sim-powerpc \
                        --target=powerpc-unknown-eabi \
                        --prefix=/applications/psim


	4.	Build (again specifying GCC)

		$ make CC=gcc

		alternatively, if you are short on disk space or only
		want to build the simulator:

		$ ( cd libiberty && make CC=gcc )
		$ ( cd bfd && make CC=gcc )
		$ ( cd sim/ppc && make CC=gcc )


	5.	Install

		$ make CC=gcc install

		or just

		$ cp gdb/gdb ~/bin/powerpc-unknown-eabisim-gdb
		$ cp sim/ppc/run ~/bin/powerpc-unknown-eabisim-run


    ----------------------------------------------------------------------


UPDATING PSIM:


A PSIM is an ongoing development.  Occasional snapshots which both contain new
features and fix old bugs are made available.  See the ftp directory:

	ftp://ftp.ci.com.au/pub/psim/beta
or	ftp://cambridge.cygnus.com/pub/psim/beta

for the latest version.  To build/install one of these snapshots, you
replace the sim/ppc found in the gdb archive with with one from the
snapshot.  Then just re-configure and rebuild/install.

	Procedure:

	0.	A starting point

		$ cd gdb-4.16


	1.	Remove the old psim directory

		$ mv sim/ppc sim/old.ppc


	2.	Unpack the new one

		$ gunzip < ../psim-NNNNNN.tar.gz | tar tf -
		$ gunzip < ../psim-NNNNNN.tar.gz | tar tf -


	3.	Reconfigure/rebuild (as seen above):

		$ CC=gcc ./configure \
			--enable-sim-powerpc \
                        --target=powerpc-unknown-eabi \
                        --prefix=/applications/psim
		$ make CC=gcc


    ----------------------------------------------------------------------


UPDATES TO GDB:

From time to time, problems involving the integration of PSIM into gdb
are found.  While eventually each of these problems is resolved there
can be periouds during which a local hack may be needed.

At the time of writing the following were outstanding:

	ATTACH command:

		ftp://ftp.ci.com.au/pub/psim/gdb-4.15+attach.diff.gz
	or	ftp://cambridge.cygnus.com/pub/psim/gdb-4.15+attach.diff.gz
	
	PSIM, unlike the other simulators found in GDB, is able to load
	the description of a target machine (including the initial
	state of all processor registers) from a file.

	Unfortunatly GDB does not yet have a standard command that
	facilitates the use of this feature.  Until such a command is
	added, the patch (hack?) gdb-4.15+attach.diff.gz can be used to
	extend GDB's attach command so that it can be used to initialize
	the simulators configuration from a file.



    ----------------------------------------------------------------------


RUNNING PROGRAMS:


See the file:

	ftp://ftp.ci.com.au/pub/psim/RUN
or	ftp://cambridge.cygnus.com/pub/psim/RUN


    ----------------------------------------------------------------------


COMPILE TIME CONFIGURATION OPTIONS:


PSIM's compile time configuration is controlled by autoconf.  PSIM's
configure script recognises options of the form:

		--enable-sim-<option>[=<val>]

And can be specified on the configure command line (at the top level
of the gdb directory tree) vis:

		$ cd gdb-4.15
		$ CC=gcc ./configure \
                        --target=powerpc-unknown-eabisim \
                        --prefix=/applications/psim \
			--enable-sim-inline
		$ make CC=gcc

For a brief list of PSIM's configuration options, configure --help
will list them vis:

	$ cd sim/ppc
	$ ./configure --help

Each PSIM specific option is discussed in detail below.



--enable-sim-cflags=<opts>


Specify additional C compiler flags that are to be used when compiling
just PSIM.

PSIM places heavy demands on both the host machine and its C compiler.  So that
the builder has better control over the compiler the above option can be used
to pass additional options to the compiler while PSIM is being built.

Ex: No debug information

PSIM can be built with everything inline.  Unfortunately, because of
all the debugging information generated the C compiler can grow very
very large as a result.  For GCC, the debug information can be
restricted with the `-g0' option.  To specify that this option should
be include in the CFLAGS when compiling the psim source code use:

	--enable-sim-cflags=-g0

Ex: Additional optimization flags

A significant gain in performance can be achieved by tuning the
optimization flags passed to the C compiler.  For instance on an x86
you may consider:

	--enable-sim-cflags='-g0 -O2 -fno-strength-reduce -f...'



--enable-sim-warnings=<flags>


Turn on additional GCC specific checks.

Some hosts (NetBSD, Linux, Solaris-2.5) have complete header files
that include correct prototypes for all library functions.  On such
hosts, PSIM can be built with many more than the standard C checks
enabled.  The option --enable-sim-warnings controls this.

Ex: Default warnings

With just --enable-sim-warnings, the following -W options are enabled:
-Werror -Wall -Wpointer-arith -Wmissing-prototypes.



--enable-sim-opcode=which


Specify the file containing the rules for generating the instruction
decode and execute functions from the file ppc-instructions.

The form of the instruction decode and execute functions is controlled
by an opcode table.  It specifies: the combination of switch
statements and jump tables to use when decoding an instruction and how
much of each instruction should be decoded before calling the
instruction execute function.

PSIM includes a number of opcode tables:

	psim-opcode-simple
		Generates a small compact two level switch statement
		that will compile quickly and run reasonably fast.

		This may be useful on a small machine.

	psim-opcode-complex
		(the default) A fairly aggressive instruction decode
		table that includes the breaking out of a number
		of special instruction cases (eg RA==0 vs RA!=0).

	psim-opcode-flat
		Identical to complex except a switch statement
		is used.  Ideal for when the icache is being
		disabled.

	psim-opcode-stupid
		In addition to the instruction decodes performed
		by psim-opcode-complex, this also full decodes mtspr,
		mfspr, and branch instructions.  The table generated
		is very large and, as a consequence, only performs
		well on machines with large caches.

	ppc-opcode-test-1
	ppc-opcode-test-2
		Generate test (but workable) tables.  These exercise
		PSIM's ability to generate instruction decode functions
		that are a combination of jump-tables and switch statements.

The program igen generates the instruction tables from the opcode
table and the ppc-instruction table.



--enable-sim-switch


Enable/disable the use of a switch statement when looking up the
attributes of a SPR register.

The PowerPC architecture defines a number of Special Purpose Registers
(SPR's).  Associated with each of these registers are a number of
attributes (such as validity or size) which the instructions
mtspr/mfspr query as part of their execution.

For PSIM, this information is kept in a table (ppc-spr-table).  The
program dgen converts this table into lookup routines (contained in
the generated files spreg.h spreg.c) that can be used to query an
SPR's attributes.  Those lookup routines are either implemented as
a table or alternatively as a number of switch statements:

	spr_table spr_info[] = { .... };
	int spr_length(sprs spr) { return spr_info[spr].length; }

vs

	int spr_length(sprs spr) { switch (spr) { case ..: return ..; } }

In general the first implementation (a table) is the most efficient.
It may, however, prove that when performing an aggressive optimization
where both the SPR is known and the above function is being inlined
(with the consequence that GCC can eliminate the switch statement)
that the second choice is improves performance.

In practice, only a marginal (if any benefit) has ever been seen.



--enable-sim-duplicate


Create a duplicate copy of each instruction function hardwiring
instruction fields that would have otherwise have been variable.

As discussed above, igen outputs a C function generated from the file
ppc-instructions (using the opcode rules) for each of the
instructions.  Thus multiple entries in the instruction decode tables
may be pointing back at the same function.  Enabling duplicate, will
result in psim creating a duplicate of the instruction's function for
each different entry in the instruction decode tables.

For instance, given the branch instruction:

	0.19,6.BO,11.BI,16./,21.528,31.LK
	...
	if (LK) LR = (spreg)IEA(CIA + 4);
	...

igen as part of its instruction lookup table may have generated two
different entries - one for LK=0 and one for LK=1.  With duplicate
enabled, igen outputs (almost) duplicate copies of branch function,
one with LK hardwired to 0 and one with LK hardwired to 1.

By doing this the compiler is provided with additional information that
will allow it possibly eliminate dead code.  (such as the assignment
to LK if LR==0).

Ex: default

Because this feature is such a big win, --enable-sim-duplicate is
turned on by default.

Ex: A small machine

Only rarely (eg on a very small host) would this feature need to be
disabled (using: --disable-sim-duplicate).



--enable-sim-filter=rule


Include/exclude PowerPC instructions that are specific to a particular
implementation.

Some of the PowerPC instructions included in the file ppc-instructions
are limited to certain specific PPC implementations.  For instance,
the instruction:

	0.58,6.RT,11.RA,16.DS,30.2:DS:64::Load Word Algebraic

Is only valid for the 64bit architecture.  The enable-sim-filter flag
is passed to igen so that it can `filter out' any invalid
instructions.  The filter rule has the form:

	-f <name>

thus:

	--enable-sim-filter='-f 64'

(the default) would filter out all 64bit instructions.

Ex: Remove floating point instructions

A given 32bit PowerPC implementation may not include floating point
hardware.  Consequently there is little point in including floating
point instructions in the instruction table.  The option:

	--enable-sim-filter='-f 64 -f f'

will eliminate all floating point instructions from the instruction
table.



--enable-sim-icache=size


Set the size of the cache used to hold decoded instructions.

Psim executes instructions in two separate steps:

	o	instruction fetch/decode

	o	instruction execution

For a given instruction, the first stage need only be executed once
(the first time the instruction is encountered) while the second stage
must be executed every time the program `executes' that instruction.

Exploiting this, PSIM can maintain a cache of decoded instructions.
It will then use the decoded instruction from the cache in preference
to fetching/decoding the real instruction from memory.

Ex: default

Because this feature is normally such a big win, it is enabled by
default (with the cache size set to 1024 entries).

The 1024 entries equals 4096 bytes (or one page) of instructions.
Larger caches can be used but with caution - PSIM does not check for
address aliasing within its instruction cache.

Ex: disable the cache

There may be cases (for instance where the cache has a low hit rate)
where the psim performs better with no instruction cache.  For such
situations, the cache can be disabled vis: --disable-sim-icache.



--enable-sim-inline[=module]


Specify the inlining of one or more modules.

Many architectures (in particular the x86) suffer from a large
function call overhead.  By eliminating function calls (through
inlining of functions) a large performance gain can be achieved.

In PSIM, modules are inlined in one of two possible ways.  Some
modules (such as the byte swapping code) can be inlined into any
module that calls them.  Other modules, due to complex
interdependencies, are only inlined as a group when compiling the
external interface module psim.c.

Ex: default

By default the modules endian (handle be/le), bits (manipulate
bit-fields within words), cpu (the processor object) and events
(timers) are inlined in any module that calls them.  This gives a
reasonable performance gain with little additional compilation
overhead.

Ex: recommended  --enable-sim-inline

Assuming you machine is reasonably well configured, this option is
highly recommended.  On the x86 several orders of magnitude
improvement in performance is possible.

Ex: fine tuning

The file std-config.h contains a detailed description of how the
inlining works.  Individual modules can be inlined by specifying them.
For if you have a very large cache the model module could be inlined
with:

	--enable-sim-inline=MODEL



--enable-sim-bswap


(x86 specific) Use the i486/P5/P6 byte swap instruction.

PSIM contains generic byte swapping code.  For the x86 (P[4-6]) PSIM
can be built so that it uses the bswap instruction instead of relying
on the compiler to generate byte swap code.

Ex: default

By default, when compiling with GCC-2 on an i486/P5/P6 the bswap
instruction is used.



--enable-sim-endian=endian


Specify the byte order of the target.

By default, PSIM is able to execute both big and little endian
executables.  As a consequence, every byte swap routine includes a
test to see if the byte swap is really needed.  By specifying the byte
order of the target (and the host below) the need for this test can be
eliminated.

Clearly setting the byte order of the target is only useful when known
before hand.



--enable-sim-hostendain=end


As above but for the host.

Normally this option should not be needed. configure (autoconf) should
determine the byte order of the host automatically.  However if for
some reason there is a problem, this option can be used to override
autoconf.



--enable-sim-smp=n


Set the maximum number of processors that PSIM can model.

Psim can model (with small limitation discussed else where) a
multi-processor PowerPC environment.  While the overhead of
co-ordinating the execution of a number of processors is relatively
small it is still significant when compared to handling only one
processor.

This option only sets the maximum number of processors that can be
simulated.  The number active during a given simulation run us
determined at run time.

Ex: default

By default 5 processors are configured but only one is enabled.
Additional processors can be enabled with the runtime option:

	-o '/openprom/options/smp 5'

Ex: recommended

Unless you intend studying multi-processor systems there is little reason for
having PSIM configured with SMP support.  Specifying:

	--disable-sim-smp
or	--enable-sim-smp=0

will eliminate any SMP such as:

	for (cpu = 0; cpu < nr_cpus; cpu++)
		...



--enable-sim-xor-endian=n


Set the byte-size of the bus involved in the PowerPC's xor endian byte
swapping.

The PowerPC's implementation of BE/LE mode is different to what a
programmer may first expect.  The details of this implementation are
discussed at length in PowerPC documentation.

Ex: default

By default this is configured with a value of 8 (the bus size of most
60x processors).

Ex: recommended

Unless you are expecting to test/debug PowerPC be/le switching code
this option is of little use and should be disabled:

	--disable-sim-xor-endian



--enable-sim-bitsize=n


Specify the bit size (32/64) of the PowerPC to be modelled.

Note: By default 32 is specified.  The implementation of the 64bit
architecture is still under development.


--enable-sim-hostbitsize=32|64

As above but for the host.

NOTE: Psim has yet to be built on a 64bit host.



--enable-sim-env=env


Hardwire the PowerPC environment being modelled (user, virtual or
operating).

The PowerPC architecture defines three different levels of compliance to its
architectural specification.  These environments are discussed in detail in
PowerPC publications.

	user - normal user programs 
	virtual - an extension of the user environment (includes timers)
	operating - kernel code

Ex: default

By default all three environments are supported.

Ex: recommended

If you only intend running psim with user (or operating) code then
PSIM should be configured accordingly.  For user code, it eliminates:
support for timers and events and redundant VM calls.



--enable-sim-timebase


Enable/disable the time base register.

The PowerPC architecture (virtual environment) includes a time base
register.  Maintaining that register incurs an overhead in
performance that can be eliminated by eliminating time-base register
support.

Ex: default

Normally this option is not used.  Instead --enable-sim-env (above) us
used to disable/enable features such as the timebase register.



--enable-sim-alignment=align


Control the PowerPC's memory access alignment restrictions.

The PowerPC in LE mode only allows memory transfers of a correctly
aligned size/address.  The above option controls how misaligned
accesses are handled.

	strict		All accesses must be correctly aligned

	nonstrict	Unaligned access allowed (the are split
			into a number of aligned accesses).

Ex: default

Unless otherwise specified PSIM will auto configure a BE program to
allow miss-aligned accesses while a LE program will not.

Ex: 604e

The recently announced 604e processor allows miss-aligned accesses in both
BE and LE modes.  If modeling the 604e then you should specify:

	--enable-sim-alignment=nonstrict



--enable-sim-trace


Include code to trace PSIM's internal progress (also controlled by the
-t option).

Checking to see if a trace message should be output slows down a
simulation.  Disabling this option (--disable-sim-trace) eliminates
completely that code.



--enable-sim-assert


Include the code that checks the correctness of parts of PSIM.

Eliminating such code (--disable-sim-assert) eliminates internal
consistency tests and their overhead.



--enable-sim-reserved-bits


Include code to check that the reserved fields of the instruction are
zero.

The PowerPC architecture defines certain fields of some instructions
as reserved (`/').  By default, for each instruction, PSIM will check
the reserved fields causing an invalid instruction exception if a
field is invalid.  Disabling this option eliminates this test.  This
is at the slight risk of PSIM treating an invalid instruction as
valid.



--enable-sim-float


Include support for hardware floating point.



--enable-sim-monitor=mon


Include support for basic instruction counting.

If you are not interested in the performance of either you program or
the simulator then you can disable this option.



--enable-sim-model=which

Hardwire the processor that will be used as a reference when modeling
execution units.



--enable-sim-default-model=which


Specify the processor of choice for the execution unit model.



--enable-sim-model-issue


Include support for the modeling of processor execution units.

    ----------------------------------------------------------------------

TYPICAL CONFIGURATION OPTIONS:


	VEA CODE ONLY:

	Here of note are:

		o	ramp up the compiler options (some
			of the below are P5 specific).

		o	disable anything not used

        CC=gcc ./configure \
                --prefix=/applications/psim \
                --target=powerpc-unknown-eabi \
                --enable-sim-powerpc \
                --enable-sim-warnings \
                --enable-sim-inline \
                --disable-sim-smp \
                --enable-sim-duplicate \
                --enable-sim-endian=big \
                --disable-sim-xor-endian \
                --enable-sim-env=user \
                --disable-sim-reserved-bits \
                --disable-sim-assert \
                --disable-sim-trace \
                --enable-sim-cflags='-g0,-O2,-fno-strength-reduce,-fomit-frame-pointer'


	OEA CODE ONLY:

	The key configuration changes are:

		o	turn off the instruction cache.  The overhead
			of flushing and reloading it is greater than
			not having a cache.

		o	use a switch statement (ppc-opcode-flat) for
			the instruction decode and then (-O3) fully
			inline all functions.

		o	--enable-sim-warnings is not present.  GCC (2.7.2)
			gets confused by the instruction decode table
			generated by igen (contains a perfect switch)
			and, as a consequence, generates a bogus warning.

	CC=gcc ./configure \
                --prefix=/applications/psim \
                --target=powerpc-unknown-eabi \
                --enable-sim-powerpc \
                --enable-sim-inline \
                --disable-sim-smp \
                --enable-sim-duplicate \
                --enable-sim-endian=big \
                --disable-sim-xor-endian \
                --enable-sim-env=operating \
                --disable-sim-reserved-bits \
                --disable-sim-assert \
                --disable-sim-trace \
                --enable-sim-opcode=ppc-opcode-flat \
                --disable-sim-icache \
                --enable-sim-cflags='-g0,-O3,-fno-strength-reduce,-fomit-frame-pointer'
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

