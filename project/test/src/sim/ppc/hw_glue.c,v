head	1.3;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.3
	gdb_7_6-2013-04-26-release:1.3
	gdb_7_6-branch:1.3.0.2
	gdb_7_6-2013-03-12-branchpoint:1.3
	gdb_7_5_1-2012-11-29-release:1.1.1.1
	gdb_7_5-2012-08-17-release:1.1.1.1
	gdb_7_5-branch:1.1.1.1.0.152
	gdb_7_5-2012-07-18-branchpoint:1.1.1.1
	gdb_7_4_1-2012-04-26-release:1.1.1.1
	gdb_7_4-2012-01-24-release:1.1.1.1
	gdb_7_4-branch:1.1.1.1.0.150
	gdb_7_4-2011-12-13-branchpoint:1.1.1.1
	gdb_7_3_1-2011-09-04-release:1.1.1.1
	gdb_7_3-2011-07-26-release:1.1.1.1
	gdb_7_3-branch:1.1.1.1.0.148
	gdb_7_3-2011-04-01-branchpoint:1.1.1.1
	gdb_7_2-2010-09-02-release:1.1.1.1
	gdb_7_2-branch:1.1.1.1.0.146
	gdb_7_2-2010-07-07-branchpoint:1.1.1.1
	gdb_7_1-2010-03-18-release:1.1.1.1
	gdb_7_1-branch:1.1.1.1.0.144
	gdb_7_1-2010-02-18-branchpoint:1.1.1.1
	gdb_7_0_1-2009-12-22-release:1.1.1.1
	gdb_7_0-2009-10-06-release:1.1.1.1
	gdb_7_0-branch:1.1.1.1.0.142
	gdb_7_0-2009-09-16-branchpoint:1.1.1.1
	arc-sim-20090309:1.1.1.1
	msnyder-checkpoint-072509-branch:1.1.1.1.0.140
	msnyder-checkpoint-072509-branchpoint:1.1.1.1
	arc-insight_6_8-branch:1.1.1.1.0.138
	arc-insight_6_8-branchpoint:1.1.1.1
	insight_6_8-branch:1.1.1.1.0.136
	insight_6_8-branchpoint:1.1.1.1
	reverse-20081226-branch:1.1.1.1.0.134
	reverse-20081226-branchpoint:1.1.1.1
	multiprocess-20081120-branch:1.1.1.1.0.132
	multiprocess-20081120-branchpoint:1.1.1.1
	reverse-20080930-branch:1.1.1.1.0.130
	reverse-20080930-branchpoint:1.1.1.1
	reverse-20080717-branch:1.1.1.1.0.128
	reverse-20080717-branchpoint:1.1.1.1
	msnyder-reverse-20080609-branch:1.1.1.1.0.126
	msnyder-reverse-20080609-branchpoint:1.1.1.1
	drow-reverse-20070409-branch:1.1.1.1.0.124
	drow-reverse-20070409-branchpoint:1.1.1.1
	gdb_6_8-2008-03-27-release:1.1.1.1
	gdb_6_8-branch:1.1.1.1.0.122
	gdb_6_8-2008-02-26-branchpoint:1.1.1.1
	gdb_6_7_1-2007-10-29-release:1.1.1.1
	gdb_6_7-2007-10-10-release:1.1.1.1
	gdb_6_7-branch:1.1.1.1.0.120
	gdb_6_7-2007-09-07-branchpoint:1.1.1.1
	insight_6_6-20070208-release:1.1.1.1
	gdb_6_6-2006-12-18-release:1.1.1.1
	gdb_6_6-branch:1.1.1.1.0.118
	gdb_6_6-2006-11-15-branchpoint:1.1.1.1
	insight_6_5-20061003-release:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-12:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-25:1.1.1.1
	nickrob-async-20060828-mergepoint:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-11:1.1.1.1
	gdb-csl-sourcerygxx-4_1-17:1.1.1.1
	gdb-csl-20060226-branch-local-2:1.1.1.1
	gdb-csl-sourcerygxx-4_1-14:1.1.1.1
	gdb-csl-sourcerygxx-4_1-13:1.1.1.1
	gdb-csl-sourcerygxx-4_1-12:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-21:1.1.1.1
	gdb_6_5-20060621-release:1.1.1.1
	gdb-csl-sourcerygxx-4_1-9:1.1.1.1
	gdb-csl-sourcerygxx-4_1-8:1.1.1.1
	gdb-csl-sourcerygxx-4_1-7:1.1.1.1
	gdb-csl-arm-2006q1-6:1.1.1.1
	gdb-csl-sourcerygxx-4_1-6:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-9:1.1.1.1
	gdb-csl-symbian-6_4_50_20060226-8:1.1.1.1
	gdb-csl-coldfire-4_1-11:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-19:1.1.1.1
	gdb-csl-coldfire-4_1-10:1.1.1.1
	gdb_6_5-branch:1.1.1.1.0.116
	gdb_6_5-2006-05-14-branchpoint:1.1.1.1
	gdb-csl-sourcerygxx-4_1-5:1.1.1.1
	nickrob-async-20060513-branch:1.1.1.1.0.114
	nickrob-async-20060513-branchpoint:1.1.1.1
	gdb-csl-sourcerygxx-4_1-4:1.1.1.1
	msnyder-reverse-20060502-branch:1.1.1.1.0.112
	msnyder-reverse-20060502-branchpoint:1.1.1.1
	gdb-csl-morpho-4_1-4:1.1.1.1
	gdb-csl-sourcerygxx-3_4_4-17:1.1.1.1
	readline_5_1-import-branch:1.1.1.1.0.110
	readline_5_1-import-branchpoint:1.1.1.1
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.1.1.1
	gdb-csl-symbian-20060226-branch:1.1.1.1.0.108
	gdb-csl-symbian-20060226-branchpoint:1.1.1.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.1.1.1
	msnyder-reverse-20060331-branch:1.1.1.1.0.106
	msnyder-reverse-20060331-branchpoint:1.1.1.1
	gdb-csl-available-20060303-branch:1.1.1.1.0.104
	gdb-csl-available-20060303-branchpoint:1.1.1.1
	gdb-csl-20060226-branch:1.1.1.1.0.102
	gdb-csl-20060226-branchpoint:1.1.1.1
	gdb_6_4-20051202-release:1.1.1.1
	msnyder-fork-checkpoint-branch:1.1.1.1.0.100
	msnyder-fork-checkpoint-branchpoint:1.1.1.1
	gdb-csl-gxxpro-6_3-branch:1.1.1.1.0.98
	gdb-csl-gxxpro-6_3-branchpoint:1.1.1.1
	gdb_6_4-branch:1.1.1.1.0.96
	gdb_6_4-2005-11-01-branchpoint:1.1.1.1
	gdb-csl-arm-20051020-branch:1.1.1.1.0.94
	gdb-csl-arm-20051020-branchpoint:1.1.1.1
	msnyder-tracepoint-checkpoint-branch:1.1.1.1.0.92
	msnyder-tracepoint-checkpoint-branchpoint:1.1.1.1
	gdb-csl-arm-20050325-2005-q1b:1.1.1.1
	gdb-csl-arm-20050325-2005-q1a:1.1.1.1
	csl-arm-20050325-branch:1.1.1.1.0.90
	csl-arm-20050325-branchpoint:1.1.1.1
	gdb_6_3-20041109-release:1.1.1.1
	gdb_6_3-branch:1.1.1.1.0.86
	gdb_6_3-20041019-branchpoint:1.1.1.1
	drow_intercu-merge-20040921:1.1.1.1
	drow_intercu-merge-20040915:1.1.1.1
	jimb-gdb_6_2-e500-branch:1.1.1.1.0.88
	jimb-gdb_6_2-e500-branchpoint:1.1.1.1
	gdb_6_2-20040730-release:1.1.1.1
	gdb_6_2-branch:1.1.1.1.0.84
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1.1.1
	gdb_6_1_1-20040616-release:1.1.1.1
	gdb_6_1-2004-04-05-release:1.1.1.1
	drow_intercu-merge-20040402:1.1.1.1
	drow_intercu-merge-20040327:1.1.1.1
	ezannoni_pie-20040323-branch:1.1.1.1.0.82
	ezannoni_pie-20040323-branchpoint:1.1.1.1
	cagney_tramp-20040321-mergepoint:1.1.1.1
	cagney_tramp-20040309-branch:1.1.1.1.0.80
	cagney_tramp-20040309-branchpoint:1.1.1.1
	gdb_6_1-branch:1.1.1.1.0.78
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1.1.1
	drow_intercu-20040221-branch:1.1.1.1.0.76
	drow_intercu-20040221-branchpoint:1.1.1.1
	cagney_bfdfile-20040213-branch:1.1.1.1.0.74
	cagney_bfdfile-20040213-branchpoint:1.1.1.1
	drow-cplus-merge-20040208:1.1.1.1
	carlton_dictionary-20040126-merge:1.1.1.1
	cagney_bigcore-20040122-branch:1.1.1.1.0.72
	cagney_bigcore-20040122-branchpoint:1.1.1.1
	drow-cplus-merge-20040113:1.1.1.1
	drow-cplus-merge-20031224:1.1.1.1
	drow-cplus-merge-20031220:1.1.1.1
	carlton_dictionary-20031215-merge:1.1.1.1
	drow-cplus-merge-20031214:1.1.1.1
	carlton-dictionary-20031111-merge:1.1.1.1
	gdb_6_0-2003-10-04-release:1.1.1.1
	kettenis_sparc-20030918-branch:1.1.1.1.0.70
	kettenis_sparc-20030918-branchpoint:1.1.1.1
	carlton_dictionary-20030917-merge:1.1.1.1
	ezannoni_pie-20030916-branchpoint:1.1.1.1
	ezannoni_pie-20030916-branch:1.1.1.1.0.68
	cagney_x86i386-20030821-branch:1.1.1.1.0.66
	cagney_x86i386-20030821-branchpoint:1.1.1.1
	carlton_dictionary-20030805-merge:1.1.1.1
	carlton_dictionary-20030627-merge:1.1.1.1
	gdb_6_0-branch:1.1.1.1.0.64
	gdb_6_0-2003-06-23-branchpoint:1.1.1.1
	jimb-ppc64-linux-20030613-branch:1.1.1.1.0.62
	jimb-ppc64-linux-20030613-branchpoint:1.1.1.1
	cagney_convert-20030606-branch:1.1.1.1.0.60
	cagney_convert-20030606-branchpoint:1.1.1.1
	cagney_writestrings-20030508-branch:1.1.1.1.0.58
	cagney_writestrings-20030508-branchpoint:1.1.1.1
	jimb-ppc64-linux-20030528-branch:1.1.1.1.0.56
	jimb-ppc64-linux-20030528-branchpoint:1.1.1.1
	carlton_dictionary-20030523-merge:1.1.1.1
	cagney_fileio-20030521-branch:1.1.1.1.0.54
	cagney_fileio-20030521-branchpoint:1.1.1.1
	kettenis_i386newframe-20030517-mergepoint:1.1.1.1
	jimb-ppc64-linux-20030509-branch:1.1.1.1.0.52
	jimb-ppc64-linux-20030509-branchpoint:1.1.1.1
	kettenis_i386newframe-20030504-mergepoint:1.1.1.1
	carlton_dictionary-20030430-merge:1.1.1.1
	kettenis_i386newframe-20030419-branch:1.1.1.1.0.50
	kettenis_i386newframe-20030419-branchpoint:1.1.1.1
	carlton_dictionary-20030416-merge:1.1.1.1
	cagney_frameaddr-20030409-mergepoint:1.1.1.1
	kettenis_i386newframe-20030406-branch:1.1.1.1.0.48
	kettenis_i386newframe-20030406-branchpoint:1.1.1.1
	cagney_frameaddr-20030403-branchpoint:1.1.1.1
	cagney_frameaddr-20030403-branch:1.1.1.1.0.46
	cagney_framebase-20030330-mergepoint:1.1.1.1
	cagney_framebase-20030326-branch:1.1.1.1.0.44
	cagney_framebase-20030326-branchpoint:1.1.1.1
	cagney_lazyid-20030317-branch:1.1.1.1.0.42
	cagney_lazyid-20030317-branchpoint:1.1.1.1
	kettenis-i386newframe-20030316-mergepoint:1.1.1.1
	offbyone-20030313-branch:1.1.1.1.0.40
	offbyone-20030313-branchpoint:1.1.1.1
	kettenis-i386newframe-20030308-branch:1.1.1.1.0.38
	kettenis-i386newframe-20030308-branchpoint:1.1.1.1
	carlton_dictionary-20030305-merge:1.1.1.1
	cagney_offbyone-20030303-branch:1.1.1.1.0.36
	cagney_offbyone-20030303-branchpoint:1.1.1.1
	carlton_dictionary-20030207-merge:1.1.1.1
	interps-20030202-branch:1.1.1.1.0.34
	interps-20030202-branchpoint:1.1.1.1
	cagney-unwind-20030108-branch:1.1.1.1.0.32
	cagney-unwind-20030108-branchpoint:1.1.1.1
	carlton_dictionary-20021223-merge:1.1.1.1
	gdb_5_3-2002-12-12-release:1.1.1.1
	carlton_dictionary-20021115-merge:1.1.1.1
	kseitz_interps-20021105-merge:1.1.1.1
	kseitz_interps-20021103-merge:1.1.1.1
	drow-cplus-merge-20021020:1.1.1.1
	drow-cplus-merge-20021025:1.1.1.1
	carlton_dictionary-20021025-merge:1.1.1.1
	carlton_dictionary-20021011-merge:1.1.1.1
	drow-cplus-branch:1.1.1.1.0.30
	drow-cplus-branchpoint:1.1.1.1
	kseitz_interps-20020930-merge:1.1.1.1
	carlton_dictionary-20020927-merge:1.1.1.1
	carlton_dictionary-branch:1.1.1.1.0.28
	carlton_dictionary-20020920-branchpoint:1.1.1.1
	gdb_5_3-branch:1.1.1.1.0.26
	gdb_5_3-2002-09-04-branchpoint:1.1.1.1
	kseitz_interps-20020829-merge:1.1.1.1
	cagney_sysregs-20020825-branch:1.1.1.1.0.24
	cagney_sysregs-20020825-branchpoint:1.1.1.1
	readline_4_3-import-branch:1.1.1.1.0.22
	readline_4_3-import-branchpoint:1.1.1.1
	gdb_5_2_1-2002-07-23-release:1.1.1.1
	kseitz_interps-20020528-branch:1.1.1.1.0.20
	kseitz_interps-20020528-branchpoint:1.1.1.1
	cagney_regbuf-20020515-branch:1.1.1.1.0.18
	cagney_regbuf-20020515-branchpoint:1.1.1.1
	jimb-macro-020506-branch:1.1.1.1.0.16
	jimb-macro-020506-branchpoint:1.1.1.1
	gdb_5_2-2002-04-29-release:1.1.1.1
	gdb_5_2-branch:1.1.1.1.0.14
	gdb_5_2-2002-03-03-branchpoint:1.1.1.1
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	gdb_5_1_0_1-2002-01-03-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.10
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.8
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2012.12.19.07.18.21;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.19.07.12.02;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.35.09;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.35.09;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[sim] Update old contact info in GPL license notices

sim/ChangeLog:

        Update old contact info in GPL license notices.
@
text
@/*  This file is part of the program psim.
    
    Copyright (C) 1994-1996, Andrew Cagney <cagney@@highland.com.au>
    
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program; if not, see <http://www.gnu.org/licenses/>.
    
    */


#ifndef _HW_GLUE_C_
#define _HW_GLUE_C_

#include "device_table.h"


/* DEVICE
   

   glue - glue to interconnect and test interrupts
   

   DESCRIPTION
   

   The glue device provides two functions.  Firstly, it provides a
   mechanism for inspecting and driving the interrupt net.  Secondly,
   it provides a set of boolean primitives that can be used add
   combinatorial operations to the interrupt network.

   Glue devices have a variable number of big endian <<output>>
   registers.  Each host-word size.  The registers can be both read
   and written.

   Writing a value to an output register causes an interrupt (of the
   specified level) to be driven on the devices corresponding output
   interrupt port.

   Reading an <<output>> register returns either the last value
   written or the most recently computed value (for that register) as
   a result of an interrupt ariving (which ever was computed last).

   At present the following sub device types are available:

   <<glue>>: In addition to driving its output interrupt port with any
   value written to an interrupt input port is stored in the
   corresponding <<output>> register.  Such input interrupts, however,
   are not propogated to an output interrupt port.

   <<glue-and>>: The bit-wise AND of the interrupt inputs is computed
   and then both stored in <<output>> register zero and propogated to
   output interrupt output port zero.


   PROPERTIES
   

   reg = <address> <size> (required)

   Specify the address (within the parent bus) that this device is to
   live.  The address must be 2048 * sizeof(word) (8k in a 32bit
   simulation) aligned.


   interrupt-ranges = <int-number> <range> (optional)

   If present, this specifies the number of valid interrupt inputs (up
   to the maximum of 2048).  By default, <<int-number>> is zero and
   range is determined by the <<reg>> size.


   EXAMPLES


   Enable tracing of the device:

   | -t glue-device \


   Create source, bitwize-and, and sink glue devices.  Since the
   device at address <<0x10000>> is of size <<8>> it will have two
   output interrupt ports.

   | -o '/iobus@@0xf0000000/glue@@0x10000/reg 0x10000 8' \
   | -o '/iobus@@0xf0000000/glue-and@@0x20000/reg 0x20000 4' \
   | -o '/iobus@@0xf0000000/glue-and/interrupt-ranges 0 2' \
   | -o '/iobus@@0xf0000000/glue@@0x30000/reg 0x30000 4' \


   Wire the two source interrupts to the AND device:

   | -o '/iobus@@0xf0000000/glue@@0x10000 > 0 0 /iobus/glue-and' \
   | -o '/iobus@@0xf0000000/glue@@0x10000 > 1 1 /iobus/glue-and' \


   Wire the AND device up to the sink so that the and's output is not
   left open.

   | -o '/iobus@@0xf0000000/glue-and > 0 0 /iobus/glue@@0x30000' \


   With the above configuration.  The client program is able to
   compute a two bit AND.  For instance the <<C>> stub below prints 1
   AND 0.

   |  unsigned *input = (void*)0xf0010000;
   |  unsigned *output = (void*)0xf0030000;
   |  unsigned ans;
   |  input[0] = htonl(1);
   |  input[1] = htonl(0);
   |  ans = ntohl(*output);
   |  write_string("AND is ");
   |  write_int(ans);
   |  write_line();
   

   BUGS

   
   A future implementation of this device may support multiple
   interrupt ranges.

   Some of the devices listed may not yet be fully implemented.

   Additional devices such as a dff, an inverter or a latch may be
   useful.

   */


enum {
  max_nr_interrupts = 2048,
};

typedef enum _hw_glue_type {
  glue_undefined = 0,
  glue_io,
  glue_and,
  glue_nand,
  glue_or,
  glue_xor,
  glue_nor,
  glue_not,
} hw_glue_type;

typedef struct _hw_glue_device {
  hw_glue_type type;
  int int_number;
  int *input;
  int nr_inputs;
  unsigned sizeof_input;
  /* our output registers */
  int space;
  unsigned_word address;
  unsigned sizeof_output;
  int *output;
  int nr_outputs;
} hw_glue_device;


static void
hw_glue_init_address(device *me)
{
  hw_glue_device *glue = (hw_glue_device*)device_data(me);

  /* attach to my parent */
  generic_device_init_address(me);

  /* establish the output registers */
  if (glue->output != NULL) {
    memset(glue->output, 0, glue->sizeof_output);
  }
  else {
    reg_property_spec unit;
    int reg_nr;
    /* find a relevant reg entry */
    reg_nr = 0;
    while (device_find_reg_array_property(me, "reg", reg_nr, &unit)
	   && !device_size_to_attach_size(device_parent(me), &unit.size,
					  &glue->sizeof_output, me))
      reg_nr++;
    /* check out the size */
    if (glue->sizeof_output == 0)
      device_error(me, "at least one reg property size must be nonzero");
    if (glue->sizeof_output % sizeof(unsigned_word) != 0)
      device_error(me, "reg property size must be %d aligned", sizeof(unsigned_word));
    /* and the address */
    device_address_to_attach_address(device_parent(me),
				     &unit.address, &glue->space, &glue->address,
				     me);
    if (glue->address % (sizeof(unsigned_word) * max_nr_interrupts) != 0)
      device_error(me, "reg property address must be %d aligned",
		   sizeof(unsigned_word) * max_nr_interrupts);
    glue->nr_outputs = glue->sizeof_output / sizeof(unsigned_word);
    glue->output = zalloc(glue->sizeof_output);
  }

  /* establish the input interrupt ports */
  if (glue->input != NULL) {
    memset(glue->input, 0, glue->sizeof_input);
  }
  else {
    const device_property *ranges = device_find_property(me, "interrupt-ranges");
    if (ranges == NULL) {
      glue->int_number = 0;
      glue->nr_inputs = glue->nr_outputs;
    }
    else if (ranges->sizeof_array != sizeof(unsigned_cell) * 2) {
      device_error(me, "invalid interrupt-ranges property (incorrect size)");
    }
    else {
      const unsigned_cell *int_range = ranges->array;
      glue->int_number = BE2H_cell(int_range[0]);
      glue->nr_inputs = BE2H_cell(int_range[1]);
    }
    glue->sizeof_input = glue->nr_inputs * sizeof(unsigned);
    glue->input = zalloc(glue->sizeof_input);
  }

  /* determine our type */
  if (glue->type == glue_undefined) {
    const char *name = device_name(me);
    if (strcmp(name, "glue") == 0)
      glue->type = glue_io;
    else if (strcmp(name, "glue-and") == 0)
      glue->type = glue_and;
    else
      device_error(me, "unimplemented glue type");
  }

  DTRACE(glue, ("int-number %d, nr_inputs %d, nr_outputs %d\n",
		glue->int_number, glue->nr_inputs, glue->nr_outputs));
}

static unsigned
hw_glue_io_read_buffer_callback(device *me,
				void *dest,
				int space,
				unsigned_word addr,
				unsigned nr_bytes,
				cpu *processor,
				unsigned_word cia)
{
  hw_glue_device *glue = (hw_glue_device*)device_data(me);
  int reg = ((addr - glue->address) / sizeof(unsigned_word)) % glue->nr_outputs;
  if (nr_bytes != sizeof(unsigned_word)
      || (addr % sizeof(unsigned_word)) != 0)
     device_error(me, "missaligned read access (%d:0x%lx:%d) not supported",
		  space, (unsigned long)addr, nr_bytes);
  *(unsigned_word*)dest = H2BE_4(glue->output[reg]);
  DTRACE(glue, ("read - interrupt %d (0x%lx), level %d\n",
		reg, (unsigned long) addr, glue->output[reg]));
  return nr_bytes;
}


static unsigned
hw_glue_io_write_buffer_callback(device *me,
				 const void *source,
				 int space,
				 unsigned_word addr,
				 unsigned nr_bytes,
				 cpu *processor,
				 unsigned_word cia)
{
  hw_glue_device *glue = (hw_glue_device*)device_data(me);
  int reg = ((addr - glue->address) / sizeof(unsigned_word)) % max_nr_interrupts;
  if (nr_bytes != sizeof(unsigned_word)
      || (addr % sizeof(unsigned_word)) != 0)
    device_error(me, "missaligned write access (%d:0x%lx:%d) not supported",
		 space, (unsigned long)addr, nr_bytes);
  glue->output[reg] = H2BE_4(*(unsigned_word*)source);
  DTRACE(glue, ("write - interrupt %d (0x%lx), level %d\n",
		reg, (unsigned long) addr, glue->output[reg]));
  device_interrupt_event(me, reg, glue->output[reg], processor, cia);
  return nr_bytes;
}

static void
hw_glue_interrupt_event(device *me,
			int my_port,
			device *source,
			int source_port,
			int level,
			cpu *processor,
			unsigned_word cia)
{
  hw_glue_device *glue = (hw_glue_device*)device_data(me);
  int i;
  if (my_port < glue->int_number
      || my_port >= glue->int_number + glue->nr_inputs)
    device_error(me, "interrupt %d outside of valid range", my_port);
  glue->input[my_port - glue->int_number] = level;
  switch (glue->type) {
  case glue_io:
    {
      int port = my_port % glue->nr_outputs;
      glue->output[port] = level;
      DTRACE(glue, ("input - interrupt %d (0x%lx), level %d\n",
		    my_port,
		    (unsigned long)glue->address + port * sizeof(unsigned_word),
		    level));
      break;
    }
  case glue_and:
    glue->output[0] = glue->input[0];
    for (i = 1; i < glue->nr_inputs; i++)
      glue->output[0] &= glue->input[i];
    DTRACE(glue, ("and - interrupt %d, level %d arrived - output %d\n",
		  my_port, level, glue->output[0]));
    device_interrupt_event(me, 0, glue->output[0], processor, cia);
    break;
  default:
    device_error(me, "operator not implemented");
    break;
  }
}


static const device_interrupt_port_descriptor hw_glue_interrupt_ports[] = {
  { "int", 0, max_nr_interrupts },
  { NULL }
};


static device_callbacks const hw_glue_callbacks = {
  { hw_glue_init_address, NULL },
  { NULL, }, /* address */
  { hw_glue_io_read_buffer_callback,
      hw_glue_io_write_buffer_callback, },
  { NULL, }, /* DMA */
  { hw_glue_interrupt_event, NULL, hw_glue_interrupt_ports }, /* interrupt */
  { NULL, }, /* unit */
  NULL, /* instance */
};


static void *
hw_glue_create(const char *name,
	      const device_unit *unit_address,
	      const char *args)
{
  /* create the descriptor */
  hw_glue_device *glue = ZALLOC(hw_glue_device);
  return glue;
}


const device_descriptor hw_glue_device_descriptor[] = {
  { "glue", hw_glue_create, &hw_glue_callbacks },
  { "glue-and", hw_glue_create, &hw_glue_callbacks },
  { "glue-nand", hw_glue_create, &hw_glue_callbacks },
  { "glue-or", hw_glue_create, &hw_glue_callbacks },
  { "glue-xor", hw_glue_create, &hw_glue_callbacks },
  { "glue-nor", hw_glue_create, &hw_glue_callbacks },
  { "glue-not", hw_glue_create, &hw_glue_callbacks },
  { NULL },
};

#endif /* _HW_GLUE_C_ */
@


1.2
log
@Update sim copyright headers from GPLv2-or-later to GPLv3-or-later.

gdb/sim/ChangeLog:

        Update the non-FSF-copyrighted files in sim to GPLv3 or later.
@
text
@d16 1
a16 2
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
    the Free Software Foundation; either version 2 of the License, or
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

