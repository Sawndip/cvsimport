head	1.6;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.6
	gdb_7_6-2013-04-26-release:1.6
	gdb_7_6-branch:1.6.0.2
	gdb_7_6-2013-03-12-branchpoint:1.6
	gdb_7_5_1-2012-11-29-release:1.5
	gdb_7_5-2012-08-17-release:1.5
	gdb_7_5-branch:1.5.0.2
	gdb_7_5-2012-07-18-branchpoint:1.5
	gdb_7_4_1-2012-04-26-release:1.4.2.1
	gdb_7_4-2012-01-24-release:1.4.2.1
	gdb_7_4-branch:1.4.0.2
	gdb_7_4-2011-12-13-branchpoint:1.4
	gdb_7_3_1-2011-09-04-release:1.3
	gdb_7_3-2011-07-26-release:1.3
	gdb_7_3-branch:1.3.0.2
	gdb_7_3-2011-04-01-branchpoint:1.3;
locks; strict;
comment	@ * @;


1.6
date	2013.01.01.06.41.32;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.04.08.28.03;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.27.21.29.03;	author vapier;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2011.03.15.20.55.11;	author vapier;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.15.20.44.09;	author vapier;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.06.00.20.19;	author vapier;	state Exp;
branches;
next	;

1.4.2.1
date	2012.01.06.04.54.38;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@/* Blackfin Direct Memory Access (DMA) Controller model.

   Copyright (C) 2010-2013 Free Software Foundation, Inc.
   Contributed by Analog Devices, Inc.

   This file is part of simulators.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "config.h"

#include "sim-main.h"
#include "sim-hw.h"
#include "devices.h"
#include "hw-device.h"
#include "dv-bfin_dma.h"
#include "dv-bfin_dmac.h"

struct bfin_dmac
{
  /* This top portion matches common dv_bfin struct.  */
  bu32 base;
  struct hw *dma_master;
  bool acked;

  const char * const *pmap;
  unsigned int pmap_count;
};

struct hw *
bfin_dmac_get_peer (struct hw *dma, bu16 pmap)
{
  struct hw *ret, *me;
  struct bfin_dmac *dmac;
  char peer[100];

  me = hw_parent (dma);
  dmac = hw_data (me);
  if (pmap & CTYPE)
    {
      /* MDMA channel.  */
      unsigned int chan_num = dv_get_bus_num (dma);
      if (chan_num & 1)
	chan_num &= ~1;
      else
	chan_num |= 1;
      sprintf (peer, "%s/bfin_dma@@%u", hw_path (me), chan_num);
    }
  else
    {
      unsigned int idx = pmap >> 12;
      if (idx >= dmac->pmap_count)
	hw_abort (me, "Invalid DMA peripheral_map %#x", pmap);
      else
	sprintf (peer, "/core/bfin_%s", dmac->pmap[idx]);
    }

  ret = hw_tree_find_device (me, peer);
  if (!ret)
    hw_abort (me, "Unable to locate peer for %s (pmap:%#x %s)",
	      hw_name (dma), pmap, peer);
  return ret;
}

bu16
bfin_dmac_default_pmap (struct hw *dma)
{
  unsigned int chan_num = dv_get_bus_num (dma);

  if (chan_num < BFIN_DMAC_MDMA_BASE)
    return (chan_num % 12) << 12;
  else
    return CTYPE;	/* MDMA */
}

static const char * const bfin_dmac_50x_pmap[] =
{
  "ppi@@0", "rsi", "sport@@0", "sport@@0", "sport@@1", "sport@@1",
  "spi@@0", "spi@@1", "uart2@@0", "uart2@@0", "uart2@@1", "uart2@@1",
};

/* XXX: Need to figure out how to handle portmuxed DMA channels.  */
static const struct hw_port_descriptor bfin_dmac_50x_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
  { "rsi",         1, 0, input_port, },
  { "sport@@0_rx",  2, 0, input_port, },
  { "sport@@0_tx",  3, 0, input_port, },
  { "sport@@1_tx",  4, 0, input_port, },
  { "sport@@1_rx",  5, 0, input_port, },
  { "spi@@0",       6, 0, input_port, },
  { "spi@@1",       7, 0, input_port, },
  { "uart2@@0_rx",  8, 0, input_port, },
  { "uart2@@0_tx",  9, 0, input_port, },
  { "uart2@@1_rx", 10, 0, input_port, },
  { "uart2@@1_tx", 11, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac_51x_pmap[] =
{
  "ppi@@0", "emac", "emac", "sport@@0", "sport@@0", "sport@@1",
  "sport@@1", "spi@@0", "uart@@0", "uart@@0", "uart@@1", "uart@@1",
};

/* XXX: Need to figure out how to handle portmuxed DMA channels.  */
static const struct hw_port_descriptor bfin_dmac_51x_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
  { "emac_rx",     1, 0, input_port, },
  { "emac_tx",     2, 0, input_port, },
  { "sport@@0_rx",  3, 0, input_port, },
  { "sport@@0_tx",  4, 0, input_port, },
/*{ "rsi",         4, 0, input_port, },*/
  { "sport@@1_tx",  5, 0, input_port, },
/*{ "spi@@1",       5, 0, input_port, },*/
  { "sport@@1_rx",  6, 0, input_port, },
  { "spi@@0",       7, 0, input_port, },
  { "uart@@0_rx",   8, 0, input_port, },
  { "uart@@0_tx",   9, 0, input_port, },
  { "uart@@1_rx",  10, 0, input_port, },
  { "uart@@1_tx",  11, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac_52x_pmap[] =
{
  "ppi@@0", "emac", "emac", "sport@@0", "sport@@0", "sport@@1",
  "sport@@1", "spi", "uart@@0", "uart@@0", "uart@@1", "uart@@1",
};

/* XXX: Need to figure out how to handle portmuxed DMA channels
        like PPI/NFC here which share DMA0.  */
static const struct hw_port_descriptor bfin_dmac_52x_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
/*{ "nfc",         0, 0, input_port, },*/
  { "emac_rx",     1, 0, input_port, },
/*{ "hostdp",      1, 0, input_port, },*/
  { "emac_tx",     2, 0, input_port, },
/*{ "nfc",         2, 0, input_port, },*/
  { "sport@@0_tx",  3, 0, input_port, },
  { "sport@@0_rx",  4, 0, input_port, },
  { "sport@@1_tx",  5, 0, input_port, },
  { "sport@@1_rx",  6, 0, input_port, },
  { "spi",         7, 0, input_port, },
  { "uart@@0_tx",   8, 0, input_port, },
  { "uart@@0_rx",   9, 0, input_port, },
  { "uart@@1_tx",  10, 0, input_port, },
  { "uart@@1_rx",  11, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac_533_pmap[] =
{
  "ppi@@0", "sport@@0", "sport@@0", "sport@@1", "sport@@1", "spi",
  "uart@@0", "uart@@0",
};

static const struct hw_port_descriptor bfin_dmac_533_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
  { "sport@@0_tx",  1, 0, input_port, },
  { "sport@@0_rx",  2, 0, input_port, },
  { "sport@@1_tx",  3, 0, input_port, },
  { "sport@@1_rx",  4, 0, input_port, },
  { "spi",         5, 0, input_port, },
  { "uart@@0_tx",   6, 0, input_port, },
  { "uart@@0_rx",   7, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac_537_pmap[] =
{
  "ppi@@0", "emac", "emac", "sport@@0", "sport@@0", "sport@@1",
  "sport@@1", "spi", "uart@@0", "uart@@0", "uart@@1", "uart@@1",
};

static const struct hw_port_descriptor bfin_dmac_537_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
  { "emac_rx",     1, 0, input_port, },
  { "emac_tx",     2, 0, input_port, },
  { "sport@@0_tx",  3, 0, input_port, },
  { "sport@@0_rx",  4, 0, input_port, },
  { "sport@@1_tx",  5, 0, input_port, },
  { "sport@@1_rx",  6, 0, input_port, },
  { "spi",         7, 0, input_port, },
  { "uart@@0_tx",   8, 0, input_port, },
  { "uart@@0_rx",   9, 0, input_port, },
  { "uart@@1_tx",  10, 0, input_port, },
  { "uart@@1_rx",  11, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac0_538_pmap[] =
{
  "ppi@@0", "sport@@0", "sport@@0", "sport@@1", "sport@@1", "spi@@0",
  "uart@@0", "uart@@0",
};

static const struct hw_port_descriptor bfin_dmac0_538_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
  { "sport@@0_rx",  1, 0, input_port, },
  { "sport@@0_tx",  2, 0, input_port, },
  { "sport@@1_rx",  3, 0, input_port, },
  { "sport@@1_tx",  4, 0, input_port, },
  { "spi@@0",       5, 0, input_port, },
  { "uart@@0_rx",   6, 0, input_port, },
  { "uart@@0_tx",   7, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac1_538_pmap[] =
{
  "sport@@2", "sport@@2", "sport@@3", "sport@@3", NULL, NULL,
  "spi@@1", "spi@@2", "uart@@1", "uart@@1", "uart@@2", "uart@@2",
};

static const struct hw_port_descriptor bfin_dmac1_538_ports[] =
{
  { "sport@@2_rx",  0, 0, input_port, },
  { "sport@@2_tx",  1, 0, input_port, },
  { "sport@@3_rx",  2, 0, input_port, },
  { "sport@@3_tx",  3, 0, input_port, },
  { "spi@@1",       6, 0, input_port, },
  { "spi@@2",       7, 0, input_port, },
  { "uart@@1_rx",   8, 0, input_port, },
  { "uart@@1_tx",   9, 0, input_port, },
  { "uart@@2_rx",  10, 0, input_port, },
  { "uart@@2_tx",  11, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac0_54x_pmap[] =
{
  "sport@@0", "sport@@0", "sport@@1", "sport@@1", "spi@@0", "spi@@1",
  "uart2@@0", "uart2@@0", "uart2@@1", "uart2@@1", "atapi", "atapi",
};

static const struct hw_port_descriptor bfin_dmac0_54x_ports[] =
{
  { "sport@@0_rx",  0, 0, input_port, },
  { "sport@@0_tx",  1, 0, input_port, },
  { "sport@@1_rx",  2, 0, input_port, },
  { "sport@@1_tx",  3, 0, input_port, },
  { "spi@@0",       4, 0, input_port, },
  { "spi@@1",       5, 0, input_port, },
  { "uart2@@0_rx",  6, 0, input_port, },
  { "uart2@@0_tx",  7, 0, input_port, },
  { "uart2@@1_rx",  8, 0, input_port, },
  { "uart2@@1_tx",  9, 0, input_port, },
  { "atapi",      10, 0, input_port, },
  { "atapi",      11, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac1_54x_pmap[] =
{
  "eppi@@0", "eppi@@1", "eppi@@2", "pixc", "pixc", "pixc",
  "sport@@2", "sport@@2", "sport@@3", "sport@@3", "sdh",
  "spi@@2", "uart2@@2", "uart2@@2", "uart2@@3", "uart2@@3",
};

static const struct hw_port_descriptor bfin_dmac1_54x_ports[] =
{
  { "eppi@@0",      0, 0, input_port, },
  { "eppi@@1",      1, 0, input_port, },
  { "eppi@@2",      2, 0, input_port, },
  { "pixc",        3, 0, input_port, },
  { "pixc",        4, 0, input_port, },
  { "pixc",        5, 0, input_port, },
  { "sport@@2_rx",  6, 0, input_port, },
  { "sport@@2_tx",  7, 0, input_port, },
  { "sport@@3_rx",  8, 0, input_port, },
  { "sport@@3_tx",  9, 0, input_port, },
  { "sdh",        10, 0, input_port, },
/*{ "nfc",        10, 0, input_port, },*/
  { "spi@@2",      11, 0, input_port, },
  { "uart2@@2_rx", 12, 0, input_port, },
  { "uart2@@2_tx", 13, 0, input_port, },
  { "uart2@@3_rx", 14, 0, input_port, },
  { "uart2@@3_tx", 15, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac0_561_pmap[] =
{
  "sport@@0", "sport@@0", "sport@@1", "sport@@1", "spi", "uart@@0", "uart@@0",
};

static const struct hw_port_descriptor bfin_dmac0_561_ports[] =
{
  { "sport@@0_rx",  0, 0, input_port, },
  { "sport@@0_tx",  1, 0, input_port, },
  { "sport@@1_rx",  2, 0, input_port, },
  { "sport@@1_tx",  3, 0, input_port, },
  { "spi@@0",       4, 0, input_port, },
  { "uart@@0_rx",   5, 0, input_port, },
  { "uart@@0_tx",   6, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac1_561_pmap[] =
{
  "ppi@@0", "ppi@@1",
};

static const struct hw_port_descriptor bfin_dmac1_561_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
  { "ppi@@1",       1, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static const char * const bfin_dmac_59x_pmap[] =
{
  "ppi@@0", "sport@@0", "sport@@0", "sport@@1", "sport@@1", "spi@@0",
  "spi@@1", "uart@@0", "uart@@0",
};

static const struct hw_port_descriptor bfin_dmac_59x_ports[] =
{
  { "ppi@@0",       0, 0, input_port, },
  { "sport@@0_tx",  1, 0, input_port, },
  { "sport@@0_rx",  2, 0, input_port, },
  { "sport@@1_tx",  3, 0, input_port, },
  { "sport@@1_rx",  4, 0, input_port, },
  { "spi@@0",       5, 0, input_port, },
  { "spi@@1",       6, 0, input_port, },
  { "uart@@0_rx",   7, 0, input_port, },
  { "uart@@0_tx",   8, 0, input_port, },
  { NULL, 0, 0, 0, },
};

static void
bfin_dmac_port_event (struct hw *me, int my_port, struct hw *source,
		      int source_port, int level)
{
  SIM_DESC sd = hw_system (me);
  struct bfin_dmac *dmac = hw_data (me);
  struct hw *dma = hw_child (me);

  while (dma)
    {
      bu16 pmap;
      sim_hw_io_read_buffer (sd, dma, &pmap, 0, 0x2c, sizeof (pmap));
      pmap >>= 12;
      if (pmap == my_port)
	break;
      dma = hw_sibling (dma);
    }

  if (!dma)
    hw_abort (me, "no valid dma mapping found for %s", dmac->pmap[my_port]);

  /* Have the DMA channel raise its interrupt to the SIC.  */
  hw_port_event (dma, 0, 1);
}

static void
bfin_dmac_finish (struct hw *me)
{
  struct bfin_dmac *dmac;
  unsigned int dmac_num = dv_get_bus_num (me);

  dmac = HW_ZALLOC (me, struct bfin_dmac);

  set_hw_data (me, dmac);
  set_hw_port_event (me, bfin_dmac_port_event);

  /* Initialize the DMA Controller.  */
  if (hw_find_property (me, "type") == NULL)
    hw_abort (me, "Missing \"type\" property");

  switch (hw_find_integer_property (me, "type"))
    {
    case 500 ... 509:
      if (dmac_num != 0)
	hw_abort (me, "this Blackfin only has a DMAC0");
      dmac->pmap = bfin_dmac_50x_pmap;
      dmac->pmap_count = ARRAY_SIZE (bfin_dmac_50x_pmap);
      set_hw_ports (me, bfin_dmac_50x_ports);
      break;
    case 510 ... 519:
      if (dmac_num != 0)
	hw_abort (me, "this Blackfin only has a DMAC0");
      dmac->pmap = bfin_dmac_51x_pmap;
      dmac->pmap_count = ARRAY_SIZE (bfin_dmac_51x_pmap);
      set_hw_ports (me, bfin_dmac_51x_ports);
      break;
    case 522 ... 527:
      if (dmac_num != 0)
	hw_abort (me, "this Blackfin only has a DMAC0");
      dmac->pmap = bfin_dmac_52x_pmap;
      dmac->pmap_count = ARRAY_SIZE (bfin_dmac_52x_pmap);
      set_hw_ports (me, bfin_dmac_52x_ports);
      break;
    case 531 ... 533:
      if (dmac_num != 0)
	hw_abort (me, "this Blackfin only has a DMAC0");
      dmac->pmap = bfin_dmac_533_pmap;
      dmac->pmap_count = ARRAY_SIZE (bfin_dmac_533_pmap);
      set_hw_ports (me, bfin_dmac_533_ports);
      break;
    case 534:
    case 536:
    case 537:
      if (dmac_num != 0)
	hw_abort (me, "this Blackfin only has a DMAC0");
      dmac->pmap = bfin_dmac_537_pmap;
      dmac->pmap_count = ARRAY_SIZE (bfin_dmac_537_pmap);
      set_hw_ports (me, bfin_dmac_537_ports);
      break;
    case 538 ... 539:
      switch (dmac_num)
	{
	case 0:
	  dmac->pmap = bfin_dmac0_538_pmap;
	  dmac->pmap_count = ARRAY_SIZE (bfin_dmac0_538_pmap);
	  set_hw_ports (me, bfin_dmac0_538_ports);
	  break;
	case 1:
	  dmac->pmap = bfin_dmac1_538_pmap;
	  dmac->pmap_count = ARRAY_SIZE (bfin_dmac1_538_pmap);
	  set_hw_ports (me, bfin_dmac1_538_ports);
	  break;
	default:
	  hw_abort (me, "this Blackfin only has a DMAC0 & DMAC1");
	}
      break;
    case 540 ... 549:
      switch (dmac_num)
	{
	case 0:
	  dmac->pmap = bfin_dmac0_54x_pmap;
	  dmac->pmap_count = ARRAY_SIZE (bfin_dmac0_54x_pmap);
	  set_hw_ports (me, bfin_dmac0_54x_ports);
	  break;
	case 1:
	  dmac->pmap = bfin_dmac1_54x_pmap;
	  dmac->pmap_count = ARRAY_SIZE (bfin_dmac1_54x_pmap);
	  set_hw_ports (me, bfin_dmac1_54x_ports);
	  break;
	default:
	  hw_abort (me, "this Blackfin only has a DMAC0 & DMAC1");
	}
      break;
    case 561:
      switch (dmac_num)
	{
	case 0:
	  dmac->pmap = bfin_dmac0_561_pmap;
	  dmac->pmap_count = ARRAY_SIZE (bfin_dmac0_561_pmap);
	  set_hw_ports (me, bfin_dmac0_561_ports);
	  break;
	case 1:
	  dmac->pmap = bfin_dmac1_561_pmap;
	  dmac->pmap_count = ARRAY_SIZE (bfin_dmac1_561_pmap);
	  set_hw_ports (me, bfin_dmac1_561_ports);
	  break;
	default:
	  hw_abort (me, "this Blackfin only has a DMAC0 & DMAC1");
	}
      break;
    case 590 ... 599:
      if (dmac_num != 0)
	hw_abort (me, "this Blackfin only has a DMAC0");
      dmac->pmap = bfin_dmac_59x_pmap;
      dmac->pmap_count = ARRAY_SIZE (bfin_dmac_59x_pmap);
      set_hw_ports (me, bfin_dmac_59x_ports);
      break;
    default:
      hw_abort (me, "no support for DMAC on this Blackfin model yet");
    }
}

const struct hw_descriptor dv_bfin_dmac_descriptor[] =
{
  {"bfin_dmac", bfin_dmac_finish,},
  {NULL, NULL},
};
@


1.5
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 1
a3 1
   Copyright (C) 2010-2012 Free Software Foundation, Inc.
@


1.4
log
@sim: bfin: constify dmac pmap arrays

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d3 1
a3 1
   Copyright (C) 2010-2011 Free Software Foundation, Inc.
@


1.4.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 1
a3 1
   Copyright (C) 2010-2012 Free Software Foundation, Inc.
@


1.3
log
@sim: bfin: fix brace style
@
text
@d37 1
a37 1
  const char **pmap;
d87 1
a87 1
static const char *bfin_dmac_50x_pmap[] =
d111 1
a111 1
static const char *bfin_dmac_51x_pmap[] =
d137 1
a137 1
static const char *bfin_dmac_52x_pmap[] =
d165 1
a165 1
static const char *bfin_dmac_533_pmap[] =
d184 1
a184 1
static const char *bfin_dmac_537_pmap[] =
d207 1
a207 1
static const char *bfin_dmac0_538_pmap[] =
d226 1
a226 1
static const char *bfin_dmac1_538_pmap[] =
d247 1
a247 1
static const char *bfin_dmac0_54x_pmap[] =
d270 1
a270 1
static const char *bfin_dmac1_54x_pmap[] =
d299 1
a299 1
static const char *bfin_dmac0_561_pmap[] =
d316 1
a316 1
static const char *bfin_dmac1_561_pmap[] =
d328 1
a328 1
static const char *bfin_dmac_59x_pmap[] =
@


1.2
log
@sim: bfin: fix brace style
@
text
@d490 2
a491 1
const struct hw_descriptor dv_bfin_dmac_descriptor[] = {
@


1.1
log
@sim: bfin: new port

This can boot Das U-Boot and a Linux kernel.  It also supports Linux
userspace FLAT and FDPIC (dynamic and static) ELFs.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d87 2
a88 1
static const char *bfin_dmac_50x_pmap[] = {
d94 2
a95 1
static const struct hw_port_descriptor bfin_dmac_50x_ports[] = {
d111 2
a112 1
static const char *bfin_dmac_51x_pmap[] = {
d118 2
a119 1
static const struct hw_port_descriptor bfin_dmac_51x_ports[] = {
d137 2
a138 1
static const char *bfin_dmac_52x_pmap[] = {
d145 2
a146 1
static const struct hw_port_descriptor bfin_dmac_52x_ports[] = {
d165 2
a166 1
static const char *bfin_dmac_533_pmap[] = {
d171 2
a172 1
static const struct hw_port_descriptor bfin_dmac_533_ports[] = {
d184 2
a185 1
static const char *bfin_dmac_537_pmap[] = {
d190 2
a191 1
static const struct hw_port_descriptor bfin_dmac_537_ports[] = {
d207 2
a208 1
static const char *bfin_dmac0_538_pmap[] = {
d213 2
a214 1
static const struct hw_port_descriptor bfin_dmac0_538_ports[] = {
d226 2
a227 1
static const char *bfin_dmac1_538_pmap[] = {
d232 2
a233 1
static const struct hw_port_descriptor bfin_dmac1_538_ports[] = {
d247 2
a248 1
static const char *bfin_dmac0_54x_pmap[] = {
d253 2
a254 1
static const struct hw_port_descriptor bfin_dmac0_54x_ports[] = {
d270 2
a271 1
static const char *bfin_dmac1_54x_pmap[] = {
d277 2
a278 1
static const struct hw_port_descriptor bfin_dmac1_54x_ports[] = {
d299 2
a300 1
static const char *bfin_dmac0_561_pmap[] = {
d304 2
a305 1
static const struct hw_port_descriptor bfin_dmac0_561_ports[] = {
d316 2
a317 1
static const char *bfin_dmac1_561_pmap[] = {
d321 2
a322 1
static const struct hw_port_descriptor bfin_dmac1_561_ports[] = {
d328 2
a329 1
static const char *bfin_dmac_59x_pmap[] = {
d334 2
a335 1
static const struct hw_port_descriptor bfin_dmac_59x_ports[] = {
@

