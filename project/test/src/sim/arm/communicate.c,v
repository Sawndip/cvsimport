head	1.5;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.5
	gdb_7_6-2013-04-26-release:1.5
	gdb_7_6-branch:1.5.0.2
	gdb_7_6-2013-03-12-branchpoint:1.5
	gdb_7_5_1-2012-11-29-release:1.3
	gdb_7_5-2012-08-17-release:1.3
	gdb_7_5-branch:1.3.0.8
	gdb_7_5-2012-07-18-branchpoint:1.3
	gdb_7_4_1-2012-04-26-release:1.3
	gdb_7_4-2012-01-24-release:1.3
	gdb_7_4-branch:1.3.0.6
	gdb_7_4-2011-12-13-branchpoint:1.3
	gdb_7_3_1-2011-09-04-release:1.3
	gdb_7_3-2011-07-26-release:1.3
	gdb_7_3-branch:1.3.0.4
	gdb_7_3-2011-04-01-branchpoint:1.3
	gdb_7_2-2010-09-02-release:1.3
	gdb_7_2-branch:1.3.0.2
	gdb_7_2-2010-07-07-branchpoint:1.3
	gdb_7_1-2010-03-18-release:1.2
	gdb_7_1-branch:1.2.0.54
	gdb_7_1-2010-02-18-branchpoint:1.2
	gdb_7_0_1-2009-12-22-release:1.2
	gdb_7_0-2009-10-06-release:1.2
	gdb_7_0-branch:1.2.0.52
	gdb_7_0-2009-09-16-branchpoint:1.2
	arc-sim-20090309:1.2
	msnyder-checkpoint-072509-branch:1.2.0.50
	msnyder-checkpoint-072509-branchpoint:1.2
	arc-insight_6_8-branch:1.2.0.48
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.46
	insight_6_8-branchpoint:1.2
	reverse-20081226-branch:1.2.0.44
	reverse-20081226-branchpoint:1.2
	multiprocess-20081120-branch:1.2.0.42
	multiprocess-20081120-branchpoint:1.2
	reverse-20080930-branch:1.2.0.40
	reverse-20080930-branchpoint:1.2
	reverse-20080717-branch:1.2.0.38
	reverse-20080717-branchpoint:1.2
	msnyder-reverse-20080609-branch:1.2.0.36
	msnyder-reverse-20080609-branchpoint:1.2
	drow-reverse-20070409-branch:1.2.0.34
	drow-reverse-20070409-branchpoint:1.2
	gdb_6_8-2008-03-27-release:1.2
	gdb_6_8-branch:1.2.0.32
	gdb_6_8-2008-02-26-branchpoint:1.2
	gdb_6_7_1-2007-10-29-release:1.2
	gdb_6_7-2007-10-10-release:1.2
	gdb_6_7-branch:1.2.0.30
	gdb_6_7-2007-09-07-branchpoint:1.2
	insight_6_6-20070208-release:1.2
	gdb_6_6-2006-12-18-release:1.2
	gdb_6_6-branch:1.2.0.28
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb-csl-symbian-6_4_50_20060226-12:1.2
	gdb-csl-sourcerygxx-3_4_4-25:1.2
	nickrob-async-20060828-mergepoint:1.2
	gdb-csl-symbian-6_4_50_20060226-11:1.2
	gdb-csl-sourcerygxx-4_1-17:1.2
	gdb-csl-20060226-branch-local-2:1.2
	gdb-csl-sourcerygxx-4_1-14:1.2
	gdb-csl-sourcerygxx-4_1-13:1.2
	gdb-csl-sourcerygxx-4_1-12:1.2
	gdb-csl-sourcerygxx-3_4_4-21:1.2
	gdb_6_5-20060621-release:1.2
	gdb-csl-sourcerygxx-4_1-9:1.2
	gdb-csl-sourcerygxx-4_1-8:1.2
	gdb-csl-sourcerygxx-4_1-7:1.2
	gdb-csl-arm-2006q1-6:1.2
	gdb-csl-sourcerygxx-4_1-6:1.2
	gdb-csl-symbian-6_4_50_20060226-10:1.2
	gdb-csl-symbian-6_4_50_20060226-9:1.2
	gdb-csl-symbian-6_4_50_20060226-8:1.2
	gdb-csl-coldfire-4_1-11:1.2
	gdb-csl-sourcerygxx-3_4_4-19:1.2
	gdb-csl-coldfire-4_1-10:1.2
	gdb_6_5-branch:1.2.0.26
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb-csl-sourcerygxx-4_1-5:1.2
	nickrob-async-20060513-branch:1.2.0.24
	nickrob-async-20060513-branchpoint:1.2
	gdb-csl-sourcerygxx-4_1-4:1.2
	msnyder-reverse-20060502-branch:1.2.0.22
	msnyder-reverse-20060502-branchpoint:1.2
	gdb-csl-morpho-4_1-4:1.2
	gdb-csl-sourcerygxx-3_4_4-17:1.2
	readline_5_1-import-branch:1.2.0.20
	readline_5_1-import-branchpoint:1.2
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.2
	gdb-csl-symbian-20060226-branch:1.2.0.18
	gdb-csl-symbian-20060226-branchpoint:1.2
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.2
	msnyder-reverse-20060331-branch:1.2.0.16
	msnyder-reverse-20060331-branchpoint:1.2
	gdb-csl-available-20060303-branch:1.2.0.14
	gdb-csl-available-20060303-branchpoint:1.2
	gdb-csl-20060226-branch:1.2.0.12
	gdb-csl-20060226-branchpoint:1.2
	gdb_6_4-20051202-release:1.2
	msnyder-fork-checkpoint-branch:1.2.0.10
	msnyder-fork-checkpoint-branchpoint:1.2
	gdb-csl-gxxpro-6_3-branch:1.2.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.2
	gdb_6_4-branch:1.2.0.6
	gdb_6_4-2005-11-01-branchpoint:1.2
	gdb-csl-arm-20051020-branch:1.2.0.4
	gdb-csl-arm-20051020-branchpoint:1.2
	msnyder-tracepoint-checkpoint-branch:1.2.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.2
	gdb-csl-arm-20050325-2005-q1b:1.1.1.2
	gdb-csl-arm-20050325-2005-q1a:1.1.1.2
	csl-arm-20050325-branch:1.1.1.2.0.88
	csl-arm-20050325-branchpoint:1.1.1.2
	gdb_6_3-20041109-release:1.1.1.2
	gdb_6_3-branch:1.1.1.2.0.84
	gdb_6_3-20041019-branchpoint:1.1.1.2
	drow_intercu-merge-20040921:1.1.1.2
	drow_intercu-merge-20040915:1.1.1.2
	jimb-gdb_6_2-e500-branch:1.1.1.2.0.86
	jimb-gdb_6_2-e500-branchpoint:1.1.1.2
	gdb_6_2-20040730-release:1.1.1.2
	gdb_6_2-branch:1.1.1.2.0.82
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1.1.2
	gdb_6_1_1-20040616-release:1.1.1.2
	gdb_6_1-2004-04-05-release:1.1.1.2
	drow_intercu-merge-20040402:1.1.1.2
	drow_intercu-merge-20040327:1.1.1.2
	ezannoni_pie-20040323-branch:1.1.1.2.0.80
	ezannoni_pie-20040323-branchpoint:1.1.1.2
	cagney_tramp-20040321-mergepoint:1.1.1.2
	cagney_tramp-20040309-branch:1.1.1.2.0.78
	cagney_tramp-20040309-branchpoint:1.1.1.2
	gdb_6_1-branch:1.1.1.2.0.76
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1.1.2
	drow_intercu-20040221-branch:1.1.1.2.0.74
	drow_intercu-20040221-branchpoint:1.1.1.2
	cagney_bfdfile-20040213-branch:1.1.1.2.0.72
	cagney_bfdfile-20040213-branchpoint:1.1.1.2
	drow-cplus-merge-20040208:1.1.1.2
	carlton_dictionary-20040126-merge:1.1.1.2
	cagney_bigcore-20040122-branch:1.1.1.2.0.70
	cagney_bigcore-20040122-branchpoint:1.1.1.2
	drow-cplus-merge-20040113:1.1.1.2
	drow-cplus-merge-20031224:1.1.1.2
	drow-cplus-merge-20031220:1.1.1.2
	carlton_dictionary-20031215-merge:1.1.1.2
	drow-cplus-merge-20031214:1.1.1.2
	carlton-dictionary-20031111-merge:1.1.1.2
	gdb_6_0-2003-10-04-release:1.1.1.2
	kettenis_sparc-20030918-branch:1.1.1.2.0.68
	kettenis_sparc-20030918-branchpoint:1.1.1.2
	carlton_dictionary-20030917-merge:1.1.1.2
	ezannoni_pie-20030916-branchpoint:1.1.1.2
	ezannoni_pie-20030916-branch:1.1.1.2.0.66
	cagney_x86i386-20030821-branch:1.1.1.2.0.64
	cagney_x86i386-20030821-branchpoint:1.1.1.2
	carlton_dictionary-20030805-merge:1.1.1.2
	carlton_dictionary-20030627-merge:1.1.1.2
	gdb_6_0-branch:1.1.1.2.0.62
	gdb_6_0-2003-06-23-branchpoint:1.1.1.2
	jimb-ppc64-linux-20030613-branch:1.1.1.2.0.60
	jimb-ppc64-linux-20030613-branchpoint:1.1.1.2
	cagney_convert-20030606-branch:1.1.1.2.0.58
	cagney_convert-20030606-branchpoint:1.1.1.2
	cagney_writestrings-20030508-branch:1.1.1.2.0.56
	cagney_writestrings-20030508-branchpoint:1.1.1.2
	jimb-ppc64-linux-20030528-branch:1.1.1.2.0.54
	jimb-ppc64-linux-20030528-branchpoint:1.1.1.2
	carlton_dictionary-20030523-merge:1.1.1.2
	cagney_fileio-20030521-branch:1.1.1.2.0.52
	cagney_fileio-20030521-branchpoint:1.1.1.2
	kettenis_i386newframe-20030517-mergepoint:1.1.1.2
	jimb-ppc64-linux-20030509-branch:1.1.1.2.0.50
	jimb-ppc64-linux-20030509-branchpoint:1.1.1.2
	kettenis_i386newframe-20030504-mergepoint:1.1.1.2
	carlton_dictionary-20030430-merge:1.1.1.2
	kettenis_i386newframe-20030419-branch:1.1.1.2.0.48
	kettenis_i386newframe-20030419-branchpoint:1.1.1.2
	carlton_dictionary-20030416-merge:1.1.1.2
	cagney_frameaddr-20030409-mergepoint:1.1.1.2
	kettenis_i386newframe-20030406-branch:1.1.1.2.0.46
	kettenis_i386newframe-20030406-branchpoint:1.1.1.2
	cagney_frameaddr-20030403-branchpoint:1.1.1.2
	cagney_frameaddr-20030403-branch:1.1.1.2.0.44
	cagney_framebase-20030330-mergepoint:1.1.1.2
	cagney_framebase-20030326-branch:1.1.1.2.0.42
	cagney_framebase-20030326-branchpoint:1.1.1.2
	cagney_lazyid-20030317-branch:1.1.1.2.0.40
	cagney_lazyid-20030317-branchpoint:1.1.1.2
	kettenis-i386newframe-20030316-mergepoint:1.1.1.2
	offbyone-20030313-branch:1.1.1.2.0.38
	offbyone-20030313-branchpoint:1.1.1.2
	kettenis-i386newframe-20030308-branch:1.1.1.2.0.36
	kettenis-i386newframe-20030308-branchpoint:1.1.1.2
	carlton_dictionary-20030305-merge:1.1.1.2
	cagney_offbyone-20030303-branch:1.1.1.2.0.34
	cagney_offbyone-20030303-branchpoint:1.1.1.2
	carlton_dictionary-20030207-merge:1.1.1.2
	interps-20030202-branch:1.1.1.2.0.32
	interps-20030202-branchpoint:1.1.1.2
	cagney-unwind-20030108-branch:1.1.1.2.0.30
	cagney-unwind-20030108-branchpoint:1.1.1.2
	carlton_dictionary-20021223-merge:1.1.1.2
	gdb_5_3-2002-12-12-release:1.1.1.2
	carlton_dictionary-20021115-merge:1.1.1.2
	kseitz_interps-20021105-merge:1.1.1.2
	kseitz_interps-20021103-merge:1.1.1.2
	drow-cplus-merge-20021020:1.1.1.2
	drow-cplus-merge-20021025:1.1.1.2
	carlton_dictionary-20021025-merge:1.1.1.2
	carlton_dictionary-20021011-merge:1.1.1.2
	drow-cplus-branch:1.1.1.2.0.28
	drow-cplus-branchpoint:1.1.1.2
	kseitz_interps-20020930-merge:1.1.1.2
	carlton_dictionary-20020927-merge:1.1.1.2
	carlton_dictionary-branch:1.1.1.2.0.26
	carlton_dictionary-20020920-branchpoint:1.1.1.2
	gdb_5_3-branch:1.1.1.2.0.24
	gdb_5_3-2002-09-04-branchpoint:1.1.1.2
	kseitz_interps-20020829-merge:1.1.1.2
	cagney_sysregs-20020825-branch:1.1.1.2.0.22
	cagney_sysregs-20020825-branchpoint:1.1.1.2
	readline_4_3-import-branch:1.1.1.2.0.20
	readline_4_3-import-branchpoint:1.1.1.2
	gdb_5_2_1-2002-07-23-release:1.1.1.2
	kseitz_interps-20020528-branch:1.1.1.2.0.18
	kseitz_interps-20020528-branchpoint:1.1.1.2
	cagney_regbuf-20020515-branch:1.1.1.2.0.16
	cagney_regbuf-20020515-branchpoint:1.1.1.2
	jimb-macro-020506-branch:1.1.1.2.0.14
	jimb-macro-020506-branchpoint:1.1.1.2
	gdb_5_2-2002-04-29-release:1.1.1.2
	gdb_5_2-branch:1.1.1.2.0.12
	gdb_5_2-2002-03-03-branchpoint:1.1.1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.2
	gdb_5_1_0_1-2002-01-03-release:1.1.1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.2.0.10
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.2
	gdb_5_1-2001-11-21-release:1.1.1.2
	gdb_s390-2001-09-26-branch:1.1.1.2.0.8
	gdb_s390-2001-09-26-branchpoint:1.1.1.2
	gdb_5_1-2001-07-29-branch:1.1.1.2.0.6
	gdb_5_1-2001-07-29-branchpoint:1.1.1.2
	insight-precleanup-2001-01-01:1.1.1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.2.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.2
	gdb_5_0-2000-05-19-release:1.1.1.2
	gdb_4_18_2-2000-05-18-release:1.1.1.2
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.2
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.2
	gdb_5_0-2000-04-10-branch:1.1.1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.2
	repo-unification-2000-02-06:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2012.12.19.07.18.14;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.19.07.11.59;	author brobecke;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.26.22.40.23;	author sezero;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.12.07.36.59;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.55;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.55;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.02.05.07.30.19;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[sim] Update old contact info in GPL license notices

sim/ChangeLog:

        Update old contact info in GPL license notices.
@
text
@/*  communicate.c -- ARMulator RDP comms code:  ARM6 Instruction Emulator.
    Copyright (C) 1994 Advanced RISC Machines Ltd.
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, see <http://www.gnu.org/licenses/>. */

/**************************************************************************/
/* Functions to read and write characters or groups of characters         */
/* down sockets or pipes.  Those that return a value return -1 on failure */
/* and 0 on success.                                                      */
/**************************************************************************/

#include <sys/time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#include "armdefs.h"

/* The socket to the debugger */
int debugsock;

/* The maximum number of file descriptors */
extern int nfds;

/* The socket handle */
extern int sockethandle;

/* Read and Write routines down a pipe or socket */

/****************************************************************/
/* Read an individual character.                                */
/* All other read functions rely on this one.                   */
/* It waits 15 seconds until there is a character available: if */
/* no character is available, then it timeouts and returns -1.  */
/****************************************************************/
int
MYread_char (int sock, unsigned char *c)
{
  int i;
  fd_set readfds;
  struct timeval timeout = { 15, 0 };
  struct sockaddr_in isa;

retry:

  FD_ZERO (&readfds);
  FD_SET (sock, &readfds);

  i = select (nfds, &readfds, (fd_set *) 0, (fd_set *) 0, &timeout);

  if (i < 0)
    {
      perror ("select");
      exit (1);
    }

  if (!i)
    {
      fprintf (stderr, "read: Timeout\n");
      return -1;
    }

  if ((i = read (sock, c, 1)) < 1)
    {
      if (!i && sock == debugsock)
	{
	  fprintf (stderr, "Connection with debugger severed.\n");
	  /* This shouldn't be necessary for a detached armulator, but
	     the armulator cannot be cold started a second time, so
	     this is probably preferable to locking up.  */
	  return -1;
	  fprintf (stderr, "Waiting for connection from debugger...");
	  debugsock = accept (sockethandle, &isa, &i);
	  if (debugsock == -1)
	    {			/* Now we are in serious trouble... */
	      perror ("accept");
	      return -1;
	    }
	  fprintf (stderr, " done.\nConnection Established.\n");
	  sock = debugsock;
	  goto retry;
	}
      perror ("read");
      return -1;
    }

#ifdef DEBUG
  if (sock == debugsock)
    fprintf (stderr, "<%02x ", *c);
#endif

  return 0;
}

/****************************************************************/
/* Read an individual character.                                */
/* It waits until there is a character available. Returns -1 if */
/* an error occurs.                                             */
/****************************************************************/
int
MYread_charwait (int sock, unsigned char *c)
{
  int i;
  fd_set readfds;
  struct sockaddr_in isa;

retry:

  FD_ZERO (&readfds);
  FD_SET (sock, &readfds);

  i = select (nfds, &readfds,
	      (fd_set *) 0, (fd_set *) 0, (struct timeval *) 0);

  if (i < 0)
    {
      perror ("select");
      exit (-1);
    }

  if ((i = read (sock, c, 1)) < 1)
    {
      if (!i && sock == debugsock)
	{
	  fprintf (stderr, "Connection with debugger severed.\n");
	  return -1;
	  fprintf (stderr, "Waiting for connection from debugger...");
	  debugsock = accept (sockethandle, &isa, &i);
	  if (debugsock == -1)
	    {			/* Now we are in serious trouble... */
	      perror ("accept");
	      return -1;
	    }
	  fprintf (stderr, " done.\nConnection Established.\n");
	  sock = debugsock;
	  goto retry;
	}
      perror ("read");
      return -1;
    }

#ifdef DEBUG
  if (sock == debugsock)
    fprintf (stderr, "<%02x ", *c);
#endif

  return 0;
}

void
MYwrite_char (int sock, unsigned char c)
{

  if (write (sock, &c, 1) < 1)
    perror ("write");
#ifdef DEBUG
  if (sock == debugsock)
    fprintf (stderr, ">%02x ", c);
#endif
}

int
MYread_word (int sock, ARMword * here)
{
  unsigned char a, b, c, d;

  if (MYread_char (sock, &a) < 0)
    return -1;
  if (MYread_char (sock, &b) < 0)
    return -1;
  if (MYread_char (sock, &c) < 0)
    return -1;
  if (MYread_char (sock, &d) < 0)
    return -1;
  *here = a | b << 8 | c << 16 | d << 24;
  return 0;
}

void
MYwrite_word (int sock, ARMword i)
{
  MYwrite_char (sock, i & 0xff);
  MYwrite_char (sock, (i & 0xff00) >> 8);
  MYwrite_char (sock, (i & 0xff0000) >> 16);
  MYwrite_char (sock, (i & 0xff000000) >> 24);
}

void
MYwrite_string (int sock, char *s)
{
  int i;
  for (i = 0; MYwrite_char (sock, s[i]), s[i]; i++);
}

int
MYread_FPword (int sock, char *putinhere)
{
  int i;
  for (i = 0; i < 16; i++)
    if (MYread_char (sock, &putinhere[i]) < 0)
      return -1;
  return 0;
}

void
MYwrite_FPword (int sock, char *fromhere)
{
  int i;
  for (i = 0; i < 16; i++)
    MYwrite_char (sock, fromhere[i]);
}

/* Takes n bytes from source and those n bytes */
/* down to dest */
int
passon (int source, int dest, int n)
{
  char *p;
  int i;

  p = (char *) malloc (n);
  if (!p)
    {
      perror ("Out of memory\n");
      exit (1);
    }
  if (n)
    {
      for (i = 0; i < n; i++)
	if (MYread_char (source, &p[i]) < 0)
	  return -1;

#ifdef DEBUG
      if (dest == debugsock)
	for (i = 0; i < n; i++)
	  fprintf (stderr, ")%02x ", (unsigned char) p[i]);
#endif

      write (dest, p, n);
    }
  free (p);
  return 0;
}
@


1.4
log
@Update sim copyright headers from GPLv2-or-later to GPLv3-or-later.

gdb/sim/ChangeLog:

        Update the non-FSF-copyrighted files in sim to GPLv3 or later.
@
text
@d15 1
a15 2
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA. */
@


1.3
log
@2010-05-26  Ozkan Sezer  <sezeroz@@gmail.com>

gdb/
	* ser-tcp.c (net_open): Check error return from socket() call by its
	equality to -1 not by it being negative.
	(net_close): Likewise.

gdb/gdbserver/
	* gdbreplay.c (remote_open): Check error return from socket() call by
	its equality to -1 not by it being negative.
	* remote-utils.c (remote_open): Likewise.

sim/arm/
	* communicate.c (MYread_char): Check error return from accept() call
	by its equality to -1 not by it being negative.
	(MYread_charwait): Likewise.
	* main.c (main): Likewise for both socket() and accept() calls.

sim/common/
	* dv-sockser.c (dv_sockser_init): Check error return from socket()
	call by its equality to -1 not by it being negative.
	(connected_p): Likewise for accept() call.

sim/cris/
	* dv-rv.c (hw_rv_init_socket): Check error return from socket() call
	by its equality to -1 not by it being negative.
	(hw_rv_write): Likewise.
	(hw_rv_handle_incoming): Likewise.
	(hw_rv_poll_once): Likewise.
	* rvdummy.c (setupsocket): Likewise.
	(main): Likewise for accept() call as returned from setupsocket().

sim/m32c/
	* main.c (setup_tcp_console): Check error return from socket() call
	by its equality to -1 not by it being negative.
@
text
@d6 1
a6 1
    the Free Software Foundation; either version 2 of the License, or
@


1.2
log
@Update the address of the FSF organization
@
text
@d86 1
a86 1
	  if (debugsock < 0)
d141 1
a141 1
	  if (debugsock < 0)
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
d48 3
a50 1
int MYread_char(int sock, unsigned char *c) {
d53 1
a53 1
  struct timeval timeout= {15, 0};
d56 1
a56 1
 retry:
d58 38
a95 24
  FD_ZERO(&readfds);
  FD_SET(sock, &readfds);
  
  i = select(nfds, &readfds,
	     (fd_set *) 0,
	     (fd_set *) 0,
	     &timeout);

  if (i < 0) {
    perror("select");
    exit(1);
  }
  
  if (!i) {
    fprintf(stderr, "read: Timeout\n");
    return -1;
  }
  
  if ((i = read(sock, c, 1)) < 1) {
    if (!i && sock == debugsock) {
      fprintf(stderr, "Connection with debugger severed.\n");
      /* This shouldn't be necessary for a detached armulator, but
	 the armulator cannot be cold started a second time, so
	 this is probably preferable to locking up.  */
a96 9
      fprintf(stderr, "Waiting for connection from debugger...");
      debugsock = accept(sockethandle, &isa, &i);
      if (debugsock < 0) { /* Now we are in serious trouble... */
	perror("accept");
	return -1;
      }
      fprintf(stderr, " done.\nConnection Established.\n");
      sock = debugsock;
      goto retry;
d98 1
a98 4
    perror("read");
    return -1;
  }
  
d100 2
a101 1
  if (sock == debugsock) fprintf(stderr, "<%02x ", *c);
d103 1
a103 1
  
d112 3
a114 1
int MYread_charwait(int sock, unsigned char *c) {
d119 32
a150 18
 retry:
  
  FD_ZERO(&readfds);
  FD_SET(sock, &readfds);
  
  i = select(nfds, &readfds,
	     (fd_set *) 0,
	     (fd_set *) 0,
	     (struct timeval *) 0);

  if (i < 0) {
    perror("select");
    exit(-1);
  }
  
  if ((i = read(sock, c, 1)) < 1) {
    if (!i && sock == debugsock) {
      fprintf(stderr, "Connection with debugger severed.\n");
a151 9
      fprintf(stderr, "Waiting for connection from debugger...");
      debugsock = accept(sockethandle, &isa, &i);
      if (debugsock < 0) { /* Now we are in serious trouble... */
	perror("accept");
	return -1;
      }
      fprintf(stderr, " done.\nConnection Established.\n");
      sock = debugsock;
      goto retry;
d153 1
a153 4
    perror("read");
    return -1;
  }
  
d155 2
a156 1
  if (sock == debugsock) fprintf(stderr, "<%02x ", *c);
d158 1
a158 1
  
d162 3
a164 1
void MYwrite_char(int sock, unsigned char c) {
d166 2
a167 2
  if (write(sock, &c, 1) < 1)
    perror("write");
d169 2
a170 1
  if (sock == debugsock) fprintf(stderr, ">%02x ", c);  
d174 3
a176 1
int MYread_word(int sock, ARMword *here) {
d178 9
a186 5
  
  if (MYread_char(sock, &a) < 0) return -1;
  if (MYread_char(sock, &b) < 0) return -1;
  if (MYread_char(sock, &c) < 0) return -1;
  if (MYread_char(sock, &d) < 0) return -1;
d191 7
a197 5
void MYwrite_word(int sock, ARMword i) {
  MYwrite_char(sock, i & 0xff);
  MYwrite_char(sock, (i & 0xff00) >> 8);
  MYwrite_char(sock, (i & 0xff0000) >> 16);
  MYwrite_char(sock, (i & 0xff000000) >> 24);
d200 5
a204 3
void MYwrite_string(int sock, char *s) {
  int i;  
  for (i = 0; MYwrite_char(sock, s[i]), s[i]; i++);
d207 3
a209 1
int MYread_FPword(int sock, char *putinhere) {
d212 2
a213 1
    if (MYread_char(sock, &putinhere[i]) < 0) return -1;
d217 3
a219 1
void MYwrite_FPword(int sock, char *fromhere) {
d222 1
a222 1
    MYwrite_char(sock, fromhere[i]);
d227 3
a229 1
int passon(int source, int dest, int n) {
d232 13
a244 10
  
  p = (char *) malloc(n);
  if (!p) {
    perror("Out of memory\n");
    exit(1);
  }
  if (n) {
    for (i = 0; i < n; i++)
      if (MYread_char(source, &p[i]) < 0) return -1;
    
d246 3
a248 2
    if (dest == debugsock) 
      for (i = 0; i < n; i++) fprintf(stderr, ")%02x ", (unsigned char) p[i]);
d250 4
a253 4
    
    write(dest, p, n);
  }
  free(p);
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-2000-02-04 snapshot
@
text
@d48 1
a48 3
int
MYread_char (int sock, unsigned char *c)
{
d51 1
a51 1
  struct timeval timeout = { 15, 0 };
d54 1
a54 1
retry:
d56 24
a79 14
  FD_ZERO (&readfds);
  FD_SET (sock, &readfds);

  i = select (nfds, &readfds, (fd_set *) 0, (fd_set *) 0, &timeout);

  if (i < 0)
    {
      perror ("select");
      exit (1);
    }

  if (!i)
    {
      fprintf (stderr, "read: Timeout\n");
d81 9
d91 4
a94 25

  if ((i = read (sock, c, 1)) < 1)
    {
      if (!i && sock == debugsock)
	{
	  fprintf (stderr, "Connection with debugger severed.\n");
	  /* This shouldn't be necessary for a detached armulator, but
	     the armulator cannot be cold started a second time, so
	     this is probably preferable to locking up.  */
	  return -1;
	  fprintf (stderr, "Waiting for connection from debugger...");
	  debugsock = accept (sockethandle, &isa, &i);
	  if (debugsock < 0)
	    {			/* Now we are in serious trouble... */
	      perror ("accept");
	      return -1;
	    }
	  fprintf (stderr, " done.\nConnection Established.\n");
	  sock = debugsock;
	  goto retry;
	}
      perror ("read");
      return -1;
    }

d96 1
a96 2
  if (sock == debugsock)
    fprintf (stderr, "<%02x ", *c);
d98 1
a98 1

d107 1
a107 3
int
MYread_charwait (int sock, unsigned char *c)
{
d112 18
a129 32
retry:

  FD_ZERO (&readfds);
  FD_SET (sock, &readfds);

  i = select (nfds, &readfds,
	      (fd_set *) 0, (fd_set *) 0, (struct timeval *) 0);

  if (i < 0)
    {
      perror ("select");
      exit (-1);
    }

  if ((i = read (sock, c, 1)) < 1)
    {
      if (!i && sock == debugsock)
	{
	  fprintf (stderr, "Connection with debugger severed.\n");
	  return -1;
	  fprintf (stderr, "Waiting for connection from debugger...");
	  debugsock = accept (sockethandle, &isa, &i);
	  if (debugsock < 0)
	    {			/* Now we are in serious trouble... */
	      perror ("accept");
	      return -1;
	    }
	  fprintf (stderr, " done.\nConnection Established.\n");
	  sock = debugsock;
	  goto retry;
	}
      perror ("read");
d131 9
d141 4
a144 1

d146 1
a146 2
  if (sock == debugsock)
    fprintf (stderr, "<%02x ", *c);
d148 1
a148 1

d152 1
a152 3
void
MYwrite_char (int sock, unsigned char c)
{
d154 2
a155 2
  if (write (sock, &c, 1) < 1)
    perror ("write");
d157 1
a157 2
  if (sock == debugsock)
    fprintf (stderr, ">%02x ", c);
d161 1
a161 3
int
MYread_word (int sock, ARMword * here)
{
d163 5
a167 9

  if (MYread_char (sock, &a) < 0)
    return -1;
  if (MYread_char (sock, &b) < 0)
    return -1;
  if (MYread_char (sock, &c) < 0)
    return -1;
  if (MYread_char (sock, &d) < 0)
    return -1;
d172 5
a176 7
void
MYwrite_word (int sock, ARMword i)
{
  MYwrite_char (sock, i & 0xff);
  MYwrite_char (sock, (i & 0xff00) >> 8);
  MYwrite_char (sock, (i & 0xff0000) >> 16);
  MYwrite_char (sock, (i & 0xff000000) >> 24);
d179 3
a181 5
void
MYwrite_string (int sock, char *s)
{
  int i;
  for (i = 0; MYwrite_char (sock, s[i]), s[i]; i++);
d184 1
a184 3
int
MYread_FPword (int sock, char *putinhere)
{
d187 1
a187 2
    if (MYread_char (sock, &putinhere[i]) < 0)
      return -1;
d191 1
a191 3
void
MYwrite_FPword (int sock, char *fromhere)
{
d194 1
a194 1
    MYwrite_char (sock, fromhere[i]);
d199 1
a199 3
int
passon (int source, int dest, int n)
{
d202 10
a211 13

  p = (char *) malloc (n);
  if (!p)
    {
      perror ("Out of memory\n");
      exit (1);
    }
  if (n)
    {
      for (i = 0; i < n; i++)
	if (MYread_char (source, &p[i]) < 0)
	  return -1;

d213 2
a214 3
      if (dest == debugsock)
	for (i = 0; i < n; i++)
	  fprintf (stderr, ")%02x ", (unsigned char) p[i]);
d216 4
a219 4

      write (dest, p, n);
    }
  free (p);
@


