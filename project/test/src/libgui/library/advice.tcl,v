head	1.2;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.2
	gdb_7_6-branch:1.2.0.32
	gdb_7_5-branch:1.2.0.30
	gdb_7_4-branch:1.2.0.28
	gdb_7_3-branch:1.2.0.26
	gdb_7_1-branch:1.2.0.24
	gdb_7_0-branch:1.2.0.22
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.20
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.18
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.16
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.14
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.12
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb_6_4-branch:1.2.0.10
	gdb_6_4-2005-11-01-branchpoint:1.2
	gdb_6_1-2004-04-05-release:1.2
	gdb_6_1-branch:1.2.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	gdb_6_0-2003-10-04-release:1.2
	gdb_6_0-branch:1.2.0.6
	gdb_6_0-2003-06-23-branchpoint:1.2
	gdb_5_3-2002-12-12-release:1.2
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.09.08.22.34.46;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@touched all files to ease next import
@
text
@# advice.tcl - Generic advice package.
# Copyright (C) 1998 Cygnus Solutions.
# Written by Tom Tromey <tromey@@cygnus.com>.

# Please note that I adapted this from some code I wrote elsewhere,
# for non-Cygnus reasons.  Don't complain to me if you see something
# like it somewhere else.


# Internal state.
defarray ADVICE_state

# This is a helper proc that does all the actual work.
proc ADVICE_do {command argList} {
  global ADVICE_state

  # Run before advice.
  if {[info exists ADVICE_state(before,$command)]} {
    foreach item $ADVICE_state(before,$command) {
      # We purposely let errors in advice go uncaught.
      uplevel $item $argList
    }
  }

  # Run the command itself.
  set code [catch \
	      [list uplevel \#0 $ADVICE_state(original,$command) $argList] \
	      result]

  # Run the after advice.
  if {[info exists ADVICE_state(after,$command)]} {
    foreach item $ADVICE_state(after,$command) {
      # We purposely let errors in advice go uncaught.
      uplevel $item [list $code $result] $argList
    }
  }

  # Return just as the original command would.
  return -code $code $result
}

# Put some advice on a proc or command.
#  WHEN says when to run the advice - `before' or `after' the
#     advisee is run.
#  WHAT is the name of the proc or command to advise.
#  ADVISOR is the advice.  It is passed the arguments to the advisee
#     call as its arguments.  In addition, `after' advisors are
#     passed the return code and return value of the proc as their
#     first and second arguments.
proc advise {when what advisor} {
  global ADVICE_state

  if {! [info exists ADVICE_state(original,$what)]} {
    set newName [gensym]
    rename $what $newName
    set ADVICE_state(original,$what) $newName

    # Create a new proc which just runs our internal command with the
    # correct arguments.
    uplevel \#0 [list proc $what args \
		   [format {ADVICE_do %s $args} $what]]
  }

  lappend ADVICE_state($when,$what) $advisor
}

# Remove some previously-set advice.  Note that we could undo the
# `rename' when the last advisor is removed.  This adds complexity,
# though, and there isn't much reason to.
proc unadvise {when what advisor} {
  global ADVICE_state

  if {[info exists ADVICE_state($when,$what)]} {
    set newList {}
    foreach item $ADVICE_state($when,$what) {
      if {[string compare $advisor $item]} {
	lappend newList $item
      }
    }
    set ADVICE_state($when,$what) $newList
  }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
