head	1.3;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.3
	gdb_7_6-branch:1.3.0.12
	gdb_7_5-branch:1.3.0.10
	gdb_7_4-branch:1.3.0.8
	gdb_7_3-branch:1.3.0.6
	gdb_7_1-branch:1.3.0.4
	gdb_7_0-branch:1.3.0.2
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.20
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.18
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.16
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.14
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.12
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb_6_4-branch:1.2.0.10
	gdb_6_4-2005-11-01-branchpoint:1.2
	gdb_6_1-2004-04-05-release:1.2
	gdb_6_1-branch:1.2.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	gdb_6_0-2003-10-04-release:1.2
	gdb_6_0-branch:1.2.0.6
	gdb_6_0-2003-06-23-branchpoint:1.2
	gdb_5_3-2002-12-12-release:1.2
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2008.07.22.20.11.35;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.08.22.34.46;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@        * tcl.m4: New file.
        * acinclude.m4: Include tcl.m4 instead of ../config/acinclude.m4
        * aclocal.m4: Regenerated.
        * configure.ac: Do not check for ITCL_SH.
        Use SC_PATH_TCLCONFIG, SC_PATH_TKCONFIG, SC_LOAD_TCLCONFIG, and
        SC_LOAD_TKCONFIG to find Tcl and Tk.
        Add some logic for when using in-tree Tcl/Tk.
        Change substitutes for TCL_BUILD_LIB_SPEC, TK_BUILD_LIB_SPEC, and
        TCLHDIR to accommodate using system-supplied Tcl and Tk.
        * configure: Regenerated.
        * Makefile.in: Regenerated.
        * library/Makefile.am: Replace ITCL_SH with TCLSH.
        Remove TCL_SHARED rules.
        (tclIndex): Update build rules.
        * library/Makefile.in: Regenerate.
        * library/balloon.tcl: Update for Itcl 3.2/3.3.
        * library/cframe.tcl: Likewise.
        * library/lframe.tcl: Likewise.
        * library/multibox.tcl: Likewise.
        * library/sendpr.tcl: Likewise.
        * library/ventry.tcl: Likewise.
        * library/wframe.tcl: Likewise.
        * src/Makefile.am (INCLUDES): Update.
        * src/Makefile.in: Regenerate.
        * src/paths.c (init_script): Accommodate builddir != srcdir.
@
text
@# multibox.tcl - Multi-column listbox.
# Copyright (C) 1997,2008 Red Hat, Inc.
# Written by Tom Tromey <tromey@@cygnus.com>.

# FIXME:
# * Should support sashes so user can repartition widget sizes.
# * Should support itemcget, itemconfigure.

itcl::class Multibox {
  # The selection mode.
  public variable selectmode browse {
    _apply_all configure [list -selectmode $selectmode]
  }

  # The height.
  public variable height 10 {
    _apply_all configure [list -height $height]
  }

  # This is a list of all the listbox widgets we've created.  Private
  # variable.
  protected variable _listboxen {}

  # Tricky: take the class bindings for the Listbox widget and turn
  # them into Multibox bindings that directly run our bindings.  That
  # way any binding on any of our children will automatically work the
  # right way.
  # FIXME: this loses if any Listbox bindings are added later.
  # To really fix we need Uhler's change to support megawidgets.
  foreach seq [bind Listbox] {
    regsub -all -- %W [bind Listbox $seq] {[winfo parent %W]} sub
    bind Multibox $seq $sub
  }

  constructor {} {
    # The standard widget-making trick.
    set class [$this info class]
    set hull [namespace tail $this]
    set old_name $this
    ::rename $this $this-tmp-
    ::frame $hull -class $class -relief flat -borderwidth 0
    ::rename $hull $old_name-win-
    ::rename $this $old_name

    scrollbar [namespace tail $this].vs -orient vertical
    bind [namespace tail $this].vs <Destroy> \
	[itcl::code itcl::delete object $this]

    grid rowconfigure  [namespace tail $this] 0 -weight 0
    grid rowconfigure  [namespace tail $this] 1 -weight 1
  }

  destructor {
    destroy $this
  }

  #
  # Our interface.
  #

  # Add a new column.
  method add {args} {
    # The first array set sets up the default values, and the second
    # overwrites with what the user wants.
    array set opts {-width 20 -fix 0 -title Zardoz}
    array set opts $args

    set num [llength $_listboxen]
    listbox [namespace tail $this].box$num -exportselection 0 -height $height \
      -selectmode $selectmode -width $opts(-width)
    if {$num == 0} then {
      [namespace tail $this].box$num configure -yscrollcommand [list [namespace tail $this].vs set]
      [namespace tail $this].vs configure -command [list $this yview]
    }
    label [namespace tail $this].label$num -text $opts(-title) -anchor w

    # No more class bindings.
    set tag_list [bindtags [namespace tail $this].box$num]
    set index [lsearch -exact $tag_list Listbox]
    bindtags [namespace tail $this].box$num [lreplace $tag_list $index $index Multibox]

    grid [namespace tail $this].label$num -row 0 -column $num -sticky new
    grid [namespace tail $this].box$num -row 1 -column $num -sticky news
    if {$opts(-fix)} then {
      grid columnconfigure  [namespace tail $this] $num -weight 0 \
	-minsize [winfo reqwidth [namespace tail $this].box$num]
    } else {
      grid columnconfigure  [namespace tail $this] $num -weight 1
    }

    lappend _listboxen [namespace tail $this].box$num

    # Move the scrollbar over.
    incr num
    grid [namespace tail $this].vs -row 1 -column $num -sticky nsw
    grid columnconfigure  [namespace tail $this] $num -weight 0
  }

  # FIXME: should handle automatically.
  method cget {option} {
    switch -- $option {
      -selectmode {
	return $selectmode
      }
      -height {
	return $height
      }

      default {
	error "option $option not supported"
      }
    }
  }

  # FIXME: this isn't ideal.  But we want to support adding bindings
  # at least.  A "bind" method might be better.
  method get_boxes {} {
    return $_listboxen
  }


  #
  # Methods that duplicate Listbox interface.
  #

  method activate index {
    _apply_all activate [list $index]
  }

  method bbox index {
    error "bbox method not supported"
  }

  method curselection {} {
    return [_apply_first curselection {}]
  }

  # FIXME: In itcl 1.5, can't have a method name "delete".  Sigh.
  method delete_hack {args} {
    _apply_all delete $args
  }

  # Return some contents.  We return each item as a list of the
  # columns.
  method get {first {last {}}} {
    if {$last == ""} then {
      set r {}
      foreach l $_listboxen {
	lappend r [$l get $first]
      }
      return $r
    } else {
      # We do things this way so that we don't have to specially
      # handle the index "end".
      foreach box $_listboxen {
	set seen(var-$box) [$box get $first $last]
      }

      # Tricky: we use the array indices as variable names and the
      # array values as values.  This lets us "easily" construct the
      # result lists.
      set r {}
      eval foreach [array get seen] {{
	set elt {}
	foreach box $_listboxen {
	  lappend elt [set var-$box]
	}
	lappend r $elt
      }}
      return $r
    }
  }

  method index index {
    return [_apply_first index [list $index]]
  }

  # Insert some items.  Each new item is a list of items for all
  # columns.
  method insert {index args} {
    if {[llength $args]} then {
      set seen(_) {}
      unset seen(_)

      foreach value $args {
	foreach columnvalue $value lname $_listboxen {
	  lappend seen($lname) $columnvalue
	}
      }

      foreach box $_listboxen {
	eval $box insert $index $seen($box)
      }
    }
  }

  method nearest y {
    return [_apply_first nearest [list $y]]
  }

  method scan {option args} {
    _apply_all scan $option $args
  }

  method see index {
    _apply_all see [list $index]
  }

  method selection {option args} {
    if {$option == "includes"} then {
      return [_apply_first selection [concat $option $args]]
    } else {
      return [_apply_all selection [concat $option $args]]
    }
  }

  method size {} {
    return [_apply_first size {}]
  }

  method xview args {
    error "xview method not supported"
  }

  method yview args {
    if {! [llength $args]} then {
      return [_apply_first yview {}]
    } else {
      return [_apply_all yview $args]
    }
  }


  #
  # Private methods.
  #

  # This applies METHOD to every listbox.
  method _apply_all {method argList} {
    foreach l $_listboxen {
      eval $l $method $argList
    }
  }

  # This applies METHOD to the first listbox, and returns the result.
  method _apply_first {method argList} {
    set l [lindex $_listboxen 0]
    return [eval $l $method $argList]
  }
}
@


1.2
log
@touched all files to ease next import
@
text
@d2 1
a2 1
# Copyright (C) 1997 Cygnus Solutions.
d9 1
a9 1
itcl_class Multibox {
d11 1
a11 1
  public selectmode browse {
d16 1
a16 1
  public height 10 {
d22 1
a22 1
  protected _listboxen {}
d35 1
a35 1
  constructor {config} {
d46 2
a47 1
    bind [namespace tail $this].vs <Destroy> [list $this delete]
a98 2
  method configure {config} {}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
