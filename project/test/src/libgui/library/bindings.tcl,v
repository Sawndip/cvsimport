head	1.2;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.2
	gdb_7_6-branch:1.2.0.32
	gdb_7_5-branch:1.2.0.30
	gdb_7_4-branch:1.2.0.28
	gdb_7_3-branch:1.2.0.26
	gdb_7_1-branch:1.2.0.24
	gdb_7_0-branch:1.2.0.22
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.20
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.18
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.16
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.14
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.12
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb_6_4-branch:1.2.0.10
	gdb_6_4-2005-11-01-branchpoint:1.2
	gdb_6_1-2004-04-05-release:1.2
	gdb_6_1-branch:1.2.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	gdb_6_0-2003-10-04-release:1.2
	gdb_6_0-branch:1.2.0.6
	gdb_6_0-2003-06-23-branchpoint:1.2
	gdb_5_3-2002-12-12-release:1.2
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.09.08.22.34.46;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@touched all files to ease next import
@
text
@# bindings.tcl - Procs to handle bindings.
# Copyright (C) 1997 Cygnus Solutions.
# Written by Tom Tromey <tromey@@cygnus.com>.

# Reorder the bindtags so that the tag appears before the widget.
# Tries to preserve other relative orderings as much as possible.  In
# particular, nothing changes if the widget is already after the tag.
proc bind_widget_after_tag {w tag} {
  set seen_tag 0
  set seen_widget 0
  set new_list {}
  foreach tag [bindtags $w] {
    if {$tag == $tag} then {
      lappend new_list $tag
      if {$seen_widget} then {
	lappend new_list $w
      }
      set seen_tag 1
    } elseif {$tag == $w} then {
      if {$seen_tag} then {
	lappend new_list $tag
      }
      set seen_widget 1
    } else {
      lappend new_list $tag
    }
  }

  if {! $seen_widget} then {
    lappend new_list $w
  }

  bindtags $w $new_list
}

# Reorder the bindtags so that the class appears before the widget.
# Tries to preserve other relative orderings as much as possible.  In
# particular, nothing changes if the widget is already after the
# class.
proc bind_widget_after_class {w} {
  bind_widget_after_tag $w [winfo class $w]
}

# Make the specified binding for KEY and empty bindings for common
# modifiers for KEY.  This can be used to ensure that a binding won't
# also be triggered by (eg) Alt-KEY.  This proc also makes the binding
# case-insensitive.  KEY is either the name of a key, or a key with a
# single modifier.
proc bind_plain_key {w key binding} {
  set l [split $key -]
  if {[llength $l] == 1} then {
    set mod {}
    set part $key
  } else {
    set mod "[lindex $l 0]-"
    set part [lindex $l 1]
  }

  set modifiers {Meta- Alt- Control-}

  set part_list [list $part]
  # If we just have a single letter, then we can't look for
  # Shift-PART; we must use the uppercase equivalent.
  if {[string length $part] == 1} then {
    # This is nasty: if we bind Control-L, we won't see the events we
    # want.  Instead we have to bind Shift-Control-L.  Actually, we
    # must also bind Control-L so that we'll see the event if the Caps
    # Lock key is down.
    if {$mod != ""} then {
      lappend part_list "Shift-[string toupper $part]"
    }
    lappend part_list [string toupper $part]
  } else {
    lappend modifiers Shift-
  }

  foreach part $part_list {
    # Bind the key itself (with modifier if required).
    bind $w <${mod}${part}> $binding

    # Ignore any modifiers other than the one we like.
    foreach onemod $modifiers {
      if {$onemod != $mod} then {
	bind $w <${onemod}${part}> {;}
      }
    }
  }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
