head	1.3;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.3
	gdb_7_6-branch:1.3.0.12
	gdb_7_5-branch:1.3.0.10
	gdb_7_4-branch:1.3.0.8
	gdb_7_3-branch:1.3.0.6
	gdb_7_1-branch:1.3.0.4
	gdb_7_0-branch:1.3.0.2
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.20
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.18
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.16
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.14
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.12
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb_6_4-branch:1.2.0.10
	gdb_6_4-2005-11-01-branchpoint:1.2
	gdb_6_1-2004-04-05-release:1.2
	gdb_6_1-branch:1.2.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	gdb_6_0-2003-10-04-release:1.2
	gdb_6_0-branch:1.2.0.6
	gdb_6_0-2003-06-23-branchpoint:1.2
	gdb_5_3-2002-12-12-release:1.2
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2008.07.22.20.11.35;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.08.22.34.46;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@        * tcl.m4: New file.
        * acinclude.m4: Include tcl.m4 instead of ../config/acinclude.m4
        * aclocal.m4: Regenerated.
        * configure.ac: Do not check for ITCL_SH.
        Use SC_PATH_TCLCONFIG, SC_PATH_TKCONFIG, SC_LOAD_TCLCONFIG, and
        SC_LOAD_TKCONFIG to find Tcl and Tk.
        Add some logic for when using in-tree Tcl/Tk.
        Change substitutes for TCL_BUILD_LIB_SPEC, TK_BUILD_LIB_SPEC, and
        TCLHDIR to accommodate using system-supplied Tcl and Tk.
        * configure: Regenerated.
        * Makefile.in: Regenerated.
        * library/Makefile.am: Replace ITCL_SH with TCLSH.
        Remove TCL_SHARED rules.
        (tclIndex): Update build rules.
        * library/Makefile.in: Regenerate.
        * library/balloon.tcl: Update for Itcl 3.2/3.3.
        * library/cframe.tcl: Likewise.
        * library/lframe.tcl: Likewise.
        * library/multibox.tcl: Likewise.
        * library/sendpr.tcl: Likewise.
        * library/ventry.tcl: Likewise.
        * library/wframe.tcl: Likewise.
        * src/Makefile.am (INCLUDES): Update.
        * src/Makefile.in: Regenerate.
        * src/paths.c (init_script): Accommodate builddir != srcdir.
@
text
@# cframe.tcl - Frame controlled by checkbutton.
# Copyright (C) 1997,2008 Red Hat, Inc
# Written by Tom Tromey <tromey@@cygnus.com>.

itcl::class Checkframe {
  inherit Widgetframe

  # The checkbutton text.
  public variable text {} {
    _set_option -text $text 0
  }

  # This holds the last value of -variable.  We use it to unset our
  # trace when the variable changes (or is deleted).  Private
  # variable.
  protected variable _saved_variable {}

  # The checkbutton variable.
  public variable {} {
    _var_changed
  }

  # The checkbutton -onvalue.
  public variable onvalue 1 {
    _set_option -onvalue $onvalue
  }

  # The checkbutton -offvalue.
  public variable offvalue 0 {
    _set_option -offvalue $offvalue
  }

  # The checkbutton -command.
  public variable command {} {
    _set_option -command $command 0
  }

  # This holds balloon help for the checkbutton.
  public variable help {} {
    if {[winfo exists [namespace tail $this].check]} then {
      balloon register [namespace tail $this].check $help
    }
  }

  # This holds a list of all widgets which should be immune to
  # enabling/disabling.  Private variable.
  protected variable _avoid {}

  constructor {} {
    checkbutton [namespace tail $this].check -text $text -variable $variable -padx 2 \
      -command $command -onvalue $onvalue -offvalue $offvalue
    balloon register [namespace tail $this].check $help
    _add [namespace tail $this].check
  }

  # Exempt a child from state changes.  Argument EXEMPT is true if the
  # child should be exempted, false if it should be re-enabled again.
  # Public method.
  method exempt {child {exempt 1}} {
    if {$exempt} then {
      if {[lsearch -exact $_avoid $child] == -1} then {
	lappend _avoid $child
      }
    } else {
      set _avoid [lremove $_avoid $child]
      _set_visibility $child
    }
  }

  # This is run when the state of the frame's children should change.
  # Private method.
  method _set_visibility {{child {}}} {
    if {$variable == ""} then {
      # No variable means everything is ok.  The behavior here is
      # arbitrary; this is a losing case.
      set state normal
    } else {
      upvar \#0 $variable the_var
      if {! [string compare $the_var $onvalue]} then {
	set state normal
      } else {
	set state disabled
      }
    }

    if {$child != ""} then {
      $child configure -state $state
    } else {
      # FIXME: we force our logical children to be actual children of
      # the frame.  Instead we should ask the geometry manager what's
      # going on.
      set avoid(_) {}
      unset avoid(_)
      foreach child $_avoid {
	set avoid($child) {}
      }
      foreach child [winfo children [namespace tail $this].iframe.frame] {
	if {! [info exists avoid($child)]} then {
	  catch {$child configure -state $state}
	}
      }
    }
  }

  # This is run to possibly update some option on the checkbutton.
  # Private method.
  method _set_option {option value {set_vis 1}} {
    if {[winfo exists [namespace tail $this].check]} then {
      [namespace tail $this].check configure $option $value
      if {$set_vis} then {
	_set_visibility
      }
    }
  }

  # This is run when our associated variable changes.  We use the
  # resulting information to set the state of our children.  Private
  # method.
  method _trace {name1 name2 op} {
    if {$op == "u"} then {
      # The variable got deleted.  So we stop looking at it.
      uplevel \#0 [list trace vdelete $_saved_variable uw [list $this _trace]]
      set _saved_variable {}
      set variable {}
    } else {
      # Got a write.
      _set_visibility
    }
  }

  # This is run when the -variable changes.  We remove our old trace
  # (if there was one) and add a new trace (if we need to).  Private
  # method.
  method _var_changed {} {
    if {$_saved_variable != ""} then {
      # Remove the old trace.
      uplevel \#0 [list trace vdelete $_saved_variable uw [list $this _trace]]
    }
    set _saved_variable $variable

    if {$variable != ""} then {
      # Set a new trace.
      uplevel \#0 [list trace variable $variable uw [list $this _trace]]
    }
  }
}
@


1.2
log
@touched all files to ease next import
@
text
@d2 1
a2 1
# Copyright (C) 1997 Cygnus Solutions.
d5 1
a5 1
itcl_class Checkframe {
d9 1
a9 1
  public text {} {
d16 1
a16 1
  protected _saved_variable {}
d24 1
a24 1
  public onvalue 1 {
d29 1
a29 1
  public offvalue 0 {
d34 1
a34 1
  public command {} {
d39 1
a39 1
  public help {} {
d47 1
a47 1
  protected _avoid {}
d49 1
a49 1
  constructor {config} {
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
