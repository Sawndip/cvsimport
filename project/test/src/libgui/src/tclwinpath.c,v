head	1.3;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.3
	gdb_7_6-branch:1.3.0.32
	gdb_7_5-branch:1.3.0.30
	gdb_7_4-branch:1.3.0.28
	gdb_7_3-branch:1.3.0.26
	gdb_7_1-branch:1.3.0.24
	gdb_7_0-branch:1.3.0.22
	arc-sim-20090309:1.3
	arc-insight_6_8-branch:1.3.0.20
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.18
	insight_6_8-branchpoint:1.3
	gdb_6_8-branch:1.3.0.16
	insight_6_6-20070208-release:1.3
	gdb_6_6-branch:1.3.0.14
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb_6_5-branch:1.3.0.12
	gdb_6_5-2006-05-14-branchpoint:1.3
	gdb_6_4-branch:1.3.0.10
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb_6_1-2004-04-05-release:1.3
	gdb_6_1-branch:1.3.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	gdb_6_0-2003-10-04-release:1.3
	gdb_6_0-branch:1.3.0.6
	gdb_6_0-2003-06-23-branchpoint:1.3
	gdb_5_3-2002-12-12-release:1.3
	gdb_5_3-branch:1.3.0.4
	gdb_5_3-2002-09-04-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2001.09.08.22.34.47;	author irox;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.03.23.01.55;	author mdejong;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.08.21.55.17;	author irox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@touched all files to ease next import
@
text
@/* tclwinpath.c -- Tcl routines to convert paths under cygwin32.
   Copyright (C) 1997 Cygnus Solutions.
   Written by Ian Lance Taylor <ian@@cygnus.com>.

   This file contains Tcl interface routines to do path translation
   when using cygwin32.  */

#ifdef __CYGWIN32__

#include <windows.h>

#include <tcl.h>

#include "guitcl.h"
#include "subcommand.h"

/* The path conversion routines are not declared anywhere that I know
   of.  */

extern void cygwin32_conv_to_win32_path (const char *, char *);
extern void cygwin32_conv_to_full_win32_path (const char *, char *);
extern void cygwin32_conv_to_posix_path (const char *, char *);
extern void cygwin32_conv_to_full_posix_path (const char *, char *);
extern int cygwin32_posix_path_list_p (const char *);
extern int cygwin32_win32_to_posix_path_list_buf_size (const char *);
extern int cygwin32_posix_to_win32_path_list_buf_size (const char *);
extern void cygwin32_win32_to_posix_path_list (char *, char *);
extern void cygwin32_posix_to_win32_path_list (char *, char *);
extern void cygwin32_split_path (const char *, char *, char *);

/* This file declares a Tcl command with subcommands.

   Each of the following subcommands returns a string based on the
   PATH argument.  If PATH is already in the desired form, these
   commands just return it unchanged.

   ide_cygwin_path to_win32 PATH
       Return PATH converted to a win32 pathname.

   ide_cygwin_path to_full_win32 PATH
       Return PATH converted to an absolute win32 pathname.

   ide_cygwin_path to_posix PATH
       Return PATH converted to a POSIX pathname.

   ide_cygwin_path to_full_posix PATH
       Return PATH converted to an absolute POSIX pathname.

   The following subcommand returns a boolean value.

   ide_cygwin_path posix_path_list_p PATHLIST
       Return whether PATHLIST is a POSIX style path list.

   The following subcommands return strings.

   ide_cygwin_path posix_to_win32_path_list PATHLIST
       Return PATHLIST converted from POSIX style to win32 style.

   ide_cygwin_path win32_to_posix_path_list PATHLIST
       Return PATHLIST converted from win32 style to POSIX style.

   */

/* Handle ide_cygwin_path to_win32.  */

static int
path_to_win32 (ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
  char buf[MAX_PATH];

  cygwin32_conv_to_win32_path (argv[2], buf);
  Tcl_SetResult (interp, buf, TCL_VOLATILE);
  return TCL_OK;
}

/* Handle ide_cygwin_path to_full_win32.  */

static int
path_to_full_win32 (ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
  char buf[MAX_PATH];

  cygwin32_conv_to_full_win32_path (argv[2], buf);
  Tcl_SetResult (interp, buf, TCL_VOLATILE);
  return TCL_OK;
}

/* Handle ide_cygwin_path to_posix.  */

static int
path_to_posix (ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
  char buf[MAX_PATH];

  cygwin32_conv_to_posix_path (argv[2], buf);
  Tcl_SetResult (interp, buf, TCL_VOLATILE);
  return TCL_OK;
}

/* Handle ide_cygwin_path to_full_posix.  */

static int
path_to_full_posix (ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
  char buf[MAX_PATH];

  cygwin32_conv_to_full_posix_path (argv[2], buf);
  Tcl_SetResult (interp, buf, TCL_VOLATILE);
  return TCL_OK;
}

/* Handle ide_cygwin_path posix_path_list_p.  */

static int
path_posix_path_list_p (ClientData cd, Tcl_Interp *interp, int argc,
			char **argv)
{
  int ret;

  ret = cygwin32_posix_path_list_p (argv[2]);
  Tcl_ResetResult (interp);
  Tcl_SetBooleanObj (Tcl_GetObjResult (interp), ret);
  return TCL_OK;
}

/* Handle ide_cygwin_path posix_to_win32_path_list.  */

static int
path_posix_to_win32_path_list (ClientData cd, Tcl_Interp *interp, int argc,
			       char **argv)
{
  int size;
  char *buf;

  size = cygwin32_posix_to_win32_path_list_buf_size (argv[2]);
  buf = ckalloc (size);
  cygwin32_posix_to_win32_path_list (argv[2], buf);
  Tcl_SetResult (interp, buf, TCL_DYNAMIC);
  return TCL_OK;
}

/* Handle ide_cygwin_path win32_to_posix_path_list.  */

static int
path_win32_to_posix_path_list (ClientData cd, Tcl_Interp *interp, int argc,
			       char **argv)
{
  int size;
  char *buf;

  size = cygwin32_win32_to_posix_path_list_buf_size (argv[2]);
  buf = ckalloc (size);
  cygwin32_win32_to_posix_path_list (argv[2], buf);
  Tcl_SetResult (interp, buf, TCL_DYNAMIC);
  return TCL_OK;
}

/* The subcommand table.  */

static const struct ide_subcommand_table path_commands[] =
{
  { "to_win32",		path_to_win32,		3, 3 },
  { "to_full_win32",	path_to_full_win32,	3, 3 },
  { "to_posix",		path_to_posix,		3, 3 },
  { "to_full_posix",	path_to_full_posix,	3, 3 },
  { "posix_path_list_p", path_posix_path_list_p, 3, 3 },
  { "posix_to_win32_path_list", path_posix_to_win32_path_list, 3, 3 },
  { "win32_to_posix_path_list", path_win32_to_posix_path_list, 3, 3 },
  { NULL, NULL, 0, 0}
};

/* Create the ide_cygwin_path command.  */

int
ide_create_cygwin_path_command (Tcl_Interp *interp)
{
  return ide_create_command_with_subcommands (interp, "ide_cygwin_path",
					      path_commands, NULL, NULL);
}

#endif /* __CYGWIN32__ */
@


1.2
log
@	* src/subcommand.c:
	* src/tclgetdir.c:
	* src/tclhelp.c:
	* src/tclmain.c:
	* src/tclmsgbox.c:
	* src/tclsizebox.c:
	* src/tclwinmode.c:
	* src/tclwinpath.c:
	* src/tclwinprint.c:
	* src/tkWinPrintCanvas.c:
	* src/tkWinPrintText.c:
	Use ckalloc/ckfree instead of Tcl_Alloc/Tcl_Free
	or malloc/free so that allocations will
	be marked with file positions when Tcl mem
	debug is activated.
@
text
@@


1.1
log
@Initial revision
@
text
@d136 1
a136 1
  buf = Tcl_Alloc (size);
d152 1
a152 1
  buf = Tcl_Alloc (size);
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@libgui import for Tcl/Tk8.3 upgrade
@
text
@d136 1
a136 1
  buf = ckalloc (size);
d152 1
a152 1
  buf = ckalloc (size);
@

