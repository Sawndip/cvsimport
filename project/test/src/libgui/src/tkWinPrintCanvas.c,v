head	1.5;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.4
	gdb_7_5-branch:1.5.0.2
	gdb_7_4-branch:1.4.0.28
	gdb_7_3-branch:1.4.0.26
	gdb_7_1-branch:1.4.0.24
	gdb_7_0-branch:1.4.0.22
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.20
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.18
	insight_6_8-branchpoint:1.4
	gdb_6_8-branch:1.4.0.16
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.14
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.12
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.10
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.6
	gdb_6_0-2003-06-23-branchpoint:1.4
	gdb_5_3-2002-12-12-release:1.4
	gdb_5_3-branch:1.4.0.4
	gdb_5_3-2002-09-04-branchpoint:1.4
	gdb_5_2_1-2002-07-23-release:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2012.08.08.13.34.56;	author rosch;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.08.22.34.48;	author irox;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.23.01.55;	author mdejong;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.03.00.25.59;	author mdejong;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.08.21.55.18;	author irox;	state Exp;
branches;
next	;


desc
@@


1.5
log
@   * src/subcommand.c,src/subcommand.h
   (subcommand_implementation,ide_create_command_with_subcommands):
   Make some params const to match tcl/tk changes.
   * src/tclcursor.c (get_cursor_size,get_cursor_position): Ditto.
   * src/tclmsgbox.c: Include windows.h early.
   (msgbox_init,msgbox_exit): Take care about encodings to windows functions.
   (msgbox_thread): Use correct api call here.
   (msgbox_internal,msgbox): Make CONST84 where needed.
   * src/tclwinmode.c (seterrormode_command): Ditto.
   * src/tclshellexe.c (shell_execute_command): Ditto. Plus correct cast return
   value to shut up 64bit gcc.
   * src/tclwinfont.c (win_choose_font): Make CONST84 where needed and
   use dedicated windows api.
   * src/tclwinprint.c (winprint_page_setup_command): Make const/CONST84 where needed.
   (winprint_print_text_options,winprint_print_text_invoke,winprint_print_command): Ditto.
   (winprint_print_text_invoke,): Ditto.
   (winprint_start,winprint_print_commandwinprint_abort_command): use dedicated windows structs/api.
   * src/tkTable.c: Obsolete old dprint stuff.
   (StringifyObjects,Tk_TableObjCmd,TableWidgetObjCmd,TableConfigure,TableFetchSelection): adjust const.
   (selCmdNames,commandNames,updateOpts): make const.
   * src/tkTable.h: Adjust windows includes. include stdint.h. define CONST86 if missing. Deine
   PTR2INT/INT2PTR taken from tcl if missing. Make some functions const.
   * src/tkTableCmds.c: Make bdCmdNames and clearnames CONST84.
   * src/tkTableEdit.c: Make modCmdNamesand rcCmdNames CONST84.
   * src/tkTableTag.c: Make tagCmdNames CONST84.
   (TableTagGetEntry): Make param argcv CONST84.
   (TableInitTags): Make some internal strings CONST84.
   (FindRowColTag): Ditto.
   (Table_TagCmd): Ditto.
   * src/tkTableUtil.c (TableOptionBdSet):Ditto.
   (TableOptionBdGet): Make retval CONST86. Fix ptr/int arithmetics.
   (Cmd_OptionSet): Make param value CONST84.
   (Cmd_OptionGet): Make retval CONST86.
   * src/tkTableWin.c (StickyPrintProc): Ditto. Make some internal strings CONST84.
   (StickyParseProc): Make param value CONST84.
   * src/tkWarpPointer.c: Include windows.h ahead of tk.h.
   (WarpPointer): Remove unused var.
   * src/tkWinPrintCanvas.c (PrintCanvasCmd): use dedicated windows structs/api.
   Fix casting.
   * src/tkWinPrintText.c (PrintTextCmd): Add #if case for compiling against tcl 8.5 and up.
   use dedicated windows structs/api.
   (ide_delete_print_text_command): Delete unused static function.
   (DisplayDLineToDrawable): Add #if case for compiling against tcl 8.5 and up. Fix casting.
@
text
@
#ifdef _WIN32

#include <windows.h>

#include "tkWinInt.h"
#include "tkCanvas.h"

#include <tcl.h>
#include <tk.h>



/*
 *--------------------------------------------------------------
 * 
 * PrintCanvasCmd -- 
 *      When invoked with the correct args this will bring up a
 *      standard Windows print dialog box and then print the
 *	contence of the canvas.
 *
 * Results:
 *      Standard Tcl result.
 * 
 *--------------------------------------------------------------
 */


int
PrintCanvasCmd(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
{
    PRINTDLG pd;
    Tcl_CmdInfo canvCmd;
    TkCanvas *canvasPtr;
    TkWinDrawable *PrinterDrawable;
    Tk_Window tkwin;/* = canvasPtr->tkwin;*/
    Tk_Item *itemPtr;
    Pixmap pixmap;
    HDC hDCpixmap;
    TkWinDCState pixmapState;
    DEVMODE dm;
    float Ptr_pixX,Ptr_pixY,Ptr_mmX,Ptr_mmY;
    float canv_pixX,canv_pixY,canv_mmX,canv_mmY;

    int widget_X_size = 0;
    int widget_Y_size = 0;
    int page_Y_size, page_X_size;
    int tiles_wide,tiles_high;
    int tile_y, tile_x;
    int screenX1, screenX2, screenY1, screenY2, width, height;
    DOCINFOA *lpdi = (DOCINFOA *) ckalloc(sizeof(DOCINFOA));

    if (argc < 2) {
	Tcl_AppendResult(interp, "wrong # args: should be \"",
			 argv[0], " canvas \"",
			 (char *) NULL);
	goto error;
    }

    /* The second arg is the canvas widget */
    if (!Tcl_GetCommandInfo(interp, argv[1], &canvCmd)) {
	Tcl_AppendResult(interp, "couldn't get canvas information for \"",
			 argv[1], "\"", (char *) NULL);
	goto error;
    }
    
    memset(&dm,0,sizeof(DEVMODE));
    dm.dmSize = sizeof(DEVMODE);
    dm.dmScale = 500;

    memset(lpdi,0,sizeof(DOCINFO));
    lpdi->cbSize=sizeof(DOCINFO);
    lpdi->lpszDocName= (LPCSTR) ckalloc(255);
    strcpy((char *)lpdi->lpszDocName,"SN - Printing");
    lpdi->lpszOutput=NULL;

    canvasPtr = (TkCanvas *)(canvCmd.clientData);
  tkwin = canvasPtr->tkwin;
    memset(&pd,0,sizeof( PRINTDLG ));
    pd.lStructSize  = sizeof( PRINTDLG );
    pd.hwndOwner    = NULL;
    pd.hDevMode	    = NULL;
    pd.hDevNames    = NULL;
    /* pd.hDC = */
    pd.Flags	    = PD_RETURNDC;

    /* Get printer details. */
    if (!PrintDlg(&pd)) {
	goto done;
    }

    PrinterDrawable = (TkWinDrawable *) ckalloc(sizeof(TkWinDrawable));
    PrinterDrawable->type = TWD_WINDC;
    PrinterDrawable->winDC.hdc = pd.hDC;

    Ptr_pixX=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,HORZRES);
    Ptr_pixY=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,VERTRES);
    Ptr_mmX=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,HORZSIZE);
    Ptr_mmY=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,VERTSIZE);
  
        screenX1=0; screenY1=0;
    screenX2=canvasPtr->width; screenY2=canvasPtr->height;
	canvasPtr->drawableXOrigin = screenX1 - 30;
	canvasPtr->drawableYOrigin = screenY1 - 30;
	pixmap = Tk_GetPixmap(Tk_Display(tkwin), Tk_WindowId(tkwin),
	    (screenX2 + 30 - canvasPtr->drawableXOrigin),
	    (screenY2 + 30 - canvasPtr->drawableYOrigin),
	    Tk_Depth(tkwin));
 	width = screenX2 - screenX1;
	height = screenY2 - screenY1;

    hDCpixmap = TkWinGetDrawableDC(Tk_Display(tkwin), pixmap, &pixmapState);
    canv_pixX=(float)GetDeviceCaps(hDCpixmap,HORZRES);
    canv_pixY=(float)GetDeviceCaps(hDCpixmap,VERTRES);
    canv_mmX=(float)GetDeviceCaps(hDCpixmap,HORZSIZE);
    canv_mmY=(float)GetDeviceCaps(hDCpixmap,VERTSIZE);

    
    SetMapMode(PrinterDrawable->winDC.hdc,MM_ISOTROPIC);
    SetWindowExtEx(PrinterDrawable->winDC.hdc,(int)((float)canv_pixX),(int)((float)canv_pixY),NULL);
    SetViewportExtEx(PrinterDrawable->winDC.hdc,(int)((float)Ptr_pixX),
			    (int)((float)Ptr_pixY),
			    NULL);

    /* max X and Y for canvas  */
    for (itemPtr = canvasPtr->firstItemPtr; itemPtr != NULL;
	    itemPtr = itemPtr->nextPtr) {
	if (itemPtr->x1 > widget_X_size) {
	    widget_X_size = itemPtr->x1;
	}
	if (itemPtr->y1 > widget_Y_size) {
	    widget_Y_size = itemPtr->y1;
	}
    }

    /* Calculate the number of tiles high */
    page_Y_size = GetDeviceCaps(hDCpixmap,LOGPIXELSY)*(Ptr_mmY/22);
    page_X_size = GetDeviceCaps(hDCpixmap,LOGPIXELSX)*(Ptr_mmX/22);

    tiles_high = ( widget_Y_size / page_Y_size ); /* start at zero */
    tiles_wide = ( widget_X_size / page_X_size ); /* start at zero */

    StartDocA(pd.hDC,lpdi);

    for (tile_x = 0; tile_x <= tiles_wide;tile_x++) {
    for (tile_y = 0; tile_y <= tiles_high;tile_y++) {
	SetViewportOrgEx(pd.hDC,-(tile_x*Ptr_pixX),-(tile_y*Ptr_pixY),NULL);
        StartPage(pd.hDC);

 	for (itemPtr = canvasPtr->firstItemPtr; itemPtr != NULL;
		itemPtr = itemPtr->nextPtr) {
	    (*itemPtr->typePtr->displayProc)((Tk_Canvas) canvasPtr, itemPtr,
		    canvasPtr->display, (Drawable) PrinterDrawable/*pixmap*/, screenX1, screenY1, width,
		    height);
	}
    
    EndPage(pd.hDC);
    }
    }
    EndDoc(pd.hDC);

done:
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
    return TCL_OK;
error:
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
    return TCL_ERROR;
}



static void 
ide_delete_print_canvas_command(ClientData clientData)
{
  /* destructor code here.*/
}

int
ide_create_printcanvas_command (Tcl_Interp *interp)
{

  /* initialization code here */
  
        if (Tcl_CreateCommand(interp, "ide_print_canvas", PrintCanvasCmd, 
			  NULL, ide_delete_print_canvas_command) == NULL)
	return TCL_ERROR;

	    return TCL_OK;
}

#endif /* _WIN32 */
@


1.4
log
@touched all files to ease next import
@
text
@d55 1
a55 1
    DOCINFO *lpdi = (DOCINFO *) ckalloc(sizeof(DOCINFO));
d78 1
a78 1
    sprintf((char*)lpdi->lpszDocName,"SN - Printing\0");
d147 1
a147 1
    StartDoc(pd.hDC,lpdi);
d157 1
a157 1
		    canvasPtr->display, (unsigned long) PrinterDrawable/*pixmap*/, screenX1, screenY1, width,
@


1.3
log
@	* src/subcommand.c:
	* src/tclgetdir.c:
	* src/tclhelp.c:
	* src/tclmain.c:
	* src/tclmsgbox.c:
	* src/tclsizebox.c:
	* src/tclwinmode.c:
	* src/tclwinpath.c:
	* src/tclwinprint.c:
	* src/tkWinPrintCanvas.c:
	* src/tkWinPrintText.c:
	Use ckalloc/ckfree instead of Tcl_Alloc/Tcl_Free
	or malloc/free so that allocations will
	be marked with file positions when Tcl mem
	debug is activated.
@
text
@@


1.2
log
@	* src/tkWinPrintCanvas.c (PrintCanvasCmd):
	* src/tkWinPrintText.c (PrintTextCmd): Plug
	memory leak by calling free on memory allocated
	in PrintCanvasCmd and PrintTextCmd method. Make
	sure error cases branch to the cleanup code at
	the end of the method instead of just returning.
@
text
@d55 1
a55 1
    DOCINFO *lpdi = malloc(sizeof(DOCINFO));
d77 1
a77 1
    lpdi->lpszDocName=malloc(255);
d167 2
a168 2
    free ((char*) lpdi->lpszDocName);
    free (lpdi);
d171 2
a172 2
    free ((char*) lpdi->lpszDocName);
    free (lpdi);
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
	return TCL_ERROR;
d68 1
a68 1
	return TCL_ERROR;
d167 2
d170 3
a172 1
 error:
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@libgui import for Tcl/Tk8.3 upgrade
@
text
@d55 1
a55 1
    DOCINFO *lpdi = (DOCINFO *) ckalloc(sizeof(DOCINFO));
d61 1
a61 1
	goto error;
d68 1
a68 1
	goto error;
d77 1
a77 1
    lpdi->lpszDocName= (LPCSTR) ckalloc(255);
a166 2
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
d168 1
a168 3
error:
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
@

