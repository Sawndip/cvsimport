head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.4
	gdb_7_5-branch:1.6.0.2
	gdb_7_4-branch:1.5.0.28
	gdb_7_3-branch:1.5.0.26
	gdb_7_1-branch:1.5.0.24
	gdb_7_0-branch:1.5.0.22
	arc-sim-20090309:1.5
	arc-insight_6_8-branch:1.5.0.20
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.18
	insight_6_8-branchpoint:1.5
	gdb_6_8-branch:1.5.0.16
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.14
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.12
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb_6_4-branch:1.5.0.10
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.6
	gdb_6_0-2003-06-23-branchpoint:1.5
	gdb_5_3-2002-12-12-release:1.5
	gdb_5_3-branch:1.5.0.4
	gdb_5_3-2002-09-04-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.5
	gdb_5_2-2002-04-29-release:1.5
	gdb_5_2-branch:1.5.0.2
	gdb_5_2-2002-03-03-branchpoint:1.5
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2012.08.08.13.34.56;	author rosch;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.08.22.34.48;	author irox;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.03.23.01.55;	author mdejong;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.03.00.25.59;	author mdejong;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.02.21.57.32;	author mdejong;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.08.21.55.18;	author irox;	state Exp;
branches;
next	;


desc
@@


1.6
log
@   * src/subcommand.c,src/subcommand.h
   (subcommand_implementation,ide_create_command_with_subcommands):
   Make some params const to match tcl/tk changes.
   * src/tclcursor.c (get_cursor_size,get_cursor_position): Ditto.
   * src/tclmsgbox.c: Include windows.h early.
   (msgbox_init,msgbox_exit): Take care about encodings to windows functions.
   (msgbox_thread): Use correct api call here.
   (msgbox_internal,msgbox): Make CONST84 where needed.
   * src/tclwinmode.c (seterrormode_command): Ditto.
   * src/tclshellexe.c (shell_execute_command): Ditto. Plus correct cast return
   value to shut up 64bit gcc.
   * src/tclwinfont.c (win_choose_font): Make CONST84 where needed and
   use dedicated windows api.
   * src/tclwinprint.c (winprint_page_setup_command): Make const/CONST84 where needed.
   (winprint_print_text_options,winprint_print_text_invoke,winprint_print_command): Ditto.
   (winprint_print_text_invoke,): Ditto.
   (winprint_start,winprint_print_commandwinprint_abort_command): use dedicated windows structs/api.
   * src/tkTable.c: Obsolete old dprint stuff.
   (StringifyObjects,Tk_TableObjCmd,TableWidgetObjCmd,TableConfigure,TableFetchSelection): adjust const.
   (selCmdNames,commandNames,updateOpts): make const.
   * src/tkTable.h: Adjust windows includes. include stdint.h. define CONST86 if missing. Deine
   PTR2INT/INT2PTR taken from tcl if missing. Make some functions const.
   * src/tkTableCmds.c: Make bdCmdNames and clearnames CONST84.
   * src/tkTableEdit.c: Make modCmdNamesand rcCmdNames CONST84.
   * src/tkTableTag.c: Make tagCmdNames CONST84.
   (TableTagGetEntry): Make param argcv CONST84.
   (TableInitTags): Make some internal strings CONST84.
   (FindRowColTag): Ditto.
   (Table_TagCmd): Ditto.
   * src/tkTableUtil.c (TableOptionBdSet):Ditto.
   (TableOptionBdGet): Make retval CONST86. Fix ptr/int arithmetics.
   (Cmd_OptionSet): Make param value CONST84.
   (Cmd_OptionGet): Make retval CONST86.
   * src/tkTableWin.c (StickyPrintProc): Ditto. Make some internal strings CONST84.
   (StickyParseProc): Make param value CONST84.
   * src/tkWarpPointer.c: Include windows.h ahead of tk.h.
   (WarpPointer): Remove unused var.
   * src/tkWinPrintCanvas.c (PrintCanvasCmd): use dedicated windows structs/api.
   Fix casting.
   * src/tkWinPrintText.c (PrintTextCmd): Add #if case for compiling against tcl 8.5 and up.
   use dedicated windows structs/api.
   (ide_delete_print_text_command): Delete unused static function.
   (DisplayDLineToDrawable): Add #if case for compiling against tcl 8.5 and up. Fix casting.
@
text
@
#ifdef _WIN32

#include <windows.h>

#include "tkInt.h"
#include "tkWinInt.h"
#include "tkPort.h"
#include "tkText.h"

#define MAXINT 32000000

#define HAS_3D_BORDER	1
#define NEW_LAYOUT	2
#define TOP_LINE	4
#define BOTTOM_LINE	8


#define DINFO_OUT_OF_DATE	1
#define REDRAW_PENDING		2
#define REDRAW_BORDERS		4
#define REPICK_NEEDED		8



/*
 * The following structure describes one line of the display, which may
 * be either part or all of one line of the text.
 */

typedef struct DLine {
    TkTextIndex index;		/* Identifies first character in text
				 * that is displayed on this line. */
    int count;			/* Number of characters accounted for by this
				 * display line, including a trailing space
				 * or newline that isn't actually displayed. */
    int y;			/* Y-position at which line is supposed to
				 * be drawn (topmost pixel of rectangular
				 * area occupied by line). */
    int oldY;			/* Y-position at which line currently
				 * appears on display.  -1 means line isn't
				 * currently visible on display and must be
				 * redrawn.  This is used to move lines by
				 * scrolling rather than re-drawing. */
    int height;			/* Height of line, in pixels. */
    int baseline;		/* Offset of text baseline from y, in
				 * pixels. */
    int spaceAbove;		/* How much extra space was added to the
				 * top of the line because of spacing
				 * options.  This is included in height
				 * and baseline. */
    int spaceBelow;		/* How much extra space was added to the
				 * bottom of the line because of spacing
				 * options.  This is included in height. */
    int length;			/* Total length of line, in pixels. */
    TkTextDispChunk *chunkPtr;	/* Pointer to first chunk in list of all
				 * of those that are displayed on this
				 * line of the screen. */
    struct DLine *nextPtr;	/* Next in list of all display lines for
				 * this window.   The list is sorted in
				 * order from top to bottom.  Note:  the
				 * next DLine doesn't always correspond
				 * to the next line of text:  (a) can have
				 * multiple DLines for one text line, and
				 * (b) can have gaps where DLine's have been
				 * deleted because they're out of date. */
    int flags;			/* Various flag bits:  see below for values. */
} DLine;


typedef struct TextDInfo {
    Tcl_HashTable styleTable;	/* Hash table that maps from StyleValues
				 * to TextStyles for this widget. */
    DLine *dLinePtr;		/* First in list of all display lines for
				 * this widget, in order from top to bottom. */
    GC copyGC;			/* Graphics context for copying from off-
				 * screen pixmaps onto screen. */
    GC scrollGC;		/* Graphics context for copying from one place
				 * in the window to another (scrolling):
				 * differs from copyGC in that we need to get
				 * GraphicsExpose events. */
    int x;			/* First x-coordinate that may be used for
				 * actually displaying line information.
				 * Leaves space for border, etc. */
    int y;			/* First y-coordinate that may be used for
				 * actually displaying line information.
				 * Leaves space for border, etc. */
    int maxX;			/* First x-coordinate to right of available
				 * space for displaying lines. */
    int maxY;			/* First y-coordinate below available
				 * space for displaying lines. */
    int topOfEof;		/* Top-most pixel (lowest y-value) that has
				 * been drawn in the appropriate fashion for
				 * the portion of the window after the last
				 * line of the text.  This field is used to
				 * figure out when to redraw part or all of
				 * the eof field. */

    /*
     * Information used for scrolling:
     */

    int newCharOffset;		/* Desired x scroll position, measured as the
				 * number of average-size characters off-screen
				 * to the left for a line with no left
				 * margin. */
    int curPixelOffset;		/* Actual x scroll position, measured as the
				 * number of pixels off-screen to the left. */
    int maxLength;		/* Length in pixels of longest line that's
				 * visible in window (length may exceed window
				 * size).  If there's no wrapping, this will
				 * be zero. */
    double xScrollFirst, xScrollLast;
				/* Most recent values reported to horizontal
				 * scrollbar;  used to eliminate unnecessary
				 * reports. */
    double yScrollFirst, yScrollLast;
				/* Most recent values reported to vertical
				 * scrollbar;  used to eliminate unnecessary
				 * reports. */

    /*
     * The following information is used to implement scanning:
     */

    int scanMarkChar;		/* Character that was at the left edge of
				 * the window when the scan started. */
    int scanMarkX;		/* X-position of mouse at time scan started. */
    int scanTotalScroll;	/* Total scrolling (in screen lines) that has
				 * occurred since scanMarkY was set. */
    int scanMarkY;		/* Y-position of mouse at time scan started. */

    /*
     * Miscellaneous information:
     */

    int dLinesInvalidated;	/* This value is set to 1 whenever something
				 * happens that invalidates information in
				 * DLine structures;  if a redisplay
				 * is in progress, it will see this and
				 * abort the redisplay.  This is needed
				 * because, for example, an embedded window
				 * could change its size when it is first
				 * displayed, invalidating the DLine that
				 * is currently being displayed.  If redisplay
				 * continues, it will use freed memory and
				 * could dump core. */
    int flags;			/* Various flag values:  see below for
				 * definitions. */
} TextDInfo;

/*
 * The following structure describes how to display a range of characters.
 * The information is generated by scanning all of the tags associated
 * with the characters and combining that with default information for
 * the overall widget.  These structures form the hash keys for
 * dInfoPtr->styleTable.
 */

typedef struct StyleValues {
    Tk_3DBorder border;		/* Used for drawing background under text.
				 * NULL means use widget background. */
    int borderWidth;		/* Width of 3-D border for background. */
    int relief;			/* 3-D relief for background. */
    Pixmap bgStipple;		/* Stipple bitmap for background.  None
				 * means draw solid. */
    XColor *fgColor;		/* Foreground color for text. */
    Tk_Font tkfont;		/* Font for displaying text. */
    Pixmap fgStipple;		/* Stipple bitmap for text and other
				 * foreground stuff.   None means draw
				 * solid.*/
    int justify;		/* Justification style for text. */
    int lMargin1;		/* Left margin, in pixels, for first display
				 * line of each text line. */
    int lMargin2;		/* Left margin, in pixels, for second and
				 * later display lines of each text line. */
    int offset;			/* Offset in pixels of baseline, relative to
				 * baseline of line. */
    int overstrike;		/* Non-zero means draw overstrike through
				 * text. */
    int rMargin;		/* Right margin, in pixels. */
    int spacing1;		/* Spacing above first dline in text line. */
    int spacing2;		/* Spacing between lines of dline. */
    int spacing3;		/* Spacing below last dline in text line. */
    TkTextTabArray *tabArrayPtr;/* Locations and types of tab stops (may
				 * be NULL). */
    int underline;		/* Non-zero means draw underline underneath
				 * text. */
    Tk_Uid wrapMode;		/* How to handle wrap-around for this tag.
				 * One of tkTextCharUid, tkTextNoneUid,
				 * or tkTextWordUid. */
} StyleValues;

/*
 * The following structure extends the StyleValues structure above with
 * graphics contexts used to actually draw the characters.  The entries
 * in dInfoPtr->styleTable point to structures of this type.
 */

typedef struct TextStyle {
    int refCount;		/* Number of times this structure is
				 * referenced in Chunks. */
    GC bgGC;			/* Graphics context for background.  None
				 * means use widget background. */
    GC fgGC;			/* Graphics context for foreground. */
    StyleValues *sValuePtr;	/* Raw information from which GCs were
				 * derived. */
    Tcl_HashEntry *hPtr;	/* Pointer to entry in styleTable.  Used
				 * to delete entry. */
} TextStyle;




static void
DisplayDLineToDrawable(TkText *textPtr, DLine *dlPtr, DLine *prevPtr, TkWinDrawable *drawable);

/*
 *--------------------------------------------------------------
 * 
 * PrintTextCmd -- 
 *      When invoked with the correct args this will bring up a
 *      standard Windows print dialog box and then print the
 *	contence of the text wiget.
 *
 * Results:
 *      Standard Tcl result.
 * 
 *--------------------------------------------------------------
 */

static int
PrintTextCmd(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
{
    PRINTDLG pd; 
    Tcl_CmdInfo textCmd;
    TkText *textPtr;
    TextDInfo *dInfoPtr;
    DLine *dlPtr;
    TkWinDrawable *PrinterDrawable;
    Tk_Window tkwin;
    int maxHeight;
    DLine *prevPtr;
    Pixmap pixmap;

    DOCINFOA *lpdi = (DOCINFOA *) ckalloc(sizeof(DOCINFOA));
    TkTextIndex first, last;
    int numLines;
    HDC hDCpixmap;
    TkWinDCState pixmapState;
    DEVMODE dm;
    float Ptr_pixX,Ptr_pixY,Ptr_mmX,Ptr_mmY;
    float canv_pixX,canv_pixY,canv_mmX,canv_mmY;
    int page_Y_size,tiles_high,tile_y;
    int screenX1, screenX2, screenY1, screenY2, width, height;

    int saved_x;
    int saved_y;
    int saved_w;
    int saved_h;
    int saved_maxX;
    int saved_maxY;
    int saved_eof;


    if (argc < 2) {
	Tcl_AppendResult(interp, "wrong # args: should be \"",
			 argv[0], " text \"",
			 (char *) NULL);
	goto error;
    }

    /*
     * The second arg is the canvas widget.
     */
    if (!Tcl_GetCommandInfo(interp, argv[1], &textCmd)) {
	Tcl_AppendResult(interp, "couldn't get text information for \"",
			 argv[1], "\"", (char *) NULL);
	goto error;
    }
    
    memset(&dm,0,sizeof(DEVMODE));
    dm.dmSize = sizeof(DEVMODE);
    dm.dmScale = 500;

    memset(lpdi,0,sizeof(DOCINFO));
    lpdi->cbSize=sizeof(DOCINFO);
    lpdi->lpszDocName = (LPCSTR) ckalloc(255);
    strcpy((char*)lpdi->lpszDocName,"SN - Printing\0");
    lpdi->lpszOutput=NULL;

    textPtr = (TkText *)(textCmd.clientData);
 
    tkwin = textPtr->tkwin;
    dInfoPtr = textPtr->dInfoPtr;
    dlPtr=dInfoPtr->dLinePtr;
    memset(&pd,0,sizeof( PRINTDLG ));
    pd.lStructSize  = sizeof( PRINTDLG );
    pd.hwndOwner    = NULL;
    pd.hDevMode	    = NULL;
    pd.hDevNames    = NULL;
    pd.Flags	    = PD_RETURNDC|PD_NOSELECTION;

    /*
     * Get printer details.
     */
    if (!PrintDlg(&pd)) {
	goto done;
    }

    PrinterDrawable = (TkWinDrawable *) ckalloc(sizeof(TkWinDrawable));
    PrinterDrawable->type = TWD_WINDC;
    PrinterDrawable->winDC.hdc = pd.hDC;

    Ptr_pixX=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,HORZRES);
    Ptr_pixY=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,VERTRES);
    Ptr_mmX=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,HORZSIZE);
    Ptr_mmY=(float)GetDeviceCaps(PrinterDrawable->winDC.hdc,VERTSIZE);
 
    screenX1=0; screenY1=0;
    screenX2=dInfoPtr->maxX; screenY2=dInfoPtr->maxY;
    pixmap = Tk_GetPixmap(Tk_Display(tkwin), Tk_WindowId(tkwin),
	    (screenX2 + 30),
	    (screenY2 + 30),
	    Tk_Depth(tkwin));
    width = screenX2 - screenX1;
    height = screenY2 - screenY1;

    hDCpixmap = TkWinGetDrawableDC(Tk_Display(tkwin), pixmap, &pixmapState);
    canv_pixX=(float)GetDeviceCaps(hDCpixmap,HORZRES);
    canv_pixY=(float)GetDeviceCaps(hDCpixmap,VERTRES);
    canv_mmX=(float)GetDeviceCaps(hDCpixmap,HORZSIZE);
    canv_mmY=(float)GetDeviceCaps(hDCpixmap,VERTSIZE);

    /*
     * Save text widget data.
     */
    dInfoPtr = textPtr->dInfoPtr;
    saved_x = dInfoPtr->x;
    saved_y = dInfoPtr->y;
    saved_w = Tk_Width(textPtr->tkwin);
    saved_h = Tk_Height(textPtr->tkwin);
    saved_maxX = dInfoPtr->maxX;
    saved_maxY = dInfoPtr->maxY;
    saved_eof = dInfoPtr->topOfEof;
    dInfoPtr->maxX = MAXINT;
    Tk_Width(textPtr->tkwin) = MAXINT;
 
    dInfoPtr->maxY  = MAXINT;
    Tk_Height(textPtr->tkwin) = MAXINT;

    /* Make the text widget big enough for all the
    text to be seen. */

#if (TCL_MAJOR_VERSION >= 8) && (TCL_MINOR_VERSION >= 5)
    numLines = TkBTreeNumLines(textPtr->sharedTextPtr->tree,textPtr);
    TkTextMakeByteIndex(textPtr->sharedTextPtr->tree, textPtr, 0, 0, &first);
    TkTextMakeByteIndex(textPtr->sharedTextPtr->tree, textPtr, numLines, 100, &last);	 
    TkTextChanged(textPtr->sharedTextPtr, textPtr, &first, &last);
#elif (TCL_MAJOR_VERSION >= 8) && (TCL_MINOR_VERSION >= 1)
    numLines = TkBTreeNumLines(textPtr->tree);
    TkTextMakeByteIndex(textPtr->tree, 0, 0, &first);
    TkTextMakeByteIndex(textPtr->tree, numLines, 100, &last);
    TkTextChanged(textPtr, &first, &last);
#else
    numLines = TkBTreeNumLines(textPtr->tree);
    TkTextMakeIndex(textPtr->tree, 0, 0, &first);
    TkTextMakeIndex(textPtr->tree, numLines, 100, &last);
    TkTextChanged(textPtr, &first, &last);
#endif
    /*
     * Set the display info flag to out-of-date.
     */

    textPtr->dInfoPtr->flags|=DINFO_OUT_OF_DATE;

    /*
     *TkTextXviewCmd will call	UpdateDisplayInfo.
     */

    TkTextXviewCmd(textPtr, interp, 2, NULL);
    dInfoPtr = textPtr->dInfoPtr;

    SetMapMode(PrinterDrawable->winDC.hdc,MM_ISOTROPIC);
    SetWindowExtEx(PrinterDrawable->winDC.hdc,(int)((float)canv_pixX),(int)((float)canv_pixY),NULL);
    SetViewportExtEx(PrinterDrawable->winDC.hdc,(int)((float)Ptr_pixX),
			    (int)((float)Ptr_pixY),
			    NULL);

    /*
     * Get max Y for text widget.
     */
    maxHeight = -1;
    for (dlPtr = dInfoPtr->dLinePtr; dlPtr != NULL;
	    dlPtr = dlPtr->nextPtr) {
	maxHeight = dlPtr->y + dlPtr->height;
    }

    /*
     * Calculate the number of tiles high.
     */
    page_Y_size = GetDeviceCaps(hDCpixmap,LOGPIXELSY)*(Ptr_mmY/22);

    tiles_high = ( maxHeight / page_Y_size ); /* start at page zero */

    StartDocA(pd.hDC,lpdi);
    for (tile_y = 0; tile_y <= tiles_high;tile_y++) {
	SetViewportOrgEx(pd.hDC,0,-(tile_y*Ptr_pixY),NULL);

	StartPage(pd.hDC);

	if (maxHeight > 0) {
	    for (prevPtr = NULL, dlPtr = textPtr->dInfoPtr->dLinePtr;
			(dlPtr != NULL) && (dlPtr->y < dInfoPtr->maxY);
			prevPtr = dlPtr, dlPtr = dlPtr->nextPtr) {
	        DisplayDLineToDrawable(textPtr, dlPtr, prevPtr, PrinterDrawable);
	    
	    }
	}

    
	EndPage(pd.hDC);
    }
    EndDoc(pd.hDC);

    /*
     * Restore text widget data.
     */

    dInfoPtr->x = saved_x;
    dInfoPtr->y = saved_y;
    Tk_Width(textPtr->tkwin) = saved_w;
    Tk_Height(textPtr->tkwin) = saved_h;
    dInfoPtr->maxY = saved_maxY;
    dInfoPtr->maxX = saved_maxX;
    dInfoPtr->topOfEof = saved_eof;
    /*
     * Pitch the info again.
     */
    #if (TCL_MAJOR_VERSION >= 8) && (TCL_MINOR_VERSION >= 5)
    TkTextChanged(textPtr->sharedTextPtr,textPtr, &first, &last);
    #else
    TkTextChanged(textPtr, &first, &last);
    #endif
    /*
     * Display info not valid anymore.
     */

    textPtr->dInfoPtr->flags|=DINFO_OUT_OF_DATE;

done:
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
    return TCL_OK;
error:
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
    return TCL_ERROR;
}

int
ide_create_print_text_command (Tcl_Interp *interp)
{

    if (Tcl_CreateCommand(interp, "ide_print_text", 
	PrintTextCmd, 
			  NULL, NULL) == NULL)
	return TCL_ERROR;

    return TCL_OK;
}

/*
 *----------------------------------------------------------------------
 *
 * DisplayDLineToDrawable --
 *
 *	This procedure is invoked to draw a single line to a HDC
 *
 *----------------------------------------------------------------------
 */

static void
DisplayDLineToDrawable(textPtr, dlPtr, prevPtr, drawable)
    TkText *textPtr;		/* Text widget in which to draw line. */
    register DLine *dlPtr;	/* Information about line to draw. */
    DLine *prevPtr;		/* Line just before one to draw, or NULL
				 * if dlPtr is the top line. */
    TkWinDrawable *drawable;	/* drawable to use for displaying.
				 * Caller must make sure it's large enough
				 * to hold line. */
{
    register TkTextDispChunk *chunkPtr;
    TextDInfo *dInfoPtr = textPtr->dInfoPtr;
    Display *display;
    int x;

    /*
     * First, clear the area of the line to the background color for the
     * text widget.
     */

    display = Tk_Display(textPtr->tkwin);

    for (chunkPtr = dlPtr->chunkPtr; (chunkPtr != NULL);
	    chunkPtr = chunkPtr->nextPtr) {
	if (chunkPtr->displayProc == TkTextInsertDisplayProc) {
	    /*
	     * Already displayed the insertion cursor above.  Don't
	     * do it again here.
	     */

	    continue;
	} else {
	    x = chunkPtr->x + dInfoPtr->x - dInfoPtr->curPixelOffset;
       #if (TCL_MAJOR_VERSION >= 8) && (TCL_MINOR_VERSION >= 5)
	    if ((x + chunkPtr->width <= 0) || (x >= dInfoPtr->maxX)) {
	        (*chunkPtr->displayProc)(textPtr, chunkPtr, -chunkPtr->width,
		    dlPtr->y,
		    dlPtr->height - dlPtr->spaceAbove - dlPtr->spaceBelow,
		    dlPtr->baseline - dlPtr->spaceAbove, display, (Drawable)drawable,
		    dlPtr->y + dlPtr->spaceAbove);
	    } else {
	        (*chunkPtr->displayProc)(textPtr, chunkPtr, x, dlPtr->y,
		    dlPtr->height - dlPtr->spaceAbove - dlPtr->spaceBelow,
		    dlPtr->baseline - dlPtr->spaceAbove, display, (Drawable)drawable,
		    dlPtr->y + dlPtr->spaceAbove);
	    }
	    #else
	    if ((x + chunkPtr->width <= 0) || (x >= dInfoPtr->maxX)) {
	        (*chunkPtr->displayProc)(chunkPtr, -chunkPtr->width,
		    dlPtr->y,
		    dlPtr->height - dlPtr->spaceAbove - dlPtr->spaceBelow,
		    dlPtr->baseline - dlPtr->spaceAbove, display, (Drawable)drawable,
		    dlPtr->y + dlPtr->spaceAbove);
	    } else {
	        (*chunkPtr->displayProc)(chunkPtr, x, dlPtr->y,
		    dlPtr->height - dlPtr->spaceAbove - dlPtr->spaceBelow,
		    dlPtr->baseline - dlPtr->spaceAbove, display, (Drawable)drawable,
		    dlPtr->y + dlPtr->spaceAbove);
	    }
	    #endif
	}
    }

}

#endif /* _WIN32 */
@


1.5
log
@touched all files to ease next import
@
text
@a245 1
    Tk_Item *itemPtr;
d249 2
a250 3
    int bottomY = 0;		/* Initialization needed only to stop
				 * compiler warnings. */
    DOCINFO *lpdi = (DOCINFO *) ckalloc(sizeof(DOCINFO));
d293 1
a293 1
    sprintf((char*)lpdi->lpszDocName,"SN - Printing\0");
d359 6
a365 1
#if (TCL_MAJOR_VERSION >= 8) && (TCL_MINOR_VERSION >= 1)
d368 1
d370 1
d373 1
a374 2
    TkTextChanged(textPtr, &first, &last);

d410 1
a410 1
    StartDoc(pd.hDC,lpdi);
d444 3
d448 1
a448 1

a464 8


static void 
ide_delete_print_text_command(ClientData clientData)
{
  /* destructor code here.*/
}

d500 1
a500 1
    int height, x;
d520 14
d538 1
a538 1
		    dlPtr->baseline - dlPtr->spaceAbove, display, (unsigned long)drawable,
d543 1
a543 1
		    dlPtr->baseline - dlPtr->spaceAbove, display, (unsigned long)drawable,
d546 1
d552 1
a552 1
#endif /* _WIN */
@


1.4
log
@	* src/subcommand.c:
	* src/tclgetdir.c:
	* src/tclhelp.c:
	* src/tclmain.c:
	* src/tclmsgbox.c:
	* src/tclsizebox.c:
	* src/tclwinmode.c:
	* src/tclwinpath.c:
	* src/tclwinprint.c:
	* src/tkWinPrintCanvas.c:
	* src/tkWinPrintText.c:
	Use ckalloc/ckfree instead of Tcl_Alloc/Tcl_Free
	or malloc/free so that allocations will
	be marked with file positions when Tcl mem
	debug is activated.
@
text
@@


1.3
log
@	* src/tkWinPrintCanvas.c (PrintCanvasCmd):
	* src/tkWinPrintText.c (PrintTextCmd): Plug
	memory leak by calling free on memory allocated
	in PrintCanvasCmd and PrintTextCmd method. Make
	sure error cases branch to the cleanup code at
	the end of the method instead of just returning.
@
text
@d252 1
a252 1
    DOCINFO *lpdi = malloc(sizeof(DOCINFO));
d294 1
a294 1
    lpdi->lpszDocName=malloc(255);
d449 2
a450 2
    free ((char*) lpdi->lpszDocName);
    free (lpdi);
d453 2
a454 2
    free ((char*) lpdi->lpszDocName);
    free (lpdi);
@


1.2
log
@	* src/tkWinPrintText.c (DisplayDLineToDrawable): Fix
	compiler warning by adding missing static modifier
	to funciton declaration.
@
text
@d276 1
a276 1
	return TCL_ERROR;
d285 1
a285 1
	return TCL_ERROR;
d449 2
d452 3
a454 1
 error:
@


1.1
log
@Initial revision
@
text
@d215 2
a216 1
void DisplayDLineToDrawable(TkText *textPtr, DLine *dlPtr, DLine *prevPtr, TkWinDrawable *drawable);
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.2
log
@libgui import for Tcl/Tk8.3 upgrade
@
text
@d215 1
a215 2
static void
DisplayDLineToDrawable(TkText *textPtr, DLine *dlPtr, DLine *prevPtr, TkWinDrawable *drawable);
d251 1
a251 1
    DOCINFO *lpdi = (DOCINFO *) ckalloc(sizeof(DOCINFO));
d275 1
a275 1
	goto error;
d284 1
a284 1
	goto error;
d293 1
a293 1
    lpdi->lpszDocName = (LPCSTR) ckalloc(255);
a447 2
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
d449 1
a449 3
error:
    ckfree ((char*) lpdi->lpszDocName);
    ckfree ((char*) lpdi);
@

