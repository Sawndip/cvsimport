head	1.2;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.2
	gdb_7_6-branch:1.2.0.32
	gdb_7_5-branch:1.2.0.30
	gdb_7_4-branch:1.2.0.28
	gdb_7_3-branch:1.2.0.26
	gdb_7_1-branch:1.2.0.24
	gdb_7_0-branch:1.2.0.22
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.20
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.18
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.16
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.14
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.12
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb_6_4-branch:1.2.0.10
	gdb_6_4-2005-11-01-branchpoint:1.2
	gdb_6_1-2004-04-05-release:1.2
	gdb_6_1-branch:1.2.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.2
	gdb_6_0-2003-10-04-release:1.2
	gdb_6_0-branch:1.2.0.6
	gdb_6_0-2003-06-23-branchpoint:1.2
	gdb_5_3-2002-12-12-release:1.2
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2001.09.08.22.34.47;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@touched all files to ease next import
@
text
@#ifndef LAYOUT_H
#define LAYOUT_H 1

#ifdef __cplusplus
extern "C" {
#endif

/*
Unlike the original code, we assume that the set of nodes
known to this layout graph is always kept 1-1 with the set
of dual nodes.  Similarly with respect to edges.
This implies that every time a dual is created/deleted,
that the corresponding create/delete methods must be
called in the layout graph class.
Additionally, we assume the existence of two ``update''
methods that propagate the correct location and size info
between the layout graph nodes and their duals.
*/

struct Layout_Graph; /* hidden */

/* ptr to user's node info */
typedef void* pItem;

/*
As inputs, we need the following:

For nodes: bbox that just surrounds the node.
For edges: width and height of the text (if any)
	   associated with the edge.

As outputs, we provide the following:

For nodes: new absolute position of the northwest corner
	   of the bbox for the node.
For edges: (x,y) coordinates of the endpoints of the edge.

To avoid proliferation of types,
we define a single struct (ItemGeom)
that is used to carry all the input and output info.

Item type	Direction	ItemGeom Fields Used
---------	---------	--------------------
Node		In		x1,y1,x2,y2
		Out		x1,y1
Edge		In		width,height
		Out		x1,y1,x2,y2

*/

/* All values are in pixels */
struct ItemGeom {
	double	x1,y1;
	double	x2,y2;
	double	width,height;
};
typedef struct ItemGeom ItemGeom;

struct LayoutConfig {
	pItem			rootnode;
	int			graphorder;
	int			nodespaceH;
	int			nodespaceV;
	int			xoffset;
	int			yoffset;
	int			computenodesize;
	int			elementsperline;
	int			hideedges;
	int			keeprandompositions;
	int			maxx;
	int			maxy;
	int			gridlock;
};
typedef struct LayoutConfig LayoutConfig;

extern LayoutConfig GetLayoutConfig _ANSI_ARGS_((struct Layout_Graph*));
extern void SetLayoutConfig _ANSI_ARGS_((struct Layout_Graph*, LayoutConfig));

extern	int LayoutISI _ANSI_ARGS_((struct Layout_Graph*));
extern	int LayoutTree _ANSI_ARGS_((struct Layout_Graph*));
extern	int LayoutMatrix _ANSI_ARGS_((struct Layout_Graph*));
extern	int LayoutRandom _ANSI_ARGS_((struct Layout_Graph*));

#if DEBUGGING
extern	void LayoutDebugging _ANSI_ARGS_((struct Layout_Graph*, struct Node *currentnode, char *string, int type));
#endif

extern struct Layout_Graph* LayoutCreateGraph _ANSI_ARGS_(());
extern void LayoutFreeGraph _ANSI_ARGS_((struct Layout_Graph*));
extern void LayoutClearGraph _ANSI_ARGS_((struct Layout_Graph*));

extern int LayoutCreateNode _ANSI_ARGS_((struct Layout_Graph*,
					  pItem nodeid,
					  pItem from, pItem to));
extern int LayoutDeleteNode _ANSI_ARGS_((struct Layout_Graph*, pItem nodeid));
extern int LayoutCreateEdge _ANSI_ARGS_((struct Layout_Graph*,
					 pItem edgeid,
					 pItem from, pItem to));
extern int LayoutDeleteEdge _ANSI_ARGS_((struct Layout_Graph*, pItem edgeid));

extern int LayoutGetIthNode _ANSI_ARGS_((struct Layout_Graph*, long, pItem*));

extern int LayoutGetIthEdge _ANSI_ARGS_((struct Layout_Graph*, long,  pItem*));

extern int LayoutGetNodeBBox _ANSI_ARGS_((struct Layout_Graph*, pItem, ItemGeom*));
extern int LayoutSetNodeBBox _ANSI_ARGS_((struct Layout_Graph*, pItem, ItemGeom));

extern int LayoutGetEdgeEndPoints _ANSI_ARGS_((struct Layout_Graph*, pItem, ItemGeom*));
extern int LayoutSetEdgeDim _ANSI_ARGS_((struct Layout_Graph*, pItem, ItemGeom));

extern char* LayoutGetError _ANSI_ARGS_((struct Layout_Graph*));

#ifdef __cplusplus
}
#endif

#endif /*LAYOUT_H*/
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
