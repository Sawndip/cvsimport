head	1.3;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.3
	gdb_7_6-branch:1.3.0.32
	gdb_7_5-branch:1.3.0.30
	gdb_7_4-branch:1.3.0.28
	gdb_7_3-branch:1.3.0.26
	gdb_7_1-branch:1.3.0.24
	gdb_7_0-branch:1.3.0.22
	arc-sim-20090309:1.3
	arc-insight_6_8-branch:1.3.0.20
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.18
	insight_6_8-branchpoint:1.3
	gdb_6_8-branch:1.3.0.16
	insight_6_6-20070208-release:1.3
	gdb_6_6-branch:1.3.0.14
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb_6_5-branch:1.3.0.12
	gdb_6_5-2006-05-14-branchpoint:1.3
	gdb_6_4-branch:1.3.0.10
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb_6_1-2004-04-05-release:1.3
	gdb_6_1-branch:1.3.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	gdb_6_0-2003-10-04-release:1.3
	gdb_6_0-branch:1.3.0.6
	gdb_6_0-2003-06-23-branchpoint:1.3
	gdb_5_3-2002-12-12-release:1.3
	gdb_5_3-branch:1.3.0.4
	gdb_5_3-2002-09-04-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.4
	gdb_s390-2001-09-26-branchpoint:1.2
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.2.0.2
	gdb_5_1-2001-07-29-branchpoint:1.2
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2001.09.08.22.34.47;	author irox;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.11.09.14.26;	author mdejong;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@touched all files to ease next import
@
text
@/* guitcl.h - Interface to Tcl layer of GUI support code.
   Copyright (C) 1997, 1998 Cygnus Solutions.
   Written by Tom Tromey <tromey@@cygnus.com>.  */

#ifndef GUITCL_H
#define GUITCL_H

#ifdef __cplusplus
extern "C" {
#endif

/* This is like Tk_Main, but it doesn't assume that the program wants
   to act like an interactive interpreter.  */
extern void
ide_main (int ide_argc, char *ide_argv[], Tcl_AppInitProc *);

/* Set up the XPM image reader.  This requires Tk to be linked in.
   However, it does not require Tk to be initialized before calling.  */
extern void
ide_create_xpm_image_type (void);

/* This locates the libide and application-specific Tcl libraries.  It
   sets the global Tcl variable `ide_application_name' to IDE_APPNAME,
   and initializes a global Paths array with useful path information.
   The application-specific Tcl library is assumed to be in the
   directory $datadir/IDE_APPNAME/.
   Returns a standard Tcl result.  */
extern int
ide_initialize_paths (Tcl_Interp *, char *ide_appname);

/* This tries to find the application-specific startup file.  If it is
   found, it is sourced.  If not, an error results.  The file is
   assumed to be named $datadir/IDE_APPNAME/IDE_APPNAME.tcl, where
   IDE_APPNAME is the name that was previously passed to
   ide_initialize_paths.
   Returns a standard Tcl result.  */
extern int
ide_run_app_script (Tcl_Interp *);

/* This adds the new graph command for manipulating graphs to the
   interpreter IDE_INTERP.  
   Returns a standard Tcl result.  */
extern int
create_graph_command (Tcl_Interp *ide_interp);

/* This function creates the ide_help Tcl command.  */
int
ide_create_help_command (Tcl_Interp *);

/* This function creates the ide_get_directory Tcl command.  */
int
ide_create_get_directory_command (Tcl_Interp *);

/* This function creates the ide_winprint Tcl command.  */
int
ide_create_winprint_command (Tcl_Interp *);

/* This function creates the ide_sizebox Tcl command.  */
int
ide_create_sizebox_command (Tcl_Interp *);

/* This function creates the ide_shell_execute command.  */
int
ide_create_shell_execute_command (Tcl_Interp *);

/* This function creates the `ide_mapi' command.  */
int
ide_create_mapi_command (Tcl_Interp *);

/* This function creates the `ide_win_choose_font' command.  */
int
ide_create_win_choose_font_command (Tcl_Interp *);

/* This function creates internal commands used by ide_grab_support on
   Windows.  */
int
ide_create_win_grab_command (Tcl_Interp *);

/* This function creates the `ide_cygwin_path' command.  */
int
ide_create_cygwin_path_command (Tcl_Interp *);

/* This function creates the ide_cursor command on Windows.  */
int
ide_create_cursor_command (Tcl_Interp *);

/* This function creates the ide_set_error_mode command.  On Windows,
   this translates into a call to SetErrorMode.  On Unix, this command
   is a no-op.  */
int
ide_create_set_error_mode_command (Tcl_Interp *);

/* This function creates the ide_messageBox command.  */
int
ide_create_messagebox_command (Tcl_Interp *);

/* This function creates the "warp_pointer" command. Warp_pointer
   forces the pointer to a specific location.  There is probably no
   good reason to use this except in the testsuite!  */
int
cyg_create_warp_pointer_command (Tcl_Interp *interp);

#ifdef __cplusplus
}
#endif

#endif /* GUITCL_H */
@


1.2
log
@	* README:
	* library/Makefile.am:
	* library/Makefile.in:
	* library/tclIndex:
	* library/tree.tcl:
	* library/treetable.tcl:
	* src/Makefile.am:
	* src/Makefile.in:
	* src/guitcl.h:
	* src/tkTreeTable.c:
	* src/tkTreeTable.h: Moved implementation of
	"treetable" command out back into snavigator.
@
text
@@


1.1
log
@Initial revision
@
text
@a39 6
/* This adds the new Tk widget `treetable' to the interpreter
   IDE_INTERP.
   Returns a standard Tcl result.  */
extern int
create_treetable_command (Tcl_Interp *ide_interp);

@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
