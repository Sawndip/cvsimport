head	1.7;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.7
	gdb_7_6-branch:1.7.0.12
	gdb_7_5-branch:1.7.0.10
	gdb_7_4-branch:1.7.0.8
	gdb_7_3-branch:1.7.0.6
	gdb_7_1-branch:1.7.0.4
	gdb_7_0-branch:1.7.0.2
	arc-sim-20090309:1.6
	arc-insight_6_8-branch:1.6.0.20
	arc-insight_6_8-branchpoint:1.6
	insight_6_8-branch:1.6.0.18
	insight_6_8-branchpoint:1.6
	gdb_6_8-branch:1.6.0.16
	insight_6_6-20070208-release:1.6
	gdb_6_6-branch:1.6.0.14
	gdb_6_6-2006-11-15-branchpoint:1.6
	insight_6_5-20061003-release:1.6
	gdb_6_5-branch:1.6.0.12
	gdb_6_5-2006-05-14-branchpoint:1.6
	gdb_6_4-branch:1.6.0.10
	gdb_6_4-2005-11-01-branchpoint:1.6
	gdb_6_1-2004-04-05-release:1.6
	gdb_6_1-branch:1.6.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.6
	gdb_6_0-2003-10-04-release:1.6
	gdb_6_0-branch:1.6.0.6
	gdb_6_0-2003-06-23-branchpoint:1.6
	gdb_5_3-2002-12-12-release:1.6
	gdb_5_3-branch:1.6.0.4
	gdb_5_3-2002-09-04-branchpoint:1.6
	gdb_5_2_1-2002-07-23-release:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.4
	gdb_s390-2001-09-26-branchpoint:1.4
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.4.0.2
	gdb_5_1-2001-07-29-branchpoint:1.4
	insight-precleanup-2001-01-01:1.4
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.7
date	2008.07.22.20.11.35;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.05.23.16.16;	author jimb;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.08.22.34.47;	author irox;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.30.22.45.57;	author spolk;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.12.19.22.56;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.03.19.34.38;	author jingham;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@        * tcl.m4: New file.
        * acinclude.m4: Include tcl.m4 instead of ../config/acinclude.m4
        * aclocal.m4: Regenerated.
        * configure.ac: Do not check for ITCL_SH.
        Use SC_PATH_TCLCONFIG, SC_PATH_TKCONFIG, SC_LOAD_TCLCONFIG, and
        SC_LOAD_TKCONFIG to find Tcl and Tk.
        Add some logic for when using in-tree Tcl/Tk.
        Change substitutes for TCL_BUILD_LIB_SPEC, TK_BUILD_LIB_SPEC, and
        TCLHDIR to accommodate using system-supplied Tcl and Tk.
        * configure: Regenerated.
        * Makefile.in: Regenerated.
        * library/Makefile.am: Replace ITCL_SH with TCLSH.
        Remove TCL_SHARED rules.
        (tclIndex): Update build rules.
        * library/Makefile.in: Regenerate.
        * library/balloon.tcl: Update for Itcl 3.2/3.3.
        * library/cframe.tcl: Likewise.
        * library/lframe.tcl: Likewise.
        * library/multibox.tcl: Likewise.
        * library/sendpr.tcl: Likewise.
        * library/ventry.tcl: Likewise.
        * library/wframe.tcl: Likewise.
        * src/Makefile.am (INCLUDES): Update.
        * src/Makefile.in: Regenerate.
        * src/paths.c (init_script): Accommodate builddir != srcdir.
@
text
@/* paths.c - Find IDE and application Tcl libraries.
   Copyright (C) 1997, 2008 Red Hat, Inc.
   Written by Tom Tromey <tromey@@cygnus.com>.  */

#include <tk.h>
#include <tcl.h>

#include "guitcl.h"



/* This Tcl code sets up all the path information we care about.

   We first look for the gui library.  This can be set by the
   REDHAT_GUI_LIBRARY environment variable.  Otherwise, it is named
   gui, and is found in $prefix/share/redhat, where $prefix is
   determined by looking at the directory where the running executable
   is installed.

   We then look for the ide library.  This can be set by the
   REDHAT_IDE_LIBRARY environment variable.  Otherwise, it is named
   ide, and is also found in $prefix/share/redhat.

   It is OK if only one of these libraries exist.  If neither exists,
   we report an error.

   We also set the following elements in the global Paths array.

   prefix         -- as in the configure argument
   exec_prefix    -- ditto
   bindir         -- ditto
   libexecdir     -- ditto
   guidir         -- the gui directory (not set if it does not exist)
   idedir         -- the ide directory (not set if it does not exist)
   appdir         -- see below
   bitmapdir      -- see below

   Paths(appdir) is set based on the ide_initialize_paths APPNAME
   parameter.  If a directory $prefix/share/redhat/APPNAME exists, we
   set Paths(appdir) to it.  More precisely, we set Paths(appdir) if
   an APPNAME directory exists which is a sibling directory of the gui
   or ide directory.  For convenience of some tools, we also check for
   $prefix/share/APPNAME, or, more precisely, we check whether APPNAME
   is a sibling directory of the parent of the gui or ide directory.

   Paths(bitmapdir) is set if gui or ide have a sibling directory
   named bitmaps.  */

#ifndef _MSC_VER
static char init_script[] = "\
proc initialize_paths {} {\n\
  global ide_application_name auto_path env Paths\n\
  rename initialize_paths {}\n\
  # First find the GUI library.\n\
  set guidirs {}\n\
  set prefdirs {}\n\
  if [info exists env(REDHAT_GUI_LIBRARY)] {\n\
    lappend guidirs $env(REDHAT_GUI_LIBRARY)\n\
  }\n\
  set here [pwd]\n\
  set exec_name [info nameofexecutable]\n\
  if {[string compare [file type $exec_name] \"link\"] == 0} {\n\
    set exec_name [file readlink $exec_name]\n\
    if {[string compare [file pathtype $exec_name] \"relative\"] == 0} {\n\
        set exec_name [file join [pwd] $exec_name]\n\
    }\n\
  }\n\
  cd [file dirname $exec_name]\n\
  # Handle build with --exec-prefix and build without.\n\
  set d [file join [file dirname [pwd]] usr share]\n\
  lappend prefdirs $d\n\
  lappend guidirs [file join $d redhat gui]\n\
  set d [file join [file dirname [pwd]] share]\n\
  lappend prefdirs $d\n\
  lappend guidirs [file join $d redhat gui]\n\
  set d [file join [file dirname [file dirname [pwd]]] share]\n\
  lappend prefdirs $d\n\
  lappend guidirs [file join $d redhat gui]\n\
  set Paths(bindir) [pwd]\n\
 	# Base `prefix' on where the `share' dir is found\n\
 	foreach sd $prefdirs {\n\
 	  if [file isdirectory $sd] {\n\
 			set Paths(prefix) [file dirname $sd]\n\
 			break\n\
 		}\n\
 	}\n\
  if {[file isdirectory [file join [file dirname [pwd]] libexec]]} {\n\
    set Paths(libexecdir) [file join [file dirname [pwd]] libexec]\n\
  } else {\n\
    set Paths(libexecdir) $Paths(bindir)\n\
  }\n\
  set Paths(exec_prefix) [file dirname [pwd]]\n\
  cd $here\n\
  # Try to handle running from the build tree:\n\
  # We check for the two most common installations:\n\
  # exec_dir/../ (if built in the source tree)\n\
  # exec_dir/../../src (if using builddir & CVS)\n\
  lappend guidirs [file join [file dirname $Paths(exec_prefix)] libgui library]\n\
  lappend guidirs [file join [file dirname $Paths(exec_prefix)] src libgui library]\n\
  foreach sd $guidirs {\n\
    if {[file exists [file join $sd tclIndex]]} {\n\
      lappend auto_path $sd\n\
      set Paths(guidir) $sd\n\
      break\n\
    }\n\
  }\n\
  # Now find the IDE library, if it exists.\n\
  set idedirs {}\n\
  if [info exists env(REDHAT_IDE_LIBRARY)] {\n\
    lappend idedirs $env(REDHAT_IDE_LIBRARY)\n\
  }\n\
  foreach d $prefdirs {\n\
    lappend idedirs [file join $d redhat ide]\n\
  }\n\
  # Try to handle running from the build tree:\n\
  lappend idedirs [file join [file dirname [file dirname $::tcl_library]] libide library]\n\
  foreach sd $idedirs {\n\
    if {[file exists [file join $sd tclIndex]]} {\n\
      lappend auto_path $sd\n\
      set Paths(idedir) $sd\n\
      break\n\
    }\n\
  }\n\
  # Now set the bitmap directory:\n\
  foreach v [list guidir idedir] {\n\
    if {[info exists Paths($v)]} {\n\
      set d [file dirname $Paths($v)]\n\
      if {[file isdirectory [file join $d bitmaps]]} {\n\
        set Paths(bitmapdir) [file join $d bitmaps]\n\
      }\n\
    }\n\
  }\n\
  \n\
  # We do things in a somewhat roundabout way here.  This lets us\n\
  # run from the source directory, if we're willing to be a little messy\n\
  # in our test scripts.  FIXME: find a cleaner way.\n\
  # This routine is really meant to find the libgui & libide library directories.\n\
  #\n\
  # The client may not want it trying to find the application library\n\
  # Signal that by setting ide_application_name to empty string\n\
  if {$ide_application_name != \"\"} {\n\
    foreach v [list guidir idedir] {\n\
      if {[info exists Paths($v)]} {\n\
        set d [file dirname $Paths($v)]\n\
        if {[file isdirectory [file join $d $ide_application_name]]} {\n\
	  lappend auto_path [file join $d $ide_application_name]\n\
	  set Paths(appdir) [file join $d $ide_application_name]\n\
        }\n\
      }\n\
    }\n\
    if {! [info exists Paths(appdir)]} {\n\
      foreach v [list guidir idedir] {\n\
        if {[info exists Paths($v)]} {\n\
	  set d [file dirname [file dirname $Paths($v)]]\n\
	  if {[file isdirectory [file join $d $ide_application_name]]} {\n\
	    lappend auto_path [file join $d $ide_application_name]\n\
	    set Paths(appdir) [file join $d $ide_application_name]\n\
	  }\n\
        }\n\
      }\n\
    }\n\
  }\n\
  if {[info exists Paths(guidir)] || [info exists Paths(idedir)]} {\n\
    return\n\
  }\n\
  # FIXME: must run this message through gettext.\n\
  # Can only do this once gettext is in C and not just a stub.\n\
  set msg \"Can't find the GUI Tcl library in the following directories:\n\"\n\
  append msg \"    $guidirs $idedirs\n\"\n\
  error $msg\n\
}\n\
initialize_paths";
#else
static char init_script[] = "\
proc initialize_paths {} {\n\
  global ide_application_name auto_path env Paths\n\
  global tcl_library\n\
  rename initialize_paths {}\n\
  set guidirs {}\n\
  set here [pwd]\n\
  cd [file dirname [info nameofexecutable]]\n\
  set d [file join [file dirname [pwd]] share]\n\
  lappend guidirs [file join $d redhat gui]\n\
  set d [file join [file dirname [file dirname [pwd]]] share]\n\
  lappend guidirs [file join $d redhat gui]\n\
  lappend guidirs [file join [file dirname [file dirname $tcl_library]] libgui library]\n\
  foreach sd $guidirs {\n\
    if {[file exists [file join $sd tclIndex]]} {\n\
      lappend auto_path $sd\n\
      set Paths(guidir) $sd\n\
      break\n\
    }\n\
  }\n\
  foreach v [list guidir] {\n\
    if {[info exists Paths($v)]} {\n\
      set d [file dirname $Paths($v)]\n\
      if {[file isdirectory [file join $d bitmaps]]} {\n\
        set Paths(bitmapdir) [file join $d bitmaps]\n\
      }\n\
    }\n\
  }\n\
  \n\
  if {$ide_application_name != \"\"} {\n\
    foreach v [list guidir ] {\n\
      if {[info exists Paths($v)]} {\n\
        set d [file dirname $Paths($v)]\n\
        if {[file isdirectory [file join $d $ide_application_name]]} {\n\
	  lappend auto_path [file join $d $ide_application_name]\n\
	  set Paths(appdir) [file join $d $ide_application_name]\n\
        }\n\
      }\n\
    }\n\
    if {! [info exists Paths(appdir)]} {\n\
      foreach v [list guidir] {\n\
        if {[info exists Paths($v)]} {\n\
	  set d [file dirname [file dirname $Paths($v)]]\n\
	  if {[file isdirectory [file join $d $ide_application_name]]} {\n\
	    lappend auto_path [file join $d $ide_application_name]\n\
	    set Paths(appdir) [file join $d $ide_application_name]\n\
	  }\n\
        }\n\
      }\n\
    }\n\
  }\n\
  if {[info exists Paths(guidir)]} {\n\
    return\n\
  }\n\
  set msg \"Can't find the GUI Tcl library in the following directories:\n\"\n\
  append msg \"    $guidirs\n\"\n\
  error $msg\n\
}\n\
initialize_paths";
#endif

/* Initialize the global Paths variable.  */
int
ide_initialize_paths (Tcl_Interp *interp, char *appname)
{
  if (Tcl_SetVar (interp, "ide_application_name", appname,
		  TCL_GLOBAL_ONLY) == NULL)
    return (TCL_ERROR);
  return (Tcl_GlobalEval (interp, init_script));
}

#ifdef TCLPRO_DEBUGGER
static char run_app_script[] = "\
proc initialize_find_app_script {} {\n\
  global Paths env ide_application_name\n\
  rename initialize_find_app_script {}\n\
  if {[info exists env(TCLPRO_DEBUG_DIR)]} {\n\
     source [file join $env(TCLPRO_DEBUG_DIR) prodebug.tcl]\n\
     debugger_init\n\
  }\n\
  # Look in idedir for the sake of test apps like idetrace.\n\
  foreach v [list appdir idedir] {\n\
    if {[info exists Paths($v)]} {\n\
      set file [file join $Paths($v) ${ide_application_name}.tcl]\n\
      if {[file exists $file]} {\n\
        if {[info exists env(TCLPRO_DEBUG_DIR)]} {\n\
          # Right now, only one process can be debugged at a time.\n\
          # Unset the debug dir, so we won't try to debug any\n\
          # child processes...\n\
          unset env(TCLPRO_DEBUG_DIR)\n\
          uplevel #0 debugger_eval [list source $file]\n\
        } else {\n\
          uplevel #0 [list source $file]\n\
        }\n\
        return\n\
      }\n\
    }\n\
  }\n\
  # FIXME: must run message through gettext.\n\
  error \"Can't find ${ide_application_name}.tcl\"\n\
}\n\
initialize_find_app_script";
#else
static char run_app_script[] = "\
proc initialize_find_app_script {} {\n\
  global Paths ide_application_name\n\
  rename initialize_find_app_script {}\n\
  # Look in idedir for the sake of test apps like idetrace.\n\
  foreach v [list appdir idedir] {\n\
    if {[info exists Paths($v)]} {\n\
      set file [file join $Paths($v) ${ide_application_name}.tcl]\n\
      if {[file exists $file]} {\n\
        uplevel #0 [list source $file]\n\
        return\n\
      }\n\
    }\n\
  }\n\
  # FIXME: must run message through gettext.\n\
  error \"Can't find ${ide_application_name}.tcl\"\n\
}\n\
initialize_find_app_script";
#endif

/* Run the application-specific init script.  */
int
ide_run_app_script (Tcl_Interp *interp)
{
  return (Tcl_GlobalEval (interp, run_app_script));
}
@


1.6
log
@De-Cygnify libgui.

* library/Makefile.am (guidir): Name dir `redhat', not `cygnus'.
* src/Makefile.am (guidir): Same.
* library/Makefile.in, src/Makefile.in: Regenerated.
* library/sendpr.tcl (itcl_class Sendpr): Update company name in
PR headers.
* src/paths.c: Rename environment variables CYGNUS_GUI_LIBRARY
and CYGNUS_IDE_LIBRARY to REDHAT_GUI_LIBRARY and
REDHAT_IDE_LIBRARY.  Name dir `redhat', not `cygnus'.
@
text
@d2 1
a2 1
   Copyright (C) 1997 Cygnus Solutions.
a52 1
  global tcl_library\n\
d95 5
a99 1
  lappend guidirs [file join [file dirname [file dirname $tcl_library]] libgui library]\n\
d116 1
a116 1
  lappend idedirs [file join [file dirname [file dirname $tcl_library]] libide library]\n\
@


1.5
log
@touched all files to ease next import
@
text
@d15 2
a16 2
   CYGNUS_GUI_LIBRARY environment variable.  Otherwise, it is named
   gui, and is found in $prefix/share/cygnus, where $prefix is
d21 2
a22 2
   CYGNUS_IDE_LIBRARY environment variable.  Otherwise, it is named
   ide, and is also found in $prefix/share/cygnus.
d39 1
a39 1
   parameter.  If a directory $prefix/share/cygnus/APPNAME exists, we
d58 2
a59 2
  if [info exists env(CYGNUS_GUI_LIBRARY)] {\n\
    lappend guidirs $env(CYGNUS_GUI_LIBRARY)\n\
d73 1
a73 1
  lappend guidirs [file join $d cygnus gui]\n\
d76 1
a76 1
  lappend guidirs [file join $d cygnus gui]\n\
d79 1
a79 1
  lappend guidirs [file join $d cygnus gui]\n\
d106 2
a107 2
  if [info exists env(CYGNUS_IDE_LIBRARY)] {\n\
    lappend idedirs $env(CYGNUS_IDE_LIBRARY)\n\
d110 1
a110 1
    lappend idedirs [file join $d cygnus ide]\n\
d180 1
a180 1
  lappend guidirs [file join $d cygnus gui]\n\
d182 1
a182 1
  lappend guidirs [file join $d cygnus gui]\n\
@


1.4
log
@2000-06-30  Syd Polk  <spolk@@cygnus.com>

	* src/paths.c: Chris Faylor's path changes from 2000-06-09 blow
	out MSVC's stupid path limitation. This is only a problem
	for Source-Navigator.
@
text
@@


1.3
log
@* src/paths.c (initialize_paths): Look in /usr/share for stuff.
@
text
@d178 1
a178 8
  set exec_name [info nameofexecutable]\n\
  if {[string compare [file type $exec_name] \"link\"] == 0} {\n\
    set exec_name [file readlink $exec_name]\n\
    if {[string compare [file pathtype $exec_name] \"relative\"] == 0} {\n\
      set execName [file join [pwd] $exec_name]\n\
    }\n\
  }\n\
  cd [file dirname $exe_name]\n\
@


1.2
log
@Follow links from the gdb the user ran to the actual executable, so
that you can still find all the Tcl support files.
@
text
@d71 3
@


1.1
log
@Initial revision
@
text
@d62 8
a69 1
  cd [file dirname [info nameofexecutable]]\n\
d175 8
a182 1
  cd [file dirname [info nameofexecutable]]\n\
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
