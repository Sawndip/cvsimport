head	1.4;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.4
	gdb_7_6-branch:1.4.0.4
	gdb_7_5-branch:1.4.0.2
	gdb_7_4-branch:1.3.0.28
	gdb_7_3-branch:1.3.0.26
	gdb_7_1-branch:1.3.0.24
	gdb_7_0-branch:1.3.0.22
	arc-sim-20090309:1.3
	arc-insight_6_8-branch:1.3.0.20
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.18
	insight_6_8-branchpoint:1.3
	gdb_6_8-branch:1.3.0.16
	insight_6_6-20070208-release:1.3
	gdb_6_6-branch:1.3.0.14
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb_6_5-branch:1.3.0.12
	gdb_6_5-2006-05-14-branchpoint:1.3
	gdb_6_4-branch:1.3.0.10
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb_6_1-2004-04-05-release:1.3
	gdb_6_1-branch:1.3.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	gdb_6_0-2003-10-04-release:1.3
	gdb_6_0-branch:1.3.0.6
	gdb_6_0-2003-06-23-branchpoint:1.3
	gdb_5_3-2002-12-12-release:1.3
	gdb_5_3-branch:1.3.0.4
	gdb_5_3-2002-09-04-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.4
	gdb_s390-2001-09-26-branchpoint:1.2
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.2.0.2
	gdb_5_1-2001-07-29-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.4
date	2012.08.08.13.34.56;	author rosch;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.08.22.34.48;	author irox;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.03.18.00.35;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.47;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@   * src/subcommand.c,src/subcommand.h
   (subcommand_implementation,ide_create_command_with_subcommands):
   Make some params const to match tcl/tk changes.
   * src/tclcursor.c (get_cursor_size,get_cursor_position): Ditto.
   * src/tclmsgbox.c: Include windows.h early.
   (msgbox_init,msgbox_exit): Take care about encodings to windows functions.
   (msgbox_thread): Use correct api call here.
   (msgbox_internal,msgbox): Make CONST84 where needed.
   * src/tclwinmode.c (seterrormode_command): Ditto.
   * src/tclshellexe.c (shell_execute_command): Ditto. Plus correct cast return
   value to shut up 64bit gcc.
   * src/tclwinfont.c (win_choose_font): Make CONST84 where needed and
   use dedicated windows api.
   * src/tclwinprint.c (winprint_page_setup_command): Make const/CONST84 where needed.
   (winprint_print_text_options,winprint_print_text_invoke,winprint_print_command): Ditto.
   (winprint_print_text_invoke,): Ditto.
   (winprint_start,winprint_print_commandwinprint_abort_command): use dedicated windows structs/api.
   * src/tkTable.c: Obsolete old dprint stuff.
   (StringifyObjects,Tk_TableObjCmd,TableWidgetObjCmd,TableConfigure,TableFetchSelection): adjust const.
   (selCmdNames,commandNames,updateOpts): make const.
   * src/tkTable.h: Adjust windows includes. include stdint.h. define CONST86 if missing. Deine
   PTR2INT/INT2PTR taken from tcl if missing. Make some functions const.
   * src/tkTableCmds.c: Make bdCmdNames and clearnames CONST84.
   * src/tkTableEdit.c: Make modCmdNamesand rcCmdNames CONST84.
   * src/tkTableTag.c: Make tagCmdNames CONST84.
   (TableTagGetEntry): Make param argcv CONST84.
   (TableInitTags): Make some internal strings CONST84.
   (FindRowColTag): Ditto.
   (Table_TagCmd): Ditto.
   * src/tkTableUtil.c (TableOptionBdSet):Ditto.
   (TableOptionBdGet): Make retval CONST86. Fix ptr/int arithmetics.
   (Cmd_OptionSet): Make param value CONST84.
   (Cmd_OptionGet): Make retval CONST86.
   * src/tkTableWin.c (StickyPrintProc): Ditto. Make some internal strings CONST84.
   (StickyParseProc): Make param value CONST84.
   * src/tkWarpPointer.c: Include windows.h ahead of tk.h.
   (WarpPointer): Remove unused var.
   * src/tkWinPrintCanvas.c (PrintCanvasCmd): use dedicated windows structs/api.
   Fix casting.
   * src/tkWinPrintText.c (PrintTextCmd): Add #if case for compiling against tcl 8.5 and up.
   use dedicated windows structs/api.
   (ide_delete_print_text_command): Delete unused static function.
   (DisplayDLineToDrawable): Add #if case for compiling against tcl 8.5 and up. Fix casting.
@
text
@
/* -----------------------------------------------------------------------------
* NAME:	
*		WarpPointer
*
* SYNOPSIS:	int WarpPointer (clientData, interp, objc, objv)
*		Implements tcl function:
*		warp_pointer win x y
*
* DESC:	
*		Forces the pointer to a specific location.  There is probably
*		no good reason to use this except in the testsuite!
*
* ARGS:	
*		win (objv[1]) - tk window name that coordinates are relative to.
*				Use "." for absolute coordinates
*
*		x (obvj[2])   - X coordinate
*		y (objv[3])   - Y coordinate
* RETURNS:	
*	
*
* NOTES:	
*	
*
* ---------------------------------------------------------------------------*/
#ifdef _WIN32
#include <windows.h>
#include <winuser.h>
#endif

#include "tk.h"

int
WarpPointer (clientData, interp, objc, objv)
    ClientData clientData;
    Tcl_Interp *interp;
    int objc;
    Tcl_Obj *CONST objv[];
{
    Tk_Window tkwin;
    int x, y;

    if (objc != 4) {
      Tcl_WrongNumArgs(interp, 1, objv, "widgetId x y");
      return TCL_ERROR;
    }

    if ((Tcl_GetIntFromObj (interp, objv[2], &x) == TCL_ERROR) ||
	(Tcl_GetIntFromObj (interp, objv[3], &y) == TCL_ERROR))
      return TCL_ERROR;
    
    tkwin = Tk_NameToWindow(interp, Tcl_GetStringFromObj(objv[1], NULL), \
			 Tk_MainWindow (interp));
    if (tkwin == NULL) 
      return TCL_ERROR;

    {
#ifdef _WIN32
      int wx, wy;
      Tk_GetRootCoords (tkwin, &wx, &wy);
      SetCursorPos (wx + x, wy + y);
#else
      Window win = Tk_WindowId(tkwin);
      XWarpPointer(Tk_Display(tkwin), None, win, 0, 0, 0, 0, x, y); 
#endif
    }

    return TCL_OK;
}

int
cyg_create_warp_pointer_command (Tcl_Interp *interp)
{
  if (!Tcl_CreateObjCommand (interp, "warp_pointer", WarpPointer, NULL, NULL))
    return TCL_ERROR;
  return TCL_OK;
}
@


1.3
log
@touched all files to ease next import
@
text
@a26 1
#include "tk.h"
d32 2
a42 1
    char *str;
@


1.2
log
@	* src/tkWarpPointer.c (WarpPointer): Implement for windows.
@
text
@@


1.1
log
@Initial revision
@
text
@a26 2
#ifndef _WIN32

d28 4
a40 1
    Window win;
d45 1
a45 1
      Tcl_WrongNumArgs(interp, 1, objv, "x y widgetId");
d58 11
a68 2
    win = Tk_WindowId(tkwin);
    XWarpPointer(Tk_Display(tkwin), None, win, 0, 0, 0, 0, x, y); 
a78 2

#endif /* !_WIN32 */
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
