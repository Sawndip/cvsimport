head	1.3;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.3
	gdb_7_6-branch:1.3.0.28
	gdb_7_5-branch:1.3.0.26
	gdb_7_4-branch:1.3.0.24
	gdb_7_3-branch:1.3.0.22
	gdb_7_1-branch:1.3.0.20
	gdb_7_0-branch:1.3.0.18
	arc-sim-20090309:1.3
	arc-insight_6_8-branch:1.3.0.16
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.14
	insight_6_8-branchpoint:1.3
	gdb_6_8-branch:1.3.0.12
	insight_6_6-20070208-release:1.3
	gdb_6_6-branch:1.3.0.10
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb_6_5-branch:1.3.0.8
	gdb_6_5-2006-05-14-branchpoint:1.3
	gdb_6_4-branch:1.3.0.6
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb_6_1-2004-04-05-release:1.3
	gdb_6_1-branch:1.3.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	gdb_6_0-2003-10-04-release:1.3
	gdb_6_0-branch:1.3.0.2
	gdb_6_0-2003-06-23-branchpoint:1.3
	gdb_5_3-2002-12-12-release:1.2
	gdb_5_3-branch:1.2.0.4
	gdb_5_3-2002-09-04-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	LIBGUI_TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.21.21.35.15;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.08.22.34.47;	author irox;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.13.17.53.52;	author kseitz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.08.21.55.18;	author irox;	state Exp;
branches;
next	;


desc
@@


1.3
log
@2003-01-21  Martin M. Hunt  <hunt@@redhat.com>

	* src/tkTabletcl.h: Change all references of "tkPriv"
	to "tk::Priv". Change all references of "tkCancelRepeat"
	to "tk::CancelRepeat". Needed for tk 8.4.1.
	* src/tkTable.tcl.h: Ditto.
	* library/combobox.tcl: Ditto.

	* src/Makefile.am: Remove tclsizebox.c.
	* src/Makefile.in: Rebuilt.

	* aclocal.m4: Rebuilt.
	* Makefile.in: Rebuilt.
	* configure: Rebuilt.
@
text
@"proc tkTableClipboardKeysyms {copy cut paste} {\n"
"    bind Table <$copy>	{tk_tableCopy %W}\n"
"    bind Table <$cut>	{tk_tableCut %W}\n"
"    bind Table <$paste>	{tk_tablePaste %W}\n"
"}\n"
"bind Table <3>		{\n"
"    ## You might want to check for row returned if you want to\n"
"    ## restrict the resizing of certain rows\n"
"    %W border mark %x %y\n"
"}\n"
"bind Table <B3-Motion>	{ %W border dragto %x %y }\n"
"bind Table <1> {\n"
"    if {[winfo exists %W]} {\n"
"	tkTableBeginSelect %W [%W index @@%x,%y]\n"
"	focus %W\n"
"    }\n"
"}\n"
"bind Table <B1-Motion> {\n"
"    array set tk::Priv {x %x y %y}\n"
"    tkTableMotion %W [%W index @@%x,%y]\n"
"}\n"
"bind Table <Double-1> {\n"
"    # empty\n"
"}\n"
"bind Table <ButtonRelease-1> {\n"
"    if {[winfo exists %W]} {\n"
"	tk::CancelRepeat\n"
"	%W activate @@%x,%y\n"
"    }\n"
"}\n"
"bind Table <Shift-1>	{tkTableBeginExtend %W [%W index @@%x,%y]}\n"
"bind Table <Control-1>	{tkTableBeginToggle %W [%W index @@%x,%y]}\n"
"bind Table <B1-Enter>	{tk::CancelRepeat}\n"
"bind Table <B1-Leave>	{\n"
"    array set tk::Priv {x %x y %y}\n"
"    tkTableAutoScan %W\n"
"}\n"
"bind Table <2> {\n"
"    %W scan mark %x %y\n"
"    array set tk::Priv {x %x y %y}\n"
"    set tk::Priv(mouseMoved) 0\n"
"}\n"
"bind Table <B2-Motion> {\n"
"    if {(%x != $tk::Priv(x)) || (%y != $tk::Priv(y))} { set tk::Priv(mouseMoved) 1 }\n"
"    if $tk::Priv(mouseMoved) { %W scan dragto %x %y }\n"
"}\n"
"bind Table <ButtonRelease-2> {\n"
"    if {!$tk::Priv(mouseMoved)} { tk_tablePaste %W [%W index @@%x,%y] }\n"
"}\n"
"if {[string comp {} [info command event]]} {\n"
"    tkTableClipboardKeysyms <Copy> <Cut> <Paste>\n"
"} else {\n"
"    tkTableClipboardKeysyms Control-c Control-x Control-v\n"
"}\n"
"bind Table <Any-Tab> {\n"
"    # empty to allow Tk focus movement\n"
"}\n"
"bind Table <FocusOut> {\n"
"    catch {%W activate active}\n"
"}\n"
"bind Table <Shift-Up>		{tkTableExtendSelect %W -1  0}\n"
"bind Table <Shift-Down>		{tkTableExtendSelect %W  1  0}\n"
"bind Table <Shift-Left>		{tkTableExtendSelect %W  0 -1}\n"
"bind Table <Shift-Right>	{tkTableExtendSelect %W  0  1}\n"
"bind Table <Prior>		{%W yview scroll -1 pages; %W activate @@0,0}\n"
"bind Table <Next>		{%W yview scroll  1 pages; %W activate @@0,0}\n"
"bind Table <Control-Prior>	{%W xview scroll -1 pages}\n"
"bind Table <Control-Next>	{%W xview scroll  1 pages}\n"
"bind Table <Home>		{%W see origin}\n"
"bind Table <End>		{%W see end}\n"
"bind Table <Control-Home> {\n"
"    %W selection clear all\n"
"    %W activate origin\n"
"    %W selection set active\n"
"    %W see active\n"
"}\n"
"bind Table <Control-End> {\n"
"    %W selection clear all\n"
"    %W activate end\n"
"    %W selection set active\n"
"    %W see active\n"
"}\n"
"bind Table <Shift-Control-Home>	{tkTableDataExtend %W origin}\n"
"bind Table <Shift-Control-End>	{tkTableDataExtend %W end}\n"
"bind Table <Select>		{tkTableBeginSelect %W [%W index active]}\n"
"bind Table <Shift-Select>	{tkTableBeginExtend %W [%W index active]}\n"
"bind Table <Control-slash>	{tkTableSelectAll %W}\n"
"bind Table <Control-backslash> {\n"
"    if {[string match browse [%W cget -selectmode]]} {%W selection clear all}\n"
"}\n"
"bind Table <Up>			{tkTableMoveCell %W -1  0}\n"
"bind Table <Down>		{tkTableMoveCell %W  1  0}\n"
"bind Table <Left>		{tkTableMoveCell %W  0 -1}\n"
"bind Table <Right>		{tkTableMoveCell %W  0  1}\n"
"bind Table <Any-KeyPress> {\n"
"    if {[string compare {} %A]} { %W insert active insert %A }\n"
"}\n"
"bind Table <BackSpace> {\n"
"    set tk::Priv(junk) [%W icursor]\n"
"    if {[string compare {} $tk::Priv(junk)] && $tk::Priv(junk)} {\n"
"	%W delete active [expr {$tk::Priv(junk)-1}]\n"
"    }\n"
"}\n"
"bind Table <Delete>		{%W delete active insert}\n"
"bind Table <Escape>		{%W reread}\n"
"bind Table <Return> {\n"
"    %W insert active insert \"\n\"\n"
"}\n"
"bind Table <Control-Left>	{%W icursor [expr {[%W icursor]-1}]}\n"
"bind Table <Control-Right>	{%W icursor [expr {[%W icursor]+1}]}\n"
"bind Table <Control-e>		{%W icursor end}\n"
"bind Table <Control-a>		{%W icursor 0}\n"
"bind Table <Control-k>		{%W delete active insert end}\n"
"bind Table <Control-equal>	{tkTableChangeWidth %W active  1}\n"
"bind Table <Control-minus>	{tkTableChangeWidth %W active -1}\n"
"proc tkTableBeginSelect {w el} {\n"
"    global tk::Priv\n"
"    if {[scan $el %d,%d r c] != 2} return\n"
"    switch [$w cget -selectmode] {\n"
"	multiple {\n"
"	    if {[$w tag includes title $el]} {\n"
"		## in the title area\n"
"		if {$r < [$w cget -titlerows]+[$w cget -roworigin]} {\n"
"		    ## We're in a column header\n"
"		    if {$c < [$w cget -titlecols]+[$w cget -colorigin]} {\n"
"			## We're in the topleft title area\n"
"			set inc topleft\n"
"			set el2 end\n"
"		    } else {\n"
"			set inc [$w index topleft row],$c\n"
"			set el2 [$w index end row],$c\n"
"		    }\n"
"		} else {\n"
"		    ## We're in a row header\n"
"		    set inc $r,[$w index topleft col]\n"
"		    set el2 $r,[$w index end col]\n"
"		}\n"
"	    } else {\n"
"		set inc $el\n"
"		set el2 $el\n"
"	    }\n"
"	    if [$w selection includes $inc] {\n"
"		$w selection clear $el $el2\n"
"	    } else {\n"
"		$w selection set $el $el2\n"
"	    }\n"
"	}\n"
"	extended {\n"
"	    $w selection clear all\n"
"	    if {[$w tag includes title $el]} {\n"
"		if {$r < [$w cget -titlerows]+[$w cget -roworigin]} {\n"
"		    ## We're in a column header\n"
"		    if {$c < [$w cget -titlecols]+[$w cget -colorigin]} {\n"
"			$w selection set origin end\n"
"		    } else {\n"
"			$w selection set $el [$w index end row],$c\n"
"		    }\n"
"		} else {\n"
"		    ## We're in a row header\n"
"		    $w selection set $el $r,[$w index end col]\n"
"		}\n"
"	    } else {\n"
"		$w selection set $el\n"
"	    }\n"
"	    $w selection anchor $el\n"
"	    set tk::Priv(tablePrev) $el\n"
"	}\n"
"	default {\n"
"	    if {![$w tag includes title $el]} {\n"
"		$w selection clear all\n"
"		$w selection set $el\n"
"		set tk::Priv(tablePrev) $el\n"
"	    }\n"
"	    $w selection anchor $el\n"
"	}\n"
"    }\n"
"}\n"
"proc tkTableMotion {w el} {\n"
"    global tk::Priv\n"
"    if {![info exists tk::Priv(tablePrev)]} {\n"
"	set tk::Priv(tablePrev) $el\n"
"	return\n"
"    }\n"
"    if {[string match $tk::Priv(tablePrev) $el]} return\n"
"    switch [$w cget -selectmode] {\n"
"	browse {\n"
"	    $w selection clear all\n"
"	    $w selection set $el\n"
"	    set tk::Priv(tablePrev) $el\n"
"	}\n"
"	extended {\n"
"	    scan $tk::Priv(tablePrev) %d,%d r c\n"
"	    scan $el %d,%d elr elc\n"
"	    if {[$w tag includes title $el]} {\n"
"		if {$r < [$w cget -titlerows]+[$w cget -roworigin]} {\n"
"		    ## We're in a column header\n"
"		    if {$c < [$w cget -titlecols]+[$w cget -colorigin]} {\n"
"			## We're in the topleft title area\n"
"			$w selection clear anchor end\n"
"		    } else {\n"
"			$w selection clear anchor [$w index end row],$c\n"
"		    }\n"
"		    $w selection set anchor [$w index end row],$elc\n"
"		} else {\n"
"		    ## We're in a row header\n"
"		    $w selection clear anchor $r,[$w index end col]\n"
"		    $w selection set anchor $elr,[$w index end col]\n"
"		}\n"
"	    } else {\n"
"		$w selection clear anchor $tk::Priv(tablePrev)\n"
"		$w selection set anchor $el\n"
"	    }\n"
"	    set tk::Priv(tablePrev) $el\n"
"	}\n"
"    }\n"
"}\n"
"proc tkTableBeginExtend {w el} {\n"
"    if {[string match extended [$w cget -selectmode]] &&\n"
"	[$w selection includes anchor]} {\n"
"	tkTableMotion $w $el\n"
"    }\n"
"}\n"
"proc tkTableBeginToggle {w el} {\n"
"    global tk::Priv\n"
"    if {[string match extended [$w cget -selectmode]]} {\n"
"	set tk::Priv(tablePrev) $el\n"
"	$w selection anchor $el\n"
"	if [$w selection includes $el] {\n"
"	    $w selection clear $el\n"
"	} else {\n"
"	    $w selection set $el\n"
"	}\n"
"    }\n"
"}\n"
"proc tkTableAutoScan {w} {\n"
"    global tk::Priv\n"
"    if {![winfo exists $w]} return\n"
"    set x $tk::Priv(x)\n"
"    set y $tk::Priv(y)\n"
"    if {$y >= [winfo height $w]} {\n"
"	$w yview scroll 1 units\n"
"    } elseif {$y < 0} {\n"
"	$w yview scroll -1 units\n"
"    } elseif {$x >= [winfo width $w]} {\n"
"	$w xview scroll 1 units\n"
"    } elseif {$x < 0} {\n"
"	$w xview scroll -1 units\n"
"    } else {\n"
"	return\n"
"    }\n"
"    tkTableMotion $w [$w index @@$x,$y]\n"
"    set tk::Priv(afterId) [after 50 tkTableAutoScan $w]\n"
"}\n"
"proc tkTableMoveCell {w x y} {\n"
"    global tk::Priv\n"
"    if {[catch {$w index active row} r]} return\n"
"    set c [$w index active col]\n"
"    $w activate [incr r $x],[incr c $y]\n"
"    $w see active\n"
"    switch [$w cget -selectmode] {\n"
"	browse {\n"
"	    $w selection clear all\n"
"	    $w selection set active\n"
"	}\n"
"	extended {\n"
"	    $w selection clear all\n"
"	    $w selection set active\n"
"	    $w selection anchor active\n"
"	    set tk::Priv(tablePrev) [$w index active]\n"
"	}\n"
"    }\n"
"}\n"
"proc tkTableExtendSelect {w x y} {\n"
"    if {[string compare extended [$w cget -selectmode]] ||\n"
"	[catch {$w index active row} r]} return\n"
"    set c [$w index active col]\n"
"    $w activate [incr r $x],[incr c $y]\n"
"    $w see active\n"
"    tkTableMotion $w [$w index active]\n"
"}\n"
"proc tkTableDataExtend {w el} {\n"
"    set mode [$w cget -selectmode]\n"
"    if {[string match extended $mode]} {\n"
"	$w activate $el\n"
"	$w see $el\n"
"	if [$w selection includes anchor] {tkTableMotion $w $el}\n"
"    } elseif {[string match multiple $mode]} {\n"
"	$w activate $el\n"
"	$w see $el\n"
"    }\n"
"}\n"
"proc tkTableSelectAll {w} {\n"
"    if {[regexp {^(single|browse)$} [$w cget -selectmode]]} {\n"
"	$w selection clear all\n"
"	$w selection set active\n"
"	tkTableHandleType $w [$w index active]\n"
"    } else {\n"
"	$w selection set origin end\n"
"    }\n"
"}\n"
"proc tkTableChangeWidth {w i a} {\n"
"    set tmp [$w index $i col]\n"
"    if {[set width [$w width $tmp]] >= 0} {\n"
"	$w width $tmp [incr width $a]\n"
"    } else {\n"
"	$w width $tmp [incr width -$a]\n"
"    }\n"
"}\n"
"proc tk_tableCopy w {\n"
"    if {[selection own -displayof $w] == \"$w\"} {\n"
"	clipboard clear -displayof $w\n"
"	catch {clipboard append -displayof $w [selection get -displayof $w]}\n"
"    }\n"
"}\n"
"proc tk_tableCut w {\n"
"    if {[selection own -displayof $w] == \"$w\"} {\n"
"	clipboard clear -displayof $w\n"
"	catch {\n"
"	    clipboard append -displayof $w [selection get -displayof $w]\n"
"	    $w cursel set {}\n"
"	    $w selection clear all\n"
"	}\n"
"    }\n"
"}\n"
"proc tk_tablePaste {w {cell {}}} {\n"
"    if {[string compare {} $cell]} {\n"
"	if {[catch {selection get -displayof $w} data]} return\n"
"    } else {\n"
"	if {[catch {selection get -displayof $w -selection CLIPBOARD} data]} {\n"
"	    return\n"
"	}\n"
"	set cell active\n"
"    }\n"
"    tk_tablePasteHandler $w [$w index $cell] $data\n"
"    if {[$w cget -state] == \"normal\"} {focus $w}\n"
"}\n"
"proc tk_tablePasteHandler {w cell data} {\n"
"    set rows	[expr {[$w cget -rows]-[$w cget -roworigin]}]\n"
"    set cols	[expr {[$w cget -cols]-[$w cget -colorigin]}]\n"
"    set r	[$w index $cell row]\n"
"    set c	[$w index $cell col]\n"
"    set rsep	[$w cget -rowseparator]\n"
"    set csep	[$w cget -colseparator]\n"
"    ## Assume separate rows are split by row separator if specified\n"
"    ## If you were to want multi-character row separators, you would need:\n"
"    # regsub -all $rsep $data <newline> data\n"
"    # set data [join $data <newline>]\n"
"    if {[string comp {} $rsep]} { set data [split $data $rsep] }\n"
"    set row	$r\n"
"    foreach line $data {\n"
"	if {$row > $rows} break\n"
"	set col	$c\n"
"	## Assume separate cols are split by col separator if specified\n"
"	## Unless a -separator was specified\n"
"	if {[string comp {} $csep]} { set line [split $line $csep] }\n"
"	## If you were to want multi-character col separators, you would need:\n"
"	# regsub -all $csep $line <newline> line\n"
"	# set line [join $line <newline>]\n"
"	foreach item $line {\n"
"	    if {$col > $cols} break\n"
"	    $w set $row,$col $item\n"
"	    incr col\n"
"	}\n"
"	incr row\n"
"    }\n"
"}\n"
@


1.2
log
@touched all files to ease next import
@
text
@d19 1
a19 1
"    array set tkPriv {x %x y %y}\n"
d27 1
a27 1
"	tkCancelRepeat\n"
d33 1
a33 1
"bind Table <B1-Enter>	{tkCancelRepeat}\n"
d35 1
a35 1
"    array set tkPriv {x %x y %y}\n"
d40 2
a41 2
"    array set tkPriv {x %x y %y}\n"
"    set tkPriv(mouseMoved) 0\n"
d44 2
a45 2
"    if {(%x != $tkPriv(x)) || (%y != $tkPriv(y))} { set tkPriv(mouseMoved) 1 }\n"
"    if $tkPriv(mouseMoved) { %W scan dragto %x %y }\n"
d48 1
a48 1
"    if {!$tkPriv(mouseMoved)} { tk_tablePaste %W [%W index @@%x,%y] }\n"
d99 3
a101 3
"    set tkPriv(junk) [%W icursor]\n"
"    if {[string compare {} $tkPriv(junk)] && $tkPriv(junk)} {\n"
"	%W delete active [expr {$tkPriv(junk)-1}]\n"
d117 1
a117 1
"    global tkPriv\n"
d166 1
a166 1
"	    set tkPriv(tablePrev) $el\n"
d172 1
a172 1
"		set tkPriv(tablePrev) $el\n"
d179 3
a181 3
"    global tkPriv\n"
"    if {![info exists tkPriv(tablePrev)]} {\n"
"	set tkPriv(tablePrev) $el\n"
d184 1
a184 1
"    if {[string match $tkPriv(tablePrev) $el]} return\n"
d189 1
a189 1
"	    set tkPriv(tablePrev) $el\n"
d192 1
a192 1
"	    scan $tkPriv(tablePrev) %d,%d r c\n"
d210 1
a210 1
"		$w selection clear anchor $tkPriv(tablePrev)\n"
d213 1
a213 1
"	    set tkPriv(tablePrev) $el\n"
d224 1
a224 1
"    global tkPriv\n"
d226 1
a226 1
"	set tkPriv(tablePrev) $el\n"
d236 1
a236 1
"    global tkPriv\n"
d238 2
a239 2
"    set x $tkPriv(x)\n"
"    set y $tkPriv(y)\n"
d252 1
a252 1
"    set tkPriv(afterId) [after 50 tkTableAutoScan $w]\n"
d255 1
a255 1
"    global tkPriv\n"
d269 1
a269 1
"	    set tkPriv(tablePrev) [$w index active]\n"
@


1.1
log
@	Update tkTable to version 2.7:
	* src/tkTableCmds.c, src/tkTable.tcl.h, src/tkTableCellSort.c,
	src/tkTableEdit.c, src/tkTableInitScript.h, src/tkTablePs.c,
	src/tkTableUtil.c, doc/tkTable.html: New files.
	* src/tkTable.c, src/tkTable.h, src/TkTable.tcl, src/tkTableCell.c,
	src/tkTableTag.c, src/tkTableWin.c, src/tkTable_version.in: Update to
	version 2.7.
	* configure.in: If compiling with cygwin, we need to have
	WIN32 defined to build tkTable modules.
	* configure: Regenerate.
	* src/Makefile.am: Add new tkTable files and update build rules
	for new version of tkTable.
	* src/Makefile.in: Regenerate.
@
text
@@


1.1.1.1
log
@libgui import for Tcl/Tk8.3 upgrade
@
text
@@

