head	1.4;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.4
	gdb_7_6-branch:1.4.0.12
	gdb_7_5-branch:1.4.0.10
	gdb_7_4-branch:1.4.0.8
	gdb_7_3-branch:1.4.0.6
	gdb_7_1-branch:1.4.0.4
	gdb_7_0-branch:1.4.0.2
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.12
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.10
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.8
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.6
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.4
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb_6_4-branch:1.2.0.2
	gdb_6_4-2005-11-01-branchpoint:1.2;
locks; strict;
comment	@# @;


1.4
date	2008.08.02.23.33.36;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.22.20.11.35;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.23.17.53.14;	author hunt;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.13.22.30.06;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.4
log
@        * tcl.m4: Remove. I changed my mind.
        * acinclude.m4: Include ../config/tcl.m4.
        (CY_AC_TCL_PRIVATE_HEADERS): New macro.
        (CY_AC_TK_PRIVATE_HEADERS): New macro.
        * configure.ac: When using in-tree tcl/tk, include
        Tcl's/Tk's platform directory.
        When using installed Tcl/Tk, use CY_AC_{TCL,TK}_PRIVATE_HEADERS
        to find the private header files.
        * aclocal.m4: Regenerated.
        * configure: Regenerated.
        * library/Makefile.in: Regenerated.
        * src/Makefile.in: Regenerated.
@
text
@dnl Process this file with autoconf to produce configure.

AC_INIT(src/subcommand.h)
AM_INIT_AUTOMAKE(libgui, 0.0)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE
AC_CANONICAL_HOST
AC_PROG_CC
AC_EXEEXT
AC_OBJEXT
AC_ARG_ENABLE(install-libgui, \
  [  --enable-install-libgui Install libgui.a and library header files])
AM_CONDITIONAL(CROSS_COMPILING, test x$cross_compiling = xyes)
AM_CONDITIONAL(INSTALL_LIBGUI, test x$enable_install_libgui = xyes)
AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_CHECK_TOOL(AR, ar, :)

AC_FUNC_ALLOCA
AC_HAVE_HEADERS(stddef.h stdlib.h getopt.h unistd.h fcntl.h sys/file.h sys/wait.h string.h strings.h)
AC_CHECK_FUNCS(raise)

AC_ARG_ENABLE(ide, [  --enable-ide            Enable IDE support],
[case "${enableval}" in
  yes) ide=yes ;;
  no)  ide=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for enable-ide option) ;;
esac],
[ide=no])
AM_CONDITIONAL(IDE_ENABLED, test x$ide = xyes)
if test x$ide = xyes; then
  AC_DEFINE(IDE_ENABLED)
fi

# If we have random, assume we have srandom.  If we have drand48,
# assume we have srand48.  If we have rand, assume we have srand.
AC_CHECK_FUNCS(random drand48 rand, break)

dnl Tcl ensures that strncasecmp is provided everywhere.  But in some
dnl situations we might need to declare it.  We check for that case
dnl here.
AC_EGREP_CPP(strncasecmp, [#include <string.h>],
  AC_DEFINE(HAVE_STRNCASECMP_DECL))


AC_CACHE_CHECK([for cygwin32], ide_cv_os_cygwin32,
[AC_EGREP_CPP(lose, [
#ifdef __CYGWIN32__
lose
#endif],[ide_cv_os_cygwin32=yes],[ide_cv_os_cygwin32=no])])
ac_win_build="no"
if test x$ide_cv_os_cygwin32 = xyes; then
  ac_win_build="yes"
fi

case "${host}" in
*-*-cygwin*)
        touch ac$$.c
        if ${CC} -c -mwin32 ac$$.c >/dev/null 2>&1; then
            case "$LIBGUI_CFLAGS" in
                *-mwin32*) ;;
                *) LIBGUI_CFLAGS="-mwin32 $LIBGUI_CFLAGS" ;;
            esac
        fi
        rm -f ac$$.o ac$$.c
        ;;
esac
case "${host}" in
*-*-cygwin*)
	LIBGUI_CFLAGS="-DWIN32 $LIBGUI_CFLAGS" ;;
esac
AC_SUBST(LIBGUI_CFLAGS) 

tmp="`cd $srcdir/library; pwd`"
if test x"$ac_cv_prog_CC" = xcl ; then
  tmp2="`cygpath --windows $tmp`"
  LIBGUI_LIBRARY_DIR="`echo $tmp2 | sed -e s#\\\\\\\\#/#g`"
else
  LIBGUI_LIBRARY_DIR=$tmp
fi
AC_SUBST(LIBGUI_LIBRARY_DIR)

# Check for Tcl and Tk.
SC_PATH_TCLCONFIG
SC_LOAD_TCLCONFIG
SC_PATH_TKCONFIG
SC_LOAD_TKCONFIG

here=`pwd`
cd ${srcdir}/..
topdir=`pwd`
cd ${here}

if test "${TCL_SRC_DIR}" = "${topdir}/tcl"; then
  # Using in-tree Tcl/Tk
  case "${host}" in
    *-*-cygwin*) platDir="win" ;;
    *) platDir="unix" ;;
  esac

  TCL_INCLUDES="-I${TCL_SRC_DIR}/generic -I${TCL_SRC_DIR}/${platDir}"
  TCL_LIBRARY=${TCL_BUILD_LIB_SPEC}
  TK_INCLUDES="-I${TK_SRC_DIR}/generic -I${TK_SRC_DIR}/${platDir}"
  TK_LIBRARY=${TK_BUILD_LIB_SPEC}
else
  # Using installed Tcl/Tk
  CY_AC_TCL_PRIVATE_HEADERS
  CY_AC_TK_PRIVATE_HEADERS
  TCL_INCLUDES="${TCL_INCLUDE_SPEC} ${TCL_PRIVATE_INCLUDE}"
  TCL_LIBRARY=${TCL_LIB_SPEC}
  TK_INCLUDES="${TK_INCLUDE_SPEC} ${TK_PRIVATE_INCLUDE}"
  TK_LIBRARY=${TK_LIB_SPEC}
fi

AC_SUBST(TCL_DEFS)
AC_SUBST(TCL_INCLUDES)
AC_SUBST(TK_DEFS)
AC_SUBST(TK_INCLUDES)
AC_SUBST(TK_XINCLUDES)
AC_SUBST(TCL_LIBS)
AC_SUBST(TK_LIBRARY)
AC_SUBST(TCL_LIBRARY)
AC_SUBST(TK_LIBS)

AM_CONDITIONAL(TCL_SHARED, test x$TCL_SHARED_BUILD = x1)

AC_SUBST(RPATH_ENVVAR)

AC_OUTPUT([Makefile library/Makefile src/Makefile])



@


1.3
log
@        * tcl.m4: New file.
        * acinclude.m4: Include tcl.m4 instead of ../config/acinclude.m4
        * aclocal.m4: Regenerated.
        * configure.ac: Do not check for ITCL_SH.
        Use SC_PATH_TCLCONFIG, SC_PATH_TKCONFIG, SC_LOAD_TCLCONFIG, and
        SC_LOAD_TKCONFIG to find Tcl and Tk.
        Add some logic for when using in-tree Tcl/Tk.
        Change substitutes for TCL_BUILD_LIB_SPEC, TK_BUILD_LIB_SPEC, and
        TCLHDIR to accommodate using system-supplied Tcl and Tk.
        * configure: Regenerated.
        * Makefile.in: Regenerated.
        * library/Makefile.am: Replace ITCL_SH with TCLSH.
        Remove TCL_SHARED rules.
        (tclIndex): Update build rules.
        * library/Makefile.in: Regenerate.
        * library/balloon.tcl: Update for Itcl 3.2/3.3.
        * library/cframe.tcl: Likewise.
        * library/lframe.tcl: Likewise.
        * library/multibox.tcl: Likewise.
        * library/sendpr.tcl: Likewise.
        * library/ventry.tcl: Likewise.
        * library/wframe.tcl: Likewise.
        * src/Makefile.am (INCLUDES): Update.
        * src/Makefile.in: Regenerate.
        * src/paths.c (init_script): Accommodate builddir != srcdir.
@
text
@d95 6
a100 1
  TCL_INCLUDES="-I${TCL_SRC_DIR}/generic"
d102 1
a102 1
  TK_INCLUDES="-I${TK_SRC_DIR}/generic"
d106 3
a108 1
  TCL_INCLUDES=${TCL_INCLUDE_SPEC}
d110 1
a110 1
  TK_INCLUDES=${TK_INCLUDE_SPEC}
@


1.2
log
@2005-03-23  Martin Hunt  <hunt@@redhat.com>

	* configure.ac: Remove -fwritable-strings from CFLAGS.
	* configure: Regenerate.
@
text
@a16 2
AC_CHECK_PROG(ITCL_SH, itcl_sh, itcl_sh,
	[\$\$here/\$(top_builddir)/../itcl/itcl/unix/itcl_sh\$(EXEEXT)])
d82 17
a98 16
# Find the init.tcl file.

AC_MSG_CHECKING(for init.tcl)
AC_CACHE_VAL(ac_cv_c_tcl_libdir,[
dnl currently, only check the source tree
if test -f $srcdir/../tcl/library/init.tcl ; then
  ac_cv_c_tcl_libdir=`cd $srcdir/../tcl/library; pwd`
elif test -f $srcdir/../tcl8.1/library/init.tcl; then
  ac_cv_c_tcl_libdir=`cd $srcdir/../tcl8.1/library; pwd`
fi
])
AC_MSG_RESULT(${ac_cv_c_tcl_libdir})

if test x"$ac_cv_prog_CC" = xcl; then
  tmp2="`cygpath --windows $ac_cv_c_tcl_libdir`"
  TCL_LIBRARY="`echo $tmp2 | sed -e s#\\\\\\\\#/#g`"
d100 5
a104 1
  TCL_LIBRARY=$ac_cv_c_tcl_libdir
a105 10
AC_SUBST(TCL_LIBRARY)

# Check for Tcl and Tk.
CYG_AC_PATH_TCLCONFIG
CYG_AC_LOAD_TCLCONFIG
CYG_AC_PATH_TKCONFIG
CYG_AC_LOAD_TKCONFIG
CYG_AC_PATH_TCLH
# FIXME: consider only doing this if --with-x given.
CYG_AC_PATH_TKH
d108 1
d110 1
a110 2
AC_SUBST(TCLHDIR)
AC_SUBST(TKHDIR)
d113 2
a114 2
AC_SUBST(TK_BUILD_LIB_SPEC)
AC_SUBST(TCL_BUILD_LIB_SPEC)
@


1.1
log
@        * configure.in: Rename to ...
        * configure.ac: ... this.
        * configure: Regenerate with autoconf 2.59.
@
text
@a45 7
# Tcl8.1 requires writable strings for gcc

if test "$GCC" = "yes"; then
   LIBGUI_CFLAGS=-fwritable-strings
else
   LIBGUI_CFLAGS=
fi
@

