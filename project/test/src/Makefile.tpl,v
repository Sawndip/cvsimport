head	1.234;
access;
symbols
	sid-snapshot-20180601:1.234
	cgen-snapshot-20180601:1.234
	sid-snapshot-20180501:1.234
	cgen-snapshot-20180501:1.234
	sid-snapshot-20180401:1.234
	cgen-snapshot-20180401:1.234
	sid-snapshot-20180301:1.234
	cgen-snapshot-20180301:1.234
	sid-snapshot-20180201:1.234
	cgen-snapshot-20180201:1.234
	sid-snapshot-20180101:1.234
	cgen-snapshot-20180101:1.234
	sid-snapshot-20171201:1.234
	cgen-snapshot-20171201:1.234
	sid-snapshot-20171101:1.234
	cgen-snapshot-20171101:1.234
	sid-snapshot-20171001:1.234
	cgen-snapshot-20171001:1.234
	sid-snapshot-20170901:1.234
	cgen-snapshot-20170901:1.234
	sid-snapshot-20170801:1.234
	cgen-snapshot-20170801:1.234
	sid-snapshot-20170701:1.234
	cgen-snapshot-20170701:1.234
	sid-snapshot-20170601:1.234
	cgen-snapshot-20170601:1.234
	sid-snapshot-20170501:1.234
	cgen-snapshot-20170501:1.234
	sid-snapshot-20170401:1.234
	cgen-snapshot-20170401:1.234
	sid-snapshot-20170301:1.234
	cgen-snapshot-20170301:1.234
	sid-snapshot-20170201:1.234
	cgen-snapshot-20170201:1.234
	sid-snapshot-20170101:1.234
	cgen-snapshot-20170101:1.234
	sid-snapshot-20161201:1.234
	cgen-snapshot-20161201:1.234
	sid-snapshot-20161101:1.234
	cgen-snapshot-20161101:1.234
	sid-snapshot-20160901:1.234
	cgen-snapshot-20160901:1.234
	sid-snapshot-20160801:1.234
	cgen-snapshot-20160801:1.234
	sid-snapshot-20160701:1.234
	cgen-snapshot-20160701:1.234
	sid-snapshot-20160601:1.234
	cgen-snapshot-20160601:1.234
	sid-snapshot-20160501:1.234
	cgen-snapshot-20160501:1.234
	sid-snapshot-20160401:1.234
	cgen-snapshot-20160401:1.234
	sid-snapshot-20160301:1.234
	cgen-snapshot-20160301:1.234
	sid-snapshot-20160201:1.234
	cgen-snapshot-20160201:1.234
	sid-snapshot-20160101:1.234
	cgen-snapshot-20160101:1.234
	sid-snapshot-20151201:1.234
	cgen-snapshot-20151201:1.234
	sid-snapshot-20151101:1.234
	cgen-snapshot-20151101:1.234
	sid-snapshot-20151001:1.234
	cgen-snapshot-20151001:1.234
	sid-snapshot-20150901:1.234
	cgen-snapshot-20150901:1.234
	sid-snapshot-20150801:1.234
	cgen-snapshot-20150801:1.234
	sid-snapshot-20150701:1.234
	cgen-snapshot-20150701:1.234
	sid-snapshot-20150601:1.234
	cgen-snapshot-20150601:1.234
	sid-snapshot-20150501:1.234
	cgen-snapshot-20150501:1.234
	sid-snapshot-20150401:1.234
	cgen-snapshot-20150401:1.234
	cygwin-1_7_35-release:1.234
	sid-snapshot-20150301:1.234
	cgen-snapshot-20150301:1.234
	cygwin-1_7_34-release:1.234
	sid-snapshot-20150201:1.234
	cgen-snapshot-20150201:1.234
	sid-snapshot-20150101:1.234
	cgen-snapshot-20150101:1.234
	newlib-2_2_0:1.234.0.8
	sid-snapshot-20141201:1.234
	cgen-snapshot-20141201:1.234
	cygwin-1_7_33-release:1.234
	sid-snapshot-20141101:1.234
	cgen-snapshot-20141101:1.234
	sid-snapshot-20141001:1.234
	cgen-snapshot-20141001:1.234
	sid-snapshot-20140901:1.234
	cgen-snapshot-20140901:1.234
	cygwin-1_7_32-release:1.234
	sid-snapshot-20140801:1.234
	cgen-snapshot-20140801:1.234
	cygwin-1_7_31-release:1.234
	sid-snapshot-20140701:1.234
	cgen-snapshot-20140701:1.234
	sid-snapshot-20140601:1.234
	cgen-snapshot-20140601:1.234
	cygwin-1_7_30-release:1.234
	sid-snapshot-20140501:1.234
	cgen-snapshot-20140501:1.234
	cygwin-1_7_29-release:1.234
	sid-snapshot-20140401:1.234
	cgen-snapshot-20140401:1.234
	sid-snapshot-20140301:1.234
	cgen-snapshot-20140301:1.234
	cygwin-1_7_28-release:1.234
	sid-snapshot-20140201:1.234
	cgen-snapshot-20140201:1.234
	sid-snapshot-20140101:1.234
	cgen-snapshot-20140101:1.234
	newlib-2_1_0:1.234
	sid-snapshot-20131201:1.234
	cgen-snapshot-20131201:1.234
	cygwin-1_7_27-release:1.234
	cygwin-1_7_26-release:1.234
	sid-snapshot-20131101:1.234
	cgen-snapshot-20131101:1.234
	sid-snapshot-20131001:1.234
	cgen-snapshot-20131001:1.234
	binutils-2_24-branch:1.234.0.6
	binutils-2_24-branchpoint:1.234
	binutils-2_21_1:1.218
	sid-snapshot-20130901:1.234
	cgen-snapshot-20130901:1.234
	cygwin-1_7_25-release:1.234
	gdb_7_6_1-2013-08-30-release:1.234
	cygwin-1_7_24-release:1.234
	cygwin-1_7_23-release:1.234
	sid-snapshot-20130801:1.234
	cgen-snapshot-20130801:1.234
	cygwin-1_7_22-release:1.234
	cygwin-1_7_21-release:1.234
	sid-snapshot-20130701:1.234
	cgen-snapshot-20130701:1.234
	cygwin-1_7_20-release:1.234
	cygwin-1_7_19-release:1.234
	sid-snapshot-20130601:1.234
	cgen-snapshot-20130601:1.234
	sid-snapshot-20130501:1.234
	cgen-snapshot-20130501:1.234
	gdb_7_6-2013-04-26-release:1.234
	cygwin-64bit-postmerge:1.234
	cygwin-64bit-premerge-branch:1.234.0.4
	cygwin-64bit-premerge:1.234
	sid-snapshot-20130401:1.234
	cgen-snapshot-20130401:1.234
	binutils-2_23_2:1.230
	gdb_7_6-branch:1.234.0.2
	gdb_7_6-2013-03-12-branchpoint:1.234
	cygwin-1_7_18-release:1.234
	sid-snapshot-20130301:1.234
	cgen-snapshot-20130301:1.234
	sid-snapshot-20130201:1.234
	cgen-snapshot-20130201:1.234
	sid-snapshot-20130101:1.233
	cgen-snapshot-20130101:1.233
	newlib-2_0_0:1.233
	sid-snapshot-20121201:1.233
	cgen-snapshot-20121201:1.233
	gdb_7_5_1-2012-11-29-release:1.230
	binutils-2_23_1:1.230
	sid-snapshot-20121101:1.232
	cgen-snapshot-20121101:1.232
	binutils-2_23:1.230
	cygwin-1_7_17-release:1.231
	sid-snapshot-20121001:1.231
	cgen-snapshot-20121001:1.231
	sid-snapshot-20120901:1.231
	cgen-snapshot-20120901:1.231
	gdb_7_5-2012-08-17-release:1.230
	cygwin-64bit-branch:1.230.0.8
	sid-snapshot-20120801:1.230
	cgen-snapshot-20120801:1.230
	binutils-2_23-branch:1.230.0.6
	binutils-2_23-branchpoint:1.230
	cygwin-1_7_16-release:1.230
	gdb_7_5-branch:1.230.0.4
	gdb_7_5-2012-07-18-branchpoint:1.230
	sid-snapshot-20120701:1.230
	cgen-snapshot-20120701:1.230
	sid-snapshot-20120601:1.230
	cgen-snapshot-20120601:1.230
	cygwin-1_7_15-release:1.230
	sid-snapshot-20120501:1.230
	cgen-snapshot-20120501:1.230
	binutils-2_22_branch:1.228.0.4
	gdb_7_4_1-2012-04-26-release:1.230
	cygwin-1_7_14_2-release:1.230
	cygwin-1_7_14-release:1.230
	cygwin-1_7_12-release:1.230
	sid-snapshot-20120401:1.230
	cgen-snapshot-20120401:1.230
	sid-snapshot-20120301:1.230
	cgen-snapshot-20120301:1.230
	cygwin-1_7_11-release:1.230
	cygwin-1_7_10-release:1.230
	sid-snapshot-20120201:1.230
	cgen-snapshot-20120201:1.230
	gdb_7_4-2012-01-24-release:1.230
	sid-snapshot-20120101:1.230
	cgen-snapshot-20120101:1.230
	newlib-1_20_0:1.230
	gdb_7_4-branch:1.230.0.2
	gdb_7_4-2011-12-13-branchpoint:1.230
	sid-snapshot-20111201:1.230
	cgen-snapshot-20111201:1.230
	binutils-2_22:1.228
	sid-snapshot-20111101:1.228
	cgen-snapshot-20111101:1.228
	sid-snapshot-20111001:1.228
	cgen-snapshot-20111001:1.228
	binutils-2_22-branch:1.228.0.2
	binutils-2_22-branchpoint:1.228
	gdb_7_3_1-2011-09-04-release:1.224.2.1
	sid-snapshot-20110901:1.228
	cgen-snapshot-20110901:1.228
	sid-snapshot-20110801:1.228
	cgen-snapshot-20110801:1.228
	gdb_7_3-2011-07-26-release:1.224.2.1
	sid-snapshot-20110701:1.226
	cgen-snapshot-20110701:1.226
	sid-snapshot-20110601:1.226
	cgen-snapshot-20110601:1.226
	sid-snapshot-20110501:1.225
	cgen-snapshot-20110501:1.225
	gdb_7_3-branch:1.224.0.2
	gdb_7_3-2011-04-01-branchpoint:1.224
	sid-snapshot-20110401:1.225
	cgen-snapshot-20110401:1.225
	cygwin-1_7_9-release:1.224
	sid-snapshot-20110301:1.222
	cgen-snapshot-20110301:1.222
	cygwin-1_7_8-release:1.222
	sid-snapshot-20110201:1.221
	cgen-snapshot-20110201:1.221
	sid-snapshot-20110101:1.221
	cgen-snapshot-20110101:1.221
	newlib-1_19_0:1.221
	binutils-2_21:1.218
	sid-snapshot-20101201:1.221
	cgen-snapshot-20101201:1.221
	binutils-2_21-branch:1.218.0.2
	binutils-2_21-branchpoint:1.218
	sid-snapshot-20101101:1.218
	cgen-snapshot-20101101:1.218
	sid-snapshot-20101001:1.217
	cgen-snapshot-20101001:1.217
	binutils-2_20_1:1.209
	gdb_7_2-2010-09-02-release:1.216
	sid-snapshot-20100901:1.217
	cgen-snapshot-20100901:1.217
	cygwin-1_7_7-release:1.217
	sid-snapshot-20100801:1.217
	cgen-snapshot-20100801:1.217
	gdb_7_2-branch:1.216.0.4
	gdb_7_2-2010-07-07-branchpoint:1.216
	sid-snapshot-20100701:1.216
	cgen-snapshot-20100701:1.216
	sid-snapshot-20100601:1.216
	cgen-snapshot-20100601:1.216
	sid-snapshot-20100501:1.216
	cgen-snapshot-20100501:1.216
	cygwin-1_7_5-release:1.216
	cygwin-1_7_4-release:1.216
	sid-snapshot-20100401:1.216
	cgen-snapshot-20100401:1.216
	cygwin-1_7_3-release:1.216
	cygwin-1_7_2-release:1.216
	gdb_7_1-2010-03-18-release:1.216
	sid-snapshot-20100301:1.216
	cgen-snapshot-20100301:1.216
	gdb_7_1-branch:1.216.0.2
	gdb_7_1-2010-02-18-branchpoint:1.216
	sid-snapshot-20100201:1.214
	cgen-snapshot-20100201:1.214
	sid-snapshot-20100101:1.212
	cgen-snapshot-20100101:1.212
	gdb_7_0_1-2009-12-22-release:1.210
	newlib-1_18_0:1.212
	cygwin-1_7_1-release:1.212
	sid-snapshot-20091201:1.212
	cgen-snapshot-20091201:1.212
	sid-snapshot-20091101:1.211
	cgen-snapshot-20091101:1.211
	binutils-2_20:1.209
	gdb_7_0-2009-10-06-release:1.210
	sid-snapshot-20091001:1.210
	cgen-snapshot-20091001:1.210
	gdb_7_0-branch:1.210.0.2
	gdb_7_0-2009-09-16-branchpoint:1.210
	arc-sim-20090309:1.186
	binutils-arc-20081103-branch:1.196.0.4
	binutils-arc-20081103-branchpoint:1.196
	newlib-1_17_0-arc:1.198.0.4
	binutils-2_20-branch:1.209.0.2
	binutils-2_20-branchpoint:1.209
	sid-snapshot-20090901:1.208
	cgen-snapshot-20090901:1.208
	sid-snapshot-20090801:1.207
	cgen-snapshot-20090801:1.207
	msnyder-checkpoint-072509-branch:1.207.0.6
	msnyder-checkpoint-072509-branchpoint:1.207
	sid-snapshot-20090701:1.207
	cgen-snapshot-20090701:1.207
	dje-cgen-play1-branch:1.207.0.4
	dje-cgen-play1-branchpoint:1.207
	cgen-1_1-branch:1.207.0.2
	cgen-1_1-branchpoint:1.207
	sid-snapshot-20090601:1.205
	cgen-snapshot-20090601:1.205
	sid-snapshot-20090501:1.201
	cgen-snapshot-20090501:1.201
	sid-snapshot-20090401:1.199
	cgen-snapshot-20090401:1.199
	binutils-arc-20080908-branch:1.194.0.6
	binutils-arc-20080908-branchpoint:1.194
	arc-20081103-branch:1.196.0.2
	arc-20081103-branchpoint:1.196
	arc-insight_6_8-branch:1.186.0.6
	arc-insight_6_8-branchpoint:1.186
	insight_6_8-branch:1.186.0.4
	insight_6_8-branchpoint:1.186
	sid-snapshot-20090301:1.199
	cgen-snapshot-20090301:1.199
	binutils-2_19_1:1.194
	sid-snapshot-20090201:1.198
	cgen-snapshot-20090201:1.198
	sid-snapshot-20090101:1.198
	cgen-snapshot-20090101:1.198
	reverse-20081226-branch:1.198.0.2
	reverse-20081226-branchpoint:1.198
	newlib-1_17_0:1.198
	sid-snapshot-20081201:1.198
	cgen-snapshot-20081201:1.198
	multiprocess-20081120-branch:1.197.0.2
	multiprocess-20081120-branchpoint:1.197
	sid-snapshot-20081101:1.196
	cgen-snapshot-20081101:1.196
	binutils-2_19:1.194
	sid-snapshot-20081001:1.194
	cgen-snapshot-20081001:1.194
	reverse-20080930-branch:1.194.0.4
	reverse-20080930-branchpoint:1.194
	binutils-2_19-branch:1.194.0.2
	binutils-2_19-branchpoint:1.194
	sid-snapshot-20080901:1.193
	cgen-snapshot-20080901:1.193
	sid-snapshot-20080801:1.192
	cgen-snapshot-20080801:1.192
	reverse-20080717-branch:1.191.0.2
	reverse-20080717-branchpoint:1.191
	sid-snapshot-20080701:1.191
	cgen-snapshot-20080701:1.191
	msnyder-reverse-20080609-branch:1.190.0.2
	msnyder-reverse-20080609-branchpoint:1.190
	drow-reverse-20070409-branch:1.177.0.2
	drow-reverse-20070409-branchpoint:1.177
	sid-snapshot-20080601:1.189
	cgen-snapshot-20080601:1.189
	sid-snapshot-20080501:1.189
	cgen-snapshot-20080501:1.189
	sid-snapshot-20080403:1.187
	sid-snapshot-20080401:1.187
	cgen-snapshot-20080401:1.187
	gdb_6_8-2008-03-27-release:1.186
	sid-snapshot-20080301:1.186
	cgen-snapshot-20080301:1.186
	gdb_6_8-branch:1.186.0.2
	gdb_6_8-2008-02-26-branchpoint:1.186
	sid-snapshot-20080201:1.185
	cgen-snapshot-20080201:1.185
	sid-snapshot-20080101:1.185
	cgen-snapshot-20080101:1.185
	newlib-1_16_0:1.185
	sid-snapshot-20071201:1.184
	cgen-snapshot-20071201:1.184
	sid-snapshot-20071101:1.184
	cgen-snapshot-20071101:1.184
	gdb_6_7_1-2007-10-29-release:1.183
	gdb_6_7-2007-10-10-release:1.183
	sid-snapshot-20071001:1.184
	cgen-snapshot-20071001:1.184
	gdb_6_7-branch:1.183.0.2
	gdb_6_7-2007-09-07-branchpoint:1.183
	binutils-2_18:1.181
	binutils-2_18-branch:1.181.0.2
	binutils-2_18-branchpoint:1.181
	insight_6_6-20070208-release:1.166
	newlib-1_15_0:1.168
	newlib-csl-coldfire-4_1-32:1.159
	binutils-csl-coldfire-4_1-32:1.159.2.2
	newlib-csl-sourcerygxx-4_1-32:1.159
	binutils-csl-sourcerygxx-4_1-32:1.159.2.2
	gdb_6_6-2006-12-18-release:1.166
	newlib-csl-innovasic-fido-3_4_4-33:1.159
	binutils-csl-innovasic-fido-3_4_4-33:1.159.2.2
	binutils-csl-sourcerygxx-3_4_4-32:1.128
	newlib-csl-coldfire-4_1-30:1.159
	binutils-csl-coldfire-4_1-30:1.159.2.2
	newlib-csl-sourcerygxx-4_1-30:1.159
	binutils-csl-sourcerygxx-4_1-30:1.159.2.2
	newlib-csl-coldfire-4_1-28:1.159
	binutils-csl-coldfire-4_1-28:1.159.2.2
	binutils-csl-sourcerygxx-4_1-29:1.159.2.2
	newlib-csl-sourcerygxx-4_1-28:1.159
	binutils-csl-sourcerygxx-4_1-28:1.159.2.2
	gdb_6_6-branch:1.166.0.2
	gdb_6_6-2006-11-15-branchpoint:1.166
	newlib-csl-arm-2006q3-27:1.159
	binutils-csl-arm-2006q3-27:1.159.2.2
	newlib-csl-sourcerygxx-4_1-27:1.159
	binutils-csl-sourcerygxx-4_1-27:1.159.2.2
	newlib-csl-arm-2006q3-26:1.159
	binutils-csl-arm-2006q3-26:1.159.2.2
	newlib-csl-sourcerygxx-4_1-26:1.159
	binutils-csl-sourcerygxx-4_1-26:1.159.2.2
	binutils-csl-sourcerygxx-4_1-25:1.159.2.2
	newlib-csl-sourcerygxx-4_1-24:1.159
	binutils-csl-sourcerygxx-4_1-24:1.159.2.2
	newlib-csl-sourcerygxx-4_1-23:1.159
	binutils-csl-sourcerygxx-4_1-23:1.159.2.2
	insight_6_5-20061003-release:1.160
	gdb-csl-symbian-6_4_50_20060226-12:1.158
	newlib-csl-sourcerygxx-4_1-21:1.159
	binutils-csl-sourcerygxx-4_1-21:1.159.2.2
	newlib-csl-arm-2006q3-21:1.159
	binutils-csl-arm-2006q3-21:1.159.2.2
	binutils-csl-sourcerygxx-4_1-22:1.159.2.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.159.2.2
	binutils-csl-sourcerygxx-4_1-20:1.159.2.2
	newlib-csl-arm-2006q3-19:1.159
	binutils-csl-arm-2006q3-19:1.159.2.2
	newlib-csl-sourcerygxx-4_1-19:1.159
	binutils-csl-sourcerygxx-4_1-19:1.159.2.2
	newlib-csl-sourcerygxx-4_1-18:1.159
	binutils-csl-sourcerygxx-4_1-18:1.159.2.2
	binutils-csl-renesas-4_1-9:1.159.2.2
	newlib-csl-sourcerygxx-3_4_4-25:1.164
	gdb-csl-sourcerygxx-3_4_4-25:1.150
	binutils-csl-sourcerygxx-3_4_4-25:1.128
	nickrob-async-20060828-mergepoint:1.164
	gdb-csl-symbian-6_4_50_20060226-11:1.158
	binutils-csl-renesas-4_1-8:1.159.2.2
	binutils-csl-renesas-4_1-7:1.159.2.2
	binutils-csl-renesas-4_1-6:1.159.2.2
	newlib-csl-sourcerygxx-4_1-17:1.159
	gdb-csl-sourcerygxx-4_1-17:1.158
	binutils-csl-sourcerygxx-4_1-17:1.159.2.2
	gdb-csl-20060226-branch-local-2:1.158
	cr-0x5f1:1.164.0.2
	newlib-csl-sourcerygxx-4_1-14:1.159
	gdb-csl-sourcerygxx-4_1-14:1.158
	binutils-csl-sourcerygxx-4_1-14:1.159.2.2
	binutils-csl-sourcerygxx-4_1-15:1.159.2.2
	newlib-csl-sourcerygxx-4_1-13:1.159
	gdb-csl-sourcerygxx-4_1-13:1.158
	binutils-csl-sourcerygxx-4_1-13:1.159.2.2
	binutils-2_17:1.160
	newlib-csl-sourcerygxx-4_1-12:1.159
	gdb-csl-sourcerygxx-4_1-12:1.158
	binutils-csl-sourcerygxx-4_1-12:1.159.2.2
	gdb-csl-sourcerygxx-3_4_4-21:1.158
	binutils-csl-sourcerygxx-3_4_4-21:1.159.2.2
	gdb_6_5-20060621-release:1.160
	binutils-csl-wrs-linux-3_4_4-24:1.128
	binutils-csl-wrs-linux-3_4_4-23:1.128
	newlib-csl-sourcerygxx-4_1-9:1.159
	gdb-csl-sourcerygxx-4_1-9:1.158
	binutils-csl-sourcerygxx-4_1-9:1.159.2.2
	newlib-csl-sourcerygxx-4_1-8:1.159
	gdb-csl-sourcerygxx-4_1-8:1.158
	binutils-csl-sourcerygxx-4_1-8:1.159.2.2
	newlib-csl-sourcerygxx-4_1-7:1.159
	gdb-csl-sourcerygxx-4_1-7:1.158
	binutils-csl-sourcerygxx-4_1-7:1.159.2.2
	newlib-csl-arm-2006q1-6:1.159
	gdb-csl-arm-2006q1-6:1.158
	binutils-csl-arm-2006q1-6:1.159.2.2
	newlib-csl-sourcerygxx-4_1-6:1.159
	gdb-csl-sourcerygxx-4_1-6:1.158
	binutils-csl-sourcerygxx-4_1-6:1.159.2.2
	binutils-csl-wrs-linux-3_4_4-22:1.128
	gdb-csl-symbian-6_4_50_20060226-10:1.158
	gdb-csl-symbian-6_4_50_20060226-9:1.158
	gdb-csl-symbian-6_4_50_20060226-8:1.158
	gdb-csl-coldfire-4_1-11:1.158
	binutils-csl-coldfire-4_1-11:1.159.2.2
	gdb-csl-sourcerygxx-3_4_4-19:1.158
	binutils-csl-sourcerygxx-3_4_4-19:1.159.2.2
	gdb-csl-coldfire-4_1-10:1.158
	gdb_6_5-branch:1.160.0.10
	gdb_6_5-2006-05-14-branchpoint:1.160
	binutils-csl-coldfire-4_1-10:1.159.2.2
	newlib-csl-sourcerygxx-4_1-5:1.159
	gdb-csl-sourcerygxx-4_1-5:1.158
	binutils-csl-sourcerygxx-4_1-5:1.159.2.2
	nickrob-async-20060513-branch:1.160.0.8
	nickrob-async-20060513-branchpoint:1.160
	newlib-csl-sourcerygxx-4_1-4:1.159
	gdb-csl-sourcerygxx-4_1-4:1.158
	binutils-csl-sourcerygxx-4_1-4:1.159.2.2
	msnyder-reverse-20060502-branch:1.160.0.6
	msnyder-reverse-20060502-branchpoint:1.160
	binutils-csl-wrs-linux-3_4_4-21:1.128
	gdb-csl-morpho-4_1-4:1.158
	binutils-csl-morpho-4_1-4:1.159.2.2
	gdb-csl-sourcerygxx-3_4_4-17:1.158
	binutils-csl-sourcerygxx-3_4_4-17:1.159.2.2
	binutils-csl-wrs-linux-3_4_4-20:1.128
	readline_5_1-import-branch:1.160.0.4
	readline_5_1-import-branchpoint:1.160
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.158
	binutils-2_17-branch:1.160.0.2
	binutils-2_17-branchpoint:1.160
	gdb-csl-symbian-20060226-branch:1.158.0.6
	gdb-csl-symbian-20060226-branchpoint:1.158
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.158
	msnyder-reverse-20060331-branch:1.159.0.8
	msnyder-reverse-20060331-branchpoint:1.159
	newlib-autotools-branch:1.159.0.6
	newlib-csl-20060320-branch:1.159.0.4
	newlib-csl-20060320-branchpoint:1.159
	binutils-csl-2_17-branch:1.159.0.2
	binutils-csl-2_17-branchpoint:1.159
	gdb-csl-available-20060303-branch:1.158.0.4
	gdb-csl-available-20060303-branchpoint:1.158
	gdb-csl-20060226-branch:1.158.0.2
	gdb-csl-20060226-branchpoint:1.158
	newlib-1_14_0:1.153
	gdb_6_4-20051202-release:1.149
	msnyder-fork-checkpoint-branch:1.150.0.4
	msnyder-fork-checkpoint-branchpoint:1.150
	gdb-csl-gxxpro-6_3-branch:1.150.0.2
	gdb-csl-gxxpro-6_3-branchpoint:1.150
	gdb_6_4-branch:1.149.0.2
	gdb_6_4-2005-11-01-branchpoint:1.149
	gdb-csl-arm-20051020-branch:1.148.0.2
	gdb-csl-arm-20051020-branchpoint:1.148
	binutils-csl-gxxpro-3_4-branch:1.128.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.128
	binutils-2_16_1:1.128
	msnyder-tracepoint-checkpoint-branch:1.135.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.135
	gdb-csl-arm-20050325-2005-q1b:1.130
	binutils-csl-arm-2005q1b:1.128
	newlib-csl-arm-2005-q1b:1.133
	binutils-2_16:1.128
	newlib-csl-arm-2005-q1a:1.132
	gdb-csl-arm-20050325-2005-q1a:1.130
	binutils-csl-arm-2005q1a:1.128
	csl-arm-20050325-branch:1.130.0.2
	csl-arm-20050325-branchpoint:1.130
	binutils-csl-arm-2005q1-branch:1.128.0.4
	binutils-csl-arm-2005q1-branchpoint:1.128
	binutils-2_16-branch:1.128.0.2
	binutils-2_16-branchpoint:1.128
	newlib-1_13_0:1.122
	csl-arm-2004-q3d:1.118
	gdb_6_3-20041109-release:1.118
	jimb-rda-nptl-branch:1.118.0.4
	jimb-rda-nptl-branchpoint:1.118
	gdb_6_3-branch:1.118.0.2
	gdb_6_3-20041019-branchpoint:1.118
	csl-arm-2004-q3:1.117
	drow_intercu-merge-20040921:1.116
	drow_intercu-merge-20040915:1.116
	jimb-gdb_6_2-e500-branch:1.109.0.6
	jimb-gdb_6_2-e500-branchpoint:1.109
	gdb_6_2-20040730-release:1.109
	gdb_6_2-branch:1.109.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.109
	gdb_6_1_1-20040616-release:1.87
	binutils-2_15:1.86.6.1
	binutils-2_15-branchpoint:1.86
	csl-arm-2004-q1a:1.96
	csl-arm-2004-q1:1.94
	gdb_6_1-2004-04-05-release:1.87
	drow_intercu-merge-20040402:1.93
	drow_intercu-merge-20040327:1.93
	ezannoni_pie-20040323-branch:1.90.0.2
	ezannoni_pie-20040323-branchpoint:1.90
	cagney_tramp-20040321-mergepoint:1.89
	cagney_tramp-20040309-branch:1.87.0.4
	cagney_tramp-20040309-branchpoint:1.87
	gdb_6_1-branch:1.87.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.87
	drow_intercu-20040221-branch:1.86.0.8
	drow_intercu-20040221-branchpoint:1.86
	binutils-2_15-branch:1.86.0.6
	cagney_bfdfile-20040213-branch:1.86.0.4
	cagney_bfdfile-20040213-branchpoint:1.86
	drow-cplus-merge-20040208:1.86
	newlib-1_12_0:1.86
	carlton_dictionary-20040126-merge:1.86
	cagney_bigcore-20040122-branch:1.86.0.2
	cagney_bigcore-20040122-branchpoint:1.86
	drow-cplus-merge-20040113:1.85
	csl-arm-2003-q4:1.83
	drow-cplus-merge-20031224:1.83
	drow-cplus-merge-20031220:1.83
	carlton_dictionary-20031215-merge:1.82
	drow-cplus-merge-20031214:1.82
	carlton-dictionary-20031111-merge:1.81
	gdb_6_0-2003-10-04-release:1.71.2.1
	kettenis_sparc-20030918-branch:1.78.0.6
	kettenis_sparc-20030918-branchpoint:1.78
	carlton_dictionary-20030917-merge:1.78
	ezannoni_pie-20030916-branchpoint:1.78
	ezannoni_pie-20030916-branch:1.78.0.4
	cagney_x86i386-20030821-branch:1.78.0.2
	cagney_x86i386-20030821-branchpoint:1.78
	carlton_dictionary-20030805-merge:1.78
	carlton_dictionary-20030627-merge:1.73
	gdb_6_0-branch:1.71.0.2
	gdb_6_0-2003-06-23-branchpoint:1.71
	jimb-ppc64-linux-20030613-branch:1.70.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.70
	binutils-2_14:1.56.4.2
	cagney_convert-20030606-branch:1.66.0.2
	cagney_convert-20030606-branchpoint:1.66
	cagney_writestrings-20030508-branch:1.58.0.4
	cagney_writestrings-20030508-branchpoint:1.58
	jimb-ppc64-linux-20030528-branch:1.63.0.2
	jimb-ppc64-linux-20030528-branchpoint:1.63
	carlton_dictionary-20030523-merge:1.63
	cagney_fileio-20030521-branch:1.61.0.2
	cagney_fileio-20030521-branchpoint:1.61
	kettenis_i386newframe-20030517-mergepoint:1.59
	jimb-ppc64-linux-20030509-branch:1.58.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.58
	kettenis_i386newframe-20030504-mergepoint:1.58
	carlton_dictionary-20030430-merge:1.57
	binutils-2_14-branch:1.56.0.4
	binutils-2_14-branchpoint:1.56
	kettenis_i386newframe-20030419-branch:1.56.0.2
	kettenis_i386newframe-20030419-branchpoint:1.56
	carlton_dictionary-20030416-merge:1.54
	cagney_frameaddr-20030409-mergepoint:1.54
	kettenis_i386newframe-20030406-branch:1.54.0.8
	kettenis_i386newframe-20030406-branchpoint:1.54
	cagney_frameaddr-20030403-branchpoint:1.54
	cagney_frameaddr-20030403-branch:1.54.0.6
	cagney_framebase-20030330-mergepoint:1.54
	cagney_framebase-20030326-branch:1.54.0.4
	cagney_framebase-20030326-branchpoint:1.54
	cagney_lazyid-20030317-branch:1.54.0.2
	cagney_lazyid-20030317-branchpoint:1.54
	kettenis-i386newframe-20030316-mergepoint:1.54
	offbyone-20030313-branch:1.53.0.2
	offbyone-20030313-branchpoint:1.53
	kettenis-i386newframe-20030308-branch:1.52.0.2
	kettenis-i386newframe-20030308-branchpoint:1.52
	carlton_dictionary-20030305-merge:1.52
	cagney_offbyone-20030303-branch:1.50.0.2
	cagney_offbyone-20030303-branchpoint:1.50
	w32api-2_2:1.45
	mingw-runtime-2_4:1.45
	carlton_dictionary-20030207-merge:1.45
	interps-20030202-branch:1.44.0.2
	interps-20030202-branchpoint:1.44
	cagney-unwind-20030108-branch:1.42.0.2
	cagney-unwind-20030108-branchpoint:1.42
	carlton_dictionary-20021223-merge:1.35
	newlib-1_11_0:1.35
	carlton_dictionary-20021115-merge:1.12
	kseitz_interps-20021105-merge:1.11
	kseitz_interps-20021103-merge:1.11
	drow-cplus-merge-20021020:1.10
	drow-cplus-merge-20021025:1.10
	carlton_dictionary-20021025-merge:1.10
	carlton_dictionary-20021011-merge:1.10
	drow-cplus-branch:1.10.0.2
	drow-cplus-branchpoint:1.10
	binutils_latest_snapshot:1.234;
locks; strict;
comment	@# @;


1.234
date	2013.01.11.11.48.54;	author ebotcazou;	state Exp;
branches;
next	1.233;

1.233
date	2012.11.30.15.02.39;	author jbglaw;	state Exp;
branches;
next	1.232;

1.232
date	2012.10.22.07.32.03;	author ebotcazou;	state Exp;
branches;
next	1.231;

1.231
date	2012.08.26.14.34.39;	author hjl;	state Exp;
branches;
next	1.230;

1.230
date	2011.11.09.18.57.28;	author dj;	state Exp;
branches;
next	1.229;

1.229
date	2011.11.02.15.23.38;	author ro;	state Exp;
branches;
next	1.228;

1.228
date	2011.07.26.18.48.05;	author ian;	state Exp;
branches;
next	1.227;

1.227
date	2011.07.22.18.20.21;	author jason;	state Exp;
branches;
next	1.226;

1.226
date	2011.05.09.17.56.47;	author dougkwan;	state Exp;
branches;
next	1.225;

1.225
date	2011.04.01.13.44.53;	author jsm28;	state Exp;
branches;
next	1.224;

1.224
date	2011.03.24.17.50.32;	author bonzini;	state Exp;
branches
	1.224.2.1;
next	1.223;

1.223
date	2011.03.24.17.31.12;	author bonzini;	state Exp;
branches;
next	1.222;

1.222
date	2011.02.12.14.40.08;	author rwild;	state Exp;
branches;
next	1.221;

1.221
date	2010.11.26.04.56.38;	author aoliva;	state Exp;
branches;
next	1.220;

1.220
date	2010.11.20.19.37.56;	author rwild;	state Exp;
branches;
next	1.219;

1.219
date	2010.11.19.22.06.27;	author ian;	state Exp;
branches;
next	1.218;

1.218
date	2010.10.20.15.43.40;	author ian;	state Exp;
branches;
next	1.217;

1.217
date	2010.07.18.08.12.40;	author bonzini;	state Exp;
branches;
next	1.216;

1.216
date	2010.02.17.11.02.54;	author nickc;	state Exp;
branches;
next	1.215;

1.215
date	2010.02.17.10.05.51;	author nickc;	state Exp;
branches;
next	1.214;

1.214
date	2010.01.22.16.28.24;	author amylaar;	state Exp;
branches;
next	1.213;

1.213
date	2010.01.07.20.00.52;	author rwild;	state Exp;
branches;
next	1.212;

1.212
date	2009.11.16.18.42.36;	author aoliva;	state Exp;
branches;
next	1.211;

1.211
date	2009.10.07.05.57.49;	author ian;	state Exp;
branches;
next	1.210;

1.210
date	2009.09.07.00.44.07;	author aoliva;	state Exp;
branches;
next	1.209;

1.209
date	2009.09.02.07.05.02;	author bonzini;	state Exp;
branches;
next	1.208;

1.208
date	2009.08.19.19.49.26;	author rwild;	state Exp;
branches;
next	1.207;

1.207
date	2009.06.03.05.40.47;	author rwild;	state Exp;
branches;
next	1.206;

1.206
date	2009.06.02.08.23.45;	author aoliva;	state Exp;
branches;
next	1.205;

1.205
date	2009.05.27.07.30.42;	author aoliva;	state Exp;
branches;
next	1.204;

1.204
date	2009.05.19.01.11.12;	author aoliva;	state Exp;
branches;
next	1.203;

1.203
date	2009.05.19.00.01.50;	author aoliva;	state Exp;
branches;
next	1.202;

1.202
date	2009.05.12.18.16.01;	author aoliva;	state Exp;
branches;
next	1.201;

1.201
date	2009.04.25.12.25.01;	author ebotcazou;	state Exp;
branches;
next	1.200;

1.200
date	2009.04.09.15.39.52;	author hjl;	state Exp;
branches;
next	1.199;

1.199
date	2009.02.05.15.45.55;	author schwab;	state Exp;
branches;
next	1.198;

1.198
date	2008.11.27.17.14.57;	author jsm28;	state Exp;
branches;
next	1.197;

1.197
date	2008.11.14.15.10.50;	author drow;	state Exp;
branches;
next	1.196;

1.196
date	2008.10.24.21.58.34;	author drow;	state Exp;
branches;
next	1.195;

1.195
date	2008.10.22.13.35.30;	author drow;	state Exp;
branches;
next	1.194;

1.194
date	2008.09.04.02.18.16;	author aaronwl;	state Exp;
branches;
next	1.193;

1.193
date	2008.08.25.17.26.06;	author dj;	state Exp;
branches;
next	1.192;

1.192
date	2008.07.30.15.03.56;	author bonzini;	state Exp;
branches;
next	1.191;

1.191
date	2008.06.16.21.30.58;	author rwild;	state Exp;
branches;
next	1.190;

1.190
date	2008.06.08.16.19.22;	author jsm28;	state Exp;
branches;
next	1.189;

1.189
date	2008.04.18.11.07.30;	author bonzini;	state Exp;
branches;
next	1.188;

1.188
date	2008.04.12.18.53.52;	author hp;	state Exp;
branches;
next	1.187;

1.187
date	2008.03.27.14.16.54;	author bonzini;	state Exp;
branches;
next	1.186;

1.186
date	2008.02.20.14.26.58;	author bonzini;	state Exp;
branches;
next	1.185;

1.185
date	2007.12.18.07.34.57;	author rsandifo;	state Exp;
branches;
next	1.184;

1.184
date	2007.10.01.07.55.47;	author bonzini;	state Exp;
branches;
next	1.183;

1.183
date	2007.08.18.15.19.09;	author jsm28;	state Exp;
branches;
next	1.182;

1.182
date	2007.08.17.00.03.44;	author aoliva;	state Exp;
branches;
next	1.181;

1.181
date	2007.07.09.09.16.04;	author nickc;	state Exp;
branches;
next	1.180;

1.180
date	2007.06.14.08.52.42;	author bonzini;	state Exp;
branches;
next	1.179;

1.179
date	2007.06.06.23.12.21;	author bje;	state Exp;
branches;
next	1.178;

1.178
date	2007.05.16.09.03.22;	author bonzini;	state Exp;
branches;
next	1.177;

1.177
date	2007.03.05.23.19.10;	author dj;	state Exp;
branches;
next	1.176;

1.176
date	2007.02.09.19.24.42;	author bonzini;	state Exp;
branches;
next	1.175;

1.175
date	2007.02.09.15.15.38;	author drow;	state Exp;
branches;
next	1.174;

1.174
date	2007.01.31.22.23.37;	author schwab;	state Exp;
branches;
next	1.173;

1.173
date	2007.01.11.11.22.52;	author bonzini;	state Exp;
branches;
next	1.172;

1.172
date	2007.01.09.14.09.57;	author nickc;	state Exp;
branches;
next	1.171;

1.171
date	2007.01.04.04.32.35;	author drow;	state Exp;
branches;
next	1.170;

1.170
date	2006.12.29.17.09.59;	author bonzini;	state Exp;
branches;
next	1.169;

1.169
date	2006.12.19.12.52.57;	author bonzini;	state Exp;
branches;
next	1.168;

1.168
date	2006.12.11.06.47.55;	author amodra;	state Exp;
branches;
next	1.167;

1.167
date	2006.11.17.10.35.45;	author bonzini;	state Exp;
branches;
next	1.166;

1.166
date	2006.11.14.23.26.39;	author dj;	state Exp;
branches;
next	1.165;

1.165
date	2006.10.17.04.23.49;	author dj;	state Exp;
branches;
next	1.164;

1.164
date	2006.07.19.17.06.06;	author bonzini;	state Exp;
branches;
next	1.163;

1.163
date	2006.06.15.06.25.23;	author bonzini;	state Exp;
branches;
next	1.162;

1.162
date	2006.06.07.22.33.16;	author carlos;	state Exp;
branches;
next	1.161;

1.161
date	2006.05.25.08.01.03;	author bonzini;	state Exp;
branches;
next	1.160;

1.160
date	2006.04.06.21.49.25;	author carlos;	state Exp;
branches;
next	1.159;

1.159
date	2006.03.14.16.10.08;	author bonzini;	state Exp;
branches
	1.159.2.1;
next	1.158;

1.158
date	2006.02.20.08.34.53;	author bonzini;	state Exp;
branches;
next	1.157;

1.157
date	2006.01.05.17.45.45;	author aoliva;	state Exp;
branches;
next	1.156;

1.156
date	2006.01.04.13.11.21;	author bonzini;	state Exp;
branches;
next	1.155;

1.155
date	2005.12.20.17.21.54;	author bonzini;	state Exp;
branches;
next	1.154;

1.154
date	2005.12.19.17.33.45;	author bonzini;	state Exp;
branches;
next	1.153;

1.153
date	2005.12.15.14.36.17;	author bonzini;	state Exp;
branches;
next	1.152;

1.152
date	2005.12.14.18.00.22;	author bonzini;	state Exp;
branches;
next	1.151;

1.151
date	2005.12.05.15.16.04;	author bonzini;	state Exp;
branches;
next	1.150;

1.150
date	2005.11.11.21.45.22;	author drow;	state Exp;
branches;
next	1.149;

1.149
date	2005.10.22.10.37.55;	author bonzini;	state Exp;
branches;
next	1.148;

1.148
date	2005.10.06.15.24.36;	author drow;	state Exp;
branches;
next	1.147;

1.147
date	2005.10.05.15.59.52;	author bonzini;	state Exp;
branches;
next	1.146;

1.146
date	2005.10.05.07.30.22;	author bonzini;	state Exp;
branches;
next	1.145;

1.145
date	2005.09.29.01.00.23;	author geoffk;	state Exp;
branches;
next	1.144;

1.144
date	2005.08.17.15.52.29;	author cpg;	state Exp;
branches;
next	1.143;

1.143
date	2005.08.08.09.21.05;	author bonzini;	state Exp;
branches;
next	1.142;

1.142
date	2005.07.27.20.22.35;	author mmitchel;	state Exp;
branches;
next	1.141;

1.141
date	2005.07.27.18.00.57;	author mmitchel;	state Exp;
branches;
next	1.140;

1.140
date	2005.07.24.13.57.01;	author bonzini;	state Exp;
branches;
next	1.139;

1.139
date	2005.07.16.02.36.38;	author kcook;	state Exp;
branches;
next	1.138;

1.138
date	2005.07.11.08.03.32;	author bonzini;	state Exp;
branches;
next	1.137;

1.137
date	2005.07.07.15.38.42;	author schwab;	state Exp;
branches;
next	1.136;

1.136
date	2005.06.23.07.34.15;	author bonzini;	state Exp;
branches;
next	1.135;

1.135
date	2005.05.25.14.23.03;	author bonzini;	state Exp;
branches;
next	1.134;

1.134
date	2005.05.04.15.42.05;	author bonzini;	state Exp;
branches;
next	1.133;

1.133
date	2005.04.06.06.23.22;	author bonzini;	state Exp;
branches;
next	1.132;

1.132
date	2005.04.05.08.16.28;	author bonzini;	state Exp;
branches;
next	1.131;

1.131
date	2005.03.30.08.39.15;	author bonzini;	state Exp;
branches;
next	1.130;

1.130
date	2005.03.22.00.49.15;	author zack;	state Exp;
branches;
next	1.129;

1.129
date	2005.03.16.17.46.21;	author dj;	state Exp;
branches;
next	1.128;

1.128
date	2005.02.28.15.13.31;	author bonzini;	state Exp;
branches;
next	1.127;

1.127
date	2005.02.28.14.06.59;	author bonzini;	state Exp;
branches;
next	1.126;

1.126
date	2005.01.19.00.33.04;	author kcook;	state Exp;
branches;
next	1.125;

1.125
date	2005.01.03.14.02.25;	author bonzini;	state Exp;
branches;
next	1.124;

1.124
date	2004.12.28.17.39.43;	author bonzini;	state Exp;
branches;
next	1.123;

1.123
date	2004.12.27.21.41.05;	author dj;	state Exp;
branches;
next	1.122;

1.122
date	2004.12.08.20.29.58;	author dje;	state Exp;
branches;
next	1.121;

1.121
date	2004.12.08.18.57.27;	author dj;	state Exp;
branches;
next	1.120;

1.120
date	2004.12.02.23.50.22;	author echristo;	state Exp;
branches;
next	1.119;

1.119
date	2004.11.13.17.42.50;	author mrs;	state Exp;
branches;
next	1.118;

1.118
date	2004.10.06.10.15.23;	author bonzini;	state Exp;
branches;
next	1.117;

1.117
date	2004.09.24.00.40.20;	author hjl;	state Exp;
branches;
next	1.116;

1.116
date	2004.09.10.02.19.33;	author dberlin;	state Exp;
branches;
next	1.115;

1.115
date	2004.09.01.07.48.07;	author bonzini;	state Exp;
branches;
next	1.114;

1.114
date	2004.08.30.08.05.41;	author bonzini;	state Exp;
branches;
next	1.113;

1.113
date	2004.08.18.06.51.38;	author bonzini;	state Exp;
branches;
next	1.112;

1.112
date	2004.08.06.06.44.46;	author bonzini;	state Exp;
branches;
next	1.111;

1.111
date	2004.08.03.09.36.03;	author bonzini;	state Exp;
branches;
next	1.110;

1.110
date	2004.07.12.12.03.40;	author bonzini;	state Exp;
branches;
next	1.109;

1.109
date	2004.07.08.19.46.05;	author aoliva;	state Exp;
branches;
next	1.108;

1.108
date	2004.07.02.07.56.06;	author bonzini;	state Exp;
branches;
next	1.107;

1.107
date	2004.06.23.09.36.02;	author bonzini;	state Exp;
branches;
next	1.106;

1.106
date	2004.06.23.08.36.45;	author bonzini;	state Exp;
branches;
next	1.105;

1.105
date	2004.06.09.08.32.33;	author bonzini;	state Exp;
branches;
next	1.104;

1.104
date	2004.06.01.08.11.41;	author bonzini;	state Exp;
branches;
next	1.103;

1.103
date	2004.06.01.07.42.21;	author bonzini;	state Exp;
branches;
next	1.102;

1.102
date	2004.05.25.20.36.50;	author dj;	state Exp;
branches;
next	1.101;

1.101
date	2004.05.24.11.08.48;	author bonzini;	state Exp;
branches;
next	1.100;

1.100
date	2004.05.24.10.45.13;	author bonzini;	state Exp;
branches;
next	1.99;

1.99
date	2004.05.21.19.08.53;	author bonzini;	state Exp;
branches;
next	1.98;

1.98
date	2004.05.18.02.00.48;	author zack;	state Exp;
branches;
next	1.97;

1.97
date	2004.05.13.18.14.27;	author dj;	state Exp;
branches;
next	1.96;

1.96
date	2004.04.27.18.25.00;	author dj;	state Exp;
branches;
next	1.95;

1.95
date	2004.04.16.07.17.44;	author wilson;	state Exp;
branches;
next	1.94;

1.94
date	2004.04.09.05.17.44;	author neroden;	state Exp;
branches;
next	1.93;

1.93
date	2004.03.25.01.38.31;	author neroden;	state Exp;
branches;
next	1.92;

1.92
date	2004.03.24.22.34.30;	author neroden;	state Exp;
branches;
next	1.91;

1.91
date	2004.03.24.04.31.23;	author neroden;	state Exp;
branches;
next	1.90;

1.90
date	2004.03.22.11.59.20;	author neroden;	state Exp;
branches;
next	1.89;

1.89
date	2004.03.17.19.26.07;	author neroden;	state Exp;
branches;
next	1.88;

1.88
date	2004.03.16.00.04.59;	author neroden;	state Exp;
branches;
next	1.87;

1.87
date	2004.02.28.22.03.47;	author neroden;	state Exp;
branches
	1.87.4.1;
next	1.86;

1.86
date	2004.01.14.21.13.34;	author dj;	state Exp;
branches
	1.86.6.1
	1.86.8.1;
next	1.85;

1.85
date	2004.01.05.04.38.54;	author neroden;	state Exp;
branches;
next	1.84;

1.84
date	2004.01.03.18.31.06;	author neroden;	state Exp;
branches;
next	1.83;

1.83
date	2003.12.19.15.13.56;	author neroden;	state Exp;
branches;
next	1.82;

1.82
date	2003.11.19.19.56.22;	author dj;	state Exp;
branches;
next	1.81;

1.81
date	2003.10.13.21.45.29;	author neroden;	state Exp;
branches;
next	1.80;

1.80
date	2003.10.08.21.29.04;	author dj;	state Exp;
branches;
next	1.79;

1.79
date	2003.09.20.21.19.01;	author neroden;	state Exp;
branches;
next	1.78;

1.78
date	2003.08.02.02.00.38;	author neroden;	state Exp;
branches;
next	1.77;

1.77
date	2003.07.28.03.27.46;	author neroden;	state Exp;
branches;
next	1.76;

1.76
date	2003.07.22.19.03.26;	author aoliva;	state Exp;
branches;
next	1.75;

1.75
date	2003.07.13.20.49.42;	author neroden;	state Exp;
branches;
next	1.74;

1.74
date	2003.07.06.21.37.59;	author hjl;	state Exp;
branches;
next	1.73;

1.73
date	2003.06.23.21.30.43;	author kseitz;	state Exp;
branches;
next	1.72;

1.72
date	2003.06.23.20.36.40;	author neroden;	state Exp;
branches;
next	1.71;

1.71
date	2003.06.17.21.59.09;	author neroden;	state Exp;
branches
	1.71.2.1;
next	1.70;

1.70
date	2003.06.12.16.06.52;	author dj;	state Exp;
branches;
next	1.69;

1.69
date	2003.06.10.22.25.49;	author neroden;	state Exp;
branches;
next	1.68;

1.68
date	2003.06.10.13.37.14;	author neroden;	state Exp;
branches;
next	1.67;

1.67
date	2003.06.10.02.11.57;	author neroden;	state Exp;
branches;
next	1.66;

1.66
date	2003.06.03.20.44.31;	author neroden;	state Exp;
branches;
next	1.65;

1.65
date	2003.06.03.16.36.52;	author neroden;	state Exp;
branches;
next	1.64;

1.64
date	2003.05.28.19.16.29;	author dj;	state Exp;
branches;
next	1.63;

1.63
date	2003.05.22.02.36.57;	author dj;	state Exp;
branches;
next	1.62;

1.62
date	2003.05.21.21.08.20;	author dj;	state Exp;
branches;
next	1.61;

1.61
date	2003.05.20.01.05.39;	author neroden;	state Exp;
branches;
next	1.60;

1.60
date	2003.05.18.15.49.06;	author neroden;	state Exp;
branches;
next	1.59;

1.59
date	2003.05.16.18.09.25;	author aj;	state Exp;
branches;
next	1.58;

1.58
date	2003.05.03.01.31.50;	author cgd;	state Exp;
branches;
next	1.57;

1.57
date	2003.04.28.02.24.35;	author drow;	state Exp;
branches;
next	1.56;

1.56
date	2003.04.19.00.19.40;	author dj;	state Exp;
branches
	1.56.2.1
	1.56.4.1;
next	1.55;

1.55
date	2003.04.17.21.30.51;	author dj;	state Exp;
branches;
next	1.54;

1.54
date	2003.03.14.20.49.14;	author neroden;	state Exp;
branches;
next	1.53;

1.53
date	2003.03.12.20.47.07;	author neroden;	state Exp;
branches;
next	1.52;

1.52
date	2003.03.05.01.50.52;	author neroden;	state Exp;
branches
	1.52.2.1;
next	1.51;

1.51
date	2003.03.04.07.48.05;	author neroden;	state Exp;
branches;
next	1.50;

1.50
date	2003.02.28.18.03.31;	author neroden;	state Exp;
branches;
next	1.49;

1.49
date	2003.02.21.01.55.12;	author dj;	state Exp;
branches;
next	1.48;

1.48
date	2003.02.19.23.40.12;	author aoliva;	state Exp;
branches;
next	1.47;

1.47
date	2003.02.18.20.12.50;	author jason;	state Exp;
branches;
next	1.46;

1.46
date	2003.02.14.21.15.37;	author dj;	state Exp;
branches;
next	1.45;

1.45
date	2003.02.06.20.36.19;	author kseitz;	state Exp;
branches;
next	1.44;

1.44
date	2003.01.31.19.09.32;	author fche;	state Exp;
branches;
next	1.43;

1.43
date	2003.01.10.21.43.31;	author neroden;	state Exp;
branches;
next	1.42;

1.42
date	2003.01.09.20.50.25;	author dj;	state Exp;
branches;
next	1.41;

1.41
date	2002.12.29.19.05.04;	author aoliva;	state Exp;
branches;
next	1.40;

1.40
date	2002.12.28.16.25.00;	author aoliva;	state Exp;
branches;
next	1.39;

1.39
date	2002.12.28.09.13.56;	author neroden;	state Exp;
branches;
next	1.38;

1.38
date	2002.12.28.07.09.15;	author neroden;	state Exp;
branches;
next	1.37;

1.37
date	2002.12.24.17.23.30;	author schwab;	state Exp;
branches;
next	1.36;

1.36
date	2002.12.23.17.53.40;	author neroden;	state Exp;
branches;
next	1.35;

1.35
date	2002.12.19.20.27.11;	author neroden;	state Exp;
branches;
next	1.34;

1.34
date	2002.12.19.11.05.14;	author schwab;	state Exp;
branches;
next	1.33;

1.33
date	2002.12.19.00.50.32;	author hjl;	state Exp;
branches;
next	1.32;

1.32
date	2002.12.18.18.35.31;	author neroden;	state Exp;
branches;
next	1.31;

1.31
date	2002.12.18.05.23.49;	author neroden;	state Exp;
branches;
next	1.30;

1.30
date	2002.12.17.20.38.05;	author jason;	state Exp;
branches;
next	1.29;

1.29
date	2002.12.14.08.35.49;	author jason;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.13.22.59.14;	author neroden;	state Exp;
branches;
next	1.27;

1.27
date	2002.12.12.07.04.28;	author aoliva;	state Exp;
branches;
next	1.26;

1.26
date	2002.12.11.04.00.09;	author neroden;	state Exp;
branches;
next	1.25;

1.25
date	2002.12.08.22.39.43;	author dj;	state Exp;
branches;
next	1.24;

1.24
date	2002.12.06.20.11.59;	author dj;	state Exp;
branches;
next	1.23;

1.23
date	2002.12.05.18.34.48;	author neroden;	state Exp;
branches;
next	1.22;

1.22
date	2002.12.04.01.45.35;	author neroden;	state Exp;
branches;
next	1.21;

1.21
date	2002.12.03.22.54.00;	author neroden;	state Exp;
branches;
next	1.20;

1.20
date	2002.12.03.21.13.06;	author neroden;	state Exp;
branches;
next	1.19;

1.19
date	2002.12.03.04.46.25;	author neroden;	state Exp;
branches;
next	1.18;

1.18
date	2002.12.02.03.26.59;	author neroden;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.02.03.24.13;	author neroden;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.01.12.01.26;	author neroden;	state Exp;
branches;
next	1.15;

1.15
date	2002.12.01.11.32.58;	author neroden;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.30.01.59.39;	author neroden;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.29.21.33.10;	author neroden;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.14.22.42.36;	author dj;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.26.03.57.38;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.03.19.08.53;	author neroden;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2002.10.02.19.14.25;	author neroden;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.02.06.29.04;	author neroden;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.02.06.22.08;	author neroden;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.01.23.35.42;	author neroden;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.29.15.59.34;	author neroden;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.26.04.25.16;	author neroden;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.25.17.25.27;	author neroden;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.25.16.53.08;	author neroden;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.23.01.30;	author neroden;	state Exp;
branches;
next	;

1.224.2.1
date	2011.05.17.21.24.52;	author brobecke;	state Exp;
branches;
next	;

1.159.2.1
date	2006.04.03.15.44.45;	author carlos;	state Exp;
branches;
next	1.159.2.2;

1.159.2.2
date	2006.04.12.19.06.01;	author carlos;	state Exp;
branches;
next	;

1.87.4.1
date	2004.03.21.23.57.22;	author cagney;	state Exp;
branches;
next	;

1.86.6.1
date	2004.05.07.06.32.28;	author drow;	state Exp;
branches;
next	;

1.86.8.1
date	2004.03.27.17.37.28;	author drow;	state Exp;
branches;
next	1.86.8.2;

1.86.8.2
date	2004.09.16.17.00.04;	author drow;	state Exp;
branches;
next	;

1.71.2.1
date	2003.06.25.03.24.40;	author kseitz;	state Exp;
branches;
next	;

1.56.2.1
date	2003.05.04.11.37.34;	author kettenis;	state Exp;
branches;
next	1.56.2.2;

1.56.2.2
date	2003.05.18.09.43.33;	author kettenis;	state Exp;
branches;
next	;

1.56.4.1
date	2003.04.28.02.25.36;	author drow;	state Exp;
branches;
next	1.56.4.2;

1.56.4.2
date	2003.05.03.22.10.45;	author cgd;	state Exp;
branches;
next	;

1.52.2.1
date	2003.03.16.14.01.40;	author kettenis;	state Exp;
branches;
next	;

1.10.2.1
date	2003.12.14.20.26.31;	author drow;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2003.12.20.18.16.44;	author drow;	state Exp;
branches;
next	1.10.2.3;

1.10.2.3
date	2004.01.13.16.11.31;	author drow;	state Exp;
branches;
next	1.10.2.4;

1.10.2.4
date	2004.02.09.19.43.22;	author drow;	state Exp;
branches;
next	;


desc
@@


1.234
log
@        * Makefile.tpl (BOOT_ADAFLAGS): Remove -gnata.
        * Makefile.in: Regenerate.
@
text
@[+ AutoGen5 template -*- Mode: Makefile -*-
in
+]

# Makefile.in is generated from Makefile.tpl by 'autogen Makefile.def'.
#
# Makefile for directory with subdirs to build.
#   Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
#   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
#   Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.
#

# First, test for a proper version of make, but only where one is required.

@@if gcc
ifeq (,$(.VARIABLES)) # The variable .VARIABLES, new with 3.80, is never empty.
$(error GNU make version 3.80 or newer is required.)
endif
@@endif gcc

# -------------------------------
# Standard Autoconf-set variables
# -------------------------------
VPATH=@@srcdir@@

build_alias=@@build_noncanonical@@
build_vendor=@@build_vendor@@
build_os=@@build_os@@
build=@@build@@
host_alias=@@host_noncanonical@@
host_vendor=@@host_vendor@@
host_os=@@host_os@@
host=@@host@@
target_alias=@@target_noncanonical@@
target_vendor=@@target_vendor@@
target_os=@@target_os@@
target=@@target@@

program_transform_name = @@program_transform_name@@

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

srcdir = @@srcdir@@

bindir = @@bindir@@
sbindir = @@sbindir@@
libexecdir = @@libexecdir@@
datadir = @@datadir@@
sysconfdir = @@sysconfdir@@
sharedstatedir = @@sharedstatedir@@
localstatedir = @@localstatedir@@
libdir = @@libdir@@
includedir = @@includedir@@
oldincludedir = @@oldincludedir@@
infodir = @@infodir@@
datarootdir = @@datarootdir@@
docdir = @@docdir@@
pdfdir = @@pdfdir@@
htmldir = @@htmldir@@
mandir = @@mandir@@
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_SCRIPT = @@INSTALL_SCRIPT@@
INSTALL_DATA = @@INSTALL_DATA@@
LN = @@LN@@
LN_S = @@LN_S@@
MAINT = @@MAINT@@
MAINTAINER_MODE_FALSE = @@MAINTAINER_MODE_FALSE@@
MAINTAINER_MODE_TRUE = @@MAINTAINER_MODE_TRUE@@

# -------------------------------------------------
# Miscellaneous non-standard autoconf-set variables
# -------------------------------------------------

# The gcc driver likes to know the arguments it was configured with.
TOPLEVEL_CONFIGURE_ARGUMENTS=@@TOPLEVEL_CONFIGURE_ARGUMENTS@@

tooldir = @@tooldir@@
build_tooldir = @@build_tooldir@@

# This is the name of the environment variable used for the path to
# the libraries.
RPATH_ENVVAR = @@RPATH_ENVVAR@@

# On targets where RPATH_ENVVAR is PATH, a subdirectory of the GCC build path
# is used instead of the directory itself to avoid including built
# executables in PATH.
GCC_SHLIB_SUBDIR = @@GCC_SHLIB_SUBDIR@@

# Build programs are put under this directory.
BUILD_SUBDIR = @@build_subdir@@
# This is set by the configure script to the arguments to use when configuring
# directories built for the build system.
BUILD_CONFIGARGS = @@build_configargs@@ --with-build-subdir="$(BUILD_SUBDIR)"

# Linker flags to use on the host, for stage1 or when not
# bootstrapping.
STAGE1_LDFLAGS = @@stage1_ldflags@@

# Libraries to use on the host, for stage1 or when not bootstrapping.
STAGE1_LIBS = @@stage1_libs@@

# Linker flags to use for stage2 and later.
POSTSTAGE1_LDFLAGS = @@poststage1_ldflags@@

# Libraries to use for stage2 and later.
POSTSTAGE1_LIBS = @@poststage1_libs@@

# This is the list of variables to export in the environment when
# configuring any subdirectory.  It must also be exported whenever
# recursing into a build directory in case that directory's Makefile
# re-runs configure.
BASE_EXPORTS = \
	FLEX="$(FLEX)"; export FLEX; \
	LEX="$(LEX)"; export LEX; \
	BISON="$(BISON)"; export BISON; \
	YACC="$(YACC)"; export YACC; \
	M4="$(M4)"; export M4; \
	SED="$(SED)"; export SED; \
	AWK="$(AWK)"; export AWK; \
	MAKEINFO="$(MAKEINFO)"; export MAKEINFO;

# This is the list of variables to export in the environment when
# configuring subdirectories for the build system.
BUILD_EXPORTS = \
	$(BASE_EXPORTS) \
	AR="$(AR_FOR_BUILD)"; export AR; \
	AS="$(AS_FOR_BUILD)"; export AS; \
	CC="$(CC_FOR_BUILD)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_BUILD)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CXX="$(CXX_FOR_BUILD)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_BUILD)"; export GCJ; \
	GFORTRAN="$(GFORTRAN_FOR_BUILD)"; export GFORTRAN; \
	GOC="$(GOC_FOR_BUILD)"; export GOC; \
	GOCFLAGS="$(GOCFLAGS_FOR_BUILD)"; export GOCFLAGS; \
	DLLTOOL="$(DLLTOOL_FOR_BUILD)"; export DLLTOOL; \
	LD="$(LD_FOR_BUILD)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_BUILD)"; export LDFLAGS; \
	NM="$(NM_FOR_BUILD)"; export NM; \
	RANLIB="$(RANLIB_FOR_BUILD)"; export RANLIB; \
	WINDRES="$(WINDRES_FOR_BUILD)"; export WINDRES; \
	WINDMC="$(WINDMC_FOR_BUILD)"; export WINDMC;

# These variables must be set on the make command line for directories
# built for the build system to override those in BASE_FLAGS_TO_PASSS.
EXTRA_BUILD_FLAGS = \
	CFLAGS="$(CFLAGS_FOR_BUILD)" \
	LDFLAGS="$(LDFLAGS_FOR_BUILD)"

# This is the list of directories to built for the host system.
SUBDIRS = @@configdirs@@
TARGET_CONFIGDIRS = @@target_configdirs@@
# This is set by the configure script to the arguments to use when configuring
# directories built for the host system.
HOST_CONFIGARGS = @@host_configargs@@
# Host programs are put under this directory, which is . except if building
# with srcdir=..
HOST_SUBDIR = @@host_subdir@@
# This is the list of variables to export in the environment when
# configuring subdirectories for the host system.  We need to pass
# some to the GCC configure because of its hybrid host/target nature.
HOST_EXPORTS = \
	$(BASE_EXPORTS) \
	CC="$(CC)"; export CC; \
	ADA_CFLAGS="$(ADA_CFLAGS)"; export ADA_CFLAGS; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	GCJ="$(GCJ)"; export GCJ; \
	GFORTRAN="$(GFORTRAN)"; export GFORTRAN; \
	GOC="$(GOC)"; export GOC; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	LDFLAGS="$(STAGE1_LDFLAGS) $(LDFLAGS)"; export LDFLAGS; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	WINDMC="$(WINDMC)"; export WINDMC; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	READELF="$(READELF)"; export READELF; \
	AR_FOR_TARGET="$(AR_FOR_TARGET)"; export AR_FOR_TARGET; \
	AS_FOR_TARGET="$(AS_FOR_TARGET)"; export AS_FOR_TARGET; \
	GCC_FOR_TARGET="$(GCC_FOR_TARGET)"; export GCC_FOR_TARGET; \
	LD_FOR_TARGET="$(LD_FOR_TARGET)"; export LD_FOR_TARGET; \
	NM_FOR_TARGET="$(NM_FOR_TARGET)"; export NM_FOR_TARGET; \
	OBJDUMP_FOR_TARGET="$(OBJDUMP_FOR_TARGET)"; export OBJDUMP_FOR_TARGET; \
	RANLIB_FOR_TARGET="$(RANLIB_FOR_TARGET)"; export RANLIB_FOR_TARGET; \
	READELF_FOR_TARGET="$(READELF_FOR_TARGET)"; export READELF_FOR_TARGET; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	HOST_LIBS="$(STAGE1_LIBS)"; export HOST_LIBS; \
	GMPLIBS="$(HOST_GMPLIBS)"; export GMPLIBS; \
	GMPINC="$(HOST_GMPINC)"; export GMPINC; \
	ISLINC="$(HOST_ISLINC)"; export ISLINC; \
	CLOOGLIBS="$(HOST_CLOOGLIBS)"; export CLOOGLIBS; \
	CLOOGINC="$(HOST_CLOOGINC)"; export CLOOGINC; \
	LIBELFLIBS="$(HOST_LIBELFLIBS)" ; export LIBELFLIBS; \
	LIBELFINC="$(HOST_LIBELFINC)" ; export LIBELFINC; \
@@if gcc-bootstrap
	$(RPATH_ENVVAR)=`echo "$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \
@@endif gcc-bootstrap
	$(RPATH_ENVVAR)=`echo "$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);

POSTSTAGE1_CXX_EXPORT = \
	CXX='$(CXX)'; export CXX; \
	CXX_FOR_BUILD='$(CXX_FOR_BUILD)'; export CXX_FOR_BUILD;
@@if target-libstdc++-v3-bootstrap
# Override the above if we're bootstrapping C++.
POSTSTAGE1_CXX_EXPORT = \
	CXX="$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/xg++$(exeext) \
	  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ -nostdinc++ \
	  -B$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs \
	  -B$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs \
	  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include/$(TARGET_SUBDIR) \
	  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include \
	  -I$$s/libstdc++-v3/libsupc++ \
	  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs \
	  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs"; \
	  export CXX; \
	CXX_FOR_BUILD="$$CXX"; export CXX_FOR_BUILD;
@@endif target-libstdc++-v3-bootstrap

# Similar, for later GCC stages.
POSTSTAGE1_HOST_EXPORTS = \
	$(HOST_EXPORTS) \
	CC="$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/xgcc$(exeext) \
	  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ \
	  $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS"; export CC; \
	CC_FOR_BUILD="$$CC"; export CC_FOR_BUILD; \
	$(POSTSTAGE1_CXX_EXPORT) \
	GNATBIND="$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind"; export GNATBIND; \
	LDFLAGS="$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)"; export LDFLAGS; \
	HOST_LIBS="$(POSTSTAGE1_LIBS)"; export HOST_LIBS;

# Target libraries are put under this directory:
TARGET_SUBDIR = @@target_subdir@@
# This is set by the configure script to the arguments to use when configuring
# directories built for the target.
TARGET_CONFIGARGS = @@target_configargs@@ --with-target-subdir="$(TARGET_SUBDIR)"
# This is the list of variables to export in the environment when
# configuring subdirectories for the target system.
BASE_TARGET_EXPORTS = \
	$(BASE_EXPORTS) \
	AR="$(AR_FOR_TARGET)"; export AR; \
	AS="$(COMPILER_AS_FOR_TARGET)"; export AS; \
	CC="$(CC_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS"; export CC; \
	CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CPPFLAGS="$(CPPFLAGS_FOR_TARGET)"; export CPPFLAGS; \
	CXXFLAGS="$(CXXFLAGS_FOR_TARGET)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS"; export GCJ; \
	GFORTRAN="$(GFORTRAN_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS"; export GFORTRAN; \
	GOC="$(GOC_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS"; export GOC; \
	DLLTOOL="$(DLLTOOL_FOR_TARGET)"; export DLLTOOL; \
	LD="$(COMPILER_LD_FOR_TARGET)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_TARGET)"; export LDFLAGS; \
	LIPO="$(LIPO_FOR_TARGET)"; export LIPO; \
	NM="$(COMPILER_NM_FOR_TARGET)"; export NM; \
	OBJDUMP="$(OBJDUMP_FOR_TARGET)"; export OBJDUMP; \
	RANLIB="$(RANLIB_FOR_TARGET)"; export RANLIB; \
	READELF="$(READELF_FOR_TARGET)"; export READELF; \
	STRIP="$(STRIP_FOR_TARGET)"; export STRIP; \
	WINDRES="$(WINDRES_FOR_TARGET)"; export WINDRES; \
	WINDMC="$(WINDMC_FOR_TARGET)"; export WINDMC; \
@@if gcc-bootstrap
	$(RPATH_ENVVAR)=`echo "$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \
@@endif gcc-bootstrap
	$(RPATH_ENVVAR)=`echo "$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \
	TARGET_CONFIGDIRS="$(TARGET_CONFIGDIRS)"; export TARGET_CONFIGDIRS;

RAW_CXX_TARGET_EXPORTS = \
	$(BASE_TARGET_EXPORTS) \
	CXX_FOR_TARGET="$(RAW_CXX_FOR_TARGET)"; export CXX_FOR_TARGET; \
	CXX="$(RAW_CXX_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS"; export CXX;

NORMAL_TARGET_EXPORTS = \
	$(BASE_TARGET_EXPORTS) \
	CXX="$(CXX_FOR_TARGET) $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS"; export CXX;

# Where to find GMP
HOST_GMPLIBS = @@gmplibs@@
HOST_GMPINC = @@gmpinc@@

# Where to find ISL
HOST_ISLINC = @@islinc@@

# Where to find CLOOG
HOST_CLOOGLIBS = @@clooglibs@@
HOST_CLOOGINC = @@clooginc@@

# Where to find libelf
HOST_LIBELFLIBS = @@libelflibs@@
HOST_LIBELFINC = @@libelfinc@@

EXTRA_CONFIGARGS_LIBJAVA = @@EXTRA_CONFIGARGS_LIBJAVA@@

# ----------------------------------------------
# Programs producing files for the BUILD machine
# ----------------------------------------------

SHELL = @@SHELL@@

# pwd command to use.  Allow user to override default by setting PWDCMD in
# the environment to account for automounters.  The make variable must not
# be called PWDCMD, otherwise the value set here is passed to make
# subprocesses and overrides the setting from the user's environment.
# Don't use PWD since it is a common shell environment variable and we
# don't want to corrupt it.
PWD_COMMAND = $${PWDCMD-pwd}

# compilers to use to create programs which must be run in the build
# environment.
AR_FOR_BUILD = @@AR_FOR_BUILD@@
AS_FOR_BUILD = @@AS_FOR_BUILD@@
CC_FOR_BUILD = @@CC_FOR_BUILD@@
CFLAGS_FOR_BUILD = @@CFLAGS_FOR_BUILD@@
CXXFLAGS_FOR_BUILD = @@CXXFLAGS_FOR_BUILD@@
CXX_FOR_BUILD = @@CXX_FOR_BUILD@@
DLLTOOL_FOR_BUILD = @@DLLTOOL_FOR_BUILD@@
GCJ_FOR_BUILD = @@GCJ_FOR_BUILD@@
GFORTRAN_FOR_BUILD = @@GFORTRAN_FOR_BUILD@@
GOC_FOR_BUILD = @@GOC_FOR_BUILD@@
LDFLAGS_FOR_BUILD = @@LDFLAGS_FOR_BUILD@@
LD_FOR_BUILD = @@LD_FOR_BUILD@@
NM_FOR_BUILD = @@NM_FOR_BUILD@@
RANLIB_FOR_BUILD = @@RANLIB_FOR_BUILD@@
WINDMC_FOR_BUILD = @@WINDMC_FOR_BUILD@@
WINDRES_FOR_BUILD = @@WINDRES_FOR_BUILD@@

# Special variables passed down in EXTRA_GCC_FLAGS.  They are defined
# here so that they can be overridden by Makefile fragments.
BUILD_PREFIX = @@BUILD_PREFIX@@
BUILD_PREFIX_1 = @@BUILD_PREFIX_1@@

# Flags to pass to stage2 and later makes.  They are defined
# here so that they can be overridden by Makefile fragments.
BOOT_CFLAGS= -g -O2
BOOT_LDFLAGS=
BOOT_ADAFLAGS= -gnatpg

AWK = @@AWK@@
SED = @@SED@@
BISON = @@BISON@@
YACC = @@YACC@@
FLEX = @@FLEX@@
LEX = @@LEX@@
M4 = @@M4@@
MAKEINFO = @@MAKEINFO@@
EXPECT = @@EXPECT@@
RUNTEST = @@RUNTEST@@

# This just becomes part of the MAKEINFO definition passed down to
# sub-makes.  It lets flags be given on the command line while still
# using the makeinfo from the object tree.
# (Default to avoid splitting info files by setting the threshold high.)
MAKEINFOFLAGS = --split-size=5000000

# ---------------------------------------------
# Programs producing files for the HOST machine
# ---------------------------------------------

AS = @@AS@@
AR = @@AR@@
AR_FLAGS = rc
CC = @@CC@@
CXX = @@CXX@@
DLLTOOL = @@DLLTOOL@@
LD = @@LD@@
LIPO = @@LIPO@@
NM = @@NM@@
OBJDUMP = @@OBJDUMP@@
RANLIB = @@RANLIB@@
READELF = @@READELF@@
STRIP = @@STRIP@@
WINDRES = @@WINDRES@@
WINDMC = @@WINDMC@@

GNATBIND = @@GNATBIND@@
GNATMAKE = @@GNATMAKE@@

CFLAGS = @@CFLAGS@@
LDFLAGS = @@LDFLAGS@@
LIBCFLAGS = $(CFLAGS)
CXXFLAGS = @@CXXFLAGS@@
LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates
GOCFLAGS = $(CFLAGS)

TFLAGS =

# Defaults for all stages; some are overridden below.

STAGE_CFLAGS = $(BOOT_CFLAGS)
STAGE_TFLAGS = $(TFLAGS)
STAGE_CONFIGURE_FLAGS=@@stage2_werror_flag@@

[+ FOR bootstrap-stage +]
# Defaults for stage [+id+]; some are overridden below.
STAGE[+id+]_CFLAGS = $(STAGE_CFLAGS)
STAGE[+id+]_CXXFLAGS = $(CXXFLAGS)
@@if target-libstdc++-v3-bootstrap
# Override the above if we're bootstrapping C++.
STAGE[+id+]_CXXFLAGS = $(STAGE[+id+]_CFLAGS)
@@endif target-libstdc++-v3-bootstrap
STAGE[+id+]_TFLAGS = $(STAGE_TFLAGS)
STAGE[+id+]_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)
[+ ENDFOR bootstrap-stage +]

# Only build the C compiler for stage1, because that is the only one that
# we can guarantee will build with the native compiler, and also it is the
# only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),
# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them
# overrideable (for a bootstrap build stage1 also builds gcc.info).

STAGE1_CFLAGS = @@stage1_cflags@@
STAGE1_CHECKING = @@stage1_checking@@
STAGE1_LANGUAGES = @@stage1_languages@@
# * We force-disable intermodule optimizations, even if
#   --enable-intermodule was passed, since the installed compiler
#   probably can't handle them.  Luckily, autoconf always respects
#   the last argument when conflicting --enable arguments are passed.
# * Likewise, we force-disable coverage flags, since the installed
#   compiler probably has never heard of them.
STAGE1_CONFIGURE_FLAGS = --disable-intermodule $(STAGE1_CHECKING) \
	  --disable-coverage --enable-languages="$(STAGE1_LANGUAGES)"

STAGEprofile_CFLAGS = $(STAGE2_CFLAGS) -fprofile-generate
STAGEprofile_TFLAGS = $(STAGE2_TFLAGS)

STAGEfeedback_CFLAGS = $(STAGE3_CFLAGS) -fprofile-use
STAGEfeedback_TFLAGS = $(STAGE3_TFLAGS)

do-compare = @@do_compare@@
do-compare3 = $(do-compare)

# -----------------------------------------------
# Programs producing files for the TARGET machine
# -----------------------------------------------

AR_FOR_TARGET=@@AR_FOR_TARGET@@
AS_FOR_TARGET=@@AS_FOR_TARGET@@
CC_FOR_TARGET=$(STAGE_CC_WRAPPER) @@CC_FOR_TARGET@@

# If GCC_FOR_TARGET is not overriden on the command line, then this
# variable is passed down to the gcc Makefile, where it is used to
# build libgcc2.a.  We define it here so that it can itself be
# overridden on the command line.
GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) @@GCC_FOR_TARGET@@
CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @@CXX_FOR_TARGET@@
RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @@RAW_CXX_FOR_TARGET@@
GCJ_FOR_TARGET=$(STAGE_CC_WRAPPER) @@GCJ_FOR_TARGET@@
GFORTRAN_FOR_TARGET=$(STAGE_CC_WRAPPER) @@GFORTRAN_FOR_TARGET@@
GOC_FOR_TARGET=$(STAGE_CC_WRAPPER) @@GOC_FOR_TARGET@@
DLLTOOL_FOR_TARGET=@@DLLTOOL_FOR_TARGET@@
LD_FOR_TARGET=@@LD_FOR_TARGET@@

LIPO_FOR_TARGET=@@LIPO_FOR_TARGET@@
NM_FOR_TARGET=@@NM_FOR_TARGET@@
OBJDUMP_FOR_TARGET=@@OBJDUMP_FOR_TARGET@@
RANLIB_FOR_TARGET=@@RANLIB_FOR_TARGET@@
READELF_FOR_TARGET=@@READELF_FOR_TARGET@@
STRIP_FOR_TARGET=@@STRIP_FOR_TARGET@@
WINDRES_FOR_TARGET=@@WINDRES_FOR_TARGET@@
WINDMC_FOR_TARGET=@@WINDMC_FOR_TARGET@@

COMPILER_AS_FOR_TARGET=@@COMPILER_AS_FOR_TARGET@@
COMPILER_LD_FOR_TARGET=@@COMPILER_LD_FOR_TARGET@@
COMPILER_NM_FOR_TARGET=@@COMPILER_NM_FOR_TARGET@@

CFLAGS_FOR_TARGET = @@CFLAGS_FOR_TARGET@@
CXXFLAGS_FOR_TARGET = @@CXXFLAGS_FOR_TARGET@@

LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)
LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates
LDFLAGS_FOR_TARGET = @@LDFLAGS_FOR_TARGET@@
GOCFLAGS_FOR_TARGET = -O2 -g

FLAGS_FOR_TARGET = @@FLAGS_FOR_TARGET@@
SYSROOT_CFLAGS_FOR_TARGET = @@SYSROOT_CFLAGS_FOR_TARGET@@
DEBUG_PREFIX_CFLAGS_FOR_TARGET = @@DEBUG_PREFIX_CFLAGS_FOR_TARGET@@

XGCC_FLAGS_FOR_TARGET = $(FLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)

# ------------------------------------
# Miscellaneous targets and flag lists
# ------------------------------------

# The first rule in the file had better be this one.  Don't put any above it.
# This lives here to allow makefile fragments to contain dependencies.
all:

#### host and target specific makefile fragments come in here.
@@target_makefile_frag@@
@@alphaieee_frag@@
@@ospace_frag@@
@@host_makefile_frag@@
###

# This is the list of directories that may be needed in RPATH_ENVVAR
# so that programs built for the target machine work.
TARGET_LIB_PATH = [+ FOR target_modules +][+
  IF lib_path +]$(TARGET_LIB_PATH_[+module+])[+ ENDIF lib_path +][+
  ENDFOR target_modules +]$(HOST_LIB_PATH_gcc)
[+ FOR target_modules +][+ IF lib_path +]
@@if target-[+module+]
TARGET_LIB_PATH_[+module+] = $$r/$(TARGET_SUBDIR)/[+module+]/[+lib_path+]:
@@endif target-[+module+]
[+ ENDIF lib_path +][+ ENDFOR target_modules +]


# This is the list of directories that may be needed in RPATH_ENVVAR
# so that programs built for the host machine work.
HOST_LIB_PATH = [+ FOR host_modules +][+
  IF lib_path +]$(HOST_LIB_PATH_[+module+])[+ ENDIF lib_path +][+
  ENDFOR host_modules +]

# Define HOST_LIB_PATH_gcc here, for the sake of TARGET_LIB_PATH, ouch
@@if gcc
HOST_LIB_PATH_gcc = $$r/$(HOST_SUBDIR)/gcc$(GCC_SHLIB_SUBDIR):$$r/$(HOST_SUBDIR)/prev-gcc$(GCC_SHLIB_SUBDIR):
@@endif gcc

[+ FOR host_modules +][+ IF lib_path +]
@@if [+module+]
HOST_LIB_PATH_[+module+] = \
  $$r/$(HOST_SUBDIR)/[+module+]/[+lib_path+]:[+ IF bootstrap
  +]$$r/$(HOST_SUBDIR)/prev-[+module+]/[+lib_path+]:[+ ENDIF bootstrap +]
@@endif [+module+]
[+ ENDIF lib_path +][+ ENDFOR host_modules +]

CXX_FOR_TARGET_FLAG_TO_PASS = \
	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)"
@@if target-libstdc++-v3
# CXX_FOR_TARGET is tricky to get right for target libs that require a
# functional C++ compiler.  When we recurse, if we expand
# CXX_FOR_TARGET before configuring libstdc++-v3, we won't get
# libstdc++ include flags from the script.  Instead, we get an
# -funconfigured-* word, so that we'll get errors if this invalid C++
# command line is used for anything, but also so that we can use the
# word to decide whether or not to pass on this CXX_FOR_TARGET.  If we
# don't pass it on, sub-make will use the default definition, that
# re-expands it at the time of use, so we'll get it right when we need
# it.  One potential exception is the expansion of CXX_FOR_TARGET
# passed down as part of CXX within TARGET_FLAGS, but this wouldn't
# really work, for C++ host programs can't depend on the current-stage
# C++ target library.
CXX_FOR_TARGET_FLAG_TO_PASS = \
	$(shell if echo "$(CXX_FOR_TARGET)" | grep " -funconfigured-" > /dev/null; then :; else echo '"CXX_FOR_TARGET=$(CXX_FOR_TARGET)"'; fi)
@@endif target-libstdc++-v3

# Flags to pass down to all sub-makes.
BASE_FLAGS_TO_PASS =[+ FOR flags_to_pass +][+ IF optional +] \
	"`echo '[+flag+]=$([+flag+])' | sed -e s'/[^=][^=]*=$$/XFOO=/'`"[+ ELSE optional +] \
	"[+flag+]=$([+flag+])"[+ ENDIF optional+][+ ENDFOR flags_to_pass +][+ FOR bootstrap-stage +] \
	"STAGE[+id+]_CFLAGS=$(STAGE[+id+]_CFLAGS)" \
	"STAGE[+id+]_CXXFLAGS=$(STAGE[+id+]_CXXFLAGS)" \
	"STAGE[+id+]_TFLAGS=$(STAGE[+id+]_TFLAGS)"[+ ENDFOR bootstrap-stage +] \
	$(CXX_FOR_TARGET_FLAG_TO_PASS) \
	"TFLAGS=$(TFLAGS)" \
	"CONFIG_SHELL=$(SHELL)" \
	"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)" 

# We leave this in just in case, but it is not needed anymore.
RECURSE_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS)

# Flags to pass down to most sub-makes, in which we're building with
# the host environment.
EXTRA_HOST_FLAGS = \
	'AR=$(AR)' \
	'AS=$(AS)' \
	'CC=$(CC)' \
	'CXX=$(CXX)' \
	'DLLTOOL=$(DLLTOOL)' \
	'GCJ=$(GCJ)' \
	'GFORTRAN=$(GFORTRAN)' \
	'GOC=$(GOC)' \
	'LD=$(LD)' \
	'LIPO=$(LIPO)' \
	'NM=$(NM)' \
	'OBJDUMP=$(OBJDUMP)' \
	'RANLIB=$(RANLIB)' \
	'READELF=$(READELF)' \
	'STRIP=$(STRIP)' \
	'WINDRES=$(WINDRES)' \
	'WINDMC=$(WINDMC)'

FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_HOST_FLAGS)

# Flags to pass to stage1 or when not bootstrapping.

STAGE1_FLAGS_TO_PASS = \
	LDFLAGS="$${LDFLAGS}" \
	HOST_LIBS="$${HOST_LIBS}"

# Flags to pass to stage2 and later makes.

POSTSTAGE1_FLAGS_TO_PASS = \
	CC="$${CC}" CC_FOR_BUILD="$${CC_FOR_BUILD}" \
	CXX="$${CXX}" CXX_FOR_BUILD="$${CXX_FOR_BUILD}" \
	GNATBIND="$${GNATBIND}" \
	LDFLAGS="$${LDFLAGS}" \
	HOST_LIBS="$${HOST_LIBS}" \
	"`echo 'ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`"

# Flags to pass down to makes which are built with the target environment.
# The double $ decreases the length of the command line; those variables
# are set in BASE_FLAGS_TO_PASS, and the sub-make will expand them.  The
# *_CFLAGS_FOR_TARGET variables are not passed down and most often empty,
# so we expand them here.
EXTRA_TARGET_FLAGS = \
	'AR=$$(AR_FOR_TARGET)' \
	'AS=$(COMPILER_AS_FOR_TARGET)' \
	'CC=$$(CC_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \
	'CFLAGS=$$(CFLAGS_FOR_TARGET)' \
	'CXX=$$(CXX_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \
	'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET)' \
	'DLLTOOL=$$(DLLTOOL_FOR_TARGET)' \
	'GCJ=$$(GCJ_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \
	'GFORTRAN=$$(GFORTRAN_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \
	'GOC=$$(GOC_FOR_TARGET) $$(XGCC_FLAGS_FOR_TARGET) $$(TFLAGS)' \
	'GOCFLAGS=$$(GOCFLAGS_FOR_TARGET)' \
	'LD=$(COMPILER_LD_FOR_TARGET)' \
	'LDFLAGS=$$(LDFLAGS_FOR_TARGET)' \
	'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET)' \
	'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET)' \
	'NM=$(COMPILER_NM_FOR_TARGET)' \
	'OBJDUMP=$$(OBJDUMP_FOR_TARGET)' \
	'RANLIB=$$(RANLIB_FOR_TARGET)' \
	'READELF=$$(READELF_FOR_TARGET)' \
	'WINDRES=$$(WINDRES_FOR_TARGET)' \
	'WINDMC=$$(WINDMC_FOR_TARGET)' \
	'XGCC_FLAGS_FOR_TARGET=$(XGCC_FLAGS_FOR_TARGET)' \
	"TFLAGS=$$TFLAGS"

TARGET_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS)

# Flags to pass down to gcc.  gcc builds a library, libgcc.a, so it
# unfortunately needs the native compiler and the target ar and
# ranlib.
# If any variables are added here, they must be added to do-*, below.
# The BUILD_* variables are a special case, which are used for the gcc
# cross-building scheme.
EXTRA_GCC_FLAGS = \
	"GCC_FOR_TARGET=$(GCC_FOR_TARGET)" \
	"`echo 'STMP_FIXPROTO=$(STMP_FIXPROTO)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIMITS_H_TEST=$(LIMITS_H_TEST)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`"

GCC_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_HOST_FLAGS) $(EXTRA_GCC_FLAGS)

@@if gcc
BUILD_CONFIG = @@BUILD_CONFIG@@
ifneq ($(BUILD_CONFIG),)
include $(foreach CONFIG, $(BUILD_CONFIG), $(srcdir)/config/$(CONFIG).mk)
endif
@@endif gcc

.PHONY: configure-host
configure-host: [+
  FOR host_modules +] \
    maybe-configure-[+module+][+
  ENDFOR host_modules +]
.PHONY: configure-target
configure-target: [+
  FOR target_modules +] \
    maybe-configure-target-[+module+][+
  ENDFOR target_modules +]

# The target built for a native non-bootstrap build.
.PHONY: all
all:
@@if gcc-bootstrap
	[ -f stage_final ] || echo stage3 > stage_final
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) `cat stage_final`-bubble
@@endif gcc-bootstrap
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
@@if gcc-bootstrap
	if [ -f stage_last ]; then \
	  TFLAGS="$(STAGE$(shell test ! -f stage_last || sed s,^stage,, stage_last)_TFLAGS)"; \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target; \
	else \
@@endif gcc-bootstrap
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-host all-target \
@@if gcc-bootstrap
	    ; \
	fi \
@@endif gcc-bootstrap
	&& :

.PHONY: all-build
[+ FOR build_modules +]
all-build: maybe-all-build-[+module+][+ ENDFOR build_modules +]

.PHONY: all-host
[+ FOR host_modules +][+ IF bootstrap +]
@@if [+module+]-no-bootstrap[+ ENDIF bootstrap +]
all-host: maybe-all-[+module+][+ IF bootstrap +]
@@endif [+module+]-no-bootstrap[+ ENDIF bootstrap +][+ ENDFOR host_modules +]

.PHONY: all-target
[+ FOR target_modules +][+ IF bootstrap +]
@@if target-[+module+]-no-bootstrap[+ ENDIF bootstrap +]
all-target: maybe-all-target-[+module+][+ IF bootstrap +]
@@endif target-[+module+]-no-bootstrap[+
  ENDIF bootstrap +][+ ENDFOR target_modules +]

# Do a target for all the subdirectories.  A ``make do-X'' will do a
# ``make X'' in all subdirectories (because, in general, there is a
# dependency (below) of X upon do-X, a ``make X'' will also do this,
# but it may do additional work as well).
[+ FOR recursive_targets +]
.PHONY: do-[+make_target+]
do-[+make_target+]:
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) [+make_target+]-host \
	  [+make_target+]-target


.PHONY: [+make_target+]-host
[+ FOR host_modules +]
[+make_target+]-host: maybe-[+make_target+]-[+module+][+ ENDFOR host_modules +]

.PHONY: [+make_target+]-target
[+ FOR target_modules +]
[+make_target+]-target: maybe-[+make_target+]-target-[+module+][+ ENDFOR target_modules +]
[+ ENDFOR recursive_targets +]

# Here are the targets which correspond to the do-X targets.

.PHONY: info installcheck dvi pdf html
.PHONY: install-info install-pdf install-html
.PHONY: clean distclean mostlyclean maintainer-clean realclean
.PHONY: local-clean local-distclean local-maintainer-clean
info: do-info
installcheck: do-installcheck
dvi: do-dvi
pdf: do-pdf
html: do-html

# Make sure makeinfo is built before we do a `make info', if we're
# in fact building texinfo.
do-info: maybe-all-texinfo

install-info: do-install-info dir.info
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	if [ -f dir.info ] ; then \
	  $(INSTALL_DATA) dir.info $(DESTDIR)$(infodir)/dir.info ; \
	else true ; fi

install-pdf: do-install-pdf

install-html: do-install-html

local-clean:
	-rm -f *.a TEMP errs core *.o *~ \#* TAGS *.E *.log

local-distclean:
	-rm -f Makefile config.status config.cache mh-frag mt-frag
	-rm -f maybedep.tmp serdep.tmp
	-if [ "$(TARGET_SUBDIR)" != "." ]; then \
	  rm -rf $(TARGET_SUBDIR); \
	else true; fi
	-rm -rf $(BUILD_SUBDIR)
	-if [ "$(HOST_SUBDIR)" != "." ]; then \
	  rm -rf $(HOST_SUBDIR); \
	else true; fi
	-rm -f texinfo/po/Makefile texinfo/po/Makefile.in texinfo/info/Makefile
	-rm -f texinfo/doc/Makefile texinfo/po/POTFILES
	-rmdir texinfo/doc texinfo/info texinfo/intl texinfo/lib 2>/dev/null
	-rmdir texinfo/makeinfo texinfo/po texinfo/util 2>/dev/null
	-rmdir fastjar gcc libiberty texinfo zlib 2>/dev/null
	-find . -name config.cache -exec rm -f {} \; \; 2>/dev/null

local-maintainer-clean:
	@@echo "This command is intended for maintainers to use;"
	@@echo "it deletes files that may require special tools to rebuild."

clean: do-clean local-clean
mostlyclean: do-mostlyclean local-clean
distclean: do-distclean local-clean local-distclean
maintainer-clean: local-maintainer-clean do-maintainer-clean local-clean 
maintainer-clean: local-distclean
realclean: maintainer-clean

# Check target.

.PHONY: check do-check
check: do-check

# Only include modules actually being configured and built.
.PHONY: check-host
check-host: [+
  FOR host_modules +] \
    maybe-check-[+module+][+
  ENDFOR host_modules +]

.PHONY: check-target
check-target: [+
  FOR target_modules +] \
    maybe-check-target-[+module+][+
  ENDFOR target_modules +]

do-check:
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) check-host check-target

# Automated reporting of test results.

warning.log: build.log
	$(srcdir)/contrib/warn_summary build.log > $@@

mail-report.log:
	if test x'$(BOOT_CFLAGS)' != x''; then \
	    BOOT_CFLAGS='$(BOOT_CFLAGS)'; export BOOT_CFLAGS; \
	fi; \
	$(srcdir)/contrib/test_summary -t >$@@
	chmod +x $@@
	echo If you really want to send e-mail, run ./$@@ now

mail-report-with-warnings.log: warning.log
	if test x'$(BOOT_CFLAGS)' != x''; then \
	    BOOT_CFLAGS='$(BOOT_CFLAGS)'; export BOOT_CFLAGS; \
	fi; \
	$(srcdir)/contrib/test_summary -t -i warning.log >$@@
	chmod +x $@@
	echo If you really want to send e-mail, run ./$@@ now

# Installation targets.

.PHONY: install uninstall
install:
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) installdirs install-host install-target

.PHONY: install-host-nogcc
install-host-nogcc: [+
  FOR host_modules +][+ IF (not (= (get "module") "gcc")) +] \
    maybe-install-[+module+][+ ENDIF +][+
  ENDFOR host_modules +]

.PHONY: install-host
install-host: [+
  FOR host_modules +] \
    maybe-install-[+module+][+
  ENDFOR host_modules +]

.PHONY: install-target
install-target: [+
  FOR target_modules +] \
    maybe-install-target-[+module+][+
  ENDFOR target_modules +]

uninstall:
	@@echo "the uninstall target is not supported in this tree"

.PHONY: install.all
install.all: install-no-fixedincludes
	@@if [ -f ./gcc/Makefile ] ; then \
		r=`${PWD_COMMAND}` ; export r ; \
		s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
		$(HOST_EXPORTS) \
		(cd ./gcc && \
		$(MAKE) $(FLAGS_TO_PASS) install-headers) ; \
	else \
		true ; \
	fi

# install-no-fixedincludes is used to allow the elaboration of binary packages
# suitable for distribution, where we cannot include the fixed system header
# files.
.PHONY: install-no-fixedincludes
install-no-fixedincludes: installdirs install-host-nogcc \
	install-target gcc-install-no-fixedincludes

.PHONY: install-strip
install-strip:
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) installdirs install-strip-host install-strip-target

.PHONY: install-strip-host
install-strip-host: [+
  FOR host_modules +] \
    maybe-install-strip-[+module+][+
  ENDFOR host_modules +]

.PHONY: install-strip-target
install-strip-target: [+
  FOR target_modules +] \
    maybe-install-strip-target-[+module+][+
  ENDFOR target_modules +]


### other supporting targets

MAKEDIRS= \
	$(DESTDIR)$(prefix) \
	$(DESTDIR)$(exec_prefix)
.PHONY: installdirs
installdirs: mkinstalldirs
	$(SHELL) $(srcdir)/mkinstalldirs $(MAKEDIRS)

dir.info: do-install-info
	if [ -f $(srcdir)/texinfo/gen-info-dir ] ; then \
	  $(srcdir)/texinfo/gen-info-dir $(DESTDIR)$(infodir) $(srcdir)/texinfo/dir.info-template > dir.info.new ; \
	  mv -f dir.info.new dir.info ; \
	else true ; \
	fi

dist:
	@@echo "Building a full distribution of this tree isn't done"
	@@echo "via 'make dist'.  Check out the etc/ subdirectory" 

etags tags: TAGS

# Right now this just builds TAGS in each subdirectory.  emacs19 has the
# ability to use several tags files at once, so there is probably no need
# to combine them into one big TAGS file (like CVS 1.3 does).  We could
# (if we felt like it) have this Makefile write a piece of elisp which
# the user could load to tell emacs19 where all the TAGS files we just
# built are.
TAGS: do-TAGS

# ------------------------------------
# Macros for configure and all targets
# ------------------------------------

[+ DEFINE configure +]
.PHONY: configure-[+prefix+][+module+] maybe-configure-[+prefix+][+module+]
maybe-configure-[+prefix+][+module+]:
@@if gcc-bootstrap
configure-[+prefix+][+module+]: stage_current
@@endif gcc-bootstrap
@@if [+prefix+][+module+]
maybe-configure-[+prefix+][+module+]: configure-[+prefix+][+module+]
configure-[+prefix+][+module+]: [+ IF bootstrap +][+ ELSE +]
	@@: $(MAKE); $(unstage)[+ ENDIF bootstrap +]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	[+ IF check_multilibs
	+]echo "Checking multilib configuration for [+module+]..."; \
	$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \
	$(CC_FOR_TARGET) --print-multi-lib > [+subdir+]/[+module+]/multilib.tmp 2> /dev/null ; \
	if test -r [+subdir+]/[+module+]/multilib.out; then \
	  if cmp -s [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; then \
	    rm -f [+subdir+]/[+module+]/multilib.tmp; \
	  else \
	    rm -f [+subdir+]/[+module+]/Makefile; \
	    mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \
	  fi; \
	else \
	  mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \
	fi; \
	[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \
	[+exports+] [+extra_exports+] \
	echo Configuring in [+subdir+]/[+module+]; \
	cd "[+subdir+]/[+module+]" || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir=`echo [+subdir+]/[+module+]/ | \
		sed -e 's,\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \
	esac; \
	srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	libsrcdir="$$s/[+module+]"; \
	[+ IF no-config-site +]rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file [+ ENDIF +]$(SHELL) $${libsrcdir}/configure \
	  [+args+] --build=${build_alias} --host=[+host_alias+] \
	  --target=[+target_alias+] $${srcdiroption} [+extra_configure_flags+] \
	  || exit 1
@@endif [+prefix+][+module+]

[+ IF bootstrap +]
[+ FOR bootstrap_stage +]
.PHONY: configure-stage[+id+]-[+prefix+][+module+] maybe-configure-stage[+id+]-[+prefix+][+module+]
maybe-configure-stage[+id+]-[+prefix+][+module+]:
@@if [+prefix+][+module+]-bootstrap
maybe-configure-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]
configure-stage[+id+]-[+prefix+][+module+]:
	@@[ $(current_stage) = stage[+id+] ] || $(MAKE) stage[+id+]-start
	@@$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	TFLAGS="$(STAGE[+id+]_TFLAGS)"; \
	[+ IF check_multilibs
	+]echo "Checking multilib configuration for [+module+]..."; \
	$(CC_FOR_TARGET) --print-multi-lib > [+subdir+]/[+module+]/multilib.tmp 2> /dev/null ; \
	if test -r [+subdir+]/[+module+]/multilib.out; then \
	  if cmp -s [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; then \
	    rm -f [+subdir+]/[+module+]/multilib.tmp; \
	  else \
	    rm -f [+subdir+]/[+module+]/Makefile; \
	    mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \
	  fi; \
	else \
	  mv [+subdir+]/[+module+]/multilib.tmp [+subdir+]/[+module+]/multilib.out; \
	fi; \
	[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \
	[+exports+][+ IF prev +] \
	[+poststage1_exports+][+ ENDIF prev +][+ IF prefix +] \
	CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
	CXXFLAGS="$(CXXFLAGS_FOR_TARGET)"; export CXXFLAGS; \
	LIBCFLAGS="$(LIBCFLAGS_FOR_TARGET)"; export LIBCFLAGS;[+ ELSE prefix +] \
	CFLAGS="$(STAGE[+id+]_CFLAGS)"; export CFLAGS; \
	CXXFLAGS="$(STAGE[+id+]_CXXFLAGS)"; export CXXFLAGS;[+ IF prev +] \
	LIBCFLAGS="$(STAGE[+id+]_CFLAGS)"[+ ELSE prev +] \
	LIBCFLAGS="$(LIBCFLAGS)"[+ ENDIF prev +]; export LIBCFLAGS;[+
  ENDIF prefix +] [+extra_exports+] \
	echo Configuring stage [+id+] in [+subdir+]/[+module+] ; \
	$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \
	cd [+subdir+]/[+module+] || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir=`echo [+subdir+]/[+module+]/ | \
		sed -e 's,\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \
	esac; \
	srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	libsrcdir="$$s/[+module+]"; \
	$(SHELL) $${libsrcdir}/configure \
	  [+args+] --build=${build_alias} --host=[+host_alias+] \
	  --target=[+target_alias+] $${srcdiroption} [+ IF prev +]\
	  --with-build-libsubdir=$(HOST_SUBDIR) [+ ENDIF prev +]\
	  $(STAGE[+id+]_CONFIGURE_FLAGS)[+ IF extra_configure_flags +] \
	  [+extra_configure_flags+][+ ENDIF extra_configure_flags +]
@@endif [+prefix+][+module+]-bootstrap
[+ ENDFOR bootstrap_stage +]
[+ ENDIF bootstrap +]
[+ ENDDEF +]

[+ DEFINE all +]
.PHONY: all-[+prefix+][+module+] maybe-all-[+prefix+][+module+]
maybe-all-[+prefix+][+module+]:
@@if gcc-bootstrap
all-[+prefix+][+module+]: stage_current
@@endif gcc-bootstrap
@@if [+prefix+][+module+]
TARGET-[+prefix+][+module+]=[+
  IF all_target +][+all_target+][+ ELSE +]all[+ ENDIF all_target +]
maybe-all-[+prefix+][+module+]: all-[+prefix+][+module+]
all-[+prefix+][+module+]: configure-[+prefix+][+module+][+ IF bootstrap +][+ ELSE +]
	@@: $(MAKE); $(unstage)[+ ENDIF bootstrap +]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	[+exports+] [+extra_exports+] \
	(cd [+subdir+]/[+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) [+args+] [+stage1_args+] [+extra_make_flags+] \
		$(TARGET-[+prefix+][+module+]))
@@endif [+prefix+][+module+]

[+ IF bootstrap +]
[+ FOR bootstrap_stage +]
.PHONY: all-stage[+id+]-[+prefix+][+module+] maybe-all-stage[+id+]-[+prefix+][+module+]
.PHONY: clean-stage[+id+]-[+prefix+][+module+] maybe-clean-stage[+id+]-[+prefix+][+module+]
maybe-all-stage[+id+]-[+prefix+][+module+]:
maybe-clean-stage[+id+]-[+prefix+][+module+]:
@@if [+prefix+][+module+]-bootstrap
maybe-all-stage[+id+]-[+prefix+][+module+]: all-stage[+id+]-[+prefix+][+module+]
all-stage[+id+]: all-stage[+id+]-[+prefix+][+module+]
TARGET-stage[+id+]-[+prefix+][+module+] = $(TARGET-[+prefix+][+module+])
all-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]
	@@[ $(current_stage) = stage[+id+] ] || $(MAKE) stage[+id+]-start
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	TFLAGS="$(STAGE[+id+]_TFLAGS)"; \
	[+exports+][+ IF prev +] \
	[+poststage1_exports+][+ ENDIF prev +] [+extra_exports+] \
	cd [+subdir+]/[+module+] && \
	$(MAKE) $(BASE_FLAGS_TO_PASS)[+ IF prefix +] \
		CFLAGS="$(CFLAGS_FOR_TARGET)" \
		CXXFLAGS="$(CXXFLAGS_FOR_TARGET)" \
		LIBCFLAGS="$(LIBCFLAGS_FOR_TARGET)"[+ ELSE prefix +] \
		CFLAGS="$(STAGE[+id+]_CFLAGS)" \
		CXXFLAGS="$(STAGE[+id+]_CXXFLAGS)"[+ IF prev +] \
		LIBCFLAGS="$(STAGE[+id+]_CFLAGS)"[+ ELSE prev +] \
		LIBCFLAGS="$(LIBCFLAGS)"[+ ENDIF prev +][+ ENDIF prefix +] \
		CFLAGS_FOR_TARGET="$(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="$(CXXFLAGS_FOR_TARGET)" \
		LIBCFLAGS_FOR_TARGET="$(LIBCFLAGS_FOR_TARGET)" \
		[+args+] [+IF prev +][+poststage1_args+][+ ELSE prev +] \
		[+stage1_args+][+ ENDIF prev +] [+extra_make_flags+] \
		TFLAGS="$(STAGE[+id+]_TFLAGS)" \
		$(TARGET-stage[+id+]-[+prefix+][+module+])

maybe-clean-stage[+id+]-[+prefix+][+module+]: clean-stage[+id+]-[+prefix+][+module+]
clean-stage[+id+]: clean-stage[+id+]-[+prefix+][+module+]
clean-stage[+id+]-[+prefix+][+module+]:
	@@if [ $(current_stage) = stage[+id+] ]; then \
	  [ -f [+subdir+]/[+module+]/Makefile ] || exit 0; \
	else \
	  [ -f [+subdir+]/stage[+id+]-[+module+]/Makefile ] || exit 0; \
	  $(MAKE) stage[+id+]-start; \
	fi; \
	cd [+subdir+]/[+module+] && \
	$(MAKE) [+args+] [+ IF prev +][+poststage1_args+][+ ELSE prev +] \
	[+stage1_args+][+ ENDIF prev +] [+extra_make_flags+] clean
@@endif [+prefix+][+module+]-bootstrap

[+ ENDFOR bootstrap_stage +]
[+ ENDIF bootstrap +]
[+ ENDDEF +]

# --------------------------------------
# Modules which run on the build machine
# --------------------------------------
[+ FOR build_modules +]
[+ configure prefix="build-" subdir="$(BUILD_SUBDIR)" exports="$(BUILD_EXPORTS)"
	     host_alias=(get "host" "${build_alias}")
	     target_alias=(get "target" "${target_alias}")
	     args="$(BUILD_CONFIGARGS)" no-config-site=true +]

[+ all prefix="build-" subdir="$(BUILD_SUBDIR)" exports="$(BUILD_EXPORTS)"
	     args="$(EXTRA_BUILD_FLAGS)" +]
[+ ENDFOR build_module +]

# --------------------------------------
# Modules which run on the host machine
# --------------------------------------
[+ FOR host_modules +]
[+ configure prefix="" subdir="$(HOST_SUBDIR)"
	     exports="$(HOST_EXPORTS)"
	     poststage1_exports="$(POSTSTAGE1_HOST_EXPORTS)"
	     host_alias=(get "host" "${host_alias}")
	     target_alias=(get "target" "${target_alias}")
	     args="$(HOST_CONFIGARGS)" +]

[+ all prefix="" subdir="$(HOST_SUBDIR)"
       exports="$(HOST_EXPORTS)"
       poststage1_exports="$(POSTSTAGE1_HOST_EXPORTS)"
       args="$(EXTRA_HOST_FLAGS)"
       stage1_args="$(STAGE1_FLAGS_TO_PASS)"
       poststage1_args="$(POSTSTAGE1_FLAGS_TO_PASS)" +]

.PHONY: check-[+module+] maybe-check-[+module+]
maybe-check-[+module+]:
@@if [+module+]
maybe-check-[+module+]: check-[+module+]
[+ IF no_check +]
check-[+module+]:
[+ ELIF no_check_cross +]
# This module is only tested in a native toolchain.
check-[+module+]:
	@@: $(MAKE); $(unstage)
	@@if [ '$(host)' = '$(target)' ] ; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	  $(HOST_EXPORTS) \
	  (cd $(HOST_SUBDIR)/[+module+] && \
	    $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] check); \
	fi
[+ ELSE check +]
check-[+module+]:
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	(cd $(HOST_SUBDIR)/[+module+] && \
	  $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] check)
[+ ENDIF no_check +]
@@endif [+module+]

.PHONY: install-[+module+] maybe-install-[+module+]
maybe-install-[+module+]:
@@if [+module+]
maybe-install-[+module+]: install-[+module+]
[+ IF no_install +]
install-[+module+]:
[+ ELSE install +]
install-[+module+]: installdirs
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	(cd $(HOST_SUBDIR)/[+module+] && \
	  $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] install)
[+ ENDIF no_install +]
@@endif [+module+]

.PHONY: install-strip-[+module+] maybe-install-strip-[+module+]
maybe-install-strip-[+module+]:
@@if [+module+]
maybe-install-strip-[+module+]: install-strip-[+module+]
[+ IF no_install +]
install-strip-[+module+]:
[+ ELSE install +]
install-strip-[+module+]: installdirs
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	(cd $(HOST_SUBDIR)/[+module+] && \
	  $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] install-strip)
[+ ENDIF no_install +]
@@endif [+module+]

# Other targets (info, dvi, pdf, etc.)
[+ FOR recursive_targets +]
.PHONY: maybe-[+make_target+]-[+module+] [+make_target+]-[+module+]
maybe-[+make_target+]-[+module+]:
@@if [+module+]
maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-[+module+]:
[+ ELSE +]
[+make_target+]-[+module+]: [+
  FOR depend +]\
    [+depend+]-[+module+] [+
  ENDFOR depend +]
	@@[+ IF bootstrap +][+ ELSE +]: $(MAKE); $(unstage)
	@@[+ ENDIF bootstrap +][ -f ./[+module+]/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	for flag in $(EXTRA_HOST_FLAGS) [+extra_make_flags+]; do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	echo "Doing [+make_target+] in [+module+]" ; \
	(cd $(HOST_SUBDIR)/[+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" "WINDMC=$${WINDMC}" \
	          [+make_target+]) \
	  || exit 1
[+ ENDIF +]
@@endif [+module+]
[+ ENDFOR recursive_targets +]
[+ ENDFOR host_modules +]

# ---------------------------------------
# Modules which run on the target machine
# ---------------------------------------
[+ FOR target_modules +]

[+ IF raw_cxx +]
[+ configure prefix="target-" subdir="$(TARGET_SUBDIR)"
	     check_multilibs=true
	     exports="$(RAW_CXX_TARGET_EXPORTS)"
	     host_alias=(get "host" "${target_alias}")
	     target_alias=(get "target" "${target_alias}")
	     args="$(TARGET_CONFIGARGS)" no-config-site=true +]

[+ all prefix="target-" subdir="$(TARGET_SUBDIR)"
       exports="$(RAW_CXX_TARGET_EXPORTS)"
       args="$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'" +]
[+ ELSE +]
[+ configure prefix="target-" subdir="$(TARGET_SUBDIR)"
	     check_multilibs=true
	     exports="$(NORMAL_TARGET_EXPORTS)"
	     host_alias=(get "host" "${target_alias}")
	     target_alias=(get "target" "${target_alias}")
	     args="$(TARGET_CONFIGARGS)" no-config-site=true +]

[+ all prefix="target-" subdir="$(TARGET_SUBDIR)"
       exports="$(NORMAL_TARGET_EXPORTS)"
       args="$(EXTRA_TARGET_FLAGS)" +]
[+ ENDIF +]

.PHONY: check-target-[+module+] maybe-check-target-[+module+]
maybe-check-target-[+module+]:
@@if target-[+module+]
maybe-check-target-[+module+]: check-target-[+module+]
[+ IF no_check +]
# Dummy target for uncheckable module.
check-target-[+module+]:
[+ ELSE check +]
check-target-[+module+]:
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+
	    IF raw_cxx 
	      +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ 
	    ENDIF raw_cxx 
	  +] [+extra_make_flags+] check)
[+ ENDIF no_check +]
@@endif target-[+module+]

.PHONY: install-target-[+module+] maybe-install-target-[+module+]
maybe-install-target-[+module+]:
@@if target-[+module+]
maybe-install-target-[+module+]: install-target-[+module+]
[+ IF no_install +]
# Dummy target for uninstallable.
install-target-[+module+]:
[+ ELSE install +]
install-target-[+module+]: installdirs
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+extra_make_flags+] install)
[+ ENDIF no_install +]
@@endif target-[+module+]

.PHONY: install-strip-target-[+module+] maybe-install-strip-target-[+module+]
maybe-install-strip-target-[+module+]:
@@if target-[+module+]
maybe-install-strip-target-[+module+]: install-strip-target-[+module+]
[+ IF no_install +]
# Dummy target for uninstallable.
install-strip-target-[+module+]:
[+ ELSE install +]
install-strip-target-[+module+]: installdirs
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+extra_make_flags+] install-strip)
[+ ENDIF no_install +]
@@endif target-[+module+]

# Other targets (info, dvi, pdf, etc.)
[+ FOR recursive_targets +]
.PHONY: maybe-[+make_target+]-target-[+module+] [+make_target+]-target-[+module+]
maybe-[+make_target+]-target-[+module+]:
@@if target-[+module+]
maybe-[+make_target+]-target-[+module+]: [+make_target+]-target-[+module+]
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-target-[+module+]:
[+ ELSE +]
[+make_target+]-target-[+module+]: [+
  FOR depend +]\
    [+depend+]-target-[+module+] [+
  ENDFOR depend +]
	@@: $(MAKE); $(unstage)
	@@[ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] || exit 0 ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	echo "Doing [+make_target+] in $(TARGET_SUBDIR)/[+module+]" ; \
	for flag in $(EXTRA_TARGET_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" "WINDMC=$${WINDMC}" \
	          [+extra_make_flags+] [+make_target+]) \
	  || exit 1
[+ ENDIF +]
@@endif target-[+module+]
[+ ENDFOR recursive_targets +]
[+ ENDFOR target_modules +]

@@if target-libmudflap
.PHONY: check-target-libmudflap-c++
check-target-libmudflap-c++:
	$(MAKE) RUNTESTFLAGS="$(RUNTESTFLAGS) c++frags.exp" check-target-libmudflap

@@endif target-libmudflap

@@if target-libgomp
.PHONY: check-target-libgomp-c++
check-target-libgomp-c++:
	$(MAKE) RUNTESTFLAGS="$(RUNTESTFLAGS) c++.exp" check-target-libgomp

@@endif target-libgomp

@@if target-libitm
.PHONY: check-target-libitm-c++
check-target-libitm-c++:
	$(MAKE) RUNTESTFLAGS="$(RUNTESTFLAGS) c++.exp" check-target-libitm

@@endif target-libitm

# ----------
# GCC module
# ----------

@@if gcc-no-bootstrap
.PHONY: cross
cross: all-build all-gas all-ld
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo "Building the C and C++ compiler"; \
	cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) LANGUAGES="c c++"
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	echo "Building runtime libraries"; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) LANGUAGES="c c++" all
@@endif gcc-no-bootstrap

@@if gcc
[+ FOR languages +]
.PHONY: check-gcc-[+language+] check-[+language+]
check-gcc-[+language+]:
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) [+gcc-check-target+]);
check-[+language+]: check-gcc-[+language+][+ FOR lib-check-target +] [+ lib-check-target +][+ ENDFOR lib-check-target +]
[+ ENDFOR languages +]

# The gcc part of install-no-fixedincludes, which relies on an intimate
# knowledge of how a number of gcc internal targets (inter)operate.  Delegate.
.PHONY: gcc-install-no-fixedincludes
gcc-install-no-fixedincludes:
	@@if [ -f ./gcc/Makefile ]; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	  $(HOST_EXPORTS) \
	  (cd ./gcc \
	   && $(MAKE) $(GCC_FLAGS_TO_PASS) install-no-fixedincludes); \
	else true; fi
@@endif gcc

# ---------------------
# GCC bootstrap support
# ---------------------

# We track the current stage (the one in 'gcc') in the stage_current file.
# stage_last instead tracks the stage that was built last.  These targets
# are dummy when toplevel bootstrap is not active.

# While making host and target tools, symlinks to the final stage must be
# there, so $(unstage) should be run at various points.  To avoid excessive
# recursive invocations of make, we "inline" them using a variable.  These
# must be referenced as ": $(MAKE) ; $(unstage)" rather than "$(unstage)"
# to avoid warnings from the GNU Make job server.

unstage = :
stage = :
current_stage = ""

@@if gcc-bootstrap
unstage = if [ -f stage_last ]; then [ -f stage_current ] || $(MAKE) `cat stage_last`-start || exit 1; else :; fi
stage = if [ -f stage_current ]; then $(MAKE) `cat stage_current`-end || exit 1; else :; fi
current_stage = "`cat stage_current 2> /dev/null`"
@@endif gcc-bootstrap

.PHONY: unstage stage
unstage:
	@@: $(MAKE); $(unstage)
stage:
	@@: $(MAKE); $(stage)

# Disable commands for lean bootstrap.
LEAN = false

# We name the build directories for the various stages "stage1-gcc",
# "stage2-gcc","stage3-gcc", etc.

# Since the 'compare' process will fail (on debugging information) if any
# directory names are different, we need to link the gcc directory for
# the previous stage to a constant name ('prev-gcc'), and to make the name of
# the build directories constant as well. For the latter, we use naked names
# like 'gcc', because the scripts in that directory assume it.  We use
# mv on platforms where symlinks to directories do not work or are not
# reliable.

# 'touch' doesn't work right on some platforms.
STAMP = echo timestamp > 

# We only want to compare .o files, so set this!
objext = .o

[+ FOR bootstrap-stage +]
.PHONY: stage[+id+]-start stage[+id+]-end

stage[+id+]-start::
	@@: $(MAKE); $(stage); \
	echo stage[+id+] > stage_current ; \
	echo stage[+id+] > stage_last; \
	$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)[+
   FOR host_modules +][+ IF bootstrap +]
@@if [+ module +]
	@@cd $(HOST_SUBDIR); [ -d stage[+id+]-[+module+] ] || \
	  mkdir stage[+id+]-[+module+]; \
	mv stage[+id+]-[+module+] [+module+] [+ IF prev +] ; \
	mv stage[+prev+]-[+module+] prev-[+module+] || test -f stage[+prev+]-lean [+ ENDIF prev +]
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]
	@@[ -d stage[+id+]-$(TARGET_SUBDIR) ] || \
	  mkdir stage[+id+]-$(TARGET_SUBDIR); \
	mv stage[+id+]-$(TARGET_SUBDIR) $(TARGET_SUBDIR) [+ IF prev +] ; \
	mv stage[+prev+]-$(TARGET_SUBDIR) prev-$(TARGET_SUBDIR) || test -f stage[+prev+]-lean [+ ENDIF prev +]

stage[+id+]-end:: [+ FOR host_modules +][+ IF bootstrap +]
@@if [+ module +]
	@@if test -d $(HOST_SUBDIR)/[+module+] ; then \
	  cd $(HOST_SUBDIR); mv [+module+] stage[+id+]-[+module+] [+ IF prev +]; \
	  mv prev-[+module+] stage[+prev+]-[+module+] ; : [+ ENDIF prev +] ; \
	fi
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]
	@@if test -d $(TARGET_SUBDIR) ; then \
	  mv $(TARGET_SUBDIR) stage[+id+]-$(TARGET_SUBDIR) [+ IF prev +] ; \
	  mv prev-$(TARGET_SUBDIR) stage[+prev+]-$(TARGET_SUBDIR) ; : [+ ENDIF prev +] ; \
	fi
	rm -f stage_current

# Bubble a bug fix through all the stages up to stage [+id+].  They are
# remade, but not reconfigured.  The next stage (if any) will not be
# reconfigured either.
.PHONY: stage[+id+]-bubble
stage[+id+]-bubble:: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	if test -f stage[+id+]-lean [+
	  IF prev +]|| test -f stage[+prev+]-lean [+ ENDIF prev +] ; then \
	  echo Skipping rebuild of stage[+id+] ; \
	else \
	  $(MAKE) stage[+id+]-start; \[+IF lean +]
	  if $(LEAN); then \
	    rm -rf stage[+lean+]-* ; \
	    $(STAMP) stage[+lean+]-lean ; \
	  fi; \[+ ENDIF lean +]
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage[+id+]; \
	fi[+ IF compare-target +]
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) [+compare-target+][+ ENDIF compare-target +]

.PHONY: all-stage[+id+] clean-stage[+id+]
do-clean: clean-stage[+id+]

# FIXME: Will not need to be conditional when toplevel bootstrap is the
# only possibility, but now it conflicts with no-bootstrap rules
@@if gcc-bootstrap
[+ IF compare-target +]
[+compare-target+]:
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	if test -f stage[+prev+]-lean; then \
	  echo Cannot compare object files as stage [+prev+] was deleted. ; \
	  exit 0 ; \
	fi; \
	: $(MAKE); $(stage); \
	rm -f .bad_compare ; \
	echo Comparing stages [+prev+] and [+id+] ; \
        sed=`echo stage[+id+] | sed 's,^stage,,;s,.,.,g'`; \
	files=`find stage[+id+]-* -name "*$(objext)" -print | \
		 sed -n s,^stage$$sed-,,p` ; \
	for file in $${files} ; do \
	  f1=$$r/stage[+prev+]-$$file; f2=$$r/stage[+id+]-$$file; \
	  if test ! -f $$f1; then continue; fi; \
	  $(do-[+compare-target+]) > /dev/null 2>&1; \
	  if test $$? -eq 1; then \
	    case $$file in \
	      @@compare_exclusions@@) \
	        echo warning: $$file differs ;; \
	      *) \
	        echo $$file differs >> .bad_compare ;; \
	    esac ; \
	  fi ; \
	done ; \
	if [ -f .bad_compare ]; then \
	  echo "Bootstrap comparison failure!"; \
	  cat .bad_compare; \
	  exit 1; \
	else \
	  echo Comparison successful.; \
	fi ; \
	$(STAMP) [+compare-target+][+ IF prev +]
	if $(LEAN); then \
	  rm -rf stage[+prev+]-*; \
	  $(STAMP) stage[+prev+]-lean; \
	fi[+ ENDIF prev +]
[+ ENDIF compare-target +]

[+ IF bootstrap-target +]
.PHONY: [+bootstrap-target+] [+bootstrap-target+]-lean
[+bootstrap-target+]:
	echo stage[+id+] > stage_final
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) stage[+id+]-bubble
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	TFLAGS="$(STAGE[+id+]_TFLAGS)"; \
	$(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target

[+bootstrap-target+]-lean:
	echo stage[+id+] > stage_final
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) LEAN=: stage[+id+]-bubble
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	TFLAGS="$(STAGE[+id+]_TFLAGS)"; \
	$(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target
[+ ENDIF bootstrap-target +]

# Rules to wipe a stage and all the following ones, also used for cleanstrap
[+ IF prev +]distclean-stage[+prev+]:: distclean-stage[+id+] [+ ENDIF prev +]
.PHONY: distclean-stage[+id+]
distclean-stage[+id+]::
	@@: $(MAKE); $(stage)
	@@test "`cat stage_last`" != stage[+id+] || rm -f stage_last
	rm -rf stage[+id+]-* [+
	  IF compare-target +][+compare-target+] [+ ENDIF compare-target +]

[+ IF cleanstrap-target +]
.PHONY: [+cleanstrap-target+]
[+cleanstrap-target+]: do-distclean local-clean
	echo stage[+id+] > stage_final
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) stage[+id+]-bubble
	@@: $(MAKE); $(unstage)
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	TFLAGS="$(STAGE[+id+]_TFLAGS)"; \
	$(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target
[+ ENDIF cleanstrap-target +]
@@endif gcc-bootstrap

[+ ENDFOR bootstrap-stage +]

stageprofile-end::
	$(MAKE) distclean-stagefeedback

stagefeedback-start::
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	for i in prev-*; do \
	  j=`echo $$i | sed s/^prev-//` ; \
	  cd $$r/$$i && \
	  { find . -type d | sort | sed 's,.*,$(SHELL) '"$$s"'/mkinstalldirs "../'$$j'/&",' | $(SHELL) ; } && \
	  { find . -name '*.*da' | sed 's,.*,$(LN) -f "&" "../'$$j'/&",' | $(SHELL) ; } ; \
	done

@@if gcc-bootstrap
do-distclean: distclean-stage1

# Provide a GCC build when we're building target libraries.  This does
# not work as a dependency, just as the minimum necessary to avoid errors.
stage_last:
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) stage1-bubble

# Same as unstage, but not phony and defaulting to stage1-start.  We place
# it in the dependency so that for example `make -j3 all-gcc' works.
stage_current:
	@@if test -f stage_last; then $(unstage); else $(MAKE) stage1-start; fi

.PHONY: restrap
restrap::
	@@: $(MAKE); $(stage)
	rm -rf stage1-$(TARGET_SUBDIR)[+ FOR bootstrap-stage +][+ IF prev
	  +] stage[+id+]-*[+ ENDIF prev +][+ ENDFOR bootstrap-stage +]
restrap:: all
@@endif gcc-bootstrap

# --------------------------------------
# Dependencies between different modules
# --------------------------------------

# Generic dependencies for target modules on host stuff, especially gcc
@@if gcc-bootstrap[+ FOR target_modules +][+ IF bootstrap
  +][+ FOR bootstrap_stage +]
configure-stage[+id+]-target-[+module+]: maybe-all-stage[+id+]-gcc[+
  ENDFOR +][+ ELSE bootstrap +]
configure-target-[+module+]: stage_last[+
  ENDIF bootstrap +][+ ENDFOR target_modules +]
@@endif gcc-bootstrap

@@if gcc-no-bootstrap[+ FOR target_modules +]
configure-target-[+module+]: maybe-all-gcc[+
  ENDFOR target_modules +]
@@endif gcc-no-bootstrap


# There are two types of dependencies here: 'hard' dependencies, where one
# module simply won't build without the other; and 'soft' dependencies, where
# if the depended-on module is missing, the depending module will do without
# or find a substitute somewhere (perhaps installed).  Soft dependencies
# are made here to depend on a 'maybe-' target.  If you're not sure,
# it's safer to use a soft dependency.

[+ ;; These Scheme functions build the bulk of the dependencies.
   ;; dep-target builds a string like "maybe-all-MODULE_KIND-gcc",
   ;; where "maybe-" is only included if HARD is not true, and all-gcc
   ;; is taken from VAR-NAME.
   (define dep-target (lambda (module-kind var-name hard)
      (string-append
         (if hard "" "maybe-")
         (dep-subtarget var-name)
         module-kind
         (dep-module var-name)
      )))

   ;; make-dep builds a dependency from the MODULE and ON AutoGen vars.
   (define make-dep (lambda (module-kind on-kind)
      (string-append
         (dep-target module-kind "module" #t) ": "
         (dep-target on-kind "on" (exist? "hard")))))

   ;; dep-subtarget extracts everything up to the first dash in the given
   ;; AutoGen variable, for example it extracts "all-" out of "all-gcc".
   (define dep-subtarget (lambda (var-name)
      (substring (get var-name) 0 (+ 1 (string-index (get var-name) #\-)))))

   ;; dep-module extracts everything up to the first dash in the given
   ;; AutoGen variable, for example it extracts "gcc" out of "all-gcc".
   (define dep-module (lambda (var-name)
      (substring (get var-name) (+ 1 (string-index (get var-name) #\-)))))

   ;; dep-stage builds a string for the prefix of a bootstrap stage.
   (define dep-stage (lambda ()
      (string-append
	 "stage"
	 (get "id")
	 "-")))

   ;; dep-maybe is the same as the AutoGen expression "- hard 'maybe-'"
   ;; but is written in Scheme.
   (define dep-maybe (lambda ()
      (if (exist? "hard") "" "maybe-")))

   ;; dep-kind returns "normal" if the dependency is on an "install" target,
   ;; or if either module is not bootstrapped.  It returns "bootstrap" for
   ;; configure or build dependencies between bootstrapped modules; it returns
   ;; "prebootstrap" for configure or build dependencies of bootstrapped
   ;; modules on a build module (e.g. all-gcc on all-build-bison).  All this
   ;; is only necessary for host modules.
   (define dep-kind (lambda ()
      (if (and (hash-ref boot-modules (dep-module "module"))
	       (=* (dep-module "on") "build-"))
	  "prebootstrap"

	  (if (or (= (dep-subtarget "on") "install-")
		  (not (hash-ref boot-modules (dep-module "module")))
		  (not (hash-ref boot-modules (dep-module "on"))))
              "normal"
	      "bootstrap"))))

   ;; We now build the hash table that is used by dep-kind.
   (define boot-modules (make-hash-table 113))
+]

[+ FOR host_modules +][+
   (if (exist? "bootstrap")
       (hash-create-handle! boot-modules (get "module") #t))
   "" +][+ ENDFOR host_modules +]
[+ FOR target_modules +][+
   (if (exist? "bootstrap")
       (hash-create-handle! boot-modules (string-append "target-" (get "module")) #t))
   "" +][+ ENDFOR target_modules +]

# With all the machinery above in place, it is pretty easy to generate
# dependencies.  Host dependencies are a bit more complex because we have
# to check for bootstrap/prebootstrap dependencies.  To resolve
# prebootstrap dependencies, prebootstrap modules are gathered in
# a hash table.
[+ FOR dependencies +][+ (make-dep "" "") +]
[+ CASE (dep-kind) +]
[+ == "prebootstrap"
     +][+ FOR bootstrap_stage +]
[+ (make-dep (dep-stage) "") +][+
       ENDFOR bootstrap_stage +]
[+ == "bootstrap"
     +][+ FOR bootstrap_stage +]
[+ (make-dep (dep-stage) (dep-stage)) +][+
       ENDFOR bootstrap_stage +]
[+ ESAC +][+
ENDFOR dependencies +]

# Dependencies for target modules on other target modules are
# described by lang_env_dependencies; the defaults apply to anything
# not mentioned there.
[+
   ;; Predicate for whether LANG was specified in lang_env_dependencies.
   (define lang-dep (lambda (lang)
      (hash-ref lang-env-deps (string-append (get "module") "-" lang))))

   ;; Build the hash table we will need.
   (define lang-env-deps (make-hash-table 7))
+][+ FOR lang_env_dependencies +][+
   (if (exist? "cxx")
       (hash-create-handle! lang-env-deps
	  (string-append (get "module") "-" "cxx") #t))

   (if (exist? "no_c")
       (hash-create-handle! lang-env-deps
	  (string-append (get "module") "-" "no_c") #t))

   (if (exist? "no_gcc")
       (hash-create-handle! lang-env-deps
	  (string-append (get "module") "-" "no_gcc") #t))
   "" +][+ ENDFOR lang_env_dependencies +]

@@if gcc-bootstrap[+ FOR target_modules +][+ IF (not (lang-dep "no_gcc"))
  +][+ IF bootstrap +][+ FOR bootstrap_stage +]
configure-stage[+id+]-target-[+module+]: maybe-all-stage[+id+]-target-libgcc[+
  ENDFOR +][+ ENDIF bootstrap +][+ ENDIF +][+ ENDFOR target_modules +]
@@endif gcc-bootstrap

@@if gcc-no-bootstrap[+ FOR target_modules +][+ IF (not (lang-dep "no_gcc")) +]
configure-target-[+module+]: maybe-all-target-libgcc[+
  ENDIF +][+ ENDFOR target_modules +]
@@endif gcc-no-bootstrap

[+ FOR target_modules +][+ IF (not (lang-dep "no_c")) +]
configure-target-[+module+]: maybe-all-target-newlib maybe-all-target-libgloss[+
  ENDIF +][+ IF (lang-dep "cxx") +]
configure-target-[+module+]: maybe-all-target-libstdc++-v3[+
  ENDIF +]
[+ ENDFOR target_modules +]

CONFIGURE_GDB_TK = @@CONFIGURE_GDB_TK@@
GDB_TK = @@GDB_TK@@
INSTALL_GDB_TK = @@INSTALL_GDB_TK@@
configure-gdb: $(CONFIGURE_GDB_TK)
all-gdb: $(gdbnlmrequirements) $(GDB_TK)
install-gdb: $(INSTALL_GDB_TK)

# Serialization dependencies.  Host configures don't work well in parallel to
# each other, due to contention over config.cache.  Target configures and 
# build configures are similar.
@@serialization_dependencies@@

# --------------------------------
# Regenerating top level configury
# --------------------------------

# Rebuilding Makefile.in, using autogen.
AUTOGEN = autogen
$(srcdir)/Makefile.in: @@MAINT@@ $(srcdir)/Makefile.tpl $(srcdir)/Makefile.def
	cd $(srcdir) && $(AUTOGEN) Makefile.def

# Rebuilding Makefile.
Makefile: $(srcdir)/Makefile.in config.status
	CONFIG_FILES=$@@ CONFIG_HEADERS= $(SHELL) ./config.status

config.status: configure
	CONFIG_SHELL="$(SHELL)" $(SHELL) ./config.status --recheck

# Rebuilding configure.
AUTOCONF = autoconf
$(srcdir)/configure: @@MAINT@@ $(srcdir)/configure.ac $(srcdir)/config/acx.m4 \
	$(srcdir)/config/override.m4 $(srcdir)/config/proginstall.m4
	cd $(srcdir) && $(AUTOCONF)

# ------------------------------
# Special directives to GNU Make
# ------------------------------

# Don't pass command-line variables to submakes.
.NOEXPORT:
MAKEOVERRIDES=

# end of Makefile.in
@


1.233
log
@Merge g++/xg++ changes from GCC

	* configure.ac: Merge from GCC.
	* Makefile.tpl: Dito.
	* Makefile.in: Dito.
	* configure: Dito.
@
text
@d370 1
a370 1
BOOT_ADAFLAGS=-gnatpg -gnata
@


1.232
log
@	PR bootstrap/54820
	* Makefile.tpl (STAGE1_FLAGS_TO_PASS): New variable.
	(all-[+prefix+][+module+]): Pass stage1_args to sub-makes.
	(all-stage[+id+]-[+prefix+][+module+]): Likewise, if prev is false.
	(clean-stage[+id+]-[+prefix+][+module+]): Likewise, if prev is false.
	(host_modules): Set stage1_args to STAGE1_FLAGS_TO_PASS.
	* Makefile.in: Regenerate.
	* configure.ac (have_static_libs): New variable and associated check.
	(stage1-ldflags): Move to after stage1_libs and set to -static-libstdc++
	-static-libgcc if stage1_libs is empty and have_static_libs is yes.
	* configure: Regenerate.
@
text
@d241 1
a241 1
	CXX="$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/g++$(exeext) \
@


1.231
log
@Sync toplevel files with GCC tree

2012-08-14   Diego Novillo  <dnovillo@@google.com>

	Merge from cxx-conversion branch.

	* Makefile.tpl (STAGE[+id+]_CXXFLAGS): Remove
	POSTSTAGE1_CONFIGURE_FLAGS.
	* Makefile.in: Regenerate.
	* configure.ac (ENABLE_BUILD_WITH_CXX): Remove.  Update all users.
	Force C++ when bootstrapping.
	* configure: Regenerate.

2012-07-06  Richard Guenther  <rguenther@@suse.de>

	* Makefile.def (cloog): Pass $(HOST_GMPINC) and $(HOST_ISLINC)
	as CPPFLAGS, pass path to built gmp as LDFLAGS, always use
	--with-gmp=system.
	* Makefile.in: Regenerated.
	* configure: Likewise.

2012-07-06  Richard Guenther  <rguenther@@suse.de>

	* configure.ac (extra_isl_gmp_configure_flags): Initialize and subst.
	* Makefile.def (isl): Use extra_isl_gmp_configure_flags and
	supply V=1 as extra_make_flags.
	* configure: Regenerated.
	* Makefile.in: Likewise.

2012-07-03  Richard Guenther  <rguenther@@suse.de>

	* Makfile.def (isl): Remove not necessary extra_exports and
	extra_make_flags.
	(cloog): Use $$CPPFLAGS instead of ${CPPFLAGS}.
	* Makefile.in: Regenerated.

2012-07-03  Richard Guenther  <rguenther@@suse.de>

	* Makefile.def (cloog): Add V=1 to extra_make_flags.
	* configure.ac: If either the ISL or the CLooG check failed
	do not try to build in-tree versions.
	* Makefile.in: Regenerated.
	* configure: Regenerated.

2012-07-02  Richard Guenther  <rguenther@@suse.de>
	Michael Matz  <matz@@suse.de>
	Tobias Grosser <tobias@@grosser.es>
	Sebastian Pop <sebpop@@gmail.com>

	* Makefile.def: Add ISL host module, remove PPL host module.
	Adjust ClooG host module to use the proper ISL.
	* Makefile.tpl: Pass ISL include flags instead of PPL ones.
	* configure.ac: Include config/isl.m4.  Add ISL host library,
	remove PPL.  Remove PPL configury, add ISL configury, adjust
	ClooG configury.
	* Makefile.in: Regenerated.
	* configure: Likewise.

2012-07-02  Richard Guenther  <rguenther@@suse.de>

	Merge from graphite branch
	2011-07-21  Tobias Grosser  <tobias@@grosser.es>

	* configure: Regenerated.
	* config/cloog.m4: Remove support for CLooG-ppl and CLooG-parma,
	both cloog.org and legacy versions. The only supported version will
	be CLooG with the isl backend.

	2011-07-21  Tobias Grosser  <tobias@@grosser.es>

	* configure: Regenerated.
	* configure.ac: Require cloog isl 0.17.0

	2011-07-21  Tobias Grosser  <tobias@@grosser.es>

	* configure: Regenerated.
	* config/cloog.m4: Do not define CLOOG_ORG

2012-06-29  Steven Bosscher  <steven@@gcc.gnu.org>

	* configure.ac: Skip C if explicitly selected.
	* configure: Regenerate.

2012-06-28  Christophe Lyon <christophe.lyon@@st.com>

	* configure.ac (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Make sure
	they contain -O2.
	* configure: Regenerate.

2012-06-20  Jason Merrill  <jason@@redhat.com>

	* Makefile.tpl (check-target-libgomp-c++): New.
	(check-target-libitm-c++): New.
	* Makefile.def (c++): Add them.
	* Makefile.in: Regenerate.

2012-05-16  Olivier Hainque  <hainque@@adacore.com>

	* Makefile.tpl (gcc-no-fixedincludes): Rename into ...
	(gcc-install-no-fixedincludes): Now forwarder to local target in gcc/
	(install-no-fixedincludes): Adjust accordingly.
	* Makefile.in: Regenerate.

2012-05-09  Nick Clifton  <nickc@@redhat.com>
	    Paul Smith  <psmith@@gnu.org>

	PR bootstrap/50461
	* configure.ac (mpfr-dir): When using in-tree MPFR sources
	allow for the fact that from release v3.1.0 of MPFR the source
	files were moved into a src sub-directory.
	* configure: Regenerate.

2012-05-07  Janne Blomqvist  <jb@@gcc.gnu.org>

	* configure.ac: Bump minimum MPFR version to 2.4.0.
	* configure: Regenerated.

2012-05-01  Richard Henderson  <rth@@redhat.com>

	* Makefile.def (libatomic): New target_module.
	* configure.ac (target_libraries): Add libatomic.
	(noconfigdirs): Check if libatomic is supported.
	* Makefile.in, configure: Rebuild.

config/

2012-08-26  Art Haas <ahaas@@impactweather.com>

	* cloog.m4 (CLOOG_INIT_FLAGS): Use = instead of == in test.

2012-07-04  Tristan Gingold  <gingold@@adacore.com>

	* isl.m4 (ISL_CHECK_VERSION): Set to yes if cross-compiling.
	Fix comments.

2012-07-03  Richard Guenther  <rguenther@@suse.de>

	* cloog.m4: Remove debugging print.

2012-07-03  Rainer Orth  <ro@@CeBiTec.Uni-Bielefeld.DE>

	* isl.m4 (ISL_CHECK_VERSION): Add -lisl to LIBS, not LDFLAGS.

2012-07-02  Richard Guenther  <rguenther@@suse.de>

	* isl.m4 (_ISL_CHECK_CT_PROG): Omit main function header/footer.
	Fix version test.

2012-07-02  Richard Guenther  <rguenther@@suse.de>
	Michael Matz  <matz@@suse.de>
	Tobias Grosser <tobias@@grosser.es>
	Sebastian Pop <sebpop@@gmail.com>

	* cloog.m4: Set up to work against ISL only.
	* isl.m4: New file.
@
text
@d618 6
d1085 1
a1085 1
	  $(MAKE) $(BASE_FLAGS_TO_PASS) [+args+] [+extra_make_flags+] \
d1118 2
a1119 3
		[+args+] [+
		IF prev +][+poststage1_args+][+ ENDIF prev
		+] [+extra_make_flags+] \
d1133 2
a1134 3
	$(MAKE) [+args+] [+ IF prev +] \
		[+poststage1_args+] [+ ENDIF prev +] \
		[+extra_make_flags+] clean
d1169 1
@


1.230
log
@2011-11-09  Roland McGrath  <mcgrathr@@google.com>
* configure.ac: Add tool checks for READELF and READELF_FOR_TARGET.
* configure: Rebuild.
* Makefile.def (flags_to_pass): Add READELF_FOR_TARGET.
* Makefile.tpl (READELF, READELF_FOR_TARGET): New variables.
(HOST_EXPORTS): Add READELF, READELF_FOR_TARGET.
(BASE_FLAGS_TO_PASS): Add READELF_FOR_TARGET.
(BASE_TARGET_EXPORTS, EXTRA_HOST_FLAGS, EXTRA_TARGET_FLAGS):
Add READELF.
* Makefile.in: Rebuild.
@
text
@d225 1
a225 2
	PPLLIBS="$(HOST_PPLLIBS)"; export PPLLIBS; \
	PPLINC="$(HOST_PPLINC)"; export PPLINC; \
d315 2
a316 3
# Where to find PPL
HOST_PPLLIBS = @@ppllibs@@
HOST_PPLINC = @@pplinc@@
a425 1
POSTSTAGE1_CONFIGURE_FLAGS = @@POSTSTAGE1_CONFIGURE_FLAGS@@
d436 1
a436 4
# STAGE1_CONFIGURE_FLAGS overridden below, so we can use
# POSTSTAGE1_CONFIGURE_FLAGS here.
STAGE[+id+]_CONFIGURE_FLAGS = \
	$(STAGE_CONFIGURE_FLAGS) $(POSTSTAGE1_CONFIGURE_FLAGS)
a453 3
# * Don't remove this, because above we added
#   POSTSTAGE1_CONFIGURE_FLAGS to STAGE[+id+]_CONFIGURE_FLAGS, which
#   we don't want for STAGE1_CONFIGURE_FLAGS.
d900 3
a902 2
# install-no-fixedincludes is used because Cygnus can not distribute
# the fixed header files.
d905 1
a905 1
	install-target gcc-no-fixedincludes
d1409 14
d1452 4
a1455 5
# Install the gcc headers files, but not the fixed include files,
# which Cygnus is not allowed to distribute.  This rule is very
# dependent on the workings of the gcc Makefile.in.
.PHONY: gcc-no-fixedincludes
gcc-no-fixedincludes:
a1456 6
	  rm -rf gcc/tmp-include; \
	  mv gcc/include gcc/tmp-include 2>/dev/null; \
	  mkdir gcc/include; \
	  cp $(srcdir)/gcc/gsyslimits.h gcc/include/syslimits.h; \
	  touch gcc/stmp-fixinc gcc/include/fixed; \
	  rm -f gcc/stmp-headers gcc/stmp-int-hdrs; \
d1458 1
a1458 1
	  s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
d1460 2
a1461 4
	  (cd ./gcc && \
	   $(MAKE) $(GCC_FLAGS_TO_PASS) install); \
	  rm -rf gcc/include; \
	  mv gcc/tmp-include gcc/include 2>/dev/null; \
@


1.229
log
@	toplevel:
	* Makefile.tpl (EXTRA_GCC_FLAGS): Remove LIBGCC2_CFLAGS,
	LIBGCC2_DEBUG_CFLAGS, LIBGCC2_INCLUDES.
	* Makefile.in: Regenerate.

	config:
	* mh-interix (LIBGCC2_DEBUG_CFLAGS): Remove.
@
text
@d212 1
d220 1
d293 1
d406 1
d500 1
d620 1
d661 1
@


1.228
log
@	Merge from gcc:

	2011-07-26  Ian Lance Taylor  <iant@@google.com>
	* configure.ac: Set have_compiler based on whether gcc directory
	exists, rather than on whether gcc is in configdirs.
	* configure: Rebuild.

	2011-07-20  David Edelsohn  <dje.gcc@@gmail.com>
	* Makefile.tpl (POSTSTAGE1_CONFIGURE_FLAGS): Add libsupc++ to
	link directories.
	* Makefile.in: Rebuild.

	2011-07-20  Ian Lance Taylor  <iant@@google.com>
	PR bootstrap/49787
	* configure.ac: Move --enable-bootstrap handling earlier in file.
	If --enable-bootstrap and either --enable-build-with-cxx or
	--enable-build-poststage1-with-cxx, enable C++ automatically.
	* configure: Rebuild.

	2011-07-19  Ian Lance Taylor  <iant@@google.com>
	* configure.ac: Add --enable-build-poststage1-with-cxx.  If set,
	make C++ a boot_language.  Set and substitute
	POSTSTAGE1_CONFIGURE_FLAGS.
	* Makefile.tpl (POSTSTAGE1_CONFIGURE_FLAGS): New variable.
	(STAGE[+id+]_CONFIGURE_FLAGS): Add $(POSTSTAGE1_CONFIGURE_FLAGS).
	* configure, Makefile.in: Rebuild.

	2011-07-16  Jason Merrill  <jason@@redhat.com>
	* Makefile.def (language=c++): Add check-c++0x and
	check-target-libmudflap-c++.
	* Makefile.tpl (check-target-libmudflap-c++): New.
	* Makefile.in: Regenerate.

	2011-07-16  Matthias Klose  <doko@@ubuntu.com>
	* Makefile.tpl (EXTRA_CONFIGARGS_LIBJAVA): Define.
	* Makefile.def (target_modules/libjava): Pass
	$(EXTRA_CONFIGARGS_LIBJAVA).
	* configure.ac: Pass --disable-static in EXTRA_CONFIGARGS_LIBJAVA,
	if not configured with --enable-static-libjava.
	* Makefile.in: Regenerate.
	* configure: Likewise.

	2011-06-22  Hans-Peter Nilsson  <hp@@axis.com>
	PR regression/47836
	PR bootstrap/23656
	PR other/47733
	PR bootstrap/49247
	PR c/48825
	* configure.ac (target_libraries): Remove target-libiberty.
	Remove case-statement setting skipdirs=target-libiberty for
	multiple targets.  Remove checking target_configdirs and
	removing target-libiberty but keeping target-libgcc if
	otherwise empty.
	* Makefile.def (target_modules): Don't add libiberty.
	(dependencies): Remove all traces of target-libiberty.
	* configure, Makefile.in: Regenerate.
@
text
@d9 1
a9 1
#   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
d671 1
a671 4
	"`echo 'LIMITS_H_TEST=$(LIMITS_H_TEST)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIBGCC2_CFLAGS=$(LIBGCC2_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIBGCC2_DEBUG_CFLAGS=$(LIBGCC2_DEBUG_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIBGCC2_INCLUDES=$(LIBGCC2_INCLUDES)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`"
@


1.227
log
@	* Makefile.def (language=c++): Add check-c++0x and
	check-target-libmudflap-c++.
	* Makefile.tpl (check-target-libmudflap-c++): New.
	* Makefile.in: Regenerate.
@
text
@d243 1
d247 3
a249 1
	  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs"; export CXX; \
d325 2
d424 1
d435 4
a438 1
STAGE[+id+]_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)
d456 3
@


1.226
log
@2011-05-08  Doug Kwan  <dougkwan@@google.com>

	Merge from gcc:

	2011-05-08  Doug Kwan  <dougkwan@@google.com>

		* configure.ac: Propagate LDFLAGS_FOR_TARGET.
		* configure: Regenerated.
		* Makefile.tpl (LDFLAGS_FOR_TARGET): Use LDFLAGS_FOR_TARGET
		value from configure.
		* Makefile.in: Regenerated.
@
text
@d1394 7
@


1.225
log
@	* configure.ac: Remove code setting CONFIG_SHELL, config_shell and
	moveifchange.
	* configure: Regenerate.
	* Makefile.tpl: Use @@SHELL@@ not @@config_shell@@.
	* Makefile.in: Regenerate.
@
text
@d497 1
a497 1
LDFLAGS_FOR_TARGET = 
@


1.224
log
@2011-03-24  Paolo Bonzini  <pbonzini@@redhat.com>

        * configure.ac: Remove references to mt-mep, mt-netware,
        mt-wince.
        * Makefile.def: Add all-utils soft dependencies.
        * Makefile.tpl: Remove GDB_NLM_DEPS.
        * configure: Regenerate.
        * Makefile.in: Regenerate.

config:
2011-03-24  Paolo Bonzini  <pbonzini@@redhat.com>

        * mt-mep: Remove, obsolete.
        * mt-netware: Remove, obsolete.
        * mt-wince: Remove, obsolete.
        * mt-v810: Remove, unused.
@
text
@d326 1
a326 1
SHELL = @@config_shell@@
@


1.224.2.1
log
@	* configure.ac: Remove code setting CONFIG_SHELL, config_shell and
	moveifchange.
	* configure: Regenerate.
	* Makefile.tpl: Use @@SHELL@@ not @@config_shell@@.
	* Makefile.in: Regenerate.
@
text
@d326 1
a326 1
SHELL = @@SHELL@@
@


1.223
log
@2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	Sync from GCC:

	2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.ac: Remove empty cases.
	* configure: Regenerate.

	2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def: Add dependency from termcap to gdb.
	* Makefile.in: Regenerate.

	2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.ac: Remove all mentions of mh-sysv4 and mh-solaris.
	* configure: Regenerate.
	* Makefile.def: Remove all mentions of X11_FLAGS_TO_PASS.
	* Makefile.tpl: Likewise.
	* Makefile.in: Regenerate.

	2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.ac: Remove all mentions of tentative_cc.
	* configure: Regenerate.

	2011-03-16  Jack Howarth  <howarth@@bromo.med.uc.edu>

	PR lto/48086
	* configure.ac: Re-enable LTO on *-apple-darwin9.
	* configure: Regenerate.

config:
2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	Sync from GCC:

	2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	* mh-cygwin: Remove obsolete variables and dependencies.

	2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	* mh-sysv4: Remove.
	* mh-solaris: Remove.

	2011-03-24  Paolo Bonzini  <bonzini@@gnu.org>

	* mh-sysv4: Remove AR_CFLAGS.
@
text
@a105 2
GDB_NLM_DEPS = 

@


1.222
log
@Sync toplevel and config/ from GCC.

/:
	Sync from GCC:

	2011-02-12  Alexandre Oliva  <aoliva@@redhat.com>

	PR lto/47225
	* Makefile.def (lto-plugin): Double dash for enable-shared.
	(configure-gcc): Depend on all-lto-plugin.
	* Makefile.in: Rebuilt.

	2011-02-11  Ralf Wildenhues  <Ralf.Wildenhues@@gmx.de>

	* configure.ac: Remove extra bracket.
	* configure: Regenerate.

	2011-02-06  Kai Tietz  <kai.tietz@@onevision.com>

	PR lto/47225
	* Makefile.def: Add dependency for install-gcc
	on install-lto-plugin.
	* Makfile.in: Regenerated

	2011-01-25  Jakub Jelinek  <jakub@@redhat.com>

	* configure.ac: If with_ppl is no, move setting with_cloog=no
	after CLOOG_REQUESTED check.
	* configure: Regenerated.

	2011-01-25  Sebastian Pop  <sebastian.pop@@amd.com>

	* configure.ac: Call AC_MSG_ERROR when PPL 0.11 is not present and
	CLooG has been requested.
	* configure: Regenerated.

	2011-01-25  Sebastian Pop  <sebastian.pop@@amd.com>

	* configure: Regenerated.
	* configure.ac: Check for version 0.11 (or later revision) of PPL.

	2011-01-25  Tobias Grosser  <grosser@@fim.uni-passau.de>

	* configure: Regenerated.
	* configure.ac: Use CLOOG_CHECK_VERSION(0,16,1).

	2011-01-07  Jan Hubicka  <jh@@suse.cz>

	PR lto/47225
	* Makefile.in: Regenerate.
	* Makefile.def (lto-plugin): Always pass enable-shared to the plugin
	configure.

config/:
2011-01-25  Jakub Jelinek  <jakub@@redhat.com>

	* cloog.m4 (CLOOG_REQUESTED): Use $2 if --without-cloog.

2011-01-10  Jan Hubicka  <jh@@suse.cz>

	* bootstrap-lto.mk: -fuse-linker-plugin is default now;
	pass -fno-lto to STAGEprofile.
@
text
@a610 12
# Flags that are concerned with the location of the X11 include files
# and library files
#
# NOTE: until the top-level is getting the values via autoconf, it only
# causes problems to have this top-level Makefile overriding the autoconf-set
# values in child directories.  Only variables that don't conflict with
# autoconf'ed ones should be passed by X11_FLAGS_TO_PASS for now.
#
X11_FLAGS_TO_PASS = \
	'X11_EXTRA_CFLAGS=$(X11_EXTRA_CFLAGS)' \
	'X11_EXTRA_LIBS=$(X11_EXTRA_LIBS)'

@


1.221
log
@PR other/46020
* configure.ac (CXX_FOR_TARGET): Add -funconfigured-libstdc++-v3.
* Makefile.def (CXX_FOR_TARGET): Removed from flags_to_pass.
* Makefile.tpl (CXX_FOR_TARGET_FLAG_TO_PASS): New.
(BASE_FLAGS_TO_PASS): Use it.
* configure: Rebuilt.
* Makefile.in: Rebuilt.
@
text
@d9 1
a9 1
#   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.220
log
@PR other/46202: implement install-strip.

/:
	PR other/46202
	* configure.ac: Fix just-built in-tree STRIP name to be
	binutils/strip-new.
	* configure: Regenerate.
	* Makefile.def (install-strip-gcc, install-strip-binutils)
	(install-strip-opcodes, install-strip-ld, install-strip-itcl)
	(install-strip-sid): Mirror dependencies on non-strip variants
	of these targets on the respective -strip prerequisites.
	* Makefile.tpl (install-strip, install-strip-host)
	(install-strip-target): New targets.
	(install-strip-[+module+], install-strip-target-[+module+]):
	New targets.
	* Makefile.in: Regenerate.

etc/:
	* Makefile.in (install-strip): New target.


libiberty/:
	PR other/46202
	* Makefile.in (install-strip): New phony target.
	(install): Also mark as phony.
@
text
@d554 20
d581 1
@


1.219
log
@Merge from gcc top-level.

./:
	* configure.ac: Add target-libgo to target_libraries.  Set
	and substitute GOC_FOR_BUILD and GOC_FOR_TARGET.
	* Makefile.tpl (BUILD_EXPORTS): Add GOC and GOCFLAGS.
	(HOST_EXPORTS): Add GOC.
	(BASE_TARGET_EXPORTS): Add GOC.
	(GOC_FOR_BUILD, GOCFLAGS, GOC_FOR_TARGET): New variables.
	(GOCFLAGS_FOR_TARGET): New variable.
	(EXTRA_HOST_FLAGS): Add GOC.
	(EXTRA_TARGET_FLAGS): Add GOC and GOCFLAGS.
	* Makefile.def (target_modules): Add libgo.
	(flags_to_pass): Add GOC_FOR_TARGET and GOCFLAGS_FOR_TARGET.
	(dependencies): Add dependency from configure-target-libgo to
	configure-target-libffi and all-target-libstdc++-v3.  Add
	dependencies from all-target-libgo to all-target-libffi.
	(languages): Add go.
	* configure: Rebuild.
	* Makefile.in: Rebuild.

	* config-ml.in: Add Go support: treat GOC and GOCFLAGS like other
	compiler/flag environment variables.

	* configure.ac: Check for lang_requires_boot_languages in
	config-lang.in files.
	* configure: Rebuild.

	PR fortran/32049
	* Makefile.def: Add libquadmath; build it with language=fortran.
	* configure.ac: Add libquadmath.
	* Makefile.tpl: Handle multiple libs in check-[+language+].
	* Makefile.in: Regenerate.
	* configure: Regenerate.

	* configure.ac: Fix spelling in option names.
	* configure: Regenerated.

	PR bootstrap/39622
	* configure.ac (FLAGS_FOR_TARGET): Add include-fixed path.
	* configure: Regenerated.

	* config/cloog.m4: Add -enable-cloog-backend=(isl|ppl|ppl-legacy) to
	define the cloog backend to use. Furthermore, only pass the ppllibs to
	the configure checks, if necessary.
	* configure: Regenerate.

	* config/cloog.m4: Use CLooG predefined macro to check for CLooG PPL.
	* configure: regenerate

	* config/cloog.m4: Fix typo.  verison -> version.
	* configure: Regenerate.

	* config/cloog.m4: Pass ppl libraries to the CLooG version check.
	* configure: Regenerate.

	* configure.ac: Support official CLooG.org versions.
	* configure: Regenerate.
	* config/cloog.m4: New.

	* configure.ac (*-*-darwin*): Use mh-darwin for all Darwin variants.
	* configure: Regenerate.

config/:
	* cloog.m4 (CLOOG_INIT_FLAGS): Fix spelling in option names.

	* bootstrap-lto: Use -flto.

	* mh-darwin: Renamed from mh-ppc-darwin.
@
text
@d892 20
d1197 17
d1326 22
@


1.218
log
@	* Makefile.def (target_modules): Set lib_path to src/.libs for
	libstdc++-v3 module.
	* Makefile.tpl: Fix typo in TARGET_LIB_PATH comment.
	* Makefile.in: Rebuild.
@
text
@d163 2
d201 1
d282 1
d349 1
d412 1
d478 1
d500 1
d578 1
d627 2
d1354 1
a1354 1
check-[+language+]: check-gcc-[+language+][+ IF lib-check-target +] [+ lib-check-target +][+ ENDIF lib-check-target +]
@


1.217
log
@2010-07-17  Jack Howarth  <howarth@@bromo.med.uc.edu>

	PR target/44862
	* Makefile.tpl (POSTSTAGE1_CXX_EXPORT):
	Provide -B option to allow for link spec %s substitutions for
	libstdc++.a on darwin.
	* Makefile.in: Regenerate.
@
text
@d516 1
a516 1
# so that prorgams built for the target machine work.
@


1.216
log
@        * Makefile.tpl: Use "-exec rm {}" rather than "-delete" to delete
        the config.cache files found by the find command.
@
text
@d241 1
@


1.215
log
@        PR 11238
        * Makefile.tpl (local-distclean): Also remove config.cache files in
        sub-directories as there may not be Makefiles present in the
        sub-directories.
        * Makefile.in: Regenerate.
        * configure.ac: Revert previous delta.
        * configure: Regenerate.
@
text
@d774 1
a774 1
	-find . -name config.cache -delete \; 2>/dev/null
@


1.214
log
@	gcc PR libstdc++/36101, gcc PR libstdc++/42813
	* configure.ac (target_configdirs): Substitute.
	* Makefile.def: Bootstrap target module libgomp.
	Add dependency of all-target-libstdc++-v3 on configure-target-libgomp.
	* Makefile.tpl (TARGET_CONFIGDIRS): New makefile variable.
	(BASE_TARGET_EXPORTS): Export TARGET_CONFIGDIRS.
	* configure, Makefile.in: Regenerate.
@
text
@d774 1
@


1.213
log
@Sync from GCC: Makefile.tpl (BASE_TARGET_EXPORTS) fix

/:
	PR bootstrap/41818
	* Makefile.tpl (BASE_TARGET_EXPORTS): Only add TARGET_LIB_PATH
	to $(RPATH_ENVVAR) if bootstrapping.  Fix typo in comment.
	* Makefile.in: Regenerate.
@
text
@d179 1
d291 2
a292 1
	$(RPATH_ENVVAR)=`echo "$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);
@


1.212
log
@* configure.ac: Add libelf to host_libs.  Enable in-tree configury
of ppl and cloog.  Fix in-tree configury of libelf, skip tests.
Fix portability of test of C++ as bootstrap language.  Add
ppl/src/ppl-config.o to the bootstrap compare exclusion list.
* configure: Rebuild.
* Makefile.def: Drop host and target settings from gmp, mpfr, ppl,
and cloog.  Fix in-tree ppl configuration.  Introduce libelf
in-tree building.
* Makefile.tpl (POSTSTAGE1_CXX_EXPORT): New.
(POSTSTAGE1_HOST_EXPORTS): Use it.
(STAGE[+id+]_CXXFLAGS): New.
(BASE_FLAGS_TO_PASS): Pass it down.
(configure-stage[+id+]-[+prefix+][+module+]): Use it.  Add
extra_exports.
(all-stage[+id+]-[+prefix+][+module+]): Likewise.
(configure-[+prefix+][+module+], all-[+prefix+][+module+]): Add
extra_exports.
* Makefile.in: Rebuild.
* configure.ac (FLAGS_FOR_TARGET):  Add -L and -isystem
paths for *-w64-mingw* and x86_64-*mingw*.
* configure: Regenerated.
* configure.ac: Disable target-winsup & co for
x86_64-*-mingw* and *-w64-mingw* targets.
* configure: Regenerated.
* configure.ac (CLooG test): Use = with test.
* configure: Regenerate.
* configure.ac: Do not set LIBS for ppl/cloog checks.  Disable
cloog if the ppl version check failed.  Move flags saving
before setting in libelf check.
* configure: Regenerate.
* configure.ac: Adjust the ppl and cloog configure to work as
documented.  Disable cloog if ppl was disabled.  Omit the version
checks if they were disabled.
* configure: Re-generate.
@
text
@d265 1
a265 1
# configuring subdirectories for the host system.
d287 4
a290 1
	$(RPATH_ENVVAR)=`echo "$(HOST_LIB_PATH)$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);
@


1.211
log
@Sync with gcc repository.
@
text
@d232 15
d254 1
a254 7
	CXX="$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/g++$(exeext) \
	  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ -nostdinc++ \
	  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include/$(TARGET_SUBDIR) \
	  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include \
	  -I$$s/libstdc++-v3/libsupc++ \
	  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs"; export CXX; \
	CXX_FOR_BUILD="$$CXX"; export CXX_FOR_BUILD; \
d413 5
d429 2
a430 2
STAGE1_CHECKING=@@stage1_checking@@
STAGE1_LANGUAGES=@@stage1_languages@@
d545 1
d593 2
a594 2
	LDFLAGS="$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)" \
	HOST_LIBS="$(POSTSTAGE1_LIBS)" \
d936 1
a936 1
	[+exports+] \
d985 1
a985 1
	CXXFLAGS="$(STAGE[+id+]_CFLAGS)"; export CXXFLAGS;[+ IF prev +] \
d987 2
a988 1
	LIBCFLAGS="$(LIBCFLAGS)"[+ ENDIF prev +]; export LIBCFLAGS;[+ ENDIF prefix +] \
d1024 1
a1024 1
	[+exports+] \
d1046 1
a1046 1
	[+poststage1_exports+][+ ENDIF prev +] \
d1053 1
a1053 1
		CXXFLAGS="$(STAGE[+id+]_CFLAGS)"[+ IF prev +] \
@


1.210
log
@ChangeLog:
* configure.ac (with-build-config): Document.  Handle without.
Handle missing argument.
* configure: Rebuilt.
config/ChangeLog:
* bootstrap-debug-big.mk (STAGE2_CFLAGS): Drop -gtoggle.
* bootstrap-debug-lean.mk: Update comments.
(STAGE2_CFLAGS): Likewise.
(do-compare): Don't override.
ChangeLog:
* configure.ac (with-build-config): Document.  Handle without.
Handle missing argument.
* configure: Rebuilt.
@
text
@d225 2
d243 1
a243 1
	  -I$$r/$(srcdir)/libstdc++-v3/libsupc++ \
d301 4
@


1.209
log
@2009-09-02  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (AWK): Fix typo.
	* Makefile.in: Regenerate.

2009-09-02  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.ac: Detect awk and sed.
	* Makefile.def (flags_to_pass): Add AWK and SED.
	* Makefile.tpl (AWK, SED): New.
	(BASE_FLAGS_TO_PASS): Add AWK and SED.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d622 1
a622 1
BUILD_CONFIG =
@


1.208
log
@Sync toplevel with GCC, merge.

/:
	2009-07-31  Christian Bruel  <christian.bruel@@st.com>

	* configure.ac (sh*-*-elf): Don't add target-libgloss to noconfigdirs.
	* configure: Regenerate.

	2009-07-06  Ian Lance Taylor  <iant@@google.com>

	* configure.ac: Add missing comma in AC_ARG_WITH(boot-libs).
	* configure: Rebuild.

	2009-06-26  Steve Ellcey  <sje@@cup.hp.com>

	PR bootstrap/40338
	* configure.ac (comparestring): Create new variable.
	* Makefile.tpl (comparestring): Use to skip some comparisions.
	* configure: Regenerate.
	* Makefile.in: Regenerate.

	2009-06-23  Ian Lance Taylor  <iant@@google.com>

	* configure.ac: Add --enable-build-with-cxx.  When set, add c++ to
	boot_languages.  Only bootstrap target libraries listed in
	target_libs for some boot language.  Add --with-stage1-ldflags,
	--with-stage1-libs, --with-boot-ldflags, --with-boot-libs.  Remove
	with_host_libstdcxx from ppllibs.  Only add -fkeep-inline-functions
	if not building with C++.
	* Makefile.def: For target_module libstdc++-v3, set bootstrap=true.
	* Makefile.tpl (STAGE1_LDFLAGS, STAGE1_LIBS): New variables.
	(POSTSTAGE1_LDFLAGS, POSTSTAGE1_LIBS): New variables.
	(HOST_EXPORTS): Add STAGE1_LDFLAGS to LDFLAGS.  Export HOST_LIBS.
	(POSTSTAGE1_HOST_EXPORTS): Set CXX and CXX_FOR_BUILD.  Add
	POSTSTAGE1_LDFLAGS to LDFLAGS.  Export HOST_LIBS.
	(POSTSTAGE1_FLAGS_TO_PASS): Likewise.
	* configure, Makefile.in: Rebuild.

	2009-06-08  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* configure.ac: Detect MPC in default directory.
	* configure: Regenerate.

	2009-06-02  Richard Sandiford  <r.sandiford@@uk.ibm.com>

	* configure.ac (powerpc-*-aix*, rs6000-*-aix*): Add target-newlib
	to noconfdirs.
	* configure: Regenerate.

	2009-05-29  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* Makefile.def: Add MPC support and dependencies.
	* configure.ac: Likewise.  Reorganize GMP/MPFR checks.

	* Makefile.in, configure: Regenerate.

	2009-05-24  Nicolas Roche  <roche@@adacore.com>

	* Makefile.tpl (compare-target): Skip ./ada/*tools directories.
	* Makefile.in: Regenerate.

	2009-05-21  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* configure.ac (cygwin noconfigdirs):  Remove libgcj.
	* configure:  Regenerate.

	2009-05-07  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* configure.ac ($with_ppl):  Default to no if not supplied.
	($with_cloog):  Likewise.
	configure:  Regenerate.

	2009-04-24  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	PR bootstrap/39739
	* configure.ac (extra_mpfr_configure_flags): Set and AC_SUBST.
	* Makefile.def (module=mpfr): Use extra_mpfr_configure_flags.

	* configure, Makefile.in: Regenerate.

	2009-04-14  Jakub Jelinek  <jakub@@redhat.com>

	* configure.ac: Change copyright header to refer to version
	3 of the GNU General Public License and to point readers at the
	COPYING3 file and the FSF's license web page.
	* Makefile.def: Likewise.
	* Makefile.tpl: Likewise.
	* Makefile.in: Regenerate.

	2009-04-09  Jack Howarth  <howarth@@bromo.med.uc.edu>

	* configure.ac: Restore match for darwin9 or later. Use double
	brackets since regeneration eats one pair.
	* configure: Regenerate.
@
text
@d146 2
d342 2
@


1.207
log
@        * Makefile.tpl (all): Avoid a trailing backslash.
        * Makefile.in: Regenerate.
@
text
@d14 1
a14 1
# the Free Software Foundation; either version 2 of the License, or
d23 2
a24 2
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
d123 13
d201 1
a201 1
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
d216 1
d235 10
a244 2
	GNATBIND="$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind"; export GNATBIND \
	LDFLAGS="$(BOOT_LDFLAGS)"; export LDFLAGS;
d565 5
a569 2
	CC="$${CC}" CC_FOR_BUILD="$${CC_FOR_BUILD}" GNATBIND="$${GNATBIND}" \
	LDFLAGS="$(BOOT_LDFLAGS)" \
d1464 1
a1464 1
	      gcc/cc*-checksum$(objext) | ./libgcc/* | ./gcc/ada/*tools/*) \
@


1.206
log
@* Makefile.tpl ([+compare-target+]): Compare all stage
directories, rather than just gcc.
* Makefile.in: Rebuilt.
@
text
@d631 1
a631 1
	fi
d633 1
@


1.205
log
@* Makefile.tpl (all): Avoid harmless warning in make all when
gcc-bootstrap is enabled but stage_last does not exist.
* Makefile.in: Rebuilt.
@
text
@d1429 3
a1431 3
	cd stage[+id+]-gcc; \
	files=`find . -name "*$(objext)" -print` ; \
	cd .. ; \
d1433 2
a1434 1
	  f1=$$r/stage[+prev+]-gcc/$$file; f2=$$r/stage[+id+]-gcc/$$file; \
d1438 1
a1438 1
	      ./cc*-checksum$(objext) | ./libgcc/* ) \
@


1.204
log
@PR other/40159
* Makefile.tpl (all): Don't assume gcc-bootstrap and
gcc-no-bootstrap are mutually exclusive.
* Makefile.in: Rebuilt.
@
text
@d624 1
a624 1
	  TFLAGS="$(STAGE$(shell sed s,^stage,, stage_last)_TFLAGS)"; \
@


1.203
log
@PR other/40159
* Makefile.tpl (all): Don't end with unconditional success.
* Makefile.in: Rebuilt.
@
text
@d628 3
a630 4
@@if gcc-no-bootstrap
	if :; then :; \
@@endif gcc-no-bootstrap
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-host all-target; \
d632 1
@


1.202
log
@ChangeLog:
PR target/37137
* Makefile.def (flags_to_pass): Remove redundant and incomplete
STAGE1_CFLAGS, STAGE2_CFLAGS, STAGE3_CFLAGS, and STAGE4_CFLAGS.
Add FLAGS_FOR_TARGET and BUILD_CONFIG.
(bootstrap_stage): Remove bootstrap-debug custom stages.  Turn
stage_configureflags, stage_cflags and stage_libcflags into
explicit Makefile macros.
* Makefile.tpl (HOST_EXPORTS, EXTRA_HOST_FLAGS): Pass GCJ and
GFORTRAN.
(POSTSTAGE1_HOST_EXPORTS): Add XGCC_FLAGS_FOR_TARGET and TFLAGS to
CC.  Set CC_FOR_BUILD from CC.
(BASE_TARGET_EXPORTS, RAW_CXX_TARGET_EXPORTS,
NORMAL_TARGET_EXPORTS): Move SYSROOT_CFLAGS_FOR_TARGET and
DEBUG_PREFIX_CFLAGS_FOR_TARGET from CFLAGS and CXXFLAGS to
XGCC_FLAGS_FOR_TARGET.  Add it along with TFLAGS to CC, CXX, GCJ,
and GFORTRAN.
(TFLAGS, STAGE_CFLAGS, STAGE_TFLAGS, STAGE_CONFIGURE_FLAGS): New.
(_LIBCFLAGS): Renamed to _TFLAGS.
(do-compare-debug, do-compare3-debug): Drop.
(CC, GCC_FOR_TARGET, CXX_FOR_TARGET, RAW_CXX_FOR_TARGET,
GCJ_FOR_TARGET, GFORTRAN_FOR_TARGET): Remove FLAGS_FOR_TARGET.
(FLAGS_FOR_TARGET, SYSROOT_CFLAGS_FOR_TARGET,
DEBUG_PREFIX_CFLAGS_FOR_TARGET): Move down.
(XGCC_FLAGS_FOR_TARGET): New.
(BASE_FLAGS_TO_PASS): Pass STAGEid_CFLAGS, STAGEid_TFLAGS and TFLAGS.
(EXTRA_HOST_FLAGS): Pass GCJ and GFORTRAN.
(POSTSTAGE1_FLAGS_TO_PASS): Move SYSROOT_CFLAGS_FOR_TARGET and
DEBUG_PREFIX_CFLAGS_FOR_TARGET from CFLAGS, CXXFLAGS, LIBCFLAGS,
LIBCXXFLAGS to XGCC_FLAGS_FOR_TARGET.    Add it along with TFLAGS
to CC, CXX, GCJ, and GFORTRAN.  Pass XGCC_FLAGS_FOR_TARGET and
TFLAGS.
(BUILD_CONFIG): Include if requested.
(all): Set TFLAGS on bootstrap.
(configure-stageid-prefixmodule): Pass TFLAGS, adjust FLAGS.
(all-stageid-prefixmodule): Likewise.
(do-clean, distclean-stageid): Set TFLAGS.
(restrap): Fix whitespace.
* Makefile.in: Rebuilt.
config/ChangeLog:
* multi.m4: Save CXX, GFORTRAN and GCJ in config.status.
* mt-gnu (CXXFLAGS_FOR_TARGET): Adjust.
* bootstrap-O1.mk: New.
* bootstrap-O3.mk: New.
* bootstrap-debug.mk: New.
@
text
@d623 1
a623 1
	if [ -f stage_last ]; then : ; \
d628 3
d632 1
a632 4
@@if gcc-bootstrap
	fi; \
@@endif gcc-bootstrap
	:
@


1.201
log
@	* Makefile.tpl (POSTSTAGE1_HOST_EXPORTS): Add GNATBIND.
	(POSTSTAGE1_FLAGS_TO_PASS): Pick up exported value for GNATBIND.
	* Makefile.in: Regenerate.
@
text
@d9 2
a10 1
#   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation
d181 2
d218 3
a220 5
	  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/"; export CC; \
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) \
	  $$r/$(HOST_SUBDIR)/prev-gcc/xgcc$(exeext) \
	  -B$$r/$(HOST_SUBDIR)/prev-gcc/ \
	  -B$(build_tooldir)/bin/"; export CC_FOR_BUILD; \
d235 2
a236 2
	CC="$(CC_FOR_TARGET)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)"; export CFLAGS; \
d239 3
a241 3
	CXXFLAGS="$(CXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_TARGET)"; export GCJ; \
	GFORTRAN="$(GFORTRAN_FOR_TARGET)"; export GFORTRAN; \
d257 1
a257 1
	CXX="$(RAW_CXX_FOR_TARGET)"; export CXX;
d261 1
a261 1
	CXX="$(CXX_FOR_TARGET)"; export CXX;
d361 15
d382 1
d385 11
d397 2
a398 9
STAGE1_CFLAGS=@@stage1_cflags@@
STAGE2_CFLAGS=$(BOOT_CFLAGS)
STAGE3_CFLAGS=$(BOOT_CFLAGS)
STAGE4_CFLAGS=$(BOOT_CFLAGS)

STAGE1_LIBCFLAGS=$(CFLAGS_FOR_TARGET)
STAGE2_LIBCFLAGS=$(CFLAGS_FOR_TARGET)
STAGE3_LIBCFLAGS=$(CFLAGS_FOR_TARGET)
STAGE4_LIBCFLAGS=$(CFLAGS_FOR_TARGET)
a401 1
do-compare-debug = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2
a406 2
FLAGS_FOR_TARGET = @@FLAGS_FOR_TARGET@@

d409 1
a409 1
CC_FOR_TARGET=$(STAGE_CC_WRAPPER) @@CC_FOR_TARGET@@ $(FLAGS_FOR_TARGET)
d415 5
a419 5
GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) @@GCC_FOR_TARGET@@ $(FLAGS_FOR_TARGET)
CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @@CXX_FOR_TARGET@@ $(FLAGS_FOR_TARGET)
RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) @@RAW_CXX_FOR_TARGET@@ $(FLAGS_FOR_TARGET)
GCJ_FOR_TARGET=$(STAGE_CC_WRAPPER) @@GCJ_FOR_TARGET@@ $(FLAGS_FOR_TARGET)
GFORTRAN_FOR_TARGET=$(STAGE_CC_WRAPPER) @@GFORTRAN_FOR_TARGET@@ $(FLAGS_FOR_TARGET)
a436 2
SYSROOT_CFLAGS_FOR_TARGET = @@SYSROOT_CFLAGS_FOR_TARGET@@
DEBUG_PREFIX_CFLAGS_FOR_TARGET = @@DEBUG_PREFIX_CFLAGS_FOR_TARGET@@
d442 6
d497 4
a500 1
	"[+flag+]=$([+flag+])"[+ ENDIF optional+][+ ENDFOR flags_to_pass +] \
d515 2
d555 4
a558 4
	'CC=$$(CC_FOR_TARGET)' \
	'CFLAGS=$$(CFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \
	'CXX=$$(CXX_FOR_TARGET)' \
	'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \
d560 2
d564 2
a565 2
	'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \
	'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET) $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)' \
d570 3
a572 1
	'WINDMC=$$(WINDMC_FOR_TARGET)'
d592 7
d622 3
a624 1
	if [ -f stage_last ]; then \
d627 1
d629 4
a632 1
	fi
d913 1
d929 8
a936 5
	[+poststage1_exports+][+ ENDIF prev +] [+ IF prefix +] \
	CFLAGS="[+stage_libcflags+] $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)"; export CFLAGS; \
	CXXFLAGS="[+stage_libcflags+] $(SYSROOT_CFLAGS_FOR_TARGET) $(DEBUG_PREFIX_CFLAGS_FOR_TARGET)"; export CXXFLAGS; [+ ELSE +] \
	CFLAGS="[+stage_cflags+]"; export CFLAGS; \
	CXXFLAGS="[+stage_cflags+]"; export CXXFLAGS; [+ ENDIF +] \
d949 4
a952 3
	  --target=[+target_alias+] $${srcdiroption} \
	  [+ IF prev +]--with-build-libsubdir=$(HOST_SUBDIR)[+ ENDIF prev +] \
	  [+stage_configure_flags+] [+extra_configure_flags+]
d992 1
d996 12
a1007 5
	$(MAKE) $(BASE_FLAGS_TO_PASS) \
		CFLAGS="[+stage_cflags+]" CXXFLAGS="[+stage_cflags+]" \
		LIBCFLAGS="[+stage_libcflags+]" \
		CFLAGS_FOR_TARGET="[+stage_libcflags+]" \
		CXXFLAGS_FOR_TARGET="[+stage_libcflags+]" [+args+] [+
d1010 1
d1468 1
d1479 1
d1502 1
d1540 2
a1541 2
	rm -rf stage1-$(TARGET_SUBDIR) [+ FOR bootstrap-stage +][+ IF prev
	  +]stage[+id+]-* [+ ENDIF prev +][+ ENDFOR bootstrap-stage +]
@


1.200
log
@2009-04-09  Steve Ellcey  <sje@@cup.hp.com>

	* Makefil.def (languages): New entries.
	* Makefile.tpl (check-gcc-*): New generic target.
	* Makefile.in: Regenerate.
@
text
@d220 1
d516 1
a516 2
	CC="$${CC}" CC_FOR_BUILD="$${CC_FOR_BUILD}" \
	GNATBIND="$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind" \
@


1.199
log
@* Makefile.tpl (stage_last): Define $r and $s before using
$(RECURSE_FLAGS_TO_PASS).
* Makefile.in: Regenerate
@
text
@d1219 9
a1227 13
.PHONY: check-gcc-c++
check-gcc-c++:
	@@if [ -f ./gcc/Makefile ] ; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	  $(HOST_EXPORTS) \
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++); \
	else \
	  true; \
	fi

.PHONY: check-c++
check-c++: check-target-libstdc++-v3 check-gcc-c++
@


1.198
log
@	Merge from GCC:

	2007-12-02  Matthias Klose  <doko@@ubuntu.com>

	* config-ml.in: Remove 64bit configure tests.

	2008-05-14  Rafael Espindola  <espindola@@google.com>

	* config-ml.in: don't handle --enable-shared and --enable-static.

	2008-09-02  Sebastian Pop  <sebastian.pop@@amd.com>
	    Tobias Grosser  <grosser@@fim.uni-passau.de>
	    Jan Sjodin  <jan.sjodin@@amd.com>
	    Harsha Jagasia  <harsha.jagasia@@amd.com>
	    Dwarakanath Rajagopal  <dwarak.rajagopal@@amd.com>
	    Konrad Trifunovic  <konrad.trifunovic@@inria.fr>
	    Adrien Eliche  <aeliche@@isty.uvsq.fr>

	Merge from graphite branch.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
	* configure.ac (host_libs): Add ppl and cloog.
	Add checks for PPL and CLooG.
	* Makefile.def (ppl, cloog): Added modules and dependences.
	* Makefile.tpl (PPLLIBS, PPLINC, CLOOGLIBS, CLOOGINC): New.
	(HOST_PPLLIBS, HOST_PPLINC, HOST_CLOOGLIBS, HOST_CLOOGINC): New.

	2008-09-03  Richard Guenther  <rguenther@@suse.de>

	* configure.ac: Always pass -DCLOOG_PPL_BACKEND to the
	cloog test.
	* configure: Re-generate.

	2008-09-03  Sebastian Pop  <sebastian.pop@@amd.com>

	* configure.ac (--with-cloog-polylib): New.
	(--disable-cloog-version-check): New.
	(--disable-ppl-version-check): New.
	* configure: Re-generate.

	2008-09-05  Richard Guenther  <rguenther@@suse.de>

	* configure.ac: Initialize clooglibs to -lcloog.
	* configure: Re-generate.

	2008-10-13  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* configure.ac (MPFR check): Bump minimum version to 2.3.0 and
	recommended version to 2.3.2.

	* configure: Regenerate.

	2008-10-31  Ben Elliston  <bje@@au.ibm.com>

	* configure.ac (spu-*-*): Remove special case.
	* configure: Regenerate.

	Complete comment text from GCC version of:

	2008-08-31  Aaron W. LaFramboise  <aaronavay62@@aaronwl.com>

	* configure.ac (RPATH_ENVVAR): Use PATH on Windows.
	(GCC_SHLIB_SUBDIR): New.
	* Makefile.tpl (HOST_LIB_PATH_gcc): Use GCC_SHLIB_SUBDIR.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d1471 2
@


1.197
log
@	Revert:

	2008-10-24  Daniel Jacobowitz  <dan@@codesourcery.com>

	* Makefile.tpl (HOST_EXPORTS): Correct CPPFLAGS typo.
	* Makefile.in: Regenerated.

	2008-10-22  Daniel Jacobowitz  <dan@@codesourcery.com>

	* Makefile.def (flags_to_pass): Add CPPFLAGS_FOR_BUILD and CPPFLAGS.
	* Makefile.tpl (BUILD_EXPORTS): Set CPPFLAGS.
	(EXTRA_BUILD_FLAGS): Correct typo.  Pass CPPFLAGS.
	(HOST_EXPORTS): Pass CPPFLAGS.
	(CPPFLAGS_FOR_BUILD, CPPFLAGS, CPPFLAGS_FOR_TARGET): Define.
	(LDFLAGS_FOR_TARGET): Initialize from configure script.
	(EXTRA_TARGET_FLAGS): Set CPPFLAGS.
	* Makefile.in, configure: Regenerated.
	* configure.ac: Set CPPFLAGS_FOR_TARGET, LDFLAGS_FOR_TARGET,
	and CPPFLAGS_FOR_BUILD.
@
text
@d202 4
d265 8
@


1.196
log
@	* Makefile.tpl (HOST_EXPORTS): Correct CPPFLAGS typo.
	* Makefile.in: Regenerated.
@
text
@a142 1
	CPPFLAGS="$(CPPFLAGS_FOR_BUILD)"; export CPPFLAGS; \
d156 1
a156 1
# built for the build system to override those in BASE_FLAGS_TO_PASS.
a158 1
	CPPFLAGS="$(CPPFLAGS_FOR_BUILD)" \
a177 1
	CPPFLAGS="$(CPPFLAGS)"; export CPPFLAGS; \
a280 1
CPPFLAGS_FOR_BUILD = @@CPPFLAGS_FOR_BUILD@@
a341 1
CPPFLAGS = @@CPPFLAGS@@
a404 1
CPPFLAGS_FOR_TARGET = @@CPPFLAGS_FOR_TARGET@@
d411 1
a411 1
LDFLAGS_FOR_TARGET = @@LDFLAGS_FOR_TARGET@@
a517 1
	'CPPFLAGS=$$(CPPFLAGS_FOR_TARGET)' \
@


1.195
log
@	PR gdb/921
	PR gdb/1646
	PR gdb/2175
	PR gdb/2176

	* Makefile.def (flags_to_pass): Add CPPFLAGS_FOR_BUILD and CPPFLAGS.
	* Makefile.tpl (BUILD_EXPORTS): Set CPPFLAGS.
	(EXTRA_BUILD_FLAGS): Correct typo.  Pass CPPFLAGS.
	(HOST_EXPORTS): Pass CPPFLAGS.
	(CPPFLAGS_FOR_BUILD, CPPFLAGS, CPPFLAGS_FOR_TARGET): Define.
	(LDFLAGS_FOR_TARGET): Initialize from configure script.
	(EXTRA_TARGET_FLAGS): Set CPPFLAGS.
	* Makefile.in, configure: Regenerated.
	* configure.ac: Set CPPFLAGS_FOR_TARGET, LDFLAGS_FOR_TARGET,
	and CPPFLAGS_FOR_BUILD.

	libiberty/
	* Makefile.in (CPPFLAGS): Define.
	(FLAGS_TO_PASS, COMPILE.c): Add CPPFLAGS.
@
text
@d180 1
a180 1
	CPPFLAGS="$(CFLAGS)"; export CPPFLAGS; \
@


1.194
log
@2008-08-31  Aaron W. LaFramboise  <aaronavay62@@aaronwl.com>

	* configure.ac (RPATH_ENVVAR): Use PATH on Windows.
	(GCC_SHLIB_SUBDIR): New.
	* Makefile.tpl (HOST_LIB_PATH_gcc): Use GCC_SHLIB_SUBDIR.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d143 1
d157 1
a157 1
# built for the build system to override those in BASE_FLAGS_TO_PASSS.
d160 1
d180 1
d284 1
d346 1
d410 1
d417 1
a417 1
LDFLAGS_FOR_TARGET = 
d524 1
@


1.193
log
@Merge from gcc:
2008-08-16  Nicolas Roche  <roche@@adacore.com>
* Makefile.tpl: Add BOOT_ADAFLAGS.
* Makefile.in: Regenerate.
@
text
@d111 5
d448 1
a448 1
HOST_LIB_PATH_gcc = $$r/$(HOST_SUBDIR)/gcc:$$r/$(HOST_SUBDIR)/prev-gcc:
@


1.192
log
@2008-07-30 Paolo Bonzini  <bonzini@@gnu.org>

	Sync with gcc:
	2008-07-30 Paolo Bonzini  <bonzini@@gnu.org>

        * configure.ac: Add makefile fragments for hpux.
        * Makefile.def (flags_to_pass): Add ADA_CFLAGS.
        * Makefile.tpl (HOST_EXPORTS): Pass ADA_CFLAGS.
        * configure: Regenerate.
        * Makefile.in: Regenerate.

	2008-06-17  Ralf Wildenhues  <Ralf.Wildenhues@@gmx.de>

        * Makefile.tpl ($(srcdir)/configure): Update dependencies.
        * Makefile.in: Regenerate.
        * configure: Regenerate.

config:
2008-07-30  Paolo Bonzini  <bonzini@@gnu.org>

	* mh-pa: New, from gcc/config/pa/x-ada.
	* mh-pa-hpux10: New, from gcc/config/pa/x-ada-hpux10.

2008-06-11  Bernhard Fischer  <aldot@@gcc.gnu.org>

        * tls.m4: Fix typos.
@
text
@d297 1
@


1.191
log
@	* Makefile.tpl: Fix comment errors.
	* Makefile.in: Regenerate.
@
text
@d170 1
d1654 2
a1655 1
$(srcdir)/configure: @@MAINT@@ $(srcdir)/configure.ac $(srcdir)/config/acx.m4
@


1.190
log
@	* Makefile.def (flags_to_pass): Add LDFLAGS_FOR_BUILD.
	* Makefile.tpl (EXTRA_BUILD_FLAGS): Define.
	(all prefix="build-"): Pass them to build-system sub-makes.
	* Makefile.in: Regenerate.

config:
	* config/mh-mingw (LDFLAGS): Define.
@
text
@d1321 1
a1321 1
# reconfigured as well.
d1495 1
a1495 1
   ;; where "maybe-" is only included if HARD is true, and all-gcc
@


1.189
log
@2008-04-18  Paolo Bonzini  <bonzini@@gnu.org>

	Sync with gcc:
	2008-04-18  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/35457
	* configure.ac: Include override.m4.
	* configure: Regenerate.

	2008-04-18  Paolo Bonzini  <bonzini@@gnu.org>

        * Makefile.tpl (restrap): Call `make all' using double-colon rules.
        * Makefile.in: Regenerate.

	2008-04-11  Eric B. Weddington  <eweddington@@cso.atmel.com>

        * configure.ac: Do not build libssp for the AVR.
        * configure: Regenerate.

config:
2008-04-18  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/35457

	* override.m4: Add this.  Make sure aclocal always picks it.
	Add more lenient precious variable check, backported from
	autoconf trunk.
@
text
@d150 6
d964 2
a965 1
[+ all prefix="build-" subdir="$(BUILD_SUBDIR)" exports="$(BUILD_EXPORTS)" +]
@


1.188
log
@	* Makefile.tpl <gcc>: Error early unless at least GNU make 3.80.
	* Makefile.in: Regenerate.
@
text
@d1453 1
a1453 1
restrap:
d1457 1
a1457 1
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all
@


1.187
log
@2008-03-27  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (PICFLAG, PICFLAG_FOR_TARGET): Remove.
	* Makefile.in: Regenerate.

config:
2008-03-27  Paolo Bonzini  <bonzini@@gnu.org>

	* extensions.m4: New.

2008-03-27  Paolo Bonzini  <bonzini@@gnu.org>

	* mh-armpic: Remove.
	* mh-i370pic: Remove.
	* mh-m68kpic: Remove.
	* mh-ppcpic: Remove.
	* mh-sparcpic: Remove.
	* mh-ia64pic: Remove.
	* mh-papic: Remove.
	* mh-s390pic: Remove.
	* mh-x86pic: Remove.

libiberty:
2008-03-27  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.ac (frags): Don't set, use frag instead.
	(PICFLAG): Set here and substitute.
	* Makefile.in (PICFLAG): Substitute from autoconf.
	* configure: Regenerate.
@
text
@d26 8
@


1.186
log
@2008-02-20  Paolo Bonzini  <bonzini@@gnu.org>

        PR bootstrap/32009
        PR bootstrap/32161

        * configure.ac (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Compute here.
        * configure: Regenerate.

        * Makefile.def: Define stage_libcflags for all bootstrap stages.
        * Makefile.tpl (BOOT_LIBCFLAGS, STAGE2_LIBCFLAGS, STAGE3_LIBCFLAGS,
        STAGE4_LIBCFLAGS): New.
        (CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Subst from autoconf, without
        $(SYSROOT_CFLAGS_FOR_TARGET) and $(DEBUG_PREFIX_CFLAGS_FOR_TARGET).
        (BASE_TARGET_EXPORTS): Append them here to C{,XX}FLAGS.
        (EXTRA_TARGET_FLAGS): Append them here to {LIB,}C{,XX}FLAGS.
        (configure-stage[+id+]-[+prefix+][+module+]): Pass stage_libcflags
        for target modules.  Don't export LIBCFLAGS.
        (all-stage[+id+]-[+prefix+][+module+]): Pass stage_libcflags; pass
        $(BASE_FLAGS_TO_PASS) where [+args+] was passed, and [+args+] after
        the overridden CFLAGS_FOR_TARGET and CXXFLAGS_FOR_TARGET.
        (invocations of `all'): Replace $(TARGET_FLAGS_TO_PASS) with
        $(EXTRA_TARGET_FLAGS), $(FLAGS_TO_PASS) with $(EXTRA_HOST_FLAGS).
        * Makefile.in: Regenerate.

config:
2008-02-20  Paolo Bonzini  <bonzini@@gnu.org>

        PR bootstrap/32009
        * mh-ppc-darwin (BOOT_CFLAGS): Reenable.
@
text
@a324 1
PICFLAG = 
a390 1
PICFLAG_FOR_TARGET = 
@


1.185
log
@/tmp/foo.diff
@
text
@d210 1
a210 1
	CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
d213 1
a213 1
	CXXFLAGS="$(CXXFLAGS_FOR_TARGET)"; export CXXFLAGS; \
a332 1
STAGE1_CFLAGS=@@stage1_cflags@@
d336 1
d341 5
d384 2
a385 8
# During gcc bootstrap, if we use some random cc for stage1 then CFLAGS
# might be empty or "-g".  We don't require a C++ compiler, so CXXFLAGS
# might also be empty (or "-g", if a non-GCC C++ compiler is in the path).
# We want to ensure that TARGET libraries (which we know are built with
# gcc) are built with "-O2 -g", so prepend those options when setting
# CFLAGS_FOR_TARGET and CXXFLAGS_FOR_TARGET.
CFLAGS_FOR_TARGET = -O2 -g $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \
	$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)
d388 1
a388 2
CXXFLAGS_FOR_TARGET = -O2 -g $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \
	$(DEBUG_PREFIX_CFLAGS_FOR_TARGET)
d492 2
a493 1
# COMPILER_ prefixed variables are not passed down so we expand them here.
d498 1
a498 1
	'CFLAGS=$$(CFLAGS_FOR_TARGET)' \
d500 1
a500 1
	'CXXFLAGS=$$(CXXFLAGS_FOR_TARGET)' \
d504 2
a505 2
	'LIBCFLAGS=$$(LIBCFLAGS_FOR_TARGET)' \
	'LIBCXXFLAGS=$$(LIBCXXFLAGS_FOR_TARGET)' \
d853 3
a855 1
	[+poststage1_exports+][+ ENDIF prev +] \
d857 1
a857 1
	LIBCFLAGS="[+stage_cflags+]"; export LIBCFLAGS; \
d894 2
a895 1
	  $(MAKE) [+args+] [+extra_make_flags+] $(TARGET-[+prefix+][+module+]))
d915 5
a919 2
	$(MAKE) [+args+] \
		CFLAGS="[+stage_cflags+]" LIBCFLAGS="[+stage_cflags+]" [+
d969 1
a969 1
       args="$(FLAGS_TO_PASS)"
d1067 1
a1067 1
       args="$(TARGET_FLAGS_TO_PASS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'" +]
d1078 1
a1078 1
       args="$(TARGET_FLAGS_TO_PASS)" +]
@


1.184
log
@2007-10-01  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (AR_FOR_BUILD, AS_FOR_BUILD, CXX_FOR_BUILD,
	DLLTOOL_FOR_BUILD, GCJ_FOR_BUILD, GFORTRAN_FOR_BUILD,
	LDFLAGS_FOR_BUILD, LD_FOR_BUILD, NM_FOR_BUILD, RANLIB_FOR_BUILD,
	WINDMC_FOR_BUILD, WINDRES_FOR_BUILD): Use autoconf substitutions.
	* configure.ac: Default them to host tools for $host = $build.
	Subst them.

	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d379 7
a385 5
# During gcc bootstrap, if we use some random cc for stage1 then
# CFLAGS will be just -g.  We want to ensure that TARGET libraries
# (which we know are built with gcc) are built with optimizations so
# prepend -O2 when setting CFLAGS_FOR_TARGET.
CFLAGS_FOR_TARGET = -O2 $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \
d389 1
a389 1
CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET) \
@


1.183
log
@2007-08-18  Paul Brook  <paul@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* Makefile.tpl (DEBUG_PREFIX_CFLAGS_FOR_TARGET): New.
	(CFLAGS_FOR_TARGET, CXXFLAGS_FOR_TARGET): Include it.
	* Makefile.in: Regenerate.
	* configure.ac (--with-debug-prefix-map): New.
	* configure: Regenerate.

config:
2007-08-18  Paul Brook  <paul@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* mt-gnu (CXXFLAGS_FOR_TARGET): Add
	$(DEBUG_PREFIX_CFLAGS_FOR_TARGET).
@
text
@d257 2
d261 11
a271 2

CXX_FOR_BUILD = $(CXX)
@


1.182
log
@* Makefile.def (STAGE2_CFLAGS, STAGE3_CFLAGS, STAGE4_CFLAGS):
Add to flags_to_pass.  Adjust uses of BOOT_CFLAGS.
(bootstrap2-debug, bootstrap-debug): New bootstrap stages.
* Makefile.tpl (STAGE2_CFLAGS, STAGE3_CFLAGS, STAGE4_CFLAGS): New.
(do-compare, do-compare3, do-compare-debug): New.
([+compare-target+]): Use them.
@
text
@d372 2
a373 1
CFLAGS_FOR_TARGET = -O2 $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)
d375 3
a377 1
CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)
@


1.181
log
@Import patch from FSF gcc sources to add support for building windmc tool.
@
text
@d9 1
a9 1
#   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation
d326 8
d1327 1
a1327 1
	  @@do_compare@@ > /dev/null 2>&1; \
@


1.180
log
@2007-06-14  Paolo Bonzini  <bonzini@@gnu.org>

        * Makefile.tpl (cleanstrap): Don't delete the toplevel Makefile.
        (distclean-stage[+id+]): Possibly delete stage_last.
        * Makefile.in: Regenerate.
@
text
@d139 2
a140 1
	WINDRES="$(WINDRES_FOR_BUILD)"; export WINDRES;
d169 1
d225 1
d304 1
d354 1
d442 2
a443 1
	'WINDRES=$(WINDRES)'
d486 2
a487 1
	'WINDRES=$$(WINDRES_FOR_TARGET)'
d1015 1
a1015 1
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
d1131 1
a1131 1
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
@


1.179
log
@	* Makefile.tpl: Fix spelling error.
	* Makefile.in: Regenerate.
@
text
@d1364 1
d1370 9
a1378 1
[+cleanstrap-target+]: distclean [+bootstrap-target+]
@


1.178
log
@2007-05-16  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (bootstrap_stage): Replace stage_make_flags with
	stage_cflags.
	* Makefile.tpl (POSTSTAGE1_HOST_EXPORTS, POSTSTAGE1_FLAGS_TO_PASS):
	Remove CFLAGS/LIBCFLAGS.
	(configure-stage[+id+]-[+prefix+][+module+],
	all-stage[+id+]-[+prefix+][+module+]): Pass it from [+stage_cflags+].
	* Makefile.in: Regenerate.
@
text
@d1270 1
a1270 1
# Bubble a bugfix through all the stages up to stage [+id+].  They are
@


1.177
log
@Merge from gcc:

+2007-03-01  Brooks Moses  <brooks.moses@@codesourcery.com>
+
+	* configure.ac: Add "--with-pdfdir" configure option,
+	which defines pdfdir variable.
+	* Makefile.def (target=fixincludes): Add install-pdf to
+	missing targets.
+	(recursive_targets): Add install-pdf target.
+	(flags_to_pass): Add pdfdir.
+	* Makefile.tpl: Add pdfdir handling, add do-install-pdf
+	target.
+	* configure: Regenerate
+	* Makefile.in: Regenerate
+
+2007-02-28  Eric Christopher  <echristo@@apple.com>
+
+	Revert:
+	2006-12-07  Mike Stump  <mrs@@apple.com>
+
+	* Makefile.def (dependencies): Add dependency for
+	install-target-libssp and install-target-libgomp on
+	install-gcc.
+	* Makefile.in: Regenerate.
+
+2007-02-27  Matt Kraai  <kraai@@ftbfs.org>
+
+	* configure: Regenerate.
+	* configure.ac: Move statements after variable declarations.
+
@
text
@a193 1
	CFLAGS="$(BOOT_CFLAGS)"; export CFLAGS; \
a457 2
	CFLAGS="$(BOOT_CFLAGS)" \
	LIBCFLAGS="$(BOOT_CFLAGS)" \
d824 2
d882 4
a885 3
	$(MAKE) [+args+] [+ IF prev
		+][+poststage1_args+][+ ENDIF prev
		+] [+stage_make_flags+] [+extra_make_flags+] \
d900 1
a900 1
		[+stage_make_flags+] [+extra_make_flags+] clean
@


1.176
log
@2007-02-09  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def: Sync with GCC.
	* Makefile.tpl: Sync with GCC.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

	* config/acx.m4: Sync with GCC.
	* config/depstand.m4: Sync with GCC.
	* config/tls.m4: Sync with GCC.
@
text
@d64 1
d574 2
a575 1
.PHONY: info installcheck dvi pdf html install-info install-html
d594 2
@


1.175
log
@	* Makefile.tpl (build_alias, host_alias, target_alias): Use
	noncanonical equivalents.
	* configure.in: Rename to...
	* configure.ac: ...this.  Update AC_PREREQ.  Prevent error for
	AS_FOR_TARGET.  Set build_noncanonical, host_noncanonical, and
	target_noncanonical.  Use them.  Rewrite removal of configure
	arguments for autoconf 2.59.  Discard variable settings.  Force
	program_transform_name for native tools.

	* Makefile.in: Regenerated.
	* configure: Regenerated with autoconf 2.59.

	* src-release (DEVO_SUPPORT, do-proto-toplev): Expect configure.ac.

	* acx.m4 (ACX_CHECK_INSTALLED_TARGET_TOOL): Avoid AC_PATH_PROG
	with an empty path.
@
text
@d302 3
d457 1
a457 1
	STAGE_PREFIX="$$r/$(HOST_SUBDIR)/prev-gcc/" \
@


1.174
log
@	* Makefile.tpl (LDFLAGS): Substitute it.
	* Makefile.in: Regenerate.
@
text
@d31 1
a31 1
build_alias=@@build_alias@@
d35 1
a35 1
host_alias=@@host_alias@@
d39 1
a39 1
target_alias=@@target_alias@@
d1588 1
a1588 1
$(srcdir)/configure: @@MAINT@@ $(srcdir)/configure.in $(srcdir)/config/acx.m4
@


1.173
log
@2007-01-11  Paolo Bonzini  <bonzini@@gnu.org>
            Nick Clifton  <nickc@@redhat.com>
            Kaveh R. Ghazi  <ghazi@@caip.rutgets.edu>

        * configure.in (build_configargs, host_configargs, target_configargs):
        Remove build/host/target parameters.
        (host_libs): Add gmp and mpfr.
        (GMP tests): Reorganize to allow in-tree GMP/MPFR.
        * Makefile.def (gmp, mpfr): New.
        (gcc): Remove target.
        * Makefile.tpl (build_os, build_vendor, host_os, host_vendor,
        target_os, target_vendor): New.
        (configure): Add host_alias/target_alias arguments.  Adjust invocations.
        * configure: Regenerate.
        * Makefile.in: Regenerate.

2007-01-11  Matt Fago  <fago@@earthlink.net>

	* configure.in: Try to link to functions only in mpfr 2.2.x
        to improve robustness of configure tests.
	* configure: Regenerate.
@
text
@d303 1
a303 1
LDFLAGS = 
@


1.172
log
@* Makefile.tpl (all-target): Correct @@if conditional for target modules.
* configure.in: Omit libiberty if building only target libgcc.
* configure, Makefile.in: Regenerated.
@
text
@d32 2
d36 2
d40 2
d788 2
a789 1
	  [+args+] $${srcdiroption} [+extra_configure_flags+] \
d831 2
a832 1
	  [+args+] $${srcdiroption} \
d848 1
a848 1
  IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
d905 2
d919 2
d1018 2
d1029 2
@


1.171
log
@Sync with gcc:
	* Makefile.def (target_modules): Add libgcc.
	(lang_env_dependencies): Remove default items.  Use no_c and no_gcc.
	* Makefile.tpl (clean-target-libgcc): Delete.
	(configure-target-[+module+]): Emit --disable-bootstrap dependencies
	on gcc even for bootstrapped modules.  Rewrite handling of
	lang_env_dependencies to loop over target_modules.
	* configure.in (target_libraries): Add target-libgcc.
	* Makefile.in, configure: Regenerated.
@
text
@d534 1
a534 1
@@if [+module+]-no-bootstrap[+ ENDIF bootstrap +]
d536 2
a537 1
@@endif [+module+]-no-bootstrap[+ ENDIF bootstrap +][+ ENDFOR target_modules +]
@


1.170
log
@2006-12-29  Paolo Bonzini  <bonzini@@gnu.org>

	Sync with gcc:
	2006-12-29  Paolo Bonzini  <bonzini@@gnu.org>

        * configure.in: Reorganize recognition of languages.  Add
        --enable-stage1-languages.  Show supported languages for the chosen
        target rather than all recognized languages.
        * configure: Regenerate.

	2006-12-29  Paolo Bonzini  <bonzini@@gnu.org>

        * Makefile.tpl (GCC_STRAP_TARGETS, all-prebootstrap): Remove.
        * Makefile.in: Regenerate.

	2006-12-29  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

        * configure.in: Warn that MPFR 2.2.0 is buggy.
        * configure: Regenerate.

config:
2006-12-29  Paolo Bonzini  <bonzini@@gnu.org>

	* acx.m4: Sync with gcc.
@
text
@a613 5
# Extra dependency for clean-target, owing to the mixed nature of gcc.
clean-target: clean-target-libgcc
clean-target-libgcc:
	if test -f gcc/Makefile; then cd gcc && $(MAKE) $@@; else :; fi

d1398 1
a1398 2
@@if gcc-no-bootstrap[+ FOR target_modules +][+ IF bootstrap
  +][+ ELSE +]
d1400 1
a1400 1
  ENDIF bootstrap +][+ ENDFOR target_modules +]
a1403 5
[+ FOR lang_env_dependencies +]
configure-target-[+module+]: maybe-all-target-newlib maybe-all-target-libgloss
[+ IF cxx +]configure-target-[+module+]: maybe-all-target-libstdc++-v3
[+ ENDIF cxx +][+ ENDFOR lang_env_dependencies +]

d1499 42
@


1.169
log
@2006-12-19  Paolo Bonzini  <bonzini@@gnu.org>

	Sync with gcc:

	2006-12-19  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.in: Remove "$build" case for powerpc-*-darwin* since
	it only affects bootstrap and could be tested on "$host" as well.
	* configure: Regenerate.
	* config/mh-ppc-darwin: Add to the stage1 cflags here.

	2006-12-19  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/29544
	* Makefile.def (flags_to_pass): Add STAGE1_CHECKING.
	(bootstrap_stage): Add STAGE1_CHECKING to stage1 configure flags,
	move here comment from Makefile.tpl.
	* Makefile.tpl: Move some definitions higher in the file.
	(STAGE1_CHECKING): New.
	* configure.in: Add --enable-stage1-checking.
	* configure: Regenerate.
	* Makefile.in: Regenerate.

	2006-12-03  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* configure.in: Update error message for missing GMP/MPFR.

	* configure: Regenerate.

	2006-12-02  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* configure.in: Update MPFR version in error message.

	* configure: Regenerate.

	2006-11-26  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>

	* configure.in (--with-mpfr-dir, --with-gmp-dir): Remove flags.
	(--with-mpfr-include, --with-mpfr-lib, --with-gmp-include,
	--with-gmp-lib): New flags.

	* configure: Regenerate.

config:
2006-12-04  Eric Botcazou  <ebotcazou@@libertysurf.fr>

	* tls.m4 (GCC_CHECK_TLS): Do not test TLS with static linking
	if static linking doesn't even work.
@
text
@a1117 54
# GCC has some more recursive targets, which trigger the old
# (but still current, until the toplevel bootstrap project
# is finished) compiler bootstrapping rules.

GCC_STRAP_TARGETS = bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap
.PHONY: $(GCC_STRAP_TARGETS)
$(GCC_STRAP_TARGETS): all-prebootstrap configure-gcc
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo "Bootstrapping the compiler"; \
	$(RPATH_ENVVAR)=`echo "$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,:[ :]*,:,g;s,^[ :]*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \
	cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $@@
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	case "$@@" in \
	  *bootstrap4-lean ) \
	    msg="Comparing stage3 and stage4 of the compiler"; \
	    compare=compare3-lean ;; \
	  *bootstrap4 ) \
	    msg="Comparing stage3 and stage4 of the compiler"; \
	    compare=compare3 ;; \
	  *-lean ) \
	    msg="Comparing stage2 and stage3 of the compiler"; \
	    compare=compare-lean ;; \
	  * ) \
	    msg="Comparing stage2 and stage3 of the compiler"; \
	    compare=compare ;; \
	esac; \
	$(HOST_EXPORTS) \
	echo "$$msg"; \
	cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) $$compare
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	echo "Building runtime libraries"; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all

profiledbootstrap: all-prebootstrap configure-gcc
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	$(RPATH_ENVVAR)=`echo "$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,:[ :]*,:,g;s,^[ :]*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \
	echo "Bootstrapping training compiler"; \
	cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stageprofile_build
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo "Building feedback based compiler"; \
	cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stagefeedback_build
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	echo "Building runtime libraries"; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all

a1502 1
all-prebootstrap: [+ (dep-target "" "on" (exist? "hard")) +]
a1509 11
# Non-toplevel bootstrap rules must depend on several packages, to be built
# before gcc.  Another wart that will go away, hopefully soon.
@@if gcc-no-bootstrap
[+ FOR host_modules +][+
   IF (and (not (= (get "module") "gcc"))
	   (hash-ref boot-modules (get "module"))) +]
all-prebootstrap: maybe-all-[+module+][+
   ENDIF +][+
ENDFOR host_modules +]
@@endif gcc-no-bootstrap

@


1.168
log
@	* configure.in:  Handle spu makefile frag.
	* config/mt-spu: New file.
	* Makefile.tpl (MAINT): Define
	(MAINTAINER_MODE_FALSE, MAINTAINER_MODE_TRUE): Define.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d303 10
d444 10
a1268 9
# Only build the C compiler for stage1, because that is the only one that
# we can guarantee will build with the native compiler, and also it is the
# only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),
# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them
# overrideable (for a bootstrap build stage1 also builds gcc.info).

STAGE1_CFLAGS=@@stage1_cflags@@
STAGE1_LANGUAGES=@@stage1_languages@@

a1271 18
# Flags to pass to stage2 and later makes.
POSTSTAGE1_FLAGS_TO_PASS = \
	CC="$${CC}" CC_FOR_BUILD="$${CC_FOR_BUILD}" \
	STAGE_PREFIX="$$r/$(HOST_SUBDIR)/prev-gcc/" \
	CFLAGS="$(BOOT_CFLAGS)" \
	LIBCFLAGS="$(BOOT_CFLAGS)" \
	LDFLAGS="$(BOOT_LDFLAGS)" \
	"`echo 'ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`"

# For stage 1:
# * We force-disable intermodule optimizations, even if
#   --enable-intermodule was passed, since the installed compiler probably
#   can't handle them.  Luckily, autoconf always respects
#   the last argument when conflicting --enable arguments are passed.
# * Likewise, we force-disable coverage flags, since the installed compiler
#   probably has never heard of them.
# * We build only C (and possibly Ada).

@


1.167
log
@2006-11-16  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (clean-target-libgcc): Test for gcc Makefile presence.
	(unstage): Test for stage_last presence.

	PR bootstrap/29802
	* Makefile.tpl (POSTSTAGE1_FLAGS_TO_PASS): Add HOST_SUBDIR in STAGE_PREFIX.
	* Makefile.in: Regenerate.
@
text
@d76 3
@


1.166
log
@* Makefile.tpl (clean-stage*): Sync with GCC (clean).
* Makefile.in: Sync with GCC.
* configure.in: Sync with GCC (mpfr, gmp).
* configure: Sync with GCC.
@
text
@d594 1
a594 1
	test ! -d gcc || (cd gcc && $(MAKE) $@@)
d1218 1
a1218 1
unstage = [ -f stage_current ] || $(MAKE) `cat stage_last`-start
d1261 1
a1261 1
	STAGE_PREFIX=$$r/prev-gcc/ \
@


1.165
log
@2006-10-17  Brooks Moses  <bmoses@@stanford.edu>
* Makefile.def: Added pdf target handling.
* Makefile.tpl: Added pdf target handling.
* Makefile.in: Regenerated.
@
text
@d857 6
a862 3
	@@[ -f [+subdir+]/[+module+]/Makefile ] || [ -f [+subdir+]/stage[+id+]-[+module+]/Makefile ] \
	  || exit 0 ; \
	[ $(current_stage) = stage[+id+] ] || $(MAKE) stage[+id+]-start; \
@


1.164
log
@2006-07-19  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (configure-stageN-MODULE): Pass --with-build-libsubdir
	for stages after the first.
	* Makefile.in: Regenerate.

config:
2006-07-19  Paolo Bonzini  <bonzini@@gnu.org>

	* acx.m4: Support --with-build-libsubdir and AC_SUBST
	build_libsubdir.
@
text
@d540 1
a540 1
.PHONY: info installcheck dvi html install-info install-html
d546 1
d940 1
a940 1
# Other targets (info, dvi, etc.)
d1048 1
a1048 1
# Other targets (info, dvi, etc.)
@


1.163
log
@2006-06-15  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (POSTSTAGE1_HOST_EXPORTS): Export CFLAGS and LDFLAGS
	too.
	* Makefile.in: Regenerate.
@
text
@d805 1
@


1.162
log
@
2006-06-07  Carlos O'Donell  <carlos@@codesourcery.com>

	Sync from gcc:

	2006-06-06  David Ayers  <d.ayers@@inode.at>

	PR libobjc/13946
	* Makefile.def: Add dependencies for libobjc which boehm-gc.
	* Makefile.in: Regenerate.
	* configure.in: Add --enable-objc-gc at toplevel and have it
	enable boehm-gc for Objective-C.
	Remove target-boehm-gc from libgcj.
	Add target-boehm-gc to target_libraries.
	Add target-boehm-gc to noconfigdirs where ${libgcj}
	is specified.
	Assert that boehm-gc is supported when requested for Objective-C.
	Only build boehm-gc if needed either for Java or Objective-C.
	* configure: Regenerate.

	2006-06-05  Paolo Bonzini  <bonzini@@gnu.org>

	PR 27674
	* Makefile.tpl (configure-[+prefix+][+module+],
	all-[+prefix+][+module+]): Depend on stage_current if bootstrapping.
	Remove rule to unstage bootstrapped modules.
	(stage_current): New.
	* Makefile.in: Regenerate.

	2006-05-20  John David Anglin  <dave.anglin@@nrc-cnrc.gc.ca>
	Andreas Tobler  <a.tobler@@schweiz.ch>

	* configure.in:  Enable libgcj for hppa*-hp-hpux11*.
	* configure: Rebuilt.

	Revert
	2006-01-31  Richard Guenther  <rguenther@@suse.de>
	Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (target_modules): Add libgcc-math target module.
	* configure.in (target_libraries): Add libgcc-math target library.
	(--enable-libgcc-math): New configure switch.
	* Makefile.in: Re-generate.
	* configure: Re-generate.
@
text
@d183 3
a185 1
	  -B$(build_tooldir)/bin/"; export CC_FOR_BUILD;
@


1.161
log
@2006-05-25  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (bfd, opcodes): Fix lib_path.
	* Makefile.tpl (POSTSTAGE1_FLAGS_TO_PASS): Replace ADAC with ADAFLAGS.
	(restrap): Move under "@@if gcc-bootstrap".  Fix typo.
	* Makefile.in: Regenerate.
@
text
@d723 3
d728 1
a728 6
configure-[+prefix+][+module+]: [+ IF bootstrap +]
@@endif [+prefix+][+module+]
@@if [+prefix+][+module+]-bootstrap
	@@if test -f stage_last; then $(unstage); else $(MAKE) stage1-start; fi
@@endif [+prefix+][+module+]-bootstrap
@@if [+prefix+][+module+][+ ELSE bootstrap +]
d812 3
d819 1
a819 6
all-[+prefix+][+module+]: configure-[+prefix+][+module+][+ IF bootstrap +]
@@endif [+prefix+][+module+]
@@if [+prefix+][+module+]-bootstrap
	@@if test -f stage_last; then $(unstage); else $(MAKE) stage1-start; fi
@@endif [+prefix+][+module+]-bootstrap
@@if [+prefix+][+module+][+ ELSE bootstrap +]
d1428 5
@


1.160
log
@
2006-04-06  Carlos O'Donell <carlos@@codesourcery.com>

	* Makefile.tpl: Add install-html target.
	* Makefile.def: Add install-html target.
	* Makefile.in: Regenerate.
	* configure.in: Add --with-datarootdir, --with-docdir,
	and --with-htmldir options.
	* configure: Regenerate.

bfd/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Rename docdir to bfddocdir. Add datarootdir, docdir
	htmldir. Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST for datarootdir, docdir and htmldir.
	* configure: Regenerate.

bfd/doc/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html and install-html-am targets.
	Define datarootdir, docdir and htmldir.
	* Makefile.in: Regenerate.

binutils/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir and htmldir.
	* configure: Regenerate.
	* doc/Makefile.am: Add install-html and install-html-am targets.
	* doc/Makefile.in: Regenerate.

etc/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.in: Add install-html target. Add htmldir,
	docdir and datarootdir.
	* configure.texi: Document install-html target.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.

gas/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.
	* doc/Makefile.am: Add install-html and install-html-am targets.
	* doc/Makefile.in: Regenerate.

gprof/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html, install-html-am and
	install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.

intl/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* intl/Makefile.in: Add html info and dvi and install-html to .PHONY
	Add install-html target.

ld/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html, install-html-am, and
	install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.
	* po/Make-in: Add install-html target.

opcodes/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html target.
	* Makefile.in: Regenerate.
@
text
@d1262 1
a1262 1
	ADAC="\$$(CC)"
a1430 1
@@endif gcc-bootstrap
d1436 1
a1436 1
	  +]stage[+id+] [+ ENDIF prev +][+ ENDFOR bootstrap-stage +]
d1438 1
@


1.159
log
@2006-03-14  Paolo Bonzini  <bonzini@@gnu.org>

	Sync with gcc:
	2006-03-10  Aldy Hernandez  <aldyh@@redhat.com>

        * configure.in: Handle --disable-<component> generically.
        * configure: Regenerate.

	2006-02-21 Rafael Avila de Espindola <rafael.espindola@@gmail.com>

        * Makefile.tpl  (BUILD_CONFIGDIRS): Remove.
        (TARGET_CONFIGDIRS): Remove.
        * configure.in: Remove AC_SUBST(target_configdirs).
        * Makefile.in, configure: Regenerated.
@
text
@d56 3
d538 1
a538 1
.PHONY: info installcheck dvi html install-info
d556 2
@


1.159.2.1
log
@
2006-04-03  Carlos O'Donell <carlos@@codesourcery.com>

	* Makefile.tpl: Add install-html target.
	* Makefile.def: Add install-html target.
	* Makefile.in: Regenerate.
	* configure.in: Add --with-datarootdir, --with-docdir,
	and --with-htmldir options.
	* configure: Regenerate.
	* opcodes/Makefile.am: Add install-html target.
	* opcodes/Makefile.in: Regenerate.
	* libiberty/Makefile.in: Add install-html, install-html-am, and
	install-html-recursive targets. Define mkdir_p and
	NORMAL_INSTALL.
	* libiberty/configure.ac: AC_SUBST datarootdir, docdir, htmldir.
	* libiberty/configure: Regenerate.
	* libiberty/testsuite/Makefile.in: Add install-html and html targets.
	* ld/Makefile.am: Add install-html, install-html-am, and
	install-html-recursive targets.
	* ld/Makefile.in: Regenerate.
	* ld/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* ld/configure: Regenerate.
	* ld/po/Make-in: Add install-html target.
	* intl/Makefile.in: Add html info and dvi and install-html to .PHONY
	Add install-html target.
	* gprof/po/Make-in: Add install-html target.
	* gprof/Makefile.am: Add install-html, install-html-am and
	install-html-recursive targets.
	* gprof/Makefile.in: Regenerate.
	* gprof/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* gprof/configure: Regenerate.
	* gas/po/Make-in: Add install-html target.
	* gas/Makefile.am: Add install-html and install-html-recursive targets.
	* gas/Makefile.in: Regenerate.
	* gas/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* gas/configure: Regenerate.
	* gas/doc/Makefile.am: Add install-html and install-html-am targets.
	* gas/doc/Makefile.in: Regenerate.
	* binutils/po/Make-in: Add install-html target.
	* binutils/Makefile.am: Add install-html and install-html-recursive targets.
	* binutils/Makefile.in: Regenerate.
	* binutils/configure.in: AC_SUBST datarootdir, docdir and htmldir.
	* binutils/configure: Regenerate.
	* binutils/doc/Makefile.am: Add install-html and install-html-am targets.
	* binutils/doc/Makefile.in: Regenerate.
	* bfd/po/Make-in: Add install-html target.
	* bfd/Makefile.am: Rename docdir to bfddocdir. Add datarootdir, docdir
	htmldir. Add install-html and install-html-recursive targets.
	* bfd/Makefile.in: Regenerate.
	* bfd/configure.in: AC_SUBST for datarootdir, docdir and htmldir.
	* bfd/configure: Regenerate.
	* bfd/doc/Makefile.am: Add install-html and install-html-am targets.
	Define datarootdir, docdir and htmldir.
	* bfd/doc/Makefile.in: Regenerate.
	* etc/Makefile.in: Add install-html target. Add htmldir,
	docdir and datarootdir.
	* etc/configure.texi: Document install-html target.
	* etc/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* etc/configure: Regenerate.
@
text
@a55 3
datarootdir = @@datarootdir@@
docdir = @@docdir@@
htmldir = @@htmldir@@
d535 1
a535 1
.PHONY: info installcheck dvi html install-info install-html
a552 2
install-html: do-install-html

@


1.159.2.2
log
@
2006-04-12  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.tpl: Add install-html to install target deps.
	* Makefile.in: Regenerate.
@
text
@d645 1
a645 1
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) installdirs install-host install-target install-html
@


1.158
log
@2006-02-20  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/25670

	* Makefile.tpl ([+compare-target+]): Print explanation messages.

	* Makefile.def (ADAFLAGS, BOOT_ADAFLAGS, LANGUAGES): New flags_to_pass.
	* Makefile.tpl (BASE_FLAGS_TO_PASS): Support optional flags_to_pass.
	(EXTRA_GCC_FLAGS): Remove ADAFLAGS, BOOT_ADAFLAGS, LANGUAGES,
	BUILD_PREFIX, BUILD_PREFIX_1.
	* configure.in: (BUILD_PREFIX, BUILD_PREFIX_1): Don't substitute.

	* Makefile.def (bootstrap stage 1): Pass LIBCFLAGS too.
	* Makefile.tpl (POSTSTAGE1_FLAGS_TO_PASS): Override LIBCFLAGS too.

	* Makefile.tpl (configure-stage[+id+]-[+prefix+][+module+],
	all-stage[+id+]-[+prefix+][+module+], : Use $(current_stage) instead
	of `cat stage_current`.  Always provide the `r' and `s' variables.
	(clean-stage[+id+]-[+prefix+][+module+]): Likewise, and make it into
	a single shell execution.
	(configure-[+prefix+][+module+], all-[+prefix+][+module+]): For
	bootstrapped modules, make the stage1 module if the build was not
	started yet, else build the current stage.
	(all-host, all-target): Omit bootstrapped modules (if bootstrapping).
	(all-build, all-host, all-target, [+make_target+]-host,
	[+make_target+]-target): Do not use \-continued lines.
	(target modules): Depend on stage_last, not all-gcc, if bootstrapping.
	(current_stage, restrap, stage_last): New.

	* Makefile.in: Regenerate.
	* configure: Regenerate.
@
text
@a89 2
# This is the list of directories to be built for the build system.
BUILD_CONFIGDIRS = libiberty
a181 3
# This is set by the configure script to the list of directories which
# should be built using the target tools.
TARGET_CONFIGDIRS = @@target_configdirs@@
@


1.157
log
@* Makefile.tpl (clean-stage[+id+]-[+prefix+][+module+]): Remove
@@ from continuation.
* Makefile.in: Rebuilt.
@
text
@d392 3
a394 2
BASE_FLAGS_TO_PASS = [+ FOR flags_to_pass +]\
	"[+flag+]=$([+flag+])" [+ ENDFOR flags_to_pass +]\
a460 2
	'BUILD_PREFIX=$(BUILD_PREFIX)' \
	'BUILD_PREFIX_1=$(BUILD_PREFIX_1)' \
a461 1
	"`echo 'LANGUAGES=$(LANGUAGES)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
d466 1
a466 2
	"`echo 'LIBGCC2_INCLUDES=$(LIBGCC2_INCLUDES)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'BOOT_ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`"
d500 3
a502 4
all-build: [+
  FOR build_modules +] \
    maybe-all-build-[+module+][+
  ENDFOR build_modules +]
d504 5
a508 4
all-host: [+
  FOR host_modules +] \
    maybe-all-[+module+][+
  ENDFOR host_modules +]
d510 4
a513 4
all-target: [+
  FOR target_modules +] \
    maybe-all-target-[+module+][+
  ENDFOR target_modules +]
d530 2
a531 4
[+make_target+]-host: [+
  FOR host_modules +] \
    maybe-[+make_target+]-[+module+][+
  ENDFOR host_modules +]
d534 2
a535 4
[+make_target+]-target: [+
  FOR target_modules +] \
    maybe-[+make_target+]-target-[+module+][+
  ENDFOR target_modules +]
d725 8
a732 5
configure-[+prefix+][+module+]:
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ELSE bootstrap +]: $(MAKE); $(unstage)
	@@[+ ENDIF bootstrap +][+ IF check_multilibs
	+]r=`${PWD_COMMAND}`; export r; \
d734 2
a735 1
	echo "Checking multilib configuration for [+module+]..."; \
d747 2
a748 2
	fi
	@@[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \
a749 2
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d773 1
a773 1
	@@[ `cat stage_current` = stage[+id+] ] || $(MAKE) stage[+id+]-start
d775 2
d778 1
a778 3
	+]@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	echo "Checking multilib configuration for [+module+]..."; \
d789 2
a790 2
	fi
	@@[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \
d818 8
a825 4
all-[+prefix+][+module+]: configure-[+prefix+][+module+]
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ELSE bootstrap +]: $(MAKE); $(unstage)
	@@[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \
d843 1
a843 1
	@@[ `cat stage_current` = stage[+id+] ] || $(MAKE) stage[+id+]-start
d859 1
a859 1
	[ `cat stage_current` = stage[+id+] ] || $(MAKE) stage[+id+]-start
d1212 1
d1217 1
d1260 1
d1342 1
d1363 1
a1363 1
	  true; \
d1426 5
d1433 7
d1445 14
a1458 6
[+ FOR target_modules +][+ IF bootstrap +]
@@if gcc-bootstrap[+ FOR bootstrap_stage +]
configure-stage[+id+]-target-[+module+]: maybe-all-stage[+id+]-gcc[+ ENDFOR +]
@@endif gcc-bootstrap[+ ENDIF bootstrap +]
configure-target-[+module+]: maybe-all-gcc
[+ ENDFOR target_modules +]
@


1.156
log
@2006-01-04  Paolo Bonzini  <bonzini@@gnu.org>

	Sync from gcc:

	2006-01-04  Paolo Bonzini  <bonzini@@gnu.org>

        PR bootstrap/24252

        * Makefile.def (flags_to_pass): Add STAGE1_CFLAGS and STAGE1_LANGUAGES.
        * Makefile.tpl (OBJDUMP): New.
        (EXTRA_HOST_FLAGS): Add it.
        (EXTRA_GCC_FLAGS): Remove flags already specified in flags_to_pass.

        * Makefile.tpl (stage[+id+]-start, stage[+id+]-end): Do not try
        to use symbolic links between directories.  Avoid race conditions
        or make them harmless.
        * configure.in: Do not try to use symbolic links between directories.

        * Makefile.def (LEAN): Pass.
        * Makefile.tpl (LEAN): Define.
        (stage[+id+]-start): Accept that the previous directory does not
        exist, if the bootstrap is lean.
        (stage[+id+]-bubble): Invoke lean bootstrap commands after
        stage[+id+]-start.  Use a makefile variable and an `if' instead of a
        configure substitution.
        ([+compare-target+]): Likewise.
        ([+bootstrap-target+]-lean): New.
        * configure.in: Remove lean bootstrap support from here.

        * Makefile.in: Regenerate.
        * configure: Regenerate.

	2006-01-02  Andreas Schwab  <schwab@@suse.de>

        * configure.in: When reconfiguring remove Makefile in
        all stage directories.
        * configure: Regenerate.
@
text
@d860 1
a860 1
	@@[ `cat stage_current` = stage[+id+] ] || $(MAKE) stage[+id+]-start
@


1.155
log
@2005-12-20  Paolo Bonzini  <bonzini@@gnu.org>

	Revert Ada-related part of the previous change.

	* Makefile.def (ADAFLAGS, BOOT_ADAFLAGS, ADAFLAGS_FOR_TARGET):
	Do not pass.
	* Makefile.tpl (BOOT_ADAFLAGS): Do not define.
	* Makefile.in: Regenerate.
	* configure.in: Do not include mt-ppc-aix target fragment.
	* configure: Regenerate.

config:
2005-12-20  Paolo Bonzini  <bonzini@@gnu.org>

	Revert Ada-related part of the previous change.

	* mt-ppc-aix: Delete.
@
text
@d9 1
a9 1
#   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation
d288 1
d411 1
a468 2
	"`echo 'STAGE1_CFLAGS=$(STAGE1_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'BOOT_CFLAGS=$(BOOT_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
d1225 3
d1283 2
a1284 4
	set stage[+id+]-[+module+] [+module+] ; \
	@@CREATE_LINK_TO_DIR@@ [+ IF prev +] ; \
	set stage[+prev+]-[+module+] prev-[+module+] ; \
	@@CREATE_LINK_TO_DIR@@ [+ ENDIF prev +]
d1288 2
a1289 4
	set stage[+id+]-$(TARGET_SUBDIR) $(TARGET_SUBDIR) ; \
	@@CREATE_LINK_TO_DIR@@ [+ IF prev +] ; \
	set stage[+prev+]-$(TARGET_SUBDIR) prev-$(TARGET_SUBDIR) ; \
	@@CREATE_LINK_TO_DIR@@ [+ ENDIF prev +]
d1291 1
a1291 2
stage[+id+]-end::
	@@rm -f stage_current[+ FOR host_modules +][+ IF bootstrap +]
d1293 3
a1295 5
	@@if test -d $(HOST_SUBDIR) ; then \
	cd $(HOST_SUBDIR); set [+module+] stage[+id+]-[+module+] ; \
	@@UNDO_LINK_TO_DIR@@ [+ IF prev +] ; \
	set prev-[+module+] stage[+prev+]-[+module+] ; \
	@@UNDO_LINK_TO_DIR@@ [+ ENDIF prev +] ; \
d1299 2
a1300 4
	  set $(TARGET_SUBDIR) stage[+id+]-$(TARGET_SUBDIR) ; \
	  @@UNDO_LINK_TO_DIR@@ [+ IF prev +] ; \
	  set prev-$(TARGET_SUBDIR) stage[+prev+]-$(TARGET_SUBDIR) ; \
	  @@UNDO_LINK_TO_DIR@@ [+ ENDIF prev +] ; \
d1302 1
d1308 1
a1308 2
stage[+id+]-bubble:: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +][+IF lean +]
	@@bootstrap_lean@@-rm -rf stage[+lean+]-* ; $(STAMP) stage[+lean+]-lean[+ ENDIF lean +]
d1315 5
a1319 1
	  $(MAKE) stage[+id+]-start; \
d1363 4
a1366 1
	@@bootstrap_lean@@-rm -rf stage[+prev+]-* ; $(STAMP) stage[+prev+]-lean[+ ENDIF prev +]
d1370 1
a1370 1
.PHONY: [+bootstrap-target+]
d1380 10
@


1.154
log
@2005-12-19  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.in: Select appropriate fragments for PowerPC/AIX.
	* configure: Regenerate.

	* Makefile.def (flags_to_pass): Add ADAFLAGS, BOOT_ADAFLAGS,
	BOOT_CFLAGS, BOOT_LDFLAGS.
	* Makefile.tpl (POSTSTAGE1_FLAGS_TO_PASS): Handle BOOT_ADAFLAGS,
	BOOT_CFLAGS, BOOT_LDFLAGS.
	(TARGET_FLAGS_TO_PASS): Handle ADAFLAGS_FOR_TARGET.
	(stage[+id+]-bubble): Pass flags recursively to the comparison target.
	(stage): Fail if we cannot complete the work.

config:
2005-12-19  Paolo Bonzini  <bonzini@@gnu.org>

        * mt-ppc-aix, mh-ppc-aix: New.
@
text
@a257 1
BOOT_ADAFLAGS=
a432 1
	'ADAFLAGS=$$(ADAFLAGS_FOR_TARGET)' \
a1255 1
	ADAFLAGS="$(BOOT_ADAFLAGS)" \
@


1.153
log
@2005-12-15  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (all, do-[+make_target+], do-check, install,
	install-host-nogcc): Don't invoke $(stage) at the end.
	* Makefile.in: Regenerate.
@
text
@d258 2
d434 1
d1218 1
a1218 1
stage = [ -f stage_current ] && $(MAKE) `cat stage_current`-end || :
d1258 2
d1327 1
a1327 1
	$(MAKE) [+compare-target+][+ ENDIF compare-target +]
@


1.152
log
@2005-12-14  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.in: Flip the top-level bootstrap switch.
	* configure: Regenerate.

	Merge from gcc:

	2005-12-14  Daniel Jacobowitz  <dan@@codesourcery.com>

        * Makefile.tpl: Throughout the file, use : $(MAKE) along with
        $(stage) and $(unstage).
        (EXTRA_TARGET_FLAGS): Correct double-quoting.
        (all): Remove stray semicolon.
        (local-distclean): Don't handle multilib.tmp and multilib.out.
        (install.all): Set $s for consistency.
        (configure-[+prefix+][+module+]): Instead of [+deps+], handle
        check_multilibs setting.  Always make the install directory.
        (configure-stage[+id+]-[+prefix+][+module+]): Likewise.
        Correct @@if/@@endif.
        (all-stage[+id+]-[+prefix+][+module+]): Correct @@if/@@endif.
        ($(TARGET_SUBDIR)/[+module+]/multilib.out): Remove.
        (stage[+id+]-start, stage[+id+]-end): Stage $(TARGET_SUBDIR).
        (multilib.out): Remove.
        * Makefile.in: Regenerated.
@
text
@a499 1
	@@: $(MAKE); $(stage)
a528 1
	@@: $(MAKE); $(stage)
a621 1
	@@: $(MAKE); $(stage)
a651 1
	@@: $(MAKE); $(stage)
a1376 1
	@@: $(MAKE); $(stage)
@


1.151
log
@toplevel:
2005-12-05  Paolo Bonzini  <bonzini@@gnu.org>

	Sync with gcc:

	2005-12-05  Paolo Bonzini  <bonzini@@gnu.org>

        * configure.in (CONFIGURED_BISON, CONFIGURED_YACC, CONFIGURED_M4,
        CONFIGURED_FLEX, CONFIGURED_LEX, CONFIGURED_MAKEINFO): Remove
        "CONFIGURED_" from the AC_CHECK_PROGS invocation.  Move below.
        Find in-tree tools if available.
        (EXPECT, RUNTEST, LIPO, STRIP): Find them and substitute them.
        (CONFIGURED_*_FOR_TARGET): Don't set nor substitute.
        (*_FOR_TARGET): Set them with GCC_TARGET_TOOL.
        (COMPILER_*_FOR_TARGET): New.
        * Makefile.tpl (HOST_EXPORTS): Add *_FOR_TARGET symbols that gcc needs.
        (BASE_TARGET_EXPORTS): Use COMPILER_*_FOR_TARGET symbols.
        (CONFIGURED_*, USUAL_*): Remove.
        (BISON, YACC, FLEX, LEX, M4, MAKEINFO, EXPECT, RUNTEST, LIPO,
        STRIP): Use autoconf substitutions.
        (COMPILER_AS_FOR_TARGET, COMPILER_LD_FOR_TARGET,
        COMPILER_NM_FOR_TARGET): New.
        (EXTRA_HOST_FLAGS): Pass LIPO and STRIP.

        (all): Make all-host and all-target in parallel.
        (do-[+make_target+], do-check, install, [+compare-target+]): Ensure
        that $$r and $$s are set before invoking a recursive make.
        (stage[+id+]-bubble): Likewise, and invoke the comparison at the end.
        ([+bootstrap-target+]): Inline most of the `all' target.

	2005-11-29  Ben Elliston  <bje@@au.ibm.com>

        * Makefile.tpl (clean-target-libgcc): Invoke clean-target-libgcc
        from the gcc build directory.
        * Makefile.in: Regenerate.

	2005-11-29  Ben Elliston  <bje@@au.ibm.com>

        * Makefile.def: Add new libdecnumber host_module.  Make all-gcc
        depend on all-libdecnumber.
        * configure.in (host_libs): Include libdecnumber.
        * Makefile.in: Regenerate.
        * configure: Likewise.

	2005-11-21  Kean Johnston  <jkj@@sco.com>

        * config.sub, config.guess: Sync from upstream sources.

config:
2005-12-05  Paolo Bonzini  <bonzini@@gnu.org>

	* acx.m4 (GCC_TARGET_TOOL): New.
@
text
@d428 3
a430 2
# The double $ decreases the length of the command line; the variables
# are set in BASE_FLAGS_TO_PASS, and the sub-make will expand them.
d433 1
a433 1
	'AS=$$(COMPILER_AS_FOR_TARGET)' \
d439 1
a439 1
	'LD=$$(COMPILER_LD_FOR_TARGET)' \
d443 1
a443 1
	'NM=$$(COMPILER_NM_FOR_TARGET)' \
d490 1
a490 1
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) `cat stage_final`-bubble; \
d492 1
a492 1
	@@$(unstage)
d500 1
a500 1
	@@$(stage)
d525 1
a525 1
	@@$(unstage)
d530 1
a530 1
	@@$(stage)
d571 1
a571 1
	-rm -f multilib.out multilib.tmp maybedep.tmp serdep.tmp
d620 1
a620 1
	@@$(unstage)
d624 1
a624 1
	@@$(stage)
d651 1
a651 1
	@@$(unstage)
d655 1
a655 1
	@@$(stage)
d682 1
d735 1
a735 1
configure-[+prefix+][+module+]: [+deps+]
d737 18
a754 2
	[+ ELSE bootstrap +]$(unstage)
	@@[+ ENDIF bootstrap +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \
d778 1
a778 1
@@if [+module+]-bootstrap
d780 1
a780 1
configure-stage[+id+]-[+prefix+][+module+]: [+deps+]
d782 17
a798 3
	@@[ -f [+subdir+]/[+module+]/Makefile ] && exit 0 || : ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d802 1
d814 1
a814 1
@@endif [+module+]-bootstrap
d828 1
a828 1
	[+ ELSE bootstrap +]$(unstage)
d842 1
a842 1
@@if [+module+]-bootstrap
d868 1
a868 1
@@endif [+module+]-bootstrap
d908 1
a908 1
	@@$(unstage)
d918 1
a918 1
	@@$(unstage)
d935 1
a935 1
	@@$(unstage)
d958 1
a958 1
	@@[+ IF bootstrap +][+ ELSE +]$(unstage)
a983 8
# There's only one multilib.out.  Cleverer subdirs shouldn't need it copied.
@@if target-[+module+]
$(TARGET_SUBDIR)/[+module+]/multilib.out: multilib.out
	$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \
	rm -f $(TARGET_SUBDIR)/[+module+]/Makefile || : ; \
	cp multilib.out $(TARGET_SUBDIR)/[+module+]/multilib.out
@@endif target-[+module+]

d986 1
a986 1
	     deps=(string-append "$(TARGET_SUBDIR)/" (get "module") "/multilib.out")
d995 1
a995 1
	     deps=(string-append "$(TARGET_SUBDIR)/" (get "module") "/multilib.out")
d1013 1
a1013 1
	@@$(unstage)
d1039 1
a1039 1
	@@$(unstage)
d1066 1
a1066 1
	@@$(unstage)
d1209 4
a1212 2
# there, so $(MAKE) $(unstage) should be run at various points.  To avoid
# excessive recursive invocations of make, we "inline" them using a variable.
d1224 1
a1224 1
	@@$(unstage)
d1226 1
a1226 1
	@@$(stage)
d1233 1
a1233 1
# the previous stage to a constant name ('gcc-prev'), and to make the name of
d1274 1
a1274 1
	@@$(stage); \
d1277 1
a1277 1
	$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR) $(TARGET_SUBDIR)[+
d1286 4
a1289 6
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +][+
   FOR target_modules +][+ IF bootstrap +]
@@if target-[+ module +]
	@@cd $(TARGET_SUBDIR); [ -d stage[+id+]-[+module+] ] || \
	  mkdir stage[+id+]-[+module+]; \
	set stage[+id+]-[+module+] [+module+] ; \
d1291 1
a1291 1
	set stage[+prev+]-[+module+] prev-[+module+] ; \
a1292 1
@@endif target-[+ module +][+ ENDIF bootstrap +][+ ENDFOR target_modules +]
d1297 2
a1298 1
	@@cd $(HOST_SUBDIR); set [+module+] stage[+id+]-[+module+] ; \
d1301 9
a1309 9
	@@UNDO_LINK_TO_DIR@@ [+ ENDIF prev +]
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +][+
   FOR target_modules +][+ IF bootstrap +]
@@if target-[+ module +]
	@@cd $(HOST_SUBDIR); set [+module+] stage[+id+]-[+module+] ; \
	@@UNDO_LINK_TO_DIR@@ [+ IF prev +] ; \
	set prev-[+module+] stage[+prev+]-[+module+] ; \
	@@UNDO_LINK_TO_DIR@@ [+ ENDIF prev +]
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR target_modules +]
d1311 3
a1313 3
# Bubble a bugfix through all the stages up to stage [+id+].  They
# are remade, but not reconfigured.  The next stage (if any) will not
# be reconfigured as well.
d1342 1
a1342 1
	$(stage); \
d1377 1
a1377 1
	@@$(unstage)
d1381 1
a1381 1
	@@$(stage)
d1388 1
a1388 1
	@@$(stage)
a1556 11
# Multilib.out tells target dirs what multilibs they should build.
# There is really only one copy.  We use the 'timestamp' method to
# work around various timestamp bugs on some systems.
# We use move-if-change so that it's only considered updated when it
# actually changes, because it has to depend on a phony target.
multilib.out: maybe-all-gcc
	@@r=`${PWD_COMMAND}`; export r; \
	echo "Checking multilib configuration..."; \
	$(CC_FOR_TARGET) --print-multi-lib > multilib.tmp 2> /dev/null ; \
	$(SHELL) $(srcdir)/move-if-change multilib.tmp multilib.out ; \

@


1.150
log
@	* Makefile.def: Remove gdb dependencies for gdbtk.
	* Makefile.tpl (CONFIGURE_GDB_TK, INSTALL_GDB_TK): New variables.
	(configure-gdb, install-gdb): New rules.
	* configure.in: Set CONFIGURE_GDB_TK and INSTALL_GDB_TK.
	* Makefile.in, configure: Regenerated.
@
text
@d139 2
a140 1
# configuring subdirectories for the host system.
d159 7
d197 1
a197 1
	AS="$(AS_FOR_TARGET)"; export AS; \
d206 1
a206 1
	LD="$(LD_FOR_TARGET)"; export LD; \
d209 1
a209 1
	NM="$(NM_FOR_TARGET)"; export NM; \
d259 8
a266 41
CONFIGURED_BISON = @@CONFIGURED_BISON@@
BISON = `if [ -f $$r/$(BUILD_SUBDIR)/bison/tests/bison ] ; then \
	    echo $$r/$(BUILD_SUBDIR)/bison/tests/bison ; \
	 else \
	    echo ${CONFIGURED_BISON} ; \
	 fi`

CONFIGURED_YACC = @@CONFIGURED_YACC@@
YACC = `if [ -f $$r/$(BUILD_SUBDIR)/bison/tests/bison ] ; then \
	    echo $$r/$(BUILD_SUBDIR)/bison/tests/bison -y ; \
	elif [ -f $$r/$(BUILD_SUBDIR)/byacc/byacc ] ; then \
	    echo $$r/$(BUILD_SUBDIR)/byacc/byacc ; \
	else \
	    echo ${CONFIGURED_YACC} ; \
	fi`

CONFIGURED_FLEX = @@CONFIGURED_FLEX@@
FLEX = `if [ -f $$r/$(BUILD_SUBDIR)/flex/flex ] ; \
	then echo $$r/$(BUILD_SUBDIR)/flex/flex ; \
	else echo ${CONFIGURED_FLEX} ; fi`

CONFIGURED_LEX = @@CONFIGURED_LEX@@
LEX = `if [ -f $$r/$(BUILD_SUBDIR)/flex/flex ] ; \
	then echo $$r/$(BUILD_SUBDIR)/flex/flex ; \
	else echo ${CONFIGURED_LEX} ; fi`

CONFIGURED_M4 = @@CONFIGURED_M4@@
M4 = `if [ -f $$r/$(BUILD_SUBDIR)/m4/m4 ] ; \
	then echo $$r/$(BUILD_SUBDIR)/m4/m4 ; \
	else echo ${CONFIGURED_M4} ; fi`

# For an installed makeinfo, we require it to be from texinfo 4.2 or
# higher, else we use the "missing" dummy.  We also pass the subdirectory
# makeinfo even if only the Makefile is there, because Texinfo builds its
# manual when made, and it requires its own version.
CONFIGURED_MAKEINFO = @@CONFIGURED_MAKEINFO@@
MAKEINFO = `if [ -f $$r/$(BUILD_SUBDIR)/texinfo/makeinfo/Makefile ] ; \
	then echo $$r/$(BUILD_SUBDIR)/texinfo/makeinfo/makeinfo ; \
	else if (${CONFIGURED_MAKEINFO} --version \
	  | egrep 'texinfo[^0-9]*([1-3][0-9]|4\.[2-9]|[5-9])') >/dev/null 2>&1; \
        then echo ${CONFIGURED_MAKEINFO}; else echo $$s/missing makeinfo; fi; fi`
a273 9
# FIXME: expect may become a build tool?
EXPECT = `if [ -f $$r/$(HOST_SUBDIR)/expect/expect ] ; \
	then echo $$r/$(HOST_SUBDIR)/expect/expect ; \
	else echo expect ; fi`

RUNTEST = `if [ -f $$s/dejagnu/runtest ] ; \
	then echo $$s/dejagnu/runtest ; \
	else echo runtest ; fi`

a278 1

a280 1

a281 3
CFLAGS = @@CFLAGS@@
LIBCFLAGS = $(CFLAGS)

a282 3
CXXFLAGS = @@CXXFLAGS@@
LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates

d284 2
a285 1

a286 4

LD = @@LD@@
LDFLAGS = 

d288 1
a288 1

d291 5
a304 12
CONFIGURED_AR_FOR_TARGET=@@CONFIGURED_AR_FOR_TARGET@@
USUAL_AR_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/binutils/ar ] ; then \
    echo $$r/$(HOST_SUBDIR)/binutils/ar ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(AR); \
    else \
      echo $(CONFIGURED_AR_FOR_TARGET) ; \
    fi; \
  fi`

a305 14
CONFIGURED_AS_FOR_TARGET=@@CONFIGURED_AS_FOR_TARGET@@
USUAL_AS_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/gas/as-new ] ; then \
    echo $$r/$(HOST_SUBDIR)/gas/as-new ; \
  elif [ -f $$r/$(HOST_SUBDIR)/gcc/as ]; then \
    echo $$r/$(HOST_SUBDIR)/gcc/as ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(AS); \
    else \
      echo $(CONFIGURED_AS_FOR_TARGET) ; \
    fi; \
  fi`

a306 18
CONFIGURED_CC_FOR_TARGET=@@CONFIGURED_CC_FOR_TARGET@@
USUAL_CC_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/gcc/xgcc ] ; then \
    echo $$r/$(HOST_SUBDIR)/gcc/xgcc -B$$r/$(HOST_SUBDIR)/gcc/ ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(CC); \
    else \
      echo $(CONFIGURED_CC_FOR_TARGET) ; \
    fi; \
  fi`

# During gcc bootstrap, if we use some random cc for stage1 then
# CFLAGS will be just -g.  We want to ensure that TARGET libraries
# (which we know are built with gcc) are built with optimizations so
# prepend -O2 when setting CFLAGS_FOR_TARGET.
CFLAGS_FOR_TARGET = -O2 $(CFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)
SYSROOT_CFLAGS_FOR_TARGET = @@SYSROOT_CFLAGS_FOR_TARGET@@
d312 1
a312 6
GCC_FOR_TARGET=@@GCC_FOR_TARGET@@
CONFIGURED_GCC_FOR_TARGET=@@CONFIGURED_GCC_FOR_TARGET@@
USUAL_GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) \
  $$r/$(HOST_SUBDIR)/gcc/xgcc -B$$r/$(HOST_SUBDIR)/gcc/ $(FLAGS_FOR_TARGET)
LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)

a313 14
CONFIGURED_CXX_FOR_TARGET=@@CONFIGURED_CXX_FOR_TARGET@@
USUAL_CXX_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/gcc/g++ ] ; then \
    (echo $$r/$(HOST_SUBDIR)/gcc/g++ -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++; \
    test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes; \
    echo -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs) | tr '\015\012' '  '; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(CXX); \
    else \
      echo $(CONFIGURED_CXX_FOR_TARGET) ; \
    fi; \
  fi`

a314 14
USUAL_RAW_CXX_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/gcc/xgcc ] ; then \
    echo $$r/$(HOST_SUBDIR)/gcc/xgcc -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(CXX); \
    else \
      echo $(CONFIGURED_CXX_FOR_TARGET) ; \
    fi; \
  fi`

CXXFLAGS_FOR_TARGET = $(CXXFLAGS) $(SYSROOT_CFLAGS_FOR_TARGET)
LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates

a315 12
CONFIGURED_GCJ_FOR_TARGET=@@CONFIGURED_GCJ_FOR_TARGET@@
USUAL_GCJ_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/gcc/gcj ] ; then \
    echo $$r/$(HOST_SUBDIR)/gcc/gcj -B$$r/$(HOST_SUBDIR)/gcc ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(GCJ); \
    else \
      echo $(CONFIGURED_GCJ_FOR_TARGET) ; \
    fi; \
  fi`

a316 13
CONFIGURED_GFORTRAN_FOR_TARGET=@@CONFIGURED_GFORTRAN_FOR_TARGET@@
USUAL_GFORTRAN_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/gcc/gfortran ] ; then \
    echo $$r/$(HOST_SUBDIR)/gcc/gfortran -B$$r/$(HOST_SUBDIR)/gcc ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(GFORTRAN); \
    else \
      echo $(CONFIGURED_GFORTRAN_FOR_TARGET) ; \
    fi; \
  fi`


a317 12
CONFIGURED_DLLTOOL_FOR_TARGET=@@CONFIGURED_DLLTOOL_FOR_TARGET@@
USUAL_DLLTOOL_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/binutils/dlltool ] ; then \
    echo $$r/$(HOST_SUBDIR)/binutils/dlltool ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(DLLTOOL); \
    else \
      echo $(CONFIGURED_DLLTOOL_FOR_TARGET) ; \
    fi; \
  fi`

a318 15
CONFIGURED_LD_FOR_TARGET=@@CONFIGURED_LD_FOR_TARGET@@
USUAL_LD_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/ld/ld-new ] ; then \
    echo $$r/$(HOST_SUBDIR)/ld/ld-new ; \
  elif [ -f $$r/$(HOST_SUBDIR)/gcc/collect-ld ]; then \
    echo $$r/$(HOST_SUBDIR)/gcc/collect-ld ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(LD); \
    else \
      echo $(CONFIGURED_LD_FOR_TARGET) ; \
    fi; \
  fi`

LDFLAGS_FOR_TARGET = 
a320 12
CONFIGURED_LIPO_FOR_TARGET=@@CONFIGURED_LIPO_FOR_TARGET@@
USUAL_LIPO_FOR_TARGET = ` \
  if [ '$(host)' = '$(target)' ] ; then \
    if [ x'$(LIPO)' != x ]; then \
       echo $(LIPO); \
    else \
       echo lipo; \
    fi; \
  else \
    echo $(CONFIGURED_LIPO_FOR_TARGET) ; \
  fi`

a321 14
CONFIGURED_NM_FOR_TARGET=@@CONFIGURED_NM_FOR_TARGET@@
USUAL_NM_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/binutils/nm-new ] ; then \
    echo $$r/$(HOST_SUBDIR)/binutils/nm-new ; \
  elif [ -f $$r/$(HOST_SUBDIR)/gcc/nm ]; then \
    echo $$r/$(HOST_SUBDIR)/gcc/nm ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(NM); \
    else \
      echo $(CONFIGURED_NM_FOR_TARGET) ; \
    fi; \
  fi`

a322 16
CONFIGURED_OBJDUMP_FOR_TARGET=@@CONFIGURED_OBJDUMP_FOR_TARGET@@
USUAL_OBJDUMP_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/binutils/objdump ] ; then \
    echo $$r/$(HOST_SUBDIR)/binutils/objdump ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      if [ x'$(OBJDUMP)' != x ]; then \
         echo $(OBJDUMP); \
      else \
         echo objdump; \
      fi; \
    else \
      echo $(CONFIGURED_OBJDUMP_FOR_TARGET) ; \
    fi; \
  fi`

a323 16
CONFIGURED_RANLIB_FOR_TARGET=@@CONFIGURED_RANLIB_FOR_TARGET@@
USUAL_RANLIB_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/binutils/ranlib ] ; then \
    echo $$r/$(HOST_SUBDIR)/binutils/ranlib ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      if [ x'$(RANLIB)' != x ]; then \
         echo $(RANLIB); \
      else \
         echo ranlib; \
      fi; \
    else \
      echo $(CONFIGURED_RANLIB_FOR_TARGET) ; \
    fi; \
  fi`

d325 1
a325 15
CONFIGURED_STRIP_FOR_TARGET=@@CONFIGURED_STRIP_FOR_TARGET@@
USUAL_STRIP_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/binutils/strip ] ; then \
    echo $$r/$(HOST_SUBDIR)/binutils/strip ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      if [ x'$(STRIP)' != x ]; then \
         echo $(STRIP); \
      else \
         echo strip; \
      fi; \
    else \
      echo $(CONFIGURED_STRIP_FOR_TARGET) ; \
    fi; \
  fi`
d327 3
a329 12
WINDRES_FOR_TARGET=@@WINDRES_FOR_TARGET@@
CONFIGURED_WINDRES_FOR_TARGET=@@CONFIGURED_WINDRES_FOR_TARGET@@
USUAL_WINDRES_FOR_TARGET = ` \
  if [ -f $$r/$(HOST_SUBDIR)/binutils/windres ] ; then \
    echo $$r/$(HOST_SUBDIR)/binutils/windres ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(WINDRES); \
    else \
      echo $(CONFIGURED_WINDRES_FOR_TARGET) ; \
    fi; \
  fi`
d331 10
d407 1
d410 1
d432 1
a432 1
	'AS=$$(AS_FOR_TARGET)' \
d438 1
a438 1
	'LD=$$(LD_FOR_TARGET)' \
d442 1
a442 1
	'NM=$$(NM_FOR_TARGET)' \
d486 1
d489 1
a489 3
	if [ ! -f stage_last ]; then \
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) bootstrap; \
	fi
a491 5
@@if gcc-no-bootstrap
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-prebootstrap
@@endif gcc-no-bootstrap
d495 1
a495 1
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) all-host; \
d497 1
a497 1
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-host; \
a498 3
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-target
d595 1
a595 1
# Extra dependency for clean-target, owing to the mixed nature of gcc
d598 1
a598 5
	test ! -d gcc/libgcc || \
	(cd gcc/libgcc && find . -type d -print) | \
	while read d; do rm -f gcc/$$d/libgcc.a || : ; done
	-rm -rf gcc/libgcc
	-rm -f gcc/stmp-dirs
d1192 1
a1192 1
stage = $(MAKE) `cat stage_current`-end
d1247 1
a1247 1
	@@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \
d1300 2
a1301 1
	fi
d1317 1
a1317 1
	[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \
d1347 10
a1356 3
[+bootstrap-target+]: stage[+id+]-bubble
	[+ IF compare-target +]$(MAKE) [+compare-target+]
	[+ ENDIF compare-target +]$(MAKE) $(RECURSE_FLAGS_TO_PASS) all
d1363 1
a1363 1
	[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :
@


1.149
log
@2005-10-22  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/24297
	* Makefile.tpl (do-[+make-target+], do-check, install,
	stage[+id+]-bubble, [+compare-target+]): Ensure $$r and $$s
	are set before recursing.
	* Makefile.in: Regenerate.
@
text
@d1759 1
d1761 2
d1764 1
@


1.148
log
@	* Makefile.def (flags_to_pass): Add OBJDUMP_FOR_TARGET.
	* Makefile.tpl (BASE_TARGET_EXPORTS): Add OBJDUMP.
	(OBJDUMP_FOR_TARGET, CONFIGURED_OBJDUMP_FOR_TARGET)
	(USUAL_OBJDUMP_FOR_TARGET): New.
	(EXTRA_TARGET_FLAGS): Add OBJDUMP.
	* configure.in: Check for $OBJDUMP_FOR_TARGET.
	* configure, Makefile: Regenerated.
@
text
@d772 3
a774 1
	@@$(MAKE) $(RECURSE_FLAGS_TO_PASS) [+make_target+]-host \
d871 3
a873 1
	@@$(MAKE) $(RECURSE_FLAGS_TO_PASS) check-host check-target
d902 3
a904 1
	@@$(MAKE) $(RECURSE_FLAGS_TO_PASS) installdirs install-host install-target
d1543 3
a1545 1
	@@if test -f stage[+id+]-lean [+
d1561 3
a1563 1
	@@if test -f stage[+prev+]-lean; then \
a1567 2
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
@


1.147
log
@2005-10-05  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (all) [gcc-no-bootstrap]: Make prebootstrap packages
	before other host packages.
@
text
@d202 1
d517 17
d681 1
@


1.146
log
@2005-10-05  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/22340

	* configure.in (default_target): Remove.
	* Makefile.tpl (all): Do not use prerequisites as subroutines
	(all) [gcc-bootstrap]: Bootstrap gcc first if it was not done yet.
	(do-[+make_target+], check, install, [+bootstrap_target+]): Do not
	use prerequisites as subroutines.
	(check-host, check-target): New.
	(bootstrap configure & all targets): Do not use stage*-start
	if the directory layout is already ok.
	(non-bootstrap configure & all targets): Prepend a $(unstage).
	(stage[+id+]-bubble): Do that here.  Do not use NOTPARALLEL.
	(NOTPARALLEL): Remove.
	(unstage, stage variables): New variables.
	(unstage, stage targets): Simply expand to those variables.

	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d712 5
@


1.145
log
@Index: ChangeLog
2005-09-28  Geoffrey Keating  <geoffk@@apple.com>

	* Makefile.tpl (BASE_TARGET_EXPORTS): Add LIPO, STRIP.
	(LIPO_FOR_TARGET): New.
	(CONFIGURED_LIPO_FOR_TARGET): New.
	(USUAL_LIPO_FOR_TARGET): New.
	(STRIP_FOR_TARGET): New.
	(CONFIGURED_STRIP_FOR_TARGET): New.
	(USUAL_STRIP_FOR_TARGET): New.
	* Makefile.def (flags_to_pass): Add LIPO_FOR_TARGET and
	STRIP_FOR_TARGET.
	* configure.in: Set LIPO_FOR_TARGET, STRIP_FOR_TARGET,
	CONFIGURED_LIPO_FOR_TARGET, CONFIGURED_STRIP_FOR_TARGET.
	* Makefile.in: Regenerate.
	* configure.in: Regenerate.

Index: gcc/ChangeLog
2005-09-28  Geoffrey Keating  <geoffk@@apple.com>

	* Makefile.in: Export LIPO_FOR_TARGET, STRIP_FOR_TARGET.
	(stage1-start): Delete old libgcc and libunwind before moving
	anything into the stage directory.
	(stage2-start): Likewise.
	(stage3-start): Likewise.
	(stage4-start): Likewise.
	(stageprofile-start): Likewise.
	(stagefeedback-start): Likewise.
	* config.gcc (*-*-darwin*): Automatically use CPU-specific darwin.h
	header in tm_file and CPU-specific t-darwin in tmake_file.
	(i[34567]86-*-darwin*): Don't change tm_file.
	(powerpc-*-darwin*): Don't change tm_file or tmake_file.
	* config/darwin.h (REAL_LIBGCC_SPEC): Rewrite to use proper libgcc
	shared library stub for target OS version.
	* config/t-slibgcc-darwin (SHLIB_SOLINK): Delete.
	(SHLIB_LINK): Don't make SHLIB_SOLINK.
	(SHLIB_INSTALL): Don't install SHLIB_SOLINK.
	(libgcc_s.%.dylib): New.
	(LIBGCC): Define.
	(install-darwin-libgcc-stubs): New.
	(INSTALL_LIBGCC): New append.
	* config/i386/darwin-libgcc.10.4.ver: New.
	* config/i386/darwin-libgcc.10.5.ver: New.
	* config/i386/t-darwin: New.
	* config/rs6000/darwin-libgcc.10.4.ver: New.
	* config/rs6000/darwin-libgcc.10.5.ver: New.
	* config/rs6000/darwin.h (REAL_LIBGCC_SPEC): Delete.
	* config/rs6000/t-darwin (SHLIB_VERPFX): Define.
@
text
@d161 3
a167 1
	$(RPATH_ENVVAR)=`echo "$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \
d571 1
a571 1
@@default_target@@:
d703 20
a722 1
all: unstage all-host all-target stage
d746 6
a751 1
do-[+make_target+]: unstage [+make_target+]-host [+make_target+]-target stage
d831 2
a832 1
do-check: unstage [+
d835 4
a838 1
  ENDFOR host_modules +][+
d841 6
a846 1
  ENDFOR target_modules +] stage
d872 4
a875 1
install: installdirs install-host install-target
d956 2
a957 1
	[+ ENDIF bootstrap +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \
d984 1
a984 1
	@@$(MAKE) stage[+id+]-start
d1016 2
a1017 1
	[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \
d1033 1
d1035 1
a1035 1
	@@$(MAKE) stage[+id+]-start
d1043 2
a1044 1
		+] [+stage_make_flags+] [+extra_make_flags+]
d1051 1
a1051 1
	[ -f [+subdir+]/[+module+]/Makefile ] || $(MAKE) stage[+id+]-start ; \
d1096 1
d1106 1
d1123 1
d1146 2
a1147 1
	@@[ -f ./[+module+]/Makefile ] || exit 0; \
d1209 1
d1235 1
d1262 1
d1404 7
a1410 2
.PHONY: unstage
unstage:
d1412 2
a1413 1
	@@[ -f stage_current ] || $(MAKE) `cat stage_last`-start
d1416 3
a1418 1
.PHONY: stage
d1420 1
a1420 3
@@if gcc-bootstrap
	@@$(MAKE) `cat stage_current`-end
@@endif gcc-bootstrap
a1432 13
# At the end of the bootstrap, a symlink to 'stage3-gcc' named 'gcc' must
# be kept, so that libraries can find it.  Ick!

# It would be best to preinstall gcc into a staging area (and in the
# future, gather there all prebootstrap packages).  This would allow
# assemblers and linkers can be bootstrapped as well as the compiler
# (both in a combined tree, or separately).  This however requires some
# change to the gcc driver, again in order to avoid comparison failures.

# Bugs: This is crippled when doing parallel make, the `make all-host'
# and `make all-target' phases can be parallelized.


d1517 2
a1518 1
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stage[+id+]; \
d1543 8
a1550 1
	  test $$? -eq 1 && echo $$file differs >> .bad_compare || true; \
d1565 3
a1567 1
[+bootstrap-target+]: stage[+id+]-bubble [+compare-target+] all
a1599 2
NOTPARALLEL = .NOTPARALLEL
$(NOTPARALLEL):
@


1.144
log
@2005-08-17  Christian Groessler  <chris@@groessler.org>

	* Makefile.tpl: (USUAL_CC_FOR_TARGET): Add missing trailing slash.
	* Makefile.in: Regenerate.
@
text
@d198 1
d201 1
d486 13
d531 17
@


1.143
log
@2005-08-08  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.in (CC_FOR_TARGET, CXX_FOR_TARGET, GCJ_FOR_TARGET,
	GCC_FOR_TARGET, RAW_CXX_FOR_TARGET, GFORTRAN_FOR_TARGET): Find
	them with NCN_STRICT_CHECK_TARGET_TOOL, like the other target
	tools; remove code to manually set them.
	(Target tools): Look in the environment for them.
	* Makefile.tpl (CC_FOR_TARGET, CXX_FOR_TARGET, GCJ_FOR_TARGET,
	GCC_FOR_TARGET, RAW_CXX_FOR_TARGET, GFORTRAN_FOR_TARGET): Redefine.
	(AS_FOR_TARGET, LD_FOR_TARGET, NM_FOR_TARGET): Look into gcc
	build directory.
	(CONFIGURED_CC_FOR_TARGET, CONFIGURED_CXX_FOR_TARGET,
	CONFIGURED_GCJ_FOR_TARGET, CONFIGURED_GCC_FOR_TARGET,
	CONFIGURED_GFORTRAN_FOR_TARGET, USUAL_CC_FOR_TARGET,
	USUAL_CXX_FOR_TARGET, USUAL_GCJ_FOR_TARGET, USUAL_GCC_FOR_TARGET,
	USUAL_RAW_CXX_FOR_TARGET, USUAL_GFORTRAN_FOR_TARGET): New.
	(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE,
	RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE, RECURSE_FLAGS): Delete.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d371 1
a371 1
    echo $$r/$(HOST_SUBDIR)/gcc/xgcc -B$$r/$(HOST_SUBDIR)/gcc ; \
@


1.142
log
@	* Makefile.tpl (EXTRA_TARGET_FLAGS): Set LDFLAGS=LDFLAGS_FOR_TARGET.
	* Makefile.def (flags_to_pass): Add LDFLAGS_FOR_TARGET.
	* Makefile.in: Regenerated.
@
text
@d357 2
a358 2
  elif [ -f $$r/$(HOST_SUBDIR)/gcc/xgcc ]; then \
    $(CC_FOR_TARGET) -print-prog-name=as ; \
d367 13
a379 2
CC_FOR_TARGET = @@CC_FOR_TARGET@@
SYSROOT_CFLAGS_FOR_TARGET = @@SYSROOT_CFLAGS_FOR_TARGET@@
d385 2
d392 1
d397 27
a423 4
CXX_FOR_TARGET = @@CXX_FOR_TARGET@@
RAW_CXX_FOR_TARGET = @@RAW_CXX_FOR_TARGET@@
CXX_FOR_TARGET_FOR_RECURSIVE_MAKE = @@CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@@
RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE = @@RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@@
d427 27
a466 3
GCJ_FOR_TARGET = @@GCJ_FOR_TARGET@@
GFORTRAN_FOR_TARGET = @@GFORTRAN_FOR_TARGET@@

d472 2
a473 2
  elif [ -f $$r/$(HOST_SUBDIR)/gcc/xgcc ]; then \
    $(CC_FOR_TARGET) -print-prog-name=ld ; \
d489 2
a490 2
  elif [ -f $$r/$(HOST_SUBDIR)/gcc/xgcc ]; then \
    $(CC_FOR_TARGET) -print-prog-name=nm ; \
d583 2
a584 10
# For any flags above that may contain shell code that varies from one
# target library to another.  When doing recursive invocations of the
# top-level Makefile, we don't want the outer make to evaluate them,
# so we pass these variables down unchanged.  They must not contain
# single nor double quotes.
RECURSE_FLAGS = \
	CXX_FOR_TARGET='$(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)' \
	RAW_CXX_FOR_TARGET='$(RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)' \

RECURSE_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS)
d805 1
a805 1
install: unstage installdirs install-host install-target stage
@


1.141
log
@	* config/mt-gnu (CXXFLAGS): Include SYSROOT_CFLAGS_FOR_TARGET.

	* Makefile.tpl (SYSROOT_CFLAGS_FOR_TARGET): New variable.
	(CFLAGS_FOR_TARGET): Use it.
	(CXXFLAGS_FOR_TARGET): Likewise.
	* Makefile.in: Regenerated.
	* configure.in (--with-build-sysroot): New option.
	* configure: Regenerated.
@
text
@d572 1
@


1.140
log
@2005-07-24  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl: Wrap install between unstage and stage
	* Makefile.in: Regenerate.
@
text
@d368 1
d373 1
a373 1
CFLAGS_FOR_TARGET = -O2 $(CFLAGS)
d387 1
a387 1
CXXFLAGS_FOR_TARGET = $(CXXFLAGS)
@


1.139
log
@2005-07-16  Kelley Cook  <kcook@@gcc.gnu.org>

	* all files: Update FSF address.
@
text
@d750 1
a750 1
install: installdirs install-host install-target
@


1.138
log
@2005-07-11  Paolo Bonzini  <bonzini@@gnu.org>

	PR ada/22340

	* Makefile.def: Sync with gcc.
	* Makefile.tpl (POSTSTAGE1_FLAGS_TO_PASS): Fix pasto.
	* Makefile.in: Regenerate.
@
text
@d23 1
a23 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.137
log
@	* Makefile.def (flags_to_pass): Add CFLAGS_FOR_BUILD.
	* Makefile.tpl (EXTRA_GCC_FLAGS): Don't pass CFLAGS_FOR_BUILD here.
	* Makefile.in: Regenerated.
@
text
@d1322 1
a1322 1
	STAGE_PREFIX=$$r/stage[+prev+]-gcc/ \
@


1.136
log
@2005-06-22  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (stagefeedback): Come after profile.
	Define profiledbootstrap target.
	* Makefile.tpl (profiledbootstrap): Remove.
	(stageprofile-end): Zap stagefeedback.
	(stagefeedback-start): Copy all .gcda files, not only GCC's.
	* Makefile.in: Regenerate.
@
text
@a588 1
	"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)" \
@


1.135
log
@2005-05-25  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (stage[+id+]-start): Iterate over target module as well.
	(Dependencies): Consider target modules for bootstrap dependencies.
	Make target bootstrap modules depend on each stage's gcc.
	* Makefile.in: Regenerate.
@
text
@d1448 3
d1454 6
a1459 23
	cd stageprofile-gcc && \
	  { find . -type d | sort | sed 's,.*,$(SHELL) '"$$s"'/mkinstalldirs "../gcc/&",' | $(SHELL); } && \
	  { find . -name '*.*da' | sed 's,.*,$(LN) -f "&" "../gcc/&",' | $(SHELL); }

# FIXME: Will not need to be conditional when toplevel bootstrap is the
# only possibility, but now it conflicts with no-bootstrap rules
@@if gcc-bootstrap
profiledbootstrap:
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo "Bootstrapping the compiler"; \
	$(MAKE) stageprofile-bubble distclean-stagefeedback
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	echo "Building runtime libraries and training compiler"; \
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo "Building feedback based compiler"; \
	$(MAKE) stagefeedback-bubble stagefeedback-end
@@endif gcc-bootstrap
@


1.134
log
@2005-05-04  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (POSTSTAGE1_HOST_EXPORTS): Rename from
	STAGE_HOST_EXPORTS.
	(configure, all): Add bootstrap support.
	(Host modules, target modules): Pass post-stage1 flags and exports.
	(Top-level bootstrap): Remove bootstrap rules, expanded elsewhere.
	* Makefile.in: Regenerate.
@
text
@d1343 1
a1343 1
	$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)[+
d1352 10
a1361 1
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]
d1370 8
a1377 1
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]
d1486 4
a1489 1
[+ FOR target_modules +]
a1556 1
		  (=* (dep-module "on") "target-")
d1570 4
@


1.133
log
@2005-04-06  Paolo Bonzini  <bonzini@@gnu.org>

        * Makefile.tpl (BUILD_CONFIGARGS): Include --with-build-subdir.
	(TARGET_CONFIGARGS): Include --with-target-subdir.
	(configure, all): New macros.  Use them throughout.
@
text
@d164 1
a164 1
STAGE_HOST_EXPORTS = \
d851 29
d897 35
d948 3
a950 1
[+ configure prefix="" subdir="$(HOST_SUBDIR)" exports="$(HOST_EXPORTS)"
d953 5
a957 2
[+ all prefix="" subdir="$(HOST_SUBDIR)" exports="$(HOST_EXPORTS)"
       args="$(FLAGS_TO_PASS)" +]
d1343 1
a1343 1
	$(mkinstalldirs) $(HOST_SUBDIR)[+
a1376 4
all-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\
  maybe-all-stage[+id+]-[+module+][+
ENDIF bootstrap+] [+ ENDFOR host_modules +]

a1377 59
clean-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\
  maybe-clean-stage[+id+]-[+module+][+
ENDIF bootstrap+] [+ ENDFOR host_modules +]

[+ FOR host_modules +][+ IF bootstrap +]
.PHONY: configure-stage[+id+]-[+module+] maybe-configure-stage[+id+]-[+module+]
.PHONY: all-stage[+id+]-[+module+] maybe-all-stage[+id+]-[+module+]
.PHONY: clean-stage[+id+]-[+module+] maybe-clean-stage[+id+]-[+module+]

maybe-configure-stage[+id+]-[+module+]:
maybe-all-stage[+id+]-[+module+]:
maybe-clean-stage[+id+]-[+module+]:

@@if [+module+]-bootstrap
maybe-configure-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]
configure-stage[+id+]-[+module+]:
	@@$(MAKE) stage[+id+]-start
	@@[ -f [+module+]/Makefile ] && exit 0 || : ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \
	$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \
	$(HOST_EXPORTS) [+ ENDIF prev +] \
	echo Configuring stage [+id+] in [+module+] ; \
	cd $(HOST_SUBDIR)/[+module+] || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir=`echo $(HOST_SUBDIR)/[+module+]/ | \
		sed -e 's,\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \
	esac; \
	srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	libsrcdir="$$s/[+module+]"; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} \
	  [+stage_configure_flags+] [+extra_configure_flags+]

maybe-all-stage[+id+]-[+module+]: all-stage[+id+]-[+module+]
all-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]
	@@$(MAKE) stage[+id+]-start
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \
	$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \
	$(HOST_EXPORTS) [+ ENDIF prev +] \
	cd $(HOST_SUBDIR)/[+module+] && \
	$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \
		$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \
		[+stage_make_flags+] [+extra_make_flags+]

maybe-clean-stage[+id+]-[+module+]: clean-stage[+id+]-[+module+]
clean-stage[+id+]-[+module+]:
	@@[ -f [+module+]/Makefile ] || [ -f stage[+id+]-[+module+]/Makefile ] \
	  || exit 0 ; \
	[ -f [+module+]/Makefile ] || $(MAKE) stage[+id+]-start ; \
	cd $(HOST_SUBDIR)/[+module+] && \
	$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \
		$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \
		[+stage_make_flags+] [+extra_make_flags+] clean
@@endif [+module+]-bootstrap

[+ ENDIF bootstrap +][+ ENDFOR host_modules +]
@


1.132
log
@2005-04-05  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl: Sync with gcc.
	* Makefile.in: Regenerate.
@
text
@d96 1
a96 1
BUILD_CONFIGARGS = @@build_configargs@@
d181 1
a181 1
TARGET_CONFIGARGS = @@target_configargs@@
d821 13
a833 11
# --------------------------------------
# Modules which run on the build machine
# --------------------------------------
[+ FOR build_modules +]
.PHONY: configure-build-[+module+] maybe-configure-build-[+module+]
maybe-configure-build-[+module+]:
@@if build-[+module+]
maybe-configure-build-[+module+]: configure-build-[+module+]
configure-build-[+module+]:
	@@test ! -f $(BUILD_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(BUILD_SUBDIR)/[+module+] ; \
d836 3
a838 3
	$(BUILD_EXPORTS) \
	echo Configuring in $(BUILD_SUBDIR)/[+module+]; \
	cd "$(BUILD_SUBDIR)/[+module+]" || exit 1; \
d841 1
a841 1
	  *) topdir=`echo $(BUILD_SUBDIR)/[+module+]/ | \
d846 3
a848 4
	rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	  $(BUILD_CONFIGARGS) $${srcdiroption} \
	  --with-build-subdir="$(BUILD_SUBDIR)" [+extra_configure_flags+] \
d850 2
a851 1
@@endif build-[+module+]
d853 10
a862 7
.PHONY: all-build-[+module+] maybe-all-build-[+module+]
maybe-all-build-[+module+]:
@@if build-[+module+]
TARGET-build-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-build-[+module+]: all-build-[+module+]
all-build-[+module+]: configure-build-[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
d864 15
a878 5
	$(BUILD_EXPORTS) \
	(cd $(BUILD_SUBDIR)/[+module+] && \
	  $(MAKE) [+extra_make_flags+] $(TARGET-build-[+module+]))
@@endif build-[+module+]
[+ ENDFOR build_modules +]
d884 2
a885 24
.PHONY: configure-[+module+] maybe-configure-[+module+]
maybe-configure-[+module+]:
@@if [+module+]
maybe-configure-[+module+]: configure-[+module+]
configure-[+module+]:
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]test ! -f $(HOST_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/[+module+] ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo Configuring in [+module+]; \
	cd $(HOST_SUBDIR)/[+module+] || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir=`echo $(HOST_SUBDIR)/[+module+]/ | \
		sed -e 's,\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \
	esac; \
	srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	libsrcdir="$$s/[+module+]"; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} [+extra_configure_flags+] \
	  || exit 1
@@endif [+module+]
d887 2
a888 13
.PHONY: all-[+module+] maybe-all-[+module+]
maybe-all-[+module+]:
@@if [+module+]
TARGET-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-[+module+]: all-[+module+]
all-[+module+]: configure-[+module+]
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	(cd $(HOST_SUBDIR)/[+module+] && \
	  $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] $(TARGET-[+module+]))
@@endif [+module+]
a969 4
.PHONY: configure-target-[+module+] maybe-configure-target-[+module+]
maybe-configure-target-[+module+]:
@@if target-[+module+]
maybe-configure-target-[+module+]: configure-target-[+module+]
d972 1
a976 25

configure-target-[+module+]: $(TARGET_SUBDIR)/[+module+]/multilib.out
	@@test ! -f $(TARGET_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	echo Configuring in $(TARGET_SUBDIR)/[+module+]; \
	cd "$(TARGET_SUBDIR)/[+module+]" || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir=`echo $(TARGET_SUBDIR)/[+module+]/ | \
		sed -e 's,\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \
	esac; \
	srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	libsrcdir="$$s/[+module+]"; \
	rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	  $(TARGET_CONFIGARGS) $${srcdiroption} \
	  --with-target-subdir="$(TARGET_SUBDIR)" [+extra_configure_flags+] \
	  || exit 1
d979 19
a997 20
.PHONY: all-target-[+module+] maybe-all-target-[+module+]
maybe-all-target-[+module+]:
@@if target-[+module+]
TARGET-target-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-target-[+module+]: all-target-[+module+]
all-target-[+module+]: configure-target-[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+
	    IF raw_cxx 
	  +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ 
	    ENDIF raw_cxx 
	  +] [+extra_make_flags+] $(TARGET-target-[+module+]))
@@endif target-[+module+]
@


1.131
log
@2005-02-28  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (bfd, opcodes, libstdc++-v3, libmudflap): Set lib_path.
	* Makefile.tpl (SET_LIB_PATH, REALLY_SET_LIB_PATH): Remove.
	(HOST_EXPORTS, STAGE_HOST_EXPORTS, TARGET_EXPORTS): Set $(RPATH_ENVVAR).
	(HOST_LIB_PATH): Generate from Makefile.def.
	(TARGET_LIB_PATH): Likewise.
	(Old bootstrap targets): Include TARGET_LIB_PATH into RPATH_ENVVAR.
	* Makefile.in: Regenerate.
	* configure.in (set_lib_path, SET_LIB_PATH, SET_GCC_LIB_PATH): Remove.
	(RPATH_ENVVAR): Include Darwin case.
	* configure: Regenerate.

config:
2005-02-28  Paolo Bonzini  <bonzini@@gnu.org>

	* config/gcc-lib-path.m4: Remove.
@
text
@d96 1
a96 1
BUILD_CONFIGARGS = @@build_configargs@@ --with-build-subdir="$(BUILD_SUBDIR)"
d181 1
a181 1
TARGET_CONFIGARGS = @@target_configargs@@ --with-target-subdir="$(TARGET_SUBDIR)"
d821 11
a831 13
# ------------------------------------
# Macros for configure and all targets
# ------------------------------------

[+ DEFINE configure +]
.PHONY: configure-[+prefix+][+module+] maybe-configure-[+prefix+][+module+]
maybe-configure-[+prefix+][+module+]:
@@if [+prefix+][+module+]
maybe-configure-[+prefix+][+module+]: configure-[+prefix+][+module+]
configure-[+prefix+][+module+]: [+deps+]
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \
d834 3
a836 3
	[+exports+] \
	echo Configuring in [+subdir+]/[+module+]; \
	cd "[+subdir+]/[+module+]" || exit 1; \
d839 1
a839 1
	  *) topdir=`echo [+subdir+]/[+module+]/ | \
d844 4
a847 3
	[+ IF no-config-site +]rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file [+ ENDIF +]$(SHELL) $${libsrcdir}/configure \
	  [+args+] $${srcdiroption} [+extra_configure_flags+] \
d849 1
a849 2
@@endif [+prefix+][+module+]
[+ ENDDEF +]
d851 7
a857 10
[+ DEFINE all +]
.PHONY: all-[+prefix+][+module+] maybe-all-[+prefix+][+module+]
maybe-all-[+prefix+][+module+]:
@@if [+prefix+][+module+]
TARGET-[+prefix+][+module+]=[+
  IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-[+prefix+][+module+]: all-[+prefix+][+module+]
all-[+prefix+][+module+]: configure-[+prefix+][+module+]
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \
d859 5
a863 15
	[+exports+] \
	(cd [+subdir+]/[+module+] && \
	  $(MAKE) [+args+] [+extra_make_flags+] $(TARGET-[+prefix+][+module+]))
@@endif [+prefix+][+module+]
[+ ENDDEF +]

# --------------------------------------
# Modules which run on the build machine
# --------------------------------------
[+ FOR build_modules +]
[+ configure prefix="build-" subdir="$(BUILD_SUBDIR)" exports="$(BUILD_EXPORTS)"
	     args="$(BUILD_CONFIGARGS)" no-config-site=true +]

[+ all prefix="build-" subdir="$(BUILD_SUBDIR)" exports="$(BUILD_EXPORTS)" +]
[+ ENDFOR build_module +]
d869 24
a892 2
[+ configure prefix="" subdir="$(HOST_SUBDIR)" exports="$(HOST_EXPORTS)"
	     args="$(HOST_CONFIGARGS)" +]
d894 13
a906 2
[+ all prefix="" subdir="$(HOST_SUBDIR)" exports="$(HOST_EXPORTS)"
       args="$(FLAGS_TO_PASS)" +]
d988 4
a993 1
@@if target-[+module+]
d998 25
d1025 20
a1044 19
[+ IF raw_cxx +]
[+ configure prefix="target-" subdir="$(TARGET_SUBDIR)"
	     deps=(string-append "$(TARGET_SUBDIR)/" (get "module") "/multilib.out")
	     exports="$(RAW_CXX_TARGET_EXPORTS)"
	     args="$(TARGET_CONFIGARGS)" no-config-site=true +]

[+ all prefix="target-" subdir="$(TARGET_SUBDIR)"
       exports="$(RAW_CXX_TARGET_EXPORTS)"
       args="$(TARGET_FLAGS_TO_PASS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'" +]
[+ ELSE +]
[+ configure prefix="target-" subdir="$(TARGET_SUBDIR)"
	     deps=(string-append "$(TARGET_SUBDIR)/" (get "module") "/multilib.out")
	     exports="$(NORMAL_TARGET_EXPORTS)"
	     args="$(TARGET_CONFIGARGS)" no-config-site=true +]

[+ all prefix="target-" subdir="$(TARGET_SUBDIR)"
       exports="$(NORMAL_TARGET_EXPORTS)"
       args="$(TARGET_FLAGS_TO_PASS)" +]
[+ ENDIF +]
@


1.130
log
@top:
	* Makefile.def: Remove libstdcxx_incdir, libsubdir, gxx_include_dir,
	gcc_version, and gcc_version_trigger from set of flags to pass.
	* Makefile.tpl: Remove definitions of above variables.
	(config.status): Remove dependency on $(gcc_version_trigger).
	* Makefile.in: Regenerate.
	* configure.in: Do not reference config/gcc-version.m4 nor
	config/gxx-include-dir.m4.  Do not invoke TL_AC_GCC_VERSION nor
	TL_AC_GXX_INCLUDE_DIR.  Do not set gcc_version_trigger.
	* configure: Regenerate.
config:
	* gxx-include-dir.m4: In all substitutions, leave $(gcc_version)
	to be expanded by the Makefile.
@
text
@a89 11
# This is set by configure to REALLY_SET_LIB_PATH if --enable-shared
# was used.
SET_LIB_PATH = @@SET_LIB_PATH@@

# configure.in sets SET_LIB_PATH to this if --enable-shared was used.
# Some platforms don't like blank entries, so we remove duplicate,
# leading and trailing colons.
REALLY_SET_LIB_PATH = \
  @@SET_GCC_LIB_PATH@@ \
  $(RPATH_ENVVAR)=`echo "$(HOST_LIB_PATH):$(TARGET_LIB_PATH):$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);

d96 1
a96 1
BUILD_CONFIGARGS = @@build_configargs@@
d161 1
a161 2
	SET_GCC_LIB_PATH_CMD="@@SET_GCC_LIB_PATH@@"; export SET_GCC_LIB_PATH_CMD; \
	@@SET_GCC_LIB_PATH@@
d165 1
d181 1
a181 1
TARGET_CONFIGARGS = @@target_configargs@@
d201 1
a201 2
	SET_GCC_LIB_PATH_CMD="@@SET_GCC_LIB_PATH@@"; export SET_GCC_LIB_PATH_CMD; \
	@@SET_GCC_LIB_PATH@@
a306 4
# This is the list of directories that may be needed in RPATH_ENVVAR
# so that programs built for the host machine work.
HOST_LIB_PATH = $$r/$(HOST_SUBDIR)/bfd:$$r/$(HOST_SUBDIR)/opcodes

a336 4
# This is the list of directories that may be needed in RPATH_ENVVAR
# so that prorgams built for the target machine work.
TARGET_LIB_PATH = $$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs:$$r/$(TARGET_SUBDIR)/libmudflap/.libs

d484 31
a777 1
		$(SET_LIB_PATH) \
d821 13
a833 11
# --------------------------------------
# Modules which run on the build machine
# --------------------------------------
[+ FOR build_modules +]
.PHONY: configure-build-[+module+] maybe-configure-build-[+module+]
maybe-configure-build-[+module+]:
@@if build-[+module+]
maybe-configure-build-[+module+]: configure-build-[+module+]
configure-build-[+module+]:
	@@test ! -f $(BUILD_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(BUILD_SUBDIR)/[+module+] ; \
d836 3
a838 3
	$(BUILD_EXPORTS) \
	echo Configuring in $(BUILD_SUBDIR)/[+module+]; \
	cd "$(BUILD_SUBDIR)/[+module+]" || exit 1; \
d841 1
a841 1
	  *) topdir=`echo $(BUILD_SUBDIR)/[+module+]/ | \
d846 3
a848 4
	rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	  $(BUILD_CONFIGARGS) $${srcdiroption} \
	  --with-build-subdir="$(BUILD_SUBDIR)" [+extra_configure_flags+] \
d850 2
a851 1
@@endif build-[+module+]
d853 10
a862 7
.PHONY: all-build-[+module+] maybe-all-build-[+module+]
maybe-all-build-[+module+]:
@@if build-[+module+]
TARGET-build-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-build-[+module+]: all-build-[+module+]
all-build-[+module+]: configure-build-[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
d864 15
a878 5
	$(BUILD_EXPORTS) \
	(cd $(BUILD_SUBDIR)/[+module+] && \
	  $(MAKE) [+extra_make_flags+] $(TARGET-build-[+module+]))
@@endif build-[+module+]
[+ ENDFOR build_modules +]
d884 2
a885 24
.PHONY: configure-[+module+] maybe-configure-[+module+]
maybe-configure-[+module+]:
@@if [+module+]
maybe-configure-[+module+]: configure-[+module+]
configure-[+module+]:
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]test ! -f $(HOST_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(HOST_SUBDIR)/[+module+] ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo Configuring in [+module+]; \
	cd $(HOST_SUBDIR)/[+module+] || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir=`echo $(HOST_SUBDIR)/[+module+]/ | \
		sed -e 's,\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \
	esac; \
	srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	libsrcdir="$$s/[+module+]"; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} [+extra_configure_flags+] \
	  || exit 1
@@endif [+module+]
d887 2
a888 14
.PHONY: all-[+module+] maybe-all-[+module+]
maybe-all-[+module+]:
@@if [+module+]
TARGET-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-[+module+]: all-[+module+]
all-[+module+]: configure-[+module+]
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	$(HOST_EXPORTS) \
	(cd $(HOST_SUBDIR)/[+module+] && \
	  $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] $(TARGET-[+module+]))
@@endif [+module+]
a901 1
	  $(SET_LIB_PATH) \
a909 1
	$(SET_LIB_PATH) \
a925 1
	$(SET_LIB_PATH) \
a948 1
	$(SET_LIB_PATH) \
a969 4
.PHONY: configure-target-[+module+] maybe-configure-target-[+module+]
maybe-configure-target-[+module+]:
@@if target-[+module+]
maybe-configure-target-[+module+]: configure-target-[+module+]
d972 1
a976 26

configure-target-[+module+]: $(TARGET_SUBDIR)/[+module+]/multilib.out
	@@test ! -f $(TARGET_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	echo Configuring in $(TARGET_SUBDIR)/[+module+]; \
	cd "$(TARGET_SUBDIR)/[+module+]" || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir=`echo $(TARGET_SUBDIR)/[+module+]/ | \
		sed -e 's,\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \
	esac; \
	srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	libsrcdir="$$s/[+module+]"; \
	rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	  $(TARGET_CONFIGARGS) $${srcdiroption} \
	  --with-target-subdir="$(TARGET_SUBDIR)" [+extra_configure_flags+] \
	  || exit 1
d979 19
a997 21
.PHONY: all-target-[+module+] maybe-all-target-[+module+]
maybe-all-target-[+module+]:
@@if target-[+module+]
TARGET-target-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-target-[+module+]: all-target-[+module+]
all-target-[+module+]: configure-target-[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+
	    IF raw_cxx 
	  +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ 
	    ENDIF raw_cxx 
	  +] [+extra_make_flags+] $(TARGET-target-[+module+]))
@@endif target-[+module+]
d1009 1
a1009 2
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \[+
d1034 1
a1034 2
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \[+
d1061 1
a1061 2
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \[+
a1096 1
	$(SET_LIB_PATH) \
d1099 1
a1116 1
	$(SET_LIB_PATH) \
a1121 1
	$(SET_LIB_PATH) \
a1127 1
	$(SET_LIB_PATH) \
d1129 1
a1133 1
	$(SET_LIB_PATH) \
a1138 1
	$(SET_LIB_PATH) \
a1145 1
	$(SET_LIB_PATH) \
a1150 1
	$(SET_LIB_PATH) \
a1160 1
	  $(SET_LIB_PATH) \
a1183 1
	  $(SET_LIB_PATH) \
a1438 1
	$(SET_LIB_PATH) \
a1443 1
	$(SET_LIB_PATH) \
a1447 1
	$(SET_LIB_PATH) \
@


1.129
log
@* Makefile.tpl (check-[+module+]): Fix shell statement inside if ... fi.
* Makefile.in: Regenerate.
@
text
@a77 4
# The file containing GCC's version number.
gcc_version_trigger = @@gcc_version_trigger@@
gcc_version = @@gcc_version@@

a80 3
gxx_include_dir = @@gxx_include_dir@@
libstdcxx_incdir = @@libstdcxx_incdir@@

a83 2
# Directory in which the compiler finds executables, libraries, etc.
libsubdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)
d1667 1
a1667 1
config.status: configure $(gcc_version_trigger)
@


1.128
log
@2005-02-28  Andrew Pinski  <pinskia@@physics.uc.edu>

        PR bootstrap/20250
        * Makefile.tpl (HOST target installs): Fix copy and pasto, use install
        instead of check.
        * Makefile.in: Regenerate.
@
text
@d923 1
a923 1
	    $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] check)
@


1.127
log
@2005-02-28  Paolo Bonzini  <bonzini@@gnu.org>

	Sync from gcc.

	2005-02-28  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/17383
	* Makefile.def (target_modules): Remove "stage", now unnecessary.
	* Makefile.tpl (HOST_SUBDIR): New substitution.
	(STAGE_HOST_EXPORTS, EXPECT, HOST_LIB_PATH, USUAL_AR_FOR_TARGET,
	USUAL_AS_FOR_TARGET, USUAL_DLLTOOL_FOR_TARGET, USUAL_GCC_FOR_TARGET,
	USUAL_LD_FOR_TARGET, USUAL_NM_FOR_TARGET, USUAL_OBJDUMP_FOR_TARGET,
	USUAL_RANLIB_FOR_TARGET, USUAL_WINDRES_FOR_TARGET): Use it.
	(Host modules, Bootstrapped modules): Use it.
	(Build modules, Target modules): Do not create symlink trees,
	always configure out-of-srcdir.
	(distclean): Try removing $(host_subdir) with rm before using rm -rf.
	* configure.in (FLAGS_FOR_TARGET, CC_FOR_TARGET, GCJ_FOR_TARGET,
	GFORTRAN_FOR_TARGET, CXX_FOR_TARGET, RAW_CXX_FOR_TARGET): Use
	$(HOST_SUBDIR).  Create a symlink for host_subdir.

	* Makefile.in: Regenerate.
	* configure: Regenerate.

	Merged from libada-gnattools-branch:
	2004-11-28  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.def: Add gnattools as a module, depending on target-libada.
	* Makefile.in: Regenerate.
	* configure.in: Include gnattools in host_tools; disable it if ada
	is disabled.
	* configure: Regenerate.

config:
2005-02-28  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/17383
	* acx.m4 (GCC_TOPLEV_SUBDIRS): Set HOST_SUBDIR if an in-src
	gcc build is going.
@
text
@d949 1
a949 1
	  $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] check)
@


1.126
log
@2005-01-13  Kelley Cook  <kcook@@gcc.gnu.org>

	PR bootstrap/18222
	* Makefile.def: Pass CPPFLAGS_FOR_TARGET.
	* Makefile.tpl: Define target CPPFLAGS on CPPFLAGS_FOR_TARGET.
	* Makefile.in: Regenerate.
@
text
@d155 3
d187 6
a192 2
	CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC; \
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC_FOR_BUILD;
d315 3
a317 2
EXPECT = `if [ -f $$r/expect/expect ] ; \
	then echo $$r/expect/expect ; \
d330 1
a330 1
HOST_LIB_PATH = $$r/bfd:$$r/opcodes
d371 2
a372 2
  if [ -f $$r/binutils/ar ] ; then \
    echo $$r/binutils/ar ; \
d384 3
a386 3
  if [ -f $$r/gas/as-new ] ; then \
    echo $$r/gas/as-new ; \
  elif [ -f $$r/gcc/xgcc ]; then \
d407 2
a408 1
USUAL_GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) $$r/gcc/xgcc -B$$r/gcc/ $(FLAGS_FOR_TARGET)
d421 2
a422 2
  if [ -f $$r/binutils/dlltool ] ; then \
    echo $$r/binutils/dlltool ; \
d437 3
a439 3
  if [ -f $$r/ld/ld-new ] ; then \
    echo $$r/ld/ld-new ; \
  elif [ -f $$r/gcc/xgcc ]; then \
d454 3
a456 3
  if [ -f $$r/binutils/nm-new ] ; then \
    echo $$r/binutils/nm-new ; \
  elif [ -f $$r/gcc/xgcc ]; then \
d469 2
a470 2
  if [ -f $$r/binutils/ranlib ] ; then \
    echo $$r/binutils/ranlib ; \
d486 2
a487 2
  if [ -f $$r/binutils/windres ] ; then \
    echo $$r/binutils/windres ; \
d682 3
d837 3
a839 7
	  /* | [A-Za-z]:[\\/]*) \
	    topdir=$(srcdir) ;; \
	  *) \
	    case "$(BUILD_SUBDIR)" in \
	      .) topdir="../$(srcdir)" ;; \
	      *) topdir="../../$(srcdir)" ;; \
	    esac ;; \
d841 2
a842 24
	if [ "$(srcdir)" = "." ] ; then \
	  if [ "$(BUILD_SUBDIR)" != "." ] ; then \
	    if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	      if [ -f Makefile ]; then \
	        if $(MAKE) distclean; then \
	          true; \
	        else \
	          exit 1; \
	        fi; \
	      else \
	        true; \
	      fi; \
	    else \
	      exit 1; \
	    fi; \
	  else \
	    true; \
	  fi; \
	  srcdiroption="--srcdir=."; \
	  libsrcdir="."; \
	else \
	  srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	  libsrcdir="$$s/[+module+]"; \
	fi; \
d874 2
a875 2
	[+ ENDIF bootstrap +]test ! -f [+module+]/Makefile || exit 0; \
	[ -d [+module+] ] || mkdir [+module+]; \
d880 1
a880 1
	cd [+module+] || exit 1; \
d882 3
a884 9
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
d886 2
d904 2
a905 2
	(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS) [+extra_make_flags+] \
	  $(TARGET-[+module+]))
d922 2
a923 2
	  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS) [+ 
	    extra_make_flags+] check); \
d931 2
a932 2
	(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	  extra_make_flags+] check)
d948 2
a949 2
	(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	  extra_make_flags+] install)
d976 1
a976 1
	(cd [+module+] && \
d1017 6
a1022 32
	  /* | [A-Za-z]:[\\/]*) \
	    topdir=$(srcdir) ;; \
	  *) \
	    case "$(TARGET_SUBDIR)" in \
	      .) topdir="../$(srcdir)" ;; \
	      *) topdir="../../$(srcdir)" ;; \
	    esac ;; \
	esac; \[+ IF stage +]
	if [ "$(srcdir)" = "." ] ; then \
	  if [ "$(TARGET_SUBDIR)" != "." ] ; then \
	    if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	      if [ -f Makefile ]; then \
	        if $(MAKE) distclean; then \
	          true; \
	        else \
	          exit 1; \
	        fi; \
	      else \
	        true; \
	      fi; \
	    else \
	      exit 1; \
	    fi; \
	  else \
	    true; \
	  fi; \
	  srcdiroption="--srcdir=."; \
	  libsrcdir="."; \
	else \[+ ENDIF stage +]
	  srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	  libsrcdir="$$s/[+module+]"; \[+ IF stage +]
	fi; \[+ ENDIF stage +]
d1337 3
a1339 1
	echo stage[+id+] > stage_last[+ FOR host_modules +][+ IF bootstrap +]
d1341 6
a1346 3
	@@[ -d stage[+id+]-[+module+] ] || mkdir stage[+id+]-[+module+]; \
	set stage[+id+]-[+module+] [+module+] ; @@CREATE_LINK_TO_DIR@@ [+ IF prev +] ; \
	set stage[+prev+]-[+module+] prev-[+module+] ; @@CREATE_LINK_TO_DIR@@ [+ ENDIF prev +]
d1352 4
a1355 2
	@@set [+module+] stage[+id+]-[+module+] ; @@UNDO_LINK_TO_DIR@@ [+ IF prev +] ; \
	set prev-[+module+] stage[+prev+]-[+module+] ; @@UNDO_LINK_TO_DIR@@ [+ ENDIF prev +]
d1400 1
a1400 1
	cd [+module+] || exit 1; \
d1402 3
a1404 9
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
d1406 2
d1419 1
a1419 1
	cd [+module+] && \
d1429 1
a1429 1
	cd [+module+] && \
@


1.125
log
@2005-01-03  Paolo Bonzini  <bonzini@@gnu.org>

	Revert 2004-12-28 Makefile changes, a better fix will be
	applied to mainline and src after GCC 4.0 branches.
@
text
@d204 1
a204 1
	CPPFLAGS="$(CFLAGS_FOR_TARGET)"; export CPPFLAGS; \
@


1.124
log
@2004-12-28  Paolo Bonzini  <bonzini@@gnu.org>

	PR bootstrap/17383

	* Makefile.def (target_modules): Remove stage parameter,
	it is always true now.
	* Makefile.tpl (configure-build-[+module+],
	configure-target-[+module+]): Always build symlink tree
	for the directory and for include.  BUILD_SUBDIR and
	TARGET_SUBDIR cannot be . anymore.
	* Makefile.in: Regenerate.
@
text
@d825 7
a831 2
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir="../../$(srcdir)" ;; \
d834 9
a842 3
	  if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	    if [ -f Makefile ]; then \
	      if $(MAKE) distclean; then \
a843 2
	      else \
	        exit 1; \
d846 1
a846 1
	      true; \
a848 3
	    exit 1; \
	  fi; \
	  if [ -d ../include ] ; then \
a849 5
	  else \
	    mkdir ../include; \
	    cd ../include; \
	    $(SHELL) $$s/symlink-tree $${topdir}/include "no-such-file"; \
	    cd ../[+module+]; \
d1035 8
a1042 3
	  /* | [A-Za-z]:[\\/]*) topdir=$(srcdir) ;; \
	  *) topdir="../../$(srcdir)" ;; \
	esac; \
d1044 9
a1052 3
	  if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	    if [ -f Makefile ]; then \
	      if $(MAKE) distclean; then \
a1053 2
	      else \
	        exit 1; \
d1056 1
a1056 1
	      true; \
a1058 3
	    exit 1; \
	  fi; \
	  if [ -d ../include ] ; then \
a1059 5
	  else \
	    mkdir ../include; \
	    cd ../include; \
	    $(SHELL) $$s/symlink-tree $${topdir}/include "no-such-file"; \
	    cd ../[+module+]; \
d1063 1
a1063 1
	else \
d1065 2
a1066 2
	  libsrcdir="$$s/[+module+]"; \
	fi; \
@


1.123
log
@Revert 2004-12-08 Makefile changes.
@
text
@d825 2
a826 7
	  /* | [A-Za-z]:[\\/]*) \
	    topdir=$(srcdir) ;; \
	  *) \
	    case "$(BUILD_SUBDIR)" in \
	      .) topdir="../$(srcdir)" ;; \
	      *) topdir="../../$(srcdir)" ;; \
	    esac ;; \
d829 4
a832 8
	  if [ "$(BUILD_SUBDIR)" != "." ] ; then \
	    if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	      if [ -f Makefile ]; then \
	        if $(MAKE) distclean; then \
	          true; \
	        else \
	          exit 1; \
	        fi; \
d834 1
a834 1
	        true; \
d837 1
a837 1
	      exit 1; \
d840 3
d844 5
d1034 3
a1036 8
	  /* | [A-Za-z]:[\\/]*) \
	    topdir=$(srcdir) ;; \
	  *) \
	    case "$(TARGET_SUBDIR)" in \
	      .) topdir="../$(srcdir)" ;; \
	      *) topdir="../../$(srcdir)" ;; \
	    esac ;; \
	esac; \[+ IF stage +]
d1038 4
a1041 8
	  if [ "$(TARGET_SUBDIR)" != "." ] ; then \
	    if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	      if [ -f Makefile ]; then \
	        if $(MAKE) distclean; then \
	          true; \
	        else \
	          exit 1; \
	        fi; \
d1043 1
a1043 1
	        true; \
d1046 1
a1046 1
	      exit 1; \
d1049 3
d1053 5
d1061 1
a1061 1
	else \[+ ENDIF stage +]
d1063 2
a1064 2
	  libsrcdir="$$s/[+module+]"; \[+ IF stage +]
	fi; \[+ ENDIF stage +]
@


1.122
log
@	* Makefile.def (flags_to_pass): Add PICFLAG_FOR_TARGET.
	* Makefile.tpl (EXTRA_HOST_FLAGS): Add PICFLAG.
	(EXTRA_TARGET_FLAGS): Add PICFLAG.
	* Makefile.in: Regenerate.
@
text
@a530 1
	'PICFLAG=$(PICFLAG)' \
a562 1
	'PICFLAG=$$(PICFLAG_FOR_TARGET)' \
@


1.121
log
@* Makefile.tpl: Generate normal dependencies if the LHS module is
not bootstrapped.
* Makefile.in: Regenerate.
@
text
@d531 1
d564 1
@


1.120
log
@2004-12-02  Eric Christopher  <echristo@@redhat.com>

        * Makefile.tpl (clean-target-libgcc): Add stmp-dirs to list of
	things to remove.
        * Makefile.in: Regenerate.
@
text
@d1628 2
a1629 2
   ;; dep-kind returns "normal" is the dependency is on an "install" target,
   ;; or if the LHS module is not bootstrapped.  It returns "bootstrap" for
d1641 2
a1642 1
		  (not (hash-ref boot-modules (dep-module "module"))))
@


1.119
log
@        * Makefile.def: Add html support.
        * Makefile.tpl: Likewise.
        * Makefile.in: Regenerate.
@
text
@d697 1
@


1.118
log
@2004-10-06  Paolo Bonzini  <bonzini@@gnu.org>

	Fix wrong conflict resolution in:

	2004-08-16  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.in: Regenerate.
	* Makefile.tpl (Autogenerated `all-*' targets): Invoke $(TARGET-*)
	in the recursive `make', instead of hardwiring `all'.
	(Autogenerated TARGET-* variables): New.
@
text
@d645 1
a645 1
.PHONY: info installcheck dvi install-info
d651 1
@


1.117
log
@2004-09-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.tpl (REALLY_SET_LIB_PATH): Add @@SET_GCC_LIB_PATH@@.
	(HOST_EXPORTS]): Add @@SET_GCC_LIB_PATH@@. Set and export
	SET_GCC_LIB_PATH_CMD.
	(BASE_TARGET_EXPORTS): Likewise.
	* Makefile.in: Regenerated.

	* configure.in (SET_GCC_LIB_PATH): Set and substitute.
	* configure: Regenerated.

config/

2004-09-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* gcc-lib-path.m4: New file.
@
text
@d912 1
d920 2
a921 7
	(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	  IF with_x 
	    +] $(X11_FLAGS_TO_PASS)[+ 
	  ENDIF with_x +] [+extra_make_flags+] [+
	  IF (== (get "module") "gcc") +] \
	    `if [ -f gcc/stage_last ]; then echo quickstrap ; else echo all; fi` [+
	  ELSE +]all[+ ENDIF +])
@


1.116
log
@2004-09-09  Daniel Berlin  <dberlin@@dberlin.org>

	* Makefile.def: Remove libbanshee.
	* Makefile.tpl: Ditto.
	* configure.in: Ditto.
	* Makefile.in: Regen.
	* configure: Ditto.
@
text
@d107 1
d177 3
a179 1
	GMPINC="$(HOST_GMPINC)"; export GMPINC;
d213 3
a215 1
	WINDRES="$(WINDRES_FOR_TARGET)"; export WINDRES;
@


1.115
log
@2004-09-01  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (sorry): Remove.
	(clean-stage[+id+], clean-stage[+id+]-module): New targets.
	(cleanstrap targets): Depend on distclean, not distclean-stage1.
	(do-clean): Clean per-stage directories too.
	(do-distclean): Run distclean-stage1 too.
	(.NOTPARALLEL): Enable during toplevel bootstrap.
	(stage[+id+]-bubble): Enable parallel execution during
	the recursive invocation.
	* Makefile.in: Regenerate.

	Sync from gcc (moving the Makefile.in change to Makefile.tpl):

	2004-08-31  Robert Bowdidge <bowdidge@@apple.com>

	* Makefile.in: Move BOOT_CFLAGS above host makefile fragment include.
	* configure.in: add test for powerpc-*-darwin* to specify makefile frag
	* configure: regenerate
	* config/mh-ppc-darwin: create file, override BOOT_CFLAGS for
        -mdynamic-no-pic
@
text
@d110 1
a110 1
BUILD_CONFIGDIRS = libiberty libbanshee
@


1.114
log
@2004-08-26  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (bootstrap stages): Add 'lean' parameter.
	* Makefile.tpl (configure-stageN-*, all-stageN-*): Turned into
	phony targets; do not generate timestamp files.
	(distclean-stageN): Remove references to their timestamp files.
	(restageN, touch-stageN): Remove.
	(stageN-bubble): Rewritten.
	(compare): Support lean bootstraps.
	* Makefile.in: Regenerate.

	* configure.in: Only warn when bootstrapping but
	build != host or build != target.  Support lean bootstraps.
	* configure: Regenerate.

	Sync from gcc:
	2004-08-26  Phil Edwards  <phil@@codesourcery.com>

	* configure.in:  Give a better error message if GMP/MPFR are missing
	and a language needing them has been requested.
	* configure:  Regenerated.

	2004-08-25  Phil Edwards  <phil@@codesourcery.com>

	* configure.in:  Print a list of available language front-ends if
	a requested one is missing.  Tidy stray tab characters.
	* configure:  Regenerated.
@
text
@d251 4
a487 8
@@if gcc-bootstrap
# Let's leave this as the first rule in the file until toplevel
# bootstrap is fleshed out completely.
sorry:
	@@echo Toplevel bootstrap temporarily out of commission.
	@@echo Please reconfigure without --enable-bootstrap
@@endif gcc-bootstrap

d1337 3
a1339 1
# Bugs: This is almost certainly not parallel-make safe.
a1356 1
BOOT_CFLAGS= -g -O2
d1402 1
a1402 1
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage[+id+]; \
d1405 1
a1405 1
.PHONY: all-stage[+id+]
d1410 5
d1418 1
d1422 1
d1461 10
d1472 1
d1512 2
a1514 3

# Rules to wipe a stage and all the following ones, used for cleanstrap
[+ IF prev +]distclean-stage[+prev+]:: distclean-stage[+id+] [+ ENDIF prev +]
d1522 1
a1522 1
[+cleanstrap-target+]: distclean-stage1 [+bootstrap-target+]
d1558 6
@


1.113
log
@2004-08-17  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.in: Regenerate.
	* configure: Regenerate.

	* Makefile.def (bootstrap-stage): Rename extra_*_flags to
	stage_*_flags.
	* Makefile.tpl (configure-[+module+], all-[+module+]): Exit
	for bootstrapped modules if toplevel bootstrap is going.
	(GCC bootstrap): Generate per-stage targets for all bootstrapped
	modules.  Adjust for changes in Makefile.def.  Enable several
	rules even in non-bootstrap mode, just to avoid peppering the
	template with unnecessary "@@if/@@endif gcc-bootstrap" pairs.
	(stage-[+prev+]-bubble): Remove.

	* Makefile.def (Dependencies): Depend on all-build-bison,
	all-build-flex, all-build-byacc, all-build-texinfo, rather
	than the host variations.
	* Makefile.tpl (BUILD_DIR_PREFIX): Remove.  Replace throughout
	with BUILD_SUBDIR.
	(BISON): Update for recent Bisons.
	(YACC): Fix typo.
	(cross): Depend on all-build.
	(all): Do not depend on all-build.
	(prebootstrap): Remove.
	(dep-kind): Accept separate prefixes for MODULE and ON variables.
	(Prebootstrap dependencies): Add them to the per-stage targets
	and to all-prebootstrap.
	* configure.in (build_configdirs): Always enable build_tools.
	(BUILD_DIR_PREFIX): Remove.

	* Makefile.def (gcc): Add target variable.
	(gdb, expect, guile, tk, tix): Replace with_x with extra_make_flags.
	* Makefile.tpl (Autogenerated `all-*' targets): Invoke $(TARGET-*)
	in the recursive `make', instead of hardwiring `all'.
	(Autogenerated TARGET-* variables): New.
@
text
@d1379 1
a1379 1
	[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :
d1383 1
a1383 1
	[ -d stage[+id+]-[+module+] ] || mkdir stage[+id+]-[+module+]; \
d1389 1
a1389 1
	rm -f stage_current[+ FOR host_modules +][+ IF bootstrap +]
d1391 1
a1391 1
	set [+module+] stage[+id+]-[+module+] ; @@UNDO_LINK_TO_DIR@@ [+ IF prev +] ; \
d1399 8
a1406 6
stage[+id+]-bubble:: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +]
	@@case `echo all-stage[+id+]-*` in \
	  'all-stage[+id+]-*') ;; \
	  *) echo Remaking stage [+id+] ; rm -f all-stage[+id+]-* ;; \
	esac ; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage[+id+]
d1414 3
d1422 3
a1424 8
configure-stage[+id+]-[+module+]: [+ IF prev +] maybe-all-stage[+prev+]-[+module+] [+ ENDIF prev +]
	$(MAKE) stage[+id+]-start
	@@if [ -f stage[+id+]-[+module+]/Makefile ] ; then \
	  $(STAMP) configure-stage[+id+]-[+module+] ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
d1444 1
a1444 2
	  [+stage_configure_flags+] [+extra_configure_flags+] && \
	  $(STAMP) ../configure-stage[+id+]-[+module+]
d1448 1
a1448 1
	$(MAKE) stage[+id+]-start
d1456 1
a1456 2
		[+stage_make_flags+] [+extra_make_flags+] && \
	$(STAMP) ../all-stage[+id+]-[+module+]
d1464 6
a1469 2
[+compare-target+]: all-stage[+id+]-gcc
	[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :
d1488 2
a1489 1
	$(STAMP) [+compare-target+]
d1494 1
a1494 3
[+bootstrap-target+]: stage[+id+]-bubble [+
	  IF compare-target +] [+compare-target+] [+
	  ENDIF compare-target +] all
d1497 1
a1497 1
.PHONY: restage[+id+] touch-stage[+id+] distclean-stage[+id+]
d1503 1
a1503 23
	rm -rf configure-stage[+id+]-* all-stage[+id+]-* stage[+id+]-* [+
	  IF compare-target +][+compare-target+] [+ ENDIF compare-target +]

# Rules to renew the timestamp on a stage and all the following ones
[+ IF prev +]touch-stage[+prev+]:: touch-stage[+id+] [+ ENDIF prev +]
touch-stage[+id+]::
	@@case `echo configure-stage[+id+]-*` in \
	  'configure-stage[+id+]-*') ;; \
	  *) \
	    echo '$(STAMP)' configure-stage[+id+]-* && \
	    $(STAMP) configure-stage[+id+]-* ;; \
	esac ; \
	case `echo all-stage[+id+]-*` in \
	  'all-stage[+id+]-*') ;; \
	  *) \
	    echo '$(STAMP)' all-stage[+id+]-* && \
	    $(STAMP) all-stage[+id+]-* ;; \
	esac

# After building a stage, touch the following ones
[+ IF prev +]restage[+prev+]:: touch-stage[+id+] [+ ENDIF prev +]
restage[+id+]::
	rm -rf all-stage[+id+]-* [+
a1504 3
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) [+
	  IF compare-target +][+compare-target+] [+
	  ELSE +] all-stage[+id+] [+ ENDIF compare-target +]
@


1.112
log
@2004-08-06  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (bfd, opcodes, gcc, zlib): Mark as bootstrap module.
	(bison, byacc, flex, texinfo): Do not mark as bootstrap module.
	(Dependencies): New section.
	* Makefile.tpl (Dependencies): Generate from Makefile.def.
	(configure-target-[+module+]): Depend on maybe-all-gcc
	(all-prebootstrap): New name of all-bootstrap.  Changed throughout.
	(toplevel profiledbootstrap): Fix dependencies.
	* Makefile.in: Regenerate.
@
text
@a245 3
# Path to the build directory for a Canadian cross, empty otherwise.
BUILD_DIR_PREFIX = @@BUILD_DIR_PREFIX@@

d252 2
a253 2
BISON = `if [ -f $$r/$(BUILD_DIR_PREFIX)/bison/bison ] ; then \
	    echo $$r/$(BUILD_DIR_PREFIX)/bison/bison -L $$s/bison/ ; \
d259 4
a262 4
YACC = `if [ -f $$s/$(BUILD_DIR_PREFIX)/bison/bison ] ; then \
	    echo $$r/$(BUILD_DIR_PREFIX)/bison/bison -y -L $$s/bison/ ; \
	elif [ -f $$s/$(BUILD_DIR_PREFIX)/byacc/byacc ] ; then \
	    echo $$r/$(BUILD_DIR_PREFIX)/byacc/byacc ; \
d268 2
a269 2
FLEX = `if [ -f $$r/$(BUILD_DIR_PREFIX)/flex/flex ] ; \
	then echo $$r/$(BUILD_DIR_PREFIX)/flex/flex ; \
d273 2
a274 2
LEX = `if [ -f $$r/$(BUILD_DIR_PREFIX)/flex/flex ] ; \
	then echo $$r/$(BUILD_DIR_PREFIX)/flex/flex ; \
d278 2
a279 2
M4 = `if [ -f $$r/$(BUILD_DIR_PREFIX)/m4/m4 ] ; \
	then echo $$r/$(BUILD_DIR_PREFIX)/m4/m4 ; \
d287 2
a288 2
MAKEINFO = `if [ -f $$r/$(BUILD_DIR_PREFIX)/texinfo/makeinfo/Makefile ] ; \
	then echo $$r/$(BUILD_DIR_PREFIX)/texinfo/makeinfo/makeinfo ; \
d603 1
a603 1
all: unstage all-build all-host all-target stage
d864 1
d870 2
a871 1
	(cd $(BUILD_SUBDIR)/[+module+] && $(MAKE) [+extra_make_flags+] all)
d884 2
a885 1
	@@test ! -f [+module+]/Makefile || exit 0; \
d913 2
a914 1
	@@r=`${PWD_COMMAND}`; export r; \
d941 2
a942 4
	  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	    IF with_x 
	      +] $(X11_FLAGS_TO_PASS)[+ 
	    ENDIF with_x +] [+extra_make_flags+] check); \
d951 1
a951 3
	  IF with_x 
	    +] $(X11_FLAGS_TO_PASS)[+ 
	  ENDIF with_x +] [+extra_make_flags+] check)
d968 1
a968 3
	  IF with_x 
	    +] $(X11_FLAGS_TO_PASS)[+ 
	  ENDIF with_x +] [+extra_make_flags+] install)
d1078 1
d1094 1
a1094 1
	  +] [+extra_make_flags+] all)
d1248 1
a1248 1
cross: all-texinfo all-bison all-byacc all-binutils all-gas all-ld
a1320 1
@@if gcc-bootstrap
a1357 6
# Real targets act phony if they depend on phony targets; this hack
# prevents gratuitous rebuilding of stage 1.
prebootstrap:
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-prebootstrap
	$(STAMP) prebootstrap

d1381 6
a1386 4
	echo stage[+id+] > stage_last ; \
	[ -d stage[+id+]-gcc ] || mkdir stage[+id+]-gcc; \
	set stage[+id+]-gcc gcc ; @@CREATE_LINK_TO_DIR@@ [+ IF prev +] ; \
	set stage[+prev+]-gcc prev-gcc ; @@CREATE_LINK_TO_DIR@@ [+ ENDIF prev +]
d1389 5
a1393 3
	rm -f stage_current ; \
	set gcc stage[+id+]-gcc ; @@UNDO_LINK_TO_DIR@@ [+ IF prev +] ; \
	set prev-gcc stage[+prev+]-gcc ; @@UNDO_LINK_TO_DIR@@ [+ ENDIF prev +]
d1400 18
a1417 15
	@@if [ -f all-stage[+id+]-gcc ] ; then \
	  echo Remaking stage [+id+] ; \
	  rm -f all-stage[+id+]-gcc ; \
	fi ; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-stage[+id+]-gcc

[+ IF prev +]
stage[+prev+]-bubble::
	@@if [ -f configure-stage[+id+]-gcc ] ; then \
	  $(STAMP) configure-stage[+id+]-gcc ; \
	fi
[+ ENDIF prev +]

configure-stage[+id+]-gcc: [+ IF prev +] all-stage[+prev+]-gcc [+
	  ELSE +] prebootstrap [+ ENDIF prev +]
d1419 2
a1420 2
	@@if [ -f stage[+id+]-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage[+id+]-gcc ; \
d1429 2
a1430 2
	echo Configuring stage [+id+] in gcc ; \
	cd gcc || exit 1; \
d1436 2
a1437 2
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
d1439 2
a1440 2
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
d1444 2
a1445 2
	  [+extra_configure_flags+] && \
	  $(STAMP) ../configure-stage[+id+]-gcc
d1447 2
a1448 1
all-stage[+id+]-gcc: configure-stage[+id+]-gcc
d1454 2
a1455 2
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) [+ IF prev +] \
d1457 4
a1460 1
		[+extra_make_flags+] && $(STAMP) ../all-stage[+id+]-gcc
d1462 3
d1491 1
a1491 2
[+bootstrap-target+]:
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) stage[+id+]-bubble [+
d1502 1
a1502 1
	rm -rf configure-stage[+id+]-gcc all-stage[+id+]-gcc stage[+id+]-gcc [+
d1508 12
a1519 7
	@@[ -f configure-stage[+id+]-gcc ] && \
	  echo '$(STAMP) configure-stage[+id+]-gcc' && \
	  $(STAMP) configure-stage[+id+]-gcc; \
	[ -f all-stage[+id+]-gcc ] && \
	  echo '$(STAMP) all-stage[+id+]-gcc' && \
	  $(STAMP) all-stage[+id+]-gcc; \
	:
d1524 1
a1524 1
	rm -rf all-stage[+id+]-gcc [+
d1528 1
a1528 1
	  ELSE +] all-stage[+id+]-gcc [+ ENDIF compare-target +]
d1534 1
d1545 4
a1548 1
profiledbootstrap: all-prebootstrap configure-gcc
a1565 1

d1602 1
a1602 1
   (define make-dep (lambda (module-kind)
d1605 1
a1605 1
         (dep-target module-kind "on" (exist? "hard")))))
d1633 1
a1633 1
   ;; modules on a non-bootstrapped modules (e.g. gcc on bison).  All this
d1636 9
a1644 10
      (if (or (= (dep-subtarget "on") "install-")
	      (=* (dep-module "on") "build-")
	      (=* (dep-module "on") "target-"))
          "normal"

          (if (hash-ref boot-modules (dep-module "module"))
              (if (hash-ref boot-modules (dep-module "on"))
	          "bootstrap"
	          "prebootstrap")
	      "normal"))))
a1647 1
   (define preboot-modules (make-hash-table 37))
d1660 3
a1662 5
[+ FOR dependencies +][+ (make-dep "") +]
[+ CASE (dep-kind) +][+
   == "prebootstrap"
     +][+ (hash-create-handle! preboot-modules (dep-module "on") #t) "" +][+
   == "bootstrap"
d1664 6
a1669 1
[+ (make-dep (dep-stage)) +][+
d1674 2
a1675 10
# Now build the prebootstrap dependencies.
[+ FOR host_modules +][+
   IF (hash-ref preboot-modules (get "module")) +]
all-prebootstrap: maybe-all-[+module+][+
   ENDIF +][+
ENDFOR host_modules +]

# Unless toplevel bootstrap is going, bootstrapped packages are actually
# prebootstrapped, with the exception of gcc.  Another wart that will go
# away with toplevel bootstrap.
@


1.111
log
@2004-08-03 Paolo Bonzini <bonzini@@gnu.org>

	* Makefile.def (host-modules): Add gcc.
	* Makefile.in: Regenerate.
	* Makefile.tpl (sorry): New rule.
	(configure-host, all-host, [+make_target+]-host, do-check,
	install-host): Do not add gcc as a special case.
	(host modules): Add a small special-casing for gcc.  Export
	extra_make_flags through the environment.
	(maybe-configure-gcc, configure-gcc, maybe-all-gcc, all-gcc,
	maybe-check-gcc, check-gcc, maybe-install-gcc, install-gcc,
	other recursive targets for gcc): Remove.

	(all, do-[+make_target+], do-check): Wrap between unstage and stage.
	(stage, unstage): New rules.
	(stage[+id+]-start, stage[+id+]-end, [+compare-target+],
	distclean-stage[+id+]): Use stage_current.
	([+bootstrap-target+], profiledbootstrap): Do not invoke manually
	the stage*-start rules.
@
text
@d741 2
a742 2
  FOR host_modules +] \
    maybe-install-[+module+][+
d1199 1
a1199 1
$(GCC_STRAP_TARGETS): all-bootstrap configure-gcc
d1232 1
a1232 1
profiledbootstrap: all-bootstrap configure-gcc
d1366 1
a1366 1
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all-bootstrap
d1537 1
a1537 1
profiledbootstrap: all-bootstrap configure-gcc
d1562 10
d1576 1
a1576 1
# are specified by depending on a 'maybe-' target.  If you're not sure,
d1579 103
a1681 21
# Build modules
all-build-bison: maybe-all-build-texinfo
all-build-flex: maybe-all-build-texinfo
all-build-libiberty: maybe-all-build-texinfo
all-build-m4: maybe-all-build-libiberty maybe-all-build-texinfo

# Host modules specific to gcc.
# GCC needs to identify certain tools.
# GCC also needs the information exported by the intl configure script.
configure-gcc: maybe-configure-intl maybe-configure-binutils maybe-configure-gas maybe-configure-ld maybe-configure-bison maybe-configure-flex
all-gcc: maybe-all-libiberty maybe-all-intl maybe-all-texinfo maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib maybe-all-libbanshee maybe-all-libcpp
configure-libcpp: maybe-configure-libiberty maybe-configure-intl
all-libcpp: maybe-all-libiberty maybe-all-intl
# This is a slightly kludgy method of getting dependencies on 
# all-build-libiberty correct; it would be better to build it every time.
all-gcc: maybe-all-build-libiberty
all-bootstrap: [+ FOR host_modules +][+ IF bootstrap +]maybe-all-[+module+] [+ ENDIF bootstrap +][+ ENDFOR host_modules +]

# Host modules specific to gdb.
# GDB needs to know that the simulator is being built.
configure-gdb: maybe-configure-itcl maybe-configure-tcl maybe-configure-tk maybe-configure-sim
d1683 1
a1683 92
all-gdb: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-mmalloc maybe-all-readline maybe-all-bison maybe-all-byacc maybe-all-sim $(gdbnlmrequirements) $(GDB_TK)
install-gdb: maybe-install-tcl maybe-install-tk maybe-install-itcl maybe-install-tix maybe-install-libgui
configure-libgui: maybe-configure-tcl maybe-configure-tk
all-libgui: maybe-all-tcl maybe-all-tk maybe-all-itcl

# Host modules specific to binutils.
configure-bfd: configure-libiberty
all-bfd: maybe-all-libiberty maybe-all-intl
all-binutils: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-flex maybe-all-bison maybe-all-byacc maybe-all-intl
# We put install-opcodes before install-binutils because the installed
# binutils might be on PATH, and they might need the shared opcodes
# library.
install-binutils: maybe-install-opcodes
# libopcodes depends on libbfd
install-opcodes: maybe-install-bfd
all-gas: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-intl
all-gprof: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-intl
all-ld: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-intl
all-opcodes: maybe-all-bfd maybe-all-libiberty

# Other host modules in the 'src' repository.
all-dejagnu: maybe-all-tcl maybe-all-expect maybe-all-tk
configure-expect: maybe-configure-tcl maybe-configure-tk
all-expect: maybe-all-tcl maybe-all-tk
configure-itcl: maybe-configure-tcl maybe-configure-tk
all-itcl: maybe-all-tcl maybe-all-tk
# We put install-tcl before install-itcl because itcl wants to run a
# program on installation which uses the Tcl libraries.
install-itcl: maybe-install-tcl
all-sid: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-tcl maybe-all-tk
install-sid: maybe-install-tcl maybe-install-tk
all-sim: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-readline maybe-configure-gdb
configure-tk: maybe-configure-tcl
all-tk: maybe-all-tcl
configure-tix: maybe-configure-tcl maybe-configure-tk
all-tix: maybe-all-tcl maybe-all-tk
all-texinfo: maybe-all-libiberty

# Other host modules.  Warning, these are not well tested.
all-autoconf: maybe-all-m4 maybe-all-texinfo
all-automake: maybe-all-m4 maybe-all-texinfo
all-bison: maybe-all-texinfo
all-diff: maybe-all-libiberty
all-fastjar: maybe-all-zlib maybe-all-libiberty
all-fileutils: maybe-all-libiberty
all-flex: maybe-all-libiberty maybe-all-bison maybe-all-byacc
all-gzip: maybe-all-libiberty
all-hello: maybe-all-libiberty
all-m4: maybe-all-libiberty maybe-all-texinfo
all-make: maybe-all-libiberty maybe-all-intl
all-patch: maybe-all-libiberty
all-prms: maybe-all-libiberty
all-recode: maybe-all-libiberty
all-sed: maybe-all-libiberty
all-send-pr: maybe-all-prms
all-tar: maybe-all-libiberty
all-uudecode: maybe-all-libiberty

ALL_GCC = maybe-all-gcc
ALL_GCC_C = $(ALL_GCC) maybe-all-target-newlib maybe-all-target-libgloss
ALL_GCC_CXX = $(ALL_GCC_C) maybe-all-target-libstdc++-v3

# Target modules specific to gcc.
configure-target-boehm-gc: $(ALL_GCC_C) maybe-configure-target-qthreads
configure-target-fastjar: maybe-configure-target-zlib
all-target-fastjar: maybe-all-target-zlib maybe-all-target-libiberty
configure-target-libada: $(ALL_GCC_C)
configure-target-libgfortran: $(ALL_GCC_C)
configure-target-libffi: $(ALL_GCC_C) 
configure-target-libjava: $(ALL_GCC_C) maybe-configure-target-zlib maybe-configure-target-boehm-gc maybe-configure-target-qthreads maybe-configure-target-libffi
all-target-libjava: maybe-all-fastjar maybe-all-target-zlib maybe-all-target-boehm-gc maybe-all-target-qthreads maybe-all-target-libffi
configure-target-libobjc: $(ALL_GCC_C)
all-target-libobjc: maybe-all-target-libiberty
configure-target-libstdc++-v3: $(ALL_GCC_C)
all-target-libstdc++-v3: maybe-all-target-libiberty
configure-target-zlib: $(ALL_GCC_C)

# Target modules in the 'src' repository.
configure-target-examples: $(ALL_GCC_C)
configure-target-libgloss: $(ALL_GCC)
all-target-libgloss: maybe-configure-target-newlib
configure-target-libiberty: $(ALL_GCC)
configure-target-libtermcap: $(ALL_GCC_C)
configure-target-newlib: $(ALL_GCC)
configure-target-rda: $(ALL_GCC_C)
configure-target-winsup: $(ALL_GCC_C)
all-target-winsup: maybe-all-target-libiberty maybe-all-target-libtermcap

# Other target modules.  Warning, these are not well tested.
configure-target-gperf: $(ALL_GCC_CXX)
all-target-gperf: maybe-all-target-libiberty maybe-all-target-libstdc++-v3
configure-target-qthreads: $(ALL_GCC_C)
@


1.110
log
@2004-07-12  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.in: Add noconfigdirs for crx-*-*.
	* configure: Regenerate.

2004-07-09  Loren J. Rittle <ljrittle@@acm.org>

	* configure.in: Build libmudflap by default on FreeBSD.
	* configure: Regenerated.

2004-07-09  Mark Mitchell  <mark@@codesourcery.com>

	* configure.in: Do not build libmudflap by default on non-GNU/Linux
	systems.
	* configure: Regenerated.

2004-07-08 John David Anglin  <dave.anglin@@nrc-cnrc.gc.ca>

	PR target/16344
	* Makefile.tpl (profiledbootstrap): Build runtime libraries with
	feedback based compiler.
	* Makefile.in: Rebuilt.

2004-07-05  Phil Edwards  <phil@@codesourcery.com>

	* configure.in:  Do not prepend $srcdir to /dev/null in
	makefile fragments.
	* configure:  Regenerate.
@
text
@d487 8
d594 1
a594 1
configure-host: maybe-configure-gcc [+
d606 1
a606 1
all: all-build all-host all-target
d614 1
a614 1
all-host: maybe-all-gcc [+
d630 1
a630 1
do-[+make_target+]: [+make_target+]-host [+make_target+]-target
d633 1
a633 1
[+make_target+]-host: maybe-[+make_target+]-gcc [+
d705 1
a705 1
do-check: maybe-check-gcc [+
d711 1
a711 1
  ENDFOR target_modules +]
d746 1
a746 1
install-host: maybe-install-gcc [+
d920 4
a923 1
	  ENDIF with_x +] [+extra_make_flags+] all)
d996 1
a996 1
	for flag in $(EXTRA_HOST_FLAGS); do \
d1005 1
a1005 1
	          [+extra_make_flags+] [+make_target+]) \
a1191 16
# Unfortunately, while gcc _should_ be a host module,
# libgcc is a target module, and gen* programs are
# build modules.  So GCC is a sort of hybrid.

# gcc is the only module which uses GCC_FLAGS_TO_PASS.
# Don't use shared host config.cache, as it will confuse later
# directories; GCC wants slightly different values for some
# precious variables.  *sigh*

# We must skip configuring if toplevel bootstrap is going.
.PHONY: configure-gcc maybe-configure-gcc
maybe-configure-gcc:
@@if gcc
maybe-configure-gcc: configure-gcc
configure-gcc:
@@endif gcc
d1193 3
a1195 42
	@@test ! -f gcc/Makefile || exit 0; \
	[ -d gcc ] || mkdir gcc; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(HOST_EXPORTS) \
	echo Configuring in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} \
	  || exit 1
@@endif gcc-no-bootstrap

# Don't 'make all' in gcc if it's already been made by 'bootstrap'; that
# causes trouble.  This wart will be fixed eventually by moving
# the bootstrap behavior to this file.
.PHONY: all-gcc maybe-all-gcc
maybe-all-gcc:
@@if gcc
maybe-all-gcc: all-gcc
all-gcc: configure-gcc
@@endif gcc
@@if gcc-no-bootstrap
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	$(HOST_EXPORTS) \
	if [ -f gcc/stage_last ] ; then \
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) quickstrap); \
	else \
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) all); \
	fi
a1196 10
# Building GCC uses some tools for rebuilding "source" files
# like texinfo, bison/byacc, etc.  So we must depend on those.
#
# While building GCC, it may be necessary to run various target
# programs like the assembler, linker, etc.  So we depend on
# those too.
#
# In theory, on an SMP all those dependencies can be resolved
# in parallel.
#
a1265 2
.PHONY: check-gcc maybe-check-gcc
maybe-check-gcc:
a1266 12
maybe-check-gcc: check-gcc
check-gcc:
	@@if [ -f ./gcc/Makefile ] ; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	  $(SET_LIB_PATH) \
	  $(HOST_EXPORTS) \
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check); \
	else \
	  true; \
	fi

a1280 17
@@endif gcc

.PHONY: install-gcc maybe-install-gcc
maybe-install-gcc:
@@if gcc
maybe-install-gcc: install-gcc
install-gcc:
	@@if [ -f ./gcc/Makefile ] ; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	  $(SET_LIB_PATH) \
	  $(HOST_EXPORTS) \
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) install); \
	else \
	  true; \
	fi
@@endif gcc
a1302 27

# Other targets (dvi, info, etc.)
[+ FOR recursive_targets +]
.PHONY: maybe-[+make_target+]-gcc [+make_target+]-gcc
maybe-[+make_target+]-gcc:
@@if gcc
maybe-[+make_target+]-gcc: [+make_target+]-gcc
[+make_target+]-gcc: [+
  FOR depend +]\
    [+depend+]-gcc [+
  ENDFOR depend +]
	@@[ -f ./gcc/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	for flag in $(EXTRA_GCC_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	$(HOST_EXPORTS) \
	echo "Doing [+make_target+] in gcc" ; \
	(cd gcc && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1
a1304 3
[+ ENDFOR recursive_targets +]

@@if gcc-bootstrap
d1309 17
a1325 1
# We track the current stage (the one in 'gcc') in the stage_last file.
d1390 2
a1391 1
	[ -f stage_last ] && $(MAKE) `cat stage_last`-end || :
d1398 1
a1398 1
	rm -f stage_last ; \
d1464 1
a1464 1
	[ -f stage_last ] && $(MAKE) `cat stage_last`-end || :
d1491 1
a1491 2
	  ENDIF compare-target +] \
	  stage[+id+]-start all stage[+id+]-end 
d1499 1
a1499 1
	[ -f stage_last ] && $(MAKE) `cat stage_last`-end || :
d1543 1
a1543 1
	$(MAKE) stageprofile-bubble distclean-stagefeedback stageprofile-start
@


1.109
log
@* Makefile.def (host_modules): Set bootstrap=true for flex.
* Makefile.tpl (all-gcc): Depend on texinfo and flex.
* Makefile.in: Rebuilt.
@
text
@d1291 1
a1291 1
	echo "Bootstrapping the compiler"; \
a1293 5
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	$(SET_LIB_PATH) \
	echo "Building runtime libraries and training compiler"; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all
	@@r=`${PWD_COMMAND}`; export r; \
d1299 5
@


1.108
log
@2004-07-01  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (build_modules): Add bison, byacc, flex,
	m4, texinfo.
	(flags_to_pass): Add FLEX.
	* Makefile.tpl (BUILD_DIR_PREFIX, BASE_EXPORTS): New.
	(BUILD_EXPORTS, HOST_EXPORTS, BASE_TARGET_EXPORTS): Include it.
	(DEFAULT_YACC, USUAL_YACC, DEFAULT_LEX, USUAL_LEX, DEFAULT_M4,
	DEFAULT_MAKEINFO): Remove.
	(CONFIGURED_YACC, CONFIGURED_FLEX, CONFIGURED_BISON,
	CONFIGURED_LEX, CONFIGURED_M4, CONFIGURED_MAKEINFO): Substitute.
	(YACC, FLEX, BISON, LEX, M4, MAKEINFO): Define to look into
	objdir or else use configured tool.
	(all-build): New.
	(all): Depend on it.
	(Build module dependencies): Add.
	* Makefile.in: Regenerate.
	* configure.in: Better support for multiple build modules,
	matching what is done for host/target modules.  Do not look
	for "plausible" locations of build tools if Canadian cross.
	Use autoconf's AC_PROG_CC to find a C compiler.  Define
	BUILD_DIR_PREFIX.  Look for flex, makeinfo and m4.
	* configure: Regenerate.
@
text
@d1678 1
a1678 1
all-gcc: maybe-all-libiberty maybe-all-intl maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib maybe-all-libbanshee maybe-all-libcpp
@


1.107
log
@2004-06-22  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (HOST_EXPORTS): Fix pasto.
	* Makefile.in: Regenerate.
@
text
@d116 13
d130 1
a130 3
# configuring subdirectories for the build system.  It must also be
# exported whenever recursing into a build directory in case that
# directory's Makefile re-runs configure.
d132 1
d155 1
a155 3
# configuring subdirectories for the host system.  It must also be
# exported whenever recursing into a host directory in case that
# directory's Makefile re-runs configure.
d157 1
d193 1
a193 3
# configuring subdirectories for the host system.  It must also be
# exported whenever recursing into a host directory in case that
# directory's Makefile re-runs configure.
d195 1
d246 3
d254 3
a256 3
BISON=@@BISON@@
USUAL_BISON = `if [ -f $$r/bison/bison ] ; then \
	    echo $$r/bison/bison -L $$s/bison/ ; \
d258 1
a258 1
	    echo bison ; \
d261 5
a265 6
DEFAULT_YACC = @@DEFAULT_YACC@@
YACC=@@YACC@@
USUAL_YACC = `if [ -f $$r/bison/bison ] ; then \
	    echo $$r/bison/bison -y -L $$s/bison/ ; \
	elif [ -f $$r/byacc/byacc ] ; then \
	    echo $$r/byacc/byacc ; \
d267 1
a267 1
	    echo ${DEFAULT_YACC} ; \
d270 14
a283 10
DEFAULT_LEX = @@DEFAULT_LEX@@
LEX=@@LEX@@
USUAL_LEX = `if [ -f $$r/flex/flex ] ; \
	then echo $$r/flex/flex ; \
	else echo ${DEFAULT_LEX} ; fi`

DEFAULT_M4 = @@DEFAULT_M4@@
M4 = `if [ -f $$r/m4/m4 ] ; \
	then echo $$r/m4/m4 ; \
	else echo ${DEFAULT_M4} ; fi`
d286 7
a292 5
# higher, else we use the "missing" dummy.
MAKEINFO=@@MAKEINFO@@
USUAL_MAKEINFO = `if [ -f $$r/texinfo/makeinfo/makeinfo ] ; \
	then echo $$r/texinfo/makeinfo/makeinfo ; \
	else if (makeinfo --version \
d294 1
a294 1
        then echo makeinfo; else echo $$s/missing makeinfo; fi; fi`
d598 1
a598 1
all: @@all_build_modules@@ all-host all-target
d600 5
d1668 6
@


1.106
log
@2004-06-22  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (configure-build-[+module+],
	configure-[+module+], configure-target-[+module+]): Pass
	[+extra_configure_args+].
	(all-build-[+module+], all-[+module+], check-[+module+],
	install-[+module+], [+make_target+]-[+module+],
	all-target-[+module+], check-target-[+module+],
	install-target-[+module+], [+make_target+]-target-[+module+]):
	Pass [+extra_make_args+].
	(HOST_EXPORTS): Include the former GCC_HOST_EXPORTS.
	(GCC_HOST_EXPORTS): Remove.
	(configure-gcc, all-gcc, GCC_STRAP_TARGETS, profiledbootstrap,
	cross, check-gcc, check-gcc-c++, install-gcc,
	gcc-no-fixedincludes, [+make_target+]-gcc, stage[+id+]-bubble):
	Replace GCC_HOST_EXPORTS with HOST_EXPORTS.
	* Makefile.in: Regenerate.
@
text
@d162 1
a162 1
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP;
@


1.105
log
@2004-06-09  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (touch-stage[+id+]): New.
	(restage[+prev+]): Depend on touch-stage[+id+].

	* Makefile.tpl (RECURSE_FLAGS_TO_PASS): New.
	Use it throughout.

	* Makefile.def: Add profile and feedback bootstrap stages.
	Remove next field from bootstrap stages.
	* Makefile.tpl (LN, LN_S): Substitute.
	(stageN-start, stageN-end): Use double-colon rules, to
	provide a hook for additional setup commands.
	(distclean-stageN-gcc, restageN): Create dependencies from
	[+prev+], not from [+next+].
	(stageN-bubble): Add commands for successive stages from
	[+prev+], using double-colon rules.
	(all-stageN-gcc): Fix typo.
	(stagefeedback-start, profiledbootstrap): New.
	* Makefile.in: Regenerate.
	* configure.in: Call ACX_PROG_LN.
	* configure: Regenerate.

config/ChangeLog:
2004-06-09  Paolo Bonzini  <bonzini@@gnu.org>

	* acx.m4 (ACX_PROG_LN): From gcc, modified to
	accept a parameter.
@
text
@a162 4

# Similar, for the gcc directory.
GCC_HOST_EXPORTS = \
	$(HOST_EXPORTS) \
d169 1
a169 1
	$(GCC_HOST_EXPORTS) \
d734 1
a734 1
		$(GCC_HOST_EXPORTS) \
d829 1
a829 1
	  --with-build-subdir="$(BUILD_SUBDIR)" \
d841 1
a841 1
	(cd $(BUILD_SUBDIR)/[+module+] && $(MAKE) all)
d873 1
a873 1
	  $(HOST_CONFIGARGS) $${srcdiroption} \
d889 1
a889 1
	  ENDIF with_x +] all)
d909 1
a909 1
	    ENDIF with_x +] check); \
d920 1
a920 1
	  ENDIF with_x +] check)
d939 1
a939 1
	  ENDIF with_x +] install)
d971 1
a971 1
	          [+make_target+]) \
d1042 1
a1042 1
	  --with-target-subdir="$(TARGET_SUBDIR)" \
d1064 1
a1064 1
	  +] all)
d1089 1
a1089 1
	  +] check)
d1111 1
a1111 1
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) install)
d1147 1
a1147 1
	          [+make_target+]) \
d1179 1
a1179 1
	$(GCC_HOST_EXPORTS) \
d1211 1
a1211 1
	$(GCC_HOST_EXPORTS) \
d1234 1
a1234 1
	$(GCC_HOST_EXPORTS) \
d1254 1
a1254 1
	$(GCC_HOST_EXPORTS) \
d1267 1
a1267 1
	$(GCC_HOST_EXPORTS) \
d1278 1
a1278 1
	$(GCC_HOST_EXPORTS) \
d1287 1
a1287 1
	$(GCC_HOST_EXPORTS) \
d1306 1
a1306 1
	  $(GCC_HOST_EXPORTS) \
d1318 1
a1318 1
	  $(GCC_HOST_EXPORTS) \
d1337 1
a1337 1
	  $(GCC_HOST_EXPORTS) \
d1359 1
a1359 1
	  $(GCC_HOST_EXPORTS) \
d1383 1
a1383 1
	$(GCC_HOST_EXPORTS) \
d1507 1
a1507 1
	$(GCC_HOST_EXPORTS) [+ ENDIF prev +] \
d1531 1
a1531 1
	$(GCC_HOST_EXPORTS) [+ ENDIF prev +] \
d1617 1
a1617 1
	$(GCC_HOST_EXPORTS) \
d1628 1
a1628 1
	$(GCC_HOST_EXPORTS) \
@


1.104
log
@2004-06-01  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl: Fix typo.
	* Makefile.in: Regenerate.
@
text
@d71 2
d499 2
d1265 1
a1265 1
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all
d1278 1
a1278 1
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all
d1298 1
a1298 2
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) \
		LANGUAGES="c c++" all
d1446 1
a1446 1
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all-bootstrap
d1452 2
d1469 1
a1469 1
stage[+id+]-start:
d1476 1
a1476 1
stage[+id+]-end:
d1485 1
a1485 1
stage[+id+]-bubble: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +]
d1489 7
a1495 7
	  $(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) \
	    all-stage[+id+]-gcc [+ IF next +] && \
	  if [ -f configure-stage[+next+]-gcc ] ; then \
	    $(STAMP) configure-stage[+next+]-gcc ; \
	  fi [+ ENDIF next +]; \
	else \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all-stage[+id+]-gcc ; \
d1497 1
d1538 1
a1538 2
		CC="$${CC}" CC_FOR_BUILD="$${CC_FOR_BUILD}" \
		STAGE_PREFIX=$$r/stage[+prev+]-gcc/ [+ ENDIF prev +] \
d1568 1
a1568 1
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) stage[+id+]-bubble [+
d1574 1
a1574 1
.PHONY: restage[+id+] distclean-stage[+id+]
d1576 3
a1578 1
distclean-stage[+id+]: [+ IF next +] distclean-stage[+next+] [+ ENDIF next +]
d1583 14
a1596 1
restage[+id+]: [+ IF next +] distclean-stage[+next+] [+ ENDIF next +]
d1599 1
a1599 1
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) [+
d1609 27
@


1.103
log
@2004-06-01  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (all.normal): Rename to all.
	(all): Replace with a rule to pick the default
	target from configure.
	(all-gcc, configure-gcc): Use conditionals to
	do nothing when toplevel bootstrap is going on.
	(GCC directory bootstrap) [gcc-bootstrap]: Disable.
	(Toplevel bootstrap) [gcc-no-bootstrap]: Disable.
	* configure.in: Support --enable-bootstrap.

	* Makefile.def: Remove new- prefix from toplevel
	bootstrap targets.
	* Makefile.tpl: Likewise.

	* Makefile.def: Add bootstrap_stage 4.  Add bootstrap2
	target.

	* Makefile.tpl (Toplevel bootstrap): Pass $(BASE_FLAGS_TO_PASS)
	$(RECURSE_FLAGS) to recursive invocation of make.

	* Makefile.in: Regenerate.
	* configure: Regenerate.
@
text
@d1532 1
a1532 1
		CC="$${CC}" CC_FOR_BUILD="${CC_FOR_BUILD}" \
@


1.102
log
@* Makefile.tpl (BUILD_EXPORTS, HOST_EXPORTS, GCC_HOST_EXPORTS)
(STAGE_HOST_EXPORTS, BASE_TARGET_EXPORTS, RAW_CXX_TARGET_EXPORTS)
(NORMAL_TARGET_EXPORTS): New macros.  Use them in all the recursive
targets.
* Makefile.in: Regenerate.
@
text
@d473 1
a473 2
all: all.normal
.PHONY: all
d578 3
a580 3
# The target built for a native build.
.PHONY: all.normal
all.normal: @@all_build_modules@@ all-host all-target
d1173 2
a1175 1
	[ -f stage_last ] && exit 0; \
d1196 1
a1196 1
@@endif gcc
d1206 2
d1210 1
d1212 1
a1212 4
	if [ -f stage_last ] ; then \
	  true ; \
	elif [ -f gcc/stage_last ] ; then \
	  $(SET_LIB_PATH) \
a1214 1
	  $(SET_LIB_PATH) \
a1216 1
@@endif gcc
d1295 2
a1296 1
	  LANGUAGES="c c++" all
d1397 1
d1443 1
a1443 1
	$(MAKE) all-bootstrap
d1462 1
a1462 1
.PHONY: new-stage[+id+]-start new-stage[+id+]-end
d1464 2
a1465 2
new-stage[+id+]-start:
	[ -f stage_last ] && $(MAKE) new-`cat stage_last`-end || :
d1471 1
a1471 1
new-stage[+id+]-end:
d1479 2
a1480 2
.PHONY: new-stage[+id+]-bubble
new-stage[+id+]-bubble: [+ IF prev +]new-stage[+prev+]-bubble[+ ENDIF +]
d1484 2
a1485 1
	  $(MAKE) all-stage[+id+]-gcc [+ IF next +] && \
d1490 1
a1490 1
	  $(MAKE) all-stage[+id+]-gcc ; \
d1495 1
a1495 1
	$(MAKE) new-stage[+id+]-start
d1525 1
a1525 1
	$(MAKE) new-stage[+id+]-start
d1538 1
a1538 1
	[ -f stage_last ] && $(MAKE) new-`cat stage_last`-end || :
d1563 1
a1563 1
	$(MAKE) new-stage[+id+]-bubble [+
d1566 1
a1566 1
	  new-stage[+id+]-start all new-stage[+id+]-end 
d1569 1
a1569 1
.PHONY: new-restage[+id+] distclean-stage[+id+]
d1572 1
a1572 1
	[ -f stage_last ] && $(MAKE) new-`cat stage_last`-end || :
d1576 1
a1576 1
new-restage[+id+]: [+ IF next +] distclean-stage[+next+] [+ ENDIF next +]
d1579 1
a1579 1
	$(MAKE) [+
d1589 1
@


1.101
log
@2005-05-24  Paolo Bonzini <bonzini@@gnu.org>

	* configure.in: Test the ability to symlink directories.
	* configure: Regenerate.

	* Makefile.def (bootstrap-stage): New definitions.
	* Makefile.tpl (configure-stage1-gcc,
	configure-stage2-gcc, configure-stage3-gcc,
	all-stage1-gcc, all-stage2-gcc, all-stage3-gcc,
	new-bootstrap, new-cleanstrap, new-restage1, new-restage2,
	new-restage3, compare): Autogenerate, see Makefile.in
	entry for behavioral changes.
	(distclean-stage1, new-stage1-start, new-stage1-end,
	new-stage1-bubble, distclean-stage2, new-stage2-start,
	new-stage2-end, new-stage2-bubble, distclean-stage3,
	new-stage3-start, new-stage3-end): New autogenerated targets.
	(objext, prebootstrap, BOOT_CFLAGS,
	POSTSTAGE1_FLAGS_TO_PASS): Move above the autogenerated
	targets.

	* Makefile.in: Regenerate.
	(distclean-stage1, new-stage1-start, new-stage1-end,
	new-stage1-bubble, distclean-stage2, new-stage2-start,
	new-stage2-end, new-stage2-bubble, distclean-stage3,
	new-stage3-start, new-stage3-end): New targets.
	(all-stage1-gcc): Move prebootstrap dependency from here...
	(configure-stage1-gcc): ...to here.
	(new-bootstrap): Use bubble targets.
	(new-cleanstrap, new-restage1, new-restage2, new-restage3):
	Use per-stage distclean targets.
	(configure-stage1-gcc, configure-stage2-gcc,
	configure-stage3-gcc, all-stage1-gcc,
	all-stage2-gcc, all-stage3-gcc, new-bootstrap):
	Use new-stageN-start to prepare the tree.
@
text
@d9 1
a9 1
#   1999, 2000, 2001, 2002, 2003 Free Software Foundation
d114 20
d140 34
d183 29
d735 1
d791 1
a791 15
	AR="$(AR_FOR_BUILD)"; export AR; \
	AS="$(AS_FOR_BUILD)"; export AS; \
	CC="$(CC_FOR_BUILD)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_BUILD)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CXX="$(CXX_FOR_BUILD)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_BUILD)"; export GCJ; \
	GFORTRAN="$(GFORTRAN_FOR_BUILD)"; export GFORTRAN; \
	DLLTOOL="$(DLLTOOL_FOR_BUILD)"; export DLLTOOL; \
	LD="$(LD_FOR_BUILD)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_BUILD)"; export LDFLAGS; \
	NM="$(NM_FOR_BUILD)"; export NM; \
	RANLIB="$(RANLIB_FOR_BUILD)"; export RANLIB; \
	WINDRES="$(WINDRES_FOR_BUILD)"; export WINDRES; \
d841 1
d859 1
a859 16
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
d886 1
d906 1
d917 1
d936 1
d962 1
d999 1
a999 7
	$(SET_LIB_PATH) \
	AR="$(AR_FOR_TARGET)"; export AR; \
	AS="$(AS_FOR_TARGET)"; export AS; \
	CC="$(CC_FOR_TARGET)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CPPFLAGS="$(CFLAGS_FOR_TARGET)"; export CPPFLAGS; \[+ 
d1001 1
a1001 2
	CXX_FOR_TARGET="$(RAW_CXX_FOR_TARGET)"; export CXX_FOR_TARGET; \
	CXX="$(RAW_CXX_FOR_TARGET)"; export CXX; \[+ 
d1003 1
a1003 1
	CXX="$(CXX_FOR_TARGET)"; export CXX; \[+ 
a1004 9
	CXXFLAGS="$(CXXFLAGS_FOR_TARGET)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_TARGET)"; export GCJ; \
	GFORTRAN="$(GFORTRAN_FOR_TARGET)"; export GFORTRAN; \
	DLLTOOL="$(DLLTOOL_FOR_TARGET)"; export DLLTOOL; \
	LD="$(LD_FOR_TARGET)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_TARGET)"; export LDFLAGS; \
	NM="$(NM_FOR_TARGET)"; export NM; \
	RANLIB="$(RANLIB_FOR_TARGET)"; export RANLIB; \
	WINDRES="$(WINDRES_FOR_TARGET)"; export WINDRES; \
d1054 6
a1059 1
	$(SET_LIB_PATH) \
d1079 6
a1084 1
	$(SET_LIB_PATH) \
d1105 6
a1110 1
	$(SET_LIB_PATH) \
d1133 6
a1138 1
	$(SET_LIB_PATH) \
d1179 1
a1179 19
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	GMPLIBS="$(HOST_GMPLIBS)"; export GMPLIBS; \
	GMPINC="$(HOST_GMPINC)"; export GMPINC; \
d1208 1
d1236 1
d1256 1
d1269 1
d1280 1
d1289 1
d1308 1
d1320 1
d1339 1
d1361 1
d1385 1
d1502 3
a1504 22
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	GMPLIBS="$(HOST_GMPLIBS)"; export GMPLIBS; \
	GMPINC="$(HOST_GMPINC)"; export GMPINC [+ IF prev +] ; \
	CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC; \
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC_FOR_BUILD [+ ELSE +] ; \
	CC="$(CC)"; export CC; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD [+ ENDIF prev +] ; \
d1526 3
a1528 1
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1531 1
a1531 2
		CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
@


1.100
log
@2004-05-23  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (host_modules): add libcpp.
	* Makefile.tpl: Add dependencies on and for libcpp.
	* Makefile.in: Regenerate.
	* configure.in: Add libcpp host module.
	* configure: Regenerate.

config/ChangeLog:

2004-05-23  Paolo Bonzini  <bonzini@@gnu.org>

	* acx.m4 (ACX_HEADER_STDBOOL, ACX_HEADER_STRING):
	From gcc.
@
text
@d1344 20
a1363 10
# We name the directories for the various stages "stage1-gcc",
# "stage2-gcc","stage3-gcc", etc.  
# Unfortunately, the 'compare' process will fail (on debugging information)
# if any directory names are different!
# So in the building rule for each stage, we relocate them before and after.
# The current one is 'gcc', while the previous one is 'prev-gcc'.  (The
# current one must be 'gcc' for now because the scripts in that directory
# assume it.)
# At the end of the bootstrap, 'stage3-gcc' must be moved to 'gcc' so that
# libraries can find it.  Ick!
d1379 2
a1380 57
# For stage 1:
# * We force-disable intermodule optimizations, even if
#   --enable-intermodule was passed, since the installed compiler probably
#   can't handle them.  Luckily, autoconf always respects
#   the last argument when conflicting --enable arguments are passed.
# * Likewise, we force-disable coverage flags, since the installed compiler
#   probably has never heard of them.
# * We build only C (and possibly Ada).
configure-stage1-gcc:
	echo configure-stage1-gcc > stage_last ; \
	if [ -f stage1-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage1-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage1-gcc ] || mkdir stage1-gcc; \
	mv stage1-gcc gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	echo Configuring stage 1 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} \
	  --disable-intermodule --disable-coverage \
	  --enable-languages="$(STAGE1_LANGUAGES)"; \
	cd .. ; \
	mv gcc stage1-gcc ; \
	$(STAMP) configure-stage1-gcc
a1387 66
all-stage1-gcc: configure-stage1-gcc prebootstrap
	echo all-stage1-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage1-gcc gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
		CFLAGS="$(STAGE1_CFLAGS)" && $(STAMP) ../all-stage1-gcc ; \
	result=$$? ; \
	cd .. ; \
	mv gcc stage1-gcc ; \
	exit $$result

# TODO: Deal with STAGE_PREFIX (which is only for ada, incidentally)
# Possibly pass --enable-werror-always (depending on --enable-werror);
# that's what @@stage2_werror_flag@@ is for
configure-stage2-gcc: all-stage1-gcc
	echo configure-stage2-gcc > stage_last ; \
	if [ -f stage2-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage2-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage2-gcc ] || mkdir stage2-gcc; \
	mv stage2-gcc gcc ; \
	mv stage1-gcc prev-gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC; \
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC_FOR_BUILD; \
	echo Configuring stage 2 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} @@stage2_werror_flag@@ ; \
	cd .. ; \
	mv gcc stage2-gcc ; \
	mv prev-gcc stage1-gcc ; \
	$(STAMP) configure-stage2-gcc

d1394 45
a1438 22
all-stage2-gcc: all-stage1-gcc configure-stage2-gcc
	echo all-stage2-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage2-gcc gcc ; \
	mv stage1-gcc prev-gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
		CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		STAGE_PREFIX=$$r/prev-gcc/ \
		$(POSTSTAGE1_FLAGS_TO_PASS) && $(STAMP) ../all-stage2-gcc ; \
	result=$$? ; \
	cd .. ; \
	mv prev-gcc stage1-gcc ; \
	mv gcc stage2-gcc ; \
	exit $$result

configure-stage3-gcc: all-stage2-gcc
	echo configure-stage3-gcc > stage_last ; \
	if [ -f stage3-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage3-gcc ; \
a1442 3
	[ -d stage3-gcc ] || mkdir stage3-gcc; \
	mv stage3-gcc gcc ; \
	mv stage2-gcc prev-gcc ; \
d1460 2
d1463 4
a1466 2
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC_FOR_BUILD; \
	echo Configuring stage 3 in gcc; \
d1480 3
a1482 5
	  $(HOST_CONFIGARGS) $${srcdiroption} @@stage2_werror_flag@@ ; \
	cd .. ; \
	mv gcc stage3-gcc ; \
	mv prev-gcc stage2-gcc ; \
	$(STAMP) configure-stage3-gcc
d1484 3
a1486 3
all-stage3-gcc: all-stage2-gcc configure-stage3-gcc
	echo all-stage3-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
a1487 2
	mv stage2-gcc prev-gcc ; \
	mv stage3-gcc gcc ; \
d1489 1
a1489 1
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
d1492 2
a1493 7
		STAGE_PREFIX=$$r/prev-gcc/ \
		$(POSTSTAGE1_FLAGS_TO_PASS) && $(STAMP) ../all-stage3-gcc \
	result=$$? ; \
	cd .. ; \
	mv prev-gcc stage2-gcc ; \
	mv gcc stage3-gcc ; \
	exit $$result
d1495 4
a1498 5
# We only want to compare .o files, so set this!
objext = .o

compare: all-stage3-gcc
	r=`${PWD_COMMAND}`; export r; \
d1501 1
a1501 1
	cd stage3-gcc; \
d1505 1
a1505 1
	  f1=$$r/stage2-gcc/$$file; f2=$$r/stage3-gcc/$$file; \
d1516 30
a1545 1
        $(STAMP) compare
d1547 1
a1547 32
.PHONY: new-bootstrap
# This target exists so that everything can be made in one pass.
# 'all-gcc' has to avoid stomping on the bootstrap-generated gcc for
# this to work.
new-bootstrap: compare
	mv stage3-gcc gcc ; \
	$(MAKE) all ; \
	mv gcc stage3-gcc

new-cleanstrap:
	rm -rf configure-stage1-gcc all-stage1-gcc stage1-gcc \
	  configure-stage2-gcc all-stage2-gcc stage2-gcc \
	  configure-stage3-gcc all-stage3-gcc stage3-gcc \
	  compare
	$(MAKE) new-bootstrap

new-restage1:
	rm -rf all-stage1-gcc \
	  configure-stage2-gcc all-stage2-gcc stage2-gcc \
	  configure-stage3-gcc all-stage3-gcc stage3-gcc \
	  compare
	$(MAKE) all-stage1-gcc

new-restage2: all-stage1-gcc
	rm -rf all-stage2-gcc \
	  configure-stage3-gcc all-stage3-gcc stage3-gcc \
	  compare
	$(MAKE) all-stage2-gcc

new-restage3: all-stage2-gcc
	rm -rf all-stage3-gcc compare
	$(MAKE) compare
@


1.99
log
@2004-05-21  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl: Whenever a recursive target is defined, wrap
	it in a special @@if/@@endif block, and prepare its maybe
	dependency in the @@if/@@endif block
	* configure.in: Instead of writing maybe dependencies, remove
	the @@if/@@endif statements, and remove the @@if/@@endif blocks
	that remain.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d1663 3
a1665 1
all-gcc: maybe-all-libiberty maybe-all-intl maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib maybe-all-libbanshee
d1668 1
a1668 1
all-gcc: maybe-all-build-libiberty maybe-all-libbanshee
@


1.98
log
@	* Makefile.def, Makefile.tpl, configure.in: Remove all mention
	of libf2c.
	* configure, Makefile.in: Regenerate.
@
text
@d700 2
d762 1
d766 2
d772 1
d781 2
d820 1
d824 2
d834 1
d838 2
d864 1
d868 2
d882 1
d888 2
d914 1
d924 2
d1000 1
d1004 2
d1016 1
d1020 2
d1037 1
d1041 2
d1054 1
d1060 2
d1086 1
d1106 2
d1149 1
d1156 2
d1170 1
d1248 2
d1273 1
d1277 2
d1288 1
d1315 2
d1336 1
a1764 4

# Dependencies of maybe-foo on foo.  These are used because, for example,
# all-gcc only depends on all-gas if gas is present and being configured.
@@maybe_dependencies@@
@


1.97
log
@merge from gcc
@
text
@a1688 2
configure-target-libf2c: $(ALL_GCC_C)
all-target-libf2c: maybe-all-target-libiberty
@


1.96
log
@merge from gcc:
2004-04-27  Paolo Bonzini  <bonzini@@gnu.org>

	Revert:
	2004-04-26  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (flags_to_pass): Remove *dir variables that
	are passed to the modules via TOPLEVEL_CONFIGURE_ARGUMENTS,
	as well as prefix and exec_prefix.
	* Makefile.in: Regenerate.

2004-04-26  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (host_modules): Mark with the bootstrap
	flag packages on which gcc depends.
	* Makefile.tpl (all-bootstrap): Use it.
	* Makefile.in: Regenerate.

2004-04-26  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.def (flags_to_pass): Remove *dir variables that
	are passed to the modules via TOPLEVEL_CONFIGURE_ARGUMENTS,
	as well as prefix and exec_prefix.
	* Makefile.in: Regenerate.

2004-04-26  Paolo Bonzini  <bonzini@@gnu.org>

        * configure.in: Invoke ACX_PROG_CMP_IGNORE_INITIAL.
        * configure: Regenerate.
        * config/acx.m4: Mutuate ACX_PROG_CMP_IGNORE_INITIAL from gcc.
        * gcc/Makefile.tpl (compare): Use the result of the test.
        * gcc/Makefile.in: Regenerate.

2004-04-23  Paolo Bonzini  <bonzini@@gnu.org>

	* Makefile.tpl (all-stage1-gcc, all-stage2-gcc, all-stage3-gcc):
	Always relocate gcc and prev-gcc to the original names, even
	if the build fails.
	(new-cleanstrap, new-restage1, new-restage2, new-restage3):
	New targets.
@
text
@d108 1
a108 1
BUILD_CONFIGDIRS = libiberty
d130 4
d251 1
a251 1
TARGET_LIB_PATH = $$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs:
d318 1
d713 1
d930 1
d1093 2
d1612 1
a1612 1
all-gcc: maybe-all-libiberty maybe-all-intl maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib
d1615 1
a1615 1
all-gcc: maybe-all-build-libiberty
d1691 1
@


1.95
log
@Fix LDFLAGS related configure errors.
* Makefile.tpl (configure-[+module+], configure-gcc,
configure-stage1-gcc, configure-stage2-gcc, configure-stage3-gcc):
Set and export LDFLAGS.
* Makefile.in: Regenerate.
@
text
@d1380 2
a1381 2
		CFLAGS="$(STAGE1_CFLAGS)" \
		|| exit 1 ; \
d1384 1
a1384 1
	$(STAMP) all-stage1-gcc
d1456 2
a1457 1
		$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \
d1461 1
a1461 1
	$(STAMP) all-stage2-gcc
d1524 2
a1525 1
		$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \
d1529 1
a1529 1
	$(STAMP) all-stage3-gcc
d1542 2
a1543 2
	  cmp --ignore-initial=16 $$r/stage2-gcc/$$file $$r/stage3-gcc/$$file \
	      > /dev/null 2>&1; \
d1564 24
d1607 1
a1607 1
all-bootstrap: maybe-all-libiberty maybe-all-intl maybe-all-texinfo maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib
@


1.94
log
@2004-04-09  Nathanael Nerode  <neroden@@gcc.gnu.org>

	PR bootstrap/14871
	* Makefile.tpl: If we don't have built-in-tree target tools,
	use the ones found by configure rather than hacking around with
	program_transform_name.
	* configure.in: Give Makefile.tpl the information necessary
	to do that.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

2004-04-06  Nathanael Nerode  <neroden@@gcc.gnu.org>

	PR bootstrap/14760
	* configure.in: When computing baseargs, strip *all* copies of
	offending options.  Also, don't match/substitute the trailing space,
	so that this actually works when two similar options are separated by
	only one space.
	* configure: Regenerate.

2004-04-06  David Edelsohn  <edelsohn@@gnu.org>

        * configure.in (powerpc-*-aix*): Remove target-libada from noconfigdirs.
        (rs6000-*-aix*): Same.
        * configure: Regenerate.
@
text
@d784 1
d1080 1
d1340 1
d1411 1
d1484 1
@


1.93
log
@	* Makefile.tpl (top level bootstrap support): Remove now-unneeded
	STRICT_WARN, WARN_CFLAGS flags passed down to make.
	* Makefile.in: Regenerate.
@
text
@d252 1
d260 1
a260 1
       echo ar | sed '$(program_transform_name)' ; \
d265 1
d275 1
a275 1
       echo as | sed '$(program_transform_name)' ; \
d301 1
d309 1
a309 1
       echo dlltool | sed '$(program_transform_name)' ; \
d316 1
d326 1
a326 1
       echo ld | sed '$(program_transform_name)' ; \
d333 1
d343 1
a343 1
       echo nm | sed '$(program_transform_name)' ; \
d348 1
d360 1
a360 1
       echo ranlib | sed '$(program_transform_name)' ; \
d365 1
d373 1
a373 1
       echo windres | sed '$(program_transform_name)' ; \
@


1.92
log
@	* configure.in (top level bootstrap support): Rework --enable-werror
	to set @@stage2_werror_flag@@.
	* configure: Regenerate.
	* Makefile.tpl (top level bootstrap support): Pass
	@@stage2_werror_flag@@ down to configure in stages 2 and 3.
	* Makefile.in: Regenerate.
@
text
@d1432 1
a1432 3
	ADAC="\$$(CC)" \
	WARN_CFLAGS="\$$(GCC_WARN_CFLAGS)" \
	STRICT_WARN="\$$(STRICT2_WARN)"
@


1.91
log
@2004-03-23  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl (new-bootstrap): Set CC and CC_FOR_BUILD in configure
	for stages 2 and 3 as well as in make.  As a consequence, remove
	OUTPUT_OPTION (now detected by configure) from the flags passed down
	to make.
	* Makefile.in: Regenerate.

	* Makefile.tpl (new-bootstrap): Fix typo.
	* Makefile.in: Regenerate.
@
text
@d1377 2
d1422 1
a1422 1
	  $(HOST_CONFIGARGS) $${srcdiroption} ; \
d1496 1
a1496 1
	  $(HOST_CONFIGARGS) $${srcdiroption} ; \
@


1.90
log
@	* Makefile.tpl: Rearrange by moving recursive_targets rules
	into their proper sections.
	* Makefile.tpl (top level bootstrap support): Move disabling
	of coverage flags from 'make' to 'configure'; improve comments.
	* Makefile.in: Regenerate.

	* Makefile.tpl (experimental top level bootstrap) Move stage1
	language setting from all- target to configure- target; disable
	intermodule optimization in stage 1; prevent gratuitous rebuilds
	of stage 1.
	* Makefile.in: Regenerate.
	* configure.in: Comma-separate stage 1 language list for top
	level bootstrap.
	* configure: Regenerate.

	* Makefile.tpl: Clean up experimental top level bootstrap support:
	note known problems; set CONFIG_SHELL; don't set BUILD_CC; relocate
	prev-gcc in configure- targets as well as all- targets.
	* Makefile.in: Regenerate.
@
text
@a1391 1
	CC="$(CC)"; export CC; \
a1396 1
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
d1404 2
d1432 1
a1432 2
	STRICT_WARN="\$$(STRICT2_WARN)" \
	OUTPUT_OPTION="-o \$$@@"
d1461 1
a1461 1
	mv stage1-gcc prev-gcc ; \
a1465 1
	CC="$(CC)"; export CC; \
a1470 1
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
d1478 2
@


1.89
log
@2004-03-17  Paolo Bonzini  <bonzini@@gnu.org>

	* configure.in: Remove symbolic link section.
	* configure: Regenerate.
	* Makefile.tpl (links): Remove.
	* Makefile.in: Regenerate.
@
text
@a517 83

# GCC, the eternal special case
.PHONY: maybe-[+make_target+]-gcc [+make_target+]-gcc
maybe-[+make_target+]-gcc:
[+make_target+]-gcc: [+
  FOR depend +]\
    [+depend+]-gcc [+
  ENDFOR depend +]
	@@[ -f ./gcc/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	for flag in $(EXTRA_GCC_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	echo "Doing [+make_target+] in gcc" ; \
	(cd gcc && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1

# Host modules.
[+ FOR host_modules +]
.PHONY: maybe-[+make_target+]-[+module+] [+make_target+]-[+module+]
maybe-[+make_target+]-[+module+]:
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-[+module+]:
[+ ELSE +]
[+make_target+]-[+module+]: [+
  FOR depend +]\
    [+depend+]-[+module+] [+
  ENDFOR depend +]
	@@[ -f ./[+module+]/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	for flag in $(EXTRA_HOST_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	echo "Doing [+make_target+] in [+module+]" ; \
	(cd [+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1
[+ ENDIF +]
[+ ENDFOR host_modules +]

# Target modules.
[+ FOR target_modules +]
.PHONY: maybe-[+make_target+]-target-[+module+] [+make_target+]-target-[+module+]
maybe-[+make_target+]-target-[+module+]:
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-target-[+module+]:
[+ ELSE +]
[+make_target+]-target-[+module+]: [+
  FOR depend +]\
    [+depend+]-target-[+module+] [+
  ENDFOR depend +]
	@@[ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] || exit 0 ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	echo "Doing [+make_target+] in $(TARGET_SUBDIR)/[+module+]" ; \
	for flag in $(EXTRA_TARGET_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1
[+ ENDIF +]
[+ ENDFOR target_modules +]
d851 30
d1007 30
d1245 26
d1300 8
d1320 2
a1325 1
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
d1350 3
a1352 1
	  $(HOST_CONFIGARGS) $${srcdiroption} ; \
d1357 7
a1363 1
all-stage1-gcc: configure-stage1-gcc all-bootstrap
a1369 1
                LANGUAGES="$(STAGE1_LANGUAGES)" \
d1371 1
a1371 1
		COVERAGE_FLAGS= || exit 1 ; \
d1376 1
d1387 1
d1390 2
a1395 1
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
d1423 1
a1443 1
		BUILD_CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
d1462 1
d1465 2
a1470 1
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
d1498 1
a1500 5
# Some files might not exist.  This is disabled 'cause it don't work.
# cp prev-gcc/objc/objc-parse.c gcc/objc/objc-parse.c || true ; \
# cp prev-gcc/java/parse.c gcc/java/parse.c || true ; \
# cp prev-gcc/java/parse-scan.c gcc/java/parse-scan.c || true ; \

a1509 1
		BUILD_CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
@


1.88
log
@2004-03-15  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Introduce experimental top level bootstrap support.
	* Makefile.in: Regenerate.
	* configure.in: Introduce support for top level bootstrap.
	* configure: Regenerate.
@
text
@a75 1
links=@@configlinks@@
@


1.87
log
@	PR bootstrap/7087
	* Makefile.tpl: Guard XFOO sed statements better.
	* Makefile.tpl: Add dependency for configure-target-libada.
	* Makefile.in: Regenerate (incidentally fixes broken
	commit when libada-branch was merged).
@
text
@d1075 2
d1081 1
d1124 5
a1128 3
	@@if [ -f gcc/stage_last ] ; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
a1131 2
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1268 264
@


1.87.4.1
log
@Merge with mainline cagney_tramp-20040321-mergepoint.
@
text
@d76 1
a1074 2

# We must skip configuring if toplevel bootstrap is going.
a1078 1
	[ -f stage_last ] && exit 0; \
d1121 3
a1123 5
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	if [ -f stage_last ] ; then \
	  true ; \
	elif [ -f gcc/stage_last ] ; then \
d1127 2
a1264 264

# ---------------------
# GCC bootstrap support
# ---------------------

# We name the directories for the various stages "stage1-gcc",
# "stage2-gcc","stage3-gcc", etc.  
# Unfortunately, the 'compare' process will fail (on debugging information)
# if any directory names are different!
# So in the building rule for each stage, we relocate them before and after.
# The current one is 'gcc', while the previous one is 'prev-gcc'.  (The
# current one must be 'gcc' for now because the scripts in that directory
# assume it.)
# At the end of the bootstrap, 'stage3-gcc' must be moved to 'gcc' so that
# libraries can find it.  Ick!

# Bugs: This is almost certainly not parallel-make safe.

# 'touch' doesn't work right on some platforms.
STAMP = echo timestamp > 

# Only build the C compiler for stage1, because that is the only one that
# we can guarantee will build with the native compiler, and also it is the
# only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),
# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them
# overrideable (for a bootstrap build stage1 also builds gcc.info).

STAGE1_CFLAGS=@@stage1_cflags@@
STAGE1_LANGUAGES=@@stage1_languages@@

configure-stage1-gcc:
	echo configure-stage1-gcc > stage_last ; \
	if [ -f stage1-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage1-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage1-gcc ] || mkdir stage1-gcc; \
	mv stage1-gcc gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	echo Configuring stage 1 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} ; \
	cd .. ; \
	mv gcc stage1-gcc ; \
	$(STAMP) configure-stage1-gcc

all-stage1-gcc: configure-stage1-gcc all-bootstrap
	echo all-stage1-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage1-gcc gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
                LANGUAGES="$(STAGE1_LANGUAGES)" \
		CFLAGS="$(STAGE1_CFLAGS)" \
		COVERAGE_FLAGS= || exit 1 ; \
	cd .. ; \
	mv gcc stage1-gcc ; \
	$(STAMP) all-stage1-gcc

configure-stage2-gcc: all-stage1-gcc
	echo configure-stage2-gcc > stage_last ; \
	if [ -f stage2-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage2-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage2-gcc ] || mkdir stage2-gcc; \
	mv stage2-gcc gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	echo Configuring stage 2 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} ; \
	cd .. ; \
	mv gcc stage2-gcc ; \
	$(STAMP) configure-stage2-gcc

# Flags to pass to stage2 and later makes.
BOOT_CFLAGS= -g -O2
POSTSTAGE1_FLAGS_TO_PASS = \
	CFLAGS="$(BOOT_CFLAGS)" \
	ADAC="\$$(CC)" \
	WARN_CFLAGS="\$$(GCC_WARN_CFLAGS)" \
	STRICT_WARN="\$$(STRICT2_WARN)" \
	OUTPUT_OPTION="-o \$$@@"

all-stage2-gcc: all-stage1-gcc configure-stage2-gcc
	echo all-stage2-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage2-gcc gcc ; \
	mv stage1-gcc prev-gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
		CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		BUILD_CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		STAGE_PREFIX=$$r/prev-gcc/ \
		$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \
	cd .. ; \
	mv prev-gcc stage1-gcc ; \
	mv gcc stage2-gcc ; \
	$(STAMP) all-stage2-gcc

configure-stage3-gcc: all-stage2-gcc
	echo configure-stage3-gcc > stage_last ; \
	if [ -f stage3-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage3-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage3-gcc ] || mkdir stage3-gcc; \
	mv stage3-gcc gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	echo Configuring stage 3 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} ; \
	cd .. ; \
	mv gcc stage3-gcc ; \
	$(STAMP) configure-stage3-gcc

# Some files might not exist.  This is disabled 'cause it don't work.
# cp prev-gcc/objc/objc-parse.c gcc/objc/objc-parse.c || true ; \
# cp prev-gcc/java/parse.c gcc/java/parse.c || true ; \
# cp prev-gcc/java/parse-scan.c gcc/java/parse-scan.c || true ; \

all-stage3-gcc: all-stage2-gcc configure-stage3-gcc
	echo all-stage3-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage2-gcc prev-gcc ; \
	mv stage3-gcc gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
		CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		BUILD_CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		STAGE_PREFIX=$$r/prev-gcc/ \
		$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \
	cd .. ; \
	mv prev-gcc stage2-gcc ; \
	mv gcc stage3-gcc ; \
	$(STAMP) all-stage3-gcc

# We only want to compare .o files, so set this!
objext = .o

compare: all-stage3-gcc
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	rm -f .bad_compare ; \
	cd stage3-gcc; \
	files=`find . -name "*$(objext)" -print` ; \
	cd .. ; \
	for file in $${files} ; do \
	  cmp --ignore-initial=16 $$r/stage2-gcc/$$file $$r/stage3-gcc/$$file \
	      > /dev/null 2>&1; \
	  test $$? -eq 1 && echo $$file differs >> .bad_compare || true; \
	done ; \
	if [ -f .bad_compare ]; then \
	  echo "Bootstrap comparison failure!"; \
	  cat .bad_compare; \
	  exit 1; \
	else \
	  true; \
	fi ; \
        $(STAMP) compare

.PHONY: new-bootstrap
# This target exists so that everything can be made in one pass.
# 'all-gcc' has to avoid stomping on the bootstrap-generated gcc for
# this to work.
new-bootstrap: compare
	mv stage3-gcc gcc ; \
	$(MAKE) all ; \
	mv gcc stage3-gcc
@


1.86
log
@* Makefile.def (target_modules) [libtermcap, libiberty, zlib]: Stage.
* Makefile.tpl (configure-target-[+module+]): Support stage.
* Makefile.in: Rebuilt.
@
text
@d462 9
a470 9
	"`echo 'LANGUAGES=$(LANGUAGES)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'STMP_FIXPROTO=$(STMP_FIXPROTO)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'LIMITS_H_TEST=$(LIMITS_H_TEST)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'LIBGCC2_CFLAGS=$(LIBGCC2_CFLAGS)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'LIBGCC2_DEBUG_CFLAGS=$(LIBGCC2_DEBUG_CFLAGS)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'LIBGCC2_INCLUDES=$(LIBGCC2_INCLUDES)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'STAGE1_CFLAGS=$(STAGE1_CFLAGS)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'BOOT_CFLAGS=$(BOOT_CFLAGS)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'BOOT_ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s/.*=$$/XFOO=/`"
d1357 1
@


1.86.6.1
log
@Additional merges to branch for 2.15.
@
text
@a860 1
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
a1092 1
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
@


1.86.8.1
log
@Merge mainline to intercu branch.
@
text
@d76 1
d462 9
a470 9
	"`echo 'LANGUAGES=$(LANGUAGES)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'STMP_FIXPROTO=$(STMP_FIXPROTO)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIMITS_H_TEST=$(LIMITS_H_TEST)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIBGCC2_CFLAGS=$(LIBGCC2_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIBGCC2_DEBUG_CFLAGS=$(LIBGCC2_DEBUG_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'LIBGCC2_INCLUDES=$(LIBGCC2_INCLUDES)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'STAGE1_CFLAGS=$(STAGE1_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'BOOT_CFLAGS=$(BOOT_CFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`" \
	"`echo 'BOOT_ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`"
d519 83
a934 30

# Other targets (info, dvi, etc.)
[+ FOR recursive_targets +]
.PHONY: maybe-[+make_target+]-[+module+] [+make_target+]-[+module+]
maybe-[+make_target+]-[+module+]:
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-[+module+]:
[+ ELSE +]
[+make_target+]-[+module+]: [+
  FOR depend +]\
    [+depend+]-[+module+] [+
  ENDFOR depend +]
	@@[ -f ./[+module+]/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	for flag in $(EXTRA_HOST_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	echo "Doing [+make_target+] in [+module+]" ; \
	(cd [+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1
[+ ENDIF +]
[+ ENDFOR recursive_targets +]
a1060 30

# Other targets (info, dvi, etc.)
[+ FOR recursive_targets +]
.PHONY: maybe-[+make_target+]-target-[+module+] [+make_target+]-target-[+module+]
maybe-[+make_target+]-target-[+module+]:
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-target-[+module+]:
[+ ELSE +]
[+make_target+]-target-[+module+]: [+
  FOR depend +]\
    [+depend+]-target-[+module+] [+
  ENDFOR depend +]
	@@[ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] || exit 0 ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	echo "Doing [+make_target+] in $(TARGET_SUBDIR)/[+module+]" ; \
	for flag in $(EXTRA_TARGET_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1
[+ ENDIF +]
[+ ENDFOR recursive_targets +]
a1074 2

# We must skip configuring if toplevel bootstrap is going.
a1078 1
	[ -f stage_last ] && exit 0; \
d1121 3
a1123 5
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	if [ -f stage_last ] ; then \
	  true ; \
	elif [ -f gcc/stage_last ] ; then \
d1127 2
a1265 305
# Other targets (dvi, info, etc.)
[+ FOR recursive_targets +]
.PHONY: maybe-[+make_target+]-gcc [+make_target+]-gcc
maybe-[+make_target+]-gcc:
[+make_target+]-gcc: [+
  FOR depend +]\
    [+depend+]-gcc [+
  ENDFOR depend +]
	@@[ -f ./gcc/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	for flag in $(EXTRA_GCC_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	echo "Doing [+make_target+] in gcc" ; \
	(cd gcc && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1

[+ ENDFOR recursive_targets +]

# ---------------------
# GCC bootstrap support
# ---------------------

# We name the directories for the various stages "stage1-gcc",
# "stage2-gcc","stage3-gcc", etc.  
# Unfortunately, the 'compare' process will fail (on debugging information)
# if any directory names are different!
# So in the building rule for each stage, we relocate them before and after.
# The current one is 'gcc', while the previous one is 'prev-gcc'.  (The
# current one must be 'gcc' for now because the scripts in that directory
# assume it.)
# At the end of the bootstrap, 'stage3-gcc' must be moved to 'gcc' so that
# libraries can find it.  Ick!

# Bugs: This is almost certainly not parallel-make safe.

# 'touch' doesn't work right on some platforms.
STAMP = echo timestamp > 

# Only build the C compiler for stage1, because that is the only one that
# we can guarantee will build with the native compiler, and also it is the
# only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),
# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them
# overrideable (for a bootstrap build stage1 also builds gcc.info).

STAGE1_CFLAGS=@@stage1_cflags@@
STAGE1_LANGUAGES=@@stage1_languages@@

# For stage 1:
# * We force-disable intermodule optimizations, even if
#   --enable-intermodule was passed, since the installed compiler probably
#   can't handle them.  Luckily, autoconf always respects
#   the last argument when conflicting --enable arguments are passed.
# * Likewise, we force-disable coverage flags, since the installed compiler
#   probably has never heard of them.
# * We build only C (and possibly Ada).
configure-stage1-gcc:
	echo configure-stage1-gcc > stage_last ; \
	if [ -f stage1-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage1-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage1-gcc ] || mkdir stage1-gcc; \
	mv stage1-gcc gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	echo Configuring stage 1 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} \
	  --disable-intermodule --disable-coverage \
	  --enable-languages="$(STAGE1_LANGUAGES)"; \
	cd .. ; \
	mv gcc stage1-gcc ; \
	$(STAMP) configure-stage1-gcc

# Real targets act phony if they depend on phony targets; this hack
# prevents gratuitous rebuilding of stage 1.
prebootstrap:
	$(MAKE) all-bootstrap
	$(STAMP) prebootstrap

all-stage1-gcc: configure-stage1-gcc prebootstrap
	echo all-stage1-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage1-gcc gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
		CFLAGS="$(STAGE1_CFLAGS)" \
		|| exit 1 ; \
	cd .. ; \
	mv gcc stage1-gcc ; \
	$(STAMP) all-stage1-gcc

# TODO: Deal with STAGE_PREFIX (which is only for ada, incidentally)
# Possibly pass --enable-werror-always (depending on --enable-werror);
# that's what @@stage2_werror_flag@@ is for
configure-stage2-gcc: all-stage1-gcc
	echo configure-stage2-gcc > stage_last ; \
	if [ -f stage2-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage2-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage2-gcc ] || mkdir stage2-gcc; \
	mv stage2-gcc gcc ; \
	mv stage1-gcc prev-gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC; \
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC_FOR_BUILD; \
	echo Configuring stage 2 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} @@stage2_werror_flag@@ ; \
	cd .. ; \
	mv gcc stage2-gcc ; \
	mv prev-gcc stage1-gcc ; \
	$(STAMP) configure-stage2-gcc

# Flags to pass to stage2 and later makes.
BOOT_CFLAGS= -g -O2
POSTSTAGE1_FLAGS_TO_PASS = \
	CFLAGS="$(BOOT_CFLAGS)" \
	ADAC="\$$(CC)"

all-stage2-gcc: all-stage1-gcc configure-stage2-gcc
	echo all-stage2-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage2-gcc gcc ; \
	mv stage1-gcc prev-gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
		CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		STAGE_PREFIX=$$r/prev-gcc/ \
		$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \
	cd .. ; \
	mv prev-gcc stage1-gcc ; \
	mv gcc stage2-gcc ; \
	$(STAMP) all-stage2-gcc

configure-stage3-gcc: all-stage2-gcc
	echo configure-stage3-gcc > stage_last ; \
	if [ -f stage3-gcc/Makefile ] ; then \
	  $(STAMP) configure-stage3-gcc ; \
	  exit 0; \
	else \
	  true ; \
	fi ; \
	[ -d stage3-gcc ] || mkdir stage3-gcc; \
	mv stage3-gcc gcc ; \
	mv stage2-gcc prev-gcc ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC; \
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC_FOR_BUILD; \
	echo Configuring stage 3 in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} @@stage2_werror_flag@@ ; \
	cd .. ; \
	mv gcc stage3-gcc ; \
	mv prev-gcc stage2-gcc ; \
	$(STAMP) configure-stage3-gcc

all-stage3-gcc: all-stage2-gcc configure-stage3-gcc
	echo all-stage3-gcc > stage_last ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	mv stage2-gcc prev-gcc ; \
	mv stage3-gcc gcc ; \
	cd gcc && \
	$(MAKE) $(GCC_FLAGS_TO_PASS) \
		CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/" \
		STAGE_PREFIX=$$r/prev-gcc/ \
		$(POSTSTAGE1_FLAGS_TO_PASS) || exit 1 ; \
	cd .. ; \
	mv prev-gcc stage2-gcc ; \
	mv gcc stage3-gcc ; \
	$(STAMP) all-stage3-gcc

# We only want to compare .o files, so set this!
objext = .o

compare: all-stage3-gcc
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	rm -f .bad_compare ; \
	cd stage3-gcc; \
	files=`find . -name "*$(objext)" -print` ; \
	cd .. ; \
	for file in $${files} ; do \
	  cmp --ignore-initial=16 $$r/stage2-gcc/$$file $$r/stage3-gcc/$$file \
	      > /dev/null 2>&1; \
	  test $$? -eq 1 && echo $$file differs >> .bad_compare || true; \
	done ; \
	if [ -f .bad_compare ]; then \
	  echo "Bootstrap comparison failure!"; \
	  cat .bad_compare; \
	  exit 1; \
	else \
	  true; \
	fi ; \
        $(STAMP) compare

.PHONY: new-bootstrap
# This target exists so that everything can be made in one pass.
# 'all-gcc' has to avoid stomping on the bootstrap-generated gcc for
# this to work.
new-bootstrap: compare
	mv stage3-gcc gcc ; \
	$(MAKE) all ; \
	mv gcc stage3-gcc

a1356 1
configure-target-libada: $(ALL_GCC_C)
@


1.86.8.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d9 1
a9 1
#   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation
a70 2
LN = @@LN@@
LN_S = @@LN_S@@
a114 32
# This is the list of variables to export in the environment when
# configuring any subdirectory.  It must also be exported whenever
# recursing into a build directory in case that directory's Makefile
# re-runs configure.
BASE_EXPORTS = \
	FLEX="$(FLEX)"; export FLEX; \
	LEX="$(LEX)"; export LEX; \
	BISON="$(BISON)"; export BISON; \
	YACC="$(YACC)"; export YACC; \
	M4="$(M4)"; export M4; \
	MAKEINFO="$(MAKEINFO)"; export MAKEINFO;

# This is the list of variables to export in the environment when
# configuring subdirectories for the build system.
BUILD_EXPORTS = \
	$(BASE_EXPORTS) \
	AR="$(AR_FOR_BUILD)"; export AR; \
	AS="$(AS_FOR_BUILD)"; export AS; \
	CC="$(CC_FOR_BUILD)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_BUILD)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CXX="$(CXX_FOR_BUILD)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_BUILD)"; export GCJ; \
	GFORTRAN="$(GFORTRAN_FOR_BUILD)"; export GFORTRAN; \
	DLLTOOL="$(DLLTOOL_FOR_BUILD)"; export DLLTOOL; \
	LD="$(LD_FOR_BUILD)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_BUILD)"; export LDFLAGS; \
	NM="$(NM_FOR_BUILD)"; export NM; \
	RANLIB="$(RANLIB_FOR_BUILD)"; export RANLIB; \
	WINDRES="$(WINDRES_FOR_BUILD)"; export WINDRES;

a119 29
# This is the list of variables to export in the environment when
# configuring subdirectories for the host system.
HOST_EXPORTS = \
	$(BASE_EXPORTS) \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	LDFLAGS="$(LDFLAGS)"; export LDFLAGS; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	GMPLIBS="$(HOST_GMPLIBS)"; export GMPLIBS; \
	GMPINC="$(HOST_GMPINC)"; export GMPINC;

# Similar, for later GCC stages.
STAGE_HOST_EXPORTS = \
	$(HOST_EXPORTS) \
	CC="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC; \
	CC_FOR_BUILD="$(STAGE_CC_WRAPPER) $$r/prev-gcc/xgcc$(exeext) -B$$r/prev-gcc/ -B$(build_tooldir)/bin/"; export CC_FOR_BUILD;
a128 32
# This is the list of variables to export in the environment when
# configuring subdirectories for the host system.
BASE_TARGET_EXPORTS = \
	$(BASE_EXPORTS) \
	AR="$(AR_FOR_TARGET)"; export AR; \
	AS="$(AS_FOR_TARGET)"; export AS; \
	CC="$(CC_FOR_TARGET)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
	CPPFLAGS="$(CFLAGS_FOR_TARGET)"; export CPPFLAGS; \
	CXXFLAGS="$(CXXFLAGS_FOR_TARGET)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_TARGET)"; export GCJ; \
	GFORTRAN="$(GFORTRAN_FOR_TARGET)"; export GFORTRAN; \
	DLLTOOL="$(DLLTOOL_FOR_TARGET)"; export DLLTOOL; \
	LD="$(LD_FOR_TARGET)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_TARGET)"; export LDFLAGS; \
	NM="$(NM_FOR_TARGET)"; export NM; \
	RANLIB="$(RANLIB_FOR_TARGET)"; export RANLIB; \
	WINDRES="$(WINDRES_FOR_TARGET)"; export WINDRES;

RAW_CXX_TARGET_EXPORTS = \
	$(BASE_TARGET_EXPORTS) \
	CXX_FOR_TARGET="$(RAW_CXX_FOR_TARGET)"; export CXX_FOR_TARGET; \
	CXX="$(RAW_CXX_FOR_TARGET)"; export CXX;

NORMAL_TARGET_EXPORTS = \
	$(BASE_TARGET_EXPORTS) \
	CXX="$(CXX_FOR_TARGET)"; export CXX;

# Where to find GMP
HOST_GMPLIBS = @@gmplibs@@
HOST_GMPINC = @@gmpinc@@
d156 3
a158 7
# Flags to pass to stage2 and later makes.  They are defined
# here so that they can be overridden by Makefile fragments.
BOOT_CFLAGS= -g -O2

CONFIGURED_BISON = @@CONFIGURED_BISON@@
BISON = `if [ -f $$r/$(BUILD_SUBDIR)/bison/tests/bison ] ; then \
	    echo $$r/$(BUILD_SUBDIR)/bison/tests/bison ; \
d160 1
a160 1
	    echo ${CONFIGURED_BISON} ; \
d163 6
a168 5
CONFIGURED_YACC = @@CONFIGURED_YACC@@
YACC = `if [ -f $$r/$(BUILD_SUBDIR)/bison/tests/bison ] ; then \
	    echo $$r/$(BUILD_SUBDIR)/bison/tests/bison -y ; \
	elif [ -f $$r/$(BUILD_SUBDIR)/byacc/byacc ] ; then \
	    echo $$r/$(BUILD_SUBDIR)/byacc/byacc ; \
d170 1
a170 1
	    echo ${CONFIGURED_YACC} ; \
d173 10
a182 14
CONFIGURED_FLEX = @@CONFIGURED_FLEX@@
FLEX = `if [ -f $$r/$(BUILD_SUBDIR)/flex/flex ] ; \
	then echo $$r/$(BUILD_SUBDIR)/flex/flex ; \
	else echo ${CONFIGURED_FLEX} ; fi`

CONFIGURED_LEX = @@CONFIGURED_LEX@@
LEX = `if [ -f $$r/$(BUILD_SUBDIR)/flex/flex ] ; \
	then echo $$r/$(BUILD_SUBDIR)/flex/flex ; \
	else echo ${CONFIGURED_LEX} ; fi`

CONFIGURED_M4 = @@CONFIGURED_M4@@
M4 = `if [ -f $$r/$(BUILD_SUBDIR)/m4/m4 ] ; \
	then echo $$r/$(BUILD_SUBDIR)/m4/m4 ; \
	else echo ${CONFIGURED_M4} ; fi`
d185 5
a189 7
# higher, else we use the "missing" dummy.  We also pass the subdirectory
# makeinfo even if only the Makefile is there, because Texinfo builds its
# manual when made, and it requires its own version.
CONFIGURED_MAKEINFO = @@CONFIGURED_MAKEINFO@@
MAKEINFO = `if [ -f $$r/$(BUILD_SUBDIR)/texinfo/makeinfo/Makefile ] ; \
	then echo $$r/$(BUILD_SUBDIR)/texinfo/makeinfo/makeinfo ; \
	else if (${CONFIGURED_MAKEINFO} --version \
d191 1
a191 1
        then echo ${CONFIGURED_MAKEINFO}; else echo $$s/missing makeinfo; fi; fi`
d247 1
a247 1
TARGET_LIB_PATH = $$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs:$$r/$(TARGET_SUBDIR)/libmudflap/.libs
a251 1
CONFIGURED_AR_FOR_TARGET=@@CONFIGURED_AR_FOR_TARGET@@
d259 1
a259 1
      echo $(CONFIGURED_AR_FOR_TARGET) ; \
a263 1
CONFIGURED_AS_FOR_TARGET=@@CONFIGURED_AS_FOR_TARGET@@
d273 1
a273 1
      echo $(CONFIGURED_AS_FOR_TARGET) ; \
a298 1
CONFIGURED_DLLTOOL_FOR_TARGET=@@CONFIGURED_DLLTOOL_FOR_TARGET@@
d306 1
a306 1
      echo $(CONFIGURED_DLLTOOL_FOR_TARGET) ; \
a310 1
GFORTRAN_FOR_TARGET = @@GFORTRAN_FOR_TARGET@@
a312 1
CONFIGURED_LD_FOR_TARGET=@@CONFIGURED_LD_FOR_TARGET@@
d322 1
a322 1
      echo $(CONFIGURED_LD_FOR_TARGET) ; \
a328 1
CONFIGURED_NM_FOR_TARGET=@@CONFIGURED_NM_FOR_TARGET@@
d338 1
a338 1
      echo $(CONFIGURED_NM_FOR_TARGET) ; \
a342 1
CONFIGURED_RANLIB_FOR_TARGET=@@CONFIGURED_RANLIB_FOR_TARGET@@
d354 1
a354 1
      echo $(CONFIGURED_RANLIB_FOR_TARGET) ; \
a358 1
CONFIGURED_WINDRES_FOR_TARGET=@@CONFIGURED_WINDRES_FOR_TARGET@@
d366 1
a366 1
      echo $(CONFIGURED_WINDRES_FOR_TARGET) ; \
d378 2
a379 1
@@default_target@@:
a402 2
RECURSE_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS)

d474 1
a474 1
configure-host: [+
d484 3
a486 3
# The target built for a native non-bootstrap build.
.PHONY: all
all: unstage all-host all-target stage
a487 5
.PHONY: all-build
all-build: [+
  FOR build_modules +] \
    maybe-all-build-[+module+][+
  ENDFOR build_modules +]
d489 1
a489 1
all-host: [+
d505 1
a505 1
do-[+make_target+]: unstage [+make_target+]-host [+make_target+]-target stage
d508 1
a508 1
[+make_target+]-host: [+
d580 1
a580 1
do-check: unstage [+
d586 1
a586 1
  ENDFOR target_modules +] stage
d616 2
a617 2
  FOR host_modules +][+ IF (not (= (get "module") "gcc")) +] \
    maybe-install-[+module+][+ ENDIF +][+
d621 1
a621 1
install-host: [+
a639 1
		$(HOST_EXPORTS) \
a687 2
@@if build-[+module+]
maybe-configure-build-[+module+]: configure-build-[+module+]
d693 14
a706 1
	$(BUILD_EXPORTS) \
d745 1
a745 1
	  --with-build-subdir="$(BUILD_SUBDIR)" [+extra_configure_flags+] \
a746 1
@@endif build-[+module+]
a749 3
@@if build-[+module+]
TARGET-build-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-build-[+module+]: all-build-[+module+]
d753 1
a753 4
	$(BUILD_EXPORTS) \
	(cd $(BUILD_SUBDIR)/[+module+] && \
	  $(MAKE) [+extra_make_flags+] $(TARGET-build-[+module+]))
@@endif build-[+module+]
a761 2
@@if [+module+]
maybe-configure-[+module+]: configure-[+module+]
d763 1
a763 2
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]test ! -f [+module+]/Makefile || exit 0; \
d767 15
a781 1
	$(HOST_EXPORTS) \
d796 1
a796 1
	  $(HOST_CONFIGARGS) $${srcdiroption} [+extra_configure_flags+] \
a797 1
@@endif [+module+]
a800 2
@@if [+module+]
maybe-all-[+module+]: all-[+module+]
d802 1
a802 2
	@@[+ IF bootstrap +]test -f stage_last && exit 0; \
	[+ ENDIF bootstrap +]r=`${PWD_COMMAND}`; export r; \
a804 1
	$(HOST_EXPORTS) \
d808 1
a808 5
	  ENDIF with_x +] [+extra_make_flags+] [+
	  IF (== (get "module") "gcc") +] \
	    `if [ -f gcc/stage_last ]; then echo quickstrap ; else echo all; fi` [+
	  ELSE +]all[+ ENDIF +])
@@endif [+module+]
a811 2
@@if [+module+]
maybe-check-[+module+]: check-[+module+]
d821 4
a824 3
	  $(HOST_EXPORTS) \
	  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS) [+ 
	    extra_make_flags+] check); \
a830 1
	$(HOST_EXPORTS) \
d832 3
a834 1
	  extra_make_flags+] check)
a835 1
@@endif [+module+]
a838 2
@@if [+module+]
maybe-install-[+module+]: install-[+module+]
a845 1
	$(HOST_EXPORTS) \
d847 3
a849 1
	  extra_make_flags+] install)
a850 1
@@endif [+module+]
a855 2
@@if [+module+]
maybe-[+make_target+]-[+module+]: [+make_target+]-[+module+]
d868 1
a868 2
	$(HOST_EXPORTS) \
	for flag in $(EXTRA_HOST_FLAGS) [+extra_make_flags+]; do \
a879 1
@@endif [+module+]
a888 2
@@if target-[+module+]
maybe-configure-target-[+module+]: configure-target-[+module+]
d901 7
a907 1
	$(SET_LIB_PATH) \[+
d909 2
a910 1
	$(RAW_CXX_TARGET_EXPORTS) \[+
d912 1
a912 1
	$(NORMAL_TARGET_EXPORTS) \[+
d914 8
d960 1
a960 1
	  --with-target-subdir="$(TARGET_SUBDIR)" [+extra_configure_flags+] \
a961 1
@@endif target-[+module+]
a964 3
@@if target-[+module+]
TARGET-target-[+module+]=[+ IF target +][+target+][+ ELSE +]all[+ ENDIF target +]
maybe-all-target-[+module+]: all-target-[+module+]
d968 1
a968 6
	$(SET_LIB_PATH) \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
d974 1
a974 2
	  +] [+extra_make_flags+] $(TARGET-target-[+module+]))
@@endif target-[+module+]
a977 2
@@if target-[+module+]
maybe-check-target-[+module+]: check-target-[+module+]
d985 1
a985 6
	$(SET_LIB_PATH) \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
d991 1
a991 1
	  +] [+extra_make_flags+] check)
a992 1
@@endif target-[+module+]
a995 2
@@if target-[+module+]
maybe-install-target-[+module+]: install-target-[+module+]
d1003 1
a1003 6
	$(SET_LIB_PATH) \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
d1005 1
a1005 1
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+extra_make_flags+] install)
a1006 1
@@endif target-[+module+]
a1011 2
@@if target-[+module+]
maybe-[+make_target+]-target-[+module+]: [+make_target+]-target-[+module+]
d1023 1
a1023 6
	$(SET_LIB_PATH) \[+
IF raw_cxx +]
	$(RAW_CXX_TARGET_EXPORTS) \[+
ELSE normal_cxx +]
	$(NORMAL_TARGET_EXPORTS) \[+
ENDIF raw_cxx +]
d1033 1
a1033 1
	          [+extra_make_flags+] [+make_target+]) \
a1035 1
@@endif target-[+module+]
d1043 68
a1110 4
@@if gcc-no-bootstrap
# GCC has some more recursive targets, which trigger the old
# (but still current, until the toplevel bootstrap project
# is finished) compiler bootstrapping rules.
d1112 10
d1124 1
a1124 1
$(GCC_STRAP_TARGETS): all-prebootstrap configure-gcc
a1127 1
	$(HOST_EXPORTS) \
a1146 1
	$(HOST_EXPORTS) \
d1153 1
a1153 1
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all
d1155 1
a1155 1
profiledbootstrap: all-prebootstrap configure-gcc
d1159 1
a1159 2
	$(HOST_EXPORTS) \
	echo "Bootstrapping training compiler"; \
d1162 5
a1168 1
	$(HOST_EXPORTS) \
a1170 5
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	$(SET_LIB_PATH) \
	echo "Building runtime libraries"; \
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) all
d1173 1
a1173 1
cross: all-build all-gas all-ld
a1176 1
	$(HOST_EXPORTS) \
d1183 14
a1196 2
	$(MAKE) $(RECURSE_FLAGS_TO_PASS) LANGUAGES="c c++" all
@@endif gcc-no-bootstrap
a1197 1
@@if gcc
a1203 1
	  $(HOST_EXPORTS) \
d1212 12
a1238 1
	  $(HOST_EXPORTS) \
d1244 26
a1269 1
@@endif gcc
d1275 10
a1284 38
# We track the current stage (the one in 'gcc') in the stage_current file.
# stage_last instead tracks the stage that was built last.  These targets
# are dummy when toplevel bootstrap is not active.

.PHONY: unstage
unstage:
@@if gcc-bootstrap
	@@[ -f stage_current ] || $(MAKE) `cat stage_last`-start
@@endif gcc-bootstrap

.PHONY: stage
stage:
@@if gcc-bootstrap
	@@$(MAKE) `cat stage_current`-end
@@endif gcc-bootstrap

# We name the build directories for the various stages "stage1-gcc",
# "stage2-gcc","stage3-gcc", etc.

# Since the 'compare' process will fail (on debugging information) if any
# directory names are different, we need to link the gcc directory for
# the previous stage to a constant name ('gcc-prev'), and to make the name of
# the build directories constant as well. For the latter, we use naked names
# like 'gcc', because the scripts in that directory assume it.  We use
# mv on platforms where symlinks to directories do not work or are not
# reliable.

# At the end of the bootstrap, a symlink to 'stage3-gcc' named 'gcc' must
# be kept, so that libraries can find it.  Ick!

# It would be best to preinstall gcc into a staging area (and in the
# future, gather there all prebootstrap packages).  This would allow
# assemblers and linkers can be bootstrapped as well as the compiler
# (both in a combined tree, or separately).  This however requires some
# change to the gcc driver, again in order to avoid comparison failures.

# Bugs: This is crippled when doing parallel make, the `make all-host'
# and `make all-target' phases can be parallelized.
d1286 1
a1299 10
# We only want to compare .o files, so set this!
objext = .o

# Flags to pass to stage2 and later makes.
POSTSTAGE1_FLAGS_TO_PASS = \
	CC="$${CC}" CC_FOR_BUILD="$${CC_FOR_BUILD}" \
	STAGE_PREFIX=$$r/stage[+prev+]-gcc/ \
	CFLAGS="$(BOOT_CFLAGS)" \
	ADAC="\$$(CC)"

d1308 54
d1363 12
a1374 2
[+ FOR bootstrap-stage +]
.PHONY: stage[+id+]-start stage[+id+]-end
d1376 8
a1383 26
stage[+id+]-start::
	@@[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \
	echo stage[+id+] > stage_current ; \
	echo stage[+id+] > stage_last[+ FOR host_modules +][+ IF bootstrap +]
@@if [+ module +]
	@@[ -d stage[+id+]-[+module+] ] || mkdir stage[+id+]-[+module+]; \
	set stage[+id+]-[+module+] [+module+] ; @@CREATE_LINK_TO_DIR@@ [+ IF prev +] ; \
	set stage[+prev+]-[+module+] prev-[+module+] ; @@CREATE_LINK_TO_DIR@@ [+ ENDIF prev +]
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]

stage[+id+]-end::
	@@rm -f stage_current[+ FOR host_modules +][+ IF bootstrap +]
@@if [+ module +]
	@@set [+module+] stage[+id+]-[+module+] ; @@UNDO_LINK_TO_DIR@@ [+ IF prev +] ; \
	set prev-[+module+] stage[+prev+]-[+module+] ; @@UNDO_LINK_TO_DIR@@ [+ ENDIF prev +]
@@endif [+ module +][+ ENDIF bootstrap +][+ ENDFOR host_modules +]

# Bubble a bugfix through all the stages up to stage [+id+].  They
# are remade, but not reconfigured.  The next stage (if any) will not
# be reconfigured as well.
.PHONY: stage[+id+]-bubble
stage[+id+]-bubble:: [+ IF prev +]stage[+prev+]-bubble[+ ENDIF +][+IF lean +]
	@@bootstrap_lean@@-rm -rf stage[+lean+]-* ; $(STAMP) stage[+lean+]-lean[+ ENDIF lean +]
	@@if test -f stage[+id+]-lean [+
	  IF prev +]|| test -f stage[+prev+]-lean [+ ENDIF prev +] ; then \
	  echo Skipping rebuild of stage[+id+] ; \
d1385 48
a1432 2
	  $(MAKE) $(RECURSE_FLAGS_TO_PASS) NOTPARALLEL= all-stage[+id+]; \
	fi
d1434 2
a1435 24
.PHONY: all-stage[+id+] clean-stage[+id+]
all-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\
  maybe-all-stage[+id+]-[+module+][+
ENDIF bootstrap+] [+ ENDFOR host_modules +]

do-clean: clean-stage[+id+]
clean-stage[+id+]: [+ FOR host_modules +][+ IF bootstrap +]\
  maybe-clean-stage[+id+]-[+module+][+
ENDIF bootstrap+] [+ ENDFOR host_modules +]

[+ FOR host_modules +][+ IF bootstrap +]
.PHONY: configure-stage[+id+]-[+module+] maybe-configure-stage[+id+]-[+module+]
.PHONY: all-stage[+id+]-[+module+] maybe-all-stage[+id+]-[+module+]
.PHONY: clean-stage[+id+]-[+module+] maybe-clean-stage[+id+]-[+module+]

maybe-configure-stage[+id+]-[+module+]:
maybe-all-stage[+id+]-[+module+]:
maybe-clean-stage[+id+]-[+module+]:

@@if [+module+]-bootstrap
maybe-configure-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]
configure-stage[+id+]-[+module+]:
	@@$(MAKE) stage[+id+]-start
	@@[ -f [+module+]/Makefile ] && exit 0 || : ; \
d1437 45
a1481 5
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \
	$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \
	$(HOST_EXPORTS) [+ ENDIF prev +] \
	echo Configuring stage [+id+] in [+module+] ; \
	cd [+module+] || exit 1; \
d1487 2
a1488 2
	    srcdiroption="--srcdir=$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
d1490 2
a1491 2
	    srcdiroption="--srcdir=../$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
d1494 25
a1518 2
	  $(HOST_CONFIGARGS) $${srcdiroption} \
	  [+stage_configure_flags+] [+extra_configure_flags+]
d1520 2
a1521 36
maybe-all-stage[+id+]-[+module+]: all-stage[+id+]-[+module+]
all-stage[+id+]-[+module+]: configure-stage[+id+]-[+module+]
	@@$(MAKE) stage[+id+]-start
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; [+ IF prev +] \
	$(STAGE_HOST_EXPORTS) [+ ELSE prev +] \
	$(HOST_EXPORTS) [+ ENDIF prev +] \
	cd [+module+] && \
	$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \
		$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \
		[+stage_make_flags+] [+extra_make_flags+]

maybe-clean-stage[+id+]-[+module+]: clean-stage[+id+]-[+module+]
clean-stage[+id+]-[+module+]:
	@@[ -f [+module+]/Makefile ] || [ -f stage[+id+]-[+module+]/Makefile ] \
	  || exit 0 ; \
	[ -f [+module+]/Makefile ] || $(MAKE) stage[+id+]-start ; \
	cd [+module+] && \
	$(MAKE) $(FLAGS_TO_PASS) [+ IF prev +] \
		$(POSTSTAGE1_FLAGS_TO_PASS) [+ ENDIF prev +] \
		[+stage_make_flags+] [+extra_make_flags+] clean
@@endif [+module+]-bootstrap

[+ ENDIF bootstrap +][+ ENDFOR host_modules +]

# FIXME: Will not need to be conditional when toplevel bootstrap is the
# only possibility, but now it conflicts with no-bootstrap rules
@@if gcc-bootstrap
[+ IF compare-target +]
[+compare-target+]:
	@@if test -f stage[+prev+]-lean; then \
	  echo Cannot compare object files as stage [+prev+] was deleted. ; \
	  exit 0 ; \
	fi; \
	[ -f stage_current ] && $(MAKE) `cat stage_current`-end || : ; \
	@@r=`${PWD_COMMAND}`; export r; \
d1524 1
a1524 1
	cd stage[+id+]-gcc; \
d1528 2
a1529 2
	  f1=$$r/stage[+prev+]-gcc/$$file; f2=$$r/stage[+id+]-gcc/$$file; \
	  @@do_compare@@ > /dev/null 2>&1; \
d1539 1
a1539 24
	$(STAMP) [+compare-target+][+ IF prev +]
	@@bootstrap_lean@@-rm -rf stage[+prev+]-* ; $(STAMP) stage[+prev+]-lean[+ ENDIF prev +]
[+ ENDIF compare-target +]

[+ IF bootstrap-target +]
.PHONY: [+bootstrap-target+]
[+bootstrap-target+]: stage[+id+]-bubble [+compare-target+] all
[+ ENDIF bootstrap-target +]

# Rules to wipe a stage and all the following ones, also used for cleanstrap
[+ IF prev +]distclean-stage[+prev+]:: distclean-stage[+id+] [+ ENDIF prev +]
.PHONY: distclean-stage[+id+]
distclean-stage[+id+]::
	[ -f stage_current ] && $(MAKE) `cat stage_current`-end || :
	rm -rf stage[+id+]-* [+
	  IF compare-target +][+compare-target+] [+ ENDIF compare-target +]

[+ IF cleanstrap-target +]
.PHONY: [+cleanstrap-target+]
[+cleanstrap-target+]: distclean [+bootstrap-target+]
[+ ENDIF cleanstrap-target +]
@@endif gcc-bootstrap

[+ ENDFOR bootstrap-stage +]
d1541 8
a1548 35
stagefeedback-start::
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	cd stageprofile-gcc && \
	  { find . -type d | sort | sed 's,.*,$(SHELL) '"$$s"'/mkinstalldirs "../gcc/&",' | $(SHELL); } && \
	  { find . -name '*.*da' | sed 's,.*,$(LN) -f "&" "../gcc/&",' | $(SHELL); }

# FIXME: Will not need to be conditional when toplevel bootstrap is the
# only possibility, but now it conflicts with no-bootstrap rules
@@if gcc-bootstrap
profiledbootstrap:
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	$(HOST_EXPORTS) \
	echo "Bootstrapping the compiler"; \
	$(MAKE) stageprofile-bubble distclean-stagefeedback
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	$(SET_LIB_PATH) \
	echo "Building runtime libraries and training compiler"; \
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	$(HOST_EXPORTS) \
	echo "Building feedback based compiler"; \
	$(MAKE) stagefeedback-bubble stagefeedback-end
@@endif gcc-bootstrap

@@if gcc-bootstrap
NOTPARALLEL = .NOTPARALLEL
$(NOTPARALLEL):
do-distclean: distclean-stage1
@@endif gcc-bootstrap
a1553 10
# Generic dependencies for target modules on host stuff, especially gcc
[+ FOR target_modules +]
configure-target-[+module+]: maybe-all-gcc
[+ ENDFOR target_modules +]

[+ FOR lang_env_dependencies +]
configure-target-[+module+]: maybe-all-target-newlib maybe-all-target-libgloss
[+ IF cxx +]configure-target-[+module+]: maybe-all-target-libstdc++-v3
[+ ENDIF cxx +][+ ENDFOR lang_env_dependencies +]

d1558 1
a1558 1
# are made here to depend on a 'maybe-' target.  If you're not sure,
d1561 13
a1573 96
[+ ;; These Scheme functions build the bulk of the dependencies.
   ;; dep-target builds a string like "maybe-all-MODULE_KIND-gcc",
   ;; where "maybe-" is only included if HARD is true, and all-gcc
   ;; is taken from VAR-NAME.
   (define dep-target (lambda (module-kind var-name hard)
      (string-append
         (if hard "" "maybe-")
         (dep-subtarget var-name)
         module-kind
         (dep-module var-name)
      )))

   ;; make-dep builds a dependency from the MODULE and ON AutoGen vars.
   (define make-dep (lambda (module-kind on-kind)
      (string-append
         (dep-target module-kind "module" #t) ": "
         (dep-target on-kind "on" (exist? "hard")))))

   ;; dep-subtarget extracts everything up to the first dash in the given
   ;; AutoGen variable, for example it extracts "all-" out of "all-gcc".
   (define dep-subtarget (lambda (var-name)
      (substring (get var-name) 0 (+ 1 (string-index (get var-name) #\-)))))

   ;; dep-module extracts everything up to the first dash in the given
   ;; AutoGen variable, for example it extracts "gcc" out of "all-gcc".
   (define dep-module (lambda (var-name)
      (substring (get var-name) (+ 1 (string-index (get var-name) #\-)))))

   ;; dep-stage builds a string for the prefix of a bootstrap stage.
   (define dep-stage (lambda ()
      (string-append
	 "stage"
	 (get "id")
	 "-")))

   ;; dep-maybe is the same as the AutoGen expression "- hard 'maybe-'"
   ;; but is written in Scheme.
   (define dep-maybe (lambda ()
      (if (exist? "hard") "" "maybe-")))

   ;; dep-kind returns "normal" is the dependency is on an "install" target,
   ;; or if the LHS module is not bootstrapped.  It returns "bootstrap" for
   ;; configure or build dependencies between bootstrapped modules; it returns
   ;; "prebootstrap" for configure or build dependencies of bootstrapped
   ;; modules on a build module (e.g. all-gcc on all-build-bison).  All this
   ;; is only necessary for host modules.
   (define dep-kind (lambda ()
      (if (and (hash-ref boot-modules (dep-module "module"))
	       (=* (dep-module "on") "build-"))
	  "prebootstrap"

	  (if (or (= (dep-subtarget "on") "install-")
		  (=* (dep-module "on") "target-")
		  (not (hash-ref boot-modules (dep-module "module"))))
              "normal"
	      "bootstrap"))))

   ;; We now build the hash table that is used by dep-kind.
   (define boot-modules (make-hash-table 113))
+]

[+ FOR host_modules +][+
   (if (exist? "bootstrap")
       (hash-create-handle! boot-modules (get "module") #t))
   "" +][+ ENDFOR host_modules +]

# With all the machinery above in place, it is pretty easy to generate
# dependencies.  Host dependencies are a bit more complex because we have
# to check for bootstrap/prebootstrap dependencies.  To resolve
# prebootstrap dependencies, prebootstrap modules are gathered in
# a hash table.
[+ FOR dependencies +][+ (make-dep "" "") +]
[+ CASE (dep-kind) +]
[+ == "prebootstrap"
     +][+ FOR bootstrap_stage +]
[+ (make-dep (dep-stage) "") +][+
       ENDFOR bootstrap_stage +]
all-prebootstrap: [+ (dep-target "" "on" (exist? "hard")) +]
[+ == "bootstrap"
     +][+ FOR bootstrap_stage +]
[+ (make-dep (dep-stage) (dep-stage)) +][+
       ENDFOR bootstrap_stage +]
[+ ESAC +][+
ENDFOR dependencies +]

# Non-toplevel bootstrap rules must depend on several packages, to be built
# before gcc.  Another wart that will go away, hopefully soon.
@@if gcc-no-bootstrap
[+ FOR host_modules +][+
   IF (and (not (= (get "module") "gcc"))
	   (hash-ref boot-modules (get "module"))) +]
all-prebootstrap: maybe-all-[+module+][+
   ENDIF +][+
ENDFOR host_modules +]
@@endif gcc-no-bootstrap

d1575 97
a1671 1
all-gdb: $(gdbnlmrequirements) $(GDB_TK)
@


1.85
log
@	* configure.in: Use ./config.cache, not config.cache.
	* configure: Regenerate.
	* Makefile.tpl: Special-casing not needed for GCC any more.
	* Makefile.in: Regenerate.
@
text
@d986 1
a986 1
	esac; \
d1007 1
a1007 1
	else \
d1009 2
a1010 2
	  libsrcdir="$$s/[+module+]"; \
	fi; \
@


1.84
log
@	* Makefile.tpl: Make GCC use a separate config.cache.
	* Makefile.in: Regenerate.
@
text
@d1112 1
a1112 1
	  $(HOST_CONFIGARGS) $${srcdiroption} --cache-file=config.cache \
@


1.83
log
@2003-12-19  Nathanael Nerode  <neroden@@gcc.gnu.org>

	Port change over from GCC:
	2003-11-20  Kelley Cook  <kcook@@gcc.gnu.org>
	* Makefile.tpl (BASE_FLAGS_TO_PASS): Pass along CONFIG_SHELL.
	(configure-build-[+module+], configure-[+module+]): Likewise.
	(configure-target-[+module+], configure-gcc, config.status): Likewise.
	* Makefile.in: Regenerate.
@
text
@d1072 3
d1112 1
a1112 1
	  $(HOST_CONFIGARGS) $${srcdiroption} \
@


1.82
log
@* Makefile.tpl (EXTRA_GCC_FLAGS): Pass BOOT_ADAFLAGS.
* Makefile.in: Regenerate.
@
text
@d392 1
d781 1
d853 1
d960 1
d1081 1
d1415 1
a1415 1
	$(SHELL) ./config.status --recheck
@


1.81
log
@	* Makefile.tpl: Make GCC_FLAGS_TO_PASS a superset of
	HOST_FLAGS_TO_PASS.
	* Makefile.in: Regenerate.
@
text
@d468 2
a469 1
	"`echo 'BOOT_CFLAGS=$(BOOT_CFLAGS)' | sed -e s/.*=$$/XFOO=/`"
@


1.80
log
@2003-10-05  Mohan Embar  <gnustuff@@thisiscool.com>
* configure.in: Allow explicit specification of CFLAGS_FOR_BUILD.
* configure: Rebuilt
* Makefile.tpl: Use CFLAGS_FOR_BUILD computed by configure
* Makefile.in: Rebuilt
@
text
@a456 4
	'AR=$(AR)' \
	'AS=$(AS)' \
	'CC=$(CC)' \
	'CXX=$(CXX)' \
a458 2
	'NM=$(NM)' \
	'RANLIB=$(RANLIB)' \
d470 1
a470 1
GCC_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_GCC_FLAGS)
@


1.79
log
@	* Makefile.tpl: Don't pass down obsolete ENQUIRE variable.
	* Makefile.in: Regenerate.

	* Makefile.tpl: Don't pass (unused) DLLTOOL or WINDRES to gcc.
	* Makefile.in: Regenerate.
@
text
@d148 1
a148 1
CFLAGS_FOR_BUILD = $(CFLAGS)
@


1.78
log
@
	Merge from gcc:

	2003-08-01  Matt Kraai  <kraai@@alumni.cmu.edu>
	* Makefile.tpl (check, check-c++): Express dependencies using
	dependencies rather than commands.
	* Makefile.in: Regenerate.

	2003-07-31  Geoffrey Keating  <geoffk@@apple.com>
	* Makefile.tpl (libsubdir): Use gcc instead of gcc-lib.
	* Makefile.in: Update.
@
text
@a460 1
	'DLLTOOL=$$(DLLTOOL_FOR_TARGET)' \
a464 1
	'WINDRES=$$(WINDRES_FOR_TARGET)' \
a472 1
	"`echo 'ENQUIRE=$(ENQUIRE)' | sed -e s/.*=$$/XFOO=/`" \
@


1.77
log
@	* Makefile.tpl: Use 'mkinstalldirs' rather than 'mkdir' when
	creating target and build subdirs to build all parent dirs as needed.
	* Makefile.in: Rebuild.
	* configure.in: Don't build dirs explicitly here.
	* configure: Rebuild.
@
text
@d91 1
a91 1
libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(gcc_version)
d668 1
a668 2
check:
	$(MAKE) do-check
d1231 1
a1231 2
check-c++:
	$(MAKE) check-target-libstdc++-v3 check-gcc-c++
@


1.76
log
@* Makefile.tpl (all-make): Depend on intl.
* Makefile.in: Rebuilt.
@
text
@d782 1
a782 2
	[ -d $(BUILD_SUBDIR)/[+module+] ] || \
	  mkdir $(BUILD_SUBDIR)/[+module+];\
d952 1
a952 2
	@@[ -d $(TARGET_SUBDIR)/[+module+] ] || \
	  mkdir $(TARGET_SUBDIR)/[+module+]; \
d958 1
a958 2
	[ -d $(TARGET_SUBDIR)/[+module+] ] || \
	  mkdir $(TARGET_SUBDIR)/[+module+];\
@


1.75
log
@	* Makefile.tpl: Set INSTALL and friends using autoconf.  Remove
	unused INSTALL_PROGRAM_ARGS.
	* configure.in: Use AC_PROG_INSTALL.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
@
text
@d1345 1
a1345 1
all-make: maybe-all-libiberty
@


1.74
log
@2003-07-06  H.J. Lu <hongjiu.lu@@intel.com>

	* config-ml.in: Replace PWD with PWD_COMMAND.
	* Makefile.tpl: Likewise.
	* Makefile.in: Regenerated.
@
text
@d67 4
a70 8
# INSTALL_PROGRAM_ARGS is changed by configure.in to use -x for a
# cygwin host.
INSTALL_PROGRAM_ARGS =

INSTALL = $(SHELL) $$s/install-sh -c
INSTALL_PROGRAM = $(INSTALL) $(INSTALL_PROGRAM_ARGS)
INSTALL_SCRIPT = $(INSTALL)
INSTALL_DATA = $(INSTALL) -m 644
d1284 3
a1286 2
configure-gcc: maybe-configure-binutils maybe-configure-gas maybe-configure-ld maybe-configure-bison maybe-configure-flex
all-gcc: maybe-all-libiberty maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib
d1290 1
a1290 1
all-bootstrap: maybe-all-libiberty maybe-all-texinfo maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib
@


1.73
log
@        * Makefile.tpl: Add maybe-configure-itcl to configure-gdb.
        * Makefile.in: Regenerate.
@
text
@d145 3
a147 1
PWD = $${PWDCMD-pwd}
d539 2
a540 2
	r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d567 2
a568 2
	r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d597 2
a598 2
	r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d629 1
a629 1
	s=`cd $(srcdir); ${PWD}`; export s; \
d734 1
a734 1
		r=`${PWD}` ; export r ; \
d788 2
a789 2
	r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d847 2
a848 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d861 2
a862 2
	r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d897 2
a898 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d913 2
a914 2
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
d923 2
a924 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d938 2
a939 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d966 2
a967 2
	r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1032 2
a1033 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1049 2
a1050 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1067 2
a1068 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1089 2
a1090 2
	r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1130 2
a1131 2
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
d1135 2
a1136 2
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
d1154 2
a1155 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1159 2
a1160 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1178 2
a1179 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}` ; export s; \
d1185 2
a1186 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1190 2
a1191 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}` ; export s; \
d1195 2
a1196 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1203 2
a1204 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}`; export s; \
d1208 2
a1209 2
	@@r=`${PWD}`; export r; \
	s=`cd $(srcdir); ${PWD}` ; export s; \
d1219 2
a1220 2
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
d1230 2
a1231 2
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
d1246 2
a1247 2
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
d1266 2
a1267 2
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}` ; export s; \
d1411 1
a1411 1
	@@r=`${PWD}`; export r; \
@


1.72
log
@	* Makefile.def: Introduce flags_to_pass.
	* Makefile.tpl: Generate BASE_FLAGS_TO_PASS using it.
	* Makefile.in: Regenerate.
@
text
@d1295 1
a1295 1
configure-gdb: maybe-configure-tcl maybe-configure-tk maybe-configure-sim
@


1.71
log
@	(sync with gcc)
	* Makefile.tpl: Remove BUILD_CC stuff.
	* Makefile.in: Regenerate.
@
text
@d392 3
a394 64
# Please keep these in alphabetical order.
BASE_FLAGS_TO_PASS = \
	"AR_FLAGS=$(AR_FLAGS)" \
	"AR_FOR_TARGET=$(AR_FOR_TARGET)" \
	"AS_FOR_TARGET=$(AS_FOR_TARGET)" \
	"BISON=$(BISON)" \
	"CC_FOR_BUILD=$(CC_FOR_BUILD)" \
	"CC_FOR_TARGET=$(CC_FOR_TARGET)" \
	"CFLAGS=$(CFLAGS)" \
	"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)" \
	"GCJ_FOR_TARGET=$(GCJ_FOR_TARGET)" \
	"CXX_FOR_BUILD=$(CXX_FOR_BUILD)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"CXXFLAGS_FOR_TARGET=$(CXXFLAGS_FOR_TARGET)" \
	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)" \
	"DESTDIR=$(DESTDIR)" \
	"DLLTOOL_FOR_TARGET=$(DLLTOOL_FOR_TARGET)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"INSTALL_SCRIPT=$(INSTALL_SCRIPT)" \
	"LDFLAGS=$(LDFLAGS)" \
	"LEX=$(LEX)" \
	"LD_FOR_TARGET=$(LD_FOR_TARGET)" \
	"LIBCFLAGS=$(LIBCFLAGS)" \
	"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)" \
	"LIBCXXFLAGS=$(LIBCXXFLAGS)" \
	"LIBCXXFLAGS_FOR_TARGET=$(LIBCXXFLAGS_FOR_TARGET)" \
	"M4=$(M4)" \
	"MAKE=$(MAKE)" \
	"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)" \
	"NM_FOR_TARGET=$(NM_FOR_TARGET)" \
	"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)" \
	"RPATH_ENVVAR=$(RPATH_ENVVAR)" \
	"SHELL=$(SHELL)" \
	"EXPECT=$(EXPECT)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)" \
	"TARGET_SUBDIR=$(TARGET_SUBDIR)" \
	"WINDRES_FOR_TARGET=$(WINDRES_FOR_TARGET)" \
	"YACC=$(YACC)" \
	"bindir=$(bindir)" \
	"datadir=$(datadir)" \
	"exec_prefix=$(exec_prefix)" \
	"includedir=$(includedir)" \
	"infodir=$(infodir)" \
	"libdir=$(libdir)" \
	"libexecdir=$(libexecdir)" \
	"lispdir=$(lispdir)" \
	"libstdcxx_incdir=$(libstdcxx_incdir)" \
	"libsubdir=$(libsubdir)" \
	"localstatedir=$(localstatedir)" \
	"mandir=$(mandir)" \
	"oldincludedir=$(oldincludedir)" \
	"prefix=$(prefix)" \
	"sbindir=$(sbindir)" \
	"sharedstatedir=$(sharedstatedir)" \
	"sysconfdir=$(sysconfdir)" \
	"tooldir=$(tooldir)" \
	"build_tooldir=$(build_tooldir)" \
	"gxx_include_dir=$(gxx_include_dir)" \
	"gcc_version=$(gcc_version)" \
	"gcc_version_trigger=$(gcc_version_trigger)" \
	"target_alias=$(target_alias)" 
@


1.71.2.1
log
@        * Makefile.tpl: Add maybe-configure-itcl to configure-gdb.
        * Makefile.in: Regenerate.
@
text
@d1356 1
a1356 1
configure-gdb: maybe-configure-itcl maybe-configure-tcl maybe-configure-tk maybe-configure-sim
@


1.70
log
@Merge these:
2003-06-11  Rainer Orth  <ro@@TechFak.Uni-Bielefeld.DE>

	* configure.in: Don't pass --with-stabs for mips*-sgi-irix6*o32.
	* configure. Regenerate.

2003-06-10  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* configure.in: Disable serial configure by default.
	* configure: Regenerate.
	* Makefile.tpl: Abolish .NOTPARALLEL.
	* Makefile.in: Regenerate.
@
text
@a155 1
BUILD_CC = $(CC_FOR_BUILD)
a524 1
	'BUILD_CC=$(CC_FOR_BUILD)' \
@


1.69
log
@	* Makefile.tpl: Replace {build,host,target}_canonical by
	{build,host,target}.
	* Makefile.in: Regenerate.
@
text
@d734 1
a734 1
	$(MAKE) do-check NOTPARALLEL=parallel-ok
d1301 1
a1301 1
	$(MAKE) check-target-libstdc++-v3 check-gcc-c++ NOTPARALLEL=parallel-ok
a1496 6

# Tell GNU make 3.79 not to run the top level in parallel.  This 
# prevents contention for $builddir/$target/config.cache, as well
# as minimizing scatter in file system caches.
NOTPARALLEL = .NOTPARALLEL
$(NOTPARALLEL):
@


1.68
log
@	* Makefile.tpl: Fix stupid pasto.
	* Makefile.in: Regenerate.
@
text
@d32 1
a32 4
build_cpu=@@build_cpu@@
build_vendor=@@build_vendor@@
build_os=@@build_os@@
build_canonical=@@build_cpu@@-@@build_vendor@@-@@build_os@@
d34 1
a34 4
host_cpu=@@host_cpu@@
host_vendor=@@host_vendor@@
host_os=@@host_os@@
host_canonical=@@host_cpu@@-@@host_vendor@@-@@host_os@@
d36 1
a36 4
target_cpu=@@target_cpu@@
target_vendor=@@target_vendor@@
target_os=@@target_os@@
target_canonical=@@target_cpu@@-@@target_vendor@@-@@target_os@@
d260 1
a260 1
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
d274 1
a274 1
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
d307 1
a307 1
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
d323 1
a323 1
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
d339 1
a339 1
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
d351 1
a351 1
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
d367 1
a367 1
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
d973 1
a973 1
	@@if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
@


1.67
log
@	* Makefile.tpl: Remove bogus conditional.
	* Makefile.in: Regenerate.
@
text
@d660 1
a660 1
[+make_target+]-[+module+]:
@


1.66
log
@	* Makefile.tpl: Make 'recursive targets' using autogen rather
	than shell loop.  Remove duplicate 'clean' targets and false
	comments.
	* Makefile.def: Add systematic dependencies to 'recursive' targets.
	Add systematic method of specifying missing targets in subdirs.
	Add copyright boilerplate.
	* Makefile.in: Regenerate.
	* configure.in: Add 'recursive targets' to maybe list.
	* configure: Regenerate.
@
text
@d937 10
a946 12
	if [ z$(build_canonical) !=  z$(host_canoncial) ] ; then \
	  AR="$(AR)"; export AR; \
	  AS="$(AS)"; export AS; \
	  CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	  DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	  LD="$(LD)"; export LD; \
	  NM="$(NM)"; export NM; \
	  RANLIB="$(RANLIB)"; export RANLIB; \
	  WINDRES="$(WINDRES)"; export WINDRES; \
	  OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	  OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	fi; \
d1166 10
a1175 12
	if [ z$(build_canonical) !=  z$(host_canoncial) ] ; then \
	  AR="$(AR)"; export AR; \
	  AS="$(AS)"; export AS; \
	  CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	  DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	  LD="$(LD)"; export LD; \
	  NM="$(NM)"; export NM; \
	  RANLIB="$(RANLIB)"; export RANLIB; \
	  WINDRES="$(WINDRES)"; export WINDRES; \
	  OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	  OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	fi; \
d1253 17
@


1.65
log
@	* Makefile.tpl: Rename [+target+] to [+make_target+].
	* Makefile.def: Rename 'target' to 'make_target'.
@
text
@a477 1
# If any variables are added here, they must be added to do-*, below.
a505 1
# If any variables are added here, they must be added to do-*, below.
d527 1
a527 1
# The HOST_* variables are a special case, which are used for the gcc
a565 20
# This is a list of the targets for which we can do a clean-{target}.
CLEAN_MODULES =[+
    FOR host_modules +][+
        IF (not (or (exist? "no_clean") (exist? "with_x"))) +] \
	clean-[+module+][+
        ENDIF no_clean +][+
    ENDFOR host_modules +]

# All of the target modules that can be cleaned
CLEAN_TARGET_MODULES =[+
    FOR target_modules +][+
        IF (not (exist? "no_clean")) +] \
	clean-target-[+module+][+
        ENDIF no_clean +][+
    ENDFOR target_modules +]

# All of the x11 modules that can be cleaned
CLEAN_X11_MODULES = [+ FOR host_modules +][+ IF with_x +]\
	clean-[+module+] [+ ENDIF with_x +][+ ENDFOR host_modules +]

a584 3
# This target ensures that $(BASE_FLAGS_TO_PASS) appears only once,
# because it is so large that it can easily overflow the command line
# length limit on some systems.
d587 51
a637 2
do-[+make_target+]:
	@@r=`${PWD}`; export r; \
d640 27
a666 24
	for i in $(SUBDIRS) -dummy-; do \
	  if [ -f ./$$i/Makefile ]; then \
	    case $$i in \
	    gcc) \
	      for flag in $(EXTRA_GCC_FLAGS); do \
		eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	      done; \
	      ;; \
	    *) \
	      for flag in $(EXTRA_HOST_FLAGS); do \
		eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	      done; \
	      ;; \
	    esac ; \
	    (cd ./$$i && \
	        $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
			"CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	                "RANLIB=$${RANLIB}" \
			"DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
			[+make_target+]) \
	    || exit 1; \
	  else true; fi; \
	done
	# Break into two pieces
d670 13
a682 14
	for i in $(TARGET_CONFIGDIRS) -dummy-; do \
	  if [ -f $(TARGET_SUBDIR)/$$i/Makefile ]; then \
	    for flag in $(EXTRA_TARGET_FLAGS); do \
		eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	    done; \
	    (cd $(TARGET_SUBDIR)/$$i && \
	        $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
			"CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	                "RANLIB=$${RANLIB}" \
			"DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
			[+make_target+]) \
	    || exit 1; \
	  else true; fi; \
	done
a684 1

d731 2
a732 27
# This rule is used to clean specific modules.
.PHONY: $(CLEAN_MODULES) $(CLEAN_X11_MODULES) clean-gcc
$(CLEAN_MODULES) $(CLEAN_X11_MODULES) clean-gcc:
	@@dir=`echo $@@ | sed -e 's/clean-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $${dir} && $(MAKE) $(FLAGS_TO_PASS) clean); \
	else \
	  true; \
	fi

.PHONY: $(CLEAN_TARGET_MODULES)
$(CLEAN_TARGET_MODULES):
	@@dir=`echo $@@ | sed -e 's/clean-target-//'`; \
	rm -f $(TARGET_SUBDIR)/$${dir}/multilib.out $(TARGET_SUBDIR)/$${dir}/tmpmulti.out; \
	if [ -f $(TARGET_SUBDIR)/$${dir}/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $(TARGET_SUBDIR)/$${dir} && $(MAKE) $(TARGET_FLAGS_TO_PASS) clean); \
	else \
	  true; \
	fi

clean-target: $(CLEAN_TARGET_MODULES) clean-target-libgcc
@


1.64
log
@* Makefile.tpl: Make maybe-check-gcc .PHONY.
* Makefile.in: Regenerate.
@
text
@d611 2
a612 2
.PHONY: do-[+target+]
do-[+target+]:
d635 1
a635 1
			[+target+]) \
d653 1
a653 1
			[+target+]) \
@


1.63
log
@* Makefile.tpl (configure-target-libiberty): Depend only on gcc, not
newlib or libgloss.
* Makefile.in: Regenerate.
@
text
@d1272 1
a1272 1
.PHONY: check-gcc
@


1.62
log
@* Makefile.tpl: Add missing empty maybe-check-gcc target.
* Makefile.in: Regenerate.
@
text
@d1437 1
a1437 1
configure-target-libiberty: $(ALL_GCC_C)
@


1.61
log
@2003-05-19  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* configure.in: Switch more things to use maybe dependencies.
	* Makefile.tpl: Switch more things to use maybe dependencies.
	Factor out common code from autogen IF statements.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d1273 1
@


1.60
log
@<top level>
	* configure.in: Switch more things to use maybe dependencies.
	Rearrange a little.  Use GCC_TOPLEV_SUBDIRS.
	* configure: Regenerate.
	* Makefile.tpl: Switch more things to use maybe dependencies.
	* Makefile.in: Regenerate.

<config>
	* config/acx.m4: Introduce _GCC_TOPLEV_NONCANONICAL_BUILD,
	_GCC_TOPLEV_NONCANOICAL_HOST, _GCC_TOPLEV_NONCANONICAL_TARGET,
	GCC_TOPLEV_SUBDIRS.
@
text
@d746 7
a752 2
do-check: @@check_host_modules@@ \
	@@check_target_modules@@
d780 6
d791 1
d815 1
a815 1
install-no-fixedincludes: installdirs @@install_host_modules_nogcc@@ \
d977 2
a979 1
.PHONY: check-[+module+]
a981 1
.PHONY: check-[+module+]
a993 1
.PHONY: check-[+module+]
a1003 1
[+ IF no_install +]
d1006 1
a1008 2
.PHONY: install-[+module+] maybe-install-[+module+]
maybe-install-[+module+]:
d1113 3
a1117 1
.PHONY: check-target-[+module+]
a1119 1
.PHONY: check-target-[+module+]
d1131 1
a1131 1
[+ IF no_install +]
d1134 1
a1137 2
.PHONY: install-target-[+module+] maybe-install-target-[+module+]
maybe-install-target-[+module+]:
@


1.59
log
@2003-05-15  Andreas Schwab  <schwab@@suse.de>

	* Makefile.tpl (install-opcodes): Define.
	* Makefile.in: Rebuild.
@
text
@d557 10
a566 2
configure-host: @@configure_host_modules@@
configure-target: @@configure_target_modules@@
a588 1
# This list only includes modules actually being configured and built.
d590 1
a590 3
all.normal: @@all_build_modules@@ \
	@@all_host_modules@@ \
	@@all_target_modules@@
d592 10
a601 2
all-host: @@all_host_modules@@
all-target: @@all_target_modules@@
d773 1
a773 1
install: installdirs @@install_host_modules@@ @@install_target_modules@@
d775 10
a784 1
install-target: @@install_target_modules@@
d804 1
a804 1
	@@install_target_modules@@ gcc-no-fixedincludes
@


1.58
log
@2003-05-02  Chris Demetriou  <cgd@@broadcom.com>

        * Makefile.tpl: Require "makeinfo" from texinfo 4.2 or later.
        * Makefile.in: Regenerate.
@
text
@d1337 2
@


1.57
log
@	* Makefile.tpl: Clean $(BUILD_SUBDIR).
	* Makefile.in: Regenerated.
@
text
@d197 1
a197 1
# For an installed makeinfo, we require it to be from texinfo 4 or
d203 1
a203 1
	  | egrep 'texinfo[^0-9]*([1-3][0-9]|[4-9])') >/dev/null 2>&1; \
@


1.56
log
@* Makefile.tpl (MAKEINFOFLAGS): Default to --split-size=5000000.
* Makefile.in: Regenerate.

* configure.in (powerpc64*-*-linux*): Remove.
* configure: Rebuilt.
@
text
@d675 1
@


1.56.2.1
log
@Merge from mainline.
@
text
@d197 1
a197 1
# For an installed makeinfo, we require it to be from texinfo 4.2 or
d203 1
a203 1
	  | egrep 'texinfo[^0-9]*([1-3][0-9]|4\.[2-9]|[5-9])') >/dev/null 2>&1; \
a674 1
	-rm -rf $(BUILD_SUBDIR)
@


1.56.2.2
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@a1336 2
# libopcodes depends on libbfd
install-opcodes: maybe-install-bfd
@


1.56.4.1
log
@	* Makefile.tpl: Clean $(BUILD_SUBDIR).
	* Makefile.in: Regenerated.
@
text
@a674 1
	-rm -rf $(BUILD_SUBDIR)
@


1.56.4.2
log
@2003-05-03  Chris Demetriou  <cgd@@broadcom.com>

        2003-04-29  Gerald Pfeifer  <pfeifer@@dbai.tuwien.ac.at>
        * Makefile.tpl (MAKEINFOFLAGS): Use --no-split instead of
        --split-size.
        * Makefile.in: Regenerate.
@
text
@d209 2
a210 2
# (Default to avoid splitting info files.)
MAKEINFOFLAGS = --no-split
@


1.55
log
@* Makefile.tpl (GCC_STRAP_TARGETS):  New variable containing all the
previous bootstrap targets, plus bubblestrap, quickstrap, cleanstrap,
and restrap.
* Makefile.in:  Regenerate.

* configure.in (arm-*-netbsdelf*): Enable building java libraries.
* configure: Regenerated.
@
text
@d209 2
a210 1
MAKEINFOFLAGS =
@


1.54
log
@	* Makefile.tpl: Move .NOEXPORT, MAKEOVERRIDES back down.
	* Makefile.in: Regenerate.
@
text
@d1192 3
a1194 2
.PHONY: bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap
bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap: all-bootstrap configure-gcc
@


1.53
log
@	* Makefile.tpl: Move .NOEXPORT, MAKEOVERRIDES up.  Delete unused
	Make macro.
	* Makefile.in: Regenerate.
	* configure.in: Clean up gxx_include_dir logic.
	* configure: Regenerate.
@
text
@a25 4
# Don't pass command-line variables to submakes.
.NOEXPORT:
MAKEOVERRIDES=

d1453 4
d1462 4
@


1.52
log
@2003-03-04  Daniel Jacobowitz  <drow@@mvista.com>

	* configure.in: Include $(build_tooldir)/sys-include in
	FLAGS_FOR_TARGET.
	* configure: Regenerated.

2003-03-04  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Reindent.
	* Makefile.in: Regenerate.
	* configure.in: Reindent.  Don't set unused variables.
	* configure: Regenerate.
@
text
@d26 4
a93 1
enable_version_specific_runtime_libs = @@enable_version_specific_runtime_libs@@
a1455 4
#

.NOEXPORT:
MAKEOVERRIDES=
@


1.52.2.1
log
@2003-03-16  Mark Kettenis  <kettenis@@gnu.org>

	Merge with mainline.  Tag is kettenis-i386newframe-20030316-mergepoint.
@
text
@d90 1
d1453 1
d1455 2
a1456 3
# ------------------------------
# Special directives to GNU Make
# ------------------------------
a1462 4

# Don't pass command-line variables to submakes.
.NOEXPORT:
MAKEOVERRIDES=
@


1.51
log
@	* Makefile.tpl: Always pass down RANLIB.
	* Makefile.in: Regenerate.

	* Makefile.tpl: Don't set unused enable_shared, enable_threads macros.
	* Makefile.in: Regenerate.
	* configure.in: Remove unused logic relating to --enable-shared
	and --enable-threads.  Remove bogus comments.  Remove redundant
	noconfigdirs.
	* configure: Regenerate.

	* configure.in: Replace ${libstdcxx_version} by its value.
	Remove reference to mh-dgux.
	* configure: Regenerate.
@
text
@d821 24
a844 24
	    [ -d $(BUILD_SUBDIR)/[+module+] ] || \
		mkdir $(BUILD_SUBDIR)/[+module+];\
	    r=`${PWD}`; export r; \
	    s=`cd $(srcdir); ${PWD}`; export s; \
	    AR="$(AR_FOR_BUILD)"; export AR; \
	    AS="$(AS_FOR_BUILD)"; export AS; \
	    CC="$(CC_FOR_BUILD)"; export CC; \
	    CFLAGS="$(CFLAGS_FOR_BUILD)"; export CFLAGS; \
	    CXX="$(CXX_FOR_BUILD)"; export CXX; \
	    CXXFLAGS="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS; \
	    GCJ="$(GCJ_FOR_BUILD)"; export GCJ; \
	    DLLTOOL="$(DLLTOOL_FOR_BUILD)"; export DLLTOOL; \
	    LD="$(LD_FOR_BUILD)"; export LD; \
            LDFLAGS="$(LDFLAGS_FOR_BUILD)"; export LDFLAGS; \
	    NM="$(NM_FOR_BUILD)"; export NM; \
	    RANLIB="$(RANLIB_FOR_BUILD)"; export RANLIB; \
	    WINDRES="$(WINDRES_FOR_BUILD)"; export WINDRES; \
	    echo Configuring in $(BUILD_SUBDIR)/[+module+]; \
	    cd "$(BUILD_SUBDIR)/[+module+]" || exit 1; \
	    case $(srcdir) in \
	    /* | [A-Za-z]:[\\/]*) \
	      topdir=$(srcdir) ;; \
	    *) \
	      case "$(BUILD_SUBDIR)" in \
d847 11
a857 17
	      esac ;; \
	    esac; \
	    if [ "$(srcdir)" = "." ] ; then \
	      if [ "$(BUILD_SUBDIR)" != "." ] ; then \
		if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
		  if [ -f Makefile ]; then \
		    if $(MAKE) distclean; then \
		      true; \
		    else \
		      exit 1; \
		    fi; \
		  else \
		    true; \
		  fi; \
		else \
		  exit 1; \
		fi; \
d859 1
a859 1
		true; \
a860 2
	      srcdiroption="--srcdir=."; \
	      libsrcdir="."; \
d862 1
a862 2
	      srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	      libsrcdir="$$s/[+module+]"; \
d864 14
a877 5
	    rm -f no-such-file || : ; \
	    CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	      $(BUILD_CONFIGARGS) $${srcdiroption} \
	      --with-build-subdir="$(BUILD_SUBDIR)" \
	      || exit 1
d883 2
a884 2
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  (cd $(BUILD_SUBDIR)/[+module+] && $(MAKE) all)
d935 6
a940 6
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	    IF with_x 
	      +] $(X11_FLAGS_TO_PASS)[+ 
	    ENDIF with_x +] all)
d950 7
a956 7
	    r=`${PWD}`; export r; \
	    s=`cd $(srcdir); ${PWD}`; export s; \
	    $(SET_LIB_PATH) \
	    (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	      IF with_x 
	        +] $(X11_FLAGS_TO_PASS)[+ 
	      ENDIF with_x +] check); \
d962 6
a967 6
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	    IF with_x 
	      +] $(X11_FLAGS_TO_PASS)[+ 
	    ENDIF with_x +] check)
d979 6
a984 6
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	    IF with_x 
	      +] $(X11_FLAGS_TO_PASS)[+ 
	    ENDIF with_x +] install)
d998 1
a998 1
	    mkdir $(TARGET_SUBDIR)/[+module+]; \
d1004 31
a1034 31
	    [ -d $(TARGET_SUBDIR)/[+module+] ] || \
		mkdir $(TARGET_SUBDIR)/[+module+];\
	    r=`${PWD}`; export r; \
	    s=`cd $(srcdir); ${PWD}`; export s; \
	    $(SET_LIB_PATH) \
	    AR="$(AR_FOR_TARGET)"; export AR; \
	    AS="$(AS_FOR_TARGET)"; export AS; \
	    CC="$(CC_FOR_TARGET)"; export CC; \
	    CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
	    CPPFLAGS="$(CFLAGS_FOR_TARGET)"; export CPPFLAGS; \[+ 
	IF raw_cxx +]
	    CXX_FOR_TARGET="$(RAW_CXX_FOR_TARGET)"; export CXX_FOR_TARGET; \
	    CXX="$(RAW_CXX_FOR_TARGET)"; export CXX; \[+ 
	ELSE normal_cxx +]
	    CXX="$(CXX_FOR_TARGET)"; export CXX; \[+ 
	ENDIF raw_cxx +]
	    CXXFLAGS="$(CXXFLAGS_FOR_TARGET)"; export CXXFLAGS; \
	    GCJ="$(GCJ_FOR_TARGET)"; export GCJ; \
	    DLLTOOL="$(DLLTOOL_FOR_TARGET)"; export DLLTOOL; \
	    LD="$(LD_FOR_TARGET)"; export LD; \
            LDFLAGS="$(LDFLAGS_FOR_TARGET)"; export LDFLAGS; \
	    NM="$(NM_FOR_TARGET)"; export NM; \
	    RANLIB="$(RANLIB_FOR_TARGET)"; export RANLIB; \
	    WINDRES="$(WINDRES_FOR_TARGET)"; export WINDRES; \
	    echo Configuring in $(TARGET_SUBDIR)/[+module+]; \
	    cd "$(TARGET_SUBDIR)/[+module+]" || exit 1; \
	    case $(srcdir) in \
	    /* | [A-Za-z]:[\\/]*) \
	      topdir=$(srcdir) ;; \
	    *) \
	      case "$(TARGET_SUBDIR)" in \
d1037 11
a1047 17
	      esac ;; \
	    esac; \
	    if [ "$(srcdir)" = "." ] ; then \
	      if [ "$(TARGET_SUBDIR)" != "." ] ; then \
		if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
		  if [ -f Makefile ]; then \
		    if $(MAKE) distclean; then \
		      true; \
		    else \
		      exit 1; \
		    fi; \
		  else \
		    true; \
		  fi; \
		else \
		  exit 1; \
		fi; \
d1049 1
a1049 1
		true; \
a1050 2
	      srcdiroption="--srcdir=."; \
	      libsrcdir="."; \
d1052 1
a1052 2
	      srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	      libsrcdir="$$s/[+module+]"; \
d1054 14
a1067 5
	    rm -f no-such-file || : ; \
	    CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	      $(TARGET_CONFIGARGS) $${srcdiroption} \
	      --with-target-subdir="$(TARGET_SUBDIR)" \
	      || exit 1
d1073 8
a1080 8
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $(TARGET_SUBDIR)/[+module+] && \
	    $(MAKE) $(TARGET_FLAGS_TO_PASS) [+
	       IF raw_cxx 
	         +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ 
	       ENDIF raw_cxx 
	    +] all)
d1089 8
a1096 8
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $(TARGET_SUBDIR)/[+module+] && \
	    $(MAKE) $(TARGET_FLAGS_TO_PASS) [+
	       IF raw_cxx 
	         +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ 
	       ENDIF raw_cxx 
	    +] check)
d1108 4
a1111 4
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $(TARGET_SUBDIR)/[+module+] && \
	    $(MAKE) $(TARGET_FLAGS_TO_PASS) install)
d1204 11
a1214 8
			msg="Comparing stage3 and stage4 of the compiler"; \
	  		compare=compare3-lean ;; \
	  *bootstrap4 ) msg="Comparing stage3 and stage4 of the compiler"; \
	  		compare=compare3 ;; \
	  *-lean )	msg="Comparing stage2 and stage3 of the compiler"; \
	  		compare=compare-lean ;; \
	  * )		msg="Comparing stage2 and stage3 of the compiler"; \
	  		compare=compare ;; \
@


1.50
log
@	* Makefile.tpl: Rearrange.
	* Makefile.in: Regenerate.
@
text
@a89 2
enable_shared = @@enable_shared@@
enable_threads = @@enable_threads@@
d487 1
a487 1
	"`echo 'RANLIB=$(RANLIB)' | sed -e s/.*=$$/XFOO=/`" \
d541 1
a541 1
	"`echo 'RANLIB=$(RANLIB)' | sed -e s/.*=$$/XFOO=/`" \
d620 1
a620 1
	                "`echo \"RANLIB=$${RANLIB}\" | sed -e 's/.*=$$/XFOO=/'`" \
d638 1
a638 1
	                "`echo \"RANLIB=$${RANLIB}\" | sed -e 's/.*=$$/XFOO=/'`" \
@


1.49
log
@* Makefile.tpl: Add definition of CPPFLAGS to pass into
configure-target-* as some target builds may require additional
flags for preprocessor tests.
* Makefile.in: Regenerated.
@
text
@d26 3
a29 1
links=@@configlinks@@
d47 1
a47 6
enable_shared = @@enable_shared@@
enable_threads = @@enable_threads@@
enable_version_specific_runtime_libs = @@enable_version_specific_runtime_libs@@
# The file containing GCC's version number.
gcc_version_trigger = @@gcc_version_trigger@@
gcc_version = @@gcc_version@@
d49 2
a50 2
# The gcc driver likes to know the arguments it was configured with.
TOPLEVEL_CONFIGURE_ARGUMENTS=@@TOPLEVEL_CONFIGURE_ARGUMENTS@@
a53 3
prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

a65 8
gxx_include_dir = @@gxx_include_dir@@
libstdcxx_incdir = @@libstdcxx_incdir@@

tooldir = @@tooldir@@
build_tooldir = @@build_tooldir@@

program_transform_name = @@program_transform_name@@

d75 31
d110 41
d159 4
a162 3
# INSTALL_PROGRAM_ARGS is changed by configure.in to use -x for a
# cygwin host.
INSTALL_PROGRAM_ARGS =
d164 1
a164 10
INSTALL = $(SHELL) $$s/install-sh -c
INSTALL_PROGRAM = $(INSTALL) $(INSTALL_PROGRAM_ARGS)
INSTALL_SCRIPT = $(INSTALL)
INSTALL_DATA = $(INSTALL) -m 644

AS = @@AS@@
AR = @@AR@@
AR_FLAGS = rc
RANLIB = @@RANLIB@@
CC = @@CC@@
a171 35
CFLAGS = @@CFLAGS@@
CXXFLAGS = @@CXXFLAGS@@

LDFLAGS = 
LIBCFLAGS = $(CFLAGS)
CFLAGS_FOR_BUILD = $(CFLAGS)
# During gcc bootstrap, if we use some random cc for stage1 then
# CFLAGS will be just -g.  We want to ensure that TARGET libraries
# (which we know are built with gcc) are built with optimizations so
# prepend -O2 when setting CFLAGS_FOR_TARGET.
CFLAGS_FOR_TARGET = -O2 $(CFLAGS)
LDFLAGS_FOR_TARGET = 
LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)
PICFLAG = 
PICFLAG_FOR_TARGET = 

CXX = @@CXX@@

# Use -O2 to stress test the compiler.
LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates
CXXFLAGS_FOR_TARGET = $(CXXFLAGS)
LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates

DLLTOOL = @@DLLTOOL@@
WINDRES = @@WINDRES@@

NM = @@NM@@

LD = @@LD@@

# These values are substituted by configure.
DEFAULT_YACC = @@DEFAULT_YACC@@
DEFAULT_LEX = @@DEFAULT_LEX@@
DEFAULT_M4 = @@DEFAULT_M4@@

d179 1
d189 1
d195 1
d222 7
d230 1
a230 4
# compilers to use to create programs which must be run in the build
# environment.
CC_FOR_BUILD = @@CC_FOR_BUILD@@
CXX_FOR_BUILD = $(CXX)
d232 2
a233 1
SUBDIRS = @@configdirs@@
d235 3
a237 3
# This is set by the configure script to the list of directories which
# should be built using the target tools.
TARGET_CONFIGDIRS = @@target_configdirs@@
d239 3
a241 3
# Target libraries are put under this directory:
# Changed by configure to $(target_alias) if cross.
TARGET_SUBDIR = @@target_subdir@@
d243 1
a243 2
BUILD_CONFIGDIRS = libiberty
BUILD_SUBDIR = @@build_subdir@@
d245 1
a245 3
# This is set by the configure script to the arguments to use when configuring
# directories built for the build system.
BUILD_CONFIGARGS = @@build_configargs@@
d247 2
a248 3
# This is set by the configure script to the arguments to use when configuring
# directories built for the host system.
HOST_CONFIGARGS = @@host_configargs@@
d250 1
a250 3
# This is set by the configure script to the arguments to use when configuring
# directories built for the target.
TARGET_CONFIGARGS = @@target_configargs@@
d252 1
a252 3
# This is set by configure to REALLY_SET_LIB_PATH if --enable-shared
# was used.
SET_LIB_PATH = @@SET_LIB_PATH@@
d254 1
a254 3
# This is the name of the environment variable used for the path to
# the libraries.  This may be changed by configure.in.
RPATH_ENVVAR = @@RPATH_ENVVAR@@
d256 3
a258 3
# This is the list of directories that may be needed in RPATH_ENVVAR
# so that programs built for the host machine work.
HOST_LIB_PATH = $$r/bfd:$$r/opcodes
a263 7
# configure.in sets SET_LIB_PATH to this if --enable-shared was used.
# Some platforms don't like blank entries, so we remove duplicate,
# leading and trailing colons.
REALLY_SET_LIB_PATH = \
  $(RPATH_ENVVAR)=`echo "$(HOST_LIB_PATH):$(TARGET_LIB_PATH):$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);

# Should be substed by configure.in
a264 6
CC_FOR_TARGET = @@CC_FOR_TARGET@@
CXX_FOR_TARGET = @@CXX_FOR_TARGET@@
RAW_CXX_FOR_TARGET = @@RAW_CXX_FOR_TARGET@@
CXX_FOR_TARGET_FOR_RECURSIVE_MAKE = @@CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@@
RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE = @@RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@@
GCJ_FOR_TARGET = @@GCJ_FOR_TARGET@@
d266 11
a276 6
# If GCC_FOR_TARGET is not overriden on the command line, then this
# variable is passed down to the gcc Makefile, where it is used to
# build libgcc2.a.  We define it here so that it can itself be
# overridden on the command line.
GCC_FOR_TARGET=@@GCC_FOR_TARGET@@
USUAL_GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) $$r/gcc/xgcc -B$$r/gcc/ $(FLAGS_FOR_TARGET)
d292 20
a311 13
LD_FOR_TARGET=@@LD_FOR_TARGET@@
USUAL_LD_FOR_TARGET = ` \
  if [ -f $$r/ld/ld-new ] ; then \
    echo $$r/ld/ld-new ; \
  elif [ -f $$r/gcc/xgcc ]; then \
    $(CC_FOR_TARGET) -print-prog-name=ld ; \
  else \
    if [ '$(host_canonical)' = '$(target_canonical)' ] ; then \
      echo $(LD); \
    else \
       echo ld | sed '$(program_transform_name)' ; \
    fi; \
  fi`
d325 8
a332 4
WINDRES_FOR_TARGET=@@WINDRES_FOR_TARGET@@
USUAL_WINDRES_FOR_TARGET = ` \
  if [ -f $$r/binutils/windres ] ; then \
    echo $$r/binutils/windres ; \
d335 1
a335 1
      echo $(WINDRES); \
d337 1
a337 1
       echo windres | sed '$(program_transform_name)' ; \
d341 8
a348 4
AR_FOR_TARGET=@@AR_FOR_TARGET@@
USUAL_AR_FOR_TARGET = ` \
  if [ -f $$r/binutils/ar ] ; then \
    echo $$r/binutils/ar ; \
d351 1
a351 1
      echo $(AR); \
d353 1
a353 1
       echo ar | sed '$(program_transform_name)' ; \
d373 4
a376 6
NM_FOR_TARGET=@@NM_FOR_TARGET@@
USUAL_NM_FOR_TARGET = ` \
  if [ -f $$r/binutils/nm-new ] ; then \
    echo $$r/binutils/nm-new ; \
  elif [ -f $$r/gcc/xgcc ]; then \
    $(CC_FOR_TARGET) -print-prog-name=nm ; \
d379 1
a379 1
      echo $(NM); \
d381 1
a381 1
       echo nm | sed '$(program_transform_name)' ; \
d384 6
@


1.48
log
@* configure.in: Introduce --enable-maintainer-mode.
* configure: Rebuilt.
* Makefile.tpl (Makefile.in, configure): Enable dependencies only
for maintainer mode.
* Makefile.in: Rebuilt.
@
text
@d990 2
a991 1
	    CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \[+ 
@


1.47
log
@        * Makefile.tpl (check-c++): Allow parallelism.
@
text
@d1413 1
a1413 1
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.tpl $(srcdir)/Makefile.def
d1425 1
a1425 1
$(srcdir)/configure: $(srcdir)/configure.in $(srcdir)/config/acx.m4
@


1.46
log
@* Makefile.tpl (RANLIB): Define.
* Makefile.in: Regenerate.
@
text
@d1236 2
a1237 1
check-c++: check-target-libstdc++-v3 check-gcc-c++
@


1.45
log
@Source Navigator is now on sourceforge...

        * Makefile.def: Remove "snavigator", "grep", and "db" modules.
        * Makefile.tpl: Remove "all-snavigator" and "all-grep".
        * Makefile.in: Regenerated.
        * configure.in: Remove all traces of snavigator, db, and grep.
        * configure: Regenerated.
@
text
@d113 1
@


1.44
log
@2003-01-31  Frank Ch. Eigler  <fche@@redhat.com>

	* Makefile.tpl (all-sid): Add libiberty/bfd/opcodes dependencies.
	* Makefile.in: Regenerated.
@
text
@d9 1
a9 1
#   1999, 2000, 2001, 2002 Free Software Foundation
a1337 1
all-grep: maybe-all-libiberty
a1346 1
all-snavigator: maybe-all-tcl maybe-all-tk maybe-all-itcl maybe-all-tix maybe-all-db maybe-all-grep maybe-all-libgui
@


1.43
log
@	* configure.in: Substitute TOPLEVEL_CONFIGURE_ARGUMENTS.
	* Makefile.tpl: Pass TOPLEVEL_CONFIGURE_ARGUMENTS to gcc.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
@
text
@d1321 1
a1321 1
all-sid: maybe-all-tcl maybe-all-tk
@


1.42
log
@* Makefile.tpl (BASE_FLAGS_TO_PASS): Also pass DESTDIR.
(install-info, dir.info): Prepend $(DESTDIR) to $(infodir).
* Makefile.in: Regenerate.
@
text
@d52 3
d1111 1
@


1.41
log
@* Makefile.tpl (local-distclean): Don't remove...
(multilib.ts): ... this.  Moved into...
(multilib.out): ... this.  Don't use sub-make.
($(BUILD_SUBDIR)/[+module+]/Makefile, [+module+]/Makefile,
$(TARGET_SUBDIR)/[+module+]/Makefile, gcc/Makefile): Moved into...
(configure-build-[+module+], configure-[+module+],
configure-target-[+module+], configure-gcc): ... these.  Test
for Makefile existence.  Drop config.status from dependencies.
* Makefile.in: Rebuilt.
* configure.in: Move gcc-version-trigger to the end of
ac_configure_args.  Add comments to maybedep.tmp and
serdep.tmp.  Introduce --disable-serial-configure.  Remove
nonopt from baseargs, matching and removing corresponding
whitespace while at it.
* configure: Rebuilt.
@
text
@d391 1
d637 1
a637 1
	  $(INSTALL_DATA) dir.info $(infodir)/dir.info ; \
d768 1
a768 1
	  $(srcdir)/texinfo/gen-info-dir $(infodir) $(srcdir)/texinfo/dir.info-template > dir.info.new ; \
@


1.40
log
@* Makefile.tpl ($(NOTPARALLEL)): Move to the end.  Bring uses of
program_transform_name to standard idiom.
(AUTOGEN, AUTOCONF): Define.
(Makefile.in): Use $(AUTOGEN).
(Makefile): Depend on config.status, and use autoconf-style rule to
build it.  Move original commands to...
(config.status): ... this new target.
(configure): Add $(srcdir).  Depend on config/acx.m4.  Use
$(AUTOCONF).
* Makefile.in: Rebuilt.
@
text
@d644 1
a644 1
	-rm -f multilib.out multilib.ts multilib.tmp maybedep.tmp serdep.tmp
d792 4
a795 3
configure-build-[+module+]: $(BUILD_SUBDIR)/[+module+]/Makefile
$(BUILD_SUBDIR)/[+module+]/Makefile: config.status
	@@[ -d $(BUILD_SUBDIR)/[+module+] ] || mkdir $(BUILD_SUBDIR)/[+module+];\
d866 3
a868 4
configure-[+module+]: [+module+]/Makefile

[+module+]/Makefile: config.status
	@@[ -d [+module+] ] || mkdir [+module+]; \
a966 1
configure-target-[+module+]: $(TARGET_SUBDIR)/[+module+]/Makefile
d970 3
a972 1
	@@[ -d $(TARGET_SUBDIR)/[+module+] ] || mkdir $(TARGET_SUBDIR)/[+module+];\
d975 4
a978 2
$(TARGET_SUBDIR)/[+module+]/Makefile: config.status $(TARGET_SUBDIR)/[+module+]/multilib.out
	@@[ -d $(TARGET_SUBDIR)/[+module+] ] || mkdir $(TARGET_SUBDIR)/[+module+];\
d1098 3
a1100 4
configure-gcc: gcc/Makefile

gcc/Makefile: config.status
	@@[ -d gcc ] || mkdir gcc; \
d1400 1
a1400 6
multilib.out: multilib.ts
	@@if [ -f multilib.out ] ; then : else \
	  rm -f multilib.ts; $(MAKE) multilib.ts; \
	fi

multilib.ts: maybe-all-gcc
a1404 1
	echo timestamp > multilib.ts
@


1.39
log
@	* Makefile.tpl: Fix dramatic bustage due to change in
	program_transform_name.
	* Makefile.in: Regenerate.

	* configure.in: Remove unnecessary PATH setting.
	* configure: Regnerate.

	* configure.in: Don't default to unprefixed tools unless
	the native tools will work.
	* configure: Regenerate.
@
text
@a25 6
# Tell GNU make 3.79 not to run the top level in parallel.  This 
# prevents contention for $builddir/$target/config.cache, as well
# as minimizing scatter in file system caches.
NOTPARALLEL = .NOTPARALLEL
$(NOTPARALLEL):

d279 1
a279 1
       t='$(program_transform_name)'; echo as | sed -e $$t ; \
d293 1
a293 1
       t='$(program_transform_name)'; echo ld | sed -e $$t ; \
d305 1
a305 1
       t='$(program_transform_name)'; echo dlltool | sed -e $$t ; \
d317 1
a317 1
       t='$(program_transform_name)'; echo windres | sed -e $$t ; \
d329 1
a329 1
       t='$(program_transform_name)'; echo ar | sed -e $$t ; \
d345 1
a345 1
       t='$(program_transform_name)'; echo ranlib | sed -e $$t ; \
d359 1
a359 1
       t='$(program_transform_name)'; echo nm | sed -e $$t ; \
d1411 1
d1413 1
a1413 1
	cd $(srcdir) && autogen Makefile.def
d1416 4
a1419 1
Makefile: Makefile.in configure $(gcc_version_trigger)
d1423 3
a1425 2
configure: configure.in
	cd $(srcdir) && autoconf
d1430 6
@


1.38
log
@(toplev)
	* configure.in: Convert to autoconf script.  Blow away lots
	of now-redundant Makefile fragments.
	* configure: Generate using Autoconf.
	* Makefile.tpl: Rewrite to reflect autoconfiscation.
	* Makefile.in: Regenerate.
(config)
	* acx.m4: New.
	* mh-a68bsd, mh-aix386, mh-apollo68, mh-delta88, mh-hp300,
	mh-hpux, mh-hpux8, mh-irix5, mh-irix6, mh-ncrsvr43, mh-openedition,
	mh-riscos, mh-sysv: Delete.
	* mh-cxux, mh-dgux386, mh-interix, mh-lynxrs6k, mh-ncr3000,
	mh-necv4, mh-sco, mh-solaris, mh-sysv4, mh-sysv5, mt-v810: Simplify.
@
text
@d285 1
a285 1
       t='$(program_transform_name)'; echo as | sed -e 's/x/x/' $$t ; \
d299 1
a299 1
       t='$(program_transform_name)'; echo ld | sed -e 's/x/x/' $$t ; \
d311 1
a311 1
       t='$(program_transform_name)'; echo dlltool | sed -e 's/x/x/' $$t ; \
d323 1
a323 1
       t='$(program_transform_name)'; echo windres | sed -e 's/x/x/' $$t ; \
d335 1
a335 1
       t='$(program_transform_name)'; echo ar | sed -e 's/x/x/' $$t ; \
d351 1
a351 1
       t='$(program_transform_name)'; echo ranlib | sed -e 's/x/x/' $$t ; \
d365 1
a365 1
       t='$(program_transform_name)'; echo nm | sed -e 's/x/x/' $$t ; \
@


1.37
log
@	* Makefile.tpl (multilib.out): Fix missing space.
	* Makefile.in: Regenerate.
@
text
@d375 4
d650 1
a650 1
	-rm -f multilib.out multilib.ts multilib.tmp
d1420 7
a1426 8
# with the gnu make, this is done automatically.

host_makefile_frag=@@host_makefile_frag@@
target_makefile_frag=@@target_makefile_frag@@

Makefile: Makefile.in configure.in $(host_makefile_frag) $(target_makefile_frag) $(gcc_version_trigger)
	$(SHELL) ./config.status

@


1.36
log
@2002-12-23  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Use shared multilib.out.  Use move-if-change for it.
	Convert (cd foo; make) to (cd foo && make).  Clean up multilib.out.
	* Makefile.in: Regenerate.
	* configure.in: Remove unnecessary leftovers.

2002-12-22  Geoffrey Keating  <geoffk@@apple.com>

	* config/mt-aix43: Delete.

2002-12-21  Geoffrey Keating  <geoffk@@apple.com>

	* configure.in (extra_ranlibflags_for_target): New variable.
	(*-*-darwin): Add -c to ranlib commands.
	* configure (tooldir): Handle extra_ranlibflags_for_target.
@
text
@d1401 1
a1401 1
	@@if [ -f multilib.out] ; then : else \
@


1.35
log
@	* Makefile.tpl: Revert HJL's change.
	* Makefile.in: Regenerated.
	* configure.in: Put build_prefix before $(BUILD_SUBDIR) here, and
	always.
@
text
@d592 1
a592 1
	    if (cd ./$$i; \
d597 2
a598 2
			[+target+]); \
	    then true; else exit 1; fi; \
d610 1
a610 1
	    if (cd $(TARGET_SUBDIR)/$$i; \
d615 2
a616 2
			[+target+]); \
	    then true; else exit 1; fi; \
d646 1
d675 1
a675 1
	  (cd $${dir}; $(MAKE) $(FLAGS_TO_PASS) clean); \
d688 1
a688 1
	  (cd $(TARGET_SUBDIR)/$${dir}; $(MAKE) $(TARGET_FLAGS_TO_PASS) clean); \
d746 1
a746 1
		(cd ./gcc; \
a787 1

d912 1
a912 1
	  (cd [+module+]; $(MAKE) $(FLAGS_TO_PASS)[+ 
d928 1
a928 1
	    (cd [+module+]; $(MAKE) $(FLAGS_TO_PASS)[+ 
d939 1
a939 1
	  (cd [+module+]; $(MAKE) $(FLAGS_TO_PASS)[+ 
d956 1
a956 1
	  (cd [+module+]; $(MAKE) $(FLAGS_TO_PASS)[+ 
d971 2
a972 3
# Don't manually override CC_FOR_TARGET at make time; get it set right
# at configure time.  Otherwise multilibs may be wrong.
$(TARGET_SUBDIR)/[+module+]/multilib.out: maybe-all-gcc
d974 1
a974 3
	r=`${PWD}`; export r; \
	echo "Configuring multilibs for [+module+]"; \
	$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/[+module+]/multilib.out 2> /dev/null
d1046 1
a1046 1
	  (cd $(TARGET_SUBDIR)/[+module+]; \
d1062 1
a1062 1
	  (cd $(TARGET_SUBDIR)/[+module+]; \
d1081 1
a1081 1
	  (cd $(TARGET_SUBDIR)/[+module+]; \
d1146 1
a1146 1
	  (cd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) quickstrap); \
d1151 1
a1151 1
	  (cd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) all); \
d1213 1
a1213 1
	  (cd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) check); \
d1224 1
a1224 1
	  (cd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++); \
d1239 1
a1239 1
	  (cd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) install); \
d1259 1
a1259 1
	  (cd ./gcc; \
d1394 17
@


1.34
log
@	* Makefile.tpl, configure.in: Substitute libstdcxx_incdir.
	* Makefile.in: Regenerate.
@
text
@d795 1
a795 1
@@build_prefix@@$(BUILD_SUBDIR)/[+module+]/Makefile: config.status
@


1.33
log
@2002-12-18  H.J. Lu <hjl@@gnu.org>

	* Makefile.tpl: Add @@build_prefix@@ before $(BUILD_SUBDIR).
	* Makefile.in: Regenerated.

	* configure.in (build_prefix): New. Substitute.
@
text
@d75 2
a76 1
gxx_include_dir=@@gxx_include_dir@@
@


1.32
log
@	* Makefile.tpl: Don't let real targets depend on phony targets.
	* Makefile.in: Regenerate.
@
text
@d794 1
a794 1
$(BUILD_SUBDIR)/[+module+]/Makefile: config.status
@


1.31
log
@2002-12-18  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl (do-info): Depend on maybe-all-texinfo, not all-texinfo.
	* Makefile.in: Regenerate.
@
text
@d1293 1
a1293 1
libgui/Makefile: maybe-configure-tcl maybe-configure-tk
@


1.30
log
@        * Makefile.tpl (all-gcc): Use 'make quickstrap' if there was a
        previous 'make bootstrap'.
        * Makefile.in: Regenerate.
@
text
@d630 3
a632 2
# Make sure makeinfo is built before we do a `make info'.
do-info: all-texinfo
@


1.29
log
@        * Makefile.tpl (check-gcc-c++): Renamed from check-c++.  Don't run
        library tests.
        (check-c++): Just depend on it and check-target-libstdc++-v3.
        * Makefile.in: Regenerate.
@
text
@d1137 2
a1138 2
# Don't remake gcc if it's already been made by 'bootstrap'; that causes
# nothing but trouble.  This wart will be fixed eventually by moving
d1143 5
a1147 2
	@@if [ -f gcc/xgcc ] ; then \
	  exit 0 ; \
@


1.28
log
@2002-12-13  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* configure.in, Makefile.tpl, Makefile.def: Remove tclX.
	* Makefile.in: Regenerate.
@
text
@d1216 2
a1217 2
.PHONY: check-c++
check-c++:
a1222 1
	  $(MAKE) check-target-libstdc++-v3; \
d1225 4
a1228 1
	fi 
@


1.27
log
@* Makefile.tpl (configure-target-rda): Depend on $(ALL_GCC_C).
* Makefile.in: Rebuilt.
@
text
@a1340 1
all-tclX: maybe-all-tcl maybe-all-tk
@


1.26
log
@2002-12-10  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Substitute more autoconfily.
	* configure: Substitute more autoconfily.
	* Makefile.in: Regenerate.
@
text
@d1370 1
@


1.25
log
@* Makefile.tpl (all-sim): Depend on maybe-configure-gdb.
* Makefile.in (all-sim): Ditto.
@
text
@d115 1
a115 1
CC = cc
d123 2
a124 3
# These flag values are normally overridden by the configure script.
CFLAGS = -g
CXXFLAGS = -g -O2
d139 1
a139 1
CXX = c++
@


1.24
log
@* Makefile.tpl: Change configure dependencies to not have real
targets depend on phony targets.
@
text
@d1315 1
a1315 1
all-sim: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-readline
@


1.23
log
@2002-12-05  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Change dependency for */multilib.out so that
	it works when gcc isn't in the tree.

	* configure.in: Substitute more.
	* configure: Run subconfigures from the Makefile.
	* Makefile.tpl: Run subconfigures from the Makefile; add a few
	convenience targets.  Make sure gcc isn't rebuilt after bootstrap.
@
text
@d1275 1
a1275 1
gcc/Makefile: maybe-configure-binutils maybe-configure-gas maybe-configure-ld maybe-configure-bison maybe-configure-flex
d1284 1
a1284 1
gdb/Makefile: maybe-configure-tcl maybe-configure-tk maybe-configure-sim
d1292 1
a1292 1
bfd/Makefile: configure-libiberty
d1306 1
a1306 1
expect/Makefile: maybe-configure-tcl maybe-configure-tk
d1308 1
a1308 1
itcl/Makefile: maybe-configure-tcl maybe-configure-tk
d1316 1
a1316 1
tk/Makefile: maybe-configure-tcl
d1318 1
a1318 1
tix/Makefile: maybe-configure-tcl maybe-configure-tk
d1350 2
a1351 2
$(TARGET_SUBDIR)/boehm-gc/Makefile: $(ALL_GCC_C) maybe-configure-target-qthreads
$(TARGET_SUBDIR)/fastjar/Makefile: maybe-configure-target-zlib
d1353 1
a1353 1
$(TARGET_SUBDIR)/libf2c/Makefile: $(ALL_GCC_C)
d1355 2
a1356 2
$(TARGET_SUBDIR)/libffi/Makefile: $(ALL_GCC_C) 
$(TARGET_SUBDIR)/libjava/Makefile: $(ALL_GCC_C) maybe-configure-target-zlib maybe-configure-target-boehm-gc maybe-configure-target-qthreads maybe-configure-target-libffi
d1358 1
a1358 1
$(TARGET_SUBDIR)/libobjc/Makefile: $(ALL_GCC_C)
d1360 1
a1360 1
$(TARGET_SUBDIR)/libstdc++-v3/Makefile: $(ALL_GCC_C)
d1362 1
a1362 1
$(TARGET_SUBDIR)/zlib/Makefile: $(ALL_GCC_C)
d1365 2
a1366 2
$(TARGET_SUBDIR)/examples/Makefile: $(ALL_GCC_C)
$(TARGET_SUBDIR)/libgloss/Makefile: $(ALL_GCC)
d1368 4
a1371 4
$(TARGET_SUBDIR)/libiberty/Makefile: $(ALL_GCC_C)
$(TARGET_SUBDIR)/libtermcap/Makefile: $(ALL_GCC_C)
$(TARGET_SUBDIR)/newlib/Makefile: $(ALL_GCC)
$(TARGET_SUBDIR)/winsup/Makefile: $(ALL_GCC_C)
d1375 1
a1375 1
$(TARGET_SUBDIR)/gperf/Makefile: $(ALL_GCC_CXX)
d1377 1
a1377 1
$(TARGET_SUBDIR)/qthreads/Makefile: $(ALL_GCC_C)
@


1.22
log
@	* Makefile.tpl: Add targets for configuring host subdirs in Makefile,
	and corresponding dependencies.
	* Makefile.in: Regenerate.
@
text
@a261 1
BASE_CC_FOR_TARGET = @@BASE_CC_FOR_TARGET@@
d532 2
a533 8
# This is a list of the configure targets for all of the modules which
# are compiled using the target tools.
CONFIGURE_TARGET_MODULES =[+
    FOR target_modules +] \
	configure-target-[+module+][+
    ENDFOR target_modules +]

configure-target: $(CONFIGURE_TARGET_MODULES)
d562 1
d907 1
a907 1
all-[+module+]:
d970 3
a972 1
$(TARGET_SUBDIR)/[+module+]/multilib.out: $(BASE_CC_FOR_TARGET)
d1138 3
d1143 4
a1146 2
all-gcc:
	@@if [ -f ./gcc/Makefile ] ; then \
a1150 2
	else \
	  true; \
d1164 1
a1164 1
bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap: all-bootstrap
@


1.21
log
@	* Makefile.tpl: Introduce rules to serialize subconfigure runs.
	* Makefile.in: Regenerate.
	* configure.in: Introduce rules to serialize subconfigure runs.
@
text
@d870 41
d1101 41
d1275 2
d1284 2
d1289 1
d1293 1
d1307 1
d1309 1
d1317 1
d1319 1
@


1.20
log
@	* configure.in: Introduce BASE_CC_FOR_TARGET.
	* Makefile.tpl: Reorganize and comment.  Introduce HOST_CONFIGARGS.
	Realize configure-build-* targets.  Realize configure-target-* targets.
	* Makefile.in: Regenerate.
@
text
@d1292 5
@


1.19
log
@	* configure: Move gcc_version_trigger stuff from here...
	* configure.in: ...to here.

	* configure.in: Separate subconfigure options added by this file from
	options given by the user.  Add machinery to put args for host
	subconfigures into the Makefile.

	* Makefile.tpl: Remove 'vault' targets.
	* Makefile.tpl: Reorder and comment dependencies.
	* Makefile.in: Regenerate.
@
text
@d226 8
a236 4
# This is set by the configure script to the arguments to use when configuring
# directories built for the build system.
BUILD_CONFIGARGS = @@build_configargs@@

d262 1
d762 8
a769 20
# Install the gcc headers files, but not the fixed include files,
# which Cygnus is not allowed to distribute.  This rule is very
# dependent on the workings of the gcc Makefile.in.
.PHONY: gcc-no-fixedincludes
gcc-no-fixedincludes:
	@@if [ -f ./gcc/Makefile ]; then \
	  rm -rf gcc/tmp-include; \
	  mv gcc/include gcc/tmp-include 2>/dev/null; \
	  mkdir gcc/include; \
	  cp $(srcdir)/gcc/gsyslimits.h gcc/include/syslimits.h; \
	  touch gcc/stmp-fixinc gcc/include/fixed; \
	  rm -f gcc/stmp-headers gcc/stmp-int-hdrs; \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}` ; export s; \
	  $(SET_LIB_PATH) \
	  (cd ./gcc; \
	   $(MAKE) $(GCC_FLAGS_TO_PASS) install); \
	  rm -rf gcc/include; \
	  mv gcc/tmp-include gcc/include 2>/dev/null; \
	else true; fi
d771 5
a775 12
# These rules are used to build the modules which are built with the
# build machine's native compiler.
[+ FOR build_modules +]
.PHONY: all-build-[+module+] maybe-all-build-[+module+]
maybe-all-build-[+module+]:
all-build-[+module+]:
	@@if [ -f ./[+module+]/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  (cd $(BUILD_SUBDIR)/[+module+] && $(MAKE) all); \
	else \
	  true; \
d778 19
d799 3
a801 8
configure-build-[+module+]:
	@@if [ ! -d $(BUILD_SUBDIR) ]; then \
	  true; \
	elif [ -f $(BUILD_SUBDIR)/[+module+]/Makefile ] ; then \
	  true; \
	elif echo " $(BUILD_CONFIGDIRS) " | grep " [+module+] " >/dev/null 2>&1; then \
	  if [ -d $(srcdir)/[+module+] ]; then \
	    [ -d $(BUILD_SUBDIR)/[+module+] ] || mkdir $(BUILD_SUBDIR)/[+module+];\
d856 8
a863 7
	      || exit 1; \
	  else \
	    true; \
	  fi; \
	else \
	  true; \
	fi
d866 3
a868 2
# These rules are used to build the modules which use FLAGS_TO_PASS.  To
# build a target all-X means to cd to X and make all.
d927 3
a929 2
# These rules are used to build the modules which are built with the target
# tools.  To make foo-X means to cd to X and make foo.
d933 10
a942 18
configure-target-[+module+]:
	@@r=`${PWD}`; export r; \
	  $(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/[+module+]/tmpmulti.out 2> /dev/null; \
	  if [ -s $(TARGET_SUBDIR)/[+module+]/tmpmulti.out ]; then \
	    if [ -f $(TARGET_SUBDIR)/[+module+]/multilib.out ]; then \
	      if cmp $(TARGET_SUBDIR)/[+module+]/multilib.out $(TARGET_SUBDIR)/[+module+]/tmpmulti.out > /dev/null; then \
		rm -f $(TARGET_SUBDIR)/[+module+]/tmpmulti.out; \
	      else \
		echo "Multilibs changed for [+module+], reconfiguring"; \
		rm -f $(TARGET_SUBDIR)/[+module+]/multilib.out $(TARGET_SUBDIR)/[+module+]/Makefile; \
		mv $(TARGET_SUBDIR)/[+module+]/tmpmulti.out $(TARGET_SUBDIR)/[+module+]/multilib.out; \
	      fi; \
	    else \
	      mv $(TARGET_SUBDIR)/[+module+]/tmpmulti.out $(TARGET_SUBDIR)/[+module+]/multilib.out; \
	    fi; \
	fi; exit 0	# break command into two pieces
	@@if [ -d $(srcdir)/[+module+] ]; then \
	    [ -d $(TARGET_SUBDIR)/[+module+] ] || mkdir $(TARGET_SUBDIR)/[+module+];\
d1003 1
a1003 4
	      || exit 1; \
	  else \
	    true; \
	  fi
d1007 1
a1007 1
all-target-[+module+]:
d1051 8
d1160 21
d1259 2
a1260 2
configure-target-boehm-gc: $(ALL_GCC_C) maybe-configure-target-qthreads
configure-target-fastjar: maybe-configure-target-zlib
d1262 1
a1262 1
configure-target-libf2c: $(ALL_GCC_C)
d1264 2
a1265 2
configure-target-libffi: $(ALL_GCC_C) 
configure-target-libjava: $(ALL_GCC_C) maybe-configure-target-zlib maybe-configure-target-boehm-gc maybe-configure-target-qthreads maybe-configure-target-libffi
d1267 1
a1267 1
configure-target-libobjc: $(ALL_GCC_C)
d1269 1
a1269 1
configure-target-libstdc++-v3: $(ALL_GCC_C)
d1271 1
a1271 1
configure-target-zlib: $(ALL_GCC_C)
d1274 2
a1275 2
configure-target-examples: $(ALL_GCC_C)
configure-target-libgloss: $(ALL_GCC)
d1277 4
a1280 4
configure-target-libiberty: $(ALL_GCC_C)
configure-target-libtermcap: $(ALL_GCC_C)
configure-target-newlib: $(ALL_GCC)
configure-target-winsup: $(ALL_GCC_C)
d1284 1
a1284 1
configure-target-gperf: $(ALL_GCC_CXX)
d1286 1
a1286 9
configure-target-qthreads: $(ALL_GCC_C)

# Dependencies of all-build-foo on configure-build-foo.
[+ FOR build_modules +]all-build-[+module+]: configure-build-[+module+]
[+ ENDFOR build_modules +]

# Dependencies of all-target-foo on configure-target-foo.
[+ FOR target_modules +]all-target-[+module+]: configure-target-[+module+]
[+ ENDFOR target_modules +]
d1292 3
a1294 29
### other supporting targets

MAKEDIRS= \
	$(DESTDIR)$(prefix) \
	$(DESTDIR)$(exec_prefix)
.PHONY: installdirs
installdirs: mkinstalldirs
	$(SHELL) $(srcdir)/mkinstalldirs $(MAKEDIRS)

dir.info: do-install-info
	if [ -f $(srcdir)/texinfo/gen-info-dir ] ; then \
	  $(srcdir)/texinfo/gen-info-dir $(infodir) $(srcdir)/texinfo/dir.info-template > dir.info.new ; \
	  mv -f dir.info.new dir.info ; \
	else true ; \
	fi

dist:
	@@echo "Building a full distribution of this tree isn't done"
	@@echo "via 'make dist'.  Check out the etc/ subdirectory" 

etags tags: TAGS

# Right now this just builds TAGS in each subdirectory.  emacs19 has the
# ability to use several tags files at once, so there is probably no need
# to combine them into one big TAGS file (like CVS 1.3 does).  We could
# (if we felt like it) have this Makefile write a piece of elisp which
# the user could load to tell emacs19 where all the TAGS files we just
# built are.
TAGS: do-TAGS
@


1.18
log
@	* Makefile.tpl: Restore bkorb's style patch, accidentally lost
	during replay.
	* Makefile.in: Regenerate.
@
text
@d732 1
a732 1
.PHONY: install uninstall source-vault binary-vault vault-install
a739 15
source-vault:
	$(MAKE) -f ./release/Build-A-Release \
		host=$(host_alias) source-vault

binary-vault:
	$(MAKE) -f ./release/Build-A-Release \
		host=$(host_alias) target=$(target_alias)

vault-install:
	@@if [ -f ./release/vault-install ] ; then \
	  ./release/vault-install $(host_alias) $(target_alias) ; \
	else \
	  true ; \
	fi

d1160 49
a1208 3
ALL_GCC = maybe-all-gcc
ALL_GCC_C = $(ALL_GCC) maybe-all-target-newlib maybe-all-target-libgloss
ALL_GCC_CXX = $(ALL_GCC_C) maybe-all-target-libstdc++-v3
d1210 1
a1210 1
# This is a list of inter-dependencies among modules.
a1212 2
all-bfd: maybe-all-libiberty maybe-all-intl
all-binutils: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-flex maybe-all-bison maybe-all-byacc maybe-all-intl
a1213 2
configure-target-boehm-gc: $(ALL_GCC_C) maybe-configure-target-qthreads
all-dejagnu: maybe-all-tcl maybe-all-expect maybe-all-tk
d1215 1
a1215 2
configure-target-examples: $(ALL_GCC_C)
all-expect: maybe-all-tcl maybe-all-tk
a1217 8
all-gas: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-intl
all-gcc: maybe-all-libiberty maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib
all-bootstrap: maybe-all-libiberty maybe-all-texinfo maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib
GDB_TK = @@GDB_TK@@
all-gdb: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-mmalloc maybe-all-readline maybe-all-bison maybe-all-byacc maybe-all-sim $(gdbnlmrequirements) $(GDB_TK)
configure-target-gperf: $(ALL_GCC_CXX)
all-target-gperf: maybe-all-target-libiberty maybe-all-target-libstdc++-v3
all-gprof: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-intl
a1220 14
all-itcl: maybe-all-tcl maybe-all-tk
all-ld: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-intl
configure-target-libgloss: $(ALL_GCC)
all-target-libgloss: maybe-configure-target-newlib
all-libgui: maybe-all-tcl maybe-all-tk maybe-all-itcl
configure-target-libffi: $(ALL_GCC_C) 
configure-target-libjava: $(ALL_GCC_C) maybe-configure-target-zlib maybe-configure-target-boehm-gc maybe-configure-target-qthreads maybe-configure-target-libffi
all-target-libjava: maybe-all-fastjar maybe-all-target-zlib maybe-all-target-boehm-gc maybe-all-target-qthreads maybe-all-target-libffi
configure-target-libstdc++-v3: $(ALL_GCC_C)
all-target-libstdc++-v3: maybe-all-target-libiberty
configure-target-libf2c: $(ALL_GCC_C)
all-target-libf2c: maybe-all-target-libiberty
configure-target-libobjc: $(ALL_GCC_C)
all-target-libobjc: maybe-all-target-libiberty
a1222 3
configure-target-newlib: $(ALL_GCC)
configure-target-libtermcap: $(ALL_GCC_C)
all-opcodes: maybe-all-bfd maybe-all-libiberty
a1224 1
configure-target-qthreads: $(ALL_GCC_C)
a1227 2
all-sid: maybe-all-tcl maybe-all-tk
all-sim: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-readline
a1230 5
all-tk: maybe-all-tcl
all-texinfo: maybe-all-libiberty
all-tix: maybe-all-tcl maybe-all-tk
configure-target-winsup: $(ALL_GCC_C)
all-target-winsup: maybe-all-target-libiberty maybe-all-target-libtermcap
d1232 7
a1238 2
configure-target-zlib: $(ALL_GCC_C)
all-fastjar: maybe-all-zlib maybe-all-libiberty
d1241 15
d1257 4
a1260 2
install-gdb: maybe-install-tcl maybe-install-tk maybe-install-itcl maybe-install-tix maybe-install-libgui
install-sid: maybe-install-tcl maybe-install-tk
d1262 4
a1265 12
# We put install-opcodes before install-binutils because the installed
# binutils might be on PATH, and they might need the shared opcodes
# library.
install-binutils: maybe-install-opcodes

# We put install-tcl before install-itcl because itcl wants to run a
# program on installation which uses the Tcl libraries.
install-itcl: maybe-install-tcl

# This is a slightly kludgy method of getting dependencies on 
# all-build-libiberty correct; it would be better to build it every time.
all-gcc: maybe-all-build-libiberty
@


1.17
log
@2002-12-02  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(finishing slow-motion replay)
	* configure: Remove skip-this-dir support.
	* Makefile.tpl: Remove skip-this-dir support.

	* Makefile.tpl: Remove leftover support for non-autoconfiscated
	subdirectories.
	* Makefile.in: Regenerate.

	* Makefile.tpl: Strip out useless setting of 'dir'.
	* Makefile.in: Regenerate.

2002-12-02  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(finishing slow-motion replay)
	* configure.in: Fix deeply stupid bug.

	* configure.in: Introduce RAW_CXX_FOR_TARGET and simplify embedded
	shell code in CXX_FOR_TARGET
	* Makefile.def: Introduce raw_cxx.
	* Makefile.tpl: Use raw_cxx to select between CXX_FOR_TARGET and
	RAW_CXX_FOR_TARGET.
	* Makefile.in: Regenerate.

2002-12-02  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(finishing slow-motion replay)
	* Makefile.tpl: Remove unnecessary ifs.
	* Makefile.in: Regenerate.

	* Makefile.tpl: Implement soft dependency machinery.  Maybe-ize
	dependencies.  Maybe-ize build-libiberty.  Create dummy install
	targets for 'no_install' modules.
	* configure: Move GDB_TK substitution to configure.in.  Move
	build_modules stuff to configure.in.
	* configure.in: Implement soft dependency machinery.  Maybe-ize
	GDB_TK, rearrange slightly.  Move build_modules stuff from configure.
	* Makefile.in: Regenerate.
@
text
@d1 1
a1 1
[+ AutoGen5 template
d530 4
a533 2
CONFIGURE_TARGET_MODULES = [+ FOR target_modules +]\
	configure-target-[+module+] [+ ENDFOR target_modules +]
d538 6
a543 2
CLEAN_MODULES = [+ FOR host_modules +][+ IF no_clean +][+ ELIF with_x +][+ ELSE clean +]\
	clean-[+module+] [+ ENDIF no_clean +][+ ENDFOR host_modules +]
d546 6
a551 2
CLEAN_TARGET_MODULES = [+ FOR target_modules +][+ IF no_clean +][+ ELSE clean +]\
	clean-target-[+module+] [+ ENDIF no_clean +][+ ENDFOR target_modules +]
@


1.16
log
@2002-12-01  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(continuing slow-motion replay)
	* Makefile.tpl: Make all-target, install-target behave similarly
	to all, install (only hitting configured targets).  Eliminate
	unused macro defintions.

	* Makefile.tpl: Add all-gcc: all-build-libiberty dependency when
	build != host.

	* Makefile.tpl: Add all-gcc: all-libiberty dependency.

	* ltcf-c.sh, ltcf-gcj.sh, Makefile.tpl: Correct BUILD/HOST confusion.

	* configure.in: Produce lists of subdir targets we're actually
	configuring.  Remove references to "dosrel".
	* Makefile.tpl: Let configure set which subdir targets are hit.
	Remove install-cross; clean up install; remove ALL.  Remove
	references to "dosrel".  Remove "EXTRA_TARGET_HOST" hackery.
	Autogenerate host module targets.  Remove empty dependency lines
	and redundant dependency; rearrange slightly.
	* Makefile.def: Add host-side libtermcap, utils.

	* Makefile.in: Regenerate.
@
text
@d259 1
d261 1
d444 2
a445 1
	CXX_FOR_TARGET='$(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)'
a527 12
# This is a list of the targets for all of the modules which are compiled
# using the build machine's native compiler.  Configure edits the second
# macro for build!=host builds.
ALL_BUILD_MODULES_LIST = \
	all-build-libiberty
ALL_BUILD_MODULES = @@all_build_modules@@

# This is a list of the configure targets for all of the modules which
# are compiled using the native tools.
CONFIGURE_BUILD_MODULES = \
	configure-build-libiberty

d786 2
a787 1
.PHONY: all-build-[+module+]
d797 2
a798 1
.PHONY: configure-build-[+module+]
d857 5
a861 18
	    if [ -f $${libsrcdir}/configure ] ; then \
	      rm -f no-such-file skip-this-dir; \
	      CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
		$(BUILD_CONFIGARGS) $${srcdiroption} \
		--with-build-subdir="$(BUILD_SUBDIR)"; \
	    else \
	      rm -f no-such-file skip-this-dir; \
	      CONFIG_SITE=no-such-file $(SHELL) $$s/configure \
		$(BUILD_CONFIGARGS) $${srcdiroption} \
		--with-build-subdir="$(BUILD_SUBDIR)"; \
	    fi || exit 1; \
	    if [ -f skip-this-dir ] ; then \
	      sh skip-this-dir; \
	      rm -f skip-this-dir; \
	      cd ..; rmdir [+module+] || true; \
	    else \
	      true; \
	    fi; \
d873 2
a874 1
.PHONY: all-[+module+]
d876 1
a876 3
	@@dir=[+module+]; \
	if [ -f ./[+module+]/Makefile ] ; then \
	  r=`${PWD}`; export r; \
d882 1
a882 4
	    ENDIF with_x +] all); \
	else \
	  true; \
	fi
a891 2
	  dir=[+module+]; \
	  if [ -f ./[+module+]/Makefile ] ; then \
a898 3
	  else \
	    true; \
	  fi; \
d903 1
a903 3
	@@dir=[+module+]; \
	if [ -f ./[+module+]/Makefile ] ; then \
	  r=`${PWD}`; export r; \
d909 1
a909 4
	    ENDIF with_x +] check); \
	else \
	  true; \
	fi
d913 2
a914 1
.PHONY: install-[+module+]
d917 2
a918 1
.PHONY: install-[+module+]
d920 1
a920 3
	@@dir=[+module+]; \
	if [ -f ./[+module+]/Makefile ] ; then \
	  r=`${PWD}`; export r; \
d926 1
a926 4
	    ENDIF with_x +] install); \
	else \
	  true; \
	fi
d933 2
a934 1
.PHONY: configure-target-[+module+]
d936 1
a936 2
	@@if [ -d $(TARGET_SUBDIR)/[+module+] ]; then \
	  r=`${PWD}`; export r; \
a949 1
	  fi; \
d951 1
a951 7
	@@dir=[+module+] ; \
	if [ ! -d $(TARGET_SUBDIR) ]; then \
	  true; \
	elif [ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] ; then \
	  true; \
	elif echo " $(TARGET_CONFIGDIRS) " | grep " [+module+] " >/dev/null 2>&1; then \
	  if [ -d $(srcdir)/[+module+] ]; then \
d959 7
a965 2
	    CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
	    CXX="$(CXX_FOR_TARGET)"; export CXX; \
d1009 5
a1013 18
	    if [ -f $${libsrcdir}/configure ] ; then \
	      rm -f no-such-file skip-this-dir; \
	      CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
		$(TARGET_CONFIGARGS) $${srcdiroption} \
		--with-target-subdir="$(TARGET_SUBDIR)"; \
	    else \
	      rm -f no-such-file skip-this-dir; \
	      CONFIG_SITE=no-such-file $(SHELL) $$s/configure \
		$(TARGET_CONFIGARGS) $${srcdiroption} \
		--with-target-subdir="$(TARGET_SUBDIR)"; \
	    fi || exit 1; \
	    if [ -f skip-this-dir ] ; then \
	      sh skip-this-dir; \
	      rm -f skip-this-dir; \
	      cd ..; rmdir [+module+] || true; \
	    else \
	      true; \
	    fi; \
d1016 1
a1016 4
	  fi; \
	else \
	  true; \
	fi
d1018 2
a1019 1
.PHONY: all-target-[+module+]
d1021 1
a1021 3
	@@dir=[+module+] ; \
	if [ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] ; then \
	  r=`${PWD}`; export r; \
d1025 5
a1029 4
	    $(MAKE) $(TARGET_FLAGS_TO_PASS) all); \
	else \
	  true; \
	fi
d1037 1
a1037 3
	@@dir=[+module+] ; \
	if [ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] ; then \
	  r=`${PWD}`; export r; \
d1041 5
a1045 4
	    $(MAKE) $(TARGET_FLAGS_TO_PASS) check);\
	else \
	  true; \
	fi
d1047 8
a1054 2
[+ IF no_install +][+ ELSE install +]\
.PHONY: install-target-[+module+]
d1056 1
a1056 3
	@@dir=[+module+] ; \
	if [ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] ; then \
	  r=`${PWD}`; export r; \
d1060 1
a1060 4
	    $(MAKE) $(TARGET_FLAGS_TO_PASS) install); \
	else \
	  true; \
	fi
d1065 2
a1066 1
.PHONY: all-gcc
d1153 2
a1154 1
.PHONY: install-gcc
d1165 3
a1167 3
ALL_GCC = all-gcc
ALL_GCC_C = $(ALL_GCC) all-target-newlib all-target-libgloss
ALL_GCC_CXX = $(ALL_GCC_C) all-target-libstdc++-v3
d1170 8
a1177 8
all-autoconf: all-m4 all-texinfo
all-automake: all-m4 all-texinfo
all-bfd: all-libiberty all-intl
all-binutils: all-libiberty all-opcodes all-bfd all-flex all-bison all-byacc all-intl
all-bison: all-texinfo
configure-target-boehm-gc: $(ALL_GCC_C) configure-target-qthreads
all-dejagnu: all-tcl all-expect all-tk
all-diff: all-libiberty
d1179 6
a1184 6
all-expect: all-tcl all-tk
all-fileutils: all-libiberty
all-flex: all-libiberty all-bison all-byacc
all-gas: all-libiberty all-opcodes all-bfd all-intl
all-gcc: all-libiberty all-bison all-byacc all-binutils all-gas all-ld all-zlib
all-bootstrap: all-libiberty all-texinfo all-bison all-byacc all-binutils all-gas all-ld all-zlib
d1186 1
a1186 1
all-gdb: all-libiberty all-opcodes all-bfd all-mmalloc all-readline all-bison all-byacc all-sim $(gdbnlmrequirements) $(GDB_TK)
d1188 7
a1194 7
all-target-gperf: all-target-libiberty all-target-libstdc++-v3
all-gprof: all-libiberty all-bfd all-opcodes all-intl
all-grep: all-libiberty
all-gzip: all-libiberty
all-hello: all-libiberty
all-itcl: all-tcl all-tk
all-ld: all-libiberty all-bfd all-opcodes all-bison all-byacc all-flex all-intl
d1196 2
a1197 2
all-target-libgloss: configure-target-newlib
all-libgui: all-tcl all-tk all-itcl
d1199 2
a1200 2
configure-target-libjava: $(ALL_GCC_C) configure-target-zlib configure-target-boehm-gc configure-target-qthreads configure-target-libffi
all-target-libjava: all-fastjar all-target-zlib all-target-boehm-gc all-target-qthreads all-target-libffi
d1202 1
a1202 1
all-target-libstdc++-v3: all-target-libiberty
d1204 1
a1204 1
all-target-libf2c: all-target-libiberty
d1206 3
a1208 3
all-target-libobjc: all-target-libiberty
all-m4: all-libiberty all-texinfo
all-make: all-libiberty
d1211 3
a1213 3
all-opcodes: all-bfd all-libiberty
all-patch: all-libiberty
all-prms: all-libiberty
d1215 11
a1225 11
all-recode: all-libiberty
all-sed: all-libiberty
all-send-pr: all-prms
all-sid: all-tcl all-tk
all-sim: all-libiberty all-bfd all-opcodes all-readline
all-snavigator: all-tcl all-tk all-itcl all-tix all-db all-grep all-libgui
all-tar: all-libiberty
all-tclX: all-tcl all-tk
all-tk: all-tcl
all-texinfo: all-libiberty
all-tix: all-tcl all-tk
d1227 2
a1228 2
all-target-winsup: all-target-libiberty all-target-libtermcap
all-uudecode: all-libiberty
d1230 3
a1232 3
all-fastjar: all-zlib all-libiberty
configure-target-fastjar: configure-target-zlib
all-target-fastjar: all-target-zlib all-target-libiberty
d1234 2
a1235 2
install-gdb: install-tcl install-tk install-itcl install-tix install-libgui
install-sid: install-tcl install-tk
d1240 1
a1240 1
install-binutils: install-opcodes
d1244 1
a1244 1
install-itcl: install-tcl
d1248 1
a1248 1
all-gcc: @@all_build_modules@@
d1251 2
a1252 1
all-build-libiberty: configure-build-libiberty
d1257 4
@


1.15
log
@2002-12-01  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(Continuing slow-motion replay)
	* Makefile.def: Add list of recursive targets to autogenerate.
	Add build_modules.
	* Makefile.tpl: Autogenerate do-* targets.  Autogenerate *-target-*
	targets.  Autogenerate *-build-* targets.
	* Makefile.in: Regenerate.
@
text
@a111 2
INSTALL_DOSREL = install-dosrel-fake

d119 1
a119 1
HOST_CC = $(CC_FOR_BUILD)
a254 15
ALL = all.normal
INSTALL_TARGET = installdirs \
	install-gcc \
	$(INSTALL_MODULES) \
	$(INSTALL_TARGET_MODULES) \
	$(INSTALL_X11_MODULES) \
	$(INSTALL_DOSREL)

INSTALL_TARGET_CROSS = installdirs \
	install-gcc-cross \
	$(INSTALL_MODULES) \
	$(INSTALL_TARGET_MODULES) \
	$(INSTALL_X11_MODULES) \
	$(INSTALL_DOSREL)

a367 7
# These can be overridden by config/mt-*.
# The _TARGET_ is because they're specified in mt-foo.
# The _HOST_ is because they're programs that run on the host.
EXTRA_TARGET_HOST_ALL_MODULES =
EXTRA_TARGET_HOST_INSTALL_MODULES =
EXTRA_TARGET_HOST_CHECK_MODULES =

d505 1
a505 1
	'HOST_CC=$(CC_FOR_BUILD)' \
a536 51
# This is a list of the targets for all of the modules which are compiled
# using $(FLAGS_TO_PASS).
ALL_MODULES = [+ FOR host_modules +][+ IF with_x +][+ ELSE with_x +]\
	all-[+module+] [+ ENDIF with_x +][+ ENDFOR host_modules +]\
	$(EXTRA_TARGET_HOST_ALL_MODULES)

# This is a list of the check targets for all of the modules which are
# compiled using $(FLAGS_TO_PASS).
#
# The list is in two parts.  The first lists those tools which
# are tested as part of the host's native tool-chain, and not
# tested in a cross configuration.
NATIVE_CHECK_MODULES = \
	check-bison \
	check-byacc \
	check-fastjar \
	check-flex \
	check-zip

CROSS_CHECK_MODULES = [+ FOR host_modules +][+ IF no_check  +][+ ELIF no_check_cross +][+ ELIF with_x +][+ ELSE check +]\
	check-[+module+] [+ ENDIF no_check +][+ ENDFOR host_modules +]\
	$(EXTRA_TARGET_HOST_CHECK_MODULES)

CHECK_MODULES=$(NATIVE_CHECK_MODULES) $(CROSS_CHECK_MODULES)

# This is a list of the install targets for all of the modules which are
# compiled using $(FLAGS_TO_PASS).
INSTALL_MODULES = [+ FOR host_modules+][+ IF no_install +][+ ELIF with_x +][+ ELSE install +]\
	install-[+module+] [+ ENDIF no_install +][+ ENDFOR host_modules +]\
	$(EXTRA_TARGET_HOST_INSTALL_MODULES)

# This is a list of the targets for all of the modules which are compiled
# using $(X11_FLAGS_TO_PASS).
ALL_X11_MODULES = [+ FOR host_modules +][+ IF with_x +]\
	all-[+module+] [+ ENDIF with_x +][+ ENDFOR host_modules +]

# This is a list of the check targets for all of the modules which are
# compiled using $(X11_FLAGS_TO_PASS).
CHECK_X11_MODULES = [+ FOR host_modules +][+ IF with_x +]\
	check-[+module+] [+ ENDIF with_x +][+ ENDFOR host_modules +]

# This is a list of the install targets for all the modules which are
# compiled using $(X11_FLAGS_TO_PASS).
INSTALL_X11_MODULES = [+ FOR host_modules +][+ IF with_x +]\
	install-[+module+] [+ ENDIF with_x +][+ ENDFOR host_modules +]

# This is a list of the targets for all of the modules which are compiled
# using $(TARGET_FLAGS_TO_PASS).
ALL_TARGET_MODULES = [+ FOR target_modules +]\
	all-target-[+module+] [+ ENDFOR target_modules +]

d542 1
a542 9
# This is a list of the check targets for all of the modules which are
# compiled using $(TARGET_FLAGS_TO_PASS).
CHECK_TARGET_MODULES = [+ FOR target_modules +][+ IF no_check +][+ ELSE check +]\
	check-target-[+module+] [+ ENDIF no_check +][+ ENDFOR target_modules +]

# This is a list of the install targets for all of the modules which are
# compiled using $(TARGET_FLAGS_TO_PASS).
INSTALL_TARGET_MODULES = [+ FOR target_modules +][+ IF no_install +][+ ELSE install +]\
	install-target-[+module+] [+ ENDIF no_install +][+ ENDFOR target_modules +]
d557 1
d559 5
a563 6
all.normal: \
	$(ALL_BUILD_MODULES) \
	$(ALL_MODULES) \
	$(ALL_X11_MODULES) \
	$(ALL_TARGET_MODULES) \
	all-gcc
d704 3
a706 4
do-check: $(CHECK_MODULES) \
	$(CHECK_TARGET_MODULES) \
	$(CHECK_X11_MODULES) \
	check-gcc
d731 4
a734 3
.PHONY: install install-cross uninstall source-vault binary-vault vault-install
install: $(INSTALL_TARGET) 
install-cross: $(INSTALL_TARGET_CROSS) 
d768 2
a769 6
install-no-fixedincludes: \
	installdirs \
	$(INSTALL_MODULES) \
	$(INSTALL_TARGET_MODULES) \
	$(INSTALL_X11_MODULES) \
	gcc-no-fixedincludes 
d890 1
a890 1
# This rule is used to build the modules which use FLAGS_TO_PASS.  To
d892 5
a896 4
.PHONY: $(ALL_MODULES)
$(ALL_MODULES):
	@@dir=`echo $@@ | sed -e 's/all-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
d900 4
a903 1
	  (cd $${dir}; $(MAKE) $(FLAGS_TO_PASS) all); \
d908 7
a914 6
# These rules are used to check the modules which use FLAGS_TO_PASS.
# To build a target check-X means to cd to X and make check.  Some
# modules are only tested in a native toolchain.

.PHONY: $(CHECK_MODULES) $(NATIVE_CHECK_MODULES) $(CROSS_CHECK_MODULES)
$(NATIVE_CHECK_MODULES):
d916 2
a917 2
	  dir=`echo $@@ | sed -e 's/check-//'`; \
	  if [ -f ./$${dir}/Makefile ] ; then \
d921 4
a924 1
	    (cd $${dir}; $(MAKE) $(FLAGS_TO_PASS) check); \
d929 5
a933 4

$(CROSS_CHECK_MODULES):
	@@dir=`echo $@@ | sed -e 's/check-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
d937 4
a940 1
	  (cd $${dir}; $(MAKE) $(FLAGS_TO_PASS) check); \
d944 1
d946 8
a953 6
# This rule is used to install the modules which use FLAGS_TO_PASS.
# To build a target install-X means to cd to X and make install.
.PHONY: $(INSTALL_MODULES)
$(INSTALL_MODULES): installdirs
	@@dir=`echo $@@ | sed -e 's/install-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
d957 4
a960 1
	  (cd $${dir}; $(MAKE) $(FLAGS_TO_PASS) install); \
d964 2
d1085 5
a1089 1
[+ IF no_check +][+ ELSE check +]
a1118 45
# This rule is used to build the modules which use X11_FLAGS_TO_PASS.
# To build a target all-X means to cd to X and make all.
.PHONY: $(ALL_X11_MODULES)
$(ALL_X11_MODULES):
	@@dir=`echo $@@ | sed -e 's/all-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $${dir}; \
	   $(MAKE) $(FLAGS_TO_PASS) $(X11_FLAGS_TO_PASS) all); \
	else \
	  true; \
	fi

# This rule is used to check the modules which use X11_FLAGS_TO_PASS.
# To build a target check-X means to cd to X and make all.
.PHONY: $(CHECK_X11_MODULES)
$(CHECK_X11_MODULES):
	@@dir=`echo $@@ | sed -e 's/check-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $${dir}; \
	   $(MAKE) $(FLAGS_TO_PASS) $(X11_FLAGS_TO_PASS) check); \
	else \
	  true; \
	fi

# This rule is used to install the modules which use X11_FLAGS_TO_PASS.
# To build a target install-X means to cd to X and make install.
.PHONY: $(INSTALL_X11_MODULES)
$(INSTALL_X11_MODULES): installdirs
	@@dir=`echo $@@ | sed -e 's/install-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $${dir}; \
	   $(MAKE) $(FLAGS_TO_PASS) $(X11_FLAGS_TO_PASS) install); \
	else \
	  true; \
	fi

a1217 27
.PHONY: install-gcc-cross
install-gcc-cross:
	@@if [ -f ./gcc/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd gcc; $(MAKE) $(GCC_FLAGS_TO_PASS) LANGUAGES="c c++" install); \
	else \
	  true; \
	fi
# EXPERIMENTAL STUFF
# This rule is used to install the modules which use FLAGS_TO_PASS.
# To build a target install-X means to cd to X and make install.
.PHONY: install-dosrel
install-dosrel: installdirs info
	@@dir=`echo $@@ | sed -e 's/install-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
	  r=`${PWD}`; export r; \
	  s=`cd $(srcdir); ${PWD}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd $${dir}; $(MAKE) $(FLAGS_TO_PASS) install); \
	else \
	  true; \
	fi

install-dosrel-fake:

a1222 1
all-ash:
a1224 1
all-bash:
a1228 3
all-byacc:
all-bzip2:
all-db:
a1230 1
all-etc:
a1233 2
all-findutils:
all-find:
d1236 1
a1236 2
all-gawk:
all-gcc: all-bison all-byacc all-binutils all-gas all-ld all-zlib
a1239 2
all-gettext:
all-gnuserv:
a1243 1
all-guile:
a1245 2
all-indent:
all-intl:
a1250 4
all-libiberty:

all-build-libiberty: configure-build-libiberty

a1255 1
all-libtool:
a1261 1
all-mmalloc:
a1265 1
all-perl:
a1267 2
all-rcs:
all-readline:
a1270 1
all-shellutils:
a1274 1
all-tcl:
a1277 2
all-textutils:
all-time:
a1278 1
all-wdiff:
a1281 2
all-zip:
all-zlib:
d1285 1
a1285 1
all-target-fastjar: configure-target-fastjar all-target-zlib all-target-libiberty
a1286 3
configure-target: $(CONFIGURE_TARGET_MODULES)
all-target: $(ALL_TARGET_MODULES)
install-target: $(INSTALL_TARGET_MODULES)
d1299 6
@


1.14
log
@2002-11-30  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(Continuing slow-motion replay)
	* configure: More autoconf-style substitutions.
	* Makefile.tpl: More autoconf-style substitutions.
	* Makefile.in: Regenerate.

2002-11-30  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(Continuing slow-motion replay)
	* configure: Substitute more variables in a more autoconf-friendly
	way.  Simplify slightly.
	* Makefile.tpl: Make more variables substitutable in an
	autoconf-friendly way.
	* Makefile.in: Regenerate.
@
text
@d655 4
a658 14
DO_X = \
	do-clean \
	do-distclean \
	do-dvi \
	do-info \
	do-install-info \
	do-installcheck \
	do-mostlyclean \
	do-maintainer-clean \
	do-TAGS
.PHONY: $(DO_X)
$(DO_X):
	@@target=`echo $@@ | sed -e 's/^do-//'`; \
	r=`${PWD}`; export r; \
d680 1
a680 1
			$${target}); \
d684 1
a684 1
	@@target=`echo $@@ | sed -e 's/^do-//'`; \
d698 1
a698 1
			$${target}); \
d702 2
d879 1
a879 1
# This rule is used to build the modules which are built with the
d881 4
a884 4
.PHONY: $(ALL_BUILD_MODULES)
$(ALL_BUILD_MODULES):
	dir=`echo $@@ | sed -e 's/all-build-//'`; \
	if [ -f ./$${dir}/Makefile ] ; then \
d887 1
a887 1
	  (cd $(BUILD_SUBDIR)/$${dir} && $(MAKE) all); \
d892 3
a894 6
# This rule is used to configure the modules which are built with the
# native tools.
.PHONY: $(CONFIGURE_BUILD_MODULES)
$(CONFIGURE_BUILD_MODULES):
	@@dir=`echo $@@ | sed -e 's/configure-build-//'`; \
	if [ ! -d $(BUILD_SUBDIR) ]; then \
d896 1
a896 1
	elif [ -f $(BUILD_SUBDIR)/$${dir}/Makefile ] ; then \
d898 3
a900 3
	elif echo " $(BUILD_CONFIGDIRS) " | grep " $${dir} " >/dev/null 2>&1; then \
	  if [ -d $(srcdir)/$${dir} ]; then \
	    [ -d $(BUILD_SUBDIR)/$${dir} ] || mkdir $(BUILD_SUBDIR)/$${dir};\
d916 2
a917 2
	    echo Configuring in $(BUILD_SUBDIR)/$${dir}; \
	    cd "$(BUILD_SUBDIR)/$${dir}" || exit 1; \
d929 1
a929 1
		if $(SHELL) $$s/symlink-tree $${topdir}/$${dir} "no-such-file" ; then \
d948 2
a949 2
	      srcdiroption="--srcdir=$${topdir}/$${dir}"; \
	      libsrcdir="$$s/$${dir}"; \
d965 1
a965 1
	      cd ..; rmdir $${dir} || true; \
d975 1
d1034 12
a1045 12
# This rule is used to configure the modules which are built with the
# target tools.
.PHONY: $(CONFIGURE_TARGET_MODULES)
$(CONFIGURE_TARGET_MODULES):
	@@dir=`echo $@@ | sed -e 's/configure-target-//'`; \
	if [ -d $(TARGET_SUBDIR)/$${dir} ]; then \
	  r=`${PWD}`; export r; \
	  $(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/$${dir}/tmpmulti.out 2> /dev/null; \
	  if [ -s $(TARGET_SUBDIR)/$${dir}/tmpmulti.out ]; then \
	    if [ -f $(TARGET_SUBDIR)/$${dir}/multilib.out ]; then \
	      if cmp $(TARGET_SUBDIR)/$${dir}/multilib.out $(TARGET_SUBDIR)/$${dir}/tmpmulti.out > /dev/null; then \
		rm -f $(TARGET_SUBDIR)/$${dir}/tmpmulti.out; \
d1047 3
a1049 3
		echo "Multilibs changed for $${dir}, reconfiguring"; \
		rm -f $(TARGET_SUBDIR)/$${dir}/multilib.out $(TARGET_SUBDIR)/$${dir}/Makefile; \
		mv $(TARGET_SUBDIR)/$${dir}/tmpmulti.out $(TARGET_SUBDIR)/$${dir}/multilib.out; \
d1052 1
a1052 1
	      mv $(TARGET_SUBDIR)/$${dir}/tmpmulti.out $(TARGET_SUBDIR)/$${dir}/multilib.out; \
d1056 1
a1056 1
	@@dir=`echo $@@ | sed -e 's/configure-target-//'`; \
d1059 1
a1059 1
	elif [ -f $(TARGET_SUBDIR)/$${dir}/Makefile ] ; then \
d1061 3
a1063 3
	elif echo " $(TARGET_CONFIGDIRS) " | grep " $${dir} " >/dev/null 2>&1; then \
	  if [ -d $(srcdir)/$${dir} ]; then \
	    [ -d $(TARGET_SUBDIR)/$${dir} ] || mkdir $(TARGET_SUBDIR)/$${dir};\
d1080 2
a1081 2
	    echo Configuring in $(TARGET_SUBDIR)/$${dir}; \
	    cd "$(TARGET_SUBDIR)/$${dir}" || exit 1; \
d1093 1
a1093 1
		if $(SHELL) $$s/symlink-tree $${topdir}/$${dir} "no-such-file" ; then \
d1112 2
a1113 2
	      srcdiroption="--srcdir=$${topdir}/$${dir}"; \
	      libsrcdir="$$s/$${dir}"; \
d1129 1
a1129 1
	      cd ..; rmdir $${dir} || true; \
d1140 4
a1143 6
# This rule is used to build the modules which use TARGET_FLAGS_TO_PASS.
# To build a target all-X means to cd to X and make all.
.PHONY: $(ALL_TARGET_MODULES)
$(ALL_TARGET_MODULES):
	@@dir=`echo $@@ | sed -e 's/all-target-//'`; \
	if [ -f $(TARGET_SUBDIR)/$${dir}/Makefile ] ; then \
d1147 1
a1147 1
	  (cd $(TARGET_SUBDIR)/$${dir}; \
d1152 5
a1156 7

# This rule is used to check the modules which use TARGET_FLAGS_TO_PASS.
# To build a target install-X means to cd to X and make install.
.PHONY: $(CHECK_TARGET_MODULES)
$(CHECK_TARGET_MODULES):
	@@dir=`echo $@@ | sed -e 's/check-target-//'`; \
	if [ -f $(TARGET_SUBDIR)/$${dir}/Makefile ] ; then \
d1160 1
a1160 1
	  (cd $(TARGET_SUBDIR)/$${dir}; \
d1165 6
a1170 8

# This rule is used to install the modules which use
# TARGET_FLAGS_TO_PASS.  To build a target install-X means to cd to X
# and make install.
.PHONY: $(INSTALL_TARGET_MODULES)
$(INSTALL_TARGET_MODULES): installdirs
	@@dir=`echo $@@ | sed -e 's/install-target-//'`; \
	if [ -f $(TARGET_SUBDIR)/$${dir}/Makefile ] ; then \
d1174 1
a1174 1
	  (cd $(TARGET_SUBDIR)/$${dir}; \
d1179 2
@


1.13
log
@2002-11-29  Nathanael Nerode  <neroden@@gcc.gnu.org>

	(Starting slow-motion replay merge from gcc 3.4 b-i-b branch)
	* configure: Remove 'removing', which doesn't work.  Replace $subdir
	with . everywhere.  Replace $subdirs with ''.  Replace $makesrcdir
	with $srcdir.  Reformat indentation.  Substitute some variables
	formerly hard-coded in the Makefile for build=host.
	* Makefile.tpl: Autogenerate more; make more autoconf-friendly.
	* Makefile.def: Autogenerate more.
	* Makefile.in: Regenerate.
@
text
@d32 26
d1521 3
@


1.12
log
@* Makefile.tpl: syntactic cleanup
@
text
@d1 1
a1 1
[+ AutoGen5 template -*- Mode: Makefile -*-
d88 2
a89 2
AS = as
AR = ar
d96 2
a97 2
BUILD_PREFIX = 
BUILD_PREFIX_1 = loser-
d123 2
a124 2
DLLTOOL = dlltool
WINDRES = windres
d126 1
a126 1
NM = nm
d128 1
a128 1
LD = ld
d135 2
a136 1
BISON = `if [ -f $$r/bison/bison ] ; then \
d142 2
a143 1
YACC = `if [ -f $$r/bison/bison ] ; then \
d151 2
a152 1
LEX = `if [ -f $$r/flex/flex ] ; \
d162 2
a163 1
MAKEINFO = `if [ -f $$r/texinfo/makeinfo/makeinfo ] ; \
d185 1
a185 1
CC_FOR_BUILD = $(CC)
d257 2
a258 1
GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) $$r/gcc/xgcc -B$$r/gcc/ $(FLAGS_FOR_TARGET)
d260 2
a261 1
AS_FOR_TARGET = ` \
d274 2
a275 1
LD_FOR_TARGET = ` \
d288 2
a289 1
DLLTOOL_FOR_TARGET = ` \
d300 2
a301 1
WINDRES_FOR_TARGET = ` \
d312 2
a313 1
AR_FOR_TARGET = ` \
d324 2
a325 1
RANLIB_FOR_TARGET = ` \
d340 2
a341 1
NM_FOR_TARGET = ` \
d537 2
a538 4
ALL_MODULES =[+
    FOR host_modules +] \
	all-[+module+][+
    ENDFOR host_modules +] \
d554 2
a555 7
CROSS_CHECK_MODULES =[+
    FOR host_modules +][+
        IF (not (or (exist? "no_check_cross") (exist? "no_check")))
           +] \
	check-[+module+][+
        ENDIF no_check +][+
    ENDFOR host_modules +] \
d562 2
a563 6
INSTALL_MODULES =[+
    FOR host_modules+][+
        IF (not (exist? "no_install")) +] \
	install-[+module+][+
        ENDIF no_install +][+
    ENDFOR host_modules +] \
d568 2
a569 7
ALL_X11_MODULES = \
	all-gdb \
	all-expect \
	all-guile \
	all-tclX \
	all-tk \
	all-tix
d573 2
a574 7
CHECK_X11_MODULES = \
	check-gdb \
	check-guile \
	check-expect \
	check-tclX \
	check-tk \
	check-tix
d578 2
a579 7
INSTALL_X11_MODULES = \
	install-gdb \
	install-guile \
	install-expect \
	install-tclX \
	install-tk \
	install-tix
d583 2
a584 4
ALL_TARGET_MODULES =[+
    FOR target_modules +] \
	all-target-[+module+][+
    ENDFOR target_modules +]
d588 2
a589 4
CONFIGURE_TARGET_MODULES =[+
    FOR target_modules +] \
	configure-target-[+module+][+
    ENDFOR target_modules +]
d593 2
a594 6
CHECK_TARGET_MODULES =[+
    FOR target_modules +][+
        IF (not (exist? "no_check")) +] \
	check-target-[+module+][+
        ENDIF no_check +][+
    ENDFOR target_modules +]
d598 2
a599 6
INSTALL_TARGET_MODULES =[+
    FOR target_modules +][+
        IF (not (exist? "no_install")) +] \
	install-target-[+module+][+
        ENDIF no_install +][+
    ENDFOR target_modules +]
d602 2
a603 6
CLEAN_MODULES =[+
    FOR host_modules +][+
        IF (not (exist? "no_clean")) +] \
	clean-[+module+][+
        ENDIF no_clean +][+
    ENDFOR host_modules +]
d606 2
a607 6
CLEAN_TARGET_MODULES =[+
    FOR target_modules +][+
        IF (not (exist? "no_clean")) +] \
	clean-target-[+module+][+
        ENDIF no_clean +][+
    ENDFOR target_modules +]
d610 2
a611 7
CLEAN_X11_MODULES = \
	clean-gdb \
	clean-expect \
	clean-guile \
	clean-tclX \
	clean-tk \
	clean-tix
@


1.11
log
@* Makefile.tpl (bootstrap):  Add bubblestrap, quickstrap, cleanstrap,
and restrap targets to this rule.
* Makefile.in:  Regenerate.
@
text
@d1 1
a1 1
[+ AutoGen5 template
d525 4
a528 2
ALL_MODULES = [+ FOR host_modules +]\
	all-[+module+] [+ ENDFOR host_modules +]\
d544 7
a550 2
CROSS_CHECK_MODULES = [+ FOR host_modules +][+ IF no_check  +][+ ELIF no_check_cross +][+ ELSE x +]\
	check-[+module+] [+ ENDIF no_check +][+ ENDFOR host_modules +]\
d557 6
a562 2
INSTALL_MODULES = [+ FOR host_modules+][+ IF no_install +][+ ELSE no_install +]\
	install-[+module+] [+ ENDIF no_install +][+ ENDFOR host_modules +]\
d597 4
a600 2
ALL_TARGET_MODULES = [+ FOR target_modules +]\
	all-target-[+module+] [+ ENDFOR target_modules +]
d604 4
a607 2
CONFIGURE_TARGET_MODULES = [+ FOR target_modules +]\
	configure-target-[+module+] [+ ENDFOR target_modules +]
d611 6
a616 2
CHECK_TARGET_MODULES = [+ FOR target_modules +][+ IF no_check +][+ ELSE check +]\
	check-target-[+module+] [+ ENDIF no_check +][+ ENDFOR target_modules +]
d620 6
a625 2
INSTALL_TARGET_MODULES = [+ FOR target_modules +][+ IF no_install +][+ ELSE install +]\
	install-target-[+module+] [+ ENDIF no_install +][+ ENDFOR target_modules +]
d628 6
a633 2
CLEAN_MODULES = [+ FOR host_modules +][+ IF no_clean +][+ ELSE no_clean +]\
	clean-[+module+] [+ ENDIF no_clean +][+ ENDFOR host_modules +]
d636 6
a641 2
CLEAN_TARGET_MODULES = [+ FOR target_modules +][+ IF no_clean +][+ ELSE clean +]\
	clean-target-[+module+] [+ ENDIF no_clean +][+ ENDFOR target_modules +]
@


1.10
log
@2002-10-03  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Make SET_LIB_PATH substitution more autoconfy.
	* Makefile.tpl: Make RPATH_ENVVAR substitution more autoconfy.
	* configure.in: Make SET_LIB_PATH substitution more autoconfy.
	* configure.in: Make RPATH_ENVVAR substitution more autoconfy.
	* Makefile.in: Regenerate.
@
text
@d1245 2
a1246 2
.PHONY: bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean
bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean: all-bootstrap
@


1.10.2.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
[+ AutoGen5 template -*- Mode: Makefile -*-
d9 1
a9 1
#   1999, 2000, 2001, 2002, 2003 Free Software Foundation
d26 5
a30 11
# -------------------------------
# Standard Autoconf-set variables
# -------------------------------
VPATH=@@srcdir@@

build_alias=@@build_alias@@
build=@@build@@
host_alias=@@host_alias@@
host=@@host@@
target_alias=@@target_alias@@
target=@@target@@
d32 1
a32 1
program_transform_name = @@program_transform_name@@
a36 2
srcdir = @@srcdir@@

d49 7
d65 3
d69 1
a69 13
INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_SCRIPT = @@INSTALL_SCRIPT@@
INSTALL_DATA = @@INSTALL_DATA@@

# -------------------------------------------------
# Miscellaneous non-standard autoconf-set variables
# -------------------------------------------------

links=@@configlinks@@
# The file containing GCC's version number.
gcc_version_trigger = @@gcc_version_trigger@@
gcc_version = @@gcc_version@@
d71 5
a75 2
# The gcc driver likes to know the arguments it was configured with.
TOPLEVEL_CONFIGURE_ARGUMENTS=@@TOPLEVEL_CONFIGURE_ARGUMENTS@@
d77 3
a79 2
gxx_include_dir = @@gxx_include_dir@@
libstdcxx_incdir = @@libstdcxx_incdir@@
d81 4
a84 2
tooldir = @@tooldir@@
build_tooldir = @@build_tooldir@@
d86 1
a86 3
# Directory in which the compiler finds executables, libraries, etc.
libsubdir = $(libdir)/gcc/$(target_alias)/$(gcc_version)
GDB_NLM_DEPS = 
d88 4
a91 3
# This is the name of the environment variable used for the path to
# the libraries.
RPATH_ENVVAR = @@RPATH_ENVVAR@@
d93 9
a101 3
# This is set by configure to REALLY_SET_LIB_PATH if --enable-shared
# was used.
SET_LIB_PATH = @@SET_LIB_PATH@@
d103 12
a114 5
# configure.in sets SET_LIB_PATH to this if --enable-shared was used.
# Some platforms don't like blank entries, so we remove duplicate,
# leading and trailing colons.
REALLY_SET_LIB_PATH = \
  $(RPATH_ENVVAR)=`echo "$(HOST_LIB_PATH):$(TARGET_LIB_PATH):$$$(RPATH_ENVVAR)" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);
d116 1
a116 7
# This is the list of directories to be built for the build system.
BUILD_CONFIGDIRS = libiberty
# Build programs are put under this directory.
BUILD_SUBDIR = @@build_subdir@@
# This is set by the configure script to the arguments to use when configuring
# directories built for the build system.
BUILD_CONFIGARGS = @@build_configargs@@
d118 4
a121 5
# This is the list of directories to built for the host system.
SUBDIRS = @@configdirs@@
# This is set by the configure script to the arguments to use when configuring
# directories built for the host system.
HOST_CONFIGARGS = @@host_configargs@@
d123 2
a124 8
# This is set by the configure script to the list of directories which
# should be built using the target tools.
TARGET_CONFIGDIRS = @@target_configdirs@@
# Target libraries are put under this directory:
TARGET_SUBDIR = @@target_subdir@@
# This is set by the configure script to the arguments to use when configuring
# directories built for the target.
TARGET_CONFIGARGS = @@target_configargs@@
d126 1
a126 3
# ----------------------------------------------
# Programs producing files for the BUILD machine
# ----------------------------------------------
d128 1
a128 1
SHELL = @@config_shell@@
d130 4
a133 7
# pwd command to use.  Allow user to override default by setting PWDCMD in
# the environment to account for automounters.  The make variable must not
# be called PWDCMD, otherwise the value set here is passed to make
# subprocesses and overrides the setting from the user's environment.
# Don't use PWD since it is a common shell environment variable and we
# don't want to corrupt it.
PWD_COMMAND = $${PWDCMD-pwd}
d135 1
a135 14
# compilers to use to create programs which must be run in the build
# environment.
CC_FOR_BUILD = @@CC_FOR_BUILD@@
CFLAGS_FOR_BUILD = @@CFLAGS_FOR_BUILD@@

CXX_FOR_BUILD = $(CXX)

# Special variables passed down in EXTRA_GCC_FLAGS.  They are defined
# here so that they can be overridden by Makefile fragments.
BUILD_PREFIX = @@BUILD_PREFIX@@
BUILD_PREFIX_1 = @@BUILD_PREFIX_1@@

BISON=@@BISON@@
USUAL_BISON = `if [ -f $$r/bison/bison ] ; then \
d141 1
a141 3
DEFAULT_YACC = @@DEFAULT_YACC@@
YACC=@@YACC@@
USUAL_YACC = `if [ -f $$r/bison/bison ] ; then \
d149 1
a149 3
DEFAULT_LEX = @@DEFAULT_LEX@@
LEX=@@LEX@@
USUAL_LEX = `if [ -f $$r/flex/flex ] ; \
a152 1
DEFAULT_M4 = @@DEFAULT_M4@@
d157 1
a157 1
# For an installed makeinfo, we require it to be from texinfo 4.2 or
d159 1
a159 2
MAKEINFO=@@MAKEINFO@@
USUAL_MAKEINFO = `if [ -f $$r/texinfo/makeinfo/makeinfo ] ; \
d162 1
a162 1
	  | egrep 'texinfo[^0-9]*([1-3][0-9]|4\.[2-9]|[5-9])') >/dev/null 2>&1; \
d168 1
a168 2
# (Default to avoid splitting info files by setting the threshold high.)
MAKEINFOFLAGS = --split-size=5000000
a177 3
# ---------------------------------------------
# Programs producing files for the HOST machine
# ---------------------------------------------
d179 4
a182 3
# This is the list of directories that may be needed in RPATH_ENVVAR
# so that programs built for the host machine work.
HOST_LIB_PATH = $$r/bfd:$$r/opcodes
d184 1
a184 1
AS = @@AS@@
d186 3
a188 2
AR = @@AR@@
AR_FLAGS = rc
d190 3
a192 3
CC = @@CC@@
CFLAGS = @@CFLAGS@@
LIBCFLAGS = $(CFLAGS)
d194 2
a195 3
CXX = @@CXX@@
CXXFLAGS = @@CXXFLAGS@@
LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates
d197 3
a199 1
DLLTOOL = @@DLLTOOL@@
d201 3
a203 1
NM = @@NM@@
d205 3
a207 2
LD = @@LD@@
LDFLAGS = 
d209 3
a211 1
RANLIB = @@RANLIB@@
d213 3
a215 7
WINDRES = @@WINDRES@@

PICFLAG = 

# -----------------------------------------------
# Programs producing files for the TARGET machine
# -----------------------------------------------
d221 22
d244 4
d249 5
a253 11
AR_FOR_TARGET=@@AR_FOR_TARGET@@
USUAL_AR_FOR_TARGET = ` \
  if [ -f $$r/binutils/ar ] ; then \
    echo $$r/binutils/ar ; \
  else \
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(AR); \
    else \
       echo ar | sed '$(program_transform_name)' ; \
    fi; \
  fi`
d255 1
a255 2
AS_FOR_TARGET=@@AS_FOR_TARGET@@
USUAL_AS_FOR_TARGET = ` \
d261 1
a261 1
    if [ '$(host)' = '$(target)' ] ; then \
d264 1
a264 1
       echo as | sed '$(program_transform_name)' ; \
d268 12
a279 20
CC_FOR_TARGET = @@CC_FOR_TARGET@@
# During gcc bootstrap, if we use some random cc for stage1 then
# CFLAGS will be just -g.  We want to ensure that TARGET libraries
# (which we know are built with gcc) are built with optimizations so
# prepend -O2 when setting CFLAGS_FOR_TARGET.
CFLAGS_FOR_TARGET = -O2 $(CFLAGS)
# If GCC_FOR_TARGET is not overriden on the command line, then this
# variable is passed down to the gcc Makefile, where it is used to
# build libgcc2.a.  We define it here so that it can itself be
# overridden on the command line.
GCC_FOR_TARGET=@@GCC_FOR_TARGET@@
USUAL_GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) $$r/gcc/xgcc -B$$r/gcc/ $(FLAGS_FOR_TARGET)
LIBCFLAGS_FOR_TARGET = $(CFLAGS_FOR_TARGET)

CXX_FOR_TARGET = @@CXX_FOR_TARGET@@
RAW_CXX_FOR_TARGET = @@RAW_CXX_FOR_TARGET@@
CXX_FOR_TARGET_FOR_RECURSIVE_MAKE = @@CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@@
RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE = @@RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE@@
CXXFLAGS_FOR_TARGET = $(CXXFLAGS)
LIBCXXFLAGS_FOR_TARGET = $(CXXFLAGS_FOR_TARGET) -fno-implicit-templates
d281 1
a281 2
DLLTOOL_FOR_TARGET=@@DLLTOOL_FOR_TARGET@@
USUAL_DLLTOOL_FOR_TARGET = ` \
d285 1
a285 1
    if [ '$(host)' = '$(target)' ] ; then \
d288 1
a288 1
       echo dlltool | sed '$(program_transform_name)' ; \
d292 3
a294 8
GCJ_FOR_TARGET = @@GCJ_FOR_TARGET@@

LD_FOR_TARGET=@@LD_FOR_TARGET@@
USUAL_LD_FOR_TARGET = ` \
  if [ -f $$r/ld/ld-new ] ; then \
    echo $$r/ld/ld-new ; \
  elif [ -f $$r/gcc/xgcc ]; then \
    $(CC_FOR_TARGET) -print-prog-name=ld ; \
d296 2
a297 2
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(LD); \
d299 1
a299 1
       echo ld | sed '$(program_transform_name)' ; \
d303 3
a305 8
LDFLAGS_FOR_TARGET = 

NM_FOR_TARGET=@@NM_FOR_TARGET@@
USUAL_NM_FOR_TARGET = ` \
  if [ -f $$r/binutils/nm-new ] ; then \
    echo $$r/binutils/nm-new ; \
  elif [ -f $$r/gcc/xgcc ]; then \
    $(CC_FOR_TARGET) -print-prog-name=nm ; \
d307 2
a308 2
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(NM); \
d310 1
a310 1
       echo nm | sed '$(program_transform_name)' ; \
d314 1
a314 2
RANLIB_FOR_TARGET=@@RANLIB_FOR_TARGET@@
USUAL_RANLIB_FOR_TARGET = ` \
d318 1
a318 1
    if [ '$(host)' = '$(target)' ] ; then \
d325 1
a325 1
       echo ranlib | sed '$(program_transform_name)' ; \
d329 5
a333 4
WINDRES_FOR_TARGET=@@WINDRES_FOR_TARGET@@
USUAL_WINDRES_FOR_TARGET = ` \
  if [ -f $$r/binutils/windres ] ; then \
    echo $$r/binutils/windres ; \
d335 2
a336 2
    if [ '$(host)' = '$(target)' ] ; then \
      echo $(WINDRES); \
d338 1
a338 1
       echo windres | sed '$(program_transform_name)' ; \
a341 6
PICFLAG_FOR_TARGET = 

# ------------------------------------
# Miscellaneous targets and flag lists
# ------------------------------------

d347 7
a354 4
@@target_makefile_frag@@
@@alphaieee_frag@@
@@ospace_frag@@
@@host_makefile_frag@@
d358 63
a420 3
BASE_FLAGS_TO_PASS = [+ FOR flags_to_pass +]\
	"[+flag+]=$([+flag+])" [+ ENDFOR flags_to_pass +]\
	"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)" 
d428 1
a428 2
	CXX_FOR_TARGET='$(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)' \
	RAW_CXX_FOR_TARGET='$(RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)' \
d432 1
d441 1
a441 1
	'RANLIB=$(RANLIB)' \
d461 1
d483 1
a483 1
# The BUILD_* variables are a special case, which are used for the gcc
d486 6
d494 3
d505 1
d507 1
a507 2
	"`echo 'BOOT_CFLAGS=$(BOOT_CFLAGS)' | sed -e s/.*=$$/XFOO=/`" \
	"`echo 'BOOT_ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s/.*=$$/XFOO=/`"
d509 1
a509 1
GCC_FLAGS_TO_PASS = $(BASE_FLAGS_TO_PASS) $(EXTRA_HOST_FLAGS) $(EXTRA_GCC_FLAGS)
d511 109
a619 10
.PHONY: configure-host
configure-host: maybe-configure-gcc [+
  FOR host_modules +] \
    maybe-configure-[+module+][+
  ENDFOR host_modules +]
.PHONY: configure-target
configure-target: [+
  FOR target_modules +] \
    maybe-configure-target-[+module+][+
  ENDFOR target_modules +]
d623 6
a628 12
all.normal: @@all_build_modules@@ all-host all-target

.PHONY: all-host
all-host: maybe-all-gcc [+
  FOR host_modules +] \
    maybe-all-[+module+][+
  ENDFOR host_modules +]
.PHONY: all-target
all-target: [+
  FOR target_modules +] \
    maybe-all-target-[+module+][+
  ENDFOR target_modules +]
d634 18
a651 54
[+ FOR recursive_targets +]
.PHONY: do-[+make_target+]
do-[+make_target+]: [+make_target+]-host [+make_target+]-target

.PHONY: [+make_target+]-host
[+make_target+]-host: maybe-[+make_target+]-gcc [+
  FOR host_modules +] \
    maybe-[+make_target+]-[+module+][+
  ENDFOR host_modules +]

.PHONY: [+make_target+]-target
[+make_target+]-target: [+
  FOR target_modules +] \
    maybe-[+make_target+]-target-[+module+][+
  ENDFOR target_modules +]

# GCC, the eternal special case
.PHONY: maybe-[+make_target+]-gcc [+make_target+]-gcc
maybe-[+make_target+]-gcc:
[+make_target+]-gcc: [+
  FOR depend +]\
    [+depend+]-gcc [+
  ENDFOR depend +]
	@@[ -f ./gcc/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	for flag in $(EXTRA_GCC_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	echo "Doing [+make_target+] in gcc" ; \
	(cd gcc && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1

# Host modules.
[+ FOR host_modules +]
.PHONY: maybe-[+make_target+]-[+module+] [+make_target+]-[+module+]
maybe-[+make_target+]-[+module+]:
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-[+module+]:
[+ ELSE +]
[+make_target+]-[+module+]: [+
  FOR depend +]\
    [+depend+]-[+module+] [+
  ENDFOR depend +]
	@@[ -f ./[+module+]/Makefile ] || exit 0; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d653 26
a678 29
	for flag in $(EXTRA_HOST_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	echo "Doing [+make_target+] in [+module+]" ; \
	(cd [+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1
[+ ENDIF +]
[+ ENDFOR host_modules +]

# Target modules.
[+ FOR target_modules +]
.PHONY: maybe-[+make_target+]-target-[+module+] [+make_target+]-target-[+module+]
maybe-[+make_target+]-target-[+module+]:
[+ IF (match-value? = "missing" (get "make_target") ) +]
# [+module+] doesn't support [+make_target+].
[+make_target+]-target-[+module+]:
[+ ELSE +]
[+make_target+]-target-[+module+]: [+
  FOR depend +]\
    [+depend+]-target-[+module+] [+
  ENDFOR depend +]
	@@[ -f $(TARGET_SUBDIR)/[+module+]/Makefile ] || exit 0 ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d680 14
a693 14
	echo "Doing [+make_target+] in $(TARGET_SUBDIR)/[+module+]" ; \
	for flag in $(EXTRA_TARGET_FLAGS); do \
	  eval `echo "$$flag" | sed -e "s|^\([^=]*\)=\(.*\)|\1='\2'; export \1|"`; \
	done; \
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(BASE_FLAGS_TO_PASS) "AR=$${AR}" "AS=$${AS}" \
	          "CC=$${CC}" "CXX=$${CXX}" "LD=$${LD}" "NM=$${NM}" \
	          "RANLIB=$${RANLIB}" \
	          "DLLTOOL=$${DLLTOOL}" "WINDRES=$${WINDRES}" \
	          [+make_target+]) \
	  || exit 1
[+ ENDIF +]
[+ ENDFOR target_modules +]
[+ ENDFOR recursive_targets +]
d704 2
a705 3
# Make sure makeinfo is built before we do a `make info', if we're
# in fact building texinfo.
do-info: maybe-all-texinfo
d708 1
a708 1
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d710 1
a710 1
	  $(INSTALL_DATA) dir.info $(DESTDIR)$(infodir)/dir.info ; \
a717 1
	-rm -f multilib.out multilib.tmp maybedep.tmp serdep.tmp
a720 1
	-rm -rf $(BUILD_SUBDIR)
d738 27
a764 2
# Extra dependency for clean-target, owing to the mixed nature of gcc
clean-target: clean-target-libgcc
d774 2
a775 1
check: do-check
d777 4
a780 8
# Only include modules actually being configured and built.
do-check: maybe-check-gcc [+
  FOR host_modules +] \
    maybe-check-[+module+][+
  ENDFOR host_modules +][+
  FOR target_modules +] \
    maybe-check-target-[+module+][+
  ENDFOR target_modules +]
d805 3
a807 20
.PHONY: install uninstall
install: installdirs install-host install-target

.PHONY: install-host-nogcc
install-host-nogcc: [+
  FOR host_modules +] \
    maybe-install-[+module+][+
  ENDFOR host_modules +]

.PHONY: install-host
install-host: maybe-install-gcc [+
  FOR host_modules +] \
    maybe-install-[+module+][+
  ENDFOR host_modules +]

.PHONY: install-target
install-target: [+
  FOR target_modules +] \
    maybe-install-target-[+module+][+
  ENDFOR target_modules +]
d812 15
d830 1
a830 1
		r=`${PWD_COMMAND}` ; export r ; \
d832 1
a832 1
		(cd ./gcc && \
d841 6
a846 2
install-no-fixedincludes: installdirs install-host-nogcc \
	install-target gcc-no-fixedincludes
d848 20
a867 1
### other supporting targets
d869 11
a879 12
MAKEDIRS= \
	$(DESTDIR)$(prefix) \
	$(DESTDIR)$(exec_prefix)
.PHONY: installdirs
installdirs: mkinstalldirs
	$(SHELL) $(srcdir)/mkinstalldirs $(MAKEDIRS)

dir.info: do-install-info
	if [ -f $(srcdir)/texinfo/gen-info-dir ] ; then \
	  $(srcdir)/texinfo/gen-info-dir $(DESTDIR)$(infodir) $(srcdir)/texinfo/dir.info-template > dir.info.new ; \
	  mv -f dir.info.new dir.info ; \
	else true ; \
d882 34
a915 45
dist:
	@@echo "Building a full distribution of this tree isn't done"
	@@echo "via 'make dist'.  Check out the etc/ subdirectory" 

etags tags: TAGS

# Right now this just builds TAGS in each subdirectory.  emacs19 has the
# ability to use several tags files at once, so there is probably no need
# to combine them into one big TAGS file (like CVS 1.3 does).  We could
# (if we felt like it) have this Makefile write a piece of elisp which
# the user could load to tell emacs19 where all the TAGS files we just
# built are.
TAGS: do-TAGS

# --------------------------------------
# Modules which run on the build machine
# --------------------------------------
[+ FOR build_modules +]
.PHONY: configure-build-[+module+] maybe-configure-build-[+module+]
maybe-configure-build-[+module+]:
configure-build-[+module+]:
	@@test ! -f $(BUILD_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(BUILD_SUBDIR)/[+module+] ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	AR="$(AR_FOR_BUILD)"; export AR; \
	AS="$(AS_FOR_BUILD)"; export AS; \
	CC="$(CC_FOR_BUILD)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_BUILD)"; export CFLAGS; \
	CXX="$(CXX_FOR_BUILD)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS_FOR_BUILD)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_BUILD)"; export GCJ; \
	DLLTOOL="$(DLLTOOL_FOR_BUILD)"; export DLLTOOL; \
	LD="$(LD_FOR_BUILD)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_BUILD)"; export LDFLAGS; \
	NM="$(NM_FOR_BUILD)"; export NM; \
	RANLIB="$(RANLIB_FOR_BUILD)"; export RANLIB; \
	WINDRES="$(WINDRES_FOR_BUILD)"; export WINDRES; \
	echo Configuring in $(BUILD_SUBDIR)/[+module+]; \
	cd "$(BUILD_SUBDIR)/[+module+]" || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) \
	    topdir=$(srcdir) ;; \
	  *) \
	    case "$(BUILD_SUBDIR)" in \
d918 17
a934 11
	    esac ;; \
	esac; \
	if [ "$(srcdir)" = "." ] ; then \
	  if [ "$(BUILD_SUBDIR)" != "." ] ; then \
	    if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	      if [ -f Makefile ]; then \
	        if $(MAKE) distclean; then \
	          true; \
	        else \
	          exit 1; \
	        fi; \
d936 1
a936 1
	        true; \
d938 21
d960 1
a960 1
	      exit 1; \
a964 2
	  srcdiroption="--srcdir=."; \
	  libsrcdir="."; \
d966 54
a1019 80
	  srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	  libsrcdir="$$s/[+module+]"; \
	fi; \
	rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	  $(BUILD_CONFIGARGS) $${srcdiroption} \
	  --with-build-subdir="$(BUILD_SUBDIR)" \
	  || exit 1

.PHONY: all-build-[+module+] maybe-all-build-[+module+]
maybe-all-build-[+module+]:
all-build-[+module+]: configure-build-[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	(cd $(BUILD_SUBDIR)/[+module+] && $(MAKE) all)
[+ ENDFOR build_modules +]

# --------------------------------------
# Modules which run on the host machine
# --------------------------------------
[+ FOR host_modules +]
.PHONY: configure-[+module+] maybe-configure-[+module+]
maybe-configure-[+module+]:
configure-[+module+]:
	@@test ! -f [+module+]/Makefile || exit 0; \
	[ -d [+module+] ] || mkdir [+module+]; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	echo Configuring in [+module+]; \
	cd [+module+] || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/[+module+]"; \
	    libsrcdir="$$s/[+module+]";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} \
	  || exit 1

.PHONY: all-[+module+] maybe-all-[+module+]
maybe-all-[+module+]:
all-[+module+]: configure-[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	  IF with_x 
	    +] $(X11_FLAGS_TO_PASS)[+ 
	  ENDIF with_x +] all)

.PHONY: check-[+module+] maybe-check-[+module+]
maybe-check-[+module+]:
[+ IF no_check +]
check-[+module+]:
[+ ELIF no_check_cross +]
# This module is only tested in a native toolchain.
check-[+module+]:
	@@if [ '$(host)' = '$(target)' ] ; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1021 58
a1078 77
	  (cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	    IF with_x 
	      +] $(X11_FLAGS_TO_PASS)[+ 
	    ENDIF with_x +] check); \
	fi
[+ ELSE check +]
check-[+module+]:
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	  IF with_x 
	    +] $(X11_FLAGS_TO_PASS)[+ 
	  ENDIF with_x +] check)
[+ ENDIF no_check +]

.PHONY: install-[+module+] maybe-install-[+module+]
maybe-install-[+module+]:
[+ IF no_install +]
install-[+module+]:
[+ ELSE install +]
install-[+module+]: installdirs
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	(cd [+module+] && $(MAKE) $(FLAGS_TO_PASS)[+ 
	  IF with_x 
	    +] $(X11_FLAGS_TO_PASS)[+ 
	  ENDIF with_x +] install)
[+ ENDIF no_install +]
[+ ENDFOR host_modules +]

# ---------------------------------------
# Modules which run on the target machine
# ---------------------------------------
[+ FOR target_modules +]
.PHONY: configure-target-[+module+] maybe-configure-target-[+module+]
maybe-configure-target-[+module+]:

# There's only one multilib.out.  Cleverer subdirs shouldn't need it copied.
$(TARGET_SUBDIR)/[+module+]/multilib.out: multilib.out
	$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \
	rm -f $(TARGET_SUBDIR)/[+module+]/Makefile || : ; \
	cp multilib.out $(TARGET_SUBDIR)/[+module+]/multilib.out

configure-target-[+module+]: $(TARGET_SUBDIR)/[+module+]/multilib.out
	@@test ! -f $(TARGET_SUBDIR)/[+module+]/Makefile || exit 0; \
	$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/[+module+] ; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	AR="$(AR_FOR_TARGET)"; export AR; \
	AS="$(AS_FOR_TARGET)"; export AS; \
	CC="$(CC_FOR_TARGET)"; export CC; \
	CFLAGS="$(CFLAGS_FOR_TARGET)"; export CFLAGS; \
	CPPFLAGS="$(CFLAGS_FOR_TARGET)"; export CPPFLAGS; \[+ 
IF raw_cxx +]
	CXX_FOR_TARGET="$(RAW_CXX_FOR_TARGET)"; export CXX_FOR_TARGET; \
	CXX="$(RAW_CXX_FOR_TARGET)"; export CXX; \[+ 
ELSE normal_cxx +]
	CXX="$(CXX_FOR_TARGET)"; export CXX; \[+ 
ENDIF raw_cxx +]
	CXXFLAGS="$(CXXFLAGS_FOR_TARGET)"; export CXXFLAGS; \
	GCJ="$(GCJ_FOR_TARGET)"; export GCJ; \
	DLLTOOL="$(DLLTOOL_FOR_TARGET)"; export DLLTOOL; \
	LD="$(LD_FOR_TARGET)"; export LD; \
	LDFLAGS="$(LDFLAGS_FOR_TARGET)"; export LDFLAGS; \
	NM="$(NM_FOR_TARGET)"; export NM; \
	RANLIB="$(RANLIB_FOR_TARGET)"; export RANLIB; \
	WINDRES="$(WINDRES_FOR_TARGET)"; export WINDRES; \
	echo Configuring in $(TARGET_SUBDIR)/[+module+]; \
	cd "$(TARGET_SUBDIR)/[+module+]" || exit 1; \
	case $(srcdir) in \
	  /* | [A-Za-z]:[\\/]*) \
	    topdir=$(srcdir) ;; \
	  *) \
	    case "$(TARGET_SUBDIR)" in \
d1081 17
a1097 11
	    esac ;; \
	esac; \
	if [ "$(srcdir)" = "." ] ; then \
	  if [ "$(TARGET_SUBDIR)" != "." ] ; then \
	    if $(SHELL) $$s/symlink-tree $${topdir}/[+module+] "no-such-file" ; then \
	      if [ -f Makefile ]; then \
	        if $(MAKE) distclean; then \
	          true; \
	        else \
	          exit 1; \
	        fi; \
d1099 1
a1099 1
	        true; \
d1101 21
d1123 1
a1123 1
	      exit 1; \
a1127 2
	  srcdiroption="--srcdir=."; \
	  libsrcdir="."; \
d1129 78
a1206 54
	  srcdiroption="--srcdir=$${topdir}/[+module+]"; \
	  libsrcdir="$$s/[+module+]"; \
	fi; \
	rm -f no-such-file || : ; \
	CONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \
	  $(TARGET_CONFIGARGS) $${srcdiroption} \
	  --with-target-subdir="$(TARGET_SUBDIR)" \
	  || exit 1

.PHONY: all-target-[+module+] maybe-all-target-[+module+]
maybe-all-target-[+module+]:
all-target-[+module+]: configure-target-[+module+]
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+
	    IF raw_cxx 
	  +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ 
	    ENDIF raw_cxx 
	  +] all)

.PHONY: check-target-[+module+] maybe-check-target-[+module+]
maybe-check-target-[+module+]:
[+ IF no_check +]
# Dummy target for uncheckable module.
check-target-[+module+]:
[+ ELSE check +]
check-target-[+module+]:
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) [+
	    IF raw_cxx 
	      +] 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)' [+ 
	    ENDIF raw_cxx 
	  +] check)
[+ ENDIF no_check +]

.PHONY: install-target-[+module+] maybe-install-target-[+module+]
maybe-install-target-[+module+]:
[+ IF no_install +]
# Dummy target for uninstallable.
install-target-[+module+]:
[+ ELSE install +]
install-target-[+module+]: installdirs
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	(cd $(TARGET_SUBDIR)/[+module+] && \
	  $(MAKE) $(TARGET_FLAGS_TO_PASS) install)
[+ ENDIF no_install +]
[+ ENDFOR target_modules +]
d1208 14
a1221 7
# ----------
# GCC module
# ----------

# Unfortunately, while gcc _should_ be a host module,
# libgcc is a target module, and gen* programs are
# build modules.  So GCC is a sort of hybrid.
d1224 5
a1228 48
.PHONY: configure-gcc maybe-configure-gcc
maybe-configure-gcc:
configure-gcc:
	@@test ! -f gcc/Makefile || exit 0; \
	[ -d gcc ] || mkdir gcc; \
	r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	CC="$(CC)"; export CC; \
	CFLAGS="$(CFLAGS)"; export CFLAGS; \
	CXX="$(CXX)"; export CXX; \
	CXXFLAGS="$(CXXFLAGS)"; export CXXFLAGS; \
	TOPLEVEL_CONFIGURE_ARGUMENTS="$(TOPLEVEL_CONFIGURE_ARGUMENTS)"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \
	AR="$(AR)"; export AR; \
	AS="$(AS)"; export AS; \
	CC_FOR_BUILD="$(CC_FOR_BUILD)"; export CC_FOR_BUILD; \
	DLLTOOL="$(DLLTOOL)"; export DLLTOOL; \
	LD="$(LD)"; export LD; \
	NM="$(NM)"; export NM; \
	RANLIB="$(RANLIB)"; export RANLIB; \
	WINDRES="$(WINDRES)"; export WINDRES; \
	OBJCOPY="$(OBJCOPY)"; export OBJCOPY; \
	OBJDUMP="$(OBJDUMP)"; export OBJDUMP; \
	echo Configuring in gcc; \
	cd gcc || exit 1; \
	case $(srcdir) in \
	  \.) \
	    srcdiroption="--srcdir=."; \
	    libsrcdir=".";; \
	  /* | [A-Za-z]:[\\/]*) \
	    srcdiroption="--srcdir=$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	  *) \
	    srcdiroption="--srcdir=../$(srcdir)/gcc"; \
	    libsrcdir="$$s/gcc";; \
	esac; \
	$(SHELL) $${libsrcdir}/configure \
	  $(HOST_CONFIGARGS) $${srcdiroption} \
	  || exit 1

# Don't 'make all' in gcc if it's already been made by 'bootstrap'; that
# causes trouble.  This wart will be fixed eventually by moving
# the bootstrap behavior to this file.
.PHONY: all-gcc maybe-all-gcc
maybe-all-gcc:
all-gcc: configure-gcc
	@@if [ -f gcc/stage_last ] ; then \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1230 1
a1230 1
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) quickstrap); \
d1232 1
a1232 4
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	  $(SET_LIB_PATH) \
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) all); \
d1245 4
a1248 5
GCC_STRAP_TARGETS = bootstrap bootstrap-lean bootstrap2 bootstrap2-lean bootstrap3 bootstrap3-lean bootstrap4 bootstrap4-lean bubblestrap quickstrap cleanstrap restrap
.PHONY: $(GCC_STRAP_TARGETS)
$(GCC_STRAP_TARGETS): all-bootstrap configure-gcc
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1252 2
a1253 2
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1256 8
a1263 11
	    msg="Comparing stage3 and stage4 of the compiler"; \
	    compare=compare3-lean ;; \
	  *bootstrap4 ) \
	    msg="Comparing stage3 and stage4 of the compiler"; \
	    compare=compare3 ;; \
	  *-lean ) \
	    msg="Comparing stage2 and stage3 of the compiler"; \
	    compare=compare-lean ;; \
	  * ) \
	    msg="Comparing stage2 and stage3 of the compiler"; \
	    compare=compare ;; \
d1268 2
a1269 2
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
a1273 17
profiledbootstrap: all-bootstrap configure-gcc
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	echo "Bootstrapping the compiler"; \
	cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stageprofile_build
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
	$(SET_LIB_PATH) \
	echo "Building runtime libraries and training compiler"; \
	$(MAKE) $(BASE_FLAGS_TO_PASS) $(RECURSE_FLAGS) all
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
	$(SET_LIB_PATH) \
	echo "Building feedback based compiler"; \
	cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) stagefeedback_build

d1276 2
a1277 2
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1281 2
a1282 2
	@@r=`${PWD_COMMAND}`; export r; \
	s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
d1288 1
a1288 2
.PHONY: check-gcc maybe-check-gcc
maybe-check-gcc:
d1291 2
a1292 2
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1294 1
a1294 1
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check); \
d1299 2
a1300 2
.PHONY: check-gcc-c++
check-gcc-c++:
d1302 2
a1303 2
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1305 2
a1306 1
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++); \
d1309 1
a1309 1
	fi
d1311 1
a1311 5
.PHONY: check-c++
check-c++: check-target-libstdc++-v3 check-gcc-c++

.PHONY: install-gcc maybe-install-gcc
maybe-install-gcc:
d1314 2
a1315 2
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}`; export s; \
d1317 1
a1317 1
	  (cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) install); \
d1322 19
a1340 14
# Install the gcc headers files, but not the fixed include files,
# which Cygnus is not allowed to distribute.  This rule is very
# dependent on the workings of the gcc Makefile.in.
.PHONY: gcc-no-fixedincludes
gcc-no-fixedincludes:
	@@if [ -f ./gcc/Makefile ]; then \
	  rm -rf gcc/tmp-include; \
	  mv gcc/include gcc/tmp-include 2>/dev/null; \
	  mkdir gcc/include; \
	  cp $(srcdir)/gcc/gsyslimits.h gcc/include/syslimits.h; \
	  touch gcc/stmp-fixinc gcc/include/fixed; \
	  rm -f gcc/stmp-headers gcc/stmp-int-hdrs; \
	  r=`${PWD_COMMAND}`; export r; \
	  s=`cd $(srcdir); ${PWD_COMMAND}` ; export s; \
d1342 6
a1347 5
	  (cd ./gcc && \
	   $(MAKE) $(GCC_FLAGS_TO_PASS) install); \
	  rm -rf gcc/include; \
	  mv gcc/tmp-include gcc/include 2>/dev/null; \
	else true; fi
d1349 29
a1377 24
# --------------------------------------
# Dependencies between different modules
# --------------------------------------

# There are two types of dependencies here: 'hard' dependencies, where one
# module simply won't build without the other; and 'soft' dependencies, where
# if the depended-on module is missing, the depending module will do without
# or find a substitute somewhere (perhaps installed).  Soft dependencies
# are specified by depending on a 'maybe-' target.  If you're not sure,
# it's safer to use a soft dependency.

# Host modules specific to gcc.
# GCC needs to identify certain tools.
# GCC also needs the information exported by the intl configure script.
configure-gcc: maybe-configure-intl maybe-configure-binutils maybe-configure-gas maybe-configure-ld maybe-configure-bison maybe-configure-flex
all-gcc: maybe-all-libiberty maybe-all-intl maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib
# This is a slightly kludgy method of getting dependencies on 
# all-build-libiberty correct; it would be better to build it every time.
all-gcc: maybe-all-build-libiberty
all-bootstrap: maybe-all-libiberty maybe-all-intl maybe-all-texinfo maybe-all-bison maybe-all-byacc maybe-all-binutils maybe-all-gas maybe-all-ld maybe-all-zlib

# Host modules specific to gdb.
# GDB needs to know that the simulator is being built.
configure-gdb: maybe-configure-itcl maybe-configure-tcl maybe-configure-tk maybe-configure-sim
d1379 75
a1453 9
all-gdb: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-mmalloc maybe-all-readline maybe-all-bison maybe-all-byacc maybe-all-sim $(gdbnlmrequirements) $(GDB_TK)
install-gdb: maybe-install-tcl maybe-install-tk maybe-install-itcl maybe-install-tix maybe-install-libgui
configure-libgui: maybe-configure-tcl maybe-configure-tk
all-libgui: maybe-all-tcl maybe-all-tk maybe-all-itcl

# Host modules specific to binutils.
configure-bfd: configure-libiberty
all-bfd: maybe-all-libiberty maybe-all-intl
all-binutils: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-flex maybe-all-bison maybe-all-byacc maybe-all-intl
d1457 2
a1458 14
install-binutils: maybe-install-opcodes
# libopcodes depends on libbfd
install-opcodes: maybe-install-bfd
all-gas: maybe-all-libiberty maybe-all-opcodes maybe-all-bfd maybe-all-intl
all-gprof: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-intl
all-ld: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-bison maybe-all-byacc maybe-all-flex maybe-all-intl
all-opcodes: maybe-all-bfd maybe-all-libiberty

# Other host modules in the 'src' repository.
all-dejagnu: maybe-all-tcl maybe-all-expect maybe-all-tk
configure-expect: maybe-configure-tcl maybe-configure-tk
all-expect: maybe-all-tcl maybe-all-tk
configure-itcl: maybe-configure-tcl maybe-configure-tk
all-itcl: maybe-all-tcl maybe-all-tk
d1461 22
a1482 48
install-itcl: maybe-install-tcl
all-sid: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-tcl maybe-all-tk
install-sid: maybe-install-tcl maybe-install-tk
all-sim: maybe-all-libiberty maybe-all-bfd maybe-all-opcodes maybe-all-readline maybe-configure-gdb
configure-tk: maybe-configure-tcl
all-tk: maybe-all-tcl
configure-tix: maybe-configure-tcl maybe-configure-tk
all-tix: maybe-all-tcl maybe-all-tk
all-texinfo: maybe-all-libiberty

# Other host modules.  Warning, these are not well tested.
all-autoconf: maybe-all-m4 maybe-all-texinfo
all-automake: maybe-all-m4 maybe-all-texinfo
all-bison: maybe-all-texinfo
all-diff: maybe-all-libiberty
all-fastjar: maybe-all-zlib maybe-all-libiberty
all-fileutils: maybe-all-libiberty
all-flex: maybe-all-libiberty maybe-all-bison maybe-all-byacc
all-gzip: maybe-all-libiberty
all-hello: maybe-all-libiberty
all-m4: maybe-all-libiberty maybe-all-texinfo
all-make: maybe-all-libiberty maybe-all-intl
all-patch: maybe-all-libiberty
all-prms: maybe-all-libiberty
all-recode: maybe-all-libiberty
all-sed: maybe-all-libiberty
all-send-pr: maybe-all-prms
all-tar: maybe-all-libiberty
all-uudecode: maybe-all-libiberty

ALL_GCC = maybe-all-gcc
ALL_GCC_C = $(ALL_GCC) maybe-all-target-newlib maybe-all-target-libgloss
ALL_GCC_CXX = $(ALL_GCC_C) maybe-all-target-libstdc++-v3

# Target modules specific to gcc.
configure-target-boehm-gc: $(ALL_GCC_C) maybe-configure-target-qthreads
configure-target-fastjar: maybe-configure-target-zlib
all-target-fastjar: maybe-all-target-zlib maybe-all-target-libiberty
configure-target-libf2c: $(ALL_GCC_C)
all-target-libf2c: maybe-all-target-libiberty
configure-target-libffi: $(ALL_GCC_C) 
configure-target-libjava: $(ALL_GCC_C) maybe-configure-target-zlib maybe-configure-target-boehm-gc maybe-configure-target-qthreads maybe-configure-target-libffi
all-target-libjava: maybe-all-fastjar maybe-all-target-zlib maybe-all-target-boehm-gc maybe-all-target-qthreads maybe-all-target-libffi
configure-target-libobjc: $(ALL_GCC_C)
all-target-libobjc: maybe-all-target-libiberty
configure-target-libstdc++-v3: $(ALL_GCC_C)
all-target-libstdc++-v3: maybe-all-target-libiberty
configure-target-zlib: $(ALL_GCC_C)
d1484 3
a1486 10
# Target modules in the 'src' repository.
configure-target-examples: $(ALL_GCC_C)
configure-target-libgloss: $(ALL_GCC)
all-target-libgloss: maybe-configure-target-newlib
configure-target-libiberty: $(ALL_GCC)
configure-target-libtermcap: $(ALL_GCC_C)
configure-target-newlib: $(ALL_GCC)
configure-target-rda: $(ALL_GCC_C)
configure-target-winsup: $(ALL_GCC_C)
all-target-winsup: maybe-all-target-libiberty maybe-all-target-libtermcap
d1488 1
a1488 4
# Other target modules.  Warning, these are not well tested.
configure-target-gperf: $(ALL_GCC_CXX)
all-target-gperf: maybe-all-target-libiberty maybe-all-target-libstdc++-v3
configure-target-qthreads: $(ALL_GCC_C)
d1490 7
a1496 23
# Dependencies of maybe-foo on foo.  These are used because, for example,
# all-gcc only depends on all-gas if gas is present and being configured.
@@maybe_dependencies@@

# Serialization dependencies.  Host configures don't work well in parallel to
# each other, due to contention over config.cache.  Target configures and 
# build configures are similar.
@@serialization_dependencies@@

# --------------------------------
# Regenerating top level configury
# --------------------------------

# Multilib.out tells target dirs what multilibs they should build.
# There is really only one copy.  We use the 'timestamp' method to
# work around various timestamp bugs on some systems.
# We use move-if-change so that it's only considered updated when it
# actually changes, because it has to depend on a phony target.
multilib.out: maybe-all-gcc
	@@r=`${PWD_COMMAND}`; export r; \
	echo "Checking multilib configuration..."; \
	$(CC_FOR_TARGET) --print-multi-lib > multilib.tmp 2> /dev/null ; \
	$(SHELL) $(srcdir)/move-if-change multilib.tmp multilib.out ; \
d1499 9
a1507 19
AUTOGEN = autogen
$(srcdir)/Makefile.in: @@MAINT@@ $(srcdir)/Makefile.tpl $(srcdir)/Makefile.def
	cd $(srcdir) && $(AUTOGEN) Makefile.def

# Rebuilding Makefile.
Makefile: $(srcdir)/Makefile.in config.status
	CONFIG_FILES=$@@ CONFIG_HEADERS= $(SHELL) ./config.status

config.status: configure $(gcc_version_trigger)
	$(SHELL) ./config.status --recheck

# Rebuilding configure.
AUTOCONF = autoconf
$(srcdir)/configure: @@MAINT@@ $(srcdir)/configure.in $(srcdir)/config/acx.m4
	cd $(srcdir) && $(AUTOCONF)

# ------------------------------
# Special directives to GNU Make
# ------------------------------
a1508 1
# Don't pass command-line variables to submakes.
@


1.10.2.2
log
@Merge from mainline.
@
text
@a391 1
	"CONFIG_SHELL=$(SHELL)" \
a779 1
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
a850 1
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
a956 1
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
a1076 1
	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
d1410 1
a1410 1
	CONFIG_SHELL="$(SHELL)" $(SHELL) ./config.status --recheck
@


1.10.2.3
log
@Merge mainline to branch.  GDB is broken until I update cp-names.y.
@
text
@a1071 3
# Don't use shared host config.cache, as it will confuse later
# directories; GCC wants slightly different values for some
# precious variables.  *sigh*
@


1.10.2.4
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d986 1
a986 1
	esac; \[+ IF stage +]
d1007 1
a1007 1
	else \[+ ENDIF stage +]
d1009 2
a1010 2
	  libsrcdir="$$s/[+module+]"; \[+ IF stage +]
	fi; \[+ ENDIF stage +]
@


1.9
log
@2002-10-02  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Eliminate reference to all-gui, all-libproc.
	* Makefile.in: Regenerate.
@
text
@d207 1
a207 1
SET_LIB_PATH =
d211 1
a211 1
RPATH_ENVVAR = LD_LIBRARY_PATH
@


1.8
log
@2002-10-02  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.def: Remove order dependency comments.
	* Makefile.tpl: Add explicit install-install dependencies.
	* Makefile.in: Regenerate.
@
text
@d971 2
a972 6
#
# all-gui, and all-libproc are handled specially because
# they are still experimental, and if they fail to build, that
# shouldn't stop "make all".
.PHONY: $(ALL_MODULES) all-gui all-libproc
$(ALL_MODULES) all-gui all-libproc:
a1385 1
all-gui: all-gdb all-libproc
@


1.7
log
@2002-10-02  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Remove material now in src-release.  (Finally!)
	* Makefile.in: Regenerate.
@
text
@a549 5
# We put install-opcodes before install-binutils because the installed
# binutils might be on PATH, and they might need the shared opcodes
# library.
# We put install-tcl before install-itcl because itcl wants to run a
# program on installation which uses the Tcl libraries.
d1458 10
@


1.6
log
@2002-10-01  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Insert configure-target target, for src-release.
@
text
@a129 3
BZIPPROG = bzip2
MD5PROG = md5sum

a1507 284
# Support for building net releases

# Files in devo used in any net release.
# ChangeLog omitted because it may refer to files which are not in this
# distribution (perhaps it would be better to include it anyway).
DEVO_SUPPORT= README Makefile.in configure configure.in \
	config.guess config.if config.sub config move-if-change \
	mpw-README mpw-build.in mpw-config.in mpw-configure mpw-install \
	COPYING COPYING.LIB install-sh config-ml.in symlink-tree \
	mkinstalldirs ltconfig ltmain.sh missing ylwrap \
	libtool.m4 gettext.m4 ltcf-c.sh ltcf-cxx.sh ltcf-gcj.sh

# Files in devo/etc used in any net release.
# ChangeLog omitted because it may refer to files which are not in this
# distribution (perhaps it would be better to include it anyway).
ETC_SUPPORT= Makefile.in configure configure.in standards.texi \
	make-stds.texi standards.info* configure.texi configure.info* \
	configbuild.* configdev.*


# When you use `make setup-dirs' or `make taz' you should always redefine
# this macro.
SUPPORT_FILES = list-of-support-files-for-tool-in-question

# NOTE: No double quotes in the below.  It is used within shell script
# as VER="$(VER)"
VER = `	if grep 'AM_INIT_AUTOMAKE.*BFD_VERSION' $(TOOL)/configure.in >/dev/null 2>&1; then \
	  sed < bfd/configure.in -n 's/AM_INIT_AUTOMAKE[^,]*, *\([^)]*\))/\1/p'; \
	elif grep AM_INIT_AUTOMAKE $(TOOL)/configure.in >/dev/null 2>&1; then \
	  sed < $(TOOL)/configure.in -n 's/AM_INIT_AUTOMAKE[^,]*, *\([^)]*\))/\1/p'; \
	elif test -f $(TOOL)/version.in; then \
	  head -1 $(TOOL)/version.in; \
	elif grep VERSION $(TOOL)/Makefile.in > /dev/null 2>&1; then \
	  sed < $(TOOL)/Makefile.in -n 's/^VERSION *= *//p'; \
	else \
	  echo VERSION; \
	fi`
PACKAGE = $(TOOL)

.PHONY: taz
taz: $(DEVO_SUPPORT) $(SUPPORT_FILES) texinfo/texinfo.tex
	$(MAKE) -f Makefile.in do-proto-toplev \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"
	$(MAKE) -f Makefile.in do-md5sum \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"
	$(MAKE) -f Makefile.in do-tar \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"
	$(MAKE) -f Makefile.in do-bz2 \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"

.PHONY: gdb-tar
gdb-tar: $(DEVO_SUPPORT) $(SUPPORT_FILES) texinfo/texinfo.tex
	$(MAKE) -f Makefile.in do-proto-toplev \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"
	$(MAKE) -f Makefile.in do-md5sum \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"
	$(MAKE) -f Makefile.in do-djunpack \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"
	$(MAKE) -f Makefile.in do-tar \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"

.PHONY: gdb-taz
gdb-taz: gdb-tar $(DEVO_SUPPORT) $(SUPPORT_FILES) texinfo/texinfo.tex
	$(MAKE) -f Makefile.in gdb-tar \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"
	$(MAKE) -f Makefile.in do-bz2 \
		TOOL=$(TOOL) PACKAGE="$(PACKAGE)" VER="$(VER)" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(SUPPORT_FILES)"

.PHONY: do-proto-toplev
do-proto-toplev: $(DEVO_SUPPORT) $(SUPPORT_FILES) texinfo/texinfo.tex
	echo "==> Making $(PACKAGE)-$(VER)/"
	# Take out texinfo from a few places.
	sed -e '/^all\.normal: /s/\all-texinfo //' \
	    -e '/^	install-texinfo /d' \
	<Makefile.in >tmp
	mv -f tmp Makefile.in
	#
	./configure sun4
	[ -z "$(CONFIGURE_TARGET_MODULES)" ] \
	  || $(MAKE) $(CONFIGURE_TARGET_MODULES) \
	    ALL_GCC="" ALL_GCC_C="" ALL_GCC_CXX="" \
	    CC_FOR_TARGET="$(CC)" CXX_FOR_TARGET="$(CXX)"
	# Make links, and run "make diststuff" or "make info" when needed.
	rm -rf proto-toplev ; mkdir proto-toplev
	set -e ; dirs="$(TOOL) $(DEVO_SUPPORT) $(SUPPORT_FILES)" ; \
	for d in $$dirs ; do \
	  if [ -d $$d ]; then \
	    if [ ! -f $$d/Makefile ] ; then true ; \
	    elif grep '^diststuff:' $$d/Makefile >/dev/null ; then \
		(cd $$d ; $(MAKE) diststuff ) || exit 1 ; \
	    elif grep '^info:' $$d/Makefile >/dev/null ; then \
	        (cd $$d ; $(MAKE) info ) || exit 1 ; \
	    fi ; \
	    if [ -d $$d/proto-$$d.dir ]; then \
	      ln -s ../$$d/proto-$$d.dir proto-toplev/$$d ; \
	    else \
	      ln -s ../$$d proto-toplev/$$d ; \
	    fi ; \
	  else ln -s ../$$d proto-toplev/$$d ; fi ; \
	done
	cd etc && $(MAKE) info
	$(MAKE) distclean
	#
	mkdir proto-toplev/etc
	(cd proto-toplev/etc; \
	 for i in $(ETC_SUPPORT); do \
		ln -s ../../etc/$$i . ; \
	 done)
	#
	# Take out texinfo from configurable dirs
	rm proto-toplev/configure.in
	sed -e '/^host_tools=/s/texinfo //' \
	    <configure.in >proto-toplev/configure.in
	#
	mkdir proto-toplev/texinfo
	ln -s ../../texinfo/texinfo.tex		proto-toplev/texinfo/
	if test -r texinfo/util/tex3patch ; then \
	  mkdir proto-toplev/texinfo/util && \
	  ln -s ../../../texinfo/util/tex3patch	proto-toplev/texinfo/util ; \
	else true; fi
	chmod -R og=u . || chmod og=u `find . -print`
	#
	# Create .gmo files from .po files.
	for f in `find . -name '*.po' -type f -print`; do \
	     msgfmt -o `echo $$f | sed -e 's/\.po$$/.gmo/'` $$f ; \
	done
	#
	-rm -f $(PACKAGE)-$(VER)
	ln -s proto-toplev $(PACKAGE)-$(VER)

.PHONY: do-tar
do-tar:
	echo "==> Making $(PACKAGE)-$(VER).tar"
	-rm -f $(PACKAGE)-$(VER).tar
	find $(PACKAGE)-$(VER) -follow -name CVS -prune -o -type f -print \
		| tar cTfh - $(PACKAGE)-$(VER).tar

.PHONY: do-bz2
do-bz2:
	echo "==> Bzipping $(PACKAGE)-$(VER).tar.bz2"
	-rm -f $(PACKAGE)-$(VER).tar.bz2
	$(BZIPPROG) -v -9 $(PACKAGE)-$(VER).tar

.PHONY: do-md5sum
do-md5sum:
	echo "==> Adding md5 checksum to top-level directory"
	cd proto-toplev && find * -follow -name CVS -prune -o -type f -print \
		| xargs $(MD5PROG) > ../md5.sum
	mv md5.sum proto-toplev

.PHONY: do-djunpack
do-djunpack:
	echo "==> Adding updated djunpack.bat to top-level directory"
	echo - 's /gdb-[0-9\.]*/gdb-'"$(VER)"'/'
	sed < djunpack.bat > djunpack.new \
		-e 's/gdb-[0-9][0-9\.]*/gdb-'"$(VER)"'/'
	mv djunpack.new djunpack.bat
	-rm -f proto-toplev/djunpack.bat
	ln -s ../djunpack.bat proto-toplev/djunpack.bat

TEXINFO_SUPPORT= texinfo/texinfo.tex
DIST_SUPPORT= $(DEVO_SUPPORT) $(TEXINFO_SUPPORT)

.PHONY: gas.tar.bz2
GAS_SUPPORT_DIRS= bfd include libiberty opcodes intl setup.com makefile.vms mkdep
gas.tar.bz2: $(DIST_SUPPORT) $(GAS_SUPPORT_DIRS) gas
	$(MAKE) -f Makefile.in taz TOOL=gas \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(GAS_SUPPORT_DIRS)"

# The FSF "binutils" release includes gprof and ld.
.PHONY: binutils.tar.bz2
BINUTILS_SUPPORT_DIRS= bfd gas include libiberty opcodes ld gprof intl setup.com makefile.vms mkdep
binutils.tar.bz2: $(DIST_SUPPORT) $(BINUTILS_SUPPORT_DIRS) binutils
	$(MAKE) -f Makefile.in taz TOOL=binutils \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(BINUTILS_SUPPORT_DIRS)"

.PHONY: gas+binutils.tar.bz2
GASB_SUPPORT_DIRS= $(GAS_SUPPORT_DIRS) binutils ld gprof
gas+binutils.tar.bz2: $(DIST_SUPPORT) $(GASB_SUPPORT_DIRS) gas
	$(MAKE) -f Makefile.in taz TOOL=gas \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(GASB_SUPPORT_DIRS)"

GNATS_SUPPORT_DIRS=include libiberty send-pr
gnats.tar.bz2: $(DIST_SUPPORT) $(GNATS_SUPPORT_DIRS) gnats
	$(MAKE) -f  Makefile.in taz TOOL=gnats \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(GNATS_SUPPORT_DIRS)"

.PHONY: gdb.tar.bz2
GDB_SUPPORT_DIRS= bfd include libiberty mmalloc opcodes readline sim utils intl
gdb.tar.bz2: $(DIST_SUPPORT) $(GDB_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-taz TOOL=gdb \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(GDB_SUPPORT_DIRS)"
.PHONY: gdb.tar
gdb.tar: $(DIST_SUPPORT) $(GDB_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-tar TOOL=gdb \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(GDB_SUPPORT_DIRS)"

DEJAGNU_SUPPORT_DIRS=  tcl expect libiberty
.PHONY: dejagnu.tar.bz2
dejagnu.tar.bz2: $(DIST_SUPPORT) $(DEJAGNU_SUPPORT_DIRS) dejagnu
	$(MAKE) -f Makefile.in taz TOOL=dejagnu \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(DEJAGNU_SUPPORT_DIRS)"

.PHONY: gdb+dejagnu.tar.bz2
GDBD_SUPPORT_DIRS= $(GDB_SUPPORT_DIRS) tcl expect dejagnu
gdb+dejagnu.tar.bz2: $(DIST_SUPPORT) $(GDBD_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-taz TOOL=gdb PACKAGE=gdb+dejagnu \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(GDBD_SUPPORT_DIRS)"
.PHONY: gdb+dejagnu.tar
gdb+dejagnu.tar: $(DIST_SUPPORT) $(GDBD_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-tar TOOL=gdb PACKAGE=gdb+dejagnu \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(GDBD_SUPPORT_DIRS)"

.PHONY: insight.tar.bz2
INSIGHT_SUPPORT_DIRS= $(GDB_SUPPORT_DIRS) tcl tk itcl tix libgui
insight.tar.bz2: $(DIST_SUPPORT) $(GDB_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-taz TOOL=gdb PACKAGE=insight \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(INSIGHT_SUPPORT_DIRS)"
.PHONY: insight.tar
insight.tar: $(DIST_SUPPORT) $(GDB_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-tar TOOL=gdb PACKAGE=insight \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(INSIGHT_SUPPORT_DIRS)"

.PHONY: insight+dejagnu.tar.bz2
INSIGHTD_SUPPORT_DIRS= $(INSIGHT_SUPPORT_DIRS) expect dejagnu
insight+dejagnu.tar.bz2: $(DIST_SUPPORT) $(INSIGHTD_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-taz TOOL=gdb PACKAGE="insight+dejagnu" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(INSIGHTD_SUPPORT_DIRS)"
.PHONY: insight+dejagnu.tar
insight+dejagnu.tar: $(DIST_SUPPORT) $(INSIGHTD_SUPPORT_DIRS) gdb
	$(MAKE) -f Makefile.in gdb-tar TOOL=gdb PACKAGE="insight+dejagnu" \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(INSIGHTD_SUPPORT_DIRS)"

.PHONY: newlib.tar.bz2
NEWLIB_SUPPORT_DIRS=libgloss
# taz configures for the sun4 target which won't configure newlib.
# We need newlib configured so that the .info files are made.
# Unfortunately, it is not enough to just configure newlib separately:
# taz will build the .info files but since SUBDIRS won't contain newlib,
# distclean won't be run (leaving Makefile, config.status, and the tmp files
# used in building the .info files, eg: *.def, *.ref).
# The problem isn't solvable however without a lot of extra work because
# target libraries are built in subdir $(target_alias) which gets nuked during
# the make distclean.  For now punt on the issue of shipping newlib info files
# with newlib net releases and wait for a day when some native target (sun4?)
# supports newlib (if only minimally).
newlib.tar.bz2: $(DIST_SUPPORT) $(NEWLIB_SUPPORT_DIRS) newlib
	$(MAKE) -f Makefile.in taz TOOL=newlib \
		MD5PROG="$(MD5PROG)" \
		SUPPORT_FILES="$(NEWLIB_SUPPORT_DIRS)" \
		DEVO_SUPPORT="$(DEVO_SUPPORT) COPYING.NEWLIB" newlib
@


1.5
log
@2002-09-29  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Make more autoconf-friendly.
	* Makefile.in: Regenerate.
	* configure: Make substitution more autoconf-like.

2002-09-28  Richard Earnshaw  <rearnsha@@arm.com>

	* configure.in (arm-*-coff, strongarm-*-coff, xscale-*-coff): Use a
	single entry to handle all these.
	(arm-*-elf, strongarm-*-elf, xscale-*-elf): Likewise.  Also enable
	libjava on arm-*-elf.
@
text
@d1461 1
@


1.4
log
@2002-09-25  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Make subsituted variables more autoconfy.
	* Makefile.in: Regenerate.
	* configure: Make seds more autoconfy.
@
text
@d187 1
a187 2
SUBDIRS = "this is set via configure, don't edit this"
OTHERS = 
@


1.3
log
@2002-09-25  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.tpl: Rewrite substituted lines to look autoconfy.
	* Makefile.in: Regenerate.
	* configure.in: Rewrite sed statements to look autoconfy.
@
text
@d32 1
a32 1
srcdir = .
d34 2
a35 2
prefix = /usr/local
exec_prefix = $(prefix)
d37 12
a48 12
bindir=${exec_prefix}/bin
sbindir=${exec_prefix}/sbin
libexecdir=${exec_prefix}/libexec
datadir=${prefix}/share
sysconfdir=${prefix}/etc
sharedstatedir=${prefix}/com
localstatedir=${prefix}/var
libdir=${exec_prefix}/lib
includedir=${prefix}/include
oldincludedir=/usr/include
infodir=${prefix}/info
mandir=${prefix}/man
d51 2
a52 2
tooldir = $(exec_prefix)/$(target_alias)
build_tooldir = $(exec_prefix)/$(target_alias)
d54 1
a54 1
program_transform_name =
a64 2
infodir = $(prefix)/info
includedir = $(prefix)/include
d69 1
a69 1
SHELL = /bin/sh
d134 3
a136 3
DEFAULT_YACC = yacc
DEFAULT_LEX = lex
DEFAULT_M4 = m4
d520 1
a520 1
ALL_BUILD_MODULES = 
d1391 1
a1391 1
GDB_TK = all-tk all-tcl all-itcl all-tix all-libgui
@


1.2
log
@2002-09-25  Nathanael Nerode  <neroden@@gcc.gnu.org>
	* Makefile.tpl: Autogenerate *-target-* lists, dependencies of
	all-target-foo on configure-target-foo.
	* Makefile.def: Ditto.
	* Makefile.in: Rebuild.
@
text
@d49 1
a49 1
gxx_include_dir=${includedir}/g++
d194 1
a194 1
TARGET_CONFIGDIRS = libiberty libgloss $(SPECIAL_LIBS) newlib winsup opcodes libf2c libobjc
d198 1
a198 1
TARGET_SUBDIR = .
d201 1
a201 1
BUILD_SUBDIR = .
d205 1
a205 1
TARGET_CONFIGARGS = 
d209 1
a209 1
BUILD_CONFIGARGS =
d249 5
a253 5
FLAGS_FOR_TARGET =
CC_FOR_TARGET =
CXX_FOR_TARGET =
CXX_FOR_TARGET_FOR_RECURSIVE_MAKE =
GCJ_FOR_TARGET =
@


1.1
log
@2002-09-22  Nathanael Nerode  <neroden@@gcc.gnu.org>

	* Makefile.def: New file.
	* Makefile.tpl: New file.
	* Makefile.in: Generate from Makefile.tpl with 'autogen Makefile.def'.

	* configure.in: Minor rearrangement.  Simplify tests.
@
text
@d597 2
a598 16
ALL_TARGET_MODULES = \
	all-target-libstdc++-v3 \
	all-target-newlib \
	all-target-libf2c \
	all-target-libobjc \
	all-target-libtermcap \
	all-target-winsup \
	all-target-libgloss \
	all-target-libiberty \
	all-target-gperf \
	all-target-examples \
	all-target-libffi \
	all-target-libjava \
	all-target-zlib \
	all-target-boehm-gc \
	all-target-qthreads
d602 2
a603 16
CONFIGURE_TARGET_MODULES = \
	configure-target-libstdc++-v3 \
	configure-target-newlib \
	configure-target-libf2c \
	configure-target-libobjc \
	configure-target-libtermcap \
	configure-target-winsup \
	configure-target-libgloss \
	configure-target-libiberty \
	configure-target-gperf \
	configure-target-examples \
	configure-target-libffi \
	configure-target-libjava \
	configure-target-zlib \
	configure-target-boehm-gc \
	configure-target-qthreads
d607 2
a608 13
CHECK_TARGET_MODULES = \
	check-target-libstdc++-v3 \
	check-target-newlib \
	check-target-libf2c \
	check-target-libobjc \
	check-target-winsup \
	check-target-libiberty \
	check-target-libffi \
	check-target-libjava \
	check-target-zlib \
	check-target-boehm-gc \
	check-target-qthreads \
	check-target-gperf
d612 2
a613 14
INSTALL_TARGET_MODULES = \
	install-target-libstdc++-v3 \
	install-target-newlib \
	install-target-libf2c \
	install-target-libobjc \
	install-target-libtermcap \
	install-target-winsup \
	install-target-libgloss \
	install-target-libiberty \
	install-target-libjava \
	install-target-zlib \
	install-target-boehm-gc \
	install-target-qthreads \
	install-target-gperf
d620 2
a621 15
CLEAN_TARGET_MODULES = \
	clean-target-libstdc++-v3 \
	clean-target-newlib \
	clean-target-libf2c \
	clean-target-libobjc \
	clean-target-winsup \
	clean-target-libgloss \
	clean-target-libiberty \
	clean-target-gperf \
	clean-target-examples \
	clean-target-libffi \
	clean-target-libjava \
	clean-target-zlib \
	clean-target-boehm-gc \
	clean-target-qthreads
a1376 1
all-target-boehm-gc: configure-target-boehm-gc
a1383 1
all-target-examples: configure-target-examples
d1398 1
a1398 1
all-target-gperf: configure-target-gperf all-target-libiberty all-target-libstdc++-v3
d1410 1
a1410 1
all-target-libgloss: configure-target-libgloss configure-target-newlib
a1416 1
all-target-libffi: configure-target-libffi
d1418 1
a1418 1
all-target-libjava: configure-target-libjava all-fastjar all-target-zlib all-target-boehm-gc all-target-qthreads all-target-libffi
d1420 1
a1420 1
all-target-libstdc++-v3: configure-target-libstdc++-v3 all-target-libiberty
d1423 1
a1423 1
all-target-libf2c: configure-target-libf2c all-target-libiberty
d1425 1
a1425 1
all-target-libobjc: configure-target-libobjc all-target-libiberty
a1429 1
all-target-newlib: configure-target-newlib
a1430 1
all-target-libtermcap: configure-target-libtermcap
a1435 1
all-target-qthreads: configure-target-qthreads
d1455 1
a1455 1
all-target-winsup: all-target-libiberty all-target-libtermcap configure-target-winsup
a1459 1
all-target-zlib: configure-target-zlib
a1463 1
all-target-libiberty: configure-target-libiberty
d1468 5
d1504 1
a1504 1
$(srcdir)/Makefile.in: $(srcdir)/Makefile.tpl $(srcdir)/Makefile.def
@

