head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.58
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.56
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.54
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.52
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.50
	gdb_7_0-branch:1.5.0.48
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.46
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.44
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.42
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.40
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.38
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.36
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.34
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.30
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.28
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.5
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.5
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.4
	TCL_8_4_0:1.1.1.5
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.40.21;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.48.06;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.11;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.10;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.14;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.52;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.54;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.23;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.41.00;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.56.47;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.24.20.24.53;	author kseitz;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.09.24.22.01.47;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@Tcl 8.4 for Windows

RCS: @@(#) $Id: README,v 1.27 2002/06/04 19:23:30 mdejong Exp $

1. Introduction
---------------

This is the directory where you configure and compile the Windows
version of Tcl.  This directory also contains source files for Tcl
that are specific to Microsoft Windows.

The information in this file is maintained on the web at:
	http://www.tcl.tk/doc/howto/compile.html#win

The above URL includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.

2. Compiling Tcl
----------------

In order to compile Tcl for Windows, you need the following:

	Tcl 8.4 Source Distribution (plus any patches)

	and

	Visual C++ 5 or newer

	or

	Msys + Mingw 1.1

	http://prdownloads.sourceforge.net/tcl/msys_mingw2.zip

	This Msys + Mingw download is the minimal environment
	needed to build Tcl/Tk under Windows. It includes a
	shell environment and gcc. The release is designed to
	make it as easy a possible to build Tcl/Tk. To install,
	you just download the zip file and extract the files
	into a directory. The README.TXT file describes how
	to launch the msys shell, you then run the configure
	script in the tcl/win directory.

	or

	Cygwin 1.1 or newer (See http://sources.redhat.com/cygwin)

	Mingw 1.1 (http://prdownloads.sourceforge.net/mingw/MinGW-1.1.tar.gz)

	Extract the contents of the archive file into /usr/local/mingw
	and place /usr/local/mingw/bin at the front of your PATH env var
	before running the configure script in the tcl/win directory.


In practice, this release is built with Visual C++ 6.0 and the TEA
Makefile.

If you are building with Visual C++, in the "win" subdirectory of the
source release, you will find "makefile.vc".  This is the makefile for
the Visual C++ compiler and uses the stock NMAKE tool.  Detailed
directions for using it, are in the comments of "makefile.vc".  A quick
example would be:
	C:\tcl_source\win\>nmake -f makefile.vc

There is also a Developer Studio workspace and project file, too, if you
would like to use them.

If you are building with Msys or Cygwin, you can use the configure script
that lives in the win subdirectory. The Msys or Cygwin based configure/build
process works just like the UNIX one, so you will want to refer to
../unix/README for available configure options. An error will be
generated by the configure script if you try to compile Tcl with
the Cygwin version of gcc instead of the Mingw version. Check your
PATH if you get this error. Be aware that gcc will generate
lots of compile time warnings when building Tcl. Warnings are
not errors, so please don't file a bug report about them.

In order to use the binaries generated by these makefiles, you will
need to place the Tcl script library files someplace where Tcl can
find them.  Tcl looks in one of following places for the library files:

	1) The path specified in the environment variable "TCL_LIBRARY".

	2) Relative to the directory containing the current .exe.
	   Tcl will look for a directory "..\lib\tcl8.4" relative to the
	   directory containing the currently running .exe.

Note that in order to run tclsh84.exe, you must ensure that tcl84.dll
and tclpip84.dll are on your path, in the system directory, or in the 
directory containing tclsh84.exe.

Note: Tcl no longer provides support for Win32s.

3. Test suite
-------------

This distribution contains an extensive test suite for Tcl.  Some of
the tests are timing dependent and will fail from time to time.  If a
test is failing consistently, please send us a bug report with as much
detail as you can manage.  Please use the online database at
	http://tcl.sourceforge.net/

In order to run the test suite, you build the "test" target using the
appropriate makefile for your compiler.
@


1.4
log
@touched all sources to ease next import
@
text
@d1 1
a1 1
Tcl 8.3 for Windows
d3 1
a3 5
by Scott Stanton
Scriptics Corporation
scott.stanton@@scriptics.com

RCS: @@(#) $Id: README,v 1.6.8.2 2000/09/15 16:58:36 spolk Exp $
d13 4
a16 1
	http://dev.scriptics.com/doc/howto/compile.html#win
d21 26
a46 1
In order to compile Tcl for Windows, you need the following items:
d48 1
a48 1
	Tcl 8.3 Source Distribution (plus any patches)
d50 3
a52 1
	Visual C++ 2.x/4.x/5.x
a53 1
In practice, this release is built with Visual C++ 5.0
d55 22
a76 5
In the "win" subdirectory of the source release, you will find
"makefile.vc".  This is the makefile Visual C++ compiler.  You should
update the paths at the top of the file to reflect your system
configuration.  Now you can use "make" (or "nmake" for VC++) to build
the tcl libraries and the tclsh executable.
d84 7
a90 12
	2) In the lib\tcl8.3 directory under the installation directory
	   as specified in the registry:

		HKEY_LOCAL_MACHINE\SOFTWARE\Scriptics\Tcl\8.3

	3) Relative to the directory containing the current .exe.
	    Tcl will look for a directory "..\lib\tcl8.3" relative to the
	    directory containing the currently running .exe.

Note that in order to run tclsh83.exe, you must ensure that tcl83.dll
and tclpip83.dll are on your path, in the system directory, or in the 
directory containing tclsh83.exe.
a93 3
This page includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.

d101 1
a101 1
	http://dev.scriptics.com/ticket/
a104 4




@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
Tcl 8.4 for Windows
d3 5
a7 1
RCS: @@(#) $Id: README,v 1.27 2002/06/04 19:23:30 mdejong Exp $
d17 1
a17 4
	http://www.tcl.tk/doc/howto/compile.html#win

The above URL includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.
d22 1
a22 26
In order to compile Tcl for Windows, you need the following:

	Tcl 8.4 Source Distribution (plus any patches)

	and

	Visual C++ 5 or newer

	or

	Msys + Mingw 1.1

	http://prdownloads.sourceforge.net/tcl/msys_mingw2.zip

	This Msys + Mingw download is the minimal environment
	needed to build Tcl/Tk under Windows. It includes a
	shell environment and gcc. The release is designed to
	make it as easy a possible to build Tcl/Tk. To install,
	you just download the zip file and extract the files
	into a directory. The README.TXT file describes how
	to launch the msys shell, you then run the configure
	script in the tcl/win directory.

	or

	Cygwin 1.1 or newer (See http://sources.redhat.com/cygwin)
d24 1
a24 1
	Mingw 1.1 (http://prdownloads.sourceforge.net/mingw/MinGW-1.1.tar.gz)
d26 1
a26 3
	Extract the contents of the archive file into /usr/local/mingw
	and place /usr/local/mingw/bin at the front of your PATH env var
	before running the configure script in the tcl/win directory.
d28 1
d30 5
a34 22
In practice, this release is built with Visual C++ 6.0 and the TEA
Makefile.

If you are building with Visual C++, in the "win" subdirectory of the
source release, you will find "makefile.vc".  This is the makefile for
the Visual C++ compiler and uses the stock NMAKE tool.  Detailed
directions for using it, are in the comments of "makefile.vc".  A quick
example would be:
	C:\tcl_source\win\>nmake -f makefile.vc

There is also a Developer Studio workspace and project file, too, if you
would like to use them.

If you are building with Msys or Cygwin, you can use the configure script
that lives in the win subdirectory. The Msys or Cygwin based configure/build
process works just like the UNIX one, so you will want to refer to
../unix/README for available configure options. An error will be
generated by the configure script if you try to compile Tcl with
the Cygwin version of gcc instead of the Mingw version. Check your
PATH if you get this error. Be aware that gcc will generate
lots of compile time warnings when building Tcl. Warnings are
not errors, so please don't file a bug report about them.
d42 12
a53 7
	2) Relative to the directory containing the current .exe.
	   Tcl will look for a directory "..\lib\tcl8.4" relative to the
	   directory containing the currently running .exe.

Note that in order to run tclsh84.exe, you must ensure that tcl84.dll
and tclpip84.dll are on your path, in the system directory, or in the 
directory containing tclsh84.exe.
d57 3
d67 1
a67 1
	http://tcl.sourceforge.net/
d71 4
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d1 1
a1 1
Tcl 8.4 for Windows
d3 5
a7 1
RCS: @@(#) $Id: README,v 1.27 2002/06/04 19:23:30 mdejong Exp $
d17 1
a17 4
	http://www.tcl.tk/doc/howto/compile.html#win

The above URL includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.
d22 1
a22 26
In order to compile Tcl for Windows, you need the following:

	Tcl 8.4 Source Distribution (plus any patches)

	and

	Visual C++ 5 or newer

	or

	Msys + Mingw 1.1

	http://prdownloads.sourceforge.net/tcl/msys_mingw2.zip

	This Msys + Mingw download is the minimal environment
	needed to build Tcl/Tk under Windows. It includes a
	shell environment and gcc. The release is designed to
	make it as easy a possible to build Tcl/Tk. To install,
	you just download the zip file and extract the files
	into a directory. The README.TXT file describes how
	to launch the msys shell, you then run the configure
	script in the tcl/win directory.

	or

	Cygwin 1.1 or newer (See http://sources.redhat.com/cygwin)
d24 1
a24 1
	Mingw 1.1 (http://prdownloads.sourceforge.net/mingw/MinGW-1.1.tar.gz)
d26 1
a26 3
	Extract the contents of the archive file into /usr/local/mingw
	and place /usr/local/mingw/bin at the front of your PATH env var
	before running the configure script in the tcl/win directory.
d28 1
d30 5
a34 22
In practice, this release is built with Visual C++ 6.0 and the TEA
Makefile.

If you are building with Visual C++, in the "win" subdirectory of the
source release, you will find "makefile.vc".  This is the makefile for
the Visual C++ compiler and uses the stock NMAKE tool.  Detailed
directions for using it, are in the comments of "makefile.vc".  A quick
example would be:
	C:\tcl_source\win\>nmake -f makefile.vc

There is also a Developer Studio workspace and project file, too, if you
would like to use them.

If you are building with Msys or Cygwin, you can use the configure script
that lives in the win subdirectory. The Msys or Cygwin based configure/build
process works just like the UNIX one, so you will want to refer to
../unix/README for available configure options. An error will be
generated by the configure script if you try to compile Tcl with
the Cygwin version of gcc instead of the Mingw version. Check your
PATH if you get this error. Be aware that gcc will generate
lots of compile time warnings when building Tcl. Warnings are
not errors, so please don't file a bug report about them.
d42 12
a53 7
	2) Relative to the directory containing the current .exe.
	   Tcl will look for a directory "..\lib\tcl8.4" relative to the
	   directory containing the currently running .exe.

Note that in order to run tclsh84.exe, you must ensure that tcl84.dll
and tclpip84.dll are on your path, in the system directory, or in the 
directory containing tclsh84.exe.
d57 3
d67 1
a67 1
	http://tcl.sourceforge.net/
d71 4
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1 5
a5 1
Tcl 8.4 for Windows
d17 1
a17 4
	http://www.tcl.tk/doc/howto/compile.html#win

The above URL includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.
d22 1
a22 26
In order to compile Tcl for Windows, you need the following:

	Tcl 8.4 Source Distribution (plus any patches)

	and

	Visual C++ 5 or newer

	or

	Msys + Mingw 1.1

	http://prdownloads.sourceforge.net/tcl/msys_mingw2.zip

	This Msys + Mingw download is the minimal environment
	needed to build Tcl/Tk under Windows. It includes a
	shell environment and gcc. The release is designed to
	make it as easy a possible to build Tcl/Tk. To install,
	you just download the zip file and extract the files
	into a directory. The README.TXT file describes how
	to launch the msys shell, you then run the configure
	script in the tcl/win directory.

	or

	Cygwin 1.1 or newer (See http://sources.redhat.com/cygwin)
d24 1
a24 1
	Mingw 1.1 (http://prdownloads.sourceforge.net/mingw/MinGW-1.1.tar.gz)
d26 1
a26 3
	Extract the contents of the archive file into /usr/local/mingw
	and place /usr/local/mingw/bin at the front of your PATH env var
	before running the configure script in the tcl/win directory.
d28 1
d30 5
a34 22
In practice, this release is built with Visual C++ 6.0 and the TEA
Makefile.

If you are building with Visual C++, in the "win" subdirectory of the
source release, you will find "makefile.vc".  This is the makefile for
the Visual C++ compiler and uses the stock NMAKE tool.  Detailed
directions for using it, are in the comments of "makefile.vc".  A quick
example would be:
	C:\tcl_source\win\>nmake -f makefile.vc

There is also a Developer Studio workspace and project file, too, if you
would like to use them.

If you are building with Msys or Cygwin, you can use the configure script
that lives in the win subdirectory. The Msys or Cygwin based configure/build
process works just like the UNIX one, so you will want to refer to
../unix/README for available configure options. An error will be
generated by the configure script if you try to compile Tcl with
the Cygwin version of gcc instead of the Mingw version. Check your
PATH if you get this error. Be aware that gcc will generate
lots of compile time warnings when building Tcl. Warnings are
not errors, so please don't file a bug report about them.
d42 12
a53 7
	2) Relative to the directory containing the current .exe.
	   Tcl will look for a directory "..\lib\tcl8.4" relative to the
	   directory containing the currently running .exe.

Note that in order to run tclsh84.exe, you must ensure that tcl84.dll
and tclpip84.dll are on your path, in the system directory, or in the 
directory containing tclsh84.exe.
d57 3
d67 1
a67 1
	http://tcl.sourceforge.net/
d71 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
Tcl 8.0.4 for Windows
d7 1
a7 1
RCS: @@(#) $Id: README,v 1.11 1999/01/26 03:53:40 jingham Exp $
d14 1
a14 2
that are specific to Microsoft Windows.  The rest of this file
contains information specific to the Windows version of Tcl.
d16 2
a17 2
2. Distribution notes
---------------------
d19 1
a19 13
Tcl 8.0 for Windows is distributed in binary form in addition to the
common source release.  The binary distribution is a self-extracting
archive with a built-in installation script.

Look for the binary release in the same location as the source release
(ftp.scriptics.com:/pub/tcl or any of the mirror sites).  For most users,
the binary release will be much easier to install and use.  You only
need the source release if you plan to modify the core of Tcl, or if
you need to compile with a different compiler.  With the addition of
the dynamic loading interface, it is no longer necessary to have the
source distribution in order to build and use extensions.

3. Compiling Tcl
d24 1
a24 1
	Tcl 8.0 Source Distribution (plus any patches)
a25 2
	Borland C++ 4.52 (both 16-bit and 32-bit compilers)
	  or
a26 1
	Visual C++ 1.5 (to build tcl1680.dll for Win32s support of exec)
d28 1
a28 1
In practice, the 8.0.4 release is built with Visual C++ 5.0
d30 5
a34 7
In the "win" subdirectory of the source release, you will find two
files called "makefile.bc" and "makefile.vc".  These are the makefiles
for the Borland and Visual C++ compilers respectively.  You should
copy the appropriate one to "makefile" and update the paths at the
top of the file to reflect your system configuration.  Now you can use
"make" (or "nmake" for VC++) to build the tcl libraries and the tclsh
executable.
d38 1
a38 1
find them.  Tcl looks in one of three places for the library files:
d42 1
a42 1
	2) In the lib\tcl8.0 directory under the installation directory
d45 1
a45 5
		For Windows NT & 95:
		    HKEY_LOCAL_MACHINE\SOFTWARE\Scriptics\Tcl\8.0

		For Win32s:
		    HKEY_CLASSES_ROOT\SOFTWARE\Scriptics\Tcl\8.0\
d48 1
a48 1
	    Tcl will look for a directory "..\lib\tcl8.0" relative to the
d51 3
a53 83
Note that in order to run tclsh80.exe, you must ensure that tcl80.dll
and tclpip80.dll (plus tcl1680.dll under Win32s) are on your path, in
the system directory, or in the directory containing tclsh80.exe.

4. Building Extensions
----------------------

With the Windows compilers you have to worry about how you export symbols
from DLLs.  tcl.h defines a few macros to help solve this problem:
EXTERN - all Tcl_ function prototypes use this macro, which implies
	they are exported.  You'll see this used in tcl.h and tk.h.
	You should use this in your exported procedures.
	However, this is not the whole story.
TCL_STORAGE_CLASS - this is really an import/export flag, depending on if you are
	importing symbols from a DLL (i.e., a user of the DLL), or if
	you are exporting symbols from the DLL (i.e., you are building it.)
	The EXTERN macro includes TCL_STORAGE_CLASS.
	TCL_STORAGE_CLASS is defined to be either DLLIMPORT or DLLEXPORT as
	described below.
STATIC_BUILD - define this if you are *not* building a DLL
	(e.g., a main program)
DLL_BUILD - define this if you *are* building a DLL
DLLIMPORT - If STATIC_BUILD is defined, this becomes nothing.
	(On UNIX, DLLIMPORT is defined to be empty)
	Otherwise, this this expands to __declspec(dllimport)
DLLEXPORT - If STATIC_BUILD is defined, this becomes nothing.
	(On UNIX, DLLEXPORT is defined to be empty)
	Otherwise, this this expands to __declspec(dllexport)

EXPORT(type, func)
	For the Borland compiler, you need to export functions differently.
	The DLLEXPORT macro is empty, and instead you need to use
	EXPORT because they had a different order.  Your declaration will
	look like
	EXTERN EXPORT(int, Foo_Init)(Tcl_Interp *interp);
We have not defined EXPORT anywhere.  You can paste this into your C file:
#ifndef STATIC_BUILD
#if defined(_MSC_VER)
#   define EXPORT(a,b) __declspec(dllexport) a b
#   define DllEntryPoint DllMain
#else
#   if defined(__BORLANDC__)
#       define EXPORT(a,b) a _export b
#   else
#       define EXPORT(a,b) a b
#   endif
#endif
#endif


How to use these:

Assume your extension is named Foo.  In its Makefile, define
BUILD_Foo so that you know you are building Foo and not using it.
Then, in your main header file, foo.h, conditionally define
EXPORT to be either DLLIMPORT or DLLEXPORT based on the
presense of BUILD_Foo, like this:

#ifndef _FOO
#define _FOO
#include "tcl.h"
/* Additional includes go here */
/*
 * if the BUILD_foo macro is defined, the assumption is that we are
 * building the dynamic library.
 */
#ifdef BUILD_Foo
#  undef TCL_STORAGE_CLASS
#  define TCL_STORAGE_CLASS DLLEXPORT
#endif
/*
 * Function prototypes for this module.
 */
EXTERN int Foo_Init _ANSI_ARGS_((Tcl_Interp *interp));
EXTERN int Foo_SafeInit _ANSI_ARGS_((Tcl_Interp *interp));
/* Additional prototypes go here */
/*
 * end of foo.h
 * reset TCL_STORAGE_CLASS to DLLIMPORT.
 */
# undef TCL_STORAGE_CLASS
# define TCL_STORAGE_CLASS DLLIMPORT
#endif /* _FOO */
d55 1
a55 2
In your C file, put EXTERN before then functions you need to export.
If you use Borland, you'll need to use the old EXPORT macro, too.
d57 4
a60 1
5. Test suite
d66 2
a67 1
detail as you can manage.
a72 17
6. Known Bugs
-------------

Here is the current list of known bugs/missing features for the
Windows version of Tcl:

- Blocking "after" commands (e.g. "after 3000") don't work on Win32s.
- Clock command fails to handle daylight savings time boundaries for
  things like "last week".
- Background processes aren't properly detached on NT.
- File events only work on sockets.
- Pipes/files/console/serial ports don't support nonblocking I/O.
- The library cannot be used by two processes at the same time under
  Win32s.

If you have comments or bug reports for the Windows version of Tcl,
please direct them to:
a73 1
<bugs@@scriptics.com>
a74 1
or post them to the comp.lang.tcl newsgroup.
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@d1 1
a1 1
Tcl 8.3 for Windows
d7 1
a7 1
RCS: @@(#) $Id: README,v 1.6.8.2 2000/09/15 16:58:36 spolk Exp $
d14 2
a15 1
that are specific to Microsoft Windows.
d17 2
a18 2
The information in this file is maintained on the web at:
	http://dev.scriptics.com/doc/howto/compile.html#win
d20 13
a32 1
2. Compiling Tcl
d37 1
a37 1
	Tcl 8.3 Source Distribution (plus any patches)
d39 2
d42 1
d44 1
a44 1
In practice, this release is built with Visual C++ 5.0
d46 7
a52 5
In the "win" subdirectory of the source release, you will find
"makefile.vc".  This is the makefile Visual C++ compiler.  You should
update the paths at the top of the file to reflect your system
configuration.  Now you can use "make" (or "nmake" for VC++) to build
the tcl libraries and the tclsh executable.
d56 1
a56 1
find them.  Tcl looks in one of following places for the library files:
d60 1
a60 1
	2) In the lib\tcl8.3 directory under the installation directory
d63 5
a67 1
		HKEY_LOCAL_MACHINE\SOFTWARE\Scriptics\Tcl\8.3
d70 1
a70 1
	    Tcl will look for a directory "..\lib\tcl8.3" relative to the
d73 83
a155 3
Note that in order to run tclsh83.exe, you must ensure that tcl83.dll
and tclpip83.dll are on your path, in the system directory, or in the 
directory containing tclsh83.exe.
d157 2
a158 1
Note: Tcl no longer provides support for Win32s.
d160 1
a160 4
This page includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.

3. Test suite
d166 1
a166 2
detail as you can manage.  Please use the online database at
	http://dev.scriptics.com/ticket/
d172 17
d190 1
d192 1
@


1.1.1.3
log
@import tcl 8.4.0
@
text
@d1 1
a1 1
Tcl 8.4 for Windows
d3 5
a7 1
RCS: @@(#) $Id: README,v 1.27 2002/06/04 19:23:30 mdejong Exp $
d17 1
a17 4
	http://www.tcl.tk/doc/howto/compile.html#win

The above URL includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.
d22 1
a22 26
In order to compile Tcl for Windows, you need the following:

	Tcl 8.4 Source Distribution (plus any patches)

	and

	Visual C++ 5 or newer

	or

	Msys + Mingw 1.1

	http://prdownloads.sourceforge.net/tcl/msys_mingw2.zip

	This Msys + Mingw download is the minimal environment
	needed to build Tcl/Tk under Windows. It includes a
	shell environment and gcc. The release is designed to
	make it as easy a possible to build Tcl/Tk. To install,
	you just download the zip file and extract the files
	into a directory. The README.TXT file describes how
	to launch the msys shell, you then run the configure
	script in the tcl/win directory.

	or

	Cygwin 1.1 or newer (See http://sources.redhat.com/cygwin)
d24 1
a24 1
	Mingw 1.1 (http://prdownloads.sourceforge.net/mingw/MinGW-1.1.tar.gz)
d26 1
a26 3
	Extract the contents of the archive file into /usr/local/mingw
	and place /usr/local/mingw/bin at the front of your PATH env var
	before running the configure script in the tcl/win directory.
d28 1
d30 5
a34 22
In practice, this release is built with Visual C++ 6.0 and the TEA
Makefile.

If you are building with Visual C++, in the "win" subdirectory of the
source release, you will find "makefile.vc".  This is the makefile for
the Visual C++ compiler and uses the stock NMAKE tool.  Detailed
directions for using it, are in the comments of "makefile.vc".  A quick
example would be:
	C:\tcl_source\win\>nmake -f makefile.vc

There is also a Developer Studio workspace and project file, too, if you
would like to use them.

If you are building with Msys or Cygwin, you can use the configure script
that lives in the win subdirectory. The Msys or Cygwin based configure/build
process works just like the UNIX one, so you will want to refer to
../unix/README for available configure options. An error will be
generated by the configure script if you try to compile Tcl with
the Cygwin version of gcc instead of the Mingw version. Check your
PATH if you get this error. Be aware that gcc will generate
lots of compile time warnings when building Tcl. Warnings are
not errors, so please don't file a bug report about them.
d42 12
a53 7
	2) Relative to the directory containing the current .exe.
	   Tcl will look for a directory "..\lib\tcl8.4" relative to the
	   directory containing the currently running .exe.

Note that in order to run tclsh84.exe, you must ensure that tcl84.dll
and tclpip84.dll are on your path, in the system directory, or in the 
directory containing tclsh84.exe.
d57 3
d67 1
a67 1
	http://tcl.sourceforge.net/
d71 4
@


1.1.1.4
log
@import tk 8.4.0
@
text
@d1 1
a1 1
Tk 8.4 for Windows
d3 1
a3 1
Originally by Scott Stanton while at Sun Microsystems Labs
d5 2
a6 1
RCS: @@(#) $Id: README,v 1.16 2002/03/04 23:31:45 hobbs Exp $
d9 2
a10 13
version of Tk.  This directory also contains source files for Tk
that are specific to Microsoft Windows.  The rest of this file
contains information specific to the Windows version of Tk.

Please see the README and win/README files that come with the
associated Tcl release for an extensive set of pointers to
documentation.  You will need to obtain and compile the
Tcl release before using the Tk source distrition.

If you install the Tk sources next to the Tcl sources, then
the Tk Makefiles (e.g., makefile.vc for VC++) will properly
locate the necessary Tcl files.  Otherwise you may need to
edit makefile.vc and adjust the path to Tcl accordingly.
d12 93
a104 2
Information about compiling for windows is maintained at:
    http://www.tcl.tk/doc/howto/compile.html
@


1.1.1.5
log
@one more time: import tcl 8.4.0
@
text
@d1 1
a1 1
Tcl 8.4 for Windows
d3 1
a3 1
RCS: @@(#) $Id: README,v 1.27 2002/06/04 19:23:30 mdejong Exp $
d5 1
a5 2
1. Introduction
---------------
d8 13
a20 2
version of Tcl.  This directory also contains source files for Tcl
that are specific to Microsoft Windows.
d22 2
a23 93
The information in this file is maintained on the web at:
	http://www.tcl.tk/doc/howto/compile.html#win

The above URL includes a lengthy discussion of compiler macros necessary
when compiling Tcl extensions that will be dynamically loaded.

2. Compiling Tcl
----------------

In order to compile Tcl for Windows, you need the following:

	Tcl 8.4 Source Distribution (plus any patches)

	and

	Visual C++ 5 or newer

	or

	Msys + Mingw 1.1

	http://prdownloads.sourceforge.net/tcl/msys_mingw2.zip

	This Msys + Mingw download is the minimal environment
	needed to build Tcl/Tk under Windows. It includes a
	shell environment and gcc. The release is designed to
	make it as easy a possible to build Tcl/Tk. To install,
	you just download the zip file and extract the files
	into a directory. The README.TXT file describes how
	to launch the msys shell, you then run the configure
	script in the tcl/win directory.

	or

	Cygwin 1.1 or newer (See http://sources.redhat.com/cygwin)

	Mingw 1.1 (http://prdownloads.sourceforge.net/mingw/MinGW-1.1.tar.gz)

	Extract the contents of the archive file into /usr/local/mingw
	and place /usr/local/mingw/bin at the front of your PATH env var
	before running the configure script in the tcl/win directory.


In practice, this release is built with Visual C++ 6.0 and the TEA
Makefile.

If you are building with Visual C++, in the "win" subdirectory of the
source release, you will find "makefile.vc".  This is the makefile for
the Visual C++ compiler and uses the stock NMAKE tool.  Detailed
directions for using it, are in the comments of "makefile.vc".  A quick
example would be:
	C:\tcl_source\win\>nmake -f makefile.vc

There is also a Developer Studio workspace and project file, too, if you
would like to use them.

If you are building with Msys or Cygwin, you can use the configure script
that lives in the win subdirectory. The Msys or Cygwin based configure/build
process works just like the UNIX one, so you will want to refer to
../unix/README for available configure options. An error will be
generated by the configure script if you try to compile Tcl with
the Cygwin version of gcc instead of the Mingw version. Check your
PATH if you get this error. Be aware that gcc will generate
lots of compile time warnings when building Tcl. Warnings are
not errors, so please don't file a bug report about them.

In order to use the binaries generated by these makefiles, you will
need to place the Tcl script library files someplace where Tcl can
find them.  Tcl looks in one of following places for the library files:

	1) The path specified in the environment variable "TCL_LIBRARY".

	2) Relative to the directory containing the current .exe.
	   Tcl will look for a directory "..\lib\tcl8.4" relative to the
	   directory containing the currently running .exe.

Note that in order to run tclsh84.exe, you must ensure that tcl84.dll
and tclpip84.dll are on your path, in the system directory, or in the 
directory containing tclsh84.exe.

Note: Tcl no longer provides support for Win32s.

3. Test suite
-------------

This distribution contains an extensive test suite for Tcl.  Some of
the tests are timing dependent and will fail from time to time.  If a
test is failing consistently, please send us a bug report with as much
detail as you can manage.  Please use the online database at
	http://tcl.sourceforge.net/

In order to run the test suite, you build the "test" target using the
appropriate makefile for your compiler.
@


