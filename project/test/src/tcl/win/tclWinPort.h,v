head	1.10;
access;
symbols
	sid-snapshot-20180601:1.10
	sid-snapshot-20180501:1.10
	sid-snapshot-20180401:1.10
	sid-snapshot-20180301:1.10
	sid-snapshot-20180201:1.10
	sid-snapshot-20180101:1.10
	sid-snapshot-20171201:1.10
	sid-snapshot-20171101:1.10
	sid-snapshot-20171001:1.10
	sid-snapshot-20170901:1.10
	sid-snapshot-20170801:1.10
	sid-snapshot-20170701:1.10
	sid-snapshot-20170601:1.10
	sid-snapshot-20170501:1.10
	sid-snapshot-20170401:1.10
	sid-snapshot-20170301:1.10
	sid-snapshot-20170201:1.10
	sid-snapshot-20170101:1.10
	sid-snapshot-20161201:1.10
	sid-snapshot-20161101:1.10
	sid-snapshot-20160901:1.10
	sid-snapshot-20160801:1.10
	sid-snapshot-20160701:1.10
	sid-snapshot-20160601:1.10
	sid-snapshot-20160501:1.10
	sid-snapshot-20160401:1.10
	sid-snapshot-20160301:1.10
	sid-snapshot-20160201:1.10
	sid-snapshot-20160101:1.10
	sid-snapshot-20151201:1.10
	sid-snapshot-20151101:1.10
	sid-snapshot-20151001:1.10
	sid-snapshot-20150901:1.10
	sid-snapshot-20150801:1.10
	sid-snapshot-20150701:1.10
	sid-snapshot-20150601:1.10
	sid-snapshot-20150501:1.10
	sid-snapshot-20150401:1.10
	sid-snapshot-20150301:1.10
	sid-snapshot-20150201:1.10
	sid-snapshot-20150101:1.10
	sid-snapshot-20141201:1.10
	sid-snapshot-20141101:1.10
	sid-snapshot-20141001:1.10
	sid-snapshot-20140901:1.10
	sid-snapshot-20140801:1.10
	sid-snapshot-20140701:1.10
	sid-snapshot-20140601:1.10
	sid-snapshot-20140501:1.10
	sid-snapshot-20140401:1.10
	sid-snapshot-20140301:1.10
	sid-snapshot-20140201:1.10
	sid-snapshot-20140101:1.10
	sid-snapshot-20131201:1.10
	sid-snapshot-20131101:1.10
	sid-snapshot-20131001:1.10
	sid-snapshot-20130901:1.10
	sid-snapshot-20130801:1.10
	sid-snapshot-20130701:1.10
	sid-snapshot-20130601:1.10
	insight_7_6-2013-04-10-branchpoint:1.10
	gdb_7_6-branch:1.10.0.58
	sid-snapshot-20130501:1.10
	sid-snapshot-20130401:1.10
	sid-snapshot-20130301:1.10
	sid-snapshot-20130201:1.10
	sid-snapshot-20130101:1.10
	sid-snapshot-20121201:1.10
	sid-snapshot-20121101:1.10
	sid-snapshot-20121001:1.10
	sid-snapshot-20120901:1.10
	gdb_7_5-branch:1.10.0.56
	sid-snapshot-20120801:1.10
	sid-snapshot-20120701:1.10
	sid-snapshot-20120601:1.10
	sid-snapshot-20120501:1.10
	sid-snapshot-20120401:1.10
	gdb_7_4-branch:1.10.0.54
	sid-snapshot-20120301:1.10
	sid-snapshot-20120201:1.10
	sid-snapshot-20120101:1.10
	sid-snapshot-20111201:1.10
	sid-snapshot-20111101:1.10
	sid-snapshot-20111001:1.10
	sid-snapshot-20110901:1.10
	gdb_7_3-branch:1.10.0.52
	sid-snapshot-20110801:1.10
	sid-snapshot-20110701:1.10
	sid-snapshot-20110601:1.10
	sid-snapshot-20110501:1.10
	sid-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	sid-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	sid-snapshot-20101201:1.10
	sid-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	sid-snapshot-20100901:1.10
	sid-snapshot-20100801:1.10
	sid-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	sid-snapshot-20100301:1.10
	gdb_7_1-branch:1.10.0.50
	gdb_7_0-branch:1.10.0.48
	sid-snapshot-20100201:1.10
	sid-snapshot-20100101:1.10
	sid-snapshot-20091201:1.10
	sid-snapshot-20091101:1.10
	sid-snapshot-20091001:1.10
	arc-sim-20090309:1.10
	sid-snapshot-20090901:1.10
	sid-snapshot-20090801:1.10
	sid-snapshot-20090701:1.10
	sid-snapshot-20090601:1.10
	sid-snapshot-20090501:1.10
	kevinb-pre-tcl8_5_7_merge:1.10
	sid-snapshot-20090401:1.10
	arc-insight_6_8-branch:1.10.0.46
	arc-insight_6_8-branchpoint:1.10
	insight_6_8-branch:1.10.0.44
	insight_6_8-branchpoint:1.10
	sid-snapshot-20090301:1.10
	sid-snapshot-20090201:1.10
	sid-snapshot-20090101:1.10
	sid-snapshot-20081201:1.10
	sid-snapshot-20081101:1.10
	sid-snapshot-20081001:1.10
	sid-snapshot-20080901:1.10
	sid-snapshot-20080801:1.10
	sid-snapshot-20080701:1.10
	sid-snapshot-20080601:1.10
	sid-snapshot-20080501:1.10
	sid-snapshot-20080403:1.10
	sid-snapshot-20080401:1.10
	gdb_6_8-branch:1.10.0.42
	sid-snapshot-20080301:1.10
	sid-snapshot-20080201:1.10
	sid-snapshot-20080101:1.10
	sid-snapshot-20071201:1.10
	sid-snapshot-20071101:1.10
	sid-snapshot-20071001:1.10
	insight_6_6-20070208-release:1.10
	gdb_6_6-branch:1.10.0.40
	gdb_6_6-2006-11-15-branchpoint:1.10
	insight_6_5-20061003-release:1.10
	gdb_6_5-branch:1.10.0.38
	gdb_6_5-2006-05-14-branchpoint:1.10
	readline_5_1-import-branch:1.10.0.36
	readline_5_1-import-branchpoint:1.10
	gdb_6_4-branch:1.10.0.34
	gdb_6_4-2005-11-01-branchpoint:1.10
	msnyder-tracepoint-checkpoint-branch:1.10.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.10
	gdb_6_1-2004-04-05-release:1.10
	ezannoni_pie-20040323-branch:1.10.0.30
	ezannoni_pie-20040323-branchpoint:1.10
	cagney_tramp-20040321-mergepoint:1.10
	cagney_tramp-20040309-branch:1.10.0.28
	cagney_tramp-20040309-branchpoint:1.10
	gdb_6_1-branch:1.10.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.10
	drow-cplus-merge-20040208:1.10
	carlton_dictionary-20040126-merge:1.10
	drow-cplus-merge-20040113:1.10
	drow-cplus-merge-20031224:1.10
	drow-cplus-merge-20031220:1.10
	carlton_dictionary-20031215-merge:1.10
	drow-cplus-merge-20031214:1.10
	carlton-dictionary-20031111-merge:1.10
	gdb_6_0-2003-10-04-release:1.10
	carlton_dictionary-20030917-merge:1.10
	ezannoni_pie-20030916-branchpoint:1.10
	ezannoni_pie-20030916-branch:1.10.0.24
	cagney_x86i386-20030821-branch:1.10.0.22
	cagney_x86i386-20030821-branchpoint:1.10
	carlton_dictionary-20030805-merge:1.10
	carlton_dictionary-20030627-merge:1.10
	gdb_6_0-branch:1.10.0.20
	gdb_6_0-2003-06-23-branchpoint:1.10
	cagney_convert-20030606-branch:1.10.0.18
	cagney_convert-20030606-branchpoint:1.10
	cagney_writestrings-20030508-branch:1.10.0.16
	cagney_writestrings-20030508-branchpoint:1.10
	carlton_dictionary-20030523-merge:1.10
	cagney_fileio-20030521-branch:1.10.0.14
	cagney_fileio-20030521-branchpoint:1.10
	carlton_dictionary-20030430-merge:1.10
	carlton_dictionary-20030416-merge:1.10
	cagney_frameaddr-20030409-mergepoint:1.10
	cagney_frameaddr-20030403-branchpoint:1.10
	cagney_frameaddr-20030403-branch:1.10.0.12
	cagney_framebase-20030330-mergepoint:1.10
	cagney_framebase-20030326-branch:1.10.0.10
	cagney_framebase-20030326-branchpoint:1.10
	cagney_lazyid-20030317-branch:1.10.0.8
	cagney_lazyid-20030317-branchpoint:1.10
	offbyone-20030313-branch:1.10.0.6
	offbyone-20030313-branchpoint:1.10
	carlton_dictionary-20030305-merge:1.10
	cagney_offbyone-20030303-branch:1.10.0.4
	cagney_offbyone-20030303-branchpoint:1.10
	carlton_dictionary-20030207-merge:1.10
	interps-20030202-branch:1.10.0.2
	interps-20030202-branchpoint:1.10
	TCL8_4_1:1.1.1.4
	cagney-unwind-20030108-branch:1.9.0.2
	cagney-unwind-20030108-branchpoint:1.9
	carlton_dictionary-20021223-merge:1.9
	gdb_5_3-2002-12-12-release:1.6
	TCL_8_4_1:1.1.1.4
	carlton_dictionary-20021115-merge:1.8
	kseitz_interps-20021105-merge:1.8
	kseitz_interps-20021103-merge:1.8
	drow-cplus-merge-20021020:1.8
	drow-cplus-merge-20021025:1.8
	carlton_dictionary-20021025-merge:1.8
	carlton_dictionary-20021011-merge:1.8
	drow-cplus-branch:1.8.0.4
	drow-cplus-branchpoint:1.8
	kseitz_interps-20020930-merge:1.8
	carlton_dictionary-20020927-merge:1.8
	tcltk840-20020924-branch:1.8.0.2
	tcltk840-20020924-branchpoint:1.8
	TCL_8_4_0:1.1.1.3
	carlton_dictionary-branch:1.7.0.2
	carlton_dictionary-20020920-branchpoint:1.7
	sid-20020905-branchpoint:1.6
	sid-20020905-branch:1.6.0.14
	gdb_5_3-branch:1.6.0.12
	gdb_5_3-2002-09-04-branchpoint:1.6
	kseitz_interps-20020829-merge:1.6
	cagney_sysregs-20020825-branch:1.6.0.10
	cagney_sysregs-20020825-branchpoint:1.6
	readline_4_3-import-branch:1.6.0.8
	readline_4_3-import-branchpoint:1.6
	gdb_5_2_1-2002-07-23-release:1.6
	kseitz_interps-20020528-branch:1.6.0.6
	kseitz_interps-20020528-branchpoint:1.6
	cagney_regbuf-20020515-branch:1.6.0.4
	cagney_regbuf-20020515-branchpoint:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.4
	gdb_s390-2001-09-26-branchpoint:1.2
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.2.0.2
	gdb_5_1-2001-07-29-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.10
date	2003.01.21.19.40.23;	author hunt;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.26.19.48.07;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.24.18.37.11;	author kseitz;	state Exp;
branches
	1.8.2.1
	1.8.4.1;
next	1.7;

1.7
date	2002.09.13.14.40.59;	author kseitz;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.09.13.18.27.55;	author irox;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2001.09.13.00.38.49;	author irox;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.09.23.56.10;	author irox;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.09.23.26.07;	author irox;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.10.20.08.27;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.8.2.1
date	2002.09.27.21.49.15;	author kseitz;	state Exp;
branches;
next	;

1.8.4.1
date	2003.12.14.20.28.56;	author drow;	state Exp;
branches;
next	;

1.7.2.1
date	2002.12.23.19.40.57;	author carlton;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2003.02.07.19.18.24;	author carlton;	state Exp;
branches;
next	;

1.6.6.1
date	2002.10.01.00.46.58;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.41.00;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.56.46;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.11.26.20.01.21;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Updated to tcl 8.4.1
@
text
@/*
 * tclWinPort.h --
 *
 *	This header file handles porting issues that occur because of
 *	differences between Windows and Unix. It should be the only
 *	file that contains #ifdefs to handle different flavors of OS.
 *
 * Copyright (c) 1994-1997 Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tclWinPort.h,v 1.34 2002/09/27 00:50:10 hobbs Exp $
 */

#ifndef _TCLWINPORT
#define _TCLWINPORT

#ifndef _TCLINT
#   include "tclInt.h"
#endif

#ifdef CHECK_UNICODE_CALLS
#   define _UNICODE
#   define UNICODE
#   define __TCHAR_DEFINED
    typedef float *_TCHAR;
#   define _TCHAR_DEFINED
    typedef float *TCHAR;
#endif /* CHECK_UNICODE_CALLS */

/*
 *---------------------------------------------------------------------------
 * The following sets of #includes and #ifdefs are required to get Tcl to
 * compile under the windows compilers.
 *---------------------------------------------------------------------------
 */

#include <stdio.h>
#include <stdlib.h>

#include <errno.h>
#include <fcntl.h>
#include <float.h>
#include <io.h>
#include <malloc.h>
#include <process.h>
#include <signal.h>
#include <string.h>

/*
 * Need to block out these includes for building extensions with MetroWerks
 * compiler for Win32.
 */

#ifndef __MWERKS__
#include <sys/stat.h>
#include <sys/timeb.h>
#   ifdef __BORLANDC__
#	include <utime.h>
#   else
#	include <sys/utime.h>
#   endif /* __BORLANDC__ */
#endif /* __MWERKS__ */

#include <time.h>

#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#undef WIN32_LEAN_AND_MEAN

#include <winsock2.h>

#ifdef BUILD_tcl
#   undef TCL_STORAGE_CLASS
#   define TCL_STORAGE_CLASS DLLEXPORT
#endif /* BUILD_tcl */

/*
 * Define EINPROGRESS in terms of WSAEINPROGRESS.
 */

#ifndef	EINPROGRESS
#   define EINPROGRESS	WSAEINPROGRESS
#endif

/*
 * If ENOTSUP is not defined, define it to a value that will never occur.
 */

#ifndef ENOTSUP
#   define ENOTSUP	-1030507
#endif

/*
 * The following defines redefine the Windows Socket errors as
 * BSD errors so Tcl_PosixError can do the right thing.
 */

#ifndef EWOULDBLOCK
#   define EWOULDBLOCK	EAGAIN
#endif
#ifndef EALREADY
#   define EALREADY	149	/* operation already in progress */
#endif
#ifndef ENOTSOCK
#   define ENOTSOCK	95	/* Socket operation on non-socket */
#endif
#ifndef EDESTADDRREQ
#   define EDESTADDRREQ	96	/* Destination address required */
#endif
#ifndef EMSGSIZE
#   define EMSGSIZE	97	/* Message too long */
#endif
#ifndef EPROTOTYPE
#   define EPROTOTYPE	98	/* Protocol wrong type for socket */
#endif
#ifndef ENOPROTOOPT
#   define ENOPROTOOPT	99	/* Protocol not available */
#endif
#ifndef EPROTONOSUPPORT
#   define EPROTONOSUPPORT 120	/* Protocol not supported */
#endif
#ifndef ESOCKTNOSUPPORT
#   define ESOCKTNOSUPPORT 121	/* Socket type not supported */
#endif
#ifndef EOPNOTSUPP
#   define EOPNOTSUPP	122	/* Operation not supported on socket */
#endif
#ifndef EPFNOSUPPORT
#   define EPFNOSUPPORT	123	/* Protocol family not supported */
#endif
#ifndef EAFNOSUPPORT
#   define EAFNOSUPPORT	124	/* Address family not supported */
#endif
#ifndef EADDRINUSE
#   define EADDRINUSE	125	/* Address already in use */
#endif
#ifndef EADDRNOTAVAIL
#   define EADDRNOTAVAIL 126	/* Can't assign requested address */
#endif
#ifndef ENETDOWN
#   define ENETDOWN	127	/* Network is down */
#endif
#ifndef ENETUNREACH
#   define ENETUNREACH	128	/* Network is unreachable */
#endif
#ifndef ENETRESET
#   define ENETRESET	129	/* Network dropped connection on reset */
#endif
#ifndef ECONNABORTED
#   define ECONNABORTED	130	/* Software caused connection abort */
#endif
#ifndef ECONNRESET
#   define ECONNRESET	131	/* Connection reset by peer */
#endif
#ifndef ENOBUFS
#   define ENOBUFS	132	/* No buffer space available */
#endif
#ifndef EISCONN
#   define EISCONN	133	/* Socket is already connected */
#endif
#ifndef ENOTCONN
#   define ENOTCONN	134	/* Socket is not connected */
#endif
#ifndef ESHUTDOWN
#   define ESHUTDOWN	143	/* Can't send after socket shutdown */
#endif
#ifndef ETOOMANYREFS
#   define ETOOMANYREFS	144	/* Too many references: can't splice */
#endif
#ifndef ETIMEDOUT
#   define ETIMEDOUT	145	/* Connection timed out */
#endif
#ifndef ECONNREFUSED
#   define ECONNREFUSED	146	/* Connection refused */
#endif
#ifndef ELOOP
#   define ELOOP	90	/* Symbolic link loop */
#endif
#ifndef EHOSTDOWN
#   define EHOSTDOWN	147	/* Host is down */
#endif
#ifndef EHOSTUNREACH
#   define EHOSTUNREACH	148	/* No route to host */
#endif
#ifndef ENOTEMPTY
#   define ENOTEMPTY 	93	/* directory not empty */
#endif
#ifndef EUSERS
#   define EUSERS	94	/* Too many users (for UFS) */
#endif
#ifndef EDQUOT
#   define EDQUOT	69	/* Disc quota exceeded */
#endif
#ifndef ESTALE
#   define ESTALE	151	/* Stale NFS file handle */
#endif
#ifndef EREMOTE
#   define EREMOTE	66	/* The object is remote */
#endif

/*
 * It is very hard to determine how Windows reacts to attempting to
 * set a file pointer outside the input datatype's representable
 * region.  So we fake the error code ourselves.
 */

#ifndef EOVERFLOW
#   ifdef EFBIG
#      define EOVERFLOW	EFBIG	/* The object couldn't fit in the datatype */
#   else /* !EFBIG */
#      define EOVERFLOW	EINVAL	/* Better than nothing! */
#   endif /* EFBIG */
#endif /* !EOVERFLOW */

/*
 * Supply definitions for macros to query wait status, if not already
 * defined in header files above.
 */

#if TCL_UNION_WAIT
#   define WAIT_STATUS_TYPE union wait
#else
#   define WAIT_STATUS_TYPE int
#endif /* TCL_UNION_WAIT */

#ifndef WIFEXITED
#   define WIFEXITED(stat)  (((*((int *) &(stat))) & 0xff) == 0)
#endif

#ifndef WEXITSTATUS
#   define WEXITSTATUS(stat) (((*((int *) &(stat))) >> 8) & 0xff)
#endif

#ifndef WIFSIGNALED
#   define WIFSIGNALED(stat) (((*((int *) &(stat)))) && ((*((int *) &(stat))) == ((*((int *) &(stat))) & 0x00ff)))
#endif

#ifndef WTERMSIG
#   define WTERMSIG(stat)    ((*((int *) &(stat))) & 0x7f)
#endif

#ifndef WIFSTOPPED
#   define WIFSTOPPED(stat)  (((*((int *) &(stat))) & 0xff) == 0177)
#endif

#ifndef WSTOPSIG
#   define WSTOPSIG(stat)    (((*((int *) &(stat))) >> 8) & 0xff)
#endif

/*
 * Define constants for waitpid() system call if they aren't defined
 * by a system header file.
 */

#ifndef WNOHANG
#   define WNOHANG 1
#endif
#ifndef WUNTRACED
#   define WUNTRACED 2
#endif

/*
 * Define access mode constants if they aren't already defined.
 */

#ifndef F_OK
#    define F_OK 00
#endif
#ifndef X_OK
#    define X_OK 01
#endif
#ifndef W_OK
#    define W_OK 02
#endif
#ifndef R_OK
#    define R_OK 04
#endif

/*
 * Define macros to query file type bits, if they're not already
 * defined.
 */

#ifndef S_IFLNK
#define S_IFLNK        0120000  /* Symbolic Link */
#endif

#ifndef S_ISREG
#   ifdef S_IFREG
#       define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#   else
#       define S_ISREG(m) 0
#   endif
#endif /* !S_ISREG */
#ifndef S_ISDIR
#   ifdef S_IFDIR
#       define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
#   else
#       define S_ISDIR(m) 0
#   endif
#endif /* !S_ISDIR */
#ifndef S_ISCHR
#   ifdef S_IFCHR
#       define S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
#   else
#       define S_ISCHR(m) 0
#   endif
#endif /* !S_ISCHR */
#ifndef S_ISBLK
#   ifdef S_IFBLK
#       define S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
#   else
#       define S_ISBLK(m) 0
#   endif
#endif /* !S_ISBLK */
#ifndef S_ISFIFO
#   ifdef S_IFIFO
#       define S_ISFIFO(m) (((m) & S_IFMT) == S_IFIFO)
#   else
#       define S_ISFIFO(m) 0
#   endif
#endif /* !S_ISFIFO */
#ifndef S_ISLNK
#   ifdef S_IFLNK
#       define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
#   else
#       define S_ISLNK(m) 0
#   endif
#endif /* !S_ISLNK */


/*
 * Define MAXPATHLEN in terms of MAXPATH if available
 */

#ifndef MAXPATH
#define MAXPATH MAX_PATH
#endif /* MAXPATH */

#ifndef MAXPATHLEN
#define MAXPATHLEN MAXPATH
#endif /* MAXPATHLEN */

/*
 * Define pid_t and uid_t if they're not already defined.
 */

#if ! TCL_PID_T
#   define pid_t int
#endif /* !TCL_PID_T */
#if ! TCL_UID_T
#   define uid_t int
#endif /* !TCL_UID_T */

/*
 * Visual C++ has some odd names for common functions, so we need to
 * define a few macros to handle them.  Also, it defines EDEADLOCK and
 * EDEADLK as the same value, which confuses Tcl_ErrnoId().
 */

#if defined(_MSC_VER) || defined(__MINGW32__)
#    define environ _environ
#    define hypot _hypot
#    define exception _exception
#    undef EDEADLOCK
#    if defined(__MINGW32__) && !defined(__MSVCRT__)
#	define timezone _timezone
#    endif
#endif /* _MSC_VER || __MINGW32__ */

/*
 * Borland's timezone and environ functions.
 */

#ifdef  __BORLANDC__
#   define timezone _timezone
#   define environ  _environ
#endif /* __BORLANDC__ */

#ifdef __CYGWIN__
/* On Cygwin, the environment is imported from the Cygwin DLL. */
     DLLIMPORT extern char **__cygwin_environ;
#    define environ __cygwin_environ
#    define putenv TclCygwinPutenv
#    define timezone _timezone
#endif /* __CYGWIN__ */

/*
 * There is no platform-specific panic routine for Windows in the Tcl internals.
 */

#define TclpPanic ((Tcl_PanicProc *) NULL)

/*
 *---------------------------------------------------------------------------
 * The following macros and declarations represent the interface between 
 * generic and windows-specific parts of Tcl.  Some of the macros may 
 * override functions declared in tclInt.h.
 *---------------------------------------------------------------------------
 */

/*
 * The default platform eol translation on Windows is TCL_TRANSLATE_CRLF:
 */

#define	TCL_PLATFORM_TRANSLATION	TCL_TRANSLATE_CRLF

/*
 * Declare dynamic loading extension macro.
 */

#define TCL_SHLIB_EXT ".dll"

/*
 * The following define ensures that we use the native putenv
 * implementation to modify the environment array.  This keeps
 * the C level environment in synch with the system level environment.
 */

#define USE_PUTENV	1

/*
 * Msvcrt's putenv() copies the string rather than takes ownership of it.
 */

#if defined(_MSC_VER) || defined(__MINGW32__)
#   define HAVE_PUTENV_THAT_COPIES 1
#endif

/*
 * The following defines wrap the system memory allocation routines for
 * use by tclAlloc.c.
 */

#ifdef __CYGWIN__
#   define TclpSysAlloc(size, isBin)	malloc((size))
#   define TclpSysFree(ptr)		free((ptr))
#   define TclpSysRealloc(ptr, size)	realloc((ptr), (size))
#else
#   define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
					    (DWORD)0, (DWORD)size))
#   define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
					    (DWORD)0, (HGLOBAL)ptr))
#   define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
					    (DWORD)0, (LPVOID)ptr, (DWORD)size))
#endif

/*
 * The following defines map from standard socket names to our internal
 * wrappers that redirect through the winSock function table (see the
 * file tclWinSock.c).
 */

#define getservbyname	TclWinGetServByName
#define getsockopt	TclWinGetSockOpt
#define ntohs		TclWinNToHS
#define setsockopt	TclWinSetSockOpt
/* This type is not defined in the Windows headers */
#define socklen_t       int


/*
 * The following macros have trivial definitions, allowing generic code to 
 * address platform-specific issues.
 */

#define TclpReleaseFile(file)	ckfree((char *) file)

/*
 * The following macros and declarations wrap the C runtime library 
 * functions.
 */

#define TclpExit		exit

/*
 * Declarations for Windows-only functions.
 */

EXTERN HANDLE	    TclWinSerialReopen _ANSI_ARGS_(( HANDLE handle,
			CONST TCHAR *name, DWORD access));

EXTERN Tcl_Channel  TclWinOpenSerialChannel _ANSI_ARGS_((HANDLE handle,
                        char *channelName, int permissions));
					 
EXTERN Tcl_Channel  TclWinOpenConsoleChannel _ANSI_ARGS_((HANDLE handle,
                        char *channelName, int permissions));

EXTERN Tcl_Channel  TclWinOpenFileChannel _ANSI_ARGS_((HANDLE handle,
                        char *channelName, int permissions, int appendMode));

EXTERN TclFile TclWinMakeFile _ANSI_ARGS_((HANDLE handle));

/*
 * Platform specific mutex definition used by memory allocators.
 * These mutexes are statically allocated and explicitly initialized.
 * Most modules do not use this, but instead use Tcl_Mutex types and
 * Tcl_MutexLock and Tcl_MutexUnlock that are self-initializing.
 */

#ifdef TCL_THREADS
typedef CRITICAL_SECTION TclpMutex;
EXTERN void	TclpMutexInit _ANSI_ARGS_((TclpMutex *mPtr));
EXTERN void	TclpMutexLock _ANSI_ARGS_((TclpMutex *mPtr));
EXTERN void	TclpMutexUnlock _ANSI_ARGS_((TclpMutex *mPtr));
#else /* !TCL_THREADS */
typedef int TclpMutex;
#define	TclpMutexInit(a)
#define	TclpMutexLock(a)
#define	TclpMutexUnlock(a)
#endif /* TCL_THREADS */

#ifdef TCL_WIDE_INT_TYPE
EXTERN Tcl_WideInt	strtoll _ANSI_ARGS_((CONST char *string,
					     char **endPtr, int base));
EXTERN Tcl_WideUInt	strtoull _ANSI_ARGS_((CONST char *string,
					      char **endPtr, int base));
#endif /* TCL_WIDE_INT_TYPE */

#ifndef INVALID_SET_FILE_POINTER
#define INVALID_SET_FILE_POINTER 0xFFFFFFFF
#endif /* INVALID_SET_FILE_POINTER */

#include "tclPlatDecls.h"
#include "tclIntPlatDecls.h"

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TCLWINPORT */
@


1.9
log
@touched all sources to ease next import
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclWinPort.h,v 1.8.8.8 2001/07/16 23:51:56 mdejong Exp $
d24 7
a30 11

#define _UNICODE
#define UNICODE

#define __TCHAR_DEFINED
typedef float *_TCHAR;

#define _TCHAR_DEFINED
typedef float *TCHAR;

#endif
d59 6
a64 2
#include <sys/utime.h>
#endif
a67 3
#include <winsock2.h>


a68 1
#define __USE_W32_SOCKETS
d72 2
d75 3
a77 3
# undef TCL_STORAGE_CLASS
# define TCL_STORAGE_CLASS DLLEXPORT
#endif
d84 1
a84 1
#define EINPROGRESS WSAEINPROGRESS
d92 1
a92 1
#define	ENOTSUP		-1030507
d101 1
a101 1
#define EWOULDBLOCK             EAGAIN
d104 1
a104 1
#define EALREADY	149	/* operation already in progress */
d107 1
a107 1
#define ENOTSOCK	95	/* Socket operation on non-socket */
d110 1
a110 1
#define EDESTADDRREQ	96	/* Destination address required */
d113 1
a113 1
#define EMSGSIZE	97	/* Message too long */
d116 1
a116 1
#define EPROTOTYPE	98	/* Protocol wrong type for socket */
d119 1
a119 1
#define ENOPROTOOPT	99	/* Protocol not available */
d122 1
a122 1
#define EPROTONOSUPPORT	120	/* Protocol not supported */
d125 1
a125 1
#define ESOCKTNOSUPPORT	121	/* Socket type not supported */
d128 1
a128 1
#define EOPNOTSUPP	122	/* Operation not supported on socket */
d131 1
a131 1
#define EPFNOSUPPORT	123	/* Protocol family not supported */
d134 1
a134 1
#define EAFNOSUPPORT	124	/* Address family not supported */
d137 1
a137 1
#define EADDRINUSE	125	/* Address already in use */
d140 1
a140 1
#define EADDRNOTAVAIL	126	/* Can't assign requested address */
d143 1
a143 1
#define ENETDOWN	127	/* Network is down */
d146 1
a146 1
#define ENETUNREACH	128	/* Network is unreachable */
d149 1
a149 1
#define ENETRESET	129	/* Network dropped connection on reset */
d152 1
a152 1
#define ECONNABORTED	130	/* Software caused connection abort */
d155 1
a155 1
#define ECONNRESET	131	/* Connection reset by peer */
d158 1
a158 1
#define ENOBUFS		132	/* No buffer space available */
d161 1
a161 1
#define EISCONN		133	/* Socket is already connected */
d164 1
a164 1
#define ENOTCONN	134	/* Socket is not connected */
d167 1
a167 1
#define ESHUTDOWN	143	/* Can't send after socket shutdown */
d170 1
a170 1
#define ETOOMANYREFS	144	/* Too many references: can't splice */
d173 1
a173 1
#define ETIMEDOUT	145	/* Connection timed out */
d176 1
a176 1
#define ECONNREFUSED	146	/* Connection refused */
d179 1
a179 1
#define ELOOP		90	/* Symbolic link loop */
d182 1
a182 1
#define EHOSTDOWN	147	/* Host is down */
d185 1
a185 1
#define EHOSTUNREACH	148	/* No route to host */
d188 1
a188 1
#define ENOTEMPTY 	93	/* directory not empty */
d191 1
a191 1
#define EUSERS		94	/* Too many users (for UFS) */
d194 1
a194 1
#define EDQUOT		49	/* Disc quota exceeded */
d197 1
a197 1
#define ESTALE		151	/* Stale NFS file handle */
d200 1
a200 1
#define EREMOTE		66	/* The object is remote */
d203 13
a215 15
/* On cygwin, we just use the supplied malloc and free, rather than
   using tclAlloc.c.  The cygwin32 malloc is derived from the same
   sources as tclAlloc.c, anyhow.  */
#if defined(__CYGWIN__) && !defined(__WIN32__)
#define TclpAlloc(size)		malloc(size)
#define TclpFree(ptr)		free(ptr)
#define TclpRealloc(ptr, size)	realloc(ptr, size)
#else
#define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
					    (DWORD)0, (DWORD)size))
#define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
					    (DWORD)0, (HGLOBAL)ptr))
#define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
					    (DWORD)0, (LPVOID)ptr, (DWORD)size))
#endif
d226 1
a226 1
#endif
d286 4
d296 1
a296 1
# endif
d303 1
a303 1
# endif
d310 1
a310 1
# endif
d317 1
a317 1
# endif
d324 9
a332 1
# endif
d352 1
a352 1
#endif
d355 1
a355 1
#endif
d373 9
d383 2
a384 2
/* On cygwin32, the environment is imported from the cygwin32 DLL.  */
__declspec(dllimport) extern char **__cygwin_environ;
a387 1
extern int chdir (const char*);
d391 6
d425 8
d437 6
a442 1
#define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
d444 1
a444 1
#define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
d446 1
a446 1
#define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
d448 1
d460 3
a476 1
#define TclpLstat		TclpStat
d482 3
d508 1
a508 1
#else
d515 11
d529 2
a530 2
# undef TCL_STORAGE_CLASS
# define TCL_STORAGE_CLASS DLLIMPORT
a532 1

@


1.8
log
@touched all sources to ease next import
@
text
@@


1.8.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclWinPort.h,v 1.34 2002/09/27 00:50:10 hobbs Exp $
d24 11
a34 7
#   define _UNICODE
#   define UNICODE
#   define __TCHAR_DEFINED
    typedef float *_TCHAR;
#   define _TCHAR_DEFINED
    typedef float *TCHAR;
#endif /* CHECK_UNICODE_CALLS */
d63 2
a64 6
#   ifdef __BORLANDC__
#	include <utime.h>
#   else
#	include <sys/utime.h>
#   endif /* __BORLANDC__ */
#endif /* __MWERKS__ */
d68 3
d72 1
a75 2
#include <winsock2.h>

d77 3
a79 3
#   undef TCL_STORAGE_CLASS
#   define TCL_STORAGE_CLASS DLLEXPORT
#endif /* BUILD_tcl */
d86 1
a86 1
#   define EINPROGRESS	WSAEINPROGRESS
d94 1
a94 1
#   define ENOTSUP	-1030507
d103 1
a103 1
#   define EWOULDBLOCK	EAGAIN
d106 1
a106 1
#   define EALREADY	149	/* operation already in progress */
d109 1
a109 1
#   define ENOTSOCK	95	/* Socket operation on non-socket */
d112 1
a112 1
#   define EDESTADDRREQ	96	/* Destination address required */
d115 1
a115 1
#   define EMSGSIZE	97	/* Message too long */
d118 1
a118 1
#   define EPROTOTYPE	98	/* Protocol wrong type for socket */
d121 1
a121 1
#   define ENOPROTOOPT	99	/* Protocol not available */
d124 1
a124 1
#   define EPROTONOSUPPORT 120	/* Protocol not supported */
d127 1
a127 1
#   define ESOCKTNOSUPPORT 121	/* Socket type not supported */
d130 1
a130 1
#   define EOPNOTSUPP	122	/* Operation not supported on socket */
d133 1
a133 1
#   define EPFNOSUPPORT	123	/* Protocol family not supported */
d136 1
a136 1
#   define EAFNOSUPPORT	124	/* Address family not supported */
d139 1
a139 1
#   define EADDRINUSE	125	/* Address already in use */
d142 1
a142 1
#   define EADDRNOTAVAIL 126	/* Can't assign requested address */
d145 1
a145 1
#   define ENETDOWN	127	/* Network is down */
d148 1
a148 1
#   define ENETUNREACH	128	/* Network is unreachable */
d151 1
a151 1
#   define ENETRESET	129	/* Network dropped connection on reset */
d154 1
a154 1
#   define ECONNABORTED	130	/* Software caused connection abort */
d157 1
a157 1
#   define ECONNRESET	131	/* Connection reset by peer */
d160 1
a160 1
#   define ENOBUFS	132	/* No buffer space available */
d163 1
a163 1
#   define EISCONN	133	/* Socket is already connected */
d166 1
a166 1
#   define ENOTCONN	134	/* Socket is not connected */
d169 1
a169 1
#   define ESHUTDOWN	143	/* Can't send after socket shutdown */
d172 1
a172 1
#   define ETOOMANYREFS	144	/* Too many references: can't splice */
d175 1
a175 1
#   define ETIMEDOUT	145	/* Connection timed out */
d178 1
a178 1
#   define ECONNREFUSED	146	/* Connection refused */
d181 1
a181 1
#   define ELOOP	90	/* Symbolic link loop */
d184 1
a184 1
#   define EHOSTDOWN	147	/* Host is down */
d187 1
a187 1
#   define EHOSTUNREACH	148	/* No route to host */
d190 1
a190 1
#   define ENOTEMPTY 	93	/* directory not empty */
d193 1
a193 1
#   define EUSERS	94	/* Too many users (for UFS) */
d196 1
a196 1
#   define EDQUOT	69	/* Disc quota exceeded */
d199 1
a199 1
#   define ESTALE	151	/* Stale NFS file handle */
d202 1
a202 1
#   define EREMOTE	66	/* The object is remote */
d205 15
a219 13
/*
 * It is very hard to determine how Windows reacts to attempting to
 * set a file pointer outside the input datatype's representable
 * region.  So we fake the error code ourselves.
 */

#ifndef EOVERFLOW
#   ifdef EFBIG
#      define EOVERFLOW	EFBIG	/* The object couldn't fit in the datatype */
#   else /* !EFBIG */
#      define EOVERFLOW	EINVAL	/* Better than nothing! */
#   endif /* EFBIG */
#endif /* !EOVERFLOW */
d230 1
a230 1
#endif /* TCL_UNION_WAIT */
a289 4
#ifndef S_IFLNK
#define S_IFLNK        0120000  /* Symbolic Link */
#endif

d296 1
a296 1
#endif /* !S_ISREG */
d303 1
a303 1
#endif /* !S_ISDIR */
d310 1
a310 1
#endif /* !S_ISCHR */
d317 1
a317 1
#endif /* !S_ISBLK */
d324 1
a324 9
#endif /* !S_ISFIFO */
#ifndef S_ISLNK
#   ifdef S_IFLNK
#       define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
#   else
#       define S_ISLNK(m) 0
#   endif
#endif /* !S_ISLNK */

d344 1
a344 1
#endif /* !TCL_PID_T */
d347 1
a347 1
#endif /* !TCL_UID_T */
a364 9
/*
 * Borland's timezone and environ functions.
 */

#ifdef  __BORLANDC__
#   define timezone _timezone
#   define environ  _environ
#endif /* __BORLANDC__ */

d366 2
a367 2
/* On Cygwin, the environment is imported from the Cygwin DLL. */
     DLLIMPORT extern char **__cygwin_environ;
d371 1
a374 6
 * There is no platform-specific panic routine for Windows in the Tcl internals.
 */

#define TclpPanic ((Tcl_PanicProc *) NULL)

/*
a402 8
 * Msvcrt's putenv() copies the string rather than takes ownership of it.
 */

#if defined(_MSC_VER) || defined(__MINGW32__)
#   define HAVE_PUTENV_THAT_COPIES 1
#endif

/*
d407 1
a407 6
#ifdef __CYGWIN__
#   define TclpSysAlloc(size, isBin)	malloc((size))
#   define TclpSysFree(ptr)		free((ptr))
#   define TclpSysRealloc(ptr, size)	realloc((ptr), (size))
#else
#   define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
d409 1
a409 1
#   define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
d411 1
a411 1
#   define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
a412 1
#endif
a423 3
/* This type is not defined in the Windows headers */
#define socklen_t       int

d438 1
a443 3
EXTERN HANDLE	    TclWinSerialReopen _ANSI_ARGS_(( HANDLE handle,
			CONST TCHAR *name, DWORD access));

d467 1
a467 1
#else /* !TCL_THREADS */
a473 11
#ifdef TCL_WIDE_INT_TYPE
EXTERN Tcl_WideInt	strtoll _ANSI_ARGS_((CONST char *string,
					     char **endPtr, int base));
EXTERN Tcl_WideUInt	strtoull _ANSI_ARGS_((CONST char *string,
					      char **endPtr, int base));
#endif /* TCL_WIDE_INT_TYPE */

#ifndef INVALID_SET_FILE_POINTER
#define INVALID_SET_FILE_POINTER 0xFFFFFFFF
#endif /* INVALID_SET_FILE_POINTER */

d477 2
a478 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
d481 1
@


1.8.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclWinPort.h,v 1.33 2002/08/28 22:48:48 davygrvy Exp $
d24 11
a34 7
#   define _UNICODE
#   define UNICODE
#   define __TCHAR_DEFINED
    typedef float *_TCHAR;
#   define _TCHAR_DEFINED
    typedef float *TCHAR;
#endif /* CHECK_UNICODE_CALLS */
d63 2
a64 6
#   ifdef __BORLANDC__
#	include <utime.h>
#   else
#	include <sys/utime.h>
#   endif /* __BORLANDC__ */
#endif /* __MWERKS__ */
d68 3
d72 1
a75 2
#include <winsock2.h>

d77 3
a79 3
#   undef TCL_STORAGE_CLASS
#   define TCL_STORAGE_CLASS DLLEXPORT
#endif /* BUILD_tcl */
d86 1
a86 1
#   define EINPROGRESS	WSAEINPROGRESS
d94 1
a94 1
#   define ENOTSUP	-1030507
d103 1
a103 1
#   define EWOULDBLOCK	EAGAIN
d106 1
a106 1
#   define EALREADY	149	/* operation already in progress */
d109 1
a109 1
#   define ENOTSOCK	95	/* Socket operation on non-socket */
d112 1
a112 1
#   define EDESTADDRREQ	96	/* Destination address required */
d115 1
a115 1
#   define EMSGSIZE	97	/* Message too long */
d118 1
a118 1
#   define EPROTOTYPE	98	/* Protocol wrong type for socket */
d121 1
a121 1
#   define ENOPROTOOPT	99	/* Protocol not available */
d124 1
a124 1
#   define EPROTONOSUPPORT 120	/* Protocol not supported */
d127 1
a127 1
#   define ESOCKTNOSUPPORT 121	/* Socket type not supported */
d130 1
a130 1
#   define EOPNOTSUPP	122	/* Operation not supported on socket */
d133 1
a133 1
#   define EPFNOSUPPORT	123	/* Protocol family not supported */
d136 1
a136 1
#   define EAFNOSUPPORT	124	/* Address family not supported */
d139 1
a139 1
#   define EADDRINUSE	125	/* Address already in use */
d142 1
a142 1
#   define EADDRNOTAVAIL 126	/* Can't assign requested address */
d145 1
a145 1
#   define ENETDOWN	127	/* Network is down */
d148 1
a148 1
#   define ENETUNREACH	128	/* Network is unreachable */
d151 1
a151 1
#   define ENETRESET	129	/* Network dropped connection on reset */
d154 1
a154 1
#   define ECONNABORTED	130	/* Software caused connection abort */
d157 1
a157 1
#   define ECONNRESET	131	/* Connection reset by peer */
d160 1
a160 1
#   define ENOBUFS	132	/* No buffer space available */
d163 1
a163 1
#   define EISCONN	133	/* Socket is already connected */
d166 1
a166 1
#   define ENOTCONN	134	/* Socket is not connected */
d169 1
a169 1
#   define ESHUTDOWN	143	/* Can't send after socket shutdown */
d172 1
a172 1
#   define ETOOMANYREFS	144	/* Too many references: can't splice */
d175 1
a175 1
#   define ETIMEDOUT	145	/* Connection timed out */
d178 1
a178 1
#   define ECONNREFUSED	146	/* Connection refused */
d181 1
a181 1
#   define ELOOP	90	/* Symbolic link loop */
d184 1
a184 1
#   define EHOSTDOWN	147	/* Host is down */
d187 1
a187 1
#   define EHOSTUNREACH	148	/* No route to host */
d190 1
a190 1
#   define ENOTEMPTY 	93	/* directory not empty */
d193 1
a193 1
#   define EUSERS	94	/* Too many users (for UFS) */
d196 1
a196 1
#   define EDQUOT	69	/* Disc quota exceeded */
d199 1
a199 1
#   define ESTALE	151	/* Stale NFS file handle */
d202 1
a202 1
#   define EREMOTE	66	/* The object is remote */
d205 15
a219 13
/*
 * It is very hard to determine how Windows reacts to attempting to
 * set a file pointer outside the input datatype's representable
 * region.  So we fake the error code ourselves.
 */

#ifndef EOVERFLOW
#   ifdef EFBIG
#      define EOVERFLOW	EFBIG	/* The object couldn't fit in the datatype */
#   else /* !EFBIG */
#      define EOVERFLOW	EINVAL	/* Better than nothing! */
#   endif /* EFBIG */
#endif /* !EOVERFLOW */
d230 1
a230 1
#endif /* TCL_UNION_WAIT */
a289 4
#ifndef S_IFLNK
#define S_IFLNK        0120000  /* Symbolic Link */
#endif

d296 1
a296 1
#endif /* !S_ISREG */
d303 1
a303 1
#endif /* !S_ISDIR */
d310 1
a310 1
#endif /* !S_ISCHR */
d317 1
a317 1
#endif /* !S_ISBLK */
d324 1
a324 9
#endif /* !S_ISFIFO */
#ifndef S_ISLNK
#   ifdef S_IFLNK
#       define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
#   else
#       define S_ISLNK(m) 0
#   endif
#endif /* !S_ISLNK */

d344 1
a344 1
#endif /* !TCL_PID_T */
d347 1
a347 1
#endif /* !TCL_UID_T */
a364 9
/*
 * Borland's timezone and environ functions.
 */

#ifdef  __BORLANDC__
#   define timezone _timezone
#   define environ  _environ
#endif /* __BORLANDC__ */

d366 2
a367 2
/* On cygwin32, the environment is imported from the cygwin32 DLL. */
     DLLIMPORT extern char **__cygwin_environ;
d369 1
d371 1
a374 6
 * There is no platform-specific panic routine for Windows in the Tcl internals.
 */

#define TclpPanic ((Tcl_PanicProc *) NULL)

/*
a402 8
 * Msvcrt's putenv() copies the string rather than takes ownership of it.
 */

#if defined(_MSC_VER) || defined(__MINGW32__)
#   define HAVE_PUTENV_THAT_COPIES 1
#endif

/*
a423 3
/* This type is not defined in the Windows headers */
#define socklen_t       int

d438 1
a443 3
EXTERN HANDLE	    TclWinSerialReopen _ANSI_ARGS_(( HANDLE handle,
			CONST TCHAR *name, DWORD access));

d467 1
a467 1
#else /* !TCL_THREADS */
a473 11
#ifdef TCL_WIDE_INT_TYPE
EXTERN Tcl_WideInt	strtoll _ANSI_ARGS_((CONST char *string,
					     char **endPtr, int base));
EXTERN Tcl_WideUInt	strtoull _ANSI_ARGS_((CONST char *string,
					      char **endPtr, int base));
#endif /* TCL_WIDE_INT_TYPE */

#ifndef INVALID_SET_FILE_POINTER
#define INVALID_SET_FILE_POINTER 0xFFFFFFFF
#endif /* INVALID_SET_FILE_POINTER */

d477 2
a478 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
d481 1
@


1.7
log
@        From Mo Dejong  <supermo@@bayarea.net>:
        * win/tclWin32Dll.c (DllMain): Remove unused os
        variable since VC++ treats warnings as errors
        when compiling with symbols.

        * win/tclWinPort.h: Remove undefine of PASCAL
        symbol added on 2001-09-12. It caused
        crashing problems with sockets.
@
text
@@


1.7.2.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.7.2.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d24 11
a34 7
#   define _UNICODE
#   define UNICODE
#   define __TCHAR_DEFINED
    typedef float *_TCHAR;
#   define _TCHAR_DEFINED
    typedef float *TCHAR;
#endif /* CHECK_UNICODE_CALLS */
d63 2
a64 6
#   ifdef __BORLANDC__
#	include <utime.h>
#   else
#	include <sys/utime.h>
#   endif /* __BORLANDC__ */
#endif /* __MWERKS__ */
d68 3
d72 1
a75 2
#include <winsock2.h>

d77 3
a79 3
#   undef TCL_STORAGE_CLASS
#   define TCL_STORAGE_CLASS DLLEXPORT
#endif /* BUILD_tcl */
d86 1
a86 1
#   define EINPROGRESS	WSAEINPROGRESS
d94 1
a94 1
#   define ENOTSUP	-1030507
d103 1
a103 1
#   define EWOULDBLOCK	EAGAIN
d106 1
a106 1
#   define EALREADY	149	/* operation already in progress */
d109 1
a109 1
#   define ENOTSOCK	95	/* Socket operation on non-socket */
d112 1
a112 1
#   define EDESTADDRREQ	96	/* Destination address required */
d115 1
a115 1
#   define EMSGSIZE	97	/* Message too long */
d118 1
a118 1
#   define EPROTOTYPE	98	/* Protocol wrong type for socket */
d121 1
a121 1
#   define ENOPROTOOPT	99	/* Protocol not available */
d124 1
a124 1
#   define EPROTONOSUPPORT 120	/* Protocol not supported */
d127 1
a127 1
#   define ESOCKTNOSUPPORT 121	/* Socket type not supported */
d130 1
a130 1
#   define EOPNOTSUPP	122	/* Operation not supported on socket */
d133 1
a133 1
#   define EPFNOSUPPORT	123	/* Protocol family not supported */
d136 1
a136 1
#   define EAFNOSUPPORT	124	/* Address family not supported */
d139 1
a139 1
#   define EADDRINUSE	125	/* Address already in use */
d142 1
a142 1
#   define EADDRNOTAVAIL 126	/* Can't assign requested address */
d145 1
a145 1
#   define ENETDOWN	127	/* Network is down */
d148 1
a148 1
#   define ENETUNREACH	128	/* Network is unreachable */
d151 1
a151 1
#   define ENETRESET	129	/* Network dropped connection on reset */
d154 1
a154 1
#   define ECONNABORTED	130	/* Software caused connection abort */
d157 1
a157 1
#   define ECONNRESET	131	/* Connection reset by peer */
d160 1
a160 1
#   define ENOBUFS	132	/* No buffer space available */
d163 1
a163 1
#   define EISCONN	133	/* Socket is already connected */
d166 1
a166 1
#   define ENOTCONN	134	/* Socket is not connected */
d169 1
a169 1
#   define ESHUTDOWN	143	/* Can't send after socket shutdown */
d172 1
a172 1
#   define ETOOMANYREFS	144	/* Too many references: can't splice */
d175 1
a175 1
#   define ETIMEDOUT	145	/* Connection timed out */
d178 1
a178 1
#   define ECONNREFUSED	146	/* Connection refused */
d181 1
a181 1
#   define ELOOP	90	/* Symbolic link loop */
d184 1
a184 1
#   define EHOSTDOWN	147	/* Host is down */
d187 1
a187 1
#   define EHOSTUNREACH	148	/* No route to host */
d190 1
a190 1
#   define ENOTEMPTY 	93	/* directory not empty */
d193 1
a193 1
#   define EUSERS	94	/* Too many users (for UFS) */
d196 1
a196 1
#   define EDQUOT	69	/* Disc quota exceeded */
d199 1
a199 1
#   define ESTALE	151	/* Stale NFS file handle */
d202 1
a202 1
#   define EREMOTE	66	/* The object is remote */
d205 15
a219 13
/*
 * It is very hard to determine how Windows reacts to attempting to
 * set a file pointer outside the input datatype's representable
 * region.  So we fake the error code ourselves.
 */

#ifndef EOVERFLOW
#   ifdef EFBIG
#      define EOVERFLOW	EFBIG	/* The object couldn't fit in the datatype */
#   else /* !EFBIG */
#      define EOVERFLOW	EINVAL	/* Better than nothing! */
#   endif /* EFBIG */
#endif /* !EOVERFLOW */
d230 1
a230 1
#endif /* TCL_UNION_WAIT */
a289 4
#ifndef S_IFLNK
#define S_IFLNK        0120000  /* Symbolic Link */
#endif

d296 1
a296 1
#endif /* !S_ISREG */
d303 1
a303 1
#endif /* !S_ISDIR */
d310 1
a310 1
#endif /* !S_ISCHR */
d317 1
a317 1
#endif /* !S_ISBLK */
d324 1
a324 9
#endif /* !S_ISFIFO */
#ifndef S_ISLNK
#   ifdef S_IFLNK
#       define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
#   else
#       define S_ISLNK(m) 0
#   endif
#endif /* !S_ISLNK */

d344 1
a344 1
#endif /* !TCL_PID_T */
d347 1
a347 1
#endif /* !TCL_UID_T */
a364 9
/*
 * Borland's timezone and environ functions.
 */

#ifdef  __BORLANDC__
#   define timezone _timezone
#   define environ  _environ
#endif /* __BORLANDC__ */

d366 2
a367 2
/* On Cygwin, the environment is imported from the Cygwin DLL. */
     DLLIMPORT extern char **__cygwin_environ;
d371 1
a374 6
 * There is no platform-specific panic routine for Windows in the Tcl internals.
 */

#define TclpPanic ((Tcl_PanicProc *) NULL)

/*
a402 8
 * Msvcrt's putenv() copies the string rather than takes ownership of it.
 */

#if defined(_MSC_VER) || defined(__MINGW32__)
#   define HAVE_PUTENV_THAT_COPIES 1
#endif

/*
d407 1
a407 6
#ifdef __CYGWIN__
#   define TclpSysAlloc(size, isBin)	malloc((size))
#   define TclpSysFree(ptr)		free((ptr))
#   define TclpSysRealloc(ptr, size)	realloc((ptr), (size))
#else
#   define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
d409 1
a409 1
#   define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
d411 1
a411 1
#   define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
a412 1
#endif
a423 3
/* This type is not defined in the Windows headers */
#define socklen_t       int

d438 1
a443 3
EXTERN HANDLE	    TclWinSerialReopen _ANSI_ARGS_(( HANDLE handle,
			CONST TCHAR *name, DWORD access));

d467 1
a467 1
#else /* !TCL_THREADS */
a473 11
#ifdef TCL_WIDE_INT_TYPE
EXTERN Tcl_WideInt	strtoll _ANSI_ARGS_((CONST char *string,
					     char **endPtr, int base));
EXTERN Tcl_WideUInt	strtoull _ANSI_ARGS_((CONST char *string,
					      char **endPtr, int base));
#endif /* TCL_WIDE_INT_TYPE */

#ifndef INVALID_SET_FILE_POINTER
#define INVALID_SET_FILE_POINTER 0xFFFFFFFF
#endif /* INVALID_SET_FILE_POINTER */

d477 2
a478 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
d481 1
@


1.6
log
@	* generic/tclStubInit.tcl: Export tclAlloc functions
	if __MINGW32__ is defined.
	* generic/tclAlloc.c: Revert changes from 2001-09-12.
	* generic/tcl.h: Use tclAlloc function if __WIN32__
	is defined.
	* win/tclWinPort.h: Fixed typer __MWIN32 should read
	__WIN32__.
@
text
@a75 4
#ifdef _MSC_VER
#define PASCAL
#endif

@


1.6.6.1
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d76 4
@


1.5
log
@
	* Makefile.in: Add 'cygwin' subdirectory to 'make all'
	target.
	* configure.in: Configure 'cygwin' and 'win' directory
	for a cygwin host.
	* configure: Regenerated.
	* cygwin/configure.in: Change version number to 8.3.
	* cygwin/configure: Regenerated.
	* cygwin/Makefile.am: Added/removed files to be build
	for Tcl8.3.
	* cygwin/Makefile.in: Regenerated.
	* generic/tcl.h: Don't define __WIN32__ for cygwin or
	mwing32 builds.  Don't define USE_TCLALLOC when building
	for cygwin.  Don't use __declspec unless building Tcl or
	tk or build with USE_TCL_STUBS.
	* generic/tclAlloc.c: For cygwin hosts, don't using
	anything in this file unless build with __TCL_UNIX_VARIANT.
	* generic/tclClock.c: Declare 'timezone' as an int, if it
	hasn't been #defined.
	* generic/tclStubInit.c: Don't export any tclAlloc function
	when build for a cygwin host.
	* win/configure.in: Set DL_LIBS and MATH_LIBS.  Create
	unix/tclConfig.sh.
	* win/configure: Regenerated.
	* win/tclWinPort.h: Added missing #endif.
	* win/tclWinFile.c (TclpChdir): Don't invert change
	directory results on cygwin.
@
text
@d212 1
a212 1
#if defined(__CYGWIN__) && !defined(__MWIN32__)
@


1.4
log
@touched all Tcl files to ease next import.
@
text
@d70 1
d76 4
a105 15
/* On cygwin, we just use the supplied malloc and free, rather than
   using tclAlloc.c.  The cygwin32 malloc is derived from the same
   sources as tclAlloc.c, anyhow.  */
#ifdef __CYGWIN__
#define TclpAlloc(size)		malloc(size)
#define TclpFree(ptr)		free(ptr)
#define TclpRealloc(ptr, size)	realloc(ptr, size)
#else
#define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
					    (DWORD)0, (DWORD)size))
#define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
					    (DWORD)0, (HGLOBAL)ptr))
#define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
					    (DWORD)0, (LPVOID)ptr, (DWORD)size))

d209 16
a385 9

#ifdef __MINGW32__
     extern char *** __imp__environ_dll;
#    define environ (*__imp__environ_dll)
#    define hypot _hypot
#    define exception _exception
#    undef EDEADLOCK
#endif /* __MINGW32__ */

a390 1

@


1.3
log
@Tcl8.3 upgrade merge.
@
text
@@


1.2
log
@Fixes for newer cygwin gccs.
Use modern Cygwin conditional.
@
text
@d8 1
a8 1
 * Copyright (c) 1994-1996 Sun Microsystems, Inc.
d13 1
a13 1
 * RCS: @@(#) $Id: tclWinPort.h,v 1.16 1999/01/26 03:53:44 jingham Exp $
d19 23
a41 5
#define WIN32_LEAN_AND_MEAN
#define __USE_W32_SOCKETS
#include <windows.h>
#undef WIN32_LEAN_AND_MEAN
#include <winsock.h>
a42 1
#include <malloc.h>
d44 1
a45 2
#include <stdlib.h>
#include <string.h>
d47 4
d53 8
d63 3
a66 3
#include <io.h>
#include <fcntl.h>
#include <float.h>
d68 6
a73 3
#ifdef _MSC_VER
#define PASCAL
#endif
d97 2
a98 2
 * The following defines wrap the system memory allocation routines for
 * use by tclAlloc.c.
d115 102
a219 12
 * The default platform eol translation on Windows is TCL_TRANSLATE_CRLF:
 */

#define	TCL_PLATFORM_TRANSLATION	TCL_TRANSLATE_CRLF

/*
 * Declare dynamic loading extension macro.
 */

#define TCL_SHLIB_EXT ".dll"

/*
d267 1
a267 1
 * Define MAXPATHLEN in terms of MAXPATH if available
a269 8
#ifndef MAXPATH
#define MAXPATH MAX_PATH
#endif /* MAXPATH */

#ifndef MAXPATHLEN
#define MAXPATHLEN MAXPATH
#endif /* MAXPATHLEN */

d325 12
a347 6
 * Provide a stub definition for TclGetUserHome().
 */

#define TclGetUserHome(name,bufferPtr) (NULL)

/*
d353 1
a353 1
#ifdef _MSC_VER
d358 13
a370 1
#endif /* _MSC_VER */
d373 5
a377 3
 * When building DLLs using GCC on mingw32, we must import environ via 
 * indirection. This hack will eventually go away once GCC understands 
 * dllimport attribute and mingw32 headers are fixed.
d380 1
d390 8
a397 2
 * The following defines redefine the Windows Socket errors as
 * BSD errors so Tcl_PosixError can do the right thing.
d400 1
a400 102
#ifndef EWOULDBLOCK
#define EWOULDBLOCK             EAGAIN
#endif
#ifndef EALREADY
#define EALREADY	149	/* operation already in progress */
#endif
#ifndef ENOTSOCK
#define ENOTSOCK	95	/* Socket operation on non-socket */
#endif
#ifndef EDESTADDRREQ
#define EDESTADDRREQ	96	/* Destination address required */
#endif
#ifndef EMSGSIZE
#define EMSGSIZE	97	/* Message too long */
#endif
#ifndef EPROTOTYPE
#define EPROTOTYPE	98	/* Protocol wrong type for socket */
#endif
#ifndef ENOPROTOOPT
#define ENOPROTOOPT	99	/* Protocol not available */
#endif
#ifndef EPROTONOSUPPORT
#define EPROTONOSUPPORT	120	/* Protocol not supported */
#endif
#ifndef ESOCKTNOSUPPORT
#define ESOCKTNOSUPPORT	121	/* Socket type not supported */
#endif
#ifndef EOPNOTSUPP
#define EOPNOTSUPP	122	/* Operation not supported on socket */
#endif
#ifndef EPFNOSUPPORT
#define EPFNOSUPPORT	123	/* Protocol family not supported */
#endif
#ifndef EAFNOSUPPORT
#define EAFNOSUPPORT	124	/* Address family not supported */
#endif
#ifndef EADDRINUSE
#define EADDRINUSE	125	/* Address already in use */
#endif
#ifndef EADDRNOTAVAIL
#define EADDRNOTAVAIL	126	/* Can't assign requested address */
#endif
#ifndef ENETDOWN
#define ENETDOWN	127	/* Network is down */
#endif
#ifndef ENETUNREACH
#define ENETUNREACH	128	/* Network is unreachable */
#endif
#ifndef ENETRESET
#define ENETRESET	129	/* Network dropped connection on reset */
#endif
#ifndef ECONNABORTED
#define ECONNABORTED	130	/* Software caused connection abort */
#endif
#ifndef ECONNRESET
#define ECONNRESET	131	/* Connection reset by peer */
#endif
#ifndef ENOBUFS
#define ENOBUFS		132	/* No buffer space available */
#endif
#ifndef EISCONN
#define EISCONN		133	/* Socket is already connected */
#endif
#ifndef ENOTCONN
#define ENOTCONN	134	/* Socket is not connected */
#endif
#ifndef ESHUTDOWN
#define ESHUTDOWN	143	/* Can't send after socket shutdown */
#endif
#ifndef ETOOMANYREFS
#define ETOOMANYREFS	144	/* Too many references: can't splice */
#endif
#ifndef ETIMEDOUT
#define ETIMEDOUT	145	/* Connection timed out */
#endif
#ifndef ECONNREFUSED
#define ECONNREFUSED	146	/* Connection refused */
#endif
#ifndef ELOOP
#define ELOOP		90	/* Symbolic link loop */
#endif
#ifndef EHOSTDOWN
#define EHOSTDOWN	147	/* Host is down */
#endif
#ifndef EHOSTUNREACH
#define EHOSTUNREACH	148	/* No route to host */
#endif
#ifndef ENOTEMPTY
#define ENOTEMPTY 	93	/* directory not empty */
#endif
#ifndef EUSERS
#define EUSERS		94	/* Too many users (for UFS) */
#endif
#ifndef EDQUOT
#define EDQUOT		49	/* Disc quota exceeded */
#endif
#ifndef ESTALE
#define ESTALE		151	/* Stale NFS file handle */
#endif
#ifndef EREMOTE
#define EREMOTE		66	/* The object is remote */
#endif
d409 13
a421 1
    
d434 2
a435 1
 * The following implements the Windows method for exiting the process.
a436 1
#define TclPlatformExit(status) exit(status)
d438 1
d441 2
a442 2
 * The following declarations belong in tclInt.h, but depend on platform
 * specific types (e.g. struct tm).
d445 2
a446 5
EXTERN struct tm *	TclpGetDate _ANSI_ARGS_((const time_t *tp,
			    int useGMT));
EXTERN unsigned long	TclpGetPid _ANSI_ARGS_((Tcl_Pid pid));
EXTERN size_t		TclStrftime _ANSI_ARGS_((char *s, size_t maxsize,
			    const char *format, const struct tm *t));
d449 1
a449 3
 * The following prototypes and defines replace the Windows versions
 * of POSIX function that various compilier vendors didn't implement 
 * well or consistantly.
d452 5
a456 1
#define lstat		TclStat
d458 2
a459 4
EXTERN int		TclpStat _ANSI_ARGS_((CONST char *path, 
			    struct stat *buf));
EXTERN int		TclpAccess _ANSI_ARGS_((CONST char *path, 
			    int mode));
d461 1
a461 1
#define TclpReleaseFile(file)	ckfree((char *) file)
d464 4
a467 1
 * Declarations for Windows specific functions.
d470 14
a483 13
EXTERN void		TclWinConvertError _ANSI_ARGS_((DWORD errCode));
EXTERN void		TclWinConvertWSAError _ANSI_ARGS_((DWORD errCode));
EXTERN struct servent * PASCAL FAR
			TclWinGetServByName _ANSI_ARGS_((const char FAR *nm,
		            const char FAR *proto));
EXTERN int PASCAL FAR	TclWinGetSockOpt _ANSI_ARGS_((SOCKET s, int level,
		            int optname, char FAR * optval, int FAR *optlen));
EXTERN HINSTANCE	TclWinGetTclInstance _ANSI_ARGS_((void));
EXTERN HINSTANCE	TclWinLoadLibrary _ANSI_ARGS_((char *name));
EXTERN u_short PASCAL FAR
			TclWinNToHS _ANSI_ARGS_((u_short ns));
EXTERN int PASCAL FAR	TclWinSetSockOpt _ANSI_ARGS_((SOCKET s, int level,
		            int optname, const char FAR * optval, int optlen));
d489 1
@


1.1
log
@Initial revision
@
text
@d19 6
a32 1
#include <winsock.h>
a39 4
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#undef WIN32_LEAN_AND_MEAN

d70 1
a70 1
/* On cygwin32, we just use the supplied malloc and free, rather than
d73 1
a73 1
#ifdef __CYGWIN32__
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@d8 1
a8 1
 * Copyright (c) 1994-1997 Sun Microsystems, Inc.
d13 1
a13 1
 * RCS: @@(#) $Id: tclWinPort.h,v 1.8.8.8 2001/07/16 23:51:56 mdejong Exp $
d19 2
a20 23
#ifndef _TCLINT
#   include "tclInt.h"
#endif

#ifdef CHECK_UNICODE_CALLS

#define _UNICODE
#define UNICODE

#define __TCHAR_DEFINED
typedef float *_TCHAR;

#define _TCHAR_DEFINED
typedef float *TCHAR;

#endif

/*
 *---------------------------------------------------------------------------
 * The following sets of #includes and #ifdefs are required to get Tcl to
 * compile under the windows compilers.
 *---------------------------------------------------------------------------
 */
a21 1
#include <stdio.h>
d23 1
a23 1

a24 4
#include <fcntl.h>
#include <float.h>
#include <io.h>
#include <malloc.h>
d27 1
a27 8
#include <string.h>

/*
 * Need to block out these includes for building extensions with MetroWerks
 * compiler for Win32.
 */

#ifndef __MWERKS__
a29 3
#include <sys/utime.h>
#endif

d31 3
a33 2

#include <winsock2.h>
d39 4
d65 2
a66 2
 * The following defines redefine the Windows Socket errors as
 * BSD errors so Tcl_PosixError can do the right thing.
d69 14
a82 101
#ifndef EWOULDBLOCK
#define EWOULDBLOCK             EAGAIN
#endif
#ifndef EALREADY
#define EALREADY	149	/* operation already in progress */
#endif
#ifndef ENOTSOCK
#define ENOTSOCK	95	/* Socket operation on non-socket */
#endif
#ifndef EDESTADDRREQ
#define EDESTADDRREQ	96	/* Destination address required */
#endif
#ifndef EMSGSIZE
#define EMSGSIZE	97	/* Message too long */
#endif
#ifndef EPROTOTYPE
#define EPROTOTYPE	98	/* Protocol wrong type for socket */
#endif
#ifndef ENOPROTOOPT
#define ENOPROTOOPT	99	/* Protocol not available */
#endif
#ifndef EPROTONOSUPPORT
#define EPROTONOSUPPORT	120	/* Protocol not supported */
#endif
#ifndef ESOCKTNOSUPPORT
#define ESOCKTNOSUPPORT	121	/* Socket type not supported */
#endif
#ifndef EOPNOTSUPP
#define EOPNOTSUPP	122	/* Operation not supported on socket */
#endif
#ifndef EPFNOSUPPORT
#define EPFNOSUPPORT	123	/* Protocol family not supported */
#endif
#ifndef EAFNOSUPPORT
#define EAFNOSUPPORT	124	/* Address family not supported */
#endif
#ifndef EADDRINUSE
#define EADDRINUSE	125	/* Address already in use */
#endif
#ifndef EADDRNOTAVAIL
#define EADDRNOTAVAIL	126	/* Can't assign requested address */
#endif
#ifndef ENETDOWN
#define ENETDOWN	127	/* Network is down */
#endif
#ifndef ENETUNREACH
#define ENETUNREACH	128	/* Network is unreachable */
#endif
#ifndef ENETRESET
#define ENETRESET	129	/* Network dropped connection on reset */
#endif
#ifndef ECONNABORTED
#define ECONNABORTED	130	/* Software caused connection abort */
#endif
#ifndef ECONNRESET
#define ECONNRESET	131	/* Connection reset by peer */
#endif
#ifndef ENOBUFS
#define ENOBUFS		132	/* No buffer space available */
#endif
#ifndef EISCONN
#define EISCONN		133	/* Socket is already connected */
#endif
#ifndef ENOTCONN
#define ENOTCONN	134	/* Socket is not connected */
#endif
#ifndef ESHUTDOWN
#define ESHUTDOWN	143	/* Can't send after socket shutdown */
#endif
#ifndef ETOOMANYREFS
#define ETOOMANYREFS	144	/* Too many references: can't splice */
#endif
#ifndef ETIMEDOUT
#define ETIMEDOUT	145	/* Connection timed out */
#endif
#ifndef ECONNREFUSED
#define ECONNREFUSED	146	/* Connection refused */
#endif
#ifndef ELOOP
#define ELOOP		90	/* Symbolic link loop */
#endif
#ifndef EHOSTDOWN
#define EHOSTDOWN	147	/* Host is down */
#endif
#ifndef EHOSTUNREACH
#define EHOSTUNREACH	148	/* No route to host */
#endif
#ifndef ENOTEMPTY
#define ENOTEMPTY 	93	/* directory not empty */
#endif
#ifndef EUSERS
#define EUSERS		94	/* Too many users (for UFS) */
#endif
#ifndef EDQUOT
#define EDQUOT		49	/* Disc quota exceeded */
#endif
#ifndef ESTALE
#define ESTALE		151	/* Stale NFS file handle */
#endif
#ifndef EREMOTE
#define EREMOTE		66	/* The object is remote */
d84 12
d145 1
a145 1
 * Define access mode constants if they aren't already defined.
d148 8
a210 12
 * Define MAXPATHLEN in terms of MAXPATH if available
 */

#ifndef MAXPATH
#define MAXPATH MAX_PATH
#endif /* MAXPATH */

#ifndef MAXPATHLEN
#define MAXPATHLEN MAXPATH
#endif /* MAXPATHLEN */

/*
d222 6
d233 1
a233 1
#if defined(_MSC_VER) || defined(__MINGW32__)
d238 1
a238 21
#    if defined(__MINGW32__) && !defined(__MSVCRT__)
#	define timezone _timezone
#    endif
#endif /* _MSC_VER || __MINGW32__ */

#ifdef __CYGWIN__
/* On cygwin32, the environment is imported from the cygwin32 DLL.  */
__declspec(dllimport) extern char **__cygwin_environ;
#    define environ __cygwin_environ
#    define putenv TclCygwinPutenv
#    define timezone _timezone
extern int chdir (const char*);
#endif /* __CYGWIN__ */

/*
 *---------------------------------------------------------------------------
 * The following macros and declarations represent the interface between 
 * generic and windows-specific parts of Tcl.  Some of the macros may 
 * override functions declared in tclInt.h.
 *---------------------------------------------------------------------------
 */
d241 3
a243 1
 * The default platform eol translation on Windows is TCL_TRANSLATE_CRLF:
d246 7
a252 1
#define	TCL_PLATFORM_TRANSLATION	TCL_TRANSLATE_CRLF
d255 2
a256 1
 * Declare dynamic loading extension macro.
d259 102
a360 1
#define TCL_SHLIB_EXT ".dll"
d369 1
a369 13

/*
 * The following defines wrap the system memory allocation routines for
 * use by tclAlloc.c.
 */

#define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
					    (DWORD)0, (DWORD)size))
#define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
					    (DWORD)0, (HGLOBAL)ptr))
#define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
					    (DWORD)0, (LPVOID)ptr, (DWORD)size))

d382 1
a382 2
 * The following macros have trivial definitions, allowing generic code to 
 * address platform-specific issues.
d384 1
a385 1
#define TclpReleaseFile(file)	ckfree((char *) file)
d388 2
a389 2
 * The following macros and declarations wrap the C runtime library 
 * functions.
d392 5
a396 2
#define TclpExit		exit
#define TclpLstat		TclpStat
d399 3
a401 1
 * Declarations for Windows-only functions.
d404 1
a404 5
EXTERN Tcl_Channel  TclWinOpenSerialChannel _ANSI_ARGS_((HANDLE handle,
                        char *channelName, int permissions));
					 
EXTERN Tcl_Channel  TclWinOpenConsoleChannel _ANSI_ARGS_((HANDLE handle,
                        char *channelName, int permissions));
d406 4
a409 2
EXTERN Tcl_Channel  TclWinOpenFileChannel _ANSI_ARGS_((HANDLE handle,
                        char *channelName, int permissions, int appendMode));
d411 1
a411 1
EXTERN TclFile TclWinMakeFile _ANSI_ARGS_((HANDLE handle));
d414 1
a414 4
 * Platform specific mutex definition used by memory allocators.
 * These mutexes are statically allocated and explicitly initialized.
 * Most modules do not use this, but instead use Tcl_Mutex types and
 * Tcl_MutexLock and Tcl_MutexUnlock that are self-initializing.
d417 13
a429 14
#ifdef TCL_THREADS
typedef CRITICAL_SECTION TclpMutex;
EXTERN void	TclpMutexInit _ANSI_ARGS_((TclpMutex *mPtr));
EXTERN void	TclpMutexLock _ANSI_ARGS_((TclpMutex *mPtr));
EXTERN void	TclpMutexUnlock _ANSI_ARGS_((TclpMutex *mPtr));
#else
typedef int TclpMutex;
#define	TclpMutexInit(a)
#define	TclpMutexLock(a)
#define	TclpMutexUnlock(a)
#endif /* TCL_THREADS */

#include "tclPlatDecls.h"
#include "tclIntPlatDecls.h"
a434 1

@


1.1.1.3
log
@import tcl 8.4.0
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclWinPort.h,v 1.33 2002/08/28 22:48:48 davygrvy Exp $
d24 11
a34 7
#   define _UNICODE
#   define UNICODE
#   define __TCHAR_DEFINED
    typedef float *_TCHAR;
#   define _TCHAR_DEFINED
    typedef float *TCHAR;
#endif /* CHECK_UNICODE_CALLS */
d63 2
a64 6
#   ifdef __BORLANDC__
#	include <utime.h>
#   else
#	include <sys/utime.h>
#   endif /* __BORLANDC__ */
#endif /* __MWERKS__ */
d68 2
a73 2
#include <winsock2.h>

d75 3
a77 3
#   undef TCL_STORAGE_CLASS
#   define TCL_STORAGE_CLASS DLLEXPORT
#endif /* BUILD_tcl */
d84 1
a84 1
#   define EINPROGRESS	WSAEINPROGRESS
d92 1
a92 1
#   define ENOTSUP	-1030507
d101 1
a101 1
#   define EWOULDBLOCK	EAGAIN
d104 1
a104 1
#   define EALREADY	149	/* operation already in progress */
d107 1
a107 1
#   define ENOTSOCK	95	/* Socket operation on non-socket */
d110 1
a110 1
#   define EDESTADDRREQ	96	/* Destination address required */
d113 1
a113 1
#   define EMSGSIZE	97	/* Message too long */
d116 1
a116 1
#   define EPROTOTYPE	98	/* Protocol wrong type for socket */
d119 1
a119 1
#   define ENOPROTOOPT	99	/* Protocol not available */
d122 1
a122 1
#   define EPROTONOSUPPORT 120	/* Protocol not supported */
d125 1
a125 1
#   define ESOCKTNOSUPPORT 121	/* Socket type not supported */
d128 1
a128 1
#   define EOPNOTSUPP	122	/* Operation not supported on socket */
d131 1
a131 1
#   define EPFNOSUPPORT	123	/* Protocol family not supported */
d134 1
a134 1
#   define EAFNOSUPPORT	124	/* Address family not supported */
d137 1
a137 1
#   define EADDRINUSE	125	/* Address already in use */
d140 1
a140 1
#   define EADDRNOTAVAIL 126	/* Can't assign requested address */
d143 1
a143 1
#   define ENETDOWN	127	/* Network is down */
d146 1
a146 1
#   define ENETUNREACH	128	/* Network is unreachable */
d149 1
a149 1
#   define ENETRESET	129	/* Network dropped connection on reset */
d152 1
a152 1
#   define ECONNABORTED	130	/* Software caused connection abort */
d155 1
a155 1
#   define ECONNRESET	131	/* Connection reset by peer */
d158 1
a158 1
#   define ENOBUFS	132	/* No buffer space available */
d161 1
a161 1
#   define EISCONN	133	/* Socket is already connected */
d164 1
a164 1
#   define ENOTCONN	134	/* Socket is not connected */
d167 1
a167 1
#   define ESHUTDOWN	143	/* Can't send after socket shutdown */
d170 1
a170 1
#   define ETOOMANYREFS	144	/* Too many references: can't splice */
d173 1
a173 1
#   define ETIMEDOUT	145	/* Connection timed out */
d176 1
a176 1
#   define ECONNREFUSED	146	/* Connection refused */
d179 1
a179 1
#   define ELOOP	90	/* Symbolic link loop */
d182 1
a182 1
#   define EHOSTDOWN	147	/* Host is down */
d185 1
a185 1
#   define EHOSTUNREACH	148	/* No route to host */
d188 1
a188 1
#   define ENOTEMPTY 	93	/* directory not empty */
d191 1
a191 1
#   define EUSERS	94	/* Too many users (for UFS) */
d194 1
a194 1
#   define EDQUOT	69	/* Disc quota exceeded */
d197 1
a197 1
#   define ESTALE	151	/* Stale NFS file handle */
d200 1
a200 1
#   define EREMOTE	66	/* The object is remote */
a203 14
 * It is very hard to determine how Windows reacts to attempting to
 * set a file pointer outside the input datatype's representable
 * region.  So we fake the error code ourselves.
 */

#ifndef EOVERFLOW
#   ifdef EFBIG
#      define EOVERFLOW	EFBIG	/* The object couldn't fit in the datatype */
#   else /* !EFBIG */
#      define EOVERFLOW	EINVAL	/* Better than nothing! */
#   endif /* EFBIG */
#endif /* !EOVERFLOW */

/*
d212 1
a212 1
#endif /* TCL_UNION_WAIT */
a271 4
#ifndef S_IFLNK
#define S_IFLNK        0120000  /* Symbolic Link */
#endif

d278 1
a278 1
#endif /* !S_ISREG */
d285 1
a285 1
#endif /* !S_ISDIR */
d292 1
a292 1
#endif /* !S_ISCHR */
d299 1
a299 1
#endif /* !S_ISBLK */
d306 1
a306 9
#endif /* !S_ISFIFO */
#ifndef S_ISLNK
#   ifdef S_IFLNK
#       define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
#   else
#       define S_ISLNK(m) 0
#   endif
#endif /* !S_ISLNK */

d326 1
a326 1
#endif /* !TCL_PID_T */
d329 1
a329 1
#endif /* !TCL_UID_T */
a346 9
/*
 * Borland's timezone and environ functions.
 */

#ifdef  __BORLANDC__
#   define timezone _timezone
#   define environ  _environ
#endif /* __BORLANDC__ */

d348 2
a349 2
/* On cygwin32, the environment is imported from the cygwin32 DLL. */
     DLLIMPORT extern char **__cygwin_environ;
d351 1
d353 1
a356 6
 * There is no platform-specific panic routine for Windows in the Tcl internals.
 */

#define TclpPanic ((Tcl_PanicProc *) NULL)

/*
a384 8
 * Msvcrt's putenv() copies the string rather than takes ownership of it.
 */

#if defined(_MSC_VER) || defined(__MINGW32__)
#   define HAVE_PUTENV_THAT_COPIES 1
#endif

/*
a405 3
/* This type is not defined in the Windows headers */
#define socklen_t       int

d420 1
a425 3
EXTERN HANDLE	    TclWinSerialReopen _ANSI_ARGS_(( HANDLE handle,
			CONST TCHAR *name, DWORD access));

d449 1
a449 1
#else /* !TCL_THREADS */
a455 11
#ifdef TCL_WIDE_INT_TYPE
EXTERN Tcl_WideInt	strtoll _ANSI_ARGS_((CONST char *string,
					     char **endPtr, int base));
EXTERN Tcl_WideUInt	strtoull _ANSI_ARGS_((CONST char *string,
					      char **endPtr, int base));
#endif /* TCL_WIDE_INT_TYPE */

#ifndef INVALID_SET_FILE_POINTER
#define INVALID_SET_FILE_POINTER 0xFFFFFFFF
#endif /* INVALID_SET_FILE_POINTER */

d459 2
a460 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
d463 1
@


1.1.1.4
log
@import tcl 8.4.1
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclWinPort.h,v 1.34 2002/09/27 00:50:10 hobbs Exp $
d383 1
a383 1
/* On Cygwin, the environment is imported from the Cygwin DLL. */
a385 1
#    define putenv TclCygwinPutenv
d436 1
a436 6
#ifdef __CYGWIN__
#   define TclpSysAlloc(size, isBin)	malloc((size))
#   define TclpSysFree(ptr)		free((ptr))
#   define TclpSysRealloc(ptr, size)	realloc((ptr), (size))
#else
#   define TclpSysAlloc(size, isBin)	((void*)HeapAlloc(GetProcessHeap(), \
d438 1
a438 1
#   define TclpSysFree(ptr)		(HeapFree(GetProcessHeap(), \
d440 1
a440 1
#   define TclpSysRealloc(ptr, size)	((void*)HeapReAlloc(GetProcessHeap(), \
a441 1
#endif
@


