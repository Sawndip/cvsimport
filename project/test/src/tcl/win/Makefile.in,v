head	1.9;
access;
symbols
	sid-snapshot-20180601:1.9
	sid-snapshot-20180501:1.9
	sid-snapshot-20180401:1.9
	sid-snapshot-20180301:1.9
	sid-snapshot-20180201:1.9
	sid-snapshot-20180101:1.9
	sid-snapshot-20171201:1.9
	sid-snapshot-20171101:1.9
	sid-snapshot-20171001:1.9
	sid-snapshot-20170901:1.9
	sid-snapshot-20170801:1.9
	sid-snapshot-20170701:1.9
	sid-snapshot-20170601:1.9
	sid-snapshot-20170501:1.9
	sid-snapshot-20170401:1.9
	sid-snapshot-20170301:1.9
	sid-snapshot-20170201:1.9
	sid-snapshot-20170101:1.9
	sid-snapshot-20161201:1.9
	sid-snapshot-20161101:1.9
	sid-snapshot-20160901:1.9
	sid-snapshot-20160801:1.9
	sid-snapshot-20160701:1.9
	sid-snapshot-20160601:1.9
	sid-snapshot-20160501:1.9
	sid-snapshot-20160401:1.9
	sid-snapshot-20160301:1.9
	sid-snapshot-20160201:1.9
	sid-snapshot-20160101:1.9
	sid-snapshot-20151201:1.9
	sid-snapshot-20151101:1.9
	sid-snapshot-20151001:1.9
	sid-snapshot-20150901:1.9
	sid-snapshot-20150801:1.9
	sid-snapshot-20150701:1.9
	sid-snapshot-20150601:1.9
	sid-snapshot-20150501:1.9
	sid-snapshot-20150401:1.9
	sid-snapshot-20150301:1.9
	sid-snapshot-20150201:1.9
	sid-snapshot-20150101:1.9
	sid-snapshot-20141201:1.9
	sid-snapshot-20141101:1.9
	sid-snapshot-20141001:1.9
	sid-snapshot-20140901:1.9
	sid-snapshot-20140801:1.9
	sid-snapshot-20140701:1.9
	sid-snapshot-20140601:1.9
	sid-snapshot-20140501:1.9
	sid-snapshot-20140401:1.9
	sid-snapshot-20140301:1.9
	sid-snapshot-20140201:1.9
	sid-snapshot-20140101:1.9
	sid-snapshot-20131201:1.9
	sid-snapshot-20131101:1.9
	sid-snapshot-20131001:1.9
	sid-snapshot-20130901:1.9
	sid-snapshot-20130801:1.9
	sid-snapshot-20130701:1.9
	sid-snapshot-20130601:1.9
	insight_7_6-2013-04-10-branchpoint:1.9
	gdb_7_6-branch:1.9.0.58
	sid-snapshot-20130501:1.9
	sid-snapshot-20130401:1.9
	sid-snapshot-20130301:1.9
	sid-snapshot-20130201:1.9
	sid-snapshot-20130101:1.9
	sid-snapshot-20121201:1.9
	sid-snapshot-20121101:1.9
	sid-snapshot-20121001:1.9
	sid-snapshot-20120901:1.9
	gdb_7_5-branch:1.9.0.56
	sid-snapshot-20120801:1.9
	sid-snapshot-20120701:1.9
	sid-snapshot-20120601:1.9
	sid-snapshot-20120501:1.9
	sid-snapshot-20120401:1.9
	gdb_7_4-branch:1.9.0.54
	sid-snapshot-20120301:1.9
	sid-snapshot-20120201:1.9
	sid-snapshot-20120101:1.9
	sid-snapshot-20111201:1.9
	sid-snapshot-20111101:1.9
	sid-snapshot-20111001:1.9
	sid-snapshot-20110901:1.9
	gdb_7_3-branch:1.9.0.52
	sid-snapshot-20110801:1.9
	sid-snapshot-20110701:1.9
	sid-snapshot-20110601:1.9
	sid-snapshot-20110501:1.9
	sid-snapshot-20110401:1.9
	sid-snapshot-20110301:1.9
	sid-snapshot-20110201:1.9
	sid-snapshot-20110101:1.9
	sid-snapshot-20101201:1.9
	sid-snapshot-20101101:1.9
	sid-snapshot-20101001:1.9
	sid-snapshot-20100901:1.9
	sid-snapshot-20100801:1.9
	sid-snapshot-20100701:1.9
	sid-snapshot-20100601:1.9
	sid-snapshot-20100501:1.9
	sid-snapshot-20100401:1.9
	sid-snapshot-20100301:1.9
	gdb_7_1-branch:1.9.0.50
	gdb_7_0-branch:1.9.0.48
	sid-snapshot-20100201:1.9
	sid-snapshot-20100101:1.9
	sid-snapshot-20091201:1.9
	sid-snapshot-20091101:1.9
	sid-snapshot-20091001:1.9
	arc-sim-20090309:1.9
	sid-snapshot-20090901:1.9
	sid-snapshot-20090801:1.9
	sid-snapshot-20090701:1.9
	sid-snapshot-20090601:1.9
	sid-snapshot-20090501:1.9
	kevinb-pre-tcl8_5_7_merge:1.9
	sid-snapshot-20090401:1.9
	arc-insight_6_8-branch:1.9.0.46
	arc-insight_6_8-branchpoint:1.9
	insight_6_8-branch:1.9.0.44
	insight_6_8-branchpoint:1.9
	sid-snapshot-20090301:1.9
	sid-snapshot-20090201:1.9
	sid-snapshot-20090101:1.9
	sid-snapshot-20081201:1.9
	sid-snapshot-20081101:1.9
	sid-snapshot-20081001:1.9
	sid-snapshot-20080901:1.9
	sid-snapshot-20080801:1.9
	sid-snapshot-20080701:1.9
	sid-snapshot-20080601:1.9
	sid-snapshot-20080501:1.9
	sid-snapshot-20080403:1.9
	sid-snapshot-20080401:1.9
	gdb_6_8-branch:1.9.0.42
	sid-snapshot-20080301:1.9
	sid-snapshot-20080201:1.9
	sid-snapshot-20080101:1.9
	sid-snapshot-20071201:1.9
	sid-snapshot-20071101:1.9
	sid-snapshot-20071001:1.9
	insight_6_6-20070208-release:1.9
	gdb_6_6-branch:1.9.0.40
	gdb_6_6-2006-11-15-branchpoint:1.9
	insight_6_5-20061003-release:1.9
	gdb_6_5-branch:1.9.0.38
	gdb_6_5-2006-05-14-branchpoint:1.9
	readline_5_1-import-branch:1.9.0.36
	readline_5_1-import-branchpoint:1.9
	gdb_6_4-branch:1.9.0.34
	gdb_6_4-2005-11-01-branchpoint:1.9
	msnyder-tracepoint-checkpoint-branch:1.9.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.9
	gdb_6_1-2004-04-05-release:1.9
	ezannoni_pie-20040323-branch:1.9.0.30
	ezannoni_pie-20040323-branchpoint:1.9
	cagney_tramp-20040321-mergepoint:1.9
	cagney_tramp-20040309-branch:1.9.0.28
	cagney_tramp-20040309-branchpoint:1.9
	gdb_6_1-branch:1.9.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.9
	drow-cplus-merge-20040208:1.9
	carlton_dictionary-20040126-merge:1.9
	drow-cplus-merge-20040113:1.9
	drow-cplus-merge-20031224:1.9
	drow-cplus-merge-20031220:1.9
	carlton_dictionary-20031215-merge:1.9
	drow-cplus-merge-20031214:1.9
	carlton-dictionary-20031111-merge:1.9
	gdb_6_0-2003-10-04-release:1.9
	carlton_dictionary-20030917-merge:1.9
	ezannoni_pie-20030916-branchpoint:1.9
	ezannoni_pie-20030916-branch:1.9.0.24
	cagney_x86i386-20030821-branch:1.9.0.22
	cagney_x86i386-20030821-branchpoint:1.9
	carlton_dictionary-20030805-merge:1.9
	carlton_dictionary-20030627-merge:1.9
	gdb_6_0-branch:1.9.0.20
	gdb_6_0-2003-06-23-branchpoint:1.9
	cagney_convert-20030606-branch:1.9.0.18
	cagney_convert-20030606-branchpoint:1.9
	cagney_writestrings-20030508-branch:1.9.0.16
	cagney_writestrings-20030508-branchpoint:1.9
	carlton_dictionary-20030523-merge:1.9
	cagney_fileio-20030521-branch:1.9.0.14
	cagney_fileio-20030521-branchpoint:1.9
	carlton_dictionary-20030430-merge:1.9
	carlton_dictionary-20030416-merge:1.9
	cagney_frameaddr-20030409-mergepoint:1.9
	cagney_frameaddr-20030403-branchpoint:1.9
	cagney_frameaddr-20030403-branch:1.9.0.12
	cagney_framebase-20030330-mergepoint:1.9
	cagney_framebase-20030326-branch:1.9.0.10
	cagney_framebase-20030326-branchpoint:1.9
	cagney_lazyid-20030317-branch:1.9.0.8
	cagney_lazyid-20030317-branchpoint:1.9
	offbyone-20030313-branch:1.9.0.6
	offbyone-20030313-branchpoint:1.9
	carlton_dictionary-20030305-merge:1.9
	cagney_offbyone-20030303-branch:1.9.0.4
	cagney_offbyone-20030303-branchpoint:1.9
	carlton_dictionary-20030207-merge:1.9
	interps-20030202-branch:1.9.0.2
	interps-20030202-branchpoint:1.9
	TCL8_4_1:1.1.1.6
	cagney-unwind-20030108-branch:1.8.0.2
	cagney-unwind-20030108-branchpoint:1.8
	carlton_dictionary-20021223-merge:1.8
	gdb_5_3-2002-12-12-release:1.6
	TCL_8_4_1:1.1.1.6
	carlton_dictionary-20021115-merge:1.7
	kseitz_interps-20021105-merge:1.7
	kseitz_interps-20021103-merge:1.7
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.4
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	tcltk840-20020924-branch:1.7.0.2
	tcltk840-20020924-branchpoint:1.7
	TK_8_4_0:1.1.1.4
	TCL_8_4_0:1.1.1.5
	carlton_dictionary-branch:1.6.0.10
	carlton_dictionary-20020920-branchpoint:1.6
	sid-20020905-branchpoint:1.6
	sid-20020905-branch:1.6.0.8
	gdb_5_3-branch:1.6.0.6
	gdb_5_3-2002-09-04-branchpoint:1.6
	kseitz_interps-20020829-merge:1.6
	cagney_sysregs-20020825-branch:1.6.0.4
	cagney_sysregs-20020825-branchpoint:1.6
	readline_4_3-import-branch:1.6.0.2
	readline_4_3-import-branchpoint:1.6
	gdb_5_2_1-2002-07-23-release:1.5
	kseitz_interps-20020528-branch:1.5.0.6
	kseitz_interps-20020528-branchpoint:1.5
	cagney_regbuf-20020515-branch:1.5.0.4
	cagney_regbuf-20020515-branchpoint:1.5
	gdb_5_2-2002-04-29-release:1.5
	gdb_5_2-branch:1.5.0.2
	gdb_5_2-2002-03-03-branchpoint:1.5
	gdb_5_1_1-2002-01-24-release:1.3
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2003.01.21.19.40.21;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.26.19.48.06;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.24.18.37.10;	author kseitz;	state Exp;
branches
	1.7.2.1
	1.7.4.1;
next	1.6;

1.6
date	2002.08.01.01.36.15;	author kseitz;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	2001.09.09.23.56.10;	author irox;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2001.09.09.23.26.06;	author irox;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.10.20.08.27;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.08.03.26.03;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.7.2.1
date	2002.09.27.21.49.14;	author kseitz;	state Exp;
branches;
next	;

1.7.4.1
date	2003.12.14.20.28.52;	author drow;	state Exp;
branches;
next	;

1.6.10.1
date	2002.12.23.19.40.54;	author carlton;	state Exp;
branches;
next	1.6.10.2;

1.6.10.2
date	2003.02.07.19.18.23;	author carlton;	state Exp;
branches;
next	;

1.5.6.1
date	2002.08.09.18.34.40;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.41.00;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.56.42;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.24.20.24.48;	author kseitz;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.09.24.22.01.42;	author kseitz;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2002.11.26.20.01.16;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Updated to tcl 8.4.1
@
text
@#
# This file is a Makefile for Tcl.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@@foo@@" will get replaced in the
# actual Makefile.
#
# RCS: @@(#) $Id: Makefile.in,v 1.67 2002/10/22 18:56:28 hobbs Exp $

VERSION = @@TCL_VERSION@@

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix			= @@prefix@@
exec_prefix		= @@exec_prefix@@
bindir			= @@bindir@@
libdir			= @@libdir@@
includedir		= @@includedir@@
mandir			= @@mandir@@

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT	=

# Directory from which applications will reference the library of Tcl
# scripts (note: you can set the TCL_LIBRARY environment variable at
# run-time to override this value):

# REDHAT LOCAL
#TCL_LIBRARY	= $(prefix)/lib/tcl$(VERSION)
TCL_LIBRARY	= @@datadir@@/tcl$(VERSION)
# END REDHAT LOCAL

# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR		= $(libdir)

# Directory in which to install the program tclsh:
BIN_INSTALL_DIR		= $(INSTALL_ROOT)$(bindir)

# Directory in which to install the .a or .so binary for the Tcl library:
LIB_INSTALL_DIR		= $(INSTALL_ROOT)$(libdir)

# Path name to use when installing library scripts.
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TCL_LIBRARY)

# Directory in which to install the include file tcl.h:
INCLUDE_INSTALL_DIR	= $(INSTALL_ROOT)$(includedir)

# Top-level directory in which to install manual entries:
MAN_INSTALL_DIR		= $(INSTALL_ROOT)$(mandir)

# Directory in which to install manual entry for tclsh:
MAN1_INSTALL_DIR = $(MAN_INSTALL_DIR)/man1

# Directory in which to install manual entries for Tcl's C library
# procedures:
MAN3_INSTALL_DIR = $(MAN_INSTALL_DIR)/man3

# Directory in which to install manual entries for the built-in
# Tcl commands:
MANN_INSTALL_DIR = $(MAN_INSTALL_DIR)/mann

# Libraries built with optimization switches have this additional extension
TCL_DBGX = @@TCL_DBGX@@

# warning flags
CFLAGS_WARNING = @@CFLAGS_WARNING@@

# The default switches for optimization or debugging
CFLAGS_DEBUG    = @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE	= @@CFLAGS_OPTIMIZE@@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS = 		$(CFLAGS_DEBUG)
#CFLAGS = 		$(CFLAGS_OPTIMIZE)
#CFLAGS = 		$(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS = 		@@CFLAGS@@ @@CFLAGS_DEFAULT@@

# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS

# Special compiler flags to use when building man2tcl on Windows.
MAN2TCLFLAGS =		@@MAN2TCLFLAGS@@

SRC_DIR			= @@srcdir@@
ROOT_DIR		= @@srcdir@@/..
GENERIC_DIR		= @@srcdir@@/../generic
WIN_DIR			= @@srcdir@@
COMPAT_DIR		= @@srcdir@@/../compat

# Converts a POSIX path to a Windows native path.
CYGPATH			= @@CYGPATH@@

GENERIC_DIR_NATIVE	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE		= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)')

LIBRARY_DIR   = $(shell echo '$(ROOT_DIR_NATIVE)/library' | sed 's/\\/\//g' )

DLLSUFFIX		= @@DLLSUFFIX@@
LIBSUFFIX		= @@LIBSUFFIX@@
EXESUFFIX		= @@EXESUFFIX@@

TCL_STUB_LIB_FILE	= @@TCL_STUB_LIB_FILE@@
TCL_DLL_FILE		= @@TCL_DLL_FILE@@
TCL_LIB_FILE		= @@TCL_LIB_FILE@@
DDE_DLL_FILE		= tcldde$(DDEVER)${DLLSUFFIX}
DDE_LIB_FILE		= tcldde$(DDEVER)${LIBSUFFIX}
REG_DLL_FILE		= tclreg$(REGVER)${DLLSUFFIX}
REG_LIB_FILE		= tclreg$(REGVER)${LIBSUFFIX}
PIPE_DLL_FILE		= tclpip$(VER)${DLLSUFFIX}

SHARED_LIBRARIES 	= $(TCL_DLL_FILE) $(TCL_STUB_LIB_FILE) \
			  $(DDE_DLL_FILE) $(REG_DLL_FILE) $(PIPE_DLL_FILE)
STATIC_LIBRARIES	= $(TCL_LIB_FILE) $(REG_LIB_FILE) $(DDE_LIB_FILE)

# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

TCLSH			= tclsh$(VER)${EXESUFFIX}
TCLTEST			= tcltest${EXEEXT}
CAT32			= cat32$(EXEEXT)
MAN2TCL			= man2tcl$(EXEEXT)

@@SET_MAKE@@

# Setting the VPATH variable to a list of paths will cause the 
# makefile to look into these paths when resolving .c to .obj
# dependencies.

VPATH = $(GENERIC_DIR):$(WIN_DIR):$(COMPAT_DIR)

AR		= @@AR@@
RANLIB		= @@RANLIB@@
CC		= @@CC@@
RC		= @@RC@@
RES		= @@RES@@
AC_FLAGS	= @@EXTRA_CFLAGS@@ @@DEFS@@
CPPFLAGS	= @@CPPFLAGS@@
LDFLAGS_DEBUG   = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
LDFLAGS		= @@LDFLAGS@@ @@LDFLAGS_DEFAULT@@
LDFLAGS_CONSOLE	= @@LDFLAGS_CONSOLE@@
LDFLAGS_WINDOW	= @@LDFLAGS_WINDOW@@
EXEEXT		= @@EXEEXT@@
OBJEXT		= @@OBJEXT@@
STLIB_LD	= @@STLIB_LD@@
SHLIB_LD	= @@SHLIB_LD@@
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(LIBS)
SHLIB_CFLAGS	= @@SHLIB_CFLAGS@@
SHLIB_SUFFIX	= @@SHLIB_SUFFIX@@
VER		= @@TCL_MAJOR_VERSION@@@@TCL_MINOR_VERSION@@
DOTVER		= @@TCL_MAJOR_VERSION@@.@@TCL_MINOR_VERSION@@
DDEVER		= @@TCL_DDE_MAJOR_VERSION@@@@TCL_DDE_MINOR_VERSION@@
DDEDOTVER	= @@TCL_DDE_MAJOR_VERSION@@.@@TCL_DDE_MINOR_VERSION@@
REGVER		= @@TCL_REG_MAJOR_VERSION@@@@TCL_REG_MINOR_VERSION@@
REGDOTVER	= @@TCL_REG_MAJOR_VERSION@@.@@TCL_REG_MINOR_VERSION@@
LIBS		= @@LIBS@@

RMDIR		= rm -rf
MKDIR		= mkdir -p
SHELL		= @@SHELL@@
RM		= rm -f
COPY		= cp

CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${TCL_SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" ${AC_FLAGS} \
${COMPILE_DEBUG_FLAGS}

CC_OBJNAME = @@CC_OBJNAME@@
CC_EXENAME = @@CC_EXENAME@@

STUB_CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" ${AC_FLAGS} \
${COMPILE_DEBUG_FLAGS}

TCLTEST_OBJS = \
	tclTest.$(OBJEXT) \
	tclTestObj.$(OBJEXT) \
	tclTestProcBodyObj.$(OBJEXT) \
	tclThreadTest.$(OBJEXT) \
	tclWinTest.$(OBJEXT) \
	testMain.$(OBJEXT)

GENERIC_OBJS = \
	regcomp.$(OBJEXT) \
	regexec.$(OBJEXT) \
	regfree.$(OBJEXT) \
	regerror.$(OBJEXT) \
	tclAlloc.$(OBJEXT) \
	tclAsync.$(OBJEXT) \
	tclBasic.$(OBJEXT) \
	tclBinary.$(OBJEXT) \
	tclCkalloc.$(OBJEXT) \
	tclClock.$(OBJEXT) \
	tclCmdAH.$(OBJEXT) \
	tclCmdIL.$(OBJEXT) \
	tclCmdMZ.$(OBJEXT) \
	tclCompCmds.$(OBJEXT) \
	tclCompExpr.$(OBJEXT) \
	tclCompile.$(OBJEXT) \
	tclDate.$(OBJEXT) \
	tclEncoding.$(OBJEXT) \
	tclEnv.$(OBJEXT) \
	tclEvent.$(OBJEXT) \
	tclExecute.$(OBJEXT) \
	tclFCmd.$(OBJEXT) \
	tclFileName.$(OBJEXT) \
	tclGet.$(OBJEXT) \
	tclHash.$(OBJEXT) \
	tclHistory.$(OBJEXT) \
	tclIndexObj.$(OBJEXT) \
	tclInterp.$(OBJEXT) \
	tclIO.$(OBJEXT) \
	tclIOCmd.$(OBJEXT) \
	tclIOGT.$(OBJEXT) \
	tclIOSock.$(OBJEXT) \
	tclIOUtil.$(OBJEXT) \
	tclLink.$(OBJEXT) \
	tclLiteral.$(OBJEXT) \
	tclListObj.$(OBJEXT) \
	tclLoad.$(OBJEXT) \
	tclMain.$(OBJEXT) \
	tclNamesp.$(OBJEXT) \
	tclNotify.$(OBJEXT) \
	tclObj.$(OBJEXT) \
	tclPanic.$(OBJEXT) \
	tclParse.$(OBJEXT) \
	tclParseExpr.$(OBJEXT) \
	tclPipe.$(OBJEXT) \
	tclPkg.$(OBJEXT) \
	tclPosixStr.$(OBJEXT) \
	tclPreserve.$(OBJEXT) \
	tclProc.$(OBJEXT) \
	tclRegexp.$(OBJEXT) \
	tclResolve.$(OBJEXT) \
	tclResult.$(OBJEXT) \
	tclScan.$(OBJEXT) \
	tclStringObj.$(OBJEXT) \
	tclStubInit.$(OBJEXT) \
	tclStubLib.$(OBJEXT) \
	tclThread.$(OBJEXT) \
	tclThreadAlloc.$(OBJEXT) \
	tclThreadJoin.$(OBJEXT) \
	tclTimer.$(OBJEXT) \
	tclUtf.$(OBJEXT) \
	tclUtil.$(OBJEXT) \
	tclVar.$(OBJEXT)

WIN_OBJS = \
	tclWin32Dll.$(OBJEXT) \
	tclWinChan.$(OBJEXT) \
	tclWinConsole.$(OBJEXT) \
	tclWinSerial.$(OBJEXT) \
	tclWinError.$(OBJEXT) \
	tclWinFCmd.$(OBJEXT) \
	tclWinFile.$(OBJEXT) \
	tclWinInit.$(OBJEXT) \
	tclWinLoad.$(OBJEXT) \
	tclWinMtherr.$(OBJEXT) \
	tclWinNotify.$(OBJEXT) \
	tclWinPipe.$(OBJEXT) \
	tclWinSock.$(OBJEXT) \
	tclWinThrd.$(OBJEXT) \
	tclWinTime.$(OBJEXT) 

COMPAT_OBJS = \
	strftime.$(OBJEXT) strtoll.$(OBJEXT) strtoull.$(OBJEXT)

PIPE_OBJS = stub16.$(OBJEXT)

DDE_OBJS = tclWinDde.$(OBJEXT)

REG_OBJS = tclWinReg.$(OBJEXT)

STUB_OBJS = tclStubLib.$(OBJEXT)

TCLSH_OBJS = tclAppInit.$(OBJEXT)

TCL_OBJS = ${GENERIC_OBJS} ${WIN_OBJS} ${COMPAT_OBJS}

TCL_DOCS = "$(ROOT_DIR_NATIVE)"/doc/*.[13n]

all: binaries libraries doc

tcltest: $(TCLTEST)

binaries: @@LIBRARIES@@ $(TCLSH)

libraries:

doc:

winhelp: $(ROOT_DIR)/tools/man2help.tcl $(MAN2TCL)
	TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) "$(ROOT_DIR_NATIVE)"/tools/man2help.tcl tcl "$(VER)" $(TCL_DOCS)
	hcw /c /e tcl.hpj

$(MAN2TCL): $(ROOT_DIR)/tools/man2tcl.c
	$(CC) $(CFLAGS_OPTIMIZE) $(MAN2TCLFLAGS) -o $(MAN2TCL) "$(ROOT_DIR_NATIVE)"/tools/man2tcl.c

$(TCLSH): $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
	$(CC) $(CFLAGS) $(TCLSH_OBJS) $(TCL_LIB_FILE) $(LIBS) \
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)

$(TCLTEST): $(TCL_LIB_FILE) $(TCLTEST_OBJS) $(CAT32) tclsh.$(RES)
	$(CC) $(CFLAGS) $(TCLTEST_OBJS) $(TCL_LIB_FILE) $(LIBS) \
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)

cat32.$(OBJEXT): cat.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

$(CAT32): cat32.$(OBJEXT)
	$(CC) $(CFLAGS) cat32.$(OBJEXT) $(CC_EXENAME) $(LDFLAGS_CONSOLE)

# The following targets are configured by autoconf to generate either
# a shared library or static library

${TCL_STUB_LIB_FILE}: ${STUB_OBJS}
	@@$(RM) ${TCL_STUB_LIB_FILE}
	@@MAKE_LIB@@ ${STUB_OBJS}
	@@POST_MAKE_LIB@@

${TCL_DLL_FILE}: ${TCL_OBJS} tcl.$(RES)
	@@$(RM) ${TCL_DLL_FILE}
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS)

${TCL_LIB_FILE}: ${TCL_OBJS}
	@@$(RM) ${TCL_LIB_FILE}
	@@MAKE_LIB@@ ${TCL_OBJS}
	@@POST_MAKE_LIB@@

${DDE_DLL_FILE}: ${DDE_OBJS} ${TCL_STUB_LIB_FILE}
	@@$(RM) ${DDE_DLL_FILE}
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)

${DDE_LIB_FILE}: ${DDE_OBJS} ${TCL_LIB_FILE}
	@@$(RM) ${DDE_LIB_FILE}
	@@MAKE_LIB@@ ${DDE_OBJS} ${TCL_LIB_FILE}

${REG_DLL_FILE}: ${REG_OBJS} ${TCL_STUB_LIB_FILE}
	@@$(RM) ${REG_DLL_FILE}
	@@MAKE_DLL@@ ${REG_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)

${REG_LIB_FILE}: ${REG_OBJS} ${TCL_LIB_FILE}
	@@$(RM) ${REG_LIB_FILE}
	@@MAKE_LIB@@ ${REG_OBJS} ${TCL_LIB_FILE}

# PIPE_DLL_FILE is actually an executable, don't build it
# like a DLL.

${PIPE_DLL_FILE}: ${PIPE_OBJS}
	@@$(RM) ${PIPE_DLL_FILE}
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS) $(LDFLAGS_CONSOLE)

# Add the object extension to the implicit rules.  By default .obj is not
# automatically added.

.SUFFIXES: .${OBJEXT}
.SUFFIXES: .$(RES)
.SUFFIXES: .rc

# Special case object targets

tclWinInit.${OBJEXT}: tclWinInit.c
	$(CC) -c $(CC_SWITCHES) -DBUILD_tcl $(EXTFLAGS) @@DEPARG@@ $(CC_OBJNAME)

testMain.${OBJEXT}: tclAppInit.c
	$(CC) -c $(CC_SWITCHES) -DTCL_TEST @@DEPARG@@ $(CC_OBJNAME)

tclTest.${OBJEXT}: tclTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclTestObj.${OBJEXT}: tclTestObj.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclWinTest.${OBJEXT}: tclWinTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclAppInit.${OBJEXT} : tclAppInit.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

# The following objects should be built using the stub interfaces

tclWinReg.${OBJEXT} : tclWinReg.c
	$(CC) -c $(CC_SWITCHES) -DUSE_TCL_STUBS @@DEPARG@@ $(CC_OBJNAME)

tclWinDde.${OBJEXT} : tclWinDde.c
	$(CC) -c $(CC_SWITCHES) -DUSE_TCL_STUBS @@DEPARG@@ $(CC_OBJNAME)

# The following objects are part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

tclStubLib.${OBJEXT}: tclStubLib.c
	$(CC) -c $(CC_SWITCHES) -DSTATIC_BUILD @@DEPARG@@ $(CC_OBJNAME)


# Implicit rule for all object files that will end up in the Tcl library

.c.${OBJEXT}:
	$(CC) -c $(CC_SWITCHES) -DBUILD_tcl @@DEPARG@@ $(CC_OBJNAME)

.rc.$(RES):
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@

install: all install-binaries install-libraries install-doc

install-binaries: binaries
	@@for i in "$(LIB_INSTALL_DIR)" "$(BIN_INSTALL_DIR)" ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@for i in dde1.2 reg1.1; \
	    do \
	    if [ ! -d $(LIB_INSTALL_DIR)/$$i ] ; then \
		echo "Making directory $(LIB_INSTALL_DIR)/$$i"; \
		$(MKDIR) $(LIB_INSTALL_DIR)/$$i; \
		else true; \
		fi; \
	    done;
	@@for i in $(TCL_DLL_FILE) $(TCLSH) $(PIPE_DLL_FILE); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i to $(BIN_INSTALL_DIR)/"; \
		$(COPY) $$i "$(BIN_INSTALL_DIR)"; \
	    fi; \
	    done
	@@for i in tclConfig.sh $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i to $(LIB_INSTALL_DIR)/"; \
		$(COPY) $$i "$(LIB_INSTALL_DIR)"; \
	    fi; \
	    done
	@@if [ -f $(DDE_DLL_FILE) ]; then \
	    echo installing $(DDE_DLL_FILE); \
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    $(COPY) $(ROOT_DIR)/library/dde/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/dde1.2; \
	    fi
	@@if [ -f $(DDE_LIB_FILE) ]; then \
	    echo installing $(DDE_LIB_FILE); \
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    fi
	@@if [ -f $(REG_DLL_FILE) ]; then \
	    echo installing $(REG_DLL_FILE); \
	    $(COPY) $(REG_DLL_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
	    $(COPY) $(ROOT_DIR)/library/reg/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/reg1.1; \
	    fi
	@@if [ -f $(REG_LIB_FILE) ]; then \
	    echo installing $(REG_LIB_FILE); \
	    $(COPY) $(REG_LIB_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
	    fi

install-libraries: libraries
	@@for i in $(prefix)/lib $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR); \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		else true; \
		fi; \
	    done;
	@@for i in http1.0 http2.4 opt0.4 encoding msgcat1.3 tcltest2.2; \
	    do \
	    if [ ! -d $(SCRIPT_INSTALL_DIR)/$$i ] ; then \
		echo "Making directory $(SCRIPT_INSTALL_DIR)/$$i"; \
		$(MKDIR) $(SCRIPT_INSTALL_DIR)/$$i; \
		else true; \
		fi; \
	    done;
	@@echo "Installing header files";
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" \
		"$(GENERIC_DIR)/tclPlatDecls.h" ; \
	    do \
	    $(COPY) "$$i" "$(INCLUDE_INSTALL_DIR)"; \
	    done;
	@@echo "Installing library files to $(SCRIPT_INSTALL_DIR)";
	@@for i in $(ROOT_DIR)/library/*.tcl $(ROOT_DIR)/library/tclIndex; \
	    do \
	    $(COPY) "$$i" "$(SCRIPT_INSTALL_DIR)"; \
	    done;
	@@echo "Installing library http1.0 directory";
	@@for j in $(ROOT_DIR)/library/http1.0/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http1.0"; \
	    done;
	@@echo "Installing library http2.4 directory";
	@@for j in $(ROOT_DIR)/library/http/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http2.4"; \
	    done;
	@@echo "Installing library opt0.4 directory";
	@@for j in $(ROOT_DIR)/library/opt/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/opt0.4"; \
	    done;
	@@echo "Installing library msgcat1.3 directory";
	@@for j in $(ROOT_DIR)/library/msgcat/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/msgcat1.3"; \
	    done;
	@@echo "Installing library tcltest2.2 directory";
	@@for j in $(ROOT_DIR)/library/tcltest/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/tcltest2.2"; \
	    done;
	@@echo "Installing encodings";
	@@for i in $(ROOT_DIR)/library/encoding/*.enc ; do \
		$(COPY) "$$i" "$(SCRIPT_INSTALL_DIR)/encoding"; \
	done;

install-doc: doc

# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"

test: binaries $(TCLTEST)
	TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLTEST) "$(ROOT_DIR_NATIVE)/tests/all.tcl" $(TESTFLAGS) \
	| ./$(CAT32)

# Useful target to launch a built tcltest with the proper path,...
runtest: binaries $(TCLTEST)
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLTEST) $(TESTFLAGS) $(SCRIPT)

# This target can be used to run tclsh from the build directory
# via `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) $(SCRIPT)

# This target can be used to run tclsh inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(LIBRARY_DIR)" > gdb.run
	gdb ./tclsh --command=gdb.run
	rm gdb.run

depend:

Makefile: $(SRC_DIR)/Makefile.in
	./config.status

cleanhelp:
	$(RM) *.hlp *.cnt *.GID *.rtf man2tcl.exe

clean: cleanhelp
	$(RM) *.lib *.a *.exp *.dll *.$(RES) *.${OBJEXT} *~ \#* TAGS a.out
	$(RM) $(TCLSH) $(TCLTEST) $(CAT32)
	$(RM) *.pch *.ilk *.pdb

distclean: clean
	$(RM) Makefile config.status config.cache config.log tclConfig.sh \
		tcl.hpj

#
# Regenerate the stubs files.
#

$(GENERIC_DIR)/tclStubInit.c: $(GENERIC_DIR)/tcl.decls \
		$(GENERIC_DIR)/tclInt.decls
	@@echo "Warning: tclStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"

genstubs:
	$(TCL_EXE) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
	    "$(GENERIC_DIR_NATIVE)" \
	    "$(GENERIC_DIR_NATIVE)\tcl.decls" \
            "$(GENERIC_DIR_NATIVE)\tclInt.decls"
@


1.8
log
@touched all sources to ease next import
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.14.8.15 2001/08/06 22:29:25 mdejong Exp $
d39 1
a39 1
# Directory from which applications will reference the libary of Tcl
d42 3
d46 1
a86 10
# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS

# The default switches for optimization or debugging
LDFLAGS_DEBUG    = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@

d94 6
d109 1
a109 1
# This converts a POSIX path to a Windows native path
d112 3
a114 3
GENERIC_DIR_NATIVE 	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(ROOT_DIR)')
a117 1
VENDORPREFIX		= @@VENDORPREFIX@@
a120 1
LIBPREFIX		= @@LIBPREFIX@@
d125 5
a129 10
TCL_DLL_BASE		= @@TCL_DLL_BASE@@
GNU_TCL_LIB_FILE	= @@GNU_TCL_LIB_FILE@@
MSVC_TCL_LIB_FILE	= @@MSVC_TCL_LIB_FILE@@
DDE_DLL_FILE		= @@DDE_DLL_FILE@@
DDE_LIB_FILE		= @@DDE_LIB_FILE@@
DDE_DLL_BASE		= @@DDE_DLL_BASE@@
REG_DLL_FILE		= @@REG_DLL_FILE@@
REG_LIB_FILE		= @@REG_LIB_FILE@@
REG_DLL_BASE		= @@REG_DLL_BASE@@
PIPE_DLL_FILE		= @@PIPE_DLL_FILE@@
d135 7
d147 1
a147 1
SET_MAKE=@@SET_MAKE@@
d162 2
d176 4
d265 2
d290 1
a290 1
	strftime.$(OBJEXT)
d324 1
a324 1
$(TCLSH): $(TCL_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
d326 1
a326 1
        tclsh.$(RES) $(CC_EXENAME) 
d330 1
a330 1
        tclsh.$(RES) $(CC_EXENAME) 
a345 2
${GNU_TCL_LIB_FILE}: ${TCL_DLL_FILE}

d348 1
a348 1
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS) $(TCL_DLL_BASE)
d350 1
a350 1
${MSVC_TCL_LIB_FILE}: ${TCL_OBJS} ${TCL_DLL_FILE}
d357 1
a357 2
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS) \
	$(DDE_DLL_BASE)
d365 1
a365 2
	@@MAKE_DLL@@ ${REG_OBJS} ${TCL_STUB_LIB_FILE} $(SHLIB_LD_LIBS) \
	$(REG_DLL_BASE)
d376 1
a376 1
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS)
d426 1
a426 1
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@
d430 11
a440 5
install-binaries:
	@@$(MKDIR) -p "$(BIN_INSTALL_DIR)"
	@@$(MKDIR) -p "$(LIB_INSTALL_DIR)"
	$(COPY) tclConfig.sh $(LIB_INSTALL_DIR)/tclConfig.sh
	@@for i in dde1.1 reg1.0; \
d451 1
a451 1
		echo "Installing $$i"; \
d455 1
a455 1
	@@for i in $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
d458 1
a458 1
		echo "Installing $$i"; \
d464 3
a466 2
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.1; \
	    $(COPY) $(ROOT_DIR)/library/dde1.1/pkgIndex.tcl $(LIB_INSTALL_DIR)/dde1.1; \
d470 1
a470 1
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.1; \
d474 3
a476 2
	    $(COPY) $(REG_DLL_FILE) $(LIB_INSTALL_DIR)/reg1.0; \
	    $(COPY) $(ROOT_DIR)/library/reg1.0/pkgIndex.tcl $(LIB_INSTALL_DIR)/reg1.0; \
d480 1
a480 1
	    $(COPY) $(REG_LIB_FILE) $(LIB_INSTALL_DIR)/reg1.0; \
d483 1
a483 1
install-libraries:
d493 1
a493 1
	@@for i in http1.0 http2.3 opt0.4 encoding msgcat1.0 tcltest1.0; \
d502 2
a503 1
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" ; \
d512 12
a523 1
	@@for i in http2.3 http1.0 opt0.4 msgcat1.0 tcltest1.0; \
d525 1
a525 5
	    echo "Installing library $$i directory"; \
	    for j in $(ROOT_DIR)/library/$$i/*.tcl; \
		do \
		$(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/$$i"; \
		done; \
d527 11
a537 1
	@@echo "Installing encodings"
d542 5
a546 1
install-doc:
d554 1
a554 1
runtest: tcltest
d556 13
a568 1
	    ./tcltest
d572 2
a573 5
Makefile: $(SRC_DIR)/Makefile.in config.status
	$(SHELL) config.status

config.status: $(WIN_DIR)/configure
	$(SHELL) config.status --recheck
a590 2
# FIXME: We can't depend on TCLSH here since it is not yet built!

d593 3
a595 5
	@@TCL_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	$(TCLSH) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
	    "$(GENERIC_DIR_NATIVE)" \
	    "$(GENERIC_DIR_NATIVE)\tcl.decls" \
            "$(GENERIC_DIR_NATIVE)\tclInt.decls"
d598 1
a598 2
	@@TCL_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	$(TCLSH) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
@


1.7
log
@touched all sources to ease next import
@
text
@@


1.7.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.67 2002/10/22 18:56:28 hobbs Exp $
d39 1
a39 1
# Directory from which applications will reference the library of Tcl
a41 3

# REDHAT LOCAL
#TCL_LIBRARY	= $(prefix)/lib/tcl$(VERSION)
a42 1
# END REDHAT LOCAL
d83 10
a99 6
# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS

d109 1
a109 1
# Converts a POSIX path to a Windows native path.
d112 3
a114 3
GENERIC_DIR_NATIVE	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE		= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)')
d118 1
d122 1
d127 10
a136 5
DDE_DLL_FILE		= tcldde$(DDEVER)${DLLSUFFIX}
DDE_LIB_FILE		= tcldde$(DDEVER)${LIBSUFFIX}
REG_DLL_FILE		= tclreg$(REGVER)${DLLSUFFIX}
REG_LIB_FILE		= tclreg$(REGVER)${LIBSUFFIX}
PIPE_DLL_FILE		= tclpip$(VER)${DLLSUFFIX}
a141 7
# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

d147 1
a147 1
@@SET_MAKE@@
a161 2
LDFLAGS_DEBUG   = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
a173 4
DDEVER		= @@TCL_DDE_MAJOR_VERSION@@@@TCL_DDE_MINOR_VERSION@@
DDEDOTVER	= @@TCL_DDE_MAJOR_VERSION@@.@@TCL_DDE_MINOR_VERSION@@
REGVER		= @@TCL_REG_MAJOR_VERSION@@@@TCL_REG_MINOR_VERSION@@
REGDOTVER	= @@TCL_REG_MAJOR_VERSION@@.@@TCL_REG_MINOR_VERSION@@
a258 2
	tclThreadAlloc.$(OBJEXT) \
	tclThreadJoin.$(OBJEXT) \
d282 1
a282 1
	strftime.$(OBJEXT) strtoll.$(OBJEXT) strtoull.$(OBJEXT)
d316 1
a316 1
$(TCLSH): $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
d318 1
a318 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d322 1
a322 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d338 2
d342 1
a342 1
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS)
d344 1
a344 1
${TCL_LIB_FILE}: ${TCL_OBJS}
d351 2
a352 1
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d360 2
a361 1
	@@MAKE_DLL@@ ${REG_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d372 1
a372 1
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS) $(LDFLAGS_CONSOLE)
d422 1
a422 1
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@
d426 5
a430 11
install-binaries: binaries
	@@for i in "$(LIB_INSTALL_DIR)" "$(BIN_INSTALL_DIR)" ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@for i in dde1.2 reg1.1; \
d441 1
a441 1
		echo "Installing $$i to $(BIN_INSTALL_DIR)/"; \
d445 1
a445 1
	@@for i in tclConfig.sh $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
d448 1
a448 1
		echo "Installing $$i to $(LIB_INSTALL_DIR)/"; \
d454 2
a455 3
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    $(COPY) $(ROOT_DIR)/library/dde/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/dde1.2; \
d459 1
a459 1
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
d463 2
a464 3
	    $(COPY) $(REG_DLL_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
	    $(COPY) $(ROOT_DIR)/library/reg/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/reg1.1; \
d468 1
a468 1
	    $(COPY) $(REG_LIB_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
d471 1
a471 1
install-libraries: libraries
d481 1
a481 1
	@@for i in http1.0 http2.4 opt0.4 encoding msgcat1.3 tcltest2.2; \
d490 1
a490 2
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" \
		"$(GENERIC_DIR)/tclPlatDecls.h" ; \
d499 1
a499 12
	@@echo "Installing library http1.0 directory";
	@@for j in $(ROOT_DIR)/library/http1.0/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http1.0"; \
	    done;
	@@echo "Installing library http2.4 directory";
	@@for j in $(ROOT_DIR)/library/http/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http2.4"; \
	    done;
	@@echo "Installing library opt0.4 directory";
	@@for j in $(ROOT_DIR)/library/opt/*.tcl; \
d501 5
a505 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/opt0.4"; \
d507 1
a507 11
	@@echo "Installing library msgcat1.3 directory";
	@@for j in $(ROOT_DIR)/library/msgcat/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/msgcat1.3"; \
	    done;
	@@echo "Installing library tcltest2.2 directory";
	@@for j in $(ROOT_DIR)/library/tcltest/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/tcltest2.2"; \
	    done;
	@@echo "Installing encodings";
d512 1
a512 5
install-doc: doc

# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"
d520 1
a520 1
runtest: binaries $(TCLTEST)
d522 1
a522 1
	./$(TCLTEST) $(TESTFLAGS) $(SCRIPT)
d524 1
a524 5
# This target can be used to run tclsh from the build directory
# via `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) $(SCRIPT)
d526 2
a527 5
# This target can be used to run tclsh inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(LIBRARY_DIR)" > gdb.run
	gdb ./tclsh --command=gdb.run
	rm gdb.run
d529 2
a530 4
depend:

Makefile: $(SRC_DIR)/Makefile.in
	./config.status
d548 2
d552 5
a556 3
	@@echo "Warning: tclStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"
d559 2
a560 1
	$(TCL_EXE) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
@


1.7.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.65 2002/08/22 00:52:33 andreas_kupries Exp $
d39 1
a39 1
# Directory from which applications will reference the library of Tcl
d42 1
a42 1
TCL_LIBRARY	= $(prefix)/lib/tcl$(VERSION)
d83 10
d98 1
a98 7
CFLAGS = 		@@CFLAGS@@ @@CFLAGS_DEFAULT@@ @@MEM_DEBUG_FLAGS@@

# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS
d109 1
a109 1
# Converts a POSIX path to a Windows native path.
d112 3
a114 3
GENERIC_DIR_NATIVE	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE		= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)')
d118 1
d122 1
d127 10
a136 5
DDE_DLL_FILE		= tcldde$(DDEVER)${DLLSUFFIX}
DDE_LIB_FILE		= tcldde$(DDEVER)${LIBSUFFIX}
REG_DLL_FILE		= tclreg$(REGVER)${DLLSUFFIX}
REG_LIB_FILE		= tclreg$(REGVER)${LIBSUFFIX}
PIPE_DLL_FILE		= tclpip$(VER)${DLLSUFFIX}
a141 7
# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

d147 1
a147 1
@@SET_MAKE@@
a161 2
LDFLAGS_DEBUG   = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
a173 4
DDEVER		= @@TCL_DDE_MAJOR_VERSION@@@@TCL_DDE_MINOR_VERSION@@
DDEDOTVER	= @@TCL_DDE_MAJOR_VERSION@@.@@TCL_DDE_MINOR_VERSION@@
REGVER		= @@TCL_REG_MAJOR_VERSION@@@@TCL_REG_MINOR_VERSION@@
REGDOTVER	= @@TCL_REG_MAJOR_VERSION@@.@@TCL_REG_MINOR_VERSION@@
a258 2
	tclThreadAlloc.$(OBJEXT) \
	tclThreadJoin.$(OBJEXT) \
d282 1
a282 1
	strftime.$(OBJEXT) strtoll.$(OBJEXT) strtoull.$(OBJEXT)
d316 1
a316 1
$(TCLSH): $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
d318 1
a318 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d322 1
a322 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d338 2
d342 1
a342 1
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS)
d344 1
a344 1
${TCL_LIB_FILE}: ${TCL_OBJS}
d351 2
a352 1
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d360 2
a361 1
	@@MAKE_DLL@@ ${REG_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d372 1
a372 1
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS) $(LDFLAGS_CONSOLE)
d422 1
a422 1
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@
d426 5
a430 11
install-binaries: binaries
	@@for i in "$(LIB_INSTALL_DIR)" "$(BIN_INSTALL_DIR)" ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@for i in dde1.2 reg1.0; \
d441 1
a441 1
		echo "Installing $$i to $(BIN_INSTALL_DIR)/"; \
d445 1
a445 1
	@@for i in tclConfig.sh $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
d448 1
a448 1
		echo "Installing $$i to $(LIB_INSTALL_DIR)/"; \
d454 2
a455 3
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    $(COPY) $(ROOT_DIR)/library/dde/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/dde1.2; \
d459 1
a459 1
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
d464 1
a464 2
	    $(COPY) $(ROOT_DIR)/library/reg/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/reg1.0; \
d471 1
a471 1
install-libraries: libraries
d481 1
a481 1
	@@for i in http1.0 http2.4 opt0.4 encoding msgcat1.3 tcltest2.2; \
d490 1
a490 2
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" \
		"$(GENERIC_DIR)/tclPlatDecls.h" ; \
d499 1
a499 2
	@@echo "Installing library http1.0 directory";
	@@for j in $(ROOT_DIR)/library/http1.0/*.tcl; \
d501 5
a505 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http1.0"; \
d507 1
a507 21
	@@echo "Installing library http2.4 directory";
	@@for j in $(ROOT_DIR)/library/http/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http2.4"; \
	    done;
	@@echo "Installing library opt0.4 directory";
	@@for j in $(ROOT_DIR)/library/opt/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/opt0.4"; \
	    done;
	@@echo "Installing library msgcat1.3 directory";
	@@for j in $(ROOT_DIR)/library/msgcat/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/msgcat1.3"; \
	    done;
	@@echo "Installing library tcltest2.2 directory";
	@@for j in $(ROOT_DIR)/library/tcltest/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/tcltest2.2"; \
	    done;
	@@echo "Installing encodings";
d512 1
a512 5
install-doc: doc

# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"
d520 1
a520 1
runtest: binaries $(TCLTEST)
d522 1
a522 1
	./$(TCLTEST) $(TESTFLAGS) $(SCRIPT)
d524 1
a524 11
# This target can be used to run tclsh from the build directory
# via `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) $(SCRIPT)

# This target can be used to run tclsh inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(LIBRARY_DIR)" > gdb.run
	gdb ./tclsh --command=gdb.run
	rm gdb.run
d526 2
a527 1
depend:
d529 2
a530 2
Makefile: $(SRC_DIR)/Makefile.in
	./config.status
d548 2
d552 5
a556 3
	@@echo "Warning: tclStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"
d559 2
a560 1
	$(TCL_EXE) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
@


1.6
log
@        * generic/tclIntDecls.h (TclIntStubs): Do not include definitions
        for tclpAlloc, tclpFree, or pRealloc on cygwin.

        * win/tcl.hpj.in: Copied here from tools/tcl.hpj.in.

        * win/tcl.m4 (SC_CONFIG_CFLAGS): Add TCL_DLL_BASE, DDE_DLL_BASE,
        and REG_DLL_BASE variables to define DLL image bases on cygwin.
        Do not link with "-e _WinMain@@16" on cygwin.
        * win/configure.in (TCL_DLL_BASE): Substitute into makefile.
        (DDE_DLL_BASE): Likewise.
        (REG_DLL_BASE): Likewise.
        * win/configure: Regenerated.
        * win/Makefile.in: Use TCL_DLL_BASE, DDE_DLL_BASE, and
        REG_DLL_BASE to build DLLs.
@
text
@@


1.6.10.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.6.10.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d39 1
a39 1
# Directory from which applications will reference the library of Tcl
a41 3

# REDHAT LOCAL
#TCL_LIBRARY	= $(prefix)/lib/tcl$(VERSION)
a42 1
# END REDHAT LOCAL
d83 10
a99 6
# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS

d109 1
a109 1
# Converts a POSIX path to a Windows native path.
d112 3
a114 3
GENERIC_DIR_NATIVE	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE		= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)')
d118 1
d122 1
d127 10
a136 5
DDE_DLL_FILE		= tcldde$(DDEVER)${DLLSUFFIX}
DDE_LIB_FILE		= tcldde$(DDEVER)${LIBSUFFIX}
REG_DLL_FILE		= tclreg$(REGVER)${DLLSUFFIX}
REG_LIB_FILE		= tclreg$(REGVER)${LIBSUFFIX}
PIPE_DLL_FILE		= tclpip$(VER)${DLLSUFFIX}
a141 7
# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

d147 1
a147 1
@@SET_MAKE@@
a161 2
LDFLAGS_DEBUG   = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
a173 4
DDEVER		= @@TCL_DDE_MAJOR_VERSION@@@@TCL_DDE_MINOR_VERSION@@
DDEDOTVER	= @@TCL_DDE_MAJOR_VERSION@@.@@TCL_DDE_MINOR_VERSION@@
REGVER		= @@TCL_REG_MAJOR_VERSION@@@@TCL_REG_MINOR_VERSION@@
REGDOTVER	= @@TCL_REG_MAJOR_VERSION@@.@@TCL_REG_MINOR_VERSION@@
a258 2
	tclThreadAlloc.$(OBJEXT) \
	tclThreadJoin.$(OBJEXT) \
d282 1
a282 1
	strftime.$(OBJEXT) strtoll.$(OBJEXT) strtoull.$(OBJEXT)
d316 1
a316 1
$(TCLSH): $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
d318 1
a318 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d322 1
a322 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d338 2
d342 1
a342 1
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS)
d344 1
a344 1
${TCL_LIB_FILE}: ${TCL_OBJS}
d351 2
a352 1
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d360 2
a361 1
	@@MAKE_DLL@@ ${REG_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d372 1
a372 1
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS) $(LDFLAGS_CONSOLE)
d422 1
a422 1
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@
d426 5
a430 11
install-binaries: binaries
	@@for i in "$(LIB_INSTALL_DIR)" "$(BIN_INSTALL_DIR)" ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@for i in dde1.2 reg1.1; \
d441 1
a441 1
		echo "Installing $$i to $(BIN_INSTALL_DIR)/"; \
d445 1
a445 1
	@@for i in tclConfig.sh $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
d448 1
a448 1
		echo "Installing $$i to $(LIB_INSTALL_DIR)/"; \
d454 2
a455 3
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    $(COPY) $(ROOT_DIR)/library/dde/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/dde1.2; \
d459 1
a459 1
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
d463 2
a464 3
	    $(COPY) $(REG_DLL_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
	    $(COPY) $(ROOT_DIR)/library/reg/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/reg1.1; \
d468 1
a468 1
	    $(COPY) $(REG_LIB_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
d471 1
a471 1
install-libraries: libraries
d481 1
a481 1
	@@for i in http1.0 http2.4 opt0.4 encoding msgcat1.3 tcltest2.2; \
d490 1
a490 2
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" \
		"$(GENERIC_DIR)/tclPlatDecls.h" ; \
d499 1
a499 12
	@@echo "Installing library http1.0 directory";
	@@for j in $(ROOT_DIR)/library/http1.0/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http1.0"; \
	    done;
	@@echo "Installing library http2.4 directory";
	@@for j in $(ROOT_DIR)/library/http/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http2.4"; \
	    done;
	@@echo "Installing library opt0.4 directory";
	@@for j in $(ROOT_DIR)/library/opt/*.tcl; \
d501 5
a505 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/opt0.4"; \
d507 1
a507 11
	@@echo "Installing library msgcat1.3 directory";
	@@for j in $(ROOT_DIR)/library/msgcat/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/msgcat1.3"; \
	    done;
	@@echo "Installing library tcltest2.2 directory";
	@@for j in $(ROOT_DIR)/library/tcltest/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/tcltest2.2"; \
	    done;
	@@echo "Installing encodings";
d512 1
a512 5
install-doc: doc

# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"
d520 1
a520 1
runtest: binaries $(TCLTEST)
d522 1
a522 1
	./$(TCLTEST) $(TESTFLAGS) $(SCRIPT)
d524 1
a524 5
# This target can be used to run tclsh from the build directory
# via `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) $(SCRIPT)
d526 2
a527 5
# This target can be used to run tclsh inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(LIBRARY_DIR)" > gdb.run
	gdb ./tclsh --command=gdb.run
	rm gdb.run
d529 2
a530 4
depend:

Makefile: $(SRC_DIR)/Makefile.in
	./config.status
d548 2
d552 5
a556 3
	@@echo "Warning: tclStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"
d559 2
a560 1
	$(TCL_EXE) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
@


1.5
log
@touched all Tcl files to ease next import.
@
text
@d127 1
d132 1
d135 1
d342 1
a342 1
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS)
d351 2
a352 1
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d360 2
a361 1
	@@MAKE_DLL@@ ${REG_OBJS} ${TCL_STUB_LIB_FILE} $(SHLIB_LD_LIBS)
@


1.5.6.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@a126 1
TCL_DLL_BASE		= @@TCL_DLL_BASE@@
a130 1
DDE_DLL_BASE		= @@DDE_DLL_BASE@@
a132 1
REG_DLL_BASE		= @@REG_DLL_BASE@@
d339 1
a339 1
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS) $(TCL_DLL_BASE)
d348 1
a348 2
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS) \
	$(DDE_DLL_BASE)
d356 1
a356 2
	@@MAKE_DLL@@ ${REG_OBJS} ${TCL_STUB_LIB_FILE} $(SHLIB_LD_LIBS) \
	$(REG_DLL_BASE)
@


1.4
log
@Tcl8.3 upgrade merge.
@
text
@@


1.3
log
@Fixes for newer cygwin gccs.
Use modern Cygwin conditional.
@
text
@d1 30
a30 39
# Copyright (c) 1995-1996 Sun Microsystems, Inc.

# This file is CYGNUS LOCAL.  It is a copy of makefile.vc from the
# standard tcl distribution, modified to work with cygwin and an
# autoconf configure script.  I have chosen to minimize the number of
# changes, so the comments continue to refer to Visual C++ and the
# like.  This should make it easier to merge in a new version if that
# is necessary.

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@
VPATH = @@srcdir@@:@@srcdir@@/../generic:@@srcdir@@/../compat
srcdir = @@srcdir@@
libdir = @@libdir@@
bindir = @@bindir@@
includedir = @@includedir@@
datadir = @@datadir@@

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

CC = @@CC@@
CFLAGS = @@CFLAGS@@
NM = @@NM@@
AS = @@AS@@
LD = @@LD@@
DLLTOOL = @@DLLTOOL@@
WINDRES = @@WINDRES@@

DLL_LDFLAGS = @@DLL_LDFLAGS@@
DLL_LDLIBS = @@DLL_LDLIBS@@
TCL_ALLOC_OBJ = @@TCL_ALLOC_OBJ@@

OBJEXT=@@OBJEXT@@

# Current Tcl version;  used in various names.

DIRVERSION = @@TCL_VERSION@@
d37 1
a37 1
INSTALL_ROOT =
d39 1
a39 1
# Directory from which applications will reference the library of Tcl
d42 1
a42 4
TCL_LIBRARY =	$(datadir)/tcl$(DIRVERSION)

# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR =	$(INSTALL_ROOT)$(TCL_LIBRARY)
d44 2
a45 2
# Directory in which to install libtcl.so or libtcl.a:
LIB_INSTALL_DIR =	$(INSTALL_ROOT)$(libdir)
d48 1
a48 1
BIN_INSTALL_DIR =	$(INSTALL_ROOT)$(bindir)
d50 2
a51 2
# Directory in which to install the include file tcl.h:
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)$(includedir)
d53 2
a54 6
#
# Visual C++ 2.x and 4.0 makefile
#
# Does not depend on the presence of any environment variables in
# order to compile tcl; all needed information is derived from 
# location of the compiler directories.
d56 2
a57 21
#
# Project directories
#
# ROOT    = top of source tree
#
# TMPDIR  = location where .obj files should be stored during build
#
# TOOLS32 = location of VC++ 32-bit development tools. Note that the
#	    VC++ 2.0 header files are broken, so you need to use the
#	    ones that come with the developer network CD's, or later
#	    versions of VC++.
#
# TOOLS16 = location of VC++ 1.5 16-bit tools, needed to build thunking
#	    library.  This information is optional; if the 16-bit compiler
#	    is not available, then the 16-bit code will not be built.  
#	    Tcl will still run without the 16-bit code, but...
#		A. Under Windows 3.X you will any calls to the exec command
#	           will return an error.
#		B. A 16-bit program to test the behavior of the exec
#		   command under NT and 95 will not be built.
#
d59 2
a60 236
ROOT		= $(srcdir)/..
TMPDIR		= .
TOOLS32		= c:\msdev
TOOLS16		= c:\msvc

# Set this to the appropriate value of /MACHINE: for your platform
MACHINE	= IX86

# Comment the following line to compile with symbols
NODEBUG=1

# uncomment one of the following lines to compile with TCL_MEM_DEBUG, 
# TCL_MEM_DEBUG, or TCL_COMPILE_DEBUG
#DEBUGDEFINES	= -DTCL_MEM_DEBUG
#DEBUGDEFINES	= -DTCL_MEM_DEBUG -DTCL_COMPILE_DEBUG
#DEBUGDEFINES	= -DTCL_MEM_DEBUG -DTCL_COMPILE_STATS
#DEBUGDEFINES	= -DTCL_MEM_DEBUG -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS

######################################################################
# Do not modify below this line
######################################################################

VERSION = 80

TCLLIB		= libtcl$(VERSION).a
TCLDLL		= cygtcl$(VERSION).dll
TCLPLUGINLIB	= libtcl$(VERSION)p.a
TCLPLUGINDLL	= cygtcl$(VERSION)p.dll
TCL16DLL	= # tcl16$(VERSION).dll
TCLSH		= cygtclsh$(VERSION).exe
TCLSHP		= cygtclshp$(VERSION).exe
TCLTEST		= tcltest.exe
DUMPEXTS	= # $(TMPDIR)\dumpexts.exe
TCLPIPEDLL	= cygtclpip$(VERSION).dll
TCLREGDLL	= cygtclreg$(VERSION).dll
CAT16		= # cat16.exe
CAT32		= cat32.exe

ifeq ($(OBJEXT),obj)

TCL_ALLOC_OBJ=$(TMPDIR)/tclAlloc.$(OBJEXT)

endif

TCLSHOBJS = \
	$(TMPDIR)/tclAppInit.$(OBJEXT)

TCLTESTOBJS = \
	$(TMPDIR)/tclTest.$(OBJEXT) \
	$(TMPDIR)/tclTestObj.$(OBJEXT) \
        $(TMPDIR)/tclTestProcBodyObj.$(OBJEXT) \
	$(TMPDIR)/tclWinTest.$(OBJEXT) \
	$(TMPDIR)/testMain.$(OBJEXT)

TCLOBJS = \
	$(TMPDIR)/panic.$(OBJEXT) \
	$(TMPDIR)/regexp.$(OBJEXT) \
	$(TMPDIR)/strftime.$(OBJEXT) \
	$(TCL_ALLOC_OBJ) \
	$(TMPDIR)/tclAsync.o \
	$(TMPDIR)/tclBasic.o \
	$(TMPDIR)/tclBinary.o \
	$(TMPDIR)/tclCkalloc.o \
	$(TMPDIR)/tclClock.o \
	$(TMPDIR)/tclCmdAH.o \
	$(TMPDIR)/tclCmdIL.o \
	$(TMPDIR)/tclCmdMZ.o \
	$(TMPDIR)/tclCompExpr.o \
	$(TMPDIR)/tclCompile.o \
	$(TMPDIR)/tclDate.o \
	$(TMPDIR)/tclEnv.o \
	$(TMPDIR)/tclEvent.o \
	$(TMPDIR)/tclExecute.o \
	$(TMPDIR)/tclFCmd.o \
	$(TMPDIR)/tclFileName.o \
	$(TMPDIR)/tclGet.o \
	$(TMPDIR)/tclHash.o \
	$(TMPDIR)/tclHistory.o \
	$(TMPDIR)/tclIndexObj.o \
	$(TMPDIR)/tclInterp.o \
	$(TMPDIR)/tclIO.o \
	$(TMPDIR)/tclIOCmd.o \
	$(TMPDIR)/tclIOSock.o \
	$(TMPDIR)/tclIOUtil.o \
	$(TMPDIR)/tclLink.o \
	$(TMPDIR)/tclListObj.o \
	$(TMPDIR)/tclLoad.o \
	$(TMPDIR)/tclMain.o \
	$(TMPDIR)/tclNamesp.o \
	$(TMPDIR)/tclNotify.o \
	$(TMPDIR)/tclObj.o \
	$(TMPDIR)/tclParse.o \
	$(TMPDIR)/tclPipe.o \
	$(TMPDIR)/tclPkg.o \
	$(TMPDIR)/tclPosixStr.o \
	$(TMPDIR)/tclPreserve.o \
	$(TMPDIR)/tclProc.o \
        $(TMPDIR)/tclResolve.o \
	$(TMPDIR)/tclStringObj.o \
	$(TMPDIR)/tclTimer.o \
	$(TMPDIR)/tclUtil.o \
	$(TMPDIR)/tclVar.o \
	$(TMPDIR)/tclWin32Dll.o \
	$(TMPDIR)/tclWinChan.o \
	$(TMPDIR)/tclWinError.o \
	$(TMPDIR)/tclWinFCmd.o \
	$(TMPDIR)/tclWinFile.o \
	$(TMPDIR)/tclWinInit.o \
	$(TMPDIR)/tclWinLoad.o \
	$(TMPDIR)/tclWinMtherr.o \
	$(TMPDIR)/tclWinNotify.o \
	$(TMPDIR)/tclWinPipe.o \
	$(TMPDIR)/tclWinSock.o \
	$(TMPDIR)/tclWinTime.o 

cc32		= $(TOOLS32)\bin\cl.exe
link32		= $(TOOLS32)\bin\link.exe
rc32		= $(TOOLS32)\bin\rc.exe
include32	= -I$(TOOLS32)\include

cc16		= $(TOOLS16)\bin\cl.exe
link16		= $(TOOLS16)\bin\link.exe
rc16		= $(TOOLS16)\bin\rc.exe
include16	= -I$(TOOLS16)\include

WINDIR          = $(ROOT)/win
GENERICDIR	= $(ROOT)/generic

TCL_INCLUDES	= -I$(WINDIR) -I$(GENERICDIR)
TCL_DEFINES	= -D__WIN32__ -D__USE_W32_SOCKETS $(DEBUGDEFINES)

TCL_CFLAGS	= $(cdebug) $(cflags) $(cvarsdll) \
			$(TCL_INCLUDES) $(TCL_DEFINES) $(CFLAGS)
CON_CFLAGS	= $(cdebug) $(cflags) $(cvars) -DCONSOLE
DOS_CFLAGS	= $(cdebug) $(cflags) $(include16) -AL 
DLL16_CFLAGS	= $(cdebug) $(cflags) $(include16) -ALw

linkdebug =
conlflags = -Wl,--subsystem,console -mwindows
conlibsdll =

######################################################################
# Link flags
######################################################################

#!IFDEF NODEBUG
#ldebug = /RELEASE
#!ELSE
#ldebug = -debug:full -debugtype:cv
#!ENDIF

# declarations common to all linker options
lcommon = /NODEFAULTLIB /RELEASE /NOLOGO

# declarations for use on Intel i386, i486, and Pentium systems
#!IF "$(MACHINE)" == "IX86"
#DLLENTRY = @@12
#lflags   = $(lcommon) -align:0x1000 /MACHINE:$(MACHINE)
#!ELSE
#lflags   = $(lcommon) /MACHINE:$(MACHINE)
#!ENDIF

conlflags = -Wl,--subsystem,console -mwindows
guilflags = -mwindows
dlllflags =

#!IF "$(MACHINE)" == "PPC"
#libc = libc.lib
#libcdll = crtdll.lib
#!ELSE
#libc = libc.lib oldnames.lib
#libcdll = msvcrt.lib oldnames.lib
#!ENDIF

ifeq ($(OBJEXT),o)

baselibs   = -lkernel32 $(optlibs) -ladvapi32 -luser32
winlibs    = $(baselibs) -lgdi32 -lcomdlg32 -lwinspool

else

baselibs   = kernel32.lib $(optlibs) advapi32.lib user32.lib
winlibs    = $(baselibs) gdi32.lib comdlg32.lib winspool.lib
libcdll    = msvcrt.lib oldnames.lib

endif

guilibs	   = $(libc) $(winlibs)
conlibs	   = $(libc) $(baselibs)
guilibsdll = $(libcdll) $(winlibs)
conlibsdll = $(libcdll) $(baselibs)

######################################################################
# Compile flags
######################################################################

#!IFDEF NODEBUG
#cdebug = -Ox
#!ELSE
#cdebug = -Z7 -Od -WX
#!ENDIF

# declarations common to all compiler options
ccommon = -c -W3 -nologo -YX -Dtry=__try -Dexcept=__except

#!IF "$(MACHINE)" == "IX86"
#cflags = $(ccommon) -D_X86_=1
#!ELSE
#!IF "$(MACHINE)" == "MIPS"
#cflags = $(ccommon) -D_MIPS_=1
#!ELSE
#!IF "$(MACHINE)" == "PPC"
#cflags = $(ccommon) -D_PPC_=1
#!ELSE
#!IF "$(MACHINE)" == "ALPHA"
#cflags = $(ccommon) -D_ALPHA_=1
#!ENDIF
#!ENDIF
#!ENDIF
#!ENDIF

cvars      = -DWIN32 -D_WIN32
cvarsmt    = $(cvars) -D_MT
cvarsdll   = $(cvarsmt) -D_DLL

######################################################################
# Project specific targets
######################################################################

release:    $(TCLSH) dlls $(TCLLIB)
dlls:	    $(TCLDLL) $(TCLPIPEDLL) $(TCLREGDLL)
all:	    $(TCLSH) dlls $(CAT16) $(CAT32) $(TCLLIB)
tcltest:    $(TCLTEST) dlls $(CAT16) $(CAT32)
plugin:	    $(TCLPLUGINDLL) $(TCLSHP)
test:	    $(TCLTEST) dlls $(CAT16) $(CAT32) 
	( echo cd $(ROOT)/tests\; source all ) | $(TCLTEST)
d62 2
a63 1
install: install-binaries install-libraries
d65 361
a425 2
install-binaries: $(TCLDLL) $(TCLLIB) $(TCLSH) $(TCLPIPEDLL)
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) ; \
d427 3
a429 4
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir $$i; \
		chmod 755 $$i; \
d433 32
a464 7
	@@echo "Installing $(TCLLIB)"
	@@$(INSTALL_DATA) $(TCLLIB) $(LIB_INSTALL_DIR)/$(TCLLIB)
	@@chmod 555 $(LIB_INSTALL_DIR)/$(TCLLIB)
	@@echo "Installing tclsh"
	@@$(INSTALL_PROGRAM) $(TCLSH) $(BIN_INSTALL_DIR)/$(TCLSH)
	@@echo "Installing tclConfig.sh"
	@@$(INSTALL_DATA) ../unix/tclConfig.sh $(LIB_INSTALL_DIR)/tclConfig.sh
d467 2
a468 6
	@@echo "Installing DLL"
	@@$(INSTALL_DATA) $(TCLDLL) $(BIN_INSTALL_DIR)/$(TCLDLL)
	@@$(INSTALL_DATA) $(TCLPIPEDLL) $(BIN_INSTALL_DIR)/$(TCLPIPEDLL)
	@@$(INSTALL_DATA) $(TCLREGDLL) $(BIN_INSTALL_DIR)/$(TCLREGDLL)
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR) ; \
d472 1
a472 2
		mkdir $$i; \
		chmod 755 $$i; \
d476 1
a476 1
	@@for i in http2.0 http1.0 opt0.1 ; \
d480 1
a480 2
		mkdir $(SCRIPT_INSTALL_DIR)/$$i; \
		chmod 755 $(SCRIPT_INSTALL_DIR)/$$i; \
d484 2
a485 3
	@@echo "Installing tcl.h"
	@@$(INSTALL_DATA) $(GENERICDIR)/tcl.h $(INCLUDE_INSTALL_DIR)/tcl.h
	@@for i in $(ROOT)/library/*.tcl $(ROOT)/library/tclIndex $(WINDIR)/tclAppInit.c; \
d487 1
a487 2
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
d489 2
a490 1
	@@for i in http2.0 http1.0 opt0.1 ; \
d492 1
a492 5
	    for j in $(ROOT)/library/$$i/*.tcl ; \
		do \
		echo "Installing $$j"; \
		$(INSTALL_DATA) $$j $(SCRIPT_INSTALL_DIR)/$$i; \
		done; \
d494 1
a494 7

install-minimal:
	@@echo "Installing DLL"
	@@$(INSTALL_DATA) $(TCLDLL) $(BIN_INSTALL_DIR)/$(TCLDLL)
	@@$(INSTALL_DATA) $(TCLPIPEDLL) $(BIN_INSTALL_DIR)/$(TCLPIPEDLL)
	@@$(INSTALL_DATA) $(TCLREGDLL) $(BIN_INSTALL_DIR)/$(TCLREGDLL)
	@@for i in $(INSTALL_ROOT)@@datadir@@ $(SCRIPT_INSTALL_DIR) ; \
d496 2
a497 24
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		mkdir $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@for i in http2.0 http1.0 opt0.1 ; \
	    do \
	    if [ ! -d $(SCRIPT_INSTALL_DIR)/$$i ] ; then \
		echo "Making directory $(SCRIPT_INSTALL_DIR)/$$i"; \
		mkdir $(SCRIPT_INSTALL_DIR)/$$i; \
		chmod 755 $(SCRIPT_INSTALL_DIR)/$$i; \
		else true; \
		fi; \
	    done;
	@@for i in $(ROOT)/library/*.tcl $(ROOT)/library/tclIndex; \
	    do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
	    done;
	@@for i in http2.0 http1.0 opt0.1 ; \
	    do \
	    for j in $(ROOT)/library/$$i/*.tcl ; \
d499 1
a499 2
		echo "Installing $$j"; \
		$(INSTALL_DATA) $$j $(SCRIPT_INSTALL_DIR)/$$i; \
d502 16
d519 1
a519 151
# $(DUMPEXTS): $(WINDIR)/winDumpExts.c
# 	$(CC) -c $(CON_CFLAGS) $?
# 	$(CC) $(linkdebug) $(conlflags) -o $@@ $(TMPDIR)/winDumpExts.$(OBJEXT)bj $(guilibs)


ifeq ($(OBJEXT),o)

$(TCLDLL): $(TCLOBJS) tclres.$(OBJEXT) $(TMPDIR)/tclcyg.def
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tcl.base -o $(TCLDLL) $(TCLOBJS) tclres.$(OBJEXT) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66000000
	$(DLLTOOL) --as=$(AS) --dllname $(TCLDLL) --def $(TMPDIR)/tclcyg.def --base-file tcl.base --output-exp tcl.exp
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tcl.base,tcl.exp -o $(TCLDLL) $(TCLOBJS) tclres.$(OBJEXT) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66000000
	$(DLLTOOL) --as=$(AS) --dllname $(TCLDLL) --def $(TMPDIR)/tclcyg.def --base-file tcl.base --output-exp tcl.exp
	$(CC) $(DLL_LDFLAGS) -Wl,tcl.exp -o $(TCLDLL) $(TCLOBJS) tclres.$(OBJEXT) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66000000

else

$(TCLDLL): $(TCLOBJS) $(TMPDIR)/tclcyg.def tclres.$(OBJEXT)
	link.exe $(ldebug) $(dlllflags) -dll -def:$(TMPDIR)/tclcyg.def -NODEFAULTLIB \
		-out:$(TCLDLL) tclres.$(OBJEXT) $(guilibsdll) $(TCLOBJS) \
		-entry:_DllMainCRTStartup@@12
	mv cygtcl80.lib $(TCLLIB)
endif


ifeq ($(OBJEXT),o)

$(TCLLIB): $(TMPDIR)/tclcyg.def 
	$(DLLTOOL) --as=$(AS) --dllname $(TCLDLL) --def $(TMPDIR)/tclcyg.def --output-lib $(TCLLIB)

else

$(TCLLIB): $(TCLDLL)

endif

$(TCLPLUGINLIB): $(TMPDIR)/plugin.def
	$(DLLTOOL) --as=$(AS) --dllname $(TCLPLUGINDLL) --def $(TMPDIR)/plugin.def --output-lib $(TCLPLUGINLIB)

$(TCLPLUGINDLL): $(TCLOBJS) $(TMPDIR)/plugin.def tclres.$(OBJEXT)
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tclplugin.base -o $(TCLPLUGINDLL) $(TCLOBJS) tclres.$(OBJEXT) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66600000
	$(DLLTOOL) --as=$(AS) --dllname $(TCLPLUGINDLL) --def $(TMPDIR)/plugin.def --base-file tclplugin.base --output-exp tcl.exp
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tclplugin.base -Wl,tcl.exp -o $(TCLPLUGINDLL) $(TCLOBJS) tclres.$(OBJEXT) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66600000
	$(DLLTOOL) --as=$(AS) --dllname $(TCLPLUGINDLL) --def $(TMPDIR)/plugin.def --base-file tclplugin.base --output-exp tcl.exp
	$(CC) $(DLL_LDFLAGS) -Wl,tcl.exp -o $(TCLPLUGINDLL) $(TCLOBJS) tclres.$(OBJEXT) $(DLL_LDLIBS) -mwindows -Wl,-e,_DllMain@@12 -Wl,--image-base,0x66600000

ifeq ($(OBJEXT),o)

$(TCLSH): $(TCLSHOBJS) tclshres.$(OBJEXT) $(TCLLIB)
	$(CC) $(linkdebug) $(conlflags) -Wl,--stack=0x2300000 \
		-o $@@ $(conlibsdll) $(TCLSHOBJS) tclshres.$(OBJEXT) $(TCLLIB)

else

$(TCLSH): $(TCLSHOBJS) tclshres.$(OBJEXT) $(TCLLIB)
	link $(linkdebug) $(conlflags) $(tclsh_flags) -NODEFAULTLIB -subsystem:console -entry:mainCRTStartup \
		-out:$@@ $(conlibsdll) $(TCLSHOBJS) tclshres.$(OBJEXT) $(TCLLIB)

endif

$(TCLSHP): $(TCLSHOBJS) $(TCLPLUGINLIB) tclshres.$(OBJEXT)
	$(CC) $(linkdebug) $(conlflags) -Wl,--stack=0x2300000 \
		-o $@@ $(conlibsdll) $(TCLSHOBJS) tclshres.$(OBJEXT) $(TCLPLUGINLIB)

$(TCLTEST): $(TCLTESTOBJS) tclshres.$(OBJEXT) $(TCLLIB)
	$(CC) $(linkdebug) $(conlflags) -Wl,--stack=0x2300000 \
		 -o $@@ $(conlibsdll) $(TCLTESTOBJS) tclshres.$(OBJEXT) $(TCLLIB)

# $(TCL16DLL):  $(WINDIR)\tcl16.rc $(WINDIR)\tclWin16.c
# 	if exist $(cc16) $(cc16) @@<<
# $(DLL16_CFLAGS) -Fo$(TMPDIR)\ $(WINDIR)\tclWin16.c
# <<                         
# 	@@copy << $(TMPDIR)\tclWin16.def > nul
# LIBRARY $(@@B);dll
# EXETYPE WINDOWS
# CODE PRELOAD MOVEABLE DISCARDABLE
# DATA PRELOAD MOVEABLE SINGLE
# HEAPSIZE 1024 
# EXPORTS
# 	WEP @@1 RESIDENTNAME
# 	UTPROC @@2 
# << 
# 	if exist $(cc16) $(link16) /NOLOGO /ONERROR:NOEXE /NOE @@<<
# $(TMPDIR)\tclWin16.obj
# $@@
# nul
# $(TOOLS16)\lib\ ldllcew oldnames libw toolhelp
# $(TMPDIR)\tclWin16.def
# <<
# 	if exist $(cc16) $(rc16) -i $(GENERICDIR) $(TCL_DEFINES) $(WINDIR)\tcl16.rc $@@

ifeq ($(OBJEXT),o)

$(TCLPIPEDLL): $(WINDIR)/stub16.c
	$(CC) -c $(CON_CFLAGS) $(WINDIR)/stub16.c
	$(CC) $(linkdebug) $(conlflags) -o $@@ $(TMPDIR)/stub16.$(OBJEXT) $(guilibs)
else

$(TCLPIPEDLL): $(WINDIR)/stub16.c
	$(CC) -c $(CON_CFLAGS) -Fo$(TMPDIR)/ $(WINDIR)/stub16.c
	link $(ldebug) $(conlflags) -out:$@@ $(TMPDIR)/stub16.obj $(guilibsdll)
endif

ifeq ($(OBJEXT),o)

$(TCLREGDLL): $(TMPDIR)/tclWinReg.$(OBJEXT) $(TCLLIB)
	echo EXPORTS > $(TMPDIR)/tclreg.def
	echo Registry_Init >> $(TMPDIR)/tclreg.def
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tclreg.base -o $(TCLREGDLL) $(TMPDIR)/tclWinReg.$(OBJEXT) $(TCLLIB) $(DLL_LDLIBS) -ladvapi32 -mwindows -Wl,-e,_DllEntryPoint@@12 -Wl,--image-base,0x66200000
	$(DLLTOOL) --as=$(AS) --dllname $(TCLREGDLL) --def $(TMPDIR)/tclreg.def --base-file tclreg.base --output-exp tclreg.exp
	$(CC) -s $(DLL_LDFLAGS) -Wl,--base-file,tclreg.base -Wl,tclreg.exp -o $(TCLREGDLL) $(TMPDIR)/tclWinReg.$(OBJEXT) $(TCLLIB) $(DLL_LDLIBS) -ladvapi32 -mwindows -Wl,-e,_DllEntryPoint@@12 -Wl,--image-base,0x66200000
	$(DLLTOOL) --as=$(AS) --dllname $(TCLREGDLL) --def $(TMPDIR)/tclreg.def --base-file tclreg.base --output-exp tclreg.exp
	$(CC) $(DLL_LDFLAGS) -Wl,tclreg.exp -o $(TCLREGDLL) $(TMPDIR)/tclWinReg.$(OBJEXT) $(TCLLIB) $(DLL_LDLIBS) -ladvapi32 -mwindows -Wl,-e,_DllEntryPoint@@12 -Wl,--image-base,0x66200000
	rm -f $(TMPDIR)/tclreg.def
else
$(TCLREGDLL): $(TMPDIR)/tclWinReg.obj
	link $(ldebug) $(dlllflags) -out:$@@ $(TMPDIR)/tclWinReg.obj \
		$(conlibsdll) $(TCLLIB) -entry:_DllMainCRTStartup@@12
endif

ifeq ($(OBJEXT),o)

$(CAT32): $(WINDIR)/cat.c
	$(CC) -c $(CON_CFLAGS) $?
	$(CC) -o $@@ -Wl,-stack,16384 $(TMPDIR)/cat.$(OBJEXT) $(conlibs)

else

$(CAT32): $(WINDIR)/cat.c
	$(CC) $(CON_CFLAGS) -Fo$(TMPDIR)/ $(WINDIR)/cat.c
	link -subsystem:console -entry:mainCRTStartup -out:$@@ -stack:16384 $(TMPDIR)/cat.obj $(conlibs)
endif

# $(CAT16): $(WINDIR)\cat.c
# 	if exist $(cc16) $(cc16) $(DOS_CFLAGS) -Fo$(TMPDIR)\ $?
# 	set LIB=$(TOOLS16)\lib
# 	if exist $(cc16) $(link16) /NOLOGO /ONERROR:NOEXE /NOI /STACK:16384 \
# 		$(TMPDIR)\cat.obj,$@@,nul,llibce.lib,nul

$(TMPDIR)/tclcyg.def: $(DUMPEXTS) $(TCLOBJS)
	echo 'EXPORTS' > tmp.def
	-for o in $(TCLOBJS); do \
	  $(NM) --extern-only --defined-only $$o | sed -e 's/[^ ]* [^ ]* //' -e 's/^_//' | fgrep -v DllEntryPoint | fgrep -v DllMain | fgrep -v impure_ptr >> tmp.def; \
	done
	mv tmp.def $(TMPDIR)/tclcyg.def

$(TMPDIR)/plugin.def: $(DUMPEXTS) $(TCLOBJS)
	echo 'EXPORTS' > tmp.def
	-for o in $(TCLOBJS); do \
	  $(NM) --extern-only --defined-only $$o | sed -e 's/[^ ]* [^ ]* //' -e 's/^_//' | fgrep -v DllEntryPoint | fgrep -v DllMain | fgrep -v impure_ptr >> tmp.def; \
	done
	mv tmp.def $(TMPDIR)/plugin.def
d521 2
a522 6
#
# Special case object file targets
#

$(TMPDIR)/testMain.$(OBJEXT): $(WINDIR)/tclAppInit.c
	$(CC) -c -o $(TMPDIR)/testMain.$(OBJEXT) $(TCL_CFLAGS) -DTCL_TEST $?
d524 2
a525 3
#
# Implicit rules
#
d527 2
a528 8
.SUFFIXES: .S .c .o .obj .s
ifeq ($(OBJEXT),o)
.c.$(OBJEXT):
	$(CC) -c $(TCL_CFLAGS) $<
else
.c.$(OBJEXT):
	$(CC) -c $(TCL_CFLAGS) -Dtry=__try -Dexcept=__except $<
endif
d530 4
a533 1
ifeq ($(OBJEXT),o)
d535 3
a537 2
tclres.$(OBJEXT): $(srcdir)/tcl.rc
	$(WINDRES) --include $(GENERICDIR) --include $(WINDIR) --define __WIN32__ --define VS_VERSION_INFO=1 $(srcdir)/tcl.rc tclres.$(OBJEXT)
d539 3
a541 2
tclshres.$(OBJEXT): $(srcdir)/tclsh.rc
	$(WINDRES) --include $(GENERICDIR) --include $(WINDIR) --define __WIN32__ --define VS_VERSION_INFO=1 $(srcdir)/tclsh.rc tclshres.$(OBJEXT)
d543 1
a543 1
else
d545 7
a551 18
tclres.$(OBJEXT): $(srcdir)/tcl.rc
	rc -i$(GENERICDIR) -i$(WINDIR) -d__WIN32__ -dVS_VERSION_INFO=1 -fotclres.$(OBJEXT) $(srcdir)/tcl.rc 

tclshres.$(OBJEXT): $(srcdir)/tclsh.rc
	rc -i$(GENERICDIR) -i$(WINDIR) -d__WIN32__ -dVS_VERSION_INFO=1 -fotclshres.$(OBJEXT) $(srcdir)/tclsh.rc 

endif

#{$(WINDIR)}.rc{$(TMPDIR)}.res:
#	$(rc32) -fo $@@ -r -i $(GENERICDIR) -i $(WINDIR) -D__WIN32__ \
#		$(TCL_DEFINES) $<

clean:
	rm -f *.exp *.a *.dll *.exe $(TMPDIR)/*.$(OBJEXT) *.res *.def
	rm -f tcl.base tclreg.base tclplugin.base

Makefile: $(WINDIR)/Makefile.in config.status
	$(SHELL) config.status
d553 6
a558 2
config.status: $(WINDIR)/configure
	./config.status --recheck
@


1.2
log
@Change various Makefile.in to use standard autoconf variables.
@
text
@d223 1
a223 1
TCL_DEFINES	= -D__WIN32__ $(DEBUGDEFINES)
@


1.1
log
@Initial revision
@
text
@d14 4
d51 1
a51 1
TCL_LIBRARY =	@@datadir@@/tcl$(DIRVERSION)
d57 1
a57 1
LIB_INSTALL_DIR =	$(INSTALL_ROOT)@@libdir@@
d60 1
a60 1
BIN_INSTALL_DIR =	$(INSTALL_ROOT)@@bindir@@
d63 1
a63 1
INCLUDE_INSTALL_DIR =	$(INSTALL_ROOT)@@includedir@@
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@d1 35
a35 30
#
# This file is a Makefile for Tcl.  If it has the name "Makefile.in"
# then it is a template for a Makefile;  to generate the actual Makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@@foo@@" will get replaced in the
# actual Makefile.
#
# RCS: @@(#) $Id: Makefile.in,v 1.14.8.15 2001/08/06 22:29:25 mdejong Exp $

VERSION = @@TCL_VERSION@@

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.

prefix			= @@prefix@@
exec_prefix		= @@exec_prefix@@
bindir			= @@bindir@@
libdir			= @@libdir@@
includedir		= @@includedir@@
mandir			= @@mandir@@
d42 1
a42 1
INSTALL_ROOT	=
d44 1
a44 1
# Directory from which applications will reference the libary of Tcl
d47 4
a50 1
TCL_LIBRARY	= @@datadir@@/tcl$(VERSION)
d52 2
a53 2
# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR		= $(libdir)
d56 1
a56 1
BIN_INSTALL_DIR		= $(INSTALL_ROOT)$(bindir)
d58 2
a59 2
# Directory in which to install the .a or .so binary for the Tcl library:
LIB_INSTALL_DIR		= $(INSTALL_ROOT)$(libdir)
d61 6
a66 2
# Path name to use when installing library scripts.
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TCL_LIBRARY)
d68 21
a88 2
# Directory in which to install the include file tcl.h:
INCLUDE_INSTALL_DIR	= $(INSTALL_ROOT)$(includedir)
d90 236
a325 2
# Top-level directory in which to install manual entries:
MAN_INSTALL_DIR		= $(INSTALL_ROOT)$(mandir)
d327 1
a327 2
# Directory in which to install manual entry for tclsh:
MAN1_INSTALL_DIR = $(MAN_INSTALL_DIR)/man1
d329 2
a330 361
# Directory in which to install manual entries for Tcl's C library
# procedures:
MAN3_INSTALL_DIR = $(MAN_INSTALL_DIR)/man3

# Directory in which to install manual entries for the built-in
# Tcl commands:
MANN_INSTALL_DIR = $(MAN_INSTALL_DIR)/mann

# Libraries built with optimization switches have this additional extension
TCL_DBGX = @@TCL_DBGX@@

# warning flags
CFLAGS_WARNING = @@CFLAGS_WARNING@@

# The default switches for optimization or debugging
CFLAGS_DEBUG    = @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE	= @@CFLAGS_OPTIMIZE@@

# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS

# The default switches for optimization or debugging
LDFLAGS_DEBUG    = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS = 		$(CFLAGS_DEBUG)
#CFLAGS = 		$(CFLAGS_OPTIMIZE)
#CFLAGS = 		$(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS = 		@@CFLAGS@@ @@CFLAGS_DEFAULT@@

# Special compiler flags to use when building man2tcl on Windows.
MAN2TCLFLAGS =		@@MAN2TCLFLAGS@@

SRC_DIR			= @@srcdir@@
ROOT_DIR		= @@srcdir@@/..
GENERIC_DIR		= @@srcdir@@/../generic
WIN_DIR			= @@srcdir@@
COMPAT_DIR		= @@srcdir@@/../compat

# This converts a POSIX path to a Windows native path
CYGPATH			= @@CYGPATH@@

GENERIC_DIR_NATIVE 	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(ROOT_DIR)')

LIBRARY_DIR   = $(shell echo '$(ROOT_DIR_NATIVE)/library' | sed 's/\\/\//g' )

VENDORPREFIX		= @@VENDORPREFIX@@
DLLSUFFIX		= @@DLLSUFFIX@@
LIBSUFFIX		= @@LIBSUFFIX@@
EXESUFFIX		= @@EXESUFFIX@@
LIBPREFIX		= @@LIBPREFIX@@

TCL_STUB_LIB_FILE	= @@TCL_STUB_LIB_FILE@@
TCL_DLL_FILE		= @@TCL_DLL_FILE@@
TCL_LIB_FILE		= @@TCL_LIB_FILE@@
GNU_TCL_LIB_FILE	= @@GNU_TCL_LIB_FILE@@
MSVC_TCL_LIB_FILE	= @@MSVC_TCL_LIB_FILE@@
DDE_DLL_FILE		= @@DDE_DLL_FILE@@
DDE_LIB_FILE		= @@DDE_LIB_FILE@@
REG_DLL_FILE		= @@REG_DLL_FILE@@
REG_LIB_FILE		= @@REG_LIB_FILE@@
PIPE_DLL_FILE		= @@PIPE_DLL_FILE@@

SHARED_LIBRARIES 	= $(TCL_DLL_FILE) $(TCL_STUB_LIB_FILE) \
			  $(DDE_DLL_FILE) $(REG_DLL_FILE) $(PIPE_DLL_FILE)
STATIC_LIBRARIES	= $(TCL_LIB_FILE) $(REG_LIB_FILE) $(DDE_LIB_FILE)

TCLSH			= tclsh$(VER)${EXESUFFIX}
TCLTEST			= tcltest${EXEEXT}
CAT32			= cat32$(EXEEXT)
MAN2TCL			= man2tcl$(EXEEXT)

SET_MAKE=@@SET_MAKE@@

# Setting the VPATH variable to a list of paths will cause the 
# makefile to look into these paths when resolving .c to .obj
# dependencies.

VPATH = $(GENERIC_DIR):$(WIN_DIR):$(COMPAT_DIR)

AR		= @@AR@@
RANLIB		= @@RANLIB@@
CC		= @@CC@@
RC		= @@RC@@
RES		= @@RES@@
AC_FLAGS	= @@EXTRA_CFLAGS@@ @@DEFS@@
CPPFLAGS	= @@CPPFLAGS@@
LDFLAGS		= @@LDFLAGS@@ @@LDFLAGS_DEFAULT@@
LDFLAGS_CONSOLE	= @@LDFLAGS_CONSOLE@@
LDFLAGS_WINDOW	= @@LDFLAGS_WINDOW@@
EXEEXT		= @@EXEEXT@@
OBJEXT		= @@OBJEXT@@
STLIB_LD	= @@STLIB_LD@@
SHLIB_LD	= @@SHLIB_LD@@
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(LIBS)
SHLIB_CFLAGS	= @@SHLIB_CFLAGS@@
SHLIB_SUFFIX	= @@SHLIB_SUFFIX@@
VER		= @@TCL_MAJOR_VERSION@@@@TCL_MINOR_VERSION@@
DOTVER		= @@TCL_MAJOR_VERSION@@.@@TCL_MINOR_VERSION@@
LIBS		= @@LIBS@@

RMDIR		= rm -rf
MKDIR		= mkdir -p
SHELL		= @@SHELL@@
RM		= rm -f
COPY		= cp

CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${TCL_SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" ${AC_FLAGS} \
${COMPILE_DEBUG_FLAGS}

CC_OBJNAME = @@CC_OBJNAME@@
CC_EXENAME = @@CC_EXENAME@@

STUB_CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" ${AC_FLAGS} \
${COMPILE_DEBUG_FLAGS}

TCLTEST_OBJS = \
	tclTest.$(OBJEXT) \
	tclTestObj.$(OBJEXT) \
	tclTestProcBodyObj.$(OBJEXT) \
	tclThreadTest.$(OBJEXT) \
	tclWinTest.$(OBJEXT) \
	testMain.$(OBJEXT)

GENERIC_OBJS = \
	regcomp.$(OBJEXT) \
	regexec.$(OBJEXT) \
	regfree.$(OBJEXT) \
	regerror.$(OBJEXT) \
	tclAlloc.$(OBJEXT) \
	tclAsync.$(OBJEXT) \
	tclBasic.$(OBJEXT) \
	tclBinary.$(OBJEXT) \
	tclCkalloc.$(OBJEXT) \
	tclClock.$(OBJEXT) \
	tclCmdAH.$(OBJEXT) \
	tclCmdIL.$(OBJEXT) \
	tclCmdMZ.$(OBJEXT) \
	tclCompCmds.$(OBJEXT) \
	tclCompExpr.$(OBJEXT) \
	tclCompile.$(OBJEXT) \
	tclDate.$(OBJEXT) \
	tclEncoding.$(OBJEXT) \
	tclEnv.$(OBJEXT) \
	tclEvent.$(OBJEXT) \
	tclExecute.$(OBJEXT) \
	tclFCmd.$(OBJEXT) \
	tclFileName.$(OBJEXT) \
	tclGet.$(OBJEXT) \
	tclHash.$(OBJEXT) \
	tclHistory.$(OBJEXT) \
	tclIndexObj.$(OBJEXT) \
	tclInterp.$(OBJEXT) \
	tclIO.$(OBJEXT) \
	tclIOCmd.$(OBJEXT) \
	tclIOGT.$(OBJEXT) \
	tclIOSock.$(OBJEXT) \
	tclIOUtil.$(OBJEXT) \
	tclLink.$(OBJEXT) \
	tclLiteral.$(OBJEXT) \
	tclListObj.$(OBJEXT) \
	tclLoad.$(OBJEXT) \
	tclMain.$(OBJEXT) \
	tclNamesp.$(OBJEXT) \
	tclNotify.$(OBJEXT) \
	tclObj.$(OBJEXT) \
	tclPanic.$(OBJEXT) \
	tclParse.$(OBJEXT) \
	tclParseExpr.$(OBJEXT) \
	tclPipe.$(OBJEXT) \
	tclPkg.$(OBJEXT) \
	tclPosixStr.$(OBJEXT) \
	tclPreserve.$(OBJEXT) \
	tclProc.$(OBJEXT) \
	tclRegexp.$(OBJEXT) \
	tclResolve.$(OBJEXT) \
	tclResult.$(OBJEXT) \
	tclScan.$(OBJEXT) \
	tclStringObj.$(OBJEXT) \
	tclStubInit.$(OBJEXT) \
	tclStubLib.$(OBJEXT) \
	tclThread.$(OBJEXT) \
	tclTimer.$(OBJEXT) \
	tclUtf.$(OBJEXT) \
	tclUtil.$(OBJEXT) \
	tclVar.$(OBJEXT)

WIN_OBJS = \
	tclWin32Dll.$(OBJEXT) \
	tclWinChan.$(OBJEXT) \
	tclWinConsole.$(OBJEXT) \
	tclWinSerial.$(OBJEXT) \
	tclWinError.$(OBJEXT) \
	tclWinFCmd.$(OBJEXT) \
	tclWinFile.$(OBJEXT) \
	tclWinInit.$(OBJEXT) \
	tclWinLoad.$(OBJEXT) \
	tclWinMtherr.$(OBJEXT) \
	tclWinNotify.$(OBJEXT) \
	tclWinPipe.$(OBJEXT) \
	tclWinSock.$(OBJEXT) \
	tclWinThrd.$(OBJEXT) \
	tclWinTime.$(OBJEXT) 

COMPAT_OBJS = \
	strftime.$(OBJEXT)

PIPE_OBJS = stub16.$(OBJEXT)

DDE_OBJS = tclWinDde.$(OBJEXT)

REG_OBJS = tclWinReg.$(OBJEXT)

STUB_OBJS = tclStubLib.$(OBJEXT)

TCLSH_OBJS = tclAppInit.$(OBJEXT)

TCL_OBJS = ${GENERIC_OBJS} ${WIN_OBJS} ${COMPAT_OBJS}

TCL_DOCS = "$(ROOT_DIR_NATIVE)"/doc/*.[13n]

all: binaries libraries doc

tcltest: $(TCLTEST)

binaries: @@LIBRARIES@@ $(TCLSH)

libraries:

doc:

winhelp: $(ROOT_DIR)/tools/man2help.tcl $(MAN2TCL)
	TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) "$(ROOT_DIR_NATIVE)"/tools/man2help.tcl tcl "$(VER)" $(TCL_DOCS)
	hcw /c /e tcl.hpj

$(MAN2TCL): $(ROOT_DIR)/tools/man2tcl.c
	$(CC) $(CFLAGS_OPTIMIZE) $(MAN2TCLFLAGS) -o $(MAN2TCL) "$(ROOT_DIR_NATIVE)"/tools/man2tcl.c

$(TCLSH): $(TCL_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
	$(CC) $(CFLAGS) $(TCLSH_OBJS) $(TCL_LIB_FILE) $(LIBS) \
        tclsh.$(RES) $(CC_EXENAME) 

$(TCLTEST): $(TCL_LIB_FILE) $(TCLTEST_OBJS) $(CAT32) tclsh.$(RES)
	$(CC) $(CFLAGS) $(TCLTEST_OBJS) $(TCL_LIB_FILE) $(LIBS) \
        tclsh.$(RES) $(CC_EXENAME) 

cat32.$(OBJEXT): cat.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

$(CAT32): cat32.$(OBJEXT)
	$(CC) $(CFLAGS) cat32.$(OBJEXT) $(CC_EXENAME) $(LDFLAGS_CONSOLE)

# The following targets are configured by autoconf to generate either
# a shared library or static library

${TCL_STUB_LIB_FILE}: ${STUB_OBJS}
	@@$(RM) ${TCL_STUB_LIB_FILE}
	@@MAKE_LIB@@ ${STUB_OBJS}
	@@POST_MAKE_LIB@@

${GNU_TCL_LIB_FILE}: ${TCL_DLL_FILE}

${TCL_DLL_FILE}: ${TCL_OBJS} tcl.$(RES)
	@@$(RM) ${TCL_DLL_FILE}
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS)

${MSVC_TCL_LIB_FILE}: ${TCL_OBJS} ${TCL_DLL_FILE}
	@@$(RM) ${TCL_LIB_FILE}
	@@MAKE_LIB@@ ${TCL_OBJS}
	@@POST_MAKE_LIB@@

${DDE_DLL_FILE}: ${DDE_OBJS} ${TCL_STUB_LIB_FILE}
	@@$(RM) ${DDE_DLL_FILE}
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)

${DDE_LIB_FILE}: ${DDE_OBJS} ${TCL_LIB_FILE}
	@@$(RM) ${DDE_LIB_FILE}
	@@MAKE_LIB@@ ${DDE_OBJS} ${TCL_LIB_FILE}

${REG_DLL_FILE}: ${REG_OBJS} ${TCL_STUB_LIB_FILE}
	@@$(RM) ${REG_DLL_FILE}
	@@MAKE_DLL@@ ${REG_OBJS} ${TCL_STUB_LIB_FILE} $(SHLIB_LD_LIBS)

${REG_LIB_FILE}: ${REG_OBJS} ${TCL_LIB_FILE}
	@@$(RM) ${REG_LIB_FILE}
	@@MAKE_LIB@@ ${REG_OBJS} ${TCL_LIB_FILE}

# PIPE_DLL_FILE is actually an executable, don't build it
# like a DLL.

${PIPE_DLL_FILE}: ${PIPE_OBJS}
	@@$(RM) ${PIPE_DLL_FILE}
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS)

# Add the object extension to the implicit rules.  By default .obj is not
# automatically added.

.SUFFIXES: .${OBJEXT}
.SUFFIXES: .$(RES)
.SUFFIXES: .rc

# Special case object targets

tclWinInit.${OBJEXT}: tclWinInit.c
	$(CC) -c $(CC_SWITCHES) -DBUILD_tcl $(EXTFLAGS) @@DEPARG@@ $(CC_OBJNAME)

testMain.${OBJEXT}: tclAppInit.c
	$(CC) -c $(CC_SWITCHES) -DTCL_TEST @@DEPARG@@ $(CC_OBJNAME)

tclTest.${OBJEXT}: tclTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclTestObj.${OBJEXT}: tclTestObj.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclWinTest.${OBJEXT}: tclWinTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclAppInit.${OBJEXT} : tclAppInit.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

# The following objects should be built using the stub interfaces

tclWinReg.${OBJEXT} : tclWinReg.c
	$(CC) -c $(CC_SWITCHES) -DUSE_TCL_STUBS @@DEPARG@@ $(CC_OBJNAME)

tclWinDde.${OBJEXT} : tclWinDde.c
	$(CC) -c $(CC_SWITCHES) -DUSE_TCL_STUBS @@DEPARG@@ $(CC_OBJNAME)

# The following objects are part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

tclStubLib.${OBJEXT}: tclStubLib.c
	$(CC) -c $(CC_SWITCHES) -DSTATIC_BUILD @@DEPARG@@ $(CC_OBJNAME)


# Implicit rule for all object files that will end up in the Tcl library

.c.${OBJEXT}:
	$(CC) -c $(CC_SWITCHES) -DBUILD_tcl @@DEPARG@@ $(CC_OBJNAME)

.rc.$(RES):
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@

install: all install-binaries install-libraries install-doc

install-binaries:
	@@$(MKDIR) -p "$(BIN_INSTALL_DIR)"
	@@$(MKDIR) -p "$(LIB_INSTALL_DIR)"
	$(COPY) tclConfig.sh $(LIB_INSTALL_DIR)/tclConfig.sh
	@@for i in dde1.1 reg1.0; \
d332 4
a335 3
	    if [ ! -d $(LIB_INSTALL_DIR)/$$i ] ; then \
		echo "Making directory $(LIB_INSTALL_DIR)/$$i"; \
		$(MKDIR) $(LIB_INSTALL_DIR)/$$i; \
d339 7
a345 32
	@@for i in $(TCL_DLL_FILE) $(TCLSH) $(PIPE_DLL_FILE); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i"; \
		$(COPY) $$i "$(BIN_INSTALL_DIR)"; \
	    fi; \
	    done
	@@for i in $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
	    do \
	    if [ -f $$i ]; then \
		echo "Installing $$i"; \
		$(COPY) $$i "$(LIB_INSTALL_DIR)"; \
	    fi; \
	    done
	@@if [ -f $(DDE_DLL_FILE) ]; then \
	    echo installing $(DDE_DLL_FILE); \
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.1; \
	    $(COPY) $(ROOT_DIR)/library/dde1.1/pkgIndex.tcl $(LIB_INSTALL_DIR)/dde1.1; \
	    fi
	@@if [ -f $(DDE_LIB_FILE) ]; then \
	    echo installing $(DDE_LIB_FILE); \
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.1; \
	    fi
	@@if [ -f $(REG_DLL_FILE) ]; then \
	    echo installing $(REG_DLL_FILE); \
	    $(COPY) $(REG_DLL_FILE) $(LIB_INSTALL_DIR)/reg1.0; \
	    $(COPY) $(ROOT_DIR)/library/reg1.0/pkgIndex.tcl $(LIB_INSTALL_DIR)/reg1.0; \
	    fi
	@@if [ -f $(REG_LIB_FILE) ]; then \
	    echo installing $(REG_LIB_FILE); \
	    $(COPY) $(REG_LIB_FILE) $(LIB_INSTALL_DIR)/reg1.0; \
	    fi
d348 6
a353 2
	@@for i in $(prefix)/lib $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR); \
d357 2
a358 1
		$(MKDIR) $$i; \
d362 1
a362 1
	@@for i in http1.0 http2.3 opt0.4 encoding msgcat1.0 tcltest1.0; \
d366 2
a367 1
		$(MKDIR) $(SCRIPT_INSTALL_DIR)/$$i; \
d371 3
a373 2
	@@echo "Installing header files";
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" ; \
d375 2
a376 1
	    $(COPY) "$$i" "$(INCLUDE_INSTALL_DIR)"; \
d378 1
a378 2
	@@echo "Installing library files to $(SCRIPT_INSTALL_DIR)";
	@@for i in $(ROOT_DIR)/library/*.tcl $(ROOT_DIR)/library/tclIndex; \
d380 5
a384 1
	    $(COPY) "$$i" "$(SCRIPT_INSTALL_DIR)"; \
d386 7
a392 1
	@@for i in http2.3 http1.0 opt0.4 msgcat1.0 tcltest1.0; \
d394 24
a417 2
	    echo "Installing library $$i directory"; \
	    for j in $(ROOT_DIR)/library/$$i/*.tcl; \
d419 2
a420 1
		$(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/$$i"; \
a422 16
	@@echo "Installing encodings"
	@@for i in $(ROOT_DIR)/library/encoding/*.enc ; do \
		$(COPY) "$$i" "$(SCRIPT_INSTALL_DIR)/encoding"; \
	done;

install-doc:

test: binaries $(TCLTEST)
	TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLTEST) "$(ROOT_DIR_NATIVE)/tests/all.tcl" $(TESTFLAGS) \
	| ./$(CAT32)

# Useful target to launch a built tcltest with the proper path,...
runtest: tcltest
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	    ./tcltest
d424 151
a574 1
depend:
d576 27
a602 2
Makefile: $(SRC_DIR)/Makefile.in config.status
	$(SHELL) config.status
d604 1
a604 2
config.status: $(WIN_DIR)/configure
	$(SHELL) config.status --recheck
d606 2
a607 2
cleanhelp:
	$(RM) *.hlp *.cnt *.GID *.rtf man2tcl.exe
d609 2
a610 4
clean: cleanhelp
	$(RM) *.lib *.a *.exp *.dll *.$(RES) *.${OBJEXT} *~ \#* TAGS a.out
	$(RM) $(TCLSH) $(TCLTEST) $(CAT32)
	$(RM) *.pch *.ilk *.pdb
d612 1
a612 3
distclean: clean
	$(RM) Makefile config.status config.cache config.log tclConfig.sh \
		tcl.hpj
d614 3
a616 3
#
# Regenerate the stubs files.
#
d618 3
a620 1
# FIXME: We can't depend on TCLSH here since it is not yet built!
d622 2
a623 7
$(GENERIC_DIR)/tclStubInit.c: $(GENERIC_DIR)/tcl.decls \
		$(GENERIC_DIR)/tclInt.decls
	@@TCL_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	$(TCLSH) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
	    "$(GENERIC_DIR_NATIVE)" \
	    "$(GENERIC_DIR_NATIVE)\tcl.decls" \
            "$(GENERIC_DIR_NATIVE)\tclInt.decls"
d625 2
a626 6
genstubs:
	@@TCL_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	$(TCLSH) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
	    "$(GENERIC_DIR_NATIVE)" \
	    "$(GENERIC_DIR_NATIVE)\tcl.decls" \
            "$(GENERIC_DIR_NATIVE)\tclInt.decls"
@


1.1.1.3
log
@import tcl 8.4.0
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.65 2002/08/22 00:52:33 andreas_kupries Exp $
d39 1
a39 1
# Directory from which applications will reference the library of Tcl
d42 1
a42 1
TCL_LIBRARY	= $(prefix)/lib/tcl$(VERSION)
d83 10
d98 1
a98 7
CFLAGS = 		@@CFLAGS@@ @@CFLAGS_DEFAULT@@ @@MEM_DEBUG_FLAGS@@

# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS
d109 1
a109 1
# Converts a POSIX path to a Windows native path.
d112 3
a114 3
GENERIC_DIR_NATIVE	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE		= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)')
d118 1
d122 1
d127 7
a133 5
DDE_DLL_FILE		= tcldde$(DDEVER)${DLLSUFFIX}
DDE_LIB_FILE		= tcldde$(DDEVER)${LIBSUFFIX}
REG_DLL_FILE		= tclreg$(REGVER)${DLLSUFFIX}
REG_LIB_FILE		= tclreg$(REGVER)${LIBSUFFIX}
PIPE_DLL_FILE		= tclpip$(VER)${DLLSUFFIX}
a138 7
# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

d144 1
a144 1
@@SET_MAKE@@
a158 2
LDFLAGS_DEBUG   = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
a170 4
DDEVER		= @@TCL_DDE_MAJOR_VERSION@@@@TCL_DDE_MINOR_VERSION@@
DDEDOTVER	= @@TCL_DDE_MAJOR_VERSION@@.@@TCL_DDE_MINOR_VERSION@@
REGVER		= @@TCL_REG_MAJOR_VERSION@@@@TCL_REG_MINOR_VERSION@@
REGDOTVER	= @@TCL_REG_MAJOR_VERSION@@.@@TCL_REG_MINOR_VERSION@@
a255 2
	tclThreadAlloc.$(OBJEXT) \
	tclThreadJoin.$(OBJEXT) \
d279 1
a279 1
	strftime.$(OBJEXT) strtoll.$(OBJEXT) strtoull.$(OBJEXT)
d313 1
a313 1
$(TCLSH): $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
d315 1
a315 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d319 1
a319 1
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d335 2
d341 1
a341 1
${TCL_LIB_FILE}: ${TCL_OBJS}
d356 1
a356 1
	@@MAKE_DLL@@ ${REG_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)
d367 1
a367 1
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS) $(LDFLAGS_CONSOLE)
d417 1
a417 1
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@
d421 5
a425 11
install-binaries: binaries
	@@for i in "$(LIB_INSTALL_DIR)" "$(BIN_INSTALL_DIR)" ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
	    done;
	@@for i in dde1.2 reg1.0; \
d436 1
a436 1
		echo "Installing $$i to $(BIN_INSTALL_DIR)/"; \
d440 1
a440 1
	@@for i in tclConfig.sh $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
d443 1
a443 1
		echo "Installing $$i to $(LIB_INSTALL_DIR)/"; \
d449 2
a450 3
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    $(COPY) $(ROOT_DIR)/library/dde/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/dde1.2; \
d454 1
a454 1
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
d459 1
a459 2
	    $(COPY) $(ROOT_DIR)/library/reg/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/reg1.0; \
d466 1
a466 1
install-libraries: libraries
d476 1
a476 1
	@@for i in http1.0 http2.4 opt0.4 encoding msgcat1.3 tcltest2.2; \
d485 1
a485 2
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" \
		"$(GENERIC_DIR)/tclPlatDecls.h" ; \
d494 1
a494 2
	@@echo "Installing library http1.0 directory";
	@@for j in $(ROOT_DIR)/library/http1.0/*.tcl; \
d496 5
a500 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http1.0"; \
d502 1
a502 21
	@@echo "Installing library http2.4 directory";
	@@for j in $(ROOT_DIR)/library/http/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http2.4"; \
	    done;
	@@echo "Installing library opt0.4 directory";
	@@for j in $(ROOT_DIR)/library/opt/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/opt0.4"; \
	    done;
	@@echo "Installing library msgcat1.3 directory";
	@@for j in $(ROOT_DIR)/library/msgcat/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/msgcat1.3"; \
	    done;
	@@echo "Installing library tcltest2.2 directory";
	@@for j in $(ROOT_DIR)/library/tcltest/*.tcl; \
	    do \
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/tcltest2.2"; \
	    done;
	@@echo "Installing encodings";
d507 1
a507 5
install-doc: doc

# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"
d515 1
a515 1
runtest: binaries $(TCLTEST)
d517 1
a517 1
	./$(TCLTEST) $(TESTFLAGS) $(SCRIPT)
d519 1
a519 11
# This target can be used to run tclsh from the build directory
# via `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) $(SCRIPT)

# This target can be used to run tclsh inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(LIBRARY_DIR)" > gdb.run
	gdb ./tclsh --command=gdb.run
	rm gdb.run
d521 2
a522 1
depend:
d524 2
a525 2
Makefile: $(SRC_DIR)/Makefile.in
	./config.status
d543 2
d547 5
a551 3
	@@echo "Warning: tclStubInit.c may be out of date."
	@@echo "Developers may want to run \"make genstubs\" to regenerate."
	@@echo "This warning can be safely ignored, do not report as a bug!"
d554 2
a555 1
	$(TCL_EXE) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
@


1.1.1.4
log
@import tk 8.4.0
@
text
@d1 2
a2 1
# This file is a Makefile for Tk.  If it has the name "Makefile.in"
d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.58 2002/09/04 17:44:55 andreas_kupries Exp $
d10 1
a10 2
TCLVERSION		= @@TCL_VERSION@@
VERSION			= @@TK_VERSION@@
d37 1
a37 1
INSTALL_ROOT		=
d39 2
a40 2
# Directory from which applications will reference the library of Tk
# scripts (note: you can set the TK_LIBRARY environment variable at
d42 1
a42 1
TK_LIBRARY		= $(prefix)/lib/tk$(VERSION)
d47 1
a47 1
# Directory in which to install the program wish:
d50 1
a50 1
# Directory in which to install the .a or .so binary for the Tk library:
d53 2
a54 2
# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TK_LIBRARY)
d56 1
a56 1
# Directory in which to install the include file tk.h:
d59 1
a59 1
# Top-level directory for manual entries:
d62 2
a63 2
# Directory in which to install manual entry for wish:
MAN1_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man1
d65 1
a65 1
# Directory in which to install manual entries for Tk's C library
d67 1
a67 1
MAN3_INSTALL_DIR	= $(MAN_INSTALL_DIR)/man3
d70 2
a71 2
# Tk commands:
MANN_INSTALL_DIR	= $(MAN_INSTALL_DIR)/mann
d74 4
a77 1
TK_DBGX			= @@TK_DBGX@@
d79 3
a81 2
# Directory in which to install the pkgIndex.tcl file for loadable Tk
PKG_INSTALL_DIR		= $(LIB_INSTALL_DIR)/tk$(VERSION)$(TK_DBGX)
d83 12
a94 2
# Package index file for loadable Tk
PKG_INDEX		= $(PKG_INSTALL_DIR)/pkgIndex.tcl
d96 8
a103 12
# The directory containing the Tcl source and header files.
TCL_SRC_DIR		= @@TCL_SRC_DIR@@

# The directory containing the Tcl library archive file appropriate
# for this version of Tk:
TCL_BIN_DIR		= @@TCL_BIN_DIR@@

# The directory containing the Tcl sources and headers appropriate
# for this version of Tk ("srcdir" will be replaced or has already
# been replaced by the configure script):
TCL_GENERIC_DIR	= @@TCL_SRC_DIR@@/generic
TCL_TOOL_DIR = @@TCL_SRC_DIR@@/tools
d108 3
a110 3
# The name of the Tcl library.
TCL_LIB_FILE	  = "$(shell $(CYGPATH) '@@TCL_BIN_DIR@@/@@TCL_LIB_FILE@@')"
TCL_STUB_LIB_FILE = "$(shell $(CYGPATH) '@@TCL_BIN_DIR@@/@@TCL_STUB_LIB_FILE@@')"
d112 1
a112 17
SRC_DIR			= @@srcdir@@
ROOT_DIR		= $(SRC_DIR)/..
WIN_DIR			= $(SRC_DIR)
UNIX_DIR		= $(SRC_DIR)/../unix
GENERIC_DIR		= $(SRC_DIR)/../generic
BITMAP_DIR		= $(ROOT_DIR)/bitmaps
XLIB_DIR		= $(ROOT_DIR)/xlib
RC_DIR			= $(WIN_DIR)/rc

ROOT_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(ROOT_DIR)')
WIN_DIR_NATIVE	   	= $(shell $(CYGPATH) '$(WIN_DIR)')
GENERIC_DIR_NATIVE 	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
BITMAP_DIR_NATIVE	= $(shell $(CYGPATH) '$(ROOT_DIR)/bitmaps')
XLIB_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)/xlib')
TCL_GENERIC_NATIVE	= $(shell $(CYGPATH) '$(TCL_GENERIC_DIR)')
TCL_SRC_DIR_NATIVE      = $(shell $(CYGPATH) '$(TCL_SRC_DIR)')
RC_DIR_NATIVE      	= $(shell $(CYGPATH) '$(RC_DIR)')
d118 12
a129 3
TK_STUB_LIB_FILE	= @@TK_STUB_LIB_FILE@@
TK_LIB_FILE		= @@TK_LIB_FILE@@
TK_DLL_FILE		= @@TK_DLL_FILE@@
d131 6
a136 2
SHARED_LIBRARIES 	= $(TK_DLL_FILE) $(TK_STUB_LIB_FILE)
STATIC_LIBRARIES	= $(TK_LIB_FILE)
d138 2
a139 2
WISH			= wish$(VER)${EXESUFFIX}
TKTEST			= tktest${EXEEXT}
d149 1
a149 22
VPATH = $(GENERIC_DIR):$(WIN_DIR):$(UNIX_DIR):$(XLIB_DIR):$(RC_DIR)

# warning flags
CFLAGS_WARNING	= @@CFLAGS_WARNING@@

# The default switches for optimization or debugging
CFLAGS_DEBUG    = @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE	= @@CFLAGS_OPTIMIZE@@

# The default switches for optimization or debugging
LDFLAGS_DEBUG    = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS		= $(CFLAGS_DEBUG)
#CFLAGS		= $(CFLAGS_OPTIMIZE)
#CFLAGS		= $(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS		= @@CFLAGS@@ @@CFLAGS_DEFAULT@@

# Special compiler flags to use when building man2tcl on Windows.
MAN2TCLFLAGS	= @@MAN2TCLFLAGS@@
a155 1
TK_RES		= @@TK_RES@@
d158 2
d167 1
a167 1
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(TCL_STUB_LIB_FILE) $(LIBS)
d170 8
a177 3
VER		= @@TK_MAJOR_VERSION@@@@TK_MINOR_VERSION@@
DOTVER		= @@TK_MAJOR_VERSION@@.@@TK_MINOR_VERSION@@
LIBS		= @@LIBS@@ @@LIBS_GUI@@
d184 3
a186 13
TCLSH_PROG	= @@TCLSH_PROG@@

# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh

CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" \
-I"${XLIB_DIR_NATIVE}" -I"${BITMAP_DIR_NATIVE}" \
 -I"${TCL_GENERIC_NATIVE}" ${AC_FLAGS}
d191 104
a294 2
STUB_CC_SWITCHES	= ${CC_SWITCHES} -DUSE_TCL_STUBS
CON_CC_SWITCHES		= ${CC_SWITCHES} -DCONSOLE
d296 1
a296 135
# Tk used to let the configure script choose which program to use
# for installing, but there are just too many different versions of
# "install" around;  better to use the install-sh script that comes
# with the distribution, which is slower but guaranteed to work.

INSTALL		= cp
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA	= ${INSTALL}

WISH_OBJS = \
	winMain.$(OBJEXT)

TKTEST_OBJS = \
	testMain.$(OBJEXT) \
	tkSquare.$(OBJEXT) \
	tkTest.$(OBJEXT) \
	tkWinTest.$(OBJEXT)

XLIB_OBJS = \
	xcolors.$(OBJEXT) \
	xdraw.$(OBJEXT) \
	xgc.$(OBJEXT) \
	ximage.$(OBJEXT) \
	xutil.$(OBJEXT)

TK_OBJS = \
	tkConsole.$(OBJEXT) \
	tkUnixMenubu.$(OBJEXT) \
	tkUnixScale.$(OBJEXT) \
	$(XLIB_OBJS) \
	tkWin3d.$(OBJEXT) \
	tkWin32Dll.$(OBJEXT) \
	tkWinButton.$(OBJEXT) \
	tkWinClipboard.$(OBJEXT) \
	tkWinColor.$(OBJEXT) \
	tkWinConfig.$(OBJEXT) \
	tkWinCursor.$(OBJEXT) \
	tkWinDialog.$(OBJEXT) \
	tkWinDraw.$(OBJEXT) \
	tkWinEmbed.$(OBJEXT) \
	tkWinFont.$(OBJEXT) \
	tkWinImage.$(OBJEXT) \
	tkWinInit.$(OBJEXT) \
	tkWinKey.$(OBJEXT) \
	tkWinMenu.$(OBJEXT) \
	tkWinPixmap.$(OBJEXT) \
	tkWinPointer.$(OBJEXT) \
	tkWinRegion.$(OBJEXT) \
	tkWinScrlbr.$(OBJEXT) \
	tkWinSend.$(OBJEXT) \
	tkWinWindow.$(OBJEXT) \
	tkWinWm.$(OBJEXT) \
	tkWinX.$(OBJEXT) \
	stubs.$(OBJEXT) \
	tk3d.$(OBJEXT) \
	tkArgv.$(OBJEXT) \
	tkAtom.$(OBJEXT) \
	tkBind.$(OBJEXT) \
	tkBitmap.$(OBJEXT) \
	tkButton.$(OBJEXT) \
	tkCanvArc.$(OBJEXT) \
	tkCanvBmap.$(OBJEXT) \
	tkCanvImg.$(OBJEXT) \
	tkCanvLine.$(OBJEXT) \
	tkCanvPoly.$(OBJEXT) \
	tkCanvPs.$(OBJEXT) \
	tkCanvText.$(OBJEXT) \
	tkCanvUtil.$(OBJEXT) \
	tkCanvWind.$(OBJEXT) \
	tkCanvas.$(OBJEXT) \
	tkClipboard.$(OBJEXT) \
	tkCmds.$(OBJEXT) \
	tkColor.$(OBJEXT) \
	tkConfig.$(OBJEXT) \
	tkCursor.$(OBJEXT) \
	tkEntry.$(OBJEXT) \
	tkError.$(OBJEXT) \
	tkEvent.$(OBJEXT) \
	tkFileFilter.$(OBJEXT) \
	tkFocus.$(OBJEXT) \
	tkFont.$(OBJEXT) \
	tkFrame.$(OBJEXT) \
	tkGC.$(OBJEXT) \
	tkGeometry.$(OBJEXT) \
	tkGet.$(OBJEXT) \
	tkGrab.$(OBJEXT) \
	tkGrid.$(OBJEXT) \
	tkImage.$(OBJEXT) \
	tkImgBmap.$(OBJEXT) \
	tkImgGIF.$(OBJEXT) \
	tkImgPPM.$(OBJEXT) \
	tkImgPhoto.$(OBJEXT) \
	tkImgUtil.$(OBJEXT) \
	tkListbox.$(OBJEXT) \
	tkMacWinMenu.$(OBJEXT) \
	tkMain.$(OBJEXT) \
	tkMenu.$(OBJEXT) \
	tkMenubutton.$(OBJEXT) \
	tkMenuDraw.$(OBJEXT) \
	tkMessage.$(OBJEXT) \
	tkPanedWindow.$(OBJEXT) \
	tkObj.$(OBJEXT) \
	tkOldConfig.$(OBJEXT) \
	tkOption.$(OBJEXT) \
	tkPack.$(OBJEXT) \
	tkPlace.$(OBJEXT) \
	tkPointer.$(OBJEXT) \
	tkRectOval.$(OBJEXT) \
	tkScale.$(OBJEXT) \
	tkScrollbar.$(OBJEXT) \
	tkSelect.$(OBJEXT) \
	tkStyle.$(OBJEXT) \
	tkText.$(OBJEXT) \
	tkTextBTree.$(OBJEXT) \
	tkTextDisp.$(OBJEXT) \
	tkTextImage.$(OBJEXT) \
	tkTextIndex.$(OBJEXT) \
	tkTextMark.$(OBJEXT) \
	tkTextTag.$(OBJEXT) \
	tkTextWind.$(OBJEXT) \
	tkTrig.$(OBJEXT) \
	tkUndo.$(OBJEXT) \
	tkUtil.$(OBJEXT) \
	tkVisual.$(OBJEXT) \
	tkStubInit.$(OBJEXT) \
	tkStubLib.$(OBJEXT) \
	tkWindow.$(OBJEXT)

STUB_OBJS = \
	tkStubLib.$(OBJEXT) \
	tkStubImg.$(OBJEXT)

TCL_DOCS = "$(TCL_SRC_DIR_NATIVE)"/doc/*.[13n]
TK_DOCS = "$(ROOT_DIR_NATIVE)"/doc/*.[13n]
CORE_DOCS = $(TCL_DOCS) $(TK_DOCS)
d298 1
a298 1
DEMOPROGS = browse hello ixset rmt rolodex square tcolor timer widget
d300 1
a300 2
# Main targets.  The default target -- all -- builds the binaries, 
# performs any post processing on libraries or documents.
d304 3
a306 1
binaries: @@LIBRARIES@@ $(WISH)
d310 90
a399 2
$(ROOT_DIR)/doc/man.macros:
	$(INSTALL_DATA) "$(TCL_SRC_DIR)/doc/man.macros" "$(ROOT_DIR)/doc/man.macros"
d401 1
a401 1
doc: $(ROOT_DIR)/doc/man.macros
d403 5
a407 8
winhelp: $(TCL_SRC_DIR_NATIVE)/tools/man2help.tcl $(MAN2TCL)
	TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	$(TCLSH_PROG) "$(TCL_SRC_DIR_NATIVE)/tools/man2help.tcl" tcl "$(VER)" $(CORE_DOCS)
	$(COPY) "$(TCL_BIN_DIR)"/tcl.hpj ./
	hcw /c /e tcl.hpj
	$(COPY) ./tcl$(VER).cnt ./TCL$(VER).HLP "$(TCL_SRC_DIR_NATIVE)"/tools/
d409 2
a410 2
$(MAN2TCL): $(TCL_SRC_DIR_NATIVE)/tools/man2tcl.c
	$(CC) $(CFLAGS_OPTIMIZE) $(MAN2TCLFLAGS) -o $(MAN2TCL) "$(TCL_SRC_DIR_NATIVE)"/tools/man2tcl.c
d412 2
a413 3
# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"
a414 6
test: binaries $(TKTEST)
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(TKTEST) "$(ROOT_DIR_NATIVE)/tests/all.tcl" $(TESTFLAGS) \
	| ./$(CAT32)
d416 1
a416 5
runtest: binaries $(TKTEST)
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(TKTEST) $(TESTFLAGS) $(SCRIPT)
d418 2
a419 7
# This target can be used to run wish from the build directory
# via `make shell` or `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(TCL_SRC_DIR_NATIVE)/library"; export TCL_LIBRARY; \
	TK_LIBRARY="$(ROOT_DIR_NATIVE)/library"; export TK_LIBRARY; \
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	./$(WISH) $(SCRIPT)
d421 2
a422 7
# This target can be used to run wish inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(TCL_SRC_DIR_NATIVE)/library" > gdb.run
	@@echo "set env TK_LIBRARY=$(ROOT_DIR_NATIVE)/library" >> gdb.run
	PATH="$(PATH):$(TCL_BIN_DIR)"; export PATH; \
	gdb ./$(WISH) --command=gdb.run
	@@$(RM) gdb.run
d424 1
a424 1
install: all install-binaries install-libraries install-doc install-demos
d427 1
a427 1
	@@for i in $(LIB_INSTALL_DIR) $(BIN_INSTALL_DIR) $(PKG_INSTALL_DIR); \
d436 9
a444 1
	@@for i in $(TK_DLL_FILE) $(WISH); \
d451 1
a451 9
	@@echo "Creating package index $(PKG_INDEX)"; 
	@@$(RM) $(PKG_INDEX);
	@@(\
	echo "if {[package vcompare [package provide Tcl]\
		$(TCLVERSION)] != 0} { return }";\
	echo "package ifneeded Tk $(VERSION)\
		[list load [file join \$$dir .. .. bin $(TK_DLL_FILE)] Tk]";\
	) > $(PKG_INDEX);
	@@for i in tkConfig.sh $(TK_LIB_FILE) $(TK_STUB_LIB_FILE); \
d458 20
d480 2
a481 4
	@@for i in $(INSTALL_ROOT)$(prefix)/lib \
		$(INCLUDE_INSTALL_DIR) $(INCLUDE_INSTALL_DIR)/X11 \
		$(SCRIPT_INSTALL_DIR) $(SCRIPT_INSTALL_DIR)/images \
		$(SCRIPT_INSTALL_DIR)/msgs; \
a485 1
		chmod 755 $$i; \
d489 1
a489 3
	@@echo "Installing header files to $(INCLUDE_INSTALL_DIR)/";
	@@for i in $(GENERIC_DIR)/tk.h $(GENERIC_DIR)/tkPlatDecls.h \
		$(GENERIC_DIR)/tkIntXlibDecls.h $(GENERIC_DIR)/tkDecls.h ; \
d491 5
a495 1
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR); \
d497 3
a499 1
	@@for i in $(XLIB_DIR)/X11/*.h; \
d501 1
a501 1
	    $(INSTALL_DATA) $$i $(INCLUDE_INSTALL_DIR)/X11; \
d504 1
a504 2
	@@for i in $(ROOT_DIR)/library/*.tcl $(GENERIC_DIR)/prolog.ps \
	        $(ROOT_DIR)/library/tclIndex $(UNIX_DIR)/tkAppInit.c; \
d506 1
a506 1
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
d508 2
a509 2
	@@echo "Installing library images directory";
	@@for i in $(ROOT_DIR)/library/images/*; \
d511 1
a511 3
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/images; \
	    fi; \
d513 2
a514 2
	@@echo "Installing translation directory";
	@@for i in $(ROOT_DIR)/library/msgs/*.msg; \
d516 1
a516 3
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/msgs; \
	    fi; \
d518 2
a519 5

install-demos:
	@@for i in $(INSTALL_ROOT)$(prefix)/lib $(SCRIPT_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR)/demos \
		$(SCRIPT_INSTALL_DIR)/demos/images ; \
d521 1
a521 6
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) $$i; \
		chmod 755 $$i; \
		else true; \
		fi; \
d523 2
a524 2
	@@echo "Installing demos to $(SCRIPT_INSTALL_DIR)/demos/";
	@@for i in $(ROOT_DIR)/library/demos/*; \
d526 1
a526 4
	    if [ -f $$i ] ; then \
		sed -e '3 s|exec $(WISH)|exec $(WISH)|' \
			$$i > $(SCRIPT_INSTALL_DIR)/demos/`basename $$i`; \
	    fi; \
d528 2
a529 1
	@@for i in $(DEMOPROGS); \
d531 1
a531 8
	    chmod 755 $(SCRIPT_INSTALL_DIR)/demos/$$i; \
	    done;
	@@echo "Installing demo images";
	@@for i in $(ROOT_DIR)/library/demos/images/*; \
	    do \
	    if [ -f $$i ] ; then \
		$(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR)/demos/images; \
		fi; \
d533 4
d540 3
d544 4
a547 13
$(WISH): $(TK_LIB_FILE) $(TK_STUB_LIB_FILE) $(WISH_OBJS) wish.$(RES)
	$(CC) $(CFLAGS) $(WISH_OBJS) $(TCL_LIB_FILE) $(TK_LIB_FILE) $(LIBS) \
	wish.$(RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)

tktest : $(TKTEST)

$(TKTEST): $(TK_LIB_FILE) $(TKTEST_OBJS) wish.$(RES) $(CAT32)
	$(CC) $(CFLAGS) $(TKTEST_OBJS) $(TCL_LIB_FILE) \
	$(TK_LIB_FILE) $(LIBS) \
	wish.$(RES) $(CC_EXENAME) $(LDFLAGS_WINDOW)

cat32.${OBJEXT}: $(TCL_SRC_DIR)/win/cat.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)
d549 4
a552 2
$(CAT32): cat32.${OBJEXT}
	$(CC) $(CFLAGS) cat32.$(OBJEXT) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d554 5
a558 2
# The following targets are configured by autoconf to generate either
# a shared library or static library
d560 5
a564 4
${TK_STUB_LIB_FILE}: ${STUB_OBJS}
	@@$(RM) ${TK_STUB_LIB_FILE}
	@@MAKE_LIB@@ ${STUB_OBJS}
	@@POST_MAKE_LIB@@
d566 1
a566 8
${TK_DLL_FILE}: ${TK_OBJS} $(TK_RES)
	@@$(RM) ${TK_DLL_FILE}
	@@MAKE_DLL@@ ${TK_OBJS} $(TK_RES) $(SHLIB_LD_LIBS)

${TK_LIB_FILE}: ${TK_OBJS}
	@@$(RM) ${TK_LIB_FILE}
	@@MAKE_LIB@@ ${TK_OBJS}
	@@POST_MAKE_LIB@@
d568 2
a569 33
# Special case object file targets

winMain.$(OBJEXT): winMain.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

testMain.$(OBJEXT): winMain.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ -DTK_TEST $(CC_OBJNAME)

tkTest.$(OBJEXT): tkTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tkWinTest.$(OBJEXT): tkWinTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tkSquare.$(OBJEXT): tkSquare.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

# Add the object extension to the implicit rules.  By default .obj is not
# automatically added.

.SUFFIXES: .${OBJEXT}
.SUFFIXES: .$(RES)
.SUFFIXES: .rc

# Implicit rule for all object files that will end up in the Tcl library

.c.$(OBJEXT):
	$(CC) -c $(STUB_CC_SWITCHES) -DBUILD_tk @@DEPARG@@ $(CC_OBJNAME)

.rc.$(RES):
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(TCL_GENERIC_NATIVE)" @@RC_INCLUDE@@ "$(RC_DIR_NATIVE)" @@DEPARG@@

depend:
d572 1
a572 1
	$(RM) *.hlp *.cnt *.hpj *.GID *.rtf man2tcl${EXEEXT}
d575 2
a576 2
	$(RM) *.lib *.a *.exp *.dll *.res *.${OBJEXT} *~ \#* TAGS a.out
	$(RM) $(WISH) $(TKTEST) $(CAT32)
d580 2
a581 4
	$(RM) Makefile config.status config.cache config.log tkConfig.sh

Makefile: $(SRC_DIR)/Makefile.in
	./config.status
d587 3
a589 3
$(GENERIC_DIR)/tkStubInit.c: $(GENERIC_DIR)/tk.decls \
		$(GENERIC_DIR)/tkInt.decls
	@@echo "Warning: tkStubInit.c may be out of date."
d594 1
a594 1
	$(TCL_EXE) "$(TCL_TOOL_DIR}\genStubs.tcl" \
d596 2
a597 2
	    "$(GENERIC_DIR_NATIVE)\tk.decls" \
            "$(GENERIC_DIR_NATIVE)\tkInt.decls"
@


1.1.1.5
log
@one more time: import tcl 8.4.0
@
text
@d1 1
a1 2
#
# This file is a Makefile for Tcl.  If it has the name "Makefile.in"
d7 1
a7 1
# RCS: @@(#) $Id: Makefile.in,v 1.65 2002/08/22 00:52:33 andreas_kupries Exp $
d9 2
a10 1
VERSION = @@TCL_VERSION@@
d37 1
a37 1
INSTALL_ROOT	=
d39 2
a40 2
# Directory from which applications will reference the library of Tcl
# scripts (note: you can set the TCL_LIBRARY environment variable at
d42 1
a42 1
TCL_LIBRARY	= $(prefix)/lib/tcl$(VERSION)
d47 1
a47 1
# Directory in which to install the program tclsh:
d50 1
a50 1
# Directory in which to install the .a or .so binary for the Tcl library:
d53 2
a54 2
# Path name to use when installing library scripts.
SCRIPT_INSTALL_DIR	= $(INSTALL_ROOT)$(TCL_LIBRARY)
d56 1
a56 1
# Directory in which to install the include file tcl.h:
d59 1
a59 1
# Top-level directory in which to install manual entries:
d62 2
a63 2
# Directory in which to install manual entry for tclsh:
MAN1_INSTALL_DIR = $(MAN_INSTALL_DIR)/man1
d65 1
a65 1
# Directory in which to install manual entries for Tcl's C library
d67 1
a67 1
MAN3_INSTALL_DIR = $(MAN_INSTALL_DIR)/man3
d70 2
a71 2
# Tcl commands:
MANN_INSTALL_DIR = $(MAN_INSTALL_DIR)/mann
d74 1
a74 4
TCL_DBGX = @@TCL_DBGX@@

# warning flags
CFLAGS_WARNING = @@CFLAGS_WARNING@@
d76 2
a77 3
# The default switches for optimization or debugging
CFLAGS_DEBUG    = @@CFLAGS_DEBUG@@
CFLAGS_OPTIMIZE	= @@CFLAGS_OPTIMIZE@@
d79 2
a80 12
# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS = 		$(CFLAGS_DEBUG)
#CFLAGS = 		$(CFLAGS_OPTIMIZE)
#CFLAGS = 		$(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS = 		@@CFLAGS@@ @@CFLAGS_DEFAULT@@ @@MEM_DEBUG_FLAGS@@

# To enable compilation debugging reverse the comment characters on
# one of the following lines.
COMPILE_DEBUG_FLAGS =
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG
#COMPILE_DEBUG_FLAGS = -DTCL_COMPILE_DEBUG -DTCL_COMPILE_STATS
d82 12
a93 8
# Special compiler flags to use when building man2tcl on Windows.
MAN2TCLFLAGS =		@@MAN2TCLFLAGS@@

SRC_DIR			= @@srcdir@@
ROOT_DIR		= @@srcdir@@/..
GENERIC_DIR		= @@srcdir@@/../generic
WIN_DIR			= @@srcdir@@
COMPAT_DIR		= @@srcdir@@/../compat
d98 3
a100 3
GENERIC_DIR_NATIVE	= $(shell $(CYGPATH) '$(GENERIC_DIR)')
WIN_DIR_NATIVE		= $(shell $(CYGPATH) '$(WIN_DIR)')
ROOT_DIR_NATIVE		= $(shell $(CYGPATH) '$(ROOT_DIR)')
d102 17
a118 1
LIBRARY_DIR   = $(shell echo '$(ROOT_DIR_NATIVE)/library' | sed 's/\\/\//g' )
d124 3
a126 12
TCL_STUB_LIB_FILE	= @@TCL_STUB_LIB_FILE@@
TCL_DLL_FILE		= @@TCL_DLL_FILE@@
TCL_LIB_FILE		= @@TCL_LIB_FILE@@
DDE_DLL_FILE		= tcldde$(DDEVER)${DLLSUFFIX}
DDE_LIB_FILE		= tcldde$(DDEVER)${LIBSUFFIX}
REG_DLL_FILE		= tclreg$(REGVER)${DLLSUFFIX}
REG_LIB_FILE		= tclreg$(REGVER)${LIBSUFFIX}
PIPE_DLL_FILE		= tclpip$(VER)${DLLSUFFIX}

SHARED_LIBRARIES 	= $(TCL_DLL_FILE) $(TCL_STUB_LIB_FILE) \
			  $(DDE_DLL_FILE) $(REG_DLL_FILE) $(PIPE_DLL_FILE)
STATIC_LIBRARIES	= $(TCL_LIB_FILE) $(REG_LIB_FILE) $(DDE_LIB_FILE)
d128 2
a129 6
# TCL_EXE is the name of a tclsh executable that is available *BEFORE*
# running make for the first time. Certain build targets (make genstubs)
# need it to be available on the PATH. This executable should *NOT* be
# required just to do a normal build although it can be required to run
# make dist.
TCL_EXE			= tclsh
d131 2
a132 2
TCLSH			= tclsh$(VER)${EXESUFFIX}
TCLTEST			= tcltest${EXEEXT}
d142 22
a163 1
VPATH = $(GENERIC_DIR):$(WIN_DIR):$(COMPAT_DIR)
d170 1
a172 2
LDFLAGS_DEBUG   = @@LDFLAGS_DEBUG@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
d180 1
a180 1
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@ $(LIBS)
d183 3
a185 8
VER		= @@TCL_MAJOR_VERSION@@@@TCL_MINOR_VERSION@@
DOTVER		= @@TCL_MAJOR_VERSION@@.@@TCL_MINOR_VERSION@@
DDEVER		= @@TCL_DDE_MAJOR_VERSION@@@@TCL_DDE_MINOR_VERSION@@
DDEDOTVER	= @@TCL_DDE_MAJOR_VERSION@@.@@TCL_DDE_MINOR_VERSION@@
REGVER		= @@TCL_REG_MAJOR_VERSION@@@@TCL_REG_MINOR_VERSION@@
REGDOTVER	= @@TCL_REG_MAJOR_VERSION@@.@@TCL_REG_MINOR_VERSION@@
LIBS		= @@LIBS@@

d192 13
a204 3
CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${TCL_SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" ${AC_FLAGS} \
${COMPILE_DEBUG_FLAGS}
d209 2
a210 104
STUB_CC_SWITCHES = ${CFLAGS} ${CFLAGS_WARNING} ${SHLIB_CFLAGS} \
-I"${GENERIC_DIR_NATIVE}" -I"${WIN_DIR_NATIVE}" ${AC_FLAGS} \
${COMPILE_DEBUG_FLAGS}

TCLTEST_OBJS = \
	tclTest.$(OBJEXT) \
	tclTestObj.$(OBJEXT) \
	tclTestProcBodyObj.$(OBJEXT) \
	tclThreadTest.$(OBJEXT) \
	tclWinTest.$(OBJEXT) \
	testMain.$(OBJEXT)

GENERIC_OBJS = \
	regcomp.$(OBJEXT) \
	regexec.$(OBJEXT) \
	regfree.$(OBJEXT) \
	regerror.$(OBJEXT) \
	tclAlloc.$(OBJEXT) \
	tclAsync.$(OBJEXT) \
	tclBasic.$(OBJEXT) \
	tclBinary.$(OBJEXT) \
	tclCkalloc.$(OBJEXT) \
	tclClock.$(OBJEXT) \
	tclCmdAH.$(OBJEXT) \
	tclCmdIL.$(OBJEXT) \
	tclCmdMZ.$(OBJEXT) \
	tclCompCmds.$(OBJEXT) \
	tclCompExpr.$(OBJEXT) \
	tclCompile.$(OBJEXT) \
	tclDate.$(OBJEXT) \
	tclEncoding.$(OBJEXT) \
	tclEnv.$(OBJEXT) \
	tclEvent.$(OBJEXT) \
	tclExecute.$(OBJEXT) \
	tclFCmd.$(OBJEXT) \
	tclFileName.$(OBJEXT) \
	tclGet.$(OBJEXT) \
	tclHash.$(OBJEXT) \
	tclHistory.$(OBJEXT) \
	tclIndexObj.$(OBJEXT) \
	tclInterp.$(OBJEXT) \
	tclIO.$(OBJEXT) \
	tclIOCmd.$(OBJEXT) \
	tclIOGT.$(OBJEXT) \
	tclIOSock.$(OBJEXT) \
	tclIOUtil.$(OBJEXT) \
	tclLink.$(OBJEXT) \
	tclLiteral.$(OBJEXT) \
	tclListObj.$(OBJEXT) \
	tclLoad.$(OBJEXT) \
	tclMain.$(OBJEXT) \
	tclNamesp.$(OBJEXT) \
	tclNotify.$(OBJEXT) \
	tclObj.$(OBJEXT) \
	tclPanic.$(OBJEXT) \
	tclParse.$(OBJEXT) \
	tclParseExpr.$(OBJEXT) \
	tclPipe.$(OBJEXT) \
	tclPkg.$(OBJEXT) \
	tclPosixStr.$(OBJEXT) \
	tclPreserve.$(OBJEXT) \
	tclProc.$(OBJEXT) \
	tclRegexp.$(OBJEXT) \
	tclResolve.$(OBJEXT) \
	tclResult.$(OBJEXT) \
	tclScan.$(OBJEXT) \
	tclStringObj.$(OBJEXT) \
	tclStubInit.$(OBJEXT) \
	tclStubLib.$(OBJEXT) \
	tclThread.$(OBJEXT) \
	tclThreadAlloc.$(OBJEXT) \
	tclThreadJoin.$(OBJEXT) \
	tclTimer.$(OBJEXT) \
	tclUtf.$(OBJEXT) \
	tclUtil.$(OBJEXT) \
	tclVar.$(OBJEXT)

WIN_OBJS = \
	tclWin32Dll.$(OBJEXT) \
	tclWinChan.$(OBJEXT) \
	tclWinConsole.$(OBJEXT) \
	tclWinSerial.$(OBJEXT) \
	tclWinError.$(OBJEXT) \
	tclWinFCmd.$(OBJEXT) \
	tclWinFile.$(OBJEXT) \
	tclWinInit.$(OBJEXT) \
	tclWinLoad.$(OBJEXT) \
	tclWinMtherr.$(OBJEXT) \
	tclWinNotify.$(OBJEXT) \
	tclWinPipe.$(OBJEXT) \
	tclWinSock.$(OBJEXT) \
	tclWinThrd.$(OBJEXT) \
	tclWinTime.$(OBJEXT) 

COMPAT_OBJS = \
	strftime.$(OBJEXT) strtoll.$(OBJEXT) strtoull.$(OBJEXT)

PIPE_OBJS = stub16.$(OBJEXT)

DDE_OBJS = tclWinDde.$(OBJEXT)

REG_OBJS = tclWinReg.$(OBJEXT)

STUB_OBJS = tclStubLib.$(OBJEXT)
d212 135
a346 1
TCLSH_OBJS = tclAppInit.$(OBJEXT)
d348 1
a348 1
TCL_OBJS = ${GENERIC_OBJS} ${WIN_OBJS} ${COMPAT_OBJS}
d350 2
a351 1
TCL_DOCS = "$(ROOT_DIR_NATIVE)"/doc/*.[13n]
d355 1
a355 1
tcltest: $(TCLTEST)
d357 1
a357 1
binaries: @@LIBRARIES@@ $(TCLSH)
d359 2
a360 1
libraries:
d362 1
a362 1
doc:
d364 6
a369 3
winhelp: $(ROOT_DIR)/tools/man2help.tcl $(MAN2TCL)
	TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) "$(ROOT_DIR_NATIVE)"/tools/man2help.tcl tcl "$(VER)" $(TCL_DOCS)
d371 1
d373 2
a374 2
$(MAN2TCL): $(ROOT_DIR)/tools/man2tcl.c
	$(CC) $(CFLAGS_OPTIMIZE) $(MAN2TCLFLAGS) -o $(MAN2TCL) "$(ROOT_DIR_NATIVE)"/tools/man2tcl.c
d376 3
a378 7
$(TCLSH): $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE) $(TCLSH_OBJS) tclsh.$(RES)
	$(CC) $(CFLAGS) $(TCLSH_OBJS) $(TCL_LIB_FILE) $(LIBS) \
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)

$(TCLTEST): $(TCL_LIB_FILE) $(TCLTEST_OBJS) $(CAT32) tclsh.$(RES)
	$(CC) $(CFLAGS) $(TCLTEST_OBJS) $(TCL_LIB_FILE) $(LIBS) \
        tclsh.$(RES) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d380 6
a385 2
cat32.$(OBJEXT): cat.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)
d387 5
a391 2
$(CAT32): cat32.$(OBJEXT)
	$(CC) $(CFLAGS) cat32.$(OBJEXT) $(CC_EXENAME) $(LDFLAGS_CONSOLE)
d393 7
a399 2
# The following targets are configured by autoconf to generate either
# a shared library or static library
d401 7
a407 60
${TCL_STUB_LIB_FILE}: ${STUB_OBJS}
	@@$(RM) ${TCL_STUB_LIB_FILE}
	@@MAKE_LIB@@ ${STUB_OBJS}
	@@POST_MAKE_LIB@@

${TCL_DLL_FILE}: ${TCL_OBJS} tcl.$(RES)
	@@$(RM) ${TCL_DLL_FILE}
	@@MAKE_DLL@@ ${TCL_OBJS} tcl.$(RES) $(SHLIB_LD_LIBS)

${TCL_LIB_FILE}: ${TCL_OBJS}
	@@$(RM) ${TCL_LIB_FILE}
	@@MAKE_LIB@@ ${TCL_OBJS}
	@@POST_MAKE_LIB@@

${DDE_DLL_FILE}: ${DDE_OBJS} ${TCL_STUB_LIB_FILE}
	@@$(RM) ${DDE_DLL_FILE}
	@@MAKE_DLL@@ ${DDE_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)

${DDE_LIB_FILE}: ${DDE_OBJS} ${TCL_LIB_FILE}
	@@$(RM) ${DDE_LIB_FILE}
	@@MAKE_LIB@@ ${DDE_OBJS} ${TCL_LIB_FILE}

${REG_DLL_FILE}: ${REG_OBJS} ${TCL_STUB_LIB_FILE}
	@@$(RM) ${REG_DLL_FILE}
	@@MAKE_DLL@@ ${REG_OBJS} $(TCL_STUB_LIB_FILE) $(SHLIB_LD_LIBS)

${REG_LIB_FILE}: ${REG_OBJS} ${TCL_LIB_FILE}
	@@$(RM) ${REG_LIB_FILE}
	@@MAKE_LIB@@ ${REG_OBJS} ${TCL_LIB_FILE}

# PIPE_DLL_FILE is actually an executable, don't build it
# like a DLL.

${PIPE_DLL_FILE}: ${PIPE_OBJS}
	@@$(RM) ${PIPE_DLL_FILE}
	@@MAKE_EXE@@ $(CFLAGS) ${PIPE_OBJS} $(LIBS) $(LDFLAGS_CONSOLE)

# Add the object extension to the implicit rules.  By default .obj is not
# automatically added.

.SUFFIXES: .${OBJEXT}
.SUFFIXES: .$(RES)
.SUFFIXES: .rc

# Special case object targets

tclWinInit.${OBJEXT}: tclWinInit.c
	$(CC) -c $(CC_SWITCHES) -DBUILD_tcl $(EXTFLAGS) @@DEPARG@@ $(CC_OBJNAME)

testMain.${OBJEXT}: tclAppInit.c
	$(CC) -c $(CC_SWITCHES) -DTCL_TEST @@DEPARG@@ $(CC_OBJNAME)

tclTest.${OBJEXT}: tclTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclTestObj.${OBJEXT}: tclTestObj.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

tclWinTest.${OBJEXT}: tclWinTest.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)
d409 1
a409 27
tclAppInit.${OBJEXT} : tclAppInit.c
	$(CC) -c $(CC_SWITCHES) @@DEPARG@@ $(CC_OBJNAME)

# The following objects should be built using the stub interfaces

tclWinReg.${OBJEXT} : tclWinReg.c
	$(CC) -c $(CC_SWITCHES) -DUSE_TCL_STUBS @@DEPARG@@ $(CC_OBJNAME)

tclWinDde.${OBJEXT} : tclWinDde.c
	$(CC) -c $(CC_SWITCHES) -DUSE_TCL_STUBS @@DEPARG@@ $(CC_OBJNAME)

# The following objects are part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported

tclStubLib.${OBJEXT}: tclStubLib.c
	$(CC) -c $(CC_SWITCHES) -DSTATIC_BUILD @@DEPARG@@ $(CC_OBJNAME)


# Implicit rule for all object files that will end up in the Tcl library

.c.${OBJEXT}:
	$(CC) -c $(CC_SWITCHES) -DBUILD_tcl @@DEPARG@@ $(CC_OBJNAME)

.rc.$(RES):
	$(RC) @@RC_OUT@@ $@@ @@RC_TYPE@@ @@RC_DEFINES@@ @@RC_INCLUDE@@ "$(GENERIC_DIR_NATIVE)" @@RC_INCLUDE@@ "$(WIN_DIR_NATIVE)" @@DEPARG@@

install: all install-binaries install-libraries install-doc
d412 1
a412 1
	@@for i in "$(LIB_INSTALL_DIR)" "$(BIN_INSTALL_DIR)" ; \
d421 1
a421 9
	@@for i in dde1.2 reg1.0; \
	    do \
	    if [ ! -d $(LIB_INSTALL_DIR)/$$i ] ; then \
		echo "Making directory $(LIB_INSTALL_DIR)/$$i"; \
		$(MKDIR) $(LIB_INSTALL_DIR)/$$i; \
		else true; \
		fi; \
	    done;
	@@for i in $(TCL_DLL_FILE) $(TCLSH) $(PIPE_DLL_FILE); \
d428 9
a436 1
	@@for i in tclConfig.sh $(TCL_LIB_FILE) $(TCL_STUB_LIB_FILE); \
a442 20
	@@if [ -f $(DDE_DLL_FILE) ]; then \
	    echo installing $(DDE_DLL_FILE); \
	    $(COPY) $(DDE_DLL_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    $(COPY) $(ROOT_DIR)/library/dde/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/dde1.2; \
	    fi
	@@if [ -f $(DDE_LIB_FILE) ]; then \
	    echo installing $(DDE_LIB_FILE); \
	    $(COPY) $(DDE_LIB_FILE) $(LIB_INSTALL_DIR)/dde1.2; \
	    fi
	@@if [ -f $(REG_DLL_FILE) ]; then \
	    echo installing $(REG_DLL_FILE); \
	    $(COPY) $(REG_DLL_FILE) $(LIB_INSTALL_DIR)/reg1.0; \
	    $(COPY) $(ROOT_DIR)/library/reg/pkgIndex.tcl \
		$(LIB_INSTALL_DIR)/reg1.0; \
	    fi
	@@if [ -f $(REG_LIB_FILE) ]; then \
	    echo installing $(REG_LIB_FILE); \
	    $(COPY) $(REG_LIB_FILE) $(LIB_INSTALL_DIR)/reg1.0; \
	    fi
d445 4
a448 2
	@@for i in $(prefix)/lib $(INCLUDE_INSTALL_DIR) \
		$(SCRIPT_INSTALL_DIR); \
d453 1
d457 3
a459 1
	@@for i in http1.0 http2.4 opt0.4 encoding msgcat1.3 tcltest2.2; \
d461 1
a461 5
	    if [ ! -d $(SCRIPT_INSTALL_DIR)/$$i ] ; then \
		echo "Making directory $(SCRIPT_INSTALL_DIR)/$$i"; \
		$(MKDIR) $(SCRIPT_INSTALL_DIR)/$$i; \
		else true; \
		fi; \
d463 1
a463 3
	@@echo "Installing header files";
	@@for i in "$(GENERIC_DIR)/tcl.h" "$(GENERIC_DIR)/tclDecls.h" \
		"$(GENERIC_DIR)/tclPlatDecls.h" ; \
d465 1
a465 1
	    $(COPY) "$$i" "$(INCLUDE_INSTALL_DIR)"; \
d468 2
a469 1
	@@for i in $(ROOT_DIR)/library/*.tcl $(ROOT_DIR)/library/tclIndex; \
d471 1
a471 1
	    $(COPY) "$$i" "$(SCRIPT_INSTALL_DIR)"; \
d473 2
a474 2
	@@echo "Installing library http1.0 directory";
	@@for j in $(ROOT_DIR)/library/http1.0/*.tcl; \
d476 3
a478 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http1.0"; \
d480 2
a481 2
	@@echo "Installing library http2.4 directory";
	@@for j in $(ROOT_DIR)/library/http/*.tcl; \
d483 3
a485 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/http2.4"; \
d487 5
a491 2
	@@echo "Installing library opt0.4 directory";
	@@for j in $(ROOT_DIR)/library/opt/*.tcl; \
d493 6
a498 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/opt0.4"; \
d500 2
a501 2
	@@echo "Installing library msgcat1.3 directory";
	@@for j in $(ROOT_DIR)/library/msgcat/*.tcl; \
d503 4
a506 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/msgcat1.3"; \
d508 1
a508 2
	@@echo "Installing library tcltest2.2 directory";
	@@for j in $(ROOT_DIR)/library/tcltest/*.tcl; \
d510 8
a517 1
	    $(COPY) "$$j" "$(SCRIPT_INSTALL_DIR)/tcltest2.2"; \
a518 4
	@@echo "Installing encodings";
	@@for i in $(ROOT_DIR)/library/encoding/*.enc ; do \
		$(COPY) "$$i" "$(SCRIPT_INSTALL_DIR)/encoding"; \
	done;
a521 3
# Specifying TESTFLAGS on the command line is the standard way to pass
# args to tcltest, ie:
#	% make test TESTFLAGS="-verbose bps -file fileName.test"
d523 57
a579 4
test: binaries $(TCLTEST)
	TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLTEST) "$(ROOT_DIR_NATIVE)/tests/all.tcl" $(TESTFLAGS) \
	| ./$(CAT32)
d581 1
a581 4
# Useful target to launch a built tcltest with the proper path,...
runtest: binaries $(TCLTEST)
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLTEST) $(TESTFLAGS) $(SCRIPT)
d583 2
a584 5
# This target can be used to run tclsh from the build directory
# via `make shell SCRIPT=foo.tcl`
shell: binaries
	@@TCL_LIBRARY="$(LIBRARY_DIR)"; export TCL_LIBRARY; \
	./$(TCLSH) $(SCRIPT)
d586 2
a587 5
# This target can be used to run tclsh inside either gdb or insight
gdb: binaries
	@@echo "set env TCL_LIBRARY=$(LIBRARY_DIR)" > gdb.run
	gdb ./tclsh --command=gdb.run
	rm gdb.run
a590 3
Makefile: $(SRC_DIR)/Makefile.in
	./config.status

d592 1
a592 1
	$(RM) *.hlp *.cnt *.GID *.rtf man2tcl.exe
d595 2
a596 2
	$(RM) *.lib *.a *.exp *.dll *.$(RES) *.${OBJEXT} *~ \#* TAGS a.out
	$(RM) $(TCLSH) $(TCLTEST) $(CAT32)
d600 4
a603 2
	$(RM) Makefile config.status config.cache config.log tclConfig.sh \
		tcl.hpj
d609 3
a611 3
$(GENERIC_DIR)/tclStubInit.c: $(GENERIC_DIR)/tcl.decls \
		$(GENERIC_DIR)/tclInt.decls
	@@echo "Warning: tclStubInit.c may be out of date."
d616 1
a616 1
	$(TCL_EXE) "$(ROOT_DIR_NATIVE)\tools\genStubs.tcl" \
d618 2
a619 2
	    "$(GENERIC_DIR_NATIVE)\tcl.decls" \
            "$(GENERIC_DIR_NATIVE)\tclInt.decls"
@


1.1.1.6
log
@import tcl 8.4.1
@
text
@d8 1
a8 1
# RCS: @@(#) $Id: Makefile.in,v 1.67 2002/10/22 18:56:28 hobbs Exp $
d88 1
a88 1
CFLAGS = 		@@CFLAGS@@ @@CFLAGS_DEFAULT@@
d436 1
a436 1
	@@for i in dde1.2 reg1.1; \
d470 1
a470 1
	    $(COPY) $(REG_DLL_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
d472 1
a472 1
		$(LIB_INSTALL_DIR)/reg1.1; \
d476 1
a476 1
	    $(COPY) $(REG_LIB_FILE) $(LIB_INSTALL_DIR)/reg1.1; \
@


