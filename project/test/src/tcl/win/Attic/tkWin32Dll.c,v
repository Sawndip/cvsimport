head	1.2;
access;
symbols
	TK_8_4_0:1.1.1.1 NET:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2002.09.24.22.50.17;	author kseitz;	state dead;
branches;
next	1.1;

1.1
date	2002.09.24.20.24.49;	author kseitz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.24.20.24.49;	author kseitz;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.25.01.43.25;	author kseitz;	state dead;
branches;
next	;


desc
@@


1.2
log
@Remove botched merge files
@
text
@/* 
 * tkWin32Dll.c --
 *
 *	This file contains a stub dll entry point.
 *
 * Copyright (c) 1995 Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tkWin32Dll.c,v 1.1 2002/09/24 20:24:49 kseitz Exp $
 */

#include "tkWinInt.h"

/*
 * The following declaration is for the VC++ DLL entry point.
 */

BOOL APIENTRY		DllMain _ANSI_ARGS_((HINSTANCE hInst,
			    DWORD reason, LPVOID reserved));

/*
 *----------------------------------------------------------------------
 *
 * DllEntryPoint --
 *
 *	This wrapper function is used by Borland to invoke the
 *	initialization code for Tk.  It simply calls the DllMain
 *	routine.
 *
 * Results:
 *	See DllMain.
 *
 * Side effects:
 *	See DllMain.
 *
 *----------------------------------------------------------------------
 */

BOOL APIENTRY
DllEntryPoint(hInst, reason, reserved)
    HINSTANCE hInst;		/* Library instance handle. */
    DWORD reason;		/* Reason this function is being called. */
    LPVOID reserved;		/* Not used. */
{
    return DllMain(hInst, reason, reserved);
}

/*
 *----------------------------------------------------------------------
 *
 * DllMain --
 *
 *	DLL entry point.
 *
 * Results:
 *	TRUE on sucess, FALSE on failure.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

BOOL APIENTRY
DllMain(hInstance, reason, reserved)
    HINSTANCE hInstance;
    DWORD reason;
    LPVOID reserved;
{

    /*
     * If we are attaching to the DLL from a new process, tell Tk about
     * the hInstance to use. If we are detaching then clean up any
     * data structures related to this DLL.
     */
    
    if (reason == DLL_PROCESS_ATTACH) {
        TkWinXInit(hInstance);
    } else if (reason == DLL_PROCESS_DETACH) {
        TkWinXCleanup(hInstance);
    }
    return(TRUE);
}
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id: tkWin32Dll.c,v 1.4 2000/03/31 09:24:26 hobbs Exp $
@


1.1.1.1
log
@import tk 8.4.0
@
text
@@


1.1.1.2
log
@Remove bothced merge files and old files no longer in tcl distribution.
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id: tkWin32Dll.c,v 1.1.1.1 2002/09/24 20:24:49 kseitz Exp $
@

