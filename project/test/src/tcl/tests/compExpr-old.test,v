head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.60
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.58
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.56
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.54
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.52
	gdb_7_0-branch:1.5.0.50
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.48
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.46
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.44
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.42
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.40
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.38
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.36
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.34
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.32
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.30
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.28
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.26
	gdb_5_1-2001-07-29-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.2
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.2
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TCL_8_4_0:1.1.1.2
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.40.14;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.48.00;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.07;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.08;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	2001.09.09.22.40.58;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.10;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.49;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.37;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.17;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	2001.09.09.22.40.58;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.19.56.34;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@# Commands covered: expr
#
# This file contains the original set of tests for the compilation (and
# indirectly execution) of Tcl's expr command. A new set of tests covering
# the new implementation are in the files "parseExpr.test" and
# "compExpr.test". Sourcing this file into Tcl runs the tests and generates
# output for errors. No output means no errors were found.
#
# Copyright (c) 1996-1997 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: compExpr-old.test,v 1.7 2001/12/06 10:59:17 dkf Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

if {([catch {expr T1()} msg] == 1) && ($msg == {unknown math function "T1"})} {
    set gotT1 0
    puts "This application hasn't been compiled with the \"T1\" and"
    puts "\"T2\" math functions, so I'll skip some of the expr tests."
} else {
    set gotT1 1
}

# procedures used below

proc put_hello_char {c} {
    global a
    append a [format %c $c]
    return $c
}
proc hello_world {} {
    global a
    set a ""
    set L1 [set l0 [set h_1 [set q 0]]]
    for {put_hello_char [expr [put_hello_char [expr [set h 7]*10+2]]+29]} {$l0?[put_hello_char $l0]
        :!$h_1} {put_hello_char $ll;expr {$L1==2?[set ll [expr 32+0-0+[set bar 0]]]:0}} {expr {[incr L1]==[expr 1+([string length "abc"]-[string length "abc"])]
        ?[set ll [set l0 [expr 54<<1]]]:$ll==108&&$L1<3?
        [incr ll [expr 1|1<<1]; set ll $ll; set ll $ll; set ll $ll; set ll $ll; set l0 [expr ([string length "abc"]-[string length "abc"])+([string length "abc"]-[string length "abc"])-([string length "abc"]-[string length "abc"])+([string length "abc"]-[string length "abc"])]; set l0; set l0 $l0; set l0; set l0]:$L1==4&&$ll==32?[set ll [expr 19+$h1+([string length "abc"]-[string length "abc"])-([string length "abc"]-[string length "abc"])+([string length "abc"]-[string length "abc"])-([string length "abc"]-[string length "abc"])+[set foo [expr ([string length "abc"]-[string length "abc"])+([string length "abc"]-[string length "abc"])+([string length "abc"]-[string length "abc"])]]]]
        :[set q [expr $q-$h1+([string length "abc"]-[string length "abc"])-([string length "abc"]-[string length "abc"])]]};expr {$L1==5?[incr ll -8; set ll $ll; set ll]:$q&&$h1&&1};expr {$L1==4+2
        ?[incr ll 3]:[expr ([string length "abc"]-[string length "abc"])+1]};expr {$ll==($h<<4)+2+0&&$L1!=6?[incr ll -6]:[set h1 [expr 100+([string length "abc"]-[string length "abc"])-([string length "abc"]-[string length "abc"])]]}
        expr {$L1!=1<<3?[incr q [expr ([string length "abc"]-[string length "abc"])-1]]:[set h_1 [set ll $h1]]}
    }
    set a
}

proc 12days {a b c} {
    global xxx
    expr {1<$a?[expr {$a<3?[12days -79 -13 [string range $c [12days -87 \
	[expr 1-$b] [string range $c [12days -86 0 [string range $c 1 end]] \
	end]] end]]:1};expr {$a<$b?[12days [expr $a+1] $b $c]:3};expr {[12days \
	-94 [expr $a-27] $c]&&$a==2?$b<13?[12days 2 [expr $b+1] "%s %d %d\n"]:9
	:16}]:$a<0?$a<-72?[12days $b $a "@@n'+,#'/*\{\}w+/w#cdnr/+,\{\}r/*de\}+,/*\{*+,/w\{%+,/w#q#n+,/#\{l+,/n\{n+,/+#n+,/#;#q#n+,/+k#;*+,/'r :'d*'3,\}\{w+K w'K:'+\}e#';dq#'l q#'+d'K#!/+k#;q#'r\}eKK#\}w'r\}eKK\{nl\]'/#;#q#n')\{)#\}w')\{)\{nl\]'/+#n';d\}rw' i;# )\{nl\]!/n\{n#'; r\{#w'r nc\{nl\]'/#\{l,+'K \{rw' iK\{;\[\{nl\]'/w#q#n'wk nw' iwk\{KK\{nl\]!/w\{%'l##w#' i; :\{nl\]'/*\{q#'ld;r'\}\{nlwb!/*de\}'c ;;\{nl'-\{\}rw\]'/+,\}##'*\}#nc,',#nw\]'/+kd'+e\}+;#'rdq#w! nr'/ ') \}+\}\{rl#'\{n' ')# \}'+\}##(!!/"]
	:$a<-50?[string compare [format %c $b] [string index $c 0]]==0?[append \
	xxx [string index $c 31];scan [string index $c 31] %c x;set x]
	:[12days -65 $b [string range $c 1 end]]:[12days [expr ([string compare \
	[string index $c 0] "/"]==0)+$a] $b [string range $c 1 end]]:0<$a
	?[12days 2 2 "%s"]:[string compare [string index $c 0] "/"]==0||
	[12days 0 [12days -61 [scan [string index $c 0] %c x; set x] \
	"!ek;dc i@@bK'(q)-\[w\]*%n+r3#l,\{\}:\nuwloca-O;m .vpbks,fxntdCeghiry"] \
	[string range $c 1 end]]}
}
proc do_twelve_days {} {
    global xxx
    set xxx ""
    12days 1 1 1
    string length $xxx
}

# start of tests

catch {unset a b i x}

test compExpr-old-1.1 {TclCompileExprCmd: no expression} {
    list [catch {expr  } msg] $msg
} {1 {wrong # args: should be "expr arg ?arg ...?"}}
test compExpr-old-1.2 {TclCompileExprCmd: one expression word} {
    expr -25
} -25
test compExpr-old-1.3 {TclCompileExprCmd: two expression words} {
    expr -8.2   -6
} -14.2
test compExpr-old-1.4 {TclCompileExprCmd: five expression words} {
    expr 20 - 5 +10 -7
} 18
test compExpr-old-1.5 {TclCompileExprCmd: quoted expression word} {
    expr "0005"
} 5
test compExpr-old-1.6 {TclCompileExprCmd: quoted expression word} {
    catch {expr "0005"zxy} msg
    set msg
} {extra characters after close-quote}
test compExpr-old-1.7 {TclCompileExprCmd: expression word in braces} {
    expr {-0005}
} -5
test compExpr-old-1.8 {TclCompileExprCmd: expression word in braces} {
    expr {{-0x1234}}
} -4660
test compExpr-old-1.9 {TclCompileExprCmd: expression word in braces} {
    catch {expr {-0005}foo} msg
    set msg
} {extra characters after close-brace}
test compExpr-old-1.10 {TclCompileExprCmd: other expression word in braces} {
    expr 4*[llength "6 2"]
} 8
test compExpr-old-1.11 {TclCompileExprCmd: expression word terminated by ;} {
    expr 4*[llength "6 2"];
} 8
test compExpr-old-1.12 {TclCompileExprCmd: inlined expr (in "catch") inside other catch} {
    set a xxx
    catch {
	# Might not be a number
	set a [expr 10*$a]
    }
} 1
test compExpr-old-1.13 {TclCompileExprCmd: second level of substitutions in expr not in braces with single var reference} {
    set a xxx
    set x 27;  set bool {$x};  if $bool {set a foo}
    set a
} foo
test compExpr-old-1.14 {TclCompileExprCmd: second level of substitutions in expr with comparison as top-level operator} {
    set a xxx
    set x 2;  set b {$x};  set a [expr $b == 2]
    set a
} 1

test compExpr-old-2.1 {TclCompileExpr: are builtin functions registered?} {
    expr double(5*[llength "6 2"])
} 10.0
test compExpr-old-2.2 {TclCompileExpr: error in expr} {
    catch {expr 2**3} msg
    set msg
} {syntax error in expression "2**3": unexpected operator *}
test compExpr-old-2.3 {TclCompileExpr: junk after legal expr} {
    catch {expr 7*[llength "a b"]foo} msg
    set msg
} {syntax error in expression "7*2foo": extra tokens at end of expression}
test compExpr-old-2.4 {TclCompileExpr: numeric expr string rep == formatted int rep} {
    expr {0001}
} 1

test compExpr-old-3.1 {CompileCondExpr: just lor expr} {expr 3||0} 1
test compExpr-old-3.2 {CompileCondExpr: error in lor expr} {
    catch {expr x||3} msg
    set msg
} {syntax error in expression "x||3": variable references require preceding $} 
test compExpr-old-3.3 {CompileCondExpr: test true arm} {expr 3>2?44:66} 44
test compExpr-old-3.4 {CompileCondExpr: error compiling true arm} {
    catch {expr 3>2?2**3:66} msg
    set msg
} {syntax error in expression "3>2?2**3:66": unexpected operator *}
test compExpr-old-3.5 {CompileCondExpr: test false arm} {expr 2>3?44:66} 66
test compExpr-old-3.6 {CompileCondExpr: error compiling false arm} {
    catch {expr 2>3?44:2**3} msg
    set msg
} {syntax error in expression "2>3?44:2**3": unexpected operator *}
test compExpr-old-3.7 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.7 which can take several minutes to run"
    hello_world
} {Hello world}
catch {unset xxx}
test compExpr-old-3.8 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.8 which can take several minutes to run"
    do_twelve_days
} 2358
catch {unset xxx}

test compExpr-old-4.1 {CompileLorExpr: just land expr} {expr 1.3&&3.3} 1
test compExpr-old-4.2 {CompileLorExpr: error in land expr} {
    catch {expr x&&3} msg
    set msg
} {syntax error in expression "x&&3": variable references require preceding $} 
test compExpr-old-4.3 {CompileLorExpr: simple lor exprs} {expr 0||1.0} 1
test compExpr-old-4.4 {CompileLorExpr: simple lor exprs} {expr 3.0||0.0} 1
test compExpr-old-4.5 {CompileLorExpr: simple lor exprs} {expr 0||0||1} 1
test compExpr-old-4.6 {CompileLorExpr: error compiling lor arm} {
    catch {expr 2**3||4.0} msg
    set msg
} {syntax error in expression "2**3||4.0": unexpected operator *}
test compExpr-old-4.7 {CompileLorExpr: error compiling lor arm} {
    catch {expr 1.3||2**3} msg
    set msg
} {syntax error in expression "1.3||2**3": unexpected operator *}
test compExpr-old-4.8 {CompileLorExpr: error compiling lor arms} {
    list [catch {expr {"a"||"b"}} msg] $msg
} {1 {expected boolean value but got "a"}}
test compExpr-old-4.9 {CompileLorExpr: long lor arm} {
    set a "abcdefghijkl"
    set i 7
    expr {[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]] || [string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]] || [string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]] || [string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]&&[string compare [format %c $i] [string index $a $i]]}
} 1

test compExpr-old-5.1 {CompileLandExpr: just bitor expr} {expr 7|0x13} 23
test compExpr-old-5.2 {CompileLandExpr: error in bitor expr} {
    catch {expr x|3} msg
    set msg
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-5.3 {CompileLandExpr: simple land exprs} {expr 0&&1.0} 0
test compExpr-old-5.4 {CompileLandExpr: simple land exprs} {expr 0&&0} 0
test compExpr-old-5.5 {CompileLandExpr: simple land exprs} {expr 3.0&&1.2} 1
test compExpr-old-5.6 {CompileLandExpr: simple land exprs} {expr 1&&1&&2} 1
test compExpr-old-5.7 {CompileLandExpr: error compiling land arm} {
    catch {expr 2**3&&4.0} msg
    set msg
} {syntax error in expression "2**3&&4.0": unexpected operator *}
test compExpr-old-5.8 {CompileLandExpr: error compiling land arm} {
    catch {expr 1.3&&2**3} msg
    set msg
} {syntax error in expression "1.3&&2**3": unexpected operator *}
test compExpr-old-5.9 {CompileLandExpr: error compiling land arm} {
    list [catch {expr {"a"&&"b"}} msg] $msg
} {1 {expected boolean value but got "a"}}
test compExpr-old-5.10 {CompileLandExpr: long land arms} {
    set a "abcdefghijkl"
    set i 7
    expr {[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]] && [string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]] && [string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]] && [string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]^[string compare [format %c 103] [string index $a $i]]^[string compare [format %c 105] [string index $a $i]]}
} 1

test compExpr-old-6.1 {CompileBitXorExpr: just bitand expr} {expr 7&0x13} 3
test compExpr-old-6.2 {CompileBitXorExpr: error in bitand expr} {
    catch {expr x|3} msg
    set msg
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-6.3 {CompileBitXorExpr: simple bitxor exprs} {expr 7^0x13} 20
test compExpr-old-6.4 {CompileBitXorExpr: simple bitxor exprs} {expr 3^0x10} 19
test compExpr-old-6.5 {CompileBitXorExpr: simple bitxor exprs} {expr 0^7} 7
test compExpr-old-6.6 {CompileBitXorExpr: simple bitxor exprs} {expr -1^7} -8
test compExpr-old-6.7 {CompileBitXorExpr: error compiling bitxor arm} {
    catch {expr 2**3|6} msg
    set msg
} {syntax error in expression "2**3|6": unexpected operator *}
test compExpr-old-6.8 {CompileBitXorExpr: error compiling bitxor arm} {
    catch {expr 2^x} msg
    set msg
} {syntax error in expression "2^x": variable references require preceding $}
test compExpr-old-6.9 {CompileBitXorExpr: runtime error in bitxor arm} {
    list [catch {expr {24.0^3}} msg] $msg
} {1 {can't use floating-point value as operand of "^"}}
test compExpr-old-6.10 {CompileBitXorExpr: runtime error in bitxor arm} {
    list [catch {expr {"a"^"b"}} msg] $msg
} {1 {can't use non-numeric string as operand of "^"}}

test compExpr-old-7.1 {CompileBitAndExpr: just equality expr} {expr 3==2} 0
test compExpr-old-7.2 {CompileBitAndExpr: just equality expr} {expr 2.0==2} 1
test compExpr-old-7.3 {CompileBitAndExpr: just equality expr} {expr 3.2!=2.2} 1
test compExpr-old-7.4 {CompileBitAndExpr: just equality expr} {expr {"abc" == "abd"}} 0
test compExpr-old-7.5 {CompileBitAndExpr: error in equality expr} {
    catch {expr x==3} msg
    set msg
} {syntax error in expression "x==3": variable references require preceding $} 
test compExpr-old-7.6 {CompileBitAndExpr: simple bitand exprs} {expr 7&0x13} 3
test compExpr-old-7.7 {CompileBitAndExpr: simple bitand exprs} {expr 0xf2&0x53} 82
test compExpr-old-7.8 {CompileBitAndExpr: simple bitand exprs} {expr 3&6} 2
test compExpr-old-7.9 {CompileBitAndExpr: simple bitand exprs} {expr -1&-7} -7
test compExpr-old-7.10 {CompileBitAndExpr: error compiling bitand arm} {
    catch {expr 2**3&6} msg
    set msg
} {syntax error in expression "2**3&6": unexpected operator *}
test compExpr-old-7.11 {CompileBitAndExpr: error compiling bitand arm} {
    catch {expr 2&x} msg
    set msg
} {syntax error in expression "2&x": variable references require preceding $}
test compExpr-old-7.12 {CompileBitAndExpr: runtime error in bitand arm} {
    list [catch {expr {24.0&3}} msg] $msg
} {1 {can't use floating-point value as operand of "&"}}
test compExpr-old-7.13 {CompileBitAndExpr: runtime error in bitand arm} {
    list [catch {expr {"a"&"b"}} msg] $msg
} {1 {can't use non-numeric string as operand of "&"}}

test compExpr-old-8.1 {CompileEqualityExpr: just relational expr} {expr 3>=2} 1
test compExpr-old-8.2 {CompileEqualityExpr: just relational expr} {expr 2<=2.1} 1
test compExpr-old-8.3 {CompileEqualityExpr: just relational expr} {expr 3.2>"2.2"} 1
test compExpr-old-8.4 {CompileEqualityExpr: just relational expr} {expr {"0y"<"0x12"}} 0
test compExpr-old-8.5 {CompileEqualityExpr: error in relational expr} {
    catch {expr x>3} msg
    set msg
} {syntax error in expression "x>3": variable references require preceding $} 
test compExpr-old-8.6 {CompileEqualityExpr: simple equality exprs} {expr 7==0x13} 0
test compExpr-old-8.7 {CompileEqualityExpr: simple equality exprs} {expr -0xf2!=0x53} 1
test compExpr-old-8.8 {CompileEqualityExpr: simple equality exprs} {expr {"12398712938788234-1298379" != ""}} 1
test compExpr-old-8.9 {CompileEqualityExpr: simple equality exprs} {expr -1!="abc"} 1
test compExpr-old-8.10 {CompileEqualityExpr: error compiling equality arm} {
    catch {expr 2**3==6} msg
    set msg
} {syntax error in expression "2**3==6": unexpected operator *}
test compExpr-old-8.11 {CompileEqualityExpr: error compiling equality arm} {
    catch {expr 2!=x} msg
    set msg
} {syntax error in expression "2!=x": variable references require preceding $}


test compExpr-old-9.1 {CompileRelationalExpr: just shift expr} {expr 3<<2} 12
test compExpr-old-9.2 {CompileRelationalExpr: just shift expr} {expr 0xff>>2} 63
test compExpr-old-9.3 {CompileRelationalExpr: just shift expr} {expr -1>>2} -1
test compExpr-old-9.4 {CompileRelationalExpr: just shift expr} {expr {1<<3}} 8

# The following test is different for 32-bit versus 64-bit
# architectures because LONG_MIN is different

if {0x80000000 > 0} {
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
	expr {1<<63}
    } -9223372036854775808
} else {
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
	expr {1<<31}
    } -2147483648
}
test compExpr-old-9.6 {CompileRelationalExpr: error in shift expr} {
    catch {expr x>>3} msg
    set msg
} {syntax error in expression "x>>3": variable references require preceding $} 
test compExpr-old-9.7 {CompileRelationalExpr: simple relational exprs} {expr 0xff>=+0x3} 1
test compExpr-old-9.8 {CompileRelationalExpr: simple relational exprs} {expr -0xf2<0x3} 1
test compExpr-old-9.9 {CompileRelationalExpr: error compiling relational arm} {
    catch {expr 2**3>6} msg
    set msg
} {syntax error in expression "2**3>6": unexpected operator *}
test compExpr-old-9.10 {CompileRelationalExpr: error compiling relational arm} {
    catch {expr 2<x} msg
    set msg
} {syntax error in expression "2<x": variable references require preceding $}

test compExpr-old-10.1 {CompileShiftExpr: just add expr} {expr 4+-2} 2
test compExpr-old-10.2 {CompileShiftExpr: just add expr} {expr 0xff-2} 253
test compExpr-old-10.3 {CompileShiftExpr: just add expr} {expr -1--2} 1
test compExpr-old-10.4 {CompileShiftExpr: just add expr} {expr 1-0123} -82
test compExpr-old-10.5 {CompileShiftExpr: error in add expr} {
    catch {expr x+3} msg
    set msg
} {syntax error in expression "x+3": variable references require preceding $}
test compExpr-old-10.6 {CompileShiftExpr: simple shift exprs} {expr 0xff>>0x3} 31
test compExpr-old-10.7 {CompileShiftExpr: simple shift exprs} {expr -0xf2<<0x3} -1936
test compExpr-old-10.8 {CompileShiftExpr: error compiling shift arm} {
    catch {expr 2**3>>6} msg
    set msg
} {syntax error in expression "2**3>>6": unexpected operator *}
test compExpr-old-10.9 {CompileShiftExpr: error compiling shift arm} {
    catch {expr 2<<x} msg
    set msg
} {syntax error in expression "2<<x": variable references require preceding $}
test compExpr-old-10.10 {CompileShiftExpr: runtime error} {
    list [catch {expr {24.0>>43}} msg] $msg
} {1 {can't use floating-point value as operand of ">>"}}
test compExpr-old-10.11 {CompileShiftExpr: runtime error} {
    list [catch {expr {"a"<<"b"}} msg] $msg
} {1 {can't use non-numeric string as operand of "<<"}}

test compExpr-old-11.1 {CompileAddExpr: just multiply expr} {expr 4*-2} -8
test compExpr-old-11.2 {CompileAddExpr: just multiply expr} {expr 0xff%2} 1
test compExpr-old-11.3 {CompileAddExpr: just multiply expr} {expr -1/2} -1
test compExpr-old-11.4 {CompileAddExpr: just multiply expr} {expr 7891%0123} 6
test compExpr-old-11.5 {CompileAddExpr: error in multiply expr} {
    catch {expr x*3} msg
    set msg
} {syntax error in expression "x*3": variable references require preceding $}
test compExpr-old-11.6 {CompileAddExpr: simple add exprs} {expr 0xff++0x3} 258
test compExpr-old-11.7 {CompileAddExpr: simple add exprs} {expr -0xf2--0x3} -239
test compExpr-old-11.8 {CompileAddExpr: error compiling add arm} {
    catch {expr 2**3+6} msg
    set msg
} {syntax error in expression "2**3+6": unexpected operator *}
test compExpr-old-11.9 {CompileAddExpr: error compiling add arm} {
    catch {expr 2-x} msg
    set msg
} {syntax error in expression "2-x": variable references require preceding $}
test compExpr-old-11.10 {CompileAddExpr: runtime error} {
    list [catch {expr {24.0+"xx"}} msg] $msg
} {1 {can't use non-numeric string as operand of "+"}}
test compExpr-old-11.11 {CompileAddExpr: runtime error} {
    list [catch {expr {"a"-"b"}} msg] $msg
} {1 {can't use non-numeric string as operand of "-"}}
test compExpr-old-11.12 {CompileAddExpr: runtime error} {
    list [catch {expr {3/0}} msg] $msg
} {1 {divide by zero}}
test compExpr-old-11.13 {CompileAddExpr: runtime error} {
    list [catch {expr {2.3/0.0}} msg] $msg
} {1 {divide by zero}}

test compExpr-old-12.1 {CompileMultiplyExpr: just unary expr} {expr ~4} -5
test compExpr-old-12.2 {CompileMultiplyExpr: just unary expr} {expr --5} 5
test compExpr-old-12.3 {CompileMultiplyExpr: just unary expr} {expr !27} 0
test compExpr-old-12.4 {CompileMultiplyExpr: just unary expr} {expr ~0xff00ff} -16711936
test compExpr-old-12.5 {CompileMultiplyExpr: error in unary expr} {
    catch {expr ~x} msg
    set msg
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-12.6 {CompileMultiplyExpr: simple multiply exprs} {expr 0xff*0x3} 765
test compExpr-old-12.7 {CompileMultiplyExpr: simple multiply exprs} {expr -0xf2%-0x3} -2
test compExpr-old-12.8 {CompileMultiplyExpr: error compiling multiply arm} {
    catch {expr 2*3%%6} msg
    set msg
} {syntax error in expression "2*3%%6": unexpected operator %}
test compExpr-old-12.9 {CompileMultiplyExpr: error compiling multiply arm} {
    catch {expr 2*x} msg
    set msg
} {syntax error in expression "2*x": variable references require preceding $}
test compExpr-old-12.10 {CompileMultiplyExpr: runtime error} {
    list [catch {expr {24.0*"xx"}} msg] $msg
} {1 {can't use non-numeric string as operand of "*"}}
test compExpr-old-12.11 {CompileMultiplyExpr: runtime error} {
    list [catch {expr {"a"/"b"}} msg] $msg
} {1 {can't use non-numeric string as operand of "/"}}

test compExpr-old-13.1 {CompileUnaryExpr: unary exprs} {expr -0xff} -255
test compExpr-old-13.2 {CompileUnaryExpr: unary exprs} {expr +000123} 83
test compExpr-old-13.3 {CompileUnaryExpr: unary exprs} {expr +--++36} 36
test compExpr-old-13.4 {CompileUnaryExpr: unary exprs} {expr !2} 0
test compExpr-old-13.5 {CompileUnaryExpr: unary exprs} {expr +--+-62.0} -62.0
test compExpr-old-13.6 {CompileUnaryExpr: unary exprs} {expr !0.0} 1
test compExpr-old-13.7 {CompileUnaryExpr: unary exprs} {expr !0xef} 0
test compExpr-old-13.8 {CompileUnaryExpr: error compiling unary expr} {
    catch {expr ~x} msg
    set msg
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-13.9 {CompileUnaryExpr: error compiling unary expr} {
    catch {expr !1.x} msg
    set msg
} {syntax error in expression "!1.x": extra tokens at end of expression}
test compExpr-old-13.10 {CompileUnaryExpr: runtime error} {
    list [catch {expr {~"xx"}} msg] $msg
} {1 {can't use non-numeric string as operand of "~"}}
test compExpr-old-13.11 {CompileUnaryExpr: runtime error} {
    list [catch {expr ~4.0} msg] $msg
} {1 {can't use floating-point value as operand of "~"}}
test compExpr-old-13.12 {CompileUnaryExpr: just primary expr} {expr 0x123} 291
test compExpr-old-13.13 {CompileUnaryExpr: just primary expr} {
    set a 27
    expr $a
} 27
test compExpr-old-13.14 {CompileUnaryExpr: just primary expr} {
    expr double(27)
} 27.0
test compExpr-old-13.15 {CompileUnaryExpr: just primary expr} {expr "123"} 123
test compExpr-old-13.16 {CompileUnaryExpr: error in primary expr} {
    catch {expr [set]} msg
    set msg
} {wrong # args: should be "set varName ?newValue?"}
test compExpr-old-14.1 {CompilePrimaryExpr: literal primary} {expr 1} 1
test compExpr-old-14.2 {CompilePrimaryExpr: literal primary} {expr 123} 123
test compExpr-old-14.3 {CompilePrimaryExpr: literal primary} {expr 0xff} 255
test compExpr-old-14.4 {CompilePrimaryExpr: literal primary} {expr 00010} 8
test compExpr-old-14.5 {CompilePrimaryExpr: literal primary} {expr 62.0} 62.0
test compExpr-old-14.6 {CompilePrimaryExpr: literal primary} {
    expr 3.1400000
} 3.14
test compExpr-old-14.7 {CompilePrimaryExpr: literal primary} {expr {{abcde}<{abcdef}}} 1
test compExpr-old-14.8 {CompilePrimaryExpr: literal primary} {expr {{abc\
def} < {abcdef}}} 1
test compExpr-old-14.9 {CompilePrimaryExpr: literal primary} {expr {{abc\tde} > {abc\tdef}}} 0
test compExpr-old-14.10 {CompilePrimaryExpr: literal primary} {expr {{123}}} 123
test compExpr-old-14.11 {CompilePrimaryExpr: var reference primary} {
    set i 789
    list [expr {$i}] [expr $i]
} {789 789}
test compExpr-old-14.12 {CompilePrimaryExpr: var reference primary} {
    set i {789}    ;# test expr's aggressive conversion to numeric semantics
    list [expr {$i}] [expr $i]
} {789 789}
test compExpr-old-14.13 {CompilePrimaryExpr: var reference primary} {
    catch {unset a}
    set a(foo) foo
    set a(bar) bar
    set a(123) 123
    set result ""
    lappend result [expr $a(123)] [expr {$a(bar)<$a(foo)}]
    catch {unset a}
    set result
} {123 1}
test compExpr-old-14.14 {CompilePrimaryExpr: var reference primary} {
    set i 123    ;# test "$var.0" floating point conversion hack
    list [expr $i] [expr $i.0] [expr $i.0/12.0]
} {123 123.0 10.25}
test compExpr-old-14.15 {CompilePrimaryExpr: var reference primary} {
    set i 123
    catch {expr $i.2} msg
    set msg
} 123.2
test compExpr-old-14.16 {CompilePrimaryExpr: error compiling var reference primary} {
    catch {expr {$a(foo}} msg
    set errorInfo
} {missing )
    while compiling
"expr {$a(foo}"}
test compExpr-old-14.17 {CompilePrimaryExpr: string primary that looks like var ref} {
    expr $
} $
test compExpr-old-14.18 {CompilePrimaryExpr: quoted string primary} {
    expr "21"
} 21
test compExpr-old-14.19 {CompilePrimaryExpr: quoted string primary} {
    set i 123
    set x 456
    expr "$i+$x"
} 579
test compExpr-old-14.20 {CompilePrimaryExpr: quoted string primary} {
    set i 3
    set x 6
    expr 2+"$i.$x"
} 5.6
test compExpr-old-14.21 {CompilePrimaryExpr: error in quoted string primary} {
    catch {expr "[set]"} msg
    set msg
} {wrong # args: should be "set varName ?newValue?"}
test compExpr-old-14.22 {CompilePrimaryExpr: subcommand primary} {
    expr {[set i 123; set i]}
} 123
test compExpr-old-14.23 {CompilePrimaryExpr: error in subcommand primary} {
    catch {expr {[set]}} msg
    set errorInfo
} {wrong # args: should be "set varName ?newValue?"
    while compiling
"set"
    while compiling
"expr {[set]}"}
test compExpr-old-14.24 {CompilePrimaryExpr: error in subcommand primary} {
    catch {expr {[set i}} msg
    set errorInfo
} {missing close-bracket
    while compiling
"expr {[set i}"}
test compExpr-old-14.25 {CompilePrimaryExpr: math function primary} {
    format %.6g [expr exp(1.0)]
} 2.71828
test compExpr-old-14.26 {CompilePrimaryExpr: math function primary} {
    format %.6g [expr pow(2.0+0.1,3.0+0.1)]
} 9.97424
test compExpr-old-14.27 {CompilePrimaryExpr: error in math function primary} {
    catch {expr sinh::(2.0)} msg
    set errorInfo
} {syntax error in expression "sinh::(2.0)": expected parenthesis enclosing function arguments
    while compiling
"expr sinh::(2.0)"}
test compExpr-old-14.28 {CompilePrimaryExpr: subexpression primary} {
    expr 2+(3*4)
} 14
test compExpr-old-14.29 {CompilePrimaryExpr: error in subexpression primary} {
    catch {expr 2+(3*[set])} msg
    set errorInfo
} {wrong # args: should be "set varName ?newValue?"
    while compiling
"set"
    while compiling
"expr 2+(3*[set])"}
test compExpr-old-14.30 {CompilePrimaryExpr: missing paren in subexpression primary} {
    catch {expr 2+(3*(4+5)} msg
    set errorInfo
} {syntax error in expression "2+(3*(4+5)": looking for close parenthesis
    while compiling
"expr 2+(3*(4+5)"}
test compExpr-old-14.31 {CompilePrimaryExpr: just var ref in subexpression primary} {
    set i "5+10"
    list "[expr $i] == 15" "[expr ($i)] == 15" "[eval expr ($i)] == 15"
} {{15 == 15} {15 == 15} {15 == 15}}
test compExpr-old-14.32 {CompilePrimaryExpr: unexpected token} {
    catch {expr @@} msg
    set errorInfo
} {syntax error in expression "@@": character not legal in expressions
    while compiling
"expr @@"}

test compExpr-old-15.1 {CompileMathFuncCall: missing parenthesis} {
    catch {expr sinh2.0)} msg
    set errorInfo
} {syntax error in expression "sinh2.0)": variable references require preceding $
    while compiling
"expr sinh2.0)"}
test compExpr-old-15.2 {CompileMathFuncCall: unknown math function} {
    catch {expr whazzathuh(1)} msg
    set errorInfo
} {unknown math function "whazzathuh"
    while compiling
"expr whazzathuh(1)"}
test compExpr-old-15.3 {CompileMathFuncCall: too many arguments} {
    catch {expr sin(1,2,3)} msg
    set errorInfo
} {too many arguments for math function
    while compiling
"expr sin(1,2,3)"}
test compExpr-old-15.4 {CompileMathFuncCall: ')' found before last required arg} {
    catch {expr sin()} msg
    set errorInfo
} {too few arguments for math function
    while compiling
"expr sin()"}
test compExpr-old-15.5 {CompileMathFuncCall: too few arguments} {
    catch {expr pow(1)} msg
    set errorInfo
} {too few arguments for math function
    while compiling
"expr pow(1)"}
test compExpr-old-15.6 {CompileMathFuncCall: missing ')'} {
    catch {expr sin(1} msg
    set errorInfo
} {syntax error in expression "sin(1": missing close parenthesis at end of function call
    while compiling
"expr sin(1"}
if $gotT1 {
    test compExpr-old-15.7 {CompileMathFuncCall: call registered math function} {
	expr 2*T1()
    } 246
    test compExpr-old-15.8 {CompileMathFuncCall: call registered math function} {
	expr T2()*3
    } 1035

    test compExpr-old-15.9 {CompileMathFuncCall: call registered math function} {
	expr T3(21, 37)
    } 37
    test compExpr-old-15.10 {CompileMathFuncCall: call registered math function} {
	expr T3(21.2, 37)
    } 37.0
    test compExpr-old-15.11 {CompileMathFuncCall: call registered math function} {
	expr T3(-21.2, -17.5)
    } -17.5
}

test compExpr-old-16.1 {GetToken: checks whether integer token starting with "0x" (e.g., "0x$") is invalid} {
    catch {unset a}
    set a(VALUE) ff15
    set i 123
    if {[expr 0x$a(VALUE)] & 16} {
        set i {}
    }
    set i
} {}
test compExpr-old-16.2 {GetToken: check for string literal in braces} {
    expr {{1}}
} {1}

# Check "expr" and computed command names.

test compExpr-old-17.1 {expr and computed command names} {
    set i 0
    set z expr
    $z 1+2
} 3

# Check correct conversion of operands to numbers: If the string looks like
# an integer, convert to integer. Otherwise, if the string looks like a
# double, convert to double.

test compExpr-old-18.1 {expr and conversion of operands to numbers} {
    set x [lindex 11 0]
    catch {expr int($x)}
    expr {$x}
} 11

# Check "expr" and interpreter result object resetting before appending
# an error msg during evaluation of exprs not in {}s

test compExpr-old-19.1 {expr and interpreter result object resetting} {
    proc p {} {
        set t  10.0
        set x  2.0
        set dx 0.2
        set f  {$dx-$x/10}
        set g  {-$x/5}
        set center 1.0
        set x  [expr $x-$center]
        set dx [expr $dx+$g]
        set x  [expr $x+$f+$center]
        set x  [expr $x+$f+$center]
        set y  [expr round($x)]
    }
    p
} 3

# cleanup
if {[info exists a]} {
    unset a
}
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d5 1
a5 1
# the new implementation are in the files "parseExpr.test and
d15 1
a15 1
# RCS: @@(#) $Id: compExpr-old.test,v 1.5.8.2 2000/09/15 16:56:09 spolk Exp $
d79 1
a79 1
test expr-1.1 {TclCompileExprCmd: no expression} {
d82 1
a82 1
test expr-1.2 {TclCompileExprCmd: one expression word} {
d85 1
a85 1
test expr-1.3 {TclCompileExprCmd: two expression words} {
d88 1
a88 1
test expr-1.4 {TclCompileExprCmd: five expression words} {
d91 1
a91 1
test expr-1.5 {TclCompileExprCmd: quoted expression word} {
d94 1
a94 1
test expr-1.6 {TclCompileExprCmd: quoted expression word} {
d98 1
a98 1
test expr-1.7 {TclCompileExprCmd: expression word in braces} {
d101 1
a101 1
test expr-1.8 {TclCompileExprCmd: expression word in braces} {
d104 1
a104 1
test expr-1.9 {TclCompileExprCmd: expression word in braces} {
d108 1
a108 1
test expr-1.10 {TclCompileExprCmd: other expression word in braces} {
d111 1
a111 1
test expr-1.11 {TclCompileExprCmd: expression word terminated by ;} {
d114 1
a114 1
test expr-1.12 {TclCompileExprCmd: inlined expr (in "catch") inside other catch} {
d121 1
a121 1
test expr-1.13 {TclCompileExprCmd: second level of substitutions in expr not in braces with single var reference} {
d126 1
a126 1
test expr-1.14 {TclCompileExprCmd: second level of substitutions in expr with comparison as top-level operator} {
d132 1
a132 1
test expr-2.1 {TclCompileExpr: are builtin functions registered?} {
d135 1
a135 1
test expr-2.2 {TclCompileExpr: error in expr} {
d138 2
a139 2
} {syntax error in expression "2**3"}
test expr-2.3 {TclCompileExpr: junk after legal expr} {
d142 2
a143 2
} {syntax error in expression "7*2foo"}
test expr-2.4 {TclCompileExpr: numeric expr string rep == formatted int rep} {
d147 2
a148 2
test expr-3.1 {CompileCondExpr: just lor expr} {expr 3||0} 1
test expr-3.2 {CompileCondExpr: error in lor expr} {
d151 3
a153 3
} {syntax error in expression "x||3"} 
test expr-3.3 {CompileCondExpr: test true arm} {expr 3>2?44:66} 44
test expr-3.4 {CompileCondExpr: error compiling true arm} {
d156 3
a158 3
} {syntax error in expression "3>2?2**3:66"}
test expr-3.5 {CompileCondExpr: test false arm} {expr 2>3?44:66} 66
test expr-3.6 {CompileCondExpr: error compiling false arm} {
d161 3
a163 3
} {syntax error in expression "2>3?44:2**3"}
test expr-3.7 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test expr-3.7 which can take several minutes to run"
d167 2
a168 2
test expr-3.8 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test expr-3.8 which can take several minutes to run"
d173 2
a174 2
test expr-4.1 {CompileLorExpr: just land expr} {expr 1.3&&3.3} 1
test expr-4.2 {CompileLorExpr: error in land expr} {
d177 5
a181 5
} {syntax error in expression "x&&3"} 
test expr-4.3 {CompileLorExpr: simple lor exprs} {expr 0||1.0} 1
test expr-4.4 {CompileLorExpr: simple lor exprs} {expr 3.0||0.0} 1
test expr-4.5 {CompileLorExpr: simple lor exprs} {expr 0||0||1} 1
test expr-4.6 {CompileLorExpr: error compiling lor arm} {
d184 2
a185 2
} {syntax error in expression "2**3||4.0"}
test expr-4.7 {CompileLorExpr: error compiling lor arm} {
d188 2
a189 2
} {syntax error in expression "1.3||2**3"}
test expr-4.8 {CompileLorExpr: error compiling lor arms} {
d192 1
a192 1
test expr-4.9 {CompileLorExpr: long lor arm} {
d198 2
a199 2
test expr-5.1 {CompileLandExpr: just bitor expr} {expr 7|0x13} 23
test expr-5.2 {CompileLandExpr: error in bitor expr} {
d202 6
a207 6
} {syntax error in expression "x|3"} 
test expr-5.3 {CompileLandExpr: simple land exprs} {expr 0&&1.0} 0
test expr-5.4 {CompileLandExpr: simple land exprs} {expr 0&&0} 0
test expr-5.5 {CompileLandExpr: simple land exprs} {expr 3.0&&1.2} 1
test expr-5.6 {CompileLandExpr: simple land exprs} {expr 1&&1&&2} 1
test expr-5.7 {CompileLandExpr: error compiling land arm} {
d210 2
a211 2
} {syntax error in expression "2**3&&4.0"}
test expr-5.8 {CompileLandExpr: error compiling land arm} {
d214 2
a215 2
} {syntax error in expression "1.3&&2**3"}
test expr-5.9 {CompileLandExpr: error compiling land arm} {
d218 1
a218 1
test expr-5.10 {CompileLandExpr: long land arms} {
d224 2
a225 2
test expr-6.1 {CompileBitXorExpr: just bitand expr} {expr 7&0x13} 3
test expr-6.2 {CompileBitXorExpr: error in bitand expr} {
d228 6
a233 6
} {syntax error in expression "x|3"} 
test expr-6.3 {CompileBitXorExpr: simple bitxor exprs} {expr 7^0x13} 20
test expr-6.4 {CompileBitXorExpr: simple bitxor exprs} {expr 3^0x10} 19
test expr-6.5 {CompileBitXorExpr: simple bitxor exprs} {expr 0^7} 7
test expr-6.6 {CompileBitXorExpr: simple bitxor exprs} {expr -1^7} -8
test expr-6.7 {CompileBitXorExpr: error compiling bitxor arm} {
d236 2
a237 2
} {syntax error in expression "2**3|6"}
test expr-6.8 {CompileBitXorExpr: error compiling bitxor arm} {
d240 2
a241 2
} {syntax error in expression "2^x"}
test expr-6.9 {CompileBitXorExpr: runtime error in bitxor arm} {
d244 1
a244 1
test expr-6.10 {CompileBitXorExpr: runtime error in bitxor arm} {
d248 5
a252 5
test expr-7.1 {CompileBitAndExpr: just equality expr} {expr 3==2} 0
test expr-7.2 {CompileBitAndExpr: just equality expr} {expr 2.0==2} 1
test expr-7.3 {CompileBitAndExpr: just equality expr} {expr 3.2!=2.2} 1
test expr-7.4 {CompileBitAndExpr: just equality expr} {expr {"abc" == "abd"}} 0
test expr-7.5 {CompileBitAndExpr: error in equality expr} {
d255 6
a260 6
} {syntax error in expression "x==3"} 
test expr-7.6 {CompileBitAndExpr: simple bitand exprs} {expr 7&0x13} 3
test expr-7.7 {CompileBitAndExpr: simple bitand exprs} {expr 0xf2&0x53} 82
test expr-7.8 {CompileBitAndExpr: simple bitand exprs} {expr 3&6} 2
test expr-7.9 {CompileBitAndExpr: simple bitand exprs} {expr -1&-7} -7
test expr-7.10 {CompileBitAndExpr: error compiling bitand arm} {
d263 2
a264 2
} {syntax error in expression "2**3&6"}
test expr-7.11 {CompileBitAndExpr: error compiling bitand arm} {
d267 2
a268 2
} {syntax error in expression "2&x"}
test expr-7.12 {CompileBitAndExpr: runtime error in bitand arm} {
d271 1
a271 1
test expr-7.13 {CompileBitAndExpr: runtime error in bitand arm} {
d275 5
a279 5
test expr-8.1 {CompileEqualityExpr: just relational expr} {expr 3>=2} 1
test expr-8.2 {CompileEqualityExpr: just relational expr} {expr 2<=2.1} 1
test expr-8.3 {CompileEqualityExpr: just relational expr} {expr 3.2>"2.2"} 1
test expr-8.4 {CompileEqualityExpr: just relational expr} {expr {"0y"<"0x12"}} 0
test expr-8.5 {CompileEqualityExpr: error in relational expr} {
d282 6
a287 6
} {syntax error in expression "x>3"} 
test expr-8.6 {CompileEqualityExpr: simple equality exprs} {expr 7==0x13} 0
test expr-8.7 {CompileEqualityExpr: simple equality exprs} {expr -0xf2!=0x53} 1
test expr-8.8 {CompileEqualityExpr: simple equality exprs} {expr {"12398712938788234-1298379" != ""}} 1
test expr-8.9 {CompileEqualityExpr: simple equality exprs} {expr -1!="abc"} 1
test expr-8.10 {CompileEqualityExpr: error compiling equality arm} {
d290 2
a291 2
} {syntax error in expression "2**3==6"}
test expr-8.11 {CompileEqualityExpr: error compiling equality arm} {
d294 1
a294 1
} {syntax error in expression "2!=x"}
d297 4
a300 4
test expr-9.1 {CompileRelationalExpr: just shift expr} {expr 3<<2} 12
test expr-9.2 {CompileRelationalExpr: just shift expr} {expr 0xff>>2} 63
test expr-9.3 {CompileRelationalExpr: just shift expr} {expr -1>>2} -1
test expr-9.4 {CompileRelationalExpr: just shift expr} {expr {1<<3}} 8
d306 1
a306 1
    test expr-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d310 1
a310 1
    test expr-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d314 1
a314 1
test expr-9.6 {CompileRelationalExpr: error in shift expr} {
d317 4
a320 4
} {syntax error in expression "x>>3"} 
test expr-9.7 {CompileRelationalExpr: simple relational exprs} {expr 0xff>=+0x3} 1
test expr-9.8 {CompileRelationalExpr: simple relational exprs} {expr -0xf2<0x3} 1
test expr-9.9 {CompileRelationalExpr: error compiling relational arm} {
d323 2
a324 2
} {syntax error in expression "2**3>6"}
test expr-9.10 {CompileRelationalExpr: error compiling relational arm} {
d327 1
a327 1
} {syntax error in expression "2<x"}
d329 5
a333 5
test expr-10.1 {CompileShiftExpr: just add expr} {expr 4+-2} 2
test expr-10.2 {CompileShiftExpr: just add expr} {expr 0xff-2} 253
test expr-10.3 {CompileShiftExpr: just add expr} {expr -1--2} 1
test expr-10.4 {CompileShiftExpr: just add expr} {expr 1-0123} -82
test expr-10.5 {CompileShiftExpr: error in add expr} {
d336 4
a339 4
} {syntax error in expression "x+3"}
test expr-10.6 {CompileShiftExpr: simple shift exprs} {expr 0xff>>0x3} 31
test expr-10.7 {CompileShiftExpr: simple shift exprs} {expr -0xf2<<0x3} -1936
test expr-10.8 {CompileShiftExpr: error compiling shift arm} {
d342 2
a343 2
} {syntax error in expression "2**3>>6"}
test expr-10.9 {CompileShiftExpr: error compiling shift arm} {
d346 2
a347 2
} {syntax error in expression "2<<x"}
test expr-10.10 {CompileShiftExpr: runtime error} {
d350 1
a350 1
test expr-10.11 {CompileShiftExpr: runtime error} {
d354 5
a358 5
test expr-11.1 {CompileAddExpr: just multiply expr} {expr 4*-2} -8
test expr-11.2 {CompileAddExpr: just multiply expr} {expr 0xff%2} 1
test expr-11.3 {CompileAddExpr: just multiply expr} {expr -1/2} -1
test expr-11.4 {CompileAddExpr: just multiply expr} {expr 7891%0123} 6
test expr-11.5 {CompileAddExpr: error in multiply expr} {
d361 4
a364 4
} {syntax error in expression "x*3"}
test expr-11.6 {CompileAddExpr: simple add exprs} {expr 0xff++0x3} 258
test expr-11.7 {CompileAddExpr: simple add exprs} {expr -0xf2--0x3} -239
test expr-11.8 {CompileAddExpr: error compiling add arm} {
d367 2
a368 2
} {syntax error in expression "2**3+6"}
test expr-11.9 {CompileAddExpr: error compiling add arm} {
d371 2
a372 2
} {syntax error in expression "2-x"}
test expr-11.10 {CompileAddExpr: runtime error} {
d375 1
a375 1
test expr-11.11 {CompileAddExpr: runtime error} {
d378 1
a378 1
test expr-11.12 {CompileAddExpr: runtime error} {
d381 1
a381 1
test expr-11.13 {CompileAddExpr: runtime error} {
d385 5
a389 5
test expr-12.1 {CompileMultiplyExpr: just unary expr} {expr ~4} -5
test expr-12.2 {CompileMultiplyExpr: just unary expr} {expr --5} 5
test expr-12.3 {CompileMultiplyExpr: just unary expr} {expr !27} 0
test expr-12.4 {CompileMultiplyExpr: just unary expr} {expr ~0xff00ff} -16711936
test expr-12.5 {CompileMultiplyExpr: error in unary expr} {
d392 4
a395 4
} {syntax error in expression "~x"}
test expr-12.6 {CompileMultiplyExpr: simple multiply exprs} {expr 0xff*0x3} 765
test expr-12.7 {CompileMultiplyExpr: simple multiply exprs} {expr -0xf2%-0x3} -2
test expr-12.8 {CompileMultiplyExpr: error compiling multiply arm} {
d398 2
a399 2
} {syntax error in expression "2*3%%6"}
test expr-12.9 {CompileMultiplyExpr: error compiling multiply arm} {
d402 2
a403 2
} {syntax error in expression "2*x"}
test expr-12.10 {CompileMultiplyExpr: runtime error} {
d406 1
a406 1
test expr-12.11 {CompileMultiplyExpr: runtime error} {
d410 8
a417 8
test expr-13.1 {CompileUnaryExpr: unary exprs} {expr -0xff} -255
test expr-13.2 {CompileUnaryExpr: unary exprs} {expr +000123} 83
test expr-13.3 {CompileUnaryExpr: unary exprs} {expr +--++36} 36
test expr-13.4 {CompileUnaryExpr: unary exprs} {expr !2} 0
test expr-13.5 {CompileUnaryExpr: unary exprs} {expr +--+-62.0} -62.0
test expr-13.6 {CompileUnaryExpr: unary exprs} {expr !0.0} 1
test expr-13.7 {CompileUnaryExpr: unary exprs} {expr !0xef} 0
test expr-13.8 {CompileUnaryExpr: error compiling unary expr} {
d420 2
a421 2
} {syntax error in expression "~x"}
test expr-13.9 {CompileUnaryExpr: error compiling unary expr} {
d424 2
a425 2
} {syntax error in expression "!1.x"}
test expr-13.10 {CompileUnaryExpr: runtime error} {
d428 1
a428 1
test expr-13.11 {CompileUnaryExpr: runtime error} {
d431 2
a432 2
test expr-13.12 {CompileUnaryExpr: just primary expr} {expr 0x123} 291
test expr-13.13 {CompileUnaryExpr: just primary expr} {
d436 1
a436 1
test expr-13.14 {CompileUnaryExpr: just primary expr} {
d439 2
a440 2
test expr-13.15 {CompileUnaryExpr: just primary expr} {expr "123"} 123
test expr-13.16 {CompileUnaryExpr: error in primary expr} {
d444 6
a449 6
test expr-14.1 {CompilePrimaryExpr: literal primary} {expr 1} 1
test expr-14.2 {CompilePrimaryExpr: literal primary} {expr 123} 123
test expr-14.3 {CompilePrimaryExpr: literal primary} {expr 0xff} 255
test expr-14.4 {CompilePrimaryExpr: literal primary} {expr 00010} 8
test expr-14.5 {CompilePrimaryExpr: literal primary} {expr 62.0} 62.0
test expr-14.6 {CompilePrimaryExpr: literal primary} {
d452 2
a453 2
test expr-14.7 {CompilePrimaryExpr: literal primary} {expr {{abcde}<{abcdef}}} 1
test expr-14.8 {CompilePrimaryExpr: literal primary} {expr {{abc\
d455 3
a457 3
test expr-14.9 {CompilePrimaryExpr: literal primary} {expr {{abc\tde} > {abc\tdef}}} 0
test expr-14.10 {CompilePrimaryExpr: literal primary} {expr {{123}}} 123
test expr-14.11 {CompilePrimaryExpr: var reference primary} {
d461 1
a461 1
test expr-14.12 {CompilePrimaryExpr: var reference primary} {
d465 1
a465 1
test expr-14.13 {CompilePrimaryExpr: var reference primary} {
d475 1
a475 1
test expr-14.14 {CompilePrimaryExpr: var reference primary} {
d479 1
a479 1
test expr-14.15 {CompilePrimaryExpr: var reference primary} {
d484 1
a484 1
test expr-14.16 {CompilePrimaryExpr: error compiling var reference primary} {
d490 1
a490 1
test expr-14.17 {CompilePrimaryExpr: string primary that looks like var ref} {
d493 1
a493 1
test expr-14.18 {CompilePrimaryExpr: quoted string primary} {
d496 1
a496 1
test expr-14.19 {CompilePrimaryExpr: quoted string primary} {
d501 1
a501 1
test expr-14.20 {CompilePrimaryExpr: quoted string primary} {
d506 1
a506 1
test expr-14.21 {CompilePrimaryExpr: error in quoted string primary} {
d510 1
a510 1
test expr-14.22 {CompilePrimaryExpr: subcommand primary} {
d513 1
a513 1
test expr-14.23 {CompilePrimaryExpr: error in subcommand primary} {
d521 1
a521 1
test expr-14.24 {CompilePrimaryExpr: error in subcommand primary} {
d527 1
a527 1
test expr-14.25 {CompilePrimaryExpr: math function primary} {
d530 1
a530 1
test expr-14.26 {CompilePrimaryExpr: math function primary} {
d533 1
a533 1
test expr-14.27 {CompilePrimaryExpr: error in math function primary} {
d536 1
a536 1
} {syntax error in expression "sinh::(2.0)"
d539 1
a539 1
test expr-14.28 {CompilePrimaryExpr: subexpression primary} {
d542 1
a542 1
test expr-14.29 {CompilePrimaryExpr: error in subexpression primary} {
d550 1
a550 1
test expr-14.30 {CompilePrimaryExpr: missing paren in subexpression primary} {
d553 1
a553 1
} {syntax error in expression "2+(3*(4+5)"
d556 1
a556 1
test expr-14.31 {CompilePrimaryExpr: just var ref in subexpression primary} {
d560 1
a560 1
test expr-14.32 {CompilePrimaryExpr: unexpected token} {
d563 1
a563 1
} {syntax error in expression "@@"
d567 1
a567 1
test expr-15.1 {CompileMathFuncCall: missing parenthesis} {
d570 1
a570 1
} {syntax error in expression "sinh2.0)"
d573 1
a573 1
test expr-15.2 {CompileMathFuncCall: unknown math function} {
d579 1
a579 1
test expr-15.3 {CompileMathFuncCall: too many arguments} {
d585 1
a585 1
test expr-15.4 {CompileMathFuncCall: ')' found before last required arg} {
d591 1
a591 1
test expr-15.5 {CompileMathFuncCall: too few arguments} {
d597 1
a597 1
test expr-15.6 {CompileMathFuncCall: missing ')'} {
d600 1
a600 1
} {syntax error in expression "sin(1"
d604 1
a604 1
    test expr-15.7 {CompileMathFuncCall: call registered math function} {
d607 1
a607 1
    test expr-15.8 {CompileMathFuncCall: call registered math function} {
d611 1
a611 1
    test expr-15.9 {CompileMathFuncCall: call registered math function} {
d614 1
a614 1
    test expr-15.10 {CompileMathFuncCall: call registered math function} {
d617 1
a617 1
    test expr-15.11 {CompileMathFuncCall: call registered math function} {
d622 1
a622 1
test expr-16.1 {GetToken: checks whether integer token starting with "0x" (e.g., "0x$") is invalid} {
d631 1
a631 1
test expr-16.2 {GetToken: check for string literal in braces} {
d637 1
a637 1
test expr-17.1 {expr and computed command names} {
d647 1
a647 1
test expr-18.1 {expr and conversion of operands to numbers} {
d656 1
a656 1
test expr-19.1 {expr and interpreter result object resetting} {
a678 13













@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d5 1
a5 1
# the new implementation are in the files "parseExpr.test" and
d15 1
a15 1
# RCS: @@(#) $Id: compExpr-old.test,v 1.7 2001/12/06 10:59:17 dkf Exp $
d79 1
a79 1
test compExpr-old-1.1 {TclCompileExprCmd: no expression} {
d82 1
a82 1
test compExpr-old-1.2 {TclCompileExprCmd: one expression word} {
d85 1
a85 1
test compExpr-old-1.3 {TclCompileExprCmd: two expression words} {
d88 1
a88 1
test compExpr-old-1.4 {TclCompileExprCmd: five expression words} {
d91 1
a91 1
test compExpr-old-1.5 {TclCompileExprCmd: quoted expression word} {
d94 1
a94 1
test compExpr-old-1.6 {TclCompileExprCmd: quoted expression word} {
d98 1
a98 1
test compExpr-old-1.7 {TclCompileExprCmd: expression word in braces} {
d101 1
a101 1
test compExpr-old-1.8 {TclCompileExprCmd: expression word in braces} {
d104 1
a104 1
test compExpr-old-1.9 {TclCompileExprCmd: expression word in braces} {
d108 1
a108 1
test compExpr-old-1.10 {TclCompileExprCmd: other expression word in braces} {
d111 1
a111 1
test compExpr-old-1.11 {TclCompileExprCmd: expression word terminated by ;} {
d114 1
a114 1
test compExpr-old-1.12 {TclCompileExprCmd: inlined expr (in "catch") inside other catch} {
d121 1
a121 1
test compExpr-old-1.13 {TclCompileExprCmd: second level of substitutions in expr not in braces with single var reference} {
d126 1
a126 1
test compExpr-old-1.14 {TclCompileExprCmd: second level of substitutions in expr with comparison as top-level operator} {
d132 1
a132 1
test compExpr-old-2.1 {TclCompileExpr: are builtin functions registered?} {
d135 1
a135 1
test compExpr-old-2.2 {TclCompileExpr: error in expr} {
d138 2
a139 2
} {syntax error in expression "2**3": unexpected operator *}
test compExpr-old-2.3 {TclCompileExpr: junk after legal expr} {
d142 2
a143 2
} {syntax error in expression "7*2foo": extra tokens at end of expression}
test compExpr-old-2.4 {TclCompileExpr: numeric expr string rep == formatted int rep} {
d147 2
a148 2
test compExpr-old-3.1 {CompileCondExpr: just lor expr} {expr 3||0} 1
test compExpr-old-3.2 {CompileCondExpr: error in lor expr} {
d151 3
a153 3
} {syntax error in expression "x||3": variable references require preceding $} 
test compExpr-old-3.3 {CompileCondExpr: test true arm} {expr 3>2?44:66} 44
test compExpr-old-3.4 {CompileCondExpr: error compiling true arm} {
d156 3
a158 3
} {syntax error in expression "3>2?2**3:66": unexpected operator *}
test compExpr-old-3.5 {CompileCondExpr: test false arm} {expr 2>3?44:66} 66
test compExpr-old-3.6 {CompileCondExpr: error compiling false arm} {
d161 3
a163 3
} {syntax error in expression "2>3?44:2**3": unexpected operator *}
test compExpr-old-3.7 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.7 which can take several minutes to run"
d167 2
a168 2
test compExpr-old-3.8 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.8 which can take several minutes to run"
d173 2
a174 2
test compExpr-old-4.1 {CompileLorExpr: just land expr} {expr 1.3&&3.3} 1
test compExpr-old-4.2 {CompileLorExpr: error in land expr} {
d177 5
a181 5
} {syntax error in expression "x&&3": variable references require preceding $} 
test compExpr-old-4.3 {CompileLorExpr: simple lor exprs} {expr 0||1.0} 1
test compExpr-old-4.4 {CompileLorExpr: simple lor exprs} {expr 3.0||0.0} 1
test compExpr-old-4.5 {CompileLorExpr: simple lor exprs} {expr 0||0||1} 1
test compExpr-old-4.6 {CompileLorExpr: error compiling lor arm} {
d184 2
a185 2
} {syntax error in expression "2**3||4.0": unexpected operator *}
test compExpr-old-4.7 {CompileLorExpr: error compiling lor arm} {
d188 2
a189 2
} {syntax error in expression "1.3||2**3": unexpected operator *}
test compExpr-old-4.8 {CompileLorExpr: error compiling lor arms} {
d192 1
a192 1
test compExpr-old-4.9 {CompileLorExpr: long lor arm} {
d198 2
a199 2
test compExpr-old-5.1 {CompileLandExpr: just bitor expr} {expr 7|0x13} 23
test compExpr-old-5.2 {CompileLandExpr: error in bitor expr} {
d202 6
a207 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-5.3 {CompileLandExpr: simple land exprs} {expr 0&&1.0} 0
test compExpr-old-5.4 {CompileLandExpr: simple land exprs} {expr 0&&0} 0
test compExpr-old-5.5 {CompileLandExpr: simple land exprs} {expr 3.0&&1.2} 1
test compExpr-old-5.6 {CompileLandExpr: simple land exprs} {expr 1&&1&&2} 1
test compExpr-old-5.7 {CompileLandExpr: error compiling land arm} {
d210 2
a211 2
} {syntax error in expression "2**3&&4.0": unexpected operator *}
test compExpr-old-5.8 {CompileLandExpr: error compiling land arm} {
d214 2
a215 2
} {syntax error in expression "1.3&&2**3": unexpected operator *}
test compExpr-old-5.9 {CompileLandExpr: error compiling land arm} {
d218 1
a218 1
test compExpr-old-5.10 {CompileLandExpr: long land arms} {
d224 2
a225 2
test compExpr-old-6.1 {CompileBitXorExpr: just bitand expr} {expr 7&0x13} 3
test compExpr-old-6.2 {CompileBitXorExpr: error in bitand expr} {
d228 6
a233 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-6.3 {CompileBitXorExpr: simple bitxor exprs} {expr 7^0x13} 20
test compExpr-old-6.4 {CompileBitXorExpr: simple bitxor exprs} {expr 3^0x10} 19
test compExpr-old-6.5 {CompileBitXorExpr: simple bitxor exprs} {expr 0^7} 7
test compExpr-old-6.6 {CompileBitXorExpr: simple bitxor exprs} {expr -1^7} -8
test compExpr-old-6.7 {CompileBitXorExpr: error compiling bitxor arm} {
d236 2
a237 2
} {syntax error in expression "2**3|6": unexpected operator *}
test compExpr-old-6.8 {CompileBitXorExpr: error compiling bitxor arm} {
d240 2
a241 2
} {syntax error in expression "2^x": variable references require preceding $}
test compExpr-old-6.9 {CompileBitXorExpr: runtime error in bitxor arm} {
d244 1
a244 1
test compExpr-old-6.10 {CompileBitXorExpr: runtime error in bitxor arm} {
d248 5
a252 5
test compExpr-old-7.1 {CompileBitAndExpr: just equality expr} {expr 3==2} 0
test compExpr-old-7.2 {CompileBitAndExpr: just equality expr} {expr 2.0==2} 1
test compExpr-old-7.3 {CompileBitAndExpr: just equality expr} {expr 3.2!=2.2} 1
test compExpr-old-7.4 {CompileBitAndExpr: just equality expr} {expr {"abc" == "abd"}} 0
test compExpr-old-7.5 {CompileBitAndExpr: error in equality expr} {
d255 6
a260 6
} {syntax error in expression "x==3": variable references require preceding $} 
test compExpr-old-7.6 {CompileBitAndExpr: simple bitand exprs} {expr 7&0x13} 3
test compExpr-old-7.7 {CompileBitAndExpr: simple bitand exprs} {expr 0xf2&0x53} 82
test compExpr-old-7.8 {CompileBitAndExpr: simple bitand exprs} {expr 3&6} 2
test compExpr-old-7.9 {CompileBitAndExpr: simple bitand exprs} {expr -1&-7} -7
test compExpr-old-7.10 {CompileBitAndExpr: error compiling bitand arm} {
d263 2
a264 2
} {syntax error in expression "2**3&6": unexpected operator *}
test compExpr-old-7.11 {CompileBitAndExpr: error compiling bitand arm} {
d267 2
a268 2
} {syntax error in expression "2&x": variable references require preceding $}
test compExpr-old-7.12 {CompileBitAndExpr: runtime error in bitand arm} {
d271 1
a271 1
test compExpr-old-7.13 {CompileBitAndExpr: runtime error in bitand arm} {
d275 5
a279 5
test compExpr-old-8.1 {CompileEqualityExpr: just relational expr} {expr 3>=2} 1
test compExpr-old-8.2 {CompileEqualityExpr: just relational expr} {expr 2<=2.1} 1
test compExpr-old-8.3 {CompileEqualityExpr: just relational expr} {expr 3.2>"2.2"} 1
test compExpr-old-8.4 {CompileEqualityExpr: just relational expr} {expr {"0y"<"0x12"}} 0
test compExpr-old-8.5 {CompileEqualityExpr: error in relational expr} {
d282 6
a287 6
} {syntax error in expression "x>3": variable references require preceding $} 
test compExpr-old-8.6 {CompileEqualityExpr: simple equality exprs} {expr 7==0x13} 0
test compExpr-old-8.7 {CompileEqualityExpr: simple equality exprs} {expr -0xf2!=0x53} 1
test compExpr-old-8.8 {CompileEqualityExpr: simple equality exprs} {expr {"12398712938788234-1298379" != ""}} 1
test compExpr-old-8.9 {CompileEqualityExpr: simple equality exprs} {expr -1!="abc"} 1
test compExpr-old-8.10 {CompileEqualityExpr: error compiling equality arm} {
d290 2
a291 2
} {syntax error in expression "2**3==6": unexpected operator *}
test compExpr-old-8.11 {CompileEqualityExpr: error compiling equality arm} {
d294 1
a294 1
} {syntax error in expression "2!=x": variable references require preceding $}
d297 4
a300 4
test compExpr-old-9.1 {CompileRelationalExpr: just shift expr} {expr 3<<2} 12
test compExpr-old-9.2 {CompileRelationalExpr: just shift expr} {expr 0xff>>2} 63
test compExpr-old-9.3 {CompileRelationalExpr: just shift expr} {expr -1>>2} -1
test compExpr-old-9.4 {CompileRelationalExpr: just shift expr} {expr {1<<3}} 8
d306 1
a306 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d310 1
a310 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d314 1
a314 1
test compExpr-old-9.6 {CompileRelationalExpr: error in shift expr} {
d317 4
a320 4
} {syntax error in expression "x>>3": variable references require preceding $} 
test compExpr-old-9.7 {CompileRelationalExpr: simple relational exprs} {expr 0xff>=+0x3} 1
test compExpr-old-9.8 {CompileRelationalExpr: simple relational exprs} {expr -0xf2<0x3} 1
test compExpr-old-9.9 {CompileRelationalExpr: error compiling relational arm} {
d323 2
a324 2
} {syntax error in expression "2**3>6": unexpected operator *}
test compExpr-old-9.10 {CompileRelationalExpr: error compiling relational arm} {
d327 1
a327 1
} {syntax error in expression "2<x": variable references require preceding $}
d329 5
a333 5
test compExpr-old-10.1 {CompileShiftExpr: just add expr} {expr 4+-2} 2
test compExpr-old-10.2 {CompileShiftExpr: just add expr} {expr 0xff-2} 253
test compExpr-old-10.3 {CompileShiftExpr: just add expr} {expr -1--2} 1
test compExpr-old-10.4 {CompileShiftExpr: just add expr} {expr 1-0123} -82
test compExpr-old-10.5 {CompileShiftExpr: error in add expr} {
d336 4
a339 4
} {syntax error in expression "x+3": variable references require preceding $}
test compExpr-old-10.6 {CompileShiftExpr: simple shift exprs} {expr 0xff>>0x3} 31
test compExpr-old-10.7 {CompileShiftExpr: simple shift exprs} {expr -0xf2<<0x3} -1936
test compExpr-old-10.8 {CompileShiftExpr: error compiling shift arm} {
d342 2
a343 2
} {syntax error in expression "2**3>>6": unexpected operator *}
test compExpr-old-10.9 {CompileShiftExpr: error compiling shift arm} {
d346 2
a347 2
} {syntax error in expression "2<<x": variable references require preceding $}
test compExpr-old-10.10 {CompileShiftExpr: runtime error} {
d350 1
a350 1
test compExpr-old-10.11 {CompileShiftExpr: runtime error} {
d354 5
a358 5
test compExpr-old-11.1 {CompileAddExpr: just multiply expr} {expr 4*-2} -8
test compExpr-old-11.2 {CompileAddExpr: just multiply expr} {expr 0xff%2} 1
test compExpr-old-11.3 {CompileAddExpr: just multiply expr} {expr -1/2} -1
test compExpr-old-11.4 {CompileAddExpr: just multiply expr} {expr 7891%0123} 6
test compExpr-old-11.5 {CompileAddExpr: error in multiply expr} {
d361 4
a364 4
} {syntax error in expression "x*3": variable references require preceding $}
test compExpr-old-11.6 {CompileAddExpr: simple add exprs} {expr 0xff++0x3} 258
test compExpr-old-11.7 {CompileAddExpr: simple add exprs} {expr -0xf2--0x3} -239
test compExpr-old-11.8 {CompileAddExpr: error compiling add arm} {
d367 2
a368 2
} {syntax error in expression "2**3+6": unexpected operator *}
test compExpr-old-11.9 {CompileAddExpr: error compiling add arm} {
d371 2
a372 2
} {syntax error in expression "2-x": variable references require preceding $}
test compExpr-old-11.10 {CompileAddExpr: runtime error} {
d375 1
a375 1
test compExpr-old-11.11 {CompileAddExpr: runtime error} {
d378 1
a378 1
test compExpr-old-11.12 {CompileAddExpr: runtime error} {
d381 1
a381 1
test compExpr-old-11.13 {CompileAddExpr: runtime error} {
d385 5
a389 5
test compExpr-old-12.1 {CompileMultiplyExpr: just unary expr} {expr ~4} -5
test compExpr-old-12.2 {CompileMultiplyExpr: just unary expr} {expr --5} 5
test compExpr-old-12.3 {CompileMultiplyExpr: just unary expr} {expr !27} 0
test compExpr-old-12.4 {CompileMultiplyExpr: just unary expr} {expr ~0xff00ff} -16711936
test compExpr-old-12.5 {CompileMultiplyExpr: error in unary expr} {
d392 4
a395 4
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-12.6 {CompileMultiplyExpr: simple multiply exprs} {expr 0xff*0x3} 765
test compExpr-old-12.7 {CompileMultiplyExpr: simple multiply exprs} {expr -0xf2%-0x3} -2
test compExpr-old-12.8 {CompileMultiplyExpr: error compiling multiply arm} {
d398 2
a399 2
} {syntax error in expression "2*3%%6": unexpected operator %}
test compExpr-old-12.9 {CompileMultiplyExpr: error compiling multiply arm} {
d402 2
a403 2
} {syntax error in expression "2*x": variable references require preceding $}
test compExpr-old-12.10 {CompileMultiplyExpr: runtime error} {
d406 1
a406 1
test compExpr-old-12.11 {CompileMultiplyExpr: runtime error} {
d410 8
a417 8
test compExpr-old-13.1 {CompileUnaryExpr: unary exprs} {expr -0xff} -255
test compExpr-old-13.2 {CompileUnaryExpr: unary exprs} {expr +000123} 83
test compExpr-old-13.3 {CompileUnaryExpr: unary exprs} {expr +--++36} 36
test compExpr-old-13.4 {CompileUnaryExpr: unary exprs} {expr !2} 0
test compExpr-old-13.5 {CompileUnaryExpr: unary exprs} {expr +--+-62.0} -62.0
test compExpr-old-13.6 {CompileUnaryExpr: unary exprs} {expr !0.0} 1
test compExpr-old-13.7 {CompileUnaryExpr: unary exprs} {expr !0xef} 0
test compExpr-old-13.8 {CompileUnaryExpr: error compiling unary expr} {
d420 2
a421 2
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-13.9 {CompileUnaryExpr: error compiling unary expr} {
d424 2
a425 2
} {syntax error in expression "!1.x": extra tokens at end of expression}
test compExpr-old-13.10 {CompileUnaryExpr: runtime error} {
d428 1
a428 1
test compExpr-old-13.11 {CompileUnaryExpr: runtime error} {
d431 2
a432 2
test compExpr-old-13.12 {CompileUnaryExpr: just primary expr} {expr 0x123} 291
test compExpr-old-13.13 {CompileUnaryExpr: just primary expr} {
d436 1
a436 1
test compExpr-old-13.14 {CompileUnaryExpr: just primary expr} {
d439 2
a440 2
test compExpr-old-13.15 {CompileUnaryExpr: just primary expr} {expr "123"} 123
test compExpr-old-13.16 {CompileUnaryExpr: error in primary expr} {
d444 6
a449 6
test compExpr-old-14.1 {CompilePrimaryExpr: literal primary} {expr 1} 1
test compExpr-old-14.2 {CompilePrimaryExpr: literal primary} {expr 123} 123
test compExpr-old-14.3 {CompilePrimaryExpr: literal primary} {expr 0xff} 255
test compExpr-old-14.4 {CompilePrimaryExpr: literal primary} {expr 00010} 8
test compExpr-old-14.5 {CompilePrimaryExpr: literal primary} {expr 62.0} 62.0
test compExpr-old-14.6 {CompilePrimaryExpr: literal primary} {
d452 2
a453 2
test compExpr-old-14.7 {CompilePrimaryExpr: literal primary} {expr {{abcde}<{abcdef}}} 1
test compExpr-old-14.8 {CompilePrimaryExpr: literal primary} {expr {{abc\
d455 3
a457 3
test compExpr-old-14.9 {CompilePrimaryExpr: literal primary} {expr {{abc\tde} > {abc\tdef}}} 0
test compExpr-old-14.10 {CompilePrimaryExpr: literal primary} {expr {{123}}} 123
test compExpr-old-14.11 {CompilePrimaryExpr: var reference primary} {
d461 1
a461 1
test compExpr-old-14.12 {CompilePrimaryExpr: var reference primary} {
d465 1
a465 1
test compExpr-old-14.13 {CompilePrimaryExpr: var reference primary} {
d475 1
a475 1
test compExpr-old-14.14 {CompilePrimaryExpr: var reference primary} {
d479 1
a479 1
test compExpr-old-14.15 {CompilePrimaryExpr: var reference primary} {
d484 1
a484 1
test compExpr-old-14.16 {CompilePrimaryExpr: error compiling var reference primary} {
d490 1
a490 1
test compExpr-old-14.17 {CompilePrimaryExpr: string primary that looks like var ref} {
d493 1
a493 1
test compExpr-old-14.18 {CompilePrimaryExpr: quoted string primary} {
d496 1
a496 1
test compExpr-old-14.19 {CompilePrimaryExpr: quoted string primary} {
d501 1
a501 1
test compExpr-old-14.20 {CompilePrimaryExpr: quoted string primary} {
d506 1
a506 1
test compExpr-old-14.21 {CompilePrimaryExpr: error in quoted string primary} {
d510 1
a510 1
test compExpr-old-14.22 {CompilePrimaryExpr: subcommand primary} {
d513 1
a513 1
test compExpr-old-14.23 {CompilePrimaryExpr: error in subcommand primary} {
d521 1
a521 1
test compExpr-old-14.24 {CompilePrimaryExpr: error in subcommand primary} {
d527 1
a527 1
test compExpr-old-14.25 {CompilePrimaryExpr: math function primary} {
d530 1
a530 1
test compExpr-old-14.26 {CompilePrimaryExpr: math function primary} {
d533 1
a533 1
test compExpr-old-14.27 {CompilePrimaryExpr: error in math function primary} {
d536 1
a536 1
} {syntax error in expression "sinh::(2.0)": expected parenthesis enclosing function arguments
d539 1
a539 1
test compExpr-old-14.28 {CompilePrimaryExpr: subexpression primary} {
d542 1
a542 1
test compExpr-old-14.29 {CompilePrimaryExpr: error in subexpression primary} {
d550 1
a550 1
test compExpr-old-14.30 {CompilePrimaryExpr: missing paren in subexpression primary} {
d553 1
a553 1
} {syntax error in expression "2+(3*(4+5)": looking for close parenthesis
d556 1
a556 1
test compExpr-old-14.31 {CompilePrimaryExpr: just var ref in subexpression primary} {
d560 1
a560 1
test compExpr-old-14.32 {CompilePrimaryExpr: unexpected token} {
d563 1
a563 1
} {syntax error in expression "@@": character not legal in expressions
d567 1
a567 1
test compExpr-old-15.1 {CompileMathFuncCall: missing parenthesis} {
d570 1
a570 1
} {syntax error in expression "sinh2.0)": variable references require preceding $
d573 1
a573 1
test compExpr-old-15.2 {CompileMathFuncCall: unknown math function} {
d579 1
a579 1
test compExpr-old-15.3 {CompileMathFuncCall: too many arguments} {
d585 1
a585 1
test compExpr-old-15.4 {CompileMathFuncCall: ')' found before last required arg} {
d591 1
a591 1
test compExpr-old-15.5 {CompileMathFuncCall: too few arguments} {
d597 1
a597 1
test compExpr-old-15.6 {CompileMathFuncCall: missing ')'} {
d600 1
a600 1
} {syntax error in expression "sin(1": missing close parenthesis at end of function call
d604 1
a604 1
    test compExpr-old-15.7 {CompileMathFuncCall: call registered math function} {
d607 1
a607 1
    test compExpr-old-15.8 {CompileMathFuncCall: call registered math function} {
d611 1
a611 1
    test compExpr-old-15.9 {CompileMathFuncCall: call registered math function} {
d614 1
a614 1
    test compExpr-old-15.10 {CompileMathFuncCall: call registered math function} {
d617 1
a617 1
    test compExpr-old-15.11 {CompileMathFuncCall: call registered math function} {
d622 1
a622 1
test compExpr-old-16.1 {GetToken: checks whether integer token starting with "0x" (e.g., "0x$") is invalid} {
d631 1
a631 1
test compExpr-old-16.2 {GetToken: check for string literal in braces} {
d637 1
a637 1
test compExpr-old-17.1 {expr and computed command names} {
d647 1
a647 1
test compExpr-old-18.1 {expr and conversion of operands to numbers} {
d656 1
a656 1
test compExpr-old-19.1 {expr and interpreter result object resetting} {
d679 13
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d5 1
a5 1
# the new implementation are in the files "parseExpr.test" and
d15 1
a15 1
# RCS: @@(#) $Id: compExpr-old.test,v 1.7 2001/12/06 10:59:17 dkf Exp $
d79 1
a79 1
test compExpr-old-1.1 {TclCompileExprCmd: no expression} {
d82 1
a82 1
test compExpr-old-1.2 {TclCompileExprCmd: one expression word} {
d85 1
a85 1
test compExpr-old-1.3 {TclCompileExprCmd: two expression words} {
d88 1
a88 1
test compExpr-old-1.4 {TclCompileExprCmd: five expression words} {
d91 1
a91 1
test compExpr-old-1.5 {TclCompileExprCmd: quoted expression word} {
d94 1
a94 1
test compExpr-old-1.6 {TclCompileExprCmd: quoted expression word} {
d98 1
a98 1
test compExpr-old-1.7 {TclCompileExprCmd: expression word in braces} {
d101 1
a101 1
test compExpr-old-1.8 {TclCompileExprCmd: expression word in braces} {
d104 1
a104 1
test compExpr-old-1.9 {TclCompileExprCmd: expression word in braces} {
d108 1
a108 1
test compExpr-old-1.10 {TclCompileExprCmd: other expression word in braces} {
d111 1
a111 1
test compExpr-old-1.11 {TclCompileExprCmd: expression word terminated by ;} {
d114 1
a114 1
test compExpr-old-1.12 {TclCompileExprCmd: inlined expr (in "catch") inside other catch} {
d121 1
a121 1
test compExpr-old-1.13 {TclCompileExprCmd: second level of substitutions in expr not in braces with single var reference} {
d126 1
a126 1
test compExpr-old-1.14 {TclCompileExprCmd: second level of substitutions in expr with comparison as top-level operator} {
d132 1
a132 1
test compExpr-old-2.1 {TclCompileExpr: are builtin functions registered?} {
d135 1
a135 1
test compExpr-old-2.2 {TclCompileExpr: error in expr} {
d138 2
a139 2
} {syntax error in expression "2**3": unexpected operator *}
test compExpr-old-2.3 {TclCompileExpr: junk after legal expr} {
d142 2
a143 2
} {syntax error in expression "7*2foo": extra tokens at end of expression}
test compExpr-old-2.4 {TclCompileExpr: numeric expr string rep == formatted int rep} {
d147 2
a148 2
test compExpr-old-3.1 {CompileCondExpr: just lor expr} {expr 3||0} 1
test compExpr-old-3.2 {CompileCondExpr: error in lor expr} {
d151 3
a153 3
} {syntax error in expression "x||3": variable references require preceding $} 
test compExpr-old-3.3 {CompileCondExpr: test true arm} {expr 3>2?44:66} 44
test compExpr-old-3.4 {CompileCondExpr: error compiling true arm} {
d156 3
a158 3
} {syntax error in expression "3>2?2**3:66": unexpected operator *}
test compExpr-old-3.5 {CompileCondExpr: test false arm} {expr 2>3?44:66} 66
test compExpr-old-3.6 {CompileCondExpr: error compiling false arm} {
d161 3
a163 3
} {syntax error in expression "2>3?44:2**3": unexpected operator *}
test compExpr-old-3.7 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.7 which can take several minutes to run"
d167 2
a168 2
test compExpr-old-3.8 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.8 which can take several minutes to run"
d173 2
a174 2
test compExpr-old-4.1 {CompileLorExpr: just land expr} {expr 1.3&&3.3} 1
test compExpr-old-4.2 {CompileLorExpr: error in land expr} {
d177 5
a181 5
} {syntax error in expression "x&&3": variable references require preceding $} 
test compExpr-old-4.3 {CompileLorExpr: simple lor exprs} {expr 0||1.0} 1
test compExpr-old-4.4 {CompileLorExpr: simple lor exprs} {expr 3.0||0.0} 1
test compExpr-old-4.5 {CompileLorExpr: simple lor exprs} {expr 0||0||1} 1
test compExpr-old-4.6 {CompileLorExpr: error compiling lor arm} {
d184 2
a185 2
} {syntax error in expression "2**3||4.0": unexpected operator *}
test compExpr-old-4.7 {CompileLorExpr: error compiling lor arm} {
d188 2
a189 2
} {syntax error in expression "1.3||2**3": unexpected operator *}
test compExpr-old-4.8 {CompileLorExpr: error compiling lor arms} {
d192 1
a192 1
test compExpr-old-4.9 {CompileLorExpr: long lor arm} {
d198 2
a199 2
test compExpr-old-5.1 {CompileLandExpr: just bitor expr} {expr 7|0x13} 23
test compExpr-old-5.2 {CompileLandExpr: error in bitor expr} {
d202 6
a207 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-5.3 {CompileLandExpr: simple land exprs} {expr 0&&1.0} 0
test compExpr-old-5.4 {CompileLandExpr: simple land exprs} {expr 0&&0} 0
test compExpr-old-5.5 {CompileLandExpr: simple land exprs} {expr 3.0&&1.2} 1
test compExpr-old-5.6 {CompileLandExpr: simple land exprs} {expr 1&&1&&2} 1
test compExpr-old-5.7 {CompileLandExpr: error compiling land arm} {
d210 2
a211 2
} {syntax error in expression "2**3&&4.0": unexpected operator *}
test compExpr-old-5.8 {CompileLandExpr: error compiling land arm} {
d214 2
a215 2
} {syntax error in expression "1.3&&2**3": unexpected operator *}
test compExpr-old-5.9 {CompileLandExpr: error compiling land arm} {
d218 1
a218 1
test compExpr-old-5.10 {CompileLandExpr: long land arms} {
d224 2
a225 2
test compExpr-old-6.1 {CompileBitXorExpr: just bitand expr} {expr 7&0x13} 3
test compExpr-old-6.2 {CompileBitXorExpr: error in bitand expr} {
d228 6
a233 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-6.3 {CompileBitXorExpr: simple bitxor exprs} {expr 7^0x13} 20
test compExpr-old-6.4 {CompileBitXorExpr: simple bitxor exprs} {expr 3^0x10} 19
test compExpr-old-6.5 {CompileBitXorExpr: simple bitxor exprs} {expr 0^7} 7
test compExpr-old-6.6 {CompileBitXorExpr: simple bitxor exprs} {expr -1^7} -8
test compExpr-old-6.7 {CompileBitXorExpr: error compiling bitxor arm} {
d236 2
a237 2
} {syntax error in expression "2**3|6": unexpected operator *}
test compExpr-old-6.8 {CompileBitXorExpr: error compiling bitxor arm} {
d240 2
a241 2
} {syntax error in expression "2^x": variable references require preceding $}
test compExpr-old-6.9 {CompileBitXorExpr: runtime error in bitxor arm} {
d244 1
a244 1
test compExpr-old-6.10 {CompileBitXorExpr: runtime error in bitxor arm} {
d248 5
a252 5
test compExpr-old-7.1 {CompileBitAndExpr: just equality expr} {expr 3==2} 0
test compExpr-old-7.2 {CompileBitAndExpr: just equality expr} {expr 2.0==2} 1
test compExpr-old-7.3 {CompileBitAndExpr: just equality expr} {expr 3.2!=2.2} 1
test compExpr-old-7.4 {CompileBitAndExpr: just equality expr} {expr {"abc" == "abd"}} 0
test compExpr-old-7.5 {CompileBitAndExpr: error in equality expr} {
d255 6
a260 6
} {syntax error in expression "x==3": variable references require preceding $} 
test compExpr-old-7.6 {CompileBitAndExpr: simple bitand exprs} {expr 7&0x13} 3
test compExpr-old-7.7 {CompileBitAndExpr: simple bitand exprs} {expr 0xf2&0x53} 82
test compExpr-old-7.8 {CompileBitAndExpr: simple bitand exprs} {expr 3&6} 2
test compExpr-old-7.9 {CompileBitAndExpr: simple bitand exprs} {expr -1&-7} -7
test compExpr-old-7.10 {CompileBitAndExpr: error compiling bitand arm} {
d263 2
a264 2
} {syntax error in expression "2**3&6": unexpected operator *}
test compExpr-old-7.11 {CompileBitAndExpr: error compiling bitand arm} {
d267 2
a268 2
} {syntax error in expression "2&x": variable references require preceding $}
test compExpr-old-7.12 {CompileBitAndExpr: runtime error in bitand arm} {
d271 1
a271 1
test compExpr-old-7.13 {CompileBitAndExpr: runtime error in bitand arm} {
d275 5
a279 5
test compExpr-old-8.1 {CompileEqualityExpr: just relational expr} {expr 3>=2} 1
test compExpr-old-8.2 {CompileEqualityExpr: just relational expr} {expr 2<=2.1} 1
test compExpr-old-8.3 {CompileEqualityExpr: just relational expr} {expr 3.2>"2.2"} 1
test compExpr-old-8.4 {CompileEqualityExpr: just relational expr} {expr {"0y"<"0x12"}} 0
test compExpr-old-8.5 {CompileEqualityExpr: error in relational expr} {
d282 6
a287 6
} {syntax error in expression "x>3": variable references require preceding $} 
test compExpr-old-8.6 {CompileEqualityExpr: simple equality exprs} {expr 7==0x13} 0
test compExpr-old-8.7 {CompileEqualityExpr: simple equality exprs} {expr -0xf2!=0x53} 1
test compExpr-old-8.8 {CompileEqualityExpr: simple equality exprs} {expr {"12398712938788234-1298379" != ""}} 1
test compExpr-old-8.9 {CompileEqualityExpr: simple equality exprs} {expr -1!="abc"} 1
test compExpr-old-8.10 {CompileEqualityExpr: error compiling equality arm} {
d290 2
a291 2
} {syntax error in expression "2**3==6": unexpected operator *}
test compExpr-old-8.11 {CompileEqualityExpr: error compiling equality arm} {
d294 1
a294 1
} {syntax error in expression "2!=x": variable references require preceding $}
d297 4
a300 4
test compExpr-old-9.1 {CompileRelationalExpr: just shift expr} {expr 3<<2} 12
test compExpr-old-9.2 {CompileRelationalExpr: just shift expr} {expr 0xff>>2} 63
test compExpr-old-9.3 {CompileRelationalExpr: just shift expr} {expr -1>>2} -1
test compExpr-old-9.4 {CompileRelationalExpr: just shift expr} {expr {1<<3}} 8
d306 1
a306 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d310 1
a310 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d314 1
a314 1
test compExpr-old-9.6 {CompileRelationalExpr: error in shift expr} {
d317 4
a320 4
} {syntax error in expression "x>>3": variable references require preceding $} 
test compExpr-old-9.7 {CompileRelationalExpr: simple relational exprs} {expr 0xff>=+0x3} 1
test compExpr-old-9.8 {CompileRelationalExpr: simple relational exprs} {expr -0xf2<0x3} 1
test compExpr-old-9.9 {CompileRelationalExpr: error compiling relational arm} {
d323 2
a324 2
} {syntax error in expression "2**3>6": unexpected operator *}
test compExpr-old-9.10 {CompileRelationalExpr: error compiling relational arm} {
d327 1
a327 1
} {syntax error in expression "2<x": variable references require preceding $}
d329 5
a333 5
test compExpr-old-10.1 {CompileShiftExpr: just add expr} {expr 4+-2} 2
test compExpr-old-10.2 {CompileShiftExpr: just add expr} {expr 0xff-2} 253
test compExpr-old-10.3 {CompileShiftExpr: just add expr} {expr -1--2} 1
test compExpr-old-10.4 {CompileShiftExpr: just add expr} {expr 1-0123} -82
test compExpr-old-10.5 {CompileShiftExpr: error in add expr} {
d336 4
a339 4
} {syntax error in expression "x+3": variable references require preceding $}
test compExpr-old-10.6 {CompileShiftExpr: simple shift exprs} {expr 0xff>>0x3} 31
test compExpr-old-10.7 {CompileShiftExpr: simple shift exprs} {expr -0xf2<<0x3} -1936
test compExpr-old-10.8 {CompileShiftExpr: error compiling shift arm} {
d342 2
a343 2
} {syntax error in expression "2**3>>6": unexpected operator *}
test compExpr-old-10.9 {CompileShiftExpr: error compiling shift arm} {
d346 2
a347 2
} {syntax error in expression "2<<x": variable references require preceding $}
test compExpr-old-10.10 {CompileShiftExpr: runtime error} {
d350 1
a350 1
test compExpr-old-10.11 {CompileShiftExpr: runtime error} {
d354 5
a358 5
test compExpr-old-11.1 {CompileAddExpr: just multiply expr} {expr 4*-2} -8
test compExpr-old-11.2 {CompileAddExpr: just multiply expr} {expr 0xff%2} 1
test compExpr-old-11.3 {CompileAddExpr: just multiply expr} {expr -1/2} -1
test compExpr-old-11.4 {CompileAddExpr: just multiply expr} {expr 7891%0123} 6
test compExpr-old-11.5 {CompileAddExpr: error in multiply expr} {
d361 4
a364 4
} {syntax error in expression "x*3": variable references require preceding $}
test compExpr-old-11.6 {CompileAddExpr: simple add exprs} {expr 0xff++0x3} 258
test compExpr-old-11.7 {CompileAddExpr: simple add exprs} {expr -0xf2--0x3} -239
test compExpr-old-11.8 {CompileAddExpr: error compiling add arm} {
d367 2
a368 2
} {syntax error in expression "2**3+6": unexpected operator *}
test compExpr-old-11.9 {CompileAddExpr: error compiling add arm} {
d371 2
a372 2
} {syntax error in expression "2-x": variable references require preceding $}
test compExpr-old-11.10 {CompileAddExpr: runtime error} {
d375 1
a375 1
test compExpr-old-11.11 {CompileAddExpr: runtime error} {
d378 1
a378 1
test compExpr-old-11.12 {CompileAddExpr: runtime error} {
d381 1
a381 1
test compExpr-old-11.13 {CompileAddExpr: runtime error} {
d385 5
a389 5
test compExpr-old-12.1 {CompileMultiplyExpr: just unary expr} {expr ~4} -5
test compExpr-old-12.2 {CompileMultiplyExpr: just unary expr} {expr --5} 5
test compExpr-old-12.3 {CompileMultiplyExpr: just unary expr} {expr !27} 0
test compExpr-old-12.4 {CompileMultiplyExpr: just unary expr} {expr ~0xff00ff} -16711936
test compExpr-old-12.5 {CompileMultiplyExpr: error in unary expr} {
d392 4
a395 4
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-12.6 {CompileMultiplyExpr: simple multiply exprs} {expr 0xff*0x3} 765
test compExpr-old-12.7 {CompileMultiplyExpr: simple multiply exprs} {expr -0xf2%-0x3} -2
test compExpr-old-12.8 {CompileMultiplyExpr: error compiling multiply arm} {
d398 2
a399 2
} {syntax error in expression "2*3%%6": unexpected operator %}
test compExpr-old-12.9 {CompileMultiplyExpr: error compiling multiply arm} {
d402 2
a403 2
} {syntax error in expression "2*x": variable references require preceding $}
test compExpr-old-12.10 {CompileMultiplyExpr: runtime error} {
d406 1
a406 1
test compExpr-old-12.11 {CompileMultiplyExpr: runtime error} {
d410 8
a417 8
test compExpr-old-13.1 {CompileUnaryExpr: unary exprs} {expr -0xff} -255
test compExpr-old-13.2 {CompileUnaryExpr: unary exprs} {expr +000123} 83
test compExpr-old-13.3 {CompileUnaryExpr: unary exprs} {expr +--++36} 36
test compExpr-old-13.4 {CompileUnaryExpr: unary exprs} {expr !2} 0
test compExpr-old-13.5 {CompileUnaryExpr: unary exprs} {expr +--+-62.0} -62.0
test compExpr-old-13.6 {CompileUnaryExpr: unary exprs} {expr !0.0} 1
test compExpr-old-13.7 {CompileUnaryExpr: unary exprs} {expr !0xef} 0
test compExpr-old-13.8 {CompileUnaryExpr: error compiling unary expr} {
d420 2
a421 2
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-13.9 {CompileUnaryExpr: error compiling unary expr} {
d424 2
a425 2
} {syntax error in expression "!1.x": extra tokens at end of expression}
test compExpr-old-13.10 {CompileUnaryExpr: runtime error} {
d428 1
a428 1
test compExpr-old-13.11 {CompileUnaryExpr: runtime error} {
d431 2
a432 2
test compExpr-old-13.12 {CompileUnaryExpr: just primary expr} {expr 0x123} 291
test compExpr-old-13.13 {CompileUnaryExpr: just primary expr} {
d436 1
a436 1
test compExpr-old-13.14 {CompileUnaryExpr: just primary expr} {
d439 2
a440 2
test compExpr-old-13.15 {CompileUnaryExpr: just primary expr} {expr "123"} 123
test compExpr-old-13.16 {CompileUnaryExpr: error in primary expr} {
d444 6
a449 6
test compExpr-old-14.1 {CompilePrimaryExpr: literal primary} {expr 1} 1
test compExpr-old-14.2 {CompilePrimaryExpr: literal primary} {expr 123} 123
test compExpr-old-14.3 {CompilePrimaryExpr: literal primary} {expr 0xff} 255
test compExpr-old-14.4 {CompilePrimaryExpr: literal primary} {expr 00010} 8
test compExpr-old-14.5 {CompilePrimaryExpr: literal primary} {expr 62.0} 62.0
test compExpr-old-14.6 {CompilePrimaryExpr: literal primary} {
d452 2
a453 2
test compExpr-old-14.7 {CompilePrimaryExpr: literal primary} {expr {{abcde}<{abcdef}}} 1
test compExpr-old-14.8 {CompilePrimaryExpr: literal primary} {expr {{abc\
d455 3
a457 3
test compExpr-old-14.9 {CompilePrimaryExpr: literal primary} {expr {{abc\tde} > {abc\tdef}}} 0
test compExpr-old-14.10 {CompilePrimaryExpr: literal primary} {expr {{123}}} 123
test compExpr-old-14.11 {CompilePrimaryExpr: var reference primary} {
d461 1
a461 1
test compExpr-old-14.12 {CompilePrimaryExpr: var reference primary} {
d465 1
a465 1
test compExpr-old-14.13 {CompilePrimaryExpr: var reference primary} {
d475 1
a475 1
test compExpr-old-14.14 {CompilePrimaryExpr: var reference primary} {
d479 1
a479 1
test compExpr-old-14.15 {CompilePrimaryExpr: var reference primary} {
d484 1
a484 1
test compExpr-old-14.16 {CompilePrimaryExpr: error compiling var reference primary} {
d490 1
a490 1
test compExpr-old-14.17 {CompilePrimaryExpr: string primary that looks like var ref} {
d493 1
a493 1
test compExpr-old-14.18 {CompilePrimaryExpr: quoted string primary} {
d496 1
a496 1
test compExpr-old-14.19 {CompilePrimaryExpr: quoted string primary} {
d501 1
a501 1
test compExpr-old-14.20 {CompilePrimaryExpr: quoted string primary} {
d506 1
a506 1
test compExpr-old-14.21 {CompilePrimaryExpr: error in quoted string primary} {
d510 1
a510 1
test compExpr-old-14.22 {CompilePrimaryExpr: subcommand primary} {
d513 1
a513 1
test compExpr-old-14.23 {CompilePrimaryExpr: error in subcommand primary} {
d521 1
a521 1
test compExpr-old-14.24 {CompilePrimaryExpr: error in subcommand primary} {
d527 1
a527 1
test compExpr-old-14.25 {CompilePrimaryExpr: math function primary} {
d530 1
a530 1
test compExpr-old-14.26 {CompilePrimaryExpr: math function primary} {
d533 1
a533 1
test compExpr-old-14.27 {CompilePrimaryExpr: error in math function primary} {
d536 1
a536 1
} {syntax error in expression "sinh::(2.0)": expected parenthesis enclosing function arguments
d539 1
a539 1
test compExpr-old-14.28 {CompilePrimaryExpr: subexpression primary} {
d542 1
a542 1
test compExpr-old-14.29 {CompilePrimaryExpr: error in subexpression primary} {
d550 1
a550 1
test compExpr-old-14.30 {CompilePrimaryExpr: missing paren in subexpression primary} {
d553 1
a553 1
} {syntax error in expression "2+(3*(4+5)": looking for close parenthesis
d556 1
a556 1
test compExpr-old-14.31 {CompilePrimaryExpr: just var ref in subexpression primary} {
d560 1
a560 1
test compExpr-old-14.32 {CompilePrimaryExpr: unexpected token} {
d563 1
a563 1
} {syntax error in expression "@@": character not legal in expressions
d567 1
a567 1
test compExpr-old-15.1 {CompileMathFuncCall: missing parenthesis} {
d570 1
a570 1
} {syntax error in expression "sinh2.0)": variable references require preceding $
d573 1
a573 1
test compExpr-old-15.2 {CompileMathFuncCall: unknown math function} {
d579 1
a579 1
test compExpr-old-15.3 {CompileMathFuncCall: too many arguments} {
d585 1
a585 1
test compExpr-old-15.4 {CompileMathFuncCall: ')' found before last required arg} {
d591 1
a591 1
test compExpr-old-15.5 {CompileMathFuncCall: too few arguments} {
d597 1
a597 1
test compExpr-old-15.6 {CompileMathFuncCall: missing ')'} {
d600 1
a600 1
} {syntax error in expression "sin(1": missing close parenthesis at end of function call
d604 1
a604 1
    test compExpr-old-15.7 {CompileMathFuncCall: call registered math function} {
d607 1
a607 1
    test compExpr-old-15.8 {CompileMathFuncCall: call registered math function} {
d611 1
a611 1
    test compExpr-old-15.9 {CompileMathFuncCall: call registered math function} {
d614 1
a614 1
    test compExpr-old-15.10 {CompileMathFuncCall: call registered math function} {
d617 1
a617 1
    test compExpr-old-15.11 {CompileMathFuncCall: call registered math function} {
d622 1
a622 1
test compExpr-old-16.1 {GetToken: checks whether integer token starting with "0x" (e.g., "0x$") is invalid} {
d631 1
a631 1
test compExpr-old-16.2 {GetToken: check for string literal in braces} {
d637 1
a637 1
test compExpr-old-17.1 {expr and computed command names} {
d647 1
a647 1
test compExpr-old-18.1 {expr and conversion of operands to numbers} {
d656 1
a656 1
test compExpr-old-19.1 {expr and interpreter result object resetting} {
d679 13
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d5 1
a5 1
# the new implementation are in the files "parseExpr.test" and
d79 1
a79 1
test compExpr-old-1.1 {TclCompileExprCmd: no expression} {
d82 1
a82 1
test compExpr-old-1.2 {TclCompileExprCmd: one expression word} {
d85 1
a85 1
test compExpr-old-1.3 {TclCompileExprCmd: two expression words} {
d88 1
a88 1
test compExpr-old-1.4 {TclCompileExprCmd: five expression words} {
d91 1
a91 1
test compExpr-old-1.5 {TclCompileExprCmd: quoted expression word} {
d94 1
a94 1
test compExpr-old-1.6 {TclCompileExprCmd: quoted expression word} {
d98 1
a98 1
test compExpr-old-1.7 {TclCompileExprCmd: expression word in braces} {
d101 1
a101 1
test compExpr-old-1.8 {TclCompileExprCmd: expression word in braces} {
d104 1
a104 1
test compExpr-old-1.9 {TclCompileExprCmd: expression word in braces} {
d108 1
a108 1
test compExpr-old-1.10 {TclCompileExprCmd: other expression word in braces} {
d111 1
a111 1
test compExpr-old-1.11 {TclCompileExprCmd: expression word terminated by ;} {
d114 1
a114 1
test compExpr-old-1.12 {TclCompileExprCmd: inlined expr (in "catch") inside other catch} {
d121 1
a121 1
test compExpr-old-1.13 {TclCompileExprCmd: second level of substitutions in expr not in braces with single var reference} {
d126 1
a126 1
test compExpr-old-1.14 {TclCompileExprCmd: second level of substitutions in expr with comparison as top-level operator} {
d132 1
a132 1
test compExpr-old-2.1 {TclCompileExpr: are builtin functions registered?} {
d135 1
a135 1
test compExpr-old-2.2 {TclCompileExpr: error in expr} {
d138 2
a139 2
} {syntax error in expression "2**3": unexpected operator *}
test compExpr-old-2.3 {TclCompileExpr: junk after legal expr} {
d142 2
a143 2
} {syntax error in expression "7*2foo": extra tokens at end of expression}
test compExpr-old-2.4 {TclCompileExpr: numeric expr string rep == formatted int rep} {
d147 2
a148 2
test compExpr-old-3.1 {CompileCondExpr: just lor expr} {expr 3||0} 1
test compExpr-old-3.2 {CompileCondExpr: error in lor expr} {
d151 3
a153 3
} {syntax error in expression "x||3": variable references require preceding $} 
test compExpr-old-3.3 {CompileCondExpr: test true arm} {expr 3>2?44:66} 44
test compExpr-old-3.4 {CompileCondExpr: error compiling true arm} {
d156 3
a158 3
} {syntax error in expression "3>2?2**3:66": unexpected operator *}
test compExpr-old-3.5 {CompileCondExpr: test false arm} {expr 2>3?44:66} 66
test compExpr-old-3.6 {CompileCondExpr: error compiling false arm} {
d161 3
a163 3
} {syntax error in expression "2>3?44:2**3": unexpected operator *}
test compExpr-old-3.7 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.7 which can take several minutes to run"
d167 2
a168 2
test compExpr-old-3.8 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.8 which can take several minutes to run"
d173 2
a174 2
test compExpr-old-4.1 {CompileLorExpr: just land expr} {expr 1.3&&3.3} 1
test compExpr-old-4.2 {CompileLorExpr: error in land expr} {
d177 5
a181 5
} {syntax error in expression "x&&3": variable references require preceding $} 
test compExpr-old-4.3 {CompileLorExpr: simple lor exprs} {expr 0||1.0} 1
test compExpr-old-4.4 {CompileLorExpr: simple lor exprs} {expr 3.0||0.0} 1
test compExpr-old-4.5 {CompileLorExpr: simple lor exprs} {expr 0||0||1} 1
test compExpr-old-4.6 {CompileLorExpr: error compiling lor arm} {
d184 2
a185 2
} {syntax error in expression "2**3||4.0": unexpected operator *}
test compExpr-old-4.7 {CompileLorExpr: error compiling lor arm} {
d188 2
a189 2
} {syntax error in expression "1.3||2**3": unexpected operator *}
test compExpr-old-4.8 {CompileLorExpr: error compiling lor arms} {
d192 1
a192 1
test compExpr-old-4.9 {CompileLorExpr: long lor arm} {
d198 2
a199 2
test compExpr-old-5.1 {CompileLandExpr: just bitor expr} {expr 7|0x13} 23
test compExpr-old-5.2 {CompileLandExpr: error in bitor expr} {
d202 6
a207 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-5.3 {CompileLandExpr: simple land exprs} {expr 0&&1.0} 0
test compExpr-old-5.4 {CompileLandExpr: simple land exprs} {expr 0&&0} 0
test compExpr-old-5.5 {CompileLandExpr: simple land exprs} {expr 3.0&&1.2} 1
test compExpr-old-5.6 {CompileLandExpr: simple land exprs} {expr 1&&1&&2} 1
test compExpr-old-5.7 {CompileLandExpr: error compiling land arm} {
d210 2
a211 2
} {syntax error in expression "2**3&&4.0": unexpected operator *}
test compExpr-old-5.8 {CompileLandExpr: error compiling land arm} {
d214 2
a215 2
} {syntax error in expression "1.3&&2**3": unexpected operator *}
test compExpr-old-5.9 {CompileLandExpr: error compiling land arm} {
d218 1
a218 1
test compExpr-old-5.10 {CompileLandExpr: long land arms} {
d224 2
a225 2
test compExpr-old-6.1 {CompileBitXorExpr: just bitand expr} {expr 7&0x13} 3
test compExpr-old-6.2 {CompileBitXorExpr: error in bitand expr} {
d228 6
a233 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-6.3 {CompileBitXorExpr: simple bitxor exprs} {expr 7^0x13} 20
test compExpr-old-6.4 {CompileBitXorExpr: simple bitxor exprs} {expr 3^0x10} 19
test compExpr-old-6.5 {CompileBitXorExpr: simple bitxor exprs} {expr 0^7} 7
test compExpr-old-6.6 {CompileBitXorExpr: simple bitxor exprs} {expr -1^7} -8
test compExpr-old-6.7 {CompileBitXorExpr: error compiling bitxor arm} {
d236 2
a237 2
} {syntax error in expression "2**3|6": unexpected operator *}
test compExpr-old-6.8 {CompileBitXorExpr: error compiling bitxor arm} {
d240 2
a241 2
} {syntax error in expression "2^x": variable references require preceding $}
test compExpr-old-6.9 {CompileBitXorExpr: runtime error in bitxor arm} {
d244 1
a244 1
test compExpr-old-6.10 {CompileBitXorExpr: runtime error in bitxor arm} {
d248 5
a252 5
test compExpr-old-7.1 {CompileBitAndExpr: just equality expr} {expr 3==2} 0
test compExpr-old-7.2 {CompileBitAndExpr: just equality expr} {expr 2.0==2} 1
test compExpr-old-7.3 {CompileBitAndExpr: just equality expr} {expr 3.2!=2.2} 1
test compExpr-old-7.4 {CompileBitAndExpr: just equality expr} {expr {"abc" == "abd"}} 0
test compExpr-old-7.5 {CompileBitAndExpr: error in equality expr} {
d255 6
a260 6
} {syntax error in expression "x==3": variable references require preceding $} 
test compExpr-old-7.6 {CompileBitAndExpr: simple bitand exprs} {expr 7&0x13} 3
test compExpr-old-7.7 {CompileBitAndExpr: simple bitand exprs} {expr 0xf2&0x53} 82
test compExpr-old-7.8 {CompileBitAndExpr: simple bitand exprs} {expr 3&6} 2
test compExpr-old-7.9 {CompileBitAndExpr: simple bitand exprs} {expr -1&-7} -7
test compExpr-old-7.10 {CompileBitAndExpr: error compiling bitand arm} {
d263 2
a264 2
} {syntax error in expression "2**3&6": unexpected operator *}
test compExpr-old-7.11 {CompileBitAndExpr: error compiling bitand arm} {
d267 2
a268 2
} {syntax error in expression "2&x": variable references require preceding $}
test compExpr-old-7.12 {CompileBitAndExpr: runtime error in bitand arm} {
d271 1
a271 1
test compExpr-old-7.13 {CompileBitAndExpr: runtime error in bitand arm} {
d275 5
a279 5
test compExpr-old-8.1 {CompileEqualityExpr: just relational expr} {expr 3>=2} 1
test compExpr-old-8.2 {CompileEqualityExpr: just relational expr} {expr 2<=2.1} 1
test compExpr-old-8.3 {CompileEqualityExpr: just relational expr} {expr 3.2>"2.2"} 1
test compExpr-old-8.4 {CompileEqualityExpr: just relational expr} {expr {"0y"<"0x12"}} 0
test compExpr-old-8.5 {CompileEqualityExpr: error in relational expr} {
d282 6
a287 6
} {syntax error in expression "x>3": variable references require preceding $} 
test compExpr-old-8.6 {CompileEqualityExpr: simple equality exprs} {expr 7==0x13} 0
test compExpr-old-8.7 {CompileEqualityExpr: simple equality exprs} {expr -0xf2!=0x53} 1
test compExpr-old-8.8 {CompileEqualityExpr: simple equality exprs} {expr {"12398712938788234-1298379" != ""}} 1
test compExpr-old-8.9 {CompileEqualityExpr: simple equality exprs} {expr -1!="abc"} 1
test compExpr-old-8.10 {CompileEqualityExpr: error compiling equality arm} {
d290 2
a291 2
} {syntax error in expression "2**3==6": unexpected operator *}
test compExpr-old-8.11 {CompileEqualityExpr: error compiling equality arm} {
d294 1
a294 1
} {syntax error in expression "2!=x": variable references require preceding $}
d297 4
a300 4
test compExpr-old-9.1 {CompileRelationalExpr: just shift expr} {expr 3<<2} 12
test compExpr-old-9.2 {CompileRelationalExpr: just shift expr} {expr 0xff>>2} 63
test compExpr-old-9.3 {CompileRelationalExpr: just shift expr} {expr -1>>2} -1
test compExpr-old-9.4 {CompileRelationalExpr: just shift expr} {expr {1<<3}} 8
d306 1
a306 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d310 1
a310 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d314 1
a314 1
test compExpr-old-9.6 {CompileRelationalExpr: error in shift expr} {
d317 4
a320 4
} {syntax error in expression "x>>3": variable references require preceding $} 
test compExpr-old-9.7 {CompileRelationalExpr: simple relational exprs} {expr 0xff>=+0x3} 1
test compExpr-old-9.8 {CompileRelationalExpr: simple relational exprs} {expr -0xf2<0x3} 1
test compExpr-old-9.9 {CompileRelationalExpr: error compiling relational arm} {
d323 2
a324 2
} {syntax error in expression "2**3>6": unexpected operator *}
test compExpr-old-9.10 {CompileRelationalExpr: error compiling relational arm} {
d327 1
a327 1
} {syntax error in expression "2<x": variable references require preceding $}
d329 5
a333 5
test compExpr-old-10.1 {CompileShiftExpr: just add expr} {expr 4+-2} 2
test compExpr-old-10.2 {CompileShiftExpr: just add expr} {expr 0xff-2} 253
test compExpr-old-10.3 {CompileShiftExpr: just add expr} {expr -1--2} 1
test compExpr-old-10.4 {CompileShiftExpr: just add expr} {expr 1-0123} -82
test compExpr-old-10.5 {CompileShiftExpr: error in add expr} {
d336 4
a339 4
} {syntax error in expression "x+3": variable references require preceding $}
test compExpr-old-10.6 {CompileShiftExpr: simple shift exprs} {expr 0xff>>0x3} 31
test compExpr-old-10.7 {CompileShiftExpr: simple shift exprs} {expr -0xf2<<0x3} -1936
test compExpr-old-10.8 {CompileShiftExpr: error compiling shift arm} {
d342 2
a343 2
} {syntax error in expression "2**3>>6": unexpected operator *}
test compExpr-old-10.9 {CompileShiftExpr: error compiling shift arm} {
d346 2
a347 2
} {syntax error in expression "2<<x": variable references require preceding $}
test compExpr-old-10.10 {CompileShiftExpr: runtime error} {
d350 1
a350 1
test compExpr-old-10.11 {CompileShiftExpr: runtime error} {
d354 5
a358 5
test compExpr-old-11.1 {CompileAddExpr: just multiply expr} {expr 4*-2} -8
test compExpr-old-11.2 {CompileAddExpr: just multiply expr} {expr 0xff%2} 1
test compExpr-old-11.3 {CompileAddExpr: just multiply expr} {expr -1/2} -1
test compExpr-old-11.4 {CompileAddExpr: just multiply expr} {expr 7891%0123} 6
test compExpr-old-11.5 {CompileAddExpr: error in multiply expr} {
d361 4
a364 4
} {syntax error in expression "x*3": variable references require preceding $}
test compExpr-old-11.6 {CompileAddExpr: simple add exprs} {expr 0xff++0x3} 258
test compExpr-old-11.7 {CompileAddExpr: simple add exprs} {expr -0xf2--0x3} -239
test compExpr-old-11.8 {CompileAddExpr: error compiling add arm} {
d367 2
a368 2
} {syntax error in expression "2**3+6": unexpected operator *}
test compExpr-old-11.9 {CompileAddExpr: error compiling add arm} {
d371 2
a372 2
} {syntax error in expression "2-x": variable references require preceding $}
test compExpr-old-11.10 {CompileAddExpr: runtime error} {
d375 1
a375 1
test compExpr-old-11.11 {CompileAddExpr: runtime error} {
d378 1
a378 1
test compExpr-old-11.12 {CompileAddExpr: runtime error} {
d381 1
a381 1
test compExpr-old-11.13 {CompileAddExpr: runtime error} {
d385 5
a389 5
test compExpr-old-12.1 {CompileMultiplyExpr: just unary expr} {expr ~4} -5
test compExpr-old-12.2 {CompileMultiplyExpr: just unary expr} {expr --5} 5
test compExpr-old-12.3 {CompileMultiplyExpr: just unary expr} {expr !27} 0
test compExpr-old-12.4 {CompileMultiplyExpr: just unary expr} {expr ~0xff00ff} -16711936
test compExpr-old-12.5 {CompileMultiplyExpr: error in unary expr} {
d392 4
a395 4
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-12.6 {CompileMultiplyExpr: simple multiply exprs} {expr 0xff*0x3} 765
test compExpr-old-12.7 {CompileMultiplyExpr: simple multiply exprs} {expr -0xf2%-0x3} -2
test compExpr-old-12.8 {CompileMultiplyExpr: error compiling multiply arm} {
d398 2
a399 2
} {syntax error in expression "2*3%%6": unexpected operator %}
test compExpr-old-12.9 {CompileMultiplyExpr: error compiling multiply arm} {
d402 2
a403 2
} {syntax error in expression "2*x": variable references require preceding $}
test compExpr-old-12.10 {CompileMultiplyExpr: runtime error} {
d406 1
a406 1
test compExpr-old-12.11 {CompileMultiplyExpr: runtime error} {
d410 8
a417 8
test compExpr-old-13.1 {CompileUnaryExpr: unary exprs} {expr -0xff} -255
test compExpr-old-13.2 {CompileUnaryExpr: unary exprs} {expr +000123} 83
test compExpr-old-13.3 {CompileUnaryExpr: unary exprs} {expr +--++36} 36
test compExpr-old-13.4 {CompileUnaryExpr: unary exprs} {expr !2} 0
test compExpr-old-13.5 {CompileUnaryExpr: unary exprs} {expr +--+-62.0} -62.0
test compExpr-old-13.6 {CompileUnaryExpr: unary exprs} {expr !0.0} 1
test compExpr-old-13.7 {CompileUnaryExpr: unary exprs} {expr !0xef} 0
test compExpr-old-13.8 {CompileUnaryExpr: error compiling unary expr} {
d420 2
a421 2
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-13.9 {CompileUnaryExpr: error compiling unary expr} {
d424 2
a425 2
} {syntax error in expression "!1.x": extra tokens at end of expression}
test compExpr-old-13.10 {CompileUnaryExpr: runtime error} {
d428 1
a428 1
test compExpr-old-13.11 {CompileUnaryExpr: runtime error} {
d431 2
a432 2
test compExpr-old-13.12 {CompileUnaryExpr: just primary expr} {expr 0x123} 291
test compExpr-old-13.13 {CompileUnaryExpr: just primary expr} {
d436 1
a436 1
test compExpr-old-13.14 {CompileUnaryExpr: just primary expr} {
d439 2
a440 2
test compExpr-old-13.15 {CompileUnaryExpr: just primary expr} {expr "123"} 123
test compExpr-old-13.16 {CompileUnaryExpr: error in primary expr} {
d444 6
a449 6
test compExpr-old-14.1 {CompilePrimaryExpr: literal primary} {expr 1} 1
test compExpr-old-14.2 {CompilePrimaryExpr: literal primary} {expr 123} 123
test compExpr-old-14.3 {CompilePrimaryExpr: literal primary} {expr 0xff} 255
test compExpr-old-14.4 {CompilePrimaryExpr: literal primary} {expr 00010} 8
test compExpr-old-14.5 {CompilePrimaryExpr: literal primary} {expr 62.0} 62.0
test compExpr-old-14.6 {CompilePrimaryExpr: literal primary} {
d452 2
a453 2
test compExpr-old-14.7 {CompilePrimaryExpr: literal primary} {expr {{abcde}<{abcdef}}} 1
test compExpr-old-14.8 {CompilePrimaryExpr: literal primary} {expr {{abc\
d455 3
a457 3
test compExpr-old-14.9 {CompilePrimaryExpr: literal primary} {expr {{abc\tde} > {abc\tdef}}} 0
test compExpr-old-14.10 {CompilePrimaryExpr: literal primary} {expr {{123}}} 123
test compExpr-old-14.11 {CompilePrimaryExpr: var reference primary} {
d461 1
a461 1
test compExpr-old-14.12 {CompilePrimaryExpr: var reference primary} {
d465 1
a465 1
test compExpr-old-14.13 {CompilePrimaryExpr: var reference primary} {
d475 1
a475 1
test compExpr-old-14.14 {CompilePrimaryExpr: var reference primary} {
d479 1
a479 1
test compExpr-old-14.15 {CompilePrimaryExpr: var reference primary} {
d484 1
a484 1
test compExpr-old-14.16 {CompilePrimaryExpr: error compiling var reference primary} {
d490 1
a490 1
test compExpr-old-14.17 {CompilePrimaryExpr: string primary that looks like var ref} {
d493 1
a493 1
test compExpr-old-14.18 {CompilePrimaryExpr: quoted string primary} {
d496 1
a496 1
test compExpr-old-14.19 {CompilePrimaryExpr: quoted string primary} {
d501 1
a501 1
test compExpr-old-14.20 {CompilePrimaryExpr: quoted string primary} {
d506 1
a506 1
test compExpr-old-14.21 {CompilePrimaryExpr: error in quoted string primary} {
d510 1
a510 1
test compExpr-old-14.22 {CompilePrimaryExpr: subcommand primary} {
d513 1
a513 1
test compExpr-old-14.23 {CompilePrimaryExpr: error in subcommand primary} {
d521 1
a521 1
test compExpr-old-14.24 {CompilePrimaryExpr: error in subcommand primary} {
d527 1
a527 1
test compExpr-old-14.25 {CompilePrimaryExpr: math function primary} {
d530 1
a530 1
test compExpr-old-14.26 {CompilePrimaryExpr: math function primary} {
d533 1
a533 1
test compExpr-old-14.27 {CompilePrimaryExpr: error in math function primary} {
d536 1
a536 1
} {syntax error in expression "sinh::(2.0)": expected parenthesis enclosing function arguments
d539 1
a539 1
test compExpr-old-14.28 {CompilePrimaryExpr: subexpression primary} {
d542 1
a542 1
test compExpr-old-14.29 {CompilePrimaryExpr: error in subexpression primary} {
d550 1
a550 1
test compExpr-old-14.30 {CompilePrimaryExpr: missing paren in subexpression primary} {
d553 1
a553 1
} {syntax error in expression "2+(3*(4+5)": looking for close parenthesis
d556 1
a556 1
test compExpr-old-14.31 {CompilePrimaryExpr: just var ref in subexpression primary} {
d560 1
a560 1
test compExpr-old-14.32 {CompilePrimaryExpr: unexpected token} {
d563 1
a563 1
} {syntax error in expression "@@": character not legal in expressions
d567 1
a567 1
test compExpr-old-15.1 {CompileMathFuncCall: missing parenthesis} {
d570 1
a570 1
} {syntax error in expression "sinh2.0)": variable references require preceding $
d573 1
a573 1
test compExpr-old-15.2 {CompileMathFuncCall: unknown math function} {
d579 1
a579 1
test compExpr-old-15.3 {CompileMathFuncCall: too many arguments} {
d585 1
a585 1
test compExpr-old-15.4 {CompileMathFuncCall: ')' found before last required arg} {
d591 1
a591 1
test compExpr-old-15.5 {CompileMathFuncCall: too few arguments} {
d597 1
a597 1
test compExpr-old-15.6 {CompileMathFuncCall: missing ')'} {
d600 1
a600 1
} {syntax error in expression "sin(1": missing close parenthesis at end of function call
d604 1
a604 1
    test compExpr-old-15.7 {CompileMathFuncCall: call registered math function} {
d607 1
a607 1
    test compExpr-old-15.8 {CompileMathFuncCall: call registered math function} {
d611 1
a611 1
    test compExpr-old-15.9 {CompileMathFuncCall: call registered math function} {
d614 1
a614 1
    test compExpr-old-15.10 {CompileMathFuncCall: call registered math function} {
d617 1
a617 1
    test compExpr-old-15.11 {CompileMathFuncCall: call registered math function} {
d622 1
a622 1
test compExpr-old-16.1 {GetToken: checks whether integer token starting with "0x" (e.g., "0x$") is invalid} {
d631 1
a631 1
test compExpr-old-16.2 {GetToken: check for string literal in braces} {
d637 1
a637 1
test compExpr-old-17.1 {expr and computed command names} {
d647 1
a647 1
test compExpr-old-18.1 {expr and conversion of operands to numbers} {
d656 1
a656 1
test compExpr-old-19.1 {expr and interpreter result object resetting} {
d679 13
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tcl 8.3 upgrade
@
text
@@


1.1.1.2
log
@import tcl 8.4.0
@
text
@d5 1
a5 1
# the new implementation are in the files "parseExpr.test" and
d15 1
a15 1
# RCS: @@(#) $Id: compExpr-old.test,v 1.7 2001/12/06 10:59:17 dkf Exp $
d79 1
a79 1
test compExpr-old-1.1 {TclCompileExprCmd: no expression} {
d82 1
a82 1
test compExpr-old-1.2 {TclCompileExprCmd: one expression word} {
d85 1
a85 1
test compExpr-old-1.3 {TclCompileExprCmd: two expression words} {
d88 1
a88 1
test compExpr-old-1.4 {TclCompileExprCmd: five expression words} {
d91 1
a91 1
test compExpr-old-1.5 {TclCompileExprCmd: quoted expression word} {
d94 1
a94 1
test compExpr-old-1.6 {TclCompileExprCmd: quoted expression word} {
d98 1
a98 1
test compExpr-old-1.7 {TclCompileExprCmd: expression word in braces} {
d101 1
a101 1
test compExpr-old-1.8 {TclCompileExprCmd: expression word in braces} {
d104 1
a104 1
test compExpr-old-1.9 {TclCompileExprCmd: expression word in braces} {
d108 1
a108 1
test compExpr-old-1.10 {TclCompileExprCmd: other expression word in braces} {
d111 1
a111 1
test compExpr-old-1.11 {TclCompileExprCmd: expression word terminated by ;} {
d114 1
a114 1
test compExpr-old-1.12 {TclCompileExprCmd: inlined expr (in "catch") inside other catch} {
d121 1
a121 1
test compExpr-old-1.13 {TclCompileExprCmd: second level of substitutions in expr not in braces with single var reference} {
d126 1
a126 1
test compExpr-old-1.14 {TclCompileExprCmd: second level of substitutions in expr with comparison as top-level operator} {
d132 1
a132 1
test compExpr-old-2.1 {TclCompileExpr: are builtin functions registered?} {
d135 1
a135 1
test compExpr-old-2.2 {TclCompileExpr: error in expr} {
d138 2
a139 2
} {syntax error in expression "2**3": unexpected operator *}
test compExpr-old-2.3 {TclCompileExpr: junk after legal expr} {
d142 2
a143 2
} {syntax error in expression "7*2foo": extra tokens at end of expression}
test compExpr-old-2.4 {TclCompileExpr: numeric expr string rep == formatted int rep} {
d147 2
a148 2
test compExpr-old-3.1 {CompileCondExpr: just lor expr} {expr 3||0} 1
test compExpr-old-3.2 {CompileCondExpr: error in lor expr} {
d151 3
a153 3
} {syntax error in expression "x||3": variable references require preceding $} 
test compExpr-old-3.3 {CompileCondExpr: test true arm} {expr 3>2?44:66} 44
test compExpr-old-3.4 {CompileCondExpr: error compiling true arm} {
d156 3
a158 3
} {syntax error in expression "3>2?2**3:66": unexpected operator *}
test compExpr-old-3.5 {CompileCondExpr: test false arm} {expr 2>3?44:66} 66
test compExpr-old-3.6 {CompileCondExpr: error compiling false arm} {
d161 3
a163 3
} {syntax error in expression "2>3?44:2**3": unexpected operator *}
test compExpr-old-3.7 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.7 which can take several minutes to run"
d167 2
a168 2
test compExpr-old-3.8 {CompileCondExpr: long arms & nested cond exprs} {nonPortable} {
    puts "Note: doing test compExpr-old-3.8 which can take several minutes to run"
d173 2
a174 2
test compExpr-old-4.1 {CompileLorExpr: just land expr} {expr 1.3&&3.3} 1
test compExpr-old-4.2 {CompileLorExpr: error in land expr} {
d177 5
a181 5
} {syntax error in expression "x&&3": variable references require preceding $} 
test compExpr-old-4.3 {CompileLorExpr: simple lor exprs} {expr 0||1.0} 1
test compExpr-old-4.4 {CompileLorExpr: simple lor exprs} {expr 3.0||0.0} 1
test compExpr-old-4.5 {CompileLorExpr: simple lor exprs} {expr 0||0||1} 1
test compExpr-old-4.6 {CompileLorExpr: error compiling lor arm} {
d184 2
a185 2
} {syntax error in expression "2**3||4.0": unexpected operator *}
test compExpr-old-4.7 {CompileLorExpr: error compiling lor arm} {
d188 2
a189 2
} {syntax error in expression "1.3||2**3": unexpected operator *}
test compExpr-old-4.8 {CompileLorExpr: error compiling lor arms} {
d192 1
a192 1
test compExpr-old-4.9 {CompileLorExpr: long lor arm} {
d198 2
a199 2
test compExpr-old-5.1 {CompileLandExpr: just bitor expr} {expr 7|0x13} 23
test compExpr-old-5.2 {CompileLandExpr: error in bitor expr} {
d202 6
a207 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-5.3 {CompileLandExpr: simple land exprs} {expr 0&&1.0} 0
test compExpr-old-5.4 {CompileLandExpr: simple land exprs} {expr 0&&0} 0
test compExpr-old-5.5 {CompileLandExpr: simple land exprs} {expr 3.0&&1.2} 1
test compExpr-old-5.6 {CompileLandExpr: simple land exprs} {expr 1&&1&&2} 1
test compExpr-old-5.7 {CompileLandExpr: error compiling land arm} {
d210 2
a211 2
} {syntax error in expression "2**3&&4.0": unexpected operator *}
test compExpr-old-5.8 {CompileLandExpr: error compiling land arm} {
d214 2
a215 2
} {syntax error in expression "1.3&&2**3": unexpected operator *}
test compExpr-old-5.9 {CompileLandExpr: error compiling land arm} {
d218 1
a218 1
test compExpr-old-5.10 {CompileLandExpr: long land arms} {
d224 2
a225 2
test compExpr-old-6.1 {CompileBitXorExpr: just bitand expr} {expr 7&0x13} 3
test compExpr-old-6.2 {CompileBitXorExpr: error in bitand expr} {
d228 6
a233 6
} {syntax error in expression "x|3": variable references require preceding $} 
test compExpr-old-6.3 {CompileBitXorExpr: simple bitxor exprs} {expr 7^0x13} 20
test compExpr-old-6.4 {CompileBitXorExpr: simple bitxor exprs} {expr 3^0x10} 19
test compExpr-old-6.5 {CompileBitXorExpr: simple bitxor exprs} {expr 0^7} 7
test compExpr-old-6.6 {CompileBitXorExpr: simple bitxor exprs} {expr -1^7} -8
test compExpr-old-6.7 {CompileBitXorExpr: error compiling bitxor arm} {
d236 2
a237 2
} {syntax error in expression "2**3|6": unexpected operator *}
test compExpr-old-6.8 {CompileBitXorExpr: error compiling bitxor arm} {
d240 2
a241 2
} {syntax error in expression "2^x": variable references require preceding $}
test compExpr-old-6.9 {CompileBitXorExpr: runtime error in bitxor arm} {
d244 1
a244 1
test compExpr-old-6.10 {CompileBitXorExpr: runtime error in bitxor arm} {
d248 5
a252 5
test compExpr-old-7.1 {CompileBitAndExpr: just equality expr} {expr 3==2} 0
test compExpr-old-7.2 {CompileBitAndExpr: just equality expr} {expr 2.0==2} 1
test compExpr-old-7.3 {CompileBitAndExpr: just equality expr} {expr 3.2!=2.2} 1
test compExpr-old-7.4 {CompileBitAndExpr: just equality expr} {expr {"abc" == "abd"}} 0
test compExpr-old-7.5 {CompileBitAndExpr: error in equality expr} {
d255 6
a260 6
} {syntax error in expression "x==3": variable references require preceding $} 
test compExpr-old-7.6 {CompileBitAndExpr: simple bitand exprs} {expr 7&0x13} 3
test compExpr-old-7.7 {CompileBitAndExpr: simple bitand exprs} {expr 0xf2&0x53} 82
test compExpr-old-7.8 {CompileBitAndExpr: simple bitand exprs} {expr 3&6} 2
test compExpr-old-7.9 {CompileBitAndExpr: simple bitand exprs} {expr -1&-7} -7
test compExpr-old-7.10 {CompileBitAndExpr: error compiling bitand arm} {
d263 2
a264 2
} {syntax error in expression "2**3&6": unexpected operator *}
test compExpr-old-7.11 {CompileBitAndExpr: error compiling bitand arm} {
d267 2
a268 2
} {syntax error in expression "2&x": variable references require preceding $}
test compExpr-old-7.12 {CompileBitAndExpr: runtime error in bitand arm} {
d271 1
a271 1
test compExpr-old-7.13 {CompileBitAndExpr: runtime error in bitand arm} {
d275 5
a279 5
test compExpr-old-8.1 {CompileEqualityExpr: just relational expr} {expr 3>=2} 1
test compExpr-old-8.2 {CompileEqualityExpr: just relational expr} {expr 2<=2.1} 1
test compExpr-old-8.3 {CompileEqualityExpr: just relational expr} {expr 3.2>"2.2"} 1
test compExpr-old-8.4 {CompileEqualityExpr: just relational expr} {expr {"0y"<"0x12"}} 0
test compExpr-old-8.5 {CompileEqualityExpr: error in relational expr} {
d282 6
a287 6
} {syntax error in expression "x>3": variable references require preceding $} 
test compExpr-old-8.6 {CompileEqualityExpr: simple equality exprs} {expr 7==0x13} 0
test compExpr-old-8.7 {CompileEqualityExpr: simple equality exprs} {expr -0xf2!=0x53} 1
test compExpr-old-8.8 {CompileEqualityExpr: simple equality exprs} {expr {"12398712938788234-1298379" != ""}} 1
test compExpr-old-8.9 {CompileEqualityExpr: simple equality exprs} {expr -1!="abc"} 1
test compExpr-old-8.10 {CompileEqualityExpr: error compiling equality arm} {
d290 2
a291 2
} {syntax error in expression "2**3==6": unexpected operator *}
test compExpr-old-8.11 {CompileEqualityExpr: error compiling equality arm} {
d294 1
a294 1
} {syntax error in expression "2!=x": variable references require preceding $}
d297 4
a300 4
test compExpr-old-9.1 {CompileRelationalExpr: just shift expr} {expr 3<<2} 12
test compExpr-old-9.2 {CompileRelationalExpr: just shift expr} {expr 0xff>>2} 63
test compExpr-old-9.3 {CompileRelationalExpr: just shift expr} {expr -1>>2} -1
test compExpr-old-9.4 {CompileRelationalExpr: just shift expr} {expr {1<<3}} 8
d306 1
a306 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d310 1
a310 1
    test compExpr-old-9.5 {CompileRelationalExpr: shift expr producing LONG_MIN} {nonPortable} {
d314 1
a314 1
test compExpr-old-9.6 {CompileRelationalExpr: error in shift expr} {
d317 4
a320 4
} {syntax error in expression "x>>3": variable references require preceding $} 
test compExpr-old-9.7 {CompileRelationalExpr: simple relational exprs} {expr 0xff>=+0x3} 1
test compExpr-old-9.8 {CompileRelationalExpr: simple relational exprs} {expr -0xf2<0x3} 1
test compExpr-old-9.9 {CompileRelationalExpr: error compiling relational arm} {
d323 2
a324 2
} {syntax error in expression "2**3>6": unexpected operator *}
test compExpr-old-9.10 {CompileRelationalExpr: error compiling relational arm} {
d327 1
a327 1
} {syntax error in expression "2<x": variable references require preceding $}
d329 5
a333 5
test compExpr-old-10.1 {CompileShiftExpr: just add expr} {expr 4+-2} 2
test compExpr-old-10.2 {CompileShiftExpr: just add expr} {expr 0xff-2} 253
test compExpr-old-10.3 {CompileShiftExpr: just add expr} {expr -1--2} 1
test compExpr-old-10.4 {CompileShiftExpr: just add expr} {expr 1-0123} -82
test compExpr-old-10.5 {CompileShiftExpr: error in add expr} {
d336 4
a339 4
} {syntax error in expression "x+3": variable references require preceding $}
test compExpr-old-10.6 {CompileShiftExpr: simple shift exprs} {expr 0xff>>0x3} 31
test compExpr-old-10.7 {CompileShiftExpr: simple shift exprs} {expr -0xf2<<0x3} -1936
test compExpr-old-10.8 {CompileShiftExpr: error compiling shift arm} {
d342 2
a343 2
} {syntax error in expression "2**3>>6": unexpected operator *}
test compExpr-old-10.9 {CompileShiftExpr: error compiling shift arm} {
d346 2
a347 2
} {syntax error in expression "2<<x": variable references require preceding $}
test compExpr-old-10.10 {CompileShiftExpr: runtime error} {
d350 1
a350 1
test compExpr-old-10.11 {CompileShiftExpr: runtime error} {
d354 5
a358 5
test compExpr-old-11.1 {CompileAddExpr: just multiply expr} {expr 4*-2} -8
test compExpr-old-11.2 {CompileAddExpr: just multiply expr} {expr 0xff%2} 1
test compExpr-old-11.3 {CompileAddExpr: just multiply expr} {expr -1/2} -1
test compExpr-old-11.4 {CompileAddExpr: just multiply expr} {expr 7891%0123} 6
test compExpr-old-11.5 {CompileAddExpr: error in multiply expr} {
d361 4
a364 4
} {syntax error in expression "x*3": variable references require preceding $}
test compExpr-old-11.6 {CompileAddExpr: simple add exprs} {expr 0xff++0x3} 258
test compExpr-old-11.7 {CompileAddExpr: simple add exprs} {expr -0xf2--0x3} -239
test compExpr-old-11.8 {CompileAddExpr: error compiling add arm} {
d367 2
a368 2
} {syntax error in expression "2**3+6": unexpected operator *}
test compExpr-old-11.9 {CompileAddExpr: error compiling add arm} {
d371 2
a372 2
} {syntax error in expression "2-x": variable references require preceding $}
test compExpr-old-11.10 {CompileAddExpr: runtime error} {
d375 1
a375 1
test compExpr-old-11.11 {CompileAddExpr: runtime error} {
d378 1
a378 1
test compExpr-old-11.12 {CompileAddExpr: runtime error} {
d381 1
a381 1
test compExpr-old-11.13 {CompileAddExpr: runtime error} {
d385 5
a389 5
test compExpr-old-12.1 {CompileMultiplyExpr: just unary expr} {expr ~4} -5
test compExpr-old-12.2 {CompileMultiplyExpr: just unary expr} {expr --5} 5
test compExpr-old-12.3 {CompileMultiplyExpr: just unary expr} {expr !27} 0
test compExpr-old-12.4 {CompileMultiplyExpr: just unary expr} {expr ~0xff00ff} -16711936
test compExpr-old-12.5 {CompileMultiplyExpr: error in unary expr} {
d392 4
a395 4
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-12.6 {CompileMultiplyExpr: simple multiply exprs} {expr 0xff*0x3} 765
test compExpr-old-12.7 {CompileMultiplyExpr: simple multiply exprs} {expr -0xf2%-0x3} -2
test compExpr-old-12.8 {CompileMultiplyExpr: error compiling multiply arm} {
d398 2
a399 2
} {syntax error in expression "2*3%%6": unexpected operator %}
test compExpr-old-12.9 {CompileMultiplyExpr: error compiling multiply arm} {
d402 2
a403 2
} {syntax error in expression "2*x": variable references require preceding $}
test compExpr-old-12.10 {CompileMultiplyExpr: runtime error} {
d406 1
a406 1
test compExpr-old-12.11 {CompileMultiplyExpr: runtime error} {
d410 8
a417 8
test compExpr-old-13.1 {CompileUnaryExpr: unary exprs} {expr -0xff} -255
test compExpr-old-13.2 {CompileUnaryExpr: unary exprs} {expr +000123} 83
test compExpr-old-13.3 {CompileUnaryExpr: unary exprs} {expr +--++36} 36
test compExpr-old-13.4 {CompileUnaryExpr: unary exprs} {expr !2} 0
test compExpr-old-13.5 {CompileUnaryExpr: unary exprs} {expr +--+-62.0} -62.0
test compExpr-old-13.6 {CompileUnaryExpr: unary exprs} {expr !0.0} 1
test compExpr-old-13.7 {CompileUnaryExpr: unary exprs} {expr !0xef} 0
test compExpr-old-13.8 {CompileUnaryExpr: error compiling unary expr} {
d420 2
a421 2
} {syntax error in expression "~x": variable references require preceding $}
test compExpr-old-13.9 {CompileUnaryExpr: error compiling unary expr} {
d424 2
a425 2
} {syntax error in expression "!1.x": extra tokens at end of expression}
test compExpr-old-13.10 {CompileUnaryExpr: runtime error} {
d428 1
a428 1
test compExpr-old-13.11 {CompileUnaryExpr: runtime error} {
d431 2
a432 2
test compExpr-old-13.12 {CompileUnaryExpr: just primary expr} {expr 0x123} 291
test compExpr-old-13.13 {CompileUnaryExpr: just primary expr} {
d436 1
a436 1
test compExpr-old-13.14 {CompileUnaryExpr: just primary expr} {
d439 2
a440 2
test compExpr-old-13.15 {CompileUnaryExpr: just primary expr} {expr "123"} 123
test compExpr-old-13.16 {CompileUnaryExpr: error in primary expr} {
d444 6
a449 6
test compExpr-old-14.1 {CompilePrimaryExpr: literal primary} {expr 1} 1
test compExpr-old-14.2 {CompilePrimaryExpr: literal primary} {expr 123} 123
test compExpr-old-14.3 {CompilePrimaryExpr: literal primary} {expr 0xff} 255
test compExpr-old-14.4 {CompilePrimaryExpr: literal primary} {expr 00010} 8
test compExpr-old-14.5 {CompilePrimaryExpr: literal primary} {expr 62.0} 62.0
test compExpr-old-14.6 {CompilePrimaryExpr: literal primary} {
d452 2
a453 2
test compExpr-old-14.7 {CompilePrimaryExpr: literal primary} {expr {{abcde}<{abcdef}}} 1
test compExpr-old-14.8 {CompilePrimaryExpr: literal primary} {expr {{abc\
d455 3
a457 3
test compExpr-old-14.9 {CompilePrimaryExpr: literal primary} {expr {{abc\tde} > {abc\tdef}}} 0
test compExpr-old-14.10 {CompilePrimaryExpr: literal primary} {expr {{123}}} 123
test compExpr-old-14.11 {CompilePrimaryExpr: var reference primary} {
d461 1
a461 1
test compExpr-old-14.12 {CompilePrimaryExpr: var reference primary} {
d465 1
a465 1
test compExpr-old-14.13 {CompilePrimaryExpr: var reference primary} {
d475 1
a475 1
test compExpr-old-14.14 {CompilePrimaryExpr: var reference primary} {
d479 1
a479 1
test compExpr-old-14.15 {CompilePrimaryExpr: var reference primary} {
d484 1
a484 1
test compExpr-old-14.16 {CompilePrimaryExpr: error compiling var reference primary} {
d490 1
a490 1
test compExpr-old-14.17 {CompilePrimaryExpr: string primary that looks like var ref} {
d493 1
a493 1
test compExpr-old-14.18 {CompilePrimaryExpr: quoted string primary} {
d496 1
a496 1
test compExpr-old-14.19 {CompilePrimaryExpr: quoted string primary} {
d501 1
a501 1
test compExpr-old-14.20 {CompilePrimaryExpr: quoted string primary} {
d506 1
a506 1
test compExpr-old-14.21 {CompilePrimaryExpr: error in quoted string primary} {
d510 1
a510 1
test compExpr-old-14.22 {CompilePrimaryExpr: subcommand primary} {
d513 1
a513 1
test compExpr-old-14.23 {CompilePrimaryExpr: error in subcommand primary} {
d521 1
a521 1
test compExpr-old-14.24 {CompilePrimaryExpr: error in subcommand primary} {
d527 1
a527 1
test compExpr-old-14.25 {CompilePrimaryExpr: math function primary} {
d530 1
a530 1
test compExpr-old-14.26 {CompilePrimaryExpr: math function primary} {
d533 1
a533 1
test compExpr-old-14.27 {CompilePrimaryExpr: error in math function primary} {
d536 1
a536 1
} {syntax error in expression "sinh::(2.0)": expected parenthesis enclosing function arguments
d539 1
a539 1
test compExpr-old-14.28 {CompilePrimaryExpr: subexpression primary} {
d542 1
a542 1
test compExpr-old-14.29 {CompilePrimaryExpr: error in subexpression primary} {
d550 1
a550 1
test compExpr-old-14.30 {CompilePrimaryExpr: missing paren in subexpression primary} {
d553 1
a553 1
} {syntax error in expression "2+(3*(4+5)": looking for close parenthesis
d556 1
a556 1
test compExpr-old-14.31 {CompilePrimaryExpr: just var ref in subexpression primary} {
d560 1
a560 1
test compExpr-old-14.32 {CompilePrimaryExpr: unexpected token} {
d563 1
a563 1
} {syntax error in expression "@@": character not legal in expressions
d567 1
a567 1
test compExpr-old-15.1 {CompileMathFuncCall: missing parenthesis} {
d570 1
a570 1
} {syntax error in expression "sinh2.0)": variable references require preceding $
d573 1
a573 1
test compExpr-old-15.2 {CompileMathFuncCall: unknown math function} {
d579 1
a579 1
test compExpr-old-15.3 {CompileMathFuncCall: too many arguments} {
d585 1
a585 1
test compExpr-old-15.4 {CompileMathFuncCall: ')' found before last required arg} {
d591 1
a591 1
test compExpr-old-15.5 {CompileMathFuncCall: too few arguments} {
d597 1
a597 1
test compExpr-old-15.6 {CompileMathFuncCall: missing ')'} {
d600 1
a600 1
} {syntax error in expression "sin(1": missing close parenthesis at end of function call
d604 1
a604 1
    test compExpr-old-15.7 {CompileMathFuncCall: call registered math function} {
d607 1
a607 1
    test compExpr-old-15.8 {CompileMathFuncCall: call registered math function} {
d611 1
a611 1
    test compExpr-old-15.9 {CompileMathFuncCall: call registered math function} {
d614 1
a614 1
    test compExpr-old-15.10 {CompileMathFuncCall: call registered math function} {
d617 1
a617 1
    test compExpr-old-15.11 {CompileMathFuncCall: call registered math function} {
d622 1
a622 1
test compExpr-old-16.1 {GetToken: checks whether integer token starting with "0x" (e.g., "0x$") is invalid} {
d631 1
a631 1
test compExpr-old-16.2 {GetToken: check for string literal in braces} {
d637 1
a637 1
test compExpr-old-17.1 {expr and computed command names} {
d647 1
a647 1
test compExpr-old-18.1 {expr and conversion of operands to numbers} {
d656 1
a656 1
test compExpr-old-19.1 {expr and interpreter result object resetting} {
d679 13
@

