head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.58
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.56
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.54
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.52
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.50
	gdb_7_0-branch:1.5.0.48
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.46
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.44
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.42
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.40
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.38
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.36
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.34
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.30
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.28
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.3
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TCL_8_4_0:1.1.1.3
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.40.17;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.48.03;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.08;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.08;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.11;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.50;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.46;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.20;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.40.59;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.56.42;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@# 
# winPipe.test --
#
# This file contains a collection of tests for tclWinPipe.c
#
# Sourcing this file into Tcl runs the tests and generates output for 
# errors.  No output means no errors were found.
#
# Copyright (c) 1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: winPipe.test,v 1.21 2002/07/18 16:39:50 vincentdarley Exp $

package require tcltest
namespace import -force ::tcltest::*

testConstraint exec [llength [info commands exec]]

set bindir [file join [pwd] [file dirname [info nameofexecutable]]]
set cat32 [file join $bindir cat32.exe]

set ::tcltest::testConstraints(cat32) [file exists $cat32]

if {[catch {puts console1 ""}]} {
    set ::tcltest::testConstraints(AllocConsole) 1
} else {
    set ::tcltest::testConstraints(.console) 1
}

set big bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n
append big $big
append big $big	
append big $big
append big $big
append big $big
append big $big

set path(little) [makeFile {} little]
set f [open $path(little) w] 
puts -nonewline $f "little"
close $f

set path(big) [makeFile {} big]
set f [open $path(big) w]
puts -nonewline $f $big
close $f

proc contents {file} {
    set f [open $file r]
    set r [read $f]
    close $f
    set r
}

set path(more) [makeFile {
    while {[eof stdin] == 0} {
	puts -nonewline [read stdin]
    }
} more]

set path(stdout) [makeFile {} stdout]
set path(stderr) [makeFile {} stderr]

test winpipe-1.1 {32 bit comprehensive tests: from little file} {pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} {little stderr32}
test winpipe-1.2 {32 bit comprehensive tests: from big file} {pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} "{$big} stderr32"
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < little | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} {little stderr32}
test winpipe-1.4 {32 bit comprehensive tests: a lot from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < big | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} "{$big} stderr32"
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {pcOnly 95 exec cat32} {
    exec command /c type big |& $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} "{$big} stderr32"
test winpipe-1.6 {32 bit comprehensive tests: from console} \
	{pcOnly cat32 AllocConsole} {
    # would block waiting for human input
} {}
test winpipe-1.7 {32 bit comprehensive tests: from NUL} {pcOnly exec cat32} {
    exec $cat32 < nul > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} {{} stderr32}
test winpipe-1.8 {32 bit comprehensive tests: from socket} {pcOnly cat32} {
    # doesn't work
} {}
test winpipe-1.9 {32 bit comprehensive tests: from nowhere} \
	{pcOnly exec cat32 .console} {
    exec $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} {{} stderr32}
test winpipe-1.10 {32 bit comprehensive tests: from file handle} \
	{pcOnly exec cat32} {
    set f [open $path(little) r]
    exec $cat32 <@@$f > $path(stdout) 2> $path(stderr)
    close $f
    list [contents $path(stdout)] [contents $path(stderr)]
} {little stderr32}
test winpipe-1.11 {32 bit comprehensive tests: read from application} \
	{pcOnly exec cat32} {
    set f [open "|[list $cat32] < $path(little)" r]
    gets $f line
    catch {close $f} msg
    list $line $msg
} {little stderr32}
test winpipe-1.12 {32 bit comprehensive tests: a little to file} \
	{pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} {little stderr32}
test winpipe-1.13 {32 bit comprehensive tests: a lot to file} \
	{pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} "{$big} stderr32"
test winpipe-1.14 {32 bit comprehensive tests: a little to pipe} \
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(little) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} {little stderr32}
test winpipe-1.15 {32 bit comprehensive tests: a lot to pipe} \
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(big) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
} "{$big} stderr32"
test winpipe-1.16 {32 bit comprehensive tests: to console} {pcOnly exec cat32} {
    catch {exec $cat32 << "You should see this\n" >@@stdout} msg
    set msg
} stderr32
test winpipe-1.17 {32 bit comprehensive tests: to NUL} {pcOnly exec cat32} {
    # some apps hang when sending a large amount to NUL.  $cat32 isn't one.
    catch {exec $cat32 < $path(big) > nul} msg
    set msg
} stderr32
test winpipe-1.18 {32 bit comprehensive tests: to nowhere} \
	{pcOnly exec cat32 .console} {
    exec $cat32 < $path(big) >&@@stdout 
} {}
test winpipe-1.19 {32 bit comprehensive tests: to file handle} {pcOnly exec cat32} {
    set f1 [open $path(stdout) w]
    set f2 [open $path(stderr) w]
    exec $cat32 < $path(little) >@@$f1 2>@@$f2
    close $f1
    close $f2
    list [contents $path(stdout)] [contents $path(stderr)]
} {little stderr32}
test winpipe-1.20 {32 bit comprehensive tests: write to application} \
	{pcOnly exec cat32} {
    set f [open |[list $cat32 >$path(stdout)] w]
    puts -nonewline $f "foo"
    catch {close $f} msg
    list [contents $path(stdout)] $msg
} {foo stderr32}
test winpipe-1.21 {32 bit comprehensive tests: read/write application} \
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
    puts $f $big
    puts $f \032
    flush $f
    set r [read $f 64]
    catch {close $f}
    set r
} "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
test winpipe-1.22 {Checking command.com for Win95/98 hanging} {pcOnly 95 exec} {
    exec command.com /c dir /b
    set result 1
} 1
file delete more

test winpipe-4.1 {Tcl_WaitPid} {pcOnly nt exec cat32} {
    proc readResults {f} {
	global x result
	if { [eof $f] } {
	    close $f
	    set x 1
	} else {
	    set line [read $f ]
	    set result "$result$line"
	}
    }

    set f [open "|[list $cat32] < big 2> $path(stderr)" r]
    fconfigure $f  -buffering none -blocking 0
    fileevent $f readable "readResults $f"
    set x 0
    set result ""
    vwait x
    list $result $x [contents $path(stderr)]
} "{$big} 1 stderr32"

set path(nothing) [makeFile {} nothing]
close [open $path(nothing) w]

catch {set env_tmp $env(TMP)}
catch {set env_temp $env(TEMP)}

set env(TMP) c:/
set env(TEMP) c:/

test winpipe-5.1 {TclpCreateTempFile: cleanup temp files} {pcOnly exec} {
    set x {}
    set existing [glob -nocomplain c:/tcl*.tmp]
    exec [interpreter] < nothing 
    foreach p [glob -nocomplain c:/tcl*.tmp] {
	if {[lsearch $existing $p] == -1} {
	    lappend x $p
	}
    }
    set x
} {}
test winpipe-5.2 {TclpCreateTempFile: TMP and TEMP not defined} {pcOnly exec} {
    set tmp $env(TMP)
    set temp $env(TEMP)
    unset env(TMP)
    unset env(TEMP)
    exec [interpreter] < nothing
    set env(TMP) $tmp
    set env(TEMP) $temp
    set x {}
} {}
test winpipe-5.3 {TclpCreateTempFile: TMP specifies non-existent directory} \
	{pcOnly exec } {
    set tmp $env(TMP)
    set env(TMP) snarky
    exec [interpreter] < nothing
    set env(TMP) $tmp
    set x {}
} {}
test winpipe-5.4 {TclpCreateTempFile: TEMP specifies non-existent directory} \
	{pcOnly exec} {
    set tmp $env(TMP)
    set temp $env(TEMP)
    unset env(TMP)
    set env(TEMP) snarky
    exec [interpreter] < nothing
    set env(TMP) $tmp
    set env(TEMP) $temp
    set x {}
} {}

test winpipe-6.1 {PipeSetupProc & PipeCheckProc: read threads} \
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
    fconfigure $f -blocking 0
    fileevent $f writable { set x writable }
    set x {}
    vwait x
    fileevent $f writable {}
    fileevent $f readable { lappend x readable }
    after 100 { lappend x timeout }
    vwait x
    puts $f foobar
    flush $f
    vwait x
    lappend x [read $f]
    after 100 { lappend x timeout }
    vwait x
    lappend x [catch {close $f} msg] $msg
} {writable timeout readable {foobar
} timeout 1 stderr32}
test winpipe-6.2 {PipeSetupProc & PipeCheckProc: write threads} \
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
    fconfigure $f -blocking 0
    fileevent $f writable { set x writable }
    set x {}
    vwait x
    puts -nonewline $f $big$big$big$big
    flush $f
    after 100 { lappend x timeout }
    vwait x
    lappend x [catch {close $f} msg] $msg
} {writable timeout 0 {}}

set path(echoArgs.tcl) [makeFile {
    puts "[list $argv0 $argv]"
} echoArgs.tcl]

test winpipe-7.1 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo "" bar
} [list $path(echoArgs.tcl) {foo {} bar}]
test winpipe-7.2 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo \" bar
} [list $path(echoArgs.tcl) {foo {"} bar}]

# restore old values for env(TMP) and env(TEMP)

if {[catch {set env(TMP) $env_tmp}]} {
    unset env(TMP)
}
if {[catch {set env(TEMP) $env_temp}]} {
    unset env(TEMP)
}

# cleanup
file delete big little stdout stderr nothing echoArgs.tcl
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: winPipe.test,v 1.6.8.2 2000/09/15 16:58:03 spolk Exp $
d17 4
a20 4
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}
a22 1
set cat16 [file join  $bindir cat16.exe]
a25 1
set ::tcltest::testConstraints(cat16) [file exists $cat16]
d41 2
a42 1
set f [open "little" w] 
d46 2
a47 1
set f [open "big" w]
d58 1
a58 2
set f [open more w]
puts $f {
d62 4
a65 2
}
close $f
d67 3
a69 3
test winpipe-1.1 {32 bit comprehensive tests: from little file} {pcOnly stdio cat32} {
    exec $cat32 < little > stdout 2> stderr
    list [contents stdout] [contents stderr]
d71 3
a73 3
test winpipe-1.2 {32 bit comprehensive tests: from big file} {pcOnly stdio cat32} {
    exec $cat32 < big > stdout 2> stderr
    list [contents stdout] [contents stderr]
d75 3
a77 3
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {nt stdio cat32} {
    exec $::tcltest::tcltest more < little | $cat32 > stdout 2> stderr
    list [contents stdout] [contents stderr]
d79 3
a81 3
test winpipe-1.4 {32 bit comprehensive tests: a lot from pipe} {nt stdio cat32} {
    exec $::tcltest::tcltest more < big | $cat32 > stdout 2> stderr
    list [contents stdout] [contents stderr]
d83 3
a85 3
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {95 stdio cat32} {
    exec command /c type big |& $cat32 > stdout 2> stderr
    list [contents stdout] [contents stderr]
d88 1
a88 1
	{pcOnly stdio cat32 AllocConsole} {
d91 3
a93 3
test winpipe-1.7 {32 bit comprehensive tests: from NUL} {pcOnly stdio cat32} {
    exec $cat32 < nul > stdout 2> stderr
    list [contents stdout] [contents stderr]
d95 1
a95 1
test winpipe-1.8 {32 bit comprehensive tests: from socket} {pcOnly stdio cat32} {
d99 3
a101 3
	{pcOnly stdio cat32 .console} {
    exec $cat32 > stdout 2> stderr
    list [contents stdout] [contents stderr]
d104 3
a106 3
	{pcOnly stdio cat32} {
    set f [open "little" r]
    exec $cat32 <@@$f > stdout 2> stderr
d108 1
a108 1
    list [contents stdout] [contents stderr]
d111 2
a112 2
	{pcOnly stdio cat32} {
    set f [open "|$cat32 < little" r]
d118 3
a120 3
	{pcOnly stdio cat32} {
    exec $cat32 < little > stdout 2> stderr
    list [contents stdout] [contents stderr]
d123 3
a125 3
	{pcOnly stdio cat32} {
    exec $cat32 < big > stdout 2> stderr
    list [contents stdout] [contents stderr]
d128 3
a130 3
	{pcOnly stdio cat32} {
    exec $cat32 < little | $::tcltest::tcltest more > stdout 2> stderr
    list [contents stdout] [contents stderr]
d133 3
a135 3
	{pcOnly stdio cat32} {
    exec $cat32 < big | $::tcltest::tcltest more > stdout 2> stderr
    list [contents stdout] [contents stderr]
d137 1
a137 1
test winpipe-1.16 {32 bit comprehensive tests: to console} {pcOnly stdio cat32} {
d141 1
a141 1
test winpipe-1.17 {32 bit comprehensive tests: to NUL} {pcOnly stdio cat32} {
d143 1
a143 1
    catch {exec $cat32 < big > nul} msg
d147 2
a148 2
	{pcOnly stdio cat32 .console} {
    exec $cat32 < big >&@@stdout 
d150 4
a153 4
test winpipe-1.19 {32 bit comprehensive tests: to file handle} {pcOnly stdio cat32} {
    set f1 [open "stdout" w]
    set f2 [open "stderr" w]
    exec $cat32 < little >@@$f1 2>@@$f2
d156 1
a156 1
    list [contents stdout] [contents stderr]
d159 2
a160 2
	{pcOnly stdio cat32} {
    set f [open "|$cat32 > stdout" w]
d163 1
a163 1
    list [contents stdout] $msg
d166 2
a167 2
	{pcOnly stdio cat32} {
    set f [open "|$cat32" r+]
d175 1
a175 2
test winpipe-1.22 {Checking command.com for Win95/98 hanging} \
	{pcOnly stdio} {
a178 99

test winpipe-2.1 {16 bit comprehensive tests: from little file} {pcOnly stdio cat16} {
    exec $cat16 < little > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "little stderr16"
test winpipe-2.2 {16 bit comprehensive tests: from big file} {pcOnly stdio cat16} {
    exec $cat16 < big > stdout 2> stderr
    list [contents stdout] [contents stderr] 
} "{$big} stderr16"
test winpipe-2.3 {16 bit comprehensive tests: a little from pipe} {pcOnly stdio cat16} {
    exec $::tcltest::tcltest more < little | $cat16 > stdout 2> stderr
    list [contents stdout] [contents stderr]
} {little stderr16}
test winpipe-2.4 {16 bit comprehensive tests: a lot from pipe} {nt stdio cat16} {
    exec $cat16 < big | $cat16 > stdout 2> stderr
    list [contents stdout] [contents stderr] 
} "{$big} stderr16stderr16"
test winpipe-2.5 {16 bit comprehensive tests: a lot from pipe} {95 stdio cat16} {
    exec $::tcltest::tcltest more < big | $cat16 > stdout 2> stderr
    list [contents stdout] [contents stderr] 
} "{$big} stderr16"
test winpipe-2.6 {16 bit comprehensive tests: from console} \
	{pcOnly stdio cat16 AllocConsole} {
    # would block waiting for human input
} {}		     
test winpipe-2.7 {16 bit comprehensive tests: from NUL} {nt stdio cat16} {
    exec $cat16 < nul > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{} stderr16"
test winpipe-2.8 {16 bit comprehensive tests: from socket} {pcOnly stdio cat16} {
    # doesn't work
} {}
test winpipe-2.9 {16 bit comprehensive tests: from nowhere} {pcOnly stdio cat16 .console} {
    exec $cat16 > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{} stderr16"
test winpipe-2.10 {16 bit comprehensive tests: from file handle} {pcOnly stdio cat16} {
    set f [open "little" r]
    exec $cat16 <@@$f > stdout 2> stderr
    close $f
    list [contents stdout] [contents stderr]
} "little stderr16"
test winpipe-2.11 {16 bit comprehensive tests: read from application} {pcOnly stdio cat16} {
    set f [open "|$cat16 < little" r]
    gets $f line
    catch {close $f} msg
    list $line $msg
} "little stderr16"
test winpipe-2.12 {16 bit comprehensive tests: a little to file} {pcOnly stdio cat16} {
    exec $cat16 < little > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "little stderr16"
test winpipe-2.13 {16 bit comprehensive tests: a lot to file} {pcOnly stdio cat16} {
    exec $cat16 < big > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{$big} stderr16"
test winpipe-2.14 {16 bit comprehensive tests: a little to pipe} {pcOnly stdio cat16} {
    exec $cat16 < little | $::tcltest::tcltest more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} {little stderr16}
test winpipe-2.15 {16 bit comprehensive tests: a lot to pipe} {pcOnly stdio cat16} {
    exec $cat16 < big | $::tcltest::tcltest more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{$big} stderr16"
test winpipe-2.16 {16 bit comprehensive tests: to console} {pcOnly stdio cat16} {
    catch {exec $cat16 << "You should see this\n" >@@stdout} msg
    set msg
} [lindex stderr16 0]
test winpipe-2.17 {16 bit comprehensive tests: to NUL} {nt stdio cat16} {
    # some apps hang when sending a large amount to NUL.  cat16 isn't one.
    catch {exec $cat16 < big > nul} msg
    set msg
} stderr16
test winpipe-2.18 {16 bit comprehensive tests: to nowhere} {pcOnly stdio cat16 .console} {
    exec $cat16 < big >&@@stdout 
} {}
test winpipe-2.19 {16 bit comprehensive tests: to file handle} {pcOnly stdio cat16} {
    set f1 [open "stdout" w]
    set f2 [open "stderr" w]
    exec $cat16 < little >@@$f1 2>@@$f2
    close $f1
    close $f2
    list [contents stdout] [contents stderr]
} "little stderr16"
test winpipe-2.20 {16 bit comprehensive tests: write to application} {pcOnly stdio cat16} {
    set f [open "|$cat16 > stdout" w]
    puts -nonewline $f "foo"
    catch {close $f} msg
    list [contents stdout] $msg
} "foo stderr16"
test winpipe-2.21 {16 bit comprehensive tests: read/write application} {nt stdio cat16} {
    set f [open "|$cat16" r+]
    puts $f $big
    puts $f \032
    flush $f
    set r [read $f 64]
    catch {close $f}
    set r
} "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
d181 1
a181 1
test winpipe-4.1 {Tcl_WaitPid} {nt stdio} {
d193 1
a193 1
    set f [open "|$cat32 < big 2> stderr" r]
d199 1
a199 1
    list $result $x [contents stderr]
d202 2
a203 1
close [open nothing w]
d211 1
a211 1
test winpipe-5.1 {TclpCreateTempFile: cleanup temp files} {pcOnly stdio} {
d214 1
a214 1
    exec $::tcltest::tcltest < nothing 
d222 1
a222 1
test winpipe-5.2 {TclpCreateTempFile: TMP and TEMP not defined} {pcOnly stdio} {
d227 1
a227 1
    exec $::tcltest::tcltest < nothing
d233 1
a233 1
	{pcOnly stdio} {
d236 1
a236 1
    exec $::tcltest::tcltest < nothing
d241 1
a241 1
	{pcOnly stdio} {
d246 1
a246 1
    exec $::tcltest::tcltest < nothing
d253 2
a254 2
	{pcOnly stdio cat32} {
    set f [open "|$cat32" r+]
d273 2
a274 2
	{pcOnly stdio cat32} {
    set f [open "|$cat32" r+]
d286 1
a286 1
makeFile {
d288 1
a288 1
} echoArgs.tcl
d290 6
a295 6
test winpipe-7.1 {BuildCommandLine: null arguments} {pcOnly stdio} {
    exec $::tcltest::tcltest echoArgs.tcl foo "" bar
} {echoArgs.tcl {foo {} bar}}
test winpipe-7.2 {BuildCommandLine: null arguments} {pcOnly stdio} {
    exec $::tcltest::tcltest echoArgs.tcl foo \" bar
} {echoArgs.tcl {foo {"} bar}}
a309 12












@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: winPipe.test,v 1.21 2002/07/18 16:39:50 vincentdarley Exp $
d17 4
a20 4
package require tcltest
namespace import -force ::tcltest::*

testConstraint exec [llength [info commands exec]]
d23 1
d27 1
d43 1
a43 2
set path(little) [makeFile {} little]
set f [open $path(little) w] 
d47 1
a47 2
set path(big) [makeFile {} big]
set f [open $path(big) w]
d58 2
a59 1
set path(more) [makeFile {
d63 2
a64 4
} more]

set path(stdout) [makeFile {} stdout]
set path(stderr) [makeFile {} stderr]
d66 3
a68 3
test winpipe-1.1 {32 bit comprehensive tests: from little file} {pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d70 3
a72 3
test winpipe-1.2 {32 bit comprehensive tests: from big file} {pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d74 3
a76 3
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < little | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d78 3
a80 3
test winpipe-1.4 {32 bit comprehensive tests: a lot from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < big | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d82 3
a84 3
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {pcOnly 95 exec cat32} {
    exec command /c type big |& $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d87 1
a87 1
	{pcOnly cat32 AllocConsole} {
d90 3
a92 3
test winpipe-1.7 {32 bit comprehensive tests: from NUL} {pcOnly exec cat32} {
    exec $cat32 < nul > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d94 1
a94 1
test winpipe-1.8 {32 bit comprehensive tests: from socket} {pcOnly cat32} {
d98 3
a100 3
	{pcOnly exec cat32 .console} {
    exec $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d103 3
a105 3
	{pcOnly exec cat32} {
    set f [open $path(little) r]
    exec $cat32 <@@$f > $path(stdout) 2> $path(stderr)
d107 1
a107 1
    list [contents $path(stdout)] [contents $path(stderr)]
d110 2
a111 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32] < $path(little)" r]
d117 3
a119 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d122 3
a124 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d127 3
a129 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(little) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d132 3
a134 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(big) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d136 1
a136 1
test winpipe-1.16 {32 bit comprehensive tests: to console} {pcOnly exec cat32} {
d140 1
a140 1
test winpipe-1.17 {32 bit comprehensive tests: to NUL} {pcOnly exec cat32} {
d142 1
a142 1
    catch {exec $cat32 < $path(big) > nul} msg
d146 2
a147 2
	{pcOnly exec cat32 .console} {
    exec $cat32 < $path(big) >&@@stdout 
d149 4
a152 4
test winpipe-1.19 {32 bit comprehensive tests: to file handle} {pcOnly exec cat32} {
    set f1 [open $path(stdout) w]
    set f2 [open $path(stderr) w]
    exec $cat32 < $path(little) >@@$f1 2>@@$f2
d155 1
a155 1
    list [contents $path(stdout)] [contents $path(stderr)]
d158 2
a159 2
	{pcOnly exec cat32} {
    set f [open |[list $cat32 >$path(stdout)] w]
d162 1
a162 1
    list [contents $path(stdout)] $msg
d165 2
a166 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d174 2
a175 1
test winpipe-1.22 {Checking command.com for Win95/98 hanging} {pcOnly 95 exec} {
d179 99
d280 1
a280 1
test winpipe-4.1 {Tcl_WaitPid} {pcOnly nt exec cat32} {
d292 1
a292 1
    set f [open "|[list $cat32] < big 2> $path(stderr)" r]
d298 1
a298 1
    list $result $x [contents $path(stderr)]
d301 1
a301 2
set path(nothing) [makeFile {} nothing]
close [open $path(nothing) w]
d309 1
a309 1
test winpipe-5.1 {TclpCreateTempFile: cleanup temp files} {pcOnly exec} {
d312 1
a312 1
    exec [interpreter] < nothing 
d320 1
a320 1
test winpipe-5.2 {TclpCreateTempFile: TMP and TEMP not defined} {pcOnly exec} {
d325 1
a325 1
    exec [interpreter] < nothing
d331 1
a331 1
	{pcOnly exec } {
d334 1
a334 1
    exec [interpreter] < nothing
d339 1
a339 1
	{pcOnly exec} {
d344 1
a344 1
    exec [interpreter] < nothing
d351 2
a352 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d371 2
a372 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d384 1
a384 1
set path(echoArgs.tcl) [makeFile {
d386 1
a386 1
} echoArgs.tcl]
d388 6
a393 6
test winpipe-7.1 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo "" bar
} [list $path(echoArgs.tcl) {foo {} bar}]
test winpipe-7.2 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo \" bar
} [list $path(echoArgs.tcl) {foo {"} bar}]
d408 12
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: winPipe.test,v 1.21 2002/07/18 16:39:50 vincentdarley Exp $
d17 4
a20 4
package require tcltest
namespace import -force ::tcltest::*

testConstraint exec [llength [info commands exec]]
d23 1
d27 1
d43 1
a43 2
set path(little) [makeFile {} little]
set f [open $path(little) w] 
d47 1
a47 2
set path(big) [makeFile {} big]
set f [open $path(big) w]
d58 2
a59 1
set path(more) [makeFile {
d63 2
a64 4
} more]

set path(stdout) [makeFile {} stdout]
set path(stderr) [makeFile {} stderr]
d66 3
a68 3
test winpipe-1.1 {32 bit comprehensive tests: from little file} {pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d70 3
a72 3
test winpipe-1.2 {32 bit comprehensive tests: from big file} {pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d74 3
a76 3
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < little | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d78 3
a80 3
test winpipe-1.4 {32 bit comprehensive tests: a lot from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < big | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d82 3
a84 3
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {pcOnly 95 exec cat32} {
    exec command /c type big |& $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d87 1
a87 1
	{pcOnly cat32 AllocConsole} {
d90 3
a92 3
test winpipe-1.7 {32 bit comprehensive tests: from NUL} {pcOnly exec cat32} {
    exec $cat32 < nul > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d94 1
a94 1
test winpipe-1.8 {32 bit comprehensive tests: from socket} {pcOnly cat32} {
d98 3
a100 3
	{pcOnly exec cat32 .console} {
    exec $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d103 3
a105 3
	{pcOnly exec cat32} {
    set f [open $path(little) r]
    exec $cat32 <@@$f > $path(stdout) 2> $path(stderr)
d107 1
a107 1
    list [contents $path(stdout)] [contents $path(stderr)]
d110 2
a111 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32] < $path(little)" r]
d117 3
a119 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d122 3
a124 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d127 3
a129 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(little) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d132 3
a134 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(big) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d136 1
a136 1
test winpipe-1.16 {32 bit comprehensive tests: to console} {pcOnly exec cat32} {
d140 1
a140 1
test winpipe-1.17 {32 bit comprehensive tests: to NUL} {pcOnly exec cat32} {
d142 1
a142 1
    catch {exec $cat32 < $path(big) > nul} msg
d146 2
a147 2
	{pcOnly exec cat32 .console} {
    exec $cat32 < $path(big) >&@@stdout 
d149 4
a152 4
test winpipe-1.19 {32 bit comprehensive tests: to file handle} {pcOnly exec cat32} {
    set f1 [open $path(stdout) w]
    set f2 [open $path(stderr) w]
    exec $cat32 < $path(little) >@@$f1 2>@@$f2
d155 1
a155 1
    list [contents $path(stdout)] [contents $path(stderr)]
d158 2
a159 2
	{pcOnly exec cat32} {
    set f [open |[list $cat32 >$path(stdout)] w]
d162 1
a162 1
    list [contents $path(stdout)] $msg
d165 2
a166 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d174 2
a175 1
test winpipe-1.22 {Checking command.com for Win95/98 hanging} {pcOnly 95 exec} {
d179 99
d280 1
a280 1
test winpipe-4.1 {Tcl_WaitPid} {pcOnly nt exec cat32} {
d292 1
a292 1
    set f [open "|[list $cat32] < big 2> $path(stderr)" r]
d298 1
a298 1
    list $result $x [contents $path(stderr)]
d301 1
a301 2
set path(nothing) [makeFile {} nothing]
close [open $path(nothing) w]
d309 1
a309 1
test winpipe-5.1 {TclpCreateTempFile: cleanup temp files} {pcOnly exec} {
d312 1
a312 1
    exec [interpreter] < nothing 
d320 1
a320 1
test winpipe-5.2 {TclpCreateTempFile: TMP and TEMP not defined} {pcOnly exec} {
d325 1
a325 1
    exec [interpreter] < nothing
d331 1
a331 1
	{pcOnly exec } {
d334 1
a334 1
    exec [interpreter] < nothing
d339 1
a339 1
	{pcOnly exec} {
d344 1
a344 1
    exec [interpreter] < nothing
d351 2
a352 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d371 2
a372 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d384 1
a384 1
set path(echoArgs.tcl) [makeFile {
d386 1
a386 1
} echoArgs.tcl]
d388 6
a393 6
test winpipe-7.1 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo "" bar
} [list $path(echoArgs.tcl) {foo {} bar}]
test winpipe-7.2 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo \" bar
} [list $path(echoArgs.tcl) {foo {"} bar}]
d408 12
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d17 4
a20 4
package require tcltest
namespace import -force ::tcltest::*

testConstraint exec [llength [info commands exec]]
d23 1
d27 1
d43 1
a43 2
set path(little) [makeFile {} little]
set f [open $path(little) w] 
d47 1
a47 2
set path(big) [makeFile {} big]
set f [open $path(big) w]
d58 2
a59 1
set path(more) [makeFile {
d63 2
a64 4
} more]

set path(stdout) [makeFile {} stdout]
set path(stderr) [makeFile {} stderr]
d66 3
a68 3
test winpipe-1.1 {32 bit comprehensive tests: from little file} {pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d70 3
a72 3
test winpipe-1.2 {32 bit comprehensive tests: from big file} {pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d74 3
a76 3
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < little | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d78 3
a80 3
test winpipe-1.4 {32 bit comprehensive tests: a lot from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < big | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d82 3
a84 3
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {pcOnly 95 exec cat32} {
    exec command /c type big |& $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d87 1
a87 1
	{pcOnly cat32 AllocConsole} {
d90 3
a92 3
test winpipe-1.7 {32 bit comprehensive tests: from NUL} {pcOnly exec cat32} {
    exec $cat32 < nul > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d94 1
a94 1
test winpipe-1.8 {32 bit comprehensive tests: from socket} {pcOnly cat32} {
d98 3
a100 3
	{pcOnly exec cat32 .console} {
    exec $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d103 3
a105 3
	{pcOnly exec cat32} {
    set f [open $path(little) r]
    exec $cat32 <@@$f > $path(stdout) 2> $path(stderr)
d107 1
a107 1
    list [contents $path(stdout)] [contents $path(stderr)]
d110 2
a111 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32] < $path(little)" r]
d117 3
a119 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d122 3
a124 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d127 3
a129 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(little) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d132 3
a134 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(big) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d136 1
a136 1
test winpipe-1.16 {32 bit comprehensive tests: to console} {pcOnly exec cat32} {
d140 1
a140 1
test winpipe-1.17 {32 bit comprehensive tests: to NUL} {pcOnly exec cat32} {
d142 1
a142 1
    catch {exec $cat32 < $path(big) > nul} msg
d146 2
a147 2
	{pcOnly exec cat32 .console} {
    exec $cat32 < $path(big) >&@@stdout 
d149 4
a152 4
test winpipe-1.19 {32 bit comprehensive tests: to file handle} {pcOnly exec cat32} {
    set f1 [open $path(stdout) w]
    set f2 [open $path(stderr) w]
    exec $cat32 < $path(little) >@@$f1 2>@@$f2
d155 1
a155 1
    list [contents $path(stdout)] [contents $path(stderr)]
d158 2
a159 2
	{pcOnly exec cat32} {
    set f [open |[list $cat32 >$path(stdout)] w]
d162 1
a162 1
    list [contents $path(stdout)] $msg
d165 2
a166 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d174 2
a175 1
test winpipe-1.22 {Checking command.com for Win95/98 hanging} {pcOnly 95 exec} {
d179 99
d280 1
a280 1
test winpipe-4.1 {Tcl_WaitPid} {pcOnly nt exec cat32} {
d292 1
a292 1
    set f [open "|[list $cat32] < big 2> $path(stderr)" r]
d298 1
a298 1
    list $result $x [contents $path(stderr)]
d301 1
a301 2
set path(nothing) [makeFile {} nothing]
close [open $path(nothing) w]
d309 1
a309 1
test winpipe-5.1 {TclpCreateTempFile: cleanup temp files} {pcOnly exec} {
d312 1
a312 1
    exec [interpreter] < nothing 
d320 1
a320 1
test winpipe-5.2 {TclpCreateTempFile: TMP and TEMP not defined} {pcOnly exec} {
d325 1
a325 1
    exec [interpreter] < nothing
d331 1
a331 1
	{pcOnly exec } {
d334 1
a334 1
    exec [interpreter] < nothing
d339 1
a339 1
	{pcOnly exec} {
d344 1
a344 1
    exec [interpreter] < nothing
d351 2
a352 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d371 2
a372 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d384 1
a384 1
set path(echoArgs.tcl) [makeFile {
d386 1
a386 1
} echoArgs.tcl]
d388 6
a393 6
test winpipe-7.1 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo "" bar
} [list $path(echoArgs.tcl) {foo {} bar}]
test winpipe-7.2 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo \" bar
} [list $path(echoArgs.tcl) {foo {"} bar}]
d408 12
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1

d10 1
d15 1
a15 1
# RCS: @@(#) $Id: winPipe.test,v 1.9 1999/01/26 03:53:35 jingham Exp $
d17 3
a19 2
if {$tcl_platform(platform) != "windows"} {
    return
d26 2
a27 1
if {[string compare test [info procs test]] == 1} then {source defs}
d29 2
a30 2
if [catch {puts console1 ""}] {
    set testConfig(AllocConsole) 1
d32 1
a32 1
    set testConfig(.console) 1
d35 1
a35 1
set big aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
d58 9
a66 2
if {$testConfig(stdio) && [file exists $cat32]} {
test winpipe-1.1 {32 bit comprehensive tests: from little file} {
d69 2
a70 2
} "little stderr32"
test winpipe-1.2 {32 bit comprehensive tests: from big file} {
d74 2
a75 2
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {nt} {
    exec more < little | $cat32 > stdout 2> stderr
d77 3
a79 7
} "{little\n} stderr32"
test winpipe-1.4 {32 bit comprehensive tests: a little from pipe} {95} {
    exec more < little |& $cat32 > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{\nlittle} stderr32"
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {nt} {
    exec more < big | $cat32 > stdout 2> stderr
d82 1
a82 1
test winpipe-1.6 {32 bit comprehensive tests: a lot from pipe} {95} {
d86 2
a87 1
test winpipe-1.7 {32 bit comprehensive tests: from console} {AllocConsole} {
d90 1
a90 1
test winpipe-1.8 {32 bit comprehensive tests: from NUL} {
d93 2
a94 2
} "{} stderr32"
test winpipe-1.9 {32 bit comprehensive tests: from socket} {
d97 2
a98 1
test winpipe-1.10 {32 bit comprehensive tests: from nowhere} {.console} {
d101 3
a103 2
} "{} stderr32"
test winpipe-1.11 {32 bit comprehensive tests: from file handle} {
d108 3
a110 2
} "little stderr32"
test winpipe-1.12 {32 bit comprehensive tests: read from application} {
d115 3
a117 2
} "little stderr32"
test winpipe-1.13 {32 bit comprehensive tests: a little to file} {
d120 3
a122 2
} "little stderr32"
test winpipe-1.14 {32 bit comprehensive tests: a lot to file} {
d126 8
a133 2
test winpipe-1.15 {32 bit comprehensive tests: a little to pipe} {nt} {
    exec $cat32 < little | more > stdout 2> stderr
d135 2
a136 14
} "{little\n} stderr32"
test winpipe-1.16 {32 bit comprehensive tests: a little to pipe} {95} {
    exec $cat32 < little | more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{\nlittle} stderr32"
test winpipe-1.17 {32 bit comprehensive tests: a lot to pipe} {nt} {
    exec $cat32 < big | more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{$big\n} stderr32"
test winpipe-1.18 {32 bit comprehensive tests: a lot to pipe} {95} {
    exec $cat32 < big | more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{\n$big} stderr32"
test winpipe-1.19 {32 bit comprehensive tests: to console} {
d140 1
a140 1
test winpipe-1.20 {32 bit comprehensive tests: to NUL} {
d145 2
a146 1
test winpipe-1.21 {32 bit comprehensive tests: to nowhere} {.console} {
d149 1
a149 1
test winpipe-1.22 {32 bit comprehensive tests: to file handle} {
d156 3
a158 2
} "little stderr32"
test winpipe-1.23 {32 bit comprehensive tests: write to application} {
d163 3
a165 2
} "foo stderr32"
test winpipe-1.24 {32 bit comprehensive tests: read/write application} {
d173 6
a178 2
} "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
}
d180 1
a180 6
set stderr16 "stderr16"
if {$tcl_platform(os) == "Win32s"} {
    set stderr16 "{}"
}
if [file exists $cat16] {
test winpipe-2.1 {16 bit comprehensive tests: from little file} {
d183 2
a184 2
} "little $stderr16"
test winpipe-2.2 {16 bit comprehensive tests: from big file} {
d187 3
a189 7
} "{$big} $stderr16"
test winpipe-2.3 {16 bit comprehensive tests: a little from pipe} {nt} {
    exec more < little | $cat16 > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{little\n} stderr16"
test winpipe-2.4 {16 bit comprehensive tests: a little from pipe} {95} {
    exec more < little | $cat16 > stdout 2> stderr
d191 2
a192 2
} "{\nlittle} stderr16"
test winpipe-2.5 {16 bit comprehensive tests: a lot from pipe} {nt} {
d196 2
a197 2
test winpipe-2.6 {16 bit comprehensive tests: a lot from pipe} {95} {
    exec more < big | $cat16 > stdout 2> stderr
d199 3
a201 2
} "{\n$big} stderr16"
test winpipe-2.7 {16 bit comprehensive tests: from console} {AllocConsole} {
d204 1
a204 1
test winpipe-2.8 {16 bit comprehensive tests: from NUL} {nt} {
d208 1
a208 1
test winpipe-2.9 {16 bit comprehensive tests: from socket} {
d211 1
a211 1
test winpipe-2.10 {16 bit comprehensive tests: from nowhere} {.console} {
d215 1
a215 1
test winpipe-2.11 {16 bit comprehensive tests: from file handle} {
d220 2
a221 2
} "little $stderr16"
test winpipe-2.12 {16 bit comprehensive tests: read from application} {
d226 2
a227 2
} "little $stderr16"
test winpipe-2.13 {16 bit comprehensive tests: a little to file} {
d230 2
a231 2
} "little $stderr16"
test winpipe-2.14 {16 bit comprehensive tests: a lot to file} {
d234 7
a240 15
} "{$big} $stderr16"
test winpipe-2.15 {16 bit comprehensive tests: a little to pipe} {nt} {
    catch {exec $cat16 < little | more > stdout 2> stderr}
    list [contents stdout] [contents stderr]
} "{little\n} stderr16"
test winpipe-2.16 {16 bit comprehensive tests: a little to pipe} {95} {
    exec $cat16 < little | more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} "{\nlittle} stderr16"
test winpipe-2.17 {16 bit comprehensive tests: a lot to pipe} {nt} {
    catch {exec $cat16 < big | more > stdout 2> stderr}
    list [contents stdout] [contents stderr]
} "{$big\n} stderr16"
test winpipe-2.18 {16 bit comprehensive tests: a lot to pipe} {95} {
    exec $cat16 < big | more > stdout 2> stderr
d242 2
a243 2
} "{\n$big} stderr16"
test winpipe-2.19 {16 bit comprehensive tests: to console} {
d246 2
a247 2
} [lindex $stderr16 0]
test winpipe-2.20 {16 bit comprehensive tests: to NUL} {nt} {
d252 1
a252 1
test winpipe-2.21 {16 bit comprehensive tests: to nowhere} {.console} {
d255 1
a255 1
test winpipe-2.22 {16 bit comprehensive tests: to file handle} {
d262 2
a263 2
} "little $stderr16"
test winpipe-2.23 {16 bit comprehensive tests: write to application} {!win32s} {
d269 1
a269 1
test winpipe-2.24 {16 bit comprehensive tests: read/write application} {nt} {
d277 2
a278 2
} "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
}
d280 1
a280 1
test winpipe-4.1 {Tcl_WaitPid} {nt} {
d309 1
a309 1
test winpipe-3.1 {TclpCreateTempFile: cleanup temp files} {
d312 1
a312 1
    exec $tcltest < nothing 
d314 1
a314 1
	if {[lsearch $existing $p] != -1} {
d320 1
a320 1
test winpipe-3.2 {TclpCreateTempFile: TMP and TEMP not defined} {
d325 1
a325 1
    exec $tcltest < nothing
d330 2
a331 1
test winpipe-3.3 {TclpCreateTempFile: TMP specifies non-existent directory} {
d334 1
a334 1
    exec $tcltest < nothing
d338 2
a339 1
test winpipe-3.3 {TclpCreateTempFile: TEMP specifies non-existent directory} {
d344 1
a344 1
    exec $tcltest < nothing
d350 34
d388 2
a389 2
test winpipe-4.1 {BuildCommandLine: null arguments} {
    exec $tcltest echoArgs.tcl foo "" bar
d391 2
a392 2
test winpipe-4.1 {BuildCommandLine: null arguments} {
    exec $tcltest echoArgs.tcl foo \" bar
d395 1
a395 1
# restore old values fro env(TMP) and env(TEMP)
d398 1
a398 1
    unset $env(TMP)
d401 1
a401 1
    unset $env(TEMP)
d404 16
a419 1
file delete big little stdout stderr nothing dummy.tcl
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@d5 1
a5 1
#
a9 1
# Copyright (c) 1998-1999 by Scriptics Corporation.
d14 1
a14 1
# RCS: @@(#) $Id: winPipe.test,v 1.6.8.2 2000/09/15 16:58:03 spolk Exp $
d16 2
a17 3
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
d24 1
a24 2
set ::tcltest::testConstraints(cat32) [file exists $cat32]
set ::tcltest::testConstraints(cat16) [file exists $cat16]
d26 2
a27 2
if {[catch {puts console1 ""}]} {
    set ::tcltest::testConstraints(AllocConsole) 1
d29 1
a29 1
    set ::tcltest::testConstraints(.console) 1
d32 1
a32 1
set big bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n
d55 2
a56 9
set f [open more w]
puts $f {
    while {[eof stdin] == 0} {
	puts -nonewline [read stdin]
    }
}
close $f

test winpipe-1.1 {32 bit comprehensive tests: from little file} {pcOnly stdio cat32} {
d59 2
a60 2
} {little stderr32}
test winpipe-1.2 {32 bit comprehensive tests: from big file} {pcOnly stdio cat32} {
d64 2
a65 2
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {nt stdio cat32} {
    exec $::tcltest::tcltest more < little | $cat32 > stdout 2> stderr
d67 7
a73 3
} {little stderr32}
test winpipe-1.4 {32 bit comprehensive tests: a lot from pipe} {nt stdio cat32} {
    exec $::tcltest::tcltest more < big | $cat32 > stdout 2> stderr
d76 1
a76 1
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {95 stdio cat32} {
d80 1
a80 2
test winpipe-1.6 {32 bit comprehensive tests: from console} \
	{pcOnly stdio cat32 AllocConsole} {
d83 1
a83 1
test winpipe-1.7 {32 bit comprehensive tests: from NUL} {pcOnly stdio cat32} {
d86 2
a87 2
} {{} stderr32}
test winpipe-1.8 {32 bit comprehensive tests: from socket} {pcOnly stdio cat32} {
d90 1
a90 2
test winpipe-1.9 {32 bit comprehensive tests: from nowhere} \
	{pcOnly stdio cat32 .console} {
d93 2
a94 3
} {{} stderr32}
test winpipe-1.10 {32 bit comprehensive tests: from file handle} \
	{pcOnly stdio cat32} {
d99 2
a100 3
} {little stderr32}
test winpipe-1.11 {32 bit comprehensive tests: read from application} \
	{pcOnly stdio cat32} {
d105 2
a106 3
} {little stderr32}
test winpipe-1.12 {32 bit comprehensive tests: a little to file} \
	{pcOnly stdio cat32} {
d109 2
a110 3
} {little stderr32}
test winpipe-1.13 {32 bit comprehensive tests: a lot to file} \
	{pcOnly stdio cat32} {
d114 14
a127 8
test winpipe-1.14 {32 bit comprehensive tests: a little to pipe} \
	{pcOnly stdio cat32} {
    exec $cat32 < little | $::tcltest::tcltest more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} {little stderr32}
test winpipe-1.15 {32 bit comprehensive tests: a lot to pipe} \
	{pcOnly stdio cat32} {
    exec $cat32 < big | $::tcltest::tcltest more > stdout 2> stderr
d129 2
a130 2
} "{$big} stderr32"
test winpipe-1.16 {32 bit comprehensive tests: to console} {pcOnly stdio cat32} {
d134 1
a134 1
test winpipe-1.17 {32 bit comprehensive tests: to NUL} {pcOnly stdio cat32} {
d139 1
a139 2
test winpipe-1.18 {32 bit comprehensive tests: to nowhere} \
	{pcOnly stdio cat32 .console} {
d142 1
a142 1
test winpipe-1.19 {32 bit comprehensive tests: to file handle} {pcOnly stdio cat32} {
d149 2
a150 3
} {little stderr32}
test winpipe-1.20 {32 bit comprehensive tests: write to application} \
	{pcOnly stdio cat32} {
d155 2
a156 3
} {foo stderr32}
test winpipe-1.21 {32 bit comprehensive tests: read/write application} \
	{pcOnly stdio cat32} {
d164 2
a165 6
} "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
test winpipe-1.22 {Checking command.com for Win95/98 hanging} \
	{pcOnly stdio} {
    exec command.com /c dir /b
    set result 1
} 1
d167 6
a172 1
test winpipe-2.1 {16 bit comprehensive tests: from little file} {pcOnly stdio cat16} {
d175 2
a176 2
} "little stderr16"
test winpipe-2.2 {16 bit comprehensive tests: from big file} {pcOnly stdio cat16} {
d179 7
a185 3
} "{$big} stderr16"
test winpipe-2.3 {16 bit comprehensive tests: a little from pipe} {pcOnly stdio cat16} {
    exec $::tcltest::tcltest more < little | $cat16 > stdout 2> stderr
d187 2
a188 2
} {little stderr16}
test winpipe-2.4 {16 bit comprehensive tests: a lot from pipe} {nt stdio cat16} {
d192 2
a193 2
test winpipe-2.5 {16 bit comprehensive tests: a lot from pipe} {95 stdio cat16} {
    exec $::tcltest::tcltest more < big | $cat16 > stdout 2> stderr
d195 2
a196 3
} "{$big} stderr16"
test winpipe-2.6 {16 bit comprehensive tests: from console} \
	{pcOnly stdio cat16 AllocConsole} {
d199 1
a199 1
test winpipe-2.7 {16 bit comprehensive tests: from NUL} {nt stdio cat16} {
d203 1
a203 1
test winpipe-2.8 {16 bit comprehensive tests: from socket} {pcOnly stdio cat16} {
d206 1
a206 1
test winpipe-2.9 {16 bit comprehensive tests: from nowhere} {pcOnly stdio cat16 .console} {
d210 1
a210 1
test winpipe-2.10 {16 bit comprehensive tests: from file handle} {pcOnly stdio cat16} {
d215 2
a216 2
} "little stderr16"
test winpipe-2.11 {16 bit comprehensive tests: read from application} {pcOnly stdio cat16} {
d221 2
a222 2
} "little stderr16"
test winpipe-2.12 {16 bit comprehensive tests: a little to file} {pcOnly stdio cat16} {
d225 2
a226 2
} "little stderr16"
test winpipe-2.13 {16 bit comprehensive tests: a lot to file} {pcOnly stdio cat16} {
d229 15
a243 7
} "{$big} stderr16"
test winpipe-2.14 {16 bit comprehensive tests: a little to pipe} {pcOnly stdio cat16} {
    exec $cat16 < little | $::tcltest::tcltest more > stdout 2> stderr
    list [contents stdout] [contents stderr]
} {little stderr16}
test winpipe-2.15 {16 bit comprehensive tests: a lot to pipe} {pcOnly stdio cat16} {
    exec $cat16 < big | $::tcltest::tcltest more > stdout 2> stderr
d245 2
a246 2
} "{$big} stderr16"
test winpipe-2.16 {16 bit comprehensive tests: to console} {pcOnly stdio cat16} {
d249 2
a250 2
} [lindex stderr16 0]
test winpipe-2.17 {16 bit comprehensive tests: to NUL} {nt stdio cat16} {
d255 1
a255 1
test winpipe-2.18 {16 bit comprehensive tests: to nowhere} {pcOnly stdio cat16 .console} {
d258 1
a258 1
test winpipe-2.19 {16 bit comprehensive tests: to file handle} {pcOnly stdio cat16} {
d265 2
a266 2
} "little stderr16"
test winpipe-2.20 {16 bit comprehensive tests: write to application} {pcOnly stdio cat16} {
d272 1
a272 1
test winpipe-2.21 {16 bit comprehensive tests: read/write application} {nt stdio cat16} {
d280 2
a281 2
} "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
file delete more
d283 1
a283 1
test winpipe-4.1 {Tcl_WaitPid} {nt stdio} {
d312 1
a312 1
test winpipe-5.1 {TclpCreateTempFile: cleanup temp files} {pcOnly stdio} {
d315 1
a315 1
    exec $::tcltest::tcltest < nothing 
d317 1
a317 1
	if {[lsearch $existing $p] == -1} {
d323 1
a323 1
test winpipe-5.2 {TclpCreateTempFile: TMP and TEMP not defined} {pcOnly stdio} {
d328 1
a328 1
    exec $::tcltest::tcltest < nothing
d333 1
a333 2
test winpipe-5.3 {TclpCreateTempFile: TMP specifies non-existent directory} \
	{pcOnly stdio} {
d336 1
a336 1
    exec $::tcltest::tcltest < nothing
d340 1
a340 2
test winpipe-5.4 {TclpCreateTempFile: TEMP specifies non-existent directory} \
	{pcOnly stdio} {
d345 1
a345 1
    exec $::tcltest::tcltest < nothing
a350 34
test winpipe-6.1 {PipeSetupProc & PipeCheckProc: read threads} \
	{pcOnly stdio cat32} {
    set f [open "|$cat32" r+]
    fconfigure $f -blocking 0
    fileevent $f writable { set x writable }
    set x {}
    vwait x
    fileevent $f writable {}
    fileevent $f readable { lappend x readable }
    after 100 { lappend x timeout }
    vwait x
    puts $f foobar
    flush $f
    vwait x
    lappend x [read $f]
    after 100 { lappend x timeout }
    vwait x
    lappend x [catch {close $f} msg] $msg
} {writable timeout readable {foobar
} timeout 1 stderr32}
test winpipe-6.2 {PipeSetupProc & PipeCheckProc: write threads} \
	{pcOnly stdio cat32} {
    set f [open "|$cat32" r+]
    fconfigure $f -blocking 0
    fileevent $f writable { set x writable }
    set x {}
    vwait x
    puts -nonewline $f $big$big$big$big
    flush $f
    after 100 { lappend x timeout }
    vwait x
    lappend x [catch {close $f} msg] $msg
} {writable timeout 0 {}}

d355 2
a356 2
test winpipe-7.1 {BuildCommandLine: null arguments} {pcOnly stdio} {
    exec $::tcltest::tcltest echoArgs.tcl foo "" bar
d358 2
a359 2
test winpipe-7.2 {BuildCommandLine: null arguments} {pcOnly stdio} {
    exec $::tcltest::tcltest echoArgs.tcl foo \" bar
d362 1
a362 1
# restore old values for env(TMP) and env(TEMP)
d365 1
a365 1
    unset env(TMP)
d368 1
a368 1
    unset env(TEMP)
d371 1
a371 16
# cleanup
file delete big little stdout stderr nothing echoArgs.tcl
::tcltest::cleanupTests
return












@


1.1.1.3
log
@import tcl 8.4.0
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: winPipe.test,v 1.21 2002/07/18 16:39:50 vincentdarley Exp $
d17 4
a20 4
package require tcltest
namespace import -force ::tcltest::*

testConstraint exec [llength [info commands exec]]
d23 1
d27 1
d43 1
a43 2
set path(little) [makeFile {} little]
set f [open $path(little) w] 
d47 1
a47 2
set path(big) [makeFile {} big]
set f [open $path(big) w]
d58 2
a59 1
set path(more) [makeFile {
d63 2
a64 4
} more]

set path(stdout) [makeFile {} stdout]
set path(stderr) [makeFile {} stderr]
d66 3
a68 3
test winpipe-1.1 {32 bit comprehensive tests: from little file} {pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d70 3
a72 3
test winpipe-1.2 {32 bit comprehensive tests: from big file} {pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d74 3
a76 3
test winpipe-1.3 {32 bit comprehensive tests: a little from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < little | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d78 3
a80 3
test winpipe-1.4 {32 bit comprehensive tests: a lot from pipe} {pcOnly nt exec cat32} {
    exec [interpreter] more < big | $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d82 3
a84 3
test winpipe-1.5 {32 bit comprehensive tests: a lot from pipe} {pcOnly 95 exec cat32} {
    exec command /c type big |& $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d87 1
a87 1
	{pcOnly cat32 AllocConsole} {
d90 3
a92 3
test winpipe-1.7 {32 bit comprehensive tests: from NUL} {pcOnly exec cat32} {
    exec $cat32 < nul > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d94 1
a94 1
test winpipe-1.8 {32 bit comprehensive tests: from socket} {pcOnly cat32} {
d98 3
a100 3
	{pcOnly exec cat32 .console} {
    exec $cat32 > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d103 3
a105 3
	{pcOnly exec cat32} {
    set f [open $path(little) r]
    exec $cat32 <@@$f > $path(stdout) 2> $path(stderr)
d107 1
a107 1
    list [contents $path(stdout)] [contents $path(stderr)]
d110 2
a111 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32] < $path(little)" r]
d117 3
a119 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(little) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d122 3
a124 3
	{pcOnly exec cat32} {
    exec $cat32 < $path(big) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d127 3
a129 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(little) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d132 3
a134 3
	{pcOnly exec stdio cat32} {
    exec $cat32 < $path(big) | [interpreter] $path(more) > $path(stdout) 2> $path(stderr)
    list [contents $path(stdout)] [contents $path(stderr)]
d136 1
a136 1
test winpipe-1.16 {32 bit comprehensive tests: to console} {pcOnly exec cat32} {
d140 1
a140 1
test winpipe-1.17 {32 bit comprehensive tests: to NUL} {pcOnly exec cat32} {
d142 1
a142 1
    catch {exec $cat32 < $path(big) > nul} msg
d146 2
a147 2
	{pcOnly exec cat32 .console} {
    exec $cat32 < $path(big) >&@@stdout 
d149 4
a152 4
test winpipe-1.19 {32 bit comprehensive tests: to file handle} {pcOnly exec cat32} {
    set f1 [open $path(stdout) w]
    set f2 [open $path(stderr) w]
    exec $cat32 < $path(little) >@@$f1 2>@@$f2
d155 1
a155 1
    list [contents $path(stdout)] [contents $path(stderr)]
d158 2
a159 2
	{pcOnly exec cat32} {
    set f [open |[list $cat32 >$path(stdout)] w]
d162 1
a162 1
    list [contents $path(stdout)] $msg
d165 2
a166 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d174 2
a175 1
test winpipe-1.22 {Checking command.com for Win95/98 hanging} {pcOnly 95 exec} {
d179 99
d280 1
a280 1
test winpipe-4.1 {Tcl_WaitPid} {pcOnly nt exec cat32} {
d292 1
a292 1
    set f [open "|[list $cat32] < big 2> $path(stderr)" r]
d298 1
a298 1
    list $result $x [contents $path(stderr)]
d301 1
a301 2
set path(nothing) [makeFile {} nothing]
close [open $path(nothing) w]
d309 1
a309 1
test winpipe-5.1 {TclpCreateTempFile: cleanup temp files} {pcOnly exec} {
d312 1
a312 1
    exec [interpreter] < nothing 
d320 1
a320 1
test winpipe-5.2 {TclpCreateTempFile: TMP and TEMP not defined} {pcOnly exec} {
d325 1
a325 1
    exec [interpreter] < nothing
d331 1
a331 1
	{pcOnly exec } {
d334 1
a334 1
    exec [interpreter] < nothing
d339 1
a339 1
	{pcOnly exec} {
d344 1
a344 1
    exec [interpreter] < nothing
d351 2
a352 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d371 2
a372 2
	{pcOnly exec cat32} {
    set f [open "|[list $cat32]" r+]
d384 1
a384 1
set path(echoArgs.tcl) [makeFile {
d386 1
a386 1
} echoArgs.tcl]
d388 6
a393 6
test winpipe-7.1 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo "" bar
} [list $path(echoArgs.tcl) {foo {} bar}]
test winpipe-7.2 {BuildCommandLine: null arguments} {pcOnly exec} {
    exec [interpreter] $path(echoArgs.tcl) foo \" bar
} [list $path(echoArgs.tcl) {foo {"} bar}]
d408 12
@


