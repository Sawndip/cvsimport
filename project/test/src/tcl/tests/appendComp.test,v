head	1.3;
access;
symbols
	sid-snapshot-20180601:1.3
	sid-snapshot-20180501:1.3
	sid-snapshot-20180401:1.3
	sid-snapshot-20180301:1.3
	sid-snapshot-20180201:1.3
	sid-snapshot-20180101:1.3
	sid-snapshot-20171201:1.3
	sid-snapshot-20171101:1.3
	sid-snapshot-20171001:1.3
	sid-snapshot-20170901:1.3
	sid-snapshot-20170801:1.3
	sid-snapshot-20170701:1.3
	sid-snapshot-20170601:1.3
	sid-snapshot-20170501:1.3
	sid-snapshot-20170401:1.3
	sid-snapshot-20170301:1.3
	sid-snapshot-20170201:1.3
	sid-snapshot-20170101:1.3
	sid-snapshot-20161201:1.3
	sid-snapshot-20161101:1.3
	sid-snapshot-20160901:1.3
	sid-snapshot-20160801:1.3
	sid-snapshot-20160701:1.3
	sid-snapshot-20160601:1.3
	sid-snapshot-20160501:1.3
	sid-snapshot-20160401:1.3
	sid-snapshot-20160301:1.3
	sid-snapshot-20160201:1.3
	sid-snapshot-20160101:1.3
	sid-snapshot-20151201:1.3
	sid-snapshot-20151101:1.3
	sid-snapshot-20151001:1.3
	sid-snapshot-20150901:1.3
	sid-snapshot-20150801:1.3
	sid-snapshot-20150701:1.3
	sid-snapshot-20150601:1.3
	sid-snapshot-20150501:1.3
	sid-snapshot-20150401:1.3
	sid-snapshot-20150301:1.3
	sid-snapshot-20150201:1.3
	sid-snapshot-20150101:1.3
	sid-snapshot-20141201:1.3
	sid-snapshot-20141101:1.3
	sid-snapshot-20141001:1.3
	sid-snapshot-20140901:1.3
	sid-snapshot-20140801:1.3
	sid-snapshot-20140701:1.3
	sid-snapshot-20140601:1.3
	sid-snapshot-20140501:1.3
	sid-snapshot-20140401:1.3
	sid-snapshot-20140301:1.3
	sid-snapshot-20140201:1.3
	sid-snapshot-20140101:1.3
	sid-snapshot-20131201:1.3
	sid-snapshot-20131101:1.3
	sid-snapshot-20131001:1.3
	sid-snapshot-20130901:1.3
	sid-snapshot-20130801:1.3
	sid-snapshot-20130701:1.3
	sid-snapshot-20130601:1.3
	insight_7_6-2013-04-10-branchpoint:1.3
	gdb_7_6-branch:1.3.0.60
	sid-snapshot-20130501:1.3
	sid-snapshot-20130401:1.3
	sid-snapshot-20130301:1.3
	sid-snapshot-20130201:1.3
	sid-snapshot-20130101:1.3
	sid-snapshot-20121201:1.3
	sid-snapshot-20121101:1.3
	sid-snapshot-20121001:1.3
	sid-snapshot-20120901:1.3
	gdb_7_5-branch:1.3.0.58
	sid-snapshot-20120801:1.3
	sid-snapshot-20120701:1.3
	sid-snapshot-20120601:1.3
	sid-snapshot-20120501:1.3
	sid-snapshot-20120401:1.3
	gdb_7_4-branch:1.3.0.56
	sid-snapshot-20120301:1.3
	sid-snapshot-20120201:1.3
	sid-snapshot-20120101:1.3
	sid-snapshot-20111201:1.3
	sid-snapshot-20111101:1.3
	sid-snapshot-20111001:1.3
	sid-snapshot-20110901:1.3
	gdb_7_3-branch:1.3.0.54
	sid-snapshot-20110801:1.3
	sid-snapshot-20110701:1.3
	sid-snapshot-20110601:1.3
	sid-snapshot-20110501:1.3
	sid-snapshot-20110401:1.3
	sid-snapshot-20110301:1.3
	sid-snapshot-20110201:1.3
	sid-snapshot-20110101:1.3
	sid-snapshot-20101201:1.3
	sid-snapshot-20101101:1.3
	sid-snapshot-20101001:1.3
	sid-snapshot-20100901:1.3
	sid-snapshot-20100801:1.3
	sid-snapshot-20100701:1.3
	sid-snapshot-20100601:1.3
	sid-snapshot-20100501:1.3
	sid-snapshot-20100401:1.3
	sid-snapshot-20100301:1.3
	gdb_7_1-branch:1.3.0.52
	gdb_7_0-branch:1.3.0.50
	sid-snapshot-20100201:1.3
	sid-snapshot-20100101:1.3
	sid-snapshot-20091201:1.3
	sid-snapshot-20091101:1.3
	sid-snapshot-20091001:1.3
	arc-sim-20090309:1.3
	sid-snapshot-20090901:1.3
	sid-snapshot-20090801:1.3
	sid-snapshot-20090701:1.3
	sid-snapshot-20090601:1.3
	sid-snapshot-20090501:1.3
	kevinb-pre-tcl8_5_7_merge:1.3
	sid-snapshot-20090401:1.3
	arc-insight_6_8-branch:1.3.0.48
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.46
	insight_6_8-branchpoint:1.3
	sid-snapshot-20090301:1.3
	sid-snapshot-20090201:1.3
	sid-snapshot-20090101:1.3
	sid-snapshot-20081201:1.3
	sid-snapshot-20081101:1.3
	sid-snapshot-20081001:1.3
	sid-snapshot-20080901:1.3
	sid-snapshot-20080801:1.3
	sid-snapshot-20080701:1.3
	sid-snapshot-20080601:1.3
	sid-snapshot-20080501:1.3
	sid-snapshot-20080403:1.3
	sid-snapshot-20080401:1.3
	gdb_6_8-branch:1.3.0.44
	sid-snapshot-20080301:1.3
	sid-snapshot-20080201:1.3
	sid-snapshot-20080101:1.3
	sid-snapshot-20071201:1.3
	sid-snapshot-20071101:1.3
	sid-snapshot-20071001:1.3
	insight_6_6-20070208-release:1.3
	gdb_6_6-branch:1.3.0.42
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb_6_5-branch:1.3.0.40
	gdb_6_5-2006-05-14-branchpoint:1.3
	readline_5_1-import-branch:1.3.0.38
	readline_5_1-import-branchpoint:1.3
	gdb_6_4-branch:1.3.0.36
	gdb_6_4-2005-11-01-branchpoint:1.3
	msnyder-tracepoint-checkpoint-branch:1.3.0.34
	msnyder-tracepoint-checkpoint-branchpoint:1.3
	gdb_6_1-2004-04-05-release:1.3
	ezannoni_pie-20040323-branch:1.3.0.32
	ezannoni_pie-20040323-branchpoint:1.3
	cagney_tramp-20040321-mergepoint:1.3
	cagney_tramp-20040309-branch:1.3.0.30
	cagney_tramp-20040309-branchpoint:1.3
	gdb_6_1-branch:1.3.0.28
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	drow-cplus-merge-20040208:1.3
	carlton_dictionary-20040126-merge:1.3
	drow-cplus-merge-20040113:1.3
	drow-cplus-merge-20031224:1.3
	drow-cplus-merge-20031220:1.3
	carlton_dictionary-20031215-merge:1.3
	drow-cplus-merge-20031214:1.3
	carlton-dictionary-20031111-merge:1.3
	gdb_6_0-2003-10-04-release:1.3
	carlton_dictionary-20030917-merge:1.3
	ezannoni_pie-20030916-branchpoint:1.3
	ezannoni_pie-20030916-branch:1.3.0.26
	gdb_5_1-2001-07-29-branch:1.3.0.24
	cagney_x86i386-20030821-branch:1.3.0.22
	cagney_x86i386-20030821-branchpoint:1.3
	carlton_dictionary-20030805-merge:1.3
	carlton_dictionary-20030627-merge:1.3
	gdb_6_0-branch:1.3.0.20
	gdb_6_0-2003-06-23-branchpoint:1.3
	cagney_convert-20030606-branch:1.3.0.18
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.3.0.16
	cagney_writestrings-20030508-branchpoint:1.3
	carlton_dictionary-20030523-merge:1.3
	cagney_fileio-20030521-branch:1.3.0.14
	cagney_fileio-20030521-branchpoint:1.3
	carlton_dictionary-20030430-merge:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.3
	cagney_frameaddr-20030403-branchpoint:1.3
	cagney_frameaddr-20030403-branch:1.3.0.12
	cagney_framebase-20030330-mergepoint:1.3
	cagney_framebase-20030326-branch:1.3.0.10
	cagney_framebase-20030326-branchpoint:1.3
	cagney_lazyid-20030317-branch:1.3.0.8
	cagney_lazyid-20030317-branchpoint:1.3
	offbyone-20030313-branch:1.3.0.6
	offbyone-20030313-branchpoint:1.3
	carlton_dictionary-20030305-merge:1.3
	cagney_offbyone-20030303-branch:1.3.0.4
	cagney_offbyone-20030303-branchpoint:1.3
	carlton_dictionary-20030207-merge:1.3
	interps-20030202-branch:1.3.0.2
	interps-20030202-branchpoint:1.3
	TCL8_4_1:1.1.1.1
	cagney-unwind-20030108-branch:1.2.0.2
	cagney-unwind-20030108-branchpoint:1.2
	carlton_dictionary-20021223-merge:1.2
	TCL_8_4_1:1.1.1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.6
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.4
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-branch:1.1.0.2
	carlton_dictionary-20020927-merge:1.1.1.1
	tcltk840-20020924-branch:1.1.1.1.0.2
	tcltk840-20020924-branchpoint:1.1.1.1
	TCL_8_4_0:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2003.01.21.19.40.13;	author hunt;	state Exp;
branches
	1.3.48.1;
next	1.2;

1.2
date	2002.11.26.19.48.00;	author hunt;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.19.56.33;	author kseitz;	state Exp;
branches
	1.1.1.1
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.3.48.1
date	2009.09.11.04.46.02;	author amylaar;	state Exp;
branches;
next	;

1.1.1.1
date	2002.09.24.19.56.33;	author kseitz;	state Exp;
branches;
next	;

1.1.2.1
date	2002.09.27.20.03.39;	author carlton;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.10.11.22.23.11;	author carlton;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.12.23.19.40.36;	author carlton;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.02.07.19.18.17;	author carlton;	state Exp;
branches;
next	;

1.1.4.1
date	2002.10.01.00.46.56;	author kseitz;	state Exp;
branches;
next	;

1.1.6.1
date	2003.12.14.20.28.48;	author drow;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Updated to tcl 8.4.1
@
text
@# Commands covered:  append lappend
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1993 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: appendComp.test,v 1.5 2001/11/23 01:25:38 das Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}
catch {unset x}

test appendComp-1.1 {append command} {
    catch {unset x}
    proc foo {} {append ::x 1 2 abc "long string"}
    list [foo] $x
} {{12abclong string} {12abclong string}}
test appendComp-1.2 {append command} {
    proc foo {} {
	set x ""
	list [append x first] [append x second] [append x third] $x
    }
    foo
} {first firstsecond firstsecondthird firstsecondthird}
test appendComp-1.3 {append command} {
    proc foo {} {
	set x "abcd"
	append x
    }
    foo
} abcd

test appendComp-2.1 {long appends} {
    proc foo {} {
	set x ""
	for {set i 0} {$i < 1000} {set i [expr $i+1]} {
	    append x "foobar "
	}
	set y "foobar"
	set y "$y $y $y $y $y $y $y $y $y $y"
	set y "$y $y $y $y $y $y $y $y $y $y"
	set y "$y $y $y $y $y $y $y $y $y $y "
	expr {$x == $y}
    }
    foo
} 1

test appendComp-3.1 {append errors} {
    proc foo {} {append}
    list [catch {foo} msg] $msg
} {1 {wrong # args: should be "append varName ?value value ...?"}}
test appendComp-3.2 {append errors} {
    proc foo {} {
	set x ""
	append x(0) 44
    }
    list [catch {foo} msg] $msg
} {1 {can't set "x(0)": variable isn't array}}
test appendComp-3.3 {append errors} {
    proc foo {} {
	catch {unset x}
	append x
    }
    list [catch {foo} msg] $msg
} {1 {can't read "x": no such variable}}

test appendComp-4.1 {lappend command} {
    proc foo {} {
	global x
	catch {unset x}
	lappend x 1 2 abc "long string"
    }
    list [foo] $x
} {{1 2 abc {long string}} {1 2 abc {long string}}}
test appendComp-4.2 {lappend command} {
    proc foo {} {
	set x ""
	list [lappend x first] [lappend x second] [lappend x third] $x
    }
    foo
} {first {first second} {first second third} {first second third}}
test appendComp-4.3 {lappend command} {
    proc foo {} {
	global x
	set x old
	unset x
	lappend x new
    }
    set result [foo]
    rename foo {}
    set result
} {new}
test appendComp-4.4 {lappend command} {
    proc foo {} {
	set x {}
	lappend x \{\  abc
    }
    foo
} {\{\  abc}
test appendComp-4.5 {lappend command} {
    proc foo {} {
	set x {}
	lappend x \{ abc
    }
    foo
} {\{ abc}
test appendComp-4.6 {lappend command} {
    proc foo {} {
	set x {1 2 3}
	lappend x
    }
    foo
} {1 2 3}
test appendComp-4.7 {lappend command} {
    proc foo {} {
	set x "a\{"
	lappend x abc
    }
    foo
} "a\\\{ abc"
test appendComp-4.8 {lappend command} {
    proc foo {} {
	set x "\\\{"
	lappend x abc
    }
    foo
} "\\{ abc"
test appendComp-4.9 {lappend command} {
    proc foo {} {
	set x " \{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.10 {lappend command} {
    proc foo {} {
	set x "	\{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.11 {lappend command} {
    proc foo {} {
	set x "\{\{\{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.12 {lappend command} {
    proc foo {} {
	set x "x \{\{\{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.13 {lappend command} {
    proc foo {} {
	set x "x\{\{\{"
	lappend x abc
    }
    foo
} "x\\\{\\\{\\\{ abc"
test appendComp-4.14 {lappend command} {
    proc foo {} {
	set x " "
	lappend x abc
    }
    foo
} "abc"
test appendComp-4.15 {lappend command} {
    proc foo {} {
	set x "\\ "
	lappend x abc
    }
    foo
} "{ } abc"
test appendComp-4.16 {lappend command} {
    proc foo {} {
	set x "x "
	lappend x abc
    }
    foo
} "x abc"
test appendComp-4.17 {lappend command} {
    proc foo {} { lappend x }
    foo
} {}
test appendComp-4.18 {lappend command} {
    proc foo {} { lappend x {} }
    foo
} {{}}
test append-4.19 {lappend command} {
    proc foo {} { lappend x(0) }
    foo
} {}
test append-4.20 {lappend command} {
    proc foo {} { lappend x(0) abc }
    foo
} {abc}

proc check {var size} {
    set l [llength $var]
    if {$l != $size} {
	return "length mismatch: should have been $size, was $l"
    }
    for {set i 0} {$i < $size} {set i [expr $i+1]} {
	set j [lindex $var $i]
	if {$j != "item $i"} {
	    return "element $i should have been \"item $i\", was \"$j\""
	}
    }
    return ok
}
test appendComp-5.1 {long lappends} {
    catch {unset x}
    set x ""
    for {set i 0} {$i < 300} {set i [expr $i+1]} {
	lappend x "item $i"
    }
    check $x 300
} ok

test appendComp-6.1 {lappend errors} {
    proc foo {} {lappend}
    list [catch {foo} msg] $msg
} {1 {wrong # args: should be "lappend varName ?value value ...?"}}
test appendComp-6.2 {lappend errors} {
    proc foo {} {
	set x ""
	lappend x(0) 44
    }
    list [catch {foo} msg] $msg
} {1 {can't set "x(0)": variable isn't array}}

test appendComp-7.1 {lappendComp-created var and error in trace on that var} {
    proc bar {} {
	global x
	catch {rename foo ""}
	catch {unset x}
	trace variable x w foo
	proc foo {} {global x; unset x}
	catch {lappend x 1}
	proc foo {args} {global x; unset x}
	info exists x
	set x
	lappend x 1
	list [info exists x] [catch {set x} msg] $msg
    }
    bar
} {0 1 {can't read "x": no such variable}}
test appendComp-7.2 {lappend var triggers read trace, index var} {
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar {} r}}
test appendComp-7.3 {lappend var triggers read trace, stack var} {
    proc bar {} {
	catch {unset ::myvar}
	catch {unset ::result}
	trace variable ::myvar r foo
	proc foo {args} {append ::result $args}
	lappend ::myvar a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {::myvar {} r}}
test appendComp-7.4 {lappend var triggers read trace, array var} {
    # The behavior of read triggers on lappend changed in 8.0 to
    # not trigger them.  Maybe not correct, but been there a while.
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar(b) a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar b r}}
test appendComp-7.5 {lappend var triggers read trace, array var} {
    # The behavior of read triggers on lappend changed in 8.0 to
    # not trigger them.  Maybe not correct, but been there a while.
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar(b) a b
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar b r}}
test appendComp-7.6 {lappend var triggers read trace, array var exists} {
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	set myvar(0) 1
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar(b) a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar b r}}
test appendComp-7.7 {lappend var triggers read trace, array stack var} {
    proc bar {} {
	catch {unset ::myvar}
	catch {unset ::result}
	trace variable ::myvar r foo
	proc foo {args} {append ::result $args}
	lappend ::myvar(b) a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {::myvar b r}}
test appendComp-7.8 {lappend var triggers read trace, array stack var} {
    proc bar {} {
	catch {unset ::myvar}
	catch {unset ::result}
	trace variable ::myvar r foo
	proc foo {args} {append ::result $args}
	lappend ::myvar(b) a b
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {::myvar b r}}
test appendComp-7.9 {append var does not trigger read trace} {
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	append myvar a
	info exists ::result
    }
    bar
} {0}

catch {unset i x result y}
catch {rename foo ""}
catch {rename bar ""}
catch {rename check ""}
catch {rename bar {}}

# cleanup
::tcltest::cleanupTests
return
@


1.3.48.1
log
@gdb/insight for ARCompact (from Richard Stuckey)
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.3 2003/01/21 19:40:13 hunt Exp $
@


1.2
log
@touched all sources to ease next import
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.1 2002/09/24 19:56:33 kseitz Exp $
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.5 2001/11/23 01:25:38 das Exp $
@


1.1.6.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.3 2003/01/21 19:40:13 hunt Exp $
@


1.1.4.1
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.1 2002/09/24 19:56:33 kseitz Exp $
@


1.1.2.1
log
@Merge with mainline; tag is carlton_dictionary-20020927-merge
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.1.1.1 2002/09/24 19:56:33 kseitz Exp $
@


1.1.2.2
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.1 2002/09/24 19:56:33 kseitz Exp $
@


1.1.2.3
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.1.2.2 2002/10/11 22:23:11 carlton Exp $
@


1.1.2.4
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.1.2.3 2002/12/23 19:40:36 carlton Exp $
@


1.1.1.1
log
@import tcl 8.4.0
@
text
@@
