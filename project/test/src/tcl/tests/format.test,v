head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.58
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.56
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.54
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.52
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.50
	gdb_7_0-branch:1.5.0.48
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.46
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.44
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.42
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.40
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.38
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.36
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.34
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.30
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.28
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.3
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TCL_8_4_0:1.1.1.3
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.40.15;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.48.01;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.07;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.08;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.10;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.49;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.39;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.18;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.40.58;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.56.36;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@# Commands covered:  format
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1994 The Regents of the University of California.
# Copyright (c) 1994-1998 Sun Microsystems, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: format.test,v 1.11 2002/06/22 04:19:47 dgp Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

# The following code is needed because some versions of SCO Unix have
# a round-off error in sprintf which would cause some of the tests to
# fail.  Someday I hope this code shouldn't be necessary (code added
# 9/9/91).

set ::tcltest::testConstraints(roundOffBug) \
	[expr {"[format %7.1e  68.514]" != "6.8e+01"}]

test format-1.1 {integer formatting} {
    format "%*d %d %d %d" 6 34 16923 -12 -1
} {    34 16923 -12 -1}
test format-1.2 {integer formatting} {nonPortable} {
    format "%4d %4d %4d %4d %d %#x %#X" 6 34 16923 -12 -1 14 12
} {   6   34 16923  -12 -1 0xe 0XC}

# %u output depends on word length, so this test is not portable.

test format-1.3 {integer formatting} {nonPortable} {
    format "%4u %4u %4u %4u %d %#o" 6 34 16923 -12 -1 0
} {   6   34 16923 4294967284 -1 0}
test format-1.4 {integer formatting} {
    format "%-4d %-4i %-4d %-4ld" 6 34 16923 -12 -1
} {6    34   16923 -12 }
test format-1.5 {integer formatting} {
    format "%04d %04d %04d %04i" 6 34 16923 -12 -1
} {0006 0034 16923 -012}
test format-1.6 {integer formatting} {
    format "%00*d" 6 34
} {000034}

# Printing negative numbers in hex or octal format depends on word
# length, so these tests are not portable.

test format-1.7 {integer formatting} {nonPortable} {
    format "%4x %4x %4x %4x" 6 34 16923 -12 -1
} {   6   22 421b fffffff4}
test format-1.8 {integer formatting} {nonPortable} {
    format "%#x %#X %#X %#x" 6 34 16923 -12 -1
} {0x6 0X22 0X421B 0xfffffff4}
test format-1.9 {integer formatting} {nonPortable} {
    format "%#20x %#20x %#20x %#20x" 6 34 16923 -12 -1
} {                 0x6                 0x22               0x421b           0xfffffff4}
test format-1.10 {integer formatting} {nonPortable} {
    format "%-#20x %-#20x %-#20x %-#20x" 6 34 16923 -12 -1
} {0x6                  0x22                 0x421b               0xfffffff4          }
test format-1.11 {integer formatting} {nonPortable} {
    format "%-#20o %#-20o %#-20o %#-20o" 6 34 16923 -12 -1
} {06                   042                  041033               037777777764        }

test format-2.1 {string formatting} {
    format "%s %s %c %s" abcd {This is a very long test string.} 120 x
} {abcd This is a very long test string. x x}
test format-2.2 {string formatting} {
    format "%20s %20s %20c %20s" abcd {This is a very long test string.} 120 x
} {                abcd This is a very long test string.                    x                    x}
test format-2.3 {string formatting} {
    format "%.10s %.10s %c %.10s" abcd {This is a very long test string.} 120 x
} {abcd This is a  x x}
test format-2.4 {string formatting} {
    format "%s %s %% %c %s" abcd {This is a very long test string.} 120 x
} {abcd This is a very long test string. % x x}
test format-2.5 {string formatting, embedded nulls} {
    format "%10s" abc\0def
} "   abc\0def"
test format-2.6 {string formatting, international chars} {
    format "%10s" abc\ufeffdef
} "   abc\ufeffdef"
test format-2.6 {string formatting, international chars} {
    format "%.5s" abc\ufeffdef
} "abc\ufeffd"
test format-2.7 {string formatting, international chars} {
    format "foo\ufeffbar%s" baz
} "foo\ufeffbarbaz"
test format-2.8 {string formatting, width} {
    format "a%5sa" f
} "a    fa"
test format-2.8 {string formatting, width} {
    format "a%-5sa" f
} "af    a"
test format-2.8 {string formatting, width} {
    format "a%2sa" foo
} "afooa"
test format-2.8 {string formatting, width} {
    format "a%0sa" foo
} "afooa"
test format-2.8 {string formatting, precision} {
    format "a%.2sa" foobarbaz
} "afoa"
test format-2.8 {string formatting, precision} {
    format "a%.sa" foobarbaz
} "aa"
test format-2.8 {string formatting, precision} {
    list [catch {format "a%.-2sa" foobarbaz} msg] $msg
} {1 {bad field specifier "-"}}
test format-2.8 {string formatting, width and precision} {
    format "a%5.2sa" foobarbaz
} "a   foa"
test format-2.8 {string formatting, width and precision} {
    format "a%5.7sa" foobarbaz
} "afoobarba"

test format-3.1 {Tcl_FormatObjCmd: character formatting} {
    format "|%c|%0c|%-1c|%1c|%-6c|%6c|%*c|%*c|" 65 65 65 65 65 65 3 65 -4 65
} "|A|A|A|A|A     |     A|  A|A   |"
test format-3.2 {Tcl_FormatObjCmd: international character formatting} {
    format "|%c|%0c|%-1c|%1c|%-6c|%6c|%*c|%*c|" 0xa2 0x4e4e 0x25a 0xc3 0xff08 0 3 0x6575 -4 0x4e4f
} "|\ua2|\u4e4e|\u25a|\uc3|\uff08     |     \0|  \u6575|\u4e4f   |"

test format-4.1 {e and f formats} {eformat} {
    format "%e %e %e %e" 34.2e12 68.514 -.125 -16000. .000053
} {3.420000e+13 6.851400e+01 -1.250000e-01 -1.600000e+04}
test format-4.2 {e and f formats} {eformat} {
    format "%20e %20e %20e %20e" 34.2e12 68.514 -.125 -16000. .000053
} {        3.420000e+13         6.851400e+01        -1.250000e-01        -1.600000e+04}
test format-4.3 {e and f formats} {eformat roundOffBug} {
    format "%.1e %.1e %.1e %.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.4 {e and f formats} {eformat roundOffBug} {
    format "%020e %020e %020e %020e" 34.2e12 68.514 -.126 -16000. .000053
} {000000003.420000e+13 000000006.851400e+01 -00000001.260000e-01 -00000001.600000e+04}
test format-4.5 {e and f formats} {eformat roundOffBug} {
    format "%7.1e %7.1e %7.1e %7.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.6 {e and f formats roundOffBug} {
    format "%f %f %f %f" 34.2e12 68.514 -.125 -16000. .000053
} {34200000000000.000000 68.514000 -0.125000 -16000.000000}
test format-4.7 {e and f formats} {nonPortable} {
    format "%.4f %.4f %.4f %.4f %.4f" 34.2e12 68.514 -.125 -16000. .000053
} {34200000000000.0000 68.5140 -0.1250 -16000.0000 0.0001}
test format-4.8 {e and f formats} {eformat} {
    format "%.4e %.5e %.6e" -9.99996 -9.99996 9.99996
} {-1.0000e+01 -9.99996e+00 9.999960e+00}
test format-4.9 {e and f formats} {
    format "%.4f %.5f %.6f" -9.99996 -9.99996 9.99996
} {-10.0000 -9.99996 9.999960}
test format-4.10 {e and f formats} {
    format "%20f %-20f %020f" -9.99996 -9.99996 9.99996
} {           -9.999960 -9.999960            0000000000009.999960}
test format-4.11 {e and f formats} {
    format "%-020f %020f" -9.99996 -9.99996 9.99996
} {-9.999960            -000000000009.999960}
test format-4.12 {e and f formats} {eformat} {
    format "%.0e %#.0e" -9.99996 -9.99996 9.99996
} {-1e+01 -1.e+01}
test format-4.13 {e and f formats} {
    format "%.0f %#.0f" -9.99996 -9.99996 9.99996
} {-10 -10.}
test format-4.14 {e and f formats} {
    format "%.4f %.5f %.6f" -9.99996 -9.99996 9.99996
} {-10.0000 -9.99996 9.999960}
test format-4.15 {e and f formats} {
    format "%3.0f %3.0f %3.0f %3.0f" 1.0 1.1 1.01 1.001
} {  1   1   1   1}
test format-4.16 {e and f formats} {
    format "%3.1f %3.1f %3.1f %3.1f" 0.0 0.1 0.01 0.001
} {0.0 0.1 0.0 0.0}

test format-5.1 {g-format} {eformat} {
    format "%.3g" 12341.0
} {1.23e+04}
test format-5.2 {g-format} {eformat} {
    format "%.3G" 1234.12345
} {1.23E+03}
test format-5.3 {g-format} {
    format "%.3g" 123.412345
} {123}
test format-5.4 {g-format} {
    format "%.3g" 12.3412345
} {12.3}
test format-5.5 {g-format} {
    format "%.3g" 1.23412345
} {1.23}
test format-5.6 {g-format} {
    format "%.3g" 1.23412345
} {1.23}
test format-5.7 {g-format} {
    format "%.3g" .123412345
} {0.123}
test format-5.8 {g-format} {
    format "%.3g" .012341
} {0.0123}
test format-5.9 {g-format} {
    format "%.3g" .0012341
} {0.00123}
test format-5.10 {g-format} {
    format "%.3g" .00012341
} {0.000123}
test format-5.11 {g-format} {eformat} {
    format "%.3g" .00001234
} {1.23e-05}
test format-5.12 {g-format} {eformat} {
    format "%.4g" 9999.6
} {1e+04}
test format-5.13 {g-format} {
    format "%.4g" 999.96
} {1000}
test format-5.14 {g-format} {
    format "%.3g" 1.0
} {1}
test format-5.15 {g-format} {
    format "%.3g" .1
} {0.1}
test format-5.16 {g-format} {
    format "%.3g" .01
} {0.01}
test format-5.17 {g-format} {
    format "%.3g" .001
} {0.001}
test format-5.18 {g-format} {eformat} {
    format "%.3g" .00001
} {1e-05}
test format-5.19 {g-format} {eformat} {
    format "%#.3g" 1234.0
} {1.23e+03}
test format-5.20 {g-format} {eformat} {
    format "%#.3G" 9999.5
} {1.00E+04}

test format-6.1 {floating-point zeroes} {eformat} {
    format "%e %f %g" 0.0 0.0 0.0 0.0
} {0.000000e+00 0.000000 0}
test format-6.2 {floating-point zeroes} {eformat} {
    format "%.4e %.4f %.4g" 0.0 0.0 0.0 0.0
} {0.0000e+00 0.0000 0}
test format-6.3 {floating-point zeroes} {eformat} {
    format "%#.4e %#.4f %#.4g" 0.0 0.0 0.0 0.0
} {0.0000e+00 0.0000 0.000}
test format-6.4 {floating-point zeroes} {eformat} {
    format "%.0e %.0f %.0g" 0.0 0.0 0.0 0.0
} {0e+00 0 0}
test format-6.5 {floating-point zeroes} {eformat} {
    format "%#.0e %#.0f %#.0g" 0.0 0.0 0.0 0.0
} {0.e+00 0. 0.}
test format-6.6 {floating-point zeroes} {
    format "%3.0f %3.0f %3.0f %3.0f" 0.0 0.0 0.0 0.0
} {  0   0   0   0}
test format-6.7 {floating-point zeroes} {
    format "%3.0f %3.0f %3.0f %3.0f" 1.0 1.1 1.01 1.001
} {  1   1   1   1}
test format-6.8 {floating-point zeroes} {
    format "%3.1f %3.1f %3.1f %3.1f" 0.0 0.1 0.01 0.001
} {0.0 0.1 0.0 0.0}

test format-7.1 {various syntax features} {
    format "%*.*f" 12 3 12.345678901
} {      12.346}
test format-7.2 {various syntax features} {
    format "%0*.*f" 12 3 12.345678901
} {00000012.346}
test format-7.3 {various syntax features} {
    format "\*\t\\n"
} {*	\n}

test format-8.1 {error conditions} {
    catch format
} 1
test format-8.2 {error conditions} {
    catch format msg
    set msg
} {wrong # args: should be "format formatString ?arg arg ...?"}
test format-8.3 {error conditions} {
    catch {format %*d}
} 1
test format-8.4 {error conditions} {
    catch {format %*d} msg
    set msg
} {not enough arguments for all format specifiers}
test format-8.5 {error conditions} {
    catch {format %*.*f 12}
} 1
test format-8.6 {error conditions} {
    catch {format %*.*f 12} msg
    set msg
} {not enough arguments for all format specifiers}
test format-8.7 {error conditions} {
    catch {format %*.*f 12 3}
} 1
test format-8.8 {error conditions} {
    catch {format %*.*f 12 3} msg
    set msg
} {not enough arguments for all format specifiers}
test format-8.9 {error conditions} {
    list [catch {format %*d x 3} msg] $msg
} {1 {expected integer but got "x"}}
test format-8.10 {error conditions} {
    list [catch {format %*.*f 2 xyz 3} msg] $msg
} {1 {expected integer but got "xyz"}}
test format-8.11 {error conditions} {
    catch {format %d 2a}
} 1
test format-8.12 {error conditions} {
    catch {format %d 2a} msg
    set msg
} {expected integer but got "2a"}
test format-8.13 {error conditions} {
    catch {format %c 2x}
} 1
test format-8.14 {error conditions} {
    catch {format %c 2x} msg
    set msg
} {expected integer but got "2x"}
test format-8.15 {error conditions} {
    catch {format %f 2.1z}
} 1
test format-8.16 {error conditions} {
    catch {format %f 2.1z} msg
    set msg
} {expected floating-point number but got "2.1z"}
test format-8.17 {error conditions} {
    catch {format ab%}
} 1
test format-8.18 {error conditions} {
    catch {format ab% 12} msg
    set msg
} {format string ended in middle of field specifier}
test format-8.19 {error conditions} {
    catch {format %q x}
} 1
test format-8.20 {error conditions} {
    catch {format %q x} msg
    set msg
} {bad field specifier "q"}
test format-8.21 {error conditions} {
    catch {format %d}
} 1
test format-8.22 {error conditions} {
    catch {format %d} msg
    set msg
} {not enough arguments for all format specifiers}
test format-8.23 {error conditions} {
    catch {format "%d %d" 24 xyz} msg
    set msg
} {expected integer but got "xyz"}

test format-9.1 {long result} {
    set a {1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1 2 3 4 5 6 7 8 9 0 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}
    format {1111 2222 3333 4444 5555 6666 7777 8888 9999 aaaa bbbb cccc dddd eeee ffff gggg hhhh iiii jjjj kkkk llll mmmm nnnn oooo pppp qqqq rrrr ssss tttt uuuu vvvv wwww xxxx yyyy zzzz AAAA BBBB CCCC DDDD EEEE FFFF GGGG %s %s} $a $a
} {1111 2222 3333 4444 5555 6666 7777 8888 9999 aaaa bbbb cccc dddd eeee ffff gggg hhhh iiii jjjj kkkk llll mmmm nnnn oooo pppp qqqq rrrr ssss tttt uuuu vvvv wwww xxxx yyyy zzzz AAAA BBBB CCCC DDDD EEEE FFFF GGGG 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1 2 3 4 5 6 7 8 9 0 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1 2 3 4 5 6 7 8 9 0 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}

test format-10.1 {"h" format specifier} {nonPortable} {
    format %hd 0xffff
} -1
test format-10.2 {"h" format specifier} {nonPortable} {
    format %hx 0x10fff
} fff
test format-10.3 {"h" format specifier} {nonPortable} {
    format %hd 0x10000
} 0

test format-11.1 {XPG3 %$n specifiers} {
    format {%2$d %1$d} 4 5
} {5 4}
test format-11.2 {XPG3 %$n specifiers} {
    format {%2$d %1$d %1$d %3$d} 4 5 6
} {5 4 4 6}
test format-11.3 {XPG3 %$n specifiers} {
    list [catch {format {%2$d %3$d} 4 5} msg] $msg
} {1 {"%n$" argument index out of range}}
test format-11.4 {XPG3 %$n specifiers} {
    list [catch {format {%2$d %0$d} 4 5 6} msg] $msg
} {1 {"%n$" argument index out of range}}
test format-11.5 {XPG3 %$n specifiers} {
    list [catch {format {%d %1$d} 4 5 6} msg] $msg
} {1 {cannot mix "%" and "%n$" conversion specifiers}}
test format-11.6 {XPG3 %$n specifiers} {
    list [catch {format {%2$d %d} 4 5 6} msg] $msg
} {1 {cannot mix "%" and "%n$" conversion specifiers}}
test format-11.7 {XPG3 %$n specifiers} {
    list [catch {format {%2$d %3d} 4 5 6} msg] $msg
} {1 {cannot mix "%" and "%n$" conversion specifiers}}
test format-11.8 {XPG3 %$n specifiers} {
    format {%2$*d %3$d} 1 10 4
} {         4 4}
test format-11.9 {XPG3 %$n specifiers} {
    format {%2$.*s %4$d} 1 5 abcdefghijklmnop 44
} {abcde 44}
test format-11.10 {XPG3 %$n specifiers} {
    list [catch {format {%2$*d} 4} msg] $msg
} {1 {"%n$" argument index out of range}}
test format-11.11 {XPG3 %$n specifiers} {
    list [catch {format {%2$*d} 4 5} msg] $msg
} {1 {"%n$" argument index out of range}}
test format-11.12 {XPG3 %$n specifiers} {
    list [catch {format {%2$*d} 4 5 6} msg] $msg
} {0 {    6}}

test format-12.1 {negative width specifiers} {
    format "%*d" -47 25
} {25                                             }
test format-13.1 {tcl_precision fuzzy comparison} {
    catch {unset a}
    catch {unset b}
    catch {unset c}
    catch {unset d}
    set a 0.0000000000001
    set b 0.00000000000001
    set c 0.00000000000000001
    set d [expr $a + $b + $c]
    format {%0.10f %0.12f %0.15f %0.17f} $d $d $d $d
} {0.0000000000 0.000000000000 0.000000000000110 0.00000000000011001}
test format-13.2 {tcl_precision fuzzy comparison} {
    catch {unset a}
    catch {unset b}
    catch {unset c}
    catch {unset d}
    set a 0.000000000001
    set b 0.000000000000005
    set c 0.0000000000000008
    set d [expr $a + $b + $c]
    format {%0.10f %0.12f %0.15f %0.17f} $d $d $d $d
} {0.0000000000 0.000000000001 0.000000000001006 0.00000000000100580}
test format-13.3 {tcl_precision fuzzy comparison} {
    catch {unset a}
    catch {unset b}
    catch {unset c}
    set a 0.00000000000099
    set b 0.000000000000011
    set c [expr $a + $b]
    format {%0.10f %0.12f %0.15f %0.17f} $c $c $c $c
} {0.0000000000 0.000000000001 0.000000000001001 0.00000000000100100}
test format-13.4 {tcl_precision fuzzy comparison} {
    catch {unset a}
    catch {unset b}
    catch {unset c}
    set a 0.444444444444
    set b 0.33333333333333
    set c [expr $a + $b]
    format {%0.10f %0.12f %0.15f %0.16f} $c $c $c $c
} {0.7777777778 0.777777777777 0.777777777777330 0.7777777777773300}
test format-13.5 {tcl_precision fuzzy comparison} {
    catch {unset a}
    catch {unset b}
    catch {unset c}
    set a 0.444444444444
    set b 0.99999999999999
    set c [expr $a + $b]
    format {%0.10f %0.12f %0.15f} $c $c $c
} {1.4444444444 1.444444444444 1.444444444443990}
test format-14.1 {testing MAX_FLOAT_SIZE for 0 and 1} {
    format {%s} ""
} {}
test format-14.2 {testing MAX_FLOAT_SIZE for 0 and 1} {
    format {%s} "a"
} {a}

test format-15.1 {testing %0..s 0 padding for chars/strings} {
    format %05s a
} {0000a}
test format-15.2 {testing %0..s 0 padding for chars/strings} {
    format "% 5s" a
} {    a}
test format-15.3 {testing %0..s 0 padding for chars/strings} {
    format %5s a
} {    a}
test format-15.4 {testing %0..s 0 padding for chars/strings} {
    format %05c 61
} {0000=}

set a "0123456789"
set b ""
for {set i 0} {$i < 290} {incr i} {
    append b $a
}
for {set i 290} {$i < 400} {incr i} {
    test format-16.[expr $i -289] {testing MAX_FLOAT_SIZE} {
        format {%s} $b    
    } $b
    append b "x"
}

::tcltest::testConstraint 64bitInts \
	[expr {0x80000000 > 0}]
::tcltest::testConstraint wideIntExpressions \
	[expr {wide(0x80000000) != int(0x80000000)}]

test format-17.1 {testing %d with wide} {64bitInts wideIntExpressions} {
    list [catch {format %d 7810179016327718216} msg] $msg
} {1 {integer value too large to represent}}
test format-17.2 {testing %ld with wide} {64bitInts} {
    format %ld 7810179016327718216
} 7810179016327718216
test format-17.3 {testing %ld with non-wide} {64bitInts} {
    format %ld 42
} 42

# cleanup
catch {unset a}
catch {unset b}
catch {unset c}
catch {unset d}
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: format.test,v 1.6.8.2 2000/09/15 16:56:30 spolk Exp $
d16 1
a16 1
    package require tcltest
d25 2
a26 5
set roundOffBug 0
if {"[format %7.1e  68.514]" == "6.8e+01"} {
    puts stdout "Note: this system has a sprintf round-off bug, some tests skipped\n"
    set roundOffBug 1
}
d134 12
a145 14
if {!$roundOffBug} {
    test format-4.3 {e and f formats} {eformat} {
	format "%.1e %.1e %.1e %.1e" 34.2e12 68.514 -.126 -16000. .000053
    } {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
    test format-4.4 {e and f formats} {eformat} {
	format "%020e %020e %020e %020e" 34.2e12 68.514 -.126 -16000. .000053
    } {000000003.420000e+13 000000006.851400e+01 -00000001.260000e-01 -00000001.600000e+04}
    test format-4.5 {e and f formats} {eformat} {
	format "%7.1e %7.1e %7.1e %7.1e" 34.2e12 68.514 -.126 -16000. .000053
    } {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
    test format-4.6 {e and f formats} {
	format "%f %f %f %f" 34.2e12 68.514 -.125 -16000. .000053
    } {34200000000000.000000 68.514000 -0.125000 -16000.000000}
}
d484 1
a484 1
    test format-15.[expr $i -290] {testing MAX_FLOAT_SIZE} {
d490 15
a511 13













@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: format.test,v 1.11 2002/06/22 04:19:47 dgp Exp $
d16 1
a16 1
    package require tcltest 2
d25 5
a29 2
set ::tcltest::testConstraints(roundOffBug) \
	[expr {"[format %7.1e  68.514]" != "6.8e+01"}]
d137 14
a150 12
test format-4.3 {e and f formats} {eformat roundOffBug} {
    format "%.1e %.1e %.1e %.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.4 {e and f formats} {eformat roundOffBug} {
    format "%020e %020e %020e %020e" 34.2e12 68.514 -.126 -16000. .000053
} {000000003.420000e+13 000000006.851400e+01 -00000001.260000e-01 -00000001.600000e+04}
test format-4.5 {e and f formats} {eformat roundOffBug} {
    format "%7.1e %7.1e %7.1e %7.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.6 {e and f formats roundOffBug} {
    format "%f %f %f %f" 34.2e12 68.514 -.125 -16000. .000053
} {34200000000000.000000 68.514000 -0.125000 -16000.000000}
d489 1
a489 1
    test format-16.[expr $i -289] {testing MAX_FLOAT_SIZE} {
a494 15
::tcltest::testConstraint 64bitInts \
	[expr {0x80000000 > 0}]
::tcltest::testConstraint wideIntExpressions \
	[expr {wide(0x80000000) != int(0x80000000)}]

test format-17.1 {testing %d with wide} {64bitInts wideIntExpressions} {
    list [catch {format %d 7810179016327718216} msg] $msg
} {1 {integer value too large to represent}}
test format-17.2 {testing %ld with wide} {64bitInts} {
    format %ld 7810179016327718216
} 7810179016327718216
test format-17.3 {testing %ld with non-wide} {64bitInts} {
    format %ld 42
} 42

d502 13
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: format.test,v 1.11 2002/06/22 04:19:47 dgp Exp $
d16 1
a16 1
    package require tcltest 2
d25 5
a29 2
set ::tcltest::testConstraints(roundOffBug) \
	[expr {"[format %7.1e  68.514]" != "6.8e+01"}]
d137 14
a150 12
test format-4.3 {e and f formats} {eformat roundOffBug} {
    format "%.1e %.1e %.1e %.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.4 {e and f formats} {eformat roundOffBug} {
    format "%020e %020e %020e %020e" 34.2e12 68.514 -.126 -16000. .000053
} {000000003.420000e+13 000000006.851400e+01 -00000001.260000e-01 -00000001.600000e+04}
test format-4.5 {e and f formats} {eformat roundOffBug} {
    format "%7.1e %7.1e %7.1e %7.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.6 {e and f formats roundOffBug} {
    format "%f %f %f %f" 34.2e12 68.514 -.125 -16000. .000053
} {34200000000000.000000 68.514000 -0.125000 -16000.000000}
d489 1
a489 1
    test format-16.[expr $i -289] {testing MAX_FLOAT_SIZE} {
a494 15
::tcltest::testConstraint 64bitInts \
	[expr {0x80000000 > 0}]
::tcltest::testConstraint wideIntExpressions \
	[expr {wide(0x80000000) != int(0x80000000)}]

test format-17.1 {testing %d with wide} {64bitInts wideIntExpressions} {
    list [catch {format %d 7810179016327718216} msg] $msg
} {1 {integer value too large to represent}}
test format-17.2 {testing %ld with wide} {64bitInts} {
    format %ld 7810179016327718216
} 7810179016327718216
test format-17.3 {testing %ld with non-wide} {64bitInts} {
    format %ld 42
} 42

d502 13
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d16 1
a16 1
    package require tcltest 2
d25 5
a29 2
set ::tcltest::testConstraints(roundOffBug) \
	[expr {"[format %7.1e  68.514]" != "6.8e+01"}]
d137 14
a150 12
test format-4.3 {e and f formats} {eformat roundOffBug} {
    format "%.1e %.1e %.1e %.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.4 {e and f formats} {eformat roundOffBug} {
    format "%020e %020e %020e %020e" 34.2e12 68.514 -.126 -16000. .000053
} {000000003.420000e+13 000000006.851400e+01 -00000001.260000e-01 -00000001.600000e+04}
test format-4.5 {e and f formats} {eformat roundOffBug} {
    format "%7.1e %7.1e %7.1e %7.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.6 {e and f formats roundOffBug} {
    format "%f %f %f %f" 34.2e12 68.514 -.125 -16000. .000053
} {34200000000000.000000 68.514000 -0.125000 -16000.000000}
d489 1
a489 1
    test format-16.[expr $i -289] {testing MAX_FLOAT_SIZE} {
a494 15
::tcltest::testConstraint 64bitInts \
	[expr {0x80000000 > 0}]
::tcltest::testConstraint wideIntExpressions \
	[expr {wide(0x80000000) != int(0x80000000)}]

test format-17.1 {testing %d with wide} {64bitInts wideIntExpressions} {
    list [catch {format %d 7810179016327718216} msg] $msg
} {1 {integer value too large to represent}}
test format-17.2 {testing %ld with wide} {64bitInts} {
    format %ld 7810179016327718216
} 7810179016327718216
test format-17.3 {testing %ld with non-wide} {64bitInts} {
    format %ld 42
} 42

d502 13
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
# Copyright (c) 1994 Sun Microsystems, Inc.
d13 1
a13 1
# RCS: @@(#) $Id: format.test,v 1.3 1998/11/02 23:04:13 stanton Exp $
d15 4
a18 1
if {[string compare test [info procs test]] == 1} then {source defs}
d84 46
d131 1
a131 1
test format-3.1 {e and f formats} {eformat} {
d134 1
a134 1
test format-3.2 {e and f formats} {eformat} {
d138 1
a138 1
    test format-3.3 {e and f formats} {eformat} {
d141 1
a141 1
    test format-3.4 {e and f formats} {eformat} {
d144 1
a144 1
    test format-3.5 {e and f formats} {eformat} {
d147 1
a147 1
    test format-3.6 {e and f formats} {
d151 1
a151 1
test format-3.7 {e and f formats} {nonPortable} {
d154 1
a154 1
test format-3.8 {e and f formats} {eformat} {
d157 1
a157 1
test format-3.9 {e and f formats} {
d160 1
a160 1
test format-3.10 {e and f formats} {
d163 1
a163 1
test format-3.11 {e and f formats} {
d166 1
a166 1
test format-3.12 {e and f formats} {eformat} {
d169 1
a169 1
test format-3.13 {e and f formats} {
d172 1
a172 1
test format-3.14 {e and f formats} {
d175 1
a175 1
test format-3.15 {e and f formats} {
d178 1
a178 1
test format-3.16 {e and f formats} {
d182 1
a182 1
test format-4.1 {g-format} {eformat} {
d185 1
a185 1
test format-4.2 {g-format} {eformat} {
d188 1
a188 1
test format-4.3 {g-format} {
d191 1
a191 1
test format-4.4 {g-format} {
d194 1
a194 1
test format-4.5 {g-format} {
d197 1
a197 1
test format-4.6 {g-format} {
d200 1
a200 1
test format-4.7 {g-format} {
d203 1
a203 1
test format-4.8 {g-format} {
d206 1
a206 1
test format-4.9 {g-format} {
d209 1
a209 1
test format-4.10 {g-format} {
d212 1
a212 1
test format-4.11 {g-format} {eformat} {
d215 1
a215 1
test format-4.12 {g-format} {eformat} {
d218 1
a218 1
test format-4.13 {g-format} {
d221 1
a221 1
test format-4.14 {g-format} {
d224 1
a224 1
test format-4.15 {g-format} {
d227 1
a227 1
test format-4.16 {g-format} {
d230 1
a230 1
test format-4.17 {g-format} {
d233 1
a233 1
test format-4.18 {g-format} {eformat} {
d236 1
a236 1
test format-4.19 {g-format} {eformat} {
d239 1
a239 1
test format-4.20 {g-format} {eformat} {
d243 1
a243 1
test format-5.1 {floating-point zeroes} {eformat} {
d246 1
a246 1
test format-5.2 {floating-point zeroes} {eformat} {
d249 1
a249 1
test format-5.3 {floating-point zeroes} {eformat} {
d252 1
a252 1
test format-5.4 {floating-point zeroes} {eformat} {
d255 1
a255 1
test format-5.5 {floating-point zeroes} {eformat} {
d258 1
a258 1
test format-5.6 {floating-point zeroes} {
d261 1
a261 1
test format-5.7 {floating-point zeroes} {
d264 1
a264 1
test format-5.8 {floating-point zeroes} {
d268 1
a268 1
test format-6.1 {various syntax features} {
d271 1
a271 1
test format-6.2 {various syntax features} {
d274 1
a274 1
test format-6.3 {various syntax features} {
d278 1
a278 1
test format-7.1 {error conditions} {
d281 1
a281 1
test format-7.2 {error conditions} {
d285 1
a285 1
test format-7.3 {error conditions} {
d288 1
a288 1
test format-7.4 {error conditions} {
d292 1
a292 1
test format-7.5 {error conditions} {
d295 1
a295 1
test format-7.6 {error conditions} {
d299 1
a299 1
test format-7.7 {error conditions} {
d302 1
a302 1
test format-7.8 {error conditions} {
d306 1
a306 1
test format-7.9 {error conditions} {
d309 1
a309 1
test format-7.10 {error conditions} {
d312 1
a312 1
test format-7.11 {error conditions} {
d315 1
a315 1
test format-7.12 {error conditions} {
d319 1
a319 1
test format-7.13 {error conditions} {
d322 1
a322 1
test format-7.14 {error conditions} {
d326 1
a326 1
test format-7.15 {error conditions} {
d329 1
a329 1
test format-7.16 {error conditions} {
d333 1
a333 1
test format-7.17 {error conditions} {
d336 1
a336 1
test format-7.18 {error conditions} {
d340 1
a340 1
test format-7.19 {error conditions} {
d343 1
a343 1
test format-7.20 {error conditions} {
d347 1
a347 1
test format-7.21 {error conditions} {
d350 1
a350 1
test format-7.22 {error conditions} {
d354 1
a354 1
test format-7.23 {error conditions} {
d359 1
a359 1
test format-8.1 {long result} {
d364 1
a364 1
test format-9.1 {"h" format specifier} {nonPortable} {
d367 1
a367 1
test format-9.2 {"h" format specifier} {nonPortable} {
d370 1
a370 1
test format-9.3 {"h" format specifier} {nonPortable} {
d374 1
a374 1
test format-10.1 {XPG3 %$n specifiers} {
d377 1
a377 1
test format-10.2 {XPG3 %$n specifiers} {
d380 1
a380 1
test format-10.3 {XPG3 %$n specifiers} {
d383 1
a383 1
test format-10.4 {XPG3 %$n specifiers} {
d386 1
a386 1
test format-10.5 {XPG3 %$n specifiers} {
d389 1
a389 1
test format-10.6 {XPG3 %$n specifiers} {
d392 1
a392 1
test format-10.7 {XPG3 %$n specifiers} {
d395 1
a395 1
test format-10.8 {XPG3 %$n specifiers} {
d398 1
a398 1
test format-10.9 {XPG3 %$n specifiers} {
d401 1
a401 1
test format-10.10 {XPG3 %$n specifiers} {
d404 1
a404 1
test format-10.11 {XPG3 %$n specifiers} {
d407 1
a407 1
test format-10.12 {XPG3 %$n specifiers} {
d411 1
a411 1
test format-11.1 {negative width specifiers} {
d413 2
a414 2
} {25}
test format-12.1 {tcl_precision fuzzy comparison} {
d425 1
a425 1
test format-12.2 {tcl_precision fuzzy comparison} {
d436 1
a436 1
test format-12.3 {tcl_precision fuzzy comparison} {
d445 1
a445 1
test format-12.4 {tcl_precision fuzzy comparison} {
d454 1
a454 1
test format-12.5 {tcl_precision fuzzy comparison} {
d463 1
a463 1
test format-13.1 {testing MAX_FLOAT_SIZE for 0 and 1} {
d466 1
a466 1
test format-13.2 {testing MAX_FLOAT_SIZE for 0 and 1} {
d470 13
d489 1
a489 1
    test format-14.[expr $i -290] {testing MAX_FLOAT_SIZE} {
d495 1
a495 1

d500 1
d502 13
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@d8 1
a8 1
# Copyright (c) 1994-1998 Sun Microsystems, Inc.
d13 1
a13 1
# RCS: @@(#) $Id: format.test,v 1.6.8.2 2000/09/15 16:56:30 spolk Exp $
d15 1
a15 4
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}
a80 46
test format-2.5 {string formatting, embedded nulls} {
    format "%10s" abc\0def
} "   abc\0def"
test format-2.6 {string formatting, international chars} {
    format "%10s" abc\ufeffdef
} "   abc\ufeffdef"
test format-2.6 {string formatting, international chars} {
    format "%.5s" abc\ufeffdef
} "abc\ufeffd"
test format-2.7 {string formatting, international chars} {
    format "foo\ufeffbar%s" baz
} "foo\ufeffbarbaz"
test format-2.8 {string formatting, width} {
    format "a%5sa" f
} "a    fa"
test format-2.8 {string formatting, width} {
    format "a%-5sa" f
} "af    a"
test format-2.8 {string formatting, width} {
    format "a%2sa" foo
} "afooa"
test format-2.8 {string formatting, width} {
    format "a%0sa" foo
} "afooa"
test format-2.8 {string formatting, precision} {
    format "a%.2sa" foobarbaz
} "afoa"
test format-2.8 {string formatting, precision} {
    format "a%.sa" foobarbaz
} "aa"
test format-2.8 {string formatting, precision} {
    list [catch {format "a%.-2sa" foobarbaz} msg] $msg
} {1 {bad field specifier "-"}}
test format-2.8 {string formatting, width and precision} {
    format "a%5.2sa" foobarbaz
} "a   foa"
test format-2.8 {string formatting, width and precision} {
    format "a%5.7sa" foobarbaz
} "afoobarba"

test format-3.1 {Tcl_FormatObjCmd: character formatting} {
    format "|%c|%0c|%-1c|%1c|%-6c|%6c|%*c|%*c|" 65 65 65 65 65 65 3 65 -4 65
} "|A|A|A|A|A     |     A|  A|A   |"
test format-3.2 {Tcl_FormatObjCmd: international character formatting} {
    format "|%c|%0c|%-1c|%1c|%-6c|%6c|%*c|%*c|" 0xa2 0x4e4e 0x25a 0xc3 0xff08 0 3 0x6575 -4 0x4e4f
} "|\ua2|\u4e4e|\u25a|\uc3|\uff08     |     \0|  \u6575|\u4e4f   |"
d82 1
a82 1
test format-4.1 {e and f formats} {eformat} {
d85 1
a85 1
test format-4.2 {e and f formats} {eformat} {
d89 1
a89 1
    test format-4.3 {e and f formats} {eformat} {
d92 1
a92 1
    test format-4.4 {e and f formats} {eformat} {
d95 1
a95 1
    test format-4.5 {e and f formats} {eformat} {
d98 1
a98 1
    test format-4.6 {e and f formats} {
d102 1
a102 1
test format-4.7 {e and f formats} {nonPortable} {
d105 1
a105 1
test format-4.8 {e and f formats} {eformat} {
d108 1
a108 1
test format-4.9 {e and f formats} {
d111 1
a111 1
test format-4.10 {e and f formats} {
d114 1
a114 1
test format-4.11 {e and f formats} {
d117 1
a117 1
test format-4.12 {e and f formats} {eformat} {
d120 1
a120 1
test format-4.13 {e and f formats} {
d123 1
a123 1
test format-4.14 {e and f formats} {
d126 1
a126 1
test format-4.15 {e and f formats} {
d129 1
a129 1
test format-4.16 {e and f formats} {
d133 1
a133 1
test format-5.1 {g-format} {eformat} {
d136 1
a136 1
test format-5.2 {g-format} {eformat} {
d139 1
a139 1
test format-5.3 {g-format} {
d142 1
a142 1
test format-5.4 {g-format} {
d145 1
a145 1
test format-5.5 {g-format} {
d148 1
a148 1
test format-5.6 {g-format} {
d151 1
a151 1
test format-5.7 {g-format} {
d154 1
a154 1
test format-5.8 {g-format} {
d157 1
a157 1
test format-5.9 {g-format} {
d160 1
a160 1
test format-5.10 {g-format} {
d163 1
a163 1
test format-5.11 {g-format} {eformat} {
d166 1
a166 1
test format-5.12 {g-format} {eformat} {
d169 1
a169 1
test format-5.13 {g-format} {
d172 1
a172 1
test format-5.14 {g-format} {
d175 1
a175 1
test format-5.15 {g-format} {
d178 1
a178 1
test format-5.16 {g-format} {
d181 1
a181 1
test format-5.17 {g-format} {
d184 1
a184 1
test format-5.18 {g-format} {eformat} {
d187 1
a187 1
test format-5.19 {g-format} {eformat} {
d190 1
a190 1
test format-5.20 {g-format} {eformat} {
d194 1
a194 1
test format-6.1 {floating-point zeroes} {eformat} {
d197 1
a197 1
test format-6.2 {floating-point zeroes} {eformat} {
d200 1
a200 1
test format-6.3 {floating-point zeroes} {eformat} {
d203 1
a203 1
test format-6.4 {floating-point zeroes} {eformat} {
d206 1
a206 1
test format-6.5 {floating-point zeroes} {eformat} {
d209 1
a209 1
test format-6.6 {floating-point zeroes} {
d212 1
a212 1
test format-6.7 {floating-point zeroes} {
d215 1
a215 1
test format-6.8 {floating-point zeroes} {
d219 1
a219 1
test format-7.1 {various syntax features} {
d222 1
a222 1
test format-7.2 {various syntax features} {
d225 1
a225 1
test format-7.3 {various syntax features} {
d229 1
a229 1
test format-8.1 {error conditions} {
d232 1
a232 1
test format-8.2 {error conditions} {
d236 1
a236 1
test format-8.3 {error conditions} {
d239 1
a239 1
test format-8.4 {error conditions} {
d243 1
a243 1
test format-8.5 {error conditions} {
d246 1
a246 1
test format-8.6 {error conditions} {
d250 1
a250 1
test format-8.7 {error conditions} {
d253 1
a253 1
test format-8.8 {error conditions} {
d257 1
a257 1
test format-8.9 {error conditions} {
d260 1
a260 1
test format-8.10 {error conditions} {
d263 1
a263 1
test format-8.11 {error conditions} {
d266 1
a266 1
test format-8.12 {error conditions} {
d270 1
a270 1
test format-8.13 {error conditions} {
d273 1
a273 1
test format-8.14 {error conditions} {
d277 1
a277 1
test format-8.15 {error conditions} {
d280 1
a280 1
test format-8.16 {error conditions} {
d284 1
a284 1
test format-8.17 {error conditions} {
d287 1
a287 1
test format-8.18 {error conditions} {
d291 1
a291 1
test format-8.19 {error conditions} {
d294 1
a294 1
test format-8.20 {error conditions} {
d298 1
a298 1
test format-8.21 {error conditions} {
d301 1
a301 1
test format-8.22 {error conditions} {
d305 1
a305 1
test format-8.23 {error conditions} {
d310 1
a310 1
test format-9.1 {long result} {
d315 1
a315 1
test format-10.1 {"h" format specifier} {nonPortable} {
d318 1
a318 1
test format-10.2 {"h" format specifier} {nonPortable} {
d321 1
a321 1
test format-10.3 {"h" format specifier} {nonPortable} {
d325 1
a325 1
test format-11.1 {XPG3 %$n specifiers} {
d328 1
a328 1
test format-11.2 {XPG3 %$n specifiers} {
d331 1
a331 1
test format-11.3 {XPG3 %$n specifiers} {
d334 1
a334 1
test format-11.4 {XPG3 %$n specifiers} {
d337 1
a337 1
test format-11.5 {XPG3 %$n specifiers} {
d340 1
a340 1
test format-11.6 {XPG3 %$n specifiers} {
d343 1
a343 1
test format-11.7 {XPG3 %$n specifiers} {
d346 1
a346 1
test format-11.8 {XPG3 %$n specifiers} {
d349 1
a349 1
test format-11.9 {XPG3 %$n specifiers} {
d352 1
a352 1
test format-11.10 {XPG3 %$n specifiers} {
d355 1
a355 1
test format-11.11 {XPG3 %$n specifiers} {
d358 1
a358 1
test format-11.12 {XPG3 %$n specifiers} {
d362 1
a362 1
test format-12.1 {negative width specifiers} {
d364 2
a365 2
} {25                                             }
test format-13.1 {tcl_precision fuzzy comparison} {
d376 1
a376 1
test format-13.2 {tcl_precision fuzzy comparison} {
d387 1
a387 1
test format-13.3 {tcl_precision fuzzy comparison} {
d396 1
a396 1
test format-13.4 {tcl_precision fuzzy comparison} {
d405 1
a405 1
test format-13.5 {tcl_precision fuzzy comparison} {
d414 1
a414 1
test format-14.1 {testing MAX_FLOAT_SIZE for 0 and 1} {
d417 1
a417 1
test format-14.2 {testing MAX_FLOAT_SIZE for 0 and 1} {
a420 13
test format-15.1 {testing %0..s 0 padding for chars/strings} {
    format %05s a
} {0000a}
test format-15.2 {testing %0..s 0 padding for chars/strings} {
    format "% 5s" a
} {    a}
test format-15.3 {testing %0..s 0 padding for chars/strings} {
    format %5s a
} {    a}
test format-15.4 {testing %0..s 0 padding for chars/strings} {
    format %05c 61
} {0000=}

d427 1
a427 1
    test format-15.[expr $i -290] {testing MAX_FLOAT_SIZE} {
d433 1
a433 1
# cleanup
a437 1
::tcltest::cleanupTests
a438 13













@


1.1.1.3
log
@import tcl 8.4.0
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: format.test,v 1.11 2002/06/22 04:19:47 dgp Exp $
d16 1
a16 1
    package require tcltest 2
d25 5
a29 2
set ::tcltest::testConstraints(roundOffBug) \
	[expr {"[format %7.1e  68.514]" != "6.8e+01"}]
d137 14
a150 12
test format-4.3 {e and f formats} {eformat roundOffBug} {
    format "%.1e %.1e %.1e %.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.4 {e and f formats} {eformat roundOffBug} {
    format "%020e %020e %020e %020e" 34.2e12 68.514 -.126 -16000. .000053
} {000000003.420000e+13 000000006.851400e+01 -00000001.260000e-01 -00000001.600000e+04}
test format-4.5 {e and f formats} {eformat roundOffBug} {
    format "%7.1e %7.1e %7.1e %7.1e" 34.2e12 68.514 -.126 -16000. .000053
} {3.4e+13 6.9e+01 -1.3e-01 -1.6e+04}
test format-4.6 {e and f formats roundOffBug} {
    format "%f %f %f %f" 34.2e12 68.514 -.125 -16000. .000053
} {34200000000000.000000 68.514000 -0.125000 -16000.000000}
d489 1
a489 1
    test format-16.[expr $i -289] {testing MAX_FLOAT_SIZE} {
a494 15
::tcltest::testConstraint 64bitInts \
	[expr {0x80000000 > 0}]
::tcltest::testConstraint wideIntExpressions \
	[expr {wide(0x80000000) != int(0x80000000)}]

test format-17.1 {testing %d with wide} {64bitInts wideIntExpressions} {
    list [catch {format %d 7810179016327718216} msg] $msg
} {1 {integer value too large to represent}}
test format-17.2 {testing %ld with wide} {64bitInts} {
    format %ld 7810179016327718216
} 7810179016327718216
test format-17.3 {testing %ld with non-wide} {64bitInts} {
    format %ld 42
} 42

d502 13
@


