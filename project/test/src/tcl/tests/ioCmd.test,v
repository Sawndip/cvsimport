head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.58
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.56
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.54
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.52
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.50
	gdb_7_0-branch:1.5.0.48
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.46
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.44
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.42
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.40
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.38
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.36
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.34
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.30
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.28
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.3
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TCL_8_4_0:1.1.1.3
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.40.15;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.48.01;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.07;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.08;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.10;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.49;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.41;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.19;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.40.58;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.56.37;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@# Commands covered: open, close, gets, read, puts, seek, tell, eof, flush,
#		    fblocked, fconfigure, open, channel, fcopy
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1994 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: ioCmd.test,v 1.15 2002/07/10 11:56:44 dgp Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

removeFile test1
removeFile pipe

test iocmd-1.1 {puts command} {
   list [catch {puts} msg] $msg
} {1 {wrong # args: should be "puts ?-nonewline? ?channelId? string"}}
test iocmd-1.2 {puts command} {
   list [catch {puts a b c d e f g} msg] $msg
} {1 {wrong # args: should be "puts ?-nonewline? ?channelId? string"}}
test iocmd-1.3 {puts command} {
   list [catch {puts froboz -nonewline kablooie} msg] $msg
} {1 {bad argument "kablooie": should be "nonewline"}}
test iocmd-1.4 {puts command} {
   list [catch {puts froboz hello} msg] $msg
} {1 {can not find channel named "froboz"}}
test iocmd-1.5 {puts command} {
   list [catch {puts stdin hello} msg] $msg
} {1 {channel "stdin" wasn't opened for writing}}

set path(test1) [makeFile {} test1]

test iocmd-1.6 {puts command} {
    set f [open $path(test1) w]
    fconfigure $f -translation lf -eofchar {}
    puts -nonewline $f foobar
    close $f
    file size $path(test1)
} 6
test iocmd-1.7 {puts command} {
    set f [open $path(test1) w]
    fconfigure $f -translation lf -eofchar {}
    puts $f foobar
    close $f
    file size $path(test1)
} 7
test iocmd-1.8 {puts command} {
    set f [open $path(test1) w]
    fconfigure $f -translation lf -eofchar {}
    puts -nonewline $f [binary format a4a5 foo bar]
    close $f
    file size $path(test1)
} 9


test iocmd-2.1 {flush command} {
   list [catch {flush} msg] $msg
} {1 {wrong # args: should be "flush channelId"}}
test iocmd-2.2 {flush command} {
   list [catch {flush a b c d e} msg] $msg
} {1 {wrong # args: should be "flush channelId"}}
test iocmd-2.3 {flush command} {
   list [catch {flush foo} msg] $msg
} {1 {can not find channel named "foo"}}
test iocmd-2.4 {flush command} {
   list [catch {flush stdin} msg] $msg
} {1 {channel "stdin" wasn't opened for writing}}

test iocmd-3.1 {gets command} {
   list [catch {gets} msg] $msg
} {1 {wrong # args: should be "gets channelId ?varName?"}}
test iocmd-3.2 {gets command} {
   list [catch {gets a b c d e f g} msg] $msg
} {1 {wrong # args: should be "gets channelId ?varName?"}}
test iocmd-3.3 {gets command} {
   list [catch {gets aaa} msg] $msg
} {1 {can not find channel named "aaa"}}
test iocmd-3.4 {gets command} {
   list [catch {gets stdout} msg] $msg
} {1 {channel "stdout" wasn't opened for reading}}
test iocmd-3.5 {gets command} {
    set f [open $path(test1) w]
    puts $f [binary format a4a5 foo bar]
    close $f
    set f [open $path(test1) r]
    set result [gets $f]
    close $f
    set x foo\x00
    set x "${x}bar\x00\x00"
    string compare $x $result
} 0

test iocmd-4.1 {read command} {
   list [catch {read} msg] $msg
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"}}
test iocmd-4.2 {read command} {
   list [catch {read a b c d e f g h} msg] $msg
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"}}
test iocmd-4.3 {read command} {
   list [catch {read aaa} msg] $msg
} {1 {can not find channel named "aaa"}}
test iocmd-4.4 {read command} {
   list [catch {read -nonewline} msg] $msg
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"}}
test iocmd-4.5 {read command} {
   list [catch {read -nonew file4} msg] $msg $errorCode
} {1 {can not find channel named "-nonew"} NONE}
test iocmd-4.6 {read command} {
   list [catch {read stdout} msg] $msg
} {1 {channel "stdout" wasn't opened for reading}}
test iocmd-4.7 {read command} {
   list [catch {read -nonewline stdout} msg] $msg
} {1 {channel "stdout" wasn't opened for reading}}
test iocmd-4.8 {read command with incorrect combination of arguments} {
    removeFile test1
    set f [open $path(test1) w]
    puts $f "Two lines: this one"
    puts $f "and this one"
    close $f
    set f [open $path(test1)]
    set x [list [catch {read -nonewline $f 20 z} msg] $msg $errorCode]
    close $f
    set x
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"} NONE}
test iocmd-4.9 {read command} {
    list [catch {read stdin foo} msg] $msg $errorCode
} {1 {bad argument "foo": should be "nonewline"} NONE}
test iocmd-4.10 {read command} {
    list [catch {read file107} msg] $msg $errorCode
} {1 {can not find channel named "file107"} NONE}

set path(test3) [makeFile {} test3]

test iocmd-4.11 {read command} {
    set f [open $path(test3) w]
    set x [list [catch {read $f} msg] $msg $errorCode]
    close $f
    string compare [string tolower $x] \
	[list 1 [format "channel \"%s\" wasn't opened for reading" $f] none]
} 0
test iocmd-4.12 {read command} {
    set f [open $path(test1)]
    set x [list [catch {read $f 12z} msg] $msg $errorCode]
    close $f
    set x
} {1 {expected integer but got "12z"} NONE}

test iocmd-5.1 {seek command} {
    list [catch {seek} msg] $msg
} {1 {wrong # args: should be "seek channelId offset ?origin?"}}
test iocmd-5.2 {seek command} {
    list [catch {seek a b c d e f g} msg] $msg
} {1 {wrong # args: should be "seek channelId offset ?origin?"}}
test iocmd-5.3 {seek command} {
    list [catch {seek stdin gugu} msg] $msg
} {1 {expected integer but got "gugu"}}
test iocmd-5.4 {seek command} {
    list [catch {seek stdin 100 gugu} msg] $msg
} {1 {bad origin "gugu": must be start, current, or end}}

test iocmd-6.1 {tell command} {
    list [catch {tell} msg] $msg
} {1 {wrong # args: should be "tell channelId"}}
test iocmd-6.2 {tell command} {
    list [catch {tell a b c d e} msg] $msg
} {1 {wrong # args: should be "tell channelId"}}
test iocmd-6.3 {tell command} {
    list [catch {tell aaa} msg] $msg
} {1 {can not find channel named "aaa"}}

test iocmd-7.1 {close command} {
    list [catch {close} msg] $msg
} {1 {wrong # args: should be "close channelId"}}
test iocmd-7.2 {close command} {
    list [catch {close a b c d e} msg] $msg
} {1 {wrong # args: should be "close channelId"}}
test iocmd-7.3 {close command} {
    list [catch {close aaa} msg] $msg
} {1 {can not find channel named "aaa"}}

test iocmd-8.1 {fconfigure command} {
    list [catch {fconfigure} msg] $msg
} {1 {wrong # args: should be "fconfigure channelId ?optionName? ?value? ?optionName value?..."}}
test iocmd-8.2 {fconfigure command} {
    list [catch {fconfigure a b c d e f} msg] $msg
} {1 {wrong # args: should be "fconfigure channelId ?optionName? ?value? ?optionName value?..."}}
test iocmd-8.3 {fconfigure command} {
    list [catch {fconfigure a b} msg] $msg
} {1 {can not find channel named "a"}}
test iocmd-8.4 {fconfigure command} {
    removeFile test1
    set f1 [open $path(test1) w]
    set x [list [catch {fconfigure $f1 froboz} msg] $msg]
    close $f1
    set x
} {1 {bad option "froboz": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}
test iocmd-8.5 {fconfigure command} {
    list [catch {fconfigure stdin -buffering froboz} msg] $msg
} {1 {bad value for -buffering: must be one of full, line, or none}}
test iocmd-8.6 {fconfigure command} {
    list [catch {fconfigure stdin -translation froboz} msg] $msg
} {1 {bad value for -translation: must be one of auto, binary, cr, lf, crlf, or platform}}
test iocmd-8.7 {fconfigure command} {
    removeFile test1
    set f1 [open $path(test1) w]
    fconfigure $f1 -translation lf -eofchar {} -encoding unicode
    set x [fconfigure $f1]
    close $f1
    set x
} {-blocking 1 -buffering full -buffersize 4096 -encoding unicode -eofchar {} -translation lf}
test iocmd-8.8 {fconfigure command} {
    removeFile test1
    set f1 [open $path(test1) w]
    fconfigure $f1 -translation lf -buffering line -buffersize 3030 \
		-eofchar {} -encoding unicode
    set x ""
    lappend x [fconfigure $f1 -buffering]
    lappend x [fconfigure $f1]
    close $f1
    set x
} {line {-blocking 1 -buffering line -buffersize 3030 -encoding unicode -eofchar {} -translation lf}}
test iocmd-8.9 {fconfigure command} {
    removeFile test1
    set f1 [open $path(test1) w]
    fconfigure $f1 -translation binary -buffering none -buffersize 4040 \
		-eofchar {} -encoding binary
    set x [fconfigure $f1]
    close $f1
    set x
} {-blocking 1 -buffering none -buffersize 4040 -encoding binary -eofchar {} -translation lf}
test iocmd-8.10 {fconfigure command} {
    list [catch {fconfigure a b} msg] $msg
} {1 {can not find channel named "a"}}

set path(fconfigure.dummy) [makeFile {} fconfigure.dummy]

test iocmd-8.11 {fconfigure command} {
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -froboz blarfo} msg] $msg]
    close $chan
    set res
} {1 {bad option "-froboz": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}

test iocmd-8.12 {fconfigure command} {
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -b blarfo} msg] $msg]
    close $chan
    set res
} {1 {bad option "-b": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}

test iocmd-8.13 {fconfigure command} {
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -buffer blarfo} msg] $msg]
    close $chan
    set res
} {1 {bad option "-buffer": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}

removeFile fconfigure.dummy

test iocmd-8.14 {fconfigure command} {
    fconfigure stdin -buffers
} 4096

proc iocmdSSETUP {} {
    uplevel {
	set srv [socket -server iocmdSRV 0]
	set port [lindex [fconfigure $srv -sockname] 2]
	proc iocmdSRV {sock ip port} {close $sock}
	set cli [socket 127.0.0.1 $port]
    }
}
proc iocmdSSHTDWN {} {
    uplevel {
	close $cli
	close $srv
	unset cli srv port
	rename iocmdSRV {}
    }
}

test iocmd-8.15.0 {fconfigure command / tcp channel} {socket macOnly} {
	iocmdSSETUP
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
	iocmdSSHTDWN
	set r
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -error, -peername, or -sockname}}
test iocmd-8.15.1 {fconfigure command / tcp channel} {socket unixOrPc} {
	iocmdSSETUP
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
	iocmdSSHTDWN
	set r
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -peername, or -sockname}}
test iocmd-8.16 {fconfigure command / tcp channel} {socket} {
	iocmdSSETUP
	set r [expr [lindex [fconfigure $cli -peername] 2]==$port]
	iocmdSSHTDWN
	set r
} 1
test iocmd-8.17 {fconfigure command / tcp channel} {nonPortable} {
	# It is possible that you don't get the connection reset by peer
        # error but rather a valid answer. depends of the tcp implementation
	iocmdSSETUP
	update;
	puts $cli "blah"; flush $cli; # that flush could/should fail too
	update;
	set r [catch {fconfigure $cli -peername} msg]
	iocmdSSHTDWN
	regsub -all {can([^:])+: } $r {} r;
	set r
} 1
test iocmd-8.18 {fconfigure command / unix tty channel} {nonPortable unixOnly} {
	# might fail if /dev/ttya is unavailable
	set tty [open /dev/ttya]
	set r [list [catch {fconfigure $tty -blah blih} msg] $msg];
	close $tty;
	set r;
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, or -mode}}
test iocmd-8.19 {fconfigure command / win tty channel} {nonPortable pcOnly} {
	# might fail if com1 is unavailable
	set tty [open com1]
	set r [list [catch {fconfigure $tty -blah blih} msg] $msg];
	close $tty;
	set r;
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -mode, or -pollinterval}}

test iocmd-9.1 {eof command} {
    list [catch {eof} msg] $msg $errorCode
} {1 {wrong # args: should be "eof channelId"} NONE}
test iocmd-9.2 {eof command} {
    list [catch {eof a b} msg] $msg $errorCode
} {1 {wrong # args: should be "eof channelId"} NONE}
test iocmd-9.3 {eof command} {
    catch {close file100}
    list [catch {eof file100} msg] $msg $errorCode
} {1 {can not find channel named "file100"} NONE}

# The tests for Tcl_ExecObjCmd are in exec.test

test iocmd-10.1 {fblocked command} {
    list [catch {fblocked} msg] $msg
} {1 {wrong # args: should be "fblocked channelId"}}
test iocmd-10.2 {fblocked command} {
    list [catch {fblocked a b c d e f g} msg] $msg
} {1 {wrong # args: should be "fblocked channelId"}}
test iocmd-10.3 {fblocked command} {
    list [catch {fblocked file1000} msg] $msg
} {1 {can not find channel named "file1000"}}
test iocmd-10.4 {fblocked command} {
    list [catch {fblocked stdout} msg] $msg
} {1 {channel "stdout" wasn't opened for reading}}
test iocmd-10.5 {fblocked command} {
    fblocked stdin
} 0

set path(test4) [makeFile {} test4]
set path(test5) [makeFile {} test5]

removeFile test5
test iocmd-11.1 {I/O to command pipelines} {unixOrPc unixExecs} {
    set f [open $path(test4) w]
    close $f
    list [catch {open "| cat < $path(test4) > $path(test5)" w} msg] $msg $errorCode
} {1 {can't write input to command: standard input was redirected} NONE}
test iocmd-11.2 {I/O to command pipelines} {unixOrPc unixExecs} {
    list [catch {open "| echo > $path(test5)" r} msg] $msg $errorCode
} {1 {can't read output from command: standard output was redirected} NONE}
test iocmd-11.3 {I/O to command pipelines} {unixOrPc unixExecs} {
    list [catch {open "| echo > $path(test5)" r+} msg] $msg $errorCode
} {1 {can't read output from command: standard output was redirected} NONE}

test iocmd-12.1 {POSIX open access modes: RDONLY} {
    removeFile test1
    set f [open $path(test1) w]
    puts $f "Two lines: this one"
    puts $f "and this one"
    close $f
    set f [open $path(test1) RDONLY]
    set x [list [gets $f] [catch {puts $f Test} msg] $msg]
    close $f
    string compare $x \
	"{Two lines: this one} 1 [list [format "channel \"%s\" wasn't opened for writing" $f]]"
} 0
test iocmd-12.2 {POSIX open access modes: RDONLY} {
    removeFile test3
    set msg [list [catch {open $path(test3) RDONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
} {1 {couldn't open "test3": no such file or directory}}
test iocmd-12.3 {POSIX open access modes: WRONLY} {
    removeFile test3
    set msg [list [catch {open $path(test3) WRONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
} {1 {couldn't open "test3": no such file or directory}}
#
# Test 13.4 relies on assigning the same channel name twice.
#
test iocmd-12.4 {POSIX open access modes: WRONLY} {unixOnly} {
    removeFile test3
    set f [open $path(test3) w]
    fconfigure $f -eofchar {}
    puts $f xyzzy
    close $f
    set f [open $path(test3) WRONLY]
    fconfigure $f -eofchar {}
    puts -nonewline $f "ab"
    seek $f 0 current
    set x [list [catch {gets $f} msg] $msg]
    close $f
    set f [open $path(test3) r]
    fconfigure $f -eofchar {}
    lappend x [gets $f]
    close $f
    set y [list 1 [format "channel \"%s\" wasn't opened for reading" $f] abzzy]
    string compare $x $y
} 0
test iocmd-12.5 {POSIX open access modes: RDWR} {
    removeFile test3
    set msg [list [catch {open $path(test3) RDWR} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
} {1 {couldn't open "test3": no such file or directory}}
test iocmd-12.6 {POSIX open access modes: errors} {
    concat [catch {open $path(test3) "FOO \{BAR BAZ"} msg] $msg\n$errorInfo
} "1 unmatched open brace in list
unmatched open brace in list
    while processing open access modes \"FOO {BAR BAZ\"
    invoked from within
\"open \$path(test3) \"FOO \\{BAR BAZ\"\""
test iocmd-12.7 {POSIX open access modes: errors} {
  list [catch {open $path(test3) {FOO BAR BAZ}} msg] $msg
} {1 {invalid access mode "FOO": must be RDONLY, WRONLY, RDWR, APPEND, CREAT EXCL, NOCTTY, NONBLOCK, or TRUNC}}
test iocmd-12.8 {POSIX open access modes: errors} {
    list [catch {open $path(test3) {TRUNC CREAT}} msg] $msg
} {1 {access mode must include either RDONLY, WRONLY, or RDWR}}

test iocmd-13.1 {errors in open command} {
    list [catch {open} msg] $msg
} {1 {wrong # args: should be "open fileName ?access? ?permissions?"}}
test iocmd-13.2 {errors in open command} {
    list [catch {open a b c d} msg] $msg
} {1 {wrong # args: should be "open fileName ?access? ?permissions?"}}
test iocmd-13.3 {errors in open command} {
    list [catch {open $path(test1) x} msg] $msg
} {1 {illegal access mode "x"}}
test iocmd-13.4 {errors in open command} {
    list [catch {open $path(test1) rw} msg] $msg
} {1 {illegal access mode "rw"}}
test iocmd-13.5 {errors in open command} {
    list [catch {open $path(test1) r+1} msg] $msg
} {1 {illegal access mode "r+1"}}
test iocmd-13.6 {errors in open command} {
    set msg [list [catch {open _non_existent_} msg] $msg $errorCode]
    regsub [file join {} _non_existent_] $msg "_non_existent_" msg
	string tolower $msg
} {1 {couldn't open "_non_existent_": no such file or directory} {posix enoent {no such file or directory}}}

test iocmd-14.1 {file id parsing errors} {
    list [catch {eof gorp} msg] $msg $errorCode
} {1 {can not find channel named "gorp"} NONE}
test iocmd-14.2 {file id parsing errors} {
    list [catch {eof filex} msg] $msg
} {1 {can not find channel named "filex"}}
test iocmd-14.3 {file id parsing errors} {
    list [catch {eof file12a} msg] $msg
} {1 {can not find channel named "file12a"}}
test iocmd-14.4 {file id parsing errors} {
    list [catch {eof file123} msg] $msg
} {1 {can not find channel named "file123"}}
test iocmd-14.5 {file id parsing errors} {
    list [catch {eof stdout} msg] $msg
} {0 0}
test iocmd-14.6 {file id parsing errors} {
    list [catch {eof stdin} msg] $msg
} {0 0}
test iocmd-14.7 {file id parsing errors} {
    list [catch {eof stdout} msg] $msg
} {0 0}
test iocmd-14.8 {file id parsing errors} {
    list [catch {eof stderr} msg] $msg
} {0 0}
test iocmd-14.9 {file id parsing errors} {
    list [catch {eof stderr1} msg] $msg
} {1 {can not find channel named "stderr1"}}

set f [open $path(test1) w]
close $f

set expect "1 {can not find channel named \"$f\"}"
test iocmd-14.10 {file id parsing errors} {
    list [catch {eof $f} msg] $msg
} $expect

test iocmd-15.1 {Tcl_FcopyObjCmd} {
    list [catch {fcopy} msg] $msg
} {1 {wrong # args: should be "fcopy input output ?-size size? ?-command callback?"}}
test iocmd-15.2 {Tcl_FcopyObjCmd} {
    list [catch {fcopy 1} msg] $msg
} {1 {wrong # args: should be "fcopy input output ?-size size? ?-command callback?"}}
test iocmd-15.3 {Tcl_FcopyObjCmd} {
    list [catch {fcopy 1 2 3 4 5 6 7} msg] $msg
} {1 {wrong # args: should be "fcopy input output ?-size size? ?-command callback?"}}
test iocmd-15.4 {Tcl_FcopyObjCmd} {
    list [catch {fcopy 1 2 3} msg] $msg
} {1 {wrong # args: should be "fcopy input output ?-size size? ?-command callback?"}}
test iocmd-15.5 {Tcl_FcopyObjCmd} {
    list [catch {fcopy 1 2 3 4 5} msg] $msg
} {1 {wrong # args: should be "fcopy input output ?-size size? ?-command callback?"}}

set path(test2) [makeFile {} test2]

set f [open $path(test1) w]
close $f

set rfile [open $path(test1) r]
set wfile [open $path(test2) w]

test iocmd-15.6 {Tcl_FcopyObjCmd} {
    list [catch {fcopy foo $wfile} msg] $msg
} {1 {can not find channel named "foo"}}
test iocmd-15.7 {Tcl_FcopyObjCmd} {
    list [catch {fcopy $rfile foo} msg] $msg
} {1 {can not find channel named "foo"}}
test iocmd-15.8 {Tcl_FcopyObjCmd} {
    list [catch {fcopy $wfile $wfile} msg] $msg
} "1 {channel \"$wfile\" wasn't opened for reading}"
test iocmd-15.9 {Tcl_FcopyObjCmd} {
    list [catch {fcopy $rfile $rfile} msg] $msg
} "1 {channel \"$rfile\" wasn't opened for writing}"
test iocmd-15.10 {Tcl_FcopyObjCmd} {
    list [catch {fcopy $rfile $wfile foo bar} msg] $msg
} {1 {bad switch "foo": must be -size or -command}}
test iocmd-15.11 {Tcl_FcopyObjCmd} {
    list [catch {fcopy $rfile $wfile -size foo} msg] $msg
} {1 {expected integer but got "foo"}}
test iocmd-15.12 {Tcl_FcopyObjCmd} {
    list [catch {fcopy $rfile $wfile -command bar -size foo} msg] $msg
} {1 {expected integer but got "foo"}}

close $rfile
close $wfile

# cleanup
foreach file [list test1 test2 test3 test4] {
    catch {::tcltest::removeFile $file}
}
# delay long enough for background processes to finish
after 500
foreach file [list test5 pipe output] {
    catch {::tcltest::removeFile $file}
}
::tcltest::cleanupTests
return
@


1.4
log
@touched all sources to ease next import
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: ioCmd.test,v 1.6.8.2 2000/09/15 16:56:46 spolk Exp $
a24 2
set executable [list [info nameofexecutable]]

d40 3
d44 1
a44 1
    set f [open test1 w]
d48 1
a48 1
    file size test1
d51 1
a51 1
    set f [open test1 w]
d55 1
a55 1
    file size test1
d58 1
a58 1
    set f [open test1 w]
d62 1
a62 1
    file size test1
d92 1
a92 1
    set f [open test1 w]
d95 1
a95 1
    set f [open test1 r]
d126 1
a126 1
    set f [open test1 w]
d130 1
a130 1
    set f [open test1]
d141 3
d145 1
a145 1
    set f [open test3 w]
d152 1
a152 1
    set f [open test1]
d202 1
a202 1
    set f1 [open test1 w]
d215 1
a215 1
    set f1 [open test1 w]
d223 1
a223 1
    set f1 [open test1 w]
d234 1
a234 1
    set f1 [open test1 w]
d244 3
d248 4
a251 1
    list [catch {fconfigure stdout -froboz blarfo} msg] $msg
d253 1
d255 4
a258 1
    list [catch {fconfigure stdout -b blarfo} msg] $msg
d260 1
d262 4
a265 1
    list [catch {fconfigure stdout -buffer blarfo} msg] $msg
d267 3
d273 1
d275 3
a277 3
  uplevel {
	set srv [socket -server iocmdSRV 0];
	set port [lindex [fconfigure $srv -sockname] 2];
d279 2
a280 2
	set cli [socket 127.0.0.1 $port];
  }
d283 3
a285 3
  uplevel {
	close $cli;
	close $srv;
d288 1
a288 1
  }
d291 7
a297 1
test iocmd-8.15 {fconfigure command / tcp channel} {socket} {
d299 1
a299 1
	set r [list [catch {fconfigure $cli -blah} msg] $msg];
d301 1
a301 1
	set r;
d305 1
a305 1
	set r [expr [lindex [fconfigure $cli -peername] 2]==$port];
d365 3
d370 1
a370 1
    set f [open test4 w]
d372 1
a372 1
    list [catch {open "| cat < test4 > test5" w} msg] $msg $errorCode
d375 1
a375 1
    list [catch {open "| echo > test5" r} msg] $msg $errorCode
d378 1
a378 1
    list [catch {open "| echo > test5" r+} msg] $msg $errorCode
d383 1
a383 1
    set f [open test1 w]
d387 1
a387 1
    set f [open test1 RDONLY]
d395 3
a397 1
    string tolower [list [catch {open test3 RDONLY} msg] $msg]
d401 3
a403 1
    string tolower [list [catch {open test3 WRONLY} msg] $msg]
d410 1
a410 1
    set f [open test3 w]
d414 1
a414 1
    set f [open test3 WRONLY]
d420 1
a420 1
    set f [open test3 r]
d429 3
a431 1
    string tolower [list [catch {open test3 RDWR} msg] $msg]
d434 1
a434 1
    concat [catch {open test3 "FOO \{BAR BAZ"} msg] $msg\n$errorInfo
d439 1
a439 1
\"open test3 \"FOO \\{BAR BAZ\"\""
d441 1
a441 1
  list [catch {open test3 {FOO BAR BAZ}} msg] $msg
d444 1
a444 1
    list [catch {open test3 {TRUNC CREAT}} msg] $msg
d454 1
a454 1
    list [catch {open test1 x} msg] $msg
d457 1
a457 1
    list [catch {open test1 rw} msg] $msg
d460 1
a460 1
    list [catch {open test1 r+1} msg] $msg
d463 3
a465 1
    string tolower [list [catch {open _non_existent_} msg] $msg $errorCode]
d495 2
a496 1
set f [open test1 w]
d498 1
d519 4
a522 1
set f [open test1 w]
d524 4
a527 2
set rfile [open test1 r]
set wfile [open test2 w]
d555 1
a555 1
    ::tcltest::removeFile $file
d560 1
a560 1
    ::tcltest::removeFile $file
a563 13













@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: ioCmd.test,v 1.15 2002/07/10 11:56:44 dgp Exp $
d25 2
a41 3

set path(test1) [makeFile {} test1]

d43 1
a43 1
    set f [open $path(test1) w]
d47 1
a47 1
    file size $path(test1)
d50 1
a50 1
    set f [open $path(test1) w]
d54 1
a54 1
    file size $path(test1)
d57 1
a57 1
    set f [open $path(test1) w]
d61 1
a61 1
    file size $path(test1)
d91 1
a91 1
    set f [open $path(test1) w]
d94 1
a94 1
    set f [open $path(test1) r]
d125 1
a125 1
    set f [open $path(test1) w]
d129 1
a129 1
    set f [open $path(test1)]
a139 3

set path(test3) [makeFile {} test3]

d141 1
a141 1
    set f [open $path(test3) w]
d148 1
a148 1
    set f [open $path(test1)]
d198 1
a198 1
    set f1 [open $path(test1) w]
d211 1
a211 1
    set f1 [open $path(test1) w]
d219 1
a219 1
    set f1 [open $path(test1) w]
d230 1
a230 1
    set f1 [open $path(test1) w]
a239 3

set path(fconfigure.dummy) [makeFile {} fconfigure.dummy]

d241 1
a241 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -froboz blarfo} msg] $msg]
    close $chan
    set res
a242 1

d244 1
a244 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -b blarfo} msg] $msg]
    close $chan
    set res
a245 1

d247 1
a247 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -buffer blarfo} msg] $msg]
    close $chan
    set res
a248 3

removeFile fconfigure.dummy

a251 1

d253 3
a255 3
    uplevel {
	set srv [socket -server iocmdSRV 0]
	set port [lindex [fconfigure $srv -sockname] 2]
d257 2
a258 2
	set cli [socket 127.0.0.1 $port]
    }
d261 3
a263 3
    uplevel {
	close $cli
	close $srv
d266 1
a266 1
    }
d269 1
a269 1
test iocmd-8.15.0 {fconfigure command / tcp channel} {socket macOnly} {
d271 1
a271 1
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
d273 1
a273 7
	set r
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -error, -peername, or -sockname}}
test iocmd-8.15.1 {fconfigure command / tcp channel} {socket unixOrPc} {
	iocmdSSETUP
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
	iocmdSSHTDWN
	set r
d277 1
a277 1
	set r [expr [lindex [fconfigure $cli -peername] 2]==$port]
a336 3
set path(test4) [makeFile {} test4]
set path(test5) [makeFile {} test5]

d339 1
a339 1
    set f [open $path(test4) w]
d341 1
a341 1
    list [catch {open "| cat < $path(test4) > $path(test5)" w} msg] $msg $errorCode
d344 1
a344 1
    list [catch {open "| echo > $path(test5)" r} msg] $msg $errorCode
d347 1
a347 1
    list [catch {open "| echo > $path(test5)" r+} msg] $msg $errorCode
d352 1
a352 1
    set f [open $path(test1) w]
d356 1
a356 1
    set f [open $path(test1) RDONLY]
d364 1
a364 3
    set msg [list [catch {open $path(test3) RDONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d368 1
a368 3
    set msg [list [catch {open $path(test3) WRONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d375 1
a375 1
    set f [open $path(test3) w]
d379 1
a379 1
    set f [open $path(test3) WRONLY]
d385 1
a385 1
    set f [open $path(test3) r]
d394 1
a394 3
    set msg [list [catch {open $path(test3) RDWR} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d397 1
a397 1
    concat [catch {open $path(test3) "FOO \{BAR BAZ"} msg] $msg\n$errorInfo
d402 1
a402 1
\"open \$path(test3) \"FOO \\{BAR BAZ\"\""
d404 1
a404 1
  list [catch {open $path(test3) {FOO BAR BAZ}} msg] $msg
d407 1
a407 1
    list [catch {open $path(test3) {TRUNC CREAT}} msg] $msg
d417 1
a417 1
    list [catch {open $path(test1) x} msg] $msg
d420 1
a420 1
    list [catch {open $path(test1) rw} msg] $msg
d423 1
a423 1
    list [catch {open $path(test1) r+1} msg] $msg
d426 1
a426 3
    set msg [list [catch {open _non_existent_} msg] $msg $errorCode]
    regsub [file join {} _non_existent_] $msg "_non_existent_" msg
	string tolower $msg
d456 1
a456 2

set f [open $path(test1) w]
a457 1

d478 1
a478 4

set path(test2) [makeFile {} test2]

set f [open $path(test1) w]
d480 2
a481 4

set rfile [open $path(test1) r]
set wfile [open $path(test2) w]

d509 1
a509 1
    catch {::tcltest::removeFile $file}
d514 1
a514 1
    catch {::tcltest::removeFile $file}
d518 13
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: ioCmd.test,v 1.15 2002/07/10 11:56:44 dgp Exp $
d25 2
a41 3

set path(test1) [makeFile {} test1]

d43 1
a43 1
    set f [open $path(test1) w]
d47 1
a47 1
    file size $path(test1)
d50 1
a50 1
    set f [open $path(test1) w]
d54 1
a54 1
    file size $path(test1)
d57 1
a57 1
    set f [open $path(test1) w]
d61 1
a61 1
    file size $path(test1)
d91 1
a91 1
    set f [open $path(test1) w]
d94 1
a94 1
    set f [open $path(test1) r]
d125 1
a125 1
    set f [open $path(test1) w]
d129 1
a129 1
    set f [open $path(test1)]
a139 3

set path(test3) [makeFile {} test3]

d141 1
a141 1
    set f [open $path(test3) w]
d148 1
a148 1
    set f [open $path(test1)]
d198 1
a198 1
    set f1 [open $path(test1) w]
d211 1
a211 1
    set f1 [open $path(test1) w]
d219 1
a219 1
    set f1 [open $path(test1) w]
d230 1
a230 1
    set f1 [open $path(test1) w]
a239 3

set path(fconfigure.dummy) [makeFile {} fconfigure.dummy]

d241 1
a241 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -froboz blarfo} msg] $msg]
    close $chan
    set res
a242 1

d244 1
a244 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -b blarfo} msg] $msg]
    close $chan
    set res
a245 1

d247 1
a247 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -buffer blarfo} msg] $msg]
    close $chan
    set res
a248 3

removeFile fconfigure.dummy

a251 1

d253 3
a255 3
    uplevel {
	set srv [socket -server iocmdSRV 0]
	set port [lindex [fconfigure $srv -sockname] 2]
d257 2
a258 2
	set cli [socket 127.0.0.1 $port]
    }
d261 3
a263 3
    uplevel {
	close $cli
	close $srv
d266 1
a266 1
    }
d269 1
a269 1
test iocmd-8.15.0 {fconfigure command / tcp channel} {socket macOnly} {
d271 1
a271 1
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
d273 1
a273 7
	set r
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -error, -peername, or -sockname}}
test iocmd-8.15.1 {fconfigure command / tcp channel} {socket unixOrPc} {
	iocmdSSETUP
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
	iocmdSSHTDWN
	set r
d277 1
a277 1
	set r [expr [lindex [fconfigure $cli -peername] 2]==$port]
a336 3
set path(test4) [makeFile {} test4]
set path(test5) [makeFile {} test5]

d339 1
a339 1
    set f [open $path(test4) w]
d341 1
a341 1
    list [catch {open "| cat < $path(test4) > $path(test5)" w} msg] $msg $errorCode
d344 1
a344 1
    list [catch {open "| echo > $path(test5)" r} msg] $msg $errorCode
d347 1
a347 1
    list [catch {open "| echo > $path(test5)" r+} msg] $msg $errorCode
d352 1
a352 1
    set f [open $path(test1) w]
d356 1
a356 1
    set f [open $path(test1) RDONLY]
d364 1
a364 3
    set msg [list [catch {open $path(test3) RDONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d368 1
a368 3
    set msg [list [catch {open $path(test3) WRONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d375 1
a375 1
    set f [open $path(test3) w]
d379 1
a379 1
    set f [open $path(test3) WRONLY]
d385 1
a385 1
    set f [open $path(test3) r]
d394 1
a394 3
    set msg [list [catch {open $path(test3) RDWR} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d397 1
a397 1
    concat [catch {open $path(test3) "FOO \{BAR BAZ"} msg] $msg\n$errorInfo
d402 1
a402 1
\"open \$path(test3) \"FOO \\{BAR BAZ\"\""
d404 1
a404 1
  list [catch {open $path(test3) {FOO BAR BAZ}} msg] $msg
d407 1
a407 1
    list [catch {open $path(test3) {TRUNC CREAT}} msg] $msg
d417 1
a417 1
    list [catch {open $path(test1) x} msg] $msg
d420 1
a420 1
    list [catch {open $path(test1) rw} msg] $msg
d423 1
a423 1
    list [catch {open $path(test1) r+1} msg] $msg
d426 1
a426 3
    set msg [list [catch {open _non_existent_} msg] $msg $errorCode]
    regsub [file join {} _non_existent_] $msg "_non_existent_" msg
	string tolower $msg
d456 1
a456 2

set f [open $path(test1) w]
a457 1

d478 1
a478 4

set path(test2) [makeFile {} test2]

set f [open $path(test1) w]
d480 2
a481 4

set rfile [open $path(test1) r]
set wfile [open $path(test2) w]

d509 1
a509 1
    catch {::tcltest::removeFile $file}
d514 1
a514 1
    catch {::tcltest::removeFile $file}
d518 13
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d25 2
a41 3

set path(test1) [makeFile {} test1]

d43 1
a43 1
    set f [open $path(test1) w]
d47 1
a47 1
    file size $path(test1)
d50 1
a50 1
    set f [open $path(test1) w]
d54 1
a54 1
    file size $path(test1)
d57 1
a57 1
    set f [open $path(test1) w]
d61 1
a61 1
    file size $path(test1)
d91 1
a91 1
    set f [open $path(test1) w]
d94 1
a94 1
    set f [open $path(test1) r]
d125 1
a125 1
    set f [open $path(test1) w]
d129 1
a129 1
    set f [open $path(test1)]
a139 3

set path(test3) [makeFile {} test3]

d141 1
a141 1
    set f [open $path(test3) w]
d148 1
a148 1
    set f [open $path(test1)]
d198 1
a198 1
    set f1 [open $path(test1) w]
d211 1
a211 1
    set f1 [open $path(test1) w]
d219 1
a219 1
    set f1 [open $path(test1) w]
d230 1
a230 1
    set f1 [open $path(test1) w]
a239 3

set path(fconfigure.dummy) [makeFile {} fconfigure.dummy]

d241 1
a241 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -froboz blarfo} msg] $msg]
    close $chan
    set res
a242 1

d244 1
a244 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -b blarfo} msg] $msg]
    close $chan
    set res
a245 1

d247 1
a247 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -buffer blarfo} msg] $msg]
    close $chan
    set res
a248 3

removeFile fconfigure.dummy

a251 1

d253 3
a255 3
    uplevel {
	set srv [socket -server iocmdSRV 0]
	set port [lindex [fconfigure $srv -sockname] 2]
d257 2
a258 2
	set cli [socket 127.0.0.1 $port]
    }
d261 3
a263 3
    uplevel {
	close $cli
	close $srv
d266 1
a266 1
    }
d269 1
a269 1
test iocmd-8.15.0 {fconfigure command / tcp channel} {socket macOnly} {
d271 1
a271 1
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
d273 1
a273 7
	set r
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -error, -peername, or -sockname}}
test iocmd-8.15.1 {fconfigure command / tcp channel} {socket unixOrPc} {
	iocmdSSETUP
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
	iocmdSSHTDWN
	set r
d277 1
a277 1
	set r [expr [lindex [fconfigure $cli -peername] 2]==$port]
a336 3
set path(test4) [makeFile {} test4]
set path(test5) [makeFile {} test5]

d339 1
a339 1
    set f [open $path(test4) w]
d341 1
a341 1
    list [catch {open "| cat < $path(test4) > $path(test5)" w} msg] $msg $errorCode
d344 1
a344 1
    list [catch {open "| echo > $path(test5)" r} msg] $msg $errorCode
d347 1
a347 1
    list [catch {open "| echo > $path(test5)" r+} msg] $msg $errorCode
d352 1
a352 1
    set f [open $path(test1) w]
d356 1
a356 1
    set f [open $path(test1) RDONLY]
d364 1
a364 3
    set msg [list [catch {open $path(test3) RDONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d368 1
a368 3
    set msg [list [catch {open $path(test3) WRONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d375 1
a375 1
    set f [open $path(test3) w]
d379 1
a379 1
    set f [open $path(test3) WRONLY]
d385 1
a385 1
    set f [open $path(test3) r]
d394 1
a394 3
    set msg [list [catch {open $path(test3) RDWR} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d397 1
a397 1
    concat [catch {open $path(test3) "FOO \{BAR BAZ"} msg] $msg\n$errorInfo
d402 1
a402 1
\"open \$path(test3) \"FOO \\{BAR BAZ\"\""
d404 1
a404 1
  list [catch {open $path(test3) {FOO BAR BAZ}} msg] $msg
d407 1
a407 1
    list [catch {open $path(test3) {TRUNC CREAT}} msg] $msg
d417 1
a417 1
    list [catch {open $path(test1) x} msg] $msg
d420 1
a420 1
    list [catch {open $path(test1) rw} msg] $msg
d423 1
a423 1
    list [catch {open $path(test1) r+1} msg] $msg
d426 1
a426 3
    set msg [list [catch {open _non_existent_} msg] $msg $errorCode]
    regsub [file join {} _non_existent_] $msg "_non_existent_" msg
	string tolower $msg
d456 1
a456 2

set f [open $path(test1) w]
a457 1

d478 1
a478 4

set path(test2) [makeFile {} test2]

set f [open $path(test1) w]
d480 2
a481 4

set rfile [open $path(test1) r]
set wfile [open $path(test2) w]

d509 1
a509 1
    catch {::tcltest::removeFile $file}
d514 1
a514 1
    catch {::tcltest::removeFile $file}
d518 13
@


1.1
log
@Initial revision
@
text
@d10 1
d15 1
a15 1
# RCS: @@(#) $Id: ioCmd.test,v 1.9 1999/01/26 03:53:32 jingham Exp $
d17 4
a20 1
if {[string compare test [info procs test]] == 1} then {source defs}
d104 1
a104 1
} {1 {wrong # args: should be "read channelId ?numBytes?" or "read ?-nonewline? channelId"}}
d107 1
a107 1
} {1 {wrong # args: should be "read channelId ?numBytes?" or "read ?-nonewline? channelId"}}
d113 1
a113 1
} {1 {wrong # args: should be "read channelId ?numBytes?" or "read ?-nonewline? channelId"}}
d133 1
a133 1
} {1 {wrong # args: should be "read channelId ?numBytes?" or "read ?-nonewline? channelId"} NONE}
d165 1
a165 1
} {1 {bad origin "gugu": should be start, current, or end}}
d202 1
a202 1
} {1 {bad option "froboz": should be one of -blocking, -buffering, -buffersize, -eofchar, or -translation}}
d212 1
a212 1
    fconfigure $f1 -translation lf -eofchar {}
d216 1
a216 1
} {-blocking 1 -buffering full -buffersize 4096 -eofchar {} -translation lf}
d221 1
a221 1
		-eofchar {}
d227 1
a227 1
} {line {-blocking 1 -buffering line -buffersize 3030 -eofchar {} -translation lf}}
d232 1
a232 1
		-eofchar {}
d236 1
a236 1
} {-blocking 1 -buffering none -buffersize 4040 -eofchar {} -translation lf}
d242 1
a242 1
} {1 {bad option "-froboz": should be one of -blocking, -buffering, -buffersize, -eofchar, or -translation}}
d245 1
a245 1
} {1 {bad option "-b": should be one of -blocking, -buffering, -buffersize, -eofchar, or -translation}}
d248 1
a248 1
} {1 {bad option "-buffer": should be one of -blocking, -buffering, -buffersize, -eofchar, or -translation}}
d257 1
a257 1
	set cli [socket localhost $port];
d274 1
a274 1
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -eofchar, -translation, -peername, or -sockname}}
d299 3
a301 4
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -eofchar, -translation, or -mode}}
test iocmd-8.19 {fconfigure command / win tty channel} {pcOnly && !win32s} {
	# None of the com port functions are implemented on Win32s.
	# Also, might fail if com1 is unavailable
d306 1
a306 1
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -eofchar, -translation, or -mode}}
d319 2
d496 1
a496 1
} {1 {bad switch "foo": must be -size, or -command}}
d507 4
a510 4
removeFile test1
removeFile test2
removeFile test3
removeFile test4
d513 18
a530 5
removeFile test5
removeFile pipe
removeFile output
set x ""
set x
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@a9 1
# Copyright (c) 1998-1999 by Scriptics Corporation.
d14 1
a14 1
# RCS: @@(#) $Id: ioCmd.test,v 1.6.8.2 2000/09/15 16:56:46 spolk Exp $
d16 1
a16 4
if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}
d100 1
a100 1
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"}}
d103 1
a103 1
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"}}
d109 1
a109 1
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"}}
d129 1
a129 1
} {1 {wrong # args: should be "read channelId ?numChars?" or "read ?-nonewline? channelId"} NONE}
d161 1
a161 1
} {1 {bad origin "gugu": must be start, current, or end}}
d198 1
a198 1
} {1 {bad option "froboz": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}
d208 1
a208 1
    fconfigure $f1 -translation lf -eofchar {} -encoding unicode
d212 1
a212 1
} {-blocking 1 -buffering full -buffersize 4096 -encoding unicode -eofchar {} -translation lf}
d217 1
a217 1
		-eofchar {} -encoding unicode
d223 1
a223 1
} {line {-blocking 1 -buffering line -buffersize 3030 -encoding unicode -eofchar {} -translation lf}}
d228 1
a228 1
		-eofchar {} -encoding binary
d232 1
a232 1
} {-blocking 1 -buffering none -buffersize 4040 -encoding binary -eofchar {} -translation lf}
d238 1
a238 1
} {1 {bad option "-froboz": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}
d241 1
a241 1
} {1 {bad option "-b": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}
d244 1
a244 1
} {1 {bad option "-buffer": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, or -translation}}
d253 1
a253 1
	set cli [socket 127.0.0.1 $port];
d270 1
a270 1
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -peername, or -sockname}}
d295 4
a298 3
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, or -mode}}
test iocmd-8.19 {fconfigure command / win tty channel} {nonPortable pcOnly} {
	# might fail if com1 is unavailable
d303 1
a303 1
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -mode, or -pollinterval}}
a315 2
# The tests for Tcl_ExecObjCmd are in exec.test

d491 1
a491 1
} {1 {bad switch "foo": must be -size or -command}}
d502 4
a505 4
# cleanup
foreach file [list test1 test2 test3 test4] {
    ::tcltest::removeFile $file
}
d508 5
a512 18
foreach file [list test5 pipe output] {
    ::tcltest::removeFile $file
}
::tcltest::cleanupTests
return













@


1.1.1.3
log
@import tcl 8.4.0
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: ioCmd.test,v 1.15 2002/07/10 11:56:44 dgp Exp $
d25 2
a41 3

set path(test1) [makeFile {} test1]

d43 1
a43 1
    set f [open $path(test1) w]
d47 1
a47 1
    file size $path(test1)
d50 1
a50 1
    set f [open $path(test1) w]
d54 1
a54 1
    file size $path(test1)
d57 1
a57 1
    set f [open $path(test1) w]
d61 1
a61 1
    file size $path(test1)
d91 1
a91 1
    set f [open $path(test1) w]
d94 1
a94 1
    set f [open $path(test1) r]
d125 1
a125 1
    set f [open $path(test1) w]
d129 1
a129 1
    set f [open $path(test1)]
a139 3

set path(test3) [makeFile {} test3]

d141 1
a141 1
    set f [open $path(test3) w]
d148 1
a148 1
    set f [open $path(test1)]
d198 1
a198 1
    set f1 [open $path(test1) w]
d211 1
a211 1
    set f1 [open $path(test1) w]
d219 1
a219 1
    set f1 [open $path(test1) w]
d230 1
a230 1
    set f1 [open $path(test1) w]
a239 3

set path(fconfigure.dummy) [makeFile {} fconfigure.dummy]

d241 1
a241 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -froboz blarfo} msg] $msg]
    close $chan
    set res
a242 1

d244 1
a244 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -b blarfo} msg] $msg]
    close $chan
    set res
a245 1

d247 1
a247 4
    set chan [open $path(fconfigure.dummy) r]
    set res [list [catch {fconfigure $chan -buffer blarfo} msg] $msg]
    close $chan
    set res
a248 3

removeFile fconfigure.dummy

a251 1

d253 3
a255 3
    uplevel {
	set srv [socket -server iocmdSRV 0]
	set port [lindex [fconfigure $srv -sockname] 2]
d257 2
a258 2
	set cli [socket 127.0.0.1 $port]
    }
d261 3
a263 3
    uplevel {
	close $cli
	close $srv
d266 1
a266 1
    }
d269 1
a269 1
test iocmd-8.15.0 {fconfigure command / tcp channel} {socket macOnly} {
d271 1
a271 1
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
d273 1
a273 7
	set r
} {1 {bad option "-blah": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -error, -peername, or -sockname}}
test iocmd-8.15.1 {fconfigure command / tcp channel} {socket unixOrPc} {
	iocmdSSETUP
	set r [list [catch {fconfigure $cli -blah} msg] $msg]
	iocmdSSHTDWN
	set r
d277 1
a277 1
	set r [expr [lindex [fconfigure $cli -peername] 2]==$port]
a336 3
set path(test4) [makeFile {} test4]
set path(test5) [makeFile {} test5]

d339 1
a339 1
    set f [open $path(test4) w]
d341 1
a341 1
    list [catch {open "| cat < $path(test4) > $path(test5)" w} msg] $msg $errorCode
d344 1
a344 1
    list [catch {open "| echo > $path(test5)" r} msg] $msg $errorCode
d347 1
a347 1
    list [catch {open "| echo > $path(test5)" r+} msg] $msg $errorCode
d352 1
a352 1
    set f [open $path(test1) w]
d356 1
a356 1
    set f [open $path(test1) RDONLY]
d364 1
a364 3
    set msg [list [catch {open $path(test3) RDONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d368 1
a368 3
    set msg [list [catch {open $path(test3) WRONLY} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d375 1
a375 1
    set f [open $path(test3) w]
d379 1
a379 1
    set f [open $path(test3) WRONLY]
d385 1
a385 1
    set f [open $path(test3) r]
d394 1
a394 3
    set msg [list [catch {open $path(test3) RDWR} msg] $msg]
    regsub [file join {} $path(test3)] $msg "test3" msg
	string tolower $msg
d397 1
a397 1
    concat [catch {open $path(test3) "FOO \{BAR BAZ"} msg] $msg\n$errorInfo
d402 1
a402 1
\"open \$path(test3) \"FOO \\{BAR BAZ\"\""
d404 1
a404 1
  list [catch {open $path(test3) {FOO BAR BAZ}} msg] $msg
d407 1
a407 1
    list [catch {open $path(test3) {TRUNC CREAT}} msg] $msg
d417 1
a417 1
    list [catch {open $path(test1) x} msg] $msg
d420 1
a420 1
    list [catch {open $path(test1) rw} msg] $msg
d423 1
a423 1
    list [catch {open $path(test1) r+1} msg] $msg
d426 1
a426 3
    set msg [list [catch {open _non_existent_} msg] $msg $errorCode]
    regsub [file join {} _non_existent_] $msg "_non_existent_" msg
	string tolower $msg
d456 1
a456 2

set f [open $path(test1) w]
a457 1

d478 1
a478 4

set path(test2) [makeFile {} test2]

set f [open $path(test1) w]
d480 2
a481 4

set rfile [open $path(test1) r]
set wfile [open $path(test2) w]

d509 1
a509 1
    catch {::tcltest::removeFile $file}
d514 1
a514 1
    catch {::tcltest::removeFile $file}
d518 13
@


