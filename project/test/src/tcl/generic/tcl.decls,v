head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.60
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.58
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.56
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.54
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.52
	gdb_7_0-branch:1.5.0.50
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.48
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.46
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.44
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.42
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.40
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.38
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.36
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.34
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.32
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.30
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.28
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.26
	gdb_5_1-2001-07-29-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.2
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.2
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TCL_8_4_0:1.1.1.2
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.40.01;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.47.51;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.02;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.04;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	2001.09.09.22.40.54;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.02;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.42;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.15;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.09;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	2001.09.09.22.40.54;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.19.56.13;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@# tcl.decls --
#
#	This file contains the declarations for all supported public
#	functions that are exported by the Tcl library via the stubs table.
#	This file is used to generate the tclDecls.h, tclPlatDecls.h,
#	tclStub.c, and tclPlatStub.c files.
#	
#
# Copyright (c) 1998-1999 by Scriptics Corporation.
# Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# RCS: @@(#) $Id: tcl.decls,v 1.94 2002/08/31 06:09:45 das Exp $

library tcl

# Define the tcl interface with several sub interfaces:
#     tclPlat	 - platform specific public
#     tclInt	 - generic private
#     tclPlatInt - platform specific private

interface tcl
hooks {tclPlat tclInt tclIntPlat}

# Declare each of the functions in the public Tcl interface.  Note that
# the an index should never be reused for a different function in order
# to preserve backwards compatibility.

declare 0 generic {
    int Tcl_PkgProvideEx(Tcl_Interp* interp, CONST char* name,
	    CONST char* version, ClientData clientData)
}
declare 1 generic {
    CONST84_RETURN char * Tcl_PkgRequireEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
}
declare 2 generic {
    void Tcl_Panic(CONST char *format, ...)
}
declare 3 generic {
    char * Tcl_Alloc(unsigned int size)
}
declare 4 generic {
    void Tcl_Free(char *ptr)
}
declare 5 generic {
    char * Tcl_Realloc(char *ptr, unsigned int size)
}
declare 6 generic {
    char * Tcl_DbCkalloc(unsigned int size, CONST char *file, int line)
}
declare 7 generic {
    int Tcl_DbCkfree(char *ptr, CONST char *file, int line)
}
declare 8 generic {
    char * Tcl_DbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
}

# Tcl_CreateFileHandler and Tcl_DeleteFileHandler are only available on unix,
# but they are part of the old generic interface, so we include them here for
# compatibility reasons.

declare 9 unix {
    void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc,
	    ClientData clientData)
}
declare 10 unix {
    void Tcl_DeleteFileHandler(int fd)
}

declare 11 generic {
    void Tcl_SetTimer(Tcl_Time *timePtr)
}
declare 12 generic {
    void Tcl_Sleep(int ms)
}
declare 13 generic {
    int Tcl_WaitForEvent(Tcl_Time *timePtr)
}
declare 14 generic {
    int Tcl_AppendAllObjTypes(Tcl_Interp *interp, Tcl_Obj *objPtr)
}
declare 15 generic {
    void Tcl_AppendStringsToObj(Tcl_Obj *objPtr, ...)
}
declare 16 generic {
    void Tcl_AppendToObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
}
declare 17 generic {
    Tcl_Obj * Tcl_ConcatObj(int objc, Tcl_Obj *CONST objv[])
}
declare 18 generic {
    int Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tcl_ObjType *typePtr)
}
declare 19 generic {
    void Tcl_DbDecrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
}
declare 20 generic {
    void Tcl_DbIncrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
}
declare 21 generic {
    int Tcl_DbIsShared(Tcl_Obj *objPtr, CONST char *file, int line)
}
declare 22 generic {
    Tcl_Obj * Tcl_DbNewBooleanObj(int boolValue, CONST char *file, int line)
}
declare 23 generic {
    Tcl_Obj * Tcl_DbNewByteArrayObj(CONST unsigned char *bytes, int length,
	    CONST char *file, int line)
}
declare 24 generic {
    Tcl_Obj * Tcl_DbNewDoubleObj(double doubleValue,
	    CONST char *file, int line)
}
declare 25 generic {
    Tcl_Obj * Tcl_DbNewListObj(int objc, Tcl_Obj *CONST *objv, 
	    CONST char *file, int line)
}
declare 26 generic {
    Tcl_Obj * Tcl_DbNewLongObj(long longValue, CONST char *file, int line)
}
declare 27 generic {
    Tcl_Obj * Tcl_DbNewObj(CONST char *file, int line)
}
declare 28 generic {
    Tcl_Obj * Tcl_DbNewStringObj(CONST char *bytes, int length,
	    CONST char *file, int line)
}
declare 29 generic {
    Tcl_Obj * Tcl_DuplicateObj(Tcl_Obj *objPtr)
}
declare 30 generic {
    void TclFreeObj(Tcl_Obj *objPtr)
}
declare 31 generic {
    int Tcl_GetBoolean(Tcl_Interp *interp, CONST char *str, int *boolPtr)
}
declare 32 generic {
    int Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    int *boolPtr)
}
declare 33 generic {
    unsigned char * Tcl_GetByteArrayFromObj(Tcl_Obj *objPtr, int *lengthPtr)
}
declare 34 generic {
    int Tcl_GetDouble(Tcl_Interp *interp, CONST char *str, double *doublePtr)
}
declare 35 generic {
    int Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    double *doublePtr)
}
declare 36 generic {
    int Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST84 char **tablePtr, CONST char *msg, int flags, int *indexPtr)
}
declare 37 generic {
    int Tcl_GetInt(Tcl_Interp *interp, CONST char *str, int *intPtr)
}
declare 38 generic {
    int Tcl_GetIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *intPtr)
}
declare 39 generic {
    int Tcl_GetLongFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, long *longPtr)
}
declare 40 generic {
    Tcl_ObjType * Tcl_GetObjType(CONST char *typeName)
}
declare 41 generic {
    char * Tcl_GetStringFromObj(Tcl_Obj *objPtr, int *lengthPtr)
}
declare 42 generic {
    void Tcl_InvalidateStringRep(Tcl_Obj *objPtr)
}
declare 43 generic {
    int Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    Tcl_Obj *elemListPtr)
}
declare 44 generic {
    int Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    Tcl_Obj *objPtr)
}
declare 45 generic {
    int Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    int *objcPtr, Tcl_Obj ***objvPtr)
}
declare 46 generic {
    int Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index,
	    Tcl_Obj **objPtrPtr)
}
declare 47 generic {
    int Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    int *lengthPtr)
}
declare 48 generic {
    int Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first,
	    int count, int objc, Tcl_Obj *CONST objv[])
}
declare 49 generic {
    Tcl_Obj *Tcl_NewBooleanObj(int boolValue)
}
declare 50 generic {
    Tcl_Obj *Tcl_NewByteArrayObj(CONST unsigned char* bytes, int length)
}
declare 51 generic {
    Tcl_Obj * Tcl_NewDoubleObj(double doubleValue)
}
declare 52 generic {
    Tcl_Obj * Tcl_NewIntObj(int intValue)
}
declare 53 generic {
    Tcl_Obj * Tcl_NewListObj(int objc, Tcl_Obj *CONST objv[])
}
declare 54 generic {
    Tcl_Obj * Tcl_NewLongObj(long longValue)
}
declare 55 generic {
    Tcl_Obj * Tcl_NewObj(void)
}
declare 56 generic {
    Tcl_Obj *Tcl_NewStringObj(CONST char *bytes, int length)
}
declare 57 generic {
    void Tcl_SetBooleanObj(Tcl_Obj *objPtr, int boolValue)
}
declare 58 generic {
    unsigned char * Tcl_SetByteArrayLength(Tcl_Obj *objPtr, int length)
}
declare 59 generic {
    void Tcl_SetByteArrayObj(Tcl_Obj *objPtr, CONST unsigned char *bytes,
	    int length)
}
declare 60 generic {
    void Tcl_SetDoubleObj(Tcl_Obj *objPtr, double doubleValue)
}
declare 61 generic {
    void Tcl_SetIntObj(Tcl_Obj *objPtr, int intValue)
}
declare 62 generic {
    void Tcl_SetListObj(Tcl_Obj *objPtr, int objc, Tcl_Obj *CONST objv[])
}
declare 63 generic {
    void Tcl_SetLongObj(Tcl_Obj *objPtr, long longValue)
}
declare 64 generic {
    void Tcl_SetObjLength(Tcl_Obj *objPtr, int length)
}
declare 65 generic {
    void Tcl_SetStringObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
}
declare 66 generic {
    void Tcl_AddErrorInfo(Tcl_Interp *interp, CONST char *message)
}
declare 67 generic {
    void Tcl_AddObjErrorInfo(Tcl_Interp *interp, CONST char *message,
	    int length)
}
declare 68 generic {
    void Tcl_AllowExceptions(Tcl_Interp *interp)
}
declare 69 generic {
    void Tcl_AppendElement(Tcl_Interp *interp, CONST char *string)
}
declare 70 generic {
    void Tcl_AppendResult(Tcl_Interp *interp, ...)
}
declare 71 generic {
    Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc,
	    ClientData clientData)
}
declare 72 generic {
    void Tcl_AsyncDelete(Tcl_AsyncHandler async)
}
declare 73 generic {
    int Tcl_AsyncInvoke(Tcl_Interp *interp, int code)
}
declare 74 generic {
    void Tcl_AsyncMark(Tcl_AsyncHandler async)
}
declare 75 generic {
    int Tcl_AsyncReady(void)
}
declare 76 generic {
    void Tcl_BackgroundError(Tcl_Interp *interp)
}
declare 77 generic {
    char Tcl_Backslash(CONST char *src, int *readPtr)
}
declare 78 generic {
    int Tcl_BadChannelOption(Tcl_Interp *interp, CONST char *optionName,
	    CONST char *optionList)
}
declare 79 generic {
    void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc,
	    ClientData clientData)
}
declare 80 generic {
    void Tcl_CancelIdleCall(Tcl_IdleProc *idleProc, ClientData clientData)
}
declare 81 generic {
    int Tcl_Close(Tcl_Interp *interp, Tcl_Channel chan)
}
declare 82 generic {
    int Tcl_CommandComplete(CONST char *cmd)
}
declare 83 generic {
    char * Tcl_Concat(int argc, CONST84 char * CONST *argv)
}
declare 84 generic {
    int Tcl_ConvertElement(CONST char *src, char *dst, int flags)
}
declare 85 generic {
    int Tcl_ConvertCountedElement(CONST char *src, int length, char *dst,
	    int flags)
}
declare 86 generic {
    int Tcl_CreateAlias(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int argc,
	    CONST84 char * CONST *argv)
}
declare 87 generic {
    int Tcl_CreateAliasObj(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int objc,
	    Tcl_Obj *CONST objv[])
}
declare 88 generic {
    Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr,
	    CONST char *chanName, ClientData instanceData, int mask)
}
declare 89 generic {
    void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask,
	    Tcl_ChannelProc *proc, ClientData clientData)
}
declare 90 generic {
    void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
	    ClientData clientData)
}
declare 91 generic {
    Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, CONST char *cmdName,
	    Tcl_CmdProc *proc, ClientData clientData,
	    Tcl_CmdDeleteProc *deleteProc)
}
declare 92 generic {
    void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc,
	    Tcl_EventCheckProc *checkProc, ClientData clientData)
}
declare 93 generic {
    void Tcl_CreateExitHandler(Tcl_ExitProc *proc, ClientData clientData)
}
declare 94 generic {
    Tcl_Interp * Tcl_CreateInterp(void)
}
declare 95 generic {
    void Tcl_CreateMathFunc(Tcl_Interp *interp, CONST char *name,
	    int numArgs, Tcl_ValueType *argTypes, 
	    Tcl_MathProc *proc, ClientData clientData)
}
declare 96 generic {
    Tcl_Command Tcl_CreateObjCommand(Tcl_Interp *interp,
	    CONST char *cmdName,
	    Tcl_ObjCmdProc *proc, ClientData clientData,
	    Tcl_CmdDeleteProc *deleteProc)
}
declare 97 generic {
    Tcl_Interp * Tcl_CreateSlave(Tcl_Interp *interp, CONST char *slaveName,
	    int isSafe)
}
declare 98 generic {
    Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds,
	    Tcl_TimerProc *proc, ClientData clientData)
}
declare 99 generic {
    Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level,
	    Tcl_CmdTraceProc *proc, ClientData clientData)
}
declare 100 generic {
    void Tcl_DeleteAssocData(Tcl_Interp *interp, CONST char *name)
}
declare 101 generic {
    void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc,
	    ClientData clientData)
}
declare 102 generic {
    void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
	    ClientData clientData)
}
declare 103 generic {
    int Tcl_DeleteCommand(Tcl_Interp *interp, CONST char *cmdName)
}
declare 104 generic {
    int Tcl_DeleteCommandFromToken(Tcl_Interp *interp, Tcl_Command command)
}
declare 105 generic {
    void Tcl_DeleteEvents(Tcl_EventDeleteProc *proc, ClientData clientData)
}
declare 106 generic {
    void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc,
	    Tcl_EventCheckProc *checkProc, ClientData clientData)
}
declare 107 generic {
    void Tcl_DeleteExitHandler(Tcl_ExitProc *proc, ClientData clientData)
}
declare 108 generic {
    void Tcl_DeleteHashEntry(Tcl_HashEntry *entryPtr)
}
declare 109 generic {
    void Tcl_DeleteHashTable(Tcl_HashTable *tablePtr)
}
declare 110 generic {
    void Tcl_DeleteInterp(Tcl_Interp *interp)
}
declare 111 {unix win} {
    void Tcl_DetachPids(int numPids, Tcl_Pid *pidPtr)
}
declare 112 generic {
    void Tcl_DeleteTimerHandler(Tcl_TimerToken token)
}
declare 113 generic {
    void Tcl_DeleteTrace(Tcl_Interp *interp, Tcl_Trace trace)
}
declare 114 generic {
    void Tcl_DontCallWhenDeleted(Tcl_Interp *interp,
	    Tcl_InterpDeleteProc *proc, ClientData clientData)
}
declare 115 generic {
    int Tcl_DoOneEvent(int flags)
}
declare 116 generic {
    void Tcl_DoWhenIdle(Tcl_IdleProc *proc, ClientData clientData)
}
declare 117 generic {
    char * Tcl_DStringAppend(Tcl_DString *dsPtr, CONST char *str, int length)
}
declare 118 generic {
    char * Tcl_DStringAppendElement(Tcl_DString *dsPtr, CONST char *string)
}
declare 119 generic {
    void Tcl_DStringEndSublist(Tcl_DString *dsPtr)
}
declare 120 generic {
    void Tcl_DStringFree(Tcl_DString *dsPtr)
}
declare 121 generic {
    void Tcl_DStringGetResult(Tcl_Interp *interp, Tcl_DString *dsPtr)
}
declare 122 generic {
    void Tcl_DStringInit(Tcl_DString *dsPtr)
}
declare 123 generic {
    void Tcl_DStringResult(Tcl_Interp *interp, Tcl_DString *dsPtr)
}
declare 124 generic {
    void Tcl_DStringSetLength(Tcl_DString *dsPtr, int length)
}
declare 125 generic {
    void Tcl_DStringStartSublist(Tcl_DString *dsPtr)
}
declare 126 generic {
    int Tcl_Eof(Tcl_Channel chan)
}
declare 127 generic {
    CONST84_RETURN char * Tcl_ErrnoId(void)
}
declare 128 generic {
    CONST84_RETURN char * Tcl_ErrnoMsg(int err)
}
declare 129 generic {
    int Tcl_Eval(Tcl_Interp *interp, CONST char *string)
}
# This is obsolete, use Tcl_FSEvalFile
declare 130 generic {
    int Tcl_EvalFile(Tcl_Interp *interp, CONST char *fileName)
}
declare 131 generic {
    int Tcl_EvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr)
}
declare 132 generic {
    void Tcl_EventuallyFree(ClientData clientData, Tcl_FreeProc *freeProc)
}
declare 133 generic {
    void Tcl_Exit(int status)
}
declare 134 generic {
    int Tcl_ExposeCommand(Tcl_Interp *interp, CONST char *hiddenCmdToken,
	    CONST char *cmdName)
}
declare 135 generic {
    int Tcl_ExprBoolean(Tcl_Interp *interp, CONST char *str, int *ptr)
}
declare 136 generic {
    int Tcl_ExprBooleanObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *ptr)
}
declare 137 generic {
    int Tcl_ExprDouble(Tcl_Interp *interp, CONST char *str, double *ptr)
}
declare 138 generic {
    int Tcl_ExprDoubleObj(Tcl_Interp *interp, Tcl_Obj *objPtr, double *ptr)
}
declare 139 generic {
    int Tcl_ExprLong(Tcl_Interp *interp, CONST char *str, long *ptr)
}
declare 140 generic {
    int Tcl_ExprLongObj(Tcl_Interp *interp, Tcl_Obj *objPtr, long *ptr)
}
declare 141 generic {
    int Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tcl_Obj **resultPtrPtr)
}
declare 142 generic {
    int Tcl_ExprString(Tcl_Interp *interp, CONST char *string)
}
declare 143 generic {
    void Tcl_Finalize(void)
}
declare 144 generic {
    void Tcl_FindExecutable(CONST char *argv0)
}
declare 145 generic {
    Tcl_HashEntry * Tcl_FirstHashEntry(Tcl_HashTable *tablePtr,
	    Tcl_HashSearch *searchPtr)
}
declare 146 generic {
    int Tcl_Flush(Tcl_Channel chan)
}
declare 147 generic {
    void Tcl_FreeResult(Tcl_Interp *interp)
}
declare 148 generic {
    int Tcl_GetAlias(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *argcPtr, CONST84 char ***argvPtr)
}
declare 149 generic {
    int Tcl_GetAliasObj(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *objcPtr, Tcl_Obj ***objv)
}
declare 150 generic {
    ClientData Tcl_GetAssocData(Tcl_Interp *interp, CONST char *name,
	    Tcl_InterpDeleteProc **procPtr)
}
declare 151 generic {
    Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, CONST char *chanName,
	    int *modePtr)
}
declare 152 generic {
    int Tcl_GetChannelBufferSize(Tcl_Channel chan)
}
declare 153 generic {
    int Tcl_GetChannelHandle(Tcl_Channel chan, int direction,
	    ClientData *handlePtr)
}
declare 154 generic {
    ClientData Tcl_GetChannelInstanceData(Tcl_Channel chan)
}
declare 155 generic {
    int Tcl_GetChannelMode(Tcl_Channel chan)
}
declare 156 generic {
    CONST84_RETURN char * Tcl_GetChannelName(Tcl_Channel chan)
}
declare 157 generic {
    int Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, Tcl_DString *dsPtr)
}
declare 158 generic {
    Tcl_ChannelType * Tcl_GetChannelType(Tcl_Channel chan)
}
declare 159 generic {
    int Tcl_GetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
	    Tcl_CmdInfo *infoPtr)
}
declare 160 generic {
    CONST84_RETURN char * Tcl_GetCommandName(Tcl_Interp *interp,
	    Tcl_Command command)
}
declare 161 generic {
    int Tcl_GetErrno(void)
}
declare 162 generic {
    CONST84_RETURN char * Tcl_GetHostName(void)
}
declare 163 generic {
    int Tcl_GetInterpPath(Tcl_Interp *askInterp, Tcl_Interp *slaveInterp)
}
declare 164 generic {
    Tcl_Interp * Tcl_GetMaster(Tcl_Interp *interp)
}
declare 165 generic {
    CONST char * Tcl_GetNameOfExecutable(void)
}
declare 166 generic {
    Tcl_Obj * Tcl_GetObjResult(Tcl_Interp *interp)
}

# Tcl_GetOpenFile is only available on unix, but it is a part of the old
# generic interface, so we inlcude it here for compatibility reasons.

declare 167 unix {
    int Tcl_GetOpenFile(Tcl_Interp *interp, CONST char *str, int forWriting,
	    int checkUsage, ClientData *filePtr)
}
# Obsolete.  Should now use Tcl_FSGetPathType which is objectified
# and therefore usually faster.
declare 168 generic {
    Tcl_PathType Tcl_GetPathType(CONST char *path)
}
declare 169 generic {
    int Tcl_Gets(Tcl_Channel chan, Tcl_DString *dsPtr)
}
declare 170 generic {
    int Tcl_GetsObj(Tcl_Channel chan, Tcl_Obj *objPtr)
}
declare 171 generic {
    int Tcl_GetServiceMode(void)
}
declare 172 generic {
    Tcl_Interp * Tcl_GetSlave(Tcl_Interp *interp, CONST char *slaveName)
}
declare 173 generic {
    Tcl_Channel Tcl_GetStdChannel(int type)
}
declare 174 generic {
    CONST84_RETURN char * Tcl_GetStringResult(Tcl_Interp *interp)
}
declare 175 generic {
    CONST84_RETURN char * Tcl_GetVar(Tcl_Interp *interp, CONST char *varName,
	    int flags)
}
declare 176 generic {
    CONST84_RETURN char * Tcl_GetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
}
declare 177 generic {
    int Tcl_GlobalEval(Tcl_Interp *interp, CONST char *command)
}
declare 178 generic {
    int Tcl_GlobalEvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr)
}
declare 179 generic {
    int Tcl_HideCommand(Tcl_Interp *interp, CONST char *cmdName,
	    CONST char *hiddenCmdToken)
}
declare 180 generic {
    int Tcl_Init(Tcl_Interp *interp)
}
declare 181 generic {
    void Tcl_InitHashTable(Tcl_HashTable *tablePtr, int keyType)
}
declare 182 generic {
    int Tcl_InputBlocked(Tcl_Channel chan)
}
declare 183 generic {
    int Tcl_InputBuffered(Tcl_Channel chan)
}
declare 184 generic {
    int Tcl_InterpDeleted(Tcl_Interp *interp)
}
declare 185 generic {
    int Tcl_IsSafe(Tcl_Interp *interp)
}
# Obsolete, use Tcl_FSJoinPath
declare 186 generic {
    char * Tcl_JoinPath(int argc, CONST84 char * CONST *argv,
	    Tcl_DString *resultPtr)
}
declare 187 generic {
    int Tcl_LinkVar(Tcl_Interp *interp, CONST char *varName, char *addr,
	    int type)
}

# This slot is reserved for use by the plus patch:
#  declare 188 generic {
#      Tcl_MainLoop
#  }

declare 189 generic {
    Tcl_Channel Tcl_MakeFileChannel(ClientData handle, int mode)
}
declare 190 generic {
    int Tcl_MakeSafe(Tcl_Interp *interp)
}
declare 191 generic {
    Tcl_Channel Tcl_MakeTcpClientChannel(ClientData tcpSocket)
}
declare 192 generic {
    char * Tcl_Merge(int argc, CONST84 char * CONST *argv)
}
declare 193 generic {
    Tcl_HashEntry * Tcl_NextHashEntry(Tcl_HashSearch *searchPtr)
}
declare 194 generic {
    void Tcl_NotifyChannel(Tcl_Channel channel, int mask)
}
declare 195 generic {
    Tcl_Obj * Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
	    Tcl_Obj *part2Ptr, int flags)
}
declare 196 generic {
    Tcl_Obj * Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
	    Tcl_Obj *part2Ptr, Tcl_Obj *newValuePtr, int flags)
}
declare 197 {unix win} {
    Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc,
	    CONST84 char **argv, int flags)
}
# This is obsolete, use Tcl_FSOpenFileChannel
declare 198 generic {
    Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, CONST char *fileName,
	    CONST char *modeString, int permissions)
}
declare 199 generic {
    Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port,
	    CONST char *address, CONST char *myaddr, int myport, int async)
}
declare 200 generic {
    Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port,
	    CONST char *host, Tcl_TcpAcceptProc *acceptProc,
	    ClientData callbackData)
}
declare 201 generic {
    void Tcl_Preserve(ClientData data)
}
declare 202 generic {
    void Tcl_PrintDouble(Tcl_Interp *interp, double value, char *dst)
}
declare 203 generic {
    int Tcl_PutEnv(CONST char *string)
}
declare 204 generic {
    CONST84_RETURN char * Tcl_PosixError(Tcl_Interp *interp)
}
declare 205 generic {
    void Tcl_QueueEvent(Tcl_Event *evPtr, Tcl_QueuePosition position)
}
declare 206 generic {
    int Tcl_Read(Tcl_Channel chan, char *bufPtr, int toRead)
}
declare 207 {unix win} {
    void Tcl_ReapDetachedProcs(void)
}
declare 208 generic {
    int Tcl_RecordAndEval(Tcl_Interp *interp, CONST char *cmd, int flags)
}
declare 209 generic {
    int Tcl_RecordAndEvalObj(Tcl_Interp *interp, Tcl_Obj *cmdPtr, int flags)
}
declare 210 generic {
    void Tcl_RegisterChannel(Tcl_Interp *interp, Tcl_Channel chan)
}
declare 211 generic {
    void Tcl_RegisterObjType(Tcl_ObjType *typePtr)
}
declare 212 generic {
    Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, CONST char *string)
}
declare 213 generic {
    int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp,
	    CONST char *str, CONST char *start)
}
declare 214 generic {
    int Tcl_RegExpMatch(Tcl_Interp *interp, CONST char *str,
	    CONST char *pattern)
}
declare 215 generic {
    void Tcl_RegExpRange(Tcl_RegExp regexp, int index,
	    CONST84 char **startPtr, CONST84 char **endPtr)
}
declare 216 generic {
    void Tcl_Release(ClientData clientData)
}
declare 217 generic {
    void Tcl_ResetResult(Tcl_Interp *interp)
}
declare 218 generic {
    int Tcl_ScanElement(CONST char *str, int *flagPtr)
}
declare 219 generic {
    int Tcl_ScanCountedElement(CONST char *str, int length, int *flagPtr)
}
# Obsolete
declare 220 generic {
    int Tcl_SeekOld(Tcl_Channel chan, int offset, int mode)
}
declare 221 generic {
    int Tcl_ServiceAll(void)
}
declare 222 generic {
    int Tcl_ServiceEvent(int flags)
}
declare 223 generic {
    void Tcl_SetAssocData(Tcl_Interp *interp, CONST char *name,
	    Tcl_InterpDeleteProc *proc, ClientData clientData)
}
declare 224 generic {
    void Tcl_SetChannelBufferSize(Tcl_Channel chan, int sz)
}
declare 225 generic {
    int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, CONST char *newValue)
}
declare 226 generic {
    int Tcl_SetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
	    CONST Tcl_CmdInfo *infoPtr)
}
declare 227 generic {
    void Tcl_SetErrno(int err)
}
declare 228 generic {
    void Tcl_SetErrorCode(Tcl_Interp *interp, ...)
}
declare 229 generic {
    void Tcl_SetMaxBlockTime(Tcl_Time *timePtr)
}
declare 230 generic {
    void Tcl_SetPanicProc(Tcl_PanicProc *panicProc)
}
declare 231 generic {
    int Tcl_SetRecursionLimit(Tcl_Interp *interp, int depth)
}
declare 232 generic {
    void Tcl_SetResult(Tcl_Interp *interp, char *str,
	    Tcl_FreeProc *freeProc)
}
declare 233 generic {
    int Tcl_SetServiceMode(int mode)
}
declare 234 generic {
    void Tcl_SetObjErrorCode(Tcl_Interp *interp, Tcl_Obj *errorObjPtr)
}
declare 235 generic {
    void Tcl_SetObjResult(Tcl_Interp *interp, Tcl_Obj *resultObjPtr)
}
declare 236 generic {
    void Tcl_SetStdChannel(Tcl_Channel channel, int type)
}
declare 237 generic {
    CONST84_RETURN char * Tcl_SetVar(Tcl_Interp *interp, CONST char *varName,
	    CONST char *newValue, int flags)
}
declare 238 generic {
    CONST84_RETURN char * Tcl_SetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, CONST char *newValue, int flags)
}
declare 239 generic {
    CONST84_RETURN char * Tcl_SignalId(int sig)
}
declare 240 generic {
    CONST84_RETURN char * Tcl_SignalMsg(int sig)
}
declare 241 generic {
    void Tcl_SourceRCFile(Tcl_Interp *interp)
}
declare 242 generic {
    int Tcl_SplitList(Tcl_Interp *interp, CONST char *listStr, int *argcPtr,
	    CONST84 char ***argvPtr)
}
# Obsolete, use Tcl_FSSplitPath
declare 243 generic {
    void Tcl_SplitPath(CONST char *path, int *argcPtr, CONST84 char ***argvPtr)
}
declare 244 generic {
    void Tcl_StaticPackage(Tcl_Interp *interp, CONST char *pkgName,
	    Tcl_PackageInitProc *initProc, Tcl_PackageInitProc *safeInitProc)
}
declare 245 generic {
    int Tcl_StringMatch(CONST char *str, CONST char *pattern)
}
# Obsolete
declare 246 generic {
    int Tcl_TellOld(Tcl_Channel chan)
}
declare 247 generic {
    int Tcl_TraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
	    Tcl_VarTraceProc *proc, ClientData clientData)
}
declare 248 generic {
    int Tcl_TraceVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
	    int flags, Tcl_VarTraceProc *proc, ClientData clientData)
}
declare 249 generic {
    char * Tcl_TranslateFileName(Tcl_Interp *interp, CONST char *name,
	    Tcl_DString *bufferPtr)
}
declare 250 generic {
    int Tcl_Ungets(Tcl_Channel chan, CONST char *str, int len, int atHead)
}
declare 251 generic {
    void Tcl_UnlinkVar(Tcl_Interp *interp, CONST char *varName)
}
declare 252 generic {
    int Tcl_UnregisterChannel(Tcl_Interp *interp, Tcl_Channel chan)
}
declare 253 generic {
    int Tcl_UnsetVar(Tcl_Interp *interp, CONST char *varName, int flags)
}
declare 254 generic {
    int Tcl_UnsetVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
	    int flags)
}
declare 255 generic {
    void Tcl_UntraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
	    Tcl_VarTraceProc *proc, ClientData clientData)
}
declare 256 generic {
    void Tcl_UntraceVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *proc,
	    ClientData clientData)
}
declare 257 generic {
    void Tcl_UpdateLinkedVar(Tcl_Interp *interp, CONST char *varName)
}
declare 258 generic {
    int Tcl_UpVar(Tcl_Interp *interp, CONST char *frameName,
	    CONST char *varName, CONST char *localName, int flags)
}
declare 259 generic {
    int Tcl_UpVar2(Tcl_Interp *interp, CONST char *frameName, CONST char *part1,
	    CONST char *part2, CONST char *localName, int flags)
}
declare 260 generic {
    int Tcl_VarEval(Tcl_Interp *interp, ...)
}
declare 261 generic {
    ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData)
}
declare 262 generic {
    ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *procPtr,
	    ClientData prevClientData)
}
declare 263 generic {
    int Tcl_Write(Tcl_Channel chan, CONST char *s, int slen)
}
declare 264 generic {
    void Tcl_WrongNumArgs(Tcl_Interp *interp, int objc,
	    Tcl_Obj *CONST objv[], CONST char *message)
}
declare 265 generic {
    int Tcl_DumpActiveMemory(CONST char *fileName)
}
declare 266 generic {
    void Tcl_ValidateAllMemory(CONST char *file, int line)
}

declare 267 generic {
    void Tcl_AppendResultVA(Tcl_Interp *interp, va_list argList)
}
declare 268 generic {
    void Tcl_AppendStringsToObjVA(Tcl_Obj *objPtr, va_list argList)
}
declare 269 generic {
    CONST84_RETURN char * Tcl_HashStats(Tcl_HashTable *tablePtr)
}
declare 270 generic {
    CONST84_RETURN char * Tcl_ParseVar(Tcl_Interp *interp, CONST char *str,
	    CONST84 char **termPtr)
}
declare 271 generic {
    CONST84_RETURN char * Tcl_PkgPresent(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact)
}
declare 272 generic {
    CONST84_RETURN char * Tcl_PkgPresentEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
}
declare 273 generic {
    int Tcl_PkgProvide(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version)
}
declare 274 generic {
    CONST84_RETURN char * Tcl_PkgRequire(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version, int exact)
}
declare 275 generic {
    void Tcl_SetErrorCodeVA(Tcl_Interp *interp, va_list argList)
}
declare 276 generic {
    int  Tcl_VarEvalVA(Tcl_Interp *interp, va_list argList)
}
declare 277 generic {
    Tcl_Pid Tcl_WaitPid(Tcl_Pid pid, int *statPtr, int options)
}
declare 278 generic {
    void Tcl_PanicVA(CONST char *format, va_list argList)
}
declare 279 generic {
    void Tcl_GetVersion(int *major, int *minor, int *patchLevel, int *type)
}
declare 280 generic {
    void Tcl_InitMemory(Tcl_Interp *interp)
}

# Andreas Kupries <a.kupries@@westend.com>, 03/21/1999
# "Trf-Patch for filtering channels"
#
# C-Level API for (un)stacking of channels. This allows the introduction
# of filtering channels with relatively little changes to the core.
# This patch was created in cooperation with Jan Nijtmans j.nijtmans@@chello.nl
# and is therefore part of his plus-patches too.
#
# It would have been possible to place the following definitions according
# to the alphabetical order used elsewhere in this file, but I decided
# against that to ease the maintenance of the patch across new tcl versions
# (patch usually has no problems to integrate the patch file for the last
# version into the new one).

declare 281 generic {
    Tcl_Channel Tcl_StackChannel(Tcl_Interp *interp, Tcl_ChannelType *typePtr,
	    ClientData instanceData, int mask, Tcl_Channel prevChan)
}
declare 282 generic {
    int Tcl_UnstackChannel(Tcl_Interp *interp, Tcl_Channel chan)
}
declare 283 generic {
    Tcl_Channel Tcl_GetStackedChannel(Tcl_Channel chan)
}

# 284 was reserved, but added in 8.4a2
declare 284 generic {
    void Tcl_SetMainLoop(Tcl_MainLoopProc *proc)
}

# Reserved for future use (8.0.x vs. 8.1)
#  declare 285 generic {
#  }


# Added in 8.1:

declare 286 generic {
    void Tcl_AppendObjToObj(Tcl_Obj *objPtr, Tcl_Obj *appendObjPtr)
}
declare 287 generic {
    Tcl_Encoding Tcl_CreateEncoding(Tcl_EncodingType *typePtr)
}
declare 288 generic {
    void Tcl_CreateThreadExitHandler(Tcl_ExitProc *proc, ClientData clientData)
}
declare 289 generic {
    void Tcl_DeleteThreadExitHandler(Tcl_ExitProc *proc, ClientData clientData)
}
declare 290 generic {
    void Tcl_DiscardResult(Tcl_SavedResult *statePtr)
}
declare 291 generic {
    int Tcl_EvalEx(Tcl_Interp *interp, CONST char *script, int numBytes,
	    int flags)
}
declare 292 generic {
    int Tcl_EvalObjv(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
	    int flags)
}
declare 293 generic {
    int Tcl_EvalObjEx(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags)
}
declare 294 generic {
    void Tcl_ExitThread(int status)
}
declare 295 generic {
    int Tcl_ExternalToUtf(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
	    int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr)
}
declare 296 generic {
    char * Tcl_ExternalToUtfDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
}
declare 297 generic {
    void Tcl_FinalizeThread(void)
}
declare 298 generic {
    void Tcl_FinalizeNotifier(ClientData clientData)
}
declare 299 generic {
    void Tcl_FreeEncoding(Tcl_Encoding encoding)
}
declare 300 generic {
    Tcl_ThreadId Tcl_GetCurrentThread(void)
}
declare 301 generic {
    Tcl_Encoding Tcl_GetEncoding(Tcl_Interp *interp, CONST char *name)
}
declare 302 generic {
    CONST84_RETURN char * Tcl_GetEncodingName(Tcl_Encoding encoding)
}
declare 303 generic {
    void Tcl_GetEncodingNames(Tcl_Interp *interp)
}
declare 304 generic {
    int Tcl_GetIndexFromObjStruct(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST VOID *tablePtr, int offset, CONST char *msg, int flags,
	    int *indexPtr)
}
declare 305 generic {
    VOID * Tcl_GetThreadData(Tcl_ThreadDataKey *keyPtr, int size)
}
declare 306 generic {
    Tcl_Obj * Tcl_GetVar2Ex(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
}
declare 307 generic {
    ClientData Tcl_InitNotifier(void)
}
declare 308 generic {
    void Tcl_MutexLock(Tcl_Mutex *mutexPtr)
}
declare 309 generic {
    void Tcl_MutexUnlock(Tcl_Mutex *mutexPtr)
}
declare 310 generic {
    void Tcl_ConditionNotify(Tcl_Condition *condPtr)
}
declare 311 generic {
    void Tcl_ConditionWait(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr,
	    Tcl_Time *timePtr)
}
declare 312 generic {
    int Tcl_NumUtfChars(CONST char *src, int len)
}
declare 313 generic {
    int Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead,
	    int appendFlag)
}
declare 314 generic {
    void Tcl_RestoreResult(Tcl_Interp *interp, Tcl_SavedResult *statePtr)
}
declare 315 generic {
    void Tcl_SaveResult(Tcl_Interp *interp, Tcl_SavedResult *statePtr)
}
declare 316 generic {
    int Tcl_SetSystemEncoding(Tcl_Interp *interp, CONST char *name)
}
declare 317 generic {
    Tcl_Obj * Tcl_SetVar2Ex(Tcl_Interp *interp, CONST char *part1, 
            CONST char *part2, Tcl_Obj *newValuePtr, int flags)
}
declare 318 generic {
    void Tcl_ThreadAlert(Tcl_ThreadId threadId)
}
declare 319 generic {
    void Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event* evPtr,
	    Tcl_QueuePosition position)
}
declare 320 generic {
    Tcl_UniChar Tcl_UniCharAtIndex(CONST char *src, int index)
}
declare 321 generic {
    Tcl_UniChar Tcl_UniCharToLower(int ch)
}
declare 322 generic {
    Tcl_UniChar Tcl_UniCharToTitle(int ch)
}
declare 323 generic {
    Tcl_UniChar Tcl_UniCharToUpper(int ch)
}
declare 324 generic {
    int Tcl_UniCharToUtf(int ch, char *buf)
}
declare 325 generic {
    CONST84_RETURN char * Tcl_UtfAtIndex(CONST char *src, int index)
}
declare 326 generic {
    int Tcl_UtfCharComplete(CONST char *src, int len)
}
declare 327 generic {
    int Tcl_UtfBackslash(CONST char *src, int *readPtr, char *dst)
}
declare 328 generic {
    CONST84_RETURN char * Tcl_UtfFindFirst(CONST char *src, int ch)
}
declare 329 generic {
    CONST84_RETURN char * Tcl_UtfFindLast(CONST char *src, int ch)
}
declare 330 generic {
    CONST84_RETURN char * Tcl_UtfNext(CONST char *src)
}
declare 331 generic {
    CONST84_RETURN char * Tcl_UtfPrev(CONST char *src, CONST char *start)
}
declare 332 generic {
    int Tcl_UtfToExternal(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
	    int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr)
}
declare 333 generic {
    char * Tcl_UtfToExternalDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
}
declare 334 generic {
    int Tcl_UtfToLower(char *src)
}
declare 335 generic {
    int Tcl_UtfToTitle(char *src)
}
declare 336 generic {
    int Tcl_UtfToUniChar(CONST char *src, Tcl_UniChar *chPtr)
}
declare 337 generic {
    int Tcl_UtfToUpper(char *src)
}
declare 338 generic {
    int Tcl_WriteChars(Tcl_Channel chan, CONST char *src, int srcLen)
}
declare 339 generic {
    int Tcl_WriteObj(Tcl_Channel chan, Tcl_Obj *objPtr)
}
declare 340 generic {
    char * Tcl_GetString(Tcl_Obj *objPtr)
}
declare 341 generic {
    CONST84_RETURN char * Tcl_GetDefaultEncodingDir(void)
}
declare 342 generic {
    void Tcl_SetDefaultEncodingDir(CONST char *path)
}
declare 343 generic {
    void Tcl_AlertNotifier(ClientData clientData)
}
declare 344 generic {
    void Tcl_ServiceModeHook(int mode)
}
declare 345 generic {
    int Tcl_UniCharIsAlnum(int ch)
}
declare 346 generic {
    int Tcl_UniCharIsAlpha(int ch)
}
declare 347 generic {
    int Tcl_UniCharIsDigit(int ch)
}
declare 348 generic {
    int Tcl_UniCharIsLower(int ch)
}
declare 349 generic {
    int Tcl_UniCharIsSpace(int ch)
}
declare 350 generic {
    int Tcl_UniCharIsUpper(int ch)
}
declare 351 generic {
    int Tcl_UniCharIsWordChar(int ch)
}
declare 352 generic {
    int Tcl_UniCharLen(CONST Tcl_UniChar *str)
}
declare 353 generic {
    int Tcl_UniCharNcmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
}
declare 354 generic {
    char * Tcl_UniCharToUtfDString(CONST Tcl_UniChar *string,
	    int numChars, Tcl_DString *dsPtr)
}
declare 355 generic {
    Tcl_UniChar * Tcl_UtfToUniCharDString(CONST char *string,
	    int length, Tcl_DString *dsPtr)
}
declare 356 generic {
    Tcl_RegExp Tcl_GetRegExpFromObj(Tcl_Interp *interp, Tcl_Obj *patObj,
	    int flags)
}

declare 357 generic {
    Tcl_Obj *Tcl_EvalTokens(Tcl_Interp *interp, Tcl_Token *tokenPtr,
	    int count)
}
declare 358 generic {
    void Tcl_FreeParse(Tcl_Parse *parsePtr)
}
declare 359 generic {
    void Tcl_LogCommandInfo(Tcl_Interp *interp, CONST char *script,
	    CONST char *command, int length)
}
declare 360 generic {
    int Tcl_ParseBraces(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append, CONST84 char **termPtr)
}
declare 361 generic {
    int Tcl_ParseCommand(Tcl_Interp *interp, CONST char *string, int numBytes,
	    int nested, Tcl_Parse *parsePtr)
}
declare 362 generic {
    int Tcl_ParseExpr(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr)	 
}
declare 363 generic {
    int Tcl_ParseQuotedString(Tcl_Interp *interp, CONST char *string,
	    int numBytes, Tcl_Parse *parsePtr, int append,
	    CONST84 char **termPtr)
}
declare 364 generic {
    int Tcl_ParseVarName(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append)
}
# These 4 functions are obsolete, use Tcl_FSGetCwd, Tcl_FSChdir,
# Tcl_FSAccess and Tcl_FSStat
declare 365 generic {
    char *Tcl_GetCwd(Tcl_Interp *interp, Tcl_DString *cwdPtr)
}
declare 366 generic {
   int Tcl_Chdir(CONST char *dirName)
}
declare 367 generic {
   int Tcl_Access(CONST char *path, int mode)
}
declare 368 generic {
    int Tcl_Stat(CONST char *path, struct stat *bufPtr)
}
declare 369 generic {
    int Tcl_UtfNcmp(CONST char *s1, CONST char *s2, unsigned long n)
}
declare 370 generic {
    int Tcl_UtfNcasecmp(CONST char *s1, CONST char *s2, unsigned long n)
}
declare 371 generic {
    int Tcl_StringCaseMatch(CONST char *str, CONST char *pattern, int nocase)
}
declare 372 generic {
    int Tcl_UniCharIsControl(int ch)
}
declare 373 generic {
    int Tcl_UniCharIsGraph(int ch)
}
declare 374 generic {
    int Tcl_UniCharIsPrint(int ch)
}
declare 375 generic {
    int Tcl_UniCharIsPunct(int ch)
}
declare 376 generic {
    int Tcl_RegExpExecObj(Tcl_Interp *interp, Tcl_RegExp regexp,
	    Tcl_Obj *objPtr, int offset, int nmatches, int flags)
}
declare 377 generic {
    void Tcl_RegExpGetInfo(Tcl_RegExp regexp, Tcl_RegExpInfo *infoPtr)
}
declare 378 generic {
    Tcl_Obj * Tcl_NewUnicodeObj(CONST Tcl_UniChar *unicode, int numChars)
}
declare 379 generic {
    void Tcl_SetUnicodeObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
	    int numChars)
}
declare 380 generic {
    int Tcl_GetCharLength(Tcl_Obj *objPtr)
}
declare 381 generic {
    Tcl_UniChar Tcl_GetUniChar(Tcl_Obj *objPtr, int index)
}
declare 382 generic {
    Tcl_UniChar * Tcl_GetUnicode(Tcl_Obj *objPtr)
}
declare 383 generic {
    Tcl_Obj * Tcl_GetRange(Tcl_Obj *objPtr, int first, int last)
}
declare 384 generic {
    void Tcl_AppendUnicodeToObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
	    int length)
}
declare 385 generic {
    int Tcl_RegExpMatchObj(Tcl_Interp *interp, Tcl_Obj *stringObj,
	    Tcl_Obj *patternObj)
}
declare 386 generic {
    void Tcl_SetNotifier(Tcl_NotifierProcs *notifierProcPtr)
}
declare 387 generic {
    Tcl_Mutex * Tcl_GetAllocMutex(void)
}
declare 388 generic {
    int Tcl_GetChannelNames(Tcl_Interp *interp)
}
declare 389 generic {
    int Tcl_GetChannelNamesEx(Tcl_Interp *interp, CONST char *pattern)
}
declare 390 generic {
    int Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp *interp,
	    int objc, Tcl_Obj *CONST objv[])
}
declare 391 generic {
    void Tcl_ConditionFinalize(Tcl_Condition *condPtr)
}
declare 392 generic {
    void Tcl_MutexFinalize(Tcl_Mutex *mutex)
}
declare 393 generic {
    int Tcl_CreateThread(Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc proc,
	    ClientData clientData, int stackSize, int flags)
}

# Introduced in 8.3.2
declare 394 generic {
    int Tcl_ReadRaw(Tcl_Channel chan, char *dst, int bytesToRead)
}
declare 395 generic {
    int Tcl_WriteRaw(Tcl_Channel chan, CONST char *src, int srcLen)
}
declare 396 generic {
    Tcl_Channel Tcl_GetTopChannel(Tcl_Channel chan)
}
declare 397 generic {
    int Tcl_ChannelBuffered(Tcl_Channel chan)
}
declare 398 generic {
    CONST84_RETURN char * Tcl_ChannelName(Tcl_ChannelType *chanTypePtr)
}
declare 399 generic {
    Tcl_ChannelTypeVersion Tcl_ChannelVersion(Tcl_ChannelType *chanTypePtr)
}
declare 400 generic {
    Tcl_DriverBlockModeProc * Tcl_ChannelBlockModeProc(Tcl_ChannelType
	    *chanTypePtr)
}
declare 401 generic {
    Tcl_DriverCloseProc * Tcl_ChannelCloseProc(Tcl_ChannelType *chanTypePtr)
}
declare 402 generic {
    Tcl_DriverClose2Proc * Tcl_ChannelClose2Proc(Tcl_ChannelType *chanTypePtr)
}
declare 403 generic {
    Tcl_DriverInputProc * Tcl_ChannelInputProc(Tcl_ChannelType *chanTypePtr)
}
declare 404 generic {
    Tcl_DriverOutputProc * Tcl_ChannelOutputProc(Tcl_ChannelType *chanTypePtr)
}
declare 405 generic {
    Tcl_DriverSeekProc * Tcl_ChannelSeekProc(Tcl_ChannelType *chanTypePtr)
}
declare 406 generic {
    Tcl_DriverSetOptionProc * Tcl_ChannelSetOptionProc(Tcl_ChannelType
	    *chanTypePtr)
}
declare 407 generic {
    Tcl_DriverGetOptionProc * Tcl_ChannelGetOptionProc(Tcl_ChannelType
	    *chanTypePtr)
}
declare 408 generic {
    Tcl_DriverWatchProc * Tcl_ChannelWatchProc(Tcl_ChannelType *chanTypePtr)
}
declare 409 generic {
    Tcl_DriverGetHandleProc * Tcl_ChannelGetHandleProc(Tcl_ChannelType
	    *chanTypePtr)
}
declare 410 generic {
    Tcl_DriverFlushProc * Tcl_ChannelFlushProc(Tcl_ChannelType *chanTypePtr)
}
declare 411 generic {
    Tcl_DriverHandlerProc * Tcl_ChannelHandlerProc(Tcl_ChannelType
	    *chanTypePtr)
}

# Introduced in 8.4a2
declare 412 generic {
    int Tcl_JoinThread(Tcl_ThreadId id, int* result)
}
declare 413 generic {
    int Tcl_IsChannelShared(Tcl_Channel channel)
}
declare 414 generic {
    int Tcl_IsChannelRegistered(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 415 generic {
    void Tcl_CutChannel(Tcl_Channel channel)
}
declare 416 generic {
    void Tcl_SpliceChannel(Tcl_Channel channel)
}
declare 417 generic {
    void Tcl_ClearChannelHandlers(Tcl_Channel channel)
}
declare 418 generic {
    int Tcl_IsChannelExisting(CONST char* channelName)
}

declare 419 generic {
    int Tcl_UniCharNcasecmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
}
declare 420 generic {
    int Tcl_UniCharCaseMatch(CONST Tcl_UniChar *ustr,
	    CONST Tcl_UniChar *pattern, int nocase)
}

declare 421 generic {
    Tcl_HashEntry *Tcl_FindHashEntry(Tcl_HashTable *tablePtr, CONST char *key)
}

declare 422 generic {
    Tcl_HashEntry *Tcl_CreateHashEntry(Tcl_HashTable *tablePtr,
	    CONST char *key, int *newPtr)
}

declare 423 generic {
    void Tcl_InitCustomHashTable(Tcl_HashTable *tablePtr, int keyType,
	    Tcl_HashKeyType *typePtr)
}

declare 424 generic {
    void Tcl_InitObjHashTable(Tcl_HashTable *tablePtr)
}
declare 425 generic {
    ClientData Tcl_CommandTraceInfo(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *procPtr,
	    ClientData prevClientData)
}
declare 426 generic {
    int Tcl_TraceCommand(Tcl_Interp *interp, CONST char *varName, int flags,
	    Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 427 generic {
    void Tcl_UntraceCommand(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 428 generic {
    char * Tcl_AttemptAlloc(unsigned int size)
}
declare 429 generic {
    char * Tcl_AttemptDbCkalloc(unsigned int size, CONST char *file, int line)
}
declare 430 generic {
    char * Tcl_AttemptRealloc(char *ptr, unsigned int size)
}
declare 431 generic {
    char * Tcl_AttemptDbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
}
declare 432 generic {
    int Tcl_AttemptSetObjLength(Tcl_Obj *objPtr, int length)
}
declare 433 generic {
    Tcl_ThreadId Tcl_GetChannelThread(Tcl_Channel channel)
}
# introduced in 8.4a3
declare 434 generic {
    Tcl_UniChar * Tcl_GetUnicodeFromObj(Tcl_Obj *objPtr, int *lengthPtr)
}
declare 435 generic {
    int Tcl_GetMathFuncInfo(Tcl_Interp *interp, CONST char *name,
	    int *numArgsPtr, Tcl_ValueType **argTypesPtr,
	    Tcl_MathProc **procPtr, ClientData *clientDataPtr)
}
declare 436 generic {
    Tcl_Obj * Tcl_ListMathFuncs(Tcl_Interp *interp, CONST char *pattern)
}
declare 437 generic {
    Tcl_Obj * Tcl_SubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags)
}
declare 438 generic {
    int Tcl_DetachChannel(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 439 generic {
    int Tcl_IsStandardChannel(Tcl_Channel channel)
}
# New functions due to TIP#17
declare 440 generic {
    int	Tcl_FSCopyFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 441 generic {
    int	Tcl_FSCopyDirectory(Tcl_Obj *srcPathPtr,
	    Tcl_Obj *destPathPtr, Tcl_Obj **errorPtr)
}
declare 442 generic {
    int	Tcl_FSCreateDirectory(Tcl_Obj *pathPtr)
}
declare 443 generic {
    int	Tcl_FSDeleteFile(Tcl_Obj *pathPtr)
}
declare 444 generic {
    int	Tcl_FSLoadFile(Tcl_Interp * interp,
	    Tcl_Obj *pathPtr, CONST char * sym1, CONST char * sym2,
	    Tcl_PackageInitProc ** proc1Ptr,
	    Tcl_PackageInitProc ** proc2Ptr,
	    Tcl_LoadHandle * handlePtr,
	    Tcl_FSUnloadFileProc **unloadProcPtr)
}
declare 445 generic {
    int	Tcl_FSMatchInDirectory(Tcl_Interp *interp, Tcl_Obj *result,
	    Tcl_Obj *pathPtr, CONST char *pattern, Tcl_GlobTypeData *types)
}
declare 446 generic {
    Tcl_Obj * Tcl_FSLink(Tcl_Obj *pathPtr, Tcl_Obj *toPtr, int linkAction)
}
declare 447 generic {
    int Tcl_FSRemoveDirectory(Tcl_Obj *pathPtr,
	    int recursive, Tcl_Obj **errorPtr)
}
declare 448 generic {
    int	Tcl_FSRenameFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 449 generic {
    int	Tcl_FSLstat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 450 generic {
    int Tcl_FSUtime(Tcl_Obj *pathPtr, struct utimbuf *tval)
}
declare 451 generic {
    int Tcl_FSFileAttrsGet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 452 generic {
    int Tcl_FSFileAttrsSet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj *objPtr)
}
declare 453 generic {
    CONST char ** Tcl_FSFileAttrStrings(Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 454 generic {
    int Tcl_FSStat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 455 generic {
    int Tcl_FSAccess(Tcl_Obj *pathPtr, int mode)
}
declare 456 generic {
    Tcl_Channel Tcl_FSOpenFileChannel(Tcl_Interp *interp, Tcl_Obj *pathPtr,
	    CONST char *modeString, int permissions)
}
declare 457 generic {
    Tcl_Obj*  Tcl_FSGetCwd(Tcl_Interp *interp)
}
declare 458 generic {
    int Tcl_FSChdir(Tcl_Obj *pathPtr)
}
declare 459 generic {
    int Tcl_FSConvertToPathType(Tcl_Interp *interp, Tcl_Obj *pathPtr)
}
declare 460 generic {
    Tcl_Obj* Tcl_FSJoinPath(Tcl_Obj *listObj, int elements)
}
declare 461 generic {
    Tcl_Obj* Tcl_FSSplitPath(Tcl_Obj* pathPtr, int *lenPtr)
}
declare 462 generic {
    int Tcl_FSEqualPaths(Tcl_Obj* firstPtr, Tcl_Obj* secondPtr)
}
declare 463 generic {
    Tcl_Obj* Tcl_FSGetNormalizedPath(Tcl_Interp *interp, Tcl_Obj* pathObjPtr)
}
declare 464 generic {
    Tcl_Obj* Tcl_FSJoinToPath(Tcl_Obj *basePtr, int objc,
	    Tcl_Obj *CONST objv[])
}
declare 465 generic {
    ClientData Tcl_FSGetInternalRep(Tcl_Obj* pathObjPtr,
	    Tcl_Filesystem *fsPtr)
}
declare 466 generic {
    Tcl_Obj* Tcl_FSGetTranslatedPath(Tcl_Interp *interp, Tcl_Obj* pathPtr)
}
declare 467 generic {
    int Tcl_FSEvalFile(Tcl_Interp *interp, Tcl_Obj *fileName)
}
declare 468 generic {
    Tcl_Obj* Tcl_FSNewNativePath(Tcl_Filesystem* fromFilesystem,
	    ClientData clientData)
}
declare 469 generic {
    CONST char* Tcl_FSGetNativePath(Tcl_Obj* pathObjPtr)
}
declare 470 generic {
    Tcl_Obj* Tcl_FSFileSystemInfo(Tcl_Obj* pathObjPtr)
}
declare 471 generic {
    Tcl_Obj* Tcl_FSPathSeparator(Tcl_Obj* pathObjPtr)
}
declare 472 generic {
    Tcl_Obj* Tcl_FSListVolumes(void)
}
declare 473 generic {
    int Tcl_FSRegister(ClientData clientData, Tcl_Filesystem *fsPtr)
}
declare 474 generic {
    int Tcl_FSUnregister(Tcl_Filesystem *fsPtr)
}
declare 475 generic {
    ClientData Tcl_FSData(Tcl_Filesystem *fsPtr)
}
declare 476 generic {
    CONST char* Tcl_FSGetTranslatedStringPath(Tcl_Interp *interp,
	    Tcl_Obj* pathPtr)
}
declare 477 generic {
    Tcl_Filesystem* Tcl_FSGetFileSystemForPath(Tcl_Obj* pathObjPtr)
}
declare 478 generic {
    Tcl_PathType Tcl_FSGetPathType(Tcl_Obj *pathObjPtr)
}
# New function due to TIP#49
declare 479 generic {
    int Tcl_OutputBuffered(Tcl_Channel chan)
}
declare 480 generic {
    void Tcl_FSMountsChanged(Tcl_Filesystem *fsPtr)
}	  
# New function due to TIP#56
declare 481 generic {
    int Tcl_EvalTokensStandard(Tcl_Interp *interp, Tcl_Token *tokenPtr,
	    int count)
}

# New export due to TIP#73 
declare 482 generic {
    void Tcl_GetTime(Tcl_Time* timeBuf)
}

# New exports due to TIP#32

declare 483 generic {
    Tcl_Trace Tcl_CreateObjTrace(Tcl_Interp* interp, int level, int flags,
	    Tcl_CmdObjTraceProc* objProc, ClientData clientData,
	    Tcl_CmdObjTraceDeleteProc* delProc)
}
declare 484 generic {
    int Tcl_GetCommandInfoFromToken(Tcl_Command token, Tcl_CmdInfo* infoPtr)
}
declare 485 generic {
    int Tcl_SetCommandInfoFromToken(Tcl_Command token,
	    CONST Tcl_CmdInfo* infoPtr)
}

### New functions on 64-bit dev branch ###
declare 486 generic {
    Tcl_Obj * Tcl_DbNewWideIntObj(Tcl_WideInt wideValue,
	    CONST char *file, int line)
}
declare 487 generic {
    int Tcl_GetWideIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tcl_WideInt *widePtr)
}
declare 488 generic {
    Tcl_Obj * Tcl_NewWideIntObj(Tcl_WideInt wideValue)
}
declare 489 generic {
    void Tcl_SetWideIntObj(Tcl_Obj *objPtr, Tcl_WideInt wideValue)
}
declare 490 generic {
    Tcl_StatBuf * Tcl_AllocStatBuf(void)
}
declare 491 generic {
    Tcl_WideInt Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset, int mode)
}
declare 492 generic {
    Tcl_WideInt Tcl_Tell(Tcl_Channel chan)
}

# New export due to TIP#91
declare 493 generic {
    Tcl_DriverWideSeekProc * Tcl_ChannelWideSeekProc(
	    Tcl_ChannelType *chanTypePtr)
}

##############################################################################

# Define the platform specific public Tcl interface.  These functions are
# only available on the designated platform.

interface tclPlat

######################
# Windows declarations

# Added in Tcl 8.1

declare 0 win {
    TCHAR * Tcl_WinUtfToTChar(CONST char *str, int len, Tcl_DString *dsPtr)
}
declare 1 win {
    char * Tcl_WinTCharToUtf(CONST TCHAR *str, int len, Tcl_DString *dsPtr)
}

##################
# Mac declarations

# This is needed by the shells to handle Macintosh events.
 
declare 0 mac {
    void Tcl_MacSetEventProc(Tcl_MacConvertEventPtr procPtr)
}

# These routines are useful for handling using scripts from resources 
# in the application shell

declare 1 mac {
    char * Tcl_MacConvertTextResource(Handle resource)
}
declare 2 mac {
    int Tcl_MacEvalResource(Tcl_Interp *interp, CONST char *resourceName,
	    int resourceNumber, CONST char *fileName)
}
declare 3 mac {
    Handle Tcl_MacFindResource(Tcl_Interp *interp, long resourceType,
	    CONST char *resourceName, int resourceNumber,
	    CONST char *resFileRef, int * releaseIt)
}

# These routines support the new OSType object type (i.e. the packed 4
# character type and creator codes).

declare 4 mac {
    int Tcl_GetOSTypeFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    OSType *osTypePtr)
}
declare 5 mac {
    void Tcl_SetOSTypeObj(Tcl_Obj *objPtr, OSType osType)
}
declare 6 mac {
    Tcl_Obj * Tcl_NewOSTypeObj(OSType osType)
}

# These are not in MSL 2.1.2, so we need to export them from the
# Tcl shared library.  They are found in the compat directory.
 
declare 7 mac {
    int strncasecmp(CONST char *s1, CONST char *s2, size_t n)
}
declare 8 mac {
    int strcasecmp(CONST char *s1, CONST char *s2)
}

##################
# Mac OS X declarations
#

declare 0 macosx {
    int Tcl_MacOSXOpenBundleResources(Tcl_Interp *interp,
	    CONST char *bundleName,
	    int hasResourceFile,
	    int maxPathLen,
	    char *libraryPath)
}
@


1.4
log
@touched all sources to ease next import
@
text
@d10 1
d14 1
a14 1
# RCS: @@(#) $Id: tcl.decls,v 1.2.8.2 2000/09/15 16:54:55 spolk Exp $
d31 2
a32 2
    int Tcl_PkgProvideEx(Tcl_Interp *interp, char *name, char *version, \
	    ClientData clientData)
d35 2
a36 2
    char * Tcl_PkgRequireEx(Tcl_Interp *interp, char *name, char *version, \
	    int exact, ClientData *clientDataPtr)
d39 1
a39 1
    void Tcl_Panic(char *format, ...)
d51 1
a51 1
    char * Tcl_DbCkalloc(unsigned int size, char *file, int line)
d54 1
a54 1
    int Tcl_DbCkfree(char *ptr, char *file, int line)
d57 2
a58 1
    char * Tcl_DbCkrealloc(char *ptr, unsigned int size, char *file, int line)
d66 1
a66 1
    void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc, \
d89 1
a89 1
    void Tcl_AppendToObj(Tcl_Obj *objPtr, char *bytes, int length)
d95 1
a95 1
    int Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr, \
d99 1
a99 1
    void Tcl_DbDecrRefCount(Tcl_Obj *objPtr, char *file, int line)
d102 1
a102 1
    void Tcl_DbIncrRefCount(Tcl_Obj *objPtr, char *file, int line)
d105 1
a105 1
    int Tcl_DbIsShared(Tcl_Obj *objPtr, char *file, int line)
d108 1
a108 1
    Tcl_Obj * Tcl_DbNewBooleanObj(int boolValue, char *file, int line)
d111 2
a112 2
    Tcl_Obj * Tcl_DbNewByteArrayObj(unsigned char *bytes, int length, \
	    char *file, int line)
d115 2
a116 1
    Tcl_Obj * Tcl_DbNewDoubleObj(double doubleValue, char *file, int line)
d119 2
a120 2
    Tcl_Obj * Tcl_DbNewListObj(int objc, Tcl_Obj *CONST objv[], char *file, \
	    int line)
d123 1
a123 1
    Tcl_Obj * Tcl_DbNewLongObj(long longValue, char *file, int line)
d126 1
a126 1
    Tcl_Obj * Tcl_DbNewObj(char *file, int line)
d129 2
a130 2
    Tcl_Obj * Tcl_DbNewStringObj(CONST char *bytes, int length, \
	    char *file, int line)
d139 1
a139 1
    int Tcl_GetBoolean(Tcl_Interp *interp, char *str, int *boolPtr)
d142 1
a142 1
    int Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, \
d149 1
a149 1
    int Tcl_GetDouble(Tcl_Interp *interp, char *str, double *doublePtr)
d152 1
a152 1
    int Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, \
d156 2
a157 2
    int Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, \
	    char **tablePtr, char *msg, int flags, int *indexPtr)
d160 1
a160 1
    int Tcl_GetInt(Tcl_Interp *interp, char *str, int *intPtr)
d169 1
a169 1
    Tcl_ObjType * Tcl_GetObjType(char *typeName)
d178 1
a178 1
    int Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr, \
d182 1
a182 1
    int Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr, \
d186 1
a186 1
    int Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr, \
d190 1
a190 1
    int Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index, \
d194 2
a195 1
    int Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr, int *intPtr)
d198 1
a198 1
    int Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first, \
d202 1
a202 1
    Tcl_Obj * Tcl_NewBooleanObj(int boolValue)
d205 1
a205 1
    Tcl_Obj * Tcl_NewByteArrayObj(unsigned char *bytes, int length)
d232 2
a233 1
    void Tcl_SetByteArrayObj(Tcl_Obj *objPtr, unsigned char *bytes, int length)
d251 1
a251 1
    void Tcl_SetStringObj(Tcl_Obj *objPtr, char *bytes, int length)
d257 1
a257 1
    void Tcl_AddObjErrorInfo(Tcl_Interp *interp, CONST char *message, \
d270 1
a270 1
    Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc, \
d292 2
a293 2
    int Tcl_BadChannelOption(Tcl_Interp *interp, char *optionName, \
	    char *optionList)
d296 1
a296 1
    void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, \
d306 1
a306 1
    int Tcl_CommandComplete(char *cmd)
d309 1
a309 1
    char * Tcl_Concat(int argc, char **argv)
d315 1
a315 1
    int Tcl_ConvertCountedElement(CONST char *src, int length, char *dst, \
d319 3
a321 2
    int Tcl_CreateAlias(Tcl_Interp *slave, char *slaveCmd, \
	    Tcl_Interp *target, char *targetCmd, int argc, char **argv)
d324 2
a325 2
    int Tcl_CreateAliasObj(Tcl_Interp *slave, char *slaveCmd, \
	    Tcl_Interp *target, char *targetCmd, int objc, \
d329 2
a330 2
    Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr, char *chanName, \
	    ClientData instanceData, int mask)
d333 1
a333 1
    void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask, \
d337 1
a337 1
    void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, \
d341 2
a342 2
    Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, char *cmdName, \
	    Tcl_CmdProc *proc, ClientData clientData, \
d346 1
a346 1
    void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc, \
d356 3
a358 2
    void Tcl_CreateMathFunc(Tcl_Interp *interp, char *name, int numArgs, \
	    Tcl_ValueType *argTypes, Tcl_MathProc *proc, ClientData clientData)
d361 3
a363 2
    Tcl_Command Tcl_CreateObjCommand(Tcl_Interp *interp, char *cmdName, \
	    Tcl_ObjCmdProc *proc, ClientData clientData, \
d367 1
a367 1
    Tcl_Interp * Tcl_CreateSlave(Tcl_Interp *interp, char *slaveName, \
d371 1
a371 1
    Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds, \
d375 1
a375 1
    Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level, \
d379 1
a379 1
    void Tcl_DeleteAssocData(Tcl_Interp *interp, char *name)
d382 1
a382 1
    void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc, \
d386 1
a386 1
    void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, \
d390 1
a390 1
    int Tcl_DeleteCommand(Tcl_Interp *interp, char *cmdName)
d399 1
a399 1
    void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc, \
d424 1
a424 1
    void Tcl_DontCallWhenDeleted(Tcl_Interp *interp, \
d464 1
a464 1
    char * Tcl_ErrnoId(void)
d467 1
a467 1
    char * Tcl_ErrnoMsg(int err)
d470 1
a470 1
    int Tcl_Eval(Tcl_Interp *interp, char *string)
d472 1
d474 1
a474 1
    int Tcl_EvalFile(Tcl_Interp *interp, char *fileName)
d486 2
a487 2
    int Tcl_ExposeCommand(Tcl_Interp *interp, char *hiddenCmdToken, \
	    char *cmdName)
d490 1
a490 1
    int Tcl_ExprBoolean(Tcl_Interp *interp, char *str, int *ptr)
d496 1
a496 1
    int Tcl_ExprDouble(Tcl_Interp *interp, char *str, double *ptr)
d502 1
a502 1
    int Tcl_ExprLong(Tcl_Interp *interp, char *str, long *ptr)
d508 1
a508 1
    int Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr, \
d512 1
a512 1
    int Tcl_ExprString(Tcl_Interp *interp, char *string)
d521 1
a521 1
    Tcl_HashEntry * Tcl_FirstHashEntry(Tcl_HashTable *tablePtr, \
d531 3
a533 3
    int Tcl_GetAlias(Tcl_Interp *interp, char *slaveCmd, \
	    Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *argcPtr, \
	    char ***argvPtr)
d536 3
a538 3
    int Tcl_GetAliasObj(Tcl_Interp *interp, char *slaveCmd, \
	    Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *objcPtr, \
	    Tcl_Obj ***objv)
d541 1
a541 1
    ClientData Tcl_GetAssocData(Tcl_Interp *interp, char *name, \
d545 1
a545 1
    Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, char *chanName, \
d552 1
a552 1
    int Tcl_GetChannelHandle(Tcl_Channel chan, int direction, \
d562 1
a562 1
    char * Tcl_GetChannelName(Tcl_Channel chan)
d565 2
a566 2
    int Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan, \
	    char *optionName, Tcl_DString *dsPtr)
d572 1
a572 1
    int Tcl_GetCommandInfo(Tcl_Interp *interp, char *cmdName, \
d576 2
a577 1
    char * Tcl_GetCommandName(Tcl_Interp *interp, Tcl_Command command)
d583 1
a583 1
    char * Tcl_GetHostName(void)
d602 1
a602 1
    int Tcl_GetOpenFile(Tcl_Interp *interp, char *str, int forWriting, \
d605 2
a606 1

d608 1
a608 1
    Tcl_PathType Tcl_GetPathType(char *path)
d620 1
a620 1
    Tcl_Interp * Tcl_GetSlave(Tcl_Interp *interp, char *slaveName)
d626 1
a626 1
    char * Tcl_GetStringResult(Tcl_Interp *interp)
d629 2
a630 1
    char * Tcl_GetVar(Tcl_Interp *interp, char *varName, int flags)
d633 2
a634 1
    char * Tcl_GetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags)
d637 1
a637 1
    int Tcl_GlobalEval(Tcl_Interp *interp, char *command)
d643 2
a644 2
    int Tcl_HideCommand(Tcl_Interp *interp, char *cmdName, \
	    char *hiddenCmdToken)
d664 1
d666 2
a667 1
    char * Tcl_JoinPath(int argc, char **argv, Tcl_DString *resultPtr)
d670 2
a671 1
    int Tcl_LinkVar(Tcl_Interp *interp, char *varName, char *addr, int type)
d689 1
a689 1
    char * Tcl_Merge(int argc, char **argv)
d698 1
a698 1
    Tcl_Obj * Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr, \
d702 1
a702 1
    Tcl_Obj * Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr, \
d706 2
a707 2
    Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc, \
	    char **argv, int flags)
d709 1
d711 2
a712 2
    Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, char *fileName, \
	    char *modeString, int permissions)
d715 2
a716 2
    Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port, \
	    char *address, char *myaddr, int myport, int async)
d719 3
a721 2
    Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port, char *host, \
	    Tcl_TcpAcceptProc *acceptProc, ClientData callbackData)
d733 1
a733 1
    char * Tcl_PosixError(Tcl_Interp *interp)
d745 1
a745 1
    int Tcl_RecordAndEval(Tcl_Interp *interp, char *cmd, int flags)
d757 1
a757 1
    Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, char *string)
d760 1
a760 1
    int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp, \
d764 2
a765 1
    int Tcl_RegExpMatch(Tcl_Interp *interp, char *str, char *pattern)
d768 2
a769 2
    void Tcl_RegExpRange(Tcl_RegExp regexp, int index, char **startPtr, \
	    char **endPtr)
d783 1
d785 1
a785 1
    int Tcl_Seek(Tcl_Channel chan, int offset, int mode)
d794 1
a794 1
    void Tcl_SetAssocData(Tcl_Interp *interp, char *name, \
d801 2
a802 2
    int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan, \
	    char *optionName, char *newValue)
d805 2
a806 2
    int Tcl_SetCommandInfo(Tcl_Interp *interp, char *cmdName, \
	    Tcl_CmdInfo *infoPtr)
d824 1
a824 1
    void Tcl_SetResult(Tcl_Interp *interp, char *str, \
d840 2
a841 2
    char * Tcl_SetVar(Tcl_Interp *interp, char *varName, char *newValue, \
	    int flags)
d844 2
a845 2
    char * Tcl_SetVar2(Tcl_Interp *interp, char *part1, char *part2, \
	    char *newValue, int flags)
d848 1
a848 1
    char * Tcl_SignalId(int sig)
d851 1
a851 1
    char * Tcl_SignalMsg(int sig)
d857 2
a858 2
    int Tcl_SplitList(Tcl_Interp *interp, CONST char *listStr, int *argcPtr, \
	    char ***argvPtr)
d860 1
d862 1
a862 1
    void Tcl_SplitPath(CONST char *path, int *argcPtr, char ***argvPtr)
d865 1
a865 1
    void Tcl_StaticPackage(Tcl_Interp *interp, char *pkgName, \
d871 1
d873 1
a873 1
    int Tcl_Tell(Tcl_Channel chan)
d876 1
a876 1
    int Tcl_TraceVar(Tcl_Interp *interp, char *varName, int flags, \
d880 1
a880 1
    int Tcl_TraceVar2(Tcl_Interp *interp, char *part1, char *part2, \
d884 1
a884 1
    char * Tcl_TranslateFileName(Tcl_Interp *interp, char *name, \
d888 1
a888 1
    int Tcl_Ungets(Tcl_Channel chan, char *str, int len, int atHead)
d891 1
a891 1
    void Tcl_UnlinkVar(Tcl_Interp *interp, char *varName)
d897 1
a897 1
    int Tcl_UnsetVar(Tcl_Interp *interp, char *varName, int flags)
d900 2
a901 1
    int Tcl_UnsetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags)
d904 1
a904 1
    void Tcl_UntraceVar(Tcl_Interp *interp, char *varName, int flags, \
d908 3
a910 2
    void Tcl_UntraceVar2(Tcl_Interp *interp, char *part1, char *part2, \
	    int flags, Tcl_VarTraceProc *proc, ClientData clientData)
d913 1
a913 1
    void Tcl_UpdateLinkedVar(Tcl_Interp *interp, char *varName)
d916 2
a917 2
    int Tcl_UpVar(Tcl_Interp *interp, char *frameName, char *varName, \
	    char *localName, int flags)
d920 2
a921 2
    int Tcl_UpVar2(Tcl_Interp *interp, char *frameName, char *part1, \
	    char *part2, char *localName, int flags)
d927 1
a927 1
    ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, char *varName, \
d931 2
a932 2
    ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, char *part1, \
	    char *part2, int flags, Tcl_VarTraceProc *procPtr, \
d936 1
a936 1
    int Tcl_Write(Tcl_Channel chan, char *s, int slen)
d939 2
a940 2
    void Tcl_WrongNumArgs(Tcl_Interp *interp, int objc, \
	    Tcl_Obj *CONST objv[], char *message)
d943 1
a943 1
    int Tcl_DumpActiveMemory(char *fileName)
d946 1
a946 1
    void Tcl_ValidateAllMemory(char *file, int line)
d948 1
d956 1
a956 1
    char * Tcl_HashStats(Tcl_HashTable *tablePtr)
d959 2
a960 1
    char * Tcl_ParseVar(Tcl_Interp *interp, char *str, char **termPtr)
d963 2
a964 2
    char * Tcl_PkgPresent(Tcl_Interp *interp, char *name, char *version, \
	    int exact)
d967 2
a968 2
    char * Tcl_PkgPresentEx(Tcl_Interp *interp, char *name, char *version, \
	    int exact, ClientData *clientDataPtr)
d971 2
a972 1
    int Tcl_PkgProvide(Tcl_Interp *interp, char *name, char *version)
d975 2
a976 2
    char * Tcl_PkgRequire(Tcl_Interp *interp, char *name, char *version, \
	    int exact)
d987 2
a988 2
declare 278 {unix win} {
    void Tcl_PanicVA(char *format, va_list argList)
d1012 2
a1013 3
    Tcl_Channel Tcl_StackChannel(Tcl_Interp *interp, \
	    Tcl_ChannelType *typePtr, ClientData instanceData, \
	    int mask, Tcl_Channel prevChan)
d1021 6
a1027 2
#  declare 284 generic {
#  }
d1050 2
a1051 1
    int Tcl_EvalEx(Tcl_Interp *interp, char *script, int numBytes, int flags)
d1054 1
a1054 1
    int Tcl_EvalObjv(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], \
d1064 3
a1066 3
    int Tcl_ExternalToUtf(Tcl_Interp *interp, Tcl_Encoding encoding, \
	    CONST char *src, int srcLen, int flags, \
	    Tcl_EncodingState *statePtr, char *dst, int dstLen, \
d1070 2
a1071 2
    char * Tcl_ExternalToUtfDString(Tcl_Encoding encoding, CONST char *src, \
	    int srcLen, Tcl_DString *dsPtr)
d1089 1
a1089 1
    char * Tcl_GetEncodingName(Tcl_Encoding encoding)
d1095 3
a1097 2
    int Tcl_GetIndexFromObjStruct(Tcl_Interp *interp, Tcl_Obj *objPtr, \
	    char **tablePtr, int offset, char *msg, int flags, int *indexPtr)
d1103 2
a1104 2
    Tcl_Obj * Tcl_GetVar2Ex(Tcl_Interp *interp, char *part1, char *part2, \
	    int flags)
d1119 1
a1119 1
    void Tcl_ConditionWait(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr, \
d1126 1
a1126 1
    int Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead, \
d1139 2
a1140 2
    Tcl_Obj * Tcl_SetVar2Ex(Tcl_Interp *interp, char *part1, char *part2, \
	    Tcl_Obj *newValuePtr, int flags)
d1146 1
a1146 1
    void Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event* evPtr, \
d1165 1
a1165 1
    char * Tcl_UtfAtIndex(CONST char *src, int index)
d1174 1
a1174 1
    char * Tcl_UtfFindFirst(CONST char *src, int ch)
d1177 1
a1177 1
    char * Tcl_UtfFindLast(CONST char *src, int ch)
d1180 1
a1180 1
    char * Tcl_UtfNext(CONST char *src)
d1183 1
a1183 1
    char * Tcl_UtfPrev(CONST char *src, CONST char *start)
d1186 3
a1188 3
    int Tcl_UtfToExternal(Tcl_Interp *interp, Tcl_Encoding encoding, \
	    CONST char *src, int srcLen, int flags, \
	    Tcl_EncodingState *statePtr, char *dst, int dstLen, \
d1192 2
a1193 2
    char * Tcl_UtfToExternalDString(Tcl_Encoding encoding, CONST char *src, \
	    int srcLen, Tcl_DString *dsPtr)
d1217 1
a1217 1
    char * Tcl_GetDefaultEncodingDir(void)
d1220 1
a1220 1
    void Tcl_SetDefaultEncodingDir(char *path)
d1250 1
a1250 1
    int Tcl_UniCharLen(Tcl_UniChar *str)
d1253 2
a1254 2
    int Tcl_UniCharNcmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,\
    unsigned long n)
d1257 2
a1258 2
    char * Tcl_UniCharToUtfDString(CONST Tcl_UniChar *string, int numChars, \
 	    Tcl_DString *dsPtr)
d1261 2
a1262 2
    Tcl_UniChar * Tcl_UtfToUniCharDString(CONST char *string, int length, \
	    Tcl_DString *dsPtr)
d1265 2
a1266 1
    Tcl_RegExp	Tcl_GetRegExpFromObj(Tcl_Interp *interp, Tcl_Obj *patObj, int flags)
d1270 1
a1270 1
    Tcl_Obj *Tcl_EvalTokens (Tcl_Interp *interp, Tcl_Token *tokenPtr, \
d1274 1
a1274 1
    void Tcl_FreeParse (Tcl_Parse *parsePtr)
d1277 2
a1278 2
    void Tcl_LogCommandInfo (Tcl_Interp *interp, char *script, \
	    char *command, int length)
d1281 2
a1282 2
    int Tcl_ParseBraces (Tcl_Interp *interp, char *string, \
	    int numBytes, Tcl_Parse *parsePtr,int append, char **termPtr)
d1285 1
a1285 1
    int Tcl_ParseCommand (Tcl_Interp *interp, char *string, int numBytes, \
d1289 1
a1289 1
    int Tcl_ParseExpr(Tcl_Interp *interp, char *string, int numBytes, \
d1293 3
a1295 2
    int Tcl_ParseQuotedString(Tcl_Interp *interp, char *string, int numBytes, \
	    Tcl_Parse *parsePtr, int append, char **termPtr)
d1298 2
a1299 2
    int Tcl_ParseVarName (Tcl_Interp *interp, char *string, \
	    int numBytes, Tcl_Parse *parsePtr, int append)
d1301 2
d1337 1
a1337 1
    int Tcl_RegExpExecObj(Tcl_Interp *interp, Tcl_RegExp regexp, \
d1344 1
a1344 1
    Tcl_Obj * Tcl_NewUnicodeObj(Tcl_UniChar *unicode, int numChars)
d1347 1
a1347 1
    void Tcl_SetUnicodeObj(Tcl_Obj *objPtr, Tcl_UniChar *unicode, \
d1351 1
a1351 1
    int Tcl_GetCharLength (Tcl_Obj *objPtr)
d1354 1
a1354 1
    Tcl_UniChar Tcl_GetUniChar (Tcl_Obj *objPtr, int index)
d1357 1
a1357 1
    Tcl_UniChar * Tcl_GetUnicode (Tcl_Obj *objPtr)
d1360 1
a1360 1
    Tcl_Obj * Tcl_GetRange (Tcl_Obj *objPtr, int first, int last)
d1363 2
a1364 2
    void Tcl_AppendUnicodeToObj (Tcl_Obj *objPtr, \
	    Tcl_UniChar *unicode, int length)
d1367 1
a1367 1
    int Tcl_RegExpMatchObj(Tcl_Interp *interp, Tcl_Obj *stringObj, \
d1380 1
a1380 1
    int Tcl_GetChannelNamesEx(Tcl_Interp *interp, char *pattern)
d1383 1
a1383 1
    int Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp *interp, \
d1387 1
a1387 1
    void Tcl_ConditionFinalize (Tcl_Condition *condPtr)
d1390 1
a1390 1
    void Tcl_MutexFinalize (Tcl_Mutex *mutex)
d1393 1
a1393 1
    int Tcl_CreateThread (Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc proc, \
d1397 1
d1399 1
a1399 1
    int Tcl_ReadRaw (Tcl_Channel chan, char *dst, int bytesToRead)
d1402 1
a1402 1
    int Tcl_WriteRaw (Tcl_Channel chan, char *src, int srcLen)
d1405 1
a1405 1
    Tcl_Channel Tcl_GetTopChannel (Tcl_Channel chan)
d1408 1
a1408 1
    int Tcl_ChannelBuffered (Tcl_Channel chan)
d1411 1
a1411 1
    char * Tcl_ChannelName(Tcl_ChannelType *chanTypePtr)
d1417 1
a1417 1
    Tcl_DriverBlockModeProc * Tcl_ChannelBlockModeProc(Tcl_ChannelType \
d1436 1
a1436 1
    Tcl_DriverSetOptionProc * Tcl_ChannelSetOptionProc(Tcl_ChannelType \
d1440 1
a1440 1
    Tcl_DriverGetOptionProc * Tcl_ChannelGetOptionProc(Tcl_ChannelType \
d1447 1
a1447 1
    Tcl_DriverGetHandleProc * Tcl_ChannelGetHandleProc(Tcl_ChannelType \
d1454 1
a1454 1
    Tcl_DriverHandlerProc * Tcl_ChannelHandlerProc(Tcl_ChannelType \
d1458 299
d1792 2
a1793 2
    int Tcl_MacEvalResource(Tcl_Interp *interp, char *resourceName, \
	    int resourceNumber, char *fileName)
d1796 3
a1798 3
    Handle Tcl_MacFindResource(Tcl_Interp *interp, long resourceType, \
	    char *resourceName, int resourceNumber, char *resFileRef, \
	    int * releaseIt)
d1805 1
a1805 1
    int Tcl_GetOSTypeFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, \
d1816 1
a1816 2
# Tcl shared library.  They are found in the compat directory
# except the panic routine which is found in tclMacPanic.h.
d1825 11
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a9 1
# Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
d13 1
a13 1
# RCS: @@(#) $Id: tcl.decls,v 1.94 2002/08/31 06:09:45 das Exp $
d30 2
a31 2
    int Tcl_PkgProvideEx(Tcl_Interp* interp, CONST char* name,
	    CONST char* version, ClientData clientData)
d34 2
a35 2
    CONST84_RETURN char * Tcl_PkgRequireEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d38 1
a38 1
    void Tcl_Panic(CONST char *format, ...)
d50 1
a50 1
    char * Tcl_DbCkalloc(unsigned int size, CONST char *file, int line)
d53 1
a53 1
    int Tcl_DbCkfree(char *ptr, CONST char *file, int line)
d56 1
a56 2
    char * Tcl_DbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
d64 1
a64 1
    void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc,
d87 1
a87 1
    void Tcl_AppendToObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d93 1
a93 1
    int Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr,
d97 1
a97 1
    void Tcl_DbDecrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d100 1
a100 1
    void Tcl_DbIncrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d103 1
a103 1
    int Tcl_DbIsShared(Tcl_Obj *objPtr, CONST char *file, int line)
d106 1
a106 1
    Tcl_Obj * Tcl_DbNewBooleanObj(int boolValue, CONST char *file, int line)
d109 2
a110 2
    Tcl_Obj * Tcl_DbNewByteArrayObj(CONST unsigned char *bytes, int length,
	    CONST char *file, int line)
d113 1
a113 2
    Tcl_Obj * Tcl_DbNewDoubleObj(double doubleValue,
	    CONST char *file, int line)
d116 2
a117 2
    Tcl_Obj * Tcl_DbNewListObj(int objc, Tcl_Obj *CONST *objv, 
	    CONST char *file, int line)
d120 1
a120 1
    Tcl_Obj * Tcl_DbNewLongObj(long longValue, CONST char *file, int line)
d123 1
a123 1
    Tcl_Obj * Tcl_DbNewObj(CONST char *file, int line)
d126 2
a127 2
    Tcl_Obj * Tcl_DbNewStringObj(CONST char *bytes, int length,
	    CONST char *file, int line)
d136 1
a136 1
    int Tcl_GetBoolean(Tcl_Interp *interp, CONST char *str, int *boolPtr)
d139 1
a139 1
    int Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d146 1
a146 1
    int Tcl_GetDouble(Tcl_Interp *interp, CONST char *str, double *doublePtr)
d149 1
a149 1
    int Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d153 2
a154 2
    int Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST84 char **tablePtr, CONST char *msg, int flags, int *indexPtr)
d157 1
a157 1
    int Tcl_GetInt(Tcl_Interp *interp, CONST char *str, int *intPtr)
d166 1
a166 1
    Tcl_ObjType * Tcl_GetObjType(CONST char *typeName)
d175 1
a175 1
    int Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr,
d179 1
a179 1
    int Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr,
d183 1
a183 1
    int Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr,
d187 1
a187 1
    int Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index,
d191 1
a191 2
    int Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    int *lengthPtr)
d194 1
a194 1
    int Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first,
d198 1
a198 1
    Tcl_Obj *Tcl_NewBooleanObj(int boolValue)
d201 1
a201 1
    Tcl_Obj *Tcl_NewByteArrayObj(CONST unsigned char* bytes, int length)
d228 1
a228 2
    void Tcl_SetByteArrayObj(Tcl_Obj *objPtr, CONST unsigned char *bytes,
	    int length)
d246 1
a246 1
    void Tcl_SetStringObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d252 1
a252 1
    void Tcl_AddObjErrorInfo(Tcl_Interp *interp, CONST char *message,
d265 1
a265 1
    Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc,
d287 2
a288 2
    int Tcl_BadChannelOption(Tcl_Interp *interp, CONST char *optionName,
	    CONST char *optionList)
d291 1
a291 1
    void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc,
d301 1
a301 1
    int Tcl_CommandComplete(CONST char *cmd)
d304 1
a304 1
    char * Tcl_Concat(int argc, CONST84 char * CONST *argv)
d310 1
a310 1
    int Tcl_ConvertCountedElement(CONST char *src, int length, char *dst,
d314 2
a315 3
    int Tcl_CreateAlias(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int argc,
	    CONST84 char * CONST *argv)
d318 2
a319 2
    int Tcl_CreateAliasObj(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int objc,
d323 2
a324 2
    Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr,
	    CONST char *chanName, ClientData instanceData, int mask)
d327 1
a327 1
    void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask,
d331 1
a331 1
    void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d335 2
a336 2
    Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, CONST char *cmdName,
	    Tcl_CmdProc *proc, ClientData clientData,
d340 1
a340 1
    void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc,
d350 2
a351 3
    void Tcl_CreateMathFunc(Tcl_Interp *interp, CONST char *name,
	    int numArgs, Tcl_ValueType *argTypes, 
	    Tcl_MathProc *proc, ClientData clientData)
d354 2
a355 3
    Tcl_Command Tcl_CreateObjCommand(Tcl_Interp *interp,
	    CONST char *cmdName,
	    Tcl_ObjCmdProc *proc, ClientData clientData,
d359 1
a359 1
    Tcl_Interp * Tcl_CreateSlave(Tcl_Interp *interp, CONST char *slaveName,
d363 1
a363 1
    Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds,
d367 1
a367 1
    Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level,
d371 1
a371 1
    void Tcl_DeleteAssocData(Tcl_Interp *interp, CONST char *name)
d374 1
a374 1
    void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc,
d378 1
a378 1
    void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d382 1
a382 1
    int Tcl_DeleteCommand(Tcl_Interp *interp, CONST char *cmdName)
d391 1
a391 1
    void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc,
d416 1
a416 1
    void Tcl_DontCallWhenDeleted(Tcl_Interp *interp,
d456 1
a456 1
    CONST84_RETURN char * Tcl_ErrnoId(void)
d459 1
a459 1
    CONST84_RETURN char * Tcl_ErrnoMsg(int err)
d462 1
a462 1
    int Tcl_Eval(Tcl_Interp *interp, CONST char *string)
a463 1
# This is obsolete, use Tcl_FSEvalFile
d465 1
a465 1
    int Tcl_EvalFile(Tcl_Interp *interp, CONST char *fileName)
d477 2
a478 2
    int Tcl_ExposeCommand(Tcl_Interp *interp, CONST char *hiddenCmdToken,
	    CONST char *cmdName)
d481 1
a481 1
    int Tcl_ExprBoolean(Tcl_Interp *interp, CONST char *str, int *ptr)
d487 1
a487 1
    int Tcl_ExprDouble(Tcl_Interp *interp, CONST char *str, double *ptr)
d493 1
a493 1
    int Tcl_ExprLong(Tcl_Interp *interp, CONST char *str, long *ptr)
d499 1
a499 1
    int Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d503 1
a503 1
    int Tcl_ExprString(Tcl_Interp *interp, CONST char *string)
d512 1
a512 1
    Tcl_HashEntry * Tcl_FirstHashEntry(Tcl_HashTable *tablePtr,
d522 3
a524 3
    int Tcl_GetAlias(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *argcPtr, CONST84 char ***argvPtr)
d527 3
a529 3
    int Tcl_GetAliasObj(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *objcPtr, Tcl_Obj ***objv)
d532 1
a532 1
    ClientData Tcl_GetAssocData(Tcl_Interp *interp, CONST char *name,
d536 1
a536 1
    Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, CONST char *chanName,
d543 1
a543 1
    int Tcl_GetChannelHandle(Tcl_Channel chan, int direction,
d553 1
a553 1
    CONST84_RETURN char * Tcl_GetChannelName(Tcl_Channel chan)
d556 2
a557 2
    int Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, Tcl_DString *dsPtr)
d563 1
a563 1
    int Tcl_GetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
d567 1
a567 2
    CONST84_RETURN char * Tcl_GetCommandName(Tcl_Interp *interp,
	    Tcl_Command command)
d573 1
a573 1
    CONST84_RETURN char * Tcl_GetHostName(void)
d592 1
a592 1
    int Tcl_GetOpenFile(Tcl_Interp *interp, CONST char *str, int forWriting,
d595 1
a595 2
# Obsolete.  Should now use Tcl_FSGetPathType which is objectified
# and therefore usually faster.
d597 1
a597 1
    Tcl_PathType Tcl_GetPathType(CONST char *path)
d609 1
a609 1
    Tcl_Interp * Tcl_GetSlave(Tcl_Interp *interp, CONST char *slaveName)
d615 1
a615 1
    CONST84_RETURN char * Tcl_GetStringResult(Tcl_Interp *interp)
d618 1
a618 2
    CONST84_RETURN char * Tcl_GetVar(Tcl_Interp *interp, CONST char *varName,
	    int flags)
d621 1
a621 2
    CONST84_RETURN char * Tcl_GetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d624 1
a624 1
    int Tcl_GlobalEval(Tcl_Interp *interp, CONST char *command)
d630 2
a631 2
    int Tcl_HideCommand(Tcl_Interp *interp, CONST char *cmdName,
	    CONST char *hiddenCmdToken)
a650 1
# Obsolete, use Tcl_FSJoinPath
d652 1
a652 2
    char * Tcl_JoinPath(int argc, CONST84 char * CONST *argv,
	    Tcl_DString *resultPtr)
d655 1
a655 2
    int Tcl_LinkVar(Tcl_Interp *interp, CONST char *varName, char *addr,
	    int type)
d673 1
a673 1
    char * Tcl_Merge(int argc, CONST84 char * CONST *argv)
d682 1
a682 1
    Tcl_Obj * Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d686 1
a686 1
    Tcl_Obj * Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d690 2
a691 2
    Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc,
	    CONST84 char **argv, int flags)
a692 1
# This is obsolete, use Tcl_FSOpenFileChannel
d694 2
a695 2
    Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, CONST char *fileName,
	    CONST char *modeString, int permissions)
d698 2
a699 2
    Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port,
	    CONST char *address, CONST char *myaddr, int myport, int async)
d702 2
a703 3
    Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port,
	    CONST char *host, Tcl_TcpAcceptProc *acceptProc,
	    ClientData callbackData)
d715 1
a715 1
    CONST84_RETURN char * Tcl_PosixError(Tcl_Interp *interp)
d727 1
a727 1
    int Tcl_RecordAndEval(Tcl_Interp *interp, CONST char *cmd, int flags)
d739 1
a739 1
    Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, CONST char *string)
d742 1
a742 1
    int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp,
d746 1
a746 2
    int Tcl_RegExpMatch(Tcl_Interp *interp, CONST char *str,
	    CONST char *pattern)
d749 2
a750 2
    void Tcl_RegExpRange(Tcl_RegExp regexp, int index,
	    CONST84 char **startPtr, CONST84 char **endPtr)
a763 1
# Obsolete
d765 1
a765 1
    int Tcl_SeekOld(Tcl_Channel chan, int offset, int mode)
d774 1
a774 1
    void Tcl_SetAssocData(Tcl_Interp *interp, CONST char *name,
d781 2
a782 2
    int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, CONST char *newValue)
d785 2
a786 2
    int Tcl_SetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
	    CONST Tcl_CmdInfo *infoPtr)
d804 1
a804 1
    void Tcl_SetResult(Tcl_Interp *interp, char *str,
d820 2
a821 2
    CONST84_RETURN char * Tcl_SetVar(Tcl_Interp *interp, CONST char *varName,
	    CONST char *newValue, int flags)
d824 2
a825 2
    CONST84_RETURN char * Tcl_SetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, CONST char *newValue, int flags)
d828 1
a828 1
    CONST84_RETURN char * Tcl_SignalId(int sig)
d831 1
a831 1
    CONST84_RETURN char * Tcl_SignalMsg(int sig)
d837 2
a838 2
    int Tcl_SplitList(Tcl_Interp *interp, CONST char *listStr, int *argcPtr,
	    CONST84 char ***argvPtr)
a839 1
# Obsolete, use Tcl_FSSplitPath
d841 1
a841 1
    void Tcl_SplitPath(CONST char *path, int *argcPtr, CONST84 char ***argvPtr)
d844 1
a844 1
    void Tcl_StaticPackage(Tcl_Interp *interp, CONST char *pkgName,
a849 1
# Obsolete
d851 1
a851 1
    int Tcl_TellOld(Tcl_Channel chan)
d854 1
a854 1
    int Tcl_TraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d858 1
a858 1
    int Tcl_TraceVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
d862 1
a862 1
    char * Tcl_TranslateFileName(Tcl_Interp *interp, CONST char *name,
d866 1
a866 1
    int Tcl_Ungets(Tcl_Channel chan, CONST char *str, int len, int atHead)
d869 1
a869 1
    void Tcl_UnlinkVar(Tcl_Interp *interp, CONST char *varName)
d875 1
a875 1
    int Tcl_UnsetVar(Tcl_Interp *interp, CONST char *varName, int flags)
d878 1
a878 2
    int Tcl_UnsetVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
	    int flags)
d881 1
a881 1
    void Tcl_UntraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d885 2
a886 3
    void Tcl_UntraceVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *proc,
	    ClientData clientData)
d889 1
a889 1
    void Tcl_UpdateLinkedVar(Tcl_Interp *interp, CONST char *varName)
d892 2
a893 2
    int Tcl_UpVar(Tcl_Interp *interp, CONST char *frameName,
	    CONST char *varName, CONST char *localName, int flags)
d896 2
a897 2
    int Tcl_UpVar2(Tcl_Interp *interp, CONST char *frameName, CONST char *part1,
	    CONST char *part2, CONST char *localName, int flags)
d903 1
a903 1
    ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, CONST char *varName,
d907 2
a908 2
    ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *procPtr,
d912 1
a912 1
    int Tcl_Write(Tcl_Channel chan, CONST char *s, int slen)
d915 2
a916 2
    void Tcl_WrongNumArgs(Tcl_Interp *interp, int objc,
	    Tcl_Obj *CONST objv[], CONST char *message)
d919 1
a919 1
    int Tcl_DumpActiveMemory(CONST char *fileName)
d922 1
a922 1
    void Tcl_ValidateAllMemory(CONST char *file, int line)
a923 1

d931 1
a931 1
    CONST84_RETURN char * Tcl_HashStats(Tcl_HashTable *tablePtr)
d934 1
a934 2
    CONST84_RETURN char * Tcl_ParseVar(Tcl_Interp *interp, CONST char *str,
	    CONST84 char **termPtr)
d937 2
a938 2
    CONST84_RETURN char * Tcl_PkgPresent(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact)
d941 2
a942 2
    CONST84_RETURN char * Tcl_PkgPresentEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d945 1
a945 2
    int Tcl_PkgProvide(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version)
d948 2
a949 2
    CONST84_RETURN char * Tcl_PkgRequire(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version, int exact)
d960 2
a961 2
declare 278 generic {
    void Tcl_PanicVA(CONST char *format, va_list argList)
d985 3
a987 2
    Tcl_Channel Tcl_StackChannel(Tcl_Interp *interp, Tcl_ChannelType *typePtr,
	    ClientData instanceData, int mask, Tcl_Channel prevChan)
a994 6

# 284 was reserved, but added in 8.4a2
declare 284 generic {
    void Tcl_SetMainLoop(Tcl_MainLoopProc *proc)
}

d996 2
d1020 1
a1020 2
    int Tcl_EvalEx(Tcl_Interp *interp, CONST char *script, int numBytes,
	    int flags)
d1023 1
a1023 1
    int Tcl_EvalObjv(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
d1033 3
a1035 3
    int Tcl_ExternalToUtf(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1039 2
a1040 2
    char * Tcl_ExternalToUtfDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1058 1
a1058 1
    CONST84_RETURN char * Tcl_GetEncodingName(Tcl_Encoding encoding)
d1064 2
a1065 3
    int Tcl_GetIndexFromObjStruct(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST VOID *tablePtr, int offset, CONST char *msg, int flags,
	    int *indexPtr)
d1071 2
a1072 2
    Tcl_Obj * Tcl_GetVar2Ex(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d1087 1
a1087 1
    void Tcl_ConditionWait(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr,
d1094 1
a1094 1
    int Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead,
d1107 2
a1108 2
    Tcl_Obj * Tcl_SetVar2Ex(Tcl_Interp *interp, CONST char *part1, 
            CONST char *part2, Tcl_Obj *newValuePtr, int flags)
d1114 1
a1114 1
    void Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event* evPtr,
d1133 1
a1133 1
    CONST84_RETURN char * Tcl_UtfAtIndex(CONST char *src, int index)
d1142 1
a1142 1
    CONST84_RETURN char * Tcl_UtfFindFirst(CONST char *src, int ch)
d1145 1
a1145 1
    CONST84_RETURN char * Tcl_UtfFindLast(CONST char *src, int ch)
d1148 1
a1148 1
    CONST84_RETURN char * Tcl_UtfNext(CONST char *src)
d1151 1
a1151 1
    CONST84_RETURN char * Tcl_UtfPrev(CONST char *src, CONST char *start)
d1154 3
a1156 3
    int Tcl_UtfToExternal(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1160 2
a1161 2
    char * Tcl_UtfToExternalDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1185 1
a1185 1
    CONST84_RETURN char * Tcl_GetDefaultEncodingDir(void)
d1188 1
a1188 1
    void Tcl_SetDefaultEncodingDir(CONST char *path)
d1218 1
a1218 1
    int Tcl_UniCharLen(CONST Tcl_UniChar *str)
d1221 2
a1222 2
    int Tcl_UniCharNcmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
d1225 2
a1226 2
    char * Tcl_UniCharToUtfDString(CONST Tcl_UniChar *string,
	    int numChars, Tcl_DString *dsPtr)
d1229 2
a1230 2
    Tcl_UniChar * Tcl_UtfToUniCharDString(CONST char *string,
	    int length, Tcl_DString *dsPtr)
d1233 1
a1233 2
    Tcl_RegExp Tcl_GetRegExpFromObj(Tcl_Interp *interp, Tcl_Obj *patObj,
	    int flags)
d1237 1
a1237 1
    Tcl_Obj *Tcl_EvalTokens(Tcl_Interp *interp, Tcl_Token *tokenPtr,
d1241 1
a1241 1
    void Tcl_FreeParse(Tcl_Parse *parsePtr)
d1244 2
a1245 2
    void Tcl_LogCommandInfo(Tcl_Interp *interp, CONST char *script,
	    CONST char *command, int length)
d1248 2
a1249 2
    int Tcl_ParseBraces(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append, CONST84 char **termPtr)
d1252 1
a1252 1
    int Tcl_ParseCommand(Tcl_Interp *interp, CONST char *string, int numBytes,
d1256 1
a1256 1
    int Tcl_ParseExpr(Tcl_Interp *interp, CONST char *string, int numBytes,
d1260 2
a1261 3
    int Tcl_ParseQuotedString(Tcl_Interp *interp, CONST char *string,
	    int numBytes, Tcl_Parse *parsePtr, int append,
	    CONST84 char **termPtr)
d1264 2
a1265 2
    int Tcl_ParseVarName(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append)
a1266 2
# These 4 functions are obsolete, use Tcl_FSGetCwd, Tcl_FSChdir,
# Tcl_FSAccess and Tcl_FSStat
d1301 1
a1301 1
    int Tcl_RegExpExecObj(Tcl_Interp *interp, Tcl_RegExp regexp,
d1308 1
a1308 1
    Tcl_Obj * Tcl_NewUnicodeObj(CONST Tcl_UniChar *unicode, int numChars)
d1311 1
a1311 1
    void Tcl_SetUnicodeObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
d1315 1
a1315 1
    int Tcl_GetCharLength(Tcl_Obj *objPtr)
d1318 1
a1318 1
    Tcl_UniChar Tcl_GetUniChar(Tcl_Obj *objPtr, int index)
d1321 1
a1321 1
    Tcl_UniChar * Tcl_GetUnicode(Tcl_Obj *objPtr)
d1324 1
a1324 1
    Tcl_Obj * Tcl_GetRange(Tcl_Obj *objPtr, int first, int last)
d1327 2
a1328 2
    void Tcl_AppendUnicodeToObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
	    int length)
d1331 1
a1331 1
    int Tcl_RegExpMatchObj(Tcl_Interp *interp, Tcl_Obj *stringObj,
d1344 1
a1344 1
    int Tcl_GetChannelNamesEx(Tcl_Interp *interp, CONST char *pattern)
d1347 1
a1347 1
    int Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp *interp,
d1351 1
a1351 1
    void Tcl_ConditionFinalize(Tcl_Condition *condPtr)
d1354 1
a1354 1
    void Tcl_MutexFinalize(Tcl_Mutex *mutex)
d1357 1
a1357 1
    int Tcl_CreateThread(Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc proc,
a1360 1
# Introduced in 8.3.2
d1362 1
a1362 1
    int Tcl_ReadRaw(Tcl_Channel chan, char *dst, int bytesToRead)
d1365 1
a1365 1
    int Tcl_WriteRaw(Tcl_Channel chan, CONST char *src, int srcLen)
d1368 1
a1368 1
    Tcl_Channel Tcl_GetTopChannel(Tcl_Channel chan)
d1371 1
a1371 1
    int Tcl_ChannelBuffered(Tcl_Channel chan)
d1374 1
a1374 1
    CONST84_RETURN char * Tcl_ChannelName(Tcl_ChannelType *chanTypePtr)
d1380 1
a1380 1
    Tcl_DriverBlockModeProc * Tcl_ChannelBlockModeProc(Tcl_ChannelType
d1399 1
a1399 1
    Tcl_DriverSetOptionProc * Tcl_ChannelSetOptionProc(Tcl_ChannelType
d1403 1
a1403 1
    Tcl_DriverGetOptionProc * Tcl_ChannelGetOptionProc(Tcl_ChannelType
d1410 1
a1410 1
    Tcl_DriverGetHandleProc * Tcl_ChannelGetHandleProc(Tcl_ChannelType
d1417 1
a1417 1
    Tcl_DriverHandlerProc * Tcl_ChannelHandlerProc(Tcl_ChannelType
a1420 299
# Introduced in 8.4a2
declare 412 generic {
    int Tcl_JoinThread(Tcl_ThreadId id, int* result)
}
declare 413 generic {
    int Tcl_IsChannelShared(Tcl_Channel channel)
}
declare 414 generic {
    int Tcl_IsChannelRegistered(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 415 generic {
    void Tcl_CutChannel(Tcl_Channel channel)
}
declare 416 generic {
    void Tcl_SpliceChannel(Tcl_Channel channel)
}
declare 417 generic {
    void Tcl_ClearChannelHandlers(Tcl_Channel channel)
}
declare 418 generic {
    int Tcl_IsChannelExisting(CONST char* channelName)
}

declare 419 generic {
    int Tcl_UniCharNcasecmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
}
declare 420 generic {
    int Tcl_UniCharCaseMatch(CONST Tcl_UniChar *ustr,
	    CONST Tcl_UniChar *pattern, int nocase)
}

declare 421 generic {
    Tcl_HashEntry *Tcl_FindHashEntry(Tcl_HashTable *tablePtr, CONST char *key)
}

declare 422 generic {
    Tcl_HashEntry *Tcl_CreateHashEntry(Tcl_HashTable *tablePtr,
	    CONST char *key, int *newPtr)
}

declare 423 generic {
    void Tcl_InitCustomHashTable(Tcl_HashTable *tablePtr, int keyType,
	    Tcl_HashKeyType *typePtr)
}

declare 424 generic {
    void Tcl_InitObjHashTable(Tcl_HashTable *tablePtr)
}
declare 425 generic {
    ClientData Tcl_CommandTraceInfo(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *procPtr,
	    ClientData prevClientData)
}
declare 426 generic {
    int Tcl_TraceCommand(Tcl_Interp *interp, CONST char *varName, int flags,
	    Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 427 generic {
    void Tcl_UntraceCommand(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 428 generic {
    char * Tcl_AttemptAlloc(unsigned int size)
}
declare 429 generic {
    char * Tcl_AttemptDbCkalloc(unsigned int size, CONST char *file, int line)
}
declare 430 generic {
    char * Tcl_AttemptRealloc(char *ptr, unsigned int size)
}
declare 431 generic {
    char * Tcl_AttemptDbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
}
declare 432 generic {
    int Tcl_AttemptSetObjLength(Tcl_Obj *objPtr, int length)
}
declare 433 generic {
    Tcl_ThreadId Tcl_GetChannelThread(Tcl_Channel channel)
}
# introduced in 8.4a3
declare 434 generic {
    Tcl_UniChar * Tcl_GetUnicodeFromObj(Tcl_Obj *objPtr, int *lengthPtr)
}
declare 435 generic {
    int Tcl_GetMathFuncInfo(Tcl_Interp *interp, CONST char *name,
	    int *numArgsPtr, Tcl_ValueType **argTypesPtr,
	    Tcl_MathProc **procPtr, ClientData *clientDataPtr)
}
declare 436 generic {
    Tcl_Obj * Tcl_ListMathFuncs(Tcl_Interp *interp, CONST char *pattern)
}
declare 437 generic {
    Tcl_Obj * Tcl_SubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags)
}
declare 438 generic {
    int Tcl_DetachChannel(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 439 generic {
    int Tcl_IsStandardChannel(Tcl_Channel channel)
}
# New functions due to TIP#17
declare 440 generic {
    int	Tcl_FSCopyFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 441 generic {
    int	Tcl_FSCopyDirectory(Tcl_Obj *srcPathPtr,
	    Tcl_Obj *destPathPtr, Tcl_Obj **errorPtr)
}
declare 442 generic {
    int	Tcl_FSCreateDirectory(Tcl_Obj *pathPtr)
}
declare 443 generic {
    int	Tcl_FSDeleteFile(Tcl_Obj *pathPtr)
}
declare 444 generic {
    int	Tcl_FSLoadFile(Tcl_Interp * interp,
	    Tcl_Obj *pathPtr, CONST char * sym1, CONST char * sym2,
	    Tcl_PackageInitProc ** proc1Ptr,
	    Tcl_PackageInitProc ** proc2Ptr,
	    Tcl_LoadHandle * handlePtr,
	    Tcl_FSUnloadFileProc **unloadProcPtr)
}
declare 445 generic {
    int	Tcl_FSMatchInDirectory(Tcl_Interp *interp, Tcl_Obj *result,
	    Tcl_Obj *pathPtr, CONST char *pattern, Tcl_GlobTypeData *types)
}
declare 446 generic {
    Tcl_Obj * Tcl_FSLink(Tcl_Obj *pathPtr, Tcl_Obj *toPtr, int linkAction)
}
declare 447 generic {
    int Tcl_FSRemoveDirectory(Tcl_Obj *pathPtr,
	    int recursive, Tcl_Obj **errorPtr)
}
declare 448 generic {
    int	Tcl_FSRenameFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 449 generic {
    int	Tcl_FSLstat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 450 generic {
    int Tcl_FSUtime(Tcl_Obj *pathPtr, struct utimbuf *tval)
}
declare 451 generic {
    int Tcl_FSFileAttrsGet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 452 generic {
    int Tcl_FSFileAttrsSet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj *objPtr)
}
declare 453 generic {
    CONST char ** Tcl_FSFileAttrStrings(Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 454 generic {
    int Tcl_FSStat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 455 generic {
    int Tcl_FSAccess(Tcl_Obj *pathPtr, int mode)
}
declare 456 generic {
    Tcl_Channel Tcl_FSOpenFileChannel(Tcl_Interp *interp, Tcl_Obj *pathPtr,
	    CONST char *modeString, int permissions)
}
declare 457 generic {
    Tcl_Obj*  Tcl_FSGetCwd(Tcl_Interp *interp)
}
declare 458 generic {
    int Tcl_FSChdir(Tcl_Obj *pathPtr)
}
declare 459 generic {
    int Tcl_FSConvertToPathType(Tcl_Interp *interp, Tcl_Obj *pathPtr)
}
declare 460 generic {
    Tcl_Obj* Tcl_FSJoinPath(Tcl_Obj *listObj, int elements)
}
declare 461 generic {
    Tcl_Obj* Tcl_FSSplitPath(Tcl_Obj* pathPtr, int *lenPtr)
}
declare 462 generic {
    int Tcl_FSEqualPaths(Tcl_Obj* firstPtr, Tcl_Obj* secondPtr)
}
declare 463 generic {
    Tcl_Obj* Tcl_FSGetNormalizedPath(Tcl_Interp *interp, Tcl_Obj* pathObjPtr)
}
declare 464 generic {
    Tcl_Obj* Tcl_FSJoinToPath(Tcl_Obj *basePtr, int objc,
	    Tcl_Obj *CONST objv[])
}
declare 465 generic {
    ClientData Tcl_FSGetInternalRep(Tcl_Obj* pathObjPtr,
	    Tcl_Filesystem *fsPtr)
}
declare 466 generic {
    Tcl_Obj* Tcl_FSGetTranslatedPath(Tcl_Interp *interp, Tcl_Obj* pathPtr)
}
declare 467 generic {
    int Tcl_FSEvalFile(Tcl_Interp *interp, Tcl_Obj *fileName)
}
declare 468 generic {
    Tcl_Obj* Tcl_FSNewNativePath(Tcl_Filesystem* fromFilesystem,
	    ClientData clientData)
}
declare 469 generic {
    CONST char* Tcl_FSGetNativePath(Tcl_Obj* pathObjPtr)
}
declare 470 generic {
    Tcl_Obj* Tcl_FSFileSystemInfo(Tcl_Obj* pathObjPtr)
}
declare 471 generic {
    Tcl_Obj* Tcl_FSPathSeparator(Tcl_Obj* pathObjPtr)
}
declare 472 generic {
    Tcl_Obj* Tcl_FSListVolumes(void)
}
declare 473 generic {
    int Tcl_FSRegister(ClientData clientData, Tcl_Filesystem *fsPtr)
}
declare 474 generic {
    int Tcl_FSUnregister(Tcl_Filesystem *fsPtr)
}
declare 475 generic {
    ClientData Tcl_FSData(Tcl_Filesystem *fsPtr)
}
declare 476 generic {
    CONST char* Tcl_FSGetTranslatedStringPath(Tcl_Interp *interp,
	    Tcl_Obj* pathPtr)
}
declare 477 generic {
    Tcl_Filesystem* Tcl_FSGetFileSystemForPath(Tcl_Obj* pathObjPtr)
}
declare 478 generic {
    Tcl_PathType Tcl_FSGetPathType(Tcl_Obj *pathObjPtr)
}
# New function due to TIP#49
declare 479 generic {
    int Tcl_OutputBuffered(Tcl_Channel chan)
}
declare 480 generic {
    void Tcl_FSMountsChanged(Tcl_Filesystem *fsPtr)
}	  
# New function due to TIP#56
declare 481 generic {
    int Tcl_EvalTokensStandard(Tcl_Interp *interp, Tcl_Token *tokenPtr,
	    int count)
}

# New export due to TIP#73 
declare 482 generic {
    void Tcl_GetTime(Tcl_Time* timeBuf)
}

# New exports due to TIP#32

declare 483 generic {
    Tcl_Trace Tcl_CreateObjTrace(Tcl_Interp* interp, int level, int flags,
	    Tcl_CmdObjTraceProc* objProc, ClientData clientData,
	    Tcl_CmdObjTraceDeleteProc* delProc)
}
declare 484 generic {
    int Tcl_GetCommandInfoFromToken(Tcl_Command token, Tcl_CmdInfo* infoPtr)
}
declare 485 generic {
    int Tcl_SetCommandInfoFromToken(Tcl_Command token,
	    CONST Tcl_CmdInfo* infoPtr)
}

### New functions on 64-bit dev branch ###
declare 486 generic {
    Tcl_Obj * Tcl_DbNewWideIntObj(Tcl_WideInt wideValue,
	    CONST char *file, int line)
}
declare 487 generic {
    int Tcl_GetWideIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tcl_WideInt *widePtr)
}
declare 488 generic {
    Tcl_Obj * Tcl_NewWideIntObj(Tcl_WideInt wideValue)
}
declare 489 generic {
    void Tcl_SetWideIntObj(Tcl_Obj *objPtr, Tcl_WideInt wideValue)
}
declare 490 generic {
    Tcl_StatBuf * Tcl_AllocStatBuf(void)
}
declare 491 generic {
    Tcl_WideInt Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset, int mode)
}
declare 492 generic {
    Tcl_WideInt Tcl_Tell(Tcl_Channel chan)
}

# New export due to TIP#91
declare 493 generic {
    Tcl_DriverWideSeekProc * Tcl_ChannelWideSeekProc(
	    Tcl_ChannelType *chanTypePtr)
}

d1456 2
a1457 2
    int Tcl_MacEvalResource(Tcl_Interp *interp, CONST char *resourceName,
	    int resourceNumber, CONST char *fileName)
d1460 3
a1462 3
    Handle Tcl_MacFindResource(Tcl_Interp *interp, long resourceType,
	    CONST char *resourceName, int resourceNumber,
	    CONST char *resFileRef, int * releaseIt)
d1469 1
a1469 1
    int Tcl_GetOSTypeFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d1480 2
a1481 1
# Tcl shared library.  They are found in the compat directory.
a1489 11
##################
# Mac OS X declarations
#

declare 0 macosx {
    int Tcl_MacOSXOpenBundleResources(Tcl_Interp *interp,
	    CONST char *bundleName,
	    int hasResourceFile,
	    int maxPathLen,
	    char *libraryPath)
}
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@a9 1
# Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
d13 1
a13 1
# RCS: @@(#) $Id: tcl.decls,v 1.94 2002/08/31 06:09:45 das Exp $
d30 2
a31 2
    int Tcl_PkgProvideEx(Tcl_Interp* interp, CONST char* name,
	    CONST char* version, ClientData clientData)
d34 2
a35 2
    CONST84_RETURN char * Tcl_PkgRequireEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d38 1
a38 1
    void Tcl_Panic(CONST char *format, ...)
d50 1
a50 1
    char * Tcl_DbCkalloc(unsigned int size, CONST char *file, int line)
d53 1
a53 1
    int Tcl_DbCkfree(char *ptr, CONST char *file, int line)
d56 1
a56 2
    char * Tcl_DbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
d64 1
a64 1
    void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc,
d87 1
a87 1
    void Tcl_AppendToObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d93 1
a93 1
    int Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr,
d97 1
a97 1
    void Tcl_DbDecrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d100 1
a100 1
    void Tcl_DbIncrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d103 1
a103 1
    int Tcl_DbIsShared(Tcl_Obj *objPtr, CONST char *file, int line)
d106 1
a106 1
    Tcl_Obj * Tcl_DbNewBooleanObj(int boolValue, CONST char *file, int line)
d109 2
a110 2
    Tcl_Obj * Tcl_DbNewByteArrayObj(CONST unsigned char *bytes, int length,
	    CONST char *file, int line)
d113 1
a113 2
    Tcl_Obj * Tcl_DbNewDoubleObj(double doubleValue,
	    CONST char *file, int line)
d116 2
a117 2
    Tcl_Obj * Tcl_DbNewListObj(int objc, Tcl_Obj *CONST *objv, 
	    CONST char *file, int line)
d120 1
a120 1
    Tcl_Obj * Tcl_DbNewLongObj(long longValue, CONST char *file, int line)
d123 1
a123 1
    Tcl_Obj * Tcl_DbNewObj(CONST char *file, int line)
d126 2
a127 2
    Tcl_Obj * Tcl_DbNewStringObj(CONST char *bytes, int length,
	    CONST char *file, int line)
d136 1
a136 1
    int Tcl_GetBoolean(Tcl_Interp *interp, CONST char *str, int *boolPtr)
d139 1
a139 1
    int Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d146 1
a146 1
    int Tcl_GetDouble(Tcl_Interp *interp, CONST char *str, double *doublePtr)
d149 1
a149 1
    int Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d153 2
a154 2
    int Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST84 char **tablePtr, CONST char *msg, int flags, int *indexPtr)
d157 1
a157 1
    int Tcl_GetInt(Tcl_Interp *interp, CONST char *str, int *intPtr)
d166 1
a166 1
    Tcl_ObjType * Tcl_GetObjType(CONST char *typeName)
d175 1
a175 1
    int Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr,
d179 1
a179 1
    int Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr,
d183 1
a183 1
    int Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr,
d187 1
a187 1
    int Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index,
d191 1
a191 2
    int Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    int *lengthPtr)
d194 1
a194 1
    int Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first,
d198 1
a198 1
    Tcl_Obj *Tcl_NewBooleanObj(int boolValue)
d201 1
a201 1
    Tcl_Obj *Tcl_NewByteArrayObj(CONST unsigned char* bytes, int length)
d228 1
a228 2
    void Tcl_SetByteArrayObj(Tcl_Obj *objPtr, CONST unsigned char *bytes,
	    int length)
d246 1
a246 1
    void Tcl_SetStringObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d252 1
a252 1
    void Tcl_AddObjErrorInfo(Tcl_Interp *interp, CONST char *message,
d265 1
a265 1
    Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc,
d287 2
a288 2
    int Tcl_BadChannelOption(Tcl_Interp *interp, CONST char *optionName,
	    CONST char *optionList)
d291 1
a291 1
    void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc,
d301 1
a301 1
    int Tcl_CommandComplete(CONST char *cmd)
d304 1
a304 1
    char * Tcl_Concat(int argc, CONST84 char * CONST *argv)
d310 1
a310 1
    int Tcl_ConvertCountedElement(CONST char *src, int length, char *dst,
d314 2
a315 3
    int Tcl_CreateAlias(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int argc,
	    CONST84 char * CONST *argv)
d318 2
a319 2
    int Tcl_CreateAliasObj(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int objc,
d323 2
a324 2
    Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr,
	    CONST char *chanName, ClientData instanceData, int mask)
d327 1
a327 1
    void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask,
d331 1
a331 1
    void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d335 2
a336 2
    Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, CONST char *cmdName,
	    Tcl_CmdProc *proc, ClientData clientData,
d340 1
a340 1
    void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc,
d350 2
a351 3
    void Tcl_CreateMathFunc(Tcl_Interp *interp, CONST char *name,
	    int numArgs, Tcl_ValueType *argTypes, 
	    Tcl_MathProc *proc, ClientData clientData)
d354 2
a355 3
    Tcl_Command Tcl_CreateObjCommand(Tcl_Interp *interp,
	    CONST char *cmdName,
	    Tcl_ObjCmdProc *proc, ClientData clientData,
d359 1
a359 1
    Tcl_Interp * Tcl_CreateSlave(Tcl_Interp *interp, CONST char *slaveName,
d363 1
a363 1
    Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds,
d367 1
a367 1
    Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level,
d371 1
a371 1
    void Tcl_DeleteAssocData(Tcl_Interp *interp, CONST char *name)
d374 1
a374 1
    void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc,
d378 1
a378 1
    void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d382 1
a382 1
    int Tcl_DeleteCommand(Tcl_Interp *interp, CONST char *cmdName)
d391 1
a391 1
    void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc,
d406 1
a406 1
declare 111 {unix win cygwin} {
d416 1
a416 1
    void Tcl_DontCallWhenDeleted(Tcl_Interp *interp,
d456 1
a456 1
    CONST84_RETURN char * Tcl_ErrnoId(void)
d459 1
a459 1
    CONST84_RETURN char * Tcl_ErrnoMsg(int err)
d462 1
a462 1
    int Tcl_Eval(Tcl_Interp *interp, CONST char *string)
a463 1
# This is obsolete, use Tcl_FSEvalFile
d465 1
a465 1
    int Tcl_EvalFile(Tcl_Interp *interp, CONST char *fileName)
d477 2
a478 2
    int Tcl_ExposeCommand(Tcl_Interp *interp, CONST char *hiddenCmdToken,
	    CONST char *cmdName)
d481 1
a481 1
    int Tcl_ExprBoolean(Tcl_Interp *interp, CONST char *str, int *ptr)
d487 1
a487 1
    int Tcl_ExprDouble(Tcl_Interp *interp, CONST char *str, double *ptr)
d493 1
a493 1
    int Tcl_ExprLong(Tcl_Interp *interp, CONST char *str, long *ptr)
d499 1
a499 1
    int Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d503 1
a503 1
    int Tcl_ExprString(Tcl_Interp *interp, CONST char *string)
d512 1
a512 1
    Tcl_HashEntry * Tcl_FirstHashEntry(Tcl_HashTable *tablePtr,
d522 3
a524 3
    int Tcl_GetAlias(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *argcPtr, CONST84 char ***argvPtr)
d527 3
a529 3
    int Tcl_GetAliasObj(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *objcPtr, Tcl_Obj ***objv)
d532 1
a532 1
    ClientData Tcl_GetAssocData(Tcl_Interp *interp, CONST char *name,
d536 1
a536 1
    Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, CONST char *chanName,
d543 1
a543 1
    int Tcl_GetChannelHandle(Tcl_Channel chan, int direction,
d553 1
a553 1
    CONST84_RETURN char * Tcl_GetChannelName(Tcl_Channel chan)
d556 2
a557 2
    int Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, Tcl_DString *dsPtr)
d563 1
a563 1
    int Tcl_GetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
d567 1
a567 2
    CONST84_RETURN char * Tcl_GetCommandName(Tcl_Interp *interp,
	    Tcl_Command command)
d573 1
a573 1
    CONST84_RETURN char * Tcl_GetHostName(void)
d592 1
a592 1
    int Tcl_GetOpenFile(Tcl_Interp *interp, CONST char *str, int forWriting,
d595 1
a595 2
# Obsolete.  Should now use Tcl_FSGetPathType which is objectified
# and therefore usually faster.
d597 1
a597 1
    Tcl_PathType Tcl_GetPathType(CONST char *path)
d609 1
a609 1
    Tcl_Interp * Tcl_GetSlave(Tcl_Interp *interp, CONST char *slaveName)
d615 1
a615 1
    CONST84_RETURN char * Tcl_GetStringResult(Tcl_Interp *interp)
d618 1
a618 2
    CONST84_RETURN char * Tcl_GetVar(Tcl_Interp *interp, CONST char *varName,
	    int flags)
d621 1
a621 2
    CONST84_RETURN char * Tcl_GetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d624 1
a624 1
    int Tcl_GlobalEval(Tcl_Interp *interp, CONST char *command)
d630 2
a631 2
    int Tcl_HideCommand(Tcl_Interp *interp, CONST char *cmdName,
	    CONST char *hiddenCmdToken)
a650 1
# Obsolete, use Tcl_FSJoinPath
d652 1
a652 2
    char * Tcl_JoinPath(int argc, CONST84 char * CONST *argv,
	    Tcl_DString *resultPtr)
d655 1
a655 2
    int Tcl_LinkVar(Tcl_Interp *interp, CONST char *varName, char *addr,
	    int type)
d673 1
a673 1
    char * Tcl_Merge(int argc, CONST84 char * CONST *argv)
d682 1
a682 1
    Tcl_Obj * Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d686 1
a686 1
    Tcl_Obj * Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d689 3
a691 3
declare 197 {unix win cygwin} {
    Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc,
	    CONST84 char **argv, int flags)
a692 1
# This is obsolete, use Tcl_FSOpenFileChannel
d694 2
a695 2
    Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, CONST char *fileName,
	    CONST char *modeString, int permissions)
d698 2
a699 2
    Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port,
	    CONST char *address, CONST char *myaddr, int myport, int async)
d702 2
a703 3
    Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port,
	    CONST char *host, Tcl_TcpAcceptProc *acceptProc,
	    ClientData callbackData)
d715 1
a715 1
    CONST84_RETURN char * Tcl_PosixError(Tcl_Interp *interp)
d723 1
a723 1
declare 207 {unix win cygwin} {
d727 1
a727 1
    int Tcl_RecordAndEval(Tcl_Interp *interp, CONST char *cmd, int flags)
d739 1
a739 1
    Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, CONST char *string)
d742 1
a742 1
    int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp,
d746 1
a746 2
    int Tcl_RegExpMatch(Tcl_Interp *interp, CONST char *str,
	    CONST char *pattern)
d749 2
a750 2
    void Tcl_RegExpRange(Tcl_RegExp regexp, int index,
	    CONST84 char **startPtr, CONST84 char **endPtr)
a763 1
# Obsolete
d765 1
a765 1
    int Tcl_SeekOld(Tcl_Channel chan, int offset, int mode)
d774 1
a774 1
    void Tcl_SetAssocData(Tcl_Interp *interp, CONST char *name,
d781 2
a782 2
    int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, CONST char *newValue)
d785 2
a786 2
    int Tcl_SetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
	    CONST Tcl_CmdInfo *infoPtr)
d804 1
a804 1
    void Tcl_SetResult(Tcl_Interp *interp, char *str,
d820 2
a821 2
    CONST84_RETURN char * Tcl_SetVar(Tcl_Interp *interp, CONST char *varName,
	    CONST char *newValue, int flags)
d824 2
a825 2
    CONST84_RETURN char * Tcl_SetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, CONST char *newValue, int flags)
d828 1
a828 1
    CONST84_RETURN char * Tcl_SignalId(int sig)
d831 1
a831 1
    CONST84_RETURN char * Tcl_SignalMsg(int sig)
d837 2
a838 2
    int Tcl_SplitList(Tcl_Interp *interp, CONST char *listStr, int *argcPtr,
	    CONST84 char ***argvPtr)
a839 1
# Obsolete, use Tcl_FSSplitPath
d841 1
a841 1
    void Tcl_SplitPath(CONST char *path, int *argcPtr, CONST84 char ***argvPtr)
d844 1
a844 1
    void Tcl_StaticPackage(Tcl_Interp *interp, CONST char *pkgName,
a849 1
# Obsolete
d851 1
a851 1
    int Tcl_TellOld(Tcl_Channel chan)
d854 1
a854 1
    int Tcl_TraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d858 1
a858 1
    int Tcl_TraceVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
d862 1
a862 1
    char * Tcl_TranslateFileName(Tcl_Interp *interp, CONST char *name,
d866 1
a866 1
    int Tcl_Ungets(Tcl_Channel chan, CONST char *str, int len, int atHead)
d869 1
a869 1
    void Tcl_UnlinkVar(Tcl_Interp *interp, CONST char *varName)
d875 1
a875 1
    int Tcl_UnsetVar(Tcl_Interp *interp, CONST char *varName, int flags)
d878 1
a878 2
    int Tcl_UnsetVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
	    int flags)
d881 1
a881 1
    void Tcl_UntraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d885 2
a886 3
    void Tcl_UntraceVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *proc,
	    ClientData clientData)
d889 1
a889 1
    void Tcl_UpdateLinkedVar(Tcl_Interp *interp, CONST char *varName)
d892 2
a893 2
    int Tcl_UpVar(Tcl_Interp *interp, CONST char *frameName,
	    CONST char *varName, CONST char *localName, int flags)
d896 2
a897 2
    int Tcl_UpVar2(Tcl_Interp *interp, CONST char *frameName, CONST char *part1,
	    CONST char *part2, CONST char *localName, int flags)
d903 1
a903 1
    ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, CONST char *varName,
d907 2
a908 2
    ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *procPtr,
d912 1
a912 1
    int Tcl_Write(Tcl_Channel chan, CONST char *s, int slen)
d915 2
a916 2
    void Tcl_WrongNumArgs(Tcl_Interp *interp, int objc,
	    Tcl_Obj *CONST objv[], CONST char *message)
d919 1
a919 1
    int Tcl_DumpActiveMemory(CONST char *fileName)
d922 1
a922 1
    void Tcl_ValidateAllMemory(CONST char *file, int line)
a923 1

d931 1
a931 1
    CONST84_RETURN char * Tcl_HashStats(Tcl_HashTable *tablePtr)
d934 1
a934 2
    CONST84_RETURN char * Tcl_ParseVar(Tcl_Interp *interp, CONST char *str,
	    CONST84 char **termPtr)
d937 2
a938 2
    CONST84_RETURN char * Tcl_PkgPresent(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact)
d941 2
a942 2
    CONST84_RETURN char * Tcl_PkgPresentEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d945 1
a945 2
    int Tcl_PkgProvide(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version)
d948 2
a949 2
    CONST84_RETURN char * Tcl_PkgRequire(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version, int exact)
d960 2
a961 2
declare 278 generic {
    void Tcl_PanicVA(CONST char *format, va_list argList)
d985 3
a987 2
    Tcl_Channel Tcl_StackChannel(Tcl_Interp *interp, Tcl_ChannelType *typePtr,
	    ClientData instanceData, int mask, Tcl_Channel prevChan)
a994 6

# 284 was reserved, but added in 8.4a2
declare 284 generic {
    void Tcl_SetMainLoop(Tcl_MainLoopProc *proc)
}

d996 2
d1020 1
a1020 2
    int Tcl_EvalEx(Tcl_Interp *interp, CONST char *script, int numBytes,
	    int flags)
d1023 1
a1023 1
    int Tcl_EvalObjv(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
d1033 3
a1035 3
    int Tcl_ExternalToUtf(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1039 2
a1040 2
    char * Tcl_ExternalToUtfDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1058 1
a1058 1
    CONST84_RETURN char * Tcl_GetEncodingName(Tcl_Encoding encoding)
d1064 2
a1065 3
    int Tcl_GetIndexFromObjStruct(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST VOID *tablePtr, int offset, CONST char *msg, int flags,
	    int *indexPtr)
d1071 2
a1072 2
    Tcl_Obj * Tcl_GetVar2Ex(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d1087 1
a1087 1
    void Tcl_ConditionWait(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr,
d1094 1
a1094 1
    int Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead,
d1107 2
a1108 2
    Tcl_Obj * Tcl_SetVar2Ex(Tcl_Interp *interp, CONST char *part1, 
            CONST char *part2, Tcl_Obj *newValuePtr, int flags)
d1114 1
a1114 1
    void Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event* evPtr,
d1133 1
a1133 1
    CONST84_RETURN char * Tcl_UtfAtIndex(CONST char *src, int index)
d1142 1
a1142 1
    CONST84_RETURN char * Tcl_UtfFindFirst(CONST char *src, int ch)
d1145 1
a1145 1
    CONST84_RETURN char * Tcl_UtfFindLast(CONST char *src, int ch)
d1148 1
a1148 1
    CONST84_RETURN char * Tcl_UtfNext(CONST char *src)
d1151 1
a1151 1
    CONST84_RETURN char * Tcl_UtfPrev(CONST char *src, CONST char *start)
d1154 3
a1156 3
    int Tcl_UtfToExternal(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1160 2
a1161 2
    char * Tcl_UtfToExternalDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1185 1
a1185 1
    CONST84_RETURN char * Tcl_GetDefaultEncodingDir(void)
d1188 1
a1188 1
    void Tcl_SetDefaultEncodingDir(CONST char *path)
d1218 1
a1218 1
    int Tcl_UniCharLen(CONST Tcl_UniChar *str)
d1221 2
a1222 2
    int Tcl_UniCharNcmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
d1225 2
a1226 2
    char * Tcl_UniCharToUtfDString(CONST Tcl_UniChar *string,
	    int numChars, Tcl_DString *dsPtr)
d1229 2
a1230 2
    Tcl_UniChar * Tcl_UtfToUniCharDString(CONST char *string,
	    int length, Tcl_DString *dsPtr)
d1233 1
a1233 2
    Tcl_RegExp Tcl_GetRegExpFromObj(Tcl_Interp *interp, Tcl_Obj *patObj,
	    int flags)
d1237 1
a1237 1
    Tcl_Obj *Tcl_EvalTokens(Tcl_Interp *interp, Tcl_Token *tokenPtr,
d1241 1
a1241 1
    void Tcl_FreeParse(Tcl_Parse *parsePtr)
d1244 2
a1245 2
    void Tcl_LogCommandInfo(Tcl_Interp *interp, CONST char *script,
	    CONST char *command, int length)
d1248 2
a1249 2
    int Tcl_ParseBraces(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append, CONST84 char **termPtr)
d1252 1
a1252 1
    int Tcl_ParseCommand(Tcl_Interp *interp, CONST char *string, int numBytes,
d1256 1
a1256 1
    int Tcl_ParseExpr(Tcl_Interp *interp, CONST char *string, int numBytes,
d1260 2
a1261 3
    int Tcl_ParseQuotedString(Tcl_Interp *interp, CONST char *string,
	    int numBytes, Tcl_Parse *parsePtr, int append,
	    CONST84 char **termPtr)
d1264 2
a1265 2
    int Tcl_ParseVarName(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append)
a1266 2
# These 4 functions are obsolete, use Tcl_FSGetCwd, Tcl_FSChdir,
# Tcl_FSAccess and Tcl_FSStat
d1301 1
a1301 1
    int Tcl_RegExpExecObj(Tcl_Interp *interp, Tcl_RegExp regexp,
d1308 1
a1308 1
    Tcl_Obj * Tcl_NewUnicodeObj(CONST Tcl_UniChar *unicode, int numChars)
d1311 1
a1311 1
    void Tcl_SetUnicodeObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
d1315 1
a1315 1
    int Tcl_GetCharLength(Tcl_Obj *objPtr)
d1318 1
a1318 1
    Tcl_UniChar Tcl_GetUniChar(Tcl_Obj *objPtr, int index)
d1321 1
a1321 1
    Tcl_UniChar * Tcl_GetUnicode(Tcl_Obj *objPtr)
d1324 1
a1324 1
    Tcl_Obj * Tcl_GetRange(Tcl_Obj *objPtr, int first, int last)
d1327 2
a1328 2
    void Tcl_AppendUnicodeToObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
	    int length)
d1331 1
a1331 1
    int Tcl_RegExpMatchObj(Tcl_Interp *interp, Tcl_Obj *stringObj,
d1344 1
a1344 1
    int Tcl_GetChannelNamesEx(Tcl_Interp *interp, CONST char *pattern)
d1347 1
a1347 1
    int Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp *interp,
d1351 1
a1351 1
    void Tcl_ConditionFinalize(Tcl_Condition *condPtr)
d1354 1
a1354 1
    void Tcl_MutexFinalize(Tcl_Mutex *mutex)
d1357 1
a1357 1
    int Tcl_CreateThread(Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc proc,
a1360 1
# Introduced in 8.3.2
d1362 1
a1362 1
    int Tcl_ReadRaw(Tcl_Channel chan, char *dst, int bytesToRead)
d1365 1
a1365 1
    int Tcl_WriteRaw(Tcl_Channel chan, CONST char *src, int srcLen)
d1368 1
a1368 1
    Tcl_Channel Tcl_GetTopChannel(Tcl_Channel chan)
d1371 1
a1371 1
    int Tcl_ChannelBuffered(Tcl_Channel chan)
d1374 1
a1374 1
    CONST84_RETURN char * Tcl_ChannelName(Tcl_ChannelType *chanTypePtr)
d1380 1
a1380 1
    Tcl_DriverBlockModeProc * Tcl_ChannelBlockModeProc(Tcl_ChannelType
d1399 1
a1399 1
    Tcl_DriverSetOptionProc * Tcl_ChannelSetOptionProc(Tcl_ChannelType
d1403 1
a1403 1
    Tcl_DriverGetOptionProc * Tcl_ChannelGetOptionProc(Tcl_ChannelType
d1410 1
a1410 1
    Tcl_DriverGetHandleProc * Tcl_ChannelGetHandleProc(Tcl_ChannelType
d1417 1
a1417 1
    Tcl_DriverHandlerProc * Tcl_ChannelHandlerProc(Tcl_ChannelType
a1420 299
# Introduced in 8.4a2
declare 412 generic {
    int Tcl_JoinThread(Tcl_ThreadId id, int* result)
}
declare 413 generic {
    int Tcl_IsChannelShared(Tcl_Channel channel)
}
declare 414 generic {
    int Tcl_IsChannelRegistered(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 415 generic {
    void Tcl_CutChannel(Tcl_Channel channel)
}
declare 416 generic {
    void Tcl_SpliceChannel(Tcl_Channel channel)
}
declare 417 generic {
    void Tcl_ClearChannelHandlers(Tcl_Channel channel)
}
declare 418 generic {
    int Tcl_IsChannelExisting(CONST char* channelName)
}

declare 419 generic {
    int Tcl_UniCharNcasecmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
}
declare 420 generic {
    int Tcl_UniCharCaseMatch(CONST Tcl_UniChar *ustr,
	    CONST Tcl_UniChar *pattern, int nocase)
}

declare 421 generic {
    Tcl_HashEntry *Tcl_FindHashEntry(Tcl_HashTable *tablePtr, CONST char *key)
}

declare 422 generic {
    Tcl_HashEntry *Tcl_CreateHashEntry(Tcl_HashTable *tablePtr,
	    CONST char *key, int *newPtr)
}

declare 423 generic {
    void Tcl_InitCustomHashTable(Tcl_HashTable *tablePtr, int keyType,
	    Tcl_HashKeyType *typePtr)
}

declare 424 generic {
    void Tcl_InitObjHashTable(Tcl_HashTable *tablePtr)
}
declare 425 generic {
    ClientData Tcl_CommandTraceInfo(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *procPtr,
	    ClientData prevClientData)
}
declare 426 generic {
    int Tcl_TraceCommand(Tcl_Interp *interp, CONST char *varName, int flags,
	    Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 427 generic {
    void Tcl_UntraceCommand(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 428 generic {
    char * Tcl_AttemptAlloc(unsigned int size)
}
declare 429 generic {
    char * Tcl_AttemptDbCkalloc(unsigned int size, CONST char *file, int line)
}
declare 430 generic {
    char * Tcl_AttemptRealloc(char *ptr, unsigned int size)
}
declare 431 generic {
    char * Tcl_AttemptDbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
}
declare 432 generic {
    int Tcl_AttemptSetObjLength(Tcl_Obj *objPtr, int length)
}
declare 433 generic {
    Tcl_ThreadId Tcl_GetChannelThread(Tcl_Channel channel)
}
# introduced in 8.4a3
declare 434 generic {
    Tcl_UniChar * Tcl_GetUnicodeFromObj(Tcl_Obj *objPtr, int *lengthPtr)
}
declare 435 generic {
    int Tcl_GetMathFuncInfo(Tcl_Interp *interp, CONST char *name,
	    int *numArgsPtr, Tcl_ValueType **argTypesPtr,
	    Tcl_MathProc **procPtr, ClientData *clientDataPtr)
}
declare 436 generic {
    Tcl_Obj * Tcl_ListMathFuncs(Tcl_Interp *interp, CONST char *pattern)
}
declare 437 generic {
    Tcl_Obj * Tcl_SubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags)
}
declare 438 generic {
    int Tcl_DetachChannel(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 439 generic {
    int Tcl_IsStandardChannel(Tcl_Channel channel)
}
# New functions due to TIP#17
declare 440 generic {
    int	Tcl_FSCopyFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 441 generic {
    int	Tcl_FSCopyDirectory(Tcl_Obj *srcPathPtr,
	    Tcl_Obj *destPathPtr, Tcl_Obj **errorPtr)
}
declare 442 generic {
    int	Tcl_FSCreateDirectory(Tcl_Obj *pathPtr)
}
declare 443 generic {
    int	Tcl_FSDeleteFile(Tcl_Obj *pathPtr)
}
declare 444 generic {
    int	Tcl_FSLoadFile(Tcl_Interp * interp,
	    Tcl_Obj *pathPtr, CONST char * sym1, CONST char * sym2,
	    Tcl_PackageInitProc ** proc1Ptr,
	    Tcl_PackageInitProc ** proc2Ptr,
	    Tcl_LoadHandle * handlePtr,
	    Tcl_FSUnloadFileProc **unloadProcPtr)
}
declare 445 generic {
    int	Tcl_FSMatchInDirectory(Tcl_Interp *interp, Tcl_Obj *result,
	    Tcl_Obj *pathPtr, CONST char *pattern, Tcl_GlobTypeData *types)
}
declare 446 generic {
    Tcl_Obj * Tcl_FSLink(Tcl_Obj *pathPtr, Tcl_Obj *toPtr, int linkAction)
}
declare 447 generic {
    int Tcl_FSRemoveDirectory(Tcl_Obj *pathPtr,
	    int recursive, Tcl_Obj **errorPtr)
}
declare 448 generic {
    int	Tcl_FSRenameFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 449 generic {
    int	Tcl_FSLstat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 450 generic {
    int Tcl_FSUtime(Tcl_Obj *pathPtr, struct utimbuf *tval)
}
declare 451 generic {
    int Tcl_FSFileAttrsGet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 452 generic {
    int Tcl_FSFileAttrsSet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj *objPtr)
}
declare 453 generic {
    CONST char ** Tcl_FSFileAttrStrings(Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 454 generic {
    int Tcl_FSStat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 455 generic {
    int Tcl_FSAccess(Tcl_Obj *pathPtr, int mode)
}
declare 456 generic {
    Tcl_Channel Tcl_FSOpenFileChannel(Tcl_Interp *interp, Tcl_Obj *pathPtr,
	    CONST char *modeString, int permissions)
}
declare 457 generic {
    Tcl_Obj*  Tcl_FSGetCwd(Tcl_Interp *interp)
}
declare 458 generic {
    int Tcl_FSChdir(Tcl_Obj *pathPtr)
}
declare 459 generic {
    int Tcl_FSConvertToPathType(Tcl_Interp *interp, Tcl_Obj *pathPtr)
}
declare 460 generic {
    Tcl_Obj* Tcl_FSJoinPath(Tcl_Obj *listObj, int elements)
}
declare 461 generic {
    Tcl_Obj* Tcl_FSSplitPath(Tcl_Obj* pathPtr, int *lenPtr)
}
declare 462 generic {
    int Tcl_FSEqualPaths(Tcl_Obj* firstPtr, Tcl_Obj* secondPtr)
}
declare 463 generic {
    Tcl_Obj* Tcl_FSGetNormalizedPath(Tcl_Interp *interp, Tcl_Obj* pathObjPtr)
}
declare 464 generic {
    Tcl_Obj* Tcl_FSJoinToPath(Tcl_Obj *basePtr, int objc,
	    Tcl_Obj *CONST objv[])
}
declare 465 generic {
    ClientData Tcl_FSGetInternalRep(Tcl_Obj* pathObjPtr,
	    Tcl_Filesystem *fsPtr)
}
declare 466 generic {
    Tcl_Obj* Tcl_FSGetTranslatedPath(Tcl_Interp *interp, Tcl_Obj* pathPtr)
}
declare 467 generic {
    int Tcl_FSEvalFile(Tcl_Interp *interp, Tcl_Obj *fileName)
}
declare 468 generic {
    Tcl_Obj* Tcl_FSNewNativePath(Tcl_Filesystem* fromFilesystem,
	    ClientData clientData)
}
declare 469 generic {
    CONST char* Tcl_FSGetNativePath(Tcl_Obj* pathObjPtr)
}
declare 470 generic {
    Tcl_Obj* Tcl_FSFileSystemInfo(Tcl_Obj* pathObjPtr)
}
declare 471 generic {
    Tcl_Obj* Tcl_FSPathSeparator(Tcl_Obj* pathObjPtr)
}
declare 472 generic {
    Tcl_Obj* Tcl_FSListVolumes(void)
}
declare 473 generic {
    int Tcl_FSRegister(ClientData clientData, Tcl_Filesystem *fsPtr)
}
declare 474 generic {
    int Tcl_FSUnregister(Tcl_Filesystem *fsPtr)
}
declare 475 generic {
    ClientData Tcl_FSData(Tcl_Filesystem *fsPtr)
}
declare 476 generic {
    CONST char* Tcl_FSGetTranslatedStringPath(Tcl_Interp *interp,
	    Tcl_Obj* pathPtr)
}
declare 477 generic {
    Tcl_Filesystem* Tcl_FSGetFileSystemForPath(Tcl_Obj* pathObjPtr)
}
declare 478 generic {
    Tcl_PathType Tcl_FSGetPathType(Tcl_Obj *pathObjPtr)
}
# New function due to TIP#49
declare 479 generic {
    int Tcl_OutputBuffered(Tcl_Channel chan)
}
declare 480 generic {
    void Tcl_FSMountsChanged(Tcl_Filesystem *fsPtr)
}	  
# New function due to TIP#56
declare 481 generic {
    int Tcl_EvalTokensStandard(Tcl_Interp *interp, Tcl_Token *tokenPtr,
	    int count)
}

# New export due to TIP#73 
declare 482 generic {
    void Tcl_GetTime(Tcl_Time* timeBuf)
}

# New exports due to TIP#32

declare 483 generic {
    Tcl_Trace Tcl_CreateObjTrace(Tcl_Interp* interp, int level, int flags,
	    Tcl_CmdObjTraceProc* objProc, ClientData clientData,
	    Tcl_CmdObjTraceDeleteProc* delProc)
}
declare 484 generic {
    int Tcl_GetCommandInfoFromToken(Tcl_Command token, Tcl_CmdInfo* infoPtr)
}
declare 485 generic {
    int Tcl_SetCommandInfoFromToken(Tcl_Command token,
	    CONST Tcl_CmdInfo* infoPtr)
}

### New functions on 64-bit dev branch ###
declare 486 generic {
    Tcl_Obj * Tcl_DbNewWideIntObj(Tcl_WideInt wideValue,
	    CONST char *file, int line)
}
declare 487 generic {
    int Tcl_GetWideIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tcl_WideInt *widePtr)
}
declare 488 generic {
    Tcl_Obj * Tcl_NewWideIntObj(Tcl_WideInt wideValue)
}
declare 489 generic {
    void Tcl_SetWideIntObj(Tcl_Obj *objPtr, Tcl_WideInt wideValue)
}
declare 490 generic {
    Tcl_StatBuf * Tcl_AllocStatBuf(void)
}
declare 491 generic {
    Tcl_WideInt Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset, int mode)
}
declare 492 generic {
    Tcl_WideInt Tcl_Tell(Tcl_Channel chan)
}

# New export due to TIP#91
declare 493 generic {
    Tcl_DriverWideSeekProc * Tcl_ChannelWideSeekProc(
	    Tcl_ChannelType *chanTypePtr)
}

d1433 1
a1433 1
declare 0 {win cygwin} {
d1436 1
a1436 1
declare 1 {win cygwin} {
d1456 2
a1457 2
    int Tcl_MacEvalResource(Tcl_Interp *interp, CONST char *resourceName,
	    int resourceNumber, CONST char *fileName)
d1460 3
a1462 3
    Handle Tcl_MacFindResource(Tcl_Interp *interp, long resourceType,
	    CONST char *resourceName, int resourceNumber,
	    CONST char *resFileRef, int * releaseIt)
d1469 1
a1469 1
    int Tcl_GetOSTypeFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d1480 2
a1481 1
# Tcl shared library.  They are found in the compat directory.
a1489 11
##################
# Mac OS X declarations
#

declare 0 macosx {
    int Tcl_MacOSXOpenBundleResources(Tcl_Interp *interp,
	    CONST char *bundleName,
	    int hasResourceFile,
	    int maxPathLen,
	    char *libraryPath)
}
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a9 1
# Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
d30 2
a31 2
    int Tcl_PkgProvideEx(Tcl_Interp* interp, CONST char* name,
	    CONST char* version, ClientData clientData)
d34 2
a35 2
    CONST84_RETURN char * Tcl_PkgRequireEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d38 1
a38 1
    void Tcl_Panic(CONST char *format, ...)
d50 1
a50 1
    char * Tcl_DbCkalloc(unsigned int size, CONST char *file, int line)
d53 1
a53 1
    int Tcl_DbCkfree(char *ptr, CONST char *file, int line)
d56 1
a56 2
    char * Tcl_DbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
d64 1
a64 1
    void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc,
d87 1
a87 1
    void Tcl_AppendToObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d93 1
a93 1
    int Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr,
d97 1
a97 1
    void Tcl_DbDecrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d100 1
a100 1
    void Tcl_DbIncrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d103 1
a103 1
    int Tcl_DbIsShared(Tcl_Obj *objPtr, CONST char *file, int line)
d106 1
a106 1
    Tcl_Obj * Tcl_DbNewBooleanObj(int boolValue, CONST char *file, int line)
d109 2
a110 2
    Tcl_Obj * Tcl_DbNewByteArrayObj(CONST unsigned char *bytes, int length,
	    CONST char *file, int line)
d113 1
a113 2
    Tcl_Obj * Tcl_DbNewDoubleObj(double doubleValue,
	    CONST char *file, int line)
d116 2
a117 2
    Tcl_Obj * Tcl_DbNewListObj(int objc, Tcl_Obj *CONST *objv, 
	    CONST char *file, int line)
d120 1
a120 1
    Tcl_Obj * Tcl_DbNewLongObj(long longValue, CONST char *file, int line)
d123 1
a123 1
    Tcl_Obj * Tcl_DbNewObj(CONST char *file, int line)
d126 2
a127 2
    Tcl_Obj * Tcl_DbNewStringObj(CONST char *bytes, int length,
	    CONST char *file, int line)
d136 1
a136 1
    int Tcl_GetBoolean(Tcl_Interp *interp, CONST char *str, int *boolPtr)
d139 1
a139 1
    int Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d146 1
a146 1
    int Tcl_GetDouble(Tcl_Interp *interp, CONST char *str, double *doublePtr)
d149 1
a149 1
    int Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d153 2
a154 2
    int Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST84 char **tablePtr, CONST char *msg, int flags, int *indexPtr)
d157 1
a157 1
    int Tcl_GetInt(Tcl_Interp *interp, CONST char *str, int *intPtr)
d166 1
a166 1
    Tcl_ObjType * Tcl_GetObjType(CONST char *typeName)
d175 1
a175 1
    int Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr,
d179 1
a179 1
    int Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr,
d183 1
a183 1
    int Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr,
d187 1
a187 1
    int Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index,
d191 1
a191 2
    int Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    int *lengthPtr)
d194 1
a194 1
    int Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first,
d198 1
a198 1
    Tcl_Obj *Tcl_NewBooleanObj(int boolValue)
d201 1
a201 1
    Tcl_Obj *Tcl_NewByteArrayObj(CONST unsigned char* bytes, int length)
d228 1
a228 2
    void Tcl_SetByteArrayObj(Tcl_Obj *objPtr, CONST unsigned char *bytes,
	    int length)
d246 1
a246 1
    void Tcl_SetStringObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d252 1
a252 1
    void Tcl_AddObjErrorInfo(Tcl_Interp *interp, CONST char *message,
d265 1
a265 1
    Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc,
d287 2
a288 2
    int Tcl_BadChannelOption(Tcl_Interp *interp, CONST char *optionName,
	    CONST char *optionList)
d291 1
a291 1
    void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc,
d301 1
a301 1
    int Tcl_CommandComplete(CONST char *cmd)
d304 1
a304 1
    char * Tcl_Concat(int argc, CONST84 char * CONST *argv)
d310 1
a310 1
    int Tcl_ConvertCountedElement(CONST char *src, int length, char *dst,
d314 2
a315 3
    int Tcl_CreateAlias(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int argc,
	    CONST84 char * CONST *argv)
d318 2
a319 2
    int Tcl_CreateAliasObj(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int objc,
d323 2
a324 2
    Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr,
	    CONST char *chanName, ClientData instanceData, int mask)
d327 1
a327 1
    void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask,
d331 1
a331 1
    void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d335 2
a336 2
    Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, CONST char *cmdName,
	    Tcl_CmdProc *proc, ClientData clientData,
d340 1
a340 1
    void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc,
d350 2
a351 3
    void Tcl_CreateMathFunc(Tcl_Interp *interp, CONST char *name,
	    int numArgs, Tcl_ValueType *argTypes, 
	    Tcl_MathProc *proc, ClientData clientData)
d354 2
a355 3
    Tcl_Command Tcl_CreateObjCommand(Tcl_Interp *interp,
	    CONST char *cmdName,
	    Tcl_ObjCmdProc *proc, ClientData clientData,
d359 1
a359 1
    Tcl_Interp * Tcl_CreateSlave(Tcl_Interp *interp, CONST char *slaveName,
d363 1
a363 1
    Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds,
d367 1
a367 1
    Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level,
d371 1
a371 1
    void Tcl_DeleteAssocData(Tcl_Interp *interp, CONST char *name)
d374 1
a374 1
    void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc,
d378 1
a378 1
    void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d382 1
a382 1
    int Tcl_DeleteCommand(Tcl_Interp *interp, CONST char *cmdName)
d391 1
a391 1
    void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc,
d416 1
a416 1
    void Tcl_DontCallWhenDeleted(Tcl_Interp *interp,
d456 1
a456 1
    CONST84_RETURN char * Tcl_ErrnoId(void)
d459 1
a459 1
    CONST84_RETURN char * Tcl_ErrnoMsg(int err)
d462 1
a462 1
    int Tcl_Eval(Tcl_Interp *interp, CONST char *string)
a463 1
# This is obsolete, use Tcl_FSEvalFile
d465 1
a465 1
    int Tcl_EvalFile(Tcl_Interp *interp, CONST char *fileName)
d477 2
a478 2
    int Tcl_ExposeCommand(Tcl_Interp *interp, CONST char *hiddenCmdToken,
	    CONST char *cmdName)
d481 1
a481 1
    int Tcl_ExprBoolean(Tcl_Interp *interp, CONST char *str, int *ptr)
d487 1
a487 1
    int Tcl_ExprDouble(Tcl_Interp *interp, CONST char *str, double *ptr)
d493 1
a493 1
    int Tcl_ExprLong(Tcl_Interp *interp, CONST char *str, long *ptr)
d499 1
a499 1
    int Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d503 1
a503 1
    int Tcl_ExprString(Tcl_Interp *interp, CONST char *string)
d512 1
a512 1
    Tcl_HashEntry * Tcl_FirstHashEntry(Tcl_HashTable *tablePtr,
d522 3
a524 3
    int Tcl_GetAlias(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *argcPtr, CONST84 char ***argvPtr)
d527 3
a529 3
    int Tcl_GetAliasObj(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *objcPtr, Tcl_Obj ***objv)
d532 1
a532 1
    ClientData Tcl_GetAssocData(Tcl_Interp *interp, CONST char *name,
d536 1
a536 1
    Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, CONST char *chanName,
d543 1
a543 1
    int Tcl_GetChannelHandle(Tcl_Channel chan, int direction,
d553 1
a553 1
    CONST84_RETURN char * Tcl_GetChannelName(Tcl_Channel chan)
d556 2
a557 2
    int Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, Tcl_DString *dsPtr)
d563 1
a563 1
    int Tcl_GetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
d567 1
a567 2
    CONST84_RETURN char * Tcl_GetCommandName(Tcl_Interp *interp,
	    Tcl_Command command)
d573 1
a573 1
    CONST84_RETURN char * Tcl_GetHostName(void)
d592 1
a592 1
    int Tcl_GetOpenFile(Tcl_Interp *interp, CONST char *str, int forWriting,
d595 1
a595 2
# Obsolete.  Should now use Tcl_FSGetPathType which is objectified
# and therefore usually faster.
d597 1
a597 1
    Tcl_PathType Tcl_GetPathType(CONST char *path)
d609 1
a609 1
    Tcl_Interp * Tcl_GetSlave(Tcl_Interp *interp, CONST char *slaveName)
d615 1
a615 1
    CONST84_RETURN char * Tcl_GetStringResult(Tcl_Interp *interp)
d618 1
a618 2
    CONST84_RETURN char * Tcl_GetVar(Tcl_Interp *interp, CONST char *varName,
	    int flags)
d621 1
a621 2
    CONST84_RETURN char * Tcl_GetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d624 1
a624 1
    int Tcl_GlobalEval(Tcl_Interp *interp, CONST char *command)
d630 2
a631 2
    int Tcl_HideCommand(Tcl_Interp *interp, CONST char *cmdName,
	    CONST char *hiddenCmdToken)
a650 1
# Obsolete, use Tcl_FSJoinPath
d652 1
a652 2
    char * Tcl_JoinPath(int argc, CONST84 char * CONST *argv,
	    Tcl_DString *resultPtr)
d655 1
a655 2
    int Tcl_LinkVar(Tcl_Interp *interp, CONST char *varName, char *addr,
	    int type)
d673 1
a673 1
    char * Tcl_Merge(int argc, CONST84 char * CONST *argv)
d682 1
a682 1
    Tcl_Obj * Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d686 1
a686 1
    Tcl_Obj * Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d690 2
a691 2
    Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc,
	    CONST84 char **argv, int flags)
a692 1
# This is obsolete, use Tcl_FSOpenFileChannel
d694 2
a695 2
    Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, CONST char *fileName,
	    CONST char *modeString, int permissions)
d698 2
a699 2
    Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port,
	    CONST char *address, CONST char *myaddr, int myport, int async)
d702 2
a703 3
    Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port,
	    CONST char *host, Tcl_TcpAcceptProc *acceptProc,
	    ClientData callbackData)
d715 1
a715 1
    CONST84_RETURN char * Tcl_PosixError(Tcl_Interp *interp)
d727 1
a727 1
    int Tcl_RecordAndEval(Tcl_Interp *interp, CONST char *cmd, int flags)
d739 1
a739 1
    Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, CONST char *string)
d742 1
a742 1
    int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp,
d746 1
a746 2
    int Tcl_RegExpMatch(Tcl_Interp *interp, CONST char *str,
	    CONST char *pattern)
d749 2
a750 2
    void Tcl_RegExpRange(Tcl_RegExp regexp, int index,
	    CONST84 char **startPtr, CONST84 char **endPtr)
a763 1
# Obsolete
d765 1
a765 1
    int Tcl_SeekOld(Tcl_Channel chan, int offset, int mode)
d774 1
a774 1
    void Tcl_SetAssocData(Tcl_Interp *interp, CONST char *name,
d781 2
a782 2
    int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, CONST char *newValue)
d785 2
a786 2
    int Tcl_SetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
	    CONST Tcl_CmdInfo *infoPtr)
d804 1
a804 1
    void Tcl_SetResult(Tcl_Interp *interp, char *str,
d820 2
a821 2
    CONST84_RETURN char * Tcl_SetVar(Tcl_Interp *interp, CONST char *varName,
	    CONST char *newValue, int flags)
d824 2
a825 2
    CONST84_RETURN char * Tcl_SetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, CONST char *newValue, int flags)
d828 1
a828 1
    CONST84_RETURN char * Tcl_SignalId(int sig)
d831 1
a831 1
    CONST84_RETURN char * Tcl_SignalMsg(int sig)
d837 2
a838 2
    int Tcl_SplitList(Tcl_Interp *interp, CONST char *listStr, int *argcPtr,
	    CONST84 char ***argvPtr)
a839 1
# Obsolete, use Tcl_FSSplitPath
d841 1
a841 1
    void Tcl_SplitPath(CONST char *path, int *argcPtr, CONST84 char ***argvPtr)
d844 1
a844 1
    void Tcl_StaticPackage(Tcl_Interp *interp, CONST char *pkgName,
a849 1
# Obsolete
d851 1
a851 1
    int Tcl_TellOld(Tcl_Channel chan)
d854 1
a854 1
    int Tcl_TraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d858 1
a858 1
    int Tcl_TraceVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
d862 1
a862 1
    char * Tcl_TranslateFileName(Tcl_Interp *interp, CONST char *name,
d866 1
a866 1
    int Tcl_Ungets(Tcl_Channel chan, CONST char *str, int len, int atHead)
d869 1
a869 1
    void Tcl_UnlinkVar(Tcl_Interp *interp, CONST char *varName)
d875 1
a875 1
    int Tcl_UnsetVar(Tcl_Interp *interp, CONST char *varName, int flags)
d878 1
a878 2
    int Tcl_UnsetVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
	    int flags)
d881 1
a881 1
    void Tcl_UntraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d885 2
a886 3
    void Tcl_UntraceVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *proc,
	    ClientData clientData)
d889 1
a889 1
    void Tcl_UpdateLinkedVar(Tcl_Interp *interp, CONST char *varName)
d892 2
a893 2
    int Tcl_UpVar(Tcl_Interp *interp, CONST char *frameName,
	    CONST char *varName, CONST char *localName, int flags)
d896 2
a897 2
    int Tcl_UpVar2(Tcl_Interp *interp, CONST char *frameName, CONST char *part1,
	    CONST char *part2, CONST char *localName, int flags)
d903 1
a903 1
    ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, CONST char *varName,
d907 2
a908 2
    ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *procPtr,
d912 1
a912 1
    int Tcl_Write(Tcl_Channel chan, CONST char *s, int slen)
d915 2
a916 2
    void Tcl_WrongNumArgs(Tcl_Interp *interp, int objc,
	    Tcl_Obj *CONST objv[], CONST char *message)
d919 1
a919 1
    int Tcl_DumpActiveMemory(CONST char *fileName)
d922 1
a922 1
    void Tcl_ValidateAllMemory(CONST char *file, int line)
a923 1

d931 1
a931 1
    CONST84_RETURN char * Tcl_HashStats(Tcl_HashTable *tablePtr)
d934 1
a934 2
    CONST84_RETURN char * Tcl_ParseVar(Tcl_Interp *interp, CONST char *str,
	    CONST84 char **termPtr)
d937 2
a938 2
    CONST84_RETURN char * Tcl_PkgPresent(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact)
d941 2
a942 2
    CONST84_RETURN char * Tcl_PkgPresentEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d945 1
a945 2
    int Tcl_PkgProvide(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version)
d948 2
a949 2
    CONST84_RETURN char * Tcl_PkgRequire(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version, int exact)
d960 2
a961 2
declare 278 generic {
    void Tcl_PanicVA(CONST char *format, va_list argList)
d985 3
a987 2
    Tcl_Channel Tcl_StackChannel(Tcl_Interp *interp, Tcl_ChannelType *typePtr,
	    ClientData instanceData, int mask, Tcl_Channel prevChan)
a994 6

# 284 was reserved, but added in 8.4a2
declare 284 generic {
    void Tcl_SetMainLoop(Tcl_MainLoopProc *proc)
}

d996 2
d1020 1
a1020 2
    int Tcl_EvalEx(Tcl_Interp *interp, CONST char *script, int numBytes,
	    int flags)
d1023 1
a1023 1
    int Tcl_EvalObjv(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
d1033 3
a1035 3
    int Tcl_ExternalToUtf(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1039 2
a1040 2
    char * Tcl_ExternalToUtfDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1058 1
a1058 1
    CONST84_RETURN char * Tcl_GetEncodingName(Tcl_Encoding encoding)
d1064 2
a1065 3
    int Tcl_GetIndexFromObjStruct(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST VOID *tablePtr, int offset, CONST char *msg, int flags,
	    int *indexPtr)
d1071 2
a1072 2
    Tcl_Obj * Tcl_GetVar2Ex(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d1087 1
a1087 1
    void Tcl_ConditionWait(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr,
d1094 1
a1094 1
    int Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead,
d1107 2
a1108 2
    Tcl_Obj * Tcl_SetVar2Ex(Tcl_Interp *interp, CONST char *part1, 
            CONST char *part2, Tcl_Obj *newValuePtr, int flags)
d1114 1
a1114 1
    void Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event* evPtr,
d1133 1
a1133 1
    CONST84_RETURN char * Tcl_UtfAtIndex(CONST char *src, int index)
d1142 1
a1142 1
    CONST84_RETURN char * Tcl_UtfFindFirst(CONST char *src, int ch)
d1145 1
a1145 1
    CONST84_RETURN char * Tcl_UtfFindLast(CONST char *src, int ch)
d1148 1
a1148 1
    CONST84_RETURN char * Tcl_UtfNext(CONST char *src)
d1151 1
a1151 1
    CONST84_RETURN char * Tcl_UtfPrev(CONST char *src, CONST char *start)
d1154 3
a1156 3
    int Tcl_UtfToExternal(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1160 2
a1161 2
    char * Tcl_UtfToExternalDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1185 1
a1185 1
    CONST84_RETURN char * Tcl_GetDefaultEncodingDir(void)
d1188 1
a1188 1
    void Tcl_SetDefaultEncodingDir(CONST char *path)
d1218 1
a1218 1
    int Tcl_UniCharLen(CONST Tcl_UniChar *str)
d1221 2
a1222 2
    int Tcl_UniCharNcmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
d1225 2
a1226 2
    char * Tcl_UniCharToUtfDString(CONST Tcl_UniChar *string,
	    int numChars, Tcl_DString *dsPtr)
d1229 2
a1230 2
    Tcl_UniChar * Tcl_UtfToUniCharDString(CONST char *string,
	    int length, Tcl_DString *dsPtr)
d1233 1
a1233 2
    Tcl_RegExp Tcl_GetRegExpFromObj(Tcl_Interp *interp, Tcl_Obj *patObj,
	    int flags)
d1237 1
a1237 1
    Tcl_Obj *Tcl_EvalTokens(Tcl_Interp *interp, Tcl_Token *tokenPtr,
d1241 1
a1241 1
    void Tcl_FreeParse(Tcl_Parse *parsePtr)
d1244 2
a1245 2
    void Tcl_LogCommandInfo(Tcl_Interp *interp, CONST char *script,
	    CONST char *command, int length)
d1248 2
a1249 2
    int Tcl_ParseBraces(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append, CONST84 char **termPtr)
d1252 1
a1252 1
    int Tcl_ParseCommand(Tcl_Interp *interp, CONST char *string, int numBytes,
d1256 1
a1256 1
    int Tcl_ParseExpr(Tcl_Interp *interp, CONST char *string, int numBytes,
d1260 2
a1261 3
    int Tcl_ParseQuotedString(Tcl_Interp *interp, CONST char *string,
	    int numBytes, Tcl_Parse *parsePtr, int append,
	    CONST84 char **termPtr)
d1264 2
a1265 2
    int Tcl_ParseVarName(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append)
a1266 2
# These 4 functions are obsolete, use Tcl_FSGetCwd, Tcl_FSChdir,
# Tcl_FSAccess and Tcl_FSStat
d1301 1
a1301 1
    int Tcl_RegExpExecObj(Tcl_Interp *interp, Tcl_RegExp regexp,
d1308 1
a1308 1
    Tcl_Obj * Tcl_NewUnicodeObj(CONST Tcl_UniChar *unicode, int numChars)
d1311 1
a1311 1
    void Tcl_SetUnicodeObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
d1315 1
a1315 1
    int Tcl_GetCharLength(Tcl_Obj *objPtr)
d1318 1
a1318 1
    Tcl_UniChar Tcl_GetUniChar(Tcl_Obj *objPtr, int index)
d1321 1
a1321 1
    Tcl_UniChar * Tcl_GetUnicode(Tcl_Obj *objPtr)
d1324 1
a1324 1
    Tcl_Obj * Tcl_GetRange(Tcl_Obj *objPtr, int first, int last)
d1327 2
a1328 2
    void Tcl_AppendUnicodeToObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
	    int length)
d1331 1
a1331 1
    int Tcl_RegExpMatchObj(Tcl_Interp *interp, Tcl_Obj *stringObj,
d1344 1
a1344 1
    int Tcl_GetChannelNamesEx(Tcl_Interp *interp, CONST char *pattern)
d1347 1
a1347 1
    int Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp *interp,
d1351 1
a1351 1
    void Tcl_ConditionFinalize(Tcl_Condition *condPtr)
d1354 1
a1354 1
    void Tcl_MutexFinalize(Tcl_Mutex *mutex)
d1357 1
a1357 1
    int Tcl_CreateThread(Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc proc,
a1360 1
# Introduced in 8.3.2
d1362 1
a1362 1
    int Tcl_ReadRaw(Tcl_Channel chan, char *dst, int bytesToRead)
d1365 1
a1365 1
    int Tcl_WriteRaw(Tcl_Channel chan, CONST char *src, int srcLen)
d1368 1
a1368 1
    Tcl_Channel Tcl_GetTopChannel(Tcl_Channel chan)
d1371 1
a1371 1
    int Tcl_ChannelBuffered(Tcl_Channel chan)
d1374 1
a1374 1
    CONST84_RETURN char * Tcl_ChannelName(Tcl_ChannelType *chanTypePtr)
d1380 1
a1380 1
    Tcl_DriverBlockModeProc * Tcl_ChannelBlockModeProc(Tcl_ChannelType
d1399 1
a1399 1
    Tcl_DriverSetOptionProc * Tcl_ChannelSetOptionProc(Tcl_ChannelType
d1403 1
a1403 1
    Tcl_DriverGetOptionProc * Tcl_ChannelGetOptionProc(Tcl_ChannelType
d1410 1
a1410 1
    Tcl_DriverGetHandleProc * Tcl_ChannelGetHandleProc(Tcl_ChannelType
d1417 1
a1417 1
    Tcl_DriverHandlerProc * Tcl_ChannelHandlerProc(Tcl_ChannelType
a1420 299
# Introduced in 8.4a2
declare 412 generic {
    int Tcl_JoinThread(Tcl_ThreadId id, int* result)
}
declare 413 generic {
    int Tcl_IsChannelShared(Tcl_Channel channel)
}
declare 414 generic {
    int Tcl_IsChannelRegistered(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 415 generic {
    void Tcl_CutChannel(Tcl_Channel channel)
}
declare 416 generic {
    void Tcl_SpliceChannel(Tcl_Channel channel)
}
declare 417 generic {
    void Tcl_ClearChannelHandlers(Tcl_Channel channel)
}
declare 418 generic {
    int Tcl_IsChannelExisting(CONST char* channelName)
}

declare 419 generic {
    int Tcl_UniCharNcasecmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
}
declare 420 generic {
    int Tcl_UniCharCaseMatch(CONST Tcl_UniChar *ustr,
	    CONST Tcl_UniChar *pattern, int nocase)
}

declare 421 generic {
    Tcl_HashEntry *Tcl_FindHashEntry(Tcl_HashTable *tablePtr, CONST char *key)
}

declare 422 generic {
    Tcl_HashEntry *Tcl_CreateHashEntry(Tcl_HashTable *tablePtr,
	    CONST char *key, int *newPtr)
}

declare 423 generic {
    void Tcl_InitCustomHashTable(Tcl_HashTable *tablePtr, int keyType,
	    Tcl_HashKeyType *typePtr)
}

declare 424 generic {
    void Tcl_InitObjHashTable(Tcl_HashTable *tablePtr)
}
declare 425 generic {
    ClientData Tcl_CommandTraceInfo(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *procPtr,
	    ClientData prevClientData)
}
declare 426 generic {
    int Tcl_TraceCommand(Tcl_Interp *interp, CONST char *varName, int flags,
	    Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 427 generic {
    void Tcl_UntraceCommand(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 428 generic {
    char * Tcl_AttemptAlloc(unsigned int size)
}
declare 429 generic {
    char * Tcl_AttemptDbCkalloc(unsigned int size, CONST char *file, int line)
}
declare 430 generic {
    char * Tcl_AttemptRealloc(char *ptr, unsigned int size)
}
declare 431 generic {
    char * Tcl_AttemptDbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
}
declare 432 generic {
    int Tcl_AttemptSetObjLength(Tcl_Obj *objPtr, int length)
}
declare 433 generic {
    Tcl_ThreadId Tcl_GetChannelThread(Tcl_Channel channel)
}
# introduced in 8.4a3
declare 434 generic {
    Tcl_UniChar * Tcl_GetUnicodeFromObj(Tcl_Obj *objPtr, int *lengthPtr)
}
declare 435 generic {
    int Tcl_GetMathFuncInfo(Tcl_Interp *interp, CONST char *name,
	    int *numArgsPtr, Tcl_ValueType **argTypesPtr,
	    Tcl_MathProc **procPtr, ClientData *clientDataPtr)
}
declare 436 generic {
    Tcl_Obj * Tcl_ListMathFuncs(Tcl_Interp *interp, CONST char *pattern)
}
declare 437 generic {
    Tcl_Obj * Tcl_SubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags)
}
declare 438 generic {
    int Tcl_DetachChannel(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 439 generic {
    int Tcl_IsStandardChannel(Tcl_Channel channel)
}
# New functions due to TIP#17
declare 440 generic {
    int	Tcl_FSCopyFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 441 generic {
    int	Tcl_FSCopyDirectory(Tcl_Obj *srcPathPtr,
	    Tcl_Obj *destPathPtr, Tcl_Obj **errorPtr)
}
declare 442 generic {
    int	Tcl_FSCreateDirectory(Tcl_Obj *pathPtr)
}
declare 443 generic {
    int	Tcl_FSDeleteFile(Tcl_Obj *pathPtr)
}
declare 444 generic {
    int	Tcl_FSLoadFile(Tcl_Interp * interp,
	    Tcl_Obj *pathPtr, CONST char * sym1, CONST char * sym2,
	    Tcl_PackageInitProc ** proc1Ptr,
	    Tcl_PackageInitProc ** proc2Ptr,
	    Tcl_LoadHandle * handlePtr,
	    Tcl_FSUnloadFileProc **unloadProcPtr)
}
declare 445 generic {
    int	Tcl_FSMatchInDirectory(Tcl_Interp *interp, Tcl_Obj *result,
	    Tcl_Obj *pathPtr, CONST char *pattern, Tcl_GlobTypeData *types)
}
declare 446 generic {
    Tcl_Obj * Tcl_FSLink(Tcl_Obj *pathPtr, Tcl_Obj *toPtr, int linkAction)
}
declare 447 generic {
    int Tcl_FSRemoveDirectory(Tcl_Obj *pathPtr,
	    int recursive, Tcl_Obj **errorPtr)
}
declare 448 generic {
    int	Tcl_FSRenameFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 449 generic {
    int	Tcl_FSLstat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 450 generic {
    int Tcl_FSUtime(Tcl_Obj *pathPtr, struct utimbuf *tval)
}
declare 451 generic {
    int Tcl_FSFileAttrsGet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 452 generic {
    int Tcl_FSFileAttrsSet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj *objPtr)
}
declare 453 generic {
    CONST char ** Tcl_FSFileAttrStrings(Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 454 generic {
    int Tcl_FSStat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 455 generic {
    int Tcl_FSAccess(Tcl_Obj *pathPtr, int mode)
}
declare 456 generic {
    Tcl_Channel Tcl_FSOpenFileChannel(Tcl_Interp *interp, Tcl_Obj *pathPtr,
	    CONST char *modeString, int permissions)
}
declare 457 generic {
    Tcl_Obj*  Tcl_FSGetCwd(Tcl_Interp *interp)
}
declare 458 generic {
    int Tcl_FSChdir(Tcl_Obj *pathPtr)
}
declare 459 generic {
    int Tcl_FSConvertToPathType(Tcl_Interp *interp, Tcl_Obj *pathPtr)
}
declare 460 generic {
    Tcl_Obj* Tcl_FSJoinPath(Tcl_Obj *listObj, int elements)
}
declare 461 generic {
    Tcl_Obj* Tcl_FSSplitPath(Tcl_Obj* pathPtr, int *lenPtr)
}
declare 462 generic {
    int Tcl_FSEqualPaths(Tcl_Obj* firstPtr, Tcl_Obj* secondPtr)
}
declare 463 generic {
    Tcl_Obj* Tcl_FSGetNormalizedPath(Tcl_Interp *interp, Tcl_Obj* pathObjPtr)
}
declare 464 generic {
    Tcl_Obj* Tcl_FSJoinToPath(Tcl_Obj *basePtr, int objc,
	    Tcl_Obj *CONST objv[])
}
declare 465 generic {
    ClientData Tcl_FSGetInternalRep(Tcl_Obj* pathObjPtr,
	    Tcl_Filesystem *fsPtr)
}
declare 466 generic {
    Tcl_Obj* Tcl_FSGetTranslatedPath(Tcl_Interp *interp, Tcl_Obj* pathPtr)
}
declare 467 generic {
    int Tcl_FSEvalFile(Tcl_Interp *interp, Tcl_Obj *fileName)
}
declare 468 generic {
    Tcl_Obj* Tcl_FSNewNativePath(Tcl_Filesystem* fromFilesystem,
	    ClientData clientData)
}
declare 469 generic {
    CONST char* Tcl_FSGetNativePath(Tcl_Obj* pathObjPtr)
}
declare 470 generic {
    Tcl_Obj* Tcl_FSFileSystemInfo(Tcl_Obj* pathObjPtr)
}
declare 471 generic {
    Tcl_Obj* Tcl_FSPathSeparator(Tcl_Obj* pathObjPtr)
}
declare 472 generic {
    Tcl_Obj* Tcl_FSListVolumes(void)
}
declare 473 generic {
    int Tcl_FSRegister(ClientData clientData, Tcl_Filesystem *fsPtr)
}
declare 474 generic {
    int Tcl_FSUnregister(Tcl_Filesystem *fsPtr)
}
declare 475 generic {
    ClientData Tcl_FSData(Tcl_Filesystem *fsPtr)
}
declare 476 generic {
    CONST char* Tcl_FSGetTranslatedStringPath(Tcl_Interp *interp,
	    Tcl_Obj* pathPtr)
}
declare 477 generic {
    Tcl_Filesystem* Tcl_FSGetFileSystemForPath(Tcl_Obj* pathObjPtr)
}
declare 478 generic {
    Tcl_PathType Tcl_FSGetPathType(Tcl_Obj *pathObjPtr)
}
# New function due to TIP#49
declare 479 generic {
    int Tcl_OutputBuffered(Tcl_Channel chan)
}
declare 480 generic {
    void Tcl_FSMountsChanged(Tcl_Filesystem *fsPtr)
}	  
# New function due to TIP#56
declare 481 generic {
    int Tcl_EvalTokensStandard(Tcl_Interp *interp, Tcl_Token *tokenPtr,
	    int count)
}

# New export due to TIP#73 
declare 482 generic {
    void Tcl_GetTime(Tcl_Time* timeBuf)
}

# New exports due to TIP#32

declare 483 generic {
    Tcl_Trace Tcl_CreateObjTrace(Tcl_Interp* interp, int level, int flags,
	    Tcl_CmdObjTraceProc* objProc, ClientData clientData,
	    Tcl_CmdObjTraceDeleteProc* delProc)
}
declare 484 generic {
    int Tcl_GetCommandInfoFromToken(Tcl_Command token, Tcl_CmdInfo* infoPtr)
}
declare 485 generic {
    int Tcl_SetCommandInfoFromToken(Tcl_Command token,
	    CONST Tcl_CmdInfo* infoPtr)
}

### New functions on 64-bit dev branch ###
declare 486 generic {
    Tcl_Obj * Tcl_DbNewWideIntObj(Tcl_WideInt wideValue,
	    CONST char *file, int line)
}
declare 487 generic {
    int Tcl_GetWideIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tcl_WideInt *widePtr)
}
declare 488 generic {
    Tcl_Obj * Tcl_NewWideIntObj(Tcl_WideInt wideValue)
}
declare 489 generic {
    void Tcl_SetWideIntObj(Tcl_Obj *objPtr, Tcl_WideInt wideValue)
}
declare 490 generic {
    Tcl_StatBuf * Tcl_AllocStatBuf(void)
}
declare 491 generic {
    Tcl_WideInt Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset, int mode)
}
declare 492 generic {
    Tcl_WideInt Tcl_Tell(Tcl_Channel chan)
}

# New export due to TIP#91
declare 493 generic {
    Tcl_DriverWideSeekProc * Tcl_ChannelWideSeekProc(
	    Tcl_ChannelType *chanTypePtr)
}

d1456 2
a1457 2
    int Tcl_MacEvalResource(Tcl_Interp *interp, CONST char *resourceName,
	    int resourceNumber, CONST char *fileName)
d1460 3
a1462 3
    Handle Tcl_MacFindResource(Tcl_Interp *interp, long resourceType,
	    CONST char *resourceName, int resourceNumber,
	    CONST char *resFileRef, int * releaseIt)
d1469 1
a1469 1
    int Tcl_GetOSTypeFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d1480 2
a1481 1
# Tcl shared library.  They are found in the compat directory.
a1489 11
##################
# Mac OS X declarations
#

declare 0 macosx {
    int Tcl_MacOSXOpenBundleResources(Tcl_Interp *interp,
	    CONST char *bundleName,
	    int hasResourceFile,
	    int maxPathLen,
	    char *libraryPath)
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tcl 8.3 upgrade
@
text
@@


1.1.1.2
log
@import tcl 8.4.0
@
text
@a9 1
# Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
d13 1
a13 1
# RCS: @@(#) $Id: tcl.decls,v 1.94 2002/08/31 06:09:45 das Exp $
d30 2
a31 2
    int Tcl_PkgProvideEx(Tcl_Interp* interp, CONST char* name,
	    CONST char* version, ClientData clientData)
d34 2
a35 2
    CONST84_RETURN char * Tcl_PkgRequireEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d38 1
a38 1
    void Tcl_Panic(CONST char *format, ...)
d50 1
a50 1
    char * Tcl_DbCkalloc(unsigned int size, CONST char *file, int line)
d53 1
a53 1
    int Tcl_DbCkfree(char *ptr, CONST char *file, int line)
d56 1
a56 2
    char * Tcl_DbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
d64 1
a64 1
    void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc,
d87 1
a87 1
    void Tcl_AppendToObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d93 1
a93 1
    int Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr,
d97 1
a97 1
    void Tcl_DbDecrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d100 1
a100 1
    void Tcl_DbIncrRefCount(Tcl_Obj *objPtr, CONST char *file, int line)
d103 1
a103 1
    int Tcl_DbIsShared(Tcl_Obj *objPtr, CONST char *file, int line)
d106 1
a106 1
    Tcl_Obj * Tcl_DbNewBooleanObj(int boolValue, CONST char *file, int line)
d109 2
a110 2
    Tcl_Obj * Tcl_DbNewByteArrayObj(CONST unsigned char *bytes, int length,
	    CONST char *file, int line)
d113 1
a113 2
    Tcl_Obj * Tcl_DbNewDoubleObj(double doubleValue,
	    CONST char *file, int line)
d116 2
a117 2
    Tcl_Obj * Tcl_DbNewListObj(int objc, Tcl_Obj *CONST *objv, 
	    CONST char *file, int line)
d120 1
a120 1
    Tcl_Obj * Tcl_DbNewLongObj(long longValue, CONST char *file, int line)
d123 1
a123 1
    Tcl_Obj * Tcl_DbNewObj(CONST char *file, int line)
d126 2
a127 2
    Tcl_Obj * Tcl_DbNewStringObj(CONST char *bytes, int length,
	    CONST char *file, int line)
d136 1
a136 1
    int Tcl_GetBoolean(Tcl_Interp *interp, CONST char *str, int *boolPtr)
d139 1
a139 1
    int Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d146 1
a146 1
    int Tcl_GetDouble(Tcl_Interp *interp, CONST char *str, double *doublePtr)
d149 1
a149 1
    int Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d153 2
a154 2
    int Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST84 char **tablePtr, CONST char *msg, int flags, int *indexPtr)
d157 1
a157 1
    int Tcl_GetInt(Tcl_Interp *interp, CONST char *str, int *intPtr)
d166 1
a166 1
    Tcl_ObjType * Tcl_GetObjType(CONST char *typeName)
d175 1
a175 1
    int Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr,
d179 1
a179 1
    int Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr,
d183 1
a183 1
    int Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr,
d187 1
a187 1
    int Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index,
d191 1
a191 2
    int Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr,
	    int *lengthPtr)
d194 1
a194 1
    int Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first,
d198 1
a198 1
    Tcl_Obj *Tcl_NewBooleanObj(int boolValue)
d201 1
a201 1
    Tcl_Obj *Tcl_NewByteArrayObj(CONST unsigned char* bytes, int length)
d228 1
a228 2
    void Tcl_SetByteArrayObj(Tcl_Obj *objPtr, CONST unsigned char *bytes,
	    int length)
d246 1
a246 1
    void Tcl_SetStringObj(Tcl_Obj* objPtr, CONST char* bytes, int length)
d252 1
a252 1
    void Tcl_AddObjErrorInfo(Tcl_Interp *interp, CONST char *message,
d265 1
a265 1
    Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc,
d287 2
a288 2
    int Tcl_BadChannelOption(Tcl_Interp *interp, CONST char *optionName,
	    CONST char *optionList)
d291 1
a291 1
    void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc,
d301 1
a301 1
    int Tcl_CommandComplete(CONST char *cmd)
d304 1
a304 1
    char * Tcl_Concat(int argc, CONST84 char * CONST *argv)
d310 1
a310 1
    int Tcl_ConvertCountedElement(CONST char *src, int length, char *dst,
d314 2
a315 3
    int Tcl_CreateAlias(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int argc,
	    CONST84 char * CONST *argv)
d318 2
a319 2
    int Tcl_CreateAliasObj(Tcl_Interp *slave, CONST char *slaveCmd,
	    Tcl_Interp *target, CONST char *targetCmd, int objc,
d323 2
a324 2
    Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr,
	    CONST char *chanName, ClientData instanceData, int mask)
d327 1
a327 1
    void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask,
d331 1
a331 1
    void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d335 2
a336 2
    Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, CONST char *cmdName,
	    Tcl_CmdProc *proc, ClientData clientData,
d340 1
a340 1
    void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc,
d350 2
a351 3
    void Tcl_CreateMathFunc(Tcl_Interp *interp, CONST char *name,
	    int numArgs, Tcl_ValueType *argTypes, 
	    Tcl_MathProc *proc, ClientData clientData)
d354 2
a355 3
    Tcl_Command Tcl_CreateObjCommand(Tcl_Interp *interp,
	    CONST char *cmdName,
	    Tcl_ObjCmdProc *proc, ClientData clientData,
d359 1
a359 1
    Tcl_Interp * Tcl_CreateSlave(Tcl_Interp *interp, CONST char *slaveName,
d363 1
a363 1
    Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds,
d367 1
a367 1
    Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level,
d371 1
a371 1
    void Tcl_DeleteAssocData(Tcl_Interp *interp, CONST char *name)
d374 1
a374 1
    void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc,
d378 1
a378 1
    void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc,
d382 1
a382 1
    int Tcl_DeleteCommand(Tcl_Interp *interp, CONST char *cmdName)
d391 1
a391 1
    void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc,
d416 1
a416 1
    void Tcl_DontCallWhenDeleted(Tcl_Interp *interp,
d456 1
a456 1
    CONST84_RETURN char * Tcl_ErrnoId(void)
d459 1
a459 1
    CONST84_RETURN char * Tcl_ErrnoMsg(int err)
d462 1
a462 1
    int Tcl_Eval(Tcl_Interp *interp, CONST char *string)
a463 1
# This is obsolete, use Tcl_FSEvalFile
d465 1
a465 1
    int Tcl_EvalFile(Tcl_Interp *interp, CONST char *fileName)
d477 2
a478 2
    int Tcl_ExposeCommand(Tcl_Interp *interp, CONST char *hiddenCmdToken,
	    CONST char *cmdName)
d481 1
a481 1
    int Tcl_ExprBoolean(Tcl_Interp *interp, CONST char *str, int *ptr)
d487 1
a487 1
    int Tcl_ExprDouble(Tcl_Interp *interp, CONST char *str, double *ptr)
d493 1
a493 1
    int Tcl_ExprLong(Tcl_Interp *interp, CONST char *str, long *ptr)
d499 1
a499 1
    int Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d503 1
a503 1
    int Tcl_ExprString(Tcl_Interp *interp, CONST char *string)
d512 1
a512 1
    Tcl_HashEntry * Tcl_FirstHashEntry(Tcl_HashTable *tablePtr,
d522 3
a524 3
    int Tcl_GetAlias(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *argcPtr, CONST84 char ***argvPtr)
d527 3
a529 3
    int Tcl_GetAliasObj(Tcl_Interp *interp, CONST char *slaveCmd,
	    Tcl_Interp **targetInterpPtr, CONST84 char **targetCmdPtr,
	    int *objcPtr, Tcl_Obj ***objv)
d532 1
a532 1
    ClientData Tcl_GetAssocData(Tcl_Interp *interp, CONST char *name,
d536 1
a536 1
    Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, CONST char *chanName,
d543 1
a543 1
    int Tcl_GetChannelHandle(Tcl_Channel chan, int direction,
d553 1
a553 1
    CONST84_RETURN char * Tcl_GetChannelName(Tcl_Channel chan)
d556 2
a557 2
    int Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, Tcl_DString *dsPtr)
d563 1
a563 1
    int Tcl_GetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
d567 1
a567 2
    CONST84_RETURN char * Tcl_GetCommandName(Tcl_Interp *interp,
	    Tcl_Command command)
d573 1
a573 1
    CONST84_RETURN char * Tcl_GetHostName(void)
d592 1
a592 1
    int Tcl_GetOpenFile(Tcl_Interp *interp, CONST char *str, int forWriting,
d595 1
a595 2
# Obsolete.  Should now use Tcl_FSGetPathType which is objectified
# and therefore usually faster.
d597 1
a597 1
    Tcl_PathType Tcl_GetPathType(CONST char *path)
d609 1
a609 1
    Tcl_Interp * Tcl_GetSlave(Tcl_Interp *interp, CONST char *slaveName)
d615 1
a615 1
    CONST84_RETURN char * Tcl_GetStringResult(Tcl_Interp *interp)
d618 1
a618 2
    CONST84_RETURN char * Tcl_GetVar(Tcl_Interp *interp, CONST char *varName,
	    int flags)
d621 1
a621 2
    CONST84_RETURN char * Tcl_GetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d624 1
a624 1
    int Tcl_GlobalEval(Tcl_Interp *interp, CONST char *command)
d630 2
a631 2
    int Tcl_HideCommand(Tcl_Interp *interp, CONST char *cmdName,
	    CONST char *hiddenCmdToken)
a650 1
# Obsolete, use Tcl_FSJoinPath
d652 1
a652 2
    char * Tcl_JoinPath(int argc, CONST84 char * CONST *argv,
	    Tcl_DString *resultPtr)
d655 1
a655 2
    int Tcl_LinkVar(Tcl_Interp *interp, CONST char *varName, char *addr,
	    int type)
d673 1
a673 1
    char * Tcl_Merge(int argc, CONST84 char * CONST *argv)
d682 1
a682 1
    Tcl_Obj * Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d686 1
a686 1
    Tcl_Obj * Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr,
d690 2
a691 2
    Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc,
	    CONST84 char **argv, int flags)
a692 1
# This is obsolete, use Tcl_FSOpenFileChannel
d694 2
a695 2
    Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, CONST char *fileName,
	    CONST char *modeString, int permissions)
d698 2
a699 2
    Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port,
	    CONST char *address, CONST char *myaddr, int myport, int async)
d702 2
a703 3
    Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port,
	    CONST char *host, Tcl_TcpAcceptProc *acceptProc,
	    ClientData callbackData)
d715 1
a715 1
    CONST84_RETURN char * Tcl_PosixError(Tcl_Interp *interp)
d727 1
a727 1
    int Tcl_RecordAndEval(Tcl_Interp *interp, CONST char *cmd, int flags)
d739 1
a739 1
    Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, CONST char *string)
d742 1
a742 1
    int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp,
d746 1
a746 2
    int Tcl_RegExpMatch(Tcl_Interp *interp, CONST char *str,
	    CONST char *pattern)
d749 2
a750 2
    void Tcl_RegExpRange(Tcl_RegExp regexp, int index,
	    CONST84 char **startPtr, CONST84 char **endPtr)
a763 1
# Obsolete
d765 1
a765 1
    int Tcl_SeekOld(Tcl_Channel chan, int offset, int mode)
d774 1
a774 1
    void Tcl_SetAssocData(Tcl_Interp *interp, CONST char *name,
d781 2
a782 2
    int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan,
	    CONST char *optionName, CONST char *newValue)
d785 2
a786 2
    int Tcl_SetCommandInfo(Tcl_Interp *interp, CONST char *cmdName,
	    CONST Tcl_CmdInfo *infoPtr)
d804 1
a804 1
    void Tcl_SetResult(Tcl_Interp *interp, char *str,
d820 2
a821 2
    CONST84_RETURN char * Tcl_SetVar(Tcl_Interp *interp, CONST char *varName,
	    CONST char *newValue, int flags)
d824 2
a825 2
    CONST84_RETURN char * Tcl_SetVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, CONST char *newValue, int flags)
d828 1
a828 1
    CONST84_RETURN char * Tcl_SignalId(int sig)
d831 1
a831 1
    CONST84_RETURN char * Tcl_SignalMsg(int sig)
d837 2
a838 2
    int Tcl_SplitList(Tcl_Interp *interp, CONST char *listStr, int *argcPtr,
	    CONST84 char ***argvPtr)
a839 1
# Obsolete, use Tcl_FSSplitPath
d841 1
a841 1
    void Tcl_SplitPath(CONST char *path, int *argcPtr, CONST84 char ***argvPtr)
d844 1
a844 1
    void Tcl_StaticPackage(Tcl_Interp *interp, CONST char *pkgName,
a849 1
# Obsolete
d851 1
a851 1
    int Tcl_TellOld(Tcl_Channel chan)
d854 1
a854 1
    int Tcl_TraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d858 1
a858 1
    int Tcl_TraceVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
d862 1
a862 1
    char * Tcl_TranslateFileName(Tcl_Interp *interp, CONST char *name,
d866 1
a866 1
    int Tcl_Ungets(Tcl_Channel chan, CONST char *str, int len, int atHead)
d869 1
a869 1
    void Tcl_UnlinkVar(Tcl_Interp *interp, CONST char *varName)
d875 1
a875 1
    int Tcl_UnsetVar(Tcl_Interp *interp, CONST char *varName, int flags)
d878 1
a878 2
    int Tcl_UnsetVar2(Tcl_Interp *interp, CONST char *part1, CONST char *part2,
	    int flags)
d881 1
a881 1
    void Tcl_UntraceVar(Tcl_Interp *interp, CONST char *varName, int flags,
d885 2
a886 3
    void Tcl_UntraceVar2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *proc,
	    ClientData clientData)
d889 1
a889 1
    void Tcl_UpdateLinkedVar(Tcl_Interp *interp, CONST char *varName)
d892 2
a893 2
    int Tcl_UpVar(Tcl_Interp *interp, CONST char *frameName,
	    CONST char *varName, CONST char *localName, int flags)
d896 2
a897 2
    int Tcl_UpVar2(Tcl_Interp *interp, CONST char *frameName, CONST char *part1,
	    CONST char *part2, CONST char *localName, int flags)
d903 1
a903 1
    ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, CONST char *varName,
d907 2
a908 2
    ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags, Tcl_VarTraceProc *procPtr,
d912 1
a912 1
    int Tcl_Write(Tcl_Channel chan, CONST char *s, int slen)
d915 2
a916 2
    void Tcl_WrongNumArgs(Tcl_Interp *interp, int objc,
	    Tcl_Obj *CONST objv[], CONST char *message)
d919 1
a919 1
    int Tcl_DumpActiveMemory(CONST char *fileName)
d922 1
a922 1
    void Tcl_ValidateAllMemory(CONST char *file, int line)
a923 1

d931 1
a931 1
    CONST84_RETURN char * Tcl_HashStats(Tcl_HashTable *tablePtr)
d934 1
a934 2
    CONST84_RETURN char * Tcl_ParseVar(Tcl_Interp *interp, CONST char *str,
	    CONST84 char **termPtr)
d937 2
a938 2
    CONST84_RETURN char * Tcl_PkgPresent(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact)
d941 2
a942 2
    CONST84_RETURN char * Tcl_PkgPresentEx(Tcl_Interp *interp, CONST char *name,
	    CONST char *version, int exact, ClientData *clientDataPtr)
d945 1
a945 2
    int Tcl_PkgProvide(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version)
d948 2
a949 2
    CONST84_RETURN char * Tcl_PkgRequire(Tcl_Interp *interp, CONST char *name, 
	    CONST char *version, int exact)
d960 2
a961 2
declare 278 generic {
    void Tcl_PanicVA(CONST char *format, va_list argList)
d985 3
a987 2
    Tcl_Channel Tcl_StackChannel(Tcl_Interp *interp, Tcl_ChannelType *typePtr,
	    ClientData instanceData, int mask, Tcl_Channel prevChan)
a994 6

# 284 was reserved, but added in 8.4a2
declare 284 generic {
    void Tcl_SetMainLoop(Tcl_MainLoopProc *proc)
}

d996 2
d1020 1
a1020 2
    int Tcl_EvalEx(Tcl_Interp *interp, CONST char *script, int numBytes,
	    int flags)
d1023 1
a1023 1
    int Tcl_EvalObjv(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[],
d1033 3
a1035 3
    int Tcl_ExternalToUtf(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1039 2
a1040 2
    char * Tcl_ExternalToUtfDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1058 1
a1058 1
    CONST84_RETURN char * Tcl_GetEncodingName(Tcl_Encoding encoding)
d1064 2
a1065 3
    int Tcl_GetIndexFromObjStruct(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    CONST VOID *tablePtr, int offset, CONST char *msg, int flags,
	    int *indexPtr)
d1071 2
a1072 2
    Tcl_Obj * Tcl_GetVar2Ex(Tcl_Interp *interp, CONST char *part1,
	    CONST char *part2, int flags)
d1087 1
a1087 1
    void Tcl_ConditionWait(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr,
d1094 1
a1094 1
    int Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead,
d1107 2
a1108 2
    Tcl_Obj * Tcl_SetVar2Ex(Tcl_Interp *interp, CONST char *part1, 
            CONST char *part2, Tcl_Obj *newValuePtr, int flags)
d1114 1
a1114 1
    void Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event* evPtr,
d1133 1
a1133 1
    CONST84_RETURN char * Tcl_UtfAtIndex(CONST char *src, int index)
d1142 1
a1142 1
    CONST84_RETURN char * Tcl_UtfFindFirst(CONST char *src, int ch)
d1145 1
a1145 1
    CONST84_RETURN char * Tcl_UtfFindLast(CONST char *src, int ch)
d1148 1
a1148 1
    CONST84_RETURN char * Tcl_UtfNext(CONST char *src)
d1151 1
a1151 1
    CONST84_RETURN char * Tcl_UtfPrev(CONST char *src, CONST char *start)
d1154 3
a1156 3
    int Tcl_UtfToExternal(Tcl_Interp *interp, Tcl_Encoding encoding,
	    CONST char *src, int srcLen, int flags,
	    Tcl_EncodingState *statePtr, char *dst, int dstLen,
d1160 2
a1161 2
    char * Tcl_UtfToExternalDString(Tcl_Encoding encoding,
	    CONST char *src, int srcLen, Tcl_DString *dsPtr)
d1185 1
a1185 1
    CONST84_RETURN char * Tcl_GetDefaultEncodingDir(void)
d1188 1
a1188 1
    void Tcl_SetDefaultEncodingDir(CONST char *path)
d1218 1
a1218 1
    int Tcl_UniCharLen(CONST Tcl_UniChar *str)
d1221 2
a1222 2
    int Tcl_UniCharNcmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
d1225 2
a1226 2
    char * Tcl_UniCharToUtfDString(CONST Tcl_UniChar *string,
	    int numChars, Tcl_DString *dsPtr)
d1229 2
a1230 2
    Tcl_UniChar * Tcl_UtfToUniCharDString(CONST char *string,
	    int length, Tcl_DString *dsPtr)
d1233 1
a1233 2
    Tcl_RegExp Tcl_GetRegExpFromObj(Tcl_Interp *interp, Tcl_Obj *patObj,
	    int flags)
d1237 1
a1237 1
    Tcl_Obj *Tcl_EvalTokens(Tcl_Interp *interp, Tcl_Token *tokenPtr,
d1241 1
a1241 1
    void Tcl_FreeParse(Tcl_Parse *parsePtr)
d1244 2
a1245 2
    void Tcl_LogCommandInfo(Tcl_Interp *interp, CONST char *script,
	    CONST char *command, int length)
d1248 2
a1249 2
    int Tcl_ParseBraces(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append, CONST84 char **termPtr)
d1252 1
a1252 1
    int Tcl_ParseCommand(Tcl_Interp *interp, CONST char *string, int numBytes,
d1256 1
a1256 1
    int Tcl_ParseExpr(Tcl_Interp *interp, CONST char *string, int numBytes,
d1260 2
a1261 3
    int Tcl_ParseQuotedString(Tcl_Interp *interp, CONST char *string,
	    int numBytes, Tcl_Parse *parsePtr, int append,
	    CONST84 char **termPtr)
d1264 2
a1265 2
    int Tcl_ParseVarName(Tcl_Interp *interp, CONST char *string, int numBytes,
	    Tcl_Parse *parsePtr, int append)
a1266 2
# These 4 functions are obsolete, use Tcl_FSGetCwd, Tcl_FSChdir,
# Tcl_FSAccess and Tcl_FSStat
d1301 1
a1301 1
    int Tcl_RegExpExecObj(Tcl_Interp *interp, Tcl_RegExp regexp,
d1308 1
a1308 1
    Tcl_Obj * Tcl_NewUnicodeObj(CONST Tcl_UniChar *unicode, int numChars)
d1311 1
a1311 1
    void Tcl_SetUnicodeObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
d1315 1
a1315 1
    int Tcl_GetCharLength(Tcl_Obj *objPtr)
d1318 1
a1318 1
    Tcl_UniChar Tcl_GetUniChar(Tcl_Obj *objPtr, int index)
d1321 1
a1321 1
    Tcl_UniChar * Tcl_GetUnicode(Tcl_Obj *objPtr)
d1324 1
a1324 1
    Tcl_Obj * Tcl_GetRange(Tcl_Obj *objPtr, int first, int last)
d1327 2
a1328 2
    void Tcl_AppendUnicodeToObj(Tcl_Obj *objPtr, CONST Tcl_UniChar *unicode,
	    int length)
d1331 1
a1331 1
    int Tcl_RegExpMatchObj(Tcl_Interp *interp, Tcl_Obj *stringObj,
d1344 1
a1344 1
    int Tcl_GetChannelNamesEx(Tcl_Interp *interp, CONST char *pattern)
d1347 1
a1347 1
    int Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp *interp,
d1351 1
a1351 1
    void Tcl_ConditionFinalize(Tcl_Condition *condPtr)
d1354 1
a1354 1
    void Tcl_MutexFinalize(Tcl_Mutex *mutex)
d1357 1
a1357 1
    int Tcl_CreateThread(Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc proc,
a1360 1
# Introduced in 8.3.2
d1362 1
a1362 1
    int Tcl_ReadRaw(Tcl_Channel chan, char *dst, int bytesToRead)
d1365 1
a1365 1
    int Tcl_WriteRaw(Tcl_Channel chan, CONST char *src, int srcLen)
d1368 1
a1368 1
    Tcl_Channel Tcl_GetTopChannel(Tcl_Channel chan)
d1371 1
a1371 1
    int Tcl_ChannelBuffered(Tcl_Channel chan)
d1374 1
a1374 1
    CONST84_RETURN char * Tcl_ChannelName(Tcl_ChannelType *chanTypePtr)
d1380 1
a1380 1
    Tcl_DriverBlockModeProc * Tcl_ChannelBlockModeProc(Tcl_ChannelType
d1399 1
a1399 1
    Tcl_DriverSetOptionProc * Tcl_ChannelSetOptionProc(Tcl_ChannelType
d1403 1
a1403 1
    Tcl_DriverGetOptionProc * Tcl_ChannelGetOptionProc(Tcl_ChannelType
d1410 1
a1410 1
    Tcl_DriverGetHandleProc * Tcl_ChannelGetHandleProc(Tcl_ChannelType
d1417 1
a1417 1
    Tcl_DriverHandlerProc * Tcl_ChannelHandlerProc(Tcl_ChannelType
a1420 299
# Introduced in 8.4a2
declare 412 generic {
    int Tcl_JoinThread(Tcl_ThreadId id, int* result)
}
declare 413 generic {
    int Tcl_IsChannelShared(Tcl_Channel channel)
}
declare 414 generic {
    int Tcl_IsChannelRegistered(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 415 generic {
    void Tcl_CutChannel(Tcl_Channel channel)
}
declare 416 generic {
    void Tcl_SpliceChannel(Tcl_Channel channel)
}
declare 417 generic {
    void Tcl_ClearChannelHandlers(Tcl_Channel channel)
}
declare 418 generic {
    int Tcl_IsChannelExisting(CONST char* channelName)
}

declare 419 generic {
    int Tcl_UniCharNcasecmp(CONST Tcl_UniChar *cs, CONST Tcl_UniChar *ct,
	    unsigned long n)
}
declare 420 generic {
    int Tcl_UniCharCaseMatch(CONST Tcl_UniChar *ustr,
	    CONST Tcl_UniChar *pattern, int nocase)
}

declare 421 generic {
    Tcl_HashEntry *Tcl_FindHashEntry(Tcl_HashTable *tablePtr, CONST char *key)
}

declare 422 generic {
    Tcl_HashEntry *Tcl_CreateHashEntry(Tcl_HashTable *tablePtr,
	    CONST char *key, int *newPtr)
}

declare 423 generic {
    void Tcl_InitCustomHashTable(Tcl_HashTable *tablePtr, int keyType,
	    Tcl_HashKeyType *typePtr)
}

declare 424 generic {
    void Tcl_InitObjHashTable(Tcl_HashTable *tablePtr)
}
declare 425 generic {
    ClientData Tcl_CommandTraceInfo(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *procPtr,
	    ClientData prevClientData)
}
declare 426 generic {
    int Tcl_TraceCommand(Tcl_Interp *interp, CONST char *varName, int flags,
	    Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 427 generic {
    void Tcl_UntraceCommand(Tcl_Interp *interp, CONST char *varName,
	    int flags, Tcl_CommandTraceProc *proc, ClientData clientData)
}
declare 428 generic {
    char * Tcl_AttemptAlloc(unsigned int size)
}
declare 429 generic {
    char * Tcl_AttemptDbCkalloc(unsigned int size, CONST char *file, int line)
}
declare 430 generic {
    char * Tcl_AttemptRealloc(char *ptr, unsigned int size)
}
declare 431 generic {
    char * Tcl_AttemptDbCkrealloc(char *ptr, unsigned int size,
	    CONST char *file, int line)
}
declare 432 generic {
    int Tcl_AttemptSetObjLength(Tcl_Obj *objPtr, int length)
}
declare 433 generic {
    Tcl_ThreadId Tcl_GetChannelThread(Tcl_Channel channel)
}
# introduced in 8.4a3
declare 434 generic {
    Tcl_UniChar * Tcl_GetUnicodeFromObj(Tcl_Obj *objPtr, int *lengthPtr)
}
declare 435 generic {
    int Tcl_GetMathFuncInfo(Tcl_Interp *interp, CONST char *name,
	    int *numArgsPtr, Tcl_ValueType **argTypesPtr,
	    Tcl_MathProc **procPtr, ClientData *clientDataPtr)
}
declare 436 generic {
    Tcl_Obj * Tcl_ListMathFuncs(Tcl_Interp *interp, CONST char *pattern)
}
declare 437 generic {
    Tcl_Obj * Tcl_SubstObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags)
}
declare 438 generic {
    int Tcl_DetachChannel(Tcl_Interp* interp, Tcl_Channel channel)
}
declare 439 generic {
    int Tcl_IsStandardChannel(Tcl_Channel channel)
}
# New functions due to TIP#17
declare 440 generic {
    int	Tcl_FSCopyFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 441 generic {
    int	Tcl_FSCopyDirectory(Tcl_Obj *srcPathPtr,
	    Tcl_Obj *destPathPtr, Tcl_Obj **errorPtr)
}
declare 442 generic {
    int	Tcl_FSCreateDirectory(Tcl_Obj *pathPtr)
}
declare 443 generic {
    int	Tcl_FSDeleteFile(Tcl_Obj *pathPtr)
}
declare 444 generic {
    int	Tcl_FSLoadFile(Tcl_Interp * interp,
	    Tcl_Obj *pathPtr, CONST char * sym1, CONST char * sym2,
	    Tcl_PackageInitProc ** proc1Ptr,
	    Tcl_PackageInitProc ** proc2Ptr,
	    Tcl_LoadHandle * handlePtr,
	    Tcl_FSUnloadFileProc **unloadProcPtr)
}
declare 445 generic {
    int	Tcl_FSMatchInDirectory(Tcl_Interp *interp, Tcl_Obj *result,
	    Tcl_Obj *pathPtr, CONST char *pattern, Tcl_GlobTypeData *types)
}
declare 446 generic {
    Tcl_Obj * Tcl_FSLink(Tcl_Obj *pathPtr, Tcl_Obj *toPtr, int linkAction)
}
declare 447 generic {
    int Tcl_FSRemoveDirectory(Tcl_Obj *pathPtr,
	    int recursive, Tcl_Obj **errorPtr)
}
declare 448 generic {
    int	Tcl_FSRenameFile(Tcl_Obj *srcPathPtr, Tcl_Obj *destPathPtr)
}
declare 449 generic {
    int	Tcl_FSLstat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 450 generic {
    int Tcl_FSUtime(Tcl_Obj *pathPtr, struct utimbuf *tval)
}
declare 451 generic {
    int Tcl_FSFileAttrsGet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 452 generic {
    int Tcl_FSFileAttrsSet(Tcl_Interp *interp,
	    int index, Tcl_Obj *pathPtr, Tcl_Obj *objPtr)
}
declare 453 generic {
    CONST char ** Tcl_FSFileAttrStrings(Tcl_Obj *pathPtr, Tcl_Obj **objPtrRef)
}
declare 454 generic {
    int Tcl_FSStat(Tcl_Obj *pathPtr, Tcl_StatBuf *buf)
}
declare 455 generic {
    int Tcl_FSAccess(Tcl_Obj *pathPtr, int mode)
}
declare 456 generic {
    Tcl_Channel Tcl_FSOpenFileChannel(Tcl_Interp *interp, Tcl_Obj *pathPtr,
	    CONST char *modeString, int permissions)
}
declare 457 generic {
    Tcl_Obj*  Tcl_FSGetCwd(Tcl_Interp *interp)
}
declare 458 generic {
    int Tcl_FSChdir(Tcl_Obj *pathPtr)
}
declare 459 generic {
    int Tcl_FSConvertToPathType(Tcl_Interp *interp, Tcl_Obj *pathPtr)
}
declare 460 generic {
    Tcl_Obj* Tcl_FSJoinPath(Tcl_Obj *listObj, int elements)
}
declare 461 generic {
    Tcl_Obj* Tcl_FSSplitPath(Tcl_Obj* pathPtr, int *lenPtr)
}
declare 462 generic {
    int Tcl_FSEqualPaths(Tcl_Obj* firstPtr, Tcl_Obj* secondPtr)
}
declare 463 generic {
    Tcl_Obj* Tcl_FSGetNormalizedPath(Tcl_Interp *interp, Tcl_Obj* pathObjPtr)
}
declare 464 generic {
    Tcl_Obj* Tcl_FSJoinToPath(Tcl_Obj *basePtr, int objc,
	    Tcl_Obj *CONST objv[])
}
declare 465 generic {
    ClientData Tcl_FSGetInternalRep(Tcl_Obj* pathObjPtr,
	    Tcl_Filesystem *fsPtr)
}
declare 466 generic {
    Tcl_Obj* Tcl_FSGetTranslatedPath(Tcl_Interp *interp, Tcl_Obj* pathPtr)
}
declare 467 generic {
    int Tcl_FSEvalFile(Tcl_Interp *interp, Tcl_Obj *fileName)
}
declare 468 generic {
    Tcl_Obj* Tcl_FSNewNativePath(Tcl_Filesystem* fromFilesystem,
	    ClientData clientData)
}
declare 469 generic {
    CONST char* Tcl_FSGetNativePath(Tcl_Obj* pathObjPtr)
}
declare 470 generic {
    Tcl_Obj* Tcl_FSFileSystemInfo(Tcl_Obj* pathObjPtr)
}
declare 471 generic {
    Tcl_Obj* Tcl_FSPathSeparator(Tcl_Obj* pathObjPtr)
}
declare 472 generic {
    Tcl_Obj* Tcl_FSListVolumes(void)
}
declare 473 generic {
    int Tcl_FSRegister(ClientData clientData, Tcl_Filesystem *fsPtr)
}
declare 474 generic {
    int Tcl_FSUnregister(Tcl_Filesystem *fsPtr)
}
declare 475 generic {
    ClientData Tcl_FSData(Tcl_Filesystem *fsPtr)
}
declare 476 generic {
    CONST char* Tcl_FSGetTranslatedStringPath(Tcl_Interp *interp,
	    Tcl_Obj* pathPtr)
}
declare 477 generic {
    Tcl_Filesystem* Tcl_FSGetFileSystemForPath(Tcl_Obj* pathObjPtr)
}
declare 478 generic {
    Tcl_PathType Tcl_FSGetPathType(Tcl_Obj *pathObjPtr)
}
# New function due to TIP#49
declare 479 generic {
    int Tcl_OutputBuffered(Tcl_Channel chan)
}
declare 480 generic {
    void Tcl_FSMountsChanged(Tcl_Filesystem *fsPtr)
}	  
# New function due to TIP#56
declare 481 generic {
    int Tcl_EvalTokensStandard(Tcl_Interp *interp, Tcl_Token *tokenPtr,
	    int count)
}

# New export due to TIP#73 
declare 482 generic {
    void Tcl_GetTime(Tcl_Time* timeBuf)
}

# New exports due to TIP#32

declare 483 generic {
    Tcl_Trace Tcl_CreateObjTrace(Tcl_Interp* interp, int level, int flags,
	    Tcl_CmdObjTraceProc* objProc, ClientData clientData,
	    Tcl_CmdObjTraceDeleteProc* delProc)
}
declare 484 generic {
    int Tcl_GetCommandInfoFromToken(Tcl_Command token, Tcl_CmdInfo* infoPtr)
}
declare 485 generic {
    int Tcl_SetCommandInfoFromToken(Tcl_Command token,
	    CONST Tcl_CmdInfo* infoPtr)
}

### New functions on 64-bit dev branch ###
declare 486 generic {
    Tcl_Obj * Tcl_DbNewWideIntObj(Tcl_WideInt wideValue,
	    CONST char *file, int line)
}
declare 487 generic {
    int Tcl_GetWideIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
	    Tcl_WideInt *widePtr)
}
declare 488 generic {
    Tcl_Obj * Tcl_NewWideIntObj(Tcl_WideInt wideValue)
}
declare 489 generic {
    void Tcl_SetWideIntObj(Tcl_Obj *objPtr, Tcl_WideInt wideValue)
}
declare 490 generic {
    Tcl_StatBuf * Tcl_AllocStatBuf(void)
}
declare 491 generic {
    Tcl_WideInt Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset, int mode)
}
declare 492 generic {
    Tcl_WideInt Tcl_Tell(Tcl_Channel chan)
}

# New export due to TIP#91
declare 493 generic {
    Tcl_DriverWideSeekProc * Tcl_ChannelWideSeekProc(
	    Tcl_ChannelType *chanTypePtr)
}

d1456 2
a1457 2
    int Tcl_MacEvalResource(Tcl_Interp *interp, CONST char *resourceName,
	    int resourceNumber, CONST char *fileName)
d1460 3
a1462 3
    Handle Tcl_MacFindResource(Tcl_Interp *interp, long resourceType,
	    CONST char *resourceName, int resourceNumber,
	    CONST char *resFileRef, int * releaseIt)
d1469 1
a1469 1
    int Tcl_GetOSTypeFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr,
d1480 2
a1481 1
# Tcl shared library.  They are found in the compat directory.
a1489 11
##################
# Mac OS X declarations
#

declare 0 macosx {
    int Tcl_MacOSXOpenBundleResources(Tcl_Interp *interp,
	    CONST char *bundleName,
	    int hasResourceFile,
	    int maxPathLen,
	    char *libraryPath)
}
@

