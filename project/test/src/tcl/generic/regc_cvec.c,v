head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.60
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.58
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.56
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.54
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.52
	gdb_7_0-branch:1.5.0.50
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.48
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.46
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.44
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.42
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.40
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.38
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.36
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.34
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.32
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.30
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.28
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.26
	gdb_5_1-2001-07-29-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.2
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.2
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TCL_8_4_0:1.1.1.2
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2003.01.21.19.40.01;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.47.51;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.02;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.04;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	2001.09.09.22.40.54;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.02;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.42;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2003.02.07.19.18.09;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	2001.09.09.22.40.54;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.24.19.55.52;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@/*
 * Utility functions for handling cvecs
 * This file is #included by regcomp.c.
 *
 * Copyright (c) 1998, 1999 Henry Spencer.  All rights reserved.
 * 
 * Development of this software was funded, in part, by Cray Research Inc.,
 * UUNET Communications Services Inc., Sun Microsystems Inc., and Scriptics
 * Corporation, none of whom are responsible for the results.  The author
 * thanks all of them. 
 * 
 * Redistribution and use in source and binary forms -- with or without
 * modification -- are permitted for any purpose, provided that
 * redistributions in source form retain this entire copyright notice and
 * indicate the origin and nature of any modifications.
 * 
 * I'd appreciate being given credit for this package in the documentation
 * of software which uses it, but that is not a requirement.
 * 
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * HENRY SPENCER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 - newcvec - allocate a new cvec
 ^ static struct cvec *newcvec(int, int, int);
 */
static struct cvec *
newcvec(nchrs, nranges, nmcces)
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    size_t n;
    size_t nc;
    struct cvec *cv;

    nc = (size_t)nchrs + (size_t)nmcces*(MAXMCCE+1) + (size_t)nranges*2;
    n = sizeof(struct cvec) + (size_t)(nmcces-1)*sizeof(chr *)
	    + nc*sizeof(chr);
    cv = (struct cvec *)MALLOC(n);
    if (cv == NULL) {
	return NULL;
    }
    cv->chrspace = nchrs;
    cv->chrs = (chr *)&cv->mcces[nmcces];	/* chrs just after MCCE ptrs */
    cv->mccespace = nmcces;
    cv->ranges = cv->chrs + nchrs + nmcces*(MAXMCCE+1);
    cv->rangespace = nranges;
    return clearcvec(cv);
}

/*
 - clearcvec - clear a possibly-new cvec
 * Returns pointer as convenience.
 ^ static struct cvec *clearcvec(struct cvec *);
 */
static struct cvec *
clearcvec(cv)
    struct cvec *cv;			/* character vector */
{
    int i;

    assert(cv != NULL);
    cv->nchrs = 0;
    assert(cv->chrs == (chr *)&cv->mcces[cv->mccespace]);
    cv->nmcces = 0;
    cv->nmccechrs = 0;
    cv->nranges = 0;
    for (i = 0; i < cv->mccespace; i++) {
	cv->mcces[i] = NULL;
    }

    return cv;
}

/*
 - addchr - add a chr to a cvec
 ^ static VOID addchr(struct cvec *, pchr);
 */
static VOID
addchr(cv, c)
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to add */
{
    assert(cv->nchrs < cv->chrspace - cv->nmccechrs);
    cv->chrs[cv->nchrs++] = (chr)c;
}

/*
 - addrange - add a range to a cvec
 ^ static VOID addrange(struct cvec *, pchr, pchr);
 */
static VOID
addrange(cv, from, to)
    struct cvec *cv;			/* character vector */
    pchr from;				/* first character of range */
    pchr to;				/* last character of range */
{
    assert(cv->nranges < cv->rangespace);
    cv->ranges[cv->nranges*2] = (chr)from;
    cv->ranges[cv->nranges*2 + 1] = (chr)to;
    cv->nranges++;
}

/*
 - addmcce - add an MCCE to a cvec
 ^ static VOID addmcce(struct cvec *, chr *, chr *);
 */
static VOID
addmcce(cv, startp, endp)
    struct cvec *cv;			/* character vector */
    chr *startp;			/* beginning of text */
    chr *endp;				/* just past end of text */
{
    int len;
    int i;
    chr *s;
    chr *d;

    if (startp == NULL && endp == NULL) {
	return;
    }
    len = endp - startp;
    assert(len > 0);
    assert(cv->nchrs + len < cv->chrspace - cv->nmccechrs);
    assert(cv->nmcces < cv->mccespace);
    d = &cv->chrs[cv->chrspace - cv->nmccechrs - len - 1];
    cv->mcces[cv->nmcces++] = d;
    for (s = startp, i = len; i > 0; s++, i--) {
	*d++ = *s;
    }
    *d++ = 0;				/* endmarker */
    assert(d == &cv->chrs[cv->chrspace - cv->nmccechrs]);
    cv->nmccechrs += len + 1;
}

/*
 - haschr - does a cvec contain this chr?
 ^ static int haschr(struct cvec *, pchr);
 */
static int				/* predicate */
haschr(cv, c)
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to test for */
{
    int i;
    chr *p;

    for (p = cv->chrs, i = cv->nchrs; i > 0; p++, i--) {
	if (*p == c) {
	    return 1;
	}
    }
    for (p = cv->ranges, i = cv->nranges; i > 0; p += 2, i--) {
	if ((*p <= c) && (c <= *(p+1))) {
	    return 1;
	}
    }
    return 0;
}

/*
 - getcvec - get a cvec, remembering it as v->cv
 ^ static struct cvec *getcvec(struct vars *, int, int, int);
 */
static struct cvec *
getcvec(v, nchrs, nranges, nmcces)
    struct vars *v;			/* context */
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    if (v->cv != NULL && nchrs <= v->cv->chrspace &&
	    nranges <= v->cv->rangespace && nmcces <= v->cv->mccespace) {
	return clearcvec(v->cv);
    }

    if (v->cv != NULL) {
	freecvec(v->cv);
    }
    v->cv = newcvec(nchrs, nranges, nmcces);
    if (v->cv == NULL) {
	ERR(REG_ESPACE);
    }

    return v->cv;
}

/*
 - freecvec - free a cvec
 ^ static VOID freecvec(struct cvec *);
 */
static VOID
freecvec(cv)
    struct cvec *cv;			/* character vector */
{
    FREE(cv);
}
@


1.4
log
@touched all sources to ease next import
@
text
@d39 21
a59 20
int nchrs;			/* to hold this many chrs... */
int nranges;			/* ... and this many ranges... */
int nmcces;			/* ... and this many MCCEs */
{
	size_t n;
	size_t nc;
	struct cvec *cv;

	nc = (size_t)nchrs + (size_t)nmcces*(MAXMCCE+1) + (size_t)nranges*2;
	n = sizeof(struct cvec) + (size_t)(nmcces-1)*sizeof(chr *) +
								nc*sizeof(chr);
	cv = (struct cvec *)MALLOC(n);
	if (cv == NULL)
		return NULL;
	cv->chrspace = nc;
	cv->chrs = (chr *)&cv->mcces[nmcces];	/* chrs just after MCCE ptrs */
	cv->mccespace = nmcces;
	cv->ranges = cv->chrs + nchrs + nmcces*(MAXMCCE+1);
	cv->rangespace = nranges;
	return clearcvec(cv);
d69 1
a69 1
struct cvec *cv;
d71 1
a71 1
	int i;
d73 9
a81 8
	assert(cv != NULL);
	cv->nchrs = 0;
	assert(cv->chrs == (chr *)&cv->mcces[cv->mccespace]);
	cv->nmcces = 0;
	cv->nmccechrs = 0;
	cv->nranges = 0;
	for (i = 0; i < cv->mccespace; i++)
		cv->mcces[i] = NULL;
d83 1
a83 1
	return cv;
d92 2
a93 2
struct cvec *cv;
pchr c;
d95 2
a96 2
	assert(cv->nchrs < cv->chrspace - cv->nmccechrs);
	cv->chrs[cv->nchrs++] = (chr)c;
d105 8
a112 8
struct cvec *cv;
pchr from;
pchr to;
{
	assert(cv->nranges < cv->rangespace);
	cv->ranges[cv->nranges*2] = (chr)from;
	cv->ranges[cv->nranges*2 + 1] = (chr)to;
	cv->nranges++;
d121 24
a144 22
struct cvec *cv;
chr *startp;			/* beginning of text */
chr *endp;			/* just past end of text */
{
	int len;
	int i;
	chr *s;
	chr *d;

	if (startp == NULL && endp == NULL)
		return;
	len = endp - startp;
	assert(len > 0);
	assert(cv->nchrs + len < cv->chrspace - cv->nmccechrs);
	assert(cv->nmcces < cv->mccespace);
	d = &cv->chrs[cv->chrspace - cv->nmccechrs - len - 1];
	cv->mcces[cv->nmcces++] = d;
	for (s = startp, i = len; i > 0; s++, i--)
		*d++ = *s;
	*d++ = 0;		/* endmarker */
	assert(d == &cv->chrs[cv->chrspace - cv->nmccechrs]);
	cv->nmccechrs += len + 1;
d151 1
a151 1
static int			/* predicate */
d153 2
a154 2
struct cvec *cv;
pchr c;
d156 2
a157 2
	int i;
	chr *p;
d159 11
a169 7
	for (p = cv->chrs, i = cv->nchrs; i > 0; p++, i--)
		if (*p == c)
			return 1;
	for (p = cv->ranges, i = cv->nranges; i > 0; p += 2, i--)
		if (*p <= c && c <= *(p+1))
			return 1;
	return 0;
d178 17
a194 15
struct vars *v;
int nchrs;			/* to hold this many chrs... */
int nranges;			/* ... and this many ranges... */
int nmcces;			/* ... and this many MCCEs */
{
	if (v->cv != NULL && nchrs <= v->cv->chrspace &&
					nranges <= v->cv->rangespace &&
					nmcces <= v->cv->mccespace)
		return clearcvec(v->cv);

	if (v->cv != NULL)
		freecvec(v->cv);
	v->cv = newcvec(nchrs, nranges, nmcces);
	if (v->cv == NULL)
		ERR(REG_ESPACE);
d196 1
a196 1
	return v->cv;
d205 1
a205 1
struct cvec *cv;
d207 1
a207 1
	FREE(cv);
@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d39 20
a58 21
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    size_t n;
    size_t nc;
    struct cvec *cv;

    nc = (size_t)nchrs + (size_t)nmcces*(MAXMCCE+1) + (size_t)nranges*2;
    n = sizeof(struct cvec) + (size_t)(nmcces-1)*sizeof(chr *)
	    + nc*sizeof(chr);
    cv = (struct cvec *)MALLOC(n);
    if (cv == NULL) {
	return NULL;
    }
    cv->chrspace = nchrs;
    cv->chrs = (chr *)&cv->mcces[nmcces];	/* chrs just after MCCE ptrs */
    cv->mccespace = nmcces;
    cv->ranges = cv->chrs + nchrs + nmcces*(MAXMCCE+1);
    cv->rangespace = nranges;
    return clearcvec(cv);
d68 1
a68 1
    struct cvec *cv;			/* character vector */
d70 1
a70 1
    int i;
d72 8
a79 9
    assert(cv != NULL);
    cv->nchrs = 0;
    assert(cv->chrs == (chr *)&cv->mcces[cv->mccespace]);
    cv->nmcces = 0;
    cv->nmccechrs = 0;
    cv->nranges = 0;
    for (i = 0; i < cv->mccespace; i++) {
	cv->mcces[i] = NULL;
    }
d81 1
a81 1
    return cv;
d90 2
a91 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to add */
d93 2
a94 2
    assert(cv->nchrs < cv->chrspace - cv->nmccechrs);
    cv->chrs[cv->nchrs++] = (chr)c;
d103 8
a110 8
    struct cvec *cv;			/* character vector */
    pchr from;				/* first character of range */
    pchr to;				/* last character of range */
{
    assert(cv->nranges < cv->rangespace);
    cv->ranges[cv->nranges*2] = (chr)from;
    cv->ranges[cv->nranges*2 + 1] = (chr)to;
    cv->nranges++;
d119 22
a140 24
    struct cvec *cv;			/* character vector */
    chr *startp;			/* beginning of text */
    chr *endp;				/* just past end of text */
{
    int len;
    int i;
    chr *s;
    chr *d;

    if (startp == NULL && endp == NULL) {
	return;
    }
    len = endp - startp;
    assert(len > 0);
    assert(cv->nchrs + len < cv->chrspace - cv->nmccechrs);
    assert(cv->nmcces < cv->mccespace);
    d = &cv->chrs[cv->chrspace - cv->nmccechrs - len - 1];
    cv->mcces[cv->nmcces++] = d;
    for (s = startp, i = len; i > 0; s++, i--) {
	*d++ = *s;
    }
    *d++ = 0;				/* endmarker */
    assert(d == &cv->chrs[cv->chrspace - cv->nmccechrs]);
    cv->nmccechrs += len + 1;
d147 1
a147 1
static int				/* predicate */
d149 2
a150 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to test for */
d152 2
a153 2
    int i;
    chr *p;
d155 7
a161 11
    for (p = cv->chrs, i = cv->nchrs; i > 0; p++, i--) {
	if (*p == c) {
	    return 1;
	}
    }
    for (p = cv->ranges, i = cv->nranges; i > 0; p += 2, i--) {
	if ((*p <= c) && (c <= *(p+1))) {
	    return 1;
	}
    }
    return 0;
d170 15
a184 17
    struct vars *v;			/* context */
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    if (v->cv != NULL && nchrs <= v->cv->chrspace &&
	    nranges <= v->cv->rangespace && nmcces <= v->cv->mccespace) {
	return clearcvec(v->cv);
    }

    if (v->cv != NULL) {
	freecvec(v->cv);
    }
    v->cv = newcvec(nchrs, nranges, nmcces);
    if (v->cv == NULL) {
	ERR(REG_ESPACE);
    }
d186 1
a186 1
    return v->cv;
d195 1
a195 1
    struct cvec *cv;			/* character vector */
d197 1
a197 1
    FREE(cv);
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d39 20
a58 21
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    size_t n;
    size_t nc;
    struct cvec *cv;

    nc = (size_t)nchrs + (size_t)nmcces*(MAXMCCE+1) + (size_t)nranges*2;
    n = sizeof(struct cvec) + (size_t)(nmcces-1)*sizeof(chr *)
	    + nc*sizeof(chr);
    cv = (struct cvec *)MALLOC(n);
    if (cv == NULL) {
	return NULL;
    }
    cv->chrspace = nchrs;
    cv->chrs = (chr *)&cv->mcces[nmcces];	/* chrs just after MCCE ptrs */
    cv->mccespace = nmcces;
    cv->ranges = cv->chrs + nchrs + nmcces*(MAXMCCE+1);
    cv->rangespace = nranges;
    return clearcvec(cv);
d68 1
a68 1
    struct cvec *cv;			/* character vector */
d70 1
a70 1
    int i;
d72 8
a79 9
    assert(cv != NULL);
    cv->nchrs = 0;
    assert(cv->chrs == (chr *)&cv->mcces[cv->mccespace]);
    cv->nmcces = 0;
    cv->nmccechrs = 0;
    cv->nranges = 0;
    for (i = 0; i < cv->mccespace; i++) {
	cv->mcces[i] = NULL;
    }
d81 1
a81 1
    return cv;
d90 2
a91 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to add */
d93 2
a94 2
    assert(cv->nchrs < cv->chrspace - cv->nmccechrs);
    cv->chrs[cv->nchrs++] = (chr)c;
d103 8
a110 8
    struct cvec *cv;			/* character vector */
    pchr from;				/* first character of range */
    pchr to;				/* last character of range */
{
    assert(cv->nranges < cv->rangespace);
    cv->ranges[cv->nranges*2] = (chr)from;
    cv->ranges[cv->nranges*2 + 1] = (chr)to;
    cv->nranges++;
d119 22
a140 24
    struct cvec *cv;			/* character vector */
    chr *startp;			/* beginning of text */
    chr *endp;				/* just past end of text */
{
    int len;
    int i;
    chr *s;
    chr *d;

    if (startp == NULL && endp == NULL) {
	return;
    }
    len = endp - startp;
    assert(len > 0);
    assert(cv->nchrs + len < cv->chrspace - cv->nmccechrs);
    assert(cv->nmcces < cv->mccespace);
    d = &cv->chrs[cv->chrspace - cv->nmccechrs - len - 1];
    cv->mcces[cv->nmcces++] = d;
    for (s = startp, i = len; i > 0; s++, i--) {
	*d++ = *s;
    }
    *d++ = 0;				/* endmarker */
    assert(d == &cv->chrs[cv->chrspace - cv->nmccechrs]);
    cv->nmccechrs += len + 1;
d147 1
a147 1
static int				/* predicate */
d149 2
a150 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to test for */
d152 2
a153 2
    int i;
    chr *p;
d155 7
a161 11
    for (p = cv->chrs, i = cv->nchrs; i > 0; p++, i--) {
	if (*p == c) {
	    return 1;
	}
    }
    for (p = cv->ranges, i = cv->nranges; i > 0; p += 2, i--) {
	if ((*p <= c) && (c <= *(p+1))) {
	    return 1;
	}
    }
    return 0;
d170 15
a184 17
    struct vars *v;			/* context */
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    if (v->cv != NULL && nchrs <= v->cv->chrspace &&
	    nranges <= v->cv->rangespace && nmcces <= v->cv->mccespace) {
	return clearcvec(v->cv);
    }

    if (v->cv != NULL) {
	freecvec(v->cv);
    }
    v->cv = newcvec(nchrs, nranges, nmcces);
    if (v->cv == NULL) {
	ERR(REG_ESPACE);
    }
d186 1
a186 1
    return v->cv;
d195 1
a195 1
    struct cvec *cv;			/* character vector */
d197 1
a197 1
    FREE(cv);
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d39 20
a58 21
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    size_t n;
    size_t nc;
    struct cvec *cv;

    nc = (size_t)nchrs + (size_t)nmcces*(MAXMCCE+1) + (size_t)nranges*2;
    n = sizeof(struct cvec) + (size_t)(nmcces-1)*sizeof(chr *)
	    + nc*sizeof(chr);
    cv = (struct cvec *)MALLOC(n);
    if (cv == NULL) {
	return NULL;
    }
    cv->chrspace = nchrs;
    cv->chrs = (chr *)&cv->mcces[nmcces];	/* chrs just after MCCE ptrs */
    cv->mccespace = nmcces;
    cv->ranges = cv->chrs + nchrs + nmcces*(MAXMCCE+1);
    cv->rangespace = nranges;
    return clearcvec(cv);
d68 1
a68 1
    struct cvec *cv;			/* character vector */
d70 1
a70 1
    int i;
d72 8
a79 9
    assert(cv != NULL);
    cv->nchrs = 0;
    assert(cv->chrs == (chr *)&cv->mcces[cv->mccespace]);
    cv->nmcces = 0;
    cv->nmccechrs = 0;
    cv->nranges = 0;
    for (i = 0; i < cv->mccespace; i++) {
	cv->mcces[i] = NULL;
    }
d81 1
a81 1
    return cv;
d90 2
a91 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to add */
d93 2
a94 2
    assert(cv->nchrs < cv->chrspace - cv->nmccechrs);
    cv->chrs[cv->nchrs++] = (chr)c;
d103 8
a110 8
    struct cvec *cv;			/* character vector */
    pchr from;				/* first character of range */
    pchr to;				/* last character of range */
{
    assert(cv->nranges < cv->rangespace);
    cv->ranges[cv->nranges*2] = (chr)from;
    cv->ranges[cv->nranges*2 + 1] = (chr)to;
    cv->nranges++;
d119 22
a140 24
    struct cvec *cv;			/* character vector */
    chr *startp;			/* beginning of text */
    chr *endp;				/* just past end of text */
{
    int len;
    int i;
    chr *s;
    chr *d;

    if (startp == NULL && endp == NULL) {
	return;
    }
    len = endp - startp;
    assert(len > 0);
    assert(cv->nchrs + len < cv->chrspace - cv->nmccechrs);
    assert(cv->nmcces < cv->mccespace);
    d = &cv->chrs[cv->chrspace - cv->nmccechrs - len - 1];
    cv->mcces[cv->nmcces++] = d;
    for (s = startp, i = len; i > 0; s++, i--) {
	*d++ = *s;
    }
    *d++ = 0;				/* endmarker */
    assert(d == &cv->chrs[cv->chrspace - cv->nmccechrs]);
    cv->nmccechrs += len + 1;
d147 1
a147 1
static int				/* predicate */
d149 2
a150 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to test for */
d152 2
a153 2
    int i;
    chr *p;
d155 7
a161 11
    for (p = cv->chrs, i = cv->nchrs; i > 0; p++, i--) {
	if (*p == c) {
	    return 1;
	}
    }
    for (p = cv->ranges, i = cv->nranges; i > 0; p += 2, i--) {
	if ((*p <= c) && (c <= *(p+1))) {
	    return 1;
	}
    }
    return 0;
d170 15
a184 17
    struct vars *v;			/* context */
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    if (v->cv != NULL && nchrs <= v->cv->chrspace &&
	    nranges <= v->cv->rangespace && nmcces <= v->cv->mccespace) {
	return clearcvec(v->cv);
    }

    if (v->cv != NULL) {
	freecvec(v->cv);
    }
    v->cv = newcvec(nchrs, nranges, nmcces);
    if (v->cv == NULL) {
	ERR(REG_ESPACE);
    }
d186 1
a186 1
    return v->cv;
d195 1
a195 1
    struct cvec *cv;			/* character vector */
d197 1
a197 1
    FREE(cv);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tcl 8.3 upgrade
@
text
@@


1.1.1.2
log
@import tcl 8.4.0
@
text
@d39 20
a58 21
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    size_t n;
    size_t nc;
    struct cvec *cv;

    nc = (size_t)nchrs + (size_t)nmcces*(MAXMCCE+1) + (size_t)nranges*2;
    n = sizeof(struct cvec) + (size_t)(nmcces-1)*sizeof(chr *)
	    + nc*sizeof(chr);
    cv = (struct cvec *)MALLOC(n);
    if (cv == NULL) {
	return NULL;
    }
    cv->chrspace = nchrs;
    cv->chrs = (chr *)&cv->mcces[nmcces];	/* chrs just after MCCE ptrs */
    cv->mccespace = nmcces;
    cv->ranges = cv->chrs + nchrs + nmcces*(MAXMCCE+1);
    cv->rangespace = nranges;
    return clearcvec(cv);
d68 1
a68 1
    struct cvec *cv;			/* character vector */
d70 1
a70 1
    int i;
d72 8
a79 9
    assert(cv != NULL);
    cv->nchrs = 0;
    assert(cv->chrs == (chr *)&cv->mcces[cv->mccespace]);
    cv->nmcces = 0;
    cv->nmccechrs = 0;
    cv->nranges = 0;
    for (i = 0; i < cv->mccespace; i++) {
	cv->mcces[i] = NULL;
    }
d81 1
a81 1
    return cv;
d90 2
a91 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to add */
d93 2
a94 2
    assert(cv->nchrs < cv->chrspace - cv->nmccechrs);
    cv->chrs[cv->nchrs++] = (chr)c;
d103 8
a110 8
    struct cvec *cv;			/* character vector */
    pchr from;				/* first character of range */
    pchr to;				/* last character of range */
{
    assert(cv->nranges < cv->rangespace);
    cv->ranges[cv->nranges*2] = (chr)from;
    cv->ranges[cv->nranges*2 + 1] = (chr)to;
    cv->nranges++;
d119 22
a140 24
    struct cvec *cv;			/* character vector */
    chr *startp;			/* beginning of text */
    chr *endp;				/* just past end of text */
{
    int len;
    int i;
    chr *s;
    chr *d;

    if (startp == NULL && endp == NULL) {
	return;
    }
    len = endp - startp;
    assert(len > 0);
    assert(cv->nchrs + len < cv->chrspace - cv->nmccechrs);
    assert(cv->nmcces < cv->mccespace);
    d = &cv->chrs[cv->chrspace - cv->nmccechrs - len - 1];
    cv->mcces[cv->nmcces++] = d;
    for (s = startp, i = len; i > 0; s++, i--) {
	*d++ = *s;
    }
    *d++ = 0;				/* endmarker */
    assert(d == &cv->chrs[cv->chrspace - cv->nmccechrs]);
    cv->nmccechrs += len + 1;
d147 1
a147 1
static int				/* predicate */
d149 2
a150 2
    struct cvec *cv;			/* character vector */
    pchr c;				/* character to test for */
d152 2
a153 2
    int i;
    chr *p;
d155 7
a161 11
    for (p = cv->chrs, i = cv->nchrs; i > 0; p++, i--) {
	if (*p == c) {
	    return 1;
	}
    }
    for (p = cv->ranges, i = cv->nranges; i > 0; p += 2, i--) {
	if ((*p <= c) && (c <= *(p+1))) {
	    return 1;
	}
    }
    return 0;
d170 15
a184 17
    struct vars *v;			/* context */
    int nchrs;				/* to hold this many chrs... */
    int nranges;			/* ... and this many ranges... */
    int nmcces;				/* ... and this many MCCEs */
{
    if (v->cv != NULL && nchrs <= v->cv->chrspace &&
	    nranges <= v->cv->rangespace && nmcces <= v->cv->mccespace) {
	return clearcvec(v->cv);
    }

    if (v->cv != NULL) {
	freecvec(v->cv);
    }
    v->cv = newcvec(nchrs, nranges, nmcces);
    if (v->cv == NULL) {
	ERR(REG_ESPACE);
    }
d186 1
a186 1
    return v->cv;
d195 1
a195 1
    struct cvec *cv;			/* character vector */
d197 1
a197 1
    FREE(cv);
@

