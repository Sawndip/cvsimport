head	1.5;
access;
symbols
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	TCL_8_3:1.1.1.1
	NET:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.39.57;	author hunt;	state dead;
branches;
next	1.4;

1.4
date	2002.11.26.19.47.47;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.00;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.03;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	2001.09.09.22.40.53;	author irox;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.09.09.22.40.53;	author irox;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.25.01.43.10;	author kseitz;	state dead;
branches;
next	;

1.2.16.1
date	2003.02.07.19.18.07;	author carlton;	state dead;
branches;
next	;

1.3.2.1
date	2002.09.27.21.49.00;	author kseitz;	state dead;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.40;	author drow;	state dead;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@# CYGNUS LOCAL
#
# This entire file is Cygnus local, it contains a set of cross
# platform autoconf macros to be used by Tcl extensions.

# FIXME: There seems to be a problem with variable
# names that still need an expansion (like $foo_FILE)
# since another eval might be needed in these macros.

#--------------------------------------------------------------------
# TCL_TOOL_PATH
#
#	Return a file path that the build system tool will understand.
#	This path might be different than the path used in the
#	Makefiles.
#
# Arguments:
#	
#	VAR
#	PATH
#	
# Results:
#
#
# Example:
#
# TCL_TOOL_PATH(TCL_CC_PATH, /usr/local/compiler)
#
#--------------------------------------------------------------------

AC_DEFUN(TCL_TOOL_PATH, [
  val=$2

  if test "$val" = "" ; then
    AC_MSG_ERROR([Empty value for variable $1])
  fi

  case "${host}" in
    *windows32* | *mingw32*)
      if test "${CYGPATH}" = ""; then
        AC_MSG_ERROR([CYGPATH variable is not defined.])
      elif test "${CYGPATH}" = "echo"; then
        # No cygpath when cross compiling
        $1=$val
      else
        # store literal argument text in a variable
        val=$val
        # Convert Cygwin to Windows path (/tmp/foo -> C:\Tmp\foo)
        val="`${CYGPATH} $val`"
        # Convert path like C:\Tmp\foo to C:/Tmp/foo
        $1="`echo $val | sed -e s#\\\\\\\\#/#g`"
      fi
    ;;
    *)
      # Default to a no-op under Unix or Cygwin gcc
      $1=$val
    ;;
  esac
])

# FIXME: It would simplify things if no SUFFIX had to be passed
# into these LONGNAME macros. Using the TCL_SHARED_LIB_SUFFIX
# and TCL_UNSHARED_LIB_SUFFIX from tclConfig.sh might do the trick!

#--------------------------------------------------------------------
# TCL_TOOL_STATIC_LIB_LONGNAME
#
#	Return static library name in the "long format" understood by
#	the build tools. This might involve prepending a suffix
#	and appending version information to the library name.
#
# Arguments:
#	
#	VAR
#	LIBNAME
#	SUFFIX
#	
# Depends on:
#	TCL_DBGX
#	TCL_VENDOR_PREFIX
#
# Example:
#
# TCL_TOOL_STATIC_LIB_LONGNAME(TCL_LIB, tcl, $TCL_UNSHARED_LIB_SUFFIX)
#
# Results:
#
#	TCL_LIB=libtcl83.a
#
#	or
#
#	TCL_LIB=tcl83.lib
#
#--------------------------------------------------------------------

AC_DEFUN(TCL_TOOL_STATIC_LIB_LONGNAME, [
  libname=$2
  suffix=$3

  case "${host}" in
    *windows32* | *mingw32*)
      if test "$GCC" != yes; then
        eval "long_libname=\"${TCL_VENDOR_PREFIX}${libname}${suffix}\""
      else
        eval "long_libname=\"lib${TCL_VENDOR_PREFIX}${libname}${suffix}\""
      fi
    ;;
    *)
      eval "long_libname=\"lib${TCL_VENDOR_PREFIX}${libname}${suffix}\""
    ;;
  esac

  eval "long_libname=${long_libname}"

  # Trick to replace DBGX with TCL_DBGX
  DBGX='${TCL_DBGX}'
  eval "long_libname=${long_libname}"

  $1=$long_libname
])

#--------------------------------------------------------------------
# TCL_TOOL_SHARED_LIB_LONGNAME
#
#	Return the shared library name in the "long format" understood by
#	the build tools. This might involve prepending a suffix
#	and appending version information to the shared library name.
#
# Arguments:
#	
#	VAR
#	LIBNAME
#	SUFFIX
#	
# Depends on:
#	TCL_DBGX
#	TCL_VENDOR_PREFIX
#
# Example:
#
# TCL_TOOL_SHARED_LIB_LONGNAME(TCL_SHLIB, tcl, $TCL_SHARED_LIB_SUFFIX)
#
# Results:
#	The above example could result in the following.
#
#	TCL_SHLIB=libtcl83.so
#
#	or
#
#	TCL_SHLIB=tcl83.dll
#
#--------------------------------------------------------------------

AC_DEFUN(TCL_TOOL_SHARED_LIB_LONGNAME, [
  libname=$2
  suffix=$3

  case "${host}" in
    *windows32* | *mingw32* | *cygwin*)
      eval "long_libname=\"${TCL_VENDOR_PREFIX}${libname}${suffix}\""
    ;;
    *)
      eval "long_libname=\"lib${TCL_VENDOR_PREFIX}${libname}${suffix}\""
    ;;
  esac

  eval "long_libname=${long_libname}"

  # Trick to replace DBGX with TCL_DBGX
  DBGX='${TCL_DBGX}'
  eval "long_libname=${long_libname}"

  $1=$long_libname
])

#--------------------------------------------------------------------
# TCL_TOOL_LIB_SHORTNAME
#
#	Return the library name in the "short format" understood by
#	the build tools. This might involve prepending a suffix
#	and appending version information to the library name.
#	The VC++ compiler does not support short library names
#	so we just use the static import lib name in that case.
#
# Arguments:
#	
#	VAR
#	LIBNAME
#	VERSION
#	
# Depends on:
#	TCL_LIB_VERSIONS_OK
#	TCL_DBGX
#	SHARED_BUILD
#	
#
# Example:
#
# TCL_TOOL_LIB_SHORTNAME(TCL_LIB, tcl, 8.3)
#
# Results:
#	The above example could result in the following.
#
#	TCL_LIB=-ltcl83
#
#	or
#
#	TCL_LIB=tcl83.lib
#
#--------------------------------------------------------------------

AC_DEFUN(TCL_TOOL_LIB_SHORTNAME, [
  libname=$2
  version=$3

  if test "$TCL_LIB_SUFFIX" = "" ; then
    AC_MSG_ERROR([The TCL_LIB_SUFFIX variable is not defined])
  fi

  # If the . character is not allowed in lib name, remove it from version
  if test "${TCL_LIB_VERSIONS_OK}" != "ok"; then
        version=`echo $version | tr -d .`
  fi

  case "${host}" in
    *windows32* | *mingw32*)
      if test "$GCC" != yes; then
        eval "short_libname=\"${TCL_VENDOR_PREFIX}${libname}${version}${TCL_LIB_SUFFIX}\""
      else
        short_libname="-l${TCL_VENDOR_PREFIX}${libname}${version}${TCL_DBGX}"
      fi
    ;;
    *)
      short_libname="-l${TCL_VENDOR_PREFIX}${libname}${version}\${TCL_DBGX}"
    ;;
  esac

  $1=$short_libname
])

#--------------------------------------------------------------------
# TCL_TOOL_LIB_SPEC
#
#	Return the "lib spec format" understood by the build tools.
#
# Arguments:
#	
#	VAR
#	DIR
#	LIBARG
#	
# Depends on:
#	
#
# Example:
#
# TCL_TOOL_LIB_SPEC(SPEC, /usr/lib, -ltcl)
#
# Results:
#	The above example could result in the following.
#
#	SPEC="-L/usr/lib -ltcl83"
#
#--------------------------------------------------------------------

AC_DEFUN(TCL_TOOL_LIB_SPEC, [
  case "${host}" in
    *windows32* | *mingw32*)
      if test "$GCC" != yes; then
        TCL_TOOL_PATH($1, "$2/$3")
      else
        TCL_TOOL_PATH(dirname, $2)
        $1="-L${dirname} $3"
      fi
    ;;
    *)
      $1="-L$2 $3"
    ;;
  esac
])

#--------------------------------------------------------------------
# TCL_TOOL_LIB_PATH
#
#	Return the "lib path format" understood by the build tools.
#	Typically, this is the fully qualified path name of the library.
#
# Arguments:
#	
#	VAR
#	DIR
#	LIBARG
#	
# Depends on:
#	
#
# Example:
#
# TCL_TOOL_LIB_PATH(TMP_PATH, /usr/lib, libtcl83.a)
#
# Results:
#	The above example could result in the following.
#
#	TMP_PATH="/usr/lib/libtcl83.a"
#
#--------------------------------------------------------------------

AC_DEFUN(TCL_TOOL_LIB_PATH, [
  TCL_TOOL_PATH($1, "$2/$3")
])
@


1.4
log
@touched all sources to ease next import
@
text
@@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Tcl 8.3 upgrade
@
text
@@


1.1.1.2
log
@Remove bothced merge files and old files no longer in tcl distribution.
@
text
@@

