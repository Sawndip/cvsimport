head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.58
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.56
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.54
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.52
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.50
	gdb_7_0-branch:1.5.0.48
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.46
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.44
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.42
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.40
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.38
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.36
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.34
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.30
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.28
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.6
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.6
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TK_8_4_0:1.1.1.4
	TCL_8_4_0:1.1.1.5
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2003.01.21.19.40.18;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.48.05;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.09;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.09;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.13;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.51;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.49;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.21;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.40.59;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.55.51;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.24.20.24.26;	author kseitz;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.09.24.22.00.51;	author kseitz;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2002.11.26.20.00.04;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@Tcl UNIX README
---------------

RCS: @@(#) $Id: README,v 1.24 2002/10/10 04:56:21 hobbs Exp $

This is the directory where you configure, compile, test, and install
UNIX versions of Tcl.  This directory also contains source files for Tcl
that are specific to UNIX.  Some of the files in this directory are
used on the PC or Mac platform too, but they all depend on UNIX
(POSIX/ANSI C) interfaces and some of them only make sense under UNIX.

Updated forms of the information found in this file is available at:
	http://www.tcl.tk/doc/howto/compile.html#unix

For information on platforms where Tcl is known to compile, along
with any porting notes for getting it to work on those platforms, see:
	http://www.tcl.tk/software/tcltk/platforms.html

The rest of this file contains instructions on how to do this.  The
release should compile and run either "out of the box" or with trivial
changes on any UNIX-like system that approximates POSIX, BSD, or System
V.  We know that it runs on workstations from Sun, H-P, DEC, IBM, and
SGI, as well as PCs running Linux, BSDI, and SCO UNIX.  To compile for
a PC running Windows, see the README file in the directory ../win.  To
compile for a Macintosh, see the README file in the directory ../mac.

How To Compile And Install Tcl:
-------------------------------

(a) If you have already compiled Tcl once in this directory and are now
    preparing to compile again in the same directory but for a different
    platform, or if you have applied patches, type "make distclean" to
    discard all the configuration information computed previously.

(b) If you need to reconfigure because you changed any of the .in or
    .m4 files, you will need to run autoconf to create a new
    ./configure script. Most users will NOT need to do this since
    a configure script is already provided.

    (in the tcl/unix directory)
    autoconf

(c) Type "./configure".  This runs a configuration script created by GNU
    autoconf, which configures Tcl for your system and creates a
    Makefile.  The configure script allows you to customize the Tcl
    configuration for your site; for details on how you can do this,
    type "./configure -help" or refer to the autoconf documentation (not
    included here).  Tcl's "configure" supports the following special
    switches in addition to the standard ones:
	--enable-threads	If this switch is set, Tcl will compile
				itself with multithreading support.
	--disable-load		If this switch is specified then Tcl will
				configure itself not to allow dynamic loading,
				even if your system appears to support it.
				Normally you can leave this switch out and
				Tcl will build itself for dynamic loading
				if your system supports it.
	--enable-shared		If this switch is specified, Tcl will compile
				itself as a shared library if it can figure
				out how to do that on this platform.  This
				is the default on platforms where we know
				how to build shared libraries.
	--disable-shared	If this switch is specified, Tcl will compile
				itself as a static library.
	--enable-symbols	build with debugging symbols.  By default
				standard debugging symbols are used.  You
				can specify the value "mem" to include
				TCL_MEM_DEBUG memory debugging, "compile"
				to include TCL_COMPILE_DEBUG debugging, or
				"all" to enable all internal debugging.
	--disable-symbols	build without debugging symbols
	--enable-64bit		enable 64bit support (where applicable)
	--disable-64bit		disable 64bit support (where applicable)
	--enable-64bit-vis	enable 64bit Sparc VIS support
	--disable-64bit-vis	disable 64bit Sparc VIS support
	--enable-langinfo	Allows use of modern nl_langinfo check for
				better localization support.  This is on by
				default on platforms where nl_langinfo is
				found.
	--disable-langinfo	Specifically disables use of nl_langinfo.
	--enable-man-symlinks	Use symlinks for linking the manpages that
				should be reachable under several names.
	--enable-man-compression=PROG
				Compress the manpages using PROG.

    Note: by default gcc will be used if it can be located on the PATH.
    if you want to use cc instead of gcc, set the CC environment variable
    to "cc" before running configure. It is not safe to edit the
    Makefile to use gcc after configure is run. Also note that
    you should use the same compiler when building extensions.

    Note: be sure to use only absolute path names (those starting with "/")
    in the --prefix and --exec-prefix options.

(d) Type "make".  This will create a library archive called
    "libtcl<version>.a" or "libtcl<version>.so" and an interpreter
    application called "tclsh" that allows you to type Tcl commands
    interactively or execute script files.

(e) If the make fails then you'll have to personalize the Makefile
    for your site or possibly modify the distribution in other ways.
    First check the porting Web page above to see if there are hints
    for compiling on your system.  If you need to modify Makefile,
    are comments at the beginning of it that describe the things you
    might want to change and how to change them.

(f) Type "make install" to install Tcl binaries and script files in
    standard places.  You'll need write permission on the installation
    directories to do this.  The installation directories are
    determined by the "configure" script and may be specified with
    the --prefix and --exec-prefix options to "configure".  See the
    Makefile for information on what directories were chosen; you
    can override these choices by modifying the "prefix" and
    "exec_prefix" variables in the Makefile.

(g) At this point you can play with Tcl by running "make shell"
    and typing Tcl commands at the prompt.

If you have trouble compiling Tcl, see the URL noted above about working
platforms.  It contains information that people have provided about changes
they had to make to compile Tcl in various environments.  We're also
interested in hearing how to change the configuration setup so that Tcl
compiles on additional platforms "out of the box".

Test suite
----------

There is a relatively complete test suite for all of the Tcl core in
the subdirectory "tests".  To use it just type "make test" in this
directory.  You should then see a printout of the test files processed.
If any errors occur, you'll see a much more substantial printout for
each error.  See the README file in the "tests" directory for more
information on the test suite.  Note: don't run the tests as superuser:
this will cause several of them to fail.  If a test is failing
consistently, please send us a bug report with as much detail as you
can manage.  Please use the online database at
	http://tcl.sourceforge.net/

The Tcl test suite is very sensitive to proper implementation of
ANSI C library procedures such as sprintf and sscanf.  If the test
suite generates errors, most likely they are due to non-conformance
of your system's ANSI C library;  such problems are unlikely to
affect any real applications so it's probably safe to ignore them.
@


1.4
log
@touched all sources to ease next import
@
text
@d4 2
d13 1
a13 1
	http://dev.scriptics.com/doc/howto/compile.html#unix
d17 1
a17 1
	http://dev.scriptics.com/software/tcltk/platforms.html
a26 2
RCS: @@(#) $Id: README,v 1.6.8.2 2000/09/15 16:58:11 spolk Exp $

d30 1
a30 3
(a) Check for patches as described in ../README.

(b) If you have already compiled Tcl once in this directory and are now
d35 4
a38 5
(c) If there is no "configure" script in this directory it is because you
    are working out of the source repository (i.e., CVS) instead of working
    from a source distribution.  In this case you need to use "autoconf"
    to generate the configure script.  It runs with no arguments.
    Remember to run it here and down in the dltest directory.
a41 1
    cd dltest ; autoconf ; cd ..
d43 1
a43 1
(d) Type "./configure".  This runs a configuration script created by GNU
a49 6
	--enable-gcc		If this switch is set, Tcl will configure
				itself to use gcc if it is available on your
				system.  Note:  it is not safe to modify the
				Makefile to use gcc after configure is run;
				if you do this, then information related to
				dynamic linking will be incorrect.
d65 27
d93 1
a93 1
    in the --prefix and --exec_prefix options.
d95 1
a95 1
(e) Type "make".  This will create a library archive called
d100 1
a100 1
(f) If the make fails then you'll have to personalize the Makefile
d107 1
a107 1
(g) Type "make install" to install Tcl binaries and script files in
d111 1
a111 1
    the --prefix and --exec_prefix options to "configure".  See the
d116 2
a117 8
(h) At this point you can play with Tcl by invoking the "tclsh"
    program and typing Tcl commands.  However, if you haven't installed
    Tcl then you'll first need to set your TCL_LIBRARY variable to
    hold the full path name of the "library" subdirectory.  Note that
    the installed versions of tclsh, libtcl.a, and libtcl.so have a
    version number in their names, such as "tclsh8.3" or "libtcl8.3.so";
    to use the installed versions, either specify the version number
    or create a symbolic link (e.g. from "tclsh" to "tclsh8.3").
d137 1
a137 1
	http://dev.scriptics.com/ticket/
a143 1

@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a3 2
RCS: @@(#) $Id: README,v 1.24 2002/10/10 04:56:21 hobbs Exp $

d11 1
a11 1
	http://www.tcl.tk/doc/howto/compile.html#unix
d15 1
a15 1
	http://www.tcl.tk/software/tcltk/platforms.html
d25 2
d30 3
a32 1
(a) If you have already compiled Tcl once in this directory and are now
d37 5
a41 4
(b) If you need to reconfigure because you changed any of the .in or
    .m4 files, you will need to run autoconf to create a new
    ./configure script. Most users will NOT need to do this since
    a configure script is already provided.
d45 1
d47 1
a47 1
(c) Type "./configure".  This runs a configuration script created by GNU
d54 6
a74 27
	--enable-symbols	build with debugging symbols.  By default
				standard debugging symbols are used.  You
				can specify the value "mem" to include
				TCL_MEM_DEBUG memory debugging, "compile"
				to include TCL_COMPILE_DEBUG debugging, or
				"all" to enable all internal debugging.
	--disable-symbols	build without debugging symbols
	--enable-64bit		enable 64bit support (where applicable)
	--disable-64bit		disable 64bit support (where applicable)
	--enable-64bit-vis	enable 64bit Sparc VIS support
	--disable-64bit-vis	disable 64bit Sparc VIS support
	--enable-langinfo	Allows use of modern nl_langinfo check for
				better localization support.  This is on by
				default on platforms where nl_langinfo is
				found.
	--disable-langinfo	Specifically disables use of nl_langinfo.
	--enable-man-symlinks	Use symlinks for linking the manpages that
				should be reachable under several names.
	--enable-man-compression=PROG
				Compress the manpages using PROG.

    Note: by default gcc will be used if it can be located on the PATH.
    if you want to use cc instead of gcc, set the CC environment variable
    to "cc" before running configure. It is not safe to edit the
    Makefile to use gcc after configure is run. Also note that
    you should use the same compiler when building extensions.

d76 1
a76 1
    in the --prefix and --exec-prefix options.
d78 1
a78 1
(d) Type "make".  This will create a library archive called
d83 1
a83 1
(e) If the make fails then you'll have to personalize the Makefile
d90 1
a90 1
(f) Type "make install" to install Tcl binaries and script files in
d94 1
a94 1
    the --prefix and --exec-prefix options to "configure".  See the
d99 8
a106 2
(g) At this point you can play with Tcl by running "make shell"
    and typing Tcl commands at the prompt.
d126 1
a126 1
	http://tcl.sourceforge.net/
d133 1
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@a3 2
RCS: @@(#) $Id: README,v 1.22 2002/06/25 15:20:44 rmax Exp $

d11 1
a11 1
	http://www.tcl.tk/doc/howto/compile.html#unix
d15 1
a15 1
	http://www.tcl.tk/software/tcltk/platforms.html
d25 2
d30 3
a32 1
(a) If you have already compiled Tcl once in this directory and are now
d37 5
a41 4
(b) If you need to reconfigure because you changed any of the .in or
    .m4 files, you will need to run autoconf to create a new
    ./configure script. Most users will NOT need to do this since
    a configure script is already provided.
d45 1
d47 1
a47 1
(c) Type "./configure".  This runs a configuration script created by GNU
d54 6
a74 21
	--enable-symbols	build with debugging symbols
	--disable-symbols	build without debugging symbols
	--enable-64bit		enable 64bit support (where applicable)
	--disable-64bit		disable 64bit support (where applicable)
	--enable-64bit-vis	enable 64bit Sparc VIS support
	--disable-64bit-vis	disable 64bit Sparc VIS support
	--enable-langinfo	Allows use of modern nl_langinfo check for
				better localization support.  This is on by
				default on platforms where nl_langinfo is
				found.
	--disable-langinfo	Specifically disables use of nl_langinfo.
	--enable-man-symlinks	Use symlinks for linking the manpages that
				should be reachable under several names.
	--enable-man-compression=PROG
				Compress the manpages using PROG.

    Note: by default gcc will be used if it can be located on the PATH.
    if you want to use cc instead of gcc, set the CC environment variable
    to "cc" before running configure. It is not safe to edit the
    Makefile to use gcc after configure is run.

d76 1
a76 1
    in the --prefix and --exec-prefix options.
d78 1
a78 1
(d) Type "make".  This will create a library archive called
d83 1
a83 1
(e) If the make fails then you'll have to personalize the Makefile
d90 1
a90 1
(f) Type "make install" to install Tcl binaries and script files in
d94 1
a94 1
    the --prefix and --exec-prefix options to "configure".  See the
d99 8
a106 2
(g) At this point you can play with Tcl by running "make shell"
    and typing Tcl commands at the prompt.
d126 1
a126 1
	http://tcl.sourceforge.net/
d133 1
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a3 2
RCS: @@(#) $Id$

d11 1
a11 1
	http://www.tcl.tk/doc/howto/compile.html#unix
d15 1
a15 1
	http://www.tcl.tk/software/tcltk/platforms.html
d25 2
d30 3
a32 1
(a) If you have already compiled Tcl once in this directory and are now
d37 5
a41 4
(b) If you need to reconfigure because you changed any of the .in or
    .m4 files, you will need to run autoconf to create a new
    ./configure script. Most users will NOT need to do this since
    a configure script is already provided.
d45 1
d47 1
a47 1
(c) Type "./configure".  This runs a configuration script created by GNU
d54 6
a74 27
	--enable-symbols	build with debugging symbols.  By default
				standard debugging symbols are used.  You
				can specify the value "mem" to include
				TCL_MEM_DEBUG memory debugging, "compile"
				to include TCL_COMPILE_DEBUG debugging, or
				"all" to enable all internal debugging.
	--disable-symbols	build without debugging symbols
	--enable-64bit		enable 64bit support (where applicable)
	--disable-64bit		disable 64bit support (where applicable)
	--enable-64bit-vis	enable 64bit Sparc VIS support
	--disable-64bit-vis	disable 64bit Sparc VIS support
	--enable-langinfo	Allows use of modern nl_langinfo check for
				better localization support.  This is on by
				default on platforms where nl_langinfo is
				found.
	--disable-langinfo	Specifically disables use of nl_langinfo.
	--enable-man-symlinks	Use symlinks for linking the manpages that
				should be reachable under several names.
	--enable-man-compression=PROG
				Compress the manpages using PROG.

    Note: by default gcc will be used if it can be located on the PATH.
    if you want to use cc instead of gcc, set the CC environment variable
    to "cc" before running configure. It is not safe to edit the
    Makefile to use gcc after configure is run. Also note that
    you should use the same compiler when building extensions.

d76 1
a76 1
    in the --prefix and --exec-prefix options.
d78 1
a78 1
(d) Type "make".  This will create a library archive called
d83 1
a83 1
(e) If the make fails then you'll have to personalize the Makefile
d90 1
a90 1
(f) Type "make install" to install Tcl binaries and script files in
d94 1
a94 1
    the --prefix and --exec-prefix options to "configure".  See the
d99 8
a106 2
(g) At this point you can play with Tcl by running "make shell"
    and typing Tcl commands at the prompt.
d126 1
a126 1
	http://tcl.sourceforge.net/
d133 1
@


1.1
log
@Initial revision
@
text
@d1 3
d10 7
d25 1
a25 1
RCS: @@(#) $Id: README,v 1.9 1999/01/26 03:53:36 jingham Exp $
d37 11
a47 1
(c) Type "./configure".  This runs a configuration script created by GNU
d60 2
d70 5
a74 1
				out how to do that on this platform.
d78 4
a81 3
(d) Type "make".  This will create a library archive called "libtcl.a"
    or "libtcl.so" and an interpreter application called "tclsh" that
    allows you to type Tcl commands interactively or execute script files.
d83 1
a83 1
(e) If the make fails then you'll have to personalize the Makefile
d85 2
a86 3
    First check the file "porting.notes" to see if there are hints
    for compiling on your system.  Then look at the porting Web page
    described later in this file.  If you need to modify Makefile, there
d90 1
a90 1
(f) Type "make install" to install Tcl binaries and script files in
d99 1
a99 1
(g) At this point you can play with Tcl by invoking the "tclsh"
d104 1
a104 1
    version number in their names, such as "tclsh8.0" or "libtcl8.0.so";
d106 1
a106 1
    or create a symbolic link (e.g. from "tclsh" to "tclsh8.0").
d108 5
a112 12
If you have trouble compiling Tcl, read through the file" porting.notes".
It contains information that people have provided about changes they had
to make to compile Tcl in various environments.  Or, check out the
following Web URL:
    http://www.sunlabs.com/cgi-bin/tcl/info.8.0
This is an on-line database of porting information.  We make no guarantees
that this information is accurate, complete, or up-to-date, but you may
find it useful.  If you get Tcl running on a new configuration, we would
be happy to receive new information to add to "porting.notes".  You can
also make a new entry into the on-line Web database.  We're also interested
in hearing how to change the configuration setup so that Tcl compiles out
of the box on more platforms.
d123 4
a126 1
this will cause several of them to fail.
d133 1
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@a0 3
Tcl UNIX README
---------------

a6 7
Updated forms of the information found in this file is available at:
	http://dev.scriptics.com/doc/howto/compile.html#unix

For information on platforms where Tcl is known to compile, along
with any porting notes for getting it to work on those platforms, see:
	http://dev.scriptics.com/software/tcltk/platforms.html

d15 1
a15 1
RCS: @@(#) $Id: README,v 1.6.8.2 2000/09/15 16:58:11 spolk Exp $
d27 1
a27 11
(c) If there is no "configure" script in this directory it is because you
    are working out of the source repository (i.e., CVS) instead of working
    from a source distribution.  In this case you need to use "autoconf"
    to generate the configure script.  It runs with no arguments.
    Remember to run it here and down in the dltest directory.

    (in the tcl/unix directory)
    autoconf
    cd dltest ; autoconf ; cd ..

(d) Type "./configure".  This runs a configuration script created by GNU
a39 2
	--enable-threads	If this switch is set, Tcl will compile
				itself with multithreading support.
d48 1
a48 5
				out how to do that on this platform.  This
				is the default on platforms where we know
				how to build shared libraries.
	--disable-shared	If this switch is specified, Tcl will compile
				itself as a static library.
d52 3
a54 4
(e) Type "make".  This will create a library archive called
    "libtcl<version>.a" or "libtcl<version>.so" and an interpreter
    application called "tclsh" that allows you to type Tcl commands
    interactively or execute script files.
d56 1
a56 1
(f) If the make fails then you'll have to personalize the Makefile
d58 3
a60 2
    First check the porting Web page above to see if there are hints
    for compiling on your system.  If you need to modify Makefile,
d64 1
a64 1
(g) Type "make install" to install Tcl binaries and script files in
d73 1
a73 1
(h) At this point you can play with Tcl by invoking the "tclsh"
d78 1
a78 1
    version number in their names, such as "tclsh8.3" or "libtcl8.3.so";
d80 1
a80 1
    or create a symbolic link (e.g. from "tclsh" to "tclsh8.3").
d82 12
a93 5
If you have trouble compiling Tcl, see the URL noted above about working
platforms.  It contains information that people have provided about changes
they had to make to compile Tcl in various environments.  We're also
interested in hearing how to change the configuration setup so that Tcl
compiles on additional platforms "out of the box".
d104 1
a104 4
this will cause several of them to fail.  If a test is failing
consistently, please send us a bug report with as much detail as you
can manage.  Please use the online database at
	http://dev.scriptics.com/ticket/
a110 1

@


1.1.1.3
log
@import tcl 8.4.0
@
text
@a3 2
RCS: @@(#) $Id: README,v 1.22 2002/06/25 15:20:44 rmax Exp $

d11 1
a11 1
	http://www.tcl.tk/doc/howto/compile.html#unix
d15 1
a15 1
	http://www.tcl.tk/software/tcltk/platforms.html
d25 2
d30 3
a32 1
(a) If you have already compiled Tcl once in this directory and are now
d37 5
a41 4
(b) If you need to reconfigure because you changed any of the .in or
    .m4 files, you will need to run autoconf to create a new
    ./configure script. Most users will NOT need to do this since
    a configure script is already provided.
d45 1
d47 1
a47 1
(c) Type "./configure".  This runs a configuration script created by GNU
d54 6
a74 21
	--enable-symbols	build with debugging symbols
	--disable-symbols	build without debugging symbols
	--enable-64bit		enable 64bit support (where applicable)
	--disable-64bit		disable 64bit support (where applicable)
	--enable-64bit-vis	enable 64bit Sparc VIS support
	--disable-64bit-vis	disable 64bit Sparc VIS support
	--enable-langinfo	Allows use of modern nl_langinfo check for
				better localization support.  This is on by
				default on platforms where nl_langinfo is
				found.
	--disable-langinfo	Specifically disables use of nl_langinfo.
	--enable-man-symlinks	Use symlinks for linking the manpages that
				should be reachable under several names.
	--enable-man-compression=PROG
				Compress the manpages using PROG.

    Note: by default gcc will be used if it can be located on the PATH.
    if you want to use cc instead of gcc, set the CC environment variable
    to "cc" before running configure. It is not safe to edit the
    Makefile to use gcc after configure is run.

d76 1
a76 1
    in the --prefix and --exec-prefix options.
d78 1
a78 1
(d) Type "make".  This will create a library archive called
d83 1
a83 1
(e) If the make fails then you'll have to personalize the Makefile
d90 1
a90 1
(f) Type "make install" to install Tcl binaries and script files in
d94 1
a94 1
    the --prefix and --exec-prefix options to "configure".  See the
d99 8
a106 2
(g) At this point you can play with Tcl by running "make shell"
    and typing Tcl commands at the prompt.
d126 1
a126 1
	http://tcl.sourceforge.net/
d133 1
@


1.1.1.4
log
@import tk 8.4.0
@
text
@d1 4
a4 2
Tk UNIX README
--------------
d7 4
a10 2
UNIX versions of Tk.  This directory also contains source files for Tk
that are specific to UNIX.
d12 2
a13 2
The information in this file is maintained at:
	http://www.tcl.tk/doc/howto/compile.html
d15 1
a15 1
For information on platforms where Tcl/Tk is known to compile, along
d27 2
a28 11
RCS: @@(#) $Id: README,v 1.16 2002/07/24 18:42:23 hobbs Exp $

How To Compile And Install Tk:
------------------------------

(a) Make sure that the Tcl 8.4 release is present in the directory
    ../../tcl8.4 (or else use the "--with-tcl" switch described below). 
    This release of Tk will only work with Tcl 8.4. Also, be sure that
    you have configured Tcl before you configure Tk.

(b) Check for patches as described in ../README.
d30 1
a30 1
(c) If you have already compiled Tk once in this directory and are now
d35 9
a43 1
(d) Type "./configure".  This runs a configuration script created by GNU
d48 2
a49 7
    included here).  Tk's "configure" script supports the following
    special switches in addition to the standard ones:
	--with-tcl=DIR		Specifies the directory containing the Tcl
				binaries and Tcl's platform-dependent
				configuration information.  By default
				the Tcl directory is assumed to be in the
				location given by (a) above.
d52 7
a58 1
	--enable-shared		If this switch is specified, Tk will compile
d63 1
a63 1
	--disable-shared	If this switch is specified, Tk will compile
d71 5
d83 2
a84 2
    to "cc" before running configure. It is not safe to change the Makefile
    to use gcc after configure is run.
d89 3
a91 3
(e) Type "make".  This will create a library archive called
    "libtk<version>.a" or "libtk<version>.so" and an interpreter
    application called "wish" that allows you to type Tcl commands
d94 1
a94 1
(f) If the make fails then you'll have to personalize the Makefile
d98 4
a101 4
    there are comments at the beginning of it that describe the things
    you might want to change and how to change them.
    
(g) Type "make install" to install Tk's binaries and script files in
d103 1
a103 1
    directoryies to do this.  The installation directories are
d110 2
a111 11
(h) At this point you can play with Tk by invoking the "wish"
    program and typing Tcl commands.  However, if you haven't installed
    Tk then you'll first need to set your TK_LIBRARY environment
    variable to hold the full path name of the "library" subdirectory.
    If you haven't installed Tcl either then you'll need to set your
    TCL_LIBRARY environment variable as well (see the Tcl README file
    for information on this).  Note that installed versions of wish,
    libtk.a, libtk.so, and the Tk library have a version number in their
    names, such as "wish8.4" or "libtk8.4.so"; to use the installed
    versions, either specify the version number or create a symbolic
    link (e.g. from "wish" to "wish8.4").
d113 1
a113 1
If you have trouble compiling Tk, see the URL noted above about working
d115 2
a116 2
they had to make to compile Tk in various environments.  We're also
interested in hearing how to change the configuration setup so that Tk
d122 16
a137 26
Tk has a substantial self-test suite, consisting of a set of scripts in
the subdirectory "tests".  To run the test suite just type "make test"
in this directory.  You should then see a printout of the test files
processed.  If any errors occur, you'll see a much more substantial
printout for each error.  In order to avoid false error reports, be sure
to run the tests with an empty resource database (e.g., remove your
.Xdefaults file or delete any entries starting with *).  Also, don't
try to do anything else with your display or keyboard whlie the tests
are running, or you may get false violations.  See the README file in
the "tests" directory for more information on the test suite.

If the test suite generates errors, most likely they are due to non-
portable tests that are interacting badly with your system configuration.
We are gradually eliminating the non-portable tests, but this release
includes many new tests so there will probably be some portability
problems.  As long as the test suite doesn't core dump, it's probably
safe to conclude that any errors represent portability problems in the
test suite and not fundamental flaws with Tk.

There are also a number of visual tests for things such as screen layout,
Postscript generation, etc.  These tests all have to be run by manually
enabling the "userInteraction" constraint when testing, and the results
have to be verified visually..  This can be done with
     make test TESTFLAGS="-constraints userInteraction"
Some tests will present a main window with a bunch of menus, which you can
use to select various tests.
@


1.1.1.5
log
@one more time: import tcl 8.4.0
@
text
@d1 2
a2 4
Tcl UNIX README
---------------

RCS: @@(#) $Id: README,v 1.22 2002/06/25 15:20:44 rmax Exp $
d5 2
a6 4
UNIX versions of Tcl.  This directory also contains source files for Tcl
that are specific to UNIX.  Some of the files in this directory are
used on the PC or Mac platform too, but they all depend on UNIX
(POSIX/ANSI C) interfaces and some of them only make sense under UNIX.
d8 2
a9 2
Updated forms of the information found in this file is available at:
	http://www.tcl.tk/doc/howto/compile.html#unix
d11 1
a11 1
For information on platforms where Tcl is known to compile, along
d23 11
a33 2
How To Compile And Install Tcl:
-------------------------------
d35 1
a35 1
(a) If you have already compiled Tcl once in this directory and are now
d40 1
a40 9
(b) If you need to reconfigure because you changed any of the .in or
    .m4 files, you will need to run autoconf to create a new
    ./configure script. Most users will NOT need to do this since
    a configure script is already provided.

    (in the tcl/unix directory)
    autoconf

(c) Type "./configure".  This runs a configuration script created by GNU
d45 7
a51 2
    included here).  Tcl's "configure" supports the following special
    switches in addition to the standard ones:
d54 1
a54 7
	--disable-load		If this switch is specified then Tcl will
				configure itself not to allow dynamic loading,
				even if your system appears to support it.
				Normally you can leave this switch out and
				Tcl will build itself for dynamic loading
				if your system supports it.
	--enable-shared		If this switch is specified, Tcl will compile
d59 1
a59 1
	--disable-shared	If this switch is specified, Tcl will compile
a66 5
	--enable-langinfo	Allows use of modern nl_langinfo check for
				better localization support.  This is on by
				default on platforms where nl_langinfo is
				found.
	--disable-langinfo	Specifically disables use of nl_langinfo.
d74 2
a75 2
    to "cc" before running configure. It is not safe to edit the
    Makefile to use gcc after configure is run.
d80 3
a82 3
(d) Type "make".  This will create a library archive called
    "libtcl<version>.a" or "libtcl<version>.so" and an interpreter
    application called "tclsh" that allows you to type Tcl commands
d85 1
a85 1
(e) If the make fails then you'll have to personalize the Makefile
d89 4
a92 4
    are comments at the beginning of it that describe the things you
    might want to change and how to change them.

(f) Type "make install" to install Tcl binaries and script files in
d94 1
a94 1
    directories to do this.  The installation directories are
d101 11
a111 2
(g) At this point you can play with Tcl by running "make shell"
    and typing Tcl commands at the prompt.
d113 1
a113 1
If you have trouble compiling Tcl, see the URL noted above about working
d115 2
a116 2
they had to make to compile Tcl in various environments.  We're also
interested in hearing how to change the configuration setup so that Tcl
d122 26
a147 16
There is a relatively complete test suite for all of the Tcl core in
the subdirectory "tests".  To use it just type "make test" in this
directory.  You should then see a printout of the test files processed.
If any errors occur, you'll see a much more substantial printout for
each error.  See the README file in the "tests" directory for more
information on the test suite.  Note: don't run the tests as superuser:
this will cause several of them to fail.  If a test is failing
consistently, please send us a bug report with as much detail as you
can manage.  Please use the online database at
	http://tcl.sourceforge.net/

The Tcl test suite is very sensitive to proper implementation of
ANSI C library procedures such as sprintf and sscanf.  If the test
suite generates errors, most likely they are due to non-conformance
of your system's ANSI C library;  such problems are unlikely to
affect any real applications so it's probably safe to ignore them.
@


1.1.1.6
log
@import tcl 8.4.1
@
text
@d4 1
a4 1
RCS: @@(#) $Id: README,v 1.24 2002/10/10 04:56:21 hobbs Exp $
d65 1
a65 6
	--enable-symbols	build with debugging symbols.  By default
				standard debugging symbols are used.  You
				can specify the value "mem" to include
				TCL_MEM_DEBUG memory debugging, "compile"
				to include TCL_COMPILE_DEBUG debugging, or
				"all" to enable all internal debugging.
d84 1
a84 2
    Makefile to use gcc after configure is run. Also note that
    you should use the same compiler when building extensions.
@


