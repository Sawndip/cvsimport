head	1.5;
access;
symbols
	sid-snapshot-20180601:1.5
	sid-snapshot-20180501:1.5
	sid-snapshot-20180401:1.5
	sid-snapshot-20180301:1.5
	sid-snapshot-20180201:1.5
	sid-snapshot-20180101:1.5
	sid-snapshot-20171201:1.5
	sid-snapshot-20171101:1.5
	sid-snapshot-20171001:1.5
	sid-snapshot-20170901:1.5
	sid-snapshot-20170801:1.5
	sid-snapshot-20170701:1.5
	sid-snapshot-20170601:1.5
	sid-snapshot-20170501:1.5
	sid-snapshot-20170401:1.5
	sid-snapshot-20170301:1.5
	sid-snapshot-20170201:1.5
	sid-snapshot-20170101:1.5
	sid-snapshot-20161201:1.5
	sid-snapshot-20161101:1.5
	sid-snapshot-20160901:1.5
	sid-snapshot-20160801:1.5
	sid-snapshot-20160701:1.5
	sid-snapshot-20160601:1.5
	sid-snapshot-20160501:1.5
	sid-snapshot-20160401:1.5
	sid-snapshot-20160301:1.5
	sid-snapshot-20160201:1.5
	sid-snapshot-20160101:1.5
	sid-snapshot-20151201:1.5
	sid-snapshot-20151101:1.5
	sid-snapshot-20151001:1.5
	sid-snapshot-20150901:1.5
	sid-snapshot-20150801:1.5
	sid-snapshot-20150701:1.5
	sid-snapshot-20150601:1.5
	sid-snapshot-20150501:1.5
	sid-snapshot-20150401:1.5
	sid-snapshot-20150301:1.5
	sid-snapshot-20150201:1.5
	sid-snapshot-20150101:1.5
	sid-snapshot-20141201:1.5
	sid-snapshot-20141101:1.5
	sid-snapshot-20141001:1.5
	sid-snapshot-20140901:1.5
	sid-snapshot-20140801:1.5
	sid-snapshot-20140701:1.5
	sid-snapshot-20140601:1.5
	sid-snapshot-20140501:1.5
	sid-snapshot-20140401:1.5
	sid-snapshot-20140301:1.5
	sid-snapshot-20140201:1.5
	sid-snapshot-20140101:1.5
	sid-snapshot-20131201:1.5
	sid-snapshot-20131101:1.5
	sid-snapshot-20131001:1.5
	sid-snapshot-20130901:1.5
	sid-snapshot-20130801:1.5
	sid-snapshot-20130701:1.5
	sid-snapshot-20130601:1.5
	insight_7_6-2013-04-10-branchpoint:1.5
	gdb_7_6-branch:1.5.0.58
	sid-snapshot-20130501:1.5
	sid-snapshot-20130401:1.5
	sid-snapshot-20130301:1.5
	sid-snapshot-20130201:1.5
	sid-snapshot-20130101:1.5
	sid-snapshot-20121201:1.5
	sid-snapshot-20121101:1.5
	sid-snapshot-20121001:1.5
	sid-snapshot-20120901:1.5
	gdb_7_5-branch:1.5.0.56
	sid-snapshot-20120801:1.5
	sid-snapshot-20120701:1.5
	sid-snapshot-20120601:1.5
	sid-snapshot-20120501:1.5
	sid-snapshot-20120401:1.5
	gdb_7_4-branch:1.5.0.54
	sid-snapshot-20120301:1.5
	sid-snapshot-20120201:1.5
	sid-snapshot-20120101:1.5
	sid-snapshot-20111201:1.5
	sid-snapshot-20111101:1.5
	sid-snapshot-20111001:1.5
	sid-snapshot-20110901:1.5
	gdb_7_3-branch:1.5.0.52
	sid-snapshot-20110801:1.5
	sid-snapshot-20110701:1.5
	sid-snapshot-20110601:1.5
	sid-snapshot-20110501:1.5
	sid-snapshot-20110401:1.5
	sid-snapshot-20110301:1.5
	sid-snapshot-20110201:1.5
	sid-snapshot-20110101:1.5
	sid-snapshot-20101201:1.5
	sid-snapshot-20101101:1.5
	sid-snapshot-20101001:1.5
	sid-snapshot-20100901:1.5
	sid-snapshot-20100801:1.5
	sid-snapshot-20100701:1.5
	sid-snapshot-20100601:1.5
	sid-snapshot-20100501:1.5
	sid-snapshot-20100401:1.5
	sid-snapshot-20100301:1.5
	gdb_7_1-branch:1.5.0.50
	gdb_7_0-branch:1.5.0.48
	sid-snapshot-20100201:1.5
	sid-snapshot-20100101:1.5
	sid-snapshot-20091201:1.5
	sid-snapshot-20091101:1.5
	sid-snapshot-20091001:1.5
	arc-sim-20090309:1.5
	sid-snapshot-20090901:1.5
	sid-snapshot-20090801:1.5
	sid-snapshot-20090701:1.5
	sid-snapshot-20090601:1.5
	sid-snapshot-20090501:1.5
	kevinb-pre-tcl8_5_7_merge:1.5
	sid-snapshot-20090401:1.5
	arc-insight_6_8-branch:1.5.0.46
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.44
	insight_6_8-branchpoint:1.5
	sid-snapshot-20090301:1.5
	sid-snapshot-20090201:1.5
	sid-snapshot-20090101:1.5
	sid-snapshot-20081201:1.5
	sid-snapshot-20081101:1.5
	sid-snapshot-20081001:1.5
	sid-snapshot-20080901:1.5
	sid-snapshot-20080801:1.5
	sid-snapshot-20080701:1.5
	sid-snapshot-20080601:1.5
	sid-snapshot-20080501:1.5
	sid-snapshot-20080403:1.5
	sid-snapshot-20080401:1.5
	gdb_6_8-branch:1.5.0.42
	sid-snapshot-20080301:1.5
	sid-snapshot-20080201:1.5
	sid-snapshot-20080101:1.5
	sid-snapshot-20071201:1.5
	sid-snapshot-20071101:1.5
	sid-snapshot-20071001:1.5
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.40
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.38
	gdb_6_5-2006-05-14-branchpoint:1.5
	readline_5_1-import-branch:1.5.0.36
	readline_5_1-import-branchpoint:1.5
	gdb_6_4-branch:1.5.0.34
	gdb_6_4-2005-11-01-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.32
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	ezannoni_pie-20040323-branch:1.5.0.30
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.28
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.26
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.24
	cagney_x86i386-20030821-branch:1.5.0.22
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.20
	gdb_6_0-2003-06-23-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.18
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.16
	cagney_writestrings-20030508-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.14
	cagney_fileio-20030521-branchpoint:1.5
	carlton_dictionary-20030430-merge:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.12
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.10
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.8
	cagney_lazyid-20030317-branchpoint:1.5
	offbyone-20030313-branch:1.5.0.6
	offbyone-20030313-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.4
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030202-branch:1.5.0.2
	interps-20030202-branchpoint:1.5
	TCL8_4_1:1.1.1.4
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.2
	TCL_8_4_1:1.1.1.4
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	tcltk840-20020924-branch:1.3.0.2
	tcltk840-20020924-branchpoint:1.3
	TCL_8_4_0:1.1.1.3
	carlton_dictionary-branch:1.2.0.16
	carlton_dictionary-20020920-branchpoint:1.2
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.14
	gdb_5_3-branch:1.2.0.12
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.10
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.8
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.6
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.4
	cagney_regbuf-20020515-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.2
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.1.1.1
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.1
	gdb_5_1-2001-11-21-release:1.1.1.1
	gdb_s390-2001-09-26-branch:1.1.1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1.1.1
	TCL_8_3:1.1.1.2
	NET:1.1.1
	gdb_5_1-2001-07-29-branch:1.1.1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1.1.1
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	dejagnu-2000-02-04:1.1.1.1
	dejagnu-2000-01-31:1.1.1.1
	dejagnu-2000-01-24:1.1.1.1
	dejagnu-2000-01-17:1.1.1.1
	dejagnu-2000-01-10:1.1.1.1
	dejagnu-2000-01-04:1.1.1.1
	dejagnu-1999-12-21:1.1.1.1
	dejagnu-1999-12-13:1.1.1.1
	dejagnu-1999-12-07:1.1.1.1
	dejagnu-1999-12-06:1.1.1.1
	dejagnu-1999-11-15:1.1.1.1
	dejagnu-1999-11-08:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2003.01.21.19.40.19;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.26.19.48.05;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.24.18.37.10;	author kseitz;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2001.09.09.23.56.09;	author irox;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.3.2.1
date	2002.09.27.21.49.13;	author kseitz;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.51;	author drow;	state Exp;
branches;
next	;

1.2.16.1
date	2002.12.23.19.40.50;	author carlton;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.02.07.19.18.22;	author carlton;	state Exp;
branches;
next	;

1.1.1.1
date	99.11.09.01.28.44;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.09.09.22.40.59;	author irox;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.24.19.55.47;	author kseitz;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.11.26.19.59.59;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated to tcl 8.4.1
@
text
@/* 
 * tclLoadAout.c --
 *
 *	This procedure provides a version of the TclLoadFile that
 *	provides pseudo-static linking using version-7 compatible
 *	a.out files described in either sys/exec.h or sys/a.out.h.
 *
 * Copyright (c) 1995, by General Electric Company. All rights reserved.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * This work was supported in part by the ARPA Manufacturing Automation
 * and Design Engineering (MADE) Initiative through ARPA contract
 * F33615-94-C-4400.
 *
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.14 2002/10/10 12:25:53 vincentdarley Exp $
 */

#include "tclInt.h"
#include <fcntl.h>
#ifdef HAVE_EXEC_AOUT_H
#   include <sys/exec_aout.h>
#endif
#ifdef HAVE_UNISTD_H
#   include <unistd.h>
#else
#   include "../compat/unistd.h"
#endif

/*
 * Some systems describe the a.out header in sys/exec.h, and some in
 * a.out.h.
 */

#ifdef USE_SYS_EXEC_H
#include <sys/exec.h>
#endif
#ifdef USE_A_OUT_H
#include <a.out.h>
#endif
#ifdef USE_SYS_EXEC_AOUT_H
#include <sys/exec_aout.h>
#define a_magic a_midmag
#endif

/*
 * TCL_LOADSHIM is the amount by which to shim the break when loading
 */

#ifndef TCL_LOADSHIM
#define TCL_LOADSHIM 0x4000L
#endif

/*
 * TCL_LOADALIGN must be a power of 2, and is the alignment to which
 * to force the origin of load modules
 */

#ifndef TCL_LOADALIGN
#define TCL_LOADALIGN 0x4000L
#endif

/*
 * TCL_LOADMAX is the maximum size of a load module, and is used as
 * a sanity check when loading
 */

#ifndef TCL_LOADMAX
#define TCL_LOADMAX 2000000L
#endif

/*
 * Kernel calls that appear to be missing from the system .h files:
 */

extern char * brk _ANSI_ARGS_((char *));
extern char * sbrk _ANSI_ARGS_((size_t));

/*
 * The static variable SymbolTableFile contains the file name where the
 * result of the last link was stored.  The file is kept because doing so
 * allows one load module to use the symbols defined in another.
 */

static char * SymbolTableFile = NULL;

/*
 * Type of the dictionary function that begins each load module.
 */

typedef Tcl_PackageInitProc * (* DictFn) _ANSI_ARGS_ ((CONST char * symbol));

/*
 * Prototypes for procedures referenced only in this file:
 */

static int FindLibraries _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * pathPtr,
				      Tcl_DString * buf));
static void UnlinkSymbolTable _ANSI_ARGS_((void));

/*
 *----------------------------------------------------------------------
 *
 * TclpDlopen --
 *
 *	Dynamically loads a binary code file into memory and returns
 *	a handle to the new code.
 *
 * Results:
 *	A standard Tcl completion code.  If an error occurs, an error
 *	message is left in the interp's result. 
 *
 * Side effects:
 *	New code suddenly appears in memory.
 *
 *
 * Bugs:
 *	This function does not attempt to handle the case where the
 *	BSS segment is not executable.  It will therefore fail on
 *	Encore Multimax, Pyramid 90x, and similar machines.  The
 *	reason is that the mprotect() kernel call, which would
 *	otherwise be employed to mark the newly-loaded text segment
 *	executable, results in a system crash on BSD/386.
 *
 *	In an effort to make it fast, this function eschews the
 *	technique of linking the load module once, reading its header
 *	to determine its size, allocating memory for it, and linking
 *	it again.  Instead, it `shims out' memory allocation by
 *	placing the module TCL_LOADSHIM bytes beyond the break,
 *	and assuming that any malloc() calls required to run the
 *	linker will not advance the break beyond that point.  If
 *	the break is advanced beyonnd that point, the load will
 *	fail with an `inconsistent memory allocation' error.
 *	It perhaps ought to retry the link, but the failure has
 *	not been observed in two years of daily use of this function.
 *----------------------------------------------------------------------
 */

int
TclpDlopen(interp, pathPtr, loadHandle, unloadProcPtr)
    Tcl_Interp *interp;		/* Used for error reporting. */
    Tcl_Obj *pathPtr;		/* Name of the file containing the desired
				 * code (UTF-8). */
    Tcl_LoadHandle *loadHandle;	/* Filled with token for dynamically loaded
				 * file which will be passed back to 
				 * (*unloadProcPtr)() to unload the file. */
    Tcl_FSUnloadFileProc **unloadProcPtr;	
				/* Filled with address of Tcl_FSUnloadFileProc
				 * function which should be used for
				 * this file. */
{
    char * inputSymbolTable;	/* Name of the file containing the 
				 * symbol table from the last link. */
    Tcl_DString linkCommandBuf;	/* Command to do the run-time relocation
				 * of the module.*/
    char * linkCommand;
    char relocatedFileName [L_tmpnam];
				/* Name of the file holding the relocated */
				/* text of the module */
    int relocatedFd;		/* File descriptor of the file holding
				 * relocated text */
    struct exec relocatedHead;	/* Header of the relocated text */
    unsigned long relocatedSize;/* Size of the relocated text */
    char * startAddress;	/* Starting address of the module */
    int status;			/* Status return from Tcl_ calls */
    char * p;

    /* Find the file that contains the symbols for the run-time link. */
    
    if (SymbolTableFile != NULL) {
	inputSymbolTable = SymbolTableFile;
    } else if (tclExecutableName == NULL) {
	Tcl_SetResult (interp, "can't find the tclsh executable", TCL_STATIC);
	return TCL_ERROR;
    } else {
	inputSymbolTable = tclExecutableName;
    }
    
    /* Construct the `ld' command that builds the relocated module */
    
    tmpnam (relocatedFileName);
    Tcl_DStringInit (&linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, "exec ld -o ", -1);
    Tcl_DStringAppend (&linkCommandBuf, relocatedFileName, -1);
#if defined(__mips) || defined(mips)
    Tcl_DStringAppend (&linkCommandBuf, " -G 0 ", -1);
#endif
    Tcl_DStringAppend (&linkCommandBuf, " -u TclLoadDictionary_", -1);
    TclGuessPackageName(Tcl_GetString(pathPtr), &linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, " -A ", -1);
    Tcl_DStringAppend (&linkCommandBuf, inputSymbolTable, -1);
    Tcl_DStringAppend (&linkCommandBuf, " -N -T XXXXXXXX ", -1);
    Tcl_DStringAppend (&linkCommandBuf, Tcl_GetString(pathPtr), -1);
    Tcl_DStringAppend (&linkCommandBuf, " ", -1);
    
    if (FindLibraries (interp, pathPtr, &linkCommandBuf) != TCL_OK) {
	Tcl_DStringFree (&linkCommandBuf);
	return TCL_ERROR;
    }
    
    linkCommand = Tcl_DStringValue (&linkCommandBuf);
    
    /* Determine the starting address, and plug it into the command */
    
    startAddress = (char *) (((unsigned long) sbrk (0)
			      + TCL_LOADSHIM + TCL_LOADALIGN - 1)
			     & (- TCL_LOADALIGN));
    p = strstr (linkCommand, "-T") + 3;
    sprintf (p, "%08lx", (long) startAddress);
    p [8] = ' ';
    
    /* Run the linker */
    
    status = Tcl_Eval (interp, linkCommand);
    Tcl_DStringFree (&linkCommandBuf);
    if (status != 0) {
	return TCL_ERROR;
    }
    
    /* Open the linker's result file and read the header */
    
    relocatedFd = open (relocatedFileName, O_RDONLY);
    if (relocatedFd < 0) {
	goto ioError;
    }
    status= read (relocatedFd, (char *) & relocatedHead, sizeof relocatedHead);
    if (status < sizeof relocatedHead) {
	goto ioError;
    }
    
    /* Check the magic number */
    
    if (relocatedHead.a_magic != OMAGIC) {
	Tcl_AppendResult (interp, "bad magic number in intermediate file \"",
			  relocatedFileName, "\"", (char *) NULL);
	goto failure;
    }
    
    /* Make sure that memory allocation is still consistent */
    
    if ((unsigned long) sbrk (0) > (unsigned long) startAddress) {
	Tcl_SetResult (interp, "can't load, memory allocation is inconsistent.",
		       TCL_STATIC);
	goto failure;
    }
    
    /* Make sure that the relocated module's size is reasonable */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data
      + relocatedHead.a_bss;
    if (relocatedSize > TCL_LOADMAX) {
	Tcl_SetResult (interp, "module too big to load", TCL_STATIC);
	goto failure;
    }
    
    /* Advance the break to protect the loaded module */
    
    (void) brk (startAddress + relocatedSize);
    
    /*
     * Seek to the start of the module's text.
     *
     * Note that this does not really work with large files (i.e. where
     * lseek64 exists and is different to lseek), but anyone trying to
     * dynamically load a binary that is larger than what can fit in
     * addressable memory is in trouble anyway...
     */
    
#if defined(__mips) || defined(mips)
    status = lseek (relocatedFd,
		    (off_t) N_TXTOFF (relocatedHead.ex_f, relocatedHead.ex_o),
		    SEEK_SET);
#else
    status = lseek (relocatedFd, (off_t) N_TXTOFF (relocatedHead), SEEK_SET);
#endif
    if (status < 0) {
	goto ioError;
    }
    
    /* Read in the module's text and data */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data;
    if (read (relocatedFd, startAddress, relocatedSize) < relocatedSize) {
	brk (startAddress);
      ioError:
	Tcl_AppendResult (interp, "error on intermediate file \"",
			  relocatedFileName, "\": ", Tcl_PosixError (interp),
			  (char *) NULL);
      failure:
	(void) unlink (relocatedFileName);
	return TCL_ERROR;
    }
    
    /* Close the intermediate file. */
    
    (void) close (relocatedFd);
    
    /* Arrange things so that intermediate symbol tables eventually get
    * deleted. */
    
    if (SymbolTableFile != NULL) {
	UnlinkSymbolTable ();
    } else {
	atexit (UnlinkSymbolTable);
    }
    SymbolTableFile = ckalloc (strlen (relocatedFileName) + 1);
    strcpy (SymbolTableFile, relocatedFileName);
    
    *loadHandle = startAddress;
    return TCL_OK;
}

/*
 *----------------------------------------------------------------------
 *
 * TclpFindSymbol --
 *
 *	Looks up a symbol, by name, through a handle associated with
 *	a previously loaded piece of code (shared library).
 *
 * Results:
 *	Returns a pointer to the function associated with 'symbol' if
 *	it is found.  Otherwise returns NULL and may leave an error
 *	message in the interp's result.
 *
 *----------------------------------------------------------------------
 */
Tcl_PackageInitProc*
TclpFindSymbol(interp, loadHandle, symbol) 
    Tcl_Interp *interp;
    Tcl_LoadHandle loadHandle;
    CONST char *symbol;
{
    /* Look up the entry point in the load module's dictionary. */
    DictFn dictionary = (DictFn) loadHandle;
    return (Tcl_PackageInitProc*) dictionary(sym1);
}


/*
 *------------------------------------------------------------------------
 *
 * FindLibraries --
 *
 *	Find the libraries needed to link a load module at run time.
 *
 * Results:
 *	A standard Tcl completion code.  If an error occurs,
 *	an error message is left in the interp's result.  The -l and -L
 *	flags are concatenated onto the dynamic string `buf'.
 *
 *------------------------------------------------------------------------
 */

static int
FindLibraries (interp, pathPtr, buf)
    Tcl_Interp * interp;	/* Used for error reporting */
    Tcl_Obj * pathPtr;		/* Name of the load module */
    Tcl_DString * buf;		/* Buffer where the -l an -L flags */
{
    FILE * f;			/* The load module */
    int c = 0;			/* Byte from the load module */
    char * p;
    CONST char *native;

    char *fileName = Tcl_GetString(pathPtr);
  
    /* Open the load module */
    
    native = Tcl_FSGetNativePath(pathPtr);
    f = fopen(native, "rb");				/* INTL: Native. */
    
    if (f == NULL) {
	Tcl_AppendResult (interp, "couldn't open \"", fileName, "\": ",
			  Tcl_PosixError (interp), (char *) NULL);
	return TCL_ERROR;
    }
    
    /* Search for the library list in the load module */
    
    p = "@@LIBS: ";
    while (*p != '\0' && (c = getc (f)) != EOF) {
	if (c == *p) {
	    ++p;
	}
	else {
	    p = "@@LIBS: ";
	    if (c == *p) {
		++p;
	    }
	}
    }
    
    /* No library list -- this must be an ill-formed module */
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "File \"", fileName,
			  "\" is not a Tcl load module.", (char *) NULL);
	(void) fclose (f);
	return TCL_ERROR;
    }
    
    /* Accumulate the library list */
    
    while ((c = getc (f)) != '\0' && c != EOF) {
	char cc = c;
	Tcl_DStringAppend (buf, &cc, 1);
    }
    (void) fclose (f);
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "Library directory in \"", fileName,
			  "\" ends prematurely.", (char *) NULL);
	return TCL_ERROR;
    }

    return TCL_OK;
}

/*
 *------------------------------------------------------------------------
 *
 * UnlinkSymbolTable --
 *
 *	Remove the symbol table file from the last dynamic link.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The symbol table file from the last dynamic link is removed.
 *	This function is called when (a) a new symbol table is present
 *	because another dynamic link is complete, or (b) the process
 *	is exiting.
 *------------------------------------------------------------------------
 */

static void
UnlinkSymbolTable ()
{
    (void) unlink (SymbolTableFile);
    ckfree (SymbolTableFile);
    SymbolTableFile = NULL;
}

/*
 *----------------------------------------------------------------------
 *
 * TclpUnloadFile --
 *
 *	Unloads a dynamically loaded binary code file from memory.
 *	Code pointers in the formerly loaded file are no longer valid
 *	after calling this function.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Does nothing.  Can anything be done?
 *
 *----------------------------------------------------------------------
 */

void
TclpUnloadFile(loadHandle)
    Tcl_LoadHandle loadHandle;	/* loadHandle returned by a previous call
				 * to TclpDlopen().  The loadHandle is 
				 * a token that represents the loaded 
				 * file. */
{
}

/*
 *----------------------------------------------------------------------
 *
 * TclGuessPackageName --
 *
 *	If the "load" command is invoked without providing a package
 *	name, this procedure is invoked to try to figure it out.
 *
 * Results:
 *	Always returns 0 to indicate that we couldn't figure out a
 *	package name;  generic code will then try to guess the package
 *	from the file name.  A return value of 1 would have meant that
 *	we figured out the package name and put it in bufPtr.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

int
TclGuessPackageName(fileName, bufPtr)
    CONST char *fileName;	/* Name of file containing package (already
				 * translated to local form if needed). */
    Tcl_DString *bufPtr;	/* Initialized empty dstring.  Append
				 * package name to this if possible. */
{
    CONST char *p, *q;
    char *r;

    if ((q = strrchr(fileName,'/'))) {
	q++;
    } else {
	q = fileName;
    }
    if (!strncmp(q,"lib",3)) {
	q+=3;
    }
    p = q;
    while ((*p) && (*p != '.') && ((*p<'0') || (*p>'9'))) {
	p++;
    }
    if ((p>q+2) && !strncmp(p-2,"_G0.",4)) {
	p-=2;
    }
    if (p<q) {
	return 0;
    }

    Tcl_DStringAppend(bufPtr,q, p-q);

    r = Tcl_DStringValue(bufPtr);
    r += strlen(r) - (p-q);

    /*
     * Capitalize the string and then recompute the length.
     */

    Tcl_UtfToTitle(r);
    Tcl_DStringSetLength(bufPtr, strlen(Tcl_DStringValue(bufPtr)));

    return 1;
}
@


1.4
log
@touched all sources to ease next import
@
text
@d17 1
a17 1
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.6.8.2 2000/09/15 16:58:20 spolk Exp $
d25 5
d92 1
a92 1
typedef Tcl_PackageInitProc * (* DictFn) _ANSI_ARGS_ ((char * symbol));
d98 1
a98 1
static int FindLibraries _ANSI_ARGS_((Tcl_Interp * interp, char * fileName,
d105 1
a105 1
 * TclpLoadFile --
d108 1
a108 2
 *	the addresses of two procedures within that file, if they
 *	are defined.
d112 1
a112 3
 *	message is left in the interp's result.  *proc1Ptr and *proc2Ptr
 *	are filled in with the addresses of the symbols given by
 *	*sym1 and *sym2, or NULL if those symbols can't be found.
d141 1
a141 1
TclpLoadFile(interp, fileName, sym1, sym2, proc1Ptr, proc2Ptr, clientDataPtr)
d143 1
a143 1
    char *fileName;		/* Name of the file containing the desired
d145 1
a145 6
    char *sym1, *sym2;		/* Names of two procedures to look up in
				 * the file's symbol table. */
    Tcl_PackageInitProc **proc1Ptr, **proc2Ptr;
				/* Where to return the addresses corresponding
				 * to sym1 and sym2. */
    ClientData *clientDataPtr;	/* Filled with token for dynamically loaded
d147 5
a151 1
				 * TclpUnloadFile() to unload the file. */
d153 1
a153 1
  char * inputSymbolTable;	/* Name of the file containing the 
d155 1
a155 1
  Tcl_DString linkCommandBuf;	/* Command to do the run-time relocation
d157 2
a158 2
  char * linkCommand;
  char relocatedFileName [L_tmpnam];
d161 1
a161 1
  int relocatedFd;		/* File descriptor of the file holding
d163 23
a185 26
  struct exec relocatedHead;	/* Header of the relocated text */
  unsigned long relocatedSize;	/* Size of the relocated text */
  char * startAddress;		/* Starting address of the module */
  DictFn dictionary;		/* Dictionary function in the load module */
  int status;			/* Status return from Tcl_ calls */
  char * p;

  *clientDataPtr = NULL;
  
  /* Find the file that contains the symbols for the run-time link. */

  if (SymbolTableFile != NULL) {
    inputSymbolTable = SymbolTableFile;
  } else if (tclExecutableName == NULL) {
    Tcl_SetResult (interp, "can't find the tclsh executable", TCL_STATIC);
    return TCL_ERROR;
  } else {
    inputSymbolTable = tclExecutableName;
  }

  /* Construct the `ld' command that builds the relocated module */

  tmpnam (relocatedFileName);
  Tcl_DStringInit (&linkCommandBuf);
  Tcl_DStringAppend (&linkCommandBuf, "exec ld -o ", -1);
  Tcl_DStringAppend (&linkCommandBuf, relocatedFileName, -1);
d187 1
a187 1
  Tcl_DStringAppend (&linkCommandBuf, " -G 0 ", -1);
d189 27
a215 8
  Tcl_DStringAppend (&linkCommandBuf, " -u TclLoadDictionary_", -1);
  TclGuessPackageName(fileName, &linkCommandBuf);
  Tcl_DStringAppend (&linkCommandBuf, " -A ", -1);
  Tcl_DStringAppend (&linkCommandBuf, inputSymbolTable, -1);
  Tcl_DStringAppend (&linkCommandBuf, " -N -T XXXXXXXX ", -1);
  Tcl_DStringAppend (&linkCommandBuf, fileName, -1);
  Tcl_DStringAppend (&linkCommandBuf, " ", -1);
  if (FindLibraries (interp, fileName, &linkCommandBuf) != TCL_OK) {
d217 53
a269 63
    return TCL_ERROR;
  }
  linkCommand = Tcl_DStringValue (&linkCommandBuf);

  /* Determine the starting address, and plug it into the command */
  
  startAddress = (char *) (((unsigned long) sbrk (0)
			    + TCL_LOADSHIM + TCL_LOADALIGN - 1)
			   & (- TCL_LOADALIGN));
  p = strstr (linkCommand, "-T") + 3;
  sprintf (p, "%08lx", (long) startAddress);
  p [8] = ' ';

  /* Run the linker */

  status = Tcl_Eval (interp, linkCommand);
  Tcl_DStringFree (&linkCommandBuf);
  if (status != 0) {
    return TCL_ERROR;
  }

  /* Open the linker's result file and read the header */

  relocatedFd = open (relocatedFileName, O_RDONLY);
  if (relocatedFd < 0) {
    goto ioError;
  }
  status= read (relocatedFd, (char *) & relocatedHead, sizeof relocatedHead);
  if (status < sizeof relocatedHead) {
    goto ioError;
  }

  /* Check the magic number */

  if (relocatedHead.a_magic != OMAGIC) {
    Tcl_AppendResult (interp, "bad magic number in intermediate file \"",
		      relocatedFileName, "\"", (char *) NULL);
    goto failure;
  }

  /* Make sure that memory allocation is still consistent */

  if ((unsigned long) sbrk (0) > (unsigned long) startAddress) {
    Tcl_SetResult (interp, "can't load, memory allocation is inconsistent.",
		   TCL_STATIC);
    goto failure;
  }

  /* Make sure that the relocated module's size is reasonable */

  relocatedSize = relocatedHead.a_text + relocatedHead.a_data
    + relocatedHead.a_bss;
  if (relocatedSize > TCL_LOADMAX) {
    Tcl_SetResult (interp, "module too big to load", TCL_STATIC);
    goto failure;
  }

  /* Advance the break to protect the loaded module */

  (void) brk (startAddress + relocatedSize);

  /* Seek to the start of the module's text */

d271 3
a273 3
  status = lseek (relocatedFd,
	  (off_t) N_TXTOFF (relocatedHead.ex_f, relocatedHead.ex_o),
	  SEEK_SET);
d275 1
a275 1
  status = lseek (relocatedFd, (off_t) N_TXTOFF (relocatedHead), SEEK_SET);
d277 62
a338 38
  if (status < 0) {
    goto ioError;
  }

  /* Read in the module's text and data */

  relocatedSize = relocatedHead.a_text + relocatedHead.a_data;
  if (read (relocatedFd, startAddress, relocatedSize) < relocatedSize) {
    brk (startAddress);
  ioError:
    Tcl_AppendResult (interp, "error on intermediate file \"",
		      relocatedFileName, "\": ", Tcl_PosixError (interp),
		      (char *) NULL);
  failure:
    (void) unlink (relocatedFileName);
    return TCL_ERROR;
  }

  /* Close the intermediate file. */

  (void) close (relocatedFd);

  /* Arrange things so that intermediate symbol tables eventually get
   * deleted. */

  if (SymbolTableFile != NULL) {
    UnlinkSymbolTable ();
  } else {
    atexit (UnlinkSymbolTable);
  }
  SymbolTableFile = ckalloc (strlen (relocatedFileName) + 1);
  strcpy (SymbolTableFile, relocatedFileName);
  
  /* Look up the entry points in the load module's dictionary. */

  dictionary = (DictFn) startAddress;
  *proc1Ptr = dictionary (sym1);
  *proc2Ptr = dictionary (sym2);
a339 2
  return TCL_OK;
}
d357 4
a360 4
FindLibraries (interp, fileName, buf)
     Tcl_Interp * interp;	/* Used for error reporting */
     char * fileName;		/* Name of the load module */
     Tcl_DString * buf;		/* Buffer where the -l an -L flags */
d362 6
a367 11
  FILE * f;			/* The load module */
  int c;			/* Byte from the load module */
  char * p;
  Tcl_DString ds;
  CONST char *native;

  /* Open the load module */

  native = Tcl_UtfToExternalDString(NULL, fileName, -1, &ds);
  f = fopen(native, "rb");				/* INTL: Native. */
  Tcl_DStringFree(&ds);
d369 41
a409 26
  if (f == NULL) {
    Tcl_AppendResult (interp, "couldn't open \"", fileName, "\": ",
		      Tcl_PosixError (interp), (char *) NULL);
    return TCL_ERROR;
  }

  /* Search for the library list in the load module */

  p = "@@LIBS: ";
  while (*p != '\0' && (c = getc (f)) != EOF) {
    if (c == *p) {
      ++p;
    }
    else {
      p = "@@LIBS: ";
      if (c == *p) {
	++p;
      }
    }
  }

  /* No library list -- this must be an ill-formed module */

  if (c == EOF) {
    Tcl_AppendResult (interp, "File \"", fileName,
		      "\" is not a Tcl load module.", (char *) NULL);
d411 6
a416 4
    return TCL_ERROR;
  }

  /* Accumulate the library list */
d418 1
a418 13
  while ((c = getc (f)) != '\0' && c != EOF) {
    char cc = c;
    Tcl_DStringAppend (buf, &cc, 1);
  }
  (void) fclose (f);

  if (c == EOF) {
    Tcl_AppendResult (interp, "Library directory in \"", fileName,
		      "\" ends prematurely.", (char *) NULL);
    return TCL_ERROR;
  }

  return TCL_OK;
d442 3
a444 3
  (void) unlink (SymbolTableFile);
  ckfree (SymbolTableFile);
  SymbolTableFile = NULL;
d466 3
a468 3
TclpUnloadFile(clientData)
    ClientData clientData;	/* ClientData returned by a previous call
				 * to TclpLoadFile().  The clientData is 
d496 1
a496 1
    char *fileName;		/* Name of file containing package (already
d501 2
a502 2
    char *p, *q, *r;
    int srcOff, dstOff;
d504 1
a504 1
    if (q = strrchr(fileName,'/')) {
a536 2


@


1.3
log
@touched all sources to ease next import
@
text
@@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d17 1
a17 1
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.14 2002/10/10 12:25:53 vincentdarley Exp $
a24 5
#ifdef HAVE_UNISTD_H
#   include <unistd.h>
#else
#   include "../compat/unistd.h"
#endif
d87 1
a87 1
typedef Tcl_PackageInitProc * (* DictFn) _ANSI_ARGS_ ((CONST char * symbol));
d93 1
a93 1
static int FindLibraries _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * pathPtr,
d100 1
a100 1
 * TclpDlopen --
d103 2
a104 1
 *	a handle to the new code.
d108 3
a110 1
 *	message is left in the interp's result. 
d139 1
a139 1
TclpDlopen(interp, pathPtr, loadHandle, unloadProcPtr)
d141 1
a141 1
    Tcl_Obj *pathPtr;		/* Name of the file containing the desired
d143 6
a148 1
    Tcl_LoadHandle *loadHandle;	/* Filled with token for dynamically loaded
d150 1
a150 5
				 * (*unloadProcPtr)() to unload the file. */
    Tcl_FSUnloadFileProc **unloadProcPtr;	
				/* Filled with address of Tcl_FSUnloadFileProc
				 * function which should be used for
				 * this file. */
d152 1
a152 1
    char * inputSymbolTable;	/* Name of the file containing the 
d154 1
a154 1
    Tcl_DString linkCommandBuf;	/* Command to do the run-time relocation
d156 2
a157 2
    char * linkCommand;
    char relocatedFileName [L_tmpnam];
d160 1
a160 1
    int relocatedFd;		/* File descriptor of the file holding
d162 26
a187 23
    struct exec relocatedHead;	/* Header of the relocated text */
    unsigned long relocatedSize;/* Size of the relocated text */
    char * startAddress;	/* Starting address of the module */
    int status;			/* Status return from Tcl_ calls */
    char * p;

    /* Find the file that contains the symbols for the run-time link. */
    
    if (SymbolTableFile != NULL) {
	inputSymbolTable = SymbolTableFile;
    } else if (tclExecutableName == NULL) {
	Tcl_SetResult (interp, "can't find the tclsh executable", TCL_STATIC);
	return TCL_ERROR;
    } else {
	inputSymbolTable = tclExecutableName;
    }
    
    /* Construct the `ld' command that builds the relocated module */
    
    tmpnam (relocatedFileName);
    Tcl_DStringInit (&linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, "exec ld -o ", -1);
    Tcl_DStringAppend (&linkCommandBuf, relocatedFileName, -1);
d189 1
a189 1
    Tcl_DStringAppend (&linkCommandBuf, " -G 0 ", -1);
d191 8
a198 27
    Tcl_DStringAppend (&linkCommandBuf, " -u TclLoadDictionary_", -1);
    TclGuessPackageName(Tcl_GetString(pathPtr), &linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, " -A ", -1);
    Tcl_DStringAppend (&linkCommandBuf, inputSymbolTable, -1);
    Tcl_DStringAppend (&linkCommandBuf, " -N -T XXXXXXXX ", -1);
    Tcl_DStringAppend (&linkCommandBuf, Tcl_GetString(pathPtr), -1);
    Tcl_DStringAppend (&linkCommandBuf, " ", -1);
    
    if (FindLibraries (interp, pathPtr, &linkCommandBuf) != TCL_OK) {
	Tcl_DStringFree (&linkCommandBuf);
	return TCL_ERROR;
    }
    
    linkCommand = Tcl_DStringValue (&linkCommandBuf);
    
    /* Determine the starting address, and plug it into the command */
    
    startAddress = (char *) (((unsigned long) sbrk (0)
			      + TCL_LOADSHIM + TCL_LOADALIGN - 1)
			     & (- TCL_LOADALIGN));
    p = strstr (linkCommand, "-T") + 3;
    sprintf (p, "%08lx", (long) startAddress);
    p [8] = ' ';
    
    /* Run the linker */
    
    status = Tcl_Eval (interp, linkCommand);
d200 63
a262 53
    if (status != 0) {
	return TCL_ERROR;
    }
    
    /* Open the linker's result file and read the header */
    
    relocatedFd = open (relocatedFileName, O_RDONLY);
    if (relocatedFd < 0) {
	goto ioError;
    }
    status= read (relocatedFd, (char *) & relocatedHead, sizeof relocatedHead);
    if (status < sizeof relocatedHead) {
	goto ioError;
    }
    
    /* Check the magic number */
    
    if (relocatedHead.a_magic != OMAGIC) {
	Tcl_AppendResult (interp, "bad magic number in intermediate file \"",
			  relocatedFileName, "\"", (char *) NULL);
	goto failure;
    }
    
    /* Make sure that memory allocation is still consistent */
    
    if ((unsigned long) sbrk (0) > (unsigned long) startAddress) {
	Tcl_SetResult (interp, "can't load, memory allocation is inconsistent.",
		       TCL_STATIC);
	goto failure;
    }
    
    /* Make sure that the relocated module's size is reasonable */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data
      + relocatedHead.a_bss;
    if (relocatedSize > TCL_LOADMAX) {
	Tcl_SetResult (interp, "module too big to load", TCL_STATIC);
	goto failure;
    }
    
    /* Advance the break to protect the loaded module */
    
    (void) brk (startAddress + relocatedSize);
    
    /*
     * Seek to the start of the module's text.
     *
     * Note that this does not really work with large files (i.e. where
     * lseek64 exists and is different to lseek), but anyone trying to
     * dynamically load a binary that is larger than what can fit in
     * addressable memory is in trouble anyway...
     */
    
d264 3
a266 3
    status = lseek (relocatedFd,
		    (off_t) N_TXTOFF (relocatedHead.ex_f, relocatedHead.ex_o),
		    SEEK_SET);
d268 1
a268 1
    status = lseek (relocatedFd, (off_t) N_TXTOFF (relocatedHead), SEEK_SET);
d270 40
a309 61
    if (status < 0) {
	goto ioError;
    }
    
    /* Read in the module's text and data */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data;
    if (read (relocatedFd, startAddress, relocatedSize) < relocatedSize) {
	brk (startAddress);
      ioError:
	Tcl_AppendResult (interp, "error on intermediate file \"",
			  relocatedFileName, "\": ", Tcl_PosixError (interp),
			  (char *) NULL);
      failure:
	(void) unlink (relocatedFileName);
	return TCL_ERROR;
    }
    
    /* Close the intermediate file. */
    
    (void) close (relocatedFd);
    
    /* Arrange things so that intermediate symbol tables eventually get
    * deleted. */
    
    if (SymbolTableFile != NULL) {
	UnlinkSymbolTable ();
    } else {
	atexit (UnlinkSymbolTable);
    }
    SymbolTableFile = ckalloc (strlen (relocatedFileName) + 1);
    strcpy (SymbolTableFile, relocatedFileName);
    
    *loadHandle = startAddress;
    return TCL_OK;
}

/*
 *----------------------------------------------------------------------
 *
 * TclpFindSymbol --
 *
 *	Looks up a symbol, by name, through a handle associated with
 *	a previously loaded piece of code (shared library).
 *
 * Results:
 *	Returns a pointer to the function associated with 'symbol' if
 *	it is found.  Otherwise returns NULL and may leave an error
 *	message in the interp's result.
 *
 *----------------------------------------------------------------------
 */
Tcl_PackageInitProc*
TclpFindSymbol(interp, loadHandle, symbol) 
    Tcl_Interp *interp;
    Tcl_LoadHandle loadHandle;
    CONST char *symbol;
{
    /* Look up the entry point in the load module's dictionary. */
    DictFn dictionary = (DictFn) loadHandle;
    return (Tcl_PackageInitProc*) dictionary(sym1);
a310 1

d328 4
a331 4
FindLibraries (interp, pathPtr, buf)
    Tcl_Interp * interp;	/* Used for error reporting */
    Tcl_Obj * pathPtr;		/* Name of the load module */
    Tcl_DString * buf;		/* Buffer where the -l an -L flags */
d333 11
a343 6
    FILE * f;			/* The load module */
    int c = 0;			/* Byte from the load module */
    char * p;
    CONST char *native;

    char *fileName = Tcl_GetString(pathPtr);
d345 26
a370 41
    /* Open the load module */
    
    native = Tcl_FSGetNativePath(pathPtr);
    f = fopen(native, "rb");				/* INTL: Native. */
    
    if (f == NULL) {
	Tcl_AppendResult (interp, "couldn't open \"", fileName, "\": ",
			  Tcl_PosixError (interp), (char *) NULL);
	return TCL_ERROR;
    }
    
    /* Search for the library list in the load module */
    
    p = "@@LIBS: ";
    while (*p != '\0' && (c = getc (f)) != EOF) {
	if (c == *p) {
	    ++p;
	}
	else {
	    p = "@@LIBS: ";
	    if (c == *p) {
		++p;
	    }
	}
    }
    
    /* No library list -- this must be an ill-formed module */
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "File \"", fileName,
			  "\" is not a Tcl load module.", (char *) NULL);
	(void) fclose (f);
	return TCL_ERROR;
    }
    
    /* Accumulate the library list */
    
    while ((c = getc (f)) != '\0' && c != EOF) {
	char cc = c;
	Tcl_DStringAppend (buf, &cc, 1);
    }
d372 16
a387 6
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "Library directory in \"", fileName,
			  "\" ends prematurely.", (char *) NULL);
	return TCL_ERROR;
    }
d389 1
a389 1
    return TCL_OK;
d413 3
a415 3
    (void) unlink (SymbolTableFile);
    ckfree (SymbolTableFile);
    SymbolTableFile = NULL;
d437 3
a439 3
TclpUnloadFile(loadHandle)
    Tcl_LoadHandle loadHandle;	/* loadHandle returned by a previous call
				 * to TclpDlopen().  The loadHandle is 
d467 1
a467 1
    CONST char *fileName;	/* Name of file containing package (already
d472 2
a473 2
    CONST char *p, *q;
    char *r;
d475 1
a475 1
    if ((q = strrchr(fileName,'/'))) {
d508 2
@


1.3.2.1
log
@Import Tcl 8.4.0 into mainline-like sources. Simplest Tcl build possible for
cygwin.
@
text
@d17 1
a17 1
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.13 2002/07/18 16:26:04 vincentdarley Exp $
a24 5
#ifdef HAVE_UNISTD_H
#   include <unistd.h>
#else
#   include "../compat/unistd.h"
#endif
d87 1
a87 1
typedef Tcl_PackageInitProc * (* DictFn) _ANSI_ARGS_ ((CONST char * symbol));
d100 1
a100 1
 * TclpDlopen --
d103 2
a104 1
 *	a handle to the new code.
d108 3
a110 1
 *	message is left in the interp's result. 
d139 1
a139 1
TclpDlopen(interp, pathPtr, loadHandle, unloadProcPtr)
d141 1
a141 1
    Tcl_Obj *pathPtr;		/* Name of the file containing the desired
d143 6
a148 1
    Tcl_LoadHandle *loadHandle;	/* Filled with token for dynamically loaded
d150 1
a150 5
				 * (*unloadProcPtr)() to unload the file. */
    Tcl_FSUnloadFileProc **unloadProcPtr;	
				/* Filled with address of Tcl_FSUnloadFileProc
				 * function which should be used for
				 * this file. */
d165 1
d169 2
d192 1
a192 1
  TclGuessPackageName(Tcl_GetString(pathPtr), &linkCommandBuf);
d196 1
a196 1
  Tcl_DStringAppend (&linkCommandBuf, Tcl_GetString(pathPtr), -1);
d198 1
a198 1
  if (FindLibraries (interp, Tcl_GetString(pathPtr), &linkCommandBuf) != TCL_OK) {
d261 1
a261 8
  /*
   * Seek to the start of the module's text.
   *
   * Note that this does not really work with large files (i.e. where
   * lseek64 exists and is different to lseek), but anyone trying to
   * dynamically load a binary that is larger than what can fit in
   * addressable memory is in trouble anyway...
   */
d303 6
a308 1
  *loadHandle = startAddress;
a312 27
 *----------------------------------------------------------------------
 *
 * TclpFindSymbol --
 *
 *	Looks up a symbol, by name, through a handle associated with
 *	a previously loaded piece of code (shared library).
 *
 * Results:
 *	Returns a pointer to the function associated with 'symbol' if
 *	it is found.  Otherwise returns NULL and may leave an error
 *	message in the interp's result.
 *
 *----------------------------------------------------------------------
 */
Tcl_PackageInitProc*
TclpFindSymbol(interp, loadHandle, symbol) 
    Tcl_Interp *interp;
    Tcl_LoadHandle loadHandle;
    CONST char *symbol;
{
    /* Look up the entry point in the load module's dictionary. */
    DictFn dictionary = (DictFn) loadHandle;
    return (Tcl_PackageInitProc*) dictionary(sym1);
}


/*
d334 1
a334 1
  int c = 0;			/* Byte from the load module */
d437 3
a439 3
TclpUnloadFile(loadHandle)
    Tcl_LoadHandle loadHandle;	/* loadHandle returned by a previous call
				 * to TclpDlopen().  The loadHandle is 
d467 1
a467 1
    CONST char *fileName;	/* Name of file containing package (already
d472 2
a473 2
    CONST char *p, *q;
    char *r;
d475 1
a475 1
    if ((q = strrchr(fileName,'/'))) {
d508 2
@


1.2
log
@touched all Tcl files to ease next import.
@
text
@@


1.2.16.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a24 5
#ifdef HAVE_UNISTD_H
#   include <unistd.h>
#else
#   include "../compat/unistd.h"
#endif
d87 1
a87 1
typedef Tcl_PackageInitProc * (* DictFn) _ANSI_ARGS_ ((CONST char * symbol));
d93 1
a93 1
static int FindLibraries _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * pathPtr,
d100 1
a100 1
 * TclpDlopen --
d103 2
a104 1
 *	a handle to the new code.
d108 3
a110 1
 *	message is left in the interp's result. 
d139 1
a139 1
TclpDlopen(interp, pathPtr, loadHandle, unloadProcPtr)
d141 1
a141 1
    Tcl_Obj *pathPtr;		/* Name of the file containing the desired
d143 6
a148 1
    Tcl_LoadHandle *loadHandle;	/* Filled with token for dynamically loaded
d150 1
a150 5
				 * (*unloadProcPtr)() to unload the file. */
    Tcl_FSUnloadFileProc **unloadProcPtr;	
				/* Filled with address of Tcl_FSUnloadFileProc
				 * function which should be used for
				 * this file. */
d152 1
a152 1
    char * inputSymbolTable;	/* Name of the file containing the 
d154 1
a154 1
    Tcl_DString linkCommandBuf;	/* Command to do the run-time relocation
d156 2
a157 2
    char * linkCommand;
    char relocatedFileName [L_tmpnam];
d160 1
a160 1
    int relocatedFd;		/* File descriptor of the file holding
d162 26
a187 23
    struct exec relocatedHead;	/* Header of the relocated text */
    unsigned long relocatedSize;/* Size of the relocated text */
    char * startAddress;	/* Starting address of the module */
    int status;			/* Status return from Tcl_ calls */
    char * p;

    /* Find the file that contains the symbols for the run-time link. */
    
    if (SymbolTableFile != NULL) {
	inputSymbolTable = SymbolTableFile;
    } else if (tclExecutableName == NULL) {
	Tcl_SetResult (interp, "can't find the tclsh executable", TCL_STATIC);
	return TCL_ERROR;
    } else {
	inputSymbolTable = tclExecutableName;
    }
    
    /* Construct the `ld' command that builds the relocated module */
    
    tmpnam (relocatedFileName);
    Tcl_DStringInit (&linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, "exec ld -o ", -1);
    Tcl_DStringAppend (&linkCommandBuf, relocatedFileName, -1);
d189 1
a189 1
    Tcl_DStringAppend (&linkCommandBuf, " -G 0 ", -1);
d191 8
a198 27
    Tcl_DStringAppend (&linkCommandBuf, " -u TclLoadDictionary_", -1);
    TclGuessPackageName(Tcl_GetString(pathPtr), &linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, " -A ", -1);
    Tcl_DStringAppend (&linkCommandBuf, inputSymbolTable, -1);
    Tcl_DStringAppend (&linkCommandBuf, " -N -T XXXXXXXX ", -1);
    Tcl_DStringAppend (&linkCommandBuf, Tcl_GetString(pathPtr), -1);
    Tcl_DStringAppend (&linkCommandBuf, " ", -1);
    
    if (FindLibraries (interp, pathPtr, &linkCommandBuf) != TCL_OK) {
	Tcl_DStringFree (&linkCommandBuf);
	return TCL_ERROR;
    }
    
    linkCommand = Tcl_DStringValue (&linkCommandBuf);
    
    /* Determine the starting address, and plug it into the command */
    
    startAddress = (char *) (((unsigned long) sbrk (0)
			      + TCL_LOADSHIM + TCL_LOADALIGN - 1)
			     & (- TCL_LOADALIGN));
    p = strstr (linkCommand, "-T") + 3;
    sprintf (p, "%08lx", (long) startAddress);
    p [8] = ' ';
    
    /* Run the linker */
    
    status = Tcl_Eval (interp, linkCommand);
d200 63
a262 53
    if (status != 0) {
	return TCL_ERROR;
    }
    
    /* Open the linker's result file and read the header */
    
    relocatedFd = open (relocatedFileName, O_RDONLY);
    if (relocatedFd < 0) {
	goto ioError;
    }
    status= read (relocatedFd, (char *) & relocatedHead, sizeof relocatedHead);
    if (status < sizeof relocatedHead) {
	goto ioError;
    }
    
    /* Check the magic number */
    
    if (relocatedHead.a_magic != OMAGIC) {
	Tcl_AppendResult (interp, "bad magic number in intermediate file \"",
			  relocatedFileName, "\"", (char *) NULL);
	goto failure;
    }
    
    /* Make sure that memory allocation is still consistent */
    
    if ((unsigned long) sbrk (0) > (unsigned long) startAddress) {
	Tcl_SetResult (interp, "can't load, memory allocation is inconsistent.",
		       TCL_STATIC);
	goto failure;
    }
    
    /* Make sure that the relocated module's size is reasonable */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data
      + relocatedHead.a_bss;
    if (relocatedSize > TCL_LOADMAX) {
	Tcl_SetResult (interp, "module too big to load", TCL_STATIC);
	goto failure;
    }
    
    /* Advance the break to protect the loaded module */
    
    (void) brk (startAddress + relocatedSize);
    
    /*
     * Seek to the start of the module's text.
     *
     * Note that this does not really work with large files (i.e. where
     * lseek64 exists and is different to lseek), but anyone trying to
     * dynamically load a binary that is larger than what can fit in
     * addressable memory is in trouble anyway...
     */
    
d264 3
a266 3
    status = lseek (relocatedFd,
		    (off_t) N_TXTOFF (relocatedHead.ex_f, relocatedHead.ex_o),
		    SEEK_SET);
d268 1
a268 1
    status = lseek (relocatedFd, (off_t) N_TXTOFF (relocatedHead), SEEK_SET);
d270 40
a309 61
    if (status < 0) {
	goto ioError;
    }
    
    /* Read in the module's text and data */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data;
    if (read (relocatedFd, startAddress, relocatedSize) < relocatedSize) {
	brk (startAddress);
      ioError:
	Tcl_AppendResult (interp, "error on intermediate file \"",
			  relocatedFileName, "\": ", Tcl_PosixError (interp),
			  (char *) NULL);
      failure:
	(void) unlink (relocatedFileName);
	return TCL_ERROR;
    }
    
    /* Close the intermediate file. */
    
    (void) close (relocatedFd);
    
    /* Arrange things so that intermediate symbol tables eventually get
    * deleted. */
    
    if (SymbolTableFile != NULL) {
	UnlinkSymbolTable ();
    } else {
	atexit (UnlinkSymbolTable);
    }
    SymbolTableFile = ckalloc (strlen (relocatedFileName) + 1);
    strcpy (SymbolTableFile, relocatedFileName);
    
    *loadHandle = startAddress;
    return TCL_OK;
}

/*
 *----------------------------------------------------------------------
 *
 * TclpFindSymbol --
 *
 *	Looks up a symbol, by name, through a handle associated with
 *	a previously loaded piece of code (shared library).
 *
 * Results:
 *	Returns a pointer to the function associated with 'symbol' if
 *	it is found.  Otherwise returns NULL and may leave an error
 *	message in the interp's result.
 *
 *----------------------------------------------------------------------
 */
Tcl_PackageInitProc*
TclpFindSymbol(interp, loadHandle, symbol) 
    Tcl_Interp *interp;
    Tcl_LoadHandle loadHandle;
    CONST char *symbol;
{
    /* Look up the entry point in the load module's dictionary. */
    DictFn dictionary = (DictFn) loadHandle;
    return (Tcl_PackageInitProc*) dictionary(sym1);
a310 1

d328 4
a331 4
FindLibraries (interp, pathPtr, buf)
    Tcl_Interp * interp;	/* Used for error reporting */
    Tcl_Obj * pathPtr;		/* Name of the load module */
    Tcl_DString * buf;		/* Buffer where the -l an -L flags */
d333 11
a343 6
    FILE * f;			/* The load module */
    int c = 0;			/* Byte from the load module */
    char * p;
    CONST char *native;

    char *fileName = Tcl_GetString(pathPtr);
d345 26
a370 41
    /* Open the load module */
    
    native = Tcl_FSGetNativePath(pathPtr);
    f = fopen(native, "rb");				/* INTL: Native. */
    
    if (f == NULL) {
	Tcl_AppendResult (interp, "couldn't open \"", fileName, "\": ",
			  Tcl_PosixError (interp), (char *) NULL);
	return TCL_ERROR;
    }
    
    /* Search for the library list in the load module */
    
    p = "@@LIBS: ";
    while (*p != '\0' && (c = getc (f)) != EOF) {
	if (c == *p) {
	    ++p;
	}
	else {
	    p = "@@LIBS: ";
	    if (c == *p) {
		++p;
	    }
	}
    }
    
    /* No library list -- this must be an ill-formed module */
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "File \"", fileName,
			  "\" is not a Tcl load module.", (char *) NULL);
	(void) fclose (f);
	return TCL_ERROR;
    }
    
    /* Accumulate the library list */
    
    while ((c = getc (f)) != '\0' && c != EOF) {
	char cc = c;
	Tcl_DStringAppend (buf, &cc, 1);
    }
d372 16
a387 6
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "Library directory in \"", fileName,
			  "\" ends prematurely.", (char *) NULL);
	return TCL_ERROR;
    }
d389 1
a389 1
    return TCL_OK;
d413 3
a415 3
    (void) unlink (SymbolTableFile);
    ckfree (SymbolTableFile);
    SymbolTableFile = NULL;
d437 3
a439 3
TclpUnloadFile(loadHandle)
    Tcl_LoadHandle loadHandle;	/* loadHandle returned by a previous call
				 * to TclpDlopen().  The loadHandle is 
d467 1
a467 1
    CONST char *fileName;	/* Name of file containing package (already
d472 2
a473 2
    CONST char *p, *q;
    char *r;
d475 1
a475 1
    if ((q = strrchr(fileName,'/'))) {
d508 2
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.8 1999/01/26 03:53:38 jingham Exp $
d100 1
a100 1
 * TclLoadFile --
d108 1
a108 1
 *	message is left in interp->result.  *proc1Ptr and *proc2Ptr
d139 1
a139 1
TclLoadFile(interp, fileName, sym1, sym2, proc1Ptr, proc2Ptr)
d142 1
a142 1
				 * code. */
d148 3
d169 2
d265 2
a266 2
		  N_TXTOFF (relocatedHead.ex_f, relocatedHead.ex_o),
		  SEEK_SET);
d268 1
a268 1
  status = lseek (relocatedFd, N_TXTOFF (relocatedHead), SEEK_SET);
d321 2
a322 2
 *	an error message is left in interp->result.  The -l and -L flags
 *	are concatenated onto the dynamic string `buf'.
d336 2
d341 5
a345 1
  if ((f = fopen (fileName, "rb")) == NULL) {
d421 27
d473 1
d499 6
a504 8
    if (islower(UCHAR(*r))) {
	*r = (char) toupper(UCHAR(*r));
    }
    while (*(++r)) {
	if (isupper(UCHAR(*r))) {
	    *r = (char) tolower(UCHAR(*r));
	}
    }
d508 2
@


1.1.1.1
log
@import dejagnu-1999-11-08 snapshot
@
text
@@


1.1.1.2
log
@Tcl 8.3 upgrade
@
text
@d17 1
a17 1
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.6.8.2 2000/09/15 16:58:20 spolk Exp $
d100 1
a100 1
 * TclpLoadFile --
d108 1
a108 1
 *	message is left in the interp's result.  *proc1Ptr and *proc2Ptr
d139 1
a139 1
TclpLoadFile(interp, fileName, sym1, sym2, proc1Ptr, proc2Ptr, clientDataPtr)
d142 1
a142 1
				 * code (UTF-8). */
a147 3
    ClientData *clientDataPtr;	/* Filled with token for dynamically loaded
				 * file which will be passed back to 
				 * TclpUnloadFile() to unload the file. */
a165 2
  *clientDataPtr = NULL;
  
d260 2
a261 2
	  (off_t) N_TXTOFF (relocatedHead.ex_f, relocatedHead.ex_o),
	  SEEK_SET);
d263 1
a263 1
  status = lseek (relocatedFd, (off_t) N_TXTOFF (relocatedHead), SEEK_SET);
d316 2
a317 2
 *	an error message is left in the interp's result.  The -l and -L
 *	flags are concatenated onto the dynamic string `buf'.
a330 2
  Tcl_DString ds;
  CONST char *native;
d334 1
a334 5
  native = Tcl_UtfToExternalDString(NULL, fileName, -1, &ds);
  f = fopen(native, "rb");				/* INTL: Native. */
  Tcl_DStringFree(&ds);
  
  if (f == NULL) {
a409 27
 * TclpUnloadFile --
 *
 *	Unloads a dynamically loaded binary code file from memory.
 *	Code pointers in the formerly loaded file are no longer valid
 *	after calling this function.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Does nothing.  Can anything be done?
 *
 *----------------------------------------------------------------------
 */

void
TclpUnloadFile(clientData)
    ClientData clientData;	/* ClientData returned by a previous call
				 * to TclpLoadFile().  The clientData is 
				 * a token that represents the loaded 
				 * file. */
{
}

/*
 *----------------------------------------------------------------------
 *
a434 1
    int srcOff, dstOff;
d460 8
a467 6
    /*
     * Capitalize the string and then recompute the length.
     */

    Tcl_UtfToTitle(r);
    Tcl_DStringSetLength(bufPtr, strlen(Tcl_DStringValue(bufPtr)));
a470 2


@


1.1.1.3
log
@import tcl 8.4.0
@
text
@d17 1
a17 1
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.13 2002/07/18 16:26:04 vincentdarley Exp $
a24 5
#ifdef HAVE_UNISTD_H
#   include <unistd.h>
#else
#   include "../compat/unistd.h"
#endif
d87 1
a87 1
typedef Tcl_PackageInitProc * (* DictFn) _ANSI_ARGS_ ((CONST char * symbol));
d100 1
a100 1
 * TclpDlopen --
d103 2
a104 1
 *	a handle to the new code.
d108 3
a110 1
 *	message is left in the interp's result. 
d139 1
a139 1
TclpDlopen(interp, pathPtr, loadHandle, unloadProcPtr)
d141 1
a141 1
    Tcl_Obj *pathPtr;		/* Name of the file containing the desired
d143 6
a148 1
    Tcl_LoadHandle *loadHandle;	/* Filled with token for dynamically loaded
d150 1
a150 5
				 * (*unloadProcPtr)() to unload the file. */
    Tcl_FSUnloadFileProc **unloadProcPtr;	
				/* Filled with address of Tcl_FSUnloadFileProc
				 * function which should be used for
				 * this file. */
d165 1
d169 2
d192 1
a192 1
  TclGuessPackageName(Tcl_GetString(pathPtr), &linkCommandBuf);
d196 1
a196 1
  Tcl_DStringAppend (&linkCommandBuf, Tcl_GetString(pathPtr), -1);
d198 1
a198 1
  if (FindLibraries (interp, Tcl_GetString(pathPtr), &linkCommandBuf) != TCL_OK) {
d261 1
a261 8
  /*
   * Seek to the start of the module's text.
   *
   * Note that this does not really work with large files (i.e. where
   * lseek64 exists and is different to lseek), but anyone trying to
   * dynamically load a binary that is larger than what can fit in
   * addressable memory is in trouble anyway...
   */
d303 6
a308 1
  *loadHandle = startAddress;
a312 27
 *----------------------------------------------------------------------
 *
 * TclpFindSymbol --
 *
 *	Looks up a symbol, by name, through a handle associated with
 *	a previously loaded piece of code (shared library).
 *
 * Results:
 *	Returns a pointer to the function associated with 'symbol' if
 *	it is found.  Otherwise returns NULL and may leave an error
 *	message in the interp's result.
 *
 *----------------------------------------------------------------------
 */
Tcl_PackageInitProc*
TclpFindSymbol(interp, loadHandle, symbol) 
    Tcl_Interp *interp;
    Tcl_LoadHandle loadHandle;
    CONST char *symbol;
{
    /* Look up the entry point in the load module's dictionary. */
    DictFn dictionary = (DictFn) loadHandle;
    return (Tcl_PackageInitProc*) dictionary(sym1);
}


/*
d334 1
a334 1
  int c = 0;			/* Byte from the load module */
d437 3
a439 3
TclpUnloadFile(loadHandle)
    Tcl_LoadHandle loadHandle;	/* loadHandle returned by a previous call
				 * to TclpDlopen().  The loadHandle is 
d467 1
a467 1
    CONST char *fileName;	/* Name of file containing package (already
d472 2
a473 2
    CONST char *p, *q;
    char *r;
d475 1
a475 1
    if ((q = strrchr(fileName,'/'))) {
d508 2
@


1.1.1.4
log
@import tcl 8.4.1
@
text
@d17 1
a17 1
 * RCS: @@(#) $Id: tclLoadAout.c,v 1.14 2002/10/10 12:25:53 vincentdarley Exp $
d98 1
a98 1
static int FindLibraries _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * pathPtr,
d153 1
a153 1
    char * inputSymbolTable;	/* Name of the file containing the 
d155 1
a155 1
    Tcl_DString linkCommandBuf;	/* Command to do the run-time relocation
d157 2
a158 2
    char * linkCommand;
    char relocatedFileName [L_tmpnam];
d161 1
a161 1
    int relocatedFd;		/* File descriptor of the file holding
d163 23
a185 23
    struct exec relocatedHead;	/* Header of the relocated text */
    unsigned long relocatedSize;/* Size of the relocated text */
    char * startAddress;	/* Starting address of the module */
    int status;			/* Status return from Tcl_ calls */
    char * p;

    /* Find the file that contains the symbols for the run-time link. */
    
    if (SymbolTableFile != NULL) {
	inputSymbolTable = SymbolTableFile;
    } else if (tclExecutableName == NULL) {
	Tcl_SetResult (interp, "can't find the tclsh executable", TCL_STATIC);
	return TCL_ERROR;
    } else {
	inputSymbolTable = tclExecutableName;
    }
    
    /* Construct the `ld' command that builds the relocated module */
    
    tmpnam (relocatedFileName);
    Tcl_DStringInit (&linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, "exec ld -o ", -1);
    Tcl_DStringAppend (&linkCommandBuf, relocatedFileName, -1);
d187 1
a187 1
    Tcl_DStringAppend (&linkCommandBuf, " -G 0 ", -1);
d189 8
a196 27
    Tcl_DStringAppend (&linkCommandBuf, " -u TclLoadDictionary_", -1);
    TclGuessPackageName(Tcl_GetString(pathPtr), &linkCommandBuf);
    Tcl_DStringAppend (&linkCommandBuf, " -A ", -1);
    Tcl_DStringAppend (&linkCommandBuf, inputSymbolTable, -1);
    Tcl_DStringAppend (&linkCommandBuf, " -N -T XXXXXXXX ", -1);
    Tcl_DStringAppend (&linkCommandBuf, Tcl_GetString(pathPtr), -1);
    Tcl_DStringAppend (&linkCommandBuf, " ", -1);
    
    if (FindLibraries (interp, pathPtr, &linkCommandBuf) != TCL_OK) {
	Tcl_DStringFree (&linkCommandBuf);
	return TCL_ERROR;
    }
    
    linkCommand = Tcl_DStringValue (&linkCommandBuf);
    
    /* Determine the starting address, and plug it into the command */
    
    startAddress = (char *) (((unsigned long) sbrk (0)
			      + TCL_LOADSHIM + TCL_LOADALIGN - 1)
			     & (- TCL_LOADALIGN));
    p = strstr (linkCommand, "-T") + 3;
    sprintf (p, "%08lx", (long) startAddress);
    p [8] = ' ';
    
    /* Run the linker */
    
    status = Tcl_Eval (interp, linkCommand);
d198 70
a267 53
    if (status != 0) {
	return TCL_ERROR;
    }
    
    /* Open the linker's result file and read the header */
    
    relocatedFd = open (relocatedFileName, O_RDONLY);
    if (relocatedFd < 0) {
	goto ioError;
    }
    status= read (relocatedFd, (char *) & relocatedHead, sizeof relocatedHead);
    if (status < sizeof relocatedHead) {
	goto ioError;
    }
    
    /* Check the magic number */
    
    if (relocatedHead.a_magic != OMAGIC) {
	Tcl_AppendResult (interp, "bad magic number in intermediate file \"",
			  relocatedFileName, "\"", (char *) NULL);
	goto failure;
    }
    
    /* Make sure that memory allocation is still consistent */
    
    if ((unsigned long) sbrk (0) > (unsigned long) startAddress) {
	Tcl_SetResult (interp, "can't load, memory allocation is inconsistent.",
		       TCL_STATIC);
	goto failure;
    }
    
    /* Make sure that the relocated module's size is reasonable */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data
      + relocatedHead.a_bss;
    if (relocatedSize > TCL_LOADMAX) {
	Tcl_SetResult (interp, "module too big to load", TCL_STATIC);
	goto failure;
    }
    
    /* Advance the break to protect the loaded module */
    
    (void) brk (startAddress + relocatedSize);
    
    /*
     * Seek to the start of the module's text.
     *
     * Note that this does not really work with large files (i.e. where
     * lseek64 exists and is different to lseek), but anyone trying to
     * dynamically load a binary that is larger than what can fit in
     * addressable memory is in trouble anyway...
     */
    
d269 3
a271 3
    status = lseek (relocatedFd,
		    (off_t) N_TXTOFF (relocatedHead.ex_f, relocatedHead.ex_o),
		    SEEK_SET);
d273 1
a273 1
    status = lseek (relocatedFd, (off_t) N_TXTOFF (relocatedHead), SEEK_SET);
d275 35
a309 35
    if (status < 0) {
	goto ioError;
    }
    
    /* Read in the module's text and data */
    
    relocatedSize = relocatedHead.a_text + relocatedHead.a_data;
    if (read (relocatedFd, startAddress, relocatedSize) < relocatedSize) {
	brk (startAddress);
      ioError:
	Tcl_AppendResult (interp, "error on intermediate file \"",
			  relocatedFileName, "\": ", Tcl_PosixError (interp),
			  (char *) NULL);
      failure:
	(void) unlink (relocatedFileName);
	return TCL_ERROR;
    }
    
    /* Close the intermediate file. */
    
    (void) close (relocatedFd);
    
    /* Arrange things so that intermediate symbol tables eventually get
    * deleted. */
    
    if (SymbolTableFile != NULL) {
	UnlinkSymbolTable ();
    } else {
	atexit (UnlinkSymbolTable);
    }
    SymbolTableFile = ckalloc (strlen (relocatedFileName) + 1);
    strcpy (SymbolTableFile, relocatedFileName);
    
    *loadHandle = startAddress;
    return TCL_OK;
d355 4
a358 4
FindLibraries (interp, pathPtr, buf)
    Tcl_Interp * interp;	/* Used for error reporting */
    Tcl_Obj * pathPtr;		/* Name of the load module */
    Tcl_DString * buf;		/* Buffer where the -l an -L flags */
d360 11
a370 6
    FILE * f;			/* The load module */
    int c = 0;			/* Byte from the load module */
    char * p;
    CONST char *native;

    char *fileName = Tcl_GetString(pathPtr);
d372 26
a397 41
    /* Open the load module */
    
    native = Tcl_FSGetNativePath(pathPtr);
    f = fopen(native, "rb");				/* INTL: Native. */
    
    if (f == NULL) {
	Tcl_AppendResult (interp, "couldn't open \"", fileName, "\": ",
			  Tcl_PosixError (interp), (char *) NULL);
	return TCL_ERROR;
    }
    
    /* Search for the library list in the load module */
    
    p = "@@LIBS: ";
    while (*p != '\0' && (c = getc (f)) != EOF) {
	if (c == *p) {
	    ++p;
	}
	else {
	    p = "@@LIBS: ";
	    if (c == *p) {
		++p;
	    }
	}
    }
    
    /* No library list -- this must be an ill-formed module */
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "File \"", fileName,
			  "\" is not a Tcl load module.", (char *) NULL);
	(void) fclose (f);
	return TCL_ERROR;
    }
    
    /* Accumulate the library list */
    
    while ((c = getc (f)) != '\0' && c != EOF) {
	char cc = c;
	Tcl_DStringAppend (buf, &cc, 1);
    }
d399 16
a414 6
    
    if (c == EOF) {
	Tcl_AppendResult (interp, "Library directory in \"", fileName,
			  "\" ends prematurely.", (char *) NULL);
	return TCL_ERROR;
    }
d416 1
a416 1
    return TCL_OK;
d440 3
a442 3
    (void) unlink (SymbolTableFile);
    ckfree (SymbolTableFile);
    SymbolTableFile = NULL;
@


