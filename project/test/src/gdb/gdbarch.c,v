head	1.508;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.506
	gdb_7_6-2013-04-26-release:1.506
	gdb_7_6-branch:1.506.0.2
	gdb_7_6-2013-03-12-branchpoint:1.506
	gdb_7_5_1-2012-11-29-release:1.493
	gdb_7_5-2012-08-17-release:1.493
	gdb_7_5-branch:1.493.0.2
	gdb_7_5-2012-07-18-branchpoint:1.493
	gdb_7_4_1-2012-04-26-release:1.480
	gdb_7_4-2012-01-24-release:1.480
	gdb_7_4-branch:1.480.0.2
	gdb_7_4-2011-12-13-branchpoint:1.480
	gdb_7_3_1-2011-09-04-release:1.475
	gdb_7_3-2011-07-26-release:1.475
	gdb_7_3-branch:1.475.0.2
	gdb_7_3-2011-04-01-branchpoint:1.475
	gdb_7_2-2010-09-02-release:1.469
	gdb_7_2-branch:1.469.0.2
	gdb_7_2-2010-07-07-branchpoint:1.469
	gdb_7_1-2010-03-18-release:1.461
	gdb_7_1-branch:1.461.0.2
	gdb_7_1-2010-02-18-branchpoint:1.461
	gdb_7_0_1-2009-12-22-release:1.453.2.2
	gdb_7_0-2009-10-06-release:1.453.2.2
	gdb_7_0-branch:1.453.0.2
	gdb_7_0-2009-09-16-branchpoint:1.453
	arc-sim-20090309:1.421
	msnyder-checkpoint-072509-branch:1.451.0.2
	msnyder-checkpoint-072509-branchpoint:1.451
	arc-insight_6_8-branch:1.421.0.6
	arc-insight_6_8-branchpoint:1.421
	insight_6_8-branch:1.421.0.4
	insight_6_8-branchpoint:1.421
	reverse-20081226-branch:1.439.0.4
	reverse-20081226-branchpoint:1.439
	multiprocess-20081120-branch:1.439.0.2
	multiprocess-20081120-branchpoint:1.439
	reverse-20080930-branch:1.438.0.2
	reverse-20080930-branchpoint:1.438
	reverse-20080717-branch:1.429.0.2
	reverse-20080717-branchpoint:1.429
	msnyder-reverse-20080609-branch:1.428.0.2
	msnyder-reverse-20080609-branchpoint:1.428
	drow-reverse-20070409-branch:1.338.0.2
	drow-reverse-20070409-branchpoint:1.338
	gdb_6_8-2008-03-27-release:1.421
	gdb_6_8-branch:1.421.0.2
	gdb_6_8-2008-02-26-branchpoint:1.421
	gdb_6_7_1-2007-10-29-release:1.403
	gdb_6_7-2007-10-10-release:1.403
	gdb_6_7-branch:1.403.0.2
	gdb_6_7-2007-09-07-branchpoint:1.403
	insight_6_6-20070208-release:1.331
	gdb_6_6-2006-12-18-release:1.331
	gdb_6_6-branch:1.331.0.2
	gdb_6_6-2006-11-15-branchpoint:1.331
	insight_6_5-20061003-release:1.329
	gdb-csl-symbian-6_4_50_20060226-12:1.328.2.1.2.1
	gdb-csl-sourcerygxx-3_4_4-25:1.327
	nickrob-async-20060828-mergepoint:1.330
	gdb-csl-symbian-6_4_50_20060226-11:1.328.2.1.2.1
	gdb-csl-sourcerygxx-4_1-17:1.328.2.1
	gdb-csl-20060226-branch-local-2:1.328.2.1
	gdb-csl-sourcerygxx-4_1-14:1.328.2.1
	gdb-csl-sourcerygxx-4_1-13:1.328.2.1
	gdb-csl-sourcerygxx-4_1-12:1.328.2.1
	gdb-csl-sourcerygxx-3_4_4-21:1.328.2.1
	gdb_6_5-20060621-release:1.329
	gdb-csl-sourcerygxx-4_1-9:1.328.2.1
	gdb-csl-sourcerygxx-4_1-8:1.328.2.1
	gdb-csl-sourcerygxx-4_1-7:1.328.2.1
	gdb-csl-arm-2006q1-6:1.328.2.1
	gdb-csl-sourcerygxx-4_1-6:1.328.2.1
	gdb-csl-symbian-6_4_50_20060226-10:1.328.2.1.2.1
	gdb-csl-symbian-6_4_50_20060226-9:1.328.2.1.2.1
	gdb-csl-symbian-6_4_50_20060226-8:1.328.2.1.2.1
	gdb-csl-coldfire-4_1-11:1.328.2.1
	gdb-csl-sourcerygxx-3_4_4-19:1.328.2.1
	gdb-csl-coldfire-4_1-10:1.328.2.1
	gdb_6_5-branch:1.329.0.8
	gdb_6_5-2006-05-14-branchpoint:1.329
	gdb-csl-sourcerygxx-4_1-5:1.328.2.1
	nickrob-async-20060513-branch:1.329.0.6
	nickrob-async-20060513-branchpoint:1.329
	gdb-csl-sourcerygxx-4_1-4:1.328.2.1
	msnyder-reverse-20060502-branch:1.329.0.4
	msnyder-reverse-20060502-branchpoint:1.329
	gdb-csl-morpho-4_1-4:1.328.2.1
	gdb-csl-sourcerygxx-3_4_4-17:1.328.2.1
	readline_5_1-import-branch:1.329.0.2
	readline_5_1-import-branchpoint:1.329
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.328.2.1
	gdb-csl-symbian-20060226-branch:1.328.2.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.328.2.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.328.2.1
	msnyder-reverse-20060331-branch:1.328.0.6
	msnyder-reverse-20060331-branchpoint:1.328
	gdb-csl-available-20060303-branch:1.328.0.4
	gdb-csl-available-20060303-branchpoint:1.328
	gdb-csl-20060226-branch:1.328.0.2
	gdb-csl-20060226-branchpoint:1.328
	gdb_6_4-20051202-release:1.327
	msnyder-fork-checkpoint-branch:1.327.0.8
	msnyder-fork-checkpoint-branchpoint:1.327
	gdb-csl-gxxpro-6_3-branch:1.327.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.327
	gdb_6_4-branch:1.327.0.4
	gdb_6_4-2005-11-01-branchpoint:1.327
	gdb-csl-arm-20051020-branch:1.327.0.2
	gdb-csl-arm-20051020-branchpoint:1.327
	msnyder-tracepoint-checkpoint-branch:1.326.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.326
	gdb-csl-arm-20050325-2005-q1b:1.321.2.1
	gdb-csl-arm-20050325-2005-q1a:1.321.2.1
	csl-arm-20050325-branch:1.321.0.2
	csl-arm-20050325-branchpoint:1.321
	gdb-post-i18n-errorwarning-20050211:1.318
	gdb-pre-i18n-errorwarning-20050211:1.318
	gdb_6_3-20041109-release:1.312
	gdb_6_3-branch:1.312.0.2
	gdb_6_3-20041019-branchpoint:1.312
	drow_intercu-merge-20040921:1.312
	drow_intercu-merge-20040915:1.312
	jimb-gdb_6_2-e500-branch:1.302.4.2.0.2
	jimb-gdb_6_2-e500-branchpoint:1.302
	gdb_6_2-20040730-release:1.302
	gdb_6_2-branch:1.302.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.302
	gdb_6_1_1-20040616-release:1.275
	gdb_6_1-2004-04-05-release:1.275
	drow_intercu-merge-20040402:1.279
	drow_intercu-merge-20040327:1.279
	ezannoni_pie-20040323-branch:1.279.0.2
	ezannoni_pie-20040323-branchpoint:1.279
	cagney_tramp-20040321-mergepoint:1.276
	cagney_tramp-20040309-branch:1.275.0.6
	cagney_tramp-20040309-branchpoint:1.275
	gdb_6_1-branch:1.275.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.275
	drow_intercu-20040221-branch:1.275.0.2
	drow_intercu-20040221-branchpoint:1.275
	cagney_bfdfile-20040213-branch:1.270.0.2
	cagney_bfdfile-20040213-branchpoint:1.270
	drow-cplus-merge-20040208:1.268
	carlton_dictionary-20040126-merge:1.267
	cagney_bigcore-20040122-branch:1.267.0.2
	cagney_bigcore-20040122-branchpoint:1.267
	drow-cplus-merge-20040113:1.262
	drow-cplus-merge-20031224:1.262
	drow-cplus-merge-20031220:1.262
	carlton_dictionary-20031215-merge:1.262
	drow-cplus-merge-20031214:1.262
	carlton-dictionary-20031111-merge:1.261
	gdb_6_0-2003-10-04-release:1.230.2.2
	kettenis_sparc-20030918-branch:1.248.0.2
	kettenis_sparc-20030918-branchpoint:1.248
	carlton_dictionary-20030917-merge:1.247
	ezannoni_pie-20030916-branchpoint:1.245
	ezannoni_pie-20030916-branch:1.245.0.2
	cagney_x86i386-20030821-branch:1.240.0.2
	cagney_x86i386-20030821-branchpoint:1.240
	carlton_dictionary-20030805-merge:1.238
	carlton_dictionary-20030627-merge:1.231
	gdb_6_0-branch:1.230.0.2
	gdb_6_0-2003-06-23-branchpoint:1.230
	jimb-ppc64-linux-20030613-branch:1.225.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.225
	cagney_convert-20030606-branch:1.218.0.2
	cagney_convert-20030606-branchpoint:1.218
	cagney_writestrings-20030508-branch:1.214.0.4
	cagney_writestrings-20030508-branchpoint:1.214
	jimb-ppc64-linux-20030528-branch:1.216.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.216
	carlton_dictionary-20030523-merge:1.216
	cagney_fileio-20030521-branch:1.216.0.2
	cagney_fileio-20030521-branchpoint:1.216
	kettenis_i386newframe-20030517-mergepoint:1.216
	jimb-ppc64-linux-20030509-branch:1.214.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.214
	kettenis_i386newframe-20030504-mergepoint:1.211
	carlton_dictionary-20030430-merge:1.209
	kettenis_i386newframe-20030419-branch:1.206.0.2
	kettenis_i386newframe-20030419-branchpoint:1.206
	carlton_dictionary-20030416-merge:1.206
	cagney_frameaddr-20030409-mergepoint:1.205
	kettenis_i386newframe-20030406-branch:1.204.0.4
	kettenis_i386newframe-20030406-branchpoint:1.204
	cagney_frameaddr-20030403-branchpoint:1.204
	cagney_frameaddr-20030403-branch:1.204.0.2
	cagney_framebase-20030330-mergepoint:1.199
	cagney_framebase-20030326-branch:1.195.0.2
	cagney_framebase-20030326-branchpoint:1.195
	cagney_lazyid-20030317-branch:1.191.0.2
	cagney_lazyid-20030317-branchpoint:1.191
	kettenis-i386newframe-20030316-mergepoint:1.191
	offbyone-20030313-branch:1.189.0.2
	offbyone-20030313-branchpoint:1.189
	kettenis-i386newframe-20030308-branch:1.187.0.2
	kettenis-i386newframe-20030308-branchpoint:1.187
	carlton_dictionary-20030305-merge:1.186
	cagney_offbyone-20030303-branch:1.186.0.2
	cagney_offbyone-20030303-branchpoint:1.186
	carlton_dictionary-20030207-merge:1.181
	interps-20030203-mergepoint:1.181
	interps-20030202-branch:1.181.0.2
	interps-20030202-branchpoint:1.181
	cagney-unwind-20030108-branch:1.177.0.2
	cagney-unwind-20030108-branchpoint:1.177
	carlton_dictionary-20021223-merge:1.173
	gdb_5_3-2002-12-12-release:1.146
	carlton_dictionary-20021115-merge:1.159
	kseitz_interps-20021105-merge:1.158
	kseitz_interps-20021103-merge:1.158
	drow-cplus-merge-20021020:1.154
	drow-cplus-merge-20021025:1.154
	carlton_dictionary-20021025-merge:1.155
	carlton_dictionary-20021011-merge:1.153
	drow-cplus-branch:1.151.0.2
	drow-cplus-branchpoint:1.151
	kseitz_interps-20020930-merge:1.150
	carlton_dictionary-20020927-merge:1.150
	carlton_dictionary-branch:1.150.0.2
	carlton_dictionary-20020920-branchpoint:1.150
	gdb_5_3-branch:1.146.0.6
	gdb_5_3-2002-09-04-branchpoint:1.146
	kseitz_interps-20020829-merge:1.146
	cagney_sysregs-20020825-branch:1.146.0.4
	cagney_sysregs-20020825-branchpoint:1.146
	readline_4_3-import-branch:1.146.0.2
	readline_4_3-import-branchpoint:1.146
	gdb_5_2_1-2002-07-23-release:1.110
	kseitz_interps-20020528-branch:1.127.0.4
	kseitz_interps-20020528-branchpoint:1.127
	cagney_regbuf-20020515-branch:1.127.0.2
	cagney_regbuf-20020515-branchpoint:1.127
	jimb-macro-020506-branch:1.122.0.2
	jimb-macro-020506-branchpoint:1.122
	gdb_5_2-2002-04-29-release:1.110
	gdb_5_2-branch:1.110.0.2
	gdb_5_2-2002-03-03-branchpoint:1.110
	gdb_5_1_1-2002-01-24-release:1.69.2.1
	gdb_5_1_0_1-2002-01-03-release:1.69.2.1
	cygnus_cvs_20020108_pre:1.99
	gdb_5_1_0_1-2002-01-03-branchpoint:1.69.2.1
	gdb_5_1_0_1-2002-01-03-branch:1.69.2.1.0.2
	gdb_5_1-2001-11-21-release:1.69.2.1
	gdb_s390-2001-09-26-branch:1.69.0.4
	gdb_s390-2001-09-26-branchpoint:1.69
	gdb_5_1-2001-07-29-branch:1.69.0.2
	gdb_5_1-2001-07-29-branchpoint:1.69
	dberlin-typesystem-branch:1.68.0.2
	dberlin-typesystem-branchpoint:1.68
	gdb-post-ptid_t-2001-05-03:1.58
	gdb-pre-ptid_t-2001-05-03:1.57
	insight-precleanup-2001-01-01:1.50
	gdb-post-protoization-2000-07-29:1.33
	gdb-pre-protoization-2000-07-29:1.32
	gdb-premipsmulti-2000-06-06-branch:1.25.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.25
	gdb-post-params-removal-2000-06-04:1.24
	gdb-pre-params-removal-2000-06-04:1.24
	gdb-post-params-removal-2000-05-28:1.23
	gdb-pre-params-removal-2000-05-28:1.23
	gdb_5_0-2000-05-19-release:1.8
	gdb_4_18_2-2000-05-18-release:1.8
	gdb_4_95_1-2000-05-11-snapshot:1.8
	gdb_4_95_0-2000-04-27-snapshot:1.8
	gdb_5_0-2000-04-10-branch:1.8.0.2
	gdb_5_0-2000-04-10-branchpoint:1.8
	repo-unification-2000-02-06:1.1.1.14
	insight-2000-02-04:1.1.1.14
	gdb-2000-02-04:1.1.1.14
	gdb-2000-02-02:1.1.1.14
	gdb-2000-02-01:1.1.1.14
	gdb-2000-01-31:1.1.1.14
	gdb-2000-01-26:1.1.1.14
	gdb-2000-01-24:1.1.1.14
	gdb-2000-01-17:1.1.1.14
	gdb-2000-01-10:1.1.1.14
	gdb-2000-01-05:1.1.1.14
	gdb-1999-12-21:1.1.1.14
	gdb-1999-12-13:1.1.1.14
	gdb-1999-12-07:1.1.1.13
	gdb-1999-12-06:1.1.1.13
	gdb-1999-11-16:1.1.1.13
	gdb-1999-11-08:1.1.1.13
	gdb-1999-11-01:1.1.1.13
	gdb-1999-10-25:1.1.1.13
	gdb-1999-10-18:1.1.1.12
	gdb-1999-10-11:1.1.1.11
	gdb-1999-10-04:1.1.1.11
	gdb-1999-09-28:1.1.1.11
	gdb-1999-09-21:1.1.1.11
	gdb-1999-09-13:1.1.1.11
	gdb-1999-09-08:1.1.1.11
	gdb-1999-08-30:1.1.1.11
	gdb-1999-08-23:1.1.1.10
	gdb-1999-08-16:1.1.1.10
	gdb-1999-08-09:1.1.1.9
	gdb-1999-08-02:1.1.1.8
	gdb-1999-07-26:1.1.1.8
	gdb-1999-07-19:1.1.1.8
	gdb-1999-07-12:1.1.1.7
	gdb-post-reformat-19990707:1.1.1.7
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.7
	gdb-pre-reformat-19990707:1.1.1.6
	gdb-1999-07-07:1.1.1.6
	gdb-1999-07-05:1.1.1.6
	gdb-1999-06-28:1.1.1.6
	gdb-1999-06-21:1.1.1.6
	gdb-1999-06-14:1.1.1.6
	gdb-1999-06-07:1.1.1.5
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.508
date	2013.08.09.16.54.42;	author sergiodj;	state Exp;
branches;
next	1.507;

1.507
date	2013.05.15.12.26.14;	author brobecke;	state Exp;
branches;
next	1.506;

1.506
date	2013.02.04.18.40.39;	author sergiodj;	state Exp;
branches;
next	1.505;

1.505
date	2013.01.01.06.32.42;	author brobecke;	state Exp;
branches;
next	1.504;

1.504
date	2012.12.19.08.20.42;	author brobecke;	state Exp;
branches;
next	1.503;

1.503
date	2012.12.15.14.27.55;	author brobecke;	state Exp;
branches;
next	1.502;

1.502
date	2012.12.14.15.30.33;	author tromey;	state Exp;
branches;
next	1.501;

1.501
date	2012.11.21.00.29.54;	author qiyao;	state Exp;
branches;
next	1.500;

1.500
date	2012.11.14.15.40.35;	author tromey;	state Exp;
branches;
next	1.499;

1.499
date	2012.11.09.19.57.58;	author tromey;	state Exp;
branches;
next	1.498;

1.498
date	2012.11.09.01.47.15;	author palves;	state Exp;
branches;
next	1.497;

1.497
date	2012.10.31.14.29.10;	author tromey;	state Exp;
branches;
next	1.496;

1.496
date	2012.10.22.13.35.43;	author alianwar;	state Exp;
branches;
next	1.495;

1.495
date	2012.08.02.09.36.38;	author qiyao;	state Exp;
branches;
next	1.494;

1.494
date	2012.07.27.20.23.00;	author jkratoch;	state Exp;
branches;
next	1.493;

1.493
date	2012.06.08.14.24.56;	author qiyao;	state Exp;
branches;
next	1.492;

1.492
date	2012.06.05.13.50.49;	author brobecke;	state Exp;
branches;
next	1.491;

1.491
date	2012.06.04.16.23.55;	author palves;	state Exp;
branches;
next	1.490;

1.490
date	2012.05.24.17.03.26;	author palves;	state Exp;
branches;
next	1.489;

1.489
date	2012.05.24.16.39.07;	author palves;	state Exp;
branches;
next	1.488;

1.488
date	2012.05.23.11.34.56;	author palves;	state Exp;
branches;
next	1.487;

1.487
date	2012.05.16.14.35.03;	author macro;	state Exp;
branches;
next	1.486;

1.486
date	2012.04.27.20.47.53;	author sergiodj;	state Exp;
branches;
next	1.485;

1.485
date	2012.02.07.04.48.19;	author devans;	state Exp;
branches;
next	1.484;

1.484
date	2012.02.02.20.19.13;	author devans;	state Exp;
branches;
next	1.483;

1.483
date	2012.01.20.09.59.14;	author uweigand;	state Exp;
branches;
next	1.482;

1.482
date	2012.01.20.09.56.55;	author uweigand;	state Exp;
branches;
next	1.481;

1.481
date	2012.01.20.09.49.58;	author uweigand;	state Exp;
branches;
next	1.480;

1.480
date	2011.10.26.18.21.37;	author brobecke;	state Exp;
branches;
next	1.479;

1.479
date	2011.10.11.19.08.58;	author davem;	state Exp;
branches;
next	1.478;

1.478
date	2011.09.27.13.09.35;	author shebs;	state Exp;
branches;
next	1.477;

1.477
date	2011.07.22.15.31.50;	author tromey;	state Exp;
branches;
next	1.476;

1.476
date	2011.06.03.23.47.46;	author brobecke;	state Exp;
branches;
next	1.475;

1.475
date	2011.03.18.18.42.41;	author palves;	state Exp;
branches;
next	1.474;

1.474
date	2011.03.18.18.38.42;	author palves;	state Exp;
branches;
next	1.473;

1.473
date	2011.01.07.19.36.17;	author msnyder;	state Exp;
branches;
next	1.472;

1.472
date	2010.12.28.16.00.12;	author teawater;	state Exp;
branches;
next	1.471;

1.471
date	2010.08.18.12.24.12;	author palves;	state Exp;
branches;
next	1.470;

1.470
date	2010.08.06.19.02.14;	author corinna;	state Exp;
branches;
next	1.469;

1.469
date	2010.07.06.12.56.22;	author uweigand;	state Exp;
branches
	1.469.2.1;
next	1.468;

1.468
date	2010.05.26.18.19.27;	author palves;	state Exp;
branches;
next	1.467;

1.467
date	2010.05.13.21.56.57;	author msnyder;	state Exp;
branches;
next	1.466;

1.466
date	2010.05.07.14.00.28;	author palves;	state Exp;
branches;
next	1.465;

1.465
date	2010.05.06.19.41.11;	author msnyder;	state Exp;
branches;
next	1.464;

1.464
date	2010.04.24.13.12.53;	author palves;	state Exp;
branches;
next	1.463;

1.463
date	2010.03.08.19.28.26;	author palves;	state Exp;
branches;
next	1.462;

1.462
date	2010.03.05.20.18.11;	author tromey;	state Exp;
branches;
next	1.461;

1.461
date	2010.02.03.16.43.02;	author hjl;	state Exp;
branches;
next	1.460;

1.460
date	2010.02.01.16.57.01;	author drow;	state Exp;
branches;
next	1.459;

1.459
date	2010.02.01.16.09.19;	author drow;	state Exp;
branches;
next	1.458;

1.458
date	2010.01.06.04.20.26;	author shebs;	state Exp;
branches;
next	1.457;

1.457
date	2009.11.11.20.05.33;	author msnyder;	state Exp;
branches;
next	1.456;

1.456
date	2009.10.19.09.51.40;	author palves;	state Exp;
branches;
next	1.455;

1.455
date	2009.09.29.00.53.04;	author uweigand;	state Exp;
branches;
next	1.454;

1.454
date	2009.09.21.05.52.05;	author teawater;	state Exp;
branches;
next	1.453;

1.453
date	2009.09.15.03.30.05;	author sergiodj;	state Exp;
branches
	1.453.2.1;
next	1.452;

1.452
date	2009.08.14.00.32.32;	author palves;	state Exp;
branches;
next	1.451;

1.451
date	2009.07.02.17.29.17;	author uweigand;	state Exp;
branches;
next	1.450;

1.450
date	2009.07.02.17.25.53;	author uweigand;	state Exp;
branches;
next	1.449;

1.449
date	2009.06.17.18.50.31;	author uweigand;	state Exp;
branches;
next	1.448;

1.448
date	2009.06.17.18.48.26;	author uweigand;	state Exp;
branches;
next	1.447;

1.447
date	2009.06.17.18.35.33;	author uweigand;	state Exp;
branches;
next	1.446;

1.446
date	2009.05.19.00.23.49;	author palves;	state Exp;
branches;
next	1.445;

1.445
date	2009.04.30.02.52.15;	author teawater;	state Exp;
branches;
next	1.444;

1.444
date	2009.02.23.00.03.48;	author palves;	state Exp;
branches;
next	1.443;

1.443
date	2009.02.16.03.16.24;	author palves;	state Exp;
branches;
next	1.442;

1.442
date	2009.02.11.14.32.17;	author palves;	state Exp;
branches;
next	1.441;

1.441
date	2009.02.06.22.59.00;	author palves;	state Exp;
branches;
next	1.440;

1.440
date	2009.01.09.11.06.48;	author brobecke;	state Exp;
branches;
next	1.439;

1.439
date	2008.11.03.14.01.27;	author palves;	state Exp;
branches
	1.439.4.1;
next	1.438;

1.438
date	2008.09.11.14.26.59;	author uweigand;	state Exp;
branches
	1.438.2.1;
next	1.437;

1.437
date	2008.09.05.12.57.16;	author uweigand;	state Exp;
branches;
next	1.436;

1.436
date	2008.09.05.11.42.31;	author uweigand;	state Exp;
branches;
next	1.435;

1.435
date	2008.09.04.22.49.28;	author devans;	state Exp;
branches;
next	1.434;

1.434
date	2008.08.26.17.21.29;	author uweigand;	state Exp;
branches;
next	1.433;

1.433
date	2008.08.22.13.35.00;	author uweigand;	state Exp;
branches;
next	1.432;

1.432
date	2008.08.11.19.00.24;	author shebs;	state Exp;
branches;
next	1.431;

1.431
date	2008.07.25.16.12.03;	author tromey;	state Exp;
branches;
next	1.430;

1.430
date	2008.07.22.02.10.13;	author shebs;	state Exp;
branches;
next	1.429;

1.429
date	2008.06.11.22.03.49;	author muller;	state Exp;
branches
	1.429.2.1;
next	1.428;

1.428
date	2008.05.24.16.32.01;	author cseo;	state Exp;
branches;
next	1.427;

1.427
date	2008.05.16.00.27.23;	author drow;	state Exp;
branches;
next	1.426;

1.426
date	2008.05.02.20.38.16;	author drow;	state Exp;
branches;
next	1.425;

1.425
date	2008.05.02.16.49.53;	author palves;	state Exp;
branches;
next	1.424;

1.424
date	2008.05.01.19.31.47;	author aristovski;	state Exp;
branches;
next	1.423;

1.423
date	2008.04.30.21.16.45;	author drow;	state Exp;
branches;
next	1.422;

1.422
date	2008.04.22.11.03.41;	author corinna;	state Exp;
branches;
next	1.421;

1.421
date	2008.02.20.14.31.40;	author deuling;	state Exp;
branches;
next	1.420;

1.420
date	2008.01.18.17.07.39;	author deuling;	state Exp;
branches;
next	1.419;

1.419
date	2008.01.11.13.19.59;	author deuling;	state Exp;
branches;
next	1.418;

1.418
date	2007.12.06.16.32.59;	author deuling;	state Exp;
branches;
next	1.417;

1.417
date	2007.11.19.05.06.24;	author deuling;	state Exp;
branches;
next	1.416;

1.416
date	2007.11.17.00.41.17;	author uweigand;	state Exp;
branches;
next	1.415;

1.415
date	2007.11.16.04.56.44;	author deuling;	state Exp;
branches;
next	1.414;

1.414
date	2007.11.12.06.47.56;	author deuling;	state Exp;
branches;
next	1.413;

1.413
date	2007.11.09.05.32.19;	author deuling;	state Exp;
branches;
next	1.412;

1.412
date	2007.11.07.06.58.31;	author deuling;	state Exp;
branches;
next	1.411;

1.411
date	2007.11.07.06.32.59;	author deuling;	state Exp;
branches;
next	1.410;

1.410
date	2007.11.02.14.27.13;	author uweigand;	state Exp;
branches;
next	1.409;

1.409
date	2007.10.19.12.26.33;	author uweigand;	state Exp;
branches;
next	1.408;

1.408
date	2007.10.19.12.23.20;	author uweigand;	state Exp;
branches;
next	1.407;

1.407
date	2007.10.13.00.06.53;	author uweigand;	state Exp;
branches;
next	1.406;

1.406
date	2007.10.12.15.34.45;	author uweigand;	state Exp;
branches;
next	1.405;

1.405
date	2007.10.12.15.30.03;	author uweigand;	state Exp;
branches;
next	1.404;

1.404
date	2007.09.10.21.14.10;	author drow;	state Exp;
branches;
next	1.403;

1.403
date	2007.09.03.23.06.35;	author palves;	state Exp;
branches;
next	1.402;

1.402
date	2007.08.23.18.08.31;	author brobecke;	state Exp;
branches;
next	1.401;

1.401
date	2007.06.22.12.47.48;	author uweigand;	state Exp;
branches;
next	1.400;

1.400
date	2007.06.22.12.45.37;	author uweigand;	state Exp;
branches;
next	1.399;

1.399
date	2007.06.19.17.30.37;	author uweigand;	state Exp;
branches;
next	1.398;

1.398
date	2007.06.19.17.21.51;	author uweigand;	state Exp;
branches;
next	1.397;

1.397
date	2007.06.18.18.58.13;	author uweigand;	state Exp;
branches;
next	1.396;

1.396
date	2007.06.18.18.37.12;	author uweigand;	state Exp;
branches;
next	1.395;

1.395
date	2007.06.18.18.28.29;	author uweigand;	state Exp;
branches;
next	1.394;

1.394
date	2007.06.18.18.25.59;	author uweigand;	state Exp;
branches;
next	1.393;

1.393
date	2007.06.18.18.23.08;	author uweigand;	state Exp;
branches;
next	1.392;

1.392
date	2007.06.18.18.18.59;	author uweigand;	state Exp;
branches;
next	1.391;

1.391
date	2007.06.18.17.56.32;	author uweigand;	state Exp;
branches;
next	1.390;

1.390
date	2007.06.18.17.45.26;	author uweigand;	state Exp;
branches;
next	1.389;

1.389
date	2007.06.16.18.28.24;	author uweigand;	state Exp;
branches;
next	1.388;

1.388
date	2007.06.15.22.44.55;	author uweigand;	state Exp;
branches;
next	1.387;

1.387
date	2007.06.15.22.42.22;	author uweigand;	state Exp;
branches;
next	1.386;

1.386
date	2007.06.15.22.41.13;	author uweigand;	state Exp;
branches;
next	1.385;

1.385
date	2007.06.15.22.39.51;	author uweigand;	state Exp;
branches;
next	1.384;

1.384
date	2007.06.15.22.37.34;	author uweigand;	state Exp;
branches;
next	1.383;

1.383
date	2007.06.13.17.59.50;	author uweigand;	state Exp;
branches;
next	1.382;

1.382
date	2007.06.13.17.53.51;	author uweigand;	state Exp;
branches;
next	1.381;

1.381
date	2007.06.13.17.48.13;	author uweigand;	state Exp;
branches;
next	1.380;

1.380
date	2007.06.13.17.38.43;	author uweigand;	state Exp;
branches;
next	1.379;

1.379
date	2007.06.13.17.30.00;	author uweigand;	state Exp;
branches;
next	1.378;

1.378
date	2007.06.12.17.03.02;	author uweigand;	state Exp;
branches;
next	1.377;

1.377
date	2007.06.12.16.59.43;	author uweigand;	state Exp;
branches;
next	1.376;

1.376
date	2007.06.12.16.55.32;	author uweigand;	state Exp;
branches;
next	1.375;

1.375
date	2007.06.12.16.51.13;	author uweigand;	state Exp;
branches;
next	1.374;

1.374
date	2007.06.12.16.47.06;	author uweigand;	state Exp;
branches;
next	1.373;

1.373
date	2007.06.12.16.43.39;	author uweigand;	state Exp;
branches;
next	1.372;

1.372
date	2007.06.12.16.33.20;	author uweigand;	state Exp;
branches;
next	1.371;

1.371
date	2007.06.12.15.33.03;	author uweigand;	state Exp;
branches;
next	1.370;

1.370
date	2007.06.09.14.20.24;	author uweigand;	state Exp;
branches;
next	1.369;

1.369
date	2007.06.09.14.15.52;	author uweigand;	state Exp;
branches;
next	1.368;

1.368
date	2007.06.09.14.12.52;	author uweigand;	state Exp;
branches;
next	1.367;

1.367
date	2007.06.09.14.02.39;	author uweigand;	state Exp;
branches;
next	1.366;

1.366
date	2007.06.09.13.59.42;	author uweigand;	state Exp;
branches;
next	1.365;

1.365
date	2007.06.09.13.55.51;	author uweigand;	state Exp;
branches;
next	1.364;

1.364
date	2007.06.09.13.51.51;	author uweigand;	state Exp;
branches;
next	1.363;

1.363
date	2007.06.09.13.49.20;	author uweigand;	state Exp;
branches;
next	1.362;

1.362
date	2007.06.09.13.42.15;	author uweigand;	state Exp;
branches;
next	1.361;

1.361
date	2007.06.07.05.00.40;	author vprus;	state Exp;
branches;
next	1.360;

1.360
date	2007.06.06.15.43.26;	author uweigand;	state Exp;
branches;
next	1.359;

1.359
date	2007.06.06.15.38.56;	author uweigand;	state Exp;
branches;
next	1.358;

1.358
date	2007.06.06.15.35.49;	author uweigand;	state Exp;
branches;
next	1.357;

1.357
date	2007.06.06.15.32.25;	author uweigand;	state Exp;
branches;
next	1.356;

1.356
date	2007.06.06.15.29.35;	author uweigand;	state Exp;
branches;
next	1.355;

1.355
date	2007.06.06.15.26.28;	author uweigand;	state Exp;
branches;
next	1.354;

1.354
date	2007.06.06.15.23.05;	author uweigand;	state Exp;
branches;
next	1.353;

1.353
date	2007.06.06.15.15.34;	author uweigand;	state Exp;
branches;
next	1.352;

1.352
date	2007.05.31.17.32.21;	author uweigand;	state Exp;
branches;
next	1.351;

1.351
date	2007.05.31.17.19.32;	author uweigand;	state Exp;
branches;
next	1.350;

1.350
date	2007.05.31.17.05.00;	author uweigand;	state Exp;
branches;
next	1.349;

1.349
date	2007.05.31.17.01.45;	author uweigand;	state Exp;
branches;
next	1.348;

1.348
date	2007.05.31.17.00.06;	author uweigand;	state Exp;
branches;
next	1.347;

1.347
date	2007.05.31.16.57.30;	author uweigand;	state Exp;
branches;
next	1.346;

1.346
date	2007.05.14.15.16.57;	author uweigand;	state Exp;
branches;
next	1.345;

1.345
date	2007.05.11.19.57.17;	author uweigand;	state Exp;
branches;
next	1.344;

1.344
date	2007.05.11.19.16.03;	author uweigand;	state Exp;
branches;
next	1.343;

1.343
date	2007.05.09.00.17.21;	author uweigand;	state Exp;
branches;
next	1.342;

1.342
date	2007.05.07.18.20.18;	author uweigand;	state Exp;
branches;
next	1.341;

1.341
date	2007.04.28.21.52.38;	author uweigand;	state Exp;
branches;
next	1.340;

1.340
date	2007.04.14.18.10.54;	author uweigand;	state Exp;
branches;
next	1.339;

1.339
date	2007.04.12.14.52.19;	author uweigand;	state Exp;
branches;
next	1.338;

1.338
date	2007.02.28.17.34.58;	author drow;	state Exp;
branches;
next	1.337;

1.337
date	2007.02.08.21.00.29;	author drow;	state Exp;
branches;
next	1.336;

1.336
date	2007.01.29.17.31.05;	author drow;	state Exp;
branches;
next	1.335;

1.335
date	2007.01.13.23.24.43;	author kettenis;	state Exp;
branches;
next	1.334;

1.334
date	2007.01.08.20.03.48;	author uweigand;	state Exp;
branches;
next	1.333;

1.333
date	2007.01.03.18.05.43;	author drow;	state Exp;
branches;
next	1.332;

1.332
date	2006.11.28.22.10.26;	author drow;	state Exp;
branches;
next	1.331;

1.331
date	2006.11.10.19.20.35;	author drow;	state Exp;
branches;
next	1.330;

1.330
date	2006.07.16.11.03.41;	author kettenis;	state Exp;
branches;
next	1.329;

1.329
date	2006.04.18.19.20.06;	author drow;	state Exp;
branches
	1.329.6.1;
next	1.328;

1.328
date	2005.12.17.22.33.59;	author eliz;	state Exp;
branches
	1.328.2.1
	1.328.4.1;
next	1.327;

1.327
date	2005.09.02.19.02.45;	author kettenis;	state Exp;
branches
	1.327.2.1;
next	1.326;

1.326
date	2005.05.14.06.07.41;	author cagney;	state Exp;
branches;
next	1.325;

1.325
date	2005.05.09.21.20.30;	author cagney;	state Exp;
branches;
next	1.324;

1.324
date	2005.05.01.23.16.45;	author drow;	state Exp;
branches;
next	1.323;

1.323
date	2005.05.01.19.58.52;	author cagney;	state Exp;
branches;
next	1.322;

1.322
date	2005.03.31.19.58.24;	author kevinb;	state Exp;
branches;
next	1.321;

1.321
date	2005.02.24.13.51.31;	author cagney;	state Exp;
branches
	1.321.2.1;
next	1.320;

1.320
date	2005.02.18.18.58.55;	author cagney;	state Exp;
branches;
next	1.319;

1.319
date	2005.02.11.18.13.49;	author cagney;	state Exp;
branches;
next	1.318;

1.318
date	2005.02.09.21.56.11;	author cagney;	state Exp;
branches;
next	1.317;

1.317
date	2005.01.27.21.00.55;	author cagney;	state Exp;
branches;
next	1.316;

1.316
date	2004.12.03.23.59.51;	author tausq;	state Exp;
branches;
next	1.315;

1.315
date	2004.11.23.21.05.18;	author tausq;	state Exp;
branches;
next	1.314;

1.314
date	2004.10.31.21.21.41;	author cagney;	state Exp;
branches;
next	1.313;

1.313
date	2004.10.31.17.38.14;	author cagney;	state Exp;
branches;
next	1.312;

1.312
date	2004.09.02.17.22.06;	author cagney;	state Exp;
branches;
next	1.311;

1.311
date	2004.09.02.16.01.32;	author cagney;	state Exp;
branches;
next	1.310;

1.310
date	2004.08.08.19.49.40;	author cagney;	state Exp;
branches;
next	1.309;

1.309
date	2004.08.05.14.12.38;	author cagney;	state Exp;
branches;
next	1.308;

1.308
date	2004.08.03.03.52.01;	author cagney;	state Exp;
branches;
next	1.307;

1.307
date	2004.08.03.03.09.32;	author cagney;	state Exp;
branches;
next	1.306;

1.306
date	2004.08.03.02.37.39;	author cagney;	state Exp;
branches;
next	1.305;

1.305
date	2004.08.03.02.02.21;	author cagney;	state Exp;
branches;
next	1.304;

1.304
date	2004.08.02.19.44.39;	author cagney;	state Exp;
branches;
next	1.303;

1.303
date	2004.07.26.14.53.00;	author cagney;	state Exp;
branches;
next	1.302;

1.302
date	2004.06.21.17.54.57;	author cagney;	state Exp;
branches
	1.302.4.1;
next	1.301;

1.301
date	2004.06.21.15.01.03;	author cagney;	state Exp;
branches;
next	1.300;

1.300
date	2004.06.21.00.17.02;	author cagney;	state Exp;
branches;
next	1.299;

1.299
date	2004.06.20.18.10.13;	author cagney;	state Exp;
branches;
next	1.298;

1.298
date	2004.06.20.17.18.04;	author cagney;	state Exp;
branches;
next	1.297;

1.297
date	2004.06.18.21.36.15;	author cagney;	state Exp;
branches;
next	1.296;

1.296
date	2004.06.13.13.49.53;	author cagney;	state Exp;
branches;
next	1.295;

1.295
date	2004.06.13.13.42.31;	author cagney;	state Exp;
branches;
next	1.294;

1.294
date	2004.06.10.13.22.05;	author cagney;	state Exp;
branches;
next	1.293;

1.293
date	2004.06.09.21.26.48;	author cagney;	state Exp;
branches;
next	1.292;

1.292
date	2004.06.09.20.42.28;	author cagney;	state Exp;
branches;
next	1.291;

1.291
date	2004.06.07.02.02.46;	author tausq;	state Exp;
branches;
next	1.290;

1.290
date	2004.05.08.21.52.50;	author cagney;	state Exp;
branches;
next	1.289;

1.289
date	2004.05.08.21.27.02;	author cagney;	state Exp;
branches;
next	1.288;

1.288
date	2004.05.08.20.48.52;	author cagney;	state Exp;
branches;
next	1.287;

1.287
date	2004.05.08.20.16.33;	author cagney;	state Exp;
branches;
next	1.286;

1.286
date	2004.05.07.14.55.59;	author cagney;	state Exp;
branches;
next	1.285;

1.285
date	2004.05.05.15.42.52;	author cagney;	state Exp;
branches;
next	1.284;

1.284
date	2004.05.01.16.52.29;	author cagney;	state Exp;
branches;
next	1.283;

1.283
date	2004.05.01.13.14.19;	author cagney;	state Exp;
branches;
next	1.282;

1.282
date	2004.04.30.14.40.54;	author cagney;	state Exp;
branches;
next	1.281;

1.281
date	2004.04.02.23.20.47;	author cagney;	state Exp;
branches;
next	1.280;

1.280
date	2004.04.02.22.58.56;	author cagney;	state Exp;
branches;
next	1.279;

1.279
date	2004.03.23.15.16.39;	author cagney;	state Exp;
branches;
next	1.278;

1.278
date	2004.03.23.14.47.55;	author cagney;	state Exp;
branches;
next	1.277;

1.277
date	2004.03.22.15.36.46;	author cagney;	state Exp;
branches;
next	1.276;

1.276
date	2004.03.15.20.38.08;	author cagney;	state Exp;
branches;
next	1.275;

1.275
date	2004.02.16.21.49.21;	author cagney;	state Exp;
branches
	1.275.2.1
	1.275.6.1;
next	1.274;

1.274
date	2004.02.15.15.22.05;	author cagney;	state Exp;
branches;
next	1.273;

1.273
date	2004.02.14.17.26.34;	author cagney;	state Exp;
branches;
next	1.272;

1.272
date	2004.02.14.17.01.00;	author cagney;	state Exp;
branches;
next	1.271;

1.271
date	2004.02.14.15.46.33;	author ezannoni;	state Exp;
branches;
next	1.270;

1.270
date	2004.02.12.16.52.45;	author cagney;	state Exp;
branches;
next	1.269;

1.269
date	2004.02.11.15.40.27;	author cagney;	state Exp;
branches;
next	1.268;

1.268
date	2004.01.26.20.52.04;	author cagney;	state Exp;
branches;
next	1.267;

1.267
date	2004.01.17.23.21.21;	author cagney;	state Exp;
branches;
next	1.266;

1.266
date	2004.01.17.20.17.39;	author cagney;	state Exp;
branches;
next	1.265;

1.265
date	2004.01.17.18.24.14;	author cagney;	state Exp;
branches;
next	1.264;

1.264
date	2004.01.17.15.34.11;	author cagney;	state Exp;
branches;
next	1.263;

1.263
date	2004.01.13.21.38.45;	author cagney;	state Exp;
branches;
next	1.262;

1.262
date	2003.11.14.21.22.42;	author kettenis;	state Exp;
branches;
next	1.261;

1.261
date	2003.11.10.22.47.28;	author cagney;	state Exp;
branches;
next	1.260;

1.260
date	2003.11.10.04.39.17;	author cagney;	state Exp;
branches;
next	1.259;

1.259
date	2003.11.10.02.50.03;	author cagney;	state Exp;
branches;
next	1.258;

1.258
date	2003.11.10.01.10.55;	author cagney;	state Exp;
branches;
next	1.257;

1.257
date	2003.11.09.23.52.28;	author cagney;	state Exp;
branches;
next	1.256;

1.256
date	2003.11.09.12.07.16;	author kettenis;	state Exp;
branches;
next	1.255;

1.255
date	2003.10.22.23.54.10;	author cagney;	state Exp;
branches;
next	1.254;

1.254
date	2003.10.20.15.37.58;	author cagney;	state Exp;
branches;
next	1.253;

1.253
date	2003.10.13.23.41.40;	author kevinb;	state Exp;
branches;
next	1.252;

1.252
date	2003.10.11.12.52.29;	author kettenis;	state Exp;
branches;
next	1.251;

1.251
date	2003.10.02.20.28.29;	author cagney;	state Exp;
branches;
next	1.250;

1.250
date	2003.09.30.19.12.18;	author cagney;	state Exp;
branches;
next	1.249;

1.249
date	2003.09.30.13.29.43;	author cagney;	state Exp;
branches;
next	1.248;

1.248
date	2003.09.17.19.48.42;	author kettenis;	state Exp;
branches;
next	1.247;

1.247
date	2003.09.17.15.42.17;	author cagney;	state Exp;
branches;
next	1.246;

1.246
date	2003.09.17.14.24.29;	author cagney;	state Exp;
branches;
next	1.245;

1.245
date	2003.09.13.17.28.58;	author kettenis;	state Exp;
branches;
next	1.244;

1.244
date	2003.09.11.15.17.13;	author cagney;	state Exp;
branches;
next	1.243;

1.243
date	2003.09.09.04.41.32;	author cagney;	state Exp;
branches;
next	1.242;

1.242
date	2003.09.09.03.58.18;	author cagney;	state Exp;
branches;
next	1.241;

1.241
date	2003.09.04.00.05.52;	author cagney;	state Exp;
branches;
next	1.240;

1.240
date	2003.08.18.20.04.55;	author cagney;	state Exp;
branches;
next	1.239;

1.239
date	2003.08.17.01.06.46;	author cagney;	state Exp;
branches;
next	1.238;

1.238
date	2003.08.04.22.24.44;	author cagney;	state Exp;
branches;
next	1.237;

1.237
date	2003.07.22.19.49.57;	author cagney;	state Exp;
branches;
next	1.236;

1.236
date	2003.07.18.21.31.50;	author cagney;	state Exp;
branches;
next	1.235;

1.235
date	2003.07.11.01.35.54;	author cagney;	state Exp;
branches;
next	1.234;

1.234
date	2003.07.10.22.01.14;	author cagney;	state Exp;
branches;
next	1.233;

1.233
date	2003.07.03.22.14.41;	author cagney;	state Exp;
branches;
next	1.232;

1.232
date	2003.07.03.14.34.28;	author cagney;	state Exp;
branches;
next	1.231;

1.231
date	2003.06.26.17.18.41;	author cagney;	state Exp;
branches;
next	1.230;

1.230
date	2003.06.19.15.04.55;	author drow;	state Exp;
branches
	1.230.2.1;
next	1.229;

1.229
date	2003.06.16.16.47.41;	author cagney;	state Exp;
branches;
next	1.228;

1.228
date	2003.06.14.22.35.24;	author cagney;	state Exp;
branches;
next	1.227;

1.227
date	2003.06.13.23.07.05;	author cagney;	state Exp;
branches;
next	1.226;

1.226
date	2003.06.13.22.18.49;	author cagney;	state Exp;
branches;
next	1.225;

1.225
date	2003.06.13.04.40.31;	author cagney;	state Exp;
branches
	1.225.2.1;
next	1.224;

1.224
date	2003.06.11.19.38.25;	author cagney;	state Exp;
branches;
next	1.223;

1.223
date	2003.06.09.17.35.56;	author cagney;	state Exp;
branches;
next	1.222;

1.222
date	2003.06.09.01.02.06;	author cagney;	state Exp;
branches;
next	1.221;

1.221
date	2003.06.07.18.08.23;	author cagney;	state Exp;
branches;
next	1.220;

1.220
date	2003.06.07.17.09.18;	author cagney;	state Exp;
branches;
next	1.219;

1.219
date	2003.06.07.16.23.11;	author cagney;	state Exp;
branches;
next	1.218;

1.218
date	2003.06.02.02.54.33;	author fedor;	state Exp;
branches
	1.218.2.1;
next	1.217;

1.217
date	2003.05.31.14.20.31;	author cagney;	state Exp;
branches;
next	1.216;

1.216
date	2003.05.17.05.59.58;	author cagney;	state Exp;
branches
	1.216.4.1;
next	1.215;

1.215
date	2003.05.15.22.58.36;	author cagney;	state Exp;
branches;
next	1.214;

1.214
date	2003.05.07.19.21.11;	author cagney;	state Exp;
branches
	1.214.4.1;
next	1.213;

1.213
date	2003.05.05.17.56.55;	author cagney;	state Exp;
branches;
next	1.212;

1.212
date	2003.05.04.17.34.49;	author cagney;	state Exp;
branches;
next	1.211;

1.211
date	2003.05.03.19.39.23;	author cagney;	state Exp;
branches;
next	1.210;

1.210
date	2003.05.02.23.56.11;	author cagney;	state Exp;
branches;
next	1.209;

1.209
date	2003.04.30.22.01.37;	author cagney;	state Exp;
branches;
next	1.208;

1.208
date	2003.04.29.01.49.46;	author cagney;	state Exp;
branches;
next	1.207;

1.207
date	2003.04.28.16.17.27;	author cagney;	state Exp;
branches;
next	1.206;

1.206
date	2003.04.11.18.15.38;	author cagney;	state Exp;
branches
	1.206.2.1;
next	1.205;

1.205
date	2003.04.08.21.56.09;	author cagney;	state Exp;
branches;
next	1.204;

1.204
date	2003.04.01.17.17.27;	author cagney;	state Exp;
branches
	1.204.2.1;
next	1.203;

1.203
date	2003.04.01.14.38.49;	author cagney;	state Exp;
branches;
next	1.202;

1.202
date	2003.03.31.23.52.37;	author cagney;	state Exp;
branches;
next	1.201;

1.201
date	2003.03.31.21.58.21;	author cagney;	state Exp;
branches;
next	1.200;

1.200
date	2003.03.31.19.01.19;	author cagney;	state Exp;
branches;
next	1.199;

1.199
date	2003.03.30.14.59.00;	author cagney;	state Exp;
branches;
next	1.198;

1.198
date	2003.03.30.14.32.08;	author cagney;	state Exp;
branches;
next	1.197;

1.197
date	2003.03.30.00.09.40;	author cagney;	state Exp;
branches;
next	1.196;

1.196
date	2003.03.26.22.39.52;	author cagney;	state Exp;
branches;
next	1.195;

1.195
date	2003.03.25.22.56.39;	author cagney;	state Exp;
branches
	1.195.2.1;
next	1.194;

1.194
date	2003.03.25.20.38.45;	author cagney;	state Exp;
branches;
next	1.193;

1.193
date	2003.03.25.18.54.14;	author cagney;	state Exp;
branches;
next	1.192;

1.192
date	2003.03.24.03.54.47;	author cagney;	state Exp;
branches;
next	1.191;

1.191
date	2003.03.14.16.05.35;	author cagney;	state Exp;
branches;
next	1.190;

1.190
date	2003.03.13.21.45.39;	author cagney;	state Exp;
branches;
next	1.189;

1.189
date	2003.03.12.16.50.43;	author cagney;	state Exp;
branches;
next	1.188;

1.188
date	2003.03.10.15.28.40;	author cagney;	state Exp;
branches;
next	1.187;

1.187
date	2003.03.05.23.14.17;	author cagney;	state Exp;
branches
	1.187.2.1;
next	1.186;

1.186
date	2003.03.03.20.50.18;	author cagney;	state Exp;
branches
	1.186.2.1;
next	1.185;

1.185
date	2003.03.02.04.02.23;	author cagney;	state Exp;
branches;
next	1.184;

1.184
date	2003.03.02.00.11.42;	author cagney;	state Exp;
branches;
next	1.183;

1.183
date	2003.03.01.17.59.12;	author cagney;	state Exp;
branches;
next	1.182;

1.182
date	2003.02.27.17.48.46;	author cagney;	state Exp;
branches;
next	1.181;

1.181
date	2003.01.29.18.07.06;	author cagney;	state Exp;
branches;
next	1.180;

1.180
date	2003.01.21.19.43.47;	author cagney;	state Exp;
branches;
next	1.179;

1.179
date	2003.01.19.23.27.27;	author cagney;	state Exp;
branches;
next	1.178;

1.178
date	2003.01.13.21.10.29;	author cagney;	state Exp;
branches;
next	1.177;

1.177
date	2003.01.06.18.49.08;	author cagney;	state Exp;
branches
	1.177.2.1;
next	1.176;

1.176
date	2003.01.05.01.39.54;	author drow;	state Exp;
branches;
next	1.175;

1.175
date	2003.01.04.23.38.44;	author drow;	state Exp;
branches;
next	1.174;

1.174
date	2003.01.04.22.37.46;	author drow;	state Exp;
branches;
next	1.173;

1.173
date	2002.12.11.20.19.39;	author kevinb;	state Exp;
branches;
next	1.172;

1.172
date	2002.12.11.02.26.35;	author cagney;	state Exp;
branches;
next	1.171;

1.171
date	2002.12.09.22.46.31;	author cagney;	state Exp;
branches;
next	1.170;

1.170
date	2002.12.09.22.22.40;	author cagney;	state Exp;
branches;
next	1.169;

1.169
date	2002.12.09.02.04.16;	author cagney;	state Exp;
branches;
next	1.168;

1.168
date	2002.12.08.20.48.16;	author cagney;	state Exp;
branches;
next	1.167;

1.167
date	2002.12.06.19.26.03;	author cagney;	state Exp;
branches;
next	1.166;

1.166
date	2002.12.05.15.19.45;	author cagney;	state Exp;
branches;
next	1.165;

1.165
date	2002.12.01.19.07.14;	author cagney;	state Exp;
branches;
next	1.164;

1.164
date	2002.11.28.21.38.43;	author cagney;	state Exp;
branches;
next	1.163;

1.163
date	2002.11.28.18.15.57;	author cagney;	state Exp;
branches;
next	1.162;

1.162
date	2002.11.27.15.50.31;	author cagney;	state Exp;
branches;
next	1.161;

1.161
date	2002.11.25.04.47.56;	author cagney;	state Exp;
branches;
next	1.160;

1.160
date	2002.11.23.01.39.25;	author cagney;	state Exp;
branches;
next	1.159;

1.159
date	2002.11.05.21.44.05;	author cagney;	state Exp;
branches;
next	1.158;

1.158
date	2002.11.03.00.30.32;	author cagney;	state Exp;
branches;
next	1.157;

1.157
date	2002.11.02.15.13.34;	author cagney;	state Exp;
branches;
next	1.156;

1.156
date	2002.10.26.17.19.27;	author cagney;	state Exp;
branches;
next	1.155;

1.155
date	2002.10.25.15.59.56;	author cagney;	state Exp;
branches;
next	1.154;

1.154
date	2002.10.16.20.50.21;	author kevinb;	state Exp;
branches;
next	1.153;

1.153
date	2002.10.10.07.41.37;	author markom;	state Exp;
branches;
next	1.152;

1.152
date	2002.10.09.11.59.54;	author markom;	state Exp;
branches;
next	1.151;

1.151
date	2002.10.02.23.28.53;	author cagney;	state Exp;
branches
	1.151.2.1;
next	1.150;

1.150
date	2002.09.18.15.37.18;	author cagney;	state Exp;
branches
	1.150.2.1;
next	1.149;

1.149
date	2002.09.13.23.21.45;	author cagney;	state Exp;
branches;
next	1.148;

1.148
date	2002.09.13.00.38.48;	author brobecke;	state Exp;
branches;
next	1.147;

1.147
date	2002.09.06.20.17.40;	author kettenis;	state Exp;
branches;
next	1.146;

1.146
date	2002.08.24.00.21.34;	author cagney;	state Exp;
branches
	1.146.4.1;
next	1.145;

1.145
date	2002.08.21.16.34.09;	author cagney;	state Exp;
branches;
next	1.144;

1.144
date	2002.08.20.23.01.28;	author msnyder;	state Exp;
branches;
next	1.143;

1.143
date	2002.08.16.00.27.45;	author cagney;	state Exp;
branches;
next	1.142;

1.142
date	2002.08.15.23.41.20;	author cagney;	state Exp;
branches;
next	1.141;

1.141
date	2002.08.10.02.00.16;	author cagney;	state Exp;
branches;
next	1.140;

1.140
date	2002.08.07.16.01.57;	author cagney;	state Exp;
branches;
next	1.139;

1.139
date	2002.08.02.20.51.21;	author cagney;	state Exp;
branches;
next	1.138;

1.138
date	2002.08.02.14.48.19;	author cagney;	state Exp;
branches;
next	1.137;

1.137
date	2002.07.11.13.50.49;	author cagney;	state Exp;
branches;
next	1.136;

1.136
date	2002.07.03.21.27.55;	author cagney;	state Exp;
branches;
next	1.135;

1.135
date	2002.06.17.23.32.27;	author cagney;	state Exp;
branches;
next	1.134;

1.134
date	2002.06.14.22.55.40;	author cagney;	state Exp;
branches;
next	1.133;

1.133
date	2002.06.11.02.30.58;	author cagney;	state Exp;
branches;
next	1.132;

1.132
date	2002.06.08.18.57.38;	author cagney;	state Exp;
branches;
next	1.131;

1.131
date	2002.06.08.18.30.14;	author cagney;	state Exp;
branches;
next	1.130;

1.130
date	2002.06.08.18.09.01;	author cagney;	state Exp;
branches;
next	1.129;

1.129
date	2002.05.29.16.39.54;	author cagney;	state Exp;
branches;
next	1.128;

1.128
date	2002.05.29.01.51.16;	author cagney;	state Exp;
branches;
next	1.127;

1.127
date	2002.05.13.17.20.57;	author cagney;	state Exp;
branches
	1.127.2.1
	1.127.4.1;
next	1.126;

1.126
date	2002.05.12.03.09.11;	author cagney;	state Exp;
branches;
next	1.125;

1.125
date	2002.05.12.02.16.04;	author cagney;	state Exp;
branches;
next	1.124;

1.124
date	2002.05.12.01.02.57;	author cagney;	state Exp;
branches;
next	1.123;

1.123
date	2002.05.08.20.43.03;	author cagney;	state Exp;
branches;
next	1.122;

1.122
date	2002.05.03.21.05.35;	author cagney;	state Exp;
branches;
next	1.121;

1.121
date	2002.05.02.01.38.26;	author cagney;	state Exp;
branches;
next	1.120;

1.120
date	2002.05.01.22.02.20;	author cagney;	state Exp;
branches;
next	1.119;

1.119
date	2002.04.24.16.28.15;	author cagney;	state Exp;
branches;
next	1.118;

1.118
date	2002.04.20.17.41.18;	author cagney;	state Exp;
branches;
next	1.117;

1.117
date	2002.04.18.18.08.59;	author cagney;	state Exp;
branches;
next	1.116;

1.116
date	2002.04.07.02.16.46;	author cagney;	state Exp;
branches;
next	1.115;

1.115
date	2002.04.06.20.50.09;	author cagney;	state Exp;
branches;
next	1.114;

1.114
date	2002.04.06.03.07.59;	author drow;	state Exp;
branches;
next	1.113;

1.113
date	2002.04.06.02.39.09;	author drow;	state Exp;
branches;
next	1.112;

1.112
date	2002.04.06.00.02.50;	author cagney;	state Exp;
branches;
next	1.111;

1.111
date	2002.03.19.02.51.05;	author cagney;	state Exp;
branches;
next	1.110;

1.110
date	2002.02.18.15.59.13;	author cagney;	state Exp;
branches;
next	1.109;

1.109
date	2002.02.18.13.35.29;	author rearnsha;	state Exp;
branches;
next	1.108;

1.108
date	2002.02.16.23.09.16;	author cagney;	state Exp;
branches;
next	1.107;

1.107
date	2002.02.10.07.37.22;	author cagney;	state Exp;
branches;
next	1.106;

1.106
date	2002.02.10.06.08.40;	author cagney;	state Exp;
branches;
next	1.105;

1.105
date	2002.02.10.05.50.33;	author cagney;	state Exp;
branches;
next	1.104;

1.104
date	2002.02.10.02.47.11;	author cagney;	state Exp;
branches;
next	1.103;

1.103
date	2002.02.06.13.00.44;	author rearnsha;	state Exp;
branches;
next	1.102;

1.102
date	2002.02.06.01.20.23;	author ezannoni;	state Exp;
branches;
next	1.101;

1.101
date	2002.02.04.11.55.34;	author rearnsha;	state Exp;
branches;
next	1.100;

1.100
date	2002.01.20.18.05.51;	author cagney;	state Exp;
branches;
next	1.99;

1.99
date	2002.01.05.04.30.17;	author cagney;	state Exp;
branches;
next	1.98;

1.98
date	2001.12.29.19.25.58;	author cagney;	state Exp;
branches;
next	1.97;

1.97
date	2001.12.25.22.19.40;	author cagney;	state Exp;
branches;
next	1.96;

1.96
date	2001.12.20.17.23.06;	author cagney;	state Exp;
branches;
next	1.95;

1.95
date	2001.12.20.03.26.07;	author jimb;	state Exp;
branches;
next	1.94;

1.94
date	2001.12.15.18.07.57;	author cagney;	state Exp;
branches;
next	1.93;

1.93
date	2001.12.15.16.53.23;	author cagney;	state Exp;
branches;
next	1.92;

1.92
date	2001.12.11.22.15.54;	author msnyder;	state Exp;
branches;
next	1.91;

1.91
date	2001.12.10.04.58.29;	author cagney;	state Exp;
branches;
next	1.90;

1.90
date	2001.12.07.12.10.15;	author smid;	state Exp;
branches;
next	1.89;

1.89
date	2001.12.06.20.49.46;	author cagney;	state Exp;
branches;
next	1.88;

1.88
date	2001.11.22.00.23.11;	author tromey;	state Exp;
branches;
next	1.87;

1.87
date	2001.11.08.01.33.04;	author cagney;	state Exp;
branches;
next	1.86;

1.86
date	2001.11.07.22.42.28;	author cagney;	state Exp;
branches;
next	1.85;

1.85
date	2001.11.07.04.28.38;	author cagney;	state Exp;
branches;
next	1.84;

1.84
date	2001.11.06.21.20.23;	author cagney;	state Exp;
branches;
next	1.83;

1.83
date	2001.11.06.18.05.59;	author cagney;	state Exp;
branches;
next	1.82;

1.82
date	2001.11.06.11.02.12;	author corinna;	state Exp;
branches;
next	1.81;

1.81
date	2001.11.05.23.11.31;	author cagney;	state Exp;
branches;
next	1.80;

1.80
date	2001.11.05.21.34.33;	author cagney;	state Exp;
branches;
next	1.79;

1.79
date	2001.10.31.23.21.33;	author corinna;	state Exp;
branches;
next	1.78;

1.78
date	2001.10.21.17.19.36;	author cagney;	state Exp;
branches;
next	1.77;

1.77
date	2001.10.15.18.18.29;	author cagney;	state Exp;
branches;
next	1.76;

1.76
date	2001.10.13.19.40.31;	author cagney;	state Exp;
branches;
next	1.75;

1.75
date	2001.09.30.16.54.28;	author cagney;	state Exp;
branches;
next	1.74;

1.74
date	2001.09.29.22.35.53;	author cagney;	state Exp;
branches;
next	1.73;

1.73
date	2001.09.05.23.44.43;	author ezannoni;	state Exp;
branches;
next	1.72;

1.72
date	2001.08.15.15.29.55;	author corinna;	state Exp;
branches;
next	1.71;

1.71
date	2001.08.11.00.59.29;	author cagney;	state Exp;
branches;
next	1.70;

1.70
date	2001.08.11.00.41.02;	author kseitz;	state Exp;
branches;
next	1.69;

1.69
date	2001.07.10.21.24.48;	author jimb;	state Exp;
branches
	1.69.2.1
	1.69.4.1;
next	1.68;

1.68
date	2001.06.16.20.00.24;	author cagney;	state Exp;
branches
	1.68.2.1;
next	1.67;

1.67
date	2001.06.16.19.48.01;	author cagney;	state Exp;
branches;
next	1.66;

1.66
date	2001.06.15.23.50.46;	author cagney;	state Exp;
branches;
next	1.65;

1.65
date	2001.06.15.23.10.54;	author cagney;	state Exp;
branches;
next	1.64;

1.64
date	2001.06.15.22.10.21;	author cagney;	state Exp;
branches;
next	1.63;

1.63
date	2001.06.15.19.19.22;	author cagney;	state Exp;
branches;
next	1.62;

1.62
date	2001.06.06.17.47.28;	author jimb;	state Exp;
branches;
next	1.61;

1.61
date	2001.06.06.14.46.30;	author jimb;	state Exp;
branches;
next	1.60;

1.60
date	2001.06.02.03.50.56;	author jimb;	state Exp;
branches;
next	1.59;

1.59
date	2001.05.14.16.43.35;	author cagney;	state Exp;
branches;
next	1.58;

1.58
date	2001.05.04.04.15.24;	author kevinb;	state Exp;
branches;
next	1.57;

1.57
date	2001.04.06.17.53.39;	author dsmith;	state Exp;
branches;
next	1.56;

1.56
date	2001.03.24.02.07.48;	author cagney;	state Exp;
branches;
next	1.55;

1.55
date	2001.03.24.01.26.09;	author cagney;	state Exp;
branches;
next	1.54;

1.54
date	2001.02.08.06.03.53;	author cagney;	state Exp;
branches;
next	1.53;

1.53
date	2001.02.07.02.17.48;	author cagney;	state Exp;
branches;
next	1.52;

1.52
date	2001.02.02.20.01.16;	author juanito;	state Exp;
branches;
next	1.51;

1.51
date	2001.01.22.23.32.49;	author nsd;	state Exp;
branches;
next	1.50;

1.50
date	2000.12.15.12.33.07;	author cagney;	state Exp;
branches;
next	1.49;

1.49
date	2000.12.15.01.01.46;	author kevinb;	state Exp;
branches;
next	1.48;

1.48
date	2000.12.04.04.01.15;	author cagney;	state Exp;
branches;
next	1.47;

1.47
date	2000.11.30.03.30.52;	author cagney;	state Exp;
branches;
next	1.46;

1.46
date	2000.10.30.21.50.57;	author jtc;	state Exp;
branches;
next	1.45;

1.45
date	2000.10.27.19.17.56;	author jtc;	state Exp;
branches;
next	1.44;

1.44
date	2000.10.27.15.02.42;	author davea;	state Exp;
branches;
next	1.43;

1.43
date	2000.10.26.07.41.25;	author schauer;	state Exp;
branches;
next	1.42;

1.42
date	2000.09.01.23.55.07;	author davea;	state Exp;
branches;
next	1.41;

1.41
date	2000.08.25.20.51.19;	author taylor;	state Exp;
branches;
next	1.40;

1.40
date	2000.08.11.03.19.22;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2000.08.11.02.55.38;	author cagney;	state Exp;
branches;
next	1.38;

1.38
date	2000.08.11.01.30.11;	author cagney;	state Exp;
branches;
next	1.37;

1.37
date	2000.08.04.04.00.44;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2000.08.02.22.18.42;	author guo;	state Exp;
branches;
next	1.35;

1.35
date	2000.08.02.11.05.50;	author cagney;	state Exp;
branches;
next	1.34;

1.34
date	2000.08.01.14.48.00;	author ezannoni;	state Exp;
branches;
next	1.33;

1.33
date	2000.07.30.01.48.25;	author kevinb;	state Exp;
branches;
next	1.32;

1.32
date	2000.07.27.04.01.24;	author cagney;	state Exp;
branches;
next	1.31;

1.31
date	2000.07.24.14.29.23;	author ezannoni;	state Exp;
branches;
next	1.30;

1.30
date	2000.07.24.14.25.22;	author ezannoni;	state Exp;
branches;
next	1.29;

1.29
date	2000.06.12.00.35.33;	author cagney;	state Exp;
branches;
next	1.28;

1.28
date	2000.06.10.05.37.47;	author cagney;	state Exp;
branches;
next	1.27;

1.27
date	2000.06.07.04.38.02;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2000.06.06.06.45.19;	author cagney;	state Exp;
branches;
next	1.25;

1.25
date	2000.06.04.13.46.37;	author cagney;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2000.06.02.01.59.13;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2000.05.15.06.27.16;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2000.05.11.11.49.21;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2000.05.10.17.38.16;	author msnyder;	state Exp;
branches;
next	1.20;

1.20
date	2000.05.02.09.36.56;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2000.05.02.08.57.21;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.29.08.55.45;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2000.04.28.05.21.23;	author msnyder;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.22.06.44.39;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.21.04.17.18;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.20.04.24.03;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.19.23.22.14;	author jimb;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.17.05.59.42;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.17.02.27.36;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.14.19.12.27;	author jimb;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.14.18.43.41;	author jimb;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.09.14.37.28;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.03.00.00.32;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.30.05.32.23;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.28.02.25.14;	author dberlin;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.21.20.40.43;	author jimb;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.22.19.17.27;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.09.08.52.45;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.01;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.469.2.1
date	2010.12.30.03.17.35;	author teawater;	state Exp;
branches;
next	;

1.453.2.1
date	2009.09.21.06.57.02;	author teawater;	state Exp;
branches;
next	1.453.2.2;

1.453.2.2
date	2009.09.29.12.09.19;	author uweigand;	state Exp;
branches;
next	;

1.439.4.1
date	2008.12.26.21.09.13;	author msnyder;	state Exp;
branches;
next	;

1.438.2.1
date	2008.10.01.03.16.04;	author msnyder;	state Exp;
branches;
next	1.438.2.2;

1.438.2.2
date	2008.10.01.04.23.32;	author msnyder;	state Exp;
branches;
next	;

1.429.2.1
date	2008.07.20.14.30.09;	author teawater;	state Exp;
branches;
next	;

1.329.6.1
date	2006.08.28.07.48.48;	author nickrob;	state Exp;
branches;
next	;

1.328.2.1
date	2006.04.03.00.47.39;	author drow;	state Exp;
branches
	1.328.2.1.2.1;
next	;

1.328.2.1.2.1
date	2006.04.11.21.58.23;	author drow;	state Exp;
branches;
next	;

1.328.4.1
date	2006.03.03.20.46.36;	author drow;	state Exp;
branches;
next	1.328.4.2;

1.328.4.2
date	2006.03.23.16.52.21;	author drow;	state Exp;
branches;
next	1.328.4.3;

1.328.4.3
date	2006.03.23.21.49.57;	author drow;	state Exp;
branches;
next	;

1.327.2.1
date	2005.10.20.03.36.27;	author pbrook;	state Exp;
branches;
next	;

1.321.2.1
date	2005.03.29.02.52.05;	author pbrook;	state Exp;
branches;
next	;

1.302.4.1
date	2004.09.01.18.09.54;	author jimb;	state Exp;
branches;
next	1.302.4.2;

1.302.4.2
date	2004.09.07.16.15.56;	author jimb;	state Exp;
branches;
next	;

1.275.2.1
date	2004.03.27.17.37.48;	author drow;	state Exp;
branches;
next	1.275.2.2;

1.275.2.2
date	2004.09.16.17.01.04;	author drow;	state Exp;
branches;
next	;

1.275.6.1
date	2004.03.09.22.58.58;	author cagney;	state Exp;
branches;
next	1.275.6.2;

1.275.6.2
date	2004.03.16.16.05.55;	author cagney;	state Exp;
branches;
next	;

1.230.2.1
date	2003.07.03.14.48.57;	author cagney;	state Exp;
branches;
next	1.230.2.2;

1.230.2.2
date	2003.08.18.20.12.30;	author cagney;	state Exp;
branches;
next	;

1.225.2.1
date	2003.06.13.23.18.30;	author jimb;	state Exp;
branches;
next	;

1.218.2.1
date	2003.06.06.18.02.29;	author cagney;	state Exp;
branches;
next	1.218.2.2;

1.218.2.2
date	2003.06.08.22.14.41;	author cagney;	state Exp;
branches;
next	;

1.216.4.1
date	2003.06.11.13.20.06;	author jimb;	state Exp;
branches;
next	1.216.4.2;

1.216.4.2
date	2003.06.12.21.41.11;	author jimb;	state Exp;
branches;
next	1.216.4.3;

1.216.4.3
date	2003.06.12.21.50.30;	author jimb;	state Exp;
branches;
next	;

1.214.4.1
date	2003.06.03.20.54.35;	author cagney;	state Exp;
branches;
next	;

1.206.2.1
date	2003.05.04.11.37.41;	author kettenis;	state Exp;
branches;
next	1.206.2.2;

1.206.2.2
date	2003.05.18.09.44.07;	author kettenis;	state Exp;
branches;
next	;

1.204.2.1
date	2003.04.10.21.33.48;	author cagney;	state Exp;
branches;
next	;

1.195.2.1
date	2003.03.30.16.35.20;	author cagney;	state Exp;
branches;
next	;

1.187.2.1
date	2003.03.16.14.01.48;	author kettenis;	state Exp;
branches;
next	;

1.186.2.1
date	2003.03.05.05.00.03;	author cagney;	state Exp;
branches;
next	1.186.2.2;

1.186.2.2
date	2003.03.06.19.21.30;	author cagney;	state Exp;
branches;
next	;

1.177.2.1
date	2003.01.13.21.14.01;	author cagney;	state Exp;
branches;
next	1.177.2.2;

1.177.2.2
date	2003.01.20.00.38.14;	author cagney;	state Exp;
branches;
next	;

1.151.2.1
date	2002.10.26.17.12.06;	author drow;	state Exp;
branches;
next	1.151.2.2;

1.151.2.2
date	2003.12.14.20.27.15;	author drow;	state Exp;
branches;
next	1.151.2.3;

1.151.2.3
date	2004.02.09.19.43.39;	author drow;	state Exp;
branches;
next	;

1.150.2.1
date	2002.10.11.22.22.54;	author carlton;	state Exp;
branches;
next	1.150.2.2;

1.150.2.2
date	2002.10.25.23.49.53;	author carlton;	state Exp;
branches;
next	1.150.2.3;

1.150.2.3
date	2002.11.15.19.18.43;	author carlton;	state Exp;
branches;
next	1.150.2.4;

1.150.2.4
date	2002.12.23.19.38.23;	author carlton;	state Exp;
branches;
next	1.150.2.5;

1.150.2.5
date	2003.02.07.19.17.48;	author carlton;	state Exp;
branches;
next	1.150.2.6;

1.150.2.6
date	2003.03.06.00.56.28;	author carlton;	state Exp;
branches;
next	1.150.2.7;

1.150.2.7
date	2003.04.16.19.56.52;	author carlton;	state Exp;
branches;
next	1.150.2.8;

1.150.2.8
date	2003.05.01.00.46.48;	author carlton;	state Exp;
branches;
next	1.150.2.9;

1.150.2.9
date	2003.05.23.18.40.37;	author carlton;	state Exp;
branches;
next	1.150.2.10;

1.150.2.10
date	2003.06.27.21.49.55;	author carlton;	state Exp;
branches;
next	1.150.2.11;

1.150.2.11
date	2003.08.05.17.13.06;	author carlton;	state Exp;
branches;
next	1.150.2.12;

1.150.2.12
date	2003.09.17.21.28.19;	author carlton;	state Exp;
branches;
next	1.150.2.13;

1.150.2.13
date	2003.11.11.23.50.43;	author carlton;	state Exp;
branches;
next	1.150.2.14;

1.150.2.14
date	2003.12.16.00.00.32;	author carlton;	state Exp;
branches;
next	1.150.2.15;

1.150.2.15
date	2004.01.26.19.11.23;	author carlton;	state Exp;
branches;
next	;

1.146.4.1
date	2002.08.25.20.26.13;	author cagney;	state Exp;
branches;
next	1.146.4.2;

1.146.4.2
date	2002.08.26.19.57.38;	author cagney;	state Exp;
branches;
next	1.146.4.3;

1.146.4.3
date	2002.08.26.20.10.49;	author cagney;	state Exp;
branches;
next	;

1.127.2.1
date	2002.05.16.00.54.55;	author cagney;	state Exp;
branches;
next	1.127.2.2;

1.127.2.2
date	2002.05.16.19.07.58;	author cagney;	state Exp;
branches;
next	1.127.2.3;

1.127.2.3
date	2002.06.15.16.42.51;	author cagney;	state Exp;
branches;
next	1.127.2.4;

1.127.2.4
date	2002.06.15.19.32.42;	author cagney;	state Exp;
branches;
next	1.127.2.5;

1.127.2.5
date	2002.06.21.16.19.23;	author cagney;	state Exp;
branches;
next	;

1.127.4.1
date	2002.06.20.01.32.26;	author kseitz;	state Exp;
branches;
next	1.127.4.2;

1.127.4.2
date	2002.07.22.21.46.58;	author kseitz;	state Exp;
branches;
next	1.127.4.3;

1.127.4.3
date	2002.08.09.18.34.24;	author kseitz;	state Exp;
branches;
next	1.127.4.4;

1.127.4.4
date	2002.08.30.22.52.43;	author kseitz;	state Exp;
branches;
next	1.127.4.5;

1.127.4.5
date	2002.10.01.00.46.08;	author kseitz;	state Exp;
branches;
next	1.127.4.6;

1.127.4.6
date	2002.11.04.00.17.31;	author ezannoni;	state Exp;
branches;
next	;

1.69.2.1
date	2001.10.13.19.40.33;	author cagney;	state Exp;
branches;
next	;

1.69.4.1
date	2001.09.27.00.13.29;	author cagney;	state Exp;
branches;
next	;

1.68.2.1
date	2001.07.06.19.16.59;	author dberlin;	state Exp;
branches;
next	;

1.25.2.1
date	2000.06.09.10.21.56;	author cagney;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.01;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.24.11;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.42.25;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.02.01;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.06.07.19.17.23;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.06.14.18.07.31;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.07.07.20.06.16;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.07.19.23.27.54;	author jsm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.08.09.21.33.27;	author jsm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.08.16.19.52.37;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	99.08.31.01.04.58;	author jsm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.10.19.02.46.36;	author jsm;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.10.26.03.43.11;	author jsm;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	99.12.14.01.05.30;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.508
log
@This patch implements the new gdbarch method gdbarch_gdb_signal_to_target.
It will be used when one wants to convert between the internal GDB signal
representation (enum gdb_signal) and the target's representation.

The idea of this patch came from a chat between Pedro and I on IRC, plus
the discussion of my patches to add the new $_exitsignal convenience
variable:

	<http://sourceware.org/ml/gdb-patches/2013-06/msg00452.html>
	<http://sourceware.org/ml/gdb-patches/2013-06/msg00352.html>

What I did was to investigate, on the Linux kernel, which targets shared
the signal numbers definition with the generic definition, present at
<include/uapi/asm-generic/signal.h>.  For the record, I used linux-3.10-rc7
as the main source of information, always looking at
<arch/<ARCH_NAME>/include/uapi/asm/signal.h>.  For SIGRTMAX (which defaults
to _NSIG in most cases), I had to look at different signal-related
files, but most of them (except MIPS) were defined to 64 anyway.

Then, with all the differences in hand, I implemented the bits on each
target.

2013-08-09  Sergio Durigan Junior  <sergiodj@@redhat.com>

	* linux-tdep.c: Define enum with generic signal numbers.
	(linux_gdb_signal_from_target): New function.
	(linux_gdb_signal_to_target): Likewise.
	(linux_init_abi): Set gdbarch_gdb_signal_{to,from}_target
	methods to the functions above.
	* linux-tdep.h (linux_gdb_signal_from_target): New prototype.
	(linux_gdb_signal_to_target): Likewise.
	* alpha-linux-tdep.c: Define new enum with signals different
	from generic Linux kernel.
	(alpha_linux_gdb_signal_from_target): New function.
	(alpha_linux_gdb_signal_to_target): Likewise.
	(alpha_linux_init_abi): Set gdbarch_gdb_signal_{to,from}_target
	with the functions mentioned above.
	* avr-tdep.c: Define enum with differences between Linux kernel
	and AVR signals.
	(avr_linux_gdb_signal_from_target): New function.
	(avr_linux_gdb_signal_to_target): Likewise.
	(avr_gdbarch_init): Set gdbarch_gdb_signal_{to,from}_target to
	the functions mentioned above.
	* sparc-linux-tdep.c: Define enum with differences between SPARC
	and generic Linux kernel signal numbers.
	(sparc32_linux_gdb_signal_from_target): New function.
	(sparc32_linux_gdb_signal_to_target): Likewise.
	(sparc32_linux_init_abi): Set gdbarch_gdb_signal_{to,from}_target
	to the functions defined above.
	* xtensa-linux-tdep.c: Define enum with differences between
	Xtensa and Linux kernel generic signals.
	(xtensa_linux_gdb_signal_from_target): New function.
	(xtensa_linux_gdb_signal_to_target): Likewise.
	(xtensa_linux_init_abi): Set gdbarch_gdb_signal_to_target
	to the functions defined above.
	* mips-linux-tdep.c: Define enum with differences between
	signals in MIPS and Linux kernel generic ones.
	(mips_gdb_signal_to_target): New function.
	(mips_gdb_signal_from_target): Redefine to use new enum, handle
	only different signals from the Linux kernel generic.
	(mips_linux_init_abi): Set gdbarch_gdb_signal_{to,from}_target
	the functions defined above.
	* mips-linux-tdep.h (enum mips_signals): Remove.
@
text
@/* *INDENT-OFF* */ /* THIS FILE IS GENERATED -*- buffer-read-only: t -*- */
/* vi:set ro: */

/* Dynamic architecture support for GDB, the GNU debugger.

   Copyright (C) 1998-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
  
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
  
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* This file was created with the aid of ``gdbarch.sh''.

   The Bourne shell script ``gdbarch.sh'' creates the files
   ``new-gdbarch.c'' and ``new-gdbarch.h and then compares them
   against the existing ``gdbarch.[hc]''.  Any differences found
   being reported.

   If editing this file, please also run gdbarch.sh and merge any
   changes into that script. Conversely, when making sweeping changes
   to this file, modifying gdbarch.sh and using its output may prove
   easier.  */


#include "defs.h"
#include "arch-utils.h"

#include "gdbcmd.h"
#include "inferior.h" 
#include "symcat.h"

#include "floatformat.h"

#include "gdb_assert.h"
#include "gdb_string.h"
#include "reggroups.h"
#include "osabi.h"
#include "gdb_obstack.h"
#include "observer.h"
#include "regcache.h"
#include "objfiles.h"

/* Static function declarations */

static void alloc_gdbarch_data (struct gdbarch *);

/* Non-zero if we want to trace architecture code.  */

#ifndef GDBARCH_DEBUG
#define GDBARCH_DEBUG 0
#endif
unsigned int gdbarch_debug = GDBARCH_DEBUG;
static void
show_gdbarch_debug (struct ui_file *file, int from_tty,
                    struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file, _("Architecture debugging is %s.\n"), value);
}

static const char *
pformat (const struct floatformat **format)
{
  if (format == NULL)
    return "(null)";
  else
    /* Just print out one of them - this is only for diagnostics.  */
    return format[0]->name;
}

static const char *
pstring (const char *string)
{
  if (string == NULL)
    return "(null)";
  return string;
}


/* Maintain the struct gdbarch object.  */

struct gdbarch
{
  /* Has this architecture been fully initialized?  */
  int initialized_p;

  /* An obstack bound to the lifetime of the architecture.  */
  struct obstack *obstack;

  /* basic architectural information.  */
  const struct bfd_arch_info * bfd_arch_info;
  int byte_order;
  int byte_order_for_code;
  enum gdb_osabi osabi;
  const struct target_desc * target_desc;

  /* target specific vector.  */
  struct gdbarch_tdep *tdep;
  gdbarch_dump_tdep_ftype *dump_tdep;

  /* per-architecture data-pointers.  */
  unsigned nr_data;
  void **data;

  /* Multi-arch values.

     When extending this structure you must:

     Add the field below.

     Declare set/get functions and define the corresponding
     macro in gdbarch.h.

     gdbarch_alloc(): If zero/NULL is not a suitable default,
     initialize the new field.

     verify_gdbarch(): Confirm that the target updated the field
     correctly.

     gdbarch_dump(): Add a fprintf_unfiltered call so that the new
     field is dumped out

     ``startup_gdbarch()'': Append an initial value to the static
     variable (base values on the host's c-type system).

     get_gdbarch(): Implement the set/get functions (probably using
     the macro's as shortcuts).

     */

  int bits_big_endian;
  int short_bit;
  int int_bit;
  int long_bit;
  int long_long_bit;
  int long_long_align_bit;
  int half_bit;
  const struct floatformat ** half_format;
  int float_bit;
  const struct floatformat ** float_format;
  int double_bit;
  const struct floatformat ** double_format;
  int long_double_bit;
  const struct floatformat ** long_double_format;
  int ptr_bit;
  int addr_bit;
  int dwarf2_addr_size;
  int char_signed;
  gdbarch_read_pc_ftype *read_pc;
  gdbarch_write_pc_ftype *write_pc;
  gdbarch_virtual_frame_pointer_ftype *virtual_frame_pointer;
  gdbarch_pseudo_register_read_ftype *pseudo_register_read;
  gdbarch_pseudo_register_read_value_ftype *pseudo_register_read_value;
  gdbarch_pseudo_register_write_ftype *pseudo_register_write;
  int num_regs;
  int num_pseudo_regs;
  gdbarch_ax_pseudo_register_collect_ftype *ax_pseudo_register_collect;
  gdbarch_ax_pseudo_register_push_stack_ftype *ax_pseudo_register_push_stack;
  int sp_regnum;
  int pc_regnum;
  int ps_regnum;
  int fp0_regnum;
  gdbarch_stab_reg_to_regnum_ftype *stab_reg_to_regnum;
  gdbarch_ecoff_reg_to_regnum_ftype *ecoff_reg_to_regnum;
  gdbarch_sdb_reg_to_regnum_ftype *sdb_reg_to_regnum;
  gdbarch_dwarf2_reg_to_regnum_ftype *dwarf2_reg_to_regnum;
  gdbarch_register_name_ftype *register_name;
  gdbarch_register_type_ftype *register_type;
  gdbarch_dummy_id_ftype *dummy_id;
  int deprecated_fp_regnum;
  gdbarch_push_dummy_call_ftype *push_dummy_call;
  int call_dummy_location;
  gdbarch_push_dummy_code_ftype *push_dummy_code;
  gdbarch_print_registers_info_ftype *print_registers_info;
  gdbarch_print_float_info_ftype *print_float_info;
  gdbarch_print_vector_info_ftype *print_vector_info;
  gdbarch_register_sim_regno_ftype *register_sim_regno;
  gdbarch_cannot_fetch_register_ftype *cannot_fetch_register;
  gdbarch_cannot_store_register_ftype *cannot_store_register;
  gdbarch_get_longjmp_target_ftype *get_longjmp_target;
  int believe_pcc_promotion;
  gdbarch_convert_register_p_ftype *convert_register_p;
  gdbarch_register_to_value_ftype *register_to_value;
  gdbarch_value_to_register_ftype *value_to_register;
  gdbarch_value_from_register_ftype *value_from_register;
  gdbarch_pointer_to_address_ftype *pointer_to_address;
  gdbarch_address_to_pointer_ftype *address_to_pointer;
  gdbarch_integer_to_address_ftype *integer_to_address;
  gdbarch_return_value_ftype *return_value;
  gdbarch_return_in_first_hidden_param_p_ftype *return_in_first_hidden_param_p;
  gdbarch_skip_prologue_ftype *skip_prologue;
  gdbarch_skip_main_prologue_ftype *skip_main_prologue;
  gdbarch_inner_than_ftype *inner_than;
  gdbarch_breakpoint_from_pc_ftype *breakpoint_from_pc;
  gdbarch_remote_breakpoint_from_pc_ftype *remote_breakpoint_from_pc;
  gdbarch_adjust_breakpoint_address_ftype *adjust_breakpoint_address;
  gdbarch_memory_insert_breakpoint_ftype *memory_insert_breakpoint;
  gdbarch_memory_remove_breakpoint_ftype *memory_remove_breakpoint;
  CORE_ADDR decr_pc_after_break;
  CORE_ADDR deprecated_function_start_offset;
  gdbarch_remote_register_number_ftype *remote_register_number;
  gdbarch_fetch_tls_load_module_address_ftype *fetch_tls_load_module_address;
  CORE_ADDR frame_args_skip;
  gdbarch_unwind_pc_ftype *unwind_pc;
  gdbarch_unwind_sp_ftype *unwind_sp;
  gdbarch_frame_num_args_ftype *frame_num_args;
  gdbarch_frame_align_ftype *frame_align;
  gdbarch_stabs_argument_has_addr_ftype *stabs_argument_has_addr;
  int frame_red_zone_size;
  gdbarch_convert_from_func_ptr_addr_ftype *convert_from_func_ptr_addr;
  gdbarch_addr_bits_remove_ftype *addr_bits_remove;
  gdbarch_software_single_step_ftype *software_single_step;
  gdbarch_single_step_through_delay_ftype *single_step_through_delay;
  gdbarch_print_insn_ftype *print_insn;
  gdbarch_skip_trampoline_code_ftype *skip_trampoline_code;
  gdbarch_skip_solib_resolver_ftype *skip_solib_resolver;
  gdbarch_in_solib_return_trampoline_ftype *in_solib_return_trampoline;
  gdbarch_in_function_epilogue_p_ftype *in_function_epilogue_p;
  gdbarch_elf_make_msymbol_special_ftype *elf_make_msymbol_special;
  gdbarch_coff_make_msymbol_special_ftype *coff_make_msymbol_special;
  int cannot_step_breakpoint;
  int have_nonsteppable_watchpoint;
  gdbarch_address_class_type_flags_ftype *address_class_type_flags;
  gdbarch_address_class_type_flags_to_name_ftype *address_class_type_flags_to_name;
  gdbarch_address_class_name_to_type_flags_ftype *address_class_name_to_type_flags;
  gdbarch_register_reggroup_p_ftype *register_reggroup_p;
  gdbarch_fetch_pointer_argument_ftype *fetch_pointer_argument;
  gdbarch_regset_from_core_section_ftype *regset_from_core_section;
  struct core_regset_section * core_regset_sections;
  gdbarch_make_corefile_notes_ftype *make_corefile_notes;
  gdbarch_elfcore_write_linux_prpsinfo_ftype *elfcore_write_linux_prpsinfo;
  gdbarch_find_memory_regions_ftype *find_memory_regions;
  gdbarch_core_xfer_shared_libraries_ftype *core_xfer_shared_libraries;
  gdbarch_core_xfer_shared_libraries_aix_ftype *core_xfer_shared_libraries_aix;
  gdbarch_core_pid_to_str_ftype *core_pid_to_str;
  const char * gcore_bfd_target;
  int vtable_function_descriptors;
  int vbit_in_delta;
  gdbarch_skip_permanent_breakpoint_ftype *skip_permanent_breakpoint;
  ULONGEST max_insn_length;
  gdbarch_displaced_step_copy_insn_ftype *displaced_step_copy_insn;
  gdbarch_displaced_step_hw_singlestep_ftype *displaced_step_hw_singlestep;
  gdbarch_displaced_step_fixup_ftype *displaced_step_fixup;
  gdbarch_displaced_step_free_closure_ftype *displaced_step_free_closure;
  gdbarch_displaced_step_location_ftype *displaced_step_location;
  gdbarch_relocate_instruction_ftype *relocate_instruction;
  gdbarch_overlay_update_ftype *overlay_update;
  gdbarch_core_read_description_ftype *core_read_description;
  gdbarch_static_transform_name_ftype *static_transform_name;
  int sofun_address_maybe_missing;
  gdbarch_process_record_ftype *process_record;
  gdbarch_process_record_signal_ftype *process_record_signal;
  gdbarch_gdb_signal_from_target_ftype *gdb_signal_from_target;
  gdbarch_gdb_signal_to_target_ftype *gdb_signal_to_target;
  gdbarch_get_siginfo_type_ftype *get_siginfo_type;
  gdbarch_record_special_symbol_ftype *record_special_symbol;
  gdbarch_get_syscall_number_ftype *get_syscall_number;
  const char * stap_integer_prefix;
  const char * stap_integer_suffix;
  const char * stap_register_prefix;
  const char * stap_register_suffix;
  const char * stap_register_indirection_prefix;
  const char * stap_register_indirection_suffix;
  const char * stap_gdb_register_prefix;
  const char * stap_gdb_register_suffix;
  gdbarch_stap_is_single_operand_ftype *stap_is_single_operand;
  gdbarch_stap_parse_special_token_ftype *stap_parse_special_token;
  int has_global_solist;
  int has_global_breakpoints;
  gdbarch_has_shared_address_space_ftype *has_shared_address_space;
  gdbarch_fast_tracepoint_valid_at_ftype *fast_tracepoint_valid_at;
  gdbarch_auto_charset_ftype *auto_charset;
  gdbarch_auto_wide_charset_ftype *auto_wide_charset;
  const char * solib_symbols_extension;
  int has_dos_based_file_system;
  gdbarch_gen_return_address_ftype *gen_return_address;
  gdbarch_info_proc_ftype *info_proc;
  gdbarch_core_info_proc_ftype *core_info_proc;
  gdbarch_iterate_over_objfiles_in_search_order_ftype *iterate_over_objfiles_in_search_order;
  struct ravenscar_arch_ops * ravenscar_ops;
};


/* The default architecture uses host values (for want of a better
   choice).  */

extern const struct bfd_arch_info bfd_default_arch_struct;

struct gdbarch startup_gdbarch =
{
  1, /* Always initialized.  */
  NULL, /* The obstack.  */
  /* basic architecture information.  */
  &bfd_default_arch_struct,  /* bfd_arch_info */
  BFD_ENDIAN_BIG,  /* byte_order */
  BFD_ENDIAN_BIG,  /* byte_order_for_code */
  GDB_OSABI_UNKNOWN,  /* osabi */
  0,  /* target_desc */
  /* target specific vector and its dump routine.  */
  NULL, NULL,
  /*per-architecture data-pointers.  */
  0, NULL,
  /* Multi-arch values */
  1,  /* bits_big_endian */
  8 * sizeof (short),  /* short_bit */
  8 * sizeof (int),  /* int_bit */
  8 * sizeof (long),  /* long_bit */
  8 * sizeof (LONGEST),  /* long_long_bit */
  8 * sizeof (LONGEST),  /* long_long_align_bit */
  16,  /* half_bit */
  0,  /* half_format */
  8 * sizeof (float),  /* float_bit */
  0,  /* float_format */
  8 * sizeof (double),  /* double_bit */
  0,  /* double_format */
  8 * sizeof (long double),  /* long_double_bit */
  0,  /* long_double_format */
  8 * sizeof (void*),  /* ptr_bit */
  8 * sizeof (void*),  /* addr_bit */
  sizeof (void*),  /* dwarf2_addr_size */
  1,  /* char_signed */
  0,  /* read_pc */
  0,  /* write_pc */
  legacy_virtual_frame_pointer,  /* virtual_frame_pointer */
  0,  /* pseudo_register_read */
  0,  /* pseudo_register_read_value */
  0,  /* pseudo_register_write */
  0,  /* num_regs */
  0,  /* num_pseudo_regs */
  0,  /* ax_pseudo_register_collect */
  0,  /* ax_pseudo_register_push_stack */
  -1,  /* sp_regnum */
  -1,  /* pc_regnum */
  -1,  /* ps_regnum */
  0,  /* fp0_regnum */
  no_op_reg_to_regnum,  /* stab_reg_to_regnum */
  no_op_reg_to_regnum,  /* ecoff_reg_to_regnum */
  no_op_reg_to_regnum,  /* sdb_reg_to_regnum */
  no_op_reg_to_regnum,  /* dwarf2_reg_to_regnum */
  0,  /* register_name */
  0,  /* register_type */
  0,  /* dummy_id */
  -1,  /* deprecated_fp_regnum */
  0,  /* push_dummy_call */
  0,  /* call_dummy_location */
  0,  /* push_dummy_code */
  default_print_registers_info,  /* print_registers_info */
  0,  /* print_float_info */
  0,  /* print_vector_info */
  legacy_register_sim_regno,  /* register_sim_regno */
  cannot_register_not,  /* cannot_fetch_register */
  cannot_register_not,  /* cannot_store_register */
  0,  /* get_longjmp_target */
  0,  /* believe_pcc_promotion */
  generic_convert_register_p,  /* convert_register_p */
  0,  /* register_to_value */
  0,  /* value_to_register */
  0,  /* value_from_register */
  unsigned_pointer_to_address,  /* pointer_to_address */
  unsigned_address_to_pointer,  /* address_to_pointer */
  0,  /* integer_to_address */
  0,  /* return_value */
  default_return_in_first_hidden_param_p,  /* return_in_first_hidden_param_p */
  0,  /* skip_prologue */
  0,  /* skip_main_prologue */
  0,  /* inner_than */
  0,  /* breakpoint_from_pc */
  default_remote_breakpoint_from_pc,  /* remote_breakpoint_from_pc */
  0,  /* adjust_breakpoint_address */
  default_memory_insert_breakpoint,  /* memory_insert_breakpoint */
  default_memory_remove_breakpoint,  /* memory_remove_breakpoint */
  0,  /* decr_pc_after_break */
  0,  /* deprecated_function_start_offset */
  default_remote_register_number,  /* remote_register_number */
  0,  /* fetch_tls_load_module_address */
  0,  /* frame_args_skip */
  0,  /* unwind_pc */
  0,  /* unwind_sp */
  0,  /* frame_num_args */
  0,  /* frame_align */
  default_stabs_argument_has_addr,  /* stabs_argument_has_addr */
  0,  /* frame_red_zone_size */
  convert_from_func_ptr_addr_identity,  /* convert_from_func_ptr_addr */
  core_addr_identity,  /* addr_bits_remove */
  0,  /* software_single_step */
  0,  /* single_step_through_delay */
  0,  /* print_insn */
  0,  /* skip_trampoline_code */
  generic_skip_solib_resolver,  /* skip_solib_resolver */
  generic_in_solib_return_trampoline,  /* in_solib_return_trampoline */
  generic_in_function_epilogue_p,  /* in_function_epilogue_p */
  0,  /* elf_make_msymbol_special */
  0,  /* coff_make_msymbol_special */
  0,  /* cannot_step_breakpoint */
  0,  /* have_nonsteppable_watchpoint */
  0,  /* address_class_type_flags */
  0,  /* address_class_type_flags_to_name */
  0,  /* address_class_name_to_type_flags */
  default_register_reggroup_p,  /* register_reggroup_p */
  0,  /* fetch_pointer_argument */
  0,  /* regset_from_core_section */
  0,  /* core_regset_sections */
  0,  /* make_corefile_notes */
  0,  /* elfcore_write_linux_prpsinfo */
  0,  /* find_memory_regions */
  0,  /* core_xfer_shared_libraries */
  0,  /* core_xfer_shared_libraries_aix */
  0,  /* core_pid_to_str */
  0,  /* gcore_bfd_target */
  0,  /* vtable_function_descriptors */
  0,  /* vbit_in_delta */
  0,  /* skip_permanent_breakpoint */
  0,  /* max_insn_length */
  0,  /* displaced_step_copy_insn */
  default_displaced_step_hw_singlestep,  /* displaced_step_hw_singlestep */
  0,  /* displaced_step_fixup */
  NULL,  /* displaced_step_free_closure */
  NULL,  /* displaced_step_location */
  0,  /* relocate_instruction */
  0,  /* overlay_update */
  0,  /* core_read_description */
  0,  /* static_transform_name */
  0,  /* sofun_address_maybe_missing */
  0,  /* process_record */
  0,  /* process_record_signal */
  0,  /* gdb_signal_from_target */
  0,  /* gdb_signal_to_target */
  0,  /* get_siginfo_type */
  0,  /* record_special_symbol */
  0,  /* get_syscall_number */
  0,  /* stap_integer_prefix */
  0,  /* stap_integer_suffix */
  0,  /* stap_register_prefix */
  0,  /* stap_register_suffix */
  0,  /* stap_register_indirection_prefix */
  0,  /* stap_register_indirection_suffix */
  0,  /* stap_gdb_register_prefix */
  0,  /* stap_gdb_register_suffix */
  0,  /* stap_is_single_operand */
  0,  /* stap_parse_special_token */
  0,  /* has_global_solist */
  0,  /* has_global_breakpoints */
  default_has_shared_address_space,  /* has_shared_address_space */
  default_fast_tracepoint_valid_at,  /* fast_tracepoint_valid_at */
  default_auto_charset,  /* auto_charset */
  default_auto_wide_charset,  /* auto_wide_charset */
  0,  /* solib_symbols_extension */
  0,  /* has_dos_based_file_system */
  default_gen_return_address,  /* gen_return_address */
  0,  /* info_proc */
  0,  /* core_info_proc */
  default_iterate_over_objfiles_in_search_order,  /* iterate_over_objfiles_in_search_order */
  NULL,  /* ravenscar_ops */
  /* startup_gdbarch() */
};


/* Create a new ``struct gdbarch'' based on information provided by
   ``struct gdbarch_info''.  */

struct gdbarch *
gdbarch_alloc (const struct gdbarch_info *info,
               struct gdbarch_tdep *tdep)
{
  struct gdbarch *gdbarch;

  /* Create an obstack for allocating all the per-architecture memory,
     then use that to allocate the architecture vector.  */
  struct obstack *obstack = XMALLOC (struct obstack);
  obstack_init (obstack);
  gdbarch = obstack_alloc (obstack, sizeof (*gdbarch));
  memset (gdbarch, 0, sizeof (*gdbarch));
  gdbarch->obstack = obstack;

  alloc_gdbarch_data (gdbarch);

  gdbarch->tdep = tdep;

  gdbarch->bfd_arch_info = info->bfd_arch_info;
  gdbarch->byte_order = info->byte_order;
  gdbarch->byte_order_for_code = info->byte_order_for_code;
  gdbarch->osabi = info->osabi;
  gdbarch->target_desc = info->target_desc;

  /* Force the explicit initialization of these.  */
  gdbarch->bits_big_endian = (gdbarch->byte_order == BFD_ENDIAN_BIG);
  gdbarch->short_bit = 2*TARGET_CHAR_BIT;
  gdbarch->int_bit = 4*TARGET_CHAR_BIT;
  gdbarch->long_bit = 4*TARGET_CHAR_BIT;
  gdbarch->long_long_bit = 2*gdbarch->long_bit;
  gdbarch->long_long_align_bit = 2*gdbarch->long_bit;
  gdbarch->half_bit = 2*TARGET_CHAR_BIT;
  gdbarch->float_bit = 4*TARGET_CHAR_BIT;
  gdbarch->double_bit = 8*TARGET_CHAR_BIT;
  gdbarch->long_double_bit = 8*TARGET_CHAR_BIT;
  gdbarch->ptr_bit = gdbarch->int_bit;
  gdbarch->char_signed = -1;
  gdbarch->virtual_frame_pointer = legacy_virtual_frame_pointer;
  gdbarch->num_regs = -1;
  gdbarch->sp_regnum = -1;
  gdbarch->pc_regnum = -1;
  gdbarch->ps_regnum = -1;
  gdbarch->fp0_regnum = -1;
  gdbarch->stab_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->ecoff_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->sdb_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->dwarf2_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->deprecated_fp_regnum = -1;
  gdbarch->call_dummy_location = AT_ENTRY_POINT;
  gdbarch->print_registers_info = default_print_registers_info;
  gdbarch->register_sim_regno = legacy_register_sim_regno;
  gdbarch->cannot_fetch_register = cannot_register_not;
  gdbarch->cannot_store_register = cannot_register_not;
  gdbarch->convert_register_p = generic_convert_register_p;
  gdbarch->value_from_register = default_value_from_register;
  gdbarch->pointer_to_address = unsigned_pointer_to_address;
  gdbarch->address_to_pointer = unsigned_address_to_pointer;
  gdbarch->return_in_first_hidden_param_p = default_return_in_first_hidden_param_p;
  gdbarch->remote_breakpoint_from_pc = default_remote_breakpoint_from_pc;
  gdbarch->memory_insert_breakpoint = default_memory_insert_breakpoint;
  gdbarch->memory_remove_breakpoint = default_memory_remove_breakpoint;
  gdbarch->remote_register_number = default_remote_register_number;
  gdbarch->stabs_argument_has_addr = default_stabs_argument_has_addr;
  gdbarch->convert_from_func_ptr_addr = convert_from_func_ptr_addr_identity;
  gdbarch->addr_bits_remove = core_addr_identity;
  gdbarch->skip_trampoline_code = generic_skip_trampoline_code;
  gdbarch->skip_solib_resolver = generic_skip_solib_resolver;
  gdbarch->in_solib_return_trampoline = generic_in_solib_return_trampoline;
  gdbarch->in_function_epilogue_p = generic_in_function_epilogue_p;
  gdbarch->elf_make_msymbol_special = default_elf_make_msymbol_special;
  gdbarch->coff_make_msymbol_special = default_coff_make_msymbol_special;
  gdbarch->register_reggroup_p = default_register_reggroup_p;
  gdbarch->displaced_step_hw_singlestep = default_displaced_step_hw_singlestep;
  gdbarch->displaced_step_fixup = NULL;
  gdbarch->displaced_step_free_closure = NULL;
  gdbarch->displaced_step_location = NULL;
  gdbarch->relocate_instruction = NULL;
  gdbarch->has_shared_address_space = default_has_shared_address_space;
  gdbarch->fast_tracepoint_valid_at = default_fast_tracepoint_valid_at;
  gdbarch->auto_charset = default_auto_charset;
  gdbarch->auto_wide_charset = default_auto_wide_charset;
  gdbarch->gen_return_address = default_gen_return_address;
  gdbarch->iterate_over_objfiles_in_search_order = default_iterate_over_objfiles_in_search_order;
  gdbarch->ravenscar_ops = NULL;
  /* gdbarch_alloc() */

  return gdbarch;
}


/* Allocate extra space using the per-architecture obstack.  */

void *
gdbarch_obstack_zalloc (struct gdbarch *arch, long size)
{
  void *data = obstack_alloc (arch->obstack, size);

  memset (data, 0, size);
  return data;
}


/* Free a gdbarch struct.  This should never happen in normal
   operation --- once you've created a gdbarch, you keep it around.
   However, if an architecture's init function encounters an error
   building the structure, it may need to clean up a partially
   constructed gdbarch.  */

void
gdbarch_free (struct gdbarch *arch)
{
  struct obstack *obstack;

  gdb_assert (arch != NULL);
  gdb_assert (!arch->initialized_p);
  obstack = arch->obstack;
  obstack_free (obstack, 0); /* Includes the ARCH.  */
  xfree (obstack);
}


/* Ensure that all values in a GDBARCH are reasonable.  */

static void
verify_gdbarch (struct gdbarch *gdbarch)
{
  struct ui_file *log;
  struct cleanup *cleanups;
  long length;
  char *buf;

  log = mem_fileopen ();
  cleanups = make_cleanup_ui_file_delete (log);
  /* fundamental */
  if (gdbarch->byte_order == BFD_ENDIAN_UNKNOWN)
    fprintf_unfiltered (log, "\n\tbyte-order");
  if (gdbarch->bfd_arch_info == NULL)
    fprintf_unfiltered (log, "\n\tbfd_arch_info");
  /* Check those that need to be defined for the given multi-arch level.  */
  /* Skip verify of bits_big_endian, invalid_p == 0 */
  /* Skip verify of short_bit, invalid_p == 0 */
  /* Skip verify of int_bit, invalid_p == 0 */
  /* Skip verify of long_bit, invalid_p == 0 */
  /* Skip verify of long_long_bit, invalid_p == 0 */
  /* Skip verify of long_long_align_bit, invalid_p == 0 */
  /* Skip verify of half_bit, invalid_p == 0 */
  if (gdbarch->half_format == 0)
    gdbarch->half_format = floatformats_ieee_half;
  /* Skip verify of float_bit, invalid_p == 0 */
  if (gdbarch->float_format == 0)
    gdbarch->float_format = floatformats_ieee_single;
  /* Skip verify of double_bit, invalid_p == 0 */
  if (gdbarch->double_format == 0)
    gdbarch->double_format = floatformats_ieee_double;
  /* Skip verify of long_double_bit, invalid_p == 0 */
  if (gdbarch->long_double_format == 0)
    gdbarch->long_double_format = floatformats_ieee_double;
  /* Skip verify of ptr_bit, invalid_p == 0 */
  if (gdbarch->addr_bit == 0)
    gdbarch->addr_bit = gdbarch_ptr_bit (gdbarch);
  if (gdbarch->dwarf2_addr_size == 0)
    gdbarch->dwarf2_addr_size = gdbarch_ptr_bit (gdbarch) / TARGET_CHAR_BIT;
  if (gdbarch->char_signed == -1)
    gdbarch->char_signed = 1;
  /* Skip verify of read_pc, has predicate.  */
  /* Skip verify of write_pc, has predicate.  */
  /* Skip verify of virtual_frame_pointer, invalid_p == 0 */
  /* Skip verify of pseudo_register_read, has predicate.  */
  /* Skip verify of pseudo_register_read_value, has predicate.  */
  /* Skip verify of pseudo_register_write, has predicate.  */
  if (gdbarch->num_regs == -1)
    fprintf_unfiltered (log, "\n\tnum_regs");
  /* Skip verify of num_pseudo_regs, invalid_p == 0 */
  /* Skip verify of ax_pseudo_register_collect, has predicate.  */
  /* Skip verify of ax_pseudo_register_push_stack, has predicate.  */
  /* Skip verify of sp_regnum, invalid_p == 0 */
  /* Skip verify of pc_regnum, invalid_p == 0 */
  /* Skip verify of ps_regnum, invalid_p == 0 */
  /* Skip verify of fp0_regnum, invalid_p == 0 */
  /* Skip verify of stab_reg_to_regnum, invalid_p == 0 */
  /* Skip verify of ecoff_reg_to_regnum, invalid_p == 0 */
  /* Skip verify of sdb_reg_to_regnum, invalid_p == 0 */
  /* Skip verify of dwarf2_reg_to_regnum, invalid_p == 0 */
  if (gdbarch->register_name == 0)
    fprintf_unfiltered (log, "\n\tregister_name");
  /* Skip verify of register_type, has predicate.  */
  /* Skip verify of dummy_id, has predicate.  */
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
  /* Skip verify of push_dummy_call, has predicate.  */
  /* Skip verify of call_dummy_location, invalid_p == 0 */
  /* Skip verify of push_dummy_code, has predicate.  */
  /* Skip verify of print_registers_info, invalid_p == 0 */
  /* Skip verify of print_float_info, has predicate.  */
  /* Skip verify of print_vector_info, has predicate.  */
  /* Skip verify of register_sim_regno, invalid_p == 0 */
  /* Skip verify of cannot_fetch_register, invalid_p == 0 */
  /* Skip verify of cannot_store_register, invalid_p == 0 */
  /* Skip verify of get_longjmp_target, has predicate.  */
  /* Skip verify of convert_register_p, invalid_p == 0 */
  /* Skip verify of value_from_register, invalid_p == 0 */
  /* Skip verify of pointer_to_address, invalid_p == 0 */
  /* Skip verify of address_to_pointer, invalid_p == 0 */
  /* Skip verify of integer_to_address, has predicate.  */
  /* Skip verify of return_value, has predicate.  */
  /* Skip verify of return_in_first_hidden_param_p, invalid_p == 0 */
  if (gdbarch->skip_prologue == 0)
    fprintf_unfiltered (log, "\n\tskip_prologue");
  /* Skip verify of skip_main_prologue, has predicate.  */
  if (gdbarch->inner_than == 0)
    fprintf_unfiltered (log, "\n\tinner_than");
  if (gdbarch->breakpoint_from_pc == 0)
    fprintf_unfiltered (log, "\n\tbreakpoint_from_pc");
  /* Skip verify of remote_breakpoint_from_pc, invalid_p == 0 */
  /* Skip verify of adjust_breakpoint_address, has predicate.  */
  /* Skip verify of memory_insert_breakpoint, invalid_p == 0 */
  /* Skip verify of memory_remove_breakpoint, invalid_p == 0 */
  /* Skip verify of decr_pc_after_break, invalid_p == 0 */
  /* Skip verify of deprecated_function_start_offset, invalid_p == 0 */
  /* Skip verify of remote_register_number, invalid_p == 0 */
  /* Skip verify of fetch_tls_load_module_address, has predicate.  */
  /* Skip verify of frame_args_skip, invalid_p == 0 */
  /* Skip verify of unwind_pc, has predicate.  */
  /* Skip verify of unwind_sp, has predicate.  */
  /* Skip verify of frame_num_args, has predicate.  */
  /* Skip verify of frame_align, has predicate.  */
  /* Skip verify of stabs_argument_has_addr, invalid_p == 0 */
  /* Skip verify of convert_from_func_ptr_addr, invalid_p == 0 */
  /* Skip verify of addr_bits_remove, invalid_p == 0 */
  /* Skip verify of software_single_step, has predicate.  */
  /* Skip verify of single_step_through_delay, has predicate.  */
  if (gdbarch->print_insn == 0)
    fprintf_unfiltered (log, "\n\tprint_insn");
  /* Skip verify of skip_trampoline_code, invalid_p == 0 */
  /* Skip verify of skip_solib_resolver, invalid_p == 0 */
  /* Skip verify of in_solib_return_trampoline, invalid_p == 0 */
  /* Skip verify of in_function_epilogue_p, invalid_p == 0 */
  /* Skip verify of elf_make_msymbol_special, invalid_p == 0 */
  /* Skip verify of coff_make_msymbol_special, invalid_p == 0 */
  /* Skip verify of cannot_step_breakpoint, invalid_p == 0 */
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
  /* Skip verify of address_class_type_flags, has predicate.  */
  /* Skip verify of address_class_type_flags_to_name, has predicate.  */
  /* Skip verify of address_class_name_to_type_flags, has predicate.  */
  /* Skip verify of register_reggroup_p, invalid_p == 0 */
  /* Skip verify of fetch_pointer_argument, has predicate.  */
  /* Skip verify of regset_from_core_section, has predicate.  */
  /* Skip verify of make_corefile_notes, has predicate.  */
  /* Skip verify of elfcore_write_linux_prpsinfo, has predicate.  */
  /* Skip verify of find_memory_regions, has predicate.  */
  /* Skip verify of core_xfer_shared_libraries, has predicate.  */
  /* Skip verify of core_xfer_shared_libraries_aix, has predicate.  */
  /* Skip verify of core_pid_to_str, has predicate.  */
  /* Skip verify of gcore_bfd_target, has predicate.  */
  /* Skip verify of vtable_function_descriptors, invalid_p == 0 */
  /* Skip verify of vbit_in_delta, invalid_p == 0 */
  /* Skip verify of skip_permanent_breakpoint, has predicate.  */
  /* Skip verify of max_insn_length, has predicate.  */
  /* Skip verify of displaced_step_copy_insn, has predicate.  */
  /* Skip verify of displaced_step_hw_singlestep, invalid_p == 0 */
  /* Skip verify of displaced_step_fixup, has predicate.  */
  if ((! gdbarch->displaced_step_free_closure) != (! gdbarch->displaced_step_copy_insn))
    fprintf_unfiltered (log, "\n\tdisplaced_step_free_closure");
  if ((! gdbarch->displaced_step_location) != (! gdbarch->displaced_step_copy_insn))
    fprintf_unfiltered (log, "\n\tdisplaced_step_location");
  /* Skip verify of relocate_instruction, has predicate.  */
  /* Skip verify of overlay_update, has predicate.  */
  /* Skip verify of core_read_description, has predicate.  */
  /* Skip verify of static_transform_name, has predicate.  */
  /* Skip verify of sofun_address_maybe_missing, invalid_p == 0 */
  /* Skip verify of process_record, has predicate.  */
  /* Skip verify of process_record_signal, has predicate.  */
  /* Skip verify of gdb_signal_from_target, has predicate.  */
  /* Skip verify of gdb_signal_to_target, has predicate.  */
  /* Skip verify of get_siginfo_type, has predicate.  */
  /* Skip verify of record_special_symbol, has predicate.  */
  /* Skip verify of get_syscall_number, has predicate.  */
  /* Skip verify of stap_integer_prefix, invalid_p == 0 */
  /* Skip verify of stap_integer_suffix, invalid_p == 0 */
  /* Skip verify of stap_register_prefix, invalid_p == 0 */
  /* Skip verify of stap_register_suffix, invalid_p == 0 */
  /* Skip verify of stap_register_indirection_prefix, invalid_p == 0 */
  /* Skip verify of stap_register_indirection_suffix, invalid_p == 0 */
  /* Skip verify of stap_gdb_register_prefix, invalid_p == 0 */
  /* Skip verify of stap_gdb_register_suffix, invalid_p == 0 */
  /* Skip verify of stap_is_single_operand, has predicate.  */
  /* Skip verify of stap_parse_special_token, has predicate.  */
  /* Skip verify of has_global_solist, invalid_p == 0 */
  /* Skip verify of has_global_breakpoints, invalid_p == 0 */
  /* Skip verify of has_shared_address_space, invalid_p == 0 */
  /* Skip verify of fast_tracepoint_valid_at, invalid_p == 0 */
  /* Skip verify of auto_charset, invalid_p == 0 */
  /* Skip verify of auto_wide_charset, invalid_p == 0 */
  /* Skip verify of has_dos_based_file_system, invalid_p == 0 */
  /* Skip verify of gen_return_address, invalid_p == 0 */
  /* Skip verify of info_proc, has predicate.  */
  /* Skip verify of core_info_proc, has predicate.  */
  /* Skip verify of iterate_over_objfiles_in_search_order, invalid_p == 0 */
  /* Skip verify of ravenscar_ops, invalid_p == 0 */
  buf = ui_file_xstrdup (log, &length);
  make_cleanup (xfree, buf);
  if (length > 0)
    internal_error (__FILE__, __LINE__,
                    _("verify_gdbarch: the following are invalid ...%s"),
                    buf);
  do_cleanups (cleanups);
}


/* Print out the details of the current architecture.  */

void
gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)
{
  const char *gdb_nm_file = "<not-defined>";

#if defined (GDB_NM_FILE)
  gdb_nm_file = GDB_NM_FILE;
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: GDB_NM_FILE = %s\n",
                      gdb_nm_file);
  fprintf_unfiltered (file,
                      "gdbarch_dump: addr_bit = %s\n",
                      plongest (gdbarch->addr_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: addr_bits_remove = <%s>\n",
                      host_address_to_string (gdbarch->addr_bits_remove));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_name_to_type_flags_p() = %d\n",
                      gdbarch_address_class_name_to_type_flags_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_class_name_to_type_flags = <%s>\n",
                      host_address_to_string (gdbarch->address_class_name_to_type_flags));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_type_flags_p() = %d\n",
                      gdbarch_address_class_type_flags_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_class_type_flags = <%s>\n",
                      host_address_to_string (gdbarch->address_class_type_flags));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_type_flags_to_name_p() = %d\n",
                      gdbarch_address_class_type_flags_to_name_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_class_type_flags_to_name = <%s>\n",
                      host_address_to_string (gdbarch->address_class_type_flags_to_name));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_to_pointer = <%s>\n",
                      host_address_to_string (gdbarch->address_to_pointer));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_adjust_breakpoint_address_p() = %d\n",
                      gdbarch_adjust_breakpoint_address_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: adjust_breakpoint_address = <%s>\n",
                      host_address_to_string (gdbarch->adjust_breakpoint_address));
  fprintf_unfiltered (file,
                      "gdbarch_dump: auto_charset = <%s>\n",
                      host_address_to_string (gdbarch->auto_charset));
  fprintf_unfiltered (file,
                      "gdbarch_dump: auto_wide_charset = <%s>\n",
                      host_address_to_string (gdbarch->auto_wide_charset));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_ax_pseudo_register_collect_p() = %d\n",
                      gdbarch_ax_pseudo_register_collect_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ax_pseudo_register_collect = <%s>\n",
                      host_address_to_string (gdbarch->ax_pseudo_register_collect));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_ax_pseudo_register_push_stack_p() = %d\n",
                      gdbarch_ax_pseudo_register_push_stack_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ax_pseudo_register_push_stack = <%s>\n",
                      host_address_to_string (gdbarch->ax_pseudo_register_push_stack));
  fprintf_unfiltered (file,
                      "gdbarch_dump: believe_pcc_promotion = %s\n",
                      plongest (gdbarch->believe_pcc_promotion));
  fprintf_unfiltered (file,
                      "gdbarch_dump: bfd_arch_info = %s\n",
                      gdbarch_bfd_arch_info (gdbarch)->printable_name);
  fprintf_unfiltered (file,
                      "gdbarch_dump: bits_big_endian = %s\n",
                      plongest (gdbarch->bits_big_endian));
  fprintf_unfiltered (file,
                      "gdbarch_dump: breakpoint_from_pc = <%s>\n",
                      host_address_to_string (gdbarch->breakpoint_from_pc));
  fprintf_unfiltered (file,
                      "gdbarch_dump: byte_order = %s\n",
                      plongest (gdbarch->byte_order));
  fprintf_unfiltered (file,
                      "gdbarch_dump: byte_order_for_code = %s\n",
                      plongest (gdbarch->byte_order_for_code));
  fprintf_unfiltered (file,
                      "gdbarch_dump: call_dummy_location = %s\n",
                      plongest (gdbarch->call_dummy_location));
  fprintf_unfiltered (file,
                      "gdbarch_dump: cannot_fetch_register = <%s>\n",
                      host_address_to_string (gdbarch->cannot_fetch_register));
  fprintf_unfiltered (file,
                      "gdbarch_dump: cannot_step_breakpoint = %s\n",
                      plongest (gdbarch->cannot_step_breakpoint));
  fprintf_unfiltered (file,
                      "gdbarch_dump: cannot_store_register = <%s>\n",
                      host_address_to_string (gdbarch->cannot_store_register));
  fprintf_unfiltered (file,
                      "gdbarch_dump: char_signed = %s\n",
                      plongest (gdbarch->char_signed));
  fprintf_unfiltered (file,
                      "gdbarch_dump: coff_make_msymbol_special = <%s>\n",
                      host_address_to_string (gdbarch->coff_make_msymbol_special));
  fprintf_unfiltered (file,
                      "gdbarch_dump: convert_from_func_ptr_addr = <%s>\n",
                      host_address_to_string (gdbarch->convert_from_func_ptr_addr));
  fprintf_unfiltered (file,
                      "gdbarch_dump: convert_register_p = <%s>\n",
                      host_address_to_string (gdbarch->convert_register_p));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_core_info_proc_p() = %d\n",
                      gdbarch_core_info_proc_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: core_info_proc = <%s>\n",
                      host_address_to_string (gdbarch->core_info_proc));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_core_pid_to_str_p() = %d\n",
                      gdbarch_core_pid_to_str_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: core_pid_to_str = <%s>\n",
                      host_address_to_string (gdbarch->core_pid_to_str));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_core_read_description_p() = %d\n",
                      gdbarch_core_read_description_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: core_read_description = <%s>\n",
                      host_address_to_string (gdbarch->core_read_description));
  fprintf_unfiltered (file,
                      "gdbarch_dump: core_regset_sections = %s\n",
                      host_address_to_string (gdbarch->core_regset_sections));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_core_xfer_shared_libraries_p() = %d\n",
                      gdbarch_core_xfer_shared_libraries_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: core_xfer_shared_libraries = <%s>\n",
                      host_address_to_string (gdbarch->core_xfer_shared_libraries));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_core_xfer_shared_libraries_aix_p() = %d\n",
                      gdbarch_core_xfer_shared_libraries_aix_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: core_xfer_shared_libraries_aix = <%s>\n",
                      host_address_to_string (gdbarch->core_xfer_shared_libraries_aix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: decr_pc_after_break = %s\n",
                      core_addr_to_string_nz (gdbarch->decr_pc_after_break));
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_fp_regnum = %s\n",
                      plongest (gdbarch->deprecated_fp_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_function_start_offset = %s\n",
                      core_addr_to_string_nz (gdbarch->deprecated_function_start_offset));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_displaced_step_copy_insn_p() = %d\n",
                      gdbarch_displaced_step_copy_insn_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: displaced_step_copy_insn = <%s>\n",
                      host_address_to_string (gdbarch->displaced_step_copy_insn));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_displaced_step_fixup_p() = %d\n",
                      gdbarch_displaced_step_fixup_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: displaced_step_fixup = <%s>\n",
                      host_address_to_string (gdbarch->displaced_step_fixup));
  fprintf_unfiltered (file,
                      "gdbarch_dump: displaced_step_free_closure = <%s>\n",
                      host_address_to_string (gdbarch->displaced_step_free_closure));
  fprintf_unfiltered (file,
                      "gdbarch_dump: displaced_step_hw_singlestep = <%s>\n",
                      host_address_to_string (gdbarch->displaced_step_hw_singlestep));
  fprintf_unfiltered (file,
                      "gdbarch_dump: displaced_step_location = <%s>\n",
                      host_address_to_string (gdbarch->displaced_step_location));
  fprintf_unfiltered (file,
                      "gdbarch_dump: double_bit = %s\n",
                      plongest (gdbarch->double_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: double_format = %s\n",
                      pformat (gdbarch->double_format));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_dummy_id_p() = %d\n",
                      gdbarch_dummy_id_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: dummy_id = <%s>\n",
                      host_address_to_string (gdbarch->dummy_id));
  fprintf_unfiltered (file,
                      "gdbarch_dump: dwarf2_addr_size = %s\n",
                      plongest (gdbarch->dwarf2_addr_size));
  fprintf_unfiltered (file,
                      "gdbarch_dump: dwarf2_reg_to_regnum = <%s>\n",
                      host_address_to_string (gdbarch->dwarf2_reg_to_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ecoff_reg_to_regnum = <%s>\n",
                      host_address_to_string (gdbarch->ecoff_reg_to_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: elf_make_msymbol_special = <%s>\n",
                      host_address_to_string (gdbarch->elf_make_msymbol_special));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_elfcore_write_linux_prpsinfo_p() = %d\n",
                      gdbarch_elfcore_write_linux_prpsinfo_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: elfcore_write_linux_prpsinfo = <%s>\n",
                      host_address_to_string (gdbarch->elfcore_write_linux_prpsinfo));
  fprintf_unfiltered (file,
                      "gdbarch_dump: fast_tracepoint_valid_at = <%s>\n",
                      host_address_to_string (gdbarch->fast_tracepoint_valid_at));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_fetch_pointer_argument_p() = %d\n",
                      gdbarch_fetch_pointer_argument_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: fetch_pointer_argument = <%s>\n",
                      host_address_to_string (gdbarch->fetch_pointer_argument));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_fetch_tls_load_module_address_p() = %d\n",
                      gdbarch_fetch_tls_load_module_address_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: fetch_tls_load_module_address = <%s>\n",
                      host_address_to_string (gdbarch->fetch_tls_load_module_address));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_find_memory_regions_p() = %d\n",
                      gdbarch_find_memory_regions_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: find_memory_regions = <%s>\n",
                      host_address_to_string (gdbarch->find_memory_regions));
  fprintf_unfiltered (file,
                      "gdbarch_dump: float_bit = %s\n",
                      plongest (gdbarch->float_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: float_format = %s\n",
                      pformat (gdbarch->float_format));
  fprintf_unfiltered (file,
                      "gdbarch_dump: fp0_regnum = %s\n",
                      plongest (gdbarch->fp0_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_frame_align_p() = %d\n",
                      gdbarch_frame_align_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: frame_align = <%s>\n",
                      host_address_to_string (gdbarch->frame_align));
  fprintf_unfiltered (file,
                      "gdbarch_dump: frame_args_skip = %s\n",
                      core_addr_to_string_nz (gdbarch->frame_args_skip));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_frame_num_args_p() = %d\n",
                      gdbarch_frame_num_args_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: frame_num_args = <%s>\n",
                      host_address_to_string (gdbarch->frame_num_args));
  fprintf_unfiltered (file,
                      "gdbarch_dump: frame_red_zone_size = %s\n",
                      plongest (gdbarch->frame_red_zone_size));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_gcore_bfd_target_p() = %d\n",
                      gdbarch_gcore_bfd_target_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gcore_bfd_target = %s\n",
                      pstring (gdbarch->gcore_bfd_target));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_gdb_signal_from_target_p() = %d\n",
                      gdbarch_gdb_signal_from_target_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdb_signal_from_target = <%s>\n",
                      host_address_to_string (gdbarch->gdb_signal_from_target));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_gdb_signal_to_target_p() = %d\n",
                      gdbarch_gdb_signal_to_target_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdb_signal_to_target = <%s>\n",
                      host_address_to_string (gdbarch->gdb_signal_to_target));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gen_return_address = <%s>\n",
                      host_address_to_string (gdbarch->gen_return_address));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_get_longjmp_target_p() = %d\n",
                      gdbarch_get_longjmp_target_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: get_longjmp_target = <%s>\n",
                      host_address_to_string (gdbarch->get_longjmp_target));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_get_siginfo_type_p() = %d\n",
                      gdbarch_get_siginfo_type_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: get_siginfo_type = <%s>\n",
                      host_address_to_string (gdbarch->get_siginfo_type));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_get_syscall_number_p() = %d\n",
                      gdbarch_get_syscall_number_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: get_syscall_number = <%s>\n",
                      host_address_to_string (gdbarch->get_syscall_number));
  fprintf_unfiltered (file,
                      "gdbarch_dump: half_bit = %s\n",
                      plongest (gdbarch->half_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: half_format = %s\n",
                      pformat (gdbarch->half_format));
  fprintf_unfiltered (file,
                      "gdbarch_dump: has_dos_based_file_system = %s\n",
                      plongest (gdbarch->has_dos_based_file_system));
  fprintf_unfiltered (file,
                      "gdbarch_dump: has_global_breakpoints = %s\n",
                      plongest (gdbarch->has_global_breakpoints));
  fprintf_unfiltered (file,
                      "gdbarch_dump: has_global_solist = %s\n",
                      plongest (gdbarch->has_global_solist));
  fprintf_unfiltered (file,
                      "gdbarch_dump: has_shared_address_space = <%s>\n",
                      host_address_to_string (gdbarch->has_shared_address_space));
  fprintf_unfiltered (file,
                      "gdbarch_dump: have_nonsteppable_watchpoint = %s\n",
                      plongest (gdbarch->have_nonsteppable_watchpoint));
  fprintf_unfiltered (file,
                      "gdbarch_dump: in_function_epilogue_p = <%s>\n",
                      host_address_to_string (gdbarch->in_function_epilogue_p));
  fprintf_unfiltered (file,
                      "gdbarch_dump: in_solib_return_trampoline = <%s>\n",
                      host_address_to_string (gdbarch->in_solib_return_trampoline));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_info_proc_p() = %d\n",
                      gdbarch_info_proc_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: info_proc = <%s>\n",
                      host_address_to_string (gdbarch->info_proc));
  fprintf_unfiltered (file,
                      "gdbarch_dump: inner_than = <%s>\n",
                      host_address_to_string (gdbarch->inner_than));
  fprintf_unfiltered (file,
                      "gdbarch_dump: int_bit = %s\n",
                      plongest (gdbarch->int_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_integer_to_address_p() = %d\n",
                      gdbarch_integer_to_address_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: integer_to_address = <%s>\n",
                      host_address_to_string (gdbarch->integer_to_address));
  fprintf_unfiltered (file,
                      "gdbarch_dump: iterate_over_objfiles_in_search_order = <%s>\n",
                      host_address_to_string (gdbarch->iterate_over_objfiles_in_search_order));
  fprintf_unfiltered (file,
                      "gdbarch_dump: long_bit = %s\n",
                      plongest (gdbarch->long_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: long_double_bit = %s\n",
                      plongest (gdbarch->long_double_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: long_double_format = %s\n",
                      pformat (gdbarch->long_double_format));
  fprintf_unfiltered (file,
                      "gdbarch_dump: long_long_align_bit = %s\n",
                      plongest (gdbarch->long_long_align_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: long_long_bit = %s\n",
                      plongest (gdbarch->long_long_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_make_corefile_notes_p() = %d\n",
                      gdbarch_make_corefile_notes_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: make_corefile_notes = <%s>\n",
                      host_address_to_string (gdbarch->make_corefile_notes));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_max_insn_length_p() = %d\n",
                      gdbarch_max_insn_length_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: max_insn_length = %s\n",
                      plongest (gdbarch->max_insn_length));
  fprintf_unfiltered (file,
                      "gdbarch_dump: memory_insert_breakpoint = <%s>\n",
                      host_address_to_string (gdbarch->memory_insert_breakpoint));
  fprintf_unfiltered (file,
                      "gdbarch_dump: memory_remove_breakpoint = <%s>\n",
                      host_address_to_string (gdbarch->memory_remove_breakpoint));
  fprintf_unfiltered (file,
                      "gdbarch_dump: num_pseudo_regs = %s\n",
                      plongest (gdbarch->num_pseudo_regs));
  fprintf_unfiltered (file,
                      "gdbarch_dump: num_regs = %s\n",
                      plongest (gdbarch->num_regs));
  fprintf_unfiltered (file,
                      "gdbarch_dump: osabi = %s\n",
                      plongest (gdbarch->osabi));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_overlay_update_p() = %d\n",
                      gdbarch_overlay_update_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: overlay_update = <%s>\n",
                      host_address_to_string (gdbarch->overlay_update));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pc_regnum = %s\n",
                      plongest (gdbarch->pc_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pointer_to_address = <%s>\n",
                      host_address_to_string (gdbarch->pointer_to_address));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_print_float_info_p() = %d\n",
                      gdbarch_print_float_info_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_float_info = <%s>\n",
                      host_address_to_string (gdbarch->print_float_info));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_insn = <%s>\n",
                      host_address_to_string (gdbarch->print_insn));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_registers_info = <%s>\n",
                      host_address_to_string (gdbarch->print_registers_info));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_print_vector_info_p() = %d\n",
                      gdbarch_print_vector_info_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_vector_info = <%s>\n",
                      host_address_to_string (gdbarch->print_vector_info));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_process_record_p() = %d\n",
                      gdbarch_process_record_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: process_record = <%s>\n",
                      host_address_to_string (gdbarch->process_record));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_process_record_signal_p() = %d\n",
                      gdbarch_process_record_signal_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: process_record_signal = <%s>\n",
                      host_address_to_string (gdbarch->process_record_signal));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ps_regnum = %s\n",
                      plongest (gdbarch->ps_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_read_p() = %d\n",
                      gdbarch_pseudo_register_read_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_read = <%s>\n",
                      host_address_to_string (gdbarch->pseudo_register_read));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_read_value_p() = %d\n",
                      gdbarch_pseudo_register_read_value_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_read_value = <%s>\n",
                      host_address_to_string (gdbarch->pseudo_register_read_value));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_write_p() = %d\n",
                      gdbarch_pseudo_register_write_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_write = <%s>\n",
                      host_address_to_string (gdbarch->pseudo_register_write));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ptr_bit = %s\n",
                      plongest (gdbarch->ptr_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_push_dummy_call_p() = %d\n",
                      gdbarch_push_dummy_call_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: push_dummy_call = <%s>\n",
                      host_address_to_string (gdbarch->push_dummy_call));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_push_dummy_code_p() = %d\n",
                      gdbarch_push_dummy_code_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: push_dummy_code = <%s>\n",
                      host_address_to_string (gdbarch->push_dummy_code));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ravenscar_ops = %s\n",
                      host_address_to_string (gdbarch->ravenscar_ops));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_read_pc_p() = %d\n",
                      gdbarch_read_pc_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: read_pc = <%s>\n",
                      host_address_to_string (gdbarch->read_pc));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_record_special_symbol_p() = %d\n",
                      gdbarch_record_special_symbol_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: record_special_symbol = <%s>\n",
                      host_address_to_string (gdbarch->record_special_symbol));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_name = <%s>\n",
                      host_address_to_string (gdbarch->register_name));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_reggroup_p = <%s>\n",
                      host_address_to_string (gdbarch->register_reggroup_p));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_sim_regno = <%s>\n",
                      host_address_to_string (gdbarch->register_sim_regno));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_to_value = <%s>\n",
                      host_address_to_string (gdbarch->register_to_value));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_register_type_p() = %d\n",
                      gdbarch_register_type_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_type = <%s>\n",
                      host_address_to_string (gdbarch->register_type));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_regset_from_core_section_p() = %d\n",
                      gdbarch_regset_from_core_section_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: regset_from_core_section = <%s>\n",
                      host_address_to_string (gdbarch->regset_from_core_section));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_relocate_instruction_p() = %d\n",
                      gdbarch_relocate_instruction_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: relocate_instruction = <%s>\n",
                      host_address_to_string (gdbarch->relocate_instruction));
  fprintf_unfiltered (file,
                      "gdbarch_dump: remote_breakpoint_from_pc = <%s>\n",
                      host_address_to_string (gdbarch->remote_breakpoint_from_pc));
  fprintf_unfiltered (file,
                      "gdbarch_dump: remote_register_number = <%s>\n",
                      host_address_to_string (gdbarch->remote_register_number));
  fprintf_unfiltered (file,
                      "gdbarch_dump: return_in_first_hidden_param_p = <%s>\n",
                      host_address_to_string (gdbarch->return_in_first_hidden_param_p));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_return_value_p() = %d\n",
                      gdbarch_return_value_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: return_value = <%s>\n",
                      host_address_to_string (gdbarch->return_value));
  fprintf_unfiltered (file,
                      "gdbarch_dump: sdb_reg_to_regnum = <%s>\n",
                      host_address_to_string (gdbarch->sdb_reg_to_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: short_bit = %s\n",
                      plongest (gdbarch->short_bit));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_single_step_through_delay_p() = %d\n",
                      gdbarch_single_step_through_delay_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: single_step_through_delay = <%s>\n",
                      host_address_to_string (gdbarch->single_step_through_delay));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_skip_main_prologue_p() = %d\n",
                      gdbarch_skip_main_prologue_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_main_prologue = <%s>\n",
                      host_address_to_string (gdbarch->skip_main_prologue));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_skip_permanent_breakpoint_p() = %d\n",
                      gdbarch_skip_permanent_breakpoint_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_permanent_breakpoint = <%s>\n",
                      host_address_to_string (gdbarch->skip_permanent_breakpoint));
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_prologue = <%s>\n",
                      host_address_to_string (gdbarch->skip_prologue));
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_solib_resolver = <%s>\n",
                      host_address_to_string (gdbarch->skip_solib_resolver));
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_trampoline_code = <%s>\n",
                      host_address_to_string (gdbarch->skip_trampoline_code));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_software_single_step_p() = %d\n",
                      gdbarch_software_single_step_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: software_single_step = <%s>\n",
                      host_address_to_string (gdbarch->software_single_step));
  fprintf_unfiltered (file,
                      "gdbarch_dump: sofun_address_maybe_missing = %s\n",
                      plongest (gdbarch->sofun_address_maybe_missing));
  fprintf_unfiltered (file,
                      "gdbarch_dump: solib_symbols_extension = %s\n",
                      pstring (gdbarch->solib_symbols_extension));
  fprintf_unfiltered (file,
                      "gdbarch_dump: sp_regnum = %s\n",
                      plongest (gdbarch->sp_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stab_reg_to_regnum = <%s>\n",
                      host_address_to_string (gdbarch->stab_reg_to_regnum));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stabs_argument_has_addr = <%s>\n",
                      host_address_to_string (gdbarch->stabs_argument_has_addr));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_gdb_register_prefix = %s\n",
                      pstring (gdbarch->stap_gdb_register_prefix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_gdb_register_suffix = %s\n",
                      pstring (gdbarch->stap_gdb_register_suffix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_integer_prefix = %s\n",
                      pstring (gdbarch->stap_integer_prefix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_integer_suffix = %s\n",
                      pstring (gdbarch->stap_integer_suffix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_stap_is_single_operand_p() = %d\n",
                      gdbarch_stap_is_single_operand_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_is_single_operand = <%s>\n",
                      host_address_to_string (gdbarch->stap_is_single_operand));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_stap_parse_special_token_p() = %d\n",
                      gdbarch_stap_parse_special_token_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_parse_special_token = <%s>\n",
                      host_address_to_string (gdbarch->stap_parse_special_token));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_register_indirection_prefix = %s\n",
                      pstring (gdbarch->stap_register_indirection_prefix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_register_indirection_suffix = %s\n",
                      pstring (gdbarch->stap_register_indirection_suffix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_register_prefix = %s\n",
                      pstring (gdbarch->stap_register_prefix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: stap_register_suffix = %s\n",
                      pstring (gdbarch->stap_register_suffix));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_static_transform_name_p() = %d\n",
                      gdbarch_static_transform_name_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: static_transform_name = <%s>\n",
                      host_address_to_string (gdbarch->static_transform_name));
  fprintf_unfiltered (file,
                      "gdbarch_dump: target_desc = %s\n",
                      host_address_to_string (gdbarch->target_desc));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                      gdbarch_unwind_pc_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_pc = <%s>\n",
                      host_address_to_string (gdbarch->unwind_pc));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_sp_p() = %d\n",
                      gdbarch_unwind_sp_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_sp = <%s>\n",
                      host_address_to_string (gdbarch->unwind_sp));
  fprintf_unfiltered (file,
                      "gdbarch_dump: value_from_register = <%s>\n",
                      host_address_to_string (gdbarch->value_from_register));
  fprintf_unfiltered (file,
                      "gdbarch_dump: value_to_register = <%s>\n",
                      host_address_to_string (gdbarch->value_to_register));
  fprintf_unfiltered (file,
                      "gdbarch_dump: vbit_in_delta = %s\n",
                      plongest (gdbarch->vbit_in_delta));
  fprintf_unfiltered (file,
                      "gdbarch_dump: virtual_frame_pointer = <%s>\n",
                      host_address_to_string (gdbarch->virtual_frame_pointer));
  fprintf_unfiltered (file,
                      "gdbarch_dump: vtable_function_descriptors = %s\n",
                      plongest (gdbarch->vtable_function_descriptors));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_write_pc_p() = %d\n",
                      gdbarch_write_pc_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: write_pc = <%s>\n",
                      host_address_to_string (gdbarch->write_pc));
  if (gdbarch->dump_tdep != NULL)
    gdbarch->dump_tdep (gdbarch, file);
}

struct gdbarch_tdep *
gdbarch_tdep (struct gdbarch *gdbarch)
{
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_tdep called\n");
  return gdbarch->tdep;
}


const struct bfd_arch_info *
gdbarch_bfd_arch_info (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_arch_info called\n");
  return gdbarch->bfd_arch_info;
}

int
gdbarch_byte_order (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_byte_order called\n");
  return gdbarch->byte_order;
}

int
gdbarch_byte_order_for_code (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_byte_order_for_code called\n");
  return gdbarch->byte_order_for_code;
}

enum gdb_osabi
gdbarch_osabi (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_osabi called\n");
  return gdbarch->osabi;
}

const struct target_desc *
gdbarch_target_desc (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_target_desc called\n");
  return gdbarch->target_desc;
}

int
gdbarch_bits_big_endian (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of bits_big_endian, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bits_big_endian called\n");
  return gdbarch->bits_big_endian;
}

void
set_gdbarch_bits_big_endian (struct gdbarch *gdbarch,
                             int bits_big_endian)
{
  gdbarch->bits_big_endian = bits_big_endian;
}

int
gdbarch_short_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of short_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_short_bit called\n");
  return gdbarch->short_bit;
}

void
set_gdbarch_short_bit (struct gdbarch *gdbarch,
                       int short_bit)
{
  gdbarch->short_bit = short_bit;
}

int
gdbarch_int_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of int_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_int_bit called\n");
  return gdbarch->int_bit;
}

void
set_gdbarch_int_bit (struct gdbarch *gdbarch,
                     int int_bit)
{
  gdbarch->int_bit = int_bit;
}

int
gdbarch_long_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of long_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_bit called\n");
  return gdbarch->long_bit;
}

void
set_gdbarch_long_bit (struct gdbarch *gdbarch,
                      int long_bit)
{
  gdbarch->long_bit = long_bit;
}

int
gdbarch_long_long_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of long_long_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_long_bit called\n");
  return gdbarch->long_long_bit;
}

void
set_gdbarch_long_long_bit (struct gdbarch *gdbarch,
                           int long_long_bit)
{
  gdbarch->long_long_bit = long_long_bit;
}

int
gdbarch_long_long_align_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of long_long_align_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_long_align_bit called\n");
  return gdbarch->long_long_align_bit;
}

void
set_gdbarch_long_long_align_bit (struct gdbarch *gdbarch,
                                 int long_long_align_bit)
{
  gdbarch->long_long_align_bit = long_long_align_bit;
}

int
gdbarch_half_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of half_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_half_bit called\n");
  return gdbarch->half_bit;
}

void
set_gdbarch_half_bit (struct gdbarch *gdbarch,
                      int half_bit)
{
  gdbarch->half_bit = half_bit;
}

const struct floatformat **
gdbarch_half_format (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_half_format called\n");
  return gdbarch->half_format;
}

void
set_gdbarch_half_format (struct gdbarch *gdbarch,
                         const struct floatformat ** half_format)
{
  gdbarch->half_format = half_format;
}

int
gdbarch_float_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of float_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_float_bit called\n");
  return gdbarch->float_bit;
}

void
set_gdbarch_float_bit (struct gdbarch *gdbarch,
                       int float_bit)
{
  gdbarch->float_bit = float_bit;
}

const struct floatformat **
gdbarch_float_format (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_float_format called\n");
  return gdbarch->float_format;
}

void
set_gdbarch_float_format (struct gdbarch *gdbarch,
                          const struct floatformat ** float_format)
{
  gdbarch->float_format = float_format;
}

int
gdbarch_double_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of double_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_double_bit called\n");
  return gdbarch->double_bit;
}

void
set_gdbarch_double_bit (struct gdbarch *gdbarch,
                        int double_bit)
{
  gdbarch->double_bit = double_bit;
}

const struct floatformat **
gdbarch_double_format (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_double_format called\n");
  return gdbarch->double_format;
}

void
set_gdbarch_double_format (struct gdbarch *gdbarch,
                           const struct floatformat ** double_format)
{
  gdbarch->double_format = double_format;
}

int
gdbarch_long_double_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of long_double_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_double_bit called\n");
  return gdbarch->long_double_bit;
}

void
set_gdbarch_long_double_bit (struct gdbarch *gdbarch,
                             int long_double_bit)
{
  gdbarch->long_double_bit = long_double_bit;
}

const struct floatformat **
gdbarch_long_double_format (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_double_format called\n");
  return gdbarch->long_double_format;
}

void
set_gdbarch_long_double_format (struct gdbarch *gdbarch,
                                const struct floatformat ** long_double_format)
{
  gdbarch->long_double_format = long_double_format;
}

int
gdbarch_ptr_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of ptr_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ptr_bit called\n");
  return gdbarch->ptr_bit;
}

void
set_gdbarch_ptr_bit (struct gdbarch *gdbarch,
                     int ptr_bit)
{
  gdbarch->ptr_bit = ptr_bit;
}

int
gdbarch_addr_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->addr_bit != 0);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_addr_bit called\n");
  return gdbarch->addr_bit;
}

void
set_gdbarch_addr_bit (struct gdbarch *gdbarch,
                      int addr_bit)
{
  gdbarch->addr_bit = addr_bit;
}

int
gdbarch_dwarf2_addr_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->dwarf2_addr_size != 0);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dwarf2_addr_size called\n");
  return gdbarch->dwarf2_addr_size;
}

void
set_gdbarch_dwarf2_addr_size (struct gdbarch *gdbarch,
                              int dwarf2_addr_size)
{
  gdbarch->dwarf2_addr_size = dwarf2_addr_size;
}

int
gdbarch_char_signed (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->char_signed != -1);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_char_signed called\n");
  return gdbarch->char_signed;
}

void
set_gdbarch_char_signed (struct gdbarch *gdbarch,
                         int char_signed)
{
  gdbarch->char_signed = char_signed;
}

int
gdbarch_read_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->read_pc != NULL;
}

CORE_ADDR
gdbarch_read_pc (struct gdbarch *gdbarch, struct regcache *regcache)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->read_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_pc called\n");
  return gdbarch->read_pc (regcache);
}

void
set_gdbarch_read_pc (struct gdbarch *gdbarch,
                     gdbarch_read_pc_ftype read_pc)
{
  gdbarch->read_pc = read_pc;
}

int
gdbarch_write_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->write_pc != NULL;
}

void
gdbarch_write_pc (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR val)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->write_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_write_pc called\n");
  gdbarch->write_pc (regcache, val);
}

void
set_gdbarch_write_pc (struct gdbarch *gdbarch,
                      gdbarch_write_pc_ftype write_pc)
{
  gdbarch->write_pc = write_pc;
}

void
gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch, CORE_ADDR pc, int *frame_regnum, LONGEST *frame_offset)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->virtual_frame_pointer != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_virtual_frame_pointer called\n");
  gdbarch->virtual_frame_pointer (gdbarch, pc, frame_regnum, frame_offset);
}

void
set_gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch,
                                   gdbarch_virtual_frame_pointer_ftype virtual_frame_pointer)
{
  gdbarch->virtual_frame_pointer = virtual_frame_pointer;
}

int
gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->pseudo_register_read != NULL;
}

enum register_status
gdbarch_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, gdb_byte *buf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->pseudo_register_read != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pseudo_register_read called\n");
  return gdbarch->pseudo_register_read (gdbarch, regcache, cookednum, buf);
}

void
set_gdbarch_pseudo_register_read (struct gdbarch *gdbarch,
                                  gdbarch_pseudo_register_read_ftype pseudo_register_read)
{
  gdbarch->pseudo_register_read = pseudo_register_read;
}

int
gdbarch_pseudo_register_read_value_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->pseudo_register_read_value != NULL;
}

struct value *
gdbarch_pseudo_register_read_value (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->pseudo_register_read_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pseudo_register_read_value called\n");
  return gdbarch->pseudo_register_read_value (gdbarch, regcache, cookednum);
}

void
set_gdbarch_pseudo_register_read_value (struct gdbarch *gdbarch,
                                        gdbarch_pseudo_register_read_value_ftype pseudo_register_read_value)
{
  gdbarch->pseudo_register_read_value = pseudo_register_read_value;
}

int
gdbarch_pseudo_register_write_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->pseudo_register_write != NULL;
}

void
gdbarch_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const gdb_byte *buf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->pseudo_register_write != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pseudo_register_write called\n");
  gdbarch->pseudo_register_write (gdbarch, regcache, cookednum, buf);
}

void
set_gdbarch_pseudo_register_write (struct gdbarch *gdbarch,
                                   gdbarch_pseudo_register_write_ftype pseudo_register_write)
{
  gdbarch->pseudo_register_write = pseudo_register_write;
}

int
gdbarch_num_regs (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->num_regs != -1);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_num_regs called\n");
  return gdbarch->num_regs;
}

void
set_gdbarch_num_regs (struct gdbarch *gdbarch,
                      int num_regs)
{
  gdbarch->num_regs = num_regs;
}

int
gdbarch_num_pseudo_regs (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of num_pseudo_regs, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_num_pseudo_regs called\n");
  return gdbarch->num_pseudo_regs;
}

void
set_gdbarch_num_pseudo_regs (struct gdbarch *gdbarch,
                             int num_pseudo_regs)
{
  gdbarch->num_pseudo_regs = num_pseudo_regs;
}

int
gdbarch_ax_pseudo_register_collect_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->ax_pseudo_register_collect != NULL;
}

int
gdbarch_ax_pseudo_register_collect (struct gdbarch *gdbarch, struct agent_expr *ax, int reg)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->ax_pseudo_register_collect != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ax_pseudo_register_collect called\n");
  return gdbarch->ax_pseudo_register_collect (gdbarch, ax, reg);
}

void
set_gdbarch_ax_pseudo_register_collect (struct gdbarch *gdbarch,
                                        gdbarch_ax_pseudo_register_collect_ftype ax_pseudo_register_collect)
{
  gdbarch->ax_pseudo_register_collect = ax_pseudo_register_collect;
}

int
gdbarch_ax_pseudo_register_push_stack_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->ax_pseudo_register_push_stack != NULL;
}

int
gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch, struct agent_expr *ax, int reg)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->ax_pseudo_register_push_stack != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ax_pseudo_register_push_stack called\n");
  return gdbarch->ax_pseudo_register_push_stack (gdbarch, ax, reg);
}

void
set_gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch,
                                           gdbarch_ax_pseudo_register_push_stack_ftype ax_pseudo_register_push_stack)
{
  gdbarch->ax_pseudo_register_push_stack = ax_pseudo_register_push_stack;
}

int
gdbarch_sp_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of sp_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sp_regnum called\n");
  return gdbarch->sp_regnum;
}

void
set_gdbarch_sp_regnum (struct gdbarch *gdbarch,
                       int sp_regnum)
{
  gdbarch->sp_regnum = sp_regnum;
}

int
gdbarch_pc_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of pc_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pc_regnum called\n");
  return gdbarch->pc_regnum;
}

void
set_gdbarch_pc_regnum (struct gdbarch *gdbarch,
                       int pc_regnum)
{
  gdbarch->pc_regnum = pc_regnum;
}

int
gdbarch_ps_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of ps_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ps_regnum called\n");
  return gdbarch->ps_regnum;
}

void
set_gdbarch_ps_regnum (struct gdbarch *gdbarch,
                       int ps_regnum)
{
  gdbarch->ps_regnum = ps_regnum;
}

int
gdbarch_fp0_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of fp0_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fp0_regnum called\n");
  return gdbarch->fp0_regnum;
}

void
set_gdbarch_fp0_regnum (struct gdbarch *gdbarch,
                        int fp0_regnum)
{
  gdbarch->fp0_regnum = fp0_regnum;
}

int
gdbarch_stab_reg_to_regnum (struct gdbarch *gdbarch, int stab_regnr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->stab_reg_to_regnum != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stab_reg_to_regnum called\n");
  return gdbarch->stab_reg_to_regnum (gdbarch, stab_regnr);
}

void
set_gdbarch_stab_reg_to_regnum (struct gdbarch *gdbarch,
                                gdbarch_stab_reg_to_regnum_ftype stab_reg_to_regnum)
{
  gdbarch->stab_reg_to_regnum = stab_reg_to_regnum;
}

int
gdbarch_ecoff_reg_to_regnum (struct gdbarch *gdbarch, int ecoff_regnr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->ecoff_reg_to_regnum != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ecoff_reg_to_regnum called\n");
  return gdbarch->ecoff_reg_to_regnum (gdbarch, ecoff_regnr);
}

void
set_gdbarch_ecoff_reg_to_regnum (struct gdbarch *gdbarch,
                                 gdbarch_ecoff_reg_to_regnum_ftype ecoff_reg_to_regnum)
{
  gdbarch->ecoff_reg_to_regnum = ecoff_reg_to_regnum;
}

int
gdbarch_sdb_reg_to_regnum (struct gdbarch *gdbarch, int sdb_regnr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->sdb_reg_to_regnum != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sdb_reg_to_regnum called\n");
  return gdbarch->sdb_reg_to_regnum (gdbarch, sdb_regnr);
}

void
set_gdbarch_sdb_reg_to_regnum (struct gdbarch *gdbarch,
                               gdbarch_sdb_reg_to_regnum_ftype sdb_reg_to_regnum)
{
  gdbarch->sdb_reg_to_regnum = sdb_reg_to_regnum;
}

int
gdbarch_dwarf2_reg_to_regnum (struct gdbarch *gdbarch, int dwarf2_regnr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->dwarf2_reg_to_regnum != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dwarf2_reg_to_regnum called\n");
  return gdbarch->dwarf2_reg_to_regnum (gdbarch, dwarf2_regnr);
}

void
set_gdbarch_dwarf2_reg_to_regnum (struct gdbarch *gdbarch,
                                  gdbarch_dwarf2_reg_to_regnum_ftype dwarf2_reg_to_regnum)
{
  gdbarch->dwarf2_reg_to_regnum = dwarf2_reg_to_regnum;
}

const char *
gdbarch_register_name (struct gdbarch *gdbarch, int regnr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_name != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_name called\n");
  return gdbarch->register_name (gdbarch, regnr);
}

void
set_gdbarch_register_name (struct gdbarch *gdbarch,
                           gdbarch_register_name_ftype register_name)
{
  gdbarch->register_name = register_name;
}

int
gdbarch_register_type_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_type != NULL;
}

struct type *
gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_type != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_type called\n");
  return gdbarch->register_type (gdbarch, reg_nr);
}

void
set_gdbarch_register_type (struct gdbarch *gdbarch,
                           gdbarch_register_type_ftype register_type)
{
  gdbarch->register_type = register_type;
}

int
gdbarch_dummy_id_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->dummy_id != NULL;
}

struct frame_id
gdbarch_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->dummy_id != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dummy_id called\n");
  return gdbarch->dummy_id (gdbarch, this_frame);
}

void
set_gdbarch_dummy_id (struct gdbarch *gdbarch,
                      gdbarch_dummy_id_ftype dummy_id)
{
  gdbarch->dummy_id = dummy_id;
}

int
gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fp_regnum called\n");
  return gdbarch->deprecated_fp_regnum;
}

void
set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,
                                  int deprecated_fp_regnum)
{
  gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;
}

int
gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_call != NULL;
}

CORE_ADDR
gdbarch_push_dummy_call (struct gdbarch *gdbarch, struct value *function, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->push_dummy_call != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_call called\n");
  return gdbarch->push_dummy_call (gdbarch, function, regcache, bp_addr, nargs, args, sp, struct_return, struct_addr);
}

void
set_gdbarch_push_dummy_call (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_call_ftype push_dummy_call)
{
  gdbarch->push_dummy_call = push_dummy_call;
}

int
gdbarch_call_dummy_location (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of call_dummy_location, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_location called\n");
  return gdbarch->call_dummy_location;
}

void
set_gdbarch_call_dummy_location (struct gdbarch *gdbarch,
                                 int call_dummy_location)
{
  gdbarch->call_dummy_location = call_dummy_location;
}

int
gdbarch_push_dummy_code_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_code != NULL;
}

CORE_ADDR
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr, struct regcache *regcache)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->push_dummy_code != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_code called\n");
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, args, nargs, value_type, real_pc, bp_addr, regcache);
}

void
set_gdbarch_push_dummy_code (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_code_ftype push_dummy_code)
{
  gdbarch->push_dummy_code = push_dummy_code;
}

void
gdbarch_print_registers_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, int regnum, int all)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->print_registers_info != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_registers_info called\n");
  gdbarch->print_registers_info (gdbarch, file, frame, regnum, all);
}

void
set_gdbarch_print_registers_info (struct gdbarch *gdbarch,
                                  gdbarch_print_registers_info_ftype print_registers_info)
{
  gdbarch->print_registers_info = print_registers_info;
}

int
gdbarch_print_float_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->print_float_info != NULL;
}

void
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->print_float_info != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_float_info called\n");
  gdbarch->print_float_info (gdbarch, file, frame, args);
}

void
set_gdbarch_print_float_info (struct gdbarch *gdbarch,
                              gdbarch_print_float_info_ftype print_float_info)
{
  gdbarch->print_float_info = print_float_info;
}

int
gdbarch_print_vector_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->print_vector_info != NULL;
}

void
gdbarch_print_vector_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->print_vector_info != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_vector_info called\n");
  gdbarch->print_vector_info (gdbarch, file, frame, args);
}

void
set_gdbarch_print_vector_info (struct gdbarch *gdbarch,
                               gdbarch_print_vector_info_ftype print_vector_info)
{
  gdbarch->print_vector_info = print_vector_info;
}

int
gdbarch_register_sim_regno (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_sim_regno != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_sim_regno called\n");
  return gdbarch->register_sim_regno (gdbarch, reg_nr);
}

void
set_gdbarch_register_sim_regno (struct gdbarch *gdbarch,
                                gdbarch_register_sim_regno_ftype register_sim_regno)
{
  gdbarch->register_sim_regno = register_sim_regno;
}

int
gdbarch_cannot_fetch_register (struct gdbarch *gdbarch, int regnum)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->cannot_fetch_register != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_fetch_register called\n");
  return gdbarch->cannot_fetch_register (gdbarch, regnum);
}

void
set_gdbarch_cannot_fetch_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_fetch_register_ftype cannot_fetch_register)
{
  gdbarch->cannot_fetch_register = cannot_fetch_register;
}

int
gdbarch_cannot_store_register (struct gdbarch *gdbarch, int regnum)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->cannot_store_register != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_store_register called\n");
  return gdbarch->cannot_store_register (gdbarch, regnum);
}

void
set_gdbarch_cannot_store_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_store_register_ftype cannot_store_register)
{
  gdbarch->cannot_store_register = cannot_store_register;
}

int
gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->get_longjmp_target != NULL;
}

int
gdbarch_get_longjmp_target (struct gdbarch *gdbarch, struct frame_info *frame, CORE_ADDR *pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->get_longjmp_target != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_longjmp_target called\n");
  return gdbarch->get_longjmp_target (frame, pc);
}

void
set_gdbarch_get_longjmp_target (struct gdbarch *gdbarch,
                                gdbarch_get_longjmp_target_ftype get_longjmp_target)
{
  gdbarch->get_longjmp_target = get_longjmp_target;
}

int
gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_believe_pcc_promotion called\n");
  return gdbarch->believe_pcc_promotion;
}

void
set_gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch,
                                   int believe_pcc_promotion)
{
  gdbarch->believe_pcc_promotion = believe_pcc_promotion;
}

int
gdbarch_convert_register_p (struct gdbarch *gdbarch, int regnum, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->convert_register_p != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_convert_register_p called\n");
  return gdbarch->convert_register_p (gdbarch, regnum, type);
}

void
set_gdbarch_convert_register_p (struct gdbarch *gdbarch,
                                gdbarch_convert_register_p_ftype convert_register_p)
{
  gdbarch->convert_register_p = convert_register_p;
}

int
gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, gdb_byte *buf, int *optimizedp, int *unavailablep)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_to_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_to_value called\n");
  return gdbarch->register_to_value (frame, regnum, type, buf, optimizedp, unavailablep);
}

void
set_gdbarch_register_to_value (struct gdbarch *gdbarch,
                               gdbarch_register_to_value_ftype register_to_value)
{
  gdbarch->register_to_value = register_to_value;
}

void
gdbarch_value_to_register (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, const gdb_byte *buf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->value_to_register != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_value_to_register called\n");
  gdbarch->value_to_register (frame, regnum, type, buf);
}

void
set_gdbarch_value_to_register (struct gdbarch *gdbarch,
                               gdbarch_value_to_register_ftype value_to_register)
{
  gdbarch->value_to_register = value_to_register;
}

struct value *
gdbarch_value_from_register (struct gdbarch *gdbarch, struct type *type, int regnum, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->value_from_register != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_value_from_register called\n");
  return gdbarch->value_from_register (type, regnum, frame);
}

void
set_gdbarch_value_from_register (struct gdbarch *gdbarch,
                                 gdbarch_value_from_register_ftype value_from_register)
{
  gdbarch->value_from_register = value_from_register;
}

CORE_ADDR
gdbarch_pointer_to_address (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->pointer_to_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pointer_to_address called\n");
  return gdbarch->pointer_to_address (gdbarch, type, buf);
}

void
set_gdbarch_pointer_to_address (struct gdbarch *gdbarch,
                                gdbarch_pointer_to_address_ftype pointer_to_address)
{
  gdbarch->pointer_to_address = pointer_to_address;
}

void
gdbarch_address_to_pointer (struct gdbarch *gdbarch, struct type *type, gdb_byte *buf, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->address_to_pointer != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_to_pointer called\n");
  gdbarch->address_to_pointer (gdbarch, type, buf, addr);
}

void
set_gdbarch_address_to_pointer (struct gdbarch *gdbarch,
                                gdbarch_address_to_pointer_ftype address_to_pointer)
{
  gdbarch->address_to_pointer = address_to_pointer;
}

int
gdbarch_integer_to_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->integer_to_address != NULL;
}

CORE_ADDR
gdbarch_integer_to_address (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->integer_to_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_integer_to_address called\n");
  return gdbarch->integer_to_address (gdbarch, type, buf);
}

void
set_gdbarch_integer_to_address (struct gdbarch *gdbarch,
                                gdbarch_integer_to_address_ftype integer_to_address)
{
  gdbarch->integer_to_address = integer_to_address;
}

int
gdbarch_return_value_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->return_value != NULL;
}

enum return_value_convention
gdbarch_return_value (struct gdbarch *gdbarch, struct value *function, struct type *valtype, struct regcache *regcache, gdb_byte *readbuf, const gdb_byte *writebuf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->return_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_value called\n");
  return gdbarch->return_value (gdbarch, function, valtype, regcache, readbuf, writebuf);
}

void
set_gdbarch_return_value (struct gdbarch *gdbarch,
                          gdbarch_return_value_ftype return_value)
{
  gdbarch->return_value = return_value;
}

int
gdbarch_return_in_first_hidden_param_p (struct gdbarch *gdbarch, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->return_in_first_hidden_param_p != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_in_first_hidden_param_p called\n");
  return gdbarch->return_in_first_hidden_param_p (gdbarch, type);
}

void
set_gdbarch_return_in_first_hidden_param_p (struct gdbarch *gdbarch,
                                            gdbarch_return_in_first_hidden_param_p_ftype return_in_first_hidden_param_p)
{
  gdbarch->return_in_first_hidden_param_p = return_in_first_hidden_param_p;
}

CORE_ADDR
gdbarch_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR ip)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->skip_prologue != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_prologue called\n");
  return gdbarch->skip_prologue (gdbarch, ip);
}

void
set_gdbarch_skip_prologue (struct gdbarch *gdbarch,
                           gdbarch_skip_prologue_ftype skip_prologue)
{
  gdbarch->skip_prologue = skip_prologue;
}

int
gdbarch_skip_main_prologue_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->skip_main_prologue != NULL;
}

CORE_ADDR
gdbarch_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR ip)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->skip_main_prologue != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_main_prologue called\n");
  return gdbarch->skip_main_prologue (gdbarch, ip);
}

void
set_gdbarch_skip_main_prologue (struct gdbarch *gdbarch,
                                gdbarch_skip_main_prologue_ftype skip_main_prologue)
{
  gdbarch->skip_main_prologue = skip_main_prologue;
}

int
gdbarch_inner_than (struct gdbarch *gdbarch, CORE_ADDR lhs, CORE_ADDR rhs)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->inner_than != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_inner_than called\n");
  return gdbarch->inner_than (lhs, rhs);
}

void
set_gdbarch_inner_than (struct gdbarch *gdbarch,
                        gdbarch_inner_than_ftype inner_than)
{
  gdbarch->inner_than = inner_than;
}

const gdb_byte *
gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR *pcptr, int *lenptr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->breakpoint_from_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_breakpoint_from_pc called\n");
  return gdbarch->breakpoint_from_pc (gdbarch, pcptr, lenptr);
}

void
set_gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch,
                                gdbarch_breakpoint_from_pc_ftype breakpoint_from_pc)
{
  gdbarch->breakpoint_from_pc = breakpoint_from_pc;
}

void
gdbarch_remote_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR *pcptr, int *kindptr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->remote_breakpoint_from_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_remote_breakpoint_from_pc called\n");
  gdbarch->remote_breakpoint_from_pc (gdbarch, pcptr, kindptr);
}

void
set_gdbarch_remote_breakpoint_from_pc (struct gdbarch *gdbarch,
                                       gdbarch_remote_breakpoint_from_pc_ftype remote_breakpoint_from_pc)
{
  gdbarch->remote_breakpoint_from_pc = remote_breakpoint_from_pc;
}

int
gdbarch_adjust_breakpoint_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->adjust_breakpoint_address != NULL;
}

CORE_ADDR
gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch, CORE_ADDR bpaddr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->adjust_breakpoint_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_adjust_breakpoint_address called\n");
  return gdbarch->adjust_breakpoint_address (gdbarch, bpaddr);
}

void
set_gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch,
                                       gdbarch_adjust_breakpoint_address_ftype adjust_breakpoint_address)
{
  gdbarch->adjust_breakpoint_address = adjust_breakpoint_address;
}

int
gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, struct bp_target_info *bp_tgt)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->memory_insert_breakpoint != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_memory_insert_breakpoint called\n");
  return gdbarch->memory_insert_breakpoint (gdbarch, bp_tgt);
}

void
set_gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch,
                                      gdbarch_memory_insert_breakpoint_ftype memory_insert_breakpoint)
{
  gdbarch->memory_insert_breakpoint = memory_insert_breakpoint;
}

int
gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, struct bp_target_info *bp_tgt)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->memory_remove_breakpoint != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_memory_remove_breakpoint called\n");
  return gdbarch->memory_remove_breakpoint (gdbarch, bp_tgt);
}

void
set_gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch,
                                      gdbarch_memory_remove_breakpoint_ftype memory_remove_breakpoint)
{
  gdbarch->memory_remove_breakpoint = memory_remove_breakpoint;
}

CORE_ADDR
gdbarch_decr_pc_after_break (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of decr_pc_after_break, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_decr_pc_after_break called\n");
  return gdbarch->decr_pc_after_break;
}

void
set_gdbarch_decr_pc_after_break (struct gdbarch *gdbarch,
                                 CORE_ADDR decr_pc_after_break)
{
  gdbarch->decr_pc_after_break = decr_pc_after_break;
}

CORE_ADDR
gdbarch_deprecated_function_start_offset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_function_start_offset, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_function_start_offset called\n");
  return gdbarch->deprecated_function_start_offset;
}

void
set_gdbarch_deprecated_function_start_offset (struct gdbarch *gdbarch,
                                              CORE_ADDR deprecated_function_start_offset)
{
  gdbarch->deprecated_function_start_offset = deprecated_function_start_offset;
}

int
gdbarch_remote_register_number (struct gdbarch *gdbarch, int regno)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->remote_register_number != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_remote_register_number called\n");
  return gdbarch->remote_register_number (gdbarch, regno);
}

void
set_gdbarch_remote_register_number (struct gdbarch *gdbarch,
                                    gdbarch_remote_register_number_ftype remote_register_number)
{
  gdbarch->remote_register_number = remote_register_number;
}

int
gdbarch_fetch_tls_load_module_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->fetch_tls_load_module_address != NULL;
}

CORE_ADDR
gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch, struct objfile *objfile)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->fetch_tls_load_module_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fetch_tls_load_module_address called\n");
  return gdbarch->fetch_tls_load_module_address (objfile);
}

void
set_gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch,
                                           gdbarch_fetch_tls_load_module_address_ftype fetch_tls_load_module_address)
{
  gdbarch->fetch_tls_load_module_address = fetch_tls_load_module_address;
}

CORE_ADDR
gdbarch_frame_args_skip (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of frame_args_skip, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_args_skip called\n");
  return gdbarch->frame_args_skip;
}

void
set_gdbarch_frame_args_skip (struct gdbarch *gdbarch,
                             CORE_ADDR frame_args_skip)
{
  gdbarch->frame_args_skip = frame_args_skip;
}

int
gdbarch_unwind_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_pc != NULL;
}

CORE_ADDR
gdbarch_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->unwind_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_pc called\n");
  return gdbarch->unwind_pc (gdbarch, next_frame);
}

void
set_gdbarch_unwind_pc (struct gdbarch *gdbarch,
                       gdbarch_unwind_pc_ftype unwind_pc)
{
  gdbarch->unwind_pc = unwind_pc;
}

int
gdbarch_unwind_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_sp != NULL;
}

CORE_ADDR
gdbarch_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->unwind_sp != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_sp called\n");
  return gdbarch->unwind_sp (gdbarch, next_frame);
}

void
set_gdbarch_unwind_sp (struct gdbarch *gdbarch,
                       gdbarch_unwind_sp_ftype unwind_sp)
{
  gdbarch->unwind_sp = unwind_sp;
}

int
gdbarch_frame_num_args_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_num_args != NULL;
}

int
gdbarch_frame_num_args (struct gdbarch *gdbarch, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->frame_num_args != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_num_args called\n");
  return gdbarch->frame_num_args (frame);
}

void
set_gdbarch_frame_num_args (struct gdbarch *gdbarch,
                            gdbarch_frame_num_args_ftype frame_num_args)
{
  gdbarch->frame_num_args = frame_num_args;
}

int
gdbarch_frame_align_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_align != NULL;
}

CORE_ADDR
gdbarch_frame_align (struct gdbarch *gdbarch, CORE_ADDR address)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->frame_align != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_align called\n");
  return gdbarch->frame_align (gdbarch, address);
}

void
set_gdbarch_frame_align (struct gdbarch *gdbarch,
                         gdbarch_frame_align_ftype frame_align)
{
  gdbarch->frame_align = frame_align;
}

int
gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->stabs_argument_has_addr != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stabs_argument_has_addr called\n");
  return gdbarch->stabs_argument_has_addr (gdbarch, type);
}

void
set_gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch,
                                     gdbarch_stabs_argument_has_addr_ftype stabs_argument_has_addr)
{
  gdbarch->stabs_argument_has_addr = stabs_argument_has_addr;
}

int
gdbarch_frame_red_zone_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_red_zone_size called\n");
  return gdbarch->frame_red_zone_size;
}

void
set_gdbarch_frame_red_zone_size (struct gdbarch *gdbarch,
                                 int frame_red_zone_size)
{
  gdbarch->frame_red_zone_size = frame_red_zone_size;
}

CORE_ADDR
gdbarch_convert_from_func_ptr_addr (struct gdbarch *gdbarch, CORE_ADDR addr, struct target_ops *targ)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->convert_from_func_ptr_addr != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_convert_from_func_ptr_addr called\n");
  return gdbarch->convert_from_func_ptr_addr (gdbarch, addr, targ);
}

void
set_gdbarch_convert_from_func_ptr_addr (struct gdbarch *gdbarch,
                                        gdbarch_convert_from_func_ptr_addr_ftype convert_from_func_ptr_addr)
{
  gdbarch->convert_from_func_ptr_addr = convert_from_func_ptr_addr;
}

CORE_ADDR
gdbarch_addr_bits_remove (struct gdbarch *gdbarch, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->addr_bits_remove != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_addr_bits_remove called\n");
  return gdbarch->addr_bits_remove (gdbarch, addr);
}

void
set_gdbarch_addr_bits_remove (struct gdbarch *gdbarch,
                              gdbarch_addr_bits_remove_ftype addr_bits_remove)
{
  gdbarch->addr_bits_remove = addr_bits_remove;
}

int
gdbarch_software_single_step_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->software_single_step != NULL;
}

int
gdbarch_software_single_step (struct gdbarch *gdbarch, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->software_single_step != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_software_single_step called\n");
  return gdbarch->software_single_step (frame);
}

void
set_gdbarch_software_single_step (struct gdbarch *gdbarch,
                                  gdbarch_software_single_step_ftype software_single_step)
{
  gdbarch->software_single_step = software_single_step;
}

int
gdbarch_single_step_through_delay_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->single_step_through_delay != NULL;
}

int
gdbarch_single_step_through_delay (struct gdbarch *gdbarch, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->single_step_through_delay != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_single_step_through_delay called\n");
  return gdbarch->single_step_through_delay (gdbarch, frame);
}

void
set_gdbarch_single_step_through_delay (struct gdbarch *gdbarch,
                                       gdbarch_single_step_through_delay_ftype single_step_through_delay)
{
  gdbarch->single_step_through_delay = single_step_through_delay;
}

int
gdbarch_print_insn (struct gdbarch *gdbarch, bfd_vma vma, struct disassemble_info *info)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->print_insn != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_insn called\n");
  return gdbarch->print_insn (vma, info);
}

void
set_gdbarch_print_insn (struct gdbarch *gdbarch,
                        gdbarch_print_insn_ftype print_insn)
{
  gdbarch->print_insn = print_insn;
}

CORE_ADDR
gdbarch_skip_trampoline_code (struct gdbarch *gdbarch, struct frame_info *frame, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->skip_trampoline_code != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_trampoline_code called\n");
  return gdbarch->skip_trampoline_code (frame, pc);
}

void
set_gdbarch_skip_trampoline_code (struct gdbarch *gdbarch,
                                  gdbarch_skip_trampoline_code_ftype skip_trampoline_code)
{
  gdbarch->skip_trampoline_code = skip_trampoline_code;
}

CORE_ADDR
gdbarch_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->skip_solib_resolver != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_solib_resolver called\n");
  return gdbarch->skip_solib_resolver (gdbarch, pc);
}

void
set_gdbarch_skip_solib_resolver (struct gdbarch *gdbarch,
                                 gdbarch_skip_solib_resolver_ftype skip_solib_resolver)
{
  gdbarch->skip_solib_resolver = skip_solib_resolver;
}

int
gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch, CORE_ADDR pc, const char *name)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->in_solib_return_trampoline != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_in_solib_return_trampoline called\n");
  return gdbarch->in_solib_return_trampoline (gdbarch, pc, name);
}

void
set_gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch,
                                        gdbarch_in_solib_return_trampoline_ftype in_solib_return_trampoline)
{
  gdbarch->in_solib_return_trampoline = in_solib_return_trampoline;
}

int
gdbarch_in_function_epilogue_p (struct gdbarch *gdbarch, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->in_function_epilogue_p != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_in_function_epilogue_p called\n");
  return gdbarch->in_function_epilogue_p (gdbarch, addr);
}

void
set_gdbarch_in_function_epilogue_p (struct gdbarch *gdbarch,
                                    gdbarch_in_function_epilogue_p_ftype in_function_epilogue_p)
{
  gdbarch->in_function_epilogue_p = in_function_epilogue_p;
}

void
gdbarch_elf_make_msymbol_special (struct gdbarch *gdbarch, asymbol *sym, struct minimal_symbol *msym)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->elf_make_msymbol_special != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_elf_make_msymbol_special called\n");
  gdbarch->elf_make_msymbol_special (sym, msym);
}

void
set_gdbarch_elf_make_msymbol_special (struct gdbarch *gdbarch,
                                      gdbarch_elf_make_msymbol_special_ftype elf_make_msymbol_special)
{
  gdbarch->elf_make_msymbol_special = elf_make_msymbol_special;
}

void
gdbarch_coff_make_msymbol_special (struct gdbarch *gdbarch, int val, struct minimal_symbol *msym)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->coff_make_msymbol_special != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_coff_make_msymbol_special called\n");
  gdbarch->coff_make_msymbol_special (val, msym);
}

void
set_gdbarch_coff_make_msymbol_special (struct gdbarch *gdbarch,
                                       gdbarch_coff_make_msymbol_special_ftype coff_make_msymbol_special)
{
  gdbarch->coff_make_msymbol_special = coff_make_msymbol_special;
}

int
gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of cannot_step_breakpoint, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_step_breakpoint called\n");
  return gdbarch->cannot_step_breakpoint;
}

void
set_gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch,
                                    int cannot_step_breakpoint)
{
  gdbarch->cannot_step_breakpoint = cannot_step_breakpoint;
}

int
gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_have_nonsteppable_watchpoint called\n");
  return gdbarch->have_nonsteppable_watchpoint;
}

void
set_gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch,
                                          int have_nonsteppable_watchpoint)
{
  gdbarch->have_nonsteppable_watchpoint = have_nonsteppable_watchpoint;
}

int
gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags != NULL;
}

int
gdbarch_address_class_type_flags (struct gdbarch *gdbarch, int byte_size, int dwarf2_addr_class)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->address_class_type_flags != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags called\n");
  return gdbarch->address_class_type_flags (byte_size, dwarf2_addr_class);
}

void
set_gdbarch_address_class_type_flags (struct gdbarch *gdbarch,
                                      gdbarch_address_class_type_flags_ftype address_class_type_flags)
{
  gdbarch->address_class_type_flags = address_class_type_flags;
}

int
gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags_to_name != NULL;
}

const char *
gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch, int type_flags)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->address_class_type_flags_to_name != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags_to_name called\n");
  return gdbarch->address_class_type_flags_to_name (gdbarch, type_flags);
}

void
set_gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch,
                                              gdbarch_address_class_type_flags_to_name_ftype address_class_type_flags_to_name)
{
  gdbarch->address_class_type_flags_to_name = address_class_type_flags_to_name;
}

int
gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_name_to_type_flags != NULL;
}

int
gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, const char *name, int *type_flags_ptr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->address_class_name_to_type_flags != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_name_to_type_flags called\n");
  return gdbarch->address_class_name_to_type_flags (gdbarch, name, type_flags_ptr);
}

void
set_gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch,
                                              gdbarch_address_class_name_to_type_flags_ftype address_class_name_to_type_flags)
{
  gdbarch->address_class_name_to_type_flags = address_class_name_to_type_flags;
}

int
gdbarch_register_reggroup_p (struct gdbarch *gdbarch, int regnum, struct reggroup *reggroup)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_reggroup_p != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_reggroup_p called\n");
  return gdbarch->register_reggroup_p (gdbarch, regnum, reggroup);
}

void
set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch,
                                 gdbarch_register_reggroup_p_ftype register_reggroup_p)
{
  gdbarch->register_reggroup_p = register_reggroup_p;
}

int
gdbarch_fetch_pointer_argument_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->fetch_pointer_argument != NULL;
}

CORE_ADDR
gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch, struct frame_info *frame, int argi, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->fetch_pointer_argument != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fetch_pointer_argument called\n");
  return gdbarch->fetch_pointer_argument (frame, argi, type);
}

void
set_gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch,
                                    gdbarch_fetch_pointer_argument_ftype fetch_pointer_argument)
{
  gdbarch->fetch_pointer_argument = fetch_pointer_argument;
}

int
gdbarch_regset_from_core_section_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->regset_from_core_section != NULL;
}

const struct regset *
gdbarch_regset_from_core_section (struct gdbarch *gdbarch, const char *sect_name, size_t sect_size)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->regset_from_core_section != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_regset_from_core_section called\n");
  return gdbarch->regset_from_core_section (gdbarch, sect_name, sect_size);
}

void
set_gdbarch_regset_from_core_section (struct gdbarch *gdbarch,
                                      gdbarch_regset_from_core_section_ftype regset_from_core_section)
{
  gdbarch->regset_from_core_section = regset_from_core_section;
}

struct core_regset_section *
gdbarch_core_regset_sections (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_core_regset_sections called\n");
  return gdbarch->core_regset_sections;
}

void
set_gdbarch_core_regset_sections (struct gdbarch *gdbarch,
                                  struct core_regset_section * core_regset_sections)
{
  gdbarch->core_regset_sections = core_regset_sections;
}

int
gdbarch_make_corefile_notes_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->make_corefile_notes != NULL;
}

char *
gdbarch_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd, int *note_size)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->make_corefile_notes != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_make_corefile_notes called\n");
  return gdbarch->make_corefile_notes (gdbarch, obfd, note_size);
}

void
set_gdbarch_make_corefile_notes (struct gdbarch *gdbarch,
                                 gdbarch_make_corefile_notes_ftype make_corefile_notes)
{
  gdbarch->make_corefile_notes = make_corefile_notes;
}

int
gdbarch_elfcore_write_linux_prpsinfo_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->elfcore_write_linux_prpsinfo != NULL;
}

char *
gdbarch_elfcore_write_linux_prpsinfo (struct gdbarch *gdbarch, bfd *obfd, char *note_data, int *note_size, const struct elf_internal_linux_prpsinfo *info)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->elfcore_write_linux_prpsinfo != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_elfcore_write_linux_prpsinfo called\n");
  return gdbarch->elfcore_write_linux_prpsinfo (obfd, note_data, note_size, info);
}

void
set_gdbarch_elfcore_write_linux_prpsinfo (struct gdbarch *gdbarch,
                                          gdbarch_elfcore_write_linux_prpsinfo_ftype elfcore_write_linux_prpsinfo)
{
  gdbarch->elfcore_write_linux_prpsinfo = elfcore_write_linux_prpsinfo;
}

int
gdbarch_find_memory_regions_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->find_memory_regions != NULL;
}

int
gdbarch_find_memory_regions (struct gdbarch *gdbarch, find_memory_region_ftype func, void *data)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->find_memory_regions != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_find_memory_regions called\n");
  return gdbarch->find_memory_regions (gdbarch, func, data);
}

void
set_gdbarch_find_memory_regions (struct gdbarch *gdbarch,
                                 gdbarch_find_memory_regions_ftype find_memory_regions)
{
  gdbarch->find_memory_regions = find_memory_regions;
}

int
gdbarch_core_xfer_shared_libraries_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->core_xfer_shared_libraries != NULL;
}

LONGEST
gdbarch_core_xfer_shared_libraries (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, LONGEST len)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->core_xfer_shared_libraries != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_core_xfer_shared_libraries called\n");
  return gdbarch->core_xfer_shared_libraries (gdbarch, readbuf, offset, len);
}

void
set_gdbarch_core_xfer_shared_libraries (struct gdbarch *gdbarch,
                                        gdbarch_core_xfer_shared_libraries_ftype core_xfer_shared_libraries)
{
  gdbarch->core_xfer_shared_libraries = core_xfer_shared_libraries;
}

int
gdbarch_core_xfer_shared_libraries_aix_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->core_xfer_shared_libraries_aix != NULL;
}

LONGEST
gdbarch_core_xfer_shared_libraries_aix (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, LONGEST len)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->core_xfer_shared_libraries_aix != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_core_xfer_shared_libraries_aix called\n");
  return gdbarch->core_xfer_shared_libraries_aix (gdbarch, readbuf, offset, len);
}

void
set_gdbarch_core_xfer_shared_libraries_aix (struct gdbarch *gdbarch,
                                            gdbarch_core_xfer_shared_libraries_aix_ftype core_xfer_shared_libraries_aix)
{
  gdbarch->core_xfer_shared_libraries_aix = core_xfer_shared_libraries_aix;
}

int
gdbarch_core_pid_to_str_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->core_pid_to_str != NULL;
}

char *
gdbarch_core_pid_to_str (struct gdbarch *gdbarch, ptid_t ptid)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->core_pid_to_str != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_core_pid_to_str called\n");
  return gdbarch->core_pid_to_str (gdbarch, ptid);
}

void
set_gdbarch_core_pid_to_str (struct gdbarch *gdbarch,
                             gdbarch_core_pid_to_str_ftype core_pid_to_str)
{
  gdbarch->core_pid_to_str = core_pid_to_str;
}

int
gdbarch_gcore_bfd_target_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->gcore_bfd_target != 0;
}

const char *
gdbarch_gcore_bfd_target (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->gcore_bfd_target != 0);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_gcore_bfd_target called\n");
  return gdbarch->gcore_bfd_target;
}

void
set_gdbarch_gcore_bfd_target (struct gdbarch *gdbarch,
                              const char * gcore_bfd_target)
{
  gdbarch->gcore_bfd_target = gcore_bfd_target;
}

int
gdbarch_vtable_function_descriptors (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of vtable_function_descriptors, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_vtable_function_descriptors called\n");
  return gdbarch->vtable_function_descriptors;
}

void
set_gdbarch_vtable_function_descriptors (struct gdbarch *gdbarch,
                                         int vtable_function_descriptors)
{
  gdbarch->vtable_function_descriptors = vtable_function_descriptors;
}

int
gdbarch_vbit_in_delta (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of vbit_in_delta, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_vbit_in_delta called\n");
  return gdbarch->vbit_in_delta;
}

void
set_gdbarch_vbit_in_delta (struct gdbarch *gdbarch,
                           int vbit_in_delta)
{
  gdbarch->vbit_in_delta = vbit_in_delta;
}

int
gdbarch_skip_permanent_breakpoint_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->skip_permanent_breakpoint != NULL;
}

void
gdbarch_skip_permanent_breakpoint (struct gdbarch *gdbarch, struct regcache *regcache)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->skip_permanent_breakpoint != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_permanent_breakpoint called\n");
  gdbarch->skip_permanent_breakpoint (regcache);
}

void
set_gdbarch_skip_permanent_breakpoint (struct gdbarch *gdbarch,
                                       gdbarch_skip_permanent_breakpoint_ftype skip_permanent_breakpoint)
{
  gdbarch->skip_permanent_breakpoint = skip_permanent_breakpoint;
}

int
gdbarch_max_insn_length_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->max_insn_length != 0;
}

ULONGEST
gdbarch_max_insn_length (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->max_insn_length != 0);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_max_insn_length called\n");
  return gdbarch->max_insn_length;
}

void
set_gdbarch_max_insn_length (struct gdbarch *gdbarch,
                             ULONGEST max_insn_length)
{
  gdbarch->max_insn_length = max_insn_length;
}

int
gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->displaced_step_copy_insn != NULL;
}

struct displaced_step_closure *
gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->displaced_step_copy_insn != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_displaced_step_copy_insn called\n");
  return gdbarch->displaced_step_copy_insn (gdbarch, from, to, regs);
}

void
set_gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch,
                                      gdbarch_displaced_step_copy_insn_ftype displaced_step_copy_insn)
{
  gdbarch->displaced_step_copy_insn = displaced_step_copy_insn;
}

int
gdbarch_displaced_step_hw_singlestep (struct gdbarch *gdbarch, struct displaced_step_closure *closure)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->displaced_step_hw_singlestep != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_displaced_step_hw_singlestep called\n");
  return gdbarch->displaced_step_hw_singlestep (gdbarch, closure);
}

void
set_gdbarch_displaced_step_hw_singlestep (struct gdbarch *gdbarch,
                                          gdbarch_displaced_step_hw_singlestep_ftype displaced_step_hw_singlestep)
{
  gdbarch->displaced_step_hw_singlestep = displaced_step_hw_singlestep;
}

int
gdbarch_displaced_step_fixup_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->displaced_step_fixup != NULL;
}

void
gdbarch_displaced_step_fixup (struct gdbarch *gdbarch, struct displaced_step_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->displaced_step_fixup != NULL);
  /* Do not check predicate: gdbarch->displaced_step_fixup != NULL, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_displaced_step_fixup called\n");
  gdbarch->displaced_step_fixup (gdbarch, closure, from, to, regs);
}

void
set_gdbarch_displaced_step_fixup (struct gdbarch *gdbarch,
                                  gdbarch_displaced_step_fixup_ftype displaced_step_fixup)
{
  gdbarch->displaced_step_fixup = displaced_step_fixup;
}

void
gdbarch_displaced_step_free_closure (struct gdbarch *gdbarch, struct displaced_step_closure *closure)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->displaced_step_free_closure != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_displaced_step_free_closure called\n");
  gdbarch->displaced_step_free_closure (gdbarch, closure);
}

void
set_gdbarch_displaced_step_free_closure (struct gdbarch *gdbarch,
                                         gdbarch_displaced_step_free_closure_ftype displaced_step_free_closure)
{
  gdbarch->displaced_step_free_closure = displaced_step_free_closure;
}

CORE_ADDR
gdbarch_displaced_step_location (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->displaced_step_location != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_displaced_step_location called\n");
  return gdbarch->displaced_step_location (gdbarch);
}

void
set_gdbarch_displaced_step_location (struct gdbarch *gdbarch,
                                     gdbarch_displaced_step_location_ftype displaced_step_location)
{
  gdbarch->displaced_step_location = displaced_step_location;
}

int
gdbarch_relocate_instruction_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->relocate_instruction != NULL;
}

void
gdbarch_relocate_instruction (struct gdbarch *gdbarch, CORE_ADDR *to, CORE_ADDR from)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->relocate_instruction != NULL);
  /* Do not check predicate: gdbarch->relocate_instruction != NULL, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_relocate_instruction called\n");
  gdbarch->relocate_instruction (gdbarch, to, from);
}

void
set_gdbarch_relocate_instruction (struct gdbarch *gdbarch,
                                  gdbarch_relocate_instruction_ftype relocate_instruction)
{
  gdbarch->relocate_instruction = relocate_instruction;
}

int
gdbarch_overlay_update_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->overlay_update != NULL;
}

void
gdbarch_overlay_update (struct gdbarch *gdbarch, struct obj_section *osect)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->overlay_update != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_overlay_update called\n");
  gdbarch->overlay_update (osect);
}

void
set_gdbarch_overlay_update (struct gdbarch *gdbarch,
                            gdbarch_overlay_update_ftype overlay_update)
{
  gdbarch->overlay_update = overlay_update;
}

int
gdbarch_core_read_description_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->core_read_description != NULL;
}

const struct target_desc *
gdbarch_core_read_description (struct gdbarch *gdbarch, struct target_ops *target, bfd *abfd)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->core_read_description != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_core_read_description called\n");
  return gdbarch->core_read_description (gdbarch, target, abfd);
}

void
set_gdbarch_core_read_description (struct gdbarch *gdbarch,
                                   gdbarch_core_read_description_ftype core_read_description)
{
  gdbarch->core_read_description = core_read_description;
}

int
gdbarch_static_transform_name_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->static_transform_name != NULL;
}

const char *
gdbarch_static_transform_name (struct gdbarch *gdbarch, const char *name)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->static_transform_name != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_static_transform_name called\n");
  return gdbarch->static_transform_name (name);
}

void
set_gdbarch_static_transform_name (struct gdbarch *gdbarch,
                                   gdbarch_static_transform_name_ftype static_transform_name)
{
  gdbarch->static_transform_name = static_transform_name;
}

int
gdbarch_sofun_address_maybe_missing (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of sofun_address_maybe_missing, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sofun_address_maybe_missing called\n");
  return gdbarch->sofun_address_maybe_missing;
}

void
set_gdbarch_sofun_address_maybe_missing (struct gdbarch *gdbarch,
                                         int sofun_address_maybe_missing)
{
  gdbarch->sofun_address_maybe_missing = sofun_address_maybe_missing;
}

int
gdbarch_process_record_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->process_record != NULL;
}

int
gdbarch_process_record (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->process_record != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_process_record called\n");
  return gdbarch->process_record (gdbarch, regcache, addr);
}

void
set_gdbarch_process_record (struct gdbarch *gdbarch,
                            gdbarch_process_record_ftype process_record)
{
  gdbarch->process_record = process_record;
}

int
gdbarch_process_record_signal_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->process_record_signal != NULL;
}

int
gdbarch_process_record_signal (struct gdbarch *gdbarch, struct regcache *regcache, enum gdb_signal signal)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->process_record_signal != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_process_record_signal called\n");
  return gdbarch->process_record_signal (gdbarch, regcache, signal);
}

void
set_gdbarch_process_record_signal (struct gdbarch *gdbarch,
                                   gdbarch_process_record_signal_ftype process_record_signal)
{
  gdbarch->process_record_signal = process_record_signal;
}

int
gdbarch_gdb_signal_from_target_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->gdb_signal_from_target != NULL;
}

enum gdb_signal
gdbarch_gdb_signal_from_target (struct gdbarch *gdbarch, int signo)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->gdb_signal_from_target != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_gdb_signal_from_target called\n");
  return gdbarch->gdb_signal_from_target (gdbarch, signo);
}

void
set_gdbarch_gdb_signal_from_target (struct gdbarch *gdbarch,
                                    gdbarch_gdb_signal_from_target_ftype gdb_signal_from_target)
{
  gdbarch->gdb_signal_from_target = gdb_signal_from_target;
}

int
gdbarch_gdb_signal_to_target_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->gdb_signal_to_target != NULL;
}

int
gdbarch_gdb_signal_to_target (struct gdbarch *gdbarch, enum gdb_signal signal)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->gdb_signal_to_target != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_gdb_signal_to_target called\n");
  return gdbarch->gdb_signal_to_target (gdbarch, signal);
}

void
set_gdbarch_gdb_signal_to_target (struct gdbarch *gdbarch,
                                  gdbarch_gdb_signal_to_target_ftype gdb_signal_to_target)
{
  gdbarch->gdb_signal_to_target = gdb_signal_to_target;
}

int
gdbarch_get_siginfo_type_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->get_siginfo_type != NULL;
}

struct type *
gdbarch_get_siginfo_type (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->get_siginfo_type != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_siginfo_type called\n");
  return gdbarch->get_siginfo_type (gdbarch);
}

void
set_gdbarch_get_siginfo_type (struct gdbarch *gdbarch,
                              gdbarch_get_siginfo_type_ftype get_siginfo_type)
{
  gdbarch->get_siginfo_type = get_siginfo_type;
}

int
gdbarch_record_special_symbol_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->record_special_symbol != NULL;
}

void
gdbarch_record_special_symbol (struct gdbarch *gdbarch, struct objfile *objfile, asymbol *sym)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->record_special_symbol != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_record_special_symbol called\n");
  gdbarch->record_special_symbol (gdbarch, objfile, sym);
}

void
set_gdbarch_record_special_symbol (struct gdbarch *gdbarch,
                                   gdbarch_record_special_symbol_ftype record_special_symbol)
{
  gdbarch->record_special_symbol = record_special_symbol;
}

int
gdbarch_get_syscall_number_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->get_syscall_number != NULL;
}

LONGEST
gdbarch_get_syscall_number (struct gdbarch *gdbarch, ptid_t ptid)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->get_syscall_number != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_syscall_number called\n");
  return gdbarch->get_syscall_number (gdbarch, ptid);
}

void
set_gdbarch_get_syscall_number (struct gdbarch *gdbarch,
                                gdbarch_get_syscall_number_ftype get_syscall_number)
{
  gdbarch->get_syscall_number = get_syscall_number;
}

const char *
gdbarch_stap_integer_prefix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_integer_prefix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_integer_prefix called\n");
  return gdbarch->stap_integer_prefix;
}

void
set_gdbarch_stap_integer_prefix (struct gdbarch *gdbarch,
                                 const char * stap_integer_prefix)
{
  gdbarch->stap_integer_prefix = stap_integer_prefix;
}

const char *
gdbarch_stap_integer_suffix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_integer_suffix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_integer_suffix called\n");
  return gdbarch->stap_integer_suffix;
}

void
set_gdbarch_stap_integer_suffix (struct gdbarch *gdbarch,
                                 const char * stap_integer_suffix)
{
  gdbarch->stap_integer_suffix = stap_integer_suffix;
}

const char *
gdbarch_stap_register_prefix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_register_prefix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_register_prefix called\n");
  return gdbarch->stap_register_prefix;
}

void
set_gdbarch_stap_register_prefix (struct gdbarch *gdbarch,
                                  const char * stap_register_prefix)
{
  gdbarch->stap_register_prefix = stap_register_prefix;
}

const char *
gdbarch_stap_register_suffix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_register_suffix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_register_suffix called\n");
  return gdbarch->stap_register_suffix;
}

void
set_gdbarch_stap_register_suffix (struct gdbarch *gdbarch,
                                  const char * stap_register_suffix)
{
  gdbarch->stap_register_suffix = stap_register_suffix;
}

const char *
gdbarch_stap_register_indirection_prefix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_register_indirection_prefix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_register_indirection_prefix called\n");
  return gdbarch->stap_register_indirection_prefix;
}

void
set_gdbarch_stap_register_indirection_prefix (struct gdbarch *gdbarch,
                                              const char * stap_register_indirection_prefix)
{
  gdbarch->stap_register_indirection_prefix = stap_register_indirection_prefix;
}

const char *
gdbarch_stap_register_indirection_suffix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_register_indirection_suffix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_register_indirection_suffix called\n");
  return gdbarch->stap_register_indirection_suffix;
}

void
set_gdbarch_stap_register_indirection_suffix (struct gdbarch *gdbarch,
                                              const char * stap_register_indirection_suffix)
{
  gdbarch->stap_register_indirection_suffix = stap_register_indirection_suffix;
}

const char *
gdbarch_stap_gdb_register_prefix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_gdb_register_prefix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_gdb_register_prefix called\n");
  return gdbarch->stap_gdb_register_prefix;
}

void
set_gdbarch_stap_gdb_register_prefix (struct gdbarch *gdbarch,
                                      const char * stap_gdb_register_prefix)
{
  gdbarch->stap_gdb_register_prefix = stap_gdb_register_prefix;
}

const char *
gdbarch_stap_gdb_register_suffix (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of stap_gdb_register_suffix, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_gdb_register_suffix called\n");
  return gdbarch->stap_gdb_register_suffix;
}

void
set_gdbarch_stap_gdb_register_suffix (struct gdbarch *gdbarch,
                                      const char * stap_gdb_register_suffix)
{
  gdbarch->stap_gdb_register_suffix = stap_gdb_register_suffix;
}

int
gdbarch_stap_is_single_operand_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->stap_is_single_operand != NULL;
}

int
gdbarch_stap_is_single_operand (struct gdbarch *gdbarch, const char *s)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->stap_is_single_operand != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_is_single_operand called\n");
  return gdbarch->stap_is_single_operand (gdbarch, s);
}

void
set_gdbarch_stap_is_single_operand (struct gdbarch *gdbarch,
                                    gdbarch_stap_is_single_operand_ftype stap_is_single_operand)
{
  gdbarch->stap_is_single_operand = stap_is_single_operand;
}

int
gdbarch_stap_parse_special_token_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->stap_parse_special_token != NULL;
}

int
gdbarch_stap_parse_special_token (struct gdbarch *gdbarch, struct stap_parse_info *p)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->stap_parse_special_token != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stap_parse_special_token called\n");
  return gdbarch->stap_parse_special_token (gdbarch, p);
}

void
set_gdbarch_stap_parse_special_token (struct gdbarch *gdbarch,
                                      gdbarch_stap_parse_special_token_ftype stap_parse_special_token)
{
  gdbarch->stap_parse_special_token = stap_parse_special_token;
}

int
gdbarch_has_global_solist (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of has_global_solist, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_has_global_solist called\n");
  return gdbarch->has_global_solist;
}

void
set_gdbarch_has_global_solist (struct gdbarch *gdbarch,
                               int has_global_solist)
{
  gdbarch->has_global_solist = has_global_solist;
}

int
gdbarch_has_global_breakpoints (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of has_global_breakpoints, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_has_global_breakpoints called\n");
  return gdbarch->has_global_breakpoints;
}

void
set_gdbarch_has_global_breakpoints (struct gdbarch *gdbarch,
                                    int has_global_breakpoints)
{
  gdbarch->has_global_breakpoints = has_global_breakpoints;
}

int
gdbarch_has_shared_address_space (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->has_shared_address_space != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_has_shared_address_space called\n");
  return gdbarch->has_shared_address_space (gdbarch);
}

void
set_gdbarch_has_shared_address_space (struct gdbarch *gdbarch,
                                      gdbarch_has_shared_address_space_ftype has_shared_address_space)
{
  gdbarch->has_shared_address_space = has_shared_address_space;
}

int
gdbarch_fast_tracepoint_valid_at (struct gdbarch *gdbarch, CORE_ADDR addr, int *isize, char **msg)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->fast_tracepoint_valid_at != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fast_tracepoint_valid_at called\n");
  return gdbarch->fast_tracepoint_valid_at (gdbarch, addr, isize, msg);
}

void
set_gdbarch_fast_tracepoint_valid_at (struct gdbarch *gdbarch,
                                      gdbarch_fast_tracepoint_valid_at_ftype fast_tracepoint_valid_at)
{
  gdbarch->fast_tracepoint_valid_at = fast_tracepoint_valid_at;
}

const char *
gdbarch_auto_charset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->auto_charset != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_auto_charset called\n");
  return gdbarch->auto_charset ();
}

void
set_gdbarch_auto_charset (struct gdbarch *gdbarch,
                          gdbarch_auto_charset_ftype auto_charset)
{
  gdbarch->auto_charset = auto_charset;
}

const char *
gdbarch_auto_wide_charset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->auto_wide_charset != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_auto_wide_charset called\n");
  return gdbarch->auto_wide_charset ();
}

void
set_gdbarch_auto_wide_charset (struct gdbarch *gdbarch,
                               gdbarch_auto_wide_charset_ftype auto_wide_charset)
{
  gdbarch->auto_wide_charset = auto_wide_charset;
}

const char *
gdbarch_solib_symbols_extension (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_solib_symbols_extension called\n");
  return gdbarch->solib_symbols_extension;
}

void
set_gdbarch_solib_symbols_extension (struct gdbarch *gdbarch,
                                     const char * solib_symbols_extension)
{
  gdbarch->solib_symbols_extension = solib_symbols_extension;
}

int
gdbarch_has_dos_based_file_system (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of has_dos_based_file_system, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_has_dos_based_file_system called\n");
  return gdbarch->has_dos_based_file_system;
}

void
set_gdbarch_has_dos_based_file_system (struct gdbarch *gdbarch,
                                       int has_dos_based_file_system)
{
  gdbarch->has_dos_based_file_system = has_dos_based_file_system;
}

void
gdbarch_gen_return_address (struct gdbarch *gdbarch, struct agent_expr *ax, struct axs_value *value, CORE_ADDR scope)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->gen_return_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_gen_return_address called\n");
  gdbarch->gen_return_address (gdbarch, ax, value, scope);
}

void
set_gdbarch_gen_return_address (struct gdbarch *gdbarch,
                                gdbarch_gen_return_address_ftype gen_return_address)
{
  gdbarch->gen_return_address = gen_return_address;
}

int
gdbarch_info_proc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->info_proc != NULL;
}

void
gdbarch_info_proc (struct gdbarch *gdbarch, char *args, enum info_proc_what what)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->info_proc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_info_proc called\n");
  gdbarch->info_proc (gdbarch, args, what);
}

void
set_gdbarch_info_proc (struct gdbarch *gdbarch,
                       gdbarch_info_proc_ftype info_proc)
{
  gdbarch->info_proc = info_proc;
}

int
gdbarch_core_info_proc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->core_info_proc != NULL;
}

void
gdbarch_core_info_proc (struct gdbarch *gdbarch, char *args, enum info_proc_what what)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->core_info_proc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_core_info_proc called\n");
  gdbarch->core_info_proc (gdbarch, args, what);
}

void
set_gdbarch_core_info_proc (struct gdbarch *gdbarch,
                            gdbarch_core_info_proc_ftype core_info_proc)
{
  gdbarch->core_info_proc = core_info_proc;
}

void
gdbarch_iterate_over_objfiles_in_search_order (struct gdbarch *gdbarch, iterate_over_objfiles_in_search_order_cb_ftype *cb, void *cb_data, struct objfile *current_objfile)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->iterate_over_objfiles_in_search_order != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_iterate_over_objfiles_in_search_order called\n");
  gdbarch->iterate_over_objfiles_in_search_order (gdbarch, cb, cb_data, current_objfile);
}

void
set_gdbarch_iterate_over_objfiles_in_search_order (struct gdbarch *gdbarch,
                                                   gdbarch_iterate_over_objfiles_in_search_order_ftype iterate_over_objfiles_in_search_order)
{
  gdbarch->iterate_over_objfiles_in_search_order = iterate_over_objfiles_in_search_order;
}

struct ravenscar_arch_ops *
gdbarch_ravenscar_ops (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of ravenscar_ops, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ravenscar_ops called\n");
  return gdbarch->ravenscar_ops;
}

void
set_gdbarch_ravenscar_ops (struct gdbarch *gdbarch,
                           struct ravenscar_arch_ops * ravenscar_ops)
{
  gdbarch->ravenscar_ops = ravenscar_ops;
}


/* Keep a registry of per-architecture data-pointers required by GDB
   modules.  */

struct gdbarch_data
{
  unsigned index;
  int init_p;
  gdbarch_data_pre_init_ftype *pre_init;
  gdbarch_data_post_init_ftype *post_init;
};

struct gdbarch_data_registration
{
  struct gdbarch_data *data;
  struct gdbarch_data_registration *next;
};

struct gdbarch_data_registry
{
  unsigned nr;
  struct gdbarch_data_registration *registrations;
};

struct gdbarch_data_registry gdbarch_data_registry =
{
  0, NULL,
};

static struct gdbarch_data *
gdbarch_data_register (gdbarch_data_pre_init_ftype *pre_init,
		       gdbarch_data_post_init_ftype *post_init)
{
  struct gdbarch_data_registration **curr;

  /* Append the new registration.  */
  for (curr = &gdbarch_data_registry.registrations;
       (*curr) != NULL;
       curr = &(*curr)->next);
  (*curr) = XMALLOC (struct gdbarch_data_registration);
  (*curr)->next = NULL;
  (*curr)->data = XMALLOC (struct gdbarch_data);
  (*curr)->data->index = gdbarch_data_registry.nr++;
  (*curr)->data->pre_init = pre_init;
  (*curr)->data->post_init = post_init;
  (*curr)->data->init_p = 1;
  return (*curr)->data;
}

struct gdbarch_data *
gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *pre_init)
{
  return gdbarch_data_register (pre_init, NULL);
}

struct gdbarch_data *
gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *post_init)
{
  return gdbarch_data_register (NULL, post_init);
}

/* Create/delete the gdbarch data vector.  */

static void
alloc_gdbarch_data (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch->data == NULL);
  gdbarch->nr_data = gdbarch_data_registry.nr;
  gdbarch->data = GDBARCH_OBSTACK_CALLOC (gdbarch, gdbarch->nr_data, void *);
}

/* Initialize the current value of the specified per-architecture
   data-pointer.  */

void
deprecated_set_gdbarch_data (struct gdbarch *gdbarch,
			     struct gdbarch_data *data,
			     void *pointer)
{
  gdb_assert (data->index < gdbarch->nr_data);
  gdb_assert (gdbarch->data[data->index] == NULL);
  gdb_assert (data->pre_init == NULL);
  gdbarch->data[data->index] = pointer;
}

/* Return the current value of the specified per-architecture
   data-pointer.  */

void *
gdbarch_data (struct gdbarch *gdbarch, struct gdbarch_data *data)
{
  gdb_assert (data->index < gdbarch->nr_data);
  if (gdbarch->data[data->index] == NULL)
    {
      /* The data-pointer isn't initialized, call init() to get a
	 value.  */
      if (data->pre_init != NULL)
	/* Mid architecture creation: pass just the obstack, and not
	   the entire architecture, as that way it isn't possible for
	   pre-init code to refer to undefined architecture
	   fields.  */
	gdbarch->data[data->index] = data->pre_init (gdbarch->obstack);
      else if (gdbarch->initialized_p
	       && data->post_init != NULL)
	/* Post architecture creation: pass the entire architecture
	   (as all fields are valid), but be careful to also detect
	   recursive references.  */
	{
	  gdb_assert (data->init_p);
	  data->init_p = 0;
	  gdbarch->data[data->index] = data->post_init (gdbarch);
	  data->init_p = 1;
	}
      else
	/* The architecture initialization hasn't completed - punt -
	 hope that the caller knows what they are doing.  Once
	 deprecated_set_gdbarch_data has been initialized, this can be
	 changed to an internal error.  */
	return NULL;
      gdb_assert (gdbarch->data[data->index] != NULL);
    }
  return gdbarch->data[data->index];
}


/* Keep a registry of the architectures known by GDB.  */

struct gdbarch_registration
{
  enum bfd_architecture bfd_architecture;
  gdbarch_init_ftype *init;
  gdbarch_dump_tdep_ftype *dump_tdep;
  struct gdbarch_list *arches;
  struct gdbarch_registration *next;
};

static struct gdbarch_registration *gdbarch_registry = NULL;

static void
append_name (const char ***buf, int *nr, const char *name)
{
  *buf = xrealloc (*buf, sizeof (char**) * (*nr + 1));
  (*buf)[*nr] = name;
  *nr += 1;
}

const char **
gdbarch_printable_names (void)
{
  /* Accumulate a list of names based on the registed list of
     architectures.  */
  int nr_arches = 0;
  const char **arches = NULL;
  struct gdbarch_registration *rego;

  for (rego = gdbarch_registry;
       rego != NULL;
       rego = rego->next)
    {
      const struct bfd_arch_info *ap;
      ap = bfd_lookup_arch (rego->bfd_architecture, 0);
      if (ap == NULL)
        internal_error (__FILE__, __LINE__,
                        _("gdbarch_architecture_names: multi-arch unknown"));
      do
        {
          append_name (&arches, &nr_arches, ap->printable_name);
          ap = ap->next;
        }
      while (ap != NULL);
    }
  append_name (&arches, &nr_arches, NULL);
  return arches;
}


void
gdbarch_register (enum bfd_architecture bfd_architecture,
                  gdbarch_init_ftype *init,
		  gdbarch_dump_tdep_ftype *dump_tdep)
{
  struct gdbarch_registration **curr;
  const struct bfd_arch_info *bfd_arch_info;

  /* Check that BFD recognizes this architecture */
  bfd_arch_info = bfd_lookup_arch (bfd_architecture, 0);
  if (bfd_arch_info == NULL)
    {
      internal_error (__FILE__, __LINE__,
                      _("gdbarch: Attempt to register "
			"unknown architecture (%d)"),
                      bfd_architecture);
    }
  /* Check that we haven't seen this architecture before.  */
  for (curr = &gdbarch_registry;
       (*curr) != NULL;
       curr = &(*curr)->next)
    {
      if (bfd_architecture == (*curr)->bfd_architecture)
	internal_error (__FILE__, __LINE__,
                        _("gdbarch: Duplicate registration "
			  "of architecture (%s)"),
	                bfd_arch_info->printable_name);
    }
  /* log it */
  if (gdbarch_debug)
    fprintf_unfiltered (gdb_stdlog, "register_gdbarch_init (%s, %s)\n",
			bfd_arch_info->printable_name,
			host_address_to_string (init));
  /* Append it */
  (*curr) = XMALLOC (struct gdbarch_registration);
  (*curr)->bfd_architecture = bfd_architecture;
  (*curr)->init = init;
  (*curr)->dump_tdep = dump_tdep;
  (*curr)->arches = NULL;
  (*curr)->next = NULL;
}

void
register_gdbarch_init (enum bfd_architecture bfd_architecture,
		       gdbarch_init_ftype *init)
{
  gdbarch_register (bfd_architecture, init, NULL);
}


/* Look for an architecture using gdbarch_info.  */

struct gdbarch_list *
gdbarch_list_lookup_by_info (struct gdbarch_list *arches,
                             const struct gdbarch_info *info)
{
  for (; arches != NULL; arches = arches->next)
    {
      if (info->bfd_arch_info != arches->gdbarch->bfd_arch_info)
	continue;
      if (info->byte_order != arches->gdbarch->byte_order)
	continue;
      if (info->osabi != arches->gdbarch->osabi)
	continue;
      if (info->target_desc != arches->gdbarch->target_desc)
	continue;
      return arches;
    }
  return NULL;
}


/* Find an architecture that matches the specified INFO.  Create a new
   architecture if needed.  Return that new architecture.  */

struct gdbarch *
gdbarch_find_by_info (struct gdbarch_info info)
{
  struct gdbarch *new_gdbarch;
  struct gdbarch_registration *rego;

  /* Fill in missing parts of the INFO struct using a number of
     sources: "set ..."; INFOabfd supplied; and the global
     defaults.  */
  gdbarch_info_fill (&info);

  /* Must have found some sort of architecture.  */
  gdb_assert (info.bfd_arch_info != NULL);

  if (gdbarch_debug)
    {
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_find_by_info: info.bfd_arch_info %s\n",
			  (info.bfd_arch_info != NULL
			   ? info.bfd_arch_info->printable_name
			   : "(null)"));
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_find_by_info: info.byte_order %d (%s)\n",
			  info.byte_order,
			  (info.byte_order == BFD_ENDIAN_BIG ? "big"
			   : info.byte_order == BFD_ENDIAN_LITTLE ? "little"
			   : "default"));
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_find_by_info: info.osabi %d (%s)\n",
			  info.osabi, gdbarch_osabi_name (info.osabi));
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_find_by_info: info.abfd %s\n",
			  host_address_to_string (info.abfd));
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_find_by_info: info.tdep_info %s\n",
			  host_address_to_string (info.tdep_info));
    }

  /* Find the tdep code that knows about this architecture.  */
  for (rego = gdbarch_registry;
       rego != NULL;
       rego = rego->next)
    if (rego->bfd_architecture == info.bfd_arch_info->arch)
      break;
  if (rego == NULL)
    {
      if (gdbarch_debug)
	fprintf_unfiltered (gdb_stdlog, "gdbarch_find_by_info: "
			    "No matching architecture\n");
      return 0;
    }

  /* Ask the tdep code for an architecture that matches "info".  */
  new_gdbarch = rego->init (info, rego->arches);

  /* Did the tdep code like it?  No.  Reject the change and revert to
     the old architecture.  */
  if (new_gdbarch == NULL)
    {
      if (gdbarch_debug)
	fprintf_unfiltered (gdb_stdlog, "gdbarch_find_by_info: "
			    "Target rejected architecture\n");
      return NULL;
    }

  /* Is this a pre-existing architecture (as determined by already
     being initialized)?  Move it to the front of the architecture
     list (keeping the list sorted Most Recently Used).  */
  if (new_gdbarch->initialized_p)
    {
      struct gdbarch_list **list;
      struct gdbarch_list *this;
      if (gdbarch_debug)
	fprintf_unfiltered (gdb_stdlog, "gdbarch_find_by_info: "
			    "Previous architecture %s (%s) selected\n",
			    host_address_to_string (new_gdbarch),
			    new_gdbarch->bfd_arch_info->printable_name);
      /* Find the existing arch in the list.  */
      for (list = &rego->arches;
	   (*list) != NULL && (*list)->gdbarch != new_gdbarch;
	   list = &(*list)->next);
      /* It had better be in the list of architectures.  */
      gdb_assert ((*list) != NULL && (*list)->gdbarch == new_gdbarch);
      /* Unlink THIS.  */
      this = (*list);
      (*list) = this->next;
      /* Insert THIS at the front.  */
      this->next = rego->arches;
      rego->arches = this;
      /* Return it.  */
      return new_gdbarch;
    }

  /* It's a new architecture.  */
  if (gdbarch_debug)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_find_by_info: "
			"New architecture %s (%s) selected\n",
			host_address_to_string (new_gdbarch),
			new_gdbarch->bfd_arch_info->printable_name);
  
  /* Insert the new architecture into the front of the architecture
     list (keep the list sorted Most Recently Used).  */
  {
    struct gdbarch_list *this = XMALLOC (struct gdbarch_list);
    this->next = rego->arches;
    this->gdbarch = new_gdbarch;
    rego->arches = this;
  }    

  /* Check that the newly installed architecture is valid.  Plug in
     any post init values.  */
  new_gdbarch->dump_tdep = rego->dump_tdep;
  verify_gdbarch (new_gdbarch);
  new_gdbarch->initialized_p = 1;

  if (gdbarch_debug)
    gdbarch_dump (new_gdbarch, gdb_stdlog);

  return new_gdbarch;
}

/* Make the specified architecture current.  */

void
set_target_gdbarch (struct gdbarch *new_gdbarch)
{
  gdb_assert (new_gdbarch != NULL);
  gdb_assert (new_gdbarch->initialized_p);
  current_inferior ()->gdbarch = new_gdbarch;
  observer_notify_architecture_changed (new_gdbarch);
  registers_changed ();
}

/* Return the current inferior's arch.  */

struct gdbarch *
target_gdbarch (void)
{
  return current_inferior ()->gdbarch;
}

extern void _initialize_gdbarch (void);

void
_initialize_gdbarch (void)
{
  add_setshow_zuinteger_cmd ("arch", class_maintenance, &gdbarch_debug, _("\
Set architecture debugging."), _("\
Show architecture debugging."), _("\
When non-zero, architecture debugging is enabled."),
                            NULL,
                            show_gdbarch_debug,
                            &setdebuglist, &showdebuglist);
}
@


1.507
log
@ppc-aix core file relocation.

The current code attempts to provide relocation support when debugging
core files via the rs6000_xfer_partial method of the rs6000-nat
target_ops vector. However, this target_ops vector does not get pushed
on the target stack at all when debugging core files, thus bypassing
completely that part of the code.

This patch fixes the problem by extending corelow's core_xfer_partial
into handling the TARGET_OBJECT_LIBRARIES_AIX object.

gdb/ChangeLog:

	* gdbarch.sh (core_xfer_shared_libraries_aix): New method.
	* gdbarch.h, gdbarch.c: Regenerate.
	* corelow.c (core_xfer_partial): Add TARGET_OBJECT_LIBRARIES_AIX
	handling.

	* rs6000-aix-tdep.h: New file.
	* Makefile.in (HFILES_NO_SRCDIR): Add rs6000-aix-tdep.h.
	* rs6000-aix-tdep.c: Include "rs6000-aix-tdep.h" and
	"xml-utils.h".
	(struct field_info, struct ld_info_desc): New types.
	(ld_info32_desc, ld_info64_desc): New static constants.
	(struct ld_info): New type.
	(rs6000_aix_extract_ld_info): New function.
	(rs6000_aix_shared_library_to_xml): Likewise.
	(rs6000_aix_ld_info_to_xml): Likewise.
	(rs6000_aix_core_xfer_shared_libraries_aix): Likewise.
	(rs6000_aix_init_osabi): Add call to
	set_gdbarch_core_xfer_shared_libraries_aix.
	* rs6000-nat.c: Add "rs6000-aix-tdep.h" include.
	Remove "xml-utils.h" include.
	(LdInfo): Delete typedef.
	(ARCH64_DECL, LDI_FIELD, LDI_NEXT, LDI_FD, LDI_FILENAME):
	Delete macros.
	(rs6000_ptrace_ldinfo): Change return type to gdb_byte *.
	Adjust code accordingly.
	(rs6000_core_ldinfo): Delete, folded into
	rs6000_aix_core_xfer_shared_libraries_aix.
	(rs6000_xfer_shared_library): Delete.
	(rs6000_xfer_shared_libraries): Reimplement.
@
text
@d264 1
d437 1
d743 1
d1039 6
d3912 24
@


1.506
log
@2013-02-04  Sergio Durigan Junior  <sergiodj@@redhat.com>
	    Denys Vlasenko  <dvlasenk@@redhat.com>
	    Pedro Alves  <palves@@redhat.com>

	* gdbarch.sh (elfcore_write_linux_prpsinfo): New F hook.
	(struct elf_internal_linux_prpsinfo): Forward declare.
	* gdbarch.h, gdbarch.c: Regenerate.
	* linux-tdep.c: Include `cli/cli-utils.h'.
	(linux_fill_prpsinfo): New function.
	(linux_make_corefile_notes): Use linux_fill_prpsinfo.  If there's
	an elfcore_write_linux_prpsinfo hook, use it, otherwise, use
	elfcore_write_linux_prpsinfo32 or elfcore_write_linux_prpsinfo64
	depending on gdbarch pointer bitness.
	* ppc-linux-tdep.c: Include elf-bfd.h.
	(ppc_linux_init_abi): Hook in elfcore_write_ppc_linux_prpsinfo32
	on 32-bit.
@
text
@d244 1
d416 1
d719 1
d910 6
d3461 24
@


1.505
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d241 1
d412 1
d714 1
d961 6
d3380 24
@


1.504
log
@Fix copyright years in gdbarch.h and gdbarch.c.

copyright.py was updating gdbarch.sh' copyright years, but not
the function that genarates the copyright headers for gdbarch.[hc].

This patch makes the following changes:
  - fixes gdbarch.sh and regenerates gdbarch.[hc]

  - Modify copyright.py to remind the user to update gdbarch.sh
    by hand.  This should also remind the user to rerun the script
    and update gdbarch.[hc] - see next point;

  - Allow copyright.py to update gdbarch.[hc]'c copyright years,
    even though these are generated files;  This should free
    the user from having to update gdbarch.[hc] himself;

gdb/ChangeLog:

        * gdbarch.sh (copyright): Update copyright years.
        * gdbarch.h, gdbarch.c: Regenerate.
        * copyright.py (EXCLUDE_LIST): Remove gdbarch.h and gdbarch.c.
        (MULTIPLE_COPYRIGHT_HEADERS): Add 'gdb/gdbarch.sh'.
@
text
@d6 1
a6 1
   Copyright (C) 1998-2012 Free Software Foundation, Inc.
@


1.503
log
@gdbarch-ification of ravenscar-thread support.

gdb/ChangeLog:

        * gdbarch.sh: Add "struct ravenscar_arch_ops" advance
        declaration.
        (ravenscar_ops): New gdbarch variable.
        * gdbarch.h, gdbarch.c: Regenerate.
        * ravenscar-thread.h (ravenscar_register_arch_ops): Delete.
        * ravenscar-thread.c (current_arch_ops): Delete.
        (ravenscar_fetch_registers): Get the ravenscar_arch_ops
        from the gdbarch.
        (ravenscar_store_registers, ravenscar_prepare_to_store): Likewise.
        (ravenscar_inferior_created): Add gdbarch_ravenscar_ops check.
        (ravenscar_register_arch_ops): Delete.
        * ravenscar-sparc-thread.h: New file.
        * ravenscar-sparc-thread.c: #include "ravenscar-sparc-thread.h".
        (ravenscar_sparc_ops): Define value statically.
        (_initialize_ravenscar_sparc): Delete.
        (register_sparc_ravenscar_ops): New function.
        * sparc-tdep.c: #include "ravenscar-sparc-thread.h".
        (sparc32_gdbarch_init): Add call to register_sparc_ravenscar_ops.
        * Makefile.in (ALL_TARGET_OBS): Add ravenscar-thread.o and
        ravenscar-sparc-thread.o.
        (SFILES): Add ravenscar-thread.c.
        (HFILES_NO_SRCDIR): Add ravenscar-sparc-thread.h.
        (ALLDEPFILES): ravenscar-sparc-thread.c.
        * configure.tgt: Add ravenscar-thread.o and ravenscar-sparc-thread.o
        to gdb_target_obs
        for all the targets that use sparc-tdep.o.
@
text
@d6 1
a6 2
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009 Free Software Foundation, Inc.
@


1.502
log
@gdb
        * NEWS: Mention "info proc" and core files.
        * corelow.c (core_info_proc): New function.
        (init_core_ops): Set to_info_proc.
        * gdbarch.c, gdbarch.h: Rebuild.
        * gdbarch.sh (core_info_proc): New method.
        * infcmd.c (info_proc_cmd_1): Invoke target_info_proc first.
        * linux-tdep.c (linux_core_info_proc_mappings)
        (linux_core_info_proc): New functions.
        (linux_find_memory_region_ftype): New typedef.
        (linux_find_memory_regions_full): New function, from
        linux_find_memory_regions.
        (struct linux_find_memory_regions_data): New.
        (linux_find_memory_regions_thunk): New function.
        (linux_find_memory_regions): Rewrite.
        (struct linux_make_mappings_data): New.
        (linux_make_mappings_callback)
        (linux_make_mappings_corefile_notes): New functions.
        (linux_make_corefile_notes): Call linux_make_mappings_corefile_notes.
        (linux_init_abi): Call set_gdbarch_core_info_proc.
        * target.c (target_info_proc): Return 'int'.
        * target.h (target_info_proc): Update.
gdb/doc
        * gdb.texinfo (SVR4 Process Information): Mention core files.
gdb/testsuite
        * gdb.base/info-proc.exp: Add core file tests.
bfd
        * elf.c (elfcore_grok_note) <NT_FILE>: New case.
@
text
@d288 1
d458 1
d549 1
d760 1
d1208 3
d4310 17
@


1.501
log
@gdb/
2012-11-21  Yao Qi  <yao@@codesourcery.com>

	PR tdep/7438
	* gdbarch.sh (smash_text_address): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arm-tdep.c (arm_smash_text_address): Remove.
	(arm_gdbarch_init): Don't call set_gdbarch_smash_text_address.
	* hppa-tdep.c (hppa_smash_text_address): Remove.
	(hppa_addr_bits_remove): Rename from hppa_smash_text_address.
	(hppa_gdbarch_init): Don't call set_gdbarch_smash_text_address.
	Caller update.
	* coffread.c (coff_symtab_read): Caller update.
	* dbxread.c (process_one_symbol): Likewise.
	* elfread.c (record_minimal_symbol): Likewise.
	* somread.c (som_symtab_read): Likewise.
@
text
@d286 1
d455 1
d755 1
d874 6
d4262 24
@


1.500
log
@	* gdbarch.h, gdbarch.c: Rebuild.
	* gdbarch.sh (set_target_gdbarch): Rename from
	deprecated_target_gdbarch_select_hack.
	* arch-utils.c (gdbarch_update_p): Update.
	(set_gdbarch_from_file): Update.
@
text
@a222 1
  gdbarch_smash_text_address_ftype *smash_text_address;
a390 1
  core_addr_identity,  /* smash_text_address */
a526 1
  gdbarch->smash_text_address = core_addr_identity;
a688 1
  /* Skip verify of smash_text_address, invalid_p == 0 */
a1284 3
                      "gdbarch_dump: smash_text_address = <%s>\n",
                      host_address_to_string (gdbarch->smash_text_address));
  fprintf_unfiltered (file,
a2976 17
CORE_ADDR
gdbarch_smash_text_address (struct gdbarch *gdbarch, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->smash_text_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_smash_text_address called\n");
  return gdbarch->smash_text_address (gdbarch, addr);
}

void
set_gdbarch_smash_text_address (struct gdbarch *gdbarch,
                                gdbarch_smash_text_address_ftype smash_text_address)
{
  gdbarch->smash_text_address = smash_text_address;
}

@


1.499
log
@	* gdbarch.sh (target_gdbarch): Remove macro.
	(get_target_gdbarch): Rename to target_gdbarch.
	* gdbarch.c, gdbarch.h: Rebuild.
	* ada-tasks.c, aix-thread.c, amd64-linux-nat.c, arch-utils.c,
	arm-tdep.c, auxv.c, breakpoint.c, bsd-uthread.c, corefile.c,
	darwin-nat-info.c, dcache.c, dsrec.c, exec.c, fbsd-nat.c,
	filesystem.c, gcore.c, gnu-nat.c, i386-darwin-nat.c, i386-nat.c,
	ia64-vms-tdep.c, inf-ptrace.c, infcmd.c, jit.c, linux-nat.c,
	linux-tdep.c, linux-thread-db.c, m32r-rom.c, memattr.c,
	mep-tdep.c, microblaze-tdep.c, mips-linux-nat.c,
	mips-linux-tdep.c, mips-tdep.c, monitor.c, moxie-tdep.c,
	nto-procfs.c, nto-tdep.c, ppc-linux-nat.c, proc-service.c,
	procfs.c, progspace.c, ravenscar-thread.c, record.c,
	remote-m32r-sdi.c, remote-mips.c, remote-sim.c, remote.c,
	rl78-tdep.c, rs6000-nat.c, rx-tdep.c, s390-nat.c, sol-thread.c,
	solib-darwin.c, solib-dsbt.c, solib-frv.c, solib-ia64-hpux.c,
	solib-irix.c, solib-pa64.c, solib-som.c, solib-spu.c,
	solib-sunos.c, solib-svr4.c, solib.c, spu-linux-nat.c,
	spu-multiarch.c, spu-tdep.c, symfile-mem.c, symfile.c, symtab.c,
	target-descriptions.c, target.c, target.h, tracepoint.c,
	windows-nat.c, windows-tdep.c, xcoffsolib.c, cli/cli-dump.c,
	common/agent.c, mi/mi-interp.c, python/py-finishbreakpoint.c,
	python/py-inferior.c, python/python.c: Update.
@
text
@d4669 1
a4669 1
deprecated_target_gdbarch_select_hack (struct gdbarch *new_gdbarch)
@


1.498
log
@gdb/
2012-11-09  Pedro Alves  <palves@@redhat.com>

	* gdbarch.sh (target_gdbarch) <gdbarch.h>: Reimplement as macro.
	(get_target_gdbarch) <gdbarch.h>: New function.
	(startup_gdbarch) <gdbarch.h>: Declare.
	<gdbarch.c> (target_gdbarch): Delete.
	<gdbarch.c> (deprecated_target_gdbarch_select_hack): Set the
	current inferior's gdbarch.
	<gdbarch.c> (get_target_gdbarch): New function.
	* inferior.c: Include target-descriptions.h.
	(free_inferior): Free target description info.
	(add_inferior_with_spaces): Set the inferior's initial
	architecture.
	(clone_inferior_command): Copy the original inferior's target
	description if it was user specified.
	(initialize_inferiors): Add comment.
	* inferior.h (struct target_desc_info): Forward declare.
	(struct inferior) <gdbarch>: New field.
	* linux-nat.c: Include target-descriptions.h.
	(linux_child_follow_fork): Copy the parent's architecture and
	target description to the child.
	* target-descriptions.c: Include inferior.h.
	(struct target_desc_info): New structure, holding the equivalents
	of ...
	(target_desc_fetched, current_target_desc)
	(target_description_filename): ... these removed globals.
	(get_tdesc_info, target_desc_info_from_user_p)
	(copy_inferior_target_desc_info, target_desc_info_free): New.
	(target_desc_fetched, current_target_desc)
	(target_description_filename): Reimplemented as convenience
	macros.
	(tdesc_filename_cmd_string): New global.
	(set_tdesc_filename_cmd): Copy the string manipulated by the "set
	tdescs filename ..." commands to the per-inferior equivalent.
	(show_tdesc_filename_cmd): Get the value to show from the
	per-inferior description filename.
	(_initilize_target_descriptions): Change the "set/show tdesc
	filename" commands' variable.
	* target-descriptions.h (struct target_desc, struct target_desc_info)
	(struct inferior): Forward declare.
	(target_find_description, target_clear_description)
	(target_current_description): Adjust comments.
	(copy_inferior_target_desc_info, target_desc_info_free)
	(target_desc_info_from_user_p). Declare.

gdb/testsuite/
2012-11-09  Pedro Alves  <palves@@redhat.com>

	* gdb.multi/multi-arch.exp: New.
@
text
@d4678 1
a4678 1
/* Helper for 'target_gdbarch'.  */
d4681 1
a4681 1
get_target_gdbarch (void)
@


1.497
log
@	* gdbarch.c: Rebuild.
	* gdbarch.sh: Remove references to gdbarch_swap.
	* corelow.c (core_open): Remove obsolete comment.
@
text
@a459 1
struct gdbarch *target_gdbarch = &startup_gdbarch;
d4673 1
a4673 1
  target_gdbarch = new_gdbarch;
d4678 8
@


1.496
log
@Ali Anwar  <ali_anwar@@codesourcery.com>

	* gdbarch.sh (function_list): Use 'pstring' when printing a
	variable which could return NULL.
	* gdbarch.c: Regenerate.
@
text
@a115 3
  /* per-architecture swap-regions.  */
  struct gdbarch_swap *swap;

d308 2
a309 2
  /*per-architecture data-pointers and swap regions.  */
  0, NULL, NULL,
@


1.495
log
@gdb/
	* dwarf2loc.c (entry_values_debug): Add 'unsigned'.
	(_initialize_dwarf2loc): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* dwarf2loc.h: Update the declaration of 'entry_values_debug'.
	* dwarf2read.c (dwarf2_die_debug): Add 'unsigned'.
	(_initialize_dwarf2_read): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* darwin-nat.c (dwarwin_debug_flag): Add 'unsigned'.
	(_initialize_darwin_inferior): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* frame.c (frame_debug): Add 'unsigned'.
	(_intialize_frame): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* frame.h: Update the declaration of 'frame_debug'.
	* gdbtypes.c (overload_debug): Add 'unsigned'.
	(_initialize_gdbtypes): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* inferior.h: Update declaration of 'debug_infrun'.
	* infrun.c (debug_infrun): Add 'unsigned'.
	(_initialize_infrun): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* jit.c (jit_debug): Add 'unsigned'.
	(_initialize_jit): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* linux-nat.c (debug_linux_nat): Add 'unsigned'.
	(_initialize_linux_nat): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* linux-thread-db.c (libthread_db_debug): Add 'unsigned'.
	(_initialize_thread_db): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* machoread.c (mach_o_debug_level): Add 'unsigned'.
	(_initialize_machoread): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* mi/mi-cmd-var.c: Update the declaration of 'varobjdebug'.
	* microblaze-tdep.c (microblaze_debug_flag): Add 'unsigned'.
	(_initialize_microblaze_tdep): Call add_setshow_zuinteger_cmd
	intead of add_setshow_zinteger_cmd.
	* mips-tdep.c (mips_debug): Add 'unsigned'.
	(_initialize_mips_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* monitor.c (monitor_debug): Add 'unsigned'.
	(_initialize_remote_monitors): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* observer.c (observer_debug): Add 'unsigned'.
	(_initialize_observer): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* parse.c (expressiondebug): Add 'unsigned'.
	(_initialize_parse): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.c (record_debug): Add 'unsigned'.
	(_initialize_record): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.h: Update the declaration of 'record_debug'.
	* stap-probe.c (stap_expression_debug): Add 'unsigned'.
	(_initialize_stap_probe): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* serial.c (global_serial_debug_p): Add 'unsigned'.
	(_initialize_serial): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-dsbt.c (solib_dsbt_debug): Add 'unsigned'.
	(_initialize_dsbt_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-frv.c (solib_frv_debug): Add 'unsigned'.
	(_initialize_frv_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* target.c (targetdebug): Add 'unsigned'.
	(initialize_targets): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* valops.c (overload_debug): Add 'unsigned'.
	* varobj.c (varobjdebug): Add 'unsigned'.
	(_initialize_varobj): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* xtensa-tdep.c (xtensa_debug_level): Add 'unsigned'.
	(_initialize_xtensa_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.

	* arch-utils.h: Remove the declaration of 'gdbarch_debug'.
	* gdbarch.sh (gdbarch_debug): Add 'unsigned'.
	(extern void _initialize_gdbarch): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* gdbarch.c, gdbarch.h: Re-generated.
@
text
@d1318 1
a1318 1
                      gdbarch->stap_gdb_register_prefix);
d1321 1
a1321 1
                      gdbarch->stap_gdb_register_suffix);
d1324 1
a1324 1
                      gdbarch->stap_integer_prefix);
d1327 1
a1327 1
                      gdbarch->stap_integer_suffix);
d1342 1
a1342 1
                      gdbarch->stap_register_indirection_prefix);
d1345 1
a1345 1
                      gdbarch->stap_register_indirection_suffix);
d1348 1
a1348 1
                      gdbarch->stap_register_prefix);
d1351 1
a1351 1
                      gdbarch->stap_register_suffix);
@


1.494
log
@gdb/
	* copying.awk: Print buffer-read-only and vi ro markers.
	* copying.c: Rebuild.
	* gdbarch.sh (copyright): Print buffer-read-only and vi ro markers.
	* gdbarch.c, gdbarch.h: Rebuild.
	* target-descriptions.c (maint_print_c_tdesc_cmd): Print
	buffer-read-only and vi ro markers.
	* features/arm-with-iwmmxt.c: Rebuild.
	* features/arm-with-m-fpa-layout.c: Rebuild.
	* features/arm-with-m-vfp-d16.c: Rebuild.
	* features/arm-with-m.c: Rebuild.
	* features/arm-with-neon.c: Rebuild.
	* features/arm-with-vfpv2.c: Rebuild.
	* features/arm-with-vfpv3.c: Rebuild.
	* features/i386/amd64-avx-linux.c: Rebuild.
	* features/i386/amd64-avx.c: Rebuild.
	* features/i386/amd64-linux.c: Rebuild.
	* features/i386/amd64.c: Rebuild.
	* features/i386/i386-avx-linux.c: Rebuild.
	* features/i386/i386-avx.c: Rebuild.
	* features/i386/i386-linux.c: Rebuild.
	* features/i386/i386-mmx-linux.c: Rebuild.
	* features/i386/i386-mmx.c: Rebuild.
	* features/i386/i386.c: Rebuild.
	* features/i386/x32-avx-linux.c: Rebuild.
	* features/i386/x32-avx.c: Rebuild.
	* features/i386/x32-linux.c: Rebuild.
	* features/i386/x32.c: Rebuild.
	* features/mips-dsp-linux.c: Rebuild.
	* features/mips-linux.c: Rebuild.
	* features/mips64-dsp-linux.c: Rebuild.
	* features/mips64-linux.c: Rebuild.
	* features/rs6000/powerpc-32.c: Rebuild.
	* features/rs6000/powerpc-32l.c: Rebuild.
	* features/rs6000/powerpc-403.c: Rebuild.
	* features/rs6000/powerpc-403gc.c: Rebuild.
	* features/rs6000/powerpc-405.c: Rebuild.
	* features/rs6000/powerpc-505.c: Rebuild.
	* features/rs6000/powerpc-601.c: Rebuild.
	* features/rs6000/powerpc-602.c: Rebuild.
	* features/rs6000/powerpc-603.c: Rebuild.
	* features/rs6000/powerpc-604.c: Rebuild.
	* features/rs6000/powerpc-64.c: Rebuild.
	* features/rs6000/powerpc-64l.c: Rebuild.
	* features/rs6000/powerpc-7400.c: Rebuild.
	* features/rs6000/powerpc-750.c: Rebuild.
	* features/rs6000/powerpc-860.c: Rebuild.
	* features/rs6000/powerpc-altivec32.c: Rebuild.
	* features/rs6000/powerpc-altivec32l.c: Rebuild.
	* features/rs6000/powerpc-altivec64.c: Rebuild.
	* features/rs6000/powerpc-altivec64l.c: Rebuild.
	* features/rs6000/powerpc-cell32l.c: Rebuild.
	* features/rs6000/powerpc-cell64l.c: Rebuild.
	* features/rs6000/powerpc-e500.c: Rebuild.
	* features/rs6000/powerpc-e500l.c: Rebuild.
	* features/rs6000/powerpc-isa205-32l.c: Rebuild.
	* features/rs6000/powerpc-isa205-64l.c: Rebuild.
	* features/rs6000/powerpc-isa205-altivec32l.c: Rebuild.
	* features/rs6000/powerpc-isa205-altivec64l.c: Rebuild.
	* features/rs6000/powerpc-isa205-vsx32l.c: Rebuild.
	* features/rs6000/powerpc-isa205-vsx64l.c: Rebuild.
	* features/rs6000/powerpc-vsx32.c: Rebuild.
	* features/rs6000/powerpc-vsx32l.c: Rebuild.
	* features/rs6000/powerpc-vsx64.c: Rebuild.
	* features/rs6000/powerpc-vsx64l.c: Rebuild.
	* features/rs6000/rs6000.c: Rebuild.
	* features/s390-linux32.c: Rebuild.
	* features/s390-linux32v1.c: Rebuild.
	* features/s390-linux32v2.c: Rebuild.
	* features/s390-linux64.c: Rebuild.
	* features/s390-linux64v1.c: Rebuild.
	* features/s390-linux64v2.c: Rebuild.
	* features/s390x-linux64.c: Rebuild.
	* features/s390x-linux64v1.c: Rebuild.
	* features/s390x-linux64v2.c: Rebuild.
	* features/tic6x-c62x-linux.c: Rebuild.
	* features/tic6x-c62x.c: Rebuild.
	* features/tic6x-c64x-linux.c: Rebuild.
	* features/tic6x-c64x.c: Rebuild.
	* features/tic6x-c64xp-linux.c: Rebuild.
	* features/tic6x-c64xp.c: Rebuild.
@
text
@d64 1
a64 1
int gdbarch_debug = GDBARCH_DEBUG;
d4687 1
a4687 1
  add_setshow_zinteger_cmd ("arch", class_maintenance, &gdbarch_debug, _("\
@


1.493
log
@gdb/
	* arch-utils.c (default_return_in_first_hidden_param_p): New.
	* arch-utils.h: Declare.
	* gdbarch.sh: Add return_in_first_hidden_param_p.
	* gdbarch.c, gdbarch.h: Regenerated.
	* infcall.c (call_function_by_hand): Call
	gdbarch_return_in_first_hidden_param_p instead of
	language_pass_by_reference.

	* m68k-tdep.c (m68k_return_in_first_hidden_param_p): New.
	(m68k_gdbarch_init): Install m68k_return_in_first_hidden_param_p.
	* sh-tdep.c (sh_return_in_first_hidden_param_p): New.
	(sh_gdbarch_init): Install sh_return_in_first_hidden_param_p.
	* tic6x-tdep.c (tic6x_push_dummy_call): Remove local variable
	`cplus_return_struct_by_reference'.
	(tic6x_return_value): Handle language cplusplus.
	(tic6x_return_in_first_hidden_param_p): New.
	(tic6x_gdbarch_init): Install tic6x_return_in_first_hidden_param_p.
@
text
@d1 2
a2 1
/* *INDENT-OFF* */ /* THIS FILE IS GENERATED */
@


1.492
log
@New "iterate_over_objfiles_in_search_order" gdbarch method.

This patch introduces the "iterate_over_objfiles_in_search_order"
gdbarch method, as well as its default implementation, and converts
the areas where it will matter to using this gdbarch method.

The default method implementation is the only one installed, and
the changes should have no functional impact in terms of behavior.
This only paves the way for the architectures that will need their
own version.

gdb/ChangeLog:

        * gdbarch.sh: Add generation of
        "iterate_over_objfiles_in_search_order_cb_ftype" typedef in
        gdbarch.h.  Add include of "objfiles.h" in gdbarch.c.
        (iterate_over_objfiles_in_search_order): New gdbarch method.
        * gdbarch.h, gdbarch.c: Regenerate.
        * objfiles.h (default_iterate_over_objfiles_in_search_order):
        Add declaration.
        * objfiles.c (default_iterate_over_objfiles_in_search_order):
        New function.
        * symtab.c (lookup_symbol_aux_objfile): New function, extracted
        out of lookup_symbol_aux_symtabs.
        (lookup_symbol_aux_symtabs): Replace extracted-out code by
        call to lookup_symbol_aux_objfile.
        (struct global_sym_lookup_data): New type.
        (lookup_symbol_global_iterator_cb): New function.
        (lookup_symbol_global): Search for symbol using
        gdbarch_iterate_over_objfiles_in_search_order and
        lookup_symbol_global_iterator_cb.
        * findvar.c (struct minsym_lookup_data): New type.
        (minsym_lookup_iterator_cb): New function.
        (default_read_var_value) [case LOC_UNRESOLVED]: Resolve the
        symbol's address via gdbarch_iterate_over_objfiles_in_search_order
        and minsym_lookup_iterator_cb.
@
text
@d203 1
d372 1
d524 1
d671 1
d1250 3
d2565 17
@


1.491
log
@2012-06-04  Pedro Alves  <palves@@redhat.com>

	* arch-utils.c (default_gdb_signal_from_target): Delete.
	* arch-utils.h (default_gdb_signal_from_target): Delete.
	* corelow.c (core_open) <signal mapping>: Extended comment.  Check
	gdbarch_gdb_signal_from_target_p.
	* gdbarch.sh (gdb_signal_from_target): Make it an M method (with
	predicate).
	* gdbarch.h: Regenerate.
	* gdbarch.c: Regenerate.
@
text
@d52 1
d288 1
d456 1
d547 1
d756 1
d1075 3
d4256 17
@


1.490
log
@2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	* arch-utils.c (default_gdb_signal_to_host): Rename to ...
	(default_gdb_signal_to_target): ... this.  Add comment.
	(default_gdb_signal_from_host): Rename to ...
	(default_gdb_signal_from_target): ... this.  Add comment.
	* arch-utils.h (default_gdb_signal_to_host): Rename to ...
	(default_gdb_signal_to_target): ... this.
	(default_gdb_signal_from_host): Rename to ...
	(default_gdb_signal_from_target): ... this.
	* corelow.c (core_open): Adjust to naming change.  Replace comment.
	* gdbarch.sh (gdb_signal_from_host): Rename to ...
	(gdb_signal_from_target): ... this.  Adjust to
	default_gdb_signal_from_host naming change.  Extend comment.
	(gdb_signal_to_host): Rename to ...
	(gdb_signal_to_target): ... this.  Adjust to
	default_gdb_signal_to_host naming change.
	* gdbarch.h, gdbarch.c: Renegerate.
@
text
@d430 1
a430 1
  default_gdb_signal_from_target,  /* gdb_signal_from_target */
a538 1
  gdbarch->gdb_signal_from_target = default_gdb_signal_from_target;
d729 1
a729 1
  /* Skip verify of gdb_signal_from_target, invalid_p == 0 */
d998 3
d3792 7
@


1.489
log
@gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

gdb/gdbserver/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

include/gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

sim/common/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.
@
text
@d263 1
a263 1
  gdbarch_gdb_signal_from_host_ftype *gdb_signal_from_host;
d430 1
a430 1
  default_gdb_signal_from_host,  /* gdb_signal_from_host */
d539 1
a539 1
  gdbarch->gdb_signal_from_host = default_gdb_signal_from_host;
d730 1
a730 1
  /* Skip verify of gdb_signal_from_host, invalid_p == 0 */
d999 2
a1000 2
                      "gdbarch_dump: gdb_signal_from_host = <%s>\n",
                      host_address_to_string (gdbarch->gdb_signal_from_host));
d3791 1
a3791 1
gdbarch_gdb_signal_from_host (struct gdbarch *gdbarch, int signo)
d3794 1
a3794 1
  gdb_assert (gdbarch->gdb_signal_from_host != NULL);
d3796 2
a3797 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_gdb_signal_from_host called\n");
  return gdbarch->gdb_signal_from_host (gdbarch, signo);
d3801 2
a3802 2
set_gdbarch_gdb_signal_from_host (struct gdbarch *gdbarch,
                                  gdbarch_gdb_signal_from_host_ftype gdb_signal_from_host)
d3804 1
a3804 1
  gdbarch->gdb_signal_from_host = gdb_signal_from_host;
@


1.488
log
@2012-05-23  Pedro Alves  <palves@@redhat.com>

	* arch-utils.h (default_target_signal_to_host): Delete.
	* arch-utils.c (default_target_signal_to_host): Delete.
	* gdbarch.sh (target_signal_to_host): Remove.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d263 1
a263 1
  gdbarch_target_signal_from_host_ftype *target_signal_from_host;
d430 1
a430 1
  default_target_signal_from_host,  /* target_signal_from_host */
d539 1
a539 1
  gdbarch->target_signal_from_host = default_target_signal_from_host;
d730 1
a730 1
  /* Skip verify of target_signal_from_host, invalid_p == 0 */
d999 3
a1343 3
                      "gdbarch_dump: target_signal_from_host = <%s>\n",
                      host_address_to_string (gdbarch->target_signal_from_host));
  fprintf_unfiltered (file,
d3774 1
a3774 1
gdbarch_process_record_signal (struct gdbarch *gdbarch, struct regcache *regcache, enum target_signal signal)
d3790 2
a3791 2
enum target_signal
gdbarch_target_signal_from_host (struct gdbarch *gdbarch, int signo)
d3794 1
a3794 1
  gdb_assert (gdbarch->target_signal_from_host != NULL);
d3796 2
a3797 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_target_signal_from_host called\n");
  return gdbarch->target_signal_from_host (gdbarch, signo);
d3801 2
a3802 2
set_gdbarch_target_signal_from_host (struct gdbarch *gdbarch,
                                     gdbarch_target_signal_from_host_ftype target_signal_from_host)
d3804 1
a3804 1
  gdbarch->target_signal_from_host = target_signal_from_host;
@


1.487
log
@	gdb/
	* breakpoint.h (bp_location): Add related_address member.
	* inferior.h (get_return_value): Take a pointer to struct value
	instead of struct type for the function requested.
	* value.h (using_struct_return): Likewise.
	* gdbarch.sh (return_value): Take a pointer to struct value
	instead of struct type for the function requested.
	* breakpoint.c (set_breakpoint_location_function): Initialize
	related_address for bp_gnu_ifunc_resolver breakpoints.
	* elfread.c (elf_gnu_ifunc_resolver_return_stop): Pass the
	requested function's address to gdbarch_return_value.
	* eval.c (evaluate_subexp_standard): Pass the requested
	function's address to using_struct_return.
	* infcall.c (call_function_by_hand): Pass the requested
	function's address to using_struct_return and
	gdbarch_return_value.
	* infcmd.c (get_return_value): Take a pointer to struct value
	instead of struct type for the function requested.
	(print_return_value): Update accordingly.
	(finish_command_continuation): Likewise.
	* stack.c (return_command): Pass the requested function's
	address to using_struct_return and gdbarch_return_value.
	* value.c (using_struct_return): Take a pointer to struct value
	instead of struct type for the function requested.  Pass the
	requested function's address to gdbarch_return_value.
	* python/py-finishbreakpoint.c (finish_breakpoint_object):
	New function_value member, replacing function_type.
	(bpfinishpy_dealloc): Update accordingly.
	(bpfinishpy_pre_stop_hook): Likewise.
	(bpfinishpy_init): Likewise.  Record the requested function's
	address.
	* mips-tdep.c (mips_fval_reg): New enum.
	(mips_o32_push_dummy_call): For MIPS16 FP doubles do not swap
	words put in GP registers.
	(mips_o64_push_dummy_call): Update a comment.
	(mips_o32_return_value): Take a pointer to struct value instead
	of struct type for the function requested and use it to check if
	using the MIPS16 calling convention.  Return the designated
	general purpose registers for floating-point values returned in
	MIPS16 mode.
	(mips_o64_return_value): Likewise.
	* ppc-tdep.h (ppc_sysv_abi_return_value): Update prototype.
	(ppc_sysv_abi_broken_return_value): Likewise.
	(ppc64_sysv_abi_return_value): Likewise.
	* alpha-tdep.c (alpha_return_value): Take a pointer to struct
	value instead of struct type for the function requested.
	* amd64-tdep.c (amd64_return_value): Likewise.
	* amd64-windows-tdep.c (amd64_windows_return_value): Likewise.
	* arm-tdep.c (arm_return_value): Likewise.
	* avr-tdep.c (avr_return_value): Likewise.
	* bfin-tdep.c (bfin_return_value): Likewise.
	* cris-tdep.c (cris_return_value): Likewise.
	* frv-tdep.c (frv_return_value): Likewise.
	* h8300-tdep.c (h8300_return_value): Likewise.
	(h8300h_return_value): Likewise.
	* hppa-tdep.c (hppa32_return_value): Likewise.
	(hppa64_return_value): Likewise.
	* i386-tdep.c (i386_return_value): Likewise.
	* ia64-tdep.c (ia64_return_value): Likewise.
	* iq2000-tdep.c (iq2000_return_value): Likewise.
	* lm32-tdep.c (lm32_return_value): Likewise.
	* m32c-tdep.c (m32c_return_value): Likewise.
	* m32r-tdep.c (m32r_return_value): Likewise.
	* m68hc11-tdep.c (m68hc11_return_value): Likewise.
	* m68k-tdep.c (m68k_return_value): Likewise.
	(m68k_svr4_return_value): Likewise.
	* m88k-tdep.c (m88k_return_value): Likewise.
	* mep-tdep.c (mep_return_value): Likewise.
	* microblaze-tdep.c (microblaze_return_value): Likewise.
	* mn10300-tdep.c (mn10300_return_value): Likewise.
	* moxie-tdep.c (moxie_return_value): Likewise.
	* mt-tdep.c (mt_return_value): Likewise.
	* ppc-linux-tdep.c (ppc_linux_return_value): Likewise.
	* ppc-sysv-tdep.c (ppc_sysv_abi_return_value): Likewise.
	(ppc_sysv_abi_broken_return_value): Likewise.
	(ppc64_sysv_abi_return_value): Likewise.
	* ppcnbsd-tdep.c (ppcnbsd_return_value): Likewise.
	* rl78-tdep.c (rl78_return_value): Likewise.
	* rs6000-aix-tdep.c (rs6000_return_value): Likewise.
	* rx-tdep.c (rx_return_value): Likewise.
	* s390-tdep.c (s390_return_value): Likewise.
	* score-tdep.c (score_return_value): Likewise.
	* sh-tdep.c (sh_return_value_nofpu): Likewise.
	(sh_return_value_fpu): Likewise.
	* sh64-tdep.c (sh64_return_value): Likewise.
	* sparc-tdep.c (sparc32_return_value): Likewise.
	* sparc64-tdep.c (sparc64_return_value): Likewise.
	* spu-tdep.c (spu_return_value): Likewise.
	* tic6x-tdep.c (tic6x_return_value): Likewise.
	* v850-tdep.c (v850_return_value): Likewise.
	* vax-tdep.c (vax_return_value): Likewise.
	* xstormy16-tdep.c (xstormy16_return_value): Likewise.
	* xtensa-tdep.c (xtensa_return_value): Likewise.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.

	gdb/testsuite/
	* gdb.base/return-nodebug.exp: Also test float and double types.
@
text
@a263 1
  gdbarch_target_signal_to_host_ftype *target_signal_to_host;
a430 1
  default_target_signal_to_host,  /* target_signal_to_host */
a539 1
  gdbarch->target_signal_to_host = default_target_signal_to_host;
a730 1
  /* Skip verify of target_signal_to_host, invalid_p == 0 */
a1343 3
                      "gdbarch_dump: target_signal_to_host = <%s>\n",
                      host_address_to_string (gdbarch->target_signal_to_host));
  fprintf_unfiltered (file,
a3807 17
gdbarch_target_signal_to_host (struct gdbarch *gdbarch, enum target_signal ts)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->target_signal_to_host != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_target_signal_to_host called\n");
  return gdbarch->target_signal_to_host (gdbarch, ts);
}

void
set_gdbarch_target_signal_to_host (struct gdbarch *gdbarch,
                                   gdbarch_target_signal_to_host_ftype target_signal_to_host)
{
  gdbarch->target_signal_to_host = target_signal_to_host;
}

int
@


1.486
log
@2012-04-27  Sergio Durigan Junior  <sergiodj@@redhat.com>
	    Tom Tromey  <tromey@@redhat.com>
	    Jan Kratochvil  <jan.kratochvil@@redhat.com>

	* Makefile.in (SFILES): Add `probe' and `stap-probe'.
	(COMMON_OBS): Likewise.
	(HFILES_NO_SRCDIR): Add `probe'.
	* NEWS: Mention support for static and SystemTap probes.
	* amd64-tdep.c (amd64_init_abi): Initializing proper fields used by
	SystemTap probes' arguments parser.
	* arm-linux-tdep.c: Including headers needed to perform the parsing
	of SystemTap probes' arguments.
	(arm_stap_is_single_operand): New function.
	(arm_stap_parse_special_token): Likewise.
	(arm_linux_init_abi): Initializing proper fields used by SystemTap
	probes' arguments parser.
	* ax-gdb.c (require_rvalue): Removing static declaration.
	(gen_expr): Likewise.
	* ax-gdb.h (gen_expr): Declaring function.
	(require_rvalue): Likewise.
	* breakpoint.c: Include `gdb_regex.h' and `probe.h'.
	(bkpt_probe_breakpoint_ops): New variable.
	(momentary_breakpoint_from_master): Set the `probe' value.
	(add_location_to_breakpoint): Likewise.
	(break_command_1): Using proper breakpoint_ops according to the
	argument passed by the user in the command line.
	(bkpt_probe_insert_location): New function.
	(bkpt_probe_remove_location): Likewise.
	(bkpt_probe_create_sals_from_address): Likewise.
	(bkpt_probe_decode_linespec): Likewise.
	(tracepoint_probe_create_sals_from_address): Likewise.
	(tracepoint_probe_decode_linespec): Likewise.
	(tracepoint_probe_breakpoint_ops): New variable.
	(trace_command): Using proper breakpoint_ops according to the
	argument passed by the user in the command line.
	(initialize_breakpoint_ops): Initializing breakpoint_ops for
	static probes on breakpoints and tracepoints.
	* breakpoint.h (struct bp_location) <probe>: New field.
	* cli-utils.c (skip_spaces_const): New function.
	(extract_arg): Likewise.
	* cli-utils.h (skip_spaces_const): Likewise.
	(extract_arg): Likewise.
	* coffread.c (coff_sym_fns): Add `sym_probe_fns' value.
	* configure.ac: Append `stap-probe.o' to be generated when ELF
	support is present.
	* configure: Regenerate.
	* dbxread.c (aout_sym_fns): Add `sym_probe_fns' value.
	* elfread.c: Include `probe.h' and `arch-utils.h'.
	(probe_key): New variable.
	(elf_get_probes): New function.
	(elf_get_probe_argument_count): Likewise.
	(elf_evaluate_probe_argument): Likewise.
	(elf_compile_to_ax): Likewise.
	(elf_symfile_relocate_probe): Likewise.
	(stap_probe_key_free): Likewise.
	(elf_probe_fns): New variable.
	(elf_sym_fns): Add `sym_probe_fns' value.
	(elf_sym_fns_lazy_psyms): Likewise.
	(elf_sym_fns_gdb_index): Likewise.
	(_initialize_elfread): Initialize objfile cache for static
	probes.
	* gdb_vecs.h (struct probe): New forward declaration.
	(probe_p): New VEC declaration.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* gdbarch.sh (stap_integer_prefix): New variable.
	(stap_integer_suffix): Likewise.
	(stap_register_prefix): Likewise.
	(stap_register_suffix): Likewise.
	(stap_register_indirection_prefix): Likewise.
	(stap_register_indirection_suffix): Likewise.
	(stap_gdb_register_prefix): Likewise.
	(stap_gdb_register_suffix): Likewise.
	(stap_is_single_operand): New function.
	(stap_parse_special_token): Likewise.
	(struct stap_parse_info): Forward declaration.
	* i386-tdep.c: Including headers needed to perform the parsing
	of SystemTap probes' arguments.
	(i386_stap_is_single_operand): New function.
	(i386_stap_parse_special_token): Likewise.
	(i386_elf_init_abi): Initializing proper fields used by SystemTap
	probes' arguments parser.
	* i386-tdep.h (i386_stap_is_single_operand): New function.
	(i386_stap_parse_special_token): Likewise.
	* machoread.c (macho_sym_fns): Add `sym_probe_fns' value.
	* mipsread.c (ecoff_sym_fns): Likewise.
	* objfiles.c (objfile_relocate1): Support relocation for static
	probes.
	* parse.c (prefixify_expression): Remove static declaration.
	(initialize_expout): Likewise.
	(reallocate_expout): Likewise.
	* parser-defs.h (initialize_expout): Declare function.
	(reallocate_expout): Likewise.
	(prefixify_expression): Likewise.
	* ppc-linux-tdep.c: Including headers needed to perform the parsing
	of SystemTap probes' arguments.
	(ppc_stap_is_single_operand): New function.
	(ppc_stap_parse_special_token): Likewise.
	(ppc_linux_init_abi): Initializing proper fields used by SystemTap
	probes' arguments parser.
	* probe.c: New file, for generic statically defined probe support.
	* probe.h: Likewise.
	* s390-tdep.c: Including headers needed to perform the parsing of
	SystemTap probes' arguments.
	(s390_stap_is_single_operand): New function.
	(s390_gdbarch_init): Initializing proper fields used by SystemTap
	probes' arguments parser.
	* somread.c (som_sym_fns): Add `sym_probe_fns' value.
	* stap-probe.c: New file, for SystemTap probe support.
	* stap-probe.h: Likewise.
	* symfile.h: Include `gdb_vecs.h'.
	(struct sym_probe_fns): New struct.
	(struct sym_fns) <sym_probe_fns>: New field.
	* symtab.c (init_sal): Initialize `probe' field.
	* symtab.h (struct probe): Forward declaration.
	(struct symtab_and_line) <probe>: New field.
	* tracepoint.c (start_tracing): Adjust semaphore on breakpoints
	locations.
	(stop_tracing): Likewise.
	* xcoffread.c (xcoff_sym_fns): Add `sym_probe_fns' value.
@
text
@d2539 1
a2539 1
gdbarch_return_value (struct gdbarch *gdbarch, struct type *functype, struct type *valtype, struct regcache *regcache, gdb_byte *readbuf, const gdb_byte *writebuf)
d2545 1
a2545 1
  return gdbarch->return_value (gdbarch, functype, valtype, regcache, readbuf, writebuf);
@


1.485
log
@	* gdbtypes.h (struct main_type): Change type of name,tag_name,
	and fields.name members from char * to const char *.  All uses updated.
	(struct cplus_struct_type): Change type of fn_fieldlists.name member
	from char * to const char *.  All uses updated.
	(type_name_no_tag): Update.
	(lookup_unsigned_typename, lookup_signed_typename): Update.
	* gdbtypes.c (type_name_no_tag): Change result type
	from char * to const char *.  All callers updated.
	(lookup_unsigned_typename, lookup_signed_typename): Change type of
	name parameter from char * to const char *.
	* symtab.h (struct cplus_specific): Change type of demangled_name
	member from char * to const char *.  All uses updated.
	(struct general_symbol_info): Change type of name and
	mangled_lang.demangled_name members from char * to const char *.
	All uses updated.
	(symbol_get_demangled_name, symbol_natural_name): Update.
	(symbol_demangled_name, symbol_search_name): Update.
	* symtab.c (symbol_get_demangled_name): Change result type
	from char * to const char *.  All callers updated.
	(symbol_natural_name, symbol_demangled_name): Ditto.
	(symbol_search_name): Ditto.
	(completion_list_add_name): Change type of symname,sym_text,
	text,word parameters from char * to const char *.
	(completion_list_objc_symbol): Change type of sym_text,
	text,word parameters from char * to const char *.
	* ada-lang.c (find_struct_field): Change type of name parameter
	from char * to const char *.
	(encoded_ordered_before): Similarly for N0,N1 parameters.
	(old_renaming_is_invisible): Similarly for function_name parameter.
	(ada_type_name): Change result type from char * to const char *.
	All callers updated.
	* ada-lang.h (ada_type_name): Update.
	* buildsym.c (hashname): Change type of name parameter
	from char * to const char *.
	* buildsym.h (hashname): Update.
	* dbxread.c (end_psymtab): Change type of include_list parameter
	from char ** to const char **.
	* dwarf2read.c (determine_prefix): Change result type
	from char * to const char *.  All callers updated.
	* f-lang.c (find_common_for_function): Change type of name, funcname
	parameters from char * to const char *.
	* f-lang.c (find_common_for_function): Update.
	* f-valprint.c (list_all_visible_commons): Change type of funcname
	parameters from char * to const char *.
	* gdbarch.sh (static_transform_name): Change type of name parameter
	and result from char * to const char *.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* i386-sol2-tdep.c (i386_sol2_static_transform_name): Change type
	of name parameter from char * to const char *.
	* jv-lang.c (java_primitive_type_from_name): Ditto.
	(java_demangled_signature_length): Similarly for signature parameter.
	(java_demangled_signature_copy): Ditto.
	(java_demangle_type_signature): Ditto.
	* jv-lang.h (java_primitive_type_from_name): Update.
	(java_demangle_type_signature): Update.
	* objc-lang.c (specialcmp): Change type of a,b parameters
	from char * to const char *.
	* p-lang.c (is_pascal_string_type): Change type of arrayname parameter
	from char * to const char *.  All callers updated.
	* p-lang.h (is_pascal_string_type): Update.
	* solib-frv.c (find_canonical_descriptor_in_load_object): Change type
	of name parameter from char * to const char *.
	* sparc-sol2-tdep.c (sparc_sol2_static_transform_name): Ditto.
	* utils.c (fprintf_symbol_filtered): Ditto.
	* defs.h (fprintf_symbol_filtered): Update.
	* sparc-tdep.h (sparc_sol2_static_transform_name): Update.
	* stabsread.h (end_psymtab): Update.
	* stack.c (find_frame_funname): Change type of funname parameter
	from char ** to const char **.
	* stack.h (find_frame_funname): Update.
	* typeprint.c (type_print): Change type of varstring parameter
	from char * to const char *.
	* value.h (type_print): Update.
	* xcoffread.c (xcoff_start_psymtab): Change type of filename parameter
	from char * to const char *.  All callers updated.
	(xcoff_end_psymtab): Change type of include_list parameter
	from char ** to const char **.  All callers updated.
	(swap_sym): Similarly for name parameter.  All callers updated.
	* coffread.c (patch_type): Add (char*) cast to xfree parameter.
	Use xstrdup.
	(process_coff_symbol): Use xstrdup.
	* stabsread.c (stabs_method_name_from_physname): Renamed from
	update_method_name_from_physname.  Change result type from void
	to char *.  All callers updated.
	(read_member_functions): In has_destructor case, store name in objfile
	obstack instead of malloc space.  In !has_stub case, fix mem leak.
@
text
@d268 10
d436 10
d738 10
d1300 36
d3903 184
@


1.484
log
@	* blockframe.c (find_pc_partial_function_gnu_ifunc): Change type of
	"name" parameter to const char ** from char **.  All callers updated.
	(find_pc_partial_function): Ditto.
	(cache_pc_function_name): Change type to const char * from char *.
	* symtab.h ((find_pc_partial_function_gnu_ifunc): Update.
	(find_pc_partial_function): Update.
	* alpha-tdep.h (struct gdbarch_tdep, member pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	All uses updated.
	* arch-utils.c (generic_in_solib_return_trampoline): Change
	type of "name" parameter to const char * from char *.
	* arch-utils.h (generic_in_solib_return_trampoline): Update.
	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	* gdbarch.sh (in_solib_return_trampoline): Ditto.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* hppa-hpux-tdep.c (hppa_hpux_in_solib_return_trampoline): Update.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Update.
	* m32r-linux-tdep.c (m32r_linux_pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	* skip.c (skip_function_pc): Ditto.
	* sparc-sol2-tdep.c (sparc_sol2_pc_in_sigtramp): Ditto.
	* sparc-tdep.h (sparc_sol2_pc_in_sigtramp): Update.
	* sparc64fbsd-tdep.c (sparc64fbsd_pc_in_sigtramp): Ditto.
	* sparc64nbsd-tdep.c (sparc64nbsd_pc_in_sigtramp): Ditto.
	* sparc64obsd-tdep.c (sparc64obsd_pc_in_sigtramp): Ditto.
	* sparcnbsd-tdep.c (sparc32nbsd_pc_in_sigtramp): Ditto.
	* sparcobsd-tdep.c (sparc32obsd_pc_in_sigtramp): Ditto.
	* nbsd-tdep.c (nbsd_pc_in_sigtramp): Similary for "func_name".
	* nbsd-tdep.h (nbsd_pc_in_sigtramp): Update.
@
text
@d3649 2
a3650 2
char *
gdbarch_static_transform_name (struct gdbarch *gdbarch, char *name)
@


1.483
log
@	* gdbarch.sh (find_memory_regions): New callback.
	* gdbarch.c, gdbarch.h: Regenerate.

	* gcore.c (gcore_memory_sections): Try gdbarch find_memory_regions
	callback before falling back to target method.

	* linux-nat.c (read_mapping, linux_nat_find_memory_regions): Remove.
	(linux_target_install_ops): No longer install it.

	* linux-tdep.c (linux_find_memory_regions): New function.
	(linux_init_abi): Install it.
@
text
@d3011 1
a3011 1
gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch, CORE_ADDR pc, char *name)
@


1.482
log
@	* gdbarch.sh (make_corefile_notes): New architecture callback.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Likewise.

	* gcore.c (write_gcore_file): Try gdbarch_make_corefile_notes
	before target_make_corefile_notes.  If NULL is returned, the
	target does not support core file generation.

	* linux-nat.c: Include "linux-tdep.h".
	(find_signalled_thread, find_stop_signal): Remove.
	(linux_nat_do_thread_registers): Likewise.
	(struct linux_nat_corefile_thread_data): Likewise.
	(linux_nat_corefile_thread_callback): Likewise.
	(iterate_over_spus): Likewise.
	(struct linux_spu_corefile_data): Likewise.
	(linux_spu_corefile_callback): Likewise.
	(linux_spu_make_corefile_notes): Likewise.
	(linux_nat_collect_thread_registers): New function.
	(linux_nat_make_corefile_notes): Replace contents by call to
	linux_make_corefile_notes passing linux_nat_collect_thread_registers
	as native-only callback.

	* linux-tdep.h: Include "bfd.h".
	(struct regcache): Add forward declaration.
	(linux_collect_thread_registers_ftype): New typedef.
	(linux_make_corefile_notes): Add prototype.
	* linux-tdep.c: Include "gdbthread.h", "gdbcore.h", "regcache.h",
	"regset.h", and "elf-bfd.h".
	(find_signalled_thread, find_stop_signal): New functions.
	(linux_spu_make_corefile_notes): Likewise.
	(linux_collect_thread_registers): Likewise.
	(struct linux_corefile_thread_data): New data structure.
	(linux_corefile_thread_callback): New funcion.
	(linux_make_corefile_notes): Likewise.
	(linux_make_corefile_notes_1): Likewise.
	(linux_init_abi): Install it.
@
text
@d243 1
d401 1
d691 1
d934 6
d3290 24
@


1.481
log
@	* gdbarch.sh (info_proc): New callback.
	* gdbarch.c, gdbarch.h: Regenerate.

	* infcmd.c (info_proc_cmd_1): Try gdbarch info_proc callback
	before falling back to the target info_proc callback.

	* linux-nat.c: Do not include "cli/cli-utils.h".
	(linux_nat_info_proc): Remove.
	(linux_target_install_ops): No longer install it.

	* linux-tdep.c: Include "cli/cli-utils.h" and <ctype.h>.
	(read_mapping): New function.
	(linux_info_proc): Likewise.
	(linux_init_abi): Install it.
@
text
@d242 1
d399 1
d688 1
d1045 6
d3257 24
@


1.480
log
@Fix 'sprintf' of potential NULL pointer in 'maint print arch'

gdb/
        * gdbarch.sh (function_list): Use 'pstring' when printing
        'gcore_bfd_target'.
        * gdbarch.c: Regenerate.
@
text
@d275 1
d431 1
d720 1
d1009 6
d3923 24
@


1.479
log
@Fix jit.exp on most 32-bit targets.

	* gdbarch.sh: New field 'long_long_align_bit'.
	* gdbarch.c, gdbarch.h: Regenerate.
	* i386-tdep.c (i386_gdbarch_init): Set long_long_align_bit to 32.
	* jit.c (jit_read_code_entry): Use it to determine correct size offset.
@
text
@d956 1
a956 1
                      gdbarch->gcore_bfd_target);
@


1.478
log
@	Add return address collection for tracepoints.
	* tracepoint.c (encode_actions_1): Add case for $_ret.
	(validate_actionline): Check for $_ret.
	(trace_dump_actions): Ditto.
	* ax-gdb.h (gen_trace_for_return_address): Declare.
	* ax-gdb.c: Include arch-utils.h.
	(gen_trace_for_return_address): New function.
	(agent_command): Add return address special case.
	* amd64-tdep.c: Include ax.h and ax-gdb.h.
	(amd64_gen_return_address): New function.
	(amd64_init_abi): Call it.
	* i386-tdep.c: Include ax.h and ax-gdb.h.
	(i386_gen_return_address): New function.
	(i386_init_abi): Call it.
	* arch-utils.h (default_gen_return_address): Declare.
	* arch-utils.c (default_gen_return_address): New function.
	* gdbarch.sh (gen_return_address): New method.
	* gdbarch.h, gdbarch.c: Regenerate.

	* gdb.texinfo (Tracepoint Action Lists): Document $_ret.

	* gdb.trace/collection.exp: Test collection of $_ret.
@
text
@d148 1
d303 1
d468 1
d582 1
d1027 3
d1434 17
@


1.477
log
@gdb
	* amd64-tdep.c (amd64_pseudo_register_read_value): Rename
	from amd64_pseudo_register_read.  Change arguments.  Call
	mark_value_bytes_unavailable when needed.
	(amd64_init_abi): Use set_gdbarch_pseudo_register_read_value, not
	set_gdbarch_pseudo_register_read.
	* sentinel-frame.c (sentinel_frame_prev_register): Use
	regcache_cooked_read_value.
	* regcache.h (regcache_cooked_read_value): Declare.
	* regcache.c (regcache_cooked_read_value): New function.
	(regcache_cooked_read): Call
	gdbarch_pseudo_register_read_value if available.
	* i386-tdep.h (i386_pseudo_register_read_value): Declare.
	(i386_pseudo_register_read): Remove.
	* i386-tdep.c (i386_pseudo_register_read_into_value): Rename from
	i386_pseudo_register_read.  Change arguments.  Call
	mark_value_bytes_unavailable when needed.
	(i386_pseudo_register_read_value): New function.
	(i386_gdbarch_init): Call set_gdbarch_pseudo_register_read_value,
	not set_gdbarch_pseudo_register_read.
	* gdbarch.sh (pseudo_register_read_value): New method.
	* gdbarch.c, gdbarch.h: Rebuild.
	* findvar.c (value_from_register): Call get_frame_register_value.
gdb/testsuite
	* gdb.dwarf2/typeddwarf.c: XFAIL 'z' on x86-64.
	* gdb.dwarf2/typeddwarf.exp (xfail-gdb-test): Add arch_pattern
	argument.
	* gdb.dwarf2/typeddwarf-amd64.S: New file.
@
text
@d273 1
d427 1
d518 1
d713 1
d954 3
d3873 17
@


1.476
log
@Various spelling fixes.

gdb/ChangeLog:

        From Stephen Kitt  <steve@@sk2.org>
        * breakpoint.c, breakpoint.h, cli/cli-dump.c, dwarf2expr.c,
        gdbarch.c, gdbarch.sh, remote.c: Various spelling fixes.

gdb/testsuite/ChangeLog:

        From Stephen Kitt  <steve@@sk2.org>
        * gdb.base/help.exp: Adjust following some spelling corrections
        in GDB.
@
text
@d164 1
d317 1
d599 1
d1091 6
d1712 24
@


1.475
log
@	gdb/
	* dwarf2loc.c (read_pieced_value): Handle get_frame_register_bytes
	returning that the register piece is unavailable/optimized out.
	(write_pieced_value): Handle get_frame_register_bytes returning
	that the register piece is unavailable/optimized out when doing a
	read-modify write of a bitfield.
	* findvar.c (value_from_register): Handle get_frame_register_bytes
	returning that the register piece is unavailable/optimized out.
	* frame.c (get_frame_register_bytes): New parameters `optimizedp'
	and `unavailablep'.  Throw error on bad debug info.  Use
	frame_register instead of frame_register_read, to fill in the new
	arguments.
	* frame.h (get_frame_register_bytes): New parameters `optimizedp'
	and `unavailablep'.
	* valops.c: (value_assign): Adjust, and handle
	get_frame_register_bytes failing.
	* spu-tdep.c: Include exceptions.h.
	(spu_software_single_step): Adjust, and handle
	get_frame_register_bytes failing.
	(spu_get_longjmp_target): Ditto.
	* gdbarch.sh (register_to_value): Change to return int.  New
	parameters `optimizedp' and `unavailablep'.
	* gdbarch.h, gdbarch.c: Regenerate.
	* i386-tdep.c (i386_register_to_value): Adjust to new
	gdbarch_register_to_value interface.
	* i387-tdep.c (i387_register_to_value): Ditto.
	* i387-tdep.h (i387_register_to_value): Ditto.
	* alpha-tdep.c (alpha_register_to_value): Ditto.
	* ia64-tdep.c (ia64_register_to_value): Ditto.
	* m68k-tdep.c (m68k_register_to_value): Ditto.
	* mips-tdep.c (mips_register_to_value): Ditto.
	* rs6000-tdep.c (rs6000_register_to_value): Ditto.
@
text
@d4033 1
a4033 1
                        _("gdbarch: Duplicate registraration "
@


1.474
log
@	gdb/
	* regcache.h (regcache_raw_read, regcache_raw_read_signed)
	(regcache_raw_read_unsigned, regcache_raw_read_signed)
	(regcache_raw_read_unsigned, regcache_raw_read_part)
	(regcache_cooked_read, regcache_cooked_read_signed)
	(regcache_cooked_read_unsigned, regcache_cooked_read_part)
	(regcache_cooked_read_ftype): Change return to enum
	register_status.
	* regcache.c: Include exceptions.h
	(regcache_save): Adjust to handle REG_UNAVAILABLE registers.
	(do_cooked_read): Change return to enum register_status.  Always
	forward to regcache_cooked_read.
	(regcache_raw_read): Change return to enum register_status.  If
	the register is not REG_VALID, memset the buffer.  Return the
	register's status.
	(regcache_raw_read_signed): Handle non-REG_VALID registers and
	return the register's status.
	(regcache_raw_read_unsigned): Ditto.
	(regcache_cooked_read): Change return to enum register_status.
	Assert that with read-only regcaches, the register's status must
	be known.  If the regcache is read-only, and the register is not
	REG_VALID, memset the buffer.  Return the register's status.
	(regcache_cooked_read_signed): Change return to enum
	register_status.  Handle non-REG_VALID registers and return the
	register's status.
	(regcache_cooked_read_unsigned): Change return to enum
	register_status.  Handle non-REG_VALID registers and return the
	register's status.
	(regcache_xfer_part, regcache_raw_read_part)
	(regcache_cooked_read_part): Change return to enum
	register_status.  Return the register's status.
	(regcache_read_pc): Throw NOT_AVAILABLE_ERROR if the register is
	unavailable.
	(regcache_dump): Handle unavailable cooked registers.
	* frame.c (do_frame_register_read): Adjust interface to match
	regcache_cooked_read_ftype.
	* gdbarch.sh (pseudo_register_read): Change return to enum
	register_status.
	* gdbarch.h, gdbarch.c: Regenerate.

	* i386-tdep.h (i386_pseudo_register_read): Change return to enum
	register_status.
	* i386-tdep.c (i386_pseudo_register_read): Change return to enum
	register_status.  If reading a raw register indicates the raw
	register is not valid, return the raw register's status,
	otherwise, return REG_VALID.
	* amd64-tdep.c (amd64_pseudo_register_read): Change return to enum
	register_status.  Handle non-REG_VALID raw registers and return
	the register's status.
	* arm-tdep.c (arm_neon_quad_read)
	(arm_pseudo_read): Change return to enum register_status.  Handle
	non-REG_VALID raw registers and return the register's status.
	* avr-tdep.c (avr_pseudo_register_read): Ditto.
	* frv-tdep.c (frv_pseudo_register_read): Ditto.
	* h8300-tdep.c (h8300_pseudo_register_read): Ditto.
	* hppa-tdep.c (hppa_pseudo_register_read): Ditto.
	* m32c-tdep.c (m32c_move_reg_t): Change return to enum
	register_status.
	(m32c_raw_read, m32c_raw_write, m32c_banked_read)
	(m32c_banked_write, m32c_sb_read, m32c_sb_write, m32c_part_read)
	(m32c_part_write, m32c_cat_read, m32c_cat_write)
	(m32c_r3r2r1r0_read, m32c_r3r2r1r0_write)
	(m32c_pseudo_register_read): Change return to enum
	register_status.  Adjust.
	* m68hc11-tdep.c (m68hc11_pseudo_register_read): Change return to
	enum register_status.  Return the register's status.
	* mep-tdep.c (mep_pseudo_cr32_read): Change return to enum
	register_status.  Return the register's status.
	(mep_pseudo_cr64_read, mep_pseudo_register_read): Ditto.
	* mips-tdep.c (mips_pseudo_register_read): Ditto.
	* mt-tdep.c (mt_pseudo_register_read): Ditto.
	* rs6000-tdep.c (move_ev_register_func): New typedef.
	(e500_move_ev_register): Use it.  Change return to enum
	register_status.  Return the register's status.
	(do_regcache_raw_read): New function.
	(do_regcache_raw_write): New function.
	(e500_pseudo_register_read): Change return to enum
	register_status.  Return the register's status.  Use
	do_regcache_raw_read.
	(e500_pseudo_register_write): Adjust.  Use do_regcache_raw_write.
	(dfp_pseudo_register_read): Change return to enum register_status.
	Return the register's status.
	(vsx_pseudo_register_read): Ditto.
	(efpr_pseudo_register_read): Ditto.
	(rs6000_pseudo_register_read): Ditto.
	* s390-tdep.c (s390_pseudo_register_read): Change return to enum
	register_status.  Return the register's status.
	* sh64-tdep.c (pseudo_register_read_portions): New function.
	(sh64_pseudo_register_read): Change return to enum
	register_status.  Use pseudo_register_read_portions.  Return the
	register's status.
	* ia64-tdep.c (ia64_pseudo_register_read): Change return to enum
	register_status.  Return the register's status.
	* sh-tdep.c (pseudo_register_read_portions): New function.
	(sh_pseudo_register_read): Change return to enum register_status.
	Use pseudo_register_read_portions.  Return the register's status.
	* sparc-tdep.c (sparc32_pseudo_register_read): Change return to
	enum register_status.  Return the register's status.
	* sparc64-tdep.c (sparc64_pseudo_register_read): Ditto.
	* spu-tdep.c (spu_pseudo_register_read_spu)
	(spu_pseudo_register_read): Ditto.
	* xtensa-tdep.c (xtensa_register_read_masked)
	(xtensa_pseudo_register_read): Ditto.
	* bfin-tdep.c (bfin_pseudo_register_read): Ditto.
@
text
@d2265 2
a2266 2
void
gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, gdb_byte *buf)
d2272 1
a2272 1
  gdbarch->register_to_value (frame, regnum, type, buf);
@


1.473
log
@2011-01-07  Michael Snyder  <msnyder@@vmware.com>

	* ada-lang.c: Comment cleanup, mostly periods and spaces.
	* ada-lang.h: Ditto.
	* ada-tasks.c: Ditto.
	* ada-valprint.c: Ditto.
	* aix-threads.c: Ditto.
	* alpha-linux-nat.c: Ditto.
	* alpha-linux-tdep.c: Ditto.
	* alpha-mdebug-tdep.c: Ditto.
	* alpha-nat.c: Ditto.
	* alpha-osf1-tdep.c: Ditto.
	* alpha-tdep.c: Ditto.
	* alphabsd-nat.c: Ditto.
	* alphabsd-tdep.c: Ditto.
	* amd64-darwin-tdep.c: Ditto.
	* amd64-linux-nat.c: Ditto.
	* amd64-linux-tdep.c: Ditto.
	* amd64-sol2-tdep.c: Ditto.
	* amd64-tdep.c: Ditto.
	* amd64-fbsd-tdep.c: Ditto.
	* amd64-nbsd-tdep.c: Ditto.
	* amd64-obsd-tdep.c: Ditto.
	* amd64-linux-nat.c: Ditto.
	* amd64-linux-tdep.c: Ditto.
	* arm-tdep.c: Ditto.
	* arm-tdep.h: Ditto.
	* armnbsd-nat.c: Ditto.
	* avr-tdep.c: Ditto.
	* bfin-tdep.c: Ditto.
	* bsd-kvm.c: Ditto.
	* c-typeprintc: Ditto.
	* c-valprint.c: Ditto.
	* coff-pe-read.h: Ditto.
	* coffreead.c: Ditto.
	* cris-tdep.c: Ditto.
	* d-lang.c: Ditto.
	* darwin-nat-info.c: Ditto.
	* darwin-nat.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* dcache.c: Ditto.
	* dcache.h: Ditto.
	* dec-thread.c: Ditto.
	* defs.h: Ditto.
	* demangle.c: Ditto.
	* dicos-tdep.c: Ditto.
	* dictionary.c: Ditto.
	* dictionary.h: Ditto.
	* dink32-rom.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dsrec.c: Ditto.
	* dummy-frame.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* environ.c: Ditto.
	* eval.c: Ditto.
	* event-top.h: Ditto.
	* exceptions.c: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-exp.y: Ditto.
	* f-lang.c: Ditto.
	* f-lang.h: Ditto.
	* f-typeprint.c: Ditto.
	* f-valprint.c: Ditto.
	* fbsd-nat.c: Ditto.
	* findvar.c: Ditto.
	* fork-child.c: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* frv-linux-tdep.c: Ditto.
	* frv-tdep.c: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_string.h: Ditto.
	* gdb_thread_db.h: Ditto.
	* gdb_wait.h: Ditto.
	* gdbarch.sh: Ditto.
	* gdbcore.h: Ditto.
	* gdbthread.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* gnu-nat.c: Ditto.
	* gnu-nat.h: Ditto.
	* gnu-v2-abi.c: Ditto.
	* gnu-v3-abi.c: Ditto.
	* go32-nat.c: Ditto.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
@
text
@d1685 1
a1685 1
void
d1692 1
a1692 1
  gdbarch->pseudo_register_read (gdbarch, regcache, cookednum, buf);
@


1.472
log
@2010-12-28  Hui Zhu  <teawater@@gmail.com>

	* gdbarch.sh (ax_pseudo_register_collect,
	ax_pseudo_register_push_stack): new callbacks.
	(agent_expr): Forward declare.
	* gdbarch.h, gdbarch.c: Regenerate.
	* ax-gdb.c (gen_expr): Remove pseudo-register check code.
	* ax-general.c (user-regs.h): New include.
	(ax_reg): Call gdbarch_ax_pseudo_register_push_stack.
	(ax_reg_mask): Call gdbarch_ax_pseudo_register_collect.
	* mips-tdep.c (ax.h): New include.
	(mips_ax_pseudo_register_collect,
	mips_ax_pseudo_register_push_stack): New functions.
	(mips_gdbarch_init): Set mips_ax_pseudo_register_collect and
	mips_ax_pseudo_register_push_stack.
@
text
@d33 1
a33 1
   easier. */
d89 1
a89 1
/* Maintain the struct gdbarch object */
d99 1
a99 1
  /* basic architectural information */
d106 1
a106 1
  /* target specific vector. */
d110 1
a110 1
  /* per-architecture data-pointers */
d114 1
a114 1
  /* per-architecture swap-regions */
d276 1
a276 1
   choice). */
d284 1
a284 1
  /* basic architecture information */
d290 1
a290 1
  /* target specific vector and its dump routine */
d292 1
a292 1
  /*per-architecture data-pointers and swap regions */
d430 1
a430 1
   ``struct gdbarch_info''. */
d456 1
a456 1
  /* Force the explicit initialization of these. */
d568 1
a568 1
  /* Check those that need to be defined for the given multi-arch level. */
d593 2
a594 2
  /* Skip verify of read_pc, has predicate */
  /* Skip verify of write_pc, has predicate */
d596 2
a597 2
  /* Skip verify of pseudo_register_read, has predicate */
  /* Skip verify of pseudo_register_write, has predicate */
d601 2
a602 2
  /* Skip verify of ax_pseudo_register_collect, has predicate */
  /* Skip verify of ax_pseudo_register_push_stack, has predicate */
d613 2
a614 2
  /* Skip verify of register_type, has predicate */
  /* Skip verify of dummy_id, has predicate */
d616 1
a616 1
  /* Skip verify of push_dummy_call, has predicate */
d618 1
a618 1
  /* Skip verify of push_dummy_code, has predicate */
d620 2
a621 2
  /* Skip verify of print_float_info, has predicate */
  /* Skip verify of print_vector_info, has predicate */
d625 1
a625 1
  /* Skip verify of get_longjmp_target, has predicate */
d630 2
a631 2
  /* Skip verify of integer_to_address, has predicate */
  /* Skip verify of return_value, has predicate */
d634 1
a634 1
  /* Skip verify of skip_main_prologue, has predicate */
d640 1
a640 1
  /* Skip verify of adjust_breakpoint_address, has predicate */
d646 1
a646 1
  /* Skip verify of fetch_tls_load_module_address, has predicate */
d648 4
a651 4
  /* Skip verify of unwind_pc, has predicate */
  /* Skip verify of unwind_sp, has predicate */
  /* Skip verify of frame_num_args, has predicate */
  /* Skip verify of frame_align, has predicate */
d656 2
a657 2
  /* Skip verify of software_single_step, has predicate */
  /* Skip verify of single_step_through_delay, has predicate */
d668 3
a670 3
  /* Skip verify of address_class_type_flags, has predicate */
  /* Skip verify of address_class_type_flags_to_name, has predicate */
  /* Skip verify of address_class_name_to_type_flags, has predicate */
d672 5
a676 5
  /* Skip verify of fetch_pointer_argument, has predicate */
  /* Skip verify of regset_from_core_section, has predicate */
  /* Skip verify of core_xfer_shared_libraries, has predicate */
  /* Skip verify of core_pid_to_str, has predicate */
  /* Skip verify of gcore_bfd_target, has predicate */
d679 3
a681 3
  /* Skip verify of skip_permanent_breakpoint, has predicate */
  /* Skip verify of max_insn_length, has predicate */
  /* Skip verify of displaced_step_copy_insn, has predicate */
d683 1
a683 1
  /* Skip verify of displaced_step_fixup, has predicate */
d688 4
a691 4
  /* Skip verify of relocate_instruction, has predicate */
  /* Skip verify of overlay_update, has predicate */
  /* Skip verify of core_read_description, has predicate */
  /* Skip verify of static_transform_name, has predicate */
d693 2
a694 2
  /* Skip verify of process_record, has predicate */
  /* Skip verify of process_record_signal, has predicate */
d697 3
a699 3
  /* Skip verify of get_siginfo_type, has predicate */
  /* Skip verify of record_special_symbol, has predicate */
  /* Skip verify of get_syscall_number, has predicate */
d717 1
a717 1
/* Print out the details of the current architecture. */
d3835 1
a3835 1
   modules. */
d3894 1
a3894 1
/* Create/delete the gdbarch data vector. */
d3905 1
a3905 1
   data-pointer. */
d3919 1
a3919 1
   data-pointer. */
d3958 1
a3958 1
/* Keep a registry of the architectures known by GDB. */
d3983 1
a3983 1
     architectures. */
d4022 2
a4023 1
                      _("gdbarch: Attempt to register unknown architecture (%d)"),
d4026 1
a4026 1
  /* Check that we haven't seen this architecture before */
d4033 2
a4034 1
                        _("gdbarch: Duplicate registraration of architecture (%s)"),
d4095 1
a4095 1
  /* Must have found some sort of architecture. */
@


1.471
log
@2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	bfd/
	* bfd-in2.h: Regenerate.
	* corefile.c (bfd_core_file_pid): New.

	* targets.c (BFD_JUMP_TABLE_CORE): Add NAME##_core_file_pid.
	(struct bfd_target) <_core_file_pid>: New.

	* libbfd-in.h (_bfd_nocore_core_file_pid): Declare.
	* libbfd.c (_bfd_nocore_core_file_pid): New.

	* elf-bfd.h (bfd_elf32_core_file_pid, bfd_elf64_core_file_pid):
	Declare.
	* elfcode.h (elf_core_file_pid): New define.
	* elfcore.h (elf_core_file_pid): New function.

	* elf.c (elfcore_make_pid): Rewrite.
	(elfcore_grok_prstatus): Only set core_pid if not set yet.
	(elfcore_grok_prstatus) [!HAVE_PRSTATUS_T_PR_WHO]: Fallback to
	getting the lwpid from prstat.pr_pid.

	* elf64-x86-64.c (elf64_x86_64_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf64_x86_64_grok_psinfo): Extract the the main process's PID,
	and store it in elf_tdata's core_pid field.
	* elf32-i386.c (elf_i386_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	(elf_i386_grok_psinfo): Extract the the main process's PID, and
	store it in elf_tdata's core_pid field.

	* elf32-am33lin.c (elf32_am33lin_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-arm.c (elf32_arm_nabi_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-cris.c (cris_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-frv.c (elf32_frv_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-hppa.c (elf32_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-ppc.c (ppc_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-s390.c (elf_s390_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score.c (s3_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-score7.c (s7_bfd_score_elf_grok_prstatus): Write the LWPID
	to elf_tdata's core_lwpid instead of to core_pid.
	* elf32-sh.c (elf32_shlin_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf32-xtensa.c (elf_xtensa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-hppa.c (elf64_hppa_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-mips.c (elf64_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elf64-ppc.c (ppc64_elf_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.
	* elfn32-mips.c (elf32_mips_grok_prstatus): Write the LWPID to
	elf_tdata's core_lwpid instead of to core_pid.

	* plugin.c (bfd_plugin_core_file_pid): New function.
	* aout-target.h (MY_core_file_pid): Define.
	* aout-tic30.c (MY_core_file_pid, MY_core_file_p): New defines.
	* coff-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff_vec, pmac_xcoff_vec): Use BFD_JUMP_TABLE_CORE.
	* coff64-rs6000.c (coff_core_file_pid): New define.
	(rs6000coff64_vec): Use BFD_JUMP_TABLE_CORE.
	(xcoff64_core_file_pid): New define.
	(aix5coff64_vec): Use BFD_JUMP_TABLE_CORE.
	* mach-o-target.c (bfd_mach_o_core_file_pid): New define.
	* aix386-core.c (aix386_core_file_pid): New define.
	* hppabsd-core.c (hppabsd_core_core_file_pid): New define.
	* hpux-core.c (hpux_core_core_file_pid): New define.
	* irix-core.c (irix_core_core_file_pid): New define.
	* lynx-core.c (lynx_core_file_pid): New define.
	* osf-core.c (osf_core_core_file_pid): New define.
	* ptrace-core.c (ptrace_unix_core_file_pid): New define.
	* sco5-core.c (sco5_core_file_pid): New define.
	* xcoff-target.h (coff_core_file_pid): New define.
	* netbsd-core.c (netbsd_core_core_file_pid): New define.

gdb/
2010-08-18  Pedro Alves  <pedro@@codesourcery.com>

	PR corefile/8210

	gdb/
	* corelow.c (add_to_thread_list): Don't use
	gdbarch_core_reg_section_encodes_pid.  Use bfd_core_file_pid.
	(get_core_register_section): Don't use
	gdbarch_core_reg_section_encodes_pid.

	* gdbarch.sh (core_reg_section_encodes_pid): Delete.
	* gdbarch.h, gdbarch.c: Regenerate.
	* amd64-sol2-tdep.c (amd64_sol2_init_abi): Don't set
	gdbarch_core_reg_section_encodes_pid.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Ditto.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Ditto.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Ditto.
@
text
@d167 2
d319 2
d601 2
d770 12
d1762 48
@


1.470
log
@	* dwarf2-frame.c (struct dwarf2_cie): Add ptr_size member.
	Throughout, call read_encoded_value with ptr_size rather than addr_size.
	(decode_frame_entry_1): Remove redundant setting of
	addr_size.  Call gdbarch_dwarf2_addr_size rather than gdbarch_ptr_bit
	to determine addr_size in Dwarf versions < 4.  Set ptr_size dependent
	on examined frame section.  Add comment to explain why.
	* gdbarch.sh (dwarf2_addr_size): Define as variable.  Add lengthy
	comment to explain usage.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.

	* xstormy16-tdep.c (xstormy16_gdbarch_init): Set dwarf2_addr_size to 4.
@
text
@a236 1
  int core_reg_section_encodes_pid;
a386 1
  0,  /* core_reg_section_encodes_pid */
a667 1
  /* Skip verify of core_reg_section_encodes_pid, invalid_p == 0 */
a817 3
                      "gdbarch_dump: core_reg_section_encodes_pid = %s\n",
                      plongest (gdbarch->core_reg_section_encodes_pid));
  fprintf_unfiltered (file,
a3091 17
int
gdbarch_core_reg_section_encodes_pid (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of core_reg_section_encodes_pid, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_core_reg_section_encodes_pid called\n");
  return gdbarch->core_reg_section_encodes_pid;
}

void
set_gdbarch_core_reg_section_encodes_pid (struct gdbarch *gdbarch,
                                          int core_reg_section_encodes_pid)
{
  gdbarch->core_reg_section_encodes_pid = core_reg_section_encodes_pid;
}

@


1.469
log
@include/ChangeLog:

2010-07-06  Ken Werner  <ken.werner@@de.ibm.com>

	* floatformat.h (floatformat_ieee_half_big): Add declaration.
	(floatformat_ieee_half_little): Likewise.

libiberty/ChangeLog:

2010-07-06  Ken Werner  <ken.werner@@de.ibm.com>

	* floatformat.c (floatformat_ieee_half_big): New variable.
	(floatformat_ieee_half_little): Likewise.

gdb/ChangeLog:

2010-07-06  Ken Werner  <ken.werner@@de.ibm.com>

	* gdbtypes.h (floatformats_ieee_half): Add declaration.
	* gdbtypes.c (floatformats_ieee_half): New variable.
	* doublest.c (floatformat_from_length): Set format to
	gdbarch_half_format if length matches.
	* gdbarch.sh (half_bit): New architecture method.
	(half_format): Likewise.
	* gdbarch.h: Regenerate.
	* gdbarch.c: Likewise.
@
text
@d158 1
d309 1
d587 2
d875 3
d1566 18
@


1.469.2.1
log
@Make tracepoint can trace pseudo register.
Add MIPS callbacks.
@
text
@a165 2
  gdbarch_ax_pseudo_register_collect_ftype *ax_pseudo_register_collect;
  gdbarch_ax_pseudo_register_push_stack_ftype *ax_pseudo_register_push_stack;
a315 2
  0,  /* ax_pseudo_register_collect */
  0,  /* ax_pseudo_register_push_stack */
a594 2
  /* Skip verify of ax_pseudo_register_collect, has predicate */
  /* Skip verify of ax_pseudo_register_push_stack, has predicate */
a762 12
                      "gdbarch_dump: gdbarch_ax_pseudo_register_collect_p() = %d\n",
                      gdbarch_ax_pseudo_register_collect_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ax_pseudo_register_collect = <%s>\n",
                      host_address_to_string (gdbarch->ax_pseudo_register_collect));
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_ax_pseudo_register_push_stack_p() = %d\n",
                      gdbarch_ax_pseudo_register_push_stack_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ax_pseudo_register_push_stack = <%s>\n",
                      host_address_to_string (gdbarch->ax_pseudo_register_push_stack));
  fprintf_unfiltered (file,
a1724 48
gdbarch_ax_pseudo_register_collect_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->ax_pseudo_register_collect != NULL;
}

int
gdbarch_ax_pseudo_register_collect (struct gdbarch *gdbarch, struct agent_expr *ax, int reg)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->ax_pseudo_register_collect != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ax_pseudo_register_collect called\n");
  return gdbarch->ax_pseudo_register_collect (gdbarch, ax, reg);
}

void
set_gdbarch_ax_pseudo_register_collect (struct gdbarch *gdbarch,
                                        gdbarch_ax_pseudo_register_collect_ftype ax_pseudo_register_collect)
{
  gdbarch->ax_pseudo_register_collect = ax_pseudo_register_collect;
}

int
gdbarch_ax_pseudo_register_push_stack_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->ax_pseudo_register_push_stack != NULL;
}

int
gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch, struct agent_expr *ax, int reg)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->ax_pseudo_register_push_stack != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ax_pseudo_register_push_stack called\n");
  return gdbarch->ax_pseudo_register_push_stack (gdbarch, ax, reg);
}

void
set_gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch,
                                           gdbarch_ax_pseudo_register_push_stack_ftype ax_pseudo_register_push_stack)
{
  gdbarch->ax_pseudo_register_push_stack = ax_pseudo_register_push_stack;
}

int
@


1.468
log
@gdb/
2010-05-26  Pedro Alves  <pedro@@codesourcery.com>

	* NEWS: Mention the `qRelocInsn' feature.
	* gdbarch.sh (relocate_instruction): New.
	* amd64-tdep.c (rip_relative_offset): New.
	(append_insns): New.
	(amd64_relocate_instruction): New.
	(amd64_init_abi): Install it.
	* i386-tdep.c (append_insns): New.
	(i386_relocate_instruction): New.
	(i386_gdbarch_init): Install it.
	* remote.c (remote_get_noisy_reply): Handle qRelocInsn requests.
	* gdbarch.h, gdbarch.c: Regenerate.

gdb/doc/
2010-05-26  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo (General Query Packets) <qSupported>: Describe the
	`qRelocInsn' feature.
	(Relocate instruction reply packet): New subsection
	of `Tracepoint Packets'.
	(Tracepoint Packets): Mention that packets QTDP and QTStart
	support the qRelocInsn request, and add cross reference to new
	subsection.
@
text
@d148 2
d298 2
d458 1
d570 3
d946 6
d1392 33
@


1.467
log
@2010-05-13  Michael Snyder  <msnyder@@vmware.com>

	* gdbarch.sh: White space, add blank lines.
	* arch-utils.c: Ditto.
	* gdbarch.c: Regenerate.
@
text
@d248 1
d396 1
d498 1
d673 1
d1112 6
d3316 25
@


1.466
log
@	* gdbarch.sh (qsupported): Delete.
	* gdbarch.h, gdbarch.c: Regenerate.
	* remote.c (remote_query_supported): Remove use of
	gdbarch_qsupported.
@
text
@d514 1
d530 1
d548 1
d704 1
d3717 2
a3718 1
  /* Append the new registraration.  */
d3837 1
d3866 1
@


1.465
log
@2010-05-06  Michael Snyder  <msnyder@@vmware.com>

	* macrocmd.c (_initialize_macrocmd): Delete unused variable.
	* macroexp.c (gather_arguments): Delete unused variable.
	(substitute_args): Delete unused variable.
	* completer.c (gdb_completer_loc_break_characters): Unused, delete.
	* gdbarch.sh (gdbarch_printable_names): Delete unused variable.
	(_initialize_gdbarch): Delete unused variable.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c (initialize_current_architecture):
	Delete unused variable.
	(_initialize_gdbarch_utils): Delete unused variable.
	* gdbtypes.c (make_cv_type): Delete unused variable.
	(make_type_with_address_space): Delete unused variable.
@
text
@a262 1
  const char * qsupported;
a409 1
  0,  /* qsupported */
a681 1
  /* Skip verify of qsupported, invalid_p == 0 */
a1067 3
                      "gdbarch_dump: qsupported = %s\n",
                      gdbarch->qsupported);
  fprintf_unfiltered (file,
a3612 17
gdbarch_qsupported (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of qsupported, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_qsupported called\n");
  return gdbarch->qsupported;
}

void
set_gdbarch_qsupported (struct gdbarch *gdbarch,
                        const char * qsupported)
{
  gdbarch->qsupported = qsupported;
}

const char *
@


1.464
log
@	* defs.h: Adjust comment.
	* filesystem.h, filesystem.c: New files.
	* Makefile.in (SFILES): Add filesystem.c.
	(COMMON_OBS): Add filesystem.o.
	* solib.c (solib_find): Handle DOS-based filesystems.  Handle
	different target and host path flavours.
	* arm-symbian-tdep.c (arm_symbian_init_abi): Set
	has_dos_based_file_system on the gdbarch.
	* arm-wince-tdep.c (arm_wince_init_abi): Ditto.
	* i386-cygwin-tdep.c (i386_cygwin_init_abi): Ditto.
	* i386-tdep.c (i386_go32_init_abi): Ditto.
	* gdbarch.sh (has_dos_based_file_system): New.
	* gdbarch.h, gdbarch.c: Regenerate.
	* NEWS: Mention improved support for remote targets with DOS-based
	filesystems.  Mention new `set/show target-file-system-kind'
	commands.

	gdb/doc/
	* gdb.texinfo (Commands to specify files): Describe what how GDB
	looks up DOS-based filesystem paths on the system root.  Document
	the new `set/show target-file-system-kind' commands.
@
text
@a3851 1
  enum bfd_architecture a;
a4085 2
  struct cmd_list_element *c;

@


1.463
log
@	* solib.c (solib_find): Replace extension if
	solib_symbols_extension is set in the target gdbarch.
	* arm-symbian-tdep.c (arm_symbian_init_abi): Set
	solib_symbols_extension to "sym".
	* gdbarch.sh (solib_symbols_extension): New variable.
	(pstring): New function.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d267 1
d415 1
d687 1
d933 3
d3685 17
@


1.462
log
@gdb
2010-03-05  Corinna Vinschen  <vinschen@@redhat.com>
	    Tom Tromey  <tromey@@redhat.com>

	* utils.c (host_char_to_target): Add 'gdbarch' argument.
	(parse_escape): Likewise.
	* python/py-utils.c (unicode_to_target_string): Update.
	(unicode_to_target_python_string): Update.
	(target_string_to_unicode): Update.
	* printcmd.c (printf_command): Update.
	* p-exp.y (yylex): Update.
	* objc-exp.y (yylex): Update.
	* mi/mi-parse.c: Include charset.h.
	(mi_parse_escape): New function.
	(mi_parse_argv): Use it.
	* jv-exp.y (yylex): Update.
	* i386-cygwin-tdep.c (i386_cygwin_auto_wide_charset): New
	function.
	(i386_cygwin_init_abi): Call set_gdbarch_auto_wide_charset.
	* gdbarch.sh (auto_charset, auto_wide_charset): New.
	* gdbarch.c: Rebuild.
	* gdbarch.h: Rebuild.
	* defs.h (parse_escape): Update.
	* cli/cli-setshow.c: Include arch-utils.h.
	(do_setshow_command): Update.
	* cli/cli-cmds.c (echo_command): Update.
	* charset.h (target_charset, target_wide_charset): Update.
	* charset.c: Include arch-utils.h.
	(target_charset_name): Default to "auto".
	(target_wide_charset_name): Likewise.
	(show_target_charset_name): Handle "auto".
	(show_target_wide_charset_name): Likewise.
	(be_le_arch): New global.
	(set_be_le_names): Add 'gdbarch' argument.
	(validate): Likewise.  Don't call set_be_le_names.
	(set_charset_sfunc, set_host_charset_sfunc)
	(set_target_charset_sfunc, set_target_wide_charset_sfunc):
	Update.
	(target_charset): Add 'gdbarch' argument.
	(target_wide_charset): Likewise.  Remove 'byte_order' argument.
	(auto_target_charset_name): New global.
	(default_auto_charset, default_auto_wide_charset): New functions.
	(_initialize_charset): Set auto_target_charset_name.  Allow "auto"
	for target charsets.  Copy result of nl_langinfo.  Use GetACP if
	USE_WIN32API.
	* c-lang.c (charset_for_string_type): Add 'gdbarch' argument,
	remove 'byte_order' argument.  Update.
	(classify_type): Likewise.
	(c_emit_char): Update.
	(c_printchar): Update.
	(c_printstr): Update.
	(c_get_string): Update.
	(evaluate_subexp_c): Update.
	* arch-utils.h (default_auto_charset, default_auto_wide_charset):
	Declare.
	* python/python.c (gdbpy_target_charset): New function.
	(gdbpy_target_wide_charset): Likewise.
	(GdbMethods): Update.
	* NEWS: Update.
gdb/doc
	* gdb.texinfo (Basic Python): Document target_charset and
	target_wide_charset.
gdb/testsuite
	* gdb.python/py-prettyprint.py (pp_nullstr.to_string): Use
	gdb.target_charset.
	(pp_ns.to_string): Likewise.
@
text
@d80 8
d266 1
d413 1
d1161 3
d3663 16
@


1.461
log
@Add qsupported to gdbarch.

2010-02-03  H.J. Lu  <hongjiu.lu@@intel.com>

	* gdbarch.sh: Add qsupported.

	* gdbarch.c: Regenerated.
	* gdbarch.h: Likewise.

	* remote.c (remote_state): Add gdbarch.
	(init_remote_state): Set gdbarch.
	(remote_query_supported): Support gdbarch_qsupported.
@
text
@d256 2
d402 2
d490 2
d673 2
d731 6
d3616 34
@


1.460
log
@	* gdbarch.sh: Set LANG and LC_ALL to C, not c.
	(remote_breakpoint_for_pc): Correct invalid_p check.
	* gdbarch.c: Regenerated.
@
text
@d255 1
d399 1
d666 1
d1041 3
d3585 17
@


1.459
log
@	* arch-utils.c (default_remote_breakpoint_from_pc): New function.
	* arch-utils.h (default_remote_breakpoint_from_pc): Declare.
	* gdbarch.c, gdbarch.h: Regenerated.
	* gdbarch.sh (remote_breakpoint_from_pc): New architecture method.
	* remote.c (remote_insert_breakpoint, remote_insert_hw_breakpoint): Use
	gdbarch_remote_breakpoint_from_pc.

	doc/
	* gdb.texinfo (Architecture-Specific Protocol Details): New section.
	Document ARM breakpoint types.
	(Register Packet Format): Move into the new section.
	(Packets): Describe the KIND argument for Z0, z0, Z1, and z1 packets.
@
text
@d599 1
a599 2
  if (gdbarch->remote_breakpoint_from_pc == default_remote_breakpoint_from_pc)
    fprintf_unfiltered (log, "\n\tremote_breakpoint_from_pc");
@


1.458
log
@	Add fast tracepoints.
	* arch-utils.h (default_fast_tracepoint_valid_at): Declare.
	* arch-utils.c (default_fast_tracepoint_valid_at): New function.
	* breakpoint.h (enum bptype): Add bp_fast_tracepoint.
	* breakpoint.c (tracepoint_type): New function.
	(ALL_TRACEPOINTS): Use it.
	(should_be_inserted): Ditto.
	(bpstat_check_location): Ditto.
	(print_one_breakpoint_location): Ditto.
	(user_settable_breakpoint): Ditto.
	(set_breakpoint_location_function): Ditto.
	(disable_breakpoints_in_shlibs): Ditto.
	(delete_trace_command): Ditto.
	(print_it_typical): Add bp_fast_tracepoint case.
	(bpstat_what): Ditto.
	(print_one_breakpoint_location): Ditto.
	(allocate_bp_location): Ditto.
	(mention): Ditto.
	(breakpoint_re_set_one): Ditto.
	(disable_command): Ditto.
	(enable_command): Ditto.
	(check_fast_tracepoint_sals): New function.
	(break_command_really): Call it.
	(ftrace_command): New function.
	(_initialize_breakpoint): Add ftrace command.
	* gdbarch.sh (fast_tracepoint_valid_at): New.
	* gdbarch.h, gdbarch.c: Regenerate.
	* i386-tdep.c (i386_fast_tracepoint_valid_at): New function.
	(i386_gdbarch_init): Use it.
	* remote.c (struct remote_state): New field fast_tracepoints.
	(PACKET_FastTracepoints): New packet config type.
	(remote_fast_tracepoint_feature): New function.
	(remote_protocol_features): Add FastTracepoints.
	(remote_supports_fast_tracepoints): New function.
	(_initialize_remote): Add FastTracepoints.
	* tracepoint.c (download_tracepoint): Add fast tracepoint option.
	* NEWS: Mention fast tracepoints.

	* gdb.texinfo (Create and Delete Tracepoints): Describe fast
	tracepoints.
	(Tracepoint Packets): Describe remote protocol for fast
	tracepoints.

	* gdb.trace/tracecmd.exp: Test ftrace.
@
text
@d191 1
d334 1
d461 1
d599 2
d1075 3
d2295 17
@


1.457
log
@2009-11-11  Michael Snyder  <msnyder@@vmware.com>

	* darwin-nat-info.c: Update copyright.
	* dbxread.c: Ditto.
	* gdbarch.sh: Ditto.
	* gdbarch.c: Ditto.
	* gdbarch.h: Ditto.
	* inline-frame.c: Ditto.
	* inline-frame.h: Ditto.
@
text
@d253 1
d395 1
d480 1
d659 1
d833 3
d3538 17
@


1.456
log
@2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	Add base multi-executable/process support to GDB.

	gdb/
	* Makefile.in (SFILES): Add progspace.c.
	(COMMON_OBS): Add progspace.o.
	* progspace.h: New.
	* progspace.c: New.

	* breakpoint.h (struct bp_target_info) <placed_address_space>: New
	field.
	(struct bp_location) <pspace>: New field.
	(struct breakpoint) <pspace>: New field.
	(bpstat_stop_status, breakpoint_here_p)
	(moribund_breakpoint_here_p, breakpoint_inserted_here_p)
	(regular_breakpoint_inserted_here_p)
	(software_breakpoint_inserted_here_p, breakpoint_thread_match)
	(set_default_breakpoint): Adjust prototypes.
	(remove_breakpoints_pid, breakpoint_program_space_exit): Declare.
	(insert_single_step_breakpoint, deprecated_insert_raw_breakpoint):
	Adjust prototypes.
	* breakpoint.c (executing_startup): Delete.
	(default_breakpoint_sspace): New.
	(breakpoint_restore_shadows): Skip if the address space doesn't
	match.
	(update_watchpoint): Record the frame's program space in the
	breakpoint location.
	(insert_bp_location): Record the address space in target_info.
	Adjust to pass the symbol space to solib_name_from_address.
	(breakpoint_program_space_exit): New.
	(insert_breakpoint_locations): Switch the symbol space and thread
	when inserting breakpoints.  Don't insert breakpoints in a vfork
	parent waiting for vfork done if we're not attached to the vfork
	child.
	(remove_breakpoints_pid): New.
	(reattach_breakpoints): Switch to a thread of PID.  Ignore
	breakpoints of other symbol spaces.
	(create_internal_breakpoint): Store the symbol space in the sal.
	(create_longjmp_master_breakpoint): Iterate over all symbol
	spaces.
	(update_breakpoints_after_exec): Ignore breakpoints for other
	symbol spaces.
	(remove_breakpoint): Rename to ...
	(remove_breakpoint_1): ... this.  Pass the breakpoints symbol
	space to solib_name_from_address.
	(remove_breakpoint): New.
	(mark_breakpoints_out): Ignore breakpoints from other symbol
	spaces.
	(breakpoint_init_inferior): Ditto.
	(breakpoint_here_p): Add an address space argument and adjust to
	use breakpoint_address_match.
	(moribund_breakpoint_here_p): Ditto.
	(regular_breakpoint_inserted_here_p): Ditto.
	(breakpoint_inserted_here_p): Ditto.
	(software_breakpoint_inserted_here_p): Ditto.
	(breakpoint_thread_match): Ditto.
	(bpstat_check_location): Ditto.
	(bpstat_stop_status): Ditto.
	(print_breakpoint_location): If there's a location to print,
	switch the current symbol space.
	(print_one_breakpoint_location): Add `allflag' argument.
	(print_one_breakpoint): Ditto.	Adjust.
	(do_captured_breakpoint_query): Adjust.
	(breakpoint_1): Adjust.
	(breakpoint_has_pc): Also match the symbol space.
	(describe_other_breakpoints): Add a symbol space argument and
	adjust.
	(set_default_breakpoint): Add a symbol space argument.	Set
	default_breakpoint_sspace.
	(breakpoint_address_match): New.
	(check_duplicates_for): Add an address space argument, and adjust.
	(set_raw_breakpoint): Record the symbol space in the location and
	in the breakpoint.
	(set_longjmp_breakpoint): Skip longjmp master breakpoints from
	other symbol spaces.
	(remove_thread_event_breakpoints, remove_solib_event_breakpoints)
	(disable_breakpoints_in_shlibs): Skip breakpoints from other
	symbol spaces.
	(disable_breakpoints_in_unloaded_shlib): Match symbol spaces.
	(create_catchpoint): Set the symbol space in the sal.
	(disable_breakpoints_before_startup): Skip breakpoints from other
	symbol spaces.	Set executing_startup in the current symbol space.
	(enable_breakpoints_after_startup): Clear executing_startup in the
	current symbol space.  Skip breakpoints from other symbol spaces.
	(clone_momentary_breakpoint): Also copy the symbol space.
	(add_location_to_breakpoint): Set the location's symbol space.
	(bp_loc_is_permanent): Switch thread and symbol space.
	(create_breakpoint): Adjust.
	(expand_line_sal_maybe): Expand comment to mention symbol spaces.
	Switch thread and symbol space when reading memory.
	(parse_breakpoint_sals): Set the symbol space in the sal.
	(break_command_really): Ditto.
	(skip_prologue_sal): Switch and space.
	(resolve_sal_pc): Ditto.
	(watch_command_1): Record the symbol space in the sal.
	(create_ada_exception_breakpoint): Adjust.
	(clear_command): Adjust.  Match symbol spaces.
	(update_global_location_list): Use breakpoint_address_match.
	(breakpoint_re_set_one): Switch thread and space.
	(breakpoint_re_set): Save symbol space.
	(breakpoint_re_set_thread): Also reset the symbol space.
	(deprecated_insert_raw_breakpoint): Add an address space argument.
	Adjust.
	(insert_single_step_breakpoint): Ditto.
	(single_step_breakpoint_inserted_here_p): Ditto.
	(clear_syscall_counts): New.
	(_initialize_breakpoint): Install it as inferior_exit observer.

	* exec.h: Include "progspace.h".
	(exec_bfd, exec_bfd_mtime): New defines.
	(exec_close): Declare.
	* exec.c: Include "gdbthread.h" and "progspace.h".
	(exec_bfd, exec_bfd_mtime, current_target_sections_1): Delete.
	(using_exec_ops): New.
	(exec_close_1): Rename to exec_close, and make public.
	(exec_close): Rename to exec_close_1, and adjust all callers.  Add
	description.  Remove target sections and close executables from
	all program spaces.
	(exec_file_attach): Add comment.
	(add_target_sections): Check on `using_exec_ops' to check if the
	target should be pushed.
	(remove_target_sections): Only unpush the target if there are no
	more target sections in any symbol space.
	* gdbcore.h: Include "exec.h".
	(exec_bfd, exec_bfd_mtime): Remove declarations.

	* frame.h (get_frame_program_space, get_frame_address_space)
	(frame_unwind_program_space): Declare.
	* frame.c (struct frame_info) <pspace, aspace>: New fields.
	(create_sentinel_frame): Add program space argument.  Set the
	pspace and aspace fields of the frame object.
	(get_current_frame, create_new_frame): Adjust.
	(get_frame_program_space): New.
	(frame_unwind_program_space): New.
	(get_frame_address_space): New.
	* stack.c (print_frame_info): Adjust.
	(print_frame): Use the frame's program space.

	* gdbthread.h (any_live_thread_of_process): Declare.
	* thread.c (any_live_thread_of_process): New.
	(switch_to_thread): Switch the program space as well.
	(restore_selected_frame): Don't warn if trying to restore frame
	level 0.

	* inferior.h: Include "progspace.h".
	(detach_fork): Declare.
	(struct inferior) <removable, aspace, pspace>
	<vfork_parent, vfork_child, pending_detach>
	<waiting_for_vfork_done>: New fields.
	<terminal_info>: Remove field.
	<data, num_data>: New fields.
	(register_inferior_data, register_inferior_data_with_cleanup)
	(clear_inferior_data, set_inferior_data, inferior_data): Declare.
	(exit_inferior, exit_inferior_silent, exit_inferior_num_silent)
	(inferior_appeared): Declare.
	(find_inferior_pid): Typo.
	(find_inferior_id, find_inferior_for_program_space): Declare.
	(set_current_inferior, save_current_inferior, prune_inferiors)
	(number_of_inferiors): Declare.
	(inferior_list): Declare.
	* inferior.c: Include "gdbcore.h" and "symfile.h".
	(inferior_list): Make public.
	(delete_inferior_1): Always delete thread silently.
	(find_inferior_id): Make public.
	(current_inferior_): New.
	(current_inferior): Use it.
	(set_current_inferior): New.
	(restore_inferior): New.
	(save_current_inferior): New.
	(free_inferior): Free the per-inferior data.
	(add_inferior_silent): Allocate per-inferior data.
	Call inferior_appeared.
	(delete_threads_of_inferior): New.
	(delete_inferior_1): Adjust interface to take an inferior pointer.
	(delete_inferior): Adjust.
	(delete_inferior_silent): Adjust.
	(exit_inferior_1): New.
	(exit_inferior): New.
	(exit_inferior_silent): New.
	(exit_inferior_num_silent): New.
	(detach_inferior): Adjust.
	(inferior_appeared): New.
	(discard_all_inferiors): Adjust.
	(find_inferior_id): Make public.  Assert pid is not zero.
	(find_inferior_for_program_space): New.
	(have_inferiors): Check if we have any inferior with pid not zero.
	(have_live_inferiors): Go over all pushed targets looking for
	process_stratum.
	(prune_inferiors): New.
	(number_of_inferiors): New.
	(print_inferior): Add executable column.  Print vfork parent/child
	relationships.
	(inferior_command): Adjust to cope with not running inferiors.
	(remove_inferior_command): New.
	(add_inferior_command): New.
	(clone_inferior_command): New.
	(struct inferior_data): New.
	(struct inferior_data_registration): New.
	(struct inferior_data_registry): New.
	(inferior_data_registry): New.
	(register_inferior_data_with_cleanup): New.
	(register_inferior_data): New.
	(inferior_alloc_data): New.
	(inferior_free_data): New.
	(clear_inferior_data): New.
	(set_inferior_data): New.
	(inferior_data): New.
	(initialize_inferiors): New.
	(_initialize_inferiors): Register "add-inferior",
	"remove-inferior" and "clone-inferior" commands.

	* objfiles.h: Include "progspace.h".
	(struct objfile) <pspace>: New field.
	(symfile_objfile, object_files): Don't declare.
	(ALL_PSPACE_OBJFILES): New.
	(ALL_PSPACE_OBJFILES_SAFE): New.
	(ALL_OBJFILES, ALL_OBJFILES_SAFE): Adjust.
	(ALL_PSPACE_SYMTABS): New.
	(ALL_PRIMARY_SYMTABS): Adjust.
	(ALL_PSPACE_PRIMARY_SYMTABS): New.
	(ALL_PSYMTABS): Adjust.
	(ALL_PSPACE_PSYMTABS): New.
	* objfiles.c (object_files, symfile_objfile): Delete.
	(struct objfile_sspace_info): New.
	(objfiles_pspace_data): New.
	(objfiles_pspace_data_cleanup): New.
	(get_objfile_pspace_data): New.
	(objfiles_changed_p): Delete.
	(allocate_objfile): Set the objfile's program space.  Adjust to
	reference objfiles_changed_p in pspace data.
	(free_objfile): Adjust to reference objfiles_changed_p in pspace
	data.
	(objfile_relocate): Ditto.
	(update_section_map): Add pspace argument.  Adjust to iterate over
	objfiles in the passed in pspace.
	(find_pc_section): Delete sections and num_sections statics.
	Adjust to refer to program space's objfiles_changed_p.	Adjust to
	refer to sections and num_sections store in the objfile's pspace
	data.
	(objfiles_changed): Adjust to reference objfiles_changed_p in
	pspace data.
	(_initialize_objfiles): New.
	* linespec.c (decode_all_digits, decode_dollar): Set the sal's
	program space.
	* source.c (current_source_pspace): New.
	(get_current_source_symtab_and_line): Set the sal's program space.
	(set_current_source_symtab_and_line): Set current_source_pspace.
	(select_source_symtab): Ditto.	Use ALL_OBJFILES.
	(forget_cached_source_info): Iterate over all program spaces.
	* symfile.c (clear_symtab_users): Adjust.
	* symmisc.c (print_symbol_bcache_statistics): Iterate over all
	program spaces.
	(print_objfile_statistics): Ditto.
	(maintenance_print_msymbols): Ditto.
	(maintenance_print_objfiles): Ditto.
	(maintenance_info_symtabs): Ditto.
	(maintenance_info_psymtabs): Ditto.
	* symtab.h (SYMTAB_PSPACE): New.
	(struct symtab_and_line) <pspace>: New field.
	* symtab.c (init_sal): Clear the sal's program space.
	(find_pc_sect_symtab): Set the sal's program space.  Switch thread
	and space.
	(append_expanded_sal): Add program space argument.  Iterate over
	all program spaces.
	(expand_line_sal): Iterate over all program spaces.  Switch
	program space.

	* target.h (enum target_waitkind) <TARGET_WAITKIND_VFORK_DONE>: New.
	(struct target_ops) <to_thread_address_space>: New field.
	(target_thread_address_space): Define.
	* target.c (target_detach): Only remove breakpoints from the
	inferior we're detaching.
	(target_thread_address_space): New.

	* defs.h (initialize_progspace): Declare.
	* top.c (gdb_init): Call it.

	* solist.h (struct so_list) <sspace>: New field.
	* solib.h (struct program_space): Forward declare.
	(solib_name_from_address): Adjust prototype.
	* solib.c (so_list_head): Replace with a macro referencing the
	program space.
	(update_solib_list): Set the so's program space.
	(solib_name_from_address): Add a program space argument and adjust.

	* solib-svr4.c (struct svr4_info) <pid>: Delete field.
	<interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low>
	<interp_plt_sect_high>: New fields.
	(svr4_info_p, svr4_info): Delete.
	(solib_svr4_sspace_data): New.
	(get_svr4_info): Rewrite.
	(svr4_sspace_data_cleanup): New.
	(open_symbol_file_object): Adjust.
	(svr4_default_sos): Adjust.
	(svr4_fetch_objfile_link_map): Adjust.
	(interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low)
	(interp_plt_sect_high): Delete.
	(svr4_in_dynsym_resolve_code): Adjust.
	(enable_break): Adjust.
	(svr4_clear_solib): Revert bit that removed the svr4_info here,
	and reinstate clearing debug_base, debug_loader_offset_p,
	debug_loader_offset and debug_loader_name.
	(_initialize_svr4_solib): Register solib_svr4_pspace_data.  Don't
	install an inferior_exit observer anymore.

	* printcmd.c (struct display) <pspace>: New field.
	(display_command): Set the display's sspace.
	(do_one_display): Match the display's sspace.
	(display_uses_solib_p): Ditto.

	* linux-fork.c (detach_fork): Moved to infrun.c.
	(_initialize_linux_fork): Moved "detach-on-fork" command to
	infrun.c.
	* infrun.c (detach_fork): Moved from linux-fork.c.
	(proceed_after_vfork_done): New.
	(handle_vfork_child_exec_or_exit): New.
	(follow_exec_mode_replace, follow_exec_mode_keep)
	(follow_exec_mode_names, follow_exec_mode_string)
	(show_follow_exec_mode_string): New.
	(follow_exec): New.  Reinstate the mark_breakpoints_out call.
	Remove shared libraries before attaching new executable.  If user
	wants to keep the inferior, keep it.
	(displaced_step_fixup): Adjust to pass an address space to the
	breakpoints module.
	(resume): Ditto.
	(clear_proceed_status): In all-stop mode, always clear the proceed
	status of all threads.
	(prepare_to_proceed): Adjust to pass an address space to the
	breakpoints module.
	(proceed): Ditto.
	(adjust_pc_after_break): Ditto.
	(handle_inferior_event): When handling a process exit, switch the
	program space to the inferior's that had exited.  Call
	handle_vfork_child_exec_or_exit.  Adjust to pass an address space
	to the breakpoints module.  In non-stop mode, when following a
	fork and detach-fork is off, also resume the other branch.  Handle
	TARGET_WAITKIND_VFORK_DONE.  Set the program space in sals.
	(normal_stop): Prune inferiors.
	(_initialize_infrun): Install the new "follow-exec-mode" command.
	"detach-on-fork" moved here.

	* regcache.h (get_regcache_aspace): Declare.
	* regcache.c (struct regcache) <aspace>: New field.
	(regcache_xmalloc): Clear the aspace.
	(get_regcache_aspace): New.
	(regcache_cpy): Copy the aspace field.
	(regcache_cpy_no_passthrough): Ditto.
	(get_thread_regcache): Fetch the thread's address space from the
	target, and store it in the regcache.

	* infcall.c (call_function_by_hand): Set the sal's pspace.

	* arch-utils.c (default_has_shared_address_space): New.
	* arch-utils.h (default_has_shared_address_space): Declare.

	* gdbarch.sh (has_shared_address_space): New.
	* gdbarch.h, gdbarch.c: Regenerate.

	* linux-tdep.c: Include auxv.h, target.h, elf/common.h.
	(linux_has_shared_address_space): New.
	(_initialize_linux_tdep): Declare.

	* arm-tdep.c (arm_software_single_step): Pass the frame's address
	space to insert_single_step_breakpoint.
	* arm-linux-tdep.c (arm_linux_software_single_step): Pass the
	frame's pspace to breakpoint functions.
	* cris-tdep.c (crisv32_single_step_through_delay): Ditto.
	(cris_software_single_step): Ditto.
	* mips-tdep.c (deal_with_atomic_sequence): Add frame argument.
	Pass the frame's pspace to breakpoint functions.
	(mips_software_single_step): Adjust.
	(mips_single_step_through_delay): Adjust.
	* rs6000-aix-tdep.c (rs6000_software_single_step): Adjust.
	* rs6000-tdep.c (ppc_deal_with_atomic_sequence): Adjust.
	* solib-irix.c (enable_break): Adjust to pass the current frame's
	address space to breakpoint functions.
	* sparc-tdep.c (sparc_software_single_step): Ditto.
	* spu-tdep.c (spu_software_single_step): Ditto.
	* alpha-tdep.c (alpha_software_single_step): Ditto.
	* record.c (record_wait): Adjust to pass an address space to the
	breakpoints module.

	* fork-child.c (fork_inferior): Set the new inferior's program and
	address spaces.
	* inf-ptrace.c (inf_ptrace_follow_fork): Copy the parent's program
	and address spaces.
	(inf_ptrace_attach): Set the inferior's program and address spaces.
	* linux-nat.c: Include "solib.h".
	(linux_child_follow_fork): Manage parent and child's program and
	address spaces.	 Clone the parent's program space if necessary.
	Don't wait for the vfork to be done here.  Refuse to resume if
	following the vfork parent while leaving the child stopped.
	(resume_callback): Don't resume a vfork parent.
	(linux_nat_resume): Also check for pending events in the
	lp->waitstatus field.
	(linux_handle_extended_wait): Report TARGET_WAITKIND_VFORK_DONE
	events to the core.
	(stop_wait_callback): Don't wait for SIGSTOP on vfork parents.
	(cancel_breakpoint): Adjust.
	* linux-thread-db.c (thread_db_wait): Don't remove thread event
	breakpoints here.
	(thread_db_mourn_inferior): Don't mark breakpoints out here.
	Remove thread event breakpoints after mourning.
	* corelow.c: Include progspace.h.
	(core_open): Set the inferior's program and address spaces.
	* remote.c (remote_add_inferior): Set the new inferior's program
	and address spaces.
	(remote_start_remote): Update address spaces.
	(extended_remote_create_inferior_1): Don't init the thread list if
	we already debugging other inferiors.
	* darwin-nat.c (darwin_attach): Set the new inferior's program and
	address spaces.
	* gnu-nat.c (gnu_attach): Ditto.
	* go32-nat.c (go32_create_inferior): Ditto.
	* inf-ttrace.c (inf_ttrace_follow_fork, inf_ttrace_attach): Ditto.
	* monitor.c (monitor_open): Ditto.
	* nto-procfs.c (procfs_attach, procfs_create_inferior): Ditto.
	* procfs.c (do_attach): Ditto.
	* windows-nat.c (do_initial_windows_stuff): Ditto.

	* inflow.c (inferior_process_group)
	(terminal_init_inferior_with_pgrp, terminal_inferior,
	(terminal_ours_1, inflow_inferior_exit, copy_terminal_info)
	(child_terminal_info, new_tty_postfork, set_sigint_trap): Adjust
	to use per-inferior data instead of inferior->terminal_info.
	(inflow_inferior_data): New.
	(inflow_new_inferior): Delete.
	(inflow_inferior_data_cleanup): New.
	(get_inflow_inferior_data): New.

	* mi/mi-interp.c (mi_new_inferior): Rename to...
	(mi_inferior_appeared): ... this.
	(mi_interpreter_init): Adjust.

	* tui/tui-disasm.c: Include "progspace.h".
	(tui_set_disassem_content): Pass an address space to
	breakpoint_here_p.

	* NEWS: Mention multi-program debugging support.  Mention new
	commands "add-inferior", "clone-inferior", "remove-inferior",
	"maint info program-spaces", and new option "set
	follow-exec-mode".

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* observer.texi (new_inferior): Rename to...
	(inferior_appeared): ... this.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/testsuite/
	* gdb.base/foll-vfork.exp: Adjust to spell out "follow-fork".
	* gdb.base/foll-exec.exp: Adjust to expect a process id before
	"Executing new program".
	* gdb.base/foll-fork.exp: Adjust to spell out "follow-fork".
	* gdb.base/multi-forks.exp: Ditto.  Adjust to the inferior being
	left listed after having been killed.
	* gdb.base/attach.exp: Adjust to spell out "symbol-file".
	* gdb.base/maint.exp: Adjust test.

	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* gdb.multi/Makefile.in: New.
	* gdb.multi/base.exp: New.
	* gdb.multi/goodbye.c: New.
	* gdb.multi/hangout.c: New.
	* gdb.multi/hello.c: New.
	* gdb.multi/bkpt-multi-exec.c: New.
	* gdb.multi/bkpt-multi-exec.exp: New.
	* gdb.multi/crashme.c: New.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Inferiors): Rename node to ...
	(Inferiors and Programs): ... this.  Mention running multiple
	programs in the same debug session.
	<info inferiors>: Mention the new 'Executable' column if "info
	inferiors".  Update examples.  Document the "add-inferior",
	"clone-inferior", "remove-inferior" and "maint info
	program-spaces" commands.
	(Process): Rename node to...
	(Forks): ... this.  Document "set|show follow-exec-mode".
@
text
@d5 2
a6 2
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
   Free Software Foundation, Inc.
@


1.455
log
@	* gdbarch.sh (displaced_step_hw_singlestep): New callback.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c (default_displaced_step_hw_singlestep): New function.
	* arch-utils.h (default_displaced_step_hw_singlestep): Add prototype.

	* ppc-linux-tdep.c (ppc_displaced_step_hw_singlestep): New function.
	(rs6000_gdbarch_init): Install it.

	* infrun.c (displaced_step_fixup): Use new callback to determine
	whether to "step" or "continue" displaced copy.
	(resume): Likewise.  Do not call maybe_software_singlestep
	for displaced stepping.
	(maybe_software_singlestep): Do not handle displaced stepping.
@
text
@d252 1
d393 1
d477 1
d655 1
d898 3
d3514 17
@


1.454
log
@2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* gdbarch.sh (process_record_signal): New interface.
@
text
@d235 1
d375 1
d469 1
d633 1
d798 3
d3155 17
@


1.453
log
@Implementing catch syscall.

* amd64-linux-tdep.c: Include xml-syscall.h header, define the XML
syscall name for the architecture.
(amd64_linux_get_syscall_number): New function.
(amd64_linux_init_abi): Register the correct functions for syscall
catchpoint; set the correct syscall file name.
* breakpoint.c: New include: xml-syscall.h.
(set_raw_breakpoint_without_location): Setting the parameters
for the catch syscall feature.
(insert_catch_syscall): New.
(remove_catch_syscall): New.
(breakpoint_hit_catch_syscall): New.
(print_it_catch_syscall): New.
(print_one_catch_syscall): New.
(print_mention_catch_syscall): New.
(catch_syscall_breakpoint_ops): New.
(syscall_catchpoint_p): New.
(create_catchpoint_without_mention): New.
(create_catchpoint): Modified in order to use
create_catchpoint_without_mention.
(create_syscall_event_catchpoint): New.
(clean_up_filters): New.
(catch_syscall_split_args): New.
(catch_syscall_command_1): New.
(delete_breakpoint): Add cleanup for catch syscall.
(is_syscall_catchpoint_enabled): New.
(catch_syscall_enabled): New.
(catching_syscall_number): New.
(catch_syscall_completer): New completer function.
(add_catch_command): Add the completer function for catchpoints.
* breakpoint.h (syscalls_to_be_caught): New vector.
(catch_syscall_enabled): New.
(catching_syscall_number): New.
* gdbarch.c: Regenerated.
* gdbarch.h: Regenerated.
* gdbarch.sh: Add syscall catchpoint functions and structures.
(get_syscall_number): New.
(UNKNOWN_SYSCALL): New definition.
* i386-linux-nat.c (i386_linux_resume): Select the proper request
to be made for ptrace() considering if we are catching syscalls
or not.
* i386-linux-tdep.c: Include xml-syscall.h header, define the XML
syscall name for the architecture.
(i386_linux_get_syscall_number): New.
(i386_linux_init_abi): Register the correct functions for syscall
catchpoint; set the correct syscall file name.
* inf-child.c (inf_child_set_syscall_catchpoint): New.
(inf_child_target): Assign default values to target_ops.
* inf-ptrace.c (inf_ptrace_resume): Select the proper request
to be made for ptrace() considering if we are catching syscalls
or not.
* inferior.h (struct inferior): Included new variables
any_syscall_count, syscalls_counts and total_syscalls_count,
used to keep track of requested syscall catchpoints.
* infrun.c (resume): Add syscall catchpoint.
(deal_with_syscall_event): New.
(handle_inferior_event): Add syscall entry/return events.
(inferior_has_called_syscall): New.
* linux-nat.c: Define some helpful variables to track wether we have
support for the needed ptrace option.
(linux_test_for_tracesysgood): New.
(linux_supports_tracesysgood): New.
(linux_enable_tracesysgood): New.
(linux_enable_event_reporting): Save the current used ptrace
options.
(linux_child_post_attach): Calling linux_enable_tracesysgood.
(linux_child_post_startup_inferior): Likewise.
(linux_child_set_syscall_catchpoint): New function.
(linux_handle_extended_wait): Handle the case which the inferior stops
because it has called or returned from a syscall.
(linux_target_install_ops): Install the necessary functions to handle
syscall catchpoints.
* linux-nat.h (struct lwp_info): Include syscall_state into the
structure, which indicates if we are in a syscall entry or return.
* ppc-linux-tdep.c: Include xml-syscall.h header, define the XML
syscall filename for the arch.
(ppc_linux_get_syscall_number): New.
(ppc_linux_init_abi): Register the correct functions for syscall
catchpoint; setting the correct name for the XML syscall file.
* target.c (update_current_target): Update/copy functions related to
syscall catchpoint.
(target_waitstatus_to_string): Add syscall catchpoint entry/return
events.
* target.h (struct target_waitstatus): Add syscall number.
(struct syscall): New struct to hold information about syscalls
in the system.
(struct target_ops): Add ops for syscall catchpoint.
(inferior_has_called_syscall): New.
(target_set_syscall_catchpoint): New.
* xml-support.c (xml_fetch_content_from_file): New function,
transferred from xml-tdesc.c.
* xml-support.h (xml_fetch_content_from_file): New.
* xml-tdesc.c (fetch_xml_from_file): Function removed;
transferred to xml-support.c.
(file_read_description_xml): Updated to use the new
xml_fetch_content_from_file function.
* syscalls/gdb-syscalls.dtd: New definition file for syscall's XML
support.
* syscalls/amd64-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use amd64 architecture.
* syscalls/i386-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use i386 architecture.
* syscalls/ppc-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use PPC architecture.
* syscalls/ppc64-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use PPC64 architecture.
* xml-syscall.c: New file containing functions for manipulating
syscall's XML files.
* xml-syscall.h: New file, exporting the functions above mentioned.
* Makefile.in: Support for relocatable GDB datadir and XML
syscall.
* NEWS: Added information about the catch syscall feature.
* doc/gdb.texinfo (Set Catchpoints): Documentation about the new
feature.
* testsuite/Makefile.in: Inclusion of catch-syscall object.
* testsuite/gdb.base/catch-syscall.c: New file.
* testsuite/gdb.base/catch-syscall.exp: New file.
@
text
@d243 1
d382 1
d640 1
d977 6
d3319 24
@


1.453.2.1
log
@2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* amd64-linux-tdep.c (amd64_all_but_ip_registers_record): New
	function.
	(amd64_linux_syscall_record): Call
	amd64_all_but_ip_registers_record if syscall is
	sys_rt_sigreturn.
	(AMD64_LINUX_redzone, AMD64_LINUX_xstate,
	AMD64_LINUX_frame_size): New macros.
	(amd64_linux_record_signal): New function.
	(amd64_linux_init_abi): Call set_gdbarch_process_record_signal.

2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* i386-linux-tdep.c (i386_all_but_ip_registers_record): New
	function.
	(i386_linux_intx80_sysenter_record): Call
	i386_all_but_ip_registers_record if syscall is sys_sigreturn
	or sys_rt_sigreturn.
	(I386_LINUX_xstate, I386_LINUX_frame_size): New macros.
	(i386_linux_record_signal): New function.
	(i386_linux_init_abi): Call set_gdbarch_process_record_signal.

2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* record.c (record_end_entry): New struct.
	(record_type): Add end.
	(record_arch_list_add_end): Set rec->u.end.sigval to
	TARGET_SIGNAL_0.
	(record_message_args): New struct.
	(record_message): Call gdbarch_process_record_signal.
	(do_record_message): Add argument "signal".
	(record_resume): Ditto.
	(record_wait): Ditto.  Check record_list->u.end.sigval
	in replay mode.

2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* gdbarch.sh (process_record_signal): New interface.
@
text
@a242 1
  gdbarch_process_record_signal_ftype *process_record_signal;
a380 1
  0,  /* process_record_signal */
a637 1
  /* Skip verify of process_record_signal, has predicate */
a973 6
                      "gdbarch_dump: gdbarch_process_record_signal_p() = %d\n",
                      gdbarch_process_record_signal_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: process_record_signal = <%s>\n",
                      host_address_to_string (gdbarch->process_record_signal));
  fprintf_unfiltered (file,
a3309 24
int
gdbarch_process_record_signal_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->process_record_signal != NULL;
}

int
gdbarch_process_record_signal (struct gdbarch *gdbarch, struct regcache *regcache, enum target_signal signal)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->process_record_signal != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_process_record_signal called\n");
  return gdbarch->process_record_signal (gdbarch, regcache, signal);
}

void
set_gdbarch_process_record_signal (struct gdbarch *gdbarch,
                                   gdbarch_process_record_signal_ftype process_record_signal)
{
  gdbarch->process_record_signal = process_record_signal;
}

@


1.453.2.2
log
@	* gdbarch.sh (displaced_step_hw_singlestep): New callback.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c (default_displaced_step_hw_singlestep): New function.
	* arch-utils.h (default_displaced_step_hw_singlestep): Add prototype.

	* ppc-linux-tdep.c (ppc_displaced_step_hw_singlestep): New function.
	(rs6000_gdbarch_init): Install it.

	* infrun.c (displaced_step_fixup): Use new callback to determine
	whether to "step" or "continue" displaced copy.
	(resume): Likewise.  Do not call maybe_software_singlestep
	for displaced stepping.
	(maybe_software_singlestep): Do not handle displaced stepping.
@
text
@a234 1
  gdbarch_displaced_step_hw_singlestep_ftype *displaced_step_hw_singlestep;
a373 1
  default_displaced_step_hw_singlestep,  /* displaced_step_hw_singlestep */
a466 1
  gdbarch->displaced_step_hw_singlestep = default_displaced_step_hw_singlestep;
a629 1
  /* Skip verify of displaced_step_hw_singlestep, invalid_p == 0 */
a793 3
                      "gdbarch_dump: displaced_step_hw_singlestep = <%s>\n",
                      host_address_to_string (gdbarch->displaced_step_hw_singlestep));
  fprintf_unfiltered (file,
a3147 17
gdbarch_displaced_step_hw_singlestep (struct gdbarch *gdbarch, struct displaced_step_closure *closure)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->displaced_step_hw_singlestep != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_displaced_step_hw_singlestep called\n");
  return gdbarch->displaced_step_hw_singlestep (gdbarch, closure);
}

void
set_gdbarch_displaced_step_hw_singlestep (struct gdbarch *gdbarch,
                                          gdbarch_displaced_step_hw_singlestep_ftype displaced_step_hw_singlestep)
{
  gdbarch->displaced_step_hw_singlestep = displaced_step_hw_singlestep;
}

int
@


1.452
log
@	* ui-file.h (ui_file_xstrdup): Mention that the length argument
	may be NULL.
	* ui-file.c (ui_file_xstrdup): Don't dereference LENGTH if it is
	NULL.
	* aix-thread.c (aix_thread_extra_thread_info): Pass NULL as length
	parameter to ui_file_xstrdup.
	* arm-tdep.c (_initialize_arm_tdep): Ditto.
	* infrun.c (print_target_wait_results): Ditto.
	* language.c (add_language): Ditto.
	* linespec.c (cplusplus_error): Ditto.
	* remote.c (escape_buffer): Ditto.
	* typeprint.c (type_to_string): Ditto.
	* utils.c (error_stream): Ditto.
	* varobj.c (value_get_print_value): Ditto.
	* xtensa-tdep.c (xtensa_verify_config): Replace `dummy' local with
	`length' local.  Pass it to ui_file_xstrdup, and avoid an strlen
	call.
	* gdbarch.sh (verify_gdbarch): Ditto.
	* gdbarch.c: Regenerate.
	* cli/cli-setshow.c (do_setshow_command): Pass NULL as length
	parameter to ui_file_xstrdup.
	* python/python-frame.c (frapy_str): Ditto.
	* python/python-type.c (typy_str): Use the length local instead of
	calling strlen.
	* python/python-value.c (valpy_str): Pass NULL as length parameter
	to ui_file_xstrdup.
@
text
@d247 1
d385 1
d642 1
d872 6
d3393 24
@


1.451
log
@	* gdbarch.sh (current_gdbarch): Remove global variable.
	(find_arch_by_info): Remove, inline into ...
	(gdbarch_find_by_info): ... this.  Remove current_gdbarch swapping.
	(deprecated_current_gdbarch_select_hack): Rename to ...
	(deprecated_target_gdbarch_select_hack): ... this.  Do not set
	or access current_gdbarch.
	* gdbarch.c, gdbarch.h: Regenerate.

	* arch-utils.c (gdbarch_update_p): Update call.
	(set_gdbarch_from_file): Likewise.
@
text
@d510 1
a510 1
  long dummy;
d642 1
a642 1
  buf = ui_file_xstrdup (log, &dummy);
d644 1
a644 1
  if (strlen (buf) > 0)
@


1.450
log
@	* defs.h (extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer): Add BYTE_ORDER parameter.
	* findvar.c (extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer): Add BYTE_ORDER parameter.  Use it
	instead of current_gdbarch.

	* gdbcore.h (read_memory_integer, safe_read_memory_integer,
	read_memory_unsigned_integer, write_memory_signed_integer,
	write_memory_unsigned_integer): Add BYTE_ORDER parameter.
	* corefile.c (struct captured_read_memory_integer_arguments): Add
	BYTE_ORDER member.
	(safe_read_memory_integer): Add BYTE_ORDER parameter.  Store it into
	struct captured_read_memory_integer_arguments.
	(do_captured_read_memory_integer): Pass it to read_memory_integer.
	(read_memory_integer): Add BYTE_ORDER parameter.  Pass it to
	extract_signed_integer.
	(read_memory_unsigned_integer): Add BYTE_ORDER parameter.  Pass it to
	extract_unsigned_integer.
	(write_memory_signed_integer): Add BYTE_ORDER parameter.  Pass it
	to store_signed_integer.
	(write_memory_unsigned_integer): Add BYTE_ORDER parameter.  Pass it
	to store_unsigned_integer.

	* target.h (get_target_memory_unsigned): Add BYTE_ORDER parameter.
	* target.c (get_target_memory_unsigned): Add BYTE_ORDER parameter.
	Pass it to extract_unsigned_integer.


	Update calls to extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer, read_memory_integer,
	read_memory_unsigned_integer, safe_read_memory_integer,
	write_memory_signed_integer, write_memory_unsigned_integer, and
	get_target_memory_unsigned to pass byte order:
	* ada-lang.c (ada_value_binop): Update.
	* ada-valprint.c (char_at): Update.
	* alpha-osf1-tdep.c (alpha_osf1_sigcontext_addr): Update.
	* alpha-tdep.c (alpha_lds, alpha_sts, alpha_push_dummy_call,
	alpha_extract_return_value, alpha_read_insn,
	alpha_get_longjmp_target): Update.
	* amd64-linux-tdep.c (amd64_linux_sigcontext_addr): Update.
	* amd64obsd-tdep.c (amd64obsd_supply_uthread,
	amd64obsd_collect_uthread, amd64obsd_trapframe_cache): Update.
	* amd64-tdep.c (amd64_push_dummy_call, amd64_analyze_prologue,
	amd64_frame_cache, amd64_sigtramp_frame_cache, fixup_riprel,
	amd64_displaced_step_fixup): Update.
	* arm-linux-tdep.c (arm_linux_sigreturn_init,
	arm_linux_rt_sigreturn_init, arm_linux_supply_gregset): Update.
	* arm-tdep.c (thumb_analyze_prologue, arm_skip_prologue,
	arm_scan_prologue, arm_push_dummy_call, thumb_get_next_pc,
	arm_get_next_pc, arm_extract_return_value, arm_store_return_value,
	arm_return_value): Update.
	* arm-wince-tdep.c (arm_pe_skip_trampoline_code): Update.
	* auxv.c (default_auxv_parse): Update.
	* avr-tdep.c (avr_address_to_pointer, avr_pointer_to_address,
	avr_scan_prologue, avr_extract_return_value,
	avr_frame_prev_register, avr_push_dummy_call): Update.
	* bsd-uthread.c (bsd_uthread_check_magic, bsd_uthread_lookup_offset,
	bsd_uthread_wait, bsd_uthread_thread_alive,
	bsd_uthread_extra_thread_info): Update.
	* c-lang.c (c_printstr, print_wchar): Update.
	* cp-valprint.c (cp_print_class_member): Update.
	* cris-tdep.c (cris_sigcontext_addr, cris_sigtramp_frame_unwind_cache,
	cris_push_dummy_call, cris_scan_prologue, cris_store_return_value,
	cris_extract_return_value, find_step_target, dip_prefix,
	sixteen_bit_offset_branch_op, none_reg_mode_jump_op,
	move_mem_to_reg_movem_op, get_data_from_address): Update.
	* dwarf2expr.c (dwarf2_read_address, execute_stack_op): Update.
	* dwarf2-frame.c (execute_cfa_program): Update.
	* dwarf2loc.c (find_location_expression): Update.
	* dwarf2read.c (dwarf2_const_value): Update.
	* expprint.c (print_subexp_standard): Update.
	* findvar.c (unsigned_pointer_to_address, signed_pointer_to_address,
	unsigned_address_to_pointer, address_to_signed_pointer,
	read_var_value): Update.
	* frame.c (frame_unwind_register_signed,
	frame_unwind_register_unsigned, get_frame_memory_signed,
	get_frame_memory_unsigned): Update.
	* frame-unwind.c (frame_unwind_got_constant): Update.
	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp,
	frv_linux_sigcontext_reg_addr, frv_linux_sigtramp_frame_cache):
	Update.
	* frv-tdep.c (frv_analyze_prologue, frv_skip_main_prologue,
	frv_extract_return_value, find_func_descr,
	frv_convert_from_func_ptr_addr, frv_push_dummy_call): Update.
	* f-valprint.c (f_val_print): Update.
	* gnu-v3-abi.c (gnuv3_decode_method_ptr, gnuv3_make_method_ptr):
	Update.
	* h8300-tdep.c (h8300_is_argument_spill, h8300_analyze_prologue,
	h8300_push_dummy_call, h8300_extract_return_value,
	h8300h_extract_return_value, h8300_store_return_value,
	h8300h_store_return_value): Update.
	* hppabsd-tdep.c (hppabsd_find_global_pointer): Update.
	* hppa-hpux-nat.c (hppa_hpux_fetch_register, hppa_hpux_store_register):
	Update.
	* hppa-hpux-tdep.c (hppa32_hpux_in_solib_call_trampoline,
	hppa64_hpux_in_solib_call_trampoline,
	hppa_hpux_in_solib_return_trampoline, hppa_hpux_skip_trampoline_code,
	hppa_hpux_sigtramp_frame_unwind_cache,
	hppa_hpux_sigtramp_unwind_sniffer, hppa32_hpux_find_global_pointer,
	hppa64_hpux_find_global_pointer, hppa_hpux_search_pattern,
	hppa32_hpux_search_dummy_call_sequence,
	hppa64_hpux_search_dummy_call_sequence, hppa_hpux_supply_save_state,
	hppa_hpux_unwind_adjust_stub): Update.
	* hppa-linux-tdep.c (insns_match_pattern,
	hppa_linux_find_global_pointer): Update.
	* hppa-tdep.c (hppa_in_function_epilogue_p, hppa32_push_dummy_call,
	hppa64_convert_code_addr_to_fptr, hppa64_push_dummy_call,
	skip_prologue_hard_way, hppa_frame_cache, hppa_fallback_frame_cache,
	hppa_pseudo_register_read, hppa_frame_prev_register_helper,
	hppa_match_insns): Update.
	* hpux-thread.c (hpux_thread_fetch_registers): Update.
	* i386-tdep.c (i386bsd_sigcontext_addr): Update.
	* i386-cygwin-tdep.c (core_process_module_section): Update.
	* i386-darwin-nat.c (i386_darwin_sstep_at_sigreturn,
	amd64_darwin_sstep_at_sigreturn): Update.
	* i386-darwin-tdep.c (i386_darwin_sigcontext_addr,
	amd64_darwin_sigcontext_addr): Likewise.
	* i386-linux-nat.c (i386_linux_sigcontext_addr): Update.
	* i386nbsd-tdep.c (i386nbsd_sigtramp_cache_init): Update.
	* i386-nto-tdep.c (i386nto_sigcontext_addr): Update.
	* i386obsd-nat.c (i386obsd_supply_pcb): Update.
	* i386obsd-tdep.c (i386obsd_supply_uthread, i386obsd_collect_uthread,
	i386obsd_trapframe_cache): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_follow_jump,
	i386_analyze_frame_setup, i386_analyze_prologue,
	i386_skip_main_prologue, i386_frame_cache, i386_sigtramp_frame_cache,
	i386_get_longjmp_target, i386_push_dummy_call,
	i386_pe_skip_trampoline_code, i386_svr4_sigcontext_addr,
	i386_fetch_pointer_argument): Update.
	* i387-tdep.c (i387_supply_fsave): Update.
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address): Update.
	* ia64-tdep.c (ia64_pseudo_register_read, ia64_pseudo_register_write,
	examine_prologue, ia64_frame_cache, ia64_frame_prev_register,
	ia64_sigtramp_frame_cache, ia64_sigtramp_frame_prev_register,
	ia64_access_reg, ia64_access_rse_reg, ia64_libunwind_frame_this_id,
	ia64_libunwind_frame_prev_register,
	ia64_libunwind_sigtramp_frame_this_id,
	ia64_libunwind_sigtramp_frame_prev_register, ia64_find_global_pointer,
	find_extant_func_descr, find_func_descr,
	ia64_convert_from_func_ptr_addr, ia64_push_dummy_call, ia64_dummy_id,
	ia64_unwind_pc): Update.
	* iq2000-tdep.c (iq2000_pointer_to_address, iq2000_address_to_pointer,
	iq2000_scan_prologue, iq2000_extract_return_value,
	iq2000_push_dummy_call): Update.
	* irix5nat.c (fill_gregset): Update.
	* jv-lang.c (evaluate_subexp_java): Update.
	* jv-valprint.c (java_value_print): Update.
	* lm32-tdep.c (lm32_analyze_prologue, lm32_push_dummy_call,
	lm32_extract_return_value, lm32_store_return_value): Update.
	* m32c-tdep.c (m32c_push_dummy_call, m32c_return_value,
	m32c_skip_trampoline_code, m32c_m16c_address_to_pointer,
	m32c_m16c_pointer_to_address): Update.
	* m32r-tdep.c (m32r_store_return_value, decode_prologue,
	m32r_skip_prologue, m32r_push_dummy_call, m32r_extract_return_value):
	Update.
	* m68hc11-tdep.c (m68hc11_pseudo_register_read,
	m68hc11_pseudo_register_write, m68hc11_analyze_instruction,
	m68hc11_push_dummy_call): Update.
	* m68linux-tdep.c (m68k_linux_pc_in_sigtramp,
	m68k_linux_get_sigtramp_info, m68k_linux_sigtramp_frame_cache):
	Update.
	* m68k-tdep.c (m68k_push_dummy_call, m68k_analyze_frame_setup,
	m68k_analyze_register_saves, m68k_analyze_prologue, m68k_frame_cache,
	m68k_get_longjmp_target): Update.
	* m88k-tdep.c (m88k_fetch_instruction): Update.
	* mep-tdep.c (mep_pseudo_cr32_read, mep_pseudo_csr_write,
	mep_pseudo_cr32_write, mep_get_insn, mep_push_dummy_call): Update.
	* mi/mi-main.c (mi_cmd_data_write_memory): Update.
	* mips-linux-tdep.c (mips_linux_get_longjmp_target, supply_32bit_reg,
	mips64_linux_get_longjmp_target, mips64_fill_gregset,
	mips64_fill_fpregset, mips_linux_in_dynsym_stub): Update.
	* mipsnbdsd-tdep.c (mipsnbsd_get_longjmp_target): Update.
	* mips-tdep.c (mips_fetch_instruction, fetch_mips_16,
	mips_eabi_push_dummy_call, mips_n32n64_push_dummy_call,
	mips_o32_push_dummy_call, mips_o64_push_dummy_call,
	mips_single_step_through_delay, mips_skip_pic_trampoline_code,
	mips_integer_to_address): Update.
	* mn10300-tdep.c (mn10300_analyze_prologue, mn10300_push_dummy_call):
	Update.
	* monitor.c (monitor_supply_register, monitor_write_memory,
	monitor_read_memory_single): Update.
	* moxie-tdep.c (moxie_store_return_value, moxie_extract_return_value,
	moxie_analyze_prologue): Update.
	* mt-tdep.c (mt_return_value, mt_skip_prologue, mt_select_coprocessor,
	mt_pseudo_register_read, mt_pseudo_register_write, mt_registers_info,
	mt_push_dummy_call): Update.
	* objc-lang.c (read_objc_method, read_objc_methlist_nmethods,
	read_objc_methlist_method, read_objc_object, read_objc_super,
	read_objc_class, find_implementation_from_class): Update.
	* ppc64-linux-tdep.c (ppc64_desc_entry_point,
	ppc64_linux_convert_from_func_ptr_addr, ppc_linux_sigtramp_cache):
	Update.
	* ppcobsd-tdep.c (ppcobsd_sigtramp_frame_sniffer,
	ppcobsd_sigtramp_frame_cache): Update.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call,
	do_ppc_sysv_return_value, ppc64_sysv_abi_push_dummy_call,
	ppc64_sysv_abi_return_value): Update.
	* ppc-linux-nat.c (ppc_linux_auxv_parse): Update.
	* procfs.c (procfs_auxv_parse): Update.
	* p-valprint.c (pascal_val_print): Update.
	* regcache.c (regcache_raw_read_signed, regcache_raw_read_unsigned,
	regcache_raw_write_signed, regcache_raw_write_unsigned,
	regcache_cooked_read_signed, regcache_cooked_read_unsigned,
	regcache_cooked_write_signed, regcache_cooked_write_unsigned): Update.
	* remote-m32r-sdi.c (m32r_fetch_register): Update.
	* remote-mips.c (mips_wait, mips_fetch_registers, mips_xfer_memory):
	Update.
	* rs6000-aix-tdep.c (rs6000_push_dummy_call, rs6000_return_value,
	rs6000_convert_from_func_ptr_addr, branch_dest,
	rs6000_software_single_step): Update.
	* rs6000-tdep.c (rs6000_in_function_epilogue_p,
	ppc_displaced_step_fixup, ppc_deal_with_atomic_sequence,
	bl_to_blrl_insn_p, rs6000_fetch_instruction, skip_prologue,
	rs6000_skip_main_prologue, rs6000_skip_trampoline_code,
	rs6000_frame_cache): Update.
	* s390-tdep.c (s390_pseudo_register_read, s390_pseudo_register_write,
	s390x_pseudo_register_read, s390x_pseudo_register_write, s390_load,
	s390_backchain_frame_unwind_cache, s390_sigtramp_frame_unwind_cache,
	extend_simple_arg, s390_push_dummy_call, s390_return_value): Update.
	* scm-exp.c (scm_lreadr): Update.
	* scm-lang.c (scm_get_field, scm_unpack): Update.
	* scm-valprint.c (scm_val_print): Update.
	* score-tdep.c (score_breakpoint_from_pc, score_push_dummy_call,
	score_fetch_inst): Update.
	* sh64-tdep.c (look_for_args_moves, sh64_skip_prologue_hard_way,
	sh64_analyze_prologue, sh64_push_dummy_call, sh64_extract_return_value,
	sh64_pseudo_register_read, sh64_pseudo_register_write,
	sh64_frame_prev_register): Update:
	* sh-tdep.c (sh_analyze_prologue, sh_push_dummy_call_fpu,
	sh_push_dummy_call_nofpu, sh_extract_return_value_nofpu,
	sh_store_return_value_nofpu, sh_in_function_epilogue_p): Update.
	* solib-darwin.c (darwin_load_image_infos): Update.
	* solib-frv.c (fetch_loadmap, lm_base, frv_current_sos, enable_break2,
	find_canonical_descriptor_in_load_object): Update.
	* solib-irix.c (extract_mips_address, fetch_lm_info, irix_current_sos,
	irix_open_symbol_file_object): Update.
	* solib-som.c (som_solib_create_inferior_hook, link_map_start,
	som_current_sos, som_open_symbol_file_object): Update.
	* solib-sunos.c (SOLIB_EXTRACT_ADDRESS, LM_ADDR, LM_NEXT, LM_NAME):
	Update.
	* solib-svr4.c (read_program_header, scan_dyntag_auxv,
	solib_svr4_r_ldsomap): Update.
	* sparc64-linux-tdep.c (sparc64_linux_step_trap): Update.
	* sparc64obsd-tdep.c (sparc64obsd_supply_uthread,
	sparc64obsd_collect_uthread): Update.
	* sparc64-tdep.c (sparc64_pseudo_register_read,
	sparc64_pseudo_register_write, sparc64_supply_gregset,
	sparc64_collect_gregset): Update.
	* sparc-linux-tdep.c (sparc32_linux_step_trap): Update.
	* sparcobsd-tdep.c (sparc32obsd_supply_uthread,
	sparc32obsd_collect_uthread): Update.
	* sparc-tdep.c (sparc_fetch_wcookie, sparc32_push_dummy_code,
	sparc32_store_arguments, sparc32_return_value, sparc_supply_rwindow,
	sparc_collect_rwindow): Update.
	* spu-linux-nat.c (parse_spufs_run): Update.
	* spu-tdep.c (spu_pseudo_register_read_spu,
	spu_pseudo_register_write_spu, spu_pointer_to_address,
	spu_analyze_prologue, spu_in_function_epilogue_p,
	spu_frame_unwind_cache, spu_push_dummy_call, spu_software_single_step,
	spu_get_longjmp_target, spu_get_overlay_table, spu_overlay_update_osect,
	info_spu_signal_command, info_spu_mailbox_list, info_spu_dma_cmdlist,
	info_spu_dma_command, info_spu_proxydma_command): Update.
	* stack.c (print_frame_nameless_args, frame_info): Update.
	* symfile.c (read_target_long_array, simple_read_overlay_table,
	simple_read_overlay_region_table): Update.
	* target.c (debug_print_register): Update.
	* tramp-frame.c (tramp_frame_start): Update.
	* v850-tdep.c (v850_analyze_prologue, v850_push_dummy_call,
	v850_extract_return_value, v850_store_return_value,
	* valarith.c (value_binop, value_bit_index): Update.
	* valops.c (value_cast): Update.
	* valprint.c (val_print_type_code_int, val_print_string,
	read_string): Update.
	* value.c (unpack_long, unpack_double, unpack_field_as_long,
	modify_field, pack_long): Update.
	* vax-tdep.c (vax_store_arguments, vax_push_dummy_call,
	vax_skip_prologue): Update.
	* xstormy16-tdep.c (xstormy16_push_dummy_call,
	xstormy16_analyze_prologue, xstormy16_in_function_epilogue_p,
	xstormy16_resolve_jmp_table_entry, xstormy16_find_jmp_table_entry,
	xstormy16_pointer_to_address, xstormy16_address_to_pointer): Update.
	* xtensa-tdep.c (extract_call_winsize, xtensa_pseudo_register_read,
	xtensa_pseudo_register_write, xtensa_frame_cache,
	xtensa_push_dummy_call, call0_track_op, call0_frame_cache): Update.


	* dfp.h (decimal_to_string, decimal_from_string, decimal_from_integral,
	decimal_from_floating, decimal_to_doublest, decimal_is_zero): Add
	BYTE_ORDER parameter.
	(decimal_binop): Add BYTE_ORDER_X, BYTE_ORDER_Y, and BYTE_ORDER_RESULT
	parameters.
	(decimal_compare): Add BYTE_ORDER_X and BYTE_ORDER_Y parameters.
	(decimal_convert): Add BYTE_ORDER_FROM and BYTE_ORDER_TO parameters.
	* dfp.c (match_endianness): Add BYTE_ORDER parameter.  Use it
	instead of current_gdbarch.
	(decimal_to_string, decimal_from_integral, decimal_from_floating,
	decimal_to_doublest, decimal_is_zero): Add BYTE_ORDER parameter.
	Pass it to match_endianness.
	(decimal_binop): Add BYTE_ORDER_X, BYTE_ORDER_Y, and BYTE_ORDER_RESULT
	parameters.  Pass them to match_endianness.
	(decimal_compare): Add BYTE_ORDER_X and BYTE_ORDER_Y parameters.
	Pass them to match_endianness.
	(decimal_convert): Add BYTE_ORDER_FROM and BYTE_ORDER_TO parameters.
	Pass them to match_endianness.
	* valarith.c (value_args_as_decimal): Add BYTE_ORDER_X and
	BYTE_ORDER_Y output parameters.
	(value_binop): Update call to value_args_as_decimal.

	Update calls to decimal_to_string, decimal_from_string,
	decimal_from_integral, decimal_from_floating, decimal_to_doublest,
	decimal_is_zero, decimal_binop, decimal_compare and decimal_convert
	to pass/receive byte order:
	* c-exp.y (parse_number): Update.
	* printcmd.c (printf_command): Update.
	* valarith.c (value_args_as_decimal, value_binop, value_logical_not,
	value_equal, value_less): Update.
	* valops.c (value_cast, value_one): Update.
	* valprint.c (print_decimal_floating): Update.
	* value.c (unpack_long, unpack_double): Update.
	* python/python-value.c (valpy_nonzero): Update.


	* ada-valprint.c (char_at): Add BYTE_ORDER parameter.
	(printstr): Update calls to char_at.
	(ada_val_print_array): Likewise.
	* valprint.c (read_string): Add BYTE_ORDER parameter.
	(val_print_string): Update call to read_string.
	* c-lang.c (c_get_string): Likewise.
	* charset.h (target_wide_charset): Add BYTE_ORDER parameter.
	* charset.c (target_wide_charset): Add BYTE_ORDER parameter.
	Use it instead of current_gdbarch.
	* printcmd.c (printf_command): Update calls to target_wide_charset.
	* c-lang.c (charset_for_string_type): Add BYTE_ORDER parameter.
	Pass to target_wide_charset.  Use it instead of current_gdbarch.
	(classify_type): Add BYTE_ORDER parameter.  Pass to
	charset_for_string_type.  Allow NULL encoding pointer.
	(print_wchar): Add BYTE_ORDER parameter.
	(c_emit_char): Update calls to classify_type and print_wchar.
	(c_printchar, c_printstr): Likewise.


	* gdbarch.sh (in_solib_return_trampoline): Convert to type "m".
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.h (generic_in_solib_return_trampoline): Add GDBARCH
	parameter.
	* arch-utils.c (generic_in_solib_return_trampoline): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_in_solib_return_trampoline): Likewise.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Likewise.
	(rs6000_skip_trampoline_code): Update call.

	* alpha-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter to
	dynamic_sigtramp_offset and pc_in_sigtramp callbacks.
	(alpha_read_insn): Add GDBARCH parameter.
	* alpha-tdep.c (alpha_lds, alpha_sts): Add GDBARCH parameter.
	(alpha_register_to_value): Pass architecture to alpha_sts.
	(alpha_extract_return_value): Likewise.
	(alpha_value_to_register): Pass architecture to alpha_lds.
	(alpha_store_return_value): Likewise.
	(alpha_read_insn): Add GDBARCH parameter.
	(alpha_skip_prologue): Pass architecture to alpha_read_insn.
	(alpha_heuristic_proc_start): Likewise.
	(alpha_heuristic_frame_unwind_cache): Likewise.
	(alpha_next_pc): Likewise.
	(alpha_sigtramp_frame_this_id): Pass architecture to
	tdep->dynamic_sigtramp_offset callback.
	(alpha_sigtramp_frame_sniffer): Pass architecture to
	tdep->pc_in_sigtramp callback.
	* alphafbsd-tdep.c (alphafbsd_pc_in_sigtramp): Add GDBARCH parameter.
	(alphafbsd_sigtramp_offset): Likewise.
	* alpha-linux-tdep.c (alpha_linux_sigtramp_offset_1): Add GDBARCH
	parameter.  Pass to alpha_read_insn.
	(alpha_linux_sigtramp_offset): Add GDBARCH parameter.  Pass to
	alpha_linux_sigtramp_offset_1.
	(alpha_linux_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alpha_linux_sigtramp_offset.
	(alpha_linux_sigcontext_addr): Pass architecture to alpha_read_insn
	and alpha_linux_sigtramp_offset.
	* alphanbsd-tdep.c (alphanbsd_sigtramp_offset): Add GDBARCH parameter.
	(alphanbsd_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alphanbsd_sigtramp_offset.
	* alphaobsd-tdep.c (alphaobsd_sigtramp_offset): Add GDBARCH parameter.
	(alphaobsd_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alpha_read_insn.
	(alphaobsd_sigcontext_addr): Pass architecture to
	alphaobsd_sigtramp_offset.
	* alpha-osf1-tdep.c (alpha_osf1_pc_in_sigtramp): Add GDBARCH
	parameter.

	* amd64-tdep.c (amd64_analyze_prologue): Add GDBARCH parameter.
	(amd64_skip_prologue): Pass architecture to amd64_analyze_prologue.
	(amd64_frame_cache): Likewise.

	* arm-tdep.c (SWAP_SHORT, SWAP_INT): Remove.
	(thumb_analyze_prologue, arm_skip_prologue, arm_scan_prologue,
	thumb_get_next_pc, arm_get_next_pc): Do not use SWAP_ macros.
	* arm-wince-tdep.c: Include "frame.h".

	* avr-tdep.c (EXTRACT_INSN): Remove.
	(avr_scan_prologue): Add GDBARCH argument, inline EXTRACT_INSN.
	(avr_skip_prologue): Pass architecture to avr_scan_prologue.
	(avr_frame_unwind_cache): Likewise.

	* cris-tdep.c (struct instruction_environment): Add BYTE_ORDER member.
	(find_step_target): Initialize it.
	(get_data_from_address): Add BYTE_ORDER parameter.
	(bdap_prefix): Pass byte order to get_data_from_address.
	(handle_prefix_assign_mode_for_aritm_op): Likewise.
	(three_operand_add_sub_cmp_and_or_op): Likewise.
	(handle_inc_and_index_mode_for_aritm_op): Likewise.

	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp): Add GDBARCH parameter.
	(frv_linux_sigcontext_reg_addr): Pass architecture to
	frv_linux_pc_in_sigtramp.
	(frv_linux_sigtramp_frame_sniffer): Likewise.

	* h8300-tdep.c (h8300_is_argument_spill): Add GDBARCH parameter.
	(h8300_analyze_prologue): Add GDBARCH parameter.  Pass to
	h8300_is_argument_spill.
	(h8300_frame_cache, h8300_skip_prologue): Pass architecture
	to h8300_analyze_prologue.

	* hppa-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter to
	in_solib_call_trampoline callback.
	(hppa_in_solib_call_trampoline): Add GDBARCH parameter.
	* hppa-tdep.c (hppa64_convert_code_addr_to_fptr): Add GDBARCH
	parameter.
	(hppa64_push_dummy_call): Pass architecture to
	hppa64_convert_code_addr_to_fptr.
	(hppa_match_insns): Add GDBARCH parameter.
	(hppa_match_insns_relaxed): Add GDBARCH parameter.  Pass to
	hppa_match_insns.
	(hppa_skip_trampoline_code): Pass architecture to hppa_match_insns.
	(hppa_in_solib_call_trampoline): Add GDBARCH parameter.  Pass to
	hppa_match_insns_relaxed.
	(hppa_stub_unwind_sniffer): Pass architecture to
	tdep->in_solib_call_trampoline callback.
	* hppa-hpux-tdep.c (hppa_hpux_search_pattern): Add GDBARCH parameter.
	(hppa32_hpux_search_dummy_call_sequence): Pass architecture to
	hppa_hpux_search_pattern.
	* hppa-linux-tdep.c (insns_match_pattern): Add GDBARCH parameter.
	(hppa_linux_sigtramp_find_sigcontext): Add GDBARCH parameter.
	Pass to insns_match_pattern.
	(hppa_linux_sigtramp_frame_unwind_cache): Pass architecture to
	hppa_linux_sigtramp_find_sigcontext.
	(hppa_linux_sigtramp_frame_sniffer): Likewise.
	(hppa32_hpux_in_solib_call_trampoline): Add GDBARCH parameter.
	(hppa64_hpux_in_solib_call_trampoline): Likewise.

	* i386-tdep.c (i386_follow_jump): Add GDBARCH parameter.
	(i386_analyze_frame_setup): Add GDBARCH parameter.
	(i386_analyze_prologue): Add GDBARCH parameter.  Pass to
	i386_follow_jump and i386_analyze_frame_setup.
	(i386_skip_prologue): Pass architecture to i386_analyze_prologue
	and i386_follow_jump.
	(i386_frame_cache): Pass architecture to i386_analyze_prologue.
	(i386_pe_skip_trampoline_code): Add FRAME parameter.
	* i386-tdep.h (i386_pe_skip_trampoline_code): Add FRAME parameter.
	* i386-cygwin-tdep.c (i386_cygwin_skip_trampoline_code): Pass
	frame to i386_pe_skip_trampoline_code.

	* ia64-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter
	to sigcontext_register_address callback.
	* ia64-tdep.c (ia64_find_global_pointer): Add GDBARCH parameter.
	(ia64_find_unwind_table): Pass architecture to
	ia64_find_global_pointer.
	(find_extant_func_descr): Add GDBARCH parameter.
	(find_func_descr): Pass architecture to find_extant_func_descr
	and ia64_find_global_pointer.
	(ia64_sigtramp_frame_init_saved_regs): Pass architecture to
	tdep->sigcontext_register_address callback.
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address): Add
	GDBARCH parameter.

	* iq2000-tdep.c (iq2000_scan_prologue): Add GDBARCH parameter.
	(iq2000_frame_cache): Pass architecture to iq2000_scan_prologue.

	* lm32-tdep.c (lm32_analyze_prologue): Add GDBARCH parameter.
	(lm32_skip_prologue, lm32_frame_cache): Pass architecture to
	lm32_analyze_prologue.

	* m32r-tdep.c (decode_prologue): Add GDBARCH parameter.
	(m32r_skip_prologue): Pass architecture to decode_prologue.

	* m68hc11-tdep.c (m68hc11_analyze_instruction): Add GDBARCH parameter.
	(m68hc11_scan_prologue): Pass architecture to
	m68hc11_analyze_instruction.

	* m68k-tdep.c (m68k_analyze_frame_setup): Add GDBARCH parameter.
	(m68k_analyze_prologue): Pass architecture to
	m68k_analyze_frame_setup.

	* m88k-tdep.c (m88k_fetch_instruction): Add BYTE_ORDER parameter.
	(m88k_analyze_prologue): Add GDBARCH parameter.  Pass byte order
	to m88k_fetch_instruction.
	(m88k_skip_prologue): Pass architecture to m88k_analyze_prologue.
	(m88k_frame_cache): Likewise.

	* mep-tdep.c (mep_get_insn): Add GDBARCH parameter.
	(mep_analyze_prologue): Pass architecture to mep_get_insn.

	* mips-tdep.c (mips_fetch_instruction): Add GDBARCH parameter.
	(mips32_next_pc): Pass architecture to mips_fetch_instruction.
	(deal_with_atomic_sequence): Likewise.
	(unpack_mips16): Add GDBARCH parameter, pass to mips_fetch_instruction.
	(mips16_scan_prologue): Likewise.
	(mips32_scan_prologue): Likewise.
	(mips16_in_function_epilogue_p): Likewise.
	(mips32_in_function_epilogue_p): Likewise.
	(mips_about_to_return): Likewise.
	(mips_insn16_frame_cache): Pass architecture to mips16_scan_prologue.
	(mips_insn32_frame_cache): Pass architecture to mips32_scan_prologue.
	(mips_skip_prologue): Pass architecture to mips16_scan_prologue
	and mips32_scan_prologue.
	(mips_in_function_epilogue_p): Pass architecture to
	mips16_in_function_epilogue_p and
	mips32_in_function_epilogue_p.
	(heuristic_proc_start): Pass architecture to mips_fetch_instruction
	and mips_about_to_return.
	(mips_skip_mips16_trampoline_code): Pass architecture to
	mips_fetch_instruction.
	(fetch_mips_16): Add GDBARCH parameter.
	(mips16_next_pc): Pass architecture to fetch_mips_16.
	(extended_mips16_next_pc): Pass architecture to unpack_mips16 and
	fetch_mips_16.

	* objc-lang.c (read_objc_method, read_objc_methlist_nmethods,
	read_objc_methlist_method, read_objc_object, read_objc_super,
	read_objc_class): Add GDBARCH parameter.
	(find_implementation_from_class): Add GDBARCH parameter, pass
	to read_objc_class, read_objc_methlist_nmethods, and
	read_objc_methlist_method.
	(find_implementation): Add GDBARCH parameter, pass to
	read_objc_object and find_implementation_from_class.
	(resolve_msgsend, resolve_msgsend_stret): Pass architecture
	to find_implementation.
	(resolve_msgsend_super, resolve_msgsend_super_stret): Pass
	architecture to read_objc_super and find_implementation_from_class.

	* ppc64-linux-tdep.c (ppc64_desc_entry_point): Add GDBARCH parameter.
	(ppc64_standard_linkage1_target, ppc64_standard_linkage2_target,
	ppc64_standard_linkage3_target): Pass architecture to
	ppc64_desc_entry_point.
	* rs6000-tdep.c (bl_to_blrl_insn_p): Add BYTE_ORDER parameter.
	(skip_prologue): Pass byte order to bl_to_blrl_insn_p.
	(rs6000_fetch_instruction): Add GDBARCH parameter.
	(rs6000_skip_stack_check): Add GDBARCH parameter, pass to
	rs6000_fetch_instruction.
	(skip_prologue): Pass architecture to rs6000_fetch_instruction.

	* remote-mips.c (mips_store_word): Return old_contents as host
	integer value instead of target bytes.

	* s390-tdep.c (struct s390_prologue_data): Add BYTE_ORDER member.
	(s390_analyze_prologue): Initialize it.
	(extend_simple_arg): Add GDBARCH parameter.
	(s390_push_dummy_call): Pass architecture to extend_simple_arg.

	* scm-lang.c (scm_get_field): Add BYTE_ORDER parameter.
	* scm-lang.h (scm_get_field): Add BYTE_ORDER parameter.
	(SCM_CAR, SCM_CDR): Pass SCM_BYTE_ORDER to scm_get_field.
	* scm-valprint.c (scm_scmval_print): Likewise.
	(scm_scmlist_print, scm_ipruk, scm_scmval_print): Define
	SCM_BYTE_ORDER.

	* sh64-tdep.c (look_for_args_moves): Add GDBARCH parameter.
	(sh64_skip_prologue_hard_way): Add GDBARCH parameter, pass to
	look_for_args_moves.
	(sh64_skip_prologue): Pass architecture to
	sh64_skip_prologue_hard_way.
	* sh-tdep.c (sh_analyze_prologue): Add GDBARCH parameter.
	(sh_skip_prologue): Pass architecture to sh_analyze_prologue.
	(sh_frame_cache): Likewise.

	* solib-irix.c (extract_mips_address): Add GDBARCH parameter.
	(fetch_lm_info, irix_current_sos, irix_open_symbol_file_object):
	Pass architecture to extract_mips_address.

	* sparc-tdep.h (sparc_fetch_wcookie): Add GDBARCH parameter.
	* sparc-tdep.c (sparc_fetch_wcookie): Add GDBARCH parameter.
	(sparc_supply_rwindow, sparc_collect_rwindow): Pass architecture
	to sparc_fetch_wcookie.
	(sparc32_frame_prev_register): Likewise.
	* sparc64-tdep.c (sparc64_frame_prev_register): Likewise.
	* sparc32nbsd-tdep.c (sparc32nbsd_sigcontext_saved_regs): Likewise.
	* sparc64nbsd-tdep.c (sparc64nbsd_sigcontext_saved_regs): Likewise.

	* spu-tdep.c (spu_analyze_prologue): Add GDBARCH parameter.
	(spu_skip_prologue): Pass architecture to spu_analyze_prologue.
	(spu_virtual_frame_pointer): Likewise.
	(spu_frame_unwind_cache): Likewise.
	(info_spu_mailbox_list): Add BYTE_ORER parameter.
	(info_spu_mailbox_command): Pass byte order to info_spu_mailbox_list.
	(info_spu_dma_cmdlist): Add BYTE_ORER parameter.
	(info_spu_dma_command, info_spu_proxydma_command): Pass byte order
	to info_spu_dma_cmdlist.

	* symfile.c (read_target_long_array): Add GDBARCH parameter.
	(simple_read_overlay_table, simple_read_overlay_region_table,
	simple_overlay_update_1): Pass architecture to read_target_long_array.

	* v850-tdep.c (v850_analyze_prologue): Add GDBARCH parameter.
	(v850_frame_cache): Pass architecture to v850_analyze_prologue.

	* xstormy16-tdep.c (xstormy16_analyze_prologue): Add GDBARCH
	parameter.
	(xstormy16_skip_prologue, xstormy16_frame_cache): Pass architecture
	to xstormy16_analyze_prologue.
	(xstormy16_resolve_jmp_table_entry): Add GDBARCH parameter.
	(xstormy16_find_jmp_table_entry): Likewise.
	(xstormy16_skip_trampoline_code): Pass architecture to
	xstormy16_resolve_jmp_table_entry.
	(xstormy16_pointer_to_address): Likewise.
	(xstormy16_address_to_pointer): Pass architecture to
	xstormy16_find_jmp_table_entry.

	* xtensa-tdep.c (call0_track_op): Add GDBARCH parameter.
	(call0_analyze_prologue): Add GDBARCH parameter, pass to
	call0_track_op.
	(call0_frame_cache): Pass architecture to call0_analyze_prologue.
	(xtensa_skip_prologue): Likewise.
@
text
@a388 1
struct gdbarch *current_gdbarch = &startup_gdbarch;
d3662 1
a3662 2
   architecture if needed.  Return that new architecture.  Assumes
   that there is no current architecture.  */
d3664 2
a3665 2
static struct gdbarch *
find_arch_by_info (struct gdbarch_info info)
a3669 4
  /* The existing architecture has been swapped out - all this code
     works from a clean slate.  */
  gdb_assert (current_gdbarch == NULL);

d3681 1
a3681 1
			  "find_arch_by_info: info.bfd_arch_info %s\n",
d3686 1
a3686 1
			  "find_arch_by_info: info.byte_order %d (%s)\n",
d3692 1
a3692 1
			  "find_arch_by_info: info.osabi %d (%s)\n",
d3695 1
a3695 1
			  "find_arch_by_info: info.abfd %s\n",
d3698 1
a3698 1
			  "find_arch_by_info: info.tdep_info %s\n",
d3711 1
a3711 1
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
d3724 1
a3724 1
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
d3737 1
a3737 1
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
d3759 1
a3759 1
    fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
a3784 24
struct gdbarch *
gdbarch_find_by_info (struct gdbarch_info info)
{
  struct gdbarch *new_gdbarch;

  /* Save the previously selected architecture, setting the global to
     NULL.  This stops things like gdbarch->init() trying to use the
     previous architecture's configuration.  The previous architecture
     may not even be of the same architecture family.  The most recent
     architecture of the same family is found at the head of the
     rego->arches list.  */
  struct gdbarch *old_gdbarch = current_gdbarch;
  current_gdbarch = NULL;

  /* Find the specified architecture.  */
  new_gdbarch = find_arch_by_info (info);

  /* Restore the existing architecture.  */
  gdb_assert (current_gdbarch == NULL);
  current_gdbarch = old_gdbarch;

  return new_gdbarch;
}

d3788 1
a3788 1
deprecated_current_gdbarch_select_hack (struct gdbarch *new_gdbarch)
a3790 1
  gdb_assert (current_gdbarch != NULL);
a3791 1
  current_gdbarch = new_gdbarch;
@


1.449
log
@	* gdbarch.sh (pointer_to_address): Change to type 'm'.
	(address_to_pointer): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.

	* inferior.h (unsigned_pointer_to_address): Add GDBARCH argument.
	(signed_pointer_to_address): Likewise.
	(unsigned_address_to_pointer, address_to_signed_pointer): Likewise.
	* findvar.c (unsigned_pointer_to_address): Likewise.
	(signed_pointer_to_address): Likewise.
	(unsigned_address_to_pointer, address_to_signed_pointer): Likewise.

	* avr-tdep.c (avr_address_to_pointer): Likewise.
	(avr_pointer_to_address): Likewise.
	* iq2000-tdep.c (iq2000_pointer_to_address): Likewise.
	(iq2000_address_to_pointer): Likewise.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Likewise.
	(m32c_m16c_pointer_to_address): Likewise.
	* spu-tdep.c (spu_pointer_to_address): Likewise.
	* xstormy16-tdep.c (xstormy16_pointer_to_address): Likewise.
	(xstormy16_address_to_pointer): Likewise.
@
text
@d350 1
a350 1
  0,  /* in_solib_return_trampoline */
d2685 1
a2685 1
  return gdbarch->in_solib_return_trampoline (pc, name);
@


1.448
log
@	* gdbarch.sh (gcore_bfd_target): New gdbarch callback.
	* gdbarch.h, gdbarch.c: Regenerate.

	* gcore.c (default_gcore_target): Make return value const.
	Call gdbarch_gcore_bfd_target if present.
	(default_gcore_arch, default_gcore_mach): Use target_gdbarch.

	* corelow.c (core_read_description): Call gdbarch_core_read_description
	on core_gdbarch instead of current_gdbarch.

	* ppc-linux-tdep.c (ppc_linux_init_abi): Install gcore_bfd_target.
@
text
@d320 2
a321 2
  0,  /* pointer_to_address */
  0,  /* address_to_pointer */
d2099 1
a2099 1
  return gdbarch->pointer_to_address (type, buf);
d2116 1
a2116 1
  gdbarch->address_to_pointer (type, buf, addr);
@


1.447
log
@	* gdbarch.sh (construct_inferior_arguments): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* infcmd.c (get_inferior_args): Call construct_inferior_arguments
	directly instead of gdbarch_construct_inferior_arguments.
	(construct_inferior_arguments): Remove GDBARCH argument.
	* inferior.h (construct_inferior_arguments): Likewise.
@
text
@d229 1
d366 1
d621 1
d852 6
d2999 25
@


1.446
log
@	* breakpoint.c (insert_breakpoints, breakpoint_init_inferior)
	(update_global_location_list): Use gdbarch_has_global_breakpoints
	instead of gdbarch_has_global_solist and
	target_supports_multi_process.
	* dicos-tdep.c (dicos_init_abi): Set
	gdbarch_has_global_breakpoints.
	* gdbarch.sh (has_global_solist): Update comment.
	(has_global_breakpoints): New.
	* remote.c (remote_start_remote): Use
	gdbarch_has_global_breakpoints instead of
	gdbarch_has_global_solist.
	* target.c (target_detach): Use gdbarch_has_global_breakpoints
	instead of gdbarch_has_global_solist.
	* infcmd.c (attach_command): Use gdbarch_has_global_solist instead
	of target_supports_multi_process.
@
text
@a214 1
  gdbarch_construct_inferior_arguments_ftype *construct_inferior_arguments;
a350 1
  construct_inferior_arguments,  /* construct_inferior_arguments */
a458 1
  gdbarch->construct_inferior_arguments = construct_inferior_arguments;
a605 1
  /* Skip verify of construct_inferior_arguments, invalid_p == 0 */
a731 3
                      "gdbarch_dump: construct_inferior_arguments = <%s>\n",
                      host_address_to_string (gdbarch->construct_inferior_arguments));
  fprintf_unfiltered (file,
a2702 17
char *
gdbarch_construct_inferior_arguments (struct gdbarch *gdbarch, int argc, char **argv)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->construct_inferior_arguments != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_construct_inferior_arguments called\n");
  return gdbarch->construct_inferior_arguments (gdbarch, argc, argv);
}

void
set_gdbarch_construct_inferior_arguments (struct gdbarch *gdbarch,
                                          gdbarch_construct_inferior_arguments_ftype construct_inferior_arguments)
{
  gdbarch->construct_inferior_arguments = construct_inferior_arguments;
}

@


1.445
log
@GDBARCH interface for process record and replay.

* gdbarch.sh (process_record): This interface point to the
function that records the inferior execute log.
@
text
@d248 1
d385 1
d643 1
d868 3
d3391 17
@


1.444
log
@	* corelow.c (get_core_registers): Adjust.
	(core_file_thread_alive): Rename to...
	(core_thread_alive): ... this.
	(core_pid_to_str): Try gdbarch_core_pid_to_str first.
	(init_core_ops): Adjust.
	(coreops_suppress_target): Delete.
	(_initialize_corelow): Unconditionally add core_ops.
	* procfs.c: Include "inf-child.h".
	(procfs_ops): Delete.
	(init_procfs_ops): Delete.  Reimplement as...
	(procfs_target): ... this, inheriting from inf-child.
	(procfs_attach, procfs_detach, procfs_fetch_registers): Adjust.
	(procfs_prepare_to_store): Delete.
	(procfs_store_registers, procfs_resume): Adjust.
	(procfs_open): Delete.
	(procfs_suppress_run): Delete.
	(procfs_can_run): Delete.
	(procfs_mourn_inferior): Adjust.
	(procfs_init_inferior): Add target_ops parameter.  Adjust.
	(procfs_create_inferior): Don't pass procfs_init_inferior to
	fork_inferior.  Instead call it after fork_inferior returns.
	(procfs_find_new_threads): Adjust.
	(_initialize_procfs): Adjust to use procfs_target instead of
	init_procfs_ops.
	* sol-thread.c (orig_core_ops, sol_core_ops): Delete.
	(lwp_to_thread): Use target_thread_alive.
	(sol_thread_open): Delete.
	(sol_thread_attach): Delete.
	(sol_thread_detach, sol_thread_resume, sol_thread_wait)
	(sol_thread_fetch_registers, sol_thread_store_registers): Adjust
	to use find_target_beneath.
	(sol_thread_prepare_to_store, sol_thread_xfer_memory): Delete.
	(sol_thread_xfer_partial): Adjust to use find_target_beneath.
	(sol_thread_files_info, sol_thread_kill_inferior): Delete.
	(check_for_thread_db): New.
	(sol_thread_notice_signals, sol_thread_create_inferior): Delete.
	(sol_thread_new_objfile): Call check_for_thread_db.
	(sol_thread_mourn_inferior): Adjust to use find_target_beneath.
	(sol_thread_can_run): Delete.
	(sol_thread_alive): Adjust to use find_target_beneath.
	(sol_thread_stop): Delete.
	(rw_common): Use target_write_memory or target_read_memory.
	(ps_lgetregs, ps_lgetfpregs): Use target_fetch_registers.
	(ps_lsetregs, ps_lsetfpregs): Use target_store_registers.
	(solaris_pid_to_str): Remove check for libthread_db initialization
	failing.
	(sol_find_new_threads): Remove check for libthread_db
	initialization failing, or for an invalid inferior_ptid.  Adjust
	to use find_target_beneath.
	(sol_core_open, sol_core_close, sol_core_detach,
	sol_core_files_info, sol_find_memory_regions,
	sol_make_note_section, ignore): Delete.
	(init_sol_thread_ops): Make it a thread_stratum target.  Remove
	unneeded callback settings.
	(init_sol_core_ops): Delete.
	(_initialize_sol_thread): No longer call init_sol_core_ops, set
	procfs_suppress_run, or hack with core_ops.

	* target.h (struct target_ops): Add a target_ops * parameter to
	to_resume, to_fetch_registers, to_store_registers, to_thread_alive
	and to_find_new_threads.
	(target_fetch_registers, target_store_registers)
	(target_thread_alive, target_find_new_threads): Redeclare as
	function.

	* target.c (update_current_target): Do not inherit or de_fault
	to_resume, to_fetch_registers, to_store_registers,
	to_thread_alive, to_find_new_threads.
	(target_resume): Adjust.
	(target_thread_alive, target_find_new_threads): New.
	(debug_to_resume, debug_to_fetch_registers): Delete.
	(target_fetch_registers): New.
	(debug_to_store_registers): Delete.
	(target_store_registers): New.
	(debug_to_thread_alive, debug_to_find_new_threads): Delete.
	(setup_target_debug): Adjust.

	* gdbcore.h (core_ops): Delete declaration.

	* inf-ptrace.c, linux-nat.c, remote.c, amd64-linux-nat.c,
	inf-child.c, linux-thread-db.c, bsd-uthread.c, inf-ttrace.c,
	i386-sol2-tdep.c, darwin-nat.c, gnu-nat.c, go32-nat.c,
	hpux-thread.c, i386-linux-nat.c, i386fbsd-nat.c, monitor.c,
	nto-procfs.c, remote-m32r-sdi.c, remote-mips.c, windows-nat.c,
	alphabsd-nat.c, amd64bsd-nat.c, arm-linux-nat.c, armnbsd-nat.c,
	bsd-kvm.c, hppa-hpux-nat.c, hppa-linux-nat.c, hppabsd-nat.c,
	hppanbsd-nat.c, i386-darwin-nat.c, i386bsd-nat.c,
	ia64-linux-nat.c, m32r-linux-nat.c, m68kbsd-nat.c,
	m68klinux-nat.c, m88kbsd-nat.c, mips-linux-nat.c,
	mips64obsd-nat.c, mipsnbsd-nat.c, ppc-linux-nat.c, ppcnbsd-nat.c,
	ppcobsd-nat.c, remote-sim.c, rs6000-nat.c, s390-nat.c,
	shnbsd-nat.c, sparc-nat.c, sparc-nat.h, spu-linux-nat.c,
	vaxbsd-nat.c, xtensa-linux-nat.c: Adjust to target_ops changes.

	* gdbarch.sh (core_pid_to_str): New gdbarch callback.
	* gdbarch.h, gdbarch.c: Regenerate.

	* sol2-tdep.c: Include "inferior.h".
	(sol2_core_pid_to_str): New.
	* sol2-tdep.h (sol2_core_pid_to_str): Declare.

	* amd64-sol2-tdep.c (amd64_sol2_init_abi): Set it.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Set it.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Set it.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Set it.
@
text
@d242 1
d378 1
d635 1
d952 6
d3262 24
@


1.443
log
@	* corelow.c (core_close): Don't hardcode the core's pid.
	(core_open): Find core threads before calling
	post_create_inferior.
	(add_to_thread_list, get_core_register_section): Take into account
	systems where the regset section names encode the pid of the
	inferior.

	* gdbarch.sh (core_reg_section_encodes_pid): New gdbarch setting.
	* gdbarch.h, gdbarch.c: Regenerate.

	* amd64-sol2-tdep.c (amd64_sol2_init_abi): Set it.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Set it.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Set it.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Set it.
@
text
@d229 1
d364 1
d618 1
d739 6
d2975 24
@


1.442
log
@	* gdbarch.c: Regenerate.
@
text
@d226 1
d360 1
d614 1
d742 3
d2908 17
@


1.441
log
@2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* target.h (enum target_object): Add new TARGET_OBJECT_SIGNAL_INFO.
	* infrun.c (siginfo_value_read, siginfo_value_write): New.
	(siginfo_value_funcs): New.
	(siginfo_make_value): New.
	(_initialize_infrun): Create the $_siginfo convenience variable.
	* gdbtypes.h (append_composite_type_field_aligned): Declare.
	* gdbtypes.c (append_composite_type_field): Rename to...
	(append_composite_type_field_aligned): ... this.  Add ALIGNMENT
	argument.  Handle it.
	(append_composite_type_field): Rewrite on top of
	append_composite_type_field_aligned.
	* value.h (internalvar_make_value): New typedef.
	(struct internalvar) <make_value>: New field.
	(create_internalvar_type_lazy): Declare.
	* value.c (create_internalvar): Clear make_value.
	(create_internalvar_type_lazy): New.
	(value_of_internalvar): If make_value is set use it.
	(preserve_values): Skip internal variables that don't have a
	value.
	* gdbarch.sh (get_siginfo_type): New.
	* gdbarch.h, gdbarch.c: Regenerate.

	* linux-tdep.h, linux-tdep.c: New.
	* amd64-linux-tdep.c: Include "linux-tdep.h".
	(amd64_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.
	* i386-linux-tdep.c: Include "linux-tdep.h".
	(i386_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.
	* arm-linux-tdep.c: Include "linux-tdep.h".
	(i386_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.

	* linux-nat.c (linux_xfer_siginfo): New.
	(linux_nat_xfer_partial): Handle TARGET_OBJECT_SIGNAL_INFO.
	* remote.c (PACKET_qXfer_siginfo_read)
	(PACKET_qXfer_siginfo_write): New.
	(feature remote_protocol_features): Add "qXfer:siginfo:read" and
	"qXfer:siginfo:write" features.
	(remote_xfer_partial): Handle TARGET_OBJECT_SIGNAL_INFO.
	(_initialize_remote): Add "set/show remote read-siginfo-object"
	and "set/show remote write-siginfo-object" commands.

	* Makefile.in (ALL_TARGET_OBS): Add linux-tdep.o.
	(HFILES_NO_SRCDIR): Add linux-tdep.h.
	(ALLDEPFILES): Add linux-tdep.c.

	* configure.tgt (arm*-*-linux* | arm*-*-uclinux*)
	(i[34567]86-*-linux*, x86_64-*-linux*): Add linux-tdep.o to
	gdb_target_obs.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/gdbserver/
	* server.c (handle_query): Report qXfer:siginfo:read and
	qXfer:siginfo:write as supported and handle them.
	* target.h (struct target_ops) <qxfer_siginfo>: New field.
	* linux-low.c (linux_xfer_siginfo): New.
	(linux_target_ops): Set it.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Signals): Document $_siginfo.
	(Convenience Variables): Mention $_siginfo.
	(Remote Configuration): Document qXfer:siginfo:read,
	qXfer:siginfo:write packets, and the read-siginfo-object,
	write-siginfo-object commands.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/testsuite/
	* gdb.base/siginfo-obj.c, gdb.base/siginfo-obj.exp: New.
@
text
@d844 2
a845 2
                      "gdbarch_dump: get_siginfo_type = <0x%lx>\n",
                      (long) gdbarch->get_siginfo_type);
@


1.440
log
@        * gdbarch.sh: Fix all the compilation errors on amd64-windows
        due to casting a pointer to a long when printing a function
        address. Instead, use host_address_to_string to convert our
        address to a string.
        * gdbarch.c: Regenerate.
@
text
@d242 1
d375 1
d629 1
d841 6
d3232 24
@


1.439
log
@	* remote.c (remote_start_remote): If the solib list is global,
	fetch libraries and insert breakpoints after connecting.
	* infcmd.c (post_create_inferior): If the solist is shared between
	inferiors, no need to refetch it on every new inferior.
	(detach_command): If the shared library list is shared between
	inferiors, then don't clear it on every inferior detach.
	* gdbarch.sh (has_global_solist): New.
	* i386-dicos-tdep.c (i386_dicos_init_abi): Set
	gdbarch_has_global_solist.
	* target.c (target_pre_inferior): If the shared library list is
	shared between inferiors, then don't clear it here, neither
	invalidate the memory regions or clear the target description.
	(target_detach): If the shared library list is shared between
	inferiors, then don't remove breakpoints from the target here.
	(target_disconnect): Comment.
	* solib.c (update_solib_list): Check for null_ptid.
	* breakpoint.c (insert_breakpoints, update_global_location_list):
	If the shared library list is shared between inferiors, insert
	breakpoints even if there's no execution.
	(breakpoint_init_inferior): If the shared library list is shared
	between inferiors, don't delete breakpoints or mark them
	uninserted here.

	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d655 2
a656 2
                      "gdbarch_dump: addr_bits_remove = <0x%lx>\n",
                      (long) gdbarch->addr_bits_remove);
d661 2
a662 2
                      "gdbarch_dump: address_class_name_to_type_flags = <0x%lx>\n",
                      (long) gdbarch->address_class_name_to_type_flags);
d667 2
a668 2
                      "gdbarch_dump: address_class_type_flags = <0x%lx>\n",
                      (long) gdbarch->address_class_type_flags);
d673 2
a674 2
                      "gdbarch_dump: address_class_type_flags_to_name = <0x%lx>\n",
                      (long) gdbarch->address_class_type_flags_to_name);
d676 2
a677 2
                      "gdbarch_dump: address_to_pointer = <0x%lx>\n",
                      (long) gdbarch->address_to_pointer);
d682 2
a683 2
                      "gdbarch_dump: adjust_breakpoint_address = <0x%lx>\n",
                      (long) gdbarch->adjust_breakpoint_address);
d694 2
a695 2
                      "gdbarch_dump: breakpoint_from_pc = <0x%lx>\n",
                      (long) gdbarch->breakpoint_from_pc);
d706 2
a707 2
                      "gdbarch_dump: cannot_fetch_register = <0x%lx>\n",
                      (long) gdbarch->cannot_fetch_register);
d712 2
a713 2
                      "gdbarch_dump: cannot_store_register = <0x%lx>\n",
                      (long) gdbarch->cannot_store_register);
d718 2
a719 2
                      "gdbarch_dump: coff_make_msymbol_special = <0x%lx>\n",
                      (long) gdbarch->coff_make_msymbol_special);
d721 2
a722 2
                      "gdbarch_dump: construct_inferior_arguments = <0x%lx>\n",
                      (long) gdbarch->construct_inferior_arguments);
d724 2
a725 2
                      "gdbarch_dump: convert_from_func_ptr_addr = <0x%lx>\n",
                      (long) gdbarch->convert_from_func_ptr_addr);
d727 2
a728 2
                      "gdbarch_dump: convert_register_p = <0x%lx>\n",
                      (long) gdbarch->convert_register_p);
d733 2
a734 2
                      "gdbarch_dump: core_read_description = <0x%lx>\n",
                      (long) gdbarch->core_read_description);
d742 2
a743 2
                      "gdbarch_dump: core_xfer_shared_libraries = <0x%lx>\n",
                      (long) gdbarch->core_xfer_shared_libraries);
d757 2
a758 2
                      "gdbarch_dump: displaced_step_copy_insn = <0x%lx>\n",
                      (long) gdbarch->displaced_step_copy_insn);
d763 2
a764 2
                      "gdbarch_dump: displaced_step_fixup = <0x%lx>\n",
                      (long) gdbarch->displaced_step_fixup);
d766 2
a767 2
                      "gdbarch_dump: displaced_step_free_closure = <0x%lx>\n",
                      (long) gdbarch->displaced_step_free_closure);
d769 2
a770 2
                      "gdbarch_dump: displaced_step_location = <0x%lx>\n",
                      (long) gdbarch->displaced_step_location);
d781 2
a782 2
                      "gdbarch_dump: dummy_id = <0x%lx>\n",
                      (long) gdbarch->dummy_id);
d784 2
a785 2
                      "gdbarch_dump: dwarf2_reg_to_regnum = <0x%lx>\n",
                      (long) gdbarch->dwarf2_reg_to_regnum);
d787 2
a788 2
                      "gdbarch_dump: ecoff_reg_to_regnum = <0x%lx>\n",
                      (long) gdbarch->ecoff_reg_to_regnum);
d790 2
a791 2
                      "gdbarch_dump: elf_make_msymbol_special = <0x%lx>\n",
                      (long) gdbarch->elf_make_msymbol_special);
d796 2
a797 2
                      "gdbarch_dump: fetch_pointer_argument = <0x%lx>\n",
                      (long) gdbarch->fetch_pointer_argument);
d802 2
a803 2
                      "gdbarch_dump: fetch_tls_load_module_address = <0x%lx>\n",
                      (long) gdbarch->fetch_tls_load_module_address);
d817 2
a818 2
                      "gdbarch_dump: frame_align = <0x%lx>\n",
                      (long) gdbarch->frame_align);
d826 2
a827 2
                      "gdbarch_dump: frame_num_args = <0x%lx>\n",
                      (long) gdbarch->frame_num_args);
d835 2
a836 2
                      "gdbarch_dump: get_longjmp_target = <0x%lx>\n",
                      (long) gdbarch->get_longjmp_target);
d844 2
a845 2
                      "gdbarch_dump: in_function_epilogue_p = <0x%lx>\n",
                      (long) gdbarch->in_function_epilogue_p);
d847 2
a848 2
                      "gdbarch_dump: in_solib_return_trampoline = <0x%lx>\n",
                      (long) gdbarch->in_solib_return_trampoline);
d850 2
a851 2
                      "gdbarch_dump: inner_than = <0x%lx>\n",
                      (long) gdbarch->inner_than);
d859 2
a860 2
                      "gdbarch_dump: integer_to_address = <0x%lx>\n",
                      (long) gdbarch->integer_to_address);
d880 2
a881 2
                      "gdbarch_dump: memory_insert_breakpoint = <0x%lx>\n",
                      (long) gdbarch->memory_insert_breakpoint);
d883 2
a884 2
                      "gdbarch_dump: memory_remove_breakpoint = <0x%lx>\n",
                      (long) gdbarch->memory_remove_breakpoint);
d898 2
a899 2
                      "gdbarch_dump: overlay_update = <0x%lx>\n",
                      (long) gdbarch->overlay_update);
d904 2
a905 2
                      "gdbarch_dump: pointer_to_address = <0x%lx>\n",
                      (long) gdbarch->pointer_to_address);
d910 2
a911 2
                      "gdbarch_dump: print_float_info = <0x%lx>\n",
                      (long) gdbarch->print_float_info);
d913 2
a914 2
                      "gdbarch_dump: print_insn = <0x%lx>\n",
                      (long) gdbarch->print_insn);
d916 2
a917 2
                      "gdbarch_dump: print_registers_info = <0x%lx>\n",
                      (long) gdbarch->print_registers_info);
d922 2
a923 2
                      "gdbarch_dump: print_vector_info = <0x%lx>\n",
                      (long) gdbarch->print_vector_info);
d931 2
a932 2
                      "gdbarch_dump: pseudo_register_read = <0x%lx>\n",
                      (long) gdbarch->pseudo_register_read);
d937 2
a938 2
                      "gdbarch_dump: pseudo_register_write = <0x%lx>\n",
                      (long) gdbarch->pseudo_register_write);
d946 2
a947 2
                      "gdbarch_dump: push_dummy_call = <0x%lx>\n",
                      (long) gdbarch->push_dummy_call);
d952 2
a953 2
                      "gdbarch_dump: push_dummy_code = <0x%lx>\n",
                      (long) gdbarch->push_dummy_code);
d958 2
a959 2
                      "gdbarch_dump: read_pc = <0x%lx>\n",
                      (long) gdbarch->read_pc);
d964 2
a965 2
                      "gdbarch_dump: record_special_symbol = <0x%lx>\n",
                      (long) gdbarch->record_special_symbol);
d967 2
a968 2
                      "gdbarch_dump: register_name = <0x%lx>\n",
                      (long) gdbarch->register_name);
d970 2
a971 2
                      "gdbarch_dump: register_reggroup_p = <0x%lx>\n",
                      (long) gdbarch->register_reggroup_p);
d973 2
a974 2
                      "gdbarch_dump: register_sim_regno = <0x%lx>\n",
                      (long) gdbarch->register_sim_regno);
d976 2
a977 2
                      "gdbarch_dump: register_to_value = <0x%lx>\n",
                      (long) gdbarch->register_to_value);
d982 2
a983 2
                      "gdbarch_dump: register_type = <0x%lx>\n",
                      (long) gdbarch->register_type);
d988 2
a989 2
                      "gdbarch_dump: regset_from_core_section = <0x%lx>\n",
                      (long) gdbarch->regset_from_core_section);
d991 2
a992 2
                      "gdbarch_dump: remote_register_number = <0x%lx>\n",
                      (long) gdbarch->remote_register_number);
d997 2
a998 2
                      "gdbarch_dump: return_value = <0x%lx>\n",
                      (long) gdbarch->return_value);
d1000 2
a1001 2
                      "gdbarch_dump: sdb_reg_to_regnum = <0x%lx>\n",
                      (long) gdbarch->sdb_reg_to_regnum);
d1009 2
a1010 2
                      "gdbarch_dump: single_step_through_delay = <0x%lx>\n",
                      (long) gdbarch->single_step_through_delay);
d1015 2
a1016 2
                      "gdbarch_dump: skip_main_prologue = <0x%lx>\n",
                      (long) gdbarch->skip_main_prologue);
d1021 2
a1022 2
                      "gdbarch_dump: skip_permanent_breakpoint = <0x%lx>\n",
                      (long) gdbarch->skip_permanent_breakpoint);
d1024 2
a1025 2
                      "gdbarch_dump: skip_prologue = <0x%lx>\n",
                      (long) gdbarch->skip_prologue);
d1027 2
a1028 2
                      "gdbarch_dump: skip_solib_resolver = <0x%lx>\n",
                      (long) gdbarch->skip_solib_resolver);
d1030 2
a1031 2
                      "gdbarch_dump: skip_trampoline_code = <0x%lx>\n",
                      (long) gdbarch->skip_trampoline_code);
d1033 2
a1034 2
                      "gdbarch_dump: smash_text_address = <0x%lx>\n",
                      (long) gdbarch->smash_text_address);
d1039 2
a1040 2
                      "gdbarch_dump: software_single_step = <0x%lx>\n",
                      (long) gdbarch->software_single_step);
d1048 2
a1049 2
                      "gdbarch_dump: stab_reg_to_regnum = <0x%lx>\n",
                      (long) gdbarch->stab_reg_to_regnum);
d1051 2
a1052 2
                      "gdbarch_dump: stabs_argument_has_addr = <0x%lx>\n",
                      (long) gdbarch->stabs_argument_has_addr);
d1057 2
a1058 2
                      "gdbarch_dump: static_transform_name = <0x%lx>\n",
                      (long) gdbarch->static_transform_name);
d1061 1
a1061 1
                      plongest ((long) gdbarch->target_desc));
d1063 2
a1064 2
                      "gdbarch_dump: target_signal_from_host = <0x%lx>\n",
                      (long) gdbarch->target_signal_from_host);
d1066 2
a1067 2
                      "gdbarch_dump: target_signal_to_host = <0x%lx>\n",
                      (long) gdbarch->target_signal_to_host);
d1072 2
a1073 2
                      "gdbarch_dump: unwind_pc = <0x%lx>\n",
                      (long) gdbarch->unwind_pc);
d1078 2
a1079 2
                      "gdbarch_dump: unwind_sp = <0x%lx>\n",
                      (long) gdbarch->unwind_sp);
d1081 2
a1082 2
                      "gdbarch_dump: value_from_register = <0x%lx>\n",
                      (long) gdbarch->value_from_register);
d1084 2
a1085 2
                      "gdbarch_dump: value_to_register = <0x%lx>\n",
                      (long) gdbarch->value_to_register);
d1090 2
a1091 2
                      "gdbarch_dump: virtual_frame_pointer = <0x%lx>\n",
                      (long) gdbarch->virtual_frame_pointer);
d1099 2
a1100 2
                      "gdbarch_dump: write_pc = <0x%lx>\n",
                      (long) gdbarch->write_pc);
d3465 1
a3465 1
    fprintf_unfiltered (gdb_stdlog, "register_gdbarch_init (%s, 0x%08lx)\n",
d3467 1
a3467 1
			(long) init);
d3546 2
a3547 2
			  "find_arch_by_info: info.abfd 0x%lx\n",
			  (long) info.abfd);
d3549 2
a3550 2
			  "find_arch_by_info: info.tdep_info 0x%lx\n",
			  (long) info.tdep_info);
d3589 2
a3590 2
			    "Previous architecture 0x%08lx (%s) selected\n",
			    (long) new_gdbarch,
d3611 2
a3612 2
			"New architecture 0x%08lx (%s) selected\n",
			(long) new_gdbarch,
@


1.439.4.1
log
@2008-12-26  Michael Snyder  <msnyder@@vmware.com>

	* Marker: adding teawater patches to branch.
@
text
@a239 2
  gdbarch_process_record_ftype *process_record;
  gdbarch_process_record_dasm_ftype *process_record_dasm;
a371 2
  0,  /* process_record */
  0,  /* process_record_dasm */
a624 2
  /* Skip verify of process_record, has predicate */
  /* Skip verify of process_record_dasm, has predicate */
a924 12
                      "gdbarch_dump: gdbarch_process_record_p() = %d\n",
                      gdbarch_process_record_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: process_record = <0x%lx>\n",
                      (long) gdbarch->process_record);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_process_record_dasm_p() = %d\n",
                      gdbarch_process_record_dasm_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: process_record_dasm = <0x%lx>\n",
                      (long) gdbarch->process_record_dasm);
  fprintf_unfiltered (file,
a3187 48
int
gdbarch_process_record_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->process_record != NULL;
}

int
gdbarch_process_record (struct gdbarch *gdbarch, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->process_record != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_process_record called\n");
  return gdbarch->process_record (gdbarch, addr);
}

void
set_gdbarch_process_record (struct gdbarch *gdbarch,
                            gdbarch_process_record_ftype process_record)
{
  gdbarch->process_record = process_record;
}

int
gdbarch_process_record_dasm_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->process_record_dasm != NULL;
}

void
gdbarch_process_record_dasm (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->process_record_dasm != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_process_record_dasm called\n");
  gdbarch->process_record_dasm (gdbarch);
}

void
set_gdbarch_process_record_dasm (struct gdbarch *gdbarch,
                                 gdbarch_process_record_dasm_ftype process_record_dasm)
{
  gdbarch->process_record_dasm = process_record_dasm;
}

@


1.438
log
@ChangeLog:

	* gdbarch.sh (name_of_malloc): Remove.
	* gdbarch.c, gdbarch.h: Re-generate.
	* valops.c (value_allocate_space_in_inferior): Do not call
	gdbarch_name_of_malloc.

doc/ChangeLog:

	* gdbint.texinfo (Target Conditionals): Remove documentation
	for gdbarch_name_of_malloc.
@
text
@d243 1
d375 1
d628 1
d838 3
d3246 17
@


1.438.2.1
log
@2008-09-30  Hui Zhu  <teawater@@gmail.com>
	Add process record and replay to GDB.
	* record.c, record.h: New files. Record and reverse target.
	* gdbarch.sh: New methods process_record and process_record_dasm.
	* gdbarch.c, gdbarch.h: Re-generate.
	* target.h (enum strata): Add record_stratum.
	* target.h (target_ops): Add a element "to_support_record_wait".
	Default value is 0. meaning that this target doesn't support record
	wait.
	* target.c: Add include of "record.h".
	(update_current_target): Set the real beneath function.
	(add_target): Set the default value of "to_support_record_wait".
	pointers.
 	* Makefile.in: Add files record.c, record.o.
@
text
@a239 2
  gdbarch_process_record_ftype *process_record;
  gdbarch_process_record_dasm_ftype *process_record_dasm;
a370 2
  0,  /* process_record */
  0,  /* process_record_dasm */
a622 1
  /* Skip verify of process_record, has predicate */
a918 9
                      "gdbarch_dump: gdbarch_process_record_p() = %d\n",
                      gdbarch_process_record_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: process_record = <0x%lx>\n",
                      (long) gdbarch->process_record);
  fprintf_unfiltered (file,
                      "gdbarch_dump: process_record_dasm = <0x%lx>\n",
                      (long) gdbarch->process_record_dasm);
  fprintf_unfiltered (file,
a3181 41
int
gdbarch_process_record_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->process_record != NULL;
}

int
gdbarch_process_record (struct gdbarch *gdbarch, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->process_record != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_process_record called\n");
  return gdbarch->process_record (addr);
}

void
set_gdbarch_process_record (struct gdbarch *gdbarch,
                            gdbarch_process_record_ftype process_record)
{
  gdbarch->process_record = process_record;
}

void
gdbarch_process_record_dasm (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->process_record_dasm != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_process_record_dasm called\n");
  gdbarch->process_record_dasm ();
}

void
set_gdbarch_process_record_dasm (struct gdbarch *gdbarch,
                                 gdbarch_process_record_dasm_ftype process_record_dasm)
{
  gdbarch->process_record_dasm = process_record_dasm;
}

@


1.438.2.2
log
@2008-09-30  Hui Zhu  <teawater@@gmail.com>

	Add process record and replay to i386 architecture.
	* i386-linux-tdep.c (linux_record_tdep): New static variable.
	I386 Linux record target-dependent stuff.
	(i386_linux_intx80_sysenter_record): New function. Record the
	running message of I386 Linux system call.
	(i386_linux_init_ab): Initialize the linux_record_tdep. Add
	i386_linux_intx80_sysenter_record to struct tdep.
	* i386-tdep.c (i386_record_modrm, i386_record_lea_modrm_addr,
	i386_record_lea_modrm, i386_record): New functions. Record the
	running message of I386 instruction.
	(i386_gdbarch_init): Add i386_record to struct gdbarch.
	* i386-tdep.h (gdbarch_tdep): Add elements "i386_intx80_record"
	and "i386_sysenter_record" to be the interfaces that record the
	running message of instruction "intx80" and "sysenter".
	* gdbarch.sh: Change process_record and process_record_dasm
	to multi-arch model.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a627 1
  /* Skip verify of process_record_dasm, has predicate */
a929 3
                      "gdbarch_dump: gdbarch_process_record_dasm_p() = %d\n",
                      gdbarch_process_record_dasm_p (gdbarch));
  fprintf_unfiltered (file,
d3210 1
a3210 1
  return gdbarch->process_record (gdbarch, addr);
a3219 7
int
gdbarch_process_record_dasm_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->process_record_dasm != NULL;
}

d3227 1
a3227 1
  gdbarch->process_record_dasm (gdbarch);
@


1.437
log
@	* gdbarch.sh (gdbarch_dump): Use core_addr_to_string_nz
	instead of paddr_nz.
	* gdbarch.c: Regenerate.

	* target.c (target_xfer_partial, debug_print_register): Use
	core_addr_to_string_nz instead of paddr_nz.
@
text
@a217 1
  const char * name_of_malloc;
a348 1
  "malloc",  /* name_of_malloc */
a451 1
  gdbarch->name_of_malloc = "malloc";
a599 1
  /* Skip verify of name_of_malloc, invalid_p == 0 */
a879 3
                      "gdbarch_dump: name_of_malloc = %s\n",
                      gdbarch->name_of_malloc);
  fprintf_unfiltered (file,
a2715 17
const char *
gdbarch_name_of_malloc (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of name_of_malloc, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_name_of_malloc called\n");
  return gdbarch->name_of_malloc;
}

void
set_gdbarch_name_of_malloc (struct gdbarch *gdbarch,
                            const char * name_of_malloc)
{
  gdbarch->name_of_malloc = name_of_malloc;
}

@


1.436
log
@	* gdbarch.sh (addr_bits_remove): Change type to 'm'.
	(smash_text_address): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.

	* arch-utils.c (core_addr_identity): Add gdbarch parameter.
	* arch-utils.h (core_addr_identity): Likewise.
	* arm-tdep.c (arm_addr_bits_remove): Likewise.
	(arm_smash_text_address): Likewise.
	* hppa-tdep.c (hppa_smash_text_address): Likewise.
	* m88k-tdep.c (m88k_addr_bits_remove): Likewise.
	* s390-tdep.c (s390_addr_bits_remove): Likewise.

	* mips-tdep.c (mips_addr_bits_remove): Add gdbarch parameter.
	Use it instead of current_gdbarch.

	* arm-tdep.c (arm_prologue_prev_register, arm_unwind_pc,
	arm_dwarf2_prev_register): Update calls.
	* m88k-tdep.c (m88k_unwind_pc): Update call.
@
text
@d746 2
a747 2
                      "gdbarch_dump: decr_pc_after_break = 0x%s\n",
                      paddr_nz (gdbarch->decr_pc_after_break));
d752 2
a753 2
                      "gdbarch_dump: deprecated_function_start_offset = 0x%s\n",
                      paddr_nz (gdbarch->deprecated_function_start_offset));
d821 2
a822 2
                      "gdbarch_dump: frame_args_skip = 0x%s\n",
                      paddr_nz (gdbarch->frame_args_skip));
@


1.435
log
@	* defs.h (plongest,pulongest): Renamed from paddr_u,paddr_d.
	Change argument of pulongest from CORE_ADDR to ULONGEST.
	All callers updated.
	* utils.c (plongest): Renamed from paddr_d.
	(pulongest): Renamed from paddr_u, change arg type to ULONGEST.
	* remote-mips.c (send_srec): Use paddr_nz instead of paddr_u in
	`CORE_ADDR addr' arg of error message.
@
text
@d338 2
a339 2
  0,  /* addr_bits_remove */
  0,  /* smash_text_address */
d2512 1
a2512 1
  return gdbarch->addr_bits_remove (addr);
d2529 1
a2529 1
  return gdbarch->smash_text_address (addr);
@


1.434
log
@	* gdbarch.sh (target_gdbarch): New global variable.
	(deprecated_current_gdbarch_select_hack): Set it.
	* gdbarch.c, gdbarch.h: Regenerate.

	* arch-utils.c (gdbarch_update_p): Use target_gdbarch instead
	of current_gdbarch.
	* target-descriptions.c (target_find_description): Likewise.
	* arm-tdep.c (arm_update_current_architecture): Likewise.
	(show_fp_model, arm_show_abi, arm_show_fallback_mode,
	arm_show_force_mode): Likewise.
	* mips-tdep.c (show_mask_address, show_mipsfpu_command,
	show_mips_abi): Likewise.
	* mep-tdep.c (me_module_register_set, current_me_module): Likewise.

	* target.c (target_translate_tls_address): Use target_gdbarch
	instead of current_gdbarch.
	* remote.c (struct packet_reg): Likewise.
	(get_remote_arch_state, packet_reg_from_regnum,
	packet_reg_from_pnum, remote_check_symbols, remote_wait,
	remote_address_masked, remote_insert_breakpoint,
	remote_insert_hw_breakpoint, remote_read_description): Likewise.
	* remote-m32r-sdi.c (m32r_resume, m32r_wait): Likewise.
	* remote-mips.c (mips_open, mips_common_breakpoint): Likewise.
	* cris-tdep.c (cris_can_use_hardware_watchpoint): Likewise.

	* solib.c (solib_open, solib_map_sections, solib_read_symbols,
	solib_add, info_sharedlibrary_command, solib_address,
	solib_create_inferior_hook, in_solib_dynsym_resolve_code,
	solib_global_lookup): Likewise.
	* solib-frv.c (enable_break2, frv_relocate_main_executable): Likewise.
	* solib-irix.c (irix_current_sos, irix_open_symbol_file_object):
	Likewise.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Likewise.
	* solib-svr4.c (exec_entry_point, enable_break, svr4_free_so,
	set_solib_svr4_fetch_link_map_offsets, svr4_fetch_link_map_offsets):
	Likewise.
	* nto-tdep.c (nto_find_and_open_solib, nto_init_solib_absolute_prefix,
	nto_truncate_ptr): Likewise.
	* mips-linux-tdep.c (mips_linux_in_dynsym_stub): Likewise.
@
text
@d654 1
a654 1
                      paddr_d (gdbarch->addr_bit));
d687 1
a687 1
                      paddr_d (gdbarch->believe_pcc_promotion));
d693 1
a693 1
                      paddr_d (gdbarch->bits_big_endian));
d699 1
a699 1
                      paddr_d (gdbarch->byte_order));
d702 1
a702 1
                      paddr_d (gdbarch->byte_order_for_code));
d705 1
a705 1
                      paddr_d (gdbarch->call_dummy_location));
d711 1
a711 1
                      paddr_d (gdbarch->cannot_step_breakpoint));
d717 1
a717 1
                      paddr_d (gdbarch->char_signed));
d750 1
a750 1
                      paddr_d (gdbarch->deprecated_fp_regnum));
d774 1
a774 1
                      paddr_d (gdbarch->double_bit));
d807 1
a807 1
                      paddr_d (gdbarch->float_bit));
d813 1
a813 1
                      paddr_d (gdbarch->fp0_regnum));
d831 1
a831 1
                      paddr_d (gdbarch->frame_red_zone_size));
d840 1
a840 1
                      paddr_d (gdbarch->have_nonsteppable_watchpoint));
d852 1
a852 1
                      paddr_d (gdbarch->int_bit));
d861 1
a861 1
                      paddr_d (gdbarch->long_bit));
d864 1
a864 1
                      paddr_d (gdbarch->long_double_bit));
d870 1
a870 1
                      paddr_d (gdbarch->long_long_bit));
d876 1
a876 1
                      paddr_d (gdbarch->max_insn_length));
d888 1
a888 1
                      paddr_d (gdbarch->num_pseudo_regs));
d891 1
a891 1
                      paddr_d (gdbarch->num_regs));
d894 1
a894 1
                      paddr_d (gdbarch->osabi));
d903 1
a903 1
                      paddr_d (gdbarch->pc_regnum));
d927 1
a927 1
                      paddr_d (gdbarch->ps_regnum));
d942 1
a942 1
                      paddr_d (gdbarch->ptr_bit));
d1005 1
a1005 1
                      paddr_d (gdbarch->short_bit));
d1044 1
a1044 1
                      paddr_d (gdbarch->sofun_address_maybe_missing));
d1047 1
a1047 1
                      paddr_d (gdbarch->sp_regnum));
d1062 1
a1062 1
                      paddr_d ((long) gdbarch->target_desc));
d1089 1
a1089 1
                      paddr_d (gdbarch->vbit_in_delta));
d1095 1
a1095 1
                      paddr_d (gdbarch->vtable_function_descriptors));
@


1.433
log
@	* gdbarch.sh: Include "regcache.h" into gdbarch.c.
	(deprecated_current_gdbarch_select_hack): Call registers_changed
	instead of reinit_frame_cache.
	* gdbarch.c: Regenerate.
@
text
@d380 1
d3670 1
@


1.432
log
@	ARM BE8 support.
	* disasm.c (gdb_disassemble_info): Set endian_code.
	* gdbarch.sh (gdbarch_info): New field byte_order_for_code.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arch-utils.c (initialize_current_architecture): Set the
	default byte_order_for_code.
	(gdbarch_info_init): Ditto.
	(gdbarch_info_fill): Ditto.
	* arm-tdep.c (SWAP_INT, SWAP_SHORT): New macros.
	(thumb_analyze_prologue): Swap halfword if code endianness is
	different from general endianness.
	(arm_skip_prologue): Similarly.
	(arm_scan_prologue): Ditto.
	(thumb_get_next_pc): Ditto.
	(arm_get_next_pc): Ditto.
	(arm_gdbarch_init): Set byte_order_for_code from BE8 flag,
	choose correct endianness for breakpoints.
@
text
@d51 1
d3670 1
a3670 1
  reinit_frame_cache ();
@


1.431
log
@gdb:
	* tui/tui-hooks.c: Include observer.h.
	(tui_event_default, tui_old_event_hooks, tui_event_hooks):
	Remove.
	(tui_bp_created_observer, tui_bp_deleted_observer,
	tui_bp_modified_observer): New globals.
	(tui_install_hooks): Use observers, not events.
	(tui_remove_hooks): Likewise.
	* mi/mi-cmd-break.c: Include observer.h, not gdb-events.h.
	(mi_breakpoint_observers_installed, mi_can_breakpoint_notify): New
	globals.
	(breakpoint_notify): Check mi_can_breakpoint_notify.
	(breakpoint_hooks): Remove.
	(mi_cmd_break_insert): Attach observers.  Don't use events.
	* tracepoint.c: Include observer.h, not gdb-events.h.
	(tracepoint_operation, trace_pass_command): Notify observer.
	* interps.c: Don't include gdb-events.h.
	(clear_interpreter_hooks): Don't call clear_gdb_event_hooks.
	* gdbarch.c: Rebuild.
	* gdbarch.sh: Emit include for observer.h, not gdb-events.h.
	(deprecated_current_gdbarch_select_hack): Notify observer.
	* breakpoint.h: Don't include gdb-events.h.
	* breakpoint.c: Don't include gdb-events.h.
	(condition_command): Notify observer.
	(commands_command): Likewise.
	(commands_from_control_command): Likewise.
	(mention, delete_breakpoint, set_ignore_count): Likewise.
	(disable_breakpoint, do_enable_breakpoint): Likewise.
	* Makefile.in (gdb_events_h): Remove.
	(breakpoint_h): Update.
	(COMMON_OBS): Remove gdb-events.o.
	(gdb-events.o): Remove.
	(breakpoint.o, gdbarch.o, interps.o, tracepoint.o, gdbtk-bp.o,
	gdbtk-hooks.o, mi-cmd-break.o, tui-hooks.o): Update.
	* gdb-events.c: Remove.
	* gdb-events.h: Remove.
	* gdb-events.sh: Remove.
gdb/doc:
	* observer.texi (GDB Observers): Document new observers:
	breakpoint_created, breakpoint_deleted, breakpoint_modified,
	tracepoint_created, tracepoint_deleted, tracepoint_modified,
	architecture_changed.
gdb/gdbtk:
	* generic/gdbtk-hooks.c: Include observer.h, not gdb-events.h.
	(gdbtk_add_hooks): Use observers, not events.
	(gdbtk_architecture_changed): Add argument, for observer.
	* generic/gdbtk-bp.c: Include observer.h.
	(gdb_set_bp): Notify observer.
	(gdb_set_bp_addr): Likewise.
@
text
@d93 1
d258 1
d403 1
d699 3
d1131 9
@


1.430
log
@	Scrub remnants of IN_SOLIB_DYNSYM_RESOLVE_CODE.
	* gdbarch.sh: Adjust comment to refer to
	in_solib_dynsym_resolve_code().
	* gdbarch.h, gdbarch.c: Update.
	* solib-osf.c: Ditto.
	* infrun.c: Ditto.
	(handle_inferior_event): Use in_solib_dynsym_resolve_code
	unconditionally.
	* config/mips/nm-irix5.h: Remove undef of
	IN_SOLIB_DYNSYM_RESOLVE_CODE.

	* gdbint.texinfo: Refer to target_so_ops.in_dynsym_resolve_code
	instead of IN_SOLIB_DYNSYM_RESOLVE_CODE.
@
text
@a46 1
#include "gdb-events.h"
d50 1
d3653 1
a3653 1
  architecture_changed_event ();
@


1.429
log
@	* gdbarch.sh (gdbarch_skip_main_prologue): New.
	* gdbarch.h, gdbarch.c: Regenerate.
	* i386-tdep.h (i386_skip_main_prologue): Declare.
	* i386-tdep.c (i386_skip_main_prologue): New.
	* i386-cygwin-tdep.c (i386_cygwin_init_abi): Register
	i386_skip_main_prologue as gdbarch_skip_main_prologue gdbarch callback.
	* symtab.c (find_function_start_sal): When pc points at the "main"
	function, call gdbarch_skip_main_prologue.
@
text
@d2153 1
a2153 1
                              gdbarch_skip_main_prologue_ftype skip_main_prologue)
@


1.429.2.1
log
@Add record target to GDB.
@
text
@a241 2
  gdbarch_record_ftype *record;
  gdbarch_record_dasm_ftype *record_dasm;
a372 2
  NULL,  /* record_ftype */
  NULL,  /* record_dasm_ftype */
a3656 40
int
gdbarch_record_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return (gdbarch->record != NULL);
}

int
gdbarch_record (struct gdbarch *gdbarch, CORE_ADDR addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->record != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_record called\n");
  return (gdbarch->record (gdbarch, addr));
}

void
set_gdbarch_record (struct gdbarch *gdbarch, gdbarch_record_ftype * record)
{
  gdbarch->record = record;
}

void
gdbarch_record_dasm (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->record_dasm != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_record_dasm called\n");
  gdbarch->record_dasm (gdbarch);
}

void
set_gdbarch_record_dasm (struct gdbarch *gdbarch,
			 gdbarch_record_dasm_ftype * record_dasm)
{
  gdbarch->record_dasm = record_dasm;
}

@


1.428
log
@
	* gdbarch.sh: Added new gdbarch struct
	core_regset_sections.
	* gdbarch.c: Refreshed.
	* gdbarch.h: Refreshed.
	* regset.h (core_regset_section): Declared.
	* linux-nat.c (linux_nat_do_thread_registers): Added
	support for the new gdbarch struct core_regset_sections.
	* utils.c (host_address_to_string): New function.
	* defs.h (host_address_to_string): New prototype.
	* i386-linux-tdep.c (i386_regset_rections): New register
	sections list for i386.
	  (i386_linux_init_abi): Initialized new gdbarch struct
	  core_regset_sections.
	* Makefile.in: Updated to reflect dependency changes.
	* ppc-linux-tdep.c (ppc_regset_sections): Register
	sections list for ppc.
	  (ppc_linux_init_abi): Initialized new gdbarch struct
	  core_regset_sections
@
text
@d186 1
d317 1
d566 1
d1005 6
d2135 24
@


1.427
log
@	* gdbarch.sh: Delete dwarf_reg_to_regnum.
	* gdbarch.c, gdbarch.h: Regenerated.
	* amd64-tdep.c, arm-tdep.c, h8300-tdep.c, hppa-linux-tdep.c,
	hppa-tdep.c, i386-tdep.c, m32c-tdep.c, m68k-tdep.c, mips-tdep.c,
	s390-tdep.c, xtensa-tdep.c: Do not set dwarf_reg_to_regnum.

	* gdbint.texinfo (Target Conditionals): Delete entry for
	gdbarch_dwarf_reg_to_regnum.
@
text
@d224 1
d354 1
d726 3
d2861 16
@


1.426
log
@	* Makefile.in (arm-tdep.o): Update.
	* arm-tdep.c (arm_objfile_data_key, struct arm_mapping_symbol)
	(struct arm_per_objfile, arm_compare_mapping_symbols): New.
	(arm_pc_is_thumb): Use mapping symbols.
	(arm_objfile_data_cleanup, arm_record_special_symbol): New.
	(arm_gdbarch_init): Call set_gdbarch_record_special_symbol.
	(_initialize_arm_tdep): Initialize arm_objfile_data_key.
	* elfread.c (elf_symtab_read): Use gdbarch_record_special_symbol.
	* gdbarch.sh: Add record_special_symbol.
	* gdbarch.c, gdbarch.h: Regenerated.
	* objfiles.c (struct objfile_data): Add cleanup member.
	(register_objfile_data_with_cleanup): New function, from
	register_objfile_data.
	(register_objfile_data): Use it.
	(objfile_free_data): Call clear_objfile_data.
	(clear_objfile_data): Call cleanup functions.
	* objfiles.h (register_objfile_data_with_cleanup): Declare.
@
text
@a159 1
  gdbarch_dwarf_reg_to_regnum_ftype *dwarf_reg_to_regnum;
a288 1
  no_op_reg_to_regnum,  /* dwarf_reg_to_regnum */
a418 1
  gdbarch->dwarf_reg_to_regnum = no_op_reg_to_regnum;
a536 1
  /* Skip verify of dwarf_reg_to_regnum, invalid_p == 0 */
a771 3
                      "gdbarch_dump: dwarf_reg_to_regnum = <0x%lx>\n",
                      (long) gdbarch->dwarf_reg_to_regnum);
  fprintf_unfiltered (file,
a1616 17
gdbarch_dwarf_reg_to_regnum (struct gdbarch *gdbarch, int dwarf_regnr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->dwarf_reg_to_regnum != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dwarf_reg_to_regnum called\n");
  return gdbarch->dwarf_reg_to_regnum (gdbarch, dwarf_regnr);
}

void
set_gdbarch_dwarf_reg_to_regnum (struct gdbarch *gdbarch,
                                 gdbarch_dwarf_reg_to_regnum_ftype dwarf_reg_to_regnum)
{
  gdbarch->dwarf_reg_to_regnum = dwarf_reg_to_regnum;
}

int
@


1.425
log
@	Implement displaced stepping.

	gdb/
	* gdbarch.sh (max_insn_length): New 'variable'.
	(displaced_step_copy, displaced_step_fixup)
	(displaced_step_free_closure, displaced_step_location): New
	functions.
	(struct displaced_step_closure): Add forward declaration.
	* gdbarch.c, gdbarch.h: Regenerated.

	* arch-utils.c: #include "objfiles.h".
	(simple_displaced_step_copy_insn)
	(simple_displaced_step_free_closure)
	(displaced_step_at_entry_point): New functions.
	* arch-utils.h (simple_displaced_step_copy_insn)
	(simple_displaced_step_free_closure)
	(displaced_step_at_entry_point): New prototypes.

	* i386-tdep.c (I386_MAX_INSN_LEN): Rename to...
	(I386_MAX_MATCHED_INSN_LEN): ... this.
	(i386_absolute_jmp_p, i386_absolute_call_p)
	(i386_ret_p, i386_call_p, i386_breakpoint_p, i386_syscall_p)
	(i386_displaced_step_fixup): New functions.
	(struct i386_insn, i386_match_insn): Update.
	(i386_gdbarch_init): Set gdbarch_max_insn_length.
	* i386-tdep.h (I386_MAX_INSN_LEN): New.
	(i386_displaced_step_fixup): New prototype.
	* i386-linux-tdep.c (i386_linux_init_abi): Include "arch-utils.h".
	Register gdbarch_displaced_step_copy,
	gdbarch_displaced_step_fixup, gdbarch_displaced_step_free_closure,
	and gdbarch_displaced_step_location functions.

	* infrun.c (debug_displaced): New variable.
	(show_debug_displaced): New function.
	(struct displaced_step_request): New struct.
	(displaced_step_request_queue, displaced_step_ptid)
	(displaced_step_gdbarch, displaced_step_closure)
	(displaced_step_original, displaced_step_copy)
	(displaced_step_saved_copy, can_use_displaced_stepping): New
	variables.
	(show_can_use_displaced_stepping, use_displaced_stepping)
	(displaced_step_clear, cleanup_displaced_step_closure)
	(displaced_step_dump_bytes, displaced_step_prepare)
	(displaced_step_clear_cleanup, write_memory_ptid)
	(displaced_step_fixup): New functions.
	(resume): Call displaced_step_prepare.
	(proceed): Call read_pc once, and remember the value.  If using
	displaced stepping, don't remove breakpoints.
	(handle_inferior_event): Call displaced_step_fixup.  Add some
	debugging output.  When we try to step over a breakpoint, but get
	a signal to deliver to the thread instead, ensure the step-resume
	breakpoint is actually inserted.  If a thread hop is needed, and
	displaced stepping is enabled, don't remove breakpoints.
	(init_wait_for_inferior): Call displaced_step_clear.
	(_initialize_infrun): Add "set debug displaced" command.  Add
	"maint set can-use-displaced-stepping" command.  Clear
	displaced_step_ptid.
	* inferior.h (debug_displaced): Declare variable.
	(displaced_step_dump_bytes): Declare function.

	* Makefile.in (arch-utils.o, i386-linux-tdep.o): Update
	dependencies.

	gdb/testsuite/
	* gdb.asm/asmsrc1.s: Add scratch space.

	gdb/doc/
	* gdb.texinfo (Debugging Output): Document "set/show debug
	displaced".
	(Maintenance Commands): Document "maint set/show
	can-use-displaced-stepping".
@
text
@d240 1
d370 1
d623 1
d953 6
d3193 24
@


1.424
log
@	PR gdb/2343
	* corelow.c (core_open): Use gdbarch_target_signal_from_host to
	translate signal numeric value from the target to GDB's enum
	target_signal.
	* gdbarch.c, gdbarch.h: Regenerated.
	* gdbarch.sh: Added two new functions target_signal_from_host and
	target_signal_to_host.
	* target.h (default_target_signal_from_host,
	default_target_signal_to_host): New functions - declarations.
	* signals/signals.c (struct gdbarch): New declaration.
	(default_target_signal_to_host, default_target_signal_from_host): New
	functions.
@
text
@d229 5
d358 5
d448 3
d608 7
d740 18
d860 6
d2954 108
@


1.423
log
@	Convert frame unwinders to use the current frame and
	"struct value".

	* frame.c (frame_debug): Make global.
	(get_frame_id): Pass this frame to unwinder routines.
	(frame_pc_unwind): Remove unused unwind->prev_pc support.
	(do_frame_register_read): Do not discard the return value of
	frame_register_read.
	(frame_register_unwind): Remove debug messages.  Use
	frame_unwind_register_value.
	(frame_unwind_register_value, get_frame_register_value): New
	functions.
	(create_new_frame, get_frame_base_address, get_frame_locals_address)
	(get_frame_args_address, get_frame_type): Pass this frame to
	unwinder routines.
	(frame_cleanup_after_sniffer, frame_prepare_for_sniffer): New
	functions.
	* frame.h: Update comments.
	(frame_debug, frame_unwind_register_value, get_frame_register_value)
	(frame_prepare_for_sniffer): Declare.
	* frame-unwind.h: Update comments and parameter names.
	(default_frame_sniffer): Declare.
	(frame_prev_register_ftype): Return a struct value *.
	(struct frame_unwind): Remove prev_pc member.
	(frame_unwind_sniffer_ftype, frame_unwind_append_sniffer): Delete.
	(frame_unwind_append_unwinder, frame_unwind_got_optimized)
	(frame_unwind_got_register, frame_unwind_got_memory)
	(frame_unwind_got_constant, frame_unwind_got_address): Declare.
	* frame-base.h: Update comments and parameter names.
	* valops.c (value_fetch_lazy): Use get_frame_register_value.  Iterate
	if necessary.  Add debugging output.
	* sentinel-frame.c (sentinel_frame_prev_register)
	(sentinel_frame_this_id): Update for new signature.
	(sentinel_frame_prev_pc): Delete.
	(sentinel_frame_unwinder): Remove prev_pc.
	* ia64-tdep.c (ia64_libunwind_frame_unwind): Do not initialize
	prev_pc.
	* libunwind-frame.c (libunwind_frame_unwind): Likewise.
	* frame-unwind.c (struct frame_unwind_table_entry): Remove sniffer.
	(frame_unwind_append_sniffer): Delete.
	(frame_unwind_append_unwinder): New function.
	(frame_unwind_find_by_frame): Take this frame.  Only use sniffers
	from unwinders.  Use frame_prepare_for_sniffer.
	(default_frame_sniffer, frame_unwind_got_optimized)
	(frame_unwind_got_register, frame_unwind_got_memory)
	(frame_unwind_got_constant, frame_unwind_got_address): New functions.
	* dummy-frame.c (dummy_frame_sniffer): Use gdbarch_dummy_id.
	(dummy_frame_prev_register, dummy_frame_this_id): Update for new
	signature.
	* gdbarch.sh: Replace unwind_dummy_id with dummy_id.
	* gdbarch.c, gdbarch.c: Regenerated.
	* frame-base.c (default_frame_base_address)
	(default_frame_locals_address, default_frame_args_address): Update
	for new signature.
	(frame_base_find_by_frame): Pass this frame to unwinder routines.
	* infcall.c (call_function_by_hand): Update comments.
	* Makefile.in (frame-unwind.o): Update dependencies.

	* gdbint.texinfo (Stack Frames): New chapter.
	(Algorithms): Move Frames text to the new chapter.
	(Target Conditionals): Delete SAVE_DUMMY_FRAME_TOS.  Document
	gdbarch_dummy_id instead of gdbarch_unwind_dummy_id.
@
text
@d233 2
d357 2
d438 2
d599 2
d996 6
d2998 34
@


1.422
log
@doc/ChangeLog:
--------------

	* gdb.texinfo (Set SH Calling convention): New @@item.
	(Show SH Calling convention): Ditto.

ChangeLog:
----------

	* NEWS: Add information on calling convention and new SH CLI options.

	* sh-tdep.c (sh_cc_gcc): New static string.
	(sh_cc_renesas): Ditto.
	(sh_cc_enum): New static string array.
	(sh_active_calling_convention): New static string pointer denoting
	active user chosen ABI.
	(sh_is_renesas_calling_convention): New function to return function
	specific ABI, or user choice if necessary.
	(sh_use_struct_convention): Rename first argument and turn around its
	meaning.  Check for renesas ABI and return accordingly.
	(sh_use_struct_convention_nofpu): New function.
	(sh_next_flt_argreg): Get function type as third parameter.  Check
	for renesas ABI and choose floating registers accordingly.
	(sh_push_dummy_call_fpu): Check for ABI and choose argument slot and
	struct return slot accordingly.
	(sh_push_dummy_call_nofpu): Ditto.
	(sh_return_value_nofpu): Call sh_use_struct_convention_nofpu from here.
	Evaluate ABI and give to sh_use_struct_convention_nofpu.
	(sh_return_value_fpu):  Evaluate ABI and give to
	sh_use_struct_convention.
	(show_sh_command): New function.
	(set_sh_command): Ditto.
	(_initialize_sh_tdep): Initialize `set/show sh calling-convention
	CLI command.

	* gdbarch.sh (return_value): Add func_type argument.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Ditto.
	* eval.c (evaluate_subexp_standard): Rename local variable value_type to
	val_type so as not to collide with value_type function.  Call
	using_struct_return with additional function type argument.
	* infcall.c (call_function_by_hand): Call using_struct_return and
	gdbarch_return_value with additional function type argument.
	* infcmd.c (print_return_value): Take addition func_type argument.
	Call gdbarch_return_value with additional function type argument.
	(finish_command_continuation): Call print_return_value with additional
	function type argument.
	(finish_command): Ditto.
	* sparc-tdep.c (sparc32_push_dummy_code): Call using_struct_return with
	additional function type argument.
	* stack.c (return_command): Call using_struct_return and
	gdbarch_return_value with additional function type argument.
	* value.c (using_struct_return): Take additional function type argument.
	* value.h (using_struct_return): Accommodate declaration.
	* alpha-tdep.c (alpha_return_value): Add func_type argument.
	* amd64-tdep.c (amd64_return_value): Ditto.
	* arm-tdep.c (arm_return_value): Ditto.
	* avr-tdep.c (avr_return_value): Ditto.
	* cris-tdep.c (cris_return_value): Ditto.
	* frv-tdep.c (frv_return_value): Ditto.
	* h8300-tdep.c (h8300_return_value): Ditto.
	(h8300h_return_value): Ditto.
	* hppa-tdep.c (hppa32_return_value): Ditto.
	(hppa64_return_value): Ditto.
	* i386-tdep.c (i386_return_value): Ditto.
	* ia64-tdep.c (ia64_return_value): Ditto.
	* iq2000-tdep.c (iq2000_return_value): Ditto.
	* m32c-tdep.c (m32c_return_value): Ditto.
	* m32r-tdep.c (m32r_return_value): Ditto.
	* m68hc11-tdep.c (m68hc11_return_value): Ditto.
	* m68k-tdep.c (m68k_return_value): Ditto.
	(m68k_svr4_return_value): Ditto.
	* m88k-tdep.c  (m88k_return_value): Ditto.
	* mep-tdep.c (mep_return_value): Ditto.
	* mips-tdep.c (mips_eabi_return_value): Ditto.
	(mips_n32n64_return_value): Ditto.
	(mips_o32_return_value): Ditto.
	(mips_o64_return_value): Ditto.
	* mn10300-tdep.c (mn10300_return_value): Ditto.
	* mt-tdep.c (mt_return_value): Ditto.
	* ppc-linux-tdep.c (ppc_linux_return_value): Ditto.
	* ppc-sysv-tdep.c (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppc-tdep.h (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppcnbsd-tdep.c (ppcnbsd_return_value): Ditto.
	* rs6000-tdep.c (rs6000_return_value): Ditto.
	* s390-tdep.c (s390_return_value): Ditto.
	* score-tdep.c (score_return_value): Ditto.
	* sh-tdep.c (sh_return_value_nofpu): Ditto.
	(sh_return_value_fpu): Ditto.
	* sh64-tdep.c (sh64_return_value): Ditto.
	* sparc-tdep.c (sparc32_return_value): Ditto.
	* sparc64-tdep.c (sparc64_return_value): Ditto.
	* spu-tdep.c (spu_return_value): Ditto.
	* v850-tdep.c (v850_return_value): Ditto.
	* vax-tdep.c (vax_return_value): Ditto.
	* xstormy16-tdep.c (xstormy16_return_value): Ditto.
	* xtensa-tdep.c (xtensa_return_value): Ditto.

	* gdbtypes.h (struct type): Add calling_convention member.
	* dwarf2read.c (read_subroutine_type): Add calling convention read
	from DW_AT_calling_convention attribute to function type.
@
text
@d165 1
a165 1
  gdbarch_unwind_dummy_id_ftype *unwind_dummy_id;
d287 1
a287 1
  0,  /* unwind_dummy_id */
d525 1
a525 1
  /* Skip verify of unwind_dummy_id, has predicate */
d718 6
a987 6
                      "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                      gdbarch_unwind_dummy_id_p (gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_dummy_id = <0x%lx>\n",
                      (long) gdbarch->unwind_dummy_id);
  fprintf_unfiltered (file,
d1649 1
a1649 1
gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch)
d1652 1
a1652 1
  return gdbarch->unwind_dummy_id != NULL;
d1656 1
a1656 1
gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info)
d1659 1
a1659 1
  gdb_assert (gdbarch->unwind_dummy_id != NULL);
d1661 2
a1662 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_dummy_id called\n");
  return gdbarch->unwind_dummy_id (gdbarch, info);
d1666 2
a1667 2
set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch,
                             gdbarch_unwind_dummy_id_ftype unwind_dummy_id)
d1669 1
a1669 1
  gdbarch->unwind_dummy_id = unwind_dummy_id;
@


1.421
log
@
	* gdbarch.sh (memory_insert_breakpoint, memory_remove_breakpoint): Add
	gdbarch as parameter.

	* gdbarch.{c,h}: Regenerate.

	* ppc-tdep.h (ppc_linux_memory_remove_breakpoint): Add gdbarch as
	parameter.
	* mem-break.c (default_memory_insert_breakpoint)
	(default_memory_remove_breakpoint): Likewise.
	* target.h (default_memory_remove_breakpoint)
	(default_memory_insert_breakpoint): Likewise.

	* ppc-linux-tdep.c (ppc_linux_memory_remove_breakpoint): Add gdbarch as
	parameter. Replace current_gdbarch by gdbarch.
	* m32r-tdep.c (m32r_memory_insert_breakpoint)
	(m32r_memory_remove_breakpoint): Likewise.
@
text
@d2044 1
a2044 1
gdbarch_return_value (struct gdbarch *gdbarch, struct type *valtype, struct regcache *regcache, gdb_byte *readbuf, const gdb_byte *writebuf)
d2050 1
a2050 1
  return gdbarch->return_value (gdbarch, valtype, regcache, readbuf, writebuf);
@


1.420
log
@	* gdbarch.sh (function_list): Add new property bits_big_endian to
	gdbarch structure.
	* gdbarch.{c,h}: Regenerate.

	* value.c (struct value): Replace BITS_BIG_ENDIAN by
	gdbarch_bits_big_endian (comment).
	(unpack_field_as_long, modify_field): Likewise.
	* value.h: Likewise (comment).
	* valops.c (value_slice): Likewise.
	* valarith.c (value_subscript, value_bit_index): Likewise.
	* gdbtypes.h (field): Likewise (comment).
	* eval.c (evaluate_subexp_standard): Likewise.
	* dwarf2read.c (dwarf2_add_field): Likewise.
	* ada-lang.c (decode_packed_array, ada_value_primitive_packed_val)
	(move_bits, ada_value_assign, value_assign_to_component): Likewise.

	* defs.h (BITS_BIG_ENDIAN): Remove.



	* gdbint.texinfo (Target Conditionals): Replace the description of
	BITS_BIG_ENDIAN with a description of gdbarch_bits_big_endian.
@
text
@d312 2
a313 2
  0,  /* memory_insert_breakpoint */
  0,  /* memory_remove_breakpoint */
d2142 1
a2142 1
  return gdbarch->memory_insert_breakpoint (bp_tgt);
d2159 1
a2159 1
  return gdbarch->memory_remove_breakpoint (bp_tgt);
@


1.419
log
@
	* gdbarch.sh (skip_prologue): Add gdbarch
	as parameter.
	* gdbarch.{c,h}: Regenerate.

	* alpha-tdep.c (alpha_skip_prologue): Add gdbarch as parameter.
	* amd64-tdep.c (amd64_skip_prologue): Likewise.
	* avr-tdep.c (avr_skip_prologue): Likewise.
	* cris-tdep.c (cris_skip_prologue): Likewise.
	* frv-tdep.c (frv_skip_prologue): Likewise.
	* h8300-tdep.c (h8300_skip_prologue): Likewise.
	* hppa-tdep.c (hppa_skip_prologue): Likewise.
	* i386-tdep.c (i386_skip_prologue): Likewise.
	* ia64-tdep.c (ia64_skip_prologue): Likewise.
	* iq2000-tdep.c (iq2000_skip_prologue): Likewise.
	* m32r-tdep.c (m32r_skip_prologue): Likewise.
	* m68hc11-tdep.c (m68hc11_skip_prologue): Likewise.
	* m68k-tdep.c (m68k_skip_prologue): Likewise.
	* m88k-tdep.c (m88k_skip_prologue): Likewise.
	* mep-tdep.c (mep_skip_prologue): Likewise.
	* mips-tdep.c (mips_skip_prologue): Likewise.
	* mn10300-tdep.c (mn10300_skip_prologue): Likewise.
	* mt-tdep.c (mt_skip_prologue): Likewise.
	* rs6000-tdep.c (rs6000_skip_prologue): Likewise.
	* score-tdep.c (score_skip_prologue): Likewise.
	* sh64-tdep.c (sh64_skip_prologue): Likewise.
	* sh-tdep.c (sh_skip_prologue): Likewise.
	* sparc64-tdep.c (sparc64_skip_prologue): Likewise.
	* sparc-tdep.c (sparc32_skip_prologue): Likewise.
	* spu-tdep.c (spu_skip_prologue): Likewise.
	* v850-tdep.c (v850_skip_prologue): Likewise.
	* vax-tdep.c (vax_skip_prologue): Likewise.
	* xstormy16-tdep.c (xstormy16_skip_prologue): Likewise.
	* xtensa-tdep.c (xtensa_skip_prologue): Likewise.

	* arm-tdep.c (arm_skip_prologue): Add gdbarch as parameter. Replace
	current_gdbarch by gdbarch.
	* m32c-tdep.c (m32c_skip_prologue): Likewise.
	* s390-tdep.c (s390_skip_prologue): Likewise.
@
text
@d133 1
d255 1
d387 1
d486 1
d655 3
d1070 17
@


1.418
log
@	* gdbarch.sh (stab_reg_to_regnum, dwarf_reg_to_regnum)
	( dwarf2_reg_to_regnum, sdb_reg_to_regnum, ecoff_reg_to_regnum): Add
	gdbarch as parameter.
	* gdbarch.{c,h}: Regenerate.

	* xtensa-tdep.c (xtensa_reg_to_regnum): Add gdbarch as parameter.
	Replace current_gdbarch by gdbarch.
	* s390-tdep.c (s390_dwarf_reg_to_regnum): Likewise.
	* rs6000-tdep.c (rs6000_stab_reg_to_regnum)
	(rs6000_dwarf2_reg_to_regnum): Likewise.
	* mips-tdep.c (mips_stab_reg_to_regnum)
	(mips_dwarf_dwarf2_ecoff_reg_to_regnum): Likewise.
	* mep-tdep.c (mep_debug_reg_to_regnum): Likewise.
	* m32c-tdep.c (m32c_debug_info_reg_to_regnum): Likewise.
	* i386-tdep.c (i386_dbx_reg_to_regnum)
	(i386_svr4_reg_to_regnum): Likewise
	* h8300-tdep.c (h8300s_dbg_reg_to_regnum)
	(h8300_dbg_reg_to_regnum): Likewise.
	* amd64-tdep.c (amd64_dwarf_reg_to_regnum): Likewise.
	* arch-utils.c (no_op_reg_to_regnum): Likewise.
	* arch-utils.h (no_op_reg_to_regnum): Likewise.
	* arm-tdep.c (arm_dwarf_reg_to_regnum): Likewise.
	* cris-tdep.c (cris_dwarf2_reg_to_regnum): Likewise.
	* hppa-tdep.c (hppa64_dwarf_reg_to_regnum): Likewise.
	* ia64-tdep.c (ia64_dwarf_reg_to_regnum): Likewise.
	* m68k-tdep.c (m68k_dwarf_reg_to_regnum): Likewise.
@
text
@d2043 1
a2043 1
  return gdbarch->skip_prologue (ip);
@


1.417
log
@2007-11-19  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (register_sim_regno): Add gdbarch as parameter.
	* gdbarch.{c,h}: Regenerate.

	* arch-utils.h (legacy_register_sim_regno): Add gdbarch as parameter.
	* score-tdep.c (score_register_sim_regno): Likewise.
	* sim-regno.h (one2one_register_sim_regno): Likewise.

	* arch-utils.c (legacy_register_sim_regno): Add gdbarch as parameter.
	Replace current_gdbarch by gdbarch.
	* sh-tdep.c (sh_sh2a_register_sim_regno)
	(sh_dsp_register_sim_regno): Likewise.
	* rs6000-tdep.c (rs6000_register_sim_regno): Likewise.
	* mips-tdep.c (mips_register_sim_regno): Likewise.
	* m32c-tdep.c (m32c_register_sim_regno): Likewise.
	* frv-tdep.c (frv_register_sim_regno): Likewise.
	* arm-tdep.c (arm_register_sim_regno): Likewise.
	* remote-sim.c (one2one_register_sim_regno): Likewise.
@
text
@d278 5
a282 5
  0,  /* stab_reg_to_regnum */
  0,  /* ecoff_reg_to_regnum */
  0,  /* dwarf_reg_to_regnum */
  0,  /* sdb_reg_to_regnum */
  0,  /* dwarf2_reg_to_regnum */
d1505 1
a1505 1
  return gdbarch->stab_reg_to_regnum (stab_regnr);
d1522 1
a1522 1
  return gdbarch->ecoff_reg_to_regnum (ecoff_regnr);
d1539 1
a1539 1
  return gdbarch->dwarf_reg_to_regnum (dwarf_regnr);
d1556 1
a1556 1
  return gdbarch->sdb_reg_to_regnum (sdb_regnr);
d1573 1
a1573 1
  return gdbarch->dwarf2_reg_to_regnum (dwarf2_regnr);
@


1.416
log
@	* configure.ac (hostfile, targetfile): Remove.
	(GDB_XM_FILE, GDB_TM_FILE): Do not define.
	(xm_h, tm_h): Likewise.
	(DEPRECATED_TM_FILE, XM_FILE): Do not substitute into Makefile.
	* configure, config.in: Regenerate.

	* Makefile.in (xm_h, tm_h): Remove.  Update dependencies.
	(TAGS): Do not consider DEPRECATED_TM_FILE or XM_FILE.
	(clean, local-maintainer-clean): Do not remove xm.h or tm.h.
	* defs.h: Do not include "xm.h" or "tm.h".

	* gdbarch.sh (verify_gdbarch): Do not dump GDB_XM_FILE or GDB_TM_FILE.
	* gdbarch.c: Regenerate.

	* config/score/embed.mt: Remove obsolete comment.
@
text
@d293 1
a293 1
  0,  /* register_sim_regno */
d1802 1
a1802 1
  return gdbarch->register_sim_regno (reg_nr);
@


1.415
log
@2007-11-16  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (cannot_fetch_register, cannot_store_register): Add gdbarch
	as parameter.
	* gdbarch.{c,h}: Regenerate.

	* alpha-tdep.c (alpha_cannot_fetch_register)
	(alpha_cannot_store_register): Add gdbarch as parameter. Replace
	current_gdbarch by gdbarch.
	* cris-tdep.c (cris_cannot_fetch_register, cris_cannot_store_register)
	(crisv32_cannot_fetch_register)
	(crisv32_cannot_store_register): Likewise.
	* arch-utils.c (cannot_register_not): Likewise.
	* arch-utils.h (cannot_register_not): Likewise.
	* hppa-tdep.c (hppa32_cannot_store_register)
	(hppa32_cannot_store_register, hppa64_cannot_store_register)
	(hppa64_cannot_fetch_register): Likewise.
	* mipsnbsd-tdep.c (mipsnbsd_cannot_fetch_register)
	(mipsnbsd_cannot_store_register): Likewise.
@
text
@a603 1
  const char *gdb_xm_file = "<not-defined>";
a604 7
  const char *gdb_tm_file = "<not-defined>";
#if defined (GDB_XM_FILE)
  gdb_xm_file = GDB_XM_FILE;
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: GDB_XM_FILE = %s\n",
                      gdb_xm_file);
a610 6
#if defined (GDB_TM_FILE)
  gdb_tm_file = GDB_TM_FILE;
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: GDB_TM_FILE = %s\n",
                      gdb_tm_file);
@


1.414
log
@2007-11-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (gdbarch_alloc): Replace current_gdbarch by gdbarch. Remove
	obsolete comment.
	(verify_gdbarch, gdbarch_dump): Likewise.
	(do_read): Update comment.
	(addr_bit, bfd_arch_info, target_desc, long_long_bit, floatformat)
	(ptr_bit, name_of_malloc): Replace current_gdbarch by gdbarch.
	* gdbarch.{c,h}: Regenerate.
@
text
@d294 2
a295 2
  0,  /* cannot_fetch_register */
  0,  /* cannot_store_register */
d1833 1
a1833 1
  return gdbarch->cannot_fetch_register (regnum);
d1850 1
a1850 1
  return gdbarch->cannot_store_register (regnum);
@


1.413
log
@	* gdbarch.sh (convert_register_p): Add gdbarch as parameter.
	* ia64-tdep.c (ia64_convert_register_p): Likewise.
	* i387-tdep.c (i387_convert_register_p): Likewise.
	* i387-tdep.h (i387_convert_register_p): Likewise.
	* alpha-tdep.c (alpha_convert_register_p): Likewise.
	* gdbarch.{c,h}: Regenerate.

	* rs6000-tdep.c (rs6000_convert_register_p): Add gdbarch as parameter.
	Replace current_gdbarch by gdbarch.
	* mips-tdep.c (mips_convert_register_p): Likewise.
	* m68k-tdep.c (m68k_convert_register_p): Likewise.
	* i386-tdep.c (i386_convert_register_p): Likewise.
@
text
@d365 1
a365 7
  /* NOTE: The new architecture variable is named ``current_gdbarch''
     so that macros such as TARGET_ARCHITECTURE, when expanded, refer to
     the current local architecture and not the previous global
     architecture.  This ensures that the new architectures initial
     values are not influenced by the previous architecture.  Once
     everything is parameterised with gdbarch, this will go away.  */
  struct gdbarch *current_gdbarch;
d371 12
a382 12
  current_gdbarch = obstack_alloc (obstack, sizeof (*current_gdbarch));
  memset (current_gdbarch, 0, sizeof (*current_gdbarch));
  current_gdbarch->obstack = obstack;

  alloc_gdbarch_data (current_gdbarch);

  current_gdbarch->tdep = tdep;

  current_gdbarch->bfd_arch_info = info->bfd_arch_info;
  current_gdbarch->byte_order = info->byte_order;
  current_gdbarch->osabi = info->osabi;
  current_gdbarch->target_desc = info->target_desc;
d385 46
a430 46
  current_gdbarch->short_bit = 2*TARGET_CHAR_BIT;
  current_gdbarch->int_bit = 4*TARGET_CHAR_BIT;
  current_gdbarch->long_bit = 4*TARGET_CHAR_BIT;
  current_gdbarch->long_long_bit = 2*current_gdbarch->long_bit;
  current_gdbarch->float_bit = 4*TARGET_CHAR_BIT;
  current_gdbarch->double_bit = 8*TARGET_CHAR_BIT;
  current_gdbarch->long_double_bit = 8*TARGET_CHAR_BIT;
  current_gdbarch->ptr_bit = current_gdbarch->int_bit;
  current_gdbarch->char_signed = -1;
  current_gdbarch->virtual_frame_pointer = legacy_virtual_frame_pointer;
  current_gdbarch->num_regs = -1;
  current_gdbarch->sp_regnum = -1;
  current_gdbarch->pc_regnum = -1;
  current_gdbarch->ps_regnum = -1;
  current_gdbarch->fp0_regnum = -1;
  current_gdbarch->stab_reg_to_regnum = no_op_reg_to_regnum;
  current_gdbarch->ecoff_reg_to_regnum = no_op_reg_to_regnum;
  current_gdbarch->dwarf_reg_to_regnum = no_op_reg_to_regnum;
  current_gdbarch->sdb_reg_to_regnum = no_op_reg_to_regnum;
  current_gdbarch->dwarf2_reg_to_regnum = no_op_reg_to_regnum;
  current_gdbarch->deprecated_fp_regnum = -1;
  current_gdbarch->call_dummy_location = AT_ENTRY_POINT;
  current_gdbarch->print_registers_info = default_print_registers_info;
  current_gdbarch->register_sim_regno = legacy_register_sim_regno;
  current_gdbarch->cannot_fetch_register = cannot_register_not;
  current_gdbarch->cannot_store_register = cannot_register_not;
  current_gdbarch->convert_register_p = generic_convert_register_p;
  current_gdbarch->value_from_register = default_value_from_register;
  current_gdbarch->pointer_to_address = unsigned_pointer_to_address;
  current_gdbarch->address_to_pointer = unsigned_address_to_pointer;
  current_gdbarch->memory_insert_breakpoint = default_memory_insert_breakpoint;
  current_gdbarch->memory_remove_breakpoint = default_memory_remove_breakpoint;
  current_gdbarch->remote_register_number = default_remote_register_number;
  current_gdbarch->stabs_argument_has_addr = default_stabs_argument_has_addr;
  current_gdbarch->convert_from_func_ptr_addr = convert_from_func_ptr_addr_identity;
  current_gdbarch->addr_bits_remove = core_addr_identity;
  current_gdbarch->smash_text_address = core_addr_identity;
  current_gdbarch->skip_trampoline_code = generic_skip_trampoline_code;
  current_gdbarch->skip_solib_resolver = generic_skip_solib_resolver;
  current_gdbarch->in_solib_return_trampoline = generic_in_solib_return_trampoline;
  current_gdbarch->in_function_epilogue_p = generic_in_function_epilogue_p;
  current_gdbarch->construct_inferior_arguments = construct_inferior_arguments;
  current_gdbarch->elf_make_msymbol_special = default_elf_make_msymbol_special;
  current_gdbarch->coff_make_msymbol_special = default_coff_make_msymbol_special;
  current_gdbarch->name_of_malloc = "malloc";
  current_gdbarch->register_reggroup_p = default_register_reggroup_p;
d433 1
a433 1
  return current_gdbarch;
a467 6
/* NOTE/WARNING: The parameter is called ``current_gdbarch'' so that it
   just happens to match the global variable ``current_gdbarch''.  That
   way macros refering to that variable get the local and not the global
   version - ulgh.  Once everything is parameterised with gdbarch, this
   will go away. */

d469 1
a469 1
verify_gdbarch (struct gdbarch *current_gdbarch)
d478 1
a478 1
  if (current_gdbarch->byte_order == BFD_ENDIAN_UNKNOWN)
d480 1
a480 1
  if (current_gdbarch->bfd_arch_info == NULL)
d488 2
a489 2
  if (current_gdbarch->float_format == 0)
    current_gdbarch->float_format = floatformats_ieee_single;
d491 2
a492 2
  if (current_gdbarch->double_format == 0)
    current_gdbarch->double_format = floatformats_ieee_double;
d494 2
a495 2
  if (current_gdbarch->long_double_format == 0)
    current_gdbarch->long_double_format = floatformats_ieee_double;
d497 4
a500 4
  if (current_gdbarch->addr_bit == 0)
    current_gdbarch->addr_bit = gdbarch_ptr_bit (current_gdbarch);
  if (current_gdbarch->char_signed == -1)
    current_gdbarch->char_signed = 1;
d506 1
a506 1
  if (current_gdbarch->num_regs == -1)
d518 1
a518 1
  if (current_gdbarch->register_name == 0)
d539 1
a539 1
  if (current_gdbarch->skip_prologue == 0)
d541 1
a541 1
  if (current_gdbarch->inner_than == 0)
d543 1
a543 1
  if (current_gdbarch->breakpoint_from_pc == 0)
d563 1
a563 1
  if (current_gdbarch->print_insn == 0)
a600 6
/* NOTE/WARNING: The parameter is called ``current_gdbarch'' so that it
   just happens to match the global variable ``current_gdbarch''.  That
   way macros refering to that variable get the local and not the global
   version - ulgh.  Once everything is parameterised with gdbarch, this
   will go away. */

d602 1
a602 1
gdbarch_dump (struct gdbarch *current_gdbarch, struct ui_file *file)
d627 1
a627 1
                      paddr_d (current_gdbarch->addr_bit));
d630 1
a630 1
                      (long) current_gdbarch->addr_bits_remove);
d633 1
a633 1
                      gdbarch_address_class_name_to_type_flags_p (current_gdbarch));
d636 1
a636 1
                      (long) current_gdbarch->address_class_name_to_type_flags);
d639 1
a639 1
                      gdbarch_address_class_type_flags_p (current_gdbarch));
d642 1
a642 1
                      (long) current_gdbarch->address_class_type_flags);
d645 1
a645 1
                      gdbarch_address_class_type_flags_to_name_p (current_gdbarch));
d648 1
a648 1
                      (long) current_gdbarch->address_class_type_flags_to_name);
d651 1
a651 1
                      (long) current_gdbarch->address_to_pointer);
d654 1
a654 1
                      gdbarch_adjust_breakpoint_address_p (current_gdbarch));
d657 1
a657 1
                      (long) current_gdbarch->adjust_breakpoint_address);
d660 1
a660 1
                      paddr_d (current_gdbarch->believe_pcc_promotion));
d663 1
a663 1
                      gdbarch_bfd_arch_info (current_gdbarch)->printable_name);
d666 1
a666 1
                      (long) current_gdbarch->breakpoint_from_pc);
d669 1
a669 1
                      paddr_d (current_gdbarch->byte_order));
d672 1
a672 1
                      paddr_d (current_gdbarch->call_dummy_location));
d675 1
a675 1
                      (long) current_gdbarch->cannot_fetch_register);
d678 1
a678 1
                      paddr_d (current_gdbarch->cannot_step_breakpoint));
d681 1
a681 1
                      (long) current_gdbarch->cannot_store_register);
d684 1
a684 1
                      paddr_d (current_gdbarch->char_signed));
d687 1
a687 1
                      (long) current_gdbarch->coff_make_msymbol_special);
d690 1
a690 1
                      (long) current_gdbarch->construct_inferior_arguments);
d693 1
a693 1
                      (long) current_gdbarch->convert_from_func_ptr_addr);
d696 1
a696 1
                      (long) current_gdbarch->convert_register_p);
d699 1
a699 1
                      gdbarch_core_read_description_p (current_gdbarch));
d702 1
a702 1
                      (long) current_gdbarch->core_read_description);
d705 1
a705 1
                      gdbarch_core_xfer_shared_libraries_p (current_gdbarch));
d708 1
a708 1
                      (long) current_gdbarch->core_xfer_shared_libraries);
d711 1
a711 1
                      paddr_nz (current_gdbarch->decr_pc_after_break));
d714 1
a714 1
                      paddr_d (current_gdbarch->deprecated_fp_regnum));
d717 1
a717 1
                      paddr_nz (current_gdbarch->deprecated_function_start_offset));
d720 1
a720 1
                      paddr_d (current_gdbarch->double_bit));
d723 1
a723 1
                      pformat (current_gdbarch->double_format));
d726 1
a726 1
                      (long) current_gdbarch->dwarf2_reg_to_regnum);
d729 1
a729 1
                      (long) current_gdbarch->dwarf_reg_to_regnum);
d732 1
a732 1
                      (long) current_gdbarch->ecoff_reg_to_regnum);
d735 1
a735 1
                      (long) current_gdbarch->elf_make_msymbol_special);
d738 1
a738 1
                      gdbarch_fetch_pointer_argument_p (current_gdbarch));
d741 1
a741 1
                      (long) current_gdbarch->fetch_pointer_argument);
d744 1
a744 1
                      gdbarch_fetch_tls_load_module_address_p (current_gdbarch));
d747 1
a747 1
                      (long) current_gdbarch->fetch_tls_load_module_address);
d750 1
a750 1
                      paddr_d (current_gdbarch->float_bit));
d753 1
a753 1
                      pformat (current_gdbarch->float_format));
d756 1
a756 1
                      paddr_d (current_gdbarch->fp0_regnum));
d759 1
a759 1
                      gdbarch_frame_align_p (current_gdbarch));
d762 1
a762 1
                      (long) current_gdbarch->frame_align);
d765 1
a765 1
                      paddr_nz (current_gdbarch->frame_args_skip));
d768 1
a768 1
                      gdbarch_frame_num_args_p (current_gdbarch));
d771 1
a771 1
                      (long) current_gdbarch->frame_num_args);
d774 1
a774 1
                      paddr_d (current_gdbarch->frame_red_zone_size));
d777 1
a777 1
                      gdbarch_get_longjmp_target_p (current_gdbarch));
d780 1
a780 1
                      (long) current_gdbarch->get_longjmp_target);
d783 1
a783 1
                      paddr_d (current_gdbarch->have_nonsteppable_watchpoint));
d786 1
a786 1
                      (long) current_gdbarch->in_function_epilogue_p);
d789 1
a789 1
                      (long) current_gdbarch->in_solib_return_trampoline);
d792 1
a792 1
                      (long) current_gdbarch->inner_than);
d795 1
a795 1
                      paddr_d (current_gdbarch->int_bit));
d798 1
a798 1
                      gdbarch_integer_to_address_p (current_gdbarch));
d801 1
a801 1
                      (long) current_gdbarch->integer_to_address);
d804 1
a804 1
                      paddr_d (current_gdbarch->long_bit));
d807 1
a807 1
                      paddr_d (current_gdbarch->long_double_bit));
d810 1
a810 1
                      pformat (current_gdbarch->long_double_format));
d813 1
a813 1
                      paddr_d (current_gdbarch->long_long_bit));
d816 1
a816 1
                      (long) current_gdbarch->memory_insert_breakpoint);
d819 1
a819 1
                      (long) current_gdbarch->memory_remove_breakpoint);
d822 1
a822 1
                      current_gdbarch->name_of_malloc);
d825 1
a825 1
                      paddr_d (current_gdbarch->num_pseudo_regs));
d828 1
a828 1
                      paddr_d (current_gdbarch->num_regs));
d831 1
a831 1
                      paddr_d (current_gdbarch->osabi));
d834 1
a834 1
                      gdbarch_overlay_update_p (current_gdbarch));
d837 1
a837 1
                      (long) current_gdbarch->overlay_update);
d840 1
a840 1
                      paddr_d (current_gdbarch->pc_regnum));
d843 1
a843 1
                      (long) current_gdbarch->pointer_to_address);
d846 1
a846 1
                      gdbarch_print_float_info_p (current_gdbarch));
d849 1
a849 1
                      (long) current_gdbarch->print_float_info);
d852 1
a852 1
                      (long) current_gdbarch->print_insn);
d855 1
a855 1
                      (long) current_gdbarch->print_registers_info);
d858 1
a858 1
                      gdbarch_print_vector_info_p (current_gdbarch));
d861 1
a861 1
                      (long) current_gdbarch->print_vector_info);
d864 1
a864 1
                      paddr_d (current_gdbarch->ps_regnum));
d867 1
a867 1
                      gdbarch_pseudo_register_read_p (current_gdbarch));
d870 1
a870 1
                      (long) current_gdbarch->pseudo_register_read);
d873 1
a873 1
                      gdbarch_pseudo_register_write_p (current_gdbarch));
d876 1
a876 1
                      (long) current_gdbarch->pseudo_register_write);
d879 1
a879 1
                      paddr_d (current_gdbarch->ptr_bit));
d882 1
a882 1
                      gdbarch_push_dummy_call_p (current_gdbarch));
d885 1
a885 1
                      (long) current_gdbarch->push_dummy_call);
d888 1
a888 1
                      gdbarch_push_dummy_code_p (current_gdbarch));
d891 1
a891 1
                      (long) current_gdbarch->push_dummy_code);
d894 1
a894 1
                      gdbarch_read_pc_p (current_gdbarch));
d897 1
a897 1
                      (long) current_gdbarch->read_pc);
d900 1
a900 1
                      (long) current_gdbarch->register_name);
d903 1
a903 1
                      (long) current_gdbarch->register_reggroup_p);
d906 1
a906 1
                      (long) current_gdbarch->register_sim_regno);
d909 1
a909 1
                      (long) current_gdbarch->register_to_value);
d912 1
a912 1
                      gdbarch_register_type_p (current_gdbarch));
d915 1
a915 1
                      (long) current_gdbarch->register_type);
d918 1
a918 1
                      gdbarch_regset_from_core_section_p (current_gdbarch));
d921 1
a921 1
                      (long) current_gdbarch->regset_from_core_section);
d924 1
a924 1
                      (long) current_gdbarch->remote_register_number);
d927 1
a927 1
                      gdbarch_return_value_p (current_gdbarch));
d930 1
a930 1
                      (long) current_gdbarch->return_value);
d933 1
a933 1
                      (long) current_gdbarch->sdb_reg_to_regnum);
d936 1
a936 1
                      paddr_d (current_gdbarch->short_bit));
d939 1
a939 1
                      gdbarch_single_step_through_delay_p (current_gdbarch));
d942 1
a942 1
                      (long) current_gdbarch->single_step_through_delay);
d945 1
a945 1
                      gdbarch_skip_permanent_breakpoint_p (current_gdbarch));
d948 1
a948 1
                      (long) current_gdbarch->skip_permanent_breakpoint);
d951 1
a951 1
                      (long) current_gdbarch->skip_prologue);
d954 1
a954 1
                      (long) current_gdbarch->skip_solib_resolver);
d957 1
a957 1
                      (long) current_gdbarch->skip_trampoline_code);
d960 1
a960 1
                      (long) current_gdbarch->smash_text_address);
d963 1
a963 1
                      gdbarch_software_single_step_p (current_gdbarch));
d966 1
a966 1
                      (long) current_gdbarch->software_single_step);
d969 1
a969 1
                      paddr_d (current_gdbarch->sofun_address_maybe_missing));
d972 1
a972 1
                      paddr_d (current_gdbarch->sp_regnum));
d975 1
a975 1
                      (long) current_gdbarch->stab_reg_to_regnum);
d978 1
a978 1
                      (long) current_gdbarch->stabs_argument_has_addr);
d981 1
a981 1
                      gdbarch_static_transform_name_p (current_gdbarch));
d984 1
a984 1
                      (long) current_gdbarch->static_transform_name);
d987 1
a987 1
                      paddr_d ((long) current_gdbarch->target_desc));
d990 1
a990 1
                      gdbarch_unwind_dummy_id_p (current_gdbarch));
d993 1
a993 1
                      (long) current_gdbarch->unwind_dummy_id);
d996 1
a996 1
                      gdbarch_unwind_pc_p (current_gdbarch));
d999 1
a999 1
                      (long) current_gdbarch->unwind_pc);
d1002 1
a1002 1
                      gdbarch_unwind_sp_p (current_gdbarch));
d1005 1
a1005 1
                      (long) current_gdbarch->unwind_sp);
d1008 1
a1008 1
                      (long) current_gdbarch->value_from_register);
d1011 1
a1011 1
                      (long) current_gdbarch->value_to_register);
d1014 1
a1014 1
                      paddr_d (current_gdbarch->vbit_in_delta));
d1017 1
a1017 1
                      (long) current_gdbarch->virtual_frame_pointer);
d1020 1
a1020 1
                      paddr_d (current_gdbarch->vtable_function_descriptors));
d1023 1
a1023 1
                      gdbarch_write_pc_p (current_gdbarch));
d1026 3
a1028 3
                      (long) current_gdbarch->write_pc);
  if (current_gdbarch->dump_tdep != NULL)
    current_gdbarch->dump_tdep (current_gdbarch, file);
@


1.412
log
@2007-11-07  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (legacy_virtual_frame_pointer): Add gdbarch parameter.
	* gdbarch.{c,h}: Regenerate.
	* arch-utils.c (legacy_virtual_frame_pointer): Add gdbarch parameter.
	Replace current_gdbarch by gdbarch.
	* m32c-tdep.c (m32c_virtual_frame_pointer): Likewise.
	* mips-tdep.c (mips_virtual_frame_pointer): Likewise.
	* spu-tdep.c (spu_virtual_frame_pointer): Likewise.
@
text
@d298 1
a298 1
  0,  /* convert_register_p */
d1925 1
a1925 1
  return gdbarch->convert_register_p (regnum, type);
@


1.411
log
@*** empty log message ***
@
text
@d269 1
a269 1
  0,  /* virtual_frame_pointer */
d1369 1
a1369 1
  gdbarch->virtual_frame_pointer (pc, frame_regnum, frame_offset);
@


1.410
log
@2007-11-02  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (register_name): Add gdbarch parameter.
	* gdbarch.{c,h}: Regenerate.

	* target-descriptions.c (tdesc_register_name): Add gdbarch parameter.
	(tdesc_register_name): Replace current_gdbarch by gdbarch.
	* target-descriptions.h (tdesc_register_name): Add gdbarch parameter.

	* xstormy16-tdep.c (xstormy16_register_name): Add gdbarch parameter.
	* vax-tdep.c (vax_register_name): Add gdbarch parameter.
	* spu-tdep.c (spu_register_name): Add gdbarch parameter.
	* s390-tdep.c (s390_register_name): Add gdbarch parameter.
	* mt-tdep.c (mt_register_name): Add gdbarch parameter.
	(mt_registers_info): Replace current_gdbarch by gdbarch.
	(mt_register_reggroup_p): Add gdbarch to mt_register_name call.
	* mips-tdep.c (mips_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(mips_register_name): Add gdbarch to tdesc_register_name call.
	* mep-tdep.c (mep_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(mep_register_reggroup_p): Add gdbarch to mep_register_name call.
	* m32c-tdep.c (m32c_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	* m88k-tdep.c (m88k_register_name): Add gdbarch parameter.
	* m68k-tdep.c (m68k_register_name): Add gdbarch parameter.
	* m32r-tdep.c (m32r_register_name): Add gdbarch parameter.
	(m32r_frame_unwind_cache): Use get_frame_arch to get at the current
	architecture by frame_info.
	* iq2000-tdep.c (iq2000_register_name): Add gdbarch parameter.
	* ia64-tdep.c (ia64_register_name): Add gdbarch parameter.
	* hppa-tdep.c (hppa32_register_name, hppa64_register_name): Add gdbarch
	parameter.
	* h8300-tdep.c (h8300_register_name, h8300s_register_name)
	(h8300sx_register_name): Add gdbarch parameter.
	* cris-tdep.c (cris_register_name, crisv32_register_name): Add
	gdbarch parameter. Replace current_gdbarch by gdbarch.
	(cris_gdbarch_init): Replace current_gdbarch by gdbarch (comment).
	* avr-tdep.c (avr_register_name): Add gdbarch parameter.
	* arm-tdep.c (arm_register_name): Add gdbarch paramete
	* amd64-tdep.c (amd64_register_name): Add gdbarch parameter. Update
	caller.
	* amd64-tdep.h (amd64_register_name): Add gdbarch parameter.
	* amd64-linux-tdep.c (amd64_linux_register_name): Add gdbarch parameter.
	* alpha-tdep.c (alpha_register_name): Add gdbarch parameter.
	(alpha_cannot_fetch_register, alpha_cannot_store_register): Update call
	of alpha_register_name.
	* frv-tdep.c (frv_register_name): Add gdbarch parameter.
	* i386-tdep.c (i386_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(i386_register_type): Replace ?current_gdbarch by gdbarch.
	* i386-tdep.h (i386_register_name): Add gdbarch parameter.
	* i386-linux-tdep.c (i386_linux_register_name): Add gdbarch parameter.

	* m68hc11-tdep.c (m68hc11_register_name): Add gdbarch parameter.
	(m68hc11_register_reggroup_p): Add gdbarch to call of
	m68hc11_register_name.
	* mn10300-tdep.c (mn10300_generic_register_name, am33_register_name)
	(am33_2_register_name): Add gdbarch parameter.
	(mn10300_frame_unwind_cache): Use get_frame_arch to get at the current
	architecture by frame_info.
	(mn10300_dump_tdep): Replace current_gdbarch by gdbarch.
	* rs6000-tdep.c (rs6000_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	* score-tdep.c (score_register_name): Add gdbarch parameter.
	(score_return_value, score_push_dummy_call): Replace current_gdbarch
	by gdbarch.
	* sh64-tdep.c (sh64_register_name): Add gdbarch parameter.
	(sh64_compact_reg_base_num, sh64_register_convert_to_virtual)
	(sh64_register_convert_to_raw, sh64_fv_reg_base_num)
	(sh64_dr_reg_base_num, sh64_fpp_reg_base_num): Add gdbarch parameter
	and update caller. Replace current_gdbarch by gdbarch.
	(sh64_extract_return_value, sh64_store_return_value): Use
	get_regcache_arch to get at the current architecture by regcache.
	* sh-tdep.c (sh_sh_register_name, sh_sh3_register_name)
	(sh_sh3e_register_name, sh_sh2e_register_name, sh_sh2a_register_name)
	(sh_sh2a_nofpu_register_name, sh_sh_dsp_register_name)
	(sh_sh3_dsp_register_name, sh_sh4_register_name)
	(sh_sh4_nofpu_register_name, sh_sh4al_dsp_register_name): Add gdbarch
	parameter.
	(fv_reg_base_num, dr_reg_base_num, sh_justify_value_in_reg)
	(sh_next_flt_argreg): Add gdbarch parameter and update caller. Replace
	current_gdbarch by gdbarch.
	(sh_extract_return_value_fpu, sh_store_return_value_fpu): Use
	get_regcache_arch to get at the current architecture by regcache.
	* sparc-tdep.c (sparc32_register_name): Add gdbarch parameter.
	* sparc64-tdep.c (sparc64_register_name): Add gdbarch parameter.
	* v850-tdep.c (v850_register_name, v850e_register_name): Add gdbarch
	parameter.
	(v850_unwind_sp, v850_unwind_pc): Replace current_gdbarch by gdbarch.
	* xtensa-tdep.c (xtensa_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(xtensa_pseudo_register_read, xtensa_pseudo_register_write)
	(xtensa_frame_prev_register): Add gdbarch parameter to
	xtensa_register_name call.
@
text
@d2109 1
a2109 1
  return gdbarch->breakpoint_from_pc (pcptr, lenptr);
@


1.409
log
@
	* gdbarch.sh (sofun_address_maybe_missing): New gdbarch variable.
	* gdbarch.c, gdbarch.h: Regenerate.
	* dbxread.c (find_stab_function_addr): Define unconditionally.
	(read_dbx_symtab): Use gdbarch_sofun_address_maybe_missing
	instead of SOFUN_ADDRESS_MAYBE_MISSING.
	(end_psymtab): Likewise.
	(process_one_symbol): Likewise.
	* mdebugread.c (parse_partial_symbols): Likewise.

	* symtab.h (struct minimal_symbol): Always define "filename" member.
	* elfread.c (elf_symtab_read): Use msym->filename unconditionally.
	* minsyms.c (lookup_minimal_symbol): Likewise.
	* symmisc.c (dump_msymbols): Likewise.

	* config/i386/i386sol2.mt (DEPRECATED_TM_FILE): Remove.
	* config/i386/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/i386/tm-i386sol2.h: Remove file.
	* config/i386/tm-linux.h: Remove file.
	* i386-linux-tdep.c (i386_linux_init_abi): Add call to
	set_gdbarch_sofun_address_maybe_missing.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Likewise.

	* config/powerpc/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/nbsd.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/obsd.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/ppc-eabi.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/ppc-sim.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/tm-ppc-eabi.h: Remove file.
	* rs6000-tdep.c (rs6000_gdbarch_init): Add call to
	set_gdbarch_sofun_address_maybe_missing.

	* config/sparc/sol2-64.mt (DEPRECATED_TM_FILE): Remove.
	* config/sparc/sol2.mt (DEPRECATED_TM_FILE): Remove.
	* config/sparc/tm-sol2.h: Remove file.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Add call to
	set_gdbarch_sofun_address_maybe_missing.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Likewise.

doc/ChangeLog:

	* gdbarch.texi (Target Conditionals): Remove documentation of
	SOFUN_ADDRESS_MAYBE_MISSING, replaced by ...
	(Compiler Characteristics): ... documentation of
	set_gdbarch_sofun_address_maybe_missing.
@
text
@d530 2
d1622 1
a1622 1
  return gdbarch->register_name (regnr);
@


1.408
log
@	* gdbarch.sh (static_transform_name): New gdbarch callback.
	* gdbarch.c, gdbarch.h: Regenerate.
	* dbxread.c (read_dbx_symtab): Use gdbarch_static_transform_name
	instead of STATIC_TRANSFORM_NAME.
	* mdebugread.c (parse_partial_symbols): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* xcoffread.c (scan_xcoff_symtab): Likewise.

	* config/i368/tm-i386sol2.h (STATIC_TRANSFORM_NAME): Remove.
	(IS_STATIC_TRANSFORM_NAME): Remove.
	* i386-tdep.c (sunpro_static_transform_name): Remove, move to ...
	* i386-sol2-tdep.c (i386_sol2_static_transform_name): ... here.
	(i386_sol2_init_abi): Install it.

	* config/sparc/tm-sol2.h (STATIC_TRANSFORM_NAME): Remove.
	(IS_STATIC_TRANSFORM_NAME): Remove.
	* sparc-tdep.c (sparc_stabs_unglobalize_name): Remove, move to ...
	* sparc-sol2-tdep.c (sparc_sol2_static_transform_name): ... here.
	(sparc32_sol2_init_abi): Install it.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Likewise.
	* sparc-tdep.h (sparc_sol2_static_transform_name): Add prototype.
@
text
@d231 1
d352 1
d598 1
d984 3
d2973 17
@


1.407
log
@	* gdbarch.sh (deprecated_use_struct_convention): Remove.
	(extract_return_value, store_return_value): Remove.
	(return_value): Remove default implementation.
	* gdbarch.c, gdbarch.h: Regenerate.

	* stack.c (return_command): Remove compatibility hack.
	* arch-utils.c (legacy_return_value): Remove.
	* arch-utils.h (legacy_return_value): Likewise.

	* arch-utils.c (always_use_struct_convention): Remove.
	* arch-utils.h (always_use_struct_convention): Likewise.
	* value.c (generic_use_struct_convention): Remove.
	* defs.h (generic_use_struct_convention): Likewise.

doc/ChangeLog:

	* gdbint.texi (Target Conditionals): Remove documentation
	of and references to DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS,
	gdbarch_extract_return_value, and gdbarch_store_return_value.
@
text
@d230 1
d350 1
d595 1
d990 6
d2943 24
@


1.406
log
@	* block.h (struct block): Remove "gcc_compile_flag" member.
	(BLOCK_GCC_COMPILED): Remove.
	* block.c (allocate_block): Do not clear BLOCK_GCC_COMPILED.
	* buildsym.c (finish_block): Do not set it.
	* symmisc.c (dump_symtab_1): Do not dump it.

	* value.h (using_struct_return): Remove "gcc_p" argument.
	* value.c (using_struct_return): Likewise.
	* eval.c (evaluate_subexp_standard): Adapt callers.
	* infcall.c (call_function_by_hand): Likewise.
	* stack.c (return_command): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.

	* gdbarch.sh (push_dummy_code): Remove "using_gcc" parameter.
	* gdbarch.c, gdbarch.h: Regenerate.
	* cris-tdep.c (cris_push_dummy_code): Adapt prototype.
	* hppa-hpux-tdep.c (hppa_hpux_push_dummy_code): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.
	* infcall.c (generic_push_dummy_code, push_dummy_code): Likewise.
	(push_dummy_code, call_function_by_hand): Adapt callers.
@
text
@a184 3
  gdbarch_extract_return_value_ftype *extract_return_value;
  gdbarch_store_return_value_ftype *store_return_value;
  gdbarch_deprecated_use_struct_convention_ftype *deprecated_use_struct_convention;
a303 3
  0,  /* extract_return_value */
  0,  /* store_return_value */
  0,  /* deprecated_use_struct_convention */
a416 2
  current_gdbarch->return_value = legacy_return_value;
  current_gdbarch->deprecated_use_struct_convention = generic_use_struct_convention;
a544 1
  /* Skip verify of deprecated_use_struct_convention, invalid_p == 0 */
a728 3
                      "gdbarch_dump: deprecated_use_struct_convention = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_use_struct_convention);
  fprintf_unfiltered (file,
a746 3
                      "gdbarch_dump: extract_return_value = <0x%lx>\n",
                      (long) current_gdbarch->extract_return_value);
  fprintf_unfiltered (file,
a986 3
                      "gdbarch_dump: store_return_value = <0x%lx>\n",
                      (long) current_gdbarch->store_return_value);
  fprintf_unfiltered (file,
d2031 1
a2031 1
  return gdbarch->return_value != legacy_return_value;
a2038 1
  /* Do not check predicate: gdbarch->return_value != legacy_return_value, allow call.  */
a2050 51
void
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, gdb_byte *valbuf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->extract_return_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_return_value called\n");
  gdbarch->extract_return_value (type, regcache, valbuf);
}

void
set_gdbarch_extract_return_value (struct gdbarch *gdbarch,
                                  gdbarch_extract_return_value_ftype extract_return_value)
{
  gdbarch->extract_return_value = extract_return_value;
}

void
gdbarch_store_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, const gdb_byte *valbuf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->store_return_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_store_return_value called\n");
  gdbarch->store_return_value (type, regcache, valbuf);
}

void
set_gdbarch_store_return_value (struct gdbarch *gdbarch,
                                gdbarch_store_return_value_ftype store_return_value)
{
  gdbarch->store_return_value = store_return_value;
}

int
gdbarch_deprecated_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_use_struct_convention != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_use_struct_convention called\n");
  return gdbarch->deprecated_use_struct_convention (gcc_p, value_type);
}

void
set_gdbarch_deprecated_use_struct_convention (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_use_struct_convention_ftype deprecated_use_struct_convention)
{
  gdbarch->deprecated_use_struct_convention = deprecated_use_struct_convention;
}

@


1.405
log
@	* cris-tdep.c (cris_push_dummy_call): Support arguments passed by
	reference.  Fix endianness bugs.
	(cris_reg_struct_has_address): Remove.
	(cris_gdbarch_init): Remove set_gdbarch_deprecated_reg_struct_has_addr
	and set_gdbarch_deprecated_use_struct_convention calls.

	* gdbarch.sh (deprecated_reg_struct_has_addr): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* infcall.c (call_function_by_hand): Remove handling of
	deprecated_reg_struct_has_addr.

doc/ChangeLog:

	* gdbint.texi (Target Conditionals): Remove documentation of
	and references to DEPRECATED_REG_STRUCT_HAS_ADDR.
@
text
@d1747 1
a1747 1
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr, struct regcache *regcache)
d1753 1
a1753 1
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, using_gcc, args, nargs, value_type, real_pc, bp_addr, regcache);
@


1.404
log
@	* arch-utils.c (gdbarch_info_fill): Also try core_bfd.
	* corelow.c (core_read_description): New.
	(init_core_ops): Set to_read_description.
	* gdbarch.sh: Add gdbarch_core_read_description.
	* mips-linux-tdep.c (mips_linux_core_read_description): New.
	(mips_linux_init_abi): Call set_gdbarch_core_read_description.
	* mips-tdep.c (mips_tdesc_gp32, mips_tdesc_gp64): New.
	(mips_register_g_packet_guesses): Use them.
	(_initialize_mips_tdep): Initialize them.
	* mips-tdep.h (mips_tdesc_gp32, mips_tdesc_gp64): Declare.
	* gdbarch.h, gdbarch.c: Regenerated.
@
text
@a202 1
  gdbarch_deprecated_reg_struct_has_addr_ftype *deprecated_reg_struct_has_addr;
a324 1
  0,  /* deprecated_reg_struct_has_addr */
a571 1
  /* Skip verify of deprecated_reg_struct_has_addr, has predicate */
a737 6
                      "gdbarch_dump: gdbarch_deprecated_reg_struct_has_addr_p() = %d\n",
                      gdbarch_deprecated_reg_struct_has_addr_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_reg_struct_has_addr = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_reg_struct_has_addr);
  fprintf_unfiltered (file,
a2418 24
gdbarch_deprecated_reg_struct_has_addr_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_reg_struct_has_addr != NULL;
}

int
gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch, int gcc_p, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_reg_struct_has_addr != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_reg_struct_has_addr called\n");
  return gdbarch->deprecated_reg_struct_has_addr (gcc_p, type);
}

void
set_gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_reg_struct_has_addr_ftype deprecated_reg_struct_has_addr)
{
  gdbarch->deprecated_reg_struct_has_addr = deprecated_reg_struct_has_addr;
}

int
@


1.403
log
@	* gdbarch.sh (core_xfer_shared_libraries): New.

	* corelow.c (core_xfer_partial): Handle TARGET_OBJECT_LIBRARIES.

	* gdb_obstack.h (obstack_grow_str, obstack_grow_str0): New.

	* xml-support.c (gdb_xml_parse): Debug output tweaks.
	(xml_escape_text): New.
	* xml-support.h (xml_escape_text): Declare.

	* config/i386/cygwin.mh (NATDEPFILES): Move corelow.o to ...
	* config/i386/cygwin.mt (TDEPFILES): ... here.

	* win32-nat.c: (fetch_elf_core_registers): Delete.
	(win32_elf_core_fn): Delete.
	(_initialize_core_win32): Delete.

	* i386-cygwin-tdep.c: Include "regset.h", "gdb_objstack.h",
	"xml-support.h" and "gdbcore.h".
	(i386_win32_gregset_reg_offset): New.
	(I386_WIN32_SIZEOF_GREGSET): New.
	(i386_win32_regset_from_core_section): New.
	(win32_xfer_shared_library): New.
	(struct cpms_data): New.
	(core_process_module_section): New.
	(win32_core_xfer_shared_libraries): New.
	(i386_cygwin_skip_trampoline_code): Register gregset_reg_offset,
	gregset_num_regs, sizeof_gregset members of tdep.  Register
	regset_from_core_section and core_xfer_shared_libraries callbacks.

	* Makefile.in (i386-cygwin-tdep.o): Update dependencies.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d233 1
d356 1
d604 1
d720 6
d3013 24
@


1.402
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d5 1
a5 1
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
d14 1
a14 1

d19 1
a19 1

d228 1
d350 1
d597 1
d717 6
d2899 24
@


1.401
log
@	* infrun.c (adjust_pc_after_break): Do not assume software single-step
	is always active if SOFTWARE_SINGLE_STEP_P is true.
	(resume): Use gdbarch_software_single_step[_p] instead of
	SOFTWARE_SINGLE_STEP[_P].
	(handle_inferior_event): Do not check for SOFTWARE_SINGLE_STEP_P.

	* gdbarch.sh (software_single_step): Remove target macro.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d12 1
a12 1
   the Free Software Foundation; either version 2 of the License, or
d21 1
a21 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.400
log
@	* gdbarch.sh (gdbarch_swap_ftype, deprecated_register_gdbarch_swap,
	DEPRECATED_REGISTER_GDBARCH_SWAP): Remove.
	(struct gdbarch_swap, struct gdbarch_swap_registration,
	struct gdbarch_swap_registry, gdbarch_swap_registry,
	current_gdbarch_swap_init_hack, current_gdbarch_swap_out_hack,
	current_gdbarch_swap_in_hack): Remove.
	(find_arch_by_info): Do not call current_gdbarch_swap_init_hack.
	(gdbarch_find_by_info): Do not call current_gdbarch_swap_in_hack
	and current_gdbarch_swap_out_hack, update current_gdbarch directly.
	(deprecated_current_gdbarch_select_hack): Likewise.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@a978 6
#ifdef SOFTWARE_SINGLE_STEP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SOFTWARE_SINGLE_STEP_P()",
                      XSTRING (SOFTWARE_SINGLE_STEP_P ()));
#endif
a981 6
#ifdef SOFTWARE_SINGLE_STEP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SOFTWARE_SINGLE_STEP(frame)",
                      XSTRING (SOFTWARE_SINGLE_STEP (frame)));
#endif
@


1.399
log
@2007-06-19  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_PRINT_INSN): Replace by gdbarch_print_insn.
	* disasm.c (dump_insns, gdb_print_insn): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a3108 101

/* Keep a registry of swapped data required by GDB modules. */

struct gdbarch_swap
{
  void *swap;
  struct gdbarch_swap_registration *source;
  struct gdbarch_swap *next;
};

struct gdbarch_swap_registration
{
  void *data;
  unsigned long sizeof_data;
  gdbarch_swap_ftype *init;
  struct gdbarch_swap_registration *next;
};

struct gdbarch_swap_registry
{
  int nr;
  struct gdbarch_swap_registration *registrations;
};

struct gdbarch_swap_registry gdbarch_swap_registry = 
{
  0, NULL,
};

void
deprecated_register_gdbarch_swap (void *data,
		                  unsigned long sizeof_data,
		                  gdbarch_swap_ftype *init)
{
  struct gdbarch_swap_registration **rego;
  for (rego = &gdbarch_swap_registry.registrations;
       (*rego) != NULL;
       rego = &(*rego)->next);
  (*rego) = XMALLOC (struct gdbarch_swap_registration);
  (*rego)->next = NULL;
  (*rego)->init = init;
  (*rego)->data = data;
  (*rego)->sizeof_data = sizeof_data;
}

static void
current_gdbarch_swap_init_hack (void)
{
  struct gdbarch_swap_registration *rego;
  struct gdbarch_swap **curr = &current_gdbarch->swap;
  for (rego = gdbarch_swap_registry.registrations;
       rego != NULL;
       rego = rego->next)
    {
      if (rego->data != NULL)
	{
	  (*curr) = GDBARCH_OBSTACK_ZALLOC (current_gdbarch,
					    struct gdbarch_swap);
	  (*curr)->source = rego;
	  (*curr)->swap = gdbarch_obstack_zalloc (current_gdbarch,
						  rego->sizeof_data);
	  (*curr)->next = NULL;
	  curr = &(*curr)->next;
	}
      if (rego->init != NULL)
	rego->init ();
    }
}

static struct gdbarch *
current_gdbarch_swap_out_hack (void)
{
  struct gdbarch *old_gdbarch = current_gdbarch;
  struct gdbarch_swap *curr;

  gdb_assert (old_gdbarch != NULL);
  for (curr = old_gdbarch->swap;
       curr != NULL;
       curr = curr->next)
    {
      memcpy (curr->swap, curr->source->data, curr->source->sizeof_data);
      memset (curr->source->data, 0, curr->source->sizeof_data);
    }
  current_gdbarch = NULL;
  return old_gdbarch;
}

static void
current_gdbarch_swap_in_hack (struct gdbarch *new_gdbarch)
{
  struct gdbarch_swap *curr;

  gdb_assert (current_gdbarch == NULL);
  for (curr = new_gdbarch->swap;
       curr != NULL;
       curr = curr->next)
    memcpy (curr->source->data, curr->swap, curr->source->sizeof_data);
  current_gdbarch = new_gdbarch;
}


a3351 7
  /* Initialize any per-architecture swap areas.  This phase requires
     a valid global CURRENT_GDBARCH.  Set it momentarially, and then
     swap the entire architecture out.  */
  current_gdbarch = new_gdbarch;
  current_gdbarch_swap_init_hack ();
  current_gdbarch_swap_out_hack ();

d3361 2
d3369 2
a3370 1
  struct gdbarch *old_gdbarch = current_gdbarch_swap_out_hack ();
d3373 1
a3373 1
  struct gdbarch *new_gdbarch = find_arch_by_info (info);
d3377 1
a3377 1
  current_gdbarch_swap_in_hack (old_gdbarch);
d3382 1
a3382 2
/* Make the specified architecture current, swapping the existing one
   out.  */
d3390 1
a3390 2
  current_gdbarch_swap_out_hack ();
  current_gdbarch_swap_in_hack (new_gdbarch);
@


1.398
log
@	* gdbarch.sh (BELIEVE_PCC_PROMOTION): Replace by
	gdbarch_believe_pcc_promotion.
	* stabsread.c (define_symbol): Likewise.
	Remove unnecessary definition.
	* coffread.c (process_coff_symbol): Remove unnecessary code.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a867 6
#ifdef TARGET_PRINT_INSN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_PRINT_INSN(vma, info)",
                      XSTRING (TARGET_PRINT_INSN (vma, info)));
#endif
@


1.397
log
@	* gdbarch.sh (deprecated_register_size): Remove.
	* gdbarch.h, gdbarch.c: Regenerate.

	* arm-tdep.c (arm_push_dummy_call): Replace DEPRECATED_REGISTER_SIZE
	by INT_REGISTER_SIZE.
	(thumb_get_next_pc, arm_return_in_memory): Likewise.
	(arm_gdbarch_init): Do not call set_gdbarch_deprecated_register_size.
	* ia64-tdep.c (ia64_gdbarch_init): Do not call
	set_gdbarch_deprecated_register_size.
@
text
@a675 5
#ifdef BELIEVE_PCC_PROMOTION
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION # %s\n",
                      XSTRING (BELIEVE_PCC_PROMOTION));
#endif
@


1.396
log
@2007-06-18  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (DEPRECATED_FP_REGNUM): Replace by
	gdbarch_deprecated_fp_regnum.
	* std-regs.c (value_of_builtin_frame_fp_reg): Likewise.
	* remote-mips.c (mips_wait, mips_fetch_registers): Likewise.
	* arch-utils.c (legacy_virtual_frame_pointer): Likewise.
	* arch-utils.h (gdbarch_virtual_frame_pointer_ftype): Likewise
	(comment).
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a168 1
  int deprecated_register_size;
a289 1
  0,  /* deprecated_register_size */
a734 8
#ifdef DEPRECATED_REGISTER_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE # %s\n",
                      XSTRING (DEPRECATED_REGISTER_SIZE));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_register_size = %s\n",
                      paddr_d (current_gdbarch->deprecated_register_size));
a1738 16
gdbarch_deprecated_register_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_size called\n");
  return gdbarch->deprecated_register_size;
}

void
set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch,
                                      int deprecated_register_size)
{
  gdbarch->deprecated_register_size = deprecated_register_size;
}

int
@


1.395
log
@2007-06-18  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (EXTRACT_RETURN_VALUE): Replace with
	gdbarch_extract_return_value.
	* value.c (generic_use_struct_convention): Likewise (comment).
	* ia64-tdep.c (ia64_use_struct_convention): Likewise (comment).
	* arch-utils.c (legacy_return_value): Likewise.
	* arch-utils.h (legacy_return_value): Likewise (comment).
	* gdbarch.sh (STORE_RETURN_VALUE): Replace by
	gdbarch_store_return_value.
	* stack.c (return_command): Likewise (comment).
	* arch-utils.h (legacy_return_value): Likewise (comment).
	* arch-utils.c (legacy_return_value): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a724 5
#ifdef DEPRECATED_FP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FP_REGNUM # %s\n",
                      XSTRING (DEPRECATED_FP_REGNUM));
#endif
@


1.394
log
@2007-06-18  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (DEPRECATED_USE_STRUCT_CONVENTION): Replace by
	gdbarch_deprecated_use_struct_convention.
	* arch-utils.c (legacy_return_value): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a770 6
#ifdef EXTRACT_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_RETURN_VALUE(type, regcache, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regcache, valbuf)));
#endif
a1031 6
#ifdef STORE_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STORE_RETURN_VALUE(type, regcache, valbuf)",
                      XSTRING (STORE_RETURN_VALUE (type, regcache, valbuf)));
#endif
@


1.393
log
@2007-06-18  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (DEPRECATED_FUNCTION_START_OFFSET): Replace by
	gdbarch_deprecated_function_start_offset.
	* symtab.c (find_function_start_sal)skip_prologue_using_sal): Likewise.
	* linespec.c (minsym_found): Likewise.
	* infrun.c (handle_inferior_event): Likewise.
	* infcall.c (find_function_addr): Likewise.
	* cli/cli-cmds.c (disassemble_command): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a749 6
#ifdef DEPRECATED_USE_STRUCT_CONVENTION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_USE_STRUCT_CONVENTION(gcc_p, value_type)",
                      XSTRING (DEPRECATED_USE_STRUCT_CONVENTION (gcc_p, value_type)));
#endif
@


1.392
log
@2007-06-18  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (DEPRECATED_REG_STRUCT_HAS_ADDR): Replace by
	gdbarch_deprecated_reg_struct_has_addr.
	* infcall.c (call_function_by_hand): Likewise.
	(DEPRECATED_REG_STRUCT_HAS_ADDR_P): Replace by
	* gdbarch_deprecated_reg_struct_has_addr_p.
	* infcall.c (call_function_by_hand): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a732 5
#ifdef DEPRECATED_FUNCTION_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FUNCTION_START_OFFSET # %s\n",
                      XSTRING (DEPRECATED_FUNCTION_START_OFFSET));
#endif
@


1.391
log
@2007-06-18  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS): Remove.
	* sh-tdep.c (sh_extract_struct_value_address): Remove.
	(sh_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* sh64-tdep.c (sh64_extract_struct_value_address): Remove.
	(sh64_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* ia64-tdep.c (ia64_extract_struct_value_address): Remove.
	(ia64_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* frv-tdep.c (frv_extract_struct_value_address): Remove.
	(frv_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a740 6
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REG_STRUCT_HAS_ADDR_P()",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR_P ()));
#endif
a743 6
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR (gcc_p, type)));
#endif
@


1.390
log
@2007-06-18  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (SP_REGNUM): Replace by gdbarch_sp_regnum.
	* v850-tdep.c (v850_unwind_sp): Likewise.
	* std-regs.c (value_of_builtin_frame_sp_reg): Likewise.
	* stack.c (frame_info): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* sh-tdep.c (sh_push_dummy_call_fpu, sh_push_dummy_call_nofpu)
	(sh_dwarf2_frame_init_reg, sh_frame_cache, sh_frame_prev_register)
	(sh_unwind_sp): Likewise.
	* sh64-tdep.c (sh64_push_dummy_call, sh64_frame_cache)
	(sh64_frame_prev_register, sh64_unwind_sp): Likewise.
	* rs6000-tdep.c (rs6000_push_dummy_call, rs6000_unwind_dummy_id)
	(rs6000_frame_cache): Likewise.
	* rs6000-nat.c (store_register): Likewise.
	* remote-mips.c (mips_wait): Likewise.
	* procfs.c (procfs_fetch_registers, procfs_store_registers): Likewise.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call)
	(ppc64_sysv_abi_push_dummy_call): Likewise.
	* ppcobsd-tdep.c (ppcobsd_sigtramp_frame_cache): Likewise.
	* ppcobsd-nat.c (ppcobsd_supply_pcb): Likewise.
	* ppcnbsd-tdep.c (ppcnbsd_sigtramp_cache_init): Likewise.
	* ppc-linux-tdep.c (ppc_linux_sigtramp_cache): Likewise.
	* m32r-rom.c (m32r_supply_register): Likewise.
	* frame.c (frame_sp_unwind): Likewise.
	* mips-tdep.c (mips_insn16_frame_cache)
	(mips_insn32_frame_cache): Likewise (comment).
	* m68klinux-nat.c (supply_gregset): Likewise.
	* m68k-tdep.c (m68k_get_longjmp_target): Likewise.
	* ia64-tdep.c (ia64_frame_prev_register): Likewise.
	* i386-tdep.c (i386_get_longjmp_target): Likewise.
	* dwarf2-frame.c (dwarf2_frame_default_init_reg): Likewise.
	* cris-tdep.c (cris_regnums, cris_sigcontext_addr)
	(cris_sigtramp_frame_unwind_cache, cris_push_dummy_call)
	(cris_scan_prologue, crisv32_scan_prologue, cris_unwind_sp)
	(cris_register_type, crisv32_register_type)
	(cris_dwarf2_frame_init_reg): Likewise.
	* arch-utils.c (legacy_virtual_frame_pointer): Likewise.
	* amd64-tdep.c (amd64_frame_prev_register): Likewise.
	* amd64-linux-tdep.c (amd64_linux_sigcontext_addr): Likewise.
	* libunwind-frame.c (libunwind_frame_cache): Likewise.

	* gdbarch.sh (PC_REGNUM): Replace by gdbarch_pc_regnum.
	* regcache.c (read_pc_pid, generic_target_write_pc): Likewise.
	* xtensa-tdep.c (xtensa_register_type, xtensa_supply_gregset)
	(xtensa_unwind_pc, xtensa_frame_cache, xtensa_frame_prev_register)
	(xtensa_extract_return_value, xtensa_store_return_value): Likewise.
	* v850-tdep.c (v850_unwind_pc): Likewise.
	* stack.c (frame_info): Likewise.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs)
	(sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs)
	(sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs)
	(sh_dwarf2_frame_init_reg, sh_frame_prev_register, sh_unwind_pc)
	(sh_dsp_show_regs): Likewise.
	* shnbsd-tdep.c (shnbsd_supply_gregset)
	(shnbsd_collect_gregset): Likewise.
	* shnbsd-nat.c (GETREGS_SUPPLIES): Likewise.
	* sh64-tdep.c (sh64_compact_reg_base_num, sh64_show_media_regs)
	(sh64_frame_prev_register, sh64_unwind_pc): Likewise.
	* rs6000-tdep.c (ppc_supply_gregset, ppc_collect_gregset)
	(6000_register_reggroup_p, rs6000_unwind_pc)
	(rs6000_frame_cache): Likewise.
	* rs6000-nat.c (regmap, rs6000_fetch_inferior_registers)
	(rs6000_store_inferior_registers): Likewise.
	* remote-mips.c (mips_wait, mips_load): Likewise.
	* procfs.c (procfs_fetch_registers, procfs_store_registers): Likewise.
	* ppcobsd-tdep.c (ppcobsd_sigtramp_frame_cache): Likewise.
	* ppcobsd-nat.c (ppcobsd_supply_pcb): Likewise.
	* ppcnbsd-tdep.c (ppcnbsd_sigtramp_cache_init): Likewise.
	* ppcnbsd-nat.c (getregs_supplies, ppcnbsd_supply_pcb): Likewise.
	* ppc-linux-tdep.c (ppc_linux_sigtramp_cache): Likewise.
	* ppc-linux-nat.c (ppc_register_u_addr, fetch_ppc_registers)
	(store_ppc_registers, fill_gregset): Likewise.
	* mips-tdep.c (mips_stub_frame_cache, mips_gdbarch_init): Likewise.
	* mipsnbsd-tdep.c (mipsnbsd_supply_reg, mipsnbsd_fill_reg): Likewise.
	* mipsnbsd-nat.c (getregs_supplies): Likewise.
	* m68k-tdep.c (m68k_register_type, m68k_unwind_pc): Likewise.
	* m68klinux-nat.c (supply_gregset): Likewise.
	* irix5-nat.c (fill_gregset): Likewise.
	* i386-tdep.c (i386_unwind_pc): Likewise.
	* i386-linux-nat.c (i386_linux_resume): Likewise.
	* frame.c (get_prev_frame_1): Likewise.
	* dwarf2-frame.c (dwarf2_frame_default_init_reg): Likewise.
	* dbug-rom.c (dbug_supply_register): Likewise.
	* cris-tdep.c (cris_sigtramp_frame_unwind_cache, cris_scan_prologue)
	(crisv32_scan_prologue, cris_unwind_pc, cris_register_size)
	(cris_register_type, crisv32_register_type, crisv32_register_name)
	(cris_dwarf2_frame_init_reg, find_step_target)
	(cris_software_single_step, cris_supply_gregset)
	(cris_regnums): Likewise.
	* alpha-linux-nat.c (alpha_linux_register_u_offset): Likewise.
	* aix-thread.c (special_register_p, supply_sprs64, supply_sprs32)
	(fill_sprs64, fill_sprs32, store_regs_user_thread): Likewise.
	* mips-linux-tdep.c (mips_linux_write_pc): Likewise.

	* gdbarch.sh (PS_REGNUM): Replace by gdbarch_ps_regnum.
	* dbug-rom.c (dbug_supply_register): Likewise.
	* xtensa-tdep.c (xtensa_supply_gregset, xtensa_frame_cache)
	(xtensa_frame_prev_register, xtensa_push_dummy_call): Likewise.
	* win32-nat.c (win32_resume): Likewise.
	* std-regs.c (value_of_builtin_frame_ps_reg)
	(value_of_builtin_frame_pc_reg): Likewise.
	* m68k-tdep.c (m68k_register_type): Likewise.
	* m68klinux-nat.c (supply_gregset): Likewise.

	* gdbarch.sh (FP0_REGNUM): Replace by gdbarch_fp0_regnum.
	* sh-tdep.c (sh_extract_return_value_fpu, sh_store_return_value_fpu)
	(sh2e_show_regs, sh2a_show_regs, sh3e_show_regs, sh4_show_regs)
	(sh_sh2a_register_type, sh_sh3e_register_type, sh_sh4_register_type)
	(fv_reg_base_num, dr_reg_base_num): Likewise.
	* sh64-tdep.c (sh64_fv_reg_base_num, sh64_dr_reg_base_num)
	(sh64_fpp_reg_base_num, sh64_compact_reg_base_num, sh64_push_dummy_call)
	(sh64_extract_return_value, sh64_store_return_value)
	(sh64_show_media_regs, sh64_show_compact_regs, sh64_register_type)
	(sh64_do_fp_register, sh64_media_print_registers_info): Likewise.
	* procfs.c (procfs_fetch_registers, procfs_store_registers)
	(invalidate_cache): Likewise.
	* ppc-linux-tdep.c (ppc_linux_sigtramp_cache): Likewise.
	* mipsnbsd-tdep.c (mipsnbsd_supply_fpreg)
	(mipsnbsd_fill_fpreg): Likewise.
	* mipsnbsd-nat.c (mipsnbsd_fetch_inferior_registers)
	(mipsnbsd_store_inferior_registers): Likewise.
	* mips-linux-tdep.c (mips_supply_fpregset, mips_fill_fpregset)
	(mips64_supply_fpregset, mips64_fill_fpregset): Likewise.
	* mips-linux-nat.c (mips64_linux_register_addr): Likewise.
	* m68k-tdep.c (m68k_register_type, m68k_convert_register_p): Likewise.
	* m68klinux-nat.c (getfpregs_supplies, supply_fpregset)
	(fill_fpregset): Likewise.
	* irix5-nat.c (supply_fpregset, fill_fpregset): Likewise.
	* i386-tdep.h (struct_return): Likewise (comment).
	* i386-nto-tdep.c (i386nto_register_area): Likewise.
	* go32-nat.c (fetch_register, go32_fetch_registers, store_register)
	(go32_store_registers): Likewise.
	* alpha-tdep.c (alpha_next_pc): Likewise.
	* alpha-linux-nat.c (alpha_linux_register_u_offset): Likewise.
	* alphabsd-nat.c (alphabsd_fetch_inferior_registers)
	(alphabsd_store_inferior_registers): Likewise.
	* core-regset.c (fetch_core_registers): Likewise.
	* i386v4-nat.c (supply_fpregset, fill_fpregset): Likewise.

	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a190 1
  gdbarch_deprecated_extract_struct_value_address_ftype *deprecated_extract_struct_value_address;
a312 1
  0,  /* deprecated_extract_struct_value_address */
a555 1
  /* Skip verify of deprecated_extract_struct_value_address, has predicate */
a724 18
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P()",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_extract_struct_value_address_p() = %d\n",
                      gdbarch_deprecated_extract_struct_value_address_p (current_gdbarch));
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(regcache)",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (regcache)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_extract_struct_value_address = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_extract_struct_value_address);
a2202 24
int
gdbarch_deprecated_extract_struct_value_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_extract_struct_value_address != NULL;
}

CORE_ADDR
gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch, struct regcache *regcache)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_extract_struct_value_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_struct_value_address called\n");
  return gdbarch->deprecated_extract_struct_value_address (regcache);
}

void
set_gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch,
                                                     gdbarch_deprecated_extract_struct_value_address_ftype deprecated_extract_struct_value_address)
{
  gdbarch->deprecated_extract_struct_value_address = deprecated_extract_struct_value_address;
}

@


1.389
log
@	* gdbarch.sh (bfd_vma): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.

	* gdbtypes.h (builtin_bfd_vma_type): Remove.
	* gdbtypes.h (builtin_bfd_vma_type): Remove.
	(build_gdbtypes): Do not initialize it.
	(_initialize_gdbtypes): Do not swap it.
@
text
@a841 5
#ifdef FP0_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP0_REGNUM # %s\n",
                      XSTRING (FP0_REGNUM));
#endif
a925 5
#ifdef PC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: PC_REGNUM # %s\n",
                      XSTRING (PC_REGNUM));
#endif
a955 5
#ifdef PS_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: PS_REGNUM # %s\n",
                      XSTRING (PS_REGNUM));
#endif
a1072 5
#ifdef SP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: SP_REGNUM # %s\n",
                      XSTRING (SP_REGNUM));
#endif
@


1.388
log
@	* gdbarch.sh (read_pc): Add REGCACHE argument.  Remove PTID argument.
	(write_pc): Likewise.  Remove default implementation, add predicate.
	* gdbarch.c, gdbarch.h: Regenerate.
	* regcache.c (read_pc_pid): Use current regcache instead of calling
	read_register_pid.
	(write_pc_pid): Check gdbarch_write_pc predicate, implement default
	case inline.
	(generic_target_write_pc): Remove.
	* inferior.h (generic_target_write_pc): Remove.
	* frv-tdep.c (frv_gdbarch_init): Do not install it.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Likewise.
	* rs6000-tdep.c (rs6000_gdbarch_init): Likewise.
	* sh64-tdep.c (sh64_gdbarch_init): Likewise.
	* sh-tdep.c (sh_gdbarch_init): Likewise.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Likewise.

	* avr-tdep.c (avr_read_pc): Add REGCACHE argument.  Remove PTID
	argument.  Use REGCACHE instead of calling read_register_pid.
	* hppa-hpux-tdep.c (hppa_hpux_read_pc): Likewise.
	* hppa-tdep.c (hppa_read_pc): Likewise.
	* hppa-tdep.h (hppa_read_pc): Likewise.
	* ia64-tdep.c (ia64_read_pc): Likewise.
	* m32r-tdep.c (m32r_read_pc): Likewise.
	* mep-tdep.c (mep_read_pc): Likewise.
	* mn10300-tdep.c (mn10300_read_pc): Likewise.
	* spu-tdep.c (spu_read_pc): Likewise.

	* arm-tdep.c (arm_write_pc): Add REGCACHE argument.  Remove PTID
	argument.  Use REGCACHE instead of calling write_register_pid.
	* avr-tdep.c (avr_write_pc): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_write_pc): Likewise.
	* hppa-tdep.c (hppa_write_pc): Likewise.
	* hppa-tdep.h (hppa_write_pc): Likewise.
	* i386-linux-tdep.c (i386_linux_write_pc): Likewise.
	* amd64-linux-tdep.c (amd64_linux_write_pc): Likewise.
	* ia64-linux-tdep.c (ia64_linux_write_pc): Likewise.
	* ia64-tdep.c (ia64_write_pc): Likewise.
	* ia64-tdep.h (ia64_write_pc): Likewise.
	* m32r-tdep.c (m32r_write_pc): Likewise.
	* m88k-tdep.c (m88k_write_pc): Likewise.
	* mep-tdep.c (mep_write_pc): Likewise.
	* mips-tdep.c (mips_write_pc): Likewise.
	* mips-linux-tdep.c (mips_linux_write_pc): Likewise.
	* mn10300-tdep.c (mn10300_write_pc): Likewise.
	* sparc-tdep.c (sparc_write_pc): Likewise.
	* spu-tdep.c (spu_write_pc): Likewise.

	* mips-tdep.c (read_signed_register): Remove.
	(read_signed_register_pid): Likewise.
	(mips_read_pc): Add REGCACHE argument.  Remove PTID argument.
	Use REGCACHE instead of calling read_signed_register_pid.
@
text
@a146 1
  int bfd_vma_bit;
a269 1
  8 * sizeof (void*),  /* bfd_vma_bit */
a404 1
  current_gdbarch->bfd_vma_bit = gdbarch_bfd_arch_info (current_gdbarch)->bits_per_address;
a518 1
  /* Skip verify of bfd_vma_bit, invalid_p == 0 */
a692 3
                      "gdbarch_dump: bfd_vma_bit = %s\n",
                      paddr_d (current_gdbarch->bfd_vma_bit));
  fprintf_unfiltered (file,
a1404 17
gdbarch_bfd_vma_bit (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of bfd_vma_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_vma_bit called\n");
  return gdbarch->bfd_vma_bit;
}

void
set_gdbarch_bfd_vma_bit (struct gdbarch *gdbarch,
                         int bfd_vma_bit)
{
  gdbarch->bfd_vma_bit = bfd_vma_bit;
}

int
@


1.387
log
@	* gdbarch.sh (push_dummy_code): Add REGCACHE argument.
	* gdbarch.c, gdbarch.h: Regenerate.
	* infcall.c (generic_push_dummy_code): Add REGCACHE argument.
	(push_dummy_code): Likewise.  Pass it to callee.
	(call_function_by_hand): Pass current regcache to push_dummy_code.

	* hppa-hpux-tdep.c (hppa_hpux_push_dummy_code): Add REGCACHE
	argument.  Use it instead of current_regcache.

	* cris-tdep.c (cris_push_dummy_code): Add REGCACHE argument.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.
@
text
@a408 1
  current_gdbarch->write_pc = generic_target_write_pc;
d526 1
a526 1
  /* Skip verify of write_pc, invalid_p == 0 */
a1007 6
#ifdef TARGET_READ_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC_P()",
                      XSTRING (TARGET_READ_PC_P ()));
#endif
a1010 6
#ifdef TARGET_READ_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC(ptid)",
                      XSTRING (TARGET_READ_PC (ptid)));
#endif
a1153 1
#ifdef TARGET_WRITE_PC
d1155 2
a1156 4
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_PC(val, ptid)",
                      XSTRING (TARGET_WRITE_PC (val, ptid)));
#endif
d1454 1
a1454 1
gdbarch_read_pc (struct gdbarch *gdbarch, ptid_t ptid)
d1460 1
a1460 1
  return gdbarch->read_pc (ptid);
d1470 7
d1478 1
a1478 1
gdbarch_write_pc (struct gdbarch *gdbarch, CORE_ADDR val, ptid_t ptid)
d1484 1
a1484 1
  gdbarch->write_pc (val, ptid);
@


1.386
log
@	* gdbarch.sh (get_longjmp_target): Add FRAME argument.
	* gdbarch.c, gdbarch.h: Regenerate.
	* infrun.c (handle_inferior_event): Pass current frame to
	gdbarch_get_longjmp_target.

	* alpha-tdep.c (alpha_get_longjmp_target): Add FRAME argument.
	Read registers from FRAME instead of using read_register.
	Use get_frame_arch instead of current_gdbarch.
	* arm-tdep.c (arm_get_longjmp_target): Likewise.
	* i386-tdep.c (i386_get_longjmp_target): Likewise.
	* m68k-tdep.c (m68k_get_longjmp_target): Likewise.
	* mips-linux-tdep.c (mips_linux_get_longjmp_target): Likewise.
	(mips64_linux_get_longjmp_target): Likewise.
	* mipsnbsd-tdep.c (mipsnbsd_get_longjmp_target): Likewise.
@
text
@d1903 1
a1903 1
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr)
d1909 1
a1909 1
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, using_gcc, args, nargs, value_type, real_pc, bp_addr);
@


1.385
log
@	* gdbarch.sh (skip_trampoline_code): Add FRAME argument.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c (generic_skip_trampoline_code): Add FRAME argument.
	* arch-utils.h (generic_skip_trampoline_code): Likewise.
	* infrun.c (handle_inferior_event): Pass current frame to
	gdbarch_skip_trampoline_code and skip_language_trampoline.

	* language.c (unk_lang_trampoline): Add FRAME argument.
	(skip_language_trampoline): Add FRAME argument.  Pass it to
	skip_trampoline callback.
	* language.h: Add forward declaration of struct frame_info.
	(struct language_defn): Add FRAME argument to skip_trampoline.
	(skip_language_trampoline): Add FRAME argument.
	* cp-abi.c (cplus_skip_trampoline): Add FRAME argument.  Pass it
	to skip_trampoline callback.
	* cp-abi.h: Add forward declaration of struct frame_info.
	(cplus_skip_trampoline): Add FRAME argument.
	(struct cp_abi_ops): Add FRAME argument to skip_trampoline callback.
	* gnu-v3-abi.c (gnuv3_skip_trampoline): Add FRAME argument.  Pass it
	to gdbarch_skip_trampoline_code.
	* objc-lang.c (objc_skip_trampoline): Add FRAME argument.  Pass it
	to gdbarch_skip_trampoline_code.

	* minsyms.c (find_solib_trampoline_target): Add FRAME argument.
	* symtab.h (find_solib_trampoline_target): Likewise.
	* obsd-tdep.c (obsd_skip_solib_resolver): Pass current frame to
	find_solib_trampoline_target.

	* arm-tdep.c (arm_skip_stub): Add FRAME argument.  Read registers
	from FRAME instead of calling read_register.

	* hppa-hpux-tdep.c (hppa_hpux_skip_trampoline_code): Add FRAME
	argument.  Read registers from FRAME instead of using read_register.
	* hppa-tdep.c (hppa_skip_trampoline_code): Likewise.
	* hppa-tdep.h (hppa_skip_trampoline_code): Add FRAME argument.

	* i386-cygwin-tdep.c (i386_cygwin_skip_trampoline_code): Add FRAME
	argument.

	* m32c-tdep.c (m32c_skip_trampoline_code): Add FRAME argument.

	* mips-tdep.c (mips_skip_trampoline_code): Add FRAME argument.  Read
	registers from FRAME instead of using read_signed_register.

	* ppc-linux-tdep.c (ppc_linux_skip_trampoline_code): Add FRAME
	argument.
	(ppc64_standard_linkage_target): Likewise.  Read registers from FRAME
	instead of using read_register.
	(ppc64_skip_trampoline_code): Add FRAME argument.  Pass it to
	ppc64_standard_linkage_target.
	* rs6000-tdep.c (rs6000_skip_trampoline_code): Add FRAME argument.
	Pass it to find_solib_trampoline_target.  Read registers from FRAME
	instead of using read_register.

	* xstormy16-tdep.c (xstormy16_skip_trampoline_code): Add FRAME
	argument.
@
text
@d2043 1
a2043 1
gdbarch_get_longjmp_target (struct gdbarch *gdbarch, CORE_ADDR *pc)
d2049 1
a2049 1
  return gdbarch->get_longjmp_target (pc);
@


1.384
log
@	* gdbarch.sh (software_single_step): Replace REGCACHE argument by
	FRAME argument.
	* gdbarch.c, gdbarch.h: Regenerate.
	* infrun.c (resume): Pass current frame to SOFTWARE_SINGLE_STEP.

	* alpha-tdep.c (alpha_next_pc): Add FRAME argument.  Retrieve
	registers from FRAME instead of using read_register.
	(alpha_software_single_step): Replace REGCACHE by FRAME.  Pass FRAME
	to alpha_next_pc.  Use get_frame_pc instead of read_pc.
	* alpha-tdep.h (alpha_software_single_step): Replace REGCACHE
	argument by FRAME.

	* arm-tdep.c (shifted_reg_val): Add FRAME argument.  Read registers
	from FRAME instead of using read_register.
	(thumb_get_next_pc): Likewise.
	(arm_get_next_pc): Likewise.
	(arm_software_single_step): Replace REGCACHE by FRAME.  Pass FRAME
	to arm_get_next_pc.  Use get_frame_pc instead of read_register.
	* arm-tdep.h (arm_software_single_step): Replace REGCACHE
	argument by FRAME.

	* cris-tdep.c (find_step_target): Add FRAME argument.  Read registers
	from FRAME instead of using read_register.
	(cris_software_single_step): Replace REGCACHE by FRAME.  Pass FRAME
	to find_step_target.

	* mips-tdep.c (mips32_next_pc): Add FRAME argument.  Read registers
	from FRAME instead of using read_register / read_signed_register.
	(extended_mips16_next_pc): Likewise.
	(mips16_next_pc): Likewise.
	(mips_next_pc): Likewise.
	(mips_software_single_step): Replace REGCACHE by FRAME.  Pass FRAME
	to mips_next_pc.  Use get_frame_pc instead of read_pc.
	* mips-tdep.h (mips_software_single_step): Replace REGCACHE
	argument by FRAME.

	* rs6000-tdep.c (branch_dest): Add FRAME argument.  Use it instead
	of current frame.  Read registers from FRAME.
	(deal_with_atomic_sequence): Add FRAME argument.  Pass it to
	branch_dest.  Use get_frame_pc instead of read_pc.
	(rs6000_software_single_step): Likewise.
	(bl_to_blrl_insn_p): Do not call branch_dest.
	* rs6000-tdep.h (rs6000_software_single_step): Replace REGCACHE
	argument by FRAME.

	* sparc64-linux-tdep.c (sparc64_linux_step_trap): Add FRAME argument.
	Read registers from FRAME instead of current regcache.
	* sparc-linux-tdep.c (sparc32_linux_step_trap): Likewise.
	* sparcnbsd-tdep.c (sparcnbsd_step_trap): Likewise.
	* sparc-tdep.c (sparc_address_from_register): Remove.
	(sparc_analyze_control_transfer): Pass FRAME argument instead of
	GDBARCH.  Pass FRAME to step_trap callback.
	(sparc_step_trap): Add FRAME argument.
	(space_software_single_step): Replace REGCACHE by FRAME.  Pass FRAME
	to sparc_analyze_control_transfer.  Read registers from FRAME instead
	of calling sparc_address_from_register.
	* sparc-tdep.h (struct gdbarch_tdep): Add FRAME argument to
	step_trap callback.
	(sparc_address_from_register): Remove prototype.
	(sparc_software_single_step): Replace REGCACHE argument by FRAME.
	(sparcnbsd_step_trap): Add FRAME argument.

	* spu-tdep.c (spu_software_single_step): Replace REGCACHE argument
	by FRAME.  Read registers from FRAME instead of REGCACHE.
@
text
@d2772 1
a2772 1
gdbarch_skip_trampoline_code (struct gdbarch *gdbarch, CORE_ADDR pc)
d2778 1
a2778 1
  return gdbarch->skip_trampoline_code (pc);
@


1.383
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_ADDR_BIT): Replace by gdbarch_addr_bit.
	* valops.c (value_cast): Likewise.
	* utils.c (strlen_paddr, paddr, paddr_nz, paddress): Likewise.
	* ui-out.c (ui_out_field_core_addr): Likewise.
	* tracepoint.c (tracepoints_info): Likewise.
	* symtab.c (print_msymbol_info): Likewise.
	* solib-irix.c (irix_current_sos)
	(irix_open_symbol_file_object): Likewise.
	* remote.c (build_remote_gdbarch_data): Likewise.
	* prologue-value.c (make_pv_area): Likewise.
	* procfs.c (info_mappings_callback): Likewise.
	* printcmd.c (print_scalar_formatted)
	(deprecated_print_address_numeric): Likewise.
	* memattr.c (mem_info_command): Likewise.
	* linux-nat.c (linux_nat_info_proc_cmd): Likewise.
	* gdbtypes.c (build_flt, gdbtypes_post_init): Likewise.
	* exec.c (print_section_info): Likewise.
	* dwarf2read.c (read_subrange_type): Likewise.
	* dwarf2loc.c (find_location_expression): Likewise.
	* dwarf2expr.c (dwarf2_read_address, unsigned_address_type)
	(signed_address_type, execute_stack_op): Likewise.
	* breakpoint.c (print_one_breakpoint, breakpoint_1): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d1102 2
a1103 2
                      "SOFTWARE_SINGLE_STEP(regcache)",
                      XSTRING (SOFTWARE_SINGLE_STEP (regcache)));
d2714 1
a2714 1
gdbarch_software_single_step (struct gdbarch *gdbarch, struct regcache *regcache)
d2720 1
a2720 1
  return gdbarch->software_single_step (regcache);
@


1.382
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_ARCHITECTURE): Replace by gdbarch_bfd_arch_info.
	* arch-utils.c (show_architecture): Likewise.
	* remote-mips.c (mips_open): Likewise
	* nto-tdep.c (nto_find_and_open_solib)
	(nto_init_solib_absolute_prefix): Likewise.
	* nto-procfs (procfs_open): Likewise.
	* m68hc11-tdep.c (gdb_print_insn_m68hc11): Likewise.
	* gcore.c (default_gcore_mach, default_gcore_arch): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a652 5
#ifdef TARGET_ADDR_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_ADDR_BIT # %s\n",
                      XSTRING (TARGET_ADDR_BIT));
#endif
@


1.381
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_BFD_VMA_BIT): Replace by gdbarch_bfd_vma_bit.
	* gdbtypes.c (build_flt): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d407 1
a407 1
  current_gdbarch->bfd_vma_bit = TARGET_ARCHITECTURE->bits_per_address;
a698 5
#ifdef TARGET_ARCHITECTURE
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_ARCHITECTURE # %s\n",
                      XSTRING (TARGET_ARCHITECTURE));
#endif
d701 1
a701 1
                      TARGET_ARCHITECTURE->printable_name);
@


1.380
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (BREAKPOINT_FROM_PC): Replace by
	gdbarch_breakpoint_from_pc.
	* s390-tdep.c (s390_gdbarch_init): Likewise (comment).
	* remote.c (remote_insert_breakpoint)
	(remote_insert_hw_breakpoint): Likewise.
	* ppc-linux-tdep.c (ppc_linux_memory_remove_breakpoint): Likewise.
	* mips-tdep.c (mips_breakpoint_from_pc): Likewise (comment).
	* breakpoint.h (bp_target_info): Likewise (comment).
	* breakpoint.c (read_memory_nobpt): Likewise.
	* mem-break.c (default_memory_insert_breakpoint): Likewise.
	(symtab.h, breakpoint.h): Remove include. Remove unnecessary comment.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a706 5
#ifdef TARGET_BFD_VMA_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BFD_VMA_BIT # %s\n",
                      XSTRING (TARGET_BFD_VMA_BIT));
#endif
@


1.379
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_PTR_BIT): Replace with gdbarch_ptr_bit.
	* solib-svr4.c (svr4_truncate_ptr): Likewise.
	* solib-pa64.c (read_dynamic_info): Likewise.
	* solib-legacy.c (legacy_svr4_fetch_link_map_offsets): Likewise.
	* solib.c (info_sharedlibrary_command): Likewise.
	* s390-nat.c (SUBOFF): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	* procfs.c (info_proc_mappings): Likewise.
	* printcmd.c (decode_format): Likewise.
	* nto-tdep.c (nto_truncate_ptr): Likewise.
	* mips-linux-tdep.c (mips_linux_get_longjmp_target)
	(mips64_linux_get_longjmp_target): Likewise.
	* m68k-tdep.c (m68k_get_longjmp_target): Likewise.
	* jv-valprint.c (java_value_print): Likewise.
	* jv-lang.c (get_java_object_header_size): Likewise.
	* hppa-tdep.c (skip_prologue_hard_way, hppa_frame_cache): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_skip_trampoline_code)
	(hppa_hpux_unwind_adjust_stub): Likewise.
	* gnu-v3-abi.c (build_gdb_vtable_type): Likewise.
	* gdbtypes.c (make_pointer_type, make_reference_type)
	(smash_to_memberptr_type): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a714 6
#ifdef BREAKPOINT_FROM_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "BREAKPOINT_FROM_PC(pcptr, lenptr)",
                      XSTRING (BREAKPOINT_FROM_PC (pcptr, lenptr)));
#endif
@


1.378
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (DEPRECATED_STACK_ALIGN): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d522 1
a522 1
    current_gdbarch->addr_bit = TARGET_PTR_BIT;
a1014 5
#ifdef TARGET_PTR_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PTR_BIT # %s\n",
                      XSTRING (TARGET_PTR_BIT));
#endif
@


1.377
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (STAB_REG_TO_REGNUM): Replace by
	gdbarch_stab_reg_to_regnum.
	* stabsread.c (define_symbol): Likewise.
	* gdbarch.sh (ECOFF_REG_TO_REGNUM): Replace by
	gdbarch_ecoff_reg_to_regnum.
	* mdebugread.c (parse_symbol): Likewise.
	* i386-tdep.c (i386_gdbarch_init): Likewise (comment).
	* gdbarch.sh (DWARF_REG_TO_REGNUM): Replace by
	gdbarch_dwarf_reg_to_regnum.
	* gdbarch.sh (SDB_REG_TO_REGNUM): Replace by gdbarch_sdb_reg_to_regnum.
	* coffread.c (process_coff_symbol): Likewise.
	* gdbarch.sh (DWARF2_REG_TO_REGNUM): Replace by
	gdbarch_dwarf2_reg_to_regnum.
	* dwarf2loc.c (dwarf_expr_read_reg,dwarf2_evaluate_loc_desc)
	(locexpr_describe_location): Likewise.
	* dwarf2-frame.c (read_reg,execute_cfa_program,dwarf2_frame_cache)
	(dwarf2_frame_prev_register,dwarf2_signal_frame_this_id): Likewise.
	* dwarf2loc.c (DWARF2_REG_TO_REGNUM): Remove macro.
	* dwarf2read.c (DWARF2_REG_TO_REGNUM): Remove macro.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a206 1
  gdbarch_deprecated_stack_align_ftype *deprecated_stack_align;
a330 1
  0,  /* deprecated_stack_align */
a580 1
  /* Skip verify of deprecated_stack_align, has predicate */
a816 18
#ifdef DEPRECATED_STACK_ALIGN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN_P()",
                      XSTRING (DEPRECATED_STACK_ALIGN_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_stack_align_p() = %d\n",
                      gdbarch_deprecated_stack_align_p (current_gdbarch));
#ifdef DEPRECATED_STACK_ALIGN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN(sp)",
                      XSTRING (DEPRECATED_STACK_ALIGN (sp)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_stack_align = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_stack_align);
a2600 24
gdbarch_deprecated_stack_align_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_stack_align != NULL;
}

CORE_ADDR
gdbarch_deprecated_stack_align (struct gdbarch *gdbarch, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_stack_align != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_stack_align called\n");
  return gdbarch->deprecated_stack_align (sp);
}

void
set_gdbarch_deprecated_stack_align (struct gdbarch *gdbarch,
                                    gdbarch_deprecated_stack_align_ftype deprecated_stack_align)
{
  gdbarch->deprecated_stack_align = deprecated_stack_align;
}

int
@


1.376
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (SMASH_TEXT_ADDRESS): Replace by
	gdbarch_smash_text_address.
	* somread.c (som_symtab_read): Likewise.
	* elfread.c (record_minimal_symbol): Likewise.
	* dbxread.c (process_one_symbol): Likewise.
	* coffread.c (coff_symtab_read): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a852 6
#ifdef DWARF2_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DWARF2_REG_TO_REGNUM(dwarf2_regnr)",
                      XSTRING (DWARF2_REG_TO_REGNUM (dwarf2_regnr)));
#endif
a855 6
#ifdef DWARF_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DWARF_REG_TO_REGNUM(dwarf_regnr)",
                      XSTRING (DWARF_REG_TO_REGNUM (dwarf_regnr)));
#endif
a858 6
#ifdef ECOFF_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ECOFF_REG_TO_REGNUM(ecoff_regnr)",
                      XSTRING (ECOFF_REG_TO_REGNUM (ecoff_regnr)));
#endif
a1106 6
#ifdef SDB_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SDB_REG_TO_REGNUM(sdb_regnr)",
                      XSTRING (SDB_REG_TO_REGNUM (sdb_regnr)));
#endif
a1162 6
#ifdef STAB_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STAB_REG_TO_REGNUM(stab_regnr)",
                      XSTRING (STAB_REG_TO_REGNUM (stab_regnr)));
#endif
@


1.375
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (REGISTER_TO_VALUE): Replace by gdbarch_register_to_value.
	* findvar.c (value_from_register): Likewise.
	* gdbarch.sh (VALUE_TO_REGISTER): Replace by gdbarch_value_to_register.
	* valops.c (value_assign): Likewise.
	* gdbarch.sh (CONVERT_REGISTER_P): Replace by
	gdbarch_convert_register_p.
	* findvar.c (value_from_register): Likewise.
	* valops.c (value_assign): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1157 6
#ifdef SMASH_TEXT_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SMASH_TEXT_ADDRESS(addr)",
                      XSTRING (SMASH_TEXT_ADDRESS (addr)));
#endif
@


1.374
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (REGISTER_SIM_REGNO): Replace by
	gdbarch_register_sim_regno.
	* sim-regno.h (sim_regno): Likewise (comment).
	* remote-sim.c (gdbsim_fetch_register, gdbsim_store_register): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a753 6
#ifdef CONVERT_REGISTER_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "CONVERT_REGISTER_P(regnum, type)",
                      XSTRING (CONVERT_REGISTER_P (regnum, type)));
#endif
a1100 6
#ifdef REGISTER_TO_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_TO_VALUE(frame, regnum, type, buf)",
                      XSTRING (REGISTER_TO_VALUE (frame, regnum, type, buf)));
#endif
a1237 6
#ifdef VALUE_TO_REGISTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "VALUE_TO_REGISTER(frame, regnum, type, buf)",
                      XSTRING (VALUE_TO_REGISTER (frame, regnum, type, buf)));
#endif
@


1.373
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_VIRTUAL_FRAME_POINTER): Replace by
	gdbarch_virtual_frame_pointer.
	* tracepoint.c (encode_actions): Likewise.
	* dwarf2loc.c (dwarf2_loc_desc_needs_frame): Likewise.
	* ax-gdb.c (gen_frame_args_address, gen_frame_locals_address): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1103 6
#ifdef REGISTER_SIM_REGNO
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_SIM_REGNO(reg_nr)",
                      XSTRING (REGISTER_SIM_REGNO (reg_nr)));
#endif
@


1.372
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_FLOAT_BIT): Replace by gdbarch_float_bit.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* mdebugread.c (_initialize_mdebugread): Likewise.
	* m2-lang.c (m2_create_fundamental_type)
	(_initialize_m2_language): Likewise.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbarch.sh (TARGET_FLOAT_FORMAT): Replace by gdbarch_float_format.
	* value.c (unpack_double): Likewise (comment).
	* gdbtypes.c (build_gdbtypes): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* gdbarch.sh (TARGET_DOUBLE_BIT): Replace by gdbarch_double_bit.
	* valarith.c (value_binop): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* mdebugread.c (_initialize_mdebugread): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* cris-tdep.c (cris_gdbarch_init): Likewise (comment).
	* c-lang.c (c_create_fundamental_type): Likewise.
	* ada-lex.l (processReal): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbarch.sh (TARGET_DOUBLE_FORMAT): Replace by gdbarch_double_format.
	* value.c (unpack_double): Likewise (comment).
	* gdbtypes.c (build_gdbtypes): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* gdbarch.sh (TARGET_LONG_DOUBLE_BIT): Replace by
	gdbarch_long_double_bit.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* ada-lex.l (processReal): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbarch.sh (TARGET_LONG_DOUBLE_FORMAT): Replace by
	gdbarch_long_double_format.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1267 6
#ifdef TARGET_VIRTUAL_FRAME_POINTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_VIRTUAL_FRAME_POINTER(pc, frame_regnum, frame_offset)",
                      XSTRING (TARGET_VIRTUAL_FRAME_POINTER (pc, frame_regnum, frame_offset)));
#endif
@


1.371
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_SHORT_BIT): Replace by gdbarch_int_bit.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* gdbtypes.c (build_gdbtypes, gdbtypes_post_init): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* gdbarch.sh (TARGET_INT_BIT): Replace by gdbarch_int_bit.
	* c-exp.y (parse_number): Likewise.
	* objc-exp.y (parse_number): Likewise.
	* ada-lex.l (processInt): Likewise.
	* f-exp.y (parse_number): Likewise.
	* p-exp.y (parse_number): Likewise.
	* ada-lang.c (ada_create_fundamental_type, ada_language_arch_info)
	(gdbtypes_post_init, build_gdbtypes): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* parse.c (build_parse): Likewise.
	* xcoffread.c (_initialize_xcoffread): Likewise.
	* stabsread.c (define_symbol, read_one_struct_field, read_enum_type)
	(read_range_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* f-lang.c (build_fortran_types, f_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type, _initialize_m2_language)
	(m2_create_fundamental_type): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* coffread.c (coff_read_enum_type): Likewise.
	* mdebugread.c (parse_symbol, _initialize_mdebugread): Likewise.
	* dwarf2read.c (new_symbol): Likewise.
	* gdbarch.sh (TARGET_LONG_BIT): Replace by gdbarch_long_bit.
	* c-exp.y (parse_number): Likewise.
	* objc-exp.y (parse_number): Likewise.
	* ada-lex.l (processInt): Likewise.
	* f-exp.y (parse_number): Likewise.
	* p-exp.y (parse_number): Likewise.
	* valarith.c (value_binop): Likewise.
	* symfile.c (read_target_long_array, simple_overlay_update_1): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbtypes.c (build_gdbtypes, gdbtypes_post_init): Likewise.
	* symfile.c (TARGET_LONG_BYTES): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* f-lang.c (f_create_fundamental_type): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* coffread.c (decode_base_type): Likewise.
	* gdbarch.sh (TARGET_LONG_LONG_BIT): Replace by gdbarch_long_long_bit.
	* c-exp.y (parse_number): Likewise.
	* objc-exp.y (parse_number): Likewise.
	* p-exp.y (parse_number): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbtypes.c (gdbtypes_post_init, build_gdbtypes): Likewise.
	* stabsread.c (read_range_type): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* f-lang.c (f_create_fundamental_type): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d376 1
a376 1
     so that macros such as TARGET_DOUBLE_BIT, when expanded, refer to
a852 5
#ifdef TARGET_DOUBLE_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_DOUBLE_BIT));
#endif
a855 5
#ifdef TARGET_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_DOUBLE_FORMAT));
#endif
a909 5
#ifdef TARGET_FLOAT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_BIT # %s\n",
                      XSTRING (TARGET_FLOAT_BIT));
#endif
a912 5
#ifdef TARGET_FLOAT_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_FORMAT # %s\n",
                      XSTRING (TARGET_FLOAT_FORMAT));
#endif
a971 5
#ifdef TARGET_LONG_DOUBLE_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_BIT));
#endif
a974 5
#ifdef TARGET_LONG_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_FORMAT));
#endif
@


1.370
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (SKIP_TRAMPOLINE_CODE): Replace by
	gdbarch_skip_trampoline_code.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Likewise (comment).
	* objc-lang.c (objc_skip_trampoline)
	(objc_submethod_helper_data): Likewise.
	* m32c-lang.c (m32c_skip_trampoline_code): Likewise (comment).
	* infrun.c (handle_inferior_event): Likewise.
	* gnu-v3-abi.c (gnuv3_skip_trampoline): Likewise.
	* gdbarch.sh (IN_SOLIB_RETURN_TRAMPOLINE): Replace by
	gdbarch_in_solib_return_trampoline.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Likewise (comment).
	* infrun.c (handle_inferior_event): Likewise.
	* hppa-tdep.c (hppa_stub_unwind_sniffer): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d404 1
a404 1
  current_gdbarch->long_long_bit = 2*TARGET_LONG_BIT;
d408 1
a408 1
  current_gdbarch->ptr_bit = TARGET_INT_BIT;
a979 5
#ifdef TARGET_INT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_INT_BIT # %s\n",
                      XSTRING (TARGET_INT_BIT));
#endif
a988 5
#ifdef TARGET_LONG_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_BIT));
#endif
a1007 5
#ifdef TARGET_LONG_LONG_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_LONG_BIT));
#endif
a1181 5
#ifdef TARGET_SHORT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_SHORT_BIT # %s\n",
                      XSTRING (TARGET_SHORT_BIT));
#endif
@


1.369
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (SKIP_PROLOGUE): Replace by gdbarch_skip_prologue.
	* symtab.c (find_function_start_sal, in_prologue): Likewise.
	* linespec.c (minsym_found): Likewise.
	* infrun.c (step_into_function): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a973 6
#ifdef IN_SOLIB_RETURN_TRAMPOLINE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_RETURN_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_RETURN_TRAMPOLINE (pc, name)));
#endif
a1222 6
#ifdef SKIP_TRAMPOLINE_CODE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SKIP_TRAMPOLINE_CODE(pc)",
                      XSTRING (SKIP_TRAMPOLINE_CODE (pc)));
#endif
@


1.368
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (NAME_OF_MALLOC): Replace by gdbarch_name_of_malloc.
	* valops.c (value_allocate_space_in_inferior): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1222 6
#ifdef SKIP_PROLOGUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SKIP_PROLOGUE(ip)",
                      XSTRING (SKIP_PROLOGUE (ip)));
#endif
@


1.367
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (MEMORY_INSERT_BREAKPOINT): Replace by
	gdbarch_memory_insert_breakpoint.
	* mem-break.c (memory_insert_breakpoint): Likewise.
	* gdbarch.sh (MEMORY_REMOVE_BREAKPOINT): Replace by
	gdbarch_memory_remove_breakpoint.
	* mem-break.c (memory_remove_breakpoint): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1037 5
#ifdef NAME_OF_MALLOC
  fprintf_unfiltered (file,
                      "gdbarch_dump: NAME_OF_MALLOC # %s\n",
                      XSTRING (NAME_OF_MALLOC));
#endif
d1040 1
a1040 1
                      NAME_OF_MALLOC);
@


1.366
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (FETCH_TLS_LOAD_MODULE_ADDRESS): Replace by
	gdbarch_fetch_tls_load_module_address.
	* gdbarch.sh (FETCH_TLS_LOAD_MODULE_ADDRESS_P): Replace by
	gdbarch_fetch_tls_load_module_address_p.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1031 6
#ifdef MEMORY_INSERT_BREAKPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "MEMORY_INSERT_BREAKPOINT(bp_tgt)",
                      XSTRING (MEMORY_INSERT_BREAKPOINT (bp_tgt)));
#endif
a1034 6
#ifdef MEMORY_REMOVE_BREAKPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "MEMORY_REMOVE_BREAKPOINT(bp_tgt)",
                      XSTRING (MEMORY_REMOVE_BREAKPOINT (bp_tgt)));
#endif
@


1.365
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (DECR_PC_AFTER_BREAK): Replace by
	gdbarch_decr_pc_after_break.
	* tracepoint.c (trace_dump_command): Likewise.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Likewise.
	* linux-thread-db.c (check_event): Likewise.
	* linux-nat.c (cancel_breakpoints_callback): Likewise.
	* infrun.c (adjust_pc_after_break, normal_stop): Likewise.
	* frame.h: Likewise (comment).
	* dummy-frame.c (deprecated_pc_in_call_dummy): Likewise.
	* aix-thread.c (aix_thread_wait): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a913 6
#ifdef FETCH_TLS_LOAD_MODULE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_TLS_LOAD_MODULE_ADDRESS_P()",
                      XSTRING (FETCH_TLS_LOAD_MODULE_ADDRESS_P ()));
#endif
a916 6
#ifdef FETCH_TLS_LOAD_MODULE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_TLS_LOAD_MODULE_ADDRESS(objfile)",
                      XSTRING (FETCH_TLS_LOAD_MODULE_ADDRESS (objfile)));
#endif
@


1.364
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (ADDRESS_CLASS_TYPE_FLAGS): Replace by
	gdbarch_address_class_type_flags.
	* dwarf2read.c (read_tag_pointer_type): Likewise.
	* gdbarch.sh (ADDRESS_CLASS_TYPE_FLAGS_P): Replace by
	gdbarch_address_class_type_flags_p.
	* dwarf2read.c (read_tag_pointer_type): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a762 5
#ifdef DECR_PC_AFTER_BREAK
  fprintf_unfiltered (file,
                      "gdbarch_dump: DECR_PC_AFTER_BREAK # %s\n",
                      XSTRING (DECR_PC_AFTER_BREAK));
#endif
@


1.363
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (ADDR_BITS_REMOVE): Replace by gdbarch_addr_bits_remove.
	* value.c (value_as_address): Likewise (comment).
	* remote-mips.c (common_breakpoint): Likewise.
	* regcache.c (read_pc_pid): Likewise.
	* printcmd.c (do_one_display): Likewise.
	* monitor.c (monitor_write_memory, monitor_read_memory)
	(monitor_insert_breakpoint): Likewise.
	* mips-tdep.c (heuristic_proc_start): Likewise.
	* infrun.c (insert_step_resume_breakpoint_at_frame)
	(insert_step_resume_breakpoint_at_caller): Likewise.
	* buildsym.c (record_line): Likewise.
	* arm-tdep.c (arm_scan_prologue, thumb_get_next_pc)
	(arm_get_next_pc): Likewise.
	* armnbsd-nat.c (arm_supply_gregset, fetch_register, store_register)
	(store_regs): Likewise.
	* arm-linux-tdep.c (arm_linux_supply_gregset): Likewise.
	* arm-linux-nat.c (fetch_register, fetch_regs): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a672 6
#ifdef ADDRESS_CLASS_TYPE_FLAGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS_P()",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS_P ()));
#endif
a675 6
#ifdef ADDRESS_CLASS_TYPE_FLAGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS(byte_size, dwarf2_addr_class)",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS (byte_size, dwarf2_addr_class)));
#endif
@


1.362
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (REGISTER_NAME): Replace by gdbarch_register_name.
	* tracepoint.c (scope_info): Likewise.
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* sh-tdep.c (sh_register_reggroup_p): Likewise.
	* sh64-tdep.c (sh64_do_fp_register, sh64_do_register)
	(sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_reggroup_p): Likewise.
	* remote-sim.c (gdbsim_fetch_register): Likewise.
	* remote.c (packet_reg): Likewise (comment).
	* reggroups.c (default_register_reggroup_p): Likewise.
	* regcache.c (regcache_dump): Likewise.
	* printcmd.c (address_info): Likewise.
	* ppc-linux-nat.c (fetch_register, store_register): Likewise.
	* mt-dep.c (mt_registers_info): Likewise.
	* mn10300-tdep.c (mn10300_dwarf2_reg_to_regnum): Likewise (comment).
	* mips-tdep.c (mips_register_reggroup_p, mips_read_fp_register_single)
	(mips_read_fp_register_double, mips_print_fp_register)
	(mips_print_register, print_gp_register_row, mips_print_registers_info)
	(mips_register_sim_regno): Likewise.
	* m68klinux-nat.c (regmap, fetch_register, store_register): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_register)
	(inf_ptrace_store_register): Likewise.
	* infcmd.c (default_print_registers_info): Likewise.
	* ia64-linux-nat.c (ia64_linux_fetch_register)
	(ia64_linux_store_register): Likewise.
	* i386-linux-nat.c (fetch_register, store_register): Likewise.
	* i386gnu-nat.c (gnu_fetch_registers, gnu_store_registers): Likewise.
	* hppa-linux-nat.c (fetch_register, store_register): Likewise.
	* hppa-hpux-nat.c (hppa_hpux_fetch_register)
	(hppa_hpux_store_register): Likewise.
	* findvar.c (locate_var_value): Likewise.
	* dwarf2loc.c (locexpr_describe_location): Likewise.
	* dwarf2-frame.c (execute_cfa_program): Likewise.
	* arm-tdep.c (arm_push_dummy_call): Likewise.
	* arch-utils.c (legacy_register_sim_regno): Likewise.
	* alpha-tdep.c (alpha_register_reggroup_p): Likewise.
	* alpha-nat.c (fetch_osf_core_registers): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers, mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a663 6
#ifdef ADDR_BITS_REMOVE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDR_BITS_REMOVE(addr)",
                      XSTRING (ADDR_BITS_REMOVE (addr)));
#endif
@


1.361
log
@	* remote.c (process_g_packet): Don't check size.
	* gdbarch.sh: Remove register_bytes_ok.
	* gdbarch.c: Regenerated.
	* gdbarch.h: Regenerated.
	* m68k-tdep.c (REGISTER_BYTES_NOFP): Remove.
	(m68k_register_bytes_ok): Remove.
	(m68k_gdbarch_init): Don't register m68k_register_bytes_ok.
@
text
@a1200 6
#ifdef REGISTER_NAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_NAME(regnr)",
                      XSTRING (REGISTER_NAME (regnr)));
#endif
@


1.360
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (FETCH_POINTER_ARGUMENT): Replace by
	gdbarch_fetch_pointer_argument.
	* objc-lang.c (OBJC_FETCH_POINTER_ARGUMENT): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a176 1
  gdbarch_register_bytes_ok_ftype *register_bytes_ok;
a301 1
  0,  /* register_bytes_ok */
a554 1
  /* Skip verify of register_bytes_ok, has predicate */
a1200 18
#ifdef REGISTER_BYTES_OK_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTES_OK_P()",
                      XSTRING (REGISTER_BYTES_OK_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_register_bytes_ok_p() = %d\n",
                      gdbarch_register_bytes_ok_p (current_gdbarch));
#ifdef REGISTER_BYTES_OK
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTES_OK(nr_bytes)",
                      XSTRING (REGISTER_BYTES_OK (nr_bytes)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_bytes_ok = <0x%lx>\n",
                      (long) current_gdbarch->register_bytes_ok);
a2240 24
gdbarch_register_bytes_ok_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_bytes_ok != NULL;
}

int
gdbarch_register_bytes_ok (struct gdbarch *gdbarch, long nr_bytes)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_bytes_ok != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_bytes_ok called\n");
  return gdbarch->register_bytes_ok (nr_bytes);
}

void
set_gdbarch_register_bytes_ok (struct gdbarch *gdbarch,
                               gdbarch_register_bytes_ok_ftype register_bytes_ok)
{
  gdbarch->register_bytes_ok = register_bytes_ok;
}

int
@


1.359
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (HAVE_NONSTEPPABLE_WATCHPOINT): Replace by
	gdbarch_have_nonsteppable_watchpoint.
	* infrun.c (handle_inferior_event, adjust_pc_after_break): Likewise.
	* gdbarch.sh (CANNOT_STEP_BREAKPOINT): Replace by
	gdbarch_cannot_step_breakpoint.
	* infrun.c (resume): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a933 6
#ifdef FETCH_POINTER_ARGUMENT_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT_P()",
                      XSTRING (FETCH_POINTER_ARGUMENT_P ()));
#endif
a936 6
#ifdef FETCH_POINTER_ARGUMENT
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT(frame, argi, type)",
                      XSTRING (FETCH_POINTER_ARGUMENT (frame, argi, type)));
#endif
@


1.358
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (FRAME_ARGS_SKIP): Replace by gdbarch_frame_args_skip.
	* stack.c (print_frame_args): Likewise.
	* gdbarch.sh (FRAME_NUM_ARGS): Replace by gdbarch_frame_num_args.
	* stack.c (print_args_stub, frame_info): Likewise.
	* gdbarch.sh (FRAME_NUM_ARGS_P): Replace by gdbarch_frame_num_args_p.
	* stack.c (print_args_stub, frame_info): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a756 5
#ifdef CANNOT_STEP_BREAKPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_STEP_BREAKPOINT # %s\n",
                      XSTRING (CANNOT_STEP_BREAKPOINT));
#endif
a1017 5
#ifdef HAVE_NONSTEPPABLE_WATCHPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT # %s\n",
                      XSTRING (HAVE_NONSTEPPABLE_WATCHPOINT));
#endif
@


1.357
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (COFF_MAKE_MSYMBOL_SPECIAL): Replace by
	gdbarch_coff_make_msymbol_special.
	* coffread.c (coff_symtab_read): Likewise.
	* gdbarch.sh (ELF_MAKE_MSYMBOL_SPECIAL): Replace by
	gdbarch_elf_make_msymbol_special.
	* elfread.c (elf_symtab_read): Likewise.
	* mips-tdep.c (mips_elf_make_msymbol_special): Likewise (comment).
	* sh64-tdep.c (MSYMBOL_IS_SPECIAL): Likewise (comment).
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1004 5
#ifdef FRAME_ARGS_SKIP
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_ARGS_SKIP # %s\n",
                      XSTRING (FRAME_ARGS_SKIP));
#endif
a1007 6
#ifdef FRAME_NUM_ARGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_NUM_ARGS_P()",
                      XSTRING (FRAME_NUM_ARGS_P ()));
#endif
a1010 6
#ifdef FRAME_NUM_ARGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_NUM_ARGS(frame)",
                      XSTRING (FRAME_NUM_ARGS (frame)));
#endif
@


1.356
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (FRAME_RED_ZONE_SIZE): Replace by
	gdbarch_frame_red_zone_size.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a770 6
#ifdef COFF_MAKE_MSYMBOL_SPECIAL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "COFF_MAKE_MSYMBOL_SPECIAL(val, msym)",
                      XSTRING (COFF_MAKE_MSYMBOL_SPECIAL (val, msym)));
#endif
a926 6
#ifdef ELF_MAKE_MSYMBOL_SPECIAL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ELF_MAKE_MSYMBOL_SPECIAL(sym, msym)",
                      XSTRING (ELF_MAKE_MSYMBOL_SPECIAL (sym, msym)));
#endif
@


1.355
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (INNER_THAN): Replace by gdbarch_inner_than.
	* infcall.c (call_function_by_hand): Likewise.
	* gcore.c (derive_stack_segment): Likewise.
	* frame.c (frame_id_inner): Likewise.
	* arch-utils.c (core_addr_lessthan): Likewise (comment).
	* ada-lang.c (ensure_lval): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1042 5
#ifdef FRAME_RED_ZONE_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE # %s\n",
                      XSTRING (FRAME_RED_ZONE_SIZE));
#endif
@


1.354
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (ADDRESS_TO_POINTER): Replace by
	gdbarch_address_to_pointer.
	* findvar.c (store_typed_address): Likewise.
	* gdbtypes.c (make_pointer_type): Likewise (comment).
	* procfs.c (procfs_address_to_host_pointer): Likewise.
	* std-regs.c (value_of_builtin_frame_reg): Likewise.
	(value_of_builtin_frame_fp_reg): Likewise.
	(value_of_builtin_frame_pc_reg): Likewise.
	* utils.c (paddress): Likewise (comment).
	* gdbarch.sh (POINTER_TO_ADDRESS): Replace by
	gdbarch_pointer_to_address.
	* findvar.c (extract_typed_address): Likewise.
	* gdbtypes.c (make_pointer_type): Likewise (comment).
	* valops.c (value_cast): Likewise (comment).
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1076 6
#ifdef INNER_THAN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INNER_THAN(lhs, rhs)",
                      XSTRING (INNER_THAN (lhs, rhs)));
#endif
@


1.353
log
@	* gdbarch.sh (GET_LONGJMP_TARGET): Replace by gdbarch_get_longjmp_target.
	* infrun.c (handle_inferior_event): Likewise.
	* gdbarch.sh (GET_LONGJMP_TARGET_P): Replace by
	gdbarch_get_longjmp_target_p.
	* breakpoint.c (breakpoint_re_set): Likewise.
	* infrun.c (handle_inferior_event): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a705 6
#ifdef ADDRESS_TO_POINTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_TO_POINTER(type, buf, addr)",
                      XSTRING (ADDRESS_TO_POINTER (type, buf, addr)));
#endif
a1180 6
#ifdef POINTER_TO_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "POINTER_TO_ADDRESS(type, buf)",
                      XSTRING (POINTER_TO_ADDRESS (type, buf)));
#endif
@


1.352
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (NUM_REGS): Replace by gdbarch_num_regs.
	* i386-tdep.c (i386_dbx_reg_to_regnum)
	(i386_svr4_reg_to_regnum): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_registers)
	(inf_ptrace_store_registers): Likewise.
	* corelow.c (get_core_registers): Likewise.
	* i386-linux-nat.c (supply_gregset, fill_gregset)
	(i386_linux_fetch_inferior_registers)
	(i386_linux_store_inferior_registers): Likewise.
	* remote.c (init_remote_state,packet_reg_from_regnum)
	(packet_reg_from_pnum,process_g_packet,remote_fetch_registers)
	(remote_prepare_to_store,store_registers_using_G)
	(remote_store_registers,remote_arch_state): Likewise.
	* tracepoint.c (encode_actions): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers,mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* tui/tui-regs.c (tui_show_register_group)
	(tui_show_register_group): Likewise.
	* xtensa-tdep.h (FP_ALIAS): Likewise.
	* xtensa-tdep.c (xtensa_register_name,xtensa_register_type)
	(xtensa_reg_to_regnum,xtensa_pseudo_register_read)
	(xtensa_pseudo_register_write,xtensa_register_reggroup_p): Likewise.
	* win32-nat.c (do_win32_fetch_inferior_registers)
	(do_win32_store_inferior_registers,fetch_elf_core_registers
	* user-regs.h: Likewise (comment).
	* user-regs.c (user_reg, user_reg_map_name_to_regnum): Likewise.
	* trad-frame.c (trad_frame_alloc_saved_regs): Likewise.
	* target-descriptions.h: Likewise (comment).
	* target-descriptions.c (tdesc_use_registers): Likewise (comment).
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* sh64-tdep.c (sh64_do_pseudo_register,sh64_print_register)
	(sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_sim_regno): Likewise.
	* rs6000-nat.c (fetch_register,store_register): Likewise.
	* remote-sim.c (one2one_register_sim_regno,gdbsim_fetch_register)
	(gdbsim_fetch_register,gdbsim_store_register): Likewise.
	* remote-mips.c (mips_fetch_registers,mips_store_registers): Likewise.
	* remote-m32r-sdi.c (m32r_fetch_registers)
	(m32r_store_registers): Likewise.
	* reggroups.c (default_register_reggroup_p): Likewise.
	* regcache.c (init_regcache_descr,register_size,regcache,regcache_save)
	(regcache_restore,regcache_dump): Likewise.
	* monitor.c (monitor_fetch_registers,monitor_store_registers): Likewise.
	* mips-tdep.c (mips_xfer_register,mips_register_name)
	(mips_register_reggroup_p,mips_pseudo_register_read)
	(mips_pseudo_register_write,mips_convert_register_p,mips_register_type)
	(mips_unwind_pc,mips_unwind_sp,mips_unwind_dummy_id,set_reg_offset)
	(mips16_scan_prologue,mips_insn16_frame_cache,reset_saved_regs)
	(mips32_scan_prologue,mips_insn32_frame_cache,read_next_frame_reg)
	(mips_n32n64_return_value,mips_o32_return_value,mips_o64_return_value)
	(print_gp_register_row,mips_print_registers_info)
	(mips_stab_reg_to_regnum,mips_dwarf_dwarf2_ecoff_reg_to_regnum)
	(mips_register_sim_regno): Likewise.
	* mips-linux-tdep.c (mips_linux_o32_sigframe_init)
	(mips_linux_n32n64_sigframe_init): Likewise.
	* mips-linux-nat.c (mips_linux_register_addr)
	(mips64_linux_register_addr): Likewise.
	* findvar.c (value_of_register): Likewise.
	* infcmd.c (default_print_registers_info,registers_info)
	(print_vector_info,print_float_info): Likewise.
	* mips64obsd-tdep.c (mips64obsd_sigframe_init): Likewise.
	* inf-child.c (inf_child_fetch_inferior_registers): Likewise.
	* m68k-tdep.c (m68k_dwarf_reg_to_regnum): Likewise.
	* m68hc11-tdep.c (m68hc11_frame_unwind_cache(: Likewise.
	* m32r-tdep.c (m32r_frame_unwind_cache): Likewise.
	* ia64-linux-nat.c (ia64_register_addr,ia64_cannot_fetch_register)
	(ia64_cannot_store_register,ia64_linux_fetch_registers)
	(ia64_linux_store_registers): Likewise.
	* hpux-thread.c (hpux_thread_fetch_registers)
	(hpux_thread_store_registers): Likewise.
	* h8300-tdep.c (E_PSEUDO_CCR_REGNUM,E_PSEUDO_EXR_REGNUM)
	(h8300_init_frame_cache,h8300_frame_cache,h8300_frame_prev_register)
	(h8300_register_type): Likewise.
	* dwarf2-frame.c (dwarf2_frame_cache)
	(dwarf2_frame_state_alloc_regs): Likewise.
	* cris-tdep.c (cris_register_size,cris_cannot_fetch_register)
	(cris_cannot_store_register,crisv32_cannot_fetch_register)
	(crisv32_cannot_store_register,cris_register_name): Likewise.
	* avr-tdep.c (avr_frame_unwind_cache): Likewise.
	* arch-utils.c (legacy_register_sim_regno)
	(legacy_virtual_frame_pointer): Likewise.
	* arm-tdep.c (arm_make_prologue_cache,arm_register_sim_regno):Likewise.
	* arm-tdep.h: Likewise (comment).
	* frv-tdep.c (frv_register_sim_regno): Likewise.
	* m68klinux-nat.c (old_fetch_inferior_registers)
	(old_store_inferior_registers): Likewise.
	* m32c-tdep.c (m32c_virtual_frame_pointer): Likewise.
	* irix5-nat.c (fetch_core_registers): Likewise.
	* hppa-tdep.c (hppa_frame_cache): Likewise.
	* hppa-linux-nat.c (hppa_linux_register_addr)
	(hppa_linux_fetch_inferior_registers)
	(hppa_linux_store_inferior_registers): Likewise.
	* hppa-hpux-nat.c (hppa_hpux_fetch_inferior_registers)
	(hppa_hpux_store_inferior_registers): Likewise.
	* amd64-nat.c (amd64_native_gregset_reg_offset)
	(amd64_supply_native_gregset,amd64_collect_native_gregset): Likewise.
	* dbug-rom.c (dbug_regname): Likewise.
	* m68hc11-tdep.c (m68hc11_frame_unwind_cache)
	(HARD_PAGE_REGNUM (comment)): Likewise.
	* gdbarch.sh (NUM_PSEUDO_REGS): Replace by gdbarch_num_pseudo_regs.
	* i386-tdep.c (i386_dbx_reg_to_regnum)
	(i386_svr4_reg_to_regnum): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers,mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
	* tui/tui-regs.c (tui_show_register_group): Likewise.
	* xtensa-tdep.h (FP_ALIAS): Likewise.
	* user-regs.h: Likewise (comment).
	* user-regs.c (user_reg, user_reg_map_name_to_regnum): Likewise.
	* trad-frame.c (trad_frame_alloc_saved_regs): Likewise.
	* target-descriptions.h: Likewise (comment).
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* sh64-tdep.c (sh64_print_register,sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_sim_regno): Likewise.
	* regcache.c (init_regcache_descr,register_size,regcache,regcache_save
	(regcache_restore,regcache_dump): Likewise.
	* mips-tdep.c (print_gp_register_row,mips_print_registers_info)
	(mips_dwarf_dwarf2_ecoff_reg_to_regnum)
	(mips_stab_reg_to_regnum): Likewise.
	* findvar.c (value_of_register): Likewise.
	* infcmd.c (default_print_registers_info,registers_info)
	(print_vector_info,print_float_info): Likewise.
	* m68k-tdep.c (m68k_dwarf_reg_to_regnum): Likewise.
	* h8300-tdep.c (h8300_register_type): Likewise.
	* dwarf2-frame.c (dwarf2_frame_cache): Likewise.
	* frame.h (SIZEOF_FRAME_SAVED_REGS): Likewise.
	* xtensa-tdep.c (xtensa_register_type,xtensa_reg_to_regnum)
	(xtensa_pseudo_register_read,xtensa_pseudo_register_write): Likewise.
	* parse.c: Remove comment.
	* gdbarch.c, gdbarch.h: Regenerate
@
text
@a1056 6
#ifdef GET_LONGJMP_TARGET_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_LONGJMP_TARGET_P()",
                      XSTRING (GET_LONGJMP_TARGET_P ()));
#endif
a1059 6
#ifdef GET_LONGJMP_TARGET
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_LONGJMP_TARGET(pc)",
                      XSTRING (GET_LONGJMP_TARGET (pc)));
#endif
@


1.351
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (CANNOT_FETCH_REGISTER): Replace by
	gdbarch_cannot_fetch_register.
	* alpha-nat.c (fetch_osf_core_registers): Likewise.
	* hppa-linux-nat.c (fetch_register): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_register): Likewise.
	* m68klinux-nat.c (fetch_register): Likewise.
	* mipsnbsd-tdep.c (mipsnbsd_supply_reg, mipsnbsd_supply_fpreg):
	Likewise.
	* gdbarch.sh (CANNOT_STORE_REGISTER): Replace by
	gdbarch_cannot_store_register.
	* hppa-linux-nat.c (store_register): Likewise.
	* inf-ptrace.c (inf_ptrace_store_register): Likewise.
	* regcache.c (regcache_raw_write): Likewise.
	* m68klinux-nat.c (store_register): Likewise.
	* mipsnbsd-tdep.c (mipsnbsd_fill_reg, mipsnbsd_fill_fpreg): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1175 5
#ifdef NUM_PSEUDO_REGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: NUM_PSEUDO_REGS # %s\n",
                      XSTRING (NUM_PSEUDO_REGS));
#endif
a1178 5
#ifdef NUM_REGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: NUM_REGS # %s\n",
                      XSTRING (NUM_REGS));
#endif
@


1.350
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_OSABI): Replace by gdbarch_osabi.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a759 6
#ifdef CANNOT_FETCH_REGISTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "CANNOT_FETCH_REGISTER(regnum)",
                      XSTRING (CANNOT_FETCH_REGISTER (regnum)));
#endif
a770 6
#ifdef CANNOT_STORE_REGISTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "CANNOT_STORE_REGISTER(regnum)",
                      XSTRING (CANNOT_STORE_REGISTER (regnum)));
#endif
@


1.349
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_CHAR_SIGNED): Replace by gdbarch_char_signed.
	* gdbtypes.c (build_gdbtypes, gdbtypes_post_init): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a1203 5
#ifdef TARGET_OSABI
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_OSABI # %s\n",
                      XSTRING (TARGET_OSABI));
#endif
@


1.348
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_BYTE_ORDER): Replace by gdbarch_byte_order.
	* ax-gdb.c (gen_bitfield_ref): Likewise.
	* mi/mi-main.c (get_register): Likewise.
	* findvar.c (default_value_from_register, extract_signed_integer)
	(extract_unsigned_integer, extract_long_unsigned_integer)
	(store_signed_integer, store_unsigned_integer): Likewise.
	* regcache.c (regcache_dump): Likewise.
	* value.c (lookup_internalvar, value_of_internalvar)
	(set_internalvar): Likewise.
	* defs.h: Likewise.
	* valprint.c (print_binary_chars, print_octal_chars)
	(print_decimal_chars, print_hex_chars, print_char_chars): Likewise.
	* infcmd.c (default_print_registers_info): Likewise.
	* arch-utils.c (selected_byte_order, show_endian): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* doublest.c (floatformat_from_length, floatformat_from_type)
	(extract_typed_floating, store_typed_floating): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a785 5
#ifdef TARGET_CHAR_SIGNED
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_CHAR_SIGNED # %s\n",
                      XSTRING (TARGET_CHAR_SIGNED));
#endif
@


1.347
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (CALL_DUMMY_LOCATION): Replace by
	gdbarch_call_dummy_location.
	* infcall.c (call_function_by_hand): Likewise.
	* inferior.h: Change comment.
	* arch-utils.c: Change comment.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a753 5
#ifdef TARGET_BYTE_ORDER
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BYTE_ORDER # %s\n",
                      XSTRING (TARGET_BYTE_ORDER));
#endif
@


1.346
log
@	* gdbarch.sh (read_sp): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* frame.c (frame_sp_unwind): Do not call TARGET_READ_SP.

	* avr-tdep.c (avr_read_sp): Remove.
	(avr_unwind_sp): New function.
	(avr_gdbarch_init): Install unwind_sp instead of read_sp callback.
	* mips-tdep.c (mips_read_sp): Remove.
	(mips_unwind_sp): New function.
	(mips_gdbarch_init): Install unwind_sp instead of read_sp callback.
	* score-tdep.c (score_read_unsigned_register): Remove.
	(score_read_sp): Remove.
	(score_unwind_sp): New function.
	(score_gdbarch_init): Install unwind_sp instead of read_sp callback.
@
text
@d42 1
a42 1
#include "inferior.h" /* enum CALL_DUMMY_LOCATION et.al. */
a761 5
#ifdef CALL_DUMMY_LOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_LOCATION # %s\n",
                      XSTRING (CALL_DUMMY_LOCATION));
#endif
@


1.345
log
@	* gdbarch.sh (overlay_update): New gdbarch function.
	(struct obj_section): Add forward declaration.
	* gdbarch.c, gdbarch.h: Regenerate.

	* symfile.c (simple_overlay_update): Make global.
	(target_overlay_update): Remove variable.
	(overlay_is_mapped): Call gdbarch_overlay_update instead of
	target_overlay_update.
	(overlay_load_command): Likewise.
	* symfile.h (struct obj_section): Add forward declaration.
	(simple_overlay_update): Add prototype.

	* m32r-tdep.c (m32r_gdbarch_init): Install simple_overlay_update.
@
text
@a150 1
  gdbarch_read_sp_ftype *read_sp;
a276 1
  0,  /* read_sp */
a531 1
  /* Skip verify of read_sp, has predicate */
a1331 18
#ifdef TARGET_READ_SP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_SP_P()",
                      XSTRING (TARGET_READ_SP_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_read_sp_p() = %d\n",
                      gdbarch_read_sp_p (current_gdbarch));
#ifdef TARGET_READ_SP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_SP()",
                      XSTRING (TARGET_READ_SP ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: read_sp = <0x%lx>\n",
                      (long) current_gdbarch->read_sp);
a1890 24
int
gdbarch_read_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->read_sp != NULL;
}

CORE_ADDR
gdbarch_read_sp (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->read_sp != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_sp called\n");
  return gdbarch->read_sp ();
}

void
set_gdbarch_read_sp (struct gdbarch *gdbarch,
                     gdbarch_read_sp_ftype read_sp)
{
  gdbarch->read_sp = read_sp;
}

@


1.344
log
@	* gdbarch.sh (remote_translate_xfer_address): Remove.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arch-utils.c (generic_remote_translate_xfer_address): Remove.
	* arch-utils.h (generic_remote_translate_xfer_address): Remove.
	* remote.c (remote_write_bytes_aux, remote_read_bytes): Do not
	call gdbarch_remote_translate_xfer_address.
	* frv-tdep.c (frv_gdbarch_init): Do not call
	set_gdbarch_remote_translate_xfer_address.
	* ia64-tdep.c (ia64_remote_translate_xfer_address): Remove.
	(ia64_gdbarch_init): Do not install it.
@
text
@d239 1
d366 1
d619 1
d1230 6
d3617 24
@


1.343
log
@	* gdbarch.sh (deprecated_store_struct_return): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* frv-tdep.c (frv_store_struct_return): Remove.
	(frv_gdbarch_init): Do not install it.
@
text
@a202 1
  gdbarch_remote_translate_xfer_address_ftype *remote_translate_xfer_address;
a328 1
  generic_remote_translate_xfer_address,  /* remote_translate_xfer_address */
a438 1
  current_gdbarch->remote_translate_xfer_address = generic_remote_translate_xfer_address;
a580 1
  /* Skip verify of remote_translate_xfer_address, invalid_p == 0 */
a1407 3
                      "gdbarch_dump: remote_translate_xfer_address = <0x%lx>\n",
                      (long) current_gdbarch->remote_translate_xfer_address);
  fprintf_unfiltered (file,
a2891 17
void
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->remote_translate_xfer_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_remote_translate_xfer_address called\n");
  gdbarch->remote_translate_xfer_address (gdbarch, regcache, gdb_addr, gdb_len, rem_addr, rem_len);
}

void
set_gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch,
                                           gdbarch_remote_translate_xfer_address_ftype remote_translate_xfer_address)
{
  gdbarch->remote_translate_xfer_address = remote_translate_xfer_address;
}

@


1.342
log
@	* gdbarch.sh: Add skip_permanent_breakpoint callback.
	* gdbarch.h, gdbarch.c: Regenerate.

	* infrun.c (SKIP_PERMANENT_BREAKPOINT): Remove default definition.
	(resume): Call gdbarch_skip_permanent_breakpoint instead of
	SKIP_PERMANENT_BREAKPOINT.  Inline default case.

	* hppa-hpux-tdep.c (hppa_skip_permanent_breakpoint): Make static.
	Add REGCACHE argument.  Use it instead of read/write_register.
	(hppa_hpux_init_abi): Install hppa_skip_permanent_breakpoint.

	* config/pa/tm-hppah.h: Delete file.
	* config/pa/hppa64.mt (DEPRECATED_TM_FILE): Set to tm-hppa.h.
	* config/pa/hppahpux.mt (DEPRECATED_TM_FILE): Likewise.
@
text
@a189 1
  gdbarch_deprecated_store_struct_return_ftype *deprecated_store_struct_return;
a316 1
  0,  /* deprecated_store_struct_return */
a569 1
  /* Skip verify of deprecated_store_struct_return, has predicate */
a917 18
#ifdef DEPRECATED_STORE_STRUCT_RETURN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN_P()",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_store_struct_return_p() = %d\n",
                      gdbarch_deprecated_store_struct_return_p (current_gdbarch));
#ifdef DEPRECATED_STORE_STRUCT_RETURN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN(addr, sp)",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN (addr, sp)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_store_struct_return = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_store_struct_return);
a2656 24
gdbarch_deprecated_store_struct_return_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_store_struct_return != NULL;
}

void
gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch, CORE_ADDR addr, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_store_struct_return != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_store_struct_return called\n");
  gdbarch->deprecated_store_struct_return (addr, sp);
}

void
set_gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_store_struct_return_ftype deprecated_store_struct_return)
{
  gdbarch->deprecated_store_struct_return = deprecated_store_struct_return;
}

int
@


1.341
log
@	* gdbarch.sh: Remove deprecated_register_byte.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.h (generic_register_size, generic_register_byte): Remove.
	* arch-utils.c (generic_register_size, generic_register_byte): Remove.

	* regcache.h (regcache_valid_p): Make REGCACHE parameter const.
	* regcache.c (regcache_valid_p): Allow to query cooked registers in
	read-only register caches.  Make REGCACHE parameter const.
	(regcache_dump): Do not check DEPRECATED_REGISTER_BYTE.

	* mi/mi-main.c (old_regs): Remove.
	(mi_setup_architecture_data, _initialize_mi_main): Remove.
	(register_changed_p): Reimplement to compare two register caches.
	(mi_cmd_data_list_changed_registers): Update caller.
	* mi/mi-main.h (mi_setup_architecture_data): Remove.
	* mi/mi-interp.c (mi_interpreter_init): Do not call
	mi_setup_architecture_data.
@
text
@d240 1
d368 1
d623 1
d1464 6
d3653 24
@


1.340
log
@	* gdbarch.sh (software_single_step): Remove "insert_breakpoints_p" and
	"sig" arguments, add "regcache" argument.
	* gdbarch.c, gdbarch.h: Regenerate.

	* infrun.c (resume): Update SOFTWARE_SINGLE_STEP call arguments.
	(handle_inferior_event): Call remove_single_step_breakpoints directly
	instead of calling SOFTWARE_SINGLE_STEP to remove breakpoints.

	* alpha-tdep.c (alpha_software_single_step): Update argument list.
	Remove handling of !insert_breakpoints_p case.
	* arm-tdep.c (arm_software_single_step): Likewise.
	* cris-tdep.c (cris_software_single_step): Likewise.
	* mips-tdep.c (mips_software_single_step): Likewise.
	* rs6000-tdep.c (rs6000_software_single_step): Likewise.
	* sparc-tdep.c (sparc_software_single_step): Likewise.
	* spu-tdep.c (spu_software_single_step): Likewise.

	* alpha-tdep.h (alpha_software_single_step): Update prototype.
	* mips-tdep.h (mips_software_single_step): Likewise.
	* rs6000-tdep.h (rs6000_software_single_step): Likewise.
	* sparc-tdep.h (sparc_software_single_step): Likewise.
@
text
@a167 1
  gdbarch_deprecated_register_byte_ftype *deprecated_register_byte;
a294 1
  generic_register_byte,  /* deprecated_register_byte */
a426 1
  current_gdbarch->deprecated_register_byte = generic_register_byte;
a551 1
  /* Skip verify of deprecated_register_byte, has predicate */
a891 18
#ifdef DEPRECATED_REGISTER_BYTE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_BYTE_P()",
                      XSTRING (DEPRECATED_REGISTER_BYTE_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_register_byte_p() = %d\n",
                      gdbarch_deprecated_register_byte_p (current_gdbarch));
#ifdef DEPRECATED_REGISTER_BYTE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_BYTE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_BYTE (reg_nr)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_register_byte = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_register_byte);
a2240 25
gdbarch_deprecated_register_byte_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_byte != generic_register_byte;
}

int
gdbarch_deprecated_register_byte (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_byte != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_byte != generic_register_byte, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_byte called\n");
  return gdbarch->deprecated_register_byte (reg_nr);
}

void
set_gdbarch_deprecated_register_byte (struct gdbarch *gdbarch,
                                      gdbarch_deprecated_register_byte_ftype deprecated_register_byte)
{
  gdbarch->deprecated_register_byte = deprecated_register_byte;
}

int
@


1.339
log
@2007-04-12  Luis Machado  <luisgpm@@br.ibm.com>

	* gdbarch.sh (software_single_step): Change the return type
	from void to int and reformatted some comments to <= 80
	columns.
	* gdbarch.c, gdbarch.h: Regenerated.
	* alpha-tdep.c (alpha_software_single_step): Likewise.
	* alpha-tdep.h (alpha_software_single_step): Likewise.
	* arm-tdep.c (arm_software_single_step): Likewise.
	* cris-tdep.c (cris_software_single_step): Likewise.
	* mips-tdep.c (mips_software_single_step): Likewise.
	* mips-tdep.h (mips_software_single_step): Likewise.
	* rs6000-tdep.c (rs6000_software_single_step): Likewise.
	* rs6000-tdep.h (rs6000_software_single_step): Likewise.
	* sparc-tdep.c (sparc_software_single_step): Likewise.
	* sparc-tdep.h (sparc_software_single_step): Likewise.
	* spu-tdep.c (spu_software_single_step): Likewise.
	* infrun.c (resume): Check the return value from SOFTWARE_SINGLE_STEP
	and act accordingly.
@
text
@d1525 2
a1526 2
                      "SOFTWARE_SINGLE_STEP(sig, insert_breakpoints_p)",
                      XSTRING (SOFTWARE_SINGLE_STEP (sig, insert_breakpoints_p)));
d3293 1
a3293 1
gdbarch_software_single_step (struct gdbarch *gdbarch, enum target_signal sig, int insert_breakpoints_p)
d3299 1
a3299 1
  return gdbarch->software_single_step (sig, insert_breakpoints_p);
@


1.338
log
@	* frame.c (frame_pop, frame_observer_target_changed): Call
	reinit_frame_cache.
	(flush_cached_frames): Rename to reinit_frame_cache and delete
	old implementation.
	* frame.h (flush_cached_frames): Delete prototype and update comment.

	* bsd-kvm.c (bsd_kvm_open, bsd_kvm_proc_cmd, bsd_kvm_pcb_cmd): Call
	reinit_frame_cache instead of flush_cached_frames.  Do not call
	select_frame after reinit_frame_cache.
	* corelow.c (core_open): Likewise.
	* gdbarch.sh (deprecated_current_gdbarch_select_hack): Likewise.
	* infrun.c (prepare_to_proceed, context_switch)
	(handle_inferior_event): Likewise.
	* linux-fork.c (fork_load_infrun_state): Likewise.
	* ocd.c (ocd_start_remote): Likewise.
	* remote-e7000.c (e7000_start_remote): Likewise.
	* remote-mips.c (device): Likewise.
	* thread.c (switch_to_thread): Likewise.
	* tracepoint.c (finish_tfind_command): Likewise.
	* gdbarch.c: Regenerated.
@
text
@d3292 1
a3292 1
void
d3299 1
a3299 1
  gdbarch->software_single_step (sig, insert_breakpoints_p);
@


1.337
log
@	* Makefile.in (arm-tdep.o, eval.o, target-descriptions.o)
	(xml-tdesc.o): Update.
	* xml-support.c: Add a comment.
	(gdb_xml_enums_boolean): New variable.
	(gdb_xml_parse_attr_enum): Use strcasecmp.
	* xml-support.h (gdb_xml_enums_boolean): Declare.
	* xml-tdesc.c (struct tdesc_parsing_data): Record current_feature,
	next_regnum, and current_union.
	(tdesc_start_feature, tdesc_start_reg, tdesc_start_union)
	(tdesc_end_union, tdesc_start_field, tdesc_start_vector)
	(field_attributes, union_children, reg_attributes, union_attributes)
	(vector_attributes, feature_attributes, feature_children): New.
	(target_children): Make static.  Add <feature>.
	(tdesc_elements): Make static.
	* target-descriptions.c (struct tdesc_reg, tdesc_reg_p, type_p)
	(struct tdesc_feature, tdesc_feature_p): New types.
	(struct target_desc): Add features member.
	(struct tdesc_arch_data, tdesc_data): New.
	(target_find_description): Clarify error message.  Warn about
	ignored register descriptions.
	(tdesc_has_registers, tdesc_find_feature, tdesc_feature_name)
	(tdesc_named_type, tdesc_data_init, tdesc_data_alloc)
	(tdesc_data_cleanup, tdesc_numbered_register)
	(tdesc_numbered_register_choices, tdesc_find_register)
	(tdesc_register_name, tdesc_register_type)
	(tdesc_remote_register_number, tdesc_register_reggroup_p)
	(set_tdesc_pseudo_register_name, set_tdesc_pseudo_register_type)
	(set_tdesc_pseudo_register_reggroup_p, tdesc_use_registers)
	(tdesc_free_reg, tdesc_create_reg, tdesc_free_feature)
	(tdesc_create_feature, tdesc_record_type): New.
	(free_target_description): Free features.
	(_initialize_target_descriptions): Initialize tdesc_data.
	* arch-utils.c (default_remote_register_number): New.
	* arch-utils.h (default_remote_register_number): New prototype.
	* target-descriptions.h (set_tdesc_pseudo_register_name)
	(set_tdesc_pseudo_register_type, set_tdesc_pseudo_register_reggroup_p)
	(tdesc_use_registers, tdesc_data_alloc, tdesc_data_cleanup)
	(tdesc_numbered_register, tdesc_numbered_register_choices)
	(tdesc_has_registers, tdesc_find_feature, tdesc_feature_name)
	(tdesc_named_type, tdesc_create_feature, tdesc_record_type)
	(tdesc_create_reg): Declare.
	* gdbarch.sh (remote_register_number): New entry.
	* gdbarch.c, gdbarch.h: Regenerate.
	* remote.c (init_remote_state): Use gdbarch_remote_register_number.
	* features/gdb-target.dtd: Add feature, reg, vector, union, and field.

	* arm-tdep.c (arm_register_aliases): New.
	(arm_register_name_strings): Rename to...
	(arm_register_names): ...this.  Make const.  Delete the old version.
	(current_option, arm_register_byte): Delete.
	(set_disassembly_style): Simplify.  Do not adjust arm_register_names.
	(value_of_arm_user_reg): New.
	(arm_gdbarch_init): Verify any described registers.  Call
	tdesc_use_registers.  Don't use arm_register_byte.  Create aliases
	for standard register names.
	(_initialize_arm_tdep): Do not adjust arm_register_names.
	* user-regs.c (struct user_reg): Add baton member.
	(append_user_reg, user_reg_add_builtin, user_regs_init)
	(user_reg_add, value_of_user_reg): Use a baton for user
	register functions.
	* std-regs.c: Update.
	* user-regs.h (user_reg_read_ftype, user_reg_add_builtin)
	(user_reg_add): Add baton argument.
	* NEWS: Mention target description register support.
	* features/arm-core.xml, features/arm-fpa.xml: New.
	* eval.c (evaluate_subexp_standard): Allow ptype $register
	when the program is not running.

	* gdb.texinfo (-target-disconnect): Use @@smallexample.
	(Requirements): Add anchor for Expat.  Update description.
	(Target Descriptions): Mention Expat.
	(Target Description Format): Document new elements.  Use
	@@smallexample.
	(Predefined Target Types, Standard Target Features): New sections.
	* doc/gdbint.texinfo (Target Descriptions): New section.

	* gdb.xml/single-reg.xml, gdb.xml/tdesc-regs.exp,
	gdb.xml/core-only.xml, gdb.xml/extra-regs.xml: New files.
@
text
@d4205 1
a4205 1
  flush_cached_frames ();
@


1.336
log
@	* doublest.c (floatformat_from_length): Use the right element from
	gdbarch floatformats.
	(floatformat_from_type, extract_typed_floating)
	(store_typed_floating): Likewise.
	* doublest.h: Remove declarations for undefined floatformat arrays.
	* gdbarch.sh (float_format, double_format, long_double_format): Change
	to pairs.
	(pformat): Update for pairs.
	* gdbarch.c, gdbarch.h: Regenerated.
	* gdbtypes.c (floatformats_ieee_single, floatformats_ieee_double)
	(floatformats_ieee_double_littlebyte_bigword)
	(floatformats_i387_ext, floatformats_m68881_ext, floatformats_arm_ext)
	(floatformats_ia64_spill, floatformats_ia64_quad, floatformats_vax_f)
	(floatformats_vax_d): New variables.
	(builtin_type_ieee_single, builtin_type_ieee_double)
	(builtin_type_arm_ext, builtin_type_ia64_spill)
	(builtin_type_ia64_quad): Replace arrays with individual types.
	(builtin_type_ieee_single_big, builtin_type_ieee_single_little)
	(builtin_type_ieee_double_big, builtin_type_ieee_double_little)
	(builtin_type_ieee_double_littlebyte_bigword, builtin_type_i960_ext)
	(builtin_type_m88110_ext, builtin_type_m88110_harris_ext)
	(builtin_type_arm_ext_big, builtin_type_arm_ext_littlebyte_bigword)
	(builtin_type_ia64_spill_big, builtin_type_ia64_spill_little)
	(builtin_type_ia64_quad_big, builtin_type_ia64_quad_little): Delete
	unused and endian-specific types.
	(recursive_dump_type): Update for floatformat pairs.
	(build_flt): Move higher.  Handle bit == -1.  Take a floatformat pair.
	(build_gdbtypes): Use build_flt.
	(_initialize_gdbtypes): Update set of initialized types.
	* gdbtypes.h: Update declarations to match gdbtypes.c.
	(struct main_type): Store a pointer to two floatformats.
	* arch-utils.c (default_float_format, default_double_format): Delete.
	* arch-utils.h (default_float_format, default_double_format): Delete.

	* arm-tdep.c, avr-tdep.c, hppa-tdep.c, hppabsd-tdep.c, i386-tdep.c,
	ia64-tdep.c,  iq2000-tdep.c, m68k-tdep.c, m88k-tdep.c,
	mips-linux-tdep.c, mips-tdep.c, mt-tdep.c, ppcobsd-tdep.c,
	sparc-linux-tdep.c, sparc-tdep.c, sparcnbsd-tdep.c, spu-tdep.c,
	vax-tdep.c, alpha-tdep.c, ppc-sysv-tdep.c: Update.
@
text
@d206 1
d334 1
d445 1
d590 1
d1449 3
d3000 17
@


1.335
log
@	* gdbarch.sh (deprecated_extract_return_value)
	(deprecated_store_return_value): Remove.
	(extract_return_value, store_return_value): Remove default values.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c, arch-utils.h (legacy_extract_return_value)
	(legacy_store_return_value): Remove.
	* regcache.c, regcache.h (deprecated_grub_regcache_for_registers):
	Remove.
@
text
@d72 1
a72 1
pformat (const struct floatformat *format)
d77 2
a78 1
    return  format->name;
d140 1
a140 1
  const struct floatformat * float_format;
d142 1
a142 1
  const struct floatformat * double_format;
d144 1
a144 1
  const struct floatformat * long_double_format;
d520 1
a520 1
    current_gdbarch->float_format = default_float_format (current_gdbarch);
d523 1
a523 1
    current_gdbarch->double_format = default_double_format (current_gdbarch);
d526 1
a526 1
    current_gdbarch->long_double_format = default_double_format (current_gdbarch);
d1744 1
a1744 1
const struct floatformat *
d1755 1
a1755 1
                          const struct floatformat * float_format)
d1777 1
a1777 1
const struct floatformat *
d1788 1
a1788 1
                           const struct floatformat * double_format)
d1810 1
a1810 1
const struct floatformat *
d1821 1
a1821 1
                                const struct floatformat * long_double_format)
@


1.334
log
@	* gdbarch.sh (value_from_register): New gdbarch function.
	* gdbarch.c, gdbarch.h: Regenerate.
	* findvar.c (default_value_from_register): New function.
	(value_from_register): Use gdbarch_value_from_register.
	* value.h (default_value_from_register): Declare.
	* spu-tdep.c (spu_convert_register_p, spu_register_to_value,
	spu_value_to_register): Remove.
	(spu_value_from_register): New function.
	(spu_gdbarch_init): Do not call set_gdbarch_convert_register_p,
	set_gdbarch_register_to_value, set_gdbarch_value_to_register.
	Call set_gdbarch_value_from_register.
	* s390-tdep.c (s390_convert_register_p, s390_register_to_value,
	s390_value_to_register): Remove.
	(s390_value_from_register): New function.
	(s390_gdbarch_init): Do not call set_gdbarch_convert_register_p,
	set_gdbarch_register_to_value, set_gdbarch_value_to_register.
	Call set_gdbarch_value_from_register.
@
text
@a193 2
  gdbarch_deprecated_extract_return_value_ftype *deprecated_extract_return_value;
  gdbarch_deprecated_store_return_value_ftype *deprecated_store_return_value;
a320 2
  0,  /* deprecated_extract_return_value */
  0,  /* deprecated_store_return_value */
a437 2
  current_gdbarch->extract_return_value = legacy_extract_return_value;
  current_gdbarch->store_return_value = legacy_store_return_value;
a571 2
  /* Skip verify of extract_return_value, invalid_p == 0 */
  /* Skip verify of store_return_value, invalid_p == 0 */
a838 9
#ifdef DEPRECATED_EXTRACT_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_RETURN_VALUE(type, regbuf, valbuf)",
                      XSTRING (DEPRECATED_EXTRACT_RETURN_VALUE (type, regbuf, valbuf)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_extract_return_value = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_extract_return_value);
a934 9
#ifdef DEPRECATED_STORE_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_RETURN_VALUE(type, valbuf)",
                      XSTRING (DEPRECATED_STORE_RETURN_VALUE (type, valbuf)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_store_return_value = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_store_return_value);
a2789 34
void
gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, gdb_byte *regbuf, gdb_byte *valbuf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_extract_return_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_return_value called\n");
  gdbarch->deprecated_extract_return_value (type, regbuf, valbuf);
}

void
set_gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_extract_return_value_ftype deprecated_extract_return_value)
{
  gdbarch->deprecated_extract_return_value = deprecated_extract_return_value;
}

void
gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch, struct type *type, gdb_byte *valbuf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_store_return_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_store_return_value called\n");
  gdbarch->deprecated_store_return_value (type, valbuf);
}

void
set_gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_store_return_value_ftype deprecated_store_return_value)
{
  gdbarch->deprecated_store_return_value = deprecated_store_return_value;
}

@


1.333
log
@	* NEWS: Mention pointer to member improvements.
	* Makefile.in (gnu-v3-abi.o): Delete special rule.
	(eval.o, gnu-v3-abi.o, ia64-tdep.o): Update.
	* ada-valprint.c (ada_print_scalar): Update for new type codes.
	* c-typeprint.c (c_print_type): Update for new type codes.
	(c_type_print_varspec_prefix, c_type_print_varspec_suffix)
	(c_type_print_base): Likewise.
	(c_type_print_args): Rewrite.
	* c-valprint.c (c_val_print): Update for new type codes.  Remove
	support for references to members.  Treat methods like functions.
	* cp-abi.c (cplus_print_method_ptr, cplus_method_ptr_size)
	(cplus_make_method_ptr, cplus_method_ptr_to_value): New.
	* cp-abi.h (cplus_print_method_ptr, cplus_method_ptr_size)
	(cplus_make_method_ptr, cplus_method_ptr_to_value): New prototypes.
	(struct cp_abi_ops): Add corresponding members.
	* cp-valprint.c (cp_print_class_method): Delete.
	(cp_find_class_member): New function.
	(cp_print_class_member): Use it.  Simplify support for bogus
	member pointers.
	* dwarf2read.c (quirk_gcc_member_function_pointer): Use
	lookup_methodptr_type.
	(read_tag_ptr_to_member_type): Likewise, and lookup_memberptr_type.
	* eval.c (evaluate_subexp_standard): Implement EVAL_SKIP for
	OP_SCOPE.  Update call to value_aggregate_elt.  Rewrite member
	pointer support.
	(evaluate_subexp_for_address): Handle OP_SCOPE explicitly.  Handle
	references returned by user defined operators.
	* f-typeprint.c (f_print_type, f_type_print_varspec_prefix)
	(f_type_print_varspec_suffix): Remove support for member pointers.
	* gdbtypes.c (lookup_memberptr_type): Renamed from lookup_member_type
	and adjusted.
	(smash_to_memberptr_type): Likewise, from smash_to_member_type.
	(lookup_methodptr_type): New.
	(rank_one_type): Adjust for TYPE_CODE_MEMBERPTR.
	(recursive_dump_type): Update for new types.
	* gdbtypes.h (enum type_code): Replace TYPE_CODE_MEMBER with
	TYPE_CODE_MEMBERPTR and TYPE_CODE_METHODPTR.
	(lookup_memberptr_type, lookup_methodptr_type)
	(smash_to_memberptr_type): New prototypes.
	(smash_to_method_type): Formatting fix.
	(lookup_member_type, smash_to_member_type): Delete prototypes.
	* gnu-v3-abi.c (gnuv3_get_vtable, gnuv3_get_virtual_fn): New.
	Do not rely on debug information for the vptr or the method's
	enclosing type.  Handle function descriptors for IA64.
	(gnuv3_virtual_fn_field): Rewrite using the new functions.
	(gnuv3_find_method_in, gnuv3_print_method_ptr)
	(gnuv3_method_ptr_size, gnuv3_make_method_ptr)
	(gnuv3_method_ptr_to_value): New.
	(init_gnuv3_ops): Set new members of gnu_v3_abi_ops.
	* hpread.c (hpread_type_lookup): Update for new types.
	* infcall.c (value_arg_coerce): Likewise.
	* m2-typeprint.c (m2_print_type): Remove explicit support
	for member pointers.
	* m2-valprint.c (m2_val_print): Likewise.
	* p-typeprint.c (pascal_type_print_varspec_prefix)
	(pascal_type_print_varspec_suffix, pascal_type_print_base): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	(pascal_object_print_class_method, pascal_object_print_class_member):
	Delete.
	* p-lang.h (pascal_object_print_class_method)
	(pascal_object_print_class_member): Delete prototypes.
	* stabsread.c (read_type): Update for new types.
	* typeprint.c (print_type_scalar): Likewise.
	* valops.c (value_struct_elt_for_reference, value_namespace_elt)
	(value_maybe_namespace_elt, value_aggregate_elt): Add want_address
	argument.  Construct a pointer to member if the address of a
	function or data member is requested.
	(value_cast_pointers): Don't modify the input value.
	(value_cast): Adjust pointer to member handling for new types.
	Allow null pointer to member constants.  Don't modify the input
	value.
	(value_ind): Remove pointer to member check.  Handle function
	descriptors for function pointers.
	(value_struct_elt, value_find_oload_method_list, check_field):
	Remove pointer to member checks.
	* value.c (unpack_long): Allow pointers to data members.
	(value_from_longest): Allow member pointers.
	* value.h (value_aggregate_elt): Add want_address.
	* varobj.c (c_variable_editable): Remove check for members.
	* gdbarch.sh: Add vtable_function_descriptors and vbit_in_delta.
	* ia64-tdep.c (ia64_convert_from_func_ptr_addr): Handle descriptors
	in virtual tables.
	(ia64_gdbarch_init): Call set_gdbarch_vtable_function_descriptors.
	* c-lang.h (cp_print_class_method): Delete prototype.
	* arm-tdep.c (arm_gdbarch_init): Call set_gdbarch_vbit_in_delta.
	* mips-tdep.c (mips_gdbarch_init): Likewise.
	* gdbarch.c, gdbarch.h: Regenerated.

	* gdb.cp/classes.exp (test_pointers_to_class_members): Update expected
	output.  Test the types of members and member pointers.
	* gdb.cp/inherit.exp (test_print_mi_member_types): Remove KFAILs for
	gdb/2092.
	* gdb.cp/member-ptr.exp: Search for a comment instead of a
	statement.  Enable for GCC.  Update expected output for some tests
	and add new tests.  Remove obsolete GCC KFAILs.  Allow GCC's class
	layout.
	* gdb.cp/member-ptr.cc (Padding, Padding::vspacer, Base, Base::get_x)
	(Base::vget_base, Left, Left::vget, Right, Right::vget, Diamond)
	(Diamond::vget_base): New.
	(main): Add new tests.
	* gdb.cp/printmethod.exp: Update expected output for member functions.
	* gdb.cp/virtfunc.exp (test_virtual_calls): Add a KFAIL for
	print pEe->D::vg().
@
text
@d186 1
d315 1
d438 1
d572 1
d1599 3
d2658 17
@


1.332
log
@	* Makefile.in (SFILES): Add new and missed files.
	(target_descriptions_h): New.
	(COMMON_OBS): Add target-descriptions.o.
	(arch-utils.o, infcmd.o, remote.o, target.o): Update.
	(target-descriptions.o): New.
	* arch-utils.c (gdbarch_info_fill): Check for a target
	description.
	* target-descriptions.c, target-descriptions.h: New files.
	* gdbarch.sh: Add target_desc to info.  Declare it in gdbarch.h.
	Correct typos.
	(gdbarch_list_lookup_by_info): Check target_desc.
	* gdbarch.c, gdbarch.h: Regenerated.
	* target.c (update_current_target): Mention to_read_description.
	(target_pre_inferior): Call target_clear_description.
	(target_read_description): New.
	* target.h (struct target_ops): Add to_read_description.
	(target_read_description): New prototype.
	* infcmd.c (post_create_inferior): Call target_find_description.
	* remote.c (remote_open_1): Likewise.
	(extended_remote_create_inferior): Add a comment.
	(extended_remote_async_create_inferior): Likewise.
@
text
@d238 2
d366 2
d622 2
d1604 3
d1616 3
d3668 34
@


1.331
log
@gdb/
	* arch-utils.c (target_byte_order_user): Renamed from
	target_byte_order.
	(target_byte_order_auto, selected_byte_order): Removed.
	(show_endian): Check target_byte_order_user.
	(set_endian): Always update the architecture.  Set
	target_byte_order_user after success.
	(target_architecture_auto): Removed.
	(target_architecture_user): New.
	(selected_architecture_name, show_architecture): Check it.
	(set_architecture): Set target_architecture_user after success.
	(gdbarch_from_bfd): Check the argument.
	(default_byte_order): New.
	(initialize_current_architecture): Set the global default
	architecture and endianness.
	(gdbarch_info_fill): Remove GDBARCH argument.  Do not check the
	previous architecture.  Use exec_bfd, global selected architecture
	and endianness, and global defaults.
	* arch-utils.h (selected_byte_order): Remove prototype.
	(gdbarch_info_fill): Update.
	* exec.c (exec_file_attach): Update the architecture after removing
	the current file.
	* gdbarch.sh: Update comments.
	(find_arch_by_info): Remove OLD_GDBARCH argument.  Update call to
	gdbarch_info_fill.
	(gdbarch_find_by_info): Update call to find_arch_by_info.
	* gdbarch.h, gdbarch.c: Regenerated.
	* remote-sim.c (gdbsim_open): Use TARGET_BYTE_ORDER.
gdb/doc/
	* gdbint.texinfo (Target Architecture Definition): Add new
	Initializing a New Architecture section.
@
text
@d5 2
a6 2
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free
   Software Foundation, Inc.
d95 1
d254 1
d399 1
d1569 3
d1656 9
d3979 1
a3979 2
/* Look for an architecture using gdbarch_info.  Base search on only
   BFD_ARCH_INFO and BYTE_ORDER. */
d3993 2
@


1.330
log
@* gdbarch.sh (deprecated_saved_pc_after_call): Delete.
@
text
@d3990 1
a3990 1
find_arch_by_info (struct gdbarch *old_gdbarch, struct gdbarch_info info)
d4000 3
a4002 3
     sources: "set ..."; INFOabfd supplied; and the existing
     architecture.  */
  gdbarch_info_fill (old_gdbarch, &info);
d4133 1
a4133 1
  struct gdbarch *new_gdbarch = find_arch_by_info (old_gdbarch, info);
@


1.329
log
@gdb/
	* breakpoint.c (deprecated_read_memory_nobpt): Update to use
	shadow_len.
	(insert_bp_location, reattach_breakpoints, remove_breakpoint)
	(delete_breakpoint): Update calls to changed methods.
	(deprecated_insert_raw_breakpoint, deprecated_remove_raw_breakpoint)
	(single_step_breakpoints, insert_single_step_breakpoint)
	(remove_single_step_breakpoints): New.
	* breakpoint.h (struct bp_target_info): New.
	(struct bp_location): Replace shadow_contents with
	target_info and overlay_target_info.
	(deprecated_insert_raw_breakpoint, deprecated_remove_raw_breakpoint)
	(insert_single_step_breakpoint, remove_single_step_breakpoints): New
	prototypes.
	* gdbarch.sh: Forward declare struct bp_target_info in gdbarch.h.
	(memory_insert_breakpoint, memory_remove_breakpoint): Update second
	argument.
	* mem-break.c (default_memory_insert_breakpoint): Update.  Set
	placed_address, placed_size, and shadow_len.
	(default_memory_remove_breakpoint): Update.  Don't use
	BREAKPOINT_FROM_PC.
	(memory_insert_breakpoint, memory_remove_breakpoint): Update.
	* target.c (update_current_target): Update prototypes for changed
	functions.
	(debug_to_insert_breakpoint, debug_to_remove_breakpoint)
	(debug_to_insert_hw_breakpoint, debug_to_remove_hw_breakpoint):
	Update.
	* target.h: Forward declare struct bp_target_info.
	(struct target_ops): Use a bp_target_info argument for
	to_insert_breakpoint, to_remove_breakpoint,
	to_insert_hw_breakpoint, and to_remove_hw_breakpoint.
	(target_insert_breakpoint, target_remove_breakpoint)
	(target_insert_hw_breakpoint, target_remove_hw_breakpoint)
	(memory_insert_breakpoint, memory_remove_breakpoint)
	(default_memory_insert_breakpoint, default_memory_remove_breakpoint):
	Update.
	* config/i386/nm-i386.h: Forward declare struct bp_target_info.
	(i386_insert_hw_breakpoint, i386_remove_hw_breakpoint): Update.
	(target_insert_hw_breakpoint, target_remove_hw_breakpoint): Likewise.

	* gdbarch.c, gdbarch.h: Regenerated.

	* alpha-tdep.c (alpha_software_single_step): Use
	insert_single_step_breakpoint and remove_single_step_breakpoints.
	Remove unused statics.
	* arm-tdep.c (arm_software_single_step): Likewise.  Add a note.
	* cris-tdep.c (cris_software_single_step): Likewise.
	* mips-tdep.c (mips_software_single_step): Likewise.
	* rs6000-tdep.c (rs6000_software_single_step): Likewise.
	* sparc-tdep.c (sparc_software_single_step): Likewise.
	* wince.c (struct thread_info_struct): Remove step_prev.
	(undoSStep): Use remove_single_step_breakpoints.
	(wince_software_single_step): Use insert_single_step_breakpoint.

	* corelow.c (ignore): Remove unneeded prototype.  Update arguments.
	* exec.c (ignore): Likewise.
	* sol-thread.c (ignore): Likewise.

	* procfs.c (dbx_link_shadow_contents): Delete.
	(dbx_link_bpt): New.
	(procfs_mourn_inferior): Remove it if necessary.
	(remove_dbx_link_breakpoint): Use it.
	(insert_dbx_link_bpt_in_file): Set it.
	(procfs_init_inferior): Don't update dbx_link_bpt_addr.
	* rs6000-nat.c (exec_one_dummy_insn): Use
	deprecated_insert_raw_breakpoint and
	deprecated_remove_raw_breakpoint.
	* solib-irix.c (shadow_contents, breakpoint_addr): Delete.
	(base_breakpoint): New.
	(disable_break): Use it.
	(enable_break): Set it.

	* i386-nat.c (i386_insert_hw_breakpoint, i386_remove_hw_breakpoint):
	Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint)
	(ia64_memory_remove_breakpoint): Likewise.
	* m32r-tdep.c (m32r_memory_insert_breakpoint)
	(m32r_memory_remove_breakpoint): Likewise.
	* monitor.c (monitor_insert_breakpoint, monitor_remove_breakpoint):
	Likewise.  Remove unnecessary prototypes.  Use placed_address
	and placed_size.  Removed useless read from memory.
	* nto-procfs.c (procfs_insert_breakpoint)
	(procfs_remove_breakpoint, procfs_insert_hw_breakpoint)
	(procfs_remove_hw_breakpoint): Update.
	* ocd.c (ocd_insert_breakpoint, ocd_remove_breakpoint): Likewise.
	* ocd.h (ocd_insert_breakpoint, ocd_remove_breakpoint): Likewise.
	* ppc-linux-tdep.c (ppc_linux_memory_remove_breakpoint): Likewise.
	* ppc-tdep.h (ppc_linux_memory_remove_breakpoint): Likewise.
	* remote-e7000.c (e7000_insert_breakpoint)
	(e7000_remove_breakpoint): Likewise.
	* remote-m32r-sdi.c (m32r_insert_breakpoint)
	(m32r_remove_breakpoint): Likewise.
	* remote-mips.c (mips_insert_breakpoint)
	(mips_remove_breakpoint): Likewise.
	* remote-rdp.c (remote_rdp_insert_breakpoint)
	(remote_rdp_remove_breakpoint): Likewise.
	(rdp_step): Use deprecated_insert_raw_breakpoint and
	deprecated_remove_raw_breakpoint.
	* remote-sds.c (sds_insert_breakpoint, sds_remove_breakpoint):
	Update.
	* remote-sim.c (gdbsim_insert_breakpoint, gdbsim_remove_breakpoint):
	Delete.
	(init_gdbsim_ops): Use memory_insert_breakpoint and
	memory_remove_breakpoint.
	* remote-st.c (st2000_insert_breakpoint)
	(st2000_remove_breakpoint): Update.  Remove unused
	BREAKPOINT_FROM_PC.
	* remote.c (remote_insert_breakpoint, remote_remove_breakpoint):
	Update.  Use placed_address and placed_size.
	(remote_insert_hw_breakpoint, remote_remove_hw_breakpoint): Likewise.
gdb/doc/
	* gdbint.texinfo (x86 Watchpoints, Target Conditionals): Update insert
	and remove breakpoint prototypes.
	(Watchpoints): Move description of target_insert_hw_breakpoint and
	target_remove_hw_breakpoint ...
	(Breakpoints): ... to here.  Document target_insert_breakpoint and
	target_remove_breakpoint.
@
text
@a208 1
  gdbarch_deprecated_saved_pc_after_call_ftype *deprecated_saved_pc_after_call;
a333 1
  0,  /* deprecated_saved_pc_after_call */
a586 1
  /* Skip verify of deprecated_saved_pc_after_call, has predicate */
a920 18
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL_P()",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_saved_pc_after_call_p() = %d\n",
                      gdbarch_deprecated_saved_pc_after_call_p (current_gdbarch));
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL(frame)",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL (frame)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_saved_pc_after_call = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_saved_pc_after_call);
a3089 24
gdbarch_deprecated_saved_pc_after_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_saved_pc_after_call != NULL;
}

CORE_ADDR
gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_saved_pc_after_call != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_saved_pc_after_call called\n");
  return gdbarch->deprecated_saved_pc_after_call (frame);
}

void
set_gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_saved_pc_after_call_ftype deprecated_saved_pc_after_call)
{
  gdbarch->deprecated_saved_pc_after_call = deprecated_saved_pc_after_call;
}

int
@


1.329.6.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d209 1
d335 1
d589 1
d924 18
d3111 24
@


1.328
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d1253 2
a1254 2
                      "MEMORY_INSERT_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_INSERT_BREAKPOINT (addr, contents_cache)));
d1262 2
a1263 2
                      "MEMORY_REMOVE_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_REMOVE_BREAKPOINT (addr, contents_cache)));
d2937 1
a2937 1
gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, gdb_byte *contents_cache)
d2943 1
a2943 1
  return gdbarch->memory_insert_breakpoint (addr, contents_cache);
d2954 1
a2954 1
gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, gdb_byte *contents_cache)
d2960 1
a2960 1
  return gdbarch->memory_remove_breakpoint (addr, contents_cache);
@


1.328.2.1
log
@Merge XML and VFP support to this branch.
@
text
@a43 1
#include "available.h"
a237 2
  int available_features_support;
  struct gdb_feature_set * feature_set;
a363 2
  0,  /* available_features_support */
  0,  /* feature_set */
a721 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: available_features_support = %s\n",
                      paddr_d (current_gdbarch->available_features_support));
a1056 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: feature_set = %s\n",
                      paddr_nz ((long) current_gdbarch->feature_set));
a1642 8
struct obstack *
gdbarch_obstack (struct gdbarch *gdbarch)
{
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_obstack called\n");
  return gdbarch->obstack;
}

a3685 32
int
gdbarch_available_features_support (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_available_features_support called\n");
  return gdbarch->available_features_support;
}

void
set_gdbarch_available_features_support (struct gdbarch *gdbarch,
                                        int available_features_support)
{
  gdbarch->available_features_support = available_features_support;
}

struct gdb_feature_set *
gdbarch_feature_set (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_feature_set called\n");
  return gdbarch->feature_set;
}

void
set_gdbarch_feature_set (struct gdbarch *gdbarch,
                         struct gdb_feature_set * feature_set)
{
  gdbarch->feature_set = feature_set;
}

d3898 1
a3898 1
current_gdbarch_swap_in_hack (void *argument)
a3899 1
  struct gdbarch *new_gdbarch = argument;
d4009 2
a4010 1
/* Look for an architecture using gdbarch_info.  */
a4023 9

      if (info->feature_set && !arches->gdbarch->feature_set)
	continue;
      if (!info->feature_set && arches->gdbarch->feature_set)
	continue;
      if (info->feature_set
	  && !features_same_p (info->feature_set, arches->gdbarch->feature_set))
	continue;

a4175 5
  struct cleanup *back_to;

  /* Make sure we restore current_gdbarch on our way out if an error
     occurs.  */
  back_to = make_cleanup (current_gdbarch_swap_in_hack, old_gdbarch);
d4182 1
a4182 1
  do_cleanups (back_to);
@


1.328.2.1.2.1
log
@Merge to branch:
  http://sourceware.org/ml/gdb-patches/2006-04/msg00139.html
@
text
@d1264 2
a1265 2
                      "MEMORY_INSERT_BREAKPOINT(addr, bpt)",
                      XSTRING (MEMORY_INSERT_BREAKPOINT (addr, bpt)));
d1273 2
a1274 2
                      "MEMORY_REMOVE_BREAKPOINT(addr, bpt)",
                      XSTRING (MEMORY_REMOVE_BREAKPOINT (addr, bpt)));
d2956 1
a2956 1
gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, struct bp_location *bpt)
d2962 1
a2962 1
  return gdbarch->memory_insert_breakpoint (addr, bpt);
d2973 1
a2973 1
gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, struct bp_location *bpt)
d2979 1
a2979 1
  return gdbarch->memory_remove_breakpoint (addr, bpt);
@


1.328.4.1
log
@Initial version of available features support.
@
text
@a43 1
#include "available.h"
a154 1
  int remote_num_g_packet_regs;
a237 2
  int available_features_support;
  const struct gdb_feature_set * feature_set;
a280 1
  0,  /* remote_num_g_packet_regs */
a363 2
  0,  /* available_features_support */
  0,  /* feature_set */
a538 1
  /* Skip verify of remote_num_g_packet_regs, has predicate */
a721 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: available_features_support = %s\n",
                      paddr_d (current_gdbarch->available_features_support));
a1056 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: feature_set = %s\n",
                      paddr_nz ((long) current_gdbarch->feature_set));
a1477 6
                      "gdbarch_dump: gdbarch_remote_num_g_packet_regs_p() = %d\n",
                      gdbarch_remote_num_g_packet_regs_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: remote_num_g_packet_regs = %s\n",
                      paddr_d (current_gdbarch->remote_num_g_packet_regs));
  fprintf_unfiltered (file,
a1642 8
struct obstack *
gdbarch_obstack (struct gdbarch *gdbarch)
{
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_obstack called\n");
  return gdbarch->obstack;
}

a2073 23
gdbarch_remote_num_g_packet_regs_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->remote_num_g_packet_regs != 0;
}

int
gdbarch_remote_num_g_packet_regs (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_remote_num_g_packet_regs called\n");
  return gdbarch->remote_num_g_packet_regs;
}

void
set_gdbarch_remote_num_g_packet_regs (struct gdbarch *gdbarch,
                                      int remote_num_g_packet_regs)
{
  gdbarch->remote_num_g_packet_regs = remote_num_g_packet_regs;
}

int
a3685 32
int
gdbarch_available_features_support (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_available_features_support called\n");
  return gdbarch->available_features_support;
}

void
set_gdbarch_available_features_support (struct gdbarch *gdbarch,
                                        int available_features_support)
{
  gdbarch->available_features_support = available_features_support;
}

const struct gdb_feature_set *
gdbarch_feature_set (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_feature_set called\n");
  return gdbarch->feature_set;
}

void
set_gdbarch_feature_set (struct gdbarch *gdbarch,
                         const struct gdb_feature_set * feature_set)
{
  gdbarch->feature_set = feature_set;
}

d4009 2
a4010 1
/* Look for an architecture using gdbarch_info.  */
a4023 9

      if (info->feature_set && !arches->gdbarch->feature_set)
	continue;
      if (!info->feature_set && arches->gdbarch->feature_set)
	continue;
      if (info->feature_set
	  && !features_same_p (info->feature_set, arches->gdbarch->feature_set))
	continue;

@


1.328.4.2
log
@Require targets to provide all their registers if an XML description
is used; fix various bugs this uncovered.  Allow ARM descriptions without
FPA.
@
text
@d241 1
a241 1
  struct gdb_feature_set * feature_set;
d3753 1
a3753 1
struct gdb_feature_set *
d3764 1
a3764 1
                         struct gdb_feature_set * feature_set)
d3981 1
a3981 1
current_gdbarch_swap_in_hack (void *argument)
a3982 1
  struct gdbarch *new_gdbarch = argument;
a4266 5
  struct cleanup *back_to;

  /* Make sure we restore current_gdbarch on our way out if an error
     occurs.  */
  back_to = make_cleanup (current_gdbarch_swap_in_hack, old_gdbarch);
d4273 1
a4273 1
  do_cleanups (back_to);
@


1.328.4.3
log
@Update g/G packet support.
@
text
@d156 1
d285 1
d546 1
d1492 6
d2102 23
@


1.327
log
@* infcall.c (call_function_by_hand): Remove code handling
deprecated_push_arguments.  Bail out early if push_dummy_call
isn't available.
* gdbarch.sh (deprecated_push_arguments): Delete.  Adjust a few
comments accordingly.
* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d5 1
a5 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free
d22 2
a23 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.327.2.1
log
@2005-03-30  Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb/Makefile.in (arm-linux-nat.o): Update dependencies.
	* gdb/arm-linux-nat.c: Include "gdb_assert.h".
	(PTRACE_GETWMMXREGS, PTRACE_SETWMMXREGS): Define.
	(arm_linux_has_wmmx_registers): New flag.
	(GET_THREAD_ID): Remove stray punctuation.
	(IWMMXT_REGS_SIZE): Define.
	(fetch_wmmx_regs, store_wmmx_regs): New functions.
	(fetch_inferior_registers, store_inferior_registers): Call them.
	(arm_linux_available_registers): New function.
	* gdb/inftarg.c (child_xfer_partial): Handle
	TARGET_OBJECT_AVAILABLE_REGISTERS.
	* gdb/config/arm/nm-linux.h (arm_linux_available_registers): Add
	prototype.
	(NATIVE_XFER_AVAILABLE_REGISTERS): Define.

	* gdb/gdbserver/linux-arm-low.c (arm_fill_wmmxregset)
	(arm_store_wmmxregset): Remove stray text.
	(arm_available_registers): Remove debugging output.  Use hex.
	* gdb/gdbserver/regcache.c (num_registers): Make global.
	* gdb/gdbserver/server.c (handle_p_packet, handle_P_packet): Check
	the value of regnum.

2005-03-28  Paul Brook  <paul@@codesourcery.com>
	Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb/Makefile.in: arm-tdep.o depends on $(observer_h).
	* gdb/arm-linux-nat.c (fetch_fpregister, fetch_fpregs,
	store_fpregister, store_fpregs): Rename...
	(fetch_fpa_register, fetch_fpa_regs, store_fpa_register,
	store_fpa_regs): ... to this.
	* gdb/arm-linux-tdep.c (arm_linux_init_abi): Provide ABI specific
	overrides.
	* gdb/arm-tdep.c: Include opserver.h.
	(struct gdbarch_tdep_info): Add.
	(arm_push_dummy_call): Handle doubleword alignment.
	(arm_register_type): Handle iWMMXt and VFP regs.
	(arm_register_byte): Ditto.
	(arm_pseudo_register_read): New function.
	(arm_pseudo_register_write): New function.
	(arm_dwarf_reg_to_regnum): New function.
	(arm_register_sim_regno): Handle iWMMXT regs.
	(arm_register_remote_regno): New function.
	(arm_extract_return_value): Use new macro names.
	(arm_register_name): Handle iWMMXt and VFP registers.
	(arm_sim_available_registers): New function.
	(arm_update_architecture): New function.
	(arm_gdbarch_init): Handle optional register sets.  Register new
	hooks.  Fix misleading error message.
	(_initialize_arm_tdep): Call observer_attach_inferior_created.
	* gdb/arm-tdep.h (ARM_NUM_FP_ARG_REGS, ARM_LAST_FP_ARG_REGNUM,
	FP_REGISTER_SIZE, NUM_FREGS): Rename ...
	(ARM_NUM_FPA_ARG_REGS, ARM_LAST_FPA_ARG_REGNUM, FPA_REGISTER_SIZE,
	NUM_FPA_REGS): ... to this.
	(NUM_IWMMXT_COP0REGS, NUM_IWMMXT_COP1REGS, NUM_IWMMXT_REGS,
	IWMMXT_COP0_REGSIZE, IWMMXT_COP1_REGSIZE, NUM_VFP_XREGS,
	VFP_XREG_SIZE, NUM_VFP_SREGS, VFP_SREG_SIZE, NUM_VFP_PSEUDOS): Define.
	(struct gdbarch_tdep): Add target_has_iwmmxt_regs,
	target_has_vfp_regs, first_iwmmxt_regnum, target_iwmmxt_regnum,
	first_vfp_regnum, first_vfp_pseudo and target_vfp_regnum.
	* gdb/gdbarch.c (struct gdbarch): Add remote_num_g_packet_regs,
	sim_available_registers and register_remote_regno.
	(startup_gdbarch, verify_gdbarch): Ditto.
	(gdbarch_dump): Dump new fields.
	(gdbarch_remote_num_g_packet_regs_p, gdbarch_remote_num_g_packet_regs,
	set_gdbarch_remote_num_g_packet_regs,
	gdbarch_sim_available_registers_p, gdbarch_sim_available_registers,
	set_gdbarch_sim_available_registers, gdbarch_register_remote_regno_p,
	gdbarch_register_remote_regno, set_gdbarch_register_remote_regno):
	New functions.
	* gdb/gdbarch.h: Add prototypes.
	* gdb/gdbarch.sh: Add new fields.
	(deprecated_current_gdbarch_select_hack): Call flush_cached_frames.
	* gdb/remote-sim.h (gdbsim_create_inferior): Call
	observer_notify_inferior_created.
	(gdbsim_xfer_partial): New function.
	(init_gdbsim_ops): Use it.
	* gdb/remote.c (struct remote_state): Add num_g_regs.
	(init_remote_state): Only consider hard regs.  Allow target to provide
	register mapping.
	(packet_reg_from_regnum): Don't check pseudo regs.
	(packet_reg_from_pnum): Ditto.
	(remote_protocol_qPart_availableRegisters): Add.
	(set_remote_protocol_qPart_availableRegisters_packet_cmd,
	show_remote_protocol_qPart_availableRegisters_packet_cmd): New
	functions.
	(fetch_register_using_p, store_register_using_P): Handle arbitrary
	register mappings.
	(fetch_registers_using_g): New function.
	(remote_fetch_registers): Use it.
	(store_registers_using_G): New function.
	(remote_store_registers): Use it.
	(remote_xfer_partial): Handle TARGET_OBJECT_AVAILABLE_REGISTERS.
	(show_remote_cmd): Display availableRegisters.
	(_initialize_remote): Register qPart_availableRegisters.
	* gdb/target.h (enum target_object): Add
	TARGET_OBJECT_AVAILABLE_REGISTERS.
	* gdb/gdbserver/configure.srv (arm*-*-linux*): set
	srv_linux_regsets=yes.
	* gdb/gdbserver/linux-arm-low.c (PTRACE_GETWMMXREGS,
	PTRACE_SETWMMXREGS): Define.
	(arm_fill_gregset, arm_store_gregset, arm_fill_wmmxregset,
	arm_store_wmmxregset, arm_available_registers): New functions.
	(target_regsets): Add.
	(the_low_target): Use arm_available_registers.
	* gdb/gdbserver/linux-low.c (linux_available_registers): New function.
	(linux_target_op): Use it.
	* gdb/gdbserver/linux-low.h (gdbserver/linux-low.h): Add
	available_registers.
	(use_regsets_p): Declare.
	* gdb/gdbserver/regcache.c (g_register_bytes): Add.
	(regcache_invalidate, registers_to_string, registers_from_string):
	Use it.
	(set_register_cache): Set g_register_bytes.
	(supply_register_as_string): New function.
	* gdb/gdbserver/regcache.h (supply_register_as_string): Add prototype.
	* gdb/gdbserver/server.c (handle_query): Handle
	qPart:availableRegisters.
	(handle_p_packet, handle_P_packet): New functions.
	(main): Handle 'p' and 'P' packets.
	* gdb/gdbserver/target.h (struct target_ops): Add available_registers.
	* gdb/regformats/reg-arm.dat: Add last_g_reg and iWMMXT regs.
	* gdb/regformats/regdat.sh: Handle last_g_reg.
	* gdb/regformats/regdef.h (set_register_cache): Update prototype.
@
text
@a154 1
  int remote_num_g_packet_regs;
a179 2
  gdbarch_sim_available_registers_ftype *sim_available_registers;
  gdbarch_register_remote_regno_ftype *register_remote_regno;
a280 1
  0,  /* remote_num_g_packet_regs */
a305 2
  0,  /* sim_available_registers */
  0,  /* register_remote_regno */
a538 1
  /* Skip verify of remote_num_g_packet_regs, has predicate */
a561 2
  /* Skip verify of sim_available_registers, has predicate */
  /* Skip verify of register_remote_regno, has predicate */
a1446 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_register_remote_regno_p() = %d\n",
                      gdbarch_register_remote_regno_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_remote_regno = <0x%lx>\n",
                      (long) current_gdbarch->register_remote_regno);
a1477 6
                      "gdbarch_dump: gdbarch_remote_num_g_packet_regs_p() = %d\n",
                      gdbarch_remote_num_g_packet_regs_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: remote_num_g_packet_regs = %s\n",
                      paddr_d (current_gdbarch->remote_num_g_packet_regs));
  fprintf_unfiltered (file,
a1503 6
                      "gdbarch_dump: gdbarch_sim_available_registers_p() = %d\n",
                      gdbarch_sim_available_registers_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: sim_available_registers = <0x%lx>\n",
                      (long) current_gdbarch->sim_available_registers);
  fprintf_unfiltered (file,
a2073 23
gdbarch_remote_num_g_packet_regs_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->remote_num_g_packet_regs != 0;
}

int
gdbarch_remote_num_g_packet_regs (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_remote_num_g_packet_regs called\n");
  return gdbarch->remote_num_g_packet_regs;
}

void
set_gdbarch_remote_num_g_packet_regs (struct gdbarch *gdbarch,
                                      int remote_num_g_packet_regs)
{
  gdbarch->remote_num_g_packet_regs = remote_num_g_packet_regs;
}

int
a2554 48
gdbarch_sim_available_registers_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->sim_available_registers != NULL;
}

char *
gdbarch_sim_available_registers (struct gdbarch *gdbarch, const struct target_ops *target)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->sim_available_registers != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sim_available_registers called\n");
  return gdbarch->sim_available_registers (gdbarch, target);
}

void
set_gdbarch_sim_available_registers (struct gdbarch *gdbarch,
                                     gdbarch_sim_available_registers_ftype sim_available_registers)
{
  gdbarch->sim_available_registers = sim_available_registers;
}

int
gdbarch_register_remote_regno_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_remote_regno != NULL;
}

int
gdbarch_register_remote_regno (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_remote_regno != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_remote_regno called\n");
  return gdbarch->register_remote_regno (reg_nr);
}

void
set_gdbarch_register_remote_regno (struct gdbarch *gdbarch,
                                   gdbarch_register_remote_regno_ftype register_remote_regno)
{
  gdbarch->register_remote_regno = register_remote_regno;
}

int
@


1.326
log
@2005-05-13  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (pseudo_register_read, pseudo_register_write)
	(value_to_register, register_to_value, pointer_to_address)
	(address_to_pointer, return_value, extract_return_value)
	(store_return_value): Instead of a void pointer, use gdb_byte.
	* gdbarch.h, gdbarch.c: Regenerate.
	* inferior.h (unsigned_address_to_pointer)
	(signed_pointer_to_address, address_to_signed_pointer)
	(unsigned_pointer_to_address): Update.
	* arch-utils.h (legacy_return_value):
	* arch-utils.c (legacy_extract_return_value)
	(legacy_return_value): Update.
	* findvar.c (unsigned_pointer_to_address)
	(signed_pointer_to_address, unsigned_address_to_pointer)
	(address_to_signed_pointer): Update.
@
text
@a169 1
  gdbarch_deprecated_push_arguments_ftype *deprecated_push_arguments;
a295 1
  0,  /* deprecated_push_arguments */
a552 1
  /* Skip verify of deprecated_push_arguments, has predicate */
a879 18
#ifdef DEPRECATED_PUSH_ARGUMENTS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS_P()",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_push_arguments_p() = %d\n",
                      gdbarch_deprecated_push_arguments_p (current_gdbarch));
#ifdef DEPRECATED_PUSH_ARGUMENTS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr)",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_push_arguments = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_push_arguments);
a2357 24
gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_arguments != NULL;
}

CORE_ADDR
gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_push_arguments != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_arguments called\n");
  return gdbarch->deprecated_push_arguments (nargs, args, sp, struct_return, struct_addr);
}

void
set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments)
{
  gdbarch->deprecated_push_arguments = deprecated_push_arguments;
}

int
@


1.325
log
@2005-05-09  Andrew Cagney  <cagney@@gnu.org>

	Use gdb_byte in preference to bfd_byte.
	* gdbarch.sh: Update.
	* gdbarch.h, gdbarch.c: Re-generate.
	* ada-lang.c, ada-lang.h, ada-valprint.c, arch-utils.c: Update.
	* c-lang.c, c-lang.h, c-valprint.c, cp-valprint.c: Update.
	* f-lang.c, f-lang.h, f-valprint.c, gdbcore.h, jv-lang.h: Update.
	* jv-valprint.c, language.c, language.h, m2-lang.c: Update.
	* m2-lang.h, m2-valprint.c, objc-lang.c, p-lang.c: Update.
	* p-lang.h, p-valprint.c, regcache.c, scm-lang.c: Update.
	* scm-lang.h, scm-valprint.c, target.c, target.h: Update.
	* tramp-frame.c, valarith.c, valops.c, valprint.c: Update.
	* valprint.h, value.c, value.h: Update.
@
text
@d2019 1
a2019 1
gdbarch_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, void *buf)
d2043 1
a2043 1
gdbarch_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const void *buf)
d2657 1
a2657 1
gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, void *buf)
d2674 1
a2674 1
gdbarch_value_to_register (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, const void *buf)
d2691 1
a2691 1
gdbarch_pointer_to_address (struct gdbarch *gdbarch, struct type *type, const void *buf)
d2708 1
a2708 1
gdbarch_address_to_pointer (struct gdbarch *gdbarch, struct type *type, void *buf, CORE_ADDR addr)
d2780 1
a2780 1
gdbarch_return_value (struct gdbarch *gdbarch, struct type *valtype, struct regcache *regcache, void *readbuf, const void *writebuf)
d2798 1
a2798 1
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, void *valbuf)
d2815 1
a2815 1
gdbarch_store_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, const void *valbuf)
@


1.324
log
@	* gdbarch.sh (deprecated_current_gdbarch_select_hack): Flush
	cached frames when changing gdbarch.
	* gdbarch.c: Regenerated.
@
text
@d2732 1
a2732 1
gdbarch_integer_to_address (struct gdbarch *gdbarch, struct type *type, const bfd_byte *buf)
d2832 1
a2832 1
gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, bfd_byte *regbuf, bfd_byte *valbuf)
d2849 1
a2849 1
gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch, struct type *type, bfd_byte *valbuf)
d2940 1
a2940 1
const bfd_byte *
d2982 1
a2982 1
gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, bfd_byte *contents_cache)
d2999 1
a2999 1
gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, bfd_byte *contents_cache)
@


1.323
log
@2005-05-01  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_extract_return_value)
	(breakpoint_from_pc, deprecated_store_return_value)
	(memory_insert_breakpoint, memory_remove_breakpoint): Change type
	of buffer to a bfd_byte pointer.
	* gdbarch.h, gdbarch.c: Re-generate.
	* mem-break.c (memory_insert_breakpoint)
	(memory_remove_breakpoint, default_memory_insert_breakpoint)
	(default_memory_remove_breakpoint): Update.
	* target.h (memory_insert_breakpoint)
	(memory_remove_breakpoint, default_memory_insert_breakpoint)
	(default_memory_remove_breakpoint): Update declarations.
	(struct target_ops): Update to_insert_breakpoint and
	to_remove_breakpoint.
	* target.c (debug_to_remove_breakpoint)
	(debug_to_insert_breakpoint): Update.
	* remote-m32r-sdi.c (m32r_remove_breakpoint)
	(m32r_insert_breakpoint): Update.
	* m32r-tdep.c (m32r_memory_insert_breakpoint)
	(m32r_memory_remove_breakpoint): Update.
	* remote-e7000.c (e7000_insert_breakpoint)
	(e7000_remove_breakpoint): Update.
	* remote-rdi.c (arm_rdi_insert_breakpoint)
	(arm_rdi_remove_breakpoint): Update.
	* remote-sim.c (gdbsim_insert_breakpoint)
	(gdbsim_remove_breakpoint): Update.
	* exec.c (ignore): Update.
	* rs6000-tdep.c (rs6000_extract_return_value): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint)
	(ia64_memory_remove_breakpoint): Update.
	* remote-rdp.c (remote_rdp_insert_breakpoint)
	(remote_rdp_remove_breakpoint): Update.
@
text
@d4244 1
@


1.322
log
@	* gdbarch.sh (fetch_tls_load_module_address): New architecture method.
	* gdbarch.c, gdbarch.h: Regenerate.
	* dwarf2loc.c (dwarf_expr_tls_address): Fetch TLS load module
	address and pass this address, instead of the objfile address, to
	target_get_thread_local_address().
	* linux-thread-db.c (thread_db_get_thread_local_address): Change
	second parameter from type ``struct objfile *'' to CORE_ADDR.  Do
	not call svr4_fetch_objfile_link_map() to fetch the load module
	address.
	* target.h (struct target_ops): Change second parameter of
	``to_get_thread_local_address'' from ``struct objfile *'' to
	``CORE_ADDR''.
	* alpha-linux-tdep.c (solib-svr4.h): Include.
	(alpha_linux_init_abi): Register TLS load module fetcher.
	* amd64-linux-tdep.c (amd64_linux_init_abi): Likewise.
	* hppa-linux-tdep.c (hppa_linux_init_abi): Likewise.
	* i386-linux-tdep.c (i386_linux_init_abi): Likewise.
	* ia64-linux-tdep.c (solib-svr4.h): Include.
	(ia64_linux_init_abi): Register TLS load module fetcher.
	* m32r-linux-tdep.c (m32r_linux_init_abi): Likewise.
	* m68klinux-tdep.c (m68k_linux_init_abi): Likewise.
	* mips-linux-tdep.c (mips_linux_init_abi): Likewise.
	* s390-tdep.c (s390_gdbarch_init): Likewise.
	* sparc-linux-tdep.c (sparc32_linux_init_abi): Likewise.
	* sparc64-linux-tdep.c (solib-svr4.h): Include.
	(sparc64_linux_init_abi): Register TLS load module fetcher.
	* Makefile.in (alpha-linux-tdep.o, ia64-linux-tdep.o)
	(sparc-linux-tdep.o): Update dependencies.
@
text
@d2832 1
a2832 1
gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, char *regbuf, char *valbuf)
d2849 1
a2849 1
gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch, struct type *type, char *valbuf)
d2940 1
a2940 1
const unsigned char *
d2982 1
a2982 1
gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, char *contents_cache)
d2999 1
a2999 1
gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, char *contents_cache)
@


1.321
log
@2005-02-24  Andrew Cagney  <cagney@@gnu.org>

	Add show_VARIABLE functions, update add_setshow call.
	* varobj.c (_initialize_varobj, show_varobjdebug): Add and update.
	* valprint.c (_initialize_valprint, show_print_max)
	(show_stop_print_at_null, show_repeat_count_threshold)
	(show_prettyprint_structs, show_unionprint)
	(show_prettyprint_arrays, show_addressprint, show_input_radix)
	(show_output_radix): Ditto.
	* valops.c (_initialize_valops, show_overload_resolution): Ditto.
	* utils.c (initialize_utils, show_chars_per_line)
	(show_lines_per_page, show_demangle, show_pagination_enabled)
	(show_sevenbit_strings, show_asm_demangle): Ditto
	* tui/tui-win.c (_initialize_tui_win, show_tui_border_kind)
	(show_tui_border_mode, show_tui_active_border_mode): Ditto.
	* top.c (init_main, show_new_async_prompt)
	(show_async_command_editing_p, show_write_history_p)
	(show_history_size, show_history_filename, show_caution)
	(show_annotation_level, init_main): Ditto.
	* target.c (initialize_targets, show_targetdebug)
	(show_trust_readonly): Ditto.
	* symfile.c (_initialize_symfile, show_symbol_reloading)
	(show_ext_args, show_download_write_size)
	(show_debug_file_directory): Ditto.
	* source.c (_initialize_source, show_lines_to_list): Ditto.
	* solib.c (_initialize_solib, show_auto_solib_add)
	(show_solib_search_path): Ditto.
	* p-valprint.c (_initialize_pascal_valprint)
	(show_pascal_static_field_print): Ditto.
	* printcmd.c (_initialize_printcmd, show_max_symbolic_offset)
	(show_print_symbol_filename): Add and update.
	* parse.c (_initialize_parse, show_expressiondebug): Dito.
	* observer.c (_initialize_observer, show_observer_debug): Dito.
	* maint.c (_initialize_maint_cmds, show_watchdog)
	(show_maintenance_profile_p): Dito.
	* linux-nat.c (_initialize_linux_nat, show_debug_linux_nat): Dito.
	* infrun.c (_initialize_infrun, show_debug_infrun)
	(show_stop_on_solib_events, show_follow_fork_mode_string)
	(show_scheduler_mode, show_step_stop_if_no_debug): Ditto.
	* infcall.c (_initialize_infcall, show_coerce_float_to_double_p)
	(show_unwind_on_signal_p): Ditto.
	* gdbtypes.c (build_gdbtypes, show_opaque_type_resolution)
	(_initialize_gdbtypes, show_overload_debug): Ditto.
	* gdb-events.c, gdb-events.sh (_initialize_gdb_events)
	(show_gdb_events_debug): Ditto.
	* gdbarch.c, gdbarch.sh (show_gdbarch_debug)
	(_initialize_gdbarch): Ditto.
	* frame.c (_initialize_frame, show_backtrace_past_main)
	(show_backtrace_past_entry, show_backtrace_limit)
	(show_frame_debug): Ditto.
	* exec.c (_initialize_exec, show_write_files): Ditto.
	* dwarf2read.c (_initialize_dwarf2_read)
	(show_dwarf2_max_cache_age): Ditto.
	* demangle.c (_initialize_demangler)
	(show_demangling_style_names): Ditto.
	* dcache.c (_initialize_dcache, show_dcache_enabled_p): Ditto.
	* cp-valprint.c (show_static_field_print)
	(_initialize_cp_valprint, show_vtblprint, show_objectprint): Ditto.
	* corefile.c (_initialize_core, show_gnutarget_string): Ditto.
	* cli/cli-logging.c (_initialize_cli_logging)
	(show_logging_overwrite, show_logging_redirect)
	(show_logging_filename): Ditto.
	* cli/cli-cmds.c (show_info_verbose, show_history_expansion_p)
	(init_cli_cmds, show_baud_rate, show_remote_debug)
	(show_remote_timeout, show_max_user_call_depth): Ditto.
	* charset.c (show_host_charset_name, show_target_charset_name)
	(initialize_charset): Ditto.
	* breakpoint.c (show_can_use_hw_watchpoints)
	(show_pending_break_support, _initialize_breakpoint): Ditto.
@
text
@d206 1
d333 1
d588 1
d1096 18
d3066 24
@


1.321.2.1
log
@2005-03-28  Paul Brook  <paul@@codesourcery.com>
	Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb/Makefile.in: arm-tdep.o depends on $(observer_h).
	* gdb/arm-linux-nat.c (fetch_fpregister, fetch_fpregs,
	store_fpregister, store_fpregs): Rename...
	(fetch_fpa_register, fetch_fpa_regs, store_fpa_register,
	store_fpa_regs): ... to this.
	* gdb/arm-linux-tdep.c (arm_linux_init_abi): Provide ABI specific
	overrides.
	* gdb/arm-tdep.c: Include opserver.h.
	(struct gdbarch_tdep_info): Add.
	(arm_push_dummy_call): Handle doubleword alignment.
	(arm_register_type): Handle iWMMXt and VFP regs.
	(arm_register_byte): Ditto.
	(arm_pseudo_register_read): New function.
	(arm_pseudo_register_write): New function.
	(arm_dwarf_reg_to_regnum): New function.
	(arm_register_sim_regno): Handle iWMMXT regs.
	(arm_register_remote_regno): New function.
	(arm_extract_return_value): Use new macro names.
	(arm_register_name): Handle iWMMXt and VFP registers.
	(arm_sim_available_registers): New function.
	(arm_update_architecture): New function.
	(arm_gdbarch_init): Handle optional register sets.  Register new
	hooks.  Fix misleading error message.
	(_initialize_arm_tdep): Call observer_attach_inferior_created.
	* gdb/arm-tdep.h (ARM_NUM_FP_ARG_REGS, ARM_LAST_FP_ARG_REGNUM,
	FP_REGISTER_SIZE, NUM_FREGS): Rename ...
	(ARM_NUM_FPA_ARG_REGS, ARM_LAST_FPA_ARG_REGNUM, FPA_REGISTER_SIZE,
	NUM_FPA_REGS): ... to this.
	(NUM_IWMMXT_COP0REGS, NUM_IWMMXT_COP1REGS, NUM_IWMMXT_REGS,
	IWMMXT_COP0_REGSIZE, IWMMXT_COP1_REGSIZE, NUM_VFP_XREGS,
	VFP_XREG_SIZE, NUM_VFP_SREGS, VFP_SREG_SIZE, NUM_VFP_PSEUDOS): Define.
	(struct gdbarch_tdep): Add target_has_iwmmxt_regs,
	target_has_vfp_regs, first_iwmmxt_regnum, target_iwmmxt_regnum,
	first_vfp_regnum, first_vfp_pseudo and target_vfp_regnum.
	* gdb/gdbarch.c (struct gdbarch): Add remote_num_g_packet_regs,
	sim_available_registers and register_remote_regno.
	(startup_gdbarch, verify_gdbarch): Ditto.
	(gdbarch_dump): Dump new fields.
	(gdbarch_remote_num_g_packet_regs_p, gdbarch_remote_num_g_packet_regs,
	set_gdbarch_remote_num_g_packet_regs,
	gdbarch_sim_available_registers_p, gdbarch_sim_available_registers,
	set_gdbarch_sim_available_registers, gdbarch_register_remote_regno_p,
	gdbarch_register_remote_regno, set_gdbarch_register_remote_regno):
	New functions.
	* gdb/gdbarch.h: Add prototypes.
	* gdb/gdbarch.sh: Add new fields.
	(deprecated_current_gdbarch_select_hack): Call flush_cached_frames.
	* gdb/remote-sim.h (gdbsim_create_inferior): Call
	observer_notify_inferior_created.
	(gdbsim_xfer_partial): New function.
	(init_gdbsim_ops): Use it.
	* gdb/remote.c (struct remote_state): Add num_g_regs.
	(init_remote_state): Only consider hard regs.  Allow target to provide
	register mapping.
	(packet_reg_from_regnum): Don't check pseudo regs.
	(packet_reg_from_pnum): Ditto.
	(remote_protocol_qPart_availableRegisters): Add.
	(set_remote_protocol_qPart_availableRegisters_packet_cmd,
	show_remote_protocol_qPart_availableRegisters_packet_cmd): New
	functions.
	(fetch_register_using_p, store_register_using_P): Handle arbitrary
	register mappings.
	(fetch_registers_using_g): New function.
	(remote_fetch_registers): Use it.
	(store_registers_using_G): New function.
	(remote_store_registers): Use it.
	(remote_xfer_partial): Handle TARGET_OBJECT_AVAILABLE_REGISTERS.
	(show_remote_cmd): Display availableRegisters.
	(_initialize_remote): Register qPart_availableRegisters.
	* gdb/target.h (enum target_object): Add
	TARGET_OBJECT_AVAILABLE_REGISTERS.
	* gdb/gdbserver/configure.srv (arm*-*-linux*): set
	srv_linux_regsets=yes.
	* gdb/gdbserver/linux-arm-low.c (PTRACE_GETWMMXREGS,
	PTRACE_SETWMMXREGS): Define.
	(arm_fill_gregset, arm_store_gregset, arm_fill_wmmxregset,
	arm_store_wmmxregset, arm_available_registers): New functions.
	(target_regsets): Add.
	(the_low_target): Use arm_available_registers.
	* gdb/gdbserver/linux-low.c (linux_available_registers): New function.
	(linux_target_op): Use it.
	* gdb/gdbserver/linux-low.h (gdbserver/linux-low.h): Add
	available_registers.
	(use_regsets_p): Declare.
	* gdb/gdbserver/regcache.c (g_register_bytes): Add.
	(regcache_invalidate, registers_to_string, registers_from_string):
	Use it.
	(set_register_cache): Set g_register_bytes.
	(supply_register_as_string): New function.
	* gdb/gdbserver/regcache.h (supply_register_as_string): Add prototype.
	* gdb/gdbserver/server.c (handle_query): Handle
	qPart:availableRegisters.
	(handle_p_packet, handle_P_packet): New functions.
	(main): Handle 'p' and 'P' packets.
	* gdb/gdbserver/target.h (struct target_ops): Add available_registers.
	* gdb/regformats/reg-arm.dat: Add last_g_reg and iWMMXT regs.
	* gdb/regformats/regdat.sh: Handle last_g_reg.
	* gdb/regformats/regdef.h (set_register_cache): Update prototype.
@
text
@a154 1
  int remote_num_g_packet_regs;
a180 2
  gdbarch_sim_available_registers_ftype *sim_available_registers;
  gdbarch_register_remote_regno_ftype *register_remote_regno;
a280 1
  0,  /* remote_num_g_packet_regs */
a306 2
  0,  /* sim_available_registers */
  0,  /* register_remote_regno */
a538 1
  /* Skip verify of remote_num_g_packet_regs, has predicate */
a562 2
  /* Skip verify of sim_available_registers, has predicate */
  /* Skip verify of register_remote_regno, has predicate */
a1446 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_register_remote_regno_p() = %d\n",
                      gdbarch_register_remote_regno_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_remote_regno = <0x%lx>\n",
                      (long) current_gdbarch->register_remote_regno);
a1477 6
                      "gdbarch_dump: gdbarch_remote_num_g_packet_regs_p() = %d\n",
                      gdbarch_remote_num_g_packet_regs_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: remote_num_g_packet_regs = %s\n",
                      paddr_d (current_gdbarch->remote_num_g_packet_regs));
  fprintf_unfiltered (file,
a1503 6
                      "gdbarch_dump: gdbarch_sim_available_registers_p() = %d\n",
                      gdbarch_sim_available_registers_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: sim_available_registers = <0x%lx>\n",
                      (long) current_gdbarch->sim_available_registers);
  fprintf_unfiltered (file,
a2073 23
gdbarch_remote_num_g_packet_regs_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->remote_num_g_packet_regs != 0;
}

int
gdbarch_remote_num_g_packet_regs (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_remote_num_g_packet_regs called\n");
  return gdbarch->remote_num_g_packet_regs;
}

void
set_gdbarch_remote_num_g_packet_regs (struct gdbarch *gdbarch,
                                      int remote_num_g_packet_regs)
{
  gdbarch->remote_num_g_packet_regs = remote_num_g_packet_regs;
}

int
a2578 48
gdbarch_sim_available_registers_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->sim_available_registers != NULL;
}

char *
gdbarch_sim_available_registers (struct gdbarch *gdbarch, const struct target_ops *target)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->sim_available_registers != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sim_available_registers called\n");
  return gdbarch->sim_available_registers (gdbarch, target);
}

void
set_gdbarch_sim_available_registers (struct gdbarch *gdbarch,
                                     gdbarch_sim_available_registers_ftype sim_available_registers)
{
  gdbarch->sim_available_registers = sim_available_registers;
}

int
gdbarch_register_remote_regno_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_remote_regno != NULL;
}

int
gdbarch_register_remote_regno (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_remote_regno != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_remote_regno called\n");
  return gdbarch->register_remote_regno (reg_nr);
}

void
set_gdbarch_register_remote_regno (struct gdbarch *gdbarch,
                                   gdbarch_register_remote_regno_ftype register_remote_regno)
{
  gdbarch->register_remote_regno = register_remote_regno;
}

int
a4198 1
  flush_cached_frames (); /* FIXME should this be attached to an observer?  */
@


1.320
log
@2005-02-18  Andrew Cagney  <cagney@@gnu.org>

	Use add_setshow_zinteger_cmd through out.  Re-sync gdbarch.sh
	and gdbarch.c.
	* breakpoint.c, frame.c, gdb-events.sh, gdbarch.sh: Update.
	* gdbtypes.c, infrun.c, linux-nat.c, maint.c, monitor.c: Update.
	* pa64solib.c, parse.c, remote-mips.c, ser-go32.c: Update.
	* serial.c, solib-frv.c, somsolib.c, target.c, top.c: Update.
	* varobj.c, cli/cli-cmds.c: Update.
	* gdbarch.c, gdb-events.c: Regenerate.
@
text
@d64 6
d4213 1
a4213 1
                            NULL, /* FIXME: i18n: */
@


1.319
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up error_no_arg, query, perror_with_name, complaint, and
	internal_error.
	* breakpoint.c, cp-abi.c, cp-namespace.c, cp-support.c: Update.
	* cris-tdep.c, dbxread.c, dictionary.c, dsrec.c: Update.
	* dummy-frame.c, dve3900-rom.c, dwarf2-frame.c, dwarf2expr.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, event-loop.c: Update.
	* exceptions.c, exec.c, f-lang.c, findvar.c, fork-child.c: Update.
	* frame-unwind.c, frame.c, frv-linux-tdep.c, frv-tdep.c: Update.
	* gdb_assert.h, gdbarch.c, gdbtypes.c, gnu-nat.c: Update.
	* go32-nat.c, hppa-tdep.c, hppabsd-nat.c, hpread.c: Update.
	* i386-linux-nat.c, i386-nat.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386fbsd-nat.c, inf-ptrace.c, inf-ttrace.c, infcall.c: Update.
	* infcmd.c, inflow.c, infptrace.c, infrun.c, inftarg.c: Update.
	* interps.c, language.c, linespec.c, linux-nat.c: Update.
	* m32r-linux-nat.c, m68k-tdep.c, m68kbsd-nat.c: Update.
	* m68klinux-nat.c, m88kbsd-nat.c, macroexp.c, macroscope.c: Update.
	* macrotab.c, maint.c, mdebugread.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mips64obsd-nat.c: Update.
	* mipsnbsd-nat.c, mn10300-tdep.c, monitor.c, nto-procfs.c: Update.
	* objc-lang.c, objfiles.c, objfiles.h, ocd.c, osabi.c: Update.
	* parse.c, ppc-bdm.c, ppc-linux-nat.c, ppc-sysv-tdep.c: Update.
	* ppcnbsd-nat.c, ppcobsd-nat.c, printcmd.c, procfs.c: Update.
	* regcache.c, reggroups.c, remote-e7000.c, remote-mips.c: Update.
	* remote-rdp.c, remote-sds.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote.c, rs6000-nat.c, rs6000-tdep.c: Update.
	* s390-nat.c, s390-tdep.c, sentinel-frame.c, serial.c: Update.
	* sh-tdep.c, sh3-rom.c, sh64-tdep.c, shnbsd-nat.c: Update.
	* solib-aix5.c, solib-svr4.c, solib.c, source.c: Update.
	* sparc-nat.c, stabsread.c, stack.c, symfile.c, symtab.c: Update.
	* symtab.h, target.c, tracepoint.c, ui-file.c, ui-out.c: Update.
	* utils.c, valops.c, valprint.c, vax-nat.c, vaxbsd-nat.c: Update.
	* win32-nat.c, xcoffread.c, xstormy16-tdep.c: Update.
	* cli/cli-cmds.c, cli/cli-logging.c, cli/cli-script.c: Update.
	* cli/cli-setshow.c, mi/mi-cmd-break.c, mi/mi-cmds.c: Update.
	* mi/mi-console.c, mi/mi-getopt.c, mi/mi-out.c: Update.
	* tui/tui-file.c, tui/tui-interp.c: Update.
@
text
@d3968 1
a3968 1
                      "gdbarch: Attempt to register unknown architecture (%d)",
d3978 1
a3978 1
                        "gdbarch: Duplicate registraration of architecture (%s)",
d4202 7
a4208 8
  deprecated_add_show_from_set
    (add_set_cmd ("arch",
	          class_maintenance,
		  var_zinteger,
		  (char *)&gdbarch_debug,
		  "Set architecture debugging.\n\
When non-zero, architecture debugging is enabled.", &setdebuglist),
     &showdebuglist);
@


1.318
log
@2005-02-09  Andrew Cagney  <cagney@@gnu.org>

	* NEWS: Mention removed commands.
	* m68hc11-tdep.c (show_regs): Delete, unused.
	(_initialize_m68hc11_tdep): Delete deprecated "regs" command.
	* gdb-events.sh: Delete deprecated "set eventdebug" and "show
	eventdebug" commands.
	* gdb-events.c: Regenerate.
	* gdbarch.sh: Delete deprecated "set archdebug" and "show
	archdebug" commands.
	* gdbarch.c: Regenerate.
	* cli/cli-cmds.c (init_cli_cmds): Delete deprecated "set
	remotedebug" and "show remotedebug".
	* arm-tdep.c (_initialize_arm_tdep): Delete deprecated "set arm
	disassembly-flavor", "show arm disassembly-flavor", and
	"othernames" commands.
	(arm_othernames): Delete unused function.
@
text
@d616 1
a616 1
                    "verify_gdbarch: the following are invalid ...%s",
d3943 1
a3943 1
                        "gdbarch_architecture_names: multi-arch unknown");
@


1.317
log
@2005-01-27  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (integer_to_address): Change buf parameter to a const
	bfd_byte, make pure-multi-arch.
	* gdbarch.h, gdbarch.c: Regenerate.
	* mips-tdep.c (mips_integer_to_address): Update.
	* value.c (value_as_address): Update.
@
text
@a4209 9
  c = add_set_cmd ("archdebug",
		   class_maintenance,
		   var_zinteger,
		   (char *)&gdbarch_debug,
		   "Set architecture debugging.\n\
When non-zero, architecture debugging is enabled.", &setlist);

  deprecate_cmd (c, "set debug arch");
  deprecate_cmd (deprecated_add_show_from_set (c, &showlist), "show debug arch");
@


1.316
log
@2004-12-03  Randolph Chung  <tausq@@debian.org>

	* gdbarch.sh (instruction_nullified): Delete.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* hppa-tdep.c (hppa_target_read_pc): Adjust pc if instruction is
	nullified.
	(hppa_unwind_pc): Likewise.
	(hppa_instruction_nullified): Delete.
	(hppa_gdbarch_init): Don't set instruction_nullified method.
	* infrun.c (infwait_states): Remove infwait_nullified_state.
	(handle_inferior_event): Remove handling of infwait_nullified_state.
	Remove handling of nullified instructions.


testsuite/

	* gdb.arch/pa-nullify.exp: New file.
	* gdb.arch/pa-nullify.s: New file.
@
text
@d5 1
a5 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free
a1205 6
#ifdef INTEGER_TO_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INTEGER_TO_ADDRESS_P()",
                      XSTRING (INTEGER_TO_ADDRESS_P ()));
#endif
a1208 6
#ifdef INTEGER_TO_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INTEGER_TO_ADDRESS(type, buf)",
                      XSTRING (INTEGER_TO_ADDRESS (type, buf)));
#endif
d2705 1
a2705 1
gdbarch_integer_to_address (struct gdbarch *gdbarch, struct type *type, void *buf)
d2711 1
a2711 1
  return gdbarch->integer_to_address (type, buf);
@


1.315
log
@2004-11-23  Randolph Chung  <tausq@@debian.org>

	* arch-utils.c (generic_instruction_nullified): New.
	* arch-utils.h (generic_instruction_nullified): New.
	* gdbarch.sh (instruction_nullified): New method.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* infrun.c (INSTRUCTION_NULLIFIED): Delete.
	(handle_inferior_event): Replace INSTRUCTION_NULLIFIED with calls to
	new gdbarch method.
	* config/pa/tm-hppa.h (INSTRUCTION_NULLIFIED): Delete definition.
	* hppa-tdep.c (hppa_instruction_nullified): Remove prototype and make
	static.  Rewrite to work directly off the passed regcache.
	(hppa_gdbarch_init): Set instruction_nullified method.
@
text
@a214 1
  gdbarch_instruction_nullified_ftype *instruction_nullified;
a340 1
  generic_instruction_nullified,  /* instruction_nullified */
a437 1
  current_gdbarch->instruction_nullified = generic_instruction_nullified;
a593 1
  /* Skip verify of instruction_nullified, invalid_p == 0 */
a1197 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: instruction_nullified = <0x%lx>\n",
                      (long) current_gdbarch->instruction_nullified);
a3368 17
gdbarch_instruction_nullified (struct gdbarch *gdbarch, struct regcache *regcache)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->instruction_nullified != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_instruction_nullified called\n");
  return gdbarch->instruction_nullified (gdbarch, regcache);
}

void
set_gdbarch_instruction_nullified (struct gdbarch *gdbarch,
                                   gdbarch_instruction_nullified_ftype instruction_nullified)
{
  gdbarch->instruction_nullified = instruction_nullified;
}

int
@


1.314
log
@2004-10-31  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (in_solib_call_trampoline): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d215 1
d342 1
d440 1
d597 1
d1202 3
d3376 17
@


1.313
log
@2004-10-31  Orjan Friberg <organ.friberg@@axis.com>
	    Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (single_step_through_delay): Add.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/mips/tm-mips.h (STEP_SKIPS_DELAY_P, STEP_SKIPS_DELAY)
	(mips_step_skips_delay): Delete.
	* mips-tdep.c (mips_single_step_through_delay): Replace
	mips_step_skips_delay.
	(mips_gdbarch_init): Set single_step_through_delay.
	(mips_dump_tdep): Do not print STEP_SKIPS_DELAY.
@
text
@a217 1
  gdbarch_in_solib_call_trampoline_ftype *in_solib_call_trampoline;
a343 1
  0,  /* in_solib_call_trampoline */
a439 1
  current_gdbarch->in_solib_call_trampoline = generic_in_solib_call_trampoline;
a597 1
  /* Skip verify of in_solib_call_trampoline, invalid_p == 0 */
a1179 9
#ifdef IN_SOLIB_CALL_TRAMPOLINE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_CALL_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_CALL_TRAMPOLINE (pc, name)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: in_solib_call_trampoline = <0x%lx>\n",
                      (long) current_gdbarch->in_solib_call_trampoline);
a3419 17
gdbarch_in_solib_call_trampoline (struct gdbarch *gdbarch, CORE_ADDR pc, char *name)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->in_solib_call_trampoline != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_in_solib_call_trampoline called\n");
  return gdbarch->in_solib_call_trampoline (pc, name);
}

void
set_gdbarch_in_solib_call_trampoline (struct gdbarch *gdbarch,
                                      gdbarch_in_solib_call_trampoline_ftype in_solib_call_trampoline)
{
  gdbarch->in_solib_call_trampoline = in_solib_call_trampoline;
}

int
@


1.312
log
@2004-09-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh: Instead of GDB_MULTI_ARCH print GDB_NM_FILE,
	GDB_TM_FILE and GDB_XM_FILE.
	* gdbarch.c: Re-generate.
	* configure.in (GDB_XM_FILE, GDB_NM_FILE, GDB_TM_FILE): Include
	quotes in macro definition.
	* configure.in: Re-generate.
@
text
@d214 1
d341 1
d596 1
d1522 6
d3358 24
@


1.311
log
@2004-09-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh: Delete check for GDB_MULTI_ARCH_PARTIAL when
	validating architecture methods.
	* gdbarch.c: Re-generate.
@
text
@d634 18
d653 2
a654 2
                      "gdbarch_dump: GDB_MULTI_ARCH = %d\n",
                      GDB_MULTI_ARCH);
@


1.310
log
@2004-08-08  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (pformat): New function.
	(float_format, double_format, long_double_format): List with bit
	members.  Use pformat when printing.
	* gdbarch.c, gdbarch.h: Re-generate.
@
text
@d531 1
a531 2
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->num_regs == -1))
d569 1
a569 2
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->skip_prologue == 0))
d571 1
a571 2
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->inner_than == 0))
d573 1
a573 2
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->breakpoint_from_pc == 0))
d594 1
a594 2
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->print_insn == 0))
@


1.309
log
@2004-08-05  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_frame_saved_pc): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (deprecated_read_fp, deprecated_write_sp): Delete.
	* inferior.h (deprecated_read_fp, deprecated_write_sp): Delete.
	* frame.h: Delete deprecated_read_fp from comments.
	* arch-utils.c (deprecated_init_frame_pc_default): Delete.
	* arch-utils.h (deprecated_init_frame_pc_default): Delete.

Index: doc/ChangeLog
2004-08-05  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Delete
	reference to deprecated_read_fp.
@
text
@d65 9
d132 1
d134 1
d136 1
a209 3
  const struct floatformat * float_format;
  const struct floatformat * double_format;
  const struct floatformat * long_double_format;
d258 1
d260 1
d262 1
a335 3
  0,  /* float_format */
  0,  /* double_format */
  0,  /* long_double_format */
d511 2
d514 2
d517 2
a593 6
  if (current_gdbarch->float_format == 0)
    current_gdbarch->float_format = default_float_format (current_gdbarch);
  if (current_gdbarch->double_format == 0)
    current_gdbarch->double_format = default_double_format (current_gdbarch);
  if (current_gdbarch->long_double_format == 0)
    current_gdbarch->long_double_format = default_double_format (current_gdbarch);
d1011 1
a1011 1
                      (TARGET_DOUBLE_FORMAT)->name);
d1090 1
a1090 1
                      (TARGET_FLOAT_FORMAT)->name);
d1244 1
a1244 1
                      (TARGET_LONG_DOUBLE_FORMAT)->name);
d1753 16
d1786 16
d1819 16
a3259 48
const struct floatformat *
gdbarch_float_format (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_float_format called\n");
  return gdbarch->float_format;
}

void
set_gdbarch_float_format (struct gdbarch *gdbarch,
                          const struct floatformat * float_format)
{
  gdbarch->float_format = float_format;
}

const struct floatformat *
gdbarch_double_format (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_double_format called\n");
  return gdbarch->double_format;
}

void
set_gdbarch_double_format (struct gdbarch *gdbarch,
                           const struct floatformat * double_format)
{
  gdbarch->double_format = double_format;
}

const struct floatformat *
gdbarch_long_double_format (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_double_format called\n");
  return gdbarch->long_double_format;
}

void
set_gdbarch_long_double_format (struct gdbarch *gdbarch,
                                const struct floatformat * long_double_format)
{
  gdbarch->long_double_format = long_double_format;
}

@


1.308
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_target_read_fp)
	(deprecated_frame_locals_address, deprecated_frame_args_address)
	(deprecated_frame_chain_valid, deprecated_frame_chain)
	(deprecated_init_extra_frame_info, deprecated_pop_frame)
	(deprecated_frame_init_saved_regs, deprecated_get_saved_register)
	(deprecated_do_registers_info, deprecated_init_frame_pc): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (deprecated_read_fp): Do not call
	DEPRECATED_TARGET_READ_FP_P.
	* infcmd.c (default_print_registers_info): Do not call
	DEPRECATED_DO_REGISTERS_INFO.
	* frame-base.c (default_frame_locals_address): Do not call
	DEPRECATED_FRAME_LOCALS_ADDRESS.
	(default_frame_args_address): Do not call
	DEPRECATED_FRAME_ARGS_ADDRESS.
@
text
@a188 1
  gdbarch_deprecated_frame_saved_pc_ftype *deprecated_frame_saved_pc;
a314 1
  0,  /* deprecated_frame_saved_pc */
a570 1
  /* Skip verify of deprecated_frame_saved_pc, has predicate */
a844 18
#ifdef DEPRECATED_FRAME_SAVED_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_SAVED_PC_P()",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_frame_saved_pc_p() = %d\n",
                      gdbarch_deprecated_frame_saved_pc_p (current_gdbarch));
#ifdef DEPRECATED_FRAME_SAVED_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_SAVED_PC(fi)",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC (fi)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_frame_saved_pc = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_frame_saved_pc);
a3002 24
gdbarch_deprecated_frame_saved_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_saved_pc != NULL;
}

CORE_ADDR
gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch, struct frame_info *fi)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frame_saved_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_saved_pc called\n");
  return gdbarch->deprecated_frame_saved_pc (fi);
}

void
set_gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_frame_saved_pc_ftype deprecated_frame_saved_pc)
{
  gdbarch->deprecated_frame_saved_pc = deprecated_frame_saved_pc;
}

int
@


1.307
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_register_raw_size)
	(deprecated_register_virtual_size:int): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* cris-tdep.c (cris_register_size): Delete.
	(cris_gdbarch_init): Update.
	* alpha-tdep.c (alpha_register_raw_size)
	(alpha_register_virtual_size): Delete.
	(alpha_gdbarch_init): Update.
@
text
@a150 1
  gdbarch_deprecated_target_read_fp_ftype *deprecated_target_read_fp;
a155 1
  gdbarch_deprecated_do_registers_info_ftype *deprecated_do_registers_info;
a163 1
  gdbarch_deprecated_init_frame_pc_ftype *deprecated_init_frame_pc;
a164 1
  gdbarch_deprecated_get_saved_register_ftype *deprecated_get_saved_register;
a170 1
  gdbarch_deprecated_pop_frame_ftype *deprecated_pop_frame;
a178 2
  gdbarch_deprecated_frame_init_saved_regs_ftype *deprecated_frame_init_saved_regs;
  gdbarch_deprecated_init_extra_frame_info_ftype *deprecated_init_extra_frame_info;
a188 2
  gdbarch_deprecated_frame_chain_ftype *deprecated_frame_chain;
  gdbarch_deprecated_frame_chain_valid_ftype *deprecated_frame_chain_valid;
a191 2
  gdbarch_deprecated_frame_args_address_ftype *deprecated_frame_args_address;
  gdbarch_deprecated_frame_locals_address_ftype *deprecated_frame_locals_address;
a277 1
  0,  /* deprecated_target_read_fp */
a282 1
  0,  /* deprecated_do_registers_info */
a290 1
  0,  /* deprecated_init_frame_pc */
a291 1
  0,  /* deprecated_get_saved_register */
a297 1
  0,  /* deprecated_pop_frame */
a305 2
  0,  /* deprecated_frame_init_saved_regs */
  0,  /* deprecated_init_extra_frame_info */
a315 2
  0,  /* deprecated_frame_chain */
  0,  /* deprecated_frame_chain_valid */
a318 2
  get_frame_base,  /* deprecated_frame_args_address */
  get_frame_base,  /* deprecated_frame_locals_address */
a426 2
  current_gdbarch->deprecated_frame_args_address = get_frame_base;
  current_gdbarch->deprecated_frame_locals_address = get_frame_base;
a534 1
  /* Skip verify of deprecated_target_read_fp, has predicate */
a538 1
  /* Skip verify of deprecated_do_registers_info, has predicate */
a546 2
  /* Skip verify of deprecated_init_frame_pc, has predicate */
  /* Skip verify of deprecated_get_saved_register, has predicate */
a550 1
  /* Skip verify of deprecated_pop_frame, has predicate */
a556 2
  /* Skip verify of deprecated_frame_init_saved_regs, has predicate */
  /* Skip verify of deprecated_init_extra_frame_info, has predicate */
a572 2
  /* Skip verify of deprecated_frame_chain, has predicate */
  /* Skip verify of deprecated_frame_chain_valid, has predicate */
a575 2
  /* Skip verify of deprecated_frame_args_address, has predicate */
  /* Skip verify of deprecated_frame_locals_address, has predicate */
a812 18
#ifdef DEPRECATED_DO_REGISTERS_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DO_REGISTERS_INFO_P()",
                      XSTRING (DEPRECATED_DO_REGISTERS_INFO_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_do_registers_info_p() = %d\n",
                      gdbarch_deprecated_do_registers_info_p (current_gdbarch));
#ifdef DEPRECATED_DO_REGISTERS_INFO
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DO_REGISTERS_INFO(reg_nr, fpregs)",
                      XSTRING (DEPRECATED_DO_REGISTERS_INFO (reg_nr, fpregs)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_do_registers_info = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_do_registers_info);
a847 90
#ifdef DEPRECATED_FRAME_ARGS_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_ARGS_ADDRESS_P()",
                      XSTRING (DEPRECATED_FRAME_ARGS_ADDRESS_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_frame_args_address_p() = %d\n",
                      gdbarch_deprecated_frame_args_address_p (current_gdbarch));
#ifdef DEPRECATED_FRAME_ARGS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_ARGS_ADDRESS(fi)",
                      XSTRING (DEPRECATED_FRAME_ARGS_ADDRESS (fi)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_frame_args_address = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_frame_args_address);
#ifdef DEPRECATED_FRAME_CHAIN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN_P()",
                      XSTRING (DEPRECATED_FRAME_CHAIN_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_frame_chain_p() = %d\n",
                      gdbarch_deprecated_frame_chain_p (current_gdbarch));
#ifdef DEPRECATED_FRAME_CHAIN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN(frame)",
                      XSTRING (DEPRECATED_FRAME_CHAIN (frame)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_frame_chain = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain);
#ifdef DEPRECATED_FRAME_CHAIN_VALID_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN_VALID_P()",
                      XSTRING (DEPRECATED_FRAME_CHAIN_VALID_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_frame_chain_valid_p() = %d\n",
                      gdbarch_deprecated_frame_chain_valid_p (current_gdbarch));
#ifdef DEPRECATED_FRAME_CHAIN_VALID
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN_VALID(chain, thisframe)",
                      XSTRING (DEPRECATED_FRAME_CHAIN_VALID (chain, thisframe)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_frame_chain_valid = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain_valid);
#ifdef DEPRECATED_FRAME_INIT_SAVED_REGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_INIT_SAVED_REGS_P()",
                      XSTRING (DEPRECATED_FRAME_INIT_SAVED_REGS_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_frame_init_saved_regs_p() = %d\n",
                      gdbarch_deprecated_frame_init_saved_regs_p (current_gdbarch));
#ifdef DEPRECATED_FRAME_INIT_SAVED_REGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_INIT_SAVED_REGS(frame)",
                      XSTRING (DEPRECATED_FRAME_INIT_SAVED_REGS (frame)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_frame_init_saved_regs = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_frame_init_saved_regs);
#ifdef DEPRECATED_FRAME_LOCALS_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_LOCALS_ADDRESS_P()",
                      XSTRING (DEPRECATED_FRAME_LOCALS_ADDRESS_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_frame_locals_address_p() = %d\n",
                      gdbarch_deprecated_frame_locals_address_p (current_gdbarch));
#ifdef DEPRECATED_FRAME_LOCALS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_LOCALS_ADDRESS(fi)",
                      XSTRING (DEPRECATED_FRAME_LOCALS_ADDRESS (fi)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_frame_locals_address = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_frame_locals_address);
a873 72
#ifdef DEPRECATED_GET_SAVED_REGISTER_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_GET_SAVED_REGISTER_P()",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_get_saved_register_p() = %d\n",
                      gdbarch_deprecated_get_saved_register_p (current_gdbarch));
#ifdef DEPRECATED_GET_SAVED_REGISTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval)",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER (raw_buffer, optimized, addrp, frame, regnum, lval)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_get_saved_register = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_get_saved_register);
#ifdef DEPRECATED_INIT_EXTRA_FRAME_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_EXTRA_FRAME_INFO_P()",
                      XSTRING (DEPRECATED_INIT_EXTRA_FRAME_INFO_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_init_extra_frame_info_p() = %d\n",
                      gdbarch_deprecated_init_extra_frame_info_p (current_gdbarch));
#ifdef DEPRECATED_INIT_EXTRA_FRAME_INFO
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_EXTRA_FRAME_INFO(fromleaf, frame)",
                      XSTRING (DEPRECATED_INIT_EXTRA_FRAME_INFO (fromleaf, frame)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_init_extra_frame_info = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_init_extra_frame_info);
#ifdef DEPRECATED_INIT_FRAME_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_P()",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_init_frame_pc_p() = %d\n",
                      gdbarch_deprecated_init_frame_pc_p (current_gdbarch));
#ifdef DEPRECATED_INIT_FRAME_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC(fromleaf, prev)",
                      XSTRING (DEPRECATED_INIT_FRAME_PC (fromleaf, prev)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_init_frame_pc = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_init_frame_pc);
#ifdef DEPRECATED_POP_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME_P()",
                      XSTRING (DEPRECATED_POP_FRAME_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_pop_frame_p() = %d\n",
                      gdbarch_deprecated_pop_frame_p (current_gdbarch));
#ifdef DEPRECATED_POP_FRAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME(-)",
                      XSTRING (DEPRECATED_POP_FRAME (-)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_pop_frame = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_pop_frame);
a998 18
#ifdef DEPRECATED_TARGET_READ_FP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP_P()",
                      XSTRING (DEPRECATED_TARGET_READ_FP_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_target_read_fp_p() = %d\n",
                      gdbarch_deprecated_target_read_fp_p (current_gdbarch));
#ifdef DEPRECATED_TARGET_READ_FP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP()",
                      XSTRING (DEPRECATED_TARGET_READ_FP ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_target_read_fp = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_target_read_fp);
a2294 24
gdbarch_deprecated_target_read_fp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_target_read_fp != NULL;
}

CORE_ADDR
gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_target_read_fp != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_target_read_fp called\n");
  return gdbarch->deprecated_target_read_fp ();
}

void
set_gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_target_read_fp_ftype deprecated_target_read_fp)
{
  gdbarch->deprecated_target_read_fp = deprecated_target_read_fp;
}

int
a2398 24
int
gdbarch_deprecated_do_registers_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_do_registers_info != NULL;
}

void
gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch, int reg_nr, int fpregs)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_do_registers_info != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_do_registers_info called\n");
  gdbarch->deprecated_do_registers_info (reg_nr, fpregs);
}

void
set_gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_do_registers_info_ftype deprecated_do_registers_info)
{
  gdbarch->deprecated_do_registers_info = deprecated_do_registers_info;
}

a2563 24
gdbarch_deprecated_init_frame_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_init_frame_pc != NULL;
}

CORE_ADDR
gdbarch_deprecated_init_frame_pc (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_init_frame_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_frame_pc called\n");
  return gdbarch->deprecated_init_frame_pc (fromleaf, prev);
}

void
set_gdbarch_deprecated_init_frame_pc (struct gdbarch *gdbarch,
                                      gdbarch_deprecated_init_frame_pc_ftype deprecated_init_frame_pc)
{
  gdbarch->deprecated_init_frame_pc = deprecated_init_frame_pc;
}

int
a2579 24
gdbarch_deprecated_get_saved_register_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_get_saved_register != NULL;
}

void
gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR *addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_get_saved_register != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_get_saved_register called\n");
  gdbarch->deprecated_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval);
}

void
set_gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_get_saved_register_ftype deprecated_get_saved_register)
{
  gdbarch->deprecated_get_saved_register = deprecated_get_saved_register;
}

int
a2688 24
gdbarch_deprecated_pop_frame_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_pop_frame != NULL;
}

void
gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_pop_frame != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pop_frame called\n");
  gdbarch->deprecated_pop_frame ();
}

void
set_gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch,
                                  gdbarch_deprecated_pop_frame_ftype deprecated_pop_frame)
{
  gdbarch->deprecated_pop_frame = deprecated_pop_frame;
}

int
a2845 48
int
gdbarch_deprecated_frame_init_saved_regs_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_init_saved_regs != NULL;
}

void
gdbarch_deprecated_frame_init_saved_regs (struct gdbarch *gdbarch, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frame_init_saved_regs != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_init_saved_regs called\n");
  gdbarch->deprecated_frame_init_saved_regs (frame);
}

void
set_gdbarch_deprecated_frame_init_saved_regs (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_frame_init_saved_regs_ftype deprecated_frame_init_saved_regs)
{
  gdbarch->deprecated_frame_init_saved_regs = deprecated_frame_init_saved_regs;
}

int
gdbarch_deprecated_init_extra_frame_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_init_extra_frame_info != NULL;
}

void
gdbarch_deprecated_init_extra_frame_info (struct gdbarch *gdbarch, int fromleaf, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_init_extra_frame_info != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_extra_frame_info called\n");
  gdbarch->deprecated_init_extra_frame_info (fromleaf, frame);
}

void
set_gdbarch_deprecated_init_extra_frame_info (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_init_extra_frame_info_ftype deprecated_init_extra_frame_info)
{
  gdbarch->deprecated_init_extra_frame_info = deprecated_init_extra_frame_info;
}

a3023 48
gdbarch_deprecated_frame_chain_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_chain != NULL;
}

CORE_ADDR
gdbarch_deprecated_frame_chain (struct gdbarch *gdbarch, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frame_chain != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_chain called\n");
  return gdbarch->deprecated_frame_chain (frame);
}

void
set_gdbarch_deprecated_frame_chain (struct gdbarch *gdbarch,
                                    gdbarch_deprecated_frame_chain_ftype deprecated_frame_chain)
{
  gdbarch->deprecated_frame_chain = deprecated_frame_chain;
}

int
gdbarch_deprecated_frame_chain_valid_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_chain_valid != NULL;
}

int
gdbarch_deprecated_frame_chain_valid (struct gdbarch *gdbarch, CORE_ADDR chain, struct frame_info *thisframe)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frame_chain_valid != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_chain_valid called\n");
  return gdbarch->deprecated_frame_chain_valid (chain, thisframe);
}

void
set_gdbarch_deprecated_frame_chain_valid (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_frame_chain_valid_ftype deprecated_frame_chain_valid)
{
  gdbarch->deprecated_frame_chain_valid = deprecated_frame_chain_valid;
}

int
a3095 50
gdbarch_deprecated_frame_args_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_args_address != get_frame_base;
}

CORE_ADDR
gdbarch_deprecated_frame_args_address (struct gdbarch *gdbarch, struct frame_info *fi)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frame_args_address != NULL);
  /* Do not check predicate: gdbarch->deprecated_frame_args_address != get_frame_base, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_args_address called\n");
  return gdbarch->deprecated_frame_args_address (fi);
}

void
set_gdbarch_deprecated_frame_args_address (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_frame_args_address_ftype deprecated_frame_args_address)
{
  gdbarch->deprecated_frame_args_address = deprecated_frame_args_address;
}

int
gdbarch_deprecated_frame_locals_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_locals_address != get_frame_base;
}

CORE_ADDR
gdbarch_deprecated_frame_locals_address (struct gdbarch *gdbarch, struct frame_info *fi)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frame_locals_address != NULL);
  /* Do not check predicate: gdbarch->deprecated_frame_locals_address != get_frame_base, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_locals_address called\n");
  return gdbarch->deprecated_frame_locals_address (fi);
}

void
set_gdbarch_deprecated_frame_locals_address (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_frame_locals_address_ftype deprecated_frame_locals_address)
{
  gdbarch->deprecated_frame_locals_address = deprecated_frame_locals_address;
}

int
@


1.306
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_register_virtual_type)
	(deprecated_save_dummy_frame_tos, deprecated_push_return_address)
	(deprecated_dummy_write_sp): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@a148 2
  gdbarch_deprecated_register_raw_size_ftype *deprecated_register_raw_size;
  gdbarch_deprecated_register_virtual_size_ftype *deprecated_register_virtual_size;
a286 2
  generic_register_size,  /* deprecated_register_raw_size */
  generic_register_size,  /* deprecated_register_virtual_size */
a432 2
  current_gdbarch->deprecated_register_raw_size = generic_register_size;
  current_gdbarch->deprecated_register_virtual_size = generic_register_size;
a556 2
  /* Skip verify of deprecated_register_raw_size, has predicate */
  /* Skip verify of deprecated_register_virtual_size, has predicate */
a1142 18
#ifdef DEPRECATED_REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_RAW_SIZE_P()",
                      XSTRING (DEPRECATED_REGISTER_RAW_SIZE_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_register_raw_size_p() = %d\n",
                      gdbarch_deprecated_register_raw_size_p (current_gdbarch));
#ifdef DEPRECATED_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_RAW_SIZE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_RAW_SIZE (reg_nr)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_register_raw_size = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_register_raw_size);
a1150 18
#ifdef DEPRECATED_REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_SIZE_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_register_virtual_size_p() = %d\n",
                      gdbarch_deprecated_register_virtual_size_p (current_gdbarch));
#ifdef DEPRECATED_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_SIZE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_SIZE (reg_nr)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_register_virtual_size = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_size);
a2486 50
gdbarch_deprecated_register_raw_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_raw_size != generic_register_size;
}

int
gdbarch_deprecated_register_raw_size (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_raw_size != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_raw_size != generic_register_size, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_raw_size called\n");
  return gdbarch->deprecated_register_raw_size (reg_nr);
}

void
set_gdbarch_deprecated_register_raw_size (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_register_raw_size_ftype deprecated_register_raw_size)
{
  gdbarch->deprecated_register_raw_size = deprecated_register_raw_size;
}

int
gdbarch_deprecated_register_virtual_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_virtual_size != generic_register_size;
}

int
gdbarch_deprecated_register_virtual_size (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_virtual_size != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_virtual_size != generic_register_size, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_virtual_size called\n");
  return gdbarch->deprecated_register_virtual_size (reg_nr);
}

void
set_gdbarch_deprecated_register_virtual_size (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_register_virtual_size_ftype deprecated_register_virtual_size)
{
  gdbarch->deprecated_register_virtual_size = deprecated_register_virtual_size;
}

int
@


1.305
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_register_bytes): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (deprecated_register_bytes): New function.
	* regcache.h (deprecated_register_bytes): Declare.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init_32082): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* remote.c (init_remote_state): Update.
	* remote-vx.c (vx_prepare_to_store): Update.
	* remote-sds.c (sds_fetch_registers, sds_prepare_to_store): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* cris-tdep.c (cris_register_bytes_ok): Update.
	* config/nm-gnu.h (CHILD_PREPARE_TO_STORE): Update.
@
text
@a147 1
  gdbarch_deprecated_register_virtual_type_ftype *deprecated_register_virtual_type;
a151 1
  gdbarch_deprecated_save_dummy_frame_tos_ftype *deprecated_save_dummy_frame_tos;
a155 2
  gdbarch_deprecated_push_return_address_ftype *deprecated_push_return_address;
  gdbarch_deprecated_dummy_write_sp_ftype *deprecated_dummy_write_sp;
a287 1
  0,  /* deprecated_register_virtual_type */
a291 1
  0,  /* deprecated_save_dummy_frame_tos */
a295 2
  0,  /* deprecated_push_return_address */
  0,  /* deprecated_dummy_write_sp */
a561 1
  /* Skip verify of deprecated_register_virtual_type, has predicate */
a565 1
  /* Skip verify of deprecated_save_dummy_frame_tos, has predicate */
a569 2
  /* Skip verify of deprecated_push_return_address, has predicate */
  /* Skip verify of deprecated_dummy_write_sp, has predicate */
a873 18
#ifdef DEPRECATED_DUMMY_WRITE_SP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DUMMY_WRITE_SP_P()",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_dummy_write_sp_p() = %d\n",
                      gdbarch_deprecated_dummy_write_sp_p (current_gdbarch));
#ifdef DEPRECATED_DUMMY_WRITE_SP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DUMMY_WRITE_SP(val)",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP (val)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_dummy_write_sp = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_dummy_write_sp);
a1114 18
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS_P()",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_push_return_address_p() = %d\n",
                      gdbarch_deprecated_push_return_address_p (current_gdbarch));
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS(pc, sp)",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS (pc, sp)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_push_return_address = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_push_return_address);
a1194 36
#ifdef DEPRECATED_REGISTER_VIRTUAL_TYPE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_TYPE_P()",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_TYPE_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_register_virtual_type_p() = %d\n",
                      gdbarch_deprecated_register_virtual_type_p (current_gdbarch));
#ifdef DEPRECATED_REGISTER_VIRTUAL_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_TYPE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_TYPE (reg_nr)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_register_virtual_type = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_type);
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS_P()",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_save_dummy_frame_tos_p() = %d\n",
                      gdbarch_deprecated_save_dummy_frame_tos_p (current_gdbarch));
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS(sp)",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS (sp)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_save_dummy_frame_tos = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_save_dummy_frame_tos);
a2505 24
gdbarch_deprecated_register_virtual_type_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_virtual_type != NULL;
}

struct type *
gdbarch_deprecated_register_virtual_type (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_virtual_type != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_virtual_type called\n");
  return gdbarch->deprecated_register_virtual_type (reg_nr);
}

void
set_gdbarch_deprecated_register_virtual_type (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_register_virtual_type_ftype deprecated_register_virtual_type)
{
  gdbarch->deprecated_register_virtual_type = deprecated_register_virtual_type;
}

int
a2604 24
gdbarch_deprecated_save_dummy_frame_tos_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_save_dummy_frame_tos != NULL;
}

void
gdbarch_deprecated_save_dummy_frame_tos (struct gdbarch *gdbarch, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_save_dummy_frame_tos != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_save_dummy_frame_tos called\n");
  gdbarch->deprecated_save_dummy_frame_tos (sp);
}

void
set_gdbarch_deprecated_save_dummy_frame_tos (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_save_dummy_frame_tos_ftype deprecated_save_dummy_frame_tos)
{
  gdbarch->deprecated_save_dummy_frame_tos = deprecated_save_dummy_frame_tos;
}

int
a2693 48
gdbarch_deprecated_push_return_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_return_address != NULL;
}

CORE_ADDR
gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_push_return_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_return_address called\n");
  return gdbarch->deprecated_push_return_address (pc, sp);
}

void
set_gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_push_return_address_ftype deprecated_push_return_address)
{
  gdbarch->deprecated_push_return_address = deprecated_push_return_address;
}

int
gdbarch_deprecated_dummy_write_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_dummy_write_sp != NULL;
}

void
gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_dummy_write_sp != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_dummy_write_sp called\n");
  gdbarch->deprecated_dummy_write_sp (val);
}

void
set_gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_dummy_write_sp_ftype deprecated_dummy_write_sp)
{
  gdbarch->deprecated_dummy_write_sp = deprecated_dummy_write_sp;
}

int
@


1.304
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_frameless_function_invocation): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-tdep.c 	(arm_frameless_function_invocation): Delete.
	(arm_gdbarch_init) Do not set frameless function invocation.
	* frame.h (legacy_frameless_look_for_prologue): Delete declaration.
	* blockframe.c (legacy_frameless_look_for_prologue): Delete function.
	* frv-tdep.c (frv_frameless_function_invocation): Delete.
	(frv_gdbarch_init): Do not set frameless function invocation.
	* sh64-tdep.c (sh64_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* m32r-tdep.c (m32r_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
@
text
@a148 1
  int deprecated_register_bytes;
a292 1
  0,  /* deprecated_register_bytes */
a1198 8
#ifdef DEPRECATED_REGISTER_BYTES
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES # %s\n",
                      XSTRING (DEPRECATED_REGISTER_BYTES));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_register_bytes = %s\n",
                      paddr_d (current_gdbarch->deprecated_register_bytes));
a2613 16
gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_bytes called\n");
  return gdbarch->deprecated_register_bytes;
}

void
set_gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch,
                                       int deprecated_register_bytes)
{
  gdbarch->deprecated_register_bytes = deprecated_register_bytes;
}

int
@


1.303
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (deprecated_add_show_from_set): Deprecate.
	* xcoffsolib.c (_initialize_xcoffsolib): Update.
	* wince.c (_initialize_wince): Update.
	* win32-nat.c (_initialize_win32_nat): Update.
	* varobj.c (_initialize_varobj): Update.
	* valops.c (_initialize_valops): Update.
	* utils.c (initialize_utils, initialize_utils): Update.
	* tui/tui-win.c (_initialize_tui_win): Update.
	* top.c (init_main): Update.
	* symfile.c (_initialize_symfile): Update.
	* source.c (_initialize_source): Update.
	* somsolib.c (_initialize_som_solib): Update.
	* solib.c (_initialize_solib): Update.
	* solib-frv.c (_initialize_frv_solib): Update.
	* serial.c (_initialize_serial): Update.
	* ser-go32.c (_initialize_ser_dos, _initialize_ser_dos): Update.
	* remote.c (_initialize_remote, _initialize_remote): Update.
	* remote-vx.c (_initialize_vx): Update.
	* remote-utils.c (_initialize_sr_support): Update.
	* remote-sds.c (_initialize_remote_sds): Update.
	* remote-mips.c (_initialize_remote_mips): Update.
	* remote-e7000.c (_initialize_remote_e7000): Update.
	* proc-api.c (_initialize_proc_api): Update.
	* printcmd.c: Update.
	* parse.c (_initialize_parse): Update.
	* pa64solib.c (_initialize_pa64_solib): Update.
	* p-valprint.c (_initialize_pascal_valprint): Update.
	* monitor.c (_initialize_remote_monitors): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* maint.c (_initialize_maint_cmds): Update.
	* lin-lwp.c (_initialize_lin_lwp): Update.
	* language.c (_initialize_language): Update.
	* kod.c (_initialize_kod): Update.
	* infrun.c (set_schedlock_func, _initialize_infrun): Update.
	* i386-tdep.c (_initialize_i386_tdep): Update.
	* gdbtypes.c (build_gdbtypes, _initialize_gdbtypes): Update.
	* gdbarch.sh: Update.
	* gdbarch.c: Re-generate.
	* gdb-events.sh: Update.
	* gdb-events.c: Re-generate.
	* frame.c (_initialize_frame): Update.
	* exec.c: Update.
	* demangle.c (_initialize_demangler): Update.
	* dcache.c (_initialize_dcache): Update.
	* cris-tdep.c (_initialize_cris_tdep, cris_version_update): Update.
	* cp-valprint.c (_initialize_cp_valprint): Update.
	* corefile.c (_initialize_core): Update.
	* command.h: Update.
	* cli/cli-decode.h: Update.
	* cli/cli-cmds.c (init_cli_cmds): Update.
	* charset.c (_initialize_charset): Update.
	* breakpoint.c (_initialize_breakpoint): Update.
	* arm-tdep.c (_initialize_arm_tdep_initialize_arm_tdep): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.
	* aix-thread.c (_initialize_aix_thread): Update.
@
text
@a202 1
  gdbarch_deprecated_frameless_function_invocation_ftype *deprecated_frameless_function_invocation;
a347 1
  0,  /* deprecated_frameless_function_invocation */
a625 1
  /* Skip verify of deprecated_frameless_function_invocation, has predicate */
a1048 18
#ifdef DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P()",
                      XSTRING (DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P ()));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_frameless_function_invocation_p() = %d\n",
                      gdbarch_deprecated_frameless_function_invocation_p (current_gdbarch));
#ifdef DEPRECATED_FRAMELESS_FUNCTION_INVOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (DEPRECATED_FRAMELESS_FUNCTION_INVOCATION (fi)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_frameless_function_invocation = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_frameless_function_invocation);
a3724 24
gdbarch_deprecated_frameless_function_invocation_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frameless_function_invocation != NULL;
}

int
gdbarch_deprecated_frameless_function_invocation (struct gdbarch *gdbarch, struct frame_info *fi)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frameless_function_invocation != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frameless_function_invocation called\n");
  return gdbarch->deprecated_frameless_function_invocation (fi);
}

void
set_gdbarch_deprecated_frameless_function_invocation (struct gdbarch *gdbarch,
                                                      gdbarch_deprecated_frameless_function_invocation_ftype deprecated_frameless_function_invocation)
{
  gdbarch->deprecated_frameless_function_invocation = deprecated_frameless_function_invocation;
}

int
@


1.302
log
@2004-06-21  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh: For gdbarch_dump, print the "function" rather than
	macro name, and the function rather than macro value.  Only wrap
	macro print statements in #ifdef.  Move format logic to where it
	is needed.
	* gdbarch.c: Re-generate.
@
text
@d5078 6
a5083 5
  add_show_from_set (add_set_cmd ("arch",
				  class_maintenance,
				  var_zinteger,
				  (char *)&gdbarch_debug,
				  "Set architecture debugging.\n\
d5085 1
a5085 1
		     &showdebuglist);
d5094 1
a5094 1
  deprecate_cmd (add_show_from_set (c, &showlist), "show debug arch");
@


1.302.4.1
log
@Allow access to all 64 bits of the SPE GPR's in multi-threaded
programs.
* ppc-tdep.h (struct speregset): New struct type.
* ppc-linux-tdep.c: #include "gdb_assert.h".
(ppc_linux_supply_speregset, ppc_linux_collect_speregset): New
functions.
(ppc_linux_speregset): New structure.
(ppc_linux_init_abi): Describe how to pass the full 64-bit values
of the SPE GPRs across the thread-db interface.
* ppc-linux-nat.c (struct gdb_evrregset_t): Doc fix.
* Makefile.in (ppc-linux-tdep.o): Update dependencies.

Allow targets to specify an extended register set, to be passed
through libthread_db via its 'xregs' functions.
* gdbarch.sh (XREGS_REGSET, XREGS_SIZE, XREGS_NAME): New gdbarch
members.
* gdbarch.c, gdbarch.h: Regenerated.
* proc-service.c: #include "regset.h" and "regcache.h".
(ps_lgetxregsize, ps_lgetxregs, ps_lsetxregs): Fill in real
implementations of these functions.
* thread-db.c: #include "regset.h".
(td_thr_getxregsize_p, td_thr_getxregs_p, td_thr_setxregs_p): New
variables.
(thread_db_load): Initialize them.
(warned_xregs_not_implemented): New variable.
(thread_db_new_objfile): Clear it here.
(thread_db_fetch_registers, thread_db_store_registers): Supply and
collect the xregset, too, if the architecture says it has one, and
libthread_db seems to be able to support it.
* Makefile.in (proc-service.o, thread-db.o): Update dependencies.
@
text
@a242 3
  const struct regset * xregs_regset;
  int xregs_size;
  const char * xregs_name;
a388 3
  0,  /* xregs_regset */
  0,  /* xregs_size */
  0,  /* xregs_name */
a2031 24
#ifdef XREGS_NAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: XREGS_NAME # %s\n",
                      XSTRING (XREGS_NAME));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: xregs_name = %s\n",
                      paddr_d (current_gdbarch->xregs_name));
#ifdef XREGS_REGSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: XREGS_REGSET # %s\n",
                      XSTRING (XREGS_REGSET));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: xregs_regset = %s\n",
                      paddr_d (current_gdbarch->xregs_regset));
#ifdef XREGS_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: XREGS_SIZE # %s\n",
                      XSTRING (XREGS_SIZE));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: xregs_size = %s\n",
                      paddr_d (current_gdbarch->xregs_size));
a4555 48
const struct regset *
gdbarch_xregs_regset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_xregs_regset called\n");
  return gdbarch->xregs_regset;
}

void
set_gdbarch_xregs_regset (struct gdbarch *gdbarch,
                          const struct regset * xregs_regset)
{
  gdbarch->xregs_regset = xregs_regset;
}

int
gdbarch_xregs_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_xregs_size called\n");
  return gdbarch->xregs_size;
}

void
set_gdbarch_xregs_size (struct gdbarch *gdbarch,
                        int xregs_size)
{
  gdbarch->xregs_size = xregs_size;
}

const char *
gdbarch_xregs_name (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_xregs_name called\n");
  return gdbarch->xregs_name;
}

void
set_gdbarch_xregs_name (struct gdbarch *gdbarch,
                        const char * xregs_name)
{
  gdbarch->xregs_name = xregs_name;
}

@


1.302.4.2
log
@* rs6000-tdep.c: #include "dwarf2expr.h".
(dwarf_piece_is_ev_upper_reg, dwarf_piece_is_gpr)
(e500_dwarf_simplify_register_pieces): New functions.
(rs6000_gdbarch_init): If the architecture is E500, register
e500_dwarf_simplify_register_pieces.
* Makefile.in (rs6000-tdep.o): Update dependencies.

* gdbarch.sh (dwarf_simplify_register_pieces): New method.
Add forward declaration for 'struct dwarf_expr_piece'.
* gdbarch.c, gdbarch.h: Regenerated.
* dwarf2loc.c (dwarf2_evaluate_loc_desc): Try to simplify
multi-piece expression results before giving up.
* arch-utils.c (dwarf_never_simplify_pieces): New function.
* arch-utils.h (struct dwarf_expr_piece): Forward decl for struct
type, used in ...
(dwarf_never_simplify_pieces): New declaration.
@
text
@a145 1
  gdbarch_dwarf_simplify_register_pieces_ftype *dwarf_simplify_register_pieces;
a294 1
  dwarf_never_simplify_pieces,  /* dwarf_simplify_register_pieces */
a453 1
  current_gdbarch->dwarf_simplify_register_pieces = dwarf_never_simplify_pieces;
a578 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->dwarf_simplify_register_pieces == dwarf_never_simplify_pieces))
    fprintf_unfiltered (log, "\n\tdwarf_simplify_register_pieces");
a1439 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: dwarf_simplify_register_pieces = <0x%lx>\n",
                      (long) current_gdbarch->dwarf_simplify_register_pieces);
a2608 17
int
gdbarch_dwarf_simplify_register_pieces (struct gdbarch *gdbarch, int num_pieces, struct dwarf_expr_piece *pieces)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->dwarf_simplify_register_pieces != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dwarf_simplify_register_pieces called\n");
  return gdbarch->dwarf_simplify_register_pieces (gdbarch, num_pieces, pieces);
}

void
set_gdbarch_dwarf_simplify_register_pieces (struct gdbarch *gdbarch,
                                            gdbarch_dwarf_simplify_register_pieces_ftype dwarf_simplify_register_pieces)
{
  gdbarch->dwarf_simplify_register_pieces = dwarf_simplify_register_pieces;
}

@


1.301
log
@2004-06-21  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (read): Delete "print_p" and "description", add
	"garbage_at_eol".  Check for non-empty garbage at end-of-line.
	Delete references to print_p.
	(TARGET_ARCHITECTURE): Delete print predicate.
	* gdbarch.c: Re-generate.
@
text
@d700 1
d702 2
a703 3
                      "gdbarch_dump: TARGET_ADDR_BIT = %d\n",
                      TARGET_ADDR_BIT);
#endif
d709 1
d711 2
a712 4
                      "gdbarch_dump: ADDR_BITS_REMOVE = <0x%08lx>\n",
                      (long) current_gdbarch->addr_bits_remove
                      /*ADDR_BITS_REMOVE ()*/);
#endif
d717 1
a717 1
                      "gdbarch_dump: address_class_name_to_type_flags = 0x%08lx\n",
d724 1
d726 2
a727 3
                      "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS_P() = %d\n",
                      ADDRESS_CLASS_TYPE_FLAGS_P ());
#endif
d733 1
d735 2
a736 4
                      "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = <0x%08lx>\n",
                      (long) current_gdbarch->address_class_type_flags
                      /*ADDRESS_CLASS_TYPE_FLAGS ()*/);
#endif
d741 1
a741 1
                      "gdbarch_dump: address_class_type_flags_to_name = 0x%08lx\n",
d748 1
d750 2
a751 4
                      "gdbarch_dump: ADDRESS_TO_POINTER = <0x%08lx>\n",
                      (long) current_gdbarch->address_to_pointer
                      /*ADDRESS_TO_POINTER ()*/);
#endif
d756 1
a756 1
                      "gdbarch_dump: adjust_breakpoint_address = 0x%08lx\n",
d762 1
d764 2
a765 3
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION = %d\n",
                      BELIEVE_PCC_PROMOTION);
#endif
d770 1
d772 1
a772 1
                      "gdbarch_dump: TARGET_ARCHITECTURE = %s\n",
a773 1
#endif
d778 1
d780 2
a781 3
                      "gdbarch_dump: TARGET_BFD_VMA_BIT = %d\n",
                      TARGET_BFD_VMA_BIT);
#endif
d787 1
d789 2
a790 4
                      "gdbarch_dump: BREAKPOINT_FROM_PC = <0x%08lx>\n",
                      (long) current_gdbarch->breakpoint_from_pc
                      /*BREAKPOINT_FROM_PC ()*/);
#endif
d795 1
d797 2
a798 3
                      "gdbarch_dump: TARGET_BYTE_ORDER = %ld\n",
                      (long) TARGET_BYTE_ORDER);
#endif
d803 1
d805 2
a806 3
                      "gdbarch_dump: CALL_DUMMY_LOCATION = %d\n",
                      CALL_DUMMY_LOCATION);
#endif
d812 1
d814 2
a815 4
                      "gdbarch_dump: CANNOT_FETCH_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->cannot_fetch_register
                      /*CANNOT_FETCH_REGISTER ()*/);
#endif
d820 1
d822 2
a823 3
                      "gdbarch_dump: CANNOT_STEP_BREAKPOINT = %d\n",
                      CANNOT_STEP_BREAKPOINT);
#endif
d829 1
d831 2
a832 4
                      "gdbarch_dump: CANNOT_STORE_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->cannot_store_register
                      /*CANNOT_STORE_REGISTER ()*/);
#endif
d837 1
d839 2
a840 3
                      "gdbarch_dump: TARGET_CHAR_SIGNED = %d\n",
                      TARGET_CHAR_SIGNED);
#endif
d846 1
d848 2
a849 4
                      "gdbarch_dump: COFF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                      (long) current_gdbarch->coff_make_msymbol_special
                      /*COFF_MAKE_MSYMBOL_SPECIAL ()*/);
#endif
d851 1
a851 1
                      "gdbarch_dump: construct_inferior_arguments = 0x%08lx\n",
d854 1
a854 1
                      "gdbarch_dump: convert_from_func_ptr_addr = 0x%08lx\n",
d861 1
d863 2
a864 4
                      "gdbarch_dump: CONVERT_REGISTER_P = <0x%08lx>\n",
                      (long) current_gdbarch->convert_register_p
                      /*CONVERT_REGISTER_P ()*/);
#endif
d869 1
d871 2
a872 3
                      "gdbarch_dump: DECR_PC_AFTER_BREAK = %ld\n",
                      (long) DECR_PC_AFTER_BREAK);
#endif
d878 1
d880 2
a881 3
                      "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO_P() = %d\n",
                      DEPRECATED_DO_REGISTERS_INFO_P ());
#endif
d887 1
d889 2
a890 4
                      "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_do_registers_info
                      /*DEPRECATED_DO_REGISTERS_INFO ()*/);
#endif
d896 1
d898 2
a899 3
                      "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP_P() = %d\n",
                      DEPRECATED_DUMMY_WRITE_SP_P ());
#endif
d905 1
d907 2
a908 4
                      "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_dummy_write_sp
                      /*DEPRECATED_DUMMY_WRITE_SP ()*/);
#endif
d914 1
d916 2
a917 4
                      "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_extract_return_value
                      /*DEPRECATED_EXTRACT_RETURN_VALUE ()*/);
#endif
d923 1
d925 2
a926 3
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P() = %d\n",
                      DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ());
#endif
d932 1
d934 2
a935 4
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_extract_struct_value_address
                      /*DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
d940 1
d942 2
a943 3
                      "gdbarch_dump: DEPRECATED_FP_REGNUM = %d\n",
                      DEPRECATED_FP_REGNUM);
#endif
d949 1
d951 2
a952 3
                      "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS_P() = %d\n",
                      DEPRECATED_FRAME_ARGS_ADDRESS_P ());
#endif
d958 1
d960 2
a961 4
                      "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_args_address
                      /*DEPRECATED_FRAME_ARGS_ADDRESS ()*/);
#endif
d967 1
d969 2
a970 3
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_P() = %d\n",
                      DEPRECATED_FRAME_CHAIN_P ());
#endif
d976 1
d978 2
a979 4
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain
                      /*DEPRECATED_FRAME_CHAIN ()*/);
#endif
d985 1
d987 2
a988 3
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID_P() = %d\n",
                      DEPRECATED_FRAME_CHAIN_VALID_P ());
#endif
d994 1
d996 2
a997 4
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain_valid
                      /*DEPRECATED_FRAME_CHAIN_VALID ()*/);
#endif
d1003 1
d1005 2
a1006 3
                      "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS_P() = %d\n",
                      DEPRECATED_FRAME_INIT_SAVED_REGS_P ());
#endif
d1012 1
d1014 2
a1015 4
                      "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_init_saved_regs
                      /*DEPRECATED_FRAME_INIT_SAVED_REGS ()*/);
#endif
d1021 1
d1023 2
a1024 3
                      "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS_P() = %d\n",
                      DEPRECATED_FRAME_LOCALS_ADDRESS_P ());
#endif
d1030 1
d1032 2
a1033 4
                      "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_locals_address
                      /*DEPRECATED_FRAME_LOCALS_ADDRESS ()*/);
#endif
d1039 1
d1041 2
a1042 3
                      "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC_P() = %d\n",
                      DEPRECATED_FRAME_SAVED_PC_P ());
#endif
d1048 1
d1050 2
a1051 4
                      "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_saved_pc
                      /*DEPRECATED_FRAME_SAVED_PC ()*/);
#endif
d1057 1
d1059 2
a1060 3
                      "gdbarch_dump: DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P() = %d\n",
                      DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P ());
#endif
d1066 1
d1068 2
a1069 4
                      "gdbarch_dump: DEPRECATED_FRAMELESS_FUNCTION_INVOCATION = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frameless_function_invocation
                      /*DEPRECATED_FRAMELESS_FUNCTION_INVOCATION ()*/);
#endif
d1074 1
d1076 2
a1077 3
                      "gdbarch_dump: DEPRECATED_FUNCTION_START_OFFSET = %ld\n",
                      (long) DEPRECATED_FUNCTION_START_OFFSET);
#endif
d1083 1
d1085 2
a1086 3
                      "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER_P() = %d\n",
                      DEPRECATED_GET_SAVED_REGISTER_P ());
#endif
d1092 1
d1094 2
a1095 4
                      "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_get_saved_register
                      /*DEPRECATED_GET_SAVED_REGISTER ()*/);
#endif
d1101 1
d1103 2
a1104 3
                      "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO_P() = %d\n",
                      DEPRECATED_INIT_EXTRA_FRAME_INFO_P ());
#endif
d1110 1
d1112 2
a1113 4
                      "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_extra_frame_info
                      /*DEPRECATED_INIT_EXTRA_FRAME_INFO ()*/);
#endif
d1119 1
d1121 2
a1122 3
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_P() = %d\n",
                      DEPRECATED_INIT_FRAME_PC_P ());
#endif
d1128 1
d1130 2
a1131 4
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_frame_pc
                      /*DEPRECATED_INIT_FRAME_PC ()*/);
#endif
d1137 1
d1139 2
a1140 3
                      "gdbarch_dump: DEPRECATED_POP_FRAME_P() = %d\n",
                      DEPRECATED_POP_FRAME_P ());
#endif
d1146 1
d1148 2
a1149 4
                      "gdbarch_dump: DEPRECATED_POP_FRAME = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pop_frame
                      /*DEPRECATED_POP_FRAME ()*/);
#endif
d1155 1
d1157 2
a1158 3
                      "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS_P() = %d\n",
                      DEPRECATED_PUSH_ARGUMENTS_P ());
#endif
d1164 1
d1166 2
a1167 4
                      "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_arguments
                      /*DEPRECATED_PUSH_ARGUMENTS ()*/);
#endif
d1173 1
d1175 2
a1176 3
                      "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS_P() = %d\n",
                      DEPRECATED_PUSH_RETURN_ADDRESS_P ());
#endif
d1182 1
d1184 2
a1185 4
                      "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_return_address
                      /*DEPRECATED_PUSH_RETURN_ADDRESS ()*/);
#endif
d1191 1
d1193 2
a1194 3
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR_P() = %d\n",
                      DEPRECATED_REG_STRUCT_HAS_ADDR_P ());
#endif
d1200 1
d1202 2
a1203 4
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_reg_struct_has_addr
                      /*DEPRECATED_REG_STRUCT_HAS_ADDR ()*/);
#endif
d1209 1
d1211 2
a1212 3
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTE_P() = %d\n",
                      DEPRECATED_REGISTER_BYTE_P ());
#endif
d1218 1
d1220 2
a1221 4
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_byte
                      /*DEPRECATED_REGISTER_BYTE ()*/);
#endif
d1226 1
d1228 2
a1229 3
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES = %d\n",
                      DEPRECATED_REGISTER_BYTES);
#endif
d1235 1
d1237 2
a1238 3
                      "gdbarch_dump: DEPRECATED_REGISTER_RAW_SIZE_P() = %d\n",
                      DEPRECATED_REGISTER_RAW_SIZE_P ());
#endif
d1244 1
d1246 2
a1247 4
                      "gdbarch_dump: DEPRECATED_REGISTER_RAW_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_raw_size
                      /*DEPRECATED_REGISTER_RAW_SIZE ()*/);
#endif
d1252 1
d1254 2
a1255 3
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE = %d\n",
                      DEPRECATED_REGISTER_SIZE);
#endif
d1261 1
d1263 2
a1264 3
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      DEPRECATED_REGISTER_VIRTUAL_SIZE_P ());
#endif
d1270 1
d1272 2
a1273 4
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_size
                      /*DEPRECATED_REGISTER_VIRTUAL_SIZE ()*/);
#endif
d1279 1
d1281 2
a1282 3
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_TYPE_P() = %d\n",
                      DEPRECATED_REGISTER_VIRTUAL_TYPE_P ());
#endif
d1288 1
d1290 2
a1291 4
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_TYPE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_type
                      /*DEPRECATED_REGISTER_VIRTUAL_TYPE ()*/);
#endif
d1297 1
d1299 2
a1300 3
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS_P() = %d\n",
                      DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ());
#endif
d1306 1
d1308 2
a1309 4
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_save_dummy_frame_tos
                      /*DEPRECATED_SAVE_DUMMY_FRAME_TOS ()*/);
#endif
d1315 1
d1317 2
a1318 3
                      "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL_P() = %d\n",
                      DEPRECATED_SAVED_PC_AFTER_CALL_P ());
#endif
d1324 1
d1326 2
a1327 4
                      "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_saved_pc_after_call
                      /*DEPRECATED_SAVED_PC_AFTER_CALL ()*/);
#endif
d1333 1
d1335 2
a1336 3
                      "gdbarch_dump: DEPRECATED_STACK_ALIGN_P() = %d\n",
                      DEPRECATED_STACK_ALIGN_P ());
#endif
d1342 1
d1344 2
a1345 4
                      "gdbarch_dump: DEPRECATED_STACK_ALIGN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_stack_align
                      /*DEPRECATED_STACK_ALIGN ()*/);
#endif
d1351 1
d1353 2
a1354 4
                      "gdbarch_dump: DEPRECATED_STORE_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_store_return_value
                      /*DEPRECATED_STORE_RETURN_VALUE ()*/);
#endif
d1360 1
d1362 2
a1363 3
                      "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN_P() = %d\n",
                      DEPRECATED_STORE_STRUCT_RETURN_P ());
#endif
d1369 1
d1371 2
a1372 4
                      "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_store_struct_return
                      /*DEPRECATED_STORE_STRUCT_RETURN ()*/);
#endif
d1378 1
d1380 2
a1381 3
                      "gdbarch_dump: DEPRECATED_TARGET_READ_FP_P() = %d\n",
                      DEPRECATED_TARGET_READ_FP_P ());
#endif
d1387 1
d1389 2
a1390 4
                      "gdbarch_dump: DEPRECATED_TARGET_READ_FP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_target_read_fp
                      /*DEPRECATED_TARGET_READ_FP ()*/);
#endif
d1396 1
d1398 2
a1399 4
                      "gdbarch_dump: DEPRECATED_USE_STRUCT_CONVENTION = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_use_struct_convention
                      /*DEPRECATED_USE_STRUCT_CONVENTION ()*/);
#endif
d1404 1
d1406 2
a1407 3
                      "gdbarch_dump: TARGET_DOUBLE_BIT = %d\n",
                      TARGET_DOUBLE_BIT);
#endif
d1412 1
d1414 1
a1414 1
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT = %s\n",
a1415 1
#endif
d1421 1
d1423 2
a1424 4
                      "gdbarch_dump: DWARF2_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->dwarf2_reg_to_regnum
                      /*DWARF2_REG_TO_REGNUM ()*/);
#endif
d1430 1
d1432 2
a1433 4
                      "gdbarch_dump: DWARF_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->dwarf_reg_to_regnum
                      /*DWARF_REG_TO_REGNUM ()*/);
#endif
d1439 1
d1441 2
a1442 4
                      "gdbarch_dump: ECOFF_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->ecoff_reg_to_regnum
                      /*ECOFF_REG_TO_REGNUM ()*/);
#endif
d1448 1
d1450 2
a1451 4
                      "gdbarch_dump: ELF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                      (long) current_gdbarch->elf_make_msymbol_special
                      /*ELF_MAKE_MSYMBOL_SPECIAL ()*/);
#endif
d1457 1
d1459 2
a1460 4
                      "gdbarch_dump: EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->extract_return_value
                      /*EXTRACT_RETURN_VALUE ()*/);
#endif
d1466 1
d1468 2
a1469 3
                      "gdbarch_dump: FETCH_POINTER_ARGUMENT_P() = %d\n",
                      FETCH_POINTER_ARGUMENT_P ());
#endif
d1475 1
d1477 2
a1478 4
                      "gdbarch_dump: FETCH_POINTER_ARGUMENT = <0x%08lx>\n",
                      (long) current_gdbarch->fetch_pointer_argument
                      /*FETCH_POINTER_ARGUMENT ()*/);
#endif
d1483 1
d1485 2
a1486 3
                      "gdbarch_dump: TARGET_FLOAT_BIT = %d\n",
                      TARGET_FLOAT_BIT);
#endif
d1491 1
d1493 1
a1493 1
                      "gdbarch_dump: TARGET_FLOAT_FORMAT = %s\n",
a1494 1
#endif
d1499 1
d1501 2
a1502 3
                      "gdbarch_dump: FP0_REGNUM = %d\n",
                      FP0_REGNUM);
#endif
d1507 1
a1507 1
                      "gdbarch_dump: frame_align = 0x%08lx\n",
d1513 1
d1515 2
a1516 3
                      "gdbarch_dump: FRAME_ARGS_SKIP = %ld\n",
                      (long) FRAME_ARGS_SKIP);
#endif
d1522 1
d1524 2
a1525 3
                      "gdbarch_dump: FRAME_NUM_ARGS_P() = %d\n",
                      FRAME_NUM_ARGS_P ());
#endif
d1531 1
d1533 2
a1534 4
                      "gdbarch_dump: FRAME_NUM_ARGS = <0x%08lx>\n",
                      (long) current_gdbarch->frame_num_args
                      /*FRAME_NUM_ARGS ()*/);
#endif
d1539 1
d1541 2
a1542 3
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE = %d\n",
                      FRAME_RED_ZONE_SIZE);
#endif
d1548 1
d1550 2
a1551 3
                      "gdbarch_dump: GET_LONGJMP_TARGET_P() = %d\n",
                      GET_LONGJMP_TARGET_P ());
#endif
d1557 1
d1559 2
a1560 4
                      "gdbarch_dump: GET_LONGJMP_TARGET = <0x%08lx>\n",
                      (long) current_gdbarch->get_longjmp_target
                      /*GET_LONGJMP_TARGET ()*/);
#endif
d1565 1
d1567 2
a1568 3
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT = %d\n",
                      HAVE_NONSTEPPABLE_WATCHPOINT);
#endif
d1570 1
a1570 1
                      "gdbarch_dump: in_function_epilogue_p = 0x%08lx\n",
d1577 1
d1579 2
a1580 4
                      "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_call_trampoline
                      /*IN_SOLIB_CALL_TRAMPOLINE ()*/);
#endif
d1586 1
d1588 2
a1589 4
                      "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_return_trampoline
                      /*IN_SOLIB_RETURN_TRAMPOLINE ()*/);
#endif
d1595 1
d1597 2
a1598 4
                      "gdbarch_dump: INNER_THAN = <0x%08lx>\n",
                      (long) current_gdbarch->inner_than
                      /*INNER_THAN ()*/);
#endif
d1603 1
d1605 2
a1606 3
                      "gdbarch_dump: TARGET_INT_BIT = %d\n",
                      TARGET_INT_BIT);
#endif
d1612 1
d1614 2
a1615 3
                      "gdbarch_dump: INTEGER_TO_ADDRESS_P() = %d\n",
                      INTEGER_TO_ADDRESS_P ());
#endif
d1621 1
d1623 2
a1624 4
                      "gdbarch_dump: INTEGER_TO_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->integer_to_address
                      /*INTEGER_TO_ADDRESS ()*/);
#endif
d1629 1
d1631 2
a1632 3
                      "gdbarch_dump: TARGET_LONG_BIT = %d\n",
                      TARGET_LONG_BIT);
#endif
d1637 1
d1639 2
a1640 3
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT = %d\n",
                      TARGET_LONG_DOUBLE_BIT);
#endif
d1645 1
d1647 1
a1647 1
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT = %s\n",
a1648 1
#endif
d1653 1
d1655 2
a1656 3
                      "gdbarch_dump: TARGET_LONG_LONG_BIT = %d\n",
                      TARGET_LONG_LONG_BIT);
#endif
d1662 1
d1664 2
a1665 4
                      "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = <0x%08lx>\n",
                      (long) current_gdbarch->memory_insert_breakpoint
                      /*MEMORY_INSERT_BREAKPOINT ()*/);
#endif
d1671 1
d1673 2
a1674 4
                      "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = <0x%08lx>\n",
                      (long) current_gdbarch->memory_remove_breakpoint
                      /*MEMORY_REMOVE_BREAKPOINT ()*/);
#endif
d1679 1
d1681 1
a1681 1
                      "gdbarch_dump: NAME_OF_MALLOC = %s\n",
a1682 1
#endif
d1687 1
d1689 2
a1690 3
                      "gdbarch_dump: NUM_PSEUDO_REGS = %d\n",
                      NUM_PSEUDO_REGS);
#endif
d1695 1
d1697 2
a1698 3
                      "gdbarch_dump: NUM_REGS = %d\n",
                      NUM_REGS);
#endif
d1703 1
d1705 2
a1706 3
                      "gdbarch_dump: TARGET_OSABI = %ld\n",
                      (long) TARGET_OSABI);
#endif
d1711 1
d1713 2
a1714 3
                      "gdbarch_dump: PC_REGNUM = %d\n",
                      PC_REGNUM);
#endif
d1720 1
d1722 2
a1723 4
                      "gdbarch_dump: POINTER_TO_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->pointer_to_address
                      /*POINTER_TO_ADDRESS ()*/);
#endif
d1728 1
a1728 1
                      "gdbarch_dump: print_float_info = 0x%08lx\n",
d1735 1
d1737 2
a1738 4
                      "gdbarch_dump: TARGET_PRINT_INSN = <0x%08lx>\n",
                      (long) current_gdbarch->print_insn
                      /*TARGET_PRINT_INSN ()*/);
#endif
d1740 1
a1740 1
                      "gdbarch_dump: print_registers_info = 0x%08lx\n",
d1746 1
a1746 1
                      "gdbarch_dump: print_vector_info = 0x%08lx\n",
d1752 1
d1754 2
a1755 3
                      "gdbarch_dump: PS_REGNUM = %d\n",
                      PS_REGNUM);
#endif
d1760 1
a1760 1
                      "gdbarch_dump: pseudo_register_read = 0x%08lx\n",
d1766 1
a1766 1
                      "gdbarch_dump: pseudo_register_write = 0x%08lx\n",
d1772 1
d1774 2
a1775 3
                      "gdbarch_dump: TARGET_PTR_BIT = %d\n",
                      TARGET_PTR_BIT);
#endif
d1780 1
a1780 1
                      "gdbarch_dump: push_dummy_call = 0x%08lx\n",
d1786 1
a1786 1
                      "gdbarch_dump: push_dummy_code = 0x%08lx\n",
d1793 1
d1795 2
a1796 3
                      "gdbarch_dump: TARGET_READ_PC_P() = %d\n",
                      TARGET_READ_PC_P ());
#endif
d1802 1
d1804 2
a1805 4
                      "gdbarch_dump: TARGET_READ_PC = <0x%08lx>\n",
                      (long) current_gdbarch->read_pc
                      /*TARGET_READ_PC ()*/);
#endif
d1811 1
d1813 2
a1814 3
                      "gdbarch_dump: TARGET_READ_SP_P() = %d\n",
                      TARGET_READ_SP_P ());
#endif
d1820 1
d1822 2
a1823 4
                      "gdbarch_dump: TARGET_READ_SP = <0x%08lx>\n",
                      (long) current_gdbarch->read_sp
                      /*TARGET_READ_SP ()*/);
#endif
d1829 1
d1831 2
a1832 3
                      "gdbarch_dump: REGISTER_BYTES_OK_P() = %d\n",
                      REGISTER_BYTES_OK_P ());
#endif
d1838 1
d1840 2
a1841 4
                      "gdbarch_dump: REGISTER_BYTES_OK = <0x%08lx>\n",
                      (long) current_gdbarch->register_bytes_ok
                      /*REGISTER_BYTES_OK ()*/);
#endif
d1847 1
d1849 2
a1850 4
                      "gdbarch_dump: REGISTER_NAME = <0x%08lx>\n",
                      (long) current_gdbarch->register_name
                      /*REGISTER_NAME ()*/);
#endif
d1852 1
a1852 1
                      "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
d1859 1
d1861 2
a1862 4
                      "gdbarch_dump: REGISTER_SIM_REGNO = <0x%08lx>\n",
                      (long) current_gdbarch->register_sim_regno
                      /*REGISTER_SIM_REGNO ()*/);
#endif
d1868 1
d1870 2
a1871 4
                      "gdbarch_dump: REGISTER_TO_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->register_to_value
                      /*REGISTER_TO_VALUE ()*/);
#endif
d1876 1
a1876 1
                      "gdbarch_dump: register_type = 0x%08lx\n",
d1882 1
a1882 1
                      "gdbarch_dump: regset_from_core_section = 0x%08lx\n",
d1885 1
a1885 1
                      "gdbarch_dump: remote_translate_xfer_address = 0x%08lx\n",
d1891 1
a1891 1
                      "gdbarch_dump: return_value = 0x%08lx\n",
d1898 1
d1900 2
a1901 4
                      "gdbarch_dump: SDB_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->sdb_reg_to_regnum
                      /*SDB_REG_TO_REGNUM ()*/);
#endif
d1906 1
d1908 2
a1909 3
                      "gdbarch_dump: TARGET_SHORT_BIT = %d\n",
                      TARGET_SHORT_BIT);
#endif
d1915 1
d1917 2
a1918 4
                      "gdbarch_dump: SKIP_PROLOGUE = <0x%08lx>\n",
                      (long) current_gdbarch->skip_prologue
                      /*SKIP_PROLOGUE ()*/);
#endif
d1920 1
a1920 1
                      "gdbarch_dump: skip_solib_resolver = 0x%08lx\n",
d1927 1
d1929 2
a1930 4
                      "gdbarch_dump: SKIP_TRAMPOLINE_CODE = <0x%08lx>\n",
                      (long) current_gdbarch->skip_trampoline_code
                      /*SKIP_TRAMPOLINE_CODE ()*/);
#endif
d1936 1
d1938 2
a1939 4
                      "gdbarch_dump: SMASH_TEXT_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->smash_text_address
                      /*SMASH_TEXT_ADDRESS ()*/);
#endif
d1945 1
d1947 2
a1948 3
                      "gdbarch_dump: SOFTWARE_SINGLE_STEP_P() = %d\n",
                      SOFTWARE_SINGLE_STEP_P ());
#endif
d1954 1
d1956 2
a1957 4
                      "gdbarch_dump: SOFTWARE_SINGLE_STEP = <0x%08lx>\n",
                      (long) current_gdbarch->software_single_step
                      /*SOFTWARE_SINGLE_STEP ()*/);
#endif
d1962 1
d1964 2
a1965 3
                      "gdbarch_dump: SP_REGNUM = %d\n",
                      SP_REGNUM);
#endif
d1971 1
d1973 2
a1974 4
                      "gdbarch_dump: STAB_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->stab_reg_to_regnum
                      /*STAB_REG_TO_REGNUM ()*/);
#endif
d1976 1
a1976 1
                      "gdbarch_dump: stabs_argument_has_addr = 0x%08lx\n",
d1983 1
d1985 2
a1986 4
                      "gdbarch_dump: STORE_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->store_return_value
                      /*STORE_RETURN_VALUE ()*/);
#endif
d1991 1
a1991 1
                      "gdbarch_dump: unwind_dummy_id = 0x%08lx\n",
d1997 1
a1997 1
                      "gdbarch_dump: unwind_pc = 0x%08lx\n",
d2003 1
a2003 1
                      "gdbarch_dump: unwind_sp = 0x%08lx\n",
d2010 1
d2012 2
a2013 4
                      "gdbarch_dump: VALUE_TO_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->value_to_register
                      /*VALUE_TO_REGISTER ()*/);
#endif
d2019 1
d2021 2
a2022 4
                      "gdbarch_dump: TARGET_VIRTUAL_FRAME_POINTER = <0x%08lx>\n",
                      (long) current_gdbarch->virtual_frame_pointer
                      /*TARGET_VIRTUAL_FRAME_POINTER ()*/);
#endif
d2028 1
d2030 2
a2031 4
                      "gdbarch_dump: TARGET_WRITE_PC = <0x%08lx>\n",
                      (long) current_gdbarch->write_pc
                      /*TARGET_WRITE_PC ()*/);
#endif
@


1.300
log
@2004-06-20  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh: Sort by the function, instead of macro name.
	* gdbarch.c: Re-generate.
@
text
@d773 3
a775 4
  if (TARGET_ARCHITECTURE != NULL)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_ARCHITECTURE = %s\n",
                        TARGET_ARCHITECTURE->printable_name);
@


1.299
log
@2004-06-20  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (RETURN_VALUE): Default to legacy_return_value.
	* gdbarch.h, gdbarch.c: Re-generate.
	* Makefile.in (arch-utils.o): Update dependencies.
	* values.c (using_struct_return): Move code calling
	USE_STRUCT_CONVENTION to legacy_return_value, simplify.
	* stack.c (return_command): Move code calling STORE_RETURN_VALUE
	to legacy_return_value, simplify.
	* infcmd.c (print_return_value): Move code calling
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS and EXTRACT_RETURN_VALUE
	to legacy_return_value, simplify.
	* infcall.c (call_function_by_hand): Move code calling
	EXTRACT_RETURN_VALUE to legacy_return_value, simplify.
	* arch-utils.c: Update copyright.  Include "gdbcore.h".
	(legacy_return_value): New function.
	* arch-utils.h: Update copyright.
	(legacy_return_value): Declare.
@
text
@d696 1
d698 2
a699 2
                      "gdbarch_dump: convert_from_func_ptr_addr = 0x%08lx\n",
                      (long) current_gdbarch->convert_from_func_ptr_addr);
d701 4
a704 2
                      "gdbarch_dump: gdbarch_frame_align_p() = %d\n",
                      gdbarch_frame_align_p (current_gdbarch));
d706 3
a708 2
                      "gdbarch_dump: frame_align = 0x%08lx\n",
                      (long) current_gdbarch->frame_align);
d710 4
a713 32
                      "gdbarch_dump: gdbarch_regset_from_core_section_p() = %d\n",
                      gdbarch_regset_from_core_section_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: regset_from_core_section = 0x%08lx\n",
                      (long) current_gdbarch->regset_from_core_section);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_return_value_p() = %d\n",
                      gdbarch_return_value_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: return_value = 0x%08lx\n",
                      (long) current_gdbarch->return_value);
  fprintf_unfiltered (file,
                      "gdbarch_dump: in_function_epilogue_p = 0x%08lx\n",
                      (long) current_gdbarch->in_function_epilogue_p);
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
                      (long) current_gdbarch->register_reggroup_p);
  fprintf_unfiltered (file,
                      "gdbarch_dump: stabs_argument_has_addr = 0x%08lx\n",
                      (long) current_gdbarch->stabs_argument_has_addr);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_read_p() = %d\n",
                      gdbarch_pseudo_register_read_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_read = 0x%08lx\n",
                      (long) current_gdbarch->pseudo_register_read);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_write_p() = %d\n",
                      gdbarch_pseudo_register_write_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_write = 0x%08lx\n",
                      (long) current_gdbarch->pseudo_register_write);
a754 10
#ifdef ADDR_BITS_REMOVE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDR_BITS_REMOVE(addr)",
                      XSTRING (ADDR_BITS_REMOVE (addr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDR_BITS_REMOVE = <0x%08lx>\n",
                      (long) current_gdbarch->addr_bits_remove
                      /*ADDR_BITS_REMOVE ()*/);
#endif
d769 17
d796 8
d840 8
d861 3
a956 19
#ifdef DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P()",
                      XSTRING (DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P() = %d\n",
                      DEPRECATED_FRAMELESS_FUNCTION_INVOCATION_P ());
#endif
#ifdef DEPRECATED_FRAMELESS_FUNCTION_INVOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (DEPRECATED_FRAMELESS_FUNCTION_INVOCATION (fi)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAMELESS_FUNCTION_INVOCATION = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frameless_function_invocation
                      /*DEPRECATED_FRAMELESS_FUNCTION_INVOCATION ()*/);
#endif
d1071 19
d1212 19
d1323 1
a1323 1
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR_P
d1326 2
a1327 2
                      "DEPRECATED_REG_STRUCT_HAS_ADDR_P()",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR_P ()));
d1329 2
a1330 2
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR_P() = %d\n",
                      DEPRECATED_REG_STRUCT_HAS_ADDR_P ());
d1332 1
a1332 1
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR
d1335 2
a1336 2
                      "DEPRECATED_REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR (gcc_p, type)));
d1338 3
a1340 3
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_reg_struct_has_addr
                      /*DEPRECATED_REG_STRUCT_HAS_ADDR ()*/);
a1360 19
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS_P()",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS_P() = %d\n",
                      DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ());
#endif
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS(sp)",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS (sp)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_save_dummy_frame_tos
                      /*DEPRECATED_SAVE_DUMMY_FRAME_TOS ()*/);
#endif
d1438 16
d1523 16
d1547 6
d1615 4
a1618 1
#ifdef INNER_THAN
d1621 2
a1622 2
                      "INNER_THAN(lhs, rhs)",
                      XSTRING (INNER_THAN (lhs, rhs)));
d1624 3
a1626 3
                      "gdbarch_dump: INNER_THAN = <0x%08lx>\n",
                      (long) current_gdbarch->inner_than
                      /*INNER_THAN ()*/);
d1628 1
a1628 1
#ifdef INTEGER_TO_ADDRESS_P
d1631 30
a1660 2
                      "INTEGER_TO_ADDRESS_P()",
                      XSTRING (INTEGER_TO_ADDRESS_P ()));
d1675 17
a1691 1
#ifdef IN_SOLIB_CALL_TRAMPOLINE
d1693 2
a1694 3
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_CALL_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_CALL_TRAMPOLINE (pc, name)));
d1696 2
a1697 3
                      "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_call_trampoline
                      /*IN_SOLIB_CALL_TRAMPOLINE ()*/);
d1699 1
a1699 1
#ifdef IN_SOLIB_RETURN_TRAMPOLINE
d1701 2
a1702 3
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_RETURN_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_RETURN_TRAMPOLINE (pc, name)));
d1704 2
a1705 3
                      "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_return_trampoline
                      /*IN_SOLIB_RETURN_TRAMPOLINE ()*/);
d1751 8
d1783 10
d1811 20
d1842 38
d1909 3
d1939 6
d1947 6
d1963 8
d2041 3
a2053 1
#ifdef TARGET_ADDR_BIT
d2055 2
a2056 2
                      "gdbarch_dump: TARGET_ADDR_BIT # %s\n",
                      XSTRING (TARGET_ADDR_BIT));
d2058 2
a2059 4
                      "gdbarch_dump: TARGET_ADDR_BIT = %d\n",
                      TARGET_ADDR_BIT);
#endif
#ifdef TARGET_ARCHITECTURE
d2061 2
a2062 8
                      "gdbarch_dump: TARGET_ARCHITECTURE # %s\n",
                      XSTRING (TARGET_ARCHITECTURE));
  if (TARGET_ARCHITECTURE != NULL)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_ARCHITECTURE = %s\n",
                        TARGET_ARCHITECTURE->printable_name);
#endif
#ifdef TARGET_BFD_VMA_BIT
d2064 2
a2065 2
                      "gdbarch_dump: TARGET_BFD_VMA_BIT # %s\n",
                      XSTRING (TARGET_BFD_VMA_BIT));
d2067 2
a2068 4
                      "gdbarch_dump: TARGET_BFD_VMA_BIT = %d\n",
                      TARGET_BFD_VMA_BIT);
#endif
#ifdef TARGET_BYTE_ORDER
d2070 3
a2072 95
                      "gdbarch_dump: TARGET_BYTE_ORDER # %s\n",
                      XSTRING (TARGET_BYTE_ORDER));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BYTE_ORDER = %ld\n",
                      (long) TARGET_BYTE_ORDER);
#endif
#ifdef TARGET_CHAR_SIGNED
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_CHAR_SIGNED # %s\n",
                      XSTRING (TARGET_CHAR_SIGNED));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_CHAR_SIGNED = %d\n",
                      TARGET_CHAR_SIGNED);
#endif
#ifdef TARGET_DOUBLE_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_DOUBLE_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_BIT = %d\n",
                      TARGET_DOUBLE_BIT);
#endif
#ifdef TARGET_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_DOUBLE_FORMAT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT = %s\n",
                      (TARGET_DOUBLE_FORMAT)->name);
#endif
#ifdef TARGET_FLOAT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_BIT # %s\n",
                      XSTRING (TARGET_FLOAT_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_BIT = %d\n",
                      TARGET_FLOAT_BIT);
#endif
#ifdef TARGET_FLOAT_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_FORMAT # %s\n",
                      XSTRING (TARGET_FLOAT_FORMAT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_FORMAT = %s\n",
                      (TARGET_FLOAT_FORMAT)->name);
#endif
#ifdef TARGET_INT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_INT_BIT # %s\n",
                      XSTRING (TARGET_INT_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_INT_BIT = %d\n",
                      TARGET_INT_BIT);
#endif
#ifdef TARGET_LONG_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_BIT = %d\n",
                      TARGET_LONG_BIT);
#endif
#ifdef TARGET_LONG_DOUBLE_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT = %d\n",
                      TARGET_LONG_DOUBLE_BIT);
#endif
#ifdef TARGET_LONG_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_FORMAT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT = %s\n",
                      (TARGET_LONG_DOUBLE_FORMAT)->name);
#endif
#ifdef TARGET_LONG_LONG_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_LONG_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_LONG_BIT = %d\n",
                      TARGET_LONG_LONG_BIT);
#endif
#ifdef TARGET_OSABI
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_OSABI # %s\n",
                      XSTRING (TARGET_OSABI));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_OSABI = %ld\n",
                      (long) TARGET_OSABI);
#endif
#ifdef TARGET_PRINT_INSN
d2075 2
a2076 2
                      "TARGET_PRINT_INSN(vma, info)",
                      XSTRING (TARGET_PRINT_INSN (vma, info)));
d2078 3
a2080 57
                      "gdbarch_dump: TARGET_PRINT_INSN = <0x%08lx>\n",
                      (long) current_gdbarch->print_insn
                      /*TARGET_PRINT_INSN ()*/);
#endif
#ifdef TARGET_PTR_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PTR_BIT # %s\n",
                      XSTRING (TARGET_PTR_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PTR_BIT = %d\n",
                      TARGET_PTR_BIT);
#endif
#ifdef TARGET_READ_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC_P()",
                      XSTRING (TARGET_READ_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_PC_P() = %d\n",
                      TARGET_READ_PC_P ());
#endif
#ifdef TARGET_READ_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC(ptid)",
                      XSTRING (TARGET_READ_PC (ptid)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_PC = <0x%08lx>\n",
                      (long) current_gdbarch->read_pc
                      /*TARGET_READ_PC ()*/);
#endif
#ifdef TARGET_READ_SP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_SP_P()",
                      XSTRING (TARGET_READ_SP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_SP_P() = %d\n",
                      TARGET_READ_SP_P ());
#endif
#ifdef TARGET_READ_SP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_SP()",
                      XSTRING (TARGET_READ_SP ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_SP = <0x%08lx>\n",
                      (long) current_gdbarch->read_sp
                      /*TARGET_READ_SP ()*/);
#endif
#ifdef TARGET_SHORT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_SHORT_BIT # %s\n",
                      XSTRING (TARGET_SHORT_BIT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_SHORT_BIT = %d\n",
                      TARGET_SHORT_BIT);
a2101 28
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                      gdbarch_unwind_dummy_id_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_dummy_id = 0x%08lx\n",
                      (long) current_gdbarch->unwind_dummy_id);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                      gdbarch_unwind_pc_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_pc = 0x%08lx\n",
                      (long) current_gdbarch->unwind_pc);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_sp_p() = %d\n",
                      gdbarch_unwind_sp_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_sp = 0x%08lx\n",
                      (long) current_gdbarch->unwind_sp);
#ifdef VALUE_TO_REGISTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "VALUE_TO_REGISTER(frame, regnum, type, buf)",
                      XSTRING (VALUE_TO_REGISTER (frame, regnum, type, buf)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: VALUE_TO_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->value_to_register
                      /*VALUE_TO_REGISTER ()*/);
#endif
@


1.298
log
@2004-06-20  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_USE_STRUCT_CONVENTION): Deprecated.
	* gdbarch.h, gdbarch.c: Re-generate.
	* values.c (using_struct_return): Update call.
	* mcore-tdep.c: Update comment.
	* infcall.c (call_function_by_hand): Update comment.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* arch-utils.h (always_use_struct_convention): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

Index: doc/ChangeLog
2004-06-20  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	USE_STRUCT_CONVENTION.
@
text
@d460 1
d3460 1
a3460 1
  return gdbarch->return_value != NULL;
d3468 1
@


1.297
log
@2004-06-18  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_FUNCTION_START_OFFSET): Deprecated.
	* gdbarch.h, gdbarch.c: Re-generate.
	* ada-lang.c (ada_finish_decode_line_1): Update.
	* infrun.c (handle_inferior_event): Update.
	* infcall.c (find_function_addr): Update.
	* linespec.c (minsym_found): Update.
	* symtab.c (find_function_start_sal, skip_prologue_using_sal):
	Update.
	* blockframe.c (legacy_frameless_look_for_prologue): Update.
	* cli/cli-cmds.c (disassemble_command): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.

Index: doc/ChangeLog
2004-06-18  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	FUNCTION_START_OFFSET.
@
text
@d189 1
a189 1
  gdbarch_use_struct_convention_ftype *use_struct_convention;
d335 1
a335 1
  0,  /* use_struct_convention */
d462 1
a462 1
  current_gdbarch->use_struct_convention = generic_use_struct_convention;
d607 1
a607 1
  /* Skip verify of use_struct_convention, invalid_p == 0 */
d1425 10
a2090 10
#ifdef USE_STRUCT_CONVENTION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "USE_STRUCT_CONVENTION(gcc_p, value_type)",
                      XSTRING (USE_STRUCT_CONVENTION (gcc_p, value_type)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: USE_STRUCT_CONVENTION = <0x%08lx>\n",
                      (long) current_gdbarch->use_struct_convention
                      /*USE_STRUCT_CONVENTION ()*/);
#endif
d3548 1
a3548 1
gdbarch_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type)
d3551 1
a3551 1
  gdb_assert (gdbarch->use_struct_convention != NULL);
d3553 2
a3554 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_use_struct_convention called\n");
  return gdbarch->use_struct_convention (gcc_p, value_type);
d3558 2
a3559 2
set_gdbarch_use_struct_convention (struct gdbarch *gdbarch,
                                   gdbarch_use_struct_convention_ftype use_struct_convention)
d3561 1
a3561 1
  gdbarch->use_struct_convention = use_struct_convention;
@


1.296
log
@2004-06-13  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_MAX_REGISTER_RAW_SIZE)
	(DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE): Delete.
	* gdbarch.h, gdbarch.c: Regenerate.
	* ns32k-tdep.h (NS32K_MAX_REGISTER_RAW_SIZE)
	(NS32K_MAX_REGISTER_VIRTUAL_SIZE): Delete macros.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	deprecated_max_register_raw_size and
	deprecated_max_register_virtual_size.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
@
text
@d200 1
a200 1
  CORE_ADDR function_start_offset;
d346 1
a346 1
  0,  /* function_start_offset */
d624 1
a624 1
  /* Skip verify of function_start_offset, invalid_p == 0 */
d1087 8
a1536 8
#ifdef FUNCTION_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET # %s\n",
                      XSTRING (FUNCTION_START_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET = %ld\n",
                      (long) FUNCTION_START_OFFSET);
#endif
d3763 1
a3763 1
gdbarch_function_start_offset (struct gdbarch *gdbarch)
d3766 1
a3766 1
  /* Skip verify of function_start_offset, invalid_p == 0 */
d3768 2
a3769 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_function_start_offset called\n");
  return gdbarch->function_start_offset;
d3773 2
a3774 2
set_gdbarch_function_start_offset (struct gdbarch *gdbarch,
                                   CORE_ADDR function_start_offset)
d3776 1
a3776 1
  gdbarch->function_start_offset = function_start_offset;
@


1.295
log
@Index: ChangeLog
2004-06-13  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (RETURN_VALUE_ON_STACK): Delete method.
	* gdbarch.h, gdbarch.c: Re-generate.
	* m68hc11-tdep.c (m68hc11_return_value_on_stack): Delete function.
	(m68hc11_use_struct_convention): Delete function.
	(m68hc11_extract_struct_value_address): Delete function.
	(m68hc11_return_value): New function.
	(m68hc11_gdbarch_init): Instead of store_return_value,
	extract_return_value, return_value_on_stack,
	deprecated_extract_struct_value_address and use_struct_convention,
	set return_value.
	* values.c (using_struct_return): Do not call
	RETURN_VALUE_ON_STACK.
	* arch-utils.h (generic_return_value_on_stack_not): Delete
	declaration.
	* arch-utils.c (generic_return_value_on_stack_not): Delete
	function.

Index: doc/ChangeLog
2004-06-13  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of RETURN_VALUE_ON_STACK.
@
text
@a152 2
  int deprecated_max_register_raw_size;
  int deprecated_max_register_virtual_size;
a298 2
  0,  /* deprecated_max_register_raw_size */
  0,  /* deprecated_max_register_virtual_size */
a576 2
  /* Skip verify of deprecated_max_register_raw_size, has predicate */
  /* Skip verify of deprecated_max_register_virtual_size, has predicate */
a1143 34
#ifdef DEPRECATED_MAX_REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_MAX_REGISTER_RAW_SIZE_P()",
                      XSTRING (DEPRECATED_MAX_REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE_P() = %d\n",
                      DEPRECATED_MAX_REGISTER_RAW_SIZE_P ());
#endif
#ifdef DEPRECATED_MAX_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE # %s\n",
                      XSTRING (DEPRECATED_MAX_REGISTER_RAW_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE = %d\n",
                      DEPRECATED_MAX_REGISTER_RAW_SIZE);
#endif
#ifdef DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P ());
#endif
#ifdef DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE # %s\n",
                      XSTRING (DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE = %d\n",
                      DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE);
#endif
a2804 46
gdbarch_deprecated_max_register_raw_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_max_register_raw_size != 0;
}

int
gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_raw_size called\n");
  return gdbarch->deprecated_max_register_raw_size;
}

void
set_gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch,
                                              int deprecated_max_register_raw_size)
{
  gdbarch->deprecated_max_register_raw_size = deprecated_max_register_raw_size;
}

int
gdbarch_deprecated_max_register_virtual_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_max_register_virtual_size != 0;
}

int
gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_virtual_size called\n");
  return gdbarch->deprecated_max_register_virtual_size;
}

void
set_gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch,
                                                  int deprecated_max_register_virtual_size)
{
  gdbarch->deprecated_max_register_virtual_size = deprecated_max_register_virtual_size;
}

int
@


1.294
log
@2004-06-10  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_PC_IN_CALL_DUMMY): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.h (deprecated_pc_in_call_dummy): Delete "sp" and "fp"
	parameters.
	* dummy-frame.c (deprecated_pc_in_call_dummy): Update.
	* arm-tdep.c (arm_pc_is_thumb_dummy): Call
	deprecated_pc_in_call_dummy instead of
	DEPRECATED_PC_IN_CALL_DUMMY.
	(arm_skip_prologue): Ditto.
	* xstormy16-tdep.c (xstormy16_pop_frame, xstormy16_scan_prologue)
	(xstormy16_frame_saved_pc, xstormy16_frame_chain): Ditto.
	* v850-tdep.c (v850_find_callers_reg, v850_frame_chain)
	(v850_pop_frame, v850_frame_saved_pc, v850_frame_init_saved_regs):
	Ditto.
	* sh64-tdep.c (sh64_frame_chain, sh64_get_saved_pr)
	(sh64_init_extra_frame_info, sh64_get_saved_register)
	(sh64_pop_frame): Ditto.
	* mips-tdep.c (non_heuristic_proc_desc): Ditto.
	* mcore-tdep.c (mcore_find_callers_reg, mcore_frame_saved_pc)
	(mcore_pop_frame, mcore_init_extra_frame_info): Ditto.
	* h8300-tdep.c (h8300_frame_chain, h8300_frame_saved_pc)
	(h8300_pop_frame): Ditto.
	* blockframe.c (legacy_inside_entry_func)
	(legacy_frame_chain_valid): Ditto.
	* frame.c (frame_type_from_pc, legacy_get_prev_frame): Update call
	to deprecated_pc_in_call_dummy.
@
text
@a186 1
  gdbarch_return_value_on_stack_ftype *return_value_on_stack;
a334 1
  0,  /* return_value_on_stack */
a463 1
  current_gdbarch->return_value_on_stack = generic_return_value_on_stack_not;
a610 1
  /* Skip verify of return_value_on_stack, invalid_p == 0 */
a1807 10
#ifdef RETURN_VALUE_ON_STACK
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "RETURN_VALUE_ON_STACK(type)",
                      XSTRING (RETURN_VALUE_ON_STACK (type)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: RETURN_VALUE_ON_STACK = <0x%08lx>\n",
                      (long) current_gdbarch->return_value_on_stack
                      /*RETURN_VALUE_ON_STACK ()*/);
#endif
a3564 17
int
gdbarch_return_value_on_stack (struct gdbarch *gdbarch, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->return_value_on_stack != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_value_on_stack called\n");
  return gdbarch->return_value_on_stack (type);
}

void
set_gdbarch_return_value_on_stack (struct gdbarch *gdbarch,
                                   gdbarch_return_value_on_stack_ftype return_value_on_stack)
{
  gdbarch->return_value_on_stack = return_value_on_stack;
}

@


1.293
log
@2004-06-09  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (:REGISTER_TO_VALUE, VALUE_TO_REGISTER): Do not
	provide a default value.
	(CONVERT_REGISTER_P): Default to generic_convert_register_p.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.c (generic_convert_register_p): Rename
	legacy_convert_register_p
	(legacy_register_to_value, legacy_value_to_register): Delete
	functions.
	* arch-utils.h (generic_convert_register_p): Rename
	legacy_convert_register_p.
	(legacy_register_to_value, legacy_value_to_register): Delete
	declarations.
@
text
@a174 1
  gdbarch_deprecated_pc_in_call_dummy_ftype *deprecated_pc_in_call_dummy;
a323 1
  deprecated_pc_in_call_dummy,  /* deprecated_pc_in_call_dummy */
a462 1
  current_gdbarch->deprecated_pc_in_call_dummy = deprecated_pc_in_call_dummy;
a604 1
  /* Skip verify of deprecated_pc_in_call_dummy, has predicate */
a1187 19
#ifdef DEPRECATED_PC_IN_CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_CALL_DUMMY_P()",
                      XSTRING (DEPRECATED_PC_IN_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY_P() = %d\n",
                      DEPRECATED_PC_IN_CALL_DUMMY_P ());
#endif
#ifdef DEPRECATED_PC_IN_CALL_DUMMY
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_CALL_DUMMY(pc, sp, frame_address)",
                      XSTRING (DEPRECATED_PC_IN_CALL_DUMMY (pc, sp, frame_address)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pc_in_call_dummy
                      /*DEPRECATED_PC_IN_CALL_DUMMY ()*/);
#endif
a3334 25
gdbarch_deprecated_pc_in_call_dummy_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_pc_in_call_dummy != deprecated_pc_in_call_dummy;
}

int
gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp, CORE_ADDR frame_address)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_pc_in_call_dummy != NULL);
  /* Do not check predicate: gdbarch->deprecated_pc_in_call_dummy != deprecated_pc_in_call_dummy, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pc_in_call_dummy called\n");
  return gdbarch->deprecated_pc_in_call_dummy (pc, sp, frame_address);
}

void
set_gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_pc_in_call_dummy_ftype deprecated_pc_in_call_dummy)
{
  gdbarch->deprecated_pc_in_call_dummy = deprecated_pc_in_call_dummy;
}

int
@


1.292
log
@2004-06-09  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERT_TO_RAW)
	(DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL)
	(DEPRECATED_REGISTER_CONVERTIBLE): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (default_print_registers_info): Simplify.
	* findvar.c (value_of_register): Simplify.
	* mi/mi-main.c (get_register): Simplify.
	* arch-utils.c (legacy_convert_register_p): Always return 0.
	(legacy_register_to_value, legacy_value_to_register): Always call
	internal_error.
@
text
@d466 1
a466 3
  current_gdbarch->convert_register_p = legacy_convert_register_p;
  current_gdbarch->register_to_value = legacy_register_to_value;
  current_gdbarch->value_to_register = legacy_value_to_register;
a611 2
  /* Skip verify of register_to_value, invalid_p == 0 */
  /* Skip verify of value_to_register, invalid_p == 0 */
@


1.291
log
@2004-06-06  Randolph Chung  <tausq@@debian.org>

	* gdbarch.sh (PUSH_DUMMY_CALL): Change CORE_ADDR func_addr argument
	to struct value *function.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Likewise.
	* infcall.c (call_function_by_hand): Pass entire function value
	to push_dummy_call.

	* Makefile.in (alpha-tdep.o, frv-tdep.o, ia64-tdep.o, mips-tdep.o)
	(ppc-sysv-tdep.o, rs6000-tdep.o): Update dependencies.
	* alpha-tdep.c (alpha_push_dummy_call): Update call signature.
	* amd64-tdep.c (amd64_push_dummy_call): Likewise.
	* arm-tdep.c (arm_push_dummy_call): Likewise.
	* avr-tdep.c (avr_push_dummy_call): Likewise.
	* cris-tdep.c (cris_push_dummy_call): Likewise.
	* d10v-tdep.c (d10v_push_dummy_call): Likewise.
	* frv-tdep.c (frv_push_dummy_call): Likewise.
	* h8300-tdep.c (h8300_push_dummy_call): Likewise.
	* hppa-tdep.c (hppa32_push_dummy_call)
	(hppa64_push_dummy_call): Likewise.
	* i386-tdep.c (i386_push_dummy_call): Likewise.
	* ia64-tdep.c (ia64_push_dummy_call): Likewise.
	* m32r-tdep.c (m32r_push_dummy_call): Likewise.
	* m68hc11-tdep.c (m68hc11_push_dummy_call): Likewise.
	* m68k-tdep.c (m68k_push_dummy_call): Likewise.
	* m88k-tdep.c (m88k_push_dummy_call): Likewise.
	* mips-tdep.c (mips_eabi_push_dummy_call, mips_n32n64_push_dummy_call)
	(mips_o32_push_dummy_call, mips_o64_push_dummy_call): Likewise.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call)
	(ppc64_sysv_abi_push_dummy_call): Likewise.
	* ppc-tdep.h (ppc_sysv_abi_push_dummy_call)
	(ppc64_sysv_abi_push_dummy_call): Likewise.
	* rs6000-tdep.c (rs6000_push_dummy_call): Likewise.
	* s390-tdep.c (s390_push_dummy_call): Likewise.
	* sh-tdep.c (sh_push_dummy_call_fpu)
	(sh_push_dummy_call_nofpu): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_call): Likewise.
	* sparc64-tdep.c (sparc64_push_dummy_call): Likewise.
	* vax-tdep.c (vax_push_dummy_call): Likewise.
@
text
@a178 3
  gdbarch_deprecated_register_convertible_ftype *deprecated_register_convertible;
  gdbarch_deprecated_register_convert_to_virtual_ftype *deprecated_register_convert_to_virtual;
  gdbarch_deprecated_register_convert_to_raw_ftype *deprecated_register_convert_to_raw;
a328 3
  0,  /* deprecated_register_convertible */
  0,  /* deprecated_register_convert_to_virtual */
  0,  /* deprecated_register_convert_to_raw */
a612 3
  /* Skip verify of deprecated_register_convertible, has predicate */
  /* Skip verify of deprecated_register_convert_to_virtual, invalid_p == 0 */
  /* Skip verify of deprecated_register_convert_to_raw, invalid_p == 0 */
a1298 39
#ifdef DEPRECATED_REGISTER_CONVERTIBLE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERTIBLE_P()",
                      XSTRING (DEPRECATED_REGISTER_CONVERTIBLE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERTIBLE_P() = %d\n",
                      DEPRECATED_REGISTER_CONVERTIBLE_P ());
#endif
#ifdef DEPRECATED_REGISTER_CONVERTIBLE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERTIBLE(nr)",
                      XSTRING (DEPRECATED_REGISTER_CONVERTIBLE (nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERTIBLE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convertible
                      /*DEPRECATED_REGISTER_CONVERTIBLE ()*/);
#endif
#ifdef DEPRECATED_REGISTER_CONVERT_TO_RAW
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERT_TO_RAW(type, regnum, from, to)",
                      XSTRING (DEPRECATED_REGISTER_CONVERT_TO_RAW (type, regnum, from, to)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_RAW = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convert_to_raw
                      /*DEPRECATED_REGISTER_CONVERT_TO_RAW ()*/);
#endif
#ifdef DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL(regnum, type, from, to)",
                      XSTRING (DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (regnum, type, from, to)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convert_to_virtual
                      /*DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL ()*/);
#endif
a3450 58
gdbarch_deprecated_register_convertible_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_convertible != NULL;
}

int
gdbarch_deprecated_register_convertible (struct gdbarch *gdbarch, int nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_convertible != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convertible called\n");
  return gdbarch->deprecated_register_convertible (nr);
}

void
set_gdbarch_deprecated_register_convertible (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_register_convertible_ftype deprecated_register_convertible)
{
  gdbarch->deprecated_register_convertible = deprecated_register_convertible;
}

void
gdbarch_deprecated_register_convert_to_virtual (struct gdbarch *gdbarch, int regnum, struct type *type, char *from, char *to)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_convert_to_virtual != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convert_to_virtual called\n");
  gdbarch->deprecated_register_convert_to_virtual (regnum, type, from, to);
}

void
set_gdbarch_deprecated_register_convert_to_virtual (struct gdbarch *gdbarch,
                                                    gdbarch_deprecated_register_convert_to_virtual_ftype deprecated_register_convert_to_virtual)
{
  gdbarch->deprecated_register_convert_to_virtual = deprecated_register_convert_to_virtual;
}

void
gdbarch_deprecated_register_convert_to_raw (struct gdbarch *gdbarch, struct type *type, int regnum, const char *from, char *to)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_convert_to_raw != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convert_to_raw called\n");
  gdbarch->deprecated_register_convert_to_raw (type, regnum, from, to);
}

void
set_gdbarch_deprecated_register_convert_to_raw (struct gdbarch *gdbarch,
                                                gdbarch_deprecated_register_convert_to_raw_ftype deprecated_register_convert_to_raw)
{
  gdbarch->deprecated_register_convert_to_raw = deprecated_register_convert_to_raw;
}

int
@


1.290
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to DEPRECATED_FIX_CALL_DUMMY.

2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FIX_CALL_DUMMY): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* ns32k-tdep.c (ns32k_gdbarch_init): Do not set
	deprecated_fix_call_dummy.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* infcall.c (call_function_by_hand): Do not call
	DEPRECATED_FIX_CALL_DUMMY.
@
text
@d3076 1
a3076 1
gdbarch_push_dummy_call (struct gdbarch *gdbarch, CORE_ADDR func_addr, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d3082 1
a3082 1
  return gdbarch->push_dummy_call (gdbarch, func_addr, regcache, bp_addr, nargs, args, sp, struct_return, struct_addr);
@


1.289
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_CALL_DUMMY_WORDS)
	(DEPRECATED_SIZEOF_CALL_DUMMY_WORDS): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-linux-tdep.c (arm_linux_call_dummy_words)
	(arm_linux_init_abi): Do not set deprecated_call_dummy_words or
	deprecated_sizeof_call_dummy_words.
	* arm-tdep.c (arm_call_dummy_words, arm_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sh64-tdep.c (sh64_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_call_dummy_words, ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* arch-utils.h (legacy_call_dummy_words)
	(legacy_sizeof_call_dummy_words): Delete declarations.
	* arch-utils.c (legacy_call_dummy_words)
	(legacy_sizeof_call_dummy_words): Delete variables.

Index: doc/ChangeLog
2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of DEPRECATED_CALL_DUMMY_WORDS,
	DEPRECATED_SIZEOF_CALL_DUMMY_WORDS, and CALL_DUMMY.
@
text
@a164 1
  gdbarch_deprecated_fix_call_dummy_ftype *deprecated_fix_call_dummy;
a317 1
  0,  /* deprecated_fix_call_dummy */
a605 1
  /* Skip verify of deprecated_fix_call_dummy, has predicate */
a972 19
#ifdef DEPRECATED_FIX_CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FIX_CALL_DUMMY_P()",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY_P() = %d\n",
                      DEPRECATED_FIX_CALL_DUMMY_P ());
#endif
#ifdef DEPRECATED_FIX_CALL_DUMMY
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FIX_CALL_DUMMY(dummy, pc, fun, nargs, args, type, gcc_p)",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY (dummy, pc, fun, nargs, args, type, gcc_p)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_fix_call_dummy
                      /*DEPRECATED_FIX_CALL_DUMMY ()*/);
#endif
a3194 24
}

int
gdbarch_deprecated_fix_call_dummy_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_fix_call_dummy != NULL;
}

void
gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch, char *dummy, CORE_ADDR pc, CORE_ADDR fun, int nargs, struct value **args, struct type *type, int gcc_p)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_fix_call_dummy != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fix_call_dummy called\n");
  gdbarch->deprecated_fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
}

void
set_gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_fix_call_dummy_ftype deprecated_fix_call_dummy)
{
  gdbarch->deprecated_fix_call_dummy = deprecated_fix_call_dummy;
@


1.288
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PUSH_DUMMY_FRAME): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* inferior.h (PUSH_DUMMY_FRAME): Delete macro.
	* infcall.c (call_function_by_hand): Eliminate call to
	DEPRECATED_PUSH_DUMMY_FRAME.
	* ns32k-tdep.c (ns32k_gdbarch_init): Do not set deprecated
	push_dummy_frame.
	(ns32k_push_dummy_frame): Delete function.
@
text
@a164 2
  LONGEST * deprecated_call_dummy_words;
  int deprecated_sizeof_call_dummy_words;
a318 2
  0,  /* deprecated_call_dummy_words */
  0,  /* deprecated_sizeof_call_dummy_words */
a468 2
  current_gdbarch->deprecated_call_dummy_words = legacy_call_dummy_words;
  current_gdbarch->deprecated_sizeof_call_dummy_words = legacy_sizeof_call_dummy_words;
a607 2
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
a908 8
#ifdef DEPRECATED_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) DEPRECATED_CALL_DUMMY_WORDS);
#endif
a1490 8
#ifdef DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_SIZEOF_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS = %d\n",
                      DEPRECATED_SIZEOF_CALL_DUMMY_WORDS);
#endif
a3216 34
}

LONGEST *
gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_words called\n");
  return gdbarch->deprecated_call_dummy_words;
}

void
set_gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch,
                                         LONGEST * deprecated_call_dummy_words)
{
  gdbarch->deprecated_call_dummy_words = deprecated_call_dummy_words;
}

int
gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sizeof_call_dummy_words called\n");
  return gdbarch->deprecated_sizeof_call_dummy_words;
}

void
set_gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch,
                                                int deprecated_sizeof_call_dummy_words)
{
  gdbarch->deprecated_sizeof_call_dummy_words = deprecated_sizeof_call_dummy_words;
@


1.287
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* ns32k-tdep.c (ns32k_gdbarch_init): Do not set
	deprecated_call_dummy_breakpoint_offset or
	deprecated_call_dummy_start_offset.
	* dummy-frame.c, arm-tdep.c: Update comments.
	* gdbarch.sh (DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET)
	(DEPRECATED_CALL_DUMMY_START_OFFSET): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.

Index: doc/ChangeLog
2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	reference to DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET.
@
text
@a168 1
  gdbarch_deprecated_push_dummy_frame_ftype *deprecated_push_dummy_frame;
a324 1
  0,  /* deprecated_push_dummy_frame */
a617 1
  /* Skip verify of deprecated_push_dummy_frame, has predicate */
a1299 19
#ifdef DEPRECATED_PUSH_DUMMY_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_DUMMY_FRAME_P()",
                      XSTRING (DEPRECATED_PUSH_DUMMY_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME_P() = %d\n",
                      DEPRECATED_PUSH_DUMMY_FRAME_P ());
#endif
#ifdef DEPRECATED_PUSH_DUMMY_FRAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_DUMMY_FRAME(-)",
                      XSTRING (DEPRECATED_PUSH_DUMMY_FRAME (-)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_dummy_frame
                      /*DEPRECATED_PUSH_DUMMY_FRAME ()*/);
#endif
a3322 24
}

int
gdbarch_deprecated_push_dummy_frame_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_dummy_frame != NULL;
}

void
gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_push_dummy_frame != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_dummy_frame called\n");
  gdbarch->deprecated_push_dummy_frame ();
}

void
set_gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_push_dummy_frame_ftype deprecated_push_dummy_frame)
{
  gdbarch->deprecated_push_dummy_frame = deprecated_push_dummy_frame;
@


1.286
log
@2004-05-07  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_USE_GENERIC_DUMMY_FRAMES): Replace with
	macro defined to 1.
	* gdbarch.h, gdbarch.c: Re-generate.
	* ns32k-tdep.c (ns32k_gdbarch_init): Do not set
	deprecated_use_generic_dummy_frames.
@
text
@a164 2
  CORE_ADDR deprecated_call_dummy_start_offset;
  CORE_ADDR deprecated_call_dummy_breakpoint_offset;
a321 2
  0,  /* deprecated_call_dummy_start_offset */
  0,  /* deprecated_call_dummy_breakpoint_offset */
a919 16
#ifdef DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET);
#endif
#ifdef DEPRECATED_CALL_DUMMY_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_START_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_START_OFFSET);
#endif
a3262 32
}

CORE_ADDR
gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_start_offset called\n");
  return gdbarch->deprecated_call_dummy_start_offset;
}

void
set_gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch,
                                                CORE_ADDR deprecated_call_dummy_start_offset)
{
  gdbarch->deprecated_call_dummy_start_offset = deprecated_call_dummy_start_offset;
}

CORE_ADDR
gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_breakpoint_offset called\n");
  return gdbarch->deprecated_call_dummy_breakpoint_offset;
}

void
set_gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch,
                                                     CORE_ADDR deprecated_call_dummy_breakpoint_offset)
{
  gdbarch->deprecated_call_dummy_breakpoint_offset = deprecated_call_dummy_breakpoint_offset;
@


1.285
log
@2004-05-05  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PARM_BOUNDARY): Delete.
	gdbarch.h, gdbarch.c: Re-generate.
	* valops.c (PARM_BOUNDARY): Delete macro.
	(value_push): Delete PARM_BOUNDARY code.
	* m68k-tdep.c (m68k_gdbarch_init): Do not set parm_boundary.
@
text
@a160 1
  int deprecated_use_generic_dummy_frames;
a319 1
  0,  /* deprecated_use_generic_dummy_frames */
a477 1
  current_gdbarch->deprecated_use_generic_dummy_frames = 1;
a616 1
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
a1623 8
#ifdef DEPRECATED_USE_GENERIC_DUMMY_FRAMES
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_USE_GENERIC_DUMMY_FRAMES # %s\n",
                      XSTRING (DEPRECATED_USE_GENERIC_DUMMY_FRAMES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_USE_GENERIC_DUMMY_FRAMES = %d\n",
                      DEPRECATED_USE_GENERIC_DUMMY_FRAMES);
#endif
a3201 17
}

int
gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_use_generic_dummy_frames called\n");
  return gdbarch->deprecated_use_generic_dummy_frames;
}

void
set_gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch,
                                                 int deprecated_use_generic_dummy_frames)
{
  gdbarch->deprecated_use_generic_dummy_frames = deprecated_use_generic_dummy_frames;
@


1.284
log
@2004-05-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PC_IN_SIGTRAMP): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* shnbsd-tdep.c (shnbsd_init_abi): Do not set pc_in_sigtramp.
	(shnbsd_pc_in_sigtramp): Delete.
	* i386-interix-tdep.c (i386_interix_init_abi): Do not set
	pc_in_sigtramp.
	* hppa-hpux-tdep.c (hppa_hpux_init_abi): Do not set
	pc_in_sigtramp.
	* frame.h: Update comments.
	* ppc-linux-tdep.c: Update comments.
	* breakpoint.c (bpstat_what): Update comments.

Index: doc/ChangeLog
2004-05-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of DEPRECATED_PC_IN_SIGTRAMP.
@
text
@a231 1
  int parm_boundary;
a391 1
  0,  /* parm_boundary */
a1875 8
#ifdef PARM_BOUNDARY
  fprintf_unfiltered (file,
                      "gdbarch_dump: PARM_BOUNDARY # %s\n",
                      XSTRING (PARM_BOUNDARY));
  fprintf_unfiltered (file,
                      "gdbarch_dump: PARM_BOUNDARY = %d\n",
                      PARM_BOUNDARY);
#endif
a4663 16
}

int
gdbarch_parm_boundary (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_parm_boundary called\n");
  return gdbarch->parm_boundary;
}

void
set_gdbarch_parm_boundary (struct gdbarch *gdbarch,
                           int parm_boundary)
{
  gdbarch->parm_boundary = parm_boundary;
@


1.283
log
@2004-05-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_SIGTRAMP_START)
	(DEPRECATED_SIGTRAMP_END): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.c (legacy_pc_in_sigtramp): Simplify.
	* config/vax/tm-vaxbsd.h: Update copyright.
	(DEPRECATED_SIGTRAMP_START, DEPRECATED_SIGTRAMP_END): Delete.
	(DEPRECATED_IN_SIGTRAMP): Define.
	* config/m68k/tm-nbsd.h: Update copyright.
	(DEPRECATED_SIGTRAMP_START, DEPRECATED_SIGTRAMP_END): Delete.
	(DEPRECATED_IN_SIGTRAMP): Define.
@
text
@a244 1
  gdbarch_deprecated_pc_in_sigtramp_ftype *deprecated_pc_in_sigtramp;
a405 1
  0,  /* deprecated_pc_in_sigtramp */
a512 1
  current_gdbarch->deprecated_pc_in_sigtramp = legacy_pc_in_sigtramp;
a708 1
  /* Skip verify of deprecated_pc_in_sigtramp, has predicate */
a1290 19
#ifdef DEPRECATED_PC_IN_SIGTRAMP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_SIGTRAMP_P()",
                      XSTRING (DEPRECATED_PC_IN_SIGTRAMP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_SIGTRAMP_P() = %d\n",
                      DEPRECATED_PC_IN_SIGTRAMP_P ());
#endif
#ifdef DEPRECATED_PC_IN_SIGTRAMP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_SIGTRAMP(pc, name)",
                      XSTRING (DEPRECATED_PC_IN_SIGTRAMP (pc, name)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_SIGTRAMP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pc_in_sigtramp
                      /*DEPRECATED_PC_IN_SIGTRAMP ()*/);
#endif
a4897 25
}

int
gdbarch_deprecated_pc_in_sigtramp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_pc_in_sigtramp != legacy_pc_in_sigtramp;
}

int
gdbarch_deprecated_pc_in_sigtramp (struct gdbarch *gdbarch, CORE_ADDR pc, char *name)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_pc_in_sigtramp != NULL);
  /* Do not check predicate: gdbarch->deprecated_pc_in_sigtramp != legacy_pc_in_sigtramp, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pc_in_sigtramp called\n");
  return gdbarch->deprecated_pc_in_sigtramp (pc, name);
}

void
set_gdbarch_deprecated_pc_in_sigtramp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_pc_in_sigtramp_ftype deprecated_pc_in_sigtramp)
{
  gdbarch->deprecated_pc_in_sigtramp = deprecated_pc_in_sigtramp;
@


1.282
log
@2004-04-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (BELIEVE_PCC_PROMOTION_TYPE): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* stabsread.c (define_symbol): Delete BELIEVE_PCC_PROMOTION_TYPE
	code.
@
text
@a245 2
  gdbarch_deprecated_sigtramp_start_ftype *deprecated_sigtramp_start;
  gdbarch_deprecated_sigtramp_end_ftype *deprecated_sigtramp_end;
a407 2
  0,  /* deprecated_sigtramp_start */
  0,  /* deprecated_sigtramp_end */
a712 2
  /* Skip verify of deprecated_sigtramp_start, has predicate */
  /* Skip verify of deprecated_sigtramp_end, has predicate */
a1577 38
#ifdef DEPRECATED_SIGTRAMP_END_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_END_P()",
                      XSTRING (DEPRECATED_SIGTRAMP_END_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_END_P() = %d\n",
                      DEPRECATED_SIGTRAMP_END_P ());
#endif
#ifdef DEPRECATED_SIGTRAMP_END
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_END(pc)",
                      XSTRING (DEPRECATED_SIGTRAMP_END (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_END = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_sigtramp_end
                      /*DEPRECATED_SIGTRAMP_END ()*/);
#endif
#ifdef DEPRECATED_SIGTRAMP_START_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_START_P()",
                      XSTRING (DEPRECATED_SIGTRAMP_START_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_START_P() = %d\n",
                      DEPRECATED_SIGTRAMP_START_P ());
#endif
#ifdef DEPRECATED_SIGTRAMP_START
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_START(pc)",
                      XSTRING (DEPRECATED_SIGTRAMP_START (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_START = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_sigtramp_start
                      /*DEPRECATED_SIGTRAMP_START ()*/);
#endif
a4945 48
}

int
gdbarch_deprecated_sigtramp_start_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_sigtramp_start != NULL;
}

CORE_ADDR
gdbarch_deprecated_sigtramp_start (struct gdbarch *gdbarch, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_sigtramp_start != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sigtramp_start called\n");
  return gdbarch->deprecated_sigtramp_start (pc);
}

void
set_gdbarch_deprecated_sigtramp_start (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_sigtramp_start_ftype deprecated_sigtramp_start)
{
  gdbarch->deprecated_sigtramp_start = deprecated_sigtramp_start;
}

int
gdbarch_deprecated_sigtramp_end_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_sigtramp_end != NULL;
}

CORE_ADDR
gdbarch_deprecated_sigtramp_end (struct gdbarch *gdbarch, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_sigtramp_end != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sigtramp_end called\n");
  return gdbarch->deprecated_sigtramp_end (pc);
}

void
set_gdbarch_deprecated_sigtramp_end (struct gdbarch *gdbarch,
                                     gdbarch_deprecated_sigtramp_end_ftype deprecated_sigtramp_end)
{
  gdbarch->deprecated_sigtramp_end = deprecated_sigtramp_end;
@


1.281
log
@2004-04-02  Andrew Cagney  <cagney@@redhat.com>

	* sh64-tdep.c (sh64_init_extra_frame_info): Replace
	DEPRECATED_CALL_DUMMY_LENGTH with 0, simplify.
	* dummy-frame.h: Delete out-of-date comments.
	* gdbarch.sh (DEPRECATED_CALL_DUMMY_LENGTH): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@a184 1
  int believe_pcc_promotion_type;
a348 1
  0,  /* believe_pcc_promotion_type */
a862 8
#ifdef BELIEVE_PCC_PROMOTION_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION_TYPE # %s\n",
                      XSTRING (BELIEVE_PCC_PROMOTION_TYPE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION_TYPE = %d\n",
                      BELIEVE_PCC_PROMOTION_TYPE);
#endif
a3779 16
}

int
gdbarch_believe_pcc_promotion_type (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_believe_pcc_promotion_type called\n");
  return gdbarch->believe_pcc_promotion_type;
}

void
set_gdbarch_believe_pcc_promotion_type (struct gdbarch *gdbarch,
                                        int believe_pcc_promotion_type)
{
  gdbarch->believe_pcc_promotion_type = believe_pcc_promotion_type;
@


1.280
log
@2004-04-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_INIT_FRAME_PC_FIRST): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (legacy_get_prev_frame): Delete references to
	DEPRECATED_INIT_FRAME_PC_FIRST.
@
text
@a167 1
  int deprecated_call_dummy_length;
a332 1
  0,  /* deprecated_call_dummy_length */
a957 8
#ifdef DEPRECATED_CALL_DUMMY_LENGTH
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_LENGTH));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH = %d\n",
                      DEPRECATED_CALL_DUMMY_LENGTH);
#endif
a3430 16
}

int
gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_length called\n");
  return gdbarch->deprecated_call_dummy_length;
}

void
set_gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch,
                                          int deprecated_call_dummy_length)
{
  gdbarch->deprecated_call_dummy_length = deprecated_call_dummy_length;
@


1.279
log
@2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (SIGTRAMP_START, SIGTRAMP_END): Deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* i386obsd-tdep.c (i386obsd_init_abi): Update.
	* i386nbsd-tdep.c (i386nbsd_init_abi): Update.
	* i386bsd-tdep.c (i386bsd_init_abi): Update.
	* config/vax/tm-vaxbsd.h (DEPRECATED_SIGTRAMP_END)
	(DEPRECATED_SIGTRAMP_START): Update.
	* config/m68k/tm-nbsd.h (DEPRECATED_SIGTRAMP_END)
	(DEPRECATED_SIGTRAMP_START): Update.
	* blockframe.c (find_pc_sect_partial_function): Update.
	* arch-utils.c (legacy_pc_in_sigtramp): Update.

Index: doc/ChangeLog
2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	references to SIGTRAMP_START and SIGTRAMP_END.
@
text
@a183 1
  gdbarch_deprecated_init_frame_pc_first_ftype *deprecated_init_frame_pc_first;
a349 1
  0,  /* deprecated_init_frame_pc_first */
a651 1
  /* Skip verify of deprecated_init_frame_pc_first, has predicate */
a1267 19
#ifdef DEPRECATED_INIT_FRAME_PC_FIRST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_FIRST_P()",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_FIRST_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST_P() = %d\n",
                      DEPRECATED_INIT_FRAME_PC_FIRST_P ());
#endif
#ifdef DEPRECATED_INIT_FRAME_PC_FIRST
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_FIRST(fromleaf, prev)",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_FIRST (fromleaf, prev)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_frame_pc_first
                      /*DEPRECATED_INIT_FRAME_PC_FIRST ()*/);
#endif
a3775 24
}

int
gdbarch_deprecated_init_frame_pc_first_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_init_frame_pc_first != NULL;
}

CORE_ADDR
gdbarch_deprecated_init_frame_pc_first (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_init_frame_pc_first != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_frame_pc_first called\n");
  return gdbarch->deprecated_init_frame_pc_first (fromleaf, prev);
}

void
set_gdbarch_deprecated_init_frame_pc_first (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_init_frame_pc_first_ftype deprecated_init_frame_pc_first)
{
  gdbarch->deprecated_init_frame_pc_first = deprecated_init_frame_pc_first;
@


1.278
log
@2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PC_IN_SIGTRAMP): Change to a function with
	predicate, deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* alpha-linux-tdep.c (alpha_linux_init_abi): Update.
	* alpha-osf1-tdep.c (alpha_osf1_init_abi): Update.
	* alpha-tdep.c (alpha_sigtramp_frame_sniffer): Update.
	* alphafbsd-tdep.c (alphafbsd_init_abi): Update.
	* alphanbsd-tdep.c (alphanbsd_init_abi): Update.
	* amd64-linux-tdep.c (amd64_linux_init_abi): Update.
	* amd64-tdep.c (amd64_sigtramp_frame_sniffer): Update.
	* amd64nbsd-tdep.c (amd64nbsd_init_abi): Update.
	* amd64obsd-tdep.c (amd64obsd_init_abi): Update.
	* arm-tdep.c (arm_sigtramp_unwind_sniffer): Update.
	* blockframe.c (find_pc_partial_function): Update.
	* breakpoint.c (bpstat_what): Update.
	* frame.c (frame_type_from_pc, legacy_get_prev_frame): Update.
	* frv-linux-tdep.c (frv_linux_init_abi): Update.
	* frv-tdep.c (frv_sigtramp_frame_sniffer): Update.
	* hppa-hpux-tdep.c (hppa_hpux_init_abi): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* i386-nto-tdep.c (i386nto_init_abi): Update.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Update.
	* i386-tdep.c (i386_sigtramp_frame_sniffer)
	(i386_svr4_init_abi, i386_go32_init_abi, i386_gdbarch_init): Update.
	* i386bsd-tdep.c (i386bsd_init_abi): Update.
	* i386nbsd-tdep.c (i386nbsd_init_abi): Update.
	* i386obsd-tdep.c (i386obsd_init_abi): Update.
	* ia64-tdep.c (ia64_sigtramp_frame_sniffer): Update.
	* infrun.c (pc_in_sigtramp): Update.
	* m68k-tdep.c (m68k_sigtramp_frame_sniffer): Update.
	* m68klinux-tdep.c (m68k_linux_init_abi): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mipsnbsd-tdep.c (mipsnbsd_init_abi): Update.
	* ppc-linux-tdep.c: Update comment.
	* ppcnbsd-tdep.c (ppcnbsd_init_abi): Update.
	* shnbsd-tdep.c (shnbsd_init_abi): Update.
	* sparc-linux-tdep.c (sparc32_linux_init_abi): Update.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Update.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Update.
	* sparc64fbsd-tdep.c (sparc64fbsd_init_abi): Update.
	* sparc64nbsd-tdep.c (sparc64nbsd_init_abi): Update.
	* sparc64obsd-tdep.c (sparc64obsd_init_abi): Update.
	* sparcnbsd-tdep.c (sparc32nbsd_init_abi): Update.
	* sparcobsd-tdep.c (sparc32obsd_init_abi): Update.

Index: doc/ChangeLog
2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	references to PC_IN_SIGTRAMP.
@
text
@d249 2
a250 2
  gdbarch_sigtramp_start_ftype *sigtramp_start;
  gdbarch_sigtramp_end_ftype *sigtramp_end;
d416 2
a417 2
  0,  /* sigtramp_start */
  0,  /* sigtramp_end */
d724 2
a725 2
  /* Skip verify of sigtramp_start, has predicate */
  /* Skip verify of sigtramp_end, has predicate */
d1626 38
a2125 38
#ifdef SIGTRAMP_END_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_END_P()",
                      XSTRING (SIGTRAMP_END_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_END_P() = %d\n",
                      SIGTRAMP_END_P ());
#endif
#ifdef SIGTRAMP_END
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_END(pc)",
                      XSTRING (SIGTRAMP_END (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_END = <0x%08lx>\n",
                      (long) current_gdbarch->sigtramp_end
                      /*SIGTRAMP_END ()*/);
#endif
#ifdef SIGTRAMP_START_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_START_P()",
                      XSTRING (SIGTRAMP_START_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_START_P() = %d\n",
                      SIGTRAMP_START_P ());
#endif
#ifdef SIGTRAMP_START
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_START(pc)",
                      XSTRING (SIGTRAMP_START (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_START = <0x%08lx>\n",
                      (long) current_gdbarch->sigtramp_start
                      /*SIGTRAMP_START ()*/);
#endif
d5091 1
a5091 1
gdbarch_sigtramp_start_p (struct gdbarch *gdbarch)
d5094 1
a5094 1
  return gdbarch->sigtramp_start != NULL;
d5098 1
a5098 1
gdbarch_sigtramp_start (struct gdbarch *gdbarch, CORE_ADDR pc)
d5101 1
a5101 1
  gdb_assert (gdbarch->sigtramp_start != NULL);
d5103 2
a5104 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sigtramp_start called\n");
  return gdbarch->sigtramp_start (pc);
d5108 2
a5109 2
set_gdbarch_sigtramp_start (struct gdbarch *gdbarch,
                            gdbarch_sigtramp_start_ftype sigtramp_start)
d5111 1
a5111 1
  gdbarch->sigtramp_start = sigtramp_start;
d5115 1
a5115 1
gdbarch_sigtramp_end_p (struct gdbarch *gdbarch)
d5118 1
a5118 1
  return gdbarch->sigtramp_end != NULL;
d5122 1
a5122 1
gdbarch_sigtramp_end (struct gdbarch *gdbarch, CORE_ADDR pc)
d5125 1
a5125 1
  gdb_assert (gdbarch->sigtramp_end != NULL);
d5127 2
a5128 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sigtramp_end called\n");
  return gdbarch->sigtramp_end (pc);
d5132 2
a5133 2
set_gdbarch_sigtramp_end (struct gdbarch *gdbarch,
                          gdbarch_sigtramp_end_ftype sigtramp_end)
d5135 1
a5135 1
  gdbarch->sigtramp_end = sigtramp_end;
@


1.277
log
@2004-03-22  Andrew Cagney  <cagney@@redhat.com>

	* frame.h (deprecated_pc_in_call_dummy): Rename
	generic_pc_in_call_dummy.
	* dummy-frame.h (pc_in_dummy_frame): Delete declaration.
	* dummy-frame.c (deprecated_pc_in_call_dummy): Rename
	generic_pc_in_call_dummy.
	(pc_in_dummy_frame): Make static.
	* gdbarch.sh (DEPRECATED_PC_IN_CALL_DUMMY): Update.
	* gdbarch.h, gdbarch.c: Re-generate.
	* dummy-frame.c (dummy_frame_sniffer): Simplify.
	* frame.c (frame_type_from_pc): Call deprecated_pc_in_call_dummy.
	(legacy_get_prev_frame): Ditto.
	* inferior.h: Delete reference to generic_pc_in_call_dummy in
	comment.
@
text
@d248 1
a248 1
  gdbarch_pc_in_sigtramp_ftype *pc_in_sigtramp;
d415 1
a415 1
  0,  /* pc_in_sigtramp */
d525 1
a525 1
  current_gdbarch->pc_in_sigtramp = legacy_pc_in_sigtramp;
d723 1
a723 1
  /* Skip verify of pc_in_sigtramp, invalid_p == 0 */
d1343 19
a1956 10
#ifdef PC_IN_SIGTRAMP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PC_IN_SIGTRAMP(pc, name)",
                      XSTRING (PC_IN_SIGTRAMP (pc, name)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: PC_IN_SIGTRAMP = <0x%08lx>\n",
                      (long) current_gdbarch->pc_in_sigtramp
                      /*PC_IN_SIGTRAMP ()*/);
#endif
d5066 8
a5073 1
gdbarch_pc_in_sigtramp (struct gdbarch *gdbarch, CORE_ADDR pc, char *name)
d5076 2
a5077 1
  gdb_assert (gdbarch->pc_in_sigtramp != NULL);
d5079 2
a5080 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pc_in_sigtramp called\n");
  return gdbarch->pc_in_sigtramp (pc, name);
d5084 2
a5085 2
set_gdbarch_pc_in_sigtramp (struct gdbarch *gdbarch,
                            gdbarch_pc_in_sigtramp_ftype pc_in_sigtramp)
d5087 1
a5087 1
  gdbarch->pc_in_sigtramp = pc_in_sigtramp;
@


1.276
log
@2004-03-15  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (gdbarch_data_pre_init_fytpe)
	(gdbarch_data_register_pre_init, gdbarch_data_post_init_fytpe)
	(gdbarch_data_register_post_init): Replace gdbarch_data_init_ftype
	and register_gdbarch_data.
	(deprecated_set_gdbarch_data): Rename set_gdbarch_data.
	(struct gdbarch_data): Replace "init" by "pre_init" and
	"post_init".
	* gdbarch.h, gdbarch.c: Re-generate.
	* dwarf2-frame.c (dwarf2_frame_init): Replace "gdbarch" paramter
	with"obstack", use OBSTACK_ZALLOC.
	(dwarf2_frame_ops): Delete.
	(dwarf2_frame_set_init_reg): Use gdbarch_data.
	(dwarf2_frame_init_reg): Use gdbarch_data.
	(_initialize_dwarf2_frame): Use gdbarch_data_register_pre_init.
	* solib-svr4.c (set_solib_svr4_fetch_link_map_offsets)
	(_initialize_svr4_solib): Update.
	* user-regs.c (_initialize_user_regs): Update.
	* reggroups.c (_initialize_reggroup): Update.
	* regcache.c (_initialize_regcache): Update.
	* mips-linux-tdep.c (_initialize_mips_linux_tdep): Update.
	* libunwind-frame.c (_initialize_libunwind_frame): Update.
	* gnu-v3-abi.c (init_gnuv3_ops): Update.
	* frame-unwind.c (_initialize_frame_unwind): Update.
	* frame-base.c (_initialize_frame_base): Update.
	* user-regs.c (user_reg_add): Update.
	* reggroups.c (reggroup_add): Update.
	* mips-linux-tdep.c (set_mips_linux_register_addr): Update.
	* libunwind-frame.c (libunwind_frame_set_descr): Update.
	* frame-unwind.c (frame_unwind_append_sniffer): Update.
	* frame-base.c (frame_base_table): Update.
	* remote.c (_initialize_remote): Update.
	* gdb_obstack.h (OBSTACK_ZALLOC, OBSTACK_CALLOC): Define.
@
text
@d350 1
a350 1
  generic_pc_in_call_dummy,  /* deprecated_pc_in_call_dummy */
d502 1
a502 1
  current_gdbarch->deprecated_pc_in_call_dummy = generic_pc_in_call_dummy;
d3770 1
a3770 1
  return gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy;
d3778 1
a3778 1
  /* Do not check predicate: gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy, allow call.  */
@


1.275
log
@2004-02-09  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAMELESS_FUNCTION_INVOCATION): Predicate
	and function replacing FRAMELESS_FUNCTION_INVOCATION.
	* blockframe.c (legacy_frameless_look_for_prologue): Rename
	frameless_look_for_prologue.
	* frame.h (legacy_frameless_look_for_prologue): Rename
	frameless_look_for_prologue.
	* gdbarch.h, gdbarch.c: Re-generate.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	(delta68_frame_args_address): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	(frv_frameless_function_invocation): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	(cris_frameless_function_invocation): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* stack.c (frame_info): Update, call predicate.
	* rs6000-tdep.c (rs6000_frame_chain): Update, call predicate..
	* frame.c (legacy_get_prev_frame): Update, call predicate..
	* arch-utils.c (generic_frameless_function_invocation_not): Delete.
	* arch-utils.h (generic_frameless_function_invocation_not): Delete.
	* alpha-tdep.c (alpha_gdbarch_init): Do not set frameless function
	invocation.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
@
text
@d5385 2
a5386 1
  gdbarch_data_init_ftype *init;
d5406 3
a5408 2
struct gdbarch_data *
register_gdbarch_data (gdbarch_data_init_ftype *init)
d5419 2
a5420 1
  (*curr)->data->init = init;
d5425 11
d5451 3
a5453 3
set_gdbarch_data (struct gdbarch *gdbarch,
                  struct gdbarch_data *data,
                  void *pointer)
d5457 1
d5468 1
a5468 5
  /* The data-pointer isn't initialized, call init() to get a value but
     only if the architecture initializaiton has completed.  Otherwise
     punt - hope that the caller knows what they are doing.  */
  if (gdbarch->data[data->index] == NULL
      && gdbarch->initialized_p)
d5470 25
a5494 6
      /* Be careful to detect an initialization cycle.  */
      gdb_assert (data->init_p);
      data->init_p = 0;
      gdb_assert (data->init != NULL);
      gdbarch->data[data->index] = data->init (gdbarch);
      data->init_p = 1;
@


1.275.2.1
log
@Merge mainline to intercu branch.
@
text
@d248 3
a250 3
  gdbarch_deprecated_pc_in_sigtramp_ftype *deprecated_pc_in_sigtramp;
  gdbarch_deprecated_sigtramp_start_ftype *deprecated_sigtramp_start;
  gdbarch_deprecated_sigtramp_end_ftype *deprecated_sigtramp_end;
d350 1
a350 1
  deprecated_pc_in_call_dummy,  /* deprecated_pc_in_call_dummy */
d415 3
a417 3
  0,  /* deprecated_pc_in_sigtramp */
  0,  /* deprecated_sigtramp_start */
  0,  /* deprecated_sigtramp_end */
d502 1
a502 1
  current_gdbarch->deprecated_pc_in_call_dummy = deprecated_pc_in_call_dummy;
d525 1
a525 1
  current_gdbarch->deprecated_pc_in_sigtramp = legacy_pc_in_sigtramp;
d723 3
a725 3
  /* Skip verify of deprecated_pc_in_sigtramp, has predicate */
  /* Skip verify of deprecated_sigtramp_start, has predicate */
  /* Skip verify of deprecated_sigtramp_end, has predicate */
a1342 19
#ifdef DEPRECATED_PC_IN_SIGTRAMP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_SIGTRAMP_P()",
                      XSTRING (DEPRECATED_PC_IN_SIGTRAMP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_SIGTRAMP_P() = %d\n",
                      DEPRECATED_PC_IN_SIGTRAMP_P ());
#endif
#ifdef DEPRECATED_PC_IN_SIGTRAMP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_SIGTRAMP(pc, name)",
                      XSTRING (DEPRECATED_PC_IN_SIGTRAMP (pc, name)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_SIGTRAMP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pc_in_sigtramp
                      /*DEPRECATED_PC_IN_SIGTRAMP ()*/);
#endif
a1606 38
#ifdef DEPRECATED_SIGTRAMP_END_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_END_P()",
                      XSTRING (DEPRECATED_SIGTRAMP_END_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_END_P() = %d\n",
                      DEPRECATED_SIGTRAMP_END_P ());
#endif
#ifdef DEPRECATED_SIGTRAMP_END
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_END(pc)",
                      XSTRING (DEPRECATED_SIGTRAMP_END (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_END = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_sigtramp_end
                      /*DEPRECATED_SIGTRAMP_END ()*/);
#endif
#ifdef DEPRECATED_SIGTRAMP_START_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_START_P()",
                      XSTRING (DEPRECATED_SIGTRAMP_START_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_START_P() = %d\n",
                      DEPRECATED_SIGTRAMP_START_P ());
#endif
#ifdef DEPRECATED_SIGTRAMP_START
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SIGTRAMP_START(pc)",
                      XSTRING (DEPRECATED_SIGTRAMP_START (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIGTRAMP_START = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_sigtramp_start
                      /*DEPRECATED_SIGTRAMP_START ()*/);
#endif
d1938 10
d2079 38
d3770 1
a3770 1
  return gdbarch->deprecated_pc_in_call_dummy != deprecated_pc_in_call_dummy;
d3778 1
a3778 1
  /* Do not check predicate: gdbarch->deprecated_pc_in_call_dummy != deprecated_pc_in_call_dummy, allow call.  */
d5057 1
a5057 1
gdbarch_deprecated_pc_in_sigtramp_p (struct gdbarch *gdbarch)
d5060 1
a5060 9
  return gdbarch->deprecated_pc_in_sigtramp != legacy_pc_in_sigtramp;
}

int
gdbarch_deprecated_pc_in_sigtramp (struct gdbarch *gdbarch, CORE_ADDR pc, char *name)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_pc_in_sigtramp != NULL);
  /* Do not check predicate: gdbarch->deprecated_pc_in_sigtramp != legacy_pc_in_sigtramp, allow call.  */
d5062 2
a5063 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pc_in_sigtramp called\n");
  return gdbarch->deprecated_pc_in_sigtramp (pc, name);
d5067 2
a5068 2
set_gdbarch_deprecated_pc_in_sigtramp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_pc_in_sigtramp_ftype deprecated_pc_in_sigtramp)
d5070 1
a5070 1
  gdbarch->deprecated_pc_in_sigtramp = deprecated_pc_in_sigtramp;
d5074 1
a5074 1
gdbarch_deprecated_sigtramp_start_p (struct gdbarch *gdbarch)
d5077 1
a5077 1
  return gdbarch->deprecated_sigtramp_start != NULL;
d5081 1
a5081 1
gdbarch_deprecated_sigtramp_start (struct gdbarch *gdbarch, CORE_ADDR pc)
d5084 1
a5084 1
  gdb_assert (gdbarch->deprecated_sigtramp_start != NULL);
d5086 2
a5087 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sigtramp_start called\n");
  return gdbarch->deprecated_sigtramp_start (pc);
d5091 2
a5092 2
set_gdbarch_deprecated_sigtramp_start (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_sigtramp_start_ftype deprecated_sigtramp_start)
d5094 1
a5094 1
  gdbarch->deprecated_sigtramp_start = deprecated_sigtramp_start;
d5098 1
a5098 1
gdbarch_deprecated_sigtramp_end_p (struct gdbarch *gdbarch)
d5101 1
a5101 1
  return gdbarch->deprecated_sigtramp_end != NULL;
d5105 1
a5105 1
gdbarch_deprecated_sigtramp_end (struct gdbarch *gdbarch, CORE_ADDR pc)
d5108 1
a5108 1
  gdb_assert (gdbarch->deprecated_sigtramp_end != NULL);
d5110 2
a5111 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sigtramp_end called\n");
  return gdbarch->deprecated_sigtramp_end (pc);
d5115 2
a5116 2
set_gdbarch_deprecated_sigtramp_end (struct gdbarch *gdbarch,
                                     gdbarch_deprecated_sigtramp_end_ftype deprecated_sigtramp_end)
d5118 1
a5118 1
  gdbarch->deprecated_sigtramp_end = deprecated_sigtramp_end;
d5385 1
a5385 2
  gdbarch_data_pre_init_ftype *pre_init;
  gdbarch_data_post_init_ftype *post_init;
d5405 2
a5406 3
static struct gdbarch_data *
gdbarch_data_register (gdbarch_data_pre_init_ftype *pre_init,
		       gdbarch_data_post_init_ftype *post_init)
d5417 1
a5417 2
  (*curr)->data->pre_init = pre_init;
  (*curr)->data->post_init = post_init;
a5421 11
struct gdbarch_data *
gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *pre_init)
{
  return gdbarch_data_register (pre_init, NULL);
}

struct gdbarch_data *
gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *post_init)
{
  return gdbarch_data_register (NULL, post_init);
}
d5437 3
a5439 3
deprecated_set_gdbarch_data (struct gdbarch *gdbarch,
			     struct gdbarch_data *data,
			     void *pointer)
a5442 1
  gdb_assert (data->pre_init == NULL);
d5453 5
a5457 1
  if (gdbarch->data[data->index] == NULL)
d5459 6
a5464 25
      /* The data-pointer isn't initialized, call init() to get a
	 value.  */
      if (data->pre_init != NULL)
	/* Mid architecture creation: pass just the obstack, and not
	   the entire architecture, as that way it isn't possible for
	   pre-init code to refer to undefined architecture
	   fields.  */
	gdbarch->data[data->index] = data->pre_init (gdbarch->obstack);
      else if (gdbarch->initialized_p
	       && data->post_init != NULL)
	/* Post architecture creation: pass the entire architecture
	   (as all fields are valid), but be careful to also detect
	   recursive references.  */
	{
	  gdb_assert (data->init_p);
	  data->init_p = 0;
	  gdbarch->data[data->index] = data->post_init (gdbarch);
	  data->init_p = 1;
	}
      else
	/* The architecture initialization hasn't completed - punt -
	 hope that the caller knows what they are doing.  Once
	 deprecated_set_gdbarch_data has been initialized, this can be
	 changed to an internal error.  */
	return NULL;
@


1.275.2.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a64 9
static const char *
pformat (const struct floatformat *format)
{
  if (format == NULL)
    return "(null)";
  else
    return  format->name;
}

a122 1
  const struct floatformat * float_format;
a123 1
  const struct floatformat * double_format;
a124 1
  const struct floatformat * long_double_format;
d148 2
d151 4
d156 1
d158 1
d161 3
d166 6
d173 2
d183 3
d187 5
d198 1
d201 1
d206 1
a206 1
  gdbarch_deprecated_use_struct_convention_ftype *deprecated_use_struct_convention;
d208 2
d217 1
a217 1
  CORE_ADDR deprecated_function_start_offset;
d220 4
d226 2
d235 4
d248 3
a289 1
  0,  /* float_format */
a290 1
  0,  /* double_format */
a291 1
  0,  /* long_double_format */
d315 2
d318 4
d323 1
d325 1
d328 3
d333 6
d340 2
d350 3
d354 5
d365 1
d368 1
d373 1
a373 1
  0,  /* deprecated_use_struct_convention */
d375 2
d384 1
a384 1
  0,  /* deprecated_function_start_offset */
d387 4
d393 2
d402 4
d415 3
d491 2
d494 1
d496 2
d502 4
a505 1
  current_gdbarch->convert_register_p = generic_convert_register_p;
d508 1
a508 1
  current_gdbarch->return_value = legacy_return_value;
d511 1
a511 1
  current_gdbarch->deprecated_use_struct_convention = generic_use_struct_convention;
d515 2
d525 1
a594 2
  if (current_gdbarch->float_format == 0)
    current_gdbarch->float_format = default_float_format (current_gdbarch);
a595 2
  if (current_gdbarch->double_format == 0)
    current_gdbarch->double_format = default_double_format (current_gdbarch);
a596 2
  if (current_gdbarch->long_double_format == 0)
    current_gdbarch->long_double_format = default_double_format (current_gdbarch);
d609 2
a610 1
  if (current_gdbarch->num_regs == -1)
d623 1
d625 4
d630 1
d632 1
d635 3
d639 3
d643 2
d653 7
d661 2
d666 1
d669 1
d672 1
a672 1
  /* Skip verify of deprecated_use_struct_convention, invalid_p == 0 */
d674 4
a677 1
  if (current_gdbarch->skip_prologue == 0)
d679 2
a680 1
  if (current_gdbarch->inner_than == 0)
d682 2
a683 1
  if (current_gdbarch->breakpoint_from_pc == 0)
d689 1
a689 1
  /* Skip verify of deprecated_function_start_offset, invalid_p == 0 */
d692 4
d698 2
d706 6
d716 2
a717 1
  if (current_gdbarch->print_insn == 0)
d723 3
a759 6
  const char *gdb_xm_file = "<not-defined>";
  const char *gdb_nm_file = "<not-defined>";
  const char *gdb_tm_file = "<not-defined>";
#if defined (GDB_XM_FILE)
  gdb_xm_file = GDB_XM_FILE;
#endif
d761 26
a786 5
                      "gdbarch_dump: GDB_XM_FILE = %s\n",
                      gdb_xm_file);
#if defined (GDB_NM_FILE)
  gdb_nm_file = GDB_NM_FILE;
#endif
d788 2
a789 5
                      "gdbarch_dump: GDB_NM_FILE = %s\n",
                      gdb_nm_file);
#if defined (GDB_TM_FILE)
  gdb_tm_file = GDB_TM_FILE;
#endif
d791 2
a792 3
                      "gdbarch_dump: GDB_TM_FILE = %s\n",
                      gdb_tm_file);
#ifdef TARGET_ADDR_BIT
d794 2
a795 3
                      "gdbarch_dump: TARGET_ADDR_BIT # %s\n",
                      XSTRING (TARGET_ADDR_BIT));
#endif
d797 2
a798 3
                      "gdbarch_dump: addr_bit = %s\n",
                      paddr_d (current_gdbarch->addr_bit));
#ifdef ADDR_BITS_REMOVE
d800 2
a801 4
                      "gdbarch_dump: %s # %s\n",
                      "ADDR_BITS_REMOVE(addr)",
                      XSTRING (ADDR_BITS_REMOVE (addr)));
#endif
d803 2
a804 2
                      "gdbarch_dump: addr_bits_remove = <0x%lx>\n",
                      (long) current_gdbarch->addr_bits_remove);
d809 1
a809 1
                      "gdbarch_dump: address_class_name_to_type_flags = <0x%lx>\n",
d816 3
a819 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_type_flags_p() = %d\n",
                      gdbarch_address_class_type_flags_p (current_gdbarch));
d825 4
a830 3
                      "gdbarch_dump: address_class_type_flags = <0x%lx>\n",
                      (long) current_gdbarch->address_class_type_flags);
  fprintf_unfiltered (file,
d834 1
a834 1
                      "gdbarch_dump: address_class_type_flags_to_name = <0x%lx>\n",
d841 4
d846 1
d848 8
a855 2
                      "gdbarch_dump: address_to_pointer = <0x%lx>\n",
                      (long) current_gdbarch->address_to_pointer);
d860 1
a860 1
                      "gdbarch_dump: adjust_breakpoint_address = <0x%lx>\n",
a865 5
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: believe_pcc_promotion = %s\n",
                      paddr_d (current_gdbarch->believe_pcc_promotion));
#ifdef TARGET_ARCHITECTURE
d867 2
a868 2
                      "gdbarch_dump: TARGET_ARCHITECTURE # %s\n",
                      XSTRING (TARGET_ARCHITECTURE));
d870 1
d872 2
a873 3
                      "gdbarch_dump: bfd_arch_info = %s\n",
                      TARGET_ARCHITECTURE->printable_name);
#ifdef TARGET_BFD_VMA_BIT
d875 2
a876 2
                      "gdbarch_dump: TARGET_BFD_VMA_BIT # %s\n",
                      XSTRING (TARGET_BFD_VMA_BIT));
a877 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: bfd_vma_bit = %s\n",
                      paddr_d (current_gdbarch->bfd_vma_bit));
a882 5
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: breakpoint_from_pc = <0x%lx>\n",
                      (long) current_gdbarch->breakpoint_from_pc);
#ifdef TARGET_BYTE_ORDER
d884 3
a886 2
                      "gdbarch_dump: TARGET_BYTE_ORDER # %s\n",
                      XSTRING (TARGET_BYTE_ORDER));
a887 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: byte_order = %s\n",
                      paddr_d (current_gdbarch->byte_order));
d892 3
a895 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: call_dummy_location = %s\n",
                      paddr_d (current_gdbarch->call_dummy_location));
d901 4
a905 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: cannot_fetch_register = <0x%lx>\n",
                      (long) current_gdbarch->cannot_fetch_register);
d910 3
a913 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: cannot_step_breakpoint = %s\n",
                      paddr_d (current_gdbarch->cannot_step_breakpoint));
a918 5
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: cannot_store_register = <0x%lx>\n",
                      (long) current_gdbarch->cannot_store_register);
#ifdef TARGET_CHAR_SIGNED
d920 3
a922 2
                      "gdbarch_dump: TARGET_CHAR_SIGNED # %s\n",
                      XSTRING (TARGET_CHAR_SIGNED));
a923 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: char_signed = %s\n",
                      paddr_d (current_gdbarch->char_signed));
d929 4
d935 1
a935 4
                      "gdbarch_dump: coff_make_msymbol_special = <0x%lx>\n",
                      (long) current_gdbarch->coff_make_msymbol_special);
  fprintf_unfiltered (file,
                      "gdbarch_dump: construct_inferior_arguments = <0x%lx>\n",
a936 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: convert_from_func_ptr_addr = <0x%lx>\n",
                      (long) current_gdbarch->convert_from_func_ptr_addr);
d942 4
a946 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: convert_register_p = <0x%lx>\n",
                      (long) current_gdbarch->convert_register_p);
d951 63
d1015 5
d1021 4
a1024 2
                      "gdbarch_dump: decr_pc_after_break = 0x%s\n",
                      paddr_nz (current_gdbarch->decr_pc_after_break));
d1030 4
a1034 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: deprecated_extract_return_value = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_extract_return_value);
d1040 3
a1043 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_deprecated_extract_struct_value_address_p() = %d\n",
                      gdbarch_deprecated_extract_struct_value_address_p (current_gdbarch));
d1049 13
d1063 5
d1069 4
a1072 2
                      "gdbarch_dump: deprecated_extract_struct_value_address = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_extract_struct_value_address);
d1077 3
d1081 1
d1083 3
a1085 3
                      "gdbarch_dump: deprecated_fp_regnum = %s\n",
                      paddr_d (current_gdbarch->deprecated_fp_regnum));
#ifdef DEPRECATED_FUNCTION_START_OFFSET
d1087 2
a1088 2
                      "gdbarch_dump: DEPRECATED_FUNCTION_START_OFFSET # %s\n",
                      XSTRING (DEPRECATED_FUNCTION_START_OFFSET));
d1090 1
d1092 9
a1100 3
                      "gdbarch_dump: deprecated_function_start_offset = 0x%s\n",
                      paddr_nz (current_gdbarch->deprecated_function_start_offset));
#ifdef DEPRECATED_PUSH_ARGUMENTS_P
d1103 5
a1107 2
                      "DEPRECATED_PUSH_ARGUMENTS_P()",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS_P ()));
d1109 5
d1115 5
a1119 3
                      "gdbarch_dump: gdbarch_deprecated_push_arguments_p() = %d\n",
                      gdbarch_deprecated_push_arguments_p (current_gdbarch));
#ifdef DEPRECATED_PUSH_ARGUMENTS
d1122 5
a1126 2
                      "DEPRECATED_PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr)",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)));
d1128 5
d1134 5
a1138 3
                      "gdbarch_dump: deprecated_push_arguments = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_push_arguments);
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR_P
d1141 5
a1145 2
                      "DEPRECATED_REG_STRUCT_HAS_ADDR_P()",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR_P ()));
d1147 5
d1153 5
a1157 3
                      "gdbarch_dump: gdbarch_deprecated_reg_struct_has_addr_p() = %d\n",
                      gdbarch_deprecated_reg_struct_has_addr_p (current_gdbarch));
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR
d1160 5
a1164 2
                      "DEPRECATED_REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR (gcc_p, type)));
d1166 1
d1168 9
a1176 3
                      "gdbarch_dump: deprecated_reg_struct_has_addr = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_reg_struct_has_addr);
#ifdef DEPRECATED_REGISTER_BYTE_P
d1179 5
a1183 2
                      "DEPRECATED_REGISTER_BYTE_P()",
                      XSTRING (DEPRECATED_REGISTER_BYTE_P ()));
d1185 5
d1191 5
a1195 3
                      "gdbarch_dump: gdbarch_deprecated_register_byte_p() = %d\n",
                      gdbarch_deprecated_register_byte_p (current_gdbarch));
#ifdef DEPRECATED_REGISTER_BYTE
d1198 5
a1202 2
                      "DEPRECATED_REGISTER_BYTE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_BYTE (reg_nr)));
d1204 1
d1206 3
a1208 3
                      "gdbarch_dump: deprecated_register_byte = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_register_byte);
#ifdef DEPRECATED_REGISTER_SIZE
d1210 3
a1212 2
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE # %s\n",
                      XSTRING (DEPRECATED_REGISTER_SIZE));
d1214 1
d1216 3
a1218 3
                      "gdbarch_dump: deprecated_register_size = %s\n",
                      paddr_d (current_gdbarch->deprecated_register_size));
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL_P
d1220 2
a1221 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL_P()",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL_P ()));
d1223 1
d1225 3
a1227 3
                      "gdbarch_dump: gdbarch_deprecated_saved_pc_after_call_p() = %d\n",
                      gdbarch_deprecated_saved_pc_after_call_p (current_gdbarch));
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL
d1229 3
a1231 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL(frame)",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL (frame)));
d1233 1
d1235 3
a1237 3
                      "gdbarch_dump: deprecated_saved_pc_after_call = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_saved_pc_after_call);
#ifdef DEPRECATED_STACK_ALIGN_P
d1239 2
a1240 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN_P()",
                      XSTRING (DEPRECATED_STACK_ALIGN_P ()));
d1242 1
d1244 3
a1246 3
                      "gdbarch_dump: gdbarch_deprecated_stack_align_p() = %d\n",
                      gdbarch_deprecated_stack_align_p (current_gdbarch));
#ifdef DEPRECATED_STACK_ALIGN
d1248 3
a1250 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN(sp)",
                      XSTRING (DEPRECATED_STACK_ALIGN (sp)));
d1252 1
d1254 3
a1256 3
                      "gdbarch_dump: deprecated_stack_align = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_stack_align);
#ifdef DEPRECATED_STORE_RETURN_VALUE
d1258 2
a1259 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_RETURN_VALUE(type, valbuf)",
                      XSTRING (DEPRECATED_STORE_RETURN_VALUE (type, valbuf)));
d1261 1
d1263 3
a1265 3
                      "gdbarch_dump: deprecated_store_return_value = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_store_return_value);
#ifdef DEPRECATED_STORE_STRUCT_RETURN_P
d1267 3
a1269 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN_P()",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN_P ()));
d1271 1
d1273 3
a1275 3
                      "gdbarch_dump: gdbarch_deprecated_store_struct_return_p() = %d\n",
                      gdbarch_deprecated_store_struct_return_p (current_gdbarch));
#ifdef DEPRECATED_STORE_STRUCT_RETURN
d1277 2
a1278 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN(addr, sp)",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN (addr, sp)));
d1280 1
d1282 3
a1284 3
                      "gdbarch_dump: deprecated_store_struct_return = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_store_struct_return);
#ifdef DEPRECATED_USE_STRUCT_CONVENTION
d1286 3
a1288 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_USE_STRUCT_CONVENTION(gcc_p, value_type)",
                      XSTRING (DEPRECATED_USE_STRUCT_CONVENTION (gcc_p, value_type)));
d1290 1
d1292 3
a1294 3
                      "gdbarch_dump: deprecated_use_struct_convention = <0x%lx>\n",
                      (long) current_gdbarch->deprecated_use_struct_convention);
#ifdef TARGET_DOUBLE_BIT
d1296 2
a1297 2
                      "gdbarch_dump: TARGET_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_DOUBLE_BIT));
d1299 1
d1301 2
a1302 3
                      "gdbarch_dump: double_bit = %s\n",
                      paddr_d (current_gdbarch->double_bit));
#ifdef TARGET_DOUBLE_FORMAT
d1304 2
a1305 2
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_DOUBLE_FORMAT));
d1307 1
d1309 3
a1311 3
                      "gdbarch_dump: double_format = %s\n",
                      pformat (current_gdbarch->double_format));
#ifdef DWARF2_REG_TO_REGNUM
d1313 2
a1314 3
                      "gdbarch_dump: %s # %s\n",
                      "DWARF2_REG_TO_REGNUM(dwarf2_regnr)",
                      XSTRING (DWARF2_REG_TO_REGNUM (dwarf2_regnr)));
d1316 1
d1318 2
a1319 3
                      "gdbarch_dump: dwarf2_reg_to_regnum = <0x%lx>\n",
                      (long) current_gdbarch->dwarf2_reg_to_regnum);
#ifdef DWARF_REG_TO_REGNUM
d1321 2
a1322 3
                      "gdbarch_dump: %s # %s\n",
                      "DWARF_REG_TO_REGNUM(dwarf_regnr)",
                      XSTRING (DWARF_REG_TO_REGNUM (dwarf_regnr)));
d1324 1
d1326 3
a1328 3
                      "gdbarch_dump: dwarf_reg_to_regnum = <0x%lx>\n",
                      (long) current_gdbarch->dwarf_reg_to_regnum);
#ifdef ECOFF_REG_TO_REGNUM
d1330 2
a1331 3
                      "gdbarch_dump: %s # %s\n",
                      "ECOFF_REG_TO_REGNUM(ecoff_regnr)",
                      XSTRING (ECOFF_REG_TO_REGNUM (ecoff_regnr)));
d1333 1
d1335 9
a1343 3
                      "gdbarch_dump: ecoff_reg_to_regnum = <0x%lx>\n",
                      (long) current_gdbarch->ecoff_reg_to_regnum);
#ifdef ELF_MAKE_MSYMBOL_SPECIAL
d1346 5
a1350 2
                      "ELF_MAKE_MSYMBOL_SPECIAL(sym, msym)",
                      XSTRING (ELF_MAKE_MSYMBOL_SPECIAL (sym, msym)));
d1352 1
d1354 3
a1356 3
                      "gdbarch_dump: elf_make_msymbol_special = <0x%lx>\n",
                      (long) current_gdbarch->elf_make_msymbol_special);
#ifdef EXTRACT_RETURN_VALUE
d1358 3
a1360 3
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_RETURN_VALUE(type, regcache, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regcache, valbuf)));
d1362 1
d1364 3
a1366 3
                      "gdbarch_dump: extract_return_value = <0x%lx>\n",
                      (long) current_gdbarch->extract_return_value);
#ifdef FETCH_POINTER_ARGUMENT_P
d1368 2
a1369 3
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT_P()",
                      XSTRING (FETCH_POINTER_ARGUMENT_P ()));
d1371 1
d1373 3
a1375 3
                      "gdbarch_dump: gdbarch_fetch_pointer_argument_p() = %d\n",
                      gdbarch_fetch_pointer_argument_p (current_gdbarch));
#ifdef FETCH_POINTER_ARGUMENT
d1377 3
a1379 3
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT(frame, argi, type)",
                      XSTRING (FETCH_POINTER_ARGUMENT (frame, argi, type)));
d1381 1
d1383 3
a1385 3
                      "gdbarch_dump: fetch_pointer_argument = <0x%lx>\n",
                      (long) current_gdbarch->fetch_pointer_argument);
#ifdef TARGET_FLOAT_BIT
d1387 2
a1388 2
                      "gdbarch_dump: TARGET_FLOAT_BIT # %s\n",
                      XSTRING (TARGET_FLOAT_BIT));
d1390 1
d1392 3
a1394 3
                      "gdbarch_dump: float_bit = %s\n",
                      paddr_d (current_gdbarch->float_bit));
#ifdef TARGET_FLOAT_FORMAT
d1396 3
a1398 2
                      "gdbarch_dump: TARGET_FLOAT_FORMAT # %s\n",
                      XSTRING (TARGET_FLOAT_FORMAT));
d1400 1
d1402 3
a1404 3
                      "gdbarch_dump: float_format = %s\n",
                      pformat (current_gdbarch->float_format));
#ifdef FP0_REGNUM
d1406 2
a1407 2
                      "gdbarch_dump: FP0_REGNUM # %s\n",
                      XSTRING (FP0_REGNUM));
d1409 1
d1411 3
a1413 2
                      "gdbarch_dump: fp0_regnum = %s\n",
                      paddr_d (current_gdbarch->fp0_regnum));
d1415 5
a1419 2
                      "gdbarch_dump: gdbarch_frame_align_p() = %d\n",
                      gdbarch_frame_align_p (current_gdbarch));
d1421 3
a1423 3
                      "gdbarch_dump: frame_align = <0x%lx>\n",
                      (long) current_gdbarch->frame_align);
#ifdef FRAME_ARGS_SKIP
d1425 2
a1426 2
                      "gdbarch_dump: FRAME_ARGS_SKIP # %s\n",
                      XSTRING (FRAME_ARGS_SKIP));
d1428 1
d1430 3
a1432 3
                      "gdbarch_dump: frame_args_skip = 0x%s\n",
                      paddr_nz (current_gdbarch->frame_args_skip));
#ifdef FRAME_NUM_ARGS_P
d1434 3
a1436 3
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_NUM_ARGS_P()",
                      XSTRING (FRAME_NUM_ARGS_P ()));
d1438 1
d1440 3
a1442 3
                      "gdbarch_dump: gdbarch_frame_num_args_p() = %d\n",
                      gdbarch_frame_num_args_p (current_gdbarch));
#ifdef FRAME_NUM_ARGS
d1444 2
a1445 3
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_NUM_ARGS(frame)",
                      XSTRING (FRAME_NUM_ARGS (frame)));
d1447 1
d1449 3
a1451 3
                      "gdbarch_dump: frame_num_args = <0x%lx>\n",
                      (long) current_gdbarch->frame_num_args);
#ifdef FRAME_RED_ZONE_SIZE
d1453 3
a1455 2
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE # %s\n",
                      XSTRING (FRAME_RED_ZONE_SIZE));
d1457 1
d1459 2
a1460 3
                      "gdbarch_dump: frame_red_zone_size = %s\n",
                      paddr_d (current_gdbarch->frame_red_zone_size));
#ifdef GET_LONGJMP_TARGET_P
d1462 2
a1463 3
                      "gdbarch_dump: %s # %s\n",
                      "GET_LONGJMP_TARGET_P()",
                      XSTRING (GET_LONGJMP_TARGET_P ()));
d1465 1
d1467 3
a1469 3
                      "gdbarch_dump: gdbarch_get_longjmp_target_p() = %d\n",
                      gdbarch_get_longjmp_target_p (current_gdbarch));
#ifdef GET_LONGJMP_TARGET
d1471 2
a1472 3
                      "gdbarch_dump: %s # %s\n",
                      "GET_LONGJMP_TARGET(pc)",
                      XSTRING (GET_LONGJMP_TARGET (pc)));
d1474 1
d1476 3
a1478 3
                      "gdbarch_dump: get_longjmp_target = <0x%lx>\n",
                      (long) current_gdbarch->get_longjmp_target);
#ifdef HAVE_NONSTEPPABLE_WATCHPOINT
d1480 3
a1482 2
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT # %s\n",
                      XSTRING (HAVE_NONSTEPPABLE_WATCHPOINT));
d1484 1
d1486 3
a1488 2
                      "gdbarch_dump: have_nonsteppable_watchpoint = %s\n",
                      paddr_d (current_gdbarch->have_nonsteppable_watchpoint));
d1490 5
a1494 3
                      "gdbarch_dump: in_function_epilogue_p = <0x%lx>\n",
                      (long) current_gdbarch->in_function_epilogue_p);
#ifdef IN_SOLIB_CALL_TRAMPOLINE
d1497 6
a1502 2
                      "IN_SOLIB_CALL_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_CALL_TRAMPOLINE (pc, name)));
d1504 1
d1506 3
a1508 3
                      "gdbarch_dump: in_solib_call_trampoline = <0x%lx>\n",
                      (long) current_gdbarch->in_solib_call_trampoline);
#ifdef IN_SOLIB_RETURN_TRAMPOLINE
d1510 2
a1511 3
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_RETURN_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_RETURN_TRAMPOLINE (pc, name)));
d1513 1
d1515 3
a1517 3
                      "gdbarch_dump: in_solib_return_trampoline = <0x%lx>\n",
                      (long) current_gdbarch->in_solib_return_trampoline);
#ifdef INNER_THAN
d1519 3
a1521 3
                      "gdbarch_dump: %s # %s\n",
                      "INNER_THAN(lhs, rhs)",
                      XSTRING (INNER_THAN (lhs, rhs)));
d1523 1
d1525 2
a1526 3
                      "gdbarch_dump: inner_than = <0x%lx>\n",
                      (long) current_gdbarch->inner_than);
#ifdef TARGET_INT_BIT
d1528 2
a1529 2
                      "gdbarch_dump: TARGET_INT_BIT # %s\n",
                      XSTRING (TARGET_INT_BIT));
d1531 1
d1533 3
a1535 3
                      "gdbarch_dump: int_bit = %s\n",
                      paddr_d (current_gdbarch->int_bit));
#ifdef INTEGER_TO_ADDRESS_P
d1537 2
a1538 3
                      "gdbarch_dump: %s # %s\n",
                      "INTEGER_TO_ADDRESS_P()",
                      XSTRING (INTEGER_TO_ADDRESS_P ()));
d1540 1
d1542 3
a1544 3
                      "gdbarch_dump: gdbarch_integer_to_address_p() = %d\n",
                      gdbarch_integer_to_address_p (current_gdbarch));
#ifdef INTEGER_TO_ADDRESS
d1546 3
a1548 3
                      "gdbarch_dump: %s # %s\n",
                      "INTEGER_TO_ADDRESS(type, buf)",
                      XSTRING (INTEGER_TO_ADDRESS (type, buf)));
d1550 1
d1552 3
a1554 3
                      "gdbarch_dump: integer_to_address = <0x%lx>\n",
                      (long) current_gdbarch->integer_to_address);
#ifdef TARGET_LONG_BIT
d1556 2
a1557 2
                      "gdbarch_dump: TARGET_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_BIT));
d1559 1
d1561 3
a1563 3
                      "gdbarch_dump: long_bit = %s\n",
                      paddr_d (current_gdbarch->long_bit));
#ifdef TARGET_LONG_DOUBLE_BIT
d1565 3
a1567 2
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_BIT));
d1569 1
d1571 3
a1573 3
                      "gdbarch_dump: long_double_bit = %s\n",
                      paddr_d (current_gdbarch->long_double_bit));
#ifdef TARGET_LONG_DOUBLE_FORMAT
d1575 2
a1576 2
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_FORMAT));
d1578 1
d1580 3
a1582 3
                      "gdbarch_dump: long_double_format = %s\n",
                      pformat (current_gdbarch->long_double_format));
#ifdef TARGET_LONG_LONG_BIT
d1584 3
a1586 2
                      "gdbarch_dump: TARGET_LONG_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_LONG_BIT));
d1588 1
d1590 3
a1592 3
                      "gdbarch_dump: long_long_bit = %s\n",
                      paddr_d (current_gdbarch->long_long_bit));
#ifdef MEMORY_INSERT_BREAKPOINT
d1594 2
a1595 3
                      "gdbarch_dump: %s # %s\n",
                      "MEMORY_INSERT_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_INSERT_BREAKPOINT (addr, contents_cache)));
d1597 1
d1599 3
a1601 3
                      "gdbarch_dump: memory_insert_breakpoint = <0x%lx>\n",
                      (long) current_gdbarch->memory_insert_breakpoint);
#ifdef MEMORY_REMOVE_BREAKPOINT
d1603 3
a1605 3
                      "gdbarch_dump: %s # %s\n",
                      "MEMORY_REMOVE_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_REMOVE_BREAKPOINT (addr, contents_cache)));
d1607 1
d1609 3
a1611 3
                      "gdbarch_dump: memory_remove_breakpoint = <0x%lx>\n",
                      (long) current_gdbarch->memory_remove_breakpoint);
#ifdef NAME_OF_MALLOC
d1613 2
a1614 2
                      "gdbarch_dump: NAME_OF_MALLOC # %s\n",
                      XSTRING (NAME_OF_MALLOC));
d1616 1
d1618 3
a1620 3
                      "gdbarch_dump: name_of_malloc = %s\n",
                      NAME_OF_MALLOC);
#ifdef NUM_PSEUDO_REGS
d1622 3
a1624 2
                      "gdbarch_dump: NUM_PSEUDO_REGS # %s\n",
                      XSTRING (NUM_PSEUDO_REGS));
d1626 1
d1628 3
a1630 3
                      "gdbarch_dump: num_pseudo_regs = %s\n",
                      paddr_d (current_gdbarch->num_pseudo_regs));
#ifdef NUM_REGS
d1632 2
a1633 2
                      "gdbarch_dump: NUM_REGS # %s\n",
                      XSTRING (NUM_REGS));
d1635 1
d1637 3
a1639 3
                      "gdbarch_dump: num_regs = %s\n",
                      paddr_d (current_gdbarch->num_regs));
#ifdef TARGET_OSABI
d1641 3
a1643 2
                      "gdbarch_dump: TARGET_OSABI # %s\n",
                      XSTRING (TARGET_OSABI));
d1645 1
d1647 3
a1649 3
                      "gdbarch_dump: osabi = %s\n",
                      paddr_d (current_gdbarch->osabi));
#ifdef PC_REGNUM
d1651 2
a1652 2
                      "gdbarch_dump: PC_REGNUM # %s\n",
                      XSTRING (PC_REGNUM));
d1654 1
d1656 3
a1658 3
                      "gdbarch_dump: pc_regnum = %s\n",
                      paddr_d (current_gdbarch->pc_regnum));
#ifdef POINTER_TO_ADDRESS
d1660 3
a1662 3
                      "gdbarch_dump: %s # %s\n",
                      "POINTER_TO_ADDRESS(type, buf)",
                      XSTRING (POINTER_TO_ADDRESS (type, buf)));
d1664 1
d1666 2
a1667 2
                      "gdbarch_dump: pointer_to_address = <0x%lx>\n",
                      (long) current_gdbarch->pointer_to_address);
d1669 4
a1672 2
                      "gdbarch_dump: gdbarch_print_float_info_p() = %d\n",
                      gdbarch_print_float_info_p (current_gdbarch));
d1674 3
a1676 3
                      "gdbarch_dump: print_float_info = <0x%lx>\n",
                      (long) current_gdbarch->print_float_info);
#ifdef TARGET_PRINT_INSN
d1678 2
a1679 3
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_PRINT_INSN(vma, info)",
                      XSTRING (TARGET_PRINT_INSN (vma, info)));
d1681 1
d1683 3
a1685 2
                      "gdbarch_dump: print_insn = <0x%lx>\n",
                      (long) current_gdbarch->print_insn);
d1687 5
a1691 2
                      "gdbarch_dump: print_registers_info = <0x%lx>\n",
                      (long) current_gdbarch->print_registers_info);
d1693 3
a1695 6
                      "gdbarch_dump: gdbarch_print_vector_info_p() = %d\n",
                      gdbarch_print_vector_info_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_vector_info = <0x%lx>\n",
                      (long) current_gdbarch->print_vector_info);
#ifdef PS_REGNUM
d1697 3
a1699 2
                      "gdbarch_dump: PS_REGNUM # %s\n",
                      XSTRING (PS_REGNUM));
d1701 1
d1703 3
a1705 2
                      "gdbarch_dump: ps_regnum = %s\n",
                      paddr_d (current_gdbarch->ps_regnum));
d1707 4
a1710 2
                      "gdbarch_dump: gdbarch_pseudo_register_read_p() = %d\n",
                      gdbarch_pseudo_register_read_p (current_gdbarch));
d1712 3
a1714 2
                      "gdbarch_dump: pseudo_register_read = <0x%lx>\n",
                      (long) current_gdbarch->pseudo_register_read);
d1716 5
a1720 2
                      "gdbarch_dump: gdbarch_pseudo_register_write_p() = %d\n",
                      gdbarch_pseudo_register_write_p (current_gdbarch));
d1722 3
a1724 3
                      "gdbarch_dump: pseudo_register_write = <0x%lx>\n",
                      (long) current_gdbarch->pseudo_register_write);
#ifdef TARGET_PTR_BIT
d1726 2
a1727 2
                      "gdbarch_dump: TARGET_PTR_BIT # %s\n",
                      XSTRING (TARGET_PTR_BIT));
d1729 1
d1731 3
a1733 2
                      "gdbarch_dump: ptr_bit = %s\n",
                      paddr_d (current_gdbarch->ptr_bit));
d1735 5
a1739 2
                      "gdbarch_dump: gdbarch_push_dummy_call_p() = %d\n",
                      gdbarch_push_dummy_call_p (current_gdbarch));
d1741 2
a1742 2
                      "gdbarch_dump: push_dummy_call = <0x%lx>\n",
                      (long) current_gdbarch->push_dummy_call);
d1744 4
a1747 2
                      "gdbarch_dump: gdbarch_push_dummy_code_p() = %d\n",
                      gdbarch_push_dummy_code_p (current_gdbarch));
d1749 3
a1751 3
                      "gdbarch_dump: push_dummy_code = <0x%lx>\n",
                      (long) current_gdbarch->push_dummy_code);
#ifdef TARGET_READ_PC_P
d1753 3
a1755 3
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC_P()",
                      XSTRING (TARGET_READ_PC_P ()));
d1757 1
d1759 3
a1761 3
                      "gdbarch_dump: gdbarch_read_pc_p() = %d\n",
                      gdbarch_read_pc_p (current_gdbarch));
#ifdef TARGET_READ_PC
d1763 3
a1765 3
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC(ptid)",
                      XSTRING (TARGET_READ_PC (ptid)));
d1767 1
a1767 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: read_pc = <0x%lx>\n",
                      (long) current_gdbarch->read_pc);
#ifdef TARGET_READ_SP_P
d1770 224
a1993 2
                      "TARGET_READ_SP_P()",
                      XSTRING (TARGET_READ_SP_P ()));
d1995 1
d1997 7
a2003 3
                      "gdbarch_dump: gdbarch_read_sp_p() = %d\n",
                      gdbarch_read_sp_p (current_gdbarch));
#ifdef TARGET_READ_SP
d2006 29
a2034 2
                      "TARGET_READ_SP()",
                      XSTRING (TARGET_READ_SP ()));
d2037 11
a2047 2
                      "gdbarch_dump: read_sp = <0x%lx>\n",
                      (long) current_gdbarch->read_sp);
d2053 3
a2056 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_register_bytes_ok_p() = %d\n",
                      gdbarch_register_bytes_ok_p (current_gdbarch));
d2062 4
a2066 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_bytes_ok = <0x%lx>\n",
                      (long) current_gdbarch->register_bytes_ok);
d2072 4
a2076 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_name = <0x%lx>\n",
                      (long) current_gdbarch->register_name);
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_reggroup_p = <0x%lx>\n",
                      (long) current_gdbarch->register_reggroup_p);
d2082 4
a2086 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_sim_regno = <0x%lx>\n",
                      (long) current_gdbarch->register_sim_regno);
d2092 4
a2097 3
                      "gdbarch_dump: register_to_value = <0x%lx>\n",
                      (long) current_gdbarch->register_to_value);
  fprintf_unfiltered (file,
d2101 1
a2101 1
                      "gdbarch_dump: register_type = <0x%lx>\n",
d2104 1
a2104 7
                      "gdbarch_dump: gdbarch_regset_from_core_section_p() = %d\n",
                      gdbarch_regset_from_core_section_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: regset_from_core_section = <0x%lx>\n",
                      (long) current_gdbarch->regset_from_core_section);
  fprintf_unfiltered (file,
                      "gdbarch_dump: remote_translate_xfer_address = <0x%lx>\n",
d2106 1
d2108 3
a2110 2
                      "gdbarch_dump: gdbarch_return_value_p() = %d\n",
                      gdbarch_return_value_p (current_gdbarch));
d2112 4
a2115 2
                      "gdbarch_dump: return_value = <0x%lx>\n",
                      (long) current_gdbarch->return_value);
a2120 5
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: sdb_reg_to_regnum = <0x%lx>\n",
                      (long) current_gdbarch->sdb_reg_to_regnum);
#ifdef TARGET_SHORT_BIT
d2122 3
a2124 2
                      "gdbarch_dump: TARGET_SHORT_BIT # %s\n",
                      XSTRING (TARGET_SHORT_BIT));
a2125 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: short_bit = %s\n",
                      paddr_d (current_gdbarch->short_bit));
d2131 4
d2137 1
a2137 4
                      "gdbarch_dump: skip_prologue = <0x%lx>\n",
                      (long) current_gdbarch->skip_prologue);
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_solib_resolver = <0x%lx>\n",
d2144 4
a2148 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_trampoline_code = <0x%lx>\n",
                      (long) current_gdbarch->skip_trampoline_code);
d2154 4
a2158 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: smash_text_address = <0x%lx>\n",
                      (long) current_gdbarch->smash_text_address);
d2164 3
a2167 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_software_single_step_p() = %d\n",
                      gdbarch_software_single_step_p (current_gdbarch));
d2173 4
a2177 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: software_single_step = <0x%lx>\n",
                      (long) current_gdbarch->software_single_step);
d2182 3
a2185 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: sp_regnum = %s\n",
                      paddr_d (current_gdbarch->sp_regnum));
d2191 4
a2195 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: stab_reg_to_regnum = <0x%lx>\n",
                      (long) current_gdbarch->stab_reg_to_regnum);
  fprintf_unfiltered (file,
                      "gdbarch_dump: stabs_argument_has_addr = <0x%lx>\n",
                      (long) current_gdbarch->stabs_argument_has_addr);
d2201 4
d2206 1
d2208 2
a2209 2
                      "gdbarch_dump: store_return_value = <0x%lx>\n",
                      (long) current_gdbarch->store_return_value);
d2211 4
a2214 2
                      "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                      gdbarch_unwind_dummy_id_p (current_gdbarch));
d2216 201
a2416 2
                      "gdbarch_dump: unwind_dummy_id = <0x%lx>\n",
                      (long) current_gdbarch->unwind_dummy_id);
d2421 1
a2421 1
                      "gdbarch_dump: unwind_pc = <0x%lx>\n",
d2427 1
a2427 1
                      "gdbarch_dump: unwind_sp = <0x%lx>\n",
d2429 10
d2444 4
d2449 275
a2723 23
  fprintf_unfiltered (file,
                      "gdbarch_dump: value_to_register = <0x%lx>\n",
                      (long) current_gdbarch->value_to_register);
#ifdef TARGET_VIRTUAL_FRAME_POINTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_VIRTUAL_FRAME_POINTER(pc, frame_regnum, frame_offset)",
                      XSTRING (TARGET_VIRTUAL_FRAME_POINTER (pc, frame_regnum, frame_offset)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: virtual_frame_pointer = <0x%lx>\n",
                      (long) current_gdbarch->virtual_frame_pointer);
#ifdef TARGET_WRITE_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_PC(val, ptid)",
                      XSTRING (TARGET_WRITE_PC (val, ptid)));
#endif
  fprintf_unfiltered (file,
                      "gdbarch_dump: write_pc = <0x%lx>\n",
                      (long) current_gdbarch->write_pc);
  if (current_gdbarch->dump_tdep != NULL)
    current_gdbarch->dump_tdep (current_gdbarch, file);
d2726 2
a2727 2
struct gdbarch_tdep *
gdbarch_tdep (struct gdbarch *gdbarch)
d2729 2
d2732 2
a2733 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_tdep called\n");
  return gdbarch->tdep;
d2736 6
d2743 2
a2744 2
const struct bfd_arch_info *
gdbarch_bfd_arch_info (struct gdbarch *gdbarch)
d2747 1
d2749 9
a2757 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_arch_info called\n");
  return gdbarch->bfd_arch_info;
d2761 8
a2768 1
gdbarch_byte_order (struct gdbarch *gdbarch)
d2771 1
d2773 16
a2788 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_byte_order called\n");
  return gdbarch->byte_order;
d2791 2
a2792 2
enum gdb_osabi
gdbarch_osabi (struct gdbarch *gdbarch)
d2795 1
d2797 9
a2805 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_osabi called\n");
  return gdbarch->osabi;
d2809 1
a2809 1
gdbarch_short_bit (struct gdbarch *gdbarch)
d2812 2
a2813 1
  /* Skip verify of short_bit, invalid_p == 0 */
d2815 2
a2816 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_short_bit called\n");
  return gdbarch->short_bit;
d2820 2
a2821 2
set_gdbarch_short_bit (struct gdbarch *gdbarch,
                       int short_bit)
d2823 1
a2823 1
  gdbarch->short_bit = short_bit;
d2827 1
a2827 1
gdbarch_int_bit (struct gdbarch *gdbarch)
d2830 1
a2830 1
  /* Skip verify of int_bit, invalid_p == 0 */
d2832 2
a2833 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_int_bit called\n");
  return gdbarch->int_bit;
d2837 2
a2838 2
set_gdbarch_int_bit (struct gdbarch *gdbarch,
                     int int_bit)
d2840 1
a2840 1
  gdbarch->int_bit = int_bit;
d2844 1
a2844 1
gdbarch_long_bit (struct gdbarch *gdbarch)
d2847 1
a2847 1
  /* Skip verify of long_bit, invalid_p == 0 */
d2849 2
a2850 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_bit called\n");
  return gdbarch->long_bit;
d2854 2
a2855 2
set_gdbarch_long_bit (struct gdbarch *gdbarch,
                      int long_bit)
d2857 1
a2857 1
  gdbarch->long_bit = long_bit;
d2861 1
a2861 1
gdbarch_long_long_bit (struct gdbarch *gdbarch)
d2864 1
a2864 1
  /* Skip verify of long_long_bit, invalid_p == 0 */
d2866 2
a2867 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_long_bit called\n");
  return gdbarch->long_long_bit;
d2871 2
a2872 2
set_gdbarch_long_long_bit (struct gdbarch *gdbarch,
                           int long_long_bit)
d2874 1
a2874 1
  gdbarch->long_long_bit = long_long_bit;
d2878 1
a2878 1
gdbarch_float_bit (struct gdbarch *gdbarch)
d2881 1
a2881 1
  /* Skip verify of float_bit, invalid_p == 0 */
d2883 2
a2884 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_float_bit called\n");
  return gdbarch->float_bit;
d2888 2
a2889 2
set_gdbarch_float_bit (struct gdbarch *gdbarch,
                       int float_bit)
d2891 1
a2891 1
  gdbarch->float_bit = float_bit;
d2894 2
a2895 2
const struct floatformat *
gdbarch_float_format (struct gdbarch *gdbarch)
d2898 1
d2900 2
a2901 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_float_format called\n");
  return gdbarch->float_format;
d2905 2
a2906 2
set_gdbarch_float_format (struct gdbarch *gdbarch,
                          const struct floatformat * float_format)
d2908 1
a2908 1
  gdbarch->float_format = float_format;
d2912 1
a2912 1
gdbarch_double_bit (struct gdbarch *gdbarch)
d2915 1
a2915 1
  /* Skip verify of double_bit, invalid_p == 0 */
d2917 2
a2918 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_double_bit called\n");
  return gdbarch->double_bit;
d2922 2
a2923 2
set_gdbarch_double_bit (struct gdbarch *gdbarch,
                        int double_bit)
d2925 1
a2925 1
  gdbarch->double_bit = double_bit;
d2928 2
a2929 2
const struct floatformat *
gdbarch_double_format (struct gdbarch *gdbarch)
d2932 1
d2934 2
a2935 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_double_format called\n");
  return gdbarch->double_format;
d2939 2
a2940 2
set_gdbarch_double_format (struct gdbarch *gdbarch,
                           const struct floatformat * double_format)
d2942 1
a2942 1
  gdbarch->double_format = double_format;
d2946 1
a2946 1
gdbarch_long_double_bit (struct gdbarch *gdbarch)
d2949 1
a2949 1
  /* Skip verify of long_double_bit, invalid_p == 0 */
d2951 2
a2952 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_double_bit called\n");
  return gdbarch->long_double_bit;
d2956 2
a2957 2
set_gdbarch_long_double_bit (struct gdbarch *gdbarch,
                             int long_double_bit)
d2959 1
a2959 1
  gdbarch->long_double_bit = long_double_bit;
d2962 2
a2963 2
const struct floatformat *
gdbarch_long_double_format (struct gdbarch *gdbarch)
d2966 1
d2968 2
a2969 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_double_format called\n");
  return gdbarch->long_double_format;
d2973 2
a2974 2
set_gdbarch_long_double_format (struct gdbarch *gdbarch,
                                const struct floatformat * long_double_format)
d2976 1
a2976 1
  gdbarch->long_double_format = long_double_format;
d2980 1
a2980 1
gdbarch_ptr_bit (struct gdbarch *gdbarch)
d2983 1
a2983 1
  /* Skip verify of ptr_bit, invalid_p == 0 */
d2985 2
a2986 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ptr_bit called\n");
  return gdbarch->ptr_bit;
d2990 2
a2991 2
set_gdbarch_ptr_bit (struct gdbarch *gdbarch,
                     int ptr_bit)
d2993 1
a2993 1
  gdbarch->ptr_bit = ptr_bit;
d2996 2
a2997 2
int
gdbarch_addr_bit (struct gdbarch *gdbarch)
d3000 1
a3000 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->addr_bit != 0);
d3002 2
a3003 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_addr_bit called\n");
  return gdbarch->addr_bit;
d3007 2
a3008 2
set_gdbarch_addr_bit (struct gdbarch *gdbarch,
                      int addr_bit)
d3010 1
a3010 1
  gdbarch->addr_bit = addr_bit;
d3014 1
a3014 1
gdbarch_bfd_vma_bit (struct gdbarch *gdbarch)
d3017 1
a3017 4
  /* Skip verify of bfd_vma_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_vma_bit called\n");
  return gdbarch->bfd_vma_bit;
d3020 2
a3021 9
void
set_gdbarch_bfd_vma_bit (struct gdbarch *gdbarch,
                         int bfd_vma_bit)
{
  gdbarch->bfd_vma_bit = bfd_vma_bit;
}

int
gdbarch_char_signed (struct gdbarch *gdbarch)
d3024 1
a3024 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->char_signed != -1);
d3026 2
a3027 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_char_signed called\n");
  return gdbarch->char_signed;
d3031 2
a3032 2
set_gdbarch_char_signed (struct gdbarch *gdbarch,
                         int char_signed)
d3034 1
a3034 1
  gdbarch->char_signed = char_signed;
d3038 1
a3038 1
gdbarch_read_pc_p (struct gdbarch *gdbarch)
d3041 1
a3041 1
  return gdbarch->read_pc != NULL;
d3044 2
a3045 2
CORE_ADDR
gdbarch_read_pc (struct gdbarch *gdbarch, ptid_t ptid)
d3048 1
a3048 1
  gdb_assert (gdbarch->read_pc != NULL);
d3050 2
a3051 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_pc called\n");
  return gdbarch->read_pc (ptid);
d3055 2
a3056 2
set_gdbarch_read_pc (struct gdbarch *gdbarch,
                     gdbarch_read_pc_ftype read_pc)
d3058 1
a3058 1
  gdbarch->read_pc = read_pc;
d3061 2
a3062 2
void
gdbarch_write_pc (struct gdbarch *gdbarch, CORE_ADDR val, ptid_t ptid)
a3064 1
  gdb_assert (gdbarch->write_pc != NULL);
d3066 2
a3067 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_write_pc called\n");
  gdbarch->write_pc (val, ptid);
d3071 2
a3072 2
set_gdbarch_write_pc (struct gdbarch *gdbarch,
                      gdbarch_write_pc_ftype write_pc)
d3074 1
a3074 1
  gdbarch->write_pc = write_pc;
d3078 1
a3078 1
gdbarch_read_sp_p (struct gdbarch *gdbarch)
d3081 1
a3081 1
  return gdbarch->read_sp != NULL;
d3084 2
a3085 2
CORE_ADDR
gdbarch_read_sp (struct gdbarch *gdbarch)
d3088 2
a3089 1
  gdb_assert (gdbarch->read_sp != NULL);
d3091 2
a3092 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_sp called\n");
  return gdbarch->read_sp ();
d3096 8
a3103 2
set_gdbarch_read_sp (struct gdbarch *gdbarch,
                     gdbarch_read_sp_ftype read_sp)
d3105 2
a3106 1
  gdbarch->read_sp = read_sp;
d3109 2
a3110 2
void
gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch, CORE_ADDR pc, int *frame_regnum, LONGEST *frame_offset)
d3113 2
a3114 1
  gdb_assert (gdbarch->virtual_frame_pointer != NULL);
d3116 2
a3117 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_virtual_frame_pointer called\n");
  gdbarch->virtual_frame_pointer (pc, frame_regnum, frame_offset);
d3121 2
a3122 2
set_gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch,
                                   gdbarch_virtual_frame_pointer_ftype virtual_frame_pointer)
d3124 1
a3124 1
  gdbarch->virtual_frame_pointer = virtual_frame_pointer;
d3128 1
a3128 1
gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch)
d3131 1
a3131 1
  return gdbarch->pseudo_register_read != NULL;
d3134 2
a3135 2
void
gdbarch_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, void *buf)
d3138 2
a3139 1
  gdb_assert (gdbarch->pseudo_register_read != NULL);
d3141 2
a3142 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pseudo_register_read called\n");
  gdbarch->pseudo_register_read (gdbarch, regcache, cookednum, buf);
d3146 2
a3147 2
set_gdbarch_pseudo_register_read (struct gdbarch *gdbarch,
                                  gdbarch_pseudo_register_read_ftype pseudo_register_read)
d3149 1
a3149 1
  gdbarch->pseudo_register_read = pseudo_register_read;
d3153 1
a3153 1
gdbarch_pseudo_register_write_p (struct gdbarch *gdbarch)
d3156 1
a3156 1
  return gdbarch->pseudo_register_write != NULL;
d3159 2
a3160 2
void
gdbarch_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const void *buf)
a3162 1
  gdb_assert (gdbarch->pseudo_register_write != NULL);
d3164 2
a3165 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pseudo_register_write called\n");
  gdbarch->pseudo_register_write (gdbarch, regcache, cookednum, buf);
d3169 2
a3170 2
set_gdbarch_pseudo_register_write (struct gdbarch *gdbarch,
                                   gdbarch_pseudo_register_write_ftype pseudo_register_write)
d3172 1
a3172 1
  gdbarch->pseudo_register_write = pseudo_register_write;
d3176 1
a3176 1
gdbarch_num_regs (struct gdbarch *gdbarch)
d3179 1
a3179 12
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->num_regs != -1);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_num_regs called\n");
  return gdbarch->num_regs;
}

void
set_gdbarch_num_regs (struct gdbarch *gdbarch,
                      int num_regs)
{
  gdbarch->num_regs = num_regs;
d3183 1
a3183 1
gdbarch_num_pseudo_regs (struct gdbarch *gdbarch)
a3185 1
  /* Skip verify of num_pseudo_regs, invalid_p == 0 */
d3187 2
a3188 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_num_pseudo_regs called\n");
  return gdbarch->num_pseudo_regs;
d3192 2
a3193 2
set_gdbarch_num_pseudo_regs (struct gdbarch *gdbarch,
                             int num_pseudo_regs)
d3195 1
a3195 1
  gdbarch->num_pseudo_regs = num_pseudo_regs;
d3199 8
a3206 1
gdbarch_sp_regnum (struct gdbarch *gdbarch)
d3209 1
a3209 1
  /* Skip verify of sp_regnum, invalid_p == 0 */
d3211 2
a3212 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sp_regnum called\n");
  return gdbarch->sp_regnum;
d3216 2
a3217 2
set_gdbarch_sp_regnum (struct gdbarch *gdbarch,
                       int sp_regnum)
d3219 1
a3219 1
  gdbarch->sp_regnum = sp_regnum;
d3223 1
a3223 1
gdbarch_pc_regnum (struct gdbarch *gdbarch)
d3226 1
a3226 4
  /* Skip verify of pc_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pc_regnum called\n");
  return gdbarch->pc_regnum;
d3230 1
a3230 8
set_gdbarch_pc_regnum (struct gdbarch *gdbarch,
                       int pc_regnum)
{
  gdbarch->pc_regnum = pc_regnum;
}

int
gdbarch_ps_regnum (struct gdbarch *gdbarch)
d3233 1
a3233 1
  /* Skip verify of ps_regnum, invalid_p == 0 */
d3235 2
a3236 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ps_regnum called\n");
  return gdbarch->ps_regnum;
d3240 2
a3241 2
set_gdbarch_ps_regnum (struct gdbarch *gdbarch,
                       int ps_regnum)
d3243 1
a3243 1
  gdbarch->ps_regnum = ps_regnum;
d3247 1
a3247 1
gdbarch_fp0_regnum (struct gdbarch *gdbarch)
d3250 1
a3250 1
  /* Skip verify of fp0_regnum, invalid_p == 0 */
d3252 2
a3253 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fp0_regnum called\n");
  return gdbarch->fp0_regnum;
d3257 2
a3258 2
set_gdbarch_fp0_regnum (struct gdbarch *gdbarch,
                        int fp0_regnum)
d3260 1
a3260 1
  gdbarch->fp0_regnum = fp0_regnum;
d3264 8
a3271 1
gdbarch_stab_reg_to_regnum (struct gdbarch *gdbarch, int stab_regnr)
d3274 1
a3274 1
  gdb_assert (gdbarch->stab_reg_to_regnum != NULL);
d3276 2
a3277 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stab_reg_to_regnum called\n");
  return gdbarch->stab_reg_to_regnum (stab_regnr);
d3281 2
a3282 2
set_gdbarch_stab_reg_to_regnum (struct gdbarch *gdbarch,
                                gdbarch_stab_reg_to_regnum_ftype stab_reg_to_regnum)
d3284 1
a3284 1
  gdbarch->stab_reg_to_regnum = stab_reg_to_regnum;
d3288 1
a3288 1
gdbarch_ecoff_reg_to_regnum (struct gdbarch *gdbarch, int ecoff_regnr)
d3291 1
a3291 4
  gdb_assert (gdbarch->ecoff_reg_to_regnum != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ecoff_reg_to_regnum called\n");
  return gdbarch->ecoff_reg_to_regnum (ecoff_regnr);
d3294 2
a3295 9
void
set_gdbarch_ecoff_reg_to_regnum (struct gdbarch *gdbarch,
                                 gdbarch_ecoff_reg_to_regnum_ftype ecoff_reg_to_regnum)
{
  gdbarch->ecoff_reg_to_regnum = ecoff_reg_to_regnum;
}

int
gdbarch_dwarf_reg_to_regnum (struct gdbarch *gdbarch, int dwarf_regnr)
d3298 1
a3298 1
  gdb_assert (gdbarch->dwarf_reg_to_regnum != NULL);
d3300 2
a3301 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dwarf_reg_to_regnum called\n");
  return gdbarch->dwarf_reg_to_regnum (dwarf_regnr);
d3305 2
a3306 2
set_gdbarch_dwarf_reg_to_regnum (struct gdbarch *gdbarch,
                                 gdbarch_dwarf_reg_to_regnum_ftype dwarf_reg_to_regnum)
d3308 1
a3308 1
  gdbarch->dwarf_reg_to_regnum = dwarf_reg_to_regnum;
d3312 1
a3312 1
gdbarch_sdb_reg_to_regnum (struct gdbarch *gdbarch, int sdb_regnr)
d3315 1
a3315 4
  gdb_assert (gdbarch->sdb_reg_to_regnum != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sdb_reg_to_regnum called\n");
  return gdbarch->sdb_reg_to_regnum (sdb_regnr);
d3318 2
a3319 9
void
set_gdbarch_sdb_reg_to_regnum (struct gdbarch *gdbarch,
                               gdbarch_sdb_reg_to_regnum_ftype sdb_reg_to_regnum)
{
  gdbarch->sdb_reg_to_regnum = sdb_reg_to_regnum;
}

int
gdbarch_dwarf2_reg_to_regnum (struct gdbarch *gdbarch, int dwarf2_regnr)
d3322 1
a3322 1
  gdb_assert (gdbarch->dwarf2_reg_to_regnum != NULL);
d3324 2
a3325 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dwarf2_reg_to_regnum called\n");
  return gdbarch->dwarf2_reg_to_regnum (dwarf2_regnr);
d3329 2
a3330 2
set_gdbarch_dwarf2_reg_to_regnum (struct gdbarch *gdbarch,
                                  gdbarch_dwarf2_reg_to_regnum_ftype dwarf2_reg_to_regnum)
d3332 1
a3332 1
  gdbarch->dwarf2_reg_to_regnum = dwarf2_reg_to_regnum;
d3335 2
a3336 2
const char *
gdbarch_register_name (struct gdbarch *gdbarch, int regnr)
d3339 1
a3339 1
  gdb_assert (gdbarch->register_name != NULL);
d3341 2
a3342 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_name called\n");
  return gdbarch->register_name (regnr);
d3346 2
a3347 2
set_gdbarch_register_name (struct gdbarch *gdbarch,
                           gdbarch_register_name_ftype register_name)
d3349 1
a3349 1
  gdbarch->register_name = register_name;
d3353 1
a3353 1
gdbarch_register_type_p (struct gdbarch *gdbarch)
d3356 1
a3356 1
  return gdbarch->register_type != NULL;
d3359 2
a3360 2
struct type *
gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr)
d3363 1
a3363 1
  gdb_assert (gdbarch->register_type != NULL);
d3365 2
a3366 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_type called\n");
  return gdbarch->register_type (gdbarch, reg_nr);
d3370 2
a3371 2
set_gdbarch_register_type (struct gdbarch *gdbarch,
                           gdbarch_register_type_ftype register_type)
d3373 1
a3373 1
  gdbarch->register_type = register_type;
d3377 1
a3377 1
gdbarch_deprecated_register_byte_p (struct gdbarch *gdbarch)
d3380 1
a3380 1
  return gdbarch->deprecated_register_byte != generic_register_byte;
d3383 2
a3384 2
int
gdbarch_deprecated_register_byte (struct gdbarch *gdbarch, int reg_nr)
d3387 1
a3387 2
  gdb_assert (gdbarch->deprecated_register_byte != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_byte != generic_register_byte, allow call.  */
d3389 2
a3390 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_byte called\n");
  return gdbarch->deprecated_register_byte (reg_nr);
d3394 2
a3395 2
set_gdbarch_deprecated_register_byte (struct gdbarch *gdbarch,
                                      gdbarch_deprecated_register_byte_ftype deprecated_register_byte)
d3397 1
a3397 1
  gdbarch->deprecated_register_byte = deprecated_register_byte;
d3401 1
a3401 8
gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_dummy_id != NULL;
}

struct frame_id
gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info)
a3403 1
  gdb_assert (gdbarch->unwind_dummy_id != NULL);
d3405 2
a3406 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_dummy_id called\n");
  return gdbarch->unwind_dummy_id (gdbarch, info);
d3410 2
a3411 2
set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch,
                             gdbarch_unwind_dummy_id_ftype unwind_dummy_id)
d3413 1
a3413 1
  gdbarch->unwind_dummy_id = unwind_dummy_id;
d3417 1
a3417 1
gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch)
d3420 1
a3420 1
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
d3422 2
a3423 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fp_regnum called\n");
  return gdbarch->deprecated_fp_regnum;
d3427 2
a3428 2
set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,
                                  int deprecated_fp_regnum)
d3430 1
a3430 1
  gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;
d3433 2
a3434 2
int
gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)
d3437 10
a3446 1
  return gdbarch->push_dummy_call != NULL;
d3450 1
a3450 1
gdbarch_push_dummy_call (struct gdbarch *gdbarch, struct value *function, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
a3452 1
  gdb_assert (gdbarch->push_dummy_call != NULL);
d3454 2
a3455 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_call called\n");
  return gdbarch->push_dummy_call (gdbarch, function, regcache, bp_addr, nargs, args, sp, struct_return, struct_addr);
d3459 2
a3460 2
set_gdbarch_push_dummy_call (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_call_ftype push_dummy_call)
d3462 1
a3462 1
  gdbarch->push_dummy_call = push_dummy_call;
d3466 1
a3466 1
gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch)
d3469 10
a3478 1
  return gdbarch->deprecated_push_arguments != NULL;
d3481 2
a3482 2
CORE_ADDR
gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d3485 1
a3485 1
  gdb_assert (gdbarch->deprecated_push_arguments != NULL);
d3487 2
a3488 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_arguments called\n");
  return gdbarch->deprecated_push_arguments (nargs, args, sp, struct_return, struct_addr);
d3492 2
a3493 2
set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments)
d3495 1
a3495 1
  gdbarch->deprecated_push_arguments = deprecated_push_arguments;
d3499 1
a3499 1
gdbarch_deprecated_register_size (struct gdbarch *gdbarch)
d3502 1
d3504 2
a3505 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_size called\n");
  return gdbarch->deprecated_register_size;
d3509 2
a3510 2
set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch,
                                      int deprecated_register_size)
d3512 1
a3512 1
  gdbarch->deprecated_register_size = deprecated_register_size;
d3516 8
a3523 1
gdbarch_call_dummy_location (struct gdbarch *gdbarch)
d3526 1
a3526 1
  /* Skip verify of call_dummy_location, invalid_p == 0 */
d3528 2
a3529 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_location called\n");
  return gdbarch->call_dummy_location;
d3533 2
a3534 2
set_gdbarch_call_dummy_location (struct gdbarch *gdbarch,
                                 int call_dummy_location)
d3536 1
a3536 1
  gdbarch->call_dummy_location = call_dummy_location;
d3563 48
d3775 172
a3946 2
int
gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch)
d3949 1
d3951 2
a3952 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_believe_pcc_promotion called\n");
  return gdbarch->believe_pcc_promotion;
d3956 2
a3957 2
set_gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch,
                                   int believe_pcc_promotion)
d3959 1
a3959 1
  gdbarch->believe_pcc_promotion = believe_pcc_promotion;
d4072 24
d4123 1
a4123 1
  return gdbarch->return_value != legacy_return_value;
a4130 1
  /* Do not check predicate: gdbarch->return_value != legacy_return_value, allow call.  */
d4143 17
d4229 1
a4229 1
gdbarch_deprecated_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type)
d4232 1
a4232 1
  gdb_assert (gdbarch->deprecated_use_struct_convention != NULL);
d4234 2
a4235 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_use_struct_convention called\n");
  return gdbarch->deprecated_use_struct_convention (gcc_p, value_type);
d4239 2
a4240 2
set_gdbarch_deprecated_use_struct_convention (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_use_struct_convention_ftype deprecated_use_struct_convention)
d4242 1
a4242 1
  gdbarch->deprecated_use_struct_convention = deprecated_use_struct_convention;
d4269 48
d4444 1
a4444 1
gdbarch_deprecated_function_start_offset (struct gdbarch *gdbarch)
d4447 1
a4447 1
  /* Skip verify of deprecated_function_start_offset, invalid_p == 0 */
d4449 2
a4450 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_function_start_offset called\n");
  return gdbarch->deprecated_function_start_offset;
d4454 2
a4455 2
set_gdbarch_deprecated_function_start_offset (struct gdbarch *gdbarch,
                                              CORE_ADDR deprecated_function_start_offset)
d4457 1
a4457 1
  gdbarch->deprecated_function_start_offset = deprecated_function_start_offset;
d4495 96
d4639 50
d4841 64
d5066 73
d5916 5
a5920 6
  deprecated_add_show_from_set
    (add_set_cmd ("arch",
	          class_maintenance,
		  var_zinteger,
		  (char *)&gdbarch_debug,
		  "Set architecture debugging.\n\
d5922 1
a5922 1
     &showdebuglist);
d5931 1
a5931 1
  deprecate_cmd (deprecated_add_show_from_set (c, &showlist), "show debug arch");
@


1.275.6.1
log
@Jumbo patch.  Experiments with tramp-frame.
@
text
@d5385 1
a5385 2
  gdbarch_data_pre_init_ftype *pre_init;
  gdbarch_data_post_init_ftype *post_init;
d5406 1
a5406 2
register_gdbarch_data (gdbarch_data_pre_init_ftype *pre_init,
		       gdbarch_data_post_init_ftype *post_init)
a5409 1
  gdb_assert ((pre_init != NULL) != (post_init != NULL));
d5417 1
a5417 2
  (*curr)->data->pre_init = pre_init;
  (*curr)->data->post_init = post_init;
d5453 5
a5457 1
  if (gdbarch->data[data->index] == NULL)
d5462 2
a5463 7
      if (data->pre_init != NULL)
	gdbarch->data[data->index] = data->pre_init (gdbarch->obstack);
      else if (gdbarch->initialized_p
	       && data->post_init != NULL)
	gdbarch->data[data->index] = data->post_init (gdbarch);
      else
	internal_error (__FILE__, __LINE__, "Bad initialization method");
d5469 1
@


1.275.6.2
log
@Dump of tramp-frame stuff.
@
text
@d5406 2
a5407 2
static struct gdbarch_data *
gdbarch_data_register (gdbarch_data_pre_init_ftype *pre_init,
d5412 1
a5425 11
struct gdbarch_data *
gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *pre_init)
{
  return gdbarch_data_register (pre_init, NULL);
}

struct gdbarch_data *
gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *post_init)
{
  return gdbarch_data_register (NULL, post_init);
}
d5441 3
a5443 3
deprecated_set_gdbarch_data (struct gdbarch *gdbarch,
			     struct gdbarch_data *data,
			     void *pointer)
a5446 1
  gdb_assert (data->pre_init == NULL);
d5459 3
a5461 2
      /* The data-pointer isn't initialized, call init() to get a
	 value.  */
a5462 4
	/* Mid architecture creation: pass just the obstack, and not
	   the entire architecture, as that way it isn't possible for
	   pre-init code to refer to undefined architecture
	   fields.  */
d5466 1
a5466 9
	/* Post architecture creation: pass the entire architecture
	   (as all fields are valid), but be careful to also detect
	   recursive references.  */
	{
	  gdb_assert (data->init_p);
	  data->init_p = 0;
	  gdbarch->data[data->index] = data->post_init (gdbarch);
	  data->init_p = 1;
	}
d5468 2
a5469 5
	/* The architecture initialization hasn't completed - punt -
	 hope that the caller knows what they are doing.  Once
	 deprecated_set_gdbarch_data has been initialized, this can be
	 changed to an internal error.  */
	return NULL;
a5473 1

@


1.274
log
@2004-02-15  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (deprecated_register_gdbarch_swap): Rename
	register_gdbarch_swap.
	(DEPRECATED_REGISTER_GDBARCH_SWAP): Rename REGISTER_GDBARCH_SWAP.
	* f-lang.c (_initialize_f_language): Update, use
	DEPRECATED_REGISTER_GDBARCH_SWAP.
	* remote.c (_initialize_remote): Ditto.
	* regcache.c (_initialize_regcache): Ditto.
	* parse.c (_initialize_parse): Ditto.
	* infrun.c (_initialize_infrun): Ditto.
	* mi/mi-main.c (_initialize_mi_main): Ditto.
	* gdbtypes.c (_initialize_gdbtypes): Ditto.
@
text
@d220 1
a220 1
  gdbarch_frameless_function_invocation_ftype *frameless_function_invocation;
d387 1
a387 1
  0,  /* frameless_function_invocation */
a514 1
  current_gdbarch->frameless_function_invocation = generic_frameless_function_invocation_not;
d692 1
a692 1
  /* Skip verify of frameless_function_invocation, invalid_p == 0 */
d1081 19
a1766 10
#ifdef FRAMELESS_FUNCTION_INVOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (FRAMELESS_FUNCTION_INVOCATION (fi)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = <0x%08lx>\n",
                      (long) current_gdbarch->frameless_function_invocation
                      /*FRAMELESS_FUNCTION_INVOCATION ()*/);
#endif
d4486 8
a4493 1
gdbarch_frameless_function_invocation (struct gdbarch *gdbarch, struct frame_info *fi)
d4496 1
a4496 1
  gdb_assert (gdbarch->frameless_function_invocation != NULL);
d4498 2
a4499 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frameless_function_invocation called\n");
  return gdbarch->frameless_function_invocation (fi);
d4503 2
a4504 2
set_gdbarch_frameless_function_invocation (struct gdbarch *gdbarch,
                                           gdbarch_frameless_function_invocation_ftype frameless_function_invocation)
d4506 1
a4506 1
  gdbarch->frameless_function_invocation = frameless_function_invocation;
@


1.273
log
@2004-02-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERTIBLE): Add predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.c (deprecated_register_convertible_not): Delete.
	* arch-utils.h (deprecated_register_convertible_not): Delete.
	* mi/mi-main.c (get_register): Update.  Update copyright.
	* infcmd.c (default_print_registers_info): Update.
@
text
@d5486 3
a5488 3
register_gdbarch_swap (void *data,
		       unsigned long sizeof_data,
		       gdbarch_swap_ftype *init)
@


1.272
log
@2004-02-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED): Delete.
	(DEPRECATED_CALL_DUMMY_STACK_ADJUST): Delete.
	(DEPRECATED_CALL_DUMMY_ADDRESS): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (deprecated_get_next_frame_hack): Delete function.
	* frame.h (deprecated_get_next_frame_hack): Delete declaration.
	* blockframe.c (deprecated_pc_in_call_dummy_at_entry_point):
	Update.
	* infcall.c (call_function_by_hand): Update.

Index: doc/ChangeLog
2004-02-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of DEPRECATED_CALL_DUMMY_STACK_ADJUST.
@
text
@a502 1
  current_gdbarch->deprecated_register_convertible = deprecated_register_convertible_not;
d658 1
a658 1
  /* Skip verify of deprecated_register_convertible, invalid_p == 0 */
d1428 9
d3885 7
@


1.271
log
@2004-02-14  Elena Zannoni  <ezannoni@@redhat.com>

	* symfile.c (init_entry_point_info, entry_point_address): Move
	from here...
	* objfiles.c (init_entry_point_info, entry_point_address):..to
	here.
	* symfile.h (init_entry_point_info, entry_point_address): Remove
	prototypes.
	* objfiles.h (init_entry_point_info, entry_point_address):Add
	prototypes.
	* cris-tdep.c: Remove include of symfile.h. Add include of
	objfiles.h.
	* infcall.c: Ditto.
	* mcore-tdep.c: Ditto.
	* mn10300-tdep.c: Ditto.
	* sh64-tdep.c: Ditto.
 	* v850-tdep.c: Ditto.
	* arm-tdep.c: Remove include of symfile.h.
	* blockframe.c: Ditto.
	* coffread.c: Ditto.
	* dbxread.c: Ditto.
	* dwarf2read.c: Ditto.
	* dwarfread.c: Ditto.
	* frv-tdep.c: Ditto.
	* ia64-tdep.c: Ditto.
	* mdebugread.c: Ditto.
	* mipsread.c: Ditto.
	* rs6000-tdep.c: Ditto.
	* s390-tdep.c: Ditto.
	* sh-tdep.c: Ditto.
	* xstormy16-tdep.c: Ditto.
	* gdbarch.sh: Remove include of symfile.h.
	* gdbarch.c: Regenerate.
	* solib-irix.c (enable_break): Use entry_point_address().
	Add comment about include file.
	* xcoffread.c: Add comment about include file.
	* Makefile.in (arm-tdep.o, blockframe.o, coffread.o, cris-tdep.o)
	(dbxread.o, dwarf2read.o, dwarfread.o, frv-tdep.o, gdbarch.o)
	(ia64-tdep.o, infcall.o, mcore-tdep.o, mdebugread.o, mipsread.o)
	(mn10300-tdep.o, rs6000-nat.o, s390-tdep.o, sh64-tdep.o)
	(sh-tdep.o, v850-tdep.o, xstormy16-tdep.o): Update dependencies.
@
text
@a165 1
  gdbarch_deprecated_call_dummy_address_ftype *deprecated_call_dummy_address;
a170 1
  int deprecated_call_dummy_stack_adjust;
a173 1
  int deprecated_extra_stack_alignment_needed;
a332 1
  0,  /* deprecated_call_dummy_address */
a337 1
  0,  /* deprecated_call_dummy_stack_adjust */
a340 1
  0,  /* deprecated_extra_stack_alignment_needed */
a640 1
  /* Skip verify of deprecated_call_dummy_address, has predicate */
a642 1
  /* Skip verify of deprecated_call_dummy_stack_adjust, has predicate */
a645 1
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
a956 19
#ifdef DEPRECATED_CALL_DUMMY_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_CALL_DUMMY_ADDRESS_P()",
                      XSTRING (DEPRECATED_CALL_DUMMY_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_ADDRESS_P() = %d\n",
                      DEPRECATED_CALL_DUMMY_ADDRESS_P ());
#endif
#ifdef DEPRECATED_CALL_DUMMY_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_CALL_DUMMY_ADDRESS()",
                      XSTRING (DEPRECATED_CALL_DUMMY_ADDRESS ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_call_dummy_address
                      /*DEPRECATED_CALL_DUMMY_ADDRESS ()*/);
#endif
a972 17
#ifdef DEPRECATED_CALL_DUMMY_STACK_ADJUST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_CALL_DUMMY_STACK_ADJUST_P()",
                      XSTRING (DEPRECATED_CALL_DUMMY_STACK_ADJUST_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST_P() = %d\n",
                      DEPRECATED_CALL_DUMMY_STACK_ADJUST_P ());
#endif
#ifdef DEPRECATED_CALL_DUMMY_STACK_ADJUST
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_STACK_ADJUST));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST = %d\n",
                      DEPRECATED_CALL_DUMMY_STACK_ADJUST);
#endif
a1055 8
#ifdef DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED # %s\n",
                      XSTRING (DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED = %d\n",
                      DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED);
#endif
a3407 24
int
gdbarch_deprecated_call_dummy_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_call_dummy_address != NULL;
}

CORE_ADDR
gdbarch_deprecated_call_dummy_address (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_call_dummy_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_address called\n");
  return gdbarch->deprecated_call_dummy_address ();
}

void
set_gdbarch_deprecated_call_dummy_address (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_call_dummy_address_ftype deprecated_call_dummy_address)
{
  gdbarch->deprecated_call_dummy_address = deprecated_call_dummy_address;
}

a3490 23
gdbarch_deprecated_call_dummy_stack_adjust_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_call_dummy_stack_adjust != 0;
}

int
gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_stack_adjust called\n");
  return gdbarch->deprecated_call_dummy_stack_adjust;
}

void
set_gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch,
                                                int deprecated_call_dummy_stack_adjust)
{
  gdbarch->deprecated_call_dummy_stack_adjust = deprecated_call_dummy_stack_adjust;
}

int
a3559 17
}

int
gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extra_stack_alignment_needed called\n");
  return gdbarch->deprecated_extra_stack_alignment_needed;
}

void
set_gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch,
                                                     int deprecated_extra_stack_alignment_needed)
{
  gdbarch->deprecated_extra_stack_alignment_needed = deprecated_extra_stack_alignment_needed;
@


1.270
log
@2004-02-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PROLOGUE_FRAMELESS_P): Delete.
	gdbarch.h, gdbarch.c: Re-generate.
	* cris-tdep.c (cris_gdbarch_init): Do not set prologue_frameless_p
	to generic_prologue_frameless_p.
	* arch-utils.h (generic_prologue_frameless_p): Delete declaration.
	* arch-utils.c (generic_prologue_frameless_p): Delete function.
@
text
@a51 1
#include "symfile.h"		/* For entry_point_address.  */
@


1.269
log
@2004-02-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FRAME_ARGS_SKIP): Default to 0.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
@
text
@a214 1
  gdbarch_prologue_frameless_p_ftype *prologue_frameless_p;
a384 1
  0,  /* prologue_frameless_p */
a519 1
  current_gdbarch->prologue_frameless_p = generic_prologue_frameless_p;
a690 1
  /* Skip verify of prologue_frameless_p, invalid_p == 0 */
a2018 10
#ifdef PROLOGUE_FRAMELESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PROLOGUE_FRAMELESS_P(ip)",
                      XSTRING (PROLOGUE_FRAMELESS_P (ip)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: PROLOGUE_FRAMELESS_P = <0x%08lx>\n",
                      (long) current_gdbarch->prologue_frameless_p
                      /*PROLOGUE_FRAMELESS_P ()*/);
#endif
a4417 17
}

int
gdbarch_prologue_frameless_p (struct gdbarch *gdbarch, CORE_ADDR ip)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->prologue_frameless_p != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_prologue_frameless_p called\n");
  return gdbarch->prologue_frameless_p (ip);
}

void
set_gdbarch_prologue_frameless_p (struct gdbarch *gdbarch,
                                  gdbarch_prologue_frameless_p_ftype prologue_frameless_p)
{
  gdbarch->prologue_frameless_p = prologue_frameless_p;
@


1.268
log
@2004-01-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (EXTRACT_STRUCT_VALUE_ADDRESS): Deprecate.  Add
	comments mentioning extract_returned_value_address.
	* infcmd.c (print_return_value): Update.  Add comments on
	extract_returned_value_address.
	* stack.c (return_command): Add comments on
	extract_returned_value_address.
	* values.c: Update comment.
	* m32r-tdep.c: Update comment.
	* sparc-tdep.c: Update comment.
	* ia64-tdep.c (ia64_use_struct_convention): Update comment.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* m68klinux-tdep.c (m68k_linux_init_abi): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

Index: doc/ChangeLog
2004-01-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	EXTRACT_STRUCT_VALUE_ADDRESS to
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@a525 1
  current_gdbarch->frame_args_skip = -1;
d707 1
a707 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->frame_args_skip == -1))
    fprintf_unfiltered (log, "\n\tframe_args_skip");
d4598 1
a4598 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->frame_args_skip != -1);
@


1.267
log
@2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Update copyright year.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d211 1
a211 1
  gdbarch_extract_struct_value_address_ftype *extract_struct_value_address;
d382 1
a382 1
  0,  /* extract_struct_value_address */
d689 1
a689 1
  /* Skip verify of extract_struct_value_address, has predicate */
d1090 19
a1774 19
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS_P()",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS_P() = %d\n",
                      EXTRACT_STRUCT_VALUE_ADDRESS_P ());
#endif
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS(regcache)",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS (regcache)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->extract_struct_value_address
                      /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
d4349 1
a4349 1
gdbarch_extract_struct_value_address_p (struct gdbarch *gdbarch)
d4352 1
a4352 1
  return gdbarch->extract_struct_value_address != NULL;
d4356 1
a4356 1
gdbarch_extract_struct_value_address (struct gdbarch *gdbarch, struct regcache *regcache)
d4359 1
a4359 1
  gdb_assert (gdbarch->extract_struct_value_address != NULL);
d4361 2
a4362 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_struct_value_address called\n");
  return gdbarch->extract_struct_value_address (regcache);
d4366 2
a4367 2
set_gdbarch_extract_struct_value_address (struct gdbarch *gdbarch,
                                          gdbarch_extract_struct_value_address_ftype extract_struct_value_address)
d4369 1
a4369 1
  gdbarch->extract_struct_value_address = extract_struct_value_address;
@


1.266
log
@2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (print_return_value): Delete reference to
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@d4 3
a6 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
@


1.265
log
@2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_NPC_REGNUM): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* procfs.c (procfs_fetch_registers): Delete reference to
	DEPRECATED_NPC_REGNUM.
	(procfs_store_registers): Ditto.
	* regcache.c (generic_target_write_pc): Simplify.
	* lynx-nat.c: Delete #ifdef SPARC code.  Not used.

Index: doc/ChangeLog
2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation on DEPRECATED_NPC_REGNUM.
@
text
@a209 1
  gdbarch_deprecated_extract_struct_value_address_ftype *deprecated_extract_struct_value_address;
a380 1
  0,  /* deprecated_extract_struct_value_address */
a687 1
  /* Skip verify of deprecated_extract_struct_value_address, has predicate */
a1087 19
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P()",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P() = %d\n",
                      DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ());
#endif
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (regbuf)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_extract_struct_value_address
                      /*DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
a4367 24
}

int
gdbarch_deprecated_extract_struct_value_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_extract_struct_value_address != NULL;
}

CORE_ADDR
gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch, char *regbuf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_extract_struct_value_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_struct_value_address called\n");
  return gdbarch->deprecated_extract_struct_value_address (regbuf);
}

void
set_gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch,
                                                     gdbarch_deprecated_extract_struct_value_address_ftype deprecated_extract_struct_value_address)
{
  gdbarch->deprecated_extract_struct_value_address = deprecated_extract_struct_value_address;
@


1.264
log
@2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DECR_PC_AFTER_BREAK): Make zero the default.
	* gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	DECR_PC_AFTER_BREAK to zero.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc32_gdbarch_init): Ditto.
	* sh64-tdep.c (sh64_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* m32r-tdep.c (m32r_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-interix-tdep.c (i386_interix_init_abi): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* i386-nto-tdep.c (i386nto_init_abi): Add comment.
@
text
@a139 1
  int deprecated_npc_regnum;
a311 1
  0,  /* deprecated_npc_regnum */
a493 1
  current_gdbarch->deprecated_npc_regnum = -1;
a629 1
  /* Skip verify of deprecated_npc_regnum, invalid_p == 0 */
a1368 8
#ifdef DEPRECATED_NPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_NPC_REGNUM # %s\n",
                      XSTRING (DEPRECATED_NPC_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_NPC_REGNUM = %d\n",
                      DEPRECATED_NPC_REGNUM);
#endif
a2974 17
}

int
gdbarch_deprecated_npc_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_npc_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_npc_regnum called\n");
  return gdbarch->deprecated_npc_regnum;
}

void
set_gdbarch_deprecated_npc_regnum (struct gdbarch *gdbarch,
                                   int deprecated_npc_regnum)
{
  gdbarch->deprecated_npc_regnum = deprecated_npc_regnum;
@


1.263
log
@2004-01-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FUNCTION_START_OFFSET): Make zero the default.
	* gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	FUNCTION_START_OFFSET.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc32_gdbarch_init): Ditto.
	* sh64-tdep.c (sh64_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* m32r-tdep.c (m32r_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
@
text
@a527 1
  current_gdbarch->decr_pc_after_break = -1;
d710 1
a710 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->decr_pc_after_break == -1))
    fprintf_unfiltered (log, "\n\tdecr_pc_after_break");
d4623 1
a4623 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->decr_pc_after_break != -1);
@


1.262
log
@* gdbarch.sh (skip_solib_resolver): Change into a multi-arch
function.
* gdbarch.c, gdbarch.h: Regenerate.
* infrun.c (handle_inferior_event): Call
gdbarch_skip_solib_resolver instead of SKIP_SOLIB_RESOLVER.
* arch-utils.c (generic_in_solib_call_trampoline): Adjust function
definition.
* arch-utils.h (generic_in_solib_call_trampoline): Adjust function
prototype.
@
text
@a528 1
  current_gdbarch->function_start_offset = -1;
d714 1
a714 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->function_start_offset == -1))
    fprintf_unfiltered (log, "\n\tfunction_start_offset");
d4644 1
a4644 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->function_start_offset != -1);
@


1.261
log
@2003-11-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (return_value): Replace "inval" and "outval" with
	"readbuf" and "writebuf".
	* ppcnbsd-tdep.c (ppcnbsd_return_value): Ditto.
	* d10v-tdep.c (d10v_return_value): Ditto.
	* ppc-tdep.h (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppc-sysv-tdep.c (do_ppc_sysv_return_value): Ditto.
	(ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* values.c (register_value_being_returned): Update call.
	* stack.c (return_command): Update call.
	* gdbarch.h, gdbarch.c: Re-generate.

Index: gdb/doc/ChangeLog
2003-11-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace the
	return_value method's "inval" and "outval" parameters with
	"readbuf" and "writebuf".
@
text
@d423 1
a423 1
  0,  /* skip_solib_resolver */
a2219 1
#ifdef SKIP_SOLIB_RESOLVER
d2221 2
a2222 8
                      "gdbarch_dump: %s # %s\n",
                      "SKIP_SOLIB_RESOLVER(pc)",
                      XSTRING (SKIP_SOLIB_RESOLVER (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SKIP_SOLIB_RESOLVER = <0x%08lx>\n",
                      (long) current_gdbarch->skip_solib_resolver
                      /*SKIP_SOLIB_RESOLVER ()*/);
#endif
d5216 1
a5216 1
  return gdbarch->skip_solib_resolver (pc);
@


1.260
log
@2003-11-09  Andrew Cagney  <cagney@@redhat.com>

	* arch-utils.c (gdbarch_update_p): New function.
	* gdbarch.sh (gdbarch_update_p): Delete function.
 	(find_arch_by_info, gdbarch_find_by_info): New functions.
	(deprecated_current_gdbarch_set_hack): New function.
	* gdbarch.c: Re-generate.
@
text
@d4292 1
a4292 1
gdbarch_return_value (struct gdbarch *gdbarch, struct type *valtype, struct regcache *regcache, const void *inval, void *outval)
d4298 1
a4298 1
  return gdbarch->return_value (gdbarch, valtype, regcache, inval, outval);
@


1.259
log
@2003-11-09  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (clear_gdbarch_swap): Delete function.
	(swapout_gdbarch_swap): Delete function.
	(swapin_gdbarch_swap): Delete function.
	(init_gdbarch_swap): Delete function.
	(initialize_non_multiarch): Delete function.
	(current_gdbarch_swap_in_hack): New function.
	(current_gdbarch_swap_out_hack): New function.
	(current_gdbarch_swap_init_hack): New function.
	* gdbarch.c: Re-generate.
@
text
@d5902 3
a5904 2
/* Update the current architecture. Return ZERO if the update request
   failed. */
d5906 2
a5907 2
int
gdbarch_update_p (struct gdbarch_info info)
a5909 1
  struct gdbarch *old_gdbarch;
d5912 4
d5917 3
a5919 2
     sources: ``set ...''; INFOabfd supplied; existing target.  */
  gdbarch_info_fill (current_gdbarch, &info);
d5927 1
a5927 1
			  "gdbarch_update: info.bfd_arch_info %s\n",
d5932 1
a5932 1
			  "gdbarch_update: info.byte_order %d (%s)\n",
d5938 1
a5938 1
			  "gdbarch_update: info.osabi %d (%s)\n",
d5941 1
a5941 1
			  "gdbarch_update: info.abfd 0x%lx\n",
d5944 1
a5944 1
			  "gdbarch_update: info.tdep_info 0x%lx\n",
d5948 1
a5948 1
  /* Find the target that knows about this architecture. */
d5957 2
a5958 1
	fprintf_unfiltered (gdb_stdlog, "gdbarch_update: No matching architecture\n");
d5962 1
a5962 15
  /* Swap the data belonging to the old target out setting the
     installed data to zero.  This stops the ->init() function trying
     to refer to the previous architecture's global data structures.  */
  current_gdbarch_swap_out_hack ();

  /* Save the previously selected architecture, setting the global to
     NULL.  This stops ->init() trying to use the previous
     architecture's configuration.  The previous architecture may not
     even be of the same architecture family.  The most recent
     architecture of the same family is found at the head of the
     rego->arches list.  */
  old_gdbarch = current_gdbarch;
  current_gdbarch = NULL;

  /* Ask the target for a replacement architecture. */
d5965 2
a5966 2
  /* Did the target like it?  No. Reject the change and revert to the
     old architecture.  */
d5970 3
a5972 3
	fprintf_unfiltered (gdb_stdlog, "gdbarch_update: Target rejected architecture\n");
      current_gdbarch_swap_in_hack (old_gdbarch);
      return 0;
d5975 4
a5978 3
  /* Did the architecture change?  No.  Oops, put the old architecture
     back.  */
  if (old_gdbarch == new_gdbarch)
d5980 2
d5983 2
a5984 1
	fprintf_unfiltered (gdb_stdlog, "gdbarch_update: Architecture 0x%08lx (%s) unchanged\n",
d5987 14
a6000 2
      current_gdbarch_swap_in_hack (old_gdbarch);
      return 1;
d6003 9
a6011 33
  /* Is this a pre-existing architecture?  Yes. Move it to the front
     of the list of architectures (keeping the list sorted Most
     Recently Used) and then copy it in.  */
  {
    struct gdbarch_list **list;
    for (list = &rego->arches;
	 (*list) != NULL;
	 list = &(*list)->next)
      {
	if ((*list)->gdbarch == new_gdbarch)
	  {
	    struct gdbarch_list *this;
	    if (gdbarch_debug)
	      fprintf_unfiltered (gdb_stdlog,
				  "gdbarch_update: Previous architecture 0x%08lx (%s) selected\n",
				  (long) new_gdbarch,
				  new_gdbarch->bfd_arch_info->printable_name);
	    /* Unlink this.  */
	    this = (*list);
	    (*list) = this->next;
	    /* Insert in the front.  */
	    this->next = rego->arches;
	    rego->arches = this;
	    /* Copy the new architecture in.  */
	    current_gdbarch_swap_in_hack (new_gdbarch);
	    architecture_changed_event ();
	    return 1;
	  }
      }
  }

  /* Prepend this new architecture to the architecture list (keep the
     list sorted Most Recently Used).  */
a6018 11
  /* Switch to this new architecture marking it initialized.  */
  current_gdbarch = new_gdbarch;
  current_gdbarch->initialized_p = 1;
  if (gdbarch_debug)
    {
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: New architecture 0x%08lx (%s) selected\n",
			  (long) new_gdbarch,
			  new_gdbarch->bfd_arch_info->printable_name);
    }
  
d6023 1
d6025 4
a6028 3
  /* Initialize the per-architecture memory (swap) areas.
     CURRENT_GDBARCH must be update before these modules are
     called. */
d6030 1
a6030 4
  
  /* Initialize the per-architecture data.  CURRENT_GDBARCH
     must be updated before these modules are called. */
  architecture_changed_event ();
d6033 18
a6050 1
    gdbarch_dump (current_gdbarch, gdb_stdlog);
d6052 5
a6056 1
  return 1;
d6059 13
@


1.258
log
@2003-11-09  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (verify_gdbarch, gdbarch_dump): Rename "gdbarch"
	parameter to "current_gdbarch".  Add comment explaining why.
	(TARGET_FLOAT_FORMAT: Pass "current_gdbarch" to default_double_format.
	(TARGET_DOUBLE_FORMAT,TARGET_LONG_DOUBLE_FORMAT): Ditto.
	* gdbarch.c: Re-generate.
@
text
@a55 4
static void init_gdbarch_swap (struct gdbarch *);
static void clear_gdbarch_swap (struct gdbarch *);
static void swapout_gdbarch_swap (struct gdbarch *);
static void swapin_gdbarch_swap (struct gdbarch *);
a446 13
/* Do any initialization needed for a non-multiarch configuration
   after the _initialize_MODULE functions have been run.  */
void
initialize_non_multiarch (void)
{
  alloc_gdbarch_data (&startup_gdbarch);
  /* Ensure that all swap areas are zeroed so that they again think
     they are starting from scratch.  */
  clear_gdbarch_swap (&startup_gdbarch);
  init_gdbarch_swap (&startup_gdbarch);
}


d5728 1
a5728 13
clear_gdbarch_swap (struct gdbarch *gdbarch)
{
  struct gdbarch_swap *curr;
  for (curr = gdbarch->swap;
       curr != NULL;
       curr = curr->next)
    {
      memset (curr->source->data, 0, curr->source->sizeof_data);
    }
}

static void
init_gdbarch_swap (struct gdbarch *gdbarch)
d5731 1
a5731 1
  struct gdbarch_swap **curr = &gdbarch->swap;
d5738 2
a5739 1
	  (*curr) = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct gdbarch_swap);
d5741 2
a5742 1
	  (*curr)->swap = gdbarch_obstack_zalloc (gdbarch, rego->sizeof_data);
d5751 2
a5752 2
static void
swapout_gdbarch_swap (struct gdbarch *gdbarch)
d5754 1
d5756 3
a5758 1
  for (curr = gdbarch->swap;
d5761 6
a5766 1
    memcpy (curr->swap, curr->source->data, curr->source->sizeof_data);
d5770 1
a5770 1
swapin_gdbarch_swap (struct gdbarch *gdbarch)
d5773 3
a5775 1
  for (curr = gdbarch->swap;
d5779 1
d5959 1
a5959 2
  swapout_gdbarch_swap (current_gdbarch);
  clear_gdbarch_swap (current_gdbarch);
d5979 1
a5979 2
      swapin_gdbarch_swap (old_gdbarch);
      current_gdbarch = old_gdbarch;
d5991 1
a5991 2
      swapin_gdbarch_swap (old_gdbarch);
      current_gdbarch = old_gdbarch;
d6019 1
a6019 2
	    current_gdbarch = new_gdbarch;
	    swapin_gdbarch_swap (new_gdbarch);
d6054 1
a6054 1
  init_gdbarch_swap (new_gdbarch);
@


1.257
log
@2003-11-09  Andrew Cagney  <cagney@@redhat.com>

	* Makefile.in (arch-utils.o): Update dependencies.
	* arch-utils.c: Include "osabi.h".
	(gdbarch_info_fill): New function.
	* arch-utils.h (gdbarch_info_fill): Declare.
	* gdbarch.sh (gdbarch_update_p): Call "gdbarch_info_fill".
	* gdbarch.c: Re-generate.
@
text
@a54 1
static void verify_gdbarch (struct gdbarch *gdbarch);
d602 7
a608 1
/* Ensure that all values in a GDBARCH are reasonable. */
d611 1
a611 1
verify_gdbarch (struct gdbarch *gdbarch)
d620 1
a620 1
  if (gdbarch->byte_order == BFD_ENDIAN_UNKNOWN)
d622 1
a622 1
  if (gdbarch->bfd_arch_info == NULL)
d633 2
a634 2
  if (gdbarch->addr_bit == 0)
    gdbarch->addr_bit = TARGET_PTR_BIT;
d636 2
a637 2
  if (gdbarch->char_signed == -1)
    gdbarch->char_signed = 1;
d645 1
a645 1
      && (gdbarch->num_regs == -1))
d717 1
a717 1
      && (gdbarch->skip_prologue == 0))
d721 1
a721 1
      && (gdbarch->inner_than == 0))
d724 1
a724 1
      && (gdbarch->breakpoint_from_pc == 0))
d730 1
a730 1
      && (gdbarch->decr_pc_after_break == -1))
d733 1
a733 1
      && (gdbarch->function_start_offset == -1))
d737 1
a737 1
      && (gdbarch->frame_args_skip == -1))
d753 6
a758 6
  if (gdbarch->float_format == 0)
    gdbarch->float_format = default_float_format (gdbarch);
  if (gdbarch->double_format == 0)
    gdbarch->double_format = default_double_format (gdbarch);
  if (gdbarch->long_double_format == 0)
    gdbarch->long_double_format = default_double_format (gdbarch);
d764 1
a764 1
      && (gdbarch->print_insn == 0))
d805 1
a805 1
gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)
@


1.256
log
@From David S. Miller  <davem@@redhat.com>:
* gdbarch.sh (SKIP_SOLIB_RESOLVER): New method.
* gdbarch.c, gdbarch.h: Regenerated.
* arch-utils.c (generic_skip_solib_resolver): New function.
* arch-utils.h (generic_skip_solib_resolver): New prototype.
* infrun.c (SKIP_SOLIB_RESOLVER): Don't define.
@
text
@d5925 1
a5925 32

  /* ``(gdb) set architecture ...'' */
  if (info.bfd_arch_info == NULL
      && !TARGET_ARCHITECTURE_AUTO)
    info.bfd_arch_info = TARGET_ARCHITECTURE;
  if (info.bfd_arch_info == NULL
      && info.abfd != NULL
      && bfd_get_arch (info.abfd) != bfd_arch_unknown
      && bfd_get_arch (info.abfd) != bfd_arch_obscure)
    info.bfd_arch_info = bfd_get_arch_info (info.abfd);
  if (info.bfd_arch_info == NULL)
    info.bfd_arch_info = TARGET_ARCHITECTURE;

  /* ``(gdb) set byte-order ...'' */
  if (info.byte_order == BFD_ENDIAN_UNKNOWN
      && !TARGET_BYTE_ORDER_AUTO)
    info.byte_order = TARGET_BYTE_ORDER;
  /* From the INFO struct. */
  if (info.byte_order == BFD_ENDIAN_UNKNOWN
      && info.abfd != NULL)
    info.byte_order = (bfd_big_endian (info.abfd) ? BFD_ENDIAN_BIG
		       : bfd_little_endian (info.abfd) ? BFD_ENDIAN_LITTLE
		       : BFD_ENDIAN_UNKNOWN);
  /* From the current target. */
  if (info.byte_order == BFD_ENDIAN_UNKNOWN)
    info.byte_order = TARGET_BYTE_ORDER;

  /* ``(gdb) set osabi ...'' is handled by gdbarch_lookup_osabi.  */
  if (info.osabi == GDB_OSABI_UNINITIALIZED)
    info.osabi = gdbarch_lookup_osabi (info.abfd);
  if (info.osabi == GDB_OSABI_UNINITIALIZED)
    info.osabi = current_gdbarch->osabi;
@


1.255
log
@2003-10-22  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (convert_from_func_ptr_addr): Convert to a pure
	multi-arch method, add "targ" parameter.
	(struct target_ops): Declare.
	* gdbarch.h, gdbarch.c: Re-generate.
	* Makefile.in (c-valprint.o): Update dependencies.
	* arch-utils.h: Update copyright.
	(convert_from_func_ptr_addr_identity): Declare.
	* arch-utils.c (convert_from_func_ptr_addr_identity): New function.
	* ia64-tdep.c (ia64_convert_from_func_ptr_addr): Update.
	* rs6000-tdep.c (rs6000_convert_from_func_ptr_addr): Upate.
	* ppc-linux-tdep.c (ppc64_linux_convert_from_func_ptr_addr): Update.
	* infcall.c (find_function_addr, call_function_by_hand): Update.
	* c-valprint.c: Include "target.h".
	(print_function_pointer_address): Update.
@
text
@d255 1
d428 1
d558 1
d762 1
d2232 10
d5226 17
@


1.254
log
@2003-10-20  Andrew Cagney  <cagney@@redhat.com>

	* values.c (register_value_being_returned): Update comments.  Use
	"gdbarch_return_value" when available.
	(using_struct_return): Ditto.
	(set_return_value): Ditto.  Use "gdbarch_return_value" when
	available..  Print a warning, and not an error, when an unhandled
	return type is encountered.
	* infcmd.c: Include "gdb_assert.h".
	(print_return_value): When gdbarch_return_value_p, and using
	struct return, assume that the value is not available.
	* defs.h (return_value_convention): Define.
	* gdbarch.sh (gdbarch_return_value): New predicate method.
	* gdbarch.h, gdbarch.c: Re-generate
	* ppc-sysv-tdep.c (return_value_convention): Delete definition.

Index: doc/ChangeLog
2003-10-20  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	gdbarch_return_value.  Add cross references from
	USE_STRUCT_CONVENTION, EXTRACT_RETURN_VALUE, and
	STORE_RETURN_VALUE, and from/to EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@d421 1
a421 1
  0,  /* convert_from_func_ptr_addr */
d552 1
a552 1
  current_gdbarch->convert_from_func_ptr_addr = core_addr_identity;
d802 3
a974 10
#ifdef CONVERT_FROM_FUNC_PTR_ADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "CONVERT_FROM_FUNC_PTR_ADDR(addr)",
                      XSTRING (CONVERT_FROM_FUNC_PTR_ADDR (addr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CONVERT_FROM_FUNC_PTR_ADDR = <0x%08lx>\n",
                      (long) current_gdbarch->convert_from_func_ptr_addr
                      /*CONVERT_FROM_FUNC_PTR_ADDR ()*/);
#endif
d5106 1
a5106 1
gdbarch_convert_from_func_ptr_addr (struct gdbarch *gdbarch, CORE_ADDR addr)
d5112 1
a5112 1
  return gdbarch->convert_from_func_ptr_addr (addr);
@


1.253
log
@ 	* gdbarch.sh (ADJUST_BREAKPOINT_ADDRESS): New method.
 	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@a205 1
  gdbarch_return_value_on_stack_ftype *return_value_on_stack;
d208 2
d214 1
a216 1
  gdbarch_use_struct_convention_ftype *use_struct_convention;
a377 1
  0,  /* return_value_on_stack */
d380 2
d386 1
a388 1
  0,  /* use_struct_convention */
a696 1
  /* Skip verify of return_value_on_stack, invalid_p == 0 */
d699 2
d703 1
a705 1
  /* Skip verify of use_struct_convention, invalid_p == 0 */
d814 6
a4241 17
gdbarch_return_value_on_stack (struct gdbarch *gdbarch, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->return_value_on_stack != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_value_on_stack called\n");
  return gdbarch->return_value_on_stack (type);
}

void
set_gdbarch_return_value_on_stack (struct gdbarch *gdbarch,
                                   gdbarch_return_value_on_stack_ftype return_value_on_stack)
{
  gdbarch->return_value_on_stack = return_value_on_stack;
}

int
d4289 41
d4399 17
a4460 17
}

int
gdbarch_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->use_struct_convention != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_use_struct_convention called\n");
  return gdbarch->use_struct_convention (gcc_p, value_type);
}

void
set_gdbarch_use_struct_convention (struct gdbarch *gdbarch,
                                   gdbarch_use_struct_convention_ftype use_struct_convention)
{
  gdbarch->use_struct_convention = use_struct_convention;
@


1.252
log
@* gdbarch.sh (regset_from_core_section): New method.
(struct regset): Declare opaque.
* gdbarch.c, gdbarch.h: Regenerated.
@
text
@d222 1
d393 1
d715 1
d882 6
d4544 24
@


1.251
log
@2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_RAW_SIZE): Rename
	REGISTER_RAW_SIZE.
	* gdbarch.h, gdbarch.c: Re-generate.
	* aix-thread.c, alpha-tdep.h, arm-tdep.c, core-sol2.c: Update.
	* cris-tdep.c, dve3900-rom.c, findvar.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, ia64-tdep.c, infcmd.c, infptrace.c: Update.
	* infrun.c, irix5-nat.c, lynx-nat.c, mips-linux-tdep.c: Update.
	* mips-nat.c, mips-tdep.c, mipsv4-nat.c, mn10300-tdep.c: Update.
	* monitor.c, ns32k-tdep.c, ppc-linux-nat.c, regcache.c: Update.
	* remote-e7000.c, remote-mips.c, remote-sim.c: Update.
	* remote-vxmips.c, remote-vxsparc.c, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, rs6000-tdep.c, s390-tdep.c: Update.
	* sh64-tdep.c, sparc-nat.c, sparc-tdep.c, stack.c: Update.
	* target.c, tracepoint.c, v850-tdep.c, v850ice.c, valops.c: Update.
	* vax-tdep.c, vax-tdep.h, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-delta68.h, config/m68k/tm-vx68.h: Update.
	* config/sparc/tm-sparc.h, config/sparc/tm-sparclynx.h: Update.

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_RAW_SIZE to DEPRECATED_REGISTER_RAW_SIZE.
	* gdb.texinfo (Packets, Stop Reply Packets): Ditto.
	* gdbint.texinfo (Target Architecture Definition): Rename

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_RAW_SIZE to
	DEPRECATED_REGISTER_RAW_SIZE.
@
text
@d270 1
d440 1
d770 1
d802 6
d5484 24
@


1.250
log
@2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_VIRTUAL_SIZE to
	DEPRECATED_REGISTER_VIRTUAL_SIZE.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_VIRTUAL_SIZE): Rename
	REGISTER_VIRTUAL_SIZE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* vax-tdep.h, sparc-tdep.c, regcache.h: Update.
	* regcache.c, mn10300-tdep.c, mips-tdep.c: Update.
	* infcmd.c, frame.c, findvar.c, cris-tdep.c: Update.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_VIRTUAL_SIZE to DEPRECATED_REGISTER_VIRTUAL_SIZE.
	(Target Architecture Definition):
@
text
@d1527 19
a2109 19
#endif
#ifdef REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_RAW_SIZE_P()",
                      XSTRING (REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_RAW_SIZE_P() = %d\n",
                      REGISTER_RAW_SIZE_P ());
#endif
#ifdef REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_RAW_SIZE(reg_nr)",
                      XSTRING (REGISTER_RAW_SIZE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_RAW_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_raw_size
                      /*REGISTER_RAW_SIZE ()*/);
@


1.249
log
@2003-09-29  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_VIRTUAL_TYPE): Rename
	DEPRECATED_REGISTER_VIRTUAL_TYPE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arch-utils.c,	hppa-tdep.c, regcache.c, regcache.h: Update.
	* sh64-tdep.c, sparc-tdep.c: Update.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_VIRTUAL_TYPE to DEPRECATED_REGISTER_VIRTUAL_TYPE.
@
text
@d1535 19
a2136 19
#ifdef REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      REGISTER_VIRTUAL_SIZE_P ());
#endif
#ifdef REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_SIZE(reg_nr)",
                      XSTRING (REGISTER_VIRTUAL_SIZE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_size
                      /*REGISTER_VIRTUAL_SIZE ()*/);
#endif
@


1.248
log
@* gdbarch.sh (DEPRECATED_REG_STRUCT_HAS_ADDR): Add comment.
* gdbarch.h, gdbarch.c: Regenerate.
(stabs_argument_has_addr): New architecture method.
* arch-utils.h (default_stabs_argument_has_addr): New prototype.
* arch-utils.c: Include "buildsym.h".
(default_stabs_argument_has_addr): New function.
* stabsread.c (define_symbol): Use stabs_argument_has_addr
instead of DEPRECATED_REG_STRUCT_HAS_ADDR.
@
text
@d1535 19
a2135 19
#endif
#ifdef REGISTER_VIRTUAL_TYPE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_TYPE_P()",
                      XSTRING (REGISTER_VIRTUAL_TYPE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_TYPE_P() = %d\n",
                      REGISTER_VIRTUAL_TYPE_P ());
#endif
#ifdef REGISTER_VIRTUAL_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_TYPE(reg_nr)",
                      XSTRING (REGISTER_VIRTUAL_TYPE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_TYPE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_type
                      /*REGISTER_VIRTUAL_TYPE ()*/);
@


1.247
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_NPC_REGNUM): Deprecate NPC_REGNUM.
	* gdbarch.h, gdbarch.c: Regenerate.
	* core-sol2.c, hppa-tdep.c, lynx-nat.c, procfs.c: Update.
	* regcache.c, remote-vxsparc.c, sparc-linux-nat.c: Update.
	* sparc-nat.c, sparc-tdep.c, sparc64-tdep.c: Update.
	* sparcnbsd-tdep.c: Update.
@
text
@d241 1
d410 1
d545 1
d736 1
d805 3
d4938 17
@


1.246
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTE): Rename REGISTER_BYTE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arm-linux-tdep.c, core-sol2.c, cris-tdep.c: Update.
	* d10v-tdep.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, irix5-nat.c, lynx-nat.c, m68knbsd-nat.c: Update.
	* mcore-tdep.c, mips-linux-tdep.c, mips-tdep.c: Update.
	* mipsv4-nat.c, mn10300-tdep.c, ns32k-tdep.c: Update.
	* ns32knbsd-nat.c, ppc-bdm.c, regcache.c, remote-sds.c: Update.
	* remote-vx68.c, remote-vxmips.c, remote-vxsparc.c: Update.
	* remote.c, rs6000-tdep.c, s390-tdep.c, sh64-tdep.c: Update.
	* sparc-nat.c, sparc-tdep.c, sun3-nat.c, v850-tdep.c: Update.
	* v850ice.c, vax-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-cisco.h, config/m68k/tm-delta68.h: Update.
	* config/pa/nm-hppah.h: Update.

2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* mi/mi-main.c: Rename REGISTER_BYTE to DEPRECATED_REGISTER_BYTE.
@
text
@d145 1
a145 1
  int npc_regnum;
d313 1
a313 1
  0,  /* npc_regnum */
d504 1
a504 1
  current_gdbarch->npc_regnum = -1;
d635 1
a635 1
  /* Skip verify of npc_regnum, invalid_p == 0 */
d1360 8
a1920 8
#ifdef NPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: NPC_REGNUM # %s\n",
                      XSTRING (NPC_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: NPC_REGNUM = %d\n",
                      NPC_REGNUM);
#endif
d2974 1
a2974 1
gdbarch_npc_regnum (struct gdbarch *gdbarch)
d2977 1
a2977 1
  /* Skip verify of npc_regnum, invalid_p == 0 */
d2979 2
a2980 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_npc_regnum called\n");
  return gdbarch->npc_regnum;
d2984 2
a2985 2
set_gdbarch_npc_regnum (struct gdbarch *gdbarch,
                        int npc_regnum)
d2987 1
a2987 1
  gdbarch->npc_regnum = npc_regnum;
@


1.245
log
@Really check in regenerated files.
@
text
@d1455 19
a2017 19
#ifdef REGISTER_BYTE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTE_P()",
                      XSTRING (REGISTER_BYTE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTE_P() = %d\n",
                      REGISTER_BYTE_P ());
#endif
#ifdef REGISTER_BYTE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTE(reg_nr)",
                      XSTRING (REGISTER_BYTE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_byte
                      /*REGISTER_BYTE ()*/);
#endif
@


1.244
log
@2003-09-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_STACK_ALIGN): Rename STACK_ALIGN.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Update.
	* hppa-tdep.c (hppa_push_arguments): Update.
	* ada-lang.c (place_on_stack): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Delete comment refering to
	stack_align.
@
text
@d240 1
a240 1
  gdbarch_reg_struct_has_addr_ftype *reg_struct_has_addr;
d408 1
a408 1
  0,  /* reg_struct_has_addr */
d732 1
a732 1
  /* Skip verify of reg_struct_has_addr, has predicate */
d1501 19
a2129 19
#ifdef REG_STRUCT_HAS_ADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REG_STRUCT_HAS_ADDR_P()",
                      XSTRING (REG_STRUCT_HAS_ADDR_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REG_STRUCT_HAS_ADDR_P() = %d\n",
                      REG_STRUCT_HAS_ADDR_P ());
#endif
#ifdef REG_STRUCT_HAS_ADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (REG_STRUCT_HAS_ADDR (gcc_p, type)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REG_STRUCT_HAS_ADDR = <0x%08lx>\n",
                      (long) current_gdbarch->reg_struct_has_addr
                      /*REG_STRUCT_HAS_ADDR ()*/);
#endif
d4910 1
a4910 1
gdbarch_reg_struct_has_addr_p (struct gdbarch *gdbarch)
d4913 1
a4913 1
  return gdbarch->reg_struct_has_addr != NULL;
d4917 1
a4917 1
gdbarch_reg_struct_has_addr (struct gdbarch *gdbarch, int gcc_p, struct type *type)
d4920 1
a4920 1
  gdb_assert (gdbarch->reg_struct_has_addr != NULL);
d4922 2
a4923 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_reg_struct_has_addr called\n");
  return gdbarch->reg_struct_has_addr (gcc_p, type);
d4927 2
a4928 2
set_gdbarch_reg_struct_has_addr (struct gdbarch *gdbarch,
                                 gdbarch_reg_struct_has_addr_ftype reg_struct_has_addr)
d4930 1
a4930 1
  gdbarch->reg_struct_has_addr = reg_struct_has_addr;
@


1.243
log
@2003-09-04  Andrew Cagney  <cagney@@redhat.com>

	* avr-tdep.c: Include "dis-asm.h".
	* cris-tdep.c: Include "dis-asm.h".
	(cris_delayed_get_disassembler): Use "struct disassemble_info"
	instead of corresponding typedef.
	* h8300-tdep.c: Include "dis-asm.h".
	* ia64-tdep.c: Include "dis-asm.h".
	* i386-tdep.c: Include "dis-asm.h".
	(i386_print_insn): Use "struct disassemble_info" instead of
	corresponding typedef.
	* m68k-tdep.c: Include "dis-asm.h".
	* mcore-tdep.c: Include "dis-asm.h".
	* mips-tdep.c: Include "dis-asm.h".
	(gdb_print_insn_mips): Make static, use "struct disassemble_info"
	instead of corresponding typedef.
	* ns32k-tdep.c: Include "dis-asm.h".
	* s390-tdep.c: Include "dis-asm.h".
	* sparc-tdep.c: Include "dis-asm.h".
	* vax-tdep.c: Include "dis-asm.h".
	* v850-tdep.c: Include "dis-asm.h".
	* mn10300-tdep.c: Include "dis-asm.h".
	* rs6000-tdep.c: Include "dis-asm.h".
	* xstormy16-tdep.c: Include "dis-asm.h".
	(_initialize_xstormy16_tdep): Delete "extern" declaration of
	print_insn_xstormy16.
	* Makefile.in (v850-tdep.o): Update dependencies.
	(vax-tdep.o, sparc-tdep.o, s390-tdep.o): Ditto.
	(ns32k-tdep.o, mips-tdep.o, mcore-tdep.o): Ditto.
	(m68k-tdep.o, ia64-tdep.o, i386-tdep.o): Ditto.
	(h8300-tdep.o, cris-tdep.o, avr-tdep.o): Ditto.
	(mn10300-tdep.o, xstormy16-tdep.o, disasm.o): Ditto.
	(gdbarch_h): Remove $(dis_asm_h).
	* disasm.c: Include "dis-asm.h".
	(dis_asm_read_memory): Use "struct disassemble_info" instead of
	corresponding typedef.
	(dis_asm_memory_error, dump_insns, do_assembly_only): Ditto.
	(gdb_disassemble_info, gdb_disassembly, gdb_print_insn): Ditto.
	* gdbarch.sh: Do not include "dis-asm.h".
	(struct disassemble_info): Declare opaque.
	(TARGET_PRINT_INSN): Update declaration.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d238 1
a238 1
  gdbarch_stack_align_ftype *stack_align;
d406 1
a406 1
  0,  /* stack_align */
d730 1
a730 1
  /* Skip verify of stack_align, has predicate */
d1547 19
a2257 19
#ifdef STACK_ALIGN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STACK_ALIGN_P()",
                      XSTRING (STACK_ALIGN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: STACK_ALIGN_P() = %d\n",
                      STACK_ALIGN_P ());
#endif
#ifdef STACK_ALIGN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STACK_ALIGN(sp)",
                      XSTRING (STACK_ALIGN (sp)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: STACK_ALIGN = <0x%08lx>\n",
                      (long) current_gdbarch->stack_align
                      /*STACK_ALIGN ()*/);
#endif
d4862 1
a4862 1
gdbarch_stack_align_p (struct gdbarch *gdbarch)
d4865 1
a4865 1
  return gdbarch->stack_align != NULL;
d4869 1
a4869 1
gdbarch_stack_align (struct gdbarch *gdbarch, CORE_ADDR sp)
d4872 1
a4872 1
  gdb_assert (gdbarch->stack_align != NULL);
d4874 2
a4875 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stack_align called\n");
  return gdbarch->stack_align (sp);
d4879 2
a4880 2
set_gdbarch_stack_align (struct gdbarch *gdbarch,
                         gdbarch_stack_align_ftype stack_align)
d4882 1
a4882 1
  gdbarch->stack_align = stack_align;
@


1.242
log
@2003-09-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_CALL_DUMMY_ADDRESS): Rename
	CALL_DUMMY_ADDRESS, change to a predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* blockframe.c (deprecated_pc_in_call_dummy_at_entry_point):
	Use either DEPRECATED_CALL_DUMMY_ADDRESS or entry_point_address.
	* infcall.c (call_function_by_hand): Ditto.
	* sparc-tdep.c (sparc_push_return_address): Ditto.
	(sparc_gdbarch_init): Set deprecated_call_dummy_address.
	* xstormy16-tdep.c (xstormy16_push_return_address): Replace
	CALL_DUMMY_ADDRESS with entry_point_address.
	* v850-tdep.c (v850_push_return_address): Ditto.
	* s390-tdep.c (s390_push_return_address): Ditto.
	* rs6000-tdep.c (ppc_push_return_address): Ditto.
	* mn10300-tdep.c (mn10300_push_return_address): Ditto.
	* mcore-tdep.c (mcore_push_return_address): Ditto.
	* cris-tdep.c (cris_push_return_address): Ditto.
	* arm-tdep.c (arm_push_return_address): Ditto.
@
text
@d5089 1
a5089 1
gdbarch_print_insn (struct gdbarch *gdbarch, bfd_vma vma, disassemble_info *info)
@


1.241
log
@2003-09-03  Andrew Cagney  <cagney@@redhat.com>

	* arch-utils.h (legacy_print_insn): Delete declaration.
	* arch-utils.c (legacy_print_insn): Delete function.
	* disasm.c (deprecated_tm_print_insn_info): Delete.
	(_initialize_disasm): Delete function, contained code initializing
	deprecated_tm_print_insn_info.
	* gdbarch.sh (deprecated_tm_print_insn): Delete.
	(deprecated_tm_print_insn_info): Delete.
	(TARGET_PRINT_INSN): Do not provide a default.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d171 1
a171 1
  gdbarch_call_dummy_address_ftype *call_dummy_address;
d339 1
a339 1
  0,  /* call_dummy_address */
a515 1
  current_gdbarch->call_dummy_address = entry_point_address;
d658 1
a658 1
  /* Skip verify of call_dummy_address, invalid_p == 0 */
a888 10
#ifdef CALL_DUMMY_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "CALL_DUMMY_ADDRESS()",
                      XSTRING (CALL_DUMMY_ADDRESS ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->call_dummy_address
                      /*CALL_DUMMY_ADDRESS ()*/);
#endif
d966 19
d3512 7
d3520 1
a3520 1
gdbarch_call_dummy_address (struct gdbarch *gdbarch)
d3523 1
a3523 1
  gdb_assert (gdbarch->call_dummy_address != NULL);
d3525 2
a3526 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_address called\n");
  return gdbarch->call_dummy_address ();
d3530 2
a3531 2
set_gdbarch_call_dummy_address (struct gdbarch *gdbarch,
                                gdbarch_call_dummy_address_ftype call_dummy_address)
d3533 1
a3533 1
  gdbarch->call_dummy_address = call_dummy_address;
@


1.240
log
@Index: ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FRAME_RED_ZONE_SIZE): New architecture method.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Adjust the SP by
	frame_red_zone_size before allocating any stack space.
	* rs6000-tdep.c (rs6000_gdbarch_init): Set "frame_red_zone_size".
	* x86-64-tdep.c (x86_64_frame_align): New function.
	(x86_64_init_abi): Set "frame_red_zone_size" and "frame_align".

	* x86-64-tdep.c (x86_64_push_arguments): Revert 2003-08-07 change.
	Remove code adjusting SP so that it skips over the Red Zone.

Index: doc/ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	"frame_red_zone_size".
@
text
@a546 1
  current_gdbarch->print_insn = legacy_print_insn;
a600 1
  /* Only perform sanity checks on a multi-arch target. */
d744 3
a746 1
  /* Skip verify of print_insn, invalid_p == 0 */
a5949 5

/* Disassembler */

/* Pointer to the target-dependent disassembly function.  */
int (*deprecated_tm_print_insn) (bfd_vma, disassemble_info *);
@


1.239
log
@2003-08-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Delete all #if not GDB_MULTI_ARCH code.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d241 1
d409 1
d1728 8
d4916 16
@


1.238
log
@2003-08-04  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (gdbarch_data_free_ftype): Delete declaration.
	(register_gdbarch_data): Delete "free" parameter.  Update
	comments.
	* gdbarch.h, gdbarch.c: Re-generate.
	* reggroups.c (_initialize_reggroup): Update.
	* gnu-v3-abi.c (init_gnuv3_ops): Update.
	* frame-base.c (_initialize_frame_base): Update.
	* frame-unwind.c (_initialize_frame_unwind): Update.
	* user-regs.c (_initialize_user_regs): Update.
	* remote.c (_initialize_remote): Update.
	* regcache.c (_initialize_regcache): Update.
@
text
@a38 1
#if GDB_MULTI_ARCH
a40 18
#else
/* Just include everything in sight so that the every old definition
   of macro is visible. */
#include "gdb_string.h"
#include <ctype.h>
#include "symtab.h"
#include "frame.h"
#include "inferior.h"
#include "breakpoint.h"
#include "gdb_wait.h"
#include "gdbcore.h"
#include "gdbcmd.h"
#include "target.h"
#include "gdbthread.h"
#include "annotate.h"
#include "symfile.h"		/* for overlay functions */
#include "value.h"		/* For old tm.h/nm.h macros.  */
#endif
a600 2
  if (!GDB_MULTI_ARCH)
    return;
d787 30
a816 40
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_frame_align_p() = %d\n",
                        gdbarch_frame_align_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: frame_align = 0x%08lx\n",
                        (long) current_gdbarch->frame_align);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: in_function_epilogue_p = 0x%08lx\n",
                        (long) current_gdbarch->in_function_epilogue_p);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
                        (long) current_gdbarch->register_reggroup_p);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_pseudo_register_read_p() = %d\n",
                        gdbarch_pseudo_register_read_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: pseudo_register_read = 0x%08lx\n",
                        (long) current_gdbarch->pseudo_register_read);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_pseudo_register_write_p() = %d\n",
                        gdbarch_pseudo_register_write_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: pseudo_register_write = 0x%08lx\n",
                        (long) current_gdbarch->pseudo_register_write);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_address_class_name_to_type_flags_p() = %d\n",
                        gdbarch_address_class_name_to_type_flags_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: address_class_name_to_type_flags = 0x%08lx\n",
                        (long) current_gdbarch->address_class_name_to_type_flags);
d831 4
a834 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = <0x%08lx>\n",
                        (long) current_gdbarch->address_class_type_flags
                        /*ADDRESS_CLASS_TYPE_FLAGS ()*/);
d836 6
a841 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_address_class_type_flags_to_name_p() = %d\n",
                        gdbarch_address_class_type_flags_to_name_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: address_class_type_flags_to_name = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags_to_name);
a842 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d847 4
a850 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_TO_POINTER = <0x%08lx>\n",
                        (long) current_gdbarch->address_to_pointer
                        /*ADDRESS_TO_POINTER ()*/);
d857 4
a860 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDR_BITS_REMOVE = <0x%08lx>\n",
                        (long) current_gdbarch->addr_bits_remove
                        /*ADDR_BITS_REMOVE ()*/);
d883 4
a886 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: BREAKPOINT_FROM_PC = <0x%08lx>\n",
                        (long) current_gdbarch->breakpoint_from_pc
                        /*BREAKPOINT_FROM_PC ()*/);
d893 4
a896 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->call_dummy_address
                        /*CALL_DUMMY_ADDRESS ()*/);
d911 4
a914 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CANNOT_FETCH_REGISTER = <0x%08lx>\n",
                        (long) current_gdbarch->cannot_fetch_register
                        /*CANNOT_FETCH_REGISTER ()*/);
d929 4
a932 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CANNOT_STORE_REGISTER = <0x%08lx>\n",
                        (long) current_gdbarch->cannot_store_register
                        /*CANNOT_STORE_REGISTER ()*/);
a934 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d939 4
d944 3
a946 10
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: COFF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                        (long) current_gdbarch->coff_make_msymbol_special
                        /*COFF_MAKE_MSYMBOL_SPECIAL ()*/);
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: construct_inferior_arguments = 0x%08lx\n",
                        (long) current_gdbarch->construct_inferior_arguments);
d952 4
a955 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CONVERT_FROM_FUNC_PTR_ADDR = <0x%08lx>\n",
                        (long) current_gdbarch->convert_from_func_ptr_addr
                        /*CONVERT_FROM_FUNC_PTR_ADDR ()*/);
d962 4
a965 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CONVERT_REGISTER_P = <0x%08lx>\n",
                        (long) current_gdbarch->convert_register_p
                        /*CONVERT_REGISTER_P ()*/);
a1033 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1038 4
a1041 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_do_registers_info
                        /*DEPRECATED_DO_REGISTERS_INFO ()*/);
a1052 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1057 4
a1060 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_dummy_write_sp
                        /*DEPRECATED_DUMMY_WRITE_SP ()*/);
a1062 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1067 4
a1070 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_extract_return_value
                        /*DEPRECATED_EXTRACT_RETURN_VALUE ()*/);
d1086 4
a1089 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_extract_struct_value_address
                        /*DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
a1108 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1113 4
a1116 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_fix_call_dummy
                        /*DEPRECATED_FIX_CALL_DUMMY ()*/);
d1140 4
a1143 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_args_address
                        /*DEPRECATED_FRAME_ARGS_ADDRESS ()*/);
d1159 4
a1162 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_CHAIN = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_chain
                        /*DEPRECATED_FRAME_CHAIN ()*/);
d1178 4
a1181 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_chain_valid
                        /*DEPRECATED_FRAME_CHAIN_VALID ()*/);
a1192 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1197 4
a1200 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_init_saved_regs
                        /*DEPRECATED_FRAME_INIT_SAVED_REGS ()*/);
d1216 4
a1219 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_locals_address
                        /*DEPRECATED_FRAME_LOCALS_ADDRESS ()*/);
d1235 4
a1238 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_saved_pc
                        /*DEPRECATED_FRAME_SAVED_PC ()*/);
a1249 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1254 4
a1257 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_get_saved_register
                        /*DEPRECATED_GET_SAVED_REGISTER ()*/);
a1268 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1273 4
a1276 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_init_extra_frame_info
                        /*DEPRECATED_INIT_EXTRA_FRAME_INFO ()*/);
d1292 4
a1295 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_INIT_FRAME_PC = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_init_frame_pc
                        /*DEPRECATED_INIT_FRAME_PC ()*/);
d1311 4
a1314 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_init_frame_pc_first
                        /*DEPRECATED_INIT_FRAME_PC_FIRST ()*/);
d1364 4
a1367 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_pc_in_call_dummy
                        /*DEPRECATED_PC_IN_CALL_DUMMY ()*/);
a1378 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1383 4
a1386 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_POP_FRAME = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_pop_frame
                        /*DEPRECATED_POP_FRAME ()*/);
d1402 4
a1405 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_arguments
                        /*DEPRECATED_PUSH_ARGUMENTS ()*/);
a1416 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1421 4
a1424 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_dummy_frame
                        /*DEPRECATED_PUSH_DUMMY_FRAME ()*/);
d1440 4
a1443 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_return_address
                        /*DEPRECATED_PUSH_RETURN_ADDRESS ()*/);
d1458 4
a1461 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_REGISTER_CONVERTIBLE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_convertible
                        /*DEPRECATED_REGISTER_CONVERTIBLE ()*/);
a1463 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1468 4
a1471 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_RAW = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_convert_to_raw
                        /*DEPRECATED_REGISTER_CONVERT_TO_RAW ()*/);
a1473 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1478 4
a1481 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_convert_to_virtual
                        /*DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL ()*/);
d1505 4
a1508 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_saved_pc_after_call
                        /*DEPRECATED_SAVED_PC_AFTER_CALL ()*/);
a1519 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1524 4
a1527 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_save_dummy_frame_tos
                        /*DEPRECATED_SAVE_DUMMY_FRAME_TOS ()*/);
a1537 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1542 4
a1545 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_STORE_RETURN_VALUE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_store_return_value
                        /*DEPRECATED_STORE_RETURN_VALUE ()*/);
a1556 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1561 4
a1564 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_store_struct_return
                        /*DEPRECATED_STORE_STRUCT_RETURN ()*/);
d1580 4
a1583 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_TARGET_READ_FP = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_target_read_fp
                        /*DEPRECATED_TARGET_READ_FP ()*/);
d1598 4
a1601 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DWARF2_REG_TO_REGNUM = <0x%08lx>\n",
                        (long) current_gdbarch->dwarf2_reg_to_regnum
                        /*DWARF2_REG_TO_REGNUM ()*/);
d1608 4
a1611 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DWARF_REG_TO_REGNUM = <0x%08lx>\n",
                        (long) current_gdbarch->dwarf_reg_to_regnum
                        /*DWARF_REG_TO_REGNUM ()*/);
d1618 4
a1621 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ECOFF_REG_TO_REGNUM = <0x%08lx>\n",
                        (long) current_gdbarch->ecoff_reg_to_regnum
                        /*ECOFF_REG_TO_REGNUM ()*/);
a1623 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1628 4
a1631 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ELF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                        (long) current_gdbarch->elf_make_msymbol_special
                        /*ELF_MAKE_MSYMBOL_SPECIAL ()*/);
a1633 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1638 4
a1641 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                        (long) current_gdbarch->extract_return_value
                        /*EXTRACT_RETURN_VALUE ()*/);
d1657 4
a1660 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->extract_struct_value_address
                        /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
d1676 4
a1679 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FETCH_POINTER_ARGUMENT = <0x%08lx>\n",
                        (long) current_gdbarch->fetch_pointer_argument
                        /*FETCH_POINTER_ARGUMENT ()*/);
d1694 4
a1697 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = <0x%08lx>\n",
                        (long) current_gdbarch->frameless_function_invocation
                        /*FRAMELESS_FUNCTION_INVOCATION ()*/);
d1721 4
a1724 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_NUM_ARGS = <0x%08lx>\n",
                        (long) current_gdbarch->frame_num_args
                        /*FRAME_NUM_ARGS ()*/);
d1748 4
a1751 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: GET_LONGJMP_TARGET = <0x%08lx>\n",
                        (long) current_gdbarch->get_longjmp_target
                        /*GET_LONGJMP_TARGET ()*/);
d1766 4
a1769 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INNER_THAN = <0x%08lx>\n",
                        (long) current_gdbarch->inner_than
                        /*INNER_THAN ()*/);
d1785 4
a1788 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INTEGER_TO_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->integer_to_address
                        /*INTEGER_TO_ADDRESS ()*/);
d1795 4
a1798 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = <0x%08lx>\n",
                        (long) current_gdbarch->in_solib_call_trampoline
                        /*IN_SOLIB_CALL_TRAMPOLINE ()*/);
d1805 4
a1808 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = <0x%08lx>\n",
                        (long) current_gdbarch->in_solib_return_trampoline
                        /*IN_SOLIB_RETURN_TRAMPOLINE ()*/);
d1815 4
a1818 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = <0x%08lx>\n",
                        (long) current_gdbarch->memory_insert_breakpoint
                        /*MEMORY_INSERT_BREAKPOINT ()*/);
d1825 4
a1828 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = <0x%08lx>\n",
                        (long) current_gdbarch->memory_remove_breakpoint
                        /*MEMORY_REMOVE_BREAKPOINT ()*/);
d1875 4
a1878 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PC_IN_SIGTRAMP = <0x%08lx>\n",
                        (long) current_gdbarch->pc_in_sigtramp
                        /*PC_IN_SIGTRAMP ()*/);
d1893 4
a1896 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: POINTER_TO_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->pointer_to_address
                        /*POINTER_TO_ADDRESS ()*/);
d1898 15
a1912 20
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_print_float_info_p() = %d\n",
                        gdbarch_print_float_info_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: print_float_info = 0x%08lx\n",
                        (long) current_gdbarch->print_float_info);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: print_registers_info = 0x%08lx\n",
                        (long) current_gdbarch->print_registers_info);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_print_vector_info_p() = %d\n",
                        gdbarch_print_vector_info_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: print_vector_info = 0x%08lx\n",
                        (long) current_gdbarch->print_vector_info);
d1918 4
a1921 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PROLOGUE_FRAMELESS_P = <0x%08lx>\n",
                        (long) current_gdbarch->prologue_frameless_p
                        /*PROLOGUE_FRAMELESS_P ()*/);
d1931 12
a1942 16
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_push_dummy_call_p() = %d\n",
                        gdbarch_push_dummy_call_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: push_dummy_call = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_call);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_push_dummy_code_p() = %d\n",
                        gdbarch_push_dummy_code_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: push_dummy_code = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_code);
d1957 4
a1960 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_BYTE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_byte
                        /*REGISTER_BYTE ()*/);
d1976 4
a1979 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_BYTES_OK = <0x%08lx>\n",
                        (long) current_gdbarch->register_bytes_ok
                        /*REGISTER_BYTES_OK ()*/);
d1986 4
a1989 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_NAME = <0x%08lx>\n",
                        (long) current_gdbarch->register_name
                        /*REGISTER_NAME ()*/);
d2005 4
a2008 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_RAW_SIZE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_raw_size
                        /*REGISTER_RAW_SIZE ()*/);
d2015 4
a2018 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_SIM_REGNO = <0x%08lx>\n",
                        (long) current_gdbarch->register_sim_regno
                        /*REGISTER_SIM_REGNO ()*/);
a2020 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d2025 4
d2030 6
a2035 14
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_TO_VALUE = <0x%08lx>\n",
                        (long) current_gdbarch->register_to_value
                        /*REGISTER_TO_VALUE ()*/);
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_register_type_p() = %d\n",
                        gdbarch_register_type_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: register_type = 0x%08lx\n",
                        (long) current_gdbarch->register_type);
d2050 4
a2053 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_VIRTUAL_SIZE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_virtual_size
                        /*REGISTER_VIRTUAL_SIZE ()*/);
d2069 4
a2072 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_VIRTUAL_TYPE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_virtual_type
                        /*REGISTER_VIRTUAL_TYPE ()*/);
d2088 4
a2091 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REG_STRUCT_HAS_ADDR = <0x%08lx>\n",
                        (long) current_gdbarch->reg_struct_has_addr
                        /*REG_STRUCT_HAS_ADDR ()*/);
d2093 3
a2095 4
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: remote_translate_xfer_address = 0x%08lx\n",
                        (long) current_gdbarch->remote_translate_xfer_address);
d2101 4
a2104 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: RETURN_VALUE_ON_STACK = <0x%08lx>\n",
                        (long) current_gdbarch->return_value_on_stack
                        /*RETURN_VALUE_ON_STACK ()*/);
d2111 4
a2114 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SDB_REG_TO_REGNUM = <0x%08lx>\n",
                        (long) current_gdbarch->sdb_reg_to_regnum
                        /*SDB_REG_TO_REGNUM ()*/);
d2130 4
a2133 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SIGTRAMP_END = <0x%08lx>\n",
                        (long) current_gdbarch->sigtramp_end
                        /*SIGTRAMP_END ()*/);
d2149 4
a2152 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SIGTRAMP_START = <0x%08lx>\n",
                        (long) current_gdbarch->sigtramp_start
                        /*SIGTRAMP_START ()*/);
d2159 4
a2162 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SKIP_PROLOGUE = <0x%08lx>\n",
                        (long) current_gdbarch->skip_prologue
                        /*SKIP_PROLOGUE ()*/);
d2169 4
a2172 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SKIP_TRAMPOLINE_CODE = <0x%08lx>\n",
                        (long) current_gdbarch->skip_trampoline_code
                        /*SKIP_TRAMPOLINE_CODE ()*/);
d2179 4
a2182 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SMASH_TEXT_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->smash_text_address
                        /*SMASH_TEXT_ADDRESS ()*/);
a2193 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d2198 4
a2201 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SOFTWARE_SINGLE_STEP = <0x%08lx>\n",
                        (long) current_gdbarch->software_single_step
                        /*SOFTWARE_SINGLE_STEP ()*/);
d2216 4
a2219 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STAB_REG_TO_REGNUM = <0x%08lx>\n",
                        (long) current_gdbarch->stab_reg_to_regnum
                        /*STAB_REG_TO_REGNUM ()*/);
d2235 4
a2238 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STACK_ALIGN = <0x%08lx>\n",
                        (long) current_gdbarch->stack_align
                        /*STACK_ALIGN ()*/);
a2240 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d2245 4
a2248 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_RETURN_VALUE = <0x%08lx>\n",
                        (long) current_gdbarch->store_return_value
                        /*STORE_RETURN_VALUE ()*/);
d2376 4
a2379 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_PRINT_INSN = <0x%08lx>\n",
                        (long) current_gdbarch->print_insn
                        /*TARGET_PRINT_INSN ()*/);
d2403 4
a2406 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_READ_PC = <0x%08lx>\n",
                        (long) current_gdbarch->read_pc
                        /*TARGET_READ_PC ()*/);
d2422 4
a2425 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_READ_SP = <0x%08lx>\n",
                        (long) current_gdbarch->read_sp
                        /*TARGET_READ_SP ()*/);
a2435 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d2440 4
a2443 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_VIRTUAL_FRAME_POINTER = <0x%08lx>\n",
                        (long) current_gdbarch->virtual_frame_pointer
                        /*TARGET_VIRTUAL_FRAME_POINTER ()*/);
a2445 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d2450 4
d2455 18
a2472 30
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_PC = <0x%08lx>\n",
                        (long) current_gdbarch->write_pc
                        /*TARGET_WRITE_PC ()*/);
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                        gdbarch_unwind_dummy_id_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_dummy_id = 0x%08lx\n",
                        (long) current_gdbarch->unwind_dummy_id);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                        gdbarch_unwind_pc_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_pc = 0x%08lx\n",
                        (long) current_gdbarch->unwind_pc);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_sp_p() = %d\n",
                        gdbarch_unwind_sp_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_sp = 0x%08lx\n",
                        (long) current_gdbarch->unwind_sp);
d2478 4
a2481 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: USE_STRUCT_CONVENTION = <0x%08lx>\n",
                        (long) current_gdbarch->use_struct_convention
                        /*USE_STRUCT_CONVENTION ()*/);
a2483 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d2488 4
a2491 6
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: VALUE_TO_REGISTER = <0x%08lx>\n",
                        (long) current_gdbarch->value_to_register
                        /*VALUE_TO_REGISTER ()*/);
d5630 9
a5638 1
  if (GDB_MULTI_ARCH)
d5640 11
a5650 24
      /* Accumulate a list of names based on the registed list of
         architectures. */
      enum bfd_architecture a;
      int nr_arches = 0;
      const char **arches = NULL;
      struct gdbarch_registration *rego;
      for (rego = gdbarch_registry;
	   rego != NULL;
	   rego = rego->next)
	{
	  const struct bfd_arch_info *ap;
	  ap = bfd_lookup_arch (rego->bfd_architecture, 0);
	  if (ap == NULL)
	    internal_error (__FILE__, __LINE__,
                            "gdbarch_architecture_names: multi-arch unknown");
	  do
	    {
	      append_name (&arches, &nr_arches, ap->printable_name);
	      ap = ap->next;
	    }
	  while (ap != NULL);
	}
      append_name (&arches, &nr_arches, NULL);
      return arches;
d5652 2
a5653 4
  else
    /* Just return all the architectures that BFD knows.  Assume that
       the legacy architecture framework supports them. */
    return bfd_arch_list ();
a5693 6
  /* When non- multi-arch, install whatever target dump routine we've
     been provided - hopefully that routine has been written correctly
     and works regardless of multi-arch. */
  if (!GDB_MULTI_ARCH && dump_tdep != NULL
      && startup_gdbarch.dump_tdep == NULL)
    startup_gdbarch.dump_tdep = dump_tdep;
@


1.237
log
@2003-07-22  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.c Include "gdb_obstack.h".
	(struct gdbarch): Add an "obstack".
	(alloc_gdbarch_data): Allocate the gdbarch data using
	GDBARCH_OBSTACK_CALLOC.
	(free_gdbarch_data): Delete function.
	(gdbarch_obstack_zalloc): New function.
	(gdbarch_free): Free the obstack, do not call free_gdbarch_data.
	Assert that the architecture is not initialized.
	(gdbarch_alloc): Allocate an obstack, allocate the architecture
	vector from the obstack.
	(alloc_gdbarch_data, init_gdbarch_swap): Allocate memory using the
	architecture obstack.
	(GDBARCH_OBSTACK_CALLOC, GDBARCH_OBSTACK_ZALLOC): Define.
	(set_gdbarch_data): Assert that the data is not initialized.
	(struct gdbarch_data): Delete member "free".
	(register_gdbarch_data): Do not initialize "free".
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d5649 1
a5649 2
register_gdbarch_data (gdbarch_data_init_ftype *init,
                       gdbarch_data_free_ftype *free)
@


1.236
log
@2003-07-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DWARF2_BUILD_FRAME_INFO): Delete method.
	* gdbarch.h, gdbarch.c: Re-generate.
	* i386-tdep.c (i386_gdbarch_init): Do not set
	DWARF2_BUILD_FRAME_INFO.
	* elfread.c (elf_symfile_read): Call dwarf2_build_frame_info
	unconditionally.
	* alpha-tdep.c (alpha_dwarf2_init_abi): Do not set
	DWARF2_BUILD_FRAME_INFO.
@
text
@d70 1
a75 1
static void free_gdbarch_data (struct gdbarch *);
d95 4
d298 1
d485 7
a491 1
  struct gdbarch *current_gdbarch = XMALLOC (struct gdbarch);
d493 1
d581 11
d601 1
d603 4
a606 2
  free_gdbarch_data (arch);
  xfree (arch);
a5628 1
  gdbarch_data_free_ftype *free;
a5662 1
  (*curr)->data->free = free;
d5674 1
a5674 22
  gdbarch->data = xcalloc (gdbarch->nr_data, sizeof (void*));
}

static void
free_gdbarch_data (struct gdbarch *gdbarch)
{
  struct gdbarch_data_registration *rego;
  gdb_assert (gdbarch->data != NULL);
  for (rego = gdbarch_data_registry.registrations;
       rego != NULL;
       rego = rego->next)
    {
      struct gdbarch_data *data = rego->data;
      gdb_assert (data->index < gdbarch->nr_data);
      if (data->free != NULL && gdbarch->data[data->index] != NULL)
        {
          data->free (gdbarch, gdbarch->data[data->index]);
          gdbarch->data[data->index] = NULL;
        }
    }
  xfree (gdbarch->data);
  gdbarch->data = NULL;
a5676 1

d5686 1
a5686 5
  if (gdbarch->data[data->index] != NULL)
    {
      gdb_assert (data->free != NULL);
      data->free (gdbarch, gdbarch->data[data->index]);
    }
d5783 1
a5783 1
	  (*curr) = XMALLOC (struct gdbarch_swap);
d5785 1
a5785 1
	  (*curr)->swap = xmalloc (rego->sizeof_data);
@


1.235
log
@2003-07-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: When a variable, but not a function, compare against
	0.  Fix problem in previous patch.
	* gdbarch.c: Re-generate.
@
text
@a272 1
  gdbarch_dwarf2_build_frame_info_ftype *dwarf2_build_frame_info;
a438 1
  0,  /* dwarf2_build_frame_info */
a747 1
  /* Skip verify of dwarf2_build_frame_info, has predicate */
a1686 23
#ifdef DWARF2_BUILD_FRAME_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DWARF2_BUILD_FRAME_INFO_P()",
                      XSTRING (DWARF2_BUILD_FRAME_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DWARF2_BUILD_FRAME_INFO_P() = %d\n",
                      DWARF2_BUILD_FRAME_INFO_P ());
#endif
#ifdef DWARF2_BUILD_FRAME_INFO
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DWARF2_BUILD_FRAME_INFO(objfile)",
                      XSTRING (DWARF2_BUILD_FRAME_INFO (objfile)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DWARF2_BUILD_FRAME_INFO = <0x%08lx>\n",
                        (long) current_gdbarch->dwarf2_build_frame_info
                        /*DWARF2_BUILD_FRAME_INFO ()*/);
#endif
a5393 24
}

int
gdbarch_dwarf2_build_frame_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->dwarf2_build_frame_info != NULL;
}

void
gdbarch_dwarf2_build_frame_info (struct gdbarch *gdbarch, struct objfile *objfile)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->dwarf2_build_frame_info != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_dwarf2_build_frame_info called\n");
  gdbarch->dwarf2_build_frame_info (objfile);
}

void
set_gdbarch_dwarf2_build_frame_info (struct gdbarch *gdbarch,
                                     gdbarch_dwarf2_build_frame_info_ftype dwarf2_build_frame_info)
{
  gdbarch->dwarf2_build_frame_info = dwarf2_build_frame_info;
@


1.234
log
@2003-07-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Use gdb_assert instead of internal_error.  Compare
	functions against NULL, not 0.
	* gdbarch.c: Re-generate.
@
text
@d3425 1
a3425 1
  return gdbarch->deprecated_max_register_raw_size != NULL;
d3448 1
a3448 1
  return gdbarch->deprecated_max_register_virtual_size != NULL;
d3805 1
a3805 1
  return gdbarch->deprecated_call_dummy_stack_adjust != NULL;
@


1.233
log
@2003-07-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (REGISTER_NAME): Do not supply a default.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/sparc/tm-sparc.h (REGISTER_NAME): Define.
	(legacy_register_name): Declare.
	* config/sparc/tm-sp64.h (legacy_register_name): Declare.
	(REGISTER_NAME): Define.
	* sparc-tdep.c (legacy_register_name): New function.
	* config/pa/tm-hppa64.h (REGISTER_NAMES): Delete macro.
	(REGISTER_NAME): Define.
	(hppa64_register_name): Declare.
	* config/pa/tm-hppa.h (REGISTER_NAMES): Delete macro.
	* hppa-tdep.c (hppa_gdbarch_init): Set hppa_register_name.
	(hppa64_register_name): New function.
	(hppa_register_name): New function.
	* arch-utils.c (legacy_register_name): Delete.
	* arch-utils.h (legacy_register_name): Delete.
@
text
@d2881 2
a2882 3
  if (gdbarch->addr_bit == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_addr_bit invalid");
d2916 2
a2917 3
  if (gdbarch->char_signed == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_char_signed invalid");
d2934 1
a2934 1
  return gdbarch->read_pc != 0;
d2941 1
a2941 3
  if (gdbarch->read_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_read_pc invalid");
d2958 1
a2958 3
  if (gdbarch->write_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_write_pc invalid");
d2975 1
a2975 1
  return gdbarch->read_sp != 0;
d2982 1
a2982 3
  if (gdbarch->read_sp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_read_sp invalid");
d2999 1
a2999 3
  if (gdbarch->virtual_frame_pointer == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_virtual_frame_pointer invalid");
d3016 1
a3016 1
  return gdbarch->pseudo_register_read != 0;
d3023 1
a3023 3
  if (gdbarch->pseudo_register_read == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_pseudo_register_read invalid");
d3040 1
a3040 1
  return gdbarch->pseudo_register_write != 0;
d3047 1
a3047 3
  if (gdbarch->pseudo_register_write == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_pseudo_register_write invalid");
d3064 2
a3065 3
  if (gdbarch->num_regs == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_num_regs invalid");
d3184 1
a3184 3
  if (gdbarch->stab_reg_to_regnum == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_stab_reg_to_regnum invalid");
d3201 1
a3201 3
  if (gdbarch->ecoff_reg_to_regnum == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_ecoff_reg_to_regnum invalid");
d3218 1
a3218 3
  if (gdbarch->dwarf_reg_to_regnum == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_dwarf_reg_to_regnum invalid");
d3235 1
a3235 3
  if (gdbarch->sdb_reg_to_regnum == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_sdb_reg_to_regnum invalid");
d3252 1
a3252 3
  if (gdbarch->dwarf2_reg_to_regnum == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_dwarf2_reg_to_regnum invalid");
d3269 1
a3269 3
  if (gdbarch->register_name == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_name invalid");
d3286 1
a3286 1
  return gdbarch->register_type != 0;
d3293 1
a3293 3
  if (gdbarch->register_type == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_type invalid");
d3310 1
a3310 1
  return gdbarch->deprecated_register_virtual_type != 0;
d3317 1
a3317 3
  if (gdbarch->deprecated_register_virtual_type == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_virtual_type invalid");
d3357 2
a3358 4
  if (gdbarch->deprecated_register_byte == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_byte invalid");
  /* Ignore predicate (gdbarch->deprecated_register_byte != generic_register_byte).  */
d3382 2
a3383 4
  if (gdbarch->deprecated_register_raw_size == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_raw_size invalid");
  /* Ignore predicate (gdbarch->deprecated_register_raw_size != generic_register_size).  */
d3407 2
a3408 4
  if (gdbarch->deprecated_register_virtual_size == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_virtual_size invalid");
  /* Ignore predicate (gdbarch->deprecated_register_virtual_size != generic_register_size).  */
d3425 1
a3425 1
  return gdbarch->deprecated_max_register_raw_size != 0;
d3448 1
a3448 1
  return gdbarch->deprecated_max_register_virtual_size != 0;
d3471 1
a3471 1
  return gdbarch->unwind_dummy_id != 0;
d3478 1
a3478 3
  if (gdbarch->unwind_dummy_id == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_dummy_id invalid");
d3495 1
a3495 1
  return gdbarch->deprecated_save_dummy_frame_tos != 0;
d3502 1
a3502 3
  if (gdbarch->deprecated_save_dummy_frame_tos == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_save_dummy_frame_tos invalid");
d3536 1
a3536 1
  return gdbarch->deprecated_target_read_fp != 0;
d3543 1
a3543 3
  if (gdbarch->deprecated_target_read_fp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_target_read_fp invalid");
d3560 1
a3560 1
  return gdbarch->push_dummy_call != 0;
d3567 1
a3567 3
  if (gdbarch->push_dummy_call == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_push_dummy_call invalid");
d3584 1
a3584 1
  return gdbarch->deprecated_push_arguments != 0;
d3591 1
a3591 3
  if (gdbarch->deprecated_push_arguments == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_arguments invalid");
d3625 1
a3625 1
  return gdbarch->deprecated_push_return_address != 0;
d3632 1
a3632 3
  if (gdbarch->deprecated_push_return_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_return_address invalid");
d3649 1
a3649 1
  return gdbarch->deprecated_dummy_write_sp != 0;
d3656 1
a3656 3
  if (gdbarch->deprecated_dummy_write_sp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_dummy_write_sp invalid");
d3706 1
a3706 3
  if (gdbarch->call_dummy_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_address invalid");
d3805 1
a3805 1
  return gdbarch->deprecated_call_dummy_stack_adjust != 0;
d3828 1
a3828 1
  return gdbarch->deprecated_fix_call_dummy != 0;
d3835 1
a3835 3
  if (gdbarch->deprecated_fix_call_dummy == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_fix_call_dummy invalid");
d3852 1
a3852 1
  return gdbarch->push_dummy_code != 0;
d3859 1
a3859 3
  if (gdbarch->push_dummy_code == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_push_dummy_code invalid");
d3876 1
a3876 1
  return gdbarch->deprecated_push_dummy_frame != 0;
d3883 1
a3883 3
  if (gdbarch->deprecated_push_dummy_frame == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_dummy_frame invalid");
d3917 1
a3917 1
  return gdbarch->deprecated_do_registers_info != 0;
d3924 1
a3924 3
  if (gdbarch->deprecated_do_registers_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_do_registers_info invalid");
d3941 1
a3941 3
  if (gdbarch->print_registers_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_registers_info invalid");
d3958 1
a3958 1
  return gdbarch->print_float_info != 0;
d3965 1
a3965 3
  if (gdbarch->print_float_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_float_info invalid");
d3982 1
a3982 1
  return gdbarch->print_vector_info != 0;
d3989 1
a3989 3
  if (gdbarch->print_vector_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_vector_info invalid");
d4006 1
a4006 3
  if (gdbarch->register_sim_regno == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_sim_regno invalid");
d4023 1
a4023 1
  return gdbarch->register_bytes_ok != 0;
d4030 1
a4030 3
  if (gdbarch->register_bytes_ok == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_bytes_ok invalid");
d4047 1
a4047 3
  if (gdbarch->cannot_fetch_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_cannot_fetch_register invalid");
d4064 1
a4064 3
  if (gdbarch->cannot_store_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_cannot_store_register invalid");
d4081 1
a4081 1
  return gdbarch->get_longjmp_target != 0;
d4088 1
a4088 3
  if (gdbarch->get_longjmp_target == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_get_longjmp_target invalid");
d4112 2
a4113 4
  if (gdbarch->deprecated_pc_in_call_dummy == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_pc_in_call_dummy invalid");
  /* Ignore predicate (gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy).  */
d4130 1
a4130 1
  return gdbarch->deprecated_init_frame_pc_first != 0;
d4137 1
a4137 3
  if (gdbarch->deprecated_init_frame_pc_first == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_init_frame_pc_first invalid");
d4154 1
a4154 1
  return gdbarch->deprecated_init_frame_pc != 0;
d4161 1
a4161 3
  if (gdbarch->deprecated_init_frame_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_init_frame_pc invalid");
d4210 1
a4210 1
  return gdbarch->deprecated_get_saved_register != 0;
d4217 1
a4217 3
  if (gdbarch->deprecated_get_saved_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_get_saved_register invalid");
d4234 1
a4234 3
  if (gdbarch->deprecated_register_convertible == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_convertible invalid");
d4251 1
a4251 3
  if (gdbarch->deprecated_register_convert_to_virtual == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_convert_to_virtual invalid");
d4268 1
a4268 3
  if (gdbarch->deprecated_register_convert_to_raw == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_convert_to_raw invalid");
d4285 1
a4285 3
  if (gdbarch->convert_register_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_convert_register_p invalid");
d4302 1
a4302 3
  if (gdbarch->register_to_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_to_value invalid");
d4319 1
a4319 3
  if (gdbarch->value_to_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_value_to_register invalid");
d4336 1
a4336 3
  if (gdbarch->pointer_to_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_pointer_to_address invalid");
d4353 1
a4353 3
  if (gdbarch->address_to_pointer == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_to_pointer invalid");
d4370 1
a4370 1
  return gdbarch->integer_to_address != 0;
d4377 1
a4377 3
  if (gdbarch->integer_to_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_integer_to_address invalid");
d4394 1
a4394 3
  if (gdbarch->return_value_on_stack == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_return_value_on_stack invalid");
d4411 1
a4411 1
  return gdbarch->deprecated_pop_frame != 0;
d4418 1
a4418 3
  if (gdbarch->deprecated_pop_frame == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_pop_frame invalid");
d4435 1
a4435 1
  return gdbarch->deprecated_store_struct_return != 0;
d4442 1
a4442 3
  if (gdbarch->deprecated_store_struct_return == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_store_struct_return invalid");
d4459 1
a4459 3
  if (gdbarch->extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_extract_return_value invalid");
d4476 1
a4476 3
  if (gdbarch->store_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_store_return_value invalid");
d4493 1
a4493 3
  if (gdbarch->deprecated_extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_extract_return_value invalid");
d4510 1
a4510 3
  if (gdbarch->deprecated_store_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_store_return_value invalid");
d4527 1
a4527 1
  return gdbarch->extract_struct_value_address != 0;
d4534 1
a4534 3
  if (gdbarch->extract_struct_value_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_extract_struct_value_address invalid");
d4551 1
a4551 1
  return gdbarch->deprecated_extract_struct_value_address != 0;
d4558 1
a4558 3
  if (gdbarch->deprecated_extract_struct_value_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_extract_struct_value_address invalid");
d4575 1
a4575 3
  if (gdbarch->use_struct_convention == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_use_struct_convention invalid");
d4592 1
a4592 1
  return gdbarch->deprecated_frame_init_saved_regs != 0;
d4599 1
a4599 3
  if (gdbarch->deprecated_frame_init_saved_regs == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_init_saved_regs invalid");
d4616 1
a4616 1
  return gdbarch->deprecated_init_extra_frame_info != 0;
d4623 1
a4623 3
  if (gdbarch->deprecated_init_extra_frame_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_init_extra_frame_info invalid");
d4640 1
a4640 3
  if (gdbarch->skip_prologue == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_skip_prologue invalid");
d4657 1
a4657 3
  if (gdbarch->prologue_frameless_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_prologue_frameless_p invalid");
d4674 1
a4674 3
  if (gdbarch->inner_than == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_inner_than invalid");
d4691 1
a4691 3
  if (gdbarch->breakpoint_from_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_breakpoint_from_pc invalid");
d4708 1
a4708 3
  if (gdbarch->memory_insert_breakpoint == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_memory_insert_breakpoint invalid");
d4725 1
a4725 3
  if (gdbarch->memory_remove_breakpoint == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_memory_remove_breakpoint invalid");
d4742 2
a4743 3
  if (gdbarch->decr_pc_after_break == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_decr_pc_after_break invalid");
d4760 2
a4761 3
  if (gdbarch->function_start_offset == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_function_start_offset invalid");
d4778 1
a4778 3
  if (gdbarch->remote_translate_xfer_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_remote_translate_xfer_address invalid");
d4795 2
a4796 3
  if (gdbarch->frame_args_skip == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_frame_args_skip invalid");
d4813 1
a4813 3
  if (gdbarch->frameless_function_invocation == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_frameless_function_invocation invalid");
d4830 1
a4830 1
  return gdbarch->deprecated_frame_chain != 0;
d4837 1
a4837 3
  if (gdbarch->deprecated_frame_chain == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_chain invalid");
d4854 1
a4854 1
  return gdbarch->deprecated_frame_chain_valid != 0;
d4861 1
a4861 3
  if (gdbarch->deprecated_frame_chain_valid == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_chain_valid invalid");
d4878 1
a4878 1
  return gdbarch->deprecated_frame_saved_pc != 0;
d4885 1
a4885 3
  if (gdbarch->deprecated_frame_saved_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_saved_pc invalid");
d4902 1
a4902 1
  return gdbarch->unwind_pc != 0;
d4909 1
a4909 3
  if (gdbarch->unwind_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_pc invalid");
d4926 1
a4926 1
  return gdbarch->unwind_sp != 0;
d4933 1
a4933 3
  if (gdbarch->unwind_sp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_sp invalid");
d4957 2
a4958 4
  if (gdbarch->deprecated_frame_args_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_args_address invalid");
  /* Ignore predicate (gdbarch->deprecated_frame_args_address != get_frame_base).  */
d4982 2
a4983 4
  if (gdbarch->deprecated_frame_locals_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_locals_address invalid");
  /* Ignore predicate (gdbarch->deprecated_frame_locals_address != get_frame_base).  */
d5000 1
a5000 1
  return gdbarch->deprecated_saved_pc_after_call != 0;
d5007 1
a5007 3
  if (gdbarch->deprecated_saved_pc_after_call == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_saved_pc_after_call invalid");
d5024 1
a5024 1
  return gdbarch->frame_num_args != 0;
d5031 1
a5031 3
  if (gdbarch->frame_num_args == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_frame_num_args invalid");
d5048 1
a5048 1
  return gdbarch->stack_align != 0;
d5055 1
a5055 3
  if (gdbarch->stack_align == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_stack_align invalid");
d5072 1
a5072 1
  return gdbarch->frame_align != 0;
d5079 1
a5079 3
  if (gdbarch->frame_align == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_frame_align invalid");
d5096 1
a5096 1
  return gdbarch->reg_struct_has_addr != 0;
d5103 1
a5103 3
  if (gdbarch->reg_struct_has_addr == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_reg_struct_has_addr invalid");
d5184 1
a5184 3
  if (gdbarch->convert_from_func_ptr_addr == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_convert_from_func_ptr_addr invalid");
d5201 1
a5201 3
  if (gdbarch->addr_bits_remove == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_addr_bits_remove invalid");
d5218 1
a5218 3
  if (gdbarch->smash_text_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_smash_text_address invalid");
d5235 1
a5235 1
  return gdbarch->software_single_step != 0;
d5242 1
a5242 3
  if (gdbarch->software_single_step == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_software_single_step invalid");
d5259 1
a5259 3
  if (gdbarch->print_insn == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_insn invalid");
d5276 1
a5276 3
  if (gdbarch->skip_trampoline_code == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_skip_trampoline_code invalid");
d5293 1
a5293 3
  if (gdbarch->in_solib_call_trampoline == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_in_solib_call_trampoline invalid");
d5310 1
a5310 3
  if (gdbarch->in_solib_return_trampoline == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_in_solib_return_trampoline invalid");
d5327 1
a5327 3
  if (gdbarch->pc_in_sigtramp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_pc_in_sigtramp invalid");
d5344 1
a5344 1
  return gdbarch->sigtramp_start != 0;
d5351 1
a5351 3
  if (gdbarch->sigtramp_start == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_sigtramp_start invalid");
d5368 1
a5368 1
  return gdbarch->sigtramp_end != 0;
d5375 1
a5375 3
  if (gdbarch->sigtramp_end == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_sigtramp_end invalid");
d5392 1
a5392 3
  if (gdbarch->in_function_epilogue_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_in_function_epilogue_p invalid");
d5409 1
a5409 3
  if (gdbarch->construct_inferior_arguments == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_construct_inferior_arguments invalid");
d5426 1
a5426 1
  return gdbarch->dwarf2_build_frame_info != 0;
d5433 1
a5433 3
  if (gdbarch->dwarf2_build_frame_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_dwarf2_build_frame_info invalid");
d5450 1
a5450 3
  if (gdbarch->elf_make_msymbol_special == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_elf_make_msymbol_special invalid");
d5467 1
a5467 3
  if (gdbarch->coff_make_msymbol_special == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_coff_make_msymbol_special invalid");
d5535 1
a5535 1
  return gdbarch->address_class_type_flags != 0;
d5542 1
a5542 3
  if (gdbarch->address_class_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags invalid");
d5559 1
a5559 1
  return gdbarch->address_class_type_flags_to_name != 0;
d5566 1
a5566 3
  if (gdbarch->address_class_type_flags_to_name == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags_to_name invalid");
d5583 1
a5583 1
  return gdbarch->address_class_name_to_type_flags != 0;
d5590 1
a5590 3
  if (gdbarch->address_class_name_to_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_name_to_type_flags invalid");
d5607 1
a5607 3
  if (gdbarch->register_reggroup_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_reggroup_p invalid");
d5624 1
a5624 1
  return gdbarch->fetch_pointer_argument != 0;
d5631 1
a5631 3
  if (gdbarch->fetch_pointer_argument == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_fetch_pointer_argument invalid");
@


1.232
log
@2003-07-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (REGISTER_RAW_SIZE, REGISTER_VIRTUAL_SIZE): Add
	predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (init_regcache_descr): Use legacy code when either
	REGISTER_BYTE or REGISTER_RAW_SIZE is set.
@
text
@a516 1
  current_gdbarch->register_name = legacy_register_name;
a638 1
  /* Skip verify of register_name, invalid_p == 0 */
@


1.231
log
@2003-06-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FRAME_ARGS_ADDRESS): Add predicate.  Deprecate.
	(FRAME_LOCALS_ADDRESS): Add predicate.  Deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame-base.c (default_frame_args_address): Update.  Use
	default_frame_base_address when DEPRECATED_FRAME_ARGS_ADDRESS is
	not available.
	(default_frame_locals_address): Ditto for
	DEPRECATED_FRAME_LOCALS_ADDRESS.
	* vax-tdep.c (vax_sigtramp_saved_pc): Update.
	(vax_frame_num_args): Update.
	(vax_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* symtab.h (address_class): Update comments.
	* ns32k-tdep.c (ns32k_sigtramp_saved_pc): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_FRAME_ARGS_ADDRESS): Update.
	(DEPRECATED_FRAME_LOCALS_ADDRESS): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_FRAME_ARGS_ADDRESS): Update.
	(DEPRECATED_FRAME_LOCALS_ADDRESS): Update.
	(DEPRECATED_FRAME_LOCALS_ADDRESS): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_FRAME_ARGS_ADDRESS): Update.
	* alpha-mdebug-tdep.c: Update.
	* ada-lang.c (add_symbols_from_enclosing_procs): Update.
@
text
@d644 2
a645 2
  /* Skip verify of deprecated_register_raw_size, invalid_p == 0 */
  /* Skip verify of deprecated_register_virtual_size, invalid_p == 0 */
d2150 9
d2203 9
d3407 7
d3420 1
d3434 7
d3447 1
@


1.230
log
@	* arch-utils.c (default_prepare_to_proceed): Remove.
	(generic_prepare_to_proceed): Remove.
	* arch-utils.h (default_prepare_to_proceed): Remove prototype.
	(generic_prepare_to_proceed): Remove prototype.
	* gdbarch.sh (PREPARE_TO_PROCEED): Remove.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* hppa-tdep.c (hppa_prepare_to_proceed): Remove dangling prototype.
	* hppah-nat.c (hppa_switched_threads): Remove.
	* infrun.c (prepare_to_proceed): New static function, copied from
	generic_prepare_to_proceed.  Remove select_it argument.
	(proceed): Call prepare_to_proceed.
	* infttrace.c (old_gdb_pid, reported_pid, reported_bpt): Remove
	variables.
	(ptrace_wait): Don't set the removed variables.
	(hppa_switched_threads): Remove.
	* lin-lwp.c (lin_lwp_prepare_to_proceed): Remove.
	* config/nm-linux.h (PREPARE_TO_PROCEED): Don't define.
	(lin_lwp_prepare_to_proceed): Remove prototype.
	* config/i386/nm-x86-64linux.h (PREPARE_TO_PROCEED): Don't undefine.
	* config/pa/nm-hppah.h (PREPARE_TO_PROCEED): Don't define.
@
text
@d249 2
a250 2
  gdbarch_frame_args_address_ftype *frame_args_address;
  gdbarch_frame_locals_address_ftype *frame_locals_address;
d416 2
a417 2
  0,  /* frame_args_address */
  0,  /* frame_locals_address */
d550 2
a551 2
  current_gdbarch->frame_args_address = get_frame_base;
  current_gdbarch->frame_locals_address = get_frame_base;
d726 2
a727 2
  /* Skip verify of frame_args_address, invalid_p == 0 */
  /* Skip verify of frame_locals_address, invalid_p == 0 */
d1172 20
d1255 20
a1834 11
#ifdef FRAME_ARGS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_ARGS_ADDRESS(fi)",
                      XSTRING (FRAME_ARGS_ADDRESS (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_ARGS_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->frame_args_address
                        /*FRAME_ARGS_ADDRESS ()*/);
#endif
a1842 11
#ifdef FRAME_LOCALS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_LOCALS_ADDRESS(fi)",
                      XSTRING (FRAME_LOCALS_ADDRESS (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_LOCALS_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->frame_locals_address
                        /*FRAME_LOCALS_ADDRESS ()*/);
#endif
d5070 7
d5078 1
a5078 1
gdbarch_frame_args_address (struct gdbarch *gdbarch, struct frame_info *fi)
d5081 1
a5081 1
  if (gdbarch->frame_args_address == 0)
d5083 2
a5084 1
                    "gdbarch: gdbarch_frame_args_address invalid");
d5086 2
a5087 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_args_address called\n");
  return gdbarch->frame_args_address (fi);
d5091 2
a5092 2
set_gdbarch_frame_args_address (struct gdbarch *gdbarch,
                                gdbarch_frame_args_address_ftype frame_args_address)
d5094 8
a5101 1
  gdbarch->frame_args_address = frame_args_address;
d5105 1
a5105 1
gdbarch_frame_locals_address (struct gdbarch *gdbarch, struct frame_info *fi)
d5108 1
a5108 1
  if (gdbarch->frame_locals_address == 0)
d5110 2
a5111 1
                    "gdbarch: gdbarch_frame_locals_address invalid");
d5113 2
a5114 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_locals_address called\n");
  return gdbarch->frame_locals_address (fi);
d5118 2
a5119 2
set_gdbarch_frame_locals_address (struct gdbarch *gdbarch,
                                  gdbarch_frame_locals_address_ftype frame_locals_address)
d5121 1
a5121 1
  gdbarch->frame_locals_address = frame_locals_address;
@


1.230.2.1
log
@2003-07-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (REGISTER_RAW_SIZE, REGISTER_VIRTUAL_SIZE): Add
	predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (init_regcache_descr): Use legacy code when either
	REGISTER_BYTE or REGISTER_RAW_SIZE is set.
@
text
@d644 2
a645 2
  /* Skip verify of deprecated_register_raw_size, has predicate */
  /* Skip verify of deprecated_register_virtual_size, has predicate */
a2131 9
#ifdef REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_RAW_SIZE_P()",
                      XSTRING (REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_RAW_SIZE_P() = %d\n",
                      REGISTER_RAW_SIZE_P ());
#endif
a2175 9
#ifdef REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      REGISTER_VIRTUAL_SIZE_P ());
#endif
a3370 7
gdbarch_deprecated_register_raw_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_raw_size != generic_register_size;
}

int
a3376 1
  /* Ignore predicate (gdbarch->deprecated_register_raw_size != generic_register_size).  */
a3389 7
gdbarch_deprecated_register_virtual_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_virtual_size != generic_register_size;
}

int
a3395 1
  /* Ignore predicate (gdbarch->deprecated_register_virtual_size != generic_register_size).  */
@


1.230.2.2
log
@Index: ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FRAME_RED_ZONE_SIZE): New architecture method.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Adjust the SP by
	frame_red_zone_size before allocating any stack space.
	* rs6000-tdep.c (rs6000_gdbarch_init): Set "frame_red_zone_size".
	* x86-64-tdep.c (x86_64_frame_align): New function.
	(x86_64_init_abi): Set "frame_red_zone_size" and "frame_align".

	* x86-64-tdep.c (x86_64_push_arguments): Revert 2003-08-07 change.
	Remove code adjusting SP so that it skips over the Red Zone.

Index: doc/ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	"frame_red_zone_size".
@
text
@a255 1
  int frame_red_zone_size;
a422 1
  0,  /* frame_red_zone_size */
a1844 8
#ifdef FRAME_RED_ZONE_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE # %s\n",
                      XSTRING (FRAME_RED_ZONE_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE = %d\n",
                      FRAME_RED_ZONE_SIZE);
#endif
a5251 16
}

int
gdbarch_frame_red_zone_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_red_zone_size called\n");
  return gdbarch->frame_red_zone_size;
}

void
set_gdbarch_frame_red_zone_size (struct gdbarch *gdbarch,
                                 int frame_red_zone_size)
{
  gdbarch->frame_red_zone_size = frame_red_zone_size;
@


1.229
log
@2003-06-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (SAVE_DUMMY_FRAME_TOS): Deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* infcall.c (call_function_by_hand): Update.
	* ia64-tdep.c (ia64_push_arguments): Update comment.
	* frame.c (legacy_get_prev_frame): Do not assume
	SAVE_DUMMY_FRAME_TOS_P.
	* dummy-frame.c (find_dummy_frame): Update comment.
@
text
@a239 1
  gdbarch_prepare_to_proceed_ftype *prepare_to_proceed;
a406 1
  0,  /* prepare_to_proceed */
a545 1
  current_gdbarch->prepare_to_proceed = default_prepare_to_proceed;
a712 1
  /* Skip verify of prepare_to_proceed, invalid_p == 0 */
a2025 11
#ifdef PREPARE_TO_PROCEED
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PREPARE_TO_PROCEED(select_it)",
                      XSTRING (PREPARE_TO_PROCEED (select_it)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PREPARE_TO_PROCEED = <0x%08lx>\n",
                        (long) current_gdbarch->prepare_to_proceed
                        /*PREPARE_TO_PROCEED ()*/);
#endif
a4843 19
}

int
gdbarch_prepare_to_proceed (struct gdbarch *gdbarch, int select_it)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->prepare_to_proceed == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_prepare_to_proceed invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_prepare_to_proceed called\n");
  return gdbarch->prepare_to_proceed (select_it);
}

void
set_gdbarch_prepare_to_proceed (struct gdbarch *gdbarch,
                                gdbarch_prepare_to_proceed_ftype prepare_to_proceed)
{
  gdbarch->prepare_to_proceed = prepare_to_proceed;
@


1.228
log
@2003-06-14  Andrew Cagney  <cagney@@redhat.com>
            Mark Kettenis  <kettenis@@gnu.org>

	* gdbarch.sh (CONVERT_REGISTER_P): Add "type" parameter.
	(REGISTER_TO_VALUE, VALUE_TO_REGISTER): Replace raw buffer
	parameter with "frame".
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.h (put_frame_register): Declare.
	* frame.c (put_frame_register): New function.
	* arch-utils.c (legacy_convert_register_p): Add "type" parameter.
	(legacy_register_to_value): Rewrite, use "frame" to get the
	register value.
	(legacy_value_to_register): Rewrite, use "frame" to find the
	register's location before storing.
	* arch-utils.h (legacy_convert_register_p): Update.
	(legacy_register_to_value, legacy_value_to_register): Update.
	* findvar.c (value_from_register): Rewrite, eliminate use of
	REGISTER_CONVERT_TO_TYPE, pass "type" to CONVERT_REGISTER_P, pass
	"frame" to REGISTER_TO_VALUE.
	* valops.c (value_assign): Move the CONVERT_REGISTER code to the
	lval_reg_frame_relative + lval_register branch of the switch.  Do
	not use REGISTER_CONVERT_FROM_TYPE.  Use put_frame_register.
	* i386-tdep.c (I386_EBX_REGNUM, I386_ECX_REGNUM, I386_ESI_REGNUM,
	I386_EDI_REGNUM): New defines.
	(i386_next_regnum, i386_convert_register_p,
	i386_register_to_value, i386_value_to_register): New functions.
	(i386_register_convertible, i386_register_convert_to_virtual,
	i386_convert_to_raw): Remove functions.
	(i386_gdbarch_init): Set convert_register_p, register_to_value and
	value_to_register instead of register_convertible,
	register_convert_to_virtual and register_convert_to_raw.
	* mips-tdep.c (mips_convert_register_p): New function.
	(mips_value_to_register): Replace mips_register_convert_from_type.
	(mips_register_to_value): Replace mips_register_convert_to_type.
	(mips_gdbarch_init): Set conver_register_p, value_to_register and
	register_to_value.
	* alpha-tdep.c (alpha_convert_register_p): Update.
	(alpha_value_to_register): Update, store the register.
	(alpha_register_to_value): Update, fetch the register.
@
text
@d176 1
a176 1
  gdbarch_save_dummy_frame_tos_ftype *save_dummy_frame_tos;
d344 1
a344 1
  0,  /* save_dummy_frame_tos */
d652 1
a652 1
  /* Skip verify of save_dummy_frame_tos, has predicate */
d1560 23
a2256 23
#ifdef SAVE_DUMMY_FRAME_TOS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVE_DUMMY_FRAME_TOS_P()",
                      XSTRING (SAVE_DUMMY_FRAME_TOS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SAVE_DUMMY_FRAME_TOS_P() = %d\n",
                      SAVE_DUMMY_FRAME_TOS_P ());
#endif
#ifdef SAVE_DUMMY_FRAME_TOS
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVE_DUMMY_FRAME_TOS(sp)",
                      XSTRING (SAVE_DUMMY_FRAME_TOS (sp)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
                        (long) current_gdbarch->save_dummy_frame_tos
                        /*SAVE_DUMMY_FRAME_TOS ()*/);
#endif
d3496 1
a3496 1
gdbarch_save_dummy_frame_tos_p (struct gdbarch *gdbarch)
d3499 1
a3499 1
  return gdbarch->save_dummy_frame_tos != 0;
d3503 1
a3503 1
gdbarch_save_dummy_frame_tos (struct gdbarch *gdbarch, CORE_ADDR sp)
d3506 1
a3506 1
  if (gdbarch->save_dummy_frame_tos == 0)
d3508 1
a3508 1
                    "gdbarch: gdbarch_save_dummy_frame_tos invalid");
d3510 2
a3511 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_save_dummy_frame_tos called\n");
  gdbarch->save_dummy_frame_tos (sp);
d3515 2
a3516 2
set_gdbarch_save_dummy_frame_tos (struct gdbarch *gdbarch,
                                  gdbarch_save_dummy_frame_tos_ftype save_dummy_frame_tos)
d3518 1
a3518 1
  gdbarch->save_dummy_frame_tos = save_dummy_frame_tos;
@


1.227
log
@2003-06-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Document what PUSH_DUMMY_CALL replaces.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d992 2
a993 2
                      "CONVERT_REGISTER_P(regnum)",
                      XSTRING (CONVERT_REGISTER_P (regnum)));
d2151 2
a2152 2
                      "REGISTER_TO_VALUE(regnum, type, from, to)",
                      XSTRING (REGISTER_TO_VALUE (regnum, type, from, to)));
d2673 2
a2674 2
                      "VALUE_TO_REGISTER(type, regnum, from, to)",
                      XSTRING (VALUE_TO_REGISTER (type, regnum, from, to)));
d4338 1
a4338 1
gdbarch_convert_register_p (struct gdbarch *gdbarch, int regnum)
d4346 1
a4346 1
  return gdbarch->convert_register_p (regnum);
d4357 1
a4357 1
gdbarch_register_to_value (struct gdbarch *gdbarch, int regnum, struct type *type, char *from, char *to)
d4365 1
a4365 1
  gdbarch->register_to_value (regnum, type, from, to);
d4376 1
a4376 1
gdbarch_value_to_register (struct gdbarch *gdbarch, struct type *type, int regnum, char *from, char *to)
d4384 1
a4384 1
  gdbarch->value_to_register (type, regnum, from, to);
@


1.226
log
@2003-06-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Document what UNWIND_DUMMY_ID replaces.  Clarify
	when deprecated REGISTER macros can be deleted.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@a150 1
  gdbarch_deprecated_dummy_write_sp_ftype *deprecated_dummy_write_sp;
a166 1
  int deprecated_register_size;
d179 2
a180 9
  gdbarch_deprecated_do_registers_info_ftype *deprecated_do_registers_info;
  gdbarch_print_registers_info_ftype *print_registers_info;
  gdbarch_print_float_info_ftype *print_float_info;
  gdbarch_print_vector_info_ftype *print_vector_info;
  gdbarch_register_sim_regno_ftype *register_sim_regno;
  gdbarch_register_bytes_ok_ftype *register_bytes_ok;
  gdbarch_cannot_fetch_register_ftype *cannot_fetch_register;
  gdbarch_cannot_store_register_ftype *cannot_store_register;
  gdbarch_get_longjmp_target_ftype *get_longjmp_target;
d182 3
a189 1
  gdbarch_deprecated_pc_in_call_dummy_ftype *deprecated_pc_in_call_dummy;
d195 12
a221 4
  gdbarch_deprecated_push_arguments_ftype *deprecated_push_arguments;
  gdbarch_push_dummy_call_ftype *push_dummy_call;
  gdbarch_deprecated_push_dummy_frame_ftype *deprecated_push_dummy_frame;
  gdbarch_deprecated_push_return_address_ftype *deprecated_push_return_address;
a255 1
  int deprecated_extra_stack_alignment_needed;
a318 1
  0,  /* deprecated_dummy_write_sp */
a334 1
  0,  /* deprecated_register_size */
d347 2
a348 9
  0,  /* deprecated_do_registers_info */
  default_print_registers_info,  /* print_registers_info */
  0,  /* print_float_info */
  0,  /* print_vector_info */
  0,  /* register_sim_regno */
  0,  /* register_bytes_ok */
  0,  /* cannot_fetch_register */
  0,  /* cannot_store_register */
  0,  /* get_longjmp_target */
d350 3
a357 1
  generic_pc_in_call_dummy,  /* deprecated_pc_in_call_dummy */
d363 12
a389 4
  0,  /* deprecated_push_arguments */
  0,  /* push_dummy_call */
  0,  /* deprecated_push_dummy_frame */
  0,  /* deprecated_push_return_address */
a423 1
  0,  /* deprecated_extra_stack_alignment_needed */
d524 5
a532 3
  current_gdbarch->deprecated_use_generic_dummy_frames = 1;
  current_gdbarch->call_dummy_location = AT_ENTRY_POINT;
  current_gdbarch->call_dummy_address = entry_point_address;
a533 2
  current_gdbarch->deprecated_call_dummy_words = legacy_call_dummy_words;
  current_gdbarch->deprecated_sizeof_call_dummy_words = legacy_sizeof_call_dummy_words;
a625 1
  /* Skip verify of deprecated_dummy_write_sp, has predicate */
d655 14
a677 3
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
  /* Skip verify of call_dummy_location, invalid_p == 0 */
  /* Skip verify of call_dummy_address, invalid_p == 0 */
a678 5
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_call_dummy_stack_adjust, has predicate */
  /* Skip verify of deprecated_fix_call_dummy, has predicate */
  /* Skip verify of push_dummy_code, has predicate */
a691 4
  /* Skip verify of deprecated_push_arguments, has predicate */
  /* Skip verify of push_dummy_call, has predicate */
  /* Skip verify of deprecated_push_dummy_frame, has predicate */
  /* Skip verify of deprecated_push_return_address, has predicate */
a735 1
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
a2983 26
int
gdbarch_deprecated_dummy_write_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_dummy_write_sp != 0;
}

void
gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_dummy_write_sp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_dummy_write_sp invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_dummy_write_sp called\n");
  gdbarch->deprecated_dummy_write_sp (val);
}

void
set_gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_dummy_write_sp_ftype deprecated_dummy_write_sp)
{
  gdbarch->deprecated_dummy_write_sp = deprecated_dummy_write_sp;
}

a3290 16
gdbarch_deprecated_register_size (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_size called\n");
  return gdbarch->deprecated_register_size;
}

void
set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch,
                                      int deprecated_register_size)
{
  gdbarch->deprecated_register_size = deprecated_register_size;
}

int
d3565 1
a3565 1
gdbarch_deprecated_do_registers_info_p (struct gdbarch *gdbarch)
d3568 1
a3568 1
  return gdbarch->deprecated_do_registers_info != 0;
d3571 2
a3572 2
void
gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch, int reg_nr, int fpregs)
d3575 1
a3575 1
  if (gdbarch->deprecated_do_registers_info == 0)
d3577 1
a3577 1
                    "gdbarch: gdbarch_deprecated_do_registers_info invalid");
d3579 2
a3580 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_do_registers_info called\n");
  gdbarch->deprecated_do_registers_info (reg_nr, fpregs);
d3584 8
a3591 2
set_gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_do_registers_info_ftype deprecated_do_registers_info)
d3593 2
a3594 1
  gdbarch->deprecated_do_registers_info = deprecated_do_registers_info;
d3597 2
a3598 2
void
gdbarch_print_registers_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, int regnum, int all)
d3601 1
a3601 1
  if (gdbarch->print_registers_info == 0)
d3603 1
a3603 1
                    "gdbarch: gdbarch_print_registers_info invalid");
d3605 2
a3606 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_registers_info called\n");
  gdbarch->print_registers_info (gdbarch, file, frame, regnum, all);
d3610 2
a3611 2
set_gdbarch_print_registers_info (struct gdbarch *gdbarch,
                                  gdbarch_print_registers_info_ftype print_registers_info)
d3613 1
a3613 1
  gdbarch->print_registers_info = print_registers_info;
d3617 1
a3617 1
gdbarch_print_float_info_p (struct gdbarch *gdbarch)
d3620 4
a3623 1
  return gdbarch->print_float_info != 0;
d3627 15
a3641 1
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
d3644 1
a3644 1
  if (gdbarch->print_float_info == 0)
d3646 1
a3646 1
                    "gdbarch: gdbarch_print_float_info invalid");
d3648 2
a3649 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_float_info called\n");
  gdbarch->print_float_info (gdbarch, file, frame, args);
d3653 2
a3654 2
set_gdbarch_print_float_info (struct gdbarch *gdbarch,
                              gdbarch_print_float_info_ftype print_float_info)
d3656 1
a3656 1
  gdbarch->print_float_info = print_float_info;
d3660 1
a3660 1
gdbarch_print_vector_info_p (struct gdbarch *gdbarch)
d3663 1
a3663 1
  return gdbarch->print_vector_info != 0;
d3667 1
a3667 1
gdbarch_print_vector_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
d3670 1
a3670 1
  if (gdbarch->print_vector_info == 0)
d3672 1
a3672 1
                    "gdbarch: gdbarch_print_vector_info invalid");
d3674 2
a3675 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_vector_info called\n");
  gdbarch->print_vector_info (gdbarch, file, frame, args);
d3679 2
a3680 2
set_gdbarch_print_vector_info (struct gdbarch *gdbarch,
                               gdbarch_print_vector_info_ftype print_vector_info)
d3682 1
a3682 1
  gdbarch->print_vector_info = print_vector_info;
d3686 1
a3686 1
gdbarch_register_sim_regno (struct gdbarch *gdbarch, int reg_nr)
d3689 34
a3722 1
  if (gdbarch->register_sim_regno == 0)
d3724 83
a3806 1
                    "gdbarch: gdbarch_register_sim_regno invalid");
d3808 2
a3809 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_sim_regno called\n");
  return gdbarch->register_sim_regno (reg_nr);
d3813 2
a3814 2
set_gdbarch_register_sim_regno (struct gdbarch *gdbarch,
                                gdbarch_register_sim_regno_ftype register_sim_regno)
d3816 1
a3816 1
  gdbarch->register_sim_regno = register_sim_regno;
d3820 1
a3820 1
gdbarch_register_bytes_ok_p (struct gdbarch *gdbarch)
d3823 1
a3823 1
  return gdbarch->register_bytes_ok != 0;
d3827 1
a3827 1
gdbarch_register_bytes_ok (struct gdbarch *gdbarch, long nr_bytes)
a3829 3
  if (gdbarch->register_bytes_ok == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_bytes_ok invalid");
d3831 2
a3832 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_bytes_ok called\n");
  return gdbarch->register_bytes_ok (nr_bytes);
d3836 2
a3837 2
set_gdbarch_register_bytes_ok (struct gdbarch *gdbarch,
                               gdbarch_register_bytes_ok_ftype register_bytes_ok)
d3839 1
a3839 1
  gdbarch->register_bytes_ok = register_bytes_ok;
d3843 8
a3850 1
gdbarch_cannot_fetch_register (struct gdbarch *gdbarch, int regnum)
d3853 1
a3853 1
  if (gdbarch->cannot_fetch_register == 0)
d3855 1
a3855 1
                    "gdbarch: gdbarch_cannot_fetch_register invalid");
d3857 2
a3858 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_fetch_register called\n");
  return gdbarch->cannot_fetch_register (regnum);
d3862 2
a3863 2
set_gdbarch_cannot_fetch_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_fetch_register_ftype cannot_fetch_register)
d3865 1
a3865 1
  gdbarch->cannot_fetch_register = cannot_fetch_register;
d3869 8
a3876 1
gdbarch_cannot_store_register (struct gdbarch *gdbarch, int regnum)
d3879 1
a3879 1
  if (gdbarch->cannot_store_register == 0)
d3881 1
a3881 1
                    "gdbarch: gdbarch_cannot_store_register invalid");
d3883 2
a3884 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_store_register called\n");
  return gdbarch->cannot_store_register (regnum);
d3888 2
a3889 2
set_gdbarch_cannot_store_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_store_register_ftype cannot_store_register)
d3891 1
a3891 1
  gdbarch->cannot_store_register = cannot_store_register;
d3895 1
a3895 1
gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch)
d3898 1
a3898 1
  return gdbarch->get_longjmp_target != 0;
d3901 2
a3902 2
int
gdbarch_get_longjmp_target (struct gdbarch *gdbarch, CORE_ADDR *pc)
d3905 1
a3905 1
  if (gdbarch->get_longjmp_target == 0)
d3907 1
a3907 1
                    "gdbarch: gdbarch_get_longjmp_target invalid");
d3909 2
a3910 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_longjmp_target called\n");
  return gdbarch->get_longjmp_target (pc);
d3914 2
a3915 2
set_gdbarch_get_longjmp_target (struct gdbarch *gdbarch,
                                gdbarch_get_longjmp_target_ftype get_longjmp_target)
d3917 1
a3917 1
  gdbarch->get_longjmp_target = get_longjmp_target;
d3921 1
a3921 1
gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch)
d3924 1
a3924 1
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
d3926 2
a3927 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_use_generic_dummy_frames called\n");
  return gdbarch->deprecated_use_generic_dummy_frames;
d3931 2
a3932 2
set_gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch,
                                                 int deprecated_use_generic_dummy_frames)
d3934 1
a3934 1
  gdbarch->deprecated_use_generic_dummy_frames = deprecated_use_generic_dummy_frames;
d3938 8
a3945 1
gdbarch_call_dummy_location (struct gdbarch *gdbarch)
d3948 3
a3950 1
  /* Skip verify of call_dummy_location, invalid_p == 0 */
d3952 2
a3953 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_location called\n");
  return gdbarch->call_dummy_location;
d3957 2
a3958 2
set_gdbarch_call_dummy_location (struct gdbarch *gdbarch,
                                 int call_dummy_location)
d3960 1
a3960 1
  gdbarch->call_dummy_location = call_dummy_location;
d3963 2
a3964 2
CORE_ADDR
gdbarch_call_dummy_address (struct gdbarch *gdbarch)
d3967 1
a3967 1
  if (gdbarch->call_dummy_address == 0)
d3969 1
a3969 1
                    "gdbarch: gdbarch_call_dummy_address invalid");
d3971 2
a3972 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_address called\n");
  return gdbarch->call_dummy_address ();
d3976 8
a3983 2
set_gdbarch_call_dummy_address (struct gdbarch *gdbarch,
                                gdbarch_call_dummy_address_ftype call_dummy_address)
d3985 2
a3986 1
  gdbarch->call_dummy_address = call_dummy_address;
d3989 2
a3990 2
CORE_ADDR
gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch)
d3993 3
d3997 2
a3998 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_start_offset called\n");
  return gdbarch->deprecated_call_dummy_start_offset;
d4002 8
a4009 2
set_gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch,
                                                CORE_ADDR deprecated_call_dummy_start_offset)
d4011 2
a4012 1
  gdbarch->deprecated_call_dummy_start_offset = deprecated_call_dummy_start_offset;
d4015 2
a4016 2
CORE_ADDR
gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch)
d4019 3
d4023 2
a4024 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_breakpoint_offset called\n");
  return gdbarch->deprecated_call_dummy_breakpoint_offset;
d4028 2
a4029 2
set_gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch,
                                                     CORE_ADDR deprecated_call_dummy_breakpoint_offset)
d4031 1
a4031 1
  gdbarch->deprecated_call_dummy_breakpoint_offset = deprecated_call_dummy_breakpoint_offset;
d4035 1
a4035 1
gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch)
d4038 3
d4042 2
a4043 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_length called\n");
  return gdbarch->deprecated_call_dummy_length;
d4047 2
a4048 2
set_gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch,
                                          int deprecated_call_dummy_length)
d4050 1
a4050 1
  gdbarch->deprecated_call_dummy_length = deprecated_call_dummy_length;
d4054 1
a4054 1
gdbarch_deprecated_pc_in_call_dummy_p (struct gdbarch *gdbarch)
d4057 1
a4057 1
  return gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy;
d4061 1
a4061 1
gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp, CORE_ADDR frame_address)
d4064 1
a4064 1
  if (gdbarch->deprecated_pc_in_call_dummy == 0)
d4066 1
a4066 2
                    "gdbarch: gdbarch_deprecated_pc_in_call_dummy invalid");
  /* Ignore predicate (gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy).  */
d4068 2
a4069 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pc_in_call_dummy called\n");
  return gdbarch->deprecated_pc_in_call_dummy (pc, sp, frame_address);
d4073 2
a4074 2
set_gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_pc_in_call_dummy_ftype deprecated_pc_in_call_dummy)
d4076 1
a4076 1
  gdbarch->deprecated_pc_in_call_dummy = deprecated_pc_in_call_dummy;
d4079 2
a4080 2
LONGEST *
gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch)
d4083 3
a4085 1
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
d4087 2
a4088 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_words called\n");
  return gdbarch->deprecated_call_dummy_words;
d4092 2
a4093 2
set_gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch,
                                         LONGEST * deprecated_call_dummy_words)
d4095 1
a4095 1
  gdbarch->deprecated_call_dummy_words = deprecated_call_dummy_words;
d4099 1
a4099 1
gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch)
d4102 3
a4104 1
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
d4106 2
a4107 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sizeof_call_dummy_words called\n");
  return gdbarch->deprecated_sizeof_call_dummy_words;
d4111 2
a4112 2
set_gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch,
                                                int deprecated_sizeof_call_dummy_words)
d4114 1
a4114 1
  gdbarch->deprecated_sizeof_call_dummy_words = deprecated_sizeof_call_dummy_words;
d4118 1
a4118 1
gdbarch_deprecated_call_dummy_stack_adjust_p (struct gdbarch *gdbarch)
d4121 1
a4121 1
  return gdbarch->deprecated_call_dummy_stack_adjust != 0;
d4125 1
a4125 1
gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch)
d4128 3
d4132 2
a4133 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_stack_adjust called\n");
  return gdbarch->deprecated_call_dummy_stack_adjust;
d4137 2
a4138 2
set_gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch,
                                                int deprecated_call_dummy_stack_adjust)
d4140 1
a4140 1
  gdbarch->deprecated_call_dummy_stack_adjust = deprecated_call_dummy_stack_adjust;
d4144 1
a4144 1
gdbarch_deprecated_fix_call_dummy_p (struct gdbarch *gdbarch)
d4147 1
a4147 20
  return gdbarch->deprecated_fix_call_dummy != 0;
}

void
gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch, char *dummy, CORE_ADDR pc, CORE_ADDR fun, int nargs, struct value **args, struct type *type, int gcc_p)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_fix_call_dummy == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_fix_call_dummy invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fix_call_dummy called\n");
  gdbarch->deprecated_fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
}

void
set_gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_fix_call_dummy_ftype deprecated_fix_call_dummy)
{
  gdbarch->deprecated_fix_call_dummy = deprecated_fix_call_dummy;
d4151 1
a4151 1
gdbarch_push_dummy_code_p (struct gdbarch *gdbarch)
d4154 1
a4154 8
  return gdbarch->push_dummy_code != 0;
}

CORE_ADDR
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->push_dummy_code == 0)
d4156 2
a4157 1
                    "gdbarch: gdbarch_push_dummy_code invalid");
d4159 2
a4160 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_code called\n");
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, using_gcc, args, nargs, value_type, real_pc, bp_addr);
d4164 2
a4165 2
set_gdbarch_push_dummy_code (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_code_ftype push_dummy_code)
d4167 1
a4167 1
  gdbarch->push_dummy_code = push_dummy_code;
a4477 104
gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_arguments != 0;
}

CORE_ADDR
gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_push_arguments == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_arguments invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_arguments called\n");
  return gdbarch->deprecated_push_arguments (nargs, args, sp, struct_return, struct_addr);
}

void
set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments)
{
  gdbarch->deprecated_push_arguments = deprecated_push_arguments;
}

int
gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_call != 0;
}

CORE_ADDR
gdbarch_push_dummy_call (struct gdbarch *gdbarch, CORE_ADDR func_addr, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->push_dummy_call == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_push_dummy_call invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_call called\n");
  return gdbarch->push_dummy_call (gdbarch, func_addr, regcache, bp_addr, nargs, args, sp, struct_return, struct_addr);
}

void
set_gdbarch_push_dummy_call (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_call_ftype push_dummy_call)
{
  gdbarch->push_dummy_call = push_dummy_call;
}

int
gdbarch_deprecated_push_dummy_frame_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_dummy_frame != 0;
}

void
gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_push_dummy_frame == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_dummy_frame invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_dummy_frame called\n");
  gdbarch->deprecated_push_dummy_frame ();
}

void
set_gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_push_dummy_frame_ftype deprecated_push_dummy_frame)
{
  gdbarch->deprecated_push_dummy_frame = deprecated_push_dummy_frame;
}

int
gdbarch_deprecated_push_return_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_return_address != 0;
}

CORE_ADDR
gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_push_return_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_return_address invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_return_address called\n");
  return gdbarch->deprecated_push_return_address (pc, sp);
}

void
set_gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_push_return_address_ftype deprecated_push_return_address)
{
  gdbarch->deprecated_push_return_address = deprecated_push_return_address;
}

int
a5225 17
}

int
gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extra_stack_alignment_needed called\n");
  return gdbarch->deprecated_extra_stack_alignment_needed;
}

void
set_gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch,
                                                     int deprecated_extra_stack_alignment_needed)
{
  gdbarch->deprecated_extra_stack_alignment_needed = deprecated_extra_stack_alignment_needed;
@


1.225
log
@2003-06-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Update comments on registers, re-order.
	(deprecated_register_byte): Rename register_byte.
	(deprecated_register_raw_size): Rename register_raw_size.
	(deprecated_register_virtual_size): Rename register_virtual_size.
	(deprecated_register_virtual_type): Rename register_virtual_type.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c: Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
@
text
@a149 1
  gdbarch_deprecated_target_read_fp_ftype *deprecated_target_read_fp;
a157 1
  int deprecated_fp_regnum;
d177 4
a256 2
  gdbarch_save_dummy_frame_tos_ftype *save_dummy_frame_tos;
  gdbarch_unwind_dummy_id_ftype *unwind_dummy_id;
a317 1
  0,  /* deprecated_target_read_fp */
a325 1
  -1,  /* deprecated_fp_regnum */
d345 4
a424 2
  0,  /* save_dummy_frame_tos */
  0,  /* unwind_dummy_id */
a509 1
  current_gdbarch->deprecated_fp_regnum = -1;
d523 1
a624 1
  /* Skip verify of deprecated_target_read_fp, has predicate */
a634 1
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
d652 4
a736 2
  /* Skip verify of save_dummy_frame_tos, has predicate */
  /* Skip verify of unwind_dummy_id, has predicate */
a2958 26
gdbarch_deprecated_target_read_fp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_target_read_fp != 0;
}

CORE_ADDR
gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_target_read_fp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_target_read_fp invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_target_read_fp called\n");
  return gdbarch->deprecated_target_read_fp ();
}

void
set_gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_target_read_fp_ftype deprecated_target_read_fp)
{
  gdbarch->deprecated_target_read_fp = deprecated_target_read_fp;
}

int
a3134 17
gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fp_regnum called\n");
  return gdbarch->deprecated_fp_regnum;
}

void
set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,
                                  int deprecated_fp_regnum)
{
  gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;
}

int
d3512 95
a5251 52
}

int
gdbarch_save_dummy_frame_tos_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->save_dummy_frame_tos != 0;
}

void
gdbarch_save_dummy_frame_tos (struct gdbarch *gdbarch, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->save_dummy_frame_tos == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_save_dummy_frame_tos invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_save_dummy_frame_tos called\n");
  gdbarch->save_dummy_frame_tos (sp);
}

void
set_gdbarch_save_dummy_frame_tos (struct gdbarch *gdbarch,
                                  gdbarch_save_dummy_frame_tos_ftype save_dummy_frame_tos)
{
  gdbarch->save_dummy_frame_tos = save_dummy_frame_tos;
}

int
gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_dummy_id != 0;
}

struct frame_id
gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->unwind_dummy_id == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_dummy_id invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_dummy_id called\n");
  return gdbarch->unwind_dummy_id (gdbarch, info);
}

void
set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch,
                             gdbarch_unwind_dummy_id_ftype unwind_dummy_id)
{
  gdbarch->unwind_dummy_id = unwind_dummy_id;
@


1.225.2.1
log
@* gdbarch.sh (gdbarch_bfd_entry_point): New gdbarch method.
* arch-utils.c (generic_bfd_entry_point): New function.
* arch-utils.h (generic_bfd_entry_point): New declaration.
* gdbarch.c, gdbarch.h: Regenerated.
* solib-svr4.c (enable_break): Call it, instead of accessing
tmp_bfd->start_address directly.
@
text
@a266 1
  gdbarch_bfd_entry_point_ftype *bfd_entry_point;
a434 1
  generic_bfd_entry_point,  /* bfd_entry_point */
a559 1
  current_gdbarch->bfd_entry_point = generic_bfd_entry_point;
a748 1
  /* Skip verify of bfd_entry_point, invalid_p == 0 */
a792 4
                        "gdbarch_dump: bfd_entry_point = 0x%08lx\n",
                        (long) current_gdbarch->bfd_entry_point);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a5436 19
}

CORE_ADDR
gdbarch_bfd_entry_point (struct gdbarch *gdbarch, bfd *abfd)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->bfd_entry_point == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_bfd_entry_point invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_entry_point called\n");
  return gdbarch->bfd_entry_point (gdbarch, abfd);
}

void
set_gdbarch_bfd_entry_point (struct gdbarch *gdbarch,
                             gdbarch_bfd_entry_point_ftype bfd_entry_point)
{
  gdbarch->bfd_entry_point = bfd_entry_point;
@


1.224
log
@2003-06-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERTIBLE): Deprecate
	REGISTER_CONVERTIBLE.
	(DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL): Same.
	(DEPRECATED_REGISTER_CONVERT_TO_RAW): Same, make "from" constant.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.h (deprecated_register_convertible_not): Rename
	generic_register_convertible_not.
	* arch-utils.c (deprecated_register_convertible_not): Rename
	generic_register_convertible.
	(legacy_convert_register_p, legacy_register_to_value): Update.
	* sh-tdep.c (sh64_push_arguments): Update.
	* m68klinux-tdep.c (m68k_linux_extract_return_value): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_EXTRACT_RETURN_VALUE): Update.
	* m68klinux-tdep.c (m68k_linux_store_return_value): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_STORE_RETURN_VALUE): Update.
	* arch-utils.c (legacy_value_to_register): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	(rs6000_register_convert_to_raw): Make parameter "from" const.
	* mips-tdep.c (mips_gdbarch_init): Update.
	(mips_register_convert_to_raw): Make  parameter"virt_buf" const.
	* infcmd.c (default_print_registers_info): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	(ia64_register_convert_to_raw): Make parameter "from" const.
	* i386-tdep.c (i386_gdbarch_init): Update.
	(i386_register_convert_to_raw): Update.
@
text
@d171 2
d174 3
a176 2
  gdbarch_register_byte_ftype *register_byte;
  gdbarch_register_raw_size_ftype *register_raw_size;
a177 1
  gdbarch_register_virtual_size_ftype *register_virtual_size;
a178 2
  gdbarch_register_virtual_type_ftype *register_virtual_type;
  gdbarch_register_type_ftype *register_type;
d339 2
d342 3
a344 2
  generic_register_byte,  /* register_byte */
  generic_register_size,  /* register_raw_size */
a345 1
  generic_register_size,  /* register_virtual_size */
a346 2
  0,  /* register_virtual_type */
  0,  /* register_type */
d521 3
a523 3
  current_gdbarch->register_byte = generic_register_byte;
  current_gdbarch->register_raw_size = generic_register_size;
  current_gdbarch->register_virtual_size = generic_register_size;
d647 5
a651 2
  /* Skip verify of register_byte, has predicate */
  /* Skip verify of register_raw_size, invalid_p == 0 */
a652 1
  /* Skip verify of register_virtual_size, invalid_p == 0 */
a653 2
  /* Skip verify of register_virtual_type, has predicate */
  /* Skip verify of register_type, has predicate */
d2090 1
a2090 1
                        (long) current_gdbarch->register_byte
d2132 1
a2132 1
                        (long) current_gdbarch->register_raw_size
d2176 1
a2176 1
                        (long) current_gdbarch->register_virtual_size
d2196 1
a2196 1
                        (long) current_gdbarch->register_virtual_type
d3376 8
a3383 1
gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch)
d3386 3
d3390 2
a3391 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_bytes called\n");
  return gdbarch->deprecated_register_bytes;
d3395 2
a3396 2
set_gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch,
                                       int deprecated_register_bytes)
d3398 1
a3398 1
  gdbarch->deprecated_register_bytes = deprecated_register_bytes;
d3402 1
a3402 1
gdbarch_register_byte_p (struct gdbarch *gdbarch)
d3405 1
a3405 1
  return gdbarch->register_byte != generic_register_byte;
d3408 2
a3409 2
int
gdbarch_register_byte (struct gdbarch *gdbarch, int reg_nr)
d3412 1
a3412 1
  if (gdbarch->register_byte == 0)
d3414 1
a3414 2
                    "gdbarch: gdbarch_register_byte invalid");
  /* Ignore predicate (gdbarch->register_byte != generic_register_byte).  */
d3416 2
a3417 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_byte called\n");
  return gdbarch->register_byte (reg_nr);
d3421 2
a3422 2
set_gdbarch_register_byte (struct gdbarch *gdbarch,
                           gdbarch_register_byte_ftype register_byte)
d3424 1
a3424 1
  gdbarch->register_byte = register_byte;
d3428 1
a3428 1
gdbarch_register_raw_size (struct gdbarch *gdbarch, int reg_nr)
a3430 3
  if (gdbarch->register_raw_size == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_raw_size invalid");
d3432 2
a3433 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_raw_size called\n");
  return gdbarch->register_raw_size (reg_nr);
d3437 2
a3438 2
set_gdbarch_register_raw_size (struct gdbarch *gdbarch,
                               gdbarch_register_raw_size_ftype register_raw_size)
d3440 1
a3440 1
  gdbarch->register_raw_size = register_raw_size;
d3444 1
a3444 1
gdbarch_deprecated_max_register_raw_size_p (struct gdbarch *gdbarch)
d3447 1
a3447 1
  return gdbarch->deprecated_max_register_raw_size != 0;
d3451 1
a3451 1
gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch)
d3454 4
d3459 2
a3460 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_raw_size called\n");
  return gdbarch->deprecated_max_register_raw_size;
d3464 2
a3465 2
set_gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch,
                                              int deprecated_max_register_raw_size)
d3467 1
a3467 1
  gdbarch->deprecated_max_register_raw_size = deprecated_max_register_raw_size;
d3471 1
a3471 1
gdbarch_register_virtual_size (struct gdbarch *gdbarch, int reg_nr)
d3474 1
a3474 1
  if (gdbarch->register_virtual_size == 0)
d3476 1
a3476 1
                    "gdbarch: gdbarch_register_virtual_size invalid");
d3478 2
a3479 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_virtual_size called\n");
  return gdbarch->register_virtual_size (reg_nr);
d3483 2
a3484 2
set_gdbarch_register_virtual_size (struct gdbarch *gdbarch,
                                   gdbarch_register_virtual_size_ftype register_virtual_size)
d3486 1
a3486 1
  gdbarch->register_virtual_size = register_virtual_size;
d3490 1
a3490 8
gdbarch_deprecated_max_register_virtual_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_max_register_virtual_size != 0;
}

int
gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch)
d3493 3
d3497 2
a3498 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_virtual_size called\n");
  return gdbarch->deprecated_max_register_virtual_size;
d3502 2
a3503 2
set_gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch,
                                                  int deprecated_max_register_virtual_size)
d3505 1
a3505 1
  gdbarch->deprecated_max_register_virtual_size = deprecated_max_register_virtual_size;
d3509 1
a3509 1
gdbarch_register_virtual_type_p (struct gdbarch *gdbarch)
d3512 1
a3512 1
  return gdbarch->register_virtual_type != 0;
d3515 2
a3516 2
struct type *
gdbarch_register_virtual_type (struct gdbarch *gdbarch, int reg_nr)
a3518 3
  if (gdbarch->register_virtual_type == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_virtual_type invalid");
d3520 2
a3521 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_virtual_type called\n");
  return gdbarch->register_virtual_type (reg_nr);
d3525 2
a3526 2
set_gdbarch_register_virtual_type (struct gdbarch *gdbarch,
                                   gdbarch_register_virtual_type_ftype register_virtual_type)
d3528 1
a3528 1
  gdbarch->register_virtual_type = register_virtual_type;
d3532 1
a3532 1
gdbarch_register_type_p (struct gdbarch *gdbarch)
d3535 1
a3535 1
  return gdbarch->register_type != 0;
d3538 2
a3539 2
struct type *
gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr)
a3541 3
  if (gdbarch->register_type == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_type invalid");
d3543 2
a3544 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_type called\n");
  return gdbarch->register_type (gdbarch, reg_nr);
d3548 2
a3549 2
set_gdbarch_register_type (struct gdbarch *gdbarch,
                           gdbarch_register_type_ftype register_type)
d3551 1
a3551 1
  gdbarch->register_type = register_type;
@


1.223
log
@2003-06-09  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FRAME_NUM_ARGS): Change to function with predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.h (frame_num_args_unknown): Delete both declarations.
	* arch-utils.c (frame_num_args_unknown): Delete function.
	* stack.c (print_args_stub): Use FRAME_NUM_ARGS_P.
	(frame_info): Use FRAME_NUM_ARGS_P.
	* arm-tdep.c (arm_frame_num_args): Delete function.
	(arm_gdbarch_init): Do not set frame_num_args.
	* config/pa/tm-hppa64.h (FRAME_NUM_ARGS): Delete.
	* hppa-tdep.c (hppa_frame_num_args): Delete function.
	(hppa_gdbarch_init): Do not set frame_num_args.
	* config/sparc/tm-sparc.h (FRAME_NUM_ARGS): Delete.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	frame_num_args to default frame_num_args_unknown.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
@
text
@d205 3
a207 3
  gdbarch_register_convertible_ftype *register_convertible;
  gdbarch_register_convert_to_virtual_ftype *register_convert_to_virtual;
  gdbarch_register_convert_to_raw_ftype *register_convert_to_raw;
d373 3
a375 3
  0,  /* register_convertible */
  0,  /* register_convert_to_virtual */
  0,  /* register_convert_to_raw */
d534 1
a534 1
  current_gdbarch->register_convertible = generic_register_convertible_not;
d675 3
a677 3
  /* Skip verify of register_convertible, invalid_p == 0 */
  /* Skip verify of register_convert_to_virtual, invalid_p == 0 */
  /* Skip verify of register_convert_to_raw, invalid_p == 0 */
d1493 39
a2112 39
#ifdef REGISTER_CONVERTIBLE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERTIBLE(nr)",
                      XSTRING (REGISTER_CONVERTIBLE (nr)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERTIBLE = <0x%08lx>\n",
                        (long) current_gdbarch->register_convertible
                        /*REGISTER_CONVERTIBLE ()*/);
#endif
#ifdef REGISTER_CONVERT_TO_RAW
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERT_TO_RAW(type, regnum, from, to)",
                      XSTRING (REGISTER_CONVERT_TO_RAW (type, regnum, from, to)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERT_TO_RAW = <0x%08lx>\n",
                        (long) current_gdbarch->register_convert_to_raw
                        /*REGISTER_CONVERT_TO_RAW ()*/);
#endif
#ifdef REGISTER_CONVERT_TO_VIRTUAL
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERT_TO_VIRTUAL(regnum, type, from, to)",
                      XSTRING (REGISTER_CONVERT_TO_VIRTUAL (regnum, type, from, to)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERT_TO_VIRTUAL = <0x%08lx>\n",
                        (long) current_gdbarch->register_convert_to_virtual
                        /*REGISTER_CONVERT_TO_VIRTUAL ()*/);
#endif
d4108 1
a4108 1
gdbarch_register_convertible (struct gdbarch *gdbarch, int nr)
d4111 1
a4111 1
  if (gdbarch->register_convertible == 0)
d4113 1
a4113 1
                    "gdbarch: gdbarch_register_convertible invalid");
d4115 2
a4116 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_convertible called\n");
  return gdbarch->register_convertible (nr);
d4120 2
a4121 2
set_gdbarch_register_convertible (struct gdbarch *gdbarch,
                                  gdbarch_register_convertible_ftype register_convertible)
d4123 1
a4123 1
  gdbarch->register_convertible = register_convertible;
d4127 1
a4127 1
gdbarch_register_convert_to_virtual (struct gdbarch *gdbarch, int regnum, struct type *type, char *from, char *to)
d4130 1
a4130 1
  if (gdbarch->register_convert_to_virtual == 0)
d4132 1
a4132 1
                    "gdbarch: gdbarch_register_convert_to_virtual invalid");
d4134 2
a4135 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_convert_to_virtual called\n");
  gdbarch->register_convert_to_virtual (regnum, type, from, to);
d4139 2
a4140 2
set_gdbarch_register_convert_to_virtual (struct gdbarch *gdbarch,
                                         gdbarch_register_convert_to_virtual_ftype register_convert_to_virtual)
d4142 1
a4142 1
  gdbarch->register_convert_to_virtual = register_convert_to_virtual;
d4146 1
a4146 1
gdbarch_register_convert_to_raw (struct gdbarch *gdbarch, struct type *type, int regnum, char *from, char *to)
d4149 1
a4149 1
  if (gdbarch->register_convert_to_raw == 0)
d4151 1
a4151 1
                    "gdbarch: gdbarch_register_convert_to_raw invalid");
d4153 2
a4154 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_convert_to_raw called\n");
  gdbarch->register_convert_to_raw (type, regnum, from, to);
d4158 2
a4159 2
set_gdbarch_register_convert_to_raw (struct gdbarch *gdbarch,
                                     gdbarch_register_convert_to_raw_ftype register_convert_to_raw)
d4161 1
a4161 1
  gdbarch->register_convert_to_raw = register_convert_to_raw;
@


1.222
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (UNWIND_SP): Add.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (frame_sp_unwind): New function.
	(get_frame_sp): New function.
	* frame.h (get_frame_sp, frame_sp_unwind): Declare.
	* regcache.c (read_sp): Rewrite, try each of TARGET_READ_SP,
	gdbarch_unwind_sp and SP_REGNUM when looking for the SP register
	value.
	* d10v-tdep.c (d10v_unwind_sp): Replace d10v_read_sp.
	(d10v_gdbarch_init): Set unwind_sp instead of read_sp.

2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	"unwind_sp".  Cross reference "unwind_sp" and TARGET_READ_SP.
@
text
@d730 1
a730 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->frame_num_args == 0))
    fprintf_unfiltered (log, "\n\tframe_num_args");
d1767 9
d5079 7
@


1.221
log
@2003-06-07  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (TARGET_READ_SP): Add predicate, delete default.
	* gdbarch.h, gdbarch.c: Regenerate.
	* mn10300-tdep.c: Include "gdb_assert.h".
	(mn10300_read_fp): New function.
	(mn10300_gdbarch_init): Set deprecated_target_read_fp to
	mn10300_read_fp.  Do not set read_sp to generic_target_read_sp.
	* ia64-tdep.c: Include "gdb_assert.h".
	(ia64_read_fp): New function.
	(ia64_gdbarch_init): Set deprecated_target_read_fp to
	ia64_read_sp.  Do not set read_sp to generic_target_read_sp.
	* regcache.c (generic_target_read_sp): Delete function.
	(read_sp): Try TARGET_READ_SP and SP_REGNUM for the SP register.
	* inferior.h (generic_target_read_sp): Delete declaration.
	* frv-tdep.c (frv_gdbarch_init): Do not set read_sp to
	generic_target_read_sp.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* Makefile.in (mn10300-tdep.o, ia64-tdep.o): Update dependencies.
@
text
@d246 1
d414 1
d726 1
d2642 8
d4982 26
@


1.220
log
@2003-06-07  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Comment each field of startup_gdbarch.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@a504 1
  current_gdbarch->read_sp = generic_target_read_sp;
d624 1
a624 1
  /* Skip verify of read_sp, invalid_p == 0 */
d2567 9
d2964 7
@


1.219
log
@2003-06-07  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (TARGET_READ_PC): Add predicate, remove default.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c: Update comments on read_pc et.al.
	(generic_target_read_pc): Delete function.
	(read_pc_pid): Try TARGET_READ_PC and PC_REGNUM for a PC register.
	* inferior.h (generic_target_read_pc): Delete declaration.
	* frv-tdep.c (frv_gdbarch_init): Do not set read_pc to
	generic_target_read_pc.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
@
text
@d296 3
a298 3
  &bfd_default_arch_struct,
  BFD_ENDIAN_BIG,
  GDB_OSABI_UNKNOWN,
d304 147
a450 147
  8 * sizeof (short),
  8 * sizeof (int),
  8 * sizeof (long),
  8 * sizeof (LONGEST),
  8 * sizeof (float),
  8 * sizeof (double),
  8 * sizeof (long double),
  8 * sizeof (void*),
  8 * sizeof (void*),
  8 * sizeof (void*),
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  -1,
  -1,
  -1,
  -1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  generic_register_byte,
  generic_register_size,
  0,
  generic_register_size,
  0,
  0,
  0,
  0,
  default_print_registers_info,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  generic_pc_in_call_dummy,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  generic_remote_translate_xfer_address,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  generic_in_function_epilogue_p,
  construct_inferior_arguments,
  0,
  0,
  0,
  "malloc",
  0,
  0,
  0,
  0,
  0,
  default_register_reggroup_p,
  0,
@


1.218
log
@* gdbarch.sh (function_list): Add FETCH_POINTER_ARGUMENT.
* gdbarch.[ch]: Regenerate.
* hppa-tdep.c (hppa_fetch_pointer_argument): New function.
(hppa_gdbarch_init): Set it in the gdbarch vector.
* i386-tdep.c (i386_fetch_pointer_argument): New
(i386_gdbarch_init): Set it into gdbarch.
* rs6000-tdep.c (rs6000_fetch_pointer_argument): New.
(rs6000_gdbarch_init): Set it in gdbarch.
* sparc-tdep.c (sparc_fetch_pointer_argument): New
(sparc_gdbarch_init): Set it in gdbarch.
@
text
@a503 1
  current_gdbarch->read_pc = generic_target_read_pc;
d622 1
a622 1
  /* Skip verify of read_pc, invalid_p == 0 */
d2548 9
d2885 7
@


1.218.2.1
log
@2003-06-06  Andrew Cagney  <cagney@@redhat.com>

	* frame.h (put_frame_register): Declare.
	* frame.c (put_frame_register): New function.

	* arch-utils.c: Include "gdbcore.h".
	(legacy_convert_register_p): Add "type" parameter.
	(legacy_register_to_value): Rewrite, use "frame" to get the
	register value.
	(legacy_value_to_register): Rewrite, use "frame" to find the
	register's location before storing.
	* arch-utils.h (legacy_convert_register_p): Update.
	(legacy_register_to_value, legacy_value_to_register): Update.

	* Makefile.in (arch-utils.o): Update dependencies.

	* findvar.c (value_from_register): Rewrite, eliminate use of
	REGISTER_CONVERT_TO_TYPE, pass "type" to CONVERT_REGISTER_P, pass
	"frame" to REGISTER_TO_VALUE.

	* gdbarch.sh (CONVERT_REGISTER_P): Add "type" parameter.
	(REGISTER_TO_VALUE, VALUE_TO_REGISTER): Replace "type", "from" and
	"to" parameters with "frame" and "value".
	* gdbarch.h, gdbarch.c: Re-generate.

	* mips-tdep.c (mips_convert_register_p): New function.
	(mips_value_to_register): Replace mips_register_convert_from_type.
	(mips_register_to_value): Replace mips_register_convert_to_type.
	(mips_gdbarch_init): Set conver_register_p, value_to_register and
	register_to_value.

	* valops.c (value_assign): Move the CONVERT_REGISTER code to the
	lval_reg_frame_relative + lval_register branch of the switch.  Do
	not use REGISTER_CONVERT_FROM_TYPE.  Use put_frame_register.
@
text
@d993 2
a994 2
                      "CONVERT_REGISTER_P(regnum, type)",
                      XSTRING (CONVERT_REGISTER_P (regnum, type)));
d2143 2
a2144 2
                      "REGISTER_TO_VALUE(frame, regnum, v)",
                      XSTRING (REGISTER_TO_VALUE (frame, regnum, v)));
d2639 2
a2640 2
                      "VALUE_TO_REGISTER(frame, v)",
                      XSTRING (VALUE_TO_REGISTER (frame, v)));
d4117 1
a4117 1
gdbarch_convert_register_p (struct gdbarch *gdbarch, int regnum, struct type *type)
d4125 1
a4125 1
  return gdbarch->convert_register_p (regnum, type);
d4136 1
a4136 1
gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct value *v)
d4144 1
a4144 1
  gdbarch->register_to_value (frame, regnum, v);
d4155 1
a4155 1
gdbarch_value_to_register (struct gdbarch *gdbarch, struct frame_info *frame, struct value *v)
d4163 1
a4163 1
  gdbarch->value_to_register (frame, v);
@


1.218.2.2
log
@2003-06-06  Andrew Cagney  <cagney@@redhat.com>

	* frame.h (put_frame_register): Declare.
	* frame.c (put_frame_register): New function.

	* arch-utils.c: Include "gdbcore.h".
	(legacy_convert_register_p): Add "type" parameter.
	(legacy_register_to_value): Rewrite, use "frame" to get the
	register value.
	(legacy_value_to_register): Rewrite, use "frame" to find the
	register's location before storing.
	* arch-utils.h (legacy_convert_register_p): Update.
	(legacy_register_to_value, legacy_value_to_register): Update.

	* Makefile.in (arch-utils.o): Update dependencies.

	* findvar.c (value_from_register): Rewrite, eliminate use of
	REGISTER_CONVERT_TO_TYPE, pass "type" to CONVERT_REGISTER_P, pass
	"frame" to REGISTER_TO_VALUE.

	* gdbarch.sh (CONVERT_REGISTER_P): Add "type" parameter.
	(REGISTER_TO_VALUE, VALUE_TO_REGISTER): Replace raw buffer
	parameter with "frame".
	* gdbarch.h, gdbarch.c: Re-generate.

	* mips-tdep.c (mips_convert_register_p): New function.
	(mips_value_to_register): Replace mips_register_convert_from_type.
	(mips_register_to_value): Replace mips_register_convert_to_type.
	(mips_gdbarch_init): Set conver_register_p, value_to_register and
	register_to_value.

	* valops.c (value_assign): Move the CONVERT_REGISTER code to the
	lval_reg_frame_relative + lval_register branch of the switch.  Do
	not use REGISTER_CONVERT_FROM_TYPE.  Use put_frame_register.
@
text
@d2143 2
a2144 2
                      "REGISTER_TO_VALUE(frame, regnum, type, buf)",
                      XSTRING (REGISTER_TO_VALUE (frame, regnum, type, buf)));
d2639 2
a2640 2
                      "VALUE_TO_REGISTER(frame, regnum, type, buf)",
                      XSTRING (VALUE_TO_REGISTER (frame, regnum, type, buf)));
d4136 1
a4136 1
gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, void *buf)
d4144 1
a4144 1
  gdbarch->register_to_value (frame, regnum, type, buf);
d4155 1
a4155 1
gdbarch_value_to_register (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, const void *buf)
d4163 1
a4163 1
  gdbarch->value_to_register (frame, regnum, type, buf);
@


1.217
log
@2003-05-31  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PUSH_DUMMY_CALL): Add "func_addr" parameter.  Rename
	"dummy_addr" to "bp_addr".
	* infcall.c (call_function_by_hand): Pass "funaddr" to
	gdbarch_push_dummy_call.
	* gdbarch.h, gdbarch.c: Re-generate.
	* i386-tdep.c (i386_push_dummy_call): Update.
	* arm-tdep.c (arm_push_dummy_call): Update.
	* d10v-tdep.c (d10v_push_dummy_call): Update.
@
text
@d283 1
d450 1
d767 1
d1699 20
d5715 26
@


1.216
log
@2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTES): Rename REGISTER_BYTES.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-linux-tdep.c (arm_linux_extract_return_value): Delete reference.
	* TODO (REGISTER_BYTES): Delete reference.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init_32082): Update.
	(ns32k_gdbarch_init_32382): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* sparc-tdep.c (sparc_pop_frame): Update.
	* rs6000-tdep.c (rs6000_pop_frame): Update.
	* remote.c (init_remote_state): Update.
	(remote_prepare_to_store): Update.
	* remote-vx.c (vx_prepare_to_store): Update.
	* remote-sds.c (sds_fetch_registers): Update.
	(sds_prepare_to_store): Update.
	* remote-array.c: Update.
	* regcache.c (init_legacy_regcache_descr): Update.
	(init_regcache_descr): Update.
	* mips-tdep.c (mips_eabi_extract_return_value): Update.
	(mips_o64_extract_return_value): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* irix4-nat.c (fetch_core_registers): Update.
	* i386-tdep.h: Update.
	* hppa-tdep.c (pa_do_registers_info): Update.
	(pa_do_strcat_registers_info): Update.
	* cris-tdep.c (cris_register_bytes_ok): Update.
	* config/nm-gnu.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/sparc/nm-sun4sol2.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-sun4os4.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-nbsd.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/s390/tm-s390.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-mips.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix6.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix5.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/m68k/tm-sun3.h (DEPRECATED_REGISTER_BYTES): Update.
	(REGISTER_BYTES_OK): Update.
	* config/m68k/nm-sun3.h (CHILD_PREPARE_TO_STORE): Update.
	* config/ia64/tm-ia64.h (DEPRECATED_REGISTER_BYTES): Update.

Index: doc/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	REGISTER_BYTES with DEPRECATED_REGISTER_BYTES.  Fix typo,
	DEPRECATED_REGISTER_SIZE instead of REGISTER_BYTE.

Index: mi/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_setup_architecture_data):
@
text
@d4267 1
a4267 1
gdbarch_push_dummy_call (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR dummy_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d4275 1
a4275 1
  return gdbarch->push_dummy_call (gdbarch, regcache, dummy_addr, nargs, args, sp, struct_return, struct_addr);
@


1.216.4.1
log
@* gdbarch.sh (gdbarch_bfd_entry_point): New gdbarch method.
* arch-utils.c (generic_bfd_entry_point): New function.
* arch-utils.h (generic_bfd_entry_point): New declaration.
* gdbarch.c, gdbarch.h: Regenerated.
* solib-svr4.c (enable_break): Call it, instead of accessing
tmp_bfd->start_address directly.
@
text
@a265 1
  gdbarch_bfd_entry_point_ftype *bfd_entry_point;
a431 1
  generic_bfd_entry_point,
a557 1
  current_gdbarch->bfd_entry_point = generic_bfd_entry_point;
a747 1
  /* Skip verify of bfd_entry_point, invalid_p == 0 */
a790 4
                        "gdbarch_dump: bfd_entry_point = 0x%08lx\n",
                        (long) current_gdbarch->bfd_entry_point);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a5332 19
}

CORE_ADDR
gdbarch_bfd_entry_point (struct gdbarch *gdbarch, bfd *abfd)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->bfd_entry_point == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_bfd_entry_point invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_entry_point called\n");
  return gdbarch->bfd_entry_point (gdbarch, abfd);
}

void
set_gdbarch_bfd_entry_point (struct gdbarch *gdbarch,
                             gdbarch_bfd_entry_point_ftype bfd_entry_point)
{
  gdbarch->bfd_entry_point = bfd_entry_point;
@


1.216.4.2
log
@Revert patch for revision.
@
text
@d266 1
d433 1
d560 1
d751 1
d795 4
d5341 19
@


1.216.4.3
log
@* gdbarch.sh (gdbarch_bfd_entry_point): New gdbarch method.
* arch-utils.c (generic_bfd_entry_point): New function.
* arch-utils.h (generic_bfd_entry_point): New declaration.
* gdbarch.c, gdbarch.h: Regenerated.
* solib-svr4.c (enable_break): Call it, instead of accessing
tmp_bfd->start_address directly.
@
text
@a265 1
  gdbarch_bfd_entry_point_ftype *bfd_entry_point;
a431 1
  generic_bfd_entry_point,
a557 1
  current_gdbarch->bfd_entry_point = generic_bfd_entry_point;
a747 1
  /* Skip verify of bfd_entry_point, invalid_p == 0 */
a790 4
                        "gdbarch_dump: bfd_entry_point = 0x%08lx\n",
                        (long) current_gdbarch->bfd_entry_point);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a5332 19
}

CORE_ADDR
gdbarch_bfd_entry_point (struct gdbarch *gdbarch, bfd *abfd)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->bfd_entry_point == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_bfd_entry_point invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_entry_point called\n");
  return gdbarch->bfd_entry_point (gdbarch, abfd);
}

void
set_gdbarch_bfd_entry_point (struct gdbarch *gdbarch,
                             gdbarch_bfd_entry_point_ftype bfd_entry_point)
{
  gdbarch->bfd_entry_point = bfd_entry_point;
@


1.215
log
@2003-05-15  Andrew Cagney  <cagney@@redhat.com>

	* arch-utils.h (legacy_breakpoint_from_pc): Delete declaration.
	* target.h (memory_breakpoint_from_pc): Delete declaration.
	* mem-break.c (memory_breakpoint_from_pc): Delete function.
	* arch-utils.c (legacy_breakpoint_from_pc): Delete function.
	* monitor.c (monitor_insert_breakpoint): Use
	gdbarch_breakpoint_from_pc instead of memory_breakpoint_from_pc.
	* gdbarch.sh (BREAKPOINT_FROM_PC): Do not provide a default.
	* gdbarch.h, gdbarch.c: Re-generate.
	* sparc-tdep.c (sparc_breakpoint_from_pc): New function.
	(sparc_gdbarch_init): Set breakpoint_from_pc to
	sparc_breakpoint_from_pc.
	* config/sparc/tm-sparc.h (BREAKPOINT): Delete macro.
	(BREAKPOINT_FROM_PC): Define.
	(sparc_breakpoint_from_pc): Declare.
	* hppa-tdep.c (hppa_breakpoint_from_pc): New function.
	* config/pa/tm-hppa.h (hppa_breakpoint_from_pc): Declare.
	(BREAKPOINT_FROM_PC): Define.
	(BREAKPOINT): Delete macro.
	* target.h: Update comment.
	* s390-tdep.c (s390_gdbarch_init): Update comments.
	* remote.c: Update comments.
	* remote-mips.c: Update comments.
	* proc-api.c (write_with_trace): Do not check for a breakpoint.
	* mem-break.c: Update comment.
	* ia64-tdep.c (IA64_BREAKPOINT): Rename BREAKPOINT.
	(ia64_memory_insert_breakpoint): Update.
	* config/sparc/tm-sparc.h: Update comment.
	* config/pa/tm-hppa64.h: Update comment.
	* rs6000-tdep.c (BIG_BREAKPOINT, LITTLE_BREAKPOINT): Delete macro.
	(rs6000_breakpoint_from_pc): Update.
	* mips-tdep.c (BIG_BREAKPOINT, LITTLE_BREAKPOINT): Delete macro.
	(PMON_BIG_BREAKPOINT, PMON_LITTLE_BREAKPOINT): Delete macro.
	(IDT_LITTLE_BREAKPOINT, IDT_LITTLE_BREAKPOINT): Delete macro.
	(MIPS16_LITTLE_BREAKPOINT, MIPS16_BIG_BREAKPOINT): Delete macro.
	(mips_breakpoint_from_pc): Update.
	(mips_dump_tdep): Update.
@
text
@d171 1
a171 1
  int register_bytes;
d1483 8
a2022 8
#ifdef REGISTER_BYTES
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTES # %s\n",
                      XSTRING (REGISTER_BYTES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTES = %d\n",
                      REGISTER_BYTES);
#endif
d3305 1
a3305 1
gdbarch_register_bytes (struct gdbarch *gdbarch)
d3309 2
a3310 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_bytes called\n");
  return gdbarch->register_bytes;
d3314 2
a3315 2
set_gdbarch_register_bytes (struct gdbarch *gdbarch,
                            int register_bytes)
d3317 1
a3317 1
  gdbarch->register_bytes = register_bytes;
@


1.214
log
@Index: gdb/ChangeLog
2003-05-07  Andrew Cagney  <cagney@@redhat.com>

	* d10v-tdep.c (remote_d10v_translate_xfer_address): Add
	"regcache".
	(d10v_print_registers_info): Update.
	(d10v_dmap_register, d10v_imap_register): Delete functions.
	(struct gdbarch_tdep): Add "regcache" parameter to "dmap_register"
	and "imap_register".
	(d10v_ts2_dmap_register, d10v_ts2_imap_register): Add "regcache".
	(d10v_ts3_dmap_register, d10v_ts3_imap_register): Add "regcache".
	* arch-utils.c (generic_remote_translate_xfer_address): Add
	"regcache" and "gdbarch" parameters.
	* gdbarch.sh (REMOTE_TRANSLATE_XFER_ADDRESS): Add "regcache"
	parameter.  Change class to multi-arch.
	* gdbarch.h, gdbarch.c: Re-generate.
	* remote.c (remote_xfer_memory): Use
	gdbarch_remote_translate_xfer_address.

Index: include/gdb/ChangeLog
2003-05-07  Andrew Cagney  <cagney@@redhat.com>

	* sim-d10v.h (sim_d10v_translate_addr): Add regcache parameter.
	(sim_d10v_translate_imap_addr): Add regcache parameter.
	(sim_d10v_translate_dmap_addr): Ditto.

Index: sim/d10v/ChangeLog
2003-05-07  Andrew Cagney  <cagney@@redhat.com>

	* interp.c (sim_d10v_translate_addr): Add "regcache" parameter.
	(sim_d10v_translate_imap_addr): Ditto.
	(sim_d10v_translate_dmap_addr): Ditto.
	(xfer_mem): Pass NULL regcache to sim_d10v_translate_addr.
	(dmem_addr): Pass NULL regcache to sim_d10v_translate_dmap_addr.
	(dmap_register, imap_register): Add "regcache" parameter.
	(imem_addr): Pass NULL regcache to sim_d10v_translate_imap_addr.
	(sim_fetch_register): Pass NULL regcache to imap_register and
	dmap_register.
@
text
@a542 1
  current_gdbarch->breakpoint_from_pc = legacy_breakpoint_from_pc;
d703 3
a705 1
  /* Skip verify of breakpoint_from_pc, invalid_p == 0 */
@


1.214.4.1
log
@Snap const char * mess.
@
text
@d5335 1
a5335 1
gdbarch_in_solib_call_trampoline (struct gdbarch *gdbarch, CORE_ADDR pc, const char *name)
d5354 1
a5354 1
gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch, CORE_ADDR pc, const char *name)
d5373 1
a5373 2
gdbarch_pc_in_sigtramp (struct gdbarch *gdbarch, CORE_ADDR pc,
			const char *name)
@


1.213
log
@2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_SIZE): Rename REGISTER_SIZE.
	(DEPRECATED_SIZEOF_CALL_DUMMY_WORDS): Rename
	SIZEOF_CALL_DUMMY_WORDS.
	(DEPRECATED_CALL_DUMMY_WORDS): Rename CALL_DUMMY_WORDS.
	(DEPRECATED_FIX_CALL_DUMMY): Rename FIX_CALL_DUMMY.
	(DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET): Rename
	CALL_DUMMY_BREAKPOINT_OFFSET.
	(DEPRECATED_CALL_DUMMY_START_OFFSET): Rename
	CALL_DUMMY_START_OFFSET.
	(DEPRECATED_CALL_DUMMY_LENGTH): Rename CALL_DUMMY_LENGTH.
	* gdbarch.h, gdbarch.c: Re-generate.
	* alpha-tdep.c, alphafbsd-tdep.c, arm-linux-tdep.c: Update.
	* arm-tdep.c, avr-tdep.c, breakpoint.c, cris-tdep.c: Update.
	* dummy-frame.c, dummy-frame.h, frv-tdep.c, gdbarch.c: Update.
	* gdbarch.h, gdbarch.sh, h8300-tdep.c, hppa-tdep.c: Update.
	* i386-tdep.c, ia64-tdep.c, infcall.c, inferior.h: Update.
	* m68hc11-tdep.c, m68k-tdep.c, mcore-tdep.c: Update.
	* mips-tdep.c, mn10300-tdep.c, ns32k-tdep.c: Update.
	* rs6000-tdep.c, s390-tdep.c, sh-tdep.c, sol-thread.c: Update.
	* sparc-tdep.c, target.c, v850-tdep.c, valops.c: Update.
	* vax-tdep.c, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/ia64/tm-ia64.h, config/m68k/tm-vx68.h: Update.
	* config/mips/tm-mips.h, config/pa/nm-hppah.h: Update.
	* config/pa/tm-hppa.h, config/pa/tm-hppa64.h: Update.
	* config/s390/tm-s390.h, config/sparc/tm-sp64.h: Update.
	* config/sparc/tm-sparc.h: Update.

Index: doc/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Make
	CALL_DUMMY_WORDS, SIZEOF_CALL_DUMMY_WORDS, CALL_DUMMY_LENGTH,
	FIX_CALL_DUMMY, CALL_DUMMY_BREAKPOINT_OFFSET and
	CALL_DUMMY_BREAKPOINT_OFFSET deprecated.

Index: mi/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_cmd_data_write_register_values): Replace
	REGISTER_SIZE with DEPRECATED_REGISTER_SIZE.

Index: testsuite/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/watchpoint.exp: Rename CALL_DUMMY_BREAKPOINT_OFFSET to
	DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET in comments.
@
text
@d405 1
a405 1
  0,
a2186 8
#ifdef REMOTE_TRANSLATE_XFER_ADDRESS
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REMOTE_TRANSLATE_XFER_ADDRESS(gdb_addr, gdb_len, rem_addr, rem_len)",
                      XSTRING (REMOTE_TRANSLATE_XFER_ADDRESS (gdb_addr, gdb_len, rem_addr, rem_len)));
#endif
d2189 2
a2190 4
                        "gdbarch_dump: REMOTE_TRANSLATE_XFER_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->remote_translate_xfer_address
                        /*REMOTE_TRANSLATE_XFER_ADDRESS ()*/);
#endif
d4759 1
a4759 1
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len)
d4767 1
a4767 1
  gdbarch->remote_translate_xfer_address (gdb_addr, gdb_len, rem_addr, rem_len);
@


1.212
log
@2003-05-02  Andrew Cagney  <cagney@@redhat.com>

	* sentinel-frame.c (sentinel_frame_prev_register): Replace
	REGISTER_BYTE with register_offset_hack.
	* regcache.c (init_regcache_descr): When REGISTER_BYTE_P, check
	that REGISTER_BYTE is consistent with the regcache.
	* gdbarch.sh (REGISTER_BYTE): Add a predicate.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d170 1
a170 1
  int register_size;
d191 3
a193 3
  CORE_ADDR call_dummy_start_offset;
  CORE_ADDR call_dummy_breakpoint_offset;
  int call_dummy_length;
d195 2
a196 2
  LONGEST * call_dummy_words;
  int sizeof_call_dummy_words;
d198 1
a198 1
  gdbarch_fix_call_dummy_ftype *fix_call_dummy;
d530 2
a531 2
  current_gdbarch->call_dummy_words = legacy_call_dummy_words;
  current_gdbarch->sizeof_call_dummy_words = legacy_sizeof_call_dummy_words;
d666 2
a667 2
  /* Skip verify of call_dummy_words, invalid_p == 0 */
  /* Skip verify of sizeof_call_dummy_words, invalid_p == 0 */
d669 1
a669 1
  /* Skip verify of fix_call_dummy, has predicate */
a918 16
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET # %s\n",
                      XSTRING (CALL_DUMMY_BREAKPOINT_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET = %ld\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET);
#endif
#ifdef CALL_DUMMY_LENGTH
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_LENGTH # %s\n",
                      XSTRING (CALL_DUMMY_LENGTH));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_LENGTH = %d\n",
                      CALL_DUMMY_LENGTH);
#endif
a926 16
#ifdef CALL_DUMMY_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET # %s\n",
                      XSTRING (CALL_DUMMY_START_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET = %ld\n",
                      (long) CALL_DUMMY_START_OFFSET);
#endif
#ifdef CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_WORDS # %s\n",
                      XSTRING (CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) CALL_DUMMY_WORDS);
#endif
d1005 16
d1038 16
d1142 23
d1482 8
d1510 8
a1686 23
#ifdef FIX_CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FIX_CALL_DUMMY_P()",
                      XSTRING (FIX_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FIX_CALL_DUMMY_P() = %d\n",
                      FIX_CALL_DUMMY_P ());
#endif
#ifdef FIX_CALL_DUMMY
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FIX_CALL_DUMMY(dummy, pc, fun, nargs, args, type, gcc_p)",
                      XSTRING (FIX_CALL_DUMMY (dummy, pc, fun, nargs, args, type, gcc_p)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FIX_CALL_DUMMY = <0x%08lx>\n",
                        (long) current_gdbarch->fix_call_dummy
                        /*FIX_CALL_DUMMY ()*/);
#endif
a2113 8
#ifdef REGISTER_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_SIZE # %s\n",
                      XSTRING (REGISTER_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_SIZE = %d\n",
                      REGISTER_SIZE);
#endif
a2285 8
#ifdef SIZEOF_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (SIZEOF_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS = %d\n",
                      SIZEOF_CALL_DUMMY_WORDS);
#endif
d3298 1
a3298 1
gdbarch_register_size (struct gdbarch *gdbarch)
d3302 2
a3303 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_size called\n");
  return gdbarch->register_size;
d3307 2
a3308 2
set_gdbarch_register_size (struct gdbarch *gdbarch,
                           int register_size)
d3310 1
a3310 1
  gdbarch->register_size = register_size;
d3752 1
a3752 1
gdbarch_call_dummy_start_offset (struct gdbarch *gdbarch)
d3756 2
a3757 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_start_offset called\n");
  return gdbarch->call_dummy_start_offset;
d3761 2
a3762 2
set_gdbarch_call_dummy_start_offset (struct gdbarch *gdbarch,
                                     CORE_ADDR call_dummy_start_offset)
d3764 1
a3764 1
  gdbarch->call_dummy_start_offset = call_dummy_start_offset;
d3768 1
a3768 1
gdbarch_call_dummy_breakpoint_offset (struct gdbarch *gdbarch)
d3772 2
a3773 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_breakpoint_offset called\n");
  return gdbarch->call_dummy_breakpoint_offset;
d3777 2
a3778 2
set_gdbarch_call_dummy_breakpoint_offset (struct gdbarch *gdbarch,
                                          CORE_ADDR call_dummy_breakpoint_offset)
d3780 1
a3780 1
  gdbarch->call_dummy_breakpoint_offset = call_dummy_breakpoint_offset;
d3784 1
a3784 1
gdbarch_call_dummy_length (struct gdbarch *gdbarch)
d3788 2
a3789 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_length called\n");
  return gdbarch->call_dummy_length;
d3793 2
a3794 2
set_gdbarch_call_dummy_length (struct gdbarch *gdbarch,
                               int call_dummy_length)
d3796 1
a3796 1
  gdbarch->call_dummy_length = call_dummy_length;
d3827 1
a3827 1
gdbarch_call_dummy_words (struct gdbarch *gdbarch)
d3830 1
a3830 1
  /* Skip verify of call_dummy_words, invalid_p == 0 */
d3832 2
a3833 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_words called\n");
  return gdbarch->call_dummy_words;
d3837 2
a3838 2
set_gdbarch_call_dummy_words (struct gdbarch *gdbarch,
                              LONGEST * call_dummy_words)
d3840 1
a3840 1
  gdbarch->call_dummy_words = call_dummy_words;
d3844 1
a3844 1
gdbarch_sizeof_call_dummy_words (struct gdbarch *gdbarch)
d3847 1
a3847 1
  /* Skip verify of sizeof_call_dummy_words, invalid_p == 0 */
d3849 2
a3850 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sizeof_call_dummy_words called\n");
  return gdbarch->sizeof_call_dummy_words;
d3854 2
a3855 2
set_gdbarch_sizeof_call_dummy_words (struct gdbarch *gdbarch,
                                     int sizeof_call_dummy_words)
d3857 1
a3857 1
  gdbarch->sizeof_call_dummy_words = sizeof_call_dummy_words;
d3884 1
a3884 1
gdbarch_fix_call_dummy_p (struct gdbarch *gdbarch)
d3887 1
a3887 1
  return gdbarch->fix_call_dummy != 0;
d3891 1
a3891 1
gdbarch_fix_call_dummy (struct gdbarch *gdbarch, char *dummy, CORE_ADDR pc, CORE_ADDR fun, int nargs, struct value **args, struct type *type, int gcc_p)
d3894 1
a3894 1
  if (gdbarch->fix_call_dummy == 0)
d3896 1
a3896 1
                    "gdbarch: gdbarch_fix_call_dummy invalid");
d3898 2
a3899 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fix_call_dummy called\n");
  gdbarch->fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
d3903 2
a3904 2
set_gdbarch_fix_call_dummy (struct gdbarch *gdbarch,
                            gdbarch_fix_call_dummy_ftype fix_call_dummy)
d3906 1
a3906 1
  gdbarch->fix_call_dummy = fix_call_dummy;
@


1.211
log
@2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PUSH_DUMMY_CODE): New architecture method, add
	comments noteing that it replaces the old FIX_CALL_DUMMY code.
	* gdbarch.h, gdbarch.c: Re-generate.
	* d10v-tdep.c (d10v_push_dummy_code): New function.
	(d10v_gdbarch_init): Set push_dummy_code.
	* infcall.c (legacy_push_dummy_code): New function.
	(generic_push_dummy_code): New function.
	(push_dummy_code): New function.
	(call_function_by_hand): Call push_dummy_code.  Pass bp_addr,
	instead of dummy_addr, to push_dummy_call.  Move call to
	generic_save_call_dummy_addr to outside of CALL_DUMMY_LOCATION
	switch.
	* sparc-tdep.c (sparc_gdbarch_init): Mention push_dummy_code.

2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	push_dummy_code.  Add cross references.
@
text
@d646 1
a646 1
  /* Skip verify of register_byte, invalid_p == 0 */
d1978 9
d3330 7
d3343 1
@


1.210
log
@2003-05-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (REGISTER_SIZE, REGISTER_BYTES): Make optional.
	* gdbarch.h, gdbarch.c: Re-generate.
	* d10v-tdep.c (d10v_gdbarch_init): Do not set register_size,
	register_virtual_size, pc_regnum, or register_bytes.
	(D10V_PC_REGNUM): Rename _PC_REGNUM.
	(d10v_register_type): Use D10V_PC_REGNUM.
	(d10v_print_registers_info, d10v_read_pc): Ditto.
	(d10v_write_pc, d10v_eva_prepare_to_trace): Ditto.
	(d10v_unwind_pc, d10v_frame_prev_register): Ditto.
@
text
@d199 1
d436 1
d670 1
d1970 8
d3890 26
@


1.209
log
@2003-04-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (deprecated_tm_print_insn_info): Rename
	"tm_print_insn_info".
	(TARGET_PRINT_INSN_INFO): Delete macro.
	(dis_asm_read_memory): Delete function declaration.
	(dis_asm_memory_error, dis_asm_print_address): Ditto.
	(tm_print_insn_info): Delete variable definition.
	(_initialize_gdbarch): Do not initialize "tm_print_insn_info".
	* gdbarch.h, gdbarch.c: Re-generate.
	* d10v-tdep.c (display_trace): Replace "tm_print_insn_info" with
	"deprecated_tm_print_insn_info".
	* mcore-tdep.c (mcore_dump_insn): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* sparc-tdep.c (_initialize_sparc_tdep): Ditto.
	* v850-tdep.c (v850_scan_prologue, v850_gdbarch_init): Ditto.
	* ia64-tdep.c (_initialize_ia64_tdep): Ditto.
	* printcmd.c (print_insn): Use "deprecated_tm_print_insn_info"
	instead of TARGET_PRINT_INSN_INFO, add comment.
	* s390-tdep.c (s390_get_frame_info): Instead of
	"dis_asm_read_memory", use "deprecated_tm_print_insn_info".
	(s390_check_function_end, s390_is_sigreturn): Ditto.
	* corefile.c (dis_asm_read_memory): Move to "disasm.c".
	(dis_asm_memory_error, dis_asm_print_address): Ditto.
	* disasm.c: Include "gdbcore.h".
	(_initialize_disasm): New function, initialize
	"deprecated_tm_print_insn_info".
	(deprecated_tm_print_insn_info): New variable.
	(dis_asm_read_memory): Moved from "corefile.c", made static.
	(dis_asm_print_address, dis_asm_memory_error): Ditto.
	* Makefile.in (disasm.o): Update dependencies.

2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	read_fp, TARGET_READ_FP and FP_REGNUM, with deprecated_read_fp,
	DEPRECATED_TARGET_READ_FP and DEPRECATED_REGNUM.
@
text
@a516 2
  current_gdbarch->register_size = -1;
  current_gdbarch->register_bytes = -1;
a643 6
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_size == -1))
    fprintf_unfiltered (log, "\n\tregister_size");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_bytes == -1))
    fprintf_unfiltered (log, "\n\tregister_bytes");
a3280 3
  if (gdbarch->register_size == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_size invalid");
a3296 3
  if (gdbarch->register_bytes == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_bytes invalid");
@


1.208
log
@2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_TARGET_READ_FP): Replace TARGET_READ_FP.
	(DEPRECATED_FP_REGNUM): Replace FP_REGNUM.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Use DEPRECATED_FP_REGNUM,
	DEPRECATED_TARGET_READ_FP, or "sp" to create the dummy frame ID.
	* inferior.h (deprecated_read_fp): Rename read_fp.
	(generic_target_read_fp): Delete declaration.
	* regcache.c (generic_target_read_fp): Delete function.
	(deprecated_read_fp): Replace read_fp, use
	DEPRECATED_TARGET_READ_FP or DEPRECATED_FP_REGNUM.
	* d10v-tdep.c (d10v_read_fp): Delete function.
	(d10v_gdbarch_init): Do not set deprecated_read_fp.

	* sparc-tdep.c (sparc_gdbarch_init): Do not set
	deprecated_target_read_fp to generic_target_read_fp.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.

	* xstormy16-tdep.c (xstormy16_gdbarch_init): Set
	deprecated_fp_regnum.
	* x86-64-tdep.c (x86_64_init_abi): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.

	* x86-64-tdep.c (x86_64_init_abi): Set deprecated_target_read_fp.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.

	* vax-tdep.c (vax_frame_init_saved_regs): Replace FP_REGNUM with
	DEPRECATED_FP_REGNUM.
	(vax_push_dummy_frame, vax_pop_frame): Ditto.
	* std-regs.c (value_of_builtin_frame_fp_reg): Ditto.
	* sparc-tdep.c (sparc_init_extra_frame_info): Ditto.
	(sparc_push_dummy_frame, sparc64_read_fp): Ditto.
	(sparc32_register_virtual_type): Ditto.
	* sh-tdep.c (sh64_frame_chain): Ditto.
	(sh64_get_saved_register, sh64_pop_frame): Ditto.
	(sh_nofp_frame_init_saved_regs): Ditto.
	(sh64_nofp_frame_init_saved_regs): Ditto.
	(sh_fp_frame_init_saved_regs): Ditto.
	* remote-mips.c (mips_wait, mips_fetch_registers): Ditto.
	* remote-e7000.c (fetch_regs_from_dump): Ditto.
	* procfs.c (procfs_fetch_registers): Ditto.
	(procfs_store_registers): Ditto.
	* ns32knbsd-nat.c (fetch_inferior_registers): Ditto.
	(store_inferior_registers, fetch_core_registers): Ditto.
	(fetch_kcore_registers, clear_regs): Ditto.
	* ns32k-tdep.c (ns32k_frame_init_saved_regs): Ditto.
	(ns32k_push_dummy_frame, ns32k_pop_frame): Ditto.
	* nlm/i386.h (DEPRECATED_FP_REGNUM): Ditto.
	* nlm/i386.c (do_status): Ditto.
	* mipsv4-nat.c (supply_gregset): Ditto.
	* mips-tdep.c: Ditto for comments.
	* mips-nat.c (fetch_inferior_registers): Ditto.
	(store_inferior_registers, fetch_core_registers): Ditto.
	* m68k-tdep.c (m68k_push_dummy_frame): Ditto.
	(m68k_pop_frame, m68k_frame_init_saved_regs): Ditto.
	* i386-tdep.c (i386_frame_init_saved_regs): Ditto.
	(i386_do_pop_frame, i386_register_type): Ditto.
	* hppa-tdep.c (hppa_frame_chain): Ditto.
	(hppa_push_dummy_frame, find_dummy_frame_regs): Ditto.
	(hppa_pop_frame, hppa_read_fp): Ditto.
	(skip_prologue_hard_way, hppa_frame_find_saved_regs): Ditto.
	* cris-tdep.c (cris_examine, cris_pop_frame): Ditto.
	* config/vax/nm-vax.h (REGISTER_U_ADDR): Ditto.
	* config/sparc/tm-sparc.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/sparc/tm-sp64.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/s390/tm-s390.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/pa/tm-hppa64.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/ia64/tm-ia64.h (DEPRECATED_FP_REGNUM): Ditto.
	* blockframe.c: Ditto for comments.
	* arch-utils.h: Ditto for comments.
	* arch-utils.c (legacy_virtual_frame_pointer): Ditto.
	* alphanbsd-tdep.c (fetch_core_registers): Ditto.
	* alphabsd-nat.c (fetch_inferior_registers): Ditto.
	* alpha-tdep.h: Ditto for comments.
	* alpha-tdep.c (alpha_cannot_fetch_register): Ditto.
	(alpha_cannot_store_register): Ditto.
	(alpha_push_dummy_frame): Ditto.
	* alpha-nat.c (supply_gregset): Ditto.

	* config/sparc/tm-sp64.h (DEPRECATED_TARGET_READ_FP): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_TARGET_READ_FP): Update.
	* config/sparc/tm-sparc.h: Update comment.

	* hppa-tdep.c (hppa_init_extra_frame_info): Use
	deprecated_read_fp instead of TARGET_READ_FP.
	(hppa_init_extra_frame_info, hppa_frame_chain): Ditto.
	(hppa_push_dummy_frame, hppa_read_fp): Ditto.
	* sparc-tdep.c (sparc_init_extra_frame_info): Use
	deprecated_read_fp instead of read_fp.
	* s390-tdep.c (s390_push_arguments): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* frame.h: Ditto in comments.
	* frame.c (legacy_get_prev_frame): Ditto.
	* dummy-frame.c (dummy_frame_this_id): Ditto.
	* arm-tdep.c (arm_init_extra_frame_info): Ditto.

2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	read_fp, TARGET_READ_FP and FP_REGNUM, with deprecated_read_fp,
	DEPRECATED_TARGET_READ_FP and DEPRECATED_REGNUM.
@
text
@a6221 2
disassemble_info tm_print_insn_info;

a6228 6

  INIT_DISASSEMBLE_INFO_NO_ARCH (tm_print_insn_info, gdb_stdout, (fprintf_ftype)fprintf_filtered);
  tm_print_insn_info.flavour = bfd_target_unknown_flavour;
  tm_print_insn_info.read_memory_func = dis_asm_read_memory;
  tm_print_insn_info.memory_error_func = dis_asm_memory_error;
  tm_print_insn_info.print_address_func = dis_asm_print_address;
@


1.207
log
@2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (deprecated_tm_print_insn): Rename tm_print_insn.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (_initialize_xstormy16_tdep): Update.
	* vax-tdep.c (_initialize_vax_tdep): Update.
	* v850-tdep.c (_initialize_v850_tdep): Update.
	* sparc-tdep.c (_initialize_sparc_tdep): Update.
	* s390-tdep.c (_initialize_s390_tdep): Update.
	* ns32k-tdep.c (_initialize_ns32k_tdep): Update.
	* mn10300-tdep.c (_initialize_mn10300_tdep): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* m68k-tdep.c (_initialize_m68k_tdep): Update.
	* ia64-tdep.c (_initialize_ia64_tdep): Update.
	* hppa-tdep.c (_initialize_hppa_tdep): Update.
	* h8300-tdep.c (_initialize_h8300_tdep): Update.
	* frv-tdep.c (_initialize_frv_tdep): Update.
	* cris-tdep.c (cris_delayed_get_disassembler): Update.
	(_initialize_cris_tdep): Update.
	* arch-utils.c (legacy_print_insn): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.

2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	"tm_print_insn" to "deprecated_tm_print_insn".
@
text
@d150 1
a150 1
  gdbarch_read_fp_ftype *read_fp;
d159 1
a159 1
  int fp_regnum;
a501 1
  current_gdbarch->read_fp = generic_target_read_fp;
d506 1
a506 1
  current_gdbarch->fp_regnum = -1;
d624 1
a624 1
  /* Skip verify of read_fp, invalid_p == 0 */
d635 1
a635 1
  /* Skip verify of fp_regnum, invalid_p == 0 */
d1147 8
d1521 20
a1683 8
#ifdef FP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP_REGNUM # %s\n",
                      XSTRING (FP_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP_REGNUM = %d\n",
                      FP_REGNUM);
#endif
a2522 11
#ifdef TARGET_READ_FP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_FP()",
                      XSTRING (TARGET_READ_FP ()));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_READ_FP = <0x%08lx>\n",
                        (long) current_gdbarch->read_fp
                        /*TARGET_READ_FP ()*/);
#endif
d2891 7
d2899 1
a2899 1
gdbarch_read_fp (struct gdbarch *gdbarch)
d2902 1
a2902 1
  if (gdbarch->read_fp == 0)
d2904 1
a2904 1
                    "gdbarch: gdbarch_read_fp invalid");
d2906 2
a2907 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_fp called\n");
  return gdbarch->read_fp ();
d2911 2
a2912 2
set_gdbarch_read_fp (struct gdbarch *gdbarch,
                     gdbarch_read_fp_ftype read_fp)
d2914 1
a2914 1
  gdbarch->read_fp = read_fp;
d3087 1
a3087 1
gdbarch_fp_regnum (struct gdbarch *gdbarch)
d3090 1
a3090 1
  /* Skip verify of fp_regnum, invalid_p == 0 */
d3092 2
a3093 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fp_regnum called\n");
  return gdbarch->fp_regnum;
d3097 2
a3098 2
set_gdbarch_fp_regnum (struct gdbarch *gdbarch,
                       int fp_regnum)
d3100 1
a3100 1
  gdbarch->fp_regnum = fp_regnum;
@


1.206
log
@2003-04-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_SAVED_PC_AFTER_CALL): Deprecate
	SAVED_PC_AFTER_CALL.
	* gdbarch.h, gdbarch.c: Regenerate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	(ia64_saved_pc_after_call): Update declaration.
	* i386ly-tdep.c (i386lynx_init_abi): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* ns32knbsd-nat.c (frame_num_args): Update.
	* ns32k-tdep.c (umax_frame_num_args): Update.
	* mips-tdep.c (mips_init_frame_pc_first): Update.
	* infrun.c (step_over_function): Update.
	* i386-linux-tdep.c (skip_hurd_resolver): Update.
	* i386-interix-tdep.c (i386_interix_back_one_frame): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_SAVED_PC_AFTER_CALL): Update.
	(DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/pa/tm-hppa.h (DEPRECATED_SAVED_PC_AFTER_CALL): Update.
	* arm-linux-tdep.c (skip_hurd_resolver): Update.
	* arch-utils.c (init_frame_pc_default): Update.
	* alpha-tdep.c (alpha_init_frame_pc_first): Update.
	* x86-64-tdep.h (x86_64_linux_saved_pc_after_call): Update
	declaration.
@
text
@d6206 1
a6206 1
int (*tm_print_insn) (bfd_vma, disassemble_info *);
@


1.206.2.1
log
@Merge from mainline.
@
text
@d150 1
a150 1
  gdbarch_deprecated_target_read_fp_ftype *deprecated_target_read_fp;
d159 1
a159 1
  int deprecated_fp_regnum;
a198 1
  gdbarch_push_dummy_code_ftype *push_dummy_code;
a434 1
  0,
d502 1
d507 1
a507 1
  current_gdbarch->deprecated_fp_regnum = -1;
d518 2
d625 1
a625 1
  /* Skip verify of deprecated_target_read_fp, has predicate */
d636 1
a636 1
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
d647 6
a676 1
  /* Skip verify of push_dummy_code, has predicate */
a1147 8
#ifdef DEPRECATED_FP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FP_REGNUM # %s\n",
                      XSTRING (DEPRECATED_FP_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FP_REGNUM = %d\n",
                      DEPRECATED_FP_REGNUM);
#endif
a1513 20
#ifdef DEPRECATED_TARGET_READ_FP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP_P()",
                      XSTRING (DEPRECATED_TARGET_READ_FP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_TARGET_READ_FP_P() = %d\n",
                      DEPRECATED_TARGET_READ_FP_P ());
#endif
#ifdef DEPRECATED_TARGET_READ_FP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP()",
                      XSTRING (DEPRECATED_TARGET_READ_FP ()));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_TARGET_READ_FP = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_target_read_fp
                        /*DEPRECATED_TARGET_READ_FP ()*/);
#endif
d1657 8
a1955 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_push_dummy_code_p() = %d\n",
                        gdbarch_push_dummy_code_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: push_dummy_code = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_code);
d2504 11
a2882 7
int
gdbarch_deprecated_target_read_fp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_target_read_fp != 0;
}

d2884 1
a2884 1
gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch)
d2887 1
a2887 1
  if (gdbarch->deprecated_target_read_fp == 0)
d2889 1
a2889 1
                    "gdbarch: gdbarch_deprecated_target_read_fp invalid");
d2891 2
a2892 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_target_read_fp called\n");
  return gdbarch->deprecated_target_read_fp ();
d2896 2
a2897 2
set_gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_target_read_fp_ftype deprecated_target_read_fp)
d2899 1
a2899 1
  gdbarch->deprecated_target_read_fp = deprecated_target_read_fp;
d3072 1
a3072 1
gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch)
d3075 1
a3075 1
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
d3077 2
a3078 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fp_regnum called\n");
  return gdbarch->deprecated_fp_regnum;
d3082 2
a3083 2
set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,
                                  int deprecated_fp_regnum)
d3085 1
a3085 1
  gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;
d3274 3
d3293 3
a3880 26
gdbarch_push_dummy_code_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_code != 0;
}

CORE_ADDR
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->push_dummy_code == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_push_dummy_code invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_code called\n");
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, using_gcc, args, nargs, value_type, real_pc, bp_addr);
}

void
set_gdbarch_push_dummy_code (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_code_ftype push_dummy_code)
{
  gdbarch->push_dummy_code = push_dummy_code;
}

int
d6206 3
a6208 1
int (*deprecated_tm_print_insn) (bfd_vma, disassemble_info *);
d6216 6
@


1.206.2.2
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d170 2
a171 2
  int deprecated_register_size;
  int deprecated_register_bytes;
d191 3
a193 3
  CORE_ADDR deprecated_call_dummy_start_offset;
  CORE_ADDR deprecated_call_dummy_breakpoint_offset;
  int deprecated_call_dummy_length;
d195 2
a196 2
  LONGEST * deprecated_call_dummy_words;
  int deprecated_sizeof_call_dummy_words;
d198 1
a198 1
  gdbarch_deprecated_fix_call_dummy_ftype *deprecated_fix_call_dummy;
d405 1
a405 1
  generic_remote_translate_xfer_address,
d530 2
a531 2
  current_gdbarch->deprecated_call_dummy_words = legacy_call_dummy_words;
  current_gdbarch->deprecated_sizeof_call_dummy_words = legacy_sizeof_call_dummy_words;
d543 1
d646 1
a646 1
  /* Skip verify of register_byte, has predicate */
d666 2
a667 2
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
d669 1
a669 1
  /* Skip verify of deprecated_fix_call_dummy, has predicate */
d704 1
a704 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->breakpoint_from_pc == 0))
    fprintf_unfiltered (log, "\n\tbreakpoint_from_pc");
d919 16
d943 16
a1036 16
#ifdef DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET);
#endif
#ifdef DEPRECATED_CALL_DUMMY_LENGTH
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_LENGTH));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH = %d\n",
                      DEPRECATED_CALL_DUMMY_LENGTH);
#endif
a1053 16
#ifdef DEPRECATED_CALL_DUMMY_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_START_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_START_OFFSET);
#endif
#ifdef DEPRECATED_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) DEPRECATED_CALL_DUMMY_WORDS);
#endif
a1141 23
#ifdef DEPRECATED_FIX_CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FIX_CALL_DUMMY_P()",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY_P() = %d\n",
                      DEPRECATED_FIX_CALL_DUMMY_P ());
#endif
#ifdef DEPRECATED_FIX_CALL_DUMMY
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FIX_CALL_DUMMY(dummy, pc, fun, nargs, args, type, gcc_p)",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY (dummy, pc, fun, nargs, args, type, gcc_p)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_fix_call_dummy
                        /*DEPRECATED_FIX_CALL_DUMMY ()*/);
#endif
a1458 16
#ifdef DEPRECATED_REGISTER_BYTES
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES # %s\n",
                      XSTRING (DEPRECATED_REGISTER_BYTES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES = %d\n",
                      DEPRECATED_REGISTER_BYTES);
#endif
#ifdef DEPRECATED_REGISTER_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE # %s\n",
                      XSTRING (DEPRECATED_REGISTER_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE = %d\n",
                      DEPRECATED_REGISTER_SIZE);
#endif
a1478 8
#ifdef DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_SIZEOF_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS = %d\n",
                      DEPRECATED_SIZEOF_CALL_DUMMY_WORDS);
#endif
d1648 23
a1977 9
#ifdef REGISTER_BYTE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTE_P()",
                      XSTRING (REGISTER_BYTE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTE_P() = %d\n",
                      REGISTER_BYTE_P ());
#endif
d1989 8
d2089 8
d2170 8
d2180 4
a2183 2
                        "gdbarch_dump: remote_translate_xfer_address = 0x%08lx\n",
                        (long) current_gdbarch->remote_translate_xfer_address);
d2269 8
d3289 1
a3289 1
gdbarch_deprecated_register_size (struct gdbarch *gdbarch)
d3293 2
a3294 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_size called\n");
  return gdbarch->deprecated_register_size;
d3298 2
a3299 2
set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch,
                                      int deprecated_register_size)
d3301 1
a3301 1
  gdbarch->deprecated_register_size = deprecated_register_size;
d3305 1
a3305 1
gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch)
d3309 2
a3310 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_bytes called\n");
  return gdbarch->deprecated_register_bytes;
d3314 2
a3315 2
set_gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch,
                                       int deprecated_register_bytes)
d3317 1
a3317 8
  gdbarch->deprecated_register_bytes = deprecated_register_bytes;
}

int
gdbarch_register_byte_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_byte != generic_register_byte;
a3326 1
  /* Ignore predicate (gdbarch->register_byte != generic_register_byte).  */
d3735 1
a3735 1
gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch)
d3739 2
a3740 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_start_offset called\n");
  return gdbarch->deprecated_call_dummy_start_offset;
d3744 2
a3745 2
set_gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch,
                                                CORE_ADDR deprecated_call_dummy_start_offset)
d3747 1
a3747 1
  gdbarch->deprecated_call_dummy_start_offset = deprecated_call_dummy_start_offset;
d3751 1
a3751 1
gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch)
d3755 2
a3756 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_breakpoint_offset called\n");
  return gdbarch->deprecated_call_dummy_breakpoint_offset;
d3760 2
a3761 2
set_gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch,
                                                     CORE_ADDR deprecated_call_dummy_breakpoint_offset)
d3763 1
a3763 1
  gdbarch->deprecated_call_dummy_breakpoint_offset = deprecated_call_dummy_breakpoint_offset;
d3767 1
a3767 1
gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch)
d3771 2
a3772 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_length called\n");
  return gdbarch->deprecated_call_dummy_length;
d3776 2
a3777 2
set_gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch,
                                          int deprecated_call_dummy_length)
d3779 1
a3779 1
  gdbarch->deprecated_call_dummy_length = deprecated_call_dummy_length;
d3810 1
a3810 1
gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch)
d3813 1
a3813 1
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
d3815 2
a3816 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_words called\n");
  return gdbarch->deprecated_call_dummy_words;
d3820 2
a3821 2
set_gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch,
                                         LONGEST * deprecated_call_dummy_words)
d3823 1
a3823 1
  gdbarch->deprecated_call_dummy_words = deprecated_call_dummy_words;
d3827 1
a3827 1
gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch)
d3830 1
a3830 1
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
d3832 2
a3833 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sizeof_call_dummy_words called\n");
  return gdbarch->deprecated_sizeof_call_dummy_words;
d3837 2
a3838 2
set_gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch,
                                                int deprecated_sizeof_call_dummy_words)
d3840 1
a3840 1
  gdbarch->deprecated_sizeof_call_dummy_words = deprecated_sizeof_call_dummy_words;
d3867 1
a3867 1
gdbarch_deprecated_fix_call_dummy_p (struct gdbarch *gdbarch)
d3870 1
a3870 1
  return gdbarch->deprecated_fix_call_dummy != 0;
d3874 1
a3874 1
gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch, char *dummy, CORE_ADDR pc, CORE_ADDR fun, int nargs, struct value **args, struct type *type, int gcc_p)
d3877 1
a3877 1
  if (gdbarch->deprecated_fix_call_dummy == 0)
d3879 1
a3879 1
                    "gdbarch: gdbarch_deprecated_fix_call_dummy invalid");
d3881 2
a3882 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fix_call_dummy called\n");
  gdbarch->deprecated_fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
d3886 2
a3887 2
set_gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_fix_call_dummy_ftype deprecated_fix_call_dummy)
d3889 1
a3889 1
  gdbarch->deprecated_fix_call_dummy = deprecated_fix_call_dummy;
d4752 1
a4752 1
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len)
d4760 1
a4760 1
  gdbarch->remote_translate_xfer_address (gdbarch, regcache, gdb_addr, gdb_len, rem_addr, rem_len);
@


1.205
log
@2003-04-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (SAVED_PC_AFTER_CALL): Add a predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* d10v-tdep.c (d10v_saved_pc_after_call): Delete function.
	(d10v_gdbarch_init): Do not set saved_pc_after_call.
	* infrun.c (step_over_function): Call SAVED_PC_AFTER_CALL_P
	conditionally, use frame_pc_unwind as an alternative.  Add
	comments.
	* arch-utils.c (init_frame_pc_default): Only call
	SAVED_PC_AFTER_CALL when available.
@
text
@d247 1
a247 1
  gdbarch_saved_pc_after_call_ftype *saved_pc_after_call;
d731 1
a731 1
  /* Skip verify of saved_pc_after_call, has predicate */
d1457 20
a2172 20
#ifdef SAVED_PC_AFTER_CALL_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVED_PC_AFTER_CALL_P()",
                      XSTRING (SAVED_PC_AFTER_CALL_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SAVED_PC_AFTER_CALL_P() = %d\n",
                      SAVED_PC_AFTER_CALL_P ());
#endif
#ifdef SAVED_PC_AFTER_CALL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVED_PC_AFTER_CALL(frame)",
                      XSTRING (SAVED_PC_AFTER_CALL (frame)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SAVED_PC_AFTER_CALL = <0x%08lx>\n",
                        (long) current_gdbarch->saved_pc_after_call
                        /*SAVED_PC_AFTER_CALL ()*/);
#endif
d4913 1
a4913 1
gdbarch_saved_pc_after_call_p (struct gdbarch *gdbarch)
d4916 1
a4916 1
  return gdbarch->saved_pc_after_call != 0;
d4920 1
a4920 1
gdbarch_saved_pc_after_call (struct gdbarch *gdbarch, struct frame_info *frame)
d4923 1
a4923 1
  if (gdbarch->saved_pc_after_call == 0)
d4925 1
a4925 1
                    "gdbarch: gdbarch_saved_pc_after_call invalid");
d4927 2
a4928 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_saved_pc_after_call called\n");
  return gdbarch->saved_pc_after_call (frame);
d4932 2
a4933 2
set_gdbarch_saved_pc_after_call (struct gdbarch *gdbarch,
                                 gdbarch_saved_pc_after_call_ftype saved_pc_after_call)
d4935 1
a4935 1
  gdbarch->saved_pc_after_call = saved_pc_after_call;
@


1.204
log
@2003-04-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_START_OFFSET): Default to zero.
	CALL_DUMMY_LENGTH): Ditto.
	* gdbarch.c: Re-generate.
	* inferior.h (CALL_DUMMY_START_OFFSET): Delete macro.
	(CALL_DUMMY_LENGTH): Delete macro.
	* alpha-tdep.c (alpha_gdbarch_init): Do not set above when zero.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
@
text
@d731 1
a731 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->saved_pc_after_call == 0))
    fprintf_unfiltered (log, "\n\tsaved_pc_after_call");
d2153 9
d4910 7
@


1.204.2.1
log
@Merge with mainline.
@
text
@d731 3
a733 1
  /* Skip verify of saved_pc_after_call, has predicate */
a2154 9
#ifdef SAVED_PC_AFTER_CALL_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVED_PC_AFTER_CALL_P()",
                      XSTRING (SAVED_PC_AFTER_CALL_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SAVED_PC_AFTER_CALL_P() = %d\n",
                      SAVED_PC_AFTER_CALL_P ());
#endif
a4902 7
}

int
gdbarch_saved_pc_after_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->saved_pc_after_call != 0;
@


1.203
log
@2003-04-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_BREAKPOINT_OFFSET): Default to zero.
	(CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/sparc/tm-sp64.h (CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	(CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	* config/pa/tm-hppa64.h (CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	* inferior.h (CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	(CALL_DUMMY_BREAKPOINT_OFFSET): Delete.
	* infcmd.c (run_stack_dummy): Simplify assuming
	CALL_DUMMY_BREAKPOINT_OFFSET_P.
	* infrun.c (handle_inferior_event): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Do not set
	call_dummy_breakpoint_offset or call_dummy_breakpoint_offset_p.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
@
text
@a529 2
  current_gdbarch->call_dummy_start_offset = -1;
  current_gdbarch->call_dummy_length = -1;
a671 6
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_start_offset == -1))
    fprintf_unfiltered (log, "\n\tcall_dummy_start_offset");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_length == -1))
    fprintf_unfiltered (log, "\n\tcall_dummy_length");
d939 3
a941 4
  if (gdbarch->call_dummy_length >= 0)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_LENGTH = %d\n",
                        CALL_DUMMY_LENGTH);
d956 1
a956 1
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET = 0x%08lx\n",
a3718 3
  if (gdbarch->call_dummy_start_offset == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_start_offset invalid");
a3750 3
  if (gdbarch->call_dummy_length == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_length invalid");
@


1.202
log
@2003-03-31  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FIX_CALL_DUMMY): Change to function with predicate.
	* gdbarch.h, gdbarch.c: Regenerate.
	* inferior.h (FIX_CALL_DUMMY): Delete macro.
	* valops.c (hand_function_call): Only call FIX_CALL_DUMMY when
	available.
	* frame.h (generic_fix_call_dummy): Delete declaration.
	* dummy-frame.h: Update comment.
	* dummy-frame.c (generic_fix_call_dummy): Delete function.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	fix_call_dummy.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
@
text
@a192 1
  int call_dummy_breakpoint_offset_p;
a358 1
  0,
a530 2
  current_gdbarch->call_dummy_breakpoint_offset = -1;
  current_gdbarch->call_dummy_breakpoint_offset_p = -1;
a677 6
      && (gdbarch->call_dummy_breakpoint_offset_p && gdbarch->call_dummy_breakpoint_offset == -1))
    fprintf_unfiltered (log, "\n\tcall_dummy_breakpoint_offset");
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_breakpoint_offset_p == -1))
    fprintf_unfiltered (log, "\n\tcall_dummy_breakpoint_offset_p");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
a938 9
  if (CALL_DUMMY_BREAKPOINT_OFFSET_P)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
                        (long) CALL_DUMMY_BREAKPOINT_OFFSET);
#endif
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET_P # %s\n",
                      XSTRING (CALL_DUMMY_BREAKPOINT_OFFSET_P));
d940 2
a941 2
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET_P = %d\n",
                      CALL_DUMMY_BREAKPOINT_OFFSET_P);
a3746 3
  if (gdbarch->call_dummy_breakpoint_offset_p && gdbarch->call_dummy_breakpoint_offset == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_breakpoint_offset invalid");
a3756 19
}

int
gdbarch_call_dummy_breakpoint_offset_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->call_dummy_breakpoint_offset_p == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_breakpoint_offset_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_breakpoint_offset_p called\n");
  return gdbarch->call_dummy_breakpoint_offset_p;
}

void
set_gdbarch_call_dummy_breakpoint_offset_p (struct gdbarch *gdbarch,
                                            int call_dummy_breakpoint_offset_p)
{
  gdbarch->call_dummy_breakpoint_offset_p = call_dummy_breakpoint_offset_p;
@


1.201
log
@2003-03-31  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Include "symfile.h".
	(CALL_DUMMY_ADDRESS): Default to entry_point_address.
	* gdbarch.h, gdbarch.c: Re-generate.
	* inferior.h (CALL_DUMMY_ADDRESS): Delete macro.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	call_dummy_address, the default is at entry_point_address.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
@
text
@d694 1
a694 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->fix_call_dummy == 0))
    fprintf_unfiltered (log, "\n\tfix_call_dummy");
d1636 9
d3901 7
@


1.200
log
@2003-03-31  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_P): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* inferior.h (CALL_DUMMY_P): Delete macro.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* breakpoint.c (deprecated_frame_in_dummy): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* dummy-frame.c (dummy_frame_this_id): Update comments.
	* rs6000-tdep.c (rs6000_extract_struct_value_address): Ditto.
	* frame.c (legacy_get_prev_frame): Ditto.
	* valops.c (call_function_by_hand): Delete function.
	(hand_function_call): Rename to call_function_by_hand

2003-03-31  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to CALL_DUMMY_P.
@
text
@d69 1
d531 1
d677 1
a677 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_location == AT_ENTRY_POINT && gdbarch->call_dummy_address == 0))
    fprintf_unfiltered (log, "\n\tcall_dummy_address");
@


1.199
log
@2003-03-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_DUMMY_WRITE_SP): Replace TARGET_WRITE_SP.
	* gdbarch.h, gdbarch.c: Regenerate.
	* v850-tdep.c (v850_gdbarch_init): Set deprecated_dummy_write_sp.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_push_dummy_frame, sparc_pop_frame): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_DUMMY_WRITE_SP): Update.
	* config/pa/tm-hppa.h (DEPRECATED_DUMMY_WRITE_SP): Define.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* valops.c (hand_function_call): Replace TARGET_WRITE_SP with
	DEPRECATED_DUMMY_WRITE_SP.  Call when the method is available,
	instead of when push_dummy_call is not available.

2003-03-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Remove
	reference to TARGET_WRITE_SP.
@
text
@a194 1
  int call_dummy_p;
a435 1
  0,
a534 1
  current_gdbarch->call_dummy_p = -1;
a690 3
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_p == -1))
    fprintf_unfiltered (log, "\n\tcall_dummy_p");
a980 8
#ifdef CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_P # %s\n",
                      XSTRING (CALL_DUMMY_P));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_P = %d\n",
                      CALL_DUMMY_P);
#endif
a3836 19
}

int
gdbarch_call_dummy_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->call_dummy_p == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_p called\n");
  return gdbarch->call_dummy_p;
}

void
set_gdbarch_call_dummy_p (struct gdbarch *gdbarch,
                          int call_dummy_p)
{
  gdbarch->call_dummy_p = call_dummy_p;
@


1.198
log
@2003-03-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PUSH_RETURN_ADDRESS): Replace
	PUSH_RETURN_ADDRESS.
	* gdbarch.h, gdbarch.c: Regenerate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* valops.c (hand_function_call): Update.
@
text
@d151 1
a151 1
  gdbarch_write_sp_ftype *write_sp;
a506 1
  current_gdbarch->write_sp = generic_target_write_sp;
d634 1
a634 1
  /* Skip verify of write_sp, invalid_p == 0 */
d1129 23
a2600 14
#ifdef TARGET_WRITE_SP
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_SP(val)",
                      XSTRING (TARGET_WRITE_SP (val)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_SP = <0x%08lx>\n",
                        (long) current_gdbarch->write_sp
                        /*TARGET_WRITE_SP ()*/);
#endif
d2949 7
d2957 1
a2957 1
gdbarch_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
d2960 1
a2960 1
  if (gdbarch->write_sp == 0)
d2962 1
a2962 1
                    "gdbarch: gdbarch_write_sp invalid");
d2964 2
a2965 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_write_sp called\n");
  gdbarch->write_sp (val);
d2969 2
a2970 2
set_gdbarch_write_sp (struct gdbarch *gdbarch,
                      gdbarch_write_sp_ftype write_sp)
d2972 1
a2972 1
  gdbarch->write_sp = write_sp;
@


1.197
log
@2003-03-29  Andrew Cagney  <cagney@@redhat.com>

	* d10v-tdep.c (d10v_gdbarch_init): Do not set call_dummy_words or
	sizeof_call_dummy_words.
	* gdbarch.sh (CALL_DUMMY_WORDS, SIZEOF_CALL_DUMMY_WORDS): Always
	define.
	* gdbarch.h: Regenerate.
@
text
@d218 1
a218 1
  gdbarch_push_return_address_ftype *push_return_address;
d720 1
a720 1
  /* Skip verify of push_return_address, has predicate */
d1461 20
a1950 20
#ifdef PUSH_RETURN_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_RETURN_ADDRESS_P()",
                      XSTRING (PUSH_RETURN_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: PUSH_RETURN_ADDRESS_P() = %d\n",
                      PUSH_RETURN_ADDRESS_P ());
#endif
#ifdef PUSH_RETURN_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_RETURN_ADDRESS(pc, sp)",
                      XSTRING (PUSH_RETURN_ADDRESS (pc, sp)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_RETURN_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->push_return_address
                        /*PUSH_RETURN_ADDRESS ()*/);
#endif
d4319 1
a4319 1
gdbarch_push_return_address_p (struct gdbarch *gdbarch)
d4322 1
a4322 1
  return gdbarch->push_return_address != 0;
d4326 1
a4326 1
gdbarch_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
d4329 1
a4329 1
  if (gdbarch->push_return_address == 0)
d4331 1
a4331 1
                    "gdbarch: gdbarch_push_return_address invalid");
d4333 2
a4334 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_return_address called\n");
  return gdbarch->push_return_address (pc, sp);
d4338 2
a4339 2
set_gdbarch_push_return_address (struct gdbarch *gdbarch,
                                 gdbarch_push_return_address_ftype push_return_address)
d4341 1
a4341 1
  gdbarch->push_return_address = push_return_address;
@


1.196
log
@2003-03-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PUSH_ARGUMENTS): Rename PUSH_ARGUMENTS.
	(push_dummy_call): New pure multi-arch replacement with gdbarch,
	regcache and dummy_addr parameters.
	* gdbarch.h, gdbarch.c: Re-generate.
	* valops.c (hand_function_call): Use gdbarch_push_dummy_call when
	available; assume it will handle stack alignment and return
	address issues.  Fall back to DEPRECATED_PUSH_ARGUMENTS and
	legacy_push_arguments.
	(legacy_push_arguments): Rename default_push_arguments.
	* value.h (legacy_push_arguments): Rename default_push_arguments.
	* i386-tdep.c (i386_push_arguments): Call legacy_push_arguments.
	* config/sparc/tm-sparc.h (DEPRECATED_PUSH_ARGUMENTS): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_PUSH_ARGUMENTS): Update.
	* config/pa/tm-hppa.h (DEPRECATED_PUSH_ARGUMENTS): Update.
	* config/i386/tm-symmetry.h: Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* arm-linux-tdep.c (arm_linux_init_abi): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

2003-03-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	PUSH_ARGUMENTS with push_dummy_call, add gdbarch, regcache and
	dummy_addr parameters.
@
text
@d2258 2
a2259 2
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) SIZEOF_CALL_DUMMY_WORDS);
@


1.195
log
@2003-03-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED): Replace
	EXTRA_STACK_ALIGNMENT_NEEDED.  Default to 0 not 1.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/sparc/tm-sparc.h
	(DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED): Define.
	* sparc-tdep.c (sparc_gdbarch_init): Set
	deprecated_extra_stack_alignment_needed.
	* config/pa/tm-hppa.h (EXTRA_STACK_ALIGNMENT_NEEDED): Delete.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not clear
	extra_stack_alignment_needed.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
@
text
@d215 2
a216 1
  gdbarch_push_arguments_ftype *push_arguments;
d437 1
a547 1
  current_gdbarch->push_arguments = default_push_arguments;
d717 2
a718 1
  /* Skip verify of push_arguments, invalid_p == 0 */
d1418 20
a1922 5
#ifdef PUSH_ARGUMENTS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr)",
                      XSTRING (PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)));
d1925 6
a1930 4
                        "gdbarch_dump: PUSH_ARGUMENTS = <0x%08lx>\n",
                        (long) current_gdbarch->push_arguments
                        /*PUSH_ARGUMENTS ()*/);
#endif
d4240 33
d4274 1
a4274 1
gdbarch_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d4277 1
a4277 1
  if (gdbarch->push_arguments == 0)
d4279 1
a4279 1
                    "gdbarch: gdbarch_push_arguments invalid");
d4281 2
a4282 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_arguments called\n");
  return gdbarch->push_arguments (nargs, args, sp, struct_return, struct_addr);
d4286 2
a4287 2
set_gdbarch_push_arguments (struct gdbarch *gdbarch,
                            gdbarch_push_arguments_ftype push_arguments)
d4289 1
a4289 1
  gdbarch->push_arguments = push_arguments;
@


1.195.2.1
log
@Merge with mainline.
@
text
@d151 1
a151 1
  gdbarch_deprecated_dummy_write_sp_ftype *deprecated_dummy_write_sp;
d215 1
a215 2
  gdbarch_deprecated_push_arguments_ftype *deprecated_push_arguments;
  gdbarch_push_dummy_call_ftype *push_dummy_call;
d217 1
a217 1
  gdbarch_deprecated_push_return_address_ftype *deprecated_push_return_address;
a435 1
  0,
d505 1
d546 1
d634 1
a634 1
  /* Skip verify of deprecated_dummy_write_sp, has predicate */
d716 1
a716 2
  /* Skip verify of deprecated_push_arguments, has predicate */
  /* Skip verify of push_dummy_call, has predicate */
d718 1
a718 1
  /* Skip verify of deprecated_push_return_address, has predicate */
a1127 23
#ifdef DEPRECATED_DUMMY_WRITE_SP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DUMMY_WRITE_SP_P()",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP_P() = %d\n",
                      DEPRECATED_DUMMY_WRITE_SP_P ());
#endif
#ifdef DEPRECATED_DUMMY_WRITE_SP
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DUMMY_WRITE_SP(val)",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP (val)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_dummy_write_sp
                        /*DEPRECATED_DUMMY_WRITE_SP ()*/);
#endif
a1415 20
#ifdef DEPRECATED_PUSH_ARGUMENTS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS_P()",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS_P() = %d\n",
                      DEPRECATED_PUSH_ARGUMENTS_P ());
#endif
#ifdef DEPRECATED_PUSH_ARGUMENTS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr)",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_arguments
                        /*DEPRECATED_PUSH_ARGUMENTS ()*/);
#endif
a1438 20
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS_P()",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS_P() = %d\n",
                      DEPRECATED_PUSH_RETURN_ADDRESS_P ());
#endif
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS(pc, sp)",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS (pc, sp)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_return_address
                        /*DEPRECATED_PUSH_RETURN_ADDRESS ()*/);
#endif
d1901 5
d1908 18
a1925 2
                        "gdbarch_dump: gdbarch_push_dummy_call_p() = %d\n",
                        gdbarch_push_dummy_call_p (current_gdbarch));
d1928 4
a1931 2
                        "gdbarch_dump: push_dummy_call = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_call);
d2239 2
a2240 2
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS = %d\n",
                      SIZEOF_CALL_DUMMY_WORDS);
d2560 14
a2921 7
int
gdbarch_deprecated_dummy_write_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_dummy_write_sp != 0;
}

d2923 1
a2923 1
gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
d2926 1
a2926 1
  if (gdbarch->deprecated_dummy_write_sp == 0)
d2928 1
a2928 1
                    "gdbarch: gdbarch_deprecated_dummy_write_sp invalid");
d2930 2
a2931 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_dummy_write_sp called\n");
  gdbarch->deprecated_dummy_write_sp (val);
d2935 2
a2936 2
set_gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_dummy_write_sp_ftype deprecated_dummy_write_sp)
d2938 1
a2938 1
  gdbarch->deprecated_dummy_write_sp = deprecated_dummy_write_sp;
a4220 33
int
gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_arguments != 0;
}

CORE_ADDR
gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_push_arguments == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_arguments invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_arguments called\n");
  return gdbarch->deprecated_push_arguments (nargs, args, sp, struct_return, struct_addr);
}

void
set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments)
{
  gdbarch->deprecated_push_arguments = deprecated_push_arguments;
}

int
gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_call != 0;
}

d4222 1
a4222 1
gdbarch_push_dummy_call (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR dummy_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d4225 1
a4225 1
  if (gdbarch->push_dummy_call == 0)
d4227 1
a4227 1
                    "gdbarch: gdbarch_push_dummy_call invalid");
d4229 2
a4230 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_call called\n");
  return gdbarch->push_dummy_call (gdbarch, regcache, dummy_addr, nargs, args, sp, struct_return, struct_addr);
d4234 2
a4235 2
set_gdbarch_push_dummy_call (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_call_ftype push_dummy_call)
d4237 1
a4237 1
  gdbarch->push_dummy_call = push_dummy_call;
d4267 1
a4267 1
gdbarch_deprecated_push_return_address_p (struct gdbarch *gdbarch)
d4270 1
a4270 1
  return gdbarch->deprecated_push_return_address != 0;
d4274 1
a4274 1
gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
d4277 1
a4277 1
  if (gdbarch->deprecated_push_return_address == 0)
d4279 1
a4279 1
                    "gdbarch: gdbarch_deprecated_push_return_address invalid");
d4281 2
a4282 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_return_address called\n");
  return gdbarch->deprecated_push_return_address (pc, sp);
d4286 2
a4287 2
set_gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_push_return_address_ftype deprecated_push_return_address)
d4289 1
a4289 1
  gdbarch->deprecated_push_return_address = deprecated_push_return_address;
@


1.194
log
@2003-03-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_STORE_STRUCT_RETURN): Replace
	STORE_STRUCT_RETURN.
	* gdbarch.h, gdbarch.c: Regenerate.
	* d10v-tdep.c (d10v_store_struct_return): Delete function.
	(d10v_push_arguments): Set the struct return register.
	(d10v_gdbarch_init): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
@
text
@d251 1
a251 1
  int extra_stack_alignment_needed;
a561 1
  current_gdbarch->extra_stack_alignment_needed = 1;
d764 1
a764 1
  /* Skip verify of extra_stack_alignment_needed, invalid_p == 0 */
d1162 8
a1587 8
#ifdef EXTRA_STACK_ALIGNMENT_NEEDED
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRA_STACK_ALIGNMENT_NEEDED # %s\n",
                      XSTRING (EXTRA_STACK_ALIGNMENT_NEEDED));
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRA_STACK_ALIGNMENT_NEEDED = %d\n",
                      EXTRA_STACK_ALIGNMENT_NEEDED);
#endif
d5004 1
a5004 1
gdbarch_extra_stack_alignment_needed (struct gdbarch *gdbarch)
d5007 1
a5007 1
  /* Skip verify of extra_stack_alignment_needed, invalid_p == 0 */
d5009 2
a5010 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extra_stack_alignment_needed called\n");
  return gdbarch->extra_stack_alignment_needed;
d5014 2
a5015 2
set_gdbarch_extra_stack_alignment_needed (struct gdbarch *gdbarch,
                                          int extra_stack_alignment_needed)
d5017 1
a5017 1
  gdbarch->extra_stack_alignment_needed = extra_stack_alignment_needed;
@


1.193
log
@2003-03-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_STACK_ADJUST_P): Delete.
	(DEPRECATED_CALL_DUMMY_STACK_ADJUST): Replace
	CALL_DUMMY_STACK_ADJUST with a predicate variable.
	* gdbarch.h, gdbarch.c: Regenerate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	call_dummy_stack_adjust_p.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
	* config/sparc/tm-sp64.h (CALL_DUMMY_STACK_ADJUST): Update.
	* config/sparc/tm-sparc.h (CALL_DUMMY_STACK_ADJUST): Update.
	* config/sparc/tm-sp64.h (CALL_DUMMY_STACK_ADJUST): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.  Do not set
	call_dummy_stack_adjust_p.
	* inferior.h (CALL_DUMMY_STACK_ADJUST_P): Delete macro.
	(CALL_DUMMY_STACK_ADJUST): Delete macro.
	* sparc-tdep.c (sparc32_push_arguments): Update.
	* valops.c (hand_function_call): Update.

2003-03-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	reference to CALL_DUMMY_STACK_ADJUST_P.  Rename
	CALL_DUMMY_STACK_ADJUST to DEPRECATED_CALL_DUMMY_STACK_ADJUST.
	Add reference to PUSH_ARGUMENTS.
@
text
@d219 1
a219 1
  gdbarch_store_struct_return_ftype *store_struct_return;
d721 1
a721 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->store_struct_return == 0))
    fprintf_unfiltered (log, "\n\tstore_struct_return");
d1446 23
a2351 14
#ifdef STORE_STRUCT_RETURN
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STORE_STRUCT_RETURN(addr, sp)",
                      XSTRING (STORE_STRUCT_RETURN (addr, sp)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_STRUCT_RETURN = <0x%08lx>\n",
                        (long) current_gdbarch->store_struct_return
                        /*STORE_STRUCT_RETURN ()*/);
#endif
d4319 7
d4327 1
a4327 1
gdbarch_store_struct_return (struct gdbarch *gdbarch, CORE_ADDR addr, CORE_ADDR sp)
d4330 1
a4330 1
  if (gdbarch->store_struct_return == 0)
d4332 1
a4332 1
                    "gdbarch: gdbarch_store_struct_return invalid");
d4334 2
a4335 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_store_struct_return called\n");
  gdbarch->store_struct_return (addr, sp);
d4339 2
a4340 2
set_gdbarch_store_struct_return (struct gdbarch *gdbarch,
                                 gdbarch_store_struct_return_ftype store_struct_return)
d4342 1
a4342 1
  gdbarch->store_struct_return = store_struct_return;
@


1.192
log
@Index: ChangeLog
2003-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAME_CHAIN): Replace FRAME_CHAIN.
	(DEPRECATED_FRAME_CHAIN_VALID): Replace FRAME_CHAIN_VALID.
	* gdbarch.h, gdbarch.c: Regenerate.
	* valops.c (hand_function_call): Update.
	* objfiles.h (DEPRECATED_FRAME_CHAIN_VALID): Update.
	* frame.c (legacy_saved_regs_this_id): Update.
	(legacy_get_prev_frame, get_prev_frame, legacy_frame_p): Update.
	* dummy-frame.h: Update.
	* config/sparc/tm-sparc.h (DEPRECATED_FRAME_CHAIN): Update.
	* config/pa/tm-hppa.h (DEPRECATED_FRAME_CHAIN_VALID): Update.
	* config/m68k/tm-vx68.h (DEPRECATED_FRAME_CHAIN): Update.
	* config/m68k/tm-os68k.h (DEPRECATED_FRAME_CHAIN): Update.
	* config/m68k/tm-sun3.h: Update.
	* blockframe.c (inside_main_func, frame_chain_valid): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_frame_chain, sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_frame_saved_pc): Update.
	(rs6000_gdbarch_init, rs6000_frame_saved_pc): Update.
	(frame_get_saved_regs): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_frame_num_args, i386_gdbarch_init): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	(i386_interix_back_one_frame): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	(hppa_init_extra_frame_info): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

Index: doc/ChangeLog
2003-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Algorithms, Target Architecture Definition):
	Deprecate FRAME_CHAIN and FRAME_CHAIN_VALID.
@
text
@d198 1
a198 2
  int call_dummy_stack_adjust_p;
  int call_dummy_stack_adjust;
a435 1
  0,
a538 1
  current_gdbarch->call_dummy_stack_adjust_p = -1;
d700 1
a700 6
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_stack_adjust_p == -1))
    fprintf_unfiltered (log, "\n\tcall_dummy_stack_adjust_p");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_stack_adjust_p && gdbarch->call_dummy_stack_adjust == 0))
    fprintf_unfiltered (log, "\n\tcall_dummy_stack_adjust");
a996 17
#ifdef CALL_DUMMY_STACK_ADJUST
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST # %s\n",
                      XSTRING (CALL_DUMMY_STACK_ADJUST));
  if (CALL_DUMMY_STACK_ADJUST_P)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_STACK_ADJUST = 0x%08lx\n",
                        (long) CALL_DUMMY_STACK_ADJUST);
#endif
#ifdef CALL_DUMMY_STACK_ADJUST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST_P # %s\n",
                      XSTRING (CALL_DUMMY_STACK_ADJUST_P));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST_P = 0x%08lx\n",
                      (long) CALL_DUMMY_STACK_ADJUST_P);
#endif
d1091 17
d3867 1
a3867 1
gdbarch_call_dummy_stack_adjust_p (struct gdbarch *gdbarch)
d3870 1
a3870 13
  if (gdbarch->call_dummy_stack_adjust_p == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_stack_adjust_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_stack_adjust_p called\n");
  return gdbarch->call_dummy_stack_adjust_p;
}

void
set_gdbarch_call_dummy_stack_adjust_p (struct gdbarch *gdbarch,
                                       int call_dummy_stack_adjust_p)
{
  gdbarch->call_dummy_stack_adjust_p = call_dummy_stack_adjust_p;
d3874 1
a3874 1
gdbarch_call_dummy_stack_adjust (struct gdbarch *gdbarch)
a3876 3
  if (gdbarch->call_dummy_stack_adjust_p && gdbarch->call_dummy_stack_adjust == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_stack_adjust invalid");
d3878 2
a3879 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_stack_adjust called\n");
  return gdbarch->call_dummy_stack_adjust;
d3883 2
a3884 2
set_gdbarch_call_dummy_stack_adjust (struct gdbarch *gdbarch,
                                     int call_dummy_stack_adjust)
d3886 1
a3886 1
  gdbarch->call_dummy_stack_adjust = call_dummy_stack_adjust;
@


1.191
log
@2003-03-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_GET_SAVED_REGISTER): Replace
	GET_SAVED_REGISTER.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.h: Update comments.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* frame.c (frame_register): Update.
	(get_saved_register): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_GET_SAVED_REGISTER): Update.
@
text
@d242 2
a243 2
  gdbarch_frame_chain_ftype *frame_chain;
  gdbarch_frame_chain_valid_ftype *frame_chain_valid;
d761 2
a762 2
  /* Skip verify of frame_chain, has predicate */
  /* Skip verify of frame_chain_valid, has predicate */
d1173 40
a1635 40
#ifdef FRAME_CHAIN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN_P()",
                      XSTRING (FRAME_CHAIN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_CHAIN_P() = %d\n",
                      FRAME_CHAIN_P ());
#endif
#ifdef FRAME_CHAIN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN(frame)",
                      XSTRING (FRAME_CHAIN (frame)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_CHAIN = <0x%08lx>\n",
                        (long) current_gdbarch->frame_chain
                        /*FRAME_CHAIN ()*/);
#endif
#ifdef FRAME_CHAIN_VALID_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN_VALID_P()",
                      XSTRING (FRAME_CHAIN_VALID_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_CHAIN_VALID_P() = %d\n",
                      FRAME_CHAIN_VALID_P ());
#endif
#ifdef FRAME_CHAIN_VALID
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN_VALID(chain, thisframe)",
                      XSTRING (FRAME_CHAIN_VALID (chain, thisframe)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_CHAIN_VALID = <0x%08lx>\n",
                        (long) current_gdbarch->frame_chain_valid
                        /*FRAME_CHAIN_VALID ()*/);
#endif
d4782 1
a4782 1
gdbarch_frame_chain_p (struct gdbarch *gdbarch)
d4785 1
a4785 1
  return gdbarch->frame_chain != 0;
d4789 1
a4789 1
gdbarch_frame_chain (struct gdbarch *gdbarch, struct frame_info *frame)
d4792 1
a4792 1
  if (gdbarch->frame_chain == 0)
d4794 1
a4794 1
                    "gdbarch: gdbarch_frame_chain invalid");
d4796 2
a4797 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_chain called\n");
  return gdbarch->frame_chain (frame);
d4801 2
a4802 2
set_gdbarch_frame_chain (struct gdbarch *gdbarch,
                         gdbarch_frame_chain_ftype frame_chain)
d4804 1
a4804 1
  gdbarch->frame_chain = frame_chain;
d4808 1
a4808 1
gdbarch_frame_chain_valid_p (struct gdbarch *gdbarch)
d4811 1
a4811 1
  return gdbarch->frame_chain_valid != 0;
d4815 1
a4815 1
gdbarch_frame_chain_valid (struct gdbarch *gdbarch, CORE_ADDR chain, struct frame_info *thisframe)
d4818 1
a4818 1
  if (gdbarch->frame_chain_valid == 0)
d4820 1
a4820 1
                    "gdbarch: gdbarch_frame_chain_valid invalid");
d4822 2
a4823 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_chain_valid called\n");
  return gdbarch->frame_chain_valid (chain, thisframe);
d4827 2
a4828 2
set_gdbarch_frame_chain_valid (struct gdbarch *gdbarch,
                               gdbarch_frame_chain_valid_ftype frame_chain_valid)
d4830 1
a4830 1
  gdbarch->frame_chain_valid = frame_chain_valid;
@


1.190
log
@2003-03-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_POP_FRAME): Replace POP_FRAME.
	* gdbarch.h, gdbarch.c: Regenerate.
	* valops.c (hand_function_call): Update comment.
	* stack.c (return_command): Update comment.
	* config/sparc/tm-sparc.h (DEPRECATED_POP_FRAME): Update.
	* config/pa/tm-hppa.h (DEPRECATED_POP_FRAME): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

2003-03-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	POP_FRAME with DEPRECATED_POP_FRAME.  Update description.
@
text
@d205 1
a205 1
  gdbarch_get_saved_register_ftype *get_saved_register;
d714 1
a714 1
  /* Skip verify of get_saved_register, has predicate */
d1216 23
a1685 23
#ifdef GET_SAVED_REGISTER_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_SAVED_REGISTER_P()",
                      XSTRING (GET_SAVED_REGISTER_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: GET_SAVED_REGISTER_P() = %d\n",
                      GET_SAVED_REGISTER_P ());
#endif
#ifdef GET_SAVED_REGISTER
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval)",
                      XSTRING (GET_SAVED_REGISTER (raw_buffer, optimized, addrp, frame, regnum, lval)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: GET_SAVED_REGISTER = <0x%08lx>\n",
                        (long) current_gdbarch->get_saved_register
                        /*GET_SAVED_REGISTER ()*/);
#endif
d4016 1
a4016 1
gdbarch_get_saved_register_p (struct gdbarch *gdbarch)
d4019 1
a4019 1
  return gdbarch->get_saved_register != 0;
d4023 1
a4023 1
gdbarch_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR *addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
d4026 1
a4026 1
  if (gdbarch->get_saved_register == 0)
d4028 1
a4028 1
                    "gdbarch: gdbarch_get_saved_register invalid");
d4030 2
a4031 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_saved_register called\n");
  gdbarch->get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval);
d4035 2
a4036 2
set_gdbarch_get_saved_register (struct gdbarch *gdbarch,
                                gdbarch_get_saved_register_ftype get_saved_register)
d4038 1
a4038 1
  gdbarch->get_saved_register = get_saved_register;
@


1.189
log
@2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAME_SAVED_PC): Replace FRAME_SAVED_PC.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.h: Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* sh-tdep.c (sh_init_extra_frame_info): Update.
	(sh64_init_extra_frame_info): Update.
	* ns32knbsd-nat.c (frame_num_args): Update.
	* m68hc11-tdep.c (m68hc11_init_extra_frame_info): Update.
	* xstormy16-tdep.c (xstormy16_pop_frame): Update.
	(xstormy16_frame_chain_valid): Update.
	* vax-tdep.c (vax_saved_pc_after_call): Update.
	* v850-tdep.c (v850_frame_chain): Update.
	(v850_pop_frame): Update.
	(v850_init_extra_frame_info): Update.
	* sparc-tdep.c (setup_arbitrary_frame): Update.
	* ns32k-tdep.c (umax_frame_num_args): Update.
	* s390-tdep.c (s390_pop_frame_regular): Update.
	* mn10300-tdep.c (mn10300_frame_chain): Update.
	(mn10300_pop_frame_regular): Update.
	(mn10300_init_extra_frame_info): Update.
	* mips-tdep.c (mips_init_frame_pc_first): Update.
	(mips_frame_chain): Update.
	(mips_pop_frame): Update.
	* mcore-tdep.c (mcore_frame_chain): Update.
	(mcore_pop_frame): Update.
	(mcore_init_extra_frame_info): Update.
	* arch-utils.c (init_frame_pc_default): Update.
	* m68k-tdep.c (isi_frame_num_args): Update.
	(delta68_frame_num_args): Update.
	(news_frame_num_args): Update.
	* ia64-tdep.c (ia64_pop_frame_regular): Update.
	* alpha-tdep.c (alpha_init_frame_pc_first): Update.
	(alpha_frame_chain): Update.
	(alpha_pop_frame): Update.
	* hppa-tdep.c (hppa_saved_pc_after_call): Update.
	(hppa_init_extra_frame_info): Update.
	(hppa_frame_chain): Update.
	(hppa_frame_chain_valid): Update.
	* cris-tdep.c (cris_init_extra_frame_info): Update.
	* avr-tdep.c (avr_init_extra_frame_info): Update.
	* arm-tdep.c (arm_frame_chain_valid): Update.
	(arm_init_extra_frame_info): Update.
	(arm_pop_frame): Update.
	* frame.c (frame_pc_unwind): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_FRAME_SAVED_PC): Update.
	(DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/pa/tm-hppa.h (DEPRECATED_FRAME_SAVED_PC): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_FRAME_SAVED_PC): Update.
	* config/m68k/tm-linux.h (DEPRECATED_FRAME_SAVED_PC): Update.

2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	FRAME_SAVED_PC to DEPRECATED_FRAME_SAVED_PC.
@
text
@d219 1
a219 1
  gdbarch_pop_frame_ftype *pop_frame;
d728 1
a728 1
  /* Skip verify of pop_frame, has predicate */
d1333 23
a1838 23
#ifdef POP_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "POP_FRAME_P()",
                      XSTRING (POP_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: POP_FRAME_P() = %d\n",
                      POP_FRAME_P ());
#endif
#ifdef POP_FRAME
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "POP_FRAME(-)",
                      XSTRING (POP_FRAME (-)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: POP_FRAME = <0x%08lx>\n",
                        (long) current_gdbarch->pop_frame
                        /*POP_FRAME ()*/);
#endif
d4310 1
a4310 1
gdbarch_pop_frame_p (struct gdbarch *gdbarch)
d4313 1
a4313 1
  return gdbarch->pop_frame != 0;
d4317 1
a4317 1
gdbarch_pop_frame (struct gdbarch *gdbarch)
d4320 1
a4320 1
  if (gdbarch->pop_frame == 0)
d4322 1
a4322 1
                    "gdbarch: gdbarch_pop_frame invalid");
d4324 2
a4325 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pop_frame called\n");
  gdbarch->pop_frame ();
d4329 2
a4330 2
set_gdbarch_pop_frame (struct gdbarch *gdbarch,
                       gdbarch_pop_frame_ftype pop_frame)
d4332 1
a4332 1
  gdbarch->pop_frame = pop_frame;
@


1.188
log
@2003-03-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (gdbarch_unwind_pc): New method.
	* gdbarch.h, gdbarch.c: Regenerate.
	* frame.c (frame_pc_unwind): Rewrite.  Prefer gdbarch_unwind_pc,
	but use read_pc and FRAME_SAVED_PC as fall backs.
	(frame_saved_regs_pc_unwind): Delete function.
	(trad_frame_unwinder): Update.
	* frame-unwind.h (frame_unwind_pc_ftype): Delete declaration.
	(struct frame_unwind): Update.
	* dummy-frame.c (dummy_frame_pc_unwind): Delete function.
	(dummy_frame_unwind): Update.
	* sentinel-frame.c (sentinel_frame_pc_unwind): Delete function.
	(sentinel_frame_unwinder): Update.
	* d10v-tdep.c (d10v_frame_pc_unwind): Delete function.
	(d10v_frame_unwind): Update.
	(d10v_unwind_pc): New function.
	(d10v_gdbarch_init): Set unwind_pc.

Index: doc/ChangeLog
2003-03-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Cross reference
	FRAME_SAVED_PC to unwind_pc.  Document unwind_pc.
@
text
@d244 1
a244 1
  gdbarch_frame_saved_pc_ftype *frame_saved_pc;
d763 1
a763 1
  /* Skip verify of frame_saved_pc, has predicate */
d1196 20
a1611 20
#ifdef FRAME_SAVED_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_SAVED_PC_P()",
                      XSTRING (FRAME_SAVED_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_SAVED_PC_P() = %d\n",
                      FRAME_SAVED_PC_P ());
#endif
#ifdef FRAME_SAVED_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_SAVED_PC(fi)",
                      XSTRING (FRAME_SAVED_PC (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_SAVED_PC = <0x%08lx>\n",
                        (long) current_gdbarch->frame_saved_pc
                        /*FRAME_SAVED_PC ()*/);
#endif
d4834 1
a4834 1
gdbarch_frame_saved_pc_p (struct gdbarch *gdbarch)
d4837 1
a4837 1
  return gdbarch->frame_saved_pc != 0;
d4841 1
a4841 1
gdbarch_frame_saved_pc (struct gdbarch *gdbarch, struct frame_info *fi)
d4844 1
a4844 1
  if (gdbarch->frame_saved_pc == 0)
d4846 1
a4846 1
                    "gdbarch: gdbarch_frame_saved_pc invalid");
d4848 2
a4849 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_saved_pc called\n");
  return gdbarch->frame_saved_pc (fi);
d4853 2
a4854 2
set_gdbarch_frame_saved_pc (struct gdbarch *gdbarch,
                            gdbarch_frame_saved_pc_ftype frame_saved_pc)
d4856 1
a4856 1
  gdbarch->frame_saved_pc = frame_saved_pc;
@


1.187
log
@2003-03-05  Andrew Cagney  <cagney@@redhat.com>

	* d10v-tdep.c (d10v_unwind_dummy_id): New function.
	(d10v_gdbarch_init): Set unwind_dummy_id and save_dummy_frame_tos.
	* frame.c (get_prev_frame): Restructure the frame ID unwind code
	to use unwind_dummy_id when a dummy frame.
	* gdbarch.sh (unwind_dummy_id): New multi-arch method with
	predicate.
	* gdbarch.h, gdbarch.c: Regneerate.

Index: doc/ChangeLog
2003-03-05  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	unwind_dummy_id.  Cross reference unwind_dummy_id and
	SAVE_DUMMY_FRAME_TOS.
@
text
@d245 1
d437 1
d764 1
d2584 8
d4857 26
@


1.187.2.1
log
@2003-03-16  Mark Kettenis  <kettenis@@gnu.org>

	Merge with mainline.  Tag is kettenis-i386newframe-20030316-mergepoint.
@
text
@d205 1
a205 1
  gdbarch_deprecated_get_saved_register_ftype *deprecated_get_saved_register;
d219 1
a219 1
  gdbarch_deprecated_pop_frame_ftype *deprecated_pop_frame;
d244 1
a244 2
  gdbarch_deprecated_frame_saved_pc_ftype *deprecated_frame_saved_pc;
  gdbarch_unwind_pc_ftype *unwind_pc;
a435 1
  0,
d712 1
a712 1
  /* Skip verify of deprecated_get_saved_register, has predicate */
d726 1
a726 1
  /* Skip verify of deprecated_pop_frame, has predicate */
d761 1
a761 2
  /* Skip verify of deprecated_frame_saved_pc, has predicate */
  /* Skip verify of unwind_pc, has predicate */
a1192 43
#ifdef DEPRECATED_FRAME_SAVED_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_SAVED_PC_P()",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC_P() = %d\n",
                      DEPRECATED_FRAME_SAVED_PC_P ());
#endif
#ifdef DEPRECATED_FRAME_SAVED_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_SAVED_PC(fi)",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_saved_pc
                        /*DEPRECATED_FRAME_SAVED_PC ()*/);
#endif
#ifdef DEPRECATED_GET_SAVED_REGISTER_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_GET_SAVED_REGISTER_P()",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER_P() = %d\n",
                      DEPRECATED_GET_SAVED_REGISTER_P ());
#endif
#ifdef DEPRECATED_GET_SAVED_REGISTER
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval)",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER (raw_buffer, optimized, addrp, frame, regnum, lval)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_get_saved_register
                        /*DEPRECATED_GET_SAVED_REGISTER ()*/);
#endif
a1309 23
#ifdef DEPRECATED_POP_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME_P()",
                      XSTRING (DEPRECATED_POP_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_POP_FRAME_P() = %d\n",
                      DEPRECATED_POP_FRAME_P ());
#endif
#ifdef DEPRECATED_POP_FRAME
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME(-)",
                      XSTRING (DEPRECATED_POP_FRAME (-)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_POP_FRAME = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_pop_frame
                        /*DEPRECATED_POP_FRAME ()*/);
#endif
d1589 20
d1637 23
d1813 23
a2580 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                        gdbarch_unwind_pc_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_pc = 0x%08lx\n",
                        (long) current_gdbarch->unwind_pc);
d4005 1
a4005 1
gdbarch_deprecated_get_saved_register_p (struct gdbarch *gdbarch)
d4008 1
a4008 1
  return gdbarch->deprecated_get_saved_register != 0;
d4012 1
a4012 1
gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR *addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
d4015 1
a4015 1
  if (gdbarch->deprecated_get_saved_register == 0)
d4017 1
a4017 1
                    "gdbarch: gdbarch_deprecated_get_saved_register invalid");
d4019 2
a4020 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_get_saved_register called\n");
  gdbarch->deprecated_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval);
d4024 2
a4025 2
set_gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_get_saved_register_ftype deprecated_get_saved_register)
d4027 1
a4027 1
  gdbarch->deprecated_get_saved_register = deprecated_get_saved_register;
d4299 1
a4299 1
gdbarch_deprecated_pop_frame_p (struct gdbarch *gdbarch)
d4302 1
a4302 1
  return gdbarch->deprecated_pop_frame != 0;
d4306 1
a4306 1
gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch)
d4309 1
a4309 1
  if (gdbarch->deprecated_pop_frame == 0)
d4311 1
a4311 1
                    "gdbarch: gdbarch_deprecated_pop_frame invalid");
d4313 2
a4314 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pop_frame called\n");
  gdbarch->deprecated_pop_frame ();
d4318 2
a4319 2
set_gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch,
                                  gdbarch_deprecated_pop_frame_ftype deprecated_pop_frame)
d4321 1
a4321 1
  gdbarch->deprecated_pop_frame = deprecated_pop_frame;
d4823 1
a4823 27
gdbarch_deprecated_frame_saved_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_saved_pc != 0;
}

CORE_ADDR
gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch, struct frame_info *fi)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_frame_saved_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_saved_pc invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_saved_pc called\n");
  return gdbarch->deprecated_frame_saved_pc (fi);
}

void
set_gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_frame_saved_pc_ftype deprecated_frame_saved_pc)
{
  gdbarch->deprecated_frame_saved_pc = deprecated_frame_saved_pc;
}

int
gdbarch_unwind_pc_p (struct gdbarch *gdbarch)
d4826 1
a4826 1
  return gdbarch->unwind_pc != 0;
d4830 1
a4830 1
gdbarch_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
d4833 1
a4833 1
  if (gdbarch->unwind_pc == 0)
d4835 1
a4835 1
                    "gdbarch: gdbarch_unwind_pc invalid");
d4837 2
a4838 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_pc called\n");
  return gdbarch->unwind_pc (gdbarch, next_frame);
d4842 2
a4843 2
set_gdbarch_unwind_pc (struct gdbarch *gdbarch,
                       gdbarch_unwind_pc_ftype unwind_pc)
d4845 1
a4845 1
  gdbarch->unwind_pc = unwind_pc;
@


1.186
log
@2003-03-03  Andrew Cagney  <cagney@@redhat.com>

	Make MAX_REGISTER_RAW_SIZE and MAX_REGISTER_VIRTUAL_SIZE optional.
	* gdbarch.sh (DEPRECATED_MAX_REGISTER_RAW_SIZE): Variable with
	predicate.  Replace MAX_REGISTER_RAW_SIZE.
	(DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE): Ditto for
	MAX_REGISTER_VIRTUAL_SIZE.
	* regcache.c (legacy_max_register_raw_size): New function.
	(legacy_max_register_virtual_size): New function.
	* defs.h (MAX_REGISTER_VIRTUAL_SIZE): Define.
	(MAX_REGISTER_RAW_SIZE): Define.
	(legacy_max_register_raw_size): Declare.
	(legacy_max_register_virtual_size): Declare.
	* config/sparc/tm-sparc.h (DEPRECATED_MAX_REGISTER_RAW_SIZE)
	(DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_MAX_REGISTER_RAW_SIZE)
	(DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE): Ditto.
	* config/pa/tm-hppa.h (DEPRECATED_MAX_REGISTER_RAW_SIZE)
	(DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE): Ditto.
	* config/pa/tm-hppa64.h (DEPRECATED_MAX_REGISTER_RAW_SIZE): Ditto.
	* config/ia64/tm-ia64.h (DEPRECATED_MAX_REGISTER_RAW_SIZE): Ditto.
	* config/i386/tm-ptx.h (DEPRECATED_MAX_REGISTER_RAW_SIZE): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Do not set
	max_register_raw_size or max_register_virtual_size.
@
text
@d254 1
d435 1
d775 1
d2573 8
d5043 26
@


1.186.2.1
log
@2003-03-04  Andrew Cagney  <cagney@@redhat.com>

	* d10v-tdep.c (struct d10v_unwind_cache): Add field "r11_addr",
	change type of "next_addr" to LONGEST.  Delete member "frameless".
	(prologue_find_regs): Parse "st rn, @@r11", save r11's offset.
	(d10v_frame_unwind_cache): Compute both the frame base and the
	previous stack pointer.  Store the previous SP's value in the
	saved_regs array.
	(d10v_frame_id_unwind): Remove commented out code.  Check for
	circular stack.
	(saved_regs_unwinder): When SP_REGNUM, extract the value from the
	saved_regs array.
	(d10v_unwind_dummy_id): New function.
	(d10v_gdbarch_init): Initialize d10v_unwind_dummy_id and
	save_dummy_frame_tos.
	(struct frame_extra_info): Delete.
	(saved_regs_unwind): New function.
	(d10v_frame_pop): Update to match current code.
	(d10v_frame_register_unwind): Don't unwind LR_REGNUM.  Unwind the
	PC_REGNUM by returning the saved LR_REGNUM.
	* frame.c (get_prev_frame): Store this frame's ID in the next
	frame's unwound ID cache.
	(deprecated_update_frame_pc_hack): Update the cached value in NEXT
	as well.

	2003-02-27  Andrew Cagney  <cagney@@redhat.com>
	* frame.c (get_prev_frame): Rewrite the frame ID unwind code to
	use unwind_dummy_id when available.
	* gdbarch.sh (get_dummy_frame_id): New multi-arch method with
	predicate.
	* gdbarch.h, gdbarch.c: Regneerate.
@
text
@a253 1
  gdbarch_unwind_dummy_id_ftype *unwind_dummy_id;
a433 1
  0,
a772 1
  /* Skip verify of unwind_dummy_id, has predicate */
a2569 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                        gdbarch_unwind_dummy_id_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_dummy_id = 0x%08lx\n",
                        (long) current_gdbarch->unwind_dummy_id);
a5031 26
}

int
gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_dummy_id != 0;
}

struct frame_id
gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->unwind_dummy_id == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_dummy_id invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_dummy_id called\n");
  return gdbarch->unwind_dummy_id (gdbarch, info);
}

void
set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch,
                             gdbarch_unwind_dummy_id_ftype unwind_dummy_id)
{
  gdbarch->unwind_dummy_id = unwind_dummy_id;
@


1.186.2.2
log
@2003-03-06  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (gdbarch_unwind_pc): New method.
	* gdbarch.h, gdbarch.c: Regenerate.
	* frame.c (frame_pc_unwind): Rewrite.  Prefer gdbarch_unwind_pc,
	but use read_pc and FRAME_SAVED_PC as fall backs.
	(frame_saved_regs_pc_unwind): Delete function.
	(trad_frame_unwinder): Update.
	* frame-unwind.h (frame_unwind_pc_ftype): Delete declaration.
	(struct frame_unwind): Update.
	* dummy-frame.c (dummy_frame_pc_unwind): Delete function.
	(dummy_frame_unwind): Update.
	* sentinel-frame.c (sentinel_frame_pc_unwind): Delete function.
	(sentinel_frame_unwinder): Update.
	* d10v-tdep.c (d10v_frame_pc_unwind): Delete function.
	(d10v_frame_unwind): Update.
	(d10v_unwind_pc): New function.
	(d10v_gdbarch_init): Set unwind_pc.

2003-03-05  Andrew Cagney  <cagney@@redhat.com>

	* dummy-frame.c (dummy_frame_id_unwind): Abort if called.
	(cached_find_dummy_frame): Add hack to obtain this thread's id
	without calling id unwind.
	* frame.h: Merge with mainline.
	* d10v-tdep.c: Merge with mainline.
	* frame.c: Merge with mainline.
@
text
@a244 1
  gdbarch_unwind_pc_ftype *unwind_pc;
a435 1
  0,
a761 1
  /* Skip verify of unwind_pc, has predicate */
a2580 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                        gdbarch_unwind_pc_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_pc = 0x%08lx\n",
                        (long) current_gdbarch->unwind_pc);
a4845 26
}

int
gdbarch_unwind_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_pc != 0;
}

CORE_ADDR
gdbarch_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->unwind_pc == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_pc invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_pc called\n");
  return gdbarch->unwind_pc (gdbarch, next_frame);
}

void
set_gdbarch_unwind_pc (struct gdbarch *gdbarch,
                       gdbarch_unwind_pc_ftype unwind_pc)
{
  gdbarch->unwind_pc = unwind_pc;
@


1.185
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAME_INIT_SAVED_REGS): Rename
	FRAME_INIT_SAVED_REGS.
	* gdbarch.h, gdbarch.c: Regenerate.
	* stack.c (frame_info): Update.
	* sh-tdep.c (sh_find_callers_reg, sh64_get_saved_pr): Update.
	(sh_init_extra_frame_info, sh64_init_extra_frame_info): Update.
	(sh64_get_saved_register, sh_pop_frame, sh64_pop_frame): Update.
	* ns32k-tdep.c (ns32k_pop_frame): Update.
	* mips-tdep.c (mips_pop_frame): Update.
	* m68hc11-tdep.c (m68hc11_pop_frame): Update.
	* ia64-tdep.c (ia64_frame_chain): Update.
	(ia64_frame_saved_pc, ia64_get_saved_register): Update.
	(ia64_frameless_function_invocation): Update.
	(ia64_init_extra_frame_info): Update.
	(ia64_pop_frame_regular): Update.
	* frame.h (struct frame_info): Update comment.
	(DEPRECATED_FRAME_INIT_SAVED_REGS): Rename macro.
	* frame.c (frame_saved_regs_register_unwind): Update.
	(frame_saved_regs_register_unwind): Update.
	(deprecated_generic_get_saved_register): Update.
	* cris-tdep.c: Update comment.
	* config/sparc/tm-sparc.h (DEPRECATED_FRAME_INIT_SAVED_REGS):
	Rename macro.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	FRAME_INIT_SAVED_REGS to DEPRECATED_FRAME_INIT_SAVED_REGS.
@
text
@d173 1
a173 1
  int max_register_raw_size;
d175 1
a175 1
  int max_register_virtual_size;
a521 1
  current_gdbarch->max_register_raw_size = -1;
a522 1
  current_gdbarch->max_register_virtual_size = -1;
d662 1
a662 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->max_register_raw_size == -1))
    fprintf_unfiltered (log, "\n\tmax_register_raw_size");
d664 1
a664 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->max_register_virtual_size == -1))
    fprintf_unfiltered (log, "\n\tmax_register_virtual_size");
d1253 34
a1717 16
#ifdef MAX_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_RAW_SIZE # %s\n",
                      XSTRING (MAX_REGISTER_RAW_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_RAW_SIZE = %d\n",
                      MAX_REGISTER_RAW_SIZE);
#endif
#ifdef MAX_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_VIRTUAL_SIZE # %s\n",
                      XSTRING (MAX_REGISTER_VIRTUAL_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_VIRTUAL_SIZE = %d\n",
                      MAX_REGISTER_VIRTUAL_SIZE);
#endif
d3321 8
a3328 1
gdbarch_max_register_raw_size (struct gdbarch *gdbarch)
a3330 3
  if (gdbarch->max_register_raw_size == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_max_register_raw_size invalid");
d3332 2
a3333 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_max_register_raw_size called\n");
  return gdbarch->max_register_raw_size;
d3337 2
a3338 2
set_gdbarch_max_register_raw_size (struct gdbarch *gdbarch,
                                   int max_register_raw_size)
d3340 1
a3340 1
  gdbarch->max_register_raw_size = max_register_raw_size;
d3363 8
a3370 1
gdbarch_max_register_virtual_size (struct gdbarch *gdbarch)
a3372 3
  if (gdbarch->max_register_virtual_size == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_max_register_virtual_size invalid");
d3374 2
a3375 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_max_register_virtual_size called\n");
  return gdbarch->max_register_virtual_size;
d3379 2
a3380 2
set_gdbarch_max_register_virtual_size (struct gdbarch *gdbarch,
                                       int max_register_virtual_size)
d3382 1
a3382 1
  gdbarch->max_register_virtual_size = max_register_virtual_size;
@


1.184
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_INIT_EXTRA_FRAME_INFO): Rename
	INIT_EXTRA_FRAME_INFO.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arm-tdep.c: Update comments.
	* sh-tdep.c, mcore-tdep.c, m68hc11-tdep.c: Ditto.
	* i386-interix-tdep.c, hppa-tdep.c, h8300-tdep.c: Ditto.
	* frame.h, avr-tdep.c: Ditto.
	* frame.c (get_prev_frame): DEPRECATED_INIT_EXTRA_FRAME_INFO.
	(create_new_frame, legacy_get_prev_frame): Ditto.
	* config/sparc/tm-sparc.h (DEPRECATED_INIT_EXTRA_FRAME_INFO): Rename.
	* config/pa/tm-hppa.h (DEPRECATED_INIT_EXTRA_FRAME_INFO): Rename.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Initialize
	deprecated_init_extra_frame_info instead of init_extra_frame_info.
	* x86-64-tdep.c (x86_64_init_abi): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-interix-tdep.c (i386_interix_init_abi): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.

Index: doc/ChangeLog
2003-02-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo: Rename INIT_EXTRA_FRAME_INFO to
	DEPRECATED_INIT_EXTRA_FRAME_INFO.
@
text
@d228 1
a228 1
  gdbarch_frame_init_saved_regs_ftype *frame_init_saved_regs;
d739 1
a739 1
  /* Skip verify of frame_init_saved_regs, has predicate */
d1173 23
a1535 23
#ifdef FRAME_INIT_SAVED_REGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_INIT_SAVED_REGS_P()",
                      XSTRING (FRAME_INIT_SAVED_REGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_INIT_SAVED_REGS_P() = %d\n",
                      FRAME_INIT_SAVED_REGS_P ());
#endif
#ifdef FRAME_INIT_SAVED_REGS
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_INIT_SAVED_REGS(frame)",
                      XSTRING (FRAME_INIT_SAVED_REGS (frame)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_INIT_SAVED_REGS = <0x%08lx>\n",
                        (long) current_gdbarch->frame_init_saved_regs
                        /*FRAME_INIT_SAVED_REGS ()*/);
#endif
d4460 1
a4460 1
gdbarch_frame_init_saved_regs_p (struct gdbarch *gdbarch)
d4463 1
a4463 1
  return gdbarch->frame_init_saved_regs != 0;
d4467 1
a4467 1
gdbarch_frame_init_saved_regs (struct gdbarch *gdbarch, struct frame_info *frame)
d4470 1
a4470 1
  if (gdbarch->frame_init_saved_regs == 0)
d4472 1
a4472 1
                    "gdbarch: gdbarch_frame_init_saved_regs invalid");
d4474 2
a4475 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_init_saved_regs called\n");
  gdbarch->frame_init_saved_regs (frame);
d4479 2
a4480 2
set_gdbarch_frame_init_saved_regs (struct gdbarch *gdbarch,
                                   gdbarch_frame_init_saved_regs_ftype frame_init_saved_regs)
d4482 1
a4482 1
  gdbarch->frame_init_saved_regs = frame_init_saved_regs;
@


1.183
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (register_type): New function with predicate.
	(REGISTER_VIRTUAL_TYPE): Change to function with predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.c (generic_register_byte): Use generic_register_size.
	(generic_register_size): When available, use
	gdbarch_register_type.
	* regcache.c (init_regcache_descr): When available, initialize the
	register type array using gdbarch_register_type.  If the
	architecture supplies gdbarch_register_type, do not use the legacy
	regcache layout.
	* d10v-tdep.c (d10v_register_type): Replace
	d10v_register_virtual_type.
	(d10v_gdbarch_init): Set register_type instead of
	register_virtual_type.
@
text
@d229 1
a229 1
  gdbarch_init_extra_frame_info_ftype *init_extra_frame_info;
d740 1
a740 1
  /* Skip verify of init_extra_frame_info, has predicate */
d1173 23
a1636 23
#ifdef INIT_EXTRA_FRAME_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INIT_EXTRA_FRAME_INFO_P()",
                      XSTRING (INIT_EXTRA_FRAME_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: INIT_EXTRA_FRAME_INFO_P() = %d\n",
                      INIT_EXTRA_FRAME_INFO_P ());
#endif
#ifdef INIT_EXTRA_FRAME_INFO
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INIT_EXTRA_FRAME_INFO(fromleaf, frame)",
                      XSTRING (INIT_EXTRA_FRAME_INFO (fromleaf, frame)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INIT_EXTRA_FRAME_INFO = <0x%08lx>\n",
                        (long) current_gdbarch->init_extra_frame_info
                        /*INIT_EXTRA_FRAME_INFO ()*/);
#endif
d4486 1
a4486 1
gdbarch_init_extra_frame_info_p (struct gdbarch *gdbarch)
d4489 1
a4489 1
  return gdbarch->init_extra_frame_info != 0;
d4493 1
a4493 1
gdbarch_init_extra_frame_info (struct gdbarch *gdbarch, int fromleaf, struct frame_info *frame)
d4496 1
a4496 1
  if (gdbarch->init_extra_frame_info == 0)
d4498 1
a4498 1
                    "gdbarch: gdbarch_init_extra_frame_info invalid");
d4500 2
a4501 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_init_extra_frame_info called\n");
  gdbarch->init_extra_frame_info (fromleaf, frame);
d4505 2
a4506 2
set_gdbarch_init_extra_frame_info (struct gdbarch *gdbarch,
                                   gdbarch_init_extra_frame_info_ftype init_extra_frame_info)
d4508 1
a4508 1
  gdbarch->init_extra_frame_info = init_extra_frame_info;
@


1.182
log
@2003-02-27  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PUSH_DUMMY_FRAME): Procedure with
	predicate.  Replaces PUSH_DUMMY_FRAME.
	* gdbarch.h, gdbarch.c: Regnerate.
	* valops.c (hand_function_call): Update.  Call
	generic_push_dummy_frame directly.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_PUSH_DUMMY_FRAME): Update.
	* config/pa/tm-hppa.h (DEPRECATED_PUSH_DUMMY_FRAME): Update.
	* inferior.h (PUSH_DUMMY_FRAME): Delete definition.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Don't set
	push_dummy_frame to generic_push_dummy_frame.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
@
text
@d177 1
d343 1
d671 2
a672 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_virtual_type == 0))
    fprintf_unfiltered (log, "\n\tregister_virtual_type");
d2035 8
d2054 9
d3365 7
d3389 26
@


1.181
log
@2003-01-29  Andrew Cagney  <ac131313@@redhat.com>

	* frame.c (frame_saved_regs_id_unwind): Assert FRAME_CHAIN_P.
	(legacy_get_prev_frame): Assert FRAME_CHAIN_P.
	(get_prev_frame): When FRAME_CHAIN_P, call legacy_get_prev_frame.
	(frame_saved_regs_pc_unwind): Assert FRAME_SAVED_PC_P.
	* gdbarch.sh (FRAME_CHAIN): Change to a function with predicate.
	(FRAME_SAVED_PC): Change to a function with predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d216 1
a216 1
  gdbarch_push_dummy_frame_ftype *push_dummy_frame;
d727 1
a727 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->push_dummy_frame == 0))
    fprintf_unfiltered (log, "\n\tpush_dummy_frame");
d1232 23
a1880 14
#ifdef PUSH_DUMMY_FRAME
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_DUMMY_FRAME(-)",
                      XSTRING (PUSH_DUMMY_FRAME (-)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_DUMMY_FRAME = <0x%08lx>\n",
                        (long) current_gdbarch->push_dummy_frame
                        /*PUSH_DUMMY_FRAME ()*/);
#endif
d4164 7
d4172 1
a4172 1
gdbarch_push_dummy_frame (struct gdbarch *gdbarch)
d4175 1
a4175 1
  if (gdbarch->push_dummy_frame == 0)
d4177 1
a4177 1
                    "gdbarch: gdbarch_push_dummy_frame invalid");
d4179 2
a4180 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_frame called\n");
  gdbarch->push_dummy_frame ();
d4184 2
a4185 2
set_gdbarch_push_dummy_frame (struct gdbarch *gdbarch,
                              gdbarch_push_dummy_frame_ftype push_dummy_frame)
d4187 1
a4187 1
  gdbarch->push_dummy_frame = push_dummy_frame;
@


1.180
log
@2003-01-21  Andrew Cagney  <ac131313@@redhat.com>

	* exec.c (text_start): Delete global variable.
	(exec_file_attach): Make text_start local to the function.
	* inferior.h (BEFORE_TEXT_END, AFTER_TEXT_END): Delete macros.
	* valops.c (hand_function_call): Delete code that handles
	BEFORE_TEXT_END and AFTER_TEXT_END.
	* gdbarch.sh (CALL_DUMMY_LENGTH): Test call_dummy_length instead
	of CALL_DUMMY_LOCATION.
	* gdbarch.c: Regenerate.
	* inferior.h (deprecated_pc_in_call_dummy_before_text_end)
	(deprecated_pc_in_call_dummy_after_text_end): Delete declaration.
	* blockframe.c (deprecated_pc_in_call_dummy_before_text_end)
	(deprecated_pc_in_call_dummy_after_text_end): Delete functions.
	(text_end): Delete extern declaration.
@
text
@d764 1
a764 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->frame_chain == 0))
    fprintf_unfiltered (log, "\n\tframe_chain");
d766 1
a766 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->frame_saved_pc == 0))
    fprintf_unfiltered (log, "\n\tframe_saved_pc");
d1428 9
d1513 9
d4674 7
d4724 7
@


1.179
log
@2003-01-19  Andrew Cagney  <ac131313@@redhat.com>

	* frame.c (frame_saved_regs_pop): Assert POP_FRAME_P.
	* gdbarch.sh (POP_FRAME): Change to function with predicate.
	Suppress actual parameters when `-'.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d989 1
a989 1
  if (CALL_DUMMY_LOCATION == BEFORE_TEXT_END || CALL_DUMMY_LOCATION == AFTER_TEXT_END)
@


1.178
log
@2003-01-13  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (FRAME_INIT_SAVED_REGS): Change to function with
	predicate.
	* gdbarch.h, gdbarch.c: Regenerate.
	* stack.c (frame_info): Only initialize the saved registers when
	FRAME_INIT_SAVED_REGS_P.
	* frame.c (frame_saved_regs_register_unwind): Assert
	FRAME_INIT_SAVED_REGS_P.
	(deprecated_generic_get_saved_register): Ditto.
@
text
@d731 1
a731 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->pop_frame == 0))
    fprintf_unfiltered (log, "\n\tpop_frame");
d1762 9
d4186 7
@


1.177
log
@2003-01-06  Andrew Cagney  <cagney@@redhat.com>

	* MAINTAINERS (Target Instruction Set Architectures): Update
	arm-elf.  Can be built with -Werror, has been multiarched.

	* value.h (unpack_long): Make buffer parameter constant.
	(unpack_double, unpack_pointer, unpack_field_as_long): Ditto.
	* scm-lang.h (scm_parse): Ditto.
	* defs.h (extract_typed_address, extract_address): Ditto.
	(extract_long_unsigned_integer): Ditto.
	* inferior.h (unsigned_pointer_to_address): Ditto.
	(signed_pointer_to_address): Ditto.
	* gdbarch.sh (POINTER_TO_ADDRESS): Ditto.
	* gdbarch.h, gdbarch.c: Regenerate.
	* findvar.c (extract_long_unsigned_integer): Update.
	(extract_address): Update.
	(extract_typed_address): Update.
	(unsigned_pointer_to_address): Update.
	* values.c (unpack_long): Update.
	(unpack_double): Update.
	(unpack_pointer): Update.
	(unpack_field_as_long): Update.
	* d10v-tdep.c (d10v_pointer_to_address): Update.
	* avr-tdep.c (avr_pointer_to_address): Update.
	* scm-lang.c (scm_unpack): Update.
	* findvar.c (signed_pointer_to_address): Update.
@
text
@d742 1
a742 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->frame_init_saved_regs == 0))
    fprintf_unfiltered (log, "\n\tframe_init_saved_regs");
d1465 9
d4364 7
@


1.177.2.1
log
@2003-01-13  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (FRAME_INIT_SAVED_REGS): Change to function with
	predicate.
	* gdbarch.h, gdbarch.c: Regenerate.
	* stack.c (frame_info): Only initialize the saved registers when
	FRAME_INIT_SAVED_REGS_P.
	* frame.c (frame_saved_regs_register_unwind): Assert
	FRAME_INIT_SAVED_REGS_P.
	(deprecated_generic_get_saved_register): Ditto.
@
text
@d742 3
a744 1
  /* Skip verify of frame_init_saved_regs, has predicate */
a1466 9
#ifdef FRAME_INIT_SAVED_REGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_INIT_SAVED_REGS_P()",
                      XSTRING (FRAME_INIT_SAVED_REGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_INIT_SAVED_REGS_P() = %d\n",
                      FRAME_INIT_SAVED_REGS_P ());
#endif
a4356 7
}

int
gdbarch_frame_init_saved_regs_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_init_saved_regs != 0;
@


1.177.2.2
log
@Merge branch with mainline:
POP_FRAME_P;
frame-unwind.h.
@
text
@d731 3
a733 1
  /* Skip verify of pop_frame, has predicate */
a1763 9
#ifdef POP_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "POP_FRAME_P()",
                      XSTRING (POP_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: POP_FRAME_P() = %d\n",
                      POP_FRAME_P ());
#endif
a4178 7
}

int
gdbarch_pop_frame_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->pop_frame != 0;
@


1.176
log
@	* arm-tdep.c (arm_frame_chain_valid):  Remove unnecessary test.
	* d10v-tdep.c (d10v_frame_chain_valid): Remove unnecessary tests.
	* hppa-tdep.c (hppa_frame_chain_valid): Remove unnecessary test.

	* blockframe.c: Include "gdbcmd.h" and "command.h".
	(backtrace_below_main): New variable.
	(file_frame_chain_valid, func_frame_chain_valid)
	(nonnull_frame_chain_valid, generic_file_frame_chain_valid)
	(generic_func_frame_chain_valid): Remove functions.
	(frame_chain_valid, do_flush_frames_sfunc): New functions.
	(_initialize_blockframe): New function.
	* Makefile.in (blockframe.o): Update dependencies.
	* frame.c (frame_saved_regs_id_unwind, get_prev_frame): Remove FIXME
	comment.  Call frame_chain_valid ().
	* frame.h: Remove old prototypes.  Add prototype for
	frame_chain_valid and update comments to match.
	* gdbarch.sh: Change FRAME_CHAIN_VALID into a predicated function.
	Remove old comment.
	* gdbarch.h: Regenerated.
	* gdbarch.c: Regenerated.

Plus updates to all other targets not to provide a FRAME_CHAIN_VALID.
@
text
@d4028 1
a4028 1
gdbarch_pointer_to_address (struct gdbarch *gdbarch, struct type *type, void *buf)
@


1.175
log
@	* arch-utils.c (gdbarch_info_init): Set osabi to
	GDB_OSABI_UNINITIALIZED.
	* gdbarch.sh: Add osabi to struct gdbarch and to struct
	gdbarch_info.  Include "osabi.h" in gdbarch.c.  Check osabi
	in gdbarch_list_lookup_by_info and in gdbarch_update_p.
	* gdbarch.c: Regenerated.
	* gdbarch.h: Regenerated.
	* osabi.c (gdbarch_lookup_osabi): Return GDB_OSABI_UNINITIALIZED if
	there's no BFD.
	(gdbarch_init_osabi): Remove osabi argument; use info.osabi.
	* osabi.h (enum gdb_osabi): Move to defs.h.
	(gdbarch_init_osabi): Update prototype.
	* defs.h (enum gdb_osabi): Moved here.
	* Makefile.in: Update dependencies.

Plus updates to alpha, arm, hppa, i386, mips, ns32k, ppc, sh, sparc, and vax
ports to match.
@
text
@a558 1
  current_gdbarch->frame_chain_valid = generic_func_frame_chain_valid;
d771 1
a771 1
  /* Skip verify of frame_chain_valid, invalid_p == 0 */
d1447 9
d4649 7
@


1.174
log
@gdb/
	* buildsym.h (processing_hp_compilation): Remove obsolete variable.
	* gdbarch.sh Remove include of "value.h" in gdbarch.h.
	(COERCE_FLOAT_TO_DOUBLE): Remove.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* Makefile.in: Remove value_h from gdbarch_h.
	* valops.c (coerce_float_to_double): New variable.
	(default_coerce_float_to_double): Remove.
	(standard_coerce_float_to_double): Remove.
	(value_arg_coerce): Use coerce_float_to_double.
	(_initialize_valops): Add "set coerce-float-to-double".
	* value.h (default_coerce_float_to_double): Remove prototype.
	(standard_coerce_float_to_double): Remove prototype.

	* hpread.c (hpread_process_one_debug_symbol): Mark C++ functions as
	prototyped.
	* mdebugread.c (parse_symbol): Likewise.
	* stabsread.c (define_symbol): Mark all functions as prototyped.

	* hppa-tdep.c (hppa_coerce_float_to_double): Remove.
	* alpha-tdep.c (alpha_gdbarch_init): Remove call to
	set_gdbarch_coerce_float_to_double.
	* arm-tdep.c (arm_gdbarch_init): Likewise.
	* frv-tdep.c (frv_gdbarch_init): Likewise.
	* h8300-tdep.c (h8300_gdbarch_init): Likewise (commented out).
	* i386-sol2-tdep.c (i386_sol2_init_abi): Likewise.
	* mips-tdep.c (mips_gdbarch_init): Likewise.
	(mips_coerce_float_to_double): Remove.
	* rs6000-tdep.c (rs6000_gdbarch_init): Likewise.
	(rs6000_coerce_float_to_double): Remove.
	* s390-tdep.c (s390_gdbarch_init): Likewise.
	* sh-tdep.c (sh_gdbarch_init): Likewise.
	(sh_coerce_float_to_double): Remove.
	* sparc-tdep.c (sparc_gdbarch_init): Likewise.
	(sparc_coerce_float_to_double): Remove.
	* v850-tdep.c (v850_gdbarch_init): Likewise.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Likewise.
	* config/m32r/tm-m32r.h (COERCE_FLOAT_TO_DOUBLE): Remove.
	* config/pa/tm-hppa.h: (COERCE_FLOAT_TO_DOUBLE): Remove.
	(hppa_coerce_float_to_double): Remove prototype.
	* config/sparc/tm-sparc.h (COERCE_FLOAT_TO_DOUBLE): Remove.
doc/
	* gdb.texinfo (Controlling GDB): Add ABI section.  Document
	"set coerce-float-to-double".
	* gdbint.texinfo (COERCE_FLOAT_TO_DOUBLE): Remove documentation.
testsuite/
	* gdb.base/callfuncs.exp: Don't XFAIL unprototyped functions for
	stabs.
	* gdb.base/completion.exp: Allow marker1(void) as well as marker1().
	* gdb.base/whatis.exp: Always allow (void) after function names.
@
text
@d68 1
d97 1
d294 1
d484 1
d2387 8
d2553 9
d5769 2
d5816 6
d5838 3
@


1.173
log
@	* gdbarch.sh (ADDRESS_CLASS_TYPE_FLAGS_TO_NAME)
	(ADDRESS_CLASS_NAME_TO_TYPE_FLAGS): Use ``const char *'' instead of
	``char *'' for return and parameter types.
	* gdbarch.h, gdbarch.c: Regenerate.
	* gdbtypes.h, gdbtypes.c (address_space_int_to_name): Change
	return type from ``char *'' to ``const char *''.
	* c-typeprint.c (c_type_print_modifier): Make ``address_space_id''
	const.
@
text
@d4 1
a4 1
   Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
a201 1
  gdbarch_coerce_float_to_double_ftype *coerce_float_to_double;
a428 1
  0,
a533 1
  current_gdbarch->coerce_float_to_double = default_coerce_float_to_double;
a711 1
  /* Skip verify of coerce_float_to_double, invalid_p == 0 */
a1073 11
#ifdef COERCE_FLOAT_TO_DOUBLE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "COERCE_FLOAT_TO_DOUBLE(formal, actual)",
                      XSTRING (COERCE_FLOAT_TO_DOUBLE (formal, actual)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: COERCE_FLOAT_TO_DOUBLE = <0x%08lx>\n",
                        (long) current_gdbarch->coerce_float_to_double
                        /*COERCE_FLOAT_TO_DOUBLE ()*/);
#endif
a3855 19
}

int
gdbarch_coerce_float_to_double (struct gdbarch *gdbarch, struct type *formal, struct type *actual)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->coerce_float_to_double == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_coerce_float_to_double invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_coerce_float_to_double called\n");
  return gdbarch->coerce_float_to_double (formal, actual);
}

void
set_gdbarch_coerce_float_to_double (struct gdbarch *gdbarch,
                                    gdbarch_coerce_float_to_double_ftype coerce_float_to_double)
{
  gdbarch->coerce_float_to_double = coerce_float_to_double;
@


1.172
log
@2002-12-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_INIT_FRAME_PC): Rename INIT_FRAME_PC.
	Change to a function with predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (get_prev_frame): Update.  Test
	DEPRECATED_INIT_FRAME_PC_P.
	* config/sparc/tm-sparc.h (DEPRECATED_INIT_FRAME_PC): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC): Update.
	* config/mn10200/tm-mn10200.h (DEPRECATED_INIT_FRAME_PC): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* arm-tdep.c: Update comments.
	* h8300-tdep.c (h8300_gdbarch_init): Explicitly set init_frame_pc.
	* config/m32r/tm-m32r.h (DEPRECATED_INIT_FRAME_PC): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* x86-64-tdep.c (x86_64_init_abi): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* config/z8k/tm-z8k.h (INIT_FRAME_PC_FIRST): Delete macro.
	(DEPRECATED_INIT_FRAME_PC): Rename INIT_FRAME_PC.
@
text
@d5371 1
a5371 1
char *
d5398 1
a5398 1
gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, char *name, int *type_flags_ptr)
@


1.171
log
@* gdbarch.sh (gdbarch_dump): Wrap function addresses in <>.
@
text
@d199 1
a199 1
  gdbarch_init_frame_pc_ftype *init_frame_pc;
a535 1
  current_gdbarch->init_frame_pc = init_frame_pc_default;
d714 1
a714 1
  /* Skip verify of init_frame_pc, invalid_p == 0 */
d1194 20
a1598 11
#ifdef INIT_FRAME_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INIT_FRAME_PC(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC (fromleaf, prev)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INIT_FRAME_PC = <0x%08lx>\n",
                        (long) current_gdbarch->init_frame_pc
                        /*INIT_FRAME_PC ()*/);
#endif
d3815 7
d3823 1
a3823 1
gdbarch_init_frame_pc (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
d3826 1
a3826 1
  if (gdbarch->init_frame_pc == 0)
d3828 1
a3828 1
                    "gdbarch: gdbarch_init_frame_pc invalid");
d3830 2
a3831 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_init_frame_pc called\n");
  return gdbarch->init_frame_pc (fromleaf, prev);
d3835 2
a3836 2
set_gdbarch_init_frame_pc (struct gdbarch *gdbarch,
                           gdbarch_init_frame_pc_ftype init_frame_pc)
d3838 1
a3838 1
  gdbarch->init_frame_pc = init_frame_pc;
@


1.170
log
@2002-12-09  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (gdbarch_dump): Print NAME_OF_MALLOC using %s.
	* gdbarch.c: Re-generate.
@
text
@d899 1
a899 1
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = 0x%08lx\n",
d921 1
a921 1
                        "gdbarch_dump: ADDRESS_TO_POINTER = 0x%08lx\n",
d932 1
a932 1
                        "gdbarch_dump: ADDR_BITS_REMOVE = 0x%08lx\n",
d959 1
a959 1
                        "gdbarch_dump: BREAKPOINT_FROM_PC = 0x%08lx\n",
d970 1
a970 1
                        "gdbarch_dump: CALL_DUMMY_ADDRESS = 0x%08lx\n",
d1056 1
a1056 1
                        "gdbarch_dump: CANNOT_FETCH_REGISTER = 0x%08lx\n",
d1075 1
a1075 1
                        "gdbarch_dump: CANNOT_STORE_REGISTER = 0x%08lx\n",
d1086 1
a1086 1
                        "gdbarch_dump: COERCE_FLOAT_TO_DOUBLE = 0x%08lx\n",
d1100 1
a1100 1
                        "gdbarch_dump: COFF_MAKE_MSYMBOL_SPECIAL = 0x%08lx\n",
d1115 1
a1115 1
                        "gdbarch_dump: CONVERT_FROM_FUNC_PTR_ADDR = 0x%08lx\n",
d1126 1
a1126 1
                        "gdbarch_dump: CONVERT_REGISTER_P = 0x%08lx\n",
d1157 1
a1157 1
                        "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = 0x%08lx\n",
d1171 1
a1171 1
                        "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = 0x%08lx\n",
d1191 1
a1191 1
                        "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
d1211 1
a1211 1
                        "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST = 0x%08lx\n",
d1231 1
a1231 1
                        "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY = 0x%08lx\n",
d1245 1
a1245 1
                        "gdbarch_dump: DEPRECATED_STORE_RETURN_VALUE = 0x%08lx\n",
d1276 1
a1276 1
                        "gdbarch_dump: DWARF2_BUILD_FRAME_INFO = 0x%08lx\n",
d1287 1
a1287 1
                        "gdbarch_dump: DWARF2_REG_TO_REGNUM = 0x%08lx\n",
d1298 1
a1298 1
                        "gdbarch_dump: DWARF_REG_TO_REGNUM = 0x%08lx\n",
d1309 1
a1309 1
                        "gdbarch_dump: ECOFF_REG_TO_REGNUM = 0x%08lx\n",
d1323 1
a1323 1
                        "gdbarch_dump: ELF_MAKE_MSYMBOL_SPECIAL = 0x%08lx\n",
d1337 1
a1337 1
                        "gdbarch_dump: EXTRACT_RETURN_VALUE = 0x%08lx\n",
d1357 1
a1357 1
                        "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
d1379 1
a1379 1
                        "gdbarch_dump: FIX_CALL_DUMMY = 0x%08lx\n",
d1406 1
a1406 1
                        "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
d1417 1
a1417 1
                        "gdbarch_dump: FRAME_ARGS_ADDRESS = 0x%08lx\n",
d1436 1
a1436 1
                        "gdbarch_dump: FRAME_CHAIN = 0x%08lx\n",
d1447 1
a1447 1
                        "gdbarch_dump: FRAME_CHAIN_VALID = 0x%08lx\n",
d1461 1
a1461 1
                        "gdbarch_dump: FRAME_INIT_SAVED_REGS = 0x%08lx\n",
d1472 1
a1472 1
                        "gdbarch_dump: FRAME_LOCALS_ADDRESS = 0x%08lx\n",
d1483 1
a1483 1
                        "gdbarch_dump: FRAME_NUM_ARGS = 0x%08lx\n",
d1494 1
a1494 1
                        "gdbarch_dump: FRAME_SAVED_PC = 0x%08lx\n",
d1522 1
a1522 1
                        "gdbarch_dump: GET_LONGJMP_TARGET = 0x%08lx\n",
d1545 1
a1545 1
                        "gdbarch_dump: GET_SAVED_REGISTER = 0x%08lx\n",
d1576 1
a1576 1
                        "gdbarch_dump: INIT_EXTRA_FRAME_INFO = 0x%08lx\n",
d1587 1
a1587 1
                        "gdbarch_dump: INIT_FRAME_PC = 0x%08lx\n",
d1598 1
a1598 1
                        "gdbarch_dump: INNER_THAN = 0x%08lx\n",
d1618 1
a1618 1
                        "gdbarch_dump: INTEGER_TO_ADDRESS = 0x%08lx\n",
d1629 1
a1629 1
                        "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = 0x%08lx\n",
d1640 1
a1640 1
                        "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = 0x%08lx\n",
d1667 1
a1667 1
                        "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = 0x%08lx\n",
d1678 1
a1678 1
                        "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = 0x%08lx\n",
d1729 1
a1729 1
                        "gdbarch_dump: PC_IN_SIGTRAMP = 0x%08lx\n",
d1748 1
a1748 1
                        "gdbarch_dump: POINTER_TO_ADDRESS = 0x%08lx\n",
d1762 1
a1762 1
                        "gdbarch_dump: POP_FRAME = 0x%08lx\n",
d1773 1
a1773 1
                        "gdbarch_dump: PREPARE_TO_PROCEED = 0x%08lx\n",
d1804 1
a1804 1
                        "gdbarch_dump: PROLOGUE_FRAMELESS_P = 0x%08lx\n",
d1823 1
a1823 1
                        "gdbarch_dump: PUSH_ARGUMENTS = 0x%08lx\n",
d1837 1
a1837 1
                        "gdbarch_dump: PUSH_DUMMY_FRAME = 0x%08lx\n",
d1857 1
a1857 1
                        "gdbarch_dump: PUSH_RETURN_ADDRESS = 0x%08lx\n",
d1868 1
a1868 1
                        "gdbarch_dump: REGISTER_BYTE = 0x%08lx\n",
d1896 1
a1896 1
                        "gdbarch_dump: REGISTER_BYTES_OK = 0x%08lx\n",
d1907 1
a1907 1
                        "gdbarch_dump: REGISTER_CONVERTIBLE = 0x%08lx\n",
d1921 1
a1921 1
                        "gdbarch_dump: REGISTER_CONVERT_TO_RAW = 0x%08lx\n",
d1935 1
a1935 1
                        "gdbarch_dump: REGISTER_CONVERT_TO_VIRTUAL = 0x%08lx\n",
d1946 1
a1946 1
                        "gdbarch_dump: REGISTER_NAME = 0x%08lx\n",
d1957 1
a1957 1
                        "gdbarch_dump: REGISTER_RAW_SIZE = 0x%08lx\n",
d1968 1
a1968 1
                        "gdbarch_dump: REGISTER_SIM_REGNO = 0x%08lx\n",
d1990 1
a1990 1
                        "gdbarch_dump: REGISTER_TO_VALUE = 0x%08lx\n",
d2001 1
a2001 1
                        "gdbarch_dump: REGISTER_VIRTUAL_SIZE = 0x%08lx\n",
d2012 1
a2012 1
                        "gdbarch_dump: REGISTER_VIRTUAL_TYPE = 0x%08lx\n",
d2032 1
a2032 1
                        "gdbarch_dump: REG_STRUCT_HAS_ADDR = 0x%08lx\n",
d2046 1
a2046 1
                        "gdbarch_dump: REMOTE_TRANSLATE_XFER_ADDRESS = 0x%08lx\n",
d2057 1
a2057 1
                        "gdbarch_dump: RETURN_VALUE_ON_STACK = 0x%08lx\n",
d2068 1
a2068 1
                        "gdbarch_dump: SAVED_PC_AFTER_CALL = 0x%08lx\n",
d2091 1
a2091 1
                        "gdbarch_dump: SAVE_DUMMY_FRAME_TOS = 0x%08lx\n",
d2102 1
a2102 1
                        "gdbarch_dump: SDB_REG_TO_REGNUM = 0x%08lx\n",
d2122 1
a2122 1
                        "gdbarch_dump: SIGTRAMP_END = 0x%08lx\n",
d2142 1
a2142 1
                        "gdbarch_dump: SIGTRAMP_START = 0x%08lx\n",
d2161 1
a2161 1
                        "gdbarch_dump: SKIP_PROLOGUE = 0x%08lx\n",
d2172 1
a2172 1
                        "gdbarch_dump: SKIP_TRAMPOLINE_CODE = 0x%08lx\n",
d2183 1
a2183 1
                        "gdbarch_dump: SMASH_TEXT_ADDRESS = 0x%08lx\n",
d2206 1
a2206 1
                        "gdbarch_dump: SOFTWARE_SINGLE_STEP = 0x%08lx\n",
d2225 1
a2225 1
                        "gdbarch_dump: STAB_REG_TO_REGNUM = 0x%08lx\n",
d2245 1
a2245 1
                        "gdbarch_dump: STACK_ALIGN = 0x%08lx\n",
d2259 1
a2259 1
                        "gdbarch_dump: STORE_RETURN_VALUE = 0x%08lx\n",
d2273 1
a2273 1
                        "gdbarch_dump: STORE_STRUCT_RETURN = 0x%08lx\n",
d2397 1
a2397 1
                        "gdbarch_dump: TARGET_PRINT_INSN = 0x%08lx\n",
d2416 1
a2416 1
                        "gdbarch_dump: TARGET_READ_FP = 0x%08lx\n",
d2427 1
a2427 1
                        "gdbarch_dump: TARGET_READ_PC = 0x%08lx\n",
d2438 1
a2438 1
                        "gdbarch_dump: TARGET_READ_SP = 0x%08lx\n",
d2460 1
a2460 1
                        "gdbarch_dump: TARGET_VIRTUAL_FRAME_POINTER = 0x%08lx\n",
d2474 1
a2474 1
                        "gdbarch_dump: TARGET_WRITE_PC = 0x%08lx\n",
d2488 1
a2488 1
                        "gdbarch_dump: TARGET_WRITE_SP = 0x%08lx\n",
d2499 1
a2499 1
                        "gdbarch_dump: USE_STRUCT_CONVENTION = 0x%08lx\n",
d2513 1
a2513 1
                        "gdbarch_dump: VALUE_TO_REGISTER = 0x%08lx\n",
@


1.169
log
@2002-12-08  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (INIT_FRAME_PC_FIRST, INIT_FRAME_PC_DEFAULT): Convert
	to pure functions.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (get_prev_frame): Explictly assign prev's pc with value
	returned by INIT_FRAME_PC_FIRST and INIT_EXTRA_FRAME_INFO.

	* arch-utils.h (init_frame_pc_default, init_frame_pc_noop): Change
	declaration to a function returning a CORE_ADDR.
	* x86-64-tdep.h (x86_64_init_frame_pc): Ditto.
	* arch-utils.c (init_frame_pc_noop): Return the PC value.
	(init_frame_pc_default): Ditto.
	* x86-64-linux-tdep.c (x86_64_init_frame_pc): Ditto.
	* s390-tdep.c (s390_init_frame_pc_first): Ditto.
	* mips-tdep.c (mips_init_frame_pc_first): Ditto.
	* dwarf2cfi.h (cfi_init_frame_pc): Ditto.
	* dwarf2cfi.c (cfi_init_frame_pc): Ditto.
	* alpha-tdep.c (alpha_init_frame_pc_first): Ditto.

	* i386-interix-tdep.c (i386_interix_init_abi): Set init_frame_pc
	to init_frame_pc_noop.
	(i386_interix_init_frame_pc): Delete function.
	* z8k-tdep.c (init_frame_pc): Delete function.
	* config/z8k/tm-z8k.h (INIT_FRAME_PC): Define as init_frame_pc_noop.
	(INIT_FRAME_PC_FIRST): Ditto.
	* config/mn10200/tm-mn10200.h (INIT_FRAME_PC): Ditto.
	(INIT_FRAME_PC_FIRST): Ditto.
	* config/sparc/tm-sparc.h (INIT_FRAME_PC): Ditto.
	* config/rs6000/tm-rs6000.h (INIT_FRAME_PC): Redefine as
	init_frame_pc_noop.
	(INIT_FRAME_PC_FIRST): Convert to an expression.
	* config/sparc/tm-sparc.h (INIT_FRAME_PC_FIRST): Ditto.
@
text
@d1687 2
a1688 2
                      "gdbarch_dump: NAME_OF_MALLOC = %ld\n",
                      (long) NAME_OF_MALLOC);
@


1.168
log
@2002-12-07  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (TARGET_FLOAT_FORMAT): Use the macro when printing
	the format name.
	(TARGET_DOUBLE_FORMAT, TARGET_LONG_DOUBLE_FORMAT): Ditto.
	* gdbarch.c: Regenerate.
@
text
@a1204 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
a1208 1
#endif
a1580 2
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
a1584 1
#endif
d3788 1
a3788 1
void
d3797 1
a3797 1
  gdbarch->deprecated_init_frame_pc_first (fromleaf, prev);
d3807 1
a3807 1
void
d3816 1
a3816 1
  gdbarch->init_frame_pc (fromleaf, prev);
@


1.167
log
@2002-12-06  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (DEPRECATED_INIT_FRAME_PC_FIRST): Rename
	INIT_FRAME_PC_FIRST.  Change to a function with predicate.  Do not
	provide a default value.
	* gdbarch.h, gdbarch.c: Regenerate.
	* frame.c (get_prev_frame): Update.  Check
	DEPRECATED_INIT_FRAME_PC_FIRST_P.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
@
text
@d2338 1
a2338 1
                      gdbarch->float_format->name);
d2354 1
a2354 1
                      gdbarch->float_format->name);
d2386 1
a2386 1
                      gdbarch->float_format->name);
@


1.166
log
@2002-12-05  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh: Dump the predicate function and macro values.
	(read): Print error on standard error.
	* gdbarch.c: Regenerate.
@
text
@d198 1
a198 1
  gdbarch_init_frame_pc_first_ftype *init_frame_pc_first;
a535 1
  current_gdbarch->init_frame_pc_first = init_frame_pc_noop;
d714 1
a714 1
  /* Skip verify of init_frame_pc_first, invalid_p == 0 */
d1195 23
a1596 14
#ifdef INIT_FRAME_PC_FIRST
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INIT_FRAME_PC_FIRST(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC_FIRST (fromleaf, prev)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INIT_FRAME_PC_FIRST = 0x%08lx\n",
                        (long) current_gdbarch->init_frame_pc_first
                        /*INIT_FRAME_PC_FIRST ()*/);
#endif
d3787 7
d3795 1
a3795 1
gdbarch_init_frame_pc_first (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
d3798 1
a3798 1
  if (gdbarch->init_frame_pc_first == 0)
d3800 1
a3800 1
                    "gdbarch: gdbarch_init_frame_pc_first invalid");
d3802 2
a3803 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_init_frame_pc_first called\n");
  gdbarch->init_frame_pc_first (fromleaf, prev);
d3807 2
a3808 2
set_gdbarch_init_frame_pc_first (struct gdbarch *gdbarch,
                                 gdbarch_init_frame_pc_first_ftype init_frame_pc_first)
d3810 1
a3810 1
  gdbarch->init_frame_pc_first = init_frame_pc_first;
@


1.165
log
@2002-12-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (DEPRECATED_PC_IN_CALL_DUMMY): Rename
	PC_IN_CALL_DUMMY.  Change to predicate.  Always allow call.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/sparc/tm-sparc.h, config/sparc/tm-sp64.h: Update.
	* config/mn10200/tm-mn10200.h, config/h8500/tm-h8500.h: Update.
	* config/pa/tm-hppa.h, frame.h: Update.
	* x86-64-tdep.c, vax-tdep.c, sparc-tdep.c: Update.
	* s390-tdep.c, ns32k-tdep.c, mn10300-tdep.c: Update.
	* m68k-tdep.c, i386-tdep.c, frv-tdep.c: Update.
	* cris-tdep.c, alpha-tdep.c: Update.
	* frame.c (set_unwind_by_pc, create_new_frame): Use either
	DEPRECATED_PC_IN_CALL_DUMMY or pc_in_dummy_frame.
	(get_prev_frame): Ditto.

Index: doc/ChangeLog
2002-12-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	PC_IN_CALL_DUMMY.
@
text
@d846 4
d862 4
d870 4
d878 4
d884 9
d906 4
d1139 9
d1176 9
d1196 9
d1238 9
d1322 9
d1487 9
d1507 9
d1538 9
d1600 9
d1777 4
d1789 4
d1839 9
d1878 9
d2014 9
d2070 9
d2104 9
d2124 9
d2185 9
d2226 9
@


1.164
log
@2002-11-28  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (DEPRECATED_USE_GENERIC_DUMMY_FRAMES): Rename
	USE_GENERIC_DUMMY_FRAMES.
	* gdbarch.h, gdbarch.c: Regenerate.
	* valops.c, frame.c: Update.
	* config/z8k/tm-z8k.h, config/mn10200/tm-mn10200.h: Update.
	* config/m32r/tm-m32r.h, config/h8500/tm-h8500.h: Update.
	* config/pa/tm-hppa.h, blockframe.c: Update.
	* vax-tdep.c, sparc-tdep.c, ns32k-tdep.c: Ditto.
	* m68k-tdep.c, alpha-tdep.c: Ditto.

	* arm-tdep.c: Eliminate USE_GENERIC_DUMMY_FRAMES as always 1.
	* mips-tdep.c: Ditto.

Index: doc/ChangeLog
2002-11-28  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Host Definition): Delete documentation on
	USE_GENERIC_DUMMY_FRAMES.
@
text
@d191 1
a191 1
  gdbarch_pc_in_call_dummy_ftype *pc_in_call_dummy;
d355 1
a355 1
  0,
d531 1
a531 1
  current_gdbarch->pc_in_call_dummy = generic_pc_in_call_dummy;
d700 1
a700 1
  /* Skip verify of pc_in_call_dummy, invalid_p == 0 */
d1149 11
a1609 11
#ifdef PC_IN_CALL_DUMMY
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PC_IN_CALL_DUMMY(pc, sp, frame_address)",
                      XSTRING (PC_IN_CALL_DUMMY (pc, sp, frame_address)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PC_IN_CALL_DUMMY = 0x%08lx\n",
                        (long) current_gdbarch->pc_in_call_dummy
                        /*PC_IN_CALL_DUMMY ()*/);
#endif
d3453 8
a3460 1
gdbarch_pc_in_call_dummy (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp, CORE_ADDR frame_address)
d3463 1
a3463 1
  if (gdbarch->pc_in_call_dummy == 0)
d3465 2
a3466 1
                    "gdbarch: gdbarch_pc_in_call_dummy invalid");
d3468 2
a3469 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pc_in_call_dummy called\n");
  return gdbarch->pc_in_call_dummy (pc, sp, frame_address);
d3473 2
a3474 2
set_gdbarch_pc_in_call_dummy (struct gdbarch *gdbarch,
                              gdbarch_pc_in_call_dummy_ftype pc_in_call_dummy)
d3476 1
a3476 1
  gdbarch->pc_in_call_dummy = pc_in_call_dummy;
@


1.163
log
@2002-11-27  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_LOCATION): Default to AT_ENTRY_POINT.
	(USE_GENERIC_DUMMY_FRAMES): Default to true.
	(PC_IN_CALL_DUMMY): Default to generic_pc_in_call_dummy.
	* gdbarch.c, gdbarch.h: Re-generate.
	* inferior.h (USE_GENERIC_DUMMY_FRAMES): Delete macro definition.
	(CALL_DUMMY_LOCATION): Delete macro definition.
	(PC_IN_CALL_DUMMY): Delete macro definitions.

	* arm-tdep.c (arm_gdbarch_init): Do not set pc_in_call_dummy,
	default is already generic_pc_in_call_dummy.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.

	* arm-tdep.c (arm_gdbarch_init): Do not set
	use_generic_dummy_frames, default is already 1.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* x86-64-tdep.c (x86_64_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.

	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	call_dummy_location, default is already AT_ENTRY_POINT.
	* x86-64-tdep.c (x86_64_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
@
text
@d184 1
a184 1
  int use_generic_dummy_frames;
d525 1
a525 1
  current_gdbarch->use_generic_dummy_frames = 1;
d683 1
a683 1
  /* Skip verify of use_generic_dummy_frames, invalid_p == 0 */
d1163 8
a2299 8
#ifdef USE_GENERIC_DUMMY_FRAMES
  fprintf_unfiltered (file,
                      "gdbarch_dump: USE_GENERIC_DUMMY_FRAMES # %s\n",
                      XSTRING (USE_GENERIC_DUMMY_FRAMES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: USE_GENERIC_DUMMY_FRAMES = %d\n",
                      USE_GENERIC_DUMMY_FRAMES);
#endif
d3324 1
a3324 1
gdbarch_use_generic_dummy_frames (struct gdbarch *gdbarch)
d3327 1
a3327 1
  /* Skip verify of use_generic_dummy_frames, invalid_p == 0 */
d3329 2
a3330 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_use_generic_dummy_frames called\n");
  return gdbarch->use_generic_dummy_frames;
d3334 2
a3335 2
set_gdbarch_use_generic_dummy_frames (struct gdbarch *gdbarch,
                                      int use_generic_dummy_frames)
d3337 1
a3337 1
  gdbarch->use_generic_dummy_frames = use_generic_dummy_frames;
@


1.162
log
@2002-11-26  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (TARGET_FLOAT_FORMAT): Print the float format name.
	(TARGET_DOUBLE_FORMAT, TARGET_LONG_DOUBLE_FORMAT): Ditto.
	* gdbarch.c: Re-generate.
@
text
@d525 2
a526 1
  current_gdbarch->use_generic_dummy_frames = -1;
d531 1
d683 2
a684 6
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->use_generic_dummy_frames == -1))
    fprintf_unfiltered (log, "\n\tuse_generic_dummy_frames");
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->call_dummy_location == 0))
    fprintf_unfiltered (log, "\n\tcall_dummy_location");
d700 1
a700 3
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->pc_in_call_dummy == 0))
    fprintf_unfiltered (log, "\n\tpc_in_call_dummy");
d3327 1
a3327 3
  if (gdbarch->use_generic_dummy_frames == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_use_generic_dummy_frames invalid");
d3344 1
a3344 3
  if (gdbarch->call_dummy_location == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_call_dummy_location invalid");
@


1.161
log
@2002-11-24  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (FRAME_ARGS_ADDRESS, FRAME_LOCALS_ADDRESS): Change
	default to get_frame_base.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arch-utils.c (default_frame_address): Delete function.
	* arch-utils.h (default_frame_address): Delete declaration
@
text
@d2135 2
a2136 2
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT = %ld\n",
                      (long) TARGET_DOUBLE_FORMAT);
d2151 2
a2152 2
                      "gdbarch_dump: TARGET_FLOAT_FORMAT = %ld\n",
                      (long) TARGET_FLOAT_FORMAT);
d2183 2
a2184 2
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT = %ld\n",
                      (long) TARGET_LONG_DOUBLE_FORMAT);
@


1.160
log
@2002-11-22  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (FRAME_ARGS_ADDRESS, FRAME_LOCALS_ADDRESS): Default
	to default_frame_address.
	* gdbarch.h, gdbarch.c: Re-generate.

	* d10v-tdep.c (d10v_gdbarch_init): Do not set frame_args_address
	or frame_locals_address to default_frame_address.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_gdbarch_init): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.

	* cris-tdep.c (cris_frame_args_address): Delete function.
	(cris_frame_locals_address): Delete function.
	(cris_gdbarch_init): Do not set frame_args_address or
	frame_locals_address.
@
text
@d559 2
a560 2
  current_gdbarch->frame_args_address = default_frame_address;
  current_gdbarch->frame_locals_address = default_frame_address;
@


1.159
log
@2002-11-05  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (GET_SAVED_REGISTER): Change to a predicate function.
	* gdbarch.h, gdbarch.c: Regnerate.
	* frame.h (frame_register): Declare.
	* frame.c (frame_register): New function.
	(get_saved_register): Test GET_SAVED_REGISTER_P before calling
	GET_SAVED_REGISTER, otherwize call
	generic_unwind_get_saved_register.
	(frame_register_read): Use frame_register instead of
	get_saved_register.
@
text
@d559 2
d782 2
a783 6
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->frame_args_address == 0))
    fprintf_unfiltered (log, "\n\tframe_args_address");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->frame_locals_address == 0))
    fprintf_unfiltered (log, "\n\tframe_locals_address");
@


1.158
log
@2002-11-02  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (register_reggroup_p): Allow default value.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@a536 1
  current_gdbarch->get_saved_register = generic_unwind_get_saved_register;
d720 1
a720 1
  /* Skip verify of get_saved_register, invalid_p == 0 */
d3678 7
@


1.157
log
@2002-11-02  Andrew Cagney  <cagney@@redhat.com>

	* reggroups.h, reggroups.c: New files.
	* regcache.c: Include "reggroups.h".
	(enum regcache_dump_what): Add `regcache_dump_groups'.
	(regcache_dump): Contract size of the "Type" column.  When
	specified, dump the register's groups.
	(maintenance_print_register_groups): New function.
	(_initialize_regcache): Add command `maint print register-groups'.
	* Makefile.in (COMMON_OBS): Add reggroups.o
	(SFILES): Add reggroups.c.
	(reggroups_h): Define.
	(regcache.o, gdbarch.o): Update dependencies.
	(reggroups.o): Specify dependencies.
	* gdbarch.sh (register_reggroup_p): Add pure multi-arch method.
	Add opaque declaration for `struct reggroup' in generated .h file.
	Include "reggroups.h" in generated .c file.
	gdbarch.h, gdbarch.c: Re-generate.
@
text
@d826 1
a826 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_reggroup_p == default_register_reggroup_p))
    fprintf_unfiltered (log, "\n\tregister_reggroup_p");
@


1.156
log
@2002-10-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	definition of DO_REGISTERS_INFO.

2002-10-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_DO_REGISTERS_INFO): Rename
	DO_REGISTERS_INFO.
	gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (default_print_registers_info): Update reference.
	* mips-tdep.c (mips_gdbarch_init): Set deprecated_do_registers_info.
	(mips_dump_tdep): Do not print DO_REGISTERS_INFO.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
@
text
@d67 1
d278 1
d442 1
d574 1
d826 3
d863 4
d5198 19
@


1.155
log
@2002-10-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbtypes.c (address_space_name_to_int): Update.
	(address_space_int_to_name): Update.
	* gdbarch.sh (address_class_type_flags_to_name): Change to a pure
	multi-arch predicate.
	(address_class_name_to_type_flags): Ditto.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d174 1
a174 1
  gdbarch_do_registers_info_ftype *do_registers_info;
d667 1
a667 1
  /* Skip verify of do_registers_info, has predicate */
d1108 14
a1160 14
#ifdef DO_REGISTERS_INFO
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DO_REGISTERS_INFO(reg_nr, fpregs)",
                      XSTRING (DO_REGISTERS_INFO (reg_nr, fpregs)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DO_REGISTERS_INFO = 0x%08lx\n",
                        (long) current_gdbarch->do_registers_info
                        /*DO_REGISTERS_INFO ()*/);
#endif
d3116 1
a3116 1
gdbarch_do_registers_info_p (struct gdbarch *gdbarch)
d3119 1
a3119 1
  return gdbarch->do_registers_info != 0;
d3123 1
a3123 1
gdbarch_do_registers_info (struct gdbarch *gdbarch, int reg_nr, int fpregs)
d3126 1
a3126 1
  if (gdbarch->do_registers_info == 0)
d3128 1
a3128 1
                    "gdbarch: gdbarch_do_registers_info invalid");
d3130 2
a3131 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_do_registers_info called\n");
  gdbarch->do_registers_info (reg_nr, fpregs);
d3135 2
a3136 2
set_gdbarch_do_registers_info (struct gdbarch *gdbarch,
                               gdbarch_do_registers_info_ftype do_registers_info)
d3138 1
a3138 1
  gdbarch->do_registers_info = do_registers_info;
@


1.154
log
@Address class support.
@
text
@a861 5
#ifdef ADDRESS_CLASS_NAME_TO_TYPE_FLAGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_NAME_TO_TYPE_FLAGS(name, type_flags_ptr)",
                      XSTRING (ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (name, type_flags_ptr)));
d864 2
a865 4
                        "gdbarch_dump: ADDRESS_CLASS_NAME_TO_TYPE_FLAGS = 0x%08lx\n",
                        (long) current_gdbarch->address_class_name_to_type_flags
                        /*ADDRESS_CLASS_NAME_TO_TYPE_FLAGS ()*/);
#endif
a876 5
#ifdef ADDRESS_CLASS_TYPE_FLAGS_TO_NAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS_TO_NAME(type_flags)",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (type_flags)));
d879 2
a880 4
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS_TO_NAME = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags_to_name
                        /*ADDRESS_CLASS_TYPE_FLAGS_TO_NAME ()*/);
#endif
d5153 1
a5153 1
  return gdbarch->address_class_type_flags_to_name (type_flags);
d5179 1
a5179 1
  return gdbarch->address_class_name_to_type_flags (name, type_flags_ptr);
@


1.153
log
@Convert #ifdef HAVE_NONSTEPPABLE_WATCHPOINT into C
@
text
@d274 3
d437 3
d819 3
d862 33
d5123 78
@


1.152
log
@Convert #ifdef HAVE_NONSTEPPABLE_WATCHPOINT into C
@
text
@d433 1
d1389 1
a1389 1
#ifdef HAVE_STEPPABLE_WATCHPOINT
d1391 2
a1392 2
                      "gdbarch_dump: HAVE_STEPPABLE_WATCHPOINT # %s\n",
                      XSTRING (HAVE_STEPPABLE_WATCHPOINT));
d1394 2
a1395 2
                      "gdbarch_dump: HAVE_STEPPABLE_WATCHPOINT = %d\n",
                      HAVE_STEPPABLE_WATCHPOINT);
d5078 1
a5078 1
                                    int have_nonsteppable_watchpoint)
@


1.151
log
@2002-10-02  Andrew Cagney  <ac131313@@redhat.com>

	* infrun.c (resume): Convert #ifdef CANNOT_STEP_BREAKPOINT into C.
	* gdbarch.sh (CANNOT_STEP_BREAKPOINT): Add.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d273 1
d811 1
d1388 8
d5063 17
@


1.151.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@a272 4
  int have_nonsteppable_watchpoint;
  gdbarch_address_class_type_flags_ftype *address_class_type_flags;
  gdbarch_address_class_type_flags_to_name_ftype *address_class_type_flags_to_name;
  gdbarch_address_class_name_to_type_flags_ftype *address_class_name_to_type_flags;
a431 4
  0,
  0,
  0,
  0,
a809 4
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
  /* Skip verify of address_class_type_flags, has predicate */
  /* Skip verify of address_class_type_flags_to_name, has predicate */
  /* Skip verify of address_class_name_to_type_flags, has predicate */
a849 33
#ifdef ADDRESS_CLASS_NAME_TO_TYPE_FLAGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_NAME_TO_TYPE_FLAGS(name, type_flags_ptr)",
                      XSTRING (ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (name, type_flags_ptr)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_CLASS_NAME_TO_TYPE_FLAGS = 0x%08lx\n",
                        (long) current_gdbarch->address_class_name_to_type_flags
                        /*ADDRESS_CLASS_NAME_TO_TYPE_FLAGS ()*/);
#endif
#ifdef ADDRESS_CLASS_TYPE_FLAGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS(byte_size, dwarf2_addr_class)",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS (byte_size, dwarf2_addr_class)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags
                        /*ADDRESS_CLASS_TYPE_FLAGS ()*/);
#endif
#ifdef ADDRESS_CLASS_TYPE_FLAGS_TO_NAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS_TO_NAME(type_flags)",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (type_flags)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS_TO_NAME = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags_to_name
                        /*ADDRESS_CLASS_TYPE_FLAGS_TO_NAME ()*/);
#endif
a1385 8
#ifdef HAVE_NONSTEPPABLE_WATCHPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT # %s\n",
                      XSTRING (HAVE_NONSTEPPABLE_WATCHPOINT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT = %d\n",
                      HAVE_NONSTEPPABLE_WATCHPOINT);
#endif
a5052 95
}

int
gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_have_nonsteppable_watchpoint called\n");
  return gdbarch->have_nonsteppable_watchpoint;
}

void
set_gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch,
                                          int have_nonsteppable_watchpoint)
{
  gdbarch->have_nonsteppable_watchpoint = have_nonsteppable_watchpoint;
}

int
gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags != 0;
}

int
gdbarch_address_class_type_flags (struct gdbarch *gdbarch, int byte_size, int dwarf2_addr_class)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags called\n");
  return gdbarch->address_class_type_flags (byte_size, dwarf2_addr_class);
}

void
set_gdbarch_address_class_type_flags (struct gdbarch *gdbarch,
                                      gdbarch_address_class_type_flags_ftype address_class_type_flags)
{
  gdbarch->address_class_type_flags = address_class_type_flags;
}

int
gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags_to_name != 0;
}

char *
gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch, int type_flags)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_type_flags_to_name == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags_to_name invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags_to_name called\n");
  return gdbarch->address_class_type_flags_to_name (type_flags);
}

void
set_gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch,
                                              gdbarch_address_class_type_flags_to_name_ftype address_class_type_flags_to_name)
{
  gdbarch->address_class_type_flags_to_name = address_class_type_flags_to_name;
}

int
gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_name_to_type_flags != 0;
}

int
gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, char *name, int *type_flags_ptr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_name_to_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_name_to_type_flags invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_name_to_type_flags called\n");
  return gdbarch->address_class_name_to_type_flags (name, type_flags_ptr);
}

void
set_gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch,
                                              gdbarch_address_class_name_to_type_flags_ftype address_class_name_to_type_flags)
{
  gdbarch->address_class_name_to_type_flags = address_class_name_to_type_flags;
@


1.151.2.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d4 1
a4 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d39 1
d42 18
a66 4
#include "reggroups.h"
#include "osabi.h"
#include "symfile.h"		/* For entry_point_address.  */
#include "gdb_obstack.h"
d70 1
d72 5
a91 4

  /* An obstack bound to the lifetime of the architecture.  */
  struct obstack *obstack;

a94 1
  enum gdb_osabi osabi;
d146 1
d148 1
d155 1
d159 1
a159 1
  int deprecated_npc_regnum;
d166 9
a174 31
  gdbarch_register_type_ftype *register_type;
  gdbarch_deprecated_register_virtual_type_ftype *deprecated_register_virtual_type;
  int deprecated_register_bytes;
  gdbarch_deprecated_register_byte_ftype *deprecated_register_byte;
  gdbarch_deprecated_register_raw_size_ftype *deprecated_register_raw_size;
  gdbarch_deprecated_register_virtual_size_ftype *deprecated_register_virtual_size;
  int deprecated_max_register_raw_size;
  int deprecated_max_register_virtual_size;
  gdbarch_unwind_dummy_id_ftype *unwind_dummy_id;
  gdbarch_deprecated_save_dummy_frame_tos_ftype *deprecated_save_dummy_frame_tos;
  int deprecated_fp_regnum;
  gdbarch_deprecated_target_read_fp_ftype *deprecated_target_read_fp;
  gdbarch_push_dummy_call_ftype *push_dummy_call;
  gdbarch_deprecated_push_arguments_ftype *deprecated_push_arguments;
  int deprecated_use_generic_dummy_frames;
  gdbarch_deprecated_push_return_address_ftype *deprecated_push_return_address;
  gdbarch_deprecated_dummy_write_sp_ftype *deprecated_dummy_write_sp;
  int deprecated_register_size;
  int call_dummy_location;
  gdbarch_deprecated_call_dummy_address_ftype *deprecated_call_dummy_address;
  CORE_ADDR deprecated_call_dummy_start_offset;
  CORE_ADDR deprecated_call_dummy_breakpoint_offset;
  int deprecated_call_dummy_length;
  LONGEST * deprecated_call_dummy_words;
  int deprecated_sizeof_call_dummy_words;
  int deprecated_call_dummy_stack_adjust;
  gdbarch_deprecated_fix_call_dummy_ftype *deprecated_fix_call_dummy;
  gdbarch_push_dummy_code_ftype *push_dummy_code;
  gdbarch_deprecated_push_dummy_frame_ftype *deprecated_push_dummy_frame;
  int deprecated_extra_stack_alignment_needed;
  gdbarch_deprecated_do_registers_info_ftype *deprecated_do_registers_info;
d183 16
a198 3
  gdbarch_deprecated_pc_in_call_dummy_ftype *deprecated_pc_in_call_dummy;
  gdbarch_deprecated_init_frame_pc_first_ftype *deprecated_init_frame_pc_first;
  gdbarch_deprecated_init_frame_pc_ftype *deprecated_init_frame_pc;
d201 5
a205 4
  gdbarch_deprecated_get_saved_register_ftype *deprecated_get_saved_register;
  gdbarch_deprecated_register_convertible_ftype *deprecated_register_convertible;
  gdbarch_deprecated_register_convert_to_virtual_ftype *deprecated_register_convert_to_virtual;
  gdbarch_deprecated_register_convert_to_raw_ftype *deprecated_register_convert_to_raw;
a211 3
  gdbarch_deprecated_pop_frame_ftype *deprecated_pop_frame;
  gdbarch_deprecated_store_struct_return_ftype *deprecated_store_struct_return;
  gdbarch_return_value_ftype *return_value;
d213 5
a221 1
  gdbarch_use_struct_convention_ftype *use_struct_convention;
d224 3
a226 2
  gdbarch_deprecated_frame_init_saved_regs_ftype *deprecated_frame_init_saved_regs;
  gdbarch_deprecated_init_extra_frame_info_ftype *deprecated_init_extra_frame_info;
a230 1
  gdbarch_adjust_breakpoint_address_ftype *adjust_breakpoint_address;
d234 1
d239 6
a244 8
  gdbarch_deprecated_frame_chain_ftype *deprecated_frame_chain;
  gdbarch_deprecated_frame_chain_valid_ftype *deprecated_frame_chain_valid;
  gdbarch_deprecated_frame_saved_pc_ftype *deprecated_frame_saved_pc;
  gdbarch_unwind_pc_ftype *unwind_pc;
  gdbarch_unwind_sp_ftype *unwind_sp;
  gdbarch_deprecated_frame_args_address_ftype *deprecated_frame_args_address;
  gdbarch_deprecated_frame_locals_address_ftype *deprecated_frame_locals_address;
  gdbarch_deprecated_saved_pc_after_call_ftype *deprecated_saved_pc_after_call;
d246 1
a246 1
  gdbarch_deprecated_stack_align_ftype *deprecated_stack_align;
d248 3
a250 3
  gdbarch_deprecated_reg_struct_has_addr_ftype *deprecated_reg_struct_has_addr;
  gdbarch_stabs_argument_has_addr_ftype *stabs_argument_has_addr;
  int frame_red_zone_size;
a260 1
  gdbarch_skip_solib_resolver_ftype *skip_solib_resolver;
d268 1
a276 3
  gdbarch_register_reggroup_p_ftype *register_reggroup_p;
  gdbarch_fetch_pointer_argument_ftype *fetch_pointer_argument;
  gdbarch_regset_from_core_section_ftype *regset_from_core_section;
a287 1
  NULL, /* The obstack.  */
d289 2
a290 3
  &bfd_default_arch_struct,  /* bfd_arch_info */
  BFD_ENDIAN_BIG,  /* byte_order */
  GDB_OSABI_UNKNOWN,  /* osabi */
d296 144
a439 152
  8 * sizeof (short),  /* short_bit */
  8 * sizeof (int),  /* int_bit */
  8 * sizeof (long),  /* long_bit */
  8 * sizeof (LONGEST),  /* long_long_bit */
  8 * sizeof (float),  /* float_bit */
  8 * sizeof (double),  /* double_bit */
  8 * sizeof (long double),  /* long_double_bit */
  8 * sizeof (void*),  /* ptr_bit */
  8 * sizeof (void*),  /* addr_bit */
  8 * sizeof (void*),  /* bfd_vma_bit */
  1,  /* char_signed */
  0,  /* read_pc */
  0,  /* write_pc */
  0,  /* read_sp */
  0,  /* virtual_frame_pointer */
  0,  /* pseudo_register_read */
  0,  /* pseudo_register_write */
  0,  /* num_regs */
  0,  /* num_pseudo_regs */
  -1,  /* sp_regnum */
  -1,  /* pc_regnum */
  -1,  /* ps_regnum */
  0,  /* fp0_regnum */
  0,  /* deprecated_npc_regnum */
  0,  /* stab_reg_to_regnum */
  0,  /* ecoff_reg_to_regnum */
  0,  /* dwarf_reg_to_regnum */
  0,  /* sdb_reg_to_regnum */
  0,  /* dwarf2_reg_to_regnum */
  0,  /* register_name */
  0,  /* register_type */
  0,  /* deprecated_register_virtual_type */
  0,  /* deprecated_register_bytes */
  generic_register_byte,  /* deprecated_register_byte */
  generic_register_size,  /* deprecated_register_raw_size */
  generic_register_size,  /* deprecated_register_virtual_size */
  0,  /* deprecated_max_register_raw_size */
  0,  /* deprecated_max_register_virtual_size */
  0,  /* unwind_dummy_id */
  0,  /* deprecated_save_dummy_frame_tos */
  -1,  /* deprecated_fp_regnum */
  0,  /* deprecated_target_read_fp */
  0,  /* push_dummy_call */
  0,  /* deprecated_push_arguments */
  0,  /* deprecated_use_generic_dummy_frames */
  0,  /* deprecated_push_return_address */
  0,  /* deprecated_dummy_write_sp */
  0,  /* deprecated_register_size */
  0,  /* call_dummy_location */
  0,  /* deprecated_call_dummy_address */
  0,  /* deprecated_call_dummy_start_offset */
  0,  /* deprecated_call_dummy_breakpoint_offset */
  0,  /* deprecated_call_dummy_length */
  0,  /* deprecated_call_dummy_words */
  0,  /* deprecated_sizeof_call_dummy_words */
  0,  /* deprecated_call_dummy_stack_adjust */
  0,  /* deprecated_fix_call_dummy */
  0,  /* push_dummy_code */
  0,  /* deprecated_push_dummy_frame */
  0,  /* deprecated_extra_stack_alignment_needed */
  0,  /* deprecated_do_registers_info */
  default_print_registers_info,  /* print_registers_info */
  0,  /* print_float_info */
  0,  /* print_vector_info */
  0,  /* register_sim_regno */
  0,  /* register_bytes_ok */
  0,  /* cannot_fetch_register */
  0,  /* cannot_store_register */
  0,  /* get_longjmp_target */
  generic_pc_in_call_dummy,  /* deprecated_pc_in_call_dummy */
  0,  /* deprecated_init_frame_pc_first */
  0,  /* deprecated_init_frame_pc */
  0,  /* believe_pcc_promotion */
  0,  /* believe_pcc_promotion_type */
  0,  /* deprecated_get_saved_register */
  0,  /* deprecated_register_convertible */
  0,  /* deprecated_register_convert_to_virtual */
  0,  /* deprecated_register_convert_to_raw */
  0,  /* convert_register_p */
  0,  /* register_to_value */
  0,  /* value_to_register */
  0,  /* pointer_to_address */
  0,  /* address_to_pointer */
  0,  /* integer_to_address */
  0,  /* deprecated_pop_frame */
  0,  /* deprecated_store_struct_return */
  0,  /* return_value */
  0,  /* return_value_on_stack */
  0,  /* extract_return_value */
  0,  /* store_return_value */
  0,  /* deprecated_extract_return_value */
  0,  /* deprecated_store_return_value */
  0,  /* use_struct_convention */
  0,  /* extract_struct_value_address */
  0,  /* deprecated_extract_struct_value_address */
  0,  /* deprecated_frame_init_saved_regs */
  0,  /* deprecated_init_extra_frame_info */
  0,  /* skip_prologue */
  0,  /* prologue_frameless_p */
  0,  /* inner_than */
  0,  /* breakpoint_from_pc */
  0,  /* adjust_breakpoint_address */
  0,  /* memory_insert_breakpoint */
  0,  /* memory_remove_breakpoint */
  0,  /* decr_pc_after_break */
  0,  /* function_start_offset */
  generic_remote_translate_xfer_address,  /* remote_translate_xfer_address */
  0,  /* frame_args_skip */
  0,  /* frameless_function_invocation */
  0,  /* deprecated_frame_chain */
  0,  /* deprecated_frame_chain_valid */
  0,  /* deprecated_frame_saved_pc */
  0,  /* unwind_pc */
  0,  /* unwind_sp */
  get_frame_base,  /* deprecated_frame_args_address */
  get_frame_base,  /* deprecated_frame_locals_address */
  0,  /* deprecated_saved_pc_after_call */
  0,  /* frame_num_args */
  0,  /* deprecated_stack_align */
  0,  /* frame_align */
  0,  /* deprecated_reg_struct_has_addr */
  default_stabs_argument_has_addr,  /* stabs_argument_has_addr */
  0,  /* frame_red_zone_size */
  0,  /* parm_boundary */
  0,  /* float_format */
  0,  /* double_format */
  0,  /* long_double_format */
  convert_from_func_ptr_addr_identity,  /* convert_from_func_ptr_addr */
  0,  /* addr_bits_remove */
  0,  /* smash_text_address */
  0,  /* software_single_step */
  0,  /* print_insn */
  0,  /* skip_trampoline_code */
  generic_skip_solib_resolver,  /* skip_solib_resolver */
  0,  /* in_solib_call_trampoline */
  0,  /* in_solib_return_trampoline */
  0,  /* pc_in_sigtramp */
  0,  /* sigtramp_start */
  0,  /* sigtramp_end */
  generic_in_function_epilogue_p,  /* in_function_epilogue_p */
  construct_inferior_arguments,  /* construct_inferior_arguments */
  0,  /* elf_make_msymbol_special */
  0,  /* coff_make_msymbol_special */
  "malloc",  /* name_of_malloc */
  0,  /* cannot_step_breakpoint */
  0,  /* have_nonsteppable_watchpoint */
  0,  /* address_class_type_flags */
  0,  /* address_class_type_flags_to_name */
  0,  /* address_class_name_to_type_flags */
  default_register_reggroup_p,  /* register_reggroup_p */
  0,  /* fetch_pointer_argument */
  0,  /* regset_from_core_section */
d445 13
d471 1
a471 7
  struct gdbarch *current_gdbarch;

  /* Create an obstack for allocating all the per-architecture memory,
     then use that to allocate the architecture vector.  */
  struct obstack *obstack = XMALLOC (struct obstack);
  obstack_init (obstack);
  current_gdbarch = obstack_alloc (obstack, sizeof (*current_gdbarch));
a472 1
  current_gdbarch->obstack = obstack;
a479 1
  current_gdbarch->osabi = info->osabi;
d492 1
d494 3
d500 1
d504 1
a504 1
  current_gdbarch->deprecated_npc_regnum = -1;
d510 8
a517 8
  current_gdbarch->deprecated_register_byte = generic_register_byte;
  current_gdbarch->deprecated_register_raw_size = generic_register_size;
  current_gdbarch->deprecated_register_virtual_size = generic_register_size;
  current_gdbarch->deprecated_fp_regnum = -1;
  current_gdbarch->deprecated_use_generic_dummy_frames = 1;
  current_gdbarch->call_dummy_location = AT_ENTRY_POINT;
  current_gdbarch->deprecated_call_dummy_words = legacy_call_dummy_words;
  current_gdbarch->deprecated_sizeof_call_dummy_words = legacy_sizeof_call_dummy_words;
d522 14
a535 2
  current_gdbarch->deprecated_pc_in_call_dummy = generic_pc_in_call_dummy;
  current_gdbarch->deprecated_register_convertible = deprecated_register_convertible_not;
d542 1
d547 1
d551 1
d556 3
a558 4
  current_gdbarch->deprecated_frame_args_address = get_frame_base;
  current_gdbarch->deprecated_frame_locals_address = get_frame_base;
  current_gdbarch->stabs_argument_has_addr = default_stabs_argument_has_addr;
  current_gdbarch->convert_from_func_ptr_addr = convert_from_func_ptr_addr_identity;
d561 1
a562 1
  current_gdbarch->skip_solib_resolver = generic_skip_solib_resolver;
a570 1
  current_gdbarch->register_reggroup_p = default_register_reggroup_p;
a576 11
/* Allocate extra space using the per-architecture obstack.  */

void *
gdbarch_obstack_zalloc (struct gdbarch *arch, long size)
{
  void *data = obstack_alloc (arch->obstack, size);
  memset (data, 0, size);
  return data;
}


a585 1
  struct obstack *obstack;
d587 2
a588 4
  gdb_assert (!arch->initialized_p);
  obstack = arch->obstack;
  obstack_free (obstack, 0); /* Includes the ARCH.  */
  xfree (obstack);
d592 1
a592 7
/* Ensure that all values in a GDBARCH are reasonable.  */

/* NOTE/WARNING: The parameter is called ``current_gdbarch'' so that it
   just happens to match the global variable ``current_gdbarch''.  That
   way macros refering to that variable get the local and not the global
   version - ulgh.  Once everything is parameterised with gdbarch, this
   will go away. */
d595 1
a595 1
verify_gdbarch (struct gdbarch *current_gdbarch)
d601 3
d607 1
a607 1
  if (current_gdbarch->byte_order == BFD_ENDIAN_UNKNOWN)
d609 1
a609 1
  if (current_gdbarch->bfd_arch_info == NULL)
d620 2
a621 2
  if (current_gdbarch->addr_bit == 0)
    current_gdbarch->addr_bit = TARGET_PTR_BIT;
d623 3
a625 3
  if (current_gdbarch->char_signed == -1)
    current_gdbarch->char_signed = 1;
  /* Skip verify of read_pc, has predicate */
d627 3
a629 1
  /* Skip verify of read_sp, has predicate */
d634 1
a634 1
      && (current_gdbarch->num_regs == -1))
d638 1
d642 1
a642 1
  /* Skip verify of deprecated_npc_regnum, invalid_p == 0 */
d648 20
a667 26
  /* Skip verify of register_type, has predicate */
  /* Skip verify of deprecated_register_virtual_type, has predicate */
  /* Skip verify of deprecated_register_byte, has predicate */
  /* Skip verify of deprecated_register_raw_size, has predicate */
  /* Skip verify of deprecated_register_virtual_size, has predicate */
  /* Skip verify of deprecated_max_register_raw_size, has predicate */
  /* Skip verify of deprecated_max_register_virtual_size, has predicate */
  /* Skip verify of unwind_dummy_id, has predicate */
  /* Skip verify of deprecated_save_dummy_frame_tos, has predicate */
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
  /* Skip verify of deprecated_target_read_fp, has predicate */
  /* Skip verify of push_dummy_call, has predicate */
  /* Skip verify of deprecated_push_arguments, has predicate */
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
  /* Skip verify of deprecated_push_return_address, has predicate */
  /* Skip verify of deprecated_dummy_write_sp, has predicate */
  /* Skip verify of call_dummy_location, invalid_p == 0 */
  /* Skip verify of deprecated_call_dummy_address, has predicate */
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_call_dummy_stack_adjust, has predicate */
  /* Skip verify of deprecated_fix_call_dummy, has predicate */
  /* Skip verify of push_dummy_code, has predicate */
  /* Skip verify of deprecated_push_dummy_frame, has predicate */
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
  /* Skip verify of deprecated_do_registers_info, has predicate */
d676 45
a720 7
  /* Skip verify of deprecated_pc_in_call_dummy, has predicate */
  /* Skip verify of deprecated_init_frame_pc_first, has predicate */
  /* Skip verify of deprecated_init_frame_pc, has predicate */
  /* Skip verify of deprecated_get_saved_register, has predicate */
  /* Skip verify of deprecated_register_convertible, invalid_p == 0 */
  /* Skip verify of deprecated_register_convert_to_virtual, invalid_p == 0 */
  /* Skip verify of deprecated_register_convert_to_raw, invalid_p == 0 */
a726 3
  /* Skip verify of deprecated_pop_frame, has predicate */
  /* Skip verify of deprecated_store_struct_return, has predicate */
  /* Skip verify of return_value, has predicate */
d728 11
a740 1
  /* Skip verify of use_struct_convention, invalid_p == 0 */
d743 5
a747 2
  /* Skip verify of deprecated_frame_init_saved_regs, has predicate */
  /* Skip verify of deprecated_init_extra_frame_info, has predicate */
d749 1
a749 1
      && (current_gdbarch->skip_prologue == 0))
d753 1
a753 1
      && (current_gdbarch->inner_than == 0))
d755 1
a755 4
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->breakpoint_from_pc == 0))
    fprintf_unfiltered (log, "\n\tbreakpoint_from_pc");
  /* Skip verify of adjust_breakpoint_address, has predicate */
d759 1
a759 1
      && (current_gdbarch->decr_pc_after_break == -1))
d761 1
d763 1
a763 1
      && (current_gdbarch->function_start_offset == -1))
d767 1
a767 1
      && (current_gdbarch->frame_args_skip == -1))
d770 20
a789 10
  /* Skip verify of deprecated_frame_chain, has predicate */
  /* Skip verify of deprecated_frame_chain_valid, has predicate */
  /* Skip verify of deprecated_frame_saved_pc, has predicate */
  /* Skip verify of unwind_pc, has predicate */
  /* Skip verify of unwind_sp, has predicate */
  /* Skip verify of deprecated_frame_args_address, has predicate */
  /* Skip verify of deprecated_frame_locals_address, has predicate */
  /* Skip verify of deprecated_saved_pc_after_call, has predicate */
  /* Skip verify of frame_num_args, has predicate */
  /* Skip verify of deprecated_stack_align, has predicate */
d791 9
a799 8
  /* Skip verify of deprecated_reg_struct_has_addr, has predicate */
  /* Skip verify of stabs_argument_has_addr, invalid_p == 0 */
  if (current_gdbarch->float_format == 0)
    current_gdbarch->float_format = default_float_format (current_gdbarch);
  if (current_gdbarch->double_format == 0)
    current_gdbarch->double_format = default_double_format (current_gdbarch);
  if (current_gdbarch->long_double_format == 0)
    current_gdbarch->long_double_format = default_double_format (current_gdbarch);
d804 1
a804 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (current_gdbarch->print_insn == 0))
    fprintf_unfiltered (log, "\n\tprint_insn");
a805 1
  /* Skip verify of skip_solib_resolver, invalid_p == 0 */
d813 1
a821 3
  /* Skip verify of register_reggroup_p, invalid_p == 0 */
  /* Skip verify of fetch_pointer_argument, has predicate */
  /* Skip verify of regset_from_core_section, has predicate */
d841 1
a841 1
gdbarch_dump (struct gdbarch *current_gdbarch, struct ui_file *file)
d846 17
a862 49
  fprintf_unfiltered (file,
                      "gdbarch_dump: convert_from_func_ptr_addr = 0x%08lx\n",
                      (long) current_gdbarch->convert_from_func_ptr_addr);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_frame_align_p() = %d\n",
                      gdbarch_frame_align_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: frame_align = 0x%08lx\n",
                      (long) current_gdbarch->frame_align);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_regset_from_core_section_p() = %d\n",
                      gdbarch_regset_from_core_section_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: regset_from_core_section = 0x%08lx\n",
                      (long) current_gdbarch->regset_from_core_section);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_return_value_p() = %d\n",
                      gdbarch_return_value_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: return_value = 0x%08lx\n",
                      (long) current_gdbarch->return_value);
  fprintf_unfiltered (file,
                      "gdbarch_dump: in_function_epilogue_p = 0x%08lx\n",
                      (long) current_gdbarch->in_function_epilogue_p);
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
                      (long) current_gdbarch->register_reggroup_p);
  fprintf_unfiltered (file,
                      "gdbarch_dump: stabs_argument_has_addr = 0x%08lx\n",
                      (long) current_gdbarch->stabs_argument_has_addr);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_read_p() = %d\n",
                      gdbarch_pseudo_register_read_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_read = 0x%08lx\n",
                      (long) current_gdbarch->pseudo_register_read);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_write_p() = %d\n",
                      gdbarch_pseudo_register_write_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_write = 0x%08lx\n",
                      (long) current_gdbarch->pseudo_register_write);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_name_to_type_flags_p() = %d\n",
                      gdbarch_address_class_name_to_type_flags_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_class_name_to_type_flags = 0x%08lx\n",
                      (long) current_gdbarch->address_class_name_to_type_flags);
#ifdef ADDRESS_CLASS_TYPE_FLAGS_P
d865 7
a871 5
                      "ADDRESS_CLASS_TYPE_FLAGS_P()",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS_P() = %d\n",
                      ADDRESS_CLASS_TYPE_FLAGS_P ());
d878 7
d886 8
a893 3
                      "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = <0x%08lx>\n",
                      (long) current_gdbarch->address_class_type_flags
                      /*ADDRESS_CLASS_TYPE_FLAGS ()*/);
a894 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_type_flags_to_name_p() = %d\n",
                      gdbarch_address_class_type_flags_to_name_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_class_type_flags_to_name = 0x%08lx\n",
                      (long) current_gdbarch->address_class_type_flags_to_name);
d896 2
d902 6
a907 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDRESS_TO_POINTER = <0x%08lx>\n",
                      (long) current_gdbarch->address_to_pointer
                      /*ADDRESS_TO_POINTER ()*/);
d914 5
a918 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDR_BITS_REMOVE = <0x%08lx>\n",
                      (long) current_gdbarch->addr_bits_remove
                      /*ADDR_BITS_REMOVE ()*/);
a919 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_adjust_breakpoint_address_p() = %d\n",
                      gdbarch_adjust_breakpoint_address_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: adjust_breakpoint_address = 0x%08lx\n",
                      (long) current_gdbarch->adjust_breakpoint_address);
d941 35
d977 6
a982 3
                      "gdbarch_dump: BREAKPOINT_FROM_PC = <0x%08lx>\n",
                      (long) current_gdbarch->breakpoint_from_pc
                      /*BREAKPOINT_FROM_PC ()*/);
d992 41
d1038 5
a1042 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_FETCH_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->cannot_fetch_register
                      /*CANNOT_FETCH_REGISTER ()*/);
d1057 7
d1065 8
a1072 3
                      "gdbarch_dump: CANNOT_STORE_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->cannot_store_register
                      /*CANNOT_STORE_REGISTER ()*/);
d1075 2
d1081 12
d1094 8
a1101 3
                      "gdbarch_dump: COFF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                      (long) current_gdbarch->coff_make_msymbol_special
                      /*COFF_MAKE_MSYMBOL_SPECIAL ()*/);
a1102 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: construct_inferior_arguments = 0x%08lx\n",
                      (long) current_gdbarch->construct_inferior_arguments);
d1106 7
a1112 6
                      "CONVERT_REGISTER_P(regnum, type)",
                      XSTRING (CONVERT_REGISTER_P (regnum, type)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CONVERT_REGISTER_P = <0x%08lx>\n",
                      (long) current_gdbarch->convert_register_p
                      /*CONVERT_REGISTER_P ()*/);
d1122 3
a1124 1
#ifdef DEPRECATED_CALL_DUMMY_ADDRESS_P
d1127 8
a1134 5
                      "DEPRECATED_CALL_DUMMY_ADDRESS_P()",
                      XSTRING (DEPRECATED_CALL_DUMMY_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_ADDRESS_P() = %d\n",
                      DEPRECATED_CALL_DUMMY_ADDRESS_P ());
d1136 1
a1136 1
#ifdef DEPRECATED_CALL_DUMMY_ADDRESS
d1139 7
a1145 6
                      "DEPRECATED_CALL_DUMMY_ADDRESS()",
                      XSTRING (DEPRECATED_CALL_DUMMY_ADDRESS ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_call_dummy_address
                      /*DEPRECATED_CALL_DUMMY_ADDRESS ()*/);
d1147 3
a1149 1
#ifdef DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET
d1151 3
a1153 5
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET);
d1155 5
a1159 7
#ifdef DEPRECATED_CALL_DUMMY_LENGTH
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_LENGTH));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH = %d\n",
                      DEPRECATED_CALL_DUMMY_LENGTH);
d1161 3
a1163 1
#ifdef DEPRECATED_CALL_DUMMY_STACK_ADJUST_P
d1166 2
a1167 5
                      "DEPRECATED_CALL_DUMMY_STACK_ADJUST_P()",
                      XSTRING (DEPRECATED_CALL_DUMMY_STACK_ADJUST_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST_P() = %d\n",
                      DEPRECATED_CALL_DUMMY_STACK_ADJUST_P ());
d1169 5
a1173 7
#ifdef DEPRECATED_CALL_DUMMY_STACK_ADJUST
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_STACK_ADJUST));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST = %d\n",
                      DEPRECATED_CALL_DUMMY_STACK_ADJUST);
d1175 3
a1177 1
#ifdef DEPRECATED_CALL_DUMMY_START_OFFSET
d1179 3
a1181 5
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_START_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_START_OFFSET);
d1183 5
a1187 7
#ifdef DEPRECATED_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) DEPRECATED_CALL_DUMMY_WORDS);
d1189 1
a1189 1
#ifdef DEPRECATED_DO_REGISTERS_INFO_P
d1192 7
a1198 5
                      "DEPRECATED_DO_REGISTERS_INFO_P()",
                      XSTRING (DEPRECATED_DO_REGISTERS_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO_P() = %d\n",
                      DEPRECATED_DO_REGISTERS_INFO_P ());
d1200 1
a1200 1
#ifdef DEPRECATED_DO_REGISTERS_INFO
d1203 7
a1209 6
                      "DEPRECATED_DO_REGISTERS_INFO(reg_nr, fpregs)",
                      XSTRING (DEPRECATED_DO_REGISTERS_INFO (reg_nr, fpregs)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_do_registers_info
                      /*DEPRECATED_DO_REGISTERS_INFO ()*/);
d1211 1
a1211 1
#ifdef DEPRECATED_DUMMY_WRITE_SP_P
d1214 7
a1220 5
                      "DEPRECATED_DUMMY_WRITE_SP_P()",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP_P() = %d\n",
                      DEPRECATED_DUMMY_WRITE_SP_P ());
d1222 3
a1224 1
#ifdef DEPRECATED_DUMMY_WRITE_SP
d1227 8
a1234 6
                      "DEPRECATED_DUMMY_WRITE_SP(val)",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP (val)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_dummy_write_sp
                      /*DEPRECATED_DUMMY_WRITE_SP ()*/);
d1236 3
a1238 1
#ifdef DEPRECATED_EXTRACT_RETURN_VALUE
d1241 2
a1242 6
                      "DEPRECATED_EXTRACT_RETURN_VALUE(type, regbuf, valbuf)",
                      XSTRING (DEPRECATED_EXTRACT_RETURN_VALUE (type, regbuf, valbuf)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_extract_return_value
                      /*DEPRECATED_EXTRACT_RETURN_VALUE ()*/);
d1244 5
a1248 8
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P()",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P() = %d\n",
                      DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ());
d1250 1
a1250 1
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
d1253 7
a1259 6
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (regbuf)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_extract_struct_value_address
                      /*DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
d1261 1
a1261 1
#ifdef DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED
d1263 2
a1264 2
                      "gdbarch_dump: DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED # %s\n",
                      XSTRING (DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED));
d1266 2
a1267 2
                      "gdbarch_dump: DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED = %d\n",
                      DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED);
d1269 3
a1271 1
#ifdef DEPRECATED_FIX_CALL_DUMMY_P
d1274 8
a1281 5
                      "DEPRECATED_FIX_CALL_DUMMY_P()",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY_P() = %d\n",
                      DEPRECATED_FIX_CALL_DUMMY_P ());
d1283 1
a1283 1
#ifdef DEPRECATED_FIX_CALL_DUMMY
d1285 2
a1286 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FIX_CALL_DUMMY(dummy, pc, fun, nargs, args, type, gcc_p)",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY (dummy, pc, fun, nargs, args, type, gcc_p)));
d1288 2
a1289 3
                      "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_fix_call_dummy
                      /*DEPRECATED_FIX_CALL_DUMMY ()*/);
d1291 1
a1291 1
#ifdef DEPRECATED_FP_REGNUM
d1293 2
a1294 2
                      "gdbarch_dump: DEPRECATED_FP_REGNUM # %s\n",
                      XSTRING (DEPRECATED_FP_REGNUM));
d1296 2
a1297 2
                      "gdbarch_dump: DEPRECATED_FP_REGNUM = %d\n",
                      DEPRECATED_FP_REGNUM);
d1299 1
a1299 1
#ifdef DEPRECATED_FRAME_ARGS_ADDRESS_P
d1302 7
a1308 5
                      "DEPRECATED_FRAME_ARGS_ADDRESS_P()",
                      XSTRING (DEPRECATED_FRAME_ARGS_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS_P() = %d\n",
                      DEPRECATED_FRAME_ARGS_ADDRESS_P ());
d1310 1
a1310 1
#ifdef DEPRECATED_FRAME_ARGS_ADDRESS
d1313 7
a1319 6
                      "DEPRECATED_FRAME_ARGS_ADDRESS(fi)",
                      XSTRING (DEPRECATED_FRAME_ARGS_ADDRESS (fi)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_args_address
                      /*DEPRECATED_FRAME_ARGS_ADDRESS ()*/);
d1321 1
a1321 1
#ifdef DEPRECATED_FRAME_CHAIN_P
d1323 2
a1324 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN_P()",
                      XSTRING (DEPRECATED_FRAME_CHAIN_P ()));
d1326 2
a1327 2
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_P() = %d\n",
                      DEPRECATED_FRAME_CHAIN_P ());
d1329 1
a1329 1
#ifdef DEPRECATED_FRAME_CHAIN
d1332 7
a1338 6
                      "DEPRECATED_FRAME_CHAIN(frame)",
                      XSTRING (DEPRECATED_FRAME_CHAIN (frame)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain
                      /*DEPRECATED_FRAME_CHAIN ()*/);
d1340 1
a1340 1
#ifdef DEPRECATED_FRAME_CHAIN_VALID_P
d1343 7
a1349 5
                      "DEPRECATED_FRAME_CHAIN_VALID_P()",
                      XSTRING (DEPRECATED_FRAME_CHAIN_VALID_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID_P() = %d\n",
                      DEPRECATED_FRAME_CHAIN_VALID_P ());
d1351 3
a1353 1
#ifdef DEPRECATED_FRAME_CHAIN_VALID
d1356 8
a1363 6
                      "DEPRECATED_FRAME_CHAIN_VALID(chain, thisframe)",
                      XSTRING (DEPRECATED_FRAME_CHAIN_VALID (chain, thisframe)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain_valid
                      /*DEPRECATED_FRAME_CHAIN_VALID ()*/);
d1365 1
a1365 1
#ifdef DEPRECATED_FRAME_INIT_SAVED_REGS_P
d1368 7
a1374 5
                      "DEPRECATED_FRAME_INIT_SAVED_REGS_P()",
                      XSTRING (DEPRECATED_FRAME_INIT_SAVED_REGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS_P() = %d\n",
                      DEPRECATED_FRAME_INIT_SAVED_REGS_P ());
d1376 1
a1376 1
#ifdef DEPRECATED_FRAME_INIT_SAVED_REGS
d1379 7
a1385 6
                      "DEPRECATED_FRAME_INIT_SAVED_REGS(frame)",
                      XSTRING (DEPRECATED_FRAME_INIT_SAVED_REGS (frame)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_init_saved_regs
                      /*DEPRECATED_FRAME_INIT_SAVED_REGS ()*/);
d1387 1
a1387 1
#ifdef DEPRECATED_FRAME_LOCALS_ADDRESS_P
d1390 7
a1396 5
                      "DEPRECATED_FRAME_LOCALS_ADDRESS_P()",
                      XSTRING (DEPRECATED_FRAME_LOCALS_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS_P() = %d\n",
                      DEPRECATED_FRAME_LOCALS_ADDRESS_P ());
d1398 1
a1398 1
#ifdef DEPRECATED_FRAME_LOCALS_ADDRESS
d1400 2
a1401 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_LOCALS_ADDRESS(fi)",
                      XSTRING (DEPRECATED_FRAME_LOCALS_ADDRESS (fi)));
d1403 2
a1404 3
                      "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_locals_address
                      /*DEPRECATED_FRAME_LOCALS_ADDRESS ()*/);
d1406 1
a1406 1
#ifdef DEPRECATED_FRAME_SAVED_PC_P
d1409 7
a1415 5
                      "DEPRECATED_FRAME_SAVED_PC_P()",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC_P() = %d\n",
                      DEPRECATED_FRAME_SAVED_PC_P ());
d1417 3
a1419 1
#ifdef DEPRECATED_FRAME_SAVED_PC
d1422 8
a1429 6
                      "DEPRECATED_FRAME_SAVED_PC(fi)",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC (fi)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_saved_pc
                      /*DEPRECATED_FRAME_SAVED_PC ()*/);
d1431 1
a1431 1
#ifdef DEPRECATED_GET_SAVED_REGISTER_P
d1433 2
a1434 3
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_GET_SAVED_REGISTER_P()",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER_P ()));
d1436 2
a1437 2
                      "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER_P() = %d\n",
                      DEPRECATED_GET_SAVED_REGISTER_P ());
d1439 3
a1441 1
#ifdef DEPRECATED_GET_SAVED_REGISTER
d1444 2
a1445 6
                      "DEPRECATED_GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval)",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER (raw_buffer, optimized, addrp, frame, regnum, lval)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_get_saved_register
                      /*DEPRECATED_GET_SAVED_REGISTER ()*/);
d1447 5
a1451 588
#ifdef DEPRECATED_INIT_EXTRA_FRAME_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_EXTRA_FRAME_INFO_P()",
                      XSTRING (DEPRECATED_INIT_EXTRA_FRAME_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO_P() = %d\n",
                      DEPRECATED_INIT_EXTRA_FRAME_INFO_P ());
#endif
#ifdef DEPRECATED_INIT_EXTRA_FRAME_INFO
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_EXTRA_FRAME_INFO(fromleaf, frame)",
                      XSTRING (DEPRECATED_INIT_EXTRA_FRAME_INFO (fromleaf, frame)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_extra_frame_info
                      /*DEPRECATED_INIT_EXTRA_FRAME_INFO ()*/);
#endif
#ifdef DEPRECATED_INIT_FRAME_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_P()",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_P() = %d\n",
                      DEPRECATED_INIT_FRAME_PC_P ());
#endif
#ifdef DEPRECATED_INIT_FRAME_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC(fromleaf, prev)",
                      XSTRING (DEPRECATED_INIT_FRAME_PC (fromleaf, prev)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_frame_pc
                      /*DEPRECATED_INIT_FRAME_PC ()*/);
#endif
#ifdef DEPRECATED_INIT_FRAME_PC_FIRST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_FIRST_P()",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_FIRST_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST_P() = %d\n",
                      DEPRECATED_INIT_FRAME_PC_FIRST_P ());
#endif
#ifdef DEPRECATED_INIT_FRAME_PC_FIRST
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_FIRST(fromleaf, prev)",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_FIRST (fromleaf, prev)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_frame_pc_first
                      /*DEPRECATED_INIT_FRAME_PC_FIRST ()*/);
#endif
#ifdef DEPRECATED_MAX_REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_MAX_REGISTER_RAW_SIZE_P()",
                      XSTRING (DEPRECATED_MAX_REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE_P() = %d\n",
                      DEPRECATED_MAX_REGISTER_RAW_SIZE_P ());
#endif
#ifdef DEPRECATED_MAX_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE # %s\n",
                      XSTRING (DEPRECATED_MAX_REGISTER_RAW_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE = %d\n",
                      DEPRECATED_MAX_REGISTER_RAW_SIZE);
#endif
#ifdef DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P ());
#endif
#ifdef DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE # %s\n",
                      XSTRING (DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE = %d\n",
                      DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE);
#endif
#ifdef DEPRECATED_NPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_NPC_REGNUM # %s\n",
                      XSTRING (DEPRECATED_NPC_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_NPC_REGNUM = %d\n",
                      DEPRECATED_NPC_REGNUM);
#endif
#ifdef DEPRECATED_PC_IN_CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_CALL_DUMMY_P()",
                      XSTRING (DEPRECATED_PC_IN_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY_P() = %d\n",
                      DEPRECATED_PC_IN_CALL_DUMMY_P ());
#endif
#ifdef DEPRECATED_PC_IN_CALL_DUMMY
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_CALL_DUMMY(pc, sp, frame_address)",
                      XSTRING (DEPRECATED_PC_IN_CALL_DUMMY (pc, sp, frame_address)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pc_in_call_dummy
                      /*DEPRECATED_PC_IN_CALL_DUMMY ()*/);
#endif
#ifdef DEPRECATED_POP_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME_P()",
                      XSTRING (DEPRECATED_POP_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_POP_FRAME_P() = %d\n",
                      DEPRECATED_POP_FRAME_P ());
#endif
#ifdef DEPRECATED_POP_FRAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME(-)",
                      XSTRING (DEPRECATED_POP_FRAME (-)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_POP_FRAME = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pop_frame
                      /*DEPRECATED_POP_FRAME ()*/);
#endif
#ifdef DEPRECATED_PUSH_ARGUMENTS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS_P()",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS_P() = %d\n",
                      DEPRECATED_PUSH_ARGUMENTS_P ());
#endif
#ifdef DEPRECATED_PUSH_ARGUMENTS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr)",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_arguments
                      /*DEPRECATED_PUSH_ARGUMENTS ()*/);
#endif
#ifdef DEPRECATED_PUSH_DUMMY_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_DUMMY_FRAME_P()",
                      XSTRING (DEPRECATED_PUSH_DUMMY_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME_P() = %d\n",
                      DEPRECATED_PUSH_DUMMY_FRAME_P ());
#endif
#ifdef DEPRECATED_PUSH_DUMMY_FRAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_DUMMY_FRAME(-)",
                      XSTRING (DEPRECATED_PUSH_DUMMY_FRAME (-)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_dummy_frame
                      /*DEPRECATED_PUSH_DUMMY_FRAME ()*/);
#endif
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS_P()",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS_P() = %d\n",
                      DEPRECATED_PUSH_RETURN_ADDRESS_P ());
#endif
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS(pc, sp)",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS (pc, sp)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_return_address
                      /*DEPRECATED_PUSH_RETURN_ADDRESS ()*/);
#endif
#ifdef DEPRECATED_REGISTER_BYTE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_BYTE_P()",
                      XSTRING (DEPRECATED_REGISTER_BYTE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTE_P() = %d\n",
                      DEPRECATED_REGISTER_BYTE_P ());
#endif
#ifdef DEPRECATED_REGISTER_BYTE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_BYTE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_BYTE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_byte
                      /*DEPRECATED_REGISTER_BYTE ()*/);
#endif
#ifdef DEPRECATED_REGISTER_BYTES
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES # %s\n",
                      XSTRING (DEPRECATED_REGISTER_BYTES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES = %d\n",
                      DEPRECATED_REGISTER_BYTES);
#endif
#ifdef DEPRECATED_REGISTER_CONVERTIBLE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERTIBLE(nr)",
                      XSTRING (DEPRECATED_REGISTER_CONVERTIBLE (nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERTIBLE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convertible
                      /*DEPRECATED_REGISTER_CONVERTIBLE ()*/);
#endif
#ifdef DEPRECATED_REGISTER_CONVERT_TO_RAW
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERT_TO_RAW(type, regnum, from, to)",
                      XSTRING (DEPRECATED_REGISTER_CONVERT_TO_RAW (type, regnum, from, to)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_RAW = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convert_to_raw
                      /*DEPRECATED_REGISTER_CONVERT_TO_RAW ()*/);
#endif
#ifdef DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL(regnum, type, from, to)",
                      XSTRING (DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (regnum, type, from, to)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convert_to_virtual
                      /*DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL ()*/);
#endif
#ifdef DEPRECATED_REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_RAW_SIZE_P()",
                      XSTRING (DEPRECATED_REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_RAW_SIZE_P() = %d\n",
                      DEPRECATED_REGISTER_RAW_SIZE_P ());
#endif
#ifdef DEPRECATED_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_RAW_SIZE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_RAW_SIZE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_RAW_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_raw_size
                      /*DEPRECATED_REGISTER_RAW_SIZE ()*/);
#endif
#ifdef DEPRECATED_REGISTER_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE # %s\n",
                      XSTRING (DEPRECATED_REGISTER_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE = %d\n",
                      DEPRECATED_REGISTER_SIZE);
#endif
#ifdef DEPRECATED_REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      DEPRECATED_REGISTER_VIRTUAL_SIZE_P ());
#endif
#ifdef DEPRECATED_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_SIZE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_SIZE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_size
                      /*DEPRECATED_REGISTER_VIRTUAL_SIZE ()*/);
#endif
#ifdef DEPRECATED_REGISTER_VIRTUAL_TYPE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_TYPE_P()",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_TYPE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_TYPE_P() = %d\n",
                      DEPRECATED_REGISTER_VIRTUAL_TYPE_P ());
#endif
#ifdef DEPRECATED_REGISTER_VIRTUAL_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_TYPE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_TYPE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_TYPE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_type
                      /*DEPRECATED_REGISTER_VIRTUAL_TYPE ()*/);
#endif
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REG_STRUCT_HAS_ADDR_P()",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR_P() = %d\n",
                      DEPRECATED_REG_STRUCT_HAS_ADDR_P ());
#endif
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR (gcc_p, type)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_reg_struct_has_addr
                      /*DEPRECATED_REG_STRUCT_HAS_ADDR ()*/);
#endif
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL_P()",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL_P() = %d\n",
                      DEPRECATED_SAVED_PC_AFTER_CALL_P ());
#endif
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL(frame)",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL (frame)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_saved_pc_after_call
                      /*DEPRECATED_SAVED_PC_AFTER_CALL ()*/);
#endif
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS_P()",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS_P() = %d\n",
                      DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ());
#endif
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS(sp)",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS (sp)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_save_dummy_frame_tos
                      /*DEPRECATED_SAVE_DUMMY_FRAME_TOS ()*/);
#endif
#ifdef DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_SIZEOF_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS = %d\n",
                      DEPRECATED_SIZEOF_CALL_DUMMY_WORDS);
#endif
#ifdef DEPRECATED_STACK_ALIGN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN_P()",
                      XSTRING (DEPRECATED_STACK_ALIGN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STACK_ALIGN_P() = %d\n",
                      DEPRECATED_STACK_ALIGN_P ());
#endif
#ifdef DEPRECATED_STACK_ALIGN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN(sp)",
                      XSTRING (DEPRECATED_STACK_ALIGN (sp)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STACK_ALIGN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_stack_align
                      /*DEPRECATED_STACK_ALIGN ()*/);
#endif
#ifdef DEPRECATED_STORE_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_RETURN_VALUE(type, valbuf)",
                      XSTRING (DEPRECATED_STORE_RETURN_VALUE (type, valbuf)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STORE_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_store_return_value
                      /*DEPRECATED_STORE_RETURN_VALUE ()*/);
#endif
#ifdef DEPRECATED_STORE_STRUCT_RETURN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN_P()",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN_P() = %d\n",
                      DEPRECATED_STORE_STRUCT_RETURN_P ());
#endif
#ifdef DEPRECATED_STORE_STRUCT_RETURN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN(addr, sp)",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN (addr, sp)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_store_struct_return
                      /*DEPRECATED_STORE_STRUCT_RETURN ()*/);
#endif
#ifdef DEPRECATED_TARGET_READ_FP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP_P()",
                      XSTRING (DEPRECATED_TARGET_READ_FP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_TARGET_READ_FP_P() = %d\n",
                      DEPRECATED_TARGET_READ_FP_P ());
#endif
#ifdef DEPRECATED_TARGET_READ_FP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP()",
                      XSTRING (DEPRECATED_TARGET_READ_FP ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_TARGET_READ_FP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_target_read_fp
                      /*DEPRECATED_TARGET_READ_FP ()*/);
#endif
#ifdef DEPRECATED_USE_GENERIC_DUMMY_FRAMES
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_USE_GENERIC_DUMMY_FRAMES # %s\n",
                      XSTRING (DEPRECATED_USE_GENERIC_DUMMY_FRAMES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_USE_GENERIC_DUMMY_FRAMES = %d\n",
                      DEPRECATED_USE_GENERIC_DUMMY_FRAMES);
#endif
#ifdef DWARF2_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DWARF2_REG_TO_REGNUM(dwarf2_regnr)",
                      XSTRING (DWARF2_REG_TO_REGNUM (dwarf2_regnr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DWARF2_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->dwarf2_reg_to_regnum
                      /*DWARF2_REG_TO_REGNUM ()*/);
#endif
#ifdef DWARF_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DWARF_REG_TO_REGNUM(dwarf_regnr)",
                      XSTRING (DWARF_REG_TO_REGNUM (dwarf_regnr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DWARF_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->dwarf_reg_to_regnum
                      /*DWARF_REG_TO_REGNUM ()*/);
#endif
#ifdef ECOFF_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ECOFF_REG_TO_REGNUM(ecoff_regnr)",
                      XSTRING (ECOFF_REG_TO_REGNUM (ecoff_regnr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ECOFF_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->ecoff_reg_to_regnum
                      /*ECOFF_REG_TO_REGNUM ()*/);
#endif
#ifdef ELF_MAKE_MSYMBOL_SPECIAL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ELF_MAKE_MSYMBOL_SPECIAL(sym, msym)",
                      XSTRING (ELF_MAKE_MSYMBOL_SPECIAL (sym, msym)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ELF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                      (long) current_gdbarch->elf_make_msymbol_special
                      /*ELF_MAKE_MSYMBOL_SPECIAL ()*/);
#endif
#ifdef EXTRACT_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_RETURN_VALUE(type, regcache, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regcache, valbuf)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->extract_return_value
                      /*EXTRACT_RETURN_VALUE ()*/);
#endif
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS_P()",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS_P() = %d\n",
                      EXTRACT_STRUCT_VALUE_ADDRESS_P ());
#endif
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS(regcache)",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS (regcache)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->extract_struct_value_address
                      /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
#ifdef FETCH_POINTER_ARGUMENT_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT_P()",
                      XSTRING (FETCH_POINTER_ARGUMENT_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FETCH_POINTER_ARGUMENT_P() = %d\n",
                      FETCH_POINTER_ARGUMENT_P ());
#endif
#ifdef FETCH_POINTER_ARGUMENT
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT(frame, argi, type)",
                      XSTRING (FETCH_POINTER_ARGUMENT (frame, argi, type)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FETCH_POINTER_ARGUMENT = <0x%08lx>\n",
                      (long) current_gdbarch->fetch_pointer_argument
                      /*FETCH_POINTER_ARGUMENT ()*/);
#endif
#ifdef FP0_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP0_REGNUM # %s\n",
                      XSTRING (FP0_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP0_REGNUM = %d\n",
                      FP0_REGNUM);
#endif
#ifdef FRAMELESS_FUNCTION_INVOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (FRAMELESS_FUNCTION_INVOCATION (fi)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = <0x%08lx>\n",
                      (long) current_gdbarch->frameless_function_invocation
                      /*FRAMELESS_FUNCTION_INVOCATION ()*/);
#endif
#ifdef FRAME_ARGS_SKIP
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_ARGS_SKIP # %s\n",
                      XSTRING (FRAME_ARGS_SKIP));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_ARGS_SKIP = %ld\n",
                      (long) FRAME_ARGS_SKIP);
#endif
#ifdef FRAME_NUM_ARGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_NUM_ARGS_P()",
                      XSTRING (FRAME_NUM_ARGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_NUM_ARGS_P() = %d\n",
                      FRAME_NUM_ARGS_P ());
#endif
#ifdef FRAME_NUM_ARGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_NUM_ARGS(frame)",
                      XSTRING (FRAME_NUM_ARGS (frame)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_NUM_ARGS = <0x%08lx>\n",
                      (long) current_gdbarch->frame_num_args
                      /*FRAME_NUM_ARGS ()*/);
d1453 3
a1455 1
#ifdef FRAME_RED_ZONE_SIZE
d1457 3
a1459 5
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE # %s\n",
                      XSTRING (FRAME_RED_ZONE_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE = %d\n",
                      FRAME_RED_ZONE_SIZE);
d1461 5
a1465 7
#ifdef FUNCTION_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET # %s\n",
                      XSTRING (FUNCTION_START_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET = %ld\n",
                      (long) FUNCTION_START_OFFSET);
d1467 3
a1469 1
#ifdef GET_LONGJMP_TARGET_P
d1472 2
a1473 5
                      "GET_LONGJMP_TARGET_P()",
                      XSTRING (GET_LONGJMP_TARGET_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: GET_LONGJMP_TARGET_P() = %d\n",
                      GET_LONGJMP_TARGET_P ());
d1475 5
a1479 17
#ifdef GET_LONGJMP_TARGET
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_LONGJMP_TARGET(pc)",
                      XSTRING (GET_LONGJMP_TARGET (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: GET_LONGJMP_TARGET = <0x%08lx>\n",
                      (long) current_gdbarch->get_longjmp_target
                      /*GET_LONGJMP_TARGET ()*/);
#endif
#ifdef HAVE_NONSTEPPABLE_WATCHPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT # %s\n",
                      XSTRING (HAVE_NONSTEPPABLE_WATCHPOINT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT = %d\n",
                      HAVE_NONSTEPPABLE_WATCHPOINT);
d1486 5
a1490 13
  fprintf_unfiltered (file,
                      "gdbarch_dump: INNER_THAN = <0x%08lx>\n",
                      (long) current_gdbarch->inner_than
                      /*INNER_THAN ()*/);
#endif
#ifdef INTEGER_TO_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INTEGER_TO_ADDRESS_P()",
                      XSTRING (INTEGER_TO_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: INTEGER_TO_ADDRESS_P() = %d\n",
                      INTEGER_TO_ADDRESS_P ());
d1497 5
a1501 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: INTEGER_TO_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->integer_to_address
                      /*INTEGER_TO_ADDRESS ()*/);
d1508 5
a1512 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_call_trampoline
                      /*IN_SOLIB_CALL_TRAMPOLINE ()*/);
d1519 7
d1527 13
a1539 3
                      "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_return_trampoline
                      /*IN_SOLIB_RETURN_TRAMPOLINE ()*/);
d1546 5
a1550 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = <0x%08lx>\n",
                      (long) current_gdbarch->memory_insert_breakpoint
                      /*MEMORY_INSERT_BREAKPOINT ()*/);
d1557 5
a1561 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = <0x%08lx>\n",
                      (long) current_gdbarch->memory_remove_breakpoint
                      /*MEMORY_REMOVE_BREAKPOINT ()*/);
d1568 10
a1577 2
                      "gdbarch_dump: NAME_OF_MALLOC = %s\n",
                      NAME_OF_MALLOC);
d1603 11
d1619 5
a1623 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: PC_IN_SIGTRAMP = <0x%08lx>\n",
                      (long) current_gdbarch->pc_in_sigtramp
                      /*PC_IN_SIGTRAMP ()*/);
d1638 9
d1648 3
a1650 3
                      "gdbarch_dump: POINTER_TO_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->pointer_to_address
                      /*POINTER_TO_ADDRESS ()*/);
d1652 7
d1660 21
a1680 14
                      "gdbarch_dump: gdbarch_print_float_info_p() = %d\n",
                      gdbarch_print_float_info_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_float_info = 0x%08lx\n",
                      (long) current_gdbarch->print_float_info);
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_registers_info = 0x%08lx\n",
                      (long) current_gdbarch->print_registers_info);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_print_vector_info_p() = %d\n",
                      gdbarch_print_vector_info_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_vector_info = 0x%08lx\n",
                      (long) current_gdbarch->print_vector_info);
d1686 5
a1690 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: PROLOGUE_FRAMELESS_P = <0x%08lx>\n",
                      (long) current_gdbarch->prologue_frameless_p
                      /*PROLOGUE_FRAMELESS_P ()*/);
d1700 1
d1702 12
a1713 2
                      "gdbarch_dump: gdbarch_push_dummy_call_p() = %d\n",
                      gdbarch_push_dummy_call_p (current_gdbarch));
d1715 11
a1725 2
                      "gdbarch_dump: push_dummy_call = 0x%08lx\n",
                      (long) current_gdbarch->push_dummy_call);
d1727 10
a1736 2
                      "gdbarch_dump: gdbarch_push_dummy_code_p() = %d\n",
                      gdbarch_push_dummy_code_p (current_gdbarch));
d1738 10
a1747 3
                      "gdbarch_dump: push_dummy_code = 0x%08lx\n",
                      (long) current_gdbarch->push_dummy_code);
#ifdef REGISTER_BYTES_OK_P
d1749 2
a1750 3
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTES_OK_P()",
                      XSTRING (REGISTER_BYTES_OK_P ()));
d1752 2
a1753 2
                      "gdbarch_dump: REGISTER_BYTES_OK_P() = %d\n",
                      REGISTER_BYTES_OK_P ());
d1760 34
d1795 9
a1803 3
                      "gdbarch_dump: REGISTER_BYTES_OK = <0x%08lx>\n",
                      (long) current_gdbarch->register_bytes_ok
                      /*REGISTER_BYTES_OK ()*/);
d1810 7
d1818 8
a1825 3
                      "gdbarch_dump: REGISTER_NAME = <0x%08lx>\n",
                      (long) current_gdbarch->register_name
                      /*REGISTER_NAME ()*/);
d1832 7
d1840 5
a1844 3
                      "gdbarch_dump: REGISTER_SIM_REGNO = <0x%08lx>\n",
                      (long) current_gdbarch->register_sim_regno
                      /*REGISTER_SIM_REGNO ()*/);
d1847 2
d1851 10
a1860 2
                      "REGISTER_TO_VALUE(frame, regnum, type, buf)",
                      XSTRING (REGISTER_TO_VALUE (frame, regnum, type, buf)));
d1862 8
a1869 3
                      "gdbarch_dump: REGISTER_TO_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->register_to_value
                      /*REGISTER_TO_VALUE ()*/);
d1871 1
d1873 10
a1882 2
                      "gdbarch_dump: gdbarch_register_type_p() = %d\n",
                      gdbarch_register_type_p (current_gdbarch));
d1884 12
a1895 2
                      "gdbarch_dump: register_type = 0x%08lx\n",
                      (long) current_gdbarch->register_type);
d1897 10
a1906 2
                      "gdbarch_dump: remote_translate_xfer_address = 0x%08lx\n",
                      (long) current_gdbarch->remote_translate_xfer_address);
d1912 20
d1933 9
a1941 3
                      "gdbarch_dump: RETURN_VALUE_ON_STACK = <0x%08lx>\n",
                      (long) current_gdbarch->return_value_on_stack
                      /*RETURN_VALUE_ON_STACK ()*/);
d1948 5
a1952 13
  fprintf_unfiltered (file,
                      "gdbarch_dump: SDB_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->sdb_reg_to_regnum
                      /*SDB_REG_TO_REGNUM ()*/);
#endif
#ifdef SIGTRAMP_END_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_END_P()",
                      XSTRING (SIGTRAMP_END_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_END_P() = %d\n",
                      SIGTRAMP_END_P ());
d1959 5
a1963 13
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_END = <0x%08lx>\n",
                      (long) current_gdbarch->sigtramp_end
                      /*SIGTRAMP_END ()*/);
#endif
#ifdef SIGTRAMP_START_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_START_P()",
                      XSTRING (SIGTRAMP_START_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_START_P() = %d\n",
                      SIGTRAMP_START_P ());
d1970 10
d1981 2
a1982 3
                      "gdbarch_dump: SIGTRAMP_START = <0x%08lx>\n",
                      (long) current_gdbarch->sigtramp_start
                      /*SIGTRAMP_START ()*/);
d1989 5
a1993 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SKIP_PROLOGUE = <0x%08lx>\n",
                      (long) current_gdbarch->skip_prologue
                      /*SKIP_PROLOGUE ()*/);
a1994 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: skip_solib_resolver = 0x%08lx\n",
                      (long) current_gdbarch->skip_solib_resolver);
d2000 5
a2004 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SKIP_TRAMPOLINE_CODE = <0x%08lx>\n",
                      (long) current_gdbarch->skip_trampoline_code
                      /*SKIP_TRAMPOLINE_CODE ()*/);
d2011 5
a2015 13
  fprintf_unfiltered (file,
                      "gdbarch_dump: SMASH_TEXT_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->smash_text_address
                      /*SMASH_TEXT_ADDRESS ()*/);
#endif
#ifdef SOFTWARE_SINGLE_STEP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SOFTWARE_SINGLE_STEP_P()",
                      XSTRING (SOFTWARE_SINGLE_STEP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SOFTWARE_SINGLE_STEP_P() = %d\n",
                      SOFTWARE_SINGLE_STEP_P ());
d2018 2
d2024 6
a2029 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SOFTWARE_SINGLE_STEP = <0x%08lx>\n",
                      (long) current_gdbarch->software_single_step
                      /*SOFTWARE_SINGLE_STEP ()*/);
d2044 7
d2052 8
a2059 3
                      "gdbarch_dump: STAB_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->stab_reg_to_regnum
                      /*STAB_REG_TO_REGNUM ()*/);
d2062 2
d2068 10
d2079 9
a2087 3
                      "gdbarch_dump: STORE_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->store_return_value
                      /*STORE_RETURN_VALUE ()*/);
d2143 2
a2144 2
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT = %s\n",
                      (TARGET_DOUBLE_FORMAT)->name);
d2159 2
a2160 2
                      "gdbarch_dump: TARGET_FLOAT_FORMAT = %s\n",
                      (TARGET_FLOAT_FORMAT)->name);
d2191 2
a2192 2
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT = %s\n",
                      (TARGET_LONG_DOUBLE_FORMAT)->name);
a2201 8
#ifdef TARGET_OSABI
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_OSABI # %s\n",
                      XSTRING (TARGET_OSABI));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_OSABI = %ld\n",
                      (long) TARGET_OSABI);
#endif
d2207 5
a2211 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PRINT_INSN = <0x%08lx>\n",
                      (long) current_gdbarch->print_insn
                      /*TARGET_PRINT_INSN ()*/);
d2221 1
a2221 1
#ifdef TARGET_READ_PC_P
d2224 7
a2230 5
                      "TARGET_READ_PC_P()",
                      XSTRING (TARGET_READ_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_PC_P() = %d\n",
                      TARGET_READ_PC_P ());
d2237 5
a2241 13
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_PC = <0x%08lx>\n",
                      (long) current_gdbarch->read_pc
                      /*TARGET_READ_PC ()*/);
#endif
#ifdef TARGET_READ_SP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_SP_P()",
                      XSTRING (TARGET_READ_SP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_SP_P() = %d\n",
                      TARGET_READ_SP_P ());
d2248 5
a2252 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_SP = <0x%08lx>\n",
                      (long) current_gdbarch->read_sp
                      /*TARGET_READ_SP ()*/);
d2263 2
d2269 6
a2274 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_VIRTUAL_FRAME_POINTER = <0x%08lx>\n",
                      (long) current_gdbarch->virtual_frame_pointer
                      /*TARGET_VIRTUAL_FRAME_POINTER ()*/);
d2277 2
d2283 10
d2294 9
a2302 3
                      "gdbarch_dump: TARGET_WRITE_PC = <0x%08lx>\n",
                      (long) current_gdbarch->write_pc
                      /*TARGET_WRITE_PC ()*/);
d2304 1
d2306 2
a2307 2
                      "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                      gdbarch_unwind_dummy_id_p (current_gdbarch));
d2309 3
a2311 14
                      "gdbarch_dump: unwind_dummy_id = 0x%08lx\n",
                      (long) current_gdbarch->unwind_dummy_id);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                      gdbarch_unwind_pc_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_pc = 0x%08lx\n",
                      (long) current_gdbarch->unwind_pc);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_sp_p() = %d\n",
                      gdbarch_unwind_sp_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_sp = 0x%08lx\n",
                      (long) current_gdbarch->unwind_sp);
d2317 5
a2321 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: USE_STRUCT_CONVENTION = <0x%08lx>\n",
                      (long) current_gdbarch->use_struct_convention
                      /*USE_STRUCT_CONVENTION ()*/);
d2324 2
d2328 8
a2335 6
                      "VALUE_TO_REGISTER(frame, regnum, type, buf)",
                      XSTRING (VALUE_TO_REGISTER (frame, regnum, type, buf)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: VALUE_TO_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->value_to_register
                      /*VALUE_TO_REGISTER ()*/);
a2367 9
enum gdb_osabi
gdbarch_osabi (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_osabi called\n");
  return gdbarch->osabi;
}

d2508 3
a2510 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->addr_bit != 0);
d2544 3
a2546 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->char_signed != -1);
a2558 7
int
gdbarch_read_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->read_pc != NULL;
}

d2563 3
a2565 1
  gdb_assert (gdbarch->read_pc != NULL);
d2582 3
a2584 1
  gdb_assert (gdbarch->write_pc != NULL);
d2597 2
a2598 2
int
gdbarch_read_sp_p (struct gdbarch *gdbarch)
d2601 13
a2613 1
  return gdbarch->read_sp != NULL;
d2620 3
a2622 1
  gdb_assert (gdbarch->read_sp != NULL);
d2636 19
d2658 3
a2660 1
  gdb_assert (gdbarch->virtual_frame_pointer != NULL);
d2677 1
a2677 1
  return gdbarch->pseudo_register_read != NULL;
d2684 3
a2686 1
  gdb_assert (gdbarch->pseudo_register_read != NULL);
d2703 1
a2703 1
  return gdbarch->pseudo_register_write != NULL;
d2710 3
a2712 1
  gdb_assert (gdbarch->pseudo_register_write != NULL);
d2729 3
a2731 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->num_regs != -1);
d2773 18
a2790 1
                       int sp_regnum)
d2792 1
a2792 1
  gdbarch->sp_regnum = sp_regnum;
d2847 1
a2847 1
gdbarch_deprecated_npc_regnum (struct gdbarch *gdbarch)
d2850 1
a2850 1
  /* Skip verify of deprecated_npc_regnum, invalid_p == 0 */
d2852 2
a2853 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_npc_regnum called\n");
  return gdbarch->deprecated_npc_regnum;
d2857 2
a2858 2
set_gdbarch_deprecated_npc_regnum (struct gdbarch *gdbarch,
                                   int deprecated_npc_regnum)
d2860 1
a2860 1
  gdbarch->deprecated_npc_regnum = deprecated_npc_regnum;
d2867 3
a2869 1
  gdb_assert (gdbarch->stab_reg_to_regnum != NULL);
d2886 3
a2888 1
  gdb_assert (gdbarch->ecoff_reg_to_regnum != NULL);
d2905 3
a2907 1
  gdb_assert (gdbarch->dwarf_reg_to_regnum != NULL);
d2924 3
a2926 1
  gdb_assert (gdbarch->sdb_reg_to_regnum != NULL);
d2943 3
a2945 1
  gdb_assert (gdbarch->dwarf2_reg_to_regnum != NULL);
d2962 3
a2964 1
  gdb_assert (gdbarch->register_name != NULL);
d2978 1
a2978 1
gdbarch_register_type_p (struct gdbarch *gdbarch)
d2981 3
a2983 8
  return gdbarch->register_type != NULL;
}

struct type *
gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_type != NULL);
d2985 2
a2986 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_type called\n");
  return gdbarch->register_type (gdbarch, reg_nr);
d2990 2
a2991 2
set_gdbarch_register_type (struct gdbarch *gdbarch,
                           gdbarch_register_type_ftype register_type)
d2993 1
a2993 1
  gdbarch->register_type = register_type;
d2997 1
a2997 1
gdbarch_deprecated_register_virtual_type_p (struct gdbarch *gdbarch)
d3000 3
a3002 8
  return gdbarch->deprecated_register_virtual_type != NULL;
}

struct type *
gdbarch_deprecated_register_virtual_type (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_virtual_type != NULL);
d3004 2
a3005 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_virtual_type called\n");
  return gdbarch->deprecated_register_virtual_type (reg_nr);
d3009 2
a3010 2
set_gdbarch_deprecated_register_virtual_type (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_register_virtual_type_ftype deprecated_register_virtual_type)
d3012 1
a3012 1
  gdbarch->deprecated_register_virtual_type = deprecated_register_virtual_type;
d3016 1
a3016 1
gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch)
d3019 3
d3023 2
a3024 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_bytes called\n");
  return gdbarch->deprecated_register_bytes;
d3028 2
a3029 2
set_gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch,
                                       int deprecated_register_bytes)
d3031 1
a3031 1
  gdbarch->deprecated_register_bytes = deprecated_register_bytes;
d3035 1
a3035 1
gdbarch_deprecated_register_byte_p (struct gdbarch *gdbarch)
d3038 3
a3040 9
  return gdbarch->deprecated_register_byte != generic_register_byte;
}

int
gdbarch_deprecated_register_byte (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_byte != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_byte != generic_register_byte, allow call.  */
d3042 2
a3043 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_byte called\n");
  return gdbarch->deprecated_register_byte (reg_nr);
d3047 2
a3048 2
set_gdbarch_deprecated_register_byte (struct gdbarch *gdbarch,
                                      gdbarch_deprecated_register_byte_ftype deprecated_register_byte)
d3050 1
a3050 1
  gdbarch->deprecated_register_byte = deprecated_register_byte;
d3054 1
a3054 1
gdbarch_deprecated_register_raw_size_p (struct gdbarch *gdbarch)
d3057 3
a3059 9
  return gdbarch->deprecated_register_raw_size != generic_register_size;
}

int
gdbarch_deprecated_register_raw_size (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_raw_size != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_raw_size != generic_register_size, allow call.  */
d3061 2
a3062 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_raw_size called\n");
  return gdbarch->deprecated_register_raw_size (reg_nr);
d3066 2
a3067 2
set_gdbarch_deprecated_register_raw_size (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_register_raw_size_ftype deprecated_register_raw_size)
d3069 1
a3069 1
  gdbarch->deprecated_register_raw_size = deprecated_register_raw_size;
d3073 1
a3073 1
gdbarch_deprecated_register_virtual_size_p (struct gdbarch *gdbarch)
d3076 3
a3078 9
  return gdbarch->deprecated_register_virtual_size != generic_register_size;
}

int
gdbarch_deprecated_register_virtual_size (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_register_virtual_size != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_virtual_size != generic_register_size, allow call.  */
d3080 2
a3081 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_virtual_size called\n");
  return gdbarch->deprecated_register_virtual_size (reg_nr);
d3085 2
a3086 2
set_gdbarch_deprecated_register_virtual_size (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_register_virtual_size_ftype deprecated_register_virtual_size)
d3088 1
a3088 1
  gdbarch->deprecated_register_virtual_size = deprecated_register_virtual_size;
d3092 1
a3092 8
gdbarch_deprecated_max_register_raw_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_max_register_raw_size != 0;
}

int
gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch)
d3095 3
d3099 2
a3100 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_raw_size called\n");
  return gdbarch->deprecated_max_register_raw_size;
d3104 2
a3105 2
set_gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch,
                                              int deprecated_max_register_raw_size)
d3107 1
a3107 1
  gdbarch->deprecated_max_register_raw_size = deprecated_max_register_raw_size;
d3110 2
a3111 9
int
gdbarch_deprecated_max_register_virtual_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_max_register_virtual_size != 0;
}

int
gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch)
d3114 3
d3118 2
a3119 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_virtual_size called\n");
  return gdbarch->deprecated_max_register_virtual_size;
d3123 2
a3124 2
set_gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch,
                                                  int deprecated_max_register_virtual_size)
d3126 1
a3126 1
  gdbarch->deprecated_max_register_virtual_size = deprecated_max_register_virtual_size;
d3130 1
a3130 8
gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_dummy_id != NULL;
}

struct frame_id
gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info)
d3133 1
a3133 4
  gdb_assert (gdbarch->unwind_dummy_id != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_dummy_id called\n");
  return gdbarch->unwind_dummy_id (gdbarch, info);
d3137 1
a3137 8
set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch,
                             gdbarch_unwind_dummy_id_ftype unwind_dummy_id)
{
  gdbarch->unwind_dummy_id = unwind_dummy_id;
}

int
gdbarch_deprecated_save_dummy_frame_tos_p (struct gdbarch *gdbarch)
d3140 3
a3142 8
  return gdbarch->deprecated_save_dummy_frame_tos != NULL;
}

void
gdbarch_deprecated_save_dummy_frame_tos (struct gdbarch *gdbarch, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_save_dummy_frame_tos != NULL);
d3144 2
a3145 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_save_dummy_frame_tos called\n");
  gdbarch->deprecated_save_dummy_frame_tos (sp);
d3149 2
a3150 8
set_gdbarch_deprecated_save_dummy_frame_tos (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_save_dummy_frame_tos_ftype deprecated_save_dummy_frame_tos)
{
  gdbarch->deprecated_save_dummy_frame_tos = deprecated_save_dummy_frame_tos;
}

int
gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch)
d3152 1
a3152 5
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fp_regnum called\n");
  return gdbarch->deprecated_fp_regnum;
d3156 1
a3156 8
set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,
                                  int deprecated_fp_regnum)
{
  gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;
}

int
gdbarch_deprecated_target_read_fp_p (struct gdbarch *gdbarch)
d3159 3
a3161 8
  return gdbarch->deprecated_target_read_fp != NULL;
}

CORE_ADDR
gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_target_read_fp != NULL);
d3163 2
a3164 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_target_read_fp called\n");
  return gdbarch->deprecated_target_read_fp ();
d3168 2
a3169 2
set_gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_target_read_fp_ftype deprecated_target_read_fp)
d3171 1
a3171 1
  gdbarch->deprecated_target_read_fp = deprecated_target_read_fp;
d3175 1
a3175 8
gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_call != NULL;
}

CORE_ADDR
gdbarch_push_dummy_call (struct gdbarch *gdbarch, CORE_ADDR func_addr, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d3178 1
a3178 4
  gdb_assert (gdbarch->push_dummy_call != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_call called\n");
  return gdbarch->push_dummy_call (gdbarch, func_addr, regcache, bp_addr, nargs, args, sp, struct_return, struct_addr);
d3182 1
a3182 8
set_gdbarch_push_dummy_call (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_call_ftype push_dummy_call)
{
  gdbarch->push_dummy_call = push_dummy_call;
}

int
gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch)
d3185 3
a3187 8
  return gdbarch->deprecated_push_arguments != NULL;
}

CORE_ADDR
gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_push_arguments != NULL);
d3189 2
a3190 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_arguments called\n");
  return gdbarch->deprecated_push_arguments (nargs, args, sp, struct_return, struct_addr);
d3194 2
a3195 2
set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments)
d3197 1
a3197 1
  gdbarch->deprecated_push_arguments = deprecated_push_arguments;
d3201 1
a3201 1
gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch)
d3204 1
a3204 4
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_use_generic_dummy_frames called\n");
  return gdbarch->deprecated_use_generic_dummy_frames;
d3208 1
a3208 8
set_gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch,
                                                 int deprecated_use_generic_dummy_frames)
{
  gdbarch->deprecated_use_generic_dummy_frames = deprecated_use_generic_dummy_frames;
}

int
gdbarch_deprecated_push_return_address_p (struct gdbarch *gdbarch)
d3211 3
a3213 8
  return gdbarch->deprecated_push_return_address != NULL;
}

CORE_ADDR
gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_push_return_address != NULL);
d3215 2
a3216 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_return_address called\n");
  return gdbarch->deprecated_push_return_address (pc, sp);
d3220 2
a3221 2
set_gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_push_return_address_ftype deprecated_push_return_address)
d3223 1
a3223 1
  gdbarch->deprecated_push_return_address = deprecated_push_return_address;
d3227 1
a3227 1
gdbarch_deprecated_dummy_write_sp_p (struct gdbarch *gdbarch)
d3230 3
a3232 8
  return gdbarch->deprecated_dummy_write_sp != NULL;
}

void
gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_dummy_write_sp != NULL);
d3234 2
a3235 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_dummy_write_sp called\n");
  gdbarch->deprecated_dummy_write_sp (val);
d3239 2
a3240 2
set_gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_dummy_write_sp_ftype deprecated_dummy_write_sp)
d3242 1
a3242 1
  gdbarch->deprecated_dummy_write_sp = deprecated_dummy_write_sp;
d3246 1
a3246 1
gdbarch_deprecated_register_size (struct gdbarch *gdbarch)
d3249 1
a3249 10
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_size called\n");
  return gdbarch->deprecated_register_size;
}

void
set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch,
                                      int deprecated_register_size)
{
  gdbarch->deprecated_register_size = deprecated_register_size;
d3253 1
a3253 1
gdbarch_call_dummy_location (struct gdbarch *gdbarch)
d3256 3
a3258 1
  /* Skip verify of call_dummy_location, invalid_p == 0 */
d3260 2
a3261 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_location called\n");
  return gdbarch->call_dummy_location;
d3265 2
a3266 2
set_gdbarch_call_dummy_location (struct gdbarch *gdbarch,
                                 int call_dummy_location)
d3268 1
a3268 1
  gdbarch->call_dummy_location = call_dummy_location;
d3272 1
a3272 1
gdbarch_deprecated_call_dummy_address_p (struct gdbarch *gdbarch)
d3275 3
a3277 8
  return gdbarch->deprecated_call_dummy_address != NULL;
}

CORE_ADDR
gdbarch_deprecated_call_dummy_address (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_call_dummy_address != NULL);
d3279 2
a3280 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_address called\n");
  return gdbarch->deprecated_call_dummy_address ();
d3284 2
a3285 2
set_gdbarch_deprecated_call_dummy_address (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_call_dummy_address_ftype deprecated_call_dummy_address)
d3287 1
a3287 33
  gdbarch->deprecated_call_dummy_address = deprecated_call_dummy_address;
}

CORE_ADDR
gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_start_offset called\n");
  return gdbarch->deprecated_call_dummy_start_offset;
}

void
set_gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch,
                                                CORE_ADDR deprecated_call_dummy_start_offset)
{
  gdbarch->deprecated_call_dummy_start_offset = deprecated_call_dummy_start_offset;
}

CORE_ADDR
gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_breakpoint_offset called\n");
  return gdbarch->deprecated_call_dummy_breakpoint_offset;
}

void
set_gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch,
                                                     CORE_ADDR deprecated_call_dummy_breakpoint_offset)
{
  gdbarch->deprecated_call_dummy_breakpoint_offset = deprecated_call_dummy_breakpoint_offset;
d3291 1
a3291 1
gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch)
d3294 3
d3298 2
a3299 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_length called\n");
  return gdbarch->deprecated_call_dummy_length;
d3303 2
a3304 2
set_gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch,
                                          int deprecated_call_dummy_length)
d3306 1
a3306 18
  gdbarch->deprecated_call_dummy_length = deprecated_call_dummy_length;
}

LONGEST *
gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_words called\n");
  return gdbarch->deprecated_call_dummy_words;
}

void
set_gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch,
                                         LONGEST * deprecated_call_dummy_words)
{
  gdbarch->deprecated_call_dummy_words = deprecated_call_dummy_words;
d3310 1
a3310 18
gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sizeof_call_dummy_words called\n");
  return gdbarch->deprecated_sizeof_call_dummy_words;
}

void
set_gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch,
                                                int deprecated_sizeof_call_dummy_words)
{
  gdbarch->deprecated_sizeof_call_dummy_words = deprecated_sizeof_call_dummy_words;
}

int
gdbarch_deprecated_call_dummy_stack_adjust_p (struct gdbarch *gdbarch)
d3313 1
a3313 1
  return gdbarch->deprecated_call_dummy_stack_adjust != 0;
d3317 1
a3317 1
gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch)
d3320 3
d3324 2
a3325 50
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_stack_adjust called\n");
  return gdbarch->deprecated_call_dummy_stack_adjust;
}

void
set_gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch,
                                                int deprecated_call_dummy_stack_adjust)
{
  gdbarch->deprecated_call_dummy_stack_adjust = deprecated_call_dummy_stack_adjust;
}

int
gdbarch_deprecated_fix_call_dummy_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_fix_call_dummy != NULL;
}

void
gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch, char *dummy, CORE_ADDR pc, CORE_ADDR fun, int nargs, struct value **args, struct type *type, int gcc_p)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_fix_call_dummy != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fix_call_dummy called\n");
  gdbarch->deprecated_fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
}

void
set_gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_fix_call_dummy_ftype deprecated_fix_call_dummy)
{
  gdbarch->deprecated_fix_call_dummy = deprecated_fix_call_dummy;
}

int
gdbarch_push_dummy_code_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_code != NULL;
}

CORE_ADDR
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->push_dummy_code != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_code called\n");
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, using_gcc, args, nargs, value_type, real_pc, bp_addr);
d3329 2
a3330 2
set_gdbarch_push_dummy_code (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_code_ftype push_dummy_code)
d3332 1
a3332 1
  gdbarch->push_dummy_code = push_dummy_code;
d3336 1
a3336 1
gdbarch_deprecated_push_dummy_frame_p (struct gdbarch *gdbarch)
d3339 3
a3341 8
  return gdbarch->deprecated_push_dummy_frame != NULL;
}

void
gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_push_dummy_frame != NULL);
d3343 2
a3344 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_dummy_frame called\n");
  gdbarch->deprecated_push_dummy_frame ();
d3348 2
a3349 2
set_gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_push_dummy_frame_ftype deprecated_push_dummy_frame)
d3351 1
a3351 1
  gdbarch->deprecated_push_dummy_frame = deprecated_push_dummy_frame;
d3355 1
a3355 1
gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch)
d3358 3
a3360 1
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
d3362 2
a3363 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extra_stack_alignment_needed called\n");
  return gdbarch->deprecated_extra_stack_alignment_needed;
d3367 2
a3368 2
set_gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch,
                                                     int deprecated_extra_stack_alignment_needed)
d3370 1
a3370 1
  gdbarch->deprecated_extra_stack_alignment_needed = deprecated_extra_stack_alignment_needed;
d3373 2
a3374 2
int
gdbarch_deprecated_do_registers_info_p (struct gdbarch *gdbarch)
d3377 6
a3382 1
  return gdbarch->deprecated_do_registers_info != NULL;
d3386 8
a3393 1
gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch, int reg_nr, int fpregs)
d3396 3
a3398 1
  gdb_assert (gdbarch->deprecated_do_registers_info != NULL);
d3400 2
a3401 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_do_registers_info called\n");
  gdbarch->deprecated_do_registers_info (reg_nr, fpregs);
d3405 2
a3406 2
set_gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_do_registers_info_ftype deprecated_do_registers_info)
d3408 1
a3408 1
  gdbarch->deprecated_do_registers_info = deprecated_do_registers_info;
d3411 2
a3412 2
void
gdbarch_print_registers_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, int regnum, int all)
d3415 3
a3417 1
  gdb_assert (gdbarch->print_registers_info != NULL);
d3419 2
a3420 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_registers_info called\n");
  gdbarch->print_registers_info (gdbarch, file, frame, regnum, all);
d3424 2
a3425 2
set_gdbarch_print_registers_info (struct gdbarch *gdbarch,
                                  gdbarch_print_registers_info_ftype print_registers_info)
d3427 1
a3427 1
  gdbarch->print_registers_info = print_registers_info;
d3431 1
a3431 1
gdbarch_print_float_info_p (struct gdbarch *gdbarch)
d3434 3
a3436 8
  return gdbarch->print_float_info != NULL;
}

void
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->print_float_info != NULL);
d3438 2
a3439 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_float_info called\n");
  gdbarch->print_float_info (gdbarch, file, frame, args);
d3443 2
a3444 2
set_gdbarch_print_float_info (struct gdbarch *gdbarch,
                              gdbarch_print_float_info_ftype print_float_info)
d3446 1
a3446 1
  gdbarch->print_float_info = print_float_info;
d3450 1
a3450 1
gdbarch_print_vector_info_p (struct gdbarch *gdbarch)
d3453 3
a3455 8
  return gdbarch->print_vector_info != NULL;
}

void
gdbarch_print_vector_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->print_vector_info != NULL);
d3457 2
a3458 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_vector_info called\n");
  gdbarch->print_vector_info (gdbarch, file, frame, args);
d3462 2
a3463 2
set_gdbarch_print_vector_info (struct gdbarch *gdbarch,
                               gdbarch_print_vector_info_ftype print_vector_info)
d3465 1
a3465 1
  gdbarch->print_vector_info = print_vector_info;
d3469 1
a3469 1
gdbarch_register_sim_regno (struct gdbarch *gdbarch, int reg_nr)
d3472 3
a3474 1
  gdb_assert (gdbarch->register_sim_regno != NULL);
d3476 2
a3477 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_sim_regno called\n");
  return gdbarch->register_sim_regno (reg_nr);
d3481 2
a3482 2
set_gdbarch_register_sim_regno (struct gdbarch *gdbarch,
                                gdbarch_register_sim_regno_ftype register_sim_regno)
d3484 1
a3484 1
  gdbarch->register_sim_regno = register_sim_regno;
d3488 1
a3488 1
gdbarch_register_bytes_ok_p (struct gdbarch *gdbarch)
d3491 3
a3493 8
  return gdbarch->register_bytes_ok != NULL;
}

int
gdbarch_register_bytes_ok (struct gdbarch *gdbarch, long nr_bytes)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_bytes_ok != NULL);
d3495 2
a3496 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_bytes_ok called\n");
  return gdbarch->register_bytes_ok (nr_bytes);
d3500 2
a3501 2
set_gdbarch_register_bytes_ok (struct gdbarch *gdbarch,
                               gdbarch_register_bytes_ok_ftype register_bytes_ok)
d3503 1
a3503 1
  gdbarch->register_bytes_ok = register_bytes_ok;
d3506 2
a3507 2
int
gdbarch_cannot_fetch_register (struct gdbarch *gdbarch, int regnum)
d3510 1
a3510 1
  gdb_assert (gdbarch->cannot_fetch_register != NULL);
d3512 2
a3513 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_fetch_register called\n");
  return gdbarch->cannot_fetch_register (regnum);
d3517 2
a3518 2
set_gdbarch_cannot_fetch_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_fetch_register_ftype cannot_fetch_register)
d3520 1
a3520 1
  gdbarch->cannot_fetch_register = cannot_fetch_register;
d3524 1
a3524 1
gdbarch_cannot_store_register (struct gdbarch *gdbarch, int regnum)
d3527 1
a3527 1
  gdb_assert (gdbarch->cannot_store_register != NULL);
d3529 2
a3530 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_store_register called\n");
  return gdbarch->cannot_store_register (regnum);
d3534 2
a3535 2
set_gdbarch_cannot_store_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_store_register_ftype cannot_store_register)
d3537 1
a3537 1
  gdbarch->cannot_store_register = cannot_store_register;
d3541 1
a3541 1
gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch)
d3544 3
a3546 8
  return gdbarch->get_longjmp_target != NULL;
}

int
gdbarch_get_longjmp_target (struct gdbarch *gdbarch, CORE_ADDR *pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->get_longjmp_target != NULL);
d3548 2
a3549 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_longjmp_target called\n");
  return gdbarch->get_longjmp_target (pc);
d3553 2
a3554 2
set_gdbarch_get_longjmp_target (struct gdbarch *gdbarch,
                                gdbarch_get_longjmp_target_ftype get_longjmp_target)
d3556 1
a3556 1
  gdbarch->get_longjmp_target = get_longjmp_target;
d3560 1
a3560 1
gdbarch_deprecated_pc_in_call_dummy_p (struct gdbarch *gdbarch)
d3563 6
a3568 1
  return gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy;
d3571 3
a3573 2
int
gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp, CORE_ADDR frame_address)
d3575 1
a3575 6
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_pc_in_call_dummy != NULL);
  /* Do not check predicate: gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pc_in_call_dummy called\n");
  return gdbarch->deprecated_pc_in_call_dummy (pc, sp, frame_address);
d3579 1
a3579 2
set_gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_pc_in_call_dummy_ftype deprecated_pc_in_call_dummy)
d3581 7
a3587 1
  gdbarch->deprecated_pc_in_call_dummy = deprecated_pc_in_call_dummy;
d3590 3
a3592 2
int
gdbarch_deprecated_init_frame_pc_first_p (struct gdbarch *gdbarch)
d3594 1
a3594 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_init_frame_pc_first != NULL;
d3597 2
a3598 2
CORE_ADDR
gdbarch_deprecated_init_frame_pc_first (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
d3601 3
a3603 1
  gdb_assert (gdbarch->deprecated_init_frame_pc_first != NULL);
d3605 2
a3606 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_frame_pc_first called\n");
  return gdbarch->deprecated_init_frame_pc_first (fromleaf, prev);
d3610 2
a3611 2
set_gdbarch_deprecated_init_frame_pc_first (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_init_frame_pc_first_ftype deprecated_init_frame_pc_first)
d3613 1
a3613 1
  gdbarch->deprecated_init_frame_pc_first = deprecated_init_frame_pc_first;
d3616 2
a3617 2
int
gdbarch_deprecated_init_frame_pc_p (struct gdbarch *gdbarch)
d3620 3
a3622 8
  return gdbarch->deprecated_init_frame_pc != NULL;
}

CORE_ADDR
gdbarch_deprecated_init_frame_pc (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_init_frame_pc != NULL);
d3624 2
a3625 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_frame_pc called\n");
  return gdbarch->deprecated_init_frame_pc (fromleaf, prev);
d3629 2
a3630 2
set_gdbarch_deprecated_init_frame_pc (struct gdbarch *gdbarch,
                                      gdbarch_deprecated_init_frame_pc_ftype deprecated_init_frame_pc)
d3632 1
a3632 1
  gdbarch->deprecated_init_frame_pc = deprecated_init_frame_pc;
d3668 1
a3668 1
gdbarch_deprecated_get_saved_register_p (struct gdbarch *gdbarch)
d3671 13
a3683 1
  return gdbarch->deprecated_get_saved_register != NULL;
d3687 1
a3687 1
gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR *addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
d3690 3
a3692 1
  gdb_assert (gdbarch->deprecated_get_saved_register != NULL);
d3694 2
a3695 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_get_saved_register called\n");
  gdbarch->deprecated_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval);
d3699 2
a3700 2
set_gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_get_saved_register_ftype deprecated_get_saved_register)
d3702 1
a3702 1
  gdbarch->deprecated_get_saved_register = deprecated_get_saved_register;
d3706 1
a3706 1
gdbarch_deprecated_register_convertible (struct gdbarch *gdbarch, int nr)
d3709 3
a3711 1
  gdb_assert (gdbarch->deprecated_register_convertible != NULL);
d3713 2
a3714 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convertible called\n");
  return gdbarch->deprecated_register_convertible (nr);
d3718 2
a3719 2
set_gdbarch_deprecated_register_convertible (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_register_convertible_ftype deprecated_register_convertible)
d3721 1
a3721 1
  gdbarch->deprecated_register_convertible = deprecated_register_convertible;
d3725 1
a3725 1
gdbarch_deprecated_register_convert_to_virtual (struct gdbarch *gdbarch, int regnum, struct type *type, char *from, char *to)
d3728 3
a3730 1
  gdb_assert (gdbarch->deprecated_register_convert_to_virtual != NULL);
d3732 2
a3733 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convert_to_virtual called\n");
  gdbarch->deprecated_register_convert_to_virtual (regnum, type, from, to);
d3737 2
a3738 2
set_gdbarch_deprecated_register_convert_to_virtual (struct gdbarch *gdbarch,
                                                    gdbarch_deprecated_register_convert_to_virtual_ftype deprecated_register_convert_to_virtual)
d3740 1
a3740 1
  gdbarch->deprecated_register_convert_to_virtual = deprecated_register_convert_to_virtual;
d3744 1
a3744 1
gdbarch_deprecated_register_convert_to_raw (struct gdbarch *gdbarch, struct type *type, int regnum, const char *from, char *to)
d3747 3
a3749 1
  gdb_assert (gdbarch->deprecated_register_convert_to_raw != NULL);
d3751 2
a3752 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convert_to_raw called\n");
  gdbarch->deprecated_register_convert_to_raw (type, regnum, from, to);
d3756 2
a3757 2
set_gdbarch_deprecated_register_convert_to_raw (struct gdbarch *gdbarch,
                                                gdbarch_deprecated_register_convert_to_raw_ftype deprecated_register_convert_to_raw)
d3759 1
a3759 1
  gdbarch->deprecated_register_convert_to_raw = deprecated_register_convert_to_raw;
d3763 1
a3763 1
gdbarch_convert_register_p (struct gdbarch *gdbarch, int regnum, struct type *type)
d3766 3
a3768 1
  gdb_assert (gdbarch->convert_register_p != NULL);
d3771 1
a3771 1
  return gdbarch->convert_register_p (regnum, type);
d3782 1
a3782 1
gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, void *buf)
d3785 3
a3787 1
  gdb_assert (gdbarch->register_to_value != NULL);
d3790 1
a3790 1
  gdbarch->register_to_value (frame, regnum, type, buf);
d3801 1
a3801 1
gdbarch_value_to_register (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, const void *buf)
d3804 3
a3806 1
  gdb_assert (gdbarch->value_to_register != NULL);
d3809 1
a3809 1
  gdbarch->value_to_register (frame, regnum, type, buf);
d3820 1
a3820 1
gdbarch_pointer_to_address (struct gdbarch *gdbarch, struct type *type, const void *buf)
d3823 3
a3825 1
  gdb_assert (gdbarch->pointer_to_address != NULL);
d3842 3
a3844 1
  gdb_assert (gdbarch->address_to_pointer != NULL);
d3861 1
a3861 1
  return gdbarch->integer_to_address != NULL;
d3868 3
a3870 1
  gdb_assert (gdbarch->integer_to_address != NULL);
d3884 1
a3884 1
gdbarch_deprecated_pop_frame_p (struct gdbarch *gdbarch)
d3887 6
a3892 1
  return gdbarch->deprecated_pop_frame != NULL;
d3896 8
a3903 1
gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch)
d3906 3
a3908 1
  gdb_assert (gdbarch->deprecated_pop_frame != NULL);
d3910 2
a3911 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pop_frame called\n");
  gdbarch->deprecated_pop_frame ();
d3915 2
a3916 2
set_gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch,
                                  gdbarch_deprecated_pop_frame_ftype deprecated_pop_frame)
d3918 1
a3918 1
  gdbarch->deprecated_pop_frame = deprecated_pop_frame;
d3921 2
a3922 2
int
gdbarch_deprecated_store_struct_return_p (struct gdbarch *gdbarch)
d3925 6
a3930 1
  return gdbarch->deprecated_store_struct_return != NULL;
d3934 8
a3941 1
gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch, CORE_ADDR addr, CORE_ADDR sp)
d3944 1
a3944 4
  gdb_assert (gdbarch->deprecated_store_struct_return != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_store_struct_return called\n");
  gdbarch->deprecated_store_struct_return (addr, sp);
d3947 2
a3948 3
void
set_gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_store_struct_return_ftype deprecated_store_struct_return)
d3950 7
a3956 1
  gdbarch->deprecated_store_struct_return = deprecated_store_struct_return;
d3959 3
a3961 2
int
gdbarch_return_value_p (struct gdbarch *gdbarch)
d3963 1
a3963 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->return_value != NULL;
d3966 2
a3967 2
enum return_value_convention
gdbarch_return_value (struct gdbarch *gdbarch, struct type *valtype, struct regcache *regcache, void *readbuf, const void *writebuf)
d3970 3
a3972 1
  gdb_assert (gdbarch->return_value != NULL);
d3974 2
a3975 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_value called\n");
  return gdbarch->return_value (gdbarch, valtype, regcache, readbuf, writebuf);
d3979 2
a3980 2
set_gdbarch_return_value (struct gdbarch *gdbarch,
                          gdbarch_return_value_ftype return_value)
d3982 1
a3982 1
  gdbarch->return_value = return_value;
d3985 2
a3986 2
int
gdbarch_return_value_on_stack (struct gdbarch *gdbarch, struct type *type)
d3989 3
a3991 1
  gdb_assert (gdbarch->return_value_on_stack != NULL);
d3993 2
a3994 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_value_on_stack called\n");
  return gdbarch->return_value_on_stack (type);
d3998 2
a3999 2
set_gdbarch_return_value_on_stack (struct gdbarch *gdbarch,
                                   gdbarch_return_value_on_stack_ftype return_value_on_stack)
d4001 1
a4001 1
  gdbarch->return_value_on_stack = return_value_on_stack;
d4008 3
a4010 1
  gdb_assert (gdbarch->extract_return_value != NULL);
d4027 3
a4029 1
  gdb_assert (gdbarch->store_return_value != NULL);
d4046 3
a4048 1
  gdb_assert (gdbarch->deprecated_extract_return_value != NULL);
d4065 3
a4067 1
  gdb_assert (gdbarch->deprecated_store_return_value != NULL);
a4080 17
gdbarch_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->use_struct_convention != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_use_struct_convention called\n");
  return gdbarch->use_struct_convention (gcc_p, value_type);
}

void
set_gdbarch_use_struct_convention (struct gdbarch *gdbarch,
                                   gdbarch_use_struct_convention_ftype use_struct_convention)
{
  gdbarch->use_struct_convention = use_struct_convention;
}

int
d4084 1
a4084 1
  return gdbarch->extract_struct_value_address != NULL;
d4091 3
a4093 1
  gdb_assert (gdbarch->extract_struct_value_address != NULL);
d4110 1
a4110 1
  return gdbarch->deprecated_extract_struct_value_address != NULL;
d4117 3
a4119 1
  gdb_assert (gdbarch->deprecated_extract_struct_value_address != NULL);
d4133 1
a4133 1
gdbarch_deprecated_frame_init_saved_regs_p (struct gdbarch *gdbarch)
d4136 13
a4148 1
  return gdbarch->deprecated_frame_init_saved_regs != NULL;
d4152 1
a4152 1
gdbarch_deprecated_frame_init_saved_regs (struct gdbarch *gdbarch, struct frame_info *frame)
d4155 3
a4157 1
  gdb_assert (gdbarch->deprecated_frame_init_saved_regs != NULL);
d4159 2
a4160 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_init_saved_regs called\n");
  gdbarch->deprecated_frame_init_saved_regs (frame);
d4164 2
a4165 2
set_gdbarch_deprecated_frame_init_saved_regs (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_frame_init_saved_regs_ftype deprecated_frame_init_saved_regs)
d4167 1
a4167 1
  gdbarch->deprecated_frame_init_saved_regs = deprecated_frame_init_saved_regs;
d4171 1
a4171 1
gdbarch_deprecated_init_extra_frame_info_p (struct gdbarch *gdbarch)
d4174 1
a4174 1
  return gdbarch->deprecated_init_extra_frame_info != NULL;
d4178 1
a4178 1
gdbarch_deprecated_init_extra_frame_info (struct gdbarch *gdbarch, int fromleaf, struct frame_info *frame)
d4181 3
a4183 1
  gdb_assert (gdbarch->deprecated_init_extra_frame_info != NULL);
d4185 2
a4186 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_extra_frame_info called\n");
  gdbarch->deprecated_init_extra_frame_info (fromleaf, frame);
d4190 2
a4191 2
set_gdbarch_deprecated_init_extra_frame_info (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_init_extra_frame_info_ftype deprecated_init_extra_frame_info)
d4193 1
a4193 1
  gdbarch->deprecated_init_extra_frame_info = deprecated_init_extra_frame_info;
d4200 3
a4202 1
  gdb_assert (gdbarch->skip_prologue != NULL);
d4219 3
a4221 1
  gdb_assert (gdbarch->prologue_frameless_p != NULL);
d4238 3
a4240 1
  gdb_assert (gdbarch->inner_than != NULL);
d4257 3
a4259 1
  gdb_assert (gdbarch->breakpoint_from_pc != NULL);
a4272 24
gdbarch_adjust_breakpoint_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->adjust_breakpoint_address != NULL;
}

CORE_ADDR
gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch, CORE_ADDR bpaddr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->adjust_breakpoint_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_adjust_breakpoint_address called\n");
  return gdbarch->adjust_breakpoint_address (gdbarch, bpaddr);
}

void
set_gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch,
                                       gdbarch_adjust_breakpoint_address_ftype adjust_breakpoint_address)
{
  gdbarch->adjust_breakpoint_address = adjust_breakpoint_address;
}

int
d4276 3
a4278 1
  gdb_assert (gdbarch->memory_insert_breakpoint != NULL);
d4295 3
a4297 1
  gdb_assert (gdbarch->memory_remove_breakpoint != NULL);
d4314 3
a4316 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->decr_pc_after_break != -1);
d4329 19
d4352 3
a4354 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->function_start_offset != -1);
d4368 1
a4368 1
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len)
d4371 3
a4373 1
  gdb_assert (gdbarch->remote_translate_xfer_address != NULL);
d4376 1
a4376 1
  gdbarch->remote_translate_xfer_address (gdbarch, regcache, gdb_addr, gdb_len, rem_addr, rem_len);
d4390 3
a4392 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->frame_args_skip != -1);
d4409 3
a4411 1
  gdb_assert (gdbarch->frameless_function_invocation != NULL);
a4423 7
int
gdbarch_deprecated_frame_chain_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_chain != NULL;
}

d4425 1
a4425 1
gdbarch_deprecated_frame_chain (struct gdbarch *gdbarch, struct frame_info *frame)
d4428 3
a4430 1
  gdb_assert (gdbarch->deprecated_frame_chain != NULL);
d4432 2
a4433 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_chain called\n");
  return gdbarch->deprecated_frame_chain (frame);
d4437 2
a4438 2
set_gdbarch_deprecated_frame_chain (struct gdbarch *gdbarch,
                                    gdbarch_deprecated_frame_chain_ftype deprecated_frame_chain)
d4440 1
a4440 1
  gdbarch->deprecated_frame_chain = deprecated_frame_chain;
d4444 1
a4444 1
gdbarch_deprecated_frame_chain_valid_p (struct gdbarch *gdbarch)
d4447 3
a4449 8
  return gdbarch->deprecated_frame_chain_valid != NULL;
}

int
gdbarch_deprecated_frame_chain_valid (struct gdbarch *gdbarch, CORE_ADDR chain, struct frame_info *thisframe)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_frame_chain_valid != NULL);
d4451 2
a4452 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_chain_valid called\n");
  return gdbarch->deprecated_frame_chain_valid (chain, thisframe);
d4456 2
a4457 2
set_gdbarch_deprecated_frame_chain_valid (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_frame_chain_valid_ftype deprecated_frame_chain_valid)
d4459 1
a4459 8
  gdbarch->deprecated_frame_chain_valid = deprecated_frame_chain_valid;
}

int
gdbarch_deprecated_frame_saved_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_saved_pc != NULL;
d4463 1
a4463 1
gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch, struct frame_info *fi)
d4466 3
a4468 1
  gdb_assert (gdbarch->deprecated_frame_saved_pc != NULL);
d4470 2
a4471 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_saved_pc called\n");
  return gdbarch->deprecated_frame_saved_pc (fi);
d4475 2
a4476 8
set_gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_frame_saved_pc_ftype deprecated_frame_saved_pc)
{
  gdbarch->deprecated_frame_saved_pc = deprecated_frame_saved_pc;
}

int
gdbarch_unwind_pc_p (struct gdbarch *gdbarch)
d4478 1
a4478 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_pc != NULL;
d4482 1
a4482 1
gdbarch_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
d4485 3
a4487 25
  gdb_assert (gdbarch->unwind_pc != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_pc called\n");
  return gdbarch->unwind_pc (gdbarch, next_frame);
}

void
set_gdbarch_unwind_pc (struct gdbarch *gdbarch,
                       gdbarch_unwind_pc_ftype unwind_pc)
{
  gdbarch->unwind_pc = unwind_pc;
}

int
gdbarch_unwind_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_sp != NULL;
}

CORE_ADDR
gdbarch_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->unwind_sp != NULL);
d4489 2
a4490 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_sp called\n");
  return gdbarch->unwind_sp (gdbarch, next_frame);
d4494 2
a4495 8
set_gdbarch_unwind_sp (struct gdbarch *gdbarch,
                       gdbarch_unwind_sp_ftype unwind_sp)
{
  gdbarch->unwind_sp = unwind_sp;
}

int
gdbarch_deprecated_frame_args_address_p (struct gdbarch *gdbarch)
d4497 1
a4497 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_args_address != get_frame_base;
d4501 1
a4501 1
gdbarch_deprecated_frame_args_address (struct gdbarch *gdbarch, struct frame_info *fi)
d4504 3
a4506 2
  gdb_assert (gdbarch->deprecated_frame_args_address != NULL);
  /* Do not check predicate: gdbarch->deprecated_frame_args_address != get_frame_base, allow call.  */
d4508 2
a4509 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_args_address called\n");
  return gdbarch->deprecated_frame_args_address (fi);
d4513 2
a4514 8
set_gdbarch_deprecated_frame_args_address (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_frame_args_address_ftype deprecated_frame_args_address)
{
  gdbarch->deprecated_frame_args_address = deprecated_frame_args_address;
}

int
gdbarch_deprecated_frame_locals_address_p (struct gdbarch *gdbarch)
d4516 1
a4516 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_locals_address != get_frame_base;
d4520 1
a4520 1
gdbarch_deprecated_frame_locals_address (struct gdbarch *gdbarch, struct frame_info *fi)
d4523 3
a4525 26
  gdb_assert (gdbarch->deprecated_frame_locals_address != NULL);
  /* Do not check predicate: gdbarch->deprecated_frame_locals_address != get_frame_base, allow call.  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_locals_address called\n");
  return gdbarch->deprecated_frame_locals_address (fi);
}

void
set_gdbarch_deprecated_frame_locals_address (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_frame_locals_address_ftype deprecated_frame_locals_address)
{
  gdbarch->deprecated_frame_locals_address = deprecated_frame_locals_address;
}

int
gdbarch_deprecated_saved_pc_after_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_saved_pc_after_call != NULL;
}

CORE_ADDR
gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch, struct frame_info *frame)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_saved_pc_after_call != NULL);
d4527 2
a4528 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_saved_pc_after_call called\n");
  return gdbarch->deprecated_saved_pc_after_call (frame);
d4532 2
a4533 8
set_gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_saved_pc_after_call_ftype deprecated_saved_pc_after_call)
{
  gdbarch->deprecated_saved_pc_after_call = deprecated_saved_pc_after_call;
}

int
gdbarch_frame_num_args_p (struct gdbarch *gdbarch)
d4535 1
a4535 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_num_args != NULL;
d4542 3
a4544 1
  gdb_assert (gdbarch->frame_num_args != NULL);
d4558 1
a4558 1
gdbarch_deprecated_stack_align_p (struct gdbarch *gdbarch)
d4561 1
a4561 1
  return gdbarch->deprecated_stack_align != NULL;
d4565 1
a4565 1
gdbarch_deprecated_stack_align (struct gdbarch *gdbarch, CORE_ADDR sp)
d4568 3
a4570 1
  gdb_assert (gdbarch->deprecated_stack_align != NULL);
d4572 2
a4573 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_stack_align called\n");
  return gdbarch->deprecated_stack_align (sp);
d4577 2
a4578 2
set_gdbarch_deprecated_stack_align (struct gdbarch *gdbarch,
                                    gdbarch_deprecated_stack_align_ftype deprecated_stack_align)
d4580 1
a4580 1
  gdbarch->deprecated_stack_align = deprecated_stack_align;
d4587 1
a4587 1
  return gdbarch->frame_align != NULL;
d4594 3
a4596 1
  gdb_assert (gdbarch->frame_align != NULL);
d4610 1
a4610 1
gdbarch_deprecated_reg_struct_has_addr_p (struct gdbarch *gdbarch)
d4613 4
a4616 1
  return gdbarch->deprecated_reg_struct_has_addr != NULL;
d4619 3
a4621 2
int
gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch, int gcc_p, struct type *type)
d4623 1
a4623 5
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->deprecated_reg_struct_has_addr != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_reg_struct_has_addr called\n");
  return gdbarch->deprecated_reg_struct_has_addr (gcc_p, type);
d4626 2
a4627 3
void
set_gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_reg_struct_has_addr_ftype deprecated_reg_struct_has_addr)
d4629 2
a4630 1
  gdbarch->deprecated_reg_struct_has_addr = deprecated_reg_struct_has_addr;
d4634 1
a4634 1
gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch, struct type *type)
d4637 3
a4639 1
  gdb_assert (gdbarch->stabs_argument_has_addr != NULL);
d4641 2
a4642 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stabs_argument_has_addr called\n");
  return gdbarch->stabs_argument_has_addr (gdbarch, type);
d4646 2
a4647 2
set_gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch,
                                     gdbarch_stabs_argument_has_addr_ftype stabs_argument_has_addr)
d4649 1
a4649 1
  gdbarch->stabs_argument_has_addr = stabs_argument_has_addr;
d4653 8
a4660 1
gdbarch_frame_red_zone_size (struct gdbarch *gdbarch)
d4663 3
d4667 2
a4668 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_red_zone_size called\n");
  return gdbarch->frame_red_zone_size;
d4672 2
a4673 2
set_gdbarch_frame_red_zone_size (struct gdbarch *gdbarch,
                                 int frame_red_zone_size)
d4675 1
a4675 1
  gdbarch->frame_red_zone_size = frame_red_zone_size;
d4743 1
a4743 1
gdbarch_convert_from_func_ptr_addr (struct gdbarch *gdbarch, CORE_ADDR addr, struct target_ops *targ)
d4746 3
a4748 1
  gdb_assert (gdbarch->convert_from_func_ptr_addr != NULL);
d4751 1
a4751 1
  return gdbarch->convert_from_func_ptr_addr (gdbarch, addr, targ);
d4765 3
a4767 1
  gdb_assert (gdbarch->addr_bits_remove != NULL);
d4784 3
a4786 1
  gdb_assert (gdbarch->smash_text_address != NULL);
d4803 1
a4803 1
  return gdbarch->software_single_step != NULL;
d4810 3
a4812 1
  gdb_assert (gdbarch->software_single_step != NULL);
d4826 1
a4826 1
gdbarch_print_insn (struct gdbarch *gdbarch, bfd_vma vma, struct disassemble_info *info)
d4829 3
a4831 1
  gdb_assert (gdbarch->print_insn != NULL);
d4848 3
a4850 1
  gdb_assert (gdbarch->skip_trampoline_code != NULL);
a4862 17
CORE_ADDR
gdbarch_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->skip_solib_resolver != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_solib_resolver called\n");
  return gdbarch->skip_solib_resolver (gdbarch, pc);
}

void
set_gdbarch_skip_solib_resolver (struct gdbarch *gdbarch,
                                 gdbarch_skip_solib_resolver_ftype skip_solib_resolver)
{
  gdbarch->skip_solib_resolver = skip_solib_resolver;
}

d4867 3
a4869 1
  gdb_assert (gdbarch->in_solib_call_trampoline != NULL);
d4886 3
a4888 1
  gdb_assert (gdbarch->in_solib_return_trampoline != NULL);
d4905 3
a4907 1
  gdb_assert (gdbarch->pc_in_sigtramp != NULL);
d4924 1
a4924 1
  return gdbarch->sigtramp_start != NULL;
d4931 3
a4933 1
  gdb_assert (gdbarch->sigtramp_start != NULL);
d4950 1
a4950 1
  return gdbarch->sigtramp_end != NULL;
d4957 3
a4959 1
  gdb_assert (gdbarch->sigtramp_end != NULL);
d4976 3
a4978 1
  gdb_assert (gdbarch->in_function_epilogue_p != NULL);
d4995 3
a4997 1
  gdb_assert (gdbarch->construct_inferior_arguments != NULL);
d5010 26
d5040 3
a5042 1
  gdb_assert (gdbarch->elf_make_msymbol_special != NULL);
d5059 3
a5061 1
  gdb_assert (gdbarch->coff_make_msymbol_special != NULL);
d5129 1
a5129 1
  return gdbarch->address_class_type_flags != NULL;
d5136 3
a5138 1
  gdb_assert (gdbarch->address_class_type_flags != NULL);
d5155 1
a5155 1
  return gdbarch->address_class_type_flags_to_name != NULL;
d5158 1
a5158 1
const char *
d5162 3
a5164 1
  gdb_assert (gdbarch->address_class_type_flags_to_name != NULL);
d5167 1
a5167 1
  return gdbarch->address_class_type_flags_to_name (gdbarch, type_flags);
d5181 1
a5181 1
  return gdbarch->address_class_name_to_type_flags != NULL;
d5185 1
a5185 1
gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, const char *name, int *type_flags_ptr)
d5188 3
a5190 1
  gdb_assert (gdbarch->address_class_name_to_type_flags != NULL);
d5193 1
a5193 1
  return gdbarch->address_class_name_to_type_flags (gdbarch, name, type_flags_ptr);
a5202 65
int
gdbarch_register_reggroup_p (struct gdbarch *gdbarch, int regnum, struct reggroup *reggroup)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->register_reggroup_p != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_reggroup_p called\n");
  return gdbarch->register_reggroup_p (gdbarch, regnum, reggroup);
}

void
set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch,
                                 gdbarch_register_reggroup_p_ftype register_reggroup_p)
{
  gdbarch->register_reggroup_p = register_reggroup_p;
}

int
gdbarch_fetch_pointer_argument_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->fetch_pointer_argument != NULL;
}

CORE_ADDR
gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch, struct frame_info *frame, int argi, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->fetch_pointer_argument != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fetch_pointer_argument called\n");
  return gdbarch->fetch_pointer_argument (frame, argi, type);
}

void
set_gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch,
                                    gdbarch_fetch_pointer_argument_ftype fetch_pointer_argument)
{
  gdbarch->fetch_pointer_argument = fetch_pointer_argument;
}

int
gdbarch_regset_from_core_section_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->regset_from_core_section != NULL;
}

const struct regset *
gdbarch_regset_from_core_section (struct gdbarch *gdbarch, const char *sect_name, size_t sect_size)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->regset_from_core_section != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_regset_from_core_section called\n");
  return gdbarch->regset_from_core_section (gdbarch, sect_name, sect_size);
}

void
set_gdbarch_regset_from_core_section (struct gdbarch *gdbarch,
                                      gdbarch_regset_from_core_section_ftype regset_from_core_section)
{
  gdbarch->regset_from_core_section = regset_from_core_section;
}

d5212 1
d5233 2
a5234 1
register_gdbarch_data (gdbarch_data_init_ftype *init)
d5247 1
d5259 22
a5280 1
  gdbarch->data = GDBARCH_OBSTACK_CALLOC (gdbarch, gdbarch->nr_data, void *);
d5283 1
d5293 5
a5297 1
  gdb_assert (gdbarch->data[data->index] == NULL);
d5372 13
a5384 1
current_gdbarch_swap_init_hack (void)
d5387 1
a5387 1
  struct gdbarch_swap **curr = &current_gdbarch->swap;
d5394 1
a5394 2
	  (*curr) = GDBARCH_OBSTACK_ZALLOC (current_gdbarch,
					    struct gdbarch_swap);
d5396 1
a5396 2
	  (*curr)->swap = gdbarch_obstack_zalloc (current_gdbarch,
						  rego->sizeof_data);
d5405 2
a5406 2
static struct gdbarch *
current_gdbarch_swap_out_hack (void)
a5407 1
  struct gdbarch *old_gdbarch = current_gdbarch;
d5409 1
a5409 3

  gdb_assert (old_gdbarch != NULL);
  for (curr = old_gdbarch->swap;
d5412 1
a5412 6
    {
      memcpy (curr->swap, curr->source->data, curr->source->sizeof_data);
      memset (curr->source->data, 0, curr->source->sizeof_data);
    }
  current_gdbarch = NULL;
  return old_gdbarch;
d5416 1
a5416 1
current_gdbarch_swap_in_hack (struct gdbarch *new_gdbarch)
d5419 1
a5419 3

  gdb_assert (current_gdbarch == NULL);
  for (curr = new_gdbarch->swap;
a5422 1
  current_gdbarch = new_gdbarch;
d5450 1
a5450 9
  /* Accumulate a list of names based on the registed list of
     architectures. */
  enum bfd_architecture a;
  int nr_arches = 0;
  const char **arches = NULL;
  struct gdbarch_registration *rego;
  for (rego = gdbarch_registry;
       rego != NULL;
       rego = rego->next)
d5452 24
a5475 11
      const struct bfd_arch_info *ap;
      ap = bfd_lookup_arch (rego->bfd_architecture, 0);
      if (ap == NULL)
        internal_error (__FILE__, __LINE__,
                        "gdbarch_architecture_names: multi-arch unknown");
      do
        {
          append_name (&arches, &nr_arches, ap->printable_name);
          ap = ap->next;
        }
      while (ap != NULL);
d5477 4
a5480 2
  append_name (&arches, &nr_arches, NULL);
  return arches;
d5521 6
a5549 2
      if (info->osabi != arches->gdbarch->osabi)
	continue;
d5556 2
a5557 3
/* Find an architecture that matches the specified INFO.  Create a new
   architecture if needed.  Return that new architecture.  Assumes
   that there is no current architecture.  */
d5559 2
a5560 2
static struct gdbarch *
find_arch_by_info (struct gdbarch *old_gdbarch, struct gdbarch_info info)
d5563 1
d5566 2
a5567 3
  /* The existing architecture has been swapped out - all this code
     works from a clean slate.  */
  gdb_assert (current_gdbarch == NULL);
d5569 25
a5593 4
  /* Fill in missing parts of the INFO struct using a number of
     sources: "set ..."; INFOabfd supplied; and the existing
     architecture.  */
  gdbarch_info_fill (old_gdbarch, &info);
d5601 1
a5601 1
			  "find_arch_by_info: info.bfd_arch_info %s\n",
d5606 1
a5606 1
			  "find_arch_by_info: info.byte_order %d (%s)\n",
d5612 1
a5612 4
			  "find_arch_by_info: info.osabi %d (%s)\n",
			  info.osabi, gdbarch_osabi_name (info.osabi));
      fprintf_unfiltered (gdb_stdlog,
			  "find_arch_by_info: info.abfd 0x%lx\n",
d5615 1
a5615 1
			  "find_arch_by_info: info.tdep_info 0x%lx\n",
d5619 1
a5619 1
  /* Find the tdep code that knows about this architecture.  */
d5628 1
a5628 2
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			    "No matching architecture\n");
d5632 16
a5647 1
  /* Ask the tdep code for an architecture that matches "info".  */
d5650 2
a5651 2
  /* Did the tdep code like it?  No.  Reject the change and revert to
     the old architecture.  */
d5655 4
a5658 3
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			    "Target rejected architecture\n");
      return NULL;
d5661 3
a5663 4
  /* Is this a pre-existing architecture (as determined by already
     being initialized)?  Move it to the front of the architecture
     list (keeping the list sorted Most Recently Used).  */
  if (new_gdbarch->initialized_p)
a5664 2
      struct gdbarch_list **list;
      struct gdbarch_list *this;
d5666 1
a5666 2
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			    "Previous architecture 0x%08lx (%s) selected\n",
d5669 3
a5671 14
      /* Find the existing arch in the list.  */
      for (list = &rego->arches;
	   (*list) != NULL && (*list)->gdbarch != new_gdbarch;
	   list = &(*list)->next);
      /* It had better be in the list of architectures.  */
      gdb_assert ((*list) != NULL && (*list)->gdbarch == new_gdbarch);
      /* Unlink THIS.  */
      this = (*list);
      (*list) = this->next;
      /* Insert THIS at the front.  */
      this->next = rego->arches;
      rego->arches = this;
      /* Return it.  */
      return new_gdbarch;
d5674 34
a5707 9
  /* It's a new architecture.  */
  if (gdbarch_debug)
    fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			"New architecture 0x%08lx (%s) selected\n",
			(long) new_gdbarch,
			new_gdbarch->bfd_arch_info->printable_name);
  
  /* Insert the new architecture into the front of the architecture
     list (keep the list sorted Most Recently Used).  */
d5715 11
a5729 1
  new_gdbarch->initialized_p = 1;
d5731 8
a5738 6
  /* Initialize any per-architecture swap areas.  This phase requires
     a valid global CURRENT_GDBARCH.  Set it momentarially, and then
     swap the entire architecture out.  */
  current_gdbarch = new_gdbarch;
  current_gdbarch_swap_init_hack ();
  current_gdbarch_swap_out_hack ();
d5741 1
a5741 1
    gdbarch_dump (new_gdbarch, gdb_stdlog);
d5743 1
a5743 1
  return new_gdbarch;
a5745 17
struct gdbarch *
gdbarch_find_by_info (struct gdbarch_info info)
{
  /* Save the previously selected architecture, setting the global to
     NULL.  This stops things like gdbarch->init() trying to use the
     previous architecture's configuration.  The previous architecture
     may not even be of the same architecture family.  The most recent
     architecture of the same family is found at the head of the
     rego->arches list.  */
  struct gdbarch *old_gdbarch = current_gdbarch_swap_out_hack ();

  /* Find the specified architecture.  */
  struct gdbarch *new_gdbarch = find_arch_by_info (old_gdbarch, info);

  /* Restore the existing architecture.  */
  gdb_assert (current_gdbarch == NULL);
  current_gdbarch_swap_in_hack (old_gdbarch);
d5747 1
a5747 2
  return new_gdbarch;
}
d5749 3
a5751 2
/* Make the specified architecture current, swapping the existing one
   out.  */
a5752 10
void
deprecated_current_gdbarch_select_hack (struct gdbarch *new_gdbarch)
{
  gdb_assert (new_gdbarch != NULL);
  gdb_assert (current_gdbarch != NULL);
  gdb_assert (new_gdbarch->initialized_p);
  current_gdbarch_swap_out_hack ();
  current_gdbarch_swap_in_hack (new_gdbarch);
  architecture_changed_event ();
}
d5760 6
@


1.151.2.3
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d4 1
a4 3

   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free
   Software Foundation, Inc.
d140 1
d210 1
d313 1
d383 1
d496 1
d528 2
d635 1
d695 1
d712 6
a717 2
  /* Skip verify of decr_pc_after_break, invalid_p == 0 */
  /* Skip verify of function_start_offset, invalid_p == 0 */
d1113 2
a1114 2
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(regcache)",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (regcache)));
d1379 8
d1794 19
d2996 17
d4404 24
d4435 1
a4435 1
gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch, struct regcache *regcache)
d4441 1
a4441 1
  return gdbarch->deprecated_extract_struct_value_address (regcache);
d4629 2
a4630 1
  /* Skip verify of decr_pc_after_break, invalid_p == 0 */
d4647 2
a4648 1
  /* Skip verify of function_start_offset, invalid_p == 0 */
@


1.150
log
@2002-09-18  Andrew Cagney  <ac131313@@redhat.com>

	* valops.c (hand_function_call): Align the initial stack pointer
	and STRUCT_ADDR using frame_align.  When STRUCT_RETURN and
	FRAME_ALIGN_P, use STRUCT_ADDR to obtain the called function's
	return value.
	* mips-tdep.c (mips_frame_align): New function.
	(mips_gdbarch_init): Set frame_align.
	* gdbarch.sh (FRAME_ALIGN): New method.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d272 1
d431 1
d809 1
d999 8
d5036 17
@


1.150.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@a271 2
  int cannot_step_breakpoint;
  int have_nonsteppable_watchpoint;
a429 2
  0,
  0,
a806 2
  /* Skip verify of cannot_step_breakpoint, invalid_p == 0 */
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
a995 8
#ifdef CANNOT_STEP_BREAKPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_STEP_BREAKPOINT # %s\n",
                      XSTRING (CANNOT_STEP_BREAKPOINT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_STEP_BREAKPOINT = %d\n",
                      CANNOT_STEP_BREAKPOINT);
#endif
a1374 8
#ifdef HAVE_NONSTEPPABLE_WATCHPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT # %s\n",
                      XSTRING (HAVE_NONSTEPPABLE_WATCHPOINT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT = %d\n",
                      HAVE_NONSTEPPABLE_WATCHPOINT);
#endif
a5024 34
}

int
gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of cannot_step_breakpoint, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_step_breakpoint called\n");
  return gdbarch->cannot_step_breakpoint;
}

void
set_gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch,
                                    int cannot_step_breakpoint)
{
  gdbarch->cannot_step_breakpoint = cannot_step_breakpoint;
}

int
gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_have_nonsteppable_watchpoint called\n");
  return gdbarch->have_nonsteppable_watchpoint;
}

void
set_gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch,
                                          int have_nonsteppable_watchpoint)
{
  gdbarch->have_nonsteppable_watchpoint = have_nonsteppable_watchpoint;
@


1.150.2.2
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@a273 3
  gdbarch_address_class_type_flags_ftype *address_class_type_flags;
  gdbarch_address_class_type_flags_to_name_ftype *address_class_type_flags_to_name;
  gdbarch_address_class_name_to_type_flags_ftype *address_class_name_to_type_flags;
a433 3
  0,
  0,
  0,
a812 3
  /* Skip verify of address_class_type_flags, has predicate */
  /* Skip verify of address_class_type_flags_to_name, has predicate */
  /* Skip verify of address_class_name_to_type_flags, has predicate */
a852 19
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: address_class_name_to_type_flags = 0x%08lx\n",
                        (long) current_gdbarch->address_class_name_to_type_flags);
#ifdef ADDRESS_CLASS_TYPE_FLAGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS(byte_size, dwarf2_addr_class)",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS (byte_size, dwarf2_addr_class)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags
                        /*ADDRESS_CLASS_TYPE_FLAGS ()*/);
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: address_class_type_flags_to_name = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags_to_name);
a5080 78
}

int
gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags != 0;
}

int
gdbarch_address_class_type_flags (struct gdbarch *gdbarch, int byte_size, int dwarf2_addr_class)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags called\n");
  return gdbarch->address_class_type_flags (byte_size, dwarf2_addr_class);
}

void
set_gdbarch_address_class_type_flags (struct gdbarch *gdbarch,
                                      gdbarch_address_class_type_flags_ftype address_class_type_flags)
{
  gdbarch->address_class_type_flags = address_class_type_flags;
}

int
gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags_to_name != 0;
}

char *
gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch, int type_flags)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_type_flags_to_name == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags_to_name invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags_to_name called\n");
  return gdbarch->address_class_type_flags_to_name (gdbarch, type_flags);
}

void
set_gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch,
                                              gdbarch_address_class_type_flags_to_name_ftype address_class_type_flags_to_name)
{
  gdbarch->address_class_type_flags_to_name = address_class_type_flags_to_name;
}

int
gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_name_to_type_flags != 0;
}

int
gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, char *name, int *type_flags_ptr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_name_to_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_name_to_type_flags invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_name_to_type_flags called\n");
  return gdbarch->address_class_name_to_type_flags (gdbarch, name, type_flags_ptr);
}

void
set_gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch,
                                              gdbarch_address_class_name_to_type_flags_ftype address_class_name_to_type_flags)
{
  gdbarch->address_class_name_to_type_flags = address_class_name_to_type_flags;
@


1.150.2.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@a66 1
#include "reggroups.h"
d174 1
a174 1
  gdbarch_deprecated_do_registers_info_ftype *deprecated_do_registers_info;
a276 1
  gdbarch_register_reggroup_p_ftype *register_reggroup_p;
a439 1
  default_register_reggroup_p,
d534 1
a570 1
  current_gdbarch->register_reggroup_p = default_register_reggroup_p;
d667 1
a667 1
  /* Skip verify of deprecated_do_registers_info, has predicate */
d717 1
a717 1
  /* Skip verify of get_saved_register, has predicate */
a821 1
  /* Skip verify of register_reggroup_p, invalid_p == 0 */
a855 4
                        "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
                        (long) current_gdbarch->register_reggroup_p);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a1107 14
#ifdef DEPRECATED_DO_REGISTERS_INFO
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DO_REGISTERS_INFO(reg_nr, fpregs)",
                      XSTRING (DEPRECATED_DO_REGISTERS_INFO (reg_nr, fpregs)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = 0x%08lx\n",
                        (long) current_gdbarch->deprecated_do_registers_info
                        /*DEPRECATED_DO_REGISTERS_INFO ()*/);
#endif
d1147 14
d3116 1
a3116 1
gdbarch_deprecated_do_registers_info_p (struct gdbarch *gdbarch)
d3119 1
a3119 1
  return gdbarch->deprecated_do_registers_info != 0;
d3123 1
a3123 1
gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch, int reg_nr, int fpregs)
d3126 1
a3126 1
  if (gdbarch->deprecated_do_registers_info == 0)
d3128 1
a3128 1
                    "gdbarch: gdbarch_deprecated_do_registers_info invalid");
d3130 2
a3131 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_do_registers_info called\n");
  gdbarch->deprecated_do_registers_info (reg_nr, fpregs);
d3135 2
a3136 2
set_gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_do_registers_info_ftype deprecated_do_registers_info)
d3138 1
a3138 1
  gdbarch->deprecated_do_registers_info = deprecated_do_registers_info;
a3671 7
int
gdbarch_get_saved_register_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->get_saved_register != 0;
}

a5186 19
}

int
gdbarch_register_reggroup_p (struct gdbarch *gdbarch, int regnum, struct reggroup *reggroup)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->register_reggroup_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_reggroup_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_reggroup_p called\n");
  return gdbarch->register_reggroup_p (gdbarch, regnum, reggroup);
}

void
set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch,
                                 gdbarch_register_reggroup_p_ftype register_reggroup_p)
{
  gdbarch->register_reggroup_p = register_reggroup_p;
@


1.150.2.4
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d184 1
a184 1
  int deprecated_use_generic_dummy_frames;
d191 1
a191 1
  gdbarch_deprecated_pc_in_call_dummy_ftype *deprecated_pc_in_call_dummy;
d198 2
a199 2
  gdbarch_deprecated_init_frame_pc_first_ftype *deprecated_init_frame_pc_first;
  gdbarch_deprecated_init_frame_pc_ftype *deprecated_init_frame_pc;
d355 1
a355 1
  generic_pc_in_call_dummy,
d525 1
a525 2
  current_gdbarch->deprecated_use_generic_dummy_frames = 1;
  current_gdbarch->call_dummy_location = AT_ENTRY_POINT;
a529 1
  current_gdbarch->deprecated_pc_in_call_dummy = generic_pc_in_call_dummy;
d534 2
a558 2
  current_gdbarch->frame_args_address = get_frame_base;
  current_gdbarch->frame_locals_address = get_frame_base;
d679 6
a684 2
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
  /* Skip verify of call_dummy_location, invalid_p == 0 */
d700 3
a702 1
  /* Skip verify of deprecated_pc_in_call_dummy, has predicate */
d717 2
a718 2
  /* Skip verify of deprecated_init_frame_pc_first, has predicate */
  /* Skip verify of deprecated_init_frame_pc, has predicate */
d780 6
a785 2
  /* Skip verify of frame_args_address, invalid_p == 0 */
  /* Skip verify of frame_locals_address, invalid_p == 0 */
a851 4
                        "gdbarch_dump: gdbarch_frame_align_p() = %d\n",
                        gdbarch_frame_align_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a863 4
                        "gdbarch_dump: gdbarch_pseudo_register_read_p() = %d\n",
                        gdbarch_pseudo_register_read_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a867 4
                        "gdbarch_dump: gdbarch_pseudo_register_write_p() = %d\n",
                        gdbarch_pseudo_register_write_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a871 4
                        "gdbarch_dump: gdbarch_address_class_name_to_type_flags_p() = %d\n",
                        gdbarch_address_class_name_to_type_flags_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a873 9
#ifdef ADDRESS_CLASS_TYPE_FLAGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS_P()",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS_P() = %d\n",
                      ADDRESS_CLASS_TYPE_FLAGS_P ());
#endif
d881 1
a881 1
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = <0x%08lx>\n",
a886 4
                        "gdbarch_dump: gdbarch_address_class_type_flags_to_name_p() = %d\n",
                        gdbarch_address_class_type_flags_to_name_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
d899 1
a899 1
                        "gdbarch_dump: ADDRESS_TO_POINTER = <0x%08lx>\n",
d910 1
a910 1
                        "gdbarch_dump: ADDR_BITS_REMOVE = <0x%08lx>\n",
d937 1
a937 1
                        "gdbarch_dump: BREAKPOINT_FROM_PC = <0x%08lx>\n",
d948 1
a948 1
                        "gdbarch_dump: CALL_DUMMY_ADDRESS = <0x%08lx>\n",
d1034 1
a1034 1
                        "gdbarch_dump: CANNOT_FETCH_REGISTER = <0x%08lx>\n",
d1053 1
a1053 1
                        "gdbarch_dump: CANNOT_STORE_REGISTER = <0x%08lx>\n",
d1064 1
a1064 1
                        "gdbarch_dump: COERCE_FLOAT_TO_DOUBLE = <0x%08lx>\n",
d1078 1
a1078 1
                        "gdbarch_dump: COFF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
d1093 1
a1093 1
                        "gdbarch_dump: CONVERT_FROM_FUNC_PTR_ADDR = <0x%08lx>\n",
d1104 1
a1104 1
                        "gdbarch_dump: CONVERT_REGISTER_P = <0x%08lx>\n",
a1115 9
#ifdef DEPRECATED_DO_REGISTERS_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DO_REGISTERS_INFO_P()",
                      XSTRING (DEPRECATED_DO_REGISTERS_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO_P() = %d\n",
                      DEPRECATED_DO_REGISTERS_INFO_P ());
#endif
d1126 1
a1126 1
                        "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = <0x%08lx>\n",
d1140 1
a1140 1
                        "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = <0x%08lx>\n",
a1143 9
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P()",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P() = %d\n",
                      DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ());
#endif
d1151 1
a1151 1
                        "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
a1154 60
#ifdef DEPRECATED_INIT_FRAME_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_P()",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_P() = %d\n",
                      DEPRECATED_INIT_FRAME_PC_P ());
#endif
#ifdef DEPRECATED_INIT_FRAME_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC(fromleaf, prev)",
                      XSTRING (DEPRECATED_INIT_FRAME_PC (fromleaf, prev)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_INIT_FRAME_PC = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_init_frame_pc
                        /*DEPRECATED_INIT_FRAME_PC ()*/);
#endif
#ifdef DEPRECATED_INIT_FRAME_PC_FIRST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_FIRST_P()",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_FIRST_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST_P() = %d\n",
                      DEPRECATED_INIT_FRAME_PC_FIRST_P ());
#endif
#ifdef DEPRECATED_INIT_FRAME_PC_FIRST
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_FRAME_PC_FIRST(fromleaf, prev)",
                      XSTRING (DEPRECATED_INIT_FRAME_PC_FIRST (fromleaf, prev)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_init_frame_pc_first
                        /*DEPRECATED_INIT_FRAME_PC_FIRST ()*/);
#endif
#ifdef DEPRECATED_PC_IN_CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_CALL_DUMMY_P()",
                      XSTRING (DEPRECATED_PC_IN_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY_P() = %d\n",
                      DEPRECATED_PC_IN_CALL_DUMMY_P ());
#endif
#ifdef DEPRECATED_PC_IN_CALL_DUMMY
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PC_IN_CALL_DUMMY(pc, sp, frame_address)",
                      XSTRING (DEPRECATED_PC_IN_CALL_DUMMY (pc, sp, frame_address)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_pc_in_call_dummy
                        /*DEPRECATED_PC_IN_CALL_DUMMY ()*/);
#endif
d1165 1
a1165 1
                        "gdbarch_dump: DEPRECATED_STORE_RETURN_VALUE = <0x%08lx>\n",
a1168 17
#ifdef DEPRECATED_USE_GENERIC_DUMMY_FRAMES
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_USE_GENERIC_DUMMY_FRAMES # %s\n",
                      XSTRING (DEPRECATED_USE_GENERIC_DUMMY_FRAMES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_USE_GENERIC_DUMMY_FRAMES = %d\n",
                      DEPRECATED_USE_GENERIC_DUMMY_FRAMES);
#endif
#ifdef DWARF2_BUILD_FRAME_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DWARF2_BUILD_FRAME_INFO_P()",
                      XSTRING (DWARF2_BUILD_FRAME_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DWARF2_BUILD_FRAME_INFO_P() = %d\n",
                      DWARF2_BUILD_FRAME_INFO_P ());
#endif
d1179 1
a1179 1
                        "gdbarch_dump: DWARF2_BUILD_FRAME_INFO = <0x%08lx>\n",
d1190 1
a1190 1
                        "gdbarch_dump: DWARF2_REG_TO_REGNUM = <0x%08lx>\n",
d1201 1
a1201 1
                        "gdbarch_dump: DWARF_REG_TO_REGNUM = <0x%08lx>\n",
d1212 1
a1212 1
                        "gdbarch_dump: ECOFF_REG_TO_REGNUM = <0x%08lx>\n",
d1226 1
a1226 1
                        "gdbarch_dump: ELF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
d1240 1
a1240 1
                        "gdbarch_dump: EXTRACT_RETURN_VALUE = <0x%08lx>\n",
a1243 9
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS_P()",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS_P() = %d\n",
                      EXTRACT_STRUCT_VALUE_ADDRESS_P ());
#endif
d1251 1
a1251 1
                        "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
d1273 1
a1273 1
                        "gdbarch_dump: FIX_CALL_DUMMY = <0x%08lx>\n",
d1300 1
a1300 1
                        "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = <0x%08lx>\n",
d1311 1
a1311 1
                        "gdbarch_dump: FRAME_ARGS_ADDRESS = <0x%08lx>\n",
d1330 1
a1330 1
                        "gdbarch_dump: FRAME_CHAIN = <0x%08lx>\n",
d1341 1
a1341 1
                        "gdbarch_dump: FRAME_CHAIN_VALID = <0x%08lx>\n",
d1355 1
a1355 1
                        "gdbarch_dump: FRAME_INIT_SAVED_REGS = <0x%08lx>\n",
d1366 1
a1366 1
                        "gdbarch_dump: FRAME_LOCALS_ADDRESS = <0x%08lx>\n",
d1377 1
a1377 1
                        "gdbarch_dump: FRAME_NUM_ARGS = <0x%08lx>\n",
d1388 1
a1388 1
                        "gdbarch_dump: FRAME_SAVED_PC = <0x%08lx>\n",
a1399 9
#ifdef GET_LONGJMP_TARGET_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_LONGJMP_TARGET_P()",
                      XSTRING (GET_LONGJMP_TARGET_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: GET_LONGJMP_TARGET_P() = %d\n",
                      GET_LONGJMP_TARGET_P ());
#endif
d1407 1
a1407 1
                        "gdbarch_dump: GET_LONGJMP_TARGET = <0x%08lx>\n",
a1410 9
#ifdef GET_SAVED_REGISTER_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_SAVED_REGISTER_P()",
                      XSTRING (GET_SAVED_REGISTER_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: GET_SAVED_REGISTER_P() = %d\n",
                      GET_SAVED_REGISTER_P ());
#endif
d1421 1
a1421 1
                        "gdbarch_dump: GET_SAVED_REGISTER = <0x%08lx>\n",
a1432 9
#ifdef INIT_EXTRA_FRAME_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INIT_EXTRA_FRAME_INFO_P()",
                      XSTRING (INIT_EXTRA_FRAME_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: INIT_EXTRA_FRAME_INFO_P() = %d\n",
                      INIT_EXTRA_FRAME_INFO_P ());
#endif
d1443 1
a1443 1
                        "gdbarch_dump: INIT_EXTRA_FRAME_INFO = <0x%08lx>\n",
d1447 28
d1482 1
a1482 1
                        "gdbarch_dump: INNER_THAN = <0x%08lx>\n",
a1485 9
#ifdef INTEGER_TO_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INTEGER_TO_ADDRESS_P()",
                      XSTRING (INTEGER_TO_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: INTEGER_TO_ADDRESS_P() = %d\n",
                      INTEGER_TO_ADDRESS_P ());
#endif
d1493 1
a1493 1
                        "gdbarch_dump: INTEGER_TO_ADDRESS = <0x%08lx>\n",
d1504 1
a1504 1
                        "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = <0x%08lx>\n",
d1515 1
a1515 1
                        "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = <0x%08lx>\n",
d1542 1
a1542 1
                        "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = <0x%08lx>\n",
d1553 1
a1553 1
                        "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = <0x%08lx>\n",
d1562 2
a1563 2
                      "gdbarch_dump: NAME_OF_MALLOC = %s\n",
                      NAME_OF_MALLOC);
d1597 11
d1615 1
a1615 1
                        "gdbarch_dump: PC_IN_SIGTRAMP = <0x%08lx>\n",
d1634 1
a1634 1
                        "gdbarch_dump: POINTER_TO_ADDRESS = <0x%08lx>\n",
d1648 1
a1648 1
                        "gdbarch_dump: POP_FRAME = <0x%08lx>\n",
d1659 1
a1659 1
                        "gdbarch_dump: PREPARE_TO_PROCEED = <0x%08lx>\n",
a1664 4
                        "gdbarch_dump: gdbarch_print_float_info_p() = %d\n",
                        gdbarch_print_float_info_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a1672 4
                        "gdbarch_dump: gdbarch_print_vector_info_p() = %d\n",
                        gdbarch_print_vector_info_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
d1682 1
a1682 1
                        "gdbarch_dump: PROLOGUE_FRAMELESS_P = <0x%08lx>\n",
d1701 1
a1701 1
                        "gdbarch_dump: PUSH_ARGUMENTS = <0x%08lx>\n",
d1715 1
a1715 1
                        "gdbarch_dump: PUSH_DUMMY_FRAME = <0x%08lx>\n",
a1718 9
#ifdef PUSH_RETURN_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_RETURN_ADDRESS_P()",
                      XSTRING (PUSH_RETURN_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: PUSH_RETURN_ADDRESS_P() = %d\n",
                      PUSH_RETURN_ADDRESS_P ());
#endif
d1726 1
a1726 1
                        "gdbarch_dump: PUSH_RETURN_ADDRESS = <0x%08lx>\n",
d1737 1
a1737 1
                        "gdbarch_dump: REGISTER_BYTE = <0x%08lx>\n",
a1748 9
#ifdef REGISTER_BYTES_OK_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTES_OK_P()",
                      XSTRING (REGISTER_BYTES_OK_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTES_OK_P() = %d\n",
                      REGISTER_BYTES_OK_P ());
#endif
d1756 1
a1756 1
                        "gdbarch_dump: REGISTER_BYTES_OK = <0x%08lx>\n",
d1767 1
a1767 1
                        "gdbarch_dump: REGISTER_CONVERTIBLE = <0x%08lx>\n",
d1781 1
a1781 1
                        "gdbarch_dump: REGISTER_CONVERT_TO_RAW = <0x%08lx>\n",
d1795 1
a1795 1
                        "gdbarch_dump: REGISTER_CONVERT_TO_VIRTUAL = <0x%08lx>\n",
d1806 1
a1806 1
                        "gdbarch_dump: REGISTER_NAME = <0x%08lx>\n",
d1817 1
a1817 1
                        "gdbarch_dump: REGISTER_RAW_SIZE = <0x%08lx>\n",
d1828 1
a1828 1
                        "gdbarch_dump: REGISTER_SIM_REGNO = <0x%08lx>\n",
d1850 1
a1850 1
                        "gdbarch_dump: REGISTER_TO_VALUE = <0x%08lx>\n",
d1861 1
a1861 1
                        "gdbarch_dump: REGISTER_VIRTUAL_SIZE = <0x%08lx>\n",
d1872 1
a1872 1
                        "gdbarch_dump: REGISTER_VIRTUAL_TYPE = <0x%08lx>\n",
a1875 9
#ifdef REG_STRUCT_HAS_ADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REG_STRUCT_HAS_ADDR_P()",
                      XSTRING (REG_STRUCT_HAS_ADDR_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REG_STRUCT_HAS_ADDR_P() = %d\n",
                      REG_STRUCT_HAS_ADDR_P ());
#endif
d1883 1
a1883 1
                        "gdbarch_dump: REG_STRUCT_HAS_ADDR = <0x%08lx>\n",
d1897 1
a1897 1
                        "gdbarch_dump: REMOTE_TRANSLATE_XFER_ADDRESS = <0x%08lx>\n",
d1908 1
a1908 1
                        "gdbarch_dump: RETURN_VALUE_ON_STACK = <0x%08lx>\n",
d1919 1
a1919 1
                        "gdbarch_dump: SAVED_PC_AFTER_CALL = <0x%08lx>\n",
a1922 9
#ifdef SAVE_DUMMY_FRAME_TOS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVE_DUMMY_FRAME_TOS_P()",
                      XSTRING (SAVE_DUMMY_FRAME_TOS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SAVE_DUMMY_FRAME_TOS_P() = %d\n",
                      SAVE_DUMMY_FRAME_TOS_P ());
#endif
d1933 1
a1933 1
                        "gdbarch_dump: SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
d1944 1
a1944 1
                        "gdbarch_dump: SDB_REG_TO_REGNUM = <0x%08lx>\n",
a1947 9
#ifdef SIGTRAMP_END_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_END_P()",
                      XSTRING (SIGTRAMP_END_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_END_P() = %d\n",
                      SIGTRAMP_END_P ());
#endif
d1955 1
a1955 1
                        "gdbarch_dump: SIGTRAMP_END = <0x%08lx>\n",
a1958 9
#ifdef SIGTRAMP_START_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_START_P()",
                      XSTRING (SIGTRAMP_START_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_START_P() = %d\n",
                      SIGTRAMP_START_P ());
#endif
d1966 1
a1966 1
                        "gdbarch_dump: SIGTRAMP_START = <0x%08lx>\n",
d1985 1
a1985 1
                        "gdbarch_dump: SKIP_PROLOGUE = <0x%08lx>\n",
d1996 1
a1996 1
                        "gdbarch_dump: SKIP_TRAMPOLINE_CODE = <0x%08lx>\n",
d2007 1
a2007 1
                        "gdbarch_dump: SMASH_TEXT_ADDRESS = <0x%08lx>\n",
a2010 9
#ifdef SOFTWARE_SINGLE_STEP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SOFTWARE_SINGLE_STEP_P()",
                      XSTRING (SOFTWARE_SINGLE_STEP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SOFTWARE_SINGLE_STEP_P() = %d\n",
                      SOFTWARE_SINGLE_STEP_P ());
#endif
d2021 1
a2021 1
                        "gdbarch_dump: SOFTWARE_SINGLE_STEP = <0x%08lx>\n",
d2040 1
a2040 1
                        "gdbarch_dump: STAB_REG_TO_REGNUM = <0x%08lx>\n",
a2043 9
#ifdef STACK_ALIGN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STACK_ALIGN_P()",
                      XSTRING (STACK_ALIGN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: STACK_ALIGN_P() = %d\n",
                      STACK_ALIGN_P ());
#endif
d2051 1
a2051 1
                        "gdbarch_dump: STACK_ALIGN = <0x%08lx>\n",
d2065 1
a2065 1
                        "gdbarch_dump: STORE_RETURN_VALUE = <0x%08lx>\n",
d2079 1
a2079 1
                        "gdbarch_dump: STORE_STRUCT_RETURN = <0x%08lx>\n",
d2137 2
a2138 2
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT = %s\n",
                      (TARGET_DOUBLE_FORMAT)->name);
d2153 2
a2154 2
                      "gdbarch_dump: TARGET_FLOAT_FORMAT = %s\n",
                      (TARGET_FLOAT_FORMAT)->name);
d2185 2
a2186 2
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT = %s\n",
                      (TARGET_LONG_DOUBLE_FORMAT)->name);
d2203 1
a2203 1
                        "gdbarch_dump: TARGET_PRINT_INSN = <0x%08lx>\n",
d2222 1
a2222 1
                        "gdbarch_dump: TARGET_READ_FP = <0x%08lx>\n",
d2233 1
a2233 1
                        "gdbarch_dump: TARGET_READ_PC = <0x%08lx>\n",
d2244 1
a2244 1
                        "gdbarch_dump: TARGET_READ_SP = <0x%08lx>\n",
d2266 1
a2266 1
                        "gdbarch_dump: TARGET_VIRTUAL_FRAME_POINTER = <0x%08lx>\n",
d2280 1
a2280 1
                        "gdbarch_dump: TARGET_WRITE_PC = <0x%08lx>\n",
d2294 1
a2294 1
                        "gdbarch_dump: TARGET_WRITE_SP = <0x%08lx>\n",
d2298 8
d2313 1
a2313 1
                        "gdbarch_dump: USE_STRUCT_CONVENTION = <0x%08lx>\n",
d2327 1
a2327 1
                        "gdbarch_dump: VALUE_TO_REGISTER = <0x%08lx>\n",
d3330 1
a3330 1
gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch)
d3333 3
a3335 1
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
d3337 2
a3338 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_use_generic_dummy_frames called\n");
  return gdbarch->deprecated_use_generic_dummy_frames;
d3342 2
a3343 2
set_gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch,
                                                 int deprecated_use_generic_dummy_frames)
d3345 1
a3345 1
  gdbarch->deprecated_use_generic_dummy_frames = deprecated_use_generic_dummy_frames;
d3352 3
a3354 1
  /* Skip verify of call_dummy_location, invalid_p == 0 */
d3463 1
a3463 1
gdbarch_deprecated_pc_in_call_dummy_p (struct gdbarch *gdbarch)
d3466 1
a3466 8
  return gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy;
}

int
gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp, CORE_ADDR frame_address)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_pc_in_call_dummy == 0)
d3468 1
a3468 2
                    "gdbarch: gdbarch_deprecated_pc_in_call_dummy invalid");
  /* Ignore predicate (gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy).  */
d3470 2
a3471 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pc_in_call_dummy called\n");
  return gdbarch->deprecated_pc_in_call_dummy (pc, sp, frame_address);
d3475 2
a3476 2
set_gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_pc_in_call_dummy_ftype deprecated_pc_in_call_dummy)
d3478 1
a3478 1
  gdbarch->deprecated_pc_in_call_dummy = deprecated_pc_in_call_dummy;
d3591 2
a3592 9
int
gdbarch_deprecated_init_frame_pc_first_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_init_frame_pc_first != 0;
}

CORE_ADDR
gdbarch_deprecated_init_frame_pc_first (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
d3595 1
a3595 1
  if (gdbarch->deprecated_init_frame_pc_first == 0)
d3597 1
a3597 1
                    "gdbarch: gdbarch_deprecated_init_frame_pc_first invalid");
d3599 2
a3600 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_frame_pc_first called\n");
  return gdbarch->deprecated_init_frame_pc_first (fromleaf, prev);
d3604 2
a3605 2
set_gdbarch_deprecated_init_frame_pc_first (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_init_frame_pc_first_ftype deprecated_init_frame_pc_first)
d3607 1
a3607 1
  gdbarch->deprecated_init_frame_pc_first = deprecated_init_frame_pc_first;
d3610 2
a3611 9
int
gdbarch_deprecated_init_frame_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_init_frame_pc != 0;
}

CORE_ADDR
gdbarch_deprecated_init_frame_pc (struct gdbarch *gdbarch, int fromleaf, struct frame_info *prev)
d3614 1
a3614 1
  if (gdbarch->deprecated_init_frame_pc == 0)
d3616 1
a3616 1
                    "gdbarch: gdbarch_deprecated_init_frame_pc invalid");
d3618 2
a3619 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_frame_pc called\n");
  return gdbarch->deprecated_init_frame_pc (fromleaf, prev);
d3623 2
a3624 2
set_gdbarch_deprecated_init_frame_pc (struct gdbarch *gdbarch,
                                      gdbarch_deprecated_init_frame_pc_ftype deprecated_init_frame_pc)
d3626 1
a3626 1
  gdbarch->deprecated_init_frame_pc = deprecated_init_frame_pc;
d5159 1
a5159 1
const char *
d5186 1
a5186 1
gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, const char *name, int *type_flags_ptr)
@


1.150.2.5
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d4 1
a4 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a67 1
#include "osabi.h"
a95 1
  enum gdb_osabi osabi;
d202 1
a292 1
  GDB_OSABI_UNKNOWN,
d430 1
a482 1
  current_gdbarch->osabi = info->osabi;
d536 1
d558 1
d715 1
d732 3
a734 1
  /* Skip verify of pop_frame, has predicate */
d743 3
a745 1
  /* Skip verify of frame_init_saved_regs, has predicate */
d769 7
a775 3
  /* Skip verify of frame_chain, has predicate */
  /* Skip verify of frame_chain_valid, has predicate */
  /* Skip verify of frame_saved_pc, has predicate */
d994 1
a994 1
  if (gdbarch->call_dummy_length >= 0)
d1078 11
a1447 9
#ifdef FRAME_CHAIN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN_P()",
                      XSTRING (FRAME_CHAIN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_CHAIN_P() = %d\n",
                      FRAME_CHAIN_P ());
#endif
a1458 9
#ifdef FRAME_CHAIN_VALID_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN_VALID_P()",
                      XSTRING (FRAME_CHAIN_VALID_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_CHAIN_VALID_P() = %d\n",
                      FRAME_CHAIN_VALID_P ());
#endif
a1469 9
#ifdef FRAME_INIT_SAVED_REGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_INIT_SAVED_REGS_P()",
                      XSTRING (FRAME_INIT_SAVED_REGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_INIT_SAVED_REGS_P() = %d\n",
                      FRAME_INIT_SAVED_REGS_P ());
#endif
a1505 9
#ifdef FRAME_SAVED_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_SAVED_PC_P()",
                      XSTRING (FRAME_SAVED_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_SAVED_PC_P() = %d\n",
                      FRAME_SAVED_PC_P ());
#endif
a1759 9
#ifdef POP_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "POP_FRAME_P()",
                      XSTRING (POP_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: POP_FRAME_P() = %d\n",
                      POP_FRAME_P ());
#endif
a2397 8
#ifdef TARGET_OSABI
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_OSABI # %s\n",
                      XSTRING (TARGET_OSABI));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_OSABI = %ld\n",
                      (long) TARGET_OSABI);
#endif
a2555 9
enum gdb_osabi
gdbarch_osabi (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_osabi called\n");
  return gdbarch->osabi;
}

d3874 19
d4033 1
a4033 1
gdbarch_pointer_to_address (struct gdbarch *gdbarch, struct type *type, const void *buf)
a4178 7
int
gdbarch_pop_frame_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->pop_frame != 0;
}

a4363 7
int
gdbarch_frame_init_saved_regs_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_init_saved_regs != 0;
}

a4636 7
int
gdbarch_frame_chain_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_chain != 0;
}

a4656 7
gdbarch_frame_chain_valid_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_chain_valid != 0;
}

int
a4674 7
int
gdbarch_frame_saved_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_saved_pc != 0;
}

a5781 2
      if (info->osabi != arches->gdbarch->osabi)
	continue;
a5826 6
  /* ``(gdb) set osabi ...'' is handled by gdbarch_lookup_osabi.  */
  if (info.osabi == GDB_OSABI_UNINITIALIZED)
    info.osabi = gdbarch_lookup_osabi (info.abfd);
  if (info.osabi == GDB_OSABI_UNINITIALIZED)
    info.osabi = current_gdbarch->osabi;

a5842 3
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: info.osabi %d (%s)\n",
			  info.osabi, gdbarch_osabi_name (info.osabi));
@


1.150.2.6
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d173 1
a173 1
  int deprecated_max_register_raw_size;
d175 1
a175 1
  int deprecated_max_register_virtual_size;
a176 1
  gdbarch_register_type_ftype *register_type;
d216 1
a216 1
  gdbarch_deprecated_push_dummy_frame_ftype *deprecated_push_dummy_frame;
d227 2
a228 2
  gdbarch_deprecated_frame_init_saved_regs_ftype *deprecated_frame_init_saved_regs;
  gdbarch_deprecated_init_extra_frame_info_ftype *deprecated_init_extra_frame_info;
a341 1
  0,
d520 1
d522 1
d662 3
a664 1
  /* Skip verify of deprecated_max_register_raw_size, has predicate */
d666 6
a671 3
  /* Skip verify of deprecated_max_register_virtual_size, has predicate */
  /* Skip verify of register_virtual_type, has predicate */
  /* Skip verify of register_type, has predicate */
d727 3
a729 1
  /* Skip verify of deprecated_push_dummy_frame, has predicate */
d740 2
a741 2
  /* Skip verify of deprecated_frame_init_saved_regs, has predicate */
  /* Skip verify of deprecated_init_extra_frame_info, has predicate */
a1173 46
#ifdef DEPRECATED_FRAME_INIT_SAVED_REGS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_INIT_SAVED_REGS_P()",
                      XSTRING (DEPRECATED_FRAME_INIT_SAVED_REGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS_P() = %d\n",
                      DEPRECATED_FRAME_INIT_SAVED_REGS_P ());
#endif
#ifdef DEPRECATED_FRAME_INIT_SAVED_REGS
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_INIT_SAVED_REGS(frame)",
                      XSTRING (DEPRECATED_FRAME_INIT_SAVED_REGS (frame)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_init_saved_regs
                        /*DEPRECATED_FRAME_INIT_SAVED_REGS ()*/);
#endif
#ifdef DEPRECATED_INIT_EXTRA_FRAME_INFO_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_EXTRA_FRAME_INFO_P()",
                      XSTRING (DEPRECATED_INIT_EXTRA_FRAME_INFO_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO_P() = %d\n",
                      DEPRECATED_INIT_EXTRA_FRAME_INFO_P ());
#endif
#ifdef DEPRECATED_INIT_EXTRA_FRAME_INFO
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_INIT_EXTRA_FRAME_INFO(fromleaf, frame)",
                      XSTRING (DEPRECATED_INIT_EXTRA_FRAME_INFO (fromleaf, frame)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_init_extra_frame_info
                        /*DEPRECATED_INIT_EXTRA_FRAME_INFO ()*/);
#endif
a1213 34
#ifdef DEPRECATED_MAX_REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_MAX_REGISTER_RAW_SIZE_P()",
                      XSTRING (DEPRECATED_MAX_REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE_P() = %d\n",
                      DEPRECATED_MAX_REGISTER_RAW_SIZE_P ());
#endif
#ifdef DEPRECATED_MAX_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE # %s\n",
                      XSTRING (DEPRECATED_MAX_REGISTER_RAW_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_RAW_SIZE = %d\n",
                      DEPRECATED_MAX_REGISTER_RAW_SIZE);
#endif
#ifdef DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE_P ());
#endif
#ifdef DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE # %s\n",
                      XSTRING (DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE = %d\n",
                      DEPRECATED_MAX_REGISTER_VIRTUAL_SIZE);
#endif
a1233 23
#ifdef DEPRECATED_PUSH_DUMMY_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_DUMMY_FRAME_P()",
                      XSTRING (DEPRECATED_PUSH_DUMMY_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME_P() = %d\n",
                      DEPRECATED_PUSH_DUMMY_FRAME_P ());
#endif
#ifdef DEPRECATED_PUSH_DUMMY_FRAME
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_DUMMY_FRAME(-)",
                      XSTRING (DEPRECATED_PUSH_DUMMY_FRAME (-)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_dummy_frame
                        /*DEPRECATED_PUSH_DUMMY_FRAME ()*/);
#endif
d1468 23
d1592 23
d1668 16
d1860 14
a2026 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_register_type_p() = %d\n",
                        gdbarch_register_type_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: register_type = 0x%08lx\n",
                        (long) current_gdbarch->register_type);
a2037 9
#ifdef REGISTER_VIRTUAL_TYPE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_TYPE_P()",
                      XSTRING (REGISTER_VIRTUAL_TYPE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_TYPE_P() = %d\n",
                      REGISTER_VIRTUAL_TYPE_P ());
#endif
d3284 1
a3284 8
gdbarch_deprecated_max_register_raw_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_max_register_raw_size != 0;
}

int
gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch)
d3287 3
d3291 2
a3292 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_raw_size called\n");
  return gdbarch->deprecated_max_register_raw_size;
d3296 2
a3297 2
set_gdbarch_deprecated_max_register_raw_size (struct gdbarch *gdbarch,
                                              int deprecated_max_register_raw_size)
d3299 1
a3299 1
  gdbarch->deprecated_max_register_raw_size = deprecated_max_register_raw_size;
d3322 1
a3322 8
gdbarch_deprecated_max_register_virtual_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_max_register_virtual_size != 0;
}

int
gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch)
d3325 3
d3329 2
a3330 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_max_register_virtual_size called\n");
  return gdbarch->deprecated_max_register_virtual_size;
d3334 2
a3335 2
set_gdbarch_deprecated_max_register_virtual_size (struct gdbarch *gdbarch,
                                                  int deprecated_max_register_virtual_size)
d3337 1
a3337 8
  gdbarch->deprecated_max_register_virtual_size = deprecated_max_register_virtual_size;
}

int
gdbarch_register_virtual_type_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_virtual_type != 0;
a3359 26
gdbarch_register_type_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_type != 0;
}

struct type *
gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->register_type == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_type invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_type called\n");
  return gdbarch->register_type (gdbarch, reg_nr);
}

void
set_gdbarch_register_type (struct gdbarch *gdbarch,
                           gdbarch_register_type_ftype register_type)
{
  gdbarch->register_type = register_type;
}

int
a4156 7
int
gdbarch_deprecated_push_dummy_frame_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_dummy_frame != 0;
}

d4158 1
a4158 1
gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch)
d4161 1
a4161 1
  if (gdbarch->deprecated_push_dummy_frame == 0)
d4163 1
a4163 1
                    "gdbarch: gdbarch_deprecated_push_dummy_frame invalid");
d4165 2
a4166 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_dummy_frame called\n");
  gdbarch->deprecated_push_dummy_frame ();
d4170 2
a4171 2
set_gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_push_dummy_frame_ftype deprecated_push_dummy_frame)
d4173 1
a4173 1
  gdbarch->deprecated_push_dummy_frame = deprecated_push_dummy_frame;
d4395 1
a4395 1
gdbarch_deprecated_frame_init_saved_regs_p (struct gdbarch *gdbarch)
d4398 1
a4398 1
  return gdbarch->deprecated_frame_init_saved_regs != 0;
d4402 1
a4402 1
gdbarch_deprecated_frame_init_saved_regs (struct gdbarch *gdbarch, struct frame_info *frame)
d4405 1
a4405 1
  if (gdbarch->deprecated_frame_init_saved_regs == 0)
d4407 1
a4407 1
                    "gdbarch: gdbarch_deprecated_frame_init_saved_regs invalid");
d4409 2
a4410 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_init_saved_regs called\n");
  gdbarch->deprecated_frame_init_saved_regs (frame);
d4414 2
a4415 2
set_gdbarch_deprecated_frame_init_saved_regs (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_frame_init_saved_regs_ftype deprecated_frame_init_saved_regs)
d4417 1
a4417 1
  gdbarch->deprecated_frame_init_saved_regs = deprecated_frame_init_saved_regs;
d4421 1
a4421 1
gdbarch_deprecated_init_extra_frame_info_p (struct gdbarch *gdbarch)
d4424 1
a4424 1
  return gdbarch->deprecated_init_extra_frame_info != 0;
d4428 1
a4428 1
gdbarch_deprecated_init_extra_frame_info (struct gdbarch *gdbarch, int fromleaf, struct frame_info *frame)
d4431 1
a4431 1
  if (gdbarch->deprecated_init_extra_frame_info == 0)
d4433 1
a4433 1
                    "gdbarch: gdbarch_deprecated_init_extra_frame_info invalid");
d4435 2
a4436 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_init_extra_frame_info called\n");
  gdbarch->deprecated_init_extra_frame_info (fromleaf, frame);
d4440 2
a4441 2
set_gdbarch_deprecated_init_extra_frame_info (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_init_extra_frame_info_ftype deprecated_init_extra_frame_info)
d4443 1
a4443 1
  gdbarch->deprecated_init_extra_frame_info = deprecated_init_extra_frame_info;
@


1.150.2.7
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a68 1
#include "symfile.h"		/* For entry_point_address.  */
d151 1
a151 1
  gdbarch_deprecated_dummy_write_sp_ftype *deprecated_dummy_write_sp;
d192 1
d195 1
d198 2
a199 1
  int deprecated_call_dummy_stack_adjust;
d205 1
a205 1
  gdbarch_deprecated_get_saved_register_ftype *deprecated_get_saved_register;
d216 1
a216 2
  gdbarch_deprecated_push_arguments_ftype *deprecated_push_arguments;
  gdbarch_push_dummy_call_ftype *push_dummy_call;
d218 3
a220 3
  gdbarch_deprecated_push_return_address_ftype *deprecated_push_return_address;
  gdbarch_deprecated_pop_frame_ftype *deprecated_pop_frame;
  gdbarch_deprecated_store_struct_return_ftype *deprecated_store_struct_return;
d242 3
a244 4
  gdbarch_deprecated_frame_chain_ftype *deprecated_frame_chain;
  gdbarch_deprecated_frame_chain_valid_ftype *deprecated_frame_chain_valid;
  gdbarch_deprecated_frame_saved_pc_ftype *deprecated_frame_saved_pc;
  gdbarch_unwind_pc_ftype *unwind_pc;
d247 1
a247 1
  gdbarch_deprecated_saved_pc_after_call_ftype *deprecated_saved_pc_after_call;
d251 1
a251 1
  int deprecated_extra_stack_alignment_needed;
a253 1
  gdbarch_unwind_dummy_id_ftype *unwind_dummy_id;
d358 1
a433 1
  0,
d503 1
d529 4
a532 1
  current_gdbarch->call_dummy_address = entry_point_address;
d534 1
d537 1
d545 1
d561 1
d634 1
a634 1
  /* Skip verify of deprecated_dummy_write_sp, has predicate */
d678 15
a692 1
  /* Skip verify of call_dummy_address, invalid_p == 0 */
d694 3
d699 9
a707 2
  /* Skip verify of deprecated_call_dummy_stack_adjust, has predicate */
  /* Skip verify of fix_call_dummy, has predicate */
d710 1
a710 1
  /* Skip verify of deprecated_get_saved_register, has predicate */
d721 1
a721 2
  /* Skip verify of deprecated_push_arguments, has predicate */
  /* Skip verify of push_dummy_call, has predicate */
d723 5
a727 3
  /* Skip verify of deprecated_push_return_address, has predicate */
  /* Skip verify of deprecated_pop_frame, has predicate */
  /* Skip verify of deprecated_store_struct_return, has predicate */
d757 3
a759 4
  /* Skip verify of deprecated_frame_chain, has predicate */
  /* Skip verify of deprecated_frame_chain_valid, has predicate */
  /* Skip verify of deprecated_frame_saved_pc, has predicate */
  /* Skip verify of unwind_pc, has predicate */
d762 3
a764 1
  /* Skip verify of deprecated_saved_pc_after_call, has predicate */
d770 1
a770 1
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
a772 1
  /* Skip verify of unwind_dummy_id, has predicate */
d961 9
d971 2
a972 2
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET = %ld\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET);
d978 4
a981 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_LENGTH = %d\n",
                      CALL_DUMMY_LENGTH);
d991 25
d1021 1
a1021 1
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET = %ld\n",
a1109 17
#ifdef DEPRECATED_CALL_DUMMY_STACK_ADJUST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_CALL_DUMMY_STACK_ADJUST_P()",
                      XSTRING (DEPRECATED_CALL_DUMMY_STACK_ADJUST_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST_P() = %d\n",
                      DEPRECATED_CALL_DUMMY_STACK_ADJUST_P ());
#endif
#ifdef DEPRECATED_CALL_DUMMY_STACK_ADJUST
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_STACK_ADJUST));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_STACK_ADJUST = %d\n",
                      DEPRECATED_CALL_DUMMY_STACK_ADJUST);
#endif
a1132 23
#ifdef DEPRECATED_DUMMY_WRITE_SP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DUMMY_WRITE_SP_P()",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP_P() = %d\n",
                      DEPRECATED_DUMMY_WRITE_SP_P ());
#endif
#ifdef DEPRECATED_DUMMY_WRITE_SP
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DUMMY_WRITE_SP(val)",
                      XSTRING (DEPRECATED_DUMMY_WRITE_SP (val)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_dummy_write_sp
                        /*DEPRECATED_DUMMY_WRITE_SP ()*/);
#endif
a1166 48
#ifdef DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED # %s\n",
                      XSTRING (DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED = %d\n",
                      DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED);
#endif
#ifdef DEPRECATED_FRAME_CHAIN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN_P()",
                      XSTRING (DEPRECATED_FRAME_CHAIN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_P() = %d\n",
                      DEPRECATED_FRAME_CHAIN_P ());
#endif
#ifdef DEPRECATED_FRAME_CHAIN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN(frame)",
                      XSTRING (DEPRECATED_FRAME_CHAIN (frame)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_CHAIN = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_chain
                        /*DEPRECATED_FRAME_CHAIN ()*/);
#endif
#ifdef DEPRECATED_FRAME_CHAIN_VALID_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN_VALID_P()",
                      XSTRING (DEPRECATED_FRAME_CHAIN_VALID_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID_P() = %d\n",
                      DEPRECATED_FRAME_CHAIN_VALID_P ());
#endif
#ifdef DEPRECATED_FRAME_CHAIN_VALID
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_CHAIN_VALID(chain, thisframe)",
                      XSTRING (DEPRECATED_FRAME_CHAIN_VALID (chain, thisframe)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_chain_valid
                        /*DEPRECATED_FRAME_CHAIN_VALID ()*/);
#endif
a1189 43
#ifdef DEPRECATED_FRAME_SAVED_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_SAVED_PC_P()",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC_P() = %d\n",
                      DEPRECATED_FRAME_SAVED_PC_P ());
#endif
#ifdef DEPRECATED_FRAME_SAVED_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_SAVED_PC(fi)",
                      XSTRING (DEPRECATED_FRAME_SAVED_PC (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_saved_pc
                        /*DEPRECATED_FRAME_SAVED_PC ()*/);
#endif
#ifdef DEPRECATED_GET_SAVED_REGISTER_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_GET_SAVED_REGISTER_P()",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER_P() = %d\n",
                      DEPRECATED_GET_SAVED_REGISTER_P ());
#endif
#ifdef DEPRECATED_GET_SAVED_REGISTER
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval)",
                      XSTRING (DEPRECATED_GET_SAVED_REGISTER (raw_buffer, optimized, addrp, frame, regnum, lval)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_get_saved_register
                        /*DEPRECATED_GET_SAVED_REGISTER ()*/);
#endif
a1306 43
#ifdef DEPRECATED_POP_FRAME_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME_P()",
                      XSTRING (DEPRECATED_POP_FRAME_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_POP_FRAME_P() = %d\n",
                      DEPRECATED_POP_FRAME_P ());
#endif
#ifdef DEPRECATED_POP_FRAME
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_POP_FRAME(-)",
                      XSTRING (DEPRECATED_POP_FRAME (-)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_POP_FRAME = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_pop_frame
                        /*DEPRECATED_POP_FRAME ()*/);
#endif
#ifdef DEPRECATED_PUSH_ARGUMENTS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS_P()",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS_P() = %d\n",
                      DEPRECATED_PUSH_ARGUMENTS_P ());
#endif
#ifdef DEPRECATED_PUSH_ARGUMENTS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr)",
                      XSTRING (DEPRECATED_PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_arguments
                        /*DEPRECATED_PUSH_ARGUMENTS ()*/);
#endif
a1329 40
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS_P()",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS_P() = %d\n",
                      DEPRECATED_PUSH_RETURN_ADDRESS_P ());
#endif
#ifdef DEPRECATED_PUSH_RETURN_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_PUSH_RETURN_ADDRESS(pc, sp)",
                      XSTRING (DEPRECATED_PUSH_RETURN_ADDRESS (pc, sp)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_push_return_address
                        /*DEPRECATED_PUSH_RETURN_ADDRESS ()*/);
#endif
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL_P()",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL_P() = %d\n",
                      DEPRECATED_SAVED_PC_AFTER_CALL_P ());
#endif
#ifdef DEPRECATED_SAVED_PC_AFTER_CALL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVED_PC_AFTER_CALL(frame)",
                      XSTRING (DEPRECATED_SAVED_PC_AFTER_CALL (frame)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_saved_pc_after_call
                        /*DEPRECATED_SAVED_PC_AFTER_CALL ()*/);
#endif
a1343 23
#ifdef DEPRECATED_STORE_STRUCT_RETURN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN_P()",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN_P() = %d\n",
                      DEPRECATED_STORE_STRUCT_RETURN_P ());
#endif
#ifdef DEPRECATED_STORE_STRUCT_RETURN
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_STRUCT_RETURN(addr, sp)",
                      XSTRING (DEPRECATED_STORE_STRUCT_RETURN (addr, sp)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_store_struct_return
                        /*DEPRECATED_STORE_STRUCT_RETURN ()*/);
#endif
d1456 1
a1456 1
#ifdef FIX_CALL_DUMMY_P
d1458 2
a1459 3
                      "gdbarch_dump: %s # %s\n",
                      "FIX_CALL_DUMMY_P()",
                      XSTRING (FIX_CALL_DUMMY_P ()));
d1461 2
a1462 2
                      "gdbarch_dump: FIX_CALL_DUMMY_P() = %d\n",
                      FIX_CALL_DUMMY_P ());
d1524 40
d1586 20
d1634 23
d1810 23
d1883 5
d1890 18
a1907 2
                        "gdbarch_dump: gdbarch_push_dummy_call_p() = %d\n",
                        gdbarch_push_dummy_call_p (current_gdbarch));
d1910 4
a1913 2
                        "gdbarch_dump: push_dummy_call = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_call);
d2131 11
d2221 2
a2222 2
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS = %d\n",
                      SIZEOF_CALL_DUMMY_WORDS);
d2333 14
d2556 8
d2566 4
a2569 14
                        "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                        gdbarch_unwind_dummy_id_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_dummy_id = 0x%08lx\n",
                        (long) current_gdbarch->unwind_dummy_id);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                        gdbarch_unwind_pc_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_pc = 0x%08lx\n",
                        (long) current_gdbarch->unwind_pc);
a2901 7
int
gdbarch_deprecated_dummy_write_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_dummy_write_sp != 0;
}

d2903 1
a2903 1
gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
d2906 1
a2906 1
  if (gdbarch->deprecated_dummy_write_sp == 0)
d2908 1
a2908 1
                    "gdbarch: gdbarch_deprecated_dummy_write_sp invalid");
d2910 2
a2911 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_dummy_write_sp called\n");
  gdbarch->deprecated_dummy_write_sp (val);
d2915 2
a2916 2
set_gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_dummy_write_sp_ftype deprecated_dummy_write_sp)
d2918 1
a2918 1
  gdbarch->deprecated_dummy_write_sp = deprecated_dummy_write_sp;
d3700 3
d3719 3
d3735 19
d3757 3
d3799 19
d3853 1
a3853 1
gdbarch_deprecated_call_dummy_stack_adjust_p (struct gdbarch *gdbarch)
d3856 13
a3868 1
  return gdbarch->deprecated_call_dummy_stack_adjust != 0;
d3872 1
a3872 1
gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch)
d3875 3
d3879 2
a3880 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_stack_adjust called\n");
  return gdbarch->deprecated_call_dummy_stack_adjust;
d3884 2
a3885 8
set_gdbarch_deprecated_call_dummy_stack_adjust (struct gdbarch *gdbarch,
                                                int deprecated_call_dummy_stack_adjust)
{
  gdbarch->deprecated_call_dummy_stack_adjust = deprecated_call_dummy_stack_adjust;
}

int
gdbarch_fix_call_dummy_p (struct gdbarch *gdbarch)
d3887 1
a3887 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->fix_call_dummy != 0;
d3994 1
a3994 1
gdbarch_deprecated_get_saved_register_p (struct gdbarch *gdbarch)
d3997 1
a3997 1
  return gdbarch->deprecated_get_saved_register != 0;
d4001 1
a4001 1
gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR *addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
d4004 1
a4004 1
  if (gdbarch->deprecated_get_saved_register == 0)
d4006 1
a4006 1
                    "gdbarch: gdbarch_deprecated_get_saved_register invalid");
d4008 2
a4009 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_get_saved_register called\n");
  gdbarch->deprecated_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval);
d4013 2
a4014 2
set_gdbarch_deprecated_get_saved_register (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_get_saved_register_ftype deprecated_get_saved_register)
d4016 1
a4016 1
  gdbarch->deprecated_get_saved_register = deprecated_get_saved_register;
a4215 33
int
gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_arguments != 0;
}

CORE_ADDR
gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_push_arguments == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_arguments invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_arguments called\n");
  return gdbarch->deprecated_push_arguments (nargs, args, sp, struct_return, struct_addr);
}

void
set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments)
{
  gdbarch->deprecated_push_arguments = deprecated_push_arguments;
}

int
gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_call != 0;
}

d4217 1
a4217 1
gdbarch_push_dummy_call (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR dummy_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d4220 1
a4220 1
  if (gdbarch->push_dummy_call == 0)
d4222 1
a4222 1
                    "gdbarch: gdbarch_push_dummy_call invalid");
d4224 2
a4225 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_call called\n");
  return gdbarch->push_dummy_call (gdbarch, regcache, dummy_addr, nargs, args, sp, struct_return, struct_addr);
d4229 2
a4230 2
set_gdbarch_push_dummy_call (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_call_ftype push_dummy_call)
d4232 1
a4232 1
  gdbarch->push_dummy_call = push_dummy_call;
d4262 1
a4262 1
gdbarch_deprecated_push_return_address_p (struct gdbarch *gdbarch)
d4265 1
a4265 1
  return gdbarch->deprecated_push_return_address != 0;
d4269 1
a4269 1
gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
d4272 1
a4272 1
  if (gdbarch->deprecated_push_return_address == 0)
d4274 1
a4274 1
                    "gdbarch: gdbarch_deprecated_push_return_address invalid");
d4276 2
a4277 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_return_address called\n");
  return gdbarch->deprecated_push_return_address (pc, sp);
d4281 2
a4282 2
set_gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_push_return_address_ftype deprecated_push_return_address)
d4284 1
a4284 1
  gdbarch->deprecated_push_return_address = deprecated_push_return_address;
d4288 1
a4288 1
gdbarch_deprecated_pop_frame_p (struct gdbarch *gdbarch)
d4291 1
a4291 1
  return gdbarch->deprecated_pop_frame != 0;
d4295 1
a4295 1
gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch)
d4298 1
a4298 1
  if (gdbarch->deprecated_pop_frame == 0)
d4300 1
a4300 1
                    "gdbarch: gdbarch_deprecated_pop_frame invalid");
d4302 2
a4303 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pop_frame called\n");
  gdbarch->deprecated_pop_frame ();
d4307 2
a4308 2
set_gdbarch_deprecated_pop_frame (struct gdbarch *gdbarch,
                                  gdbarch_deprecated_pop_frame_ftype deprecated_pop_frame)
d4310 1
a4310 8
  gdbarch->deprecated_pop_frame = deprecated_pop_frame;
}

int
gdbarch_deprecated_store_struct_return_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_store_struct_return != 0;
d4314 1
a4314 1
gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch, CORE_ADDR addr, CORE_ADDR sp)
d4317 1
a4317 1
  if (gdbarch->deprecated_store_struct_return == 0)
d4319 1
a4319 1
                    "gdbarch: gdbarch_deprecated_store_struct_return invalid");
d4321 2
a4322 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_store_struct_return called\n");
  gdbarch->deprecated_store_struct_return (addr, sp);
d4326 2
a4327 2
set_gdbarch_deprecated_store_struct_return (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_store_struct_return_ftype deprecated_store_struct_return)
d4329 1
a4329 1
  gdbarch->deprecated_store_struct_return = deprecated_store_struct_return;
d4760 1
a4760 1
gdbarch_deprecated_frame_chain_p (struct gdbarch *gdbarch)
d4763 1
a4763 1
  return gdbarch->deprecated_frame_chain != 0;
d4767 1
a4767 1
gdbarch_deprecated_frame_chain (struct gdbarch *gdbarch, struct frame_info *frame)
d4770 1
a4770 1
  if (gdbarch->deprecated_frame_chain == 0)
d4772 1
a4772 1
                    "gdbarch: gdbarch_deprecated_frame_chain invalid");
d4774 2
a4775 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_chain called\n");
  return gdbarch->deprecated_frame_chain (frame);
d4779 2
a4780 8
set_gdbarch_deprecated_frame_chain (struct gdbarch *gdbarch,
                                    gdbarch_deprecated_frame_chain_ftype deprecated_frame_chain)
{
  gdbarch->deprecated_frame_chain = deprecated_frame_chain;
}

int
gdbarch_deprecated_frame_chain_valid_p (struct gdbarch *gdbarch)
d4782 1
a4782 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_chain_valid != 0;
d4786 1
a4786 1
gdbarch_deprecated_frame_chain_valid (struct gdbarch *gdbarch, CORE_ADDR chain, struct frame_info *thisframe)
d4789 1
a4789 13
  if (gdbarch->deprecated_frame_chain_valid == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_frame_chain_valid invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_chain_valid called\n");
  return gdbarch->deprecated_frame_chain_valid (chain, thisframe);
}

void
set_gdbarch_deprecated_frame_chain_valid (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_frame_chain_valid_ftype deprecated_frame_chain_valid)
{
  gdbarch->deprecated_frame_chain_valid = deprecated_frame_chain_valid;
d4793 1
a4793 8
gdbarch_deprecated_frame_saved_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_saved_pc != 0;
}

CORE_ADDR
gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch, struct frame_info *fi)
d4796 1
a4796 1
  if (gdbarch->deprecated_frame_saved_pc == 0)
d4798 1
a4798 1
                    "gdbarch: gdbarch_deprecated_frame_saved_pc invalid");
d4800 2
a4801 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_saved_pc called\n");
  return gdbarch->deprecated_frame_saved_pc (fi);
d4805 2
a4806 2
set_gdbarch_deprecated_frame_saved_pc (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_frame_saved_pc_ftype deprecated_frame_saved_pc)
d4808 1
a4808 1
  gdbarch->deprecated_frame_saved_pc = deprecated_frame_saved_pc;
d4812 1
a4812 1
gdbarch_unwind_pc_p (struct gdbarch *gdbarch)
d4815 1
a4815 1
  return gdbarch->unwind_pc != 0;
d4819 1
a4819 1
gdbarch_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
d4822 1
a4822 1
  if (gdbarch->unwind_pc == 0)
d4824 1
a4824 1
                    "gdbarch: gdbarch_unwind_pc invalid");
d4826 2
a4827 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_pc called\n");
  return gdbarch->unwind_pc (gdbarch, next_frame);
d4831 2
a4832 2
set_gdbarch_unwind_pc (struct gdbarch *gdbarch,
                       gdbarch_unwind_pc_ftype unwind_pc)
d4834 1
a4834 1
  gdbarch->unwind_pc = unwind_pc;
a4874 7
int
gdbarch_deprecated_saved_pc_after_call_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_saved_pc_after_call != 0;
}

d4876 1
a4876 1
gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch, struct frame_info *frame)
d4879 1
a4879 1
  if (gdbarch->deprecated_saved_pc_after_call == 0)
d4881 1
a4881 1
                    "gdbarch: gdbarch_deprecated_saved_pc_after_call invalid");
d4883 2
a4884 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_saved_pc_after_call called\n");
  return gdbarch->deprecated_saved_pc_after_call (frame);
d4888 2
a4889 2
set_gdbarch_deprecated_saved_pc_after_call (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_saved_pc_after_call_ftype deprecated_saved_pc_after_call)
d4891 1
a4891 1
  gdbarch->deprecated_saved_pc_after_call = deprecated_saved_pc_after_call;
d4966 1
a4966 1
gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch)
d4969 1
a4969 1
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
d4971 2
a4972 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extra_stack_alignment_needed called\n");
  return gdbarch->deprecated_extra_stack_alignment_needed;
d4976 2
a4977 2
set_gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch,
                                                     int deprecated_extra_stack_alignment_needed)
d4979 1
a4979 1
  gdbarch->deprecated_extra_stack_alignment_needed = deprecated_extra_stack_alignment_needed;
a5031 26
}

int
gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_dummy_id != 0;
}

struct frame_id
gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->unwind_dummy_id == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_dummy_id invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_dummy_id called\n");
  return gdbarch->unwind_dummy_id (gdbarch, info);
}

void
set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch,
                             gdbarch_unwind_dummy_id_ftype unwind_dummy_id)
{
  gdbarch->unwind_dummy_id = unwind_dummy_id;
@


1.150.2.8
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@d150 1
a150 1
  gdbarch_deprecated_target_read_fp_ftype *deprecated_target_read_fp;
d159 1
a159 1
  int deprecated_fp_regnum;
d502 1
d507 1
a507 1
  current_gdbarch->deprecated_fp_regnum = -1;
d625 1
a625 1
  /* Skip verify of deprecated_target_read_fp, has predicate */
d636 1
a636 1
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
a1147 8
#ifdef DEPRECATED_FP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FP_REGNUM # %s\n",
                      XSTRING (DEPRECATED_FP_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FP_REGNUM = %d\n",
                      DEPRECATED_FP_REGNUM);
#endif
a1513 20
#ifdef DEPRECATED_TARGET_READ_FP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP_P()",
                      XSTRING (DEPRECATED_TARGET_READ_FP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_TARGET_READ_FP_P() = %d\n",
                      DEPRECATED_TARGET_READ_FP_P ());
#endif
#ifdef DEPRECATED_TARGET_READ_FP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_TARGET_READ_FP()",
                      XSTRING (DEPRECATED_TARGET_READ_FP ()));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_TARGET_READ_FP = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_target_read_fp
                        /*DEPRECATED_TARGET_READ_FP ()*/);
#endif
d1657 8
d2504 11
a2882 7
int
gdbarch_deprecated_target_read_fp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_target_read_fp != 0;
}

d2884 1
a2884 1
gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch)
d2887 1
a2887 1
  if (gdbarch->deprecated_target_read_fp == 0)
d2889 1
a2889 1
                    "gdbarch: gdbarch_deprecated_target_read_fp invalid");
d2891 2
a2892 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_target_read_fp called\n");
  return gdbarch->deprecated_target_read_fp ();
d2896 2
a2897 2
set_gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_target_read_fp_ftype deprecated_target_read_fp)
d2899 1
a2899 1
  gdbarch->deprecated_target_read_fp = deprecated_target_read_fp;
d3072 1
a3072 1
gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch)
d3075 1
a3075 1
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
d3077 2
a3078 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fp_regnum called\n");
  return gdbarch->deprecated_fp_regnum;
d3082 2
a3083 2
set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,
                                  int deprecated_fp_regnum)
d3085 1
a3085 1
  gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;
d6206 3
a6208 1
int (*deprecated_tm_print_insn) (bfd_vma, disassemble_info *);
d6216 6
@


1.150.2.9
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d170 2
a171 2
  int deprecated_register_size;
  int deprecated_register_bytes;
d191 3
a193 3
  CORE_ADDR deprecated_call_dummy_start_offset;
  CORE_ADDR deprecated_call_dummy_breakpoint_offset;
  int deprecated_call_dummy_length;
d195 2
a196 2
  LONGEST * deprecated_call_dummy_words;
  int deprecated_sizeof_call_dummy_words;
d198 1
a198 2
  gdbarch_deprecated_fix_call_dummy_ftype *deprecated_fix_call_dummy;
  gdbarch_push_dummy_code_ftype *push_dummy_code;
a403 1
  generic_remote_translate_xfer_address,
d517 2
d530 2
a531 2
  current_gdbarch->deprecated_call_dummy_words = legacy_call_dummy_words;
  current_gdbarch->deprecated_sizeof_call_dummy_words = legacy_sizeof_call_dummy_words;
d543 1
d646 7
a652 1
  /* Skip verify of register_byte, has predicate */
d672 2
a673 2
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
d675 1
a675 2
  /* Skip verify of deprecated_fix_call_dummy, has predicate */
  /* Skip verify of push_dummy_code, has predicate */
d709 1
a709 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->breakpoint_from_pc == 0))
    fprintf_unfiltered (log, "\n\tbreakpoint_from_pc");
d924 16
d948 16
a1041 16
#ifdef DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET);
#endif
#ifdef DEPRECATED_CALL_DUMMY_LENGTH
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_LENGTH));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_LENGTH = %d\n",
                      DEPRECATED_CALL_DUMMY_LENGTH);
#endif
a1058 16
#ifdef DEPRECATED_CALL_DUMMY_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_START_OFFSET));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_START_OFFSET = %ld\n",
                      (long) DEPRECATED_CALL_DUMMY_START_OFFSET);
#endif
#ifdef DEPRECATED_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) DEPRECATED_CALL_DUMMY_WORDS);
#endif
a1146 23
#ifdef DEPRECATED_FIX_CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FIX_CALL_DUMMY_P()",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY_P() = %d\n",
                      DEPRECATED_FIX_CALL_DUMMY_P ());
#endif
#ifdef DEPRECATED_FIX_CALL_DUMMY
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FIX_CALL_DUMMY(dummy, pc, fun, nargs, args, type, gcc_p)",
                      XSTRING (DEPRECATED_FIX_CALL_DUMMY (dummy, pc, fun, nargs, args, type, gcc_p)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_fix_call_dummy
                        /*DEPRECATED_FIX_CALL_DUMMY ()*/);
#endif
a1463 16
#ifdef DEPRECATED_REGISTER_BYTES
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES # %s\n",
                      XSTRING (DEPRECATED_REGISTER_BYTES));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTES = %d\n",
                      DEPRECATED_REGISTER_BYTES);
#endif
#ifdef DEPRECATED_REGISTER_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE # %s\n",
                      XSTRING (DEPRECATED_REGISTER_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_SIZE = %d\n",
                      DEPRECATED_REGISTER_SIZE);
#endif
a1483 8
#ifdef DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (DEPRECATED_SIZEOF_CALL_DUMMY_WORDS));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SIZEOF_CALL_DUMMY_WORDS = %d\n",
                      DEPRECATED_SIZEOF_CALL_DUMMY_WORDS);
#endif
d1653 23
a1974 17
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_push_dummy_code_p() = %d\n",
                        gdbarch_push_dummy_code_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: push_dummy_code = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_code);
#ifdef REGISTER_BYTE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTE_P()",
                      XSTRING (REGISTER_BYTE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTE_P() = %d\n",
                      REGISTER_BYTE_P ());
#endif
d1986 8
d2086 8
d2167 8
d2177 4
a2180 2
                        "gdbarch_dump: remote_translate_xfer_address = 0x%08lx\n",
                        (long) current_gdbarch->remote_translate_xfer_address);
d2266 8
d3286 1
a3286 1
gdbarch_deprecated_register_size (struct gdbarch *gdbarch)
d3289 3
d3293 2
a3294 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_size called\n");
  return gdbarch->deprecated_register_size;
d3298 2
a3299 2
set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch,
                                      int deprecated_register_size)
d3301 1
a3301 1
  gdbarch->deprecated_register_size = deprecated_register_size;
d3305 1
a3305 1
gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch)
d3308 3
d3312 2
a3313 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_bytes called\n");
  return gdbarch->deprecated_register_bytes;
d3317 2
a3318 2
set_gdbarch_deprecated_register_bytes (struct gdbarch *gdbarch,
                                       int deprecated_register_bytes)
d3320 1
a3320 8
  gdbarch->deprecated_register_bytes = deprecated_register_bytes;
}

int
gdbarch_register_byte_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_byte != generic_register_byte;
a3329 1
  /* Ignore predicate (gdbarch->register_byte != generic_register_byte).  */
d3738 1
a3738 1
gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch)
d3742 2
a3743 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_start_offset called\n");
  return gdbarch->deprecated_call_dummy_start_offset;
d3747 2
a3748 2
set_gdbarch_deprecated_call_dummy_start_offset (struct gdbarch *gdbarch,
                                                CORE_ADDR deprecated_call_dummy_start_offset)
d3750 1
a3750 1
  gdbarch->deprecated_call_dummy_start_offset = deprecated_call_dummy_start_offset;
d3754 1
a3754 1
gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch)
d3758 2
a3759 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_breakpoint_offset called\n");
  return gdbarch->deprecated_call_dummy_breakpoint_offset;
d3763 2
a3764 2
set_gdbarch_deprecated_call_dummy_breakpoint_offset (struct gdbarch *gdbarch,
                                                     CORE_ADDR deprecated_call_dummy_breakpoint_offset)
d3766 1
a3766 1
  gdbarch->deprecated_call_dummy_breakpoint_offset = deprecated_call_dummy_breakpoint_offset;
d3770 1
a3770 1
gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch)
d3774 2
a3775 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_length called\n");
  return gdbarch->deprecated_call_dummy_length;
d3779 2
a3780 2
set_gdbarch_deprecated_call_dummy_length (struct gdbarch *gdbarch,
                                          int deprecated_call_dummy_length)
d3782 1
a3782 1
  gdbarch->deprecated_call_dummy_length = deprecated_call_dummy_length;
d3813 1
a3813 1
gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch)
d3816 1
a3816 1
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
d3818 2
a3819 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_words called\n");
  return gdbarch->deprecated_call_dummy_words;
d3823 2
a3824 2
set_gdbarch_deprecated_call_dummy_words (struct gdbarch *gdbarch,
                                         LONGEST * deprecated_call_dummy_words)
d3826 1
a3826 1
  gdbarch->deprecated_call_dummy_words = deprecated_call_dummy_words;
d3830 1
a3830 1
gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch)
d3833 1
a3833 1
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
d3835 2
a3836 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_sizeof_call_dummy_words called\n");
  return gdbarch->deprecated_sizeof_call_dummy_words;
d3840 2
a3841 2
set_gdbarch_deprecated_sizeof_call_dummy_words (struct gdbarch *gdbarch,
                                                int deprecated_sizeof_call_dummy_words)
d3843 1
a3843 1
  gdbarch->deprecated_sizeof_call_dummy_words = deprecated_sizeof_call_dummy_words;
d3870 1
a3870 8
gdbarch_deprecated_fix_call_dummy_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_fix_call_dummy != 0;
}

void
gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch, char *dummy, CORE_ADDR pc, CORE_ADDR fun, int nargs, struct value **args, struct type *type, int gcc_p)
d3873 1
a3873 6
  if (gdbarch->deprecated_fix_call_dummy == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_fix_call_dummy invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fix_call_dummy called\n");
  gdbarch->deprecated_fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
d3877 1
a3877 15
set_gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_fix_call_dummy_ftype deprecated_fix_call_dummy)
{
  gdbarch->deprecated_fix_call_dummy = deprecated_fix_call_dummy;
}

int
gdbarch_push_dummy_code_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_code != 0;
}

CORE_ADDR
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr)
d3880 1
a3880 1
  if (gdbarch->push_dummy_code == 0)
d3882 1
a3882 1
                    "gdbarch: gdbarch_push_dummy_code invalid");
d3884 2
a3885 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_code called\n");
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, using_gcc, args, nargs, value_type, real_pc, bp_addr);
d3889 2
a3890 2
set_gdbarch_push_dummy_code (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_code_ftype push_dummy_code)
d3892 1
a3892 1
  gdbarch->push_dummy_code = push_dummy_code;
d4729 1
a4729 1
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len)
d4737 1
a4737 1
  gdbarch->remote_translate_xfer_address (gdbarch, regcache, gdb_addr, gdb_len, rem_addr, rem_len);
@


1.150.2.10
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d150 1
d152 1
d159 1
d170 1
a170 2
  gdbarch_register_type_ftype *register_type;
  gdbarch_deprecated_register_virtual_type_ftype *deprecated_register_virtual_type;
d172 2
a173 3
  gdbarch_deprecated_register_byte_ftype *deprecated_register_byte;
  gdbarch_deprecated_register_raw_size_ftype *deprecated_register_raw_size;
  gdbarch_deprecated_register_virtual_size_ftype *deprecated_register_virtual_size;
d175 1
d177 11
a187 6
  gdbarch_unwind_dummy_id_ftype *unwind_dummy_id;
  gdbarch_deprecated_save_dummy_frame_tos_ftype *deprecated_save_dummy_frame_tos;
  int deprecated_fp_regnum;
  gdbarch_deprecated_target_read_fp_ftype *deprecated_target_read_fp;
  gdbarch_push_dummy_call_ftype *push_dummy_call;
  gdbarch_deprecated_push_arguments_ftype *deprecated_push_arguments;
a188 3
  gdbarch_deprecated_push_return_address_ftype *deprecated_push_return_address;
  gdbarch_deprecated_dummy_write_sp_ftype *deprecated_dummy_write_sp;
  int deprecated_register_size;
d194 1
a199 12
  gdbarch_deprecated_push_dummy_frame_ftype *deprecated_push_dummy_frame;
  int deprecated_extra_stack_alignment_needed;
  gdbarch_deprecated_do_registers_info_ftype *deprecated_do_registers_info;
  gdbarch_print_registers_info_ftype *print_registers_info;
  gdbarch_print_float_info_ftype *print_float_info;
  gdbarch_print_vector_info_ftype *print_vector_info;
  gdbarch_register_sim_regno_ftype *register_sim_regno;
  gdbarch_register_bytes_ok_ftype *register_bytes_ok;
  gdbarch_cannot_fetch_register_ftype *cannot_fetch_register;
  gdbarch_cannot_store_register_ftype *cannot_store_register;
  gdbarch_get_longjmp_target_ftype *get_longjmp_target;
  gdbarch_deprecated_pc_in_call_dummy_ftype *deprecated_pc_in_call_dummy;
d205 3
a207 3
  gdbarch_deprecated_register_convertible_ftype *deprecated_register_convertible;
  gdbarch_deprecated_register_convert_to_virtual_ftype *deprecated_register_convert_to_virtual;
  gdbarch_deprecated_register_convert_to_raw_ftype *deprecated_register_convert_to_raw;
d215 4
d237 1
d246 2
a247 3
  gdbarch_unwind_sp_ftype *unwind_sp;
  gdbarch_deprecated_frame_args_address_ftype *deprecated_frame_args_address;
  gdbarch_deprecated_frame_locals_address_ftype *deprecated_frame_locals_address;
d252 1
d254 2
a282 1
  gdbarch_fetch_pointer_argument_ftype *fetch_pointer_argument;
d295 3
a297 3
  &bfd_default_arch_struct,  /* bfd_arch_info */
  BFD_ENDIAN_BIG,  /* byte_order */
  GDB_OSABI_UNKNOWN,  /* osabi */
d303 146
a448 147
  8 * sizeof (short),  /* short_bit */
  8 * sizeof (int),  /* int_bit */
  8 * sizeof (long),  /* long_bit */
  8 * sizeof (LONGEST),  /* long_long_bit */
  8 * sizeof (float),  /* float_bit */
  8 * sizeof (double),  /* double_bit */
  8 * sizeof (long double),  /* long_double_bit */
  8 * sizeof (void*),  /* ptr_bit */
  8 * sizeof (void*),  /* addr_bit */
  8 * sizeof (void*),  /* bfd_vma_bit */
  1,  /* char_signed */
  0,  /* read_pc */
  0,  /* write_pc */
  0,  /* read_sp */
  0,  /* virtual_frame_pointer */
  0,  /* pseudo_register_read */
  0,  /* pseudo_register_write */
  0,  /* num_regs */
  0,  /* num_pseudo_regs */
  -1,  /* sp_regnum */
  -1,  /* pc_regnum */
  -1,  /* ps_regnum */
  0,  /* fp0_regnum */
  0,  /* npc_regnum */
  0,  /* stab_reg_to_regnum */
  0,  /* ecoff_reg_to_regnum */
  0,  /* dwarf_reg_to_regnum */
  0,  /* sdb_reg_to_regnum */
  0,  /* dwarf2_reg_to_regnum */
  0,  /* register_name */
  0,  /* register_type */
  0,  /* deprecated_register_virtual_type */
  0,  /* deprecated_register_bytes */
  generic_register_byte,  /* deprecated_register_byte */
  generic_register_size,  /* deprecated_register_raw_size */
  generic_register_size,  /* deprecated_register_virtual_size */
  0,  /* deprecated_max_register_raw_size */
  0,  /* deprecated_max_register_virtual_size */
  0,  /* unwind_dummy_id */
  0,  /* deprecated_save_dummy_frame_tos */
  -1,  /* deprecated_fp_regnum */
  0,  /* deprecated_target_read_fp */
  0,  /* push_dummy_call */
  0,  /* deprecated_push_arguments */
  0,  /* deprecated_use_generic_dummy_frames */
  0,  /* deprecated_push_return_address */
  0,  /* deprecated_dummy_write_sp */
  0,  /* deprecated_register_size */
  0,  /* call_dummy_location */
  0,  /* call_dummy_address */
  0,  /* deprecated_call_dummy_start_offset */
  0,  /* deprecated_call_dummy_breakpoint_offset */
  0,  /* deprecated_call_dummy_length */
  0,  /* deprecated_call_dummy_words */
  0,  /* deprecated_sizeof_call_dummy_words */
  0,  /* deprecated_call_dummy_stack_adjust */
  0,  /* deprecated_fix_call_dummy */
  0,  /* push_dummy_code */
  0,  /* deprecated_push_dummy_frame */
  0,  /* deprecated_extra_stack_alignment_needed */
  0,  /* deprecated_do_registers_info */
  default_print_registers_info,  /* print_registers_info */
  0,  /* print_float_info */
  0,  /* print_vector_info */
  0,  /* register_sim_regno */
  0,  /* register_bytes_ok */
  0,  /* cannot_fetch_register */
  0,  /* cannot_store_register */
  0,  /* get_longjmp_target */
  generic_pc_in_call_dummy,  /* deprecated_pc_in_call_dummy */
  0,  /* deprecated_init_frame_pc_first */
  0,  /* deprecated_init_frame_pc */
  0,  /* believe_pcc_promotion */
  0,  /* believe_pcc_promotion_type */
  0,  /* deprecated_get_saved_register */
  0,  /* deprecated_register_convertible */
  0,  /* deprecated_register_convert_to_virtual */
  0,  /* deprecated_register_convert_to_raw */
  0,  /* convert_register_p */
  0,  /* register_to_value */
  0,  /* value_to_register */
  0,  /* pointer_to_address */
  0,  /* address_to_pointer */
  0,  /* integer_to_address */
  0,  /* return_value_on_stack */
  0,  /* deprecated_pop_frame */
  0,  /* deprecated_store_struct_return */
  0,  /* extract_return_value */
  0,  /* store_return_value */
  0,  /* deprecated_extract_return_value */
  0,  /* deprecated_store_return_value */
  0,  /* extract_struct_value_address */
  0,  /* deprecated_extract_struct_value_address */
  0,  /* use_struct_convention */
  0,  /* deprecated_frame_init_saved_regs */
  0,  /* deprecated_init_extra_frame_info */
  0,  /* skip_prologue */
  0,  /* prologue_frameless_p */
  0,  /* inner_than */
  0,  /* breakpoint_from_pc */
  0,  /* memory_insert_breakpoint */
  0,  /* memory_remove_breakpoint */
  0,  /* decr_pc_after_break */
  0,  /* function_start_offset */
  generic_remote_translate_xfer_address,  /* remote_translate_xfer_address */
  0,  /* frame_args_skip */
  0,  /* frameless_function_invocation */
  0,  /* deprecated_frame_chain */
  0,  /* deprecated_frame_chain_valid */
  0,  /* deprecated_frame_saved_pc */
  0,  /* unwind_pc */
  0,  /* unwind_sp */
  get_frame_base,  /* deprecated_frame_args_address */
  get_frame_base,  /* deprecated_frame_locals_address */
  0,  /* deprecated_saved_pc_after_call */
  0,  /* frame_num_args */
  0,  /* stack_align */
  0,  /* frame_align */
  0,  /* reg_struct_has_addr */
  0,  /* parm_boundary */
  0,  /* float_format */
  0,  /* double_format */
  0,  /* long_double_format */
  0,  /* convert_from_func_ptr_addr */
  0,  /* addr_bits_remove */
  0,  /* smash_text_address */
  0,  /* software_single_step */
  0,  /* print_insn */
  0,  /* skip_trampoline_code */
  0,  /* in_solib_call_trampoline */
  0,  /* in_solib_return_trampoline */
  0,  /* pc_in_sigtramp */
  0,  /* sigtramp_start */
  0,  /* sigtramp_end */
  generic_in_function_epilogue_p,  /* in_function_epilogue_p */
  construct_inferior_arguments,  /* construct_inferior_arguments */
  0,  /* dwarf2_build_frame_info */
  0,  /* elf_make_msymbol_special */
  0,  /* coff_make_msymbol_special */
  "malloc",  /* name_of_malloc */
  0,  /* cannot_step_breakpoint */
  0,  /* have_nonsteppable_watchpoint */
  0,  /* address_class_type_flags */
  0,  /* address_class_type_flags_to_name */
  0,  /* address_class_name_to_type_flags */
  default_register_reggroup_p,  /* register_reggroup_p */
  0,  /* fetch_pointer_argument */
d502 1
d504 1
d508 1
d519 7
a525 4
  current_gdbarch->deprecated_register_byte = generic_register_byte;
  current_gdbarch->deprecated_register_raw_size = generic_register_size;
  current_gdbarch->deprecated_register_virtual_size = generic_register_size;
  current_gdbarch->deprecated_fp_regnum = -1;
d529 1
d532 1
a532 6
  current_gdbarch->print_registers_info = default_print_registers_info;
  current_gdbarch->register_sim_regno = legacy_register_sim_regno;
  current_gdbarch->cannot_fetch_register = cannot_register_not;
  current_gdbarch->cannot_store_register = cannot_register_not;
  current_gdbarch->deprecated_pc_in_call_dummy = generic_pc_in_call_dummy;
  current_gdbarch->deprecated_register_convertible = deprecated_register_convertible_not;
d546 1
d551 2
a552 2
  current_gdbarch->deprecated_frame_args_address = get_frame_base;
  current_gdbarch->deprecated_frame_locals_address = get_frame_base;
d621 1
a621 1
  /* Skip verify of read_pc, has predicate */
d623 3
a625 1
  /* Skip verify of read_sp, has predicate */
d634 1
d645 2
a646 5
  /* Skip verify of register_type, has predicate */
  /* Skip verify of deprecated_register_virtual_type, has predicate */
  /* Skip verify of deprecated_register_byte, has predicate */
  /* Skip verify of deprecated_register_raw_size, invalid_p == 0 */
  /* Skip verify of deprecated_register_virtual_size, invalid_p == 0 */
d648 1
d650 2
a651 18
  /* Skip verify of unwind_dummy_id, has predicate */
  /* Skip verify of deprecated_save_dummy_frame_tos, has predicate */
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
  /* Skip verify of deprecated_target_read_fp, has predicate */
  /* Skip verify of push_dummy_call, has predicate */
  /* Skip verify of deprecated_push_arguments, has predicate */
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
  /* Skip verify of deprecated_push_return_address, has predicate */
  /* Skip verify of deprecated_dummy_write_sp, has predicate */
  /* Skip verify of call_dummy_location, invalid_p == 0 */
  /* Skip verify of call_dummy_address, invalid_p == 0 */
  /* Skip verify of deprecated_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_sizeof_call_dummy_words, invalid_p == 0 */
  /* Skip verify of deprecated_call_dummy_stack_adjust, has predicate */
  /* Skip verify of deprecated_fix_call_dummy, has predicate */
  /* Skip verify of push_dummy_code, has predicate */
  /* Skip verify of deprecated_push_dummy_frame, has predicate */
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
d661 3
d665 5
d673 3
a675 3
  /* Skip verify of deprecated_register_convertible, invalid_p == 0 */
  /* Skip verify of deprecated_register_convert_to_virtual, invalid_p == 0 */
  /* Skip verify of deprecated_register_convert_to_raw, invalid_p == 0 */
d683 4
d711 1
d724 2
a725 3
  /* Skip verify of unwind_sp, has predicate */
  /* Skip verify of deprecated_frame_args_address, has predicate */
  /* Skip verify of deprecated_frame_locals_address, has predicate */
d727 3
a729 1
  /* Skip verify of frame_num_args, has predicate */
d732 1
d734 2
a764 1
  /* Skip verify of fetch_pointer_argument, has predicate */
d990 2
a991 2
                      "CONVERT_REGISTER_P(regnum, type)",
                      XSTRING (CONVERT_REGISTER_P (regnum, type)));
a1173 20
#ifdef DEPRECATED_FRAME_ARGS_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_ARGS_ADDRESS_P()",
                      XSTRING (DEPRECATED_FRAME_ARGS_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS_P() = %d\n",
                      DEPRECATED_FRAME_ARGS_ADDRESS_P ());
#endif
#ifdef DEPRECATED_FRAME_ARGS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_ARGS_ADDRESS(fi)",
                      XSTRING (DEPRECATED_FRAME_ARGS_ADDRESS (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_args_address
                        /*DEPRECATED_FRAME_ARGS_ADDRESS ()*/);
#endif
a1236 20
#ifdef DEPRECATED_FRAME_LOCALS_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_LOCALS_ADDRESS_P()",
                      XSTRING (DEPRECATED_FRAME_LOCALS_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS_P() = %d\n",
                      DEPRECATED_FRAME_LOCALS_ADDRESS_P ());
#endif
#ifdef DEPRECATED_FRAME_LOCALS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_FRAME_LOCALS_ADDRESS(fi)",
                      XSTRING (DEPRECATED_FRAME_LOCALS_ADDRESS (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_frame_locals_address
                        /*DEPRECATED_FRAME_LOCALS_ADDRESS ()*/);
#endif
a1490 39
#ifdef DEPRECATED_REGISTER_CONVERTIBLE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERTIBLE(nr)",
                      XSTRING (DEPRECATED_REGISTER_CONVERTIBLE (nr)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_REGISTER_CONVERTIBLE = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_convertible
                        /*DEPRECATED_REGISTER_CONVERTIBLE ()*/);
#endif
#ifdef DEPRECATED_REGISTER_CONVERT_TO_RAW
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERT_TO_RAW(type, regnum, from, to)",
                      XSTRING (DEPRECATED_REGISTER_CONVERT_TO_RAW (type, regnum, from, to)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_RAW = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_convert_to_raw
                        /*DEPRECATED_REGISTER_CONVERT_TO_RAW ()*/);
#endif
#ifdef DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL(regnum, type, from, to)",
                      XSTRING (DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (regnum, type, from, to)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_register_convert_to_virtual
                        /*DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL ()*/);
#endif
a1518 23
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS_P()",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS_P() = %d\n",
                      DEPRECATED_SAVE_DUMMY_FRAME_TOS_P ());
#endif
#ifdef DEPRECATED_SAVE_DUMMY_FRAME_TOS
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_SAVE_DUMMY_FRAME_TOS(sp)",
                      XSTRING (DEPRECATED_SAVE_DUMMY_FRAME_TOS (sp)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
                        (long) current_gdbarch->deprecated_save_dummy_frame_tos
                        /*DEPRECATED_SAVE_DUMMY_FRAME_TOS ()*/);
#endif
a1695 20
#ifdef FETCH_POINTER_ARGUMENT_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT_P()",
                      XSTRING (FETCH_POINTER_ARGUMENT_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FETCH_POINTER_ARGUMENT_P() = %d\n",
                      FETCH_POINTER_ARGUMENT_P ());
#endif
#ifdef FETCH_POINTER_ARGUMENT
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_POINTER_ARGUMENT(frame, argi, type)",
                      XSTRING (FETCH_POINTER_ARGUMENT (frame, argi, type)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FETCH_POINTER_ARGUMENT = <0x%08lx>\n",
                        (long) current_gdbarch->fetch_pointer_argument
                        /*FETCH_POINTER_ARGUMENT ()*/);
#endif
d1715 11
d1734 1
a1734 1
#ifdef FRAME_NUM_ARGS_P
d1737 7
a1743 5
                      "FRAME_NUM_ARGS_P()",
                      XSTRING (FRAME_NUM_ARGS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_NUM_ARGS_P() = %d\n",
                      FRAME_NUM_ARGS_P ());
d1937 11
d2020 1
a2020 1
                        (long) current_gdbarch->deprecated_register_byte
d2043 39
d2101 1
a2101 1
                        (long) current_gdbarch->deprecated_register_raw_size
d2120 2
a2121 2
                      "REGISTER_TO_VALUE(frame, regnum, type, buf)",
                      XSTRING (REGISTER_TO_VALUE (frame, regnum, type, buf)));
d2145 1
a2145 1
                        (long) current_gdbarch->deprecated_register_virtual_size
d2165 1
a2165 1
                        (long) current_gdbarch->deprecated_register_virtual_type
d2203 23
a2525 9
#ifdef TARGET_READ_PC_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC_P()",
                      XSTRING (TARGET_READ_PC_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_PC_P() = %d\n",
                      TARGET_READ_PC_P ());
#endif
a2536 9
#ifdef TARGET_READ_SP_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_SP_P()",
                      XSTRING (TARGET_READ_SP_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_SP_P() = %d\n",
                      TARGET_READ_SP_P ());
#endif
a2599 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: gdbarch_unwind_sp_p() = %d\n",
                        gdbarch_unwind_sp_p (current_gdbarch));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: unwind_sp = 0x%08lx\n",
                        (long) current_gdbarch->unwind_sp);
d2616 2
a2617 2
                      "VALUE_TO_REGISTER(frame, regnum, type, buf)",
                      XSTRING (VALUE_TO_REGISTER (frame, regnum, type, buf)));
a2855 7
int
gdbarch_read_pc_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->read_pc != 0;
}

d2895 1
a2895 1
gdbarch_read_sp_p (struct gdbarch *gdbarch)
d2898 1
a2898 1
  return gdbarch->read_sp != 0;
d2902 1
a2902 1
gdbarch_read_sp (struct gdbarch *gdbarch)
d2905 1
a2905 1
  if (gdbarch->read_sp == 0)
d2907 1
a2907 1
                    "gdbarch: gdbarch_read_sp invalid");
d2909 2
a2910 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_sp called\n");
  return gdbarch->read_sp ();
d2914 2
a2915 2
set_gdbarch_read_sp (struct gdbarch *gdbarch,
                     gdbarch_read_sp_ftype read_sp)
d2917 1
a2917 1
  gdbarch->read_sp = read_sp;
d2920 2
a2921 2
void
gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch, CORE_ADDR pc, int *frame_regnum, LONGEST *frame_offset)
d2924 1
a2924 1
  if (gdbarch->virtual_frame_pointer == 0)
d2926 1
a2926 1
                    "gdbarch: gdbarch_virtual_frame_pointer invalid");
d2928 2
a2929 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_virtual_frame_pointer called\n");
  gdbarch->virtual_frame_pointer (pc, frame_regnum, frame_offset);
d2933 2
a2934 2
set_gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch,
                                   gdbarch_virtual_frame_pointer_ftype virtual_frame_pointer)
d2936 1
a2936 1
  gdbarch->virtual_frame_pointer = virtual_frame_pointer;
d2940 1
a2940 1
gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch)
d2943 1
a2943 1
  return gdbarch->pseudo_register_read != 0;
d2947 46
a2992 1
gdbarch_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, void *buf)
d3090 17
d3289 1
a3289 1
gdbarch_register_type_p (struct gdbarch *gdbarch)
a3291 10
  return gdbarch->register_type != 0;
}

struct type *
gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->register_type == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_type invalid");
d3293 2
a3294 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_type called\n");
  return gdbarch->register_type (gdbarch, reg_nr);
d3298 2
a3299 2
set_gdbarch_register_type (struct gdbarch *gdbarch,
                           gdbarch_register_type_ftype register_type)
d3301 1
a3301 27
  gdbarch->register_type = register_type;
}

int
gdbarch_deprecated_register_virtual_type_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_virtual_type != 0;
}

struct type *
gdbarch_deprecated_register_virtual_type (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_register_virtual_type == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_virtual_type invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_virtual_type called\n");
  return gdbarch->deprecated_register_virtual_type (reg_nr);
}

void
set_gdbarch_deprecated_register_virtual_type (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_register_virtual_type_ftype deprecated_register_virtual_type)
{
  gdbarch->deprecated_register_virtual_type = deprecated_register_virtual_type;
d3321 1
a3321 8
gdbarch_deprecated_register_byte_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_byte != generic_register_byte;
}

int
gdbarch_deprecated_register_byte (struct gdbarch *gdbarch, int reg_nr)
d3324 1
a3324 14
  if (gdbarch->deprecated_register_byte == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_register_byte invalid");
  /* Ignore predicate (gdbarch->deprecated_register_byte != generic_register_byte).  */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_byte called\n");
  return gdbarch->deprecated_register_byte (reg_nr);
}

void
set_gdbarch_deprecated_register_byte (struct gdbarch *gdbarch,
                                      gdbarch_deprecated_register_byte_ftype deprecated_register_byte)
{
  gdbarch->deprecated_register_byte = deprecated_register_byte;
d3328 1
a3328 1
gdbarch_deprecated_register_raw_size (struct gdbarch *gdbarch, int reg_nr)
d3331 1
a3331 1
  if (gdbarch->deprecated_register_raw_size == 0)
d3333 2
a3334 1
                    "gdbarch: gdbarch_deprecated_register_raw_size invalid");
d3336 2
a3337 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_raw_size called\n");
  return gdbarch->deprecated_register_raw_size (reg_nr);
d3341 2
a3342 2
set_gdbarch_deprecated_register_raw_size (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_register_raw_size_ftype deprecated_register_raw_size)
d3344 1
a3344 1
  gdbarch->deprecated_register_raw_size = deprecated_register_raw_size;
d3348 1
a3348 1
gdbarch_deprecated_register_virtual_size (struct gdbarch *gdbarch, int reg_nr)
d3351 1
a3351 1
  if (gdbarch->deprecated_register_virtual_size == 0)
d3353 1
a3353 1
                    "gdbarch: gdbarch_deprecated_register_virtual_size invalid");
d3355 2
a3356 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_virtual_size called\n");
  return gdbarch->deprecated_register_virtual_size (reg_nr);
d3360 2
a3361 2
set_gdbarch_deprecated_register_virtual_size (struct gdbarch *gdbarch,
                                              gdbarch_deprecated_register_virtual_size_ftype deprecated_register_virtual_size)
d3363 1
a3363 1
  gdbarch->deprecated_register_virtual_size = deprecated_register_virtual_size;
d3390 19
d3432 1
a3432 1
gdbarch_unwind_dummy_id_p (struct gdbarch *gdbarch)
d3435 1
a3435 1
  return gdbarch->unwind_dummy_id != 0;
d3438 2
a3439 2
struct frame_id
gdbarch_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *info)
d3442 1
a3442 1
  if (gdbarch->unwind_dummy_id == 0)
d3444 1
a3444 1
                    "gdbarch: gdbarch_unwind_dummy_id invalid");
d3446 2
a3447 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_dummy_id called\n");
  return gdbarch->unwind_dummy_id (gdbarch, info);
d3451 2
a3452 2
set_gdbarch_unwind_dummy_id (struct gdbarch *gdbarch,
                             gdbarch_unwind_dummy_id_ftype unwind_dummy_id)
d3454 1
a3454 1
  gdbarch->unwind_dummy_id = unwind_dummy_id;
d3458 1
a3458 1
gdbarch_deprecated_save_dummy_frame_tos_p (struct gdbarch *gdbarch)
d3461 1
a3461 1
  return gdbarch->deprecated_save_dummy_frame_tos != 0;
d3464 2
a3465 2
void
gdbarch_deprecated_save_dummy_frame_tos (struct gdbarch *gdbarch, CORE_ADDR sp)
d3468 1
a3468 1
  if (gdbarch->deprecated_save_dummy_frame_tos == 0)
d3470 1
a3470 1
                    "gdbarch: gdbarch_deprecated_save_dummy_frame_tos invalid");
d3472 2
a3473 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_save_dummy_frame_tos called\n");
  gdbarch->deprecated_save_dummy_frame_tos (sp);
d3477 2
a3478 2
set_gdbarch_deprecated_save_dummy_frame_tos (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_save_dummy_frame_tos_ftype deprecated_save_dummy_frame_tos)
d3480 1
a3480 1
  gdbarch->deprecated_save_dummy_frame_tos = deprecated_save_dummy_frame_tos;
d3484 1
a3484 1
gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch)
d3487 1
a3487 4
  /* Skip verify of deprecated_fp_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fp_regnum called\n");
  return gdbarch->deprecated_fp_regnum;
d3491 1
a3491 2
set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,
                                  int deprecated_fp_regnum)
d3493 7
a3499 1
  gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;
d3502 3
a3504 2
int
gdbarch_deprecated_target_read_fp_p (struct gdbarch *gdbarch)
d3506 1
a3506 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_target_read_fp != 0;
d3509 2
a3510 2
CORE_ADDR
gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch)
d3513 1
a3513 1
  if (gdbarch->deprecated_target_read_fp == 0)
d3515 1
a3515 1
                    "gdbarch: gdbarch_deprecated_target_read_fp invalid");
d3517 2
a3518 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_target_read_fp called\n");
  return gdbarch->deprecated_target_read_fp ();
d3522 2
a3523 2
set_gdbarch_deprecated_target_read_fp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_target_read_fp_ftype deprecated_target_read_fp)
d3525 1
a3525 1
  gdbarch->deprecated_target_read_fp = deprecated_target_read_fp;
d3529 1
a3529 1
gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)
d3532 1
a3532 1
  return gdbarch->push_dummy_call != 0;
d3535 2
a3536 2
CORE_ADDR
gdbarch_push_dummy_call (struct gdbarch *gdbarch, CORE_ADDR func_addr, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d3539 1
a3539 1
  if (gdbarch->push_dummy_call == 0)
d3541 1
a3541 1
                    "gdbarch: gdbarch_push_dummy_call invalid");
d3543 2
a3544 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_call called\n");
  return gdbarch->push_dummy_call (gdbarch, func_addr, regcache, bp_addr, nargs, args, sp, struct_return, struct_addr);
d3548 2
a3549 2
set_gdbarch_push_dummy_call (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_call_ftype push_dummy_call)
d3551 1
a3551 1
  gdbarch->push_dummy_call = push_dummy_call;
d3555 1
a3555 1
gdbarch_deprecated_push_arguments_p (struct gdbarch *gdbarch)
d3558 1
a3558 1
  return gdbarch->deprecated_push_arguments != 0;
d3561 2
a3562 2
CORE_ADDR
gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
d3565 1
a3565 1
  if (gdbarch->deprecated_push_arguments == 0)
d3567 1
a3567 1
                    "gdbarch: gdbarch_deprecated_push_arguments invalid");
d3569 2
a3570 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_arguments called\n");
  return gdbarch->deprecated_push_arguments (nargs, args, sp, struct_return, struct_addr);
d3574 2
a3575 2
set_gdbarch_deprecated_push_arguments (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_push_arguments_ftype deprecated_push_arguments)
d3577 1
a3577 1
  gdbarch->deprecated_push_arguments = deprecated_push_arguments;
d3581 1
a3581 1
gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch)
d3584 3
a3586 1
  /* Skip verify of deprecated_use_generic_dummy_frames, invalid_p == 0 */
d3588 2
a3589 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_use_generic_dummy_frames called\n");
  return gdbarch->deprecated_use_generic_dummy_frames;
d3593 2
a3594 2
set_gdbarch_deprecated_use_generic_dummy_frames (struct gdbarch *gdbarch,
                                                 int deprecated_use_generic_dummy_frames)
d3596 1
a3596 1
  gdbarch->deprecated_use_generic_dummy_frames = deprecated_use_generic_dummy_frames;
d3600 1
a3600 1
gdbarch_deprecated_push_return_address_p (struct gdbarch *gdbarch)
d3603 1
a3603 1
  return gdbarch->deprecated_push_return_address != 0;
d3606 2
a3607 2
CORE_ADDR
gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
d3610 20
a3629 1
  if (gdbarch->deprecated_push_return_address == 0)
d3631 1
a3631 1
                    "gdbarch: gdbarch_deprecated_push_return_address invalid");
d3633 2
a3634 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_return_address called\n");
  return gdbarch->deprecated_push_return_address (pc, sp);
d3638 2
a3639 2
set_gdbarch_deprecated_push_return_address (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_push_return_address_ftype deprecated_push_return_address)
d3641 1
a3641 1
  gdbarch->deprecated_push_return_address = deprecated_push_return_address;
d3645 1
a3645 1
gdbarch_deprecated_dummy_write_sp_p (struct gdbarch *gdbarch)
d3648 6
a3653 1
  return gdbarch->deprecated_dummy_write_sp != 0;
d3657 15
a3671 1
gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
d3674 1
a3674 1
  if (gdbarch->deprecated_dummy_write_sp == 0)
d3676 1
a3676 1
                    "gdbarch: gdbarch_deprecated_dummy_write_sp invalid");
d3678 2
a3679 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_dummy_write_sp called\n");
  gdbarch->deprecated_dummy_write_sp (val);
d3683 2
a3684 2
set_gdbarch_deprecated_dummy_write_sp (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_dummy_write_sp_ftype deprecated_dummy_write_sp)
d3686 1
a3686 1
  gdbarch->deprecated_dummy_write_sp = deprecated_dummy_write_sp;
d3690 1
a3690 1
gdbarch_deprecated_register_size (struct gdbarch *gdbarch)
d3693 1
d3695 2
a3696 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_size called\n");
  return gdbarch->deprecated_register_size;
d3700 2
a3701 2
set_gdbarch_deprecated_register_size (struct gdbarch *gdbarch,
                                      int deprecated_register_size)
d3703 1
a3703 1
  gdbarch->deprecated_register_size = deprecated_register_size;
d3790 27
d3885 1
a3885 276
  if (gdbarch->deprecated_fix_call_dummy == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_fix_call_dummy invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_fix_call_dummy called\n");
  gdbarch->deprecated_fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
}

void
set_gdbarch_deprecated_fix_call_dummy (struct gdbarch *gdbarch,
                                       gdbarch_deprecated_fix_call_dummy_ftype deprecated_fix_call_dummy)
{
  gdbarch->deprecated_fix_call_dummy = deprecated_fix_call_dummy;
}

int
gdbarch_push_dummy_code_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->push_dummy_code != 0;
}

CORE_ADDR
gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, int using_gcc, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->push_dummy_code == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_push_dummy_code invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_code called\n");
  return gdbarch->push_dummy_code (gdbarch, sp, funaddr, using_gcc, args, nargs, value_type, real_pc, bp_addr);
}

void
set_gdbarch_push_dummy_code (struct gdbarch *gdbarch,
                             gdbarch_push_dummy_code_ftype push_dummy_code)
{
  gdbarch->push_dummy_code = push_dummy_code;
}

int
gdbarch_deprecated_push_dummy_frame_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_push_dummy_frame != 0;
}

void
gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_push_dummy_frame == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_push_dummy_frame invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_push_dummy_frame called\n");
  gdbarch->deprecated_push_dummy_frame ();
}

void
set_gdbarch_deprecated_push_dummy_frame (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_push_dummy_frame_ftype deprecated_push_dummy_frame)
{
  gdbarch->deprecated_push_dummy_frame = deprecated_push_dummy_frame;
}

int
gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of deprecated_extra_stack_alignment_needed, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extra_stack_alignment_needed called\n");
  return gdbarch->deprecated_extra_stack_alignment_needed;
}

void
set_gdbarch_deprecated_extra_stack_alignment_needed (struct gdbarch *gdbarch,
                                                     int deprecated_extra_stack_alignment_needed)
{
  gdbarch->deprecated_extra_stack_alignment_needed = deprecated_extra_stack_alignment_needed;
}

int
gdbarch_deprecated_do_registers_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_do_registers_info != 0;
}

void
gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch, int reg_nr, int fpregs)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_do_registers_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_do_registers_info invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_do_registers_info called\n");
  gdbarch->deprecated_do_registers_info (reg_nr, fpregs);
}

void
set_gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_do_registers_info_ftype deprecated_do_registers_info)
{
  gdbarch->deprecated_do_registers_info = deprecated_do_registers_info;
}

void
gdbarch_print_registers_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, int regnum, int all)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->print_registers_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_registers_info invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_registers_info called\n");
  gdbarch->print_registers_info (gdbarch, file, frame, regnum, all);
}

void
set_gdbarch_print_registers_info (struct gdbarch *gdbarch,
                                  gdbarch_print_registers_info_ftype print_registers_info)
{
  gdbarch->print_registers_info = print_registers_info;
}

int
gdbarch_print_float_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->print_float_info != 0;
}

void
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->print_float_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_float_info invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_float_info called\n");
  gdbarch->print_float_info (gdbarch, file, frame, args);
}

void
set_gdbarch_print_float_info (struct gdbarch *gdbarch,
                              gdbarch_print_float_info_ftype print_float_info)
{
  gdbarch->print_float_info = print_float_info;
}

int
gdbarch_print_vector_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->print_vector_info != 0;
}

void
gdbarch_print_vector_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->print_vector_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_vector_info invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_vector_info called\n");
  gdbarch->print_vector_info (gdbarch, file, frame, args);
}

void
set_gdbarch_print_vector_info (struct gdbarch *gdbarch,
                               gdbarch_print_vector_info_ftype print_vector_info)
{
  gdbarch->print_vector_info = print_vector_info;
}

int
gdbarch_register_sim_regno (struct gdbarch *gdbarch, int reg_nr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->register_sim_regno == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_sim_regno invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_sim_regno called\n");
  return gdbarch->register_sim_regno (reg_nr);
}

void
set_gdbarch_register_sim_regno (struct gdbarch *gdbarch,
                                gdbarch_register_sim_regno_ftype register_sim_regno)
{
  gdbarch->register_sim_regno = register_sim_regno;
}

int
gdbarch_register_bytes_ok_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->register_bytes_ok != 0;
}

int
gdbarch_register_bytes_ok (struct gdbarch *gdbarch, long nr_bytes)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->register_bytes_ok == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_bytes_ok invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_bytes_ok called\n");
  return gdbarch->register_bytes_ok (nr_bytes);
}

void
set_gdbarch_register_bytes_ok (struct gdbarch *gdbarch,
                               gdbarch_register_bytes_ok_ftype register_bytes_ok)
{
  gdbarch->register_bytes_ok = register_bytes_ok;
}

int
gdbarch_cannot_fetch_register (struct gdbarch *gdbarch, int regnum)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->cannot_fetch_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_cannot_fetch_register invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_fetch_register called\n");
  return gdbarch->cannot_fetch_register (regnum);
}

void
set_gdbarch_cannot_fetch_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_fetch_register_ftype cannot_fetch_register)
{
  gdbarch->cannot_fetch_register = cannot_fetch_register;
}

int
gdbarch_cannot_store_register (struct gdbarch *gdbarch, int regnum)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->cannot_store_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_cannot_store_register invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_store_register called\n");
  return gdbarch->cannot_store_register (regnum);
}

void
set_gdbarch_cannot_store_register (struct gdbarch *gdbarch,
                                   gdbarch_cannot_store_register_ftype cannot_store_register)
{
  gdbarch->cannot_store_register = cannot_store_register;
}

int
gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->get_longjmp_target != 0;
}

int
gdbarch_get_longjmp_target (struct gdbarch *gdbarch, CORE_ADDR *pc)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->get_longjmp_target == 0)
d3887 1
a3887 1
                    "gdbarch: gdbarch_get_longjmp_target invalid");
d3889 2
a3890 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_longjmp_target called\n");
  return gdbarch->get_longjmp_target (pc);
d3894 2
a3895 2
set_gdbarch_get_longjmp_target (struct gdbarch *gdbarch,
                                gdbarch_get_longjmp_target_ftype get_longjmp_target)
d3897 1
a3897 1
  gdbarch->get_longjmp_target = get_longjmp_target;
d3901 1
a3901 1
gdbarch_deprecated_pc_in_call_dummy_p (struct gdbarch *gdbarch)
d3904 1
a3904 1
  return gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy;
d3907 2
a3908 2
int
gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp, CORE_ADDR frame_address)
d3911 1
a3911 1
  if (gdbarch->deprecated_pc_in_call_dummy == 0)
d3913 1
a3913 2
                    "gdbarch: gdbarch_deprecated_pc_in_call_dummy invalid");
  /* Ignore predicate (gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy).  */
d3915 2
a3916 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_pc_in_call_dummy called\n");
  return gdbarch->deprecated_pc_in_call_dummy (pc, sp, frame_address);
d3920 2
a3921 2
set_gdbarch_deprecated_pc_in_call_dummy (struct gdbarch *gdbarch,
                                         gdbarch_deprecated_pc_in_call_dummy_ftype deprecated_pc_in_call_dummy)
d3923 1
a3923 1
  gdbarch->deprecated_pc_in_call_dummy = deprecated_pc_in_call_dummy;
d4037 1
a4037 1
gdbarch_deprecated_register_convertible (struct gdbarch *gdbarch, int nr)
d4040 1
a4040 1
  if (gdbarch->deprecated_register_convertible == 0)
d4042 1
a4042 1
                    "gdbarch: gdbarch_deprecated_register_convertible invalid");
d4044 2
a4045 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convertible called\n");
  return gdbarch->deprecated_register_convertible (nr);
d4049 2
a4050 2
set_gdbarch_deprecated_register_convertible (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_register_convertible_ftype deprecated_register_convertible)
d4052 1
a4052 1
  gdbarch->deprecated_register_convertible = deprecated_register_convertible;
d4056 1
a4056 1
gdbarch_deprecated_register_convert_to_virtual (struct gdbarch *gdbarch, int regnum, struct type *type, char *from, char *to)
d4059 1
a4059 1
  if (gdbarch->deprecated_register_convert_to_virtual == 0)
d4061 1
a4061 1
                    "gdbarch: gdbarch_deprecated_register_convert_to_virtual invalid");
d4063 2
a4064 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convert_to_virtual called\n");
  gdbarch->deprecated_register_convert_to_virtual (regnum, type, from, to);
d4068 2
a4069 2
set_gdbarch_deprecated_register_convert_to_virtual (struct gdbarch *gdbarch,
                                                    gdbarch_deprecated_register_convert_to_virtual_ftype deprecated_register_convert_to_virtual)
d4071 1
a4071 1
  gdbarch->deprecated_register_convert_to_virtual = deprecated_register_convert_to_virtual;
d4075 1
a4075 1
gdbarch_deprecated_register_convert_to_raw (struct gdbarch *gdbarch, struct type *type, int regnum, const char *from, char *to)
d4078 1
a4078 1
  if (gdbarch->deprecated_register_convert_to_raw == 0)
d4080 1
a4080 1
                    "gdbarch: gdbarch_deprecated_register_convert_to_raw invalid");
d4082 2
a4083 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_register_convert_to_raw called\n");
  gdbarch->deprecated_register_convert_to_raw (type, regnum, from, to);
d4087 2
a4088 2
set_gdbarch_deprecated_register_convert_to_raw (struct gdbarch *gdbarch,
                                                gdbarch_deprecated_register_convert_to_raw_ftype deprecated_register_convert_to_raw)
d4090 1
a4090 1
  gdbarch->deprecated_register_convert_to_raw = deprecated_register_convert_to_raw;
d4094 1
a4094 1
gdbarch_convert_register_p (struct gdbarch *gdbarch, int regnum, struct type *type)
d4102 1
a4102 1
  return gdbarch->convert_register_p (regnum, type);
d4113 1
a4113 1
gdbarch_register_to_value (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, void *buf)
d4121 1
a4121 1
  gdbarch->register_to_value (frame, regnum, type, buf);
d4132 1
a4132 1
gdbarch_value_to_register (struct gdbarch *gdbarch, struct frame_info *frame, int regnum, struct type *type, const void *buf)
d4140 1
a4140 1
  gdbarch->value_to_register (frame, regnum, type, buf);
d4234 104
d4721 19
a4919 33
int
gdbarch_unwind_sp_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->unwind_sp != 0;
}

CORE_ADDR
gdbarch_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->unwind_sp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_unwind_sp invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_unwind_sp called\n");
  return gdbarch->unwind_sp (gdbarch, next_frame);
}

void
set_gdbarch_unwind_sp (struct gdbarch *gdbarch,
                       gdbarch_unwind_sp_ftype unwind_sp)
{
  gdbarch->unwind_sp = unwind_sp;
}

int
gdbarch_deprecated_frame_args_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_args_address != get_frame_base;
}

d4921 1
a4921 1
gdbarch_deprecated_frame_args_address (struct gdbarch *gdbarch, struct frame_info *fi)
d4924 1
a4924 1
  if (gdbarch->deprecated_frame_args_address == 0)
d4926 1
a4926 2
                    "gdbarch: gdbarch_deprecated_frame_args_address invalid");
  /* Ignore predicate (gdbarch->deprecated_frame_args_address != get_frame_base).  */
d4928 2
a4929 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_args_address called\n");
  return gdbarch->deprecated_frame_args_address (fi);
d4933 2
a4934 8
set_gdbarch_deprecated_frame_args_address (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_frame_args_address_ftype deprecated_frame_args_address)
{
  gdbarch->deprecated_frame_args_address = deprecated_frame_args_address;
}

int
gdbarch_deprecated_frame_locals_address_p (struct gdbarch *gdbarch)
d4936 1
a4936 2
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_frame_locals_address != get_frame_base;
d4940 1
a4940 1
gdbarch_deprecated_frame_locals_address (struct gdbarch *gdbarch, struct frame_info *fi)
d4943 1
a4943 1
  if (gdbarch->deprecated_frame_locals_address == 0)
d4945 1
a4945 2
                    "gdbarch: gdbarch_deprecated_frame_locals_address invalid");
  /* Ignore predicate (gdbarch->deprecated_frame_locals_address != get_frame_base).  */
d4947 2
a4948 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_frame_locals_address called\n");
  return gdbarch->deprecated_frame_locals_address (fi);
d4952 2
a4953 2
set_gdbarch_deprecated_frame_locals_address (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_frame_locals_address_ftype deprecated_frame_locals_address)
d4955 1
a4955 1
  gdbarch->deprecated_frame_locals_address = deprecated_frame_locals_address;
a4984 7
gdbarch_frame_num_args_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_num_args != 0;
}

int
d5056 17
d5099 52
a5691 26
}

int
gdbarch_fetch_pointer_argument_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->fetch_pointer_argument != 0;
}

CORE_ADDR
gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch, struct frame_info *frame, int argi, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->fetch_pointer_argument == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_fetch_pointer_argument invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fetch_pointer_argument called\n");
  return gdbarch->fetch_pointer_argument (frame, argi, type);
}

void
set_gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch,
                                    gdbarch_fetch_pointer_argument_ftype fetch_pointer_argument)
{
  gdbarch->fetch_pointer_argument = fetch_pointer_argument;
@


1.150.2.11
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a69 1
#include "gdb_obstack.h"
d75 1
a94 4

  /* An obstack bound to the lifetime of the architecture.  */
  struct obstack *obstack;

d273 1
a294 1
  NULL, /* The obstack.  */
d440 1
d482 1
a482 7
  struct gdbarch *current_gdbarch;

  /* Create an obstack for allocating all the per-architecture memory,
     then use that to allocate the architecture vector.  */
  struct obstack *obstack = XMALLOC (struct obstack);
  obstack_init (obstack);
  current_gdbarch = obstack_alloc (obstack, sizeof (*current_gdbarch));
a483 1
  current_gdbarch->obstack = obstack;
d517 1
a571 11
/* Allocate extra space using the per-architecture obstack.  */

void *
gdbarch_obstack_zalloc (struct gdbarch *arch, long size)
{
  void *data = obstack_alloc (arch->obstack, size);
  memset (data, 0, size);
  return data;
}


a580 1
  struct obstack *obstack;
d582 2
a583 4
  gdb_assert (!arch->initialized_p);
  obstack = arch->obstack;
  obstack_free (obstack, 0); /* Includes the ARCH.  */
  xfree (obstack);
d640 1
d644 2
a645 2
  /* Skip verify of deprecated_register_raw_size, has predicate */
  /* Skip verify of deprecated_register_virtual_size, has predicate */
d752 1
d1692 23
a2149 9
#ifdef REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_RAW_SIZE_P()",
                      XSTRING (REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_RAW_SIZE_P() = %d\n",
                      REGISTER_RAW_SIZE_P ());
#endif
a2193 9
#ifdef REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      REGISTER_VIRTUAL_SIZE_P ());
#endif
d2865 3
a2867 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->addr_bit != 0);
d2901 3
a2903 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->char_signed != -1);
d2920 1
a2920 1
  return gdbarch->read_pc != NULL;
d2927 3
a2929 1
  gdb_assert (gdbarch->read_pc != NULL);
d2946 3
a2948 1
  gdb_assert (gdbarch->write_pc != NULL);
d2965 1
a2965 1
  return gdbarch->read_sp != NULL;
d2972 3
a2974 1
  gdb_assert (gdbarch->read_sp != NULL);
d2991 3
a2993 1
  gdb_assert (gdbarch->virtual_frame_pointer != NULL);
d3010 1
a3010 1
  return gdbarch->pseudo_register_read != NULL;
d3017 3
a3019 1
  gdb_assert (gdbarch->pseudo_register_read != NULL);
d3036 1
a3036 1
  return gdbarch->pseudo_register_write != NULL;
d3043 3
a3045 1
  gdb_assert (gdbarch->pseudo_register_write != NULL);
d3062 3
a3064 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->num_regs != -1);
d3183 3
a3185 1
  gdb_assert (gdbarch->stab_reg_to_regnum != NULL);
d3202 3
a3204 1
  gdb_assert (gdbarch->ecoff_reg_to_regnum != NULL);
d3221 3
a3223 1
  gdb_assert (gdbarch->dwarf_reg_to_regnum != NULL);
d3240 3
a3242 1
  gdb_assert (gdbarch->sdb_reg_to_regnum != NULL);
d3259 3
a3261 1
  gdb_assert (gdbarch->dwarf2_reg_to_regnum != NULL);
d3278 3
a3280 1
  gdb_assert (gdbarch->register_name != NULL);
d3297 1
a3297 1
  return gdbarch->register_type != NULL;
d3304 3
a3306 1
  gdb_assert (gdbarch->register_type != NULL);
d3323 1
a3323 1
  return gdbarch->deprecated_register_virtual_type != NULL;
d3330 3
a3332 1
  gdb_assert (gdbarch->deprecated_register_virtual_type != NULL);
d3372 4
a3375 2
  gdb_assert (gdbarch->deprecated_register_byte != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_byte != generic_register_byte, allow call.  */
a3388 7
gdbarch_deprecated_register_raw_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_raw_size != generic_register_size;
}

int
d3392 3
a3394 2
  gdb_assert (gdbarch->deprecated_register_raw_size != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_raw_size != generic_register_size, allow call.  */
a3407 7
gdbarch_deprecated_register_virtual_size_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_register_virtual_size != generic_register_size;
}

int
d3411 3
a3413 2
  gdb_assert (gdbarch->deprecated_register_virtual_size != NULL);
  /* Do not check predicate: gdbarch->deprecated_register_virtual_size != generic_register_size, allow call.  */
d3476 1
a3476 1
  return gdbarch->unwind_dummy_id != NULL;
d3483 3
a3485 1
  gdb_assert (gdbarch->unwind_dummy_id != NULL);
d3502 1
a3502 1
  return gdbarch->deprecated_save_dummy_frame_tos != NULL;
d3509 3
a3511 1
  gdb_assert (gdbarch->deprecated_save_dummy_frame_tos != NULL);
d3545 1
a3545 1
  return gdbarch->deprecated_target_read_fp != NULL;
d3552 3
a3554 1
  gdb_assert (gdbarch->deprecated_target_read_fp != NULL);
d3571 1
a3571 1
  return gdbarch->push_dummy_call != NULL;
d3578 3
a3580 1
  gdb_assert (gdbarch->push_dummy_call != NULL);
d3597 1
a3597 1
  return gdbarch->deprecated_push_arguments != NULL;
d3604 3
a3606 1
  gdb_assert (gdbarch->deprecated_push_arguments != NULL);
d3640 1
a3640 1
  return gdbarch->deprecated_push_return_address != NULL;
d3647 3
a3649 1
  gdb_assert (gdbarch->deprecated_push_return_address != NULL);
d3666 1
a3666 1
  return gdbarch->deprecated_dummy_write_sp != NULL;
d3673 3
a3675 1
  gdb_assert (gdbarch->deprecated_dummy_write_sp != NULL);
d3725 3
a3727 1
  gdb_assert (gdbarch->call_dummy_address != NULL);
d3849 1
a3849 1
  return gdbarch->deprecated_fix_call_dummy != NULL;
d3856 3
a3858 1
  gdb_assert (gdbarch->deprecated_fix_call_dummy != NULL);
d3875 1
a3875 1
  return gdbarch->push_dummy_code != NULL;
d3882 3
a3884 1
  gdb_assert (gdbarch->push_dummy_code != NULL);
d3901 1
a3901 1
  return gdbarch->deprecated_push_dummy_frame != NULL;
d3908 3
a3910 1
  gdb_assert (gdbarch->deprecated_push_dummy_frame != NULL);
d3944 1
a3944 1
  return gdbarch->deprecated_do_registers_info != NULL;
d3951 3
a3953 1
  gdb_assert (gdbarch->deprecated_do_registers_info != NULL);
d3970 3
a3972 1
  gdb_assert (gdbarch->print_registers_info != NULL);
d3989 1
a3989 1
  return gdbarch->print_float_info != NULL;
d3996 3
a3998 1
  gdb_assert (gdbarch->print_float_info != NULL);
d4015 1
a4015 1
  return gdbarch->print_vector_info != NULL;
d4022 3
a4024 1
  gdb_assert (gdbarch->print_vector_info != NULL);
d4041 3
a4043 1
  gdb_assert (gdbarch->register_sim_regno != NULL);
d4060 1
a4060 1
  return gdbarch->register_bytes_ok != NULL;
d4067 3
a4069 1
  gdb_assert (gdbarch->register_bytes_ok != NULL);
d4086 3
a4088 1
  gdb_assert (gdbarch->cannot_fetch_register != NULL);
d4105 3
a4107 1
  gdb_assert (gdbarch->cannot_store_register != NULL);
d4124 1
a4124 1
  return gdbarch->get_longjmp_target != NULL;
d4131 3
a4133 1
  gdb_assert (gdbarch->get_longjmp_target != NULL);
d4157 4
a4160 2
  gdb_assert (gdbarch->deprecated_pc_in_call_dummy != NULL);
  /* Do not check predicate: gdbarch->deprecated_pc_in_call_dummy != generic_pc_in_call_dummy, allow call.  */
d4177 1
a4177 1
  return gdbarch->deprecated_init_frame_pc_first != NULL;
d4184 3
a4186 1
  gdb_assert (gdbarch->deprecated_init_frame_pc_first != NULL);
d4203 1
a4203 1
  return gdbarch->deprecated_init_frame_pc != NULL;
d4210 3
a4212 1
  gdb_assert (gdbarch->deprecated_init_frame_pc != NULL);
d4261 1
a4261 1
  return gdbarch->deprecated_get_saved_register != NULL;
d4268 3
a4270 1
  gdb_assert (gdbarch->deprecated_get_saved_register != NULL);
d4287 3
a4289 1
  gdb_assert (gdbarch->deprecated_register_convertible != NULL);
d4306 3
a4308 1
  gdb_assert (gdbarch->deprecated_register_convert_to_virtual != NULL);
d4325 3
a4327 1
  gdb_assert (gdbarch->deprecated_register_convert_to_raw != NULL);
d4344 3
a4346 1
  gdb_assert (gdbarch->convert_register_p != NULL);
d4363 3
a4365 1
  gdb_assert (gdbarch->register_to_value != NULL);
d4382 3
a4384 1
  gdb_assert (gdbarch->value_to_register != NULL);
d4401 3
a4403 1
  gdb_assert (gdbarch->pointer_to_address != NULL);
d4420 3
a4422 1
  gdb_assert (gdbarch->address_to_pointer != NULL);
d4439 1
a4439 1
  return gdbarch->integer_to_address != NULL;
d4446 3
a4448 1
  gdb_assert (gdbarch->integer_to_address != NULL);
d4465 3
a4467 1
  gdb_assert (gdbarch->return_value_on_stack != NULL);
d4484 1
a4484 1
  return gdbarch->deprecated_pop_frame != NULL;
d4491 3
a4493 1
  gdb_assert (gdbarch->deprecated_pop_frame != NULL);
d4510 1
a4510 1
  return gdbarch->deprecated_store_struct_return != NULL;
d4517 3
a4519 1
  gdb_assert (gdbarch->deprecated_store_struct_return != NULL);
d4536 3
a4538 1
  gdb_assert (gdbarch->extract_return_value != NULL);
d4555 3
a4557 1
  gdb_assert (gdbarch->store_return_value != NULL);
d4574 3
a4576 1
  gdb_assert (gdbarch->deprecated_extract_return_value != NULL);
d4593 3
a4595 1
  gdb_assert (gdbarch->deprecated_store_return_value != NULL);
d4612 1
a4612 1
  return gdbarch->extract_struct_value_address != NULL;
d4619 3
a4621 1
  gdb_assert (gdbarch->extract_struct_value_address != NULL);
d4638 1
a4638 1
  return gdbarch->deprecated_extract_struct_value_address != NULL;
d4645 3
a4647 1
  gdb_assert (gdbarch->deprecated_extract_struct_value_address != NULL);
d4664 3
a4666 1
  gdb_assert (gdbarch->use_struct_convention != NULL);
d4683 1
a4683 1
  return gdbarch->deprecated_frame_init_saved_regs != NULL;
d4690 3
a4692 1
  gdb_assert (gdbarch->deprecated_frame_init_saved_regs != NULL);
d4709 1
a4709 1
  return gdbarch->deprecated_init_extra_frame_info != NULL;
d4716 3
a4718 1
  gdb_assert (gdbarch->deprecated_init_extra_frame_info != NULL);
d4735 3
a4737 1
  gdb_assert (gdbarch->skip_prologue != NULL);
d4754 3
a4756 1
  gdb_assert (gdbarch->prologue_frameless_p != NULL);
d4773 3
a4775 1
  gdb_assert (gdbarch->inner_than != NULL);
d4792 3
a4794 1
  gdb_assert (gdbarch->breakpoint_from_pc != NULL);
d4811 3
a4813 1
  gdb_assert (gdbarch->memory_insert_breakpoint != NULL);
d4830 3
a4832 1
  gdb_assert (gdbarch->memory_remove_breakpoint != NULL);
d4849 3
a4851 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->decr_pc_after_break != -1);
d4868 3
a4870 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->function_start_offset != -1);
d4887 3
a4889 1
  gdb_assert (gdbarch->remote_translate_xfer_address != NULL);
d4906 3
a4908 2
  /* Check variable changed from pre-default.  */
  gdb_assert (gdbarch->frame_args_skip != -1);
d4925 3
a4927 1
  gdb_assert (gdbarch->frameless_function_invocation != NULL);
d4944 1
a4944 1
  return gdbarch->deprecated_frame_chain != NULL;
d4951 3
a4953 1
  gdb_assert (gdbarch->deprecated_frame_chain != NULL);
d4970 1
a4970 1
  return gdbarch->deprecated_frame_chain_valid != NULL;
d4977 3
a4979 1
  gdb_assert (gdbarch->deprecated_frame_chain_valid != NULL);
d4996 1
a4996 1
  return gdbarch->deprecated_frame_saved_pc != NULL;
d5003 3
a5005 1
  gdb_assert (gdbarch->deprecated_frame_saved_pc != NULL);
d5022 1
a5022 1
  return gdbarch->unwind_pc != NULL;
d5029 3
a5031 1
  gdb_assert (gdbarch->unwind_pc != NULL);
d5048 1
a5048 1
  return gdbarch->unwind_sp != NULL;
d5055 3
a5057 1
  gdb_assert (gdbarch->unwind_sp != NULL);
d5081 4
a5084 2
  gdb_assert (gdbarch->deprecated_frame_args_address != NULL);
  /* Do not check predicate: gdbarch->deprecated_frame_args_address != get_frame_base, allow call.  */
d5108 4
a5111 2
  gdb_assert (gdbarch->deprecated_frame_locals_address != NULL);
  /* Do not check predicate: gdbarch->deprecated_frame_locals_address != get_frame_base, allow call.  */
d5128 1
a5128 1
  return gdbarch->deprecated_saved_pc_after_call != NULL;
d5135 3
a5137 1
  gdb_assert (gdbarch->deprecated_saved_pc_after_call != NULL);
d5154 1
a5154 1
  return gdbarch->frame_num_args != NULL;
d5161 3
a5163 1
  gdb_assert (gdbarch->frame_num_args != NULL);
d5180 1
a5180 1
  return gdbarch->stack_align != NULL;
d5187 3
a5189 1
  gdb_assert (gdbarch->stack_align != NULL);
d5206 1
a5206 1
  return gdbarch->frame_align != NULL;
d5213 3
a5215 1
  gdb_assert (gdbarch->frame_align != NULL);
d5232 1
a5232 1
  return gdbarch->reg_struct_has_addr != NULL;
d5239 3
a5241 1
  gdb_assert (gdbarch->reg_struct_has_addr != NULL);
d5322 3
a5324 1
  gdb_assert (gdbarch->convert_from_func_ptr_addr != NULL);
d5341 3
a5343 1
  gdb_assert (gdbarch->addr_bits_remove != NULL);
d5360 3
a5362 1
  gdb_assert (gdbarch->smash_text_address != NULL);
d5379 1
a5379 1
  return gdbarch->software_single_step != NULL;
d5386 3
a5388 1
  gdb_assert (gdbarch->software_single_step != NULL);
d5405 3
a5407 1
  gdb_assert (gdbarch->print_insn != NULL);
d5424 3
a5426 1
  gdb_assert (gdbarch->skip_trampoline_code != NULL);
d5443 3
a5445 1
  gdb_assert (gdbarch->in_solib_call_trampoline != NULL);
d5462 3
a5464 1
  gdb_assert (gdbarch->in_solib_return_trampoline != NULL);
d5481 3
a5483 1
  gdb_assert (gdbarch->pc_in_sigtramp != NULL);
d5500 1
a5500 1
  return gdbarch->sigtramp_start != NULL;
d5507 3
a5509 1
  gdb_assert (gdbarch->sigtramp_start != NULL);
d5526 1
a5526 1
  return gdbarch->sigtramp_end != NULL;
d5533 3
a5535 1
  gdb_assert (gdbarch->sigtramp_end != NULL);
d5552 3
a5554 1
  gdb_assert (gdbarch->in_function_epilogue_p != NULL);
d5571 3
a5573 1
  gdb_assert (gdbarch->construct_inferior_arguments != NULL);
d5586 26
d5616 3
a5618 1
  gdb_assert (gdbarch->elf_make_msymbol_special != NULL);
d5635 3
a5637 1
  gdb_assert (gdbarch->coff_make_msymbol_special != NULL);
d5705 1
a5705 1
  return gdbarch->address_class_type_flags != NULL;
d5712 3
a5714 1
  gdb_assert (gdbarch->address_class_type_flags != NULL);
d5731 1
a5731 1
  return gdbarch->address_class_type_flags_to_name != NULL;
d5738 3
a5740 1
  gdb_assert (gdbarch->address_class_type_flags_to_name != NULL);
d5757 1
a5757 1
  return gdbarch->address_class_name_to_type_flags != NULL;
d5764 3
a5766 1
  gdb_assert (gdbarch->address_class_name_to_type_flags != NULL);
d5783 3
a5785 1
  gdb_assert (gdbarch->register_reggroup_p != NULL);
d5802 1
a5802 1
  return gdbarch->fetch_pointer_argument != NULL;
d5809 3
a5811 1
  gdb_assert (gdbarch->fetch_pointer_argument != NULL);
d5833 1
d5854 2
a5855 1
register_gdbarch_data (gdbarch_data_init_ftype *init)
d5868 1
d5880 1
a5880 1
  gdbarch->data = GDBARCH_OBSTACK_CALLOC (gdbarch, gdbarch->nr_data, void *);
d5883 22
d5914 5
a5918 1
  gdb_assert (gdbarch->data[data->index] == NULL);
d6015 1
a6015 1
	  (*curr) = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct gdbarch_swap);
d6017 1
a6017 1
	  (*curr)->swap = gdbarch_obstack_zalloc (gdbarch, rego->sizeof_data);
@


1.150.2.12
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d39 1
d42 18
d164 1
a164 1
  int deprecated_npc_regnum;
d190 1
a190 1
  gdbarch_deprecated_call_dummy_address_ftype *deprecated_call_dummy_address;
d257 1
a257 1
  gdbarch_deprecated_stack_align_ftype *deprecated_stack_align;
d259 1
a259 2
  gdbarch_deprecated_reg_struct_has_addr_ftype *deprecated_reg_struct_has_addr;
  int frame_red_zone_size;
d331 1
a331 1
  0,  /* deprecated_npc_regnum */
d357 1
a357 1
  0,  /* deprecated_call_dummy_address */
d424 1
a424 1
  0,  /* deprecated_stack_align */
d426 1
a426 2
  0,  /* deprecated_reg_struct_has_addr */
  0,  /* frame_red_zone_size */
d521 1
a521 1
  current_gdbarch->deprecated_npc_regnum = -1;
d533 1
d564 1
d619 3
d657 1
a657 1
  /* Skip verify of deprecated_npc_regnum, invalid_p == 0 */
d680 1
a680 1
  /* Skip verify of deprecated_call_dummy_address, has predicate */
d752 1
a752 1
  /* Skip verify of deprecated_stack_align, has predicate */
d754 1
a754 1
  /* Skip verify of deprecated_reg_struct_has_addr, has predicate */
d765 1
a765 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->print_insn == 0))
    fprintf_unfiltered (log, "\n\tprint_insn");
d808 40
a847 30
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_frame_align_p() = %d\n",
                      gdbarch_frame_align_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: frame_align = 0x%08lx\n",
                      (long) current_gdbarch->frame_align);
  fprintf_unfiltered (file,
                      "gdbarch_dump: in_function_epilogue_p = 0x%08lx\n",
                      (long) current_gdbarch->in_function_epilogue_p);
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
                      (long) current_gdbarch->register_reggroup_p);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_read_p() = %d\n",
                      gdbarch_pseudo_register_read_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_read = 0x%08lx\n",
                      (long) current_gdbarch->pseudo_register_read);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_pseudo_register_write_p() = %d\n",
                      gdbarch_pseudo_register_write_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: pseudo_register_write = 0x%08lx\n",
                      (long) current_gdbarch->pseudo_register_write);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_name_to_type_flags_p() = %d\n",
                      gdbarch_address_class_name_to_type_flags_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_class_name_to_type_flags = 0x%08lx\n",
                      (long) current_gdbarch->address_class_name_to_type_flags);
d862 5
a866 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = <0x%08lx>\n",
                      (long) current_gdbarch->address_class_type_flags
                      /*ADDRESS_CLASS_TYPE_FLAGS ()*/);
d868 8
a875 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_address_class_type_flags_to_name_p() = %d\n",
                      gdbarch_address_class_type_flags_to_name_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: address_class_type_flags_to_name = 0x%08lx\n",
                      (long) current_gdbarch->address_class_type_flags_to_name);
d877 2
d883 6
a888 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDRESS_TO_POINTER = <0x%08lx>\n",
                      (long) current_gdbarch->address_to_pointer
                      /*ADDRESS_TO_POINTER ()*/);
d895 5
a899 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: ADDR_BITS_REMOVE = <0x%08lx>\n",
                      (long) current_gdbarch->addr_bits_remove
                      /*ADDR_BITS_REMOVE ()*/);
d922 7
d930 8
a937 3
                      "gdbarch_dump: BREAKPOINT_FROM_PC = <0x%08lx>\n",
                      (long) current_gdbarch->breakpoint_from_pc
                      /*BREAKPOINT_FROM_PC ()*/);
d952 5
a956 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_FETCH_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->cannot_fetch_register
                      /*CANNOT_FETCH_REGISTER ()*/);
d971 5
a975 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_STORE_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->cannot_store_register
                      /*CANNOT_STORE_REGISTER ()*/);
d978 2
a983 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: COFF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                      (long) current_gdbarch->coff_make_msymbol_special
                      /*COFF_MAKE_MSYMBOL_SPECIAL ()*/);
d985 10
a994 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: construct_inferior_arguments = 0x%08lx\n",
                      (long) current_gdbarch->construct_inferior_arguments);
d1000 5
a1004 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: CONVERT_FROM_FUNC_PTR_ADDR = <0x%08lx>\n",
                      (long) current_gdbarch->convert_from_func_ptr_addr
                      /*CONVERT_FROM_FUNC_PTR_ADDR ()*/);
d1011 5
a1015 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: CONVERT_REGISTER_P = <0x%08lx>\n",
                      (long) current_gdbarch->convert_register_p
                      /*CONVERT_REGISTER_P ()*/);
a1024 19
#ifdef DEPRECATED_CALL_DUMMY_ADDRESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_CALL_DUMMY_ADDRESS_P()",
                      XSTRING (DEPRECATED_CALL_DUMMY_ADDRESS_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_ADDRESS_P() = %d\n",
                      DEPRECATED_CALL_DUMMY_ADDRESS_P ());
#endif
#ifdef DEPRECATED_CALL_DUMMY_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_CALL_DUMMY_ADDRESS()",
                      XSTRING (DEPRECATED_CALL_DUMMY_ADDRESS ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_CALL_DUMMY_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_call_dummy_address
                      /*DEPRECATED_CALL_DUMMY_ADDRESS ()*/);
#endif
d1084 2
d1090 6
a1095 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_do_registers_info
                      /*DEPRECATED_DO_REGISTERS_INFO ()*/);
d1107 2
d1113 6
a1118 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_DUMMY_WRITE_SP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_dummy_write_sp
                      /*DEPRECATED_DUMMY_WRITE_SP ()*/);
d1121 2
d1127 6
a1132 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_extract_return_value
                      /*DEPRECATED_EXTRACT_RETURN_VALUE ()*/);
d1148 5
a1152 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_extract_struct_value_address
                      /*DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
d1172 2
d1178 6
a1183 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FIX_CALL_DUMMY = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_fix_call_dummy
                      /*DEPRECATED_FIX_CALL_DUMMY ()*/);
d1207 5
a1211 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_ARGS_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_args_address
                      /*DEPRECATED_FRAME_ARGS_ADDRESS ()*/);
d1227 5
a1231 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain
                      /*DEPRECATED_FRAME_CHAIN ()*/);
d1247 5
a1251 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_CHAIN_VALID = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_chain_valid
                      /*DEPRECATED_FRAME_CHAIN_VALID ()*/);
d1263 2
d1269 6
a1274 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_INIT_SAVED_REGS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_init_saved_regs
                      /*DEPRECATED_FRAME_INIT_SAVED_REGS ()*/);
d1290 5
a1294 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_LOCALS_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_locals_address
                      /*DEPRECATED_FRAME_LOCALS_ADDRESS ()*/);
d1310 5
a1314 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_FRAME_SAVED_PC = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_frame_saved_pc
                      /*DEPRECATED_FRAME_SAVED_PC ()*/);
d1326 2
d1332 6
a1337 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_GET_SAVED_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_get_saved_register
                      /*DEPRECATED_GET_SAVED_REGISTER ()*/);
d1349 2
d1355 6
a1360 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_EXTRA_FRAME_INFO = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_extra_frame_info
                      /*DEPRECATED_INIT_EXTRA_FRAME_INFO ()*/);
d1376 5
a1380 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_frame_pc
                      /*DEPRECATED_INIT_FRAME_PC ()*/);
d1396 5
a1400 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_INIT_FRAME_PC_FIRST = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_init_frame_pc_first
                      /*DEPRECATED_INIT_FRAME_PC_FIRST ()*/);
a1435 8
#ifdef DEPRECATED_NPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_NPC_REGNUM # %s\n",
                      XSTRING (DEPRECATED_NPC_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_NPC_REGNUM = %d\n",
                      DEPRECATED_NPC_REGNUM);
#endif
d1450 5
a1454 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PC_IN_CALL_DUMMY = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pc_in_call_dummy
                      /*DEPRECATED_PC_IN_CALL_DUMMY ()*/);
d1466 2
d1472 6
a1477 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_POP_FRAME = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_pop_frame
                      /*DEPRECATED_POP_FRAME ()*/);
d1493 5
a1497 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_ARGUMENTS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_arguments
                      /*DEPRECATED_PUSH_ARGUMENTS ()*/);
d1509 2
d1515 6
a1520 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_DUMMY_FRAME = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_dummy_frame
                      /*DEPRECATED_PUSH_DUMMY_FRAME ()*/);
d1536 5
a1540 23
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_PUSH_RETURN_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_push_return_address
                      /*DEPRECATED_PUSH_RETURN_ADDRESS ()*/);
#endif
#ifdef DEPRECATED_REGISTER_BYTE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_BYTE_P()",
                      XSTRING (DEPRECATED_REGISTER_BYTE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTE_P() = %d\n",
                      DEPRECATED_REGISTER_BYTE_P ());
#endif
#ifdef DEPRECATED_REGISTER_BYTE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_BYTE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_BYTE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_BYTE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_byte
                      /*DEPRECATED_REGISTER_BYTE ()*/);
d1555 5
a1559 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERTIBLE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convertible
                      /*DEPRECATED_REGISTER_CONVERTIBLE ()*/);
d1562 2
d1568 6
a1573 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_RAW = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convert_to_raw
                      /*DEPRECATED_REGISTER_CONVERT_TO_RAW ()*/);
d1576 2
d1582 6
a1587 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_convert_to_virtual
                      /*DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL ()*/);
a1596 19
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REG_STRUCT_HAS_ADDR_P()",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR_P() = %d\n",
                      DEPRECATED_REG_STRUCT_HAS_ADDR_P ());
#endif
#ifdef DEPRECATED_REG_STRUCT_HAS_ADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (DEPRECATED_REG_STRUCT_HAS_ADDR (gcc_p, type)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REG_STRUCT_HAS_ADDR = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_reg_struct_has_addr
                      /*DEPRECATED_REG_STRUCT_HAS_ADDR ()*/);
#endif
d1611 5
a1615 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVED_PC_AFTER_CALL = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_saved_pc_after_call
                      /*DEPRECATED_SAVED_PC_AFTER_CALL ()*/);
d1627 2
d1633 6
a1638 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_SAVE_DUMMY_FRAME_TOS = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_save_dummy_frame_tos
                      /*DEPRECATED_SAVE_DUMMY_FRAME_TOS ()*/);
a1647 19
#ifdef DEPRECATED_STACK_ALIGN_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN_P()",
                      XSTRING (DEPRECATED_STACK_ALIGN_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STACK_ALIGN_P() = %d\n",
                      DEPRECATED_STACK_ALIGN_P ());
#endif
#ifdef DEPRECATED_STACK_ALIGN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STACK_ALIGN(sp)",
                      XSTRING (DEPRECATED_STACK_ALIGN (sp)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STACK_ALIGN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_stack_align
                      /*DEPRECATED_STACK_ALIGN ()*/);
#endif
d1649 2
d1655 6
a1660 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STORE_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_store_return_value
                      /*DEPRECATED_STORE_RETURN_VALUE ()*/);
d1672 2
d1678 6
a1683 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_STORE_STRUCT_RETURN = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_store_struct_return
                      /*DEPRECATED_STORE_STRUCT_RETURN ()*/);
d1699 5
a1703 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_TARGET_READ_FP = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_target_read_fp
                      /*DEPRECATED_TARGET_READ_FP ()*/);
d1718 5
a1722 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DWARF2_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->dwarf2_reg_to_regnum
                      /*DWARF2_REG_TO_REGNUM ()*/);
d1729 5
a1733 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: DWARF_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->dwarf_reg_to_regnum
                      /*DWARF_REG_TO_REGNUM ()*/);
d1740 5
a1744 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: ECOFF_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->ecoff_reg_to_regnum
                      /*ECOFF_REG_TO_REGNUM ()*/);
d1747 2
d1753 6
a1758 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: ELF_MAKE_MSYMBOL_SPECIAL = <0x%08lx>\n",
                      (long) current_gdbarch->elf_make_msymbol_special
                      /*ELF_MAKE_MSYMBOL_SPECIAL ()*/);
d1761 2
d1767 6
a1772 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->extract_return_value
                      /*EXTRACT_RETURN_VALUE ()*/);
d1788 5
a1792 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->extract_struct_value_address
                      /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
d1808 5
a1812 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: FETCH_POINTER_ARGUMENT = <0x%08lx>\n",
                      (long) current_gdbarch->fetch_pointer_argument
                      /*FETCH_POINTER_ARGUMENT ()*/);
d1827 5
a1831 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = <0x%08lx>\n",
                      (long) current_gdbarch->frameless_function_invocation
                      /*FRAMELESS_FUNCTION_INVOCATION ()*/);
d1855 5
a1859 12
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_NUM_ARGS = <0x%08lx>\n",
                      (long) current_gdbarch->frame_num_args
                      /*FRAME_NUM_ARGS ()*/);
#endif
#ifdef FRAME_RED_ZONE_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE # %s\n",
                      XSTRING (FRAME_RED_ZONE_SIZE));
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_RED_ZONE_SIZE = %d\n",
                      FRAME_RED_ZONE_SIZE);
d1883 5
a1887 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: GET_LONGJMP_TARGET = <0x%08lx>\n",
                      (long) current_gdbarch->get_longjmp_target
                      /*GET_LONGJMP_TARGET ()*/);
d1902 5
a1906 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: INNER_THAN = <0x%08lx>\n",
                      (long) current_gdbarch->inner_than
                      /*INNER_THAN ()*/);
d1922 5
a1926 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: INTEGER_TO_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->integer_to_address
                      /*INTEGER_TO_ADDRESS ()*/);
d1933 5
a1937 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_call_trampoline
                      /*IN_SOLIB_CALL_TRAMPOLINE ()*/);
d1944 5
a1948 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = <0x%08lx>\n",
                      (long) current_gdbarch->in_solib_return_trampoline
                      /*IN_SOLIB_RETURN_TRAMPOLINE ()*/);
d1955 5
a1959 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = <0x%08lx>\n",
                      (long) current_gdbarch->memory_insert_breakpoint
                      /*MEMORY_INSERT_BREAKPOINT ()*/);
d1966 5
a1970 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = <0x%08lx>\n",
                      (long) current_gdbarch->memory_remove_breakpoint
                      /*MEMORY_REMOVE_BREAKPOINT ()*/);
d1980 8
d2017 5
a2021 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: PC_IN_SIGTRAMP = <0x%08lx>\n",
                      (long) current_gdbarch->pc_in_sigtramp
                      /*PC_IN_SIGTRAMP ()*/);
d2036 5
a2040 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: POINTER_TO_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->pointer_to_address
                      /*POINTER_TO_ADDRESS ()*/);
d2042 20
a2061 15
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_print_float_info_p() = %d\n",
                      gdbarch_print_float_info_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_float_info = 0x%08lx\n",
                      (long) current_gdbarch->print_float_info);
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_registers_info = 0x%08lx\n",
                      (long) current_gdbarch->print_registers_info);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_print_vector_info_p() = %d\n",
                      gdbarch_print_vector_info_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: print_vector_info = 0x%08lx\n",
                      (long) current_gdbarch->print_vector_info);
d2067 5
a2071 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: PROLOGUE_FRAMELESS_P = <0x%08lx>\n",
                      (long) current_gdbarch->prologue_frameless_p
                      /*PROLOGUE_FRAMELESS_P ()*/);
d2081 17
d2099 3
a2101 2
                      "gdbarch_dump: gdbarch_push_dummy_call_p() = %d\n",
                      gdbarch_push_dummy_call_p (current_gdbarch));
d2103 4
a2106 2
                      "gdbarch_dump: push_dummy_call = 0x%08lx\n",
                      (long) current_gdbarch->push_dummy_call);
d2108 9
a2116 5
                      "gdbarch_dump: gdbarch_push_dummy_code_p() = %d\n",
                      gdbarch_push_dummy_code_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: push_dummy_code = 0x%08lx\n",
                      (long) current_gdbarch->push_dummy_code);
d2131 5
a2135 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTES_OK = <0x%08lx>\n",
                      (long) current_gdbarch->register_bytes_ok
                      /*REGISTER_BYTES_OK ()*/);
d2142 5
a2146 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_NAME = <0x%08lx>\n",
                      (long) current_gdbarch->register_name
                      /*REGISTER_NAME ()*/);
d2162 5
a2166 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_RAW_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_raw_size
                      /*REGISTER_RAW_SIZE ()*/);
d2173 5
a2177 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_SIM_REGNO = <0x%08lx>\n",
                      (long) current_gdbarch->register_sim_regno
                      /*REGISTER_SIM_REGNO ()*/);
d2180 2
a2185 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_TO_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->register_to_value
                      /*REGISTER_TO_VALUE ()*/);
d2187 14
a2200 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_register_type_p() = %d\n",
                      gdbarch_register_type_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: register_type = 0x%08lx\n",
                      (long) current_gdbarch->register_type);
d2215 5
a2219 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_VIRTUAL_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_size
                      /*REGISTER_VIRTUAL_SIZE ()*/);
d2235 7
d2243 6
a2248 3
                      "gdbarch_dump: REGISTER_VIRTUAL_TYPE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_type
                      /*REGISTER_VIRTUAL_TYPE ()*/);
d2250 1
d2252 13
a2264 2
                      "gdbarch_dump: remote_translate_xfer_address = 0x%08lx\n",
                      (long) current_gdbarch->remote_translate_xfer_address);
d2270 5
a2274 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: RETURN_VALUE_ON_STACK = <0x%08lx>\n",
                      (long) current_gdbarch->return_value_on_stack
                      /*RETURN_VALUE_ON_STACK ()*/);
d2281 5
a2285 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SDB_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->sdb_reg_to_regnum
                      /*SDB_REG_TO_REGNUM ()*/);
d2301 5
a2305 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_END = <0x%08lx>\n",
                      (long) current_gdbarch->sigtramp_end
                      /*SIGTRAMP_END ()*/);
d2321 5
a2325 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIGTRAMP_START = <0x%08lx>\n",
                      (long) current_gdbarch->sigtramp_start
                      /*SIGTRAMP_START ()*/);
d2332 5
a2336 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SKIP_PROLOGUE = <0x%08lx>\n",
                      (long) current_gdbarch->skip_prologue
                      /*SKIP_PROLOGUE ()*/);
d2343 5
a2347 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SKIP_TRAMPOLINE_CODE = <0x%08lx>\n",
                      (long) current_gdbarch->skip_trampoline_code
                      /*SKIP_TRAMPOLINE_CODE ()*/);
d2354 5
a2358 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SMASH_TEXT_ADDRESS = <0x%08lx>\n",
                      (long) current_gdbarch->smash_text_address
                      /*SMASH_TEXT_ADDRESS ()*/);
d2370 2
d2376 6
a2381 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: SOFTWARE_SINGLE_STEP = <0x%08lx>\n",
                      (long) current_gdbarch->software_single_step
                      /*SOFTWARE_SINGLE_STEP ()*/);
d2396 7
d2404 17
a2420 3
                      "gdbarch_dump: STAB_REG_TO_REGNUM = <0x%08lx>\n",
                      (long) current_gdbarch->stab_reg_to_regnum
                      /*STAB_REG_TO_REGNUM ()*/);
d2423 2
d2429 6
a2434 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: STORE_RETURN_VALUE = <0x%08lx>\n",
                      (long) current_gdbarch->store_return_value
                      /*STORE_RETURN_VALUE ()*/);
d2562 5
a2566 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PRINT_INSN = <0x%08lx>\n",
                      (long) current_gdbarch->print_insn
                      /*TARGET_PRINT_INSN ()*/);
d2590 5
a2594 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_PC = <0x%08lx>\n",
                      (long) current_gdbarch->read_pc
                      /*TARGET_READ_PC ()*/);
d2610 5
a2614 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_READ_SP = <0x%08lx>\n",
                      (long) current_gdbarch->read_sp
                      /*TARGET_READ_SP ()*/);
d2625 2
d2631 6
a2636 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_VIRTUAL_FRAME_POINTER = <0x%08lx>\n",
                      (long) current_gdbarch->virtual_frame_pointer
                      /*TARGET_VIRTUAL_FRAME_POINTER ()*/);
d2639 2
a2644 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_WRITE_PC = <0x%08lx>\n",
                      (long) current_gdbarch->write_pc
                      /*TARGET_WRITE_PC ()*/);
d2646 30
a2675 18
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_dummy_id_p() = %d\n",
                      gdbarch_unwind_dummy_id_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_dummy_id = 0x%08lx\n",
                      (long) current_gdbarch->unwind_dummy_id);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_pc_p() = %d\n",
                      gdbarch_unwind_pc_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_pc = 0x%08lx\n",
                      (long) current_gdbarch->unwind_pc);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_unwind_sp_p() = %d\n",
                      gdbarch_unwind_sp_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: unwind_sp = 0x%08lx\n",
                      (long) current_gdbarch->unwind_sp);
d2681 5
a2685 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: USE_STRUCT_CONVENTION = <0x%08lx>\n",
                      (long) current_gdbarch->use_struct_convention
                      /*USE_STRUCT_CONVENTION ()*/);
d2688 2
d2694 6
a2699 4
  fprintf_unfiltered (file,
                      "gdbarch_dump: VALUE_TO_REGISTER = <0x%08lx>\n",
                      (long) current_gdbarch->value_to_register
                      /*VALUE_TO_REGISTER ()*/);
d3164 1
a3164 1
gdbarch_deprecated_npc_regnum (struct gdbarch *gdbarch)
d3167 1
a3167 1
  /* Skip verify of deprecated_npc_regnum, invalid_p == 0 */
d3169 2
a3170 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_npc_regnum called\n");
  return gdbarch->deprecated_npc_regnum;
d3174 2
a3175 2
set_gdbarch_deprecated_npc_regnum (struct gdbarch *gdbarch,
                                   int deprecated_npc_regnum)
d3177 1
a3177 1
  gdbarch->deprecated_npc_regnum = deprecated_npc_regnum;
a3701 7
int
gdbarch_deprecated_call_dummy_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_call_dummy_address != NULL;
}

d3703 1
a3703 1
gdbarch_deprecated_call_dummy_address (struct gdbarch *gdbarch)
d3706 1
a3706 1
  gdb_assert (gdbarch->deprecated_call_dummy_address != NULL);
d3708 2
a3709 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_call_dummy_address called\n");
  return gdbarch->deprecated_call_dummy_address ();
d3713 2
a3714 2
set_gdbarch_deprecated_call_dummy_address (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_call_dummy_address_ftype deprecated_call_dummy_address)
d3716 1
a3716 1
  gdbarch->deprecated_call_dummy_address = deprecated_call_dummy_address;
d5045 1
a5045 1
gdbarch_deprecated_stack_align_p (struct gdbarch *gdbarch)
d5048 1
a5048 1
  return gdbarch->deprecated_stack_align != NULL;
d5052 1
a5052 1
gdbarch_deprecated_stack_align (struct gdbarch *gdbarch, CORE_ADDR sp)
d5055 1
a5055 1
  gdb_assert (gdbarch->deprecated_stack_align != NULL);
d5057 2
a5058 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_stack_align called\n");
  return gdbarch->deprecated_stack_align (sp);
d5062 2
a5063 2
set_gdbarch_deprecated_stack_align (struct gdbarch *gdbarch,
                                    gdbarch_deprecated_stack_align_ftype deprecated_stack_align)
d5065 1
a5065 1
  gdbarch->deprecated_stack_align = deprecated_stack_align;
d5093 1
a5093 8
gdbarch_deprecated_reg_struct_has_addr_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_reg_struct_has_addr != NULL;
}

int
gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch, int gcc_p, struct type *type)
d5096 1
a5096 11
  gdb_assert (gdbarch->deprecated_reg_struct_has_addr != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_reg_struct_has_addr called\n");
  return gdbarch->deprecated_reg_struct_has_addr (gcc_p, type);
}

void
set_gdbarch_deprecated_reg_struct_has_addr (struct gdbarch *gdbarch,
                                            gdbarch_deprecated_reg_struct_has_addr_ftype deprecated_reg_struct_has_addr)
{
  gdbarch->deprecated_reg_struct_has_addr = deprecated_reg_struct_has_addr;
d5100 1
a5100 1
gdbarch_frame_red_zone_size (struct gdbarch *gdbarch)
d5103 1
d5105 2
a5106 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_red_zone_size called\n");
  return gdbarch->frame_red_zone_size;
d5110 2
a5111 2
set_gdbarch_frame_red_zone_size (struct gdbarch *gdbarch,
                                 int frame_red_zone_size)
d5113 1
a5113 1
  gdbarch->frame_red_zone_size = frame_red_zone_size;
d5256 1
a5256 1
gdbarch_print_insn (struct gdbarch *gdbarch, bfd_vma vma, struct disassemble_info *info)
d5838 1
a5838 9
  /* Accumulate a list of names based on the registed list of
     architectures. */
  enum bfd_architecture a;
  int nr_arches = 0;
  const char **arches = NULL;
  struct gdbarch_registration *rego;
  for (rego = gdbarch_registry;
       rego != NULL;
       rego = rego->next)
d5840 24
a5863 11
      const struct bfd_arch_info *ap;
      ap = bfd_lookup_arch (rego->bfd_architecture, 0);
      if (ap == NULL)
        internal_error (__FILE__, __LINE__,
                        "gdbarch_architecture_names: multi-arch unknown");
      do
        {
          append_name (&arches, &nr_arches, ap->printable_name);
          ap = ap->next;
        }
      while (ap != NULL);
d5865 4
a5868 2
  append_name (&arches, &nr_arches, NULL);
  return arches;
d5909 6
d6145 5
@


1.150.2.13
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d55 1
d57 4
d206 1
a208 2
  gdbarch_return_value_ftype *return_value;
  gdbarch_return_value_on_stack_ftype *return_value_on_stack;
a212 1
  gdbarch_use_struct_convention_ftype *use_struct_convention;
d215 1
a221 1
  gdbarch_adjust_breakpoint_address_ftype *adjust_breakpoint_address;
a240 1
  gdbarch_stabs_argument_has_addr_ftype *stabs_argument_has_addr;
a251 1
  gdbarch_skip_solib_resolver_ftype *skip_solib_resolver;
a268 1
  gdbarch_regset_from_core_section_ftype *regset_from_core_section;
d374 1
a376 2
  0,  /* return_value */
  0,  /* return_value_on_stack */
a380 1
  0,  /* use_struct_convention */
d383 1
a389 1
  0,  /* adjust_breakpoint_address */
a408 1
  default_stabs_argument_has_addr,  /* stabs_argument_has_addr */
d414 1
a414 1
  convert_from_func_ptr_addr_identity,  /* convert_from_func_ptr_addr */
a419 1
  0,  /* skip_solib_resolver */
a436 1
  0,  /* regset_from_core_section */
d442 13
d543 1
a543 2
  current_gdbarch->stabs_argument_has_addr = default_stabs_argument_has_addr;
  current_gdbarch->convert_from_func_ptr_addr = convert_from_func_ptr_addr_identity;
a546 1
  current_gdbarch->skip_solib_resolver = generic_skip_solib_resolver;
d591 1
a591 7
/* Ensure that all values in a GDBARCH are reasonable.  */

/* NOTE/WARNING: The parameter is called ``current_gdbarch'' so that it
   just happens to match the global variable ``current_gdbarch''.  That
   way macros refering to that variable get the local and not the global
   version - ulgh.  Once everything is parameterised with gdbarch, this
   will go away. */
d594 1
a594 1
verify_gdbarch (struct gdbarch *current_gdbarch)
d603 1
a603 1
  if (current_gdbarch->byte_order == BFD_ENDIAN_UNKNOWN)
d605 1
a605 1
  if (current_gdbarch->bfd_arch_info == NULL)
d616 2
a617 2
  if (current_gdbarch->addr_bit == 0)
    current_gdbarch->addr_bit = TARGET_PTR_BIT;
d619 2
a620 2
  if (current_gdbarch->char_signed == -1)
    current_gdbarch->char_signed = 1;
d628 1
a628 1
      && (current_gdbarch->num_regs == -1))
d688 1
a690 2
  /* Skip verify of return_value, has predicate */
  /* Skip verify of return_value_on_stack, invalid_p == 0 */
a692 1
  /* Skip verify of use_struct_convention, invalid_p == 0 */
d695 1
d699 1
a699 1
      && (current_gdbarch->skip_prologue == 0))
d703 1
a703 1
      && (current_gdbarch->inner_than == 0))
d706 1
a706 1
      && (current_gdbarch->breakpoint_from_pc == 0))
a707 1
  /* Skip verify of adjust_breakpoint_address, has predicate */
d711 1
a711 1
      && (current_gdbarch->decr_pc_after_break == -1))
d714 1
a714 1
      && (current_gdbarch->function_start_offset == -1))
d718 1
a718 1
      && (current_gdbarch->frame_args_skip == -1))
d733 6
a738 7
  /* Skip verify of stabs_argument_has_addr, invalid_p == 0 */
  if (current_gdbarch->float_format == 0)
    current_gdbarch->float_format = default_float_format (current_gdbarch);
  if (current_gdbarch->double_format == 0)
    current_gdbarch->double_format = default_double_format (current_gdbarch);
  if (current_gdbarch->long_double_format == 0)
    current_gdbarch->long_double_format = default_double_format (current_gdbarch);
d744 1
a744 1
      && (current_gdbarch->print_insn == 0))
a746 1
  /* Skip verify of skip_solib_resolver, invalid_p == 0 */
a763 1
  /* Skip verify of regset_from_core_section, has predicate */
d783 1
a783 1
gdbarch_dump (struct gdbarch *current_gdbarch, struct ui_file *file)
a788 3
                      "gdbarch_dump: convert_from_func_ptr_addr = 0x%08lx\n",
                      (long) current_gdbarch->convert_from_func_ptr_addr);
  fprintf_unfiltered (file,
a794 12
                      "gdbarch_dump: gdbarch_regset_from_core_section_p() = %d\n",
                      gdbarch_regset_from_core_section_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: regset_from_core_section = 0x%08lx\n",
                      (long) current_gdbarch->regset_from_core_section);
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_return_value_p() = %d\n",
                      gdbarch_return_value_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: return_value = 0x%08lx\n",
                      (long) current_gdbarch->return_value);
  fprintf_unfiltered (file,
a800 3
                      "gdbarch_dump: stabs_argument_has_addr = 0x%08lx\n",
                      (long) current_gdbarch->stabs_argument_has_addr);
  fprintf_unfiltered (file,
a862 6
  fprintf_unfiltered (file,
                      "gdbarch_dump: gdbarch_adjust_breakpoint_address_p() = %d\n",
                      gdbarch_adjust_breakpoint_address_p (current_gdbarch));
  fprintf_unfiltered (file,
                      "gdbarch_dump: adjust_breakpoint_address = 0x%08lx\n",
                      (long) current_gdbarch->adjust_breakpoint_address);
d938 10
a1519 19
#ifdef DEPRECATED_REGISTER_RAW_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_RAW_SIZE_P()",
                      XSTRING (DEPRECATED_REGISTER_RAW_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_RAW_SIZE_P() = %d\n",
                      DEPRECATED_REGISTER_RAW_SIZE_P ());
#endif
#ifdef DEPRECATED_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_RAW_SIZE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_RAW_SIZE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_RAW_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_raw_size
                      /*DEPRECATED_REGISTER_RAW_SIZE ()*/);
#endif
a1527 38
#ifdef DEPRECATED_REGISTER_VIRTUAL_SIZE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_SIZE_P()",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_SIZE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_SIZE_P() = %d\n",
                      DEPRECATED_REGISTER_VIRTUAL_SIZE_P ());
#endif
#ifdef DEPRECATED_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_SIZE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_SIZE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_SIZE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_size
                      /*DEPRECATED_REGISTER_VIRTUAL_SIZE ()*/);
#endif
#ifdef DEPRECATED_REGISTER_VIRTUAL_TYPE_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_TYPE_P()",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_TYPE_P ()));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_TYPE_P() = %d\n",
                      DEPRECATED_REGISTER_VIRTUAL_TYPE_P ());
#endif
#ifdef DEPRECATED_REGISTER_VIRTUAL_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_REGISTER_VIRTUAL_TYPE(reg_nr)",
                      XSTRING (DEPRECATED_REGISTER_VIRTUAL_TYPE (reg_nr)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: DEPRECATED_REGISTER_VIRTUAL_TYPE = <0x%08lx>\n",
                      (long) current_gdbarch->deprecated_register_virtual_type
                      /*DEPRECATED_REGISTER_VIRTUAL_TYPE ()*/);
#endif
d2047 19
d2092 38
a2200 10
#ifdef SKIP_SOLIB_RESOLVER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SKIP_SOLIB_RESOLVER(pc)",
                      XSTRING (SKIP_SOLIB_RESOLVER (pc)));
  fprintf_unfiltered (file,
                      "gdbarch_dump: SKIP_SOLIB_RESOLVER = <0x%08lx>\n",
                      (long) current_gdbarch->skip_solib_resolver
                      /*SKIP_SOLIB_RESOLVER ()*/);
#endif
d4208 17
a4271 41
int
gdbarch_return_value_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->return_value != NULL;
}

enum return_value_convention
gdbarch_return_value (struct gdbarch *gdbarch, struct type *valtype, struct regcache *regcache, void *readbuf, const void *writebuf)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->return_value != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_value called\n");
  return gdbarch->return_value (gdbarch, valtype, regcache, readbuf, writebuf);
}

void
set_gdbarch_return_value (struct gdbarch *gdbarch,
                          gdbarch_return_value_ftype return_value)
{
  gdbarch->return_value = return_value;
}

int
gdbarch_return_value_on_stack (struct gdbarch *gdbarch, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->return_value_on_stack != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_return_value_on_stack called\n");
  return gdbarch->return_value_on_stack (type);
}

void
set_gdbarch_return_value_on_stack (struct gdbarch *gdbarch,
                                   gdbarch_return_value_on_stack_ftype return_value_on_stack)
{
  gdbarch->return_value_on_stack = return_value_on_stack;
}

a4340 17
gdbarch_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->use_struct_convention != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_use_struct_convention called\n");
  return gdbarch->use_struct_convention (gcc_p, value_type);
}

void
set_gdbarch_use_struct_convention (struct gdbarch *gdbarch,
                                   gdbarch_use_struct_convention_ftype use_struct_convention)
{
  gdbarch->use_struct_convention = use_struct_convention;
}

int
d4389 17
a4521 24
gdbarch_adjust_breakpoint_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->adjust_breakpoint_address != NULL;
}

CORE_ADDR
gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch, CORE_ADDR bpaddr)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->adjust_breakpoint_address != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_adjust_breakpoint_address called\n");
  return gdbarch->adjust_breakpoint_address (gdbarch, bpaddr);
}

void
set_gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch,
                                       gdbarch_adjust_breakpoint_address_ftype adjust_breakpoint_address)
{
  gdbarch->adjust_breakpoint_address = adjust_breakpoint_address;
}

int
a4933 17
gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch, struct type *type)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->stabs_argument_has_addr != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_stabs_argument_has_addr called\n");
  return gdbarch->stabs_argument_has_addr (gdbarch, type);
}

void
set_gdbarch_stabs_argument_has_addr (struct gdbarch *gdbarch,
                                     gdbarch_stabs_argument_has_addr_ftype stabs_argument_has_addr)
{
  gdbarch->stabs_argument_has_addr = stabs_argument_has_addr;
}

int
d5014 1
a5014 1
gdbarch_convert_from_func_ptr_addr (struct gdbarch *gdbarch, CORE_ADDR addr, struct target_ops *targ)
d5020 1
a5020 1
  return gdbarch->convert_from_func_ptr_addr (gdbarch, addr, targ);
a5121 17
CORE_ADDR
gdbarch_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->skip_solib_resolver != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_solib_resolver called\n");
  return gdbarch->skip_solib_resolver (pc);
}

void
set_gdbarch_skip_solib_resolver (struct gdbarch *gdbarch,
                                 gdbarch_skip_solib_resolver_ftype skip_solib_resolver)
{
  gdbarch->skip_solib_resolver = skip_solib_resolver;
}

a5452 24
int
gdbarch_regset_from_core_section_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->regset_from_core_section != NULL;
}

const struct regset *
gdbarch_regset_from_core_section (struct gdbarch *gdbarch, const char *sect_name, size_t sect_size)
{
  gdb_assert (gdbarch != NULL);
  gdb_assert (gdbarch->regset_from_core_section != NULL);
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_regset_from_core_section called\n");
  return gdbarch->regset_from_core_section (gdbarch, sect_name, sect_size);
}

void
set_gdbarch_regset_from_core_section (struct gdbarch *gdbarch,
                                      gdbarch_regset_from_core_section_ftype regset_from_core_section)
{
  gdbarch->regset_from_core_section = regset_from_core_section;
}

d5593 13
a5605 1
current_gdbarch_swap_init_hack (void)
d5608 1
a5608 1
  struct gdbarch_swap **curr = &current_gdbarch->swap;
d5615 1
a5615 2
	  (*curr) = GDBARCH_OBSTACK_ZALLOC (current_gdbarch,
					    struct gdbarch_swap);
d5617 1
a5617 2
	  (*curr)->swap = gdbarch_obstack_zalloc (current_gdbarch,
						  rego->sizeof_data);
d5626 2
a5627 2
static struct gdbarch *
current_gdbarch_swap_out_hack (void)
a5628 1
  struct gdbarch *old_gdbarch = current_gdbarch;
d5630 1
a5630 3

  gdb_assert (old_gdbarch != NULL);
  for (curr = old_gdbarch->swap;
d5633 1
a5633 6
    {
      memcpy (curr->swap, curr->source->data, curr->source->sizeof_data);
      memset (curr->source->data, 0, curr->source->sizeof_data);
    }
  current_gdbarch = NULL;
  return old_gdbarch;
d5637 1
a5637 1
current_gdbarch_swap_in_hack (struct gdbarch *new_gdbarch)
d5640 1
a5640 3

  gdb_assert (current_gdbarch == NULL);
  for (curr = new_gdbarch->swap;
a5643 1
  current_gdbarch = new_gdbarch;
d5766 2
a5767 3
/* Find an architecture that matches the specified INFO.  Create a new
   architecture if needed.  Return that new architecture.  Assumes
   that there is no current architecture.  */
d5769 2
a5770 2
static struct gdbarch *
find_arch_by_info (struct gdbarch *old_gdbarch, struct gdbarch_info info)
d5773 1
d5776 2
a5777 3
  /* The existing architecture has been swapped out - all this code
     works from a clean slate.  */
  gdb_assert (current_gdbarch == NULL);
d5779 31
a5809 4
  /* Fill in missing parts of the INFO struct using a number of
     sources: "set ..."; INFOabfd supplied; and the existing
     architecture.  */
  gdbarch_info_fill (old_gdbarch, &info);
d5817 1
a5817 1
			  "find_arch_by_info: info.bfd_arch_info %s\n",
d5822 1
a5822 1
			  "find_arch_by_info: info.byte_order %d (%s)\n",
d5828 1
a5828 1
			  "find_arch_by_info: info.osabi %d (%s)\n",
d5831 1
a5831 1
			  "find_arch_by_info: info.abfd 0x%lx\n",
d5834 1
a5834 1
			  "find_arch_by_info: info.tdep_info 0x%lx\n",
d5838 1
a5838 1
  /* Find the tdep code that knows about this architecture.  */
d5847 1
a5847 2
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			    "No matching architecture\n");
d5851 16
a5866 1
  /* Ask the tdep code for an architecture that matches "info".  */
d5869 2
a5870 2
  /* Did the tdep code like it?  No.  Reject the change and revert to
     the old architecture.  */
d5874 4
a5877 3
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			    "Target rejected architecture\n");
      return NULL;
d5880 3
a5882 4
  /* Is this a pre-existing architecture (as determined by already
     being initialized)?  Move it to the front of the architecture
     list (keeping the list sorted Most Recently Used).  */
  if (new_gdbarch->initialized_p)
a5883 2
      struct gdbarch_list **list;
      struct gdbarch_list *this;
d5885 1
a5885 2
	fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			    "Previous architecture 0x%08lx (%s) selected\n",
d5888 3
a5890 14
      /* Find the existing arch in the list.  */
      for (list = &rego->arches;
	   (*list) != NULL && (*list)->gdbarch != new_gdbarch;
	   list = &(*list)->next);
      /* It had better be in the list of architectures.  */
      gdb_assert ((*list) != NULL && (*list)->gdbarch == new_gdbarch);
      /* Unlink THIS.  */
      this = (*list);
      (*list) = this->next;
      /* Insert THIS at the front.  */
      this->next = rego->arches;
      rego->arches = this;
      /* Return it.  */
      return new_gdbarch;
d5893 34
a5926 9
  /* It's a new architecture.  */
  if (gdbarch_debug)
    fprintf_unfiltered (gdb_stdlog, "find_arch_by_info: "
			"New architecture 0x%08lx (%s) selected\n",
			(long) new_gdbarch,
			new_gdbarch->bfd_arch_info->printable_name);
  
  /* Insert the new architecture into the front of the architecture
     list (keep the list sorted Most Recently Used).  */
d5934 11
a5948 1
  new_gdbarch->initialized_p = 1;
d5950 8
a5957 6
  /* Initialize any per-architecture swap areas.  This phase requires
     a valid global CURRENT_GDBARCH.  Set it momentarially, and then
     swap the entire architecture out.  */
  current_gdbarch = new_gdbarch;
  current_gdbarch_swap_init_hack ();
  current_gdbarch_swap_out_hack ();
d5960 1
a5960 1
    gdbarch_dump (new_gdbarch, gdb_stdlog);
d5962 1
a5962 1
  return new_gdbarch;
a5964 34
struct gdbarch *
gdbarch_find_by_info (struct gdbarch_info info)
{
  /* Save the previously selected architecture, setting the global to
     NULL.  This stops things like gdbarch->init() trying to use the
     previous architecture's configuration.  The previous architecture
     may not even be of the same architecture family.  The most recent
     architecture of the same family is found at the head of the
     rego->arches list.  */
  struct gdbarch *old_gdbarch = current_gdbarch_swap_out_hack ();

  /* Find the specified architecture.  */
  struct gdbarch *new_gdbarch = find_arch_by_info (old_gdbarch, info);

  /* Restore the existing architecture.  */
  gdb_assert (current_gdbarch == NULL);
  current_gdbarch_swap_in_hack (old_gdbarch);

  return new_gdbarch;
}

/* Make the specified architecture current, swapping the existing one
   out.  */

void
deprecated_current_gdbarch_select_hack (struct gdbarch *new_gdbarch)
{
  gdb_assert (new_gdbarch != NULL);
  gdb_assert (current_gdbarch != NULL);
  gdb_assert (new_gdbarch->initialized_p);
  current_gdbarch_swap_out_hack ();
  current_gdbarch_swap_in_hack (new_gdbarch);
  architecture_changed_event ();
}
@


1.150.2.14
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d423 1
a423 1
  generic_skip_solib_resolver,  /* skip_solib_resolver */
d2220 1
d2222 8
a2229 2
                      "gdbarch_dump: skip_solib_resolver = 0x%08lx\n",
                      (long) current_gdbarch->skip_solib_resolver);
d5223 1
a5223 1
  return gdbarch->skip_solib_resolver (gdbarch, pc);
@


1.150.2.15
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d4 1
a4 3

   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free
   Software Foundation, Inc.
d140 1
d211 1
d313 1
d384 1
d496 1
d528 2
d635 1
d696 1
d712 6
a717 2
  /* Skip verify of decr_pc_after_break, invalid_p == 0 */
  /* Skip verify of function_start_offset, invalid_p == 0 */
d1101 19
d1379 8
d2996 17
d4428 24
d4629 2
a4630 1
  /* Skip verify of decr_pc_after_break, invalid_p == 0 */
d4647 2
a4648 1
  /* Skip verify of function_start_offset, invalid_p == 0 */
@


1.149
log
@2002-09-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (SIGTRAMP_END): Change to a predicate function.
	* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d247 1
d423 1
d780 1
d833 4
d4517 26
@


1.148
log
@       * gdbarch.sh (NAME_OF_MALLOC): New variable in the architecture
       vector. Will be useful for Interix.
       * gdbarch.h, gdbarch.c: Regenerate.

       * valops.c (value_allocate_space_in_inferior): Replace hard-coded
       name of the malloc function by NAME_OF_MALLOC.
@
text
@d797 1
a797 1
  /* Skip verify of sigtramp_end, invalid_p == 0 */
d4847 7
@


1.147
log
@* gdbarch.sh (SIGTRAMP_START, SIGTRAMP_END): New methods.
* gdbarch.h, gdbarch.c: Re-generate.
* blockframe.c (find_pc_sect_partial_function): Convert to use
SIGTRAMP_START_P predicate.
@
text
@d270 1
d427 1
d558 1
d803 1
d1492 8
d4968 17
@


1.146
log
@Index: ChangeLog
===================================================================
RCS file: /cvs/src/src/gdb/ChangeLog,v
retrieving revision 1.3144
diff -u -r1.3144 ChangeLog
--- ChangeLog	23 Aug 2002 23:05:38 -0000	1.3144
+++ ChangeLog	23 Aug 2002 23:14:45 -0000
@@@@ -1,3 +1,53 @@@@
2002-08-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (STORE_RETURN_VALUE): Add regcache parameter.
	(DEPRECATED_STORE_RETURN_VALUE): New method.
	(EXTRACT_RETURN_VALUE): Make buffer parameter a void pointer.
	* gdbarch.h, gdbarch.c: Re-generate.

	* values.c (set_return_value): Pass current_regcache to
	STORE_RETURN_VALUE.
	* arch-utils.h (legacy_store_return_value): Declare.
	* arch-utils.c (legacy_store_return_value): New function.
	(legacy_extract_return_value): Update parameters.

	* config/pa/tm-hppa.h (DEPRECATED_STORE_RETURN_VALUE): Rename
	STORE_RETURN_VALUE.
	* config/pa/tm-hppa64.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/sparc/tm-sparc.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/z8k/tm-z8k.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/sparc/tm-sparclet.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/mn10200/tm-mn10200.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m68k/tm-linux.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m68k/tm-delta68.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m32r/tm-m32r.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/h8500/tm-h8500.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/h8300/tm-h8300.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.

	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* i386-tdep.c (i386_extract_return_value): Update.
	* arch-utils.c (legacy_extract_return_value): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.

Index: doc/ChangeLog
2002-08-21  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Update
	STORE_RETURN_VALUE, mention regcache.
@
text
@d263 2
d419 2
d793 2
d1871 22
d4809 45
@


1.146.4.1
log
@Support for partial save/restore of the registers.
@
text
@a267 2
  gdbarch_next_cooked_register_to_save_ftype *next_cooked_register_to_save;
  gdbarch_next_cooked_register_to_restore_ftype *next_cooked_register_to_restore;
a421 2
  default_next_cooked_register_to_save,
  default_next_cooked_register_to_restore,
a551 2
  current_gdbarch->next_cooked_register_to_save = default_next_cooked_register_to_save;
  current_gdbarch->next_cooked_register_to_restore = default_next_cooked_register_to_restore;
a793 6
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->next_cooked_register_to_save == default_next_cooked_register_to_save))
    fprintf_unfiltered (log, "\n\tnext_cooked_register_to_save");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->next_cooked_register_to_restore == default_next_cooked_register_to_restore))
    fprintf_unfiltered (log, "\n\tnext_cooked_register_to_restore");
a823 8
                        "gdbarch_dump: next_cooked_register_to_restore = 0x%08lx\n",
                        (long) current_gdbarch->next_cooked_register_to_restore);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: next_cooked_register_to_save = 0x%08lx\n",
                        (long) current_gdbarch->next_cooked_register_to_save);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a4882 38
}

int
gdbarch_next_cooked_register_to_save (struct gdbarch *gdbarch, int last_regnum)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->next_cooked_register_to_save == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_next_cooked_register_to_save invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_next_cooked_register_to_save called\n");
  return gdbarch->next_cooked_register_to_save (gdbarch, last_regnum);
}

void
set_gdbarch_next_cooked_register_to_save (struct gdbarch *gdbarch,
                                          gdbarch_next_cooked_register_to_save_ftype next_cooked_register_to_save)
{
  gdbarch->next_cooked_register_to_save = next_cooked_register_to_save;
}

int
gdbarch_next_cooked_register_to_restore (struct gdbarch *gdbarch, int last_regnum)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->next_cooked_register_to_restore == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_next_cooked_register_to_restore invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_next_cooked_register_to_restore called\n");
  return gdbarch->next_cooked_register_to_restore (gdbarch, last_regnum);
}

void
set_gdbarch_next_cooked_register_to_restore (struct gdbarch *gdbarch,
                                             gdbarch_next_cooked_register_to_restore_ftype next_cooked_register_to_restore)
{
  gdbarch->next_cooked_register_to_restore = next_cooked_register_to_restore;
@


1.146.4.2
log
@2002-08-26  Andrew Cagney  <ac131313@@redhat.com>

	* i386-tdep.c: Include "reggroups.h".
	(i386_register_reggroup_p): New function.
	(i386_add_reggroups, i386_init_reggroups): New function.
	(i386_gdbarch_init): Call i386_add_reggroups.  Set
	register_reggroup_p.
	(_initialize_i386_tdep): Call i386_init_reggroups.

	* infcmd.c: Include <ctype.h>.
	(registers_info): Rewrite.  Handle reggroups.
	(default_print_registers_info): Use gdbarch_register_reggroup_p.
	(print_float_info): Use gdbarch_register_reggroup_p.

	* regcache.c: Include "reggroups.h".
	(regcache_dump): Include the register groups in the ``maint print
	registers'' command.

	* infcmd.c: Include "regroup.h".
	(default_print_registers_info): Use gdbarch_register_reggroup_p.
	(print_float_info): Ditto.

	* gdbarch.sh: Include "reggroups.h".
	(register_reggroup_p): New method.
	(struct reggroup): Add opaque declaration.
	* gdbarch.h, gdbarch.c: Regenerate.

	* Makefile.in (SFILES): Add reggroups.c.
	(reggroups_h): Define.
	(COMMON_OBS): Add reggroups.o.
	(reggroups.o): Specify dependencies.
	(gdbarch.o, infcmd.o, i386-tdep.o): Update dependencies.

	* reggroups.c: New file.
	* reggroups.h: New file.
@
text
@a66 1
#include "reggroup.h"
a269 1
  gdbarch_register_reggroup_p_ftype *register_reggroup_p;
a425 1
  default_register_reggroup_p,
a557 1
  current_gdbarch->register_reggroup_p = default_register_reggroup_p;
a805 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_reggroup_p == default_register_reggroup_p))
    fprintf_unfiltered (log, "\n\tregister_reggroup_p");
a843 4
                        "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
                        (long) current_gdbarch->register_reggroup_p);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a4940 19
}

int
gdbarch_register_reggroup_p (struct gdbarch *gdbarch, int regnum, struct reggroup *reggroup)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->register_reggroup_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_reggroup_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_reggroup_p called\n");
  return gdbarch->register_reggroup_p (gdbarch, regnum, reggroup);
}

void
set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch,
                                 gdbarch_register_reggroup_p_ftype register_reggroup_p)
{
  gdbarch->register_reggroup_p = register_reggroup_p;
@


1.146.4.3
log
@2002-08-26  Andrew Cagney  <ac131313@@redhat.com>

	* arch-utils.c (next_raw_register): Rename next_cooked_register.
	(default_next_cooked_register_to_save): Use.
	(default_next_cooked_register_to_restore): Use.
@
text
@d67 1
a67 1
#include "reggroups.h"
@


1.145
log
@2002-08-21  Andrew Cagney  <ac131313@@redhat.com>
* infcmd.c (default_print_registers_info): Replace
do_registers_info.
(registers_info): Use gdbarch_print_registers_info instead of
DO_REGISTERS_INFO.
* inferior.h (default_print_registers_info): Replace
do_registers_info.
* gdbarch.sh (PRINT_REGISTERS_INFO): New method.
(DO_REGISTERS_INFO): Change to a predicate function.
* gdbarch.h, gdbarch.c: Regenerate.

2002-08-21  Andrew Cagney  <ac131313@@redhat.com>
* gdbint.texinfo (Target Architecture Definition): Document
print_registers_info.  Note that DO_REGISTERS_INFO is deprecated.
@
text
@a212 2
  gdbarch_extract_return_value_ftype *extract_return_value;
  gdbarch_deprecated_extract_return_value_ftype *deprecated_extract_return_value;
d218 1
d220 2
d416 1
d524 1
d526 1
a526 1
  current_gdbarch->push_arguments = default_push_arguments;
a708 4
  /* Skip verify of extract_return_value, invalid_p == 0 */
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->deprecated_extract_return_value == 0))
    fprintf_unfiltered (log, "\n\tdeprecated_extract_return_value");
d720 2
a721 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->store_return_value == 0))
    fprintf_unfiltered (log, "\n\tstore_return_value");
d1074 14
d1955 2
a1956 2
                      "STORE_RETURN_VALUE(type, valbuf)",
                      XSTRING (STORE_RETURN_VALUE (type, valbuf)));
a3790 38
void
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, char *valbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_extract_return_value invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_return_value called\n");
  gdbarch->extract_return_value (type, regcache, valbuf);
}

void
set_gdbarch_extract_return_value (struct gdbarch *gdbarch,
                                  gdbarch_extract_return_value_ftype extract_return_value)
{
  gdbarch->extract_return_value = extract_return_value;
}

void
gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, char *regbuf, char *valbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_extract_return_value invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_return_value called\n");
  gdbarch->deprecated_extract_return_value (type, regbuf, valbuf);
}

void
set_gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_extract_return_value_ftype deprecated_extract_return_value)
{
  gdbarch->deprecated_extract_return_value = deprecated_extract_return_value;
}

d3894 20
a3913 1
gdbarch_store_return_value (struct gdbarch *gdbarch, struct type *type, char *valbuf)
d3921 1
a3921 1
  gdbarch->store_return_value (type, valbuf);
d3929 38
@


1.144
log
@2002-08-20  Michael Snyder  <msnyder@@redhat.com>

        * gdbarch.sh (IN_SOLIB_RETURN_TRAMPOLINE): Add.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c, arch-utils.h (generic_in_solib_return_trampoline):
	Add.
        * infrun.c (IN_SOLIB_RETURN_TRAMPOLINE): Delete default definition.
@
text
@d175 1
d328 1
d498 1
a498 1
  current_gdbarch->do_registers_info = do_registers_info;
d645 2
a646 1
  /* Skip verify of do_registers_info, invalid_p == 0 */
d1574 4
d3006 7
d3030 19
@


1.143
log
@2002-08-15  Andrew Cagney  <ac131313@@redhat.com>

* infcmd.c (vector_info): New function.
(_initialize_infcmd): Add command "info vector".
(print_vector_info): New function.

* gdbarch.sh (PRINT_VECTOR_INFO): New method
* gdbarch.h, gdbarch.c: Regenerate.

Index: doc/ChangeLog
2002-08-15  Andrew Cagney  <ac131313@@redhat.com>

* gdbint.texinfo (Target Architecture Definition): Document
PRINT_VECTOR_INFO.
* gdb.texinfo (Vector Unit): Document "info vectors" command.
@
text
@d259 1
d412 1
d541 1
d786 1
d1418 11
d4679 19
@


1.142
log
@2002-08-15  Andrew Cagney  <ac131313@@redhat.com>
* gdbarch.sh (PRINT_FLOAT_INFO): Change to a predicate method.
Add `args' parameter.
* gdbarch.h, gdbarch.c: Regenerate.

* arm-tdep.c (arm_print_float_info): Add the parameter `args'.

* infcmd.c (float_info): Call print_float_info.
(print_float_info): New function.  By default, print the
floating-point registers.

* arch-utils.h (default_print_float_info): Delete declaration.
* arch-utils.c (default_print_float_info): Delete function.
@
text
@d176 1
d410 1
d642 1
d1554 4
d3027 26
@


1.141
log
@2002-08-09  Andrew Cagney  <cagney@@redhat.com>

* regcache.c (regcache_dump): Compare the register offset
with REGISTER_BYTE.
* arch-utils.c (generic_register_byte): New function.
* arch-utils.h (generic_register_byte): Declare.
* gdbarch.sh (REGISTER_BYTE): Default to generic_register_byte.
* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d325 1
a325 1
  default_print_float_info,
a492 1
  current_gdbarch->print_float_info = default_print_float_info;
d639 1
a639 1
  /* Skip verify of print_float_info, invalid_p == 0 */
d2996 7
d3004 1
a3004 1
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame)
d3012 1
a3012 1
  gdbarch->print_float_info (gdbarch, file, frame);
@


1.140
log
@2002-08-07  Andrew Cagney  <ac131313@@redhat.com>

* regcache.c (pseudo_register): Delete function.
(fetch_register): Delete function.
(store_register): Delete function.
(regcache_raw_read, legacy_read_register_gen): Use
target_fetch_registers instead of fetch_register.
(legacy_write_register_gen, regcache_raw_write): Use
target_store_register instead of store_register.
(write_register_bytes): Ditto.

* gdbarch.sh (FETCH_PSEUDO_REGISTER): Delete.
(STORE_PSEUDO_REGISTER): Delete.
* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d318 1
a318 1
  0,
d487 1
d627 1
a627 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_byte == 0))
    fprintf_unfiltered (log, "\n\tregister_byte");
@


1.139
log
@Fri Aug  2 15:53:50 2002  Andrew Cagney  <cagney@@redhat.com>

* gdbarch.sh: Include "gdb_string.h".
* gdbarch.c: Regenerate.

* regcache.c: Include "gdb_string.h".
* ax-general.c: Ditto.
* varobj.c: Ditto.
* std-regs.c: Ditto.
* fbsd-proc.c: Ditto.
* thread.c: Ditto.

* Makefile.in (regcache.o): Update dependencies.
(thread.o, gdbarch.o): Ditto.
(ax-general.o, gdbarch.o): Ditto.
(varobj.o, std-regs.o): Ditto.
(fbsd-proc.o): Specify dependencies.
@
text
@a206 2
  gdbarch_fetch_pseudo_register_ftype *fetch_pseudo_register;
  gdbarch_store_pseudo_register_ftype *store_pseudo_register;
a408 2
  0,
  0,
a694 2
  /* Skip verify of fetch_pseudo_register, has predicate */
  /* Skip verify of store_pseudo_register, has predicate */
a1175 14
#ifdef FETCH_PSEUDO_REGISTER
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_PSEUDO_REGISTER(regnum)",
                      XSTRING (FETCH_PSEUDO_REGISTER (regnum)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FETCH_PSEUDO_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->fetch_pseudo_register
                        /*FETCH_PSEUDO_REGISTER ()*/);
#endif
a1910 14
#ifdef STORE_PSEUDO_REGISTER
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STORE_PSEUDO_REGISTER(regnum)",
                      XSTRING (STORE_PSEUDO_REGISTER (regnum)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_PSEUDO_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->store_pseudo_register
                        /*STORE_PSEUDO_REGISTER ()*/);
#endif
a3607 52
}

int
gdbarch_fetch_pseudo_register_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->fetch_pseudo_register != 0;
}

void
gdbarch_fetch_pseudo_register (struct gdbarch *gdbarch, int regnum)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->fetch_pseudo_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_fetch_pseudo_register invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fetch_pseudo_register called\n");
  gdbarch->fetch_pseudo_register (regnum);
}

void
set_gdbarch_fetch_pseudo_register (struct gdbarch *gdbarch,
                                   gdbarch_fetch_pseudo_register_ftype fetch_pseudo_register)
{
  gdbarch->fetch_pseudo_register = fetch_pseudo_register;
}

int
gdbarch_store_pseudo_register_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->store_pseudo_register != 0;
}

void
gdbarch_store_pseudo_register (struct gdbarch *gdbarch, int regnum)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->store_pseudo_register == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_store_pseudo_register invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_store_pseudo_register called\n");
  gdbarch->store_pseudo_register (regnum);
}

void
set_gdbarch_store_pseudo_register (struct gdbarch *gdbarch,
                                   gdbarch_store_pseudo_register_ftype store_pseudo_register)
{
  gdbarch->store_pseudo_register = store_pseudo_register;
@


1.138
log
@2002-08-02  Andrew Cagney  <cagney@@redhat.com>
* gdbarch.sh (pseudo_register_read, pseudo_register_write):
Replace the architecture methods register_read and register_write.
* gdbarch.h, gdbarch.c: Regenerate.
* regcache.c (init_regcache_descr): Update.
(read_register_gen): Update.
(write_register_gen): Update.
(supply_register): Update comment.
* sh-tdep.c (sh_gdbarch_init): Update.
(sh_pseudo_register_read, sh64_pseudo_register_read): Add
`regcache' and `gdbarch' parameters.  Make `buffer' a void
pointer.  Update code.
(sh_pseudo_register_write, sh64_pseudo_register_write): Add
`regcache' and `gdbarch' parameters.  Make `buffer' a constant
void pointer.  Update code.
(sh64_register_write): Delete.
(sh4_register_read): Delete.
(sh64_register_read): Delete.
(sh4_register_write): Delete.
(sh_sh4_register_convert_to_raw): Make `from' parameter a constant
void pointer, `to' parameter a void pointer.
(sh_sh64_register_convert_to_raw): Ditto.
@
text
@d65 1
@


1.137
log
@Fix some K&R isms.
@
text
@d149 2
a150 2
  gdbarch_register_read_ftype *register_read;
  gdbarch_register_write_ftype *register_write;
d605 2
a606 2
  /* Skip verify of register_read, has predicate */
  /* Skip verify of register_write, has predicate */
d823 2
a824 2
                        "gdbarch_dump: register_read = 0x%08lx\n",
                        (long) current_gdbarch->register_read);
d827 2
a828 2
                        "gdbarch_dump: register_write = 0x%08lx\n",
                        (long) current_gdbarch->register_write);
d2557 1
a2557 1
gdbarch_register_read_p (struct gdbarch *gdbarch)
d2560 1
a2560 1
  return gdbarch->register_read != 0;
d2564 1
a2564 1
gdbarch_register_read (struct gdbarch *gdbarch, int regnum, char *buf)
d2567 1
a2567 1
  if (gdbarch->register_read == 0)
d2569 1
a2569 1
                    "gdbarch: gdbarch_register_read invalid");
d2571 2
a2572 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_read called\n");
  gdbarch->register_read (gdbarch, regnum, buf);
d2576 2
a2577 2
set_gdbarch_register_read (struct gdbarch *gdbarch,
                           gdbarch_register_read_ftype register_read)
d2579 1
a2579 1
  gdbarch->register_read = register_read;
d2583 1
a2583 1
gdbarch_register_write_p (struct gdbarch *gdbarch)
d2586 1
a2586 1
  return gdbarch->register_write != 0;
d2590 1
a2590 1
gdbarch_register_write (struct gdbarch *gdbarch, int regnum, char *buf)
d2593 1
a2593 1
  if (gdbarch->register_write == 0)
d2595 1
a2595 1
                    "gdbarch: gdbarch_register_write invalid");
d2597 2
a2598 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_write called\n");
  gdbarch->register_write (gdbarch, regnum, buf);
d2602 2
a2603 2
set_gdbarch_register_write (struct gdbarch *gdbarch,
                            gdbarch_register_write_ftype register_write)
d2605 1
a2605 1
  gdbarch->register_write = register_write;
@


1.136
log
@* gdbarch.sh (struct regcache): Add opaque declaration.
(EXTRACT_RETURN_VALUE): New architecture method.
(EXTRACT_STRUCT_VALUE_ADDRESS): Ditto.
* gdbarch.h, gdbarch.c: Regenerate.
* arch-utils.c (legacy_extract_return_value): New function.
* arch-utils.h (legacy_extract_return_value): Declare.
* values.c (value_being_returned): Re-enable code handling
EXTRACT_STRUCT_VALUE_ADDRESS.  Move
deprecated_grub_regcache_for_registers call to block handling
DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
(EXTRACT_RETURN_VALUE): Do not define.
@
text
@d425 1
a425 1
initialize_non_multiarch ()
@


1.135
log
@* gdbarch.sh (REGISTER_NAME): Change return type a constant string
pointer.
* gdbarch.h, gdbarch.c: Regenerate.
* config/mips/tm-mips.h (mips_register_name): Update.
* i386-tdep.h (i386_register_name): Update.
* mips-tdep.c (mips_register_name): Update
* alpha-tdep.c (alpha_register_name): Update.
* arch-utils.c (legacy_register_name): Update.
* arch-utils.h (legacy_register_name): Update.
* avr-tdep.c (avr_register_name): Update.
* ia64-tdep.c (ia64_register_name): Update.
* i386-tdep.c (i386_register_name): Update.
* sparc-tdep.c (sparc32_register_name): Update.
(sparc64_register_name): Update.
(sparclite_register_name): Update.
(sparclet_register_name):
* sh-tdep.c (sh_generic_register_name): Update.
(sh_sh_register_name): Update.
(sh_sh3_register_name): Update.
(sh_sh3e_register_name): Update.
(sh_sh_dsp_register_name): Update.
(sh_sh3_dsp_register_name): Update.
(sh_sh4_register_name): Update.
(sh_sh64_register_name): Update.
* s390-tdep.c (s390_register_name): Update.
* rs6000-tdep.c (rs6000_register_name): Update.
* ns32k-tdep.c (ns32k_register_name_32082): Update.
(ns32k_register_name_32382): Update.
* d10v-tdep.c (d10v_ts2_register_name): Update.
(d10v_ts3_register_name): Update.
* xstormy16-tdep.c (xstormy16_register_name): Update.
* vax-tdep.c (vax_register_name): Update.
* v850-tdep.c (v850_register_name): Update.
* m68hc11-tdep.c (m68hc11_register_name): Update.
* mn10300-tdep.c (mn10300_generic_register_name): Update.
(am33_register_name): Update.
@
text
@d212 1
d220 1
d410 2
d519 1
d704 1
d722 1
d1148 25
d3779 19
d3935 26
@


1.134
log
@+	* gdbarch.sh (DEPRECATED_EXTRACT_RETURN_VALUE): Rename
+	EXTRACT_RETURN_VALUE.
+	(DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS): Rename
+	EXTRACT_STRUCT_VALUE_ADDRESS.
+	* gdbarch.h, gdbarch.c: Regenerate.
+
+	* values.c (value_being_returned): Handle
+	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
+	(EXTRACT_RETURN_VALUE): Define as DEPRECATED_EXTRACT_RETURN_VALUE.
+
+	* arm-linux-tdep.c (arm_linux_init_abi): Update.
+	* arm-tdep.c (arm_gdbarch_init): Update.
+	* avr-tdep.c (avr_gdbarch_init): Update.
+	* cris-tdep.c (cris_gdbarch_init): Update.
+	* d10v-tdep.c (d10v_gdbarch_init): Update.
+	* ia64-tdep.c (ia64_gdbarch_init): Update.
+	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
+	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
+	* s390-tdep.c (s390_gdbarch_init): Update.
+	* sh-tdep.c (sh_gdbarch_init): Update.
+	* s390-tdep.c (s390_gdbarch_init): Update.
+	* sparc-tdep.c (sparc_gdbarch_init): Update.
+	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
+	* v850-tdep.c (v850_gdbarch_init): Update.
+	* vax-tdep.c (vax_gdbarch_init): Update.
+	* x86-64-tdep.c (x86_64_gdbarch_init): Update.
+	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
+
+	* config/arc/tm-arc.h: Update.
+	* config/d30v/tm-d30v.h: Update.
+	* config/fr30/tm-fr30.h: Update.
+	* config/h8300/tm-h8300.h: Update.
* config/h8500/tm-h8500.h: Update.
* config/i386/tm-i386.h: Update.
* config/i386/tm-ptx.h: Update.
* config/i386/tm-symmetry.h: Update.
* config/i960/tm-i960.h: Update.
* config/m32r/tm-m32r.h: Update.
* config/m68k/tm-delta68.h: Update.
* config/m68k/tm-linux.h: Update.
* config/m68k/tm-m68k.h: Update.
* config/m88k/tm-m88k.h: Update.
* config/mcore/tm-mcore.h: Update.
* config/mips/tm-mips.h: Update.
* config/mn10200/tm-mn10200.h: Update.
* config/pa/tm-hppa.h: Update.
* config/pa/tm-hppa64.h: Update.
* config/sparc/tm-sp64.h: Update.
* config/sparc/tm-sparc.h: Update.
* config/sparc/tm-sparclet.h: Update.
* config/z8k/tm-z8k.h: Update.
@
text
@d2809 1
a2809 1
char *
@


1.133
log
@Make print_float_info() multi-arch pure.  Add ui_file and frame parameters.
@
text
@d212 1
a212 1
  gdbarch_extract_return_value_ftype *extract_return_value;
d219 1
a219 1
  gdbarch_extract_struct_value_address_ftype *extract_struct_value_address;
d700 2
a701 2
      && (gdbarch->extract_return_value == 0))
    fprintf_unfiltered (log, "\n\textract_return_value");
d716 1
a716 1
  /* Skip verify of extract_struct_value_address, has predicate */
d1041 25
a1140 25
#ifdef EXTRACT_RETURN_VALUE
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_RETURN_VALUE(type, regbuf, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regbuf, valbuf)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->extract_return_value
                        /*EXTRACT_RETURN_VALUE ()*/);
#endif
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS (regbuf)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->extract_struct_value_address
                        /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
d3747 1
a3747 1
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, char *regbuf, char *valbuf)
d3750 1
a3750 1
  if (gdbarch->extract_return_value == 0)
d3752 1
a3752 1
                    "gdbarch: gdbarch_extract_return_value invalid");
d3754 2
a3755 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_return_value called\n");
  gdbarch->extract_return_value (type, regbuf, valbuf);
d3759 2
a3760 2
set_gdbarch_extract_return_value (struct gdbarch *gdbarch,
                                  gdbarch_extract_return_value_ftype extract_return_value)
d3762 1
a3762 1
  gdbarch->extract_return_value = extract_return_value;
d3887 1
a3887 1
gdbarch_extract_struct_value_address_p (struct gdbarch *gdbarch)
d3890 1
a3890 1
  return gdbarch->extract_struct_value_address != 0;
d3894 1
a3894 1
gdbarch_extract_struct_value_address (struct gdbarch *gdbarch, char *regbuf)
d3897 1
a3897 1
  if (gdbarch->extract_struct_value_address == 0)
d3899 1
a3899 1
                    "gdbarch: gdbarch_extract_struct_value_address invalid");
d3901 2
a3902 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_struct_value_address called\n");
  return gdbarch->extract_struct_value_address (regbuf);
d3906 2
a3907 2
set_gdbarch_extract_struct_value_address (struct gdbarch *gdbarch,
                                          gdbarch_extract_struct_value_address_ftype extract_struct_value_address)
d3909 1
a3909 1
  gdbarch->extract_struct_value_address = extract_struct_value_address;
@


1.132
log
@* frame.c (GET_SAVED_REGISTER): Delete macro definition.
(default_get_saved_register): Delete function.
* gdbarch.sh (GET_SAVED_REGISTER): Set default to
generic_unwind_get_saved_register.
* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d324 1
a324 1
  0,
a1535 8
#ifdef PRINT_FLOAT_INFO
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PRINT_FLOAT_INFO()",
                      XSTRING (PRINT_FLOAT_INFO ()));
#endif
d1538 2
a1539 4
                        "gdbarch_dump: PRINT_FLOAT_INFO = 0x%08lx\n",
                        (long) current_gdbarch->print_float_info
                        /*PRINT_FLOAT_INFO ()*/);
#endif
d3000 1
a3000 1
gdbarch_print_float_info (struct gdbarch *gdbarch)
d3008 1
a3008 1
  gdbarch->print_float_info ();
@


1.131
log
@* gdbarch.sh (FRAME_CHAIN_VALID): Set default to
generic_func_frame_chain_valid.
* gdbarch.h, gdbarch.c: Re-generate.
* blockframe.c (generic_func_frame_chain_valid): Only check
PC_IN_CALL_DUMMY when generic dummy frames.  Don't worry about
passing FP to PC_IN_CALL_DUMMY.
Fix PR gdb/360.
@
text
@d349 1
a349 1
  generic_get_saved_register,
d507 1
d686 1
a686 3
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->get_saved_register == 0))
    fprintf_unfiltered (log, "\n\tget_saved_register");
@


1.130
log
@* gdbarch.sh (struct gdbarch_data): Add field init_p.
(register_gdbarch_data): Initialize init_p.
(gdbarch_data): Initialize data pointer using the init function.
(init_gdbarch_data): Delete function.
(gdbarch_update_p): Update.
(initialize_non_multiarch): Update.
(struct gdbarch): Add field initialized_p.
* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d526 1
a526 1
  current_gdbarch->frame_chain_valid = func_frame_chain_valid;
@


1.129
log
@* Makefile.in (arch-utils.o): Add $(sim_regno_h).
* arch-utils.c: Include "sim-regno.h".
* gdbarch.sh: Don't include "sim-regno.h".
* gdbarch.h, gdbarch.c: Regenerate.
* sim-regno.h (legacy_register_sim_regno): Move declaration from
here.
* arch-utils.h (legacy_register_sim_regno): To here.
* remote-sim.c (legacy_register_sim_regno): Move function from
here.
* arch-utils.c (legacy_register_sim_regno): To here.
@
text
@a70 1
static void init_gdbarch_data (struct gdbarch *);
d89 2
d273 1
a427 1
  init_gdbarch_data (&startup_gdbarch);
d4775 1
d4802 1
d4811 1
a4816 20
/* Walk through all the registered users initializing each in turn. */

static void
init_gdbarch_data (struct gdbarch *gdbarch)
{
  struct gdbarch_data_registration *rego;
  for (rego = gdbarch_data_registry.registrations;
       rego != NULL;
       rego = rego->next)
    {
      struct gdbarch_data *data = rego->data;
      gdb_assert (data->index < gdbarch->nr_data);
      if (data->init != NULL)
        {
          void *pointer = data->init (gdbarch);
          set_gdbarch_data (gdbarch, data, pointer);
        }
    }
}

d4849 1
a4849 1
/* Initialize the current value of thee specified per-architecture
d4858 5
a4862 2
  if (data->free != NULL && gdbarch->data[data->index] != NULL)
    data->free (gdbarch, gdbarch->data[data->index]);
d4873 14
d5280 1
a5280 1
  /* Switch to this new architecture.  Dump it out. */
d5282 1
d5301 1
a5301 2
  /* Initialize the per-architecture data-pointer of all parties that
     registered an interest in this architecture.  CURRENT_GDBARCH
a5302 1
  init_gdbarch_data (new_gdbarch);
@


1.128
log
@* sim-regno.h: New file.
* Makefile.in (sim_regno_h): Define.
(d10v-tdep.o, remote-sim.o): Add dependency on $(sim_regno_h).
* remote-sim.c: Include "sim-regno.h" and "gdb_assert.h".
(legacy_register_sim_regno): New function.
(one2one_register_sim_regno): New function.
(gdbsim_fetch_register): Rewrite.
(gdbsim_store_register): Only store a register when
REGISTER_SIM_REGNO is valid.
* d10v-tdep.c: Include "sim-regno.h".
(d10v_ts2_register_sim_regno): Add legacy_regiter_sim_regno check.
(d10v_ts3_register_sim_regno): Ditto.
* gdbarch.sh: Include "sim-regno.h".
(REGISTER_SIM_REGNO): Set default to legacy_register_sim_regno.
* gdbarch.h, gdbarch.c: Regenerate.
* arch-utils.h (default_register_sim_regno): Delete declaration.
* arch-utils.c (default_register_sim_regno): Delete function.
@
text
@a41 1
#include "sim-regno.h"		/* For legacy_register_sim_regno().  */
@


1.127
log
@* config/m88k/tm-m88k.h: Update copyright.
(m88k_target_write_pc): Declare
(TARGET_WRITE_PC): Redefine using m88k_target_write_pc.
(M88K_NNPC_REGNUM): Rename NNPC_REGNUM.
(SHIFT_INST_REGS): Update definition.
* m88k-tdep.c (m88k_target_write_pc): New function.  Implement
using old definition of TARGET_WRITE_PC.
* regcache.c (generic_target_write_pc): Delete code handling
NNPC_REGNUM.
* gdbarch.sh (NNPC_REGNUM): Delete.
* gdbarch.h, gdbarch.c: Regenerate.

* gdbint.texinfo (Target Architecture Definition): Delete
documentation on NNPC_REGNUM.
@
text
@d42 1
d492 1
a492 1
  current_gdbarch->register_sim_regno = default_register_sim_regno;
@


1.127.4.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d71 1
a89 2
  /* Has this architecture been fully initialized?  */
  int initialized_p;
d211 1
a211 1
  gdbarch_deprecated_extract_return_value_ftype *deprecated_extract_return_value;
d218 1
a218 1
  gdbarch_deprecated_extract_struct_value_address_ftype *deprecated_extract_struct_value_address;
a271 1
  1, /* Always initialized.  */
a321 1
  default_print_float_info,
d347 1
d426 1
d491 1
a491 1
  current_gdbarch->register_sim_regno = legacy_register_sim_regno;
a505 1
  current_gdbarch->get_saved_register = generic_unwind_get_saved_register;
d525 1
a525 1
  current_gdbarch->frame_chain_valid = generic_func_frame_chain_valid;
d684 3
a686 1
  /* Skip verify of get_saved_register, invalid_p == 0 */
d700 2
a701 2
      && (gdbarch->deprecated_extract_return_value == 0))
    fprintf_unfiltered (log, "\n\tdeprecated_extract_return_value");
d716 1
a716 1
  /* Skip verify of deprecated_extract_struct_value_address, has predicate */
a1040 25
#ifdef DEPRECATED_EXTRACT_RETURN_VALUE
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_RETURN_VALUE(type, regbuf, valbuf)",
                      XSTRING (DEPRECATED_EXTRACT_RETURN_VALUE (type, regbuf, valbuf)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->deprecated_extract_return_value
                        /*DEPRECATED_EXTRACT_RETURN_VALUE ()*/);
#endif
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (regbuf)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->deprecated_extract_struct_value_address
                        /*DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
d1116 25
d1536 8
d1546 4
a1549 2
                        "gdbarch_dump: print_float_info = 0x%08lx\n",
                        (long) current_gdbarch->print_float_info);
d2819 1
a2819 1
const char *
d3010 1
a3010 1
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame)
d3018 1
a3018 1
  gdbarch->print_float_info (gdbarch, file, frame);
d3757 1
a3757 1
gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, char *regbuf, char *valbuf)
d3760 1
a3760 1
  if (gdbarch->deprecated_extract_return_value == 0)
d3762 1
a3762 1
                    "gdbarch: gdbarch_deprecated_extract_return_value invalid");
d3764 2
a3765 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_return_value called\n");
  gdbarch->deprecated_extract_return_value (type, regbuf, valbuf);
d3769 2
a3770 2
set_gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_extract_return_value_ftype deprecated_extract_return_value)
d3772 1
a3772 1
  gdbarch->deprecated_extract_return_value = deprecated_extract_return_value;
d3897 1
a3897 1
gdbarch_deprecated_extract_struct_value_address_p (struct gdbarch *gdbarch)
d3900 1
a3900 1
  return gdbarch->deprecated_extract_struct_value_address != 0;
d3904 1
a3904 1
gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch, char *regbuf)
d3907 1
a3907 1
  if (gdbarch->deprecated_extract_struct_value_address == 0)
d3909 1
a3909 1
                    "gdbarch: gdbarch_deprecated_extract_struct_value_address invalid");
d3911 2
a3912 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_struct_value_address called\n");
  return gdbarch->deprecated_extract_struct_value_address (regbuf);
d3916 2
a3917 2
set_gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch,
                                                     gdbarch_deprecated_extract_struct_value_address_ftype deprecated_extract_struct_value_address)
d3919 1
a3919 1
  gdbarch->deprecated_extract_struct_value_address = deprecated_extract_struct_value_address;
a4773 1
  int init_p;
a4799 1
  /* Append the new registraration.  */
a4807 1
  (*curr)->data->init_p = 1;
d4813 20
d4865 1
a4865 1
/* Initialize the current value of the specified per-architecture
d4874 2
a4875 5
  if (gdbarch->data[data->index] != NULL)
    {
      gdb_assert (data->free != NULL);
      data->free (gdbarch, gdbarch->data[data->index]);
    }
a4885 14
  /* The data-pointer isn't initialized, call init() to get a value but
     only if the architecture initializaiton has completed.  Otherwise
     punt - hope that the caller knows what they are doing.  */
  if (gdbarch->data[data->index] == NULL
      && gdbarch->initialized_p)
    {
      /* Be careful to detect an initialization cycle.  */
      gdb_assert (data->init_p);
      data->init_p = 0;
      gdb_assert (data->init != NULL);
      gdbarch->data[data->index] = data->init (gdbarch);
      data->init_p = 1;
      gdb_assert (gdbarch->data[data->index] != NULL);
    }
d5279 1
a5279 1
  /* Switch to this new architecture marking it initialized.  */
a5280 1
  current_gdbarch->initialized_p = 1;
d5299 2
a5300 1
  /* Initialize the per-architecture data.  CURRENT_GDBARCH
d5302 1
@


1.127.4.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@a211 1
  gdbarch_extract_return_value_ftype *extract_return_value;
a218 1
  gdbarch_extract_struct_value_address_ftype *extract_struct_value_address;
a407 2
  0,
  0,
d421 1
a421 1
initialize_non_multiarch (void)
a514 1
  current_gdbarch->extract_return_value = legacy_extract_return_value;
a698 1
  /* Skip verify of extract_return_value, invalid_p == 0 */
a715 1
  /* Skip verify of extract_struct_value_address, has predicate */
a1140 25
#ifdef EXTRACT_RETURN_VALUE
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_RETURN_VALUE(type, regcache, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regcache, valbuf)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->extract_return_value
                        /*EXTRACT_RETURN_VALUE ()*/);
#endif
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS(regcache)",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS (regcache)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->extract_struct_value_address
                        /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
a3746 19
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, char *valbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_extract_return_value invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_return_value called\n");
  gdbarch->extract_return_value (type, regcache, valbuf);
}

void
set_gdbarch_extract_return_value (struct gdbarch *gdbarch,
                                  gdbarch_extract_return_value_ftype extract_return_value)
{
  gdbarch->extract_return_value = extract_return_value;
}

void
a3883 26
}

int
gdbarch_extract_struct_value_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->extract_struct_value_address != 0;
}

CORE_ADDR
gdbarch_extract_struct_value_address (struct gdbarch *gdbarch, struct regcache *regcache)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->extract_struct_value_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_extract_struct_value_address invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_struct_value_address called\n");
  return gdbarch->extract_struct_value_address (regcache);
}

void
set_gdbarch_extract_struct_value_address (struct gdbarch *gdbarch,
                                          gdbarch_extract_struct_value_address_ftype extract_struct_value_address)
{
  gdbarch->extract_struct_value_address = extract_struct_value_address;
@


1.127.4.3
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@a64 1
#include "gdb_string.h"
d149 2
a150 2
  gdbarch_pseudo_register_read_ftype *pseudo_register_read;
  gdbarch_pseudo_register_write_ftype *pseudo_register_write;
d206 2
d410 2
d605 2
a606 2
  /* Skip verify of pseudo_register_read, has predicate */
  /* Skip verify of pseudo_register_write, has predicate */
d698 2
d823 2
a824 2
                        "gdbarch_dump: pseudo_register_read = 0x%08lx\n",
                        (long) current_gdbarch->pseudo_register_read);
d827 2
a828 2
                        "gdbarch_dump: pseudo_register_write = 0x%08lx\n",
                        (long) current_gdbarch->pseudo_register_write);
d1181 14
d1930 14
d2557 1
a2557 1
gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch)
d2560 1
a2560 1
  return gdbarch->pseudo_register_read != 0;
d2564 1
a2564 1
gdbarch_pseudo_register_read (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, void *buf)
d2567 1
a2567 1
  if (gdbarch->pseudo_register_read == 0)
d2569 1
a2569 1
                    "gdbarch: gdbarch_pseudo_register_read invalid");
d2571 2
a2572 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pseudo_register_read called\n");
  gdbarch->pseudo_register_read (gdbarch, regcache, cookednum, buf);
d2576 2
a2577 2
set_gdbarch_pseudo_register_read (struct gdbarch *gdbarch,
                                  gdbarch_pseudo_register_read_ftype pseudo_register_read)
d2579 1
a2579 1
  gdbarch->pseudo_register_read = pseudo_register_read;
d2583 1
a2583 1
gdbarch_pseudo_register_write_p (struct gdbarch *gdbarch)
d2586 1
a2586 1
  return gdbarch->pseudo_register_write != 0;
d2590 1
a2590 1
gdbarch_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const void *buf)
d2593 1
a2593 1
  if (gdbarch->pseudo_register_write == 0)
d2595 1
a2595 1
                    "gdbarch: gdbarch_pseudo_register_write invalid");
d2597 2
a2598 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pseudo_register_write called\n");
  gdbarch->pseudo_register_write (gdbarch, regcache, cookednum, buf);
d2602 2
a2603 2
set_gdbarch_pseudo_register_write (struct gdbarch *gdbarch,
                                   gdbarch_pseudo_register_write_ftype pseudo_register_write)
d2605 1
a2605 1
  gdbarch->pseudo_register_write = pseudo_register_write;
d3641 52
@


1.127.4.4
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@a174 1
  gdbarch_print_registers_info_ftype *print_registers_info;
a175 1
  gdbarch_print_vector_info_ftype *print_vector_info;
d211 2
a217 1
  gdbarch_extract_return_value_ftype *extract_return_value;
a218 2
  gdbarch_deprecated_extract_return_value_ftype *deprecated_extract_return_value;
  gdbarch_deprecated_store_return_value_ftype *deprecated_store_return_value;
a257 1
  gdbarch_in_solib_return_trampoline_ftype *in_solib_return_trampoline;
d318 1
a318 1
  generic_register_byte,
d325 1
a325 5
  default_print_registers_info,
  0,
  0,
  0,
  0,
a486 1
  current_gdbarch->register_byte = generic_register_byte;
d491 2
a492 1
  current_gdbarch->print_registers_info = default_print_registers_info;
d516 1
a517 2
  current_gdbarch->extract_return_value = legacy_extract_return_value;
  current_gdbarch->store_return_value = legacy_store_return_value;
a536 1
  current_gdbarch->in_solib_return_trampoline = generic_in_solib_return_trampoline;
d626 3
a628 1
  /* Skip verify of register_byte, invalid_p == 0 */
d640 2
a641 4
  /* Skip verify of do_registers_info, has predicate */
  /* Skip verify of print_registers_info, invalid_p == 0 */
  /* Skip verify of print_float_info, has predicate */
  /* Skip verify of print_vector_info, has predicate */
d699 4
d714 3
a716 2
  /* Skip verify of extract_return_value, invalid_p == 0 */
  /* Skip verify of store_return_value, invalid_p == 0 */
a781 1
  /* Skip verify of in_solib_return_trampoline, invalid_p == 0 */
a1067 14
#ifdef DEPRECATED_STORE_RETURN_VALUE
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_STORE_RETURN_VALUE(type, valbuf)",
                      XSTRING (DEPRECATED_STORE_RETURN_VALUE (type, valbuf)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_STORE_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->deprecated_store_return_value
                        /*DEPRECATED_STORE_RETURN_VALUE ()*/);
#endif
a1412 11
#ifdef IN_SOLIB_RETURN_TRAMPOLINE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_RETURN_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_RETURN_TRAMPOLINE (pc, name)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: IN_SOLIB_RETURN_TRAMPOLINE = 0x%08lx\n",
                        (long) current_gdbarch->in_solib_return_trampoline
                        /*IN_SOLIB_RETURN_TRAMPOLINE ()*/);
#endif
a1552 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: print_registers_info = 0x%08lx\n",
                        (long) current_gdbarch->print_registers_info);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: print_vector_info = 0x%08lx\n",
                        (long) current_gdbarch->print_vector_info);
d1916 2
a1917 2
                      "STORE_RETURN_VALUE(type, regcache, valbuf)",
                      XSTRING (STORE_RETURN_VALUE (type, regcache, valbuf)));
a2978 7
int
gdbarch_do_registers_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->do_registers_info != 0;
}

d2999 1
a2999 27
gdbarch_print_registers_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, int regnum, int all)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->print_registers_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_registers_info invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_registers_info called\n");
  gdbarch->print_registers_info (gdbarch, file, frame, regnum, all);
}

void
set_gdbarch_print_registers_info (struct gdbarch *gdbarch,
                                  gdbarch_print_registers_info_ftype print_registers_info)
{
  gdbarch->print_registers_info = print_registers_info;
}

int
gdbarch_print_float_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->print_float_info != 0;
}

void
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
d3007 1
a3007 1
  gdbarch->print_float_info (gdbarch, file, frame, args);
a3017 26
gdbarch_print_vector_info_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->print_vector_info != 0;
}

void
gdbarch_print_vector_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->print_vector_info == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_print_vector_info invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_print_vector_info called\n");
  gdbarch->print_vector_info (gdbarch, file, frame, args);
}

void
set_gdbarch_print_vector_info (struct gdbarch *gdbarch,
                               gdbarch_print_vector_info_ftype print_vector_info)
{
  gdbarch->print_vector_info = print_vector_info;
}

int
d3693 38
d3834 1
a3834 20
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, void *valbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_extract_return_value invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_return_value called\n");
  gdbarch->extract_return_value (type, regcache, valbuf);
}

void
set_gdbarch_extract_return_value (struct gdbarch *gdbarch,
                                  gdbarch_extract_return_value_ftype extract_return_value)
{
  gdbarch->extract_return_value = extract_return_value;
}

void
gdbarch_store_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, const void *valbuf)
d3842 1
a3842 1
  gdbarch->store_return_value (type, regcache, valbuf);
a3851 38
void
gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, char *regbuf, char *valbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_extract_return_value invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_return_value called\n");
  gdbarch->deprecated_extract_return_value (type, regbuf, valbuf);
}

void
set_gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_extract_return_value_ftype deprecated_extract_return_value)
{
  gdbarch->deprecated_extract_return_value = deprecated_extract_return_value;
}

void
gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch, struct type *type, char *valbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_store_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_store_return_value invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_store_return_value called\n");
  gdbarch->deprecated_store_return_value (type, valbuf);
}

void
set_gdbarch_deprecated_store_return_value (struct gdbarch *gdbarch,
                                           gdbarch_deprecated_store_return_value_ftype deprecated_store_return_value)
{
  gdbarch->deprecated_store_return_value = deprecated_store_return_value;
}

a4625 19
}

int
gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch, CORE_ADDR pc, char *name)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->in_solib_return_trampoline == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_in_solib_return_trampoline invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_in_solib_return_trampoline called\n");
  return gdbarch->in_solib_return_trampoline (pc, name);
}

void
set_gdbarch_in_solib_return_trampoline (struct gdbarch *gdbarch,
                                        gdbarch_in_solib_return_trampoline_ftype in_solib_return_trampoline)
{
  gdbarch->in_solib_return_trampoline = in_solib_return_trampoline;
@


1.127.4.5
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a246 1
  gdbarch_frame_align_ftype *frame_align;
a262 2
  gdbarch_sigtramp_start_ftype *sigtramp_start;
  gdbarch_sigtramp_end_ftype *sigtramp_end;
a267 1
  const char * name_of_malloc;
a416 3
  0,
  0,
  0,
a421 1
  "malloc",
a551 1
  current_gdbarch->name_of_malloc = "malloc";
a770 1
  /* Skip verify of frame_align, has predicate */
a788 2
  /* Skip verify of sigtramp_start, has predicate */
  /* Skip verify of sigtramp_end, has predicate */
a793 1
  /* Skip verify of name_of_malloc, invalid_p == 0 */
a819 4
                        "gdbarch_dump: frame_align = 0x%08lx\n",
                        (long) current_gdbarch->frame_align);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a1481 8
#ifdef NAME_OF_MALLOC
  fprintf_unfiltered (file,
                      "gdbarch_dump: NAME_OF_MALLOC # %s\n",
                      XSTRING (NAME_OF_MALLOC));
  fprintf_unfiltered (file,
                      "gdbarch_dump: NAME_OF_MALLOC = %ld\n",
                      (long) NAME_OF_MALLOC);
#endif
a1864 22
#ifdef SIGTRAMP_END
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_END(pc)",
                      XSTRING (SIGTRAMP_END (pc)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SIGTRAMP_END = 0x%08lx\n",
                        (long) current_gdbarch->sigtramp_end
                        /*SIGTRAMP_END ()*/);
#endif
#ifdef SIGTRAMP_START
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SIGTRAMP_START(pc)",
                      XSTRING (SIGTRAMP_START (pc)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SIGTRAMP_START = 0x%08lx\n",
                        (long) current_gdbarch->sigtramp_start
                        /*SIGTRAMP_START ()*/);
#endif
a4472 26
gdbarch_frame_align_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->frame_align != 0;
}

CORE_ADDR
gdbarch_frame_align (struct gdbarch *gdbarch, CORE_ADDR address)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->frame_align == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_frame_align invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_align called\n");
  return gdbarch->frame_align (gdbarch, address);
}

void
set_gdbarch_frame_align (struct gdbarch *gdbarch,
                         gdbarch_frame_align_ftype frame_align)
{
  gdbarch->frame_align = frame_align;
}

int
a4783 52
gdbarch_sigtramp_start_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->sigtramp_start != 0;
}

CORE_ADDR
gdbarch_sigtramp_start (struct gdbarch *gdbarch, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->sigtramp_start == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_sigtramp_start invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sigtramp_start called\n");
  return gdbarch->sigtramp_start (pc);
}

void
set_gdbarch_sigtramp_start (struct gdbarch *gdbarch,
                            gdbarch_sigtramp_start_ftype sigtramp_start)
{
  gdbarch->sigtramp_start = sigtramp_start;
}

int
gdbarch_sigtramp_end_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->sigtramp_end != 0;
}

CORE_ADDR
gdbarch_sigtramp_end (struct gdbarch *gdbarch, CORE_ADDR pc)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->sigtramp_end == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_sigtramp_end invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sigtramp_end called\n");
  return gdbarch->sigtramp_end (pc);
}

void
set_gdbarch_sigtramp_end (struct gdbarch *gdbarch,
                          gdbarch_sigtramp_end_ftype sigtramp_end)
{
  gdbarch->sigtramp_end = sigtramp_end;
}

int
a4882 17
}

const char *
gdbarch_name_of_malloc (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of name_of_malloc, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_name_of_malloc called\n");
  return gdbarch->name_of_malloc;
}

void
set_gdbarch_name_of_malloc (struct gdbarch *gdbarch,
                            const char * name_of_malloc)
{
  gdbarch->name_of_malloc = name_of_malloc;
@


1.127.4.6
log
@merge from mainline
@
text
@a66 1
#include "reggroups.h"
d174 1
a174 1
  gdbarch_deprecated_do_registers_info_ftype *deprecated_do_registers_info;
a271 6
  int cannot_step_breakpoint;
  int have_nonsteppable_watchpoint;
  gdbarch_address_class_type_flags_ftype *address_class_type_flags;
  gdbarch_address_class_type_flags_to_name_ftype *address_class_type_flags_to_name;
  gdbarch_address_class_name_to_type_flags_ftype *address_class_name_to_type_flags;
  gdbarch_register_reggroup_p_ftype *register_reggroup_p;
a429 6
  0,
  0,
  0,
  0,
  0,
  default_register_reggroup_p,
a560 1
  current_gdbarch->register_reggroup_p = default_register_reggroup_p;
d657 1
a657 1
  /* Skip verify of deprecated_do_registers_info, has predicate */
a806 6
  /* Skip verify of cannot_step_breakpoint, invalid_p == 0 */
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
  /* Skip verify of address_class_type_flags, has predicate */
  /* Skip verify of address_class_type_flags_to_name, has predicate */
  /* Skip verify of address_class_name_to_type_flags, has predicate */
  /* Skip verify of register_reggroup_p, invalid_p == 0 */
a840 4
                        "gdbarch_dump: register_reggroup_p = 0x%08lx\n",
                        (long) current_gdbarch->register_reggroup_p);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
a846 19
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: address_class_name_to_type_flags = 0x%08lx\n",
                        (long) current_gdbarch->address_class_name_to_type_flags);
#ifdef ADDRESS_CLASS_TYPE_FLAGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_CLASS_TYPE_FLAGS(byte_size, dwarf2_addr_class)",
                      XSTRING (ADDRESS_CLASS_TYPE_FLAGS (byte_size, dwarf2_addr_class)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_CLASS_TYPE_FLAGS = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags
                        /*ADDRESS_CLASS_TYPE_FLAGS ()*/);
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: address_class_type_flags_to_name = 0x%08lx\n",
                        (long) current_gdbarch->address_class_type_flags_to_name);
a995 8
#ifdef CANNOT_STEP_BREAKPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_STEP_BREAKPOINT # %s\n",
                      XSTRING (CANNOT_STEP_BREAKPOINT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: CANNOT_STEP_BREAKPOINT = %d\n",
                      CANNOT_STEP_BREAKPOINT);
#endif
a1065 14
#ifdef DEPRECATED_DO_REGISTERS_INFO
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_DO_REGISTERS_INFO(reg_nr, fpregs)",
                      XSTRING (DEPRECATED_DO_REGISTERS_INFO (reg_nr, fpregs)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_DO_REGISTERS_INFO = 0x%08lx\n",
                        (long) current_gdbarch->deprecated_do_registers_info
                        /*DEPRECATED_DO_REGISTERS_INFO ()*/);
#endif
d1105 14
a1374 8
#ifdef HAVE_NONSTEPPABLE_WATCHPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT # %s\n",
                      XSTRING (HAVE_NONSTEPPABLE_WATCHPOINT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: HAVE_NONSTEPPABLE_WATCHPOINT = %d\n",
                      HAVE_NONSTEPPABLE_WATCHPOINT);
#endif
d3066 1
a3066 1
gdbarch_deprecated_do_registers_info_p (struct gdbarch *gdbarch)
d3069 1
a3069 1
  return gdbarch->deprecated_do_registers_info != 0;
d3073 1
a3073 1
gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch, int reg_nr, int fpregs)
d3076 1
a3076 1
  if (gdbarch->deprecated_do_registers_info == 0)
d3078 1
a3078 1
                    "gdbarch: gdbarch_deprecated_do_registers_info invalid");
d3080 2
a3081 2
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_do_registers_info called\n");
  gdbarch->deprecated_do_registers_info (reg_nr, fpregs);
d3085 2
a3086 2
set_gdbarch_deprecated_do_registers_info (struct gdbarch *gdbarch,
                                          gdbarch_deprecated_do_registers_info_ftype deprecated_do_registers_info)
d3088 1
a3088 1
  gdbarch->deprecated_do_registers_info = deprecated_do_registers_info;
a5024 131
}

int
gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of cannot_step_breakpoint, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_cannot_step_breakpoint called\n");
  return gdbarch->cannot_step_breakpoint;
}

void
set_gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch,
                                    int cannot_step_breakpoint)
{
  gdbarch->cannot_step_breakpoint = cannot_step_breakpoint;
}

int
gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of have_nonsteppable_watchpoint, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_have_nonsteppable_watchpoint called\n");
  return gdbarch->have_nonsteppable_watchpoint;
}

void
set_gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch,
                                          int have_nonsteppable_watchpoint)
{
  gdbarch->have_nonsteppable_watchpoint = have_nonsteppable_watchpoint;
}

int
gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags != 0;
}

int
gdbarch_address_class_type_flags (struct gdbarch *gdbarch, int byte_size, int dwarf2_addr_class)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags called\n");
  return gdbarch->address_class_type_flags (byte_size, dwarf2_addr_class);
}

void
set_gdbarch_address_class_type_flags (struct gdbarch *gdbarch,
                                      gdbarch_address_class_type_flags_ftype address_class_type_flags)
{
  gdbarch->address_class_type_flags = address_class_type_flags;
}

int
gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_type_flags_to_name != 0;
}

char *
gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch, int type_flags)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_type_flags_to_name == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_type_flags_to_name invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_type_flags_to_name called\n");
  return gdbarch->address_class_type_flags_to_name (gdbarch, type_flags);
}

void
set_gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch,
                                              gdbarch_address_class_type_flags_to_name_ftype address_class_type_flags_to_name)
{
  gdbarch->address_class_type_flags_to_name = address_class_type_flags_to_name;
}

int
gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->address_class_name_to_type_flags != 0;
}

int
gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, char *name, int *type_flags_ptr)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->address_class_name_to_type_flags == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_address_class_name_to_type_flags invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_address_class_name_to_type_flags called\n");
  return gdbarch->address_class_name_to_type_flags (gdbarch, name, type_flags_ptr);
}

void
set_gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch,
                                              gdbarch_address_class_name_to_type_flags_ftype address_class_name_to_type_flags)
{
  gdbarch->address_class_name_to_type_flags = address_class_name_to_type_flags;
}

int
gdbarch_register_reggroup_p (struct gdbarch *gdbarch, int regnum, struct reggroup *reggroup)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->register_reggroup_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_register_reggroup_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_reggroup_p called\n");
  return gdbarch->register_reggroup_p (gdbarch, regnum, reggroup);
}

void
set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch,
                                 gdbarch_register_reggroup_p_ftype register_reggroup_p)
{
  gdbarch->register_reggroup_p = register_reggroup_p;
@


1.127.2.1
log
@regbuf
@
text
@d3757 1
a3757 1
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regbuf *regbuf, char *valbuf)
d3904 1
a3904 1
gdbarch_extract_struct_value_address (struct gdbarch *gdbarch, struct regbuf *regbuf)
@


1.127.2.2
log
@regbuf->regcache
@
text
@d1121 2
a1122 2
                      "EXTRACT_RETURN_VALUE(type, regcache, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regcache, valbuf)));
d1133 2
a1134 2
                      "EXTRACT_STRUCT_VALUE_ADDRESS(regcache)",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS (regcache)));
d3757 1
a3757 1
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, struct regcache *regcache, char *valbuf)
d3765 1
a3765 1
  gdbarch->extract_return_value (type, regcache, valbuf);
d3904 1
a3904 1
gdbarch_extract_struct_value_address (struct gdbarch *gdbarch, struct regcache *regcache)
d3912 1
a3912 1
  return gdbarch->extract_struct_value_address (regcache);
@


1.127.2.3
log
@merge from trunk
@
text
@d71 1
a89 2
  /* Has this architecture been fully initialized?  */
  int initialized_p;
a211 1
  gdbarch_deprecated_extract_return_value_ftype *deprecated_extract_return_value;
a218 1
  gdbarch_deprecated_extract_struct_value_address_ftype *deprecated_extract_struct_value_address;
a271 1
  1, /* Always initialized.  */
a321 3
  default_print_float_info,
  0,
  0,
d347 1
d426 1
d491 1
a491 1
  current_gdbarch->register_sim_regno = legacy_register_sim_regno;
a505 1
  current_gdbarch->get_saved_register = generic_unwind_get_saved_register;
d525 1
a525 1
  current_gdbarch->frame_chain_valid = generic_func_frame_chain_valid;
d684 3
a686 1
  /* Skip verify of get_saved_register, invalid_p == 0 */
a701 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->deprecated_extract_return_value == 0))
    fprintf_unfiltered (log, "\n\tdeprecated_extract_return_value");
a716 1
  /* Skip verify of deprecated_extract_struct_value_address, has predicate */
a1040 25
#ifdef DEPRECATED_EXTRACT_RETURN_VALUE
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_RETURN_VALUE(type, regbuf, valbuf)",
                      XSTRING (DEPRECATED_EXTRACT_RETURN_VALUE (type, regbuf, valbuf)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_EXTRACT_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->deprecated_extract_return_value
                        /*DEPRECATED_EXTRACT_RETURN_VALUE ()*/);
#endif
#ifdef DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)",
                      XSTRING (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (regbuf)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->deprecated_extract_struct_value_address
                        /*DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
d1536 8
d1546 4
a1549 2
                        "gdbarch_dump: print_float_info = 0x%08lx\n",
                        (long) current_gdbarch->print_float_info);
d3010 1
a3010 1
gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame)
d3018 1
a3018 1
  gdbarch->print_float_info (gdbarch, file, frame);
a3774 19
void
gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch, struct type *type, char *regbuf, char *valbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_extract_return_value == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_extract_return_value invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_return_value called\n");
  gdbarch->deprecated_extract_return_value (type, regbuf, valbuf);
}

void
set_gdbarch_deprecated_extract_return_value (struct gdbarch *gdbarch,
                                             gdbarch_deprecated_extract_return_value_ftype deprecated_extract_return_value)
{
  gdbarch->deprecated_extract_return_value = deprecated_extract_return_value;
}

a3922 26
gdbarch_deprecated_extract_struct_value_address_p (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  return gdbarch->deprecated_extract_struct_value_address != 0;
}

CORE_ADDR
gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch, char *regbuf)
{
  gdb_assert (gdbarch != NULL);
  if (gdbarch->deprecated_extract_struct_value_address == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_deprecated_extract_struct_value_address invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_deprecated_extract_struct_value_address called\n");
  return gdbarch->deprecated_extract_struct_value_address (regbuf);
}

void
set_gdbarch_deprecated_extract_struct_value_address (struct gdbarch *gdbarch,
                                                     gdbarch_deprecated_extract_struct_value_address_ftype deprecated_extract_struct_value_address)
{
  gdbarch->deprecated_extract_struct_value_address = deprecated_extract_struct_value_address;
}

int
a4773 1
  int init_p;
a4799 1
  /* Append the new registraration.  */
a4807 1
  (*curr)->data->init_p = 1;
d4813 20
d4865 1
a4865 1
/* Initialize the current value of the specified per-architecture
d4874 2
a4875 5
  if (gdbarch->data[data->index] != NULL)
    {
      gdb_assert (data->free != NULL);
      data->free (gdbarch, gdbarch->data[data->index]);
    }
a4885 14
  /* The data-pointer isn't initialized, call init() to get a value but
     only if the architecture initializaiton has completed.  Otherwise
     punt - hope that the caller knows what they are doing.  */
  if (gdbarch->data[data->index] == NULL
      && gdbarch->initialized_p)
    {
      /* Be careful to detect an initialization cycle.  */
      gdb_assert (data->init_p);
      data->init_p = 0;
      gdb_assert (data->init != NULL);
      gdbarch->data[data->index] = data->init (gdbarch);
      data->init_p = 1;
      gdb_assert (gdbarch->data[data->index] != NULL);
    }
d5279 1
a5279 1
  /* Switch to this new architecture marking it initialized.  */
a5280 1
  current_gdbarch->initialized_p = 1;
d5299 2
a5300 1
  /* Initialize the per-architecture data.  CURRENT_GDBARCH
d5302 1
@


1.127.2.4
log
@fixes for HEAD->branch merge.
@
text
@a518 1
  current_gdbarch->extract_return_value = legacy_extract_return_value;
d703 3
a705 1
  /* Skip verify of extract_return_value, invalid_p == 0 */
@


1.127.2.5
log
@Merge with trunk.
@
text
@d2841 1
a2841 1
const char *
@


1.126
log
@* arch-utils.h (legacy_register_to_value): Declare.
(legacy_value_to_register): Declare.
(legacy_convert_register_p): Declare.
* arch-utils.c (legacy_register_to_value): New function.
(legacy_value_to_register): New function.
(legacy_convert_register_p): New function.

* gdbarch.sh (REGISTER_TO_VALUE): Define.
(VALUE_TO_REGISTER): Define.
(CONVERT_REGISTER_P): Define.
* gdbarch.h, gdbarch.c: Regenerate.

* valops.c (value_assign): Use CONVERT_REGISTER_P and
VALUE_TO_REGISTER.
* findvar.c (value_from_register): Use REGISTER_TO_VALUE and
CONVERT_REGISTER_P.

* gdbint.texinfo (Target Architecture Definition): Document
REGISTER_TO_VALUE and VALUE_TO_REGISTER and CONVERT_REGISTER_P.
(Target Architecture Definition): Revise section `Using Different
Register and Memory Data Representations'.  Add section `Raw and
Virtual Register Representations'.
@
text
@a157 1
  int nnpc_regnum;
a315 1
  0,
a476 1
  current_gdbarch->nnpc_regnum = -1;
a609 1
  /* Skip verify of nnpc_regnum, invalid_p == 0 */
a1437 8
#ifdef NNPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: NNPC_REGNUM # %s\n",
                      XSTRING (NNPC_REGNUM));
  fprintf_unfiltered (file,
                      "gdbarch_dump: NNPC_REGNUM = %d\n",
                      NNPC_REGNUM);
#endif
a2721 17
}

int
gdbarch_nnpc_regnum (struct gdbarch *gdbarch)
{
  gdb_assert (gdbarch != NULL);
  /* Skip verify of nnpc_regnum, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_nnpc_regnum called\n");
  return gdbarch->nnpc_regnum;
}

void
set_gdbarch_nnpc_regnum (struct gdbarch *gdbarch,
                         int nnpc_regnum)
{
  gdbarch->nnpc_regnum = nnpc_regnum;
@


1.125
log
@* arch-utils.h (generic_register_size): Declare.
(generic_register_raw_size, generic_register_virtual_size): Delete
declarations.
* arch-utils.c (generic_register_raw_size): Delete.
(generic_register_size): New function.
(generic_register_virtual_size): Delete.

* gdbarch.sh (REGISTER_RAW_SIZE, REGISTER_VIRTUAL_SIZE): Make
default generic_register_size.
* gdbarch.h, gdbarch.c: Re-generate.

* d10v-tdep.c (d10v_gdbarch_init): Use generic_register_size for
register_virtual_size.
* x86-64-tdep.c (x86_64_gdbarch_init): Ditto.
* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.

* gdbint.texinfo (Target Architecture Definition): Mention
defaults for REGISTER_VIRTUAL_SIZE and REGISTER_RAW_SIZE.
(Target Architecture Definition): Mention same.  Add references to
web pages.
@
text
@d203 3
d405 3
d510 3
d694 3
d1026 11
d1727 14
d2196 14
d3591 57
@


1.124
log
@* gdbarch.sh (gdbarch_data): Add gdbarch parameter.
* gdbarch.h, gdbarch.c: Regenerate.
* gnu-v3-abi.c: Update copyright.
(vtable_address_point_offset): Update.
(gnuv3_rtti_type): Update.
(gnuv3_baseclass_offset): Update.
* solib-svr4.c (svr4_fetch_link_map_offsets): Update.
(init_fetch_link_map_offsets): Update.
* remote.c (get_remote_state): Update.
@
text
@d315 1
a315 1
  generic_register_raw_size,
d317 1
a317 1
  generic_register_virtual_size,
d482 1
d484 1
d620 1
a620 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_raw_size == 0))
    fprintf_unfiltered (log, "\n\tregister_raw_size");
d624 1
a624 3
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->register_virtual_size == 0))
    fprintf_unfiltered (log, "\n\tregister_virtual_size");
@


1.123
log
@* gdbarch.sh (init_gdbarch_swap): Do not clear the swap section.
(clear_gdbarch_swap): New function.
(initialize_non_multiarch): Call.
(gdbarch_update_p): Before calling init(), swap out and clear the
existing architecture.
* gdbarch.c: Regenerate.
@
text
@d4806 1
a4806 1
gdbarch_data (struct gdbarch_data *data)
d4808 2
a4809 2
  gdb_assert (data->index < current_gdbarch->nr_data);
  return current_gdbarch->data[data->index];
@


1.122
log
@* gdbarch.sh: Assert that gdbarch is non-NULL.
* gdbarch.c: Regenerate.
@
text
@d74 1
d418 3
d4858 11
a4884 1
	  memset (rego->data, 0, rego->sizeof_data);
d5050 1
d5119 15
d5137 2
a5138 1
  /* Did the target like it?  No. Reject the change. */
d5143 2
d5148 3
a5150 2
  /* Did the architecture change?  No. Do nothing. */
  if (current_gdbarch == new_gdbarch)
d5156 2
a5159 3

  /* Swap all data belonging to the old target out */
  swapout_gdbarch_swap (current_gdbarch);
@


1.121
log
@Yank previous change - set current arch to NULL.
@
text
@d2173 1
d2182 1
d2191 1
d2208 1
d2225 1
d2242 1
d2259 1
d2276 1
d2293 1
d2310 1
d2327 1
d2346 1
d2363 1
d2382 1
d2401 1
d2420 1
d2439 1
d2458 1
d2477 1
d2496 1
d2503 1
d2522 1
d2529 1
d2548 1
d2567 1
d2584 1
d2601 1
d2618 1
d2635 1
d2652 1
d2669 1
d2686 1
d2703 1
d2722 1
d2741 1
d2760 1
d2779 1
d2798 1
d2817 1
d2836 1
d2855 1
d2874 1
d2893 1
d2912 1
d2931 1
d2950 1
d2969 1
d2988 1
d3007 1
d3026 1
d3033 1
d3052 1
d3071 1
d3090 1
d3097 1
d3116 1
d3135 1
d3154 1
d3173 1
d3192 1
d3211 1
d3230 1
d3249 1
d3268 1
d3287 1
d3304 1
d3321 1
d3340 1
d3359 1
d3378 1
d3397 1
d3416 1
d3432 1
d3448 1
d3467 1
d3486 1
d3505 1
d3524 1
d3543 1
d3550 1
d3569 1
d3576 1
d3595 1
d3614 1
d3633 1
d3640 1
d3659 1
d3678 1
d3697 1
d3716 1
d3735 1
d3742 1
d3761 1
d3780 1
d3799 1
d3818 1
d3825 1
d3844 1
d3863 1
d3882 1
d3889 1
d3908 1
d3927 1
d3946 1
d3965 1
d3984 1
d4003 1
d4022 1
d4041 1
d4060 1
d4079 1
d4098 1
d4117 1
d4136 1
d4155 1
d4174 1
d4193 1
d4212 1
d4231 1
d4250 1
d4269 1
d4276 1
d4295 1
d4312 1
d4319 1
d4338 1
d4345 1
d4364 1
d4380 1
d4396 1
d4412 1
d4428 1
d4447 1
d4466 1
d4485 1
d4492 1
d4511 1
d4530 1
d4549 1
d4568 1
d4587 1
d4606 1
d4625 1
d4632 1
d4651 1
d4670 1
@


1.120
log
@* gdbarch.sh (gdbarch_update_p): Swap out the old architecture
before probing for a new one.  Detect errorenous gdbarch_init
functions.
* gdbarch.c: Regenerate.
@
text
@a4889 1
  struct gdbarch *old_gdbarch;
a4957 7
  /* Swap the data belonging to the old target out.  This stops the
     ->init() function trying to refer to the previous architecture.  */
  swapout_gdbarch_swap (current_gdbarch);
  init_gdbarch_swap (current_gdbarch);
  old_gdbarch = current_gdbarch;
  current_gdbarch = NULL;

d4961 1
a4961 2
  /* Did the target like it?  No. Reject the change and revert to the
     old architecture.  */
a4965 2
      swapin_gdbarch_swap (old_gdbarch);
      current_gdbarch = old_gdbarch;
d4969 2
a4970 3
  /* Did the architecture change?  No.  Oops, put the old architecture
     back.  */
  if (old_gdbarch == new_gdbarch)
a4975 2
      swapin_gdbarch_swap (old_gdbarch);
      current_gdbarch = old_gdbarch;
d4979 3
d5038 8
a5045 4
  /* Initialize the per-architecture data-pointers and swap areas for
     all parties that registered an interest in this architecture.
     CURRENT_GDBARCH must be updated before these modules are called.
     The swap area's will have already been initialized to zero.  */
@


1.119
log
@* arch-utils.h: Update copyright.

* gdbarch.sh (PC_IN_SIGTRAMP): Add.
* gdbarch.h, gdbarch.c: Re-generate.

* inferior.h (IN_SIGTRAMP): Delete definition.
* arch-utils.c (legacy_pc_in_sigtramp): New function.
* arch-utils.h (legacy_pc_in_sigtramp): Declare.

* mips-tdep.c (mips_init_extra_frame_info): Use PC_IN_SIGTRAMP.
(mips_dump_tdep): Do not print value of IN_SIGTRAMP.
* hppa-tdep.c (pc_in_interrupt_handler):  Use PC_IN_SIGTRAMP.
(find_proc_framesize): Ditto.
* alpha-tdep.c (alpha_osf_skip_sigtramp_frame): Ditto.
(alpha_init_extra_frame_info): Ditto.
* infrun.c (handle_inferior_event): Ditto.
(handle_inferior_event): Ditto.
(check_sigtramp2): Ditto.
* blockframe.c (create_new_frame): Ditto.
(get_prev_frame): Ditto.
* ppc-linux-tdep.c: Update comments.
* i386-linux-tdep.c: Update comments.
* breakpoint.c (bpstat_what): Update comment.

* gdbint.texinfo (Target Architecture Definition): Replace
IN_SIGTRAMP with PC_IN_SIGTRAMP.
@
text
@d4890 1
d4959 7
d4969 2
a4970 1
  /* Did the target like it?  No. Reject the change. */
d4975 2
d4980 3
a4982 2
  /* Did the architecture change?  No. Do nothing. */
  if (current_gdbarch == new_gdbarch)
d4988 2
a4992 3
  /* Swap all data belonging to the old target out */
  swapout_gdbarch_swap (current_gdbarch);

d5049 4
a5052 8
  /* Initialize the per-architecture memory (swap) areas.
     CURRENT_GDBARCH must be update before these modules are
     called. */
  init_gdbarch_swap (new_gdbarch);
  
  /* Initialize the per-architecture data-pointer of all parties that
     registered an interest in this architecture.  CURRENT_GDBARCH
     must be updated before these modules are called. */
@


1.118
log
@* gdbarch.sh (gdbarch_update_p): Keep the list of architectures
sorted in most most-recent-used order.  Document.
* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d253 1
d400 1
d521 1
d770 1
d1468 11
d4424 18
@


1.117
log
@* gdbarch.sh (BREAKPOINT_FROM_PC): Return a const buffer.
* gdbarch.h, gdbarch.c: Regenerate.

* defs.h (breakpoint_from_pc_fn): Delete type definition.
* target.h (memory_breakpoint_from_pc): Update declaration.
* config/mcore/tm-mcore.h (mcore_breakpoint_from_p): Ditto.

* arch-utils.c (legacy_breakpoint_from_pc): Update return type.
* mcore-tdep.c (mcore_breakpoint_from_pc): Ditto.
* mem-break.c (memory_breakpoint_from_pc): Ditto.
* rs6000-tdep.c (rs6000_breakpoint_from_pc): Ditto.
* s390-tdep.c (s390_breakpoint_from_pc): Ditto
* xstormy16-tdep.c (xstormy16_breakpoint_from_pc): Ditto.
* mn10300-tdep.c (mn10300_breakpoint_from_pc): Ditto.
* mips-tdep.c (mips_breakpoint_from_pc): Ditto.
* m68hc11-tdep.c (m68hc11_breakpoint_from_pc): Ditto.
* ia64-tdep.c (ia64_breakpoint_from_pc): Ditto.
* d10v-tdep.c (d10v_breakpoint_from_pc): Ditto.
* arch-utils.c (legacy_breakpoint_from_pc): Ditto..

* mem-break.c (default_memory_insert_breakpoint): Make `bp' a
const pointer.
* monitor.c (monitor_insert_breakpoint): Ditto.
* rs6000-tdep.c (rs6000_software_single_step): Ditto for `breakp'.

* config/mcore/tm-mcore.h: Update copyright.
* mem-break.c: Ditto.
* xstormy16-tdep.c: Ditto.
@
text
@a4856 1
  struct gdbarch_list **list;
d4949 40
a4988 23
  /* Is this a pre-existing architecture?  Yes. Swap it in.  */
  for (list = &rego->arches;
       (*list) != NULL;
       list = &(*list)->next)
    {
      if ((*list)->gdbarch == new_gdbarch)
	{
	  if (gdbarch_debug)
	    fprintf_unfiltered (gdb_stdlog,
                                "gdbarch_update: Previous architecture 0x%08lx (%s) selected\n",
				(long) new_gdbarch,
				new_gdbarch->bfd_arch_info->printable_name);
	  current_gdbarch = new_gdbarch;
	  swapin_gdbarch_swap (new_gdbarch);
	  architecture_changed_event ();
	  return 1;
	}
    }

  /* Append this new architecture to this targets list. */
  (*list) = XMALLOC (struct gdbarch_list);
  (*list)->next = NULL;
  (*list)->gdbarch = new_gdbarch;
@


1.116
log
@* gdbarch.sh (FP_REGNUM, PC_REGNUM, SP_REGNUM): Allow default of
-1.  Update comment.
* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d3843 1
a3843 1
unsigned char *
@


1.115
log
@* gdbarch.sh (PS_REGNUM): Add.  Document.  Default to -1.
* gdbarch.c, gdbarch.h: Re-generate.
@
text
@d297 3
a299 3
  0,
  0,
  0,
d589 3
a591 9
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->sp_regnum == -1))
    fprintf_unfiltered (log, "\n\tsp_regnum");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->fp_regnum == -1))
    fprintf_unfiltered (log, "\n\tfp_regnum");
  if ((GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->pc_regnum == -1))
    fprintf_unfiltered (log, "\n\tpc_regnum");
d2544 1
a2544 3
  if (gdbarch->sp_regnum == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_sp_regnum invalid");
d2560 1
a2560 3
  if (gdbarch->fp_regnum == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_fp_regnum invalid");
d2576 1
a2576 3
  if (gdbarch->pc_regnum == -1)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_pc_regnum invalid");
@


1.114
log
@Correct bad checkin (missing semicolon somehow)
@
text
@d154 1
d300 1
d464 1
d598 1
d1539 8
d2599 16
@


1.113
log
@2002-04-05  Daniel Jacobowitz  <drow@@mvista.com>

        * gdbarch.sh (initialize_non_multiarch): Call init_gdbarch_swap.
        * gdbarch.c: Regenerate.
@
text
@d413 1
a413 1
  init_gdbarch_swap (&startup_gdbarch)
@


1.112
log
@* h8500-tdep.c (h8500_write_fp): Delete function.
* dwarf2cfi.c (cfi_write_fp): Document as not used.
* mips-tdep.c (mips_gdbarch_init): Do not set write_fp.
* ia64-tdep.c (ia64_gdbarch_init): Do not set write_fp.
* m68hc11-tdep.c (m68hc11_gdbarch_init): Do not set write_fp.
* rs6000-tdep.c (rs6000_gdbarch_init): Do not set write_fp.
* s390-tdep.c (s390_gdbarch_init): Do not set write_fp.
(s390_write_fp):
* sh-tdep.c (sh_gdbarch_init): Do not set write_fp.
* x86-64-tdep.c (i386_gdbarch_init): Do not set write_fp.
* d10v-tdep.c (d10v_gdbarch_init): Do not set write_fp.
(d10v_write_fp): Delete function.
* inferior.h (write_fp, generic_target_write_fp): Delete
declarations.
* regcache.c (generic_target_write_fp): Delete function.
(write_fp): Delete function.
* gdbarch.sh (TARGET_WRITE_FP): Delete.
* gdbarch.h, gdbarch.c: Regenerate.
* config/v850/tm-v850.h (TARGET_WRITE_FP): Delete macro.
* config/sparc/tm-sp64.h (TARGET_WRITE_FP): Delete macro.
(sparc64_write_fp): Delete declaration.
* config/h8500/tm-h8500.h (TARGET_WRITE_FP): Delete macro.
(h8500_write_fp): Delete declaration.
@
text
@d413 1
@


1.111
log
@* defs.h (XMALLOC): Define.
* gdb-events.sh (XMALLOC): Delete macro.
* gdb-events.c, gdb-events.h: Regenerate.
* gdbarch.sh (XMALLOC): Delete macro.
* gdbarch.c: Regenerate.
* serial.c (XMALLOC): Delete macro.
* ui-file.c (XMALLOC): Ditto.
* ser-unix.h (XMALLOC): Ditto.
* sh-tdep.c (XMALLOC): Ditto.
* ui-out.c (XMALLOC): Ditto.
* utils.c (XMALLOC): Ditto.
* i386-tdep.c (XMALLOC): Ditto.
* gdb-events.c (XMALLOC): Ditto.
* d10v-tdep.c (XMALLOC): Ditto.
* cli-out.c (XMALLOC): Ditto.

* cli-out.c, d10v-tdep.c, gdb-events.c: Update copyright.
* gdb-events.sh, i386-tdep.c, ser-unix.h, serial.c: Ditto.
* ui-file.c, ui-out.c: Ditto.
@
text
@a143 1
  gdbarch_write_fp_ftype *write_fp;
a310 1
  0,
a453 1
  current_gdbarch->write_fp = generic_target_write_fp;
a575 1
  /* Skip verify of write_fp, invalid_p == 0 */
a2087 14
#ifdef TARGET_WRITE_FP
#if GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_FP(val)",
                      XSTRING (TARGET_WRITE_FP (val)));
#endif
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_FP = 0x%08lx\n",
                        (long) current_gdbarch->write_fp
                        /*TARGET_WRITE_FP ()*/);
#endif
a2395 18
}

void
gdbarch_write_fp (struct gdbarch *gdbarch, CORE_ADDR val)
{
  if (gdbarch->write_fp == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_write_fp invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_write_fp called\n");
  gdbarch->write_fp (val);
}

void
set_gdbarch_write_fp (struct gdbarch *gdbarch,
                      gdbarch_write_fp_ftype write_fp)
{
  gdbarch->write_fp = write_fp;
@


1.110
log
@* gdbarch.sh (FRAME_CHAIN_VALID): Only require at level 2.
Default to func_frame_chain_valid.
* gdbarch.h, gdbarch.c: Re-generate.
* frame.h (FRAME_CHAIN_VALID): Delete definition.
@
text
@a76 7
/* Convenience macro for allocting typesafe memory. */

#ifndef XMALLOC
#define XMALLOC(TYPE) (TYPE*) xmalloc (sizeof (TYPE))
#endif


@


1.109
log
@* gdbarch.sh (GET_LONGJMP_TARGET): Add rule.
* gdbarch.c gdbarch.h: Regenerate.
* breakpoint.c (create_longjmp_breakpoint): Always compile this
function.
(breakpoint_reset): Test GET_LONGJMP_TARGET_P().
* infrun.c (GET_LONGJMP_TARGET): Delete default definition.
(handle_inferior_event): Test GET_LONGJMP_TARGET_P().

* arm-tdep.h (struct gdbarch_tdep): Add jb_pc and jb_elt_size fields.
* arm-tdep.c (arm_get_longjmp_target): New function.
(arm_gdbarch_init): Initialize jb_pc to -1.  If ABI handler changes
this to a positive value register arm_get_longjmp_target as the
longjmp handler.
* arm-linux-tdep.c (arm_get_longjmp_target): Delete.
(arm_linux_init_abi): Set up longjmp description in tdep.
* armnbsd-nat.c (get_longjmp_target): Delete.
* armnbsd-tdep.c (arm_netbsd_init_abi_common): Set up longjmp
description in tdep.
* config/arm/tm-nbsd.h (JB_ELEMENT_SIZE, JB_PC): Delete.
(get_longjmp_target): Delete declaration.
(GET_LONGJMP_TARGET): Delete.
* config/arm/tm-linux.h (arm_get_longjmp_target): Delete declaration.
(GET_LONGJMP_TARGET): Delete.
@
text
@d517 1
d746 1
a746 3
  if ((GDB_MULTI_ARCH >= GDB_MULTI_ARCH_PARTIAL)
      && (gdbarch->frame_chain_valid == 0))
    fprintf_unfiltered (log, "\n\tframe_chain_valid");
@


1.108
log
@* gdbarch.sh (TARGET_LONG_DOUBLE_BIT): Default to 64.
* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d185 1
d350 1
d643 1
d1288 11
d3044 24
@


1.107
log
@* gdbarch.sh: Map LEVEL onto a symbolic GT_LEVEL.  Exit on bad
field.  Use diff -u.
* gdbarch.c: Re-generate.
@
text
@d454 1
a454 1
  current_gdbarch->long_double_bit = 2*TARGET_DOUBLE_BIT;
@


1.106
log
@* gdbarch.sh (REGISTER_CONVERTIBLE): Don't require when
multi-arch partial.
(PUSH_ARGUMENTS): Switch to using predefault.
* gdbarch.c: Regenerate.
@
text
@d589 1
a589 1
  if ((GDB_MULTI_ARCH >= 2)
d593 1
a593 1
  if ((GDB_MULTI_ARCH >= 2)
d596 1
a596 1
  if ((GDB_MULTI_ARCH >= 2)
d599 1
a599 1
  if ((GDB_MULTI_ARCH >= 2)
d611 1
a611 1
  if ((GDB_MULTI_ARCH >= 2)
d614 1
a614 1
  if ((GDB_MULTI_ARCH >= 2)
d617 1
a617 1
  if ((GDB_MULTI_ARCH >= 2)
d620 1
a620 1
  if ((GDB_MULTI_ARCH >= 2)
d623 1
a623 1
  if ((GDB_MULTI_ARCH >= 2)
d626 1
a626 1
  if ((GDB_MULTI_ARCH >= 2)
d629 1
a629 1
  if ((GDB_MULTI_ARCH >= 2)
d632 1
a632 1
  if ((GDB_MULTI_ARCH >= 2)
d641 1
a641 1
  if ((GDB_MULTI_ARCH >= 1)
d644 1
a644 1
  if ((GDB_MULTI_ARCH >= 1)
d647 1
a647 1
  if ((GDB_MULTI_ARCH >= 2)
d650 1
a650 1
  if ((GDB_MULTI_ARCH >= 2)
d653 1
a653 1
  if ((GDB_MULTI_ARCH >= 2)
d656 1
a656 1
  if ((GDB_MULTI_ARCH >= 1)
d659 1
a659 1
  if ((GDB_MULTI_ARCH >= 2)
d662 1
a662 1
  if ((GDB_MULTI_ARCH >= 1)
d665 1
a665 1
  if ((GDB_MULTI_ARCH >= 1)
d670 1
a670 1
  if ((GDB_MULTI_ARCH >= 1)
d673 1
a673 1
  if ((GDB_MULTI_ARCH >= 2)
d676 1
a676 1
  if ((GDB_MULTI_ARCH >= 2)
d682 1
a682 1
  if ((GDB_MULTI_ARCH >= 1)
d694 1
a694 1
  if ((GDB_MULTI_ARCH >= 2)
d698 1
a698 1
  if ((GDB_MULTI_ARCH >= 2)
d702 1
a702 1
  if ((GDB_MULTI_ARCH >= 2)
d705 1
a705 1
  if ((GDB_MULTI_ARCH >= 2)
d708 1
a708 1
  if ((GDB_MULTI_ARCH >= 2)
d713 1
a713 1
  if ((GDB_MULTI_ARCH >= 2)
d717 1
a717 1
  if ((GDB_MULTI_ARCH >= 2)
d721 1
a721 1
  if ((GDB_MULTI_ARCH >= 2)
d727 1
a727 1
  if ((GDB_MULTI_ARCH >= 2)
d731 1
a731 1
  if ((GDB_MULTI_ARCH >= 2)
d735 1
a735 1
  if ((GDB_MULTI_ARCH >= 2)
d739 1
a739 1
  if ((GDB_MULTI_ARCH >= 2)
d742 1
a742 1
  if ((GDB_MULTI_ARCH >= 1)
d745 1
a745 1
  if ((GDB_MULTI_ARCH >= 2)
d748 1
a748 1
  if ((GDB_MULTI_ARCH >= 2)
d751 1
a751 1
  if ((GDB_MULTI_ARCH >= 2)
d754 1
a754 1
  if ((GDB_MULTI_ARCH >= 2)
d757 1
a757 1
  if ((GDB_MULTI_ARCH >= 2)
@


1.105
log
@* valops.c (PUSH_ARGUMENTS): Delete definition.
* gdbarch.sh (PUSH_ARGUMENTS): Don't require when multi-arch
partial.  Default to default_push_arguments.
* gdbarch.h, gdbarch.c: Regenerate.
@
text
@d503 1
d697 1
a697 2
  if (gdbarch->push_arguments == 0)
    gdbarch->push_arguments = default_push_arguments;
@


1.104
log
@* gdbarch.sh (TARGET_LONG_DOUBLE_FORMAT): Default to
default_double_format.
* gdbarch.h, gdbarch.c: Re-generate.
* findvar.c (floatformat_unknown): Delete variable definition.
* doublest.h (floatformat_unknown): Delete variable declaration.
@
text
@d696 2
a697 3
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->push_arguments == 0))
    fprintf_unfiltered (log, "\n\tpush_arguments");
@


1.103
log
@* gdbarch.sh (PRINT_FLOAT_INFO): Add rule.
* gdbarch.c gdbarch.h: Regenerate.
* arch-utils.c (default_print_float_info): New function.
* arch-utils.h (default_print_float_info): Prototype it.
* infcmd.c (float_info): Call PRINT_FLOAT_INFO.
* doc/gdbint.texinfo (FLOAT_INFO): Mark as deprecated.
(PRINT_FLOAT_INFO): Document it.

* arm-tdep.c (arm_print_float_info): Renamed from arm_float_info.
* config/arm/tm-arm.h (FLOAT_INFO): Delete.
(PRINT_FLOAT_INFO): Define.
@
text
@d770 1
a770 1
    gdbarch->long_double_format = &floatformat_unknown;
@


1.102
log
@2002-02-04  Elena Zannoni  <ezannoni@@redhat.com>

	* gdbarch.sh: Add definitions for COFF_MAKE_MSYMBOL_SPECIAL and
	ELF_MAKE_MSYMBOL_SPECIAL.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c (default_elf_make_msymbol_special,
        default_coff_make_msymbol_special): New functions.
	* arch-utils.h (default_elf_make_msymbol_special,
        default_coff_make_msymbol_special): Export.
	* elfread.c (elf_symtab_read): Compile use of
	ELF_MAKE_MSYMBOL_SPECIAL unconditionally because it is now
	multiarched.
	* coffread.c (coff_symtab_read): Ditto, for
	COFF_MAKE_MSYMBOL_SPECIAL.
@
text
@d180 1
d348 1
d483 1
d635 1
a806 5
#ifdef ADDR_BITS_REMOVE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDR_BITS_REMOVE(addr)",
                      XSTRING (ADDR_BITS_REMOVE (addr)));
d809 10
a818 4
                        "gdbarch_dump: ADDR_BITS_REMOVE = 0x%08lx\n",
                        (long) current_gdbarch->addr_bits_remove
                        /*ADDR_BITS_REMOVE ()*/);
#endif
d833 11
d1179 11
a1244 11
#ifdef FRAMELESS_FUNCTION_INVOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (FRAMELESS_FUNCTION_INVOCATION (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
                        (long) current_gdbarch->frameless_function_invocation
                        /*FRAMELESS_FUNCTION_INVOCATION ()*/);
#endif
d1314 1
a1314 1
#ifdef INIT_FRAME_PC_FIRST
d1319 2
a1320 2
                      "INIT_FRAME_PC_FIRST(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC_FIRST (fromleaf, prev)));
d1324 3
a1326 3
                        "gdbarch_dump: INIT_FRAME_PC_FIRST = 0x%08lx\n",
                        (long) current_gdbarch->init_frame_pc_first
                        /*INIT_FRAME_PC_FIRST ()*/);
d1328 1
a1328 1
#ifdef INIT_FRAME_PC
d1333 2
a1334 2
                      "INIT_FRAME_PC(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC (fromleaf, prev)));
d1338 3
a1340 3
                        "gdbarch_dump: INIT_FRAME_PC = 0x%08lx\n",
                        (long) current_gdbarch->init_frame_pc
                        /*INIT_FRAME_PC ()*/);
a1352 11
#ifdef IN_SOLIB_CALL_TRAMPOLINE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_CALL_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_CALL_TRAMPOLINE (pc, name)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = 0x%08lx\n",
                        (long) current_gdbarch->in_solib_call_trampoline
                        /*IN_SOLIB_CALL_TRAMPOLINE ()*/);
#endif
d1364 5
d1371 4
a1374 2
                        "gdbarch_dump: in_function_epilogue_p = 0x%08lx\n",
                        (long) current_gdbarch->in_function_epilogue_p);
d1508 14
a2147 8
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: register_read = 0x%08lx\n",
                        (long) current_gdbarch->register_read);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: register_write = 0x%08lx\n",
                        (long) current_gdbarch->register_write);
d2935 18
@


1.101
log
@* gdbarch.sh (copyright): Update years in generated header.
(SMASH_TEXT_ADDRESS): Add rule.
*gdbarch.h, gdbarch.c: Re-generate.
* coffread.c: Multi-arch uses of SMASH_TEXT_ADDRESS.
* dbxread.c: Likewise.
* dwarfread.c: Likewise.
* elfread.c: Likewise.
* somread.c: Likewise.

* arm-tdep.c (arm_smash_text_address): New function.
* config/arm/tm-arm.h (SMASH_TEXT_ADDRESS): Define in terms of above.
@
text
@d261 2
d405 2
d520 2
d777 2
d803 5
d810 4
a813 10
                        "gdbarch_dump: in_function_epilogue_p = 0x%08lx\n",
                        (long) current_gdbarch->in_function_epilogue_p);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: register_read = 0x%08lx\n",
                        (long) current_gdbarch->register_read);
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: register_write = 0x%08lx\n",
                        (long) current_gdbarch->register_write);
a827 11
#ifdef ADDR_BITS_REMOVE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDR_BITS_REMOVE(addr)",
                      XSTRING (ADDR_BITS_REMOVE (addr)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDR_BITS_REMOVE = 0x%08lx\n",
                        (long) current_gdbarch->addr_bits_remove
                        /*ADDR_BITS_REMOVE ()*/);
#endif
d974 14
d1072 14
a1162 11
#ifdef FRAMELESS_FUNCTION_INVOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (FRAMELESS_FUNCTION_INVOCATION (fi)));
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
                        (long) current_gdbarch->frameless_function_invocation
                        /*FRAMELESS_FUNCTION_INVOCATION ()*/);
#endif
d1218 11
d1298 1
a1298 1
#ifdef INIT_FRAME_PC
d1303 2
a1304 2
                      "INIT_FRAME_PC(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC (fromleaf, prev)));
d1308 3
a1310 3
                        "gdbarch_dump: INIT_FRAME_PC = 0x%08lx\n",
                        (long) current_gdbarch->init_frame_pc
                        /*INIT_FRAME_PC ()*/);
d1312 1
a1312 1
#ifdef INIT_FRAME_PC_FIRST
d1317 2
a1318 2
                      "INIT_FRAME_PC_FIRST(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC_FIRST (fromleaf, prev)));
d1322 3
a1324 3
                        "gdbarch_dump: INIT_FRAME_PC_FIRST = 0x%08lx\n",
                        (long) current_gdbarch->init_frame_pc_first
                        /*INIT_FRAME_PC_FIRST ()*/);
d1337 11
a1358 5
#ifdef IN_SOLIB_CALL_TRAMPOLINE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "IN_SOLIB_CALL_TRAMPOLINE(pc, name)",
                      XSTRING (IN_SOLIB_CALL_TRAMPOLINE (pc, name)));
d1361 2
a1362 4
                        "gdbarch_dump: IN_SOLIB_CALL_TRAMPOLINE = 0x%08lx\n",
                        (long) current_gdbarch->in_solib_call_trampoline
                        /*IN_SOLIB_CALL_TRAMPOLINE ()*/);
#endif
d2122 8
d4423 36
@


1.100
log
@Eliminate IEEE_FLOAT.
@
text
@d4 1
a4 1
   Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d253 1
d399 1
d510 1
d763 1
d1749 11
d4231 18
@


1.99
log
@s/BIG_ENDIAN/BFD_ENDIAN_BIG/
@
text
@a147 1
  int ieee_float;
a314 1
  0,
a566 1
  /* Skip verify of ieee_float, invalid_p == 0 */
a1255 8
#ifdef IEEE_FLOAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: IEEE_FLOAT # %s\n",
                      XSTRING (IEEE_FLOAT));
  fprintf_unfiltered (file,
                      "gdbarch_dump: IEEE_FLOAT = %d\n",
                      IEEE_FLOAT);
#endif
a2285 16
}

int
gdbarch_ieee_float (struct gdbarch *gdbarch)
{
  /* Skip verify of ieee_float, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ieee_float called\n");
  return gdbarch->ieee_float;
}

void
set_gdbarch_ieee_float (struct gdbarch *gdbarch,
                        int ieee_float)
{
  gdbarch->ieee_float = ieee_float;
@


1.98
log
@* arch-utils.c (initialize_current_architecture): Test byte_order
against BFD_ENDIAN_UNKNOWN.
(gdbarch_info_init): Initialize byte_order to BFD_ENDIAN_UNKNOWN.
* gdbarch.sh: Update comments on default value of byte_order.
(verify_gdbarch, gdbarch_update_p): Test byte_order against
BFD_ENDIAN_UNKNOWN.
* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d273 1
a273 1
  BIG_ENDIAN,
d4758 1
a4758 1
    info.byte_order = (bfd_big_endian (info.abfd) ? BIG_ENDIAN
d4778 1
a4778 1
			  (info.byte_order == BIG_ENDIAN ? "big"
@


1.97
log
@* gdbarch.sh: When an int variable, print value using %d instead
of %ld.
* gdbarch.c: Re-generate.
@
text
@d551 1
a551 1
  if (gdbarch->byte_order == 0)
d4752 1
a4752 1
  if (info.byte_order == 0
d4756 1
a4756 1
  if (info.byte_order == 0
d4760 1
a4760 1
		       : 0);
d4762 1
a4762 1
  if (info.byte_order == 0)
@


1.96
log
@* gdbarch.sh (TARGET_CHAR_SIGNED): Do not specify the print
format.
@
text
@d836 2
a837 2
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION);
d844 2
a845 2
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION_TYPE = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION_TYPE);
d883 2
a884 2
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET_P = %ld\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET_P);
d892 2
a893 2
                        "gdbarch_dump: CALL_DUMMY_LENGTH = %ld\n",
                        (long) CALL_DUMMY_LENGTH);
d900 2
a901 2
                      "gdbarch_dump: CALL_DUMMY_LOCATION = %ld\n",
                      (long) CALL_DUMMY_LOCATION);
d908 2
a909 2
                      "gdbarch_dump: CALL_DUMMY_P = %ld\n",
                      (long) CALL_DUMMY_P);
d1091 2
a1092 2
                      "gdbarch_dump: EXTRA_STACK_ALIGNMENT_NEEDED = %ld\n",
                      (long) EXTRA_STACK_ALIGNMENT_NEEDED);
d1127 2
a1128 2
                      "gdbarch_dump: FP0_REGNUM = %ld\n",
                      (long) FP0_REGNUM);
d1135 2
a1136 2
                      "gdbarch_dump: FP_REGNUM = %ld\n",
                      (long) FP_REGNUM);
d1264 2
a1265 2
                      "gdbarch_dump: IEEE_FLOAT = %ld\n",
                      (long) IEEE_FLOAT);
d1347 2
a1348 2
                      "gdbarch_dump: MAX_REGISTER_RAW_SIZE = %ld\n",
                      (long) MAX_REGISTER_RAW_SIZE);
d1355 2
a1356 2
                      "gdbarch_dump: MAX_REGISTER_VIRTUAL_SIZE = %ld\n",
                      (long) MAX_REGISTER_VIRTUAL_SIZE);
d1385 2
a1386 2
                      "gdbarch_dump: NNPC_REGNUM = %ld\n",
                      (long) NNPC_REGNUM);
d1393 2
a1394 2
                      "gdbarch_dump: NPC_REGNUM = %ld\n",
                      (long) NPC_REGNUM);
d1401 2
a1402 2
                      "gdbarch_dump: NUM_PSEUDO_REGS = %ld\n",
                      (long) NUM_PSEUDO_REGS);
d1409 2
a1410 2
                      "gdbarch_dump: NUM_REGS = %ld\n",
                      (long) NUM_REGS);
d1417 2
a1418 2
                      "gdbarch_dump: PARM_BOUNDARY = %ld\n",
                      (long) PARM_BOUNDARY);
d1436 2
a1437 2
                      "gdbarch_dump: PC_REGNUM = %ld\n",
                      (long) PC_REGNUM);
d1538 2
a1539 2
                      "gdbarch_dump: REGISTER_BYTES = %ld\n",
                      (long) REGISTER_BYTES);
d1629 2
a1630 2
                      "gdbarch_dump: REGISTER_SIZE = %ld\n",
                      (long) REGISTER_SIZE);
d1775 2
a1776 2
                      "gdbarch_dump: SP_REGNUM = %ld\n",
                      (long) SP_REGNUM);
d1847 2
a1848 2
                      "gdbarch_dump: TARGET_ADDR_BIT = %ld\n",
                      (long) TARGET_ADDR_BIT);
d1864 2
a1865 2
                      "gdbarch_dump: TARGET_BFD_VMA_BIT = %ld\n",
                      (long) TARGET_BFD_VMA_BIT);
d1880 2
a1881 2
                      "gdbarch_dump: TARGET_CHAR_SIGNED = %ld\n",
                      (long) TARGET_CHAR_SIGNED);
d1888 2
a1889 2
                      "gdbarch_dump: TARGET_DOUBLE_BIT = %ld\n",
                      (long) TARGET_DOUBLE_BIT);
d1904 2
a1905 2
                      "gdbarch_dump: TARGET_FLOAT_BIT = %ld\n",
                      (long) TARGET_FLOAT_BIT);
d1920 2
a1921 2
                      "gdbarch_dump: TARGET_INT_BIT = %ld\n",
                      (long) TARGET_INT_BIT);
d1928 2
a1929 2
                      "gdbarch_dump: TARGET_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_BIT);
d1936 2
a1937 2
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT = %ld\n",
                      (long) TARGET_LONG_DOUBLE_BIT);
d1952 2
a1953 2
                      "gdbarch_dump: TARGET_LONG_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_LONG_BIT);
d1971 2
a1972 2
                      "gdbarch_dump: TARGET_PTR_BIT = %ld\n",
                      (long) TARGET_PTR_BIT);
d2012 2
a2013 2
                      "gdbarch_dump: TARGET_SHORT_BIT = %ld\n",
                      (long) TARGET_SHORT_BIT);
d2076 2
a2077 2
                      "gdbarch_dump: USE_GENERIC_DUMMY_FRAMES = %ld\n",
                      (long) USE_GENERIC_DUMMY_FRAMES);
@


1.95
log
@* gdbarch.sh (TARGET_CHAR_SIGNED): New macro.
* gdbarch.c, gdbarch.h: Regenerated.
* gdbtypes.c (build_gdbtypes): If TARGET_CHAR_SIGNED is zero,
set the TYPE_FLAG_UNSIGNED bit on the type.
* s390-tdep.c (s390_gdbarch_init): On the S/390, characters
are unsigned by default.
* rs6000-tdep.c (rs6000_gdbarch_init): Same for PowerPC and
RS6000.
@
text
@d1880 1
a1880 1
                      "gdbarch_dump: TARGET_CHAR_SIGNED = %d\n",
@


1.94
log
@Regenerate.
@
text
@d147 1
d289 1
d451 1
d567 2
d1875 8
d2279 18
@


1.93
log
@LITTLE_ENDIAN -> BFD_ENDIAN_LITTLE
@
text
@a343 1
  0,
@


1.92
log
@2001-12-10  Michael Snyder  <msnyder@@redhat.com>

	* arch-utils.c (generic_register_virtual_size): New function.
	* arch-utils.h: Export generic version of register_virtual_size.
	* gdbarch.sh (REGISTER_VIRTUAL_SIZE): Use new function as default.
	* gdbarch.c: Regenerate.
@
text
@d344 1
d4729 1
a4729 1
		       : bfd_little_endian (info.abfd) ? LITTLE_ENDIAN
d4749 1
a4749 1
			   : info.byte_order == LITTLE_ENDIAN ? "little"
@


1.91
log
@* arch-utils.c (generic_register_raw_size): New function.
* gdbarch.sh (REGISTER_RAW_SIZE): Use generic_register_raw_size as
the static default.
* gdbarch.c: Regenerate.
* arch-utils.h (generic_register_raw_size): Declare.

* config/mips/tm-mips.h (REGISTER_RAW_SIZE): Delete macro.
* mips-tdep.c (mips_register_raw_size): Make function static.
(mips_gdbarch_init): Initialize register_raw_size.
@
text
@d317 1
a317 1
  0,
@


1.90
log
@* dwarf2cfi.c: New file.
* dwarf2cfi.h: New file.
* dwarf2read.c (dwarf_frame_offset, dwarf_frame_size): New variables.
(dwarf_eh_frame_offset, dwarf_eh_frame_size): New variables.
(dwarf2_read_section): Change to non static.
(dwarf2_locate_sections): Add .debug_frame and .eh_frame section
recognition.
(FRAME_SECTION, EH_FRAME_SECTION): New define.
* elfread.c (elf_symfile_read): Add call of frame informations build.
* frame.h (frame_info): Add pointer to unwind_context.
* symfile.h (dwarf2_build_frame_info): Add declaration.
* gdbarch.sh (DWARF2_BUILD_FRAME_INFO): Add.
* gdbarch.h, gdbarch.c: Regenerate.
* Makefile.in: Add dwarf2cfi_h, dwarf2cfi.o
* x86-64-tdep.c (i386_gdbarch_init): Initialize target vector to
use debug frame info.
@
text
@d315 1
a315 1
  0,
@


1.89
log
@Expand the regcache so that there is space for pseudo-registers.
@
text
@d259 1
d400 1
d764 1
d1009 14
d4326 24
@


1.88
log
@	Fix for PR gdb/209, PR gdb/156:
	* gdbarch.c, gdbarch.h: Rebuilt.
	* gdbarch.sh: Added `construct_inferior_arguments'.
	* cli/cli-decode.h (cmd_list_element): Added pre_show_hook.
	Typo fix.
	* cli/cli-setshow.c (do_setshow_command): Call the pre_show_hook.
	* infcmd.c (_initialize_infcmd): Set sfunc on `set args' command.
	(inferior_argc, inferior_argv): New globals.
	(notice_args_set): New function.
	(set_inferior_args): Clear inferior_argc and inferior_argv.
	(set_inferior_args_vector): New function.
	(get_inferior_args): Handle inferior argument vector.
	(run_command): Use get_inferior_args().
	(notice_args_read): New function.
	(_initialize_infcmd): Don't call set_inferior_args.
	* command.h: Typo fix.
	(cmd_list_element): Added pre_show_hook.
	* main.c (captured_main): Added --args option.
	(print_gdb_help): Document --args.
	* inferior.h (construct_inferior_arguments): Declare.
	(set_inferior_args_vector): Likewise.
	* fork-child.c (construct_inferior_arguments): New function.
@
text
@d670 2
a671 2
  /* Skip verify of fetch_pseudo_register, invalid_p == 0 */
  /* Skip verify of store_pseudo_register, invalid_p == 0 */
d3329 6
d3351 6
@


1.87
log
@When non-multi-arch, use predefault as the value of a pure-multi-arch
method.
@
text
@d258 1
d398 1
d509 1
d761 1
d969 4
d4279 18
@


1.86
log
@gdbarch.sh provides default for USE_STRUCT_CONVENTION.
@
text
@d396 1
a396 1
  0,
@


1.85
log
@gdbarch.sh (PC_IN_CALL_DUMMY): Require a value.
@
text
@d489 1
d693 1
a693 3
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->use_struct_convention == 0))
    fprintf_unfiltered (log, "\n\tuse_struct_convention");
@


1.84
log
@gdbarch.sh (CALL_DUMMY_LOCATION): Require a value.
@
text
@d640 1
a640 1
  if ((GDB_MULTI_ARCH >= 2)
@


1.83
log
@Add predicate for PUSH_RETURN_ADDRESS.
@
text
@d622 1
a622 1
  if ((GDB_MULTI_ARCH >= 2)
@


1.82
log
@	* arch-utils.c (generic_in_function_epilogue_p): New function.
	* arch-utils.h (generic_in_function_epilogue_p): Declare extern.
	* breakpoint.c (watchpoint_check): Add test whether the pc is
	currently in the epilogue of a function.
	* gdbarch.c: Autogenerated from gdbarch.sh.
	* gdbarch.h: Ditto.
	* gdbarch.sh (function_list): Add `in_function_epilogue_p' definition.
@
text
@d681 1
a681 3
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->push_return_address == 0))
    fprintf_unfiltered (log, "\n\tpush_return_address");
d3488 6
@


1.81
log
@Change INIT_EXTRA_FRAME_INFO() to a function with predicate.
@
text
@d257 1
d396 1
d505 1
d760 1
d787 4
d4250 18
@


1.80
log
@* gdbarch.sh (verify_gdbarch): Use a mem_file to accumulate all
error messages.  Print in a single batch.
* gdbarch.c: Regenerate.
@
text
@d697 1
a697 3
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->init_extra_frame_info == 0))
    fprintf_unfiltered (log, "\n\tinit_extra_frame_info");
d3614 6
@


1.79
log
@	* arch-utils.c (generic_in_solib_call_trampoline): New function.
	* arch-utils.h (generic_in_solib_call_trampoline): Extern declaration.
	* gdbarch.c: Regenerated from gdbarch.sh.
	* gdbarch.h: Ditto.
	* gdbarch.sh (function_list): Add `IN_SOLIB_CALL_TRAMPOLINE' definition.
	* infrun.c (IN_SOLIB_CALL_TRAMPOLINE): Remove macro.
@
text
@d529 4
d536 2
d540 1
a540 2
    internal_error (__FILE__, __LINE__,
                    "verify_gdbarch: byte-order unset");
d542 1
a542 2
    internal_error (__FILE__, __LINE__,
                    "verify_gdbarch: bfd_arch_info unset");
d567 1
a567 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: num_regs invalid");
d571 1
a571 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: sp_regnum invalid");
d574 1
a574 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: fp_regnum invalid");
d577 1
a577 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: pc_regnum invalid");
d589 1
a589 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: register_size invalid");
d592 1
a592 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: register_bytes invalid");
d595 1
a595 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: register_byte invalid");
d598 1
a598 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: register_raw_size invalid");
d601 1
a601 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: max_register_raw_size invalid");
d604 1
a604 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: register_virtual_size invalid");
d607 1
a607 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: max_register_virtual_size invalid");
d610 1
a610 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: register_virtual_type invalid");
d618 1
a618 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: use_generic_dummy_frames invalid");
d621 1
a621 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_location invalid");
d624 1
a624 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_address invalid");
d627 1
a627 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_start_offset invalid");
d630 1
a630 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_breakpoint_offset invalid");
d633 1
a633 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_breakpoint_offset_p invalid");
d636 1
a636 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_length invalid");
d639 1
a639 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: pc_in_call_dummy invalid");
d642 1
a642 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_p invalid");
d647 1
a647 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_stack_adjust_p invalid");
d650 1
a650 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: call_dummy_stack_adjust invalid");
d653 1
a653 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: fix_call_dummy invalid");
d659 1
a659 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: get_saved_register invalid");
d671 1
a671 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: extract_return_value invalid");
d674 1
a674 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: push_arguments invalid");
d677 1
a677 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: push_dummy_frame invalid");
d680 1
a680 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: push_return_address invalid");
d683 1
a683 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: pop_frame invalid");
d686 1
a686 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: store_struct_return invalid");
d689 1
a689 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: store_return_value invalid");
d693 1
a693 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: use_struct_convention invalid");
d696 1
a696 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_init_saved_regs invalid");
d699 1
a699 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: init_extra_frame_info invalid");
d702 1
a702 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: skip_prologue invalid");
d706 1
a706 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: inner_than invalid");
d712 1
a712 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: decr_pc_after_break invalid");
d716 1
a716 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: function_start_offset invalid");
d720 1
a720 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_args_skip invalid");
d724 1
a724 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_chain invalid");
d727 1
a727 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_chain_valid invalid");
d730 1
a730 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_saved_pc invalid");
d733 1
a733 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_args_address invalid");
d736 1
a736 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_locals_address invalid");
d739 1
a739 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: saved_pc_after_call invalid");
d742 1
a742 2
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: frame_num_args invalid");
d759 7
@


1.78
log
@Add explicit #include of "value.h".
@
text
@d256 1
d394 1
d502 1
d801 1
d1334 11
d4256 18
@


1.77
log
@Add INTEGER_TO_ADDRESS to hadle nasty harvard architectures that do
funnies to integer to address conversions.
@
text
@d58 1
@


1.76
log
@From 2001-07-09 D.J. Barrow <djbarrow@@de.ibm.com>:
* gdbarch.sh: Fixed CALL_DUMMY_BREAKPOINT_OFFSET to check
CALL_DUMMY_BREAKPOINT_OFFSET_P.
* gdbarch.c: Regenerate.
@
text
@d210 1
d391 1
d684 1
d1318 11
d3408 24
@


1.75
log
@* gdbarch.sh (gdbarch_alloc): Name the new architecture
``current_gdbarch'' so that it, and not the identically named
global is refered to by macros.
* gdbarch.c: Regenerate.
@
text
@d635 1
a635 1
      && (gdbarch->call_dummy_breakpoint_offset == -1))
d2995 1
a2995 1
  if (gdbarch->call_dummy_breakpoint_offset == -1)
@


1.74
log
@* gdbarch.sh (gdbarch_dump): Sort output.
* gdbarch.c: Regenerate.
@
text
@d412 8
a419 2
  struct gdbarch *gdbarch = XMALLOC (struct gdbarch);
  memset (gdbarch, 0, sizeof (*gdbarch));
d421 1
a421 1
  alloc_gdbarch_data (gdbarch);
d423 1
a423 1
  gdbarch->tdep = tdep;
d425 2
a426 2
  gdbarch->bfd_arch_info = info->bfd_arch_info;
  gdbarch->byte_order = info->byte_order;
d429 68
a496 68
  gdbarch->short_bit = 2*TARGET_CHAR_BIT;
  gdbarch->int_bit = 4*TARGET_CHAR_BIT;
  gdbarch->long_bit = 4*TARGET_CHAR_BIT;
  gdbarch->long_long_bit = 2*TARGET_LONG_BIT;
  gdbarch->float_bit = 4*TARGET_CHAR_BIT;
  gdbarch->double_bit = 8*TARGET_CHAR_BIT;
  gdbarch->long_double_bit = 2*TARGET_DOUBLE_BIT;
  gdbarch->ptr_bit = TARGET_INT_BIT;
  gdbarch->bfd_vma_bit = TARGET_ARCHITECTURE->bits_per_address;
  gdbarch->read_pc = generic_target_read_pc;
  gdbarch->write_pc = generic_target_write_pc;
  gdbarch->read_fp = generic_target_read_fp;
  gdbarch->write_fp = generic_target_write_fp;
  gdbarch->read_sp = generic_target_read_sp;
  gdbarch->write_sp = generic_target_write_sp;
  gdbarch->virtual_frame_pointer = legacy_virtual_frame_pointer;
  gdbarch->num_regs = -1;
  gdbarch->sp_regnum = -1;
  gdbarch->fp_regnum = -1;
  gdbarch->pc_regnum = -1;
  gdbarch->fp0_regnum = -1;
  gdbarch->npc_regnum = -1;
  gdbarch->nnpc_regnum = -1;
  gdbarch->stab_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->ecoff_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->dwarf_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->sdb_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->dwarf2_reg_to_regnum = no_op_reg_to_regnum;
  gdbarch->register_name = legacy_register_name;
  gdbarch->register_size = -1;
  gdbarch->register_bytes = -1;
  gdbarch->max_register_raw_size = -1;
  gdbarch->max_register_virtual_size = -1;
  gdbarch->do_registers_info = do_registers_info;
  gdbarch->register_sim_regno = default_register_sim_regno;
  gdbarch->cannot_fetch_register = cannot_register_not;
  gdbarch->cannot_store_register = cannot_register_not;
  gdbarch->use_generic_dummy_frames = -1;
  gdbarch->call_dummy_start_offset = -1;
  gdbarch->call_dummy_breakpoint_offset = -1;
  gdbarch->call_dummy_breakpoint_offset_p = -1;
  gdbarch->call_dummy_length = -1;
  gdbarch->call_dummy_p = -1;
  gdbarch->call_dummy_words = legacy_call_dummy_words;
  gdbarch->sizeof_call_dummy_words = legacy_sizeof_call_dummy_words;
  gdbarch->call_dummy_stack_adjust_p = -1;
  gdbarch->init_frame_pc_first = init_frame_pc_noop;
  gdbarch->init_frame_pc = init_frame_pc_default;
  gdbarch->coerce_float_to_double = default_coerce_float_to_double;
  gdbarch->register_convertible = generic_register_convertible_not;
  gdbarch->pointer_to_address = unsigned_pointer_to_address;
  gdbarch->address_to_pointer = unsigned_address_to_pointer;
  gdbarch->return_value_on_stack = generic_return_value_on_stack_not;
  gdbarch->prologue_frameless_p = generic_prologue_frameless_p;
  gdbarch->breakpoint_from_pc = legacy_breakpoint_from_pc;
  gdbarch->memory_insert_breakpoint = default_memory_insert_breakpoint;
  gdbarch->memory_remove_breakpoint = default_memory_remove_breakpoint;
  gdbarch->decr_pc_after_break = -1;
  gdbarch->prepare_to_proceed = default_prepare_to_proceed;
  gdbarch->function_start_offset = -1;
  gdbarch->remote_translate_xfer_address = generic_remote_translate_xfer_address;
  gdbarch->frame_args_skip = -1;
  gdbarch->frameless_function_invocation = generic_frameless_function_invocation_not;
  gdbarch->extra_stack_alignment_needed = 1;
  gdbarch->convert_from_func_ptr_addr = core_addr_identity;
  gdbarch->addr_bits_remove = core_addr_identity;
  gdbarch->print_insn = legacy_print_insn;
  gdbarch->skip_trampoline_code = generic_skip_trampoline_code;
d499 1
a499 1
  return gdbarch;
@


1.73
log
@2001-09-05  Elena Zannoni  <ezannoni@@redhat.com>

        * gdbarch.sh: Move include of dis-asm.h so it is generated earlier
        in gdbarch.h.
        (TARGET_PRINT_INSN): Multiarch.
        * gdbarch.h: Regenerate.
        * gdbarch.c: Regenerate.

        * arch-utils.c (legacy_print_insn): New function.
        * arch-utils.h (legacy_print_insn): Export.

        * cris-tdep.c (cris_delayed_get_disassembler): Use
        TARGET_PRINT_INSN, instead of tm_print_insn.
        * d10v-tdep.c (print_insn): Ditto.
        * d30v-tdep.c (print_insn): Ditto.
        * m32r-tdep.c (dump_insn): Ditto.
        * v850-tdep.c (v850_scan_prologue): Ditto.
        * mcore-tdep.c (mcore_dump_insn): Ditto.
        * sh-tdep.c (sh_gdbarch_init): Set print_insn gdbarch field.
@
text
@d805 23
a827 1
#ifdef TARGET_ARCHITECTURE
d829 8
a836 2
                      "gdbarch_dump: TARGET_ARCHITECTURE # %s\n",
                      XSTRING (TARGET_ARCHITECTURE));
d838 4
a841 1
#ifdef TARGET_BYTE_ORDER
d843 2
a844 2
                      "gdbarch_dump: TARGET_BYTE_ORDER # %s\n",
                      XSTRING (TARGET_BYTE_ORDER));
d846 4
a849 1
#ifdef TARGET_SHORT_BIT
d851 2
a852 2
                      "gdbarch_dump: TARGET_SHORT_BIT # %s\n",
                      XSTRING (TARGET_SHORT_BIT));
d854 1
a854 1
#ifdef TARGET_INT_BIT
d856 8
a863 2
                      "gdbarch_dump: TARGET_INT_BIT # %s\n",
                      XSTRING (TARGET_INT_BIT));
d865 1
a865 1
#ifdef TARGET_LONG_BIT
d867 8
a874 2
                      "gdbarch_dump: TARGET_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_BIT));
d876 1
a876 1
#ifdef TARGET_LONG_LONG_BIT
d878 6
a883 2
                      "gdbarch_dump: TARGET_LONG_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_LONG_BIT));
d885 4
a888 1
#ifdef TARGET_FLOAT_BIT
d890 2
a891 2
                      "gdbarch_dump: TARGET_FLOAT_BIT # %s\n",
                      XSTRING (TARGET_FLOAT_BIT));
d893 1
a893 1
#ifdef TARGET_DOUBLE_BIT
d895 6
a900 2
                      "gdbarch_dump: TARGET_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_DOUBLE_BIT));
d902 4
a905 1
#ifdef TARGET_LONG_DOUBLE_BIT
d907 2
a908 2
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_BIT));
d910 4
a913 1
#ifdef TARGET_PTR_BIT
d915 2
a916 2
                      "gdbarch_dump: TARGET_PTR_BIT # %s\n",
                      XSTRING (TARGET_PTR_BIT));
d918 1
a918 1
#ifdef TARGET_ADDR_BIT
d920 6
a925 2
                      "gdbarch_dump: TARGET_ADDR_BIT # %s\n",
                      XSTRING (TARGET_ADDR_BIT));
d927 4
a930 1
#ifdef TARGET_BFD_VMA_BIT
d932 2
a933 2
                      "gdbarch_dump: TARGET_BFD_VMA_BIT # %s\n",
                      XSTRING (TARGET_BFD_VMA_BIT));
d935 4
a938 1
#ifdef IEEE_FLOAT
d940 2
a941 2
                      "gdbarch_dump: IEEE_FLOAT # %s\n",
                      XSTRING (IEEE_FLOAT));
d943 4
a946 1
#ifdef TARGET_READ_PC
d948 2
a949 3
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC(ptid)",
                      XSTRING (TARGET_READ_PC (ptid)));
d951 1
a951 2
#if defined (TARGET_WRITE_PC) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d954 7
a960 2
                      "TARGET_WRITE_PC(val, ptid)",
                      XSTRING (TARGET_WRITE_PC (val, ptid)));
d962 1
a962 1
#ifdef TARGET_READ_FP
d965 7
a971 2
                      "TARGET_READ_FP()",
                      XSTRING (TARGET_READ_FP ()));
d973 1
a973 2
#if defined (TARGET_WRITE_FP) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d976 7
a982 2
                      "TARGET_WRITE_FP(val)",
                      XSTRING (TARGET_WRITE_FP (val)));
d984 1
a984 1
#ifdef TARGET_READ_SP
d987 7
a993 2
                      "TARGET_READ_SP()",
                      XSTRING (TARGET_READ_SP ()));
d995 4
a998 2
#if defined (TARGET_WRITE_SP) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1000 2
a1001 3
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_SP(val)",
                      XSTRING (TARGET_WRITE_SP (val)));
d1003 2
a1004 1
#if defined (TARGET_VIRTUAL_FRAME_POINTER) && GDB_MULTI_ARCH
d1008 2
a1009 2
                      "TARGET_VIRTUAL_FRAME_POINTER(pc, frame_regnum, frame_offset)",
                      XSTRING (TARGET_VIRTUAL_FRAME_POINTER (pc, frame_regnum, frame_offset)));
d1011 5
a1015 4
#ifdef NUM_REGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: NUM_REGS # %s\n",
                      XSTRING (NUM_REGS));
d1017 1
a1017 1
#ifdef NUM_PSEUDO_REGS
d1019 8
a1026 2
                      "gdbarch_dump: NUM_PSEUDO_REGS # %s\n",
                      XSTRING (NUM_PSEUDO_REGS));
d1028 1
a1028 1
#ifdef SP_REGNUM
d1030 8
a1037 2
                      "gdbarch_dump: SP_REGNUM # %s\n",
                      XSTRING (SP_REGNUM));
d1039 1
a1039 1
#ifdef FP_REGNUM
d1041 8
a1048 2
                      "gdbarch_dump: FP_REGNUM # %s\n",
                      XSTRING (FP_REGNUM));
d1050 3
a1052 1
#ifdef PC_REGNUM
d1054 9
a1062 2
                      "gdbarch_dump: PC_REGNUM # %s\n",
                      XSTRING (PC_REGNUM));
d1064 1
a1064 1
#ifdef FP0_REGNUM
d1066 8
a1073 2
                      "gdbarch_dump: FP0_REGNUM # %s\n",
                      XSTRING (FP0_REGNUM));
d1075 1
a1075 1
#ifdef NPC_REGNUM
d1077 2
a1078 4
                      "gdbarch_dump: NPC_REGNUM # %s\n",
                      XSTRING (NPC_REGNUM));
#endif
#ifdef NNPC_REGNUM
d1080 2
a1081 2
                      "gdbarch_dump: NNPC_REGNUM # %s\n",
                      XSTRING (NNPC_REGNUM));
d1083 3
a1085 1
#ifdef STAB_REG_TO_REGNUM
d1088 2
a1089 2
                      "STAB_REG_TO_REGNUM(stab_regnr)",
                      XSTRING (STAB_REG_TO_REGNUM (stab_regnr)));
d1091 5
a1095 5
#ifdef ECOFF_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ECOFF_REG_TO_REGNUM(ecoff_regnr)",
                      XSTRING (ECOFF_REG_TO_REGNUM (ecoff_regnr)));
d1097 3
a1099 1
#ifdef DWARF_REG_TO_REGNUM
d1102 2
a1103 2
                      "DWARF_REG_TO_REGNUM(dwarf_regnr)",
                      XSTRING (DWARF_REG_TO_REGNUM (dwarf_regnr)));
d1105 5
a1109 5
#ifdef SDB_REG_TO_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SDB_REG_TO_REGNUM(sdb_regnr)",
                      XSTRING (SDB_REG_TO_REGNUM (sdb_regnr)));
d1111 1
a1111 1
#ifdef DWARF2_REG_TO_REGNUM
d1113 2
a1114 5
                      "gdbarch_dump: %s # %s\n",
                      "DWARF2_REG_TO_REGNUM(dwarf2_regnr)",
                      XSTRING (DWARF2_REG_TO_REGNUM (dwarf2_regnr)));
#endif
#ifdef REGISTER_NAME
d1116 2
a1117 3
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_NAME(regnr)",
                      XSTRING (REGISTER_NAME (regnr)));
d1119 1
a1119 1
#ifdef REGISTER_SIZE
d1121 2
a1122 4
                      "gdbarch_dump: REGISTER_SIZE # %s\n",
                      XSTRING (REGISTER_SIZE));
#endif
#ifdef REGISTER_BYTES
d1124 2
a1125 2
                      "gdbarch_dump: REGISTER_BYTES # %s\n",
                      XSTRING (REGISTER_BYTES));
d1127 1
a1127 1
#ifdef REGISTER_BYTE
d1130 7
a1136 2
                      "REGISTER_BYTE(reg_nr)",
                      XSTRING (REGISTER_BYTE (reg_nr)));
d1138 1
a1138 1
#ifdef REGISTER_RAW_SIZE
d1141 7
a1147 2
                      "REGISTER_RAW_SIZE(reg_nr)",
                      XSTRING (REGISTER_RAW_SIZE (reg_nr)));
d1149 4
a1152 1
#ifdef MAX_REGISTER_RAW_SIZE
d1154 2
a1155 2
                      "gdbarch_dump: MAX_REGISTER_RAW_SIZE # %s\n",
                      XSTRING (MAX_REGISTER_RAW_SIZE));
d1157 1
a1157 1
#ifdef REGISTER_VIRTUAL_SIZE
d1160 7
a1166 2
                      "REGISTER_VIRTUAL_SIZE(reg_nr)",
                      XSTRING (REGISTER_VIRTUAL_SIZE (reg_nr)));
d1168 1
a1168 6
#ifdef MAX_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_VIRTUAL_SIZE # %s\n",
                      XSTRING (MAX_REGISTER_VIRTUAL_SIZE));
#endif
#ifdef REGISTER_VIRTUAL_TYPE
d1171 7
a1177 2
                      "REGISTER_VIRTUAL_TYPE(reg_nr)",
                      XSTRING (REGISTER_VIRTUAL_TYPE (reg_nr)));
d1179 2
a1180 1
#if defined (DO_REGISTERS_INFO) && GDB_MULTI_ARCH
d1184 2
a1185 2
                      "DO_REGISTERS_INFO(reg_nr, fpregs)",
                      XSTRING (DO_REGISTERS_INFO (reg_nr, fpregs)));
d1187 5
a1191 5
#ifdef REGISTER_SIM_REGNO
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_SIM_REGNO(reg_nr)",
                      XSTRING (REGISTER_SIM_REGNO (reg_nr)));
d1193 1
a1193 1
#ifdef REGISTER_BYTES_OK
d1196 7
a1202 2
                      "REGISTER_BYTES_OK(nr_bytes)",
                      XSTRING (REGISTER_BYTES_OK (nr_bytes)));
d1204 1
a1204 1
#ifdef CANNOT_FETCH_REGISTER
d1207 7
a1213 2
                      "CANNOT_FETCH_REGISTER(regnum)",
                      XSTRING (CANNOT_FETCH_REGISTER (regnum)));
d1215 1
a1215 1
#ifdef CANNOT_STORE_REGISTER
d1218 7
a1224 2
                      "CANNOT_STORE_REGISTER(regnum)",
                      XSTRING (CANNOT_STORE_REGISTER (regnum)));
d1226 1
a1226 1
#ifdef USE_GENERIC_DUMMY_FRAMES
d1228 2
a1229 4
                      "gdbarch_dump: USE_GENERIC_DUMMY_FRAMES # %s\n",
                      XSTRING (USE_GENERIC_DUMMY_FRAMES));
#endif
#ifdef CALL_DUMMY_LOCATION
d1231 2
a1232 2
                      "gdbarch_dump: CALL_DUMMY_LOCATION # %s\n",
                      XSTRING (CALL_DUMMY_LOCATION));
d1234 3
a1236 1
#ifdef CALL_DUMMY_ADDRESS
d1239 2
a1240 2
                      "CALL_DUMMY_ADDRESS()",
                      XSTRING (CALL_DUMMY_ADDRESS ()));
d1242 5
a1246 4
#ifdef CALL_DUMMY_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET # %s\n",
                      XSTRING (CALL_DUMMY_START_OFFSET));
d1248 1
a1248 1
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET
d1250 2
a1251 4
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET # %s\n",
                      XSTRING (CALL_DUMMY_BREAKPOINT_OFFSET));
#endif
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET_P
d1253 2
a1254 2
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET_P # %s\n",
                      XSTRING (CALL_DUMMY_BREAKPOINT_OFFSET_P));
d1256 3
a1258 1
#ifdef CALL_DUMMY_LENGTH
d1260 9
a1268 2
                      "gdbarch_dump: CALL_DUMMY_LENGTH # %s\n",
                      XSTRING (CALL_DUMMY_LENGTH));
d1270 3
a1272 1
#ifdef PC_IN_CALL_DUMMY
d1275 8
a1282 2
                      "PC_IN_CALL_DUMMY(pc, sp, frame_address)",
                      XSTRING (PC_IN_CALL_DUMMY (pc, sp, frame_address)));
d1284 3
a1286 1
#ifdef CALL_DUMMY_P
d1288 9
a1296 2
                      "gdbarch_dump: CALL_DUMMY_P # %s\n",
                      XSTRING (CALL_DUMMY_P));
d1298 1
a1298 1
#ifdef CALL_DUMMY_WORDS
d1300 8
a1307 2
                      "gdbarch_dump: CALL_DUMMY_WORDS # %s\n",
                      XSTRING (CALL_DUMMY_WORDS));
d1309 4
a1312 1
#ifdef SIZEOF_CALL_DUMMY_WORDS
d1314 2
a1315 2
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (SIZEOF_CALL_DUMMY_WORDS));
d1317 1
a1317 1
#ifdef CALL_DUMMY_STACK_ADJUST_P
d1319 2
a1320 4
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST_P # %s\n",
                      XSTRING (CALL_DUMMY_STACK_ADJUST_P));
#endif
#ifdef CALL_DUMMY_STACK_ADJUST
d1322 2
a1323 2
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST # %s\n",
                      XSTRING (CALL_DUMMY_STACK_ADJUST));
d1325 1
a1325 2
#if defined (FIX_CALL_DUMMY) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1328 7
a1334 2
                      "FIX_CALL_DUMMY(dummy, pc, fun, nargs, args, type, gcc_p)",
                      XSTRING (FIX_CALL_DUMMY (dummy, pc, fun, nargs, args, type, gcc_p)));
d1336 1
a1336 2
#if defined (INIT_FRAME_PC_FIRST) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1339 7
a1345 2
                      "INIT_FRAME_PC_FIRST(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC_FIRST (fromleaf, prev)));
d1347 4
a1350 2
#if defined (INIT_FRAME_PC) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1352 2
a1353 3
                      "gdbarch_dump: %s # %s\n",
                      "INIT_FRAME_PC(fromleaf, prev)",
                      XSTRING (INIT_FRAME_PC (fromleaf, prev)));
d1355 4
a1358 1
#ifdef BELIEVE_PCC_PROMOTION
d1360 2
a1361 2
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION # %s\n",
                      XSTRING (BELIEVE_PCC_PROMOTION));
d1363 4
a1366 1
#ifdef BELIEVE_PCC_PROMOTION_TYPE
d1368 2
a1369 2
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION_TYPE # %s\n",
                      XSTRING (BELIEVE_PCC_PROMOTION_TYPE));
d1371 1
a1371 1
#ifdef COERCE_FLOAT_TO_DOUBLE
d1373 2
a1374 6
                      "gdbarch_dump: %s # %s\n",
                      "COERCE_FLOAT_TO_DOUBLE(formal, actual)",
                      XSTRING (COERCE_FLOAT_TO_DOUBLE (formal, actual)));
#endif
#if defined (GET_SAVED_REGISTER) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1376 2
a1377 3
                      "gdbarch_dump: %s # %s\n",
                      "GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval)",
                      XSTRING (GET_SAVED_REGISTER (raw_buffer, optimized, addrp, frame, regnum, lval)));
d1379 1
a1379 1
#ifdef REGISTER_CONVERTIBLE
d1381 2
a1382 6
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERTIBLE(nr)",
                      XSTRING (REGISTER_CONVERTIBLE (nr)));
#endif
#if defined (REGISTER_CONVERT_TO_VIRTUAL) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1384 2
a1385 3
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERT_TO_VIRTUAL(regnum, type, from, to)",
                      XSTRING (REGISTER_CONVERT_TO_VIRTUAL (regnum, type, from, to)));
d1387 1
a1387 2
#if defined (REGISTER_CONVERT_TO_RAW) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1390 7
a1396 2
                      "REGISTER_CONVERT_TO_RAW(type, regnum, from, to)",
                      XSTRING (REGISTER_CONVERT_TO_RAW (type, regnum, from, to)));
d1398 1
a1398 2
#if defined (FETCH_PSEUDO_REGISTER) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1400 2
a1401 6
                      "gdbarch_dump: %s # %s\n",
                      "FETCH_PSEUDO_REGISTER(regnum)",
                      XSTRING (FETCH_PSEUDO_REGISTER (regnum)));
#endif
#if defined (STORE_PSEUDO_REGISTER) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1403 2
a1404 3
                      "gdbarch_dump: %s # %s\n",
                      "STORE_PSEUDO_REGISTER(regnum)",
                      XSTRING (STORE_PSEUDO_REGISTER (regnum)));
d1411 5
d1417 2
a1418 1
#if defined (ADDRESS_TO_POINTER) && GDB_MULTI_ARCH
d1422 8
a1429 2
                      "ADDRESS_TO_POINTER(type, buf, addr)",
                      XSTRING (ADDRESS_TO_POINTER (type, buf, addr)));
d1431 1
a1431 1
#ifdef RETURN_VALUE_ON_STACK
d1434 7
a1440 2
                      "RETURN_VALUE_ON_STACK(type)",
                      XSTRING (RETURN_VALUE_ON_STACK (type)));
d1442 1
a1442 2
#if defined (EXTRACT_RETURN_VALUE) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1445 7
a1451 2
                      "EXTRACT_RETURN_VALUE(type, regbuf, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regbuf, valbuf)));
d1458 5
d1464 2
a1465 1
#if defined (PUSH_DUMMY_FRAME) && GDB_MULTI_ARCH
d1472 6
d1483 5
d1489 1
a1489 2
#if defined (POP_FRAME) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1492 7
a1498 2
                      "POP_FRAME(-)",
                      XSTRING (POP_FRAME (-)));
d1500 1
a1500 2
#if defined (STORE_STRUCT_RETURN) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1502 2
a1503 6
                      "gdbarch_dump: %s # %s\n",
                      "STORE_STRUCT_RETURN(addr, sp)",
                      XSTRING (STORE_STRUCT_RETURN (addr, sp)));
#endif
#if defined (STORE_RETURN_VALUE) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1505 2
a1506 3
                      "gdbarch_dump: %s # %s\n",
                      "STORE_RETURN_VALUE(type, valbuf)",
                      XSTRING (STORE_RETURN_VALUE (type, valbuf)));
d1508 1
a1508 1
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS
d1511 7
a1517 2
                      "EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS (regbuf)));
d1519 1
a1519 1
#ifdef USE_STRUCT_CONVENTION
d1522 7
a1528 2
                      "USE_STRUCT_CONVENTION(gcc_p, value_type)",
                      XSTRING (USE_STRUCT_CONVENTION (gcc_p, value_type)));
d1530 2
a1531 1
#if defined (FRAME_INIT_SAVED_REGS) && GDB_MULTI_ARCH
d1535 8
a1542 2
                      "FRAME_INIT_SAVED_REGS(frame)",
                      XSTRING (FRAME_INIT_SAVED_REGS (frame)));
d1544 2
a1545 1
#if defined (INIT_EXTRA_FRAME_INFO) && GDB_MULTI_ARCH
d1549 8
a1556 2
                      "INIT_EXTRA_FRAME_INFO(fromleaf, frame)",
                      XSTRING (INIT_EXTRA_FRAME_INFO (fromleaf, frame)));
d1558 1
a1558 1
#ifdef SKIP_PROLOGUE
d1561 7
a1567 2
                      "SKIP_PROLOGUE(ip)",
                      XSTRING (SKIP_PROLOGUE (ip)));
d1569 1
a1569 1
#ifdef PROLOGUE_FRAMELESS_P
d1572 7
a1578 2
                      "PROLOGUE_FRAMELESS_P(ip)",
                      XSTRING (PROLOGUE_FRAMELESS_P (ip)));
d1580 1
a1580 1
#ifdef INNER_THAN
d1583 7
a1589 2
                      "INNER_THAN(lhs, rhs)",
                      XSTRING (INNER_THAN (lhs, rhs)));
d1591 4
a1594 1
#ifdef BREAKPOINT_FROM_PC
d1596 2
a1597 3
                      "gdbarch_dump: %s # %s\n",
                      "BREAKPOINT_FROM_PC(pcptr, lenptr)",
                      XSTRING (BREAKPOINT_FROM_PC (pcptr, lenptr)));
d1599 1
a1599 1
#ifdef MEMORY_INSERT_BREAKPOINT
d1602 7
a1608 2
                      "MEMORY_INSERT_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_INSERT_BREAKPOINT (addr, contents_cache)));
d1610 1
a1610 1
#ifdef MEMORY_REMOVE_BREAKPOINT
d1613 7
a1619 2
                      "MEMORY_REMOVE_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_REMOVE_BREAKPOINT (addr, contents_cache)));
d1621 1
a1621 6
#ifdef DECR_PC_AFTER_BREAK
  fprintf_unfiltered (file,
                      "gdbarch_dump: DECR_PC_AFTER_BREAK # %s\n",
                      XSTRING (DECR_PC_AFTER_BREAK));
#endif
#ifdef PREPARE_TO_PROCEED
d1624 7
a1630 2
                      "PREPARE_TO_PROCEED(select_it)",
                      XSTRING (PREPARE_TO_PROCEED (select_it)));
d1632 2
a1633 6
#ifdef FUNCTION_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET # %s\n",
                      XSTRING (FUNCTION_START_OFFSET));
#endif
#if defined (REMOTE_TRANSLATE_XFER_ADDRESS) && GDB_MULTI_ARCH
d1640 7
a1646 1
#ifdef FRAME_ARGS_SKIP
d1648 8
a1655 2
                      "gdbarch_dump: FRAME_ARGS_SKIP # %s\n",
                      XSTRING (FRAME_ARGS_SKIP));
d1657 1
a1657 1
#ifdef FRAMELESS_FUNCTION_INVOCATION
d1660 7
a1666 2
                      "FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (FRAMELESS_FUNCTION_INVOCATION (fi)));
d1668 3
a1670 1
#ifdef FRAME_CHAIN
d1673 8
a1680 2
                      "FRAME_CHAIN(frame)",
                      XSTRING (FRAME_CHAIN (frame)));
d1682 1
a1682 1
#ifdef FRAME_CHAIN_VALID
d1685 15
a1699 2
                      "FRAME_CHAIN_VALID(chain, thisframe)",
                      XSTRING (FRAME_CHAIN_VALID (chain, thisframe)));
d1701 1
a1701 1
#ifdef FRAME_SAVED_PC
d1704 7
a1710 2
                      "FRAME_SAVED_PC(fi)",
                      XSTRING (FRAME_SAVED_PC (fi)));
d1712 1
a1712 1
#ifdef FRAME_ARGS_ADDRESS
d1715 7
a1721 2
                      "FRAME_ARGS_ADDRESS(fi)",
                      XSTRING (FRAME_ARGS_ADDRESS (fi)));
d1723 3
a1725 1
#ifdef FRAME_LOCALS_ADDRESS
d1728 8
a1735 2
                      "FRAME_LOCALS_ADDRESS(fi)",
                      XSTRING (FRAME_LOCALS_ADDRESS (fi)));
d1737 4
a1740 1
#ifdef SAVED_PC_AFTER_CALL
d1742 2
a1743 3
                      "gdbarch_dump: %s # %s\n",
                      "SAVED_PC_AFTER_CALL(frame)",
                      XSTRING (SAVED_PC_AFTER_CALL (frame)));
d1745 1
a1745 1
#ifdef FRAME_NUM_ARGS
d1748 7
a1754 2
                      "FRAME_NUM_ARGS(frame)",
                      XSTRING (FRAME_NUM_ARGS (frame)));
d1761 5
d1767 3
a1769 1
#ifdef EXTRA_STACK_ALIGNMENT_NEEDED
d1771 3
a1773 2
                      "gdbarch_dump: EXTRA_STACK_ALIGNMENT_NEEDED # %s\n",
                      XSTRING (EXTRA_STACK_ALIGNMENT_NEEDED));
d1775 5
a1779 5
#ifdef REG_STRUCT_HAS_ADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (REG_STRUCT_HAS_ADDR (gcc_p, type)));
d1781 2
a1782 1
#if defined (SAVE_DUMMY_FRAME_TOS) && GDB_MULTI_ARCH
d1786 2
a1787 2
                      "SAVE_DUMMY_FRAME_TOS(sp)",
                      XSTRING (SAVE_DUMMY_FRAME_TOS (sp)));
d1789 5
a1793 4
#ifdef PARM_BOUNDARY
  fprintf_unfiltered (file,
                      "gdbarch_dump: PARM_BOUNDARY # %s\n",
                      XSTRING (PARM_BOUNDARY));
d1795 3
a1797 16
#ifdef TARGET_FLOAT_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_FORMAT # %s\n",
                      XSTRING (TARGET_FLOAT_FORMAT));
#endif
#ifdef TARGET_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_DOUBLE_FORMAT));
#endif
#ifdef TARGET_LONG_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_FORMAT));
#endif
#ifdef CONVERT_FROM_FUNC_PTR_ADDR
d1800 2
a1801 2
                      "CONVERT_FROM_FUNC_PTR_ADDR(addr)",
                      XSTRING (CONVERT_FROM_FUNC_PTR_ADDR (addr)));
d1803 5
a1807 5
#ifdef ADDR_BITS_REMOVE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDR_BITS_REMOVE(addr)",
                      XSTRING (ADDR_BITS_REMOVE (addr)));
d1809 1
a1809 2
#if defined (SOFTWARE_SINGLE_STEP) && GDB_MULTI_ARCH
  /* Macro might contain `[{}]' when not multi-arch */
d1811 2
a1812 5
                      "gdbarch_dump: %s # %s\n",
                      "SOFTWARE_SINGLE_STEP(sig, insert_breakpoints_p)",
                      XSTRING (SOFTWARE_SINGLE_STEP (sig, insert_breakpoints_p)));
#endif
#ifdef TARGET_PRINT_INSN
d1814 2
a1815 3
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_PRINT_INSN(vma, info)",
                      XSTRING (TARGET_PRINT_INSN (vma, info)));
d1817 1
a1817 1
#ifdef SKIP_TRAMPOLINE_CODE
d1819 2
a1820 5
                      "gdbarch_dump: %s # %s\n",
                      "SKIP_TRAMPOLINE_CODE(pc)",
                      XSTRING (SKIP_TRAMPOLINE_CODE (pc)));
#endif
#ifdef TARGET_ARCHITECTURE
d1826 8
d1836 3
d1842 1
a1842 1
#ifdef TARGET_SHORT_BIT
d1844 2
a1845 4
                      "gdbarch_dump: TARGET_SHORT_BIT = %ld\n",
                      (long) TARGET_SHORT_BIT);
#endif
#ifdef TARGET_INT_BIT
d1847 2
a1848 2
                      "gdbarch_dump: TARGET_INT_BIT = %ld\n",
                      (long) TARGET_INT_BIT);
d1850 1
a1850 1
#ifdef TARGET_LONG_BIT
d1852 2
a1853 4
                      "gdbarch_dump: TARGET_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_BIT);
#endif
#ifdef TARGET_LONG_LONG_BIT
d1855 2
a1856 2
                      "gdbarch_dump: TARGET_LONG_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_LONG_BIT);
d1860 3
d1866 20
a1885 1
#ifdef TARGET_DOUBLE_BIT
d1887 2
a1888 2
                      "gdbarch_dump: TARGET_DOUBLE_BIT = %ld\n",
                      (long) TARGET_DOUBLE_BIT);
d1892 3
d1898 4
a1901 1
#ifdef TARGET_PTR_BIT
d1903 2
a1904 2
                      "gdbarch_dump: TARGET_PTR_BIT = %ld\n",
                      (long) TARGET_PTR_BIT);
d1906 1
a1906 1
#ifdef TARGET_ADDR_BIT
d1908 2
a1909 4
                      "gdbarch_dump: TARGET_ADDR_BIT = %ld\n",
                      (long) TARGET_ADDR_BIT);
#endif
#ifdef TARGET_BFD_VMA_BIT
d1911 2
a1912 2
                      "gdbarch_dump: TARGET_BFD_VMA_BIT = %ld\n",
                      (long) TARGET_BFD_VMA_BIT);
d1914 1
a1914 1
#ifdef IEEE_FLOAT
d1916 3
a1918 4
                      "gdbarch_dump: IEEE_FLOAT = %ld\n",
                      (long) IEEE_FLOAT);
#endif
#ifdef TARGET_READ_PC
d1921 3
a1923 3
                        "gdbarch_dump: TARGET_READ_PC = 0x%08lx\n",
                        (long) current_gdbarch->read_pc
                        /*TARGET_READ_PC ()*/);
d1925 7
a1931 6
#ifdef TARGET_WRITE_PC
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_PC = 0x%08lx\n",
                        (long) current_gdbarch->write_pc
                        /*TARGET_WRITE_PC ()*/);
d1934 4
d1944 5
a1948 1
#ifdef TARGET_WRITE_FP
d1951 3
a1953 3
                        "gdbarch_dump: TARGET_WRITE_FP = 0x%08lx\n",
                        (long) current_gdbarch->write_fp
                        /*TARGET_WRITE_FP ()*/);
d1956 4
d1966 7
a1972 6
#ifdef TARGET_WRITE_SP
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_SP = 0x%08lx\n",
                        (long) current_gdbarch->write_sp
                        /*TARGET_WRITE_SP ()*/);
d1975 7
d1988 8
d1998 12
a2009 2
                        "gdbarch_dump: register_read = 0x%08lx\n",
                        (long) current_gdbarch->register_read);
d2012 3
a2014 6
                        "gdbarch_dump: register_write = 0x%08lx\n",
                        (long) current_gdbarch->register_write);
#ifdef NUM_REGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: NUM_REGS = %ld\n",
                      (long) NUM_REGS);
d2016 3
a2018 1
#ifdef NUM_PSEUDO_REGS
d2020 3
a2022 32
                      "gdbarch_dump: NUM_PSEUDO_REGS = %ld\n",
                      (long) NUM_PSEUDO_REGS);
#endif
#ifdef SP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: SP_REGNUM = %ld\n",
                      (long) SP_REGNUM);
#endif
#ifdef FP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP_REGNUM = %ld\n",
                      (long) FP_REGNUM);
#endif
#ifdef PC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: PC_REGNUM = %ld\n",
                      (long) PC_REGNUM);
#endif
#ifdef FP0_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP0_REGNUM = %ld\n",
                      (long) FP0_REGNUM);
#endif
#ifdef NPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: NPC_REGNUM = %ld\n",
                      (long) NPC_REGNUM);
#endif
#ifdef NNPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: NNPC_REGNUM = %ld\n",
                      (long) NNPC_REGNUM);
a2023 1
#ifdef STAB_REG_TO_REGNUM
d2026 3
a2028 3
                        "gdbarch_dump: STAB_REG_TO_REGNUM = 0x%08lx\n",
                        (long) current_gdbarch->stab_reg_to_regnum
                        /*STAB_REG_TO_REGNUM ()*/);
d2030 1
a2030 36
#ifdef ECOFF_REG_TO_REGNUM
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ECOFF_REG_TO_REGNUM = 0x%08lx\n",
                        (long) current_gdbarch->ecoff_reg_to_regnum
                        /*ECOFF_REG_TO_REGNUM ()*/);
#endif
#ifdef DWARF_REG_TO_REGNUM
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DWARF_REG_TO_REGNUM = 0x%08lx\n",
                        (long) current_gdbarch->dwarf_reg_to_regnum
                        /*DWARF_REG_TO_REGNUM ()*/);
#endif
#ifdef SDB_REG_TO_REGNUM
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SDB_REG_TO_REGNUM = 0x%08lx\n",
                        (long) current_gdbarch->sdb_reg_to_regnum
                        /*SDB_REG_TO_REGNUM ()*/);
#endif
#ifdef DWARF2_REG_TO_REGNUM
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DWARF2_REG_TO_REGNUM = 0x%08lx\n",
                        (long) current_gdbarch->dwarf2_reg_to_regnum
                        /*DWARF2_REG_TO_REGNUM ()*/);
#endif
#ifdef REGISTER_NAME
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_NAME = 0x%08lx\n",
                        (long) current_gdbarch->register_name
                        /*REGISTER_NAME ()*/);
#endif
#ifdef REGISTER_SIZE
d2032 2
a2033 82
                      "gdbarch_dump: REGISTER_SIZE = %ld\n",
                      (long) REGISTER_SIZE);
#endif
#ifdef REGISTER_BYTES
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTES = %ld\n",
                      (long) REGISTER_BYTES);
#endif
#ifdef REGISTER_BYTE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_BYTE = 0x%08lx\n",
                        (long) current_gdbarch->register_byte
                        /*REGISTER_BYTE ()*/);
#endif
#ifdef REGISTER_RAW_SIZE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_RAW_SIZE = 0x%08lx\n",
                        (long) current_gdbarch->register_raw_size
                        /*REGISTER_RAW_SIZE ()*/);
#endif
#ifdef MAX_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_RAW_SIZE = %ld\n",
                      (long) MAX_REGISTER_RAW_SIZE);
#endif
#ifdef REGISTER_VIRTUAL_SIZE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_VIRTUAL_SIZE = 0x%08lx\n",
                        (long) current_gdbarch->register_virtual_size
                        /*REGISTER_VIRTUAL_SIZE ()*/);
#endif
#ifdef MAX_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_VIRTUAL_SIZE = %ld\n",
                      (long) MAX_REGISTER_VIRTUAL_SIZE);
#endif
#ifdef REGISTER_VIRTUAL_TYPE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_VIRTUAL_TYPE = 0x%08lx\n",
                        (long) current_gdbarch->register_virtual_type
                        /*REGISTER_VIRTUAL_TYPE ()*/);
#endif
#ifdef DO_REGISTERS_INFO
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: DO_REGISTERS_INFO = 0x%08lx\n",
                        (long) current_gdbarch->do_registers_info
                        /*DO_REGISTERS_INFO ()*/);
#endif
#ifdef REGISTER_SIM_REGNO
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_SIM_REGNO = 0x%08lx\n",
                        (long) current_gdbarch->register_sim_regno
                        /*REGISTER_SIM_REGNO ()*/);
#endif
#ifdef REGISTER_BYTES_OK
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_BYTES_OK = 0x%08lx\n",
                        (long) current_gdbarch->register_bytes_ok
                        /*REGISTER_BYTES_OK ()*/);
#endif
#ifdef CANNOT_FETCH_REGISTER
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CANNOT_FETCH_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->cannot_fetch_register
                        /*CANNOT_FETCH_REGISTER ()*/);
#endif
#ifdef CANNOT_STORE_REGISTER
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CANNOT_STORE_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->cannot_store_register
                        /*CANNOT_STORE_REGISTER ()*/);
#endif
#ifdef USE_GENERIC_DUMMY_FRAMES
d2038 1
a2038 1
#ifdef CALL_DUMMY_LOCATION
d2040 3
a2042 4
                      "gdbarch_dump: CALL_DUMMY_LOCATION = %ld\n",
                      (long) CALL_DUMMY_LOCATION);
#endif
#ifdef CALL_DUMMY_ADDRESS
d2045 3
a2047 444
                        "gdbarch_dump: CALL_DUMMY_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->call_dummy_address
                        /*CALL_DUMMY_ADDRESS ()*/);
#endif
#ifdef CALL_DUMMY_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET = 0x%08lx\n",
                      (long) CALL_DUMMY_START_OFFSET);
#endif
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET
  if (CALL_DUMMY_BREAKPOINT_OFFSET_P)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
                        (long) CALL_DUMMY_BREAKPOINT_OFFSET);
#endif
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET_P = %ld\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET_P);
#endif
#ifdef CALL_DUMMY_LENGTH
  if (CALL_DUMMY_LOCATION == BEFORE_TEXT_END || CALL_DUMMY_LOCATION == AFTER_TEXT_END)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_LENGTH = %ld\n",
                        (long) CALL_DUMMY_LENGTH);
#endif
#ifdef PC_IN_CALL_DUMMY
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PC_IN_CALL_DUMMY = 0x%08lx\n",
                        (long) current_gdbarch->pc_in_call_dummy
                        /*PC_IN_CALL_DUMMY ()*/);
#endif
#ifdef CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_P = %ld\n",
                      (long) CALL_DUMMY_P);
#endif
#ifdef CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) CALL_DUMMY_WORDS);
#endif
#ifdef SIZEOF_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) SIZEOF_CALL_DUMMY_WORDS);
#endif
#ifdef CALL_DUMMY_STACK_ADJUST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST_P = 0x%08lx\n",
                      (long) CALL_DUMMY_STACK_ADJUST_P);
#endif
#ifdef CALL_DUMMY_STACK_ADJUST
  if (CALL_DUMMY_STACK_ADJUST_P)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_STACK_ADJUST = 0x%08lx\n",
                        (long) CALL_DUMMY_STACK_ADJUST);
#endif
#ifdef FIX_CALL_DUMMY
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FIX_CALL_DUMMY = 0x%08lx\n",
                        (long) current_gdbarch->fix_call_dummy
                        /*FIX_CALL_DUMMY ()*/);
#endif
#ifdef INIT_FRAME_PC_FIRST
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INIT_FRAME_PC_FIRST = 0x%08lx\n",
                        (long) current_gdbarch->init_frame_pc_first
                        /*INIT_FRAME_PC_FIRST ()*/);
#endif
#ifdef INIT_FRAME_PC
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INIT_FRAME_PC = 0x%08lx\n",
                        (long) current_gdbarch->init_frame_pc
                        /*INIT_FRAME_PC ()*/);
#endif
#ifdef BELIEVE_PCC_PROMOTION
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION);
#endif
#ifdef BELIEVE_PCC_PROMOTION_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION_TYPE = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION_TYPE);
#endif
#ifdef COERCE_FLOAT_TO_DOUBLE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: COERCE_FLOAT_TO_DOUBLE = 0x%08lx\n",
                        (long) current_gdbarch->coerce_float_to_double
                        /*COERCE_FLOAT_TO_DOUBLE ()*/);
#endif
#ifdef GET_SAVED_REGISTER
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: GET_SAVED_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->get_saved_register
                        /*GET_SAVED_REGISTER ()*/);
#endif
#ifdef REGISTER_CONVERTIBLE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERTIBLE = 0x%08lx\n",
                        (long) current_gdbarch->register_convertible
                        /*REGISTER_CONVERTIBLE ()*/);
#endif
#ifdef REGISTER_CONVERT_TO_VIRTUAL
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERT_TO_VIRTUAL = 0x%08lx\n",
                        (long) current_gdbarch->register_convert_to_virtual
                        /*REGISTER_CONVERT_TO_VIRTUAL ()*/);
#endif
#ifdef REGISTER_CONVERT_TO_RAW
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERT_TO_RAW = 0x%08lx\n",
                        (long) current_gdbarch->register_convert_to_raw
                        /*REGISTER_CONVERT_TO_RAW ()*/);
#endif
#ifdef FETCH_PSEUDO_REGISTER
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FETCH_PSEUDO_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->fetch_pseudo_register
                        /*FETCH_PSEUDO_REGISTER ()*/);
#endif
#ifdef STORE_PSEUDO_REGISTER
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_PSEUDO_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->store_pseudo_register
                        /*STORE_PSEUDO_REGISTER ()*/);
#endif
#ifdef POINTER_TO_ADDRESS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: POINTER_TO_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->pointer_to_address
                        /*POINTER_TO_ADDRESS ()*/);
#endif
#ifdef ADDRESS_TO_POINTER
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_TO_POINTER = 0x%08lx\n",
                        (long) current_gdbarch->address_to_pointer
                        /*ADDRESS_TO_POINTER ()*/);
#endif
#ifdef RETURN_VALUE_ON_STACK
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: RETURN_VALUE_ON_STACK = 0x%08lx\n",
                        (long) current_gdbarch->return_value_on_stack
                        /*RETURN_VALUE_ON_STACK ()*/);
#endif
#ifdef EXTRACT_RETURN_VALUE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->extract_return_value
                        /*EXTRACT_RETURN_VALUE ()*/);
#endif
#ifdef PUSH_ARGUMENTS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_ARGUMENTS = 0x%08lx\n",
                        (long) current_gdbarch->push_arguments
                        /*PUSH_ARGUMENTS ()*/);
#endif
#ifdef PUSH_DUMMY_FRAME
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_DUMMY_FRAME = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_frame
                        /*PUSH_DUMMY_FRAME ()*/);
#endif
#ifdef PUSH_RETURN_ADDRESS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_RETURN_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->push_return_address
                        /*PUSH_RETURN_ADDRESS ()*/);
#endif
#ifdef POP_FRAME
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: POP_FRAME = 0x%08lx\n",
                        (long) current_gdbarch->pop_frame
                        /*POP_FRAME ()*/);
#endif
#ifdef STORE_STRUCT_RETURN
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_STRUCT_RETURN = 0x%08lx\n",
                        (long) current_gdbarch->store_struct_return
                        /*STORE_STRUCT_RETURN ()*/);
#endif
#ifdef STORE_RETURN_VALUE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->store_return_value
                        /*STORE_RETURN_VALUE ()*/);
#endif
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->extract_struct_value_address
                        /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
#endif
#ifdef USE_STRUCT_CONVENTION
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: USE_STRUCT_CONVENTION = 0x%08lx\n",
                        (long) current_gdbarch->use_struct_convention
                        /*USE_STRUCT_CONVENTION ()*/);
#endif
#ifdef FRAME_INIT_SAVED_REGS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_INIT_SAVED_REGS = 0x%08lx\n",
                        (long) current_gdbarch->frame_init_saved_regs
                        /*FRAME_INIT_SAVED_REGS ()*/);
#endif
#ifdef INIT_EXTRA_FRAME_INFO
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INIT_EXTRA_FRAME_INFO = 0x%08lx\n",
                        (long) current_gdbarch->init_extra_frame_info
                        /*INIT_EXTRA_FRAME_INFO ()*/);
#endif
#ifdef SKIP_PROLOGUE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SKIP_PROLOGUE = 0x%08lx\n",
                        (long) current_gdbarch->skip_prologue
                        /*SKIP_PROLOGUE ()*/);
#endif
#ifdef PROLOGUE_FRAMELESS_P
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PROLOGUE_FRAMELESS_P = 0x%08lx\n",
                        (long) current_gdbarch->prologue_frameless_p
                        /*PROLOGUE_FRAMELESS_P ()*/);
#endif
#ifdef INNER_THAN
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INNER_THAN = 0x%08lx\n",
                        (long) current_gdbarch->inner_than
                        /*INNER_THAN ()*/);
#endif
#ifdef BREAKPOINT_FROM_PC
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: BREAKPOINT_FROM_PC = 0x%08lx\n",
                        (long) current_gdbarch->breakpoint_from_pc
                        /*BREAKPOINT_FROM_PC ()*/);
#endif
#ifdef MEMORY_INSERT_BREAKPOINT
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = 0x%08lx\n",
                        (long) current_gdbarch->memory_insert_breakpoint
                        /*MEMORY_INSERT_BREAKPOINT ()*/);
#endif
#ifdef MEMORY_REMOVE_BREAKPOINT
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = 0x%08lx\n",
                        (long) current_gdbarch->memory_remove_breakpoint
                        /*MEMORY_REMOVE_BREAKPOINT ()*/);
#endif
#ifdef DECR_PC_AFTER_BREAK
  fprintf_unfiltered (file,
                      "gdbarch_dump: DECR_PC_AFTER_BREAK = %ld\n",
                      (long) DECR_PC_AFTER_BREAK);
#endif
#ifdef PREPARE_TO_PROCEED
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PREPARE_TO_PROCEED = 0x%08lx\n",
                        (long) current_gdbarch->prepare_to_proceed
                        /*PREPARE_TO_PROCEED ()*/);
#endif
#ifdef FUNCTION_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET = %ld\n",
                      (long) FUNCTION_START_OFFSET);
#endif
#ifdef REMOTE_TRANSLATE_XFER_ADDRESS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REMOTE_TRANSLATE_XFER_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->remote_translate_xfer_address
                        /*REMOTE_TRANSLATE_XFER_ADDRESS ()*/);
#endif
#ifdef FRAME_ARGS_SKIP
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_ARGS_SKIP = %ld\n",
                      (long) FRAME_ARGS_SKIP);
#endif
#ifdef FRAMELESS_FUNCTION_INVOCATION
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
                        (long) current_gdbarch->frameless_function_invocation
                        /*FRAMELESS_FUNCTION_INVOCATION ()*/);
#endif
#ifdef FRAME_CHAIN
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_CHAIN = 0x%08lx\n",
                        (long) current_gdbarch->frame_chain
                        /*FRAME_CHAIN ()*/);
#endif
#ifdef FRAME_CHAIN_VALID
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_CHAIN_VALID = 0x%08lx\n",
                        (long) current_gdbarch->frame_chain_valid
                        /*FRAME_CHAIN_VALID ()*/);
#endif
#ifdef FRAME_SAVED_PC
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_SAVED_PC = 0x%08lx\n",
                        (long) current_gdbarch->frame_saved_pc
                        /*FRAME_SAVED_PC ()*/);
#endif
#ifdef FRAME_ARGS_ADDRESS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_ARGS_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->frame_args_address
                        /*FRAME_ARGS_ADDRESS ()*/);
#endif
#ifdef FRAME_LOCALS_ADDRESS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_LOCALS_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->frame_locals_address
                        /*FRAME_LOCALS_ADDRESS ()*/);
#endif
#ifdef SAVED_PC_AFTER_CALL
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SAVED_PC_AFTER_CALL = 0x%08lx\n",
                        (long) current_gdbarch->saved_pc_after_call
                        /*SAVED_PC_AFTER_CALL ()*/);
#endif
#ifdef FRAME_NUM_ARGS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_NUM_ARGS = 0x%08lx\n",
                        (long) current_gdbarch->frame_num_args
                        /*FRAME_NUM_ARGS ()*/);
#endif
#ifdef STACK_ALIGN
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STACK_ALIGN = 0x%08lx\n",
                        (long) current_gdbarch->stack_align
                        /*STACK_ALIGN ()*/);
#endif
#ifdef EXTRA_STACK_ALIGNMENT_NEEDED
  fprintf_unfiltered (file,
                      "gdbarch_dump: EXTRA_STACK_ALIGNMENT_NEEDED = %ld\n",
                      (long) EXTRA_STACK_ALIGNMENT_NEEDED);
#endif
#ifdef REG_STRUCT_HAS_ADDR
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REG_STRUCT_HAS_ADDR = 0x%08lx\n",
                        (long) current_gdbarch->reg_struct_has_addr
                        /*REG_STRUCT_HAS_ADDR ()*/);
#endif
#ifdef SAVE_DUMMY_FRAME_TOS
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SAVE_DUMMY_FRAME_TOS = 0x%08lx\n",
                        (long) current_gdbarch->save_dummy_frame_tos
                        /*SAVE_DUMMY_FRAME_TOS ()*/);
#endif
#ifdef PARM_BOUNDARY
  fprintf_unfiltered (file,
                      "gdbarch_dump: PARM_BOUNDARY = %ld\n",
                      (long) PARM_BOUNDARY);
#endif
#ifdef TARGET_FLOAT_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_FORMAT = %ld\n",
                      (long) TARGET_FLOAT_FORMAT);
#endif
#ifdef TARGET_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT = %ld\n",
                      (long) TARGET_DOUBLE_FORMAT);
#endif
#ifdef TARGET_LONG_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT = %ld\n",
                      (long) TARGET_LONG_DOUBLE_FORMAT);
#endif
#ifdef CONVERT_FROM_FUNC_PTR_ADDR
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CONVERT_FROM_FUNC_PTR_ADDR = 0x%08lx\n",
                        (long) current_gdbarch->convert_from_func_ptr_addr
                        /*CONVERT_FROM_FUNC_PTR_ADDR ()*/);
#endif
#ifdef ADDR_BITS_REMOVE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDR_BITS_REMOVE = 0x%08lx\n",
                        (long) current_gdbarch->addr_bits_remove
                        /*ADDR_BITS_REMOVE ()*/);
#endif
#ifdef SOFTWARE_SINGLE_STEP
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SOFTWARE_SINGLE_STEP = 0x%08lx\n",
                        (long) current_gdbarch->software_single_step
                        /*SOFTWARE_SINGLE_STEP ()*/);
#endif
#ifdef TARGET_PRINT_INSN
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_PRINT_INSN = 0x%08lx\n",
                        (long) current_gdbarch->print_insn
                        /*TARGET_PRINT_INSN ()*/);
#endif
#ifdef SKIP_TRAMPOLINE_CODE
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SKIP_TRAMPOLINE_CODE = 0x%08lx\n",
                        (long) current_gdbarch->skip_trampoline_code
                        /*SKIP_TRAMPOLINE_CODE ()*/);
@


1.72
log
@        * arch-utils.c (generic_skip_trampoline_code): New function.
        * arch-utils.h (generic_skip_trampoline_code): Declare external.
        * gdbarch.c: Regeberated from gdbarch.sh.
        * gdbarch.h: Ditto.
        * gdbarch.sh (SKIP_TRAMPOLINE_CODE): Multi-arch.
        * infrun.c: Remove default setting of SKIP_TRAMPOLINE_CODE macro.
@
text
@d252 1
d389 1
d489 1
d786 1
d1479 6
d2223 7
d4348 18
@


1.71
log
@* target.h (TARGET_VIRTUAL_FRAME_POINTER): Delete, multi-arched.
* gdbarch.sh (TARGET_VIRTUAL_FRAME_POINTER): Add.
* gdbarch.h, gdbarch.c: Regenerate.

* arch-utils.h (legacy_virtual_frame_pointer): Declare.
* arch-utils.c: Include "gdb_assert.h".
(legacy_virtual_frame_pointer): Define.
* Makefile.in (arch-utils.o): Depends on gdb_assert.h.

* tracepoint.c (encode_actions): Make frame_reg an int.  Make
frame_offset a LONGEST.
* ax-gdb.c (gen_frame_args_address): Ditto.
(gen_frame_locals_address): Ditto.
* mn10300-tdep.c (mn10300_gdbarch_init): Initialize
virtual_frame_pointer.
(mn10300_virtual_frame_pointer): Make static.  Update parameter
list to match function signature.
* config/mn10300/tm-mn10300.h (TARGET_VIRTUAL_FRAME_POINTER): Delete.
@
text
@d252 1
d387 1
d487 1
d783 1
d1475 6
d2213 7
d4331 18
@


1.70
log
@	* gdb-events.sh: Add architecture_changed event.
	* gdbarch.sh: Include gdb-event.h.
	(gdbarch_update_p): Notify UIs when architecture changes.
	* gdb-events.h: Regenerated.
	* gdb-events.c: Regenerated.
	* gdbarch.c: Regenerated.
@
text
@d153 1
d335 1
d434 1
d540 1
d901 7
d1579 7
d2516 18
@


1.69
log
@Clean up the D10V port so that GDB and the target program no
longer disagree on how big pointers are.
* findvar.c (value_from_register): Remove special case code for D10V.
* printcmd.c (print_frame_args): Same.
* valops.c (value_at, value_fetch_lazy): Same.
* values.c (unpack_long): Same.
* gdbarch.sh: Changes to effect the following:
* gdbarch.h (GDB_TARGET_IS_D10V, D10V_MAKE_DADDR,
gdbarch_d10v_make_daddr_ftype, gdbarch_d10v_make_daddr,
set_gdbarch_d10v_make_daddr, D10V_MAKE_IADDR,
gdbarch_d10v_make_iaddr_ftype, gdbarch_d10v_make_iaddr,
set_gdbarch_d10v_make_iaddr, D10V_DADDR_P,
gdbarch_d10v_daddr_p_ftype, gdbarch_d10v_daddr_p,
set_gdbarch_d10v_daddr_p, D10V_IADDR_P,
gdbarch_d10v_iaddr_p_ftype, gdbarch_d10v_iaddr_p,
set_gdbarch_d10v_iaddr_p, D10V_CONVERT_DADDR_TO_RAW,
gdbarch_d10v_convert_daddr_to_raw_ftype,
gdbarch_d10v_convert_daddr_to_raw,
set_gdbarch_d10v_convert_daddr_to_raw, D10V_CONVERT_IADDR_TO_RAW,
gdbarch_d10v_convert_iaddr_to_raw_ftype,
gdbarch_d10v_convert_iaddr_to_raw,
set_gdbarch_d10v_convert_iaddr_to_raw): Delete declarations.
* gdbarch.c: Delete the corresponding definitions.
(struct gdbarch): Delete members d10v_make_daddr,
d10v_make_iaddr, d10v_daddr_p, d10v_iaddr_p,
d10v_convert_daddr_to_raw, and d10v_convert_iaddr_to_raw.
(startup_gdbarch): Remove initializers for the above.
(verify_gdbarch, gdbarch_dump): Don't verify or dump them any
more.
* d10v-tdep.c (d10v_register_virtual_type): Rather that
claiming the stack pointer and PC are 32 bits long (which they
aren't), say that the stack pointer is an int16_t, and the
program counter is a function pointer.  This allows the rest
of GDB to make the appropriate conversions between the code
pointer format and real addresses.
(d10v_register_convertible, d10v_register_convert_to_virtual,
d10v_register_convert_to_raw): Delete function; no registers
are convertible now, so we use
generic_register_convertible_not instead.
(d10v_address_to_pointer, d10v_pointer_to_address): New gdbarch
methods.
(d10v_push_arguments, d10v_extract_return_value): Remove special
cases for code and data pointers.
(d10v_gdbarch_init): Set gdbarch_ptr_bit to 16, so that GDB and
the target agree on how large pointers are.  Say that addresses
are 32 bits long.  Register the address_to_pointer and
pointer_to_address conversion functions.  Since no registers are
convertible now, register generic_register_convertible_not as the
gdbarch_register_convertible method instead of
d10v_register_convertible.  Remove registrations for
d10v_register_convert_to_virtual,
d10v_register_convert_to_raw, gdbarch_d10v_make_daddr,
gdbarch_d10v_make_iaddr, gdbarch_d10v_daddr_p,
gdbarch_d10v_iaddr_p, gdbarch_d10v_convert_daddr_to_raw, and
gdbarch_d10v_convert_iaddr_to_raw.
@
text
@d64 1
d4737 1
d4771 2
a4772 1
  
@


1.69.2.1
log
@From 2001-07-09 D.J. Barrow <djbarrow@@de.ibm.com>:
* gdbarch.sh: Fixed CALL_DUMMY_BREAKPOINT_OFFSET to check
CALL_DUMMY_BREAKPOINT_OFFSET_P.
* gdbarch.c: Regenerate.
@
text
@d618 1
a618 1
      && (gdbarch->call_dummy_breakpoint_offset_p && gdbarch->call_dummy_breakpoint_offset == -1))
d3106 1
a3106 1
  if (gdbarch->call_dummy_breakpoint_offset_p && gdbarch->call_dummy_breakpoint_offset == -1)
@


1.69.4.1
log
@http://www10.software.ibm.com/developerworks/opensource/linux390/exp_src.html
Patch:    gdb-5.1pre-050901-s390.tar.gz (09/11/2001)
MD5: 886251f3719a754dd65a69df462ceac1
@
text
@d618 1
a618 1
      && (gdbarch->call_dummy_breakpoint_offset_p && gdbarch->call_dummy_breakpoint_offset == -1))
d3106 1
a3106 1
  if (gdbarch->call_dummy_breakpoint_offset_p && gdbarch->call_dummy_breakpoint_offset == -1)
@


1.68
log
@* arch-utils.c (init_frame_pc_default): New function
* arch-utils.h (init_frame_pc_default): Declare.
* gdbarch.sh (INIT_FRAME_PC): Default to init_frame_pc_default and
not init_frame_pc_noop.
* gdbarch.h, gdbarch.c: Re-generate.
* blockframe.c (INIT_FRAME_PC): Delete macro definition.
* mips-tdep.c (mips_gdbarch_init): Set init_frame_pc to
init_frame_pc_noop.
@
text
@a213 6
  gdbarch_d10v_make_daddr_ftype *d10v_make_daddr;
  gdbarch_d10v_make_iaddr_ftype *d10v_make_iaddr;
  gdbarch_d10v_daddr_p_ftype *d10v_daddr_p;
  gdbarch_d10v_iaddr_p_ftype *d10v_iaddr_p;
  gdbarch_d10v_convert_daddr_to_raw_ftype *d10v_convert_daddr_to_raw;
  gdbarch_d10v_convert_iaddr_to_raw_ftype *d10v_convert_iaddr_to_raw;
a382 6
  0,
  0,
  0,
  0,
  0,
  0,
a685 6
  /* Skip verify of d10v_make_daddr, invalid_p == 0 */
  /* Skip verify of d10v_make_iaddr, invalid_p == 0 */
  /* Skip verify of d10v_daddr_p, invalid_p == 0 */
  /* Skip verify of d10v_iaddr_p, invalid_p == 0 */
  /* Skip verify of d10v_convert_daddr_to_raw, invalid_p == 0 */
  /* Skip verify of d10v_convert_iaddr_to_raw, invalid_p == 0 */
a1243 36
#ifdef D10V_MAKE_DADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_MAKE_DADDR(x)",
                      XSTRING (D10V_MAKE_DADDR (x)));
#endif
#ifdef D10V_MAKE_IADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_MAKE_IADDR(x)",
                      XSTRING (D10V_MAKE_IADDR (x)));
#endif
#ifdef D10V_DADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_DADDR_P(x)",
                      XSTRING (D10V_DADDR_P (x)));
#endif
#ifdef D10V_IADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_IADDR_P(x)",
                      XSTRING (D10V_IADDR_P (x)));
#endif
#ifdef D10V_CONVERT_DADDR_TO_RAW
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_CONVERT_DADDR_TO_RAW(x)",
                      XSTRING (D10V_CONVERT_DADDR_TO_RAW (x)));
#endif
#ifdef D10V_CONVERT_IADDR_TO_RAW
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_CONVERT_IADDR_TO_RAW(x)",
                      XSTRING (D10V_CONVERT_IADDR_TO_RAW (x)));
#endif
a1947 42
#ifdef D10V_MAKE_DADDR
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_MAKE_DADDR = 0x%08lx\n",
                        (long) current_gdbarch->d10v_make_daddr
                        /*D10V_MAKE_DADDR ()*/);
#endif
#ifdef D10V_MAKE_IADDR
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_MAKE_IADDR = 0x%08lx\n",
                        (long) current_gdbarch->d10v_make_iaddr
                        /*D10V_MAKE_IADDR ()*/);
#endif
#ifdef D10V_DADDR_P
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_DADDR_P = 0x%08lx\n",
                        (long) current_gdbarch->d10v_daddr_p
                        /*D10V_DADDR_P ()*/);
#endif
#ifdef D10V_IADDR_P
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_IADDR_P = 0x%08lx\n",
                        (long) current_gdbarch->d10v_iaddr_p
                        /*D10V_IADDR_P ()*/);
#endif
#ifdef D10V_CONVERT_DADDR_TO_RAW
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_CONVERT_DADDR_TO_RAW = 0x%08lx\n",
                        (long) current_gdbarch->d10v_convert_daddr_to_raw
                        /*D10V_CONVERT_DADDR_TO_RAW ()*/);
#endif
#ifdef D10V_CONVERT_IADDR_TO_RAW
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_CONVERT_IADDR_TO_RAW = 0x%08lx\n",
                        (long) current_gdbarch->d10v_convert_iaddr_to_raw
                        /*D10V_CONVERT_IADDR_TO_RAW ()*/);
#endif
a3612 108
}

CORE_ADDR
gdbarch_d10v_make_daddr (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_make_daddr == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_d10v_make_daddr invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_make_daddr called\n");
  return gdbarch->d10v_make_daddr (x);
}

void
set_gdbarch_d10v_make_daddr (struct gdbarch *gdbarch,
                             gdbarch_d10v_make_daddr_ftype d10v_make_daddr)
{
  gdbarch->d10v_make_daddr = d10v_make_daddr;
}

CORE_ADDR
gdbarch_d10v_make_iaddr (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_make_iaddr == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_d10v_make_iaddr invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_make_iaddr called\n");
  return gdbarch->d10v_make_iaddr (x);
}

void
set_gdbarch_d10v_make_iaddr (struct gdbarch *gdbarch,
                             gdbarch_d10v_make_iaddr_ftype d10v_make_iaddr)
{
  gdbarch->d10v_make_iaddr = d10v_make_iaddr;
}

int
gdbarch_d10v_daddr_p (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_daddr_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_d10v_daddr_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_daddr_p called\n");
  return gdbarch->d10v_daddr_p (x);
}

void
set_gdbarch_d10v_daddr_p (struct gdbarch *gdbarch,
                          gdbarch_d10v_daddr_p_ftype d10v_daddr_p)
{
  gdbarch->d10v_daddr_p = d10v_daddr_p;
}

int
gdbarch_d10v_iaddr_p (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_iaddr_p == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_d10v_iaddr_p invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_iaddr_p called\n");
  return gdbarch->d10v_iaddr_p (x);
}

void
set_gdbarch_d10v_iaddr_p (struct gdbarch *gdbarch,
                          gdbarch_d10v_iaddr_p_ftype d10v_iaddr_p)
{
  gdbarch->d10v_iaddr_p = d10v_iaddr_p;
}

CORE_ADDR
gdbarch_d10v_convert_daddr_to_raw (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_convert_daddr_to_raw == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_d10v_convert_daddr_to_raw invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_convert_daddr_to_raw called\n");
  return gdbarch->d10v_convert_daddr_to_raw (x);
}

void
set_gdbarch_d10v_convert_daddr_to_raw (struct gdbarch *gdbarch,
                                       gdbarch_d10v_convert_daddr_to_raw_ftype d10v_convert_daddr_to_raw)
{
  gdbarch->d10v_convert_daddr_to_raw = d10v_convert_daddr_to_raw;
}

CORE_ADDR
gdbarch_d10v_convert_iaddr_to_raw (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_convert_iaddr_to_raw == 0)
    internal_error (__FILE__, __LINE__,
                    "gdbarch: gdbarch_d10v_convert_iaddr_to_raw invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_convert_iaddr_to_raw called\n");
  return gdbarch->d10v_convert_iaddr_to_raw (x);
}

void
set_gdbarch_d10v_convert_iaddr_to_raw (struct gdbarch *gdbarch,
                                       gdbarch_d10v_convert_iaddr_to_raw_ftype d10v_convert_iaddr_to_raw)
{
  gdbarch->d10v_convert_iaddr_to_raw = d10v_convert_iaddr_to_raw;
@


1.68.2.1
log
@Typesystem work initial import.
Note that this currently isn't building, i'm in the middle of converting make_function_type/lookup_function_type
@
text
@d4556 1
a4556 2
  if (gdbarch->nr_data != 0)
	  gdbarch->data = xcalloc (gdbarch->nr_data, sizeof (void*));
@


1.67
log
@regenerate gdbarch.c.
@
text
@d474 1
a474 1
  gdbarch->init_frame_pc = init_frame_pc_noop;
@


1.66
log
@Multi-arch CANNOT_FETCH_REGISTER() and CANNOT_STORE_REGISTER().
@
text
@d1056 2
a1057 2
                      "CANNOT_FETCH_REGISTER(reg_nr)",
                      XSTRING (CANNOT_FETCH_REGISTER (reg_nr)));
d1062 2
a1063 2
                      "CANNOT_STORE_REGISTER(reg_nr)",
                      XSTRING (CANNOT_STORE_REGISTER (reg_nr)));
d3092 1
a3092 1
gdbarch_cannot_fetch_register (struct gdbarch *gdbarch, int reg_nr)
d3099 1
a3099 1
  return gdbarch->cannot_fetch_register (reg_nr);
d3110 1
a3110 1
gdbarch_cannot_store_register (struct gdbarch *gdbarch, int reg_nr)
d3117 1
a3117 1
  return gdbarch->cannot_store_register (reg_nr);
@


1.65
log
@Multi-arch INIT_FRAME_PC() and INIT_FRAME_PC_FIRST().
@
text
@d179 2
d337 2
d462 2
d611 2
d1053 12
d1780 14
d3089 36
@


1.64
log
@multi-arch ADDR_BITS_REMOVE.
@
text
@d193 2
d333 2
d467 2
d655 2
d1119 14
d1839 14
d3303 36
@


1.63
log
@* gdbarch.sh (EXTRACT_STRUCT_VALUE_ADDRESS_P): Delete definition.
(EXTRACT_STRUCT_VALUE_ADDRESS): Change to a function with
predicate.
* gdbarch.h, gdbarch.c: Regenerate.
* values.c (value_being_returned): Change the reference to
EXTRACT_STRUCT_VALUE_ADDRESS_P to a function call.
@
text
@d250 1
d386 1
d479 2
a480 1
  gdbarch->convert_from_func_ptr_addr = default_convert_from_func_ptr_addr;
d775 1
d1458 6
d2196 7
d4297 18
@


1.62
log
@* gdbarch.sh: Changes to effect the following:
* gdbarch.c (initialize_non_multiarch): New function.
* gdbarch.h (initialize_non_multiarch): New declaration.
* arch-utils.c (initialize_current_architecture): For
non-multiarch configurations, call initialize_non_multiarch.
@
text
@d693 1
a693 4
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->extract_struct_value_address == 0))
    internal_error (__FILE__, __LINE__,
                    "gdbarch: verify_gdbarch: extract_struct_value_address invalid");
d3694 6
@


1.61
log
@* gdbarch.sh, gdbarch.c: Revert change of 2001-06-01; all
per-architecture data should be registered at initialization time,
before any gdbarch objects get used, so the generality is
unnecessary.
@
text
@d390 9
@


1.60
log
@Expand the gdbarch per-architecture data vector as needed, rather
than requiring that all per-architecture data be registered before
the first gdbarch object is allocated.
* gdbarch.sh: Changes to effect the following:
* gdbarch.c (alloc_gdbarch_data, init_gdbarch_data): Delete
declarations and definitions.
(check_gdbarch_data): New function, and declaration.
(gdbarch_alloc): Don't call alloc_gdbarch_data; leaving the fields
zero is good enough.
(free_gdbarch_data): Tolerate a null data pointer.  Free only
those data items gdbarch->data actually has allocated.
(set_gdbarch_data, gdbarch_data): Call check_gdbarch_data.
(gdbarch_update_p): No need to call init_gdbarch_data.
@
text
@d68 2
a69 1
static void check_gdbarch_data (struct gdbarch *);
d401 2
d4340 1
a4340 1
/* Delete GDBARCH's data vector. */
d4343 1
a4343 1
free_gdbarch_data (struct gdbarch *gdbarch)
d4345 4
a4348 1
  if (gdbarch->data != NULL)
d4350 3
a4352 5
      struct gdbarch_data_registration *rego;

      for (rego = gdbarch_data_registry.registrations;
           rego != NULL;
           rego = rego->next)
d4354 2
a4355 9
          struct gdbarch_data *data = rego->data;
      
          if (data->index < gdbarch->nr_data
              && data->free != NULL
              && gdbarch->data[data->index] != NULL)
            {
              data->free (gdbarch, gdbarch->data[data->index]);
              gdbarch->data[data->index] = NULL;
            }
a4356 2
      xfree (gdbarch->data);
      gdbarch->data = NULL;
d4360 1
a4361 3
/* Make sure that GDBARCH has space for all registered per-
   architecture data.  If not, expand the table and initialize the
   data values.  */
d4363 1
a4363 1
check_gdbarch_data (struct gdbarch *gdbarch)
d4365 4
a4368 1
  int nr_allocated = gdbarch->nr_data;
d4370 8
a4377 4
  /* How many per-architecture data items are registered so far?  */
  int nr_registered = gdbarch_data_registry.nr;

  if (nr_allocated < nr_registered)
d4379 3
a4381 16
      /* Get enough room for all registered items, not just DATA.  */
      int new_size = sizeof (gdbarch->data[0]) * nr_registered;
      struct gdbarch_data_registration *rego;
      
      /* Expand the array, or perhaps allocate it for the first time.  */
      gdbarch->data = (void **) (gdbarch->data
                                 ? xrealloc (gdbarch->data, new_size)
                                 : xmalloc (new_size));

      /* Record the size now allocated.  */
      gdbarch->nr_data = nr_registered;

      /* Initialize the elements we just added.  */
      for (rego = gdbarch_data_registry.registrations;
           rego != NULL;
           rego = rego->next)
d4383 2
a4384 5
          struct gdbarch_data *data = rego->data;
          
          if (data->index >= nr_allocated)
            gdbarch->data[data->index]
              = (data->init != NULL ? data->init (gdbarch) : NULL);
d4387 2
d4392 3
a4399 1
  check_gdbarch_data (gdbarch);
a4411 1
  check_gdbarch_data (current_gdbarch);
d4779 5
@


1.59
log
@Fix logic selecting a new architecture.  Use the sequence:
	o	provided by INFO
	o	hard-wired by (gdb) set ...
	o	reversed engineered from INFO.abfd
	o	default to previous architecture
@
text
@d68 1
a68 2
static void alloc_gdbarch_data (struct gdbarch *);
static void init_gdbarch_data (struct gdbarch *);
a399 2
  alloc_gdbarch_data (gdbarch);

d4337 1
a4337 1
/* Walk through all the registered users initializing each in turn. */
d4340 1
a4340 1
init_gdbarch_data (struct gdbarch *gdbarch)
d4342 1
a4342 4
  struct gdbarch_data_registration *rego;
  for (rego = gdbarch_data_registry.registrations;
       rego != NULL;
       rego = rego->next)
d4344 5
a4348 3
      struct gdbarch_data *data = rego->data;
      gdb_assert (data->index < gdbarch->nr_data);
      if (data->init != NULL)
d4350 9
a4358 2
          void *pointer = data->init (gdbarch);
          set_gdbarch_data (gdbarch, data, pointer);
d4360 2
a4364 1
/* Create/delete the gdbarch data vector. */
d4366 3
d4370 1
a4370 1
alloc_gdbarch_data (struct gdbarch *gdbarch)
d4372 4
a4375 4
  gdb_assert (gdbarch->data == NULL);
  gdbarch->nr_data = gdbarch_data_registry.nr;
  gdbarch->data = xcalloc (gdbarch->nr_data, sizeof (void*));
}
d4377 1
a4377 8
static void
free_gdbarch_data (struct gdbarch *gdbarch)
{
  struct gdbarch_data_registration *rego;
  gdb_assert (gdbarch->data != NULL);
  for (rego = gdbarch_data_registry.registrations;
       rego != NULL;
       rego = rego->next)
d4379 16
a4394 3
      struct gdbarch_data *data = rego->data;
      gdb_assert (data->index < gdbarch->nr_data);
      if (data->free != NULL && gdbarch->data[data->index] != NULL)
d4396 5
a4400 2
          data->free (gdbarch, gdbarch->data[data->index]);
          gdbarch->data[data->index] = NULL;
a4402 2
  xfree (gdbarch->data);
  gdbarch->data = NULL;
a4405 3
/* Initialize the current value of thee specified per-architecture
   data-pointer. */

d4411 1
d4424 1
a4791 5
  
  /* Initialize the per-architecture data-pointer of all parties that
     registered an interest in this architecture.  CURRENT_GDBARCH
     must be updated before these modules are called. */
  init_gdbarch_data (new_gdbarch);
@


1.58
log
@Phase 1 of the ptid_t changes.
@
text
@d4647 12
a4658 12
  /* Fill in any missing bits. Most important is the bfd_architecture
     which is used to select the target architecture. */
  if (info.bfd_architecture == bfd_arch_unknown)
    {
      if (info.bfd_arch_info != NULL)
	info.bfd_architecture = info.bfd_arch_info->arch;
      else if (info.abfd != NULL)
	info.bfd_architecture = bfd_get_arch (info.abfd);
      /* FIXME - should query BFD for its default architecture. */
      else
	info.bfd_architecture = current_gdbarch->bfd_arch_info->arch;
    }
d4660 13
a4672 6
    {
      if (target_architecture_auto && info.abfd != NULL)
	info.bfd_arch_info = bfd_get_arch_info (info.abfd);
      else
	info.bfd_arch_info = current_gdbarch->bfd_arch_info;
    }
d4674 1
a4674 10
    {
      if (target_byte_order_auto && info.abfd != NULL)
	info.byte_order = (bfd_big_endian (info.abfd) ? BIG_ENDIAN
			   : bfd_little_endian (info.abfd) ? LITTLE_ENDIAN
			   : 0);
      else
	info.byte_order = current_gdbarch->byte_order;
      /* FIXME - should query BFD for its default byte-order. */
    }
  /* A default for abfd? */
d4676 2
a4677 12
  /* Find the target that knows about this architecture. */
  for (rego = gdbarch_registry;
       rego != NULL;
       rego = rego->next)
    if (rego->bfd_architecture == info.bfd_architecture)
      break;
  if (rego == NULL)
    {
      if (gdbarch_debug)
	fprintf_unfiltered (gdb_stdlog, "gdbarch_update: No matching architecture\n");
      return 0;
    }
a4681 4
			  "gdbarch_update: info.bfd_architecture %d (%s)\n",
			  info.bfd_architecture,
			  bfd_lookup_arch (info.bfd_architecture, 0)->printable_name);
      fprintf_unfiltered (gdb_stdlog,
d4698 13
@


1.57
log
@2001-04-06  David Smith  <dsmith@@redhat.com>

	* arch-utils.c (default_prepare_to_proceed)
	(generic_prepare_to_proceed): Added new functions.
	* arch-utils.h: New function declarations for
	default_prepare_to_proceed() and generic_prepare_to_proceed().
	* gdbarch.sh: Added PREPARE_TO_PROCEED.
	* gdbarch.c: Regenerated.
	* gdbarch.h: Regenerated.
	* inferior.h: Added get_last_target_status() declaration.
	* infrun.c (get_last_target_status): Added new function.
	(handle_inferior_event): Saves last pid and waitstatus, which will
	get returned by get_last_target_status().

	* hppa-tdep.c (prepare_to_proceed):  Added comment stating that
	prepare_to_proceed() is potentially redundant since
	default_prepare_to_proceed() has been added.
	* linux-thread.c (prepare_to_proceed): Ditto.
	* lin-lwp.c (prepare_to_proceed): Ditto.
	* m3-nat.c (prepare_to_proceed): Ditto.
@
text
@d852 2
a853 2
                      "TARGET_READ_PC(pid)",
                      XSTRING (TARGET_READ_PC (pid)));
d859 2
a860 2
                      "TARGET_WRITE_PC(val, pid)",
                      XSTRING (TARGET_WRITE_PC (val, pid)));
d2395 1
a2395 1
gdbarch_read_pc (struct gdbarch *gdbarch, int pid)
d2402 1
a2402 1
  return gdbarch->read_pc (pid);
d2413 1
a2413 1
gdbarch_write_pc (struct gdbarch *gdbarch, CORE_ADDR val, int pid)
d2420 1
a2420 1
  gdbarch->write_pc (val, pid);
@


1.56
log
@* config/sparc/tm-sp64.h (GDB_MULTI_ARCH): Down grade to
GDB_MULTI_ARCH_PARTIAL from two.  SOFTWARE_SINGLE_STEP is not
multi-arch.
* gdbarch.sh (SOFTWARE_SINGLE_STEP): Add.
* gdbarch.h, gdbarch.c: Re-generate.
* target.h (SOFTWARE_SINGLE_STEP_P)
(SOFTWARE_SINGLE_STEP): Delete macro definitions.
@
text
@d229 1
d384 1
d462 1
d716 1
d1327 6
d2047 7
d3886 18
@


1.55
log
@Re-vamp the register code so that a lot more is routed through
{read,write}_register_gen.  Hook that function with multi-arch.
@
text
@d249 1
d382 1
d762 1
d1438 7
d2163 7
d4233 24
@


1.54
log
@Add __FILE__ and __LINE__ parameter to internal_error() /
internal_verror().
@
text
@d152 2
d326 2
d519 2
d1543 8
d2466 48
@


1.53
log
@Addd set_gdbarch_data() method.  Update register_gdbarch_data() interface.
@
text
@d491 2
a492 1
    internal_error ("verify_gdbarch: byte-order unset");
d494 2
a495 1
    internal_error ("verify_gdbarch: bfd_arch_info unset");
d517 2
a518 1
    internal_error ("gdbarch: verify_gdbarch: num_regs invalid");
d522 2
a523 1
    internal_error ("gdbarch: verify_gdbarch: sp_regnum invalid");
d526 2
a527 1
    internal_error ("gdbarch: verify_gdbarch: fp_regnum invalid");
d530 2
a531 1
    internal_error ("gdbarch: verify_gdbarch: pc_regnum invalid");
d543 2
a544 1
    internal_error ("gdbarch: verify_gdbarch: register_size invalid");
d547 2
a548 1
    internal_error ("gdbarch: verify_gdbarch: register_bytes invalid");
d551 2
a552 1
    internal_error ("gdbarch: verify_gdbarch: register_byte invalid");
d555 2
a556 1
    internal_error ("gdbarch: verify_gdbarch: register_raw_size invalid");
d559 2
a560 1
    internal_error ("gdbarch: verify_gdbarch: max_register_raw_size invalid");
d563 2
a564 1
    internal_error ("gdbarch: verify_gdbarch: register_virtual_size invalid");
d567 2
a568 1
    internal_error ("gdbarch: verify_gdbarch: max_register_virtual_size invalid");
d571 2
a572 1
    internal_error ("gdbarch: verify_gdbarch: register_virtual_type invalid");
d578 2
a579 1
    internal_error ("gdbarch: verify_gdbarch: use_generic_dummy_frames invalid");
d582 2
a583 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_location invalid");
d586 2
a587 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_address invalid");
d590 2
a591 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_start_offset invalid");
d594 2
a595 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_breakpoint_offset invalid");
d598 2
a599 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_breakpoint_offset_p invalid");
d602 2
a603 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_length invalid");
d606 2
a607 1
    internal_error ("gdbarch: verify_gdbarch: pc_in_call_dummy invalid");
d610 2
a611 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_p invalid");
d616 2
a617 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_stack_adjust_p invalid");
d620 2
a621 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_stack_adjust invalid");
d624 2
a625 1
    internal_error ("gdbarch: verify_gdbarch: fix_call_dummy invalid");
d629 2
a630 1
    internal_error ("gdbarch: verify_gdbarch: get_saved_register invalid");
d641 2
a642 1
    internal_error ("gdbarch: verify_gdbarch: extract_return_value invalid");
d645 2
a646 1
    internal_error ("gdbarch: verify_gdbarch: push_arguments invalid");
d649 2
a650 1
    internal_error ("gdbarch: verify_gdbarch: push_dummy_frame invalid");
d653 2
a654 1
    internal_error ("gdbarch: verify_gdbarch: push_return_address invalid");
d657 2
a658 1
    internal_error ("gdbarch: verify_gdbarch: pop_frame invalid");
d667 2
a668 1
    internal_error ("gdbarch: verify_gdbarch: store_struct_return invalid");
d671 2
a672 1
    internal_error ("gdbarch: verify_gdbarch: store_return_value invalid");
d675 2
a676 1
    internal_error ("gdbarch: verify_gdbarch: extract_struct_value_address invalid");
d679 2
a680 1
    internal_error ("gdbarch: verify_gdbarch: use_struct_convention invalid");
d683 2
a684 1
    internal_error ("gdbarch: verify_gdbarch: frame_init_saved_regs invalid");
d687 2
a688 1
    internal_error ("gdbarch: verify_gdbarch: init_extra_frame_info invalid");
d691 2
a692 1
    internal_error ("gdbarch: verify_gdbarch: skip_prologue invalid");
d696 2
a697 1
    internal_error ("gdbarch: verify_gdbarch: inner_than invalid");
d703 2
a704 1
    internal_error ("gdbarch: verify_gdbarch: decr_pc_after_break invalid");
d707 2
a708 1
    internal_error ("gdbarch: verify_gdbarch: function_start_offset invalid");
d712 2
a713 1
    internal_error ("gdbarch: verify_gdbarch: frame_args_skip invalid");
d717 2
a718 1
    internal_error ("gdbarch: verify_gdbarch: frame_chain invalid");
d721 2
a722 1
    internal_error ("gdbarch: verify_gdbarch: frame_chain_valid invalid");
d725 2
a726 1
    internal_error ("gdbarch: verify_gdbarch: frame_saved_pc invalid");
d729 2
a730 1
    internal_error ("gdbarch: verify_gdbarch: frame_args_address invalid");
d733 2
a734 1
    internal_error ("gdbarch: verify_gdbarch: frame_locals_address invalid");
d737 2
a738 1
    internal_error ("gdbarch: verify_gdbarch: saved_pc_after_call invalid");
d741 2
a742 1
    internal_error ("gdbarch: verify_gdbarch: frame_num_args invalid");
d2300 2
a2301 1
    internal_error ("gdbarch: gdbarch_addr_bit invalid");
d2350 2
a2351 1
    internal_error ("gdbarch: gdbarch_read_pc invalid");
d2368 2
a2369 1
    internal_error ("gdbarch: gdbarch_write_pc invalid");
d2386 2
a2387 1
    internal_error ("gdbarch: gdbarch_read_fp invalid");
d2404 2
a2405 1
    internal_error ("gdbarch: gdbarch_write_fp invalid");
d2422 2
a2423 1
    internal_error ("gdbarch: gdbarch_read_sp invalid");
d2440 2
a2441 1
    internal_error ("gdbarch: gdbarch_write_sp invalid");
d2458 2
a2459 1
    internal_error ("gdbarch: gdbarch_num_regs invalid");
d2492 2
a2493 1
    internal_error ("gdbarch: gdbarch_sp_regnum invalid");
d2510 2
a2511 1
    internal_error ("gdbarch: gdbarch_fp_regnum invalid");
d2528 2
a2529 1
    internal_error ("gdbarch: gdbarch_pc_regnum invalid");
d2594 2
a2595 1
    internal_error ("gdbarch: gdbarch_stab_reg_to_regnum invalid");
d2612 2
a2613 1
    internal_error ("gdbarch: gdbarch_ecoff_reg_to_regnum invalid");
d2630 2
a2631 1
    internal_error ("gdbarch: gdbarch_dwarf_reg_to_regnum invalid");
d2648 2
a2649 1
    internal_error ("gdbarch: gdbarch_sdb_reg_to_regnum invalid");
d2666 2
a2667 1
    internal_error ("gdbarch: gdbarch_dwarf2_reg_to_regnum invalid");
d2684 2
a2685 1
    internal_error ("gdbarch: gdbarch_register_name invalid");
d2702 2
a2703 1
    internal_error ("gdbarch: gdbarch_register_size invalid");
d2720 2
a2721 1
    internal_error ("gdbarch: gdbarch_register_bytes invalid");
d2738 2
a2739 1
    internal_error ("gdbarch: gdbarch_register_byte invalid");
d2756 2
a2757 1
    internal_error ("gdbarch: gdbarch_register_raw_size invalid");
d2774 2
a2775 1
    internal_error ("gdbarch: gdbarch_max_register_raw_size invalid");
d2792 2
a2793 1
    internal_error ("gdbarch: gdbarch_register_virtual_size invalid");
d2810 2
a2811 1
    internal_error ("gdbarch: gdbarch_max_register_virtual_size invalid");
d2828 2
a2829 1
    internal_error ("gdbarch: gdbarch_register_virtual_type invalid");
d2846 2
a2847 1
    internal_error ("gdbarch: gdbarch_do_registers_info invalid");
d2864 2
a2865 1
    internal_error ("gdbarch: gdbarch_register_sim_regno invalid");
d2888 2
a2889 1
    internal_error ("gdbarch: gdbarch_register_bytes_ok invalid");
d2906 2
a2907 1
    internal_error ("gdbarch: gdbarch_use_generic_dummy_frames invalid");
d2924 2
a2925 1
    internal_error ("gdbarch: gdbarch_call_dummy_location invalid");
d2942 2
a2943 1
    internal_error ("gdbarch: gdbarch_call_dummy_address invalid");
d2960 2
a2961 1
    internal_error ("gdbarch: gdbarch_call_dummy_start_offset invalid");
d2978 2
a2979 1
    internal_error ("gdbarch: gdbarch_call_dummy_breakpoint_offset invalid");
d2996 2
a2997 1
    internal_error ("gdbarch: gdbarch_call_dummy_breakpoint_offset_p invalid");
d3014 2
a3015 1
    internal_error ("gdbarch: gdbarch_call_dummy_length invalid");
d3032 2
a3033 1
    internal_error ("gdbarch: gdbarch_pc_in_call_dummy invalid");
d3050 2
a3051 1
    internal_error ("gdbarch: gdbarch_call_dummy_p invalid");
d3100 2
a3101 1
    internal_error ("gdbarch: gdbarch_call_dummy_stack_adjust_p invalid");
d3118 2
a3119 1
    internal_error ("gdbarch: gdbarch_call_dummy_stack_adjust invalid");
d3136 2
a3137 1
    internal_error ("gdbarch: gdbarch_fix_call_dummy invalid");
d3184 2
a3185 1
    internal_error ("gdbarch: gdbarch_coerce_float_to_double invalid");
d3202 2
a3203 1
    internal_error ("gdbarch: gdbarch_get_saved_register invalid");
d3220 2
a3221 1
    internal_error ("gdbarch: gdbarch_register_convertible invalid");
d3238 2
a3239 1
    internal_error ("gdbarch: gdbarch_register_convert_to_virtual invalid");
d3256 2
a3257 1
    internal_error ("gdbarch: gdbarch_register_convert_to_raw invalid");
d3274 2
a3275 1
    internal_error ("gdbarch: gdbarch_fetch_pseudo_register invalid");
d3292 2
a3293 1
    internal_error ("gdbarch: gdbarch_store_pseudo_register invalid");
d3310 2
a3311 1
    internal_error ("gdbarch: gdbarch_pointer_to_address invalid");
d3328 2
a3329 1
    internal_error ("gdbarch: gdbarch_address_to_pointer invalid");
d3346 2
a3347 1
    internal_error ("gdbarch: gdbarch_return_value_on_stack invalid");
d3364 2
a3365 1
    internal_error ("gdbarch: gdbarch_extract_return_value invalid");
d3382 2
a3383 1
    internal_error ("gdbarch: gdbarch_push_arguments invalid");
d3400 2
a3401 1
    internal_error ("gdbarch: gdbarch_push_dummy_frame invalid");
d3418 2
a3419 1
    internal_error ("gdbarch: gdbarch_push_return_address invalid");
d3436 2
a3437 1
    internal_error ("gdbarch: gdbarch_pop_frame invalid");
d3454 2
a3455 1
    internal_error ("gdbarch: gdbarch_d10v_make_daddr invalid");
d3472 2
a3473 1
    internal_error ("gdbarch: gdbarch_d10v_make_iaddr invalid");
d3490 2
a3491 1
    internal_error ("gdbarch: gdbarch_d10v_daddr_p invalid");
d3508 2
a3509 1
    internal_error ("gdbarch: gdbarch_d10v_iaddr_p invalid");
d3526 2
a3527 1
    internal_error ("gdbarch: gdbarch_d10v_convert_daddr_to_raw invalid");
d3544 2
a3545 1
    internal_error ("gdbarch: gdbarch_d10v_convert_iaddr_to_raw invalid");
d3562 2
a3563 1
    internal_error ("gdbarch: gdbarch_store_struct_return invalid");
d3580 2
a3581 1
    internal_error ("gdbarch: gdbarch_store_return_value invalid");
d3598 2
a3599 1
    internal_error ("gdbarch: gdbarch_extract_struct_value_address invalid");
d3616 2
a3617 1
    internal_error ("gdbarch: gdbarch_use_struct_convention invalid");
d3634 2
a3635 1
    internal_error ("gdbarch: gdbarch_frame_init_saved_regs invalid");
d3652 2
a3653 1
    internal_error ("gdbarch: gdbarch_init_extra_frame_info invalid");
d3670 2
a3671 1
    internal_error ("gdbarch: gdbarch_skip_prologue invalid");
d3688 2
a3689 1
    internal_error ("gdbarch: gdbarch_prologue_frameless_p invalid");
d3706 2
a3707 1
    internal_error ("gdbarch: gdbarch_inner_than invalid");
d3724 2
a3725 1
    internal_error ("gdbarch: gdbarch_breakpoint_from_pc invalid");
d3742 2
a3743 1
    internal_error ("gdbarch: gdbarch_memory_insert_breakpoint invalid");
d3760 2
a3761 1
    internal_error ("gdbarch: gdbarch_memory_remove_breakpoint invalid");
d3778 2
a3779 1
    internal_error ("gdbarch: gdbarch_decr_pc_after_break invalid");
d3796 2
a3797 1
    internal_error ("gdbarch: gdbarch_function_start_offset invalid");
d3814 2
a3815 1
    internal_error ("gdbarch: gdbarch_remote_translate_xfer_address invalid");
d3832 2
a3833 1
    internal_error ("gdbarch: gdbarch_frame_args_skip invalid");
d3850 2
a3851 1
    internal_error ("gdbarch: gdbarch_frameless_function_invocation invalid");
d3868 2
a3869 1
    internal_error ("gdbarch: gdbarch_frame_chain invalid");
d3886 2
a3887 1
    internal_error ("gdbarch: gdbarch_frame_chain_valid invalid");
d3904 2
a3905 1
    internal_error ("gdbarch: gdbarch_frame_saved_pc invalid");
d3922 2
a3923 1
    internal_error ("gdbarch: gdbarch_frame_args_address invalid");
d3940 2
a3941 1
    internal_error ("gdbarch: gdbarch_frame_locals_address invalid");
d3958 2
a3959 1
    internal_error ("gdbarch: gdbarch_saved_pc_after_call invalid");
d3976 2
a3977 1
    internal_error ("gdbarch: gdbarch_frame_num_args invalid");
d4000 2
a4001 1
    internal_error ("gdbarch: gdbarch_stack_align invalid");
d4040 2
a4041 1
    internal_error ("gdbarch: gdbarch_reg_struct_has_addr invalid");
d4064 2
a4065 1
    internal_error ("gdbarch: gdbarch_save_dummy_frame_tos invalid");
d4142 2
a4143 1
    internal_error ("gdbarch: gdbarch_convert_from_func_ptr_addr invalid");
d4408 2
a4409 1
	    internal_error ("gdbarch_architecture_names: multi-arch unknown");
d4438 3
a4440 1
      internal_error ("gdbarch: Attempt to register unknown architecture (%d)", bfd_architecture);
d4448 3
a4450 2
	internal_error ("gdbarch: Duplicate registraration of architecture (%s)",
	       bfd_arch_info->printable_name);
@


1.52
log
@Changed free() to xfree() where appropriate. Also changed Copyright to
include 2001.
@
text
@d63 2
d68 1
d70 1
d103 1
a103 1
  int nr_data;
d393 2
d475 2
a476 1
  /* At the moment, this is trivial.  */
d4023 3
a4025 1
  int index;
a4029 1
  gdbarch_data_ftype *init;
d4036 1
a4036 1
  int nr;
d4046 2
a4047 1
register_gdbarch_data (gdbarch_data_ftype *init)
a4054 1
  (*curr)->init = init;
d4057 2
a4068 2
  gdbarch->nr_data = gdbarch_data_registry.nr + 1;
  gdbarch->data = xmalloc (sizeof (void*) * gdbarch->nr_data);
d4073 36
a4108 2
      if (rego->data->index < gdbarch->nr_data)
	gdbarch->data[rego->data->index] = rego->init ();
d4110 2
d4115 14
d4135 1
a4135 2
  if (data->index >= current_gdbarch->nr_data)
    internal_error ("gdbarch_data: request for non-existant data.");
@


1.51
log
@	* gdbarch.sh (PARM_BOUNDARY): Define.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
@
text
@d4 1
a4 1
   Copyright 1998-1999, Free Software Foundation, Inc.
d470 1
a470 1
  free (arch);
@


1.50
log
@Multi-arch REGISTER_BYTES_OK.
@
text
@d238 1
d372 1
d1346 5
d2055 5
d3931 15
@


1.49
log
@Replace free() with xfree().
@
text
@d172 1
d318 1
d468 1
a468 1
  xfree (arch);
d552 1
d949 6
d1617 7
d2780 23
@


1.48
log
@Multiarch STAB_REG_TO_REGNUM, ECOFF_REG_TO_REGNUM,
DWARF_REG_TO_REGNUM, SDB_REG_TO_REGNUM, DWARF2_REG_TO_REGNUM.
@
text
@d466 1
a466 1
  free (arch);
@


1.47
log
@Regenerate gdbarch.c.
@
text
@d156 5
d312 5
d413 5
d518 5
d853 30
d1504 35
d2492 85
@


1.46
log
@* gdbarch.sh, hp-psymtab-read.c, hpread.c, m3-nat.c, mcore-tdep.c,
mips-tdep.c, monitor.c, regcache.c, remote-es.c, ser-unix.c,
somread.c, tracepoint.c: Fix spelling errors in comments.
* gdbarch.c: Regenerate.

* gnu-nat.c (S_exception_raise_request): Fix typos and spelling
errors in strings.
* m3-nat.c (intercept_exec_calls, mach_thread_parse_id): Likewise.
* mcore-tdep.c (mcore_analyze_prologue): Likewise.
* mips-tdep.c (mips16_next_pc, _initialize_mips_tdep): Likewise.
* remote-e7000.c (e7000_start_remote): Likewise.
* remote-rdp.c (handle_swi): Likewise.
* remote-vx.c (vx_load_command): Likewise.
* sh-tdep.c (sh_do_pseudo_register): Likewise.
* sol-thread.c (td_err_string): Likewise.
* symtab.c (decode_line_2): Likewise.
-------------------------------------------------------------------
@
text
@d3775 1
a3775 1
/* Keep a registrary of per-architecture data-pointers required by GDB
d3790 1
a3790 1
struct gdbarch_data_registrary
d3796 1
a3796 1
struct gdbarch_data_registrary gdbarch_data_registrary =
d3805 1
a3805 1
  for (curr = &gdbarch_data_registrary.registrations;
d3812 1
a3812 1
  (*curr)->data->index = gdbarch_data_registrary.nr++;
d3823 1
a3823 1
  gdbarch->nr_data = gdbarch_data_registrary.nr + 1;
d3825 1
a3825 1
  for (rego = gdbarch_data_registrary.registrations;
d3848 1
a3848 1
/* Keep a registrary of swapped data required by GDB modules. */
d3865 1
a3865 1
struct gdbarch_swap_registrary
d3871 1
a3871 1
struct gdbarch_swap_registrary gdbarch_swap_registrary = 
d3882 1
a3882 1
  for (rego = &gdbarch_swap_registrary.registrations;
d3898 1
a3898 1
  for (rego = gdbarch_swap_registrary.registrations;
d3937 1
a3937 1
/* Keep a registrary of the architectures known by GDB. */
d3948 1
a3948 1
static struct gdbarch_registration *gdbarch_registrary = NULL;
d3969 1
a3969 1
      for (rego = gdbarch_registrary;
d4008 1
a4008 1
  for (curr = &gdbarch_registrary;
d4105 1
a4105 1
  for (rego = gdbarch_registrary;
@


1.45
log
@* arch-utils.c (set_architecture, set_architecture_from_arch_mach,
set_gdbarch_from_file): Fix spelling error.
* v850-tdep.c (v850_target_architecture_hook): Likewise.
* gdbarch.sh: Fix spelling errors in comment.
* gdbarch.c, gdbarch.h: Regenerate.

* ppcnbsd-nat.c (fetch_core_registers, fetch_inferior_registers,
store_inferior_registers): Support older NetBSD/powerpc systems
from before fp reg support was added.  Adapt to register number
changes caused when powerpc target was multi-arched.
@
text
@d4028 2
a4029 2
  /* When non- multi-arch, install what ever target dump routine we've
     been provided - hopefully that routine has been writen correct
@


1.44
log
@
Corrected spelling errors in comments.
gdbarch.{c,sh} removed a word from a comment.
@
text
@d4001 1
a4001 1
  /* Check that BFD reconizes this architecture */
@


1.43
log
@	* arch-utils.c, arch-utils.h (default_convert_from_func_ptr_addr):
	New function.
	* gdbarch.sh (CONVERT_FROM_FUNC_PTR_ADDR):  Add.
	* gdbarch.c, gdbarch.h:  Regenerate.
	* valops.c (find_function_addr):  Use CONVERT_FROM_FUNC_PTR_ADDR
	unconditionally.

	* config/rs6000/tm-rs6000.h (CONVERT_FROM_FUNC_PTR_ADDR):  Delete
	definition.
	* config/powerpc/tm-linux.h (CONVERT_FROM_FUNC_PTR_ADDR):  Remove
	undef.
	* rs6000-tdep.c (rs6000_convert_from_func_ptr_addr):  Fix comment.
	(rs6000_gdbarch_init):  Register rs6000_convert_from_func_ptr_addr
	if not ELFOSABI_LINUX.
@
text
@d120 1
a120 1
     gdbarch_dump(): Add a fprintf_unfiltered call to so that the new
@


1.42
log
@
Corrected spelling error in comment: swaped -> swapped.
@
text
@d235 1
d358 1
d434 1
d671 1
d1300 6
d1962 7
d3755 17
@


1.41
log
@Fri Aug 25 12:11:21 2000  David Taylor  <taylor@@texas.cygnus.com>

	* symtab.c (search_symbols): Fix off by one error in index for
 	initializing variables ourtype, ourtype2, ourtype3, and ourtype4.
	(symtab_symbol_info): fix similar off by one error.

Fri Aug 25 12:03:15 2000  David Taylor  <taylor@@texas.cygnus.com>

	* gdbarch.sh (TARGET_ADDR_BIT): New macro for the number
	of bits in gdb's representation of a target address.
	* gdbarch.c, gdbarch.h: Regenerated.
	* gdbtypes.c (build_gdbtypes): Use TARGET_ADDR_BIT instead of
 	TARGET_PTR_BIT when initializing builtin_type_CORE_ADDR.
	* printcmd.c (print_address_numeric): Use TARGET_ADDR_BIT instead
 	of TARGET_PTR_BIT, because we're printing an address, not a pointer.
@
text
@d3814 1
a3814 1
/* Keep a registrary of swaped data required by GDB modules. */
@


1.40
log
@        * regcache.c (TARGET_WRITE_PC, TARGET_READ_PC, TARGET_READ_FP,
        TARGET_WRITE_FP, TARGET_READ_SP, TARGET_WRITE_SP): Move
        initialization from here.
        * gdbarch.sh: To here.
        * gdbarch.h, gdbarch.c: Regenerate.
@
text
@d25 1
a25 1
   The bourn shell script ``gdbarch.sh'' creates the files
d31 1
a31 1
   changes into that script. Conversely, when makeing sweeping changes
d139 1
d262 1
d474 2
d735 5
d1347 5
d2107 17
@


1.39
log
@Move TARGET_*_PTR to gdbarch.h.
@
text
@d386 6
d474 6
a479 18
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->read_pc == 0))
    internal_error ("gdbarch: verify_gdbarch: read_pc invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->write_pc == 0))
    internal_error ("gdbarch: verify_gdbarch: write_pc invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->read_fp == 0))
    internal_error ("gdbarch: verify_gdbarch: read_fp invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->write_fp == 0))
    internal_error ("gdbarch: verify_gdbarch: write_fp invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->read_sp == 0))
    internal_error ("gdbarch: verify_gdbarch: read_sp invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->write_sp == 0))
    internal_error ("gdbarch: verify_gdbarch: write_sp invalid");
@


1.38
log
@Rename gdbarch_update() to gdbarch_update_p()
@
text
@a130 2
  int bfd_vma_bit;
  int ptr_bit;
d138 2
a251 2
  8 * sizeof (void*),
  8 * sizeof (void*),
d259 2
d361 1
a361 1
/* Create a new ``struct gdbarch'' based in information provided by
d377 8
d458 8
a466 24
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->ptr_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: ptr_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->short_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: short_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->int_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: int_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->long_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: long_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->long_long_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: long_long_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->float_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: float_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->double_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: double_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->long_double_bit == 0))
    internal_error ("gdbarch: verify_gdbarch: long_double_bit invalid");
a696 10
#ifdef TARGET_BFD_VMA_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BFD_VMA_BIT # %s\n",
                      XSTRING (TARGET_BFD_VMA_BIT));
#endif
#ifdef TARGET_PTR_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PTR_BIT # %s\n",
                      XSTRING (TARGET_PTR_BIT));
#endif
d732 10
a1303 10
#ifdef TARGET_BFD_VMA_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BFD_VMA_BIT = %ld\n",
                      (long) TARGET_BFD_VMA_BIT);
#endif
#ifdef TARGET_PTR_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PTR_BIT = %ld\n",
                      (long) TARGET_PTR_BIT);
#endif
d1339 10
a1973 33
gdbarch_bfd_vma_bit (struct gdbarch *gdbarch)
{
  /* Skip verify of bfd_vma_bit, invalid_p == 0 */
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_vma_bit called\n");
  return gdbarch->bfd_vma_bit;
}

void
set_gdbarch_bfd_vma_bit (struct gdbarch *gdbarch,
                         int bfd_vma_bit)
{
  gdbarch->bfd_vma_bit = bfd_vma_bit;
}

int
gdbarch_ptr_bit (struct gdbarch *gdbarch)
{
  if (gdbarch->ptr_bit == 0)
    internal_error ("gdbarch: gdbarch_ptr_bit invalid");
  if (gdbarch_debug >= 2)
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ptr_bit called\n");
  return gdbarch->ptr_bit;
}

void
set_gdbarch_ptr_bit (struct gdbarch *gdbarch,
                     int ptr_bit)
{
  gdbarch->ptr_bit = ptr_bit;
}

int
d1976 1
a1976 2
  if (gdbarch->short_bit == 0)
    internal_error ("gdbarch: gdbarch_short_bit invalid");
d1992 1
a1992 2
  if (gdbarch->int_bit == 0)
    internal_error ("gdbarch: gdbarch_int_bit invalid");
d2008 1
a2008 2
  if (gdbarch->long_bit == 0)
    internal_error ("gdbarch: gdbarch_long_bit invalid");
d2024 1
a2024 2
  if (gdbarch->long_long_bit == 0)
    internal_error ("gdbarch: gdbarch_long_long_bit invalid");
d2040 1
a2040 2
  if (gdbarch->float_bit == 0)
    internal_error ("gdbarch: gdbarch_float_bit invalid");
d2056 1
a2056 2
  if (gdbarch->double_bit == 0)
    internal_error ("gdbarch: gdbarch_double_bit invalid");
d2072 1
a2072 2
  if (gdbarch->long_double_bit == 0)
    internal_error ("gdbarch: gdbarch_long_double_bit invalid");
d2083 32
@


1.37
log
@Missing GDBARCH updates for EXTRA_STACK_ALIGNMENT needed.
@
text
@d4024 1
a4024 1
gdbarch_update (struct gdbarch_info info)
@


1.36
log
@* gdbarch.sh: Add print_p field for CALL_DUMMY_BREAKPINT_OFFSET
to be printed only if CALL_DUMMY_BREAKPOINT_OFFSET_P.

* gdbarch.c: Regenerated.
@
text
@d228 1
d354 1
d415 1
d669 1
d1268 5
d1918 5
d3622 16
@


1.35
log
@Multi-arch REGISTER_SIM_REGNO. Update d10v.
@
text
@d1527 4
a1530 3
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET);
@


1.34
log
@2000-08-01  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * gdbarch.sh: Multiarch DO_REGISTERS_INFO macro.
        * gdbarch.h, gdbarch.c: Regenerate.
        * infcmd.c (do_registers_info): Make not static and
        unconditionalize.
        * inferior.h (do_registers_info): Export.
@
text
@d165 1
d302 1
d389 1
d533 1
d887 6
d1497 7
d2539 17
d3765 1
a3765 2
gdbarch_data (data)
     struct gdbarch_data *data;
d4157 1
a4157 1
_initialize_gdbarch ()
@


1.33
log
@Protoization.
@
text
@d164 1
d300 1
d386 1
d529 1
d876 7
d1480 7
d2504 17
d3731 2
a3732 1
gdbarch_data (struct gdbarch_data *data)
d4124 1
a4124 1
_initialize_gdbarch (void)
@


1.32
log
@Move GDB_MULTI_ARCH selection to configure*.  Makes tm.h optional.
@
text
@d3696 1
a3696 2
gdbarch_data (data)
     struct gdbarch_data *data;
d4088 1
a4088 1
_initialize_gdbarch ()
@


1.31
log
@2000-07-24  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

         * gdbarch.sh: Add FETCH_PSEUDO_REGISTER and STORE_PSEUDO_REGISTER
         to the gdbarch structure.
         * gdbarch.c: Regenerate.
         * gdbarch.h: Regenerate.
         * inferior.h (FETCH_PSEUDO_REGISTER, STORE_PSEUDO_REGISTER):
         Delete macros.
         * regcache.c (write_register, read_register, write_register_bytes,
         write_register_gen, read_register_bytes, read_register_gen):
         Rename ARCH_FECTH_PSEUDO_REGISTERS to FETCH_PSEUDO_REGISTERS and
         ARCH_STORE_PSEUDO_REGISTER to STORE_PSEUDO_REGISTER.
@
text
@d433 1
a433 1
  if (GDB_MULTI_ARCH <= 0)
@


1.30
log
@	* gdbarch.sh: Add NUM_PSEUDO_REGS to the gdbarch structure.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* inferior.h (NUM_PSEUDO_REGS): Delete macro.
@
text
@d185 2
d347 2
d571 2
d989 14
d1592 14
d2835 34
@


1.29
log
@Don't try to dump void macros (when non multi-arch).  They could
contain C statements.
@
text
@d148 1
d296 1
d484 1
d781 5
d1359 5
d2182 16
@


1.28
log
@Re-implement gdbach_dump() so that it prints out the macro values.
Add ``maint print arch'' command.
Add ``gdbarch_register()'' function that also takes gdbarch_dump_tdep().
Use in mips-tdep.c.
@
text
@d740 2
a741 1
#ifdef TARGET_WRITE_PC
d753 2
a754 1
#ifdef TARGET_WRITE_FP
d766 2
a767 1
#ifdef TARGET_WRITE_SP
d925 2
a926 1
#ifdef FIX_CALL_DUMMY
d948 2
a949 1
#ifdef GET_SAVED_REGISTER
d961 2
a962 1
#ifdef REGISTER_CONVERT_TO_VIRTUAL
d968 2
a969 1
#ifdef REGISTER_CONVERT_TO_RAW
d981 2
a982 1
#ifdef ADDRESS_TO_POINTER
d994 2
a995 1
#ifdef EXTRACT_RETURN_VALUE
d1007 2
a1008 1
#ifdef PUSH_DUMMY_FRAME
d1020 2
a1021 1
#ifdef POP_FRAME
d1063 2
a1064 1
#ifdef STORE_STRUCT_RETURN
d1070 2
a1071 1
#ifdef STORE_RETURN_VALUE
d1089 2
a1090 1
#ifdef FRAME_INIT_SAVED_REGS
d1096 2
a1097 1
#ifdef INIT_EXTRA_FRAME_INFO
d1149 2
a1150 1
#ifdef REMOTE_TRANSLATE_XFER_ADDRESS
d1221 2
a1222 1
#ifdef SAVE_DUMMY_FRAME_TOS
@


1.27
log
@The attatched moves the remaining guff from gdbarch.{h,c,sh} to
arch-utils.{h,c}.  The ``set architecutre'' and ``set endian''
commands (part of the move) were implemented to use add_set_enum_cmd()
so that ``set architecture <tab>'' works.
@
text
@d96 1
d236 2
a237 1
struct gdbarch startup_gdbarch = {
d241 2
a242 2
  /* target specific vector */
  NULL,
d345 1
d412 1
d662 6
d669 1
a669 1
gdbarch_dump (void)
d671 555
d1228 2
a1229 2
    fprintf_unfiltered (gdb_stdlog,
                        "gdbarch_update: TARGET_ARCHITECTURE = %s\n",
d1233 2
a1234 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_BYTE_ORDER = %ld\n",
d1238 2
a1239 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_BFD_VMA_BIT = %ld\n",
d1243 2
a1244 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_PTR_BIT = %ld\n",
d1248 2
a1249 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_SHORT_BIT = %ld\n",
d1253 2
a1254 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_INT_BIT = %ld\n",
d1258 2
a1259 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_LONG_BIT = %ld\n",
d1263 2
a1264 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_LONG_LONG_BIT = %ld\n",
d1268 2
a1269 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_FLOAT_BIT = %ld\n",
d1273 2
a1274 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_DOUBLE_BIT = %ld\n",
d1278 2
a1279 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_LONG_DOUBLE_BIT = %ld\n",
d1283 2
a1284 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: IEEE_FLOAT = %ld\n",
d1288 5
a1292 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_READ_PC = 0x%08lx\n",
                      (long) current_gdbarch->read_pc
                      /*TARGET_READ_PC ()*/);
d1295 5
a1299 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_WRITE_PC = 0x%08lx\n",
                      (long) current_gdbarch->write_pc
                      /*TARGET_WRITE_PC ()*/);
d1302 5
a1306 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_READ_FP = 0x%08lx\n",
                      (long) current_gdbarch->read_fp
                      /*TARGET_READ_FP ()*/);
d1309 5
a1313 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_WRITE_FP = 0x%08lx\n",
                      (long) current_gdbarch->write_fp
                      /*TARGET_WRITE_FP ()*/);
d1316 5
a1320 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_READ_SP = 0x%08lx\n",
                      (long) current_gdbarch->read_sp
                      /*TARGET_READ_SP ()*/);
d1323 5
a1327 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_WRITE_SP = 0x%08lx\n",
                      (long) current_gdbarch->write_sp
                      /*TARGET_WRITE_SP ()*/);
d1330 2
a1331 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: NUM_REGS = %ld\n",
d1335 2
a1336 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SP_REGNUM = %ld\n",
d1340 2
a1341 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FP_REGNUM = %ld\n",
d1345 2
a1346 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PC_REGNUM = %ld\n",
d1350 2
a1351 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FP0_REGNUM = %ld\n",
d1355 2
a1356 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: NPC_REGNUM = %ld\n",
d1360 2
a1361 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: NNPC_REGNUM = %ld\n",
d1365 5
a1369 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_NAME = 0x%08lx\n",
                      (long) current_gdbarch->register_name
                      /*REGISTER_NAME ()*/);
d1372 2
a1373 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_SIZE = %ld\n",
d1377 2
a1378 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_BYTES = %ld\n",
d1382 5
a1386 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_BYTE = 0x%08lx\n",
                      (long) current_gdbarch->register_byte
                      /*REGISTER_BYTE ()*/);
d1389 5
a1393 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_RAW_SIZE = 0x%08lx\n",
                      (long) current_gdbarch->register_raw_size
                      /*REGISTER_RAW_SIZE ()*/);
d1396 2
a1397 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: MAX_REGISTER_RAW_SIZE = %ld\n",
d1401 5
a1405 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_VIRTUAL_SIZE = 0x%08lx\n",
                      (long) current_gdbarch->register_virtual_size
                      /*REGISTER_VIRTUAL_SIZE ()*/);
d1408 2
a1409 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: MAX_REGISTER_VIRTUAL_SIZE = %ld\n",
d1413 5
a1417 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_VIRTUAL_TYPE = 0x%08lx\n",
                      (long) current_gdbarch->register_virtual_type
                      /*REGISTER_VIRTUAL_TYPE ()*/);
d1420 2
a1421 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: USE_GENERIC_DUMMY_FRAMES = %ld\n",
d1425 2
a1426 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_LOCATION = %ld\n",
d1430 5
a1434 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->call_dummy_address
                      /*CALL_DUMMY_ADDRESS ()*/);
d1437 2
a1438 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_START_OFFSET = 0x%08lx\n",
d1442 2
a1443 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
d1447 2
a1448 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET_P = %ld\n",
d1453 2
a1454 2
    fprintf_unfiltered (gdb_stdlog,
                        "gdbarch_update: CALL_DUMMY_LENGTH = %ld\n",
d1458 5
a1462 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PC_IN_CALL_DUMMY = 0x%08lx\n",
                      (long) current_gdbarch->pc_in_call_dummy
                      /*PC_IN_CALL_DUMMY ()*/);
d1465 2
a1466 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_P = %ld\n",
d1470 2
a1471 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_WORDS = 0x%08lx\n",
d1475 2
a1476 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SIZEOF_CALL_DUMMY_WORDS = 0x%08lx\n",
d1480 2
a1481 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_STACK_ADJUST_P = 0x%08lx\n",
d1486 2
a1487 2
    fprintf_unfiltered (gdb_stdlog,
                        "gdbarch_update: CALL_DUMMY_STACK_ADJUST = 0x%08lx\n",
d1491 5
a1495 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FIX_CALL_DUMMY = 0x%08lx\n",
                      (long) current_gdbarch->fix_call_dummy
                      /*FIX_CALL_DUMMY ()*/);
d1498 2
a1499 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: BELIEVE_PCC_PROMOTION = %ld\n",
d1503 2
a1504 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: BELIEVE_PCC_PROMOTION_TYPE = %ld\n",
d1508 5
a1512 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: COERCE_FLOAT_TO_DOUBLE = 0x%08lx\n",
                      (long) current_gdbarch->coerce_float_to_double
                      /*COERCE_FLOAT_TO_DOUBLE ()*/);
d1515 5
a1519 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: GET_SAVED_REGISTER = 0x%08lx\n",
                      (long) current_gdbarch->get_saved_register
                      /*GET_SAVED_REGISTER ()*/);
d1522 5
a1526 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERTIBLE = 0x%08lx\n",
                      (long) current_gdbarch->register_convertible
                      /*REGISTER_CONVERTIBLE ()*/);
d1529 5
a1533 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERT_TO_VIRTUAL = 0x%08lx\n",
                      (long) current_gdbarch->register_convert_to_virtual
                      /*REGISTER_CONVERT_TO_VIRTUAL ()*/);
d1536 5
a1540 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERT_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->register_convert_to_raw
                      /*REGISTER_CONVERT_TO_RAW ()*/);
d1543 5
a1547 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: POINTER_TO_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->pointer_to_address
                      /*POINTER_TO_ADDRESS ()*/);
d1550 5
a1554 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: ADDRESS_TO_POINTER = 0x%08lx\n",
                      (long) current_gdbarch->address_to_pointer
                      /*ADDRESS_TO_POINTER ()*/);
d1557 5
a1561 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: RETURN_VALUE_ON_STACK = 0x%08lx\n",
                      (long) current_gdbarch->return_value_on_stack
                      /*RETURN_VALUE_ON_STACK ()*/);
d1564 5
a1568 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: EXTRACT_RETURN_VALUE = 0x%08lx\n",
                      (long) current_gdbarch->extract_return_value
                      /*EXTRACT_RETURN_VALUE ()*/);
d1571 5
a1575 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_ARGUMENTS = 0x%08lx\n",
                      (long) current_gdbarch->push_arguments
                      /*PUSH_ARGUMENTS ()*/);
d1578 5
a1582 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_DUMMY_FRAME = 0x%08lx\n",
                      (long) current_gdbarch->push_dummy_frame
                      /*PUSH_DUMMY_FRAME ()*/);
d1585 5
a1589 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_RETURN_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->push_return_address
                      /*PUSH_RETURN_ADDRESS ()*/);
d1592 5
a1596 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: POP_FRAME = 0x%08lx\n",
                      (long) current_gdbarch->pop_frame
                      /*POP_FRAME ()*/);
d1599 5
a1603 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_MAKE_DADDR = 0x%08lx\n",
                      (long) current_gdbarch->d10v_make_daddr
                      /*D10V_MAKE_DADDR ()*/);
d1606 5
a1610 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_MAKE_IADDR = 0x%08lx\n",
                      (long) current_gdbarch->d10v_make_iaddr
                      /*D10V_MAKE_IADDR ()*/);
d1613 5
a1617 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_DADDR_P = 0x%08lx\n",
                      (long) current_gdbarch->d10v_daddr_p
                      /*D10V_DADDR_P ()*/);
d1620 5
a1624 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_IADDR_P = 0x%08lx\n",
                      (long) current_gdbarch->d10v_iaddr_p
                      /*D10V_IADDR_P ()*/);
d1627 5
a1631 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_CONVERT_DADDR_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->d10v_convert_daddr_to_raw
                      /*D10V_CONVERT_DADDR_TO_RAW ()*/);
d1634 5
a1638 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_CONVERT_IADDR_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->d10v_convert_iaddr_to_raw
                      /*D10V_CONVERT_IADDR_TO_RAW ()*/);
d1641 5
a1645 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: STORE_STRUCT_RETURN = 0x%08lx\n",
                      (long) current_gdbarch->store_struct_return
                      /*STORE_STRUCT_RETURN ()*/);
d1648 5
a1652 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: STORE_RETURN_VALUE = 0x%08lx\n",
                      (long) current_gdbarch->store_return_value
                      /*STORE_RETURN_VALUE ()*/);
d1655 5
a1659 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->extract_struct_value_address
                      /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
d1662 5
a1666 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: USE_STRUCT_CONVENTION = 0x%08lx\n",
                      (long) current_gdbarch->use_struct_convention
                      /*USE_STRUCT_CONVENTION ()*/);
d1669 5
a1673 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_INIT_SAVED_REGS = 0x%08lx\n",
                      (long) current_gdbarch->frame_init_saved_regs
                      /*FRAME_INIT_SAVED_REGS ()*/);
d1676 5
a1680 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: INIT_EXTRA_FRAME_INFO = 0x%08lx\n",
                      (long) current_gdbarch->init_extra_frame_info
                      /*INIT_EXTRA_FRAME_INFO ()*/);
d1683 5
a1687 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SKIP_PROLOGUE = 0x%08lx\n",
                      (long) current_gdbarch->skip_prologue
                      /*SKIP_PROLOGUE ()*/);
d1690 5
a1694 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PROLOGUE_FRAMELESS_P = 0x%08lx\n",
                      (long) current_gdbarch->prologue_frameless_p
                      /*PROLOGUE_FRAMELESS_P ()*/);
d1697 5
a1701 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: INNER_THAN = 0x%08lx\n",
                      (long) current_gdbarch->inner_than
                      /*INNER_THAN ()*/);
d1704 5
a1708 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: BREAKPOINT_FROM_PC = 0x%08lx\n",
                      (long) current_gdbarch->breakpoint_from_pc
                      /*BREAKPOINT_FROM_PC ()*/);
d1711 5
a1715 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: MEMORY_INSERT_BREAKPOINT = 0x%08lx\n",
                      (long) current_gdbarch->memory_insert_breakpoint
                      /*MEMORY_INSERT_BREAKPOINT ()*/);
d1718 5
a1722 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: MEMORY_REMOVE_BREAKPOINT = 0x%08lx\n",
                      (long) current_gdbarch->memory_remove_breakpoint
                      /*MEMORY_REMOVE_BREAKPOINT ()*/);
d1725 2
a1726 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: DECR_PC_AFTER_BREAK = %ld\n",
d1730 2
a1731 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FUNCTION_START_OFFSET = %ld\n",
d1735 5
a1739 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REMOTE_TRANSLATE_XFER_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->remote_translate_xfer_address
                      /*REMOTE_TRANSLATE_XFER_ADDRESS ()*/);
d1742 2
a1743 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_ARGS_SKIP = %ld\n",
d1747 5
a1751 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
                      (long) current_gdbarch->frameless_function_invocation
                      /*FRAMELESS_FUNCTION_INVOCATION ()*/);
d1754 5
a1758 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_CHAIN = 0x%08lx\n",
                      (long) current_gdbarch->frame_chain
                      /*FRAME_CHAIN ()*/);
d1761 5
a1765 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_CHAIN_VALID = 0x%08lx\n",
                      (long) current_gdbarch->frame_chain_valid
                      /*FRAME_CHAIN_VALID ()*/);
d1768 5
a1772 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_SAVED_PC = 0x%08lx\n",
                      (long) current_gdbarch->frame_saved_pc
                      /*FRAME_SAVED_PC ()*/);
d1775 5
a1779 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_ARGS_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->frame_args_address
                      /*FRAME_ARGS_ADDRESS ()*/);
d1782 5
a1786 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_LOCALS_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->frame_locals_address
                      /*FRAME_LOCALS_ADDRESS ()*/);
d1789 5
a1793 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SAVED_PC_AFTER_CALL = 0x%08lx\n",
                      (long) current_gdbarch->saved_pc_after_call
                      /*SAVED_PC_AFTER_CALL ()*/);
d1796 5
a1800 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_NUM_ARGS = 0x%08lx\n",
                      (long) current_gdbarch->frame_num_args
                      /*FRAME_NUM_ARGS ()*/);
d1803 5
a1807 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: STACK_ALIGN = 0x%08lx\n",
                      (long) current_gdbarch->stack_align
                      /*STACK_ALIGN ()*/);
d1810 5
a1814 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REG_STRUCT_HAS_ADDR = 0x%08lx\n",
                      (long) current_gdbarch->reg_struct_has_addr
                      /*REG_STRUCT_HAS_ADDR ()*/);
d1817 5
a1821 4
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SAVE_DUMMY_FRAME_TOS = 0x%08lx\n",
                      (long) current_gdbarch->save_dummy_frame_tos
                      /*SAVE_DUMMY_FRAME_TOS ()*/);
d1824 2
a1825 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_FLOAT_FORMAT = %ld\n",
d1829 2
a1830 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_DOUBLE_FORMAT = %ld\n",
d1834 2
a1835 2
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_LONG_DOUBLE_FORMAT = %ld\n",
d1838 2
a1839 3
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: GDB_MULTI_ARCH = %d\n",
                      GDB_MULTI_ARCH);
d3683 1
a3683 1
struct gdbarch_init_registration
d3687 1
d3689 1
a3689 1
  struct gdbarch_init_registration *next;
d3692 1
a3692 1
static struct gdbarch_init_registration *gdbarch_init_registrary = NULL;
d3712 2
a3713 2
      struct gdbarch_init_registration *rego;
      for (rego = gdbarch_init_registrary;
d3739 3
a3741 2
register_gdbarch_init (enum bfd_architecture bfd_architecture,
                       gdbarch_init_ftype *init)
d3743 1
a3743 1
  struct gdbarch_init_registration **curr;
d3752 1
a3752 1
  for (curr = &gdbarch_init_registrary;
d3766 1
a3766 1
  (*curr) = XMALLOC (struct gdbarch_init_registration);
d3769 1
d3772 13
d3815 1
a3815 1
  struct gdbarch_init_registration *rego;
d3849 5
a3853 3
  for (rego = gdbarch_init_registrary;
       rego != NULL && rego->bfd_architecture != info.bfd_architecture;
       rego = rego->next);
d3918 2
a3919 1
	    fprintf_unfiltered (gdb_stdlog, "gdbarch_update: Previous architecture 0x%08lx (%s) selected\n",
d3927 1
a3927 1
    
a3940 1
      gdbarch_dump ();
d3943 3
a3945 1
  /* Check that the newly installed architecture is valid.  */
d3958 3
a3962 1

@


1.26
log
@Move generic_register_convertible_not and frame_num_args_unknown from
gdbarch.* to arch-utils.*.
@
text
@d3072 44
a3148 1
  
a3321 337
/* Functions to manipulate the endianness of the target.  */

#ifdef TARGET_BYTE_ORDER_SELECTABLE
/* compat - Catch old targets that expect a selectable byte-order to
   default to BIG_ENDIAN */
#ifndef TARGET_BYTE_ORDER_DEFAULT
#define TARGET_BYTE_ORDER_DEFAULT BIG_ENDIAN
#endif
#endif
#if !TARGET_BYTE_ORDER_SELECTABLE_P
#ifndef TARGET_BYTE_ORDER_DEFAULT
/* compat - Catch old non byte-order selectable targets that do not
   define TARGET_BYTE_ORDER_DEFAULT and instead expect
   TARGET_BYTE_ORDER to be used as the default.  For targets that
   defined neither TARGET_BYTE_ORDER nor TARGET_BYTE_ORDER_DEFAULT the
   below will get a strange compiler warning. */
#define TARGET_BYTE_ORDER_DEFAULT TARGET_BYTE_ORDER
#endif
#endif
#ifndef TARGET_BYTE_ORDER_DEFAULT
#define TARGET_BYTE_ORDER_DEFAULT BIG_ENDIAN /* arbitrary */
#endif
int target_byte_order = TARGET_BYTE_ORDER_DEFAULT;
int target_byte_order_auto = 1;

/* Chain containing the \"set endian\" commands.  */
static struct cmd_list_element *endianlist = NULL;

/* Called by ``show endian''.  */
static void
show_endian (char *args, int from_tty)
{
  char *msg =
    (TARGET_BYTE_ORDER_AUTO
     ? "The target endianness is set automatically (currently %s endian)\n"
     : "The target is assumed to be %s endian\n");
  printf_unfiltered (msg, (TARGET_BYTE_ORDER == BIG_ENDIAN ? "big" : "little"));
}

/* Called if the user enters ``set endian'' without an argument.  */
static void
set_endian (char *args, int from_tty)
{
  printf_unfiltered ("\"set endian\" must be followed by \"auto\", \"big\" or \"little\".\n");
  show_endian (args, from_tty);
}

/* Called by ``set endian big''.  */
static void
set_endian_big (char *args, int from_tty)
{
  if (TARGET_BYTE_ORDER_SELECTABLE_P)
    {
      target_byte_order = BIG_ENDIAN;
      target_byte_order_auto = 0;
      if (GDB_MULTI_ARCH)
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.byte_order = BIG_ENDIAN;
	  gdbarch_update (info);
	}
    }
  else
    {
      printf_unfiltered ("Byte order is not selectable.");
      show_endian (args, from_tty);
    }
}

/* Called by ``set endian little''.  */
static void
set_endian_little (char *args, int from_tty)
{
  if (TARGET_BYTE_ORDER_SELECTABLE_P)
    {
      target_byte_order = LITTLE_ENDIAN;
      target_byte_order_auto = 0;
      if (GDB_MULTI_ARCH)
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.byte_order = LITTLE_ENDIAN;
	  gdbarch_update (info);
	}
    }
  else
    {
      printf_unfiltered ("Byte order is not selectable.");
      show_endian (args, from_tty);
    }
}

/* Called by ``set endian auto''.  */
static void
set_endian_auto (char *args, int from_tty)
{
  if (TARGET_BYTE_ORDER_SELECTABLE_P)
    {
      target_byte_order_auto = 1;
    }
  else
    {
      printf_unfiltered ("Byte order is not selectable.");
      show_endian (args, from_tty);
    }
}

/* Set the endianness from a BFD.  */
static void
set_endian_from_file (bfd *abfd)
{
  if (TARGET_BYTE_ORDER_SELECTABLE_P)
    {
      int want;
      
      if (bfd_big_endian (abfd))
	want = BIG_ENDIAN;
      else
	want = LITTLE_ENDIAN;
      if (TARGET_BYTE_ORDER_AUTO)
	target_byte_order = want;
      else if (TARGET_BYTE_ORDER != want)
	warning ("%s endian file does not match %s endian target.",
		 want == BIG_ENDIAN ? "big" : "little",
		 TARGET_BYTE_ORDER == BIG_ENDIAN ? "big" : "little");
    }
  else
    {
      if (bfd_big_endian (abfd)
	  ? TARGET_BYTE_ORDER != BIG_ENDIAN
	  : TARGET_BYTE_ORDER == BIG_ENDIAN)
	warning ("%s endian file does not match %s endian target.",
		 bfd_big_endian (abfd) ? "big" : "little",
		 TARGET_BYTE_ORDER == BIG_ENDIAN ? "big" : "little");
    }
}



/* Functions to manipulate the architecture of the target */

enum set_arch { set_arch_auto, set_arch_manual };

int target_architecture_auto = 1;
extern const struct bfd_arch_info bfd_default_arch_struct;
const struct bfd_arch_info *target_architecture = &bfd_default_arch_struct;
int (*target_architecture_hook) (const struct bfd_arch_info *ap);

static void show_endian (char *, int);
static void set_endian (char *, int);
static void set_endian_big (char *, int);
static void set_endian_little (char *, int);
static void set_endian_auto (char *, int);
static void set_endian_from_file (bfd *);
static int arch_ok (const struct bfd_arch_info *arch);
static void set_arch (const struct bfd_arch_info *arch, enum set_arch type);
static void show_architecture (char *, int);
static void set_architecture (char *, int);
static void info_architecture (char *, int);
static void set_architecture_from_file (bfd *);

/* Do the real work of changing the current architecture */

static int
arch_ok (const struct bfd_arch_info *arch)
{
  /* Should be performing the more basic check that the binary is
     compatible with GDB. */
  /* Check with the target that the architecture is valid. */
  return (target_architecture_hook == NULL
	  || target_architecture_hook (arch));
}

static void
set_arch (const struct bfd_arch_info *arch,
          enum set_arch type)
{
  switch (type)
    {
    case set_arch_auto:
      if (!arch_ok (arch))
	warning ("Target may not support %s architecture",
		 arch->printable_name);
      target_architecture = arch;
      break;
    case set_arch_manual:
      if (!arch_ok (arch))
	{
	  printf_unfiltered ("Target does not support `%s' architecture.\n",
			     arch->printable_name);
	}
      else
	{
	  target_architecture_auto = 0;
	  target_architecture = arch;
	}
      break;
    }
  if (gdbarch_debug)
    gdbarch_dump ();
}

/* Called if the user enters ``show architecture'' without an argument. */
static void
show_architecture (char *args, int from_tty)
{
  const char *arch;
  arch = TARGET_ARCHITECTURE->printable_name;
  if (target_architecture_auto)
    printf_filtered ("The target architecture is set automatically (currently %s)\n", arch);
  else
    printf_filtered ("The target architecture is assumed to be %s\n", arch);
}

/* Called if the user enters ``set architecture'' with or without an
   argument. */
static void
set_architecture (char *args, int from_tty)
{
  if (args == NULL)
    {
      printf_unfiltered ("\"set architecture\" must be followed by \"auto\" or an architecture name.\n");
    }
  else if (strcmp (args, "auto") == 0)
    {
      target_architecture_auto = 1;
    }
  else if (GDB_MULTI_ARCH)
    {
      const struct bfd_arch_info *arch = bfd_scan_arch (args);
      if (arch == NULL)
	printf_unfiltered ("Architecture `%s' not reconized.\n", args);
      else
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.bfd_arch_info = arch;
	  if (gdbarch_update (info))
	    target_architecture_auto = 0;
	  else
	    printf_unfiltered ("Architecture `%s' not reconized.\n", args);
	}
    }
  else
    {
      const struct bfd_arch_info *arch = bfd_scan_arch (args);
      if (arch != NULL)
	set_arch (arch, set_arch_manual);
      else
	printf_unfiltered ("Architecture `%s' not reconized.\n", args);
    }
}

/* Called if the user enters ``info architecture'' without an argument. */
static void
info_architecture (char *args, int from_tty)
{
  enum bfd_architecture a;
  if (GDB_MULTI_ARCH)
    {
      if (gdbarch_init_registrary != NULL)
	{
	  struct gdbarch_init_registration *rego;
	  printf_filtered ("Available architectures are:\n");
	  for (rego = gdbarch_init_registrary;
	       rego != NULL;
	       rego = rego->next)
	    {
	      const struct bfd_arch_info *ap;
	      ap = bfd_lookup_arch (rego->bfd_architecture, 0);
	      if (ap != NULL)
		{
		  do
		    {
		      printf_filtered (" %s", ap->printable_name);
		      ap = ap->next;
		    }
		  while (ap != NULL);
		  printf_filtered ("\n");
		}
	    }
	}
      else
	{
	  printf_filtered ("There are no available architectures.\n");
	}
      return;
    }
  printf_filtered ("Available architectures are:\n");
  for (a = bfd_arch_obscure + 1; a < bfd_arch_last; a++)
    {
      const struct bfd_arch_info *ap = bfd_lookup_arch (a, 0);
      if (ap != NULL)
	{
	  do
	    {
	      printf_filtered (" %s", ap->printable_name);
	      ap = ap->next;
	    }
	  while (ap != NULL);
	  printf_filtered ("\n");
	}
    }
}

/* Set the architecture from arch/machine */
void
set_architecture_from_arch_mach (arch, mach)
     enum bfd_architecture arch;
     unsigned long mach;
{
  const struct bfd_arch_info *wanted = bfd_lookup_arch (arch, mach);
  if (wanted != NULL)
    set_arch (wanted, set_arch_manual);
  else
    internal_error ("gdbarch: hardwired architecture/machine not reconized");
}

/* Set the architecture from a BFD */
static void
set_architecture_from_file (bfd *abfd)
{
  const struct bfd_arch_info *wanted = bfd_get_arch_info (abfd);
  if (target_architecture_auto)
    {
      set_arch (wanted, set_arch_auto);
    }
  else if (wanted != target_architecture)
    {
      warning ("%s architecture file may be incompatible with %s target.",
	       wanted->printable_name,
	       target_architecture->printable_name);
    }
}


d3329 1
a3330 50
/* Set the dynamic target-system-dependant parameters (architecture,
   byte-order) using information found in the BFD */

void
set_gdbarch_from_file (abfd)
     bfd *abfd;
{
  if (GDB_MULTI_ARCH)
    {
      struct gdbarch_info info;
      memset (&info, 0, sizeof info);
      info.abfd = abfd;
      gdbarch_update (info);
      return;
    }
  set_architecture_from_file (abfd);
  set_endian_from_file (abfd);
}


/* Initialize the current architecture.  */
void
initialize_current_architecture ()
{
  if (GDB_MULTI_ARCH)
    {
      struct gdbarch_init_registration *rego;
      const struct bfd_arch_info *chosen = NULL;
      for (rego = gdbarch_init_registrary; rego != NULL; rego = rego->next)
	{
	  const struct bfd_arch_info *ap
	    = bfd_lookup_arch (rego->bfd_architecture, 0);

	  /* Choose the first architecture alphabetically.  */
	  if (chosen == NULL
	      || strcmp (ap->printable_name, chosen->printable_name) < 0)
	    chosen = ap;
	}

      if (chosen != NULL)
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.bfd_arch_info = chosen;
	  gdbarch_update (info);
	}
    }
}

extern void _initialize_gdbarch (void);
a3334 20

  add_prefix_cmd ("endian", class_support, set_endian,
		  "Set endianness of target.",
		  &endianlist, "set endian ", 0, &setlist);
  add_cmd ("big", class_support, set_endian_big,
	   "Set target as being big endian.", &endianlist);
  add_cmd ("little", class_support, set_endian_little,
	   "Set target as being little endian.", &endianlist);
  add_cmd ("auto", class_support, set_endian_auto,
	   "Select target endianness automatically.", &endianlist);
  add_cmd ("endian", class_support, show_endian,
	   "Show endianness of target.", &showlist);

  add_cmd ("architecture", class_support, set_architecture,
	   "Set architecture of target.", &setlist);
  add_alias_cmd ("processor", "architecture", class_support, 1, &setlist);
  add_cmd ("architecture", class_support, show_architecture,
	   "Show architecture of target.", &showlist);
  add_cmd ("architecture", class_support, info_architecture,
	   "List supported target architectures", &infolist);
@


1.25
log
@Add host_pointer_to_address() and address_to_host_pointer().  Add
signed_pointer_to_address() etc.  Rename generic_pointer_to_address()
to unsigned_pointer_to_address() etc.
@
text
@a3615 18
/* Misc helper functions for targets. */

int
frame_num_args_unknown (fi)
     struct frame_info *fi;
{
  return -1;
}


int
generic_register_convertible_not (num)
     int num;
{
  return 0;
}
  

@


1.25.2.1
log
@Import ``maint print arch'' from trunk.
Import dump of macro values from trunk.
@
text
@a95 1
  gdbarch_dump_tdep_ftype *dump_tdep;
d235 1
a235 2
struct gdbarch startup_gdbarch =
{
d239 2
a240 2
  /* target specific vector and its dump routine */
  NULL, NULL,
a342 1

a408 1

a657 6
/* NOTE/WARNING: The parameter is called ``current_gdbarch'' so that it
   just happens to match the global variable ``current_gdbarch''.  That
   way macros refering to that variable get the local and not the global
   version - ulgh.  Once everything is parameterised with gdbarch, this
   will go away. */

d659 1
a659 1
gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)
a660 555
  fprintf_unfiltered (file,
                      "gdbarch_dump: GDB_MULTI_ARCH = %d\n",
                      GDB_MULTI_ARCH);
#ifdef TARGET_ARCHITECTURE
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_ARCHITECTURE # %s\n",
                      XSTRING (TARGET_ARCHITECTURE));
#endif
#ifdef TARGET_BYTE_ORDER
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BYTE_ORDER # %s\n",
                      XSTRING (TARGET_BYTE_ORDER));
#endif
#ifdef TARGET_BFD_VMA_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BFD_VMA_BIT # %s\n",
                      XSTRING (TARGET_BFD_VMA_BIT));
#endif
#ifdef TARGET_PTR_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PTR_BIT # %s\n",
                      XSTRING (TARGET_PTR_BIT));
#endif
#ifdef TARGET_SHORT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_SHORT_BIT # %s\n",
                      XSTRING (TARGET_SHORT_BIT));
#endif
#ifdef TARGET_INT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_INT_BIT # %s\n",
                      XSTRING (TARGET_INT_BIT));
#endif
#ifdef TARGET_LONG_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_BIT));
#endif
#ifdef TARGET_LONG_LONG_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_LONG_BIT # %s\n",
                      XSTRING (TARGET_LONG_LONG_BIT));
#endif
#ifdef TARGET_FLOAT_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_BIT # %s\n",
                      XSTRING (TARGET_FLOAT_BIT));
#endif
#ifdef TARGET_DOUBLE_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_DOUBLE_BIT));
#endif
#ifdef TARGET_LONG_DOUBLE_BIT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_BIT));
#endif
#ifdef IEEE_FLOAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: IEEE_FLOAT # %s\n",
                      XSTRING (IEEE_FLOAT));
#endif
#ifdef TARGET_READ_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_PC(pid)",
                      XSTRING (TARGET_READ_PC (pid)));
#endif
#ifdef TARGET_WRITE_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_PC(val, pid)",
                      XSTRING (TARGET_WRITE_PC (val, pid)));
#endif
#ifdef TARGET_READ_FP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_FP()",
                      XSTRING (TARGET_READ_FP ()));
#endif
#ifdef TARGET_WRITE_FP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_FP(val)",
                      XSTRING (TARGET_WRITE_FP (val)));
#endif
#ifdef TARGET_READ_SP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_READ_SP()",
                      XSTRING (TARGET_READ_SP ()));
#endif
#ifdef TARGET_WRITE_SP
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "TARGET_WRITE_SP(val)",
                      XSTRING (TARGET_WRITE_SP (val)));
#endif
#ifdef NUM_REGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: NUM_REGS # %s\n",
                      XSTRING (NUM_REGS));
#endif
#ifdef SP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: SP_REGNUM # %s\n",
                      XSTRING (SP_REGNUM));
#endif
#ifdef FP_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP_REGNUM # %s\n",
                      XSTRING (FP_REGNUM));
#endif
#ifdef PC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: PC_REGNUM # %s\n",
                      XSTRING (PC_REGNUM));
#endif
#ifdef FP0_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP0_REGNUM # %s\n",
                      XSTRING (FP0_REGNUM));
#endif
#ifdef NPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: NPC_REGNUM # %s\n",
                      XSTRING (NPC_REGNUM));
#endif
#ifdef NNPC_REGNUM
  fprintf_unfiltered (file,
                      "gdbarch_dump: NNPC_REGNUM # %s\n",
                      XSTRING (NNPC_REGNUM));
#endif
#ifdef REGISTER_NAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_NAME(regnr)",
                      XSTRING (REGISTER_NAME (regnr)));
#endif
#ifdef REGISTER_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_SIZE # %s\n",
                      XSTRING (REGISTER_SIZE));
#endif
#ifdef REGISTER_BYTES
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTES # %s\n",
                      XSTRING (REGISTER_BYTES));
#endif
#ifdef REGISTER_BYTE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_BYTE(reg_nr)",
                      XSTRING (REGISTER_BYTE (reg_nr)));
#endif
#ifdef REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_RAW_SIZE(reg_nr)",
                      XSTRING (REGISTER_RAW_SIZE (reg_nr)));
#endif
#ifdef MAX_REGISTER_RAW_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_RAW_SIZE # %s\n",
                      XSTRING (MAX_REGISTER_RAW_SIZE));
#endif
#ifdef REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_SIZE(reg_nr)",
                      XSTRING (REGISTER_VIRTUAL_SIZE (reg_nr)));
#endif
#ifdef MAX_REGISTER_VIRTUAL_SIZE
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_VIRTUAL_SIZE # %s\n",
                      XSTRING (MAX_REGISTER_VIRTUAL_SIZE));
#endif
#ifdef REGISTER_VIRTUAL_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_VIRTUAL_TYPE(reg_nr)",
                      XSTRING (REGISTER_VIRTUAL_TYPE (reg_nr)));
#endif
#ifdef USE_GENERIC_DUMMY_FRAMES
  fprintf_unfiltered (file,
                      "gdbarch_dump: USE_GENERIC_DUMMY_FRAMES # %s\n",
                      XSTRING (USE_GENERIC_DUMMY_FRAMES));
#endif
#ifdef CALL_DUMMY_LOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_LOCATION # %s\n",
                      XSTRING (CALL_DUMMY_LOCATION));
#endif
#ifdef CALL_DUMMY_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "CALL_DUMMY_ADDRESS()",
                      XSTRING (CALL_DUMMY_ADDRESS ()));
#endif
#ifdef CALL_DUMMY_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET # %s\n",
                      XSTRING (CALL_DUMMY_START_OFFSET));
#endif
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET # %s\n",
                      XSTRING (CALL_DUMMY_BREAKPOINT_OFFSET));
#endif
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET_P # %s\n",
                      XSTRING (CALL_DUMMY_BREAKPOINT_OFFSET_P));
#endif
#ifdef CALL_DUMMY_LENGTH
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_LENGTH # %s\n",
                      XSTRING (CALL_DUMMY_LENGTH));
#endif
#ifdef PC_IN_CALL_DUMMY
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PC_IN_CALL_DUMMY(pc, sp, frame_address)",
                      XSTRING (PC_IN_CALL_DUMMY (pc, sp, frame_address)));
#endif
#ifdef CALL_DUMMY_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_P # %s\n",
                      XSTRING (CALL_DUMMY_P));
#endif
#ifdef CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_WORDS # %s\n",
                      XSTRING (CALL_DUMMY_WORDS));
#endif
#ifdef SIZEOF_CALL_DUMMY_WORDS
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS # %s\n",
                      XSTRING (SIZEOF_CALL_DUMMY_WORDS));
#endif
#ifdef CALL_DUMMY_STACK_ADJUST_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST_P # %s\n",
                      XSTRING (CALL_DUMMY_STACK_ADJUST_P));
#endif
#ifdef CALL_DUMMY_STACK_ADJUST
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST # %s\n",
                      XSTRING (CALL_DUMMY_STACK_ADJUST));
#endif
#ifdef FIX_CALL_DUMMY
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FIX_CALL_DUMMY(dummy, pc, fun, nargs, args, type, gcc_p)",
                      XSTRING (FIX_CALL_DUMMY (dummy, pc, fun, nargs, args, type, gcc_p)));
#endif
#ifdef BELIEVE_PCC_PROMOTION
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION # %s\n",
                      XSTRING (BELIEVE_PCC_PROMOTION));
#endif
#ifdef BELIEVE_PCC_PROMOTION_TYPE
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION_TYPE # %s\n",
                      XSTRING (BELIEVE_PCC_PROMOTION_TYPE));
#endif
#ifdef COERCE_FLOAT_TO_DOUBLE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "COERCE_FLOAT_TO_DOUBLE(formal, actual)",
                      XSTRING (COERCE_FLOAT_TO_DOUBLE (formal, actual)));
#endif
#ifdef GET_SAVED_REGISTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval)",
                      XSTRING (GET_SAVED_REGISTER (raw_buffer, optimized, addrp, frame, regnum, lval)));
#endif
#ifdef REGISTER_CONVERTIBLE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERTIBLE(nr)",
                      XSTRING (REGISTER_CONVERTIBLE (nr)));
#endif
#ifdef REGISTER_CONVERT_TO_VIRTUAL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERT_TO_VIRTUAL(regnum, type, from, to)",
                      XSTRING (REGISTER_CONVERT_TO_VIRTUAL (regnum, type, from, to)));
#endif
#ifdef REGISTER_CONVERT_TO_RAW
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REGISTER_CONVERT_TO_RAW(type, regnum, from, to)",
                      XSTRING (REGISTER_CONVERT_TO_RAW (type, regnum, from, to)));
#endif
#ifdef POINTER_TO_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "POINTER_TO_ADDRESS(type, buf)",
                      XSTRING (POINTER_TO_ADDRESS (type, buf)));
#endif
#ifdef ADDRESS_TO_POINTER
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "ADDRESS_TO_POINTER(type, buf, addr)",
                      XSTRING (ADDRESS_TO_POINTER (type, buf, addr)));
#endif
#ifdef RETURN_VALUE_ON_STACK
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "RETURN_VALUE_ON_STACK(type)",
                      XSTRING (RETURN_VALUE_ON_STACK (type)));
#endif
#ifdef EXTRACT_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_RETURN_VALUE(type, regbuf, valbuf)",
                      XSTRING (EXTRACT_RETURN_VALUE (type, regbuf, valbuf)));
#endif
#ifdef PUSH_ARGUMENTS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr)",
                      XSTRING (PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)));
#endif
#ifdef PUSH_DUMMY_FRAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_DUMMY_FRAME(-)",
                      XSTRING (PUSH_DUMMY_FRAME (-)));
#endif
#ifdef PUSH_RETURN_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PUSH_RETURN_ADDRESS(pc, sp)",
                      XSTRING (PUSH_RETURN_ADDRESS (pc, sp)));
#endif
#ifdef POP_FRAME
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "POP_FRAME(-)",
                      XSTRING (POP_FRAME (-)));
#endif
#ifdef D10V_MAKE_DADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_MAKE_DADDR(x)",
                      XSTRING (D10V_MAKE_DADDR (x)));
#endif
#ifdef D10V_MAKE_IADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_MAKE_IADDR(x)",
                      XSTRING (D10V_MAKE_IADDR (x)));
#endif
#ifdef D10V_DADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_DADDR_P(x)",
                      XSTRING (D10V_DADDR_P (x)));
#endif
#ifdef D10V_IADDR_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_IADDR_P(x)",
                      XSTRING (D10V_IADDR_P (x)));
#endif
#ifdef D10V_CONVERT_DADDR_TO_RAW
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_CONVERT_DADDR_TO_RAW(x)",
                      XSTRING (D10V_CONVERT_DADDR_TO_RAW (x)));
#endif
#ifdef D10V_CONVERT_IADDR_TO_RAW
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "D10V_CONVERT_IADDR_TO_RAW(x)",
                      XSTRING (D10V_CONVERT_IADDR_TO_RAW (x)));
#endif
#ifdef STORE_STRUCT_RETURN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STORE_STRUCT_RETURN(addr, sp)",
                      XSTRING (STORE_STRUCT_RETURN (addr, sp)));
#endif
#ifdef STORE_RETURN_VALUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STORE_RETURN_VALUE(type, valbuf)",
                      XSTRING (STORE_RETURN_VALUE (type, valbuf)));
#endif
#ifdef EXTRACT_STRUCT_VALUE_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)",
                      XSTRING (EXTRACT_STRUCT_VALUE_ADDRESS (regbuf)));
#endif
#ifdef USE_STRUCT_CONVENTION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "USE_STRUCT_CONVENTION(gcc_p, value_type)",
                      XSTRING (USE_STRUCT_CONVENTION (gcc_p, value_type)));
#endif
#ifdef FRAME_INIT_SAVED_REGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_INIT_SAVED_REGS(frame)",
                      XSTRING (FRAME_INIT_SAVED_REGS (frame)));
#endif
#ifdef INIT_EXTRA_FRAME_INFO
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INIT_EXTRA_FRAME_INFO(fromleaf, frame)",
                      XSTRING (INIT_EXTRA_FRAME_INFO (fromleaf, frame)));
#endif
#ifdef SKIP_PROLOGUE
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SKIP_PROLOGUE(ip)",
                      XSTRING (SKIP_PROLOGUE (ip)));
#endif
#ifdef PROLOGUE_FRAMELESS_P
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "PROLOGUE_FRAMELESS_P(ip)",
                      XSTRING (PROLOGUE_FRAMELESS_P (ip)));
#endif
#ifdef INNER_THAN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "INNER_THAN(lhs, rhs)",
                      XSTRING (INNER_THAN (lhs, rhs)));
#endif
#ifdef BREAKPOINT_FROM_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "BREAKPOINT_FROM_PC(pcptr, lenptr)",
                      XSTRING (BREAKPOINT_FROM_PC (pcptr, lenptr)));
#endif
#ifdef MEMORY_INSERT_BREAKPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "MEMORY_INSERT_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_INSERT_BREAKPOINT (addr, contents_cache)));
#endif
#ifdef MEMORY_REMOVE_BREAKPOINT
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "MEMORY_REMOVE_BREAKPOINT(addr, contents_cache)",
                      XSTRING (MEMORY_REMOVE_BREAKPOINT (addr, contents_cache)));
#endif
#ifdef DECR_PC_AFTER_BREAK
  fprintf_unfiltered (file,
                      "gdbarch_dump: DECR_PC_AFTER_BREAK # %s\n",
                      XSTRING (DECR_PC_AFTER_BREAK));
#endif
#ifdef FUNCTION_START_OFFSET
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET # %s\n",
                      XSTRING (FUNCTION_START_OFFSET));
#endif
#ifdef REMOTE_TRANSLATE_XFER_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REMOTE_TRANSLATE_XFER_ADDRESS(gdb_addr, gdb_len, rem_addr, rem_len)",
                      XSTRING (REMOTE_TRANSLATE_XFER_ADDRESS (gdb_addr, gdb_len, rem_addr, rem_len)));
#endif
#ifdef FRAME_ARGS_SKIP
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_ARGS_SKIP # %s\n",
                      XSTRING (FRAME_ARGS_SKIP));
#endif
#ifdef FRAMELESS_FUNCTION_INVOCATION
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAMELESS_FUNCTION_INVOCATION(fi)",
                      XSTRING (FRAMELESS_FUNCTION_INVOCATION (fi)));
#endif
#ifdef FRAME_CHAIN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN(frame)",
                      XSTRING (FRAME_CHAIN (frame)));
#endif
#ifdef FRAME_CHAIN_VALID
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_CHAIN_VALID(chain, thisframe)",
                      XSTRING (FRAME_CHAIN_VALID (chain, thisframe)));
#endif
#ifdef FRAME_SAVED_PC
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_SAVED_PC(fi)",
                      XSTRING (FRAME_SAVED_PC (fi)));
#endif
#ifdef FRAME_ARGS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_ARGS_ADDRESS(fi)",
                      XSTRING (FRAME_ARGS_ADDRESS (fi)));
#endif
#ifdef FRAME_LOCALS_ADDRESS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_LOCALS_ADDRESS(fi)",
                      XSTRING (FRAME_LOCALS_ADDRESS (fi)));
#endif
#ifdef SAVED_PC_AFTER_CALL
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVED_PC_AFTER_CALL(frame)",
                      XSTRING (SAVED_PC_AFTER_CALL (frame)));
#endif
#ifdef FRAME_NUM_ARGS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "FRAME_NUM_ARGS(frame)",
                      XSTRING (FRAME_NUM_ARGS (frame)));
#endif
#ifdef STACK_ALIGN
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "STACK_ALIGN(sp)",
                      XSTRING (STACK_ALIGN (sp)));
#endif
#ifdef REG_STRUCT_HAS_ADDR
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "REG_STRUCT_HAS_ADDR(gcc_p, type)",
                      XSTRING (REG_STRUCT_HAS_ADDR (gcc_p, type)));
#endif
#ifdef SAVE_DUMMY_FRAME_TOS
  fprintf_unfiltered (file,
                      "gdbarch_dump: %s # %s\n",
                      "SAVE_DUMMY_FRAME_TOS(sp)",
                      XSTRING (SAVE_DUMMY_FRAME_TOS (sp)));
#endif
#ifdef TARGET_FLOAT_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_FORMAT # %s\n",
                      XSTRING (TARGET_FLOAT_FORMAT));
#endif
#ifdef TARGET_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_DOUBLE_FORMAT));
#endif
#ifdef TARGET_LONG_DOUBLE_FORMAT
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT # %s\n",
                      XSTRING (TARGET_LONG_DOUBLE_FORMAT));
#endif
d663 2
a664 2
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_ARCHITECTURE = %s\n",
d668 2
a669 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BYTE_ORDER = %ld\n",
d673 2
a674 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_BFD_VMA_BIT = %ld\n",
d678 2
a679 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_PTR_BIT = %ld\n",
d683 2
a684 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_SHORT_BIT = %ld\n",
d688 2
a689 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_INT_BIT = %ld\n",
d693 2
a694 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_BIT = %ld\n",
d698 2
a699 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_LONG_BIT = %ld\n",
d703 2
a704 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_BIT = %ld\n",
d708 2
a709 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_BIT = %ld\n",
d713 2
a714 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT = %ld\n",
d718 2
a719 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: IEEE_FLOAT = %ld\n",
d723 4
a726 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_READ_PC = 0x%08lx\n",
                        (long) current_gdbarch->read_pc
                        /*TARGET_READ_PC ()*/);
d729 4
a732 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_PC = 0x%08lx\n",
                        (long) current_gdbarch->write_pc
                        /*TARGET_WRITE_PC ()*/);
d735 4
a738 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_READ_FP = 0x%08lx\n",
                        (long) current_gdbarch->read_fp
                        /*TARGET_READ_FP ()*/);
d741 4
a744 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_FP = 0x%08lx\n",
                        (long) current_gdbarch->write_fp
                        /*TARGET_WRITE_FP ()*/);
d747 4
a750 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_READ_SP = 0x%08lx\n",
                        (long) current_gdbarch->read_sp
                        /*TARGET_READ_SP ()*/);
d753 4
a756 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: TARGET_WRITE_SP = 0x%08lx\n",
                        (long) current_gdbarch->write_sp
                        /*TARGET_WRITE_SP ()*/);
d759 2
a760 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: NUM_REGS = %ld\n",
d764 2
a765 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: SP_REGNUM = %ld\n",
d769 2
a770 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP_REGNUM = %ld\n",
d774 2
a775 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: PC_REGNUM = %ld\n",
d779 2
a780 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: FP0_REGNUM = %ld\n",
d784 2
a785 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: NPC_REGNUM = %ld\n",
d789 2
a790 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: NNPC_REGNUM = %ld\n",
d794 4
a797 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_NAME = 0x%08lx\n",
                        (long) current_gdbarch->register_name
                        /*REGISTER_NAME ()*/);
d800 2
a801 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_SIZE = %ld\n",
d805 2
a806 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: REGISTER_BYTES = %ld\n",
d810 4
a813 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_BYTE = 0x%08lx\n",
                        (long) current_gdbarch->register_byte
                        /*REGISTER_BYTE ()*/);
d816 4
a819 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_RAW_SIZE = 0x%08lx\n",
                        (long) current_gdbarch->register_raw_size
                        /*REGISTER_RAW_SIZE ()*/);
d822 2
a823 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_RAW_SIZE = %ld\n",
d827 4
a830 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_VIRTUAL_SIZE = 0x%08lx\n",
                        (long) current_gdbarch->register_virtual_size
                        /*REGISTER_VIRTUAL_SIZE ()*/);
d833 2
a834 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: MAX_REGISTER_VIRTUAL_SIZE = %ld\n",
d838 4
a841 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_VIRTUAL_TYPE = 0x%08lx\n",
                        (long) current_gdbarch->register_virtual_type
                        /*REGISTER_VIRTUAL_TYPE ()*/);
d844 2
a845 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: USE_GENERIC_DUMMY_FRAMES = %ld\n",
d849 2
a850 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_LOCATION = %ld\n",
d854 4
a857 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->call_dummy_address
                        /*CALL_DUMMY_ADDRESS ()*/);
d860 2
a861 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_START_OFFSET = 0x%08lx\n",
d865 2
a866 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
d870 2
a871 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_BREAKPOINT_OFFSET_P = %ld\n",
d876 2
a877 2
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_LENGTH = %ld\n",
d881 4
a884 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PC_IN_CALL_DUMMY = 0x%08lx\n",
                        (long) current_gdbarch->pc_in_call_dummy
                        /*PC_IN_CALL_DUMMY ()*/);
d887 2
a888 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_P = %ld\n",
d892 2
a893 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_WORDS = 0x%08lx\n",
d897 2
a898 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: SIZEOF_CALL_DUMMY_WORDS = 0x%08lx\n",
d902 2
a903 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: CALL_DUMMY_STACK_ADJUST_P = 0x%08lx\n",
d908 2
a909 2
    fprintf_unfiltered (file,
                        "gdbarch_dump: CALL_DUMMY_STACK_ADJUST = 0x%08lx\n",
d913 4
a916 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FIX_CALL_DUMMY = 0x%08lx\n",
                        (long) current_gdbarch->fix_call_dummy
                        /*FIX_CALL_DUMMY ()*/);
d919 2
a920 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION = %ld\n",
d924 2
a925 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: BELIEVE_PCC_PROMOTION_TYPE = %ld\n",
d929 4
a932 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: COERCE_FLOAT_TO_DOUBLE = 0x%08lx\n",
                        (long) current_gdbarch->coerce_float_to_double
                        /*COERCE_FLOAT_TO_DOUBLE ()*/);
d935 4
a938 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: GET_SAVED_REGISTER = 0x%08lx\n",
                        (long) current_gdbarch->get_saved_register
                        /*GET_SAVED_REGISTER ()*/);
d941 4
a944 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERTIBLE = 0x%08lx\n",
                        (long) current_gdbarch->register_convertible
                        /*REGISTER_CONVERTIBLE ()*/);
d947 4
a950 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERT_TO_VIRTUAL = 0x%08lx\n",
                        (long) current_gdbarch->register_convert_to_virtual
                        /*REGISTER_CONVERT_TO_VIRTUAL ()*/);
d953 4
a956 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REGISTER_CONVERT_TO_RAW = 0x%08lx\n",
                        (long) current_gdbarch->register_convert_to_raw
                        /*REGISTER_CONVERT_TO_RAW ()*/);
d959 4
a962 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: POINTER_TO_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->pointer_to_address
                        /*POINTER_TO_ADDRESS ()*/);
d965 4
a968 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: ADDRESS_TO_POINTER = 0x%08lx\n",
                        (long) current_gdbarch->address_to_pointer
                        /*ADDRESS_TO_POINTER ()*/);
d971 4
a974 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: RETURN_VALUE_ON_STACK = 0x%08lx\n",
                        (long) current_gdbarch->return_value_on_stack
                        /*RETURN_VALUE_ON_STACK ()*/);
d977 4
a980 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->extract_return_value
                        /*EXTRACT_RETURN_VALUE ()*/);
d983 4
a986 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_ARGUMENTS = 0x%08lx\n",
                        (long) current_gdbarch->push_arguments
                        /*PUSH_ARGUMENTS ()*/);
d989 4
a992 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_DUMMY_FRAME = 0x%08lx\n",
                        (long) current_gdbarch->push_dummy_frame
                        /*PUSH_DUMMY_FRAME ()*/);
d995 4
a998 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PUSH_RETURN_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->push_return_address
                        /*PUSH_RETURN_ADDRESS ()*/);
d1001 4
a1004 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: POP_FRAME = 0x%08lx\n",
                        (long) current_gdbarch->pop_frame
                        /*POP_FRAME ()*/);
d1007 4
a1010 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_MAKE_DADDR = 0x%08lx\n",
                        (long) current_gdbarch->d10v_make_daddr
                        /*D10V_MAKE_DADDR ()*/);
d1013 4
a1016 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_MAKE_IADDR = 0x%08lx\n",
                        (long) current_gdbarch->d10v_make_iaddr
                        /*D10V_MAKE_IADDR ()*/);
d1019 4
a1022 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_DADDR_P = 0x%08lx\n",
                        (long) current_gdbarch->d10v_daddr_p
                        /*D10V_DADDR_P ()*/);
d1025 4
a1028 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_IADDR_P = 0x%08lx\n",
                        (long) current_gdbarch->d10v_iaddr_p
                        /*D10V_IADDR_P ()*/);
d1031 4
a1034 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_CONVERT_DADDR_TO_RAW = 0x%08lx\n",
                        (long) current_gdbarch->d10v_convert_daddr_to_raw
                        /*D10V_CONVERT_DADDR_TO_RAW ()*/);
d1037 4
a1040 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: D10V_CONVERT_IADDR_TO_RAW = 0x%08lx\n",
                        (long) current_gdbarch->d10v_convert_iaddr_to_raw
                        /*D10V_CONVERT_IADDR_TO_RAW ()*/);
d1043 4
a1046 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_STRUCT_RETURN = 0x%08lx\n",
                        (long) current_gdbarch->store_struct_return
                        /*STORE_STRUCT_RETURN ()*/);
d1049 4
a1052 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STORE_RETURN_VALUE = 0x%08lx\n",
                        (long) current_gdbarch->store_return_value
                        /*STORE_RETURN_VALUE ()*/);
d1055 4
a1058 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->extract_struct_value_address
                        /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
d1061 4
a1064 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: USE_STRUCT_CONVENTION = 0x%08lx\n",
                        (long) current_gdbarch->use_struct_convention
                        /*USE_STRUCT_CONVENTION ()*/);
d1067 4
a1070 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_INIT_SAVED_REGS = 0x%08lx\n",
                        (long) current_gdbarch->frame_init_saved_regs
                        /*FRAME_INIT_SAVED_REGS ()*/);
d1073 4
a1076 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INIT_EXTRA_FRAME_INFO = 0x%08lx\n",
                        (long) current_gdbarch->init_extra_frame_info
                        /*INIT_EXTRA_FRAME_INFO ()*/);
d1079 4
a1082 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SKIP_PROLOGUE = 0x%08lx\n",
                        (long) current_gdbarch->skip_prologue
                        /*SKIP_PROLOGUE ()*/);
d1085 4
a1088 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: PROLOGUE_FRAMELESS_P = 0x%08lx\n",
                        (long) current_gdbarch->prologue_frameless_p
                        /*PROLOGUE_FRAMELESS_P ()*/);
d1091 4
a1094 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: INNER_THAN = 0x%08lx\n",
                        (long) current_gdbarch->inner_than
                        /*INNER_THAN ()*/);
d1097 4
a1100 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: BREAKPOINT_FROM_PC = 0x%08lx\n",
                        (long) current_gdbarch->breakpoint_from_pc
                        /*BREAKPOINT_FROM_PC ()*/);
d1103 4
a1106 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: MEMORY_INSERT_BREAKPOINT = 0x%08lx\n",
                        (long) current_gdbarch->memory_insert_breakpoint
                        /*MEMORY_INSERT_BREAKPOINT ()*/);
d1109 4
a1112 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: MEMORY_REMOVE_BREAKPOINT = 0x%08lx\n",
                        (long) current_gdbarch->memory_remove_breakpoint
                        /*MEMORY_REMOVE_BREAKPOINT ()*/);
d1115 2
a1116 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: DECR_PC_AFTER_BREAK = %ld\n",
d1120 2
a1121 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: FUNCTION_START_OFFSET = %ld\n",
d1125 4
a1128 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REMOTE_TRANSLATE_XFER_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->remote_translate_xfer_address
                        /*REMOTE_TRANSLATE_XFER_ADDRESS ()*/);
d1131 2
a1132 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: FRAME_ARGS_SKIP = %ld\n",
d1136 4
a1139 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
                        (long) current_gdbarch->frameless_function_invocation
                        /*FRAMELESS_FUNCTION_INVOCATION ()*/);
d1142 4
a1145 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_CHAIN = 0x%08lx\n",
                        (long) current_gdbarch->frame_chain
                        /*FRAME_CHAIN ()*/);
d1148 4
a1151 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_CHAIN_VALID = 0x%08lx\n",
                        (long) current_gdbarch->frame_chain_valid
                        /*FRAME_CHAIN_VALID ()*/);
d1154 4
a1157 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_SAVED_PC = 0x%08lx\n",
                        (long) current_gdbarch->frame_saved_pc
                        /*FRAME_SAVED_PC ()*/);
d1160 4
a1163 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_ARGS_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->frame_args_address
                        /*FRAME_ARGS_ADDRESS ()*/);
d1166 4
a1169 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_LOCALS_ADDRESS = 0x%08lx\n",
                        (long) current_gdbarch->frame_locals_address
                        /*FRAME_LOCALS_ADDRESS ()*/);
d1172 4
a1175 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SAVED_PC_AFTER_CALL = 0x%08lx\n",
                        (long) current_gdbarch->saved_pc_after_call
                        /*SAVED_PC_AFTER_CALL ()*/);
d1178 4
a1181 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: FRAME_NUM_ARGS = 0x%08lx\n",
                        (long) current_gdbarch->frame_num_args
                        /*FRAME_NUM_ARGS ()*/);
d1184 4
a1187 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: STACK_ALIGN = 0x%08lx\n",
                        (long) current_gdbarch->stack_align
                        /*STACK_ALIGN ()*/);
d1190 4
a1193 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: REG_STRUCT_HAS_ADDR = 0x%08lx\n",
                        (long) current_gdbarch->reg_struct_has_addr
                        /*REG_STRUCT_HAS_ADDR ()*/);
d1196 4
a1199 5
  if (GDB_MULTI_ARCH)
    fprintf_unfiltered (file,
                        "gdbarch_dump: SAVE_DUMMY_FRAME_TOS = 0x%08lx\n",
                        (long) current_gdbarch->save_dummy_frame_tos
                        /*SAVE_DUMMY_FRAME_TOS ()*/);
d1202 2
a1203 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_FLOAT_FORMAT = %ld\n",
d1207 2
a1208 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_DOUBLE_FORMAT = %ld\n",
d1212 2
a1213 2
  fprintf_unfiltered (file,
                      "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT = %ld\n",
d1216 3
a1218 2
  if (current_gdbarch->dump_tdep != NULL)
    current_gdbarch->dump_tdep (current_gdbarch, file);
d3062 1
a3062 1
struct gdbarch_registration
a3065 1
  gdbarch_dump_tdep_ftype *dump_tdep;
d3067 1
a3067 1
  struct gdbarch_registration *next;
d3070 1
a3070 45
static struct gdbarch_registration *gdbarch_registrary = NULL;

static void
append_name (const char ***buf, int *nr, const char *name)
{
  *buf = xrealloc (*buf, sizeof (char**) * (*nr + 1));
  (*buf)[*nr] = name;
  *nr += 1;
}

const char **
gdbarch_printable_names (void)
{
  if (GDB_MULTI_ARCH)
    {
      /* Accumulate a list of names based on the registed list of
         architectures. */
      enum bfd_architecture a;
      int nr_arches = 0;
      const char **arches = NULL;
      struct gdbarch_registration *rego;
      for (rego = gdbarch_registrary;
	   rego != NULL;
	   rego = rego->next)
	{
	  const struct bfd_arch_info *ap;
	  ap = bfd_lookup_arch (rego->bfd_architecture, 0);
	  if (ap == NULL)
	    internal_error ("gdbarch_architecture_names: multi-arch unknown");
	  do
	    {
	      append_name (&arches, &nr_arches, ap->printable_name);
	      ap = ap->next;
	    }
	  while (ap != NULL);
	}
      append_name (&arches, &nr_arches, NULL);
      return arches;
    }
  else
    /* Just return all the architectures that BFD knows.  Assume that
       the legacy architecture framework supports them. */
    return bfd_arch_list ();
}

d3073 2
a3074 3
gdbarch_register (enum bfd_architecture bfd_architecture,
                  gdbarch_init_ftype *init,
		  gdbarch_dump_tdep_ftype *dump_tdep)
d3076 1
a3076 1
  struct gdbarch_registration **curr;
d3085 1
a3085 1
  for (curr = &gdbarch_registrary;
d3099 1
a3099 1
  (*curr) = XMALLOC (struct gdbarch_registration);
a3101 1
  (*curr)->dump_tdep = dump_tdep;
a3103 13
  /* When non- multi-arch, install what ever target dump routine we've
     been provided - hopefully that routine has been writen correct
     and works regardless of multi-arch. */
  if (!GDB_MULTI_ARCH && dump_tdep != NULL
      && startup_gdbarch.dump_tdep == NULL)
    startup_gdbarch.dump_tdep = dump_tdep;
}

void
register_gdbarch_init (enum bfd_architecture bfd_architecture,
		       gdbarch_init_ftype *init)
{
  gdbarch_register (bfd_architecture, init, NULL);
d3105 1
d3135 1
a3135 1
  struct gdbarch_registration *rego;
d3169 3
a3171 5
  for (rego = gdbarch_registrary;
       rego != NULL;
       rego = rego->next)
    if (rego->bfd_architecture == info.bfd_architecture)
      break;
d3236 1
a3236 2
	    fprintf_unfiltered (gdb_stdlog,
                                "gdbarch_update: Previous architecture 0x%08lx (%s) selected\n",
d3244 1
a3244 1

d3258 1
d3261 1
a3261 3
  /* Check that the newly installed architecture is valid.  Plug in
     any post init values.  */
  new_gdbarch->dump_tdep = rego->dump_tdep;
d3274 204
d3479 118
a3596 1
    gdbarch_dump (current_gdbarch, gdb_stdlog);
d3598 25
a3622 1
  return 1;
d3626 8
d3641 50
a3691 1

d3696 20
@


1.24
log
@Multiarch TARGET_FLOAT_FORMAT, TARGET_DOUBLE_FORMAT,
TARGET_LONG_DOUBLE_FORMAT.  Update d10v.
@
text
@d386 2
a387 2
  gdbarch->pointer_to_address = generic_pointer_to_address;
  gdbarch->address_to_pointer = generic_address_to_pointer;
d2137 1
a2137 1
gdbarch_pointer_to_address (struct gdbarch *gdbarch, struct type *type, char *buf)
d2154 1
a2154 1
gdbarch_address_to_pointer (struct gdbarch *gdbarch, struct type *type, char *buf, CORE_ADDR addr)
@


1.23
log
@Convert SAVE_DUMMY_FRAME_TOS to multi-arch.
@
text
@d61 1
d224 3
d338 3
d647 6
d1201 15
d2849 45
@


1.22
log
@Only try to print a macro when it is defined (in gdbarch_dump).
@
text
@d222 1
d333 1
d639 1
d1182 6
d2798 23
@


1.21
log
@2000-05-08  Michael Snyder  <msnyder@@seadog.cygnus.com>

        * gdbarch.sh: Add FP0_REGNUM to list of multi-arched register numbers.
        * gdbarch.c, gdbarch.h: Regenerate.
        * core-regset.c: Change FP0_REGNUM to a runtime test.
        * procfs.c: Ditto.
        * sun3-nat.c: Ditto.
        * sparc-tdep.c: Ditto.

        * i386mach-nat.c: Remove unnecessary ifdef for FP0_REGNUM.
        * ptx4-nat.c: Ditto.

        * sol-thread.c (sol_thread_create_inferior): only add the thread
        to the thread list if it is not already in there.
        (prototypes for thread_db func ptrs): pretty up formatting.
@
text
@d645 1
d650 2
d655 2
d660 2
d665 2
d670 2
d675 2
d680 2
d685 2
d690 2
d695 2
d700 2
d705 2
d711 2
d717 2
d723 2
d729 2
d735 2
d741 2
d746 2
d751 2
d756 2
d761 2
d766 2
d771 2
d776 2
d782 2
d787 2
d792 2
d798 2
d804 2
d809 2
d815 2
d820 2
d826 2
d831 2
d836 2
d842 2
d847 2
d852 2
d857 2
d863 2
d869 2
d874 2
d879 2
d884 2
d889 2
d895 2
d901 1
d912 1
d917 2
d923 2
d929 2
d935 2
d941 2
d947 2
d953 2
d959 2
d965 2
d971 2
d977 2
d983 2
d989 2
d995 2
d1001 2
d1007 2
d1013 2
d1019 2
d1025 2
d1031 2
d1037 2
d1043 2
d1049 2
d1055 2
d1061 2
d1067 2
d1073 2
d1079 2
d1085 2
d1091 2
d1097 2
d1102 2
d1107 2
d1113 2
d1118 2
d1124 2
d1130 2
d1136 2
d1142 2
d1148 2
d1154 2
d1160 2
d1166 2
d1172 2
d1178 4
@


1.20
log
@Multi-arch NPC_REGNUM NNPC_REGNUM.
@
text
@d149 1
d287 1
d358 1
d478 1
d719 3
d1356 16
@


1.19
log
@re-do how gdbarch provides non-multi arch defaults so that non-
multi-arch gdbservers can continue to compile.
@
text
@d149 2
d284 2
d356 2
d475 2
d715 6
d1349 32
@


1.18
log
@Convert SKIP_PROLOGUE_FRAMELESS_P into PROLOGUE_FRAMELESS_P.
@
text
@a1001 2
  if (GDB_MULTI_ARCH == 0)
    return TARGET_ARCHITECTURE->bits_per_address;
a1339 2
  if (GDB_MULTI_ARCH == 0)
    return legacy_register_name (regnr);
a1645 2
  if (GDB_MULTI_ARCH == 0)
    return legacy_call_dummy_words;
a1661 2
  if (GDB_MULTI_ARCH == 0)
    return legacy_sizeof_call_dummy_words;
a1758 2
  if (GDB_MULTI_ARCH == 0)
    return default_coerce_float_to_double (formal, actual);
a1792 2
  if (GDB_MULTI_ARCH == 0)
    return generic_register_convertible_not (nr);
a1843 2
  if (GDB_MULTI_ARCH == 0)
    return generic_pointer_to_address (type, buf);
a1860 5
  if (GDB_MULTI_ARCH == 0)
    {
      generic_address_to_pointer (type, buf, addr);
      return;
    }
a1877 2
  if (GDB_MULTI_ARCH == 0)
    return generic_return_value_on_stack_not (type);
a2200 2
  if (GDB_MULTI_ARCH == 0)
    return generic_prologue_frameless_p (ip);
a2234 2
  if (GDB_MULTI_ARCH == 0)
    return legacy_breakpoint_from_pc (pcptr, lenptr);
a2251 2
  if (GDB_MULTI_ARCH == 0)
    return default_memory_insert_breakpoint (addr, contents_cache);
a2268 2
  if (GDB_MULTI_ARCH == 0)
    return default_memory_remove_breakpoint (addr, contents_cache);
a2319 5
  if (GDB_MULTI_ARCH == 0)
    {
      generic_remote_translate_xfer_address (gdb_addr, gdb_len, rem_addr, rem_len);
      return;
    }
a2353 2
  if (GDB_MULTI_ARCH == 0)
    return generic_frameless_function_invocation_not (fi);
@


1.17
log
@2000-04-27  Michael Snyder  <msnyder@@seadog.cygnus.com>

        * gdbarch.sh (d10v_daddr_p, d10v_iaddr_p, d10v_convert_daddr_to_raw,
        d10v_convert_iaddr_to_raw): make these multi-arch functions optional.
        * gdbarch.c, gdbarch.h: regenerate
@
text
@d200 1
d325 1
d371 1
d584 1
d900 4
d2217 19
@


1.16
log
@Convert REG_STRUCT_HAS_ADDR to multi-arch.  Use REG_STRUCT_HAS_ADDR_P
in conversion.
@
text
@d556 4
a559 12
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_daddr_p == 0))
    internal_error ("gdbarch: verify_gdbarch: d10v_daddr_p invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_iaddr_p == 0))
    internal_error ("gdbarch: verify_gdbarch: d10v_iaddr_p invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_convert_daddr_to_raw == 0))
    internal_error ("gdbarch: verify_gdbarch: d10v_convert_daddr_to_raw invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_convert_iaddr_to_raw == 0))
    internal_error ("gdbarch: verify_gdbarch: d10v_convert_iaddr_to_raw invalid");
@


1.15
log
@* valops.c (hand_function_call): Replace #ifdef STACK_ALIGN with
run-time test for STACK_ALIGN_P.
* gdbarch.sh: Add support for function and variable predicates.
(STACK_ALIGN): Add.  Implement with predicate - STACK_ALIGN_P.
* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d217 1
d323 1
d628 1
d968 4
d2525 23
@


1.14
log
@* gdbarch.sh: Make multi-arch variable defaults, defaults for non-
multi-arch targets.
(TARGET_BFD_VMA_BIT, IEEE_FLOAT, CALL_DUMMY_WORDS,
SIZEOF_CALL_DUMMY_WORDS): Update.
* inferior.h (CALL_DUMMY_WORDS, SIZEOF_CALL_DUMMY_WORDS): Default
provided by gdbarch.
(CALL_DUMMY_P): Add FIXME. gdbarch should provide default.
* valprint.c (IEEE_FLOAT): Default provided by gdbarch.
@
text
@d216 1
d321 1
d625 1
d961 4
d2495 23
@


1.13
log
@Bring RETURN_VALUE_ON_STACK under gdbarch's control.
* gdbarch.sh (RETURN_VALUE_ON_STACK): New entry.
* gdbarch.c, gdbarch.h: Regenerated.
* arch-utils.c (default_return_value_on_stack): New function.
* arch-utils.h (default_return_value_on_stack): New declaration.
* values.c (RETURN_VALUE_ON_STACK): Delete default definition.
@
text
@a341 1
  gdbarch->ieee_float = 1;
a664 1
#ifdef IEEE_FLOAT
a667 1
#endif
d988 2
d1636 2
d1654 2
a3253 7


#if defined (CALL_DUMMY)
/* FIXME - this should go away */
LONGEST call_dummy_words[] = CALL_DUMMY;
int sizeof_call_dummy_words = sizeof (call_dummy_words);
#endif
@


1.12
log
@Only dump IEEE_FLOAT when defined.
@
text
@d181 1
d319 1
d365 1
d535 1
d825 4
d1875 19
@


1.11
log
@* remote.c (REMOTE_TRANSLATE_XFER_ADDRESS), mem-break.c
(MEMORY_INSERT_BREAKPOINT, MEMORY_REMOVE_BREAKPOINT), target.h
(BREAKPOINT_FROM_PC), valops.c (COERCE_FLOAT_TO_DOUBLE),
gdbarch.sh (D10V_MAKE_DADDR, D10V_MAKE_IADDR,
FRAMELESS_FUNCTION_INVOCATION, REGISTER_CONVERTIBLE,
REGISTER_CONVERT_TO_VIRTUAL, REGISTER_CONVERT_TO_RAW,
REGISTER_NAME), findvar.c (POINTER_TO_ADDRESS,
ADDRESS_TO_POINTER): Delete default definition.  Handled by
gdbarch.

* gdbarch.sh: Make multi-arch defaults, defaults for non-
multi-arch targets.
(REGISTER_NAME, COERCE_FLOAT_TO_DOUBLE, REGISTER_CONVERTIBLE,
REGISTER_CONVERT_TO_VIRTUAL, REGISTER_CONVERT_TO_RAW,
D10V_MAKE_DADDR, D10V_MAKE_IADDR, BREAKPOINT_FROM_PC,
MEMORY_INSERT_BREAKPOINT, MEMORY_REMOVE_BREAKPOINT,
REMOTE_TRANSLATE_XFER_ADDRESS, FRAMELESS_FUNCTION_INVOCATION):
Provide default/legacy implementation.
(REGISTER_NAMES, CALL_DUMMY): Allow legacy definition.
* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d662 1
d666 1
@


1.10
log
@Bring IEEE_FLOAT under gdbarch's control.
* gdbarch.sh (IEEE_FLOAT): New entry.
* gdbarch.c, gdbarch.h: Regenerated.
* valprint.c (IEEE_FLOAT): Provide a default #definition for this.
(print_floating): Use IEEE_FLOAT as if it were an expression; use
the code specific to IEEE-format numbers whenever the value of
IEEE_FLOAT is non-zero.
* config/a29k/tm-a29k.h, config/alpha/tm-alpha.h,
config/arc/tm-arc.h, config/arm/tm-arm.h, config/fr30/tm-fr30.h,
config/h8300/tm-h8300.h, config/i386/tm-i386.h,
config/i960/tm-i960.h, config/m88k/tm-m88k.h,
config/mips/tm-mips.h, config/pa/tm-hppa.h,
config/sparc/tm-sparc.h, config/delta/tm-delta.h,
config/frv/tm-frv.h (IEEE_FLOAT): For all ports that #define
IEEE_FLOAT, make sure they give it the value (1).
@
text
@d1319 2
d1740 2
d1776 2
d1829 2
d1848 5
d2193 2
d2212 2
d2231 2
d2284 5
d2323 2
@


1.9
log
@* gdbarch.sh (POINTER_TO_ADDRESS, ADDRESS_TO_POINTER): Two new
functions which architectures can redefine, defaulting to
generic_pointer_to_address and generic_address_to_pointer.
* findvar.c (extract_typed_address, store_typed_address,
generic_pointer_to_address, generic_address_to_pointer): New
functions.
(POINTER_TO_ADDRESS, ADDRESS_TO_POINTER): Provide default
definitions.
(extract_address, store_address): Doc fixes.
* values.c (value_as_pointer): Doc fix.
(value_from_pointer): New function.
* defs.h (extract_typed_address, store_typed_address): New
declarations.
* inferior.h (generic_address_to_pointer,
generic_pointer_to_address): New declarations.
* value.h (value_from_pointer): New declaration.

* ax-gdb.c (const_var_ref): Use value_from_pointer, not
value_from_longest.
* blockframe.c (generic_push_dummy_frame): Use read_pc and
read_sp, not read_register.
* c-valprint.c (c_val_print): Use extract_typed_address instead of
extract_address to extract vtable entries and references.
* cp-valprint.c (cp_print_value_fields): Use value_from_pointer
instead of value_from_longest to extract the vtable's address.
* eval.c (evaluate_subexp_standard): Use value_from_pointer
instead of value_from_longest to compute `this', and for doing
pointer-to-member dereferencing.
* findvar.c (read_register): Use extract_unsigned_integer, not
extract_address.
(read_var_value): Use store_typed_address instead of store_address
for building label values.
(locate_var_value): Use value_from_pointer instead of
value_from_longest.
* hppa-tdep.c (find_stub_with_shl_get): Use value_from_pointer,
instead of value_from_longest, to build arguments to __d_shl_get.
* printcmd.c (set_next_address): Use value_from_pointer, not
value_from_longest.
(x_command): Use value_from_pointer, not value_from_longest.
* tracepoint.c (set_traceframe_context): Use value_from_pointer,
not value_from_longest.
* valarith.c (value_add, value_sub): Use value_from_pointer, not
value_from_longest.
* valops.c (find_function_in_inferior, value_coerce_array,
value_coerce_function, value_addr, hand_function_call): Same.
* value.h (COERCE_REF): Use unpack_pointer, not unpack_long.
* values.c (unpack_long): Use extract_typed_address to produce
addresses from pointers and references, not extract_address.
(value_from_longest): Use store_typed_address instead of
store_address to produce pointer and reference values.
@
text
@d138 1
d277 1
d340 1
d429 1
d663 3
d1128 16
@


1.8
log
@Rename gdbarch-utils.[hc] to arch-utils.[hc]
@
text
@d178 2
d314 2
d358 2
d526 2
d804 8
d1797 34
d3146 1
@


1.7
log
@* gdbarch-utils.h, gdbarch-utils.c: New files.
* Makefile.in (SFILES, COMMON_OBS): Update.
(gdbarch_utils_h) Define.
(gdbarch-utils.o): Add dependencies.

* gdbarch.c, gdbarch.sh: Include "gdbarch-utils.h". Fix code
handling default method values.
(startup_gdbarch): Rename default_gdbarch, name misleading.
(breakpoint_from_pc): Default to legacy_breakpoint_from_pc.
(register_name): Default to legacy_register_name.
(call_dummy_words): Default to legacy_call_dummy_words.
(sizeof_call_dummy_words): Default to
legacy_sizeof_call_dummy_words.
(register_convertible): Default to
generic_register_convertible_not.
(breakpoint_from_pc): Default to legacy_breakpoint_from_pc.
(remote_translate_xfer_address): Default to
generic_remote_translate_xfer_address.
(frameless_function_invocation): Default to
generic_frameless_function_invocation_not.
@
text
@d37 1
a37 1
#include "gdbarch-utils.h"
@


1.6
log
@gdbarch cleanups.
@
text
@d37 1
d121 1
a121 1
     ``default_gdbarch()'': Append an initial value to the static
d220 1
a220 1
struct gdbarch default_gdbarch = {
d312 1
a312 1
  /* default_gdbarch() */
d314 1
a314 1
struct gdbarch *current_gdbarch = &default_gdbarch;
d338 1
d349 2
d353 2
d359 1
d361 1
d395 1
a395 3
  if ((GDB_MULTI_ARCH >= 1)
      && (0))
    internal_error ("gdbarch: verify_gdbarch: bfd_vma_bit invalid");
d450 1
a450 3
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_name == 0))
    internal_error ("gdbarch: verify_gdbarch: register_name invalid");
d502 2
d513 1
a513 3
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->coerce_float_to_double == default_coerce_float_to_double))
    internal_error ("gdbarch: verify_gdbarch: coerce_float_to_double invalid");
d517 3
a519 9
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->register_convertible == 0))
    internal_error ("gdbarch: verify_gdbarch: register_convertible invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_convert_to_virtual == 0))
    internal_error ("gdbarch: verify_gdbarch: register_convert_to_virtual invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_convert_to_raw == 0))
    internal_error ("gdbarch: verify_gdbarch: register_convert_to_raw invalid");
d535 2
a536 6
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_make_daddr == 0))
    internal_error ("gdbarch: verify_gdbarch: d10v_make_daddr invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_make_iaddr == 0))
    internal_error ("gdbarch: verify_gdbarch: d10v_make_iaddr invalid");
d573 3
a575 9
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->breakpoint_from_pc == 0))
    internal_error ("gdbarch: verify_gdbarch: breakpoint_from_pc invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (0))
    internal_error ("gdbarch: verify_gdbarch: memory_insert_breakpoint invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (0))
    internal_error ("gdbarch: verify_gdbarch: memory_remove_breakpoint invalid");
d582 1
a582 3
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->remote_translate_xfer_address == 0))
    internal_error ("gdbarch: verify_gdbarch: remote_translate_xfer_address invalid");
d586 1
a586 3
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frameless_function_invocation == 0))
    internal_error ("gdbarch: verify_gdbarch: frameless_function_invocation invalid");
d958 1
a958 2
  if (0)
    internal_error ("gdbarch: gdbarch_bfd_vma_bit invalid");
d1586 1
d1602 1
@


1.5
log
@The set debug changes
@
text
@d1 2
a22 2
/* *INDENT-OFF* */ /* ``typedef (f)();'' confuses indent */

a949 1
    /* FIXME: gdb_std??? */
a958 1
    /* FIXME: gdb_std??? */
a966 1
    /* FIXME: gdb_std??? */
a976 1
    /* FIXME: gdb_std??? */
a993 1
    /* FIXME: gdb_std??? */
a1010 1
    /* FIXME: gdb_std??? */
a1027 1
    /* FIXME: gdb_std??? */
a1044 1
    /* FIXME: gdb_std??? */
a1061 1
    /* FIXME: gdb_std??? */
a1078 1
    /* FIXME: gdb_std??? */
a1095 1
    /* FIXME: gdb_std??? */
a1112 1
    /* FIXME: gdb_std??? */
a1129 1
    /* FIXME: gdb_std??? */
a1146 1
    /* FIXME: gdb_std??? */
a1163 1
    /* FIXME: gdb_std??? */
a1180 1
    /* FIXME: gdb_std??? */
a1197 1
    /* FIXME: gdb_std??? */
a1214 1
    /* FIXME: gdb_std??? */
a1231 1
    /* FIXME: gdb_std??? */
a1248 1
    /* FIXME: gdb_std??? */
a1265 1
    /* FIXME: gdb_std??? */
a1282 1
    /* FIXME: gdb_std??? */
a1299 1
    /* FIXME: gdb_std??? */
a1316 1
    /* FIXME: gdb_std??? */
a1333 1
    /* FIXME: gdb_std??? */
a1350 1
    /* FIXME: gdb_std??? */
a1367 1
    /* FIXME: gdb_std??? */
a1384 1
    /* FIXME: gdb_std??? */
a1401 1
    /* FIXME: gdb_std??? */
a1418 1
    /* FIXME: gdb_std??? */
a1435 1
    /* FIXME: gdb_std??? */
a1452 1
    /* FIXME: gdb_std??? */
a1469 1
    /* FIXME: gdb_std??? */
a1486 1
    /* FIXME: gdb_std??? */
a1503 1
    /* FIXME: gdb_std??? */
a1520 1
    /* FIXME: gdb_std??? */
a1537 1
    /* FIXME: gdb_std??? */
a1554 1
    /* FIXME: gdb_std??? */
a1571 1
    /* FIXME: gdb_std??? */
a1588 1
    /* FIXME: gdb_std??? */
a1603 1
    /* FIXME: gdb_std??? */
a1618 1
    /* FIXME: gdb_std??? */
a1635 1
    /* FIXME: gdb_std??? */
a1652 1
    /* FIXME: gdb_std??? */
a1669 1
    /* FIXME: gdb_std??? */
a1684 1
    /* FIXME: gdb_std??? */
a1699 1
    /* FIXME: gdb_std??? */
a1716 1
    /* FIXME: gdb_std??? */
a1733 1
    /* FIXME: gdb_std??? */
a1750 1
    /* FIXME: gdb_std??? */
a1767 1
    /* FIXME: gdb_std??? */
a1784 1
    /* FIXME: gdb_std??? */
a1801 1
    /* FIXME: gdb_std??? */
a1818 1
    /* FIXME: gdb_std??? */
a1835 1
    /* FIXME: gdb_std??? */
a1852 1
    /* FIXME: gdb_std??? */
a1869 1
    /* FIXME: gdb_std??? */
a1886 1
    /* FIXME: gdb_std??? */
a1903 1
    /* FIXME: gdb_std??? */
a1920 1
    /* FIXME: gdb_std??? */
a1937 1
    /* FIXME: gdb_std??? */
a1954 1
    /* FIXME: gdb_std??? */
a1971 1
    /* FIXME: gdb_std??? */
a1988 1
    /* FIXME: gdb_std??? */
a2005 1
    /* FIXME: gdb_std??? */
a2022 1
    /* FIXME: gdb_std??? */
a2039 1
    /* FIXME: gdb_std??? */
a2056 1
    /* FIXME: gdb_std??? */
a2073 1
    /* FIXME: gdb_std??? */
a2090 1
    /* FIXME: gdb_std??? */
a2107 1
    /* FIXME: gdb_std??? */
a2124 1
    /* FIXME: gdb_std??? */
a2141 1
    /* FIXME: gdb_std??? */
a2158 1
    /* FIXME: gdb_std??? */
a2175 1
    /* FIXME: gdb_std??? */
a2192 1
    /* FIXME: gdb_std??? */
a2209 1
    /* FIXME: gdb_std??? */
a2226 1
    /* FIXME: gdb_std??? */
a2243 1
    /* FIXME: gdb_std??? */
a2260 1
    /* FIXME: gdb_std??? */
a2277 1
    /* FIXME: gdb_std??? */
a2294 1
    /* FIXME: gdb_std??? */
a2311 1
    /* FIXME: gdb_std??? */
a2328 1
    /* FIXME: gdb_std??? */
a2345 1
    /* FIXME: gdb_std??? */
a2362 1
    /* FIXME: gdb_std??? */
d3214 5
a3218 5
  c=add_set_cmd("archdebug",
		class_maintenance,
		var_zinteger,
		(char *)&gdbarch_debug,
		"Set architecture debugging.\n\
d3221 2
a3222 3
  deprecate_cmd(c,"set debug arch");
  deprecate_cmd(add_show_from_set(c,&showlist),"show debug arch");

@


1.4
log
@* gdbarch.sh: Emit a definition and declaration for gdbarch_free,
a companion to gdbarch_alloc, which allows a gdbarch init function
to free partially-built gdbarch structures.
* gdbarch.c, gdbarch.h: Regenerated.
@
text
@d3265 2
d3293 1
a3293 1
  add_show_from_set (add_set_cmd ("archdebug",
d3298 12
a3309 2
When non-zero, architecture debugging is enabled.", &setlist),
		     &showlist);
@


1.3
log
@Bring COERCE_FLOAT_TO_DOUBLE under gdbarch's control.
* valops.c (COERCE_FLOAT_TO_DOUBLE): Rework definition to be
more function-like.
(default_coerce_float_to_double, standard_coerce_float_to_double):
New functions.
(value_arg_coerce): Adjust for new definition.
* value.h (default_coerce_float_to_double,
standard_coerce_float_to_double): New declarations for the above.
* gdbarch.sh (coerce_float_to_double): New entry, replacing macro.
* gdbarch.c, gdbarch.h: Regenerated.
* tm-alpha.h, tm-fr30.h, tm-m32r.h, tm-mips.h, tm-hppa.h,
tm-rs6000.h, tm-sh.h, tm-sparc.h (COERCE_FLOAT_TO_DOUBLE): Change
definitions.
* mips-tdep.c (mips_coerce_float_to_double): Supply our own custom
function here.
(mips_gdbarch_init): Install that as our coerce_float_to_double
function.
@
text
@d360 13
@


1.2
log
@Replace ../include/wait.h with gdb_wait.h.
@
text
@d172 1
d272 1
d348 1
d494 3
d779 4
d1743 18
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/* Semi-dynamic architecture support for GDB, the GNU debugger.
   Copyright 1998, Free Software Foundation, Inc.
d4 1
a4 1
This file is part of GDB.
d6 28
a33 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a34 3
#include "defs.h"
#include "bfd.h"
#include "gdbcmd.h"
d36 2711
d2748 2
d2751 48
a2798 1
/* Non-zero if we want to trace architecture code.  */
a2799 4
#ifndef GDBARCH_DEBUG
#define GDBARCH_DEBUG 0
#endif
int gdbarch_debug = GDBARCH_DEBUG;
d2811 1
d2820 4
a2830 1
static void show_endian PARAMS ((char *, int));
d2832 1
a2832 3
show_endian (args, from_tty)
     char *args;
     int from_tty;
a2841 1
static void set_endian PARAMS ((char *, int));
d2843 1
a2843 3
set_endian (args, from_tty)
     char *args;
     int from_tty;
a2849 1
static void set_endian_big PARAMS ((char *, int));
d2851 1
a2851 3
set_endian_big (args, from_tty)
     char *args;
     int from_tty;
d2857 7
a2872 1
static void set_endian_little PARAMS ((char *, int));
d2874 1
a2874 3
set_endian_little (args, from_tty)
     char *args;
     int from_tty;
d2880 7
a2895 1
static void set_endian_auto PARAMS ((char *, int));
d2897 1
a2897 3
set_endian_auto (args, from_tty)
     char *args;
     int from_tty;
a2910 1
static void set_endian_from_file PARAMS ((bfd *));
d2912 1
a2912 2
set_endian_from_file (abfd)
     bfd *abfd;
d2944 2
d2949 14
a2962 1
int (*target_architecture_hook) PARAMS ((const struct bfd_arch_info *ap));
d2965 11
d2977 2
a2978 2
set_arch (arch)
     const struct bfd_arch_info *arch;
d2980 1
a2980 7
  /* FIXME: Is it compatible with gdb? */
  /* Check with the target on the setting */
  if (target_architecture_hook != NULL
      && !target_architecture_hook (arch))
    printf_unfiltered ("Target does not support `%s' architecture.\n",
		       arch->printable_name);
  else
d2982 4
a2985 1
      target_architecture_auto = 0;
d2987 13
d3001 2
a3005 1
static void show_architecture PARAMS ((char *, int));
d3007 1
a3007 3
show_architecture (args, from_tty)
     char *args;
     int from_tty;
a3018 1
static void set_architecture PARAMS ((char *, int));
d3020 1
a3020 3
set_architecture (args, from_tty)
     char *args;
     int from_tty;
d3030 16
d3050 1
a3050 1
	set_arch (arch);
a3056 1
static void info_architecture PARAMS ((char *, int));
d3058 1
a3058 3
info_architecture (args, from_tty)
     char *args;
     int from_tty;
d3061 30
d3116 1
a3116 1
    set_arch (wanted);
d3118 1
a3118 1
    fatal ("hardwired architecture/machine not reconized");
a3121 1
static void set_architecture_from_file PARAMS ((bfd *));
d3123 1
a3123 2
set_architecture_from_file (abfd)
     bfd *abfd;
d3128 1
a3128 5
      if (target_architecture_hook != NULL
	  && !target_architecture_hook (wanted))
	warning ("Target may not support %s architecture",
		 wanted->printable_name);
      target_architecture = wanted;
d3139 1
d3141 15
d3159 1
a3159 1
int (*tm_print_insn) PARAMS ((bfd_vma, disassemble_info *));
d3171 8
d3184 37
a3220 1
extern void _initialize_gdbarch PARAMS ((void));
a3249 1
#ifdef MAINTENANCE_CMDS
a3256 1
#endif
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d21 2
a23 16
/* Just include everything in sight so that the every old definition
   of macro is visible. */
#include "gdb_string.h"
#include <ctype.h>
#include "symtab.h"
#include "frame.h"
#include "inferior.h"
#include "breakpoint.h"
#include "wait.h"
#include "gdbcore.h"
#include "gdbcmd.h"
#include "target.h"
#include "gdbthread.h"
#include "annotate.h"
#include "symfile.h"		/* for overlay functions */
#include "symcat.h"
a42 1
#if !TARGET_BYTE_ORDER_SELECTABLE_P
a50 4
#endif
#ifndef TARGET_BYTE_ORDER_DEFAULT
#define TARGET_BYTE_ORDER_DEFAULT BIG_ENDIAN /* arbitrary */
#endif
a179 1
enum set_arch { set_arch_auto, set_arch_manual };
d181 1
a181 1
set_arch (arch, type)
a182 1
     enum set_arch type;
d184 7
a190 6
  /* FIXME: Should be performing the more basic check that the binary
     is compatible with GDB. */
  /* Check with the target that the architecture is valid. */
  int arch_valid = (target_architecture_hook != NULL
		    && !target_architecture_hook (arch));
  switch (type)
d192 1
a192 4
    case set_arch_auto:
      if (!arch_valid)
	warning ("Target may not support %s architecture",
		 arch->printable_name);
a193 13
      break;
    case set_arch_manual:
      if (!arch_valid)
	{
	  printf_unfiltered ("Target does not support `%s' architecture.\n",
			     arch->printable_name);
	}
      else
	{
	  target_architecture_auto = 0;
	  target_architecture = arch;
	}
      break;
d232 1
a232 1
	set_arch (arch, set_arch_manual);
d271 1
a271 1
    set_arch (wanted, set_arch_manual);
d285 5
a289 1
      set_arch (wanted, set_arch_auto);
a320 7
#if defined (CALL_DUMMY)
/* FIXME - this should go away */
LONGEST call_dummy_words[] = CALL_DUMMY;
int sizeof_call_dummy_words = sizeof (call_dummy_words);
#endif


d351 1
d359 1
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d2 1
a2 1
   Copyright 1998-1999, Free Software Foundation, Inc.
a198 13

static int arch_valid PARAMS ((const struct bfd_arch_info *arch));
static int
arch_ok (arch)
     const struct bfd_arch_info *arch;
{
  /* Should be performing the more basic check that the binary is
     compatible with GDB. */
  /* Check with the target that the architecture is valid. */
  return (target_architecture_hook == NULL
	  || target_architecture_hook (arch));
}

a199 1

d205 5
d213 1
a213 1
      if (!arch_ok (arch))
d219 1
a219 1
      if (!arch_ok (arch))
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@d200 1
a200 1
static int arch_ok PARAMS ((const struct bfd_arch_info *arch));
a213 1
static void set_arch PARAMS ((const struct bfd_arch_info *arch, enum set_arch type));
@


1.1.1.5
log
@import gdb-1999-06-07 snapshot
@
text
@a341 9
/* Misc helper functions for targets. */

int
frame_num_args_unknown (fi)
     struct frame_info *fi;
{
  return -1;
}

@


1.1.1.6
log
@import gdb-1999-06-14 snapshot
@
text
@a21 4
#if GDB_MULTI_ARCH
#include "gdbcmd.h"
#include "inferior.h" /* enum CALL_DUMMY_LOCATION et.al. */
#else
a36 1
#endif
d40 1
a40 2777
/* Convenience macro for allocting typesafe memory. */

#ifndef XMALLOC
#define XMALLOC(TYPE) (TYPE*) xmalloc (sizeof (TYPE))
#endif


/* Non-zero if we want to trace architecture code.  */

#ifndef GDBARCH_DEBUG
#define GDBARCH_DEBUG 0
#endif
int gdbarch_debug = GDBARCH_DEBUG;


/* Maintain the struct gdbarch object */

struct gdbarch
{
  /* basic architectural information */
  const struct bfd_arch_info * bfd_arch_info;
  int byte_order;

  /* target specific vector. */
  struct gdbarch_tdep *tdep;

  /* per-architecture data-pointers */
  int nr_data;
  void **data;

  /* per-architecture swap-regions */
  struct gdbarch_swap *swap;

  /* Multi-arch values.

     When extending this structure you must:

     Add the field below.

     Declare set/get functions and define the corresponding
     macro in gdbarch.h.

     gdbarch_alloc(): If zero/NULL is not a suitable default,
     initialize the new field.

     verify_gdbarch(): Confirm that the target updated the field
     correctly.

     gdbarch_dump(): Add a fprintf_unfiltered call to so that the new
     field is dumped out

     ``default_gdbarch()'': Append an initial value to the static
     variable (base values on the host's c-type system).

     get_gdbarch(): Implement the set/get functions (probably using
     the macro's as shortcuts).

     */

  int ptr_bit;
  int short_bit;
  int int_bit;
  int long_bit;
  int long_long_bit;
  int float_bit;
  int double_bit;
  int long_double_bit;
  gdbarch_read_pc_ftype *read_pc;
  gdbarch_write_pc_ftype *write_pc;
  gdbarch_read_fp_ftype *read_fp;
  gdbarch_write_fp_ftype *write_fp;
  gdbarch_read_sp_ftype *read_sp;
  gdbarch_write_sp_ftype *write_sp;
  int num_regs;
  int sp_regnum;
  int fp_regnum;
  int pc_regnum;
  gdbarch_register_name_ftype *register_name;
  int register_size;
  int register_bytes;
  gdbarch_register_byte_ftype *register_byte;
  gdbarch_register_raw_size_ftype *register_raw_size;
  int max_register_raw_size;
  gdbarch_register_virtual_size_ftype *register_virtual_size;
  int max_register_virtual_size;
  gdbarch_register_virtual_type_ftype *register_virtual_type;
  int use_generic_dummy_frames;
  int call_dummy_location;
  gdbarch_call_dummy_address_ftype *call_dummy_address;
  CORE_ADDR call_dummy_start_offset;
  CORE_ADDR call_dummy_breakpoint_offset;
  int call_dummy_breakpoint_offset_p;
  int call_dummy_length;
  gdbarch_pc_in_call_dummy_ftype *pc_in_call_dummy;
  int call_dummy_p;
  LONGEST * call_dummy_words;
  int sizeof_call_dummy_words;
  int call_dummy_stack_adjust_p;
  int call_dummy_stack_adjust;
  gdbarch_fix_call_dummy_ftype *fix_call_dummy;
  int believe_pcc_promotion;
  int believe_pcc_promotion_type;
  gdbarch_get_saved_register_ftype *get_saved_register;
  gdbarch_register_convertible_ftype *register_convertible;
  gdbarch_register_convert_to_virtual_ftype *register_convert_to_virtual;
  gdbarch_register_convert_to_raw_ftype *register_convert_to_raw;
  gdbarch_extract_return_value_ftype *extract_return_value;
  gdbarch_push_arguments_ftype *push_arguments;
  gdbarch_push_dummy_frame_ftype *push_dummy_frame;
  gdbarch_push_return_address_ftype *push_return_address;
  gdbarch_pop_frame_ftype *pop_frame;
  gdbarch_d10v_make_daddr_ftype *d10v_make_daddr;
  gdbarch_d10v_make_iaddr_ftype *d10v_make_iaddr;
  gdbarch_d10v_daddr_p_ftype *d10v_daddr_p;
  gdbarch_d10v_iaddr_p_ftype *d10v_iaddr_p;
  gdbarch_d10v_convert_daddr_to_raw_ftype *d10v_convert_daddr_to_raw;
  gdbarch_d10v_convert_iaddr_to_raw_ftype *d10v_convert_iaddr_to_raw;
  gdbarch_store_struct_return_ftype *store_struct_return;
  gdbarch_store_return_value_ftype *store_return_value;
  gdbarch_extract_struct_value_address_ftype *extract_struct_value_address;
  gdbarch_use_struct_convention_ftype *use_struct_convention;
  gdbarch_frame_init_saved_regs_ftype *frame_init_saved_regs;
  gdbarch_init_extra_frame_info_ftype *init_extra_frame_info;
  gdbarch_skip_prologue_ftype *skip_prologue;
  gdbarch_inner_than_ftype *inner_than;
  gdbarch_breakpoint_from_pc_ftype *breakpoint_from_pc;
  CORE_ADDR decr_pc_after_break;
  CORE_ADDR function_start_offset;
  gdbarch_remote_translate_xfer_address_ftype *remote_translate_xfer_address;
  CORE_ADDR frame_args_skip;
  gdbarch_frameless_function_invocation_ftype *frameless_function_invocation;
  gdbarch_frame_chain_ftype *frame_chain;
  gdbarch_frame_chain_valid_ftype *frame_chain_valid;
  gdbarch_frame_saved_pc_ftype *frame_saved_pc;
  gdbarch_frame_args_address_ftype *frame_args_address;
  gdbarch_frame_locals_address_ftype *frame_locals_address;
  gdbarch_saved_pc_after_call_ftype *saved_pc_after_call;
  gdbarch_frame_num_args_ftype *frame_num_args;
};


/* The default architecture uses host values (for want of a better
   choice). */

extern const struct bfd_arch_info bfd_default_arch_struct;

struct gdbarch default_gdbarch = {
  /* basic architecture information */
  &bfd_default_arch_struct,
  BIG_ENDIAN,
  /* target specific vector */
  NULL,
  /*per-architecture data-pointers and swap regions */
  0, NULL, NULL,
  /* Multi-arch values */
  8 * sizeof (void*),
  8 * sizeof (short),
  8 * sizeof (int),
  8 * sizeof (long),
  8 * sizeof (LONGEST),
  8 * sizeof (float),
  8 * sizeof (double),
  8 * sizeof (long double),
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  generic_get_saved_register,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  /* default_gdbarch() */
};
struct gdbarch *current_gdbarch = &default_gdbarch;


/* Create a new ``struct gdbarch'' based in information provided by
   ``struct gdbarch_info''. */

struct gdbarch *
gdbarch_alloc (info, tdep)
     const struct gdbarch_info *info;
     struct gdbarch_tdep *tdep;
{
  struct gdbarch *gdbarch = XMALLOC (struct gdbarch);
  memset (gdbarch, 0, sizeof (*gdbarch));

  gdbarch->tdep = tdep;

  gdbarch->bfd_arch_info = info->bfd_arch_info;
  gdbarch->byte_order = info->byte_order;

  /* Force the explicit initialization of these. */
  gdbarch->num_regs = -1;
  gdbarch->sp_regnum = -1;
  gdbarch->fp_regnum = -1;
  gdbarch->pc_regnum = -1;
  gdbarch->register_size = -1;
  gdbarch->register_bytes = -1;
  gdbarch->max_register_raw_size = -1;
  gdbarch->max_register_virtual_size = -1;
  gdbarch->use_generic_dummy_frames = -1;
  gdbarch->call_dummy_start_offset = -1;
  gdbarch->call_dummy_breakpoint_offset = -1;
  gdbarch->call_dummy_breakpoint_offset_p = -1;
  gdbarch->call_dummy_length = -1;
  gdbarch->call_dummy_p = -1;
  gdbarch->call_dummy_stack_adjust_p = -1;
  gdbarch->decr_pc_after_break = -1;
  gdbarch->function_start_offset = -1;
  gdbarch->frame_args_skip = -1;
  /* gdbarch_alloc() */

  return gdbarch;
}


/* Ensure that all values in a GDBARCH are reasonable. */

static void verify_gdbarch PARAMS ((struct gdbarch *gdbarch));
static void
verify_gdbarch (gdbarch)
     struct gdbarch *gdbarch;
{
  /* Only perform sanity checks on a multi-arch target. */
  if (GDB_MULTI_ARCH <= 0)
    return;
  /* fundamental */
  if (gdbarch->byte_order == 0)
    fatal ("verify_gdbarch: byte-order unset");
  if (gdbarch->bfd_arch_info == NULL)
    fatal ("verify_gdbarch: bfd_arch_info unset");
  /* Check those that need to be defined for the given multi-arch level. */
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->ptr_bit == 0))
    fatal ("gdbarch: verify_gdbarch: ptr_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->short_bit == 0))
    fatal ("gdbarch: verify_gdbarch: short_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->int_bit == 0))
    fatal ("gdbarch: verify_gdbarch: int_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->long_bit == 0))
    fatal ("gdbarch: verify_gdbarch: long_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->long_long_bit == 0))
    fatal ("gdbarch: verify_gdbarch: long_long_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->float_bit == 0))
    fatal ("gdbarch: verify_gdbarch: float_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->double_bit == 0))
    fatal ("gdbarch: verify_gdbarch: double_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->long_double_bit == 0))
    fatal ("gdbarch: verify_gdbarch: long_double_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->read_pc == 0))
    fatal ("gdbarch: verify_gdbarch: read_pc invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->write_pc == 0))
    fatal ("gdbarch: verify_gdbarch: write_pc invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->read_fp == 0))
    fatal ("gdbarch: verify_gdbarch: read_fp invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->write_fp == 0))
    fatal ("gdbarch: verify_gdbarch: write_fp invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->read_sp == 0))
    fatal ("gdbarch: verify_gdbarch: read_sp invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->write_sp == 0))
    fatal ("gdbarch: verify_gdbarch: write_sp invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->num_regs == -1))
    fatal ("gdbarch: verify_gdbarch: num_regs invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->sp_regnum == -1))
    fatal ("gdbarch: verify_gdbarch: sp_regnum invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->fp_regnum == -1))
    fatal ("gdbarch: verify_gdbarch: fp_regnum invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->pc_regnum == -1))
    fatal ("gdbarch: verify_gdbarch: pc_regnum invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_name == 0))
    fatal ("gdbarch: verify_gdbarch: register_name invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_size == -1))
    fatal ("gdbarch: verify_gdbarch: register_size invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_bytes == -1))
    fatal ("gdbarch: verify_gdbarch: register_bytes invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_byte == 0))
    fatal ("gdbarch: verify_gdbarch: register_byte invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_raw_size == 0))
    fatal ("gdbarch: verify_gdbarch: register_raw_size invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->max_register_raw_size == -1))
    fatal ("gdbarch: verify_gdbarch: max_register_raw_size invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_virtual_size == 0))
    fatal ("gdbarch: verify_gdbarch: register_virtual_size invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->max_register_virtual_size == -1))
    fatal ("gdbarch: verify_gdbarch: max_register_virtual_size invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_virtual_type == 0))
    fatal ("gdbarch: verify_gdbarch: register_virtual_type invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->use_generic_dummy_frames == -1))
    fatal ("gdbarch: verify_gdbarch: use_generic_dummy_frames invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->call_dummy_location == 0))
    fatal ("gdbarch: verify_gdbarch: call_dummy_location invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->call_dummy_location == AT_ENTRY_POINT && gdbarch->call_dummy_address == 0))
    fatal ("gdbarch: verify_gdbarch: call_dummy_address invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->call_dummy_start_offset == -1))
    fatal ("gdbarch: verify_gdbarch: call_dummy_start_offset invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->call_dummy_breakpoint_offset == -1))
    fatal ("gdbarch: verify_gdbarch: call_dummy_breakpoint_offset invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->call_dummy_breakpoint_offset_p == -1))
    fatal ("gdbarch: verify_gdbarch: call_dummy_breakpoint_offset_p invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->call_dummy_length == -1))
    fatal ("gdbarch: verify_gdbarch: call_dummy_length invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->pc_in_call_dummy == 0))
    fatal ("gdbarch: verify_gdbarch: pc_in_call_dummy invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->call_dummy_p == -1))
    fatal ("gdbarch: verify_gdbarch: call_dummy_p invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->call_dummy_stack_adjust_p == -1))
    fatal ("gdbarch: verify_gdbarch: call_dummy_stack_adjust_p invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->call_dummy_stack_adjust_p && gdbarch->call_dummy_stack_adjust == 0))
    fatal ("gdbarch: verify_gdbarch: call_dummy_stack_adjust invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->fix_call_dummy == 0))
    fatal ("gdbarch: verify_gdbarch: fix_call_dummy invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->get_saved_register == 0))
    fatal ("gdbarch: verify_gdbarch: get_saved_register invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->register_convertible == 0))
    fatal ("gdbarch: verify_gdbarch: register_convertible invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_convert_to_virtual == 0))
    fatal ("gdbarch: verify_gdbarch: register_convert_to_virtual invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->register_convert_to_raw == 0))
    fatal ("gdbarch: verify_gdbarch: register_convert_to_raw invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->extract_return_value == 0))
    fatal ("gdbarch: verify_gdbarch: extract_return_value invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->push_arguments == 0))
    fatal ("gdbarch: verify_gdbarch: push_arguments invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->push_dummy_frame == 0))
    fatal ("gdbarch: verify_gdbarch: push_dummy_frame invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->push_return_address == 0))
    fatal ("gdbarch: verify_gdbarch: push_return_address invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->pop_frame == 0))
    fatal ("gdbarch: verify_gdbarch: pop_frame invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_make_daddr == 0))
    fatal ("gdbarch: verify_gdbarch: d10v_make_daddr invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_make_iaddr == 0))
    fatal ("gdbarch: verify_gdbarch: d10v_make_iaddr invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_daddr_p == 0))
    fatal ("gdbarch: verify_gdbarch: d10v_daddr_p invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_iaddr_p == 0))
    fatal ("gdbarch: verify_gdbarch: d10v_iaddr_p invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_convert_daddr_to_raw == 0))
    fatal ("gdbarch: verify_gdbarch: d10v_convert_daddr_to_raw invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->d10v_convert_iaddr_to_raw == 0))
    fatal ("gdbarch: verify_gdbarch: d10v_convert_iaddr_to_raw invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->store_struct_return == 0))
    fatal ("gdbarch: verify_gdbarch: store_struct_return invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->store_return_value == 0))
    fatal ("gdbarch: verify_gdbarch: store_return_value invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->extract_struct_value_address == 0))
    fatal ("gdbarch: verify_gdbarch: extract_struct_value_address invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->use_struct_convention == 0))
    fatal ("gdbarch: verify_gdbarch: use_struct_convention invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frame_init_saved_regs == 0))
    fatal ("gdbarch: verify_gdbarch: frame_init_saved_regs invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->init_extra_frame_info == 0))
    fatal ("gdbarch: verify_gdbarch: init_extra_frame_info invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->skip_prologue == 0))
    fatal ("gdbarch: verify_gdbarch: skip_prologue invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->inner_than == 0))
    fatal ("gdbarch: verify_gdbarch: inner_than invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->breakpoint_from_pc == 0))
    fatal ("gdbarch: verify_gdbarch: breakpoint_from_pc invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->decr_pc_after_break == -1))
    fatal ("gdbarch: verify_gdbarch: decr_pc_after_break invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->function_start_offset == -1))
    fatal ("gdbarch: verify_gdbarch: function_start_offset invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->remote_translate_xfer_address == 0))
    fatal ("gdbarch: verify_gdbarch: remote_translate_xfer_address invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frame_args_skip == -1))
    fatal ("gdbarch: verify_gdbarch: frame_args_skip invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frameless_function_invocation == 0))
    fatal ("gdbarch: verify_gdbarch: frameless_function_invocation invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frame_chain == 0))
    fatal ("gdbarch: verify_gdbarch: frame_chain invalid");
  if ((GDB_MULTI_ARCH >= 1)
      && (gdbarch->frame_chain_valid == 0))
    fatal ("gdbarch: verify_gdbarch: frame_chain_valid invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frame_saved_pc == 0))
    fatal ("gdbarch: verify_gdbarch: frame_saved_pc invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frame_args_address == 0))
    fatal ("gdbarch: verify_gdbarch: frame_args_address invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frame_locals_address == 0))
    fatal ("gdbarch: verify_gdbarch: frame_locals_address invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->saved_pc_after_call == 0))
    fatal ("gdbarch: verify_gdbarch: saved_pc_after_call invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (gdbarch->frame_num_args == 0))
    fatal ("gdbarch: verify_gdbarch: frame_num_args invalid");
}


/* Print out the details of the current architecture. */

void
gdbarch_dump ()
{
  if (TARGET_ARCHITECTURE != NULL)
    fprintf_unfiltered (gdb_stdlog,
                        "gdbarch_update: TARGET_ARCHITECTURE = %s\n",
                        TARGET_ARCHITECTURE->printable_name);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_BYTE_ORDER = %ld\n",
                      (long) TARGET_BYTE_ORDER);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_PTR_BIT = %ld\n",
                      (long) TARGET_PTR_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_SHORT_BIT = %ld\n",
                      (long) TARGET_SHORT_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_INT_BIT = %ld\n",
                      (long) TARGET_INT_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_LONG_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_LONG_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_FLOAT_BIT = %ld\n",
                      (long) TARGET_FLOAT_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_DOUBLE_BIT = %ld\n",
                      (long) TARGET_DOUBLE_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_LONG_DOUBLE_BIT = %ld\n",
                      (long) TARGET_LONG_DOUBLE_BIT);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_READ_PC = 0x%08lx\n",
                      (long) current_gdbarch->read_pc
                      /*TARGET_READ_PC ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_WRITE_PC = 0x%08lx\n",
                      (long) current_gdbarch->write_pc
                      /*TARGET_WRITE_PC ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_READ_FP = 0x%08lx\n",
                      (long) current_gdbarch->read_fp
                      /*TARGET_READ_FP ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_WRITE_FP = 0x%08lx\n",
                      (long) current_gdbarch->write_fp
                      /*TARGET_WRITE_FP ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_READ_SP = 0x%08lx\n",
                      (long) current_gdbarch->read_sp
                      /*TARGET_READ_SP ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: TARGET_WRITE_SP = 0x%08lx\n",
                      (long) current_gdbarch->write_sp
                      /*TARGET_WRITE_SP ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: NUM_REGS = %ld\n",
                      (long) NUM_REGS);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SP_REGNUM = %ld\n",
                      (long) SP_REGNUM);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FP_REGNUM = %ld\n",
                      (long) FP_REGNUM);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PC_REGNUM = %ld\n",
                      (long) PC_REGNUM);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_NAME = 0x%08lx\n",
                      (long) current_gdbarch->register_name
                      /*REGISTER_NAME ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_SIZE = %ld\n",
                      (long) REGISTER_SIZE);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_BYTES = %ld\n",
                      (long) REGISTER_BYTES);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_BYTE = 0x%08lx\n",
                      (long) current_gdbarch->register_byte
                      /*REGISTER_BYTE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_RAW_SIZE = 0x%08lx\n",
                      (long) current_gdbarch->register_raw_size
                      /*REGISTER_RAW_SIZE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: MAX_REGISTER_RAW_SIZE = %ld\n",
                      (long) MAX_REGISTER_RAW_SIZE);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_VIRTUAL_SIZE = 0x%08lx\n",
                      (long) current_gdbarch->register_virtual_size
                      /*REGISTER_VIRTUAL_SIZE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: MAX_REGISTER_VIRTUAL_SIZE = %ld\n",
                      (long) MAX_REGISTER_VIRTUAL_SIZE);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_VIRTUAL_TYPE = 0x%08lx\n",
                      (long) current_gdbarch->register_virtual_type
                      /*REGISTER_VIRTUAL_TYPE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: USE_GENERIC_DUMMY_FRAMES = %ld\n",
                      (long) USE_GENERIC_DUMMY_FRAMES);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_LOCATION = %ld\n",
                      (long) CALL_DUMMY_LOCATION);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->call_dummy_address
                      /*CALL_DUMMY_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_START_OFFSET = 0x%08lx\n",
                      (long) CALL_DUMMY_START_OFFSET);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET_P = %ld\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET_P);
  if (CALL_DUMMY_LOCATION == BEFORE_TEXT_END || CALL_DUMMY_LOCATION == AFTER_TEXT_END)
    fprintf_unfiltered (gdb_stdlog,
                        "gdbarch_update: CALL_DUMMY_LENGTH = %ld\n",
                        (long) CALL_DUMMY_LENGTH);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PC_IN_CALL_DUMMY = 0x%08lx\n",
                      (long) current_gdbarch->pc_in_call_dummy
                      /*PC_IN_CALL_DUMMY ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_P = %ld\n",
                      (long) CALL_DUMMY_P);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) CALL_DUMMY_WORDS);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SIZEOF_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) SIZEOF_CALL_DUMMY_WORDS);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: CALL_DUMMY_STACK_ADJUST_P = 0x%08lx\n",
                      (long) CALL_DUMMY_STACK_ADJUST_P);
  if (CALL_DUMMY_STACK_ADJUST_P)
    fprintf_unfiltered (gdb_stdlog,
                        "gdbarch_update: CALL_DUMMY_STACK_ADJUST = 0x%08lx\n",
                        (long) CALL_DUMMY_STACK_ADJUST);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FIX_CALL_DUMMY = 0x%08lx\n",
                      (long) current_gdbarch->fix_call_dummy
                      /*FIX_CALL_DUMMY ()*/);
#ifdef BELIEVE_PCC_PROMOTION
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: BELIEVE_PCC_PROMOTION = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION);
#endif
#ifdef BELIEVE_PCC_PROMOTION_TYPE
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: BELIEVE_PCC_PROMOTION_TYPE = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION_TYPE);
#endif
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: GET_SAVED_REGISTER = 0x%08lx\n",
                      (long) current_gdbarch->get_saved_register
                      /*GET_SAVED_REGISTER ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERTIBLE = 0x%08lx\n",
                      (long) current_gdbarch->register_convertible
                      /*REGISTER_CONVERTIBLE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERT_TO_VIRTUAL = 0x%08lx\n",
                      (long) current_gdbarch->register_convert_to_virtual
                      /*REGISTER_CONVERT_TO_VIRTUAL ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERT_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->register_convert_to_raw
                      /*REGISTER_CONVERT_TO_RAW ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: EXTRACT_RETURN_VALUE = 0x%08lx\n",
                      (long) current_gdbarch->extract_return_value
                      /*EXTRACT_RETURN_VALUE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_ARGUMENTS = 0x%08lx\n",
                      (long) current_gdbarch->push_arguments
                      /*PUSH_ARGUMENTS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_DUMMY_FRAME = 0x%08lx\n",
                      (long) current_gdbarch->push_dummy_frame
                      /*PUSH_DUMMY_FRAME ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_RETURN_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->push_return_address
                      /*PUSH_RETURN_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: POP_FRAME = 0x%08lx\n",
                      (long) current_gdbarch->pop_frame
                      /*POP_FRAME ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_MAKE_DADDR = 0x%08lx\n",
                      (long) current_gdbarch->d10v_make_daddr
                      /*D10V_MAKE_DADDR ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_MAKE_IADDR = 0x%08lx\n",
                      (long) current_gdbarch->d10v_make_iaddr
                      /*D10V_MAKE_IADDR ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_DADDR_P = 0x%08lx\n",
                      (long) current_gdbarch->d10v_daddr_p
                      /*D10V_DADDR_P ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_IADDR_P = 0x%08lx\n",
                      (long) current_gdbarch->d10v_iaddr_p
                      /*D10V_IADDR_P ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_CONVERT_DADDR_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->d10v_convert_daddr_to_raw
                      /*D10V_CONVERT_DADDR_TO_RAW ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_CONVERT_IADDR_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->d10v_convert_iaddr_to_raw
                      /*D10V_CONVERT_IADDR_TO_RAW ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: STORE_STRUCT_RETURN = 0x%08lx\n",
                      (long) current_gdbarch->store_struct_return
                      /*STORE_STRUCT_RETURN ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: STORE_RETURN_VALUE = 0x%08lx\n",
                      (long) current_gdbarch->store_return_value
                      /*STORE_RETURN_VALUE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->extract_struct_value_address
                      /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: USE_STRUCT_CONVENTION = 0x%08lx\n",
                      (long) current_gdbarch->use_struct_convention
                      /*USE_STRUCT_CONVENTION ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_INIT_SAVED_REGS = 0x%08lx\n",
                      (long) current_gdbarch->frame_init_saved_regs
                      /*FRAME_INIT_SAVED_REGS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: INIT_EXTRA_FRAME_INFO = 0x%08lx\n",
                      (long) current_gdbarch->init_extra_frame_info
                      /*INIT_EXTRA_FRAME_INFO ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SKIP_PROLOGUE = 0x%08lx\n",
                      (long) current_gdbarch->skip_prologue
                      /*SKIP_PROLOGUE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: INNER_THAN = 0x%08lx\n",
                      (long) current_gdbarch->inner_than
                      /*INNER_THAN ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: BREAKPOINT_FROM_PC = 0x%08lx\n",
                      (long) current_gdbarch->breakpoint_from_pc
                      /*BREAKPOINT_FROM_PC ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: DECR_PC_AFTER_BREAK = %ld\n",
                      (long) DECR_PC_AFTER_BREAK);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FUNCTION_START_OFFSET = %ld\n",
                      (long) FUNCTION_START_OFFSET);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REMOTE_TRANSLATE_XFER_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->remote_translate_xfer_address
                      /*REMOTE_TRANSLATE_XFER_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_ARGS_SKIP = %ld\n",
                      (long) FRAME_ARGS_SKIP);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
                      (long) current_gdbarch->frameless_function_invocation
                      /*FRAMELESS_FUNCTION_INVOCATION ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_CHAIN = 0x%08lx\n",
                      (long) current_gdbarch->frame_chain
                      /*FRAME_CHAIN ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_CHAIN_VALID = 0x%08lx\n",
                      (long) current_gdbarch->frame_chain_valid
                      /*FRAME_CHAIN_VALID ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_SAVED_PC = 0x%08lx\n",
                      (long) current_gdbarch->frame_saved_pc
                      /*FRAME_SAVED_PC ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_ARGS_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->frame_args_address
                      /*FRAME_ARGS_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_LOCALS_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->frame_locals_address
                      /*FRAME_LOCALS_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SAVED_PC_AFTER_CALL = 0x%08lx\n",
                      (long) current_gdbarch->saved_pc_after_call
                      /*SAVED_PC_AFTER_CALL ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_NUM_ARGS = 0x%08lx\n",
                      (long) current_gdbarch->frame_num_args
                      /*FRAME_NUM_ARGS ()*/);
}

struct gdbarch_tdep *
gdbarch_tdep (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_tdep called\n");
  return gdbarch->tdep;
}


const struct bfd_arch_info *
gdbarch_bfd_arch_info (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_arch_info called\n");
  return gdbarch->bfd_arch_info;
}

int
gdbarch_byte_order (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_byte_order called\n");
  return gdbarch->byte_order;
}

int
gdbarch_ptr_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->ptr_bit == 0)
    fatal ("gdbarch: gdbarch_ptr_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_ptr_bit called\n");
  return gdbarch->ptr_bit;
}

void
set_gdbarch_ptr_bit (gdbarch, ptr_bit)
    struct gdbarch *gdbarch;
    int ptr_bit;
{
  gdbarch->ptr_bit = ptr_bit;
}

int
gdbarch_short_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->short_bit == 0)
    fatal ("gdbarch: gdbarch_short_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_short_bit called\n");
  return gdbarch->short_bit;
}

void
set_gdbarch_short_bit (gdbarch, short_bit)
    struct gdbarch *gdbarch;
    int short_bit;
{
  gdbarch->short_bit = short_bit;
}

int
gdbarch_int_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->int_bit == 0)
    fatal ("gdbarch: gdbarch_int_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_int_bit called\n");
  return gdbarch->int_bit;
}

void
set_gdbarch_int_bit (gdbarch, int_bit)
    struct gdbarch *gdbarch;
    int int_bit;
{
  gdbarch->int_bit = int_bit;
}

int
gdbarch_long_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->long_bit == 0)
    fatal ("gdbarch: gdbarch_long_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_bit called\n");
  return gdbarch->long_bit;
}

void
set_gdbarch_long_bit (gdbarch, long_bit)
    struct gdbarch *gdbarch;
    int long_bit;
{
  gdbarch->long_bit = long_bit;
}

int
gdbarch_long_long_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->long_long_bit == 0)
    fatal ("gdbarch: gdbarch_long_long_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_long_bit called\n");
  return gdbarch->long_long_bit;
}

void
set_gdbarch_long_long_bit (gdbarch, long_long_bit)
    struct gdbarch *gdbarch;
    int long_long_bit;
{
  gdbarch->long_long_bit = long_long_bit;
}

int
gdbarch_float_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->float_bit == 0)
    fatal ("gdbarch: gdbarch_float_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_float_bit called\n");
  return gdbarch->float_bit;
}

void
set_gdbarch_float_bit (gdbarch, float_bit)
    struct gdbarch *gdbarch;
    int float_bit;
{
  gdbarch->float_bit = float_bit;
}

int
gdbarch_double_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->double_bit == 0)
    fatal ("gdbarch: gdbarch_double_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_double_bit called\n");
  return gdbarch->double_bit;
}

void
set_gdbarch_double_bit (gdbarch, double_bit)
    struct gdbarch *gdbarch;
    int double_bit;
{
  gdbarch->double_bit = double_bit;
}

int
gdbarch_long_double_bit (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->long_double_bit == 0)
    fatal ("gdbarch: gdbarch_long_double_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_double_bit called\n");
  return gdbarch->long_double_bit;
}

void
set_gdbarch_long_double_bit (gdbarch, long_double_bit)
    struct gdbarch *gdbarch;
    int long_double_bit;
{
  gdbarch->long_double_bit = long_double_bit;
}

CORE_ADDR
gdbarch_read_pc (struct gdbarch *gdbarch, int pid)
{
  if (gdbarch->read_pc == 0)
    fatal ("gdbarch: gdbarch_read_pc invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_pc called\n");
  return gdbarch->read_pc (pid);
}

void
set_gdbarch_read_pc (gdbarch, read_pc)
    struct gdbarch *gdbarch;
    gdbarch_read_pc_ftype read_pc;
{
  gdbarch->read_pc = read_pc;
}

void
gdbarch_write_pc (struct gdbarch *gdbarch, CORE_ADDR val, int pid)
{
  if (gdbarch->write_pc == 0)
    fatal ("gdbarch: gdbarch_write_pc invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_write_pc called\n");
  gdbarch->write_pc (val, pid);
}

void
set_gdbarch_write_pc (gdbarch, write_pc)
    struct gdbarch *gdbarch;
    gdbarch_write_pc_ftype write_pc;
{
  gdbarch->write_pc = write_pc;
}

CORE_ADDR
gdbarch_read_fp (struct gdbarch *gdbarch)
{
  if (gdbarch->read_fp == 0)
    fatal ("gdbarch: gdbarch_read_fp invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_fp called\n");
  return gdbarch->read_fp ();
}

void
set_gdbarch_read_fp (gdbarch, read_fp)
    struct gdbarch *gdbarch;
    gdbarch_read_fp_ftype read_fp;
{
  gdbarch->read_fp = read_fp;
}

void
gdbarch_write_fp (struct gdbarch *gdbarch, CORE_ADDR val)
{
  if (gdbarch->write_fp == 0)
    fatal ("gdbarch: gdbarch_write_fp invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_write_fp called\n");
  gdbarch->write_fp (val);
}

void
set_gdbarch_write_fp (gdbarch, write_fp)
    struct gdbarch *gdbarch;
    gdbarch_write_fp_ftype write_fp;
{
  gdbarch->write_fp = write_fp;
}

CORE_ADDR
gdbarch_read_sp (struct gdbarch *gdbarch)
{
  if (gdbarch->read_sp == 0)
    fatal ("gdbarch: gdbarch_read_sp invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_read_sp called\n");
  return gdbarch->read_sp ();
}

void
set_gdbarch_read_sp (gdbarch, read_sp)
    struct gdbarch *gdbarch;
    gdbarch_read_sp_ftype read_sp;
{
  gdbarch->read_sp = read_sp;
}

void
gdbarch_write_sp (struct gdbarch *gdbarch, CORE_ADDR val)
{
  if (gdbarch->write_sp == 0)
    fatal ("gdbarch: gdbarch_write_sp invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_write_sp called\n");
  gdbarch->write_sp (val);
}

void
set_gdbarch_write_sp (gdbarch, write_sp)
    struct gdbarch *gdbarch;
    gdbarch_write_sp_ftype write_sp;
{
  gdbarch->write_sp = write_sp;
}

int
gdbarch_num_regs (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->num_regs == -1)
    fatal ("gdbarch: gdbarch_num_regs invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_num_regs called\n");
  return gdbarch->num_regs;
}

void
set_gdbarch_num_regs (gdbarch, num_regs)
    struct gdbarch *gdbarch;
    int num_regs;
{
  gdbarch->num_regs = num_regs;
}

int
gdbarch_sp_regnum (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->sp_regnum == -1)
    fatal ("gdbarch: gdbarch_sp_regnum invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sp_regnum called\n");
  return gdbarch->sp_regnum;
}

void
set_gdbarch_sp_regnum (gdbarch, sp_regnum)
    struct gdbarch *gdbarch;
    int sp_regnum;
{
  gdbarch->sp_regnum = sp_regnum;
}

int
gdbarch_fp_regnum (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->fp_regnum == -1)
    fatal ("gdbarch: gdbarch_fp_regnum invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fp_regnum called\n");
  return gdbarch->fp_regnum;
}

void
set_gdbarch_fp_regnum (gdbarch, fp_regnum)
    struct gdbarch *gdbarch;
    int fp_regnum;
{
  gdbarch->fp_regnum = fp_regnum;
}

int
gdbarch_pc_regnum (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->pc_regnum == -1)
    fatal ("gdbarch: gdbarch_pc_regnum invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pc_regnum called\n");
  return gdbarch->pc_regnum;
}

void
set_gdbarch_pc_regnum (gdbarch, pc_regnum)
    struct gdbarch *gdbarch;
    int pc_regnum;
{
  gdbarch->pc_regnum = pc_regnum;
}

char *
gdbarch_register_name (struct gdbarch *gdbarch, int regnr)
{
  if (gdbarch->register_name == 0)
    fatal ("gdbarch: gdbarch_register_name invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_name called\n");
  return gdbarch->register_name (regnr);
}

void
set_gdbarch_register_name (gdbarch, register_name)
    struct gdbarch *gdbarch;
    gdbarch_register_name_ftype register_name;
{
  gdbarch->register_name = register_name;
}

int
gdbarch_register_size (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->register_size == -1)
    fatal ("gdbarch: gdbarch_register_size invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_size called\n");
  return gdbarch->register_size;
}

void
set_gdbarch_register_size (gdbarch, register_size)
    struct gdbarch *gdbarch;
    int register_size;
{
  gdbarch->register_size = register_size;
}

int
gdbarch_register_bytes (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->register_bytes == -1)
    fatal ("gdbarch: gdbarch_register_bytes invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_bytes called\n");
  return gdbarch->register_bytes;
}

void
set_gdbarch_register_bytes (gdbarch, register_bytes)
    struct gdbarch *gdbarch;
    int register_bytes;
{
  gdbarch->register_bytes = register_bytes;
}

int
gdbarch_register_byte (struct gdbarch *gdbarch, int reg_nr)
{
  if (gdbarch->register_byte == 0)
    fatal ("gdbarch: gdbarch_register_byte invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_byte called\n");
  return gdbarch->register_byte (reg_nr);
}

void
set_gdbarch_register_byte (gdbarch, register_byte)
    struct gdbarch *gdbarch;
    gdbarch_register_byte_ftype register_byte;
{
  gdbarch->register_byte = register_byte;
}

int
gdbarch_register_raw_size (struct gdbarch *gdbarch, int reg_nr)
{
  if (gdbarch->register_raw_size == 0)
    fatal ("gdbarch: gdbarch_register_raw_size invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_raw_size called\n");
  return gdbarch->register_raw_size (reg_nr);
}

void
set_gdbarch_register_raw_size (gdbarch, register_raw_size)
    struct gdbarch *gdbarch;
    gdbarch_register_raw_size_ftype register_raw_size;
{
  gdbarch->register_raw_size = register_raw_size;
}

int
gdbarch_max_register_raw_size (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->max_register_raw_size == -1)
    fatal ("gdbarch: gdbarch_max_register_raw_size invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_max_register_raw_size called\n");
  return gdbarch->max_register_raw_size;
}

void
set_gdbarch_max_register_raw_size (gdbarch, max_register_raw_size)
    struct gdbarch *gdbarch;
    int max_register_raw_size;
{
  gdbarch->max_register_raw_size = max_register_raw_size;
}

int
gdbarch_register_virtual_size (struct gdbarch *gdbarch, int reg_nr)
{
  if (gdbarch->register_virtual_size == 0)
    fatal ("gdbarch: gdbarch_register_virtual_size invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_virtual_size called\n");
  return gdbarch->register_virtual_size (reg_nr);
}

void
set_gdbarch_register_virtual_size (gdbarch, register_virtual_size)
    struct gdbarch *gdbarch;
    gdbarch_register_virtual_size_ftype register_virtual_size;
{
  gdbarch->register_virtual_size = register_virtual_size;
}

int
gdbarch_max_register_virtual_size (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->max_register_virtual_size == -1)
    fatal ("gdbarch: gdbarch_max_register_virtual_size invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_max_register_virtual_size called\n");
  return gdbarch->max_register_virtual_size;
}

void
set_gdbarch_max_register_virtual_size (gdbarch, max_register_virtual_size)
    struct gdbarch *gdbarch;
    int max_register_virtual_size;
{
  gdbarch->max_register_virtual_size = max_register_virtual_size;
}

struct type *
gdbarch_register_virtual_type (struct gdbarch *gdbarch, int reg_nr)
{
  if (gdbarch->register_virtual_type == 0)
    fatal ("gdbarch: gdbarch_register_virtual_type invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_virtual_type called\n");
  return gdbarch->register_virtual_type (reg_nr);
}

void
set_gdbarch_register_virtual_type (gdbarch, register_virtual_type)
    struct gdbarch *gdbarch;
    gdbarch_register_virtual_type_ftype register_virtual_type;
{
  gdbarch->register_virtual_type = register_virtual_type;
}

int
gdbarch_use_generic_dummy_frames (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->use_generic_dummy_frames == -1)
    fatal ("gdbarch: gdbarch_use_generic_dummy_frames invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_use_generic_dummy_frames called\n");
  return gdbarch->use_generic_dummy_frames;
}

void
set_gdbarch_use_generic_dummy_frames (gdbarch, use_generic_dummy_frames)
    struct gdbarch *gdbarch;
    int use_generic_dummy_frames;
{
  gdbarch->use_generic_dummy_frames = use_generic_dummy_frames;
}

int
gdbarch_call_dummy_location (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_location == 0)
    fatal ("gdbarch: gdbarch_call_dummy_location invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_location called\n");
  return gdbarch->call_dummy_location;
}

void
set_gdbarch_call_dummy_location (gdbarch, call_dummy_location)
    struct gdbarch *gdbarch;
    int call_dummy_location;
{
  gdbarch->call_dummy_location = call_dummy_location;
}

CORE_ADDR
gdbarch_call_dummy_address (struct gdbarch *gdbarch)
{
  if (gdbarch->call_dummy_address == 0)
    fatal ("gdbarch: gdbarch_call_dummy_address invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_address called\n");
  return gdbarch->call_dummy_address ();
}

void
set_gdbarch_call_dummy_address (gdbarch, call_dummy_address)
    struct gdbarch *gdbarch;
    gdbarch_call_dummy_address_ftype call_dummy_address;
{
  gdbarch->call_dummy_address = call_dummy_address;
}

CORE_ADDR
gdbarch_call_dummy_start_offset (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_start_offset == -1)
    fatal ("gdbarch: gdbarch_call_dummy_start_offset invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_start_offset called\n");
  return gdbarch->call_dummy_start_offset;
}

void
set_gdbarch_call_dummy_start_offset (gdbarch, call_dummy_start_offset)
    struct gdbarch *gdbarch;
    CORE_ADDR call_dummy_start_offset;
{
  gdbarch->call_dummy_start_offset = call_dummy_start_offset;
}

CORE_ADDR
gdbarch_call_dummy_breakpoint_offset (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_breakpoint_offset == -1)
    fatal ("gdbarch: gdbarch_call_dummy_breakpoint_offset invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_breakpoint_offset called\n");
  return gdbarch->call_dummy_breakpoint_offset;
}

void
set_gdbarch_call_dummy_breakpoint_offset (gdbarch, call_dummy_breakpoint_offset)
    struct gdbarch *gdbarch;
    CORE_ADDR call_dummy_breakpoint_offset;
{
  gdbarch->call_dummy_breakpoint_offset = call_dummy_breakpoint_offset;
}

int
gdbarch_call_dummy_breakpoint_offset_p (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_breakpoint_offset_p == -1)
    fatal ("gdbarch: gdbarch_call_dummy_breakpoint_offset_p invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_breakpoint_offset_p called\n");
  return gdbarch->call_dummy_breakpoint_offset_p;
}

void
set_gdbarch_call_dummy_breakpoint_offset_p (gdbarch, call_dummy_breakpoint_offset_p)
    struct gdbarch *gdbarch;
    int call_dummy_breakpoint_offset_p;
{
  gdbarch->call_dummy_breakpoint_offset_p = call_dummy_breakpoint_offset_p;
}

int
gdbarch_call_dummy_length (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_length == -1)
    fatal ("gdbarch: gdbarch_call_dummy_length invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_length called\n");
  return gdbarch->call_dummy_length;
}

void
set_gdbarch_call_dummy_length (gdbarch, call_dummy_length)
    struct gdbarch *gdbarch;
    int call_dummy_length;
{
  gdbarch->call_dummy_length = call_dummy_length;
}

int
gdbarch_pc_in_call_dummy (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp, CORE_ADDR frame_address)
{
  if (gdbarch->pc_in_call_dummy == 0)
    fatal ("gdbarch: gdbarch_pc_in_call_dummy invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pc_in_call_dummy called\n");
  return gdbarch->pc_in_call_dummy (pc, sp, frame_address);
}

void
set_gdbarch_pc_in_call_dummy (gdbarch, pc_in_call_dummy)
    struct gdbarch *gdbarch;
    gdbarch_pc_in_call_dummy_ftype pc_in_call_dummy;
{
  gdbarch->pc_in_call_dummy = pc_in_call_dummy;
}

int
gdbarch_call_dummy_p (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_p == -1)
    fatal ("gdbarch: gdbarch_call_dummy_p invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_p called\n");
  return gdbarch->call_dummy_p;
}

void
set_gdbarch_call_dummy_p (gdbarch, call_dummy_p)
    struct gdbarch *gdbarch;
    int call_dummy_p;
{
  gdbarch->call_dummy_p = call_dummy_p;
}

LONGEST *
gdbarch_call_dummy_words (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_words called\n");
  return gdbarch->call_dummy_words;
}

void
set_gdbarch_call_dummy_words (gdbarch, call_dummy_words)
    struct gdbarch *gdbarch;
    LONGEST * call_dummy_words;
{
  gdbarch->call_dummy_words = call_dummy_words;
}

int
gdbarch_sizeof_call_dummy_words (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_sizeof_call_dummy_words called\n");
  return gdbarch->sizeof_call_dummy_words;
}

void
set_gdbarch_sizeof_call_dummy_words (gdbarch, sizeof_call_dummy_words)
    struct gdbarch *gdbarch;
    int sizeof_call_dummy_words;
{
  gdbarch->sizeof_call_dummy_words = sizeof_call_dummy_words;
}

int
gdbarch_call_dummy_stack_adjust_p (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_stack_adjust_p == -1)
    fatal ("gdbarch: gdbarch_call_dummy_stack_adjust_p invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_stack_adjust_p called\n");
  return gdbarch->call_dummy_stack_adjust_p;
}

void
set_gdbarch_call_dummy_stack_adjust_p (gdbarch, call_dummy_stack_adjust_p)
    struct gdbarch *gdbarch;
    int call_dummy_stack_adjust_p;
{
  gdbarch->call_dummy_stack_adjust_p = call_dummy_stack_adjust_p;
}

int
gdbarch_call_dummy_stack_adjust (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->call_dummy_stack_adjust_p && gdbarch->call_dummy_stack_adjust == 0)
    fatal ("gdbarch: gdbarch_call_dummy_stack_adjust invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_call_dummy_stack_adjust called\n");
  return gdbarch->call_dummy_stack_adjust;
}

void
set_gdbarch_call_dummy_stack_adjust (gdbarch, call_dummy_stack_adjust)
    struct gdbarch *gdbarch;
    int call_dummy_stack_adjust;
{
  gdbarch->call_dummy_stack_adjust = call_dummy_stack_adjust;
}

void
gdbarch_fix_call_dummy (struct gdbarch *gdbarch, char *dummy, CORE_ADDR pc, CORE_ADDR fun, int nargs, struct value **args, struct type *type, int gcc_p)
{
  if (gdbarch->fix_call_dummy == 0)
    fatal ("gdbarch: gdbarch_fix_call_dummy invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_fix_call_dummy called\n");
  gdbarch->fix_call_dummy (dummy, pc, fun, nargs, args, type, gcc_p);
}

void
set_gdbarch_fix_call_dummy (gdbarch, fix_call_dummy)
    struct gdbarch *gdbarch;
    gdbarch_fix_call_dummy_ftype fix_call_dummy;
{
  gdbarch->fix_call_dummy = fix_call_dummy;
}

int
gdbarch_believe_pcc_promotion (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_believe_pcc_promotion called\n");
  return gdbarch->believe_pcc_promotion;
}

void
set_gdbarch_believe_pcc_promotion (gdbarch, believe_pcc_promotion)
    struct gdbarch *gdbarch;
    int believe_pcc_promotion;
{
  gdbarch->believe_pcc_promotion = believe_pcc_promotion;
}

int
gdbarch_believe_pcc_promotion_type (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_believe_pcc_promotion_type called\n");
  return gdbarch->believe_pcc_promotion_type;
}

void
set_gdbarch_believe_pcc_promotion_type (gdbarch, believe_pcc_promotion_type)
    struct gdbarch *gdbarch;
    int believe_pcc_promotion_type;
{
  gdbarch->believe_pcc_promotion_type = believe_pcc_promotion_type;
}

void
gdbarch_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR *addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
{
  if (gdbarch->get_saved_register == 0)
    fatal ("gdbarch: gdbarch_get_saved_register invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_get_saved_register called\n");
  gdbarch->get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval);
}

void
set_gdbarch_get_saved_register (gdbarch, get_saved_register)
    struct gdbarch *gdbarch;
    gdbarch_get_saved_register_ftype get_saved_register;
{
  gdbarch->get_saved_register = get_saved_register;
}

int
gdbarch_register_convertible (struct gdbarch *gdbarch, int nr)
{
  if (gdbarch->register_convertible == 0)
    fatal ("gdbarch: gdbarch_register_convertible invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_convertible called\n");
  return gdbarch->register_convertible (nr);
}

void
set_gdbarch_register_convertible (gdbarch, register_convertible)
    struct gdbarch *gdbarch;
    gdbarch_register_convertible_ftype register_convertible;
{
  gdbarch->register_convertible = register_convertible;
}

void
gdbarch_register_convert_to_virtual (struct gdbarch *gdbarch, int regnum, struct type *type, char *from, char *to)
{
  if (gdbarch->register_convert_to_virtual == 0)
    fatal ("gdbarch: gdbarch_register_convert_to_virtual invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_convert_to_virtual called\n");
  gdbarch->register_convert_to_virtual (regnum, type, from, to);
}

void
set_gdbarch_register_convert_to_virtual (gdbarch, register_convert_to_virtual)
    struct gdbarch *gdbarch;
    gdbarch_register_convert_to_virtual_ftype register_convert_to_virtual;
{
  gdbarch->register_convert_to_virtual = register_convert_to_virtual;
}

void
gdbarch_register_convert_to_raw (struct gdbarch *gdbarch, struct type *type, int regnum, char *from, char *to)
{
  if (gdbarch->register_convert_to_raw == 0)
    fatal ("gdbarch: gdbarch_register_convert_to_raw invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_register_convert_to_raw called\n");
  gdbarch->register_convert_to_raw (type, regnum, from, to);
}

void
set_gdbarch_register_convert_to_raw (gdbarch, register_convert_to_raw)
    struct gdbarch *gdbarch;
    gdbarch_register_convert_to_raw_ftype register_convert_to_raw;
{
  gdbarch->register_convert_to_raw = register_convert_to_raw;
}

void
gdbarch_extract_return_value (struct gdbarch *gdbarch, struct type *type, char *regbuf, char *valbuf)
{
  if (gdbarch->extract_return_value == 0)
    fatal ("gdbarch: gdbarch_extract_return_value invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_return_value called\n");
  gdbarch->extract_return_value (type, regbuf, valbuf);
}

void
set_gdbarch_extract_return_value (gdbarch, extract_return_value)
    struct gdbarch *gdbarch;
    gdbarch_extract_return_value_ftype extract_return_value;
{
  gdbarch->extract_return_value = extract_return_value;
}

CORE_ADDR
gdbarch_push_arguments (struct gdbarch *gdbarch, int nargs, struct value **args, CORE_ADDR sp, int struct_return, CORE_ADDR struct_addr)
{
  if (gdbarch->push_arguments == 0)
    fatal ("gdbarch: gdbarch_push_arguments invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_arguments called\n");
  return gdbarch->push_arguments (nargs, args, sp, struct_return, struct_addr);
}

void
set_gdbarch_push_arguments (gdbarch, push_arguments)
    struct gdbarch *gdbarch;
    gdbarch_push_arguments_ftype push_arguments;
{
  gdbarch->push_arguments = push_arguments;
}

void
gdbarch_push_dummy_frame (struct gdbarch *gdbarch)
{
  if (gdbarch->push_dummy_frame == 0)
    fatal ("gdbarch: gdbarch_push_dummy_frame invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_dummy_frame called\n");
  gdbarch->push_dummy_frame ();
}

void
set_gdbarch_push_dummy_frame (gdbarch, push_dummy_frame)
    struct gdbarch *gdbarch;
    gdbarch_push_dummy_frame_ftype push_dummy_frame;
{
  gdbarch->push_dummy_frame = push_dummy_frame;
}

CORE_ADDR
gdbarch_push_return_address (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR sp)
{
  if (gdbarch->push_return_address == 0)
    fatal ("gdbarch: gdbarch_push_return_address invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_push_return_address called\n");
  return gdbarch->push_return_address (pc, sp);
}

void
set_gdbarch_push_return_address (gdbarch, push_return_address)
    struct gdbarch *gdbarch;
    gdbarch_push_return_address_ftype push_return_address;
{
  gdbarch->push_return_address = push_return_address;
}

void
gdbarch_pop_frame (struct gdbarch *gdbarch)
{
  if (gdbarch->pop_frame == 0)
    fatal ("gdbarch: gdbarch_pop_frame invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_pop_frame called\n");
  gdbarch->pop_frame ();
}

void
set_gdbarch_pop_frame (gdbarch, pop_frame)
    struct gdbarch *gdbarch;
    gdbarch_pop_frame_ftype pop_frame;
{
  gdbarch->pop_frame = pop_frame;
}

CORE_ADDR
gdbarch_d10v_make_daddr (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_make_daddr == 0)
    fatal ("gdbarch: gdbarch_d10v_make_daddr invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_make_daddr called\n");
  return gdbarch->d10v_make_daddr (x);
}

void
set_gdbarch_d10v_make_daddr (gdbarch, d10v_make_daddr)
    struct gdbarch *gdbarch;
    gdbarch_d10v_make_daddr_ftype d10v_make_daddr;
{
  gdbarch->d10v_make_daddr = d10v_make_daddr;
}

CORE_ADDR
gdbarch_d10v_make_iaddr (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_make_iaddr == 0)
    fatal ("gdbarch: gdbarch_d10v_make_iaddr invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_make_iaddr called\n");
  return gdbarch->d10v_make_iaddr (x);
}

void
set_gdbarch_d10v_make_iaddr (gdbarch, d10v_make_iaddr)
    struct gdbarch *gdbarch;
    gdbarch_d10v_make_iaddr_ftype d10v_make_iaddr;
{
  gdbarch->d10v_make_iaddr = d10v_make_iaddr;
}

int
gdbarch_d10v_daddr_p (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_daddr_p == 0)
    fatal ("gdbarch: gdbarch_d10v_daddr_p invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_daddr_p called\n");
  return gdbarch->d10v_daddr_p (x);
}

void
set_gdbarch_d10v_daddr_p (gdbarch, d10v_daddr_p)
    struct gdbarch *gdbarch;
    gdbarch_d10v_daddr_p_ftype d10v_daddr_p;
{
  gdbarch->d10v_daddr_p = d10v_daddr_p;
}

int
gdbarch_d10v_iaddr_p (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_iaddr_p == 0)
    fatal ("gdbarch: gdbarch_d10v_iaddr_p invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_iaddr_p called\n");
  return gdbarch->d10v_iaddr_p (x);
}

void
set_gdbarch_d10v_iaddr_p (gdbarch, d10v_iaddr_p)
    struct gdbarch *gdbarch;
    gdbarch_d10v_iaddr_p_ftype d10v_iaddr_p;
{
  gdbarch->d10v_iaddr_p = d10v_iaddr_p;
}

CORE_ADDR
gdbarch_d10v_convert_daddr_to_raw (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_convert_daddr_to_raw == 0)
    fatal ("gdbarch: gdbarch_d10v_convert_daddr_to_raw invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_convert_daddr_to_raw called\n");
  return gdbarch->d10v_convert_daddr_to_raw (x);
}

void
set_gdbarch_d10v_convert_daddr_to_raw (gdbarch, d10v_convert_daddr_to_raw)
    struct gdbarch *gdbarch;
    gdbarch_d10v_convert_daddr_to_raw_ftype d10v_convert_daddr_to_raw;
{
  gdbarch->d10v_convert_daddr_to_raw = d10v_convert_daddr_to_raw;
}

CORE_ADDR
gdbarch_d10v_convert_iaddr_to_raw (struct gdbarch *gdbarch, CORE_ADDR x)
{
  if (gdbarch->d10v_convert_iaddr_to_raw == 0)
    fatal ("gdbarch: gdbarch_d10v_convert_iaddr_to_raw invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_d10v_convert_iaddr_to_raw called\n");
  return gdbarch->d10v_convert_iaddr_to_raw (x);
}

void
set_gdbarch_d10v_convert_iaddr_to_raw (gdbarch, d10v_convert_iaddr_to_raw)
    struct gdbarch *gdbarch;
    gdbarch_d10v_convert_iaddr_to_raw_ftype d10v_convert_iaddr_to_raw;
{
  gdbarch->d10v_convert_iaddr_to_raw = d10v_convert_iaddr_to_raw;
}

void
gdbarch_store_struct_return (struct gdbarch *gdbarch, CORE_ADDR addr, CORE_ADDR sp)
{
  if (gdbarch->store_struct_return == 0)
    fatal ("gdbarch: gdbarch_store_struct_return invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_store_struct_return called\n");
  gdbarch->store_struct_return (addr, sp);
}

void
set_gdbarch_store_struct_return (gdbarch, store_struct_return)
    struct gdbarch *gdbarch;
    gdbarch_store_struct_return_ftype store_struct_return;
{
  gdbarch->store_struct_return = store_struct_return;
}

void
gdbarch_store_return_value (struct gdbarch *gdbarch, struct type *type, char *valbuf)
{
  if (gdbarch->store_return_value == 0)
    fatal ("gdbarch: gdbarch_store_return_value invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_store_return_value called\n");
  gdbarch->store_return_value (type, valbuf);
}

void
set_gdbarch_store_return_value (gdbarch, store_return_value)
    struct gdbarch *gdbarch;
    gdbarch_store_return_value_ftype store_return_value;
{
  gdbarch->store_return_value = store_return_value;
}

CORE_ADDR
gdbarch_extract_struct_value_address (struct gdbarch *gdbarch, char *regbuf)
{
  if (gdbarch->extract_struct_value_address == 0)
    fatal ("gdbarch: gdbarch_extract_struct_value_address invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_extract_struct_value_address called\n");
  return gdbarch->extract_struct_value_address (regbuf);
}

void
set_gdbarch_extract_struct_value_address (gdbarch, extract_struct_value_address)
    struct gdbarch *gdbarch;
    gdbarch_extract_struct_value_address_ftype extract_struct_value_address;
{
  gdbarch->extract_struct_value_address = extract_struct_value_address;
}

int
gdbarch_use_struct_convention (struct gdbarch *gdbarch, int gcc_p, struct type *value_type)
{
  if (gdbarch->use_struct_convention == 0)
    fatal ("gdbarch: gdbarch_use_struct_convention invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_use_struct_convention called\n");
  return gdbarch->use_struct_convention (gcc_p, value_type);
}

void
set_gdbarch_use_struct_convention (gdbarch, use_struct_convention)
    struct gdbarch *gdbarch;
    gdbarch_use_struct_convention_ftype use_struct_convention;
{
  gdbarch->use_struct_convention = use_struct_convention;
}

void
gdbarch_frame_init_saved_regs (struct gdbarch *gdbarch, struct frame_info *frame)
{
  if (gdbarch->frame_init_saved_regs == 0)
    fatal ("gdbarch: gdbarch_frame_init_saved_regs invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_init_saved_regs called\n");
  gdbarch->frame_init_saved_regs (frame);
}

void
set_gdbarch_frame_init_saved_regs (gdbarch, frame_init_saved_regs)
    struct gdbarch *gdbarch;
    gdbarch_frame_init_saved_regs_ftype frame_init_saved_regs;
{
  gdbarch->frame_init_saved_regs = frame_init_saved_regs;
}

void
gdbarch_init_extra_frame_info (struct gdbarch *gdbarch, int fromleaf, struct frame_info *frame)
{
  if (gdbarch->init_extra_frame_info == 0)
    fatal ("gdbarch: gdbarch_init_extra_frame_info invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_init_extra_frame_info called\n");
  gdbarch->init_extra_frame_info (fromleaf, frame);
}

void
set_gdbarch_init_extra_frame_info (gdbarch, init_extra_frame_info)
    struct gdbarch *gdbarch;
    gdbarch_init_extra_frame_info_ftype init_extra_frame_info;
{
  gdbarch->init_extra_frame_info = init_extra_frame_info;
}

CORE_ADDR
gdbarch_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR ip)
{
  if (gdbarch->skip_prologue == 0)
    fatal ("gdbarch: gdbarch_skip_prologue invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_skip_prologue called\n");
  return gdbarch->skip_prologue (ip);
}

void
set_gdbarch_skip_prologue (gdbarch, skip_prologue)
    struct gdbarch *gdbarch;
    gdbarch_skip_prologue_ftype skip_prologue;
{
  gdbarch->skip_prologue = skip_prologue;
}

int
gdbarch_inner_than (struct gdbarch *gdbarch, CORE_ADDR lhs, CORE_ADDR rhs)
{
  if (gdbarch->inner_than == 0)
    fatal ("gdbarch: gdbarch_inner_than invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_inner_than called\n");
  return gdbarch->inner_than (lhs, rhs);
}

void
set_gdbarch_inner_than (gdbarch, inner_than)
    struct gdbarch *gdbarch;
    gdbarch_inner_than_ftype inner_than;
{
  gdbarch->inner_than = inner_than;
}

unsigned char *
gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR *pcptr, int *lenptr)
{
  if (gdbarch->breakpoint_from_pc == 0)
    fatal ("gdbarch: gdbarch_breakpoint_from_pc invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_breakpoint_from_pc called\n");
  return gdbarch->breakpoint_from_pc (pcptr, lenptr);
}

void
set_gdbarch_breakpoint_from_pc (gdbarch, breakpoint_from_pc)
    struct gdbarch *gdbarch;
    gdbarch_breakpoint_from_pc_ftype breakpoint_from_pc;
{
  gdbarch->breakpoint_from_pc = breakpoint_from_pc;
}

CORE_ADDR
gdbarch_decr_pc_after_break (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->decr_pc_after_break == -1)
    fatal ("gdbarch: gdbarch_decr_pc_after_break invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_decr_pc_after_break called\n");
  return gdbarch->decr_pc_after_break;
}

void
set_gdbarch_decr_pc_after_break (gdbarch, decr_pc_after_break)
    struct gdbarch *gdbarch;
    CORE_ADDR decr_pc_after_break;
{
  gdbarch->decr_pc_after_break = decr_pc_after_break;
}

CORE_ADDR
gdbarch_function_start_offset (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->function_start_offset == -1)
    fatal ("gdbarch: gdbarch_function_start_offset invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_function_start_offset called\n");
  return gdbarch->function_start_offset;
}

void
set_gdbarch_function_start_offset (gdbarch, function_start_offset)
    struct gdbarch *gdbarch;
    CORE_ADDR function_start_offset;
{
  gdbarch->function_start_offset = function_start_offset;
}

void
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len)
{
  if (gdbarch->remote_translate_xfer_address == 0)
    fatal ("gdbarch: gdbarch_remote_translate_xfer_address invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_remote_translate_xfer_address called\n");
  gdbarch->remote_translate_xfer_address (gdb_addr, gdb_len, rem_addr, rem_len);
}

void
set_gdbarch_remote_translate_xfer_address (gdbarch, remote_translate_xfer_address)
    struct gdbarch *gdbarch;
    gdbarch_remote_translate_xfer_address_ftype remote_translate_xfer_address;
{
  gdbarch->remote_translate_xfer_address = remote_translate_xfer_address;
}

CORE_ADDR
gdbarch_frame_args_skip (gdbarch)
    struct gdbarch *gdbarch;
{
  if (gdbarch->frame_args_skip == -1)
    fatal ("gdbarch: gdbarch_frame_args_skip invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_args_skip called\n");
  return gdbarch->frame_args_skip;
}

void
set_gdbarch_frame_args_skip (gdbarch, frame_args_skip)
    struct gdbarch *gdbarch;
    CORE_ADDR frame_args_skip;
{
  gdbarch->frame_args_skip = frame_args_skip;
}

int
gdbarch_frameless_function_invocation (struct gdbarch *gdbarch, struct frame_info *fi)
{
  if (gdbarch->frameless_function_invocation == 0)
    fatal ("gdbarch: gdbarch_frameless_function_invocation invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frameless_function_invocation called\n");
  return gdbarch->frameless_function_invocation (fi);
}

void
set_gdbarch_frameless_function_invocation (gdbarch, frameless_function_invocation)
    struct gdbarch *gdbarch;
    gdbarch_frameless_function_invocation_ftype frameless_function_invocation;
{
  gdbarch->frameless_function_invocation = frameless_function_invocation;
}

CORE_ADDR
gdbarch_frame_chain (struct gdbarch *gdbarch, struct frame_info *frame)
{
  if (gdbarch->frame_chain == 0)
    fatal ("gdbarch: gdbarch_frame_chain invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_chain called\n");
  return gdbarch->frame_chain (frame);
}

void
set_gdbarch_frame_chain (gdbarch, frame_chain)
    struct gdbarch *gdbarch;
    gdbarch_frame_chain_ftype frame_chain;
{
  gdbarch->frame_chain = frame_chain;
}

int
gdbarch_frame_chain_valid (struct gdbarch *gdbarch, CORE_ADDR chain, struct frame_info *thisframe)
{
  if (gdbarch->frame_chain_valid == 0)
    fatal ("gdbarch: gdbarch_frame_chain_valid invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_chain_valid called\n");
  return gdbarch->frame_chain_valid (chain, thisframe);
}

void
set_gdbarch_frame_chain_valid (gdbarch, frame_chain_valid)
    struct gdbarch *gdbarch;
    gdbarch_frame_chain_valid_ftype frame_chain_valid;
{
  gdbarch->frame_chain_valid = frame_chain_valid;
}

CORE_ADDR
gdbarch_frame_saved_pc (struct gdbarch *gdbarch, struct frame_info *fi)
{
  if (gdbarch->frame_saved_pc == 0)
    fatal ("gdbarch: gdbarch_frame_saved_pc invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_saved_pc called\n");
  return gdbarch->frame_saved_pc (fi);
}

void
set_gdbarch_frame_saved_pc (gdbarch, frame_saved_pc)
    struct gdbarch *gdbarch;
    gdbarch_frame_saved_pc_ftype frame_saved_pc;
{
  gdbarch->frame_saved_pc = frame_saved_pc;
}

CORE_ADDR
gdbarch_frame_args_address (struct gdbarch *gdbarch, struct frame_info *fi)
{
  if (gdbarch->frame_args_address == 0)
    fatal ("gdbarch: gdbarch_frame_args_address invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_args_address called\n");
  return gdbarch->frame_args_address (fi);
}

void
set_gdbarch_frame_args_address (gdbarch, frame_args_address)
    struct gdbarch *gdbarch;
    gdbarch_frame_args_address_ftype frame_args_address;
{
  gdbarch->frame_args_address = frame_args_address;
}

CORE_ADDR
gdbarch_frame_locals_address (struct gdbarch *gdbarch, struct frame_info *fi)
{
  if (gdbarch->frame_locals_address == 0)
    fatal ("gdbarch: gdbarch_frame_locals_address invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_locals_address called\n");
  return gdbarch->frame_locals_address (fi);
}

void
set_gdbarch_frame_locals_address (gdbarch, frame_locals_address)
    struct gdbarch *gdbarch;
    gdbarch_frame_locals_address_ftype frame_locals_address;
{
  gdbarch->frame_locals_address = frame_locals_address;
}

CORE_ADDR
gdbarch_saved_pc_after_call (struct gdbarch *gdbarch, struct frame_info *frame)
{
  if (gdbarch->saved_pc_after_call == 0)
    fatal ("gdbarch: gdbarch_saved_pc_after_call invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_saved_pc_after_call called\n");
  return gdbarch->saved_pc_after_call (frame);
}

void
set_gdbarch_saved_pc_after_call (gdbarch, saved_pc_after_call)
    struct gdbarch *gdbarch;
    gdbarch_saved_pc_after_call_ftype saved_pc_after_call;
{
  gdbarch->saved_pc_after_call = saved_pc_after_call;
}

int
gdbarch_frame_num_args (struct gdbarch *gdbarch, struct frame_info *frame)
{
  if (gdbarch->frame_num_args == 0)
    fatal ("gdbarch: gdbarch_frame_num_args invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_frame_num_args called\n");
  return gdbarch->frame_num_args (frame);
}

void
set_gdbarch_frame_num_args (gdbarch, frame_num_args)
    struct gdbarch *gdbarch;
    gdbarch_frame_num_args_ftype frame_num_args;
{
  gdbarch->frame_num_args = frame_num_args;
}


/* Keep a registrary of per-architecture data-pointers required by GDB
   modules. */

struct gdbarch_data
{
  int index;
};

struct gdbarch_data_registration
{
  gdbarch_data_ftype *init;
  struct gdbarch_data *data;
  struct gdbarch_data_registration *next;
};

struct gdbarch_data_registrary
{
  int nr;
  struct gdbarch_data_registration *registrations;
};

struct gdbarch_data_registrary gdbarch_data_registrary =
{
  0, NULL,
};

struct gdbarch_data *
register_gdbarch_data (init)
     gdbarch_data_ftype *init;
{
  struct gdbarch_data_registration **curr;
  for (curr = &gdbarch_data_registrary.registrations;
       (*curr) != NULL;
       curr = &(*curr)->next);
  (*curr) = XMALLOC (struct gdbarch_data_registration);
  (*curr)->next = NULL;
  (*curr)->init = init;
  (*curr)->data = XMALLOC (struct gdbarch_data);
  (*curr)->data->index = gdbarch_data_registrary.nr++;
  return (*curr)->data;
}


/* Walk through all the registered users initializing each in turn. */

static void init_gdbarch_data PARAMS ((struct gdbarch *));
static void
init_gdbarch_data (gdbarch)
     struct gdbarch *gdbarch;
{
  struct gdbarch_data_registration *rego;
  gdbarch->nr_data = gdbarch_data_registrary.nr + 1;
  gdbarch->data = xmalloc (sizeof (void*) * gdbarch->nr_data);
  for (rego = gdbarch_data_registrary.registrations;
       rego != NULL;
       rego = rego->next)
    {
      if (rego->data->index < gdbarch->nr_data)
	gdbarch->data[rego->data->index] = rego->init ();
    }
}


/* Return the current value of the specified per-architecture
   data-pointer. */

void *
gdbarch_data (data)
     struct gdbarch_data *data;
{
  if (data->index >= current_gdbarch->nr_data)
    fatal ("gdbarch_data: request for non-existant data.");
  return current_gdbarch->data[data->index];
}



/* Keep a registrary of swaped data required by GDB modules. */

struct gdbarch_swap
{
  void *swap;
  struct gdbarch_swap_registration *source;
  struct gdbarch_swap *next;
};

struct gdbarch_swap_registration
{
  void *data;
  unsigned long sizeof_data;
  gdbarch_swap_ftype *init;
  struct gdbarch_swap_registration *next;
};

struct gdbarch_swap_registrary
{
  int nr;
  struct gdbarch_swap_registration *registrations;
};

struct gdbarch_swap_registrary gdbarch_swap_registrary = 
{
  0, NULL,
};

void
register_gdbarch_swap (data, sizeof_data, init)
     void *data;
     unsigned long sizeof_data;
     gdbarch_swap_ftype *init;
{
  struct gdbarch_swap_registration **rego;
  for (rego = &gdbarch_swap_registrary.registrations;
       (*rego) != NULL;
       rego = &(*rego)->next);
  (*rego) = XMALLOC (struct gdbarch_swap_registration);
  (*rego)->next = NULL;
  (*rego)->init = init;
  (*rego)->data = data;
  (*rego)->sizeof_data = sizeof_data;
}


static void init_gdbarch_swap PARAMS ((struct gdbarch *));
static void
init_gdbarch_swap (gdbarch)
     struct gdbarch *gdbarch;
{
  struct gdbarch_swap_registration *rego;
  struct gdbarch_swap **curr = &gdbarch->swap;
  for (rego = gdbarch_swap_registrary.registrations;
       rego != NULL;
       rego = rego->next)
    {
      if (rego->data != NULL)
	{
	  (*curr) = XMALLOC (struct gdbarch_swap);
	  (*curr)->source = rego;
	  (*curr)->swap = xmalloc (rego->sizeof_data);
	  (*curr)->next = NULL;
	  memset (rego->data, 0, rego->sizeof_data);
	  curr = &(*curr)->next;
	}
      if (rego->init != NULL)
	rego->init ();
    }
}

static void swapout_gdbarch_swap PARAMS ((struct gdbarch *));
static void
swapout_gdbarch_swap (gdbarch)
     struct gdbarch *gdbarch;
{
  struct gdbarch_swap *curr;
  for (curr = gdbarch->swap;
       curr != NULL;
       curr = curr->next)
    memcpy (curr->swap, curr->source->data, curr->source->sizeof_data);
}

static void swapin_gdbarch_swap PARAMS ((struct gdbarch *));
static void
swapin_gdbarch_swap (gdbarch)
     struct gdbarch *gdbarch;
{
  struct gdbarch_swap *curr;
  for (curr = gdbarch->swap;
       curr != NULL;
       curr = curr->next)
    memcpy (curr->source->data, curr->swap, curr->source->sizeof_data);
}


/* Keep a registrary of the architectures known by GDB. */

struct gdbarch_init_registration
{
  enum bfd_architecture bfd_architecture;
  gdbarch_init_ftype *init;
  struct gdbarch_list *arches;
  struct gdbarch_init_registration *next;
};

static struct gdbarch_init_registration *gdbarch_init_registrary = NULL;

void
register_gdbarch_init (bfd_architecture, init)
     enum bfd_architecture bfd_architecture;
     gdbarch_init_ftype *init;
{
  struct gdbarch_init_registration **curr;
  const struct bfd_arch_info *bfd_arch_info;
  /* Check that BFD reconizes this architecture */
  bfd_arch_info = bfd_lookup_arch (bfd_architecture, 0);
  if (bfd_arch_info == NULL)
    {
      fatal ("gdbarch: Attempt to register unknown architecture (%d)", bfd_architecture);
    }
  /* Check that we haven't seen this architecture before */
  for (curr = &gdbarch_init_registrary;
       (*curr) != NULL;
       curr = &(*curr)->next)
    {
      if (bfd_architecture == (*curr)->bfd_architecture)
	fatal ("gdbarch: Duplicate registraration of architecture (%s)",
	       bfd_arch_info->printable_name);
    }
  /* log it */
  if (gdbarch_debug)
    fprintf_unfiltered (gdb_stdlog, "register_gdbarch_init (%s, 0x%08lx)\n",
			bfd_arch_info->printable_name,
			(long) init);
  /* Append it */
  (*curr) = XMALLOC (struct gdbarch_init_registration);
  (*curr)->bfd_architecture = bfd_architecture;
  (*curr)->init = init;
  (*curr)->arches = NULL;
  (*curr)->next = NULL;
}
  


/* Look for an architecture using gdbarch_info.  Base search on only
   BFD_ARCH_INFO and BYTE_ORDER. */

struct gdbarch_list *
gdbarch_list_lookup_by_info (arches, info)
     struct gdbarch_list *arches;
     const struct gdbarch_info *info;
{
  for (; arches != NULL; arches = arches->next)
    {
      if (info->bfd_arch_info != arches->gdbarch->bfd_arch_info)
	continue;
      if (info->byte_order != arches->gdbarch->byte_order)
	continue;
      return arches;
    }
  return NULL;
}


/* Update the current architecture. Return ZERO if the update request
   failed. */

int
gdbarch_update (info)
     struct gdbarch_info info;
{
  struct gdbarch *new_gdbarch;
  struct gdbarch_list **list;
  struct gdbarch_init_registration *rego;

  /* Fill in any missing bits. Most important is the bfd_architecture
     which is used to select the target architecture. */
  if (info.bfd_architecture == bfd_arch_unknown)
    {
      if (info.bfd_arch_info != NULL)
	info.bfd_architecture = info.bfd_arch_info->arch;
      else if (info.abfd != NULL)
	info.bfd_architecture = bfd_get_arch (info.abfd);
      /* FIXME - should query BFD for its default architecture. */
      else
	info.bfd_architecture = current_gdbarch->bfd_arch_info->arch;
    }
  if (info.bfd_arch_info == NULL)
    {
      if (target_architecture_auto && info.abfd != NULL)
	info.bfd_arch_info = bfd_get_arch_info (info.abfd);
      else
	info.bfd_arch_info = current_gdbarch->bfd_arch_info;
    }
  if (info.byte_order == 0)
    {
      if (target_byte_order_auto && info.abfd != NULL)
	info.byte_order = (bfd_big_endian (info.abfd) ? BIG_ENDIAN
			   : bfd_little_endian (info.abfd) ? LITTLE_ENDIAN
			   : 0);
      else
	info.byte_order = current_gdbarch->byte_order;
      /* FIXME - should query BFD for its default byte-order. */
    }
  /* A default for abfd? */

  /* Find the target that knows about this architecture. */
  for (rego = gdbarch_init_registrary;
       rego != NULL && rego->bfd_architecture != info.bfd_architecture;
       rego = rego->next);
  if (rego == NULL)
    {
      if (gdbarch_debug)
	fprintf_unfiltered (gdb_stdlog, "gdbarch_update: No matching architecture\n");
      return 0;
    }

  if (gdbarch_debug)
    {
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: info.bfd_architecture %d (%s)\n",
			  info.bfd_architecture,
			  bfd_lookup_arch (info.bfd_architecture, 0)->printable_name);
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: info.bfd_arch_info %s\n",
			  (info.bfd_arch_info != NULL
			   ? info.bfd_arch_info->printable_name
			   : "(null)"));
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: info.byte_order %d (%s)\n",
			  info.byte_order,
			  (info.byte_order == BIG_ENDIAN ? "big"
			   : info.byte_order == LITTLE_ENDIAN ? "little"
			   : "default"));
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: info.abfd 0x%lx\n",
			  (long) info.abfd);
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: info.tdep_info 0x%lx\n",
			  (long) info.tdep_info);
    }

  /* Ask the target for a replacement architecture. */
  new_gdbarch = rego->init (info, rego->arches);

  /* Did the target like it?  No. Reject the change. */
  if (new_gdbarch == NULL)
    {
      if (gdbarch_debug)
	fprintf_unfiltered (gdb_stdlog, "gdbarch_update: Target rejected architecture\n");
      return 0;
    }

  /* Did the architecture change?  No. Do nothing. */
  if (current_gdbarch == new_gdbarch)
    {
      if (gdbarch_debug)
	fprintf_unfiltered (gdb_stdlog, "gdbarch_update: Architecture 0x%08lx (%s) unchanged\n",
			    (long) new_gdbarch,
			    new_gdbarch->bfd_arch_info->printable_name);
      return 1;
    }

  /* Swap all data belonging to the old target out */
  swapout_gdbarch_swap (current_gdbarch);

  /* Is this a pre-existing architecture?  Yes. Swap it in.  */
  for (list = &rego->arches;
       (*list) != NULL;
       list = &(*list)->next)
    {
      if ((*list)->gdbarch == new_gdbarch)
	{
	  if (gdbarch_debug)
	    fprintf_unfiltered (gdb_stdlog, "gdbarch_update: Previous architecture 0x%08lx (%s) selected\n",
				(long) new_gdbarch,
				new_gdbarch->bfd_arch_info->printable_name);
	  current_gdbarch = new_gdbarch;
	  swapin_gdbarch_swap (new_gdbarch);
	  return 1;
	}
    }
    
  /* Append this new architecture to this targets list. */
  (*list) = XMALLOC (struct gdbarch_list);
  (*list)->next = NULL;
  (*list)->gdbarch = new_gdbarch;

  /* Switch to this new architecture.  Dump it out. */
  current_gdbarch = new_gdbarch;
  if (gdbarch_debug)
    {
      fprintf_unfiltered (gdb_stdlog,
			  "gdbarch_update: New architecture 0x%08lx (%s) selected\n",
			  (long) new_gdbarch,
			  new_gdbarch->bfd_arch_info->printable_name);
      gdbarch_dump ();
    }
  
  /* Check that the newly installed architecture is valid.  */
  verify_gdbarch (new_gdbarch);

  /* Initialize the per-architecture memory (swap) areas.
     CURRENT_GDBARCH must be update before these modules are
     called. */
  init_gdbarch_swap (new_gdbarch);
  
  /* Initialize the per-architecture data-pointer of all parties that
     registered an interest in this architecture.  CURRENT_GDBARCH
     must be updated before these modules are called. */
  init_gdbarch_data (new_gdbarch);
  
  return 1;
}
d42 4
a111 7
      if (GDB_MULTI_ARCH)
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.byte_order = BIG_ENDIAN;
	  gdbarch_update (info);
	}
a130 7
      if (GDB_MULTI_ARCH)
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.byte_order = LITTLE_ENDIAN;
	  gdbarch_update (info);
	}
a240 2
  if (gdbarch_debug)
    gdbarch_dump ();
a273 16
  else if (GDB_MULTI_ARCH)
    {
      const struct bfd_arch_info *arch = bfd_scan_arch (args);
      if (arch == NULL)
	printf_unfiltered ("Architecture `%s' not reconized.\n", args);
      else
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.bfd_arch_info = arch;
	  if (gdbarch_update (info))
	    target_architecture_auto = 0;
	  else
	    printf_unfiltered ("Architecture `%s' not reconized.\n", args);
	}
    }
a291 30
  if (GDB_MULTI_ARCH)
    {
      if (gdbarch_init_registrary != NULL)
	{
	  struct gdbarch_init_registration *rego;
	  printf_filtered ("Available architectures are:\n");
	  for (rego = gdbarch_init_registrary;
	       rego != NULL;
	       rego = rego->next)
	    {
	      const struct bfd_arch_info *ap;
	      ap = bfd_lookup_arch (rego->bfd_architecture, 0);
	      if (ap != NULL)
		{
		  do
		    {
		      printf_filtered (" %s", ap->printable_name);
		      ap = ap->next;
		    }
		  while (ap != NULL);
		  printf_filtered ("\n");
		}
	    }
	}
      else
	{
	  printf_filtered ("There are no available architectures.\n");
	}
      return;
    }
d319 1
a319 1
    fatal ("gdbarch: hardwired architecture/machine not reconized");
a351 7
int
generic_register_convertible_not (num)
     int num;
{
  return 0;
}
  
a366 8
  if (GDB_MULTI_ARCH)
    {
      struct gdbarch_info info;
      memset (&info, 0, sizeof info);
      info.abfd = abfd;
      gdbarch_update (info);
      return;
    }
@


1.1.1.7
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d24 1
a24 1
#include "inferior.h"		/* enum CALL_DUMMY_LOCATION et.al. */
d63 4
a66 4
  {
    /* basic architectural information */
    const struct bfd_arch_info *bfd_arch_info;
    int byte_order;
d68 2
a69 2
    /* target specific vector. */
    struct gdbarch_tdep *tdep;
d71 3
a73 3
    /* per-architecture data-pointers */
    int nr_data;
    void **data;
d75 2
a76 2
    /* per-architecture swap-regions */
    struct gdbarch_swap *swap;
d78 1
a78 1
    /* Multi-arch values.
d80 1
a80 1
       When extending this structure you must:
d82 1
a82 1
       Add the field below.
d84 2
a85 2
       Declare set/get functions and define the corresponding
       macro in gdbarch.h.
d87 2
a88 2
       gdbarch_alloc(): If zero/NULL is not a suitable default,
       initialize the new field.
d90 2
a91 2
       verify_gdbarch(): Confirm that the target updated the field
       correctly.
d93 2
a94 2
       gdbarch_dump(): Add a fprintf_unfiltered call to so that the new
       field is dumped out
d96 2
a97 2
       ``default_gdbarch()'': Append an initial value to the static
       variable (base values on the host's c-type system).
d99 2
a100 2
       get_gdbarch(): Implement the set/get functions (probably using
       the macro's as shortcuts).
d104 80
a183 80
    int ptr_bit;
    int short_bit;
    int int_bit;
    int long_bit;
    int long_long_bit;
    int float_bit;
    int double_bit;
    int long_double_bit;
    gdbarch_read_pc_ftype *read_pc;
    gdbarch_write_pc_ftype *write_pc;
    gdbarch_read_fp_ftype *read_fp;
    gdbarch_write_fp_ftype *write_fp;
    gdbarch_read_sp_ftype *read_sp;
    gdbarch_write_sp_ftype *write_sp;
    int num_regs;
    int sp_regnum;
    int fp_regnum;
    int pc_regnum;
    gdbarch_register_name_ftype *register_name;
    int register_size;
    int register_bytes;
    gdbarch_register_byte_ftype *register_byte;
    gdbarch_register_raw_size_ftype *register_raw_size;
    int max_register_raw_size;
    gdbarch_register_virtual_size_ftype *register_virtual_size;
    int max_register_virtual_size;
    gdbarch_register_virtual_type_ftype *register_virtual_type;
    int use_generic_dummy_frames;
    int call_dummy_location;
    gdbarch_call_dummy_address_ftype *call_dummy_address;
    CORE_ADDR call_dummy_start_offset;
    CORE_ADDR call_dummy_breakpoint_offset;
    int call_dummy_breakpoint_offset_p;
    int call_dummy_length;
    gdbarch_pc_in_call_dummy_ftype *pc_in_call_dummy;
    int call_dummy_p;
    LONGEST *call_dummy_words;
    int sizeof_call_dummy_words;
    int call_dummy_stack_adjust_p;
    int call_dummy_stack_adjust;
    gdbarch_fix_call_dummy_ftype *fix_call_dummy;
    int believe_pcc_promotion;
    int believe_pcc_promotion_type;
    gdbarch_get_saved_register_ftype *get_saved_register;
    gdbarch_register_convertible_ftype *register_convertible;
    gdbarch_register_convert_to_virtual_ftype *register_convert_to_virtual;
    gdbarch_register_convert_to_raw_ftype *register_convert_to_raw;
    gdbarch_extract_return_value_ftype *extract_return_value;
    gdbarch_push_arguments_ftype *push_arguments;
    gdbarch_push_dummy_frame_ftype *push_dummy_frame;
    gdbarch_push_return_address_ftype *push_return_address;
    gdbarch_pop_frame_ftype *pop_frame;
    gdbarch_d10v_make_daddr_ftype *d10v_make_daddr;
    gdbarch_d10v_make_iaddr_ftype *d10v_make_iaddr;
    gdbarch_d10v_daddr_p_ftype *d10v_daddr_p;
    gdbarch_d10v_iaddr_p_ftype *d10v_iaddr_p;
    gdbarch_d10v_convert_daddr_to_raw_ftype *d10v_convert_daddr_to_raw;
    gdbarch_d10v_convert_iaddr_to_raw_ftype *d10v_convert_iaddr_to_raw;
    gdbarch_store_struct_return_ftype *store_struct_return;
    gdbarch_store_return_value_ftype *store_return_value;
    gdbarch_extract_struct_value_address_ftype *extract_struct_value_address;
    gdbarch_use_struct_convention_ftype *use_struct_convention;
    gdbarch_frame_init_saved_regs_ftype *frame_init_saved_regs;
    gdbarch_init_extra_frame_info_ftype *init_extra_frame_info;
    gdbarch_skip_prologue_ftype *skip_prologue;
    gdbarch_inner_than_ftype *inner_than;
    gdbarch_breakpoint_from_pc_ftype *breakpoint_from_pc;
    CORE_ADDR decr_pc_after_break;
    CORE_ADDR function_start_offset;
    gdbarch_remote_translate_xfer_address_ftype *remote_translate_xfer_address;
    CORE_ADDR frame_args_skip;
    gdbarch_frameless_function_invocation_ftype *frameless_function_invocation;
    gdbarch_frame_chain_ftype *frame_chain;
    gdbarch_frame_chain_valid_ftype *frame_chain_valid;
    gdbarch_frame_saved_pc_ftype *frame_saved_pc;
    gdbarch_frame_args_address_ftype *frame_args_address;
    gdbarch_frame_locals_address_ftype *frame_locals_address;
    gdbarch_saved_pc_after_call_ftype *saved_pc_after_call;
    gdbarch_frame_num_args_ftype *frame_num_args;
  };
d191 1
a191 2
struct gdbarch default_gdbarch =
{
d200 1
a200 1
  8 * sizeof (void *),
d327 1
a327 1
static void verify_gdbarch PARAMS ((struct gdbarch * gdbarch));
d576 2
a577 2
			"gdbarch_update: TARGET_ARCHITECTURE = %s\n",
			TARGET_ARCHITECTURE->printable_name);
d579 2
a580 2
		      "gdbarch_update: TARGET_BYTE_ORDER = %ld\n",
		      (long) TARGET_BYTE_ORDER);
d582 2
a583 2
		      "gdbarch_update: TARGET_PTR_BIT = %ld\n",
		      (long) TARGET_PTR_BIT);
d585 2
a586 2
		      "gdbarch_update: TARGET_SHORT_BIT = %ld\n",
		      (long) TARGET_SHORT_BIT);
d588 2
a589 2
		      "gdbarch_update: TARGET_INT_BIT = %ld\n",
		      (long) TARGET_INT_BIT);
d591 2
a592 2
		      "gdbarch_update: TARGET_LONG_BIT = %ld\n",
		      (long) TARGET_LONG_BIT);
d594 2
a595 2
		      "gdbarch_update: TARGET_LONG_LONG_BIT = %ld\n",
		      (long) TARGET_LONG_LONG_BIT);
d597 2
a598 2
		      "gdbarch_update: TARGET_FLOAT_BIT = %ld\n",
		      (long) TARGET_FLOAT_BIT);
d600 2
a601 2
		      "gdbarch_update: TARGET_DOUBLE_BIT = %ld\n",
		      (long) TARGET_DOUBLE_BIT);
d603 2
a604 2
		      "gdbarch_update: TARGET_LONG_DOUBLE_BIT = %ld\n",
		      (long) TARGET_LONG_DOUBLE_BIT);
d606 3
a608 3
		      "gdbarch_update: TARGET_READ_PC = 0x%08lx\n",
		      (long) current_gdbarch->read_pc
  /*TARGET_READ_PC () */ );
d610 3
a612 3
		      "gdbarch_update: TARGET_WRITE_PC = 0x%08lx\n",
		      (long) current_gdbarch->write_pc
  /*TARGET_WRITE_PC () */ );
d614 3
a616 3
		      "gdbarch_update: TARGET_READ_FP = 0x%08lx\n",
		      (long) current_gdbarch->read_fp
  /*TARGET_READ_FP () */ );
d618 3
a620 3
		      "gdbarch_update: TARGET_WRITE_FP = 0x%08lx\n",
		      (long) current_gdbarch->write_fp
  /*TARGET_WRITE_FP () */ );
d622 3
a624 3
		      "gdbarch_update: TARGET_READ_SP = 0x%08lx\n",
		      (long) current_gdbarch->read_sp
  /*TARGET_READ_SP () */ );
d626 3
a628 3
		      "gdbarch_update: TARGET_WRITE_SP = 0x%08lx\n",
		      (long) current_gdbarch->write_sp
  /*TARGET_WRITE_SP () */ );
d630 2
a631 2
		      "gdbarch_update: NUM_REGS = %ld\n",
		      (long) NUM_REGS);
d633 2
a634 2
		      "gdbarch_update: SP_REGNUM = %ld\n",
		      (long) SP_REGNUM);
d636 2
a637 2
		      "gdbarch_update: FP_REGNUM = %ld\n",
		      (long) FP_REGNUM);
d639 2
a640 2
		      "gdbarch_update: PC_REGNUM = %ld\n",
		      (long) PC_REGNUM);
d642 3
a644 3
		      "gdbarch_update: REGISTER_NAME = 0x%08lx\n",
		      (long) current_gdbarch->register_name
  /*REGISTER_NAME () */ );
d646 2
a647 2
		      "gdbarch_update: REGISTER_SIZE = %ld\n",
		      (long) REGISTER_SIZE);
d649 2
a650 2
		      "gdbarch_update: REGISTER_BYTES = %ld\n",
		      (long) REGISTER_BYTES);
d652 3
a654 3
		      "gdbarch_update: REGISTER_BYTE = 0x%08lx\n",
		      (long) current_gdbarch->register_byte
  /*REGISTER_BYTE () */ );
d656 3
a658 3
		      "gdbarch_update: REGISTER_RAW_SIZE = 0x%08lx\n",
		      (long) current_gdbarch->register_raw_size
  /*REGISTER_RAW_SIZE () */ );
d660 2
a661 2
		      "gdbarch_update: MAX_REGISTER_RAW_SIZE = %ld\n",
		      (long) MAX_REGISTER_RAW_SIZE);
d663 3
a665 3
		      "gdbarch_update: REGISTER_VIRTUAL_SIZE = 0x%08lx\n",
		      (long) current_gdbarch->register_virtual_size
  /*REGISTER_VIRTUAL_SIZE () */ );
d667 2
a668 2
		      "gdbarch_update: MAX_REGISTER_VIRTUAL_SIZE = %ld\n",
		      (long) MAX_REGISTER_VIRTUAL_SIZE);
d670 3
a672 3
		      "gdbarch_update: REGISTER_VIRTUAL_TYPE = 0x%08lx\n",
		      (long) current_gdbarch->register_virtual_type
  /*REGISTER_VIRTUAL_TYPE () */ );
d674 2
a675 2
		      "gdbarch_update: USE_GENERIC_DUMMY_FRAMES = %ld\n",
		      (long) USE_GENERIC_DUMMY_FRAMES);
d677 2
a678 2
		      "gdbarch_update: CALL_DUMMY_LOCATION = %ld\n",
		      (long) CALL_DUMMY_LOCATION);
d680 3
a682 3
		      "gdbarch_update: CALL_DUMMY_ADDRESS = 0x%08lx\n",
		      (long) current_gdbarch->call_dummy_address
  /*CALL_DUMMY_ADDRESS () */ );
d684 2
a685 2
		      "gdbarch_update: CALL_DUMMY_START_OFFSET = 0x%08lx\n",
		      (long) CALL_DUMMY_START_OFFSET);
d687 2
a688 2
		 "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
		      (long) CALL_DUMMY_BREAKPOINT_OFFSET);
d690 2
a691 2
		   "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET_P = %ld\n",
		      (long) CALL_DUMMY_BREAKPOINT_OFFSET_P);
d694 2
a695 2
			"gdbarch_update: CALL_DUMMY_LENGTH = %ld\n",
			(long) CALL_DUMMY_LENGTH);
d697 3
a699 3
		      "gdbarch_update: PC_IN_CALL_DUMMY = 0x%08lx\n",
		      (long) current_gdbarch->pc_in_call_dummy
  /*PC_IN_CALL_DUMMY () */ );
d701 2
a702 2
		      "gdbarch_update: CALL_DUMMY_P = %ld\n",
		      (long) CALL_DUMMY_P);
d704 2
a705 2
		      "gdbarch_update: CALL_DUMMY_WORDS = 0x%08lx\n",
		      (long) CALL_DUMMY_WORDS);
d707 2
a708 2
		      "gdbarch_update: SIZEOF_CALL_DUMMY_WORDS = 0x%08lx\n",
		      (long) SIZEOF_CALL_DUMMY_WORDS);
d710 2
a711 2
		    "gdbarch_update: CALL_DUMMY_STACK_ADJUST_P = 0x%08lx\n",
		      (long) CALL_DUMMY_STACK_ADJUST_P);
d714 2
a715 2
		      "gdbarch_update: CALL_DUMMY_STACK_ADJUST = 0x%08lx\n",
			(long) CALL_DUMMY_STACK_ADJUST);
d717 3
a719 3
		      "gdbarch_update: FIX_CALL_DUMMY = 0x%08lx\n",
		      (long) current_gdbarch->fix_call_dummy
  /*FIX_CALL_DUMMY () */ );
d722 2
a723 2
		      "gdbarch_update: BELIEVE_PCC_PROMOTION = %ld\n",
		      (long) BELIEVE_PCC_PROMOTION);
d727 2
a728 2
		      "gdbarch_update: BELIEVE_PCC_PROMOTION_TYPE = %ld\n",
		      (long) BELIEVE_PCC_PROMOTION_TYPE);
d731 140
a870 140
		      "gdbarch_update: GET_SAVED_REGISTER = 0x%08lx\n",
		      (long) current_gdbarch->get_saved_register
  /*GET_SAVED_REGISTER () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: REGISTER_CONVERTIBLE = 0x%08lx\n",
		      (long) current_gdbarch->register_convertible
  /*REGISTER_CONVERTIBLE () */ );
  fprintf_unfiltered (gdb_stdlog,
		  "gdbarch_update: REGISTER_CONVERT_TO_VIRTUAL = 0x%08lx\n",
		      (long) current_gdbarch->register_convert_to_virtual
  /*REGISTER_CONVERT_TO_VIRTUAL () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: REGISTER_CONVERT_TO_RAW = 0x%08lx\n",
		      (long) current_gdbarch->register_convert_to_raw
  /*REGISTER_CONVERT_TO_RAW () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: EXTRACT_RETURN_VALUE = 0x%08lx\n",
		      (long) current_gdbarch->extract_return_value
  /*EXTRACT_RETURN_VALUE () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: PUSH_ARGUMENTS = 0x%08lx\n",
		      (long) current_gdbarch->push_arguments
  /*PUSH_ARGUMENTS () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: PUSH_DUMMY_FRAME = 0x%08lx\n",
		      (long) current_gdbarch->push_dummy_frame
  /*PUSH_DUMMY_FRAME () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: PUSH_RETURN_ADDRESS = 0x%08lx\n",
		      (long) current_gdbarch->push_return_address
  /*PUSH_RETURN_ADDRESS () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: POP_FRAME = 0x%08lx\n",
		      (long) current_gdbarch->pop_frame
  /*POP_FRAME () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: D10V_MAKE_DADDR = 0x%08lx\n",
		      (long) current_gdbarch->d10v_make_daddr
  /*D10V_MAKE_DADDR () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: D10V_MAKE_IADDR = 0x%08lx\n",
		      (long) current_gdbarch->d10v_make_iaddr
  /*D10V_MAKE_IADDR () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: D10V_DADDR_P = 0x%08lx\n",
		      (long) current_gdbarch->d10v_daddr_p
  /*D10V_DADDR_P () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: D10V_IADDR_P = 0x%08lx\n",
		      (long) current_gdbarch->d10v_iaddr_p
  /*D10V_IADDR_P () */ );
  fprintf_unfiltered (gdb_stdlog,
		    "gdbarch_update: D10V_CONVERT_DADDR_TO_RAW = 0x%08lx\n",
		      (long) current_gdbarch->d10v_convert_daddr_to_raw
  /*D10V_CONVERT_DADDR_TO_RAW () */ );
  fprintf_unfiltered (gdb_stdlog,
		    "gdbarch_update: D10V_CONVERT_IADDR_TO_RAW = 0x%08lx\n",
		      (long) current_gdbarch->d10v_convert_iaddr_to_raw
  /*D10V_CONVERT_IADDR_TO_RAW () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: STORE_STRUCT_RETURN = 0x%08lx\n",
		      (long) current_gdbarch->store_struct_return
  /*STORE_STRUCT_RETURN () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: STORE_RETURN_VALUE = 0x%08lx\n",
		      (long) current_gdbarch->store_return_value
  /*STORE_RETURN_VALUE () */ );
  fprintf_unfiltered (gdb_stdlog,
		 "gdbarch_update: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
		      (long) current_gdbarch->extract_struct_value_address
  /*EXTRACT_STRUCT_VALUE_ADDRESS () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: USE_STRUCT_CONVENTION = 0x%08lx\n",
		      (long) current_gdbarch->use_struct_convention
  /*USE_STRUCT_CONVENTION () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_INIT_SAVED_REGS = 0x%08lx\n",
		      (long) current_gdbarch->frame_init_saved_regs
  /*FRAME_INIT_SAVED_REGS () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: INIT_EXTRA_FRAME_INFO = 0x%08lx\n",
		      (long) current_gdbarch->init_extra_frame_info
  /*INIT_EXTRA_FRAME_INFO () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: SKIP_PROLOGUE = 0x%08lx\n",
		      (long) current_gdbarch->skip_prologue
  /*SKIP_PROLOGUE () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: INNER_THAN = 0x%08lx\n",
		      (long) current_gdbarch->inner_than
  /*INNER_THAN () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: BREAKPOINT_FROM_PC = 0x%08lx\n",
		      (long) current_gdbarch->breakpoint_from_pc
  /*BREAKPOINT_FROM_PC () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: DECR_PC_AFTER_BREAK = %ld\n",
		      (long) DECR_PC_AFTER_BREAK);
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FUNCTION_START_OFFSET = %ld\n",
		      (long) FUNCTION_START_OFFSET);
  fprintf_unfiltered (gdb_stdlog,
		"gdbarch_update: REMOTE_TRANSLATE_XFER_ADDRESS = 0x%08lx\n",
		      (long) current_gdbarch->remote_translate_xfer_address
  /*REMOTE_TRANSLATE_XFER_ADDRESS () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_ARGS_SKIP = %ld\n",
		      (long) FRAME_ARGS_SKIP);
  fprintf_unfiltered (gdb_stdlog,
		"gdbarch_update: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
		      (long) current_gdbarch->frameless_function_invocation
  /*FRAMELESS_FUNCTION_INVOCATION () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_CHAIN = 0x%08lx\n",
		      (long) current_gdbarch->frame_chain
  /*FRAME_CHAIN () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_CHAIN_VALID = 0x%08lx\n",
		      (long) current_gdbarch->frame_chain_valid
  /*FRAME_CHAIN_VALID () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_SAVED_PC = 0x%08lx\n",
		      (long) current_gdbarch->frame_saved_pc
  /*FRAME_SAVED_PC () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_ARGS_ADDRESS = 0x%08lx\n",
		      (long) current_gdbarch->frame_args_address
  /*FRAME_ARGS_ADDRESS () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_LOCALS_ADDRESS = 0x%08lx\n",
		      (long) current_gdbarch->frame_locals_address
  /*FRAME_LOCALS_ADDRESS () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: SAVED_PC_AFTER_CALL = 0x%08lx\n",
		      (long) current_gdbarch->saved_pc_after_call
  /*SAVED_PC_AFTER_CALL () */ );
  fprintf_unfiltered (gdb_stdlog,
		      "gdbarch_update: FRAME_NUM_ARGS = 0x%08lx\n",
		      (long) current_gdbarch->frame_num_args
  /*FRAME_NUM_ARGS () */ );
d875 1
a875 1
     struct gdbarch *gdbarch;
d886 1
a886 1
     struct gdbarch *gdbarch;
d896 1
a896 1
     struct gdbarch *gdbarch;
d906 1
a906 1
     struct gdbarch *gdbarch;
d918 2
a919 2
     struct gdbarch *gdbarch;
     int ptr_bit;
d926 1
a926 1
     struct gdbarch *gdbarch;
d938 2
a939 2
     struct gdbarch *gdbarch;
     int short_bit;
d946 1
a946 1
     struct gdbarch *gdbarch;
d958 2
a959 2
     struct gdbarch *gdbarch;
     int int_bit;
d966 1
a966 1
     struct gdbarch *gdbarch;
d978 2
a979 2
     struct gdbarch *gdbarch;
     int long_bit;
d986 1
a986 1
     struct gdbarch *gdbarch;
d998 2
a999 2
     struct gdbarch *gdbarch;
     int long_long_bit;
d1006 1
a1006 1
     struct gdbarch *gdbarch;
d1018 2
a1019 2
     struct gdbarch *gdbarch;
     int float_bit;
d1026 1
a1026 1
     struct gdbarch *gdbarch;
d1038 2
a1039 2
     struct gdbarch *gdbarch;
     int double_bit;
d1046 1
a1046 1
     struct gdbarch *gdbarch;
d1058 2
a1059 2
     struct gdbarch *gdbarch;
     int long_double_bit;
d1077 2
a1078 2
     struct gdbarch *gdbarch;
     gdbarch_read_pc_ftype read_pc;
d1096 2
a1097 2
     struct gdbarch *gdbarch;
     gdbarch_write_pc_ftype write_pc;
d1115 2
a1116 2
     struct gdbarch *gdbarch;
     gdbarch_read_fp_ftype read_fp;
d1134 2
a1135 2
     struct gdbarch *gdbarch;
     gdbarch_write_fp_ftype write_fp;
d1153 2
a1154 2
     struct gdbarch *gdbarch;
     gdbarch_read_sp_ftype read_sp;
d1172 2
a1173 2
     struct gdbarch *gdbarch;
     gdbarch_write_sp_ftype write_sp;
d1180 1
a1180 1
     struct gdbarch *gdbarch;
d1192 2
a1193 2
     struct gdbarch *gdbarch;
     int num_regs;
d1200 1
a1200 1
     struct gdbarch *gdbarch;
d1212 2
a1213 2
     struct gdbarch *gdbarch;
     int sp_regnum;
d1220 1
a1220 1
     struct gdbarch *gdbarch;
d1232 2
a1233 2
     struct gdbarch *gdbarch;
     int fp_regnum;
d1240 1
a1240 1
     struct gdbarch *gdbarch;
d1252 2
a1253 2
     struct gdbarch *gdbarch;
     int pc_regnum;
d1271 2
a1272 2
     struct gdbarch *gdbarch;
     gdbarch_register_name_ftype register_name;
d1279 1
a1279 1
     struct gdbarch *gdbarch;
d1291 2
a1292 2
     struct gdbarch *gdbarch;
     int register_size;
d1299 1
a1299 1
     struct gdbarch *gdbarch;
d1311 2
a1312 2
     struct gdbarch *gdbarch;
     int register_bytes;
d1330 2
a1331 2
     struct gdbarch *gdbarch;
     gdbarch_register_byte_ftype register_byte;
d1349 2
a1350 2
     struct gdbarch *gdbarch;
     gdbarch_register_raw_size_ftype register_raw_size;
d1357 1
a1357 1
     struct gdbarch *gdbarch;
d1369 2
a1370 2
     struct gdbarch *gdbarch;
     int max_register_raw_size;
d1388 2
a1389 2
     struct gdbarch *gdbarch;
     gdbarch_register_virtual_size_ftype register_virtual_size;
d1396 1
a1396 1
     struct gdbarch *gdbarch;
d1408 2
a1409 2
     struct gdbarch *gdbarch;
     int max_register_virtual_size;
d1427 2
a1428 2
     struct gdbarch *gdbarch;
     gdbarch_register_virtual_type_ftype register_virtual_type;
d1435 1
a1435 1
     struct gdbarch *gdbarch;
d1447 2
a1448 2
     struct gdbarch *gdbarch;
     int use_generic_dummy_frames;
d1455 1
a1455 1
     struct gdbarch *gdbarch;
d1467 2
a1468 2
     struct gdbarch *gdbarch;
     int call_dummy_location;
d1486 2
a1487 2
     struct gdbarch *gdbarch;
     gdbarch_call_dummy_address_ftype call_dummy_address;
d1494 1
a1494 1
     struct gdbarch *gdbarch;
d1506 2
a1507 2
     struct gdbarch *gdbarch;
     CORE_ADDR call_dummy_start_offset;
d1514 1
a1514 1
     struct gdbarch *gdbarch;
d1526 2
a1527 2
     struct gdbarch *gdbarch;
     CORE_ADDR call_dummy_breakpoint_offset;
d1534 1
a1534 1
     struct gdbarch *gdbarch;
d1546 2
a1547 2
     struct gdbarch *gdbarch;
     int call_dummy_breakpoint_offset_p;
d1554 1
a1554 1
     struct gdbarch *gdbarch;
d1566 2
a1567 2
     struct gdbarch *gdbarch;
     int call_dummy_length;
d1585 2
a1586 2
     struct gdbarch *gdbarch;
     gdbarch_pc_in_call_dummy_ftype pc_in_call_dummy;
d1593 1
a1593 1
     struct gdbarch *gdbarch;
d1605 2
a1606 2
     struct gdbarch *gdbarch;
     int call_dummy_p;
d1613 1
a1613 1
     struct gdbarch *gdbarch;
d1623 2
a1624 2
     struct gdbarch *gdbarch;
     LONGEST *call_dummy_words;
d1631 1
a1631 1
     struct gdbarch *gdbarch;
d1641 2
a1642 2
     struct gdbarch *gdbarch;
     int sizeof_call_dummy_words;
d1649 1
a1649 1
     struct gdbarch *gdbarch;
d1661 2
a1662 2
     struct gdbarch *gdbarch;
     int call_dummy_stack_adjust_p;
d1669 1
a1669 1
     struct gdbarch *gdbarch;
d1681 2
a1682 2
     struct gdbarch *gdbarch;
     int call_dummy_stack_adjust;
d1700 2
a1701 2
     struct gdbarch *gdbarch;
     gdbarch_fix_call_dummy_ftype fix_call_dummy;
d1708 1
a1708 1
     struct gdbarch *gdbarch;
d1718 2
a1719 2
     struct gdbarch *gdbarch;
     int believe_pcc_promotion;
d1726 1
a1726 1
     struct gdbarch *gdbarch;
d1736 2
a1737 2
     struct gdbarch *gdbarch;
     int believe_pcc_promotion_type;
d1743 1
a1743 1
gdbarch_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR * addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
d1755 2
a1756 2
     struct gdbarch *gdbarch;
     gdbarch_get_saved_register_ftype get_saved_register;
d1774 2
a1775 2
     struct gdbarch *gdbarch;
     gdbarch_register_convertible_ftype register_convertible;
d1793 2
a1794 2
     struct gdbarch *gdbarch;
     gdbarch_register_convert_to_virtual_ftype register_convert_to_virtual;
d1812 2
a1813 2
     struct gdbarch *gdbarch;
     gdbarch_register_convert_to_raw_ftype register_convert_to_raw;
d1831 2
a1832 2
     struct gdbarch *gdbarch;
     gdbarch_extract_return_value_ftype extract_return_value;
d1850 2
a1851 2
     struct gdbarch *gdbarch;
     gdbarch_push_arguments_ftype push_arguments;
d1869 2
a1870 2
     struct gdbarch *gdbarch;
     gdbarch_push_dummy_frame_ftype push_dummy_frame;
d1888 2
a1889 2
     struct gdbarch *gdbarch;
     gdbarch_push_return_address_ftype push_return_address;
d1907 2
a1908 2
     struct gdbarch *gdbarch;
     gdbarch_pop_frame_ftype pop_frame;
d1926 2
a1927 2
     struct gdbarch *gdbarch;
     gdbarch_d10v_make_daddr_ftype d10v_make_daddr;
d1945 2
a1946 2
     struct gdbarch *gdbarch;
     gdbarch_d10v_make_iaddr_ftype d10v_make_iaddr;
d1964 2
a1965 2
     struct gdbarch *gdbarch;
     gdbarch_d10v_daddr_p_ftype d10v_daddr_p;
d1983 2
a1984 2
     struct gdbarch *gdbarch;
     gdbarch_d10v_iaddr_p_ftype d10v_iaddr_p;
d2002 2
a2003 2
     struct gdbarch *gdbarch;
     gdbarch_d10v_convert_daddr_to_raw_ftype d10v_convert_daddr_to_raw;
d2021 2
a2022 2
     struct gdbarch *gdbarch;
     gdbarch_d10v_convert_iaddr_to_raw_ftype d10v_convert_iaddr_to_raw;
d2040 2
a2041 2
     struct gdbarch *gdbarch;
     gdbarch_store_struct_return_ftype store_struct_return;
d2059 2
a2060 2
     struct gdbarch *gdbarch;
     gdbarch_store_return_value_ftype store_return_value;
d2078 2
a2079 2
     struct gdbarch *gdbarch;
     gdbarch_extract_struct_value_address_ftype extract_struct_value_address;
d2097 2
a2098 2
     struct gdbarch *gdbarch;
     gdbarch_use_struct_convention_ftype use_struct_convention;
d2116 2
a2117 2
     struct gdbarch *gdbarch;
     gdbarch_frame_init_saved_regs_ftype frame_init_saved_regs;
d2135 2
a2136 2
     struct gdbarch *gdbarch;
     gdbarch_init_extra_frame_info_ftype init_extra_frame_info;
d2154 2
a2155 2
     struct gdbarch *gdbarch;
     gdbarch_skip_prologue_ftype skip_prologue;
d2173 2
a2174 2
     struct gdbarch *gdbarch;
     gdbarch_inner_than_ftype inner_than;
d2180 1
a2180 1
gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR * pcptr, int *lenptr)
d2192 2
a2193 2
     struct gdbarch *gdbarch;
     gdbarch_breakpoint_from_pc_ftype breakpoint_from_pc;
d2200 1
a2200 1
     struct gdbarch *gdbarch;
d2212 2
a2213 2
     struct gdbarch *gdbarch;
     CORE_ADDR decr_pc_after_break;
d2220 1
a2220 1
     struct gdbarch *gdbarch;
d2232 2
a2233 2
     struct gdbarch *gdbarch;
     CORE_ADDR function_start_offset;
d2239 1
a2239 1
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR * rem_addr, int *rem_len)
d2251 2
a2252 2
     struct gdbarch *gdbarch;
     gdbarch_remote_translate_xfer_address_ftype remote_translate_xfer_address;
d2259 1
a2259 1
     struct gdbarch *gdbarch;
d2271 2
a2272 2
     struct gdbarch *gdbarch;
     CORE_ADDR frame_args_skip;
d2290 2
a2291 2
     struct gdbarch *gdbarch;
     gdbarch_frameless_function_invocation_ftype frameless_function_invocation;
d2309 2
a2310 2
     struct gdbarch *gdbarch;
     gdbarch_frame_chain_ftype frame_chain;
d2328 2
a2329 2
     struct gdbarch *gdbarch;
     gdbarch_frame_chain_valid_ftype frame_chain_valid;
d2347 2
a2348 2
     struct gdbarch *gdbarch;
     gdbarch_frame_saved_pc_ftype frame_saved_pc;
d2366 2
a2367 2
     struct gdbarch *gdbarch;
     gdbarch_frame_args_address_ftype frame_args_address;
d2385 2
a2386 2
     struct gdbarch *gdbarch;
     gdbarch_frame_locals_address_ftype frame_locals_address;
d2404 2
a2405 2
     struct gdbarch *gdbarch;
     gdbarch_saved_pc_after_call_ftype saved_pc_after_call;
d2423 2
a2424 2
     struct gdbarch *gdbarch;
     gdbarch_frame_num_args_ftype frame_num_args;
d2439 5
a2443 5
  {
    gdbarch_data_ftype *init;
    struct gdbarch_data *data;
    struct gdbarch_data_registration *next;
  };
d2446 4
a2449 4
  {
    int nr;
    struct gdbarch_data_registration *registrations;
  };
d2482 1
a2482 1
  gdbarch->data = xmalloc (sizeof (void *) * gdbarch->nr_data);
d2517 6
a2522 6
  {
    void *data;
    unsigned long sizeof_data;
    gdbarch_swap_ftype *init;
    struct gdbarch_swap_registration *next;
  };
d2525 4
a2528 4
  {
    int nr;
    struct gdbarch_swap_registration *registrations;
  };
d2530 1
a2530 1
struct gdbarch_swap_registrary gdbarch_swap_registrary =
d2649 1
a2649 1

d2730 1
a2730 1
		bfd_lookup_arch (info.bfd_architecture, 0)->printable_name);
d2790 1
a2790 1

d2801 1
a2801 1
		 "gdbarch_update: New architecture 0x%08lx (%s) selected\n",
d2806 1
a2806 1

d2814 1
a2814 1

d2819 1
a2819 1

d2845 1
a2845 1
#define TARGET_BYTE_ORDER_DEFAULT BIG_ENDIAN	/* arbitrary */
d2861 3
a2863 3
  (TARGET_BYTE_ORDER_AUTO
   ? "The target endianness is set automatically (currently %s endian)\n"
   : "The target is assumed to be %s endian\n");
d2957 1
a2957 1

d2987 1
a2987 1
int (*target_architecture_hook) PARAMS ((const struct bfd_arch_info * ap));
d2991 1
a2991 1
static int arch_ok PARAMS ((const struct bfd_arch_info * arch));
d3003 1
a3003 4
enum set_arch
{
  set_arch_auto, set_arch_manual
};
d3005 1
a3005 1
static void set_arch PARAMS ((const struct bfd_arch_info * arch, enum set_arch type));
d3197 1
a3197 1

d3257 1
a3257 1
  INIT_DISASSEMBLE_INFO_NO_ARCH (tm_print_insn_info, gdb_stdout, (fprintf_ftype) fprintf_filtered);
d3266 1
a3266 1
				  (char *) &gdbarch_debug,
@


1.1.1.8
log
@import gdb-1999-07-19 snapshot
@
text
@d1 1
a1 2
/* *INDENT-OFF* */ /* typedef (f)();'' confuses indent */
/* Dynamic architecture support for GDB, the GNU debugger.
d4 1
a4 15
This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d6 14
d25 1
a25 1
#include "inferior.h" /* enum CALL_DUMMY_LOCATION et.al. */
d64 4
a67 4
{
  /* basic architectural information */
  const struct bfd_arch_info * bfd_arch_info;
  int byte_order;
d69 2
a70 2
  /* target specific vector. */
  struct gdbarch_tdep *tdep;
d72 3
a74 3
  /* per-architecture data-pointers */
  int nr_data;
  void **data;
d76 2
a77 2
  /* per-architecture swap-regions */
  struct gdbarch_swap *swap;
d79 1
a79 1
  /* Multi-arch values.
d81 1
a81 1
     When extending this structure you must:
d83 1
a83 1
     Add the field below.
d85 2
a86 2
     Declare set/get functions and define the corresponding
     macro in gdbarch.h.
d88 2
a89 2
     gdbarch_alloc(): If zero/NULL is not a suitable default,
     initialize the new field.
d91 2
a92 2
     verify_gdbarch(): Confirm that the target updated the field
     correctly.
d94 2
a95 2
     gdbarch_dump(): Add a fprintf_unfiltered call to so that the new
     field is dumped out
d97 2
a98 2
     ``default_gdbarch()'': Append an initial value to the static
     variable (base values on the host's c-type system).
d100 2
a101 2
     get_gdbarch(): Implement the set/get functions (probably using
     the macro's as shortcuts).
d105 80
a184 80
  int ptr_bit;
  int short_bit;
  int int_bit;
  int long_bit;
  int long_long_bit;
  int float_bit;
  int double_bit;
  int long_double_bit;
  gdbarch_read_pc_ftype *read_pc;
  gdbarch_write_pc_ftype *write_pc;
  gdbarch_read_fp_ftype *read_fp;
  gdbarch_write_fp_ftype *write_fp;
  gdbarch_read_sp_ftype *read_sp;
  gdbarch_write_sp_ftype *write_sp;
  int num_regs;
  int sp_regnum;
  int fp_regnum;
  int pc_regnum;
  gdbarch_register_name_ftype *register_name;
  int register_size;
  int register_bytes;
  gdbarch_register_byte_ftype *register_byte;
  gdbarch_register_raw_size_ftype *register_raw_size;
  int max_register_raw_size;
  gdbarch_register_virtual_size_ftype *register_virtual_size;
  int max_register_virtual_size;
  gdbarch_register_virtual_type_ftype *register_virtual_type;
  int use_generic_dummy_frames;
  int call_dummy_location;
  gdbarch_call_dummy_address_ftype *call_dummy_address;
  CORE_ADDR call_dummy_start_offset;
  CORE_ADDR call_dummy_breakpoint_offset;
  int call_dummy_breakpoint_offset_p;
  int call_dummy_length;
  gdbarch_pc_in_call_dummy_ftype *pc_in_call_dummy;
  int call_dummy_p;
  LONGEST * call_dummy_words;
  int sizeof_call_dummy_words;
  int call_dummy_stack_adjust_p;
  int call_dummy_stack_adjust;
  gdbarch_fix_call_dummy_ftype *fix_call_dummy;
  int believe_pcc_promotion;
  int believe_pcc_promotion_type;
  gdbarch_get_saved_register_ftype *get_saved_register;
  gdbarch_register_convertible_ftype *register_convertible;
  gdbarch_register_convert_to_virtual_ftype *register_convert_to_virtual;
  gdbarch_register_convert_to_raw_ftype *register_convert_to_raw;
  gdbarch_extract_return_value_ftype *extract_return_value;
  gdbarch_push_arguments_ftype *push_arguments;
  gdbarch_push_dummy_frame_ftype *push_dummy_frame;
  gdbarch_push_return_address_ftype *push_return_address;
  gdbarch_pop_frame_ftype *pop_frame;
  gdbarch_d10v_make_daddr_ftype *d10v_make_daddr;
  gdbarch_d10v_make_iaddr_ftype *d10v_make_iaddr;
  gdbarch_d10v_daddr_p_ftype *d10v_daddr_p;
  gdbarch_d10v_iaddr_p_ftype *d10v_iaddr_p;
  gdbarch_d10v_convert_daddr_to_raw_ftype *d10v_convert_daddr_to_raw;
  gdbarch_d10v_convert_iaddr_to_raw_ftype *d10v_convert_iaddr_to_raw;
  gdbarch_store_struct_return_ftype *store_struct_return;
  gdbarch_store_return_value_ftype *store_return_value;
  gdbarch_extract_struct_value_address_ftype *extract_struct_value_address;
  gdbarch_use_struct_convention_ftype *use_struct_convention;
  gdbarch_frame_init_saved_regs_ftype *frame_init_saved_regs;
  gdbarch_init_extra_frame_info_ftype *init_extra_frame_info;
  gdbarch_skip_prologue_ftype *skip_prologue;
  gdbarch_inner_than_ftype *inner_than;
  gdbarch_breakpoint_from_pc_ftype *breakpoint_from_pc;
  CORE_ADDR decr_pc_after_break;
  CORE_ADDR function_start_offset;
  gdbarch_remote_translate_xfer_address_ftype *remote_translate_xfer_address;
  CORE_ADDR frame_args_skip;
  gdbarch_frameless_function_invocation_ftype *frameless_function_invocation;
  gdbarch_frame_chain_ftype *frame_chain;
  gdbarch_frame_chain_valid_ftype *frame_chain_valid;
  gdbarch_frame_saved_pc_ftype *frame_saved_pc;
  gdbarch_frame_args_address_ftype *frame_args_address;
  gdbarch_frame_locals_address_ftype *frame_locals_address;
  gdbarch_saved_pc_after_call_ftype *saved_pc_after_call;
  gdbarch_frame_num_args_ftype *frame_num_args;
};
d192 2
a193 1
struct gdbarch default_gdbarch = {
d202 1
a202 1
  8 * sizeof (void*),
d329 1
a329 1
static void verify_gdbarch PARAMS ((struct gdbarch *gdbarch));
d578 2
a579 2
                        "gdbarch_update: TARGET_ARCHITECTURE = %s\n",
                        TARGET_ARCHITECTURE->printable_name);
d581 2
a582 2
                      "gdbarch_update: TARGET_BYTE_ORDER = %ld\n",
                      (long) TARGET_BYTE_ORDER);
d584 2
a585 2
                      "gdbarch_update: TARGET_PTR_BIT = %ld\n",
                      (long) TARGET_PTR_BIT);
d587 2
a588 2
                      "gdbarch_update: TARGET_SHORT_BIT = %ld\n",
                      (long) TARGET_SHORT_BIT);
d590 2
a591 2
                      "gdbarch_update: TARGET_INT_BIT = %ld\n",
                      (long) TARGET_INT_BIT);
d593 2
a594 2
                      "gdbarch_update: TARGET_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_BIT);
d596 2
a597 2
                      "gdbarch_update: TARGET_LONG_LONG_BIT = %ld\n",
                      (long) TARGET_LONG_LONG_BIT);
d599 2
a600 2
                      "gdbarch_update: TARGET_FLOAT_BIT = %ld\n",
                      (long) TARGET_FLOAT_BIT);
d602 2
a603 2
                      "gdbarch_update: TARGET_DOUBLE_BIT = %ld\n",
                      (long) TARGET_DOUBLE_BIT);
d605 2
a606 2
                      "gdbarch_update: TARGET_LONG_DOUBLE_BIT = %ld\n",
                      (long) TARGET_LONG_DOUBLE_BIT);
d608 3
a610 3
                      "gdbarch_update: TARGET_READ_PC = 0x%08lx\n",
                      (long) current_gdbarch->read_pc
                      /*TARGET_READ_PC ()*/);
d612 3
a614 3
                      "gdbarch_update: TARGET_WRITE_PC = 0x%08lx\n",
                      (long) current_gdbarch->write_pc
                      /*TARGET_WRITE_PC ()*/);
d616 3
a618 3
                      "gdbarch_update: TARGET_READ_FP = 0x%08lx\n",
                      (long) current_gdbarch->read_fp
                      /*TARGET_READ_FP ()*/);
d620 3
a622 3
                      "gdbarch_update: TARGET_WRITE_FP = 0x%08lx\n",
                      (long) current_gdbarch->write_fp
                      /*TARGET_WRITE_FP ()*/);
d624 3
a626 3
                      "gdbarch_update: TARGET_READ_SP = 0x%08lx\n",
                      (long) current_gdbarch->read_sp
                      /*TARGET_READ_SP ()*/);
d628 3
a630 3
                      "gdbarch_update: TARGET_WRITE_SP = 0x%08lx\n",
                      (long) current_gdbarch->write_sp
                      /*TARGET_WRITE_SP ()*/);
d632 2
a633 2
                      "gdbarch_update: NUM_REGS = %ld\n",
                      (long) NUM_REGS);
d635 2
a636 2
                      "gdbarch_update: SP_REGNUM = %ld\n",
                      (long) SP_REGNUM);
d638 2
a639 2
                      "gdbarch_update: FP_REGNUM = %ld\n",
                      (long) FP_REGNUM);
d641 2
a642 2
                      "gdbarch_update: PC_REGNUM = %ld\n",
                      (long) PC_REGNUM);
d644 3
a646 3
                      "gdbarch_update: REGISTER_NAME = 0x%08lx\n",
                      (long) current_gdbarch->register_name
                      /*REGISTER_NAME ()*/);
d648 2
a649 2
                      "gdbarch_update: REGISTER_SIZE = %ld\n",
                      (long) REGISTER_SIZE);
d651 2
a652 2
                      "gdbarch_update: REGISTER_BYTES = %ld\n",
                      (long) REGISTER_BYTES);
d654 3
a656 3
                      "gdbarch_update: REGISTER_BYTE = 0x%08lx\n",
                      (long) current_gdbarch->register_byte
                      /*REGISTER_BYTE ()*/);
d658 3
a660 3
                      "gdbarch_update: REGISTER_RAW_SIZE = 0x%08lx\n",
                      (long) current_gdbarch->register_raw_size
                      /*REGISTER_RAW_SIZE ()*/);
d662 2
a663 2
                      "gdbarch_update: MAX_REGISTER_RAW_SIZE = %ld\n",
                      (long) MAX_REGISTER_RAW_SIZE);
d665 3
a667 3
                      "gdbarch_update: REGISTER_VIRTUAL_SIZE = 0x%08lx\n",
                      (long) current_gdbarch->register_virtual_size
                      /*REGISTER_VIRTUAL_SIZE ()*/);
d669 2
a670 2
                      "gdbarch_update: MAX_REGISTER_VIRTUAL_SIZE = %ld\n",
                      (long) MAX_REGISTER_VIRTUAL_SIZE);
d672 3
a674 3
                      "gdbarch_update: REGISTER_VIRTUAL_TYPE = 0x%08lx\n",
                      (long) current_gdbarch->register_virtual_type
                      /*REGISTER_VIRTUAL_TYPE ()*/);
d676 2
a677 2
                      "gdbarch_update: USE_GENERIC_DUMMY_FRAMES = %ld\n",
                      (long) USE_GENERIC_DUMMY_FRAMES);
d679 2
a680 2
                      "gdbarch_update: CALL_DUMMY_LOCATION = %ld\n",
                      (long) CALL_DUMMY_LOCATION);
d682 3
a684 3
                      "gdbarch_update: CALL_DUMMY_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->call_dummy_address
                      /*CALL_DUMMY_ADDRESS ()*/);
d686 2
a687 2
                      "gdbarch_update: CALL_DUMMY_START_OFFSET = 0x%08lx\n",
                      (long) CALL_DUMMY_START_OFFSET);
d689 2
a690 2
                      "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET = 0x%08lx\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET);
d692 2
a693 2
                      "gdbarch_update: CALL_DUMMY_BREAKPOINT_OFFSET_P = %ld\n",
                      (long) CALL_DUMMY_BREAKPOINT_OFFSET_P);
d696 2
a697 2
                        "gdbarch_update: CALL_DUMMY_LENGTH = %ld\n",
                        (long) CALL_DUMMY_LENGTH);
d699 3
a701 3
                      "gdbarch_update: PC_IN_CALL_DUMMY = 0x%08lx\n",
                      (long) current_gdbarch->pc_in_call_dummy
                      /*PC_IN_CALL_DUMMY ()*/);
d703 2
a704 2
                      "gdbarch_update: CALL_DUMMY_P = %ld\n",
                      (long) CALL_DUMMY_P);
d706 2
a707 2
                      "gdbarch_update: CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) CALL_DUMMY_WORDS);
d709 2
a710 2
                      "gdbarch_update: SIZEOF_CALL_DUMMY_WORDS = 0x%08lx\n",
                      (long) SIZEOF_CALL_DUMMY_WORDS);
d712 2
a713 2
                      "gdbarch_update: CALL_DUMMY_STACK_ADJUST_P = 0x%08lx\n",
                      (long) CALL_DUMMY_STACK_ADJUST_P);
d716 2
a717 2
                        "gdbarch_update: CALL_DUMMY_STACK_ADJUST = 0x%08lx\n",
                        (long) CALL_DUMMY_STACK_ADJUST);
d719 3
a721 3
                      "gdbarch_update: FIX_CALL_DUMMY = 0x%08lx\n",
                      (long) current_gdbarch->fix_call_dummy
                      /*FIX_CALL_DUMMY ()*/);
d724 2
a725 2
                      "gdbarch_update: BELIEVE_PCC_PROMOTION = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION);
d729 2
a730 2
                      "gdbarch_update: BELIEVE_PCC_PROMOTION_TYPE = %ld\n",
                      (long) BELIEVE_PCC_PROMOTION_TYPE);
d733 140
a872 140
                      "gdbarch_update: GET_SAVED_REGISTER = 0x%08lx\n",
                      (long) current_gdbarch->get_saved_register
                      /*GET_SAVED_REGISTER ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERTIBLE = 0x%08lx\n",
                      (long) current_gdbarch->register_convertible
                      /*REGISTER_CONVERTIBLE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERT_TO_VIRTUAL = 0x%08lx\n",
                      (long) current_gdbarch->register_convert_to_virtual
                      /*REGISTER_CONVERT_TO_VIRTUAL ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REGISTER_CONVERT_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->register_convert_to_raw
                      /*REGISTER_CONVERT_TO_RAW ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: EXTRACT_RETURN_VALUE = 0x%08lx\n",
                      (long) current_gdbarch->extract_return_value
                      /*EXTRACT_RETURN_VALUE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_ARGUMENTS = 0x%08lx\n",
                      (long) current_gdbarch->push_arguments
                      /*PUSH_ARGUMENTS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_DUMMY_FRAME = 0x%08lx\n",
                      (long) current_gdbarch->push_dummy_frame
                      /*PUSH_DUMMY_FRAME ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: PUSH_RETURN_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->push_return_address
                      /*PUSH_RETURN_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: POP_FRAME = 0x%08lx\n",
                      (long) current_gdbarch->pop_frame
                      /*POP_FRAME ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_MAKE_DADDR = 0x%08lx\n",
                      (long) current_gdbarch->d10v_make_daddr
                      /*D10V_MAKE_DADDR ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_MAKE_IADDR = 0x%08lx\n",
                      (long) current_gdbarch->d10v_make_iaddr
                      /*D10V_MAKE_IADDR ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_DADDR_P = 0x%08lx\n",
                      (long) current_gdbarch->d10v_daddr_p
                      /*D10V_DADDR_P ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_IADDR_P = 0x%08lx\n",
                      (long) current_gdbarch->d10v_iaddr_p
                      /*D10V_IADDR_P ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_CONVERT_DADDR_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->d10v_convert_daddr_to_raw
                      /*D10V_CONVERT_DADDR_TO_RAW ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: D10V_CONVERT_IADDR_TO_RAW = 0x%08lx\n",
                      (long) current_gdbarch->d10v_convert_iaddr_to_raw
                      /*D10V_CONVERT_IADDR_TO_RAW ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: STORE_STRUCT_RETURN = 0x%08lx\n",
                      (long) current_gdbarch->store_struct_return
                      /*STORE_STRUCT_RETURN ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: STORE_RETURN_VALUE = 0x%08lx\n",
                      (long) current_gdbarch->store_return_value
                      /*STORE_RETURN_VALUE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: EXTRACT_STRUCT_VALUE_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->extract_struct_value_address
                      /*EXTRACT_STRUCT_VALUE_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: USE_STRUCT_CONVENTION = 0x%08lx\n",
                      (long) current_gdbarch->use_struct_convention
                      /*USE_STRUCT_CONVENTION ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_INIT_SAVED_REGS = 0x%08lx\n",
                      (long) current_gdbarch->frame_init_saved_regs
                      /*FRAME_INIT_SAVED_REGS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: INIT_EXTRA_FRAME_INFO = 0x%08lx\n",
                      (long) current_gdbarch->init_extra_frame_info
                      /*INIT_EXTRA_FRAME_INFO ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SKIP_PROLOGUE = 0x%08lx\n",
                      (long) current_gdbarch->skip_prologue
                      /*SKIP_PROLOGUE ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: INNER_THAN = 0x%08lx\n",
                      (long) current_gdbarch->inner_than
                      /*INNER_THAN ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: BREAKPOINT_FROM_PC = 0x%08lx\n",
                      (long) current_gdbarch->breakpoint_from_pc
                      /*BREAKPOINT_FROM_PC ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: DECR_PC_AFTER_BREAK = %ld\n",
                      (long) DECR_PC_AFTER_BREAK);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FUNCTION_START_OFFSET = %ld\n",
                      (long) FUNCTION_START_OFFSET);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: REMOTE_TRANSLATE_XFER_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->remote_translate_xfer_address
                      /*REMOTE_TRANSLATE_XFER_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_ARGS_SKIP = %ld\n",
                      (long) FRAME_ARGS_SKIP);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAMELESS_FUNCTION_INVOCATION = 0x%08lx\n",
                      (long) current_gdbarch->frameless_function_invocation
                      /*FRAMELESS_FUNCTION_INVOCATION ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_CHAIN = 0x%08lx\n",
                      (long) current_gdbarch->frame_chain
                      /*FRAME_CHAIN ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_CHAIN_VALID = 0x%08lx\n",
                      (long) current_gdbarch->frame_chain_valid
                      /*FRAME_CHAIN_VALID ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_SAVED_PC = 0x%08lx\n",
                      (long) current_gdbarch->frame_saved_pc
                      /*FRAME_SAVED_PC ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_ARGS_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->frame_args_address
                      /*FRAME_ARGS_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_LOCALS_ADDRESS = 0x%08lx\n",
                      (long) current_gdbarch->frame_locals_address
                      /*FRAME_LOCALS_ADDRESS ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: SAVED_PC_AFTER_CALL = 0x%08lx\n",
                      (long) current_gdbarch->saved_pc_after_call
                      /*SAVED_PC_AFTER_CALL ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: FRAME_NUM_ARGS = 0x%08lx\n",
                      (long) current_gdbarch->frame_num_args
                      /*FRAME_NUM_ARGS ()*/);
d877 1
a877 1
    struct gdbarch *gdbarch;
d888 1
a888 1
    struct gdbarch *gdbarch;
d898 1
a898 1
    struct gdbarch *gdbarch;
d908 1
a908 1
    struct gdbarch *gdbarch;
d920 2
a921 2
    struct gdbarch *gdbarch;
    int ptr_bit;
d928 1
a928 1
    struct gdbarch *gdbarch;
d940 2
a941 2
    struct gdbarch *gdbarch;
    int short_bit;
d948 1
a948 1
    struct gdbarch *gdbarch;
d960 2
a961 2
    struct gdbarch *gdbarch;
    int int_bit;
d968 1
a968 1
    struct gdbarch *gdbarch;
d980 2
a981 2
    struct gdbarch *gdbarch;
    int long_bit;
d988 1
a988 1
    struct gdbarch *gdbarch;
d1000 2
a1001 2
    struct gdbarch *gdbarch;
    int long_long_bit;
d1008 1
a1008 1
    struct gdbarch *gdbarch;
d1020 2
a1021 2
    struct gdbarch *gdbarch;
    int float_bit;
d1028 1
a1028 1
    struct gdbarch *gdbarch;
d1040 2
a1041 2
    struct gdbarch *gdbarch;
    int double_bit;
d1048 1
a1048 1
    struct gdbarch *gdbarch;
d1060 2
a1061 2
    struct gdbarch *gdbarch;
    int long_double_bit;
d1079 2
a1080 2
    struct gdbarch *gdbarch;
    gdbarch_read_pc_ftype read_pc;
d1098 2
a1099 2
    struct gdbarch *gdbarch;
    gdbarch_write_pc_ftype write_pc;
d1117 2
a1118 2
    struct gdbarch *gdbarch;
    gdbarch_read_fp_ftype read_fp;
d1136 2
a1137 2
    struct gdbarch *gdbarch;
    gdbarch_write_fp_ftype write_fp;
d1155 2
a1156 2
    struct gdbarch *gdbarch;
    gdbarch_read_sp_ftype read_sp;
d1174 2
a1175 2
    struct gdbarch *gdbarch;
    gdbarch_write_sp_ftype write_sp;
d1182 1
a1182 1
    struct gdbarch *gdbarch;
d1194 2
a1195 2
    struct gdbarch *gdbarch;
    int num_regs;
d1202 1
a1202 1
    struct gdbarch *gdbarch;
d1214 2
a1215 2
    struct gdbarch *gdbarch;
    int sp_regnum;
d1222 1
a1222 1
    struct gdbarch *gdbarch;
d1234 2
a1235 2
    struct gdbarch *gdbarch;
    int fp_regnum;
d1242 1
a1242 1
    struct gdbarch *gdbarch;
d1254 2
a1255 2
    struct gdbarch *gdbarch;
    int pc_regnum;
d1273 2
a1274 2
    struct gdbarch *gdbarch;
    gdbarch_register_name_ftype register_name;
d1281 1
a1281 1
    struct gdbarch *gdbarch;
d1293 2
a1294 2
    struct gdbarch *gdbarch;
    int register_size;
d1301 1
a1301 1
    struct gdbarch *gdbarch;
d1313 2
a1314 2
    struct gdbarch *gdbarch;
    int register_bytes;
d1332 2
a1333 2
    struct gdbarch *gdbarch;
    gdbarch_register_byte_ftype register_byte;
d1351 2
a1352 2
    struct gdbarch *gdbarch;
    gdbarch_register_raw_size_ftype register_raw_size;
d1359 1
a1359 1
    struct gdbarch *gdbarch;
d1371 2
a1372 2
    struct gdbarch *gdbarch;
    int max_register_raw_size;
d1390 2
a1391 2
    struct gdbarch *gdbarch;
    gdbarch_register_virtual_size_ftype register_virtual_size;
d1398 1
a1398 1
    struct gdbarch *gdbarch;
d1410 2
a1411 2
    struct gdbarch *gdbarch;
    int max_register_virtual_size;
d1429 2
a1430 2
    struct gdbarch *gdbarch;
    gdbarch_register_virtual_type_ftype register_virtual_type;
d1437 1
a1437 1
    struct gdbarch *gdbarch;
d1449 2
a1450 2
    struct gdbarch *gdbarch;
    int use_generic_dummy_frames;
d1457 1
a1457 1
    struct gdbarch *gdbarch;
d1469 2
a1470 2
    struct gdbarch *gdbarch;
    int call_dummy_location;
d1488 2
a1489 2
    struct gdbarch *gdbarch;
    gdbarch_call_dummy_address_ftype call_dummy_address;
d1496 1
a1496 1
    struct gdbarch *gdbarch;
d1508 2
a1509 2
    struct gdbarch *gdbarch;
    CORE_ADDR call_dummy_start_offset;
d1516 1
a1516 1
    struct gdbarch *gdbarch;
d1528 2
a1529 2
    struct gdbarch *gdbarch;
    CORE_ADDR call_dummy_breakpoint_offset;
d1536 1
a1536 1
    struct gdbarch *gdbarch;
d1548 2
a1549 2
    struct gdbarch *gdbarch;
    int call_dummy_breakpoint_offset_p;
d1556 1
a1556 1
    struct gdbarch *gdbarch;
d1568 2
a1569 2
    struct gdbarch *gdbarch;
    int call_dummy_length;
d1587 2
a1588 2
    struct gdbarch *gdbarch;
    gdbarch_pc_in_call_dummy_ftype pc_in_call_dummy;
d1595 1
a1595 1
    struct gdbarch *gdbarch;
d1607 2
a1608 2
    struct gdbarch *gdbarch;
    int call_dummy_p;
d1615 1
a1615 1
    struct gdbarch *gdbarch;
d1625 2
a1626 2
    struct gdbarch *gdbarch;
    LONGEST * call_dummy_words;
d1633 1
a1633 1
    struct gdbarch *gdbarch;
d1643 2
a1644 2
    struct gdbarch *gdbarch;
    int sizeof_call_dummy_words;
d1651 1
a1651 1
    struct gdbarch *gdbarch;
d1663 2
a1664 2
    struct gdbarch *gdbarch;
    int call_dummy_stack_adjust_p;
d1671 1
a1671 1
    struct gdbarch *gdbarch;
d1683 2
a1684 2
    struct gdbarch *gdbarch;
    int call_dummy_stack_adjust;
d1702 2
a1703 2
    struct gdbarch *gdbarch;
    gdbarch_fix_call_dummy_ftype fix_call_dummy;
d1710 1
a1710 1
    struct gdbarch *gdbarch;
d1720 2
a1721 2
    struct gdbarch *gdbarch;
    int believe_pcc_promotion;
d1728 1
a1728 1
    struct gdbarch *gdbarch;
d1738 2
a1739 2
    struct gdbarch *gdbarch;
    int believe_pcc_promotion_type;
d1745 1
a1745 1
gdbarch_get_saved_register (struct gdbarch *gdbarch, char *raw_buffer, int *optimized, CORE_ADDR *addrp, struct frame_info *frame, int regnum, enum lval_type *lval)
d1757 2
a1758 2
    struct gdbarch *gdbarch;
    gdbarch_get_saved_register_ftype get_saved_register;
d1776 2
a1777 2
    struct gdbarch *gdbarch;
    gdbarch_register_convertible_ftype register_convertible;
d1795 2
a1796 2
    struct gdbarch *gdbarch;
    gdbarch_register_convert_to_virtual_ftype register_convert_to_virtual;
d1814 2
a1815 2
    struct gdbarch *gdbarch;
    gdbarch_register_convert_to_raw_ftype register_convert_to_raw;
d1833 2
a1834 2
    struct gdbarch *gdbarch;
    gdbarch_extract_return_value_ftype extract_return_value;
d1852 2
a1853 2
    struct gdbarch *gdbarch;
    gdbarch_push_arguments_ftype push_arguments;
d1871 2
a1872 2
    struct gdbarch *gdbarch;
    gdbarch_push_dummy_frame_ftype push_dummy_frame;
d1890 2
a1891 2
    struct gdbarch *gdbarch;
    gdbarch_push_return_address_ftype push_return_address;
d1909 2
a1910 2
    struct gdbarch *gdbarch;
    gdbarch_pop_frame_ftype pop_frame;
d1928 2
a1929 2
    struct gdbarch *gdbarch;
    gdbarch_d10v_make_daddr_ftype d10v_make_daddr;
d1947 2
a1948 2
    struct gdbarch *gdbarch;
    gdbarch_d10v_make_iaddr_ftype d10v_make_iaddr;
d1966 2
a1967 2
    struct gdbarch *gdbarch;
    gdbarch_d10v_daddr_p_ftype d10v_daddr_p;
d1985 2
a1986 2
    struct gdbarch *gdbarch;
    gdbarch_d10v_iaddr_p_ftype d10v_iaddr_p;
d2004 2
a2005 2
    struct gdbarch *gdbarch;
    gdbarch_d10v_convert_daddr_to_raw_ftype d10v_convert_daddr_to_raw;
d2023 2
a2024 2
    struct gdbarch *gdbarch;
    gdbarch_d10v_convert_iaddr_to_raw_ftype d10v_convert_iaddr_to_raw;
d2042 2
a2043 2
    struct gdbarch *gdbarch;
    gdbarch_store_struct_return_ftype store_struct_return;
d2061 2
a2062 2
    struct gdbarch *gdbarch;
    gdbarch_store_return_value_ftype store_return_value;
d2080 2
a2081 2
    struct gdbarch *gdbarch;
    gdbarch_extract_struct_value_address_ftype extract_struct_value_address;
d2099 2
a2100 2
    struct gdbarch *gdbarch;
    gdbarch_use_struct_convention_ftype use_struct_convention;
d2118 2
a2119 2
    struct gdbarch *gdbarch;
    gdbarch_frame_init_saved_regs_ftype frame_init_saved_regs;
d2137 2
a2138 2
    struct gdbarch *gdbarch;
    gdbarch_init_extra_frame_info_ftype init_extra_frame_info;
d2156 2
a2157 2
    struct gdbarch *gdbarch;
    gdbarch_skip_prologue_ftype skip_prologue;
d2175 2
a2176 2
    struct gdbarch *gdbarch;
    gdbarch_inner_than_ftype inner_than;
d2182 1
a2182 1
gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch, CORE_ADDR *pcptr, int *lenptr)
d2194 2
a2195 2
    struct gdbarch *gdbarch;
    gdbarch_breakpoint_from_pc_ftype breakpoint_from_pc;
d2202 1
a2202 1
    struct gdbarch *gdbarch;
d2214 2
a2215 2
    struct gdbarch *gdbarch;
    CORE_ADDR decr_pc_after_break;
d2222 1
a2222 1
    struct gdbarch *gdbarch;
d2234 2
a2235 2
    struct gdbarch *gdbarch;
    CORE_ADDR function_start_offset;
d2241 1
a2241 1
gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch, CORE_ADDR gdb_addr, int gdb_len, CORE_ADDR *rem_addr, int *rem_len)
d2253 2
a2254 2
    struct gdbarch *gdbarch;
    gdbarch_remote_translate_xfer_address_ftype remote_translate_xfer_address;
d2261 1
a2261 1
    struct gdbarch *gdbarch;
d2273 2
a2274 2
    struct gdbarch *gdbarch;
    CORE_ADDR frame_args_skip;
d2292 2
a2293 2
    struct gdbarch *gdbarch;
    gdbarch_frameless_function_invocation_ftype frameless_function_invocation;
d2311 2
a2312 2
    struct gdbarch *gdbarch;
    gdbarch_frame_chain_ftype frame_chain;
d2330 2
a2331 2
    struct gdbarch *gdbarch;
    gdbarch_frame_chain_valid_ftype frame_chain_valid;
d2349 2
a2350 2
    struct gdbarch *gdbarch;
    gdbarch_frame_saved_pc_ftype frame_saved_pc;
d2368 2
a2369 2
    struct gdbarch *gdbarch;
    gdbarch_frame_args_address_ftype frame_args_address;
d2387 2
a2388 2
    struct gdbarch *gdbarch;
    gdbarch_frame_locals_address_ftype frame_locals_address;
d2406 2
a2407 2
    struct gdbarch *gdbarch;
    gdbarch_saved_pc_after_call_ftype saved_pc_after_call;
d2425 2
a2426 2
    struct gdbarch *gdbarch;
    gdbarch_frame_num_args_ftype frame_num_args;
d2441 5
a2445 5
{
  gdbarch_data_ftype *init;
  struct gdbarch_data *data;
  struct gdbarch_data_registration *next;
};
d2448 4
a2451 4
{
  int nr;
  struct gdbarch_data_registration *registrations;
};
d2484 1
a2484 1
  gdbarch->data = xmalloc (sizeof (void*) * gdbarch->nr_data);
d2519 6
a2524 6
{
  void *data;
  unsigned long sizeof_data;
  gdbarch_swap_ftype *init;
  struct gdbarch_swap_registration *next;
};
d2527 4
a2530 4
{
  int nr;
  struct gdbarch_swap_registration *registrations;
};
d2532 1
a2532 1
struct gdbarch_swap_registrary gdbarch_swap_registrary = 
d2651 1
a2651 1
  
d2732 1
a2732 1
			  bfd_lookup_arch (info.bfd_architecture, 0)->printable_name);
d2792 1
a2792 1
    
d2803 1
a2803 1
			  "gdbarch_update: New architecture 0x%08lx (%s) selected\n",
d2808 1
a2808 1
  
d2816 1
a2816 1
  
d2821 1
a2821 1
  
d2847 1
a2847 1
#define TARGET_BYTE_ORDER_DEFAULT BIG_ENDIAN /* arbitrary */
d2863 3
a2865 3
    (TARGET_BYTE_ORDER_AUTO
     ? "The target endianness is set automatically (currently %s endian)\n"
     : "The target is assumed to be %s endian\n");
d2959 1
a2959 1
      
d2989 1
a2989 1
int (*target_architecture_hook) PARAMS ((const struct bfd_arch_info *ap));
d2993 1
a2993 1
static int arch_ok PARAMS ((const struct bfd_arch_info *arch));
d3005 4
a3008 1
enum set_arch { set_arch_auto, set_arch_manual };
d3010 1
a3010 1
static void set_arch PARAMS ((const struct bfd_arch_info *arch, enum set_arch type));
d3202 1
a3202 1
  
d3262 1
a3262 1
  INIT_DISASSEMBLE_INFO_NO_ARCH (tm_print_insn_info, gdb_stdout, (fprintf_ftype)fprintf_filtered);
d3271 1
a3271 1
				  (char *)&gdbarch_debug,
@


1.1.1.9
log
@import gdb-1999-08-09 snapshot
@
text
@d1 1
d5 1
a5 16
   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d7 13
a19 1
/* *INDENT-OFF* */ /* typedef (f)();'' confuses indent */
d339 1
a339 1
    internal_error ("verify_gdbarch: byte-order unset");
d341 1
a341 1
    internal_error ("verify_gdbarch: bfd_arch_info unset");
d345 1
a345 1
    internal_error ("gdbarch: verify_gdbarch: ptr_bit invalid");
d348 1
a348 1
    internal_error ("gdbarch: verify_gdbarch: short_bit invalid");
d351 1
a351 1
    internal_error ("gdbarch: verify_gdbarch: int_bit invalid");
d354 1
a354 1
    internal_error ("gdbarch: verify_gdbarch: long_bit invalid");
d357 1
a357 1
    internal_error ("gdbarch: verify_gdbarch: long_long_bit invalid");
d360 1
a360 1
    internal_error ("gdbarch: verify_gdbarch: float_bit invalid");
d363 1
a363 1
    internal_error ("gdbarch: verify_gdbarch: double_bit invalid");
d366 1
a366 1
    internal_error ("gdbarch: verify_gdbarch: long_double_bit invalid");
d369 1
a369 1
    internal_error ("gdbarch: verify_gdbarch: read_pc invalid");
d372 1
a372 1
    internal_error ("gdbarch: verify_gdbarch: write_pc invalid");
d375 1
a375 1
    internal_error ("gdbarch: verify_gdbarch: read_fp invalid");
d378 1
a378 1
    internal_error ("gdbarch: verify_gdbarch: write_fp invalid");
d381 1
a381 1
    internal_error ("gdbarch: verify_gdbarch: read_sp invalid");
d384 1
a384 1
    internal_error ("gdbarch: verify_gdbarch: write_sp invalid");
d387 1
a387 1
    internal_error ("gdbarch: verify_gdbarch: num_regs invalid");
d390 1
a390 1
    internal_error ("gdbarch: verify_gdbarch: sp_regnum invalid");
d393 1
a393 1
    internal_error ("gdbarch: verify_gdbarch: fp_regnum invalid");
d396 1
a396 1
    internal_error ("gdbarch: verify_gdbarch: pc_regnum invalid");
d399 1
a399 1
    internal_error ("gdbarch: verify_gdbarch: register_name invalid");
d402 1
a402 1
    internal_error ("gdbarch: verify_gdbarch: register_size invalid");
d405 1
a405 1
    internal_error ("gdbarch: verify_gdbarch: register_bytes invalid");
d408 1
a408 1
    internal_error ("gdbarch: verify_gdbarch: register_byte invalid");
d411 1
a411 1
    internal_error ("gdbarch: verify_gdbarch: register_raw_size invalid");
d414 1
a414 1
    internal_error ("gdbarch: verify_gdbarch: max_register_raw_size invalid");
d417 1
a417 1
    internal_error ("gdbarch: verify_gdbarch: register_virtual_size invalid");
d420 1
a420 1
    internal_error ("gdbarch: verify_gdbarch: max_register_virtual_size invalid");
d423 1
a423 1
    internal_error ("gdbarch: verify_gdbarch: register_virtual_type invalid");
d426 1
a426 1
    internal_error ("gdbarch: verify_gdbarch: use_generic_dummy_frames invalid");
d429 1
a429 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_location invalid");
d432 1
a432 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_address invalid");
d435 1
a435 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_start_offset invalid");
d438 1
a438 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_breakpoint_offset invalid");
d441 1
a441 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_breakpoint_offset_p invalid");
d444 1
a444 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_length invalid");
d447 1
a447 1
    internal_error ("gdbarch: verify_gdbarch: pc_in_call_dummy invalid");
d450 1
a450 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_p invalid");
d453 1
a453 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_stack_adjust_p invalid");
d456 1
a456 1
    internal_error ("gdbarch: verify_gdbarch: call_dummy_stack_adjust invalid");
d459 1
a459 1
    internal_error ("gdbarch: verify_gdbarch: fix_call_dummy invalid");
d462 1
a462 1
    internal_error ("gdbarch: verify_gdbarch: get_saved_register invalid");
d465 1
a465 1
    internal_error ("gdbarch: verify_gdbarch: register_convertible invalid");
d468 1
a468 1
    internal_error ("gdbarch: verify_gdbarch: register_convert_to_virtual invalid");
d471 1
a471 1
    internal_error ("gdbarch: verify_gdbarch: register_convert_to_raw invalid");
d474 1
a474 1
    internal_error ("gdbarch: verify_gdbarch: extract_return_value invalid");
d477 1
a477 1
    internal_error ("gdbarch: verify_gdbarch: push_arguments invalid");
d480 1
a480 1
    internal_error ("gdbarch: verify_gdbarch: push_dummy_frame invalid");
d483 1
a483 1
    internal_error ("gdbarch: verify_gdbarch: push_return_address invalid");
d486 1
a486 1
    internal_error ("gdbarch: verify_gdbarch: pop_frame invalid");
d489 1
a489 1
    internal_error ("gdbarch: verify_gdbarch: d10v_make_daddr invalid");
d492 1
a492 1
    internal_error ("gdbarch: verify_gdbarch: d10v_make_iaddr invalid");
d495 1
a495 1
    internal_error ("gdbarch: verify_gdbarch: d10v_daddr_p invalid");
d498 1
a498 1
    internal_error ("gdbarch: verify_gdbarch: d10v_iaddr_p invalid");
d501 1
a501 1
    internal_error ("gdbarch: verify_gdbarch: d10v_convert_daddr_to_raw invalid");
d504 1
a504 1
    internal_error ("gdbarch: verify_gdbarch: d10v_convert_iaddr_to_raw invalid");
d507 1
a507 1
    internal_error ("gdbarch: verify_gdbarch: store_struct_return invalid");
d510 1
a510 1
    internal_error ("gdbarch: verify_gdbarch: store_return_value invalid");
d513 1
a513 1
    internal_error ("gdbarch: verify_gdbarch: extract_struct_value_address invalid");
d516 1
a516 1
    internal_error ("gdbarch: verify_gdbarch: use_struct_convention invalid");
d519 1
a519 1
    internal_error ("gdbarch: verify_gdbarch: frame_init_saved_regs invalid");
d522 1
a522 1
    internal_error ("gdbarch: verify_gdbarch: init_extra_frame_info invalid");
d525 1
a525 1
    internal_error ("gdbarch: verify_gdbarch: skip_prologue invalid");
d528 1
a528 1
    internal_error ("gdbarch: verify_gdbarch: inner_than invalid");
d531 1
a531 1
    internal_error ("gdbarch: verify_gdbarch: breakpoint_from_pc invalid");
d534 1
a534 1
    internal_error ("gdbarch: verify_gdbarch: decr_pc_after_break invalid");
d537 1
a537 1
    internal_error ("gdbarch: verify_gdbarch: function_start_offset invalid");
d540 1
a540 1
    internal_error ("gdbarch: verify_gdbarch: remote_translate_xfer_address invalid");
d543 1
a543 1
    internal_error ("gdbarch: verify_gdbarch: frame_args_skip invalid");
d546 1
a546 1
    internal_error ("gdbarch: verify_gdbarch: frameless_function_invocation invalid");
d549 1
a549 1
    internal_error ("gdbarch: verify_gdbarch: frame_chain invalid");
d552 1
a552 1
    internal_error ("gdbarch: verify_gdbarch: frame_chain_valid invalid");
d555 1
a555 1
    internal_error ("gdbarch: verify_gdbarch: frame_saved_pc invalid");
d558 1
a558 1
    internal_error ("gdbarch: verify_gdbarch: frame_args_address invalid");
d561 1
a561 1
    internal_error ("gdbarch: verify_gdbarch: frame_locals_address invalid");
d564 1
a564 1
    internal_error ("gdbarch: verify_gdbarch: saved_pc_after_call invalid");
d567 1
a567 1
    internal_error ("gdbarch: verify_gdbarch: frame_num_args invalid");
d911 1
a911 1
    internal_error ("gdbarch: gdbarch_ptr_bit invalid");
d931 1
a931 1
    internal_error ("gdbarch: gdbarch_short_bit invalid");
d951 1
a951 1
    internal_error ("gdbarch: gdbarch_int_bit invalid");
d971 1
a971 1
    internal_error ("gdbarch: gdbarch_long_bit invalid");
d991 1
a991 1
    internal_error ("gdbarch: gdbarch_long_long_bit invalid");
d1011 1
a1011 1
    internal_error ("gdbarch: gdbarch_float_bit invalid");
d1031 1
a1031 1
    internal_error ("gdbarch: gdbarch_double_bit invalid");
d1051 1
a1051 1
    internal_error ("gdbarch: gdbarch_long_double_bit invalid");
d1070 1
a1070 1
    internal_error ("gdbarch: gdbarch_read_pc invalid");
d1089 1
a1089 1
    internal_error ("gdbarch: gdbarch_write_pc invalid");
d1108 1
a1108 1
    internal_error ("gdbarch: gdbarch_read_fp invalid");
d1127 1
a1127 1
    internal_error ("gdbarch: gdbarch_write_fp invalid");
d1146 1
a1146 1
    internal_error ("gdbarch: gdbarch_read_sp invalid");
d1165 1
a1165 1
    internal_error ("gdbarch: gdbarch_write_sp invalid");
d1185 1
a1185 1
    internal_error ("gdbarch: gdbarch_num_regs invalid");
d1205 1
a1205 1
    internal_error ("gdbarch: gdbarch_sp_regnum invalid");
d1225 1
a1225 1
    internal_error ("gdbarch: gdbarch_fp_regnum invalid");
d1245 1
a1245 1
    internal_error ("gdbarch: gdbarch_pc_regnum invalid");
d1263 2
a1264 2
  if (gdbarch->register_name == 0 || 1)
    internal_error ("gdbarch: gdbarch_register_name invalid");
d1284 1
a1284 1
    internal_error ("gdbarch: gdbarch_register_size invalid");
d1304 1
a1304 1
    internal_error ("gdbarch: gdbarch_register_bytes invalid");
d1323 1
a1323 1
    internal_error ("gdbarch: gdbarch_register_byte invalid");
d1342 1
a1342 1
    internal_error ("gdbarch: gdbarch_register_raw_size invalid");
d1362 1
a1362 1
    internal_error ("gdbarch: gdbarch_max_register_raw_size invalid");
d1381 1
a1381 1
    internal_error ("gdbarch: gdbarch_register_virtual_size invalid");
d1401 1
a1401 1
    internal_error ("gdbarch: gdbarch_max_register_virtual_size invalid");
d1420 1
a1420 1
    internal_error ("gdbarch: gdbarch_register_virtual_type invalid");
d1440 1
a1440 1
    internal_error ("gdbarch: gdbarch_use_generic_dummy_frames invalid");
d1460 1
a1460 1
    internal_error ("gdbarch: gdbarch_call_dummy_location invalid");
d1479 1
a1479 1
    internal_error ("gdbarch: gdbarch_call_dummy_address invalid");
d1499 1
a1499 1
    internal_error ("gdbarch: gdbarch_call_dummy_start_offset invalid");
d1519 1
a1519 1
    internal_error ("gdbarch: gdbarch_call_dummy_breakpoint_offset invalid");
d1539 1
a1539 1
    internal_error ("gdbarch: gdbarch_call_dummy_breakpoint_offset_p invalid");
d1559 1
a1559 1
    internal_error ("gdbarch: gdbarch_call_dummy_length invalid");
d1578 1
a1578 1
    internal_error ("gdbarch: gdbarch_pc_in_call_dummy invalid");
d1598 1
a1598 1
    internal_error ("gdbarch: gdbarch_call_dummy_p invalid");
d1654 1
a1654 1
    internal_error ("gdbarch: gdbarch_call_dummy_stack_adjust_p invalid");
d1674 1
a1674 1
    internal_error ("gdbarch: gdbarch_call_dummy_stack_adjust invalid");
d1693 1
a1693 1
    internal_error ("gdbarch: gdbarch_fix_call_dummy invalid");
d1748 1
a1748 1
    internal_error ("gdbarch: gdbarch_get_saved_register invalid");
d1767 1
a1767 1
    internal_error ("gdbarch: gdbarch_register_convertible invalid");
d1786 1
a1786 1
    internal_error ("gdbarch: gdbarch_register_convert_to_virtual invalid");
d1805 1
a1805 1
    internal_error ("gdbarch: gdbarch_register_convert_to_raw invalid");
d1824 1
a1824 1
    internal_error ("gdbarch: gdbarch_extract_return_value invalid");
d1843 1
a1843 1
    internal_error ("gdbarch: gdbarch_push_arguments invalid");
d1862 1
a1862 1
    internal_error ("gdbarch: gdbarch_push_dummy_frame invalid");
d1881 1
a1881 1
    internal_error ("gdbarch: gdbarch_push_return_address invalid");
d1900 1
a1900 1
    internal_error ("gdbarch: gdbarch_pop_frame invalid");
d1919 1
a1919 1
    internal_error ("gdbarch: gdbarch_d10v_make_daddr invalid");
d1938 1
a1938 1
    internal_error ("gdbarch: gdbarch_d10v_make_iaddr invalid");
d1957 1
a1957 1
    internal_error ("gdbarch: gdbarch_d10v_daddr_p invalid");
d1976 1
a1976 1
    internal_error ("gdbarch: gdbarch_d10v_iaddr_p invalid");
d1995 1
a1995 1
    internal_error ("gdbarch: gdbarch_d10v_convert_daddr_to_raw invalid");
d2014 1
a2014 1
    internal_error ("gdbarch: gdbarch_d10v_convert_iaddr_to_raw invalid");
d2033 1
a2033 1
    internal_error ("gdbarch: gdbarch_store_struct_return invalid");
d2052 1
a2052 1
    internal_error ("gdbarch: gdbarch_store_return_value invalid");
d2071 1
a2071 1
    internal_error ("gdbarch: gdbarch_extract_struct_value_address invalid");
d2090 1
a2090 1
    internal_error ("gdbarch: gdbarch_use_struct_convention invalid");
d2109 1
a2109 1
    internal_error ("gdbarch: gdbarch_frame_init_saved_regs invalid");
d2128 1
a2128 1
    internal_error ("gdbarch: gdbarch_init_extra_frame_info invalid");
d2147 1
a2147 1
    internal_error ("gdbarch: gdbarch_skip_prologue invalid");
d2166 1
a2166 1
    internal_error ("gdbarch: gdbarch_inner_than invalid");
d2185 1
a2185 1
    internal_error ("gdbarch: gdbarch_breakpoint_from_pc invalid");
d2205 1
a2205 1
    internal_error ("gdbarch: gdbarch_decr_pc_after_break invalid");
d2225 1
a2225 1
    internal_error ("gdbarch: gdbarch_function_start_offset invalid");
d2244 1
a2244 1
    internal_error ("gdbarch: gdbarch_remote_translate_xfer_address invalid");
d2264 1
a2264 1
    internal_error ("gdbarch: gdbarch_frame_args_skip invalid");
d2283 1
a2283 1
    internal_error ("gdbarch: gdbarch_frameless_function_invocation invalid");
d2302 1
a2302 1
    internal_error ("gdbarch: gdbarch_frame_chain invalid");
d2321 1
a2321 1
    internal_error ("gdbarch: gdbarch_frame_chain_valid invalid");
d2340 1
a2340 1
    internal_error ("gdbarch: gdbarch_frame_saved_pc invalid");
d2359 1
a2359 1
    internal_error ("gdbarch: gdbarch_frame_args_address invalid");
d2378 1
a2378 1
    internal_error ("gdbarch: gdbarch_frame_locals_address invalid");
d2397 1
a2397 1
    internal_error ("gdbarch: gdbarch_saved_pc_after_call invalid");
d2416 1
a2416 1
    internal_error ("gdbarch: gdbarch_frame_num_args invalid");
d2503 1
a2503 1
    internal_error ("gdbarch_data: request for non-existant data.");
d2628 1
a2628 1
      internal_error ("gdbarch: Attempt to register unknown architecture (%d)", bfd_architecture);
d2636 1
a2636 1
	internal_error ("gdbarch: Duplicate registraration of architecture (%s)",
d3160 1
a3160 1
    internal_error ("gdbarch: hardwired architecture/machine not reconized");
@


1.1.1.10
log
@import gdb-1999-08-16 snapshot
@
text
@d1265 1
a1265 1
  if (gdbarch->register_name == 0)
@


1.1.1.11
log
@import gdb-1999-08-30 snapshot
@
text
@d21 1
a21 13
/* *INDENT-OFF* */ /* ``typedef (f)();'' confuses indent */

/* This file was created with the aid of ``gdbarch.sh''.

   The bourn shell script ``gdbarch.sh'' creates the files
   ``new-gdbarch.c'' and ``new-gdbarch.h and then compares them
   against the existing ``gdbarch.[hc]''.  Any differences found
   being reported.

   If editing this file, please also run gdbarch.sh and merge any
   changes into that script. Conversely, when makeing sweeping changes
   to this file, modifying gdbarch.sh and using its output may prove
   easier. */
a48 8
/* Static function declarations */

static void verify_gdbarch (struct gdbarch *gdbarch);
static void init_gdbarch_data (struct gdbarch *);
static void init_gdbarch_swap (struct gdbarch *);
static void swapout_gdbarch_swap (struct gdbarch *);
static void swapin_gdbarch_swap (struct gdbarch *);

d292 3
a294 2
gdbarch_alloc (const struct gdbarch_info *info,
               struct gdbarch_tdep *tdep)
d331 1
d333 2
a334 1
verify_gdbarch (struct gdbarch *gdbarch)
d576 1
a576 1
gdbarch_dump (void)
d878 2
a879 1
gdbarch_tdep (struct gdbarch *gdbarch)
d889 2
a890 1
gdbarch_bfd_arch_info (struct gdbarch *gdbarch)
d899 2
a900 1
gdbarch_byte_order (struct gdbarch *gdbarch)
d909 2
a910 1
gdbarch_ptr_bit (struct gdbarch *gdbarch)
d921 3
a923 2
set_gdbarch_ptr_bit (struct gdbarch *gdbarch,
                     int ptr_bit)
d929 2
a930 1
gdbarch_short_bit (struct gdbarch *gdbarch)
d941 3
a943 2
set_gdbarch_short_bit (struct gdbarch *gdbarch,
                       int short_bit)
d949 2
a950 1
gdbarch_int_bit (struct gdbarch *gdbarch)
d961 3
a963 2
set_gdbarch_int_bit (struct gdbarch *gdbarch,
                     int int_bit)
d969 2
a970 1
gdbarch_long_bit (struct gdbarch *gdbarch)
d981 3
a983 2
set_gdbarch_long_bit (struct gdbarch *gdbarch,
                      int long_bit)
d989 2
a990 1
gdbarch_long_long_bit (struct gdbarch *gdbarch)
d1001 3
a1003 2
set_gdbarch_long_long_bit (struct gdbarch *gdbarch,
                           int long_long_bit)
d1009 2
a1010 1
gdbarch_float_bit (struct gdbarch *gdbarch)
d1021 3
a1023 2
set_gdbarch_float_bit (struct gdbarch *gdbarch,
                       int float_bit)
d1029 2
a1030 1
gdbarch_double_bit (struct gdbarch *gdbarch)
d1041 3
a1043 2
set_gdbarch_double_bit (struct gdbarch *gdbarch,
                        int double_bit)
d1049 2
a1050 1
gdbarch_long_double_bit (struct gdbarch *gdbarch)
d1061 3
a1063 2
set_gdbarch_long_double_bit (struct gdbarch *gdbarch,
                             int long_double_bit)
d1080 3
a1082 2
set_gdbarch_read_pc (struct gdbarch *gdbarch,
                     gdbarch_read_pc_ftype read_pc)
d1099 3
a1101 2
set_gdbarch_write_pc (struct gdbarch *gdbarch,
                      gdbarch_write_pc_ftype write_pc)
d1118 3
a1120 2
set_gdbarch_read_fp (struct gdbarch *gdbarch,
                     gdbarch_read_fp_ftype read_fp)
d1137 3
a1139 2
set_gdbarch_write_fp (struct gdbarch *gdbarch,
                      gdbarch_write_fp_ftype write_fp)
d1156 3
a1158 2
set_gdbarch_read_sp (struct gdbarch *gdbarch,
                     gdbarch_read_sp_ftype read_sp)
d1175 3
a1177 2
set_gdbarch_write_sp (struct gdbarch *gdbarch,
                      gdbarch_write_sp_ftype write_sp)
d1183 2
a1184 1
gdbarch_num_regs (struct gdbarch *gdbarch)
d1195 3
a1197 2
set_gdbarch_num_regs (struct gdbarch *gdbarch,
                      int num_regs)
d1203 2
a1204 1
gdbarch_sp_regnum (struct gdbarch *gdbarch)
d1215 3
a1217 2
set_gdbarch_sp_regnum (struct gdbarch *gdbarch,
                       int sp_regnum)
d1223 2
a1224 1
gdbarch_fp_regnum (struct gdbarch *gdbarch)
d1235 3
a1237 2
set_gdbarch_fp_regnum (struct gdbarch *gdbarch,
                       int fp_regnum)
d1243 2
a1244 1
gdbarch_pc_regnum (struct gdbarch *gdbarch)
d1255 3
a1257 2
set_gdbarch_pc_regnum (struct gdbarch *gdbarch,
                       int pc_regnum)
d1274 3
a1276 2
set_gdbarch_register_name (struct gdbarch *gdbarch,
                           gdbarch_register_name_ftype register_name)
d1282 2
a1283 1
gdbarch_register_size (struct gdbarch *gdbarch)
d1294 3
a1296 2
set_gdbarch_register_size (struct gdbarch *gdbarch,
                           int register_size)
d1302 2
a1303 1
gdbarch_register_bytes (struct gdbarch *gdbarch)
d1314 3
a1316 2
set_gdbarch_register_bytes (struct gdbarch *gdbarch,
                            int register_bytes)
d1333 3
a1335 2
set_gdbarch_register_byte (struct gdbarch *gdbarch,
                           gdbarch_register_byte_ftype register_byte)
d1352 3
a1354 2
set_gdbarch_register_raw_size (struct gdbarch *gdbarch,
                               gdbarch_register_raw_size_ftype register_raw_size)
d1360 2
a1361 1
gdbarch_max_register_raw_size (struct gdbarch *gdbarch)
d1372 3
a1374 2
set_gdbarch_max_register_raw_size (struct gdbarch *gdbarch,
                                   int max_register_raw_size)
d1391 3
a1393 2
set_gdbarch_register_virtual_size (struct gdbarch *gdbarch,
                                   gdbarch_register_virtual_size_ftype register_virtual_size)
d1399 2
a1400 1
gdbarch_max_register_virtual_size (struct gdbarch *gdbarch)
d1411 3
a1413 2
set_gdbarch_max_register_virtual_size (struct gdbarch *gdbarch,
                                       int max_register_virtual_size)
d1430 3
a1432 2
set_gdbarch_register_virtual_type (struct gdbarch *gdbarch,
                                   gdbarch_register_virtual_type_ftype register_virtual_type)
d1438 2
a1439 1
gdbarch_use_generic_dummy_frames (struct gdbarch *gdbarch)
d1450 3
a1452 2
set_gdbarch_use_generic_dummy_frames (struct gdbarch *gdbarch,
                                      int use_generic_dummy_frames)
d1458 2
a1459 1
gdbarch_call_dummy_location (struct gdbarch *gdbarch)
d1470 3
a1472 2
set_gdbarch_call_dummy_location (struct gdbarch *gdbarch,
                                 int call_dummy_location)
d1489 3
a1491 2
set_gdbarch_call_dummy_address (struct gdbarch *gdbarch,
                                gdbarch_call_dummy_address_ftype call_dummy_address)
d1497 2
a1498 1
gdbarch_call_dummy_start_offset (struct gdbarch *gdbarch)
d1509 3
a1511 2
set_gdbarch_call_dummy_start_offset (struct gdbarch *gdbarch,
                                     CORE_ADDR call_dummy_start_offset)
d1517 2
a1518 1
gdbarch_call_dummy_breakpoint_offset (struct gdbarch *gdbarch)
d1529 3
a1531 2
set_gdbarch_call_dummy_breakpoint_offset (struct gdbarch *gdbarch,
                                          CORE_ADDR call_dummy_breakpoint_offset)
d1537 2
a1538 1
gdbarch_call_dummy_breakpoint_offset_p (struct gdbarch *gdbarch)
d1549 3
a1551 2
set_gdbarch_call_dummy_breakpoint_offset_p (struct gdbarch *gdbarch,
                                            int call_dummy_breakpoint_offset_p)
d1557 2
a1558 1
gdbarch_call_dummy_length (struct gdbarch *gdbarch)
d1569 3
a1571 2
set_gdbarch_call_dummy_length (struct gdbarch *gdbarch,
                               int call_dummy_length)
d1588 3
a1590 2
set_gdbarch_pc_in_call_dummy (struct gdbarch *gdbarch,
                              gdbarch_pc_in_call_dummy_ftype pc_in_call_dummy)
d1596 2
a1597 1
gdbarch_call_dummy_p (struct gdbarch *gdbarch)
d1608 3
a1610 2
set_gdbarch_call_dummy_p (struct gdbarch *gdbarch,
                          int call_dummy_p)
d1616 2
a1617 1
gdbarch_call_dummy_words (struct gdbarch *gdbarch)
d1626 3
a1628 2
set_gdbarch_call_dummy_words (struct gdbarch *gdbarch,
                              LONGEST * call_dummy_words)
d1634 2
a1635 1
gdbarch_sizeof_call_dummy_words (struct gdbarch *gdbarch)
d1644 3
a1646 2
set_gdbarch_sizeof_call_dummy_words (struct gdbarch *gdbarch,
                                     int sizeof_call_dummy_words)
d1652 2
a1653 1
gdbarch_call_dummy_stack_adjust_p (struct gdbarch *gdbarch)
d1664 3
a1666 2
set_gdbarch_call_dummy_stack_adjust_p (struct gdbarch *gdbarch,
                                       int call_dummy_stack_adjust_p)
d1672 2
a1673 1
gdbarch_call_dummy_stack_adjust (struct gdbarch *gdbarch)
d1684 3
a1686 2
set_gdbarch_call_dummy_stack_adjust (struct gdbarch *gdbarch,
                                     int call_dummy_stack_adjust)
d1703 3
a1705 2
set_gdbarch_fix_call_dummy (struct gdbarch *gdbarch,
                            gdbarch_fix_call_dummy_ftype fix_call_dummy)
d1711 2
a1712 1
gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch)
d1721 3
a1723 2
set_gdbarch_believe_pcc_promotion (struct gdbarch *gdbarch,
                                   int believe_pcc_promotion)
d1729 2
a1730 1
gdbarch_believe_pcc_promotion_type (struct gdbarch *gdbarch)
d1739 3
a1741 2
set_gdbarch_believe_pcc_promotion_type (struct gdbarch *gdbarch,
                                        int believe_pcc_promotion_type)
d1758 3
a1760 2
set_gdbarch_get_saved_register (struct gdbarch *gdbarch,
                                gdbarch_get_saved_register_ftype get_saved_register)
d1777 3
a1779 2
set_gdbarch_register_convertible (struct gdbarch *gdbarch,
                                  gdbarch_register_convertible_ftype register_convertible)
d1796 3
a1798 2
set_gdbarch_register_convert_to_virtual (struct gdbarch *gdbarch,
                                         gdbarch_register_convert_to_virtual_ftype register_convert_to_virtual)
d1815 3
a1817 2
set_gdbarch_register_convert_to_raw (struct gdbarch *gdbarch,
                                     gdbarch_register_convert_to_raw_ftype register_convert_to_raw)
d1834 3
a1836 2
set_gdbarch_extract_return_value (struct gdbarch *gdbarch,
                                  gdbarch_extract_return_value_ftype extract_return_value)
d1853 3
a1855 2
set_gdbarch_push_arguments (struct gdbarch *gdbarch,
                            gdbarch_push_arguments_ftype push_arguments)
d1872 3
a1874 2
set_gdbarch_push_dummy_frame (struct gdbarch *gdbarch,
                              gdbarch_push_dummy_frame_ftype push_dummy_frame)
d1891 3
a1893 2
set_gdbarch_push_return_address (struct gdbarch *gdbarch,
                                 gdbarch_push_return_address_ftype push_return_address)
d1910 3
a1912 2
set_gdbarch_pop_frame (struct gdbarch *gdbarch,
                       gdbarch_pop_frame_ftype pop_frame)
d1929 3
a1931 2
set_gdbarch_d10v_make_daddr (struct gdbarch *gdbarch,
                             gdbarch_d10v_make_daddr_ftype d10v_make_daddr)
d1948 3
a1950 2
set_gdbarch_d10v_make_iaddr (struct gdbarch *gdbarch,
                             gdbarch_d10v_make_iaddr_ftype d10v_make_iaddr)
d1967 3
a1969 2
set_gdbarch_d10v_daddr_p (struct gdbarch *gdbarch,
                          gdbarch_d10v_daddr_p_ftype d10v_daddr_p)
d1986 3
a1988 2
set_gdbarch_d10v_iaddr_p (struct gdbarch *gdbarch,
                          gdbarch_d10v_iaddr_p_ftype d10v_iaddr_p)
d2005 3
a2007 2
set_gdbarch_d10v_convert_daddr_to_raw (struct gdbarch *gdbarch,
                                       gdbarch_d10v_convert_daddr_to_raw_ftype d10v_convert_daddr_to_raw)
d2024 3
a2026 2
set_gdbarch_d10v_convert_iaddr_to_raw (struct gdbarch *gdbarch,
                                       gdbarch_d10v_convert_iaddr_to_raw_ftype d10v_convert_iaddr_to_raw)
d2043 3
a2045 2
set_gdbarch_store_struct_return (struct gdbarch *gdbarch,
                                 gdbarch_store_struct_return_ftype store_struct_return)
d2062 3
a2064 2
set_gdbarch_store_return_value (struct gdbarch *gdbarch,
                                gdbarch_store_return_value_ftype store_return_value)
d2081 3
a2083 2
set_gdbarch_extract_struct_value_address (struct gdbarch *gdbarch,
                                          gdbarch_extract_struct_value_address_ftype extract_struct_value_address)
d2100 3
a2102 2
set_gdbarch_use_struct_convention (struct gdbarch *gdbarch,
                                   gdbarch_use_struct_convention_ftype use_struct_convention)
d2119 3
a2121 2
set_gdbarch_frame_init_saved_regs (struct gdbarch *gdbarch,
                                   gdbarch_frame_init_saved_regs_ftype frame_init_saved_regs)
d2138 3
a2140 2
set_gdbarch_init_extra_frame_info (struct gdbarch *gdbarch,
                                   gdbarch_init_extra_frame_info_ftype init_extra_frame_info)
d2157 3
a2159 2
set_gdbarch_skip_prologue (struct gdbarch *gdbarch,
                           gdbarch_skip_prologue_ftype skip_prologue)
d2176 3
a2178 2
set_gdbarch_inner_than (struct gdbarch *gdbarch,
                        gdbarch_inner_than_ftype inner_than)
d2195 3
a2197 2
set_gdbarch_breakpoint_from_pc (struct gdbarch *gdbarch,
                                gdbarch_breakpoint_from_pc_ftype breakpoint_from_pc)
d2203 2
a2204 1
gdbarch_decr_pc_after_break (struct gdbarch *gdbarch)
d2215 3
a2217 2
set_gdbarch_decr_pc_after_break (struct gdbarch *gdbarch,
                                 CORE_ADDR decr_pc_after_break)
d2223 2
a2224 1
gdbarch_function_start_offset (struct gdbarch *gdbarch)
d2235 3
a2237 2
set_gdbarch_function_start_offset (struct gdbarch *gdbarch,
                                   CORE_ADDR function_start_offset)
d2254 3
a2256 2
set_gdbarch_remote_translate_xfer_address (struct gdbarch *gdbarch,
                                           gdbarch_remote_translate_xfer_address_ftype remote_translate_xfer_address)
d2262 2
a2263 1
gdbarch_frame_args_skip (struct gdbarch *gdbarch)
d2274 3
a2276 2
set_gdbarch_frame_args_skip (struct gdbarch *gdbarch,
                             CORE_ADDR frame_args_skip)
d2293 3
a2295 2
set_gdbarch_frameless_function_invocation (struct gdbarch *gdbarch,
                                           gdbarch_frameless_function_invocation_ftype frameless_function_invocation)
d2312 3
a2314 2
set_gdbarch_frame_chain (struct gdbarch *gdbarch,
                         gdbarch_frame_chain_ftype frame_chain)
d2331 3
a2333 2
set_gdbarch_frame_chain_valid (struct gdbarch *gdbarch,
                               gdbarch_frame_chain_valid_ftype frame_chain_valid)
d2350 3
a2352 2
set_gdbarch_frame_saved_pc (struct gdbarch *gdbarch,
                            gdbarch_frame_saved_pc_ftype frame_saved_pc)
d2369 3
a2371 2
set_gdbarch_frame_args_address (struct gdbarch *gdbarch,
                                gdbarch_frame_args_address_ftype frame_args_address)
d2388 3
a2390 2
set_gdbarch_frame_locals_address (struct gdbarch *gdbarch,
                                  gdbarch_frame_locals_address_ftype frame_locals_address)
d2407 3
a2409 2
set_gdbarch_saved_pc_after_call (struct gdbarch *gdbarch,
                                 gdbarch_saved_pc_after_call_ftype saved_pc_after_call)
d2426 3
a2428 2
set_gdbarch_frame_num_args (struct gdbarch *gdbarch,
                            gdbarch_frame_num_args_ftype frame_num_args)
d2461 2
a2462 1
register_gdbarch_data (gdbarch_data_ftype *init)
d2479 1
d2481 2
a2482 1
init_gdbarch_data (struct gdbarch *gdbarch)
d2540 4
a2543 3
register_gdbarch_swap (void *data,
		       unsigned long sizeof_data,
		       gdbarch_swap_ftype *init)
d2557 1
d2559 2
a2560 1
init_gdbarch_swap (struct gdbarch *gdbarch)
d2582 1
d2584 2
a2585 1
swapout_gdbarch_swap (struct gdbarch *gdbarch)
d2594 1
d2596 2
a2597 1
swapin_gdbarch_swap (struct gdbarch *gdbarch)
d2620 3
a2622 2
register_gdbarch_init (enum bfd_architecture bfd_architecture,
                       gdbarch_init_ftype *init)
d2660 3
a2662 2
gdbarch_list_lookup_by_info (struct gdbarch_list *arches,
                             const struct gdbarch_info *info)
d2680 2
a2681 1
gdbarch_update (struct gdbarch_info info)
d2858 1
d2860 3
a2862 1
show_endian (char *args, int from_tty)
d2872 1
d2874 3
a2876 1
set_endian (char *args, int from_tty)
d2883 1
d2885 3
a2887 1
set_endian_big (char *args, int from_tty)
d2909 1
d2911 3
a2913 1
set_endian_little (char *args, int from_tty)
d2935 1
d2937 3
a2939 1
set_endian_auto (char *args, int from_tty)
d2953 1
d2955 2
a2956 1
set_endian_from_file (bfd *abfd)
a2987 2
enum set_arch { set_arch_auto, set_arch_manual };

d2991 1
a2991 14
int (*target_architecture_hook) (const struct bfd_arch_info *ap);

static void show_endian (char *, int);
static void set_endian (char *, int);
static void set_endian_big (char *, int);
static void set_endian_little (char *, int);
static void set_endian_auto (char *, int);
static void set_endian_from_file (bfd *);
static int arch_ok (const struct bfd_arch_info *arch);
static void set_arch (const struct bfd_arch_info *arch, enum set_arch type);
static void show_architecture (char *, int);
static void set_architecture (char *, int);
static void info_architecture (char *, int);
static void set_architecture_from_file (bfd *);
d2995 1
d2997 2
a2998 1
arch_ok (const struct bfd_arch_info *arch)
d3007 3
d3011 3
a3013 2
set_arch (const struct bfd_arch_info *arch,
          enum set_arch type)
d3041 1
d3043 3
a3045 1
show_architecture (char *args, int from_tty)
d3057 1
d3059 3
a3061 1
set_architecture (char *args, int from_tty)
d3098 1
d3100 3
a3102 1
info_architecture (char *args, int from_tty)
d3166 1
d3168 2
a3169 1
set_architecture_from_file (bfd *abfd)
d3205 1
a3205 1
int (*tm_print_insn) (bfd_vma, disassemble_info *);
d3237 1
a3237 1
extern void _initialize_gdbarch (void);
@


1.1.1.12
log
@import gdb-1999-10-18 snapshot
@
text
@a194 2
  gdbarch_memory_insert_breakpoint_ftype *memory_insert_breakpoint;
  gdbarch_memory_remove_breakpoint_ftype *memory_remove_breakpoint;
a302 2
  0,
  0,
a338 2
  gdbarch->memory_insert_breakpoint = default_memory_insert_breakpoint;
  gdbarch->memory_remove_breakpoint = default_memory_remove_breakpoint;
a551 6
      && (0))
    internal_error ("gdbarch: verify_gdbarch: memory_insert_breakpoint invalid");
  if ((GDB_MULTI_ARCH >= 2)
      && (0))
    internal_error ("gdbarch: verify_gdbarch: memory_remove_breakpoint invalid");
  if ((GDB_MULTI_ARCH >= 2)
a847 8
                      "gdbarch_update: MEMORY_INSERT_BREAKPOINT = 0x%08lx\n",
                      (long) current_gdbarch->memory_insert_breakpoint
                      /*MEMORY_INSERT_BREAKPOINT ()*/);
  fprintf_unfiltered (gdb_stdlog,
                      "gdbarch_update: MEMORY_REMOVE_BREAKPOINT = 0x%08lx\n",
                      (long) current_gdbarch->memory_remove_breakpoint
                      /*MEMORY_REMOVE_BREAKPOINT ()*/);
  fprintf_unfiltered (gdb_stdlog,
a2117 36
}

int
gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, char *contents_cache)
{
  if (gdbarch->memory_insert_breakpoint == 0)
    internal_error ("gdbarch: gdbarch_memory_insert_breakpoint invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_memory_insert_breakpoint called\n");
  return gdbarch->memory_insert_breakpoint (addr, contents_cache);
}

void
set_gdbarch_memory_insert_breakpoint (struct gdbarch *gdbarch,
                                      gdbarch_memory_insert_breakpoint_ftype memory_insert_breakpoint)
{
  gdbarch->memory_insert_breakpoint = memory_insert_breakpoint;
}

int
gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch, CORE_ADDR addr, char *contents_cache)
{
  if (gdbarch->memory_remove_breakpoint == 0)
    internal_error ("gdbarch: gdbarch_memory_remove_breakpoint invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_memory_remove_breakpoint called\n");
  return gdbarch->memory_remove_breakpoint (addr, contents_cache);
}

void
set_gdbarch_memory_remove_breakpoint (struct gdbarch *gdbarch,
                                      gdbarch_memory_remove_breakpoint_ftype memory_remove_breakpoint)
{
  gdbarch->memory_remove_breakpoint = memory_remove_breakpoint;
@


1.1.1.13
log
@import gdb-1999-10-25 snapshot
@
text
@a3163 29
/* Initialize the current architecture.  */
void
initialize_current_architecture ()
{
  if (GDB_MULTI_ARCH)
    {
      struct gdbarch_init_registration *rego;
      const struct bfd_arch_info *chosen = NULL;
      for (rego = gdbarch_init_registrary; rego != NULL; rego = rego->next)
	{
	  const struct bfd_arch_info *ap
	    = bfd_lookup_arch (rego->bfd_architecture, 0);

	  /* Choose the first architecture alphabetically.  */
	  if (chosen == NULL
	      || strcmp (ap->printable_name, chosen->printable_name) < 0)
	    chosen = ap;
	}

      if (chosen != NULL)
	{
	  struct gdbarch_info info;
	  memset (&info, 0, sizeof info);
	  info.bfd_arch_info = chosen;
	  gdbarch_update (info);
	}
    }
}

@


1.1.1.14
log
@import gdb-1999-12-13 snapshot
@
text
@a127 1
  int bfd_vma_bit;
a226 1
  8 * sizeof (void*),
a327 1
  gdbarch->bfd_vma_bit = TARGET_ARCHITECTURE->bits_per_address;
a368 3
      && (0))
    internal_error ("gdbarch: verify_gdbarch: bfd_vma_bit invalid");
  if ((GDB_MULTI_ARCH >= 1)
a614 3
                      "gdbarch_update: TARGET_BFD_VMA_BIT = %ld\n",
                      (long) TARGET_BFD_VMA_BIT);
  fprintf_unfiltered (gdb_stdlog,
a939 18
}

int
gdbarch_bfd_vma_bit (struct gdbarch *gdbarch)
{
  if (0)
    internal_error ("gdbarch: gdbarch_bfd_vma_bit invalid");
  if (gdbarch_debug >= 2)
    /* FIXME: gdb_std??? */
    fprintf_unfiltered (gdb_stdlog, "gdbarch_bfd_vma_bit called\n");
  return gdbarch->bfd_vma_bit;
}

void
set_gdbarch_bfd_vma_bit (struct gdbarch *gdbarch,
                         int bfd_vma_bit)
{
  gdbarch->bfd_vma_bit = bfd_vma_bit;
@


