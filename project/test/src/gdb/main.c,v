head	1.132;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.120.2.1
	gdb_7_6-2013-04-26-release:1.120.2.1
	gdb_7_6-branch:1.120.0.2
	gdb_7_6-2013-03-12-branchpoint:1.120
	gdb_7_5_1-2012-11-29-release:1.110.2.2
	gdb_7_5-2012-08-17-release:1.110.2.1
	gdb_7_5-branch:1.110.0.2
	gdb_7_5-2012-07-18-branchpoint:1.110
	gdb_7_4_1-2012-04-26-release:1.97.2.1
	gdb_7_4-2012-01-24-release:1.97.2.1
	gdb_7_4-branch:1.97.0.2
	gdb_7_4-2011-12-13-branchpoint:1.97
	gdb_7_3_1-2011-09-04-release:1.93
	gdb_7_3-2011-07-26-release:1.93
	gdb_7_3-branch:1.93.0.2
	gdb_7_3-2011-04-01-branchpoint:1.93
	gdb_7_2-2010-09-02-release:1.86
	gdb_7_2-branch:1.86.0.2
	gdb_7_2-2010-07-07-branchpoint:1.86
	gdb_7_1-2010-03-18-release:1.80
	gdb_7_1-branch:1.80.0.2
	gdb_7_1-2010-02-18-branchpoint:1.80
	gdb_7_0_1-2009-12-22-release:1.77
	gdb_7_0-2009-10-06-release:1.77
	gdb_7_0-branch:1.77.0.2
	gdb_7_0-2009-09-16-branchpoint:1.77
	arc-sim-20090309:1.66
	msnyder-checkpoint-072509-branch:1.76.0.2
	msnyder-checkpoint-072509-branchpoint:1.76
	arc-insight_6_8-branch:1.66.0.6
	arc-insight_6_8-branchpoint:1.66
	insight_6_8-branch:1.66.0.4
	insight_6_8-branchpoint:1.66
	reverse-20081226-branch:1.70.0.6
	reverse-20081226-branchpoint:1.70
	multiprocess-20081120-branch:1.70.0.4
	multiprocess-20081120-branchpoint:1.70
	reverse-20080930-branch:1.70.0.2
	reverse-20080930-branchpoint:1.70
	reverse-20080717-branch:1.68.0.4
	reverse-20080717-branchpoint:1.68
	msnyder-reverse-20080609-branch:1.68.0.2
	msnyder-reverse-20080609-branchpoint:1.68
	drow-reverse-20070409-branch:1.62.0.2
	drow-reverse-20070409-branchpoint:1.62
	gdb_6_8-2008-03-27-release:1.66
	gdb_6_8-branch:1.66.0.2
	gdb_6_8-2008-02-26-branchpoint:1.66
	gdb_6_7_1-2007-10-29-release:1.64
	gdb_6_7-2007-10-10-release:1.64
	gdb_6_7-branch:1.64.0.2
	gdb_6_7-2007-09-07-branchpoint:1.64
	insight_6_6-20070208-release:1.60
	gdb_6_6-2006-12-18-release:1.60
	gdb_6_6-branch:1.60.0.2
	gdb_6_6-2006-11-15-branchpoint:1.60
	insight_6_5-20061003-release:1.58
	gdb-csl-symbian-6_4_50_20060226-12:1.58
	gdb-csl-sourcerygxx-3_4_4-25:1.56
	nickrob-async-20060828-mergepoint:1.60
	gdb-csl-symbian-6_4_50_20060226-11:1.58
	gdb-csl-sourcerygxx-4_1-17:1.58
	gdb-csl-20060226-branch-local-2:1.58
	gdb-csl-sourcerygxx-4_1-14:1.58
	gdb-csl-sourcerygxx-4_1-13:1.58
	gdb-csl-sourcerygxx-4_1-12:1.58
	gdb-csl-sourcerygxx-3_4_4-21:1.58
	gdb_6_5-20060621-release:1.58
	gdb-csl-sourcerygxx-4_1-9:1.58
	gdb-csl-sourcerygxx-4_1-8:1.58
	gdb-csl-sourcerygxx-4_1-7:1.58
	gdb-csl-arm-2006q1-6:1.58
	gdb-csl-sourcerygxx-4_1-6:1.58
	gdb-csl-symbian-6_4_50_20060226-10:1.58
	gdb-csl-symbian-6_4_50_20060226-9:1.58
	gdb-csl-symbian-6_4_50_20060226-8:1.58
	gdb-csl-coldfire-4_1-11:1.58
	gdb-csl-sourcerygxx-3_4_4-19:1.58
	gdb-csl-coldfire-4_1-10:1.58
	gdb_6_5-branch:1.58.0.16
	gdb_6_5-2006-05-14-branchpoint:1.58
	gdb-csl-sourcerygxx-4_1-5:1.58
	nickrob-async-20060513-branch:1.58.0.14
	nickrob-async-20060513-branchpoint:1.58
	gdb-csl-sourcerygxx-4_1-4:1.58
	msnyder-reverse-20060502-branch:1.58.0.12
	msnyder-reverse-20060502-branchpoint:1.58
	gdb-csl-morpho-4_1-4:1.58
	gdb-csl-sourcerygxx-3_4_4-17:1.58
	readline_5_1-import-branch:1.58.0.10
	readline_5_1-import-branchpoint:1.58
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.58
	gdb-csl-symbian-20060226-branch:1.58.0.8
	gdb-csl-symbian-20060226-branchpoint:1.58
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.58
	msnyder-reverse-20060331-branch:1.58.0.6
	msnyder-reverse-20060331-branchpoint:1.58
	gdb-csl-available-20060303-branch:1.58.0.4
	gdb-csl-available-20060303-branchpoint:1.58
	gdb-csl-20060226-branch:1.58.0.2
	gdb-csl-20060226-branchpoint:1.58
	gdb_6_4-20051202-release:1.53.2.2
	msnyder-fork-checkpoint-branch:1.56.0.4
	msnyder-fork-checkpoint-branchpoint:1.56
	gdb-csl-gxxpro-6_3-branch:1.56.0.2
	gdb-csl-gxxpro-6_3-branchpoint:1.56
	gdb_6_4-branch:1.53.0.2
	gdb_6_4-2005-11-01-branchpoint:1.53
	gdb-csl-arm-20051020-branch:1.52.0.2
	gdb-csl-arm-20051020-branchpoint:1.52
	msnyder-tracepoint-checkpoint-branch:1.51.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.51
	gdb-csl-arm-20050325-2005-q1b:1.50
	gdb-csl-arm-20050325-2005-q1a:1.50
	csl-arm-20050325-branch:1.50.0.2
	csl-arm-20050325-branchpoint:1.50
	gdb-post-i18n-errorwarning-20050211:1.49
	gdb-pre-i18n-errorwarning-20050211:1.48
	gdb_6_3-20041109-release:1.44
	gdb_6_3-branch:1.44.0.2
	gdb_6_3-20041019-branchpoint:1.44
	drow_intercu-merge-20040921:1.44
	drow_intercu-merge-20040915:1.44
	jimb-gdb_6_2-e500-branch:1.41.2.2.0.4
	jimb-gdb_6_2-e500-branchpoint:1.41.2.2
	gdb_6_2-20040730-release:1.41.2.2
	gdb_6_2-branch:1.41.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.41
	gdb_6_1_1-20040616-release:1.40
	gdb_6_1-2004-04-05-release:1.40
	drow_intercu-merge-20040402:1.40
	drow_intercu-merge-20040327:1.40
	ezannoni_pie-20040323-branch:1.40.0.8
	ezannoni_pie-20040323-branchpoint:1.40
	cagney_tramp-20040321-mergepoint:1.40
	cagney_tramp-20040309-branch:1.40.0.6
	cagney_tramp-20040309-branchpoint:1.40
	gdb_6_1-branch:1.40.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.40
	drow_intercu-20040221-branch:1.40.0.2
	drow_intercu-20040221-branchpoint:1.40
	cagney_bfdfile-20040213-branch:1.39.0.2
	cagney_bfdfile-20040213-branchpoint:1.39
	drow-cplus-merge-20040208:1.39
	carlton_dictionary-20040126-merge:1.37
	cagney_bigcore-20040122-branch:1.37.0.2
	cagney_bigcore-20040122-branchpoint:1.37
	drow-cplus-merge-20040113:1.36
	drow-cplus-merge-20031224:1.36
	drow-cplus-merge-20031220:1.36
	carlton_dictionary-20031215-merge:1.36
	drow-cplus-merge-20031214:1.36
	carlton-dictionary-20031111-merge:1.36
	gdb_6_0-2003-10-04-release:1.35
	kettenis_sparc-20030918-branch:1.36.0.4
	kettenis_sparc-20030918-branchpoint:1.36
	carlton_dictionary-20030917-merge:1.36
	ezannoni_pie-20030916-branchpoint:1.36
	ezannoni_pie-20030916-branch:1.36.0.2
	cagney_x86i386-20030821-branch:1.35.0.6
	cagney_x86i386-20030821-branchpoint:1.35
	carlton_dictionary-20030805-merge:1.35
	carlton_dictionary-20030627-merge:1.35
	gdb_6_0-branch:1.35.0.4
	gdb_6_0-2003-06-23-branchpoint:1.35
	jimb-ppc64-linux-20030613-branch:1.35.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.35
	cagney_convert-20030606-branch:1.33.0.2
	cagney_convert-20030606-branchpoint:1.33
	cagney_writestrings-20030508-branch:1.32.0.16
	cagney_writestrings-20030508-branchpoint:1.32
	jimb-ppc64-linux-20030528-branch:1.32.0.14
	jimb-ppc64-linux-20030528-branchpoint:1.32
	carlton_dictionary-20030523-merge:1.32
	cagney_fileio-20030521-branch:1.32.0.12
	cagney_fileio-20030521-branchpoint:1.32
	kettenis_i386newframe-20030517-mergepoint:1.32
	jimb-ppc64-linux-20030509-branch:1.32.0.10
	jimb-ppc64-linux-20030509-branchpoint:1.32
	kettenis_i386newframe-20030504-mergepoint:1.32
	carlton_dictionary-20030430-merge:1.32
	kettenis_i386newframe-20030419-branch:1.32.0.8
	kettenis_i386newframe-20030419-branchpoint:1.32
	carlton_dictionary-20030416-merge:1.32
	cagney_frameaddr-20030409-mergepoint:1.32
	kettenis_i386newframe-20030406-branch:1.32.0.6
	kettenis_i386newframe-20030406-branchpoint:1.32
	cagney_frameaddr-20030403-branchpoint:1.32
	cagney_frameaddr-20030403-branch:1.32.0.4
	cagney_framebase-20030330-mergepoint:1.32
	cagney_framebase-20030326-branch:1.32.0.2
	cagney_framebase-20030326-branchpoint:1.32
	cagney_lazyid-20030317-branch:1.31.0.8
	cagney_lazyid-20030317-branchpoint:1.31
	kettenis-i386newframe-20030316-mergepoint:1.31
	offbyone-20030313-branch:1.31.0.6
	offbyone-20030313-branchpoint:1.31
	kettenis-i386newframe-20030308-branch:1.31.0.4
	kettenis-i386newframe-20030308-branchpoint:1.31
	carlton_dictionary-20030305-merge:1.31
	cagney_offbyone-20030303-branch:1.31.0.2
	cagney_offbyone-20030303-branchpoint:1.31
	carlton_dictionary-20030207-merge:1.27
	interps-20030203-mergepoint:1.24
	interps-20030202-branch:1.24.0.2
	interps-20030202-branchpoint:1.24
	cagney-unwind-20030108-branch:1.20.0.4
	cagney-unwind-20030108-branchpoint:1.20
	carlton_dictionary-20021223-merge:1.20
	gdb_5_3-2002-12-12-release:1.18.6.2
	carlton_dictionary-20021115-merge:1.20
	kseitz_interps-20021105-merge:1.20
	kseitz_interps-20021103-merge:1.20
	drow-cplus-merge-20021020:1.20
	drow-cplus-merge-20021025:1.20
	carlton_dictionary-20021025-merge:1.20
	carlton_dictionary-20021011-merge:1.20
	drow-cplus-branch:1.20.0.2
	drow-cplus-branchpoint:1.20
	kseitz_interps-20020930-merge:1.20
	carlton_dictionary-20020927-merge:1.20
	carlton_dictionary-branch:1.18.0.8
	carlton_dictionary-20020920-branchpoint:1.18
	gdb_5_3-branch:1.18.0.6
	gdb_5_3-2002-09-04-branchpoint:1.18
	kseitz_interps-20020829-merge:1.18
	cagney_sysregs-20020825-branch:1.18.0.4
	cagney_sysregs-20020825-branchpoint:1.18
	readline_4_3-import-branch:1.18.0.2
	readline_4_3-import-branchpoint:1.18
	gdb_5_2_1-2002-07-23-release:1.16
	kseitz_interps-20020528-branch:1.16.0.8
	kseitz_interps-20020528-branchpoint:1.16
	cagney_regbuf-20020515-branch:1.16.0.6
	cagney_regbuf-20020515-branchpoint:1.16
	jimb-macro-020506-branch:1.16.0.4
	jimb-macro-020506-branchpoint:1.16
	gdb_5_2-2002-04-29-release:1.16
	gdb_5_2-branch:1.16.0.2
	gdb_5_2-2002-03-03-branchpoint:1.16
	gdb_5_1_1-2002-01-24-release:1.12
	gdb_5_1_0_1-2002-01-03-release:1.12
	cygnus_cvs_20020108_pre:1.14
	gdb_5_1_0_1-2002-01-03-branchpoint:1.12
	gdb_5_1_0_1-2002-01-03-branch:1.12.0.6
	gdb_5_1-2001-11-21-release:1.12
	gdb_s390-2001-09-26-branch:1.12.0.4
	gdb_s390-2001-09-26-branchpoint:1.12
	gdb_5_1-2001-07-29-branch:1.12.0.2
	gdb_5_1-2001-07-29-branchpoint:1.12
	dberlin-typesystem-branch:1.11.0.2
	dberlin-typesystem-branchpoint:1.11
	gdb-post-ptid_t-2001-05-03:1.9
	gdb-pre-ptid_t-2001-05-03:1.9
	insight-precleanup-2001-01-01:1.5
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb-post-params-removal-2000-06-04:1.3
	gdb-pre-params-removal-2000-06-04:1.3
	gdb-post-params-removal-2000-05-28:1.3
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.23
	insight-2000-02-04:1.1.1.23
	gdb-2000-02-04:1.1.1.22
	gdb-2000-02-02:1.1.1.22
	gdb-2000-02-01:1.1.1.21
	gdb-2000-01-31:1.1.1.20
	gdb-2000-01-26:1.1.1.19
	gdb-2000-01-24:1.1.1.19
	gdb-2000-01-17:1.1.1.19
	gdb-2000-01-10:1.1.1.19
	gdb-2000-01-05:1.1.1.19
	gdb-1999-12-21:1.1.1.19
	gdb-1999-12-13:1.1.1.19
	gdb-1999-12-07:1.1.1.18
	gdb-1999-12-06:1.1.1.18
	gdb-1999-11-16:1.1.1.18
	gdb-1999-11-08:1.1.1.18
	gdb-1999-11-01:1.1.1.17
	gdb-1999-10-25:1.1.1.17
	gdb-1999-10-18:1.1.1.17
	gdb-1999-10-11:1.1.1.17
	gdb-1999-10-04:1.1.1.16
	gdb-1999-09-28:1.1.1.15
	gdb-1999-09-21:1.1.1.14
	gdb-1999-09-13:1.1.1.14
	gdb-1999-09-08:1.1.1.14
	gdb-1999-08-30:1.1.1.13
	gdb-1999-08-23:1.1.1.12
	gdb-1999-08-16:1.1.1.12
	gdb-1999-08-09:1.1.1.12
	gdb-1999-08-02:1.1.1.11
	gdb-1999-07-26:1.1.1.11
	gdb-1999-07-19:1.1.1.11
	gdb-1999-07-12:1.1.1.11
	gdb-post-reformat-19990707:1.1.1.11
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.11
	gdb-pre-reformat-19990707:1.1.1.10
	gdb-1999-07-07:1.1.1.10
	gdb-1999-07-05:1.1.1.10
	gdb-1999-06-28:1.1.1.9
	gdb-1999-06-21:1.1.1.8
	gdb-1999-06-14:1.1.1.7
	gdb-1999-06-07:1.1.1.6
	gdb-1999-06-01:1.1.1.6
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.5
	gdb-1999-05-19:1.1.1.4
	gdb-1999-05-10:1.1.1.4
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.132
date	2013.09.19.12.44.46;	author jkratoch;	state Exp;
branches;
next	1.131;

1.131
date	2013.09.18.11.41.38;	author aburgess;	state Exp;
branches;
next	1.130;

1.130
date	2013.08.28.12.25.05;	author qiyao;	state Exp;
branches;
next	1.129;

1.129
date	2013.08.01.09.09.57;	author aburgess;	state Exp;
branches;
next	1.128;

1.128
date	2013.07.29.21.41.30;	author devans;	state Exp;
branches;
next	1.127;

1.127
date	2013.07.06.07.28.24;	author eliz;	state Exp;
branches;
next	1.126;

1.126
date	2013.07.01.11.22.11;	author palves;	state Exp;
branches;
next	1.125;

1.125
date	2013.04.22.16.46.15;	author tromey;	state Exp;
branches;
next	1.124;

1.124
date	2013.04.12.08.57.07;	author eliz;	state Exp;
branches;
next	1.123;

1.123
date	2013.04.06.06.52.06;	author eliz;	state Exp;
branches;
next	1.122;

1.122
date	2013.03.23.10.48.23;	author eliz;	state Exp;
branches;
next	1.121;

1.121
date	2013.03.21.17.37.29;	author devans;	state Exp;
branches;
next	1.120;

1.120
date	2013.01.25.00.46.19;	author qiyao;	state Exp;
branches
	1.120.2.1;
next	1.119;

1.119
date	2013.01.21.17.32.10;	author tromey;	state Exp;
branches;
next	1.118;

1.118
date	2013.01.07.16.40.36;	author tromey;	state Exp;
branches;
next	1.117;

1.117
date	2013.01.03.22.18.35;	author muller;	state Exp;
branches;
next	1.116;

1.116
date	2013.01.01.06.32.47;	author brobecke;	state Exp;
branches;
next	1.115;

1.115
date	2012.11.16.19.43.38;	author devans;	state Exp;
branches;
next	1.114;

1.114
date	2012.10.15.21.45.04;	author devans;	state Exp;
branches;
next	1.113;

1.113
date	2012.08.29.19.17.16;	author devans;	state Exp;
branches;
next	1.112;

1.112
date	2012.08.22.17.48.52;	author tromey;	state Exp;
branches;
next	1.111;

1.111
date	2012.07.20.17.38.04;	author devans;	state Exp;
branches;
next	1.110;

1.110
date	2012.07.02.12.05.00;	author jkratoch;	state Exp;
branches
	1.110.2.1;
next	1.109;

1.109
date	2012.04.19.20.18.26;	author tromey;	state Exp;
branches;
next	1.108;

1.108
date	2012.04.17.15.56.21;	author jkratoch;	state Exp;
branches;
next	1.107;

1.107
date	2012.04.17.15.54.31;	author jkratoch;	state Exp;
branches;
next	1.106;

1.106
date	2012.04.17.15.51.43;	author jkratoch;	state Exp;
branches;
next	1.105;

1.105
date	2012.04.17.15.49.16;	author jkratoch;	state Exp;
branches;
next	1.104;

1.104
date	2012.03.19.18.19.24;	author jkratoch;	state Exp;
branches;
next	1.103;

1.103
date	2012.03.19.18.16.18;	author jkratoch;	state Exp;
branches;
next	1.102;

1.102
date	2012.03.16.16.47.31;	author gary;	state Exp;
branches;
next	1.101;

1.101
date	2012.02.20.19.44.01;	author jkratoch;	state Exp;
branches;
next	1.100;

1.100
date	2012.01.04.08.17.06;	author brobecke;	state Exp;
branches;
next	1.99;

1.99
date	2012.01.02.13.29.57;	author jkratoch;	state Exp;
branches;
next	1.98;

1.98
date	2012.01.02.02.28.58;	author jkratoch;	state Exp;
branches;
next	1.97;

1.97
date	2011.11.05.17.08.30;	author devans;	state Exp;
branches
	1.97.2.1;
next	1.96;

1.96
date	2011.09.02.16.56.29;	author palves;	state Exp;
branches;
next	1.95;

1.95
date	2011.06.13.10.55.26;	author palves;	state Exp;
branches;
next	1.94;

1.94
date	2011.05.09.21.49.56;	author devans;	state Exp;
branches;
next	1.93;

1.93
date	2011.03.07.18.34.31;	author msnyder;	state Exp;
branches;
next	1.92;

1.92
date	2011.01.09.03.20.33;	author msnyder;	state Exp;
branches;
next	1.91;

1.91
date	2011.01.05.22.22.49;	author msnyder;	state Exp;
branches;
next	1.90;

1.90
date	2011.01.01.15.33.10;	author brobecke;	state Exp;
branches;
next	1.89;

1.89
date	2010.12.29.00.58.14;	author msnyder;	state Exp;
branches;
next	1.88;

1.88
date	2010.12.07.17.26.03;	author devans;	state Exp;
branches;
next	1.87;

1.87
date	2010.09.22.19.59.15;	author jkratoch;	state Exp;
branches;
next	1.86;

1.86
date	2010.06.26.06.44.47;	author hilfingr;	state Exp;
branches;
next	1.85;

1.85
date	2010.05.27.03.40.45;	author devans;	state Exp;
branches;
next	1.84;

1.84
date	2010.05.16.00.18.02;	author msnyder;	state Exp;
branches;
next	1.83;

1.83
date	2010.04.23.18.07.31;	author devans;	state Exp;
branches;
next	1.82;

1.82
date	2010.04.06.16.51.16;	author devans;	state Exp;
branches;
next	1.81;

1.81
date	2010.03.08.19.20.38;	author tromey;	state Exp;
branches;
next	1.80;

1.80
date	2010.01.20.14.23.07;	author vprus;	state Exp;
branches;
next	1.79;

1.79
date	2010.01.01.07.31.37;	author brobecke;	state Exp;
branches;
next	1.78;

1.78
date	2009.12.11.23.43.42;	author msnyder;	state Exp;
branches;
next	1.77;

1.77
date	2009.08.27.21.56.38;	author devans;	state Exp;
branches;
next	1.76;

1.76
date	2009.04.27.10.24.08;	author guitton;	state Exp;
branches;
next	1.75;

1.75
date	2009.04.23.21.28.19;	author tromey;	state Exp;
branches;
next	1.74;

1.74
date	2009.04.21.10.13.05;	author jsm28;	state Exp;
branches;
next	1.73;

1.73
date	2009.01.28.15.01.00;	author guitton;	state Exp;
branches;
next	1.72;

1.72
date	2009.01.06.18.31.59;	author jimb;	state Exp;
branches;
next	1.71;

1.71
date	2009.01.03.05.57.52;	author brobecke;	state Exp;
branches;
next	1.70;

1.70
date	2008.07.29.14.16.15;	author shebs;	state Exp;
branches
	1.70.4.1;
next	1.69;

1.69
date	2008.07.28.16.29.02;	author tromey;	state Exp;
branches;
next	1.68;

1.68
date	2008.06.05.22.36.56;	author jsm28;	state Exp;
branches;
next	1.67;

1.67
date	2008.03.14.17.21.07;	author vprus;	state Exp;
branches;
next	1.66;

1.66
date	2008.01.05.16.49.53;	author palves;	state Exp;
branches;
next	1.65;

1.65
date	2008.01.01.22.53.12;	author drow;	state Exp;
branches;
next	1.64;

1.64
date	2007.08.23.18.08.36;	author brobecke;	state Exp;
branches;
next	1.63;

1.63
date	2007.05.09.21.46.52;	author bwilson;	state Exp;
branches;
next	1.62;

1.62
date	2007.01.09.21.34.29;	author drow;	state Exp;
branches;
next	1.61;

1.61
date	2007.01.09.17.58.52;	author drow;	state Exp;
branches;
next	1.60;

1.60
date	2006.07.27.21.31.40;	author drow;	state Exp;
branches;
next	1.59;

1.59
date	2006.07.21.14.46.53;	author ams;	state Exp;
branches;
next	1.58;

1.58
date	2006.02.21.19.46.48;	author ams;	state Exp;
branches
	1.58.14.1;
next	1.57;

1.57
date	2005.12.17.22.34.01;	author eliz;	state Exp;
branches;
next	1.56;

1.56
date	2005.11.07.13.56.48;	author ams;	state Exp;
branches;
next	1.55;

1.55
date	2005.11.07.12.46.37;	author ams;	state Exp;
branches;
next	1.54;

1.54
date	2005.11.04.11.49.11;	author ams;	state Exp;
branches;
next	1.53;

1.53
date	2005.11.01.11.09.18;	author ams;	state Exp;
branches
	1.53.2.1;
next	1.52;

1.52
date	2005.08.27.12.04.53;	author eliz;	state Exp;
branches;
next	1.51;

1.51
date	2005.04.02.20.25.22;	author kettenis;	state Exp;
branches;
next	1.50;

1.50
date	2005.03.10.20.49.08;	author bobbybrasko;	state Exp;
branches;
next	1.49;

1.49
date	2005.02.11.04.05.56;	author cagney;	state Exp;
branches;
next	1.48;

1.48
date	2005.01.14.01.20.36;	author cagney;	state Exp;
branches;
next	1.47;

1.47
date	2005.01.14.00.58.15;	author msnyder;	state Exp;
branches;
next	1.46;

1.46
date	2005.01.12.18.31.32;	author cagney;	state Exp;
branches;
next	1.45;

1.45
date	2004.12.07.11.06.03;	author schwab;	state Exp;
branches;
next	1.44;

1.44
date	2004.08.10.22.36.39;	author cagney;	state Exp;
branches;
next	1.43;

1.43
date	2004.07.26.19.01.51;	author cagney;	state Exp;
branches;
next	1.42;

1.42
date	2004.07.17.03.25.10;	author cagney;	state Exp;
branches;
next	1.41;

1.41
date	2004.04.21.23.52.20;	author cagney;	state Exp;
branches
	1.41.2.1;
next	1.40;

1.40
date	2004.02.18.00.21.00;	author ezannoni;	state Exp;
branches
	1.40.2.1;
next	1.39;

1.39
date	2004.02.02.16.14.36;	author fnf;	state Exp;
branches;
next	1.38;

1.38
date	2004.02.02.16.12.49;	author fnf;	state Exp;
branches;
next	1.37;

1.37
date	2004.01.19.19.56.01;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2003.09.14.16.32.13;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2003.06.10.14.37.03;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2003.06.08.18.27.14;	author cagney;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.02.16.02.58;	author rth;	state Exp;
branches;
next	1.32;

1.32
date	2003.03.20.22.25.16;	author cagney;	state Exp;
branches
	1.32.12.1
	1.32.16.1;
next	1.31;

1.31
date	2003.03.02.02.07.12;	author cagney;	state Exp;
branches;
next	1.30;

1.30
date	2003.03.02.01.22.18;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.14.13.58.06;	author cagney;	state Exp;
branches;
next	1.28;

1.28
date	2003.02.13.18.07.24;	author kseitz;	state Exp;
branches;
next	1.27;

1.27
date	2003.02.07.00.27.30;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.06.01.19.12;	author cagney;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.04.23.59.25;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.01.20.51.05;	author cagney;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2003.01.17.19.12.19;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2003.01.17.16.56.50;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.13.18.00.16;	author drow;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.26.17.46.04;	author cagney;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2002.09.25.03.10.26;	author jimb;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.25.05.35.16;	author tromey;	state Exp;
branches
	1.18.6.1
	1.18.8.1;
next	1.17;

1.17
date	2002.06.21.23.48.41;	author tromey;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.17.22.15.17;	author cagney;	state Exp;
branches
	1.16.6.1
	1.16.8.1;
next	1.15;

1.15
date	2002.01.10.23.03.08;	author msnyder;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.22.00.23.12;	author tromey;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.04.15.04.27;	author tromey;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.14.18.59.07;	author ciceron;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.10.16.25.51;	author cgf;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.05.07.19.03.11;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.05.02.02.13;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.05.00.04.45;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.06.08.21.10;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.27.00.43.25;	author fnasser;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.01.01.48;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.23.22.49.28;	author davea;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.28.01.12.28;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.23.00.25.42;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.01;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.120.2.1
date	2013.04.06.06.47.29;	author eliz;	state Exp;
branches;
next	;

1.110.2.1
date	2012.07.20.17.59.05;	author devans;	state Exp;
branches;
next	1.110.2.2;

1.110.2.2
date	2012.08.29.19.27.58;	author devans;	state Exp;
branches;
next	;

1.97.2.1
date	2012.01.06.04.43.20;	author brobecke;	state Exp;
branches;
next	;

1.70.4.1
date	2008.11.21.02.31.57;	author shebs;	state Exp;
branches;
next	;

1.58.14.1
date	2006.05.12.07.40.22;	author nickrob;	state Exp;
branches;
next	1.58.14.2;

1.58.14.2
date	2006.08.28.07.48.48;	author nickrob;	state Exp;
branches;
next	1.58.14.3;

1.58.14.3
date	2006.08.30.02.11.12;	author nickrob;	state Exp;
branches;
next	;

1.53.2.1
date	2005.11.14.15.35.16;	author ams;	state Exp;
branches;
next	1.53.2.2;

1.53.2.2
date	2005.11.14.15.53.06;	author ams;	state Exp;
branches;
next	;

1.41.2.1
date	2004.07.17.03.20.47;	author cagney;	state Exp;
branches;
next	1.41.2.2;

1.41.2.2
date	2004.07.26.19.01.36;	author cagney;	state Exp;
branches;
next	;

1.40.2.1
date	2004.09.16.17.01.13;	author drow;	state Exp;
branches;
next	;

1.32.12.1
date	2003.05.21.22.02.12;	author cagney;	state Exp;
branches;
next	;

1.32.16.1
date	2003.06.03.20.54.38;	author cagney;	state Exp;
branches;
next	;

1.24.2.1
date	2003.02.03.06.02.45;	author cagney;	state Exp;
branches;
next	1.24.2.2;

1.24.2.2
date	2003.02.03.21.13.29;	author cagney;	state Exp;
branches;
next	1.24.2.3;

1.24.2.3
date	2003.02.04.07.02.36;	author cagney;	state Exp;
branches;
next	1.24.2.4;

1.24.2.4
date	2003.02.04.16.52.09;	author cagney;	state Exp;
branches;
next	1.24.2.5;

1.24.2.5
date	2003.02.04.19.59.02;	author cagney;	state Exp;
branches;
next	;

1.20.2.1
date	2003.12.14.20.27.21;	author drow;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2004.02.09.19.43.43;	author drow;	state Exp;
branches;
next	;

1.18.6.1
date	2002.09.25.04.27.30;	author jimb;	state Exp;
branches;
next	1.18.6.2;

1.18.6.2
date	2002.09.28.15.10.31;	author cagney;	state Exp;
branches;
next	;

1.18.8.1
date	2002.09.27.20.03.06;	author carlton;	state Exp;
branches;
next	1.18.8.2;

1.18.8.2
date	2003.02.07.19.17.50;	author carlton;	state Exp;
branches;
next	1.18.8.3;

1.18.8.3
date	2003.03.06.00.56.30;	author carlton;	state Exp;
branches;
next	1.18.8.4;

1.18.8.4
date	2003.04.16.19.56.53;	author carlton;	state Exp;
branches;
next	1.18.8.5;

1.18.8.5
date	2003.06.27.21.50.05;	author carlton;	state Exp;
branches;
next	1.18.8.6;

1.18.8.6
date	2003.09.17.21.28.25;	author carlton;	state Exp;
branches;
next	1.18.8.7;

1.18.8.7
date	2004.01.26.19.11.27;	author carlton;	state Exp;
branches;
next	;

1.16.6.1
date	2002.06.25.20.02.41;	author cagney;	state Exp;
branches;
next	;

1.16.8.1
date	2002.05.28.23.47.01;	author kseitz;	state Exp;
branches;
next	1.16.8.2;

1.16.8.2
date	2002.07.22.21.47.00;	author kseitz;	state Exp;
branches;
next	1.16.8.3;

1.16.8.3
date	2002.10.01.00.46.10;	author kseitz;	state Exp;
branches;
next	;

1.11.2.1
date	2001.07.06.19.17.01;	author dberlin;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.01;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.24.45;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.42.42;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.11.13.29.14;	author shebs;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.05.25.18.02.37;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.06.01.15.40.18;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.06.14.18.07.47;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.06.21.13.25.32;	author jsm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.06.28.16.00.40;	author jsm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.07.05.17.53.26;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	99.07.07.20.07.58;	author jsm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.08.09.21.33.39;	author jsm;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.08.31.01.05.30;	author jsm;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	99.09.08.23.59.19;	author shebs;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	99.09.28.21.52.19;	author jsm;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	99.10.05.23.08.29;	author jsm;	state Exp;
branches;
next	1.1.1.17;

1.1.1.17
date	99.10.12.04.37.22;	author jsm;	state Exp;
branches;
next	1.1.1.18;

1.1.1.18
date	99.11.09.01.23.05;	author jsm;	state Exp;
branches;
next	1.1.1.19;

1.1.1.19
date	99.12.14.01.05.33;	author jsm;	state Exp;
branches;
next	1.1.1.20;

1.1.1.20
date	2000.02.01.03.19.05;	author jsm;	state Exp;
branches;
next	1.1.1.21;

1.1.1.21
date	2000.02.02.00.21.05;	author jsm;	state Exp;
branches;
next	1.1.1.22;

1.1.1.22
date	2000.02.03.04.14.28;	author jsm;	state Exp;
branches;
next	1.1.1.23;

1.1.1.23
date	2000.02.07.00.19.34;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.132
log
@Mostly code cleanup: Constification.

gdb/
2013-09-19  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	Constification.
	* main.c (captured_main): Replace catch_command_errors by
	catch_command_errors_const.  Twice.
	* symfile.c (symbol_file_add_main_1): Make args parameter const.
	(symbol_file_add): Make name parameter const.
	(symbol_file_add_main, symbol_file_add_main_1): Make args parameter const.
	(symfile_bfd_open): Make name parameter const, rename it to cname.  Add
	variable name.  Change their usage accordingly.
	* symfile.h (symbol_file_add, symfile_bfd_open): Make first parameter
	const.
	(symbol_file_add_main): Make args parameter const.
@
text
@/* Top level stuff for GDB, the GNU debugger.

   Copyright (C) 1986-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "top.h"
#include "target.h"
#include "inferior.h"
#include "symfile.h"
#include "gdbcore.h"

#include "exceptions.h"
#include "getopt.h"

#include <sys/types.h>
#include "gdb_stat.h"
#include <ctype.h>

#include "gdb_string.h"
#include "event-loop.h"
#include "ui-out.h"

#include "interps.h"
#include "main.h"
#include "source.h"
#include "cli/cli-cmds.h"
#include "python/python.h"
#include "objfiles.h"
#include "auto-load.h"
#include "maint.h"

#include "filenames.h"
#include "filestuff.h"

/* The selected interpreter.  This will be used as a set command
   variable, so it should always be malloc'ed - since
   do_setshow_command will free it.  */
char *interpreter_p;

/* Whether xdb commands will be handled.  */
int xdb_commands = 0;

/* Whether dbx commands will be handled.  */
int dbx_commands = 0;

/* System root path, used to find libraries etc.  */
char *gdb_sysroot = 0;

/* GDB datadir, used to store data files.  */
char *gdb_datadir = 0;

/* Non-zero if GDB_DATADIR was provided on the command line.
   This doesn't track whether data-directory is set later from the
   command line, but we don't reread system.gdbinit when that happens.  */
static int gdb_datadir_provided = 0;

/* If gdb was configured with --with-python=/path,
   the possibly relocated path to python's lib directory.  */
char *python_libdir = 0;

struct ui_file *gdb_stdout;
struct ui_file *gdb_stderr;
struct ui_file *gdb_stdlog;
struct ui_file *gdb_stdin;
/* Target IO streams.  */
struct ui_file *gdb_stdtargin;
struct ui_file *gdb_stdtarg;
struct ui_file *gdb_stdtargerr;

/* True if --batch or --batch-silent was seen.  */
int batch_flag = 0;

/* Support for the --batch-silent option.  */
int batch_silent = 0;

/* Support for --return-child-result option.
   Set the default to -1 to return error in the case
   that the program does not run or does not complete.  */
int return_child_result = 0;
int return_child_result_value = -1;


/* GDB as it has been invoked from the command line (i.e. argv[0]).  */
static char *gdb_program_name;

/* Return read only pointer to GDB_PROGRAM_NAME.  */
const char *
get_gdb_program_name (void)
{
  return gdb_program_name;
}

static void print_gdb_help (struct ui_file *);

/* Relocate a file or directory.  PROGNAME is the name by which gdb
   was invoked (i.e., argv[0]).  INITIAL is the default value for the
   file or directory.  FLAG is true if the value is relocatable, false
   otherwise.  Returns a newly allocated string; this may return NULL
   under the same conditions as make_relative_prefix.  */

static char *
relocate_path (const char *progname, const char *initial, int flag)
{
  if (flag)
    return make_relative_prefix (progname, BINDIR, initial);
  return xstrdup (initial);
}

/* Like relocate_path, but specifically checks for a directory.
   INITIAL is relocated according to the rules of relocate_path.  If
   the result is a directory, it is used; otherwise, INITIAL is used.
   The chosen directory is then canonicalized using lrealpath.  This
   function always returns a newly-allocated string.  */

char *
relocate_gdb_directory (const char *initial, int flag)
{
  char *dir;

  dir = relocate_path (gdb_program_name, initial, flag);
  if (dir)
    {
      struct stat s;

      if (*dir == '\0' || stat (dir, &s) != 0 || !S_ISDIR (s.st_mode))
	{
	  xfree (dir);
	  dir = NULL;
	}
    }
  if (!dir)
    dir = xstrdup (initial);

  /* Canonicalize the directory.  */
  if (*dir)
    {
      char *canon_sysroot = lrealpath (dir);

      if (canon_sysroot)
	{
	  xfree (dir);
	  dir = canon_sysroot;
	}
    }

  return dir;
}

/* Compute the locations of init files that GDB should source and
   return them in SYSTEM_GDBINIT, HOME_GDBINIT, LOCAL_GDBINIT.  If
   there is no system gdbinit (resp. home gdbinit and local gdbinit)
   to be loaded, then SYSTEM_GDBINIT (resp. HOME_GDBINIT and
   LOCAL_GDBINIT) is set to NULL.  */
static void
get_init_files (const char **system_gdbinit,
		const char **home_gdbinit,
		const char **local_gdbinit)
{
  static const char *sysgdbinit = NULL;
  static char *homeinit = NULL;
  static const char *localinit = NULL;
  static int initialized = 0;

  if (!initialized)
    {
      struct stat homebuf, cwdbuf, s;
      char *homedir;

      if (SYSTEM_GDBINIT[0])
	{
	  int datadir_len = strlen (GDB_DATADIR);
	  int sys_gdbinit_len = strlen (SYSTEM_GDBINIT);
	  char *relocated_sysgdbinit;

	  /* If SYSTEM_GDBINIT lives in data-directory, and data-directory
	     has been provided, search for SYSTEM_GDBINIT there.  */
	  if (gdb_datadir_provided
	      && datadir_len < sys_gdbinit_len
	      && filename_ncmp (SYSTEM_GDBINIT, GDB_DATADIR, datadir_len) == 0
	      && IS_DIR_SEPARATOR (SYSTEM_GDBINIT[datadir_len]))
	    {
	      /* Append the part of SYSTEM_GDBINIT that follows GDB_DATADIR
		 to gdb_datadir.  */
	      char *tmp_sys_gdbinit = xstrdup (SYSTEM_GDBINIT + datadir_len);
	      char *p;

	      for (p = tmp_sys_gdbinit; IS_DIR_SEPARATOR (*p); ++p)
		continue;
	      relocated_sysgdbinit = concat (gdb_datadir, SLASH_STRING, p,
					     NULL);
	      xfree (tmp_sys_gdbinit);
	    }
	  else
	    {
	      relocated_sysgdbinit = relocate_path (gdb_program_name,
						    SYSTEM_GDBINIT,
						    SYSTEM_GDBINIT_RELOCATABLE);
	    }
	  if (relocated_sysgdbinit && stat (relocated_sysgdbinit, &s) == 0)
	    sysgdbinit = relocated_sysgdbinit;
	  else
	    xfree (relocated_sysgdbinit);
	}

      homedir = getenv ("HOME");

      /* If the .gdbinit file in the current directory is the same as
	 the $HOME/.gdbinit file, it should not be sourced.  homebuf
	 and cwdbuf are used in that purpose.  Make sure that the stats
	 are zero in case one of them fails (this guarantees that they
	 won't match if either exists).  */

      memset (&homebuf, 0, sizeof (struct stat));
      memset (&cwdbuf, 0, sizeof (struct stat));

      if (homedir)
	{
	  homeinit = xstrprintf ("%s/%s", homedir, gdbinit);
	  if (stat (homeinit, &homebuf) != 0)
	    {
	      xfree (homeinit);
	      homeinit = NULL;
	    }
	}

      if (stat (gdbinit, &cwdbuf) == 0)
	{
	  if (!homeinit
	      || memcmp ((char *) &homebuf, (char *) &cwdbuf,
			 sizeof (struct stat)))
	    localinit = gdbinit;
	}
      
      initialized = 1;
    }

  *system_gdbinit = sysgdbinit;
  *home_gdbinit = homeinit;
  *local_gdbinit = localinit;
}

/* Call command_loop.  If it happens to return, pass that through as a
   non-zero return status.  */

static int
captured_command_loop (void *data)
{
  /* Top-level execution commands can be run in the background from
     here on.  */
  interpreter_async = 1;

  current_interp_command_loop ();
  /* FIXME: cagney/1999-11-05: A correct command_loop() implementaton
     would clean things up (restoring the cleanup chain) to the state
     they were just prior to the call.  Technically, this means that
     the do_cleanups() below is redundant.  Unfortunately, many FUNCs
     are not that well behaved.  do_cleanups should either be replaced
     with a do_cleanups call (to cover the problem) or an assertion
     check to detect bad FUNCs code.  */
  do_cleanups (all_cleanups ());
  /* If the command_loop returned, normally (rather than threw an
     error) we try to quit.  If the quit is aborted, catch_errors()
     which called this catch the signal and restart the command
     loop.  */
  quit_command (NULL, instream == stdin);
  return 1;
}

/* Arguments of --command option and its counterpart.  */
typedef struct cmdarg {
  /* Type of this option.  */
  enum {
    /* Option type -x.  */
    CMDARG_FILE,

    /* Option type -ex.  */
    CMDARG_COMMAND,

    /* Option type -ix.  */
    CMDARG_INIT_FILE,
    
    /* Option type -iex.  */
    CMDARG_INIT_COMMAND
  } type;

  /* Value of this option - filename or the GDB command itself.  String memory
     is not owned by this structure despite it is 'const'.  */
  char *string;
} cmdarg_s;

/* Define type VEC (cmdarg_s).  */
DEF_VEC_O (cmdarg_s);

static int
captured_main (void *data)
{
  struct captured_main_args *context = data;
  int argc = context->argc;
  char **argv = context->argv;
  static int quiet = 0;
  static int set_args = 0;
  static int inhibit_home_gdbinit = 0;

  /* Pointers to various arguments from command line.  */
  char *symarg = NULL;
  char *execarg = NULL;
  char *pidarg = NULL;
  char *corearg = NULL;
  char *pid_or_core_arg = NULL;
  char *cdarg = NULL;
  char *ttyarg = NULL;

  /* These are static so that we can take their address in an
     initializer.  */
  static int print_help;
  static int print_version;
  static int print_configuration;

  /* Pointers to all arguments of --command option.  */
  VEC (cmdarg_s) *cmdarg_vec = NULL;
  struct cmdarg *cmdarg_p;

  /* Indices of all arguments of --directory option.  */
  char **dirarg;
  /* Allocated size.  */
  int dirsize;
  /* Number of elements used.  */
  int ndir;

  /* gdb init files.  */
  const char *system_gdbinit;
  const char *home_gdbinit;
  const char *local_gdbinit;

  int i;
  int save_auto_load;
  struct objfile *objfile;

  struct cleanup *pre_stat_chain;

#ifdef HAVE_SBRK
  /* Set this before calling make_command_stats_cleanup.  */
  lim_at_start = (char *) sbrk (0);
#endif

  pre_stat_chain = make_command_stats_cleanup (0);

#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
  setlocale (LC_MESSAGES, "");
#endif
#if defined (HAVE_SETLOCALE)
  setlocale (LC_CTYPE, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

  bfd_init ();
  notice_open_fds ();

  make_cleanup (VEC_cleanup (cmdarg_s), &cmdarg_vec);
  dirsize = 1;
  dirarg = (char **) xmalloc (dirsize * sizeof (*dirarg));
  ndir = 0;

  clear_quit_flag ();
  saved_command_line = (char *) xmalloc (saved_command_line_size);
  saved_command_line[0] = '\0';
  instream = stdin;

#ifdef __MINGW32__
  /* Ensure stderr is unbuffered.  A Cygwin pty or pipe is implemented
     as a Windows pipe, and Windows buffers on pipes.  */
  setvbuf (stderr, NULL, _IONBF, BUFSIZ);
#endif

  gdb_stdout = stdio_fileopen (stdout);
  gdb_stderr = stderr_fileopen ();

  gdb_stdlog = gdb_stderr;	/* for moment */
  gdb_stdtarg = gdb_stderr;	/* for moment */
  gdb_stdin = stdio_fileopen (stdin);
  gdb_stdtargerr = gdb_stderr;	/* for moment */
  gdb_stdtargin = gdb_stdin;	/* for moment */

#ifdef __MINGW32__
  /* On Windows, argv[0] is not necessarily set to absolute form when
     GDB is found along PATH, without which relocation doesn't work.  */
  gdb_program_name = windows_get_absolute_argv0 (argv[0]);
#else
  gdb_program_name = xstrdup (argv[0]);
#endif

  if (! getcwd (gdb_dirbuf, sizeof (gdb_dirbuf)))
    /* Don't use *_filtered or warning() (which relies on
       current_target) until after initialize_all_files().  */
    fprintf_unfiltered (gdb_stderr,
			_("%s: warning: error finding "
			  "working directory: %s\n"),
                        argv[0], safe_strerror (errno));
    
  current_directory = gdb_dirbuf;

  /* Set the sysroot path.  */
  gdb_sysroot = relocate_gdb_directory (TARGET_SYSTEM_ROOT,
					TARGET_SYSTEM_ROOT_RELOCATABLE);

  debug_file_directory = relocate_gdb_directory (DEBUGDIR,
						 DEBUGDIR_RELOCATABLE);

  gdb_datadir = relocate_gdb_directory (GDB_DATADIR,
					GDB_DATADIR_RELOCATABLE);

#ifdef WITH_PYTHON_PATH
  {
    /* For later use in helping Python find itself.  */
    char *tmp = concat (WITH_PYTHON_PATH, SLASH_STRING, "lib", NULL);

    python_libdir = relocate_gdb_directory (tmp, PYTHON_PATH_RELOCATABLE);
    xfree (tmp);
  }
#endif

#ifdef RELOC_SRCDIR
  add_substitute_path_rule (RELOC_SRCDIR,
			    make_relative_prefix (gdb_program_name, BINDIR,
						  RELOC_SRCDIR));
#endif

  /* There will always be an interpreter.  Either the one passed into
     this captured main, or one specified by the user at start up, or
     the console.  Initialize the interpreter to the one requested by 
     the application.  */
  interpreter_p = xstrdup (context->interpreter_p);

  /* Parse arguments and options.  */
  {
    int c;
    /* When var field is 0, use flag field to record the equivalent
       short option (or arbitrary numbers starting at 10 for those
       with no equivalent).  */
    enum {
      OPT_SE = 10,
      OPT_CD,
      OPT_ANNOTATE,
      OPT_STATISTICS,
      OPT_TUI,
      OPT_NOWINDOWS,
      OPT_WINDOWS,
      OPT_IX,
      OPT_IEX
    };
    static struct option long_options[] =
    {
      {"tui", no_argument, 0, OPT_TUI},
      {"xdb", no_argument, &xdb_commands, 1},
      {"dbx", no_argument, &dbx_commands, 1},
      {"readnow", no_argument, &readnow_symbol_files, 1},
      {"r", no_argument, &readnow_symbol_files, 1},
      {"quiet", no_argument, &quiet, 1},
      {"q", no_argument, &quiet, 1},
      {"silent", no_argument, &quiet, 1},
      {"nh", no_argument, &inhibit_home_gdbinit, 1},
      {"nx", no_argument, &inhibit_gdbinit, 1},
      {"n", no_argument, &inhibit_gdbinit, 1},
      {"batch-silent", no_argument, 0, 'B'},
      {"batch", no_argument, &batch_flag, 1},

    /* This is a synonym for "--annotate=1".  --annotate is now
       preferred, but keep this here for a long time because people
       will be running emacses which use --fullname.  */
      {"fullname", no_argument, 0, 'f'},
      {"f", no_argument, 0, 'f'},

      {"annotate", required_argument, 0, OPT_ANNOTATE},
      {"help", no_argument, &print_help, 1},
      {"se", required_argument, 0, OPT_SE},
      {"symbols", required_argument, 0, 's'},
      {"s", required_argument, 0, 's'},
      {"exec", required_argument, 0, 'e'},
      {"e", required_argument, 0, 'e'},
      {"core", required_argument, 0, 'c'},
      {"c", required_argument, 0, 'c'},
      {"pid", required_argument, 0, 'p'},
      {"p", required_argument, 0, 'p'},
      {"command", required_argument, 0, 'x'},
      {"eval-command", required_argument, 0, 'X'},
      {"version", no_argument, &print_version, 1},
      {"configuration", no_argument, &print_configuration, 1},
      {"x", required_argument, 0, 'x'},
      {"ex", required_argument, 0, 'X'},
      {"init-command", required_argument, 0, OPT_IX},
      {"init-eval-command", required_argument, 0, OPT_IEX},
      {"ix", required_argument, 0, OPT_IX},
      {"iex", required_argument, 0, OPT_IEX},
#ifdef GDBTK
      {"tclcommand", required_argument, 0, 'z'},
      {"enable-external-editor", no_argument, 0, 'y'},
      {"editor-command", required_argument, 0, 'w'},
#endif
      {"ui", required_argument, 0, 'i'},
      {"interpreter", required_argument, 0, 'i'},
      {"i", required_argument, 0, 'i'},
      {"directory", required_argument, 0, 'd'},
      {"d", required_argument, 0, 'd'},
      {"data-directory", required_argument, 0, 'D'},
      {"cd", required_argument, 0, OPT_CD},
      {"tty", required_argument, 0, 't'},
      {"baud", required_argument, 0, 'b'},
      {"b", required_argument, 0, 'b'},
      {"nw", no_argument, NULL, OPT_NOWINDOWS},
      {"nowindows", no_argument, NULL, OPT_NOWINDOWS},
      {"w", no_argument, NULL, OPT_WINDOWS},
      {"windows", no_argument, NULL, OPT_WINDOWS},
      {"statistics", no_argument, 0, OPT_STATISTICS},
      {"write", no_argument, &write_files, 1},
      {"args", no_argument, &set_args, 1},
      {"l", required_argument, 0, 'l'},
      {"return-child-result", no_argument, &return_child_result, 1},
      {0, no_argument, 0, 0}
    };

    while (1)
      {
	int option_index;

	c = getopt_long_only (argc, argv, "",
			      long_options, &option_index);
	if (c == EOF || set_args)
	  break;

	/* Long option that takes an argument.  */
	if (c == 0 && long_options[option_index].flag == 0)
	  c = long_options[option_index].val;

	switch (c)
	  {
	  case 0:
	    /* Long option that just sets a flag.  */
	    break;
	  case OPT_SE:
	    symarg = optarg;
	    execarg = optarg;
	    break;
	  case OPT_CD:
	    cdarg = optarg;
	    break;
	  case OPT_ANNOTATE:
	    /* FIXME: what if the syntax is wrong (e.g. not digits)?  */
	    annotation_level = atoi (optarg);
	    break;
	  case OPT_STATISTICS:
	    /* Enable the display of both time and space usage.  */
	    set_per_command_time (1);
	    set_per_command_space (1);
	    break;
	  case OPT_TUI:
	    /* --tui is equivalent to -i=tui.  */
#ifdef TUI
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (INTERP_TUI);
#else
	    fprintf_unfiltered (gdb_stderr,
				_("%s: TUI mode is not supported\n"),
				argv[0]);
	    exit (1);
#endif
	    break;
	  case OPT_WINDOWS:
	    /* FIXME: cagney/2003-03-01: Not sure if this option is
               actually useful, and if it is, what it should do.  */
#ifdef GDBTK
	    /* --windows is equivalent to -i=insight.  */
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (INTERP_INSIGHT);
#endif
	    use_windows = 1;
	    break;
	  case OPT_NOWINDOWS:
	    /* -nw is equivalent to -i=console.  */
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (INTERP_CONSOLE);
	    use_windows = 0;
	    break;
	  case 'f':
	    annotation_level = 1;
	    /* We have probably been invoked from emacs.  Disable
	       window interface.  */
	    use_windows = 0;
	    break;
	  case 's':
	    symarg = optarg;
	    break;
	  case 'e':
	    execarg = optarg;
	    break;
	  case 'c':
	    corearg = optarg;
	    break;
	  case 'p':
	    pidarg = optarg;
	    break;
	  case 'x':
	    {
	      struct cmdarg cmdarg = { CMDARG_FILE, optarg };

	      VEC_safe_push (cmdarg_s, cmdarg_vec, &cmdarg);
	    }
	    break;
	  case 'X':
	    {
	      struct cmdarg cmdarg = { CMDARG_COMMAND, optarg };

	      VEC_safe_push (cmdarg_s, cmdarg_vec, &cmdarg);
	    }
	    break;
	  case OPT_IX:
	    {
	      struct cmdarg cmdarg = { CMDARG_INIT_FILE, optarg };

	      VEC_safe_push (cmdarg_s, cmdarg_vec, &cmdarg);
	    }
	    break;
	  case OPT_IEX:
	    {
	      struct cmdarg cmdarg = { CMDARG_INIT_COMMAND, optarg };

	      VEC_safe_push (cmdarg_s, cmdarg_vec, &cmdarg);
	    }
	    break;
	  case 'B':
	    batch_flag = batch_silent = 1;
	    gdb_stdout = ui_file_new();
	    break;
	  case 'D':
	    xfree (gdb_datadir);
	    gdb_datadir = xstrdup (optarg);
	    gdb_datadir_provided = 1;
	    break;
#ifdef GDBTK
	  case 'z':
	    {
	      extern int gdbtk_test (char *);

	      if (!gdbtk_test (optarg))
		{
		  fprintf_unfiltered (gdb_stderr,
				      _("%s: unable to load "
					"tclcommand file \"%s\""),
				      argv[0], optarg);
		  exit (1);
		}
	      break;
	    }
	  case 'y':
	    /* Backwards compatibility only.  */
	    break;
	  case 'w':
	    {
	      /* Set the external editor commands when gdb is farming out files
		 to be edited by another program.  */
	      extern char *external_editor_command;

	      external_editor_command = xstrdup (optarg);
	      break;
	    }
#endif /* GDBTK */
	  case 'i':
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (optarg);
	    break;
	  case 'd':
	    dirarg[ndir++] = optarg;
	    if (ndir >= dirsize)
	      {
		dirsize *= 2;
		dirarg = (char **) xrealloc ((char *) dirarg,
					     dirsize * sizeof (*dirarg));
	      }
	    break;
	  case 't':
	    ttyarg = optarg;
	    break;
	  case 'q':
	    quiet = 1;
	    break;
	  case 'b':
	    {
	      int i;
	      char *p;

	      i = strtol (optarg, &p, 0);
	      if (i == 0 && p == optarg)

		/* Don't use *_filtered or warning() (which relies on
		   current_target) until after initialize_all_files().  */

		fprintf_unfiltered
		  (gdb_stderr,
		   _("warning: could not set baud rate to `%s'.\n"), optarg);
	      else
		baud_rate = i;
	    }
            break;
	  case 'l':
	    {
	      int i;
	      char *p;

	      i = strtol (optarg, &p, 0);
	      if (i == 0 && p == optarg)

		/* Don't use *_filtered or warning() (which relies on
		   current_target) until after initialize_all_files().  */

		fprintf_unfiltered (gdb_stderr,
				    _("warning: could not set "
				      "timeout limit to `%s'.\n"), optarg);
	      else
		remote_timeout = i;
	    }
	    break;

	  case '?':
	    fprintf_unfiltered (gdb_stderr,
				_("Use `%s --help' for a "
				  "complete list of options.\n"),
				argv[0]);
	    exit (1);
	  }
      }

    /* If --help or --version or --configuration, disable window
       interface.  */
    if (print_help || print_version || print_configuration)
      {
	use_windows = 0;
      }

    if (batch_flag)
      quiet = 1;
  }

  /* Initialize all files.  Give the interpreter a chance to take
     control of the console via the deprecated_init_ui_hook ().  */
  gdb_init (gdb_program_name);

  /* Now that gdb_init has created the initial inferior, we're in
     position to set args for that inferior.  */
  if (set_args)
    {
      /* The remaining options are the command-line options for the
	 inferior.  The first one is the sym/exec file, and the rest
	 are arguments.  */
      if (optind >= argc)
	{
	  fprintf_unfiltered (gdb_stderr,
			      _("%s: `--args' specified but "
				"no program specified\n"),
			      argv[0]);
	  exit (1);
	}
      symarg = argv[optind];
      execarg = argv[optind];
      ++optind;
      set_inferior_args_vector (argc - optind, &argv[optind]);
    }
  else
    {
      /* OK, that's all the options.  */

      /* The first argument, if specified, is the name of the
	 executable.  */
      if (optind < argc)
	{
	  symarg = argv[optind];
	  execarg = argv[optind];
	  optind++;
	}

      /* If the user hasn't already specified a PID or the name of a
	 core file, then a second optional argument is allowed.  If
	 present, this argument should be interpreted as either a
	 PID or a core file, whichever works.  */
      if (pidarg == NULL && corearg == NULL && optind < argc)
	{
	  pid_or_core_arg = argv[optind];
	  optind++;
	}

      /* Any argument left on the command line is unexpected and
	 will be ignored.  Inform the user.  */
      if (optind < argc)
	fprintf_unfiltered (gdb_stderr,
			    _("Excess command line "
			      "arguments ignored. (%s%s)\n"),
			    argv[optind],
			    (optind == argc - 1) ? "" : " ...");
    }

  /* Lookup gdbinit files.  Note that the gdbinit file name may be
     overriden during file initialization, so get_init_files should be
     called after gdb_init.  */
  get_init_files (&system_gdbinit, &home_gdbinit, &local_gdbinit);

  /* Do these (and anything which might call wrap_here or *_filtered)
     after initialize_all_files() but before the interpreter has been
     installed.  Otherwize the help/version messages will be eaten by
     the interpreter's output handler.  */

  if (print_version)
    {
      print_gdb_version (gdb_stdout);
      wrap_here ("");
      printf_filtered ("\n");
      exit (0);
    }

  if (print_help)
    {
      print_gdb_help (gdb_stdout);
      fputs_unfiltered ("\n", gdb_stdout);
      exit (0);
    }

  if (print_configuration)
    {
      print_gdb_configuration (gdb_stdout);
      wrap_here ("");
      printf_filtered ("\n");
      exit (0);
    }

  /* FIXME: cagney/2003-02-03: The big hack (part 1 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message before the interpreter is installed.  That way
     it isn't encapsulated in MI output.  */
  if (!quiet && strcmp (interpreter_p, INTERP_MI1) == 0)
    {
      /* Print all the junk at the top, with trailing "..." if we are
         about to read a symbol file (possibly slowly).  */
      print_gdb_version (gdb_stdout);
      if (symarg)
	printf_filtered ("..");
      wrap_here ("");
      printf_filtered ("\n");
      gdb_flush (gdb_stdout);	/* Force to screen during slow
				   operations.  */
    }

  /* Install the default UI.  All the interpreters should have had a
     look at things by now.  Initialize the default interpreter.  */

  {
    /* Find it.  */
    struct interp *interp = interp_lookup (interpreter_p);

    if (interp == NULL)
      error (_("Interpreter `%s' unrecognized"), interpreter_p);
    /* Install it.  */
    if (!interp_set (interp, 1))
      {
        fprintf_unfiltered (gdb_stderr,
			    "Interpreter `%s' failed to initialize.\n",
                            interpreter_p);
        exit (1);
      }
  }

  /* FIXME: cagney/2003-02-03: The big hack (part 2 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message after the interpreter is installed when it is
     any sane interpreter.  */
  if (!quiet && !current_interp_named_p (INTERP_MI1))
    {
      /* Print all the junk at the top, with trailing "..." if we are
         about to read a symbol file (possibly slowly).  */
      print_gdb_version (gdb_stdout);
      if (symarg)
	printf_filtered ("..");
      wrap_here ("");
      printf_filtered ("\n");
      gdb_flush (gdb_stdout);	/* Force to screen during slow
				   operations.  */
    }

  /* Set off error and warning messages with a blank line.  */
  warning_pre_print = _("\nwarning: ");

  /* Read and execute the system-wide gdbinit file, if it exists.
     This is done *before* all the command line arguments are
     processed; it sets global parameters, which are independent of
     what file you are debugging or what directory you are in.  */
  if (system_gdbinit && !inhibit_gdbinit)
    catch_command_errors_const (source_script, system_gdbinit,
				0, RETURN_MASK_ALL);

  /* Read and execute $HOME/.gdbinit file, if it exists.  This is done
     *before* all the command line arguments are processed; it sets
     global parameters, which are independent of what file you are
     debugging or what directory you are in.  */

  if (home_gdbinit && !inhibit_gdbinit && !inhibit_home_gdbinit)
    catch_command_errors_const (source_script,
				home_gdbinit, 0, RETURN_MASK_ALL);

  /* Process '-ix' and '-iex' options early.  */
  for (i = 0; VEC_iterate (cmdarg_s, cmdarg_vec, i, cmdarg_p); i++)
    switch (cmdarg_p->type)
    {
      case CMDARG_INIT_FILE:
        catch_command_errors_const (source_script, cmdarg_p->string,
				    !batch_flag, RETURN_MASK_ALL);
	break;
      case CMDARG_INIT_COMMAND:
        catch_command_errors (execute_command, cmdarg_p->string,
			      !batch_flag, RETURN_MASK_ALL);
	break;
    }

  /* Now perform all the actions indicated by the arguments.  */
  if (cdarg != NULL)
    {
      catch_command_errors (cd_command, cdarg, 0, RETURN_MASK_ALL);
    }

  for (i = 0; i < ndir; i++)
    catch_command_errors (directory_switch, dirarg[i], 0, RETURN_MASK_ALL);
  xfree (dirarg);

  /* Skip auto-loading section-specified scripts until we've sourced
     local_gdbinit (which is often used to augment the source search
     path).  */
  save_auto_load = global_auto_load;
  global_auto_load = 0;

  if (execarg != NULL
      && symarg != NULL
      && strcmp (execarg, symarg) == 0)
    {
      /* The exec file and the symbol-file are the same.  If we can't
         open it, better only print one error message.
         catch_command_errors returns non-zero on success!  */
      if (catch_command_errors (exec_file_attach, execarg,
				!batch_flag, RETURN_MASK_ALL))
	catch_command_errors_const (symbol_file_add_main, symarg,
				    !batch_flag, RETURN_MASK_ALL);
    }
  else
    {
      if (execarg != NULL)
	catch_command_errors (exec_file_attach, execarg,
			      !batch_flag, RETURN_MASK_ALL);
      if (symarg != NULL)
	catch_command_errors_const (symbol_file_add_main, symarg,
				    !batch_flag, RETURN_MASK_ALL);
    }

  if (corearg && pidarg)
    error (_("Can't attach to process and specify "
	     "a core file at the same time."));

  if (corearg != NULL)
    catch_command_errors (core_file_command, corearg,
			  !batch_flag, RETURN_MASK_ALL);
  else if (pidarg != NULL)
    catch_command_errors (attach_command, pidarg,
			  !batch_flag, RETURN_MASK_ALL);
  else if (pid_or_core_arg)
    {
      /* The user specified 'gdb program pid' or gdb program core'.
	 If pid_or_core_arg's first character is a digit, try attach
	 first and then corefile.  Otherwise try just corefile.  */

      if (isdigit (pid_or_core_arg[0]))
	{
	  if (catch_command_errors (attach_command, pid_or_core_arg,
				    !batch_flag, RETURN_MASK_ALL) == 0)
	    catch_command_errors (core_file_command, pid_or_core_arg,
				  !batch_flag, RETURN_MASK_ALL);
	}
      else /* Can't be a pid, better be a corefile.  */
	catch_command_errors (core_file_command, pid_or_core_arg,
			      !batch_flag, RETURN_MASK_ALL);
    }

  if (ttyarg != NULL)
    set_inferior_io_terminal (ttyarg);

  /* Error messages should no longer be distinguished with extra output.  */
  warning_pre_print = _("warning: ");

  /* Read the .gdbinit file in the current directory, *if* it isn't
     the same as the $HOME/.gdbinit file (it should exist, also).  */
  if (local_gdbinit)
    {
      auto_load_local_gdbinit_pathname = gdb_realpath (local_gdbinit);

      if (!inhibit_gdbinit && auto_load_local_gdbinit
	  && file_is_auto_load_safe (local_gdbinit,
				     _("auto-load: Loading .gdbinit "
				       "file \"%s\".\n"),
				     local_gdbinit))
	{
	  auto_load_local_gdbinit_loaded = 1;

	  catch_command_errors_const (source_script, local_gdbinit, 0,
				      RETURN_MASK_ALL);
	}
    }

  /* Now that all .gdbinit's have been read and all -d options have been
     processed, we can read any scripts mentioned in SYMARG.
     We wait until now because it is common to add to the source search
     path in local_gdbinit.  */
  global_auto_load = save_auto_load;
  ALL_OBJFILES (objfile)
    load_auto_scripts_for_objfile (objfile);

  /* Process '-x' and '-ex' options.  */
  for (i = 0; VEC_iterate (cmdarg_s, cmdarg_vec, i, cmdarg_p); i++)
    switch (cmdarg_p->type)
    {
      case CMDARG_FILE:
        catch_command_errors_const (source_script, cmdarg_p->string,
				    !batch_flag, RETURN_MASK_ALL);
	break;
      case CMDARG_COMMAND:
        catch_command_errors (execute_command, cmdarg_p->string,
			      !batch_flag, RETURN_MASK_ALL);
	break;
    }

  /* Read in the old history after all the command files have been
     read.  */
  init_history ();

  if (batch_flag)
    {
      /* We have hit the end of the batch file.  */
      quit_force (NULL, 0);
    }

  /* Show time and/or space usage.  */
  do_cleanups (pre_stat_chain);

  /* NOTE: cagney/1999-11-07: There is probably no reason for not
     moving this loop and the code found in captured_command_loop()
     into the command_loop() proper.  The main thing holding back that
     change - SET_TOP_LEVEL() - has been eliminated.  */
  while (1)
    {
      catch_errors (captured_command_loop, 0, "", RETURN_MASK_ALL);
    }
  /* No exit -- exit is through quit_command.  */
}

int
gdb_main (struct captured_main_args *args)
{
  use_windows = args->use_windows;
  catch_errors (captured_main, args, "", RETURN_MASK_ALL);
  /* The only way to end up here is by an error (normal exit is
     handled by quit_force()), hence always return an error status.  */
  return 1;
}


/* Don't use *_filtered for printing help.  We don't want to prompt
   for continue no matter how small the screen or how much we're going
   to print.  */

static void
print_gdb_help (struct ui_file *stream)
{
  const char *system_gdbinit;
  const char *home_gdbinit;
  const char *local_gdbinit;

  get_init_files (&system_gdbinit, &home_gdbinit, &local_gdbinit);

  /* Note: The options in the list below are only approximately sorted
     in the alphabetical order, so as to group closely related options
     together.  */
  fputs_unfiltered (_("\
This is the GNU debugger.  Usage:\n\n\
    gdb [options] [executable-file [core-file or process-id]]\n\
    gdb [options] --args executable-file [inferior-arguments ...]\n\n\
"), stream);
  fputs_unfiltered (_("\
Selection of debuggee and its files:\n\n\
  --args             Arguments after executable-file are passed to inferior\n\
  --core=COREFILE    Analyze the core dump COREFILE.\n\
  --exec=EXECFILE    Use EXECFILE as the executable.\n\
  --pid=PID          Attach to running process PID.\n\
  --directory=DIR    Search for source files in DIR.\n\
  --se=FILE          Use FILE as symbol file and executable file.\n\
  --symbols=SYMFILE  Read symbols from SYMFILE.\n\
  --readnow          Fully read symbol files on first access.\n\
  --write            Set writing into executable and core files.\n\n\
"), stream);
  fputs_unfiltered (_("\
Initial commands and command files:\n\n\
  --command=FILE, -x Execute GDB commands from FILE.\n\
  --init-command=FILE, -ix\n\
                     Like -x but execute commands before loading inferior.\n\
  --eval-command=COMMAND, -ex\n\
                     Execute a single GDB command.\n\
                     May be used multiple times and in conjunction\n\
                     with --command.\n\
  --init-eval-command=COMMAND, -iex\n\
                     Like -ex but before loading inferior.\n\
  --nh               Do not read ~/.gdbinit.\n\
  --nx               Do not read any .gdbinit files in any directory.\n\n\
"), stream);
  fputs_unfiltered (_("\
Output and user interface control:\n\n\
  --fullname         Output information used by emacs-GDB interface.\n\
  --interpreter=INTERP\n\
                     Select a specific interpreter / user interface\n\
  --tty=TTY          Use TTY for input/output by the program being debugged.\n\
  -w                 Use the GUI interface.\n\
  --nw               Do not use the GUI interface.\n\
"), stream);
#if defined(TUI)
  fputs_unfiltered (_("\
  --tui              Use a terminal user interface.\n\
"), stream);
#endif
  fputs_unfiltered (_("\
  --dbx              DBX compatibility mode.\n\
  --xdb              XDB compatibility mode.\n\
  --quiet            Do not print version number on startup.\n\n\
"), stream);
  fputs_unfiltered (_("\
Operating modes:\n\n\
  --batch            Exit after processing options.\n\
  --batch-silent     Like --batch, but suppress all gdb stdout output.\n\
  --return-child-result\n\
                     GDB exit code will be the child's exit code.\n\
  --configuration    Print details about GDB configuration and then exit.\n\
  --help             Print this message and then exit.\n\
  --version          Print version information and then exit.\n\n\
Remote debugging options:\n\n\
  -b BAUDRATE        Set serial port baud rate used for remote debugging.\n\
  -l TIMEOUT         Set timeout in seconds for remote debugging.\n\n\
Other options:\n\n\
  --cd=DIR           Change current directory to DIR.\n\
"), stream);
  fputs_unfiltered (_("\n\
At startup, GDB reads the following init files and executes their commands:\n\
"), stream);
  if (system_gdbinit)
    fprintf_unfiltered (stream, _("\
   * system-wide init file: %s\n\
"), system_gdbinit);
  if (home_gdbinit)
    fprintf_unfiltered (stream, _("\
   * user-specific init file: %s\n\
"), home_gdbinit);
  if (local_gdbinit)
    fprintf_unfiltered (stream, _("\
   * local init file (see also 'set auto-load local-gdbinit'): ./%s\n\
"), local_gdbinit);
  fputs_unfiltered (_("\n\
For more information, type \"help\" from within GDB, or consult the\n\
GDB manual (available as on-line info or a printed manual).\n\
"), stream);
  if (REPORT_BUGS_TO[0] && stream == gdb_stdout)
    fprintf_unfiltered (stream, _("\
Report bugs to \"%s\".\n\
"), REPORT_BUGS_TO);
}
@


1.131
log
@Add new function to access gdb_program_name.

  https://sourceware.org/ml/gdb-patches/2013-09/msg00225.html

gdb/ChangeLog

        * main.h (get_gdb_program_name): Add declaration.
        * main.c (get_gdb_program_name): Add definition.
@
text
@d960 2
a961 2
	catch_command_errors (symbol_file_add_main, symarg,
			      !batch_flag, RETURN_MASK_ALL);
d969 2
a970 2
	catch_command_errors (symbol_file_add_main, symarg,
			      !batch_flag, RETURN_MASK_ALL);
@


1.130
log
@gdb/

	* event-top.c (gdb_setup_readline): Call stderr_fileopen
	instead of stdio_fileopen.
	* main.c (captured_main) [__MINGW32__]: Set stderr unbuffered.
	.Call stderr_fileopen instead of stdio_fileopen.
	* ui-file.c [__MINGW32__] (stderr_file_write): New function.
	[__MINGW32__] (stderr_file_fputs): New function.
	(stderr_fileopen): New function.
	* ui-file.h (stderr_fileopen): Declare.
@
text
@d101 7
@


1.129
log
@Remove error_pre_print and quit_pre_print.

  http://sourceware.org/ml/gdb-patches/2013-07/msg00844.html

gdb/ChangeLog

        * cli/cli-script.c (script_from_file): Remove use of
        error_pre_print.
        * main.c (captured_main): Remove use of error_pre_print and
        quit_pre_print.
        * utils.c (error_pre_print, quit_pre_print): Remove.
        * utils.h (error_pre_print, quit_pre_print): Likewise.
@
text
@d378 6
d385 2
a386 1
  gdb_stderr = stdio_fileopen (stderr);
@


1.128
log
@	* main.c (captured_command_loop): Tweak comment.
@
text
@a887 2
  error_pre_print = "\n";
  quit_pre_print = error_pre_print;
a990 2
  error_pre_print = NULL;
  quit_pre_print = NULL;
@


1.127
log
@Rearrange --help output.

	* main.c (print_gdb_help): Regroup options in the --help text.
	See http://sourceware.org/ml/gdb-patches/2013-04/msg00362.html for
	the relevant discussions.
@
text
@d256 1
a256 1
  /* Top-level execution commands can be run on the background from
@


1.126
log
@Constify main.c:get_init_files.

A following patch will want to make the "gdbinit" global array const.
As usual, that forces in a cascading series of const additions.  This
patch preemptively does those.  I went all the way up to constifying
catch_command_errors, but then that would require constifying
execute_command as well (which is a much more significant effort).  So
as stop point, I found the cleanest would be to add a variant of
catch_command_errors that takes const args, and use that in the few
spots that needed it due to the the get_init_files constification.

gdb/
2013-07-01  Pedro Alves  <palves@@redhat.com>

	* cli/cli-cmds.c (source_script): Make 'file' parameter const.
	* cli/cli-cmds.h (source_script): Likewise.
	* exceptions.c (catch_command_errors_const): New function.
	* exceptions.h (catch_command_errors_const): Declare.
	* main.c (get_init_files): Make parameters const, and adjust.
	(captured_main): Make 'system_gdbinit', 'home_gdbinit' and
	'local_gdbinit' locals const.  Adjust to use
	catch_command_errors_const.
	(print_gdb_help): Make 'system_gdbinit', 'home_gdbinit' and
	'local_gdbinit' locals const.
@
text
@d1086 3
a1092 1
Options:\n\n\
d1095 1
d1097 8
d1107 1
a1107 6
  -b BAUDRATE        Set serial port baud rate used for remote debugging.\n\
  --batch            Exit after processing options.\n\
  --batch-silent     As for --batch, but suppress all gdb stdout output.\n\
  --return-child-result\n\
                     GDB exit code will be the child's exit code.\n\
  --cd=DIR           Change current directory to DIR.\n\
d1109 2
d1115 4
a1118 4
  --init-command=FILE, -ix Like -x but execute it before loading inferior.\n\
  --init-eval-command=COMMAND, -iex Like -ex but before loading inferior.\n\
  --core=COREFILE    Analyze the core dump COREFILE.\n\
  --pid=PID          Attach to running process PID.\n\
d1121 1
a1121 3
  --dbx              DBX compatibility mode.\n\
  --directory=DIR    Search for source files in DIR.\n\
  --exec=EXECFILE    Use EXECFILE as the executable.\n\
a1122 3
  --help             Print this message.\n\
"), stream);
  fputs_unfiltered (_("\
a1124 16
"), stream);
  fputs_unfiltered (_("\
  -l TIMEOUT         Set timeout in seconds for remote debugging.\n\
  --nw		     Do not use a window interface.\n\
  --nx               Do not read any "), stream);
  fputs_unfiltered (gdbinit, stream);
  fputs_unfiltered (_(" files.\n\
  --nh               Do not read "), stream);
  fputs_unfiltered (gdbinit, stream);
  fputs_unfiltered (_(" file from home directory.\n\
  --quiet            Do not print version number on startup.\n\
  --readnow          Fully read symbol files on first access.\n\
"), stream);
  fputs_unfiltered (_("\
  --se=FILE          Use FILE as symbol file and executable file.\n\
  --symbols=SYMFILE  Read symbols from SYMFILE.\n\
d1126 2
d1135 10
a1144 1
  --version          Print version information and then exit.\n\
d1146 7
a1152 3
  -w                 Use a window interface.\n\
  --write            Set writing into executable and core files.\n\
  --xdb              XDB compatibility mode.\n\
@


1.125
log
@	PR gdb/7912:
	* Makefile.in (SFILES): Add filestuff.c
	(COMMON_OBS): Add filestuff.o.
	(filestuff.o): New target.
	* auto-load.c (auto_load_objfile_script_1): Use
	gdb_fopen_cloexec.
	* auxv.c (procfs_xfer_auxv): Use gdb_open_cloexec.
	* cli/cli-cmds.c (shell_escape): Call close_most_fds.
	* cli/cli-dump.c (fopen_with_cleanup): Use gdb_fopen_cloexec.
	* common/agent.c (gdb_connect_sync_socket): Use
	gdb_socket_cloexec.
	* common/filestuff.c: New file.
	* common/filestuff.h: New file.
	* common/linux-osdata.c (linux_common_core_of_thread)
	(command_from_pid, commandline_from_pid, print_source_lines)
	(linux_xfer_osdata_shm, linux_xfer_osdata_sem)
	(linux_xfer_osdata_msg, linux_xfer_osdata_modules): Use
	gdb_fopen_cloexec.
	* common/linux-procfs.c (linux_proc_get_int)
	(linux_proc_pid_has_state): Use gdb_fopen_cloexec.
	* config.in, configure: Rebuild.
	* configure.ac: Don't check for sys/socket.h.  Check for
	fdwalk, pipe2.
	* corelow.c (core_open): Use gdb_open_cloexec.
	* dwarf2read.c (write_psymtabs_to_index): Use gdb_fopen_cloexec.
	* fork-child.c (fork_inferior): Call close_most_fds.
	* gdb_bfd.c (gdb_bfd_open): Use gdb_open_cloexec.
	* inf-child.c (inf_child_fileio_readlink): Use gdb_open_cloexec.
	* linux-nat.c (linux_nat_thread_name, linux_proc_pending_signals):
	Use gdb_fopen_cloexec.
	(linux_proc_xfer_partial, linux_proc_xfer_spu): Use
	gdb_open_cloexec.
	(linux_async_pipe): Use gdb_pipe_cloexec.
	* remote-fileio.c (remote_fileio_func_open): Use
	gdb_open_cloexec.
	* remote.c (remote_file_put, remote_file_get): Use
	gdb_fopen_cloexec.
	* ser-pipe.c (pipe_open): Use gdb_socketpair_cloexec,
	close_most_fds.
	* ser-tcp.c (net_open): Use gdb_socket_cloexec.
	* ser-unix.c (hardwire_open): Use gdb_open_cloexec.
	* solib.c (solib_find): Use gdb_open_cloexec.
	* source.c (openp, find_and_open_source): Use gdb_open_cloexec.
	* tracepoint.c (tfile_start): Use gdb_fopen_cloexec.
	(tfile_open): Use gdb_open_cloexec.
	* tui/tui-io.c (tui_initialize_io): Use gdb_pipe_cloexec.
	* ui-file.c (gdb_fopen): Use gdb_fopen_cloexec.
	* xml-support.c (xml_fetch_content_from_file): Use
	gdb_fopen_cloexec.
	* main.c (captured_main): Call notice_open_fds.
gdbserver
	* Makefile.in (SFILES): Add filestuff.c.
	(OBS): Add filestuff.o.
	(filestuff.o): New target.
	* config.in, configure: Rebuild.
	* configure.ac: Check for fdwalk, pipe2.
@
text
@d163 3
a165 3
get_init_files (char **system_gdbinit,
		char **home_gdbinit,
		char **local_gdbinit)
d167 1
a167 1
  static char *sysgdbinit = NULL;
d169 1
a169 1
  static char *localinit = NULL;
d339 3
a341 3
  char *system_gdbinit;
  char *home_gdbinit;
  char *local_gdbinit;
d897 2
a898 1
    catch_command_errors (source_script, system_gdbinit, 0, RETURN_MASK_ALL);
d906 2
a907 1
    catch_command_errors (source_script, home_gdbinit, 0, RETURN_MASK_ALL);
d914 2
a915 2
        catch_command_errors (source_script, cmdarg_p->string,
			      !batch_flag, RETURN_MASK_ALL);
d1011 2
a1012 2
	  catch_command_errors (source_script, local_gdbinit, 0,
				RETURN_MASK_ALL);
d1029 2
a1030 2
        catch_command_errors (source_script, cmdarg_p->string,
			      !batch_flag, RETURN_MASK_ALL);
d1080 3
a1082 3
  char *system_gdbinit;
  char *home_gdbinit;
  char *local_gdbinit;
@


1.124
log
@Implement a new command to show GDB build-time configuration parameters.

	* top.c (print_gdb_configuration): New function, displays the
	details about GDB configure-time parameters.
	(print_gdb_version): Mention "show configuration".

	* cli/cli-cmds.c (show_configuration): New function.
	(_initialize_cli_cmds): Add the "show configuration" command.

	* main.c (captured_main) <print_configuration>: New static var.
	<long_options>: Use it.
	If --configuration was given, call print_gdb_configuration.

	* doc/gdb.texinfo (Mode Options): Document '-configuration'.
	(Help): Document "show configuration".
	(Bug Reporting): Add requirements to include the configuration
	details in bug reports.
@
text
@d48 1
d366 1
@


1.123
log
@Unbreak Windows-hosted cross debugger builds.

	* windows-nat.c (windows_get_absolute_argv0): Move from here...
	* mingw-hdep.c (windows_get_absolute_argv0): ...to here.
	Include main.h.

	* windows-nat.h (windows_get_absolute_argv0): Move prototype from
	here...
	* main.h (windows_get_absolute_argv0): ...to here.
@
text
@d324 1
d487 1
d731 3
a733 2
    /* If --help or --version, disable window interface.  */
    if (print_help || print_version)
d824 8
d1143 1
@


1.122
log
@Fix relocation of directories in the MinGW build.

 windows-nat.c (windows_get_absolute_argv0): New function.
 windows-nat.h: Add its prototype.
 main.c (get_init_files): Use filename_ncmp instead of strncmp.
 Use IS_DIR_SEPARATOR instead of looking for a character inside
 SLASH_STRING.  Include filenames.h.
 (captured_main) [__MINGW32__]: Make argv[0] absolute, so that
 relocate_gdb_directory works when passed gdb_program_name.
 Include windows-nat.h.
@
text
@a47 3
#ifdef __MINGW32__
# include "windows-nat.h"
#endif
@


1.121
log
@	New commands "mt set per-command {space,time,symtab} {on,off}".
	* NEWS: Add entry.
	* event-top.c: #include "maint.h".
	* main.c: #include "maint.h".
	* maint.c: #include <sys/time.h>, <time.h>, block.h, top.h,
	timeval-utils.h, maint.h, cli/cli-setshow.h.
	(per_command_time, per_command_space): New static globals.
	(per_command_symtab): New static global.
	(per_command_setlist, per_command_showlist): New static globals.
	(struct cmd_stats): Move here from utils.c.
	(set_per_command_time): Renamed from set_display_time in utils.c
	and moved here.  All callers updated.
	(set_per_command_space): Renamed from set_display_space in utils.c
	and moved here.  All callers updated.
	(count_symtabs_and_blocks): New function.
	(report_command_stats): Moved here from utils.c.  Add support for
	printing symtab stats.  Only print data if enabled before command
	executed.
	(make_command_stats_cleanup): Ditto.
	(sert_per_command_cmd, show_per_command_cmd): New functions.
	(_initialize_maint_cmds): Add new commands
	mt set per-command {space,time,symtab} {on,off}.
	* maint.h: New file.
	* top.c: #include "maint.h".
	* utils.c (reset_prompt_for_continue_wait_time): New function.
	(get_prompt_for_continue_wait_time): New function.
	* utils.h (reset_prompt_for_continue_wait_time): Declare
	(get_prompt_for_continue_wait_time): Declare.
	(make_command_stats_cleanup): Moved to maint.h.
	(set_display_time, set_display_space): Moved to maint.h and renamed
	to set_per_command_time, set_per_command_space.
	* cli/cli-setshow.c (parse_cli_boolean_value): Renamed from
	parse_binary_operation and made non-static.  Don't call error,
	just return an error marker.  All callers updated.
	* cli/cli-setshow.h (parse_cli_boolean_value): Declare.

	doc/
	* gdb.texinfo (Maintenance Commands): Add docs for
	"mt set per-command {space,time,symtab} {on,off}".

	testsuite/
	* gdb.base/maint.exp: Update tests for per-command stats.
@
text
@d47 5
d189 2
a190 2
	      && strncmp (SYSTEM_GDBINIT, GDB_DATADIR, datadir_len) == 0
	      && strchr (SLASH_STRING, SYSTEM_GDBINIT[datadir_len]) != NULL)
d197 1
a197 1
	      for (p = tmp_sys_gdbinit; strchr (SLASH_STRING, *p); ++p)
d386 5
d392 1
d426 1
a426 1
			    make_relative_prefix (argv[0], BINDIR,
d744 1
a744 1
  gdb_init (argv[0]);
@


1.120
log
@gdb/
	* main.c (print_gdb_help): Remove "--epoch" from the help
	message.
@
text
@d45 1
d542 2
a543 2
	    set_display_time (1);
	    set_display_space (1);
@


1.120.2.1
log
@Fix GDB relocation on MinGW.

	* mingw-hdep.c (windows_get_absolute_argv0): New function.
	Include main.h.

	* main.h (windows_get_absolute_argv0): Add prototype.

	* main.c (get_init_files): Use filename_ncmp instead of strncmp.
	Use IS_DIR_SEPARATOR instead of looking for a character inside
	SLASH_STRING.  Include filenames.h.
	(captured_main) [__MINGW32__]: Make argv[0] absolute, so that
	relocate_gdb_directory works when passed gdb_program_name.
@
text
@a45 2
#include "filenames.h"

d183 2
a184 2
	      && filename_ncmp (SYSTEM_GDBINIT, GDB_DATADIR, datadir_len) == 0
	      && IS_DIR_SEPARATOR (SYSTEM_GDBINIT[datadir_len]))
d191 1
a191 1
	      for (p = tmp_sys_gdbinit; IS_DIR_SEPARATOR (*p); ++p)
a379 5
#ifdef __MINGW32__
  /* On Windows, argv[0] is not necessarily set to absolute form when
     GDB is found along PATH, without which relocation doesn't work.  */
  gdb_program_name = windows_get_absolute_argv0 (argv[0]);
#else
a380 1
#endif
d414 1
a414 1
			    make_relative_prefix (gdb_program_name, BINDIR,
d732 1
a732 1
  gdb_init (gdb_program_name);
@


1.119
log
@	* main.c (captured_main): Call bfd_init.
@
text
@a1090 1
  --epoch            Output information used by epoch emacs-GDB interface.\n\
@


1.118
log
@	PR cli/7719:
	* NEWS: Update.
	* ada-valprint.c (printstr, print_field_values): Remove
	"inspect_it" code.
	* cp-valprint.c (cp_print_value_fields): Remove "inspect_it"
	code.
	* jv-valprint.c (java_print_value_fields): Remove "inspect_it"
	code.
	* m2-lang.c (m2_printstr): Remove "inspect_it" code.
	* main.c (captured_main): Remove "epoch" argument.
	* objc-lang.c (objc_printstr): Remove "inspect_it" code.
	* p-lang.c (pascal_printstr): Remove "inspect_it" code.
	* p-valprint.c (pascal_object_print_value_fields): Remove
	"inspect_it" code.
	* printcmd.c (print_command_1): Remove 'inspect' argument.
	(print_command, call_command): Update.
	(inspect_command): Remove.
	(_initialize_printcmd): Make "inspect" an alias for "print".
	* top.c (epoch_interface): Remove.
	* top.h (epoch_interface): Remove.
	* valprint.c (user_print_options): Update.
	(print_converted_chars_to_obstack): Remove "inspect_it" code.
	* valprint.h (struct value_print_options) <inspect_it>: Remove
	field.
doc
	* gdb.texinfo (Mode Options): Don't mention -epoch.
	(Data, Emacs): Remove obsolete comments.
@
text
@d360 2
@


1.117
log
@	* main.c (relocate_gdb_directory): Avoid calling stat function
	if DIR is empty.
@
text
@a453 1
      {"epoch", no_argument, &epoch_interface, 1},
@


1.116
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d129 1
a129 1
      if (stat (dir, &s) != 0 || !S_ISDIR (s.st_mode))
@


1.115
log
@	* main.c (gdb_datadir_provided): New static global.
	(get_init_files): If --data-directory is provided,
	and SYSTEM_GDBINIT lives in data-directory, look for it there.
	* NEWS: Mention it.

	doc/
	* gdb.texinfo (System-wide configuration): If the system-wide init
	file lives in the data-directory, and --data-directory is provided,
	look for it there.
@
text
@d3 1
a3 1
   Copyright (C) 1986-2005, 2007-2012 Free Software Foundation, Inc.
@


1.114
log
@	New option -nh: inhibit loading of ~/.gdbinit.
	* NEWS: Mention -nh.
	* main.c (captured_main): Recognize and process -nh.
	(print_gdb_help): Mention -nh.
	* gdb.1: Mention -nh.  Remove erroneous docs on -nx behavior.

	doc/
	* gdb.texinfo (Mode Options): Document -nh.
	Elaborate on docs for -nx.
@
text
@d63 5
d171 1
a171 1
      char *homedir, *relocated_sysgdbinit;
d175 28
a202 3
	  relocated_sysgdbinit = relocate_path (gdb_program_name,
						SYSTEM_GDBINIT,
						SYSTEM_GDBINIT_RELOCATABLE);
d624 1
@


1.113
log
@	* main.c (print_gdb_help): Remove reference to
	--use-deprecated-index-sections.
@
text
@d276 1
d419 1
d850 1
a850 1
  if (home_gdbinit && !inhibit_gdbinit)
d1071 1
a1071 1
  --nx               Do not read "), stream);
d1073 4
a1076 1
  fputs_unfiltered (_(" file.\n\
@


1.112
log
@	* defs.h (quit_flag): Don't declare.
	(clear_quit_flag, check_quit_flag, set_quit_flag): Declare.
	(QUIT): Use new functions.
	* event-top.c (command_handler): Use clear_quit_flag.
	(handle_sigint): Use set_quit_flag.
	(async_request_quit): Use check_quit_flag.  Don't check
	immediate_quit.
	* exceptions.c (throw_exception): Use clear_quit_flag.
	* main.c (captured_main): Use clear_quit_flag.
	* python/python.c (clear_quit_flag, set_quit_flag)
	(check_quit_flag): New functions.
	* remote-sim.c (gdb_os_poll_quit): Use check_quit_flag,
	clear_quit_flag.
	* remote.c (remote_wait_as): Use check_quit_flag,
	clear_quit_flag.
	(remote_start_remote): Call QUIT.
	* symfile.c (load_progress): Use check_quit_flag.
	* top.c (command_loop): Use clear_quit_flag.
	(command_line_input): Call QUIT.
	* utils.c (quit_flag): Conditionally define.
	(clear_quit_flag, check_quit_flag, set_quit_flag): New
	functions.
	(prompt_for_continue): Call QUIT.  Use quit, not
	async_request_quit.
	* remote-mips.c (mips_expect_timeout): Call QUIT.
	* monitor.c (monitor_expect): Call QUIT.
@
text
@a1085 4
  --use-deprecated-index-sections\n\
                     Do not reject deprecated .gdb_index sections.\n\
"), stream);
  fputs_unfiltered (_("\
@


1.111
log
@	* NEWS: Document new options "set/show use-deprecated-index-sections",
	and delete reference to --use-deprecated-index-sections.
	* symfile.h (use_deprecated_index_sections): Delete.
	* dwarf2read.c (use_deprecated_index_sections): Make static.
	(read_index_from_section): Update wording of how to load
	deprecated index sections.
	(_initialize_dwarf2_read): New options
	"set/show use-deprecated-index-sections".
	* main.c (captured_main): Delete --use-deprecated-index-sections.

	doc/
	* gdb.texinfo (Mode Options): Delete --use-deprecated-index-sections.
	(Index Files): Document how to control the use of deprecated index
	sections.
	(Index Section Format): Replace --use-deprecated-index-sections with
	"set use-deprecated-index-sections on".
@
text
@d334 1
a334 1
  quit_flag = 0;
@


1.110
log
@gdb/
	Execute -ix and -iex only after system and user gdbinit files.
	* main.c (captured_main): Move CMDARG_INIT_FILE and CMDARG_INIT_COMMAND
	processing down after gdbinit files.

gdb/doc/
	* gdb.texinfo (File Options): Change -ix and -iex commands that apply
	only after gdbinit files.
	(Startup): Move -iex and -iex commands down after gdbinit files.
@
text
@a473 2
      {"use-deprecated-index-sections", no_argument,
       &use_deprecated_index_sections, 1},
@


1.110.2.1
log
@	* NEWS: Document new options "set/show use-deprecated-index-sections",
	and delete reference to --use-deprecated-index-sections.
	* symfile.h (use_deprecated_index_sections): Delete.
	* dwarf2read.c (use_deprecated_index_sections): Make static.
	(read_index_from_section): Update wording of how to load
	deprecated index sections.
	(_initialize_dwarf2_read): New options
	"set/show use-deprecated-index-sections".
	* main.c (captured_main): Delete --use-deprecated-index-sections.

	doc/
	* gdb.texinfo (Mode Options): Delete --use-deprecated-index-sections.
	(Index Files): Document how to control the use of deprecated index
	sections.
	(Index Section Format): Replace --use-deprecated-index-sections with
	"set use-deprecated-index-sections on".
@
text
@d474 2
@


1.110.2.2
log
@	* main.c (print_gdb_help): Remove reference to
	--use-deprecated-index-sections.
@
text
@d1086 4
@


1.109
log
@	* top.c (quit_target): Use all_cleanups.
	* main.c (captured_command_loop): Use all_cleanups.
	* exceptions.c (throw_exception): Use all_cleanups.
@
text
@a837 14
  /* Process '-ix' and '-iex' options early.  */
  for (i = 0; VEC_iterate (cmdarg_s, cmdarg_vec, i, cmdarg_p); i++)
    switch (cmdarg_p->type)
    {
      case CMDARG_INIT_FILE:
        catch_command_errors (source_script, cmdarg_p->string,
			      !batch_flag, RETURN_MASK_ALL);
	break;
      case CMDARG_INIT_COMMAND:
        catch_command_errors (execute_command, cmdarg_p->string,
			      !batch_flag, RETURN_MASK_ALL);
	break;
    }

d853 14
@


1.108
log
@gdb/
	New option "set debug auto-load".
	* NEWS: New commands "set debug auto-load" and "show debug auto-load".
	* auto-load.c (debug_auto_load, show_debug_auto_load: New.
	(auto_load_safe_path_vec_update)
	(filename_is_in_auto_load_safe_path_vec): Call fprintf_unfiltered
	if DEBUG_AUTO_LOAD.
	(file_is_auto_load_safe): New parameters debug_fmt and ....
	Call fprintf_unfiltered if DEBUG_AUTO_LOAD.
	(source_gdb_script_for_objfile): Extend the file_is_auto_load_safe
	caller by explanatory string.
	(_initialize_auto_load): Register "set debug auto-load".
	* auto-load.h (file_is_auto_load_safe): New parameters debug_fmt
	and ....
	* linux-thread-db.c (try_thread_db_load_from_pdir_1)
	(try_thread_db_load_from_dir): Extend the file_is_auto_load_safe caller
	by explanatory string.
	* main.c (captured_main): Likewise.
	* python/py-auto-load.c (gdbpy_load_auto_script_for_objfile)
	(source_section_scripts): Likewise.

gdb/doc/
	New option "set debug auto-load".
	* gdb.texinfo (Auto-loading): New menu item for auto-load verbose mode.
	(auto-load verbose mode): New node.
@
text
@d234 1
a234 1
  do_cleanups (ALL_CLEANUPS);
@


1.107
log
@gdb/
	New option "set auto-load safe-path".
	* NEWS: New commands "set auto-load safe-path"
	and "show auto-load safe-path".
	* auto-load.c: Include gdb_vecs.h, readline/tilde.h and completer.h.
	(auto_load_safe_path, auto_load_safe_path_vec)
	(auto_load_safe_path_vec_update, set_auto_load_safe_path)
	(show_auto_load_safe_path, add_auto_load_safe_path, filename_is_in_dir)
	(filename_is_in_auto_load_safe_path_vec, file_is_auto_load_safe): New.
	(source_gdb_script_for_objfile): New variable is_safe.  Call
	file_is_auto_load_safe.  Return if it is not.
	(struct loaded_script): New field loaded.
	(maybe_add_script): Add parameter loaded.  Initialize SLOT with it.
	(print_script): Use LOADED indicator instead of FULL_PATH.  Change
	output "Missing" to "No".
	(_initialize_auto_load): New variable cmd.  Initialize
	auto_load_safe_path.  Register "set auto-load safe-path",
	"show auto-load safe-path" and "add-auto-load-safe-path".
	* auto-load.h (maybe_add_script): Add parameter loaded.
	(file_is_auto_load_safe): New declaration.
	* config.in: Regenerate.
	* configure: Regenerate.
	* configure.ac: New parameters --with-auto-load-safe-path
	and --without-auto-load-safe-path.
	* linux-thread-db.c (try_thread_db_load_from_pdir_1)
	(try_thread_db_load_from_dir): Check file_is_auto_load_safe first.
	* main.c (captured_main): Check file_is_auto_load_safe for
	LOCAL_GDBINIT.
	* python/py-auto-load.c (gdbpy_load_auto_script_for_objfile): New
	variable is_safe.  Call file_is_auto_load_safe.  Return if it is not.
	(source_section_scripts): Call file_is_auto_load_safe.  Return if it is
	not.

gdb/doc/
	New option "set auto-load safe-path".
	* gdb.texinfo (Auto-loading): Extend the "show auto-load"
	and "info auto-load" examples for safe-path.  Put there also references
	for "set auto-load safe-path" and "show auto-load safe-path".
	New menu item for Auto-loading safe path.
	(Auto-loading safe path): New node.
	(Python Auto-loading): Update the expected output from "Missing"
	to "No".

gdb/testsuite/
	New option "set auto-load safe-path".
	* gdb.python/py-objfile-script.exp (set auto-load safe-path): New.
	* gdb.python/py-section-script.exp (set auto-load safe-path): New.
@
text
@d948 4
a951 1
	  && file_is_auto_load_safe (local_gdbinit))
@


1.106
log
@gdb/
	auto-load: Implementation.
	* NEWS: New descriptions for "info auto-load",
	"info auto-load gdb-scripts", "info auto-load python-scripts",
	"info auto-load local-gdbinit" and "info auto-load libthread-db".
	Deprecate "info auto-load-scripts", "set auto-load-scripts on|off"
	and "show auto-load-scripts".  New description for "set auto-load",
	"show auto-load", "set auto-load gdb-scripts",
	"show auto-load gdb-scripts", "set auto-load python-scripts",
	"show auto-load python-scripts", "set auto-load local-gdbinit",
	"show auto-load local-gdbinit", "set auto-load libthread-db" and
	"show auto-load libthread-db".
	* auto-load.c: Remove include python/python-internal.h.  Add includes
	exceptions.h, cli/cli-script.h, gdbcmd.h, cli/cli-decode.h and
	cli/cli-setshow.h.
	(GDB_AUTO_FILE_NAME, source_gdb_script_for_objfile)
	(auto_load_gdb_scripts, show_auto_load_gdb_scripts): New.
	(gdbpy_global_auto_load): Rename to ...
	(global_auto_load): ... here.
	(auto_load_local_gdbinit, auto_load_local_gdbinit_pathname)
	(auto_load_local_gdbinit_loaded, show_auto_load_local_gdbinit)
	(script_language_gdb, source_gdb_script_for_objfile): New.
	(struct loaded_script): New field language.
	(hash_loaded_script_entry, eq_loaded_script_entry): Calculate also
	LANGUAGE.
	(maybe_add_script): Add parameter language.  Drop redundant
	entry.full_path initialization.  Initialize entry.language and
	(*slot)->language.
	(auto_load_objfile_script): Change parameter suffix to language.
	Remove the call of maybe_add_script.
	Call language->source_script_for_objfile.
	(load_auto_scripts_for_objfile, struct collect_matching_scripts_data):
	New.
	(collect_matching_scripts): Adjust it for
	struct collect_matching_scripts_data.
	(auto_load_info_scripts_pattern_nl): New variable.
	(info_auto_load_scripts): Rename to ...
	(auto_load_info_scripts): ... here, add parameter language.  Adjust it
	for struct collect_matching_scripts_data.
	(info_auto_load_gdb_scripts, info_auto_load_local_gdbinit)
	(set_auto_load_cmd, auto_load_set_cmdlist_get, show_auto_load_cmd)
	(auto_load_show_cmdlist_get, info_auto_load_cmd)
	(auto_load_info_cmdlist_get): New.
	(_initialize_auto_load): Move add_info of "auto-load-scripts" to
	python/py-auto-load.c.  New installment for "set auto-load gdb-scripts",
	"info auto-load gdb-scripts", "set auto-load local-gdbinit" and
	"info auto-load local-gdbinit".
	* auto-load.h (struct script_language): New.
	(gdbpy_global_auto_load): Rename to ...
	(global_auto_load): ... here.
	(auto_load_local_gdbinit, auto_load_local_gdbinit_pathname)
	(auto_load_local_gdbinit_loaded): New declarations.
	(maybe_add_script): New parameter language.
	(auto_load_objfile_script): Change parameter suffix to language.
	(load_auto_scripts_for_objfile, auto_load_info_scripts_pattern_nl)
	(auto_load_info_scripts, auto_load_set_cmdlist_get)
	(auto_load_show_cmdlist_get, auto_load_info_cmdlist_get): New
	declarations.
	* linux-thread-db.c: Include auto-load.h and ctype.h.
	(auto_load_thread_db, show_auto_load_thread_db): New.
	(struct thread_db_info): New field filename.
	(delete_thread_db_info): Call xfree for FILENAME.
	(try_thread_db_load): Initialize FILENAME.
	(try_thread_db_load_from_pdir, try_thread_db_load_from_dir): Return
	if !AUTO_LOAD_THREAD_DB.
	(info_auto_load_libthread_db_compare, info_auto_load_libthread_db): New.
	(_initialize_thread_db): Install auto_load_thread_db
	as "set auto-load libthread-db" and install info_auto_load_libthread_db
	as "info auto-load libthread-db".
	* main.c (captured_main): Rename gdbpy_global_auto_load to
	global_auto_load.  Initialize AUTO_LOAD_LOCAL_GDBINIT_PATHNAME and
	AUTO_LOAD_LOCAL_GDBINIT_LOADED.
	(print_gdb_help): Extend the help for 'local init file'.
	* python/py-auto-load.c: Remove a comment about gdb scripts extension.
	(GDBPY_AUTO_SECTION_NAME): Extend the comment it is Python specific.
	(auto_load_scripts): Rename to ...
	(auto_load_python_scripts): ... here, update the comment.
	(gdbpy_load_auto_script_for_objfile): New declaration.
	(show_auto_load_python_scripts, script_language_python)
	(gdbpy_load_auto_script_for_objfile): New.
	(source_section_scripts): Refactor the code.
	(load_auto_scripts_for_objfile): Rename to ...
	(gdbpy_load_auto_scripts_for_objfile): ... here, update the
	auto_load_objfile_script caller, drop GDBPY_GLOBAL_AUTO_LOAD checking.
	(info_auto_load_python_scripts): New.
	(gdbpy_initialize_auto_load): New variables cmd and cmd_name.
	Rename "set auto-load-scripts" to "set auto-load python-scripts".
	Register "set auto-load-scripts" as its deprecated alias.  Register
	"info auto-load python-scripts".  Register "info auto-load-scripts" as
	its deprecated alias.
	(load_auto_scripts_for_objfile): Rename to ...
	(gdbpy_load_auto_scripts_for_objfile): ... here.
	* python/python.h (load_auto_scripts_for_objfile): Rename to ...
	(gdbpy_load_auto_scripts_for_objfile): ... here.

gdb/doc/
	auto-load: Implementation.
	* gdb.texinfo (Mode Options): New anchor for -nx.
	(Startup): New anchors for Option -init-eval-command,
	Home Directory Init File
	and Init File in the Current Directory during Startup.
	Mention set auto-load local-gdbinit with a reference.
	Change the sample code to "set auto-load python-scripts".
	(Threads): New anchor set libthread-db-search-path.
	Provide references to libthread_db.so.1 file.
	(Controlling GDB): New menu item for Auto-loading.
	(Auto-loading, Init File in the Current Directory)
	(libthread_db.so.1 file, objfile-gdb.gdb file): New nodes.
	(Python): Rename the menu item Auto-loading to Python Auto-loading.
	(Writing a Pretty-Printer, Objfiles In Python): Update the renamed
	reference.
	(Auto-loading): Rename to ...
	(Python Auto-loading): ... here.  Change "set auto-load-scripts" to
	"set auto-load python-scripts", new anchor for it.  Change
	"show auto-load-scripts" to "show auto-load python-scripts", new anchor
	for it.  Change "info auto-load-scripts"
	to "info auto-load python-scripts", new anchor for it.  Change "scripts"
	to "Python scripts".

gdb/testsuite/
	auto-load: Implementation.
	* gdb.base/help.exp (test set height): Increase the height.
	* gdb.python/py-objfile-script.exp (info auto-load-scripts): Change
	to ...
	(info auto-load python-scripts): ... here.
	* gdb.python/py-section-script.exp (info auto-load-scripts *): Change
	to ...
	(info auto-load python-scripts *): ... here.
@
text
@d947 2
a948 1
      if (!inhibit_gdbinit && auto_load_local_gdbinit)
@


1.105
log
@gdb/
	auto-load: Move files.
	* Makefile.in (SFILES): Add auto-load.c.
	(HFILES_NO_SRCDIR): Add auto-load.h.
	(COMMON_OBS): Add auto-load.o.
	(distclean): Change .gdbinit for gdb-gdb.gdb.
	* auto-load.c: New file, with parts from python/py-auto-load.c.
	* auto-load.h: New file, with parts from python/python.h.
	* configure: Regenerate.
	* configure.ac (AC_OUTPUT): Change .gdbinit for gdb-gdb.gdb.
	* gdb-gdb.gdb.in: New file, renamed from gdbinit.in.
	* gdbinit.in: Remove file, rename it to gdb-gdb.gdb.in.
	* main.c: Include auto-load.h.
	* python/py-auto-load.c: Move include filenames.h, gdb_regex.h,
	command.h, observer.h and progspace.h to auto-load.c.  Add include
	auto-load.h.
	(gdbpy_global_auto_load, struct auto_load_pspace_info)
	(struct loaded_script, auto_load_pspace_data)
	(auto_load_pspace_data_cleanup, get_auto_load_pspace_data)
	(hash_loaded_script_entry, eq_loaded_script_entry)
	(init_loaded_scripts_info, get_auto_load_pspace_data_for_loading)
	(maybe_add_script): Move to auto-load.c.
	(source_section_scripts): Change maybe_add_script parameters passing,
	use script_not_found_warning_print.
	(clear_section_scripts, auto_load_objfile_script)
	(auto_load_new_objfile, loaded_script_ptr)
	(DEF_VEC_P (loaded_script_ptr), collect_matching_scripts, print_script)
	(sort_scripts_by_name, info_auto_load_scripts): Move to auto-load.c.
	(gdbpy_initialize_auto_load): Move auto_load_pspace_data,
	auto_load_new_objfile and info_auto_load_scripts initizations to
	auto-load.c.
	* python/python.h (gdbpy_global_auto_load): Move to auto-load.h.
@
text
@d880 2
a881 2
  save_auto_load = gdbpy_global_auto_load;
  gdbpy_global_auto_load = 0;
d943 12
a954 2
  if (local_gdbinit && !inhibit_gdbinit)
    catch_command_errors (source_script, local_gdbinit, 0, RETURN_MASK_ALL);
d960 1
a960 1
  gdbpy_global_auto_load = save_auto_load;
d1106 1
a1106 1
   * local init file: ./%s\n\
@


1.104
log
@gdb/
	* NEWS: Describe new options --init-command=FILE, -ix and
	--init-eval-command=COMMAND, -iex.
	* main.c (struct cmdarg): New enum items CMDARG_INIT_FILE and
	CMDARG_INIT_COMMAND.
	(captured_main): New enum items OPT_IX and OPT_IEX.  Add
	"init-command", "init-eval-command", "ix" and "iex" to the variable
	long_options.  Handle OPT_IX and OPT_IEX.  Process them from CMDARG_VEC.
	New comment for CMDARG_FILE and CMDARG_COMMAND processing.
	(print_gdb_help): Describe --init-command=FILE, -ix and
	--init-eval-command=COMMAND, -iex.

gdb/doc/
	* gdb.texinfo (File Options): Describe --init-command=FILE, -ix and
	--init-eval-command=COMMAND, -iex.
	(Startup): Describe -iex and -ix.  Simplify the example
	for "set auto-load-scripts off".

gdb/testsuite/
	* gdb.gdb/selftest.exp (do_steps_and_nexts): New entry
	for cmdarg_vec = NULL.  Remove entries for cmdsize = 1, cmdarg = and
	ncmd = 0.  New entry for VEC_cleanup cmdarg_s.
@
text
@d44 1
@


1.103
log
@gdb/
	Code cleanup.
	* main.c (struct cmdarg): Move it here from main.  Add more comments.
	(cmdarg_s, VEC (cmdarg_s)): New.
	(main): Move struct cmdarg from here.  New variables cmdarg_vec and
	cmdarg_p.  Remove variables cmdsize and ncmd and their initialization.
	Install cleanup for cmdarg_vec.  Update filling for options 'x' and
	'X'.  Replace cmdarg processing by cmdarg_vec processing.  Remove xfree
	of CMDARG.
@
text
@d250 7
a256 1
    CMDARG_COMMAND
d403 3
a405 1
      OPT_WINDOWS
d445 4
d572 13
d837 14
d953 1
d1036 2
@


1.102
log
@gdb:
	PR breakpoints/10738
	* dwarf2read.c (use_deprecated_index_sections): New global.
	(struct partial_die_info): New member may_be_inlined.
	(read_partial_die): Set may_be_inlined where appropriate.
	(add_partial_subprogram): Add partial symbols for partial
	DIEs that may be inlined.
	(new_symbol_full): Add inlined subroutines to the current
	scope.
	(write_psymtabs_to_index): Bump version number.
	(dwarf2_read_index): Read only version 6 indices unless
	use_deprecated_index_sections is set.
	* linespec.c (symbol_and_data_callback): New structure.
	(iterate_inline_only): New function.
	(iterate_over_all_matching_symtabs): New argument
	"include_inline".  If nonzero, also call the callback for
	symbols representing inlined subroutines.
	(lookup_prefix_sym): Pass extra argument to the above.
	(find_function_symbols): Likewise.
	(add_matching_symbols_to_info): Likewise.
	* NEWS: Mention that GDB can now set breakpoints on inlined
	functions.

gdb/doc:
	PR breakpoints/10738
	* gdb.texinfo (Inline Functions): Remove the now-unnecessary @@item
	stating that GDB cannot set breakpoints on inlined functions.
	(Mode Options): Document --use-deprecated-index-sections.
	(Index Section Format): Document new index section version format.

gdb/testsuite:
	PR breakpoints/10738
	* gdb.opt/inline-break.exp: New file.
	* gdb.opt/inline-break.c: Likewise.
	* gdb.dwarf2/inline-break.exp: Likewise.
	* gdb.dwarf2/inline-break.S: Likewise.
	* gdb.base/annota1.exp: Cope with old .gdb_index warnings.
	* gdb.base/async-shell.exp: Likewise.
	* lib/mi-support.exp (library_loaded_re): Likewise.
@
text
@d242 19
d285 2
a286 11
  struct cmdarg {
    enum {
      CMDARG_FILE,
      CMDARG_COMMAND
    } type;
    char *string;
  } *cmdarg;
  /* Allocated size of cmdarg.  */
  int cmdsize;
  /* Number of elements of cmdarg used.  */
  int ncmd;
d322 1
a322 3
  cmdsize = 1;
  cmdarg = (struct cmdarg *) xmalloc (cmdsize * sizeof (*cmdarg));
  ncmd = 0;
d547 5
a551 8
	    cmdarg[ncmd].type = CMDARG_FILE;
	    cmdarg[ncmd++].string = optarg;
	    if (ncmd >= cmdsize)
	      {
		cmdsize *= 2;
		cmdarg = xrealloc ((char *) cmdarg,
				   cmdsize * sizeof (*cmdarg));
	      }
d554 6
a559 8
	    cmdarg[ncmd].type = CMDARG_COMMAND;
	    cmdarg[ncmd++].string = optarg;
	    if (ncmd >= cmdsize)
	      {
		cmdsize *= 2;
		cmdarg = xrealloc ((char *) cmdarg,
				   cmdsize * sizeof (*cmdarg));
	      }
d914 2
a915 1
  for (i = 0; i < ncmd; i++)
d917 2
a918 2
      if (cmdarg[i].type == CMDARG_FILE)
        catch_command_errors (source_script, cmdarg[i].string,
d920 3
a922 2
      else  /* cmdarg[i].type == CMDARG_COMMAND */
        catch_command_errors (execute_command, cmdarg[i].string,
d924 1
a925 1
  xfree (cmdarg);
@


1.101
log
@gdb/
	Code cleanup.
	* main.c (write_files): Remove the declaration.
	(external_editor_command): Move the declaration ...
	[GDBTK] (external_editor_command): ... here.  Fix the comment.
@
text
@d453 2
d1026 4
@


1.100
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a86 2
/* Whether to enable writing into executable and core files.  */
extern int write_files;
a92 5
/* These two are used to set the external editor commands when gdb is
   farming out files to be edited by another program.  */

extern char *external_editor_command;

d584 4
@


1.99
log
@gdb/
	Revert this part of:
	2012-01-02  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	Remove the gdbtui binary.
	* gdb.c (main): Remove args.interpreter_p initialization.
	* main.c (captured_main): Set INTERPRETER_P directly by INTERP_CONSOLE.
	* main.h (struct captured_main_args): Remove interpreter_p.
@
text
@d3 1
a3 3
   Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,
   2009, 2010, 2011 Free Software Foundation, Inc.
@


1.98
log
@gdb/
	Remove the gdbtui binary.
	* .gitignore (/gdbtui): Remove.
	* Makefile.in (TUI): Remove.
	(SUBDIR_TUI_OBS): Remove tui-main.o.
	(SUBDIR_TUI_SRCS): Remove tui/tui-main.c.
	(all-tui, install-tui, uninstall-tui, $(TUI)$(EXEEXT), clean-tui)
	(tui-main.o): Remove.
	(all_object_files): Remove tui-main.o.
	* NEWS: New note for the gdbtui removal.
	* configure: Rebuilt.
	* configure.ac: No longer add all-tui, clean-tui, install-tui and
	uninstall-tui to CONFIG_ALL, CONFIG_CLEAN, CONFIG_INSTALL and
	CONFIG_UNINSTALL respectively.
	* gdb.c (main): Remove args.interpreter_p initialization.
	* main.c (captured_main): Set INTERPRETER_P directly by INTERP_CONSOLE.
	* main.h (struct captured_main_args): Remove interpreter_p.
	* tui/tui-main.c: Remove.

gdb/doc/
	Remove the gdbtui binary.
	* all-cfg.texi (GDBTUI): Remove.
	* gdb.texinfo (Mode Options): Remove the GDBTUI reference.
	(TUI): Remove GDBTUI pindex.  Remove the GDBTUI reference.
	* gdbint.texinfo (Testsuite): Replace `gdbtui' by `gdb -tui'.
@
text
@d383 1
a383 1
  interpreter_p = xstrdup (INTERP_CONSOLE);
@


1.97
log
@	* main.c (captured_main): Set lim_at_start before calling
	make_command_stats_cleanup.
@
text
@d383 1
a383 1
  interpreter_p = xstrdup (context->interpreter_p);
@


1.97.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 3
a5 1
   Copyright (C) 1986-2005, 2007-2012 Free Software Foundation, Inc.
@


1.96
log
@2011-09-02  Pedro Alves  <pedro@@codesourcery.com>

	* top.c: Include interps.h.
	(execute_command): If the target can async, but the interpreter is
	in sync mode, synchronously wait for the command to finish before
	returning.
	(execute_command_to_string): Force the interpreter to sync mode.
	* infrun.c: Include interps.h.
	(fetch_inferior_event): Don't restore the prompt yet if the
	interpreter is in sync mode.
	* interps.c (interpreter_async): New global.
	* interps.h (interpreter_async): Declare.
	* inf-loop.c: Include interps.h.
	(inferior_event_handler): Don't print the language change or run
	breakpoint commands yet if the interpreter in is sync mode.
	* main.c (captured_command_loop): Flip the interpreter to async
	mode.
	* cli/cli-script.c: Include interps.h.
	(execute_user_command, while_command, if_command): Force the
	interpreter to sync mode.
	* python/python.c: Include interps.h.
	(python_command, execute_gdb_command): Force the interpreter to
	sync mode.
@
text
@d303 8
a310 1
  struct cleanup *pre_stat_chain = make_command_stats_cleanup (0);
a320 4
#ifdef HAVE_SBRK
  lim_at_start = (char *) sbrk (0);
#endif

@


1.95
log
@2011-06-13  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* top.h (line): Rename to ...
	(saved_command_line): ... this.
	(linesize): Rename to ...
	(saved_command_line_size): ... this.
	* top.c (line): Rename to ...
	(saved_command_line): ... this.
	(linesize): Rename to ...
	(saved_command_line_size): ... this.
	(dont_repeat, command_line_input, dont_repeat_command): Adjust.
	* event-top.c (command_line_handler): Adjust.
	* main.c (captured_main): Adjust.
@
text
@d230 4
@


1.94
log
@	* NEWS: Mention --with-iconv-bin.
	* configure.ac: New option --with-iconv-bin.
	* configure: Regenerate.
	* config.in: Regenerate.
	* defs.h (relocate_gdb_directory): Declare.
	* main.c (relocate_gdb_directory): Renamed from relocate_directory,
	removed progname parameter, and exported.  All callers updated.
	* charset.c (find_charset_names): Use --with-iconv-bin if specified.

	doc/
	* gdb.texinfo (Requirements): Fix typo.  Mention --with-iconv-bin.
@
text
@d322 2
a323 2
  line = (char *) xmalloc (linesize);
  line[0] = '\0';		/* Terminate saved (now empty) cmd line.  */
@


1.93
log
@2011-03-06  Michael Snyder  <msnyder@@vmware.com>

	* main.c (captured_main): Fix memory leak.
@
text
@d107 1
d121 3
a123 2
static char *
relocate_directory (const char *progname, const char *initial, int flag)
d127 1
a127 1
  dir = relocate_path (progname, initial, flag);
d347 2
a348 2
  gdb_sysroot = relocate_directory (argv[0], TARGET_SYSTEM_ROOT,
				    TARGET_SYSTEM_ROOT_RELOCATABLE);
d350 2
a351 2
  debug_file_directory = relocate_directory (argv[0], DEBUGDIR,
					     DEBUGDIR_RELOCATABLE);
d353 2
a354 2
  gdb_datadir = relocate_directory (argv[0], GDB_DATADIR,
				    GDB_DATADIR_RELOCATABLE);
d361 1
a361 2
    python_libdir = relocate_directory (argv[0], tmp,
					PYTHON_PATH_RELOCATABLE);
@


1.92
log
@2011-01-08  Michael Snyder  <msnyder@@vmware.com>

	* m2-exp.y: Comment cleanup, mostly periods and spaces.
	* m2-lang.c: Ditto.
	* m2-typeprint.c: Ditto.
	* m2-valprint.c: Ditto.
	* m32c-tdep.c: Ditto.
	* m32r-linux-nat.c: Ditto.
	* m32r-rom.c: Ditto.
	* m32r-tdep.c: Ditto.
	* m32r-tdep.h: Ditto.
	* m68hc11-tdep.c: Ditto.
	* m58klinux-nat.c: Ditto.
	* m68k-tdep.c: Ditto.
	* m88k-tdep.c: Ditto.
	* m88k-tdep.h: Ditto.
	* machoread.c: Ditto.
	* macrocmd.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* mdebugread.h: Ditto.
	* memattr.c: Ditto.
	* memattr.h: Ditto.
	* memory-map.h: Ditto.
	* mep-tdep.c: Ditto.
	* microblaze-rom.c: Ditto.
	* microblaze-tdep.c: Ditto.
	* minsyms.c: Ditto.
	* mips-irix-tdep.c: Ditto.
	* mips-linux-nat.c: Ditto.
	* mips-linux-tdep.c: Ditto.
	* mips-linux-tdep.h: Ditto.
	* mipsnbsd-nat.c: Ditto.
	* mipsnbsd-tdep.c: Ditto.
	* mipsread.c: Ditto.
	* mips-tdep.c: Ditto.
	* mips-tdep.h: Ditto.
	* mn10300-linux-tdep.c: Ditto.
	* mn10300-tdep.c: Ditto.
	* mn10300-tdep.h: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* moxie-tdep.c: Ditto.
	* moxie-tdep.h: Ditto.
	* mt-tdep.c: Ditto.
@
text
@d355 8
a362 5
  /* For later use in helping Python find itself.  */
  python_libdir = relocate_directory (argv[0],
				      concat (WITH_PYTHON_PATH,
					      SLASH_STRING, "lib", NULL),
				      PYTHON_PATH_RELOCATABLE);
@


1.91
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d189 1
a189 1
	 and cwdbuf are used in that purpose. Make sure that the stats
d238 1
a238 1
     error) we try to quit. If the quit is aborted, catch_errors()
d518 2
a519 1
/* We have probably been invoked from emacs.  Disable window interface.  */
d718 1
a718 1
  /* Lookup gdbinit files. Note that the gdbinit file name may be
@


1.90
log
@run copyright.sh for 2011.
@
text
@d338 2
a339 1
                        _("%s: warning: error finding working directory: %s\n"),
d568 3
a570 2
		  fprintf_unfiltered (gdb_stderr, 
				      _("%s: unable to load tclcommand file \"%s\""),
d633 3
a635 3
		fprintf_unfiltered
		  (gdb_stderr,
		 _("warning: could not set timeout limit to `%s'.\n"), optarg);
d643 2
a644 1
			_("Use `%s --help' for a complete list of options.\n"),
d674 2
a675 1
			      _("%s: `--args' specified but no program specified\n"),
d710 3
a712 2
	fprintf_unfiltered (gdb_stderr, _("\
Excess command line arguments ignored. (%s%s)\n"),
d838 4
a841 2
      if (catch_command_errors (exec_file_attach, execarg, !batch_flag, RETURN_MASK_ALL))
	catch_command_errors (symbol_file_add_main, symarg, !batch_flag, RETURN_MASK_ALL);
d846 2
a847 1
	catch_command_errors (exec_file_attach, execarg, !batch_flag, RETURN_MASK_ALL);
d849 2
a850 1
	catch_command_errors (symbol_file_add_main, symarg, !batch_flag, RETURN_MASK_ALL);
d854 2
a855 2
    error (_("\
Can't attach to process and specify a core file at the same time."));
@


1.89
log
@2010-12-28  Michael Snyder  <msnyder@@vmware.com>

	* event-loop.c: Comment clean-up.
	* event-loop.h: Ditto.
	* event-top.c: Ditto.
	* gdb.c: Ditto.
	* gdb.h: Ditto.
	* main.c: Ditto.
	* top.c: Ditto.
	* top.h: Ditto.
@
text
@d5 1
a5 1
   2009, 2010 Free Software Foundation, Inc.
@


1.88
log
@	PR python/12227
	* NEWS: Mention -data-directory.
	* main.c (captured_main): Recognize -data-directory.

	doc/
	* gdb.texinfo (Mode Options): Document -data-directory.
	(Data Files): Add reference to -data-directory.

	testsuite/
	* gdb.base/catch-syscall.exp (do_syscall_tests): Remove setting
	of data-directory.
	* lib/gdb-python.exp (gdb_check_python_config): Delete, all callers
	updated.
	* lib/gdb.exp (INTERNAL_GDBFLAGS): Add -data-directory.
@
text
@d49 1
a49 1
   do_setshow_command will free it. */
d52 1
a52 1
/* Whether xdb commands will be handled */
d55 1
a55 1
/* Whether dbx commands will be handled */
d72 1
a72 1
/* target IO streams */
d89 1
a89 1
/* Whether to enable writing into executable and core files */
d97 2
a98 2
/* These two are used to set the external editor commands when gdb is farming
   out files to be edited by another program. */
d154 5
a158 5
/* Compute the locations of init files that GDB should source and return
   them in SYSTEM_GDBINIT, HOME_GDBINIT, LOCAL_GDBINIT.  If there is 
   no system gdbinit (resp. home gdbinit and local gdbinit) to be loaded,
   then SYSTEM_GDBINIT (resp. HOME_GDBINIT and LOCAL_GDBINIT) is set to
   NULL.  */
d223 1
a223 1
   non-zero return status. */
d235 1
a235 1
     check to detect bad FUNCs code. */
d240 1
a240 1
     loop. */
d263 2
a264 1
  /* These are static so that we can take their address in an initializer.  */
d321 1
a321 1
  line[0] = '\0';		/* Terminate saved (now empty) cmd line */
d336 1
a336 1
       current_target) until after initialize_all_files(). */
d404 3
a406 3
    /* This is a synonym for "--annotate=1".  --annotate is now preferred,
       but keep this here for a long time because people will be running
       emacses which use --fullname.  */
d563 2
a564 1
extern int gdbtk_test (char *);
d567 2
a568 1
		  fprintf_unfiltered (gdb_stderr, _("%s: unable to load tclcommand file \"%s\""),
d611 1
a611 1
		   current_target) until after initialize_all_files(). */
d629 1
a629 1
		   current_target) until after initialize_all_files(). */
d661 2
a662 2
  /* Now that gdb_init has created the initial inferior, we're in position
     to set args for that inferior.  */
d712 3
a714 3
  /* Lookup gdbinit files. Note that the gdbinit file name may be overriden
     during file initialization, so get_init_files should be called after
     gdb_init.  */
d743 2
a744 2
      /* Print all the junk at the top, with trailing "..." if we are about
         to read a symbol file (possibly slowly).  */
d750 2
a751 1
      gdb_flush (gdb_stdout);	/* Force to screen during slow operations */
a753 1

d755 1
a755 1
     look at things by now.  Initialize the default interpreter. */
d779 2
a780 2
      /* Print all the junk at the top, with trailing "..." if we are about
         to read a symbol file (possibly slowly).  */
d786 2
a787 1
      gdb_flush (gdb_stdout);	/* Force to screen during slow operations */
d821 2
a822 1
     local_gdbinit (which is often used to augment the source search path).  */
d832 1
a832 1
         catch_command_errors returns non-zero on success! */
d875 1
a875 1
  /* Error messages should no longer be distinguished with extra output. */
d904 2
a905 1
  /* Read in the old history after all the command files have been read. */
d920 1
a920 1
     change - SET_TOP_LEVEL() - has been eliminated. */
@


1.87
log
@gdb/
	* main.c: Include objfiles.h.
	(captured_main): New variable objfile.  Call
	load_auto_scripts_for_objfile for ALL_OBJFILES.
@
text
@d435 1
d555 4
@


1.86
log
@Refactor 'maint time' command statistics.

Consolidate code for displaying per-command time and space statistics to avoid
duplication.  Piggyback on cleanups so that statistics get printed even when
commands terminate as a result of an error.

Changelog

    * gdb/defs.h (make_command_stats_cleanup): Declare.
    (set_display_time): Declare.
    (set_display_space): Declare.
    * gdb/event-top.c (command_handler): Use make_command_stats_cleanup.
    * gdb/main.c (display_time, display_space): Move definitions to utils.c.
    (captured_main): Use make_command_stats_cleanup to get start-up
    statistics.
    Use set_display_time and set_display_space for processing OPT_STATISTICS
    case.
    * gdb/maint.c (maintenance_time_display): Use set_display_time.
    (maintenance_space_display): Use set_display_space.
    * gdb/top.c (execute_command): Remove obsolete 'maint time' code.
    (command_loop): Use make_command_stats_cleanup.
    * gdb/utils.c (struct cmd_stats): Structure for storing initial time
    and space usage.
    (display_time, display_space): Move definitions here from utils.c.
    (set_display_time): New function.
    (set_display_space): New function.
    (make_command_stats_cleanup): New function.
    (report_command_stats): New auxiliary function for
    make_command_stats_cleanup.
    * gdb/testsuite/gdb.gdb/selftest.exp: Adjust expected message for
    capturing start-up runtime.
@
text
@d45 1
d294 1
d880 2
a881 2
  if (symfile_objfile != NULL)
    load_auto_scripts_for_objfile (symfile_objfile);
@


1.85
log
@	Allow python to find its files if moved from original location.
	* acinclude.m4 (GDB_AC_DEFINE_RELOCATABLE): New function.
	(GDB_AC_WITH_DIR): Call it.
	* configure.ac: Define WITH_PYTHON_PATH if we can find the
	python installation directory.
	* config.in: Regenerate.
	* configure: Regenerate.
	* defs.h (python_libdir): Declare.
	* main.c (python_libdir): Define.
	(captured_main): Initialize python_libdir.
	* python/python.c (_initialize_python): #ifdef WITH_PYTHON_PATH,
	call Py_SetProgramName to make sure python can find its libraries
	and modules.
@
text
@a45 8
/* If nonzero, display time usage both at startup and for each command.  */

int display_time;

/* If nonzero, display space usage both at startup and for each command.  */

int display_space;

d294 1
a294 1
  long time_at_startup = get_run_time ();
d480 2
a481 2
	    display_time = 1;
	    display_space = 1;
d902 1
a902 19

  if (display_time)
    {
      long init_time = get_run_time () - time_at_startup;

      printf_unfiltered (_("Startup time: %ld.%06ld\n"),
			 init_time / 1000000, init_time % 1000000);
    }

  if (display_space)
    {
#ifdef HAVE_SBRK
      extern char **environ;
      char *lim = (char *) sbrk (0);

      printf_unfiltered (_("Startup size: data size %ld\n"),
			 (long) (lim - (char *) &environ));
#endif
    }
@


1.84
log
@2010-05-15  Michael Snyder  <msnyder@@vmware.com>

	* m2-lang.c: White space.
	* m2-valprint.c: White space.
	* macrocmd.c: White space.
	* macroexp.c: White space.
	* macroscope.c: White space.
	* macrotab.c: White space.
	* main.c: White space.
	* maint.c: White space.
	* mdebugread.c: White space.
	* memattr.c: White space.
	* minsyms.c: White space.
	* monitor.c: White space.
@
text
@d71 4
d358 8
@


1.83
log
@	* configure.ac (CONFIG_SRCS): Add py-auto-load.o even if not using
	python.
	* configure: Regenerate.
	* main.c: #include "python/python.h".
	(captured_main): Defer loading auto-loaded scripts until after
	local_gdbinit has been sourced.
	* python/py-auto-load.c (gdbpy_global_auto_load): New global.
	(load_auto_scripts_for_objfile): New function.
	(auto_load_new_objfile): Call it.
	* python/python.h (gdbpy_global_auto_load): Declare.
	(load_auto_scripts_for_objfile): Declare.
@
text
@d146 1
d746 1
@


1.82
log
@	* top.h (source_script, cd_command): Delete.
	* main.c: #include "cli/cli-cmds.h"
@
text
@d44 1
d295 1
d803 5
d867 8
@


1.81
log
@gdb
	PR cli/9591:
	* NEWS: Update.
	* utils.c: Include main.h.
	(fputs_maybe_filtered): Don't paginate if `batch_flag'.
	(defaulted_query): Use default answer if `batch_flag'.
	* main.h (batch_flag): Declare.
	* main.c (batch_flag): New global.
	(captured_main): Remove 'batch'.  Update.
gdb/doc
	PR cli/9591:
	* gdb.texinfo (Mode Options): Mention lack of pagination and
	confirmation with --batch.
	(Screen Size): Mention --batch.
	(Messages/Warnings): Likewise.
@
text
@a41 1

d43 1
@


1.80
log
@	Per-inferior args and tty and environment.

	* infcmd.c (inferior_args): Rename to ...
	(inferior_args_scratch): ... this.
	(inferior_io_terminal): Rename to ...
	(inferior_io_terminal_scratch): ... this.
	(inferior_argc, inferior_argv): Remove.
	(set_inferior_io_terminal, get_inferior_io_terminal): Store
	inside current_inferior().
	(set_inferior_tty_command, show_inferior_tty_command): New.
	(get_inferior_args, set_inferior_args): Store inside
	current_inferior().
	(notice_args_set): Likewise and rename to...
	(set_args_command): ... this.
	(set_inferior_args_vector): Likewise.
	(notice_args_read): Rename to...
	(show_args_command): ...new.
	(tty_command): Remove.
	(run_command_1): Don't free old args, as they are freed by
	set_inferior_arg now.
	(run_no_args_command): Likewise.
	(inferior_environ): Remove.
	(run_command_1): Use environment of the current inferior.
	(environment_info, set_environment_command)
	(unset_environment_command, path_info, path_command): Likewise.
	(_initialize_infcmd): Adjust for function and variable renames.
	Do not init inferior_environ.
	* inferior.h (set_inferior_arg): Adjust prototype.
	(struct inferior): New fields args, argc, argv, terminal, environment.
	(inferior_environ): Remove declaration.
	* inferior.c (free_inferior): Free new fields.
	(add_inferior_silent): Initialize 'environment' field.
	* main.c (captured_main): Set arguments only after the initial
	inferior has been created.  Set set_inferior_io_terminal,
	not tty_command.
	* mi/mi-main.c (mi_cmd_env_path): Use environment of the current
	inferior.
	(_initialize_mi_cmd_env): Adjust for disappearance of global
	inferior_environ.
	* solib.c (solib_find): Use environment of the current inferior.
@
text
@d79 3
a252 1
  static int batch = 0;
d391 1
a391 1
      {"batch", no_argument, &batch, 1},
d542 1
a542 1
	    batch = batch_silent = 1;
d636 1
a636 1
    if (batch)
d808 2
a809 2
      if (catch_command_errors (exec_file_attach, execarg, !batch, RETURN_MASK_ALL))
	catch_command_errors (symbol_file_add_main, symarg, !batch, RETURN_MASK_ALL);
d814 1
a814 1
	catch_command_errors (exec_file_attach, execarg, !batch, RETURN_MASK_ALL);
d816 1
a816 1
	catch_command_errors (symbol_file_add_main, symarg, !batch, RETURN_MASK_ALL);
d825 1
a825 1
			  !batch, RETURN_MASK_ALL);
d828 1
a828 1
			  !batch, RETURN_MASK_ALL);
d838 1
a838 1
				    !batch, RETURN_MASK_ALL) == 0)
d840 1
a840 1
				  !batch, RETURN_MASK_ALL);
d844 1
a844 1
			      !batch, RETURN_MASK_ALL);
d864 1
a864 1
			      !batch, RETURN_MASK_ALL);
d867 1
a867 1
			      !batch, RETURN_MASK_ALL);
d874 1
a874 1
  if (batch)
@


1.79
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@a633 48
    if (set_args)
      {
	/* The remaining options are the command-line options for the
	   inferior.  The first one is the sym/exec file, and the rest
	   are arguments.  */
	if (optind >= argc)
	  {
	    fprintf_unfiltered (gdb_stderr,
				_("%s: `--args' specified but no program specified\n"),
				argv[0]);
	    exit (1);
	  }
	symarg = argv[optind];
	execarg = argv[optind];
	++optind;
	set_inferior_args_vector (argc - optind, &argv[optind]);
      }
    else
      {
	/* OK, that's all the options.  */

	/* The first argument, if specified, is the name of the
	   executable.  */
	if (optind < argc)
	  {
	    symarg = argv[optind];
	    execarg = argv[optind];
	    optind++;
	  }

	/* If the user hasn't already specified a PID or the name of a
	   core file, then a second optional argument is allowed.  If
	   present, this argument should be interpreted as either a
	   PID or a core file, whichever works.  */
	if (pidarg == NULL && corearg == NULL && optind < argc)
	  {
	    pid_or_core_arg = argv[optind];
	    optind++;
	  }

	/* Any argument left on the command line is unexpected and
	   will be ignored.  Inform the user.  */
	if (optind < argc)
	  fprintf_unfiltered (gdb_stderr, _("\
Excess command line arguments ignored. (%s%s)\n"),
			      argv[optind],
			      (optind == argc - 1) ? "" : " ...");
      }
d642 51
d846 1
a846 1
    catch_command_errors (tty_command, ttyarg, !batch, RETURN_MASK_ALL);
@


1.78
log
@2009-12-11  Michael Snyder  <msnyder@@vmware.com>

	* main.c (captured_main): Indentation.
@
text
@d5 1
a5 1
   2009 Free Software Foundation, Inc.
@


1.77
log
@	* NEWS: Add note on "info sharedlibrary".
	Remove note on "set print symbol-loading".
	* main.c (captured_main): Pass !batch for from_tty when calling
	symbol_file_add_main.
	* objfiles.h (objfile_has_partial_symbols): Declare.
	(objfile_has_full_symbols): Declare.
	* objfiles.c (objfile_has_partial_symbols): New function.
	(have_partial_symbols): Use it.
	(objfile_has_full_symbols): New function.
	(have_full_symbols): Use it.
	* solib.c: Include interps.h.
	(solib_read_symbols): Back out patch of 2008-07-10.
	Add test for info_verbose for symbol loading messages for
	consistency with symfile.c.
	(info_sharedlibrary_command): Handle optional parameter of regex of
	libraries to list.  Inform user of libraries without debugging info.
	Rewrite to use ui_out routines to format output.
	* symfile.c (print_symbol_loading): Delete.
	(symbol_file_add_with_addrs_or_offsets): Back out patch of 2008-07-10.
	Print "no debugging symbols found" only if from_tty || info_verbose;
	and only check file being loaded, not all files.
	(reread_symbols): Test file being loaded for whether it has symbols,
	not all files.
	(__initialize_symfile): Delete `set print symbol-loading'.
	* symfile.h (print_symbol_loading): Delete.

	* doc/gdb.texinfo (Symbols): Delete `set print symbol-loading'.
	(Files): Add note on new optional regex arg to `info sharedlibrary'.
@
text
@d435 1
a435 1
     {"l", required_argument, 0, 'l'},
@


1.76
log
@	* main.c (captured_main): Move gdbinit lookups after gdb_init.
@
text
@d804 1
a804 1
	catch_command_errors (symbol_file_add_main, symarg, 0, RETURN_MASK_ALL);
d811 1
a811 1
	catch_command_errors (symbol_file_add_main, symarg, 0, RETURN_MASK_ALL);
@


1.75
log
@gdb
2009-04-23  Sergio Durigan Junior <sergiodj@@linux.vnet.ibm.com>
	    Tom Tromey  <tromey@@redhat.com>

	* configure, config.in: Regenerate.
	* configure.ac: Support for relocatable GDB datadir.  Use
	GDB_AC_WITH_DIR.  Always define TARGET_SYSTEM_ROOT_RELOCATABLE.
	* acinclude.m4 (GDB_AC_WITH_DIR): New defun.
	* top.c (init_main): Add "set data-directory".
	* defs.h (gdb_datadir): Declare.
	* main.c (gdb_datadir): New global.
	(captured_main): Initialize gdb_datadir.  Use relocate_directory.
	(relocate_path): New function.
	(relocate_directory): Likewise.
	(get_init_files): Use relocate_path.
	(README): Mention --with-gdb-datadir.
gdb/doc
2009-04-23  Tom Tromey  <tromey@@redhat.com>

	* gdb.texinfo (Data Files): New node.
	(GDB Files): Update menu.
@
text
@a348 2
  get_init_files (&system_gdbinit, &home_gdbinit, &local_gdbinit);

d690 5
@


1.74
log
@gdb:
	* configure.ac (--with-relocated-sources): New.
	* configure, config.in: Regenerate.
	* source.c (add_substitute_path_rule): Remove static.
	* source.h (add_substitute_path_rule): Declare.
	* main.c: Include "source.h".
	(captured_main): Add substitution rule if RELOC_SRCDIR.

gdb/doc:
	* gdb.texinfo (Source Path): Document --with-relocated-sources.
@
text
@d67 3
d101 51
d172 1
a172 8
      sysgdbinit = SYSTEM_GDBINIT;
      if (!sysgdbinit [0] || stat (sysgdbinit, &s) != 0)
	sysgdbinit = NULL;

#ifdef SYSTEM_GDBINIT_RELOCATABLE
      relocated_sysgdbinit = make_relative_prefix (gdb_program_name, BINDIR,
						   SYSTEM_GDBINIT);
      if (relocated_sysgdbinit)
d174 4
a177 4
	  struct stat s;
	  int res = 0;

	  if (stat (relocated_sysgdbinit, &s) == 0)
a181 1
#endif
d340 2
a341 6
#ifdef TARGET_SYSTEM_ROOT_RELOCATABLE
  gdb_sysroot = make_relative_prefix (argv[0], BINDIR, TARGET_SYSTEM_ROOT);
  if (gdb_sysroot)
    {
      struct stat s;
      int res = 0;
d343 2
a344 3
      if (stat (gdb_sysroot, &s) == 0)
	if (S_ISDIR (s.st_mode))
	  res = 1;
d346 2
a347 56
      if (res == 0)
	{
	  xfree (gdb_sysroot);
	  gdb_sysroot = xstrdup (TARGET_SYSTEM_ROOT);
	}
    }
  else
    gdb_sysroot = xstrdup (TARGET_SYSTEM_ROOT);
#else
  gdb_sysroot = xstrdup (TARGET_SYSTEM_ROOT);
#endif

  /* Canonicalize the sysroot path.  */
  if (*gdb_sysroot)
    {
      char *canon_sysroot = lrealpath (gdb_sysroot);
      if (canon_sysroot)
	{
	  xfree (gdb_sysroot);
	  gdb_sysroot = canon_sysroot;
	}
    }

#ifdef DEBUGDIR_RELOCATABLE
  debug_file_directory = make_relative_prefix (argv[0], BINDIR, DEBUGDIR);
  if (debug_file_directory)
    {
      struct stat s;
      int res = 0;

      if (stat (debug_file_directory, &s) == 0)
	if (S_ISDIR (s.st_mode))
	  res = 1;

      if (res == 0)
	{
	  xfree (debug_file_directory);
	  debug_file_directory = xstrdup (DEBUGDIR);
	}
    }
  else
    debug_file_directory = xstrdup (DEBUGDIR);
#else
  debug_file_directory = xstrdup (DEBUGDIR);
#endif

  /* Canonicalize the debugfile path.  */
  if (*debug_file_directory)
    {
      char *canon_debug = lrealpath (debug_file_directory);
      if (canon_debug)
	{
	  xfree (debug_file_directory);
	  debug_file_directory = canon_debug;
	}
    }
@


1.73
log
@2009-01-28  Daniel Jacobowitz  <dan@@codesourcery.com>
	    Jerome Guitton  <guitton@@adacore.com>

	* configure, config.in: Regenerated.
	* configure.ac: Add --with-system-gdbinit.
	* main.c (get_init_files): New.
	(captured_main): Use get_init_files.  Load system gdbinit before
	$HOME/.gdbinit.
	(print_gdb_help): Print location of init files.
@
text
@d43 2
d364 6
@


1.72
log
@Check return values of functions declared with warn_unused_result
attribute in GLIBC 2.8.
* cli/cli-cmds.c (pwd_command): Check return value from getcwd.
* inflow.c (check_syscall): New function.
(new_tty): Use check_syscall to check return values from open and dup.
* linux-nat.c (linux_nat_info_proc_cmd): Check return value from fgets.
* main.c (captured_main): Call cwd after setting up gdb_stderr;
check for errors from getcwd.
* mi/mi-cmd-env.c (mi_cmd_env_pwd): Check return value from getcwd.
* ui-file.c (stdio_file_write): Ignore return value from fwrite.
(stdio_file_fputs): Same.
* utils.c (internal_vproblem): abort if last-ditch error message
write fails.
@
text
@d86 3
d96 76
d238 4
a241 2
  struct stat homebuf, cwdbuf;
  char *homedir;
d280 2
d360 2
d773 7
a783 14
  homedir = getenv ("HOME");
  if (homedir)
    {
      char *homeinit = xstrprintf ("%s/%s", homedir, gdbinit);

      if (!inhibit_gdbinit)
	{
	  catch_command_errors (source_script, homeinit, 0, RETURN_MASK_ALL);
	}

      /* Do stats; no need to do them elsewhere since we'll only
         need them if homedir is set.  Make sure that they are
         zero in case one of them fails (this guarantees that they
         won't match if either exists).  */
d785 2
a786 8
      memset (&homebuf, 0, sizeof (struct stat));
      memset (&cwdbuf, 0, sizeof (struct stat));

      stat (homeinit, &homebuf);
      stat (gdbinit, &cwdbuf);	/* We'll only need this if
				   homedir was set.  */
      xfree (homeinit);
    }
d854 2
a855 7

  if (!homedir
      || memcmp ((char *) &homebuf, (char *) &cwdbuf, sizeof (struct stat)))
    if (!inhibit_gdbinit)
      {
	catch_command_errors (source_script, gdbinit, 0, RETURN_MASK_ALL);
      }
d927 6
d995 15
@


1.71
log
@        Updated copyright notices for most files.
@
text
@a190 3
  getcwd (gdb_dirbuf, sizeof (gdb_dirbuf));
  current_directory = gdb_dirbuf;

d199 9
@


1.70
log
@	* main.c (captured_main): Remove long-unused #if 0 blocks.
@
text
@d4 2
a5 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008
   Free Software Foundation, Inc.
@


1.70.4.1
log
@2008-11-20  Stan Shebs  <stan@@codesourcery.com>

	Multi-process (primarily multi-exec) support.

	2008-10-14  Stan Shebs  <stan@@codesourcery.com>

	* blockframe.c (get_frame_block): Get inferior from frame.
	* block.c (block_for_pc_inf): New function.
	* block.h (block_for_pc_inf): Declare.
	* symfile.c (find_pc_inf_sect): New function.
	* symfile.h (find_pc_inf_sect): Declare.
	* symtab.c (find_pc_inf_line): New function.
	* symtab.h (find_pc_inf_line): Declare.
	* frame.c (struct frame_info) New field inferior.
	(fprint_frame_id): Display inferior.
	(get_frame_id): Set inferior_num from inferior.
	(frame_id_eq): Compare inferiors.
	(create_sentinel_frame): Set inferior.
	(create_new_frame): Copy inferior from sentinel.
	(get_prev_frame_raw): Copy inferior from next frame.
	(find_frame_sal): Use find_pc_inf_line.
	(get_frame_inferior): New function.
	* frame.h (struct frame_id): New field inferior_num.

	* breakpoint.c (expand_sals_by_inferiors): Copy section from input
	sal to expanded sals.
	* symtab.c (expand_line_sal): Ditto.

	2008-10-10  Stan Shebs  <stan@@codesourcery.com>

	* remote.c (discard_pending_stop_replies): Initialize prev.
	* infrun.c (infrun_thread_stop_requested): Ditto.

	2008-10-08  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (struct inferior): Rename environ field to inf_environ.
	* inferior.c (print_inferior): Ditto.

	2008-10-01  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (detach_fork): Declare here...
	* linux-fork.h (detach_fork): ...instead of here.
	* linux-fork.c (detach_fork): Move to...
	* infrun.c (detach_fork): ...here.
	* remote.c (detach_fork): Remove decl.

	2008-09-30  Stan Shebs  <stan@@codesourcery.com>

	* linespec.c (decode_line_1): Better default for one-exec case.
	* remote (remote_start_remote): Use the exec in the one-exec case.

	2008-09-29  Stan Shebs  <stan@@codesourcery.com>

	* infcmd.c (attach_command): If only one exec, assume it is the
	attached inferior's exec.
	(attach_command_post_wait): Set inferior's exec from
	the one that was found.
	* inf-ptrace.c (inf_ptrace_attach): Only report exec file if
	if there is just one present.
	(inf_ptrace_detach): Use inferior to get correct exec name.

	2008-09-29  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (print_inferior): Use exec short names, and drop
	unused address space display.

	2008-09-26  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.c (should_be_inserted): Test for no inferior.
	(clone_breakpoint_location): New function, broken out from...
	(update_breakpoint_inferiors): ...here, also tweak conditions
	for adding a location.
	(insert_breakpoint_location): Don't count non-running inferiors.
	(remove_breakpoint): Set tmp_inf.
	(print_one_breakpoint_location): Add allflag arg, use to always
	show inf.
	(print_one_breakpoint): Add allflag arg.
	(do_captured_breakpoint_query): Fix caller.
	(breakpoint_1): Ditto.
	* exec.c (create_exec): Save full pathname as exec name.
	(find_exec_by_name): Use find_exec_by_substr.
	* fork-child.c (fork_inferior): Warn if exec not found for new
	inferior.

	2008-09-25  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.c (should_be_inserted): Don't insert in inferiors
	that are not running.
	(update_breakpoint_inferiors): New function.
	(insert_breakpoints): Call it.
	(insert_breakpoint_locations): Don't insert in inferiors that are
	not running.
	(set_raw_breakpoint_without_location): Set trigger set from
	current itset here...
	(set_raw_breakpoint): Instead of here. Also add default fillins
	for the location's inferior.
	(add_location_to_breakpoint): Similarly.
	(expand_sals_by_inferiors): New function.
	(breakpoint_re_set_one): Call it.
	(resolve_sal_pc): Don't set sal inferior.
	* breakpoint.h (struct breakpoint): Remove exec field, never used.
	* inferior.h (inferior_list): Declare.
	* inferior.c (inferior_list): Make public.
	(add_inferior_to_itset): Auto-add inferiors after exec's inferior.
	(first_inferior_in_set): Check for zero-length vector.
	* exec.c (xfer_memory): Use tmp_inf as inferior if set.
	* infcmd.c (focus_command): Improve user feedback.
	* linespec.c (build_canonical_line_spec): Record exec name as part
	of canonical spec.
	(symbol_found): Canonicalize specs more.
	(decode_indirect): Revert rewrite from 2008-09-14.
	(decode_sharp): Use find_exec_by_substr, better error messages.
	* minsyms.c (lookup_minimal_symbol_in_exec): New function.
	(lookup_minimal_symbol_in_exec_1): New function, body of
	lookup_minimal_symbol.
	* symtab.h (lookup_minimal_symbol_in_exec): Declare.
	* symtab.c (find_function_start_sal): Set inferior to use.
	(append_expanded_sal): Return pointer to the new sal.
	* remote.c (remote_xfer_memory): Better parms to ptid_build, remove
	debug print.
	(remote_xfer_partial): Ditto.

	2008-09-22  Pedro Alves  <pedro@@codesourcery.com>

	* inferior.c (itset_member): Fix typo.

	2008-09-22  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (current_inf): Remove declaration.
	(tmp_inf): Declare.
	* inferior.c (current_inf): Remove.
	(tmp_inf): New global, hack to bypass passing inferior throughout
	target stack.
	(print_inferior): Don't report current_inf.
	(add_inferior_command): Don't use current_inf.
	(name_inferior_command): Use first inferior of current_itset.
	(update_itset): Handle NULL case.
	(add_inferior_itset): Recursively add all inferiors derived from
	an exec if the exec's own inferior is present.
	(first_inferior_in_set): New function.
	(free_inferior): Comment out until references cleared reliably.
	* infcmd.c (focus_command): Don't set current_inf.
	(get_inferior_args): Use first_inferior_in_set instead of
	current_inf.
	(set_inferior_args): Ditto.
	(set_inferior_args_vector): Ditto.
	(notice_args_set): Ditto.
	* breakpoint.c (insert_breakpoint_locations): Remove insertion test
	using current_inf, set tmp_inf.
	(reattach_breakpoints): Set tmp_inf.
	(bpstat_check_breakpoint_conditions): Test trigger set here...
	(bpstat_stop_status): ... instead of here.
	(bpstat_check_trigger_set): Add special case for exec's own
	inferior.
	(print_one_breakpoint_location): Also test for multiple inferiors
	before displaying location's inferior, flag trigger set with "i/t"
	instead of "focus".
	(check_duplicates): Pass location's inferior to...
	(check_duplicates_for): Add inferior arg and use.
	(set_raw_breakpoint): Override sal inferior with one from the
	trigger set.
	(add_location_to_breakpoint): Ditto.
	* remote.c (remote_xfer_memory): Switch inferiors if tmp_inf is
	set to something different from inferior_ptid.
	(remote_xfer_partial): Ditto.
	* top.c (execute_command): Always update the current itset.

	2008-09-19  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (set_inferior_exec): New function.
	(set_inferior_exec_command): New command.
	* inferior.h: Declare set_inferior_exec.
	* fork-child.c (fork_inferior): Set the inferior's exec.
	* remote.c (extended_remote_create_inferior_1): Ditto.
	gdb/doc/
	* gdb.texinfo (Debugging Multiple Programs): Describe set-exec.

	2008-09-18  Stan Shebs  <stan@@codesourcery.com>

	* target.c (target_resize_to_sections): Adjust execs' section
	tables too.

	2008-09-17  Stan Shebs  <stan@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Invoking GDB): Describe multiple program args.
	(File Options): Describe multi-program effects.
	(Multiple Programs): New section, multi-program debugging.
	(Forks): Rename section from "Processes".
	(Specify Location): Describe the #-syntax.
	(Variables): Describe the #-syntax.
	(Files): Describe add-file and add-exec-file.
	(Maintenance Commands): Describe maint print execs.

	2008-09-15  Stan Shebs  <stan@@codesourcery.com>

	* exec.c (addr_space_info_command): Don't try to display host address.

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* c-exp.y: (yylex): Accept '#' in identifiers.
	* linespec.c (decode_sharp): New function.
	(decode_line_1): Use it for #-syntax.
	(decode_indirect): Rewrite to accept exec arg and iterate over
	inferiors.
	(struct d_i_data): New struct for inferior iteration.
	(decode_indirect_callback): New function.
	(decode_variable): Pass in exec, use in symbol lookup.

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.h (struct bp_location): Add inferior field instead
	of address space field.
	* breakpoint.c (insert_breakpoint_locations): Only insert in
	appropriate inferior.
	(bpstat_check_trigger_set): New function.
	(bpstat_stop_status): Call it, check location's inferior also.
	(print_one_breakpoint_location): Report location's inferior.
	(set_raw_breakpoint): Set location inferior, clear an experiment.
	(add_location_to_breakpoint): Ditto.
	(expand_line_sal_maybe): Check for non-NULL original function.
	(resolve_sal_pc): Set sal inferior.
	(clear_command): Be careful to not clear anything twice.
	* symtab.h: Update declarations of symbol lookups.
	(struct symtab_and_line): Change address space to inferior field.
	* symtab.c (init_sal): Clear inferior field.
	(append_expanded_sal): Set inferior.
	(lookup_symbol_in_language_1): New function.
	(lookup_symbol_in_language): Call it.
	(lookup_symbol_in_exec_in_language): New function.
	(lookup_symbol): Detect #-syntax and find exec to use.
	(lookup_symbol_aux): Add exec argument and use it.
	(lookup_symbol_aux_symtabs): Ditto.
	(lookup_symbol_aux_psymtabs): Ditto.
	(basic_lookup_symbol_nonlocal): Ditto.
	(lookup_symbol_static): Ditto.
	(lookup_symbol_global): Ditto.
	* ada-lang.c (cp_lookup_symbol_nonlocal): Ditto.
	* cp-support.h (cp_lookup_symbol_nonlocal): Ditto.
	* cp-namespace.c (cp_lookup_symbol_nonlocal): Ditto.
	* language.h (struct language_defn): Ditto.
	* scm-valprint.c (scm_inferior_print): Add exec arg to
	lookup_symbol_global.
	* source.c (select_source_symtab): Use current_exec.
	* addrspace.h (struct addr_space): New field num.
	* exec.h (struct exec): New fields sections and sections_end.
	* exec.c (exec_file_attach_1): Set them from exec_ops, set
	inferior's address space name from exec.
	(find_exec_by_substr): New function.
	(build_section_table): Don't free old table.
	(print_section_info): Use exec's section table.
	(next_address_space_num): New global, numbering for address spaces.
	(new_address_space): Use it.
	(addr_space_info_command): Display it.
	* infcmd.c (set_current_exec): Set exec_ops section table.
	* inferior.h (update_itset): Declare.
	* inferior.c (add_inferior_silent): Set address space.
	(print_inferior): Display it.
	(number_of_inferiors): New function.
	(itset_member): New function.

	2008-09-04  Stan Shebs  <stan@@codesourcery.com>

	* corefile.c (close_exec_file): Remove #if 0 block.
	(validate_files): Use first_exec instead of exec_bfd.
	(get_exec_file): Ditto.
	* corelow.c (core_open): Ditto.
	* utils.c (string_to_core_addr): Ditto.
	* arch-utils.c (gdbarch_update_p): Ditto.
	* linux-thread-db.c (enable_thread_event): Ditto.
	(thread_db_get_thread_local_address ): Ditto.
	* exec.c (find_exec_by_name): Test short name also.
	(file_command): Set current exec.

	2008-09-03  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (add_threads_to_itset): Default to including all
	of an inferior's threads.

	2008-08-31  Stan Shebs  <stan@@codesourcery.com>

	Parsing for i/t sets.
	* inferior.h (struct itset_entry): New struct.
	(struct itset): Make thread lists be per-inferior, add parse state
	variables.
	* inferior.c: (add_inferior_command): Add error checking and
	confirmation.
	(remove_inferior_command): Update for itset restructuring.
	(new_itset): Don't pass in dynamic-ness, call parse_itset_spec.
	(update_itset): Similarly.
	(parse_itset_spec): New, parsing of itset spec.
	(parse_itset_list, parse_itset_range, etc): New.
	(make_itset_from_spec): Rewrite.
	(dump_itset): Rewrite to reflect itset structure.
	* infcmd.c (focus_command): Similarly.

	2008-08-25  Stan Shebs  <stan@@codesourcery.com>

	First part of multiprocess support.
	* Makefile.in (COMMON_OBS): Add inferior.o.
	* addrspace.h: New file.
	* breakpoints.h (struct bp_location): Add address space field.
	(struct breakpoint): Add trigger set and exec fields.
	* breakpoints.c (print_one_breakpoint_location): Display trigger
	set.
	(set_raw_breakpoint): Set trigger set from current itset.
	* corefile.c (reopen_exec_file): Rewrite for multiple execs.
	(get_exec_file): Add case for current_exec.
	* corelow.c (is_core_file): New function.
	(core_files_info): Pass additional arg to print_section_info.
	* exec.h (struct exec): New struct.
	* exec.c (execs): New global.
	(exec_bfd_mtime): Remove.
	(last_exec_created, current_exec, first_exec): New globals.
	(exec_close): Clear all exec objects.
	(exec_file_clear): Tweak user message.
	(exec_file_add): New function.
	(exec_file_attach_1): New function, body of exec_file_attach,
	plus new code to handle multiple execs.
	(exec_file_attach): Call it.
	(exec_file_update): New function.
	(create_exec, find_exec_by_name, number_of_execs): New functions.
	(exec_file_command): Rephrase query, set current exec.
	(add_exec_file_command): New command.
	(add_file_command): New command.
	(print_section_info): Add exec argument.
	(exec_files_info): Rewrite for multiple execs.
	(maintenance_print_execs): New function.
	(new_address_space): New function.
	(addr_space_info_command): New command.
	* gdbcore.h (exec_bfd_mtime): Remove decl.
	(exec_file_add): Declare.
	* infcmd.c: Include exec.h.
	(current_itset): New global.
	(set_current_exec): New function.
	(focus_command): New command.
	(get_inferior_args): Maybe get from the current inferior.
	(set_inferior_args): Also set in current inferior.
	(set_inferior_args_vector): Similarly.
	(notice_args_set): Similarly.
	(attach_command): Rephrase query.
	* inferior.h (struct inferior): New struct.
	(struct itset): New struct.
	* inferior.c: New file, management of multiple inferiors.
	* main.c (captured_main): Rewrite to allow multiple executables,
	pids, and corefiles on the command line.
	* maint.c (maintenance_info_sections): Rewrite for multiple execs.
	* objfiles.h (struct objfile): New field for exec.
	(ALL_OBJFILES_FOR_EXEC, ALL_PRIMARY_SYMTABS_FOR_EXEC,
	ALL_PSYMTABS_FOR_EXEC): New macros.
	* objfiles.c (allocate_objfile): Clear exec field.
	* solib.c (clear_solib): Use first_exec instead of exec_bfd.
	* source.c (select_source_symtab): Use ALL_OBJFILES_FOR_EXEC.
	(find_source_lines): Use mtime from exec.
	* symfile.c (syms_from_objfile): Don't clear objfile if multiple
	execs.
	(new_symfile_objfile): Get objfile's exec from last_exec_created.
	(symbol_file_clear): Rephrase messages.
	(reread_symbols): Update objfile's exec if necessary.
	* symmisc.c (dump_objfile): Dump objfile's exec also.
	(maintenance_print_objfiles): Report symfile_objfile.
	* symtab.h (struct symtab_and_line): Add address space field.
	* symtab.c (find_pc_sect_psymtab): Look for a plausible exec, and
	then use it.
	(lookup_symbol_aux_symtabs): Use current exec.
	(lookup_symbol_aux_symtabs): Ditto.
	(basic_lookup_transparent_type): Ditto.
	(find_pc_sect_symtab): Ditto.
	* target.h (print_section_info): Add arg to decl.
	* tui/tui-win.c: Rename "focus" command to "ffocus".

gdb/testsuite:

2008-11-20  Stan Shebs  <stan@@codesourcery.com>

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* gdb.gdb/selftest.exp: Update to reflect current sources.
	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* configure.ac (AC_OUTPUT): Add gdb.multi/Makefile.
	* configure: Regenerate.

	* gdb.multi/Makefile.in: New.
	* gdb.multi/hello.c, hangout.c, goodbye.c: New source files.
	* gdb.multi/base.exp: New file, basic multiprocess tests.

	2008-08-25  Stan Shebs  <stan@@codesourcery.com>

	* config/monitor.exp: Match on rephrased message.
	* gdb.base/attach.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* lib/gdb.exp: Ditto.
@
text
@a25 2
#include "exec.h"
extern struct exec *last_exec_created;
d28 1
a28 1
extern int is_core_file (char *filename);
d131 1
a133 2
  char **miscargs = NULL;
  int nmisc = 0;
a184 2
  miscargs = (char **) xmalloc (argc * sizeof (char *));
  nmisc = 0;
d569 5
a573 3
	/* OK, that's all the options. The remaining arguments will be
	   a mix of execnames, pids, and corefiles.  */
	while (optind < argc)
d575 2
a576 1
	    miscargs[nmisc++] = argv[optind];
d579 18
a737 2
  last_exec_created = NULL;

d748 5
d754 11
a764 41
  /* Handle random mixes of executables, corefiles, and pids.  */
  {
    int require_exec = 1;
    for (i = 0; i < nmisc; ++i)
      {
	if (!require_exec)
	  {
	    /* Digits might indicate a pid to attach to, so try that.  */
	    if (pidarg == NULL
		&& isdigit (*(miscargs[i]))
		&& (catch_command_errors (attach_command, miscargs[i],
					  !batch, RETURN_MASK_ALL)))
	      {
		require_exec = 1;
		continue;
	      }
	    /* OK, then maybe it's a corefile.  */
	    else if (corearg == NULL
		     && is_core_file (miscargs[i])
		     && catch_command_errors (core_file_command, miscargs[i],
					      0, RETURN_MASK_ALL))
	      {
		require_exec = 1;
		continue;
	      }
	    /* Presumably it's yet another executable, drop through.  */
	    else
	      require_exec = 1;
	  }
	if (require_exec)
	  {
	    if (catch_command_errors (exec_file_add, miscargs[i], !batch,
				      RETURN_MASK_ALL))
	      catch_command_errors (symbol_file_add_main, miscargs[i], 0,
				    RETURN_MASK_ALL);
	    last_exec_created = NULL;
	    /* The executable may be followed by anything.  */
	    require_exec = 0;
	  }
      }
  }
@


1.69
log
@	* main.c (captured_main): Don't use BEFORE_MAIN_LOOP_HOOK.
@
text
@a785 17
#if 0
      /* NOTE: cagney/1999-11-03: SET_TOP_LEVEL() was a macro that
         expanded into a call to setjmp().  */
      if (!SET_TOP_LEVEL ()) /* NB: This is #if 0'd out */
	{
	  /* NOTE: I am commenting this out, because it is not clear
	     where this feature is used. It is very old and
	     undocumented. ezannoni: 1999-05-04 */
#if 0
	  if (cmdarg[i][0] == '-' && cmdarg[i][1] == '\0')
	    read_command_file (stdin);
	  else
#endif
	    source_script (cmdarg[i], !batch);
	  do_cleanups (ALL_CLEANUPS);
	}
#endif
a824 27
#if 0
  /* FIXME: cagney/1999-11-06: The original main loop was like: */
  while (1)
    {
      if (!SET_TOP_LEVEL ())
	{
	  do_cleanups (ALL_CLEANUPS);	/* Do complete cleanup */
	  /* GUIs generally have their own command loop, mainloop, or
	     whatever.  This is a good place to gain control because
	     many error conditions will end up here via longjmp().  */
	  if (deprecated_command_loop_hook)
	    deprecated_command_loop_hook ();
	  else
	    deprecated_command_loop ();
	  quit_command ((char *) 0, instream == stdin);
	}
    }
  /* NOTE: If the command_loop() returned normally, the loop would
     attempt to exit by calling the function quit_command().  That
     function would either call exit() or throw an error returning
     control to SET_TOP_LEVEL. */
  /* NOTE: The function do_cleanups() was called once each time round
     the loop.  The usefulness of the call isn't clear.  If an error
     was thrown, everything would have already been cleaned up.  If
     command_loop() returned normally and quit_command() was called,
     either exit() or error() (again cleaning up) would be called. */
#endif
@


1.68
log
@2008-06-05  Vladimir Prus  <vladimir@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* acinclude.m4: Include ../config/acx.m4.
	* configure.ac: Use ACX_PKGVERSION and ACX_BUGURL.
	* configure, config.in: Regenerate.
	* main.c (print_gdb_help): Use REPORT_BUGS_TO for bug-reporting
	address.
	* top.c (print_gdb_version): Use PKGVERSION and REPORT_BUGS_TO.

doc:
2008-06-05  Vladimir Prus  <vladimir@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.ac: Include ../../config/acx.m4.  Use ACX_PKGVERSION
	and ACX_BUGURL.
	* configure: Regenerate.
	* Makefile.in (PKGVERSION, BUGURL_TEXI): Define.
	(GDBvn.texi): Define VERSION_PACKAGE, BUGURL and BUGURL_DEFAULT.
	* gdb.texinfo: Use VERSION_PACKAGE and BUGURL.  Remove
	mailing-list-specific text about bug reporting unless
	BUGURL_DEFAULT.

gdbserver:
2008-06-05  Vladimir Prus  <vladimir@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* acinclude.m4: Include ../../config/acx.m4.
	* configure.ac: Use ACX_PKGVERSION and ACX_BUGURL.
	* configure, config.in: Regenerate.
	* Makefile.in (gdbreplay$(EXEEXT)): Add version.o.
	* server.c (gdbserver_version): Print PKGVERSION.
	(gdbsrever_usage): Add stream parameter.  Print REPORT_BUGS_TO.
	(main): Adjust gdbserver_usage calls.
	* gdbreplay.c (version, host_name): Add declarations.
	(gdbreplay_version, gdbreplay_usage): New.
	(main): Accept --version and --help options.
@
text
@a820 7
  /* Do any host- or target-specific hacks.  This is used for i960 targets
     to force the user to set a nindy target and spec its parameters.  */

#ifdef BEFORE_MAIN_LOOP_HOOK
  BEFORE_MAIN_LOOP_HOOK;
#endif

@


1.67
log
@	Implement MI notification for new threads.
        * doc/observer.texi (new_thread): Document.
        * observer.sh: Forward declare struct thread_info.
        * thread.c (add_thread): Notify observer.

        * interps.h (interp_init_ftype): New parameter
        top_level.
        (interp_set): Likewise.
        (top_level_interpreter_data): Declare.
        * interps.c (interp_set): New parameter top_level.
        Pass it to interpreter's init function.  Remember
        top level interpreter.
        (interpreter_exec_cmd): Adjust.
        (top_level_interpreter_data): New.
        * main.c (captured_main): Pass 1 for top_level
        parameter of interp_set.
	* cli/cli-interp.c (cli_interpreter_init): New
        parameter top_level.
        * tui/tui-interp.c (tui_init): New parameter top_level.

        * mi/mi-interp.c (mi_new_thread): New.
        (mi_interpreter_init): If top level, register
        observer for new threads.

        * Makefile.in (mi-interp.o, thread.o): Update dependencies.
@
text
@a968 1
Report bugs to \"bug-gdb@@gnu.org\".\
d970 4
@


1.66
log
@	gdb/
	* main.c (captured_main): Remove 'count' varible and the
	ALIGN_STACK_ON_ENTRY block that used it.  Error out if --core and
	--pid options were issued simultaneously.  If an explicit pid
	option was passed, don't fallback to core file.  Detect extra
	arguments better in the presence of explicit pid or core
	arguments.

	gdb/doc/
	* gdbint.texinfo (Host Conditionals): Remove mention of
	ALIGN_STACK_ON_ENTRY.
@
text
@d652 1
a652 1
    if (!interp_set (interp))
@


1.65
log
@	Updated copyright notices for most files.
@
text
@a121 1
  int count;
d129 1
d131 1
a178 6
#if defined (ALIGN_STACK_ON_STARTUP)
  i = (int) &count & 0x3;
  if (i != 0)
    alloca (4 - i);
#endif

d433 1
a433 2
	    /* "corearg" is shared by "--core" and "--pid" */
	    corearg = optarg;
d569 28
a596 20
	/* OK, that's all the options.  The other arguments are filenames.  */
	count = 0;
	for (; optind < argc; optind++)
	  switch (++count)
	    {
	    case 1:
	      symarg = argv[optind];
	      execarg = argv[optind];
	      break;
	    case 2:
	      /* The documentation says this can be a "ProcID" as well. 
	         We will try it as both a corefile and a pid.  */
	      corearg = argv[optind];
	      break;
	    case 3:
	      fprintf_unfiltered (gdb_stderr,
				  _("Excess command line arguments ignored. (%s%s)\n"),
				  argv[optind], (optind == argc - 1) ? "" : " ...");
	      break;
	    }
d738 4
d743 10
a752 4
    {
      /* corearg may be either a corefile or a pid.
	 If its first character is a digit, try attach first
	 and then corefile.  Otherwise try corefile first. */
d754 1
a754 1
      if (isdigit (corearg[0]))
d756 1
a756 1
	  if (catch_command_errors (attach_command, corearg, 
d758 1
a758 1
	    catch_command_errors (core_file_command, corearg, 
d761 2
a762 2
      else /* Can't be a pid, better be a corefile. */
	catch_command_errors (core_file_command, corearg, 
@


1.64
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d4 1
a4 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007
@


1.63
log
@	* main.c (captured_main): Recognize -tui option and print an error
	message when the TUI is not configured.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d20 1
a20 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.62
log
@	* configure.ac (DEBUGDIR_RELOCATABLE): Define for debugdir inside
	exec_prefix.
	(TARGET_SYSTEM_ROOT_RELOCATABLE): Allow for exec_prefix being
	'${prefix}'.
	* configure, config.in: Regenerate.
	* defs.h (debug_file_directory): Declare.
	* main.c (captured_main): Canonicalize gdb_sysroot.  Assume
	TARGET_SYSTEM_ROOT is defined.  Initialize debug_file_directory and
	relocate it if DEBUGDIR_RELOCATABLE.
	* symfile.c (debug_file_directory): Make non-static.
	(find_separate_debug_file): Look for debug info for SYSROOT/PATH
	in DEBUGDIR/PATH if DEBUGDIR is inside SYSROOT.
	(_initialize_symfile): Don't initialize debug_file_directory here.
@
text
@a300 1
#if defined(TUI)
a301 1
#endif
d399 1
d402 6
@


1.61
log
@Copyright updates for 2007.
@
text
@d224 1
a224 1
	  gdb_sysroot = TARGET_SYSTEM_ROOT;
d228 1
a228 1
    gdb_sysroot = TARGET_SYSTEM_ROOT;
d230 33
a262 2
#if defined (TARGET_SYSTEM_ROOT)
  gdb_sysroot = TARGET_SYSTEM_ROOT;
d264 1
a264 2
  gdb_sysroot = "";
#endif
d266 11
@


1.60
log
@	* main.c (captured_main): Print a newline after calling
	print_gdb_version instead of waiting until after the symbol file
	has been read.  Adjust error_pre_print, quit_pre_print, and
	warning_pre_print values.
@
text
@d3 2
a4 2
   Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
@


1.59
log
@2006-07-21  Andrew Stubbs  <andrew.stubbs@@st.com>

	* cli/cli-cmds.c (source_verbose, trace_commands): New variables.
	(source_script): New function.
	(source_verbose_cleanup): New function.
	(source_command): Move old contents to source_script.
	Make function static. Parse -v option and call source_script.
	(init_cli_cmds): Update source command help.
	Add 'set trace-commands' command.
	* cli/cli-script.c (command_next_depth): New static variable.
	(suppress_next_print_command_trace): New static variable.
	(reset_command_nest_depth): New function.
	(print_command_trace): New function.
	(execute_control_command): Split the continue_control and break_control
	cases, add calls to print_command_trace and count the nest depth.
	(while_command): Set suppress_next_print_command_trace.
	(if_command): Likewise.
	* top.c (execute_command): Call print_command_trace.
	* cli/cli-cmds.h (source_verbose, trace_commands): New extern variables.
	(source_command): Change to source_script.
	* main.c (captued_main): Use source_script instead of source_command.
	* top.h (source_command): Change to source_script.
	* event-top.c (display_gdb_prompt): Call reset_command_nest_depth.
	* cli/cli-script.h (print_command_trace): Export.
	(reset_command_nest_depth): Likewise.

docs/
	* gdb.texinfo (Optional warnings and messages): Add
	'set/show trace-commands'.
	(Command files): Add '-v' to source command.

testsuite/
	* gdb.base/default.exp: Update source command error message.
	* gdb.base/help.exp: Update 'help source' message.
@
text
@d592 1
d627 1
d631 2
a632 1
  error_pre_print = "\n\n";
a633 2

  /* We may get more than one warning, don't double space all of them... */
a691 9
  /* After the symbol file has been read, print a newline to get us
     beyond the copyright line...  But errors should still set off
     the error message with a (single) blank line.  */
  if (!quiet)
    printf_filtered ("\n");
  error_pre_print = "\n";
  quit_pre_print = error_pre_print;
  warning_pre_print = _("\nwarning: ");

@


1.58
log
@2006-02-21  Andrew Stubbs  <andrew.stubbs@@st.com>

	* defs.h (directory_switch): Add prototype.
	* main.c (captured_main): Use directory_switch() instead of
	directory_command() to add directories from the -d switch.
	* source.c (directory_switch): New function.
	(add_path): Use buildargv() to parse spaces in filenames properly.
	Strip multiple trailing '/' rather than just one.
@
text
@d646 1
a646 1
	  catch_command_errors (source_command, homeinit, 0, RETURN_MASK_ALL);
d733 1
a733 1
	catch_command_errors (source_command, gdbinit, 0, RETURN_MASK_ALL);
d751 1
a751 1
	    source_command (cmdarg[i], !batch);
d756 1
a756 1
        catch_command_errors (source_command, cmdarg[i].string,
@


1.58.14.1
log
@2006-05-13    Changes based on Apple GDB (CVS repository 5th Sept 2005)

	* async-nat-inferior.c, async-nat-inferior.h,
	* async-nat-sigthread.c, async-nat-sigthread.h: New files

	* linux-nat.c: Include async-nat-inferior.h.
	(linux_nat_wait): Add extra argument.  If target_can_async_p
	do something completely different.

	* interps.h (interp_set, interp_set_quiet): New externs.

	* interps.c (interp_set): Make asynchronous.
	(interp_set_quiet): Don't make static.
	(current_interp_command_loop): Call functions with new arguments.

	* target.h (target_wait): Add extra argument.
	(gdb_override_async, gdb_set_async_override) New externs.
	(target_can_async_p): Make conditional on gdb_override_async.

	* target.c (gdb_override_async): New variable.
	(gdb_set_async_override, do_restore_target_async_mask):
	New functions.
	(debug_to_wait): Add extra argument.

	* linux-thread-db.c (thread_db_wait): Add extra argument.

	* wrapper.h (safe_execute_command): Declare structure.

	* top.c (*deprecated_target_wait_hook): Add extra argument.
	(read_command_file): Make asynchronous.

	* remote.c (remote_wait, remote_async_wait): Add extra argument.

	* infrun.c: Include event-top.h
	(wait_for_inferior, fetch_inferior_event): Add extra argument to
	target_wait.
	(proceed): Set target_executing = 0.
	(handle_inferior_event): Call async_disable_stdin if async.

	* inf-ptrace.c: Include inf-loop.h, async-nat-inferior.h.
	(inf_ptrace_him): Create a signal thread.
	(inf_ptrace_wait): Add extra argument to target_wait.

	* inf-loop.c (inferior_event_handler, complete_execution):
	Changes for asynchronous operation (copied verbatim).

	* inf-child.c: Include async-nat-inferior.h.
	(inf_child_target): Use methods async_terminal_inferior
	and async_terminal_ours.

	* i386-linux-nat.c: Include inf-loop.h, async-nat-inferior.h.
	(i386_linux_resume): Call gdb_process_events and then
	async methods.

	* exec.c: Include event-loop.h, async-nat-inferior.h.
	(async_file_handler, standard_async, standard_is_async_p)
	(standard_can_async_p): New functions.
	(init_exec_ops): Initialise above methods.

	* event-top.h (cli_command_loop): Make argument void*.

	* event-top.c (display_gdb_prompt, async_enable_stdin)
	(async_disable_stdin, handle_sigint, async_request_quit)
	(gdb_setup_readline, _initialize_event_loop):
	Changes for asynchronous operation (copied verbatim).
	(cli_command_loop): Make argument void*.

	* event-loop.h (gdb_client_data): Move typedef to defs.h.
	(gdb_create_event): Declare.
	(event_handler_func): Move typedef from event-loop.c.

	* event-loop.c (use_poll): Set to 0.
	(gdb_queue_event, gdb_create_event): New functions.
	(async_queue_event): Don't make static.
	(create_file_event): Use gdb_create_event.
	(gdb_event): Change component from int to void*.
	(process_event, handle_file_event, handle_timer_event):
	Change according to gdb_event.
	(event_handler_func): Move typedef to event-loop.c.

	* defs.h: (gdb_mi_run_status, event_loop_p): New externs.
	(gdb_client_data): Move typedef from event-loop.h.
	(*deprecated_command_loop_hook): Make argument void*.
	(*deprecated_target_wait_hook): Add argument.

	* cli-out.h (cli_quoted_out_new): Declare.

	* cli-out.c (cli_quoted_out_new): New function.
	Include mi/mi-console.h.

	* cli/cli-interp.c: Include inferior.h, mi/mi-console.h.
	(safe_execute_command): Make static.
	(cli_interpreter_resume, cli_interpreter_exec):
	Make asynchronous.
	(cli_quoted_interpreter_resume): New function.
	(_initialize_cli_interp): Add li_command_loop to procs.
	Initialize the console-quoted interpreter.

	* tui/tui-hooks.c (tui_target_wait_hook): Add extra argument.

	* mi/mi-main.h (mi_dont_register_continuation)
	(current_command_token,  mi_interp, mi_interpreter_exec_continuation)
	(mi_continuation_arg): New externs.
	(mi_setup_continuation_arg): Declare.

	* mi/mi-main.c: Include wrapper.h.
	(struct mi_continuation_arg): New structure.
	(mi_interpreter_exec_continuation): Move to mi-interp.c.
	(mi_execute_async_cli_command)
	(mi_exec_async_cli_cmd_continuation): Make asynchronous.
	(mi_setup_continuation_arg): New function.

	* mi/mi-interp.c (mi_interpreter_exec_continuation):
	Move from mi-main.c
	(mi_cmd_interpreter_exec): Switch interpreters.  Make
	asynchronous.
	(mi1_command_loop, mi2_command_loop, mi3_command_loop):
	Make argument void*.

	* Makefile.in (async_nat_inferior_h, async_nat_sigthread_h):
	New variables.
	(gdb$(EXEEXT), $(TUI)$(EXEEXT)): Link with libpthread.
	(async-nat-inferior.o, async-nat-sigthread.o): New rules.
	(COMMON_OBS): Add above object files.
	(exec.o, i386-linux-nat.o, inf-ptrace.o, linux-nat.o):
	Update dependencies.

2006-05-13  Nick Roberts  <nickrob@@snap.net.nz>

	* main.c: (event_loop_p): Re-instate variable.
	(captured_main): Re-instate async/noasync option.
	(print_gdb_help): Describe option again.

	* exec.c(init_exec_ops): Only initialise async methods with async
	option.

	* inf-ptrace.c (inf_ptrace_him): Only reate a signal thread with
	async option.

	* README.async, TODO.async, PROBLEMS.async: New files.
@
text
@a52 6
/* Whether this is the async version or not.  The async version is
   invoked on the command line with the -nw --async options.  In this
   version, the usual command_loop is substituted by and event loop which
   processes UI events asynchronously. */
int event_loop_p = 0;

a259 2
      {"async", no_argument, &event_loop_p, 1},
      {"noasync", no_argument, &event_loop_p, 0},
a866 3
  --[no]async        Enable (disable) asynchronous version of CLI\n\
"), stream);
  fputs_unfiltered (_("\
@


1.58.14.2
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@a599 1
      printf_filtered ("\n");
a633 1
      printf_filtered ("\n");
d637 1
a637 2
  /* Set off error and warning messages with a blank line.  */
  error_pre_print = "\n";
d639 2
d654 1
a654 1
	  catch_command_errors (source_script, homeinit, 0, RETURN_MASK_ALL);
d699 9
d741 1
a741 1
	catch_command_errors (source_script, gdbinit, 0, RETURN_MASK_ALL);
d759 1
a759 1
	    source_script (cmdarg[i], !batch);
d764 1
a764 1
        catch_command_errors (source_script, cmdarg[i].string,
@


1.58.14.3
log
@(captured_main): Condition --async option on ASYNC.
@
text
@a265 1
#ifdef ASYNC
a267 1
#endif
@


1.57
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d670 1
a670 1
    catch_command_errors (directory_command, dirarg[i], 0, RETURN_MASK_ALL);
@


1.56
log
@2005-11-07  Andrew Stubbs  <andrew.stubbs@@st.com>

	* main.c (captured_main): Define struct cmdarg. Change type of cmdarg.
	Add new options --eval-command and alias -ex.
	Adjust --command to use the new struct cmdarg.
	Execute commands given with --eval-command.
	(print_gdb_help): Add new options --eval-command, -ex and mention -x.

docs/

	* gdb.texinfo (Choosing files): Add --eval-command.
@
text
@d3 1
a3 1
   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
d21 2
a22 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.55
log
@2005-11-07  Andrew Stubbs  <andrew.stubbs@@st.com>

	* main.c (main): Use INTERP_TUI instead of "tui".
	Set interpreter to INTERP_INSIGHT when '-w' given.
	* interps.h (INTERP_INSIGHT): New define.
	* tui/tui-interp.c (_initialize_tui_interp): Use INTERP_TUI instead
	of "tui".
@
text
@d141 7
a147 1
  char **cmdarg;
d187 1
a187 1
  cmdarg = (char **) xmalloc (cmdsize * sizeof (*cmdarg));
d294 1
d297 1
d398 12
a409 1
	    cmdarg[ncmd++] = optarg;
d413 2
a414 2
		cmdarg = (char **) xrealloc ((char *) cmdarg,
					     cmdsize * sizeof (*cmdarg));
d755 6
a760 1
      catch_command_errors (source_command, cmdarg[i], !batch, RETURN_MASK_ALL);
d873 5
a877 1
  --command=FILE     Execute GDB commands from FILE.\n\
@


1.54
log
@2005-11-04  Andrew Stubbs  <andrew.stubbs@@st.com>

	* infrun.c (print_stop_reason): Set return_child_result_value on exit.
	* main.c (return_child_result): New variable.
	(return_child_result_value): Likewise.
	(captured_main): Add option --return-child-result.
	Replace call to target_detach and exit (in batch mode) with quit_force.
	(print_gdb_help): Add option --return-child-result.
	* top.c (quit_force): Return child result if appropriate.

docs/
	* gdb.texinfo (Choosing modes): Add --return-child-result.
@
text
@d353 1
a353 1
	    interpreter_p = xstrdup ("tui");
d358 5
@


1.53
log
@2005-11-01  Andrew Stubbs  <andrew.stubbs@@st.com>

	* event-top.c (gdb_setup_readline): Don't set gdb_stdout when
	--batch-silent option was given.
	* main.c (batch_silent): New variable.
	(captured_main): Add new option --batch-silent.
	(print_gdb_help): Likewise.

doc/
	* gdb.texinfo (Choosing modes): Add --batch-silent.
@
text
@d79 6
d312 1
a739 7
      if (attach_flag)
	/* Either there was a problem executing the command in the
	   batch file aborted early, or the batch file forgot to do an
	   explicit detach.  Explicitly detach the inferior ensuring
	   that there are no zombies.  */
	target_detach (NULL, 0);
      
d741 1
a741 1
      exit (0);
d841 2
@


1.53.2.1
log
@2005-11-14  Andrew Stubbs  <andrew.stubbs@@st.com>

	* infrun.c: Include main.h.
	(print_stop_reason): Set return_child_result_value on exit.
	* main.c (return_child_result): New variable.
	(return_child_result_value): Likewise.
	(captured_main): Add option --return-child-result.
	Replace call to target_detach and exit (in batch mode) with quit_force.
	(print_gdb_help): Add option --return-child-result.
	* top.c: Include main.h.
	(quit_force): Return child result if appropriate.
	* main.h (return_child_result, return_child_result_value): Declare.
	* Makefile.in (top.o, infrun.o): Add main.h to dependencies.

doc/
	* gdb.texinfo (Choosing modes): Add --return-child-result.
@
text
@a78 6
/* Support for --return-child-result option.
   Set the default to -1 to return error in the case
   that the program does not run or does not complete.  */
int return_child_result = 0;
int return_child_result_value = -1;

a305 1
      {"return-child-result", no_argument, &return_child_result, 1},
d733 7
d741 1
a741 1
      quit_force (NULL, 0);
a840 2
  --return-child-result\n\
                     GDB exit code will be the child's exit code.\n\
@


1.53.2.2
log
@2005-11-14  Andrew Stubbs  <andrew.stubbs@@st.com>

	* main.c (captured_main): Define struct cmdarg. Change type of cmdarg.
	Add new options --eval-command and alias -ex.
	Adjust --command to use the new struct cmdarg.
	Execute commands given with --eval-command.
	(print_gdb_help): Add new options --eval-command, -ex and mention -x.

doc/
	* gdb.texinfo (Choosing files): Add --eval-command.
@
text
@d141 1
a141 7
  struct cmdarg {
    enum {
      CMDARG_FILE,
      CMDARG_COMMAND
    } type;
    char *string;
  } *cmdarg;
d181 1
a181 1
  cmdarg = (struct cmdarg *) xmalloc (cmdsize * sizeof (*cmdarg));
a287 1
      {"eval-command", required_argument, 0, 'X'},
a289 1
      {"ex", required_argument, 0, 'X'},
d385 1
a385 12
	    cmdarg[ncmd].type = CMDARG_FILE;
	    cmdarg[ncmd++].string = optarg;
	    if (ncmd >= cmdsize)
	      {
		cmdsize *= 2;
		cmdarg = xrealloc ((char *) cmdarg,
				   cmdsize * sizeof (*cmdarg));
	      }
	    break;
	  case 'X':
	    cmdarg[ncmd].type = CMDARG_COMMAND;
	    cmdarg[ncmd++].string = optarg;
d389 2
a390 2
		cmdarg = xrealloc ((char *) cmdarg,
				   cmdsize * sizeof (*cmdarg));
d731 1
a731 6
      if (cmdarg[i].type == CMDARG_FILE)
        catch_command_errors (source_command, cmdarg[i].string,
			      !batch, RETURN_MASK_ALL);
      else  /* cmdarg[i].type == CMDARG_COMMAND */
        catch_command_errors (execute_command, cmdarg[i].string,
			      !batch, RETURN_MASK_ALL);
d844 1
a844 5
  --command=FILE, -x Execute GDB commands from FILE.\n\
  --eval-command=COMMAND, -ex\n\
                     Execute a single GDB command.\n\
                     May be used multiple times and in conjunction\n\
                     with --command.\n\
@


1.52
log
@
	* main.c (print_gdb_help): Don't advertise the (long non-existent)
	option --mapped.

	* gdb.texinfo (File Options): Don't document --mapped, it's gone
	since 19-Jan-2004.
	(Files): Likewise.
@
text
@d76 3
d260 1
d386 4
d840 1
@


1.51
log
@* main.c: Update copyright year.
(captured_main): Avois using strcpy and strcat.
@
text
@a850 1
  --mapped           Use mapped symbol files if supported on this system.\n\
@


1.50
log
@Remove the --[no]async command line switch from --help
@
text
@d4 2
a5 2
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
   Foundation, Inc.
d146 1
a146 1
  char *homedir, *homeinit;
d603 1
a603 5
      homeinit = (char *) alloca (strlen (homedir) +
				  strlen (gdbinit) + 10);
      strcpy (homeinit, homedir);
      strcat (homeinit, "/");
      strcat (homeinit, gdbinit);
d621 1
@


1.49
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@a832 3
  --[no]async        Enable (disable) asynchronous version of CLI\n\
"), stream);
  fputs_unfiltered (_("\
@


1.48
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (error_last_message, error_init): Delete declaration.
	* utils.c (fatal, vfatal): Call throw_vfatal.
	(error, verror): Call throw_verror;
	(do_write, error_stream_1): Delete function.
	(error_stream): Simplify, call error.
	(error_last_message, error_init, gdb_lasterr): Delete.
	(error_silent): Simplify, call throw_vsilent.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Dup the message.
	* main.c (captured_main): Delete call to error_init.
	* exceptions.c (throw_verror, throw_verror)
	(throw_vsilent): New functions.
	(do_write, print_and_throw): New functions.
	(last_message): New global.
	(throw_reason): Replace error_last_message with last_message.
	(catch_exceptions_with_msg): Dup the message.
	* exceptions.h (throw_verror, throw_vfatal, throw_vsilent):
	Declare.
@
text
@d564 1
a564 1
      error ("Interpreter `%s' unrecognized", interpreter_p);
@


1.47
log
@2005-01-13  Michael Snyder  <msnyder@@redhat.com>

	* main.c: Whitespace tweaks.
@
text
@a193 3
  /* initialize error() */
  error_init ();

@


1.46
log
@2005-01-12  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (enum return_reason, RETURN_MASK)
	(RETURN_MASK_QUIT, RETURN_MASK_ERROR, RETURN_MASK_ALL)
	(return_mask, throw_exception, catch_exceptions_ftype)
	(catch_exceptions_with_msg, catch_errors_ftype, catch_errors)
	(catch_command_errors_ftype, catch_command_errors): Move to
	exceptions.h.
	* exceptions.c, exceptions.h: New files.
	* top.c: Do not include <setjmp.h>.
	(SIGJMP_BUF, SIGSETJMP, SIGLONGJMP, catch_return)
	(throw_exception, catcher, catch_exceptions)
	(catch_exceptions_with_msg, struct catch_errors_args)
	(do_catch_errors, catch_errors, struct captured_command_args)
	(do_captured_command, catch_command_errors): Move to exceptions.c.
	* wrapper.c, wince.c, win32-nat.c, utils.c: Include "exceptions.h".
	* tui/tui-interp.c, top.c, thread.c, symmisc.c: Ditto.
	* symfile-mem.c, stack.c, solib.c, rs6000-nat.c: Ditto.
	* remote-sds.c, remote-mips.c, remote-fileio.c: Ditto.
	* remote-e7000.c, objc-lang.c, ocd.c: Ditto.
	* remote.c, nto-procfs.c, monitor.c, mi/mi-main.c: Ditto.
	* main.c, m32r-rom.c, infrun.c, inf-loop.c: Ditto.
	* hppa-hpux-tdep.c, frame.c, event-top.c, event-loop.c: Ditto.
	* corelow.c, corefile.c, cli/cli-interp.c, breakpoint.c: Ditto.
	* ada-valprint.c, ada-lang.c: Ditto.
	* Makefile.in (HFILES_NO_SRCDIR, COMMON_OBS): Add exceptions.h and
	exceptions.o.  Update all dependencies.
@
text
@d521 1
a521 1
     control of the console via the deprecated_init_ui_hook().  */
d777 3
a779 3
	  /* GUIs generally have their own command loop, mainloop, or whatever.
	     This is a good place to gain control because many error
	     conditions will end up here via longjmp(). */
@


1.45
log
@	* main.c (long_options): Add entry for "-l".
	(print_gdb_help): Add line for -l option.
	* NEWS: Mention it.

doc/
	* gdb.texinfo (Mode Options): Document -l option.
@
text
@d31 1
@


1.44
log
@2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* main.c (captured_main): Delete call to init_malloc.
	* defs.h (init_malloc): Delete declaration.
	* utils.c (mmalloc, mrealloc, mcalloc, mfree)
	(init_malloc): Delete functions.

Index: testsuite/ChangeLog
2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* gdb.gdb/selftest.exp (do_steps_and_nexts): Remove code to skip
	init_malloc call.
@
text
@d303 1
d858 1
@


1.43
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	Problem reported by Ashley Pittman <ashley@@quadrics.com>.
	* main.c (captured_main): When in batch mode always detach.
@
text
@a159 3
  /* This needs to happen before the first use of malloc.  */
  init_malloc (NULL);

@


1.42
log
@Index: ChangeLog
2004-07-16  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (event_loop_p): Replace variable declaration with macro,
	always 1.
	* main.c (captured_main): Delete options "-async" and "-noasync".
	(event_loop_p): Delete variable.
	* NEWS: Mention that "-async" and "-noasync" were removed.

Index: doc/ChangeLog
2004-07-16  Andrew Cagney  <cagney@@gnu.org>

	* gdb.texinfo (Mode Options): Delete documentation on "-async" and
	"-noasync".
@
text
@d732 7
@


1.41
log
@2004-04-21  Andrew Cagney  <cagney@@redhat.com>

	* annotate.h (deprecated_annotate_starting_hook)
	(deprecated_annotate_stopped_hook)
	(deprecated_annotate_exited_hook)
	(deprecated_annotate_signal_hook)
	(deprecated_annotate_signalled_hook): Deprecate.
	* tracepoint.h (deprecated_create_tracepoint_hook)
	(deprecated_delete_tracepoint_hook)
	(deprecated_modify_tracepoint_hook)
	(deprecated_trace_find_hook)
	(deprecated_trace_start_stop_hook): Deprecate.
	* target.h (deprecated_target_new_objfile_hook): Deprecate.
	* remote.h (deprecated_target_resume_hook)
	(deprecated_target_wait_loop_hook): Deprecate.
	* gdbcore.h (deprecated_exec_file_display_hook)
	(deprecated_file_changed_hook): Deprecate.
	* frame.h (deprecated_selected_frame_level_changed_hook): Deprecate.
	* defs.h (deprecated_modify_breakpoint_hook)
	(deprecated_command_loop_hook, deprecated_show_load_progress)
	(deprecated_print_frame_info_listing_hook)
	(deprecated_query_hook, deprecated_warning_hook)
	(deprecated_flush_hook, deprecated_create_breakpoint_hook)
	(deprecated_delete_breakpoint_hook)
	(deprecated_interactive_hook, deprecated_registers_changed_hook)
	(deprecated_readline_begin_hook, deprecated_readline_hook)
	(deprecated_readline_end_hook, deprecated_register_changed_hook)
	(deprecated_memory_changed_hook, deprecated_init_ui_hook)
	(deprecated_context_hook, deprecated_target_wait_hook)
	(deprecated_attach_hook, deprecated_detach_hook)
	(deprecated_call_command_hook, deprecated_set_hook)
	(deprecated_error_hook, deprecated_error_begin_hook)
	(deprecated_ui_load_progress_hook): Deprecate.
	* valops.c, uw-thread.c, utils.c, tui/tui-io.c: Update.
	* tui/tui-hooks.c, tracepoint.c, top.c, thread-db.c: Update.
	* target.c, symfile.c, stack.c, sol-thread.c, rs6000-nat.c: Update.
	* remote.c, remote-mips.c, regcache.c, mi/mi-interp.c: Update.
	* main.c, interps.c, infcmd.c, hpux-thread.c, frame.c: Update.
	* exec.c, dsrec.c, d10v-tdep.c, corefile.c, complaints.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, breakpoint.c: Update.
	* annotate.c, aix-thread.c: Update.
@
text
@a51 6
/* Whether this is the async version or not.  The async version is
   invoked on the command line with the -nw --async options.  In this
   version, the usual command_loop is substituted by and event loop which
   processes UI events asynchronously. */
int event_loop_p = 1;

a249 2
      {"async", no_argument, &event_loop_p, 1},
      {"noasync", no_argument, &event_loop_p, 0},
@


1.41.2.1
log
@Index: ChangeLog
2004-07-16  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (event_loop_p): Replace variable declaration with macro,
	always 1.
	* main.c (captured_main): Delete options "-async" and "-noasync".
	(event_loop_p): Delete variable.
	* NEWS: Mention that "-async" and "-noasync" were removed.

Index: doc/ChangeLog
2004-07-16  Andrew Cagney  <cagney@@gnu.org>

	* gdb.texinfo (Mode Options): Delete documentation on "-async" and
	"-noasync".
@
text
@d52 6
d256 2
@


1.41.2.2
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	Problem reported by Ashley Pittman <ashley@@quadrics.com>.
	* main.c (captured_main): When in batch mode always detach.
@
text
@a731 7
      if (attach_flag)
	/* Either there was a problem executing the command in the
	   batch file aborted early, or the batch file forgot to do an
	   explicit detach.  Explicitly detach the inferior ensuring
	   that there are no zombies.  */
	target_detach (NULL, 0);
      
@


1.40
log
@2004-02-17  Elena Zannoni  <ezannoni@@redhat.com>

	* Makefile.in (defs_h): Remove dependency on progress_h.
	* defs.h (QUIT): Remove use of PROGRESS macro. Remove include of
	progress.h.
	* main.c (captured_main): Delete use of START_PROGRESS and
	END_PROGRESS.

2004-02-17  Elena Zannoni  <ezannoni@@redhat.com>

	* gdb.base/selftest.exp (do_steps_and_nexts): Add comment.
@
text
@d530 1
a530 1
     control of the console via the init_ui_hook()) */
d782 2
a783 2
	  if (command_loop_hook)
	    command_loop_hook ();
d785 1
a785 1
	    command_loop ();
@


1.40.2.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d52 6
d166 3
d256 2
d530 1
a530 1
     control of the console via the deprecated_init_ui_hook().  */
a739 7
      if (attach_flag)
	/* Either there was a problem executing the command in the
	   batch file aborted early, or the batch file forgot to do an
	   explicit detach.  Explicitly detach the inferior ensuring
	   that there are no zombies.  */
	target_detach (NULL, 0);
      
d782 2
a783 2
	  if (deprecated_command_loop_hook)
	    deprecated_command_loop_hook ();
d785 1
a785 1
	    deprecated_command_loop ();
@


1.39
log
@Forgot to update copyrights in previous check in.
@
text
@a165 2
  START_PROGRESS (argv[0], 0);

a749 2

  END_PROGRESS (argv[0]);
@


1.38
log
@Reviewed and approved by cagney@@redhat.com.

	2004-02-02  Fred Fish  <fnf@@redhat.com>
	* main.c (gdb_stdtarg): Move definition to group with other
	gdb_stdtarg definitions.
	* remote-sim.c (gdb_os_write_stderr): Write output to
	gdb_stdtargerr stream instead of gdb_stdtarg stream.
	(gdb_os_flush_stderr): Flush gdb_stdtargerr steam instead of
	gdb_stderr stream.
@
text
@d4 1
a4 1
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
@


1.37
log
@2004-01-19  Andrew Cagney  <cagney@@redhat.com>

	* top.h (mapped_symbol_files): Delete declaration.
	* main.c (captured_main): Delete option "m" and "mapped".
	* objfiles.c (mapped_symbol_files): Delete variable.
	* symfile.c (symbol_file_command): Delete mmap code.
	(symbol_file_add_with_addrs_or_offsets): Ditto.
	(add_symbol_file_command, reread_separate_symbols): Ditto.
	* objfiles.h (OBJF_MAPPED): Delete.
	* objfiles.c (allocate_objfile) [USE_MMALLOC]: Delete.
	(free_objfile) [USE_MMALLOC]: Ditto.
	(open_existing_mapped_file): Delete function.
	(open_mapped_file): Delete function.
	(map_to_file): Delete function.
@
text
@a74 1
struct ui_file *gdb_stdtarg;
d78 1
@


1.36
log
@2003-09-14  Andrew Cagney  <cagney@@redhat.com>

	* alpha-nat.c: Remove some occurances of "register".
	* alpha-tdep.c, arm-tdep.c, blockframe.c, breakpoint.c: Ditto.
	* buildsym.c, c-typeprint.c, c-valprint.c, coffread.c: Ditto.
	* corefile.c, cp-support.c, cp-valprint.c, cris-tdep.c: Ditto.
	* dbxread.c, dcache.c, dwarf2read.c, elfread.c: Ditto.
	* environ.c, eval.c, event-top.c, f-typeprint.c: Ditto.
	* f-valprint.c, findvar.c, frame.c, gdbtypes.c: Ditto.
	* h8300-tdep.c, hppa-tdep.c, hppab-nat.c, hppah-nat.c: Ditto.
	* hppam3-nat.c, hpread.c, ia64-aix-nat.c, ia64-linux-nat.c: Ditto.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Ditto.
	* infttrace.c, irix5-nat.c, jv-typeprint.c: Ditto.
	* jv-valprint.c, m68k-tdep.c, m68klinux-nat.c, main.c: Ditto.
	* mdebugread.c, minsyms.c, mips-linux-tdep.c: Ditto.
	* mips-nat.c, mips-tdep.c, mipsread.c, mipsv4-nat.c: Ditto.
	* ns32k-tdep.c, objfiles.c, p-typeprint.c: Ditto.
	* p-valprint.c, ppc-linux-nat.c, printcmd.c: Ditto.
	* remote-mips.c, remote-vx.c, rs6000-nat.c: Ditto.
	* rs6000-tdep.c, scm-exp.c, sh-tdep.c, sh64-tdep.c: Ditto.
	* solib.c, somread.c, source.c, sparc-tdep.c: Ditto.
	* stabsread.c, stack.c, standalone.c, symfile.c: Ditto.
	* symmisc.c, symtab.c, top.c, tracepoint.c: Ditto.
	* typeprint.c, utils.c, valarith.c, valops.c: Ditto.
	* values.c, vax-tdep.c, xcoffread.c: Ditto.
@
text
@a266 2
      {"mapped", no_argument, &mapped_symbol_files, 1},
      {"m", no_argument, &mapped_symbol_files, 1},
@


1.35
log
@	* Makefile.in: Add dependencies for remote-fileio.o.
	* remote-fileio.c: New file implementing the remote File-I/O protocol.
	* remote-fileio.h: New header file defining remote File-I/O interface.
	* remote.c (remote_write_bytes, remote_read_bytes): Remove
	static storage class.
	(remote_wait, remote_async_wait): Call remote_fileio_request() on
	'F' packet.
	(_initialize_remote): Call initialize_remote_fileio().
	* remote.h: Declare remote_write_bytes() and remote_read_bytes().

	* Makefile.in (REMOTE_OBS): Add remote-fileio.o
	(SFILES): Add remote-fileio.c.
	Add dependencies for building remote-fileio.o.  Add remote-fileio.h to
	dependencies for building remote.o.
	* defs.h: Declare gdb_stdin, gdb_stdtargerr and gdb_stdtargin.
	* main.c: New ui_file gdb_stdin, gdb_stdtargerr and gdb_stdtargin.
	(captured_main): Initialize new ui_files.
	* ui-file.c: Add read and fgets input functions.
	(ui_file_new): set ui_file_fputs and ui_file_read to null functions.
	(null_file_read): New function.
	(ui_file_read): New function.
	(set_ui_file_read): New function.
	(stdio_file_read): New function.
	* ui-file.h: New type ui_file_read_ftype.
	(set_ui_file_read): Declare.
	(ui_file_read): Declare.
@
text
@d153 1
a153 1
  register int i;
@


1.34
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* acinclude.m4 (gcc_AC_CHECK_DECL, (gcc_AC_CHECK_DECL): Stolen
	from GCC's acinclude.m4.
	* configure.in: Check for getopt's delcaration.
	* aclocal.m4, config.in, configure: Re-generate.
	* main.c (error_init): Delete declaration.
	* defs.h (error_init): Declare.
	* rs6000-tdep.c (rs6000_fetch_pointer_argument): Make static.
	(rs6000_convert_from_func_ptr_addr): Make static.
	(_initialize_rs6000_tdep): Add declaration.
	* cli/cli-cmds.c (dont_repeat): Delete declaration.
	(show_commands, set_verbose, show_history): Delete declaration.
	* top.h (set_verbose): Add declaration.
	(show_history, set_history, show_commands): Add declaration.
	(do_restore_instream_cleanup): Add declaration.
	* objc-lang.c (specialcmp): Make static.
	(print_object_command): Make static.
	(find_objc_msgsend): Make static.
	(find_objc_msgcall_submethod_helper): Make static.
	(find_objc_msgcall_submethod): Make static.
	(_initialize_objc_language): Add declaration.
	(find_implementation_from_class): Make static.
	(find_implementation): Make static.
	* objc-exp.y (yylex): Delete lookup_struct_typedef declaration.
	* objc-lang.h (lookup_struct_typedef): Add declaration.
	* cli/cli-interp.c (_initialize_cli_interp): Add declaration.
	* cli/cli-script.c (clear_hook_in_cleanup): Make static.
	(do_restore_user_call_depth): Make static.
	(do_restore_instream_cleanup): Delete declaration.
	(dont_repeat): Delete declaration.
	* cli/cli-decode.c (add_abbrev_cmd): Delete function.
	* cli/cli-dump.c (_initialize_cli_dump): Add declaration.
	* reggroups.c (_initialize_reggroup): Add declaration.
	* cp-support.c (_initialize_cp_support): Add declaration.
	* cp-abi.c (_initialize_cp_abi): Add declaration.
	* hpacc-abi.c (_initialize_hpacc_abi): Add declaration.
	* gnu-v3-abi.c (gnuv3_baseclass_offset): Make static.
	(_initialize_gnu_v3_abi): Add declaration.
	* gnu-v2-abi.c (gnuv2_value_rtti_type): Make static.
	(_initialize_gnu_v2_abi): Add declaration.
	* frame-base.c (_initialize_frame_base): Add declaration.
	* doublest.c (floatformat_from_length): Make static.
	* frame-unwind.c (_initialize_frame_unwind): Add declaration.
	* frame.c (create_sentinel_frame): Make static.
	(_initialize_frame): Add declaration.
	* top.c (do_catch_errors): Make static.
	(gdb_rl_operate_and_get_next_completion): Make static.
	* typeprint.c: Include "typeprint.h".
	* sentinel-frame.c (sentinel_frame_prev_register): Make static.
	(sentinel_frame_this_id): Make static.
	* p-valprint.c (_initialize_pascal_valprint): Add declaration.
	* ui-out.c (make_cleanup_ui_out_begin_end): Delete function.
	* dwarf2-frame.c (dwarf2_frame_cache): Make static.
	* p-exp.y (push_current_type, pop_current_type): ISO C declaration.
	* dwarf2expr.h (dwarf_expr_context): ISO C declaration.
	* maint.c (maintenance_print_architecture): Make static.
	* signals/signals.c (_initialize_signals): Add declaration.
	* std-regs.c (_initialize_frame_reg): Add declaration.
	* jv-exp.y (push_variable): ISO C definition.
	(push_qualified_expression_name): Ditto.
	* memattr.c (_initialize_mem): Add declaration.
	* remote.c (remote_check_watch_resources): Make static.
	(remote_stopped_by_watchpoint): Make static.
	(remote_stopped_data_address): Make static.
	* d10v-tdep.c (nr_dmap_regs): Make static.
	(a0_regnum): Make static.
	(d10v_frame_unwind_cache): Make static.
	(d10v_frame_p): Make static.
	* osabi.c (show_osabi): Make static.
	(_initialize_gdb_osabi): Add extern declaration.
	* gdbtypes.c (make_qualified_type): Make static.
	(safe_parse_type): Make static.
	* macrocmd.c (_initialize_macrocmd): Add extern declaration.
	* macrotab.c (macro_bcache_free): Make static.
	* interps.c (interp_set_quiet): Make static.
	(interpreter_exec_cmd): Make static.
	* stack.h (select_frame_command): New file.
	* stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete function.
	(select_frame_command): Make global.
	* infcall.c: Include "infcall.h".
	* linespec.c: Include "linespec.h".
	* symfile.c (sections_overlap): Make static.
	* cp-support.h (cp_initialize_namespace): ISO C declaration.
	* charset.c (_initialize_charset): Add missing prototype.
	* regcache.c (init_legacy_regcache_descr): Make static.
	(do_regcache_xfree): Make static.
	(regcache_xfer_part): Make static.
	(_initialize_regcache): Add missing prototype.
	* breakpoint.c (parse_breakpoint_sals): Make static.
	(breakpoint_sals_to_pc): Make static.
	* interps.h (clear_interpreter_hooks): ISO C declaration.
	* Makefile.in (stack_h): Define.
	(stack.o, typeprint.o, mi-main.o): Update dependencies.
	(mi-cmd-stack.o, infcall.o, linespec.o): Update dependencies.

Index: mi/ChangeLog
2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* mi-parse.c (_initialize_mi_parse): Delete function.
	* mi-main.c: Include "mi-main.h".
	* mi-interp.c (_initialize_mi_interp): Add declaration.
	* mi-cmd-stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete extern declaration.
	(mi_cmd_stack_select_frame): Replace select_frame_command_wrapper
	with select_frame_command.
@
text
@d76 4
d200 3
@


1.33
log
@        * top.h (lim_at_start): Declare.
        * main.c (captured_main): Set it.
        * top.c (lim_at_start): Define.
        (command_loop): Use it instead of &environ.
        * event-top.c (command_handler): Likewise.

        * gdb.base/selftest.exp: Next over lim_at_start initialization.
@
text
@a76 4
/* Used to initialize error() - defined in utils.c */

extern void error_init (void);

@


1.32
log
@2003-03-20  Andrew Cagney  <cagney@@redhat.com>

	* main.c (gdb_main): Return 1.
	(captured_main): Call error to report an invalid interpreter.
@
text
@d171 4
@


1.32.16.1
log
@Snap const char * mess.
@
text
@d222 1
a222 1
  gdb_sysroot = xstrdup (TARGET_SYSTEM_ROOT);
@


1.32.12.1
log
@2003-05-21  Andrew Cagney  <cagney@@redhat.com>

	* fileio.c: Include "gdb_wait.h".

	2003-03-10  Corinna Vinschen  <vinschen@@redhat.com>
        * fileio.c: New file implementing the remote File-I/O protocol.
	* fileio.h: New header file defining remote File-I/O interface.
        * remote.c (remote_write_bytes, remote_read_bytes): Remove
	static storage class.
	(remote_wait, remote_async_wait): Call remote_fileio_request() on
        'F' packet.
        (_initialize_remote): Call initialize_remote_fileio().
	* remote.h: Declare remote_write_bytes() and remote_read_bytes().

	2002-11-21  Martin M. Hunt  <hunt@@redhat.com>
	* Makefile.in (REMOTE_OBS): Add fileio.o
	(SFILES): Add fileio.c.
	Add dependencies for building fileio.o.  Add fileio.h to
	dependencies for building remote.o.
        * defs.h: Declare gdb_stdin, gdb_stdtargerr and gdb_stdtargin.
        * main.c: New ui_file gdb_stdin, gdb_stdtargerr and gdb_stdtargin.
        (captured_main): Initialize new ui_files.
        * ui-file.c: Add read and fgets input functions.
        (ui_file_new): set ui_file_fputs and ui_file_read to null functions.
        (null_file_read): New function.
        (ui_file_read): New function.
        (set_ui_file_read): New function.
        (stdio_file_read): New function.
        * ui-file.h: New type ui_file_read_ftype.
        (set_ui_file_read): Declare.
        (ui_file_read): Declare.
@
text
@a75 4
struct ui_file *gdb_stdin;
/* target IO streams */
struct ui_file *gdb_stdtargin;
struct ui_file *gdb_stdtargerr;
a195 3
  gdb_stdin = stdio_fileopen (stdin);
  gdb_stdtargerr = gdb_stderr;	/* for moment */
  gdb_stdtargin = gdb_stdin;	/* for moment */
@


1.31
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* main.c (captured_main): Add OPT_WINDOWS and OPT_NOWINDOWS to
	option enum and switch.  When no windows, set the interpreter to
	INTERP_CONSOLE.
@
text
@d573 1
a573 5
      {
        fprintf_unfiltered (gdb_stderr, "Interpreter `%s' unrecognized.\n",
                            interpreter_p);
        exit (1);
      }
d814 3
a816 1
  return 0;
@


1.30
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* main.c (captured_main): Replace magic option characters with an
	enum.
@
text
@d245 3
a247 1
      OPT_TUI
d304 4
a307 4
      {"nw", no_argument, &use_windows, 0},
      {"nowindows", no_argument, &use_windows, 0},
      {"w", no_argument, &use_windows, 1},
      {"windows", no_argument, &use_windows, 1},
d352 11
@


1.29
log
@2003-02-14  Andrew Cagney  <ac131313@@redhat.com>

	* main.c (tui_version): Delete variable.
	(captured_main): When --tui, set interpreter_p to "tui" instead of
	enabling tui_version.
	* printcmd.c (display_command) [TUI]: Test tui_active instead of
	tui_version.
	* cli/cli-decode.c (lookup_cmd_composition): Ditto.
	* cli/cli-cmds.c (disassemble_command): Ditto.
	* defs.h (tui_version): Delete declaration.
	* Makefile.in (SUBDIR_TUI_SRCS): Add "tui/tui-interp.c".
	(tui-interp.o): Add rules.
	(SUBDIR_TUI_OBS): Add "tui-interp.o".

Index: tui/ChangeLog
2003-02-14  Andrew Cagney  <ac131313@@redhat.com>

	* tui.c (tui_enable, tui_disable): Don't modify tui_version.
	(tui_is_window_visible, tui_get_command_dimension): Test
	tui_active instead of tui_version.
	* tuiData.h (tui_version): Delete declaration.
	* tui-hooks.c (tui_init_hook, tui_event_loop): Delete function,
	moved to "tui-interp.c".
	(tui_exit, tui_command_loop): Ditto.
	(_initialize_tui): Don't initialize init_ui_hook.  Initialize
	target_new_objfile_hook.
	* tui-interp.c: New file.
@
text
@d240 7
d252 1
a252 1
      {"tui", no_argument, 0, 14},
d274 1
a274 1
      {"annotate", required_argument, 0, 12},
d276 1
a276 1
      {"se", required_argument, 0, 10},
d298 1
a298 1
      {"cd", required_argument, 0, 11},
d306 1
a306 1
      {"statistics", no_argument, 0, 13},
d330 1
a330 1
	  case 10:
d334 1
a334 1
	  case 11:
d337 1
a337 1
	  case 12:
d341 1
a341 1
	  case 13:
d346 1
a346 1
	  case 14:
@


1.28
log
@        * main.h (struct captured_main_args): Add interpreter_p.
        * main.c (captured_main): Initialize interpreter_p from context.
        * gdb.c (main): Set interpreter_p argument.
        * Makefile.in (gdb.o): Add dependency for interps.h.
@
text
@a62 3
/* Whether this is the command line version or not */
int tui_version = 0;

d245 1
a245 1
      {"tui", no_argument, &tui_version, 1},
d339 5
a459 4
#ifdef TUI
	/* Disable the TUI as well.  */
	tui_version = 0;
#endif
a460 7

#ifdef TUI
    /* An explicit --tui flag overrides the default UI, which is the
       window system.  */
    if (tui_version)
      use_windows = 0;
#endif
@


1.27
log
@2003-02-06  Andrew Cagney  <ac131313@@redhat.com>

	* linux-proc.c: Include "gdb_stat.h" instead of <sys/stat.h>.
	* cp-valprint.c (cp_print_value_fields): Eliminate STREQN.
	* jv-typeprint.c (java_type_print_base): Ditto.
	* typeprint.c (typedef_print): Eliminate STREQ.
	* cli/cli-script.c (define_command, define_command): Ditto.
	* main.c (captured_main): Ditto.
	* values.c (lookup_internalvar): Ditto.
	* utils.c (safe_strerror, parse_escape): Eliminate assignment
	within `if' conditional.
	* linespec.c (decode_line_2): Ditto.
	* cli/cli-dump.c (bfd_openr_with_cleanup): Ditto.
	(bfd_openw_with_cleanup): Ditto.

Index: mi/ChangeLog
2003-02-06  Andrew Cagney  <ac131313@@redhat.com>

	* mi-cmd-env.c: Include "gdb_stat.h" instead of <sys/stat.h>.
@
text
@d232 4
a235 4
     this captured main (not yet implemented), or one specified by the
     user at start up, or the console.  Make life easier by always
     initializing the interpreter to something.  */
  interpreter_p = xstrdup (INTERP_CONSOLE);
@


1.26
log
@2003-02-05  Jim Ingham <jingham@@apple.com>
            Keith Seitz  <keiths@@redhat.com>
            Elena Zannoni  <ezannoni@@redhat.com>
            Andrew Cagney  <ac131313@@redhat.com>

	* Makefile.in (SUBDIR_CLI_OBS): Add "cli-interp.o".
	(SUBDIR_CLI_SRCS): Add "cli/cli-interp.c".
	(SUBDIR_MI_OBS): Add "mi-interp.o".
	(SUBDIR_MI_SRCS): Add "mi/mi-interp.c".
	(SFILES): Add "interps.c".
	(COMMON_OBS): Add "interps.o".
	(interps_h, mi_main_h): Define.
	(interps.o, cli-interp.o, mi-interp.o): Add dependencies.
	(mi-main.o, main.o, event-top.o): Update dependencies.
	* cli/cli-interp.c: New file.
	* interps.h, interps.c: New files.
	* top.c: (gdb_init): Don't install the default interpreter, handed
	by captured_main.
	* main.c: Include "interps.h".
	(interpreter_p): Note that it should malloc'ed.
	(captured_command_loop): Call current_interp_command_loop.
	(captured_main): Initialize interpreter_p to INTERP_CONSOLE.  Use
	xfree and xstrdup when updating interpreter_p.  Install the
	default interpreter.  Add hack to stop mi1's copyright notice
	being encoded.
	* event-top.h (gdb_setup_readline): Declare.
	(gdb_disable_readline): Declare.
	* event-top.c: Include "interps.h".
	(display_gdb_prompt): Call current_interp_display_prompt_p.
	(gdb_setup_readline): Initialize gdb_stdout, gdb_stderr,
	gdb_stdlog, and gdb_stdtarg.
	(_initialize_event_loop): Don't call gdb_setup_readline.
	* cli-out.c (cli_out_set_stream): New function.
	* cli-out.h (cli_out_set_stream): Declare.
@
text
@d641 1
a641 1
      && STREQ (execarg, symarg))
@


1.25
log
@2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* values.c: Delete code conditional on IS_TRAPPED_INTERNALVAR.
	* TODO: Delete reference to IS_TRAPPED_INTERNALVAR.
	* utils.c (init_page_info): Delete reference to MPW in comments.
	* main.c (captured_main): Delete #ifdef MPW.

Index: doc/ChangeLog
2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	descrption of IS_TRAPPED_INTERNALVAR.
@
text
@d2 4
a5 3
   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
d41 1
d58 3
a60 1
/* Has an interpreter been specified and if so, which. */
d100 1
a100 4
  if (command_loop_hook == NULL)
    command_loop ();
  else
    command_loop_hook ();
d231 6
d391 2
a392 1
	    interpreter_p = optarg;
d520 4
a523 1
     after initialize_all_files.  */
d539 43
a581 1
  if (!quiet)
@


1.24
log
@2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* main.c (captured_main): Delete #ifdef ADDITIONAL_OPTIONS,
	ADDITIONAL_OPTION_CASES, and ADDITIONAL_OPTION_HANDLER code.
	(print_gdb_help): Delete #ifdef ADDITIONAL_OPTION_HELP code.
	* stabsread.c (DBX_PARM_SYMBOL_CLASS): Delete macro.
	(define_symbol): Update.
	* symfile.c (generic_load): Remove references to nindy.
	* symtab.c: Remove references to nindy.

Index: doc/ChangeLog
2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of ADDITIONAL_OPTIONS, ADDITIONAL_OPTION_CASES,
	ADDITIONAL_OPTION_HANDLER, and ADDITIONAL_OPTION_HELP, and
	BEFORE_MAIN_LOOP_HOOK, and DBX_PARM_SYMBOL_CLASS along with
	references to nindy and i960.
	* gdb.texinfo (i960): Delete all references to i960 and nindy.
@
text
@a169 5
#ifdef MPW
  /* Do all Mac-specific setup. */
  mac_init ();
#endif /* MPW */

@


1.24.2.1
log
@Merge kseitz_interps-20020528-branch.
@
text
@d56 1
a56 3
/* Has an interpreter been specified and if so, which.
   This will be used as a set command variable, so it should
   always be malloc'ed - since do_setshow_command will free it. */
d389 1
a389 1
	    interpreter_p = xstrdup (optarg);
@


1.24.2.2
log
@2003-02-03  Andrew Cagney  <ac131313@@redhat.com>

	* top.c (gdb_init): Move interpreter init code from here ...
	* main.c (captured_main): ... to here.  Include "interps.h".
	(captured_main): Set interpreter_p to a default before parsing the
	options.
	* Makefile.in (main.o): Update dependencies.
@
text
@a39 1
#include "interps.h"
a236 6
  /* There will always be an interpreter.  Either the one passed into
     this captured main (not yet implemented), or one specified by the
     user at start up, or the console.  Make life easier by always
     initializing the interpreter to something.  */
  interpreter_p = xstrdup (GDB_INTERPRETER_CONSOLE);

a390 1
	    xfree (interpreter_p);
d519 1
a519 4
     after initialize_all_files() but before the interpreter has been
     installed.  Otherwize the help/version messages will be eaten by
     the interpreter's output handler.  */

d535 1
a535 43
  /* FIXME: cagney/2003-02-03: The big hack (part 1 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message before the interpreter is installed.  That way
     it isn't encapsulated in MI output.  */
  if (!quiet && strcmp (interpreter_p, GDB_INTERPRETER_MI1) == 0)
    {
      /* Print all the junk at the top, with trailing "..." if we are about
         to read a symbol file (possibly slowly).  */
      print_gdb_version (gdb_stdout);
      if (symarg)
	printf_filtered ("..");
      wrap_here ("");
      gdb_flush (gdb_stdout);	/* Force to screen during slow operations */
    }


  /* Install the default UI.  All the interpreters should have had a
     look at things by now.  Initialize the default interpreter. */

  {
    /* Find it.  */
    struct gdb_interpreter *interp = gdb_interpreter_lookup (interpreter_p);
    if (interp == NULL)
      {
        fprintf_unfiltered (gdb_stderr, "Interpreter `%s' unrecognized.\n",
                            interpreter_p);
        exit (1);
      }
    /* Install it.  */
    if (!gdb_interpreter_set (interp))
      {
        fprintf_unfiltered (gdb_stderr,
			    "Interpreter `%s' failed to initialize.\n",
                            interpreter_p);
        exit (1);
      }
  }

  /* FIXME: cagney/2003-02-03: The big hack (part 2 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message after the interpreter is installed when it is
     any sane interpreter.  */
  if (!quiet && !gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1))
@


1.24.2.3
log
@Clean up.
@
text
@d242 1
a242 1
  interpreter_p = xstrdup (INTERP_CONSOLE);
d550 1
a550 1
  if (!quiet && strcmp (interpreter_p, INTERP_MI1) == 0)
d567 1
a567 1
    struct interp *interp = interp_lookup (interpreter_p);
d575 1
a575 1
    if (!interp_set (interp))
d588 1
a588 1
  if (!quiet && !current_interp_named_p (INTERP_MI1))
@


1.24.2.4
log
@More cleanups.  Add `current_interp_command_loop()'.
@
text
@d99 4
a102 1
  current_interp_command_loop ();
@


1.24.2.5
log
@Overhaul changelog entries.
@
text
@d2 3
a4 4

   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
   Foundation, Inc.
d57 3
a59 3
/* The selected interpreter.  This will be used as a set command
   variable, so it should always be malloc'ed - since
   do_setshow_command will free it. */
@


1.23
log
@2003-01-17  Andrew Cagney  <ac131313@@redhat.com>

	* main.c (captured_main): Don't use PTR.
	* cp-valprint.c (cp_print_class_method): Replace STREQ with strcmp.
	* gdbtypes.c (lookup_primitive_typename): Ditto.
	(lookup_struct_elt_type): Ditto.
	* f-valprint.c (info_common_command): Ditto.
	(list_all_visible_commons): Ditto.
	* jv-typeprint.c (java_type_print_base): Ditto.
@
text
@a302 4
/* Allow machine descriptions to add more options... */
#ifdef ADDITIONAL_OPTIONS
      ADDITIONAL_OPTIONS
#endif
a442 3
#ifdef ADDITIONAL_OPTION_CASES
	    ADDITIONAL_OPTION_CASES
#endif
a638 4
#ifdef ADDITIONAL_OPTION_HANDLER
  ADDITIONAL_OPTION_HANDLER;
#endif

a826 3
#ifdef ADDITIONAL_OPTION_HELP
  fputs_unfiltered (ADDITIONAL_OPTION_HELP, stream);
#endif
@


1.22
log
@2003-01-17  Andrew Cagney  <ac131313@@redhat.com>

	* config/djgpp/fnchange.lst: Rename mi1-var-block.exp,
	mi1-var-child.exp, mi1-var-cmd.exp and mi1-var-display.exp.
	Rename opcodes/iq2000-desc.c and opcodes/iq2000-dis.c.  Rename
	i386-interix-nat.c and i386-interix-tdep.c.  Rename
	m68klinux-nat.c and m68klinux-tdep.c.  Rename
	config/mips/tm-linux.h and config/mips/tm-linux64.h.  Rename
	bfd/po/.cvsignore and opcodes/po/.cvsignore.  Rename
	gdb/objc-exp.tab.c and gdb/ada-exp.tab.c
	* main.c (captured_main): Use xfree, not free.
@
text
@d176 1
a176 1
  init_malloc ((PTR) NULL);
@


1.21
log
@	* Makefile.in (TARGET_SYSTEM_ROOT, TARGET_SYSTEM_ROOT_DEFINE): New
	variables.
	(main.o): Custom rule which uses $(TARGET_SYSTEM_ROOT_DEFINE).
	* configure.in: Add --with-sysroot.
	* configure: Regenerated.
	* main.c (gdb_sysroot): New variable.
	(captured_main): Initialize gdb_sysroot.
	* defs.h (gdb_sysroot): New extern declaration.
	* solib.c (_initialize_solib): Initialize solib_absolute_prefix.
@
text
@d221 1
a221 1
	  free (gdb_sysroot);
@


1.20
log
@2002-09-26  Andrew Cagney  <ac131313@@redhat.com>

	From Grace Sainsbury <graces@@redhat.com>:
	* Makefile.in (gdbtk-main.o): New target.
	(gdb.o): New target.
	(main_h): Define.
	(main.o): Update dependencies.
	(gdb$(EXEEXT)): Add gdb.o.
	(SUBDIR_GDBTK_SRCS): Add gdbtk-main.c.
	(SUBDIR_GDBTK_ALL, SUBDIR_GDBTK_UNINSTALL): Set.
	(SUBDIR_GDBTK_CLEAN): Set.
	(install-gdbtk): Install the insight binary.
	(uninstall-gdbtk): New target.
	(all-gdbtk, clean-gdbtk): New rule.
	* top.c (use_windows): Default to zero.
	* main.c: Include "main.h".
	(main): Delete.
	(struct captured_main_args): Delete.
	(gdb_main): New function.
	* main.h: New file.
	* gdb.c: New File.

2002-09-26  Andrew Cagney  <ac131313@@redhat.com>

	From Grace Sainsbury <graces@@redhat.com>:
	* generic/gdbtk-main.c: New file.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002
d68 3
d206 28
@


1.20.2.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 3
a4 4

   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
   Foundation, Inc.
a39 1
#include "interps.h"
d56 1
a56 3
/* The selected interpreter.  This will be used as a set command
   variable, so it should always be malloc'ed - since
   do_setshow_command will free it. */
d59 3
a67 3
/* System root path, used to find libraries etc.  */
char *gdb_sysroot = 0;

d72 4
a75 4
struct ui_file *gdb_stdin;
/* target IO streams */
struct ui_file *gdb_stdtargin;
struct ui_file *gdb_stdtargerr;
d93 4
a96 1
  current_interp_command_loop ();
d152 1
a152 1
  int i;
d167 5
d173 1
a173 5
  init_malloc (NULL);

#ifdef HAVE_SBRK
  lim_at_start = (char *) sbrk (0);
#endif
a199 3
  gdb_stdin = stdio_fileopen (stdin);
  gdb_stdtargerr = gdb_stderr;	/* for moment */
  gdb_stdtargin = gdb_stdin;	/* for moment */
a203 34
  /* Set the sysroot path.  */
#ifdef TARGET_SYSTEM_ROOT_RELOCATABLE
  gdb_sysroot = make_relative_prefix (argv[0], BINDIR, TARGET_SYSTEM_ROOT);
  if (gdb_sysroot)
    {
      struct stat s;
      int res = 0;

      if (stat (gdb_sysroot, &s) == 0)
	if (S_ISDIR (s.st_mode))
	  res = 1;

      if (res == 0)
	{
	  xfree (gdb_sysroot);
	  gdb_sysroot = TARGET_SYSTEM_ROOT;
	}
    }
  else
    gdb_sysroot = TARGET_SYSTEM_ROOT;
#else
#if defined (TARGET_SYSTEM_ROOT)
  gdb_sysroot = TARGET_SYSTEM_ROOT;
#else
  gdb_sysroot = "";
#endif
#endif

  /* There will always be an interpreter.  Either the one passed into
     this captured main, or one specified by the user at start up, or
     the console.  Initialize the interpreter to the one requested by 
     the application.  */
  interpreter_p = xstrdup (context->interpreter_p);

a209 9
    enum {
      OPT_SE = 10,
      OPT_CD,
      OPT_ANNOTATE,
      OPT_STATISTICS,
      OPT_TUI,
      OPT_NOWINDOWS,
      OPT_WINDOWS
    };
d215 1
a215 1
      {"tui", no_argument, 0, OPT_TUI},
d237 1
a237 1
      {"annotate", required_argument, 0, OPT_ANNOTATE},
d239 1
a239 1
      {"se", required_argument, 0, OPT_SE},
d261 1
a261 1
      {"cd", required_argument, 0, OPT_CD},
d265 5
a269 5
      {"nw", no_argument, NULL, OPT_NOWINDOWS},
      {"nowindows", no_argument, NULL, OPT_NOWINDOWS},
      {"w", no_argument, NULL, OPT_WINDOWS},
      {"windows", no_argument, NULL, OPT_WINDOWS},
      {"statistics", no_argument, 0, OPT_STATISTICS},
d272 4
d297 1
a297 1
	  case OPT_SE:
d301 1
a301 1
	  case OPT_CD:
d304 1
a304 1
	  case OPT_ANNOTATE:
d308 1
a308 1
	  case OPT_STATISTICS:
a312 16
	  case OPT_TUI:
	    /* --tui is equivalent to -i=tui.  */
	    xfree (interpreter_p);
	    interpreter_p = xstrdup ("tui");
	    break;
	  case OPT_WINDOWS:
	    /* FIXME: cagney/2003-03-01: Not sure if this option is
               actually useful, and if it is, what it should do.  */
	    use_windows = 1;
	    break;
	  case OPT_NOWINDOWS:
	    /* -nw is equivalent to -i=console.  */
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (INTERP_CONSOLE);
	    use_windows = 0;
	    break;
d362 1
a362 2
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (optarg);
d416 3
d431 4
d437 7
d493 1
a493 4
     after initialize_all_files() but before the interpreter has been
     installed.  Otherwize the help/version messages will be eaten by
     the interpreter's output handler.  */

d509 1
a509 39
  /* FIXME: cagney/2003-02-03: The big hack (part 1 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message before the interpreter is installed.  That way
     it isn't encapsulated in MI output.  */
  if (!quiet && strcmp (interpreter_p, INTERP_MI1) == 0)
    {
      /* Print all the junk at the top, with trailing "..." if we are about
         to read a symbol file (possibly slowly).  */
      print_gdb_version (gdb_stdout);
      if (symarg)
	printf_filtered ("..");
      wrap_here ("");
      gdb_flush (gdb_stdout);	/* Force to screen during slow operations */
    }


  /* Install the default UI.  All the interpreters should have had a
     look at things by now.  Initialize the default interpreter. */

  {
    /* Find it.  */
    struct interp *interp = interp_lookup (interpreter_p);
    if (interp == NULL)
      error ("Interpreter `%s' unrecognized", interpreter_p);
    /* Install it.  */
    if (!interp_set (interp))
      {
        fprintf_unfiltered (gdb_stderr,
			    "Interpreter `%s' failed to initialize.\n",
                            interpreter_p);
        exit (1);
      }
  }

  /* FIXME: cagney/2003-02-03: The big hack (part 2 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message after the interpreter is installed when it is
     any sane interpreter.  */
  if (!quiet && !current_interp_named_p (INTERP_MI1))
d569 1
a569 1
      && strcmp (execarg, symarg) == 0)
d615 4
d739 1
a739 3
  /* The only way to end up here is by an error (normal exit is
     handled by quit_force()), hence always return an error status.  */
  return 1;
d807 3
@


1.20.2.2
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d4 1
a4 1
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
d75 1
a78 1
struct ui_file *gdb_stdtarg;
d267 2
@


1.19
log
@Fix from Paul Breed:
* main.c (captured_main): Add a `break' after the case for 'b'.
@
text
@d40 2
a112 6
struct captured_main_args
  {
    int argc;
    char **argv;
  };

d735 1
a735 1
main (int argc, char **argv)
d737 2
a738 4
  struct captured_main_args args;
  args.argc = argc;
  args.argv = argv;
  catch_errors (captured_main, &args, "", RETURN_MASK_ALL);
@


1.18
log
@	* main.c: Marked all strings with _().
@
text
@d400 1
@


1.18.8.1
log
@Merge with mainline; tag is carlton_dictionary-20020927-merge
@
text
@a39 2
#include "main.h"

d111 6
a399 1
            break;
d738 1
a738 1
gdb_main (struct captured_main_args *args)
d740 4
a743 2
  use_windows = args->use_windows;
  catch_errors (captured_main, args, "", RETURN_MASK_ALL);
@


1.18.8.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d2 3
a4 4

   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
   Foundation, Inc.
a39 1
#include "interps.h"
d56 1
a56 3
/* The selected interpreter.  This will be used as a set command
   variable, so it should always be malloc'ed - since
   do_setshow_command will free it. */
a67 3
/* System root path, used to find libraries etc.  */
char *gdb_sysroot = 0;

d93 4
a96 1
  current_interp_command_loop ();
d167 5
d173 1
a173 1
  init_malloc (NULL);
a203 34
  /* Set the sysroot path.  */
#ifdef TARGET_SYSTEM_ROOT_RELOCATABLE
  gdb_sysroot = make_relative_prefix (argv[0], BINDIR, TARGET_SYSTEM_ROOT);
  if (gdb_sysroot)
    {
      struct stat s;
      int res = 0;

      if (stat (gdb_sysroot, &s) == 0)
	if (S_ISDIR (s.st_mode))
	  res = 1;

      if (res == 0)
	{
	  xfree (gdb_sysroot);
	  gdb_sysroot = TARGET_SYSTEM_ROOT;
	}
    }
  else
    gdb_sysroot = TARGET_SYSTEM_ROOT;
#else
#if defined (TARGET_SYSTEM_ROOT)
  gdb_sysroot = TARGET_SYSTEM_ROOT;
#else
  gdb_sysroot = "";
#endif
#endif

  /* There will always be an interpreter.  Either the one passed into
     this captured main (not yet implemented), or one specified by the
     user at start up, or the console.  Make life easier by always
     initializing the interpreter to something.  */
  interpreter_p = xstrdup (INTERP_CONSOLE);

d272 4
d362 1
a362 2
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (optarg);
d416 3
d493 1
a493 4
     after initialize_all_files() but before the interpreter has been
     installed.  Otherwize the help/version messages will be eaten by
     the interpreter's output handler.  */

d509 1
a509 43
  /* FIXME: cagney/2003-02-03: The big hack (part 1 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message before the interpreter is installed.  That way
     it isn't encapsulated in MI output.  */
  if (!quiet && strcmp (interpreter_p, INTERP_MI1) == 0)
    {
      /* Print all the junk at the top, with trailing "..." if we are about
         to read a symbol file (possibly slowly).  */
      print_gdb_version (gdb_stdout);
      if (symarg)
	printf_filtered ("..");
      wrap_here ("");
      gdb_flush (gdb_stdout);	/* Force to screen during slow operations */
    }


  /* Install the default UI.  All the interpreters should have had a
     look at things by now.  Initialize the default interpreter. */

  {
    /* Find it.  */
    struct interp *interp = interp_lookup (interpreter_p);
    if (interp == NULL)
      {
        fprintf_unfiltered (gdb_stderr, "Interpreter `%s' unrecognized.\n",
                            interpreter_p);
        exit (1);
      }
    /* Install it.  */
    if (!interp_set (interp))
      {
        fprintf_unfiltered (gdb_stderr,
			    "Interpreter `%s' failed to initialize.\n",
                            interpreter_p);
        exit (1);
      }
  }

  /* FIXME: cagney/2003-02-03: The big hack (part 2 of 2) that lets
     GDB retain the old MI1 interpreter startup behavior.  Output the
     copyright message after the interpreter is installed when it is
     any sane interpreter.  */
  if (!quiet && !current_interp_named_p (INTERP_MI1))
d569 1
a569 1
      && strcmp (execarg, symarg) == 0)
d615 4
d807 3
@


1.18.8.3
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d63 3
d232 4
a235 4
     this captured main, or one specified by the user at start up, or
     the console.  Initialize the interpreter to the one requested by 
     the application.  */
  interpreter_p = xstrdup (context->interpreter_p);
a242 9
    enum {
      OPT_SE = 10,
      OPT_CD,
      OPT_ANNOTATE,
      OPT_STATISTICS,
      OPT_TUI,
      OPT_NOWINDOWS,
      OPT_WINDOWS
    };
d248 1
a248 1
      {"tui", no_argument, 0, OPT_TUI},
d270 1
a270 1
      {"annotate", required_argument, 0, OPT_ANNOTATE},
d272 1
a272 1
      {"se", required_argument, 0, OPT_SE},
d294 1
a294 1
      {"cd", required_argument, 0, OPT_CD},
d298 5
a302 5
      {"nw", no_argument, NULL, OPT_NOWINDOWS},
      {"nowindows", no_argument, NULL, OPT_NOWINDOWS},
      {"w", no_argument, NULL, OPT_WINDOWS},
      {"windows", no_argument, NULL, OPT_WINDOWS},
      {"statistics", no_argument, 0, OPT_STATISTICS},
d326 1
a326 1
	  case OPT_SE:
d330 1
a330 1
	  case OPT_CD:
d333 1
a333 1
	  case OPT_ANNOTATE:
d337 1
a337 1
	  case OPT_STATISTICS:
a341 16
	  case OPT_TUI:
	    /* --tui is equivalent to -i=tui.  */
	    xfree (interpreter_p);
	    interpreter_p = xstrdup ("tui");
	    break;
	  case OPT_WINDOWS:
	    /* FIXME: cagney/2003-03-01: Not sure if this option is
               actually useful, and if it is, what it should do.  */
	    use_windows = 1;
	    break;
	  case OPT_NOWINDOWS:
	    /* -nw is equivalent to -i=console.  */
	    xfree (interpreter_p);
	    interpreter_p = xstrdup (INTERP_CONSOLE);
	    use_windows = 0;
	    break;
d458 4
d463 7
@


1.18.8.4
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d573 5
a577 1
      error ("Interpreter `%s' unrecognized", interpreter_p);
d818 1
a818 3
  /* The only way to end up here is by an error (normal exit is
     handled by quit_force()), hence always return an error status.  */
  return 1;
@


1.18.8.5
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d76 4
a79 4
struct ui_file *gdb_stdin;
/* target IO streams */
struct ui_file *gdb_stdtargin;
struct ui_file *gdb_stdtargerr;
a170 4
#ifdef HAVE_SBRK
  lim_at_start = (char *) sbrk (0);
#endif

a195 3
  gdb_stdin = stdio_fileopen (stdin);
  gdb_stdtargerr = gdb_stderr;	/* for moment */
  gdb_stdtargin = gdb_stdin;	/* for moment */
@


1.18.8.6
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d153 1
a153 1
  int i;
@


1.18.8.7
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d267 2
@


1.18.6.1
log
@Fix from Paul Breed:
* main.c (captured_main): Add a `break' after the case for 'b'.
@
text
@a399 1
            break;
@


1.18.6.2
log
@2002-09-28  Andrew Cagney  <ac131313@@redhat.com>

	Import from mainline:

	From Grace Sainsbury <graces@@redhat.com>:
	* Makefile.in (gdbtk-main.o): New target.
	(gdb.o): New target.
	(main_h): Define.
	(main.o): Update dependencies.
	(gdb$(EXEEXT)): Add gdb.o.
	(SUBDIR_GDBTK_SRCS): Add gdbtk-main.c.
	(SUBDIR_GDBTK_ALL, SUBDIR_GDBTK_UNINSTALL): Set.
	(SUBDIR_GDBTK_CLEAN): Set.
	(install-gdbtk): Install the insight binary.
	(uninstall-gdbtk): New target.
	(all-gdbtk, clean-gdbtk): New rule.
	* top.c (use_windows): Default to zero.
	* main.c: Include "main.h".
	(main): Delete.
	(struct captured_main_args): Delete.
	(gdb_main): New function.
	* main.h: New file.
	* gdb.c: New File.

Index: gdbtk/ChangeLog
2002-09-26  Andrew Cagney  <ac131313@@redhat.com>

	Import from mainline:

	From Grace Sainsbury <graces@@redhat.com>:
	* generic/gdbtk-main.c: New file.

Index: testsuite/gdb.gdbtk/ChangeLog
2002-09-28  Andrew Cagney  <ac131313@@redhat.com>

	Import from mainline:
	2002-09-26  Keith Seitz  <keiths@@redhat.com>
        * lib/insight-support.exp (gdbtk_start): Figure out where
        the insight executable is based on where gdb is. Use this
        executable to start insight instead of gdb.
@
text
@a39 2
#include "main.h"

d111 6
d739 1
a739 1
gdb_main (struct captured_main_args *args)
d741 4
a744 2
  use_windows = args->use_windows;
  catch_errors (captured_main, args, "", RETURN_MASK_ALL);
@


1.17
log
@	* gdb_locale.h: New file.
	* Makefile.in (GDB_CFLAGS): Define LOCALEDIR.
	(defs_h): Added gdb_locale.h.
	* configure, config.in: Rebuilt.
	* configure.in (PACKAGE): Define.
	* defs.h: Include gdb_locale.h.
	* main.c (captured_main): Call setlocale, bindtextdomain,
@
text
@d350 1
a350 1
		  fprintf_unfiltered (gdb_stderr, "%s: unable to load tclcommand file \"%s\"",
d396 1
a396 1
		   "warning: could not set baud rate to `%s'.\n", optarg);
d413 1
a413 1
		 "warning: could not set timeout limit to `%s'.\n", optarg);
d424 1
a424 1
			"Use `%s --help' for a complete list of options.\n",
d455 1
a455 1
				"%s: `--args' specified but no program specified\n",
d482 1
a482 1
				  "Excess command line arguments ignored. (%s%s)\n",
d527 1
a527 1
  warning_pre_print = "\nwarning: ";
d595 1
a595 1
  warning_pre_print = "\nwarning: ";
d625 1
a625 1
  warning_pre_print = "warning: ";
d684 1
a684 1
      printf_unfiltered ("Startup time: %ld.%06ld\n",
d694 1
a694 1
      printf_unfiltered ("Startup size: data size %ld\n",
d755 1
a755 1
  fputs_unfiltered ("\
d760 2
a761 2
", stream);
  fputs_unfiltered ("\
d763 2
a764 2
", stream);
  fputs_unfiltered ("\
d766 2
a767 2
", stream);
  fputs_unfiltered ("\
d774 2
a775 2
", stream);
  fputs_unfiltered ("\
d782 2
a783 2
", stream);
  fputs_unfiltered ("\
d786 2
a787 2
", stream);
  fputs_unfiltered ("\
d790 1
a790 1
  --nx               Do not read ", stream);
d792 1
a792 1
  fputs_unfiltered (" file.\n\
d795 2
a796 2
", stream);
  fputs_unfiltered ("\
d800 1
a800 1
", stream);
d802 1
a802 1
  fputs_unfiltered ("\
d804 1
a804 1
", stream);
d806 1
a806 1
  fputs_unfiltered ("\
d811 1
a811 1
", stream);
d815 1
a815 1
  fputs_unfiltered ("\n\
d819 1
a819 1
", stream);
@


1.16
log
@Remove else clause to #if UI_OUT.
@
text
@d160 9
@


1.16.6.1
log
@merge with trunk
@
text
@a159 9
#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
  setlocale (LC_MESSAGES, "");
#endif
#if defined (HAVE_SETLOCALE)
  setlocale (LC_CTYPE, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

d341 1
a341 1
		  fprintf_unfiltered (gdb_stderr, _("%s: unable to load tclcommand file \"%s\""),
d387 1
a387 1
		   _("warning: could not set baud rate to `%s'.\n"), optarg);
d404 1
a404 1
		 _("warning: could not set timeout limit to `%s'.\n"), optarg);
d415 1
a415 1
			_("Use `%s --help' for a complete list of options.\n"),
d446 1
a446 1
				_("%s: `--args' specified but no program specified\n"),
d473 1
a473 1
				  _("Excess command line arguments ignored. (%s%s)\n"),
d518 1
a518 1
  warning_pre_print = _("\nwarning: ");
d586 1
a586 1
  warning_pre_print = _("\nwarning: ");
d616 1
a616 1
  warning_pre_print = _("warning: ");
d675 1
a675 1
      printf_unfiltered (_("Startup time: %ld.%06ld\n"),
d685 1
a685 1
      printf_unfiltered (_("Startup size: data size %ld\n"),
d746 1
a746 1
  fputs_unfiltered (_("\
d751 2
a752 2
"), stream);
  fputs_unfiltered (_("\
d754 2
a755 2
"), stream);
  fputs_unfiltered (_("\
d757 2
a758 2
"), stream);
  fputs_unfiltered (_("\
d765 2
a766 2
"), stream);
  fputs_unfiltered (_("\
d773 2
a774 2
"), stream);
  fputs_unfiltered (_("\
d777 2
a778 2
"), stream);
  fputs_unfiltered (_("\
d781 1
a781 1
  --nx               Do not read "), stream);
d783 1
a783 1
  fputs_unfiltered (_(" file.\n\
d786 2
a787 2
"), stream);
  fputs_unfiltered (_("\
d791 1
a791 1
"), stream);
d793 1
a793 1
  fputs_unfiltered (_("\
d795 1
a795 1
"), stream);
d797 1
a797 1
  fputs_unfiltered (_("\
d802 1
a802 1
"), stream);
d806 1
a806 1
  fputs_unfiltered (_("\n\
d810 1
a810 1
"), stream);
@


1.16.8.1
log
@Initial check-in of interpreter support from Apple. (Slightly massaged and
modified by me.)
@
text
@d54 1
a54 3
/* Has an interpreter been specified and if so, which.
   This will be used as a set command variable, so it should
   always be malloc'ed - since do_setshow_command will free it. */
d357 1
a357 1
	    interpreter_p = xstrdup (optarg);
@


1.16.8.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@a161 9
#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
  setlocale (LC_MESSAGES, "");
#endif
#if defined (HAVE_SETLOCALE)
  setlocale (LC_CTYPE, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

d343 1
a343 1
		  fprintf_unfiltered (gdb_stderr, _("%s: unable to load tclcommand file \"%s\""),
d389 1
a389 1
		   _("warning: could not set baud rate to `%s'.\n"), optarg);
d406 1
a406 1
		 _("warning: could not set timeout limit to `%s'.\n"), optarg);
d417 1
a417 1
			_("Use `%s --help' for a complete list of options.\n"),
d448 1
a448 1
				_("%s: `--args' specified but no program specified\n"),
d475 1
a475 1
				  _("Excess command line arguments ignored. (%s%s)\n"),
d520 1
a520 1
  warning_pre_print = _("\nwarning: ");
d588 1
a588 1
  warning_pre_print = _("\nwarning: ");
d618 1
a618 1
  warning_pre_print = _("warning: ");
d677 1
a677 1
      printf_unfiltered (_("Startup time: %ld.%06ld\n"),
d687 1
a687 1
      printf_unfiltered (_("Startup size: data size %ld\n"),
d748 1
a748 1
  fputs_unfiltered (_("\
d753 2
a754 2
"), stream);
  fputs_unfiltered (_("\
d756 2
a757 2
"), stream);
  fputs_unfiltered (_("\
d759 2
a760 2
"), stream);
  fputs_unfiltered (_("\
d767 2
a768 2
"), stream);
  fputs_unfiltered (_("\
d775 2
a776 2
"), stream);
  fputs_unfiltered (_("\
d779 2
a780 2
"), stream);
  fputs_unfiltered (_("\
d783 1
a783 1
  --nx               Do not read "), stream);
d785 1
a785 1
  fputs_unfiltered (_(" file.\n\
d788 2
a789 2
"), stream);
  fputs_unfiltered (_("\
d793 1
a793 1
"), stream);
d795 1
a795 1
  fputs_unfiltered (_("\
d797 1
a797 1
"), stream);
d799 1
a799 1
  fputs_unfiltered (_("\
d804 1
a804 1
"), stream);
d808 1
a808 1
  fputs_unfiltered (_("\n\
d812 1
a812 1
"), stream);
@


1.16.8.3
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a39 2
#include "main.h"

d113 6
a401 1
            break;
d740 1
a740 1
gdb_main (struct captured_main_args *args)
d742 4
a745 2
  use_windows = args->use_windows;
  catch_errors (captured_main, args, "", RETURN_MASK_ALL);
@


1.15
log
@2002-01-10  Michael Snyder  <msnyder@@redhat.com>

	* main.c (captured_main): Add new command line option "--pid".
	If the second command line argument (following the symbol-file)
	begins with a digit, try to attach to it before trying to open
	it as a corefile.
	(print_gdb_help): Document the "--pid" argument.
@
text
@a53 1
#ifdef UI_OUT
a55 1
#endif
a250 1
#ifdef UI_OUT
a253 1
#endif
a355 1
#ifdef UI_OUT
a358 1
#endif
@


1.14
log
@	Fix for PR gdb/209, PR gdb/156:
	* gdbarch.c, gdbarch.h: Rebuilt.
	* gdbarch.sh: Added `construct_inferior_arguments'.
	* cli/cli-decode.h (cmd_list_element): Added pre_show_hook.
	Typo fix.
	* cli/cli-setshow.c (do_setshow_command): Call the pre_show_hook.
	* infcmd.c (_initialize_infcmd): Set sfunc on `set args' command.
	(inferior_argc, inferior_argv): New globals.
	(notice_args_set): New function.
	(set_inferior_args): Clear inferior_argc and inferior_argv.
	(set_inferior_args_vector): New function.
	(get_inferior_args): Handle inferior argument vector.
	(run_command): Use get_inferior_args().
	(notice_args_read): New function.
	(_initialize_infcmd): Don't call set_inferior_args.
	* command.h: Typo fix.
	(cmd_list_element): Added pre_show_hook.
	* main.c (captured_main): Added --args option.
	(print_gdb_help): Document --args.
	* inferior.h (construct_inferior_arguments): Declare.
	(set_inferior_args_vector): Likewise.
	* fork-child.c (construct_inferior_arguments): New function.
@
text
@d3 2
a4 1
   1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d243 2
d326 4
d473 2
a474 2
	      /* FIXME: The documentation says this can be a
		 "ProcID". as well.  */
d596 5
a600 1
      if (catch_command_errors (core_file_command, corearg, !batch, RETURN_MASK_ALL) == 0)
d602 4
a605 3
	  /* See if the core file is really a PID. */
	  if (isdigit (corearg[0]))
	    catch_command_errors (attach_command, corearg, !batch, RETURN_MASK_ALL);
d607 3
d770 1
@


1.13
log
@	* main.c (enable_external_editor): Don't declare.
	(captured_main): Don't set enable_external_editor.
@
text
@d127 1
d267 1
d281 1
a281 1
	if (c == EOF)
d437 40
a476 19
    /* OK, that's all the options.  The other arguments are filenames.  */
    count = 0;
    for (; optind < argc; optind++)
      switch (++count)
	{
	case 1:
	  symarg = argv[optind];
	  execarg = argv[optind];
	  break;
	case 2:
	  /* FIXME: The documentation says this can be a "ProcID". as well. */
	  corearg = argv[optind];
	  break;
	case 3:
	  fprintf_unfiltered (gdb_stderr,
			  "Excess command line arguments ignored. (%s%s)\n",
			  argv[optind], (optind == argc - 1) ? "" : " ...");
	  break;
	}
d739 2
a740 1
    gdb [options] [executable-file [core-file or process-id]]\n\n\
d742 3
@


1.12
log
@	* utils.c (query): Remove tui hacks; tui must use the query_hook.
	* top.c (command_loop): Remove tui insert_mode hacks; don't call
	tuiCleanUp because this must be made with atexit by tui.
	* symfile.c (symbol_file_command): Remove call to TUIDO
	* stack.c (show_and_print_stack_frame_stub): Remove tui check;
	not necessary when using the selected frame hooks.
	(print_stack_frame_stub): Likewise.
	(print_frame_info_base): Likewise.
	(print_frame_info): Likewise.
	(up_silently_command): Likewise.
	(down_silently_command): Likewise.
	(show_stack_frame): Likewise for TUIDO.
	(select_frame): Likewise.
	(select_and_print_frame): Likewise.
	(stack_publish_stopped_with_no_frame): Remove.
	(select_and_maybe_print_frame): Remove.
	* main.c (captured_main): Remove tui_fileopen and tuiInit; tui
	must use the initialize ui hook.
	* infrun.c (normal_stop): Remove call to TUIDO; tui must use the
	selected frame hooks.
	* event-top.c (command_handler): Remove tui insert_mode hack.
	* defs.h: Remove TUIDO; Only include tui.h.
	* breakpoint.c (mention): Remove calls to TUIDO.
	(delete_breakpoint): Remove tui hacks; tui must install
	the breakpoint hooks.
@
text
@a83 1
extern int enable_external_editor;
d343 2
a344 11
	    {
	      /*
	       * This enables the edit/button in the main window, even
	       * when IDE_ENABLED is set to false. In this case you must
	       * use --tclcommand to specify a tcl/script to be called,
	       * Tcl/Variable to store the edit/command is:
	       * external_editor
	       */
	      enable_external_editor = 1;
	      break;
	    }
a346 4
	      /*
	       * if editor command is enabled, both flags are set
	       */
	      enable_external_editor = 1;
@


1.11
log
@* gnu-regex.c: Eliminate obsolete check for _MSC_VER.
* utils.c (notice_quit): Remove dummy function only used for _MSC_VER.
* values.c (unpack_double): Remove obsolete check for _MSC_VER.
* defs.h: Ditto.
* m32r-rom.c: Ditto.
* p-exp.y: Ditto.
* ser-e7kpc.c: Ditto.  Define WIN32_LEAN_AND_MEAN under _WIN32, for faster
compilation.
(get_ds_base): Remove _MSC_VER version of this function.
* nindy-share/ttyflush.c: Ditto.  X
* rdi-share/host.h: Ditto.  X
* ser-go32.c (dos_readchar): Remove call to obsolete function.
* remote-sim.c (gdb_os_poll_quit): Ditto.
* remote-e7000.c (expect): Remove obsolete #if 0'ed code.
* main.c (captured_main): Eliminate special Cygwin checks.
* ser-tcp.c: Remove unneeded __CYGWIN__ guard against system include.
@
text
@a38 6
#if defined (TUI)
/* FIXME: cagney/2000-01-31: This #include is to allow older code such
   as that found in the TUI to continue to build. */
#include "tui/tui-file.h"
#endif

a191 6
#if defined (TUI)
  gdb_stdout = tui_fileopen (stdout);
  gdb_stderr = tui_fileopen (stderr);
  gdb_stdlog = gdb_stdout;	/* for moment */
  gdb_stdtarg = gdb_stderr;	/* for moment */
#else
a195 1
#endif
a470 6

#if defined(TUI)
  /* Should this be moved to tui-top.c:_initialize_tui()? */
  if (tui_version)
    init_ui_hook = tuiInit;
#endif
@


1.11.2.1
log
@Typesystem work initial import.
Note that this currently isn't building, i'm in the middle of converting make_function_type/lookup_function_type
@
text
@d578 1
a578 1
	catch_command_errors (symbol_file_command, symarg, 0, RETURN_MASK_ALL);
d585 1
a585 1
	catch_command_errors (symbol_file_command, symarg, 0, RETURN_MASK_ALL);
@


1.10
log
@Zap some bogus #ifndef _WIN32 - hangover from WinGDB
@
text
@a92 4
#ifdef __CYGWIN__
#include <sys/cygwin.h>		/* for cygwin32_conv_to_posix_path */
#endif

a532 13
#ifdef __CYGWIN__
  {
    char *tmp = getenv ("HOME");

    if (tmp != NULL)
      {
	homedir = (char *) alloca (PATH_MAX + 1);
	cygwin32_conv_to_posix_path (tmp, homedir);
      }
    else
      homedir = NULL;
  }
#else
a533 1
#endif
@


1.9
log
@* main.c: Remove windows.h use.
(gdbtk_test): Use PATH_MAX for home var calculation.
* remote-e7000.c (e7000_parse_device): Accomodate Cygwin as well as Win32 in
test.
* ser-tcp.c: Use modern __CYGWIN__ conditional.
* source.c (mod_path): Add __CYGWIN__ conditional to WIN32 test.
(openp): Ditto.
* symfile.c (symfile_bfd_open): Ditto.
* gdbtk/generic/gdbtk.c: Ditto.
@
text
@a708 7
  /* The default command loop. 
     The WIN32 Gui calls this main to set up gdb's state, and 
     has its own command loop. */
#if !defined _WIN32 || defined __GNUC__
  /* GUIs generally have their own command loop, mainloop, or
     whatever.  This is a good place to gain control because many
     error conditions will end up here via longjmp(). */
a743 1
#endif
@


1.8
log
@2001-04-04  Martin M. Hunt  <hunt@@redhat.com>

	* main.c (captured_main): For GDBtk, don't use tui_fileopen().
	Handle all stream setup in gdbtk_init
@
text
@a93 1
#include <windows.h>		/* for MAX_PATH */
d537 1
a537 1
#ifdef __CYGWIN32__
d543 1
a543 1
	homedir = (char *) alloca (MAX_PATH + 1);
@


1.7
log
@Update/correct copyright notices.
@
text
@d38 2
a39 1
#if defined (TUI) || defined (GDBTK)
d203 1
a203 4
#if defined (TUI) || defined (GDBTK)
  /* Older code uses the tui_file and fputs_unfiltered_hook().  It
     should be using a customized UI_FILE object and re-initializing
     within its own _initialize function.  */
@


1.6
log
@2001-01-26  Fernando Nasser  <fnasser@@redhat.com>

        Fix double parsing of filenames passed as command line arguments
        to GDB (causes weird handling of escape characters).
        Also, remove dependencies on the CLI from libgdb.
        * call-cmds.h: Remove declaration of exec_file_command().
        * gdbcore.h: Remove declaration of exec_file_command().
        Add declarations for exec_open() and exec_file_clear().
        * symfile.h: Add declarations for symbol_file_add_main() and
        symbol_file_clear().
        * exec.c (exec_open): New function. Implements to_open for exec
        targets.
        (exec_file_clear): New function. Makes GDB forget about a previously
        specified executable file.
        (exec_file_attach): Move parsing of arguments from here ...
        (exec_file_command): ... to here.
        (init_exec_ops): Use exec_open(), not exec_file_command() to
        implement to_open for exec targets.
        * symfile.c (symbol_file_add_main): New function. Call symbol_file_add()        with default values.  Used when the file name has already been parsed.
        (symbol_file_clear): New function. Makes GDB forget about previously
        read symbols.
        (symbol_file_command): Call the above function instead of inline code.
        * main.c: Include "symfile.h" and "gdbcore.h" instead of the deprecated
        "call-cmds.h".
        (captured_main): Call exec_file_attach() and symbol_file_add_main()
        instead of exec_file_command() and symbol_file_command().
        (captured_main): Add comment.
        * corefile.c: Include "symfile.h".
        (core_file_command): Call symbol_file_add_main() instead of
        symbol_file_command().
        (reopen_exec_file): Call exec_open() instead of exec_file_command().
        * infcmd.c: Include "symfile.h".
        (attach_command): Call symbol_file_add_main() instead of
        symbol_file_command().
        * infrun.c: Remove comment about the inclusion of "symfile.h",
        not any longer appropriate.
        (follow_exec): Call symbol_file_add_main() instead of
        symbol_file_command().
        * remote-es.c: Include "symfile.h".
        (es1800_load): Call symbol_file_add_main() instead of
        symbol_file_command().
        * remote-vx.c: Remove comment about the inclusion of "symfile.h",
        not any longer appropriate.
        (vx-wait): Call symbol_file_add_main() instead of
        symbol_file_command().
        * solib-svr4.c (open_symbol_file_object): Call symbol_file_add_main()
        instead of symbol_file_command().
        * v850ice.c (ice_file): Call exec_open(), exec_file_attach() and
        symbol_file_add_main() instead of exec_file_command() and
        symbol_file_command().
        * Makefile.in: Update dependencies.
@
text
@d2 2
a3 1
   Copyright 1986-1995, 1999-2000 Free Software Foundation, Inc.
@


1.5
log
@Replace free() with xfree().
@
text
@d25 2
a26 1
#include "call-cmds.h"
d478 1
d597 2
a598 2
      if (catch_command_errors (exec_file_command, execarg, !batch, RETURN_MASK_ALL))
	catch_command_errors (symbol_file_command, symarg, 0, RETURN_MASK_ALL);
d603 1
a603 1
	catch_command_errors (exec_file_command, execarg, !batch, RETURN_MASK_ALL);
d605 1
a605 1
	catch_command_errors (symbol_file_command, symarg, 0, RETURN_MASK_ALL);
@


1.4
log
@
Corrected spelling errors in comments
@
text
@d586 1
a586 1
  free ((PTR) dirarg);
d668 1
a668 1
  free ((PTR) cmdarg);
@


1.3
log
@PARAMS removal.
@
text
@d108 1
a108 1
     the do_cleanups() below is redundant.  Unfortunatly, many FUNC's
@


1.2
log
@Add mi/ and testsuite/gdb.mi/ subdirectories.
Add --enable-gdbmi option to configury.
Add mi rules to Makefile.in
Add mi conditional output to event-top.c infrun.c main.c top.c.
Add -i=mi option.
@
text
@d352 1
a352 1
	      extern int gdbtk_test PARAMS ((char *));
@


1.1
log
@Initial revision
@
text
@d2 1
a2 2
   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995
   Free Software Foundation, Inc.
d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a21 1
#include <setjmp.h>
d34 7
a40 13

/* Temporary variable for SET_TOP_LEVEL.  */

static int top_level_val;

/* Do a setjmp on error_return and quit_return.  catch_errors is
   generally a cleaner way to do this, but main() would look pretty
   ugly if it had to use catch_errors each time.  */

#define SET_TOP_LEVEL() \
  (((top_level_val = SIGSETJMP (error_return)) \
    ? (PTR) 0 : (PTR) memcpy (quit_return, error_return, sizeof (SIGJMP_BUF))) \
   , top_level_val)
d50 11
d70 8
a77 2
GDB_FILE *gdb_stdout;
GDB_FILE *gdb_stderr;
d82 1
a82 2
static void print_gdb_help PARAMS ((GDB_FILE *));
extern void gdb_init PARAMS ((char *));
d88 1
a88 1
extern char * external_editor_command;
d91 2
a92 2
#include <windows.h> /* for MAX_PATH */
#include <sys/cygwin.h> /* for cygwin32_conv_to_posix_path */
d95 34
a128 4
int
main (argc, argv)
     int argc;
     char **argv;
d130 3
d161 1
a161 1
  
a168 2
  int gdb_file_size;

a184 5
  /* If error() is called from initialization code, just exit */
  if (SET_TOP_LEVEL ()) {
    exit(1);
  }

d200 14
a213 1
  gdb_file_size = sizeof(GDB_FILE);
d215 2
a216 11
  gdb_stdout = (GDB_FILE *)xmalloc (gdb_file_size);
  gdb_stdout->ts_streamtype = afile;
  gdb_stdout->ts_filestream = stdout;
  gdb_stdout->ts_strbuf = NULL;
  gdb_stdout->ts_buflen = 0;

  gdb_stderr = (GDB_FILE *)xmalloc (gdb_file_size);
  gdb_stderr->ts_streamtype = afile;
  gdb_stderr->ts_filestream = stderr;
  gdb_stderr->ts_strbuf = NULL;
  gdb_stderr->ts_buflen = 0;
d225 3
a227 1
      {
d229 1
a229 1
	{"tui", no_argument, &tui_version, 1},
d231 54
a284 43
	{"xdb", no_argument, &xdb_commands, 1},
	{"dbx", no_argument, &dbx_commands, 1},
	{"readnow", no_argument, &readnow_symbol_files, 1},
	{"r", no_argument, &readnow_symbol_files, 1},
	{"mapped", no_argument, &mapped_symbol_files, 1},
	{"m", no_argument, &mapped_symbol_files, 1},
	{"quiet", no_argument, &quiet, 1},
	{"q", no_argument, &quiet, 1},
	{"silent", no_argument, &quiet, 1},
	{"nx", no_argument, &inhibit_gdbinit, 1},
	{"n", no_argument, &inhibit_gdbinit, 1},
	{"batch", no_argument, &batch, 1},
	{"epoch", no_argument, &epoch_interface, 1},

	/* This is a synonym for "--annotate=1".  --annotate is now preferred,
	   but keep this here for a long time because people will be running
	   emacses which use --fullname.  */
	{"fullname", no_argument, 0, 'f'},
	{"f", no_argument, 0, 'f'},

	{"annotate", required_argument, 0, 12},
	{"help", no_argument, &print_help, 1},
	{"se", required_argument, 0, 10},
	{"symbols", required_argument, 0, 's'},
	{"s", required_argument, 0, 's'},
	{"exec", required_argument, 0, 'e'},
	{"e", required_argument, 0, 'e'},
	{"core", required_argument, 0, 'c'},
	{"c", required_argument, 0, 'c'},
	{"command", required_argument, 0, 'x'},
	{"version", no_argument, &print_version, 1},
	{"x", required_argument, 0, 'x'},
	{"directory", required_argument, 0, 'd'},
	{"cd", required_argument, 0, 11},
	{"tty", required_argument, 0, 't'},
	{"baud", required_argument, 0, 'b'},
	{"b", required_argument, 0, 'b'},
	{"nw", no_argument, &use_windows, 0},
	{"nowindows", no_argument, &use_windows, 0},
	{"w", no_argument, &use_windows, 1},
	{"windows", no_argument, &use_windows, 1},
	{"statistics", no_argument, 0, 13},
	{"write", no_argument, &write_files, 1},
d287 1
a287 1
	ADDITIONAL_OPTIONS
d289 2
a290 2
	{0, no_argument, 0, 0}
      };
d345 1
a345 1
		cmdarg = (char **) xrealloc ((char *)cmdarg,
d349 39
d393 1
a393 1
		dirarg = (char **) xrealloc ((char *)dirarg,
d412 1
a412 1
                   current_target) until after initialize_all_files(). */
d429 1
a429 1
                   current_target) until after initialize_all_files(). */
d433 1
a433 1
		   "warning: could not set timeout limit to `%s'.\n", optarg);
d440 1
a440 1
	  ADDITIONAL_OPTION_CASES
d444 2
a445 2
		     "Use `%s --help' for a complete list of options.\n",
		     argv[0]);
d465 1
a465 1
#endif      
d481 2
a482 2
		   "Excess command line arguments ignored. (%s%s)\n",
		   argv[optind], (optind == argc - 1) ? "" : " ...");
d490 1
d494 3
d519 1
a519 1
	 to read a symbol file (possibly slowly).  */
d523 2
a524 2
      wrap_here("");
      gdb_flush (gdb_stdout);		/* Force to screen during slow operations */
d539 2
a540 2
    char * tmp = getenv ("HOME");
    
d543 2
a544 2
        homedir = (char *) alloca (MAX_PATH+1);
        cygwin32_conv_to_posix_path (tmp, homedir);
d550 1
a550 1
  homedir = getenv ("HOME");  
d562 1
a562 2
	  if (!SET_TOP_LEVEL ())
	    source_command (homeinit, 0);
a563 1
      do_cleanups (ALL_CLEANUPS);
d566 4
a569 4
	 need them if homedir is set.  Make sure that they are
	 zero in case one of them fails (this guarantees that they
	 won't match if either exists).  */
      
d572 1
a572 1
      
d574 2
a575 2
      stat (gdbinit, &cwdbuf); /* We'll only need this if
				       homedir was set.  */
d581 1
a581 4
      if (!SET_TOP_LEVEL ())
	{
	  cd_command (cdarg, 0);
	}
a582 1
  do_cleanups (ALL_CLEANUPS);
d585 2
a586 4
    if (!SET_TOP_LEVEL ())
      directory_command (dirarg[i], 0);
  free ((PTR)dirarg);
  do_cleanups (ALL_CLEANUPS);
d592 5
a596 7
      /* The exec file and the symbol-file are the same.  If we can't open
	 it, better only print one error message.  */
      if (!SET_TOP_LEVEL ())
	{
	  exec_file_command (execarg, !batch);
	  symbol_file_command (symarg, 0);
	}
d601 1
a601 2
	if (!SET_TOP_LEVEL ())
	  exec_file_command (execarg, !batch);
d603 1
a603 2
	if (!SET_TOP_LEVEL ())
	  symbol_file_command (symarg, 0);
a604 1
  do_cleanups (ALL_CLEANUPS);
d617 6
a622 4
      if (!SET_TOP_LEVEL ())
	core_file_command (corearg, !batch);
      else if (isdigit (corearg[0]) && !SET_TOP_LEVEL ())
	attach_command (corearg, !batch);
a623 1
  do_cleanups (ALL_CLEANUPS);
d626 1
a626 3
    if (!SET_TOP_LEVEL ())
      tty_command (ttyarg, !batch);
  do_cleanups (ALL_CLEANUPS);
d639 1
a639 1
  
d644 1
a644 2
	if (!SET_TOP_LEVEL ())
	  source_command (gdbinit, 0);
a645 1
  do_cleanups (ALL_CLEANUPS);
d649 4
a652 1
      if (!SET_TOP_LEVEL ())
d654 4
d661 1
d665 2
d668 1
a668 1
  free ((PTR)cmdarg);
d671 1
a671 1
  init_history();
d713 5
d722 1
a722 1
	  do_cleanups (ALL_CLEANUPS);		/* Do complete cleanup */
d730 1
a730 1
          quit_command ((char *)0, instream == stdin);
d733 19
a751 1

d753 1
a753 1
#endif
d755 8
d765 1
d771 1
a771 2
print_gdb_help (stream)
  GDB_FILE *stream;
d773 1
a773 1
      fputs_unfiltered ("\
d778 4
a781 1
      fputs_unfiltered ("\
d788 1
a788 1
      fputs_unfiltered ("\
d796 5
a800 1
      fputs_unfiltered ("\
d803 3
a805 1
  --nx               Do not read .gdbinit file.\n\
d809 1
a809 1
      fputs_unfiltered ("\
d815 1
a815 1
      fputs_unfiltered ("\
d819 1
a819 1
      fputs_unfiltered ("\
d826 1
a826 1
      fputs_unfiltered (ADDITIONAL_OPTION_HELP, stream);
d828 1
a828 1
      fputs_unfiltered ("\n\
d831 1
a831 1
Report bugs to \"bug-gdb@@prep.ai.mit.edu\".\
a832 76
}


void
init_proc ()
{
}

void
proc_remove_foreign (pid)
     int pid;
{
}

/* All I/O sent to the *_filtered and *_unfiltered functions eventually ends up
   here.  The fputs_unfiltered_hook is primarily used by GUIs to collect all
   output and send it to the GUI, instead of the controlling terminal.  Only
   output to gdb_stdout and gdb_stderr are sent to the hook.  Everything else
   is sent on to fputs to allow file I/O to be handled appropriately.  */

void
fputs_unfiltered (linebuffer, stream)
     const char *linebuffer;
     GDB_FILE *stream;
{
#if defined(TUI)
  extern int tui_owns_terminal;
#endif
  /* If anything (GUI, TUI) wants to capture GDB output, this is
   * the place... the way to do it is to set up 
   * fputs_unfiltered_hook.
   * Our TUI ("gdb -tui") used to hook output, but in the
   * new (XDB style) scheme, we do not do that anymore... - RT
   */
  if (fputs_unfiltered_hook
      && (stream == gdb_stdout
	  || stream == gdb_stderr))
    fputs_unfiltered_hook (linebuffer, stream);
  else
    {
#if defined(TUI)
      if (tui_version && tui_owns_terminal) {
	/* If we get here somehow while updating the TUI (from
	 * within a tuiDo(), then we need to temporarily 
	 * set up the terminal for GDB output. This probably just
	 * happens on error output.
	 */

        if (stream->ts_streamtype == astring) {
           gdb_file_adjust_strbuf(strlen(linebuffer), stream);
           strcat(stream->ts_strbuf, linebuffer);
        } else {
           tuiTermUnsetup(0, (tui_version) ? cmdWin->detail.commandInfo.curch : 0);
           fputs (linebuffer, stream->ts_filestream);
           tuiTermSetup(0);
           if (linebuffer[strlen(linebuffer) - 1] == '\n')
              tuiClearCommandCharCount();
           else
              tuiIncrCommandCharCountBy(strlen(linebuffer));
        }
      } else {
        /* The normal case - just do a fputs() */
        if (stream->ts_streamtype == astring) {
           gdb_file_adjust_strbuf(strlen(linebuffer), stream);
           strcat(stream->ts_strbuf, linebuffer);
        } else fputs (linebuffer, stream->ts_filestream);
      }
 

#else
      if (stream->ts_streamtype == astring) {
           gdb_file_adjust_strbuf(strlen(linebuffer), stream);
           strcat(stream->ts_strbuf, linebuffer);
        } else fputs (linebuffer, stream->ts_filestream);
#endif
    }
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d22 1
a26 3
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@a573 4
	  /* NOTE: I am commenting this out, because it is not clear
	     where this feature is used. It is very old and
	     undocumented. ezannoni: 5/4/99*/
#if 0
a576 1
#endif
@


1.1.1.4
log
@import gdb-1999-05-10
@
text
@d38 13
a58 6
/* Whether this is the async version or not.  The async version is
invoked on the command line with the -nw --async options.  In this
version, the usual command_loop is substituted by and event loop which
processes UI events asynchronously. */
int async = 0;

d188 1
a188 2
       {
        {"async", no_argument, &async, 1},  
a399 4
  /* Get ready to invoke the event loop instead of the
     command_loop. See event-loop.h for more details.*/
  if (async)
    async_hook = setup_event_loop;
a626 6
  /* Call the event loop, if gdb was invoked with the --async
     option. Control will never get back to this file, if the event
     loop is invoked. See the files event-*.[ch] for details. */
  if (async_hook)
    async_hook();
                
@


1.1.1.5
log
@import gdb-1999-05-25 snapshot
@
text
@a22 1
#include "event-loop.h"
d68 1
d574 1
a574 1
	     undocumented. ezannoni: 1999-05-04*/
d718 11
@


1.1.1.6
log
@import gdb-1999-06-01 snapshot
@
text
@d160 13
a172 8
#if 0
  /* not yet */
  gdb_stdout = stdio_fileopen (stdout);
  gdb_stderr = stdio_fileopen (stderr);
#else
  gdb_stdout = tui_fileopen (stdout);
  gdb_stderr = tui_fileopen (stderr);
#endif
d718 5
a722 8
/* All TUI I/O sent to the *_filtered and *_unfiltered functions
   eventually ends up here.  The fputs_unfiltered_hook is primarily
   used by GUIs to collect all output and send it to the GUI, instead
   of the controlling terminal.  Only output to gdb_stdout and
   gdb_stderr are sent to the hook.  Everything else is sent on to
   fputs to allow file I/O to be handled appropriately.  */

/* FIXME: Should be broken up and moved to a TUI specific file. */
d725 1
a725 1
tui_file_fputs (linebuffer, file)
d727 1
a727 1
     GDB_FILE *file;
a728 1
  struct tui_stream *stream = gdb_file_data (file);
d739 3
a741 3
      && (file == gdb_stdout
	  || file == gdb_stderr))
    fputs_unfiltered_hook (linebuffer, file);
d775 1
a775 1
           gdb_file_adjust_strbuf(strlen(linebuffer), file);
@


1.1.1.7
log
@import gdb-1999-06-14 snapshot
@
text
@d51 1
a51 1
int async_p = 0;
a63 1
GDB_FILE *gdb_stdlog;
a163 1
  gdb_stdlog = gdb_stderr; /* for moment */
a166 1
  gdb_stdlog = gdb_stdout; /* for moment */
d177 1
a177 2
        {"async", no_argument, &async_p, 1},  
        {"noasync", no_argument, &async_p, 0},  
d391 2
a392 2
  if (async_p)
    command_loop_hook = start_event_loop;
a393 1
  /* Should this be moved to tui-top.c:_initialize_tui()? */
a396 3

  /* Initialize all files.  Give the interpreter a chance to take
     control of the console via the init_ui_hook()) */
d620 6
d645 1
a662 3
", stream);
       fputs_unfiltered ("\
  --[no]async        Enable (disable) asynchronous version of CLI\n\
@


1.1.1.8
log
@import gdb-1999-06-21 snapshot
@
text
@d23 1
a37 1
#include "event-loop.h"
@


1.1.1.9
log
@import gdb-1999-06-28 snapshot
@
text
@d2 1
a2 1
   Copyright 1986, 87, 88, 89, 90, 91, 92, 93, 94, 95, 1999
d51 1
a51 1
int async_p = 1;
d393 4
@


1.1.1.10
log
@import gdb-1999-07-05 snapshot
@
text
@a64 1
GDB_FILE *gdb_stdtarg;
a165 1
  gdb_stdtarg = gdb_stderr; /* for moment */
a169 1
  gdb_stdtarg = gdb_stderr; /* for moment */
@


1.1.1.11
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d48 3
a50 3
   invoked on the command line with the -nw --async options.  In this
   version, the usual command_loop is substituted by and event loop which
   processes UI events asynchronously. */
d76 1
a76 1
extern char *external_editor_command;
d79 2
a80 2
#include <windows.h>		/* for MAX_PATH */
#include <sys/cygwin.h>		/* for cygwin32_conv_to_posix_path */
d116 1
a116 1

d143 3
a145 4
  if (SET_TOP_LEVEL ())
    {
      exit (1);
    }
d166 2
a167 2
  gdb_stdlog = gdb_stderr;	/* for moment */
  gdb_stdtarg = gdb_stderr;	/* for moment */
d171 2
a172 2
  gdb_stdlog = gdb_stdout;	/* for moment */
  gdb_stdtarg = gdb_stderr;	/* for moment */
d182 3
a184 3
    {
      {"async", no_argument, &async_p, 1},
      {"noasync", no_argument, &async_p, 0},
d186 1
a186 1
      {"tui", no_argument, &tui_version, 1},
d188 43
a230 43
      {"xdb", no_argument, &xdb_commands, 1},
      {"dbx", no_argument, &dbx_commands, 1},
      {"readnow", no_argument, &readnow_symbol_files, 1},
      {"r", no_argument, &readnow_symbol_files, 1},
      {"mapped", no_argument, &mapped_symbol_files, 1},
      {"m", no_argument, &mapped_symbol_files, 1},
      {"quiet", no_argument, &quiet, 1},
      {"q", no_argument, &quiet, 1},
      {"silent", no_argument, &quiet, 1},
      {"nx", no_argument, &inhibit_gdbinit, 1},
      {"n", no_argument, &inhibit_gdbinit, 1},
      {"batch", no_argument, &batch, 1},
      {"epoch", no_argument, &epoch_interface, 1},

    /* This is a synonym for "--annotate=1".  --annotate is now preferred,
       but keep this here for a long time because people will be running
       emacses which use --fullname.  */
      {"fullname", no_argument, 0, 'f'},
      {"f", no_argument, 0, 'f'},

      {"annotate", required_argument, 0, 12},
      {"help", no_argument, &print_help, 1},
      {"se", required_argument, 0, 10},
      {"symbols", required_argument, 0, 's'},
      {"s", required_argument, 0, 's'},
      {"exec", required_argument, 0, 'e'},
      {"e", required_argument, 0, 'e'},
      {"core", required_argument, 0, 'c'},
      {"c", required_argument, 0, 'c'},
      {"command", required_argument, 0, 'x'},
      {"version", no_argument, &print_version, 1},
      {"x", required_argument, 0, 'x'},
      {"directory", required_argument, 0, 'd'},
      {"cd", required_argument, 0, 11},
      {"tty", required_argument, 0, 't'},
      {"baud", required_argument, 0, 'b'},
      {"b", required_argument, 0, 'b'},
      {"nw", no_argument, &use_windows, 0},
      {"nowindows", no_argument, &use_windows, 0},
      {"w", no_argument, &use_windows, 1},
      {"windows", no_argument, &use_windows, 1},
      {"statistics", no_argument, 0, 13},
      {"write", no_argument, &write_files, 1},
d233 1
a233 1
      ADDITIONAL_OPTIONS
d235 2
a236 2
      {0, no_argument, 0, 0}
    };
d291 1
a291 1
		cmdarg = (char **) xrealloc ((char *) cmdarg,
d300 1
a300 1
		dirarg = (char **) xrealloc ((char *) dirarg,
d319 1
a319 1
		   current_target) until after initialize_all_files(). */
d336 1
a336 1
		   current_target) until after initialize_all_files(). */
d340 1
a340 1
		 "warning: could not set timeout limit to `%s'.\n", optarg);
d347 1
a347 1
	    ADDITIONAL_OPTION_CASES
d351 2
a352 2
			"Use `%s --help' for a complete list of options.\n",
				argv[0]);
d372 1
a372 1
#endif
d388 2
a389 2
			  "Excess command line arguments ignored. (%s%s)\n",
			  argv[optind], (optind == argc - 1) ? "" : " ...");
d426 1
a426 1
         to read a symbol file (possibly slowly).  */
d430 2
a431 2
      wrap_here ("");
      gdb_flush (gdb_stdout);	/* Force to screen during slow operations */
d446 2
a447 2
    char *tmp = getenv ("HOME");

d450 2
a451 2
	homedir = (char *) alloca (MAX_PATH + 1);
	cygwin32_conv_to_posix_path (tmp, homedir);
d457 1
a457 1
  homedir = getenv ("HOME");
d475 4
a478 4
         need them if homedir is set.  Make sure that they are
         zero in case one of them fails (this guarantees that they
         won't match if either exists).  */

d481 1
a481 1

d483 2
a484 2
      stat (gdbinit, &cwdbuf);	/* We'll only need this if
				   homedir was set.  */
d500 1
a500 1
  free ((PTR) dirarg);
d508 1
a508 1
         it, better only print one error message.  */
d560 1
a560 1

d576 1
a576 1
	     undocumented. ezannoni: 1999-05-04 */
d586 1
a586 1
  free ((PTR) cmdarg);
d589 1
a589 1
  init_history ();
d635 1
a635 1
	  do_cleanups (ALL_CLEANUPS);	/* Do complete cleanup */
d643 1
a643 1
	  quit_command ((char *) 0, instream == stdin);
d657 1
a657 1
     GDB_FILE *stream;
d659 1
a659 1
  fputs_unfiltered ("\
d664 1
a664 1
  fputs_unfiltered ("\
d667 1
a667 1
  fputs_unfiltered ("\
d674 1
a674 1
  fputs_unfiltered ("\
d682 1
a682 1
  fputs_unfiltered ("\
d689 1
a689 1
  fputs_unfiltered ("\
d695 1
a695 1
  fputs_unfiltered ("\
d699 1
a699 1
  fputs_unfiltered ("\
d706 1
a706 1
  fputs_unfiltered (ADDITIONAL_OPTION_HELP, stream);
d708 1
a708 1
  fputs_unfiltered ("\n\
d714 1
a715 1

d747 27
a773 36
      if (tui_version && tui_owns_terminal)
	{
	  /* If we get here somehow while updating the TUI (from
	   * within a tuiDo(), then we need to temporarily 
	   * set up the terminal for GDB output. This probably just
	   * happens on error output.
	   */

	  if (stream->ts_streamtype == astring)
	    {
	      gdb_file_adjust_strbuf (strlen (linebuffer), stream);
	      strcat (stream->ts_strbuf, linebuffer);
	    }
	  else
	    {
	      tuiTermUnsetup (0, (tui_version) ? cmdWin->detail.commandInfo.curch : 0);
	      fputs (linebuffer, stream->ts_filestream);
	      tuiTermSetup (0);
	      if (linebuffer[strlen (linebuffer) - 1] == '\n')
		tuiClearCommandCharCount ();
	      else
		tuiIncrCommandCharCountBy (strlen (linebuffer));
	    }
	}
      else
	{
	  /* The normal case - just do a fputs() */
	  if (stream->ts_streamtype == astring)
	    {
	      gdb_file_adjust_strbuf (strlen (linebuffer), stream);
	      strcat (stream->ts_strbuf, linebuffer);
	    }
	  else
	    fputs (linebuffer, stream->ts_filestream);
	}

d776 4
a779 7
      if (stream->ts_streamtype == astring)
	{
	  gdb_file_adjust_strbuf (strlen (linebuffer), file);
	  strcat (stream->ts_strbuf, linebuffer);
	}
      else
	fputs (linebuffer, stream->ts_filestream);
@


1.1.1.12
log
@import gdb-1999-08-09 snapshot
@
text
@d687 1
a687 3
  --nx               Do not read ", stream);
  fputs_unfiltered (gdbinit, stream);
  fputs_unfiltered (" file.\n\
@


1.1.1.13
log
@import gdb-1999-08-30 snapshot
@
text
@d27 3
d717 81
@


1.1.1.14
log
@import gdb-1999-09-08 snapshot
@
text
@d122 2
@


1.1.1.15
log
@import gdb-1999-09-28 snapshot
@
text
@d49 1
a49 1
int event_loop_p = 1;
d180 2
a181 2
      {"async", no_argument, &event_loop_p, 1},
      {"noasync", no_argument, &event_loop_p, 0},
@


1.1.1.16
log
@import gdb-1999-10-04 snapshot
@
text
@a64 4
/* Used to initialize error() - defined in utils.c */

extern void error_init (void);

a170 3

  /* initialize error() */
  error_init ();
@


1.1.1.17
log
@import gdb-1999-10-11 snapshot
@
text
@d717 1
a717 1
Report bugs to \"bug-gdb@@gnu.org\".\
@


1.1.1.18
log
@import gdb-1999-11-08 snapshot
@
text
@d85 4
a88 34
/* Call command_loop.  If it happens to return, pass that through as a
   non-zero return status. */

static int
captured_command_loop (void *data)
{
  if (command_loop_hook == NULL)
    command_loop ();
  else
    command_loop_hook ();
  /* FIXME: cagney/1999-11-05: A correct command_loop() implementaton
     would clean things up (restoring the cleanup chain) to the state
     they were just prior to the call.  Technically, this means that
     the do_cleanups() below is redundant.  Unfortunatly, many FUNC's
     are not that well behaved.  do_cleanups should either be replaced
     with a do_cleanups call (to cover the problem) or an assertion
     check to detect bad FUNCs code. */
  do_cleanups (ALL_CLEANUPS);
  /* If the command_loop returned, normally (rather than threw an
     error) we try to quit. If the quit is aborted, catch_errors()
     which called this catch the signal and restart the command
     loop. */
  quit_command (NULL, instream == stdin);
  return 1;
}

struct captured_main_args
  {
    int argc;
    char **argv;
  };

static int
captured_main (void *data)
a89 3
  struct captured_main_args *context = data;
  int argc = context->argc;
  char **argv = context->argv;
d142 6
d473 2
a474 1
	  catch_command_errors (source_command, homeinit, 0, RETURN_MASK_ALL);
d476 1
d494 4
a497 1
      catch_command_errors (cd_command, cdarg, 0, RETURN_MASK_ALL);
d499 1
d502 2
a503 1
    catch_command_errors (directory_command, dirarg[i], 0, RETURN_MASK_ALL);
d505 1
d511 7
a517 5
      /* The exec file and the symbol-file are the same.  If we can't
         open it, better only print one error message.
         catch_command_errors returns non-zero on success! */
      if (catch_command_errors (exec_file_command, execarg, !batch, RETURN_MASK_ALL))
	catch_command_errors (symbol_file_command, symarg, 0, RETURN_MASK_ALL);
d522 2
a523 1
	catch_command_errors (exec_file_command, execarg, !batch, RETURN_MASK_ALL);
d525 2
a526 1
	catch_command_errors (symbol_file_command, symarg, 0, RETURN_MASK_ALL);
d528 1
d541 4
a544 6
      if (catch_command_errors (core_file_command, corearg, !batch, RETURN_MASK_ALL) == 0)
	{
	  /* See if the core file is really a PID. */
	  if (isdigit (corearg[0]))
	    catch_command_errors (attach_command, corearg, !batch, RETURN_MASK_ALL);
	}
d546 1
d549 3
a551 1
    catch_command_errors (tty_command, ttyarg, !batch, RETURN_MASK_ALL);
d569 2
a570 1
	catch_command_errors (source_command, gdbinit, 0, RETURN_MASK_ALL);
d572 1
d576 1
a576 4
#if 0
      /* NOTE: cagney/1999-11-03: SET_TOP_LEVEL() was a macro that
         expanded into a call to setjmp().  */
      if (!SET_TOP_LEVEL ()) /* NB: This is #if 0'd out */
a588 2
#endif
      catch_command_errors (source_command, cmdarg[i], !batch, RETURN_MASK_ALL);
a634 5
  /* GUIs generally have their own command loop, mainloop, or
     whatever.  This is a good place to gain control because many
     error conditions will end up here via longjmp(). */
#if 0
  /* FIXME: cagney/1999-11-06: The original main loop was like: */
d650 1
a650 18
  /* NOTE: If the command_loop() returned normally, the loop would
     attempt to exit by calling the function quit_command().  That
     function would either call exit() or throw an error returning
     control to SET_TOP_LEVEL. */
  /* NOTE: The function do_cleanups() was called once each time round
     the loop.  The usefulness of the call isn't clear.  If an error
     was thrown, everything would have already been cleaned up.  If
     command_loop() returned normally and quit_command() was called,
     either exit() or error() (again cleaning up) would be called. */
#endif
  /* NOTE: cagney/1999-11-07: There is probably no reason for not
     moving this loop and the code found in captured_command_loop()
     into the command_loop() proper.  The main thing holding back that
     change - SET_TOP_LEVEL() - has been eliminated. */
  while (1)
    {
      catch_errors (captured_command_loop, 0, "", RETURN_MASK_ALL);
    }
a651 2
  /* No exit -- exit is through quit_command.  */
}
a652 9
int
main (int argc, char **argv)
{
  int top_level_val;
  struct captured_main_args args;
  args.argc = argc;
  args.argv = argv;
  catch_errors (captured_main, &args, "", RETURN_MASK_ALL);
  return 0;
a653 1

@


1.1.1.19
log
@import gdb-1999-12-13 snapshot
@
text
@a251 1
      {"d", required_argument, 0, 'd'},
d696 1
@


1.1.1.20
log
@import gdb-2000-01-31 snapshot
@
text
@a35 5
#if defined (TUI) || defined (GDBTK)
/* FIXME: cagney/2000-01-31: This #include is to allow older code such
   as that found in the TUI to continue to build. */
#include "tui/tui-file.h"
#endif
d190 7
a196 4
#if defined (TUI) || defined (GDBTK)
  /* Older code uses the tui_file and fputs_unfiltered_hook().  It
     should be using a customized GDB_FILE object and re-initializing
     within its own _initialize function.  */
a199 5
  gdb_stdtarg = gdb_stderr;	/* for moment */
#else
  gdb_stdout = stdio_fileopen (stdout);
  gdb_stderr = stdio_fileopen (stderr);
  gdb_stdlog = gdb_stderr;	/* for moment */
@


1.1.1.21
log
@import gdb-2000-02-01 snapshot
@
text
@d2 2
a3 1
   Copyright 1986-1995, 1999-2000 Free Software Foundation, Inc.
d65 4
a68 4
struct ui_file *gdb_stdout;
struct ui_file *gdb_stderr;
struct ui_file *gdb_stdlog;
struct ui_file *gdb_stdtarg;
d77 1
a77 1
static void print_gdb_help (struct ui_file *);
d197 1
a197 1
     should be using a customized UI_FILE object and re-initializing
d717 2
a718 1
print_gdb_help (struct ui_file *stream)
@


1.1.1.22
log
@import gdb-2000-02-02 snapshot
@
text
@a34 1
#include "ui-out.h"
a256 3
      {"ui", required_argument, 0, 'i'},
      {"interpreter", required_argument, 0, 'i'},
      {"i", required_argument, 0, 'i'},
a739 4
", stream);
  fputs_unfiltered ("\
  --interpreter=INTERP\n\
                     Select a specific interpreter / user interface\n\
@


1.1.1.23
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@a257 5
#ifdef GDBTK
      {"tclcommand", required_argument, 0, 'z'},
      {"enable-external-editor", no_argument, 0, 'y'},
      {"editor-command", required_argument, 0, 'w'},
#endif
a336 34
#ifdef GDBTK
	  case 'z':
	    {
	      extern int gdbtk_test PARAMS ((char *));
	      if (!gdbtk_test (optarg))
		{
		  fprintf_unfiltered (gdb_stderr, "%s: unable to load tclcommand file \"%s\"",
				      argv[0], optarg);
		  exit (1);
		}
	      break;
	    }
	  case 'y':
	    {
	      /*
	       * This enables the edit/button in the main window, even
	       * when IDE_ENABLED is set to false. In this case you must
	       * use --tclcommand to specify a tcl/script to be called,
	       * Tcl/Variable to store the edit/command is:
	       * external_editor
	       */
	      enable_external_editor = 1;
	      break;
	    }
	  case 'w':
	    {
	      /*
	       * if editor command is enabled, both flags are set
	       */
	      enable_external_editor = 1;
	      external_editor_command = xstrdup (optarg);
	      break;
	    }
#endif /* GDBTK */
@


