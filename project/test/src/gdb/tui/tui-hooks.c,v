head	1.51;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.51
	gdb_7_6-2013-04-26-release:1.51
	gdb_7_6-branch:1.51.0.2
	gdb_7_6-2013-03-12-branchpoint:1.51
	gdb_7_5_1-2012-11-29-release:1.48
	gdb_7_5-2012-08-17-release:1.48
	gdb_7_5-branch:1.48.0.2
	gdb_7_5-2012-07-18-branchpoint:1.48
	gdb_7_4_1-2012-04-26-release:1.46.2.1
	gdb_7_4-2012-01-24-release:1.46.2.1
	gdb_7_4-branch:1.46.0.2
	gdb_7_4-2011-12-13-branchpoint:1.46
	gdb_7_3_1-2011-09-04-release:1.45
	gdb_7_3-2011-07-26-release:1.45
	gdb_7_3-branch:1.45.0.2
	gdb_7_3-2011-04-01-branchpoint:1.45
	gdb_7_2-2010-09-02-release:1.42
	gdb_7_2-branch:1.42.0.2
	gdb_7_2-2010-07-07-branchpoint:1.42
	gdb_7_1-2010-03-18-release:1.41
	gdb_7_1-branch:1.41.0.2
	gdb_7_1-2010-02-18-branchpoint:1.41
	gdb_7_0_1-2009-12-22-release:1.40
	gdb_7_0-2009-10-06-release:1.40
	gdb_7_0-branch:1.40.0.4
	gdb_7_0-2009-09-16-branchpoint:1.40
	arc-sim-20090309:1.37
	msnyder-checkpoint-072509-branch:1.40.0.2
	msnyder-checkpoint-072509-branchpoint:1.40
	arc-insight_6_8-branch:1.37.0.10
	arc-insight_6_8-branchpoint:1.37
	insight_6_8-branch:1.37.0.8
	insight_6_8-branchpoint:1.37
	reverse-20081226-branch:1.38.0.6
	reverse-20081226-branchpoint:1.38
	multiprocess-20081120-branch:1.38.0.4
	multiprocess-20081120-branchpoint:1.38
	reverse-20080930-branch:1.38.0.2
	reverse-20080930-branchpoint:1.38
	reverse-20080717-branch:1.37.0.6
	reverse-20080717-branchpoint:1.37
	msnyder-reverse-20080609-branch:1.37.0.4
	msnyder-reverse-20080609-branchpoint:1.37
	drow-reverse-20070409-branch:1.31.0.2
	drow-reverse-20070409-branchpoint:1.31
	gdb_6_8-2008-03-27-release:1.37
	gdb_6_8-branch:1.37.0.2
	gdb_6_8-2008-02-26-branchpoint:1.37
	gdb_6_7_1-2007-10-29-release:1.36
	gdb_6_7-2007-10-10-release:1.36
	gdb_6_7-branch:1.36.0.2
	gdb_6_7-2007-09-07-branchpoint:1.36
	insight_6_6-20070208-release:1.27
	gdb_6_6-2006-12-18-release:1.27
	gdb_6_6-branch:1.27.0.12
	gdb_6_6-2006-11-15-branchpoint:1.27
	insight_6_5-20061003-release:1.27
	gdb-csl-symbian-6_4_50_20060226-12:1.26
	gdb-csl-sourcerygxx-3_4_4-25:1.25
	nickrob-async-20060828-mergepoint:1.27
	gdb-csl-symbian-6_4_50_20060226-11:1.26
	gdb-csl-sourcerygxx-4_1-17:1.26
	gdb-csl-20060226-branch-local-2:1.26
	gdb-csl-sourcerygxx-4_1-14:1.26
	gdb-csl-sourcerygxx-4_1-13:1.26
	gdb-csl-sourcerygxx-4_1-12:1.26
	gdb-csl-sourcerygxx-3_4_4-21:1.26
	gdb_6_5-20060621-release:1.27
	gdb-csl-sourcerygxx-4_1-9:1.26
	gdb-csl-sourcerygxx-4_1-8:1.26
	gdb-csl-sourcerygxx-4_1-7:1.26
	gdb-csl-arm-2006q1-6:1.26
	gdb-csl-sourcerygxx-4_1-6:1.26
	gdb-csl-symbian-6_4_50_20060226-10:1.26
	gdb-csl-symbian-6_4_50_20060226-9:1.26
	gdb-csl-symbian-6_4_50_20060226-8:1.26
	gdb-csl-coldfire-4_1-11:1.26
	gdb-csl-sourcerygxx-3_4_4-19:1.26
	gdb-csl-coldfire-4_1-10:1.26
	gdb_6_5-branch:1.27.0.10
	gdb_6_5-2006-05-14-branchpoint:1.27
	gdb-csl-sourcerygxx-4_1-5:1.26
	nickrob-async-20060513-branch:1.27.0.8
	nickrob-async-20060513-branchpoint:1.27
	gdb-csl-sourcerygxx-4_1-4:1.26
	msnyder-reverse-20060502-branch:1.27.0.6
	msnyder-reverse-20060502-branchpoint:1.27
	gdb-csl-morpho-4_1-4:1.26
	gdb-csl-sourcerygxx-3_4_4-17:1.26
	readline_5_1-import-branch:1.27.0.4
	readline_5_1-import-branchpoint:1.27
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.26
	gdb-csl-symbian-20060226-branch:1.26.0.6
	gdb-csl-symbian-20060226-branchpoint:1.26
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.26
	msnyder-reverse-20060331-branch:1.27.0.2
	msnyder-reverse-20060331-branchpoint:1.27
	gdb-csl-available-20060303-branch:1.26.0.4
	gdb-csl-available-20060303-branchpoint:1.26
	gdb-csl-20060226-branch:1.26.0.2
	gdb-csl-20060226-branchpoint:1.26
	gdb_6_4-20051202-release:1.25
	msnyder-fork-checkpoint-branch:1.25.0.8
	msnyder-fork-checkpoint-branchpoint:1.25
	gdb-csl-gxxpro-6_3-branch:1.25.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.25
	gdb_6_4-branch:1.25.0.4
	gdb_6_4-2005-11-01-branchpoint:1.25
	gdb-csl-arm-20051020-branch:1.25.0.2
	gdb-csl-arm-20051020-branchpoint:1.25
	msnyder-tracepoint-checkpoint-branch:1.24.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.24
	gdb-csl-arm-20050325-2005-q1b:1.24
	gdb-csl-arm-20050325-2005-q1a:1.24
	csl-arm-20050325-branch:1.24.0.2
	csl-arm-20050325-branchpoint:1.24
	gdb-post-i18n-errorwarning-20050211:1.23
	gdb-pre-i18n-errorwarning-20050211:1.23
	gdb_6_3-20041109-release:1.23
	gdb_6_3-branch:1.23.0.4
	gdb_6_3-20041019-branchpoint:1.23
	drow_intercu-merge-20040921:1.23
	drow_intercu-merge-20040915:1.23
	jimb-gdb_6_2-e500-branch:1.23.0.6
	jimb-gdb_6_2-e500-branchpoint:1.23
	gdb_6_2-20040730-release:1.23
	gdb_6_2-branch:1.23.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.23
	gdb_6_1_1-20040616-release:1.20
	gdb_6_1-2004-04-05-release:1.20
	drow_intercu-merge-20040402:1.20
	drow_intercu-merge-20040327:1.20
	ezannoni_pie-20040323-branch:1.20.0.6
	ezannoni_pie-20040323-branchpoint:1.20
	cagney_tramp-20040321-mergepoint:1.20
	cagney_tramp-20040309-branch:1.20.0.4
	cagney_tramp-20040309-branchpoint:1.20
	gdb_6_1-branch:1.20.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.20
	drow_intercu-20040221-branch:1.19.0.4
	drow_intercu-20040221-branchpoint:1.19
	cagney_bfdfile-20040213-branch:1.19.0.2
	cagney_bfdfile-20040213-branchpoint:1.19
	drow-cplus-merge-20040208:1.17
	carlton_dictionary-20040126-merge:1.15
	cagney_bigcore-20040122-branch:1.15.0.2
	cagney_bigcore-20040122-branchpoint:1.15
	drow-cplus-merge-20040113:1.14
	drow-cplus-merge-20031224:1.14
	drow-cplus-merge-20031220:1.14
	carlton_dictionary-20031215-merge:1.14
	drow-cplus-merge-20031214:1.14
	carlton-dictionary-20031111-merge:1.14
	gdb_6_0-2003-10-04-release:1.14
	kettenis_sparc-20030918-branch:1.14.0.8
	kettenis_sparc-20030918-branchpoint:1.14
	carlton_dictionary-20030917-merge:1.14
	ezannoni_pie-20030916-branchpoint:1.14
	ezannoni_pie-20030916-branch:1.14.0.6
	cagney_x86i386-20030821-branch:1.14.0.4
	cagney_x86i386-20030821-branchpoint:1.14
	carlton_dictionary-20030805-merge:1.14
	carlton_dictionary-20030627-merge:1.14
	gdb_6_0-branch:1.14.0.2
	gdb_6_0-2003-06-23-branchpoint:1.14
	jimb-ppc64-linux-20030613-branch:1.13.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.13
	cagney_convert-20030606-branch:1.12.0.26
	cagney_convert-20030606-branchpoint:1.12
	cagney_writestrings-20030508-branch:1.12.0.24
	cagney_writestrings-20030508-branchpoint:1.12
	jimb-ppc64-linux-20030528-branch:1.12.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.12
	carlton_dictionary-20030523-merge:1.12
	cagney_fileio-20030521-branch:1.12.0.20
	cagney_fileio-20030521-branchpoint:1.12
	kettenis_i386newframe-20030517-mergepoint:1.12
	jimb-ppc64-linux-20030509-branch:1.12.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.12
	kettenis_i386newframe-20030504-mergepoint:1.12
	carlton_dictionary-20030430-merge:1.12
	kettenis_i386newframe-20030419-branch:1.12.0.16
	kettenis_i386newframe-20030419-branchpoint:1.12
	carlton_dictionary-20030416-merge:1.12
	cagney_frameaddr-20030409-mergepoint:1.12
	kettenis_i386newframe-20030406-branch:1.12.0.14
	kettenis_i386newframe-20030406-branchpoint:1.12
	cagney_frameaddr-20030403-branchpoint:1.12
	cagney_frameaddr-20030403-branch:1.12.0.12
	cagney_framebase-20030330-mergepoint:1.12
	cagney_framebase-20030326-branch:1.12.0.10
	cagney_framebase-20030326-branchpoint:1.12
	cagney_lazyid-20030317-branch:1.12.0.8
	cagney_lazyid-20030317-branchpoint:1.12
	kettenis-i386newframe-20030316-mergepoint:1.12
	offbyone-20030313-branch:1.12.0.6
	offbyone-20030313-branchpoint:1.12
	kettenis-i386newframe-20030308-branch:1.12.0.4
	kettenis-i386newframe-20030308-branchpoint:1.12
	carlton_dictionary-20030305-merge:1.12
	cagney_offbyone-20030303-branch:1.12.0.2
	cagney_offbyone-20030303-branchpoint:1.12
	carlton_dictionary-20030207-merge:1.11
	interps-20030203-mergepoint:1.11
	interps-20030202-branch:1.11.0.4
	interps-20030202-branchpoint:1.11
	cagney-unwind-20030108-branch:1.11.0.2
	cagney-unwind-20030108-branchpoint:1.11
	carlton_dictionary-20021223-merge:1.11
	gdb_5_3-2002-12-12-release:1.7.2.2
	carlton_dictionary-20021115-merge:1.9
	kseitz_interps-20021105-merge:1.9
	kseitz_interps-20021103-merge:1.9
	drow-cplus-merge-20021020:1.9
	drow-cplus-merge-20021025:1.9
	carlton_dictionary-20021025-merge:1.9
	carlton_dictionary-20021011-merge:1.9
	drow-cplus-branch:1.9.0.2
	drow-cplus-branchpoint:1.9
	kseitz_interps-20020930-merge:1.8
	carlton_dictionary-20020927-merge:1.8
	carlton_dictionary-branch:1.8.0.2
	carlton_dictionary-20020920-branchpoint:1.8
	gdb_5_3-branch:1.7.0.2
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.2
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.3.0.10
	readline_4_3-import-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	kseitz_interps-20020528-branch:1.3.0.8
	kseitz_interps-20020528-branchpoint:1.3
	cagney_regbuf-20020515-branch:1.3.0.6
	cagney_regbuf-20020515-branchpoint:1.3
	jimb-macro-020506-branch:1.3.0.4
	jimb-macro-020506-branchpoint:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.1
	gdb_5_1_0_1-2002-01-03-release:1.1
	cygnus_cvs_20020108_pre:1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1
	gdb_5_1-2001-11-21-release:1.1
	gdb_s390-2001-09-26-branch:1.1.0.4
	gdb_s390-2001-09-26-branchpoint:1.1
	gdb_5_1-2001-07-29-branch:1.1.0.2
	gdb_5_1-2001-07-29-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.51
date	2013.01.01.06.41.30;	author brobecke;	state Exp;
branches;
next	1.50;

1.50
date	2012.11.08.22.54.11;	author ciceron;	state Exp;
branches;
next	1.49;

1.49
date	2012.11.08.06.58.30;	author ciceron;	state Exp;
branches;
next	1.48;

1.48
date	2012.05.24.15.54.57;	author palves;	state Exp;
branches;
next	1.47;

1.47
date	2012.01.04.08.27.58;	author brobecke;	state Exp;
branches;
next	1.46;

1.46
date	2011.04.27.10.17.39;	author vprus;	state Exp;
branches
	1.46.2.1;
next	1.45;

1.45
date	2011.03.18.18.50.20;	author palves;	state Exp;
branches;
next	1.44;

1.44
date	2011.01.06.00.57.05;	author msnyder;	state Exp;
branches;
next	1.43;

1.43
date	2011.01.01.15.33.52;	author brobecke;	state Exp;
branches;
next	1.42;

1.42
date	2010.05.02.21.14.59;	author jkratoch;	state Exp;
branches;
next	1.41;

1.41
date	2010.01.01.07.32.07;	author brobecke;	state Exp;
branches;
next	1.40;

1.40
date	2009.05.21.15.48.42;	author palves;	state Exp;
branches;
next	1.39;

1.39
date	2009.01.03.05.58.08;	author brobecke;	state Exp;
branches;
next	1.38;

1.38
date	2008.07.25.16.12.03;	author tromey;	state Exp;
branches;
next	1.37;

1.37
date	2008.01.01.22.53.22;	author drow;	state Exp;
branches;
next	1.36;

1.36
date	2007.08.23.18.08.50;	author brobecke;	state Exp;
branches;
next	1.35;

1.35
date	2007.08.14.23.50.39;	author msnyder;	state Exp;
branches;
next	1.34;

1.34
date	2007.08.14.21.20.09;	author msnyder;	state Exp;
branches;
next	1.33;

1.33
date	2007.08.14.20.23.29;	author msnyder;	state Exp;
branches;
next	1.32;

1.32
date	2007.05.11.19.55.20;	author uweigand;	state Exp;
branches;
next	1.31;

1.31
date	2007.03.29.18.55.01;	author drow;	state Exp;
branches;
next	1.30;

1.30
date	2007.03.07.10.29.47;	author denis;	state Exp;
branches;
next	1.29;

1.29
date	2007.02.27.19.46.04;	author drow;	state Exp;
branches;
next	1.28;

1.28
date	2007.01.09.17.59.14;	author drow;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.29.22.53.33;	author drow;	state Exp;
branches
	1.27.8.1;
next	1.26;

1.26
date	2005.12.23.19.10.02;	author eliz;	state Exp;
branches;
next	1.25;

1.25
date	2005.07.31.20.56.26;	author drow;	state Exp;
branches;
next	1.24;

1.24
date	2005.02.12.00.39.24;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2004.06.26.20.37.13;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.21.23.52.21;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.09.13.54.34;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.28.18.04.37;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.10.19.08.15;	author cagney;	state Exp;
branches
	1.19.4.1;
next	1.18;

1.18
date	2004.02.08.00.05.16;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.07.00.23.56;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.28.23.16.50;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.19.04.31.50;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.22.15.21.38;	author drow;	state Exp;
branches
	1.14.6.1;
next	1.13;

1.13
date	2003.06.12.15.44.24;	author schwab;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.14.13.58.06;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.29.19.15.16;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.21.21.25.22;	author ciceron;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.02.21.33.59;	author ezannoni;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2002.09.10.19.59.31;	author ciceron;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2002.09.01.12.49.32;	author ciceron;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2002.08.30.20.07.05;	author ciceron;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.25.19.19.50;	author ciceron;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.25.18.42.32;	author ciceron;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.01.06.19.27;	author cagney;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	2002.02.08.15.54.31;	author drow;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.24.20.40.39;	author ciceron;	state Exp;
branches;
next	;

1.46.2.1
date	2012.01.06.04.54.35;	author brobecke;	state Exp;
branches;
next	;

1.27.8.1
date	2006.05.12.07.40.16;	author nickrob;	state Exp;
branches;
next	;

1.19.4.1
date	2004.03.27.17.38.05;	author drow;	state Exp;
branches;
next	1.19.4.2;

1.19.4.2
date	2004.09.16.17.01.47;	author drow;	state Exp;
branches;
next	;

1.14.6.1
date	2004.03.23.20.09.16;	author ezannoni;	state Exp;
branches;
next	;

1.9.2.1
date	2003.12.14.20.27.59;	author drow;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2004.02.09.19.43.56;	author drow;	state Exp;
branches;
next	;

1.8.2.1
date	2002.10.11.22.23.03;	author carlton;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2002.12.23.19.39.21;	author carlton;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2003.03.06.00.56.37;	author carlton;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2003.06.27.21.50.21;	author carlton;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2004.01.26.19.11.45;	author carlton;	state Exp;
branches;
next	;

1.7.2.1
date	2002.09.10.20.00.55;	author ciceron;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2002.11.21.21.25.41;	author ciceron;	state Exp;
branches;
next	;

1.3.8.1
date	2002.08.30.22.52.52;	author kseitz;	state Exp;
branches;
next	1.3.8.2;

1.3.8.2
date	2002.10.01.00.46.34;	author kseitz;	state Exp;
branches;
next	1.3.8.3;

1.3.8.3
date	2002.11.03.22.07.42;	author ezannoni;	state Exp;
branches;
next	;


desc
@@


1.51
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@/* GDB hooks for TUI.

   Copyright (C) 2001-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "symtab.h"
#include "inferior.h"
#include "command.h"
#include "bfd.h"
#include "symfile.h"
#include "objfiles.h"
#include "target.h"
#include "gdbcore.h"
#include "event-loop.h"
#include "event-top.h"
#include "frame.h"
#include "breakpoint.h"
#include "ui-out.h"
#include "top.h"
#include "observer.h"
#include <unistd.h>
#include <fcntl.h>

#include "tui/tui.h"
#include "tui/tui-hooks.h"
#include "tui/tui-data.h"
#include "tui/tui-layout.h"
#include "tui/tui-io.h"
#include "tui/tui-regs.h"
#include "tui/tui-win.h"
#include "tui/tui-stack.h"
#include "tui/tui-windata.h"
#include "tui/tui-winsource.h"

#include "gdb_curses.h"

/* This redefines CTRL if it is not already defined, so it must come
   after terminal state releated include files like <term.h> and
   "gdb_curses.h".  */
#include "readline/readline.h"

int tui_target_has_run = 0;

static void
tui_new_objfile_hook (struct objfile* objfile)
{
  if (tui_active)
    tui_display_main ();
}

static int ATTRIBUTE_PRINTF (1, 0)
tui_query_hook (const char *msg, va_list argp)
{
  int retval;
  int ans2;
  int answer;
  char *question;
  struct cleanup *old_chain;

  /* Format the question outside of the loop, to avoid reusing
     ARGP.  */
  question = xstrvprintf (msg, argp);
  old_chain = make_cleanup (xfree, question);

  echo ();
  while (1)
    {
      wrap_here ("");		/* Flush any buffered output.  */
      gdb_flush (gdb_stdout);

      fputs_filtered (question, gdb_stdout);
      printf_filtered (_("(y or n) "));

      wrap_here ("");
      gdb_flush (gdb_stdout);

      answer = tui_getc (stdin);
      clearerr (stdin);		/* in case of C-d */
      if (answer == EOF)	/* C-d */
	{
	  retval = 1;
	  break;
	}
      /* Eat rest of input line, to EOF or newline.  */
      if (answer != '\n')
	do
	  {
            ans2 = tui_getc (stdin);
	    clearerr (stdin);
	  }
	while (ans2 != EOF && ans2 != '\n' && ans2 != '\r');

      if (answer >= 'a')
	answer -= 040;
      if (answer == 'Y')
	{
	  retval = 1;
	  break;
	}
      if (answer == 'N')
	{
	  retval = 0;
	  break;
	}
      printf_filtered (_("Please answer y or n.\n"));
    }
  noecho ();

  do_cleanups (old_chain);
  return retval;
}

/* Prevent recursion of deprecated_register_changed_hook().  */
static int tui_refreshing_registers = 0;

static void
tui_register_changed_hook (int regno)
{
  struct frame_info *fi;

  fi = get_selected_frame (NULL);
  if (tui_refreshing_registers == 0)
    {
      tui_refreshing_registers = 1;
      tui_check_data_values (fi);
      tui_refreshing_registers = 0;
    }
}

/* Breakpoint creation hook.
   Update the screen to show the new breakpoint.  */
static void
tui_event_create_breakpoint (struct breakpoint *b)
{
  tui_update_all_breakpoint_info ();
}

/* Breakpoint deletion hook.
   Refresh the screen to update the breakpoint marks.  */
static void
tui_event_delete_breakpoint (struct breakpoint *b)
{
  tui_update_all_breakpoint_info ();
}

static void
tui_event_modify_breakpoint (struct breakpoint *b)
{
  tui_update_all_breakpoint_info ();
}

/* Called when a command is about to proceed the inferior.  */

static void
tui_about_to_proceed (void)
{
  /* Leave tui mode (optional).  */
#if 0
  if (tui_active)
    {
      target_terminal_ours ();
      endwin ();
      target_terminal_inferior ();
    }
#endif
  tui_target_has_run = 1;
}

/* The selected frame has changed.  This is happens after a target
   stop or when the user explicitly changes the frame
   (up/down/thread/...).  */
static void
tui_selected_frame_level_changed_hook (int level)
{
  struct frame_info *fi;
  CORE_ADDR pc;

  /* Negative level means that the selected frame was cleared.  */
  if (level < 0)
    return;

  fi = get_selected_frame (NULL);
  /* Ensure that symbols for this frame are read in.  Also, determine
     the source language of this frame, and switch to it if
     desired.  */
  if (get_frame_pc_if_available (fi, &pc))
    {
      struct symtab *s;

      s = find_pc_symtab (pc);
      /* elz: This if here fixes the problem with the pc not being
	 displayed in the tui asm layout, with no debug symbols.  The
	 value of s would be 0 here, and select_source_symtab would
	 abort the command by calling the 'error' function.  */
      if (s)
	select_source_symtab (s);
    }

  /* Display the frame position (even if there is no symbols or the PC
     is not known).  */
  tui_show_frame_info (fi);

  /* Refresh the register window if it's visible.  */
  if (tui_is_window_visible (DATA_WIN))
    {
      tui_refreshing_registers = 1;
      tui_check_data_values (fi);
      tui_refreshing_registers = 0;
    }
}

/* Called from print_frame_info to list the line we stopped in.  */
static void
tui_print_frame_info_listing_hook (struct symtab *s,
				   int line,
                                   int stopline, 
				   int noerror)
{
  select_source_symtab (s);
  tui_show_frame_info (get_selected_frame (NULL));
}

/* Perform all necessary cleanups regarding our module's inferior data
   that is required after the inferior INF just exited.  */

static void
tui_inferior_exit (struct inferior *inf)
{
  /* Leave the SingleKey mode to make sure the gdb prompt is visible.  */
  tui_set_key_mode (TUI_COMMAND_MODE);
  tui_show_frame_info (0);
  tui_display_main ();
}

/* Observers created when installing TUI hooks.  */
static struct observer *tui_bp_created_observer;
static struct observer *tui_bp_deleted_observer;
static struct observer *tui_bp_modified_observer;
static struct observer *tui_inferior_exit_observer;
static struct observer *tui_about_to_proceed_observer;

/* Install the TUI specific hooks.  */
void
tui_install_hooks (void)
{
  deprecated_selected_frame_level_changed_hook
    = tui_selected_frame_level_changed_hook;
  deprecated_print_frame_info_listing_hook
    = tui_print_frame_info_listing_hook;

  deprecated_query_hook = tui_query_hook;

  /* Install the event hooks.  */
  tui_bp_created_observer
    = observer_attach_breakpoint_created (tui_event_create_breakpoint);
  tui_bp_deleted_observer
    = observer_attach_breakpoint_deleted (tui_event_delete_breakpoint);
  tui_bp_modified_observer
    = observer_attach_breakpoint_modified (tui_event_modify_breakpoint);
  tui_inferior_exit_observer
    = observer_attach_inferior_exit (tui_inferior_exit);
  tui_about_to_proceed_observer
    = observer_attach_about_to_proceed (tui_about_to_proceed);

  deprecated_register_changed_hook = tui_register_changed_hook;
}

/* Remove the TUI specific hooks.  */
void
tui_remove_hooks (void)
{
  deprecated_selected_frame_level_changed_hook = 0;
  deprecated_print_frame_info_listing_hook = 0;
  deprecated_query_hook = 0;
  deprecated_register_changed_hook = 0;

  /* Remove our observers.  */
  observer_detach_breakpoint_created (tui_bp_created_observer);
  tui_bp_created_observer = NULL;
  observer_detach_breakpoint_deleted (tui_bp_deleted_observer);
  tui_bp_deleted_observer = NULL;
  observer_detach_breakpoint_modified (tui_bp_modified_observer);
  tui_bp_modified_observer = NULL;
  observer_detach_inferior_exit (tui_inferior_exit_observer);
  tui_inferior_exit_observer = NULL;
  observer_detach_about_to_proceed (tui_about_to_proceed_observer);
  tui_about_to_proceed_observer = NULL;
}

void _initialize_tui_hooks (void);

void
_initialize_tui_hooks (void)
{
  /* Install the permanent hooks.  */
  observer_attach_new_objfile (tui_new_objfile_hook);
}
@


1.50
log
@* tui/tui-hooks.c (tui_about_to_proceed): New function.
  (tui_target_wait_hook): Remove.
  (tui_install_hooks): Install the about_to_proceed observer.
  (tui_remove_hooks): And remove it here.
@
text
@d3 1
a3 1
   Copyright (C) 2001-2012 Free Software Foundation, Inc.
@


1.49
log
@* tui/tui-hooks.c (tui_inferior_exit): New function.
  (tui_detach_hook): Remove.
  (tui_install_hooks): Install the inferior exit observer.
  (tui_remove_hooks): Remove it.
@
text
@d167 4
a170 5
/* Called when going to wait for the target.
   Leave curses mode and setup program mode.  */
static ptid_t
tui_target_wait_hook (ptid_t pid, 
		      struct target_waitstatus *status, int options)
a171 2
  ptid_t res;

a181 7
  res = target_wait (pid, status, options);

  if (tui_active)
    {
      /* TODO: need to refresh (optional).  */
    }
  return res;
d255 1
a260 1
  deprecated_target_wait_hook = tui_target_wait_hook;
d277 2
a286 1
  deprecated_target_wait_hook = 0;
d301 2
@


1.48
log
@2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR tui/14159

	* tui/tui-hooks.c (tui_query_hook): Pre-compute the question
	string, instead of reusing the va_list argument.
@
text
@d248 3
a250 2
/* Called when the target process died or is detached.
   Update the status line.  */
d252 1
a252 1
tui_detach_hook (void)
d254 2
d264 1
d285 2
a288 1
  deprecated_detach_hook = tui_detach_hook;
a299 1
  deprecated_detach_hook = 0;
d308 2
@


1.47
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d72 7
d86 1
a86 1
      vfprintf_filtered (gdb_stdout, msg, argp);
d123 2
@


1.46
log
@	MI breakpoint notifications.

        * annotate.c (breakpoint_changed): Adjust parameter type.
        * breakpoint.c (set_breakpoint_condition): Adjust to change
        in breakpoint_modified type.
        (breakpoint_set_commands): Likewise.
        (do_map_commands_command): Likewise.
        (bpstat_check_breakpoint_conditions): Notify that breakpoint has
        changed after bumping hit count.
        (bpstat_stop_status): Likewise.
        (print_one_breakpoint_location): Don't wrap in tuple here.
        (print_one_breakpoint): Always print individual locations.
        For locations, use unnamed tuple.
        (disable_breakpoints_in_unloaded_shlib): Notify that breakpoint
        has changed.
        (create_catchpoint, create_syscall_event_catchpoint): Call
        breakpoint_created obsever.
        (mention): Don't call breakpoint_created observer.
        (create_breakpoint_sal): Call breakpoint_created observer.
        (create_breakpoint, watch_command_1): Likewise.
        (create_ada_exception_breakpoint): Likewise.
        (delete_breakpoint): Call breakpoint_deleted breakpoint.
        (locations_are_equal): New.
        (update_breakpoint_locations): If locations were changed, notify.
        (set_ignore_count, disable_breakpoint, do_enable_breakpoint):
        Call breakpoint_modified observer.

        * mi/mi-cmd-break.c (breakpoint_notify): Adjust.
        (mi_cmd_break_insert): Don't set observers for modify and delete.
        * mi/mi-interp.c (mi_suppress_breakpoint_notifications): New.
        (mi_breakpoint_created, mi_breakpoint_deleted)
        (mi_breakpoint_modified): New.
        (mi_interpreter_init): Hook the above.
        * mi/mi-main.c (mi_cmd_execute): Disable breakpoint notifications
        while -break-* commands are executing.
        * mi/mi-main.h (mi_suppress_breakpoint_notifications): New.
        * mi/mi-out.c (struct ui_out_data): New field original_buffer.
        (mi_redirect): New.
        (mi_ui_out_impl): Hook in mi_redirect.
        (mi_field_skip): True to the name, skip the field, don't output
        a field with an empty value.

        * python/py-breakpoint.c (gdbpy_breakpoint_created)
        (gdbpy_breakpoint_deleted): Adjust.
        * tui/tui-hooks.c (tui_event_create_breakpoint)
        (tui_event_delete_breakpoint, tui_event_modify_breakpoint): Adjust.
@
text
@d3 1
a3 2
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
   2011 Free Software Foundation, Inc.
@


1.46.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 1
   Copyright (C) 2001-2012 Free Software Foundation, Inc.
@


1.45
log
@	gdb/
	* tui/tui-hooks.c (tui_selected_frame_level_changed_hook): Assume
	there's always a frame.  Use get_frame_pc_if_available instead of
	get_frame_pc, and if there's no PC available, don't look up a
	symtab.
@
text
@d140 1
a140 1
tui_event_create_breakpoint (int number)
d148 1
a148 1
tui_event_delete_breakpoint (int number)
d154 1
a154 1
tui_event_modify_breakpoint (int number)
@


1.44
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* cli/cli-cmds.c: Shorten lines of >= 80 columns.
	* cli/cli-decode.c: Ditto.
	* cli/cli-dump.c: Ditto.
	* cli/cli-logging.c: Ditto.
	* cli/cli-script.c: Ditto.
	* cli/cli-setshow.c: Ditto.
	* common/signals.c: Ditto.
	* mi/mi-cmd-break.c: Ditto.
	* mi/mi-cmd-disas.c: Ditto.
	* mi/mi-cmd-stack.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-cmds.c: Ditto.
	* mi/mi-common.h: Ditto.
	* mi/mi-console.c: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
	* osf-share/cma_attr.c: Ditto.
	* osf-share/cma_deb_core.h: Ditto.
	* osf-share/cma_debug_client.h: Ditto.
	* osf-share/cma_handle.h: Ditto.
	* osf-share/cma_mutex.h: Ditto.
	* osf-share/cma_stack_int.h: Ditto.
	* osf-share/cma_tcb_defs.h: Ditto.
	* python/py-auto-load.c: Ditto.
	* python/py-breakpoint.c: Ditto.
	* python/py-cmd.c: Ditto.
	* python/py-frame.c: Ditto.
	* python/py-objfile.c: Ditto.
	* python/py-param.c: Ditto.
	* python/py-progspace.c: Ditto.
	* python/py-symbol.c: Ditto.
	* python/py-value.c: Ditto.
	* python/python-internal.h: Ditto.
	* python/python.c: Ditto.
	* tui/tui-data.c: Ditto.
	* tui/tui-disasm.c: Ditto.
	* tui/tui-hooks.c: Ditto.
	* tui/tui-io.c: Ditto.
	* tui/tui-layout.c: Ditto.
	* tui/tui-regs.c: Ditto.
	* tui/tui-source.c: Ditto.
	* tui/tui-stack.c: Ditto.
	* tui/tui-win.c: Ditto.
	* tui/tui-windata.c: Ditto.
	* tui/tui-winsource.c: Ditto.
@
text
@d193 1
d203 1
a203 1
  if (fi)
d206 2
a207 2
      
      s = find_pc_symtab (get_frame_pc (fi));
d209 3
a211 3
         displayed in the tui asm layout, with no debug symbols.  The
         value of s would be 0 here, and select_source_symtab would
         abort the command by calling the 'error' function.  */
d213 2
a214 1
        select_source_symtab (s);
d216 3
a218 2
      /* Display the frame position (even if there is no symbols).  */
      tui_show_frame_info (fi);
d220 6
a225 7
      /* Refresh the register window if it's visible.  */
      if (tui_is_window_visible (DATA_WIN))
        {
          tui_refreshing_registers = 1;
          tui_check_data_values (fi);
          tui_refreshing_registers = 0;
        }
@


1.43
log
@run copyright.sh for 2011.
@
text
@d257 4
a260 2
  deprecated_selected_frame_level_changed_hook = tui_selected_frame_level_changed_hook;
  deprecated_print_frame_info_listing_hook = tui_print_frame_info_listing_hook;
@


1.42
log
@gdb/
	* ada-lang.c (lim_warning): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* amd64-tdep.c (amd64_insn_length_fprintf): Likewise.
	* cli-out.c (cli_field_fmt): New ATTRIBUTE_PRINTF.
	(cli_message, out_field_fmt): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* complaints.c (find_complaint): New ATTRIBUTE_PRINTF.
	(vcomplaint): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* complaints.h (complaint, internal_complaint): Likewise.
	* defs.h: Change ATTR_FORMAT to ATTRIBUTE_PRINTF in the top comment.
	(ATTR_FORMAT): Remove.
	(query, nquery, yquery, vprintf_filtered, vfprintf_filtered)
	(fprintf_filtered, fprintfi_filtered, printf_filtered, printfi_filtered)
	(vprintf_unfiltered, vfprintf_unfiltered, fprintf_unfiltered)
	(printf_unfiltered, xasprintf, xvasprintf, xstrprintf, xstrvprintf)
	(xsnprintf, verror, error, vfatal, fatal, internal_verror)
	(internal_error, internal_vwarning, internal_warning, warning)
	(vwarning): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* disasm.c (fprintf_disasm): Likewise.
	* exceptions.c (throw_it): Likewise.
	* exceptions.h (exception_fprintf, throw_verror, throw_vfatal)
	(throw_error): Likewise.
	* language.h (type_error, range_error): Likewise.
	* linespec.c (cplusplus_error): Likewise.
	* mi/mi-interp.c (mi_interp_query_hook): Likewise.
	* mi/mi-out.c (mi_field_fmt, mi_message): Likewise.
	* monitor.c (monitor_debug): Likewise.
	* parser-defs.h (parser_fprintf): Likewise.
	* serial.h (serial_printf): Likewise.
	* tui/tui-hooks.c (tui_query_hook): Likewise.
	* ui-out.c (default_field_fmt, default_message, uo_field_fmt)
	(uo_message): Likewise.
	* ui-out.h (ui_out_field_fmt, ui_out_message): Likewise.
	* utils.c (vfprintf_maybe_filtered, internal_vproblem, defaulted_query):
	Likewise.
	* xml-support.h (gdb_xml_debug, gdb_xml_error): Likewise.
@
text
@d3 2
a4 2
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   Free Software Foundation, Inc.
@


1.41
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d67 1
a67 1
static int ATTR_FORMAT (printf, 1, 0)
@


1.40
log
@	* target.h (TARGET_WNOHANG): New.
	* target.c (target_wait): Add `options' argument.  Adjust.
	(struct target_ops) <to_wait>: Add `options' argument.
	(target_wait): Add `options' argument.
	* infrun.c (wait_for_inferior): Pass 0 as options to
	target_wait (blocking wait).
	(fetch_inferior_event): Pass TARGET_WNOHANG as options to
	target_wait.
	* fork-child.c (startup_inferior): Pass 0 as options to
	target_wait (blocking wait).
	* linux-nat.c (linux_nat_create_inferior): Remove async masking.
	(linux_nat_wait_1): Add `target_options' argument.  Use it instead
	of checking on target_can_async_p.
	(linux_nat_wait): Add `target_options' argument.  Adjust.
	* remote.c (remote_wait_ns): Add `options' argument.  Adjust to
	check on TARGET_WNOWAIT instead of checking on remote_is_async_p.
	(remote_wait_as): Add `options' argument.  Adjust to check on
	TARGET_WNOWAIT instead of checking on remote_is_async_p.  If doing
	a blocking wait, keep waiting until an interesting event comes
	out.
	(remote_wait): Add `options' argument.  Don't loop here if the
	target is in async mode, and a blocking wait has been requested.

	* top.c (deprecated_target_wait_hook): Add `options' argument.
	* linux-thread-db.c (thread_db_wait): Add `options' argument, and
	pass it down to the layer beneath.
	* inf-ptrace.c (inf_ptrace_wait): Add `options' argument.
	* record.c (record_beneath_to_wait): Add `options' argument.
	(record_wait): Add `options' argument, and pass it down to the
	layer beneath.
	* bsd-uthread.c (bsd_uthread_wait): Add `options' argument.
	* darwin-nat.c (darwin_wait): Likewise.
	* defs.h (deprecated_target_wait_hook): Likewise.
	* gnu-nat.c (gnu_wait): Add `options' argument.
	* go32-nat.c (go32_wait): Likewise.
	* hpux-thread.c (hpux_thread_wait): Add `options' argument, and
	pass it down to the layer beneath.
	* inf-ttrace.c (inf_ttrace_wait): Add `options' argument.
	* monitor.c (monitor_wait): Likewise.
	* nto-procfs.c (procfs_wait): Likewise.
	* remote-mips.c (mips_wait): Add `options' argument.
	* remote-sim.c (gdbsim_wait): Likewise.
	* rs6000-nat.c (rs6000_wait): Add `options' argument.
	* sol-thread.c (sol_thread_wait): Add `options' argument, and pass
	it down to the layer beneath.
	* spu-linux-nat.c (spu_child_wait): Add `options' argument.
	* windows-nat.c (windows_wait): Likewise.
	* tui/tui-hooks.c (tui_target_wait_hook): Likewise.  Adjust.
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.39
log
@        Updated copyright notices for most files.
@
text
@d163 1
a163 1
		      struct target_waitstatus *status)
d177 1
a177 1
  res = target_wait (pid, status);
@


1.38
log
@gdb:
	* tui/tui-hooks.c: Include observer.h.
	(tui_event_default, tui_old_event_hooks, tui_event_hooks):
	Remove.
	(tui_bp_created_observer, tui_bp_deleted_observer,
	tui_bp_modified_observer): New globals.
	(tui_install_hooks): Use observers, not events.
	(tui_remove_hooks): Likewise.
	* mi/mi-cmd-break.c: Include observer.h, not gdb-events.h.
	(mi_breakpoint_observers_installed, mi_can_breakpoint_notify): New
	globals.
	(breakpoint_notify): Check mi_can_breakpoint_notify.
	(breakpoint_hooks): Remove.
	(mi_cmd_break_insert): Attach observers.  Don't use events.
	* tracepoint.c: Include observer.h, not gdb-events.h.
	(tracepoint_operation, trace_pass_command): Notify observer.
	* interps.c: Don't include gdb-events.h.
	(clear_interpreter_hooks): Don't call clear_gdb_event_hooks.
	* gdbarch.c: Rebuild.
	* gdbarch.sh: Emit include for observer.h, not gdb-events.h.
	(deprecated_current_gdbarch_select_hack): Notify observer.
	* breakpoint.h: Don't include gdb-events.h.
	* breakpoint.c: Don't include gdb-events.h.
	(condition_command): Notify observer.
	(commands_command): Likewise.
	(commands_from_control_command): Likewise.
	(mention, delete_breakpoint, set_ignore_count): Likewise.
	(disable_breakpoint, do_enable_breakpoint): Likewise.
	* Makefile.in (gdb_events_h): Remove.
	(breakpoint_h): Update.
	(COMMON_OBS): Remove gdb-events.o.
	(gdb-events.o): Remove.
	(breakpoint.o, gdbarch.o, interps.o, tracepoint.o, gdbtk-bp.o,
	gdbtk-hooks.o, mi-cmd-break.o, tui-hooks.o): Update.
	* gdb-events.c: Remove.
	* gdb-events.h: Remove.
	* gdb-events.sh: Remove.
gdb/doc:
	* observer.texi (GDB Observers): Document new observers:
	breakpoint_created, breakpoint_deleted, breakpoint_modified,
	tracepoint_created, tracepoint_deleted, tracepoint_modified,
	architecture_changed.
gdb/gdbtk:
	* generic/gdbtk-hooks.c: Include observer.h, not gdb-events.h.
	(gdbtk_add_hooks): Use observers, not events.
	(gdbtk_architecture_changed): Add argument, for observer.
	* generic/gdbtk-bp.c: Include observer.h.
	(gdb_set_bp): Notify observer.
	(gdb_set_bp_addr): Likewise.
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
@


1.37
log
@	Updated copyright notices for most files.
@
text
@a33 1
#include "gdb-events.h"
a158 17
static void
tui_event_default (int number)
{
  ;
}

static struct gdb_events *tui_old_event_hooks;

static struct gdb_events tui_event_hooks = {
  tui_event_create_breakpoint,
  tui_event_delete_breakpoint,
  tui_event_modify_breakpoint,
  tui_event_default,
  tui_event_default,
  tui_event_default
};

d247 5
d263 6
a268 1
  tui_old_event_hooks = deprecated_set_gdb_event_hooks (&tui_event_hooks);
d285 7
a291 2
  /* Restore the previous event hooks.  */
  deprecated_set_gdb_event_hooks (tui_old_event_hooks);
@


1.36
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007
@


1.35
log
@2007-08-14  Michael Snyder  <msnyder@@access-company.com>

	* tui-data.c, tui-data.h, tui-disasm.c, tui-disasm.h, tui-hooks.c,
	tui-io.c, tui-layout.c, tui-layout.h, tui-out.c, tui-regs.c,
	tui-source.c, tui-source.h, tui-stack.c, tui-win.c, tui-win.h,
	tui-windata.c, tui-windata.h, tui-wingeneral.c, tui-winsource.c,
	tui-winsource.h, tui.c, tui.h: Function declarations and
	definitions, wrap long lines.
@
text
@d10 1
a10 1
   the Free Software Foundation; either version 2 of the License, or
d19 1
a19 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.34
log
@2007-08-14  Michael Snyder  <msnyder@@access-company.com>

	* tui-command.c, tui-data.c, tui-data.h, tui-disasm.c, tui-file.c,
	tui-hooks.c, tui-interp.c, tui-io.c, tui-layout.c, tui-out.c,
	tui-regs.c, tui-regs.h, tui-source.c, tui-stack.c, tui-win.c,
	tui-windata.c, tui-wingeneral.c, tui-winsource.c, tui-winsource.h,
	tui.c, tui.h: Comment reformatting to coding standard (capitals,
	spaces after periods, etc).
@
text
@d170 1
a170 2
static struct gdb_events tui_event_hooks =
{
d182 2
a183 1
tui_target_wait_hook (ptid_t pid, struct target_waitstatus *status)
d249 4
a252 2
tui_print_frame_info_listing_hook (struct symtab *s, int line,
                                   int stopline, int noerror)
@


1.33
log
@2007-08-14  Michael Snyder  <msnyder@@access-company.com>

	* tui-data.c, tui-data.h, tui-disasm.c, tui-hooks.c, tui-layout.c,
	tui-regs.c, tui-source.c, tui-stack.c, tui-win.c, tui-windata.c,
	tui-wingeneral.c, tui-wingeneral.h, tui-winsource.c, tui.c,
	tui-winsource.h: Whitespace changes, fix pointer declarations
	to be consistant.
@
text
@d80 1
a80 1
      wrap_here ("");		/* Flush any buffered output */
d96 1
a96 1
      /* Eat rest of input line, to EOF or newline */
d207 2
a208 1
   stop or when the user explicitly changes the frame (up/down/thread/...).  */
d219 3
a221 2
  /* Ensure that symbols for this frame are read in.  Also, determine the
     source language of this frame, and switch to it if desired.  */
d227 4
a230 4
      /* elz: this if here fixes the problem with the pc not being displayed
         in the tui asm layout, with no debug symbols. The value of s 
         would be 0 here, and select_source_symtab would abort the
         command by calling the 'error' function */
@


1.32
log
@doc/ChangeLog:

	* observer.texi (GDB Observers): New observer "new_objfile".

ChangeLog:

	* observer.sh: Add "struct objfile" forward declaration.
	* target.h (deprecated_target_new_objfile_hook): Remove.
	* symfile.c (deprecated_target_new_objfile_hook): Remove.
	(clear_symtab_users): Call observer_notify_new_objfile.
	(symbol_file_add_with_addrs_or_offsets): Likewise.
	* rs6000-nat.c: Include "observer.h".
	(vmap_ldinfo): Call observer_notify_new_objfile.
	(xcoff_relocate_core): Likewise.
	* remote.c (remote_new_objfile_chain): Remove.
	(remote_new_objfile): Do not call remote_new_objfile_chain.
	(_initialize_remote): Use observer_attach_new_objfile.
	* tui/tui-hooks.c (tui_target_new_objfile_chain): Remove.
	(tui_new_objfile_hook): Do not call tui_target_new_objfile_chain.
	(_initialize_tui_hooks): Use observer_attach_new_objfile.
	* aix-thread.c: Include "observer.h".
	(target_new_objfile_chain): Remove.
	(new_objfile): Do not call target_new_objfile_chain.
	(_initialize_aix_thread): Use observer_attach_new_objfile.
	* hpux-thread.c: Include "observer.h"
	(target_new_objfile_chain): Remove.
	(hpux_thread_new_objfile): Make static.  Do not call
	target_new_objfile_chain.
	(_initialize_hpux_thread): Use observer_attach_new_objfile.
	* linux-thread-db.c: Include "observer.h".
	(target_new_objfile_chain): Remove.
	(thread_db_new_objfile): Do not call target_new_objfile_chain.
	(_initialize_thread_db): Use observer_attach_new_objfile.
	* sol-thread.c: Include "observer.h".
	(target_new_objfile_chain): Remove.
	(sol_thread_new_objfile): Make static.  Do not call
	target_new_objfile_chain.
	(_initialize_sol_thread): Use observer_attach_new_objfile.
	* Makefile.in (aix-thread.o, hpux-thread.o, linux-thread-db.o,
	rs6000-nat.o, sol-thread.o, tui-hooks.o): Add dependency on
	$(observer_h).
@
text
@d71 1
a71 1
tui_query_hook (const char * msg, va_list argp)
@


1.31
log
@	* defs.h (deprecated_registers_changed_hook): Delete declaration.
	* interps.c (clear_interpreter_hooks): Do not clear
	deprecated_registers_changed_hook.
	* regcache.c (registers_changed): Do not call it.
	* top.c (deprecated_registers_changed_hook): Do not define it.
	* mi/mi-interp.c (mi_command_loop): Do not clear it.
	* tui/tui-hooks.c (tui_install_hooks): Do not install it.
	(tui_remove_hooks): Do not remove it.
	(tui_selected_frame_level_changed_hook): Check for negative level.
	Use get_selected_frame.
	(tui_registers_changed_hook): Deleted.
@
text
@d39 1
a62 2
static void (* tui_target_new_objfile_chain) (struct objfile*);

a67 3
  
  if (tui_target_new_objfile_chain)
    tui_target_new_objfile_chain (objfile);
d301 1
a301 2
  tui_target_new_objfile_chain = deprecated_target_new_objfile_hook;
  deprecated_target_new_objfile_hook = tui_new_objfile_hook;
@


1.30
log
@	* tui/tui-hooks.c (tui_selected_frame_level_changed_hook): Replace
	get_selected_frame by deprecated_safe_get_selected_frame.
@
text
@d127 1
a127 1
/* Prevent recursion of deprecated_registers_changed_hook().  */
a130 16
tui_registers_changed_hook (void)
{
  struct frame_info *fi;

  fi = get_selected_frame (NULL);
  if (tui_refreshing_registers == 0)
    {
      tui_refreshing_registers = 1;
#if 0
      tui_check_data_values (fi);
#endif
      tui_refreshing_registers = 0;
    }
}

static void
d217 5
a221 1
  fi = deprecated_safe_get_selected_frame ();
a279 1
  deprecated_registers_changed_hook = tui_registers_changed_hook;
a291 1
  deprecated_registers_changed_hook = 0;
@


1.29
log
@	* frame.c (deprecated_selected_frame): Rename to...
	(selected_frame): ...this.  Make static.
	(get_selected_frame, select_frame): Update.
	* frame.h (deprected_select_frame): Delete.
	(deprecated_safe_get_selected_frame): Update comments.

	* breakpoint.c, cli/cli-cmds.c, f-valprint.c, infcmd.c, inflow.c,
	infrun.c, stack.c, tui/tui-disasm.c, tui/tui-source.c,
	tui/tui-winsource.c, valops.c, varobj.c, findvar.c, macroscope.c,
	parse.c, regcache.h, sh64-tdep.c, tui/tui-hooks.c, tui/tui-win.c,
	tui/tui.c: Replace references to deprecated_selected_frame.
@
text
@d233 1
a233 1
  fi = get_selected_frame (NULL);
@


1.28
log
@Copyright updates for 2007.
@
text
@d135 2
a136 2
  fi = deprecated_selected_frame;
  if (fi && tui_refreshing_registers == 0)
d151 2
a152 2
  fi = deprecated_selected_frame;
  if (fi && tui_refreshing_registers == 0)
d233 1
a233 1
  fi = deprecated_selected_frame;
d267 1
a267 1
  tui_show_frame_info (deprecated_selected_frame);
@


1.27
log
@	* Makefile.in (utils.o): Update.
	* top.c (in_user_command): New.
	(command_line_input): Use input_from_terminal_p.
	(input_from_terminal_p): Don't check caution.  Handle
	stdin == NULL for Insight.
	* top.h (in_user_command, caution): New declarations.
	* utils.c: Include "top.h".
	(query, defaulted_query): Check caution here.  Move the call
	to input_from_terminal_p higher.
	* cli/cli-script.c (do_restore_user_call_depth): Only decrement
	the depth.  Update in_user_command if necessary.
	(execute_user_command): Don't clobber old_chain.  Set
	in_user_command.  Let do_restore_user_call_depth handle
	user_call_depth.
	(read_command_lines): Check whether to prompt before calling
	Insight hooks.
	* tui/tui-hooks.c (tui_query_hook): Remove newly unnecessary
	input_from_terminal_p check.
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006
@


1.27.8.1
log
@2006-05-13    Changes based on Apple GDB (CVS repository 5th Sept 2005)

	* async-nat-inferior.c, async-nat-inferior.h,
	* async-nat-sigthread.c, async-nat-sigthread.h: New files

	* linux-nat.c: Include async-nat-inferior.h.
	(linux_nat_wait): Add extra argument.  If target_can_async_p
	do something completely different.

	* interps.h (interp_set, interp_set_quiet): New externs.

	* interps.c (interp_set): Make asynchronous.
	(interp_set_quiet): Don't make static.
	(current_interp_command_loop): Call functions with new arguments.

	* target.h (target_wait): Add extra argument.
	(gdb_override_async, gdb_set_async_override) New externs.
	(target_can_async_p): Make conditional on gdb_override_async.

	* target.c (gdb_override_async): New variable.
	(gdb_set_async_override, do_restore_target_async_mask):
	New functions.
	(debug_to_wait): Add extra argument.

	* linux-thread-db.c (thread_db_wait): Add extra argument.

	* wrapper.h (safe_execute_command): Declare structure.

	* top.c (*deprecated_target_wait_hook): Add extra argument.
	(read_command_file): Make asynchronous.

	* remote.c (remote_wait, remote_async_wait): Add extra argument.

	* infrun.c: Include event-top.h
	(wait_for_inferior, fetch_inferior_event): Add extra argument to
	target_wait.
	(proceed): Set target_executing = 0.
	(handle_inferior_event): Call async_disable_stdin if async.

	* inf-ptrace.c: Include inf-loop.h, async-nat-inferior.h.
	(inf_ptrace_him): Create a signal thread.
	(inf_ptrace_wait): Add extra argument to target_wait.

	* inf-loop.c (inferior_event_handler, complete_execution):
	Changes for asynchronous operation (copied verbatim).

	* inf-child.c: Include async-nat-inferior.h.
	(inf_child_target): Use methods async_terminal_inferior
	and async_terminal_ours.

	* i386-linux-nat.c: Include inf-loop.h, async-nat-inferior.h.
	(i386_linux_resume): Call gdb_process_events and then
	async methods.

	* exec.c: Include event-loop.h, async-nat-inferior.h.
	(async_file_handler, standard_async, standard_is_async_p)
	(standard_can_async_p): New functions.
	(init_exec_ops): Initialise above methods.

	* event-top.h (cli_command_loop): Make argument void*.

	* event-top.c (display_gdb_prompt, async_enable_stdin)
	(async_disable_stdin, handle_sigint, async_request_quit)
	(gdb_setup_readline, _initialize_event_loop):
	Changes for asynchronous operation (copied verbatim).
	(cli_command_loop): Make argument void*.

	* event-loop.h (gdb_client_data): Move typedef to defs.h.
	(gdb_create_event): Declare.
	(event_handler_func): Move typedef from event-loop.c.

	* event-loop.c (use_poll): Set to 0.
	(gdb_queue_event, gdb_create_event): New functions.
	(async_queue_event): Don't make static.
	(create_file_event): Use gdb_create_event.
	(gdb_event): Change component from int to void*.
	(process_event, handle_file_event, handle_timer_event):
	Change according to gdb_event.
	(event_handler_func): Move typedef to event-loop.c.

	* defs.h: (gdb_mi_run_status, event_loop_p): New externs.
	(gdb_client_data): Move typedef from event-loop.h.
	(*deprecated_command_loop_hook): Make argument void*.
	(*deprecated_target_wait_hook): Add argument.

	* cli-out.h (cli_quoted_out_new): Declare.

	* cli-out.c (cli_quoted_out_new): New function.
	Include mi/mi-console.h.

	* cli/cli-interp.c: Include inferior.h, mi/mi-console.h.
	(safe_execute_command): Make static.
	(cli_interpreter_resume, cli_interpreter_exec):
	Make asynchronous.
	(cli_quoted_interpreter_resume): New function.
	(_initialize_cli_interp): Add li_command_loop to procs.
	Initialize the console-quoted interpreter.

	* tui/tui-hooks.c (tui_target_wait_hook): Add extra argument.

	* mi/mi-main.h (mi_dont_register_continuation)
	(current_command_token,  mi_interp, mi_interpreter_exec_continuation)
	(mi_continuation_arg): New externs.
	(mi_setup_continuation_arg): Declare.

	* mi/mi-main.c: Include wrapper.h.
	(struct mi_continuation_arg): New structure.
	(mi_interpreter_exec_continuation): Move to mi-interp.c.
	(mi_execute_async_cli_command)
	(mi_exec_async_cli_cmd_continuation): Make asynchronous.
	(mi_setup_continuation_arg): New function.

	* mi/mi-interp.c (mi_interpreter_exec_continuation):
	Move from mi-main.c
	(mi_cmd_interpreter_exec): Switch interpreters.  Make
	asynchronous.
	(mi1_command_loop, mi2_command_loop, mi3_command_loop):
	Make argument void*.

	* Makefile.in (async_nat_inferior_h, async_nat_sigthread_h):
	New variables.
	(gdb$(EXEEXT), $(TUI)$(EXEEXT)): Link with libpthread.
	(async-nat-inferior.o, async-nat-sigthread.o): New rules.
	(COMMON_OBS): Add above object files.
	(exec.o, i386-linux-nat.o, inf-ptrace.o, linux-nat.o):
	Update dependencies.

2006-05-13  Nick Roberts  <nickrob@@snap.net.nz>

	* main.c: (event_loop_p): Re-instate variable.
	(captured_main): Re-instate async/noasync option.
	(print_gdb_help): Describe option again.

	* exec.c(init_exec_ops): Only initialise async methods with async
	option.

	* inf-ptrace.c (inf_ptrace_him): Only reate a signal thread with
	async option.

	* README.async, TODO.async, PROBLEMS.async: New files.
@
text
@d203 1
a203 1
tui_target_wait_hook (ptid_t pid, struct target_waitstatus *status, gdb_client_data client_data)
d217 1
a217 1
  res = target_wait (pid, status, NULL);
@


1.26
log
@	* tui/tui-file.c:
	* tui/tui-disasm.c:
	* tui/tui-data.h:
	* tui/tui-data.c:
	* tui/tui-command.h:
	* tui/tui-command.c:
	* tui/tui-win.h:
	* tui/tui-win.h:
	* tui/tui-win.c:
	* tui/tui-stack.h:
	* tui/tui-stack.c:
	* tui/tui-source.h:
	* tui/tui-source.c:
	* tui/tui-regs.h:
	* tui/tui-regs.c:
	* tui/tui-out.c:
	* tui/tui-main.c:
	* tui/tui-layout.h:
	* tui/tui-layout.c:
	* tui/tui-io.h:
	* tui/tui-io.c:
	* tui/tui-interp.c:
	* tui/tui-hooks.h:
	* tui/tui-hooks.c:
	* tui/tui-file.h:
	* tui/tui.h:
	* tui/tui.c:
	* tui/tui-winsource.h:
	* tui/tui-winsource.c:
	* tui/tui-wingeneral.h:
	* tui/tui-wingeneral.c:
	* tui/tui-windata.h:
	* tui/tui-windata.c: Add (C) after Copyright.  Update the FSF
	address.
@
text
@d3 2
a4 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
a80 4
  /* Automatically answer "yes" if input is not from a terminal.  */
  if (!input_from_terminal_p ())
    return 1;

@


1.25
log
@From  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>:
gdb/
	* cli-out.c (cli_field_fmt, cli_message, out_field_fmt): Add
	ATTR_FORMAT or ATTRIBUTE_FPTR_PRINTF.
	* complaints.c (vcomplaint): Likewise.
	* defs.h (xvasprintf, xstrvprintf, verror, vfatal)
	(internal_verror, internal_vwarning, vwarning)
	(deprecated_query_hook, deprecated_warning_hook)
	(deprecated_readline_begin_hook): Likewise.
	* disasm.c (fprintf_disasm): Likewise.
	* exceptions.c (throw_it): Likewise.
	* exceptions.h (throw_verror, throw_vfatal): Likewise.
	* mi/mi-interp.c (mi_interp_query_hook): Likewise.
	* mi/mi-out.c (mi_field_fmt, mi_message): Likewise.
	* tui/tui-hooks.c (tui_query_hook): Likewise.
	* tui/tui-out.c (tui_field_fmt, tui_message, out_field_fmt):
	Likewise.
	* ui-out.c (default_field_fmt, default_message, uo_field_fmt)
	(uo_message): Likewise.
	* ui-out.h (ui_out_field_fmt, ui_out_message, field_fmt_ftype)
	(message_ftype): Likewise.
	* utils.c (vfprintf_maybe_filtered, internal_vproblem)
	(defaulted_query, printchar): Likewise.
gdb/gdbserver/
	* server.h (error, fatal, warning): Add ATTR_FORMAT.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d19 2
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.24
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up some of printf_filtered and printf_unfiltered.
	* ada-lang.c, annotate.c, arch-utils.c, breakpoint.c: Update.
	* corelow.c, cp-namespace.c, cp-support.c, dcache.c: Update.
	* demangle.c, dsrec.c, dwarf2read.c, dwarfread.c: Update.
	* event-loop.c, event-top.c, exec.c, f-valprint.c: Update.
	* gdbtypes.c, inf-loop.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcmd.c, inflow.c, infrun.c, inftarg.c, language.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, maint.c: Update.
	* mdebugread.c, memattr.c, monitor.c, objc-lang.c: Update.
	* ocd.c, osabi.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote.c, solib-som.c, solib.c, somsolib.c, source.c: Update.
	* stack.c, symfile.c, symmisc.c, target.c, thread.c: Update.
	* top.c, utils.c, valprint.c, value.c, cli/cli-cmds.c: Update.
	* cli/cli-dump.c, cli/cli-logging.c, tui/tui-hooks.c: Update.
	* tui/tui-regs.c, tui/tui-win.c: Update.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d73 1
a73 1
static int
@


1.23
log
@2004-06-26  Andrew Cagney  <cagney@@gnu.org>

	* gdb-events.sh (deprecated_set_gdb_event_hooks): Deprecated.
	* gdb-events.h, gdb-events.c: Re-generate.
	* tui/tui-hooks.c (tui_install_hooks): Update.
	(tui_remove_hooks): Update.
	* mi/mi-cmd-break.c (mi_cmd_break_insert): Update.
@
text
@d91 1
a91 1
      printf_filtered ("(y or n) ");
d124 1
a124 1
      printf_filtered ("Please answer y or n.\n");
@


1.22
log
@2004-04-21  Andrew Cagney  <cagney@@redhat.com>

	* annotate.h (deprecated_annotate_starting_hook)
	(deprecated_annotate_stopped_hook)
	(deprecated_annotate_exited_hook)
	(deprecated_annotate_signal_hook)
	(deprecated_annotate_signalled_hook): Deprecate.
	* tracepoint.h (deprecated_create_tracepoint_hook)
	(deprecated_delete_tracepoint_hook)
	(deprecated_modify_tracepoint_hook)
	(deprecated_trace_find_hook)
	(deprecated_trace_start_stop_hook): Deprecate.
	* target.h (deprecated_target_new_objfile_hook): Deprecate.
	* remote.h (deprecated_target_resume_hook)
	(deprecated_target_wait_loop_hook): Deprecate.
	* gdbcore.h (deprecated_exec_file_display_hook)
	(deprecated_file_changed_hook): Deprecate.
	* frame.h (deprecated_selected_frame_level_changed_hook): Deprecate.
	* defs.h (deprecated_modify_breakpoint_hook)
	(deprecated_command_loop_hook, deprecated_show_load_progress)
	(deprecated_print_frame_info_listing_hook)
	(deprecated_query_hook, deprecated_warning_hook)
	(deprecated_flush_hook, deprecated_create_breakpoint_hook)
	(deprecated_delete_breakpoint_hook)
	(deprecated_interactive_hook, deprecated_registers_changed_hook)
	(deprecated_readline_begin_hook, deprecated_readline_hook)
	(deprecated_readline_end_hook, deprecated_register_changed_hook)
	(deprecated_memory_changed_hook, deprecated_init_ui_hook)
	(deprecated_context_hook, deprecated_target_wait_hook)
	(deprecated_attach_hook, deprecated_detach_hook)
	(deprecated_call_command_hook, deprecated_set_hook)
	(deprecated_error_hook, deprecated_error_begin_hook)
	(deprecated_ui_load_progress_hook): Deprecate.
	* valops.c, uw-thread.c, utils.c, tui/tui-io.c: Update.
	* tui/tui-hooks.c, tracepoint.c, top.c, thread-db.c: Update.
	* target.c, symfile.c, stack.c, sol-thread.c, rs6000-nat.c: Update.
	* remote.c, remote-mips.c, regcache.c, mi/mi-interp.c: Update.
	* main.c, interps.c, infcmd.c, hpux-thread.c, frame.c: Update.
	* exec.c, dsrec.c, d10v-tdep.c, corefile.c, complaints.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, breakpoint.c: Update.
	* annotate.c, aix-thread.c: Update.
@
text
@d293 1
a293 1
  tui_old_event_hooks = set_gdb_event_hooks (&tui_event_hooks);
d313 1
a313 1
  set_gdb_event_hooks (tui_old_event_hooks);
@


1.21
log
@* tui/tui-hooks.c: Include "readline/readline.h" after
"gdb_curses.h" instead of before.
* tui/tui-io.c: Likewise.
@
text
@d130 1
a130 1
/* Prevent recursion of registers_changed_hook().  */
d286 3
a288 3
  target_wait_hook = tui_target_wait_hook;
  selected_frame_level_changed_hook = tui_selected_frame_level_changed_hook;
  print_frame_info_listing_hook = tui_print_frame_info_listing_hook;
d290 1
a290 1
  query_hook = tui_query_hook;
d295 3
a297 3
  registers_changed_hook = tui_registers_changed_hook;
  register_changed_hook = tui_register_changed_hook;
  detach_hook = tui_detach_hook;
d304 7
a310 7
  target_wait_hook = 0;
  selected_frame_level_changed_hook = 0;
  print_frame_info_listing_hook = 0;
  query_hook = 0;
  registers_changed_hook = 0;
  register_changed_hook = 0;
  detach_hook = 0;
d322 2
a323 2
  tui_target_new_objfile_chain = target_new_objfile_hook;
  target_new_objfile_hook = tui_new_objfile_hook;
@


1.20
log
@2004-02-28  Andrew Cagney  <cagney@@redhat.com>

	* utils.c: Use "", instead of <>, to include readline.
	tui/tui-win.c, tui/tui.c, tui/tui-hooks.c: Ditto.
	* tracepoint.c, top.c, symmisc.c, symfile.c: Ditto.
	* source.c, solib.c, exec.c, event-top.c: Ditto.
	* corelow.c, completer.c, cli/cli-setshow.c: Ditto.
	* cli/cli-dump.c, cli/cli-cmds.c: Ditto.
	* Makefile.in: Update all dependencies.
	(readline_tilde_h, readline_history_h): Define.
	(readline_headers): Delete.
@
text
@a37 1
#include "readline/readline.h"
d53 5
@


1.19
log
@2004-02-10  Andrew Cagney  <cagney@@redhat.com>

	* defs.h: Do not include "tui.h".
	* gdb_curses.h: New file.
	* tui/tui-hooks.h: New file.
	* tui/tui.h (tui_update_all_exec_infos): Delete declaration.
	(tui_install_hooks, tui_remove_hooks): Delete declarations.
	(tui_initialize_io): Delete declaration.
	(tui_initialize_readline: Delete redundant declaration.
	(struct tui_point): Delete definition.
	* tui/tui-data.h (struct tui_point): Define.
	* cli/cli-decode.c [TUI]: Include "tui/tui.h".
	* utils.c: Include "tui/tui.h".
	* tui/tui-data.h: Include "tui/tui.h" and "gdb_curses.h".
	* printcmd.c [TUI]: Include "tui/tui.h".
	* cli/cli-cmds.c [TUI]: Include "tui/tui.h".
	* tui/tui-command.c: Include "gdb_curses.h".
	* tui/tui.c, tui/tui-winsource.c, tui/tui-wingeneral.c: Ditto.
	* tui/tui-windata.c, tui/tui-win.c, tui/tui-stack.c: Ditto.
	* tui/tui-source.c, tui/tui-regs.c, tui/tui-layout.c: Ditto.
	* tui/tui-io.c, tui/tui-disasm.c, tui/tui-data.c: : Ditto.
	* tui/tui-hooks.c: Include "tui-hooks.h" and "gdb_curses.h".
	* Makefile.in: Update all dependencies.
	(tui_hooks_h, gdb_curses_h): Define.
	(SUBDIR_TUI_CFLAGS): Remove -I${srcdir}/tui.
@
text
@d38 1
a38 1
#include <readline/readline.h>
@


1.19.4.1
log
@Merge mainline to intercu branch.
@
text
@d38 1
a38 1
#include "readline/readline.h"
@


1.19.4.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d38 1
a54 5
/* This redefines CTRL if it is not already defined, so it must come
   after terminal state releated include files like <term.h> and
   "gdb_curses.h".  */
#include "readline/readline.h"

d126 1
a126 1
/* Prevent recursion of deprecated_registers_changed_hook().  */
d282 3
a284 3
  deprecated_target_wait_hook = tui_target_wait_hook;
  deprecated_selected_frame_level_changed_hook = tui_selected_frame_level_changed_hook;
  deprecated_print_frame_info_listing_hook = tui_print_frame_info_listing_hook;
d286 1
a286 1
  deprecated_query_hook = tui_query_hook;
d289 1
a289 1
  tui_old_event_hooks = deprecated_set_gdb_event_hooks (&tui_event_hooks);
d291 3
a293 3
  deprecated_registers_changed_hook = tui_registers_changed_hook;
  deprecated_register_changed_hook = tui_register_changed_hook;
  deprecated_detach_hook = tui_detach_hook;
d300 7
a306 7
  deprecated_target_wait_hook = 0;
  deprecated_selected_frame_level_changed_hook = 0;
  deprecated_print_frame_info_listing_hook = 0;
  deprecated_query_hook = 0;
  deprecated_registers_changed_hook = 0;
  deprecated_register_changed_hook = 0;
  deprecated_detach_hook = 0;
d309 1
a309 1
  deprecated_set_gdb_event_hooks (tui_old_event_hooks);
d318 2
a319 2
  tui_target_new_objfile_chain = deprecated_target_new_objfile_hook;
  deprecated_target_new_objfile_hook = tui_new_objfile_hook;
@


1.18
log
@2004-02-07  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-command.c: Change variable and function names to lower
	case.
	* tui/tui-data.c, tui/tui-disasm.c: Ditto.
	* tui/tui-hooks.c, tui/tui-io.c, tui/tui-layout.c: Ditto.
	* tui/tui-regs.c, tui/tui-source.c, tui/tui-stack.c: Ditto.
	* tui/tui-win.c, tui/tui-windata.c, tui/tui-wingeneral.c: Ditto.
	* tui/tui-winsource.c, tui/tui.c: Ditto.
@
text
@d43 1
d53 1
a53 7
#ifdef HAVE_NCURSES_H
#include <ncurses.h>
#else
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#endif
@


1.17
log
@2004-02-06  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-windata.h: Update copyright.  Include "tui-data.h".
	(tui_erase_data_content): Rename tuiEraseDataContent.
	(tui_display_all_data): Rename tuiDisplayAllData.
	(tui_check_data_values): Rename tuiCheckDataValues.
	(tui_display_data_from_line): Rename tuiDisplayDataFromLine.
	(tui_first_data_item_displayed): Rename tuiFirstDataItemDisplayed.
	(tui_first_data_element_no_in_line): Rename
	tuiFirstDataElementNoInLine.
	(tui_delete_data_content_windows): Rename
	tuiDeleteDataContentWindows.
	(tui_refresh_data_win): Rename tuiRefreshDataWin.
	(tui_display_data_from): Rename tuiDisplayDataFrom.
	(tui_vertical_data_scroll): Rename tuiVerticalDataScroll.
	* tui/tui-windata.c, tui/tui-hooks.c: Update references.
	* tui/tui-win.c, tui/tui-regs.c: Update references.
	* tui/tui-layout.c, tui/tui.c: Update references.
@
text
@d144 1
a144 1
      tuiCheckDataValues (fi);
@


1.16
log
@2004-01-28  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-stack.h: Update copyright.
	(struct frame_info): Add opaque declaration.
	(tui_update_locator_filename): Rename tuiUpdateLocatorFilename.
	(tui_show_locator_content): Rename tuiShowLocatorContent.
	(tui_show_frame_info): Rename tuiShowFrameInfo.
	* tui/tui-stack.c: Update copyright.  Update references.
	* tui/tui-winsource.c: Update references.
	* tui/tui-win.c: Update references.
	* tui/tui-layout.c: Update references.
	* tui/tui-hooks.c: Update copyright, update references.
	* tui/tui.c: Update copyright, update references.
	* tui/tui-disasm.c: Update references.
@
text
@d159 1
a159 1
      tuiCheckDataValues (fi);
d259 1
a259 1
          tuiCheckDataValues (fi);
@


1.15
log
@2004-01-18  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-command.c: Rename tui/tuiCommand.c.
	* tui/tui-command.h: Rename tui/tuiCommand.h.
	* tui/tui-data.c: Rename tui/tuiData.c.
	* tui/tui-data.h: Rename tui/tuiData.h.
	* tui/tui-disasm.c: Rename tui/tuiDisassem.c.
	* tui/tui-disasm.h: Rename tui/tuiDisassem.h.
	* tui/tui-io.c: Rename tui/tuiIO.c.
	* tui/tui-io.h: Rename tui/tuiIO.h.
	* tui/tui-layout.c: Rename tui/tuiLayout.c.
	* tui/tui-layout.h: Rename tui/tuiLayout.h.
	* tui/tui-regs.c: Rename tui/tuiRegs.c.
	* tui/tui-regs.h: Rename tui/tuiRegs.h.
	* tui/tui-source.c: Rename tui/tuiSource.c.
	* tui/tui-source.h: Rename tui/tuiSource.h.
	* tui/tui-stack.c: Rename tui/tuiStack.c.
	* tui/tui-stack.h: Rename tui/tuiStack.h.
	* tui/tui-win.c: Rename tui/tuiWin.c.
	* tui/tui-win.h: Rename tui/tuiWin.h.
	* tui/tui-windata.c: Rename tui/tuiDataWin.c.
	* tui/tui-windata.h: Rename tui/tuiDataWin.h.
	* tui/tui-wingeneral.c: Rename tui/tuiGeneralWin.c.
	* tui/tui-wingeneral.h: Rename tui/tuiGeneralWin.h.
	* tui/tui-winsource.c: Rename tui/tuiSourceWin.c.
	* tui/tui-winsource.h: Rename tui/tuiSourceWin.h.
	* tui/tui-file.c: Update includes.
	* tui/tui-hooks.c: Update includes.
	* tui/tui-interp.c: Update includes.
	* tui/tui.c: Update includes.
	* Makefile.in: Update all tui/ dependencies.
	(SUBDIR_TUI_OBS, SUBDIR_TUI_SRCS): Update file names.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Free Software Foundation, Inc.
d253 1
a253 1
      tuiShowFrameInfo (fi);
d271 1
a271 1
  tuiShowFrameInfo (deprecated_selected_frame);
d279 1
a279 1
  tuiShowFrameInfo (0);
@


1.14
log
@	* tui-hooks.c: Update include order.
	* tui.c: Likewise.
	* tuiCommand.c: Likewise.
	* tuiData.c: Likewise.
	* tuiDataWin.c: Likewise.
	* tuiDisassem.c: Likewise.
	* tuiGeneralWin.c: Likewise.
	* tuiIO.c: Likewise.
	* tuiLayout.c: Likewise.
	* tuiRegs.c: Likewise.
	* tuiSource.c: Likewise.
	* tuiSourceWin.c: Likewise.
	* tuiStack.c: Likewise.
	* tuiWin.c: Likewise.
@
text
@d42 9
a50 9
#include "tui.h"
#include "tuiData.h"
#include "tuiLayout.h"
#include "tuiIO.h"
#include "tuiRegs.h"
#include "tuiWin.h"
#include "tuiStack.h"
#include "tuiDataWin.h"
#include "tuiSourceWin.h"
@


1.14.6.1
log
@merge mainline changes to branch
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d38 1
a38 1
#include "readline/readline.h"
d42 17
a58 12
#include "tui/tui.h"
#include "tui/tui-hooks.h"
#include "tui/tui-data.h"
#include "tui/tui-layout.h"
#include "tui/tui-io.h"
#include "tui/tui-regs.h"
#include "tui/tui-win.h"
#include "tui/tui-stack.h"
#include "tui/tui-windata.h"
#include "tui/tui-winsource.h"

#include "gdb_curses.h"
d144 1
a144 1
      tui_check_data_values (fi);
d159 1
a159 1
      tui_check_data_values (fi);
d253 1
a253 1
      tui_show_frame_info (fi);
d259 1
a259 1
          tui_check_data_values (fi);
d271 1
a271 1
  tui_show_frame_info (deprecated_selected_frame);
d279 1
a279 1
  tui_show_frame_info (0);
@


1.13
log
@	* Makefile.in (tuiDisassem.o): Update dependencies.

tui:
	* tuiSource.c (tuiVerticalSourceScroll): Use get_frame_pc.
	* tuiSourceWin.c (tuiHorizontalSourceScroll): Likewise.
	* tuiStack.c (tui_get_function_from_frame): Likewise.
	(tuiShowFrameInfo): Likewise.
	* tuiWin.c (_makeVisibleWithNewHeight): Likewise.
	* tui-hooks.c (tui_selected_frame_level_changed_hook): Likewise.
	* tuiDisassem.c (tuiVerticalDisassemScroll): Likewise.
	Include "disasm.h".
@
text
@d3 1
a3 1
   Copyright 2001, 2002 Free Software Foundation, Inc.
a21 17
/* FIXME: cagney/2002-02-28: The GDB coding standard indicates that
   "defs.h" should be included first.  Unfortunatly some systems
   (currently Debian GNU/Linux) include the <stdbool.h> via <curses.h>
   and they clash with "bfd.h"'s definiton of true/false.  The correct
   fix is to remove true/false from "bfd.h", however, until that
   happens, hack around it by including "config.h" and <curses.h>
   first.  */

#include "config.h"
#ifdef HAVE_NCURSES_H
#include <ncurses.h>
#else
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#endif

d51 8
@


1.12
log
@2003-02-14  Andrew Cagney  <ac131313@@redhat.com>

	* main.c (tui_version): Delete variable.
	(captured_main): When --tui, set interpreter_p to "tui" instead of
	enabling tui_version.
	* printcmd.c (display_command) [TUI]: Test tui_active instead of
	tui_version.
	* cli/cli-decode.c (lookup_cmd_composition): Ditto.
	* cli/cli-cmds.c (disassemble_command): Ditto.
	* defs.h (tui_version): Delete declaration.
	* Makefile.in (SUBDIR_TUI_SRCS): Add "tui/tui-interp.c".
	(tui-interp.o): Add rules.
	(SUBDIR_TUI_OBS): Add "tui-interp.o".

Index: tui/ChangeLog
2003-02-14  Andrew Cagney  <ac131313@@redhat.com>

	* tui.c (tui_enable, tui_disable): Don't modify tui_version.
	(tui_is_window_visible, tui_get_command_dimension): Test
	tui_active instead of tui_version.
	* tuiData.h (tui_version): Delete declaration.
	* tui-hooks.c (tui_init_hook, tui_event_loop): Delete function,
	moved to "tui-interp.c".
	(tui_exit, tui_command_loop): Ditto.
	(_initialize_tui): Don't initialize init_ui_hook.  Initialize
	target_new_objfile_hook.
	* tui-interp.c: New file.
@
text
@d253 1
a253 1
      s = find_pc_symtab (fi->pc);
@


1.11
log
@2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* stack.c (selected_frame, select_frame): Move from here ...
	* frame.c (selected_frame, select_frame): ... to here.  Include
	"language.h".
	* Makefile.in (frame.o): Update dependencies.
	* frame.c (get_selected_frame): New function.
	* frame.h (get_selected_frame): Declare.
	(deprecated_selected_frame): Rename selected_frame.
	* ada-lang.c, ada-tasks.c, breakpoint.c, corelow.c: Update.
	* eval.c, f-valprint.c, findvar.c, frame.c, frame.h: Update.
	* h8300-tdep.c, h8500-tdep.c, hppa-tdep.c, infcmd.c: Update.
	* inflow.c, infrun.c, macroscope.c, mips-tdep.c: Update.
	* mn10300-tdep.c, ocd.c, regcache.h, remote-e7000.c: Update.
	* remote-mips.c, remote-rdp.c, sh-tdep.c, sparc-tdep.c: Update.
	* stack.c, thread.c, tracepoint.c, valops.c, varobj.c: Update.
	* z8k-tdep.c, cli/cli-cmds.c: Update.

Index: mi/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* mi/mi-cmd-stack.c, mi/mi-main.c: Update to use
	deprecated_selected_frame.

Index: tui/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* tui/tui-hooks.c: Update to use deprecated_selected_frame.
	* tui/tui.c, tui/tuiDisassem.c, tui/tuiRegs.c: Ditto.
	* tui/tuiSource.c, tui/tuiSourceWin.c, tui/tuiWin.c: Ditto.
@
text
@a71 2
static void tui_event_loop (void);
static void tui_command_loop (void);
d326 1
a326 8
/* Cleanup the tui before exiting.  */
static void
tui_exit (void)
{
  /* Disable the tui.  Curses mode is left leaving the screen
     in a clean state (see endwin()).  */
  tui_disable ();
}
d328 2
a329 4
/* Initialize all the necessary variables, start the event loop,
   register readline, and stdin, start the loop. */
static void
tui_command_loop (void)
a330 89
  int length;
  char *a_prompt;
  char *gdb_prompt = get_prompt ();

  /* If we are using readline, set things up and display the first
     prompt, otherwise just print the prompt. */
  if (async_command_editing_p)
    {
      /* Tell readline what the prompt to display is and what function it
         will need to call after a whole line is read. This also displays
         the first prompt. */
      length = strlen (PREFIX (0)) + strlen (gdb_prompt) + strlen (SUFFIX (0)) + 1;
      a_prompt = (char *) xmalloc (length);
      strcpy (a_prompt, PREFIX (0));
      strcat (a_prompt, gdb_prompt);
      strcat (a_prompt, SUFFIX (0));
      rl_callback_handler_install (a_prompt, input_handler);
    }
  else
    display_gdb_prompt (0);

  /* Now it's time to start the event loop. */
  tui_event_loop ();
}

/* Start up the event loop. This is the entry point to the event loop
   from the command loop. */

static void
tui_event_loop (void)
{
  /* Loop until there is nothing to do. This is the entry point to the
     event loop engine. gdb_do_one_event, called via catch_errors()
     will process one event for each invocation.  It blocks waits for
     an event and then processes it.  >0 when an event is processed, 0
     when catch_errors() caught an error and <0 when there are no
     longer any event sources registered. */
  while (1)
    {
      int result = catch_errors (gdb_do_one_event, 0, "", RETURN_MASK_ALL);
      if (result < 0)
	break;

      /* Update gdb output according to TUI mode.  Since catch_errors
         preserves the uiout from changing, this must be done at top
         level of event loop.  */
      if (tui_active)
        uiout = tui_out;
      else
        uiout = tui_old_uiout;
      
      if (result == 0)
	{
	  /* FIXME: this should really be a call to a hook that is
	     interface specific, because interfaces can display the
	     prompt in their own way. */
	  display_gdb_prompt (0);
	  /* This call looks bizarre, but it is required.  If the user
	     entered a command that caused an error,
	     after_char_processing_hook won't be called from
	     rl_callback_read_char_wrapper.  Using a cleanup there
	     won't work, since we want this function to be called
	     after a new prompt is printed.  */
	  if (after_char_processing_hook)
	    (*after_char_processing_hook) ();
	  /* Maybe better to set a flag to be checked somewhere as to
	     whether display the prompt or not. */
	}
    }

  /* We are done with the event loop. There are no more event sources
     to listen to.  So we exit GDB. */
  return;
}

/* Initialize the tui by installing several gdb hooks, initializing
   the tui IO and preparing the readline with the kind binding.  */
static void
tui_init_hook (char *argv0)
{
  /* Don't enable the TUI if a specific interpreter is installed.  */
  if (interpreter_p)
    return;

  /* Install exit handler to leave the screen in a good shape.  */
  atexit (tui_exit);

  initializeStaticData ();

a333 12

  tui_initialize_io ();
  tui_initialize_readline ();

  /* Tell gdb to use the tui_command_loop as the main loop. */
  command_loop_hook = tui_command_loop;

  /* Decide in which mode to start using GDB (based on -tui).  */
  if (tui_version)
    {
      tui_enable ();
    }
a334 9

/* Initialize the tui.  */
void
_initialize_tui (void)
{
  /* Setup initialization hook.  */
  init_ui_hook = tui_init_hook;
}

@


1.10
log
@	* tui-hooks.c (tui_init_hook): Don't enable the TUI if a specific
	interpreter is installed.
@
text
@d150 1
a150 1
  fi = selected_frame;
d166 1
a166 1
  fi = selected_frame;
d248 1
a248 1
  fi = selected_frame;
d282 1
a282 1
  tuiShowFrameInfo (selected_frame);
@


1.9
log
@2002-10-02  Elena Zannoni  <ezannoni@@redhat.com>

        * inferior.h (registers_info, stepi_command, nexti_command,
        continue_command, interrupt_target_command): Export from infcmd.c.
        * frame.h (args_info, selected_frame_level_changed_hook,
        return_command): Export from stack.c.
        * v850ice.c (stepi_command, nexti_command, continue_command): use
        prototypes from inferior.h.
        * tracepoint.c (registers_info, args_info, locals_info): Use
        prototypes from frame.h and inferior.h.
        * Makefile.in (mi-main.o): Add dependency on frame.h.

2002-10-02  Elena Zannoni  <ezannoni@@redhat.com>

        * mi-main.c (mi_cmd_exec_return): Don't use
        return_command_wrapper, use return_command instead.
        (mi_cmd_exec_interrupt): Don't use
        interrupt_target_command_wrapper, use interrupt_target_command
        instead.
        (return_command_wrapper, interrupt_target_command_wrapper):
        Delete.
        Include frame.h.

2002-10-02  Elena Zannoni  <ezannoni@@redhat.com>

        * tui-hooks.c (selected_frame_level_changed_hook): Use the one
        exported from frame.h.
@
text
@d422 4
@


1.9.2.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Free Software Foundation, Inc.
d22 17
a68 8
#ifdef HAVE_NCURSES_H
#include <ncurses.h>
#else
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#endif

d72 2
d150 1
a150 1
  fi = deprecated_selected_frame;
d166 1
a166 1
  fi = deprecated_selected_frame;
d248 1
a248 1
  fi = deprecated_selected_frame;
d255 1
a255 1
      s = find_pc_symtab (get_frame_pc (fi));
d282 1
a282 1
  tuiShowFrameInfo (deprecated_selected_frame);
d328 38
a365 1
void _initialize_tui_hooks (void);
d367 54
a420 2
void
_initialize_tui_hooks (void)
d422 5
d430 20
d451 1
@


1.9.2.2
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d42 9
a50 9
#include "tui/tui.h"
#include "tui/tui-data.h"
#include "tui/tui-layout.h"
#include "tui/tui-io.h"
#include "tui/tui-regs.h"
#include "tui/tui-win.h"
#include "tui/tui-stack.h"
#include "tui/tui-windata.h"
#include "tui/tui-winsource.h"
d159 1
a159 1
      tui_check_data_values (fi);
d253 1
a253 1
      tui_show_frame_info (fi);
d259 1
a259 1
          tui_check_data_values (fi);
d271 1
a271 1
  tui_show_frame_info (deprecated_selected_frame);
d279 1
a279 1
  tui_show_frame_info (0);
@


1.8
log
@	* tui-hooks.c (tui_event_loop): New function.
	(tui_command_loop): New function to override gdb loop and make sure
	uiout is set according to TUI mode.
	(tui_command_loop): Install the specific TUI command hook.
	* tuiIO.c (tui_initialize_io): Initialize tui_old_uiout.
	(tui_uiout, tui_old_uiout): Make public.
	* tuiIO.h (tui_uiout, tui_old_uiout): Declare.
@
text
@a71 1
extern void (*selected_frame_level_changed_hook) (int);
@


1.8.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@d72 1
@


1.8.2.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d150 1
a150 1
  fi = deprecated_selected_frame;
d166 1
a166 1
  fi = deprecated_selected_frame;
d248 1
a248 1
  fi = deprecated_selected_frame;
d282 1
a282 1
  tuiShowFrameInfo (deprecated_selected_frame);
a421 4
  /* Don't enable the TUI if a specific interpreter is installed.  */
  if (interpreter_p)
    return;

@


1.8.2.3
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d72 2
d328 38
a365 1
void _initialize_tui_hooks (void);
d367 54
a420 2
void
_initialize_tui_hooks (void)
d422 9
d434 12
d447 9
@


1.8.2.4
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Free Software Foundation, Inc.
d22 17
a68 8
#ifdef HAVE_NCURSES_H
#include <ncurses.h>
#else
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#endif

d253 1
a253 1
      s = find_pc_symtab (get_frame_pc (fi));
@


1.8.2.5
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d42 9
a50 9
#include "tui/tui.h"
#include "tui/tui-data.h"
#include "tui/tui-layout.h"
#include "tui/tui-io.h"
#include "tui/tui-regs.h"
#include "tui/tui-win.h"
#include "tui/tui-stack.h"
#include "tui/tui-windata.h"
#include "tui/tui-winsource.h"
@


1.7
log
@	* tui-hooks.c (tui_detach_hook): New hook to know when a process dies.
	(tui_install_hooks): Install it.
	(tui_remove_hooks): Remove it.
@
text
@d49 1
d53 3
d73 2
d338 80
d434 3
@


1.7.2.1
log
@	* tui-hooks.c (tui_event_loop): New function.
	(tui_command_loop): New function to override gdb loop and make sure
	uiout is set according to TUI mode.
	(tui_command_loop): Install the specific TUI command hook.
	* tuiIO.c (tui_initialize_io): Initialize tui_old_uiout.
	(tui_uiout, tui_old_uiout): Make public.
	* tuiIO.h (tui_uiout, tui_old_uiout): Declare.
@
text
@a48 1
#include "event-top.h"
a51 3
#include "ui-out.h"
#include "top.h"
#include <readline/readline.h>
a68 2
static void tui_event_loop (void);
static void tui_command_loop (void);
a331 80
/* Initialize all the necessary variables, start the event loop,
   register readline, and stdin, start the loop. */
static void
tui_command_loop (void)
{
  int length;
  char *a_prompt;
  char *gdb_prompt = get_prompt ();

  /* If we are using readline, set things up and display the first
     prompt, otherwise just print the prompt. */
  if (async_command_editing_p)
    {
      /* Tell readline what the prompt to display is and what function it
         will need to call after a whole line is read. This also displays
         the first prompt. */
      length = strlen (PREFIX (0)) + strlen (gdb_prompt) + strlen (SUFFIX (0)) + 1;
      a_prompt = (char *) xmalloc (length);
      strcpy (a_prompt, PREFIX (0));
      strcat (a_prompt, gdb_prompt);
      strcat (a_prompt, SUFFIX (0));
      rl_callback_handler_install (a_prompt, input_handler);
    }
  else
    display_gdb_prompt (0);

  /* Now it's time to start the event loop. */
  tui_event_loop ();
}

/* Start up the event loop. This is the entry point to the event loop
   from the command loop. */

static void
tui_event_loop (void)
{
  /* Loop until there is nothing to do. This is the entry point to the
     event loop engine. gdb_do_one_event, called via catch_errors()
     will process one event for each invocation.  It blocks waits for
     an event and then processes it.  >0 when an event is processed, 0
     when catch_errors() caught an error and <0 when there are no
     longer any event sources registered. */
  while (1)
    {
      int result = catch_errors (gdb_do_one_event, 0, "", RETURN_MASK_ALL);
      if (result < 0)
	break;

      /* Update gdb output according to TUI mode.  Since catch_errors
         preserves the uiout from changing, this must be done at top
         level of event loop.  */
      if (tui_active)
        uiout = tui_out;
      else
        uiout = tui_old_uiout;
      
      if (result == 0)
	{
	  /* FIXME: this should really be a call to a hook that is
	     interface specific, because interfaces can display the
	     prompt in their own way. */
	  display_gdb_prompt (0);
	  /* This call looks bizarre, but it is required.  If the user
	     entered a command that caused an error,
	     after_char_processing_hook won't be called from
	     rl_callback_read_char_wrapper.  Using a cleanup there
	     won't work, since we want this function to be called
	     after a new prompt is printed.  */
	  if (after_char_processing_hook)
	    (*after_char_processing_hook) ();
	  /* Maybe better to set a flag to be checked somewhere as to
	     whether display the prompt or not. */
	}
    }

  /* We are done with the event loop. There are no more event sources
     to listen to.  So we exit GDB. */
  return;
}

a347 3

  /* Tell gdb to use the tui_command_loop as the main loop. */
  command_loop_hook = tui_command_loop;
@


1.7.2.2
log
@	* tui-hooks.c (tui_init_hook): Don't enable the TUI if a specific
	interpreter is installed.
@
text
@a422 4
  /* Don't enable the TUI if a specific interpreter is installed.  */
  if (interpreter_p)
    return;

@


1.6
log
@	* tuiSourceWin.h (tui_update_all_breakpoint_info): Declare.
	(tui_update_breakpoint_info): Declare.
	(tuiSetHasBreakAt, tuiAllSetHasBreakAt): Remove.

	* tuiSourceWin.c (tuiUpdateSourceWindowAsIs): Update breakpoint
	information using tui_update_breakpoint_info.
	(tui_update_all_breakpoint_info): New function to refresh all
	execution windows.
	(tui_update_breakpoint_info): New function to recompute the status
	of exec info window from breakpoints.
	(tuiSetHasBreakAt, tuiAllSetHasBreakAt): Remove.
	(tuiSetExecInfoContent): Use the exec info flags computed by
	tui_update_breakpoint_info to display a short status about breakpoints.

	* tuiData.h (TuiExecInfoContent): New for exec info string.
	(TuiWhichElement): Use it.
	(TUI_BP_ENABLED, TUI_BP_DISABLED, TUI_BP_HIT): New defines.
	(TUI_BP_CONDITIONAL, TUI_BP_HARDWARE): New defines.
	(TUI_BP_HIT_POS, TUI_BP_BREAK_POS, TUI_EXEC_POS): Likewise.
	(TUI_EXECINFO_SIZE): Likewise.
	* tuiData.c (initContentElement): Clear exec info string.

	* tui-hooks.c (get_breakpoint): Remove.
	(tui_event_create_breakpoint): Call tui_update_all_breakpoint_info.
	(tui_event_delete_breakpoint): Likewise.
	(tui_event_modify_breakpoint): Likewise.
@
text
@d280 9
d304 1
d317 1
@


1.5
log
@	* tuiSourceWin.c (tui_display_main): Rename from tuiDisplayMainFunction
	and use tuiGetBeginAsmAddress.
	* tuiSourceWin.h (tui_display_main): Declare.
	* tui.h (tuiDisplayMainFunction): Remove.
	* tui-hooks.c (tui_new_objfile_hook): Update.
@
text
@a169 16
extern struct breakpoint *breakpoint_chain;

/* Find a breakpoint given its number.  Returns null if not found.  */
static struct breakpoint *
get_breakpoint (int number)
{
  struct breakpoint *bp;

  for (bp = breakpoint_chain; bp; bp = bp->next)
    {
      if (bp->number == number)
        return bp;
    }
  return 0;
}

d175 1
a175 17
  struct breakpoint *bp;

  bp = get_breakpoint (number);
  if (bp)
    {
      switch (bp->type)
        {
        case bp_breakpoint:
        case bp_hardware_breakpoint:
          tuiAllSetHasBreakAt (bp, 1);
          tuiUpdateAllExecInfos ();
          break;

        default:
          break;
        }
    }
d183 1
a183 23
  struct breakpoint *bp;
  struct breakpoint *b;
  int clearIt;

  bp = get_breakpoint (number);
  if (bp == 0)
    return;

  /* Before turning off the visuals for the bp, check to see that
     there are no other bps at the same address. */
  clearIt = 0;
  for (b = breakpoint_chain; b; b = b->next)
    {
      clearIt = (b == bp || b->address != bp->address);
      if (!clearIt)
        break;
    }

  if (clearIt)
    {
      tuiAllSetHasBreakAt (bp, 0);
      tuiUpdateAllExecInfos ();
    }
d189 1
a189 1
  ;
@


1.4
log
@	* tui-hooks.c (tui_selected_frame_level_changed_hook): Always update
	the frame position.
@
text
@d74 1
a74 3
    {
      tuiDisplayMainFunction ();
    }
@


1.3
log
@Add FIXME explaining include problem.
@
text
@d312 4
a315 4
	{
          select_source_symtab (s);
          tuiShowFrameInfo (fi);
	}
@


1.3.8.1
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d74 3
a76 1
    tui_display_main ();
d312 4
a315 4
        select_source_symtab (s);

      /* Display the frame position (even if there is no symbols).  */
      tuiShowFrameInfo (fi);
@


1.3.8.2
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a48 1
#include "event-top.h"
a51 3
#include "ui-out.h"
#include "top.h"
#include <readline/readline.h>
a68 2
static void tui_event_loop (void);
static void tui_command_loop (void);
d170 16
d191 17
a207 1
  tui_update_all_breakpoint_info ();
d215 23
a237 1
  tui_update_all_breakpoint_info ();
d243 1
a243 1
  tui_update_all_breakpoint_info ();
a333 9
/* Called when the target process died or is detached.
   Update the status line.  */
static void
tui_detach_hook (void)
{
  tuiShowFrameInfo (0);
  tui_display_main ();
}

a348 1
  detach_hook = tui_detach_hook;
a360 1
  detach_hook = 0;
a374 80
/* Initialize all the necessary variables, start the event loop,
   register readline, and stdin, start the loop. */
static void
tui_command_loop (void)
{
  int length;
  char *a_prompt;
  char *gdb_prompt = get_prompt ();

  /* If we are using readline, set things up and display the first
     prompt, otherwise just print the prompt. */
  if (async_command_editing_p)
    {
      /* Tell readline what the prompt to display is and what function it
         will need to call after a whole line is read. This also displays
         the first prompt. */
      length = strlen (PREFIX (0)) + strlen (gdb_prompt) + strlen (SUFFIX (0)) + 1;
      a_prompt = (char *) xmalloc (length);
      strcpy (a_prompt, PREFIX (0));
      strcat (a_prompt, gdb_prompt);
      strcat (a_prompt, SUFFIX (0));
      rl_callback_handler_install (a_prompt, input_handler);
    }
  else
    display_gdb_prompt (0);

  /* Now it's time to start the event loop. */
  tui_event_loop ();
}

/* Start up the event loop. This is the entry point to the event loop
   from the command loop. */

static void
tui_event_loop (void)
{
  /* Loop until there is nothing to do. This is the entry point to the
     event loop engine. gdb_do_one_event, called via catch_errors()
     will process one event for each invocation.  It blocks waits for
     an event and then processes it.  >0 when an event is processed, 0
     when catch_errors() caught an error and <0 when there are no
     longer any event sources registered. */
  while (1)
    {
      int result = catch_errors (gdb_do_one_event, 0, "", RETURN_MASK_ALL);
      if (result < 0)
	break;

      /* Update gdb output according to TUI mode.  Since catch_errors
         preserves the uiout from changing, this must be done at top
         level of event loop.  */
      if (tui_active)
        uiout = tui_out;
      else
        uiout = tui_old_uiout;
      
      if (result == 0)
	{
	  /* FIXME: this should really be a call to a hook that is
	     interface specific, because interfaces can display the
	     prompt in their own way. */
	  display_gdb_prompt (0);
	  /* This call looks bizarre, but it is required.  If the user
	     entered a command that caused an error,
	     after_char_processing_hook won't be called from
	     rl_callback_read_char_wrapper.  Using a cleanup there
	     won't work, since we want this function to be called
	     after a new prompt is printed.  */
	  if (after_char_processing_hook)
	    (*after_char_processing_hook) ();
	  /* Maybe better to set a flag to be checked somewhere as to
	     whether display the prompt or not. */
	}
    }

  /* We are done with the event loop. There are no more event sources
     to listen to.  So we exit GDB. */
  return;
}

a390 3

  /* Tell gdb to use the tui_command_loop as the main loop. */
  command_loop_hook = tui_command_loop;
@


1.3.8.3
log
@merge from mainline
@
text
@d72 1
@


1.2
log
@2002-02-08  Daniel Jacobowitz  <drow@@mvista.com>

        * utils.c: Include <curses.h> before "bfd.h".
        * tui/tui-hooks.c: Likewise.
        * tui/tui.c: Likewise.
        * tui/tuiCommand.c: Likewise.
        * tui/tuiData.c: Likewise.
        * tui/tuiDataWin.c: Likewise.
        * tui/tuiDisassem.c: Likewise.
        * tui/tuiGeneralWin.c: Likewise.
        * tui/tuiIO.c: Likewise.
        * tui/tuiLayout.c: Likewise.
        * tui/tuiRegs.c: Likewise.
        * tui/tuiSource.c: Likewise.
        * tui/tuiSourceWin.c: Likewise.
        * tui/tuiStack.c: Likewise.
        * tui/tuiWin.c: Likewise.
@
text
@d2 2
a3 1
   Copyright 2001 Free Software Foundation, Inc.
d22 8
a29 1
/* If we need <curses.h>, we must include it before we get "bfd.h".  */
@


1.1
log
@	* tui-hooks.c: New file, gdb hooks for tui.
	* tui-out.c: New file, image copied from cli-out.c.
	(tui_field_int): Identify "line" fields and keep track of them.
	(tui_field_string): Likewise for "file".
	(tui_out_new): Use flags = 0 to avoid printing the sources.
@
text
@d21 10
@

