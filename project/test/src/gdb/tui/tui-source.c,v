head	1.37;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.37
	gdb_7_6-2013-04-26-release:1.37
	gdb_7_6-branch:1.37.0.2
	gdb_7_6-2013-03-12-branchpoint:1.37
	gdb_7_5_1-2012-11-29-release:1.30
	gdb_7_5-2012-08-17-release:1.30
	gdb_7_5-branch:1.30.0.2
	gdb_7_5-2012-07-18-branchpoint:1.30
	gdb_7_4_1-2012-04-26-release:1.29.4.1
	gdb_7_4-2012-01-24-release:1.29.4.1
	gdb_7_4-branch:1.29.0.4
	gdb_7_4-2011-12-13-branchpoint:1.29
	gdb_7_3_1-2011-09-04-release:1.29
	gdb_7_3-2011-07-26-release:1.29
	gdb_7_3-branch:1.29.0.2
	gdb_7_3-2011-04-01-branchpoint:1.29
	gdb_7_2-2010-09-02-release:1.26
	gdb_7_2-branch:1.26.0.2
	gdb_7_2-2010-07-07-branchpoint:1.26
	gdb_7_1-2010-03-18-release:1.25
	gdb_7_1-branch:1.25.0.2
	gdb_7_1-2010-02-18-branchpoint:1.25
	gdb_7_0_1-2009-12-22-release:1.24
	gdb_7_0-2009-10-06-release:1.24
	gdb_7_0-branch:1.24.0.4
	gdb_7_0-2009-09-16-branchpoint:1.24
	arc-sim-20090309:1.22
	msnyder-checkpoint-072509-branch:1.24.0.2
	msnyder-checkpoint-072509-branchpoint:1.24
	arc-insight_6_8-branch:1.22.0.16
	arc-insight_6_8-branchpoint:1.22
	insight_6_8-branch:1.22.0.14
	insight_6_8-branchpoint:1.22
	reverse-20081226-branch:1.22.0.12
	reverse-20081226-branchpoint:1.22
	multiprocess-20081120-branch:1.22.0.10
	multiprocess-20081120-branchpoint:1.22
	reverse-20080930-branch:1.22.0.8
	reverse-20080930-branchpoint:1.22
	reverse-20080717-branch:1.22.0.6
	reverse-20080717-branchpoint:1.22
	msnyder-reverse-20080609-branch:1.22.0.4
	msnyder-reverse-20080609-branchpoint:1.22
	drow-reverse-20070409-branch:1.16.0.2
	drow-reverse-20070409-branchpoint:1.16
	gdb_6_8-2008-03-27-release:1.22
	gdb_6_8-branch:1.22.0.2
	gdb_6_8-2008-02-26-branchpoint:1.22
	gdb_6_7_1-2007-10-29-release:1.21
	gdb_6_7-2007-10-10-release:1.21
	gdb_6_7-branch:1.21.0.2
	gdb_6_7-2007-09-07-branchpoint:1.21
	insight_6_6-20070208-release:1.14
	gdb_6_6-2006-12-18-release:1.14
	gdb_6_6-branch:1.14.0.2
	gdb_6_6-2006-11-15-branchpoint:1.14
	insight_6_5-20061003-release:1.13
	gdb-csl-symbian-6_4_50_20060226-12:1.13.2.1
	gdb-csl-sourcerygxx-3_4_4-25:1.12
	nickrob-async-20060828-mergepoint:1.13
	gdb-csl-symbian-6_4_50_20060226-11:1.13.2.1
	gdb-csl-sourcerygxx-4_1-17:1.13.2.1
	gdb-csl-20060226-branch-local-2:1.13.2.1
	gdb-csl-sourcerygxx-4_1-14:1.13.2.1
	gdb-csl-sourcerygxx-4_1-13:1.13.2.1
	gdb-csl-sourcerygxx-4_1-12:1.13.2.1
	gdb-csl-sourcerygxx-3_4_4-21:1.13.2.1
	gdb_6_5-20060621-release:1.13
	gdb-csl-sourcerygxx-4_1-9:1.13.2.1
	gdb-csl-sourcerygxx-4_1-8:1.13.2.1
	gdb-csl-sourcerygxx-4_1-7:1.13.2.1
	gdb-csl-arm-2006q1-6:1.13.2.1
	gdb-csl-sourcerygxx-4_1-6:1.13.2.1
	gdb-csl-symbian-6_4_50_20060226-10:1.13.2.1
	gdb-csl-symbian-6_4_50_20060226-9:1.13.2.1
	gdb-csl-symbian-6_4_50_20060226-8:1.13.2.1
	gdb-csl-coldfire-4_1-11:1.13.2.1
	gdb-csl-sourcerygxx-3_4_4-19:1.13.2.1
	gdb-csl-coldfire-4_1-10:1.13.2.1
	gdb_6_5-branch:1.13.0.14
	gdb_6_5-2006-05-14-branchpoint:1.13
	gdb-csl-sourcerygxx-4_1-5:1.13.2.1
	nickrob-async-20060513-branch:1.13.0.12
	nickrob-async-20060513-branchpoint:1.13
	gdb-csl-sourcerygxx-4_1-4:1.13.2.1
	msnyder-reverse-20060502-branch:1.13.0.10
	msnyder-reverse-20060502-branchpoint:1.13
	gdb-csl-morpho-4_1-4:1.13.2.1
	gdb-csl-sourcerygxx-3_4_4-17:1.13.2.1
	readline_5_1-import-branch:1.13.0.8
	readline_5_1-import-branchpoint:1.13
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.13.2.1
	gdb-csl-symbian-20060226-branch:1.13.2.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.13.2.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.13.2.1
	msnyder-reverse-20060331-branch:1.13.0.6
	msnyder-reverse-20060331-branchpoint:1.13
	gdb-csl-available-20060303-branch:1.13.0.4
	gdb-csl-available-20060303-branchpoint:1.13
	gdb-csl-20060226-branch:1.13.0.2
	gdb-csl-20060226-branchpoint:1.13
	gdb_6_4-20051202-release:1.12
	msnyder-fork-checkpoint-branch:1.12.0.6
	msnyder-fork-checkpoint-branchpoint:1.12
	gdb-csl-gxxpro-6_3-branch:1.12.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.12
	gdb_6_4-branch:1.12.0.2
	gdb_6_4-2005-11-01-branchpoint:1.12
	gdb-csl-arm-20051020-branch:1.11.0.22
	gdb-csl-arm-20051020-branchpoint:1.11
	msnyder-tracepoint-checkpoint-branch:1.11.0.20
	msnyder-tracepoint-checkpoint-branchpoint:1.11
	gdb-csl-arm-20050325-2005-q1b:1.11
	gdb-csl-arm-20050325-2005-q1a:1.11
	csl-arm-20050325-branch:1.11.0.18
	csl-arm-20050325-branchpoint:1.11
	gdb-post-i18n-errorwarning-20050211:1.11
	gdb-pre-i18n-errorwarning-20050211:1.11
	gdb_6_3-20041109-release:1.11
	gdb_6_3-branch:1.11.0.14
	gdb_6_3-20041019-branchpoint:1.11
	drow_intercu-merge-20040921:1.11
	drow_intercu-merge-20040915:1.11
	jimb-gdb_6_2-e500-branch:1.11.0.16
	jimb-gdb_6_2-e500-branchpoint:1.11
	gdb_6_2-20040730-release:1.11
	gdb_6_2-branch:1.11.0.12
	gdb_6_2-2004-07-10-gmt-branchpoint:1.11
	gdb_6_1_1-20040616-release:1.11
	gdb_6_1-2004-04-05-release:1.11
	drow_intercu-merge-20040402:1.11
	drow_intercu-merge-20040327:1.11
	ezannoni_pie-20040323-branch:1.11.0.10
	ezannoni_pie-20040323-branchpoint:1.11
	ezannoni_pie-20030916-branch:1.11.0.8
	cagney_tramp-20040321-mergepoint:1.11
	cagney_tramp-20040309-branch:1.11.0.6
	cagney_tramp-20040309-branchpoint:1.11
	gdb_6_1-branch:1.11.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.11
	drow_intercu-20040221-branch:1.11.0.2
	drow_intercu-20040221-branchpoint:1.11
	cagney_bfdfile-20040213-branch:1.10.0.2
	cagney_bfdfile-20040213-branchpoint:1.10
	drow-cplus-branch:1.9.0.2
	drow-cplus-merge-20040208:1.7
	carlton_dictionary-branch:1.1.0.4
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.2
	cagney_bigcore-20040122-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.37
date	2013.02.03.16.16.42;	author jkratoch;	state Exp;
branches;
next	1.36;

1.36
date	2013.02.03.16.13.31;	author jkratoch;	state Exp;
branches;
next	1.35;

1.35
date	2013.02.03.16.05.09;	author jkratoch;	state Exp;
branches;
next	1.34;

1.34
date	2013.01.10.21.15.51;	author jkratoch;	state Exp;
branches;
next	1.33;

1.33
date	2013.01.01.06.41.30;	author brobecke;	state Exp;
branches;
next	1.32;

1.32
date	2012.12.24.19.42.16;	author jkratoch;	state Exp;
branches;
next	1.31;

1.31
date	2012.08.27.17.00.42;	author hjl;	state Exp;
branches;
next	1.30;

1.30
date	2012.01.04.08.27.59;	author brobecke;	state Exp;
branches;
next	1.29;

1.29
date	2011.03.25.09.57.37;	author ktietz;	state Exp;
branches
	1.29.4.1;
next	1.28;

1.28
date	2011.01.06.00.57.05;	author msnyder;	state Exp;
branches;
next	1.27;

1.27
date	2011.01.01.15.33.53;	author brobecke;	state Exp;
branches;
next	1.26;

1.26
date	2010.05.17.22.21.43;	author msnyder;	state Exp;
branches;
next	1.25;

1.25
date	2010.01.01.07.32.07;	author brobecke;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.02.17.17.42;	author uweigand;	state Exp;
branches;
next	1.23;

1.23
date	2009.01.03.05.58.08;	author brobecke;	state Exp;
branches;
next	1.22;

1.22
date	2008.01.01.22.53.22;	author drow;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.23.18.08.50;	author brobecke;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.15.00.19.44;	author msnyder;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.14.23.50.39;	author msnyder;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.14.21.20.09;	author msnyder;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.14.20.23.29;	author msnyder;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.27.19.46.04;	author drow;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.09.17.59.15;	author drow;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.11.10.50.07;	author fred;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.23.19.10.03;	author eliz;	state Exp;
branches
	1.13.2.1
	1.13.4.1;
next	1.12;

1.12
date	2005.11.01.17.40.25;	author ams;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.16.21.05.09;	author cagney;	state Exp;
branches
	1.11.8.1;
next	1.10;

1.10
date	2004.02.10.19.08.16;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.08.01.32.26;	author cagney;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2004.02.08.00.05.16;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.07.20.57.02;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.07.17.46.14;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.07.16.31.22;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.07.04.40.36;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.07.01.40.25;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.06.22.42.18;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.19.04.31.51;	author cagney;	state Exp;
branches
	1.1.4.1;
next	;

1.29.4.1
date	2012.01.06.04.54.35;	author brobecke;	state Exp;
branches;
next	;

1.13.2.1
date	2006.04.03.00.47.41;	author drow;	state Exp;
branches;
next	;

1.13.4.1
date	2006.04.02.21.52.40;	author drow;	state Exp;
branches;
next	;

1.11.8.1
date	2004.03.23.20.09.16;	author ezannoni;	state Exp;
branches;
next	;

1.9.2.1
date	2004.02.09.19.43.56;	author drow;	state Exp;
branches;
next	;

1.1.4.1
date	2004.01.26.19.11.45;	author carlton;	state Exp;
branches;
next	;


desc
@@


1.37
log
@gdb/
	* source.c (print_source_lines_base): Print for TUI also "fullname".
	* tui/tui-data.c (init_content_element): Change tui_locator_element
	field to full_name.
	* tui/tui-data.h (struct tui_locator_element): Likewise.
	* tui/tui-disasm.c (tui_show_disassem_and_update_source): Rename
	tui_update_locator_filename calls to tui_update_locator_fullname.
	Replace symtab->filename refererence by symtab_to_fullname call.
	* tui/tui-out.c (tui_field_string): Check for "fullname" now.
	* tui/tui-source.c (tui_set_source_content): Change tui_locator_element
	field to full_name.  Replace symtab->filename refererence by
	symtab_to_fullname call.
	(tui_show_symtab_source): Rename parameter to fullname.  Change
	tui_locator_element field to full_name.
	* tui/tui-stack.c: Include source.h.
	(tui_set_locator_filename): Rename the declaration to ...
	(tui_set_locator_fullname): ... here.  Rename its parameter to
	fullname, updates its comment.
	(tui_set_locator_info): Rename its parameter to fullname.
	(tui_set_locator_filename): Rename the definition to ...
	(tui_set_locator_fullname): ... here.  Rename its parameter to
	fullname, updates its comment.  Change tui_locator_element field to
	full_name.
	(tui_set_locator_info): Rename its parameter to fullname.
	(tui_set_locator_info): Rename callee to tui_set_locator_fullname.
	(tui_update_locator_filename): Rename to ...
	(tui_update_locator_fullname): ... here. Rename callee to
	tui_set_locator_fullname.
	(tui_show_frame_info): Replace symtab->filename refererence by
	symtab_to_fullname call.
	* tui/tui-stack.h (tui_update_locator_filename): Rename to ...
	(tui_update_locator_fullname): ... here.
	* tui/tui-winsource.c (tui_display_main): Rename the callee to
	tui_update_locator_fullname.  Replace symtab->filename refererence by
	symtab_to_fullname call.
	* tui/tui.c (tui_show_source): Rename its parameter to fullname.
	Rename the callee to tui_update_locator_fullname.
	* tui/tui.h (tui_show_source): Rename its parameter to fullname.
@
text
@/* TUI display source window.

   Copyright (C) 1998-2013 Free Software Foundation, Inc.

   Contributed by Hewlett-Packard Company.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include <ctype.h>
#include "symtab.h"
#include "frame.h"
#include "breakpoint.h"
#include "source.h"
#include "symtab.h"
#include "objfiles.h"
#include "filenames.h"

#include "tui/tui.h"
#include "tui/tui-data.h"
#include "tui/tui-stack.h"
#include "tui/tui-winsource.h"
#include "tui/tui-source.h"

#include "gdb_string.h"
#include "gdb_curses.h"

/* Function to display source in the source window.  */
enum tui_status
tui_set_source_content (struct symtab *s, 
			int line_no,
			int noerror)
{
  enum tui_status ret = TUI_FAILURE;

  if (s != (struct symtab *) NULL)
    {
      FILE *stream;
      int i, desc, c, line_width, nlines;
      char *src_line = 0;

      if ((ret = tui_alloc_source_buffer (TUI_SRC_WIN)) == TUI_SUCCESS)
	{
	  line_width = TUI_SRC_WIN->generic.width - 1;
	  /* Take hilite (window border) into account, when
	     calculating the number of lines.  */
	  nlines = (line_no + (TUI_SRC_WIN->generic.height - 2)) - line_no;
	  desc = open_source_file (s);
	  if (desc < 0)
	    {
	      if (!noerror)
		{
		  const char *filename = symtab_to_filename_for_display (s);
		  char *name = alloca (strlen (filename) + 100);

		  sprintf (name, "%s:%d", filename, line_no);
		  print_sys_errmsg (name, errno);
		}
	      ret = TUI_FAILURE;
	    }
	  else
	    {
	      if (s->line_charpos == 0)
		find_source_lines (s, desc);

	      if (line_no < 1 || line_no > s->nlines)
		{
		  close (desc);
		  printf_unfiltered ("Line number %d out of range; "
				     "%s has %d lines.\n",
				     line_no,
				     symtab_to_filename_for_display (s),
				     s->nlines);
		}
	      else if (lseek (desc, s->line_charpos[line_no - 1], 0) < 0)
		{
		  close (desc);
		  perror_with_name (symtab_to_filename_for_display (s));
		}
	      else
		{
		  int offset, cur_line_no, cur_line, cur_len, threshold;
		  struct tui_gen_win_info *locator
		    = tui_locator_win_info_ptr ();
                  struct tui_source_info *src
		    = &TUI_SRC_WIN->detail.source_info;
		  const char *s_filename = symtab_to_filename_for_display (s);

                  if (TUI_SRC_WIN->generic.title)
                    xfree (TUI_SRC_WIN->generic.title);
                  TUI_SRC_WIN->generic.title = xstrdup (s_filename);

		  xfree (src->fullname);
		  src->fullname = xstrdup (symtab_to_fullname (s));

		  /* Determine the threshold for the length of the
                     line and the offset to start the display.  */
		  offset = src->horizontal_offset;
		  threshold = (line_width - 1) + offset;
		  stream = fdopen (desc, FOPEN_RT);
		  clearerr (stream);
		  cur_line = 0;
		  src->gdbarch = get_objfile_arch (s->objfile);
		  src->start_line_or_addr.loa = LOA_LINE;
		  cur_line_no = src->start_line_or_addr.u.line_no = line_no;
		  if (offset > 0)
		    src_line = (char *) xmalloc (
					   (threshold + 1) * sizeof (char));
		  while (cur_line < nlines)
		    {
		      struct tui_win_element *element
			= (struct tui_win_element *)
			TUI_SRC_WIN->generic.content[cur_line];

		      /* Get the first character in the line.  */
		      c = fgetc (stream);

		      if (offset == 0)
			src_line = ((struct tui_win_element *)
				   TUI_SRC_WIN->generic.content[
					cur_line])->which_element.source.line;
		      /* Init the line with the line number.  */
		      sprintf (src_line, "%-6d", cur_line_no);
		      cur_len = strlen (src_line);
		      i = cur_len - ((cur_len / tui_default_tab_len ())
				     * tui_default_tab_len ());
		      while (i < tui_default_tab_len ())
			{
			  src_line[cur_len] = ' ';
			  i++;
			  cur_len++;
			}
		      src_line[cur_len] = (char) 0;

		      /* Set whether element is the execution point
		         and whether there is a break point on it.  */
		      element->which_element.source.line_or_addr.loa =
			LOA_LINE;
		      element->which_element.source.line_or_addr.u.line_no =
			cur_line_no;
		      element->which_element.source.is_exec_point =
			(filename_cmp (((struct tui_win_element *)
				       locator->content[0])->which_element.locator.full_name,
				       symtab_to_fullname (s)) == 0
			 && cur_line_no == ((struct tui_win_element *)
					    locator->content[0])->which_element.locator.line_no);
		      if (c != EOF)
			{
			  i = strlen (src_line) - 1;
			  do
			    {
			      if ((c != '\n') && (c != '\r') 
				  && (++i < threshold))
				{
				  if (c < 040 && c != '\t')
				    {
				      src_line[i++] = '^';
				      src_line[i] = c + 0100;
				    }
				  else if (c == 0177)
				    {
				      src_line[i++] = '^';
				      src_line[i] = '?';
				    }
				  else
				    { /* Store the charcter in the
					 line buffer.  If it is a tab,
					 then translate to the correct
					 number of chars so we don't
					 overwrite our buffer.  */
				      if (c == '\t')
					{
					  int j, max_tab_len
					    = tui_default_tab_len ();

					  for (j = i - ((i / max_tab_len)
							* max_tab_len);
					       j < max_tab_len
						 && i < threshold;
					       i++, j++)
					    src_line[i] = ' ';
					  i--;
					}
				      else
					src_line[i] = c;
				    }
				  src_line[i + 1] = 0;
				}
			      else
				{ /* If we have not reached EOL, then
				     eat chars until we do.  */
				  while (c != EOF && c != '\n' && c != '\r')
				    c = fgetc (stream);
				  /* Handle non-'\n' end-of-line.  */
				  if (c == '\r' 
				      && (c = fgetc (stream)) != '\n' 
				      && c != EOF)
				    {
				       ungetc (c, stream);
				       c = '\r';
				    }
				  
				}
			    }
			  while (c != EOF && c != '\n' && c != '\r' 
				 && i < threshold 
				 && (c = fgetc (stream)));
			}
		      /* Now copy the line taking the offset into
			 account.  */
		      if (strlen (src_line) > offset)
			strcpy (((struct tui_win_element *)
				 TUI_SRC_WIN->generic.content[cur_line])->which_element.source.line,
				&src_line[offset]);
		      else
			((struct tui_win_element *)
			 TUI_SRC_WIN->generic.content[
			  cur_line])->which_element.source.line[0] = (char) 0;
		      cur_line++;
		      cur_line_no++;
		    }
		  if (offset > 0)
		    xfree (src_line);
		  fclose (stream);
		  TUI_SRC_WIN->generic.content_size = nlines;
		  ret = TUI_SUCCESS;
		}
	    }
	}
    }
  return ret;
}


/* elz: This function sets the contents of the source window to empty
   except for a line in the middle with a warning message about the
   source not being available.  This function is called by
   tui_erase_source_contents(), which in turn is invoked when the
   source files cannot be accessed.  */

void
tui_set_source_content_nil (struct tui_win_info *win_info, 
			    char *warning_string)
{
  int line_width;
  int n_lines;
  int curr_line = 0;

  line_width = win_info->generic.width - 1;
  n_lines = win_info->generic.height - 2;

  /* Set to empty each line in the window, except for the one which
     contains the message.  */
  while (curr_line < win_info->generic.content_size)
    {
      /* Set the information related to each displayed line to null:
         i.e. the line number is 0, there is no bp, it is not where
         the program is stopped.  */

      struct tui_win_element *element =
	(struct tui_win_element *) win_info->generic.content[curr_line];

      element->which_element.source.line_or_addr.loa = LOA_LINE;
      element->which_element.source.line_or_addr.u.line_no = 0;
      element->which_element.source.is_exec_point = FALSE;
      element->which_element.source.has_break = FALSE;

      /* Set the contents of the line to blank.  */
      element->which_element.source.line[0] = (char) 0;

      /* If the current line is in the middle of the screen, then we
         want to display the 'no source available' message in it.
         Note: the 'weird' arithmetic with the line width and height
         comes from the function tui_erase_source_content().  We need
         to keep the screen and the window's actual contents in
         synch.  */

      if (curr_line == (n_lines / 2 + 1))
	{
	  int i;
	  int xpos;
	  int warning_length = strlen (warning_string);
	  char *src_line;

	  src_line = element->which_element.source.line;

	  if (warning_length >= ((line_width - 1) / 2))
	    xpos = 1;
	  else
	    xpos = (line_width - 1) / 2 - warning_length;

	  for (i = 0; i < xpos; i++)
	    src_line[i] = ' ';

	  sprintf (src_line + i, "%s", warning_string);

	  for (i = xpos + warning_length; i < line_width; i++)
	    src_line[i] = ' ';

	  src_line[i] = '\n';

	}			/* end if */

      curr_line++;

    }				/* end while */
}


/* Function to display source in the source window.  This function
   initializes the horizontal scroll to 0.  */
void
tui_show_symtab_source (struct gdbarch *gdbarch, struct symtab *s,
			struct tui_line_or_address line, 
			int noerror)
{
  TUI_SRC_WIN->detail.source_info.horizontal_offset = 0;
  tui_update_source_window_as_is (TUI_SRC_WIN, gdbarch, s, line, noerror);
}


/* Answer whether the source is currently displayed in the source
   window.  */
int
tui_source_is_displayed (const char *fullname)
{
  return (TUI_SRC_WIN != NULL
	  && TUI_SRC_WIN->generic.content_in_use 
	  && (filename_cmp (((struct tui_win_element *)
			     (tui_locator_win_info_ptr ())->
			     content[0])->which_element.locator.full_name,
			    fullname) == 0));
}


/* Scroll the source forward or backward vertically.  */
void
tui_vertical_source_scroll (enum tui_scroll_direction scroll_direction,
			    int num_to_scroll)
{
  if (TUI_SRC_WIN->generic.content != NULL)
    {
      struct tui_line_or_address l;
      struct symtab *s;
      tui_win_content content = (tui_win_content) TUI_SRC_WIN->generic.content;
      struct symtab_and_line cursal = get_current_source_symtab_and_line ();

      if (cursal.symtab == (struct symtab *) NULL)
	s = find_pc_symtab (get_frame_pc (get_selected_frame (NULL)));
      else
	s = cursal.symtab;

      l.loa = LOA_LINE;
      if (scroll_direction == FORWARD_SCROLL)
	{
	  l.u.line_no = content[0]->which_element.source.line_or_addr.u.line_no
	    + num_to_scroll;
	  if (l.u.line_no > s->nlines)
	    /* line = s->nlines - win_info->generic.content_size + 1; */
	    /* elz: fix for dts 23398.  */
	    l.u.line_no
	      = content[0]->which_element.source.line_or_addr.u.line_no;
	}
      else
	{
	  l.u.line_no = content[0]->which_element.source.line_or_addr.u.line_no
	    - num_to_scroll;
	  if (l.u.line_no <= 0)
	    l.u.line_no = 1;
	}

      print_source_lines (s, l.u.line_no, l.u.line_no + 1, 0);
    }
}
@


1.36
log
@gdb/
	* ada-lang.c (user_select_syms): Replace symtab->filename refererences
	by symtab_to_filename_for_display calls.
	* breakpoint.c (print_breakpoint_location, resolve_sal_pc): Likewise.
	(clear_command): New variable sal_fullname, initialize it.  Replace
	compare_filenames_for_search by filename_cmp with sal_fullname.
	(say_where, update_static_tracepoint): Replace symtab->filename
	refererences by symtab_to_filename_for_display calls.
	* cli/cli-cmds.c (edit_command, list_command, ambiguous_line_spec):
	Likewise.
	* dwarf2read.c: Include source.h.
	(fixup_go_packaging): Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.
	* linespec.c (add_sal_to_sals): Rename variable filename to fullname.
	Replace symtab->filename refererences by symtab_to_filename_for_display
	calls.
	(create_sals_line_offset, convert_linespec_to_sals): New variable
	fullname, initialize it, replace symtab->filename reference by the
	variable.
	* linux-fork.c: Include source.h.
	(info_checkpoints_command): Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.
	* macroscope.c (sal_macro_scope): Replace symtab->filename refererences
	by symtab_to_filename_for_display calls.
	* mdebugread.c: Include source.h.
	(psymtab_to_symtab_1): Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file)
	(mi_cmd_file_list_exec_source_files): Likewise.
	* printcmd.c: Include source.h.
	(build_address_symbolic): Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.
	* psymtab.c (partial_map_symtabs_matching_filename)
	(read_psymtabs_with_fullname): Call compare_filenames_for_search also
	with psymtab_to_fullname.
	* python/py-symtab.c (stpy_str): Replace symtab->filename refererences
	by symtab_to_filename_for_display calls.
	(stpy_get_filename): New variable filename, initialize it, use instead
	of symtab->filename refererences.
	(salpy_str): Make variable filename const char *.  Replace
	symtab->filename refererences by symtab_to_filename_for_display calls.
	* skip.c: Include source.h and filenames.h.
	(skip_file_command): Remove const from the symtab variable.  Replace
	symtab->filename refererences by symtab_to_fullname call.
	(function_name_is_marked_for_skip): New variables searched_for_fullname
	and fullname.  Use them to search also with symtab's fullname.
	* source.c (find_source_lines): Replace symtab->filename refererences
	by symtab_to_filename_for_display calls.
	(print_source_lines_base): New variable filename, use it instead of
	symtab->filename.  Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.
	(line_info, forward_search_command): Replace symtab->filename
	refererences by symtab_to_filename_for_display calls.
	(reverse_search_command): Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.  New variable filename for it.
	* stack.c (frame_info): Likewise.
	* symmisc.c: Include source.h.
	(dump_objfile, dump_symtab_1, maintenance_print_symbols)
	(maintenance_info_symtabs): Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.
	* symtab.c (iterate_over_some_symtabs): Call
	compare_filenames_for_search also with symtab_to_fullname.
	(lookup_symbol_aux_quick, basic_lookup_transparent_type_quick): Replace
	symtab->filename refererences by symtab_to_filename_for_display calls.
	(find_line_symtab): Replace symtab->filename refererences by
	symtab_to_filename_for_display calls.
	(file_matches): Replace filename_cmp by compare_filenames_for_search.
	(print_symbol_info): Make the last parameter const char *.  New
	variable s_filename.  Use it in the function.
	(symtab_symbol_info): Make the last_filename variable const char *.
	Replace symtab->filename refererences by symtab_to_filename_for_display
	calls.
	(rbreak_command): New variable fullname.  Use it.  Replace
	symtab->filename refererence by symtab_to_filename_for_display call.
	* tracepoint.c (set_traceframe_context, trace_find_line_command)
	(print_one_static_tracepoint_marker): Replace symtab->filename
	refererences by symtab_to_filename_for_display calls.
	* tui/tui-source.c (tui_set_source_content): New variables filename and
	s_filename.  Replace symtab->filename refererences by this variable.
	Replace other symtab->filename refererences by
	symtab_to_filename_for_display calls.
@
text
@d156 2
a157 2
				       locator->content[0])->which_element.locator.file_name,
				       s->filename) == 0
d338 1
a338 1
tui_source_is_displayed (const char *fname)
d344 2
a345 2
			     content[0])->which_element.locator.file_name,
			    fname) == 0));
@


1.35
log
@gdb/
	* tui/tui-data.c (init_win_info, tui_del_window, tui_free_window):
	Rename field reference filename to fullname.
	* tui/tui-data.h (struct tui_source_info): Rename field filename to
	fullname.  New comment for it.
	* tui/tui-source.c (tui_set_source_content): Rename field reference
	filename to fullname.  Initialize field by symtab_to_fullname now.
	* tui/tui-winsource.c (tui_update_breakpoint_info): Rename field
	reference filename to fullname.  Use symtab_to_fullname during
	comparison.
@
text
@d66 2
a67 1
		  char *name = alloca (strlen (s->filename) + 100);
d69 1
a69 1
		  sprintf (name, "%s:%d", s->filename, line_no);
d82 5
a86 3
		  printf_unfiltered (
			  "Line number %d out of range; %s has %d lines.\n",
				      line_no, s->filename, s->nlines);
d91 1
a91 1
		  perror_with_name (s->filename);
d100 1
d104 1
a104 1
                  TUI_SRC_WIN->generic.title = xstrdup (s->filename);
@


1.34
log
@gdb/
	Code cleanup.
	* psymtab.c (psymtab_to_fullname, psymtab_to_fullname): Make the return
	type const char *.
	* tui/tui-source.c (tui_source_is_displayed): Make the parameter fname
	const char *.
	* tui/tui-source.h (tui_source_is_displayed): Likewise.
@
text
@d102 2
a103 3
                  if (src->filename)
                    xfree (src->filename);
                  src->filename = xstrdup (s->filename);
@


1.33
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d335 1
a335 1
tui_source_is_displayed (char *fname)
@


1.32
log
@gdb/
	Code cleanup.
	* dwarf2read.c (fixup_go_packaging): Do not check symtab->FILENAME for
	NULL.
	* linespec.c (add_sal_to_sals): Likewise.
	* psympriv.h (allocate_psymtab): Add ATTRIBUTE_NONNULL.
	* stack.c (print_frame): Do not check symtab->FILENAME for NULL.
	* symfile.h (allocate_symtab): Add ATTRIBUTE_NONNULL.
	* symtab.h (struct symtab): Add comment it is never NULL for filename.
	* tracepoint.c (set_traceframe_context): Do not check symtab->FILENAME
	for NULL.
	* tui/tui-source.c (tui_set_source_content): Likewise.
@
text
@d3 1
a3 1
   Copyright (C) 1998-2004, 2007-2012 Free Software Foundation, Inc.
@


1.31
log
@Check if TUI_SRC_WIN is not NULL before referencing it

	PR tui/14486
	* tui/tui-source.c (tui_source_is_displayed): Check if TUI_SRC_WIN
	is not NULL before referencing it.
@
text
@d49 1
a49 1
  if (s != (struct symtab *) NULL && s->filename != (char *) NULL)
@


1.30
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d337 2
a338 1
  return (TUI_SRC_WIN->generic.content_in_use 
@


1.29
log
@2011-03-25  Kai Tietz  <ktietz@@redhat.com>

        * tui/tui-source.c (tui_set_source_content): Use filename_cmp
        instead of strcmp for comparison.
        (tui_source_is_displayed): Likewise.
        * tui/tui-winsource.c (tui_update_breakpoint_info): Likewise.
@
text
@d3 1
a3 2
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009,
   2010, 2011 Free Software Foundation, Inc.
@


1.29.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 1
   Copyright (C) 1998-2004, 2007-2012 Free Software Foundation, Inc.
@


1.28
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* cli/cli-cmds.c: Shorten lines of >= 80 columns.
	* cli/cli-decode.c: Ditto.
	* cli/cli-dump.c: Ditto.
	* cli/cli-logging.c: Ditto.
	* cli/cli-script.c: Ditto.
	* cli/cli-setshow.c: Ditto.
	* common/signals.c: Ditto.
	* mi/mi-cmd-break.c: Ditto.
	* mi/mi-cmd-disas.c: Ditto.
	* mi/mi-cmd-stack.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-cmds.c: Ditto.
	* mi/mi-common.h: Ditto.
	* mi/mi-console.c: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
	* osf-share/cma_attr.c: Ditto.
	* osf-share/cma_deb_core.h: Ditto.
	* osf-share/cma_debug_client.h: Ditto.
	* osf-share/cma_handle.h: Ditto.
	* osf-share/cma_mutex.h: Ditto.
	* osf-share/cma_stack_int.h: Ditto.
	* osf-share/cma_tcb_defs.h: Ditto.
	* python/py-auto-load.c: Ditto.
	* python/py-breakpoint.c: Ditto.
	* python/py-cmd.c: Ditto.
	* python/py-frame.c: Ditto.
	* python/py-objfile.c: Ditto.
	* python/py-param.c: Ditto.
	* python/py-progspace.c: Ditto.
	* python/py-symbol.c: Ditto.
	* python/py-value.c: Ditto.
	* python/python-internal.h: Ditto.
	* python/python.c: Ditto.
	* tui/tui-data.c: Ditto.
	* tui/tui-disasm.c: Ditto.
	* tui/tui-hooks.c: Ditto.
	* tui/tui-io.c: Ditto.
	* tui/tui-layout.c: Ditto.
	* tui/tui-regs.c: Ditto.
	* tui/tui-source.c: Ditto.
	* tui/tui-stack.c: Ditto.
	* tui/tui-win.c: Ditto.
	* tui/tui-windata.c: Ditto.
	* tui/tui-winsource.c: Ditto.
@
text
@d31 1
d153 3
a155 3
			(strcmp (((struct tui_win_element *)
				  locator->content[0])->which_element.locator.file_name,
				 s->filename) == 0
d339 4
a342 4
	  && (strcmp (((struct tui_win_element *)
		       (tui_locator_win_info_ptr ())->
		       content[0])->which_element.locator.file_name,
		      fname) == 0));
@


1.27
log
@run copyright.sh for 2011.
@
text
@d93 4
a96 2
		  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();
                  struct tui_source_info *src = &TUI_SRC_WIN->detail.source_info;
d121 2
a122 1
		      struct tui_win_element *element = (struct tui_win_element *)
d135 2
a136 2
		      i = cur_len -
			((cur_len / tui_default_tab_len ()) * tui_default_tab_len ());
d183 2
a184 1
					  int j, max_tab_len = tui_default_tab_len ();
d186 2
a187 1
					  for (j = i - ((i / max_tab_len) * max_tab_len);
d222 2
a223 2
			strcpy (((struct tui_win_element *) TUI_SRC_WIN->generic.content[
					cur_line])->which_element.source.line,
d338 4
a341 2
	  && (strcmp (((struct tui_win_element *) (tui_locator_win_info_ptr ())->
		       content[0])->which_element.locator.file_name, fname) == 0));
d370 2
a371 1
	    l.u.line_no = content[0]->which_element.source.line_or_addr.u.line_no;
@


1.26
log
@2010-05-17  Michael Snyder  <msnyder@@vmware.com>

	* tui/tui.c: White space.
	* tui/tui-data.c: White space.
	* tui/tui-disasm.c: White space.
	* tui/tui-file.c: White space.
	* tui/tui-interp.c: White space.
	* tui/tui-main.c: White space.
	* tui/tui-out.c: White space.
	* tui/tui-regs.c: White space.
	* tui/tui-source.c: White space.
	* tui/tui-stack.c: White space.
	* tui/tui-win.c: White space.
	* tui/tui-winsource.c: White space.
@
text
@d4 1
a4 1
   2010 Free Software Foundation, Inc.
@


1.25
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d67 1
d120 1
a120 1
		      TUI_SRC_WIN->generic.content[cur_line];
d267 1
@


1.24
log
@	* disasm.h (gdb_disassembly): Add GDBARCH parameter.
	(gdb_print_insn): Likewise.
	* disasm.c (dump_insns): Add GDBARCH parameter.  Use it instead
	of current_gdbarch.
	(do_mixed_source_and_assembly): Add GDBARCH parameter.  Pass to
	dump_insns.
	(do_assembly_only): Likewise.
	(gdb_disassembly): Add GDBARCH parameter.  Use it instead of
	current_gdbarch.  Pass to subroutines.
	(gdb_print_insn): Add GDBARCH parameter.  Use it instead of
	current_gdbarch.

	* stack.c (struct gdb_disassembly_stub_args): Add GDBARCH member.
	(gdb_disassembly_stub): Pass architecture to gdb_disassembly.
	(do_gdb_disassembly): Add GDBARCH argument.  Store into args.
	(print_frame_info): Pass architecture to do_gdb_disassembly.

	* printcmd.c (print_formatted): Pass architecture to gdb_print_insn.

	* mi/mi-cmd-disas.c: Include "arch-utils.h"
	(mi_cmd_disassemble): Pass architecture to gdb_disassembly.

	* cli/cli-cmds.c: Include "arch-utils.h".
	(print_disassembly): Add GDBARCH parameter.  Pass to gdb_disassembly
	and tui_show_assembly.
	(disassemble_current_function): Pass architecture to
	tui_get_low_disassembly_address and print_disassembly.
	(disassemble_command): Pass architecture to
	tui_get_low_disassembly_address and print_disassembly.

	* tui/tui.c (tui_show_assembly): Add GDBARCH parameter.  Pass to
	tui_update_source_windows_with_addr.

	* tui/tui-data.h (struct tui_locator_element): Add GDBARCH member.
	(struct tui_source_info): Likewise.
	* tui/tui-data.c (tui_clear_win_detail): Clear source_info.gdbarch.

	* tui/tui-disasm.c (tui_disassemble): Add GDBARCH parameter.
	Pass to gdb_print_insn.
	(tui_find_disassembly_address): Add GDBARCH parameter.  Pass to
	tui_disassemble.
	(tui_set_disassem_content): Add GDBARCH parameter.  Install into
	source_info.gdbarch.  Pass to tui_disassemble.
	(tui_show_disassem): Add GDBARCH parameter.  Pass to
	tui_update_source_window.
	(tui_show_disassem_and_update_source): Add GDBARCH parameter.  Pass to
	tui_show_disassem and tui_update_source_window.

	(tui_get_begin_asm_address): Return locator architecture in addition
	to locator PC value.

	(tui_get_low_disassembly_address): Add GDBARCH parameter.   Pass to
	tui_get_low_disassembly_address.

	(tui_vertical_disassem_scroll): Pass architecture to subroutines.

	* tui/tui-disasm.h (tui_set_disassem_content): Add GDBARCH parameter.
	(tui_show_disassem): Likewise.
	(tui_show_disassem_and_update_source): Likewise.
	(tui_get_begin_asm_address): Return architecture and PC value.

	* tui/tui.h (tui_get_low_disassembly_address): Add GDBARCH parameter.
	(tui_show_assembly): Add GDBARCH parameter.

	* tui/tui-layout.c (extract_display_start_addr): Return current window
	architecture in addition to current PC value.

	(tui_set_layout): Update calls to tui_get_low_disassembly_address and
	extract_display_start_addr.  Pass architecture to
	tui_update_source_windows_with_addr.

	* tui/tui-source.c: Include "objfiles.h".
	(tui_set_source_content): Initialize window architecture.
	(tui_show_symtab_source): Add GDBARCH parameter.  Pass to
	tui_update_source_window_as_is

	* tui/tui-source.h (tui_show_symtab_source): Add GDBARCH parameter.

	* tui/tui-stack.c (tui_set_locator_info): Add GDBARCH parameter.
	Install locator architecture.
	(tui_set_locator_filename): Update call.
	(tui_show_frame_info): Pass architecture to tui_set_locator_info
	and subroutines.

	* tui/tui-win.c (make_visible_with_new_height): Pass architecture
	to tui_update_source_window.

	* tui/tui-winsource.c: Include "objfiles.h".
	(tui_display_main): Update call to tui_get_begin_asm_address.
	Pass architecture to tui_update_source_windows_with_addr.
	(tui_update_source_window): Add GDBARCH parameter.  Pass to
	tui_update_source_window_as_is.
	(tui_update_source_window_as_is): Add GDBARCH parameter.
	Pass to tui_set_disassem_content.
	(tui_update_source_windows_with_addr): Add GDBARCH parameter.
	Pass to subroutines.
	(tui_update_source_windows_with_line): Pass objfile architecture
	to subroutines.
	(tui_horizontal_source_scroll): Pass architecture to
	tui_update_source_window_as_is.

	* tui/tui-winsource.h (tui_update_source_window): Add GDBARCH
	parameter.
	(tui_update_source_window_as_is): Likewise.
	(tui_update_source_windows_with_addr): Likewise.
@
text
@d3 2
a4 2
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009
   Free Software Foundation, Inc.
@


1.23
log
@        Updated copyright notices for most files.
@
text
@d30 1
d110 1
d316 1
a316 1
tui_show_symtab_source (struct symtab *s, 
d321 1
a321 1
  tui_update_source_window_as_is (TUI_SRC_WIN, s, line, noerror);
@


1.22
log
@	Updated copyright notices for most files.
@
text
@d3 1
a3 1
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008
@


1.21
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d3 1
a3 1
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007
@


1.20
log
@2007-08-14  Michael Snyder  <msnyder@@access-company.com>

	* tui-command.c, tui-data.c, tui-disasm.c, tui-file.c, tui-io.c,
	tui-layout.c, tui-regs.c, tui-source.c, tui-win.c, tui-windata.c,
	tui-wingeneral.c, tui-winsource.c: Coding standard, && and ||
	go at beginning of new line.
@
text
@d12 1
a12 1
   the Free Software Foundation; either version 2 of the License, or
d21 1
a21 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.19
log
@2007-08-14  Michael Snyder  <msnyder@@access-company.com>

	* tui-data.c, tui-data.h, tui-disasm.c, tui-disasm.h, tui-hooks.c,
	tui-io.c, tui-layout.c, tui-layout.h, tui-out.c, tui-regs.c,
	tui-source.c, tui-source.h, tui-stack.c, tui-win.c, tui-win.h,
	tui-windata.c, tui-windata.h, tui-wingeneral.c, tui-winsource.c,
	tui-winsource.h, tui.c, tui.h: Function declarations and
	definitions, wrap long lines.
@
text
@d149 1
a149 1
			locator->content[0])->which_element.locator.file_name,
d152 1
a152 1
			 locator->content[0])->which_element.locator.line_no);
d158 2
a159 2
			      if ((c != '\n') &&
				  (c != '\r') && (++i < threshold))
d181 3
a183 4
					  for (j = i - (
					       (i / max_tab_len) * max_tab_len);
					       ((j < max_tab_len) &&
						i < threshold);
d199 3
a201 2
				  if (c == '\r' &&
				     (c = fgetc (stream)) != '\n' && c != EOF)
d209 3
a211 2
			  while (c != EOF && c != '\n' && c != '\r' &&
				 i < threshold && (c = fgetc (stream)));
d330 3
a332 3
  return (TUI_SRC_WIN->generic.content_in_use &&
	  (strcmp (((struct tui_win_element *) (tui_locator_win_info_ptr ())->
		  content[0])->which_element.locator.file_name, fname) == 0));
@


1.18
log
@2007-08-14  Michael Snyder  <msnyder@@access-company.com>

	* tui-command.c, tui-data.c, tui-data.h, tui-disasm.c, tui-file.c,
	tui-hooks.c, tui-interp.c, tui-io.c, tui-layout.c, tui-out.c,
	tui-regs.c, tui-regs.h, tui-source.c, tui-stack.c, tui-win.c,
	tui-windata.c, tui-wingeneral.c, tui-winsource.c, tui-winsource.h,
	tui.c, tui.h: Comment reformatting to coding standard (capitals,
	spaces after periods, etc).
@
text
@d44 3
a46 1
tui_set_source_content (struct symtab *s, int line_no, int noerror)
d245 2
a246 1
tui_set_source_content_nil (struct tui_win_info *win_info, char *warning_string)
d315 3
a317 1
tui_show_symtab_source (struct symtab *s, struct tui_line_or_address line, int noerror)
@


1.17
log
@2007-08-14  Michael Snyder  <msnyder@@access-company.com>

	* tui-data.c, tui-data.h, tui-disasm.c, tui-hooks.c, tui-layout.c,
	tui-regs.c, tui-source.c, tui-stack.c, tui-win.c, tui-windata.c,
	tui-wingeneral.c, tui-wingeneral.h, tui-winsource.c, tui.c,
	tui-winsource.h: Whitespace changes, fix pointer declarations
	to be consistant.
@
text
@d57 2
a58 2
	  /* Take hilite (window border) into account, when calculating
	     the number of lines  */
d102 2
a103 2
		  /* Determine the threshold for the length of the line
                     and the offset to start the display.  */
d119 1
a119 1
		      /* get the first character in the line */
d126 1
a126 1
		      /* Init the line with the line number */
d139 2
a140 2
		      /* Set whether element is the execution point and
		         whether there is a break point on it.  */
d170 5
a174 5
				    {	/* Store the charcter in the line
					   buffer.  If it is a tab, then
					   translate to the correct number of
					   chars so we don't overwrite our
					   buffer.  */
d193 2
a194 2
				{	/* If we have not reached EOL, then eat
                                           chars until we do  */
d210 2
a211 1
		      /* Now copy the line taking the offset into account */
d236 1
a236 1
/* elz: this function sets the contents of the source window to empty
d238 1
a238 1
   source not being available. This function is called by
d252 2
a253 2
  /* set to empty each line in the window, except for the one
     which contains the message */
d256 3
a258 3
      /* set the information related to each displayed line
         to null: i.e. the line number is 0, there is no bp,
         it is not where the program is stopped */
d267 1
a267 1
      /* set the contents of the line to blank */
d270 1
a270 1
      /* if the current line is in the middle of the screen, then we
d273 3
a275 2
         comes from the function tui_erase_source_content(). We need
         to keep the screen and the window's actual contents in synch.  */
d353 2
a354 2
	    /*line = s->nlines - win_info->generic.content_size + 1; */
	    /*elz: fix for dts 23398 */
@


1.16
log
@	* frame.c (deprecated_selected_frame): Rename to...
	(selected_frame): ...this.  Make static.
	(get_selected_frame, select_frame): Update.
	* frame.h (deprected_select_frame): Delete.
	(deprecated_safe_get_selected_frame): Update comments.

	* breakpoint.c, cli/cli-cmds.c, f-valprint.c, infcmd.c, inflow.c,
	infrun.c, stack.c, tui/tui-disasm.c, tui/tui-source.c,
	tui/tui-winsource.c, valops.c, varobj.c, findvar.c, macroscope.c,
	parse.c, regcache.h, sh64-tdep.c, tui/tui-hooks.c, tui/tui-win.c,
	tui/tui.c: Replace references to deprecated_selected_frame.
@
text
@d91 2
a92 2
		  struct tui_gen_win_info * locator = tui_locator_win_info_ptr ();
                  struct tui_source_info * src = &TUI_SRC_WIN->detail.source_info;
d116 1
a116 1
		      struct tui_win_element * element = (struct tui_win_element *)
d242 1
a242 1
tui_set_source_content_nil (struct tui_win_info * win_info, char *warning_string)
d259 2
a260 2
      struct tui_win_element * element =
      (struct tui_win_element *) win_info->generic.content[curr_line];
@


1.15
log
@Copyright updates for 2007.
@
text
@d341 1
a341 1
	s = find_pc_symtab (get_frame_pc (deprecated_selected_frame));
@


1.14
log
@2006-10-11  Denis Pilat  <denis.pilat@@st.com>

	* tui/tui-source.c (tui_set_source_content): handle source
	files that contain non unix end-of-line.
@
text
@d3 2
a4 2
   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
   Foundation, Inc.
@


1.13
log
@	* tui/tui-file.c:
	* tui/tui-disasm.c:
	* tui/tui-data.h:
	* tui/tui-data.c:
	* tui/tui-command.h:
	* tui/tui-command.c:
	* tui/tui-win.h:
	* tui/tui-win.h:
	* tui/tui-win.c:
	* tui/tui-stack.h:
	* tui/tui-stack.c:
	* tui/tui-source.h:
	* tui/tui-source.c:
	* tui/tui-regs.h:
	* tui/tui-regs.c:
	* tui/tui-out.c:
	* tui/tui-main.c:
	* tui/tui-layout.h:
	* tui/tui-layout.c:
	* tui/tui-io.h:
	* tui/tui-io.c:
	* tui/tui-interp.c:
	* tui/tui-hooks.h:
	* tui/tui-hooks.c:
	* tui/tui-file.h:
	* tui/tui.h:
	* tui/tui.c:
	* tui/tui-winsource.h:
	* tui/tui-winsource.c:
	* tui/tui-wingeneral.h:
	* tui/tui-wingeneral.c:
	* tui/tui-windata.h:
	* tui/tui-windata.c: Add (C) after Copyright.  Update the FSF
	address.
@
text
@d197 8
@


1.13.2.1
log
@Merge XML and VFP support to this branch.
@
text
@d333 1
a333 1
	s = find_pc_symtab (get_frame_pc (get_selected_frame (NULL)));
@


1.13.4.1
log
@Add a Debian patch that prevents some bogus "No selected frame" errors.
This needs to go to mainline separately.
@
text
@d333 1
a333 1
	s = find_pc_symtab (get_frame_pc (get_selected_frame (NULL)));
@


1.12
log
@2005-11-01  Andrew Stubbs  <andrew.stubbs@@st.com>

	* tui/tui-data.h (tui_line_or_address): Encapsulate the union in a
	struct with a tag.
	(tui_source_element, tui_source_info): Update.
	* tui/tui-disasm.c, tui/tui-source.c: Update to use the tagged union.
	* tui/tui-source.h, tui/tui-stack.c, tui/tui-win.c: Likewise.
	* tui/tui-winsource.c, tui/tui-data.c, tui/tui-layout.c: Likewise.
	* tui/tui-winsource.h: Likewise.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
d22 2
a23 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.11
log
@2004-02-16  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-windata.c: Include "gdb_string.h".
	* tui/tui-source.c, tui/tui-winsource.c: Ditto.
	* tui/tui-layout.c, tui/tui-command.c: Ditto.
	* Makefile.in: Update dependencies.
@
text
@d109 2
a110 1
		  cur_line_no = src->start_line_or_addr.line_no = line_no;
d141 3
a143 1
		      element->which_element.source.line_or_addr.line_no =
d253 2
a254 1
      element->which_element.source.line_or_addr.line_no = 0;
d302 1
a302 1
tui_show_symtab_source (struct symtab *s, union tui_line_or_address line, int noerror)
d327 1
a327 1
      union tui_line_or_address l;
d337 1
d340 3
a342 3
	  l.line_no = content[0]->which_element.source.line_or_addr.line_no +
	    num_to_scroll;
	  if (l.line_no > s->nlines)
d345 1
a345 1
	    l.line_no = content[0]->which_element.source.line_or_addr.line_no;
d349 4
a352 4
	  l.line_no = content[0]->which_element.source.line_or_addr.line_no -
	    num_to_scroll;
	  if (l.line_no <= 0)
	    l.line_no = 1;
d355 1
a355 1
      print_source_lines (s, l.line_no, l.line_no + 1, 0);
@


1.11.8.1
log
@merge mainline changes to branch
@
text
@@


1.10
log
@2004-02-10  Andrew Cagney  <cagney@@redhat.com>

	* defs.h: Do not include "tui.h".
	* gdb_curses.h: New file.
	* tui/tui-hooks.h: New file.
	* tui/tui.h (tui_update_all_exec_infos): Delete declaration.
	(tui_install_hooks, tui_remove_hooks): Delete declarations.
	(tui_initialize_io): Delete declaration.
	(tui_initialize_readline: Delete redundant declaration.
	(struct tui_point): Delete definition.
	* tui/tui-data.h (struct tui_point): Define.
	* cli/cli-decode.c [TUI]: Include "tui/tui.h".
	* utils.c: Include "tui/tui.h".
	* tui/tui-data.h: Include "tui/tui.h" and "gdb_curses.h".
	* printcmd.c [TUI]: Include "tui/tui.h".
	* cli/cli-cmds.c [TUI]: Include "tui/tui.h".
	* tui/tui-command.c: Include "gdb_curses.h".
	* tui/tui.c, tui/tui-winsource.c, tui/tui-wingeneral.c: Ditto.
	* tui/tui-windata.c, tui/tui-win.c, tui/tui-stack.c: Ditto.
	* tui/tui-source.c, tui/tui-regs.c, tui/tui-layout.c: Ditto.
	* tui/tui-io.c, tui/tui-disasm.c, tui/tui-data.c: : Ditto.
	* tui/tui-hooks.c: Include "tui-hooks.h" and "gdb_curses.h".
	* Makefile.in: Update all dependencies.
	(tui_hooks_h, gdb_curses_h): Define.
	(SUBDIR_TUI_CFLAGS): Remove -I${srcdir}/tui.
@
text
@d39 1
@


1.9
log
@2004-02-07  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-command.c: Include "gdb_string.h", delete register
	attribute, use ISO-C function signatures.
	* tui/tui-disasm.c, tui/tui-file.c, tui/tui-io.c: Ditto.
	* tui/tui-layout.c, tui/tui-regs.c, tui/tui-source.c: Ditto.
	* tui/tui-stack.c, tui/tui-win.c, tui/tui-winsource.c: Ditto.
	* tui/tui.c: Ditto.
@
text
@d39 1
a39 7
#ifdef HAVE_NCURSES_H       
#include <ncurses.h>
#else
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#endif
@


1.9.2.1
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d55 3
a57 3
      register FILE *stream;
      register int i, desc, c, lineWidth, nlines;
      register char *srcLine = 0;
d61 1
a61 1
	  lineWidth = TUI_SRC_WIN->generic.width - 1;
d95 1
a95 1
		  register int offset, curLineNo, curLine, curLen, threshold;
d110 1
a110 1
		  threshold = (lineWidth - 1) + offset;
d113 2
a114 2
		  curLine = 0;
		  curLineNo = src->start_line_or_addr.line_no = line_no;
d116 1
a116 1
		    srcLine = (char *) xmalloc (
d118 1
a118 1
		  while (curLine < nlines)
d121 1
a121 1
		      TUI_SRC_WIN->generic.content[curLine];
d127 1
a127 1
			srcLine = ((struct tui_win_element *)
d129 1
a129 1
					curLine])->which_element.source.line;
d131 4
a134 4
		      sprintf (srcLine, "%-6d", curLineNo);
		      curLen = strlen (srcLine);
		      i = curLen -
			((curLen / tui_default_tab_len ()) * tui_default_tab_len ());
d137 1
a137 1
			  srcLine[curLen] = ' ';
d139 1
a139 1
			  curLen++;
d141 1
a141 1
		      srcLine[curLen] = (char) 0;
d146 1
a146 1
			curLineNo;
d151 1
a151 1
			 && curLineNo == ((struct tui_win_element *)
d155 1
a155 1
			  i = strlen (srcLine) - 1;
d163 2
a164 2
				      srcLine[i++] = '^';
				      srcLine[i] = c + 0100;
d168 2
a169 2
				      srcLine[i++] = '^';
				      srcLine[i] = '?';
d179 1
a179 1
					  int j, maxTabLen = tui_default_tab_len ();
d182 2
a183 2
					       (i / maxTabLen) * maxTabLen);
					       ((j < maxTabLen) &&
d186 1
a186 1
					    srcLine[i] = ' ';
d190 1
a190 1
					srcLine[i] = c;
d192 1
a192 1
				  srcLine[i + 1] = 0;
d205 1
a205 1
		      if (strlen (srcLine) > offset)
d207 2
a208 2
					curLine])->which_element.source.line,
				&srcLine[offset]);
d212 3
a214 3
			  curLine])->which_element.source.line[0] = (char) 0;
		      curLine++;
		      curLineNo++;
d217 1
a217 1
		    xfree (srcLine);
d232 2
a233 2
   tuiEraseSourceContents, which in turn is invoked when the source
   files cannot be accessed.  */
d236 1
a236 1
tui_set_source_content_nil (struct tui_win_info * winInfo, char *warning_string)
d238 2
a239 2
  int lineWidth;
  int nLines;
d242 2
a243 2
  lineWidth = winInfo->generic.width - 1;
  nLines = winInfo->generic.height - 2;
d247 1
a247 1
  while (curr_line < winInfo->generic.content_size)
d254 1
a254 1
      (struct tui_win_element *) winInfo->generic.content[curr_line];
d262 5
a266 5
      /* if the current line is in the middle of the screen, then we want to
         display the 'no source available' message in it.
         Note: the 'weird' arithmetic with the line width and height comes from
         the function tuiEraseSourceContent. We need to keep the screen and the
         window's actual contents in synch */
d268 1
a268 1
      if (curr_line == (nLines / 2 + 1))
d273 1
a273 1
	  char *srcLine;
d275 1
a275 1
	  srcLine = element->which_element.source.line;
d277 1
a277 1
	  if (warning_length >= ((lineWidth - 1) / 2))
d280 1
a280 1
	    xpos = (lineWidth - 1) / 2 - warning_length;
d283 1
a283 1
	    srcLine[i] = ' ';
d285 1
a285 1
	  sprintf (srcLine + i, "%s", warning_string);
d287 2
a288 2
	  for (i = xpos + warning_length; i < lineWidth; i++)
	    srcLine[i] = ' ';
d290 1
a290 1
	  srcLine[i] = '\n';
d323 2
a324 2
tui_vertical_source_scroll (enum tui_scroll_direction scrollDirection,
			    int numToScroll)
d338 1
a338 1
      if (scrollDirection == FORWARD_SCROLL)
d341 1
a341 1
	    numToScroll;
d343 1
a343 1
	    /*line = s->nlines - winInfo->generic.content_size + 1; */
d350 1
a350 1
	    numToScroll;
@


1.8
log
@2004-02-07  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-command.c: Change variable and function names to lower
	case.
	* tui/tui-data.c, tui/tui-disasm.c: Ditto.
	* tui/tui-hooks.c, tui/tui-io.c, tui/tui-layout.c: Ditto.
	* tui/tui-regs.c, tui/tui-source.c, tui/tui-stack.c: Ditto.
	* tui/tui-win.c, tui/tui-windata.c, tui/tui-wingeneral.c: Ditto.
	* tui/tui-winsource.c, tui/tui.c: Ditto.
@
text
@d55 3
a57 3
      register FILE *stream;
      register int i, desc, c, line_width, nlines;
      register char *src_line = 0;
d95 1
a95 1
		  register int offset, cur_line_no, cur_line, cur_len, threshold;
@


1.7
log
@2004-02-07  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui.h: Do not include <stdarg.h>, <string.h>, and
	"ansidecl.h".  Do not undef "reg" and "chtype".  Fix case of
	fields and variables.
	* tui/tui-wingeneral.h (m_beVisible): Delete macro.
	(m_beInvisible): Delete macro.
	* tui/tui-data.h: Fix case case fields and variables.
	(m_genWinPtrIsNull): Delete macro.
	(tui_win_list): Rename winList.
	(TUI_SRC_WIN): Rename srcWin.
	(TUI_DISASM_WIN): Rename disassemWin.
	(TUI_DATA_WIN): Rename dataWin.
	(TUI_CMD_WIN): Rename cmdWin.
	(m_genWinPtrNotNull): Delete macro.
	(m_winPtrIsNull): Delete macro.
	(m_winPtrNotNull): Delete macro.
	(tui_win_is_source_type): Replace m_winIsSourceType
	(tui_win_is_auxillary): Replace m_winIsAuzillary.
	(tui_win_has_locator): Replace m_hasLocator.
	(tui_set_win_highlight): Replace m_setWinHighlightOn and
	m_setWinHighlightOff.
	* tui/tui-data.c: Update references.
	(tui_win_is_source_type, tui_set_win_highlight): New functions.
	(tui_win_has_locator, tui_win_is_auxillary): New functions.
	* tui/tui-command.c, tui/tui-disasm.c: Update references.
	* tui/tui-io.c, tui/tui-layout.c, tui/tui-regs.c: Ditto.
	* tui/tui-regs.h, tui/tui-source.c, tui/tui-stack.c: Ditto.
	* tui/tui-win.c, tui/tui-windata.c, tui/tui-wingeneral.c: Ditto.
	* tui/tui-winsource.c, tui/tui.c: Ditto.
@
text
@d56 2
a57 2
      register int i, desc, c, lineWidth, nlines;
      register char *srcLine = 0;
d61 1
a61 1
	  lineWidth = TUI_SRC_WIN->generic.width - 1;
d95 1
a95 1
		  register int offset, curLineNo, curLine, curLen, threshold;
d110 1
a110 1
		  threshold = (lineWidth - 1) + offset;
d113 2
a114 2
		  curLine = 0;
		  curLineNo = src->start_line_or_addr.line_no = line_no;
d116 1
a116 1
		    srcLine = (char *) xmalloc (
d118 1
a118 1
		  while (curLine < nlines)
d121 1
a121 1
		      TUI_SRC_WIN->generic.content[curLine];
d127 1
a127 1
			srcLine = ((struct tui_win_element *)
d129 1
a129 1
					curLine])->which_element.source.line;
d131 4
a134 4
		      sprintf (srcLine, "%-6d", curLineNo);
		      curLen = strlen (srcLine);
		      i = curLen -
			((curLen / tui_default_tab_len ()) * tui_default_tab_len ());
d137 1
a137 1
			  srcLine[curLen] = ' ';
d139 1
a139 1
			  curLen++;
d141 1
a141 1
		      srcLine[curLen] = (char) 0;
d146 1
a146 1
			curLineNo;
d151 1
a151 1
			 && curLineNo == ((struct tui_win_element *)
d155 1
a155 1
			  i = strlen (srcLine) - 1;
d163 2
a164 2
				      srcLine[i++] = '^';
				      srcLine[i] = c + 0100;
d168 2
a169 2
				      srcLine[i++] = '^';
				      srcLine[i] = '?';
d179 1
a179 1
					  int j, maxTabLen = tui_default_tab_len ();
d182 2
a183 2
					       (i / maxTabLen) * maxTabLen);
					       ((j < maxTabLen) &&
d186 1
a186 1
					    srcLine[i] = ' ';
d190 1
a190 1
					srcLine[i] = c;
d192 1
a192 1
				  srcLine[i + 1] = 0;
d205 1
a205 1
		      if (strlen (srcLine) > offset)
d207 2
a208 2
					curLine])->which_element.source.line,
				&srcLine[offset]);
d212 3
a214 3
			  curLine])->which_element.source.line[0] = (char) 0;
		      curLine++;
		      curLineNo++;
d217 1
a217 1
		    xfree (srcLine);
d232 2
a233 2
   tuiEraseSourceContents, which in turn is invoked when the source
   files cannot be accessed.  */
d236 1
a236 1
tui_set_source_content_nil (struct tui_win_info * winInfo, char *warning_string)
d238 2
a239 2
  int lineWidth;
  int nLines;
d242 2
a243 2
  lineWidth = winInfo->generic.width - 1;
  nLines = winInfo->generic.height - 2;
d247 1
a247 1
  while (curr_line < winInfo->generic.content_size)
d254 1
a254 1
      (struct tui_win_element *) winInfo->generic.content[curr_line];
d262 5
a266 5
      /* if the current line is in the middle of the screen, then we want to
         display the 'no source available' message in it.
         Note: the 'weird' arithmetic with the line width and height comes from
         the function tuiEraseSourceContent. We need to keep the screen and the
         window's actual contents in synch */
d268 1
a268 1
      if (curr_line == (nLines / 2 + 1))
d273 1
a273 1
	  char *srcLine;
d275 1
a275 1
	  srcLine = element->which_element.source.line;
d277 1
a277 1
	  if (warning_length >= ((lineWidth - 1) / 2))
d280 1
a280 1
	    xpos = (lineWidth - 1) / 2 - warning_length;
d283 1
a283 1
	    srcLine[i] = ' ';
d285 1
a285 1
	  sprintf (srcLine + i, "%s", warning_string);
d287 2
a288 2
	  for (i = xpos + warning_length; i < lineWidth; i++)
	    srcLine[i] = ' ';
d290 1
a290 1
	  srcLine[i] = '\n';
d323 2
a324 2
tui_vertical_source_scroll (enum tui_scroll_direction scrollDirection,
			    int numToScroll)
d338 1
a338 1
      if (scrollDirection == FORWARD_SCROLL)
d341 1
a341 1
	    numToScroll;
d343 1
a343 1
	    /*line = s->nlines - winInfo->generic.content_size + 1; */
d350 1
a350 1
	    numToScroll;
@


1.6
log
@2004-02-07  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui.h (Opaque, OpaquePtr OpaqueList): Delete definition.
	(TuiPoint, TuiPointPtr): Ditto.
	(TuiStatus, TuiStatusPtr): Ditto.
	(TuiWinType, TuiWinTypePtr): Ditto.
	(struct tui_point): Rename _TuiPoint.
	(tui_get_low_disassembly_address): Rename
	tuiGetLowDisassemblyAddress.
	(tui_update_all_exec_infos): Rename tuiUpdateAllExecInfos.
	(tuiFree): Delete declaration.
	(OpaqueFuncPtr, TuiOpaqueFuncPtr): Delete definitions.
	(TuiVoidFuncPtr, TuiIntFuncPtr): Delete definitions.
	* tui/tui.c (tuiFree): Delete function.
	* cli/cli-cmds.c (disassemble_command): Update references.
	* tui/tui-data.c, tui/tui-data.h, tui/tui-disasm.c: Ditto.
	* tui/tui-layout.c, tui/tui-regs.c, tui/tui-source.c: Ditto.
	* tui/tui-stack.c, tui/tui-win.c, tui/tui-wingeneral.c: Ditto.
	* tui/tui-winsource.c: Ditto.
@
text
@d49 1
a49 1
tui_set_source_content (struct symtab *s, int lineNo, int noerror)
d59 1
a59 1
      if ((ret = tui_alloc_source_buffer (srcWin)) == TUI_SUCCESS)
d61 1
a61 1
	  lineWidth = srcWin->generic.width - 1;
d64 1
a64 1
	  nlines = (lineNo + (srcWin->generic.height - 2)) - lineNo;
d71 1
a71 1
		  sprintf (name, "%s:%d", s->filename, lineNo);
d81 1
a81 1
	      if (lineNo < 1 || lineNo > s->nlines)
d86 1
a86 1
				      lineNo, s->filename, s->nlines);
d88 1
a88 1
	      else if (lseek (desc, s->line_charpos[lineNo - 1], 0) < 0)
d97 1
a97 1
                  struct tui_source_info * src = &srcWin->detail.sourceInfo;
d99 3
a101 3
                  if (srcWin->generic.title)
                    xfree (srcWin->generic.title);
                  srcWin->generic.title = xstrdup (s->filename);
d109 1
a109 1
		  offset = src->horizontalOffset;
d114 1
a114 1
		  curLineNo = src->startLineOrAddr.lineNo = lineNo;
d121 1
a121 1
		      srcWin->generic.content[curLine];
d128 2
a129 2
				   srcWin->generic.content[
					curLine])->whichElement.source.line;
d145 1
a145 1
		      element->whichElement.source.lineOrAddr.lineNo =
d147 1
a147 1
		      element->whichElement.source.isExecPoint =
d149 1
a149 1
			locator->content[0])->whichElement.locator.fileName,
d152 1
a152 1
			 locator->content[0])->whichElement.locator.lineNo);
d206 2
a207 2
			strcpy (((struct tui_win_element *) srcWin->generic.content[
					curLine])->whichElement.source.line,
d211 2
a212 2
			 srcWin->generic.content[
			  curLine])->whichElement.source.line[0] = (char) 0;
d219 1
a219 1
		  srcWin->generic.contentSize = nlines;
d247 1
a247 1
  while (curr_line < winInfo->generic.contentSize)
d255 3
a257 3
      element->whichElement.source.lineOrAddr.lineNo = 0;
      element->whichElement.source.isExecPoint = FALSE;
      element->whichElement.source.hasBreak = FALSE;
d260 1
a260 1
      element->whichElement.source.line[0] = (char) 0;
d275 1
a275 1
	  srcLine = element->whichElement.source.line;
d305 2
a306 2
  srcWin->detail.sourceInfo.horizontalOffset = 0;
  tui_update_source_window_as_is (srcWin, s, line, noerror);
d315 1
a315 1
  return (srcWin->generic.contentInUse &&
d317 1
a317 1
		  content[0])->whichElement.locator.fileName, fname) == 0));
d326 1
a326 1
  if (srcWin->generic.content != NULL)
d330 1
a330 1
      tui_win_content content = (tui_win_content) srcWin->generic.content;
d340 1
a340 1
	  l.lineNo = content[0]->whichElement.source.lineOrAddr.lineNo +
d342 2
a343 2
	  if (l.lineNo > s->nlines)
	    /*line = s->nlines - winInfo->generic.contentSize + 1; */
d345 1
a345 1
	    l.lineNo = content[0]->whichElement.source.lineOrAddr.lineNo;
d349 1
a349 1
	  l.lineNo = content[0]->whichElement.source.lineOrAddr.lineNo -
d351 2
a352 2
	  if (l.lineNo <= 0)
	    l.lineNo = 1;
d355 1
a355 1
      print_source_lines (s, l.lineNo, l.lineNo + 1, 0);
@


1.5
log
@2004-02-07  Andrew Cagney  <cagney@@redhat.com>

        * tui/tui-data.h (tui_win_element): Rename TuiWinElement.
        (tui_exec_info_content): Rename TuiExecInfoContent.
        (TuiGenWinInfo, TuiGenWinInfoPtr): Delete definitions.
        (TuiWinInfo, TuiWinInfoPtr): Ditto.
        (TuiScrollDirection, TuiScrollDirectionPtr): Ditto.
        (TuiList, TuiListPtr): Ditto.
        (TuiLayoutType, TuiLayoutTypePtr): Ditto.
        (TuiDataType, TuiDataTypePtr): Ditto.
        (TuiRegisterDisplayType, TuiRegisterDisplayTypePtr): Ditto.
        (TuiLineOrAddress, TuiLineOrAddressPtr): Ditto.
        (TuiLayoutDef, TuiLayoutDefPtr): Ditto.
        (TuiSourceElement, TuiSourceElementPtr): Ditto.
        (TuiDataElement, TuiDataElementPtr): Ditto.
        (TuiWinElement, TuiWinElementPtr): Ditto.
        (TuiDataInfo, TuiDataInfoPtr): Ditto.
        (TuiCommandElement, TuiCommandElementPtr): Ditto.
        (TuiLocatorElement, TuiLocatorElementPtr): Ditto.
        (TuiWhichElement, TuiWhichElementPtr): Ditto.
        (TuiSourceInfo, TuiSourceInfoPtr): Ditto.
        (TuiCommandInfo, TuiCommandInfoPtr): Ditto.
        * tui/tui-command.c, tui/tui-data.c: Update references.
        * tui/tui-data.h, tui/tui-disasm.c, tui/tui-layout.c: Ditto.
        * tui/tui-regs.c, tui/tui-source.c, tui/tui-stack.c: Ditto.
        * tui/tui-win.c, tui/tui-windata.c, tui/tui-wingeneral.c: Ditto.
        * tui/tui-winsource.c, tui/tui.c: Ditto.
@
text
@d51 1
a51 1
  TuiStatus ret = TUI_FAILURE;
d217 1
a217 1
		    tuiFree (srcLine);
d326 1
a326 1
  if (srcWin->generic.content != (OpaquePtr) NULL)
@


1.4
log
@2004-02-06  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-data.h (struct tui_list): Rename _TuiList.
	(enum tui_data_type): Rename _TuiDataType.
	(struct tui_layout_def): Rename _TuiLayoutDef.
	(struct tui_source_element): Rename _TuiSourceElement.
	(struct tui_data_element): Rename _TuiDataElement.
	(struct tui_command_element): Rename _TuiCommandElement.
	(struct tui_locator_element): Rename _TuiLocatorElement.
	(union tui_which_element): Define.
	(struct tui_win_element): Rename _TuiWinElement.
	(struct tui_data_info): Rename _TuiDataInfo.
	(struct tui_source_info): Rename _TuiSourceInfo.
	(struct tui_command_info): Rename _TuiCommandInfo.
	(tui_initialize_static_data): Rename initializeStaticData.
	(tui_alloc_generic_win_info): Rename allocGenericWinInfo.
	(tui_alloc_win_info): Rename allocWinInfo.
	(tui_init_generic_part): Rename initGenericPart.
	(tui_init_win_info): Rename initWinInfo.
	(tui_alloc_content): Rename allocContent.
	(tui_add_content_elements): Rename addContentElements.
	(tui_init_content_element): Rename initContentElement.
	(tui_free_window): Rename freeWindow.
	(tui_free_win_content): Rename freeWinContent.
	(tui_free_data_content): Rename freeDataContent.
	(tui_free_all_source_wins_content): Rename
	freeAllSourceWinsContent.
	(tui_del_window): Rename tuiDelWindow.
	(tui_del_data_windows): Rename tuiDelDataWindows.
	(tui_partial_win_by_name): Rename partialWinByName.
	(tui_win_name): Rename winName.
	(tui_current_layout): Rename currentLayout.
	(tui_set_current_layout_to): Rename setCurrentLayoutTo.
	(tui_term_height): Rename termHeight.
	(tui_set_term_height_to): Rename setTermHeightTo.
	(tui_term_width): Rename termWidth.
	(tui_set_term_width_to): Rename setTermWidthTo.
	(tui_set_gen_win_origin): Rename setGenWinOrigin.
	(tui_locator_win_info_ptr): Rename locatorWinInfoPtr.
	(tui_source_exec_info_win_ptr): Rename tui_gen_win_info.
	(tui_disassem_exec_info_win_ptr): Rename disassemExecInfoWinPtr.
	(tui_source_windows): Rename sourceWindows.
	(tui_clear_source_windows): Rename clearSourceWindows.
	(tui_clear_source_windows_detail): Rename
	clearSourceWindowsDetail.
	(tui_clear_win_detail): Rename clearWinDetail.
	(tui_add_to_source_windows): Rename tuiAddToSourceWindows.
	(tui_default_tab_len): Rename tuiDefaultTabLen.
	(tui_set_default_tab_len): Rename tuiSetDefaultTabLen.
	(tui_win_with_focus): Rename tuiWinWithFocus.
	(tui_set_win_with_focus): Rename tuiSetWinWithFocus.
	(tui_layout_def): Rename tuiLayoutDef.
	(tui_win_resized): Rename tuiWinResized.
	(tui_set_win_resized_to): Rename tuiSetWinResizedTo.
	(tui_next_win): Rename tuiNextWin.
	(tui_prev_win): Rename tuiPrevWin.
	(tui_add_to_source_windows): Rename addToSourceWindows.
	* tui/tui-winsource.c, tui/tui-win.c: Update references.
	* tui/tui-layout.c, tui/tui-source.c: Ditto.
	* tui/tui-stack.c, tui/tui-io.c: Ditto.
	* tui/tui.c, tui/tui-data.c: Ditto.
	* tui/tui-interp.c, tui/tui-data.c: Ditto.
	* tui/tui-disasm.c, tui/tui-command.c: Ditto.
@
text
@d96 2
a97 2
		  TuiGenWinInfoPtr locator = tui_locator_win_info_ptr ();
                  TuiSourceInfoPtr src = &srcWin->detail.sourceInfo;
d120 1
a120 1
		      TuiWinElementPtr element = (TuiWinElementPtr)
d127 1
a127 1
			srcLine = ((TuiWinElementPtr)
d148 1
a148 1
			(strcmp (((TuiWinElementPtr)
d151 1
a151 1
			 && curLineNo == ((TuiWinElementPtr)
d206 1
a206 1
			strcpy (((TuiWinElementPtr) srcWin->generic.content[
d210 1
a210 1
			((TuiWinElementPtr)
d236 1
a236 1
tui_set_source_content_nil (TuiWinInfoPtr winInfo, char *warning_string)
d253 2
a254 2
      TuiWinElementPtr element =
      (TuiWinElementPtr) winInfo->generic.content[curr_line];
d303 1
a303 1
tui_show_symtab_source (struct symtab *s, TuiLineOrAddress line, int noerror)
d316 1
a316 1
	  (strcmp (((TuiWinElementPtr) (tui_locator_win_info_ptr ())->
d323 1
a323 1
tui_vertical_source_scroll (TuiScrollDirection scrollDirection,
d328 1
a328 1
      TuiLineOrAddress l;
d330 1
a330 1
      TuiWinContent content = (TuiWinContent) srcWin->generic.content;
@


1.3
log
@2004-02-06  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-source.h: Update copyright.  Include "tui-data.h".
	(struct symtab): Declare.
	(tui_set_source_content): Rename tuiSetSourceContent.
	(tui_show_symtab_source): Rename tuiShowSource.
	(tui_source_is_displayed): Rename tuiSourceIsDisplayed.
	(tui_vertical_source_scroll): Rename tuiVerticalSourceScroll.
	* tui/tui-source.c: Update copyright.  Update references.
	* tui/tui-win.c, tui/tui-winsource.c: Update references.
	* tui/tui-stack.c: Update references.
@
text
@d96 1
a96 1
		  TuiGenWinInfoPtr locator = locatorWinInfoPtr ();
d134 2
a135 2
			((curLen / tuiDefaultTabLen ()) * tuiDefaultTabLen ());
		      while (i < tuiDefaultTabLen ())
d179 1
a179 1
					  int j, maxTabLen = tuiDefaultTabLen ();
d316 1
a316 1
	  (strcmp (((TuiWinElementPtr) (locatorWinInfoPtr ())->
@


1.2
log
@2004-02-06  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-source.h: Do not include "defs.h".
	(struct tui_win_info): Declare.
	(tui_set_source_content_nil): Declare.
	* tui/tui-data.h (struct tui_win_info): Rename _TuiWinInfo.
	(union tui_line_or_address): Rename _TuiLineOrAddress.
	* tui/tui-winsource.h: Update copyright.  Include "tui-data.h".
	(tui_update_source_window): Rename tuiUpdateSourceWindow.
	(tui_update_source_window_as_is): Rename
	tuiUpdateSourceWindowAsIs.
	(tui_update_source_windows_with_addr): Rename
	tuiUpdateSourceWindowsWithAddr.
	(tui_update_source_windows_with_line): Rename
	tuiUpdateSourceWindowsWithLine.
	(tui_clear_source_content): Rename tuiClearSourceContent.
	(tui_erase_source_content): Rename tuiEraseSourceContent.
	(tui_set_source_content_nil): Rename tuiSetSourceContentNil.
	(tui_show_source_content): Rename tuiShowSourceContent.
	(tui_horizontal_source_scroll): Rename tuiHorizontalSourceScroll.
	(tui_set_exec_info_content): Rename tuiSetExecInfoContent.
	(tui_show_exec_info_content): Rename tuiShowExecInfoContent.
	(tui_erase_exec_info_content): Rename tuiEraseExecInfoContent.
	(tui_clear_exec_info_content): Rename tuiClearExecInfoContent.
	(tui_update_exec_info): Rename tuiUpdateExecInfo.
	(tui_set_is_exec_point_at): Rename tuiSetIsExecPointAt.
	(tui_alloc_source_buffer): Rename tuiAllocSourceBuffer.
	(tui_line_is_displayed): Rename tuiLineIsDisplayed.
	(tui_addr_is_displayed): Rename tuiAddrIsDisplayed.
	(struct tui_win_info): Declare.
	* tui/tui-stack.c: Update references.
	* tui/tui-layout.c, tui/tui-winsource.c: Ditto.
	* tui/tui-win.c, tui/tui-source.c: Ditto.
	* tui/tui.c, tui/tui-disasm.c: Ditto.
@
text
@d3 2
a4 2
   Copyright 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation,
   Inc.
d48 2
a49 2
TuiStatus
tuiSetSourceContent (struct symtab *s, int lineNo, int noerror)
d303 1
a303 1
tuiShowSource (struct symtab *s, TuiLineOrAddress line, int noerror)
d310 2
a311 1
/* Answer whether the source is currently displayed in the source window.  */
d313 1
a313 1
tuiSourceIsDisplayed (char *fname)
d323 2
a324 2
tuiVerticalSourceScroll (TuiScrollDirection scrollDirection,
                         int numToScroll)
@


1.1
log
@2004-01-18  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-command.c: Rename tui/tuiCommand.c.
	* tui/tui-command.h: Rename tui/tuiCommand.h.
	* tui/tui-data.c: Rename tui/tuiData.c.
	* tui/tui-data.h: Rename tui/tuiData.h.
	* tui/tui-disasm.c: Rename tui/tuiDisassem.c.
	* tui/tui-disasm.h: Rename tui/tuiDisassem.h.
	* tui/tui-io.c: Rename tui/tuiIO.c.
	* tui/tui-io.h: Rename tui/tuiIO.h.
	* tui/tui-layout.c: Rename tui/tuiLayout.c.
	* tui/tui-layout.h: Rename tui/tuiLayout.h.
	* tui/tui-regs.c: Rename tui/tuiRegs.c.
	* tui/tui-regs.h: Rename tui/tuiRegs.h.
	* tui/tui-source.c: Rename tui/tuiSource.c.
	* tui/tui-source.h: Rename tui/tuiSource.h.
	* tui/tui-stack.c: Rename tui/tuiStack.c.
	* tui/tui-stack.h: Rename tui/tuiStack.h.
	* tui/tui-win.c: Rename tui/tuiWin.c.
	* tui/tui-win.h: Rename tui/tuiWin.h.
	* tui/tui-windata.c: Rename tui/tuiDataWin.c.
	* tui/tui-windata.h: Rename tui/tuiDataWin.h.
	* tui/tui-wingeneral.c: Rename tui/tuiGeneralWin.c.
	* tui/tui-wingeneral.h: Rename tui/tuiGeneralWin.h.
	* tui/tui-winsource.c: Rename tui/tuiSourceWin.c.
	* tui/tui-winsource.h: Rename tui/tuiSourceWin.h.
	* tui/tui-file.c: Update includes.
	* tui/tui-hooks.c: Update includes.
	* tui/tui-interp.c: Update includes.
	* tui/tui.c: Update includes.
	* Makefile.in: Update all tui/ dependencies.
	(SUBDIR_TUI_OBS, SUBDIR_TUI_SRCS): Update file names.
@
text
@d59 1
a59 1
      if ((ret = tuiAllocSourceBuffer (srcWin)) == TUI_SUCCESS)
d232 2
a233 2
   tuiEraseSourceContents, which in turn is invoked when the source files
   cannot be accessed */
d236 1
a236 1
tuiSetSourceContentNil (TuiWinInfoPtr winInfo, char *warning_string)
d306 1
a306 1
  tuiUpdateSourceWindowAsIs(srcWin, s, line, noerror);
@


1.1.4.1
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@@

