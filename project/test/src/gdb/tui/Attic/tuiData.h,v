head	1.14;
access;
symbols
	drow-cplus-merge-20040113:1.13
	drow-cplus-merge-20031224:1.13
	drow-cplus-merge-20031220:1.13
	carlton_dictionary-20031215-merge:1.13
	drow-cplus-merge-20031214:1.13
	carlton-dictionary-20031111-merge:1.13
	gdb_6_0-2003-10-04-release:1.13
	kettenis_sparc-20030918-branch:1.13.0.36
	kettenis_sparc-20030918-branchpoint:1.13
	carlton_dictionary-20030917-merge:1.13
	ezannoni_pie-20030916-branchpoint:1.13
	ezannoni_pie-20030916-branch:1.13.0.34
	cagney_x86i386-20030821-branch:1.13.0.32
	cagney_x86i386-20030821-branchpoint:1.13
	carlton_dictionary-20030805-merge:1.13
	carlton_dictionary-20030627-merge:1.13
	gdb_6_0-branch:1.13.0.30
	gdb_6_0-2003-06-23-branchpoint:1.13
	jimb-ppc64-linux-20030613-branch:1.13.0.28
	jimb-ppc64-linux-20030613-branchpoint:1.13
	cagney_convert-20030606-branch:1.13.0.26
	cagney_convert-20030606-branchpoint:1.13
	cagney_writestrings-20030508-branch:1.13.0.24
	cagney_writestrings-20030508-branchpoint:1.13
	jimb-ppc64-linux-20030528-branch:1.13.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.13
	carlton_dictionary-20030523-merge:1.13
	cagney_fileio-20030521-branch:1.13.0.20
	cagney_fileio-20030521-branchpoint:1.13
	kettenis_i386newframe-20030517-mergepoint:1.13
	jimb-ppc64-linux-20030509-branch:1.13.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.13
	kettenis_i386newframe-20030504-mergepoint:1.13
	carlton_dictionary-20030430-merge:1.13
	kettenis_i386newframe-20030419-branch:1.13.0.16
	kettenis_i386newframe-20030419-branchpoint:1.13
	carlton_dictionary-20030416-merge:1.13
	cagney_frameaddr-20030409-mergepoint:1.13
	kettenis_i386newframe-20030406-branch:1.13.0.14
	kettenis_i386newframe-20030406-branchpoint:1.13
	cagney_frameaddr-20030403-branchpoint:1.13
	cagney_frameaddr-20030403-branch:1.13.0.12
	cagney_framebase-20030330-mergepoint:1.13
	cagney_framebase-20030326-branch:1.13.0.10
	cagney_framebase-20030326-branchpoint:1.13
	cagney_lazyid-20030317-branch:1.13.0.8
	cagney_lazyid-20030317-branchpoint:1.13
	kettenis-i386newframe-20030316-mergepoint:1.13
	offbyone-20030313-branch:1.13.0.6
	offbyone-20030313-branchpoint:1.13
	kettenis-i386newframe-20030308-branch:1.13.0.4
	kettenis-i386newframe-20030308-branchpoint:1.13
	carlton_dictionary-20030305-merge:1.13
	cagney_offbyone-20030303-branch:1.13.0.2
	cagney_offbyone-20030303-branchpoint:1.13
	carlton_dictionary-20030207-merge:1.12
	interps-20030203-mergepoint:1.12
	interps-20030202-branch:1.12.0.10
	interps-20030202-branchpoint:1.12
	cagney-unwind-20030108-branch:1.12.0.8
	cagney-unwind-20030108-branchpoint:1.12
	carlton_dictionary-20021223-merge:1.12
	gdb_5_3-2002-12-12-release:1.12
	carlton_dictionary-20021115-merge:1.12
	kseitz_interps-20021105-merge:1.12
	kseitz_interps-20021103-merge:1.12
	drow-cplus-merge-20021020:1.12
	drow-cplus-merge-20021025:1.12
	carlton_dictionary-20021025-merge:1.12
	carlton_dictionary-20021011-merge:1.12
	drow-cplus-branch:1.12.0.6
	drow-cplus-branchpoint:1.12
	kseitz_interps-20020930-merge:1.12
	carlton_dictionary-20020927-merge:1.12
	carlton_dictionary-branch:1.12.0.4
	carlton_dictionary-20020920-branchpoint:1.12
	gdb_5_3-branch:1.12.0.2
	gdb_5_3-2002-09-04-branchpoint:1.12
	kseitz_interps-20020829-merge:1.9
	cagney_sysregs-20020825-branch:1.9.0.2
	cagney_sysregs-20020825-branchpoint:1.9
	readline_4_3-import-branch:1.7.0.16
	readline_4_3-import-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.7
	kseitz_interps-20020528-branch:1.7.0.14
	kseitz_interps-20020528-branchpoint:1.7
	cagney_regbuf-20020515-branch:1.7.0.12
	cagney_regbuf-20020515-branchpoint:1.7
	jimb-macro-020506-branch:1.7.0.10
	jimb-macro-020506-branchpoint:1.7
	gdb_5_2-2002-04-29-release:1.7
	gdb_5_2-branch:1.7.0.8
	gdb_5_2-2002-03-03-branchpoint:1.7
	gdb_5_1_1-2002-01-24-release:1.7
	gdb_5_1_0_1-2002-01-03-release:1.7
	cygnus_cvs_20020108_pre:1.7
	gdb_5_1_0_1-2002-01-03-branch:1.7.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.7
	gdb_5_1-2001-11-21-release:1.7
	gdb_s390-2001-09-26-branch:1.7.0.4
	gdb_s390-2001-09-26-branchpoint:1.7
	gdb_5_1-2001-07-29-branch:1.7.0.2
	gdb_5_1-2001-07-29-branchpoint:1.7
	dberlin-typesystem-branch:1.2.0.4
	dberlin-typesystem-branchpoint:1.2
	gdb-post-ptid_t-2001-05-03:1.2
	gdb-pre-ptid_t-2001-05-03:1.2
	insight-precleanup-2001-01-01:1.2
	gdb-post-protoization-2000-07-29:1.2
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.2
	gdb_5_0-2000-05-19-release:1.1.1.2
	gdb_4_18_2-2000-05-18-release:1.1.1.2
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.2
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.2
	gdb_5_0-2000-04-10-branch:1.1.1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.2
	repo-unification-2000-02-06:1.1.1.2
	insight-2000-02-04:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.14
date	2004.01.19.04.31.51;	author cagney;	state dead;
branches;
next	1.13;

1.13
date	2003.02.14.13.58.06;	author cagney;	state Exp;
branches
	1.13.34.1;
next	1.12;

1.12
date	2002.09.01.10.49.00;	author ciceron;	state Exp;
branches
	1.12.4.1
	1.12.6.1;
next	1.11;

1.11
date	2002.09.01.10.20.48;	author ciceron;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.30.20.07.05;	author ciceron;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.25.11.00.46;	author ciceron;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.25.09.12.36;	author ciceron;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.23.21.16.20;	author ciceron;	state Exp;
branches
	1.7.14.1;
next	1.6;

1.6
date	2001.07.21.20.52.56;	author ciceron;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.18.20.59.00;	author ciceron;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.16.22.05.02;	author ciceron;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.14.19.01.25;	author ciceron;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.42;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.12;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.12;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.19.13;	author jsm;	state Exp;
branches;
next	;

1.7.14.1
date	2002.08.30.22.52.52;	author kseitz;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2002.10.01.00.46.34;	author kseitz;	state Exp;
branches;
next	;

1.12.4.1
date	2003.03.06.00.56.37;	author carlton;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2004.01.26.19.11.45;	author carlton;	state dead;
branches;
next	;

1.12.6.1
date	2003.12.14.20.27.59;	author drow;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2004.02.09.19.43.58;	author drow;	state dead;
branches;
next	;

1.13.34.1
date	2004.03.23.20.09.16;	author ezannoni;	state dead;
branches;
next	;


desc
@@


1.14
log
@2004-01-18  Andrew Cagney  <cagney@@redhat.com>

	* tui/tui-command.c: Rename tui/tuiCommand.c.
	* tui/tui-command.h: Rename tui/tuiCommand.h.
	* tui/tui-data.c: Rename tui/tuiData.c.
	* tui/tui-data.h: Rename tui/tuiData.h.
	* tui/tui-disasm.c: Rename tui/tuiDisassem.c.
	* tui/tui-disasm.h: Rename tui/tuiDisassem.h.
	* tui/tui-io.c: Rename tui/tuiIO.c.
	* tui/tui-io.h: Rename tui/tuiIO.h.
	* tui/tui-layout.c: Rename tui/tuiLayout.c.
	* tui/tui-layout.h: Rename tui/tuiLayout.h.
	* tui/tui-regs.c: Rename tui/tuiRegs.c.
	* tui/tui-regs.h: Rename tui/tuiRegs.h.
	* tui/tui-source.c: Rename tui/tuiSource.c.
	* tui/tui-source.h: Rename tui/tuiSource.h.
	* tui/tui-stack.c: Rename tui/tuiStack.c.
	* tui/tui-stack.h: Rename tui/tuiStack.h.
	* tui/tui-win.c: Rename tui/tuiWin.c.
	* tui/tui-win.h: Rename tui/tuiWin.h.
	* tui/tui-windata.c: Rename tui/tuiDataWin.c.
	* tui/tui-windata.h: Rename tui/tuiDataWin.h.
	* tui/tui-wingeneral.c: Rename tui/tuiGeneralWin.c.
	* tui/tui-wingeneral.h: Rename tui/tuiGeneralWin.h.
	* tui/tui-winsource.c: Rename tui/tuiSourceWin.c.
	* tui/tui-winsource.h: Rename tui/tuiSourceWin.h.
	* tui/tui-file.c: Update includes.
	* tui/tui-hooks.c: Update includes.
	* tui/tui-interp.c: Update includes.
	* tui/tui.c: Update includes.
	* Makefile.in: Update all tui/ dependencies.
	(SUBDIR_TUI_OBS, SUBDIR_TUI_SRCS): Update file names.
@
text
@/* TUI data manipulation routines.
   Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
   Contributed by Hewlett-Packard Company.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#ifndef TUI_DATA_H
#define TUI_DATA_H

#if defined (HAVE_NCURSES_H)
#include <ncurses.h>
#elif defined (HAVE_CURSES_H)
#include <curses.h>
#endif

/* Generic window information */
     typedef struct _TuiGenWinInfo
       {
	 WINDOW *handle;	/* window handle */
	 TuiWinType type;	/* type of window */
	 int width;		/* window width */
	 int height;		/* window height */
	 TuiPoint origin;	/* origin of window */
	 OpaquePtr content;	/* content of window */
	 int contentSize;	/* Size of content (# of elements) */
	 int contentInUse;	/* Can it be used, or is it already used? */
	 int viewportHeight;	/* viewport height */
	 int lastVisibleLine;	/* index of last visible line */
	 int isVisible;		/* whether the window is visible or not */
         char* title;          /* Window title to display.  */
       }
TuiGenWinInfo, *TuiGenWinInfoPtr;

/* Constant definitions */
#define DEFAULT_TAB_LEN                8
#define NO_SRC_STRING                  "[ No Source Available ]"
#define NO_DISASSEM_STRING             "[ No Assembly Available ]"
#define NO_REGS_STRING                 "[ Register Values Unavailable ]"
#define NO_DATA_STRING                 "[ No Data Values Displayed ]"
#define MAX_CONTENT_COUNT              100
#define SRC_NAME                       "SRC"
#define CMD_NAME                       "CMD"
#define DATA_NAME                      "REGS"
#define DISASSEM_NAME                  "ASM"
#define TUI_NULL_STR                   ""
#define DEFAULT_HISTORY_COUNT          25
#define BOX_WINDOW                     TRUE
#define DONT_BOX_WINDOW                FALSE
#define HILITE                         TRUE
#define NO_HILITE                      FALSE
#define WITH_LOCATOR                   TRUE
#define NO_LOCATOR                     FALSE
#define EMPTY_SOURCE_PROMPT            TRUE
#define NO_EMPTY_SOURCE_PROMPT         FALSE
#define UNDEFINED_ITEM                 -1
#define MIN_WIN_HEIGHT                 3
#define MIN_CMD_WIN_HEIGHT             3

/* Strings to display in the TUI status line.  */
#define PROC_PREFIX                    "In: "
#define LINE_PREFIX                    "Line: "
#define PC_PREFIX                      "PC: "
#define SINGLE_KEY                     "(SingleKey)"

/* Minimum/Maximum length of some fields displayed in the TUI status line.  */
#define MIN_LINE_WIDTH     4 /* Use at least 4 digits for line numbers.  */
#define MIN_PROC_WIDTH    12
#define MAX_TARGET_WIDTH  10
#define MAX_PID_WIDTH     14

#define TUI_FLOAT_REGS_NAME                  "$FREGS"
#define TUI_FLOAT_REGS_NAME_LOWER            "$fregs"
#define TUI_GENERAL_REGS_NAME                "$GREGS"
#define TUI_GENERAL_REGS_NAME_LOWER          "$gregs"
#define TUI_SPECIAL_REGS_NAME                "$SREGS"
#define TUI_SPECIAL_REGS_NAME_LOWER          "$sregs"
#define TUI_GENERAL_SPECIAL_REGS_NAME        "$REGS"
#define TUI_GENERAL_SPECIAL_REGS_NAME_LOWER  "$regs"

/* Scroll direction enum */
typedef enum
  {
    FORWARD_SCROLL,
    BACKWARD_SCROLL,
    LEFT_SCROLL,
    RIGHT_SCROLL
  }
TuiScrollDirection, *TuiScrollDirectionPtr;


/* General list struct */
typedef struct _TuiList
  {
    OpaqueList list;
    int count;
  }
TuiList, *TuiListPtr;


/* The kinds of layouts available */
typedef enum
  {
    SRC_COMMAND,
    DISASSEM_COMMAND,
    SRC_DISASSEM_COMMAND,
    SRC_DATA_COMMAND,
    DISASSEM_DATA_COMMAND,
    UNDEFINED_LAYOUT
  }
TuiLayoutType, *TuiLayoutTypePtr;

/* Basic data types that can be displayed in the data window. */
typedef enum _TuiDataType
  {
    TUI_REGISTER,
    TUI_SCALAR,
    TUI_COMPLEX,
    TUI_STRUCT
  }
TuiDataType, TuiDataTypePtr;

/* Types of register displays */
typedef enum _TuiRegisterDisplayType
  {
    TUI_UNDEFINED_REGS,
    TUI_GENERAL_REGS,
    TUI_SFLOAT_REGS,
    TUI_DFLOAT_REGS,
    TUI_SPECIAL_REGS,
    TUI_GENERAL_AND_SPECIAL_REGS
  }
TuiRegisterDisplayType, *TuiRegisterDisplayTypePtr;

/* Structure describing source line or line address */
typedef union _TuiLineOrAddress
  {
    int lineNo;
    CORE_ADDR addr;
  }
TuiLineOrAddress, *TuiLineOrAddressPtr;

/* Current Layout definition */
typedef struct _TuiLayoutDef
  {
    TuiWinType displayMode;
    int split;
    TuiRegisterDisplayType regsDisplayType;
    TuiRegisterDisplayType floatRegsDisplayType;
  }
TuiLayoutDef, *TuiLayoutDefPtr;

/* Elements in the Source/Disassembly Window */
typedef struct _TuiSourceElement
  {
    char *line;
    TuiLineOrAddress lineOrAddr;
    int isExecPoint;
    int hasBreak;
  }
TuiSourceElement, *TuiSourceElementPtr;


/* Elements in the data display window content */
typedef struct _TuiDataElement
  {
    const char *name;
    int itemNo;			/* the register number, or data display number */
    TuiDataType type;
    Opaque value;
    int highlight;
  }
TuiDataElement, *TuiDataElementPtr;


/* Elements in the command window content */
typedef struct _TuiCommandElement
  {
    char *line;
  }
TuiCommandElement, *TuiCommandElementPtr;


#define MAX_LOCATOR_ELEMENT_LEN        100

/* Elements in the locator window content */
typedef struct _TuiLocatorElement
  {
    char fileName[MAX_LOCATOR_ELEMENT_LEN];
    char procName[MAX_LOCATOR_ELEMENT_LEN];
    int lineNo;
    CORE_ADDR addr;
  }
TuiLocatorElement, *TuiLocatorElementPtr;

/* Flags to tell what kind of breakpoint is at current line.  */
#define TUI_BP_ENABLED      0x01
#define TUI_BP_DISABLED     0x02
#define TUI_BP_HIT          0x04
#define TUI_BP_CONDITIONAL  0x08
#define TUI_BP_HARDWARE     0x10

/* Position of breakpoint markers in the exec info string.  */
#define TUI_BP_HIT_POS      0
#define TUI_BP_BREAK_POS    1
#define TUI_EXEC_POS        2
#define TUI_EXECINFO_SIZE   4

typedef char TuiExecInfoContent[TUI_EXECINFO_SIZE];

/* An content element in a window */
typedef union
  {
    TuiSourceElement source;	/* the source elements */
    TuiGenWinInfo dataWindow;	/* data display elements */
    TuiDataElement data;	/* elements of dataWindow */
    TuiCommandElement command;	/* command elements */
    TuiLocatorElement locator;	/* locator elements */
    TuiExecInfoContent simpleString;	/* simple char based elements */
  }
TuiWhichElement, *TuiWhichElementPtr;

typedef struct _TuiWinElement
  {
    int highlight;
    TuiWhichElement whichElement;
  }
TuiWinElement, *TuiWinElementPtr;


/* This describes the content of the window. */
typedef TuiWinElementPtr *TuiWinContent;


/* This struct defines the specific information about a data display window */
typedef struct _TuiDataInfo
  {
    TuiWinContent dataContent;	/* start of data display content */
    int dataContentCount;
    TuiWinContent regsContent;	/* start of regs display content */
    int regsContentCount;
    TuiRegisterDisplayType regsDisplayType;
    int regsColumnCount;
    int displayRegs;		/* Should regs be displayed at all? */
  }
TuiDataInfo, *TuiDataInfoPtr;


typedef struct _TuiSourceInfo
  {
    int hasLocator;		/* Does locator belongs to this window? */
    TuiGenWinInfoPtr executionInfo;	/* execution information window */
    int horizontalOffset;	/* used for horizontal scroll */
    TuiLineOrAddress startLineOrAddr;
    char* filename;
  }
TuiSourceInfo, *TuiSourceInfoPtr;


typedef struct _TuiCommandInfo
  {
    int curLine;		/* The current line position */
    int curch;			/* The current cursor position */
    int start_line;
  }
TuiCommandInfo, *TuiCommandInfoPtr;


/* This defines information about each logical window */
typedef struct _TuiWinInfo
  {
    TuiGenWinInfo generic;	/* general window information */
    union
      {
	TuiSourceInfo sourceInfo;
	TuiDataInfo dataDisplayInfo;
	TuiCommandInfo commandInfo;
	Opaque opaque;
      }
    detail;
    int canHighlight;		/* Can this window ever be highlighted? */
    int isHighlighted;		/* Is this window highlighted? */
  }
TuiWinInfo, *TuiWinInfoPtr;

/* MACROS (prefixed with m_) */

/* Testing macros */
#define        m_genWinPtrIsNull(winInfo) \
                ((winInfo) == (TuiGenWinInfoPtr)NULL)
#define        m_genWinPtrNotNull(winInfo) \
                ((winInfo) != (TuiGenWinInfoPtr)NULL)
#define        m_winPtrIsNull(winInfo) \
                ((winInfo) == (TuiWinInfoPtr)NULL)
#define        m_winPtrNotNull(winInfo) \
                ((winInfo) != (TuiWinInfoPtr)NULL)

#define        m_winIsSourceType(type) \
                (type == SRC_WIN || type == DISASSEM_WIN)
#define        m_winIsAuxillary(winType) \
                (winType > MAX_MAJOR_WINDOWS)
#define        m_hasLocator(winInfo) \
                ( ((winInfo) != (TuiWinInfoPtr)NULL) ? \
                    (winInfo->detail.sourceInfo.hasLocator) : \
                    FALSE )

#define     m_setWinHighlightOn(winInfo) \
                if ((winInfo) != (TuiWinInfoPtr)NULL) \
                              (winInfo)->isHighlighted = TRUE
#define     m_setWinHighlightOff(winInfo) \
                if ((winInfo) != (TuiWinInfoPtr)NULL) \
                              (winInfo)->isHighlighted = FALSE


/* Global Data */
extern TuiWinInfoPtr winList[MAX_MAJOR_WINDOWS];

/* Macros */
#define srcWin            winList[SRC_WIN]
#define disassemWin       winList[DISASSEM_WIN]
#define dataWin           winList[DATA_WIN]
#define cmdWin            winList[CMD_WIN]

/* Data Manipulation Functions */
extern void initializeStaticData (void);
extern TuiGenWinInfoPtr allocGenericWinInfo (void);
extern TuiWinInfoPtr allocWinInfo (TuiWinType);
extern void initGenericPart (TuiGenWinInfoPtr);
extern void initWinInfo (TuiWinInfoPtr);
extern TuiWinContent allocContent (int, TuiWinType);
extern int addContentElements (TuiGenWinInfoPtr, int);
extern void initContentElement (TuiWinElementPtr, TuiWinType);
extern void freeWindow (TuiWinInfoPtr);
extern void freeWinContent (TuiGenWinInfoPtr);
extern void freeDataContent (TuiWinContent, int);
extern void freeAllSourceWinsContent (void);
extern void tuiDelWindow (TuiWinInfoPtr);
extern void tuiDelDataWindows (TuiWinContent, int);
extern TuiWinInfoPtr partialWinByName (char *);
extern char *winName (TuiGenWinInfoPtr);
extern TuiLayoutType currentLayout (void);
extern void setCurrentLayoutTo (TuiLayoutType);
extern int termHeight (void);
extern void setTermHeightTo (int);
extern int termWidth (void);
extern void setTermWidthTo (int);
extern void setGenWinOrigin (TuiGenWinInfoPtr, int, int);
extern TuiGenWinInfoPtr locatorWinInfoPtr (void);
extern TuiGenWinInfoPtr sourceExecInfoWinPtr (void);
extern TuiGenWinInfoPtr disassemExecInfoWinPtr (void);
extern TuiListPtr sourceWindows (void);
extern void clearSourceWindows (void);
extern void clearSourceWindowsDetail (void);
extern void clearWinDetail (TuiWinInfoPtr winInfo);
extern void tuiAddToSourceWindows (TuiWinInfoPtr);
extern int tuiDefaultTabLen (void);
extern void tuiSetDefaultTabLen (int);
extern TuiWinInfoPtr tuiWinWithFocus (void);
extern void tuiSetWinWithFocus (TuiWinInfoPtr);
extern TuiLayoutDefPtr tuiLayoutDef (void);
extern int tuiWinResized (void);
extern void tuiSetWinResizedTo (int);

extern TuiWinInfoPtr tuiNextWin (TuiWinInfoPtr);
extern TuiWinInfoPtr tuiPrevWin (TuiWinInfoPtr);

extern void addToSourceWindows (TuiWinInfoPtr winInfo);

#endif /* TUI_DATA_H */
@


1.13
log
@2003-02-14  Andrew Cagney  <ac131313@@redhat.com>

	* main.c (tui_version): Delete variable.
	(captured_main): When --tui, set interpreter_p to "tui" instead of
	enabling tui_version.
	* printcmd.c (display_command) [TUI]: Test tui_active instead of
	tui_version.
	* cli/cli-decode.c (lookup_cmd_composition): Ditto.
	* cli/cli-cmds.c (disassemble_command): Ditto.
	* defs.h (tui_version): Delete declaration.
	* Makefile.in (SUBDIR_TUI_SRCS): Add "tui/tui-interp.c".
	(tui-interp.o): Add rules.
	(SUBDIR_TUI_OBS): Add "tui-interp.o".

Index: tui/ChangeLog
2003-02-14  Andrew Cagney  <ac131313@@redhat.com>

	* tui.c (tui_enable, tui_disable): Don't modify tui_version.
	(tui_is_window_visible, tui_get_command_dimension): Test
	tui_active instead of tui_version.
	* tuiData.h (tui_version): Delete declaration.
	* tui-hooks.c (tui_init_hook, tui_event_loop): Delete function,
	moved to "tui-interp.c".
	(tui_exit, tui_command_loop): Ditto.
	(_initialize_tui): Don't initialize init_ui_hook.  Initialize
	target_new_objfile_hook.
	* tui-interp.c: New file.
@
text
@@


1.13.34.1
log
@merge mainline changes to branch
@
text
@@


1.12
log
@	* tuiData.h (FILE_PREFIX): Don't define.
	(blankStr, locationStr, breakStr): Don't declare.
	(breakLocationStr, nullStr, historyLimit, setHistoryLimitTo): Likewise.
	(displayableWinContentOf, displayableWinContentAt): Likewise.
	(winElementHeight, winByName, freeAllWindows): Likewise.

	* tuiData.c (blankStr, locationStr, breakStr): Remove.
	(breakLocationStr, nullStr, historyLimit, setHistoryLimitTo): Remove.
	(displayableWinContentOf, displayableWinContentAt): Remove.
	(winElementHeight, winByName, freeAllWindows): Remove.
@
text
@a330 1
extern int tui_version;
@


1.12.6.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d331 1
@


1.12.6.2
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@@


1.12.4.1
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d331 1
@


1.12.4.2
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@@


1.11
log
@	* tuiStack.c (tui_make_status_line): New function to create the
	status line.
	(tuiShowLocatorContent): Use it instead of displayableWinContentAt.
	* tuiData.h (PROC_PREFIX): Use "In:" to reduce length of prefix.
	(PC_PREFIX): Use upper case.
	(SINGLE_KEY, MIN_LINE_WIDTH, MIN_PROC_WIDTH): Define.
	(MAX_TARGET_WIDTH, MAX_PID_WIDTH): Define.
@
text
@a74 1
#define FILE_PREFIX                    "File: "
a348 1
extern void freeAllWindows (void);
a353 1
extern TuiWinInfoPtr winByName (char *);
a355 3
extern char *displayableWinContentOf (TuiGenWinInfoPtr, TuiWinElementPtr);
extern char *displayableWinContentAt (TuiGenWinInfoPtr, int);
extern int winElementHeight (TuiGenWinInfoPtr, TuiWinElementPtr);
a361 2
extern int historyLimit (void);
extern void setHistoryLimit (int);
a365 5
extern char *nullStr (void);
extern char *blankStr (void);
extern char *locationStr (void);
extern char *breakStr (void);
extern char *breakLocationStr (void);
@


1.10
log
@	* tuiSourceWin.h (tui_update_all_breakpoint_info): Declare.
	(tui_update_breakpoint_info): Declare.
	(tuiSetHasBreakAt, tuiAllSetHasBreakAt): Remove.

	* tuiSourceWin.c (tuiUpdateSourceWindowAsIs): Update breakpoint
	information using tui_update_breakpoint_info.
	(tui_update_all_breakpoint_info): New function to refresh all
	execution windows.
	(tui_update_breakpoint_info): New function to recompute the status
	of exec info window from breakpoints.
	(tuiSetHasBreakAt, tuiAllSetHasBreakAt): Remove.
	(tuiSetExecInfoContent): Use the exec info flags computed by
	tui_update_breakpoint_info to display a short status about breakpoints.

	* tuiData.h (TuiExecInfoContent): New for exec info string.
	(TuiWhichElement): Use it.
	(TUI_BP_ENABLED, TUI_BP_DISABLED, TUI_BP_HIT): New defines.
	(TUI_BP_CONDITIONAL, TUI_BP_HARDWARE): New defines.
	(TUI_BP_HIT_POS, TUI_BP_BREAK_POS, TUI_EXEC_POS): Likewise.
	(TUI_EXECINFO_SIZE): Likewise.
	* tuiData.c (initContentElement): Clear exec info string.

	* tui-hooks.c (get_breakpoint): Remove.
	(tui_event_create_breakpoint): Call tui_update_all_breakpoint_info.
	(tui_event_delete_breakpoint): Likewise.
	(tui_event_modify_breakpoint): Likewise.
@
text
@d74 1
d76 1
a76 1
#define PROC_PREFIX                    "Procedure: "
d78 8
a85 1
#define PC_PREFIX                      "pc: "
@


1.9
log
@	* tuiSourceWin.c (tuiSetHasBreakAt): Use filename for breakpoint
	comparison; cleanup.
	* tuiSource.c (tuiSetSourceContent): Set window title and filename.
	* tuiGeneralWin.c (boxWin): Print optional title on top of window.
	* tuiData.h (TuiSourceInfo): Add filename member.
	(TuiGenWinInfo): Add title member.
	* tuiData.c (initGenericPart): Clear title.
	(freeWindow): Free title and filename; remove unused locals.
	(initWinInfo): Clear filename.
	(tuiDelWindow): Free it; remove unused locals.
@
text
@d203 14
d226 1
a226 1
    char *simpleString;		/* simple char based elements */
@


1.8
log
@	* tuiRegs.c (tuiDisplayRegistersFrom): Remove unused locals.
	(_tuiRegisterFormat, _tuiSetSpecialRegsContent): Likewise.
	(_tuiSetGeneralAndSpecialRegsContent): Likewise.
	(_tuiSetFloatRegsContent): Likewise.
	(_tuiRegisterName): Return a const char*.
	* tuiData.h (_TuiDataElement): Use const char* for name.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d45 1
d248 1
@


1.7
log
@	* tuiIO.c (tui_cont_sig): Update cursor position on the screen to
	leave it in the command window.
	(tui_redisplay_readline): Save cursor position to restore the
	cursor after we go back from background.
	* tuiData.h (TuiCommandInfo): Add start_line member.
@
text
@d173 1
a173 1
    char *name;
@


1.7.14.1
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
a44 1
         char* title;          /* Window title to display.  */
d173 1
a173 1
    const char *name;
a246 1
    char* filename;
@


1.7.14.2
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d74 2
a75 2
/* Strings to display in the TUI status line.  */
#define PROC_PREFIX                    "In: "
d77 1
a77 8
#define PC_PREFIX                      "PC: "
#define SINGLE_KEY                     "(SingleKey)"

/* Minimum/Maximum length of some fields displayed in the TUI status line.  */
#define MIN_LINE_WIDTH     4 /* Use at least 4 digits for line numbers.  */
#define MIN_PROC_WIDTH    12
#define MAX_TARGET_WIDTH  10
#define MAX_PID_WIDTH     14
a202 14
/* Flags to tell what kind of breakpoint is at current line.  */
#define TUI_BP_ENABLED      0x01
#define TUI_BP_DISABLED     0x02
#define TUI_BP_HIT          0x04
#define TUI_BP_CONDITIONAL  0x08
#define TUI_BP_HARDWARE     0x10

/* Position of breakpoint markers in the exec info string.  */
#define TUI_BP_HIT_POS      0
#define TUI_BP_BREAK_POS    1
#define TUI_EXEC_POS        2
#define TUI_EXECINFO_SIZE   4

typedef char TuiExecInfoContent[TUI_EXECINFO_SIZE];
d212 1
a212 1
    TuiExecInfoContent simpleString;	/* simple char based elements */
d328 1
d334 1
d337 3
d346 2
d352 5
@


1.6
log
@	* tuiStack.c (tuiSetLocatorInfo): Cleanup.
	* tuiStack.h (tuiGetLocatorFilename): Declare.
	* tuiRegs.h (tuiFirstRegElementNoInLine): Declare.
	* tuiData.h (addToSourceWindows): Declare.
@
text
@d255 1
@


1.5
log
@	* tuiData.h (TuiLocatorElement): Use CORE_ADDR for address member.
	(TuiLineOrAddress): Likewise.
	* tuiDisassem.c (tuiGetBeginAsmAddress): Use CORE_ADDR to specify
	an address.
	(tuiSetDisassemContent): Likewise.
	(tuiShowDisassem, tuiShowDisassemAndUpdateSource): Likewise.
	* tuiLayout.c (_extractDisplayStartAddr): Likewise.
	(tuiSetLayout): Likewise.
	* tuiSourceWin.c (tuiDisplayMainFunction): Likewise.
	(tuiUpdateSourceWindowsWithAddr): Likewise.
	(tuiUpdateSourceWindowsWithLine): Likewise.
	(tuiSetHasBreakAt): Likewise.
	* tuiStack.c (tuiSetLocatorInfo): Likewise.
	(tuiSwitchFilename): Likewise.
	(tuiUpdateLocatorInfoFromFrame): Likewise.
	(tuiSetLocatorContent): Likewise.
	(tuiShowFrameInfo): Likewise.
	* tuiDisassem.h: Update prototypes to use CORE_ADDR.
	* tuiSourceWin.h: Likewise.
	* tuiStack.h: Likewise.
@
text
@d370 2
@


1.4
log
@	* tui.h: Cleanup to avoid inclusion of curses includes.
	(TuiGenWinInfo, TuiGenWinInfoPtr): Move from here.
	* tuiData.h: To here; include curses includes here.
	(setTermHeightTo): Rename of setTermHeight to follow reality.
	(setTermWidthTo): Likewise with setTermWidth.
@
text
@d145 1
a145 1
    Opaque addr;
d198 1
a198 1
    Opaque addr;
@


1.3
log
@	* tuiWin.c, tuiWin.h, tui.c, tui.h, tuiCommand.c: Add FSF copyright.
	tuiCommand.h, tuiIO.c, tuiIO.h, tuiData.h, tuiData.c: Likewise.
	tuiDataWin.c, tuiDataWin.h, tuiDisassem.c, tuiDisassem.h: Likewise.
	tuiGeneralWin.c, tuiGeneralWin.h, tuiLayout.c, tuiLayout.h: Likewise.
	tuiRegs.c, tuiRegs.h, tuiSource.c, tuiSource.h: Likewise.
	tuiSouceWin.c, tuiSourceWin.h, tuiStack.c, tuiStack.h: Likewise.
@
text
@d25 23
d340 1
a340 1
extern void setTermHeight (int);
d342 1
a342 1
extern void setTermWidth (int);
a368 1

@


1.2
log
@PARAMS removal.
@
text
@d1 21
@


1.1
log
@Initial revision
@
text
@d44 2
a45 1
typedef enum {
d50 2
a51 1
} TuiScrollDirection, *TuiScrollDirectionPtr;
d55 6
a60 4
typedef struct    _TuiList {
    OpaqueList    list;
    int            count;
} TuiList, *TuiListPtr;
d64 2
a65 1
typedef enum {
d72 2
a73 1
} TuiLayoutType, *TuiLayoutTypePtr;
d76 2
a77 1
typedef enum _TuiDataType {
d82 2
a83 1
} TuiDataType, TuiDataTypePtr;
d86 2
a87 1
typedef enum _TuiRegisterDisplayType {
d94 2
a95 1
} TuiRegisterDisplayType, *TuiRegisterDisplayTypePtr;
d98 6
a103 4
typedef union _TuiLineOrAddress {
    int           lineNo;
    Opaque        addr;
} TuiLineOrAddress, *TuiLineOrAddressPtr;
d106 8
a113 6
typedef struct _TuiLayoutDef {
    TuiWinType                 displayMode;
    int                        split;
    TuiRegisterDisplayType     regsDisplayType;
    TuiRegisterDisplayType     floatRegsDisplayType;
} TuiLayoutDef, *TuiLayoutDefPtr;
d117 7
a123 6
{
    char                *line;
    TuiLineOrAddress    lineOrAddr;
    int                 isExecPoint;
    int                 hasBreak;
} TuiSourceElement, *TuiSourceElementPtr;
d128 3
a130 3
{
    char        *name;
    int         itemNo;    /* the register number, or data display number */
d132 4
a135 3
    Opaque      value;
    int         highlight;
} TuiDataElement, *TuiDataElementPtr;
d140 4
a143 3
{
    char    *line;
} TuiCommandElement, *TuiCommandElementPtr;
d150 7
a156 6
{
    char        fileName[MAX_LOCATOR_ELEMENT_LEN];
    char        procName[MAX_LOCATOR_ELEMENT_LEN];
    int         lineNo;
    Opaque      addr;
} TuiLocatorElement, *TuiLocatorElementPtr;
d161 9
a169 8
{
    TuiSourceElement       source; /* the source elements */
    TuiGenWinInfo          dataWindow; /* data display elements */
    TuiDataElement         data; /* elements of dataWindow */
    TuiCommandElement      command; /* command elements */
    TuiLocatorElement      locator; /* locator elements */
    char                   *simpleString; /* simple char based elements */
} TuiWhichElement, *TuiWhichElementPtr;
d172 2
a173 2
{
    int            highlight;
d175 2
a176 1
} TuiWinElement, *TuiWinElementPtr;
d180 1
a180 1
typedef        TuiWinElementPtr    *TuiWinContent;
d184 29
a212 23
typedef struct _TuiDataInfo {
    TuiWinContent            dataContent; /* start of data display content */
    int                      dataContentCount;
    TuiWinContent            regsContent; /* start of regs display content */
    int                      regsContentCount;
    TuiRegisterDisplayType   regsDisplayType;
    int                      regsColumnCount;
    int                      displayRegs; /* Should regs be displayed at all? */
} TuiDataInfo, *TuiDataInfoPtr;


typedef struct _TuiSourceInfo {
    int                 hasLocator; /* Does locator belongs to this window? */
    TuiGenWinInfoPtr    executionInfo; /* execution information window */
    int                 horizontalOffset; /* used for horizontal scroll */
    TuiLineOrAddress    startLineOrAddr;
} TuiSourceInfo, *TuiSourceInfoPtr;


typedef struct _TuiCommandInfo {
    int            curLine;   /* The current line position */
    int            curch;     /* The current cursor position */
} TuiCommandInfo, *TuiCommandInfoPtr;
d216 15
a230 11
typedef struct _TuiWinInfo {
    TuiGenWinInfo            generic;        /* general window information */
    union {
        TuiSourceInfo        sourceInfo;
        TuiDataInfo          dataDisplayInfo;
        TuiCommandInfo       commandInfo;
        Opaque               opaque;
    } detail;
    int                 canHighlight; /* Can this window ever be highlighted? */
    int                 isHighlighted; /* Is this window highlighted? */
} TuiWinInfo, *TuiWinInfoPtr;
d262 2
a263 2
extern TuiWinInfoPtr      winList[MAX_MAJOR_WINDOWS];
extern int                tui_version;
d272 50
a321 55
extern void               initializeStaticData PARAMS ((void));
extern TuiGenWinInfoPtr   allocGenericWinInfo PARAMS ((void));
extern TuiWinInfoPtr      allocWinInfo PARAMS ((TuiWinType));
extern void               initGenericPart PARAMS ((TuiGenWinInfoPtr));
extern void               initWinInfo PARAMS ((TuiWinInfoPtr));
extern TuiWinContent      allocContent PARAMS ((int, TuiWinType));
extern int                addContentElements 
                             PARAMS ((TuiGenWinInfoPtr, int));
extern void               initContentElement 
                             PARAMS ((TuiWinElementPtr, TuiWinType));
extern void               freeWindow PARAMS ((TuiWinInfoPtr));
extern void               freeAllWindows PARAMS ((void));
extern void               freeWinContent PARAMS ((TuiGenWinInfoPtr));
extern void               freeDataContent PARAMS ((TuiWinContent, int));
extern void               freeAllSourceWinsContent PARAMS ((void));
extern void               tuiDelWindow PARAMS ((TuiWinInfoPtr));
extern void               tuiDelDataWindows PARAMS ((TuiWinContent, int));
extern TuiWinInfoPtr      winByName PARAMS ((char *));
extern TuiWinInfoPtr      partialWinByName PARAMS ((char *));
extern char               *winName PARAMS ((TuiGenWinInfoPtr));
extern char               *displayableWinContentOf 
                             PARAMS ((TuiGenWinInfoPtr, TuiWinElementPtr));
extern char               *displayableWinContentAt 
                             PARAMS ((TuiGenWinInfoPtr, int));
extern int                winElementHeight 
                             PARAMS ((TuiGenWinInfoPtr, TuiWinElementPtr));
extern TuiLayoutType      currentLayout PARAMS ((void));
extern void               setCurrentLayoutTo PARAMS ((TuiLayoutType));
extern int                termHeight PARAMS ((void));
extern void               setTermHeight PARAMS ((int));
extern int                termWidth PARAMS ((void));
extern void               setTermWidth PARAMS ((int));
extern int                historyLimit PARAMS ((void));
extern void               setHistoryLimit PARAMS ((int));
extern void               setGenWinOrigin PARAMS ((TuiGenWinInfoPtr, int, int));
extern TuiGenWinInfoPtr   locatorWinInfoPtr PARAMS ((void));
extern TuiGenWinInfoPtr   sourceExecInfoWinPtr PARAMS ((void));
extern TuiGenWinInfoPtr   disassemExecInfoWinPtr PARAMS ((void));
extern char               *nullStr PARAMS ((void));
extern char               *blankStr PARAMS ((void));
extern char               *locationStr PARAMS ((void));
extern char               *breakStr PARAMS ((void));
extern char               *breakLocationStr PARAMS ((void));
extern TuiListPtr         sourceWindows PARAMS ((void));
extern void               clearSourceWindows PARAMS ((void));
extern void               clearSourceWindowsDetail PARAMS ((void));
extern void               clearWinDetail PARAMS ((TuiWinInfoPtr   winInfo));
extern void               tuiAddToSourceWindows PARAMS ((TuiWinInfoPtr));
extern int                tuiDefaultTabLen PARAMS ((void));
extern void               tuiSetDefaultTabLen PARAMS ((int));
extern TuiWinInfoPtr      tuiWinWithFocus PARAMS ((void));
extern void               tuiSetWinWithFocus PARAMS ((TuiWinInfoPtr));
extern TuiLayoutDefPtr    tuiLayoutDef PARAMS ((void));
extern int                tuiWinResized PARAMS ((void));
extern void               tuiSetWinResizedTo PARAMS ((int));
d323 2
a324 2
extern TuiWinInfoPtr      tuiNextWin PARAMS ((TuiWinInfoPtr));
extern TuiWinInfoPtr      tuiPrevWin PARAMS ((TuiWinInfoPtr));
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d44 1
a44 2
typedef enum
  {
d49 1
a49 2
  }
TuiScrollDirection, *TuiScrollDirectionPtr;
d53 4
a56 6
typedef struct _TuiList
  {
    OpaqueList list;
    int count;
  }
TuiList, *TuiListPtr;
d60 1
a60 2
typedef enum
  {
d67 1
a67 2
  }
TuiLayoutType, *TuiLayoutTypePtr;
d70 1
a70 2
typedef enum _TuiDataType
  {
d75 1
a75 2
  }
TuiDataType, TuiDataTypePtr;
d78 1
a78 2
typedef enum _TuiRegisterDisplayType
  {
d85 1
a85 2
  }
TuiRegisterDisplayType, *TuiRegisterDisplayTypePtr;
d88 4
a91 6
typedef union _TuiLineOrAddress
  {
    int lineNo;
    Opaque addr;
  }
TuiLineOrAddress, *TuiLineOrAddressPtr;
d94 6
a99 8
typedef struct _TuiLayoutDef
  {
    TuiWinType displayMode;
    int split;
    TuiRegisterDisplayType regsDisplayType;
    TuiRegisterDisplayType floatRegsDisplayType;
  }
TuiLayoutDef, *TuiLayoutDefPtr;
d103 6
a108 7
  {
    char *line;
    TuiLineOrAddress lineOrAddr;
    int isExecPoint;
    int hasBreak;
  }
TuiSourceElement, *TuiSourceElementPtr;
d113 3
a115 3
  {
    char *name;
    int itemNo;			/* the register number, or data display number */
d117 3
a119 4
    Opaque value;
    int highlight;
  }
TuiDataElement, *TuiDataElementPtr;
d124 3
a126 4
  {
    char *line;
  }
TuiCommandElement, *TuiCommandElementPtr;
d133 6
a138 7
  {
    char fileName[MAX_LOCATOR_ELEMENT_LEN];
    char procName[MAX_LOCATOR_ELEMENT_LEN];
    int lineNo;
    Opaque addr;
  }
TuiLocatorElement, *TuiLocatorElementPtr;
d143 8
a150 9
  {
    TuiSourceElement source;	/* the source elements */
    TuiGenWinInfo dataWindow;	/* data display elements */
    TuiDataElement data;	/* elements of dataWindow */
    TuiCommandElement command;	/* command elements */
    TuiLocatorElement locator;	/* locator elements */
    char *simpleString;		/* simple char based elements */
  }
TuiWhichElement, *TuiWhichElementPtr;
d153 2
a154 2
  {
    int highlight;
d156 1
a156 2
  }
TuiWinElement, *TuiWinElementPtr;
d160 1
a160 1
typedef TuiWinElementPtr *TuiWinContent;
d164 23
a186 29
typedef struct _TuiDataInfo
  {
    TuiWinContent dataContent;	/* start of data display content */
    int dataContentCount;
    TuiWinContent regsContent;	/* start of regs display content */
    int regsContentCount;
    TuiRegisterDisplayType regsDisplayType;
    int regsColumnCount;
    int displayRegs;		/* Should regs be displayed at all? */
  }
TuiDataInfo, *TuiDataInfoPtr;


typedef struct _TuiSourceInfo
  {
    int hasLocator;		/* Does locator belongs to this window? */
    TuiGenWinInfoPtr executionInfo;	/* execution information window */
    int horizontalOffset;	/* used for horizontal scroll */
    TuiLineOrAddress startLineOrAddr;
  }
TuiSourceInfo, *TuiSourceInfoPtr;


typedef struct _TuiCommandInfo
  {
    int curLine;		/* The current line position */
    int curch;			/* The current cursor position */
  }
TuiCommandInfo, *TuiCommandInfoPtr;
d190 11
a200 15
typedef struct _TuiWinInfo
  {
    TuiGenWinInfo generic;	/* general window information */
    union
      {
	TuiSourceInfo sourceInfo;
	TuiDataInfo dataDisplayInfo;
	TuiCommandInfo commandInfo;
	Opaque opaque;
      }
    detail;
    int canHighlight;		/* Can this window ever be highlighted? */
    int isHighlighted;		/* Is this window highlighted? */
  }
TuiWinInfo, *TuiWinInfoPtr;
d232 2
a233 2
extern TuiWinInfoPtr winList[MAX_MAJOR_WINDOWS];
extern int tui_version;
d242 55
a296 55
extern void initializeStaticData PARAMS ((void));
extern TuiGenWinInfoPtr allocGenericWinInfo PARAMS ((void));
extern TuiWinInfoPtr allocWinInfo PARAMS ((TuiWinType));
extern void initGenericPart PARAMS ((TuiGenWinInfoPtr));
extern void initWinInfo PARAMS ((TuiWinInfoPtr));
extern TuiWinContent allocContent PARAMS ((int, TuiWinType));
extern int addContentElements
  PARAMS ((TuiGenWinInfoPtr, int));
extern void initContentElement
  PARAMS ((TuiWinElementPtr, TuiWinType));
extern void freeWindow PARAMS ((TuiWinInfoPtr));
extern void freeAllWindows PARAMS ((void));
extern void freeWinContent PARAMS ((TuiGenWinInfoPtr));
extern void freeDataContent PARAMS ((TuiWinContent, int));
extern void freeAllSourceWinsContent PARAMS ((void));
extern void tuiDelWindow PARAMS ((TuiWinInfoPtr));
extern void tuiDelDataWindows PARAMS ((TuiWinContent, int));
extern TuiWinInfoPtr winByName PARAMS ((char *));
extern TuiWinInfoPtr partialWinByName PARAMS ((char *));
extern char *winName PARAMS ((TuiGenWinInfoPtr));
extern char *displayableWinContentOf
  PARAMS ((TuiGenWinInfoPtr, TuiWinElementPtr));
extern char *displayableWinContentAt
  PARAMS ((TuiGenWinInfoPtr, int));
extern int winElementHeight
  PARAMS ((TuiGenWinInfoPtr, TuiWinElementPtr));
extern TuiLayoutType currentLayout PARAMS ((void));
extern void setCurrentLayoutTo PARAMS ((TuiLayoutType));
extern int termHeight PARAMS ((void));
extern void setTermHeight PARAMS ((int));
extern int termWidth PARAMS ((void));
extern void setTermWidth PARAMS ((int));
extern int historyLimit PARAMS ((void));
extern void setHistoryLimit PARAMS ((int));
extern void setGenWinOrigin PARAMS ((TuiGenWinInfoPtr, int, int));
extern TuiGenWinInfoPtr locatorWinInfoPtr PARAMS ((void));
extern TuiGenWinInfoPtr sourceExecInfoWinPtr PARAMS ((void));
extern TuiGenWinInfoPtr disassemExecInfoWinPtr PARAMS ((void));
extern char *nullStr PARAMS ((void));
extern char *blankStr PARAMS ((void));
extern char *locationStr PARAMS ((void));
extern char *breakStr PARAMS ((void));
extern char *breakLocationStr PARAMS ((void));
extern TuiListPtr sourceWindows PARAMS ((void));
extern void clearSourceWindows PARAMS ((void));
extern void clearSourceWindowsDetail PARAMS ((void));
extern void clearWinDetail PARAMS ((TuiWinInfoPtr winInfo));
extern void tuiAddToSourceWindows PARAMS ((TuiWinInfoPtr));
extern int tuiDefaultTabLen PARAMS ((void));
extern void tuiSetDefaultTabLen PARAMS ((int));
extern TuiWinInfoPtr tuiWinWithFocus PARAMS ((void));
extern void tuiSetWinWithFocus PARAMS ((TuiWinInfoPtr));
extern TuiLayoutDefPtr tuiLayoutDef PARAMS ((void));
extern int tuiWinResized PARAMS ((void));
extern void tuiSetWinResizedTo PARAMS ((int));
d298 2
a299 2
extern TuiWinInfoPtr tuiNextWin PARAMS ((TuiWinInfoPtr));
extern TuiWinInfoPtr tuiPrevWin PARAMS ((TuiWinInfoPtr));
@

