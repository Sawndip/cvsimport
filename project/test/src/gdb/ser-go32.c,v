head	1.32;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.31
	gdb_7_6-2013-04-26-release:1.31
	gdb_7_6-branch:1.31.0.2
	gdb_7_6-2013-03-12-branchpoint:1.31
	gdb_7_5_1-2012-11-29-release:1.29
	gdb_7_5-2012-08-17-release:1.29
	gdb_7_5-branch:1.29.0.2
	gdb_7_5-2012-07-18-branchpoint:1.29
	gdb_7_4_1-2012-04-26-release:1.28.4.1
	gdb_7_4-2012-01-24-release:1.28.4.1
	gdb_7_4-branch:1.28.0.4
	gdb_7_4-2011-12-13-branchpoint:1.28
	gdb_7_3_1-2011-09-04-release:1.28
	gdb_7_3-2011-07-26-release:1.28
	gdb_7_3-branch:1.28.0.2
	gdb_7_3-2011-04-01-branchpoint:1.28
	gdb_7_2-2010-09-02-release:1.23
	gdb_7_2-branch:1.23.0.2
	gdb_7_2-2010-07-07-branchpoint:1.23
	gdb_7_1-2010-03-18-release:1.22
	gdb_7_1-branch:1.22.0.2
	gdb_7_1-2010-02-18-branchpoint:1.22
	gdb_7_0_1-2009-12-22-release:1.21
	gdb_7_0-2009-10-06-release:1.21
	gdb_7_0-branch:1.21.0.4
	gdb_7_0-2009-09-16-branchpoint:1.21
	arc-sim-20090309:1.20
	msnyder-checkpoint-072509-branch:1.21.0.2
	msnyder-checkpoint-072509-branchpoint:1.21
	arc-insight_6_8-branch:1.20.0.16
	arc-insight_6_8-branchpoint:1.20
	insight_6_8-branch:1.20.0.14
	insight_6_8-branchpoint:1.20
	reverse-20081226-branch:1.20.0.12
	reverse-20081226-branchpoint:1.20
	multiprocess-20081120-branch:1.20.0.10
	multiprocess-20081120-branchpoint:1.20
	reverse-20080930-branch:1.20.0.8
	reverse-20080930-branchpoint:1.20
	reverse-20080717-branch:1.20.0.6
	reverse-20080717-branchpoint:1.20
	msnyder-reverse-20080609-branch:1.20.0.4
	msnyder-reverse-20080609-branchpoint:1.20
	drow-reverse-20070409-branch:1.18.0.2
	drow-reverse-20070409-branchpoint:1.18
	gdb_6_8-2008-03-27-release:1.20
	gdb_6_8-branch:1.20.0.2
	gdb_6_8-2008-02-26-branchpoint:1.20
	gdb_6_7_1-2007-10-29-release:1.19
	gdb_6_7-2007-10-10-release:1.19
	gdb_6_7-branch:1.19.0.2
	gdb_6_7-2007-09-07-branchpoint:1.19
	insight_6_6-20070208-release:1.17
	gdb_6_6-2006-12-18-release:1.17
	gdb_6_6-branch:1.17.0.18
	gdb_6_6-2006-11-15-branchpoint:1.17
	insight_6_5-20061003-release:1.17
	gdb-csl-symbian-6_4_50_20060226-12:1.17
	gdb-csl-sourcerygxx-3_4_4-25:1.16
	nickrob-async-20060828-mergepoint:1.17
	gdb-csl-symbian-6_4_50_20060226-11:1.17
	gdb-csl-sourcerygxx-4_1-17:1.17
	gdb-csl-20060226-branch-local-2:1.17
	gdb-csl-sourcerygxx-4_1-14:1.17
	gdb-csl-sourcerygxx-4_1-13:1.17
	gdb-csl-sourcerygxx-4_1-12:1.17
	gdb-csl-sourcerygxx-3_4_4-21:1.17
	gdb_6_5-20060621-release:1.17
	gdb-csl-sourcerygxx-4_1-9:1.17
	gdb-csl-sourcerygxx-4_1-8:1.17
	gdb-csl-sourcerygxx-4_1-7:1.17
	gdb-csl-arm-2006q1-6:1.17
	gdb-csl-sourcerygxx-4_1-6:1.17
	gdb-csl-symbian-6_4_50_20060226-10:1.17
	gdb-csl-symbian-6_4_50_20060226-9:1.17
	gdb-csl-symbian-6_4_50_20060226-8:1.17
	gdb-csl-coldfire-4_1-11:1.17
	gdb-csl-sourcerygxx-3_4_4-19:1.17
	gdb-csl-coldfire-4_1-10:1.17
	gdb_6_5-branch:1.17.0.16
	gdb_6_5-2006-05-14-branchpoint:1.17
	gdb-csl-sourcerygxx-4_1-5:1.17
	nickrob-async-20060513-branch:1.17.0.14
	nickrob-async-20060513-branchpoint:1.17
	gdb-csl-sourcerygxx-4_1-4:1.17
	msnyder-reverse-20060502-branch:1.17.0.12
	msnyder-reverse-20060502-branchpoint:1.17
	gdb-csl-morpho-4_1-4:1.17
	gdb-csl-sourcerygxx-3_4_4-17:1.17
	readline_5_1-import-branch:1.17.0.10
	readline_5_1-import-branchpoint:1.17
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.17
	gdb-csl-symbian-20060226-branch:1.17.0.8
	gdb-csl-symbian-20060226-branchpoint:1.17
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.17
	msnyder-reverse-20060331-branch:1.17.0.6
	msnyder-reverse-20060331-branchpoint:1.17
	gdb-csl-available-20060303-branch:1.17.0.4
	gdb-csl-available-20060303-branchpoint:1.17
	gdb-csl-20060226-branch:1.17.0.2
	gdb-csl-20060226-branchpoint:1.17
	gdb_6_4-20051202-release:1.16
	msnyder-fork-checkpoint-branch:1.16.0.12
	msnyder-fork-checkpoint-branchpoint:1.16
	gdb-csl-gxxpro-6_3-branch:1.16.0.10
	gdb-csl-gxxpro-6_3-branchpoint:1.16
	gdb_6_4-branch:1.16.0.8
	gdb_6_4-2005-11-01-branchpoint:1.16
	gdb-csl-arm-20051020-branch:1.16.0.6
	gdb-csl-arm-20051020-branchpoint:1.16
	msnyder-tracepoint-checkpoint-branch:1.16.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.16
	gdb-csl-arm-20050325-2005-q1b:1.16
	gdb-csl-arm-20050325-2005-q1a:1.16
	csl-arm-20050325-branch:1.16.0.2
	csl-arm-20050325-branchpoint:1.16
	gdb-post-i18n-errorwarning-20050211:1.14
	gdb-pre-i18n-errorwarning-20050211:1.14
	gdb_6_3-20041109-release:1.14
	gdb_6_3-branch:1.14.0.2
	gdb_6_3-20041019-branchpoint:1.14
	drow_intercu-merge-20040921:1.14
	drow_intercu-merge-20040915:1.14
	jimb-gdb_6_2-e500-branch:1.13.0.56
	jimb-gdb_6_2-e500-branchpoint:1.13
	gdb_6_2-20040730-release:1.13
	gdb_6_2-branch:1.13.0.52
	gdb_6_2-2004-07-10-gmt-branchpoint:1.13
	gdb_6_1_1-20040616-release:1.13
	gdb_6_1-2004-04-05-release:1.13
	drow_intercu-merge-20040402:1.13
	drow_intercu-merge-20040327:1.13
	ezannoni_pie-20040323-branch:1.13.0.50
	ezannoni_pie-20040323-branchpoint:1.13
	cagney_tramp-20040321-mergepoint:1.13
	cagney_tramp-20040309-branch:1.13.0.48
	cagney_tramp-20040309-branchpoint:1.13
	gdb_6_1-branch:1.13.0.46
	gdb_6_1-2004-03-01-gmt-branchpoint:1.13
	drow_intercu-20040221-branch:1.13.0.44
	drow_intercu-20040221-branchpoint:1.13
	cagney_bfdfile-20040213-branch:1.13.0.42
	cagney_bfdfile-20040213-branchpoint:1.13
	drow-cplus-merge-20040208:1.13
	carlton_dictionary-20040126-merge:1.13
	cagney_bigcore-20040122-branch:1.13.0.40
	cagney_bigcore-20040122-branchpoint:1.13
	drow-cplus-merge-20040113:1.13
	drow-cplus-merge-20031224:1.13
	drow-cplus-merge-20031220:1.13
	carlton_dictionary-20031215-merge:1.13
	drow-cplus-merge-20031214:1.13
	carlton-dictionary-20031111-merge:1.13
	gdb_6_0-2003-10-04-release:1.13
	kettenis_sparc-20030918-branch:1.13.0.38
	kettenis_sparc-20030918-branchpoint:1.13
	carlton_dictionary-20030917-merge:1.13
	ezannoni_pie-20030916-branchpoint:1.13
	ezannoni_pie-20030916-branch:1.13.0.36
	cagney_x86i386-20030821-branch:1.13.0.34
	cagney_x86i386-20030821-branchpoint:1.13
	carlton_dictionary-20030805-merge:1.13
	carlton_dictionary-20030627-merge:1.13
	gdb_6_0-branch:1.13.0.32
	gdb_6_0-2003-06-23-branchpoint:1.13
	jimb-ppc64-linux-20030613-branch:1.13.0.30
	jimb-ppc64-linux-20030613-branchpoint:1.13
	cagney_convert-20030606-branch:1.13.0.28
	cagney_convert-20030606-branchpoint:1.13
	cagney_writestrings-20030508-branch:1.13.0.26
	cagney_writestrings-20030508-branchpoint:1.13
	jimb-ppc64-linux-20030528-branch:1.13.0.24
	jimb-ppc64-linux-20030528-branchpoint:1.13
	carlton_dictionary-20030523-merge:1.13
	cagney_fileio-20030521-branch:1.13.0.22
	cagney_fileio-20030521-branchpoint:1.13
	kettenis_i386newframe-20030517-mergepoint:1.13
	jimb-ppc64-linux-20030509-branch:1.13.0.20
	jimb-ppc64-linux-20030509-branchpoint:1.13
	kettenis_i386newframe-20030504-mergepoint:1.13
	carlton_dictionary-20030430-merge:1.13
	kettenis_i386newframe-20030419-branch:1.13.0.18
	kettenis_i386newframe-20030419-branchpoint:1.13
	carlton_dictionary-20030416-merge:1.13
	cagney_frameaddr-20030409-mergepoint:1.13
	kettenis_i386newframe-20030406-branch:1.13.0.16
	kettenis_i386newframe-20030406-branchpoint:1.13
	cagney_frameaddr-20030403-branchpoint:1.13
	cagney_frameaddr-20030403-branch:1.13.0.14
	cagney_framebase-20030330-mergepoint:1.13
	cagney_framebase-20030326-branch:1.13.0.12
	cagney_framebase-20030326-branchpoint:1.13
	cagney_lazyid-20030317-branch:1.13.0.10
	cagney_lazyid-20030317-branchpoint:1.13
	kettenis-i386newframe-20030316-mergepoint:1.13
	offbyone-20030313-branch:1.13.0.8
	offbyone-20030313-branchpoint:1.13
	kettenis-i386newframe-20030308-branch:1.13.0.6
	kettenis-i386newframe-20030308-branchpoint:1.13
	carlton_dictionary-20030305-merge:1.13
	cagney_offbyone-20030303-branch:1.13.0.4
	cagney_offbyone-20030303-branchpoint:1.13
	carlton_dictionary-20030207-merge:1.13
	interps-20030203-mergepoint:1.13
	interps-20030202-branch:1.13.0.2
	interps-20030202-branchpoint:1.13
	cagney-unwind-20030108-branch:1.12.0.26
	cagney-unwind-20030108-branchpoint:1.12
	carlton_dictionary-20021223-merge:1.12
	gdb_5_3-2002-12-12-release:1.12
	carlton_dictionary-20021115-merge:1.12
	kseitz_interps-20021105-merge:1.12
	kseitz_interps-20021103-merge:1.12
	drow-cplus-merge-20021020:1.12
	drow-cplus-merge-20021025:1.12
	carlton_dictionary-20021025-merge:1.12
	carlton_dictionary-20021011-merge:1.12
	drow-cplus-branch:1.12.0.24
	drow-cplus-branchpoint:1.12
	kseitz_interps-20020930-merge:1.12
	carlton_dictionary-20020927-merge:1.12
	carlton_dictionary-branch:1.12.0.22
	carlton_dictionary-20020920-branchpoint:1.12
	gdb_5_3-branch:1.12.0.20
	gdb_5_3-2002-09-04-branchpoint:1.12
	kseitz_interps-20020829-merge:1.12
	cagney_sysregs-20020825-branch:1.12.0.18
	cagney_sysregs-20020825-branchpoint:1.12
	readline_4_3-import-branch:1.12.0.16
	readline_4_3-import-branchpoint:1.12
	gdb_5_2_1-2002-07-23-release:1.12
	kseitz_interps-20020528-branch:1.12.0.14
	kseitz_interps-20020528-branchpoint:1.12
	cagney_regbuf-20020515-branch:1.12.0.12
	cagney_regbuf-20020515-branchpoint:1.12
	jimb-macro-020506-branch:1.12.0.10
	jimb-macro-020506-branchpoint:1.12
	gdb_5_2-2002-04-29-release:1.12
	gdb_5_2-branch:1.12.0.8
	gdb_5_2-2002-03-03-branchpoint:1.12
	gdb_5_1_1-2002-01-24-release:1.12
	gdb_5_1_0_1-2002-01-03-release:1.12
	cygnus_cvs_20020108_pre:1.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.12
	gdb_5_1_0_1-2002-01-03-branch:1.12.0.6
	gdb_5_1-2001-11-21-release:1.12
	gdb_s390-2001-09-26-branch:1.12.0.4
	gdb_s390-2001-09-26-branchpoint:1.12
	gdb_5_1-2001-07-29-branch:1.12.0.2
	gdb_5_1-2001-07-29-branchpoint:1.12
	dberlin-typesystem-branch:1.11.0.2
	dberlin-typesystem-branchpoint:1.11
	gdb-post-ptid_t-2001-05-03:1.10
	gdb-pre-ptid_t-2001-05-03:1.10
	insight-precleanup-2001-01-01:1.7
	gdb-post-protoization-2000-07-29:1.7
	gdb-pre-protoization-2000-07-29:1.6
	gdb-premipsmulti-2000-06-06-branch:1.6.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.6
	gdb-post-params-removal-2000-06-04:1.6
	gdb-pre-params-removal-2000-06-04:1.6
	gdb-post-params-removal-2000-05-28:1.6
	gdb-pre-params-removal-2000-05-28:1.6
	gdb_5_0-2000-05-19-release:1.5
	gdb_4_18_2-2000-05-18-release:1.5
	gdb_4_95_1-2000-05-11-snapshot:1.5
	gdb_4_95_0-2000-04-27-snapshot:1.5
	gdb_5_0-2000-04-10-branch:1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.5
	repo-unification-2000-02-06:1.1.1.5
	insight-2000-02-04:1.1.1.5
	gdb-2000-02-04:1.1.1.5
	gdb-2000-02-02:1.1.1.5
	gdb-2000-02-01:1.1.1.5
	gdb-2000-01-31:1.1.1.4
	gdb-2000-01-26:1.1.1.4
	gdb-2000-01-24:1.1.1.4
	gdb-2000-01-17:1.1.1.4
	gdb-2000-01-10:1.1.1.4
	gdb-2000-01-05:1.1.1.4
	gdb-1999-12-21:1.1.1.4
	gdb-1999-12-13:1.1.1.4
	gdb-1999-12-07:1.1.1.4
	gdb-1999-12-06:1.1.1.4
	gdb-1999-11-16:1.1.1.4
	gdb-1999-11-08:1.1.1.4
	gdb-1999-11-01:1.1.1.4
	gdb-1999-10-25:1.1.1.4
	gdb-1999-10-18:1.1.1.4
	gdb-1999-10-11:1.1.1.4
	gdb-1999-10-04:1.1.1.4
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.3
	gdb-1999-09-08:1.1.1.3
	gdb-1999-08-30:1.1.1.3
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.32
date	2013.04.19.15.26.17;	author palves;	state Exp;
branches;
next	1.31;

1.31
date	2013.01.01.06.32.50;	author brobecke;	state Exp;
branches;
next	1.30;

1.30
date	2012.07.31.06.16.09;	author qiyao;	state Exp;
branches;
next	1.29;

1.29
date	2012.01.04.08.17.10;	author brobecke;	state Exp;
branches;
next	1.28;

1.28
date	2011.03.04.19.23.42;	author uweigand;	state Exp;
branches
	1.28.4.1;
next	1.27;

1.27
date	2011.01.11.21.53.23;	author msnyder;	state Exp;
branches;
next	1.26;

1.26
date	2011.01.01.15.33.14;	author brobecke;	state Exp;
branches;
next	1.25;

1.25
date	2010.10.12.15.40.03;	author muller;	state Exp;
branches;
next	1.24;

1.24
date	2010.08.20.18.49.20;	author palves;	state Exp;
branches;
next	1.23;

1.23
date	2010.05.16.23.49.58;	author msnyder;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.01.07.31.41;	author brobecke;	state Exp;
branches;
next	1.21;

1.21
date	2009.01.03.05.57.53;	author brobecke;	state Exp;
branches;
next	1.20;

1.20
date	2008.01.01.22.53.12;	author drow;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.23.18.08.37;	author brobecke;	state Exp;
branches;
next	1.18;

1.18
date	2007.01.09.17.58.58;	author drow;	state Exp;
branches;
next	1.17;

1.17
date	2005.12.17.22.34.02;	author eliz;	state Exp;
branches;
next	1.16;

1.16
date	2005.02.18.18.58.56;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.15.15.49.19;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.26.14.53.04;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.19.04.06.46;	author cagney;	state Exp;
branches
	1.13.44.1;
next	1.12;

1.12
date	2001.07.11.17.52.32;	author cagney;	state Exp;
branches
	1.12.22.1
	1.12.24.1;
next	1.11;

1.11
date	2001.06.10.16.25.51;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.26.11.26.45;	author eliz;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.14.16.42.30;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.04.07.48.18;	author eliz;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.30.01.48.27;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.25.13.55.48;	author eliz;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.19.11.24.41;	author eliz;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.15.11.11.41;	author eliz;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.15.11.10.52;	author eliz;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.29.07.45.13;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.28.4.1
date	2012.01.06.04.43.29;	author brobecke;	state Exp;
branches;
next	;

1.13.44.1
date	2004.09.16.17.01.19;	author drow;	state Exp;
branches;
next	;

1.12.22.1
date	2003.02.07.19.17.52;	author carlton;	state Exp;
branches;
next	;

1.12.24.1
date	2003.12.14.20.27.30;	author drow;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.05.14.42.53;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.20.09.45;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.09.22.03.24.59;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2000.02.02.00.21.10;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.32
log
@serial_write: change prototype to take a void-pointer buffer.

While remote.c works with "char *" buffers most of the time, other
remote targets have binary-ish-er protocols, and choose to use
"unsigned char" throughout, like e.g., remote-mips.c or
remote-m32r-sdi.c.  That results in -Wpointer-sign warnings in those
targets, unless we add casts in calls to serial_write.  Since
serial_write is only concerned about sending raw host bytes out, and
serial_ops->write_prim already works with "void *"/"size_t", a similar
interface to the "write" or "send" system calls, I find it natural to
change serial_write's prototype accordingly, avoiding the need for
casts.

Tested on x86_64 Fedora 17, and also by building x86_64-mingw32
and DJGPP/go32 -hosted gdbs.

gdb/
2013-04-19  Pedro Alves  <palves@@redhat.com>

	* ser-base.c (ser_base_write): Change prototype -- take 'void *'
	buffer and size_t size.  Adjust.
	* ser-base.h (ser_base_write): Adjust.
	* ser-go32.c (cnts): Change type to size_t.
	(dos_write): Change prototype -- take 'void *'
	buffer and size_t size.  Adjust.
	(dos_info): Print elements of 'cnts' as unsigned long.
	* serial.c (serial_write): Likewise.
	* serial.h (serial_write): Adjust.
	(struct serial_ops) <write>: Change prototype -- take 'void *'
	buffer and size_t size.  Adjust.
@
text
@/* Remote serial interface for local (hardwired) serial ports for GO32.
   Copyright (C) 1992-2013 Free Software Foundation, Inc.

   Contributed by Nigel Stephens, Algorithmics Ltd. (nigel@@algor.co.uk).

   This version uses DPMI interrupts to handle buffered i/o
   without the separate "asynctsr" program.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "gdbcmd.h"
#include "serial.h"
#include "gdb_string.h"


/*
 * NS16550 UART registers
 */

#define COM1ADDR	0x3f8
#define COM2ADDR	0x2f8
#define COM3ADDR	0x3e8
#define COM4ADDR	0x3e0

#define	com_data	0	/* data register (R/W) */
#define	com_dlbl	0	/* divisor latch low (W) */
#define	com_ier		1	/* interrupt enable (W) */
#define	com_dlbh	1	/* divisor latch high (W) */
#define	com_iir		2	/* interrupt identification (R) */
#define	com_fifo	2	/* FIFO control (W) */
#define	com_lctl	3	/* line control register (R/W) */
#define	com_cfcr	3	/* line control register (R/W) */
#define	com_mcr		4	/* modem control register (R/W) */
#define	com_lsr		5	/* line status register (R/W) */
#define	com_msr		6	/* modem status register (R/W) */

/*
 * Constants for computing 16 bit baud rate divisor (lower byte
 * in com_dlbl, upper in com_dlbh) from 1.8432MHz crystal.  Divisor is
 * 1.8432 MHz / (16 * X) for X bps.  If the baud rate can't be set
 * to within +- (desired_rate*SPEED_TOLERANCE/1000) bps, we fail.
 */
#define COMTICK		(1843200/16)
#define SPEED_TOLERANCE	30	/* thousandths; real == desired +- 3.0% */

/* interrupt enable register */
#define	IER_ERXRDY	0x1	/* int on rx ready */
#define	IER_ETXRDY	0x2	/* int on tx ready */
#define	IER_ERLS	0x4	/* int on line status change */
#define	IER_EMSC	0x8	/* int on modem status change */

/* interrupt identification register */
#define	IIR_FIFO_MASK	0xc0	/* set if FIFOs are enabled */
#define	IIR_IMASK	0xf	/* interrupt cause mask */
#define	IIR_NOPEND	0x1	/* nothing pending */
#define	IIR_RLS		0x6	/* receive line status */
#define	IIR_RXRDY	0x4	/* receive ready */
#define	IIR_RXTOUT	0xc	/* receive timeout */
#define	IIR_TXRDY	0x2	/* transmit ready */
#define	IIR_MLSC	0x0	/* modem status */


/* fifo control register */
#define	FIFO_ENABLE	0x01	/* enable fifo */
#define	FIFO_RCV_RST	0x02	/* reset receive fifo */
#define	FIFO_XMT_RST	0x04	/* reset transmit fifo */
#define	FIFO_DMA_MODE	0x08	/* enable dma mode */
#define	FIFO_TRIGGER_1	0x00	/* trigger at 1 char */
#define	FIFO_TRIGGER_4	0x40	/* trigger at 4 chars */
#define	FIFO_TRIGGER_8	0x80	/* trigger at 8 chars */
#define	FIFO_TRIGGER_14	0xc0	/* trigger at 14 chars */

/* character format control register */
#define	CFCR_DLAB	0x80	/* divisor latch */
#define	CFCR_SBREAK	0x40	/* send break */
#define	CFCR_PZERO	0x30	/* zero parity */
#define	CFCR_PONE	0x20	/* one parity */
#define	CFCR_PEVEN	0x10	/* even parity */
#define	CFCR_PODD	0x00	/* odd parity */
#define	CFCR_PENAB	0x08	/* parity enable */
#define	CFCR_STOPB	0x04	/* 2 stop bits */
#define	CFCR_8BITS	0x03	/* 8 data bits */
#define	CFCR_7BITS	0x02	/* 7 data bits */
#define	CFCR_6BITS	0x01	/* 6 data bits */
#define	CFCR_5BITS	0x00	/* 5 data bits */

/* modem control register */
#define	MCR_LOOPBACK	0x10	/* loopback */
#define	MCR_IENABLE	0x08	/* output 2 = int enable */
#define	MCR_DRS		0x04	/* output 1 = xxx */
#define	MCR_RTS		0x02	/* enable RTS */
#define	MCR_DTR		0x01	/* enable DTR */

/* line status register */
#define	LSR_RCV_FIFO	0x80	/* error in receive fifo */
#define	LSR_TSRE	0x40	/* transmitter empty */
#define	LSR_TXRDY	0x20	/* transmitter ready */
#define	LSR_BI		0x10	/* break detected */
#define	LSR_FE		0x08	/* framing error */
#define	LSR_PE		0x04	/* parity error */
#define	LSR_OE		0x02	/* overrun error */
#define	LSR_RXRDY	0x01	/* receiver ready */
#define	LSR_RCV_MASK	0x1f

/* modem status register */
#define	MSR_DCD		0x80
#define	MSR_RI		0x40
#define	MSR_DSR		0x20
#define	MSR_CTS		0x10
#define	MSR_DDCD	0x08
#define	MSR_TERI	0x04
#define	MSR_DDSR	0x02
#define	MSR_DCTS	0x01

#include <time.h>
#include <dos.h>
#include <go32.h>
#include <dpmi.h>
typedef unsigned long u_long;

/* 16550 rx fifo trigger point */
#define FIFO_TRIGGER	FIFO_TRIGGER_4

/* input buffer size */
#define CBSIZE	4096

#define RAWHZ	18

#ifdef DOS_STATS
#define CNT_RX		16
#define CNT_TX		17
#define CNT_STRAY	18
#define CNT_ORUN	19
#define NCNT		20

static int intrcnt;
static size_t cnts[NCNT];
static char *cntnames[NCNT] =
{
  /* h/w interrupt counts.  */
  "mlsc", "nopend", "txrdy", "?3",
  "rxrdy", "?5", "rls", "?7",
  "?8", "?9", "?a", "?b",
  "rxtout", "?d", "?e", "?f",
  /* s/w counts.  */
  "rxcnt", "txcnt", "stray", "swoflo"
};

#define COUNT(x) cnts[x]++
#else
#define COUNT(x)
#endif

/* Main interrupt controller port addresses.  */
#define ICU_BASE	0x20
#define ICU_OCW2	(ICU_BASE + 0)
#define ICU_MASK	(ICU_BASE + 1)

/* Original interrupt controller mask register.  */
unsigned char icu_oldmask;

/* Maximum of 8 interrupts (we don't handle the slave icu yet).  */
#define NINTR	8

static struct intrupt
  {
    char inuse;
    struct dos_ttystate *port;
    _go32_dpmi_seginfo old_rmhandler;
    _go32_dpmi_seginfo old_pmhandler;
    _go32_dpmi_seginfo new_rmhandler;
    _go32_dpmi_seginfo new_pmhandler;
    _go32_dpmi_registers regs;
  }
intrupts[NINTR];


static struct dos_ttystate
  {
    int base;
    int irq;
    int refcnt;
    struct intrupt *intrupt;
    int fifo;
    int baudrate;
    unsigned char cbuf[CBSIZE];
    unsigned int first;
    unsigned int count;
    int txbusy;
    unsigned char old_mcr;
    int ferr;
    int perr;
    int oflo;
    int msr;
  }
ports[4] =
{
  {
    COM1ADDR, 4, 0, NULL, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0
  }
  ,
  {
    COM2ADDR, 3, 0, NULL, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0
  }
  ,
  {
    COM3ADDR, 4, 0, NULL, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0
  }
  ,
  {
    COM4ADDR, 3, 0, NULL, 0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0
  }
};

static int dos_open (struct serial *scb, const char *name);
static void dos_raw (struct serial *scb);
static int dos_readchar (struct serial *scb, int timeout);
static int dos_setbaudrate (struct serial *scb, int rate);
static int dos_write (struct serial *scb, const void *buf, size_t count);
static void dos_close (struct serial *scb);
static serial_ttystate dos_get_tty_state (struct serial *scb);
static int dos_set_tty_state (struct serial *scb, serial_ttystate state);
static int dos_baudconv (int rate);

#define inb(p,a)	inportb((p)->base + (a))
#define outb(p,a,v)	outportb((p)->base + (a), (v))
#define disable()	asm volatile ("cli");
#define enable()	asm volatile ("sti");


static int
dos_getc (volatile struct dos_ttystate *port)
{
  int c;

  if (port->count == 0)
    return -1;

  c = port->cbuf[port->first];
  disable ();
  port->first = (port->first + 1) & (CBSIZE - 1);
  port->count--;
  enable ();
  return c;
}


static int
dos_putc (int c, struct dos_ttystate *port)
{
  if (port->count >= CBSIZE - 1)
    return -1;
  port->cbuf[(port->first + port->count) & (CBSIZE - 1)] = c;
  port->count++;
  return 0;
}



static void
dos_comisr (int irq)
{
  struct dos_ttystate *port;
  unsigned char iir, lsr, c;

  disable ();			/* Paranoia */
  outportb (ICU_OCW2, 0x20);	/* End-Of-Interrupt */
#ifdef DOS_STATS
  ++intrcnt;
#endif

  port = intrupts[irq].port;
  if (!port)
    {
      COUNT (CNT_STRAY);
      return;			/* not open */
    }

  while (1)
    {
      iir = inb (port, com_iir) & IIR_IMASK;
      switch (iir)
	{

	case IIR_RLS:
	  lsr = inb (port, com_lsr);
	  goto rx;

	case IIR_RXTOUT:
	case IIR_RXRDY:
	  lsr = 0;

	rx:
	  do
	    {
	      c = inb (port, com_data);
	      if (lsr & (LSR_BI | LSR_FE | LSR_PE | LSR_OE))
		{
		  if (lsr & (LSR_BI | LSR_FE))
		    port->ferr++;
		  else if (lsr & LSR_PE)
		    port->perr++;
		  if (lsr & LSR_OE)
		    port->oflo++;
		}

	      if (dos_putc (c, port) < 0)
		{
		  COUNT (CNT_ORUN);
		}
	      else
		{
		  COUNT (CNT_RX);
		}
	    }
	  while ((lsr = inb (port, com_lsr)) & LSR_RXRDY);
	  break;

	case IIR_MLSC:
	  /* could be used to flowcontrol Tx */
	  port->msr = inb (port, com_msr);
	  break;

	case IIR_TXRDY:
	  port->txbusy = 0;
	  break;

	case IIR_NOPEND:
	  /* No more pending interrupts, all done.  */
	  return;

	default:
	  /* Unexpected interrupt, ignore.  */
	  break;
	}
      COUNT (iir);
    }
}

#define ISRNAME(x) dos_comisr##x
#define ISR(x) static void ISRNAME(x)(void) {dos_comisr(x);}

ISR (0) ISR (1) ISR (2) ISR (3) /* OK */
ISR (4) ISR (5) ISR (6) ISR (7) /* OK */

typedef void (*isr_t) (void);

static isr_t isrs[NINTR] =
  {
       ISRNAME (0), ISRNAME (1), ISRNAME (2), ISRNAME (3),
       ISRNAME (4), ISRNAME (5), ISRNAME (6), ISRNAME (7)
  };



static struct intrupt *
dos_hookirq (unsigned int irq)
{
  struct intrupt *intr;
  unsigned int vec;
  isr_t isr;

  if (irq >= NINTR)
    return 0;

  intr = &intrupts[irq];
  if (intr->inuse)
    return 0;

  vec = 0x08 + irq;
  isr = isrs[irq];

  /* Setup real mode handler.  */
  _go32_dpmi_get_real_mode_interrupt_vector (vec, &intr->old_rmhandler);

  intr->new_rmhandler.pm_selector = _go32_my_cs ();
  intr->new_rmhandler.pm_offset = (u_long) isr;
  if (_go32_dpmi_allocate_real_mode_callback_iret (&intr->new_rmhandler,
						   &intr->regs))
    {
      return 0;
    }

  if (_go32_dpmi_set_real_mode_interrupt_vector (vec, &intr->new_rmhandler))
    {
      return 0;
    }

  /* Setup protected mode handler.  */
  _go32_dpmi_get_protected_mode_interrupt_vector (vec, &intr->old_pmhandler);

  intr->new_pmhandler.pm_selector = _go32_my_cs ();
  intr->new_pmhandler.pm_offset = (u_long) isr;
  _go32_dpmi_allocate_iret_wrapper (&intr->new_pmhandler);

  if (_go32_dpmi_set_protected_mode_interrupt_vector (vec,
						      &intr->new_pmhandler))
    {
      return 0;
    }

  /* Setup interrupt controller mask.  */
  disable ();
  outportb (ICU_MASK, inportb (ICU_MASK) & ~(1 << irq));
  enable ();

  intr->inuse = 1;
  return intr;
}


static void
dos_unhookirq (struct intrupt *intr)
{
  unsigned int irq, vec;
  unsigned char mask;

  irq = intr - intrupts;
  vec = 0x08 + irq;

  /* Restore old interrupt mask bit.  */
  mask = 1 << irq;
  disable ();
  outportb (ICU_MASK, inportb (ICU_MASK) | (mask & icu_oldmask));
  enable ();

  /* Remove real mode handler.  */
  _go32_dpmi_set_real_mode_interrupt_vector (vec, &intr->old_rmhandler);
  _go32_dpmi_free_real_mode_callback (&intr->new_rmhandler);

  /* Remove protected mode handler.  */
  _go32_dpmi_set_protected_mode_interrupt_vector (vec, &intr->old_pmhandler);
  _go32_dpmi_free_iret_wrapper (&intr->new_pmhandler);
  intr->inuse = 0;
}



static int
dos_open (struct serial *scb, const char *name)
{
  struct dos_ttystate *port;
  int fd, i;

  if (strncasecmp (name, "/dev/", 5) == 0)
    name += 5;
  else if (strncasecmp (name, "\\dev\\", 5) == 0)
    name += 5;

  if (strlen (name) != 4 || strncasecmp (name, "com", 3) != 0)
    {
      errno = ENOENT;
      return -1;
    }

  if (name[3] < '1' || name[3] > '4')
    {
      errno = ENOENT;
      return -1;
    }

  /* FIXME: this is a Bad Idea (tm)!  One should *never* invent file
     handles, since they might be already used by other files/devices.
     The Right Way to do this is to create a real handle by dup()'ing
     some existing one.  */
  fd = name[3] - '1';
  port = &ports[fd];
  if (port->refcnt++ > 0)
    {
      /* Device already opened another user.  Just point at it.  */
      scb->fd = fd;
      return 0;
    }

  /* Force access to ID reg.  */
  outb (port, com_cfcr, 0);
  outb (port, com_iir, 0);
  for (i = 0; i < 17; i++)
    {
      if ((inb (port, com_iir) & 0x38) == 0)
	goto ok;
      (void) inb (port, com_data);	/* clear recv */
    }
  errno = ENODEV;
  return -1;

ok:
  /* Disable all interrupts in chip.  */
  outb (port, com_ier, 0);

  /* Tentatively enable 16550 fifo, and see if it responds.  */
  outb (port, com_fifo,
	FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER);
  sleep (1);
  port->fifo = ((inb (port, com_iir) & IIR_FIFO_MASK) == IIR_FIFO_MASK);

  /* clear pending status reports.  */
  (void) inb (port, com_lsr);
  (void) inb (port, com_msr);

  /* Enable external interrupt gate (to avoid floating IRQ).  */
  outb (port, com_mcr, MCR_IENABLE);

  /* Hook up interrupt handler and initialise icu.  */
  port->intrupt = dos_hookirq (port->irq);
  if (!port->intrupt)
    {
      outb (port, com_mcr, 0);
      outb (port, com_fifo, 0);
      errno = ENODEV;
      return -1;
    }

  disable ();

  /* record port */
  port->intrupt->port = port;
  scb->fd = fd;

  /* Clear rx buffer, tx busy flag and overflow count.  */
  port->first = port->count = 0;
  port->txbusy = 0;
  port->oflo = 0;

  /* Set default baud rate and mode: 9600,8,n,1 */
  i = dos_baudconv (port->baudrate = 9600);
  outb (port, com_cfcr, CFCR_DLAB);
  outb (port, com_dlbl, i & 0xff);
  outb (port, com_dlbh, i >> 8);
  outb (port, com_cfcr, CFCR_8BITS);

  /* Enable all interrupts.  */
  outb (port, com_ier, IER_ETXRDY | IER_ERXRDY | IER_ERLS | IER_EMSC);

  /* Enable DTR & RTS.  */
  outb (port, com_mcr, MCR_DTR | MCR_RTS | MCR_IENABLE);

  enable ();

  return 0;
}


static void
dos_close (struct serial *scb)
{
  struct dos_ttystate *port;
  struct intrupt *intrupt;

  if (!scb)
    return;

  port = &ports[scb->fd];

  if (port->refcnt-- > 1)
    return;

  if (!(intrupt = port->intrupt))
    return;

  /* Disable interrupts, fifo, flow control.  */
  disable ();
  port->intrupt = 0;
  intrupt->port = 0;
  outb (port, com_fifo, 0);
  outb (port, com_ier, 0);
  enable ();

  /* Unhook handler, and disable interrupt gate.  */
  dos_unhookirq (intrupt);
  outb (port, com_mcr, 0);

  /* Check for overflow errors.  */
  if (port->oflo)
    {
      fprintf_unfiltered (gdb_stderr,
			  "Serial input overruns occurred.\n");
      fprintf_unfiltered (gdb_stderr, "This system %s handle %d baud.\n",
			  port->fifo ? "cannot" : "needs a 16550 to",
			  port->baudrate);
    }
}



static int
dos_noop (struct serial *scb)
{
  return 0;
}

static void
dos_raw (struct serial *scb)
{
  /* Always in raw mode.  */
}

static int
dos_readchar (struct serial *scb, int timeout)
{
  struct dos_ttystate *port = &ports[scb->fd];
  long then;
  int c;

  then = rawclock () + (timeout * RAWHZ);
  while ((c = dos_getc (port)) < 0)
    {
      if (timeout >= 0 && (rawclock () - then) >= 0)
	return SERIAL_TIMEOUT;
    }

  return c;
}


static serial_ttystate
dos_get_tty_state (struct serial *scb)
{
  struct dos_ttystate *port = &ports[scb->fd];
  struct dos_ttystate *state;

  /* Are they asking about a port we opened?  */
  if (port->refcnt <= 0)
    {
      /* We've never heard about this port.  We should fail this call,
	 unless they are asking about one of the 3 standard handles,
	 in which case we pretend the handle was open by us if it is
	 connected to a terminal device.  This is beacuse Unix
	 terminals use the serial interface, so GDB expects the
	 standard handles to go through here.  */
      if (scb->fd >= 3 || !isatty (scb->fd))
	return NULL;
    }

  state = (struct dos_ttystate *) xmalloc (sizeof *state);
  *state = *port;
  return (serial_ttystate) state;
}

static serial_ttystate
dos_copy_tty_state (struct serial *scb, serial_ttystate ttystate)
{
  struct dos_ttystate *state;

  state = (struct dos_ttystate *) xmalloc (sizeof *state);
  *state = *(struct dos_ttystate *) ttystate;

  return (serial_ttystate) state;
}

static int
dos_set_tty_state (struct serial *scb, serial_ttystate ttystate)
{
  struct dos_ttystate *state;

  state = (struct dos_ttystate *) ttystate;
  dos_setbaudrate (scb, state->baudrate);
  return 0;
}

static int
dos_noflush_set_tty_state (struct serial *scb, serial_ttystate new_ttystate,
			   serial_ttystate old_ttystate)
{
  struct dos_ttystate *state;

  state = (struct dos_ttystate *) new_ttystate;
  dos_setbaudrate (scb, state->baudrate);
  return 0;
}

static int
dos_flush_input (struct serial *scb)
{
  struct dos_ttystate *port = &ports[scb->fd];

  disable ();
  port->first = port->count = 0;
  if (port->fifo)
    outb (port, com_fifo, FIFO_ENABLE | FIFO_RCV_RST | FIFO_TRIGGER);
  enable ();
  return 0;
}

static void
dos_print_tty_state (struct serial *scb, serial_ttystate ttystate,
		     struct ui_file *stream)
{
  /* Nothing to print.  */
  return;
}

static int
dos_baudconv (int rate)
{
  long x, err;

  if (rate <= 0)
    return -1;

#define divrnd(n, q)	(((n) * 2 / (q) + 1) / 2) /* Divide and round off.  */
  x = divrnd (COMTICK, rate);
  if (x <= 0)
    return -1;

  err = divrnd (1000 * COMTICK, x * rate) - 1000;
  if (err < 0)
    err = -err;
  if (err > SPEED_TOLERANCE)
    return -1;
#undef divrnd
  return x;
}


static int
dos_setbaudrate (struct serial *scb, int rate)
{
  struct dos_ttystate *port = &ports[scb->fd];

  if (port->baudrate != rate)
    {
      int x;
      unsigned char cfcr;

      x = dos_baudconv (rate);
      if (x <= 0)
	{
	  fprintf_unfiltered (gdb_stderr, "%d: impossible baudrate\n", rate);
	  errno = EINVAL;
	  return -1;
	}

      disable ();
      cfcr = inb (port, com_cfcr);

      outb (port, com_cfcr, CFCR_DLAB);
      outb (port, com_dlbl, x & 0xff);
      outb (port, com_dlbh, x >> 8);
      outb (port, com_cfcr, cfcr);
      port->baudrate = rate;
      enable ();
    }

  return 0;
}

static int
dos_setstopbits (struct serial *scb, int num)
{
  struct dos_ttystate *port = &ports[scb->fd];
  unsigned char cfcr;

  disable ();
  cfcr = inb (port, com_cfcr);

  switch (num)
    {
    case SERIAL_1_STOPBITS:
      outb (port, com_cfcr, cfcr & ~CFCR_STOPB);
      break;
    case SERIAL_1_AND_A_HALF_STOPBITS:
    case SERIAL_2_STOPBITS:
      outb (port, com_cfcr, cfcr | CFCR_STOPB);
      break;
    default:
      enable ();
      return 1;
    }
  enable ();

  return 0;
}

static int
dos_write (struct serial *scb, const void *buf, size_t count)
{
  volatile struct dos_ttystate *port = &ports[scb->fd];
  size_t fifosize = port->fifo ? 16 : 1;
  long then;
  size_t cnt;
  const char *str = buf;

  while (count > 0)
    {
      /* Send the data, fifosize bytes at a time.  */
      cnt = fifosize > count ? count : fifosize;
      port->txbusy = 1;
      /* Francisco Pastor <fpastor.etra-id@@etra.es> says OUTSB messes
	 up the communications with UARTs with FIFOs.  */
#ifdef UART_FIFO_WORKS
      outportsb (port->base + com_data, str, cnt);
      str += cnt;
      count -= cnt;
#else
      for ( ; cnt > 0; cnt--, count--)
	outportb (port->base + com_data, *str++);
#endif
#ifdef DOS_STATS
      cnts[CNT_TX] += cnt;
#endif
      /* Wait for transmission to complete (max 1 sec).  */
      then = rawclock () + RAWHZ;
      while (port->txbusy)
	{
	  if ((rawclock () - then) >= 0)
	    {
	      errno = EIO;
	      return SERIAL_ERROR;
	    }
	}
    }
  return 0;
}


static int
dos_sendbreak (struct serial *scb)
{
  volatile struct dos_ttystate *port = &ports[scb->fd];
  unsigned char cfcr;
  long then;

  cfcr = inb (port, com_cfcr);
  outb (port, com_cfcr, cfcr | CFCR_SBREAK);

  /* 0.25 sec delay */
  then = rawclock () + RAWHZ / 4;
  while ((rawclock () - then) < 0)
    continue;

  outb (port, com_cfcr, cfcr);
  return 0;
}


static struct serial_ops dos_ops =
{
  "hardwire",
  0,
  dos_open,
  dos_close,
  NULL,				/* fdopen, not implemented */
  dos_readchar,
  dos_write,
  dos_noop,			/* flush output */
  dos_flush_input,
  dos_sendbreak,
  dos_raw,
  dos_get_tty_state,
  dos_copy_tty_state,
  dos_set_tty_state,
  dos_print_tty_state,
  dos_noflush_set_tty_state,
  dos_setbaudrate,
  dos_setstopbits,
  dos_noop,			/* Wait for output to drain.  */
  (void (*)(struct serial *, int))NULL	/* Change into async mode.  */
};

int
gdb_pipe (int pdes[2])
{
  /* No support for pipes.  */
  errno = ENOSYS;
  return -1;
}

static void
dos_info (char *arg, int from_tty)
{
  struct dos_ttystate *port;
#ifdef DOS_STATS
  int i;
#endif

  for (port = ports; port < &ports[4]; port++)
    {
      if (port->baudrate == 0)
	continue;
      printf_filtered ("Port:\tCOM%ld (%sactive)\n", (long)(port - ports) + 1,
		       port->intrupt ? "" : "not ");
      printf_filtered ("Addr:\t0x%03x (irq %d)\n", port->base, port->irq);
      printf_filtered ("16550:\t%s\n", port->fifo ? "yes" : "no");
      printf_filtered ("Speed:\t%d baud\n", port->baudrate);
      printf_filtered ("Errs:\tframing %d parity %d overflow %d\n\n",
		       port->ferr, port->perr, port->oflo);
    }

#ifdef DOS_STATS
  printf_filtered ("\nTotal interrupts: %d\n", intrcnt);
  for (i = 0; i < NCNT; i++)
    if (cnts[i])
      printf_filtered ("%s:\t%lu\n", cntnames[i], (unsigned long) cnts[i]);
#endif
}

/* -Wmissing-prototypes */
extern initialize_file_ftype _initialize_ser_dos;

void
_initialize_ser_dos (void)
{
  serial_add_interface (&dos_ops);

  /* Save original interrupt mask register.  */
  icu_oldmask = inportb (ICU_MASK);

  /* Mark fixed motherboard irqs as inuse.  */
  intrupts[0].inuse =		/* timer tick */
    intrupts[1].inuse =		/* keyboard */
    intrupts[2].inuse = 1;	/* slave icu */

  add_setshow_zinteger_cmd ("com1base", class_obscure, &ports[0].base, _("\
Set COM1 base i/o port address."), _("\
Show COM1 base i/o port address."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_setshow_zinteger_cmd ("com1irq", class_obscure, &ports[0].irq, _("\
Set COM1 interrupt request."), _("\
Show COM1 interrupt request."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_setshow_zinteger_cmd ("com2base", class_obscure, &ports[1].base, _("\
Set COM2 base i/o port address."), _("\
Show COM2 base i/o port address."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_setshow_zinteger_cmd ("com2irq", class_obscure, &ports[1].irq, _("\
Set COM2 interrupt request."), _("\
Show COM2 interrupt request."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_setshow_zinteger_cmd ("com3base", class_obscure, &ports[2].base, _("\
Set COM3 base i/o port address."), _("\
Show COM3 base i/o port address."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_setshow_zinteger_cmd ("com3irq", class_obscure, &ports[2].irq, _("\
Set COM3 interrupt request."), _("\
Show COM3 interrupt request."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_setshow_zinteger_cmd ("com4base", class_obscure, &ports[3].base, _("\
Set COM4 base i/o port address."), _("\
Show COM4 base i/o port address."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_setshow_zinteger_cmd ("com4irq", class_obscure, &ports[3].irq, _("\
Set COM4 interrupt request."), _("\
Show COM4 interrupt request."), NULL,
			    NULL,
			    NULL, /* FIXME: i18n: */
			    &setlist, &showlist);

  add_info ("serial", dos_info,
	    _("Print DOS serial port status."));
}
@


1.31
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d151 1
a151 1
static int cnts[NCNT];
d233 1
a233 1
static int dos_write (struct serial *scb, const char *str, int len);
d790 1
a790 1
dos_write (struct serial *scb, const char *str, int len)
d793 1
a793 1
  int fifosize = port->fifo ? 16 : 1;
d795 2
a796 1
  int cnt;
d798 1
a798 1
  while (len > 0)
d801 1
a801 1
      cnt = fifosize > len ? len : fifosize;
d808 1
a808 1
      len -= cnt;
d810 1
a810 1
      for ( ; cnt > 0; cnt--, len--)
d908 1
a908 1
      printf_filtered ("%s:\t%d\n", cntnames[i], cnts[i]);
@


1.30
log
@gdb/
	* go32-nat.c: Declare _initialize_go32_nat.
	* ser-go32.c: Declare _initialize_ser_dos.
	* top.c (do_chdir_cleanup): Add 'static'.
@
text
@d2 1
a2 2
   Copyright (C) 1992-1993, 2000-2001, 2007-2012 Free Software
   Foundation, Inc.
@


1.29
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d912 2
@


1.28
log
@	* inflow.c (terminal_init_inferior_with_pgrp): Copy ttystate.
	(terminal_save_ours): Remove misleading comment.
	(inflow_inferior_data_cleanup): Free ttystate.
	(inflow_inferior_exit): Likewise.
	(copy_terminal_info): Copy ttystate.

	* serial.c (serial_copy_tty_state): New function.
	* serial.h (serial_copy_tty_state): Add prototype.
	(struct serial_ops): Add copy_tty_state callback.
	* ser-base.c (ser_base_copy_tty_state): New function.
	* ser-base.h (ser_base_copy_tty_state): Add prototype.
	* ser-go32.c (dos_copy_tty_state): New function.
	(dos_ops): Install copy_tty_state callback.
	* ser-mingw.c (_initialize_ser_windows): Likewise.
	* ser-pipe.c (_initialize_ser_pipe): Likewise.
	* ser-unix.c (hardwire_copy_tty_state): New function.
	(_initialize_ser_hardwire): Install it.
@
text
@d2 2
a3 2
   Copyright (C) 1992, 1993, 2000, 2001, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.28.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 2
a3 2
   Copyright (C) 1992-1993, 2000-2001, 2007-2012 Free Software
   Foundation, Inc.
@


1.27
log
@2011-01-11  Michael Snyder  <msnyder@@vmware.com>

	* s390-tdep.c: Comment cleanup, mostly periods and spaces.
	* score-tdep.c: Ditto.
	* score-tdep.h: Ditto.
	* ser-base.c: Ditto.
	* ser-go32.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* ser-mingw.c: Ditto.
	* ser-pipe.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* sh64-tdep.c: Ditto.
	* shnbsd-nat.c: Ditto.
	* sh-tdep.c: Ditto.
	* sh-tdep.h: Ditto.
	* solib.c: Ditto.
	* solib-darwin.c: Ditto.
	* solib-frv.c: Ditto.
	* solib.h: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-spu.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solist.h: Ditto.
	* sol-thread.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* source.h: Ditto.
	* sparc64-linux-tdep.c: Ditto.
	* sparc64-tdep.c: Ditto.
	* sparc-linux-nat.c: Ditto.
	* sparc-linux-tdep.c: Ditto.
	* sparc-sol2-nat.c: Ditto.
	* sparc-sol2-tdep.c: Ditto.
	* sparc-tdep.c: Ditto.
	* sparc-tdep.h: Ditto.
	* spu-tdep.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.h: Ditto.
	* stack.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target.c: Ditto.
	* target-descriptions.c: Ditto.
	* target-descriptions.h: Ditto.
	* target.h: Ditto.
	* target-memory.c: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* trad-frame.h: Ditto.
	* typeprint.c: Ditto.
@
text
@d655 11
d865 1
@


1.26
log
@run copyright.sh for 2011.
@
text
@d155 1
a155 1
  /* h/w interrupt counts. */
d160 1
a160 1
  /* s/w counts. */
d169 1
a169 1
/* Main interrupt controller port addresses. */
d174 1
a174 1
/* Original interrupt controller mask register. */
d177 1
a177 1
/* Maximum of 8 interrupts (we don't handle the slave icu yet). */
d344 1
a344 1
	  /* no more pending interrupts, all done */
d348 1
a348 1
	  /* unexpected interrupt, ignore */
d388 1
a388 1
  /* setup real mode handler */
d404 1
a404 1
  /* setup protected mode handler */
d417 1
a417 1
  /* setup interrupt controller mask */
d436 1
a436 1
  /* restore old interrupt mask bit */
d442 1
a442 1
  /* remove real mode handler */
d446 1
a446 1
  /* remove protected mode handler */
d485 1
a485 1
      /* Device already opened another user.  Just point at it. */
d490 1
a490 1
  /* force access to ID reg */
d503 1
a503 1
  /* disable all interrupts in chip */
d506 1
a506 1
  /* tentatively enable 16550 fifo, and see if it responds */
d512 1
a512 1
  /* clear pending status reports. */
d516 1
a516 1
  /* enable external interrupt gate (to avoid floating IRQ) */
d519 1
a519 1
  /* hook up interrupt handler and initialise icu */
d535 1
a535 1
  /* clear rx buffer, tx busy flag and overflow count */
d540 1
a540 1
  /* set default baud rate and mode: 9600,8,n,1 */
d547 1
a547 1
  /* enable all interrupts */
d550 1
a550 1
  /* enable DTR & RTS */
d576 1
a576 1
  /* disable interrupts, fifo, flow control */
d584 1
a584 1
  /* unhook handler, and disable interrupt gate */
d588 1
a588 1
  /* Check for overflow errors */
d610 1
a610 1
  /* Always in raw mode */
d693 1
a693 1
  /* Nothing to print */
d705 1
a705 1
#define divrnd(n, q)	(((n) * 2 / (q) + 1) / 2) /* divide and round off */
d789 1
a789 1
      /* send the data, fifosize bytes at a time */
d805 1
a805 1
      /* wait for transmission to complete (max 1 sec) */
d859 2
a860 2
  dos_noop,			/* wait for output to drain */
  (void (*)(struct serial *, int))NULL	/* change into async mode */
d906 1
a906 1
  /* Save original interrupt mask register. */
d909 1
a909 1
  /* Mark fixed motherboard irqs as inuse. */
@


1.25
log
@	* ser-go32.c (struct dos_ops): Add missing fdopen field.
@
text
@d2 1
a2 1
   Copyright (C) 1992, 1993, 2000, 2001, 2007, 2008, 2009, 2010
@


1.24
log
@	* serial.h (gdb_pipe, serial_pipe): Declare.
	* serial.c (serial_interface_lookup): Take a const char pointer.
	(serial_fdopen): Rename to ...
	(serial_fdopen_ops): ... this.  Add an OPS parameter and use it.
	Call the OPS' fdopen function if there is one.
	(serial_fdopen): Rewrite as wrapper to serial_fdopen_ops.
	(serial_pipe): New.
	(struct serial_ops) <fdopen>: New field.

	* ser-mingw.c (free_pipe_state):
	(free_pipe_state): Close output on non-pex pipes.
	(pipe_windows_fdopen): New.
	(gdb_pipe): New.
	(_initialize_ser_windows): Register pipe_windows_fdopen.
	* ser-go32.c (gdb_pipe): New.
	* ser-pipe.c (pipe_close): Close file descriptor even if there's
	no state pointer.
	(pipe_ops): Delete.
	(gdb_pipe): New.
@
text
@d846 1
@


1.23
log
@2010-05-16  Michael Snyder  <msnyder@@vmware.com>

	* scm-exp.c: White space.
	* scm-lang.c: White space.
	* scm-valprint.c: White space.
	* sentinel-frame.c: White space.
	* ser-base.c: White space.
	* ser-go32.c: White space.
	* serial.c: White space.
	* ser-mingw.c: White space.
	* ser-pipe.c: White space.
	* ser-tcp.c: White space.
	* ser-unix.c: White space.
	* solib.c: White space.
	* solib-darwin.c: White space.
	* solib-frv.c: White space.
	* solib-irix.c: White space.
	* solib-osf.c: White space.
	* solib-pa64.c: White space.
	* solib-som.c: White space.
	* solib-spu.c: White space.
	* solib-svr4.c: White space.
	* solib-target.c: White space.
	* source.c: White space.
	* stabsread.c: White space.
	* stack.c: White space.
	* std-regs.c: White space.
	* symfile.c: White space.
	* symmisc.c: White space.
	* symtab.c: White space.
@
text
@d862 7
@


1.22
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d680 1
@


1.21
log
@        Updated copyright notices for most files.
@
text
@d2 1
a2 1
   Copyright (C) 1992, 1993, 2000, 2001, 2007, 2008, 2009
@


1.20
log
@	Updated copyright notices for most files.
@
text
@d2 1
a2 1
   Copyright (C) 1992, 1993, 2000, 2001, 2007, 2008
@


1.19
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d2 2
a3 1
   Copyright (C) 1992, 1993, 2000, 2001, 2007 Free Software Foundation, Inc.
@


1.18
log
@Copyright updates for 2007.
@
text
@d13 1
a13 1
   the Free Software Foundation; either version 2 of the License, or
d22 1
a22 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.17
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d2 1
a2 1
   Copyright (C) 1992, 1993, 2000, 2001 Free Software Foundation, Inc.
@


1.16
log
@2005-02-18  Andrew Cagney  <cagney@@gnu.org>

	Use add_setshow_zinteger_cmd through out.  Re-sync gdbarch.sh
	and gdbarch.c.
	* breakpoint.c, frame.c, gdb-events.sh, gdbarch.sh: Update.
	* gdbtypes.c, infrun.c, linux-nat.c, maint.c, monitor.c: Update.
	* pa64solib.c, parse.c, remote-mips.c, ser-go32.c: Update.
	* serial.c, solib-frv.c, somsolib.c, target.c, top.c: Update.
	* varobj.c, cli/cli-cmds.c: Update.
	* gdbarch.c, gdb-events.c: Regenerate.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 2000, 2001 Free Software Foundation, Inc.
d23 2
a24 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.15
log
@2005-02-15  Andrew Cagney  <cagney@@gnu.org>

	Mark up add_com, add_info and add_prefix_cmd.
	* breakpoint.c, cp-support.c, dcache.c, dwarf2read.c: Update.
	* exec.c, f-valprint.c, frame.c, gcore.c, gnu-nat.c: Update.
	* go32-nat.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* kod.c, language.c, linux-nat.c, m32r-rom.c, macrocmd.c: Update.
	* maint.c, memattr.c, mips-tdep.c, nto-procfs.c, objc-lang.c: Update.
	* ocd.c, pa64solib.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote-e7000.c, remote-m32r-sdi.c, remote-mips.c: Update.
	* remote-sds.c, remote-sim.c, remote-st.c, remote-utils.c: Update.
	* remote.c, rs6000-tdep.c, ser-go32.c, serial.c: Update.
	* sh-tdep.c, solib.c, somsolib.c, source.c, stack.c: Update.
	* symfile.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, typeprint.c, utils.c, valprint.c: Update.
	* win32-nat.c, xcoffsolib.c, cli/cli-cmds.c, cli/cli-dump.c: Update.
	* cli/cli-logging.c, tui/tui-layout.c, tui/tui-regs.c: Update.
	* tui/tui-stack.c, tui/tui-win.c: Update.
@
text
@d906 55
a960 55
  deprecated_add_show_from_set
    (add_set_cmd ("com1base", class_obscure, var_zinteger,
		  (char *) &ports[0].base,
		  "Set COM1 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com1irq", class_obscure, var_zinteger,
		  (char *) &ports[0].irq,
		  "Set COM1 interrupt request.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com2base", class_obscure, var_zinteger,
		  (char *) &ports[1].base,
		  "Set COM2 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com2irq", class_obscure, var_zinteger,
		  (char *) &ports[1].irq,
		  "Set COM2 interrupt request.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com3base", class_obscure, var_zinteger,
		  (char *) &ports[2].base,
		  "Set COM3 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com3irq", class_obscure, var_zinteger,
		  (char *) &ports[2].irq,
		  "Set COM3 interrupt request.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com4base", class_obscure, var_zinteger,
		  (char *) &ports[3].base,
		  "Set COM4 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com4irq", class_obscure, var_zinteger,
		  (char *) &ports[3].irq,
		  "Set COM4 interrupt request.",
		  &setlist),
     &showlist);
@


1.14
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (deprecated_add_show_from_set): Deprecate.
	* xcoffsolib.c (_initialize_xcoffsolib): Update.
	* wince.c (_initialize_wince): Update.
	* win32-nat.c (_initialize_win32_nat): Update.
	* varobj.c (_initialize_varobj): Update.
	* valops.c (_initialize_valops): Update.
	* utils.c (initialize_utils, initialize_utils): Update.
	* tui/tui-win.c (_initialize_tui_win): Update.
	* top.c (init_main): Update.
	* symfile.c (_initialize_symfile): Update.
	* source.c (_initialize_source): Update.
	* somsolib.c (_initialize_som_solib): Update.
	* solib.c (_initialize_solib): Update.
	* solib-frv.c (_initialize_frv_solib): Update.
	* serial.c (_initialize_serial): Update.
	* ser-go32.c (_initialize_ser_dos, _initialize_ser_dos): Update.
	* remote.c (_initialize_remote, _initialize_remote): Update.
	* remote-vx.c (_initialize_vx): Update.
	* remote-utils.c (_initialize_sr_support): Update.
	* remote-sds.c (_initialize_remote_sds): Update.
	* remote-mips.c (_initialize_remote_mips): Update.
	* remote-e7000.c (_initialize_remote_e7000): Update.
	* proc-api.c (_initialize_proc_api): Update.
	* printcmd.c: Update.
	* parse.c (_initialize_parse): Update.
	* pa64solib.c (_initialize_pa64_solib): Update.
	* p-valprint.c (_initialize_pascal_valprint): Update.
	* monitor.c (_initialize_remote_monitors): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* maint.c (_initialize_maint_cmds): Update.
	* lin-lwp.c (_initialize_lin_lwp): Update.
	* language.c (_initialize_language): Update.
	* kod.c (_initialize_kod): Update.
	* infrun.c (set_schedlock_func, _initialize_infrun): Update.
	* i386-tdep.c (_initialize_i386_tdep): Update.
	* gdbtypes.c (build_gdbtypes, _initialize_gdbtypes): Update.
	* gdbarch.sh: Update.
	* gdbarch.c: Re-generate.
	* gdb-events.sh: Update.
	* gdb-events.c: Re-generate.
	* frame.c (_initialize_frame): Update.
	* exec.c: Update.
	* demangle.c (_initialize_demangler): Update.
	* dcache.c (_initialize_dcache): Update.
	* cris-tdep.c (_initialize_cris_tdep, cris_version_update): Update.
	* cp-valprint.c (_initialize_cp_valprint): Update.
	* corefile.c (_initialize_core): Update.
	* command.h: Update.
	* cli/cli-decode.h: Update.
	* cli/cli-cmds.c (init_cli_cmds): Update.
	* charset.c (_initialize_charset): Update.
	* breakpoint.c (_initialize_breakpoint): Update.
	* arm-tdep.c (_initialize_arm_tdep_initialize_arm_tdep): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.
	* aix-thread.c (_initialize_aix_thread): Update.
@
text
@d963 1
a963 1
	    "Print DOS serial port status.");
@


1.13
log
@2003-01-18  Andrew Cagney  <ac131313@@redhat.com>

	* cris-tdep.c: Fix function declaration indentation.
	* dwarfread.c, gdbcore.h, gdbtypes.h, i386v-nat.c: Ditto.
	* mips-tdep.c, monitor.h, parse.c, proc-utils.h: Ditto.
	* rs6000-nat.c, ser-go32.c, somread.c, stabsread.c: Ditto.
	* symfile.h, symtab.h, target.c, target.h, value.h: Ditto.
	* xcoffread.c, config/pa/tm-hppa.h: Ditto.
	* config/sparc/tm-sp64.h, config/sparc/tm-sparc.h: Ditto.
@
text
@d906 55
a960 55
  add_show_from_set (
		      add_set_cmd ("com1base", class_obscure, var_zinteger,
				   (char *) &ports[0].base,
				   "Set COM1 base i/o port address.",
				   &setlist),
		      &showlist);

  add_show_from_set (
		      add_set_cmd ("com1irq", class_obscure, var_zinteger,
				   (char *) &ports[0].irq,
				   "Set COM1 interrupt request.",
				   &setlist),
		      &showlist);

  add_show_from_set (
		      add_set_cmd ("com2base", class_obscure, var_zinteger,
				   (char *) &ports[1].base,
				   "Set COM2 base i/o port address.",
				   &setlist),
		      &showlist);

  add_show_from_set (
		      add_set_cmd ("com2irq", class_obscure, var_zinteger,
				   (char *) &ports[1].irq,
				   "Set COM2 interrupt request.",
				   &setlist),
		      &showlist);

  add_show_from_set (
		      add_set_cmd ("com3base", class_obscure, var_zinteger,
				   (char *) &ports[2].base,
				   "Set COM3 base i/o port address.",
				   &setlist),
		      &showlist);

  add_show_from_set (
		      add_set_cmd ("com3irq", class_obscure, var_zinteger,
				   (char *) &ports[2].irq,
				   "Set COM3 interrupt request.",
				   &setlist),
		      &showlist);

  add_show_from_set (
		      add_set_cmd ("com4base", class_obscure, var_zinteger,
				   (char *) &ports[3].base,
				   "Set COM4 base i/o port address.",
				   &setlist),
		      &showlist);

  add_show_from_set (
		      add_set_cmd ("com4irq", class_obscure, var_zinteger,
				   (char *) &ports[3].irq,
				   "Set COM4 interrupt request.",
				   &setlist),
		      &showlist);
@


1.13.44.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d906 55
a960 55
  deprecated_add_show_from_set
    (add_set_cmd ("com1base", class_obscure, var_zinteger,
		  (char *) &ports[0].base,
		  "Set COM1 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com1irq", class_obscure, var_zinteger,
		  (char *) &ports[0].irq,
		  "Set COM1 interrupt request.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com2base", class_obscure, var_zinteger,
		  (char *) &ports[1].base,
		  "Set COM2 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com2irq", class_obscure, var_zinteger,
		  (char *) &ports[1].irq,
		  "Set COM2 interrupt request.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com3base", class_obscure, var_zinteger,
		  (char *) &ports[2].base,
		  "Set COM3 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com3irq", class_obscure, var_zinteger,
		  (char *) &ports[2].irq,
		  "Set COM3 interrupt request.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com4base", class_obscure, var_zinteger,
		  (char *) &ports[3].base,
		  "Set COM4 base i/o port address.",
		  &setlist),
     &showlist);

  deprecated_add_show_from_set
    (add_set_cmd ("com4irq", class_obscure, var_zinteger,
		  (char *) &ports[3].irq,
		  "Set COM4 interrupt request.",
		  &setlist),
     &showlist);
@


1.12
log
@s/typedef serial_t/struct serial */
@
text
@d359 2
a360 2
ISR (0) ISR (1) ISR (2) ISR (3)
ISR (4) ISR (5) ISR (6) ISR (7)
@


1.12.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d359 2
a360 2
ISR (0) ISR (1) ISR (2) ISR (3) /* OK */
ISR (4) ISR (5) ISR (6) ISR (7) /* OK */
@


1.12.22.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d359 2
a360 2
ISR (0) ISR (1) ISR (2) ISR (3) /* OK */
ISR (4) ISR (5) ISR (6) ISR (7) /* OK */
@


1.11
log
@* gnu-regex.c: Eliminate obsolete check for _MSC_VER.
* utils.c (notice_quit): Remove dummy function only used for _MSC_VER.
* values.c (unpack_double): Remove obsolete check for _MSC_VER.
* defs.h: Ditto.
* m32r-rom.c: Ditto.
* p-exp.y: Ditto.
* ser-e7kpc.c: Ditto.  Define WIN32_LEAN_AND_MEAN under _WIN32, for faster
compilation.
(get_ds_base): Remove _MSC_VER version of this function.
* nindy-share/ttyflush.c: Ditto.  X
* rdi-share/host.h: Ditto.  X
* ser-go32.c (dos_readchar): Remove call to obsolete function.
* remote-sim.c (gdb_os_poll_quit): Ditto.
* remote-e7000.c (expect): Remove obsolete #if 0'ed code.
* main.c (captured_main): Eliminate special Cygwin checks.
* ser-tcp.c: Remove unneeded __CYGWIN__ guard against system include.
@
text
@d231 8
a238 8
static int dos_open (serial_t scb, const char *name);
static void dos_raw (serial_t scb);
static int dos_readchar (serial_t scb, int timeout);
static int dos_setbaudrate (serial_t scb, int rate);
static int dos_write (serial_t scb, const char *str, int len);
static void dos_close (serial_t scb);
static serial_ttystate dos_get_tty_state (serial_t scb);
static int dos_set_tty_state (serial_t scb, serial_ttystate state);
d456 1
a456 1
dos_open (serial_t scb, const char *name)
d561 1
a561 1
dos_close (serial_t scb)
d603 1
a603 1
dos_noop (serial_t scb)
d609 1
a609 1
dos_raw (serial_t scb)
d615 1
a615 1
dos_readchar (serial_t scb, int timeout)
d633 1
a633 1
dos_get_tty_state (serial_t scb)
d657 1
a657 1
dos_set_tty_state (serial_t scb, serial_ttystate ttystate)
d667 1
a667 1
dos_noflush_set_tty_state (serial_t scb, serial_ttystate new_ttystate,
d678 1
a678 1
dos_flush_input (serial_t scb)
d690 1
a690 1
dos_print_tty_state (serial_t scb, serial_ttystate ttystate,
d721 1
a721 1
dos_setbaudrate (serial_t scb, int rate)
d753 1
a753 1
dos_setstopbits (serial_t scb, int num)
d780 1
a780 1
dos_write (serial_t scb, const char *str, int len)
d821 1
a821 1
dos_sendbreak (serial_t scb)
d859 1
a859 1
  (void (*)(serial_t, int))NULL	/* change into async mode */
@


1.10
log
@	* config/djgpp/djconfig.sh: Add copyright notice.

	* ser-go32.c (rawclock): Remove prototype; include time.h instead.
	(ISR, dos_hookirq, isr_t): Convert K&R definition to ANSI C.
	(top level) <string.h>: Include gdb_string.h instead.
	(dos_noop, dos_raw, dos_noflush_set_tty_state)
	(dos_print_tty_state, dos_info): Remove ATTRIBUTE_UNUSED.

	* go32-nat.c (go32_create_inferior): Move the declaration of
	`environ' to here from the top level.
	(top level) <_initialize_go32_nat>: Remove redundant prototype.
	<gdb_string.h>: Include it instead of string.h.
	(store_register): Call register_buffer instead of accessing
	registers[] directly.
	(redir_cmdline_delete, redir_cmdline_parse, redir_to_debugger)
	(redir_to_debugger, redir_debug_init) [__DJGPP_MINOR__ < 3]: Put
	the function names at the start of the line.
	(go32_set_dr): Throw internal_error if the argument is not a valid
	debug register number.
	(go32_open, go32_close, go32_attach, go32_detach, go32_resume)
	(go32_wait, go32_xfer_memory, go32_files_info)
	(go32_terminal_info): Remove ATTRIBUTE_UNUSED.
@
text
@a625 1
      notice_quit ();
@


1.9
log
@Eliminate some uses of __STDC__.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 2000 Free Software Foundation, Inc.
d6 1
a6 1
   This version uses DPMI interrupts to handle buffered i/o 
d9 1
a9 1
   This file is part of GDB.  
d29 1
d131 1
a131 1
#include <string.h>
a142 3
/* return raw 18Hz clock count */
extern long rawclock (void);

d357 1
a357 1
#define ISR(x) static void ISRNAME(x)() {dos_comisr(x);}
d362 1
a362 1
     typedef void (*isr_t) ();
d364 2
a365 2
     static isr_t isrs[NINTR] =
     {
d368 1
a368 1
};
d372 2
a373 3
     static struct intrupt *
       dos_hookirq (irq)
     unsigned int irq;
d412 2
a413 1
  if (_go32_dpmi_set_protected_mode_interrupt_vector (vec, &intr->new_pmhandler))
d508 2
a509 1
  outb (port, com_fifo, FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER);
d603 1
a603 1
dos_noop (serial_t scb ATTRIBUTE_UNUSED)
d609 1
a609 1
dos_raw (serial_t scb ATTRIBUTE_UNUSED)
d669 1
a669 1
			   serial_ttystate old_ttystate ATTRIBUTE_UNUSED)
d691 2
a692 3
dos_print_tty_state (serial_t scb ATTRIBUTE_UNUSED,
		     serial_ttystate ttystate ATTRIBUTE_UNUSED,
		     struct ui_file *stream ATTRIBUTE_UNUSED)
d706 1
a706 1
#define divrnd(n, q)	(((n) * 2 / (q) + 1) / 2)	/* divide and round off */
d865 1
a865 1
dos_info (char *arg ATTRIBUTE_UNUSED, int from_tty ATTRIBUTE_UNUSED)
@


1.8
log
@	* ser-go32.c (dos_write) [UART_FIFO_WORKS]: Use outportsb only if
	UART_FIFO_WORKS is defined.  Otherwise use outportb.
	From Francisco Pastor <fpastor.etra-id@@etra.es>
@
text
@a357 1
#ifdef __STDC__
a358 3
#else
#define ISRNAME(x) dos_comisr/**/x
#endif
@


1.7
log
@Protoization.
@
text
@d799 3
d805 4
@


1.6
log
@	* ser-go32.c: Remove PARAMS.
@
text
@d250 1
a250 2
dos_getc (port)
     volatile struct dos_ttystate *port;
d267 1
a267 3
dos_putc (c, port)
     int c;
     struct dos_ttystate *port;
d279 1
a279 2
dos_comisr (irq)
     int irq;
d435 1
a435 2
dos_unhookirq (intr)
     struct intrupt *intr;
d462 1
a462 3
dos_open (scb, name)
     serial_t scb;
     const char *name;
d566 1
a566 2
dos_close (scb)
     serial_t scb;
d620 1
a620 3
dos_readchar (scb, timeout)
     serial_t scb;
     int timeout;
d639 1
a639 2
dos_get_tty_state (scb)
     serial_t scb;
d663 1
a663 3
dos_set_tty_state (scb, ttystate)
     serial_t scb;
     serial_ttystate ttystate;
d684 1
a684 2
dos_flush_input (scb)
     serial_t scb;
d705 1
a705 2
dos_baudconv (rate)
     int rate;
d728 1
a728 3
dos_setbaudrate (scb, rate)
     serial_t scb;
     int rate;
d760 1
a760 3
dos_setstopbits (scb, num)
     serial_t scb;
     int num;
d787 1
a787 4
dos_write (scb, str, len)
     serial_t scb;
     const char *str;
     int len;
d821 1
a821 2
dos_sendbreak (scb)
     serial_t scb;
d894 1
a894 1
_initialize_ser_dos ()
@


1.5
log
@	* ser-go32.c (ports): Make the initializers complete, to pacify
	GCC 2.9X.
@
text
@d233 9
a241 9
static int dos_open PARAMS ((serial_t scb, const char *name));
static void dos_raw PARAMS ((serial_t scb));
static int dos_readchar PARAMS ((serial_t scb, int timeout));
static int dos_setbaudrate PARAMS ((serial_t scb, int rate));
static int dos_write PARAMS ((serial_t scb, const char *str, int len));
static void dos_close PARAMS ((serial_t scb));
static serial_ttystate dos_get_tty_state PARAMS ((serial_t scb));
static int dos_set_tty_state PARAMS ((serial_t scb, serial_ttystate state));
static int dos_baudconv PARAMS ((int rate));
@


1.4
log
@* ser-go32.c (dos_noop, dos_raw, dos_noflush_set_tty_state)
(dos_print_tty_state, dos_info, _initialize_ser_dos): Convert
to ISO C.  Use ATTRIBUTE_UNUSED to avoid compiler warnings.
(dos_info): Avoid compiler warning when printing a ptrdiff_t.
@
text
@d217 1
a217 1
    COM1ADDR, 4
d221 1
a221 1
    COM2ADDR, 3
d225 1
a225 1
    COM3ADDR, 4
d229 1
a229 1
    COM4ADDR, 3
d882 1
@


1.3
log
@* ser-go32.c (dos_get_tty_state): Fail if the (fake) handle was
not opened by dos_open, but let the 3 standard handles go through
unharmed.
@
text
@d616 1
a616 2
dos_noop (scb)
     serial_t scb;
d622 1
a622 2
dos_raw (scb)
     serial_t scb;
d686 2
a687 4
dos_noflush_set_tty_state (scb, new_ttystate, old_ttystate)
     serial_t scb;
     serial_ttystate new_ttystate;
     serial_ttystate old_ttystate;
d710 3
a712 3
dos_print_tty_state (serial_t scb,
		     serial_ttystate ttystate,
		     struct ui_file *stream)
d886 1
a886 3
dos_info (arg, from_tty)
     char *arg;
     int from_tty;
d889 1
d891 1
d897 1
a897 1
      printf_filtered ("Port:\tCOM%d (%sactive)\n", port - ports + 1,
a917 2
  struct cmd_list_element *c;

@


1.2
log
@From Eli. Warning fixes.
@
text
@d491 4
d656 13
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/* Remote serial interface for local (hardwired) serial ports for
   GO32.  Copyright 1992, 1993 Free Software Foundation, Inc.
d23 2
a24 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d130 5
a134 7
#include <sys/dos.h>
#include <sys/go32.h>
#include <sys/dpmi.h>

/* DPMI Communication */
static union REGS dpmi_regs;
static struct SREGS dpmi_sregs;
d154 4
a157 3
static int	intrcnt;
static int	cnts[NCNT];
static char	*cntnames[NCNT] = {
d159 4
a162 4
  "mlsc",	"nopend",	"txrdy",	"?3",
  "rxrdy",	"?5",		"rls", 		"?7", 
  "?8", 	"?9", 		"?a", 		"?b", 
  "rxtout", 	"?d", 		"?e",		"?f", 
d164 1
a164 1
  "rxcnt",	"txcnt",	"stray",	"swoflo"
d169 1
a169 1
#define COUNT(x) 
d178 1
a178 1
unsigned char	icu_oldmask;
d184 10
a193 9
{  
  char			inuse;
  struct dos_ttystate	*port;
  _go32_dpmi_seginfo	old_rmhandler;
  _go32_dpmi_seginfo	old_pmhandler;
  _go32_dpmi_seginfo	new_rmhandler;
  _go32_dpmi_seginfo	new_pmhandler;
  _go32_dpmi_registers	regs;
} intrupts[NINTR];
d197 18
d216 15
a230 20
  int		base;
  int		irq;
  int		refcnt;
  struct intrupt *intrupt;
  int		fifo;
  int		baudrate;
  unsigned char	cbuf[CBSIZE];
  unsigned int	first;
  unsigned int	count;
  int		txbusy;
  unsigned char	old_mcr;
  int		ferr;
  int		perr;
  int		oflo;
  int		msr;
} ports[4] = {
  {COM1ADDR, 4}, 
  {COM2ADDR, 3}, 
  {COM3ADDR, 4}, 
  {COM4ADDR, 3}
d253 1
a253 1
    int c;
d255 2
a256 2
    if (port->count == 0)
      return -1;
d258 6
a263 6
    c = port->cbuf[port->first];
    disable ();
    port->first = (port->first + 1) & (CBSIZE - 1);
    port->count--;
    enable ();
    return c;
a264 1
    
d266 2
a267 1
static int 
d272 5
a276 5
    if (port->count >= CBSIZE - 1)
	return -1;
    port->cbuf[(port->first + port->count) & (CBSIZE - 1)] = c;
    port->count++;
    return 0;
d278 1
a279 1

d295 1
a295 1
  if (!port) 
d298 1
a298 1
      return;		/* not open */
d304 1
a304 1
      switch (iir) 
d306 1
a306 1
	  
d310 1
a310 1
	  
d314 3
a316 3
	  
      rx:
	  do 
d340 1
a340 1
	  
d345 1
a345 1
	  
d359 1
a359 1
    } 
d369 2
a370 2
ISR(0) ISR(1) ISR(2) ISR(3)
ISR(4) ISR(5) ISR(6) ISR(7)
d372 1
a372 1
typedef void (*isr_t)();
d374 4
a377 3
static isr_t isrs[NINTR] = {
  ISRNAME(0), ISRNAME(1), ISRNAME(2), ISRNAME(3),
  ISRNAME(4), ISRNAME(5), ISRNAME(6), ISRNAME(7)
d379 1
a380 1

d382 2
a383 2
static struct intrupt *
dos_hookirq (irq)
d396 1
a396 1
  
d403 2
a404 2
  intr->new_rmhandler.pm_selector = _go32_my_cs();
  intr->new_rmhandler.pm_offset = (u_long)isr;
d415 1
a415 1
      
d417 1
a417 1
  _go32_dpmi_get_protected_mode_interrupt_vector(vec, &intr->old_pmhandler);
d419 2
a420 2
  intr->new_pmhandler.pm_selector = _go32_my_cs();
  intr->new_pmhandler.pm_offset = (u_long)isr;
d423 1
a423 1
  if (_go32_dpmi_set_protected_mode_interrupt_vector(vec, &intr->new_pmhandler))
d457 1
a457 1
      
d463 1
a464 1

d501 8
a508 7
  outb(port, com_cfcr, 0);
  outb(port, com_iir, 0);
  for (i = 0; i < 17; i++) {
    if ((inb(port, com_iir) & 0x38) == 0)
      goto ok;
    (void) inb(port, com_data); /* clear recv */
  }
d514 1
a514 1
  outb(port, com_ier, 0);
d517 3
a519 3
  outb(port, com_fifo, FIFO_ENABLE|FIFO_RCV_RST|FIFO_XMT_RST|FIFO_TRIGGER);
  sleep(1);
  port->fifo = ((inb(port, com_iir) & IIR_FIFO_MASK) == IIR_FIFO_MASK);
d522 2
a523 2
  (void) inb(port, com_lsr);
  (void) inb(port, com_msr);
d526 1
a526 1
  outb(port, com_mcr, MCR_IENABLE);
d532 2
a533 2
      outb(port, com_mcr, 0);
      outb(port, com_fifo, 0);
d541 1
a541 1
  port->intrupt->port = port; 
d551 4
a554 4
  outb(port, com_cfcr, CFCR_DLAB);
  outb(port, com_dlbl, i & 0xff);
  outb(port, com_dlbh, i >> 8);
  outb(port, com_cfcr, CFCR_8BITS);
d557 1
a557 1
  outb(port, com_ier, IER_ETXRDY | IER_ERXRDY | IER_ERLS | IER_EMSC);
d560 1
a560 1
  outb(port, com_mcr, MCR_DTR | MCR_RTS | MCR_IENABLE);
d572 7
a578 2
    struct dos_ttystate *port;
    struct intrupt *intrupt;
d580 2
a581 2
    if (!scb)
      return;
d583 2
a584 1
    port = &ports[scb->fd];
d586 7
a592 2
    if (port->refcnt-- > 1)
      return;
d594 13
a606 24
    if (!(intrupt = port->intrupt))
      return;

    /* disable interrupts, fifo, flow control */
    disable ();
    port->intrupt = 0;
    intrupt->port = 0;
    outb(port, com_fifo, 0);
    outb(port, com_ier, 0);
    enable ();

    /* unhook handler, and disable interrupt gate */
    dos_unhookirq (intrupt);
    outb(port, com_mcr, 0);

    /* Check for overflow errors */
    if (port->oflo)
      {
	fprintf_unfiltered (gdb_stderr,
			    "Serial input overruns occurred.\n");
	fprintf_unfiltered (gdb_stderr, "This system %s handle %d baud.\n",
			    port->fifo ? "cannot" : "needs a 16550 to",
			    port->baudrate);
      }
d608 1
a609 1

d634 1
a634 1
  then = rawclock() + (timeout * RAWHZ);
d688 1
a688 1
  disable();
d691 3
a693 2
    outb(port, com_fifo, FIFO_ENABLE|FIFO_RCV_RST|FIFO_TRIGGER);
  enable();
d697 3
a699 3
dos_print_tty_state (scb, ttystate)
     serial_t scb;
     serial_ttystate ttystate;
d710 2
a711 2
  
  if (rate <= 0) 
d714 2
a715 2
#define divrnd(n, q)	(((n) * 2 / (q) + 1) / 2) /* divide and round off */
  x = divrnd(COMTICK, rate);
d718 2
a719 2
  
  err = divrnd(1000 * COMTICK, x * rate) - 1000;
d734 6
a739 1
    struct dos_ttystate *port = &ports[scb->fd];
d741 7
a747 23
    if (port->baudrate != rate) 
      {
	int x;
	unsigned char cfcr;

	x = dos_baudconv (rate);
	if (x <= 0)
	  {
	    fprintf_unfiltered (gdb_stderr, "%d: impossible baudrate\n", rate);
	    errno = EINVAL;
	    return -1;
	  }

	disable ();
	cfcr = inb (port, com_cfcr);

	outb(port, com_cfcr, CFCR_DLAB);
	outb(port, com_dlbl, x & 0xff);
	outb(port, com_dlbh, x >> 8);
	outb(port, com_cfcr, cfcr);
	port->baudrate = rate;
	enable ();
      }
d749 12
a760 1
    return 0;
d768 2
a769 2
    struct dos_ttystate *port = &ports[scb->fd];
    unsigned char cfcr;
d771 2
a772 2
    disable ();
    cfcr = inb (port, com_cfcr);
d774 14
a787 14
    switch (num)
      {
      case SERIAL_1_STOPBITS:
	outb (port, com_cfcr, cfcr & ~CFCR_STOPB);
	break;
      case SERIAL_1_AND_A_HALF_STOPBITS:
      case SERIAL_2_STOPBITS:
	outb (port, com_cfcr, cfcr | CFCR_STOPB);
	break;
      default:
	enable ();
	return 1;
      }
    enable ();
d789 1
a789 1
    return 0;
d803 8
a810 8
   while (len > 0) 
     {
	/* send the data, fifosize bytes at a time */
	cnt = fifosize > len ? len : fifosize;
	port->txbusy = 1;
	outportsb (port->base + com_data, str, cnt);
	str += cnt;
	len -= cnt;
d812 1
a812 1
	cnts[CNT_TX] += cnt;
d814 10
a823 10
	/* wait for transmission to complete (max 1 sec) */
	then = rawclock() + RAWHZ;
	while (port->txbusy)
	  {
	    if ((rawclock () - then) >= 0)
	      {
		  errno = EIO;
		  return SERIAL_ERROR;
	      }
	  }
d837 2
a838 2
  cfcr = inb(port, com_cfcr);
  outb(port, com_cfcr, cfcr | CFCR_SBREAK);
d845 1
a845 1
  outb(port, com_cfcr, cfcr);
d880 1
a880 1
  for (port = ports; port < &ports[4]; port++) 
d889 1
a889 1
      printf_filtered ("Errs:\tframing %d parity %d overflow %d\n\n", 
d915 2
a916 2
      intrupts[2].inuse = 1;	/* slave icu */
    
d918 5
a922 5
    add_set_cmd ("com1base", class_obscure, var_zinteger,
		 (char *) &ports[0].base,
		 "Set COM1 base i/o port address.",
		 &setlist),
	&showlist);
d925 5
a929 5
    add_set_cmd ("com1irq", class_obscure, var_zinteger,
		 (char *) &ports[0].irq,
		 "Set COM1 interrupt request.",
		 &setlist),
	&showlist);
d932 5
a936 5
    add_set_cmd ("com2base", class_obscure, var_zinteger,
		 (char *) &ports[1].base,
		 "Set COM2 base i/o port address.",
		 &setlist),
	&showlist);
d939 5
a943 5
    add_set_cmd ("com2irq", class_obscure, var_zinteger,
		 (char *) &ports[1].irq,
		 "Set COM2 interrupt request.",
		 &setlist),
	&showlist);
d946 5
a950 5
    add_set_cmd ("com3base", class_obscure, var_zinteger,
		 (char *) &ports[2].base,
		 "Set COM3 base i/o port address.",
		 &setlist),
	&showlist);
d953 5
a957 5
    add_set_cmd ("com3irq", class_obscure, var_zinteger,
		 (char *) &ports[2].irq,
		 "Set COM3 interrupt request.",
		 &setlist),
	&showlist);
d960 5
a964 5
    add_set_cmd ("com4base", class_obscure, var_zinteger,
		 (char *) &ports[3].base,
		 "Set COM4 base i/o port address.",
		 &setlist),
	&showlist);
d967 5
a971 5
    add_set_cmd ("com4irq", class_obscure, var_zinteger,
		 (char *) &ports[3].irq,
		 "Set COM4 interrupt request.",
		 &setlist),
	&showlist);
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990504 snapshot
@
text
@d129 3
a131 4
#include <dos.h>
#include <go32.h>
#include <dpmi.h>
typedef unsigned long u_long;
@


1.1.1.3
log
@import gdb-1999-07-07 post reformat
@
text
@d23 1
a23 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d156 3
a158 4
static int intrcnt;
static int cnts[NCNT];
static char *cntnames[NCNT] =
{
d160 4
a163 4
  "mlsc", "nopend", "txrdy", "?3",
  "rxrdy", "?5", "rls", "?7",
  "?8", "?9", "?a", "?b",
  "rxtout", "?d", "?e", "?f",
d165 1
a165 1
  "rxcnt", "txcnt", "stray", "swoflo"
d170 1
a170 1
#define COUNT(x)
d179 1
a179 1
unsigned char icu_oldmask;
d185 9
a193 10
  {
    char inuse;
    struct dos_ttystate *port;
    _go32_dpmi_seginfo old_rmhandler;
    _go32_dpmi_seginfo old_pmhandler;
    _go32_dpmi_seginfo new_rmhandler;
    _go32_dpmi_seginfo new_pmhandler;
    _go32_dpmi_registers regs;
  }
intrupts[NINTR];
a196 18
  {
    int base;
    int irq;
    int refcnt;
    struct intrupt *intrupt;
    int fifo;
    int baudrate;
    unsigned char cbuf[CBSIZE];
    unsigned int first;
    unsigned int count;
    int txbusy;
    unsigned char old_mcr;
    int ferr;
    int perr;
    int oflo;
    int msr;
  }
ports[4] =
d198 20
a217 15
  {
    COM1ADDR, 4
  }
  ,
  {
    COM2ADDR, 3
  }
  ,
  {
    COM3ADDR, 4
  }
  ,
  {
    COM4ADDR, 3
  }
d240 1
a240 1
  int c;
d242 2
a243 2
  if (port->count == 0)
    return -1;
d245 6
a250 6
  c = port->cbuf[port->first];
  disable ();
  port->first = (port->first + 1) & (CBSIZE - 1);
  port->count--;
  enable ();
  return c;
d252 1
d254 1
a254 2

static int
d259 5
a263 5
  if (port->count >= CBSIZE - 1)
    return -1;
  port->cbuf[(port->first + port->count) & (CBSIZE - 1)] = c;
  port->count++;
  return 0;
d265 1
a267 1

d282 1
a282 1
  if (!port)
d285 1
a285 1
      return;			/* not open */
d291 1
a291 1
      switch (iir)
d293 1
a293 1

d297 1
a297 1

d301 3
a303 3

	rx:
	  do
d327 1
a327 1

d332 1
a332 1

d346 1
a346 1
    }
d356 2
a357 2
ISR (0) ISR (1) ISR (2) ISR (3)
ISR (4) ISR (5) ISR (6) ISR (7)
d359 1
a359 1
     typedef void (*isr_t) ();
d361 3
a363 4
     static isr_t isrs[NINTR] =
     {
       ISRNAME (0), ISRNAME (1), ISRNAME (2), ISRNAME (3),
       ISRNAME (4), ISRNAME (5), ISRNAME (6), ISRNAME (7)
d365 1
d368 2
a369 3

     static struct intrupt *
       dos_hookirq (irq)
d382 1
a382 1

d389 2
a390 2
  intr->new_rmhandler.pm_selector = _go32_my_cs ();
  intr->new_rmhandler.pm_offset = (u_long) isr;
d401 1
a401 1

d403 1
a403 1
  _go32_dpmi_get_protected_mode_interrupt_vector (vec, &intr->old_pmhandler);
d405 2
a406 2
  intr->new_pmhandler.pm_selector = _go32_my_cs ();
  intr->new_pmhandler.pm_offset = (u_long) isr;
d409 1
a409 1
  if (_go32_dpmi_set_protected_mode_interrupt_vector (vec, &intr->new_pmhandler))
d443 1
a443 1

d449 1
a451 1

d487 7
a493 8
  outb (port, com_cfcr, 0);
  outb (port, com_iir, 0);
  for (i = 0; i < 17; i++)
    {
      if ((inb (port, com_iir) & 0x38) == 0)
	goto ok;
      (void) inb (port, com_data);	/* clear recv */
    }
d499 1
a499 1
  outb (port, com_ier, 0);
d502 3
a504 3
  outb (port, com_fifo, FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER);
  sleep (1);
  port->fifo = ((inb (port, com_iir) & IIR_FIFO_MASK) == IIR_FIFO_MASK);
d507 2
a508 2
  (void) inb (port, com_lsr);
  (void) inb (port, com_msr);
d511 1
a511 1
  outb (port, com_mcr, MCR_IENABLE);
d517 2
a518 2
      outb (port, com_mcr, 0);
      outb (port, com_fifo, 0);
d526 1
a526 1
  port->intrupt->port = port;
d536 4
a539 4
  outb (port, com_cfcr, CFCR_DLAB);
  outb (port, com_dlbl, i & 0xff);
  outb (port, com_dlbh, i >> 8);
  outb (port, com_cfcr, CFCR_8BITS);
d542 1
a542 1
  outb (port, com_ier, IER_ETXRDY | IER_ERXRDY | IER_ERLS | IER_EMSC);
d545 1
a545 1
  outb (port, com_mcr, MCR_DTR | MCR_RTS | MCR_IENABLE);
d557 2
a558 2
  struct dos_ttystate *port;
  struct intrupt *intrupt;
d560 2
a561 2
  if (!scb)
    return;
d563 1
a563 1
  port = &ports[scb->fd];
d565 2
a566 2
  if (port->refcnt-- > 1)
    return;
d568 25
a592 10
  if (!(intrupt = port->intrupt))
    return;

  /* disable interrupts, fifo, flow control */
  disable ();
  port->intrupt = 0;
  intrupt->port = 0;
  outb (port, com_fifo, 0);
  outb (port, com_ier, 0);
  enable ();
a593 14
  /* unhook handler, and disable interrupt gate */
  dos_unhookirq (intrupt);
  outb (port, com_mcr, 0);

  /* Check for overflow errors */
  if (port->oflo)
    {
      fprintf_unfiltered (gdb_stderr,
			  "Serial input overruns occurred.\n");
      fprintf_unfiltered (gdb_stderr, "This system %s handle %d baud.\n",
			  port->fifo ? "cannot" : "needs a 16550 to",
			  port->baudrate);
    }
}
a595 1

d619 1
a619 1
  then = rawclock () + (timeout * RAWHZ);
d673 1
a673 1
  disable ();
d676 2
a677 2
    outb (port, com_fifo, FIFO_ENABLE | FIFO_RCV_RST | FIFO_TRIGGER);
  enable ();
d694 2
a695 2

  if (rate <= 0)
d698 2
a699 2
#define divrnd(n, q)	(((n) * 2 / (q) + 1) / 2)	/* divide and round off */
  x = divrnd (COMTICK, rate);
d702 2
a703 2

  err = divrnd (1000 * COMTICK, x * rate) - 1000;
d718 1
a718 1
  struct dos_ttystate *port = &ports[scb->fd];
d720 23
a742 4
  if (port->baudrate != rate)
    {
      int x;
      unsigned char cfcr;
d744 1
a744 20
      x = dos_baudconv (rate);
      if (x <= 0)
	{
	  fprintf_unfiltered (gdb_stderr, "%d: impossible baudrate\n", rate);
	  errno = EINVAL;
	  return -1;
	}

      disable ();
      cfcr = inb (port, com_cfcr);

      outb (port, com_cfcr, CFCR_DLAB);
      outb (port, com_dlbl, x & 0xff);
      outb (port, com_dlbh, x >> 8);
      outb (port, com_cfcr, cfcr);
      port->baudrate = rate;
      enable ();
    }

  return 0;
d752 2
a753 2
  struct dos_ttystate *port = &ports[scb->fd];
  unsigned char cfcr;
d755 2
a756 2
  disable ();
  cfcr = inb (port, com_cfcr);
d758 14
a771 14
  switch (num)
    {
    case SERIAL_1_STOPBITS:
      outb (port, com_cfcr, cfcr & ~CFCR_STOPB);
      break;
    case SERIAL_1_AND_A_HALF_STOPBITS:
    case SERIAL_2_STOPBITS:
      outb (port, com_cfcr, cfcr | CFCR_STOPB);
      break;
    default:
      enable ();
      return 1;
    }
  enable ();
d773 1
a773 1
  return 0;
d787 8
a794 8
  while (len > 0)
    {
      /* send the data, fifosize bytes at a time */
      cnt = fifosize > len ? len : fifosize;
      port->txbusy = 1;
      outportsb (port->base + com_data, str, cnt);
      str += cnt;
      len -= cnt;
d796 1
a796 1
      cnts[CNT_TX] += cnt;
d798 10
a807 10
      /* wait for transmission to complete (max 1 sec) */
      then = rawclock () + RAWHZ;
      while (port->txbusy)
	{
	  if ((rawclock () - then) >= 0)
	    {
	      errno = EIO;
	      return SERIAL_ERROR;
	    }
	}
d821 2
a822 2
  cfcr = inb (port, com_cfcr);
  outb (port, com_cfcr, cfcr | CFCR_SBREAK);
d829 1
a829 1
  outb (port, com_cfcr, cfcr);
d864 1
a864 1
  for (port = ports; port < &ports[4]; port++)
d873 1
a873 1
      printf_filtered ("Errs:\tframing %d parity %d overflow %d\n\n",
d899 2
a900 2
    intrupts[2].inuse = 1;	/* slave icu */

d902 5
a906 5
		      add_set_cmd ("com1base", class_obscure, var_zinteger,
				   (char *) &ports[0].base,
				   "Set COM1 base i/o port address.",
				   &setlist),
		      &showlist);
d909 5
a913 5
		      add_set_cmd ("com1irq", class_obscure, var_zinteger,
				   (char *) &ports[0].irq,
				   "Set COM1 interrupt request.",
				   &setlist),
		      &showlist);
d916 5
a920 5
		      add_set_cmd ("com2base", class_obscure, var_zinteger,
				   (char *) &ports[1].base,
				   "Set COM2 base i/o port address.",
				   &setlist),
		      &showlist);
d923 5
a927 5
		      add_set_cmd ("com2irq", class_obscure, var_zinteger,
				   (char *) &ports[1].irq,
				   "Set COM2 interrupt request.",
				   &setlist),
		      &showlist);
d930 5
a934 5
		      add_set_cmd ("com3base", class_obscure, var_zinteger,
				   (char *) &ports[2].base,
				   "Set COM3 base i/o port address.",
				   &setlist),
		      &showlist);
d937 5
a941 5
		      add_set_cmd ("com3irq", class_obscure, var_zinteger,
				   (char *) &ports[2].irq,
				   "Set COM3 interrupt request.",
				   &setlist),
		      &showlist);
d944 5
a948 5
		      add_set_cmd ("com4base", class_obscure, var_zinteger,
				   (char *) &ports[3].base,
				   "Set COM4 base i/o port address.",
				   &setlist),
		      &showlist);
d951 5
a955 5
		      add_set_cmd ("com4irq", class_obscure, var_zinteger,
				   (char *) &ports[3].irq,
				   "Set COM4 interrupt request.",
				   &setlist),
		      &showlist);
@


1.1.1.4
log
@import gdb-1999-09-21
@
text
@d699 3
a701 3
dos_print_tty_state (serial_t scb,
		     serial_ttystate ttystate,
		     struct gdb_file *stream)
@


1.1.1.5
log
@import gdb-2000-02-01 snapshot
@
text
@d1 2
a2 2
/* Remote serial interface for local (hardwired) serial ports for GO32.
   Copyright 1992, 1993, 2000 Free Software Foundation, Inc.
d701 1
a701 1
		     struct ui_file *stream)
@


