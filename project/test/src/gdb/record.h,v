head	1.13;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.12
	gdb_7_6-2013-04-26-release:1.12
	gdb_7_6-branch:1.12.0.2
	gdb_7_6-2013-03-12-branchpoint:1.12
	gdb_7_5_1-2012-11-29-release:1.6
	gdb_7_5-2012-08-17-release:1.6
	gdb_7_5-branch:1.6.0.2
	gdb_7_5-2012-07-18-branchpoint:1.6
	gdb_7_4_1-2012-04-26-release:1.5.4.1
	gdb_7_4-2012-01-24-release:1.5.4.1
	gdb_7_4-branch:1.5.0.4
	gdb_7_4-2011-12-13-branchpoint:1.5
	gdb_7_3_1-2011-09-04-release:1.5
	gdb_7_3-2011-07-26-release:1.5
	gdb_7_3-branch:1.5.0.2
	gdb_7_3-2011-04-01-branchpoint:1.5
	gdb_7_2-2010-09-02-release:1.4
	gdb_7_2-branch:1.4.0.2
	gdb_7_2-2010-07-07-branchpoint:1.4
	gdb_7_1-2010-03-18-release:1.3
	gdb_7_1-branch:1.3.0.2
	gdb_7_1-2010-02-18-branchpoint:1.3
	gdb_7_0_1-2009-12-22-release:1.2
	gdb_7_0-2009-10-06-release:1.2
	gdb_7_0-branch:1.2.0.4
	gdb_7_0-2009-09-16-branchpoint:1.2
	msnyder-checkpoint-072509-branch:1.2.0.2
	msnyder-checkpoint-072509-branchpoint:1.2
	reverse-20081226-branch:1.1.0.6
	reverse-20080930-branch:1.1.0.4
	reverse-20080717-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.13
date	2013.09.02.15.06.11;	author mmetzger;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.11.08.50.05;	author mmetzger;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.11.08.47.10;	author mmetzger;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.11.08.42.55;	author mmetzger;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.01.06.32.49;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.02.09.36.39;	author qiyao;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.20.11.22.32;	author palves;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.04.08.17.09;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.01.15.33.13;	author brobecke;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2010.06.22.02.15.46;	author teawater;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.01.07.31.39;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.30.02.58.37;	author teawater;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.20.14.30.11;	author teawater;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.5.4.1
date	2012.01.06.04.43.26;	author brobecke;	state Exp;
branches;
next	;

1.1.2.1
date	2008.07.20.14.30.11;	author teawater;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2008.07.24.08.58.37;	author teawater;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2008.08.15.06.47.49;	author teawater;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2008.09.02.09.18.28;	author teawater;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2008.10.03.23.03.47;	author msnyder;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2008.10.06.01.13.38;	author msnyder;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2008.10.06.17.52.17;	author msnyder;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2008.10.07.07.37.37;	author teawater;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2008.10.08.00.26.50;	author msnyder;	state Exp;
branches;
next	;

1.1.4.1
date	2008.10.01.03.16.04;	author msnyder;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2008.10.03.17.50.15;	author msnyder;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2008.10.04.18.56.36;	author msnyder;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2008.10.06.18.00.47;	author msnyder;	state Exp;
branches;
next	1.1.4.5;

1.1.4.5
date	2008.10.07.08.33.15;	author teawater;	state Exp;
branches;
next	1.1.4.6;

1.1.4.6
date	2008.10.08.00.26.28;	author msnyder;	state Exp;
branches;
next	1.1.4.7;

1.1.4.7
date	2008.10.18.13.45.18;	author teawater;	state Exp;
branches;
next	;

1.1.6.1
date	2008.12.26.21.09.13;	author msnyder;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2008.12.27.20.28.12;	author msnyder;	state Exp;
branches;
next	1.1.6.3;

1.1.6.3
date	2008.12.28.20.33.32;	author msnyder;	state Exp;
branches;
next	1.1.6.4;

1.1.6.4
date	2008.12.30.05.42.04;	author teawater;	state Exp;
branches;
next	;


desc
@@


1.13
log
@record: upcase record_print_flag enumeration constants

	* record.h (record_print_flag) <record_print_src_line,
	record_print_insn_range>: Rename into ...
	(record_print_flag) <record_print_src_line,
	record_print_insn_range>: ... this.  Update all users.
@
text
@/* Process record and replay target for GDB, the GNU debugger.

   Copyright (C) 2008-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#ifndef _RECORD_H_
#define _RECORD_H_

struct cmd_list_element;

#define RECORD_IS_USED	(current_target.to_stratum == record_stratum)

extern unsigned int record_debug;

/* Allow record targets to add their own sub-commands.  */
extern struct cmd_list_element *record_cmdlist;
extern struct cmd_list_element *set_record_cmdlist;
extern struct cmd_list_element *show_record_cmdlist;
extern struct cmd_list_element *info_record_cmdlist;

/* A list of flags specifying what record target methods should print.  */
enum record_print_flag
{
  /* Print the source file and line (if applicable).  */
  RECORD_PRINT_SRC_LINE = (1 << 0),

  /* Print the instruction number range (if applicable).  */
  RECORD_PRINT_INSN_RANGE = (1 << 1),
};

/* Wrapper for target_read_memory that prints a debug message if
   reading memory fails.  */
extern int record_read_memory (struct gdbarch *gdbarch,
			       CORE_ADDR memaddr, gdb_byte *myaddr,
			       ssize_t len);

/* The "record goto" command.  */
extern void cmd_record_goto (char *arg, int from_tty);

/* The default "to_disconnect" target method for record targets.  */
extern void record_disconnect (struct target_ops *, char *, int);

/* The default "to_detach" target method for record targets.  */
extern void record_detach (struct target_ops *, char *, int);

/* The default "to_mourn_inferior" target method for record targets.  */
extern void record_mourn_inferior (struct target_ops *);

/* The default "to_kill" target method for record targets.  */
extern void record_kill (struct target_ops *);

#endif /* _RECORD_H_ */
@


1.12
log
@Add command to print the function names from recorded instructions.

This command provides a quick high-level overview over the recorded execution
log at function granularity without having to reverse-step.

gdb/
	* target.c (target_call_history, target_call_history_from,
	target_call_history_range): New.
	* target.h (target_ops) <to_call_history, to_call_history_from,
	to_call_history_range>: New fields.
	(target_call_history, target_call_history_from,
	target_call_history_range): New declaration.
	* record.c (get_call_history_modifiers, cmd_record_call_history,
	record_call_history_size): New.
	(_initialize_record): Add the "record function-call-history" command.
	Add "set/show record function-call-history-size" commands.
	* record.h (record_print_flag): New.
@
text
@d39 1
a39 1
  record_print_src_line = (1 << 0),
d42 1
a42 1
  record_print_insn_range = (1 << 1),
@


1.11
log
@Provide default target methods for record targets that are likely to be shared
between different record targets.

gdb/
	* record.h (record_disconnect): New.
	(record_detach): New.
	(record_mourn_inferior): New.
	(record_kill): New.
	* record-full.c (record_disconnect, record_detach,
	record_mourn_inferior, record_kill): Move to...
	* record.c: ...here.
	(DEBUG): New.
	(record_stop): New.
	(record_unpush): New.
	(cmd_record_stop): Call record_stop. Replace unpush_target
	call with record_unpush call.
	(record_disconnect, record_detach): Assert that the target
	is of record stratum. Call record_unpush, record_stop, and
	DEBUG.
	(record_mourn_inferior, record_kill): Assert that the target
	is of record stratum. Call record_unpush and DEBUG.
@
text
@d35 10
@


1.10
log
@Split record.h into record.h and record-full.h.
Split record.c into record.c and record-full.c.

The split leaves the command part in record.c and moves the target part into
record-full.c.

gdb/
	* record.h: Split into this and ...
	* record-full.h: ... this.
	* record.c: Split into this and ...
	* record-full.c: ... this.
	* target.h (target_ops): Add new fields to_info_record,
	to_save_record, to_delete_record, to_record_is_replaying,
	to_goto_record_begin, to_goto_record_end, to_goto_record.
	(target_info_record): New.
	(target_save_record): New.
	(target_supports_delete_record): New.
	(target_delete_record): New.
	(target_record_is_replaying): New.
	(target_goto_record_begin): New.
	(target_goto_record_end): New.
	(target_goto_record): New.
	* target.c (target_info_record): New.
	(target_save_record): New.
	(target_supports_delete_record): New.
	(target_delete_record): New.
	(target_record_is_replaying): New.
	(target_goto_record_begin): New.
	(target_goto_record_end): New.
	(target_goto_record): New.
	* record.h: Declare struct cmd_list_element.
	(record_cmdlist): New declaration.
	(set_record_cmdlist): New declaration.
	(show_record_cmdlist): New declaration.
	(info_record_cmdlist): New declaration.
	(cmd_record_goto): New declaration.
	* record.c: Remove unnecessary includes.
	Include inferior.h.
	(cmd_record_goto): Remove declaration.
	(record_cmdlist): Now extern. Initialize.
	(set_record_cmdlist): Now extern. Initialize.
	(show_record_cmdlist): Now extern. Initialize.
	(info_record_cmdlist): Now extern. Initialize.
	(find_record_target): New.
	(require_record_target): New.
	(cmd_record_start): Update.
	(cmd_record_delete): Remove target-specific code.
	Call target_delete_record.
	(cmd_record_stop): Unpush any record target.
	(set_record_insn_max_num): Move to record-full.c
	(set_record_command): Add comment.
	(show_record_command): Add comment.
	(info_record_command): Update comment.
	Remove target-specific code.
	Call the record target's to_info_record.
	(cmd_record_start): New.
	(cmd_record_goto): Now extern.
	Remove target-specific code.
	Call target_goto_begin,  target_goto_end, or target_goto.
	(_initialize_record): Move record target ops initialization to
	record-full.c.
	Change "record" command help text.
	Move "record restore", "record set", and "record show" commands to
	record-full.c.
	* Makefile.in (SFILES): Add record-full.c.
	(HFILES_NO_SRCDIR): Add record-full.h.
	(COMMON_OBS): Add record-full.o.
	* amd64-linux-tdep.c: Include record-full.h instead of record.h.
	* arm-tdep.c: Include record-full.h.
	* i386-linux-tdep.c: Include record-full.h instead of record.h.
	* i386-tdep.c: Include record-full.h.
	* infrun.c: Include record-full.h.
	* linux-record.c: Include record-full.h.
	* moxie-tdep.c: Include record-full.h.
	* record-full.c: Include record-full.h.
	Change module comment.
	(set_record_full_cmdlist): New.
	(show_record_full_cmdlist): New.
	(record_full_cmdlist): New.
	(record_goto_insn): New declaration.
	(record_save): New declaration.
	(record_check_insn_num): Change query string.
	(record_info): New.
	(record_delete): New.
	(record_is_replaying): New.
	(record_goto_entry): New.
	(record_goto_begin): New.
	(record_goto_end): New.
	(record_goto): New.
	(init_record_ops): Update.
	(init_record_core_ops): Update.
	(cmd_record_save): Rename to record_save. Remove target and arg checks.
	(cmd_record_start): New.
	(set_record_insn_max_num): Moved from record.c
	(set_record_full_command): New.
	(show_record_full_command): New.
	(_initialize_record_full): New.
@
text
@d44 12
@


1.9
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d23 2
a27 1
extern int record_memory_query;
d29 5
a33 4
extern int record_arch_list_add_reg (struct regcache *regcache, int num);
extern int record_arch_list_add_mem (CORE_ADDR addr, int len);
extern int record_arch_list_add_end (void);
extern struct cleanup *record_gdb_operation_disable_set (void);
d41 3
@


1.8
log
@gdb/
	* dwarf2loc.c (entry_values_debug): Add 'unsigned'.
	(_initialize_dwarf2loc): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* dwarf2loc.h: Update the declaration of 'entry_values_debug'.
	* dwarf2read.c (dwarf2_die_debug): Add 'unsigned'.
	(_initialize_dwarf2_read): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* darwin-nat.c (dwarwin_debug_flag): Add 'unsigned'.
	(_initialize_darwin_inferior): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* frame.c (frame_debug): Add 'unsigned'.
	(_intialize_frame): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* frame.h: Update the declaration of 'frame_debug'.
	* gdbtypes.c (overload_debug): Add 'unsigned'.
	(_initialize_gdbtypes): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* inferior.h: Update declaration of 'debug_infrun'.
	* infrun.c (debug_infrun): Add 'unsigned'.
	(_initialize_infrun): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* jit.c (jit_debug): Add 'unsigned'.
	(_initialize_jit): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* linux-nat.c (debug_linux_nat): Add 'unsigned'.
	(_initialize_linux_nat): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* linux-thread-db.c (libthread_db_debug): Add 'unsigned'.
	(_initialize_thread_db): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* machoread.c (mach_o_debug_level): Add 'unsigned'.
	(_initialize_machoread): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* mi/mi-cmd-var.c: Update the declaration of 'varobjdebug'.
	* microblaze-tdep.c (microblaze_debug_flag): Add 'unsigned'.
	(_initialize_microblaze_tdep): Call add_setshow_zuinteger_cmd
	intead of add_setshow_zinteger_cmd.
	* mips-tdep.c (mips_debug): Add 'unsigned'.
	(_initialize_mips_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* monitor.c (monitor_debug): Add 'unsigned'.
	(_initialize_remote_monitors): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* observer.c (observer_debug): Add 'unsigned'.
	(_initialize_observer): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* parse.c (expressiondebug): Add 'unsigned'.
	(_initialize_parse): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.c (record_debug): Add 'unsigned'.
	(_initialize_record): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.h: Update the declaration of 'record_debug'.
	* stap-probe.c (stap_expression_debug): Add 'unsigned'.
	(_initialize_stap_probe): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* serial.c (global_serial_debug_p): Add 'unsigned'.
	(_initialize_serial): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-dsbt.c (solib_dsbt_debug): Add 'unsigned'.
	(_initialize_dsbt_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-frv.c (solib_frv_debug): Add 'unsigned'.
	(_initialize_frv_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* target.c (targetdebug): Add 'unsigned'.
	(initialize_targets): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* valops.c (overload_debug): Add 'unsigned'.
	* varobj.c (varobjdebug): Add 'unsigned'.
	(_initialize_varobj): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* xtensa-tdep.c (xtensa_debug_level): Add 'unsigned'.
	(_initialize_xtensa_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.

	* arch-utils.h: Remove the declaration of 'gdbarch_debug'.
	* gdbarch.sh (gdbarch_debug): Add 'unsigned'.
	(extern void _initialize_gdbarch): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* gdbarch.c, gdbarch.h: Re-generated.
@
text
@d3 1
a3 1
   Copyright (C) 2008-2012 Free Software Foundation, Inc.
@


1.7
log
@2012-07-20  Pedro Alves  <palves@@redhat.com>

	* i386-tdep.c (i386_record_modrm, i386_record_lea_modrm_addr)
	(i386_process_record): Use record_read_memory.
	* record.c (record_read_memory): New function.
	(record_arch_list_add_mem, record_exec_insn): Use
	record_read_memory.
	* record.h (record_read_memory): Declare.
@
text
@d25 1
a25 1
extern int record_debug;
@


1.6
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d33 6
@


1.5
log
@run copyright.sh for 2011.
@
text
@d3 1
a3 1
   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.5.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 1
a3 1
   Copyright (C) 2008-2012 Free Software Foundation, Inc.
@


1.4
log
@2010-06-22  Hui Zhu  <teawater@@gmail.com>

	* i386-tdep.c (i386_record_lea_modrm): Change warning to query.
	(i386_process_record): Ditto.
	* record.c (record_memory_query): New variable.
	(_initialize_record): New command "set record memory-query".
	* record.h (record_memory_query): New extern.

2010-06-22  Hui Zhu  <teawater@@gmail.com>

	* gdb.texinfo: (Process Record and Replay): Add documentation
	for command "set record memory-query".
@
text
@d3 1
a3 1
   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.3
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d26 1
@


1.2
log
@Process record and replay target.

* Makefile.in (SFILES): Add record.c.
(COMMON_OBS): Add record.o.
* record.c, record.h: New file.
@
text
@d3 1
a3 1
   Copyright (C) 2008, 2009 Free Software Foundation, Inc.
@


1.1
log
@file record.h was initially added on branch reverse-20080717-branch.
@
text
@d1 32
@


1.1.6.1
log
@2008-12-26  Michael Snyder  <msnyder@@vmware.com>

	* Marker: adding teawater patches to branch.
@
text
@a0 98
/* Process record and replay target for GDB, the GNU debugger.

   Copyright (C) 2008 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#ifndef _RECORD_H_
#define _RECORD_H_

#define RECORD_IS_USED   \
     (current_target.beneath == &record_ops)
#define RECORD_IS_REPLAY \
     (record_list->next || execution_direction == EXEC_REVERSE)

typedef struct record_reg_s
{
  int num;
  gdb_byte *val;
} record_reg_t;

typedef struct record_mem_s
{
  CORE_ADDR addr;
  int len;
  gdb_byte *val;
} record_mem_t;

enum record_type
{
  record_end = 0,
  record_reg,
  record_mem
};

/* This is the core struct of record function.
   An entity of record_t is a record of the value change of a register
   ("record_reg") or a part of memory ("record_mem"). And Each instruction must
   has a record_t ("record_end") that point out this is the last record_t of
   this instruction.
   Each record_t is linked to "record_list" by "prev" and "next".
 */
typedef struct record_s
{
  struct record_s *prev;
  struct record_s *next;
  enum record_type type;
  union
  {
    /* reg */
    record_reg_t reg;
    /* mem */
    record_mem_t mem;
    /* end */
    int need_dasm;
  } u;
} record_t;

extern int record_debug;
extern record_t *record_list;
extern record_t *record_arch_list_head;
extern record_t *record_arch_list_tail;
extern struct regcache *record_regcache;

extern struct target_ops record_ops;

extern int record_arch_list_add_reg (int num);
extern int record_arch_list_add_mem (CORE_ADDR addr, int len);
extern int record_arch_list_add_end (int need_dasm);
extern void record_message (struct gdbarch *gdbarch);
extern void record_not_record_set (void);

extern void (*record_beneath_to_resume) (ptid_t, int, enum target_signal);
extern ptid_t (*record_beneath_to_wait) (ptid_t, struct target_waitstatus *);
extern void (*record_beneath_to_store_registers) (struct regcache *, int regno);
extern LONGEST (*record_beneath_to_xfer_partial) (struct target_ops * ops,
						  enum target_object object,
						  const char *annex,
						  gdb_byte * readbuf,
						  const gdb_byte * writebuf,
						  ULONGEST offset,
						  LONGEST len);
extern int (*record_beneath_to_insert_breakpoint) (struct bp_target_info *);
extern int (*record_beneath_to_remove_breakpoint) (struct bp_target_info *);

#endif /* _RECORD_H_ */
@


1.1.6.2
log
@2008-12-26  Michael Snyder  <msnyder@@vmware.com>

	* record.h: Don't export record_not_record.
	* infrun.c (proceed): Don't call record_not_record_set.
	* record.h (record_not_record): Rename to in_record_wait.
	(record_not_record_set): Rename to in_record_wait_set.
	(record_not_record_cleanup): Rename to in_record_wait_cleanup.
	(record_store_registers): Check in_record_wait flag.
	(record_xfer_partial): Ditto.
@
text
@d83 1
@


1.1.6.3
log
@2008-12-28  Michael Snyder  <msnyder@@vmware.com>

	* Comments, spelling, white space clean-ups.
@
text
@a48 1

d50 3
a52 4
   ("record_reg") or a part of memory ("record_mem").  And each
   instruction must has a record_t ("record_end") that points out this
   is the last record_t of this instruction.

@


1.1.6.4
log
@Change "RECORD_IS_USED" to "TARGET_IS_PROCESS_RECORD".
@
text
@d23 1
a23 1
#define TARGET_IS_PROCESS_RECORD   \
@


1.1.4.1
log
@2008-09-30  Hui Zhu  <teawater@@gmail.com>
	Add process record and replay to GDB.
	* record.c, record.h: New files. Record and reverse target.
	* gdbarch.sh: New methods process_record and process_record_dasm.
	* gdbarch.c, gdbarch.h: Re-generate.
	* target.h (enum strata): Add record_stratum.
	* target.h (target_ops): Add a element "to_support_record_wait".
	Default value is 0. meaning that this target doesn't support record
	wait.
	* target.c: Add include of "record.h".
	(update_current_target): Set the real beneath function.
	(add_target): Set the default value of "to_support_record_wait".
	pointers.
 	* Makefile.in: Add files record.c, record.o.
@
text
@a0 101
/* Record and reverse target for GDB, the GNU debugger.

   Copyright (C) 2008 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#ifndef _RECORD_H_
#define _RECORD_H_

#define RECORD_IS_USED				(current_target.beneath == &record_ops)
#define RECORD_IS_REPLAY			(record_list->next || record_execdir == EXEC_REVERSE)
#define RECORD_TARGET_SUPPORT_RECORD_WAIT	(record_ops.beneath->to_support_record_wait)

typedef struct record_reg_s
{
  int num;
  gdb_byte *val;
} record_reg_t;

typedef struct record_mem_s
{
  CORE_ADDR addr;
  int len;
  gdb_byte *val;
} record_mem_t;

enum record_type
{
  record_end = 0,
  record_reg,
  record_mem
};

/* This is the core struct of record function.
   An entity of record_t is a record of the value change of a register
   ("record_reg") or a part of memory ("record_mem"). And Each instruction must
   has a record_t ("record_end") that point out this is the last record_t of
   this instruction.
   Each record_t is linked to "record_list" by "prev" and "next". 
 */
typedef struct record_s
{
  struct record_s *prev;
  struct record_s *next;
  enum record_type type;
  union
  {
    /* reg */
    record_reg_t reg;
    /* mem */
    record_mem_t mem;
    /* end */
    int need_dasm;
  } u;
} record_t;

extern int record_debug;
extern record_t *record_list;
extern record_t *record_arch_list_head;
extern record_t *record_arch_list_tail;
extern struct regcache *record_regcache;

extern struct target_ops record_ops;
extern int record_resume_step;
extern int record_regcache_raw_write_regnum;
extern enum exec_direction_kind record_execdir;
extern int record_linux_async_permitted;

extern int record_arch_list_add_reg (int num);
extern int record_arch_list_add_mem (CORE_ADDR addr, int len);
extern int record_arch_list_add_end (int need_dasm);
extern void record_message (struct gdbarch *gdbarch);
extern void record_not_record_set (void);

extern void (*record_beneath_to_resume) (ptid_t, int, enum target_signal);
extern ptid_t (*record_beneath_to_wait) (ptid_t, struct target_waitstatus *);
extern void (*record_beneath_to_prepare_to_store) (struct regcache *);
extern LONGEST (*record_beneath_to_xfer_partial) (struct target_ops * ops,
						  enum target_object object,
						  const char *annex,
						  gdb_byte * readbuf,
						  const gdb_byte * writebuf,
						  ULONGEST offset,
						  LONGEST len);
extern int (*record_beneath_to_insert_breakpoint) (struct bp_target_info *);
extern int (*record_beneath_to_remove_breakpoint) (struct bp_target_info *);

#endif /* _RECORD_H_ */
@


1.1.4.2
log
@2008-10-02  Michael Snyder  <msnyder@@vmware.com>

	* record.c (record_open): Call target_can_async_p() instead
	of relying on a global variable.
	* record.h (record_linux_async_permitted): Delete.
	* linux-nat.h (record_linux_async_permitted): Delete reference.
@
text
@d80 1
@


1.1.4.3
log
@2008-10-04  Michael Snyder  <msnyder@@vmware.com>

	* target.c, target.h: Rename execdir to exec_direction.
	* record.c, record.h: Ditto.
	* reverse.c: Ditto.
	* remote.c: Ditto.

	* reverse.c (show_exec_direction_func): Don't error, just inform.
@
text
@d23 2
a24 4
#define RECORD_IS_USED   \
     (current_target.beneath == &record_ops)
#define RECORD_IS_REPLAY \
     (record_list->next || record_exec_direction == EXEC_REVERSE)
d79 1
a79 1
extern enum exec_direction_kind record_exec_direction;
@


1.1.4.4
log
@2008-10-04  Hui Zhu  <teawater@@gmail.com>

	Change from "to_prepare_to_store" to "to_store_registers".
	* record.c (record_beneath_to_prepare_to_store): Removed.
	(record_beneath_to_store_registers): New function pointer.
	Instead "record_beneath_to_prepare_to_store". Will point
	to the low strata target "to_store_registers" function.
	(record_prepare_to_store): Removed.
	(record_store_registers): New function.
	Instead "record_prepare_to_store". Record the change of
	registers from GDB.
	(init_record_ops): Change record_prepare_to_store to
	record_store_registers.
	* record.h (record_beneath_to_prepare_to_store): Removed.
	(record_beneath_to_store_registers): New extern.
	(record_regcache_raw_write_regnum): Remove.
	* target.c (update_current_target): Change
	record_beneath_to_prepare_to_store to
	record_beneath_to_store_registers.
@
text
@d80 1
d91 1
a91 1
extern void (*record_beneath_to_store_registers) (struct regcache *, int regno);
@


1.1.4.5
log
@2008-10-07  Hui Zhu  <teawater@@gmail.com>

	* i386-tdep.c, infrun.c, linux-record.c, linux-record.h,
	record.c, record.h: Change name from
	"record and reverse target" to
	"process record and replay target".
@
text
@d1 1
a1 1
/* Process record and replay target for GDB, the GNU debugger.
@


1.1.4.6
log
@2008-10-07  Michael Snyder  <msnyder@@vmware.com>

	* target.h (to_set_exec_direction, to_get_exec_direction): Remove.
	(to_can_execute_reverse): New method.
	(enum exec_direction_kind): Move to inferior.h.
	* target.c (update_current_target): Inherit to_can_execute_reverse.
	Remove to_set_exec_direction, to_get_exec_direction.
	* inferior.h (enum exec_direction_kind): Move from target.h.

	* infrun.c (set_exec_direction_func): Move here from reverse.c.
	(show_exec_direction_func): Ditto.
	(proceed): Consult global execution_direction instead of
	target method.
	(handle_inferior_event): Ditto.

	* reverse.c (set_exec_direction_func): Move to infrun.c
	(show_exec_direction_func): Ditto.
	(exec_direction_default): Set infrun global variable.
	(exec_reverse_once): Consult infrun global direction variable.

	* infcmd.c (step_1): Consult infrun global direction variable.
	(step_once): Ditto.
	(until_next_command): Ditto.
	(finish_command): Ditto.

	* record.h (record_exec_direction): Delete.
	(RECORD_IS_REPLAY): Consult infrun global direction variable.

	* record.c: (record_wait_cleanups): Use infrun state variable.
	(record_wait): Ditto.
	(record_get_exec_direction, record_set_exec_direction): Remove.
	(record_can_execute_reverse): New target method.

	* remote.c (remote_resume): Use infrun state variable.
	(remote_get_exec_direction, remote_set_exec_direction): Remove.
	(remote_can_execute_reverse): New target method.
@
text
@d26 2
a27 3
     (record_list->next || execution_direction == EXEC_REVERSE)
#define RECORD_TARGET_SUPPORT_RECORD_WAIT \
     (record_ops.beneath->to_support_record_wait)
d80 1
@


1.1.4.7
log
@2008-10-18  Hui Zhu  <teawater@@gmail.com>

	Remove "to_support_record_wait".

	* target.c (add_target): Remove "to_support_record_wait".
	* target.h (target_ops): Ditto.
	* linux-nat.c (linux_nat_add_target): Ditto.
	* record.h (RECORD_TARGET_SUPPORT_RECORD_WAIT): This macro is removed.
@
text
@d27 2
@


1.1.2.1
log
@Add record target to GDB.
@
text
@a0 86
/* Record and reverse target for GDB, the GNU debugger.

   Copyright (C) 2008 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#ifndef _RECORD_H_
#define _RECORD_H_

#define RECORD_IS_USED		(current_target.beneath == &record_ops)
#define RECORD_IS_REPLAY	(record_list->next || record_execdir == EXEC_REVERSE)

typedef struct record_reg_s
{
  int num;
  gdb_byte *val;
} record_reg_t;

typedef struct record_mem_s
{
  CORE_ADDR addr;
  int len;
  gdb_byte *val;
} record_mem_t;

enum record_type
{
  record_end = 0,
  record_reg,
  record_mem
};

/* This is the core struct of record function.
   An entity of record_t is a record of the value change of a register
   ("record_reg") or a part of memory ("record_mem"). And Each instruction must
   has a record_t ("record_end") that point out this is the last record_t of
   this instruction.
   Each record_t is linked to "record_list" by "prev" and "next". 
 */
typedef struct record_s
{
  struct record_s *prev;
  struct record_s *next;
  enum record_type type;
  union
  {
    /* reg */
    record_reg_t reg;
    /* mem */
    record_mem_t mem;
    /* end */
    int need_dasm;
  } u;
} record_t;

extern int record_debug;
extern record_t *record_list;
extern record_t *record_arch_list_head;
extern record_t *record_arch_list_tail;
extern struct regcache *record_regcache;

extern struct target_ops record_ops;
extern int record_resume_step;
extern int record_regcache_raw_write_regnum;
extern enum exec_direction_kind record_execdir;

extern int record_arch_list_add_reg (int num);
extern int record_arch_list_add_mem (CORE_ADDR addr, int len);
extern int record_arch_list_add_end (int need_dasm);
extern void record_message (struct gdbarch *gdbarch);
extern void record_not_record_set (void);

#endif /* _RECORD_H_ */
@


1.1.2.2
log
@Add a element "to_support_record_wait" to target_ops.
Optimize infrun.c.
@
text
@d23 2
a24 3
#define RECORD_IS_USED				(current_target.beneath == &record_ops)
#define RECORD_IS_REPLAY			(record_list->next || record_execdir == EXEC_REVERSE)
#define RECORD_TARGET_SUPPORT_RECORD_WAIT	(record_ops.beneath->to_support_record_wait)
@


1.1.2.3
log
@2008-08-10  Hui Zhu  <teawater@@gmail.com>

	Add the real beneath function pointers for record target.

	* Makefile.in: Add record.h to depend of target.c.
	* record.c (record_beneath_to_resume, record_beneath_to_wait,
	record_beneath_to_prepare_to_store, record_beneath_to_xfer_partial,
	record_beneath_to_insert_breakpoint,
	record_beneath_to_remove_breakpoint): New function pointers. The real
	beneath function pointers.
	(record_resume): Change "record_ops.beneath->to_resume" to
	"record_beneath_to_resume".
	(record_wait): Change "record_ops.beneath->to_wait" to
	"record_beneath_to_wait".
	(record_prepare_to_store): Change
	"record_ops.beneath->to_prepare_to_store" to
	"record_beneath_to_prepare_to_store".
	(record_xfer_partial): Change "record_ops.beneath->to_xfer_partial" to
	"record_beneath_to_xfer_partial".
	(record_insert_breakpoint): Change
	"record_ops.beneath->to_insert_breakpoint" to
	"record_beneath_to_insert_breakpoint".
	(record_remove_breakpoint): Change
	"record_ops.beneath->to_remove_breakpoint" to
	"record_beneath_to_remove_breakpoint".
	* record.h (record_beneath_to_resume, record_beneath_to_wait,
	record_beneath_to_prepare_to_store, record_beneath_to_xfer_partial,
	record_beneath_to_insert_breakpoint,
	record_beneath_to_remove_breakpoint): Extern.
	* target.c: Add include of "record.h".
	(update_current_target): Set the real beneath function pointers.
@
text
@a86 13
extern void (*record_beneath_to_resume) (ptid_t, int, enum target_signal);
extern ptid_t (*record_beneath_to_wait) (ptid_t, struct target_waitstatus *);
extern void (*record_beneath_to_prepare_to_store) (struct regcache *);
extern LONGEST (*record_beneath_to_xfer_partial) (struct target_ops * ops,
						  enum target_object object,
						  const char *annex,
						  gdb_byte * readbuf,
						  const gdb_byte * writebuf,
						  ULONGEST offset,
						  LONGEST len);
extern int (*record_beneath_to_insert_breakpoint) (struct bp_target_info *);
extern int (*record_beneath_to_remove_breakpoint) (struct bp_target_info *);

@


1.1.2.4
log
@
	the insn number.
	(record_registers_change): Call function
	"record_check_insn_num" check the insn number. Increase
	"record_insn_num" if need.
	(record_xfer_partial): Call function "record_check_insn_num"
	check the insn number. Increase "record_insn_num" if need.

2008-08-10  Hui Zhu  <teawater@@gmail.com>

	Add the real beneath function pointers for record target.

	* Makefile.in: Add record.h to depend of target.c.
	* record.c (record_beneath_to_resume, record_beneath_to_wait,
	record_beneath_to_prepare_to_store,
	record_beneath_to_xfer_partial,
	record_beneath_to_insert_breakpoint,
	record_beneath_to_remove_breakpoint): New function pointers.
	The real beneath function pointers.
	(record_resume): Change "record_ops.beneath->to_resume" to
	"record_beneath_to_resume".
	(record_wait): Change "record_ops.beneath->to_wait" to
	"record_beneath_to_wait".
	(record_prepare_to_store): Change
	"record_ops.beneath->to_prepare_to_store" to
	"record_beneath_to_prepare_to_store".
	(record_xfer_partial): Change
	"record_ops.beneath->to_xfer_partial" to
	"record_beneath_to_xfer_partial".
	(record_insert_breakpoint): Change
	"record_ops.beneath->to_insert_breakpoint" to
	"record_beneath_to_insert_breakpoint".
	(record_remove_breakpoint): Change
	"record_ops.beneath->to_remove_breakpoint" to
	"record_beneath_to_remove_breakpoint".
	* record.h (record_beneath_to_resume,
	record_beneath_to_wait,
	record_beneath_to_prepare_to_store,
	record_beneath_to_xfer_partial,
	record_beneath_to_insert_breakpoint,
	record_beneath_to_remove_breakpoint): Extern.
	* target.c: Add include of "record.h".
	(update_current_target): Set the real beneath function
	pointers.
@
text
@a79 1
extern int record_linux_async_permitted;
@


1.1.2.5
log
@2008-10-02  Michael Snyder  <msnyder@@vmware.com>

	* record.c (record_open): Call target_can_async_p() instead
	of relying on a global variable.
	* record.h (record_linux_async_permitted): Delete.
	* linux-nat.c (record_linux_async_permitted): Delete reference.
@
text
@d80 1
@


1.1.2.6
log
@2008-10-05  Michael Snyder  <msnyder@@vmware.com>

	* target.c, target.h: Rename execdir to exec_direction.
	* record.c, record.h: Ditto.
	* reverse.c: Ditto.
	* remote.c: Ditto.
@
text
@d23 3
a25 6
#define RECORD_IS_USED	\
     (current_target.beneath == &record_ops)
#define RECORD_IS_REPLAY  \
     (record_list->next || record_exec_direction == EXEC_REVERSE)
#define RECORD_TARGET_SUPPORT_RECORD_WAIT  \
     (record_ops.beneath->to_support_record_wait)
d79 1
a79 1
extern enum exec_direction_kind record_exec_direction;
@


1.1.2.7
log
@2008-10-04  Hui Zhu  <teawater@@gmail.com>

	Change from "to_prepare_to_store" to "to_store_registers".
	* record.c (record_beneath_to_prepare_to_store): Removed.
	(record_beneath_to_store_registers): New function pointer.
	Instead "record_beneath_to_prepare_to_store". Will point
	to the low strata target "to_store_registers" function.
	(record_prepare_to_store): Removed.
	(record_store_registers): New function.
	Instead "record_prepare_to_store". Record the change of
	registers from GDB.
	(init_record_ops): Change record_prepare_to_store to
	record_store_registers.
	* record.h (record_beneath_to_prepare_to_store): Removed.
	(record_beneath_to_store_registers): New extern.
	(record_regcache_raw_write_regnum): Remove.
	* target.c (update_current_target): Change
	record_beneath_to_prepare_to_store to
	record_beneath_to_store_registers.

2008-10-06  Michael Snyder  <msnyder@@promb-2s-dhcp59.eng.vmware.com>

	* regcache.c (regcache_raw_write): Remove global variable.
	No need to include "record.h" now.
	* record.c (record_regcache_raw_write_regnum): Remove.
@
text
@d81 1
d92 1
a92 1
extern void (*record_beneath_to_store_registers) (struct regcache *, int regno);
@


1.1.2.8
log
@2008-10-07  Hui Zhu  <teawater@@gmail.com>

	* i386-tdep.c, inflow.c, infrun.c, linux-record.c,
	linux-record.h, record.c, record.h: Change name from
	"record and reverse target" to
	"process record and replay target".
@
text
@d1 1
a1 1
/* Process record and replay target for GDB, the GNU debugger.
@


1.1.2.9
log
@2008-10-07  Michael Snyder  <msnyder@@vmware.com>

	* target.h (to_set_exec_direction, to_get_exec_direction): Remove.
	(to_can_execute_reverse): New method.
	(enum exec_direction_kind): Move to inferior.h.
	* target.c (update_current_target): Inherit to_can_execute_reverse.
	Remove to_set_exec_direction, to_get_exec_direction.
	* inferior.h (enum exec_direction_kind): Move from target.h.

	* infrun.c (set_exec_direction_func): Move here from reverse.c.
	(show_exec_direction_func): Ditto.
	(proceed): Consult global execution_direction instead of
	target method.
	(handle_inferior_event): Ditto.

	* reverse.c (set_exec_direction_func): Move to infrun.c
	(show_exec_direction_func): Ditto.
	(exec_direction_default): Set infrun global variable.
	(exec_reverse_once): Consult infrun global direction variable.

	* infcmd.c (step_1): Consult infrun global direction variable.
	(step_once): Ditto.
	(until_next_command): Ditto.
	(finish_command): Ditto.

	* record.h (record_exec_direction): Delete.
	(RECORD_IS_REPLAY): Consult infrun global direction variable.

	* record.c: (record_wait_cleanups): Use infrun state variable.
	(record_wait): Ditto.
	(record_get_exec_direction, record_set_exec_direction): Remove.
	(record_can_execute_reverse): New target method.

	* remote.c (remote_resume): Use infrun state variable.
	(remote_get_exec_direction, remote_set_exec_direction): Remove.
	(remote_can_execute_reverse): New target method.
@
text
@d26 1
a26 1
     (record_list->next || execution_direction == EXEC_REVERSE)
d81 1
@


