head	1.87;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.86
	gdb_7_6-2013-04-26-release:1.86
	gdb_7_6-branch:1.86.0.2
	gdb_7_6-2013-03-12-branchpoint:1.86
	gdb_7_5_1-2012-11-29-release:1.80
	gdb_7_5-2012-08-17-release:1.80
	gdb_7_5-branch:1.80.0.2
	gdb_7_5-2012-07-18-branchpoint:1.80
	gdb_7_4_1-2012-04-26-release:1.75.2.1
	gdb_7_4-2012-01-24-release:1.75.2.1
	gdb_7_4-branch:1.75.0.2
	gdb_7_4-2011-12-13-branchpoint:1.75
	gdb_7_3_1-2011-09-04-release:1.74
	gdb_7_3-2011-07-26-release:1.74
	gdb_7_3-branch:1.74.0.2
	gdb_7_3-2011-04-01-branchpoint:1.74
	gdb_7_2-2010-09-02-release:1.68
	gdb_7_2-branch:1.68.0.2
	gdb_7_2-2010-07-07-branchpoint:1.68
	gdb_7_1-2010-03-18-release:1.67
	gdb_7_1-branch:1.67.0.2
	gdb_7_1-2010-02-18-branchpoint:1.67
	gdb_7_0_1-2009-12-22-release:1.65
	gdb_7_0-2009-10-06-release:1.65
	gdb_7_0-branch:1.65.0.2
	gdb_7_0-2009-09-16-branchpoint:1.65
	arc-sim-20090309:1.58
	msnyder-checkpoint-072509-branch:1.63.0.2
	msnyder-checkpoint-072509-branchpoint:1.63
	arc-insight_6_8-branch:1.58.0.14
	arc-insight_6_8-branchpoint:1.58
	insight_6_8-branch:1.58.0.12
	insight_6_8-branchpoint:1.58
	reverse-20081226-branch:1.59.0.2
	reverse-20081226-branchpoint:1.59
	multiprocess-20081120-branch:1.58.0.10
	multiprocess-20081120-branchpoint:1.58
	reverse-20080930-branch:1.58.0.8
	reverse-20080930-branchpoint:1.58
	reverse-20080717-branch:1.58.0.6
	reverse-20080717-branchpoint:1.58
	msnyder-reverse-20080609-branch:1.58.0.4
	msnyder-reverse-20080609-branchpoint:1.58
	drow-reverse-20070409-branch:1.56.0.2
	drow-reverse-20070409-branchpoint:1.56
	gdb_6_8-2008-03-27-release:1.58
	gdb_6_8-branch:1.58.0.2
	gdb_6_8-2008-02-26-branchpoint:1.58
	gdb_6_7_1-2007-10-29-release:1.57
	gdb_6_7-2007-10-10-release:1.57
	gdb_6_7-branch:1.57.0.2
	gdb_6_7-2007-09-07-branchpoint:1.57
	insight_6_6-20070208-release:1.55
	gdb_6_6-2006-12-18-release:1.55
	gdb_6_6-branch:1.55.0.2
	gdb_6_6-2006-11-15-branchpoint:1.55
	insight_6_5-20061003-release:1.54
	gdb-csl-symbian-6_4_50_20060226-12:1.54
	gdb-csl-sourcerygxx-3_4_4-25:1.53
	nickrob-async-20060828-mergepoint:1.54
	gdb-csl-symbian-6_4_50_20060226-11:1.54
	gdb-csl-sourcerygxx-4_1-17:1.54
	gdb-csl-20060226-branch-local-2:1.54
	gdb-csl-sourcerygxx-4_1-14:1.54
	gdb-csl-sourcerygxx-4_1-13:1.54
	gdb-csl-sourcerygxx-4_1-12:1.54
	gdb-csl-sourcerygxx-3_4_4-21:1.54
	gdb_6_5-20060621-release:1.54
	gdb-csl-sourcerygxx-4_1-9:1.54
	gdb-csl-sourcerygxx-4_1-8:1.54
	gdb-csl-sourcerygxx-4_1-7:1.54
	gdb-csl-arm-2006q1-6:1.54
	gdb-csl-sourcerygxx-4_1-6:1.54
	gdb-csl-symbian-6_4_50_20060226-10:1.54
	gdb-csl-symbian-6_4_50_20060226-9:1.54
	gdb-csl-symbian-6_4_50_20060226-8:1.54
	gdb-csl-coldfire-4_1-11:1.54
	gdb-csl-sourcerygxx-3_4_4-19:1.54
	gdb-csl-coldfire-4_1-10:1.54
	gdb_6_5-branch:1.54.0.16
	gdb_6_5-2006-05-14-branchpoint:1.54
	gdb-csl-sourcerygxx-4_1-5:1.54
	nickrob-async-20060513-branch:1.54.0.14
	nickrob-async-20060513-branchpoint:1.54
	gdb-csl-sourcerygxx-4_1-4:1.54
	msnyder-reverse-20060502-branch:1.54.0.12
	msnyder-reverse-20060502-branchpoint:1.54
	gdb-csl-morpho-4_1-4:1.54
	gdb-csl-sourcerygxx-3_4_4-17:1.54
	readline_5_1-import-branch:1.54.0.10
	readline_5_1-import-branchpoint:1.54
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.54
	gdb-csl-symbian-20060226-branch:1.54.0.8
	gdb-csl-symbian-20060226-branchpoint:1.54
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.54
	msnyder-reverse-20060331-branch:1.54.0.6
	msnyder-reverse-20060331-branchpoint:1.54
	gdb-csl-available-20060303-branch:1.54.0.4
	gdb-csl-available-20060303-branchpoint:1.54
	gdb-csl-20060226-branch:1.54.0.2
	gdb-csl-20060226-branchpoint:1.54
	gdb_6_4-20051202-release:1.53
	msnyder-fork-checkpoint-branch:1.53.0.10
	msnyder-fork-checkpoint-branchpoint:1.53
	gdb-csl-gxxpro-6_3-branch:1.53.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.53
	gdb_6_4-branch:1.53.0.6
	gdb_6_4-2005-11-01-branchpoint:1.53
	gdb-csl-arm-20051020-branch:1.53.0.4
	gdb-csl-arm-20051020-branchpoint:1.53
	msnyder-tracepoint-checkpoint-branch:1.53.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.53
	gdb-csl-arm-20050325-2005-q1b:1.52
	gdb-csl-arm-20050325-2005-q1a:1.52
	csl-arm-20050325-branch:1.52.0.2
	csl-arm-20050325-branchpoint:1.52
	gdb-post-i18n-errorwarning-20050211:1.45
	gdb-pre-i18n-errorwarning-20050211:1.45
	gdb_6_3-20041109-release:1.41
	gdb_6_3-branch:1.41.0.2
	gdb_6_3-20041019-branchpoint:1.41
	drow_intercu-merge-20040921:1.41
	drow_intercu-merge-20040915:1.41
	jimb-gdb_6_2-e500-branch:1.38.0.6
	jimb-gdb_6_2-e500-branchpoint:1.38
	gdb_6_2-20040730-release:1.38
	gdb_6_2-branch:1.38.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.38
	gdb_6_1_1-20040616-release:1.37
	gdb_6_1-2004-04-05-release:1.37
	drow_intercu-merge-20040402:1.37
	drow_intercu-merge-20040327:1.37
	ezannoni_pie-20040323-branch:1.37.0.12
	ezannoni_pie-20040323-branchpoint:1.37
	cagney_tramp-20040321-mergepoint:1.37
	cagney_tramp-20040309-branch:1.37.0.10
	cagney_tramp-20040309-branchpoint:1.37
	gdb_6_1-branch:1.37.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.37
	drow_intercu-20040221-branch:1.37.0.6
	drow_intercu-20040221-branchpoint:1.37
	cagney_bfdfile-20040213-branch:1.37.0.4
	cagney_bfdfile-20040213-branchpoint:1.37
	drow-cplus-merge-20040208:1.37
	carlton_dictionary-20040126-merge:1.37
	cagney_bigcore-20040122-branch:1.37.0.2
	cagney_bigcore-20040122-branchpoint:1.37
	drow-cplus-merge-20040113:1.37
	drow-cplus-merge-20031224:1.37
	drow-cplus-merge-20031220:1.37
	carlton_dictionary-20031215-merge:1.37
	drow-cplus-merge-20031214:1.37
	carlton-dictionary-20031111-merge:1.37
	gdb_6_0-2003-10-04-release:1.35.44.1
	kettenis_sparc-20030918-branch:1.36.0.6
	kettenis_sparc-20030918-branchpoint:1.36
	carlton_dictionary-20030917-merge:1.36
	ezannoni_pie-20030916-branchpoint:1.36
	ezannoni_pie-20030916-branch:1.36.0.4
	cagney_x86i386-20030821-branch:1.36.0.2
	cagney_x86i386-20030821-branchpoint:1.36
	carlton_dictionary-20030805-merge:1.35
	carlton_dictionary-20030627-merge:1.35
	gdb_6_0-branch:1.35.0.44
	gdb_6_0-2003-06-23-branchpoint:1.35
	jimb-ppc64-linux-20030613-branch:1.35.0.42
	jimb-ppc64-linux-20030613-branchpoint:1.35
	cagney_convert-20030606-branch:1.35.0.40
	cagney_convert-20030606-branchpoint:1.35
	cagney_writestrings-20030508-branch:1.35.0.38
	cagney_writestrings-20030508-branchpoint:1.35
	jimb-ppc64-linux-20030528-branch:1.35.0.36
	jimb-ppc64-linux-20030528-branchpoint:1.35
	carlton_dictionary-20030523-merge:1.35
	cagney_fileio-20030521-branch:1.35.0.34
	cagney_fileio-20030521-branchpoint:1.35
	kettenis_i386newframe-20030517-mergepoint:1.35
	jimb-ppc64-linux-20030509-branch:1.35.0.32
	jimb-ppc64-linux-20030509-branchpoint:1.35
	kettenis_i386newframe-20030504-mergepoint:1.35
	carlton_dictionary-20030430-merge:1.35
	kettenis_i386newframe-20030419-branch:1.35.0.30
	kettenis_i386newframe-20030419-branchpoint:1.35
	carlton_dictionary-20030416-merge:1.35
	cagney_frameaddr-20030409-mergepoint:1.35
	kettenis_i386newframe-20030406-branch:1.35.0.28
	kettenis_i386newframe-20030406-branchpoint:1.35
	cagney_frameaddr-20030403-branchpoint:1.35
	cagney_frameaddr-20030403-branch:1.35.0.26
	cagney_framebase-20030330-mergepoint:1.35
	cagney_framebase-20030326-branch:1.35.0.24
	cagney_framebase-20030326-branchpoint:1.35
	cagney_lazyid-20030317-branch:1.35.0.22
	cagney_lazyid-20030317-branchpoint:1.35
	kettenis-i386newframe-20030316-mergepoint:1.35
	offbyone-20030313-branch:1.35.0.20
	offbyone-20030313-branchpoint:1.35
	kettenis-i386newframe-20030308-branch:1.35.0.18
	kettenis-i386newframe-20030308-branchpoint:1.35
	carlton_dictionary-20030305-merge:1.35
	cagney_offbyone-20030303-branch:1.35.0.16
	cagney_offbyone-20030303-branchpoint:1.35
	carlton_dictionary-20030207-merge:1.35
	interps-20030203-mergepoint:1.35
	interps-20030202-branch:1.35.0.14
	interps-20030202-branchpoint:1.35
	cagney-unwind-20030108-branch:1.35.0.12
	cagney-unwind-20030108-branchpoint:1.35
	carlton_dictionary-20021223-merge:1.35
	gdb_5_3-2002-12-12-release:1.35
	carlton_dictionary-20021115-merge:1.35
	kseitz_interps-20021105-merge:1.35
	kseitz_interps-20021103-merge:1.35
	drow-cplus-merge-20021020:1.35
	drow-cplus-merge-20021025:1.35
	carlton_dictionary-20021025-merge:1.35
	carlton_dictionary-20021011-merge:1.35
	drow-cplus-branch:1.35.0.10
	drow-cplus-branchpoint:1.35
	kseitz_interps-20020930-merge:1.35
	carlton_dictionary-20020927-merge:1.35
	carlton_dictionary-branch:1.35.0.8
	carlton_dictionary-20020920-branchpoint:1.35
	gdb_5_3-branch:1.35.0.6
	gdb_5_3-2002-09-04-branchpoint:1.35
	kseitz_interps-20020829-merge:1.35
	cagney_sysregs-20020825-branch:1.35.0.4
	cagney_sysregs-20020825-branchpoint:1.35
	readline_4_3-import-branch:1.35.0.2
	readline_4_3-import-branchpoint:1.35
	gdb_5_2_1-2002-07-23-release:1.24
	kseitz_interps-20020528-branch:1.29.0.6
	kseitz_interps-20020528-branchpoint:1.29
	cagney_regbuf-20020515-branch:1.29.0.4
	cagney_regbuf-20020515-branchpoint:1.29
	jimb-macro-020506-branch:1.29.0.2
	jimb-macro-020506-branchpoint:1.29
	gdb_5_2-2002-04-29-release:1.24
	gdb_5_2-branch:1.24.0.2
	gdb_5_2-2002-03-03-branchpoint:1.24
	gdb_5_1_1-2002-01-24-release:1.18
	gdb_5_1_0_1-2002-01-03-release:1.18
	cygnus_cvs_20020108_pre:1.20
	gdb_5_1_0_1-2002-01-03-branchpoint:1.18
	gdb_5_1_0_1-2002-01-03-branch:1.18.0.6
	gdb_5_1-2001-11-21-release:1.18
	gdb_s390-2001-09-26-branch:1.18.0.4
	gdb_s390-2001-09-26-branchpoint:1.18
	gdb_5_1-2001-07-29-branch:1.18.0.2
	gdb_5_1-2001-07-29-branchpoint:1.18
	dberlin-typesystem-branch:1.17.0.2
	dberlin-typesystem-branchpoint:1.17
	gdb-post-ptid_t-2001-05-03:1.17
	gdb-pre-ptid_t-2001-05-03:1.17
	insight-precleanup-2001-01-01:1.16
	gdb-post-protoization-2000-07-29:1.12
	gdb-pre-protoization-2000-07-29:1.12
	gdb-premipsmulti-2000-06-06-branch:1.9.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.9
	gdb-post-params-removal-2000-06-04:1.9
	gdb-pre-params-removal-2000-06-04:1.8
	gdb-post-params-removal-2000-05-28:1.8
	gdb-pre-params-removal-2000-05-28:1.7
	gdb_5_0-2000-05-19-release:1.3.2.1
	gdb_4_18_2-2000-05-18-release:1.3.2.1
	gdb_4_95_1-2000-05-11-snapshot:1.3.2.1
	gdb_4_95_0-2000-04-27-snapshot:1.3.2.1
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3
	repo-unification-2000-02-06:1.1.1.4
	insight-2000-02-04:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.3
	gdb-1999-12-07:1.1.1.3
	gdb-1999-12-06:1.1.1.3
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.3
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.87
date	2013.03.13.18.34.53;	author palves;	state Exp;
branches;
next	1.86;

1.86
date	2013.03.05.14.23.23;	author qiyao;	state Exp;
branches;
next	1.85;

1.85
date	2013.01.14.21.03.54;	author tromey;	state Exp;
branches;
next	1.84;

1.84
date	2013.01.01.06.32.40;	author brobecke;	state Exp;
branches;
next	1.83;

1.83
date	2012.11.20.21.02.34;	author vapier;	state Exp;
branches;
next	1.82;

1.82
date	2012.09.17.08.42.09;	author qiyao;	state Exp;
branches;
next	1.81;

1.81
date	2012.07.19.16.01.13;	author qiyao;	state Exp;
branches;
next	1.80;

1.80
date	2012.06.13.15.47.14;	author tromey;	state Exp;
branches;
next	1.79;

1.79
date	2012.06.13.15.41.23;	author tromey;	state Exp;
branches;
next	1.78;

1.78
date	2012.01.28.18.08.17;	author jkratoch;	state Exp;
branches;
next	1.77;

1.77
date	2012.01.05.11.39.31;	author palves;	state Exp;
branches;
next	1.76;

1.76
date	2012.01.04.08.17.00;	author brobecke;	state Exp;
branches;
next	1.75;

1.75
date	2011.10.09.22.21.42;	author devans;	state Exp;
branches
	1.75.2.1;
next	1.74;

1.74
date	2011.02.14.23.41.33;	author msnyder;	state Exp;
branches;
next	1.73;

1.73
date	2011.01.31.16.52.34;	author tromey;	state Exp;
branches;
next	1.72;

1.72
date	2011.01.05.22.22.47;	author msnyder;	state Exp;
branches;
next	1.71;

1.71
date	2011.01.01.15.32.59;	author brobecke;	state Exp;
branches;
next	1.70;

1.70
date	2010.12.31.22.59.52;	author msnyder;	state Exp;
branches;
next	1.69;

1.69
date	2010.12.29.02.11.04;	author msnyder;	state Exp;
branches;
next	1.68;

1.68
date	2010.05.02.23.52.13;	author jkratoch;	state Exp;
branches;
next	1.67;

1.67
date	2010.01.01.07.31.30;	author brobecke;	state Exp;
branches;
next	1.66;

1.66
date	2009.11.20.17.23.38;	author msnyder;	state Exp;
branches;
next	1.65;

1.65
date	2009.08.13.14.56.19;	author palves;	state Exp;
branches;
next	1.64;

1.64
date	2009.08.07.20.44.14;	author tromey;	state Exp;
branches;
next	1.63;

1.63
date	2009.05.12.16.51.12;	author palves;	state Exp;
branches;
next	1.62;

1.62
date	2009.02.06.21.33.58;	author bauermann;	state Exp;
branches;
next	1.61;

1.61
date	2009.01.23.18.47.45;	author palves;	state Exp;
branches;
next	1.60;

1.60
date	2009.01.03.05.57.51;	author brobecke;	state Exp;
branches;
next	1.59;

1.59
date	2008.12.10.01.05.14;	author tromey;	state Exp;
branches;
next	1.58;

1.58
date	2008.01.01.22.53.09;	author drow;	state Exp;
branches;
next	1.57;

1.57
date	2007.08.23.18.08.27;	author brobecke;	state Exp;
branches;
next	1.56;

1.56
date	2007.01.09.17.58.50;	author drow;	state Exp;
branches;
next	1.55;

1.55
date	2006.10.31.11.45.41;	author vprus;	state Exp;
branches;
next	1.54;

1.54
date	2005.12.17.22.33.59;	author eliz;	state Exp;
branches;
next	1.53;

1.53
date	2005.05.26.20.48.57;	author cagney;	state Exp;
branches;
next	1.52;

1.52
date	2005.02.21.17.14.02;	author cagney;	state Exp;
branches;
next	1.51;

1.51
date	2005.02.21.07.15.47;	author cagney;	state Exp;
branches;
next	1.50;

1.50
date	2005.02.21.03.25.56;	author cagney;	state Exp;
branches;
next	1.49;

1.49
date	2005.02.18.20.57.15;	author cagney;	state Exp;
branches;
next	1.48;

1.48
date	2005.02.17.15.00.31;	author cagney;	state Exp;
branches;
next	1.47;

1.47
date	2005.02.17.13.49.49;	author cagney;	state Exp;
branches;
next	1.46;

1.46
date	2005.02.16.17.20.58;	author cagney;	state Exp;
branches;
next	1.45;

1.45
date	2005.02.10.17.32.47;	author cagney;	state Exp;
branches;
next	1.44;

1.44
date	2005.02.09.23.14.59;	author cagney;	state Exp;
branches;
next	1.43;

1.43
date	2005.01.05.15.43.44;	author cagney;	state Exp;
branches;
next	1.42;

1.42
date	2004.10.30.17.10.14;	author cagney;	state Exp;
branches;
next	1.41;

1.41
date	2004.07.28.19.42.00;	author cagney;	state Exp;
branches;
next	1.40;

1.40
date	2004.07.28.17.26.26;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2004.07.26.14.52.59;	author cagney;	state Exp;
branches;
next	1.38;

1.38
date	2004.05.07.13.35.50;	author cagney;	state Exp;
branches;
next	1.37;

1.37
date	2003.10.24.17.37.03;	author cagney;	state Exp;
branches
	1.37.6.1;
next	1.36;

1.36
date	2003.08.09.15.10.08;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2002.07.03.17.35.20;	author hunt;	state Exp;
branches
	1.35.8.1
	1.35.10.1
	1.35.38.1
	1.35.44.1;
next	1.34;

1.34
date	2002.06.26.20.58.16;	author tromey;	state Exp;
branches;
next	1.33;

1.33
date	2002.06.15.22.05.32;	author cagney;	state Exp;
branches;
next	1.32;

1.32
date	2002.06.15.21.07.57;	author cagney;	state Exp;
branches;
next	1.31;

1.31
date	2002.06.15.19.54.25;	author cagney;	state Exp;
branches;
next	1.30;

1.30
date	2002.06.15.18.45.31;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2002.03.24.00.40.35;	author cagney;	state Exp;
branches
	1.29.4.1
	1.29.6.1;
next	1.28;

1.28
date	2002.03.19.02.19.16;	author cagney;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.18.02.26.31;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2002.03.17.19.53.38;	author cagney;	state Exp;
branches;
next	1.25;

1.25
date	2002.03.06.06.28.33;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.23.21.30.23;	author jimb;	state Exp;
branches;
next	1.23;

1.23
date	2002.02.23.20.12.13;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2002.02.05.04.37.21;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.02.00.56.34;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2001.11.22.00.23.11;	author tromey;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.30.16.16.16;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.16.14.46.34;	author ezannoni;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.06.08.21.06;	author kevinb;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.21.16.08.52;	author fnasser;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.01.18.01.38;	author fnasser;	state Exp;
branches;
next	1.14;

1.14
date	2000.11.20.03.37.09;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.06.22.44.34;	author fnasser;	state Exp;
branches;
next	1.12;

1.12
date	2000.06.23.08.12.27;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.10.01.32.12;	author kevinb;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.08.00.52.56;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.04.00.41.09;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.28.01.12.26;	author kevinb;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.16.03.03.13;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.21.05.21.55;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.20.23.51.01;	author glen;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.10.15.07.37;	author fnasser;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.03.15.17.37;	author eliz;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.03.23.23.43.19;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.33.58;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.75.2.1
date	2012.01.06.04.43.06;	author brobecke;	state Exp;
branches;
next	;

1.37.6.1
date	2004.09.16.17.00.55;	author drow;	state Exp;
branches;
next	;

1.35.8.1
date	2003.09.17.21.28.08;	author carlton;	state Exp;
branches;
next	1.35.8.2;

1.35.8.2
date	2003.11.11.23.50.39;	author carlton;	state Exp;
branches;
next	;

1.35.10.1
date	2003.12.14.20.27.08;	author drow;	state Exp;
branches;
next	;

1.35.38.1
date	2003.06.03.20.54.33;	author cagney;	state Exp;
branches;
next	;

1.35.44.1
date	2003.08.09.15.10.35;	author cagney;	state Exp;
branches;
next	;

1.29.4.1
date	2002.06.21.16.19.22;	author cagney;	state Exp;
branches;
next	1.29.4.2;

1.29.4.2
date	2002.06.28.23.19.25;	author cagney;	state Exp;
branches;
next	1.29.4.3;

1.29.4.3
date	2002.07.03.18.43.57;	author cagney;	state Exp;
branches;
next	;

1.29.6.1
date	2002.06.20.01.32.15;	author kseitz;	state Exp;
branches;
next	1.29.6.2;

1.29.6.2
date	2002.07.22.21.46.56;	author kseitz;	state Exp;
branches;
next	;

1.3.2.1
date	2000.04.11.18.28.57;	author fnasser;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.33.58;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.04.59;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.09.28.21.52.00;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.02.02.00.21.05;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.87
log
@Constify strings in tracepoint.c, lookup_cmd and the completers.

This is sort of a continuation of Keith's parse_exp_1 constification
patch.  It started out by undoing these bits:

  @@@@ -754,9 +754,12 @@@@ validate_actionline (char **line, struct
   	  tmp_p = p;
   	  for (loc = t->base.loc; loc; loc = loc->next)
   	    {
  -	      p = tmp_p;
  -	      exp = parse_exp_1 (&p, loc->address,
  +	      const char *q;
  +
  +	      q = tmp_p;
  +	      exp = parse_exp_1 (&q, loc->address,
   				 block_for_pc (loc->address), 1);
  +	      p = (char *) q;

and progressively making more things const upwards, fixing fallout,
rinse repeat, until GDB built again (--enable-targets=all).

That ended up constifying lookup_cmd/add_cmd and (lots of) friends,
and the completers.

I didn't try to constify the command hooks themselves, because I know
upfront there are commands that write to the command string argument,
and I think I managed to stop at a nice non-hacky split point already.

I think the only non-really-super-obvious changes are
tracepoint.c:validate_actionline, and tracepoint.c:trace_dump_actions.

The rest is just mostly about 'char *' => 'const char *', 'char **'=>
'const char **', and the occasional (e.g., deprecated_cmd_warning)
case of 'char **'=> 'const char *', where/when I noticed that nothing
actually cares about the pointer to pointer output.

Tested on x86_64 Fedora 17, native and gdbserver.

gdb/
2013-03-13  Pedro Alves  <palves@@redhat.com>

	* ada-lang.c (struct add_partial_datum) <text, text0, word>: Make
	fields const.
	(ada_make_symbol_completion_list): Make "text0" parameter const.
	* ax-gdb.c (agent_eval_command_one): Make "exp" parameter const.
	* breakpoint.c (condition_completer): Make "text" and "word"
	parameters const.  Adjust.
	(check_tracepoint_command): Adjust to validate_actionline
	prototype change.
	(catch_syscall_completer): Make "text" and "word" parameters
	const.
	* cli/cli-cmds.c (show_user): Make "comname" local const.
	(valid_command_p): Make "command" parameter const.
	(alias_command): Make "alias_prefix" and "command_prefix" locals
	const.
	* cli/cli-decode.c (add_cmd): Make "name" parameter const.
	(add_alias_cmd): Make "name" and "oldname" parameters const.
	Adjust.  No longer make copy of OLDNAME.
	(add_prefix_cmd, add_abbrev_prefix_cmd, add_set_or_show_cmd)
	(add_setshow_cmd_full, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_string_noescape_cmd)
	(add_setshow_optional_filename_cmd, add_setshow_integer_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd)
	(add_setshow_zuinteger_unlimited_cmd, add_setshow_zuinteger_cmd)
	(delete_cmd, add_info, add_info_alias, add_com, add_com_alias):
	Make "name" parameter const.
	(help_cmd): Rename "command" parameter to "arg".  New const local
	"command".
	(find_cmd): Make "command" parameter const.
	(lookup_cmd_1): Make "text" parameter pointer to const.  Adjust to
	deprecated_cmd_warning prototype change.
	(undef_cmd_error): Make "cmdtype" parameter const.
	(lookup_cmd): Make "line" parameter const.
	(deprecated_cmd_warning): Change type of "text" parameter to
	pointer to const char, from pointer to pointer to char.  Adjust.
	(lookup_cmd_composition): Make "text" parameter const.
	(complete_on_cmdlist, complete_on_enum): Make "text" and "word"
	parameters const.
	* cli/cli-decode.h (struct cmd_list_element) <name>: Make field
	const.
	* cli/cli-script.c (validate_comname): Make "tem" local const.
	(define_command): New const local "tem_c".  Use it in calls to
	lookup_cmd.
	(document_command): Make "tem" and "comfull" locals const.
	(show_user_1): Make "prefix" and "name" parameters const.
	* cli-script.h (show_user_1): Make "prefix" and "name" parameters
	const.
	* command.h (add_cmd, add_alias_cmd, add_prefix_cmd)
	(add_abbrev_prefix_cmd, completer_ftype, lookup_cmd, lookup_cmd_1)
	(deprecated_cmd_warning, lookup_cmd_composition, add_com)
	(add_com_alias, add_info, add_info_alias, complete_on_cmdlist)
	(complete_on_enum, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_string_noescape_cmd)
	(add_setshow_optional_filename_cmd, add_setshow_integer_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd)
	(add_setshow_zuinteger_cmd, add_setshow_zuinteger_unlimited_cmd):
	Change prototypes, constifying strings.
	* completer.c (noop_completer, filename_completer): Make "text"
	and "prefix" parameters const.
	(location_completer, expression_completer)
	(complete_line_internal): Make "text" and "prefix" parameters
	const and adjust.
	(command_completer, signal_completer): Make "text" and "prefix"
	parameters const.
	* completer.h (noop_completer, filename_completer)
	(expression_completer, location_completer, command_completer)
	(signal_completer): Change prototypes.
	* corefile.c (complete_set_gnutarget): Make "text" and "word"
	parameters const.
	* cp-abi.c (cp_abi_completer): Likewise.
	* expression.h (parse_expression_for_completion): Change
	prototype.
	* f-lang.c (f_make_symbol_completion_list): Make "text" and "word"
	parameters const.
	* infcmd.c (_initialize_infcmd): Make "cmd_name" local const.
	* infrun.c (handle_completer): Make "text" and "word" parameters
	const.
	* interps.c (interpreter_completer): Make "text" and "word"
	parameters const.
	* language.h (struct language_defn)
	<la_make_symbol_completion_list>: Make "text" and "word"
	parameters const.
	* parse.c (parse_exp_1): Move const hack to parse_exp_in_context.
	(parse_exp_in_context): Rename to ...
	(parse_exp_in_context_1): ... this.
	(parse_exp_in_context): Reimplement, with const hack from
	parse_exp_1.
	(parse_expression_for_completion): Make "string" parameter const.
	* printcmd.c (decode_format): Make "string_ptr" parameter pointer
	to pointer to const char.  Adjust.
	(print_command_1): Make "exp" parameter const.
	(output_command): Rename to ...
	(output_command_const): ... this.  Make "exp" parameter const.
	(output_command): Reimplement.
	(x_command): Adjust.
	(display_command): Rename "exp" parameter to "arg".  New "exp"
	local, const version of "arg".
	* python/py-auto-load.c (gdbpy_initialize_auto_load): Make
	"cmd_name" local const.
	* python/py-cmd.c (cmdpy_destroyer): Cast const away in xfree
	call.
	(cmdpy_completer): Make "text" and "word" parameters const.
	(gdbpy_parse_command_name): Make "prefix_text2" local const.
	* python/py-param.c (add_setshow_generic): Make "tmp_name" local
	const.
	* remote.c (_initialize_remote): Make "cmd_name" local const.
	* symtab.c (language_search_unquoted_string): Make "text" and "p"
	parameters const.  Adjust.
	(completion_list_add_fields): Make "sym_text", "text" and "word"
	parameters const.
	(struct add_name_data) <sym_text, text, word>: Make fields const.
	(default_make_symbol_completion_list_break_on): Make "text" and
	"word" parameters const.  Adjust locals.
	(default_make_symbol_completion_list)
	(make_symbol_completion_list, make_symbol_completion_type)
	(make_symbol_completion_list_fn): Make "text" and "word"
	parameters const.
	(make_file_symbol_completion_list): Make "text", "word" and
	"srcfile" parameters const.  Adjust locals.
	(add_filename_to_list): Make "text" and "word" parameters const.
	(struct add_partial_filename_data) <text, word>: Make fields
	const.
	(make_source_files_completion_list): Make "text" and "word"
	parameters const.
	* symtab.h (default_make_symbol_completion_list_break_on)
	(default_make_symbol_completion_list, make_symbol_completion_list)
	(make_symbol_completion_type enum type_code)
	(make_symbol_completion_list_fn make_file_symbol_completion_list)
	(make_source_files_completion_list): Change prototype.
	* top.c (execute_command): Adjust to pass pointer to pointer to
	const char to lookup_cmd, and to deprecated_cmd_warning prototype
	change.
	(set_verbose): Make "cmdname" local const.
	* tracepoint.c (decode_agent_options): Make "exp" parameter const,
	and adjust.
	(validate_actionline): Make "line" parameter a pointer to const
	char, and adjust.
	(encode_actions_1): Make "action_exp" local const, and adjust.
	(encode_actions): Adjust.
	(replace_comma): Delete.
	(trace_dump_actions): Make "action_exp" and "next_comma" locals
	const, and adjust.  Don't frob the action string while splitting
	it at commas.  Instead, make a copy of each split substring in
	turn.
	(trace_dump_command): Adjust to validate_actionline prototype
	change.
	* tracepoint.h (decode_agent_options, decode_agent_options)
	(encode_actions, validate_actionline): Change prototypes.
	* valprint.h (output_command): Delete declaration.
	(output_command_const): Declare.
	* value.c (function_destroyer): Cast const away in xfree call.
@
text
@/* Header file for command creation.

   Copyright (C) 1986-2013 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#if !defined (COMMAND_H)
#define COMMAND_H 1

#include "gdb_vecs.h"

/* This file defines the public interface for any code wanting to
   create commands.  */

/* Command classes are top-level categories into which commands are
   broken down for "help" purposes.

   Notes on classes: class_alias is for alias commands which are not
   abbreviations of the original command.  class-pseudo is for
   commands which are not really commands nor help topics ("stop").  */

enum command_class
{
  /* Special args to help_list */
  class_deprecated = -3, all_classes = -2, all_commands = -1,
  /* Classes of commands */
  no_class = -1, class_run = 0, class_vars, class_stack, class_files,
  class_support, class_info, class_breakpoint, class_trace,
  class_alias, class_bookmark, class_obscure, class_maintenance,
  class_pseudo, class_tui, class_user, class_xdb,
  no_set_class	/* Used for "show" commands that have no corresponding
		   "set" command.  */
};

/* FIXME: cagney/2002-03-17: Once cmd_type() has been removed, ``enum
   cmd_types'' can be moved from "command.h" to "cli-decode.h".  */
/* Not a set/show command.  Note that some commands which begin with
   "set" or "show" might be in this category, if their syntax does
   not fall into one of the following categories.  */
typedef enum cmd_types
  {
    not_set_cmd,
    set_cmd,
    show_cmd
  }
cmd_types;

/* Types of "set" or "show" command.  */
typedef enum var_types
  {
    /* "on" or "off".  *VAR is an integer which is nonzero for on,
       zero for off.  */
    var_boolean,

    /* "on" / "true" / "enable" or "off" / "false" / "disable" or
       "auto.  *VAR is an ``enum auto_boolean''.  NOTE: In general a
       custom show command will need to be implemented - one that for
       "auto" prints both the "auto" and the current auto-selected
       value.  */
    var_auto_boolean,

    /* Unsigned Integer.  *VAR is an unsigned int.  The user can type
       0 to mean "unlimited", which is stored in *VAR as UINT_MAX.  */
    var_uinteger,

    /* Like var_uinteger but signed.  *VAR is an int.  The user can
       type 0 to mean "unlimited", which is stored in *VAR as
       INT_MAX.  The only remaining use of it is the Python API.
       Don't use it elsewhere.  */
    var_integer,

    /* String which the user enters with escapes (e.g. the user types
       \n and it is a real newline in the stored string).
       *VAR is a malloc'd string, or NULL if the string is empty.  */
    var_string,
    /* String which stores what the user types verbatim.
       *VAR is a malloc'd string, or NULL if the string is empty.  */
    var_string_noescape,
    /* String which stores a filename.  (*VAR) is a malloc'd string,
       or "" if the string was empty.  */
    var_optional_filename,
    /* String which stores a filename.  (*VAR) is a malloc'd
       string.  */
    var_filename,
    /* ZeroableInteger.  *VAR is an int.  Like var_integer except
       that zero really means zero.  */
    var_zinteger,
    /* ZeroableUnsignedInteger.  *VAR is an unsigned int.  Zero really
       means zero.  */
    var_zuinteger,
    /* ZeroableUnsignedInteger with unlimited value.  *VAR is an int,
       but its range is [0, INT_MAX].  -1 stands for unlimited and
       other negative numbers are not allowed.  */
    var_zuinteger_unlimited,
    /* Enumerated type.  Can only have one of the specified values.
       *VAR is a char pointer to the name of the element that we
       find.  */
    var_enum
  }
var_types;

/* This structure records one command'd definition.  */
struct cmd_list_element;

/* Forward-declarations of the entry-points of cli/cli-decode.c.  */

/* API to the manipulation of command lists.  */

extern int valid_user_defined_cmd_name_p (const char *name);

extern struct cmd_list_element *add_cmd (const char *, enum command_class,
					 void (*fun) (char *, int), char *,
					 struct cmd_list_element **);

extern struct cmd_list_element *add_alias_cmd (const char *, const char *,
					       enum command_class, int,
					       struct cmd_list_element **);

extern struct cmd_list_element *add_prefix_cmd (const char *, enum command_class,
						void (*fun) (char *, int),
						char *,
						struct cmd_list_element **,
						char *, int,
						struct cmd_list_element **);

extern struct cmd_list_element *add_abbrev_prefix_cmd (const char *,
						       enum command_class,
						       void (*fun) (char *,
								    int),
						       char *,
						       struct cmd_list_element
						       **, char *, int,
						       struct cmd_list_element
						       **);

/* Set the commands corresponding callback.  */

typedef void cmd_cfunc_ftype (char *args, int from_tty);
extern void set_cmd_cfunc (struct cmd_list_element *cmd,
			   cmd_cfunc_ftype *cfunc);

typedef void cmd_sfunc_ftype (char *args, int from_tty,
			      struct cmd_list_element *c);
extern void set_cmd_sfunc (struct cmd_list_element *cmd,
			   cmd_sfunc_ftype *sfunc);

typedef VEC (char_ptr) *completer_ftype (struct cmd_list_element *,
					 const char *, const char *);

extern void set_cmd_completer (struct cmd_list_element *, completer_ftype *);

/* HACK: cagney/2002-02-23: Code, mostly in tracepoints.c, grubs
   around in cmd objects to test the value of the commands sfunc().  */
extern int cmd_cfunc_eq (struct cmd_list_element *cmd,
			 void (*cfunc) (char *args, int from_tty));

/* Each command object has a local context attached to it.  */
extern void set_cmd_context (struct cmd_list_element *cmd,
			     void *context);
extern void *get_cmd_context (struct cmd_list_element *cmd);


/* Execute CMD's pre/post hook.  Throw an error if the command fails.
   If already executing this pre/post hook, or there is no pre/post
   hook, the call is silently ignored.  */
extern void execute_cmd_pre_hook (struct cmd_list_element *cmd);
extern void execute_cmd_post_hook (struct cmd_list_element *cmd);

/* Return the type of the command.  */
extern enum cmd_types cmd_type (struct cmd_list_element *cmd);

/* Flag for an ambiguous cmd_list result.  */
#define CMD_LIST_AMBIGUOUS ((struct cmd_list_element *) -1)

extern struct cmd_list_element *lookup_cmd (const char **,
					    struct cmd_list_element *, char *,
					    int, int);

extern struct cmd_list_element *lookup_cmd_1 (const char **,
					      struct cmd_list_element *,
					      struct cmd_list_element **,
					      int);

extern struct cmd_list_element *deprecate_cmd (struct cmd_list_element *,
					       char * );

extern void deprecated_cmd_warning (const char *);

extern int lookup_cmd_composition (const char *text,
				   struct cmd_list_element **alias,
				   struct cmd_list_element **prefix_cmd,
				   struct cmd_list_element **cmd);

extern struct cmd_list_element *add_com (const char *, enum command_class,
					 void (*fun) (char *, int),
					 char *);

extern struct cmd_list_element *add_com_alias (const char *, const char *,
					       enum command_class, int);

extern struct cmd_list_element *add_info (const char *,
					  void (*fun) (char *, int),
					  char *);

extern struct cmd_list_element *add_info_alias (const char *, char *, int);

extern VEC (char_ptr) *complete_on_cmdlist (struct cmd_list_element *,
					    const char *, const char *, int);

extern VEC (char_ptr) *complete_on_enum (const char *const *enumlist,
					 const char *, const char *);

/* Functions that implement commands about CLI commands.  */

extern void help_list (struct cmd_list_element *, char *,
		       enum command_class, struct ui_file *);

/* Method for show a set/show variable's VALUE on FILE.  If this
   method isn't supplied deprecated_show_value_hack() is called (which
   is not good).  */
typedef void (show_value_ftype) (struct ui_file *file,
				 int from_tty,
				 struct cmd_list_element *cmd,
				 const char *value);
/* NOTE: i18n: This function is not i18n friendly.  Callers should
   instead print the value out directly.  */
extern show_value_ftype deprecated_show_value_hack;

extern void add_setshow_enum_cmd (const char *name,
				  enum command_class class,
				  const char *const *enumlist,
				  const char **var,
				  const char *set_doc,
				  const char *show_doc,
				  const char *help_doc,
				  cmd_sfunc_ftype *set_func,
				  show_value_ftype *show_func,
				  struct cmd_list_element **set_list,
				  struct cmd_list_element **show_list);

extern void add_setshow_auto_boolean_cmd (const char *name,
					  enum command_class class,
					  enum auto_boolean *var,
					  const char *set_doc,
					  const char *show_doc,
					  const char *help_doc,
					  cmd_sfunc_ftype *set_func,
					  show_value_ftype *show_func,
					  struct cmd_list_element **set_list,
					  struct cmd_list_element **show_list);

extern void add_setshow_boolean_cmd (const char *name,
				     enum command_class class,
				     int *var,
				     const char *set_doc, const char *show_doc,
				     const char *help_doc,
				     cmd_sfunc_ftype *set_func,
				     show_value_ftype *show_func,
				     struct cmd_list_element **set_list,
				     struct cmd_list_element **show_list);

extern void add_setshow_filename_cmd (const char *name,
				      enum command_class class,
				      char **var,
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      cmd_sfunc_ftype *set_func,
				      show_value_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

extern void add_setshow_string_cmd (const char *name,
				    enum command_class class,
				    char **var,
				    const char *set_doc,
				    const char *show_doc,
				    const char *help_doc,
				    cmd_sfunc_ftype *set_func,
				    show_value_ftype *show_func,
				    struct cmd_list_element **set_list,
				    struct cmd_list_element **show_list);

extern struct cmd_list_element *add_setshow_string_noescape_cmd
		      (const char *name,
		       enum command_class class,
		       char **var,
		       const char *set_doc,
		       const char *show_doc,
		       const char *help_doc,
		       cmd_sfunc_ftype *set_func,
		       show_value_ftype *show_func,
		       struct cmd_list_element **set_list,
		       struct cmd_list_element **show_list);

extern void add_setshow_optional_filename_cmd (const char *name,
					       enum command_class class,
					       char **var,
					       const char *set_doc,
					       const char *show_doc,
					       const char *help_doc,
					       cmd_sfunc_ftype *set_func,
					       show_value_ftype *show_func,
					       struct cmd_list_element **set_list,
					       struct cmd_list_element **show_list);

extern void add_setshow_integer_cmd (const char *name,
				     enum command_class class,
				     int *var,
				     const char *set_doc,
				     const char *show_doc,
				     const char *help_doc,
				     cmd_sfunc_ftype *set_func,
				     show_value_ftype *show_func,
				     struct cmd_list_element **set_list,
				     struct cmd_list_element **show_list);

extern void add_setshow_uinteger_cmd (const char *name,
				      enum command_class class,
				      unsigned int *var,
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      cmd_sfunc_ftype *set_func,
				      show_value_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

extern void add_setshow_zinteger_cmd (const char *name,
				      enum command_class class,
				      int *var,
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      cmd_sfunc_ftype *set_func,
				      show_value_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

extern void add_setshow_zuinteger_cmd (const char *name,
				       enum command_class class,
				       unsigned int *var,
				       const char *set_doc,
				       const char *show_doc,
				       const char *help_doc,
				       cmd_sfunc_ftype *set_func,
				       show_value_ftype *show_func,
				       struct cmd_list_element **set_list,
				       struct cmd_list_element **show_list);

extern void
  add_setshow_zuinteger_unlimited_cmd (const char *name,
				       enum command_class class,
				       int *var,
				       const char *set_doc,
				       const char *show_doc,
				       const char *help_doc,
				       cmd_sfunc_ftype *set_func,
				       show_value_ftype *show_func,
				       struct cmd_list_element **set_list,
				       struct cmd_list_element **show_list);

/* Do a "show" command for each thing on a command list.  */

extern void cmd_show_list (struct cmd_list_element *, int, char *);

/* Used everywhere whenever at least one parameter is required and
   none is specified.  */

extern void error_no_arg (char *) ATTRIBUTE_NORETURN;

extern void dont_repeat (void);

extern struct cleanup *prevent_dont_repeat (void);

/* Used to mark commands that don't do anything.  If we just leave the
   function field NULL, the command is interpreted as a help topic, or
   as a class of commands.  */

extern void not_just_help_class_command (char *, int);

/* Check function pointer.  */
extern int cmd_func_p (struct cmd_list_element *cmd);

/* Call the command function.  */
extern void cmd_func (struct cmd_list_element *cmd,
		      char *args, int from_tty);

#endif /* !defined (COMMAND_H) */
@


1.86
log
@gdb/
	* cli/cli-decode.c (add_setshow_zuinteger_unlimited_cmd): Change
	parameter VAR's type from "unsigned int" to "int".
	* command.h (var_zuinteger_unlimited): Update its comments.
	(add_setshow_zuinteger_unlimited_cmd): Update the declaration.
@
text
@d122 1
a122 1
extern struct cmd_list_element *add_cmd (char *, enum command_class,
d126 1
a126 1
extern struct cmd_list_element *add_alias_cmd (char *, char *,
d130 1
a130 1
extern struct cmd_list_element *add_prefix_cmd (char *, enum command_class,
d137 1
a137 1
extern struct cmd_list_element *add_abbrev_prefix_cmd (char *,
d159 1
a159 1
					 char *, char *);
d186 1
a186 1
extern struct cmd_list_element *lookup_cmd (char **,
d190 1
a190 1
extern struct cmd_list_element *lookup_cmd_1 (char **,
d198 1
a198 1
extern void deprecated_cmd_warning (char **);
d200 1
a200 1
extern int lookup_cmd_composition (char *text,
d205 1
a205 1
extern struct cmd_list_element *add_com (char *, enum command_class,
d209 1
a209 1
extern struct cmd_list_element *add_com_alias (char *, char *,
d212 1
a212 1
extern struct cmd_list_element *add_info (char *,
d216 1
a216 1
extern struct cmd_list_element *add_info_alias (char *, char *, int);
d219 1
a219 1
					    char *, char *, int);
d222 1
a222 1
					 char *, char *);
d240 1
a240 1
extern void add_setshow_enum_cmd (char *name,
d252 1
a252 1
extern void add_setshow_auto_boolean_cmd (char *name,
d263 1
a263 1
extern void add_setshow_boolean_cmd (char *name,
d273 1
a273 1
extern void add_setshow_filename_cmd (char *name,
d284 1
a284 1
extern void add_setshow_string_cmd (char *name,
d296 1
a296 1
		      (char *name,
d307 1
a307 1
extern void add_setshow_optional_filename_cmd (char *name,
d318 1
a318 1
extern void add_setshow_integer_cmd (char *name,
d329 1
a329 1
extern void add_setshow_uinteger_cmd (char *name,
d340 1
a340 1
extern void add_setshow_zinteger_cmd (char *name,
d351 1
a351 1
extern void add_setshow_zuinteger_cmd (char *name,
d363 1
a363 1
  add_setshow_zuinteger_unlimited_cmd (char *name,
@


1.85
log
@	* cli/cli-decode.c (add_setshow_string_noescape_cmd): Return the
	set command.
	* command.h (add_setshow_string_noescape_cmd): Update.
	* corefile.c (set_gnutarget_command): Remove trailing whitespace.
	(complete_set_gnutarget): New function.
	(_initialize_core): Set the "set gnutarget" completer.
gdb/testsuite
	* gdb.base/completion.exp: Add "set gnutarget" test.
@
text
@d102 3
a104 2
    /* ZeroableUnsignedInteger with unlimited value.  *VAR is an unsigned
       int, but its range is [0, INT_MAX].  -1 stands for unlimited.  */
d365 1
a365 1
				       unsigned int *var,
@


1.84
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d294 11
a304 10
extern void add_setshow_string_noescape_cmd (char *name,
					     enum command_class class,
					     char **var,
					     const char *set_doc,
					     const char *show_doc,
					     const char *help_doc,
					     cmd_sfunc_ftype *set_func,
					     show_value_ftype *show_func,
					     struct cmd_list_element **set_list,
					     struct cmd_list_element **show_list);
@


1.83
log
@gdb: include help aliases in help command completion

There are a bunch of aliases that get used with help, but the current
command completion logic does not include those when doing completions.

Since the framework is already mostly in place, extend complete_on_cmdlist
slightly to pass down the ignore_help_classes flag like is done with the
existing lookup command logic.

Now you can do:
	(gdb) help use<tab>
and get back:
	(gdb) help user-defined

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d3 1
a3 2
   Copyright (C) 1986, 1989-1995, 1999-2000, 2002, 2004, 2007-2012 Free
   Software Foundation, Inc.
@


1.82
log
@gdb/
	* cli/cli-decode.c (add_setshow_zuinteger_unlimited_cmd): New.
	Update comment to add_setshow_integer_cmd.
	* cli/cli-setshow.c (do_set_command): Handle case
	'var_zuinteger_unlimited'.
	(do_show_command): Likewise.
	* cli/cli-cmds.c (init_cmds): Call add_setshow_zuinteger_unlimited_cmd
	for command 'remotetimeout'.
	* command.h (enum var_types): New zuinteger_unlimited.  Update comment
	to var_integer.
	* source.c (_initialize_source): Call add_setshow_zuinteger_unlimited_cmd
	for command 'set listsize'.

gdb/doc/
	* gdb.texinfo (List): Describe the meaning of 0 and -1 in
	'set listsize'.

gdb/testsuite/
	* gdb.base/list.exp (set_listsize): Don't set arg to "unlimited"
	when it is less than 0.
@
text
@d219 1
a219 1
					    char *, char *);
@


1.81
log
@gdb/
	* command.h, remote.c: Fix a typo in comment.
@
text
@d80 2
a81 1
       INT_MAX.  */
d103 3
d361 12
@


1.80
log
@	* ada-lang.c (ada_make_symbol_completion_list): Return a VEC.
	* breakpoint.c (catch_syscall_completer): Return a VEC.
	* cli/cli-cmds.c (complete_command): Update.
	* cli/cli-decode.c (complete_on_cmdlist): Return a VEC.
	(complete_on_enum): Likewise.
	* command.h: Include gdb_vecs.h.
	(completer_ftype): Change return type.
	(complete_on_cmdlist, complete_on_enum): Likewise.
	* completer.c (noop_completer, filename_completer)
	(location_completer): Return a VEC.
	(add_struct_fields): Remove 'nextp' argument.  Change 'output'
	to a VEC.
	(expression_completer, complete_line_internal, complete_line)
	(command_completer): Return a VEC.
	(gdb_completion_word_break_characters, line_completion_function):
	Update.
	* completer.h: Include gdb_vecs.h.
	(complete_line, noop_completer, filename_completer)
	(expression_completer, location_completer, command_completer):
	Update.
	* f-lang.c (f_word_break_characters): Return a VEC.
	* interps.c (interpreter_completer): Return a VEC.
	* language.h (struct language_defn)
	<la_make_symbol_completion_list>: Return a VEC.
	* python/py-cmd.c (cmdpy_completer): Return a VEC.
	* symtab.c (free_completion_list): Take a VEC.
	(return_val_size, return_val_index): Remove.
	(return_val): Now a VEC.
	(completion_list_add_name): Update.
	(default_make_symbol_completion_list_break_on)
	(default_make_symbol_completion_list, make_symbol_completion_list)
	(make_symbol_completion_list_fn, make_file_symbol_completion_list):
	Return a VEC.
	(add_filename_to_list): Update.
	(struct add_partial_filename_data) <list_used, list_alloced>: Remove.
	<list>: Now a VEC.
	(maybe_add_partial_symtab_filename): Update.
	(make_source_files_completion_list): Return a VEC.
	* symtab.h (default_make_symbol_completion_list_break_on)
	(default_make_symbol_completion_list, make_symbol_completion_list)
	(make_symbol_completion_list_fn, make_file_symbol_completion_list)
	(make_source_files_completion_list): Update.
@
text
@d96 1
a96 1
    /* ZeroableInteger.  *VAR is an int.  Like Unsigned Integer except
@


1.79
log
@	* breakpoint.c (add_catch_command): Use completer_ftype.
	* breakpoint.h: Include command.h.
	(add_catch_command): Use completer_ftype.
	* cli/cli-decode.c (set_cmd_completer): Use completer_ftype.
	* cli/cli-decode.h (struct cmd_list_element) <completer>:
	Use completer_ftype.
	* command.h (completer_ftype): New typedef.
	(set_cmd_completer): Use it.
	* python/py-cmd.c (struct cmdpy_completer) <completer>: Use
	completer_ftype.
@
text
@d22 2
d154 2
a155 1
typedef char **completer_ftype (struct cmd_list_element *, char *, char *);
d214 2
a215 2
extern char **complete_on_cmdlist (struct cmd_list_element *,
				   char *, char *);
d217 2
a218 2
extern char **complete_on_enum (const char *const *enumlist,
				char *, char *);
@


1.78
log
@gdb/
	Code cleanup: Make 1440 bytes of data segment read-only.
	* arch-utils.c (endian_enum): Make it const char *const [].
	* arm-tdep.c (fp_model_strings, arm_abi_strings, arm_mode_strings):
	Likewise.
	* breakpoint.c (always_inserted_enums): Likewise.
	* cli/cli-cmds.c (script_ext_enums): Likewise.
	* cli/cli-decode.c (add_setshow_enum_cmd, complete_on_enum): Make the
	enumlist parameter const char *const *.
	* cli/cli-decode.h (struct cmd_list_element): Make the enums field
	const char *const *.
	* command.h (complete_on_enum, add_setshow_enum_cmd): Make the enumlist
	parameter const char *const *.
	* cris-tdep.c (cris_modes): Make it const char *const [].
	* filesystem.c (target_file_system_kinds): Likewise.
	* i386-tdep.c (valid_flavors, valid_conventions): Likewise.
	* infrun.c (follow_fork_mode_kind_names, follow_exec_mode_names)
	(can_use_displaced_stepping_enum, scheduler_enums)
	(exec_direction_names): Likewise.
	* language.c (_initialize_language): Make the type_or_range_names and
	case_sensitive_names variables const char *const [].
	* mips-tdep.c (mips_abi_strings): Make it const char *const [].
	* python/python.c (python_excp_enums): Likewise.
	* remote.c (interrupt_sequence_modes): Likewise.
	* rs6000-tdep.c (powerpc_vector_strings): Likewise.
	* serial.c (logbase_enums): Likewise.
	* sh-tdep.c (sh_cc_enum): Likewise.
	* stack.c (print_frame_arguments_choices, print_entry_values_choices):
	Likewise.
	* symtab.c (multiple_symbols_modes): Likewise.
	* tui/tui-win.c (tui_border_kind_enums, tui_border_mode_enums):
	Likewise.
	* utils.c (internal_problem_modes): Likewise.
@
text
@d152 3
a154 3
extern void set_cmd_completer (struct cmd_list_element *,
			       char **(*completer) (struct cmd_list_element *,
						    char *, char *));
@


1.77
log
@2012-01-05  Pedro Alves  <alves.ped@@gmail.com>

	* cli/cli-decode.h: Add comments.
	(CMD_LIST_AMBIGUOUS): Moved to command.h
	(add_cmd, add_alias_cmd, add_prefix_cmd, add_abbrev_prefix_cmd)
	(set_cmd_cfunc, set_cmd_sfunc, set_cmd_completer, cmd_cfunc_eq)
	(set_cmd_context, get_cmd_context, lookup_cmd, lookup_cmd_1)
	(deprecate_cmd, deprecated_cmd_warning, lookup_cmd_composition)
	(add_com, add_com_alias, add_info, add_info_alias)
	(complete_on_cmdlist, complete_on_enum, help_list): Remove
	declarations.
	* command.h: Add and adjust comments.
	(CMD_LIST_AMBIGUOUS): Moved here.
	(help_cmd, help_cmd_list): Delete declarations.
@
text
@d214 1
a214 1
extern char **complete_on_enum (const char *enumlist[],
d235 1
a235 1
				  const char *enumlist[],
@


1.76
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
/* Header file for command-reading library command.c.
d22 3
d112 2
d176 2
d217 1
a217 1
extern void help_cmd (char *, struct ui_file *);
a221 4
extern void help_cmd_list (struct cmd_list_element *,
			   enum command_class,
			   char *, int, struct ui_file *);

@


1.75
log
@	Add new "alias" command.
	* NEWS: Mention new command.
	* command.h (valid_user_defined_cmd_name_p): Declare.
	* defs.h (make_cleanup_dyn_string_delete): Declare.
	* utils.c: #include "dyn-string.h".
	(do_dyn_string_delete, make_cleanup_dyn_string_delete): New functions.
	* cli/cli-cmds.c: #include "dyn-string.h".
	(argv_to_dyn_string, valid_command_p, alias_command): New functions.
	(init_cli_cmds): Add new command.
	* cli/cli-decode.c (valid_user_defined_cmd_name_p): New function.

	doc/
	* gdb.texinfo (Extending GDB): Document alias command.

	testsuite/
	* gdb.base/alias.exp: Add tests for alias command.
@
text
@d3 2
a4 2
   Copyright (C) 1986, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1999, 2000,
   2002, 2004, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.75.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 2
   Copyright (C) 1986, 1989-1995, 1999-2000, 2002, 2004, 2007-2012 Free
   Software Foundation, Inc.
@


1.74
log
@2011-02-14  Michael Snyder  <msnyder@@vmware.com>

	* command.h (enum command_class): New class 'no_set_class', for
	"show" commands without a corresponding "set" command.
	* value.c (_initialize_values): Use 'no_set_class' for "show values".
	* copying.c (_initialize_copying): Ditto for "show copying" and
	"show warranty".
	* cli/cli-cmds.c (init_cli_cmds): Ditto for "show commands" and
	"show version".
	* cli/cli-setshow.c (cmd_show_list): Skip "show" commands for
	which there is no corresponding "set" command (eg. "show copying").
@
text
@d109 2
@


1.73
log
@	PR python/12216:
	* python/python.c (execute_gdb_command): Call
	prevent_dont_repeat.
	* top.c (suppress_dont_repeat): New global.
	(dont_repeat): Use it.
	(prevent_dont_repeat): New function.
	* command.h (prevent_dont_repeat): Declare.
@
text
@d37 3
a39 1
  class_pseudo, class_tui, class_user, class_xdb
@


1.72
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d358 2
@


1.71
log
@run copyright.sh for 2011.
@
text
@d143 3
a145 3
extern void set_cmd_completer (struct cmd_list_element *cmd,
			       char **(*completer) (struct cmd_list_element *cmd,
						    char *text, char *word));
@


1.70
log
@2010-12-31  Michael Snyder  <msnyder@@vmware.com>

	* charset.c: Comment cleanup and long line wrapping.
	* charset.h: Ditto.
	* c-lang.c: Ditto.
	* c-lang.h: Ditto.
	* coff-pe-read.c: Ditto.
	* coff-pe-read.h: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* complaints.c: Ditto.
	* complaints.h: Ditto.
	* completer.c: Ditto.
	* completer.h: Ditto.
	* corefile.c: Ditto.
	* corelow.c: Ditto.
	* core-regset.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-abi.h: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* cp-support.h: Ditto.
	* cp-valprint.c: Ditto.
	* cp-typeprint.c: Ditto.
	* c-valprint.c: Ditto.
@
text
@d4 1
a4 1
   2002, 2004, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.69
log
@2010-12-28  Michael Snyder  <msnyder@@vmware.com>

	* command.h: Comment clean-up.
	* cli/cli-cmds.c: Ditto.
	* cli/cli-cmds.h: Ditto.
	* cli/cli-decode.c: Ditto.
	* cli/cli-decode.h: Ditto.
	* cli/cli-dump.c: Ditto.
	* cli/cli-interp.c: Ditto.
	* cli/cli-logging.c: Ditto.
	* cli/cli-script.c: Ditto.
	* cli/cli-setshow.c: Ditto.
	* cli/cli-setshow.h: Ditto.
@
text
@d22 3
a24 2
/* Command classes are top-level categories into which commands are broken
   down for "help" purposes.
d34 2
a35 2
  no_class = -1, class_run = 0, class_vars, class_stack,
  class_files, class_support, class_info, class_breakpoint, class_trace,
d67 2
a68 2
    /* Unsigned Integer.  *VAR is an unsigned int.  The user can type 0
       to mean "unlimited", which is stored in *VAR as UINT_MAX.  */
d71 3
a73 2
    /* Like var_uinteger but signed.  *VAR is an int.  The user can type 0
       to mean "unlimited", which is stored in *VAR as INT_MAX.  */
d76 2
a77 2
    /* String which the user enters with escapes (e.g. the user types \n and
       it is a real newline in the stored string).
d95 3
a97 2
    /* Enumerated type.  Can only have one of the specified values.  *VAR is a
       char pointer to the name of the element that we find.  */
d153 2
a154 1
extern void set_cmd_context (struct cmd_list_element *cmd, void *context);
d177 2
a178 2
extern struct cmd_list_element *
  deprecate_cmd (struct cmd_list_element *, char * );
d180 1
a180 2
extern void
  deprecated_cmd_warning (char **);
d182 4
a185 5
extern int
  lookup_cmd_composition (char *text,
                        struct cmd_list_element **alias,
                        struct cmd_list_element **prefix_cmd,
                        struct cmd_list_element **cmd);
d188 2
a189 1
					 void (*fun) (char *, int), char *);
d194 2
a195 1
extern struct cmd_list_element *add_info (char *, void (*fun) (char *, int),
d200 2
a201 1
extern char **complete_on_cmdlist (struct cmd_list_element *, char *, char *);
d203 2
a204 1
extern char **complete_on_enum (const char *enumlist[], char *, char *);
d211 2
a212 1
extern void help_cmd_list (struct cmd_list_element *, enum command_class,
d364 1
a364 1
/* check function pointer */
d367 3
a369 2
/* call the command function */
extern void cmd_func (struct cmd_list_element *cmd, char *args, int from_tty);
@


1.68
log
@gdb/
	* cli/cli-cmds.h (error_no_arg): Remove.  Move the comment ...
	* command.h (error_no_arg): ... here.  Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* defs.h (NORETURN, ATTR_NORETURN): Remove.
	(perror_with_name, verror, error, error_stream, vfatal, fatal)
	(internal_verror, internal_error, nomem): Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* exceptions.c (throw_exception, deprecated_throw_reason, throw_verror)
	(throw_vfatal, throw_error): Remove NORETURN.
	(throw_it): Remove NORETURN, change ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* exceptions.h (throw_exception, throw_verror, throw_vfatal)
	(throw_error, deprecated_throw_reason): Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* linespec.c (cplusplus_error): Remove NORETURN, change ATTR_NORETURN
	to ATTRIBUTE_NORETURN for prototype, for the definition only remove
	NORETURN.
	* remote-mips.c (mips_error): Change NORETURN to ATTRIBUTE_NORETURN.
	* remote-sim.c (gdb_os_error): Change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.
	* target.c (tcomplain): Likewise.
	* target.h (noprocess): Remove NORETURN, change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.
	* utils.c (verror, error, vfatal, fatal, error_stream, internal_verror)
	(internal_error, perror_with_name, nomem): Remove NORETURN.
	* xml-support.h (gdb_xml_error): Change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.

gdb/doc/
	* gdbint.texinfo (Host Definition): Remove items NORETURN and
	ATTR_NORETURN.
@
text
@d23 1
a23 1
   down for "help" purposes.  
d63 1
a63 1
       value. */
d149 1
a149 1
/* Each command object has a local context attached to it. .  */
d345 1
a345 1
   none is specified. */
@


1.67
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d344 4
a347 1
extern NORETURN void error_no_arg (char *) ATTR_NORETURN;
@


1.66
log
@2009-10-25  Michael Snyder  <msnyder@@vmware.com>

        * target.h (struct target_ops): New methods to_get_bookmark
        and to_goto_bookmark.
        (target_get_bookmark): New macro.
        (target_goto_bookmark): New macro.
        * target.c (dummy_get_bookmark): New function, default implementation.
        (dummy_goto_bookmark): New function, default implementation.
        (update_current_target): Inherit new methods.
        * record.c (record_get_bookmark): New function.
        (record_goto_bookmark): New function.
        (init_record_ops): Set to_get_bookmark and to_goto_bookmark methods.
        * reverse.c (struct bookmark): New type.
        (save_bookmark_command): New function (command).
        (delete_bookmark_command): New function (command).
        (goto_bookmark_command): New function (command).
        (bookmarks_info): New function (command).
        (_initialize_reverse): Add new bookmark commands.
	* command.h (enum command_class): Add class_bookmark.
	* NEWS: Mention bookmark commands.
@
text
@d4 1
a4 1
   2002, 2004, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.65
log
@	Revert 2009-08-07 changes for PR gdb/8869:

	* language.c (set_language_command): Strip whitespace.
	(set_type_command): Likewise.
	(set_range_command): Likewise.

	* language.c (language_completer): New function.
	(range_or_type_completer): New function.
	(case_completer): New function.
	(_initialize_language): Set completers.
	* cli/cli-decode.c (add_setshow_string_cmd): Return the "set"
	command.
	(add_setshow_string_noescape_cmd): Likewise.
	(add_setshow_integer_cmd): Likewise.
	(add_setshow_uinteger_cmd): Likewise.
	(add_setshow_zinteger_cmd): Likewise.
	(add_setshow_zuinteger_cmd): Likewise.
	* command.h (add_setshow_string_cmd,
	add_setshow_string_noescape_cmd, add_setshow_uinteger_cmd,
	add_setshow_zinteger_cmd, add_setshow_zuinteger_cmd): Update.
@
text
@d35 2
a36 2
  class_alias, class_obscure, class_user, class_maintenance,
  class_pseudo, class_tui, class_xdb
@


1.64
log
@	PR gdb/8869:
	* language.c (language_completer): New function.
	(range_or_type_completer): New function.
	(case_completer): New function.
	(_initialize_language): Set completers.
	* cli/cli-decode.c (add_setshow_string_cmd): Return the "set"
	command.
	(add_setshow_string_noescape_cmd): Likewise.
	(add_setshow_integer_cmd): Likewise.
	(add_setshow_uinteger_cmd): Likewise.
	(add_setshow_zinteger_cmd): Likewise.
	(add_setshow_zuinteger_cmd): Likewise.
	* command.h (add_setshow_string_cmd,
	add_setshow_string_noescape_cmd, add_setshow_uinteger_cmd,
	add_setshow_zinteger_cmd, add_setshow_zuinteger_cmd): Update.
@
text
@d263 21
a283 23
extern struct cmd_list_element *
    add_setshow_string_cmd (char *name,
			    enum command_class class,
			    char **var,
			    const char *set_doc,
			    const char *show_doc,
			    const char *help_doc,
			    cmd_sfunc_ftype *set_func,
			    show_value_ftype *show_func,
			    struct cmd_list_element **set_list,
			    struct cmd_list_element **show_list);

extern struct cmd_list_element *
    add_setshow_string_noescape_cmd (char *name,
				     enum command_class class,
				     char **var,
				     const char *set_doc,
				     const char *show_doc,
				     const char *help_doc,
				     cmd_sfunc_ftype *set_func,
				     show_value_ftype *show_func,
				     struct cmd_list_element **set_list,
				     struct cmd_list_element **show_list);
d296 43
a338 47
extern struct cmd_list_element *
    add_setshow_integer_cmd (char *name,
			     enum command_class class,
			     int *var,
			     const char *set_doc,
			     const char *show_doc,
			     const char *help_doc,
			     cmd_sfunc_ftype *set_func,
			     show_value_ftype *show_func,
			     struct cmd_list_element **set_list,
			     struct cmd_list_element **show_list);

extern struct cmd_list_element *
    add_setshow_uinteger_cmd (char *name,
			      enum command_class class,
			      unsigned int *var,
			      const char *set_doc,
			      const char *show_doc,
			      const char *help_doc,
			      cmd_sfunc_ftype *set_func,
			      show_value_ftype *show_func,
			      struct cmd_list_element **set_list,
			      struct cmd_list_element **show_list);

extern struct cmd_list_element *
    add_setshow_zinteger_cmd (char *name,
			      enum command_class class,
			      int *var,
			      const char *set_doc,
			      const char *show_doc,
			      const char *help_doc,
			      cmd_sfunc_ftype *set_func,
			      show_value_ftype *show_func,
			      struct cmd_list_element **set_list,
			      struct cmd_list_element **show_list);

extern struct cmd_list_element *
    add_setshow_zuinteger_cmd (char *name,
			       enum command_class class,
			       unsigned int *var,
			       const char *set_doc,
			       const char *show_doc,
			       const char *help_doc,
			       cmd_sfunc_ftype *set_func,
			       show_value_ftype *show_func,
			       struct cmd_list_element **set_list,
			       struct cmd_list_element **show_list);
@


1.63
log
@gdb/
2009-05-12  Pedro Alves  <pedro@@codesourcery.com>

	* cli/cli-decode.c (deprecated_add_set_cmd): Delete.
	* command.h (deprecated_add_set_cmd): Delete declaration.
	* gnu-nat.c (_initialize_gnu_nat): Replace 'maint gnu-debug' with
	'set debug gnu-nat' and 'show debug gnu-nat'.
	* i386-nat.c (_initialize_i386_nat): Replace 'maint
	show-debug-registers' with 'maint set show-debug-registers' and
	'maint show show-debug-registers'.
	* mips-linux-nat.c (_initialize_mips_linux_nat): Replace 'maint
	show-debug-registers' with 'maint set show-debug-registers' and
	'maint show show-debug-registers'.

gdb/doc/
2009-05-12  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo: Document 'set/show debug gnu-nat'.  Replace 'maint
	show-debug-regs' docs by 'maint set show-debug-regs' and 'maint
	show show-debug-regs' docs.
@
text
@d263 23
a285 21
extern void add_setshow_string_cmd (char *name,
				    enum command_class class,
				    char **var,
				    const char *set_doc,
				    const char *show_doc,
				    const char *help_doc,
				    cmd_sfunc_ftype *set_func,
				    show_value_ftype *show_func,
				    struct cmd_list_element **set_list,
				    struct cmd_list_element **show_list);

extern void add_setshow_string_noescape_cmd (char *name,
					     enum command_class class,
					     char **var,
					     const char *set_doc,
					     const char *show_doc,
					     const char *help_doc,
					     cmd_sfunc_ftype *set_func,
					     show_value_ftype *show_func,
					     struct cmd_list_element **set_list,
					     struct cmd_list_element **show_list);
d298 47
a344 43
extern void add_setshow_integer_cmd (char *name,
				     enum command_class class,
				     int *var,
				     const char *set_doc,
				     const char *show_doc,
				     const char *help_doc,
				     cmd_sfunc_ftype *set_func,
				     show_value_ftype *show_func,
				     struct cmd_list_element **set_list,
				     struct cmd_list_element **show_list);

extern void add_setshow_uinteger_cmd (char *name,
				      enum command_class class,
				      unsigned int *var,
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      cmd_sfunc_ftype *set_func,
				      show_value_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

extern void add_setshow_zinteger_cmd (char *name,
				      enum command_class class,
				      int *var,
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      cmd_sfunc_ftype *set_func,
				      show_value_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

extern void add_setshow_zuinteger_cmd (char *name,
				       enum command_class class,
				       unsigned int *var,
				       const char *set_doc,
				       const char *show_doc,
				       const char *help_doc,
				       cmd_sfunc_ftype *set_func,
				       show_value_ftype *show_func,
				       struct cmd_list_element **set_list,
				       struct cmd_list_element **show_list);
@


1.62
log
@gdb/
2009-02-06  Tom Tromey  <tromey@@redhat.com>

	* Makefile.in (SUBDIR_PYTHON_OBS): Add python-cmd.o.
	(SUBDIR_PYTHON_SRCS): Add python-cmd.c.
	(python-cmd.o): New target.
	* cli/cli-decode.c (set_cmd_completer): Add self parameter to
	completer prototype.
	(add_cmd): Initialize destroyer member of cmd_list_element. Use
	make_symbol_completion_list_fn as completer.
	(delete_cmd): Call destroyer if one is set.
	* cli/cli-decode.h (cmd_list_element): Add cmd parameter to
	completer member.  Add destroyer member.
	(set_cmd_completer): Add self parameter to
	completer prototype.
	* command.h (set_cmd_completer): Add cmd parameter to
	completer prototype.
	* completer.c (noop_completer, filename_completer,
	location_completer, expression_completer, command_completer): Adapt
	to new completer prototype.
	(complete_line_internal): Pass new parameter to completer function.
	* completer.h (noop_completer, filename_completer,
	location_completer, expression_completer, command_completer): Adapt
	prototypes to new completer prototype.
	* interps.c (interpreter_completer): Adapt to new completer
	prototype.
	* python/python-cmd.c: New file.
	* python/python-internal.h (gdbpy_initialize_commands): Add
	prototype.
	(gdbpy_doc_cst): Add forward declaration.
	* python/python.c (gdbpy_doc_cst): Declare.
	(_initialize_python): Call gdbpy_initialize_commands.  Initialize
	gdbpy_doc_cst.
	* symtab.c (make_symbol_completion_list_fn): New function.
	* symtab.h (make_symbol_completion_list_fn): Add prototype.

gdb/doc/
2009-02-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.texinfo (Python API): Add entry for Commands In Python.
	(Commands In Python): New node.

gdb/testsuite/
2009-02-06  Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* gdb.python/python-cmd.exp: New file.
@
text
@a207 10
/* NOTE: cagney/2005-02-21: Since every set command should be paired
   with a corresponding show command (i.e., add_setshow_*) this call
   should not be needed.  Unfortunatly some are not (e.g.,
   "maintenance <variable> <value>") and those need to be fixed.  */
extern struct cmd_list_element *deprecated_add_set_cmd (char *name, enum
							command_class class,
							var_types var_type, void *var,
							char *doc,
							struct cmd_list_element **list);

@


1.61
log
@2009-01-23  Pedro Alves  <pedro@@codesourcery.com>

	* cli/cli-decode.c (add_setshow_zuinteger_cmd): New.
	* cli/cli-setshow.c (do_setshow_command): Handle it.
	* command.h (enum var_types): Add var_zuinteger.
	(add_setshow_zuinteger_cmd): Declare.

	* valprint.c (_initialize_valprint): Change the set input-radix
	and set output-radix commands to zuinteger type.

2009-01-23  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.base/radix.exp: Add tests to ensure that that set
	input-radix 0 and set output-radix 0 are really rejected.
@
text
@d141 2
a142 1
			       char **(*completer) (char *text, char *word));
@


1.60
log
@        Updated copyright notices for most files.
@
text
@d90 3
d338 11
@


1.59
log
@gdb
	PR gdb/1815:
	* cli/cli-decode.c (delete_cmd): Forward declare.
	(delete_cmd): Now static.  Change return type.  Remove command
	from alias chain.  Rewrite.
	(add_cmd): Initialize new fields.  Update cmd_pointer on all
	aliases.
	(add_alias_cmd): Put command on alias chain.
	* command.h (delete_cmd): Don't declare.
	* cli/cli-decode.h (delete_cmd): Don't declare.
	(struct cmd_list_element) <aliases, alias_chain>: New fields.
gdb/testsuite
	* gdb.base/commands.exp (redefine_backtrace_test): New proc.
	Call it.
@
text
@d4 1
a4 1
   2002, 2004, 2007, 2008 Free Software Foundation, Inc.
@


1.58
log
@	Updated copyright notices for most files.
@
text
@a195 2
extern void delete_cmd (char *, struct cmd_list_element **);

@


1.57
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d4 1
a4 1
   2002, 2004, 2007 Free Software Foundation, Inc.
@


1.56
log
@Copyright updates for 2007.
@
text
@d8 1
a8 1
   the Free Software Foundation; either version 2 of the License, or
d17 1
a17 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.55
log
@Improve "help all".
@
text
@d3 2
a4 2
   Copyright (C) 1986, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1999,
   2000, 2002, 2004 Free Software Foundation, Inc.
@


1.54
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d33 1
a33 1
  class_deprecated, all_classes = -2, all_commands = -1,
@


1.53
log
@2005-05-26  Andrew Cagney  <cagney@@gnu.org>

	* command.h (add_setshow_integer_cmd): Make VAR an integer.
	* cli/cli-decode.c (add_setshow_integer_cmd): Update to match.
	* valops.c (value_string): Add a cast.
	* eval.c (evaluate_subexp_standard): Use gdb_byte for byte buffers.
	* breakpoint.c (re_enable_breakpoints_in_shlibs): Use gdb_byte for
	byte buffers.
	* target.h (struct target_ops): For to_insert_hw_breakpoint and
	to_remove_hw_breakpoint use gdb_byte for byte buffer parameters.
	* breakpoint.h (struct bp_location): Make shadow_contents a
	gdb_byte buffer.
	* cli/cli-setshow.c (do_setshow_command): Fix cast.
	* cli/cli-dump.c (restore_section_callback)
	(restore_binary_file): Use gdb_byte for byte buffers.
	* proc-service.c (ps_ptwrite, ps_ptread, ps_pdwrite): Fix casts.
	(ps_xfer_memory): Use gdb_byte for byte buffers.
	* tracepoint.c (mem2hex): Use gdb_byte for byte buffers, and char
	for string buffers.
	* ser-tcp.c (net_open): Make len a socklen_t.
@
text
@d3 1
a3 1
   Copyright 1986, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1999,
d18 2
a19 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.52
log
@2005-02-21  Andrew Cagney  <cagney@@gnu.org>

	* command.h (deprecated_add_set_cmd): Rename add_set_cmd.
	* cli/cli-decode.h (add_set_cmd): Delete declaration.
	* cli/cli-decode.c (deprecated_add_set_cmd): Rename add_set_cmd.
	* i386-nat.c (_initialize_i386_nat): Update call.
	* valprint.c (_initialize_valprint): Update comment.
	* gnu-nat.c (_initialize_gnu_nat): Update call.
@
text
@d308 1
a308 1
				     unsigned int *var,
@


1.51
log
@2005-02-21  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_set_enum_cmd): Delete function.
	(deprecated_add_show_from_set): Delete function.
	* command.h (add_set_enum_cmd): Delete declaration.
	(deprecated_add_show_from_set): Delete declaration.
	* cli/cli-decode.h (add_set_enum_cmd): Delete declaration.
	(deprecated_add_show_from_set): Delete declaration.
	* arm-tdep.c (_initialize_arm_tdep): Update comment.
	* kod.c (kod_set_os): Simplify.
	* infrun.c (set_schedlock_func): Simplify.
	* cli/cli-dump.c (add_dump_command): Update comment.
@
text
@d208 9
a216 5
extern struct cmd_list_element *add_set_cmd (char *name, enum
					     command_class class,
					     var_types var_type, void *var,
					     char *doc,
					     struct cmd_list_element **list);
@


1.50
log
@2005-02-20  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_optional_filename_cmd): New
	function.
	* cli/cli-setshow.c (deprecated_show_value_hack)
	(do_setshow_command): Handle var_optional_filename.
	* command.h (enum var_types): Add var_optional_filename.
	(add_setshow_optional_filename_cmd): Declare.
	* infcmd.c (notice_args_read): Use.
@
text
@a158 9
/* NOTE: cagney/2002-03-17: The deprecated_add_show_from_set()
   function clones the set command passed as a parameter.  The clone
   operation will include (BUG?) any ``set'' command callback, if
   present.  Commands like ``info set'' call all the ``show'' command
   callbacks.  Unfortunately, for ``show'' commands cloned from
   ``set'', this includes callbacks belonging to ``set'' commands.
   Making this worse, this only occures if
   deprecated_add_show_from_set() is called after add_cmd_sfunc()
   (BUG?).  */
a213 7
extern struct cmd_list_element *add_set_enum_cmd (char *name,
						  enum command_class class,
						  const char *enumlist[],
						  const char **var,
						  char *doc,
						  struct cmd_list_element **list);

a334 3
extern struct cmd_list_element *deprecated_add_show_from_set (struct cmd_list_element *,
							      struct cmd_list_element **);

@


1.49
log
@2005-02-18  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_integer_cmd): New function.
	* command.h (add_setshow_integer_cmd): Declare.
	* cli/cli-cmds.c: Update.
@
text
@d83 5
a87 2
    /* String which stores a filename.
       *VAR is a malloc'd string, or NULL if the string is empty.  */
d307 11
@


1.48
log
@2005-02-17  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_cmd_full, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd): Delete
	fprint_setshow parameter.
	* command.h (fprint_setshow_ftype): Delete.
	(add_setshow_cmd_full, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd): Delete
	fprint_setshow parameter.
	* aix-thread.c, alpha-tdep.c, arm-tdep.c, breakpoint.c: Update.
	* complaints.c, cris-tdep.c, dwarf2read.c, frame.c: Update.
	* hppa-tdep.c, infcall.c, m32r-rom.c, maint.c: Update.
	* mips-tdep.c, nto-tdep.c, observer.c, remote-rdi.c: Update
	* remote.c, target.c, cli/cli-logging.c: Update.
@
text
@d304 11
@


1.47
log
@2005-02-17  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_cmd_full, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd): Delete
	fprint_setshow parameter.
	* command.h (fprint_setshow_ftype): Delete.
	(add_setshow_cmd_full, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd): Delete
	fprint_setshow parameter.
	* aix-thread.c, alpha-tdep.c, arm-tdep.c, breakpoint.c: Update.
	* complaints.c, cris-tdep.c, dwarf2read.c, frame.c: Update.
	* hppa-tdep.c, infcall.c, m32r-rom.c, maint.c: Update.
	* mips-tdep.c, nto-tdep.c, observer.c, remote-rdi.c: Update
	* remote.c, target.c, cli/cli-logging.c: Update.
@
text
@d293 11
@


1.46
log
@2005-02-16  Andrew Cagney  <cagney@@gnu.org>

	Merge setshow print and show parameters.
	* command.h (show_value_ftype): Define.
	(deprecated_show_value_hack): Declare.
	(add_setshow_enum_cmd, add_setshow_auto_boolean_cmd)
	(add_setshow_boolean_cmd, add_setshow_filename_cmd)
	(add_setshow_string_cmd, add_setshow_uinteger_cmd)
	(add_setshow_zinteger_cmd): Change type of show_func to
	show_value_ftype.
	* cli/cli-decode.h (struct cmd_list_element): Replace
	fprint_setshow with show_value_func.
	* cli/cli-decode.c (add_setshow_cmd_full): Update show_func
	parameter.  Set show_value_func.  Do not set cmd_sfunc.
	(add_setshow_enum_cmd, add_setshow_auto_boolean_cmd)
	(add_setshow_boolean_cmd, add_setshow_filename_cmd)
	(add_setshow_string_cmd, add_setshow_uinteger_cmd)
	(add_setshow_zinteger_cmd): Update.
	* complaints.c (complaints_show_value): Replace
	fprint_setshow_complaints.
	(_initialize_complaints): Update.
	* mips-tdep.c (show_mask_address): Update.
	* arm-tdep.c (show_fp_model): Update.
	* cli/cli-setshow.c (do_setshow_command): Call show_value_func
	instead of fprint_setshow.  Use deprecated_show_value_hack.
	(deprecated_show_value_hack): New function.
	* remote.c (add_packet_config_cmd, show_remote_cmd):
	(show_remote_protocol_P_packet_cmd)
	(show_remote_protocol_P_packet_cmd)
	(show_remote_protocol_Z_access_wp_packet_cmd)
	(show_remote_protocol_Z_hardware_bp_packet_cmd)
	(show_remote_protocol_Z_packet_cmd)
	(show_remote_protocol_Z_read_wp_packet_cmd)
	(show_remote_protocol_Z_software_bp_packet_cmd)
	(show_remote_protocol_Z_write_wp_packet_cmd)
	(show_remote_protocol_binary_download_cmd)
	(show_remote_protocol_p_packet_cmd)
	(show_remote_protocol_qPart_auxv_packet_cmd)
	(show_remote_protocol_qSymbol_packet_cmd)
	(show_remote_protocol_vcont_packet_cmd): Update.
@
text
@a226 6
/* Print the set|show CMD's variable's VALUE on FILE.  Do not include
   a trailing "\n".  */
typedef void (fprint_setshow_ftype) (struct cmd_list_element *cmd,
				     struct ui_file *file,
				     const char *value);

a244 1
				  fprint_setshow_ftype *fprint_setshow,
a255 1
					  fprint_setshow_ftype *fprint_setshow,
d265 1
a265 1
				     const char *help_doc, fprint_setshow_ftype *fprint_setshow,
a276 1
				      fprint_setshow_ftype *fprint_setshow,
a287 1
				    fprint_setshow_ftype *fprint_setshow,
a298 1
				      fprint_setshow_ftype *fprint_setshow,
a309 1
				      fprint_setshow_ftype *fprint_setshow,
@


1.45
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_enum_cmd, add_setshow_cmd_full)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd): Replace
	print string parameter with fprint_setshow function.
	* command.h (fprint_setshow_ftype): Define.  Update declarations.
	* cli/cli-setshow.c (do_setshow_command): When fprint_setshow is
	available, use that.
	* cli/cli-decode.h (struct cmd_list_element): Add field
	fprint_setshow.
	* complaints.c (fprint_setshow_complaints): New function.
	(_initialize_complaints): Pass to add_setshow_zinteger_cmd.
	* hppa-tdep.c (_initialize_hppa_tdep): Replace "print" parameter
	with NULL.
	* mips-tdep.c (_initialize_mips_tdep): Ditto.
	* m32r-rom.c (_initialize_m32r_rom): Ditto.
	* cris-tdep.c (_initialize_cris_tdep): Ditto.
	* arm-tdep.c (_initialize_arm_tdep): Ditto.
	* remote-rdi.c (_initialize_remote_rdi): Ditto.
	* alpha-tdep.c (_initialize_alpha_tdep): Ditto.
	* dwarf2read.c (_initialize_dwarf2_read): Ditto.
	* frame.c (_initialize_frame): Ditto.
	* target.c (initialize_targets): Ditto.
	* maint.c (_initialize_maint_cmds): Ditto.
	* observer.c (_initialize_observer): Ditto.
	* infcall.c (_initialize_infcall): Ditto.
	* breakpoint.c (_initialize_breakpoint): Ditto.
	* cli/cli-logging.c (_initialize_cli_logging): Ditto.
	* remote.c (add_packet_config_cmd, _initialize_remote): Ditto.
@
text
@d233 11
d253 1
a253 1
				  cmd_sfunc_ftype *show_func,
d265 1
a265 1
					  cmd_sfunc_ftype *show_func,
d275 1
a275 1
				     cmd_sfunc_ftype *show_func,
d287 1
a287 1
				      cmd_sfunc_ftype *show_func,
d299 1
a299 1
				    cmd_sfunc_ftype *show_func,
d311 1
a311 1
				      cmd_sfunc_ftype *show_func,
d323 1
a323 1
				      cmd_sfunc_ftype *show_func,
@


1.44
log
@2005-02-09  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_enum_cmd): Drop set_result and
	show_result parameters.
	* mips-tdep.c (_initialize_mips_tdep): Update calls.
	* command.h: Update declaration.
	* arm-tdep.c (_initialize_arm_tdep, _initialize_arm_tdep): Update
	calls.
@
text
@d226 7
d240 1
a240 1
				  const char *print,
d252 1
a252 1
					  const char *print,
d262 1
a262 1
				     const char *help_doc, const char *print,
d274 1
a274 1
				      const char *print,
d286 1
a286 1
				    const char *print,
d298 1
a298 1
				      const char *print,
d310 1
a310 1
				      const char *print,
@


1.43
log
@2005-01-05  Baurjan Ismagulov  <ibr@@ata.cs.hun.edu.tr>

	Committed by Andrew Cagney.
	* ada-valprint.c, aix-thread.c, alpha-nat.c: I18n markup.
	* alphabsd-nat.c, alphanbsd-tdep.c, amd64-linux-nat.c: I18n markup.
	* amd64-tdep.c,	amd64bsd-nat.c, amd64fbsd-nat.c: I18n markup.
	* arch-utils.c, arm-linux-nat.c, arm-tdep.c: I18n markup.
	* armnbsd-nat.c, armnbsd-tdep.c, auxv.c, avr-tdep.c: I18n markup.
	* aix-thread.c (_initialize_aix_thread): Get rid of the
	deprecated_add_show_from_set call.
	* alpha-tdep.c (_initialize_alpha_tdep): Ditto.
	* arm-tdep.c (_initialize_arm_tdep): Ditto.
	* command.h (add_setshow_enum_cmd): Add arguments for returning
	new list elements.
	* cli/cli-decode.c (add_setshow_enum_cmd): Ditto.
	* mips-tdep.c (_initialize_mips_tdep): Modify calls to
	add_setshow_enum_cmd.
@
text
@d237 1
a237 3
				  struct cmd_list_element **show_list,
				  struct cmd_list_element **set_result,
				  struct cmd_list_element **show_result);
@


1.42
log
@2004-10-30  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_enum_cmd): New function.
	* command.h (add_setshow_enum_cmd): Declare.
	* mips-tdep.c (_initialize_mips_tdep): Use add_setshow_enum_cmd.
@
text
@d237 3
a239 1
				  struct cmd_list_element **show_list);
@


1.41
log
@2004-07-28  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_cmd): Delete function.
	(add_setshow_cmd_full): Make static.
	* command.h (add_setshow_cmd, add_setshow_cmd_full): Delete.
	(add_setshow_filename_cmd, add_setshow_string_cmd): Declare.
	* cli/cli-decode.c (add_setshow_filename_cmd)
	(add_setshow_string_cmd): New functions.
	* nto-tdep.c (_initialize_nto_tdep): Update.  Fix parameters.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* m32r-rom.c (_initialize_m32r_rom): Update.  Update copyright.
	* cli/cli-logging.c (_initialize_cli_logging): Update.
	* complaints.c (_initialize_complaints): Update.
	* remote.c (_initialize_remote): Update.
@
text
@d226 12
@


1.40
log
@2004-07-28  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_zinteger_cmd)
	(add_setshow_cmd, add_setshow_auto_boolean_cmd)
	(add_setshow_boolean_cmd, add_setshow_cmd_full): Add help_doc and
	print parameters.  Make string parameters constant.
	* command.h: Update.  Update copyright.
	* remote.c (add_packet_config_cmd, _initialize_remote): Ditto.
	* observer.c (_initialize_observer): Ditto.
	* frame.c (_initialize_frame): Ditto.
	* complaints.c (_initialize_complaints): Ditto.
	* maint.c (_initialize_maint_cmds): Ditto.
	* target.c (initialize_targets): Ditto.
	* cli/cli-logging.c (_initialize_cli_logging): Ditto.
	* infcall.c (_initialize_infcall): Ditto.
	* arm-tdep.c (_initialize_arm_tdep): Ditto.
	* m32r-rom.c (_initialize_m32r_rom): Ditto.
	* remote-rdi.c (_initialize_remote_rdi): Ditto.
	* d10v-tdep.c (_initialize_d10v_tdep): Ditto.
	* mips-tdep.c (_initialize_mips_tdep): Ditto.
@
text
@a213 22
extern void add_setshow_cmd (char *name,
			     enum command_class class,
			     var_types var_type, void *var,
			     const char *set_doc, const char *show_doc,
			     const char *help_doc, const char *print,
			     cmd_sfunc_ftype *set_func,
			     cmd_sfunc_ftype *show_func,
			     struct cmd_list_element **set_list,
			     struct cmd_list_element **show_list);

extern void add_setshow_cmd_full (char *name,
				  enum command_class class,
				  var_types var_type, void *var,
				  const char *set_doc, const char *show_doc,
				  const char *help_doc, const char *print,
				  cmd_sfunc_ftype *set_func,
				  cmd_sfunc_ftype *show_func,
				  struct cmd_list_element **set_list,
				  struct cmd_list_element **show_list,
				  struct cmd_list_element **set_result,
				  struct cmd_list_element **show_result);

d249 24
@


1.39
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (deprecated_add_show_from_set): Deprecate.
	* xcoffsolib.c (_initialize_xcoffsolib): Update.
	* wince.c (_initialize_wince): Update.
	* win32-nat.c (_initialize_win32_nat): Update.
	* varobj.c (_initialize_varobj): Update.
	* valops.c (_initialize_valops): Update.
	* utils.c (initialize_utils, initialize_utils): Update.
	* tui/tui-win.c (_initialize_tui_win): Update.
	* top.c (init_main): Update.
	* symfile.c (_initialize_symfile): Update.
	* source.c (_initialize_source): Update.
	* somsolib.c (_initialize_som_solib): Update.
	* solib.c (_initialize_solib): Update.
	* solib-frv.c (_initialize_frv_solib): Update.
	* serial.c (_initialize_serial): Update.
	* ser-go32.c (_initialize_ser_dos, _initialize_ser_dos): Update.
	* remote.c (_initialize_remote, _initialize_remote): Update.
	* remote-vx.c (_initialize_vx): Update.
	* remote-utils.c (_initialize_sr_support): Update.
	* remote-sds.c (_initialize_remote_sds): Update.
	* remote-mips.c (_initialize_remote_mips): Update.
	* remote-e7000.c (_initialize_remote_e7000): Update.
	* proc-api.c (_initialize_proc_api): Update.
	* printcmd.c: Update.
	* parse.c (_initialize_parse): Update.
	* pa64solib.c (_initialize_pa64_solib): Update.
	* p-valprint.c (_initialize_pascal_valprint): Update.
	* monitor.c (_initialize_remote_monitors): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* maint.c (_initialize_maint_cmds): Update.
	* lin-lwp.c (_initialize_lin_lwp): Update.
	* language.c (_initialize_language): Update.
	* kod.c (_initialize_kod): Update.
	* infrun.c (set_schedlock_func, _initialize_infrun): Update.
	* i386-tdep.c (_initialize_i386_tdep): Update.
	* gdbtypes.c (build_gdbtypes, _initialize_gdbtypes): Update.
	* gdbarch.sh: Update.
	* gdbarch.c: Re-generate.
	* gdb-events.sh: Update.
	* gdb-events.c: Re-generate.
	* frame.c (_initialize_frame): Update.
	* exec.c: Update.
	* demangle.c (_initialize_demangler): Update.
	* dcache.c (_initialize_dcache): Update.
	* cris-tdep.c (_initialize_cris_tdep, cris_version_update): Update.
	* cp-valprint.c (_initialize_cp_valprint): Update.
	* corefile.c (_initialize_core): Update.
	* command.h: Update.
	* cli/cli-decode.h: Update.
	* cli/cli-cmds.c (init_cli_cmds): Update.
	* charset.c (_initialize_charset): Update.
	* breakpoint.c (_initialize_breakpoint): Update.
	* arm-tdep.c (_initialize_arm_tdep_initialize_arm_tdep): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.
	* aix-thread.c (_initialize_aix_thread): Update.
@
text
@d4 1
a4 1
   2000, 2002 Free Software Foundation, Inc.
d217 2
a218 1
			     char *set_doc, char *show_doc,
d227 2
a228 1
				  char *set_doc, char *show_doc,
d252 4
a255 1
					  char *set_doc, char *show_doc,
d264 2
a265 2
				     char *set_doc,
				     char *show_doc,
d274 4
a277 2
				      char *set_doc,
				      char *show_doc,
d286 4
a289 2
				      char *set_doc,
				      char *show_doc,
@


1.38
log
@2004-05-07  Andrew Cagney  <cagney@@redhat.com>

	* cli/cli-decode.c (add_setshow_zinteger_cmd): New function.
	* command.h (add_setshow_zinteger_cmd): Declare.
@
text
@d156 9
a164 8
/* NOTE: cagney/2002-03-17: The add_show_from_set() function clones
   the set command passed as a parameter.  The clone operation will
   include (BUG?) any ``set'' command callback, if present.  Commands
   like ``info set'' call all the ``show'' command callbacks.
   Unfortunately, for ``show'' commands cloned from ``set'', this
   includes callbacks belonging to ``set'' commands.  Making this
   worse, this only occures if add_show_from_set() is called after
   add_cmd_sfunc() (BUG?).  */
d286 2
a287 3
extern struct cmd_list_element *add_show_from_set (struct cmd_list_element *,
						   struct cmd_list_element
						   **);
@


1.37
log
@Index: mi/ChangeLog
2003-10-24  Andrew Cagney  <cagney@@redhat.com>

	* tui-out.c: Fix "fortunatly"[sic].

Index: doc/ChangeLog
2003-10-24  Andrew Cagney  <cagney@@redhat.com>

	* annotate.texinfo: Fix "fortunatly"[sic].

2003-10-24  Andrew Cagney  <cagney@@redhat.com>

	* osabi.c (gdbarch_init_osabi): Fix typos, and "fortunatly"[sic].
	* PROBLEMS, arch-utils.c, cli-out.c, command.h: Ditto.
	* complaints.c, cris-tdep.c, disasm.c, dwarf2-frame.c: Ditto.
	* frame.c, frame.h, infcall.c, infcmd.c, infrun.c: Ditto.
	* kod.c, mips-tdep.c, regcache.c, regcache.h, remote.c: Ditto.
@
text
@d275 10
@


1.37.6.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d4 1
a4 1
   2000, 2002, 2004 Free Software Foundation, Inc.
d156 8
a163 9
/* NOTE: cagney/2002-03-17: The deprecated_add_show_from_set()
   function clones the set command passed as a parameter.  The clone
   operation will include (BUG?) any ``set'' command callback, if
   present.  Commands like ``info set'' call all the ``show'' command
   callbacks.  Unfortunately, for ``show'' commands cloned from
   ``set'', this includes callbacks belonging to ``set'' commands.
   Making this worse, this only occures if
   deprecated_add_show_from_set() is called after add_cmd_sfunc()
   (BUG?).  */
d213 20
d249 1
a249 4
					  const char *set_doc,
					  const char *show_doc,
					  const char *help_doc,
					  const char *print,
d258 2
a259 2
				     const char *set_doc, const char *show_doc,
				     const char *help_doc, const char *print,
a264 24
extern void add_setshow_filename_cmd (char *name,
				      enum command_class class,
				      char **var,
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      const char *print,
				      cmd_sfunc_ftype *set_func,
				      cmd_sfunc_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

extern void add_setshow_string_cmd (char *name,
				    enum command_class class,
				    char **var,
				    const char *set_doc,
				    const char *show_doc,
				    const char *help_doc,
				    const char *print,
				    cmd_sfunc_ftype *set_func,
				    cmd_sfunc_ftype *show_func,
				    struct cmd_list_element **set_list,
				    struct cmd_list_element **show_list);

d268 2
a269 16
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      const char *print,
				      cmd_sfunc_ftype *set_func,
				      cmd_sfunc_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

extern void add_setshow_zinteger_cmd (char *name,
				      enum command_class class,
				      int *var,
				      const char *set_doc,
				      const char *show_doc,
				      const char *help_doc,
				      const char *print,
d275 3
a277 2
extern struct cmd_list_element *deprecated_add_show_from_set (struct cmd_list_element *,
							      struct cmd_list_element **);
@


1.36
log
@2003-08-09  Andrew Cagney  <cagney@@redhat.com>

	Fix GDB PR cli/926.
	* cli/cli-decode.c (add_setshow_uinteger_cmd): New function.
	* command.h (add_setshow_uinteger_cmd): Declare.
	* frame.c (set_backtrace_cmd): New function.
	(show_backtrace_cmd): New function.
	* frame.c (_initialize_frame): Replace "set/show
	backtrace-below-main" with "set/show backtrace past-main".  Add
	command "set/show backtrace limit".
	(backtrace_past_main): Rename "backtrace_below_main".
	(backtrace_limit): New variable.
	(get_prev_frame): Update.  Check the backtrace_limit.

2003-08-09  Andrew Cagney  <cagney@@redhat.com>

	* gdb.texinfo (Backtrace): Replace "set/show backtrace-below-main"
	with "set/show backtrace past-main" and "set/show backtrace
	limit".

Index: doc/gdb.texinfo
===================================================================
RCS file: /cvs/src/src/gdb/doc/gdb.texinfo,v
retrieving revision 1.174
diff -u -r1.174 gdb.texinfo
--- doc/gdb.texinfo	8 Aug 2003 01:58:00 -0000	1.174
+++ doc/gdb.texinfo	9 Aug 2003 14:57:10 -0000
@@@@ -3922,27 +3922,40 @@@@
 value, indicating that your program has stopped at the beginning of the
 code for line @@code{993} of @@code{builtin.c}.

-@@kindex set backtrace-below-main
-@@kindex show backtrace-below-main
+@@kindex set backtrace past-main
+@@kindex show backtrace past-main
+@@kindex set backtrace limit
+@@kindex show backtrace limit

-Most programs have a standard entry point---a place where system libraries
-and startup code transition into user code.  For C this is @@code{main}.
-When @@value{GDBN} finds the entry function in a backtrace it will terminate
-the backtrace, to avoid tracing into highly system-specific (and generally
-uninteresting) code.  If you need to examine the startup code, then you can
-change this behavior.
+Most programs have a standard user entry point---a place where system
+libraries and startup code transition into user code.  For C this is
+@@code{main}.  When @@value{GDBN} finds the entry function in a backtrace
+it will terminate the backtrace, to avoid tracing into highly
+system-specific (and generally uninteresting) code.
+
+If you need to examine the startup code, or limit the number of levels
+in a backtrace, you can change this behavior:

 @@table @@code
-@@item set backtrace-below-main off
+@@item set backtrace past-main
+@@itemx set backtrace past-main on
+Backtraces will continue past the user entry point.
+
+@@item set backtrace past-main off
 Backtraces will stop when they encounter the user entry point.  This is the
 default.

-@@item set backtrace-below-main
-@@itemx set backtrace-below-main on
-Backtraces will continue past the user entry point to the top of the stack.
+@@item show backtrace past-main
+Display the current user entry point backtrace policy.
+
+@@item set backtrace limit @@var{n}
+@@itemx set backtrace limit 0
+@@cindex backtrace limit
+Limit the backtrace to @@var{n} levels.  A value of zero means
+unlimited.

-@@item show backtrace-below-main
-Display the current backtrace policy.
+@@item show backtrace limit
+Display the current limit on backtrace levels.
 @@end table

 @@node Selection
@
text
@d160 1
a160 1
   Unfortunatly, for ``show'' commands cloned from ``set'', this
@


1.35
log
@2002-07-03  Martin M. Hunt  <hunt@@redhat.com>

	* top.c (execute_command): Use cmd_func() and cmd_func_p().

	* cli/cli-decode.c (cmd_func_p): New function.
	(cmd_func): New function.

	* command.h: Add cmd_func() and cmd_func_p().
@
text
@d265 10
@


1.35.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d160 1
a160 1
   Unfortunately, for ``show'' commands cloned from ``set'', this
a263 10

extern void add_setshow_uinteger_cmd (char *name,
				      enum command_class class,
				      unsigned int *var,
				      char *set_doc,
				      char *show_doc,
				      cmd_sfunc_ftype *set_func,
				      cmd_sfunc_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);
@


1.35.8.1
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@a264 10
extern void add_setshow_uinteger_cmd (char *name,
				      enum command_class class,
				      unsigned int *var,
				      char *set_doc,
				      char *show_doc,
				      cmd_sfunc_ftype *set_func,
				      cmd_sfunc_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

@


1.35.8.2
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d160 1
a160 1
   Unfortunately, for ``show'' commands cloned from ``set'', this
@


1.35.44.1
log
@2003-08-09  Andrew Cagney  <cagney@@redhat.com>

	Fix GDB PR cli/926.
	* cli/cli-decode.c (add_setshow_uinteger_cmd): New function.
	* command.h (add_setshow_uinteger_cmd): Declare.
	* frame.c (set_backtrace_cmd): New function.
	(show_backtrace_cmd): New function.
	* frame.c (_initialize_frame): Replace "set/show
	backtrace-below-main" with "set/show backtrace past-main".  Add
	command "set/show backtrace limit".
	(backtrace_past_main): Rename "backtrace_below_main".
	(backtrace_limit): New variable.
	(get_prev_frame): Update.  Check the backtrace_limit.

2003-08-09  Andrew Cagney  <cagney@@redhat.com>

	* gdb.texinfo (Backtrace): Replace "set/show backtrace-below-main"
	with "set/show backtrace past-main" and "set/show backtrace
	limit".

Index: doc/gdb.texinfo
===================================================================
RCS file: /cvs/src/src/gdb/doc/gdb.texinfo,v
retrieving revision 1.174
diff -u -r1.174 gdb.texinfo
--- doc/gdb.texinfo	8 Aug 2003 01:58:00 -0000	1.174
+++ doc/gdb.texinfo	9 Aug 2003 14:57:10 -0000
@@@@ -3922,27 +3922,40 @@@@
 value, indicating that your program has stopped at the beginning of the
 code for line @@code{993} of @@code{builtin.c}.

-@@kindex set backtrace-below-main
-@@kindex show backtrace-below-main
+@@kindex set backtrace past-main
+@@kindex show backtrace past-main
+@@kindex set backtrace limit
+@@kindex show backtrace limit

-Most programs have a standard entry point---a place where system libraries
-and startup code transition into user code.  For C this is @@code{main}.
-When @@value{GDBN} finds the entry function in a backtrace it will terminate
-the backtrace, to avoid tracing into highly system-specific (and generally
-uninteresting) code.  If you need to examine the startup code, then you can
-change this behavior.
+Most programs have a standard user entry point---a place where system
+libraries and startup code transition into user code.  For C this is
+@@code{main}.  When @@value{GDBN} finds the entry function in a backtrace
+it will terminate the backtrace, to avoid tracing into highly
+system-specific (and generally uninteresting) code.
+
+If you need to examine the startup code, or limit the number of levels
+in a backtrace, you can change this behavior:

 @@table @@code
-@@item set backtrace-below-main off
+@@item set backtrace past-main
+@@itemx set backtrace past-main on
+Backtraces will continue past the user entry point.
+
+@@item set backtrace past-main off
 Backtraces will stop when they encounter the user entry point.  This is the
 default.

-@@item set backtrace-below-main
-@@itemx set backtrace-below-main on
-Backtraces will continue past the user entry point to the top of the stack.
+@@item show backtrace past-main
+Display the current user entry point backtrace policy.
+
+@@item set backtrace limit @@var{n}
+@@itemx set backtrace limit 0
+@@cindex backtrace limit
+Limit the backtrace to @@var{n} levels.  A value of zero means
+unlimited.

-@@item show backtrace-below-main
-Display the current backtrace policy.
+@@item show backtrace limit
+Display the current limit on backtrace levels.
 @@end table

 @@node Selection
@
text
@a264 10
extern void add_setshow_uinteger_cmd (char *name,
				      enum command_class class,
				      unsigned int *var,
				      char *set_doc,
				      char *show_doc,
				      cmd_sfunc_ftype *set_func,
				      cmd_sfunc_ftype *show_func,
				      struct cmd_list_element **set_list,
				      struct cmd_list_element **show_list);

@


1.35.38.1
log
@Snap const char * mess.
@
text
@d100 2
a101 3
extern struct cmd_list_element *add_cmd (const char *, enum command_class,
					 void (*fun) (const char *, int),
					 const char *,
d104 1
a104 1
extern struct cmd_list_element *add_alias_cmd (const char *, const char *,
d108 3
a110 5
extern struct cmd_list_element *add_prefix_cmd (const char *,
						enum command_class,
						void (*fun) (const char *,
							     int),
						const char *,
d112 1
a112 1
						const char *, int,
d117 1
a117 1
						       void (*fun) (const char *,
d127 1
a127 1
typedef void cmd_cfunc_ftype (const char *args, int from_tty);
d131 1
a131 1
typedef void cmd_sfunc_ftype (const char *args, int from_tty,
d142 1
a142 1
			 void (*cfunc) (const char *args, int from_tty));
d167 1
a167 1
extern struct cmd_list_element *lookup_cmd (const char **,
d179 2
a180 1
extern void deprecated_cmd_warning (const char **);
d182 5
a186 8
extern int lookup_cmd_composition (const char *text,
				   struct cmd_list_element **alias,
				   struct cmd_list_element **prefix_cmd,
				   struct cmd_list_element **cmd);

extern struct cmd_list_element *add_com (const char *, enum command_class,
					 void (*fun) (const char *, int),
					 const char *);
d188 4
a191 1
extern struct cmd_list_element *add_com_alias (const char *, const char *,
d194 2
a195 3
extern struct cmd_list_element *add_info (const char *,
					  void (*fun) (const char *, int),
					  const char *);
d197 1
a197 2
extern struct cmd_list_element *add_info_alias (const char *, const char *,
						int);
d203 1
a203 1
extern void delete_cmd (const char *, struct cmd_list_element **);
d211 1
a211 1
			   const char *, int, struct ui_file *);
d233 1
a233 1
extern struct cmd_list_element *add_set_cmd (const char *name, enum
d236 1
a236 1
					     const char *doc,
d239 1
a239 1
extern struct cmd_list_element *add_set_enum_cmd (const char *name,
d243 1
a243 1
						  const char *doc,
d271 1
a271 1
extern void cmd_show_list (struct cmd_list_element *, int, const char *);
d273 1
a273 1
extern NORETURN void error_no_arg (const char *) ATTR_NORETURN;
d281 1
a281 1
extern void not_just_help_class_command (const char *, int);
@


1.34
log
@	* command.h (add_setshow_cmd): Declare.
	(add_setshow_cmd_full): Declare.
	* cli/cli-decode.c (add_setshow_cmd): No longer static.  Now
	returns void.  Use add_setshow_cmd_full.
	(add_setshow_cmd_full): New function.
	(add_setshow_auto_boolean_cmd): Use add_setshow_cmd_full.
	(add_setshow_boolean_cmd): Likewise.
@
text
@d283 6
@


1.33
log
@* command.h (add_setshow_auto_boolean_cmd): Replace
add_set_auto_boolean_cmd.
* cli/cli-decode.c (add_setshow_auto_boolean_cmd): Replace
add_set_auto_boolean_cmd.
* cli/cli-decode.h (add_set_auto_boolean_cmd): Delete declaration.
* mips-tdep.c (_initialize_mips_tdep): Update ``set mips
mask-address'' command.
(show_mask_address): Add cmd parameter.
* remote.c (add_packet_config_cmd): Update.  Change type of
set_func and show_func to cmd_sfunc_ftype.
(_initialize_remote): Update `set remote Z-packet'
(show_remote_protocol_qSymbol_packet_cmd): Add cmd parameter.
(show_remote_protocol_e_packet_cmd): Ditto.
(show_remote_protocol_E_packet_cmd): Ditto.
(show_remote_protocol_P_packet_cmd): Ditto.
(show_remote_protocol_Z_software_bp_packet_cmd): Ditto.
(show_remote_protocol_Z_hardware_bp_packet_cmd): Ditto.
(show_remote_protocol_Z_write_wp_packet_cmd): Ditto.
(show_remote_protocol_Z_read_wp_packet_cmd): Ditto.
(show_remote_protocol_Z_access_wp_packet_cmd): Ditto.
(show_remote_protocol_Z_packet_cmd): Ditto.
(show_remote_protocol_binary_download_cmd): Ditto.
(show_remote_cmd): Pass NULL to all of above.
@
text
@d213 20
@


1.32
log
@* cli/cli-decode.c (add_setshow_boolean_cmd): Replace
add_set_boolean_cmd.
(add_setshow_cmd): New function.
* command.h (add_setshow_boolean_cmd): Replace
add_set_boolean_cmd.
* remote-rdi.c (_initialize_remote_rdi): Update ``set rdiheartbeat''
and ``set rdiromatzero''.
* maint.c (_initialize_maint_cmds): Update commented out code.
* cli/cli-decode.h (add_set_boolean_cmd): Delete declaration.
* target.c (initialize_targets): Update `set
trust-readonly-sections'.
* remote.c (_initialize_remote): Update `set remotebreak'.
@
text
@d226 8
a233 5
extern struct cmd_list_element *add_set_auto_boolean_cmd (char *name,
							  enum command_class class,
							  enum auto_boolean *var,
							  char *doc,
							  struct cmd_list_element **list);
@


1.31
log
@* cli/cli-decode.c (set_cmd_cfunc): Update.
(set_cmd_sfunc): Update.
* command.h (cmd_cfunc_ftype, cmd_sfunc_ftype): Declare.
(set_cmd_sfunc, set_cmd_cfunc): Update.
* cli/cli-decode.h: Update.
@
text
@d232 9
a240 5
extern struct cmd_list_element *add_set_boolean_cmd (char *name,
						     enum command_class class,
						     int *var,
						     char *doc,
						     struct cmd_list_element **list);
@


1.30
log
@* defs.h (auto_boolean): Declare enum.
* command.h (cmd_auto_boolean): Delete enum.
* mips-tdep.c (mask_address_var): Update.
(mips_mask_address_p): Update.
(show_mask_address): Update.
* remote.c (struct packet_config): Update.
(update_packet_config): Update.
(show_packet_config_cmd): Update.
(packet_ok): Update.
(add_packet_config_cmd): Update.
(_initialize_remote):
* command.h: Update.
* cli/cli-setshow.c (parse_auto_binary_operation): Update.
(do_setshow_command): Update.
* cli/cli-decode.c (add_set_auto_boolean_cmd): Update.
* cli/cli-decode.h: Update.
@
text
@d127 1
d129 1
a129 1
			   void (*cfunc) (char *args, int from_tty));
d131 2
d134 1
a134 2
			   void (*sfunc) (char *args, int from_tty,
					  struct cmd_list_element * c));
@


1.29
log
@* command.h: Update copyright.
(struct cmd_list_element): Replace definition with opaque
declaration.
(enum cmd_types): Document that it will eventually be moved to
cli/cli-decode.h
(CMD_DEPRECATED, DEPRECATED_WARN_USER): Delete macros.
(MALLOCED_REPLACEMENT): Delete macro.
* Makefile.in (cli_decode_h): Add $(command_h).
(top.o, completer.o, maint.o): Add dependency on $(cli_decode_h).
* top.c: Include "cli/cli-decode.h".
* completer.c: Include "cli/cli-decode.h".
* maint.c: Include "cli/cli-decode.h".
* cli/cli-decode.h: Include "command.h".
(enum command_class): Delete.
(enum cmd_types): Comment out.
(enum cmd_auto_boolean): Delete.
(enum var_types): Delete.
@
text
@a53 8
/* Reasonable values for an AUTO_BOOLEAN variable. */
enum cmd_auto_boolean
{
  CMD_AUTO_BOOLEAN_TRUE,
  CMD_AUTO_BOOLEAN_FALSE,
  CMD_AUTO_BOOLEAN_AUTO
};

d62 3
a64 3
       "auto.  *VAR is an ``enum cmd_auto_boolean''.  NOTE: In general
       a custom show command will need to be implemented - one that
       for "auto" prints both the "auto" and the current auto-selected
d226 1
a226 1
							  enum cmd_auto_boolean *var,
@


1.29.4.1
log
@Merge with trunk.
@
text
@d54 8
d70 3
a72 3
       "auto.  *VAR is an ``enum auto_boolean''.  NOTE: In general a
       custom show command will need to be implemented - one that for
       "auto" prints both the "auto" and the current auto-selected
a134 1
typedef void cmd_cfunc_ftype (char *args, int from_tty);
d136 1
a136 1
			   cmd_cfunc_ftype *cfunc);
a137 2
typedef void cmd_sfunc_ftype (char *args, int from_tty,
			      struct cmd_list_element *c);
d139 2
a140 1
			   cmd_sfunc_ftype *sfunc);
d232 11
a242 18
extern void add_setshow_auto_boolean_cmd (char *name,
					  enum command_class class,
					  enum auto_boolean *var,
					  char *set_doc, char *show_doc,
					  cmd_sfunc_ftype *set_func,
					  cmd_sfunc_ftype *show_func,
					  struct cmd_list_element **set_list,
					  struct cmd_list_element **show_list);

extern void add_setshow_boolean_cmd (char *name,
				     enum command_class class,
				     int *var,
				     char *set_doc,
				     char *show_doc,
				     cmd_sfunc_ftype *set_func,
				     cmd_sfunc_ftype *show_func,
				     struct cmd_list_element **set_list,
				     struct cmd_list_element **show_list);
@


1.29.4.2
log
@merge with trunk
@
text
@a212 20
extern void add_setshow_cmd (char *name,
			     enum command_class class,
			     var_types var_type, void *var,
			     char *set_doc, char *show_doc,
			     cmd_sfunc_ftype *set_func,
			     cmd_sfunc_ftype *show_func,
			     struct cmd_list_element **set_list,
			     struct cmd_list_element **show_list);

extern void add_setshow_cmd_full (char *name,
				  enum command_class class,
				  var_types var_type, void *var,
				  char *set_doc, char *show_doc,
				  cmd_sfunc_ftype *set_func,
				  cmd_sfunc_ftype *show_func,
				  struct cmd_list_element **set_list,
				  struct cmd_list_element **show_list,
				  struct cmd_list_element **set_result,
				  struct cmd_list_element **show_result);

@


1.29.4.3
log
@merge with trunk.
@
text
@a282 6
/* check function pointer */
extern int cmd_func_p (struct cmd_list_element *cmd);

/* call the command function */
extern void cmd_func (struct cmd_list_element *cmd, char *args, int from_tty);

@


1.29.6.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d54 8
d70 3
a72 3
       "auto.  *VAR is an ``enum auto_boolean''.  NOTE: In general a
       custom show command will need to be implemented - one that for
       "auto" prints both the "auto" and the current auto-selected
a134 1
typedef void cmd_cfunc_ftype (char *args, int from_tty);
d136 1
a136 1
			   cmd_cfunc_ftype *cfunc);
a137 2
typedef void cmd_sfunc_ftype (char *args, int from_tty,
			      struct cmd_list_element *c);
d139 2
a140 1
			   cmd_sfunc_ftype *sfunc);
d232 11
a242 18
extern void add_setshow_auto_boolean_cmd (char *name,
					  enum command_class class,
					  enum auto_boolean *var,
					  char *set_doc, char *show_doc,
					  cmd_sfunc_ftype *set_func,
					  cmd_sfunc_ftype *show_func,
					  struct cmd_list_element **set_list,
					  struct cmd_list_element **show_list);

extern void add_setshow_boolean_cmd (char *name,
				     enum command_class class,
				     int *var,
				     char *set_doc,
				     char *show_doc,
				     cmd_sfunc_ftype *set_func,
				     cmd_sfunc_ftype *show_func,
				     struct cmd_list_element **set_list,
				     struct cmd_list_element **show_list);
@


1.29.6.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@a212 20
extern void add_setshow_cmd (char *name,
			     enum command_class class,
			     var_types var_type, void *var,
			     char *set_doc, char *show_doc,
			     cmd_sfunc_ftype *set_func,
			     cmd_sfunc_ftype *show_func,
			     struct cmd_list_element **set_list,
			     struct cmd_list_element **show_list);

extern void add_setshow_cmd_full (char *name,
				  enum command_class class,
				  var_types var_type, void *var,
				  char *set_doc, char *show_doc,
				  cmd_sfunc_ftype *set_func,
				  cmd_sfunc_ftype *show_func,
				  struct cmd_list_element **set_list,
				  struct cmd_list_element **show_list,
				  struct cmd_list_element **set_result,
				  struct cmd_list_element **show_result);

a261 6

/* check function pointer */
extern int cmd_func_p (struct cmd_list_element *cmd);

/* call the command function */
extern void cmd_func (struct cmd_list_element *cmd, char *args, int from_tty);
@


1.28
log
@* command.h (struct cmd_list_element): Add field context.
(set_cmd_context, get_cmd_context): Declare.
* cli/cli-decode.h: Ditto.
* cli/cli-decode.c (get_cmd_context): New function.
(set_cmd_context): New function.
(add_cmd): Initialize context.
Part of fixing PR gdb/145 and PR gdb/146.
@
text
@d1 1
a1 6
/* ***DEPRECATED***  The gdblib files must not be calling/using things in any
   of the possible command languages.  If necessary, a hook (that may be
   present or not) must be used and set to the appropriate routine by any
   command language that cares about it.  If you are having to include this
   file you are possibly doing things the old way.  This file will disapear.
   2000-12-01 fnasser@@redhat.com    */
d3 2
a4 3
/* Header file for command-reading library command.c.
   Copyright 1986, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1999, 2000
   Free Software Foundation, Inc.
d41 2
d104 1
a104 153


/* This flag is used by the code executing commands to warn the user 
   the first time a deprecated command is used, see the 'flags' field in
   the following struct.
*/
#define CMD_DEPRECATED            0x1
#define DEPRECATED_WARN_USER      0x2
#define MALLOCED_REPLACEMENT      0x4

struct cmd_list_element
  {
    /* Points to next command in this list.  */
    struct cmd_list_element *next;

    /* Name of this command.  */
    char *name;

    /* Command class; class values are chosen by application program.  */
    enum command_class class;

    /* Function definition of this command.  NULL for command class
       names and for help topics that are not really commands.  NOTE:
       cagney/2002-02-02: This function signature is evolving.  For
       the moment suggest sticking with either set_cmd_cfunc() or
       set_cmd_sfunc().  */
    void (*func) (struct cmd_list_element *c, char *args, int from_tty);
    /* The command's real callback.  At present func() bounces through
       to one of the below.  */
    union
      {
	/* If type is not_set_cmd, call it like this:  */
	void (*cfunc) (char *args, int from_tty);

	/* If type is set_cmd or show_cmd, first set the variables, and
	   then call this.  */
	void (*sfunc) (char *args, int from_tty, struct cmd_list_element * c);
      }
    function;

    /* Local state (context) for this command.  This can be anything.  */
    void *context;

    /* Documentation of this command (or help topic).
       First line is brief documentation; remaining lines form, with it,
       the full documentation.  First line should end with a period.
       Entire string should also end with a period, not a newline.  */
    char *doc;

    /* flags : a bitfield 
       
       bit 0: (LSB) CMD_DEPRECATED, when 1 indicated that this command
       is deprecated. It may be removed from gdb's command set in the
       future.

       bit 1: DEPRECATED_WARN_USER, the user needs to be warned that
       this is a deprecated command.  The user should only be warned
       the first time a command is used.
        
       bit 2: MALLOCED_REPLACEMENT, when functions are deprecated at
       compile time (this is the way it should, in general, be done)
       the memory containing the replacement string is statically
       allocated.  In some cases it makes sense to deprecate commands
       at runtime (the testsuite is one example).  In this case the
       memory for replacement is malloc'ed.  When a command is
       undeprecated or re-deprecated at runtime we don't want to risk
       calling free on statically allocated memory, so we check this
       flag.  
     */
    int flags;

    /* if this command is deprecated, this is the replacement name */
    char *replacement;

    /* If this command represents a show command, then this function
       is called before the variable's value is examined.  */
    void (*pre_show_hook) (struct cmd_list_element *c);

    /* Hook for another command to be executed before this command.  */
    struct cmd_list_element *hook_pre;

    /* Hook for another command to be executed after this command.  */
    struct cmd_list_element *hook_post;

    /* Flag that specifies if this command is already running it's hook. */
    /* Prevents the possibility of hook recursion. */
    int hook_in;

    /* Nonzero identifies a prefix command.  For them, the address
       of the variable containing the list of subcommands.  */
    struct cmd_list_element **prefixlist;

    /* For prefix commands only:
       String containing prefix commands to get here: this one
       plus any others needed to get to it.  Should end in a space.
       It is used before the word "command" in describing the
       commands reached through this prefix.  */
    char *prefixname;

    /* For prefix commands only:
       nonzero means do not get an error if subcommand is not
       recognized; call the prefix's own function in that case.  */
    char allow_unknown;

    /* Nonzero says this is an abbreviation, and should not
       be mentioned in lists of commands.
       This allows "br<tab>" to complete to "break", which it
       otherwise wouldn't.  */
    char abbrev_flag;

    /* Completion routine for this command.  TEXT is the text beyond
       what was matched for the command itself (leading whitespace is
       skipped).  It stops where we are supposed to stop completing
       (rl_point) and is '\0' terminated.

       Return value is a malloc'd vector of pointers to possible completions
       terminated with NULL.  If there are no completions, returning a pointer
       to a NULL would work but returning NULL itself is also valid.
       WORD points in the same buffer as TEXT, and completions should be
       returned relative to this position.  For example, suppose TEXT is "foo"
       and we want to complete to "foobar".  If WORD is "oo", return
       "oobar"; if WORD is "baz/foo", return "baz/foobar".  */
    char **(*completer) (char *text, char *word);

    /* Type of "set" or "show" command (or SET_NOT_SET if not "set"
       or "show").  */
    cmd_types type;

    /* Pointer to variable affected by "set" and "show".  Doesn't matter
       if type is not_set.  */
    void *var;

    /* What kind of variable is *VAR?  */
    var_types var_type;

    /* Pointer to NULL terminated list of enumerated values (like argv).  */
    const char **enums;

    /* Pointer to command strings of user-defined commands */
    struct command_line *user_commands;

    /* Pointer to command that is hooked by this one, (by hook_pre)
       so the hook can be removed when this one is deleted.  */
    struct cmd_list_element *hookee_pre;

    /* Pointer to command that is hooked by this one, (by hook_post)
       so the hook can be removed when this one is deleted.  */
    struct cmd_list_element *hookee_post;

    /* Pointer to command that is aliased by this one, so the
       aliased command can be located in case it has been hooked.  */
    struct cmd_list_element *cmd_pointer;
  };
@


1.27
log
@* cli/cli-decode.c (cmd_type): New function.
* command.h (cmd_type): Declare.
* infrun.c (set_schedlock_func): Call function cmd_type.
* kod.c (kod_set_os): Call cmd_type.
* cris-tdep.c (cris_version_update): Use function cmd_type.
(cris_mode_update, cris_abi_update): Ditto.
@
text
@d148 3
d305 5
@


1.26
log
@* command.h: (execute_cmd_post_hook): Declare.
(execute_cmd_pre_hook): Declare.
* cli/cli-script.c (clear_hook_in_cleanup): New function.
(execute_cmd_post_hook, execute_cmd_pre_hook): New
functions. Execute pre/post hook while ensuring that afterwords
hook_in is cleared.
* top.c (execute_command): Use execute_cmd_post_hook, and
execute_cmd_pre_hook to execute pre/post commands.
* infrun.c (normal_stop): Pass stop_command and not pre_hook to
hook_stop_stub.
(hook_stop_stub): Call execute_cmd_pre_hook.
@
text
@d309 12
@


1.25
log
@* cli/cli-decode.c (set_cmd_completer): New function.
* command.h (set_cmd_completer): Declare.
* cli/cli-decode.h (set_cmd_completer): Ditto.

* breakpoint.c (_initialize_breakpoint): Use set_cmd_completer.
* cli/cli-cmds.c (init_cli_cmds): Ditto.
* win32-nat.c (_initialize_inftarg): Ditto.
* remote-rdi.c (_initialize_remote_rdi): Ditto.
* proc-api.c (_initialize_proc_api): Ditto.
* hppa-tdep.c (_initialize_hppa_tdep): Ditto.
* source.c (_initialize_source): Ditto.
* exec.c (_initialize_exec): Ditto.
* solib.c (_initialize_solib): Ditto.
* top.c (init_main): Ditto.
* tracepoint.c (_initialize_tracepoint): Ditto.
* symfile.c (_initialize_symfile): Ditto.
* printcmd.c (_initialize_printcmd): Ditto.
* infcmd.c (_initialize_infcmd): Ditto.
* corefile.c (_initialize_core): Ditto.
@
text
@d303 6
@


1.24
log
@Doc fix.
@
text
@d295 3
@


1.23
log
@* cli/cli-decode.c (cmd_cfunc_eq): New function.
* command.h (cmd_cfunc_eq): Declare.
* cli/cli-decode.h (cmd_cfunc_eq): Ditto.

* cli/cli-cmds.h (is_complete_command): Change parameter to a
``struct cmd_list_element *''.
* cli/cli-cmds.c (is_complete_command): Update.  Use
cmd_cfunc_eq.
* top.c (execute_command): Pass the command to
is_complete_command.
* tracepoint.c: Replace function.cfunc with cmd_cfunc_eq.
@
text
@d259 1
a259 1
/* Forward-declarations of the entry-points of command.c.  */
@


1.22
log
@* cli/cli-decode.c (do_cfunc, set_cmd_cfunc): New functions.
(do_sfunc, set_cmd_sfunc): New functions.

* command.h (struct cmd_list_element): Add field func.
* cli/cli-decode.h (struct cmd_list_element): Ditto.
* command.h (set_cmd_sfunc, set_cmd_cfunc): Declare.
* cli/cli-decode.h: Ditto.

* cli/cli-decode.c (help_cmd): Test for func not cfunc/sfunc.
(help_all, help_cmd_list): Ditto.
(find_cmd, complete_on_cmdlist): Ditto.
* top.c (execute_command): Ditto.

* cli/cli-setshow.c (do_setshow_command): Call func instead of
function.sfunc.

* infcmd.c (notice_args_read): Fix function signature.

* cli/cli-cmds.c (init_cli_cmds): Use set_cmd_sfunc.
* cli/cli-decode.c (add_set_cmd): Ditto.
* utils.c (initialize_utils): Ditto.
* maint.c (_initialize_maint_cmds): Ditto.
* infrun.c (_initialize_infrun): Ditto.
* demangle.c (_initialize_demangler): Ditto.
* remote.c (add_packet_config_cmd): Ditto.
* mips-tdep.c (_initialize_mips_tdep): Ditto.
* cris-tdep.c (_initialize_cris_tdep): Ditto.
* proc-api.c (_initialize_proc_api): Ditto.
* kod.c (_initialize_kod): Ditto.
* valprint.c (_initialize_valprint): Ditto.
* top.c (init_main): Ditto.
* infcmd.c (_initialize_infcmd): Ditto.
* corefile.c (_initialize_core): Ditto.
* arm-tdep.c (_initialize_arm_tdep): Ditto.
* arch-utils.c (initialize_current_architecture): Ditto.
(_initialize_gdbarch_utils): Ditto.
* alpha-tdep.c (_initialize_alpha_tdep): Ditto.

* cli/cli-decode.c (add_cmd): Use set_cmd_cfunc.
* wince.c (_initialize_inftarg): Ditto.
* symfile.c (_initialize_symfile): Ditto.
* mips-tdep.c (_initialize_mips_tdep): Ditto.
* language.c (_initialize_language): Ditto.
* arc-tdep.c (_initialize_arc_tdep): Ditto.
@
text
@d295 4
@


1.21
log
@s/NO_FUNCTION/NULL/
@
text
@d130 7
a136 1
       names and for help topics that are not really commands.  */
d285 10
@


1.20
log
@	Fix for PR gdb/209, PR gdb/156:
	* gdbarch.c, gdbarch.h: Rebuilt.
	* gdbarch.sh: Added `construct_inferior_arguments'.
	* cli/cli-decode.h (cmd_list_element): Added pre_show_hook.
	Typo fix.
	* cli/cli-setshow.c (do_setshow_command): Call the pre_show_hook.
	* infcmd.c (_initialize_infcmd): Set sfunc on `set args' command.
	(inferior_argc, inferior_argv): New globals.
	(notice_args_set): New function.
	(set_inferior_args): Clear inferior_argc and inferior_argv.
	(set_inferior_args_vector): New function.
	(get_inferior_args): Handle inferior argument vector.
	(run_command): Use get_inferior_args().
	(notice_args_read): New function.
	(_initialize_infcmd): Don't call set_inferior_args.
	* command.h: Typo fix.
	(cmd_list_element): Added pre_show_hook.
	* main.c (captured_main): Added --args option.
	(print_gdb_help): Document --args.
	* inferior.h (construct_inferior_arguments): Declare.
	(set_inferior_args_vector): Likewise.
	* fork-child.c (construct_inferior_arguments): New function.
@
text
@d129 2
a130 3
    /* Function definition of this command.
       NO_FUNCTION for command class names and for help topics that
       are not really commands.  */
a140 1
#define NO_FUNCTION ((void (*) (char *args, int from_tty)) 0)
@


1.19
log
@* cli/cli-decode.c (add_set_boolean_cmd): Define.
* cli/cli-decode.h (add_set_boolean_cmd): Declare.
* command.h (add_set_boolean_cmd): Ditto.
* remote.c (_initialize_remote): Use add_set_boolean_cmd for "set
remotebreak"
@
text
@d137 1
a137 1
	/* If type is cmd_set or show_cmd, first set the variables, and
d174 4
@


1.18
log
@2001-07-16  Elena Zannoni  <ezannoni@@redhat.com>

        * top.c (is_complete_command, init_cmd_lists, init_cli_cmds,
        execute_user_command, do_setshow_command, get_prompt, init_proc,
        serial_log_command): Remove extern declarations.  Include
        cli/cli-cmds.h, cli/cli-script.h, cli/cli-setshow.h, serial.h.
        * gdbcmd.h (execute_user_command): Remove declaration, it's already
        in cli/cli-script.h.
        * command.h (do_setshow_command): Remove declaration, it's already
        in cli/cli-setshow.h.
        * infrun.c: Include "cli/cli-script.h" for execute_user_command.
        * Makefile.in (infrun.o): Update dependencies.
        (top.o): Ditto.
        * cli/cli-setshow.h: Add comment for do_setshow_command.
@
text
@d343 6
@


1.17
log
@Update/correct copyright notices.
@
text
@a346 7
/* Do a "set" or "show" command.  ARG is NULL if no argument, or the text
   of the argument, and FROM_TTY is nonzero if this command is being entered
   directly by the user (i.e. these are just like any other
   command).  C is the command list element for the command.  */

extern void do_setshow_command (char *, int, struct cmd_list_element *);

@


1.16
log
@2000-12-20  Fernando Nasser  <fnasser@@redhat.com>

        * command.h: Register date when it was deprecated.
        * call-cmds.h: Ditto.
@
text
@d9 2
a10 1
   Copyright (C) 1986, 1989, 1990, 2000 Free Software Foundation, Inc.
@


1.15
log
@2000-12-01  Fernando Nasser  <fnasser@@redhat.com>

        * cli/cli-decode.c: New file. Handle lists of commands, their decoding
        and documentation.
        (add_cmd, deprecate_cmd, add_abbrev_cmd, add_alias_cmd, add_prefix_cmd,
        add_abbrev_prefix_cmd, not_just_help_class_command, empty_sfunc,
        add_set_cmd, add_set_enum_cmd, add_set_auto_boolean_cmd,
        add_show_from_set, delete_cmd, apropos_cmd, help_cmd, help_list,
        help_all, print_doc_line, help_cmd_list, find_cmd, lookup_cmd_1,
        undef_cmd_error, lookup_cmd, deprecated_cmd_warning,
        lookup_cmd_composition, complete_on_cmdlist, complete_on_enum):
        Moved here from command.c.
        (add_info, add_info_alias, add_com, add_com_alias): Moved here from
        top.c.
        * cli/cli-decode.h: Definitions/declarations for the above.
        * cli/cli-cmds.c: New file.  GDB CLI commands.
        (error_no_arg, info_command, show_command, help_command, show_version,
        quit_command, pwd_command, cd_command, echo_command, shell_escape,
        make_command, show_user, set_debug, show_debug, init_cmd_lists):
        Moved here from top.c.
        (apropos_command): Moved here from command.c.
        (complete_command, source_command): Moved here (part) from top.c.
        (is_complete_command): New function. Checks if a command is the
        "complete" command.
        (init_cli_cmds): New function. Add commands to the CLI (from code
        previously in top.c.
        * cli/cli-cmds.h: Definitions/declarations for the above.
        * cli/cli-script.c: New file. GDB CLI command scripting.
        (build_command_line, get_command_line, print_command_lines,
        print_command_line, execute_user_command, execute_control_command,
        while_command, if_command, arg_cleanup, setup_user_args, locate_arg,
        insert_args, realloc_body_list, read_next_line,
        recurse_read_control_structure, read_command_lines, free_command_lines,
        do_free_command_lines_cleanup, make_cleanup_free_command_lines,
        validate_comname, user_defined_command, define_command,
        document_command, source_cleanup_lines, do_fclose_cleanup,
        show_user_1): Moved here from top.c.
        (script_from_file): New function. Implements execution of a script
        contained in a file (part of code for the source_command() that used
        to exist in top.c).
        * cli/cli-script.h: Definitions/declarations for the above.
        * cli/cli-setshow.c: New file. Handle set and show GDB CLI commands.
        (parse_auto_binary_operation, parse_binary_operation,
        do_setshow_command, cmd_show_list): Moved here from command.c.
        * cli/cli-setshow.h: Definitions/declarations for the above.
        * top.c: Remove all CLI code, except the command loop.
        (gdb_init): Call init_cli_cmds().
        * command.c: Remove obsolete file.
        * command.h: Mark as DEPRECATED.
        * gdbcmd.h: Ditto.
        * call-cmds.h: Ditto.
        * Makefile.in (SFILES): Remove command.c.
        (COMMON_OBS): Remove command.o.
        (command.o): Remove obsolete target.
        (cli_decode_h, cli_cmds_h, cli_script_h, cli_setshow_h): New macros.
        Refer to CLI header files.
        (cli-decode.o, cli-cmds.o, cli-setshow.o, cli-script.o): New targets.
        (SUBDIR_CLI_OBS, SUBDIR_CLI_SRCS, SUBDIR_CLI_DEPS, SUBDIR_CLI_INITS,
        SUBDIR_CLI_LDFLAGS, SUBDIR_CLI_CFLAGS, SUBDIR_CLI_ALL, SUBDIR_CLI_CLEAN,
        SUBDIR_CLI_INSTALL, SUBDIR_CLI_UNINSTALL): New macros for new cli
        subdirectory.
        * configure.in (enable_gdbcli): New option. Include the CLI in the
        executable (cannot be disabled yet).
        (CONFIG_OBS, CONFIG_DEPS, CONFIG_SRCS, CONFIG_INITS, ENABLE_CFLAGS,
        CONFIG_ALL, CONFIG_CLEAN, CONFIG_INSTALL, CONFIG_UNINSTALL): Add
        the corresponding SUBDIR_CLI_* macros if CLI requested.
        * configure: Regenerate.
@
text
@d6 1
a6 1
   fnasser@@redhat.com    */
@


1.14
log
@Mark error_no_arg() as no-return.
@
text
@d1 7
@


1.13
log
@2000-11-06  Fernando Nasser  <fnasser@@cygnus.com>

        From  Steven Johnson  <sbjohnson@@ozemail.com.au>:

        This set of changes add "hookpost-" as an expansion on the original
        hooking of commands to GDB. A Hook may now be run "AFTER" execution of
        a command as well as before.

        * command.h (struct cmd_list_element): Changed elements hook and hookee
        to hook_pre and hookee_pre respectively. Added hook_post and hookee_post
        for the post hook command operation. Added hook_in so that an executing
        hook can be flagged to prevent recursion.
        * command.c (add_cmd): Changed initilization of cmd_list_element to
        reflect above changes.
        (delete_cmd): Remove both pre and post hooks.
        (help_cmd): Notify that the command has pre and/or post hooks.
        * infrun.c (normal_stop): Change references to hook_pre from hook.
        * top.c (execute_command): Run both pre and post hooks.
        (define_command): Allow definition of both pre and post hooks.
        The definition of pre-hooks is done as before, with the "hook-"
        prefix for backward compatibility.
@
text
@d350 1
a350 1
extern void error_no_arg (char *);
@


1.12
log
@Add support for auto_boolean (true, false or auto).
@
text
@d168 8
a175 1
    struct cmd_list_element *hook;
d230 5
a234 1
    /* Pointer to command that is hooked by this one,
d236 1
a236 1
    struct cmd_list_element *hookee;
@


1.11
log
@Eliminate PARAMS.
@
text
@d50 8
d64 8
d317 6
@


1.10
log
@Change signature of function add_set_enum_cmd() so that it uses
constant character pointers.  Update everything.
As a consequence fix infrun's follow-fork plugging a small memory leak.
@
text
@d118 1
a118 1
#define NO_FUNCTION ((void (*) PARAMS((char *args, int from_tty))) 0)
@


1.9
log
@Eliminate PARAMS from function pointer declarations.
@
text
@d202 1
a202 1
    char **enums;
d277 1
a277 1
extern char **complete_on_enum (char **enumlist, char *, char *);
d297 2
a298 2
						  char *enumlist[],
						  char **var,
@


1.8
log
@PARAMS removal.
@
text
@d111 1
a111 1
	void (*cfunc) PARAMS ((char *args, int from_tty));
d115 1
a115 2
	void (*sfunc) PARAMS ((char *args, int from_tty,
			       struct cmd_list_element * c));
d188 1
a188 1
    char **(*completer) PARAMS ((char *text, char *word));
@


1.7
log
@Fix signature of add_set_enum_cmd.  Change VAR parameter to char**.
Cleanup signature of add_set_cmd.  Change VAR parameter to void*.
@
text
@d219 33
a251 25
extern struct cmd_list_element *
  add_cmd PARAMS ((char *, enum command_class, void (*fun) (char *, int),
		   char *, struct cmd_list_element **));

extern struct cmd_list_element *
  add_alias_cmd PARAMS ((char *, char *, enum command_class, int,
			 struct cmd_list_element **));

extern struct cmd_list_element *
  add_prefix_cmd PARAMS ((char *, enum command_class, void (*fun) (char *, int),
			  char *, struct cmd_list_element **, char *, int,
			  struct cmd_list_element **));

extern struct cmd_list_element *
  add_abbrev_prefix_cmd PARAMS ((char *, enum command_class,
				 void (*fun) (char *, int), char *,
				 struct cmd_list_element **, char *, int,
				 struct cmd_list_element **));

extern struct cmd_list_element *
  lookup_cmd PARAMS ((char **, struct cmd_list_element *, char *, int, int));

extern struct cmd_list_element *
  lookup_cmd_1 PARAMS ((char **, struct cmd_list_element *,
			struct cmd_list_element **, int));
d265 2
a266 3
extern struct cmd_list_element *
  add_com PARAMS ((char *, enum command_class, void (*fun) (char *, int),
		 char *));
d268 2
a269 2
extern struct cmd_list_element *
  add_com_alias PARAMS ((char *, char *, enum command_class, int));
d271 2
a272 2
extern struct cmd_list_element *
  add_info PARAMS ((char *, void (*fun) (char *, int), char *));
d274 1
a274 2
extern struct cmd_list_element *
  add_info_alias PARAMS ((char *, char *, int));
d276 1
a276 2
extern char **
  complete_on_cmdlist PARAMS ((struct cmd_list_element *, char *, char *));
d278 1
a278 2
extern char **
  complete_on_enum PARAMS ((char **enumlist, char *, char *));
d280 1
a280 2
extern void
delete_cmd PARAMS ((char *, struct cmd_list_element **));
d303 3
a305 3
extern struct cmd_list_element *
  add_show_from_set PARAMS ((struct cmd_list_element *,
			     struct cmd_list_element **));
d312 1
a312 2
extern void
do_setshow_command PARAMS ((char *, int, struct cmd_list_element *));
d316 1
a316 2
extern void
cmd_show_list PARAMS ((struct cmd_list_element *, int, char *));
d318 1
a318 2
extern void
error_no_arg PARAMS ((char *));
d320 1
a320 2
extern void
dont_repeat PARAMS ((void));
d326 1
a326 2
extern void
not_just_help_class_command PARAMS ((char *, int));
@


1.6
log
@Make help_all static.
@
text
@d197 1
a197 1
    char *var;
d287 12
a298 7
extern struct cmd_list_element *
  add_set_cmd PARAMS ((char *, enum command_class, var_types, char *, char *,
		       struct cmd_list_element **));

extern struct cmd_list_element *
  add_set_enum_cmd PARAMS ((char *name, enum command_class, char *list[],
		       char *var, char *doc, struct cmd_list_element ** c));
@


1.5
log
@Fri Mar 24 12:10:38 2000  glen mccready  <gkm@@pobox.com>

        * command.c, command.h (help_all): Add functionality to display
        a complete listing of available commands.
@
text
@a286 2
extern void help_all (struct ui_file *);

@


1.4
log
@2000-04-10  Fernando Nasser  <fnasser@@cygnus.com>

	From 2000-04-10 Rodney Brown <rdb@@redhat.com>:
	* command.h (enum command_class): Remove trailing "," to placate
	AIX xlc.
@
text
@d287 2
@


1.3
log
@Fix a typo (comtaining -> containing).
@
text
@d36 1
a36 1
  class_pseudo, class_tui, class_xdb,
@


1.3.2.1
log
@2000-04-10  Fernando Nasser  <fnasser@@cygnus.com>

	From 2000-04-10 Rodney Brown <rdb@@redhat.com>:
	* command.h (enum command_class): Remove trailing "," to placate
	AIX xlc.
@
text
@d36 1
a36 1
  class_pseudo, class_tui, class_xdb
@


1.2
log
@2000-03-23  Fernando Nasser  <fnasser@@cygnus.com>

	From David Whedon <dwhedon@@gordian.com>

	* top.c (execute_command): Checks all commands beore executing
	to see if the user needs to be warned that the command is
	deprecated, warns user if appropriate.
	(add_info), (add_info_alias), (add_com) , (add_com_alias): Changed
	return values from void to struct cmd_list_element *.
	* command.c (lookup_cmd_1): Check aliases before following link
	in case user needs to be warned about a deprecated alias.
	(deprecate_cmd): new exported function for command deprecation,
	sets flags and posibly a replacement string.
	(deprecated_cmd_warning): New exported funciton to warn user about
	a deprecated command.
	(lookup_cmd_composition): New exported function that determines
	alias, prefix_command, and cmd based on a string.  This is useful
	is we want to full name of a command.
	* command.h : Added prototypes for deprecate_cmd,
	deprecated_warn_user and lookup_cmd_composition, added flags to
	the cmd_list_element structure, changed return values for
	add_com_* and add_info_* from void to cmd_list_element.
	* maint.c : (maintenance_deprecate): New function to deprecate a
	command.  This exists only so that the testsuite can deprecate
	commands at runtime and check the warning behavior.
	(maintenance_undeprecate) : New function, drops deprecated flags.
	(maintenance_do_deprecate): Actually does the (un)deprecation.
	(initialize_maint_cmds): Added the above new deprecate commands.
@
text
@d139 1
a139 1
       the memory comtaining the replacement string is statically
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1986, 1989, 1990 Free Software Foundation, Inc.
d4 14
a17 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d22 17
d42 7
a48 5
typedef enum cmd_types {
  not_set_cmd,
  set_cmd,
  show_cmd
} cmd_types;
d51 31
a81 29
typedef enum var_types {
  /* "on" or "off".  *VAR is an integer which is nonzero for on,
     zero for off.  */
  var_boolean,
  /* Unsigned Integer.  *VAR is an unsigned int.  The user can type 0
     to mean "unlimited", which is stored in *VAR as UINT_MAX.  */
  var_uinteger,

  /* Like var_uinteger but signed.  *VAR is an int.  The user can type 0
     to mean "unlimited", which is stored in *VAR as INT_MAX.  */
  var_integer,

  /* String which the user enters with escapes (e.g. the user types \n and
     it is a real newline in the stored string).
     *VAR is a malloc'd string, or NULL if the string is empty.  */
  var_string,
  /* String which stores what the user types verbatim.
     *VAR is a malloc'd string, or NULL if the string is empty.  */
  var_string_noescape,
  /* String which stores a filename.
     *VAR is a malloc'd string, or NULL if the string is empty.  */
  var_filename,
  /* ZeroableInteger.  *VAR is an int.  Like Unsigned Integer except
     that zero really means zero.  */
  var_zinteger,
  /* Enumerated type.  Can only have one of the specified values.  *VAR is a
     char pointer to the name of the element that we find.  */
  var_enum
} var_types;
d85 9
d116 4
a119 3
			       struct cmd_list_element *c));
      } function;
#   define NO_FUNCTION ((void (*) PARAMS((char *args, int from_tty))) 0)
d127 25
d189 1
a189 1
    char ** (*completer) PARAMS ((char *text, char *word));
d220 6
a225 2
add_cmd PARAMS ((char *, enum command_class, void (*fun) (char *, int),
		 char *, struct cmd_list_element **));
d228 3
a230 2
add_alias_cmd PARAMS ((char *, char *, enum command_class, int,
		       struct cmd_list_element **));
d233 4
a236 3
add_prefix_cmd PARAMS ((char *, enum command_class, void (*fun) (char *, int),
			char *, struct cmd_list_element **, char *, int,
			struct cmd_list_element **));
d239 1
a239 4
add_abbrev_prefix_cmd PARAMS ((char *, enum command_class,
			       void (*fun) (char *, int), char *,
			       struct cmd_list_element **, char *, int,
			       struct cmd_list_element **));
d242 2
a243 1
lookup_cmd PARAMS ((char **, struct cmd_list_element *, char *, int, int));
d246 1
a246 2
lookup_cmd_1 PARAMS ((char **, struct cmd_list_element *,
		      struct cmd_list_element **, int));
d249 10
a258 1
add_com PARAMS ((char *, enum command_class, void (*fun)(char *, int),
d261 2
a262 2
extern void
add_com_alias PARAMS ((char *, char *, enum command_class, int));
d264 2
a265 2
extern void
add_info PARAMS ((char *, void (*fun) (char *, int), char *));
d267 2
a268 2
extern void
add_info_alias PARAMS ((char *, char *, int));
d271 1
a271 1
complete_on_cmdlist PARAMS ((struct cmd_list_element *, char *, char *));
d274 1
a274 1
complete_on_enum PARAMS ((char **enumlist, char *, char *));
d279 1
a279 2
extern void
help_cmd PARAMS ((char *, GDB_FILE *));
d281 2
a282 3
extern void
help_list PARAMS ((struct cmd_list_element *, char *, enum command_class,
		   GDB_FILE *));
d284 2
a285 3
extern void
help_cmd_list PARAMS ((struct cmd_list_element *, enum command_class, char *,
		       int, GDB_FILE *));
d288 2
a289 2
add_set_cmd PARAMS ((char *, enum command_class, var_types, char *, char *,
		     struct cmd_list_element **));
d292 2
a293 2
add_set_enum_cmd PARAMS ((char *name, enum command_class, char *list[],
			  char *var, char *doc, struct cmd_list_element **c));
d296 2
a297 2
add_show_from_set PARAMS ((struct cmd_list_element *,
			   struct cmd_list_element **));
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d4 13
a16 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d24 5
a28 7
typedef enum cmd_types
  {
    not_set_cmd,
    set_cmd,
    show_cmd
  }
cmd_types;
d31 29
a59 31
typedef enum var_types
  {
    /* "on" or "off".  *VAR is an integer which is nonzero for on,
       zero for off.  */
    var_boolean,
    /* Unsigned Integer.  *VAR is an unsigned int.  The user can type 0
       to mean "unlimited", which is stored in *VAR as UINT_MAX.  */
    var_uinteger,

    /* Like var_uinteger but signed.  *VAR is an int.  The user can type 0
       to mean "unlimited", which is stored in *VAR as INT_MAX.  */
    var_integer,

    /* String which the user enters with escapes (e.g. the user types \n and
       it is a real newline in the stored string).
       *VAR is a malloc'd string, or NULL if the string is empty.  */
    var_string,
    /* String which stores what the user types verbatim.
       *VAR is a malloc'd string, or NULL if the string is empty.  */
    var_string_noescape,
    /* String which stores a filename.
       *VAR is a malloc'd string, or NULL if the string is empty.  */
    var_filename,
    /* ZeroableInteger.  *VAR is an int.  Like Unsigned Integer except
       that zero really means zero.  */
    var_zinteger,
    /* Enumerated type.  Can only have one of the specified values.  *VAR is a
       char pointer to the name of the element that we find.  */
    var_enum
  }
var_types;
d85 3
a87 4
			       struct cmd_list_element * c));
      }
    function;
#define NO_FUNCTION ((void (*) PARAMS((char *args, int from_tty))) 0)
d132 1
a132 1
    char **(*completer) PARAMS ((char *text, char *word));
d163 2
a164 2
  add_cmd PARAMS ((char *, enum command_class, void (*fun) (char *, int),
		   char *, struct cmd_list_element **));
d167 2
a168 2
  add_alias_cmd PARAMS ((char *, char *, enum command_class, int,
			 struct cmd_list_element **));
d171 3
a173 3
  add_prefix_cmd PARAMS ((char *, enum command_class, void (*fun) (char *, int),
			  char *, struct cmd_list_element **, char *, int,
			  struct cmd_list_element **));
d176 4
a179 4
  add_abbrev_prefix_cmd PARAMS ((char *, enum command_class,
				 void (*fun) (char *, int), char *,
				 struct cmd_list_element **, char *, int,
				 struct cmd_list_element **));
d182 1
a182 1
  lookup_cmd PARAMS ((char **, struct cmd_list_element *, char *, int, int));
d185 2
a186 2
  lookup_cmd_1 PARAMS ((char **, struct cmd_list_element *,
			struct cmd_list_element **, int));
d189 1
a189 1
add_com PARAMS ((char *, enum command_class, void (*fun) (char *, int),
d202 1
a202 1
  complete_on_cmdlist PARAMS ((struct cmd_list_element *, char *, char *));
d205 1
a205 1
  complete_on_enum PARAMS ((char **enumlist, char *, char *));
d222 2
a223 2
  add_set_cmd PARAMS ((char *, enum command_class, var_types, char *, char *,
		       struct cmd_list_element **));
d226 2
a227 2
  add_set_enum_cmd PARAMS ((char *name, enum command_class, char *list[],
		       char *var, char *doc, struct cmd_list_element ** c));
d230 2
a231 2
  add_show_from_set PARAMS ((struct cmd_list_element *,
			     struct cmd_list_element **));
@


1.1.1.3
log
@import gdb-1999-09-28 snapshot
@
text
@a21 17
/* Command classes are top-level categories into which commands are broken
   down for "help" purposes.  
   Notes on classes: class_alias is for alias commands which are not
   abbreviations of the original command.  class-pseudo is for
   commands which are not really commands nor help topics ("stop").  */

enum command_class
{
  /* Special args to help_list */
  class_deprecated, all_classes = -2, all_commands = -1,
  /* Classes of commands */
  no_class = -1, class_run = 0, class_vars, class_stack,
  class_files, class_support, class_info, class_breakpoint, class_trace,
  class_alias, class_obscure, class_user, class_maintenance,
  class_pseudo, class_tui, class_xdb,
};

@


1.1.1.4
log
@import gdb-2000-02-01 snapshot
@
text
@d2 1
a2 1
   Copyright (C) 1986, 1989, 1990, 2000 Free Software Foundation, Inc.
d233 2
a234 1
extern void help_cmd (char *, struct ui_file *);
d236 3
a238 2
extern void help_list (struct cmd_list_element *, char *,
		       enum command_class, struct ui_file *);
d240 3
a242 2
extern void help_cmd_list (struct cmd_list_element *, enum command_class,
			   char *, int, struct ui_file *);
@


