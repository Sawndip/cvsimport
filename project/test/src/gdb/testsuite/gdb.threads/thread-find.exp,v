head	1.9;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.9
	gdb_7_6-2013-04-26-release:1.9
	gdb_7_6-branch:1.9.0.2
	gdb_7_6-2013-03-12-branchpoint:1.9
	gdb_7_5_1-2012-11-29-release:1.8
	gdb_7_5-2012-08-17-release:1.8
	gdb_7_5-branch:1.8.0.2
	gdb_7_5-2012-07-18-branchpoint:1.8
	gdb_7_4_1-2012-04-26-release:1.5.2.1
	gdb_7_4-2012-01-24-release:1.5.2.1
	gdb_7_4-branch:1.5.0.2
	gdb_7_4-2011-12-13-branchpoint:1.5
	gdb_7_3_1-2011-09-04-release:1.4
	gdb_7_3-2011-07-26-release:1.4
	gdb_7_3-branch:1.4.0.2
	gdb_7_3-2011-04-01-branchpoint:1.4;
locks; strict;
comment	@# @;


1.9
date	2013.01.01.06.41.27;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.26.19.23.20;	author tromey;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.16.16.21.53;	author palves;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.04.08.27.55;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.04.12.49.33;	author uweigand;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2011.02.22.18.51.27;	author msnyder;	state Exp;
branches;
next	1.3;

1.3
date	2011.02.21.23.40.47;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.17.22.08.12;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.15.21.17.53;	author msnyder;	state Exp;
branches;
next	;

1.5.2.1
date	2012.01.06.04.54.29;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2011-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@gnu.org

standard_testfile linux-dp.c
if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != ""} {
    return -1
}

clean_restart ${binfile}
gdb_test_no_output "set print sevenbit-strings"
runto_main

# Run until there are some threads.
gdb_breakpoint [gdb_get_line_number "linuxthreads.exp: info threads 2"]
gdb_continue_to_breakpoint "main thread's sleep"

# Make sure thread list is up-to-date (in case remote targets have not yet
# reported thread creation events)
gdb_test "info threads"

# Create thread names.
gdb_test "thread apply 1 thread name threadname_1" \
    "Thread 1 .*" \
    "name thread 1"

gdb_test "thread apply 2 thread name threadname_2" \
    "Thread 2 .*" \
    "name thread 2"

gdb_test "thread apply 3 thread name threadname_3" \
    "Thread 3 .*" \
    "name thread 3"

gdb_test "thread apply 4 thread name threadname_4" \
    "Thread 4 .*" \
    "name thread 4"

gdb_test "thread apply 5 thread name threadname_5" \
    "Thread 5 .*" \
    "name thread 5"

gdb_test "thread apply 6 thread name threadname_6" \
    "Thread 6 .*" \
    "name thread 6"

# Collect thread ids, if any.
gdb_test_multiple "info threads" "collect thread id" {
    -re ". 6 .*\[Tt\]hread (\[0-9a-fA-Fx\]+).* \"threadname_6\" \[^\r\n\]*" {
	set thread6 $expect_out(1,string)
	exp_continue
    }
    -re ". 5 .*\[Tt\]hread (\[0-9a-fA-Fx\]+).* \"threadname_5\" \[^\r\n\]*" {
	set thread5 $expect_out(1,string)
	exp_continue
    }
    -re ". 4 .*\[Tt\]hread (\[0-9a-fA-Fx\]+).* \"threadname_4\" \[^\r\n\]*" {
	set thread4 $expect_out(1,string)
	exp_continue
    }
    -re ". 3 .*\[Tt\]hread (\[0-9a-fA-Fx\]+).* \"threadname_3\" \[^\r\n\]*" {
	set thread3 $expect_out(1,string)
	exp_continue
    }
    -re ". 2 .*\[Tt\]hread (\[0-9a-fA-Fx\]+).* \"threadname_2\" \[^\r\n\]*" {
	set thread2 $expect_out(1,string)
	exp_continue
    }
    -re ". 1 .*\[Tt\]hread (\[0-9a-fA-Fx\]+).* \"threadname_1\" \[^\r\n\]*" {
	set thread1 $expect_out(1,string)
	exp_continue
    }
    -re ".*$gdb_prompt $" {
	pass "collect thread id"
    }
}

if { [info exists thread6] } then {
    gdb_test "echo $thread6\\n" "$thread6" "got thread ids"
}

# Collect process ids, if any.
gdb_test_multiple "info threads" "collect thread id" {
    -re ". 6 .*\[Pp\]rocess (\[0-9a-fA-Fx\]+).* \"threadname_6\" \[^\r\n\]*" {
	set process6 $expect_out(1,string)
	exp_continue
    }
    -re ". 5 .*\[Pp\]rocess (\[0-9a-fA-Fx\]+).* \"threadname_5\" \[^\r\n\]*" {
	set process5 $expect_out(1,string)
	exp_continue
    }
    -re ". 4 .*\[Pp\]rocess (\[0-9a-fA-Fx\]+).* \"threadname_4\" \[^\r\n\]*" {
	set process4 $expect_out(1,string)
	exp_continue
    }
    -re ". 3 .*\[Pp\]rocess (\[0-9a-fA-Fx\]+).* \"threadname_3\" \[^\r\n\]*" {
	set process3 $expect_out(1,string)
	exp_continue
    }
    -re ". 2 .*\[Pp\]rocess (\[0-9a-fA-Fx\]+).* \"threadname_2\" \[^\r\n\]*" {
	set process2 $expect_out(1,string)
	exp_continue
    }
    -re ". 1 .*\[Pp\]rocess (\[0-9a-fA-Fx\]+).* \"threadname_1\" \[^\r\n\]*" {
	set process1 $expect_out(1,string)
	exp_continue
    }
    -re ".*$gdb_prompt $" {
	pass "collect process id"
    }
}

if { [info exists process6] } then {
    gdb_test "echo $process6\\n" "$process6" "got process ids"
}

# Collect lwp ids, if any.
gdb_test_multiple "info threads" "collect thread id" {
    -re ". 6 .*LWP (\[0-9a-fA-Fx\]+).* \"threadname_6\" \[^\r\n\]*" {
	set lwp6 $expect_out(1,string)
	exp_continue
    }
    -re ". 5 .*LWP (\[0-9a-fA-Fx\]+).* \"threadname_5\" \[^\r\n\]*" {
	set lwp5 $expect_out(1,string)
	exp_continue
    }
    -re ". 4 .*LWP (\[0-9a-fA-Fx\]+).* \"threadname_4\" \[^\r\n\]*" {
	set lwp4 $expect_out(1,string)
	exp_continue
    }
    -re ". 3 .*LWP (\[0-9a-fA-Fx\]+).* \"threadname_3\" \[^\r\n\]*" {
	set lwp3 $expect_out(1,string)
	exp_continue
    }
    -re ". 2 .*LWP (\[0-9a-fA-Fx\]+).* \"threadname_2\" \[^\r\n\]*" {
	set lwp2 $expect_out(1,string)
	exp_continue
    }
    -re ". 1 .*LWP (\[0-9a-fA-Fx\]+).* \"threadname_1\" \[^\r\n\]*" {
	set lwp1 $expect_out(1,string)
	exp_continue
    }
    -re ".*$gdb_prompt $" {
	pass "collect lwp id"
    }
}

if { [info exists lwp6] } then {
    gdb_test "echo $lwp6\\n" "$lwp6" "got lwp ids"
}

#
# Now: test 'thread find' with names.
#

gdb_test "thread find threadname_6" \
    "Thread 6 has name 'threadname_6'" "find thread name 6"
gdb_test "thread find threadname_5" \
    "Thread 5 has name 'threadname_5'" "find thread name 5"
gdb_test "thread find threadname_4" \
    "Thread 4 has name 'threadname_4'" "find thread name 4"
gdb_test "thread find threadname_3" \
    "Thread 3 has name 'threadname_3'" "find thread name 3"
gdb_test "thread find threadname_2" \
    "Thread 2 has name 'threadname_2'" "find thread name 2"
gdb_test "thread find threadname_1" \
    "Thread 1 has name 'threadname_1'" "find thread name 1"

#
# Test 'thread find' with thread ids, if any.
#

if { [info exists thread6] } then {
    gdb_test "thread find $thread6" \
	"Thread 6 has .*$thread6.*" "find thread id 6"
    gdb_test "thread find $thread5" \
	"Thread 5 has .*$thread5.*" "find thread id 5"
    gdb_test "thread find $thread4" \
	"Thread 4 has .*$thread4.*" "find thread id 4"
    gdb_test "thread find $thread3" \
	"Thread 3 has .*$thread3.*" "find thread id 3"
    gdb_test "thread find $thread2" \
	"Thread 2 has .*$thread2.*" "find thread id 2"
    gdb_test "thread find $thread1" \
	"Thread 1 has .*$thread1.*" "find thread id 1"
}

#
# Test 'thread find' with process ids, if any.
#

if { [info exists process6] } then {
    gdb_test "thread find $process6" \
	"Thread 6 has .*$process6.*" "find process id 6"
    gdb_test "thread find $process5" \
	"Thread 5 has .*$process5.*" "find process id 5"
    gdb_test "thread find $process4" \
	"Thread 4 has .*$process4.*" "find process id 4"
    gdb_test "thread find $process3" \
	"Thread 3 has .*$process3.*" "find process id 3"
    gdb_test "thread find $process2" \
	"Thread 2 has .*$process2.*" "find process id 2"
    gdb_test "thread find $process1" \
	"Thread 1 has .*$process1.*" "find process id 1"
}

#
# Test 'thread find' with lwp ids, if any.
#

if { [info exists lwp6] } then {
    gdb_test "thread find $lwp6" \
	"Thread 6 has .*$lwp6.*" "find lwp id 6"
    gdb_test "thread find $lwp5" \
	"Thread 5 has .*$lwp5.*" "find lwp id 5"
    gdb_test "thread find $lwp4" \
	"Thread 4 has .*$lwp4.*" "find lwp id 4"
    gdb_test "thread find $lwp3" \
	"Thread 3 has .*$lwp3.*" "find lwp id 3"
    gdb_test "thread find $lwp2" \
	"Thread 2 has .*$lwp2.*" "find lwp id 2"
    gdb_test "thread find $lwp1" \
	"Thread 1 has .*$lwp1.*" "find lwp id 1"
}

# Test no match.

gdb_test "thread find foobarbaz" "No threads match .*" "no thread"

#
# Test regular expression
#

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0
set see6 0

gdb_test_multiple "thread find threadname_\[345\]" "test regular exp" {
    -re "Thread 6 has name \[^\r\n\]*" {
	set see6 1
	exp_continue
    }
    -re "Thread 5 has name \[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "Thread 4 has name \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "Thread 3 has name \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "Thread 2 has name \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "Thread 1 has name \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re ".*$gdb_prompt $" {
	if { $see3 && $see4 && $see5 && !$see1 && !$see2 && !$see6 } then {
	    pass "test regular exp"
	} else {
	    fail "test regular exp"
	}
    }
}

#
# Test info threads on a subset of threads
#

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0
set see6 0

gdb_test_multiple "info threads 2 4 6" "info threads 2 4 6" {
    -re ". 6 \[^\r\n\]*\"threadname_6\" \[^\r\n\]*" {
	set see6 1
	exp_continue
    }
    -re ". 5 \[^\r\n\]*\"threadname_5\" \[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re ". 4 \[^\r\n\]*\"threadname_4\" \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re ". 3 \[^\r\n\]*\"threadname_3\" \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re ". 2 \[^\r\n\]*\"threadname_2\" \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re ". 1 \[^\r\n\]*\"threadname_1\" \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see2 && $see4 && $see6 && !$see1 && !$see3 && !$see5 } then {
	    pass "info threads 2 4 6"
	} else {
	    fail "info threads 2 4 6"
	}
    }
}

#
# Test info threads on a range
#

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0
set see6 0

gdb_test_multiple "info threads 3-5" "info threads 3-5" {
    -re ". 6 .*\"threadname_6\" \[^\r\n\]*" {
	set see6 1
	exp_continue
    }
    -re ". 5 .*\"threadname_5\" \[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re ". 4 .*\"threadname_4\" \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re ". 3 .*\"threadname_3\" \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re ". 2 .*\"threadname_2\" \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re ". 1 .*\"threadname_1\" \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see3 && $see4 && $see5 && !$see1 && !$see2 && !$see6 } then {
	    pass "info threads 3-5"
	} else {
	    fail "info threads 3-5"
	}
    }
}

# Test inverted range

gdb_test "info threads 5-3" "inverted range" "test inverted range"

# Test degenerate range

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0
set see6 0

gdb_test_multiple "info threads 3-3" "info threads 3-3" {
    -re ". 6 .*\"threadname_6\" \[^\r\n\]*" {
	set see6 1
	exp_continue
    }
    -re ". 5 .*\"threadname_5\" \[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re ". 4 .*\"threadname_4\" \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re ". 3 .*\"threadname_3\" \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re ". 2 .*\"threadname_2\" \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re ". 1 .*\"threadname_1\" \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re ".*$gdb_prompt $" {
	if { $see3 && !$see1 && !$see2 && !$see4 && !$see5 && !$see6 } then {
	    pass "info threads 3-3"
	} else {
	    fail "info threads 3-3"
	}
    }
}

# Test bad input

gdb_test "info thread foo" \
    "Args must be numbers or '.' variables." \
    "info thread foo"

gdb_test "info thread foo -1" \
    "Args must be numbers or '.' variables." \
    "info thread foo -1"
@


1.8
log
@	* gdb.threads/watchpoint-fork.exp (test): Use
	standard_output_file.  Don't declare objdir.
	* gdb.threads/attach-into-signal.exp: Use standard_testfile,
	standard_output_file.
	* gdb.threads/attach-stopped.exp: Use standard_testfile.
	* gdb.threads/bp_in_thread.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/corethreads.exp: Use standard_testfile.
	* gdb.threads/execl.exp: Use standard_testfile,
	standard_output_file, clean_restart.
	* gdb.threads/fork-child-threads.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/fork-thread-pending.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/gcore-thread.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/hand-call-in-threads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/ia64-sigill.exp: Use standard_testfile.
	* gdb.threads/interrupted-hand-call.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/killed.exp: Use standard_testfile, clean_restart.
	Remove incdir.
	* gdb.threads/leader-exit.exp: Use standard_testfile.
	* gdb.threads/linux-dp.exp: Use standard_testfile, clean_restart.
	* gdb.threads/local-watch-wrong-thread.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/manythreads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/multi-create.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/no-unwaited-for-left.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-1.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-2.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-3.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-4.exp: Use standard_testfile.
	* gdb.threads/pending-step.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/print-threads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/pthread_cond_wait.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/pthreads.exp: Use standard_testfile, clean_restart.
	Remove incdir.
	* gdb.threads/schedlock.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/sigthread.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/staticthreads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/switch-threads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread-execl.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread-find.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/thread-specific.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread-unwindonsignal.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread_check.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread_events.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/threadapply.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/threxit-hop-specific.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/tls-nodebug.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/tls-shared.exp: Use standard_testfile,
	clean_restart, standard_output_file.
	* gdb.threads/tls-var.exp: Use standard_testfile,
	standard_output_file.
	* gdb.threads/tls.exp: Use standard_testfile, clean_restart.
	Remove incdir.
	* gdb.threads/watchthreads-reorder.exp: Use standard_testfile.
	* gdb.threads/watchthreads.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/watchthreads2.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
@
text
@d1 1
a1 1
# Copyright 2011-2012 Free Software Foundation, Inc.
@


1.7
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d19 1
a19 3
set testfile "linux-dp"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
d24 1
a24 3
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}
@


1.6
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a18 4
if $tracelevel then {
	strace $tracelevel
}

@


1.5
log
@	* gdb.threads/thread-find.exp: Support remote targets.
@
text
@d1 1
a1 2
# Copyright 2011
# Free Software Foundation, Inc.
@


1.5.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 1
# Copyright 2011-2012 Free Software Foundation, Inc.
@


1.4
log
@2011-02-22  Michael Snyder  <msnyder@@vmware.com>

	* gdb.threads/thread-find.exp: Add tests for bad input to
	info threads.
@
text
@d41 4
@


1.3
log
@2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdbthread.h (print_thread_info): Change prototype.
	* thread.c (print_thread_info): Accept char* instead of int for
	requested_threads argument.  Use new function number_is_in_list
	to determine which threads to list.
	(info_threads_command): Pass char* to print_thread_info.
	* cli/cli-utils.c (number_is_in_list): New function.
	* cli/cli-utils.h (number_is_in_list): Export.
	* mi/mi-main.c (mi_cmd_thread_info): Pass char* to
	print_thread_info.
	(print_one_inferior): Ditto.
	(mi_cmd_list_thread_groups): Ditto.

2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdb.threads/thread-find.exp: Update patterns for changes in
	output of "info threads" command.
@
text
@d431 9
@


1.2
log
@2011-02-17  Michael Snyder  <msnyder@@vmware.com>

	* gdb.threads/thread-find.exp: Fix regular expressions.
@
text
@d306 6
a311 2
    -re ". 1 \[^\r\n\]*\"threadname_1\" \[^\r\n\]*" {
	set see1 1
d314 2
a315 2
    -re ". 2 \[^\r\n\]*\"threadname_2\" \[^\r\n\]*" {
	set see2 1
d322 2
a323 2
    -re ". 4 \[^\r\n\]*\"threadname_4\" \[^\r\n\]*" {
	set see4 1
d326 2
a327 6
    -re ". 5 \[^\r\n\]*\"threadname_5\" \[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re ". 6 \[^\r\n\]*\"threadname_6\" \[^\r\n\]*" {
	set see6 1
d351 6
a356 2
    -re ". 1 .*\"threadname_1\" \[^\r\n\]*" {
	set see1 1
d359 2
a360 2
    -re ". 2 .*\"threadname_2\" \[^\r\n\]*" {
	set see2 1
d367 2
a368 2
    -re ". 4 .*\"threadname_4\" \[^\r\n\]*" {
	set see4 1
d371 2
a372 6
    -re ". 5 .*\"threadname_5\" \[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re ". 6 .*\"threadname_6\" \[^\r\n\]*" {
	set see6 1
@


1.1
log
@2011-02-15  Michael Snyder  <msnyder@@vmware.com>

	* command.h (enum command_class): New class 'no_set_class', for
	"show" commands without a corresponding "set" command.
	* value.c (_initialize_values): Use 'no_set_class' for "show values".
	* copying.c (_initialize_copying): Ditto for "show copying" and
	"show warranty".
	* cli/cli-cmds.c (init_cli_cmds): Ditto for "show commands" and
	"show version".
	* cli/cli-setshow.c (cmd_show_list): Skip "show" commands for
	which there is no corresponding "set" command (eg. "show copying").

2011-02-14  Michael Snyder  <msnyder@@vmware.com>

	* gdb.texinfo (threads): Document argument for "info threads" cmd.
	Document new command "thread find".

2011-02-15  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/default.exp: Add tests for thread commands.
	* gdb.base/help.exp: Add tests for thread commands.
	* gdb.threads/thread-find.exp: New test for thread find command.
@
text
@d306 2
a307 2
    -re ". 6 .*\"threadname_6.*\" \[\r\n\]*" {
	set see6 1
d310 2
a311 2
    -re ". 5 .*\"threadname_5.*\" \[\r\n\]*" {
	set see5 1
d314 2
a315 2
    -re ". 4 .*\"threadname_4.*\" \[\r\n\]*" {
	set see4 1
d318 2
a319 2
    -re ". 3 .*\"threadname_3.*\" \[\r\n\]*" {
	set see3 1
d322 2
a323 2
    -re ". 2 .*\"threadname_2.*\" \[\r\n\]*" {
	set see2 1
d326 2
a327 2
    -re ". 1 .*\"threadname_1.*\" \[\r\n\]*" {
	set see1 1
d330 1
a330 1
    -re ".*$gdb_prompt $" {
d351 2
a352 2
    -re ". 6 .*\"threadname_6.*\" \[\r\n\]*" {
	set see6 1
d355 2
a356 2
    -re ". 5 .*\"threadname_5.*\" \[\r\n\]*" {
	set see5 1
d359 2
a360 2
    -re ". 4 .*\"threadname_4.*\" \[\r\n\]*" {
	set see4 1
d363 2
a364 2
    -re ". 3 .*\"threadname_3.*\" \[\r\n\]*" {
	set see3 1
d367 2
a368 2
    -re ". 2 .*\"threadname_2.*\" \[\r\n\]*" {
	set see2 1
d371 2
a372 2
    -re ". 1 .*\"threadname_1.*\" \[\r\n\]*" {
	set see1 1
d375 1
a375 1
    -re ".*$gdb_prompt $" {
d398 1
a398 1
    -re ". 6 .*\"threadname_6.*\" \[\r\n\]*" {
d402 1
a402 1
    -re ". 5 .*\"threadname_5.*\" \[\r\n\]*" {
d406 1
a406 1
    -re ". 4 .*\"threadname_4.*\" \[\r\n\]*" {
d410 1
a410 1
    -re ". 3 .*\"threadname_3.*\" \[\r\n\]*" {
d414 1
a414 1
    -re ". 2 .*\"threadname_2.*\" \[\r\n\]*" {
d418 1
a418 1
    -re ". 1 .*\"threadname_1.*\" \[\r\n\]*" {
@

