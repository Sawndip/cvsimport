head	1.34;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.34
	gdb_7_6-2013-04-26-release:1.34
	gdb_7_6-branch:1.34.0.2
	gdb_7_6-2013-03-12-branchpoint:1.34
	gdb_7_5_1-2012-11-29-release:1.32.2.1
	gdb_7_5-2012-08-17-release:1.32.2.1
	gdb_7_5-branch:1.32.0.2
	gdb_7_5-2012-07-18-branchpoint:1.32
	gdb_7_4_1-2012-04-26-release:1.28.4.1
	gdb_7_4-2012-01-24-release:1.28.4.1
	gdb_7_4-branch:1.28.0.4
	gdb_7_4-2011-12-13-branchpoint:1.28
	gdb_7_3_1-2011-09-04-release:1.28
	gdb_7_3-2011-07-26-release:1.28
	gdb_7_3-branch:1.28.0.2
	gdb_7_3-2011-04-01-branchpoint:1.28
	gdb_7_2-2010-09-02-release:1.26
	gdb_7_2-branch:1.26.0.2
	gdb_7_2-2010-07-07-branchpoint:1.26
	gdb_7_1-2010-03-18-release:1.22
	gdb_7_1-branch:1.22.0.2
	gdb_7_1-2010-02-18-branchpoint:1.22
	gdb_7_0_1-2009-12-22-release:1.21
	gdb_7_0-2009-10-06-release:1.21
	gdb_7_0-branch:1.21.0.4
	gdb_7_0-2009-09-16-branchpoint:1.21
	arc-sim-20090309:1.19
	msnyder-checkpoint-072509-branch:1.21.0.2
	msnyder-checkpoint-072509-branchpoint:1.21
	arc-insight_6_8-branch:1.19.0.6
	arc-insight_6_8-branchpoint:1.19
	insight_6_8-branch:1.19.0.4
	insight_6_8-branchpoint:1.19
	reverse-20081226-branch:1.20.0.10
	reverse-20081226-branchpoint:1.20
	multiprocess-20081120-branch:1.20.0.8
	multiprocess-20081120-branchpoint:1.20
	reverse-20080930-branch:1.20.0.6
	reverse-20080930-branchpoint:1.20
	reverse-20080717-branch:1.20.0.4
	reverse-20080717-branchpoint:1.20
	msnyder-reverse-20080609-branch:1.20.0.2
	msnyder-reverse-20080609-branchpoint:1.20
	drow-reverse-20070409-branch:1.15.0.2
	drow-reverse-20070409-branchpoint:1.15
	gdb_6_8-2008-03-27-release:1.19
	gdb_6_8-branch:1.19.0.2
	gdb_6_8-2008-02-26-branchpoint:1.19
	gdb_6_7_1-2007-10-29-release:1.18
	gdb_6_7-2007-10-10-release:1.18
	gdb_6_7-branch:1.18.0.2
	gdb_6_7-2007-09-07-branchpoint:1.18
	insight_6_6-20070208-release:1.11
	gdb_6_6-2006-12-18-release:1.11
	gdb_6_6-branch:1.11.0.26
	gdb_6_6-2006-11-15-branchpoint:1.11
	insight_6_5-20061003-release:1.11
	gdb-csl-symbian-6_4_50_20060226-12:1.11
	gdb-csl-sourcerygxx-3_4_4-25:1.11
	nickrob-async-20060828-mergepoint:1.11
	gdb-csl-symbian-6_4_50_20060226-11:1.11
	gdb-csl-sourcerygxx-4_1-17:1.11
	gdb-csl-20060226-branch-local-2:1.11
	gdb-csl-sourcerygxx-4_1-14:1.11
	gdb-csl-sourcerygxx-4_1-13:1.11
	gdb-csl-sourcerygxx-4_1-12:1.11
	gdb-csl-sourcerygxx-3_4_4-21:1.11
	gdb_6_5-20060621-release:1.11
	gdb-csl-sourcerygxx-4_1-9:1.11
	gdb-csl-sourcerygxx-4_1-8:1.11
	gdb-csl-sourcerygxx-4_1-7:1.11
	gdb-csl-arm-2006q1-6:1.11
	gdb-csl-sourcerygxx-4_1-6:1.11
	gdb-csl-symbian-6_4_50_20060226-10:1.11
	gdb-csl-symbian-6_4_50_20060226-9:1.11
	gdb-csl-symbian-6_4_50_20060226-8:1.11
	gdb-csl-coldfire-4_1-11:1.11
	gdb-csl-sourcerygxx-3_4_4-19:1.11
	gdb-csl-coldfire-4_1-10:1.11
	gdb_6_5-branch:1.11.0.24
	gdb_6_5-2006-05-14-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-5:1.11
	nickrob-async-20060513-branch:1.11.0.22
	nickrob-async-20060513-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-4:1.11
	msnyder-reverse-20060502-branch:1.11.0.20
	msnyder-reverse-20060502-branchpoint:1.11
	gdb-csl-morpho-4_1-4:1.11
	gdb-csl-sourcerygxx-3_4_4-17:1.11
	readline_5_1-import-branch:1.11.0.18
	readline_5_1-import-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.11
	gdb-csl-symbian-20060226-branch:1.11.0.16
	gdb-csl-symbian-20060226-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.11
	msnyder-reverse-20060331-branch:1.11.0.14
	msnyder-reverse-20060331-branchpoint:1.11
	gdb-csl-available-20060303-branch:1.11.0.12
	gdb-csl-available-20060303-branchpoint:1.11
	gdb-csl-20060226-branch:1.11.0.10
	gdb-csl-20060226-branchpoint:1.11
	gdb_6_4-20051202-release:1.11
	msnyder-fork-checkpoint-branch:1.11.0.8
	msnyder-fork-checkpoint-branchpoint:1.11
	gdb-csl-gxxpro-6_3-branch:1.11.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.11
	gdb_6_4-branch:1.11.0.4
	gdb_6_4-2005-11-01-branchpoint:1.11
	gdb-csl-arm-20051020-branch:1.11.0.2
	gdb-csl-arm-20051020-branchpoint:1.11
	gdb-csl-arm-20050325-2005-q1b:1.10
	gdb-csl-arm-20050325-2005-q1a:1.10
	csl-arm-20050325-branch:1.10.0.2
	csl-arm-20050325-branchpoint:1.10
	gdb-post-i18n-errorwarning-20050211:1.10
	gdb-pre-i18n-errorwarning-20050211:1.10
	gdb_6_3-20041109-release:1.9
	gdb_6_3-branch:1.9.0.32
	gdb_6_3-20041019-branchpoint:1.9
	drow_intercu-merge-20040921:1.9
	drow_intercu-merge-20040915:1.9
	jimb-gdb_6_2-e500-branch:1.9.0.34
	jimb-gdb_6_2-e500-branchpoint:1.9
	gdb_6_2-20040730-release:1.9
	gdb_6_2-branch:1.9.0.30
	gdb_6_2-2004-07-10-gmt-branchpoint:1.9
	gdb_6_1_1-20040616-release:1.9
	gdb_6_1-2004-04-05-release:1.9
	drow_intercu-merge-20040402:1.9
	drow_intercu-merge-20040327:1.9
	ezannoni_pie-20040323-branch:1.9.0.28
	ezannoni_pie-20040323-branchpoint:1.9
	cagney_tramp-20040321-mergepoint:1.9
	cagney_tramp-20040309-branch:1.9.0.26
	cagney_tramp-20040309-branchpoint:1.9
	gdb_6_1-branch:1.9.0.24
	gdb_6_1-2004-03-01-gmt-branchpoint:1.9
	drow_intercu-20040221-branch:1.9.0.22
	drow_intercu-20040221-branchpoint:1.9
	cagney_bfdfile-20040213-branch:1.9.0.20
	cagney_bfdfile-20040213-branchpoint:1.9
	drow-cplus-merge-20040208:1.9
	carlton_dictionary-20040126-merge:1.9
	cagney_bigcore-20040122-branch:1.9.0.18
	cagney_bigcore-20040122-branchpoint:1.9
	drow-cplus-merge-20040113:1.9
	drow-cplus-merge-20031224:1.9
	drow-cplus-merge-20031220:1.9
	carlton_dictionary-20031215-merge:1.9
	drow-cplus-merge-20031214:1.9
	carlton-dictionary-20031111-merge:1.9
	gdb_6_0-2003-10-04-release:1.9
	kettenis_sparc-20030918-branch:1.9.0.16
	kettenis_sparc-20030918-branchpoint:1.9
	carlton_dictionary-20030917-merge:1.9
	ezannoni_pie-20030916-branchpoint:1.9
	ezannoni_pie-20030916-branch:1.9.0.14
	cagney_x86i386-20030821-branch:1.9.0.12
	cagney_x86i386-20030821-branchpoint:1.9
	carlton_dictionary-20030805-merge:1.9
	carlton_dictionary-20030627-merge:1.9
	gdb_6_0-branch:1.9.0.10
	gdb_6_0-2003-06-23-branchpoint:1.9
	jimb-ppc64-linux-20030613-branch:1.9.0.8
	jimb-ppc64-linux-20030613-branchpoint:1.9
	cagney_convert-20030606-branch:1.9.0.6
	cagney_convert-20030606-branchpoint:1.9
	cagney_writestrings-20030508-branch:1.8.0.24
	cagney_writestrings-20030508-branchpoint:1.8
	jimb-ppc64-linux-20030528-branch:1.9.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.9
	carlton_dictionary-20030523-merge:1.9
	cagney_fileio-20030521-branch:1.9.0.2
	cagney_fileio-20030521-branchpoint:1.9
	kettenis_i386newframe-20030517-mergepoint:1.9
	jimb-ppc64-linux-20030509-branch:1.8.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.8
	kettenis_i386newframe-20030504-mergepoint:1.8
	carlton_dictionary-20030430-merge:1.8
	kettenis_i386newframe-20030419-branch:1.8.0.20
	kettenis_i386newframe-20030419-branchpoint:1.8
	carlton_dictionary-20030416-merge:1.8
	cagney_frameaddr-20030409-mergepoint:1.8
	kettenis_i386newframe-20030406-branch:1.8.0.18
	kettenis_i386newframe-20030406-branchpoint:1.8
	cagney_frameaddr-20030403-branchpoint:1.8
	cagney_frameaddr-20030403-branch:1.8.0.16
	cagney_framebase-20030330-mergepoint:1.8
	cagney_framebase-20030326-branch:1.8.0.14
	cagney_framebase-20030326-branchpoint:1.8
	cagney_lazyid-20030317-branch:1.8.0.12
	cagney_lazyid-20030317-branchpoint:1.8
	kettenis-i386newframe-20030316-mergepoint:1.8
	offbyone-20030313-branch:1.8.0.10
	offbyone-20030313-branchpoint:1.8
	kettenis-i386newframe-20030308-branch:1.8.0.8
	kettenis-i386newframe-20030308-branchpoint:1.8
	carlton_dictionary-20030305-merge:1.8
	cagney_offbyone-20030303-branch:1.8.0.6
	cagney_offbyone-20030303-branchpoint:1.8
	carlton_dictionary-20030207-merge:1.8
	interps-20030203-mergepoint:1.8
	interps-20030202-branch:1.8.0.4
	interps-20030202-branchpoint:1.8
	cagney-unwind-20030108-branch:1.8.0.2
	cagney-unwind-20030108-branchpoint:1.8
	carlton_dictionary-20021223-merge:1.7
	gdb_5_3-2002-12-12-release:1.7
	carlton_dictionary-20021115-merge:1.7
	kseitz_interps-20021105-merge:1.7
	kseitz_interps-20021103-merge:1.7
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.16
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.14
	carlton_dictionary-20020920-branchpoint:1.7
	gdb_5_3-branch:1.7.0.12
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.7
	cagney_sysregs-20020825-branch:1.7.0.10
	cagney_sysregs-20020825-branchpoint:1.7
	readline_4_3-import-branch:1.7.0.8
	readline_4_3-import-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.6
	kseitz_interps-20020528-branch:1.7.0.6
	kseitz_interps-20020528-branchpoint:1.7
	cagney_regbuf-20020515-branch:1.7.0.4
	cagney_regbuf-20020515-branchpoint:1.7
	jimb-macro-020506-branch:1.7.0.2
	jimb-macro-020506-branchpoint:1.7
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	gdb-post-ptid_t-2001-05-03:1.3
	gdb-pre-ptid_t-2001-05-03:1.3
	insight-precleanup-2001-01-01:1.1.1.3
	gdb-post-protoization-2000-07-29:1.1.1.3
	gdb-pre-protoization-2000-07-29:1.1.1.3
	gdb-premipsmulti-2000-06-06-branch:1.1.1.3.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.3
	gdb-post-params-removal-2000-06-04:1.1.1.3
	gdb-pre-params-removal-2000-06-04:1.1.1.3
	gdb-post-params-removal-2000-05-28:1.1.1.3
	gdb-pre-params-removal-2000-05-28:1.1.1.3
	gdb_5_0-2000-05-19-release:1.1.1.3
	gdb_4_18_2-2000-05-18-release:1.1.1.3
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.3
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.3
	gdb_5_0-2000-04-10-branch:1.1.1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.3
	repo-unification-2000-02-06:1.1.1.3
	insight-2000-02-04:1.1.1.3
	gdb-2000-02-04:1.1.1.3
	gdb-2000-02-02:1.1.1.3
	gdb-2000-02-01:1.1.1.3
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.34
date	2013.01.01.06.41.27;	author brobecke;	state Exp;
branches;
next	1.33;

1.33
date	2012.08.02.15.59.59;	author uweigand;	state Exp;
branches;
next	1.32;

1.32
date	2012.06.26.19.23.20;	author tromey;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2012.04.25.13.54.00;	author tromey;	state Exp;
branches;
next	1.30;

1.30
date	2012.01.16.16.21.53;	author palves;	state Exp;
branches;
next	1.29;

1.29
date	2012.01.04.08.27.55;	author brobecke;	state Exp;
branches;
next	1.28;

1.28
date	2011.01.01.15.33.50;	author brobecke;	state Exp;
branches
	1.28.4.1;
next	1.27;

1.27
date	2010.12.21.19.10.15;	author tromey;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.10.19.48.20;	author msnyder;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.02.19.58.21;	author msnyder;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.05.18.07.03;	author brobecke;	state Exp;
branches;
next	1.23;

1.23
date	2010.03.03.22.13.51;	author devans;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.01.07.32.06;	author brobecke;	state Exp;
branches;
next	1.21;

1.21
date	2009.01.03.05.58.07;	author brobecke;	state Exp;
branches;
next	1.20;

1.20
date	2008.04.17.21.36.23;	author uweigand;	state Exp;
branches;
next	1.19;

1.19
date	2008.01.01.22.53.22;	author drow;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.23.18.14.19;	author brobecke;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.14.16.56.07;	author drow;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.14.16.52.13;	author drow;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.09.17.59.14;	author drow;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.31.20.01.25;	author drow;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.29.16.16.46;	author nathan;	state Exp;
branches;
next	1.12;

1.12
date	2006.11.28.15.16.48;	author nathan;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.04.21.21.42;	author drow;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.15.18.28.54;	author jimb;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.14.19.36.56;	author jjohnstn;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.04.23.05.05;	author drow;	state Exp;
branches
	1.8.20.1;
next	1.7;

1.7
date	2002.04.24.22.11.28;	author drow;	state Exp;
branches
	1.7.14.1
	1.7.16.1;
next	1.6;

1.6
date	2002.01.31.05.08.41;	author drow;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.31.05.05.29;	author drow;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.25.01.29.01;	author msnyder;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.20.15.54.34;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.06.08.21.59;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.10.19.02.46.48;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.32.2.1
date	2012.08.02.16.00.51;	author uweigand;	state Exp;
branches;
next	;

1.28.4.1
date	2012.01.06.04.54.29;	author brobecke;	state Exp;
branches;
next	;

1.8.20.1
date	2003.05.18.09.44.36;	author kettenis;	state Exp;
branches;
next	;

1.7.14.1
date	2003.02.07.19.18.00;	author carlton;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2003.05.23.18.40.52;	author carlton;	state Exp;
branches;
next	;

1.7.16.1
date	2003.12.14.20.27.58;	author drow;	state Exp;
branches;
next	;

1.1.1.1
date	99.10.19.02.46.48;	author jsm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.12.07.03.56.20;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.12.22.21.45.20;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 1999-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@gnu.org

#### Dining Philosophers, on LinuxThreads - Jim Blandy <jimb@@cygnus.com>
####
#### At the moment, GDB's support for LinuxThreads is pretty
#### idiosyncratic --- GDB's output doesn't look much like the output
#### it produces for other thread implementations, messages appear at
#### different times, etc.  So these tests are specific to LinuxThreads.
####
#### However, if all goes well, Linux will soon have a libthread_db
#### interface, and GDB will manage it the same way it does other
#### libthread_db-based systems.  Then, we can adjust this file to
#### work with any such system.

### Other things we ought to test:
### stepping a thread while others are running
### killing and restarting
### quitting gracefully


# This only works with Linux configurations.
if ![istarget *-*-linux-gnu*] then {
    return
}

standard_testfile
if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != ""} {
    return -1
}

clean_restart ${binfile}
gdb_test_no_output "set print sevenbit-strings"
runto_main

# There should be no threads initially.
gdb_test "info threads" ".*" "info threads 1"

# Try stepping over the thread creation function.
gdb_breakpoint [gdb_get_line_number "linuxthreads.exp: create philosopher"]
set expect_manager -1
for {set i 0} {$i < 5} {incr i} {
    gdb_continue_to_breakpoint "about to create philosopher: $i"
    set threads_before {}
    gdb_test_multiple "info threads" "info threads before: $i" {
	-re "info threads\r\n" {
	    exp_continue
	}
	-re "^ *Id.*Frame *\[\r\n\]+" {
	    exp_continue
	}
	-re "^. +(\[0-9\]+ *Thread \[-0-9a-fx\]+) \[^\n\]*\n" {
	    verbose -log "found thread $expect_out(1,string)" 2
	    lappend threads_before $expect_out(1,string)
	    exp_continue
	}
	-re "^\[^\n\]*\n" {
	    verbose -log "skipping line" 2
	    exp_continue -continue_timer
	}
	-re "^$gdb_prompt $" {
	}
    }
    set threads_created 0
    gdb_test_multiple "next" "create philosopher: $i" {
	-re "^next\r\n" {
	    exp_continue
	}
	-re "^ *\[_!\] \[0-9\]* \[_!\]\r\n" {
	    # Ignore program output.
	    exp_continue -continue_timer
	}
	-re "^\\\[New \[^\]\n\]+\\\]\[^\n\]+\n" {
	    incr threads_created
	    exp_continue
	}
	-re "^189\[^\n\]+\n" {
	    exp_continue
	}
	-re "^$gdb_prompt $" {
	}
	-re "Program received signal.*(Unknown signal|SIGUSR|Real-time event).*$gdb_prompt $" {
	    # It would be nice if we could catch the message that GDB prints
	    # when it first notices that the thread library doesn't support
	    # debugging, or if we could explicitly ask GDB somehow.
	    unsupported "This GDB does not support threads on this system."
	    return -1
	}
	-re "$gdb_prompt $" {
	}
    }
    if { $threads_created == 0 } {
	# Not all targets announce new threads as they are created.
	# For example, the GDB
	# remote protocol target only finds out about threads when
	# they actually report some event like a breakpoint hit,
	# or when the user types 'info threads'.
	unsupported "create philosopher: $i"
    } elseif { $threads_created == 1 } {
	if { $expect_manager < 0 } {
	    set expect_manager 0
	}
	pass "create philosopher: $i"
    } elseif { !$i && $threads_created == 2 } {
	# Two threads are created the first time in LinuxThreads,
	# where the second is the manager thread.  In NPTL, there is none.
	set expect_manager 1
	pass "create philosopher: $i"
    } else {
	fail "create philosopher: $i"
    }
    
    set threads_after {}
    gdb_test_multiple "info threads" "info threads after: $i" {
	-re "info threads\r\n" {
	    exp_continue
	}
	-re "^ *Id.*Frame *\[\r\n\]+" {
	    exp_continue
	}
	-re "^. +(\[0-9\]+ *Thread \[-0-9a-fx\]+) \[^\n\]*\n" {
	    set name $expect_out(1,string)
	    for {set j 0} {$j != [llength $threads_before] } {incr j} {
		if {$name == [lindex $threads_before $j]} {
		    set threads_before [lreplace $threads_before $j $j]
		    set name ""
		    break
		}
	    }
	    if { $name != "" } {
		lappend threads_after $name
	    }
	    exp_continue
	}
	-re "^\[^\n\]*\n" {
	    verbose -log "skipping line" 2
	    exp_continue -continue_timer
	}
	-re "^$gdb_prompt $" {
	    if { [llength $threads_before] != 0 } {
		fail "info threads after: $i"
	    } elseif { !$i && [llength $threads_after] == 2 } {
		set expect_manager 1
		pass "info threads after: $i"
	    } elseif { [llength $threads_after] == 1 } {
		if { $expect_manager < 0 } {
		    set expect_manager 0
		}
		pass "info threads after: $i"
	    } else {
		fail "info threads after: $i"
	    }
	}
    }
}

set nthreads 6

# Run until there are some threads.
gdb_breakpoint [gdb_get_line_number "linuxthreads.exp: info threads 2"]
gdb_continue_to_breakpoint "main thread's sleep"
set info_threads_ptn ".*"
for {set i $nthreads} {$i > 0} {incr i -1} {
    append info_threads_ptn "$i *Thread .*"
}
append info_threads_ptn "\[\r\n\]+$gdb_prompt $"
set info_threads_manager_ptn "[expr $nthreads + 1] *Thread .*$info_threads_ptn"

gdb_test_multiple "info threads" "info threads 2" {
    -re "$info_threads_manager_ptn" {
	# We did see a manager thread.  Check that against what we expected.
	switch -exact -- $expect_manager {
	    -1 {
		# We weren't sure whether to expect a manager thread.
		pass "info threads 2"
	    }
	    1 {
		# We were expecting a manager thread.
		pass "info threads 2"
	    }
	    0 {
		# We were not expecting to see the manager thread.
		fail "info threads 2"
	    }
	}
	set expect_manager 1
	incr nthreads
    }
    -re "$info_threads_ptn" {
	# We did not see a manager thread.  Check that against what we
	# expected.
	switch -exact -- $expect_manager {
	    -1 {
		# We weren't sure whether to expect a manager thread.
		# Don't expect it from here on out.
		pass "info threads 2"
	    }
	    1 {
		# We were expecting a manager thread, but we didn't see one.
		fail "info threads 2"
	    }
	    0 {
		# We were not expecting to see the manager thread.
		pass "info threads 2"
	    }
	}
	set expect_manager 0
    }
}


# Try setting a thread-specific breakpoint.
gdb_breakpoint "print_philosopher thread 5"
gdb_continue_to_breakpoint "thread 5's print"
# When there is no debugging info available for the thread library,
# the backtrace entry for philosopher's caller looks like:
#    #2  0x4001c548 in pthread_create () from /lib/libpthread.so.0
# If you do have debug info, the output obviously depends more on the
# exact library in use; under NPTL, you get:
#    #2  0x0012b7fc in start_thread (arg=0x21) at pthread_create.c:264
gdb_test "where" "print_philosopher.*philosopher.* \(from .*libpthread\|at pthread_create\|in pthread_create\).*" \
	"first thread-specific breakpoint hit"

# Make sure it's catching the right thread.  Try hitting the
# breakpoint ten times, and make sure we don't get anyone else.
set only_five 1
for {set i 0} {$only_five > 0 && $i < 10} {incr i} {
    gdb_continue_to_breakpoint "thread 5's print, pass: $i"
    gdb_test_multiple "info threads" "" {
	-re "\[*\] 5 *Thread .* +print_philosopher .*\r\n$gdb_prompt $" {
	    # Okay this time.
	}
	-re ".*$gdb_prompt $" {
	    set only_five 0
	}
	timeout { 
	    set only_five -1
	}
    }
}

set name "thread-specific breakpoint is thread-specific"
if {$only_five ==  1} { pass $name }
if {$only_five ==  0} { fail $name }
if {$only_five == -1} { fail "$name (timeout)" }


### Select a particular thread.
proc select_thread {thread} {
    global gdb_prompt

    gdb_test "thread $thread" \
	"\\\[Switching to thread .*\\\].*" \
	"selected thread: $thread"
}

### Select THREAD, check for a plausible backtrace, and make sure
### we're actually selecting a different philosopher each time.
### Return true if the thread had a stack which was not only
### acceptable, but interesting.  SEEN should be an array in which
### SEEN(N) exists iff we have found philosopher number N before.

set main_seen 0
set manager_seen 0

proc check_philosopher_stack {thread seen_name} {
    global gdb_prompt
    upvar $seen_name seen
    global main_seen
    global expect_manager manager_seen

    set name "philosopher is distinct: $thread"
    set interesting 0

    select_thread $thread
    gdb_test_multiple "where" "$name" {
	-re ".* in philosopher \\(data=(0x\[0-9a-f\]+).*\r\n$gdb_prompt $" {
	    set data $expect_out(1,string)
	    if {[info exists seen($data)]} {
		fail $name
	    } else {
		pass $name
		set seen($data) yep
	    }
	    set interesting 1
	}
	-re ".* in __pthread_manager \\(.*$gdb_prompt $" {
	    if {$manager_seen == 1} {
		fail "manager thread is distinct: $thread"
	    } else {
		set manager_seen 1
		pass "manager thread is distinct: $thread"
	    }
	    set interesting 1
	}
	-re "pthread_start_thread.*\r\n$gdb_prompt $" {
	    ## Maybe the thread hasn't started yet.
	    pass $name
	}
	-re ".* in main \\(.*$gdb_prompt $" {
	    if {$main_seen == 1} {
		fail "main is distinct: $thread"
	    } else {
		set main_seen 1
		pass "main is distinct: $thread"
	    }
	    set interesting 1
	}
	-re " in \\?\\?.*\r\n$gdb_prompt $" {
	    ## Sometimes we can't get a backtrace.  I'm going to call
	    ## this a pass, since we do verify that at least one
	    ## thread was interesting, so we can get more consistent
	    ## test suite totals.  But in my heart, I think it should
	    ## be an xfail.
	    pass $name
	}
    }

    return $interesting
}

set any_interesting 0
catch {unset seen}
array set seen {}
for {set i 1} {$i <= $nthreads} {incr i} {
    if [check_philosopher_stack $i seen] {
	set any_interesting 1
    }
}
unset seen

if {$any_interesting} {
    pass "found an interesting thread"
} else {
    fail "found an interesting thread"
}

if {$manager_seen == $expect_manager} {
    pass "manager thread found (not found) when expected"
} else {
    fail "manager thread found (not found) when expected"
}
@


1.33
log
@	* gdb.base/annota1.exp: Accept no frames-invalid notification
	when starting up the program.
	* gdb.python/py-value.exp (test_value_numeric_ops): Pointers may
	show a symbolic value as well.
	* gdb.server/server-exec-info.exp: Skip test when skipping
	gdbserver test and/or when skipping shared library tests.
	* gdb.threads/linux-dp.exp: Unset "seen" when done with it to
	avoid name conflicts with other tests.
@
text
@d1 1
a1 1
# Copyright 1999, 2001-2012 Free Software Foundation, Inc.
@


1.32
log
@	* gdb.threads/watchpoint-fork.exp (test): Use
	standard_output_file.  Don't declare objdir.
	* gdb.threads/attach-into-signal.exp: Use standard_testfile,
	standard_output_file.
	* gdb.threads/attach-stopped.exp: Use standard_testfile.
	* gdb.threads/bp_in_thread.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/corethreads.exp: Use standard_testfile.
	* gdb.threads/execl.exp: Use standard_testfile,
	standard_output_file, clean_restart.
	* gdb.threads/fork-child-threads.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/fork-thread-pending.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/gcore-thread.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/hand-call-in-threads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/ia64-sigill.exp: Use standard_testfile.
	* gdb.threads/interrupted-hand-call.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/killed.exp: Use standard_testfile, clean_restart.
	Remove incdir.
	* gdb.threads/leader-exit.exp: Use standard_testfile.
	* gdb.threads/linux-dp.exp: Use standard_testfile, clean_restart.
	* gdb.threads/local-watch-wrong-thread.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/manythreads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/multi-create.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/no-unwaited-for-left.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-1.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-2.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-3.exp: Use standard_testfile.
	* gdb.threads/non-ldr-exc-4.exp: Use standard_testfile.
	* gdb.threads/pending-step.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/print-threads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/pthread_cond_wait.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/pthreads.exp: Use standard_testfile, clean_restart.
	Remove incdir.
	* gdb.threads/schedlock.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/sigthread.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/staticthreads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/switch-threads.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread-execl.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread-find.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/thread-specific.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread-unwindonsignal.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread_check.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/thread_events.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/threadapply.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/threxit-hop-specific.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
	* gdb.threads/tls-nodebug.exp: Use standard_testfile,
	clean_restart.
	* gdb.threads/tls-shared.exp: Use standard_testfile,
	clean_restart, standard_output_file.
	* gdb.threads/tls-var.exp: Use standard_testfile,
	standard_output_file.
	* gdb.threads/tls.exp: Use standard_testfile, clean_restart.
	Remove incdir.
	* gdb.threads/watchthreads-reorder.exp: Use standard_testfile.
	* gdb.threads/watchthreads.exp: Use standard_testfile.  Remove
	incdir.
	* gdb.threads/watchthreads2.exp: Use standard_testfile,
	clean_restart.  Remove incdir.
@
text
@d345 1
@


1.32.2.1
log
@	* gdb.base/annota1.exp: Accept no frames-invalid notification
	when starting up the program.
	* gdb.python/py-value.exp (test_value_numeric_ops): Pointers may
	show a symbolic value as well.
	* gdb.server/server-exec-info.exp: Skip test when skipping
	gdbserver test and/or when skipping shared library tests.
	* gdb.threads/linux-dp.exp: Unset "seen" when done with it to
	avoid name conflicts with other tests.
@
text
@a344 1
unset seen
@


1.31
log
@	* gdb.threads/linux-dp.exp: Unset 'seen' before 'array set'.
@
text
@d42 1
a42 3
set testfile "linux-dp"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
d47 1
a47 3
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}
@


1.30
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d342 1
a343 1
unset seen
@


1.29
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a35 4
if $tracelevel then {
	strace $tracelevel
}

@


1.28
log
@run copyright.sh for 2011.
@
text
@d1 1
a1 2
# Copyright 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
# 2011 Free Software Foundation, Inc.
@


1.28.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 1
# Copyright 1999, 2001-2012 Free Software Foundation, Inc.
@


1.27
log
@gdb
	* thread.c (print_thread_info): Make a ui-out table in CLI mode.
gdb/testsuite
	* gdb.threads/execl.exp: Update.
	* gdb.threads/linux-dp.exp: Update.
	* gdb.threads/manythreads.exp: Update.
	* gdb.threads/tls.exp: Update.
@
text
@d1 2
a2 2
# Copyright 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
# Free Software Foundation, Inc.
@


1.26
log
@2010-06-08  Michael Snyder  <msnyder@@vmware.com>

	* gdb.ada/assign_1.exp: Use ".*" instead of "" as wildcard regexp.
	* gdb.ada/boolean_expr.exp:
	* gdb.ada/frame_args.exp: Ditto.
	* gdb.ada/lang_switch.exp: Ditto.
	* gdb.ada/ptype_arith_binop.exp: Ditto.
	* gdb.ada/ref_param.exp: Ditto.
	* gdb.ada/type_coercion.exp:Ditto.

	* gdb.asm/asm-source.exp: Ditto.

	* gdb.base/attach.exp: Ditto.
	* gdb.base/bitfields2.exp: Ditto.
	* gdb.base/call-signal-resume.exp: Ditto.
	* gdb.base/callfuncs.exp: Ditto.
	* gdb.base/commands.exp: Ditto.
	* gdb.base/dbx.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* gdb.base/dump.exp: Ditto.
	* gdb.base/exprs.exp: Ditto.
	* gdb.base/freebpcmd.exp: Ditto.
	* gdb.base/interrupt.exp: Ditto.
	* gdb.base/list.exp: Ditto.
	* gdb.base/long_long.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/ptype.exp: Ditto.
	* gdb.base/return.exp: Ditto.
	* gdb.base/setshow.exp: Ditto.
	* gdb.base/sigbpt.exp: Ditto.
	* gdb.base/sigrepeat.exp: Ditto.

	* gdb.cp/classes.exp: Ditto.

	* gdb.dwarf2/dw2-restore.exp: Ditto.

	* gdb.gdb/selftest.exp: Ditto.

	* gdb.multi/base.exp: Ditto.
	* gdb.multi/bkpt-multi-exec.exp: Ditto.

	* gdb.python/py-block.exp: Ditto.
	* gdb.python/py-prettyprint.exp: Ditto.
	* gdb.python/py-template.exp: Ditto.

	* gdb.server/ext-attach.exp: Ditto.
	* gdb.server/ext-run.exp: Ditto.
	* gdb.server/server-mon.exp: Ditto.

	* gdb.threads/fork-thread-pending.exp: Ditto.
	* gdb.threads/hand-call-in-threads.exp: Ditto.
	* gdb.threads/interrupted-hand-call.exp: Ditto.
	* gdb.threads/linux-dp.exp: Ditto.
	* gdb.threads/manythreads.exp: Ditto.
	* gdb.threads/print-threads.exp: Ditto.
	* gdb.threads/pthreads.exp: Ditto.
	* gdb.threads/schedlock.exp: Ditto.
	* gdb.threads/thread-unwindonsignal.exp: Ditto.
	* gdb.threads/threadapply.exp: Ditto.
@
text
@d73 4
a76 1
	-re "^. +(\[0-9\]+ Thread \[-0-9a-fx\]+) \[^\n\]*\n" {
d142 4
a145 1
	-re "^. +(\[0-9\]+ Thread \[-0-9a-fx\]+) \[^\n\]*\n" {
d186 1
a186 1
set info_threads_ptn ""
d188 1
a188 1
    append info_threads_ptn "$i Thread .*"
d191 1
a191 1
set info_threads_manager_ptn "[expr $nthreads + 1] Thread .*$info_threads_ptn"
d254 1
a254 1
	-re "\\* 5 Thread .*  print_philosopher .*\r\n$gdb_prompt $" {
@


1.25
log
@2010-06-02  Michael Snyder  <msnyder@@msnyder-server.eng.vmware.com>

	* gdb.threads/attach-stopped.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/attachstop-mt.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/gcore-thread.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/hand-call-in-threads.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/linux-dp.exp: Replace uses of send_gdb / gdb_expect.
	* gdb.threads/print-threads.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/pthreads.exp: Replace uses of send_gdb / gdb_expect.
	* gdb.threads/schedlock.exp: Replace uses of send_gdb / gdb_expect.
	* gdb.threads/sigthread.exp: Replace uses of send_gdb / gdb_expect.
@
text
@d61 1
a61 1
gdb_test "info threads" "" "info threads 1"
@


1.24
log
@Do not set prms_id/bug_id anymore.

2010-05-05  Joel Brobecker  <brobecker@@adacore.com>

	Remove the use of prms_id and bug_id throughout the testsuite.
@
text
@d57 1
a57 1
send_gdb "set print sevenbit-strings\n" ; gdb_expect -re "$gdb_prompt $"
a67 1
    send_gdb "info threads\n"
d69 1
a69 1
    gdb_expect {
a83 3
	timeout {
	    fail "(timeout) info threads before: $i"
	}
a84 1
    send_gdb "next\n"
d86 1
a86 1
    gdb_expect {
a111 3
	timeout {
	    fail "(timeout) create philosopher: $i"
	}
a133 1
    send_gdb "info threads\n"
d135 1
a135 1
    gdb_expect {
a171 3
	timeout {
	    fail "(timeout) info threads after: $i"
	}
a172 1
    
d247 1
a247 2
    send_gdb "info threads\n"
    gdb_expect {
d270 3
a272 12
    send_gdb "thread $thread\n"
    gdb_expect {
	-re "\\\[Switching to thread .*\\\].*\r\n$gdb_prompt $" {
	    pass "selected thread: $thread"
	}
	-re "$gdb_prompt $" {
	    fail "selected thread: $thread"
	}
	timeout {
	    fail "selected thread: $thread (timeout)"
	}
    }
d294 1
a294 2
    send_gdb "where\n"
    gdb_expect {
a334 6
	-re "$gdb_prompt $" {
	    fail $name
	}
	timeout {
	    fail "$name (timeout)" 
	}
@


1.23
log
@	* gdb.threads/linux-dp.c (shared_random): Call rand instead of rand_r.
	* gdb.threads/linux-dp.exp: Compile with gdb_compile_pthreads instead
	of gdb_compile.  Add another pattern to match android backtrace.
@
text
@a40 2
set prms_id 0
set bug_id 0
@


1.22
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d52 1
a52 1
if {[gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug libs=-lpthread}] != ""} {
d250 1
a250 1
#    #1  0x4001c548 in pthread_create () from /lib/libpthread.so.0
d254 1
a254 1
gdb_test "where" "print_philosopher.*philosopher.* \(from .*libpthread\|at pthread_create\).*" \
@


1.21
log
@        Updated copyright notices for most files.
@
text
@d1 1
a1 1
# Copyright 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.20
log
@2008-04-17  Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb.threads/linux-dp.exp: Continue after unrecognized lines.
@
text
@d1 1
a1 1
# Copyright 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
@


1.19
log
@	Updated copyright notices for most files.
@
text
@d83 1
d166 1
@


1.18
log
@        Switch the license of all .exp files to GPLv3.
        Switch the license of all .f and .f90 files to GPLv3.
        Switch the license of all .s and .S files to GPLv3.
@
text
@d1 1
a1 1
# Copyright 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007
@


1.17
log
@	* gdb.threads/linux-dp.exp: Allow non-hexadecimal IDs also.
@
text
@d6 1
a6 1
# the Free Software Foundation; either version 2 of the License, or
d8 1
a8 1
# 
d13 1
a13 1
# 
d15 1
a15 2
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.16
log
@	* linux-thread-db.c (thread_db_pid_to_str): Print thread IDs
	as hexadecimal.

	* gdb.threads/linux-dp.exp: Expect hexadecimal thread IDs.
	* gdb.threads/print-threads.exp (test_all_threads): Allow
	negative and hexadecimal thread IDs.
@
text
@d77 1
a77 1
	-re "^. +(\[0-9\]+ Thread 0x\[0-9a-f\]+) \[^\n\]*\n" {
d150 1
a150 1
	-re "^. +(\[0-9\]+ Thread 0x\[0-9a-f\]+) \[^\n\]*\n" {
@


1.15
log
@Copyright updates for 2007.
@
text
@d77 1
a77 1
	-re "^. +(\[0-9\]+ Thread \[-0-9\]+) \[^\n\]*\n" {
d150 1
a150 1
	-re "^. +(\[0-9\]+ Thread \[-0-9\]+) \[^\n\]*\n" {
@


1.14
log
@	* gdb.base/annota1.exp: Allow .*printf in backtraces.
	* gdb.base/annota3.exp: Likewise.
	* gdb.base/sigstep.exp (advancei): Fail if we hit the breakpoint
	again (instead of timing out).
	* gdb.gdb/selftest.exp (do_steps_and_nexts): Add an XFAIL for
	GCC bug 26475.
	* gdb.java/jmisc.exp: Adjust to work with method signatures including
	return types.  Add kfails for GDB bugs 2214 and 2215.  Move exit
	test from jmisc1.exp.
	* gdb.java/jmisc1.exp: Delete.
	* gdb.java/jprint.exp: Adjust to work with method signatures including
	return types.
	* gdb.objc/basicclass.exp: Update for gobjc 4.1 debug info.
	* gdb.threads/linux-dp.exp: Don't be confused by program output.
	* lib/java.exp (compile_java_from_source): Pass the correct type
	to target_compile.
@
text
@d1 1
a1 1
# Copyright 1999, 2001, 2002, 2003, 2004, 2005, 2006
@


1.13
log
@	* gdb.threads/linux-dp.exp: Adjust regexps used to scan thread
	info.  Adjust test names.
@
text
@d1 2
a2 1
# Copyright 1999, 2001, 2002, 2003 Free Software Foundation, Inc.
d97 4
@


1.12
log
@	* gdb.threads/linux-dp.exp: Read thread table before and after
	creating each philosopher and verify it.
@
text
@d76 1
a76 1
	-re "^\\*? +(\[0-9\]+ Thread \[0-9\]+) \[^\n\]*\n" {
d81 3
d87 1
a87 1
	    fail "(timeout) info threads"
d145 1
a145 1
	-re "^\\*? +(\[0-9\]+ Thread \[0-9\]+) \[^\n\]+\n" {
d159 3
d164 1
a164 1
		fail "create philosopher: $i"
d167 1
a167 1
		pass "create philosopher: $i"
d172 1
a172 1
		pass "create philosopher: $i"
d174 1
a174 1
		fail "create philosopher: $i"
d178 1
a178 1
	    fail "(timeout) info threads"
@


1.11
log
@	* gdb.threads/linux-dp.exp: Check for *-*-linux-gnu*.
@
text
@d70 17
d88 1
d90 9
a98 7
	-re "\\\[New .*\\\].*\\\[New .*\\\].*$gdb_prompt $" {
	    # Two threads are created the first time in LinuxThreads,
	    # where the second is the manager thread.  In NPTL, there is none.
	    if {$i == 0} {
		set expect_manager 1
	    }
	    pass "create philosopher: $i"
d100 1
a100 5
	-re "\\\[New .*\\\].*$gdb_prompt $" {
	    if {$i == 0} {
		set expect_manager 0
	    }
	    pass "create philosopher: $i"
a109 6
	    # We used to fail here, but not all targets announce new
	    # threads as they are created.  For example, the GDB
	    # remote protocol target only finds out about threads when
	    # they actually report some event like a breakpoint hit,
	    # or when the user types 'info threads'.
	    unresolved "create philosopher: $i"
d115 61
@


1.10
log
@* gdb.threads/linux-dp.exp: Fix output regexp to handle output
under NPTL when there is debugging info available for libpthread.
@
text
@d45 1
a45 1
if ![istarget *-*-linux-gnu] then {
@


1.9
log
@
2003-05-14  Jeff Johnston  <jjohnstn@@redhat.com>

        Roland McGrath  <roland@@redhat.com>
        * gdb.threads/linux-dp.exp: Account for fact that in nptl model
        there is no manager thread.
@
text
@d94 6
a99 1
	    fail "create philosopher: $i"
d107 1
a107 5
if {$expect_manager} {
    set nthreads 7
} else {
    set nthreads 6
}
d116 45
a160 1
gdb_test "info threads" $info_threads_ptn "info threads 2"
d165 7
a171 1
gdb_test "where" "print_philosopher.*philosopher.* from .*libpthread.*" \
@


1.8
log
@	Fix PR gdb/844
	* lib/gdb.exp (gdb_compile): Handle "quiet" option.
	(gdb_compile_pthreads): Pass "quiet" to gdb_compile.

	* gdb.threads/gcore-thread.exp: Use gdb_compile_pthreads.  Return
	instead of calling gdb_suppress_entire_file.
	* gdb.threads/print-threads.exp: Likewise.
	* gdb.threads/schedlock.exp: Likewise.

	* gdb.threads/killed.exp: Return instead of calling
	gdb_suppress_entire_file.
	* gdb.threads/linux-dp.exp: Likewise.
	* gdb.threads/pthreads.exp: Likewise.
@
text
@d67 1
d72 8
d81 3
d102 6
d111 5
a115 1
gdb_test "info threads" "7 Thread .*6 Thread .*5 Thread .*4 Thread .*3 Thread .*2 Thread .*1 Thread .*" "info threads 2"
d120 1
a120 1
gdb_test "where" "print_philosopher.*philosopher.*pthread_start_thread.*" \
d179 1
a179 1
    global manager_seen
d241 1
a241 1
for {set i 1} {$i <= 7} {incr i} {
d251 6
@


1.8.20.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@a66 1
set expect_manager -1
a70 8
	-re "\\\[New .*\\\].*\\\[New .*\\\].*$gdb_prompt $" {
	    # Two threads are created the first time in LinuxThreads,
	    # where the second is the manager thread.  In NPTL, there is none.
	    if {$i == 0} {
		set expect_manager 1
	    }
	    pass "create philosopher: $i"
	}
a71 3
	    if {$i == 0} {
		set expect_manager 0
	    }
a89 6
if {$expect_manager} {
    set nthreads 7
} else {
    set nthreads 6
}

d93 1
a93 5
set info_threads_ptn ""
for {set i $nthreads} {$i > 0} {incr i -1} {
    append info_threads_ptn "$i Thread .*"
}
gdb_test "info threads" $info_threads_ptn "info threads 2"
d98 1
a98 1
gdb_test "where" "print_philosopher.*philosopher.* from .*libpthread.*" \
d157 1
a157 1
    global expect_manager manager_seen
d219 1
a219 1
for {set i 1} {$i <= $nthreads} {incr i} {
a228 6
}

if {$manager_seen == $expect_manager} {
    pass "manager thread found (not found) when expected"
} else {
    fail "manager thread found (not found) when expected"
@


1.7
log
@2002-04-24  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.threads/linux-dp.exp: Use 'unset' instead of 'array unset'.
@
text
@d1 1
a1 1
# Copyright 1999, 2001, 2002 Free Software Foundation, Inc.
d53 1
a53 1
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
@


1.7.16.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
# Copyright 1999, 2001, 2002, 2003 Free Software Foundation, Inc.
d53 1
a53 1
    return -1
a66 1
set expect_manager -1
a70 8
	-re "\\\[New .*\\\].*\\\[New .*\\\].*$gdb_prompt $" {
	    # Two threads are created the first time in LinuxThreads,
	    # where the second is the manager thread.  In NPTL, there is none.
	    if {$i == 0} {
		set expect_manager 1
	    }
	    pass "create philosopher: $i"
	}
a71 3
	    if {$i == 0} {
		set expect_manager 0
	    }
a89 6
if {$expect_manager} {
    set nthreads 7
} else {
    set nthreads 6
}

d93 1
a93 5
set info_threads_ptn ""
for {set i $nthreads} {$i > 0} {incr i -1} {
    append info_threads_ptn "$i Thread .*"
}
gdb_test "info threads" $info_threads_ptn "info threads 2"
d98 1
a98 1
gdb_test "where" "print_philosopher.*philosopher.* from .*libpthread.*" \
d157 1
a157 1
    global expect_manager manager_seen
d219 1
a219 1
for {set i 1} {$i <= $nthreads} {incr i} {
a228 6
}

if {$manager_seen == $expect_manager} {
    pass "manager thread found (not found) when expected"
} else {
    fail "manager thread found (not found) when expected"
@


1.7.14.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1 1
a1 1
# Copyright 1999, 2001, 2002, 2003 Free Software Foundation, Inc.
d53 1
a53 1
    return -1
@


1.7.14.2
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@a66 1
set expect_manager -1
a70 8
	-re "\\\[New .*\\\].*\\\[New .*\\\].*$gdb_prompt $" {
	    # Two threads are created the first time in LinuxThreads,
	    # where the second is the manager thread.  In NPTL, there is none.
	    if {$i == 0} {
		set expect_manager 1
	    }
	    pass "create philosopher: $i"
	}
a71 3
	    if {$i == 0} {
		set expect_manager 0
	    }
a89 6
if {$expect_manager} {
    set nthreads 7
} else {
    set nthreads 6
}

d93 1
a93 5
set info_threads_ptn ""
for {set i $nthreads} {$i > 0} {incr i -1} {
    append info_threads_ptn "$i Thread .*"
}
gdb_test "info threads" $info_threads_ptn "info threads 2"
d98 1
a98 1
gdb_test "where" "print_philosopher.*philosopher.* from .*libpthread.*" \
d157 1
a157 1
    global expect_manager manager_seen
d219 1
a219 1
for {set i 1} {$i <= $nthreads} {incr i} {
a228 6
}

if {$manager_seen == $expect_manager} {
    pass "manager thread found (not found) when expected"
} else {
    fail "manager thread found (not found) when expected"
@


1.6
log
@2002-01-30  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.base/annota1.exp (backtrace from shlibrary): Fix spelling.
        Allow a start function above main.
        * gdb.threads/linux-dp.exp: Fix copyright date.
@
text
@d217 2
a218 1
array unset seen
@


1.5
log
@2002-01-30  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.threads/linux-dp.exp: Use 'array unset', not 'array set'.
        (check_philosopher_stack): Check for manager thread before checking
        for a just-starting thread.
@
text
@d1 1
a1 1
# Copyright 1999 Free Software Foundation, Inc.
@


1.4
log
@2001-05-24  Michael Snyder  <msnyder@@redhat.com>

	* gdb.threads/linux-dp.exp: Remove assumptions about thread ordering.
	Don't require that the main thread and the manager thread are the
	first in the list.
@
text
@d175 9
a196 9
	-re ".* in __pthread_manager \\(.*$gdb_prompt $" {
	    if {$manager_seen == 1} {
		fail "manager thread is distinct: $thread"
	    } else {
		set manager_seen 1
		pass "manager thread is distinct: $thread"
	    }
	    set interesting 1
	}
d217 1
a217 1
array set seen {}
@


1.3
log
@* gdb.threads/linux-dp.exp: Recognize an additional message
generated by GDB when it doesn't understand how to debug threads
on the target system.
@
text
@d149 4
d156 2
d179 18
d218 1
a218 1
for {set i 3} {$i <= 7} {incr i} {
@


1.2
log
@Update/correct copyright notices.
@
text
@d74 1
a74 1
	-re "Program received signal.*(Unknown signal|SIGUSR).*$gdb_prompt $" {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 1999 Free Software Foundation, Inc.
d69 19
a87 1
    gdb_test "next" "\\\[New Thread .*\\\].*" "create philosopher: $i"
d93 1
a93 1
gdb_test "info threads" "7 Thread .*6 Thread .*5 Thread .*4 Thread .*3 Thread .*2 Thread .* \\(initial thread\\)  main \\(argc=1, argv=.*\\) at .*linux-dp.c:.*1 Thread .* \\(manager thread\\).*" "info threads 2"
@


1.1.1.1
log
@import gdb-1999-10-18 snapshot
@
text
@@


1.1.1.2
log
@import gdb-1999-12-06 snapshot
@
text
@d69 1
a69 19
    send_gdb "next\n"
    gdb_expect {
	-re "\\\[New Thread .*\\\].*$gdb_prompt $" {
	    pass "create philosopher: $i"
	}
	-re "Program received signal.*(Unknown signal|SIGUSR).*$gdb_prompt $" {
	    # It would be nice if we could catch the message that GDB prints
	    # when it first notices that the thread library doesn't support
	    # debugging, or if we could explicitly ask GDB somehow.
	    unsupported "This GDB does not support threads on this system."
	    return -1
	}
	-re "$gdb_prompt $" {
	    fail "create philosopher: $i"
	}
	timeout {
	    fail "(timeout) create philosopher: $i"
	}
    }
@


1.1.1.3
log
@import gdb-1999-12-21 snapshot
@
text
@d71 1
a71 1
	-re "\\\[New .*\\\].*$gdb_prompt $" {
d93 1
a93 1
gdb_test "info threads" "7 Thread .*6 Thread .*5 Thread .*4 Thread .*3 Thread .*2 Thread .*1 Thread .*" "info threads 2"
@


