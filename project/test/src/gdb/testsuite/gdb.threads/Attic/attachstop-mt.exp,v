head	1.10;
access;
symbols
	gdb_7_4_1-2012-04-26-release:1.9.2.1
	gdb_7_4-2012-01-24-release:1.9.2.1
	gdb_7_4-branch:1.9.0.2
	gdb_7_4-2011-12-13-branchpoint:1.9
	gdb_7_3_1-2011-09-04-release:1.7
	gdb_7_3-2011-07-26-release:1.7
	gdb_7_3-branch:1.7.0.2
	gdb_7_3-2011-04-01-branchpoint:1.7
	gdb_7_2-2010-09-02-release:1.6
	gdb_7_2-branch:1.6.0.2
	gdb_7_2-2010-07-07-branchpoint:1.6
	gdb_7_1-2010-03-18-release:1.5
	gdb_7_1-branch:1.5.0.2
	gdb_7_1-2010-02-18-branchpoint:1.5
	gdb_7_0_1-2009-12-22-release:1.4
	gdb_7_0-2009-10-06-release:1.4
	gdb_7_0-branch:1.4.0.4
	gdb_7_0-2009-09-16-branchpoint:1.4
	msnyder-checkpoint-072509-branch:1.4.0.2
	msnyder-checkpoint-072509-branchpoint:1.4
	reverse-20081226-branch:1.2.0.6
	reverse-20081226-branchpoint:1.2
	multiprocess-20081120-branch:1.2.0.4
	multiprocess-20081120-branchpoint:1.2
	reverse-20080930-branch:1.2.0.2
	reverse-20080930-branchpoint:1.2
	reverse-20080717-branch:1.1.0.4
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.2
	msnyder-reverse-20080609-branchpoint:1.1;
locks; strict;
comment	@# @;


1.10
date	2011.12.19.10.31.43;	author jkratoch;	state dead;
branches;
next	1.9;

1.9
date	2011.10.28.17.32.30;	author jkratoch;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2011.10.14.16.05.05;	author tromey;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.01.15.33.50;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.02.19.58.21;	author msnyder;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.01.07.32.06;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.03.05.58.07;	author brobecke;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.31.15.44.21;	author palves;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.28.11.39.45;	author jkratoch;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.01.18.50.14;	author drow;	state Exp;
branches;
next	;

1.9.2.1
date	2012.01.06.04.54.28;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.10
log
@gdb/testsuite/
	* gdb.threads/attach-stopped.exp (continue (*: attach2 continue))
	(*: attach2 stop interrupt, *: attach2, exit leaves process sleeping):
	Remove.
	* gdb.threads/attachstop-mt.c: Remove.
	* gdb.threads/attachstop-mt.exp: Remove.
@
text
@# Copyright 2008, 2009, 2010, 2011 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test is based on gdb.base/attach.exp with modifications by Jeff Johnston
# <jjohnstn@@redhat.com> and Jan Kratochvil <jan.kratochvil@@redhat.com>.

# This test only works on Linux
if { ![isnative] || [is_remote host] || [target_info exists use_gdb_stub]
     || ![istarget *-linux*] } {
    continue
}

set testfile "attachstop-mt"
set srcfile  ${testfile}.c
set binfile  ${objdir}/${subdir}/${testfile}
set escapedbinfile  [string_to_regexp ${objdir}/${subdir}/${testfile}]

#execute_anywhere "rm -f ${binfile}"
remote_exec build "rm -f ${binfile}"
# For debugging this test
#
#log_user 1

# build the test case
#
if  { [gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
    untested attachstop-mt.exp
    return -1
}

if [get_compiler_info ${binfile}] {
    return -1
}

# Start the program running and then wait for a bit, to be sure
# that it can be attached to.

set testpid [eval exec $binfile &]

# No race
sleep 2

# The testcase has three threads, find some other thread TID for $testpid2.
set tids [exec sh -c "echo /proc/$testpid/task/*"]
regsub -all /proc/$testpid/task/ $tids {} tids
if {$tids == "*"} {
    unresolved "/proc/PID/task is not supported (kernel-2.4?)"
    remote_exec build "kill -9 ${testpid}"
    return -1
}
set tids [lsort -integer [split $tids]]
if {[llength $tids] != 3 || [lindex $tids 0] != $testpid} {
    verbose -log "Invalid TIDs <$tids> for PID $testpid"
    fail "Invalid TIDs found"
    remote_exec build "kill -9 ${testpid}"
    return -1
}
set testpid2 [lindex $tids 2]

# Initial sanity test it is normally sleeping
set status2 /proc/${testpid}/task/${testpid2}/status
set fileid0 [open $status2 r];
gets $fileid0 line1;
gets $fileid0 line2;
close $fileid0;

set test "attach0, initial sanity check of the sleeping state"
if {[string match "*(sleeping)*" $line2]} {
  pass $test
} else {
  fail $test
}

# Sttach and detach to test it will not become stopped
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

set test "attach0 to sleeping"
gdb_test_multiple "attach $testpid" "$test" {
    -re "Attaching to program.*`?$escapedbinfile'?, process $testpid.*$gdb_prompt $" {
        pass "$test"
    }
}

gdb_test "gcore /dev/null" ".*aved corefile.*" "attach0 to sleeping gcore invocation"

gdb_test "thread 2" ".*witching to thread 2 .*" "attach0 to sleeping switch thread"

gdb_test "bt" ".*sleep.*func.*" "attach0 to sleeping bt"

# Exit and detach the process.

gdb_exit

# No race
sleep 2

# Check it did not get stopped by our gdb
set fileid1 [open $status2 r];
gets $fileid1 line1;
gets $fileid1 line2;
close $fileid1;

set test "attach1, post-gdb sanity check of the sleeping state - Red Hat BZ 197584"
if {[string match "*(sleeping)*" $line2]} {
  pass $test
} else {
  fail $test
}

# Stop the program 
remote_exec build "kill -s STOP ${testpid}"

# No race
sleep 2

# Check it really got stopped by kill(1)
set fileid2 [open $status2 r];
gets $fileid2 line1;
gets $fileid2 line2;
close $fileid2;

set test "attach2, initial sanity check of the stopped state"
if {[string match "*(stopped)*" $line2]} {
  pass $test
} else {
  fail $test
}

# Start with clean gdb
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# Verify that we can attach to the process by first giving its
# executable name via the file command, and using attach with the
# process ID.

set test "set file, before attach3 to stopped process"
gdb_test_multiple "file $binfile" "$test" {
   -re "Load new symbol table from.*y or n. $" {
        gdb_test "y" "Reading symbols from $escapedbinfile\.\.\.*done." \
		"$test (re-read)"
    }
    -re "Reading symbols from $escapedbinfile\.\.\.*done.*$gdb_prompt $" {
        pass "$test"
    }
}

set test "attach3 to stopped, after setting file"
gdb_test_multiple "attach $testpid" "$test" {
    -re "Attaching to program.*`?$escapedbinfile'?, process $testpid.*$gdb_prompt $" {
        pass "$test"
    }
}

# We may be already after the threads phase.
# `thread 2' command is important for the test to switch the current thread to
# a non-primary one for the detach process.

gdb_test "thread 2" ".*(witching to thread 2 |hread ID 2 not known).*" "attach3 to stopped switch thread"
gdb_test "bt" ".*sleep.*(func|main).*" "attach3 to stopped bt"

# Exit and detach the process.
gdb_exit

# Stop the program 
remote_exec build "kill -s STOP ${testpid}"

# No race
sleep 2

# Continue the test as we would hit another expected bug regarding
# 	Program received signal SIGSTOP, Stopped (signal).
# across NPTL threads.

gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# Verify that we can attach to the process just by giving the
# process ID.
   
set test "attach4 to stopped, after setting file"
gdb_test_multiple "attach $testpid" "$test" {
    -re "Attaching to program.*`?$escapedbinfile'?, process $testpid.*$gdb_prompt $" {
        pass "$test"
    }
}

# We may be already after the threads phase.
# `thread 2' command is important for the test to switch the current thread to
# a non-primary one for the detach process.

gdb_test "thread 2" ".*(witching to thread 2 |hread ID 2 not known).*" "attach4 to stopped switch thread"
gdb_test "bt" ".*sleep.*(func|main).*" "attach4 to stopped bt"

# RHEL3U8 kernel-2.4.21-47.EL will not return SIGINT but only shorten the sleep.
gdb_breakpoint $srcfile:[gdb_get_line_number "Ridiculous time"]
gdb_breakpoint $srcfile:[gdb_get_line_number "cut the sleep time"]
set test "attach4 continue"
gdb_test_multiple "continue" "continue ($test)" {
    -re "Continuing" {
	pass "continue ($test)"
    }
}

# For this to work we must be sure to consume the "Continuing."
# message first, or GDB's signal handler may not be in place.
after 1000 {send_gdb "\003"}
set test "attach4 stop by interrupt"
gdb_expect {
  -re "Program received signal SIGINT.*$gdb_prompt $"
    {
      pass $test
    }
  -re "Breakpoint \[0-9\].*$srcfile.*$gdb_prompt $"
    {
      pass $test
    }
  timeout
    {
      fail "$test (timeout)"
    }
}

gdb_exit

# No race
sleep 2

# At this point, the process should be sleeping

set fileid4 [open $status2 r];
gets $fileid4 line1;
gets $fileid4 line2;
close $fileid4;

set test "attach4, exit leaves process sleeping"
if {[string match "*(sleeping)*" $line2]} {
  pass $test
} else {
  fail $test
}

# Make sure we don't leave a process around to confuse
# the next test run (and prevent the compile by keeping
# the text file busy), in case the "set should_exit" didn't
# work.
   
remote_exec build "kill -9 ${testpid}"

return 0
@


1.9
log
@gdb/testsuite/
	* gdb.base/async-shell.exp: Skip the testfile for use_gdb_stub.
	* gdb.base/attach-pie-misread.exp: Likewise.
	* gdb.base/break-interp.exp: Likewise.
	* gdb.base/default.exp (attach, run "r" abbreviation, run): Skip these
	testcases for use_gdb_stub.
	* gdb.dwarf2/dw2-restore.exp: Fix the run for use_gdb_stub.
	(continue): New testcase.
	* gdb.python/py-events.exp: Skip the testfile for use_gdb_stub.
	* gdb.threads/attach-into-signal.exp: Likewise.
	* gdb.threads/attach-stopped.exp: Likewise.
	* gdb.threads/attachstop-mt.exp: Likewise.
@
text
@@


1.9.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2008-2012 Free Software Foundation, Inc.
@


1.8
log
@	* gdb.threads/attachstop-mt.exp: Add $srcfile to the linespecs.
	* gdb.threads/attach-stopped.exp (corefunc): Add $srcfile to the
	linespec.
@
text
@d20 2
a21 1
if { ![isnative] || [is_remote host] || ![istarget *-linux*] } {
@


1.7
log
@run copyright.sh for 2011.
@
text
@d211 2
a212 2
gdb_breakpoint [gdb_get_line_number "Ridiculous time"]
gdb_breakpoint [gdb_get_line_number "cut the sleep time"]
@


1.6
log
@2010-06-02  Michael Snyder  <msnyder@@msnyder-server.eng.vmware.com>

	* gdb.threads/attach-stopped.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/attachstop-mt.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/gcore-thread.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/hand-call-in-threads.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/linux-dp.exp: Replace uses of send_gdb / gdb_expect.
	* gdb.threads/print-threads.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.threads/pthreads.exp: Replace uses of send_gdb / gdb_expect.
	* gdb.threads/schedlock.exp: Replace uses of send_gdb / gdb_expect.
	* gdb.threads/sigthread.exp: Replace uses of send_gdb / gdb_expect.
@
text
@d1 1
a1 1
# Copyright 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.5
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d214 4
a217 6
send_gdb "continue\n"
gdb_expect {
  -re "Continuing"
    { pass "continue ($test)" }
  timeout
    { fail "continue ($test) (timeout)" }
@


1.4
log
@        Updated copyright notices for most files.
@
text
@d1 1
a1 1
# Copyright 2008, 2009 Free Software Foundation, Inc.
@


1.3
log
@2008-12-31  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.threads/attach-into-signal.exp: Don't use
	gdb_suppress_entire_file.
	* gdb.threads/attach-stopped.exp: Ditto.
	* gdb.threads/attachstop-mt.exp: Ditto.
@
text
@d1 1
a1 2
# Copyright 2008
# Free Software Foundation, Inc.
@


1.2
log
@gdb/testsuite/
	* gdb.threads/attachstop-mt.exp: Note a real testcase name this
	testcase is derived from.  Fix racy dependency on an expected PID
	number.  No longer support the testcase on Linux kernel 2.4.x.
@
text
@d39 2
a40 1
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
@


1.1
log
@2008-05-01  Daniel Jacobowitz  <dan@@codesourcery.com>
	    Pedro Alves  <pedro@@codesourcery.com>

	Based on work by Jan Kratochvil <jan.kratochvil@@redhat.com> and Jeff
 	Johnston <jjohnstn@@redhat.com>.

	* NEWS: Mention attach to stopped process fix.
	* infcmd.c (detach_command, disconnect_command): Discard the thread
	list.
	* infrun.c (handle_inferior_event): Do not ignore non-SIGSTOP while
	attaching.  Use signal_stop_state.
	(signal_stop_state): Check stop_soon.
	* linux-nat.c (kill_lwp): Declare earlier.
	(pid_is_stopped, linux_nat_post_attach_wait): New.
	(lin_lwp_attach_lwp): Use linux_nat_post_attach_wait.  Update
	comments.
	(linux_nat_attach): Use linux_nat_post_attach_wait.
	(detach_callback, linux_nat_detach): Improve handling for signalled
	processes.
	(linux_nat_pid_to_str): Always print out the LWP ID if it differs
	from the process ID.
	* Makefile.in (infcmd.o): Update.

2008-05-01  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb.threads/attach-into-signal.c, gdb.threads/attach-into-signal.exp,
	gdb.threads/attach-stopped.c, gdb.threads/attach-stopped.exp,
	gdb.threads/attachstop-mt.c, gdb.threads/attachstop-mt.exp: New.
@
text
@d17 2
a18 3
# This test was created by modifying gdb.threads/attachstop.
# This file was created by Jan Kratochvil <jan.kratochvil@@redhat.com>.
# Regression for: https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=197584
d54 14
a67 8
# Do not: set testpid2 [expr $testpid + 1]
# as it will not exist on Red Hat 2.6.9-34.0.2.ELsmp
set testpid2 [expr $testpid + 2]

set status2 /proc/${testpid}/task/${testpid2}/status
if {[expr ! [file exists $status2]]} {
  # kernel-2.4
  set status2 /proc/${testpid2}/status
d69 1
d72 1
@

