head	1.3;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.3
	gdb_7_6-2013-04-26-release:1.3
	gdb_7_6-branch:1.3.0.2
	gdb_7_6-2013-03-12-branchpoint:1.3
	gdb_7_5_1-2012-11-29-release:1.2
	gdb_7_5-2012-08-17-release:1.2
	gdb_7_5-branch:1.2.0.2
	gdb_7_5-2012-07-18-branchpoint:1.2
	gdb_7_4_1-2012-04-26-release:1.1.2.1
	gdb_7_4-2012-01-24-release:1.1.2.1
	gdb_7_4-branch:1.1.0.2
	gdb_7_4-2011-12-13-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.01.01.06.41.27;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.04.08.27.55;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.28.18.30.00;	author palves;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.01.06.04.54.29;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@/* This testcase is part of GDB, the GNU debugger.

   Copyright 2009-2013 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>
#include <assert.h>

static const char *image;
static volatile pthread_t main_thread;
static pthread_barrier_t barrier;
static char *argv1 = "go away";

static void *
thread_execler (void *arg)
{
  int i;

  pthread_barrier_wait (&barrier);

  i = pthread_join (main_thread, NULL);
  assert (i == 0);

  /* Exec ourselves again.  */
  if (execl (image, image, argv1, NULL) == -1) /* break-here */
    {
      perror ("execl");
      abort ();
    }

  return NULL;
}

static void *
just_loop (void *arg)
{
  unsigned int i;

  pthread_barrier_wait (&barrier);

  for (i = 1; i > 0; i++)
    usleep (1);

  return NULL;
}

#define THREADS 5

pthread_t loop_thread[THREADS];

int
main (int argc, char **argv)
{
  pthread_t thread;
  int i, t;

  image = argv[0];

  /* Pass "inf" as argument to keep re-execing ad infinitum, which can
     be useful for manual testing.  Passing any other argument exits
     immediately (and that's what the execl above does by
     default).  */
  if (argc == 2 && strcmp (argv[1], "inf") == 0)
    argv1 = argv[1];
  else if (argc > 1)
    exit (0);

  main_thread = pthread_self ();

  pthread_barrier_init (&barrier, NULL, 2 + THREADS);

  i = pthread_create (&thread, NULL, thread_execler, NULL);
  assert (i == 0);

  for (t = 0; t < THREADS; t++)
    {
      i = pthread_create (&loop_thread[t], NULL, just_loop, NULL);
      assert (i == 0);
    }

  pthread_barrier_wait (&barrier);

  pthread_exit (NULL);
  /* NOTREACHED */
  return 0;
}
@


1.2
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 1
a3 1
   Copyright 2009-2012 Free Software Foundation, Inc.
@


1.1
log
@2011-10-28  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* linux-nat.c (linux_nat_filter_event): Remove `options'
	parameter, and dead code that used it.  If we're handling a
	PTRACE_EVENT_EXEC event, and the thread group leader is no longer
	in our lwp list, re-add it.
	(check_zombie_leaders): New.
	(linux_nat_wait_1): Remove `options' and `pid' locals.  Always
	wait for children with WNOHANG, and always wait for all children.
	Don't check for no resumed children upfront.  Simplify wait loop.
	Check for zombie thread group leaders after handling all wait
	statuses.  Return TARGET_WAITKIND_NO_RESUMED if there no
	unwaited-for children left.
	* infrun.c (fetch_inferior_event): Handle TARGET_WAITKIND_NO_RESUMED.
	(handle_inferior_event): Handle TARGET_WAITKIND_NO_RESUMED.
	(normal_stop): Handle TARGET_WAITKIND_NO_RESUMED.
	* target.h (enum target_waitkind) <TARGET_WAITKIND_NO_RESUMED>: New.

	gdb/testsuite/
	* gdb.threads/no-unwaited-for-left.c: New.
	* gdb.threads/no-unwaited-for-left.exp: New.
	* gdb.threads/non-ldr-exc-1.c: New.
	* gdb.threads/non-ldr-exc-1.exp: New.
	* gdb.threads/non-ldr-exc-2.c: New.
	* gdb.threads/non-ldr-exc-2.exp: New.
	* gdb.threads/non-ldr-exc-3.c: New.
	* gdb.threads/non-ldr-exc-3.exp: New.
	* gdb.threads/non-ldr-exc-4.c: New.
	* gdb.threads/non-ldr-exc-4.exp: New.
@
text
@d3 1
a3 1
   Copyright 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.1.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 1
a3 1
   Copyright 2009-2012 Free Software Foundation, Inc.
@


