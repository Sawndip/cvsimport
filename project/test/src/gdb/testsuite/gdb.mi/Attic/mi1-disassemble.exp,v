head	1.4;
access;
symbols
	drow-cplus-merge-20040208:1.3
	carlton_dictionary-20040126-merge:1.3
	cagney_bigcore-20040122-branch:1.3.0.42
	cagney_bigcore-20040122-branchpoint:1.3
	drow-cplus-merge-20040113:1.3
	drow-cplus-merge-20031224:1.3
	drow-cplus-merge-20031220:1.3
	carlton_dictionary-20031215-merge:1.3
	drow-cplus-merge-20031214:1.3
	carlton-dictionary-20031111-merge:1.3
	gdb_6_0-2003-10-04-release:1.3
	kettenis_sparc-20030918-branch:1.3.0.40
	kettenis_sparc-20030918-branchpoint:1.3
	carlton_dictionary-20030917-merge:1.3
	ezannoni_pie-20030916-branchpoint:1.3
	ezannoni_pie-20030916-branch:1.3.0.38
	cagney_x86i386-20030821-branch:1.3.0.36
	cagney_x86i386-20030821-branchpoint:1.3
	carlton_dictionary-20030805-merge:1.3
	carlton_dictionary-20030627-merge:1.3
	gdb_6_0-branch:1.3.0.34
	gdb_6_0-2003-06-23-branchpoint:1.3
	jimb-ppc64-linux-20030613-branch:1.3.0.32
	jimb-ppc64-linux-20030613-branchpoint:1.3
	cagney_convert-20030606-branch:1.3.0.30
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.3.0.28
	cagney_writestrings-20030508-branchpoint:1.3
	jimb-ppc64-linux-20030528-branch:1.3.0.26
	jimb-ppc64-linux-20030528-branchpoint:1.3
	carlton_dictionary-20030523-merge:1.3
	cagney_fileio-20030521-branch:1.3.0.24
	cagney_fileio-20030521-branchpoint:1.3
	kettenis_i386newframe-20030517-mergepoint:1.3
	jimb-ppc64-linux-20030509-branch:1.3.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.3
	kettenis_i386newframe-20030504-mergepoint:1.3
	carlton_dictionary-20030430-merge:1.3
	kettenis_i386newframe-20030419-branch:1.3.0.20
	kettenis_i386newframe-20030419-branchpoint:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.3
	kettenis_i386newframe-20030406-branch:1.3.0.18
	kettenis_i386newframe-20030406-branchpoint:1.3
	cagney_frameaddr-20030403-branchpoint:1.3
	cagney_frameaddr-20030403-branch:1.3.0.16
	cagney_framebase-20030330-mergepoint:1.3
	cagney_framebase-20030326-branch:1.3.0.14
	cagney_framebase-20030326-branchpoint:1.3
	cagney_lazyid-20030317-branch:1.3.0.12
	cagney_lazyid-20030317-branchpoint:1.3
	kettenis-i386newframe-20030316-mergepoint:1.3
	offbyone-20030313-branch:1.3.0.10
	offbyone-20030313-branchpoint:1.3
	kettenis-i386newframe-20030308-branch:1.3.0.8
	kettenis-i386newframe-20030308-branchpoint:1.3
	carlton_dictionary-20030305-merge:1.3
	cagney_offbyone-20030303-branch:1.3.0.6
	cagney_offbyone-20030303-branchpoint:1.3
	carlton_dictionary-20030207-merge:1.3
	interps-20030203-mergepoint:1.3
	interps-20030202-branch:1.3.0.4
	interps-20030202-branchpoint:1.3
	cagney-unwind-20030108-branch:1.3.0.2
	cagney-unwind-20030108-branchpoint:1.3
	carlton_dictionary-20021223-merge:1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-branch:1.2.0.6
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.4
	drow-cplus-branchpoint:1.2
	gdb_5_3-branch:1.2.0.2
	kseitz_interps-20020528-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2004.02.13.19.59.25;	author cagney;	state dead;
branches;
next	1.3;

1.3
date	2002.11.05.15.43.18;	author ezannoni;	state Exp;
branches
	1.3.38.1;
next	1.2;

1.2
date	2002.10.01.16.01.37;	author cagney;	state Exp;
branches
	1.2.2.1
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2002.06.19.18.47.18;	author kseitz;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.06.19.18.47.18;	author kseitz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.11.05.20.29.01;	author ezannoni;	state Exp;
branches;
next	;

1.2.2.1
date	2002.10.01.20.32.41;	author cagney;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.10.01.20.39.17;	author cagney;	state dead;
branches;
next	;

1.2.4.1
date	2003.12.14.20.27.57;	author drow;	state Exp;
branches;
next	;

1.2.6.1
date	2002.10.11.22.23.02;	author carlton;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.11.15.19.19.18;	author carlton;	state Exp;
branches;
next	;

1.3.38.1
date	2004.03.23.20.12.34;	author ezannoni;	state dead;
branches;
next	;


desc
@@


1.4
log
@2004-02-13  Andrew Cagney  <cagney@@redhat.com>

	* gdb.mi/mi1-basics.exp, gdb.mi/mi1-break.exp: Delete file.
	* gdb.mi/mi1-console.exp, gdb.mi/mi1-disassemble.exp: Delete file.
	* gdb.mi/mi1-eval.exp, gdb.mi/mi1-hack-cli.exp: Delete file.
	* gdb.mi/mi1-pthreads.exp, gdb.mi/mi1-read-memory.exp: Delete file.
	* gdb.mi/mi1-regs.exp, gdb.mi/mi1-return.exp: Delete file.
	* gdb.mi/mi1-simplerun.exp, gdb.mi/mi1-stack.exp: Delete file.
	* gdb.mi/mi1-stepi.exp, gdb.mi/mi1-symbol.exp: Delete file.
	* gdb.mi/mi1-until.exp, gdb.mi/mi1-var-block.exp: Delete file.
	* gdb.mi/mi1-var-child.exp, gdb.mi/mi1-var-cmd.exp: Delete file.
	* gdb.mi/mi1-var-display.exp, gdb.mi/mi1-watch.exp: Delete file.
@
text
@# Copyright 1999, 2000, 2002 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

#
# Test Machine interface (MI) operations for disassembly.
#
# The goal is not to test gdb functionality, which is done by other tests,
# but to verify the correct output response to MI operations.
#

load_lib mi-support.exp
set MIFLAGS "-i=mi1"

gdb_exit
if [mi_gdb_start] {
    continue
}

set testfile "basics"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-DFAKEARGV}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

mi_delete_breakpoints
mi_gdb_reinitialize_dir $srcdir/$subdir
mi_gdb_load ${binfile}

proc test_disassembly_only {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassemble -s $pc -e "$pc+8" -- 0
    # -data-disassembly -f basics.c -l 32 -- 0

    mi_gdb_test "print/x \$pc" "" ""
    mi_gdb_test "111-data-disassemble -s \$pc -e \"\$pc + 12\" -- 0" \
	    "111\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\},\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}.*\]" \
             "data-disassemble from pc to pc+12 assembly only"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -- 0" \
	    "222\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]" \
              "data-disassemble file & line, assembly only"
}

proc test_disassembly_lines_limit {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassembly -f basics.c -l 32 -n 20 -- 0
    # -data-disassembly -f basics.c -l 32 -n 0 -- 0
    # -data-disassembly -f basics.c -l 32 -n 50 -- 0

    mi_gdb_test "print/x \$pc" "" ""
    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 20 -- 0" \
	    "222\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]" \
              "data-disassemble file, line, number assembly only"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 0 -- 0" \
	    "222\\^done,asm_insns=\\\[\\\]" \
              "data-disassemble file, line, number (zero lines) assembly only"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 50 -- 0" \
	    "222\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]" \
              "data-disassemble file, line, number (more than main lines) assembly only"
}


proc test_disassembly_mixed {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassembly -f basics.c -l 21 -- 1
    # -data-disassembly -s $pc -e "$pc+8" -- 1

    mi_gdb_test "002-data-disassemble -f basics.c -l 21 -- 1" \
	    "002\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"21\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"callee2\",offset=\"0\",inst=\".*\"\}.*\\\]\}.*,src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[.*\{address=\"$hex\",func-name=\"callee2\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\\\]" \
             "data-disassemble file, line assembly mixed"

    #
    # In mixed mode, the lowest level of granularity is the source line.
    # So we are going to get the disassembly for the source line at
    # which we are now, even if we have specified that the range is only 2 insns.
    #
    mi_gdb_test "003-data-disassemble -s \$pc -e \"\$pc+4\" -- 1" \
	    "003\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}.*\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\\\]" \
             "data-disassemble range assembly mixed"
}

proc test_disassembly_mixed_lines_limit {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassembly -f basics.c -l 32 -n 20 -- 1
    # -data-disassembly -f basics.c -l 32 -n 0 -- 1
    # -data-disassembly -f basics.c -l 32 -n 50 -- 1

    mi_gdb_test "print/x \$pc" "" ""
    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 20 -- 1" \
	    "222\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\]" \
              "data-disassemble file, line, number assembly mixed"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 0 -- 1" \
	    "222\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"31\",file=\".*basics.c\",line_asm_insn=\\\[\\\]\}\\\]" \
              "data-disassemble file, line, number (zero lines) assembly mixed"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 50 -- 1" \
	    "222\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\}.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\]" \
              "data-disassemble file, line, number (more than main lines) assembly mixed"
}

proc test_disassembly_bogus_args {} {
    global mi_gdb_prompt
    global hex

    # Test that bogus input to disassembly command is rejected.
    # Tests:
    # -data-disassembly -f foo -l abc -n 0 -- 0
    # -data-disassembly -s foo -e bar -- 0
    # -data-disassembly -s $pc -f basics.c -- 0
    # -data-disassembly -f basics.c -l 32 -- 9

    mi_gdb_test "123-data-disassemble -f foo -l abc -n 0 -- 0" \
             ".*123\\^error,msg=\"mi_cmd_disassemble: Invalid filename.\"" \
             "data-disassemble bogus filename"

    mi_gdb_test "321-data-disassemble -s foo -e bar -- 0" \
             "321\\^error,msg=\"No symbol \\\\\"foo\\\\\" in current context.\"" \
             "data-disassemble bogus address"

    mi_gdb_test "456-data-disassemble -s \$pc -f basics.c -- 0" \
             "456\\^error,msg=\"mi_cmd_disassemble: Usage: \\( .-f filename -l linenum .-n howmany.. | .-s startaddr -e endaddr.\\) .--. mixed_mode.\"" \
             "data-disassemble mix different args"

    mi_gdb_test "789-data-disassemble -f basics.c -l 32 -- 9" \
             "789\\^error,msg=\"mi_cmd_disassemble: Mixed_mode argument must be 0 or 1.\"" \
             "data-disassemble wrong mode arg"

}

mi_run_to_main
test_disassembly_only
test_disassembly_mixed
test_disassembly_bogus_args
test_disassembly_lines_limit
test_disassembly_mixed_lines_limit

mi_gdb_exit
return 0
@


1.3
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

        * mi-console.exp: Use mi_runto, mi_run_to_main, mi_next_to,
	mi_step_to wherever possible.  Update copyright notices.
	* mi-disassemble.exp: Ditto.
	* mi-eval.exp: Ditto.
	* mi-read-memory.exp: Ditto.
	* mi-regs.exp: Ditto.
	* mi-return.exp: Ditto.
	* mi-stack.exp: Ditto.
	* mi-stepi.exp: Ditto.
	* mi-var-block.exp: Ditto.
	* mi-var-cmd.exp: Ditto.
	* mi-watch.exp: Ditto.
	* mi1-console.exp: Ditto.
	* mi1-disassemble.exp: Ditto.
	* mi1-eval.exp: Ditto.
	* mi1-read-memory.exp: Ditto.
	* mi1-regs.exp: Ditto.
	* mi1-return.exp: Ditto.
	* mi1-stack.exp: Ditto.
	* mi1-stepi.exp: Ditto.
	* mi1-var-block.exp: Ditto.
	* mi1-var-cmd.exp: Ditto.
        * mi1-watch.exp: Ditto.
@
text
@@


1.3.38.1
log
@merge mainline changes into branch
@
text
@@


1.2
log
@2002-10-01  Andrew Cagney  <ac131313@@redhat.com>

	* mi1-basics.exp: Copy of mi1-basics.exp MIFLAGS set "-i=mi1".
	* mi1-break.exp, mi1-console.exp, mi1-disassemble.exp: Ditto.
	* mi1-eval.exp, mi1-hack-cli.exp, mi1-pthreads.exp: Ditto.
	* mi1-read-memory.exp, mi1-regs.exp, mi1-return.exp: Ditto.
	* mi1-simplerun.exp, mi1-stack.exp, mi1-stepi.exp: Ditto.
	* mi1-until.exp, mi1-var-block.exp, mi1-var-child.exp: Ditto.
	* mi1-var-cmd.exp, mi1-var-display.exp, mi1-watch.exp: Ditto.
@
text
@d1 1
a1 1
#   Copyright 1999, 2000 Free Software Foundation, Inc.
a45 45
proc test_breakpoints_creation_and_listing {} {
    global mi_gdb_prompt
    global srcfile
    global hex

    # Insert some breakpoints and list them
    # Also, disable some so they do not interfere with other tests
    # Tests:
    # -break-insert
    # -break-list
    # -break-disable
    # -break-info

    mi_gdb_test "200-break-insert main" \
             "200\\^done,bkpt=\{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"main\",file=\".*basics.c\",line=\"32\",times=\"0\"\}" \
             "break-insert operation"

    mi_gdb_test "204-break-list" \
                "204\\^done,BreakpointTable=\{.*,body=\\\[bkpt=\{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"main\",file=\".*basics.c\",line=\"32\",times=\"0\"\}\\\]\}" \
                "list of breakpoints"
}

proc test_running_the_program {} {
    global mi_gdb_prompt
    global hex

    # Run the program without args
    # Tests:
    # -exec-run

    # mi_gdb_test cannot be used for asynchronous commands because there are
    # two prompts involved and this can lead to a race condition.
    # FIXME: We are accepting a duplicate file and line info temporarely.
    # The following is equivalent to a send_gdb "000-exec-run\n"
    mi_run_cmd
    # The running part has been checked already by mi_run_cmd
        gdb_expect {
	    -re "\[\r\n\]*000\\*stopped,reason=\"breakpoint-hit\",bkptno=\"1\",thread-id=\"\[01\]\",frame=\{addr=\"$hex\",func=\"main\",args=\\\[\\\],file=\".*basics.c\",line=\"32\"\}\r\n$mi_gdb_prompt$" {
            pass "run to main"
          }
          -re ".*$mi_gdb_prompt$" {fail "run to main (2)"}
          timeout {fail "run to main (timeout 2)"}
        }
}

d170 1
a170 2
test_breakpoints_creation_and_listing
test_running_the_program
@


1.2.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
# Copyright 1999, 2000, 2002 Free Software Foundation, Inc.
d46 45
d215 2
a216 1
mi_run_to_main
@


1.2.6.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@@


1.2.6.2
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d1 1
a1 1
# Copyright 1999, 2000, 2002 Free Software Foundation, Inc.
d46 45
d215 2
a216 1
mi_run_to_main
@


1.2.2.1
log
@Freeze MI1 on 5.3 branch.
@
text
@@


1.2.2.2
log
@OOps, mi1 isn't an exact clone of mi-*
@
text
@@


1.1
log
@file mi1-disassemble.exp was initially added on branch kseitz_interps-20020528-branch.
@
text
@d1 224
@


1.1.2.1
log
@        * mi1-basics.exp, mi1-break,.exp mi1-console.exp, mi1-disassemble.exp,
        mi1-eval.exp, mi1-hack-cli.exp, mi1-read-memory.exp, mi1-regs.exp,
        mi1-return.exp, mi1-simplerun.exp, mi1-stack.exp, mi1-stepi.exp,
        mi1-until.exp, mi1-var-block.exp, mi1-var-child.exp, mi1-var-cmd.exp,
        mi1-var-display.exp mi1-watch.exp: New files.
        * mi-break.exp, mi-console.exp, mi-disassemble.exp,
        mi-eval.exp, mi-return.exp, mi-simplerun.exp, mi-stack.exp, mi-stepi.exp,
        mi-until.exp, mi-var-block.exp, mi-var-child.exp, mi-var-cmd.exp,
        mi-var-display.exp mi-watch.exp: Update to conform to MI2
        notify-async-output (events).
@
text
@a0 224
# Copyright 2002 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

#
# Test Machine interface (MI) operations for disassembly.
#
# The goal is not to test gdb functionality, which is done by other tests,
# but to verify the correct output response to MI operations.
#

load_lib mi-support.exp
set MIFLAGS "-i=mi1"

gdb_exit
if [mi_gdb_start] {
    continue
}

set testfile "basics"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-DFAKEARGV}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

mi_delete_breakpoints
mi_gdb_reinitialize_dir $srcdir/$subdir
mi_gdb_load ${binfile}

proc test_breakpoints_creation_and_listing {} {
    global mi_gdb_prompt
    global srcfile
    global hex

    # Insert some breakpoints and list them
    # Also, disable some so they do not interfere with other tests
    # Tests:
    # -break-insert
    # -break-list
    # -break-disable
    # -break-info

    mi_gdb_test "200-break-insert main" \
             "200\\^done,bkpt=\{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"main\",file=\".*basics.c\",line=\"32\",times=\"0\"\}" \
             "break-insert operation"

    mi_gdb_test "204-break-list" \
                "204\\^done,BreakpointTable=\{.*,body=\\\[bkpt=\{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"main\",file=\".*basics.c\",line=\"32\",times=\"0\"\}\\\]\}" \
                "list of breakpoints"
}

proc test_running_the_program {} {
    global mi_gdb_prompt
    global hex

    # Run the program without args
    # Tests:
    # -exec-run

    # mi_gdb_test cannot be used for asynchronous commands because there are
    # two prompts involved and this can lead to a race condition.
    # FIXME: We are accepting a duplicate file and line info temporarely.
    # The following is equivalent to a send_gdb "000-exec-run\n"
    mi_run_cmd
    # The running part has been checked already by mi_run_cmd
        gdb_expect {
	    -re "\[\r\n\]*000\\*stopped,reason=\"breakpoint-hit\",bkptno=\"1\",thread-id=\"\[01\]\",frame=\{addr=\"$hex\",func=\"main\",args=\\\[\\\],file=\".*basics.c\",line=\"32\"\}\r\n$mi_gdb_prompt$" {
            pass "run to main"
          }
          -re ".*$mi_gdb_prompt$" {fail "run to main (2)"}
          timeout {fail "run to main (timeout 2)"}
        }
}

proc test_disassembly_only {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassemble -s $pc -e "$pc+8" -- 0
    # -data-disassembly -f basics.c -l 32 -- 0

    mi_gdb_test "print/x \$pc" "" ""
    mi_gdb_test "111-data-disassemble -s \$pc -e \"\$pc + 12\" -- 0" \
	    "111\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\},\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}.*\]" \
             "data-disassemble from pc to pc+12 assembly only"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -- 0" \
	    "222\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]" \
              "data-disassemble file & line, assembly only"
}

proc test_disassembly_lines_limit {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassembly -f basics.c -l 32 -n 20 -- 0
    # -data-disassembly -f basics.c -l 32 -n 0 -- 0
    # -data-disassembly -f basics.c -l 32 -n 50 -- 0

    mi_gdb_test "print/x \$pc" "" ""
    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 20 -- 0" \
	    "222\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]" \
              "data-disassemble file, line, number assembly only"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 0 -- 0" \
	    "222\\^done,asm_insns=\\\[\\\]" \
              "data-disassemble file, line, number (zero lines) assembly only"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 50 -- 0" \
	    "222\\^done,asm_insns=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]" \
              "data-disassemble file, line, number (more than main lines) assembly only"
}


proc test_disassembly_mixed {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassembly -f basics.c -l 21 -- 1
    # -data-disassembly -s $pc -e "$pc+8" -- 1

    mi_gdb_test "002-data-disassemble -f basics.c -l 21 -- 1" \
	    "002\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"21\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"callee2\",offset=\"0\",inst=\".*\"\}.*\\\]\}.*,src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[.*\{address=\"$hex\",func-name=\"callee2\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\\\]" \
             "data-disassemble file, line assembly mixed"

    #
    # In mixed mode, the lowest level of granularity is the source line.
    # So we are going to get the disassembly for the source line at
    # which we are now, even if we have specified that the range is only 2 insns.
    #
    mi_gdb_test "003-data-disassemble -s \$pc -e \"\$pc+4\" -- 1" \
	    "003\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}.*\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\\\]" \
             "data-disassemble range assembly mixed"
}

proc test_disassembly_mixed_lines_limit {} {
    global mi_gdb_prompt
    global hex
    global decimal

    # Test disassembly more only for the current function.
    # Tests:
    # -data-disassembly -f basics.c -l 32 -n 20 -- 1
    # -data-disassembly -f basics.c -l 32 -n 0 -- 1
    # -data-disassembly -f basics.c -l 32 -n 50 -- 1

    mi_gdb_test "print/x \$pc" "" ""
    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 20 -- 1" \
	    "222\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\},.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\]" \
              "data-disassemble file, line, number assembly mixed"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 0 -- 1" \
	    "222\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"31\",file=\".*basics.c\",line_asm_insn=\\\[\\\]\}\\\]" \
              "data-disassemble file, line, number (zero lines) assembly mixed"

    mi_gdb_test "222-data-disassemble  -f basics.c -l 32 -n 50 -- 1" \
	    "222\\^done,asm_insns=\\\[src_and_asm_line=\{line=\"$decimal\",file=\".*basics.c\",line_asm_insn=\\\[\{address=\"$hex\",func-name=\"main\",offset=\"0\",inst=\".*\"\}.*,\{address=\"$hex\",func-name=\"main\",offset=\"$decimal\",inst=\".*\"\}\\\]\}\]" \
              "data-disassemble file, line, number (more than main lines) assembly mixed"
}

proc test_disassembly_bogus_args {} {
    global mi_gdb_prompt
    global hex

    # Test that bogus input to disassembly command is rejected.
    # Tests:
    # -data-disassembly -f foo -l abc -n 0 -- 0
    # -data-disassembly -s foo -e bar -- 0
    # -data-disassembly -s $pc -f basics.c -- 0
    # -data-disassembly -f basics.c -l 32 -- 9

    mi_gdb_test "123-data-disassemble -f foo -l abc -n 0 -- 0" \
             ".*123\\^error,msg=\"mi_cmd_disassemble: Invalid filename.\"" \
             "data-disassemble bogus filename"

    mi_gdb_test "321-data-disassemble -s foo -e bar -- 0" \
             "321\\^error,msg=\"No symbol \\\\\"foo\\\\\" in current context.\"" \
             "data-disassemble bogus address"

    mi_gdb_test "456-data-disassemble -s \$pc -f basics.c -- 0" \
             "456\\^error,msg=\"mi_cmd_disassemble: Usage: \\( .-f filename -l linenum .-n howmany.. | .-s startaddr -e endaddr.\\) .--. mixed_mode.\"" \
             "data-disassemble mix different args"

    mi_gdb_test "789-data-disassemble -f basics.c -l 32 -- 9" \
             "789\\^error,msg=\"mi_cmd_disassemble: Mixed_mode argument must be 0 or 1.\"" \
             "data-disassemble wrong mode arg"

}

test_breakpoints_creation_and_listing
test_running_the_program
test_disassembly_only
test_disassembly_mixed
test_disassembly_bogus_args
test_disassembly_lines_limit
test_disassembly_mixed_lines_limit

mi_gdb_exit
return 0
@


1.1.2.2
log
@another merge from mainline
@
text
@d1 1
a1 1
# Copyright 1999, 2000, 2002 Free Software Foundation, Inc.
d46 45
d215 2
a216 1
mi_run_to_main
@


