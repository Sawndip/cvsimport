head	1.8;
access;
symbols
	gdb_5_3-2002-12-12-release:1.6
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.2
	carlton_dictionary-20020920-branchpoint:1.7
	gdb_5_3-branch:1.6.0.14
	gdb_5_3-2002-09-04-branchpoint:1.6
	kseitz_interps-20020829-merge:1.6
	cagney_sysregs-20020825-branch:1.6.0.12
	cagney_sysregs-20020825-branchpoint:1.6
	readline_4_3-import-branch:1.6.0.10
	readline_4_3-import-branchpoint:1.6
	gdb_5_2_1-2002-07-23-release:1.6
	kseitz_interps-20020528-branch:1.6.0.8
	kseitz_interps-20020528-branchpoint:1.6
	cagney_regbuf-20020515-branch:1.6.0.6
	cagney_regbuf-20020515-branchpoint:1.6
	jimb-macro-020506-branch:1.6.0.4
	jimb-macro-020506-branchpoint:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.3.4.1
	gdb_5_1_0_1-2002-01-03-release:1.3.4.1
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.3.4.1.0.2
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3.4.1
	gdb_5_1-2001-11-21-release:1.3.4.1
	gdb_s390-2001-09-26-branch:1.3.0.6
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.4
	gdb_5_1-2001-07-29-branchpoint:1.3
	dberlin-typesystem-branch:1.3.0.2
	dberlin-typesystem-branchpoint:1.3;
locks; strict;
comment	@# @;


1.8
date	2002.09.29.14.20.31;	author cagney;	state dead;
branches;
next	1.7;

1.7
date	2002.09.10.22.28.44;	author kseitz;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.11.11.20.11.03;	author drow;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	2001.08.19.01.23.43;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.19.00.37.28;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.23.21.47.09;	author cagney;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.06.18.17.57.43;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.18.12.55.06;	author cagney;	state Exp;
branches;
next	;

1.3.4.1
date	2001.11.11.20.07.10;	author drow;	state Exp;
branches;
next	;

1.6.8.1
date	2002.10.01.00.46.31;	author kseitz;	state dead;
branches;
next	;

1.7.2.1
date	2002.10.11.22.23.02;	author carlton;	state dead;
branches;
next	;


desc
@@


1.8
log
@Delete no-longer-needed tests.
@
text
@#   Copyright 1999, 2000 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

#
# Test essential Machine interface (MI) operations
#
# Verify that, using the MI, we can run a simple program and perform basic
# debugging activities like: insert breakpoints, run the program,
# step, next, continue until it ends and, last but not least, quit.
#
# The goal is not to test gdb functionality, which is done by other tests,
# but to verify the correct output response to MI operations.
#

load_lib mi-support.exp
set MIFLAGS "-i=mi0"

gdb_exit
if [mi_gdb_start] {
    continue
}

set testfile "basics"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-DFAKEARGV}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

mi_delete_breakpoints
mi_gdb_reinitialize_dir $srcdir/$subdir
mi_gdb_reinitialize_dir $srcdir/$subdir
mi_gdb_load ${binfile}

proc test_breakpoints_creation_and_listing {} {
    global mi_gdb_prompt
    global srcfile
    global hex

    # Insert some breakpoints and list them
    # Also, disable some so they do not interfere with other tests
    # Tests:
    # -break-insert
    # -break-list
    # -break-disable
    # -break-info

    mi_gdb_test "200-break-insert main" \
             "200\\^done,bkpt=\{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"main\",file=\".*basics.c\",line=\"32\",times=\"0\"\}" \
             "break-insert operation"

    mi_gdb_test "201-break-insert basics.c:callee2" \
             "201\\^done,bkpt=\{number=\"2\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"callee2\",file=\".*basics.c\",line=\"22\",times=\"0\"\}" \
             "insert breakpoint at basics.c:callee2"

    mi_gdb_test "202-break-insert basics.c:15" \
             "202\\^done,bkpt=\{number=\"3\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"callee3\",file=\".*basics.c\",line=\"15\",times=\"0\"\}" \
             "insert breakpoint at basics.c:15 (callee3)"

    mi_gdb_test "203-break-insert \"\\\"${srcfile}\\\":6\"" \
             "203\\^done,bkpt=\{number=\"4\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"callee4\",file=\".*basics.c\",line=\"6\",times=\"0\"\}" \
             "insert breakpoint at \"<fullfilename>\":6 (callee4)"

    mi_gdb_test "204-break-list" \
                "204\\^done,BreakpointTable=\{hdr=\{.*\},bkpt=\{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"$hex\",func=\"main\",file=\".*basics.c\",line=\"32\",times=\"0\"\},.*\}\}" \
                "list of breakpoints"

    mi_gdb_test "205-break-disable 2 3 4" \
                "205\\^done.*" \
                "disabling of breakpoints"

    mi_gdb_test "206-break-info 2" \
                "206\\^done,BreakpointTable=\{hdr=\{.*\},bkpt=\{number=\"2\",.*,enabled=\"n\",.*\}\}" \
                "list of breakpoints, 16 disabled"
}

proc test_running_the_program {} {
    global mi_gdb_prompt
    global hex

    # Run the program without args, then specify srgs and rerun the program
    # Tests:
    # -exec-run
    # -gdb-set

    # mi_gdb_test cannot be used for asynchronous commands because there are
    # two prompts involved and this can lead to a race condition.
    # The following is equivalent to a send_gdb "000-exec-run\n"
    mi_run_cmd
    gdb_expect {
	-re "000\\*stopped,reason=\"breakpoint-hit\",bkptno=\"1\",thread-id=\"\[01\]\",frame=\{addr=\"$hex\",func=\"main\",args=\{\},file=\".*basics.c\",line=\"32\"\}\r\n$mi_gdb_prompt$" {
	    pass "run to main"
	}
	-re ".*$mi_gdb_prompt$" {
	    fail "run to main (2)"
	}
	timeout {
	    fail "run to main (timeout)"
	}
    }
}

proc test_controlled_execution {} {
    global mi_gdb_prompt
    global hex

    # Continue execution until a breakpoint is reached, step into calls, verifying
    # if the arguments are correctly shown, continue to the end of a called
    # function, step over a call (next).
    # Tests:
    # -exec-continue
    # -exec-next
    # -exec-step
    # -exec-finish

    # mi_gdb_test cannot be used for asynchronous commands because there are
    # two prompts involved and this can lead to a race condition.
    mi0_next_to "main" "" "basics.c" "33" "next at main"

    # FIXME: A string argument is not printed right; should be fixed and
    #        we should look for the right thing here.
    # NOTE: The ``\\\\\"'' is for \".
    mi0_step_to "callee1" \
	"\{name=\"intarg\",value=\"2\"\},\{name=\"strarg\",value=\"$hex \\\\\"A string argument\.\\\\\"\"\},\{name=\"fltarg\",value=\"3.5\"\}" \
	"basics.c" "27" "step at main"

    # FIXME: A string argument is not printed right; should be fixed and
    #        we should look for the right thing here.
    mi0_execute_to "exec-step 3" "end-stepping-range" "callee4" "" \
	"basics.c" "8" "" "step to callee4"

    # FIXME: A string argument is not printed right; should be fixed and
    #        we should look for the right thing here.
    # NOTE: The ``.'' is part of ``gdb-result-var="$1"''
    mi0_finish_to "callee3" ".*" "basics.c" "18" ".1" "0" "exec-finish"
}

proc test_controlling_breakpoints {} {
    global mi_gdb_prompt

    # Enable, delete, set ignore counts in breakpoints
    # (disable was already tested above)
    # Tests:
    # -break-delete
    # -break-enable
    # -break-after
    # -break-condition

}

proc test_program_termination {} {
    global mi_gdb_prompt

    # Run to completion: normal and forced
    # Tests:
    # -exec-abort
    # (normal termination of inferior)

    # FIXME: "stopped" doesn't seem appropriate.
    # mi_gdb_test cannot be used for asynchronous commands because there are
    # two prompts involved and this can lead to a race condition.
    send_gdb "999-exec-continue\n"
    gdb_expect {
      -re "999\\^running\r\n$mi_gdb_prompt" {
        gdb_expect {
          -re "999\\*stopped,reason=\"exited-normally\"\r\n$mi_gdb_prompt$" {
            pass "continue to end"
          }
          -re ".*$mi_gdb_prompt$" {fail "continue to end (2)"}
          timeout {fail "continue to end (timeout 2)"}
        }
      }
      -re ".*$mi_gdb_prompt$" {fail "continue to end (1)"}
      timeout {fail "continue to end (timeout 1)"}
    }
}

test_breakpoints_creation_and_listing
test_running_the_program
test_controlled_execution
test_controlling_breakpoints
test_program_termination

mi_gdb_exit
return 0
@


1.7
log
@        * mi-simplerun.exp (test_controlled_execution): Follow renaming of
        mi_run_to to mi_execute_to.
        * mi-var-cmd.exp: Likewise.
        * mi0-simplerun.exp: Likewise.
        * mi0-var-cmd.exp: Likewise.
@
text
@@


1.7.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@@


1.6
log
@        * lib/mi-support.exp: (mi_run_to_helper, mi_run_to,
        mi_step_to, mi_next_to, mi_continue_to, mi_finish_to,
        mi0_step_to, mi0_next_to, mi0_continue_to, mi0_finish_to,
        mi0_run_to): New functions.
        * gdb.mi/mi-simplerun.exp: Use them.
        * gdb.mi/mi0-simplerun.exp: Likewise.
        * gdb.mi/mi-var-cmd.exp: Likewise.
        * gdb.mi/mi0-var-cmd.exp: Likewise.
@
text
@d145 1
a145 1
    mi0_run_to "exec-step 3" "end-stepping-range" "callee4" "" \
@


1.6.8.1
log
@Merge with kseitz_interps-20020930-merge.
@
text
@@


1.5
log
@* mi0-var-block.exp, mi0-stack.exp, mi0-simplerun.exp,
mi0-regs.exp, mi0-watch.exp, mi0-stepi.exp, mi0-until.exp,
mi0-return.exp, mi0-read-memory.exp, mi0-eval.exp,
mi0-disassemble.exp, mi0-console.exp, mi-watch.exp,
mi-var-display.exp, mi-var-cmd.exp, mi-var-child.exp,
mi-until.exp, mi-var-block.exp, mi-stepi.exp, mi-stack.exp,
mi-simplerun.exp, mi-return.exp, mi-regs.exp, mi-read-memory.exp,
mi-disassemble.exp, mi-eval.exp, mi-console.exp: Replace pattern
matching thread=0 with one to also match thread=1.
Fix PR gdb/190.
@
text
@d134 1
a134 9
    send_gdb "220-exec-next\n"
    gdb_expect {
	-re "220\\^running\r\n${mi_gdb_prompt}220\\*stopped,reason=\"end-stepping-range\",thread-id=\"\[01\]\",frame=\{addr=\"$hex\",func=\"main\",args=\{\},file=\".*basics.c\",line=\"33\"\}\r\n$mi_gdb_prompt$" {
	    pass "next at main"
	}
	timeout {
	    fail "next at main (timeout)"
	}
    }
d139 3
a141 9
    send_gdb "221-exec-step\n"
    gdb_expect {
	-re "221\\^running\r\n${mi_gdb_prompt}221\\*stopped,reason=\"end-stepping-range\",thread-id=\"\[01\]\",frame=\{addr=\"$hex\",func=\"callee1\",args=\{\{name=\"intarg\",value=\"2\"\},\{name=\"strarg\",value=\"$hex \\\\\"A string argument\.\\\\\"\"\},\{name=\"fltarg\",value=\"3.5\"\}\},file=\".*basics.c\",line=\"27\"\}\r\n$mi_gdb_prompt$" {
            pass "step at main"
	}
	timeout {
	    fail "step at main (timeout)"
        }
    }
d145 2
a146 9
    send_gdb "222-exec-step 3\n"
    gdb_expect 30 {
	-re "222\\^running\r\n${mi_gdb_prompt}222\\*stopped,reason=\"end-stepping-range\",thread-id=\"\[01\]\",frame=\{addr=\"$hex\",func=\"callee4\",args=\{\},file=\".*basics.c\",line=\"8\"\}\r\n$mi_gdb_prompt$" {
            pass "step to callee4"
	}
	timeout {
	    fail "step to callee4 (timeout)"
	}
    }
d151 1
a151 9
    send_gdb "223-exec-finish\n"
    gdb_expect 30 {
	-re "223\\^running\r\n${mi_gdb_prompt}223\\*stopped,reason=\"function-finished\",thread-id=\"\[01\]\",frame=\{addr=\"$hex\",func=\"callee3\",args=\{.*\},file=\".*basics.c\",line=\"18\"\},gdb-result-var=\".1\",return-value=\"0\"\r\n$mi_gdb_prompt$" {
            pass "exec-finish"
	}
	timeout {
	    fail "exec-finish (timeout)"
	}
    }
@


1.4
log
@* mi0-until.exp, mi-until.exp, mi0-stepi.exp, mi-stepi.exp,
mi-simplerun.exp, mi0-simplerun.exp, mi0-return.exp,
mi-return.exp, mi0-console.exp, mi-console.exp: Recognize an
unexpected run-to-main response. Report as a fail.
@
text
@d107 1
a107 1
	-re "000\\*stopped,reason=\"breakpoint-hit\",bkptno=\"1\",thread-id=\"0\",frame=\{addr=\"$hex\",func=\"main\",args=\{\},file=\".*basics.c\",line=\"32\"\}\r\n$mi_gdb_prompt$" {
d136 1
a136 1
	-re "220\\^running\r\n${mi_gdb_prompt}220\\*stopped,reason=\"end-stepping-range\",thread-id=\"0\",frame=\{addr=\"$hex\",func=\"main\",args=\{\},file=\".*basics.c\",line=\"33\"\}\r\n$mi_gdb_prompt$" {
d149 1
a149 1
	-re "221\\^running\r\n${mi_gdb_prompt}221\\*stopped,reason=\"end-stepping-range\",thread-id=\"0\",frame=\{addr=\"$hex\",func=\"callee1\",args=\{\{name=\"intarg\",value=\"2\"\},\{name=\"strarg\",value=\"$hex \\\\\"A string argument\.\\\\\"\"\},\{name=\"fltarg\",value=\"3.5\"\}\},file=\".*basics.c\",line=\"27\"\}\r\n$mi_gdb_prompt$" {
d161 1
a161 1
	-re "222\\^running\r\n${mi_gdb_prompt}222\\*stopped,reason=\"end-stepping-range\",thread-id=\"0\",frame=\{addr=\"$hex\",func=\"callee4\",args=\{\},file=\".*basics.c\",line=\"8\"\}\r\n$mi_gdb_prompt$" {
d174 1
a174 1
	-re "223\\^running\r\n${mi_gdb_prompt}223\\*stopped,reason=\"function-finished\",thread-id=\"0\",frame=\{addr=\"$hex\",func=\"callee3\",args=\{.*\},file=\".*basics.c\",line=\"18\"\},gdb-result-var=\".1\",return-value=\"0\"\r\n$mi_gdb_prompt$" {
@


1.3
log
@Rename gdb.mi/ChangeLog-mi to gdb.mi/ChangeLog.  Update everything.
@
text
@d110 3
@


1.3.4.1
log
@        * lib/mi-support.exp: (mi_run_to_helper, mi_run_to,
        mi_step_to, mi_next_to, mi_continue_to, mi_finish_to,
        mi0_step_to, mi0_next_to, mi0_continue_to, mi0_finish_to,
        mi0_run_to): New functions.
        * gdb.mi/mi-simplerun.exp: Use them.
        * gdb.mi/mi0-simplerun.exp: Likewise.
        * gdb.mi/mi-var-cmd.exp: Likewise.
        * gdb.mi/mi0-var-cmd.exp: Likewise.
@
text
@d131 9
a139 1
    mi0_next_to "main" "" "basics.c" "33" "next at main"
d144 9
a152 3
    mi0_step_to "callee1" \
	"\{name=\"intarg\",value=\"2\"\},\{name=\"strarg\",value=\"$hex \\\\\"A string argument\.\\\\\"\"\},\{name=\"fltarg\",value=\"3.5\"\}" \
	"basics.c" "27" "step at main"
d156 9
a164 2
    mi0_run_to "exec-step 3" "end-stepping-range" "callee4" "" \
	"basics.c" "8" "" "step to callee4"
d169 9
a177 1
    mi0_finish_to "callee3" ".*" "basics.c" "18" ".1" "0" "exec-finish"
@


1.2
log
@Recognize -i=mi0, -i=mi1 and -i=mi.
@
text
@a227 6

# Local variables: 
# change-log-default-name: "ChangeLog-mi"
# End: 


@


1.1
log
@Clone the mi-*.exp tests into mi0-*.exp.
@
text
@d32 1
@

