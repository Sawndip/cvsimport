head	1.21;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.21
	gdb_7_6-2013-04-26-release:1.21
	gdb_7_6-branch:1.21.0.2
	gdb_7_6-2013-03-12-branchpoint:1.21
	gdb_7_5_1-2012-11-29-release:1.20
	gdb_7_5-2012-08-17-release:1.20
	gdb_7_5-branch:1.20.0.2
	gdb_7_5-2012-07-18-branchpoint:1.20
	gdb_7_4_1-2012-04-26-release:1.18.2.1
	gdb_7_4-2012-01-24-release:1.18.2.1
	gdb_7_4-branch:1.18.0.2
	gdb_7_4-2011-12-13-branchpoint:1.18
	gdb_7_3_1-2011-09-04-release:1.14
	gdb_7_3-2011-07-26-release:1.14
	gdb_7_3-branch:1.14.0.2
	gdb_7_3-2011-04-01-branchpoint:1.14
	gdb_7_2-2010-09-02-release:1.13
	gdb_7_2-branch:1.13.0.2
	gdb_7_2-2010-07-07-branchpoint:1.13
	gdb_7_1-2010-03-18-release:1.10
	gdb_7_1-branch:1.10.0.2
	gdb_7_1-2010-02-18-branchpoint:1.10
	gdb_7_0_1-2009-12-22-release:1.8
	gdb_7_0-2009-10-06-release:1.8
	gdb_7_0-branch:1.8.0.4
	gdb_7_0-2009-09-16-branchpoint:1.8
	msnyder-checkpoint-072509-branch:1.8.0.2
	msnyder-checkpoint-072509-branchpoint:1.8
	reverse-20081226-branch:1.5.0.4
	reverse-20081226-branchpoint:1.5
	multiprocess-20081120-branch:1.5.0.2
	multiprocess-20081120-branchpoint:1.5
	reverse-20080930-branch:1.4.0.2
	reverse-20080930-branchpoint:1.4;
locks; strict;
comment	@# @;


1.21
date	2013.01.01.06.41.24;	author brobecke;	state Exp;
branches;
next	1.20;

1.20
date	2012.07.10.15.32.51;	author tromey;	state Exp;
branches;
next	1.19;

1.19
date	2012.01.04.08.17.54;	author brobecke;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.09.17.45.19;	author palves;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2011.07.18.04.14.21;	author qiyao;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.27.14.16.43;	author mpolacek;	state Exp;
branches;
next	1.15;

1.15
date	2011.05.27.12.47.10;	author mpolacek;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.01.15.33.47;	author brobecke;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.14.15.45.33;	author uweigand;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.26.18.12.13;	author msnyder;	state Exp;
branches;
next	1.11;

1.11
date	2010.02.24.07.51.46;	author vprus;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.28.22.14.12;	author drow;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.01.07.32.03;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.02.15.43.10;	author palves;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.18.07.28.34;	author vprus;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.03.05.58.06;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.17.12.34.19;	author vprus;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.22.11.00.41;	author palves;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.13.17.54.05;	author drow;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.21.15.09.42;	author vprus;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.19.14.13.29;	author vprus;	state Exp;
branches;
next	;

1.18.2.1
date	2012.01.06.04.44.09;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2002-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


if { ![support_displaced_stepping] } { 
    unsupported "displaced stepping"
    return -1
}

load_lib mi-support.exp
set MIFLAGS "-i=mi"

gdb_exit
if {[mi_gdb_start]} {
    continue
}

proc mi_nonstop_resume { command test } {
    if { [mi_send_resuming_command $command $test] != 0 } {
	# If a resume fails, assume non-stop is broken or unsupported
	# for this target.  We have logged a FAIL or UNSUPPORTED; skip
	# the remaining tests to limit timeouts.
	return -code continue
    }
}

#
# Start here
#
standard_testfile non-stop.c

set options [list debug]
if {[gdb_compile_pthreads "$srcdir/$subdir/$srcfile" $binfile executable $options] != "" } {
    return -1
}

mi_gdb_reinitialize_dir $srcdir/$subdir
mi_gdb_load $binfile

mi_gdb_test "-gdb-set non-stop 1" ".*"
mi_gdb_test "-gdb-set target-async 1" ".*"
mi_detect_async

if { [mi_run_to_main] < 0 } {
    continue
}

mi_create_breakpoint break_at_me 2 keep break_at_me .* .* .* "breakpoint at marker"

mi_nonstop_resume "exec-continue" "resume 1"
mi_expect_stop "breakpoint-hit" "break_at_me" ".*" "non-stop.c" ".*" {"" "disp=\"keep\""} "w0,i0 stop"
mi_expect_stop "breakpoint-hit" "break_at_me" ".*" "non-stop.c" ".*" {"" "disp=\"keep\""} "w1,i0 stop"

mi_check_thread_states {"running" "stopped" "stopped"} "thread state, stop 1"

mi_gdb_test "-thread-select 2" "\\^done.*" "select thread 2"
mi_create_varobj I_W0 "i" "create varobj in first thread"
mi_gdb_test "-thread-select 3" "\\^done.*" "select thread 3"
mi_create_varobj I_W1 "i" "create varobj in second thread" 

mi_nonstop_resume "exec-continue --thread 2" "resume 1"
mi_check_thread_states {"running" "running" "stopped"} "thread state, resume 1"
mi_expect_stop "breakpoint-hit" "break_at_me" ".*" "non-stop.c" ".*" {"" "disp=\"keep\""} "w0,i1 stop"
mi_check_thread_states {"running" "stopped" "stopped"} "thread state, stop 2"

mi_nonstop_resume "exec-continue --thread 3" "resume 2"
mi_check_thread_states {"running" "stopped" "running"} "thread state, resume 2"
mi_expect_stop "breakpoint-hit" "break_at_me" ".*" "non-stop.c" ".*" {"" "disp=\"keep\""} "w1,i1 stop"
mi_check_thread_states {"running" "stopped" "stopped"} "thread state, stop 3"

mi_varobj_update * {I_W1 I_W0} "update varobj, 1"
mi_check_varobj_value I_W0 1 "check varobj, w0, 1"
mi_check_varobj_value I_W1 1 "check varobj, w1, 1"

mi_gdb_test "-exec-interrupt --thread 1" "\\^done" "interrupted"
mi_expect_interrupt "got interrupt"

# The interrupt command sends SIGINT to the target, and therefore the
# thread might not be stopped immediately when we return from the target.
# So, wait a bit
sleep 1
mi_check_thread_states {"stopped" "stopped" "stopped"} "thread state, stop 4"

mi_gdb_test "-exec-continue --all" ".*\\*running,thread-id=\"3\"\r\n\\*running,thread-id=\"2\"\r\n\\*running,thread-id=\"1\"" \
    "resume all"

mi_expect_stop "breakpoint-hit" "break_at_me" "\[^\n\]*" "non-stop.c" "\[0-9\]*" {"" "disp=\"keep\""} "w0,i2 stop"
mi_expect_stop "breakpoint-hit" "break_at_me" ".*" "non-stop.c" ".*" {"" "disp=\"keep\""} "w1,i2 stop"

# At this point, thread 1 (main) is running, and worker threads are stopped.
# Check that we can modify breakpoint condition, even when operating on a 
# running thread.
mi_gdb_test "-break-condition --thread 1 2 id==1" "\\^done" "set condition, 1"

mi_nonstop_resume "exec-continue --thread 2" "resume 2"
mi_nonstop_resume "exec-continue --thread 3" "resume 3"

sleep 2
mi_expect_stop "breakpoint-hit" "break_at_me" ".*" "non-stop.c" ".*" {"" "disp=\"keep\""} "w0,i3 stop"
mi_check_thread_states {"running" "running" "stopped"} "thread state, stop on cond breakpoint"

# Check that when we update all varobj, we don't get no error about varobj
# bound to running thread.
mi_varobj_update * {I_W1} "update varobj, 2"
mi_check_varobj_value I_W1 3 "check varobj, w1, 1"


# Check that stack commands are allowed on a stopped thread, even if some other threads
# are running, and produce something sane.  Also check we check error on running thread.
mi_gdb_test "-stack-list-frames --thread 2" "\\^error,msg=\".*\"" "stacktrace of running thread"
mi_gdb_test "-stack-list-frames --thread 3" \
    "\\^done,stack=\\\[frame={level=\"0\",addr=\".*\",func=\"break_at_me\".*" \
    "stacktrace of stopped thread"

# verify that after thread exit, the thread is reported as exited in -thread-info, and
# we can still interact with other threads.
mi_gdb_test "-thread-select 2" "\\^done.*" "select first worker thread"
# Since thread 2 is running, we need to set variable via another thread.
mi_gdb_test "-gdb-set --thread 3 variable exit_first_thread=1" ".*\\^done" "ask the second thread to exit"

set test "wait for thread exit"
if { [is_remote target] } {
    # The remote protocol doesn't have support for thread exit
    # notifications.
    unsupported $test
} else {
    gdb_expect {
	-re ".*=thread-exited,id=\"2\",group-id=\"i\[0-9\]+\"\r\n$" {
	    pass $test
	}
	timeout {
	    fail "$test (timeout)"
	}
    }
}

# See that we can still poke other threads.
mi_gdb_test "-stack-list-frames --thread 3" \
    "\\^done,stack=\\\[frame={level=\"0\",addr=\".*\",func=\"break_at_me\".*" \
    "stacktrace of stopped thread"

mi_gdb_exit
@


1.20
log
@	* gdb.mi/dw2-ref-missing-frame.exp: Use standard_testfile,
	standard_output_file.
	* gdb.mi/gdb2549.exp: Use standard_testfile.
	* gdb.mi/gdb669.exp: Use standard_testfile.
	* gdb.mi/gdb701.exp: Use standard_testfile.
	* gdb.mi/gdb792.exp: Use standard_testfile.
	* gdb.mi/mi-async.exp: Use standard_testfile.
	* gdb.mi/mi-basics.exp: Use standard_testfile.
	* gdb.mi/mi-break.exp: Use standard_testfile.
	* gdb.mi/mi-cli.exp: Use standard_testfile.
	* gdb.mi/mi-console.exp: Use standard_testfile.
	* gdb.mi/mi-disassemble.exp: Use standard_testfile.
	* gdb.mi/mi-eval.exp: Use standard_testfile.
	* gdb.mi/mi-file-transfer.exp: Use standard_testfile.
	* gdb.mi/mi-file.exp: Use standard_testfile.
	* gdb.mi/mi-inheritance-syntax-error.exp: Use standard_testfile.
	* gdb.mi/mi-logging.exp: Use standard_testfile.
	* gdb.mi/mi-nonstop-exit.exp: Use standard_testfile.
	* gdb.mi/mi-nonstop.exp: Use standard_testfile.
	* gdb.mi/mi-ns-stale-regcache.exp: Use standard_testfile.
	* gdb.mi/mi-nsintrall.exp: Use standard_testfile.
	* gdb.mi/mi-nsmoribund.exp: Use standard_testfile.
	* gdb.mi/mi-nsthrexec.exp: Use standard_testfile.
	* gdb.mi/mi-pending.exp: Use standard_testfile,
	standard_output_file.
	* gdb.mi/mi-pthreads.exp: Use standard_testfile.
	* gdb.mi/mi-read-memory.exp: Use standard_testfile.
	* gdb.mi/mi-regs.exp: Use standard_testfile.
	* gdb.mi/mi-return.exp: Use standard_testfile.
	* gdb.mi/mi-reverse.exp: Use standard_testfile.
	* gdb.mi/mi-simplerun.exp: Use standard_testfile.
	* gdb.mi/mi-solib.exp: Use standard_testfile,
	standard_output_file.
	* gdb.mi/mi-stack.exp: Use standard_testfile.
	* gdb.mi/mi-stepi.exp: Use standard_testfile.
	* gdb.mi/mi-stepn.exp: Use standard_testfile.
	* gdb.mi/mi-syn-frame.exp: Use standard_testfile.
	* gdb.mi/mi-until.exp: Use standard_testfile.
	* gdb.mi/mi-var-block.exp: Use standard_testfile.
	* gdb.mi/mi-var-child-f.exp: Use standard_testfile.
	* gdb.mi/mi-var-child.exp: Use standard_testfile.
	* gdb.mi/mi-var-cmd.exp: Use standard_testfile.
	* gdb.mi/mi-var-cp.exp: Use standard_testfile.
	* gdb.mi/mi-var-display.exp: Use standard_testfile.
	* gdb.mi/mi-var-invalidate.exp: Use standard_testfile,
	standard_output_file.
	* gdb.mi/mi-var-rtti.exp: Use standard_testfile.
	* gdb.mi/mi-watch-nonstop.exp: Use standard_testfile.
	* gdb.mi/mi-watch.exp: Use standard_testfile.
	* gdb.mi/mi2-amd64-entry-value.exp: Use standard_testfile.
	* gdb.mi/mi2-basics.exp: Use standard_testfile.
	* gdb.mi/mi2-break.exp: Use standard_testfile.
	* gdb.mi/mi2-cli.exp: Use standard_testfile.
	* gdb.mi/mi2-console.exp: Use standard_testfile.
	* gdb.mi/mi2-disassemble.exp: Use standard_testfile.
	* gdb.mi/mi2-eval.exp: Use standard_testfile.
	* gdb.mi/mi2-file.exp: Use standard_testfile.
	* gdb.mi/mi2-pthreads.exp: Use standard_testfile.
	* gdb.mi/mi2-read-memory.exp: Use standard_testfile.
	* gdb.mi/mi2-regs.exp: Use standard_testfile.
	* gdb.mi/mi2-return.exp: Use standard_testfile.
	* gdb.mi/mi2-simplerun.exp: Use standard_testfile.
	* gdb.mi/mi2-stack.exp: Use standard_testfile.
	* gdb.mi/mi2-stepi.exp: Use standard_testfile.
	* gdb.mi/mi2-syn-frame.exp: Use standard_testfile.
	* gdb.mi/mi2-until.exp: Use standard_testfile.
	* gdb.mi/mi2-var-block.exp: Use standard_testfile.
	* gdb.mi/mi2-var-child.exp: Use standard_testfile.
	* gdb.mi/mi2-var-cmd.exp: Use standard_testfile.
	* gdb.mi/mi2-var-display.exp: Use standard_testfile.
	* gdb.mi/mi2-watch.exp: Use standard_testfile.
@
text
@d1 1
a1 1
# Copyright 2002-2005, 2007-2012 Free Software Foundation, Inc.
@


1.19
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d42 1
a42 3
set testfile "non-stop"
set srcfile "$testfile.c"
set binfile "$objdir/$subdir/mi-$testfile"
d44 1
a44 1
set options [list debug incdir=$objdir]
@


1.18
log
@2011-08-09  Pedro Alves  <pedro@@codesourcery.com>

	gdb/testsuite/
	* lib/mi-support.exp (detect_async): Rename to...
	(mi_detect_async): ... this.
	* gdb.mi/mi-nonstop-exit.exp: Adjust.
	* gdb.mi/mi-nonstop.exp: Adjust.
	* gdb.mi/mi-ns-stale-regcache.exp: Adjust.
	* gdb.mi/mi-nsintrall.exp: Adjust.
	* gdb.mi/mi-nsmoribund.exp: Adjust.
	* gdb.mi/mi-nsthrexec.exp: Adjust.
@
text
@d1 1
a1 2
# Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
# Free Software Foundation, Inc.
@


1.18.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 1
# Copyright 2002-2005, 2007-2012 Free Software Foundation, Inc.
@


1.17
log
@	gdb/testsuite/

	* gdb.base/async-shell.exp: Skip test if displaced stepping is not
	supported.
	* gdb.mi/mi-nonstop-exit.exp: Likewise.
	* gdb.mi/mi-nonstop.exp: Likewise.
	* gdb.mi/mi-ns-stale-regcache.exp: Likewise.
	* gdb.mi/mi-nsintrall.exp: Likewise.
	* gdb.mi/mi-nsmoribund.exp: Likewise.
	* gdb.mi/mi-nsthrexec.exp: Likewise.
	* gdb.python/py-evthreads.exp: Likewise.
@
text
@d57 1
a57 1
detect_async
@


1.16
log
@gdb.mi/mi-nonstop.exp: Replace gdb_test_multiple with mi_gdb_test.
@
text
@d17 6
@


1.15
log
@gdb.mi: Get rid of the non-stop testcases.
@
text
@d84 3
a86 5
gdb_test_multiple "-exec-interrupt --thread 1" "interrupted" {
    -re "\\^done\r\n$mi_gdb_prompt\\*stopped\[^\r\n\]+\r\n$" {
	pass "interrupted"
    }
}
d93 2
a94 5
gdb_test_multiple "-exec-continue --all" "resume all" {
    -re ".*\\*running,thread-id=\"3\"\r\n\\*running,thread-id=\"2\"\r\n\\*running,thread-id=\"1\"\r\n$mi_gdb_prompt" {
	pass "resume all"
    }
}
@


1.14
log
@run copyright.sh for 2011.
@
text
@a48 11
set supported 0
gdb_test_multiple "-gdb-show non-stop" "" {
    -re ".*\\^done,value=\"off\",supported=\"(\[^\"\]+)\"\r\n$mi_gdb_prompt$" {
	if { $expect_out(1,string) == "1" } {
	    set supported 1
	}
    }
    -re ".*$mi_gdb_prompt$" {
    }
}

@


1.13
log
@	* gdb.mi/mi-nonstop.exp: Do not call perror if non-stop mode is
	not supported on the target.
	* gdb.mi/mi-nonstop-exit.exp: Likewise.
	* gdb.mi/mi-ns-stale-regcache.exp: Likewise.
	* gdb.mi/mi-nsintrall.exp: Likewise.
	* gdb.mi/mi-nsmoribund.exp: Likewise.
	* gdb.mi/mi-nsthrexec.exp: Likewise.
@
text
@d1 1
a1 1
# Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010
@


1.12
log
@2010-05-26  Michael Snyder  <msnyder@@msnyder-server.eng.vmware.com>

	* gdb.reverse/consecutive-reverse.exp: Replace send_gdb with gdb_test.
	* gdb.reverse/consecutive-precsave.exp: Replace send_gdb with gdb_test.

	* gdb.mi/mi-basics.exp:
	* gdb.mi/mi-nonstop-exit.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi-nonstop.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi-ns-stale-regcache.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi-nsintrall.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi-nsmoribund.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi-nsthrexec.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi-return.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi-var-display.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi2-basics.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi2-console.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi2-return.exp: Replace send_gdb with gdb_test.
	* gdb.mi/mi2-var-display.exp: Replace send_gdb with gdb_test.
@
text
@a64 1
    perror "mi-nonstop.exp tests suppressed"
@


1.11
log
@	Multiexec MI

	* breakpoint.c (clear_syscall_counts): Take struct inferior*.
	* inferior.c (add_inferior_silent): Notify inferior_added
	observer.
	(delete_inferior_1): Notify inferior_removed observer.
	(exit_inferior_1): Pass inferior, not pid, to observer.
	(inferior_appeared): Likewise.
	(add_inferior_with_spaces): New.
	(add_inferior_command): Use the above.
	* inferior.h (delete_inferior_1, add_inferior_with_spaces):
	Declare.

	* inflow.c (inflow_inferior_exit): Likewise.
	* jit.c (jit_inferior_exit_hook): Likewise.

	* mi/mi-cmds.c (mi_cmds): Register add-inferior and
	remove-inferior.
	* mi/mi-cmds.h (mi_cmd_add_inferior, mi_cmd_remove_inferior): New.
	* mi/mi-interp.c (mi_inferior_added, mi_inferior_removed): New.
	(report_initial_inferior): New.
	(mi_inferior_removed): Register the above. Make sure
	inferior_added observer is called on the first inferior.
	(mi_new_thread, mi_thread_exit): Thread group is now identified by
	inferior number, not pid.
	(mi_solib_loaded, mi_solib_unloaded): Report which inferiors are
	affected.
	* mi/mi-main.c (current_context): New.
	(proceed_thread_callback): Use typed closure.
	Proceed everything if pid is 0. Most implementation split into
	(proceed_thread): ... this.
	(run_one_inferior): New.
	(mi_cmd_exec_continue, mi_cmd_exec_interrupt, mi_cmd_exec_run):
	Adjust for multiexec behaviour.
	(mi_cmd_add_inferior, mi_cmd_remove_inferior): New.
	(mi_cmd_execute): Handle the 'thread-group' option here.
	Do some extra checks.
	* mi-parse.c (mi_parse): Handle the --all and --thread-group
	options.
	* mi-parse.h (struct mi_parse): New fields all and thread_group.
@
text
@d50 1
a50 2
send_gdb "-gdb-show non-stop\n"
gdb_expect {
d56 1
a56 1
    -re ".$mi_gdb_prompt$" {
d96 1
a96 2
send_gdb "-exec-interrupt --thread 1\n"
gdb_expect {
a99 3
    timeout {
	fail "interrupted (timeout)"
    }
d107 1
a107 2
send_gdb "-exec-continue --all\n"
gdb_expect {
a110 3
    timeout {
	fail "resume all (timeout)"
    }
@


1.10
log
@	* gdb.mi/mi-nonstop.exp (mi_nonstop_resume): New function.
	(Top level): Use it to resume.
	* lib/mi-support.exp (mi_send_resuming_command_raw): Recognize
	the Thumb mode displaced stepping error as unsupported.
@
text
@d163 1
a163 1
	-re ".*=thread-exited,id=\"2\",group-id=\"\[0-9\]+\"\r\n$" {
@


1.9
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d25 9
d72 1
a72 1
mi_send_resuming_command "exec-continue" "resume 1"
d83 1
a83 1
mi_send_resuming_command "exec-continue --thread 2" "resume 1"
d88 1
a88 1
mi_send_resuming_command "exec-continue --thread 3" "resume 2"
d130 2
a131 2
mi_send_resuming_command "exec-continue --thread 2" "resume 2"
mi_send_resuming_command "exec-continue --thread 3" "resume 3"
@


1.8
log
@	* gdb.mi/mi-nonstop.exp: Don't check isnative.  Use
	mi_run_to_main.  Skip thread exit test on remote targets.
	* gdb.mi/mi-nsintrall.exp: Don't check isnative.  Use
	mi_run_to_main.
	* gdb.mi/mi-nsmoribund.exp: Don't check isnative.  Use
	mi_run_to_main.
	* lib/mi-support.exp (mi_gdb_target_cmd): Remove trailing anchor
	when expecting ^connected.  Detect when the target doesn't support
	non-stop mode.
	(mi_run_cmd): Detect if non-stop mode was requested by isn't
	supported.  Return -1 on error, 0 on success.
	(mi_runto_helper): Don't expect a stop if mi_run_cmd failed.
	(mi_runto): Return mi_runto_helper's result explicitly.
@
text
@d1 1
a1 1
# Copyright 2002, 2003, 2004, 2005, 2007, 2008, 2009
@


1.7
log
@	* mi/mi-interp.c (mi_solib_loaded, mi_solib_unloaded): New.
	(mi_interpreter_init): Register the above.
	* solib.c (clear_solib): Notify solib unload.
	* breakpoint.c (disable_breakpoints_in_unloaded_shlib): Do not
	disable breakpoints on a.out targets.
@
text
@a16 5
# This only works with native configurations
if {![isnative]} {
  return
}

d44 3
a46 3
        if { $expect_out(1,string) == "1" } {
            set supported 1
        }
d56 3
a58 26
mi_gdb_test "200-break-insert -t main" ".*"

set created "=thread-created,id=\"$decimal\"\r\n"
set running "\\*running,thread-id=\"$decimal\"\r\n"

set notifs "($created)*($running)*($library_loaded_re)*"

# Note: presently, we skip this test on non-native targets,
# so 'run' is OK.  As soon as we start to run this on remote
# target, the logic from mi_run_cmd will have to be refactored.
send_gdb "-exec-run\n"
gdb_expect {
    -re "\\^running\r\n$notifs$mi_gdb_prompt" {
    }
    -re "\\^error,msg=\"The target does not support running in non-stop mode.\"" {
        verbose -log "Non-stop mode not supported, skipping all tests"
        return
    }
    -re "\r\n$mi_gdb_prompt" {
        perror "Cannot start target (unknown output after running)"
        return -1
    }
    timeout {
        perror "Cannot start target (timeout)"
        return -1
    }
a59 1
mi_expect_stop "breakpoint-hit" main ".*" ".*" "\[0-9\]+" { "" "disp=\"del\"" } "run to main"
d88 1
a88 1
send_gdb "-exec-interrupt --thread 1\n" 
d91 1
a91 1
        pass "interrupted"
d94 1
a94 1
        fail "interrupted (timeout)"
d106 1
a106 1
        pass "resume all"
d109 1
a109 1
        fail "resume all (timeout)"
d146 14
a159 6
gdb_expect {
    -re ".*=thread-exited,id=\"2\",group-id=\"\[0-9\]+\"\r\n$" {
        pass "wait for thread exit"
    }
    timeout {
        fail "wait for thread exit (timeout)"
a167 1
    
a168 1

@


1.6
log
@        Updated copyright notices for most files.
@
text
@d66 1
a66 1
set notifs "($created)*($running)*"
@


1.5
log
@	Include group-id in thread-created notification.

        * mi/mi-interp.c (mi_new_thread, mi_thread_exit): Include
        group id in the output.
@
text
@d1 2
a2 1
# Copyright 2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
@


1.4
log
@gdb/
	* linux-nat.c (linux_nat_wait): Only use set_ignore_sigint in
	all-stop mode.

gdb/testsuite/
	* lib/mi-support.exp (mi_expect_interrupt): New.
	(mi_reverse_list, mi_check_thread_states): New, moved and renamed
	from gdb.mi/mi-nonstop.exp.
	* gdb.mi/mi-nsintrall.exp, gdb.mi/nsintrall.c: New.
	* gdb.mi/mi-nonstop.exp (myreverse, check_thread_states): Moved to
	lib/mi-support.exp.
	Use mi_check_thread_states throughout.  Avoid ".*" and do not
	require an anchor after -exec-run.
@
text
@d175 1
a175 1
    -re ".*=thread-exited,id=\"2\"\r\n$" {
@


1.3
log
@	* gdb.mi/mi-nonstop.exp: Do not check thread state while a
	stop is pending.  Avoid ".*" when two stops are pending.
	* lib/gdb.exp (fullname_syntax_POSIX, fullname_syntax_UNC)
	(fullname_syntax_DOS_CASE, fullname_syntax_DOS): Do not match
	newlines in fullnames.
	* lib/mi-support.exp (mi_run_cmd): Do not require an anchor.
	(mi_expect_stop): Update comments.  Only anchor in sync mode.
	Do not match newlines.
	(mi_send_resuming_command_raw): Always return status.
	(mi_get_stop_line): Do not match more than one line by accident.
	Only anchor in sync mode.
	(mi_run_inline_test): If -exec-next fails, give up.
@
text
@a28 23
proc myreverse { list } {
    if { [llength $list] <= 1 } {
        return $list
    }
    set tail [lrange $list 1 [llength $list]]
    set rtail [myreverse $tail]
    lappend rtail [lindex $list 0]
    return $rtail
}

proc check_thread_states { xstates test } {
    global expect_out
    set states [myreverse $xstates]
    set pattern "\\^done,threads=\\\["
    foreach s $states {
        set pattern "${pattern}(.*)state=\"$s\""
    }
    set pattern "$pattern\\\}\\\].*"

    verbose -log "expecting: $pattern"
    mi_gdb_test "-thread-info" $pattern $test
}

d61 6
d72 1
a72 1
    -re ".*\\^running.*$mi_gdb_prompt$" {
d78 1
a78 1
    -re ".*\r\n$mi_gdb_prompt$" {
d95 1
a95 1
check_thread_states {"running" "stopped" "stopped"} "thread state, stop 1"
d103 1
a103 1
check_thread_states {"running" "running" "stopped"} "thread state, resume 1"
d105 1
a105 1
check_thread_states {"running" "stopped" "stopped"} "thread state, stop 2"
d108 1
a108 1
check_thread_states {"running" "stopped" "running"} "thread state, resume 2"
d110 1
a110 1
check_thread_states {"running" "stopped" "stopped"} "thread state, stop 3"
d129 1
a129 1
check_thread_states {"stopped" "stopped" "stopped"} "thread state, stop 4"
d154 1
a154 1
check_thread_states {"running" "running" "stopped"} "thread state, stop on cond breakpoint"
@


1.2
log
@	* gdb.mi/mi-nonstop.exp: Fix the check for non-stop
	support.  Adjust the order of "*running" notifications.
	* gdb.mi/non-stop.c: Don't cast from int to void* and
	back.
@
text
@d158 1
a158 3
check_thread_states {"running" "running" "running"} "thread state, resume all"

mi_expect_stop "breakpoint-hit" "break_at_me" ".*" "non-stop.c" ".*" {"" "disp=\"keep\""} "w0,i2 stop"
@


1.1
log
@	* lib/mi-support.exp (mi_expect_stop): Produce
	more details on failures.
	* gdb.mi/mi-nonstop.exp: New.
	* gdb.mi/non-stop.c: New.
@
text
@a78 6
if { $supported == 0 } {
    verbose -log "Non-stop mode not supported by the target, skipping tests"
    return

}

d83 22
a104 1
mi_runto main
a147 3
# Note that the order of *running notifications below is 'unnatural'. This is because
# we do only one out-of-line step at the time, so one thread gets resumed immediately
# and another has to wait.
d150 1
a150 1
    -re ".*\\*running,thread-id=\"3\".*\\*running,thread-id=\"1\".*\\*running,thread-id=\"2\"\r\n" {
@

