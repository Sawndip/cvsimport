head	1.3;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.2
	gdb_7_6-2013-04-26-release:1.2
	gdb_7_6-branch:1.2.0.2
	gdb_7_6-2013-03-12-branchpoint:1.2
	gdb_7_5_1-2012-11-29-release:1.1.2.2
	gdb_7_5-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2013.04.18.10.08.08;	author luisgpm;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.01.06.41.24;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.14.19.21.01;	author luisgpm;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.11.16.02.02.20;	author luisgpm;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2012.11.16.02.04.07;	author luisgpm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* gdb.mi/mi-var-create-rtti.exp: Create a variable of
	type void *.
@
text
@# Copyright 2012-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib mi-support.exp
set MIFLAGS "-i=mi"

gdb_exit
if [mi_gdb_start] {
    continue
}

standard_testfile .c
set opts {debug}

if [build_executable $testfile.exp $testfile $srcfile $opts] {
    return -1
}

mi_delete_breakpoints
mi_gdb_reinitialize_dir $srcdir/$subdir
mi_gdb_load ${binfile}

if ![mi_run_to_main] {
    untested "could not run to main"
    return -1
}

# Test creating a register-based variable.  We pick
# register SP since it is a pointer to data.  This checks
# for a regression when creating MI variables from pointers
# with "print object" enabled.

# Enable "print object"
mi_gdb_test "-gdb-set print object on" ".*"

# Test creating a variable for $sp.
# We use a explicit cast to (void *) as that is the
# type that caused the bug this testcase is testing for.
mi_gdb_test "-var-create sp1 * ((void*)\$sp)" \
	    "\\^done,name=\"sp1\",numchild=\"0\",value=\"$hex\",type=\"void \\*\",has_more=\"0\"" \
	    "-var-create sp1 * \$sp"
gdb_exit
@


1.2
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d48 4
a51 2
# Test creating a variable for $sp
mi_gdb_test "-var-create sp1 * \$sp" \
@


1.1
log
@2012-11-14  Luis Machado  <lgustavo@@codesourcery.com>

	gdb/
	* value.c (value_actual_type): Check for TYPE_CODE_STRUCT
	target types.

	gdb/testsuite/
	* gdb.mi/mi-var-create-rtti.c: New file.
	* gdb.mi/mi-var-create-rtti.exp: New file.
@
text
@d1 1
a1 1
# Copyright 2012 Free Software Foundation, Inc.
@


1.1.2.1
log
@	gdb/
	* value.c (value_actual_type): Check for TYPE_CODE_STRUCT
	target types.

	gdb/testsuite/
	* gdb.mi/mi-var-create-rtti.c: New file.
	* gdb.mi/mi-var-create-rtti.exp: New file.
@
text
@d28 1
a28 1
    return -1;
@


1.1.2.2
log
@	Remove spurious ';' char from testsuite/gdb.mi/mi-var-create-rtti.exp.
@
text
@d28 1
a28 1
    return -1
@


