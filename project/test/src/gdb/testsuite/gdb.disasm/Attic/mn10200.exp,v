head	1.4;
access;
symbols
	gdb_6_0-2003-10-04-release:1.3
	kettenis_sparc-20030918-branch:1.3.0.36
	kettenis_sparc-20030918-branchpoint:1.3
	carlton_dictionary-20030917-merge:1.3
	ezannoni_pie-20030916-branchpoint:1.3
	ezannoni_pie-20030916-branch:1.3.0.34
	cagney_x86i386-20030821-branch:1.3.0.32
	cagney_x86i386-20030821-branchpoint:1.3
	carlton_dictionary-20030805-merge:1.3
	carlton_dictionary-20030627-merge:1.3
	gdb_6_0-branch:1.3.0.30
	gdb_6_0-2003-06-23-branchpoint:1.3
	jimb-ppc64-linux-20030613-branch:1.3.0.28
	jimb-ppc64-linux-20030613-branchpoint:1.3
	cagney_convert-20030606-branch:1.3.0.26
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.3.0.24
	cagney_writestrings-20030508-branchpoint:1.3
	jimb-ppc64-linux-20030528-branch:1.3.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.3
	carlton_dictionary-20030523-merge:1.3
	cagney_fileio-20030521-branch:1.3.0.20
	cagney_fileio-20030521-branchpoint:1.3
	kettenis_i386newframe-20030517-mergepoint:1.3
	jimb-ppc64-linux-20030509-branch:1.3.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.3
	kettenis_i386newframe-20030504-mergepoint:1.3
	carlton_dictionary-20030430-merge:1.3
	kettenis_i386newframe-20030419-branch:1.3.0.16
	kettenis_i386newframe-20030419-branchpoint:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.3
	kettenis_i386newframe-20030406-branch:1.3.0.14
	kettenis_i386newframe-20030406-branchpoint:1.3
	cagney_frameaddr-20030403-branchpoint:1.3
	cagney_frameaddr-20030403-branch:1.3.0.12
	cagney_framebase-20030330-mergepoint:1.3
	cagney_framebase-20030326-branch:1.3.0.10
	cagney_framebase-20030326-branchpoint:1.3
	cagney_lazyid-20030317-branch:1.3.0.8
	cagney_lazyid-20030317-branchpoint:1.3
	kettenis-i386newframe-20030316-mergepoint:1.3
	offbyone-20030313-branch:1.3.0.6
	offbyone-20030313-branchpoint:1.3
	kettenis-i386newframe-20030308-branch:1.3.0.4
	kettenis-i386newframe-20030308-branchpoint:1.3
	carlton_dictionary-20030305-merge:1.3
	cagney_offbyone-20030303-branch:1.3.0.2
	cagney_offbyone-20030303-branchpoint:1.3
	carlton_dictionary-20030207-merge:1.3
	interps-20030203-mergepoint:1.2
	interps-20030202-branch:1.2.0.30
	interps-20030202-branchpoint:1.2
	cagney-unwind-20030108-branch:1.2.0.28
	cagney-unwind-20030108-branchpoint:1.2
	carlton_dictionary-20021223-merge:1.2
	gdb_5_3-2002-12-12-release:1.2
	carlton_dictionary-20021115-merge:1.2
	kseitz_interps-20021105-merge:1.2
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.26
	drow-cplus-branchpoint:1.2
	kseitz_interps-20020930-merge:1.2
	carlton_dictionary-20020927-merge:1.2
	carlton_dictionary-branch:1.2.0.24
	carlton_dictionary-20020920-branchpoint:1.2
	gdb_5_3-branch:1.2.0.22
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.20
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.18
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.16
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.14
	cagney_regbuf-20020515-branchpoint:1.2
	jimb-macro-020506-branch:1.2.0.12
	jimb-macro-020506-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.10
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.2
	gdb_5_1_0_1-2002-01-03-release:1.2
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	gdb-post-ptid_t-2001-05-03:1.2
	gdb-pre-ptid_t-2001-05-03:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb-post-protoization-2000-07-29:1.1.1.1
	gdb-pre-protoization-2000-07-29:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb-post-params-removal-2000-06-04:1.1.1.1
	gdb-pre-params-removal-2000-06-04:1.1.1.1
	gdb-post-params-removal-2000-05-28:1.1.1.1
	gdb-pre-params-removal-2000-05-28:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2003.10.06.19.31.43;	author cagney;	state dead;
branches;
next	1.3;

1.3
date	2003.02.04.22.49.19;	author cagney;	state Exp;
branches
	1.3.34.1;
next	1.2;

1.2
date	2001.03.06.08.21.56;	author kevinb;	state Exp;
branches
	1.2.24.1
	1.2.26.1;
next	1.1;

1.1
date	99.04.16.01.34.33;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.33;	author shebs;	state Exp;
branches;
next	;

1.2.24.1
date	2003.02.07.19.17.59;	author carlton;	state Exp;
branches;
next	1.2.24.2;

1.2.24.2
date	2003.11.11.23.51.11;	author carlton;	state dead;
branches;
next	;

1.2.26.1
date	2003.12.14.20.27.54;	author drow;	state dead;
branches;
next	;

1.3.34.1
date	2004.03.23.20.12.34;	author ezannoni;	state dead;
branches;
next	;


desc
@@


1.4
log
@2003-10-06  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/watchpoint.exp: Delete obsolete clear_xfail.
	* gdb.disasm/mn10200.exp: Delete obsolete file.
@
text
@# OBSOLETE 
# OBSOLETE # Copyright 1997 Free Software Foundation, Inc.
# OBSOLETE 
# OBSOLETE # This program is free software; you can redistribute it and/or modify
# OBSOLETE # it under the terms of the GNU General Public License as published by
# OBSOLETE # the Free Software Foundation; either version 2 of the License, or
# OBSOLETE # (at your option) any later version.
# OBSOLETE # 
# OBSOLETE # This program is distributed in the hope that it will be useful,
# OBSOLETE # but WITHOUT ANY WARRANTY; without even the implied warranty of
# OBSOLETE # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# OBSOLETE # GNU General Public License for more details.
# OBSOLETE # 
# OBSOLETE # You should have received a copy of the GNU General Public License
# OBSOLETE # along with this program; if not, write to the Free Software
# OBSOLETE # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
# OBSOLETE 
# OBSOLETE # Please email any bugs, comments, and/or additions to this file to:
# OBSOLETE # bug-gdb@@prep.ai.mit.edu
# OBSOLETE 
# OBSOLETE # This file was written by Jeff Law. (law@@cygnus.com)
# OBSOLETE 
# OBSOLETE if $tracelevel then {
# OBSOLETE 	strace $tracelevel
# OBSOLETE }
# OBSOLETE 
# OBSOLETE if ![istarget "mn10200*-*-*"] {
# OBSOLETE     verbose "Tests ignored for all but mn10200 based targets."
# OBSOLETE     return
# OBSOLETE }
# OBSOLETE 
# OBSOLETE global exec_output
# OBSOLETE set prms_id 0
# OBSOLETE set bug_id 0
# OBSOLETE 
# OBSOLETE set testfile "mn10200"
# OBSOLETE set srcfile ${srcdir}/${subdir}/${testfile}.s
# OBSOLETE set binfile ${objdir}/${subdir}/${testfile}
# OBSOLETE if  { [gdb_compile "${srcfile}" "${binfile}" executable ""] != "" } {
# OBSOLETE      gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc add_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/12i add_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*add	d1,d2.*
# OBSOLETE .*add	d2,a3.*
# OBSOLETE .*add	a2,d1.*
# OBSOLETE .*add	a3,a2.*
# OBSOLETE .*add	16,d1.*
# OBSOLETE .*add	256,d2.*
# OBSOLETE .*add	131071,d3.*
# OBSOLETE .*add	16,a1.*
# OBSOLETE .*add	256,a2.*
# OBSOLETE .*add	131071,a3.*
# OBSOLETE .*addc	d1,d2.*
# OBSOLETE .*addnf	16,a2.*
# OBSOLETE .*$gdb_prompt $" { pass "add tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "add tests" }
# OBSOLETE 	timeout { fail "(timeout) add tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc bcc_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/15i bCC_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*beq	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bne	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bgt	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bge	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*ble	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*blt	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bhi	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bcc	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bls	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bcs	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bvc	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bvs	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bnc	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bns	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bra	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*$gdb_prompt $" { pass "bCC tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "bCC tests" }
# OBSOLETE 	timeout { fail "(timeout) bCC tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc bccx_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/14i bCCx_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*beqx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bnex	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bgtx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bgex	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*blex	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bltx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bhix	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bccx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*blsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bcsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bvcx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bvsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bncx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bnsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*$gdb_prompt $" { pass "bCCx tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "bCCx tests" }
# OBSOLETE 	timeout { fail "(timeout) bCCx tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc bit_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/4 bit_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*btst	64,d1.*
# OBSOLETE .*btst	8192,d2.*
# OBSOLETE .*bset	d1,\\(a2\\).*
# OBSOLETE .*bclr	d1,\\(a2\\).*
# OBSOLETE .*$gdb_prompt $" { pass "bit tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "bit tests" }
# OBSOLETE 	timeout { fail "(timeout) bit tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc cmp_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9i cmp_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*cmp	d1,d2.*
# OBSOLETE .*cmp	d2,a3.*
# OBSOLETE .*cmp	a3,d3.*
# OBSOLETE .*cmp	a3,a2.*
# OBSOLETE .*cmp	16,d3.*
# OBSOLETE .*cmp	256,d2.*
# OBSOLETE .*cmp	131071,d1.*
# OBSOLETE .*cmp	256,a2.*
# OBSOLETE .*cmp	131071,a1.*
# OBSOLETE .*$gdb_prompt $" { pass "cmp tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "cmp tests" }
# OBSOLETE 	timeout { fail "(timeout) cmp tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc extend_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/5i extend_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*ext	d1.*
# OBSOLETE .*extx	d2.*
# OBSOLETE .*extxu	d3.*
# OBSOLETE .*extxb	d2.*
# OBSOLETE .*extxbu	d1.*
# OBSOLETE .*$gdb_prompt $" { pass "extend tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "extend tests" }
# OBSOLETE 	timeout { fail "(timeout) extend tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc logical_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/11i logical_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*and	d1,d2.*
# OBSOLETE .*and	127,d2.*
# OBSOLETE .*and	32767,d3.*
# OBSOLETE .*and	32767,psw.*
# OBSOLETE .*or	d1,d2.*
# OBSOLETE .*or	127,d2.*
# OBSOLETE .*or	32767,d3.*
# OBSOLETE .*or	32767,psw.*
# OBSOLETE .*xor	d1,d2.*
# OBSOLETE .*xor	32767,d3.*
# OBSOLETE .*not	d3.*
# OBSOLETE .*$gdb_prompt $" { pass "logical tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "logical tests" }
# OBSOLETE 	timeout { fail "(timeout) logical tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_1 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/12i mov_tests_1\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	d1,a2.*
# OBSOLETE .*mov	a2,d1.*
# OBSOLETE .*mov	d1,d2.*
# OBSOLETE .*mov	a2,a1.*
# OBSOLETE .*mov	psw,d3.*
# OBSOLETE .*mov	d2,psw.*
# OBSOLETE .*mov	mdr,d1.*
# OBSOLETE .*mov	d2,mdr.*
# OBSOLETE .*mov	\\(a2\\),d1.*
# OBSOLETE .*mov	\\(8,a2\\),d1.*
# OBSOLETE .*mov	\\(256,a2\\),d1.*
# OBSOLETE .*mov	\\(131071,a2\\),d1.*
# OBSOLETE .*$gdb_prompt $" { pass "mov1 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov1 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov1 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_2 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9 mov_tests_2\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	\\(d1,a1\\),d2.*
# OBSOLETE .*mov	\\(0x8000.*\\),d1.*
# OBSOLETE .*mov	\\(0x1ffff.*\\),d1.*
# OBSOLETE .*mov	\\(8,a2\\),a1.*
# OBSOLETE .*mov	\\(256,a2\\),a1.*
# OBSOLETE .*mov	\\(131071,a2\\),a1.*
# OBSOLETE .*mov	\\(d1,a1\\),a2.*
# OBSOLETE .*mov	\\(0x8000.*\\),a1.*
# OBSOLETE .*mov	\\(0x1ffff.*\\),a1.*
# OBSOLETE .*$gdb_prompt $" { pass "mov2 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov2 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov2 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_3 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/10 mov_tests_3\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	d1,\\(a2\\).*
# OBSOLETE .*mov	d1,\\(32,a2\\).*
# OBSOLETE .*mov	d1,\\(256,a2\\).*
# OBSOLETE .*mov	d1,\\(131071,a2\\).*
# OBSOLETE .*mov	d1,\\(d2,a2\\).*
# OBSOLETE .*mov	d1,\\(0x80.*\\).*
# OBSOLETE .*mov	d1,\\(0x1ffff.*\\).*
# OBSOLETE .*mov	a1,\\(32,a2\\).*
# OBSOLETE .*mov	a1,\\(256,a2\\).*
# OBSOLETE .*mov	a1,\\(131071,a2\\).*
# OBSOLETE .*$gdb_prompt $" { pass "mov3 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov3 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov3 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_4 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/8 mov_tests_4\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	a1,\\(d2,a2\\).*
# OBSOLETE .*mov	a1,\\(0x80.*\\).*
# OBSOLETE .*mov	a1,\\(0x1ffff.*\\).*
# OBSOLETE .*mov	8,d1.*
# OBSOLETE .*mov	256,d1.*
# OBSOLETE .*mov	131071,d1.*
# OBSOLETE .*mov	256,a1.*
# OBSOLETE .*mov	131071,a1.*
# OBSOLETE .*$gdb_prompt $" { pass "mov4 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov4 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov4 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc movb_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/12 movb_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*movb	\\(8,a2\\),d1.*
# OBSOLETE .*movb	\\(256,a2\\),d1.*
# OBSOLETE .*movb	\\(131071,a2\\),d1.*
# OBSOLETE .*movb	\\(d2,a2\\),d3.*
# OBSOLETE .*movb	\\(0x1ffff.*\\),d2.*
# OBSOLETE .*movb	d1,\\(a2\\).*
# OBSOLETE .*movb	d1,\\(8,a2\\).*
# OBSOLETE .*movb	d1,\\(256,a2\\).*
# OBSOLETE .*movb	d1,\\(131071,a2\\).*
# OBSOLETE .*movb	d1,\\(d2,a2\\).*
# OBSOLETE .*movb	d1,\\(0x100.*\\).*
# OBSOLETE .*movb	d1,\\(0x1ffff.*\\).*
# OBSOLETE .*$gdb_prompt $" { pass "movb tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "movb tests" }
# OBSOLETE 	timeout { fail "(timeout) movb tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc movbu_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/7 movbu_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*movbu	\\(a2\\),d1.*
# OBSOLETE .*movbu	\\(8,a2\\),d1.*
# OBSOLETE .*movbu	\\(256,a2\\),d1.*
# OBSOLETE .*movbu	\\(131071,a2\\),d1.*
# OBSOLETE .*movbu	\\(d1,a1\\),d2.*
# OBSOLETE .*movbu	\\(0x8000.*\\),d1.*
# OBSOLETE .*movbu	\\(0x1ffff.*\\),d1.*
# OBSOLETE .*$gdb_prompt $" { pass "movbu tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "movbu tests" }
# OBSOLETE 	timeout { fail "(timeout) movbu tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc movx_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/6 movx_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*movx	\\(8,a2\\),d1.*
# OBSOLETE .*movx	\\(256,a2\\),d1.*
# OBSOLETE .*movx	\\(131071,a2\\),d1.*
# OBSOLETE .*movx	d1,\\(8,a2\\).*
# OBSOLETE .*movx	d1,\\(256,a2\\).*
# OBSOLETE .*movx	d1,\\(131071,a2\\).*
# OBSOLETE .*$gdb_prompt $" { pass "movx tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "movx tests" }
# OBSOLETE 	timeout { fail "(timeout) movx tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc muldiv_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/3 muldiv_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mul	d1,d2.*
# OBSOLETE .*mulu	d2,d3.*
# OBSOLETE .*divu	d3,d2.*
# OBSOLETE .*$gdb_prompt $" { pass "muldiv tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "muldiv tests" }
# OBSOLETE 	timeout { fail "(timeout) muldiv tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc misc_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9 misc_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*jmp	0x\[0-9a-f]+ <main>.*
# OBSOLETE .*jmp	0x\[0-9a-f]+ <start>.*
# OBSOLETE .*jmp	\\(a2\\).*
# OBSOLETE .*jsr	0x\[0-9a-f]+ <main>.*
# OBSOLETE .*jsr	0x\[0-9a-f]+ <start>.*
# OBSOLETE .*jsr	\\(a2\\).*
# OBSOLETE .*rts.*
# OBSOLETE .*rti.*
# OBSOLETE .*nop.*
# OBSOLETE .*$gdb_prompt $" { pass "misc tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "misc tests" }
# OBSOLETE 	timeout { fail "(timeout) misc tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc shift_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/4i shift_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*asr	d2.*
# OBSOLETE .*lsr	d3.*
# OBSOLETE .*ror	d1.*
# OBSOLETE .*rol	d2.*
# OBSOLETE .*$gdb_prompt $" { pass "shift tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "shift tests" }
# OBSOLETE 	timeout { fail "(timeout) shift tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc sub_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9i sub_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*sub	d1,d2.*
# OBSOLETE .*sub	d2,a3.*
# OBSOLETE .*sub	a3,d3.*
# OBSOLETE .*sub	a3,a2.*
# OBSOLETE .*sub	32767,d2.*
# OBSOLETE .*sub	131071,d2.*
# OBSOLETE .*sub	32767,a2.*
# OBSOLETE .*sub	131071,a2.*
# OBSOLETE .*subc	d1,d2.*
# OBSOLETE .*$gdb_prompt $" { pass "sub tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "sub tests" }
# OBSOLETE 	timeout { fail "(timeout) sub tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE # Start with a fresh gdb.
# OBSOLETE 
# OBSOLETE gdb_exit
# OBSOLETE gdb_start
# OBSOLETE gdb_reinitialize_dir $srcdir/$subdir
# OBSOLETE gdb_load $binfile
# OBSOLETE 
# OBSOLETE add_tests
# OBSOLETE bcc_tests
# OBSOLETE bccx_tests
# OBSOLETE bit_tests
# OBSOLETE cmp_tests
# OBSOLETE extend_tests
# OBSOLETE logical_tests
# OBSOLETE mov_tests_1
# OBSOLETE mov_tests_2
# OBSOLETE mov_tests_3
# OBSOLETE mov_tests_4
# OBSOLETE movb_tests
# OBSOLETE movbu_tests
# OBSOLETE movx_tests
# OBSOLETE muldiv_tests
# OBSOLETE misc_tests
# OBSOLETE shift_tests
# OBSOLETE sub_tests
@


1.3
log
@2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* NEWS: Mention that the mn10200-elf is obsolete.
	* configure.tgt: Obsolete mn10200-*-* target.
	* breakpoint.c (update_breakpoints_after_exec): Update comment to
	mention that the mn10200 is obsolete.
	* breakpoint.h: Ditto.
	* MAINTAINERS: Mark the mn10200-elf as obsolete.
	* config/mn10200/mn10200.mt: Obsolete file.
	* config/mn10200/tm-mn10200.h: Obsolete file.
	* mn10200-tdep.c: Obsolete file.

Index: testsuite/ChangeLog
2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* gdb.disasm/mn10200.exp: Obsolete file.
	* gdb.trace/Makefile.in (clean mostlyclean): Remove mn10200.
	* gdb.disasm/Makefile.in (clean mostlyclean): Remove mn10200.
	* gdb.base/watchpoint.exp: Mark the mn10200 xfails as obsolete.
@
text
@@


1.3.34.1
log
@merge mainline changes into branch
@
text
@@


1.2
log
@Update/correct copyright notices.
@
text
@d1 478
a478 478

# Copyright 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Jeff Law. (law@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

if ![istarget "mn10200*-*-*"] {
    verbose "Tests ignored for all but mn10200 based targets."
    return
}

global exec_output
set prms_id 0
set bug_id 0

set testfile "mn10200"
set srcfile ${srcdir}/${subdir}/${testfile}.s
set binfile ${objdir}/${subdir}/${testfile}
if  { [gdb_compile "${srcfile}" "${binfile}" executable ""] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

proc add_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/12i add_tests\n"
    gdb_expect {
	-re "
.*add	d1,d2.*
.*add	d2,a3.*
.*add	a2,d1.*
.*add	a3,a2.*
.*add	16,d1.*
.*add	256,d2.*
.*add	131071,d3.*
.*add	16,a1.*
.*add	256,a2.*
.*add	131071,a3.*
.*addc	d1,d2.*
.*addnf	16,a2.*
.*$gdb_prompt $" { pass "add tests" }
	-re "$gdb_prompt $" { fail "add tests" }
	timeout { fail "(timeout) add tests" }
    }
}

proc bcc_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/15i bCC_tests\n"
    gdb_expect {
	-re "
.*beq	0x\[0-9a-f]+ <bCC_tests>.*
.*bne	0x\[0-9a-f]+ <bCC_tests>.*
.*bgt	0x\[0-9a-f]+ <bCC_tests>.*
.*bge	0x\[0-9a-f]+ <bCC_tests>.*
.*ble	0x\[0-9a-f]+ <bCC_tests>.*
.*blt	0x\[0-9a-f]+ <bCC_tests>.*
.*bhi	0x\[0-9a-f]+ <bCC_tests>.*
.*bcc	0x\[0-9a-f]+ <bCC_tests>.*
.*bls	0x\[0-9a-f]+ <bCC_tests>.*
.*bcs	0x\[0-9a-f]+ <bCC_tests>.*
.*bvc	0x\[0-9a-f]+ <bCC_tests>.*
.*bvs	0x\[0-9a-f]+ <bCC_tests>.*
.*bnc	0x\[0-9a-f]+ <bCC_tests>.*
.*bns	0x\[0-9a-f]+ <bCC_tests>.*
.*bra	0x\[0-9a-f]+ <bCC_tests>.*
.*$gdb_prompt $" { pass "bCC tests" }
	-re "$gdb_prompt $" { fail "bCC tests" }
	timeout { fail "(timeout) bCC tests" }
    }
}

proc bccx_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/14i bCCx_tests\n"
    gdb_expect {
	-re "
.*beqx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bnex	0x\[0-9a-f]+ <bCCx_tests>.*
.*bgtx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bgex	0x\[0-9a-f]+ <bCCx_tests>.*
.*blex	0x\[0-9a-f]+ <bCCx_tests>.*
.*bltx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bhix	0x\[0-9a-f]+ <bCCx_tests>.*
.*bccx	0x\[0-9a-f]+ <bCCx_tests>.*
.*blsx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bcsx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bvcx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bvsx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bncx	0x\[0-9a-f]+ <bCCx_tests>.*
.*bnsx	0x\[0-9a-f]+ <bCCx_tests>.*
.*$gdb_prompt $" { pass "bCCx tests" }
	-re "$gdb_prompt $" { fail "bCCx tests" }
	timeout { fail "(timeout) bCCx tests" }
    }
}

proc bit_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/4 bit_tests\n"
    gdb_expect {
	-re "
.*btst	64,d1.*
.*btst	8192,d2.*
.*bset	d1,\\(a2\\).*
.*bclr	d1,\\(a2\\).*
.*$gdb_prompt $" { pass "bit tests" }
	-re "$gdb_prompt $" { fail "bit tests" }
	timeout { fail "(timeout) bit tests" }
    }
}

proc cmp_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/9i cmp_tests\n"
    gdb_expect {
	-re "
.*cmp	d1,d2.*
.*cmp	d2,a3.*
.*cmp	a3,d3.*
.*cmp	a3,a2.*
.*cmp	16,d3.*
.*cmp	256,d2.*
.*cmp	131071,d1.*
.*cmp	256,a2.*
.*cmp	131071,a1.*
.*$gdb_prompt $" { pass "cmp tests" }
	-re "$gdb_prompt $" { fail "cmp tests" }
	timeout { fail "(timeout) cmp tests" }
    }
}

proc extend_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/5i extend_tests\n"
    gdb_expect {
	-re "
.*ext	d1.*
.*extx	d2.*
.*extxu	d3.*
.*extxb	d2.*
.*extxbu	d1.*
.*$gdb_prompt $" { pass "extend tests" }
	-re "$gdb_prompt $" { fail "extend tests" }
	timeout { fail "(timeout) extend tests" }
    }
}

proc logical_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/11i logical_tests\n"
    gdb_expect {
	-re "
.*and	d1,d2.*
.*and	127,d2.*
.*and	32767,d3.*
.*and	32767,psw.*
.*or	d1,d2.*
.*or	127,d2.*
.*or	32767,d3.*
.*or	32767,psw.*
.*xor	d1,d2.*
.*xor	32767,d3.*
.*not	d3.*
.*$gdb_prompt $" { pass "logical tests" }
	-re "$gdb_prompt $" { fail "logical tests" }
	timeout { fail "(timeout) logical tests" }
    }
}

proc mov_tests_1 { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/12i mov_tests_1\n"
    gdb_expect {
	-re "
.*mov	d1,a2.*
.*mov	a2,d1.*
.*mov	d1,d2.*
.*mov	a2,a1.*
.*mov	psw,d3.*
.*mov	d2,psw.*
.*mov	mdr,d1.*
.*mov	d2,mdr.*
.*mov	\\(a2\\),d1.*
.*mov	\\(8,a2\\),d1.*
.*mov	\\(256,a2\\),d1.*
.*mov	\\(131071,a2\\),d1.*
.*$gdb_prompt $" { pass "mov1 tests" }
	-re "$gdb_prompt $" { fail "mov1 tests" }
	timeout { fail "(timeout) mov1 tests" }
    }
}

proc mov_tests_2 { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/9 mov_tests_2\n"
    gdb_expect {
	-re "
.*mov	\\(d1,a1\\),d2.*
.*mov	\\(0x8000.*\\),d1.*
.*mov	\\(0x1ffff.*\\),d1.*
.*mov	\\(8,a2\\),a1.*
.*mov	\\(256,a2\\),a1.*
.*mov	\\(131071,a2\\),a1.*
.*mov	\\(d1,a1\\),a2.*
.*mov	\\(0x8000.*\\),a1.*
.*mov	\\(0x1ffff.*\\),a1.*
.*$gdb_prompt $" { pass "mov2 tests" }
	-re "$gdb_prompt $" { fail "mov2 tests" }
	timeout { fail "(timeout) mov2 tests" }
    }
}

proc mov_tests_3 { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/10 mov_tests_3\n"
    gdb_expect {
	-re "
.*mov	d1,\\(a2\\).*
.*mov	d1,\\(32,a2\\).*
.*mov	d1,\\(256,a2\\).*
.*mov	d1,\\(131071,a2\\).*
.*mov	d1,\\(d2,a2\\).*
.*mov	d1,\\(0x80.*\\).*
.*mov	d1,\\(0x1ffff.*\\).*
.*mov	a1,\\(32,a2\\).*
.*mov	a1,\\(256,a2\\).*
.*mov	a1,\\(131071,a2\\).*
.*$gdb_prompt $" { pass "mov3 tests" }
	-re "$gdb_prompt $" { fail "mov3 tests" }
	timeout { fail "(timeout) mov3 tests" }
    }
}

proc mov_tests_4 { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/8 mov_tests_4\n"
    gdb_expect {
	-re "
.*mov	a1,\\(d2,a2\\).*
.*mov	a1,\\(0x80.*\\).*
.*mov	a1,\\(0x1ffff.*\\).*
.*mov	8,d1.*
.*mov	256,d1.*
.*mov	131071,d1.*
.*mov	256,a1.*
.*mov	131071,a1.*
.*$gdb_prompt $" { pass "mov4 tests" }
	-re "$gdb_prompt $" { fail "mov4 tests" }
	timeout { fail "(timeout) mov4 tests" }
    }
}

proc movb_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/12 movb_tests\n"
    gdb_expect {
	-re "
.*movb	\\(8,a2\\),d1.*
.*movb	\\(256,a2\\),d1.*
.*movb	\\(131071,a2\\),d1.*
.*movb	\\(d2,a2\\),d3.*
.*movb	\\(0x1ffff.*\\),d2.*
.*movb	d1,\\(a2\\).*
.*movb	d1,\\(8,a2\\).*
.*movb	d1,\\(256,a2\\).*
.*movb	d1,\\(131071,a2\\).*
.*movb	d1,\\(d2,a2\\).*
.*movb	d1,\\(0x100.*\\).*
.*movb	d1,\\(0x1ffff.*\\).*
.*$gdb_prompt $" { pass "movb tests" }
	-re "$gdb_prompt $" { fail "movb tests" }
	timeout { fail "(timeout) movb tests" }
    }
}

proc movbu_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/7 movbu_tests\n"
    gdb_expect {
	-re "
.*movbu	\\(a2\\),d1.*
.*movbu	\\(8,a2\\),d1.*
.*movbu	\\(256,a2\\),d1.*
.*movbu	\\(131071,a2\\),d1.*
.*movbu	\\(d1,a1\\),d2.*
.*movbu	\\(0x8000.*\\),d1.*
.*movbu	\\(0x1ffff.*\\),d1.*
.*$gdb_prompt $" { pass "movbu tests" }
	-re "$gdb_prompt $" { fail "movbu tests" }
	timeout { fail "(timeout) movbu tests" }
    }
}

proc movx_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/6 movx_tests\n"
    gdb_expect {
	-re "
.*movx	\\(8,a2\\),d1.*
.*movx	\\(256,a2\\),d1.*
.*movx	\\(131071,a2\\),d1.*
.*movx	d1,\\(8,a2\\).*
.*movx	d1,\\(256,a2\\).*
.*movx	d1,\\(131071,a2\\).*
.*$gdb_prompt $" { pass "movx tests" }
	-re "$gdb_prompt $" { fail "movx tests" }
	timeout { fail "(timeout) movx tests" }
    }
}

proc muldiv_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/3 muldiv_tests\n"
    gdb_expect {
	-re "
.*mul	d1,d2.*
.*mulu	d2,d3.*
.*divu	d3,d2.*
.*$gdb_prompt $" { pass "muldiv tests" }
	-re "$gdb_prompt $" { fail "muldiv tests" }
	timeout { fail "(timeout) muldiv tests" }
    }
}

proc misc_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/9 misc_tests\n"
    gdb_expect {
	-re "
.*jmp	0x\[0-9a-f]+ <main>.*
.*jmp	0x\[0-9a-f]+ <start>.*
.*jmp	\\(a2\\).*
.*jsr	0x\[0-9a-f]+ <main>.*
.*jsr	0x\[0-9a-f]+ <start>.*
.*jsr	\\(a2\\).*
.*rts.*
.*rti.*
.*nop.*
.*$gdb_prompt $" { pass "misc tests" }
	-re "$gdb_prompt $" { fail "misc tests" }
	timeout { fail "(timeout) misc tests" }
    }
}

proc shift_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/4i shift_tests\n"
    gdb_expect {
	-re "
.*asr	d2.*
.*lsr	d3.*
.*ror	d1.*
.*rol	d2.*
.*$gdb_prompt $" { pass "shift tests" }
	-re "$gdb_prompt $" { fail "shift tests" }
	timeout { fail "(timeout) shift tests" }
    }
}

proc sub_tests { } {
    global gdb_prompt
    global hex
    global decimal

    send_gdb "x/9i sub_tests\n"
    gdb_expect {
	-re "
.*sub	d1,d2.*
.*sub	d2,a3.*
.*sub	a3,d3.*
.*sub	a3,a2.*
.*sub	32767,d2.*
.*sub	131071,d2.*
.*sub	32767,a2.*
.*sub	131071,a2.*
.*subc	d1,d2.*
.*$gdb_prompt $" { pass "sub tests" }
	-re "$gdb_prompt $" { fail "sub tests" }
	timeout { fail "(timeout) sub tests" }
    }
}

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load $binfile

add_tests
bcc_tests
bccx_tests
bit_tests
cmp_tests
extend_tests
logical_tests
mov_tests_1
mov_tests_2
mov_tests_3
mov_tests_4
movb_tests
movbu_tests
movx_tests
muldiv_tests
misc_tests
shift_tests
sub_tests
@


1.2.26.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.2.24.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1 478
a478 478
# OBSOLETE 
# OBSOLETE # Copyright 1997 Free Software Foundation, Inc.
# OBSOLETE 
# OBSOLETE # This program is free software; you can redistribute it and/or modify
# OBSOLETE # it under the terms of the GNU General Public License as published by
# OBSOLETE # the Free Software Foundation; either version 2 of the License, or
# OBSOLETE # (at your option) any later version.
# OBSOLETE # 
# OBSOLETE # This program is distributed in the hope that it will be useful,
# OBSOLETE # but WITHOUT ANY WARRANTY; without even the implied warranty of
# OBSOLETE # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# OBSOLETE # GNU General Public License for more details.
# OBSOLETE # 
# OBSOLETE # You should have received a copy of the GNU General Public License
# OBSOLETE # along with this program; if not, write to the Free Software
# OBSOLETE # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
# OBSOLETE 
# OBSOLETE # Please email any bugs, comments, and/or additions to this file to:
# OBSOLETE # bug-gdb@@prep.ai.mit.edu
# OBSOLETE 
# OBSOLETE # This file was written by Jeff Law. (law@@cygnus.com)
# OBSOLETE 
# OBSOLETE if $tracelevel then {
# OBSOLETE 	strace $tracelevel
# OBSOLETE }
# OBSOLETE 
# OBSOLETE if ![istarget "mn10200*-*-*"] {
# OBSOLETE     verbose "Tests ignored for all but mn10200 based targets."
# OBSOLETE     return
# OBSOLETE }
# OBSOLETE 
# OBSOLETE global exec_output
# OBSOLETE set prms_id 0
# OBSOLETE set bug_id 0
# OBSOLETE 
# OBSOLETE set testfile "mn10200"
# OBSOLETE set srcfile ${srcdir}/${subdir}/${testfile}.s
# OBSOLETE set binfile ${objdir}/${subdir}/${testfile}
# OBSOLETE if  { [gdb_compile "${srcfile}" "${binfile}" executable ""] != "" } {
# OBSOLETE      gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc add_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/12i add_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*add	d1,d2.*
# OBSOLETE .*add	d2,a3.*
# OBSOLETE .*add	a2,d1.*
# OBSOLETE .*add	a3,a2.*
# OBSOLETE .*add	16,d1.*
# OBSOLETE .*add	256,d2.*
# OBSOLETE .*add	131071,d3.*
# OBSOLETE .*add	16,a1.*
# OBSOLETE .*add	256,a2.*
# OBSOLETE .*add	131071,a3.*
# OBSOLETE .*addc	d1,d2.*
# OBSOLETE .*addnf	16,a2.*
# OBSOLETE .*$gdb_prompt $" { pass "add tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "add tests" }
# OBSOLETE 	timeout { fail "(timeout) add tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc bcc_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/15i bCC_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*beq	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bne	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bgt	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bge	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*ble	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*blt	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bhi	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bcc	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bls	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bcs	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bvc	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bvs	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bnc	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bns	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*bra	0x\[0-9a-f]+ <bCC_tests>.*
# OBSOLETE .*$gdb_prompt $" { pass "bCC tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "bCC tests" }
# OBSOLETE 	timeout { fail "(timeout) bCC tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc bccx_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/14i bCCx_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*beqx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bnex	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bgtx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bgex	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*blex	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bltx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bhix	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bccx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*blsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bcsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bvcx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bvsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bncx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*bnsx	0x\[0-9a-f]+ <bCCx_tests>.*
# OBSOLETE .*$gdb_prompt $" { pass "bCCx tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "bCCx tests" }
# OBSOLETE 	timeout { fail "(timeout) bCCx tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc bit_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/4 bit_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*btst	64,d1.*
# OBSOLETE .*btst	8192,d2.*
# OBSOLETE .*bset	d1,\\(a2\\).*
# OBSOLETE .*bclr	d1,\\(a2\\).*
# OBSOLETE .*$gdb_prompt $" { pass "bit tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "bit tests" }
# OBSOLETE 	timeout { fail "(timeout) bit tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc cmp_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9i cmp_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*cmp	d1,d2.*
# OBSOLETE .*cmp	d2,a3.*
# OBSOLETE .*cmp	a3,d3.*
# OBSOLETE .*cmp	a3,a2.*
# OBSOLETE .*cmp	16,d3.*
# OBSOLETE .*cmp	256,d2.*
# OBSOLETE .*cmp	131071,d1.*
# OBSOLETE .*cmp	256,a2.*
# OBSOLETE .*cmp	131071,a1.*
# OBSOLETE .*$gdb_prompt $" { pass "cmp tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "cmp tests" }
# OBSOLETE 	timeout { fail "(timeout) cmp tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc extend_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/5i extend_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*ext	d1.*
# OBSOLETE .*extx	d2.*
# OBSOLETE .*extxu	d3.*
# OBSOLETE .*extxb	d2.*
# OBSOLETE .*extxbu	d1.*
# OBSOLETE .*$gdb_prompt $" { pass "extend tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "extend tests" }
# OBSOLETE 	timeout { fail "(timeout) extend tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc logical_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/11i logical_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*and	d1,d2.*
# OBSOLETE .*and	127,d2.*
# OBSOLETE .*and	32767,d3.*
# OBSOLETE .*and	32767,psw.*
# OBSOLETE .*or	d1,d2.*
# OBSOLETE .*or	127,d2.*
# OBSOLETE .*or	32767,d3.*
# OBSOLETE .*or	32767,psw.*
# OBSOLETE .*xor	d1,d2.*
# OBSOLETE .*xor	32767,d3.*
# OBSOLETE .*not	d3.*
# OBSOLETE .*$gdb_prompt $" { pass "logical tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "logical tests" }
# OBSOLETE 	timeout { fail "(timeout) logical tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_1 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/12i mov_tests_1\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	d1,a2.*
# OBSOLETE .*mov	a2,d1.*
# OBSOLETE .*mov	d1,d2.*
# OBSOLETE .*mov	a2,a1.*
# OBSOLETE .*mov	psw,d3.*
# OBSOLETE .*mov	d2,psw.*
# OBSOLETE .*mov	mdr,d1.*
# OBSOLETE .*mov	d2,mdr.*
# OBSOLETE .*mov	\\(a2\\),d1.*
# OBSOLETE .*mov	\\(8,a2\\),d1.*
# OBSOLETE .*mov	\\(256,a2\\),d1.*
# OBSOLETE .*mov	\\(131071,a2\\),d1.*
# OBSOLETE .*$gdb_prompt $" { pass "mov1 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov1 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov1 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_2 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9 mov_tests_2\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	\\(d1,a1\\),d2.*
# OBSOLETE .*mov	\\(0x8000.*\\),d1.*
# OBSOLETE .*mov	\\(0x1ffff.*\\),d1.*
# OBSOLETE .*mov	\\(8,a2\\),a1.*
# OBSOLETE .*mov	\\(256,a2\\),a1.*
# OBSOLETE .*mov	\\(131071,a2\\),a1.*
# OBSOLETE .*mov	\\(d1,a1\\),a2.*
# OBSOLETE .*mov	\\(0x8000.*\\),a1.*
# OBSOLETE .*mov	\\(0x1ffff.*\\),a1.*
# OBSOLETE .*$gdb_prompt $" { pass "mov2 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov2 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov2 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_3 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/10 mov_tests_3\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	d1,\\(a2\\).*
# OBSOLETE .*mov	d1,\\(32,a2\\).*
# OBSOLETE .*mov	d1,\\(256,a2\\).*
# OBSOLETE .*mov	d1,\\(131071,a2\\).*
# OBSOLETE .*mov	d1,\\(d2,a2\\).*
# OBSOLETE .*mov	d1,\\(0x80.*\\).*
# OBSOLETE .*mov	d1,\\(0x1ffff.*\\).*
# OBSOLETE .*mov	a1,\\(32,a2\\).*
# OBSOLETE .*mov	a1,\\(256,a2\\).*
# OBSOLETE .*mov	a1,\\(131071,a2\\).*
# OBSOLETE .*$gdb_prompt $" { pass "mov3 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov3 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov3 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc mov_tests_4 { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/8 mov_tests_4\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mov	a1,\\(d2,a2\\).*
# OBSOLETE .*mov	a1,\\(0x80.*\\).*
# OBSOLETE .*mov	a1,\\(0x1ffff.*\\).*
# OBSOLETE .*mov	8,d1.*
# OBSOLETE .*mov	256,d1.*
# OBSOLETE .*mov	131071,d1.*
# OBSOLETE .*mov	256,a1.*
# OBSOLETE .*mov	131071,a1.*
# OBSOLETE .*$gdb_prompt $" { pass "mov4 tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "mov4 tests" }
# OBSOLETE 	timeout { fail "(timeout) mov4 tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc movb_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/12 movb_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*movb	\\(8,a2\\),d1.*
# OBSOLETE .*movb	\\(256,a2\\),d1.*
# OBSOLETE .*movb	\\(131071,a2\\),d1.*
# OBSOLETE .*movb	\\(d2,a2\\),d3.*
# OBSOLETE .*movb	\\(0x1ffff.*\\),d2.*
# OBSOLETE .*movb	d1,\\(a2\\).*
# OBSOLETE .*movb	d1,\\(8,a2\\).*
# OBSOLETE .*movb	d1,\\(256,a2\\).*
# OBSOLETE .*movb	d1,\\(131071,a2\\).*
# OBSOLETE .*movb	d1,\\(d2,a2\\).*
# OBSOLETE .*movb	d1,\\(0x100.*\\).*
# OBSOLETE .*movb	d1,\\(0x1ffff.*\\).*
# OBSOLETE .*$gdb_prompt $" { pass "movb tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "movb tests" }
# OBSOLETE 	timeout { fail "(timeout) movb tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc movbu_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/7 movbu_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*movbu	\\(a2\\),d1.*
# OBSOLETE .*movbu	\\(8,a2\\),d1.*
# OBSOLETE .*movbu	\\(256,a2\\),d1.*
# OBSOLETE .*movbu	\\(131071,a2\\),d1.*
# OBSOLETE .*movbu	\\(d1,a1\\),d2.*
# OBSOLETE .*movbu	\\(0x8000.*\\),d1.*
# OBSOLETE .*movbu	\\(0x1ffff.*\\),d1.*
# OBSOLETE .*$gdb_prompt $" { pass "movbu tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "movbu tests" }
# OBSOLETE 	timeout { fail "(timeout) movbu tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc movx_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/6 movx_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*movx	\\(8,a2\\),d1.*
# OBSOLETE .*movx	\\(256,a2\\),d1.*
# OBSOLETE .*movx	\\(131071,a2\\),d1.*
# OBSOLETE .*movx	d1,\\(8,a2\\).*
# OBSOLETE .*movx	d1,\\(256,a2\\).*
# OBSOLETE .*movx	d1,\\(131071,a2\\).*
# OBSOLETE .*$gdb_prompt $" { pass "movx tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "movx tests" }
# OBSOLETE 	timeout { fail "(timeout) movx tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc muldiv_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/3 muldiv_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*mul	d1,d2.*
# OBSOLETE .*mulu	d2,d3.*
# OBSOLETE .*divu	d3,d2.*
# OBSOLETE .*$gdb_prompt $" { pass "muldiv tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "muldiv tests" }
# OBSOLETE 	timeout { fail "(timeout) muldiv tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc misc_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9 misc_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*jmp	0x\[0-9a-f]+ <main>.*
# OBSOLETE .*jmp	0x\[0-9a-f]+ <start>.*
# OBSOLETE .*jmp	\\(a2\\).*
# OBSOLETE .*jsr	0x\[0-9a-f]+ <main>.*
# OBSOLETE .*jsr	0x\[0-9a-f]+ <start>.*
# OBSOLETE .*jsr	\\(a2\\).*
# OBSOLETE .*rts.*
# OBSOLETE .*rti.*
# OBSOLETE .*nop.*
# OBSOLETE .*$gdb_prompt $" { pass "misc tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "misc tests" }
# OBSOLETE 	timeout { fail "(timeout) misc tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc shift_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/4i shift_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*asr	d2.*
# OBSOLETE .*lsr	d3.*
# OBSOLETE .*ror	d1.*
# OBSOLETE .*rol	d2.*
# OBSOLETE .*$gdb_prompt $" { pass "shift tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "shift tests" }
# OBSOLETE 	timeout { fail "(timeout) shift tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc sub_tests { } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global hex
# OBSOLETE     global decimal
# OBSOLETE 
# OBSOLETE     send_gdb "x/9i sub_tests\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re "
# OBSOLETE .*sub	d1,d2.*
# OBSOLETE .*sub	d2,a3.*
# OBSOLETE .*sub	a3,d3.*
# OBSOLETE .*sub	a3,a2.*
# OBSOLETE .*sub	32767,d2.*
# OBSOLETE .*sub	131071,d2.*
# OBSOLETE .*sub	32767,a2.*
# OBSOLETE .*sub	131071,a2.*
# OBSOLETE .*subc	d1,d2.*
# OBSOLETE .*$gdb_prompt $" { pass "sub tests" }
# OBSOLETE 	-re "$gdb_prompt $" { fail "sub tests" }
# OBSOLETE 	timeout { fail "(timeout) sub tests" }
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE # Start with a fresh gdb.
# OBSOLETE 
# OBSOLETE gdb_exit
# OBSOLETE gdb_start
# OBSOLETE gdb_reinitialize_dir $srcdir/$subdir
# OBSOLETE gdb_load $binfile
# OBSOLETE 
# OBSOLETE add_tests
# OBSOLETE bcc_tests
# OBSOLETE bccx_tests
# OBSOLETE bit_tests
# OBSOLETE cmp_tests
# OBSOLETE extend_tests
# OBSOLETE logical_tests
# OBSOLETE mov_tests_1
# OBSOLETE mov_tests_2
# OBSOLETE mov_tests_3
# OBSOLETE mov_tests_4
# OBSOLETE movb_tests
# OBSOLETE movbu_tests
# OBSOLETE movx_tests
# OBSOLETE muldiv_tests
# OBSOLETE misc_tests
# OBSOLETE shift_tests
# OBSOLETE sub_tests
@


1.2.24.2
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# Copyright (C) 1997 Free Software Foundation, Inc.
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

