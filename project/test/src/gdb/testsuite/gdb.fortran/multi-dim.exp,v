head	1.5;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.5
	gdb_7_6-2013-04-26-release:1.5
	gdb_7_6-branch:1.5.0.2
	gdb_7_6-2013-03-12-branchpoint:1.5
	gdb_7_5_1-2012-11-29-release:1.4
	gdb_7_5-2012-08-17-release:1.4
	gdb_7_5-branch:1.4.0.2
	gdb_7_5-2012-07-18-branchpoint:1.4
	gdb_7_4_1-2012-04-26-release:1.2.2.1
	gdb_7_4-2012-01-24-release:1.2.2.1
	gdb_7_4-branch:1.2.0.2
	gdb_7_4-2011-12-13-branchpoint:1.2
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.2
	gdb_7_3-2011-04-01-branchpoint:1.1;
locks; strict;
comment	@# @;


1.5
date	2013.01.01.06.41.22;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.25.20.51.35;	author tromey;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.04.08.17.51;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.29.17.50.47;	author tromey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2011.01.12.16.16.24;	author jkratoch;	state Exp;
branches;
next	;

1.2.2.1
date	2012.01.06.04.44.06;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2011-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the gdb testsuite.  It contains tests for evaluating
# Fortran subarray expression.

if { [skip_fortran_tests] } { return -1 }

standard_testfile .f90

if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} {debug f90}] } {
    return -1
}

if ![runto MAIN__] {
    perror "Couldn't run to MAIN__"
    continue
}

# Depending on the compiler version being used, the name of the 4-byte integer
# and real types can be printed differently.  For instance, gfortran-4.1 uses
# "int4" whereas gfortran-4.3 uses "int(kind=4)".
set int4 "(int4|integer\\(kind=4\\))"

gdb_breakpoint [gdb_get_line_number "break-static"]
gdb_continue_to_breakpoint "break-static" ".*break-static.*"

gdb_test "print foo(2,3,4)" \
    " = 20" \
    "print valid static array element"

gdb_test "print foo(0,0,0)" \
    "no such vector element" \
    "print an invalid array index (0,0,0)"

gdb_test "print foo(2,3,5)" \
    "no such vector element" \
    "print an invalid array index (2,3,5)"

gdb_test "print foo(2,4,4)" \
    "no such vector element" \
    "print an invalid array index (2,4,4)"

gdb_test "print foo(3,3,4)" \
    "no such vector element" \
    "print an invalid array index (3,3,4)"

gdb_test "print foo" \
    { = \(\( \( 10, 10\) \( 10, 10\) \( 10, 10\) \) \( \( 10, 10\) \( 10, 10\) \( 10, 10\) \) \( \( 10, 10\) \( 10, 10\) \( 10, 10\) \) \( \( 10, 10\) \( 10, 10\) \( 10, 20\) \) \)} \
    "print full contents of the array"

gdb_breakpoint [gdb_get_line_number "break-variable"]
gdb_continue_to_breakpoint "break-variable" ".*break-variable.*"

gdb_test "print varbound(4)" \
    " = 2" \
    "print valid variable bound array element"

gdb_test "ptype unbound" \
    "type = $int4 \\(\\*\\)" \
    "print type of unbound array"

gdb_test "print unbound(4)" \
    " = 2" \
    "print valid unbound array element"
@


1.4
log
@	* gdb.fortran/subarray.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.fortran/multi-dim.exp: Use standard_testfile.
	* gdb.fortran/module.exp: Use standard_testfile.
	* gdb.fortran/logical.exp: Use standard_testfile.
	* gdb.fortran/library-module.exp: Use standard_testfile,
	standard_output_file.
	* gdb.fortran/derived-type.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.fortran/complex.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.fortran/charset.exp: Use standard_testfile.
	* gdb.fortran/array-element.exp: Use standard_testfile,
	prepare_for_testing.
@
text
@d1 1
a1 1
# Copyright 2011-2012 Free Software Foundation, Inc.
@


1.3
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d21 2
a22 2
set testfile "multi-dim"
set srcfile ${testfile}.f90
@


1.2
log
@	PR testsuite/12040:
	* gdb.fortran/array-element.exp: Use f90, not f77.
	* gdb.fortran/complex.exp: Use f90, not f77.
	* gdb.fortran/derived-type.exp: Use f90, not f77.
	* gdb.fortran/library-module.exp: Use f90, not f77.
	* gdb.fortran/logical.exp: Use f90, not f77.
	* gdb.fortran/module.exp: Use f90, not f77.
	* gdb.fortran/multi-dim.exp: Use f90, not f77.
	* gdb.fortran/subarray.exp: Use f90, not f77.
@
text
@d1 1
a1 1
# Copyright 2011 Free Software Foundation, Inc.
@


1.2.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2011-2012 Free Software Foundation, Inc.
@


1.1
log
@gdb/
	PR fortran/11104 and DWARF unbound arrays detection.
	* dwarf2read.c (read_subrange_type): Set zero length on unspecified
	upper bound.  Set TYPE_HIGH_BOUND_UNDEFINED if not language_ada on
	unspecified upper bound.
	* eval.c (evaluate_subexp_standard) <multi_f77_subscript>: Remove
	variables array_size_array, tmp_type and offset_item.  New variable
	array.  Remove call to f77_get_upperbound.  New variables array_type
	and index.  Call value_subscripted_rvalue for each dimenasion.  Remove
	the final call to deprecated_set_value_type.

gdb/testsuite/
	PR fortran/11104 and DWARF unbound arrays detection.
	* gdb.fortran/multi-dim.exp: New file.
	* gdb.fortran/multi-dim.f90: New file.
@
text
@d23 1
a23 1
if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} {debug f77}] } {
@

