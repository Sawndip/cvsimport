head	1.4;
access;
symbols
	gdb_5_3-2002-12-12-release:1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.10
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	carlton_dictionary-branch:1.3.0.8
	carlton_dictionary-20020920-branchpoint:1.3
	gdb_5_3-branch:1.3.0.6
	gdb_5_3-2002-09-04-branchpoint:1.3
	kseitz_interps-20020829-merge:1.3
	cagney_sysregs-20020825-branch:1.3.0.4
	cagney_sysregs-20020825-branchpoint:1.3
	readline_4_3-import-branch:1.3.0.2
	readline_4_3-import-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.16
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.14
	cagney_regbuf-20020515-branchpoint:1.2
	jimb-macro-020506-branch:1.2.0.12
	jimb-macro-020506-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.10
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.2
	gdb_5_1_0_1-2002-01-03-release:1.2
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	gdb-post-ptid_t-2001-05-03:1.2
	gdb-pre-ptid_t-2001-05-03:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb-post-protoization-2000-07-29:1.1.1.1
	gdb-pre-protoization-2000-07-29:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb-post-params-removal-2000-06-04:1.1.1.1
	gdb-pre-params-removal-2000-06-04:1.1.1.1
	gdb-post-params-removal-2000-05-28:1.1.1.1
	gdb-pre-params-removal-2000-05-28:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2002.12.16.19.33.52;	author cagney;	state dead;
branches;
next	1.3;

1.3
date	2002.08.02.00.25.23;	author cagney;	state Exp;
branches
	1.3.8.1
	1.3.10.1;
next	1.2;

1.2
date	2001.03.06.08.21.55;	author kevinb;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.04.16.01.34.33;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.33;	author shebs;	state Exp;
branches;
next	;

1.2.16.1
date	2002.08.09.18.34.34;	author kseitz;	state Exp;
branches;
next	;

1.3.8.1
date	2002.12.23.19.39.18;	author carlton;	state dead;
branches;
next	;

1.3.10.1
date	2003.12.14.20.27.52;	author drow;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove obsolete testsuite code.
@
text
@# OBSOLETE # Copyright 1995, 1996 Free Software Foundation, Inc.
# OBSOLETE 
# OBSOLETE # This program is free software; you can redistribute it and/or modify
# OBSOLETE # it under the terms of the GNU General Public License as published by
# OBSOLETE # the Free Software Foundation; either version 2 of the License, or
# OBSOLETE # (at your option) any later version.
# OBSOLETE # 
# OBSOLETE # This program is distributed in the hope that it will be useful,
# OBSOLETE # but WITHOUT ANY WARRANTY; without even the implied warranty of
# OBSOLETE # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# OBSOLETE # GNU General Public License for more details.
# OBSOLETE # 
# OBSOLETE # You should have received a copy of the GNU General Public License
# OBSOLETE # along with this program; if not, write to the Free Software
# OBSOLETE # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
# OBSOLETE 
# OBSOLETE # Please email any bugs, comments, and/or additions to this file to:
# OBSOLETE # bug-gdb@@prep.ai.mit.edu
# OBSOLETE 
# OBSOLETE # This file was written by Per Bothner. (bothner@@cygnus.com)
# OBSOLETE 
# OBSOLETE if $tracelevel then {
# OBSOLETE 	strace $tracelevel
# OBSOLETE }
# OBSOLETE 
# OBSOLETE if [skip_chill_tests] then { continue }
# OBSOLETE 
# OBSOLETE set testfile "tuples"
# OBSOLETE set srcfile ${srcdir}/$subdir/${testfile}.ch
# OBSOLETE set binfile ${objdir}/${subdir}/${testfile}.exe
# OBSOLETE if  { [compile "${srcfile} -g -o ${binfile} ${CHILL_RT0} ${CHILL_LIB}"] != "" } {
# OBSOLETE     perror "Couldn't compile ${srcfile}"
# OBSOLETE     return -1
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc do_tests {} {
# OBSOLETE     global prms_id bug_id subdir objdir srcdir binfile gdb_prompt
# OBSOLETE 
# OBSOLETE     set prms_id 0
# OBSOLETE     set bug_id 0
# OBSOLETE 
# OBSOLETE     # Start with a fresh gdb.
# OBSOLETE 
# OBSOLETE     gdb_exit
# OBSOLETE     gdb_start
# OBSOLETE     gdb_reinitialize_dir $srcdir/$subdir
# OBSOLETE     gdb_load $binfile
# OBSOLETE 
# OBSOLETE     gdb_test "set language chill" ""
# OBSOLETE 
# OBSOLETE     runto tuples.ch:40
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arri" {= [(1): -1, (2): -2, (3): -3, (4): -4, (5): -5]}
# OBSOLETE     gdb_test_exact "set v_arri := \[ 33, 44, 55, 66, 77 \]" {}
# OBSOLETE     gdb_test_exact "print v_arri" {= [(1): 33, (2): 44, (3): 55, (4): 66, (5): 77]} "after assignment 1 to v_arri"
# OBSOLETE     gdb_test_exact "set v_arri := \[-33, -44, -55, -66, -77\]" {}
# OBSOLETE     gdb_test_exact "print v_arri" {= [(1): -33, (2): -44, (3): -55, (4): -66, (5): -77]} {after assignment 2 to v_arri}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrui" {= [(1): 1, (2): 2, (3): 3, (4): 4, (5): 5]}
# OBSOLETE     gdb_test_exact "set v_arrui := \[ 11, 11, 11, 11, 11 \]" {}
# OBSOLETE     gdb_test_exact "print v_arrui" {= [(1:5): 11]} "after assignment to v_arrui"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrb" {= [(1): -3, (2): -4, (3): -5, (4): -6, (5): -7]}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set v_arrb := \[ -9, -8, -7, -6, -5 \]" {}
# OBSOLETE     gdb_test_exact "print v_arrb" {= [(1): -9, (2): -8, (3): -7, (4): -6, (5): -5]} "after assignment to v_arrb"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrub" {= [(1): 3, (2): 4, (3): 5, (4): 6, (5): 7]}
# OBSOLETE     gdb_test_exact "set v_arrub := \[ 77, 77, 77, 77, 77 \]" {}
# OBSOLETE     gdb_test_exact "print v_arrub" {= [(1:5): 77]} "v_arrub after assignment"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print j" {= 4}
# OBSOLETE     gdb_test_exact "print j := 3+4" {= 7}
# OBSOLETE     gdb_test_exact "print j := r1(3)" {= 3}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrc" {= [(1): '1', (2): '2', (3): '3', (4): '4', (5): '5']}
# OBSOLETE     gdb_test_exact "set v_arrc := \[ 'a', 'b', 'c', 'd', 'e' \]" {}
# OBSOLETE     gdb_test_exact "print v_arrc" {= [(1): 'a', (2): 'b', (3): 'c', (4): 'd', (5): 'e']} "v_arrc after assignment"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_ps" {= [1, 3, 5]}
# OBSOLETE     gdb_test_exact "set v_ps := \[ 2, 4 \]" {}
# OBSOLETE     gdb_test_exact "print v_ps" {= [2, 4]} {v_ps after assignment}
# OBSOLETE     gdb_test_exact "print v_ps :=  \[\]" {= []} {assign [] to v_ps}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print m_arri\[1, 2, 3, 4, 5\]" {= [(1): 1, (2): 2, (3): 3, (4): 4, (5): 5]}
# OBSOLETE     gdb_test_exact "print m_arrub\[45, 46, 47, 48, 49\]" {= [(1): 45, (2): 46, (3): 47, (4): 48, (5): 49]}
# OBSOLETE 
# OBSOLETE    gdb_test_exact "print v_cv" {= "foo"}
# OBSOLETE    gdb_test_exact "set v_cv := \"foo-bar\"" {}
# OBSOLETE    gdb_test_exact "print v_cv" {= "foo-bar"} "v_cv after assignment"
# OBSOLETE    gdb_test_exact "set v_cv(3) := ' '" {}
# OBSOLETE    gdb_test_exact "print v_cv" {= "foo bar"} "v_cv after element assignment"
# OBSOLETE 
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1): TRUE, (2): FALSE, (3): TRUE, (4): FALSE, (5): TRUE]}
# OBSOLETE    gdb_test_exact "set v_arrbool := \[ false, false, false, false, false \]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1:5): FALSE]} "v_arrbool after assignment 1"
# OBSOLETE    gdb_test_exact "set v_arrbool := \[true, true, true, true, true\]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1:5): TRUE]} "v_arrbool after assignment 2"
# OBSOLETE    gdb_test_exact "set v_arrbool(3) := false" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1:2): TRUE, (3): FALSE, (4:5): TRUE]} "v_arrbool after element assignment"
# OBSOLETE 
# OBSOLETE    gdb_test_exact "set v_arrbool(1 up 2) := \[ false, true \]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1): FALSE, (2): TRUE, (3): FALSE, (4:5): TRUE]} "v_arrbool after slice assignment 1"
# OBSOLETE    gdb_test_exact "set v_arrbool(3 : 5) := \[ true, true, false \]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1): FALSE, (2:4): TRUE, (5): FALSE]} "v_arrbool after slice assignment 2"
# OBSOLETE 
# OBSOLETE    gdb_test_exact "set vstr := \[ .a: 2+3, .b: 12, .ch1: 'x' \]" {}
# OBSOLETE    gdb_test_exact "print vstr.a" {= 5} "vstr.a after assignment"
# OBSOLETE    gdb_test_exact "print vstr.ch1" {= 'x'} "vstr.ch1 after assignment"
# OBSOLETE 
# OBSOLETE #   These tests are from Cygnus PR chill/5024:
# OBSOLETE     gdb_test "break printdow" ""
# OBSOLETE     gdb_test "continue" ""
# OBSOLETE     gdb_test_exact "set var w:= dow\[monday\]" {}
# OBSOLETE     gdb_test "print w" " = \\\[monday\\\]" \
# OBSOLETE 	"print bitstring after assignment"
# OBSOLETE     gdb_test_exact "set var w:=\[\]" {}
# OBSOLETE     gdb_test "print w" " = \\\[\\\]" \
# OBSOLETE 	"print bitstring after assignment of \[\]"
# OBSOLETE 
# OBSOLETE #   These tests are from Cygnus PR chill/8643:
# OBSOLETE     runto tuples.ch:40
# OBSOLETE     gdb_test_exact "set var vs1 := \[ \"foo\", 41, \[ b \] \]"  {}
# OBSOLETE     gdb_test_exact "print vs1" { = [.str: "foo", .i: 41, .ps: [b]]} \
# OBSOLETE 	"print vs1 after tuple assign 1"
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "set var vs1 := \[ \"bar\", 42, m_ps\[ a \] \]" {}
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "print vs1" { = [.str: "bar", .i: 42, .ps: [a]]} \
# OBSOLETE 	"print vs1 after tuple assign 2"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set var \$i := m_s1\[\"foo\", 42, \[a \]\]" {}
# OBSOLETE     gdb_test_exact {print $i} { = [.str: "foo", .i: 42, .ps: [a]]} \
# OBSOLETE 	"print \$i after tuple assign 1"
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "set var \$i := m_s1\[\"foo\", 44, m_ps\[a \]\]" {}
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact {print $i} { = [.str: "foo", .i: 44, .ps: [a]]} \
# OBSOLETE 	"print \$i after tuple assign 2"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set var vs2 := \[ 10, \[ \"foo\" , 42, \[ b \] \] \]" {}
# OBSOLETE     gdb_test_exact "print vs2" \
# OBSOLETE 	{ = [.i: 10, .s: [.str: "foo", .i: 42, .ps: [b]]]} \
# OBSOLETE 	"print vs2 after tuple assign 1"
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "set var vs2 := \[ 10+3, m_s1\[ \"foo\" , 42, m_ps\[ b \] \] \]" {}
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "print vs2" \
# OBSOLETE 	{ = [.i: 13, .s: [.str: "foo", .i: 42, .ps: [b]]]} \
# OBSOLETE 	"print vs2 after tuple assign 2"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set var vs3 := \[ 33, \[ -1, -2, -3 \] \]" {}
# OBSOLETE     gdb_test_exact "print vs3" {[.i: 33, .a: [(1): -1, (2): -2, (3): -3]]} \
# OBSOLETE 	"print vs3 after tuple assign"
# OBSOLETE     gdb_test_exact "set var \$k := m_s3\[ 33, m_arr\[ 4, 3, 2 \] \]" {}
# OBSOLETE     gdb_test_exact {print $k} { = [.i: 33, .a: [(1): 4, (2): 3, (3): 2]]} \
# OBSOLETE 	"print \$k after tuple assign"
# OBSOLETE 
# OBSOLETE }
# OBSOLETE 
# OBSOLETE do_tests
@


1.3
log
@More obsolete CHILL.
@
text
@@


1.3.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.3.8.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2
log
@Update/correct copyright notices.
@
text
@d1 161
a161 161
# Copyright 1995, 1996 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Per Bothner. (bothner@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

if [skip_chill_tests] then { continue }

set testfile "tuples"
set srcfile ${srcdir}/$subdir/${testfile}.ch
set binfile ${objdir}/${subdir}/${testfile}.exe
if  { [compile "${srcfile} -g -o ${binfile} ${CHILL_RT0} ${CHILL_LIB}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

proc do_tests {} {
    global prms_id bug_id subdir objdir srcdir binfile gdb_prompt

    set prms_id 0
    set bug_id 0

    # Start with a fresh gdb.

    gdb_exit
    gdb_start
    gdb_reinitialize_dir $srcdir/$subdir
    gdb_load $binfile

    gdb_test "set language chill" ""

    runto tuples.ch:40

    gdb_test_exact "print v_arri" {= [(1): -1, (2): -2, (3): -3, (4): -4, (5): -5]}
    gdb_test_exact "set v_arri := \[ 33, 44, 55, 66, 77 \]" {}
    gdb_test_exact "print v_arri" {= [(1): 33, (2): 44, (3): 55, (4): 66, (5): 77]} "after assignment 1 to v_arri"
    gdb_test_exact "set v_arri := \[-33, -44, -55, -66, -77\]" {}
    gdb_test_exact "print v_arri" {= [(1): -33, (2): -44, (3): -55, (4): -66, (5): -77]} {after assignment 2 to v_arri}

    gdb_test_exact "print v_arrui" {= [(1): 1, (2): 2, (3): 3, (4): 4, (5): 5]}
    gdb_test_exact "set v_arrui := \[ 11, 11, 11, 11, 11 \]" {}
    gdb_test_exact "print v_arrui" {= [(1:5): 11]} "after assignment to v_arrui"

    gdb_test_exact "print v_arrb" {= [(1): -3, (2): -4, (3): -5, (4): -6, (5): -7]}

    gdb_test_exact "set v_arrb := \[ -9, -8, -7, -6, -5 \]" {}
    gdb_test_exact "print v_arrb" {= [(1): -9, (2): -8, (3): -7, (4): -6, (5): -5]} "after assignment to v_arrb"

    gdb_test_exact "print v_arrub" {= [(1): 3, (2): 4, (3): 5, (4): 6, (5): 7]}
    gdb_test_exact "set v_arrub := \[ 77, 77, 77, 77, 77 \]" {}
    gdb_test_exact "print v_arrub" {= [(1:5): 77]} "v_arrub after assignment"

    gdb_test_exact "print j" {= 4}
    gdb_test_exact "print j := 3+4" {= 7}
    gdb_test_exact "print j := r1(3)" {= 3}

    gdb_test_exact "print v_arrc" {= [(1): '1', (2): '2', (3): '3', (4): '4', (5): '5']}
    gdb_test_exact "set v_arrc := \[ 'a', 'b', 'c', 'd', 'e' \]" {}
    gdb_test_exact "print v_arrc" {= [(1): 'a', (2): 'b', (3): 'c', (4): 'd', (5): 'e']} "v_arrc after assignment"

    gdb_test_exact "print v_ps" {= [1, 3, 5]}
    gdb_test_exact "set v_ps := \[ 2, 4 \]" {}
    gdb_test_exact "print v_ps" {= [2, 4]} {v_ps after assignment}
    gdb_test_exact "print v_ps :=  \[\]" {= []} {assign [] to v_ps}

    gdb_test_exact "print m_arri\[1, 2, 3, 4, 5\]" {= [(1): 1, (2): 2, (3): 3, (4): 4, (5): 5]}
    gdb_test_exact "print m_arrub\[45, 46, 47, 48, 49\]" {= [(1): 45, (2): 46, (3): 47, (4): 48, (5): 49]}

   gdb_test_exact "print v_cv" {= "foo"}
   gdb_test_exact "set v_cv := \"foo-bar\"" {}
   gdb_test_exact "print v_cv" {= "foo-bar"} "v_cv after assignment"
   gdb_test_exact "set v_cv(3) := ' '" {}
   gdb_test_exact "print v_cv" {= "foo bar"} "v_cv after element assignment"

   gdb_test_exact "print v_arrbool" {= [(1): TRUE, (2): FALSE, (3): TRUE, (4): FALSE, (5): TRUE]}
   gdb_test_exact "set v_arrbool := \[ false, false, false, false, false \]" {}
   gdb_test_exact "print v_arrbool" {= [(1:5): FALSE]} "v_arrbool after assignment 1"
   gdb_test_exact "set v_arrbool := \[true, true, true, true, true\]" {}
   gdb_test_exact "print v_arrbool" {= [(1:5): TRUE]} "v_arrbool after assignment 2"
   gdb_test_exact "set v_arrbool(3) := false" {}
   gdb_test_exact "print v_arrbool" {= [(1:2): TRUE, (3): FALSE, (4:5): TRUE]} "v_arrbool after element assignment"

   gdb_test_exact "set v_arrbool(1 up 2) := \[ false, true \]" {}
   gdb_test_exact "print v_arrbool" {= [(1): FALSE, (2): TRUE, (3): FALSE, (4:5): TRUE]} "v_arrbool after slice assignment 1"
   gdb_test_exact "set v_arrbool(3 : 5) := \[ true, true, false \]" {}
   gdb_test_exact "print v_arrbool" {= [(1): FALSE, (2:4): TRUE, (5): FALSE]} "v_arrbool after slice assignment 2"

   gdb_test_exact "set vstr := \[ .a: 2+3, .b: 12, .ch1: 'x' \]" {}
   gdb_test_exact "print vstr.a" {= 5} "vstr.a after assignment"
   gdb_test_exact "print vstr.ch1" {= 'x'} "vstr.ch1 after assignment"

#   These tests are from Cygnus PR chill/5024:
    gdb_test "break printdow" ""
    gdb_test "continue" ""
    gdb_test_exact "set var w:= dow\[monday\]" {}
    gdb_test "print w" " = \\\[monday\\\]" \
	"print bitstring after assignment"
    gdb_test_exact "set var w:=\[\]" {}
    gdb_test "print w" " = \\\[\\\]" \
	"print bitstring after assignment of \[\]"

#   These tests are from Cygnus PR chill/8643:
    runto tuples.ch:40
    gdb_test_exact "set var vs1 := \[ \"foo\", 41, \[ b \] \]"  {}
    gdb_test_exact "print vs1" { = [.str: "foo", .i: 41, .ps: [b]]} \
	"print vs1 after tuple assign 1"
    setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
    gdb_test_exact "set var vs1 := \[ \"bar\", 42, m_ps\[ a \] \]" {}
    setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
    gdb_test_exact "print vs1" { = [.str: "bar", .i: 42, .ps: [a]]} \
	"print vs1 after tuple assign 2"

    gdb_test_exact "set var \$i := m_s1\[\"foo\", 42, \[a \]\]" {}
    gdb_test_exact {print $i} { = [.str: "foo", .i: 42, .ps: [a]]} \
	"print \$i after tuple assign 1"
    setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
    gdb_test_exact "set var \$i := m_s1\[\"foo\", 44, m_ps\[a \]\]" {}
    setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
    gdb_test_exact {print $i} { = [.str: "foo", .i: 44, .ps: [a]]} \
	"print \$i after tuple assign 2"

    gdb_test_exact "set var vs2 := \[ 10, \[ \"foo\" , 42, \[ b \] \] \]" {}
    gdb_test_exact "print vs2" \
	{ = [.i: 10, .s: [.str: "foo", .i: 42, .ps: [b]]]} \
	"print vs2 after tuple assign 1"
    setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
    gdb_test_exact "set var vs2 := \[ 10+3, m_s1\[ \"foo\" , 42, m_ps\[ b \] \] \]" {}
    setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
    gdb_test_exact "print vs2" \
	{ = [.i: 13, .s: [.str: "foo", .i: 42, .ps: [b]]]} \
	"print vs2 after tuple assign 2"

    gdb_test_exact "set var vs3 := \[ 33, \[ -1, -2, -3 \] \]" {}
    gdb_test_exact "print vs3" {[.i: 33, .a: [(1): -1, (2): -2, (3): -3]]} \
	"print vs3 after tuple assign"
    gdb_test_exact "set var \$k := m_s3\[ 33, m_arr\[ 4, 3, 2 \] \]" {}
    gdb_test_exact {print $k} { = [.i: 33, .a: [(1): 4, (2): 3, (3): 2]]} \
	"print \$k after tuple assign"

}

do_tests
@


1.2.16.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d1 161
a161 161
# OBSOLETE # Copyright 1995, 1996 Free Software Foundation, Inc.
# OBSOLETE 
# OBSOLETE # This program is free software; you can redistribute it and/or modify
# OBSOLETE # it under the terms of the GNU General Public License as published by
# OBSOLETE # the Free Software Foundation; either version 2 of the License, or
# OBSOLETE # (at your option) any later version.
# OBSOLETE # 
# OBSOLETE # This program is distributed in the hope that it will be useful,
# OBSOLETE # but WITHOUT ANY WARRANTY; without even the implied warranty of
# OBSOLETE # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# OBSOLETE # GNU General Public License for more details.
# OBSOLETE # 
# OBSOLETE # You should have received a copy of the GNU General Public License
# OBSOLETE # along with this program; if not, write to the Free Software
# OBSOLETE # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
# OBSOLETE 
# OBSOLETE # Please email any bugs, comments, and/or additions to this file to:
# OBSOLETE # bug-gdb@@prep.ai.mit.edu
# OBSOLETE 
# OBSOLETE # This file was written by Per Bothner. (bothner@@cygnus.com)
# OBSOLETE 
# OBSOLETE if $tracelevel then {
# OBSOLETE 	strace $tracelevel
# OBSOLETE }
# OBSOLETE 
# OBSOLETE if [skip_chill_tests] then { continue }
# OBSOLETE 
# OBSOLETE set testfile "tuples"
# OBSOLETE set srcfile ${srcdir}/$subdir/${testfile}.ch
# OBSOLETE set binfile ${objdir}/${subdir}/${testfile}.exe
# OBSOLETE if  { [compile "${srcfile} -g -o ${binfile} ${CHILL_RT0} ${CHILL_LIB}"] != "" } {
# OBSOLETE     perror "Couldn't compile ${srcfile}"
# OBSOLETE     return -1
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc do_tests {} {
# OBSOLETE     global prms_id bug_id subdir objdir srcdir binfile gdb_prompt
# OBSOLETE 
# OBSOLETE     set prms_id 0
# OBSOLETE     set bug_id 0
# OBSOLETE 
# OBSOLETE     # Start with a fresh gdb.
# OBSOLETE 
# OBSOLETE     gdb_exit
# OBSOLETE     gdb_start
# OBSOLETE     gdb_reinitialize_dir $srcdir/$subdir
# OBSOLETE     gdb_load $binfile
# OBSOLETE 
# OBSOLETE     gdb_test "set language chill" ""
# OBSOLETE 
# OBSOLETE     runto tuples.ch:40
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arri" {= [(1): -1, (2): -2, (3): -3, (4): -4, (5): -5]}
# OBSOLETE     gdb_test_exact "set v_arri := \[ 33, 44, 55, 66, 77 \]" {}
# OBSOLETE     gdb_test_exact "print v_arri" {= [(1): 33, (2): 44, (3): 55, (4): 66, (5): 77]} "after assignment 1 to v_arri"
# OBSOLETE     gdb_test_exact "set v_arri := \[-33, -44, -55, -66, -77\]" {}
# OBSOLETE     gdb_test_exact "print v_arri" {= [(1): -33, (2): -44, (3): -55, (4): -66, (5): -77]} {after assignment 2 to v_arri}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrui" {= [(1): 1, (2): 2, (3): 3, (4): 4, (5): 5]}
# OBSOLETE     gdb_test_exact "set v_arrui := \[ 11, 11, 11, 11, 11 \]" {}
# OBSOLETE     gdb_test_exact "print v_arrui" {= [(1:5): 11]} "after assignment to v_arrui"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrb" {= [(1): -3, (2): -4, (3): -5, (4): -6, (5): -7]}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set v_arrb := \[ -9, -8, -7, -6, -5 \]" {}
# OBSOLETE     gdb_test_exact "print v_arrb" {= [(1): -9, (2): -8, (3): -7, (4): -6, (5): -5]} "after assignment to v_arrb"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrub" {= [(1): 3, (2): 4, (3): 5, (4): 6, (5): 7]}
# OBSOLETE     gdb_test_exact "set v_arrub := \[ 77, 77, 77, 77, 77 \]" {}
# OBSOLETE     gdb_test_exact "print v_arrub" {= [(1:5): 77]} "v_arrub after assignment"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print j" {= 4}
# OBSOLETE     gdb_test_exact "print j := 3+4" {= 7}
# OBSOLETE     gdb_test_exact "print j := r1(3)" {= 3}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_arrc" {= [(1): '1', (2): '2', (3): '3', (4): '4', (5): '5']}
# OBSOLETE     gdb_test_exact "set v_arrc := \[ 'a', 'b', 'c', 'd', 'e' \]" {}
# OBSOLETE     gdb_test_exact "print v_arrc" {= [(1): 'a', (2): 'b', (3): 'c', (4): 'd', (5): 'e']} "v_arrc after assignment"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print v_ps" {= [1, 3, 5]}
# OBSOLETE     gdb_test_exact "set v_ps := \[ 2, 4 \]" {}
# OBSOLETE     gdb_test_exact "print v_ps" {= [2, 4]} {v_ps after assignment}
# OBSOLETE     gdb_test_exact "print v_ps :=  \[\]" {= []} {assign [] to v_ps}
# OBSOLETE 
# OBSOLETE     gdb_test_exact "print m_arri\[1, 2, 3, 4, 5\]" {= [(1): 1, (2): 2, (3): 3, (4): 4, (5): 5]}
# OBSOLETE     gdb_test_exact "print m_arrub\[45, 46, 47, 48, 49\]" {= [(1): 45, (2): 46, (3): 47, (4): 48, (5): 49]}
# OBSOLETE 
# OBSOLETE    gdb_test_exact "print v_cv" {= "foo"}
# OBSOLETE    gdb_test_exact "set v_cv := \"foo-bar\"" {}
# OBSOLETE    gdb_test_exact "print v_cv" {= "foo-bar"} "v_cv after assignment"
# OBSOLETE    gdb_test_exact "set v_cv(3) := ' '" {}
# OBSOLETE    gdb_test_exact "print v_cv" {= "foo bar"} "v_cv after element assignment"
# OBSOLETE 
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1): TRUE, (2): FALSE, (3): TRUE, (4): FALSE, (5): TRUE]}
# OBSOLETE    gdb_test_exact "set v_arrbool := \[ false, false, false, false, false \]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1:5): FALSE]} "v_arrbool after assignment 1"
# OBSOLETE    gdb_test_exact "set v_arrbool := \[true, true, true, true, true\]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1:5): TRUE]} "v_arrbool after assignment 2"
# OBSOLETE    gdb_test_exact "set v_arrbool(3) := false" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1:2): TRUE, (3): FALSE, (4:5): TRUE]} "v_arrbool after element assignment"
# OBSOLETE 
# OBSOLETE    gdb_test_exact "set v_arrbool(1 up 2) := \[ false, true \]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1): FALSE, (2): TRUE, (3): FALSE, (4:5): TRUE]} "v_arrbool after slice assignment 1"
# OBSOLETE    gdb_test_exact "set v_arrbool(3 : 5) := \[ true, true, false \]" {}
# OBSOLETE    gdb_test_exact "print v_arrbool" {= [(1): FALSE, (2:4): TRUE, (5): FALSE]} "v_arrbool after slice assignment 2"
# OBSOLETE 
# OBSOLETE    gdb_test_exact "set vstr := \[ .a: 2+3, .b: 12, .ch1: 'x' \]" {}
# OBSOLETE    gdb_test_exact "print vstr.a" {= 5} "vstr.a after assignment"
# OBSOLETE    gdb_test_exact "print vstr.ch1" {= 'x'} "vstr.ch1 after assignment"
# OBSOLETE 
# OBSOLETE #   These tests are from Cygnus PR chill/5024:
# OBSOLETE     gdb_test "break printdow" ""
# OBSOLETE     gdb_test "continue" ""
# OBSOLETE     gdb_test_exact "set var w:= dow\[monday\]" {}
# OBSOLETE     gdb_test "print w" " = \\\[monday\\\]" \
# OBSOLETE 	"print bitstring after assignment"
# OBSOLETE     gdb_test_exact "set var w:=\[\]" {}
# OBSOLETE     gdb_test "print w" " = \\\[\\\]" \
# OBSOLETE 	"print bitstring after assignment of \[\]"
# OBSOLETE 
# OBSOLETE #   These tests are from Cygnus PR chill/8643:
# OBSOLETE     runto tuples.ch:40
# OBSOLETE     gdb_test_exact "set var vs1 := \[ \"foo\", 41, \[ b \] \]"  {}
# OBSOLETE     gdb_test_exact "print vs1" { = [.str: "foo", .i: 41, .ps: [b]]} \
# OBSOLETE 	"print vs1 after tuple assign 1"
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "set var vs1 := \[ \"bar\", 42, m_ps\[ a \] \]" {}
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "print vs1" { = [.str: "bar", .i: 42, .ps: [a]]} \
# OBSOLETE 	"print vs1 after tuple assign 2"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set var \$i := m_s1\[\"foo\", 42, \[a \]\]" {}
# OBSOLETE     gdb_test_exact {print $i} { = [.str: "foo", .i: 42, .ps: [a]]} \
# OBSOLETE 	"print \$i after tuple assign 1"
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "set var \$i := m_s1\[\"foo\", 44, m_ps\[a \]\]" {}
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact {print $i} { = [.str: "foo", .i: 44, .ps: [a]]} \
# OBSOLETE 	"print \$i after tuple assign 2"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set var vs2 := \[ 10, \[ \"foo\" , 42, \[ b \] \] \]" {}
# OBSOLETE     gdb_test_exact "print vs2" \
# OBSOLETE 	{ = [.i: 10, .s: [.str: "foo", .i: 42, .ps: [b]]]} \
# OBSOLETE 	"print vs2 after tuple assign 1"
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "set var vs2 := \[ 10+3, m_s1\[ \"foo\" , 42, m_ps\[ b \] \] \]" {}
# OBSOLETE     setup_xfail "i*86-pc-linux*-gnu" "sparc-*-solaris*" "sparc-*-sunos*"
# OBSOLETE     gdb_test_exact "print vs2" \
# OBSOLETE 	{ = [.i: 13, .s: [.str: "foo", .i: 42, .ps: [b]]]} \
# OBSOLETE 	"print vs2 after tuple assign 2"
# OBSOLETE 
# OBSOLETE     gdb_test_exact "set var vs3 := \[ 33, \[ -1, -2, -3 \] \]" {}
# OBSOLETE     gdb_test_exact "print vs3" {[.i: 33, .a: [(1): -1, (2): -2, (3): -3]]} \
# OBSOLETE 	"print vs3 after tuple assign"
# OBSOLETE     gdb_test_exact "set var \$k := m_s3\[ 33, m_arr\[ 4, 3, 2 \] \]" {}
# OBSOLETE     gdb_test_exact {print $k} { = [.i: 33, .a: [(1): 4, (2): 3, (3): 2]]} \
# OBSOLETE 	"print \$k after tuple assign"
# OBSOLETE 
# OBSOLETE }
# OBSOLETE 
# OBSOLETE do_tests
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 1995, 1997 Free Software Foundation, Inc.
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

