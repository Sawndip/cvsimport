head	1.4;
access;
symbols
	gdb_5_3-2002-12-12-release:1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.10
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	carlton_dictionary-branch:1.3.0.8
	carlton_dictionary-20020920-branchpoint:1.3
	gdb_5_3-branch:1.3.0.6
	gdb_5_3-2002-09-04-branchpoint:1.3
	kseitz_interps-20020829-merge:1.3
	cagney_sysregs-20020825-branch:1.3.0.4
	cagney_sysregs-20020825-branchpoint:1.3
	readline_4_3-import-branch:1.3.0.2
	readline_4_3-import-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.16
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.14
	cagney_regbuf-20020515-branchpoint:1.2
	jimb-macro-020506-branch:1.2.0.12
	jimb-macro-020506-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.10
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.2
	gdb_5_1_0_1-2002-01-03-release:1.2
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	gdb-post-ptid_t-2001-05-03:1.2
	gdb-pre-ptid_t-2001-05-03:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb-post-protoization-2000-07-29:1.1.1.1
	gdb-pre-protoization-2000-07-29:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb-post-params-removal-2000-06-04:1.1.1.1
	gdb-pre-params-removal-2000-06-04:1.1.1.1
	gdb-post-params-removal-2000-05-28:1.1.1.1
	gdb-pre-params-removal-2000-05-28:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2002.12.16.19.33.51;	author cagney;	state dead;
branches;
next	1.3;

1.3
date	2002.08.02.00.25.23;	author cagney;	state Exp;
branches
	1.3.8.1
	1.3.10.1;
next	1.2;

1.2
date	2001.03.06.08.21.55;	author kevinb;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	99.04.16.01.34.33;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.33;	author shebs;	state Exp;
branches;
next	;

1.2.16.1
date	2002.08.09.18.34.34;	author kseitz;	state Exp;
branches;
next	;

1.3.8.1
date	2002.12.23.19.39.15;	author carlton;	state dead;
branches;
next	;

1.3.10.1
date	2003.12.14.20.27.51;	author drow;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove obsolete testsuite code.
@
text
@# OBSOLETE # Copyright 1995, 1996, 1997 Free Software Foundation, Inc.
# OBSOLETE 
# OBSOLETE # This program is free software; you can redistribute it and/or modify
# OBSOLETE # it under the terms of the GNU General Public License as published by
# OBSOLETE # the Free Software Foundation; either version 2 of the License, or
# OBSOLETE # (at your option) any later version.
# OBSOLETE # 
# OBSOLETE # This program is distributed in the hope that it will be useful,
# OBSOLETE # but WITHOUT ANY WARRANTY; without even the implied warranty of
# OBSOLETE # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# OBSOLETE # GNU General Public License for more details.
# OBSOLETE # 
# OBSOLETE # You should have received a copy of the GNU General Public License
# OBSOLETE # along with this program; if not, write to the Free Software
# OBSOLETE # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
# OBSOLETE 
# OBSOLETE # Please email any bugs, comments, and/or additions to this file to:
# OBSOLETE # bug-gdb@@prep.ai.mit.edu
# OBSOLETE 
# OBSOLETE # This file tests various Chill values, expressions, and types.
# OBSOLETE 
# OBSOLETE # This file was written by Wilfried Moser (moser@@aut.alcatel.at)
# OBSOLETE #			   Kurt Fuchs (fuchs_k@@aut.alcatel.at)
# OBSOLETE #
# OBSOLETE 
# OBSOLETE if $tracelevel then {
# OBSOLETE 	strace $tracelevel
# OBSOLETE }
# OBSOLETE 
# OBSOLETE if [skip_chill_tests] then { continue }
# OBSOLETE 
# OBSOLETE set testfile "gch981"
# OBSOLETE set srcfile ${srcdir}/$subdir/${testfile}.ch
# OBSOLETE set binfile ${objdir}/${subdir}/${testfile}.exe
# OBSOLETE if  { [compile "${srcfile} -g -w -o ${binfile} ${CHILL_RT0} ${CHILL_LIB}"] != "" } {
# OBSOLETE     perror "Couldn't compile ${srcfile}"
# OBSOLETE     return -1
# OBSOLETE }
# OBSOLETE 
# OBSOLETE # Set the current language to chill.  This counts as a test.  If it
# OBSOLETE # fails, then we skip the other tests.
# OBSOLETE 
# OBSOLETE proc set_lang_chill {} {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global binfile objdir subdir
# OBSOLETE 
# OBSOLETE     verbose "loading file '$binfile'"
# OBSOLETE     gdb_load $binfile
# OBSOLETE     send_gdb "set language chill\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re ".*$gdb_prompt $" {}
# OBSOLETE 	timeout { fail "set language chill (timeout)" ; return 0 }
# OBSOLETE     }
# OBSOLETE 
# OBSOLETE     send_gdb "show language\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re ".* source language is \"chill\".*$gdb_prompt $" {
# OBSOLETE 	    pass "set language to \"chill\""
# OBSOLETE 	    send_gdb "break xx_\n"
# OBSOLETE 	    gdb_expect {
# OBSOLETE 		-re ".*$gdb_prompt $" {
# OBSOLETE 		    send_gdb "run\n" 
# OBSOLETE 		    gdb_expect -re ".*$gdb_prompt $" {}
# OBSOLETE 		    return 1
# OBSOLETE 		}
# OBSOLETE 		timeout {
# OBSOLETE 		    fail "can't set breakpoint (timeout)"
# OBSOLETE 		    return 0
# OBSOLETE 		}
# OBSOLETE 	    }
# OBSOLETE 	}
# OBSOLETE 	-re ".*$gdb_prompt $" {
# OBSOLETE 	    fail "setting language to \"chill\""
# OBSOLETE 	    return 0
# OBSOLETE 	}
# OBSOLETE 	timeout {
# OBSOLETE 	    fail "can't show language (timeout)"
# OBSOLETE 	    return 0
# OBSOLETE 	}
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE # Testing printing of a specific value.  Increment passcount for
# OBSOLETE # success or issue fail message for failure.  In both cases, return
# OBSOLETE # a 1 to indicate that more tests can proceed.  However a timeout
# OBSOLETE # is a serious error, generates a special fail message, and causes
# OBSOLETE # a 0 to be returned to indicate that more tests are likely to fail
# OBSOLETE # as well.
# OBSOLETE #
# OBSOLETE # Args are:
# OBSOLETE #
# OBSOLETE #	First one is string to send_gdb to gdb
# OBSOLETE #	Second one is string to match gdb result to
# OBSOLETE #	Third one is an optional message to be printed
# OBSOLETE 
# OBSOLETE proc test_print_accept { args } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global passcount
# OBSOLETE     global verbose
# OBSOLETE 
# OBSOLETE     if [llength $args]==3 then {
# OBSOLETE 	set message [lindex $args 2]
# OBSOLETE     } else {
# OBSOLETE 	set message [lindex $args 0]
# OBSOLETE     }
# OBSOLETE     set sendthis [lindex $args 0]
# OBSOLETE     set expectthis [lindex $args 1]
# OBSOLETE     set result [gdb_test $sendthis ".* = ${expectthis}" $message]
# OBSOLETE     if $result==0 {incr passcount}
# OBSOLETE     return $result
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc test_power {} {
# OBSOLETE     global passcount gdb_prompt
# OBSOLETE 
# OBSOLETE     verbose "Testing some POWERSET Stuff"
# OBSOLETE     set passcount 0
# OBSOLETE 
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     test_print_accept "print v2_power1" {\[\]}
# OBSOLETE     test_print_accept "print SIZE(v1_power1)" "1"
# OBSOLETE 
# OBSOLETE     gdb_test "set v1_power1 := \[b1\]"  ""
# OBSOLETE #   if GDB has rejected the improper values, we have to gdb_expect the same!
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v1_power1 := \[a1,a2\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[b1,b2,b3,e4\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e4:e5\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e4:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e1, e2:e3, e5\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e3, e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e1, e2:e4, e4:e5\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e1, e1:e3, e1:e2, e2:e3\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e3\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power2 := \[e2\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[\]}
# OBSOLETE     gdb_test "set v_power2 := \[1,2,3\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[\]}
# OBSOLETE     gdb_test "set v_power2 := \[e2, b2, b1\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[\]}
# OBSOLETE 
# OBSOLETE # Note, that this is a numbered SET, so a1:a3 contains all elements (exept a6)
# OBSOLETE     gdb_test "set v_power2 := \[a1:a3, a6:a4, a7:a9\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a6:a3\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1, a4:a6, a9\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a1, a9\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1:a2, a6, a9\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a6:a2, a9\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1, a4, a7:a8, a9:a3\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a1, a4, a9:a8\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1, a4:a8\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a1, a4:a8\]}
# OBSOLETE     gdb_test "set v_power2 := \[a8,a3,a7,a9,a5,a6\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a6, a5, a9, a7, a3, a8\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power3 := \[b1:b2,e1\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1:b2\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1, b3, b6:b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b3, b6:b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1, b3:b4, b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b3:b4, b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1, b4:b6, b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b4:b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1:b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1:b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b5:b7, b1\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b5:b7\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power4 := \[\"b\"\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['b':'x'\]}
# OBSOLETE     gdb_test "set v_power4 := \[5\]"  ""
# OBSOLETE     test_print_accept "print v_power4" {\['b':'x'\]}
# OBSOLETE     gdb_test "set v_power4 := \['c':'f','g':'h','o':'t'\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['c':'h', 'o':'t'\]}
# OBSOLETE     gdb_test "set v_power4 := \['a','b','c','d','e','f'\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['a':'f'\]}
# OBSOLETE     gdb_test "set v_power4 := \['\^(0)':'\^(200)'\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['\^\(0\)':'\^\(200\)'\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power5 := \[a8\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[2:100\]}
# OBSOLETE     gdb_test "set v_power5 := \[4\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[4\]}
# OBSOLETE     gdb_test "set v_power5 := \[3:95,9:100,10:107,200:250\]" ""
# OBSOLETE     test_print_accept "print v_power5" {\[3:107, 200:250\]}
# OBSOLETE     gdb_test "set v_power5 := \[2, 100:120, 350:400\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[2, 100:120, 350:400\]}
# OBSOLETE     gdb_test "set v_power5 := \[2:64,65:127,128:256,256:399,400\]" ""
# OBSOLETE     test_print_accept "print v_power5" {\[2:400\]}
# OBSOLETE     gdb_test "set v_power5 := \[3:95, 99:100, 101:107, 200:250\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[3:95, 99:107, 200:250\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power6 := \[a8\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[\]}
# OBSOLETE     gdb_test "set v_power6 := \[4\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[4\]}
# OBSOLETE     gdb_test "set v_power6 := \[3:95, 99:100, 101:107, 200:250\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[3:95, 99:107, 200:250\]}
# OBSOLETE     gdb_test "set v_power6 := \[-111:0, 1:112, 11111:22222\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[-111:112, 11111:22222\]}
# OBSOLETE     gdb_test "set v_power6 := \[0, 200:4000, 6666:9999\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[0, 200:4000, 6666:9999\]}
# OBSOLETE 
# OBSOLETE #    gdb_test "set v_power7 := \[a8\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[2:100\]}
# OBSOLETE #    gdb_test "set v_power7 := \[4\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[4\]}
# OBSOLETE #    gdb_test "set v_power7 := \[3:95, 99:100, 101:107, 200:250\]" ""
# OBSOLETE #    test_print_accept "print v_power7" {\[3:95, 99:107, 200:250\]}
# OBSOLETE #    gdb_test "set v_power7 := \[0, 1000, 1000000, 10000000000\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[0, 1000, 1000000, 1000000000\]}
# OBSOLETE #    gdb_test "set v_power7 := \[-20000:100000, 111111:2222222\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[-20000:100000, 111111:2222222\]}
# OBSOLETE #    gdb_test "set v_power7 := \[\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[3:95, 99:107, 200:250\]}
# OBSOLETE #    gdb_test "set v_power7 := \[2:-500, -501:1, 20:370, -888:-920, 1000:2000, 1800:2500\]\ " ""
# OBSOLETE #    test_print_accept "print v_power7" {\[-920:-888, -501:2, 20:370, 1000:2500\]}
# OBSOLETE #    test_print_accept "print SIZE(v_power7)" ""
# OBSOLETE 
# OBSOLETE 
# OBSOLETE     runto 58
# OBSOLETE     test_print_accept "print v_set1 IN v1_power1" "TRUE"
# OBSOLETE     test_print_accept "print v_set1 IN v2_power1" "FALSE"
# OBSOLETE 
# OBSOLETE }
# OBSOLETE 
# OBSOLETE 
# OBSOLETE 
# OBSOLETE # Start with a fresh gdb.
# OBSOLETE 
# OBSOLETE gdb_exit
# OBSOLETE gdb_start
# OBSOLETE gdb_reinitialize_dir $srcdir/$subdir
# OBSOLETE 
# OBSOLETE gdb_test "set print sevenbit-strings" ".*"
# OBSOLETE 
# OBSOLETE 
# OBSOLETE if [set_lang_chill] then {
# OBSOLETE     # test builtins as described in chapter 6.20.3 Z.200
# OBSOLETE 
# OBSOLETE     test_power 
# OBSOLETE } else {
# OBSOLETE     warning "$test_name tests suppressed."
# OBSOLETE }
@


1.3
log
@More obsolete CHILL.
@
text
@@


1.3.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.3.8.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.2
log
@Update/correct copyright notices.
@
text
@d1 249
a249 249
# Copyright 1995, 1996, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file tests various Chill values, expressions, and types.

# This file was written by Wilfried Moser (moser@@aut.alcatel.at)
#			   Kurt Fuchs (fuchs_k@@aut.alcatel.at)
#

if $tracelevel then {
	strace $tracelevel
}

if [skip_chill_tests] then { continue }

set testfile "gch981"
set srcfile ${srcdir}/$subdir/${testfile}.ch
set binfile ${objdir}/${subdir}/${testfile}.exe
if  { [compile "${srcfile} -g -w -o ${binfile} ${CHILL_RT0} ${CHILL_LIB}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

# Set the current language to chill.  This counts as a test.  If it
# fails, then we skip the other tests.

proc set_lang_chill {} {
    global gdb_prompt
    global binfile objdir subdir

    verbose "loading file '$binfile'"
    gdb_load $binfile
    send_gdb "set language chill\n"
    gdb_expect {
	-re ".*$gdb_prompt $" {}
	timeout { fail "set language chill (timeout)" ; return 0 }
    }

    send_gdb "show language\n"
    gdb_expect {
	-re ".* source language is \"chill\".*$gdb_prompt $" {
	    pass "set language to \"chill\""
	    send_gdb "break xx_\n"
	    gdb_expect {
		-re ".*$gdb_prompt $" {
		    send_gdb "run\n" 
		    gdb_expect -re ".*$gdb_prompt $" {}
		    return 1
		}
		timeout {
		    fail "can't set breakpoint (timeout)"
		    return 0
		}
	    }
	}
	-re ".*$gdb_prompt $" {
	    fail "setting language to \"chill\""
	    return 0
	}
	timeout {
	    fail "can't show language (timeout)"
	    return 0
	}
    }
}

# Testing printing of a specific value.  Increment passcount for
# success or issue fail message for failure.  In both cases, return
# a 1 to indicate that more tests can proceed.  However a timeout
# is a serious error, generates a special fail message, and causes
# a 0 to be returned to indicate that more tests are likely to fail
# as well.
#
# Args are:
#
#	First one is string to send_gdb to gdb
#	Second one is string to match gdb result to
#	Third one is an optional message to be printed

proc test_print_accept { args } {
    global gdb_prompt
    global passcount
    global verbose

    if [llength $args]==3 then {
	set message [lindex $args 2]
    } else {
	set message [lindex $args 0]
    }
    set sendthis [lindex $args 0]
    set expectthis [lindex $args 1]
    set result [gdb_test $sendthis ".* = ${expectthis}" $message]
    if $result==0 {incr passcount}
    return $result
}

proc test_power {} {
    global passcount gdb_prompt

    verbose "Testing some POWERSET Stuff"
    set passcount 0

    test_print_accept "print v1_power1" {\[e1:e5\]}
    test_print_accept "print v2_power1" {\[\]}
    test_print_accept "print SIZE(v1_power1)" "1"

    gdb_test "set v1_power1 := \[b1\]"  ""
#   if GDB has rejected the improper values, we have to gdb_expect the same!
    test_print_accept "print v1_power1" {\[e1:e5\]}

    gdb_test "set v1_power1 := \[a1,a2\]"  ""
    test_print_accept "print v1_power1" {\[e1:e5\]}
    gdb_test "set v1_power1 := \[b1,b2,b3,e4\]"  ""
    test_print_accept "print v1_power1" {\[e1:e5\]}
    gdb_test "set v1_power1 := \[e4:e5\]"  ""
    test_print_accept "print v1_power1" {\[e4:e5\]}
    gdb_test "set v1_power1 := \[e1, e2:e3, e5\]"  ""
    test_print_accept "print v1_power1" {\[e1:e3, e5\]}
    gdb_test "set v1_power1 := \[e1, e2:e4, e4:e5\]"  ""
    test_print_accept "print v1_power1" {\[e1:e5\]}
    gdb_test "set v1_power1 := \[e1, e1:e3, e1:e2, e2:e3\]"  ""
    test_print_accept "print v1_power1" {\[e1:e3\]}

    gdb_test "set v_power2 := \[e2\]"  ""
    test_print_accept "print v_power2" {\[\]}
    gdb_test "set v_power2 := \[1,2,3\]"  ""
    test_print_accept "print v_power2" {\[\]}
    gdb_test "set v_power2 := \[e2, b2, b1\]"  ""
    test_print_accept "print v_power2" {\[\]}

# Note, that this is a numbered SET, so a1:a3 contains all elements (exept a6)
    gdb_test "set v_power2 := \[a1:a3, a6:a4, a7:a9\]"  ""
    test_print_accept "print v_power2" {\[a6:a3\]}
    gdb_test "set v_power2 := \[a1, a4:a6, a9\]"  ""
    test_print_accept "print v_power2" {\[a1, a9\]}
    gdb_test "set v_power2 := \[a1:a2, a6, a9\]"  ""
    test_print_accept "print v_power2" {\[a6:a2, a9\]}
    gdb_test "set v_power2 := \[a1, a4, a7:a8, a9:a3\]"  ""
    test_print_accept "print v_power2" {\[a1, a4, a9:a8\]}
    gdb_test "set v_power2 := \[a1, a4:a8\]"  ""
    test_print_accept "print v_power2" {\[a1, a4:a8\]}
    gdb_test "set v_power2 := \[a8,a3,a7,a9,a5,a6\]"  ""
    test_print_accept "print v_power2" {\[a6, a5, a9, a7, a3, a8\]}

    gdb_test "set v_power3 := \[b1:b2,e1\]"  ""
    test_print_accept "print v_power3" {\[b1:b2\]}
    gdb_test "set v_power3 := \[b1, b3, b6:b7\]"  ""
    test_print_accept "print v_power3" {\[b1, b3, b6:b7\]}
    gdb_test "set v_power3 := \[b1, b3:b4, b7\]"  ""
    test_print_accept "print v_power3" {\[b1, b3:b4, b7\]}
    gdb_test "set v_power3 := \[b1, b4:b6, b7\]"  ""
    test_print_accept "print v_power3" {\[b1, b4:b7\]}
    gdb_test "set v_power3 := \[b1:b7\]"  ""
    test_print_accept "print v_power3" {\[b1:b7\]}
    gdb_test "set v_power3 := \[b5:b7, b1\]"  ""
    test_print_accept "print v_power3" {\[b1, b5:b7\]}

    gdb_test "set v_power4 := \[\"b\"\]" ""
    test_print_accept "print v_power4" {\['b':'x'\]}
    gdb_test "set v_power4 := \[5\]"  ""
    test_print_accept "print v_power4" {\['b':'x'\]}
    gdb_test "set v_power4 := \['c':'f','g':'h','o':'t'\]" ""
    test_print_accept "print v_power4" {\['c':'h', 'o':'t'\]}
    gdb_test "set v_power4 := \['a','b','c','d','e','f'\]" ""
    test_print_accept "print v_power4" {\['a':'f'\]}
    gdb_test "set v_power4 := \['\^(0)':'\^(200)'\]" ""
    test_print_accept "print v_power4" {\['\^\(0\)':'\^\(200\)'\]}

    gdb_test "set v_power5 := \[a8\]"  ""
    test_print_accept "print v_power5" {\[2:100\]}
    gdb_test "set v_power5 := \[4\]"  ""
    test_print_accept "print v_power5" {\[4\]}
    gdb_test "set v_power5 := \[3:95,9:100,10:107,200:250\]" ""
    test_print_accept "print v_power5" {\[3:107, 200:250\]}
    gdb_test "set v_power5 := \[2, 100:120, 350:400\]"  ""
    test_print_accept "print v_power5" {\[2, 100:120, 350:400\]}
    gdb_test "set v_power5 := \[2:64,65:127,128:256,256:399,400\]" ""
    test_print_accept "print v_power5" {\[2:400\]}
    gdb_test "set v_power5 := \[3:95, 99:100, 101:107, 200:250\]"  ""
    test_print_accept "print v_power5" {\[3:95, 99:107, 200:250\]}

    gdb_test "set v_power6 := \[a8\]"  ""
    test_print_accept "print v_power6" {\[\]}
    gdb_test "set v_power6 := \[4\]"  ""
    test_print_accept "print v_power6" {\[4\]}
    gdb_test "set v_power6 := \[3:95, 99:100, 101:107, 200:250\]"  ""
    test_print_accept "print v_power6" {\[3:95, 99:107, 200:250\]}
    gdb_test "set v_power6 := \[-111:0, 1:112, 11111:22222\]"  ""
    test_print_accept "print v_power6" {\[-111:112, 11111:22222\]}
    gdb_test "set v_power6 := \[0, 200:4000, 6666:9999\]"  ""
    test_print_accept "print v_power6" {\[0, 200:4000, 6666:9999\]}

#    gdb_test "set v_power7 := \[a8\]"  ""
#    test_print_accept "print v_power7" {\[2:100\]}
#    gdb_test "set v_power7 := \[4\]"  ""
#    test_print_accept "print v_power7" {\[4\]}
#    gdb_test "set v_power7 := \[3:95, 99:100, 101:107, 200:250\]" ""
#    test_print_accept "print v_power7" {\[3:95, 99:107, 200:250\]}
#    gdb_test "set v_power7 := \[0, 1000, 1000000, 10000000000\]"  ""
#    test_print_accept "print v_power7" {\[0, 1000, 1000000, 1000000000\]}
#    gdb_test "set v_power7 := \[-20000:100000, 111111:2222222\]"  ""
#    test_print_accept "print v_power7" {\[-20000:100000, 111111:2222222\]}
#    gdb_test "set v_power7 := \[\]"  ""
#    test_print_accept "print v_power7" {\[3:95, 99:107, 200:250\]}
#    gdb_test "set v_power7 := \[2:-500, -501:1, 20:370, -888:-920, 1000:2000, 1800:2500\]\ " ""
#    test_print_accept "print v_power7" {\[-920:-888, -501:2, 20:370, 1000:2500\]}
#    test_print_accept "print SIZE(v_power7)" ""


    runto 58
    test_print_accept "print v_set1 IN v1_power1" "TRUE"
    test_print_accept "print v_set1 IN v2_power1" "FALSE"

}



# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir

gdb_test "set print sevenbit-strings" ".*"


if [set_lang_chill] then {
    # test builtins as described in chapter 6.20.3 Z.200

    test_power 
} else {
    warning "$test_name tests suppressed."
}
@


1.2.16.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d1 249
a249 249
# OBSOLETE # Copyright 1995, 1996, 1997 Free Software Foundation, Inc.
# OBSOLETE 
# OBSOLETE # This program is free software; you can redistribute it and/or modify
# OBSOLETE # it under the terms of the GNU General Public License as published by
# OBSOLETE # the Free Software Foundation; either version 2 of the License, or
# OBSOLETE # (at your option) any later version.
# OBSOLETE # 
# OBSOLETE # This program is distributed in the hope that it will be useful,
# OBSOLETE # but WITHOUT ANY WARRANTY; without even the implied warranty of
# OBSOLETE # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# OBSOLETE # GNU General Public License for more details.
# OBSOLETE # 
# OBSOLETE # You should have received a copy of the GNU General Public License
# OBSOLETE # along with this program; if not, write to the Free Software
# OBSOLETE # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
# OBSOLETE 
# OBSOLETE # Please email any bugs, comments, and/or additions to this file to:
# OBSOLETE # bug-gdb@@prep.ai.mit.edu
# OBSOLETE 
# OBSOLETE # This file tests various Chill values, expressions, and types.
# OBSOLETE 
# OBSOLETE # This file was written by Wilfried Moser (moser@@aut.alcatel.at)
# OBSOLETE #			   Kurt Fuchs (fuchs_k@@aut.alcatel.at)
# OBSOLETE #
# OBSOLETE 
# OBSOLETE if $tracelevel then {
# OBSOLETE 	strace $tracelevel
# OBSOLETE }
# OBSOLETE 
# OBSOLETE if [skip_chill_tests] then { continue }
# OBSOLETE 
# OBSOLETE set testfile "gch981"
# OBSOLETE set srcfile ${srcdir}/$subdir/${testfile}.ch
# OBSOLETE set binfile ${objdir}/${subdir}/${testfile}.exe
# OBSOLETE if  { [compile "${srcfile} -g -w -o ${binfile} ${CHILL_RT0} ${CHILL_LIB}"] != "" } {
# OBSOLETE     perror "Couldn't compile ${srcfile}"
# OBSOLETE     return -1
# OBSOLETE }
# OBSOLETE 
# OBSOLETE # Set the current language to chill.  This counts as a test.  If it
# OBSOLETE # fails, then we skip the other tests.
# OBSOLETE 
# OBSOLETE proc set_lang_chill {} {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global binfile objdir subdir
# OBSOLETE 
# OBSOLETE     verbose "loading file '$binfile'"
# OBSOLETE     gdb_load $binfile
# OBSOLETE     send_gdb "set language chill\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re ".*$gdb_prompt $" {}
# OBSOLETE 	timeout { fail "set language chill (timeout)" ; return 0 }
# OBSOLETE     }
# OBSOLETE 
# OBSOLETE     send_gdb "show language\n"
# OBSOLETE     gdb_expect {
# OBSOLETE 	-re ".* source language is \"chill\".*$gdb_prompt $" {
# OBSOLETE 	    pass "set language to \"chill\""
# OBSOLETE 	    send_gdb "break xx_\n"
# OBSOLETE 	    gdb_expect {
# OBSOLETE 		-re ".*$gdb_prompt $" {
# OBSOLETE 		    send_gdb "run\n" 
# OBSOLETE 		    gdb_expect -re ".*$gdb_prompt $" {}
# OBSOLETE 		    return 1
# OBSOLETE 		}
# OBSOLETE 		timeout {
# OBSOLETE 		    fail "can't set breakpoint (timeout)"
# OBSOLETE 		    return 0
# OBSOLETE 		}
# OBSOLETE 	    }
# OBSOLETE 	}
# OBSOLETE 	-re ".*$gdb_prompt $" {
# OBSOLETE 	    fail "setting language to \"chill\""
# OBSOLETE 	    return 0
# OBSOLETE 	}
# OBSOLETE 	timeout {
# OBSOLETE 	    fail "can't show language (timeout)"
# OBSOLETE 	    return 0
# OBSOLETE 	}
# OBSOLETE     }
# OBSOLETE }
# OBSOLETE 
# OBSOLETE # Testing printing of a specific value.  Increment passcount for
# OBSOLETE # success or issue fail message for failure.  In both cases, return
# OBSOLETE # a 1 to indicate that more tests can proceed.  However a timeout
# OBSOLETE # is a serious error, generates a special fail message, and causes
# OBSOLETE # a 0 to be returned to indicate that more tests are likely to fail
# OBSOLETE # as well.
# OBSOLETE #
# OBSOLETE # Args are:
# OBSOLETE #
# OBSOLETE #	First one is string to send_gdb to gdb
# OBSOLETE #	Second one is string to match gdb result to
# OBSOLETE #	Third one is an optional message to be printed
# OBSOLETE 
# OBSOLETE proc test_print_accept { args } {
# OBSOLETE     global gdb_prompt
# OBSOLETE     global passcount
# OBSOLETE     global verbose
# OBSOLETE 
# OBSOLETE     if [llength $args]==3 then {
# OBSOLETE 	set message [lindex $args 2]
# OBSOLETE     } else {
# OBSOLETE 	set message [lindex $args 0]
# OBSOLETE     }
# OBSOLETE     set sendthis [lindex $args 0]
# OBSOLETE     set expectthis [lindex $args 1]
# OBSOLETE     set result [gdb_test $sendthis ".* = ${expectthis}" $message]
# OBSOLETE     if $result==0 {incr passcount}
# OBSOLETE     return $result
# OBSOLETE }
# OBSOLETE 
# OBSOLETE proc test_power {} {
# OBSOLETE     global passcount gdb_prompt
# OBSOLETE 
# OBSOLETE     verbose "Testing some POWERSET Stuff"
# OBSOLETE     set passcount 0
# OBSOLETE 
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     test_print_accept "print v2_power1" {\[\]}
# OBSOLETE     test_print_accept "print SIZE(v1_power1)" "1"
# OBSOLETE 
# OBSOLETE     gdb_test "set v1_power1 := \[b1\]"  ""
# OBSOLETE #   if GDB has rejected the improper values, we have to gdb_expect the same!
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v1_power1 := \[a1,a2\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[b1,b2,b3,e4\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e4:e5\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e4:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e1, e2:e3, e5\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e3, e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e1, e2:e4, e4:e5\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e5\]}
# OBSOLETE     gdb_test "set v1_power1 := \[e1, e1:e3, e1:e2, e2:e3\]"  ""
# OBSOLETE     test_print_accept "print v1_power1" {\[e1:e3\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power2 := \[e2\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[\]}
# OBSOLETE     gdb_test "set v_power2 := \[1,2,3\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[\]}
# OBSOLETE     gdb_test "set v_power2 := \[e2, b2, b1\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[\]}
# OBSOLETE 
# OBSOLETE # Note, that this is a numbered SET, so a1:a3 contains all elements (exept a6)
# OBSOLETE     gdb_test "set v_power2 := \[a1:a3, a6:a4, a7:a9\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a6:a3\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1, a4:a6, a9\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a1, a9\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1:a2, a6, a9\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a6:a2, a9\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1, a4, a7:a8, a9:a3\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a1, a4, a9:a8\]}
# OBSOLETE     gdb_test "set v_power2 := \[a1, a4:a8\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a1, a4:a8\]}
# OBSOLETE     gdb_test "set v_power2 := \[a8,a3,a7,a9,a5,a6\]"  ""
# OBSOLETE     test_print_accept "print v_power2" {\[a6, a5, a9, a7, a3, a8\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power3 := \[b1:b2,e1\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1:b2\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1, b3, b6:b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b3, b6:b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1, b3:b4, b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b3:b4, b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1, b4:b6, b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b4:b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b1:b7\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1:b7\]}
# OBSOLETE     gdb_test "set v_power3 := \[b5:b7, b1\]"  ""
# OBSOLETE     test_print_accept "print v_power3" {\[b1, b5:b7\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power4 := \[\"b\"\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['b':'x'\]}
# OBSOLETE     gdb_test "set v_power4 := \[5\]"  ""
# OBSOLETE     test_print_accept "print v_power4" {\['b':'x'\]}
# OBSOLETE     gdb_test "set v_power4 := \['c':'f','g':'h','o':'t'\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['c':'h', 'o':'t'\]}
# OBSOLETE     gdb_test "set v_power4 := \['a','b','c','d','e','f'\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['a':'f'\]}
# OBSOLETE     gdb_test "set v_power4 := \['\^(0)':'\^(200)'\]" ""
# OBSOLETE     test_print_accept "print v_power4" {\['\^\(0\)':'\^\(200\)'\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power5 := \[a8\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[2:100\]}
# OBSOLETE     gdb_test "set v_power5 := \[4\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[4\]}
# OBSOLETE     gdb_test "set v_power5 := \[3:95,9:100,10:107,200:250\]" ""
# OBSOLETE     test_print_accept "print v_power5" {\[3:107, 200:250\]}
# OBSOLETE     gdb_test "set v_power5 := \[2, 100:120, 350:400\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[2, 100:120, 350:400\]}
# OBSOLETE     gdb_test "set v_power5 := \[2:64,65:127,128:256,256:399,400\]" ""
# OBSOLETE     test_print_accept "print v_power5" {\[2:400\]}
# OBSOLETE     gdb_test "set v_power5 := \[3:95, 99:100, 101:107, 200:250\]"  ""
# OBSOLETE     test_print_accept "print v_power5" {\[3:95, 99:107, 200:250\]}
# OBSOLETE 
# OBSOLETE     gdb_test "set v_power6 := \[a8\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[\]}
# OBSOLETE     gdb_test "set v_power6 := \[4\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[4\]}
# OBSOLETE     gdb_test "set v_power6 := \[3:95, 99:100, 101:107, 200:250\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[3:95, 99:107, 200:250\]}
# OBSOLETE     gdb_test "set v_power6 := \[-111:0, 1:112, 11111:22222\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[-111:112, 11111:22222\]}
# OBSOLETE     gdb_test "set v_power6 := \[0, 200:4000, 6666:9999\]"  ""
# OBSOLETE     test_print_accept "print v_power6" {\[0, 200:4000, 6666:9999\]}
# OBSOLETE 
# OBSOLETE #    gdb_test "set v_power7 := \[a8\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[2:100\]}
# OBSOLETE #    gdb_test "set v_power7 := \[4\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[4\]}
# OBSOLETE #    gdb_test "set v_power7 := \[3:95, 99:100, 101:107, 200:250\]" ""
# OBSOLETE #    test_print_accept "print v_power7" {\[3:95, 99:107, 200:250\]}
# OBSOLETE #    gdb_test "set v_power7 := \[0, 1000, 1000000, 10000000000\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[0, 1000, 1000000, 1000000000\]}
# OBSOLETE #    gdb_test "set v_power7 := \[-20000:100000, 111111:2222222\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[-20000:100000, 111111:2222222\]}
# OBSOLETE #    gdb_test "set v_power7 := \[\]"  ""
# OBSOLETE #    test_print_accept "print v_power7" {\[3:95, 99:107, 200:250\]}
# OBSOLETE #    gdb_test "set v_power7 := \[2:-500, -501:1, 20:370, -888:-920, 1000:2000, 1800:2500\]\ " ""
# OBSOLETE #    test_print_accept "print v_power7" {\[-920:-888, -501:2, 20:370, 1000:2500\]}
# OBSOLETE #    test_print_accept "print SIZE(v_power7)" ""
# OBSOLETE 
# OBSOLETE 
# OBSOLETE     runto 58
# OBSOLETE     test_print_accept "print v_set1 IN v1_power1" "TRUE"
# OBSOLETE     test_print_accept "print v_set1 IN v2_power1" "FALSE"
# OBSOLETE 
# OBSOLETE }
# OBSOLETE 
# OBSOLETE 
# OBSOLETE 
# OBSOLETE # Start with a fresh gdb.
# OBSOLETE 
# OBSOLETE gdb_exit
# OBSOLETE gdb_start
# OBSOLETE gdb_reinitialize_dir $srcdir/$subdir
# OBSOLETE 
# OBSOLETE gdb_test "set print sevenbit-strings" ".*"
# OBSOLETE 
# OBSOLETE 
# OBSOLETE if [set_lang_chill] then {
# OBSOLETE     # test builtins as described in chapter 6.20.3 Z.200
# OBSOLETE 
# OBSOLETE     test_power 
# OBSOLETE } else {
# OBSOLETE     warning "$test_name tests suppressed."
# OBSOLETE }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 1995, 1997 Free Software Foundation, Inc.
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

