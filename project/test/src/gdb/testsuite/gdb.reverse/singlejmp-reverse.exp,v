head	1.2;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.2
	gdb_7_6-2013-04-26-release:1.2
	gdb_7_6-branch:1.2.0.2
	gdb_7_6-2013-03-12-branchpoint:1.2
	gdb_7_5_1-2012-11-29-release:1.1.2.1
	gdb_7_5-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2013.01.01.06.41.26;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.17.07.09.35;	author jkratoch;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.09.17.07.14.56;	author jkratoch;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright (C) 2012-2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if ![supports_reverse] {
    return
}

standard_testfile ".S" "${gdb_test_file_name}-nodebug.S"
set executable ${testfile}

if [info exists COMPILE] {
    # make check RUNTESTFLAGS="gdb.reverse/singlejmp-reverse.exp COMPILE=1"
    if { [build_executable_from_specs ${testfile}.exp $executable {} \
				      ${testfile}.c {debug optimize=-O2} \
				      ${testfile}-nodebug.c {optimize=-O2} \
				      ] == -1 } {
	return -1
    }
} elseif { ![istarget x86_64-*-* ] || ![is_lp64_target] } {
    verbose "Skipping ${testfile}."
    return
} elseif { [build_executable ${testfile}.exp ${testfile} \
	    [list ${srcfile} ${srcfile2}] {}] == -1 } {
    return -1
}

clean_restart $executable

if ![runto_main] {
    return -1
}

if [supports_process_record] {
    gdb_test_no_output "record"
}

gdb_test "next" {v = 1;} "next to v = 1"
gdb_test "next" {f \(\);} "next to f"
gdb_test "next" {nodebug \(\);} "next to nodebug"
gdb_test "next" {v = 3;} "next to v = 3"

# FAIL was:
# No more reverse-execution history.
# {
gdb_test "reverse-step" {nodebug \(\);}

# FAIL was:
# No more reverse-execution history.
# {
gdb_test "reverse-next" {f \(\);}
@


1.1
log
@gdb/
	PR 14548
	* infrun.c (handle_inferior_event): Do not reverse-continue back to the
	function start if we are already at function start.  Both for
	reverse-next and for reverse-step into function without line number
	info.

gdb/testsuite/
	PR 14548
	* gdb.reverse/singlejmp-reverse-nodebug.S: New file.
	* gdb.reverse/singlejmp-reverse-nodebug.c: New file.
	* gdb.reverse/singlejmp-reverse.S: New file.
	* gdb.reverse/singlejmp-reverse.c: New file.
	* gdb.reverse/singlejmp-reverse.exp: New file.
@
text
@d1 1
a1 1
# Copyright (C) 2012 Free Software Foundation, Inc.
@


1.1.2.1
log
@gdb/
	PR 14548
	* infrun.c (handle_inferior_event): Do not reverse-continue back to the
	function start if we are already at function start.  Both for
	reverse-next and for reverse-step into function without line number
	info.

gdb/testsuite/
	PR 14548
	* gdb.reverse/singlejmp-reverse-nodebug.S: New file.
	* gdb.reverse/singlejmp-reverse-nodebug.c: New file.
	* gdb.reverse/singlejmp-reverse.S: New file.
	* gdb.reverse/singlejmp-reverse.c: New file.
	* gdb.reverse/singlejmp-reverse.exp: New file.
@
text
@@

