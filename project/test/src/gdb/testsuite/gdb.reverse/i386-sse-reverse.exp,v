head	1.14;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.14
	gdb_7_6-2013-04-26-release:1.14
	gdb_7_6-branch:1.14.0.2
	gdb_7_6-2013-03-12-branchpoint:1.14
	gdb_7_5_1-2012-11-29-release:1.13
	gdb_7_5-2012-08-17-release:1.13
	gdb_7_5-branch:1.13.0.2
	gdb_7_5-2012-07-18-branchpoint:1.13
	gdb_7_4_1-2012-04-26-release:1.8.2.1
	gdb_7_4-2012-01-24-release:1.8.2.1
	gdb_7_4-branch:1.8.0.2
	gdb_7_4-2011-12-13-branchpoint:1.8
	gdb_7_3_1-2011-09-04-release:1.4
	gdb_7_3-2011-07-26-release:1.4
	gdb_7_3-branch:1.4.0.2
	gdb_7_3-2011-04-01-branchpoint:1.4
	gdb_7_2-2010-09-02-release:1.3
	gdb_7_2-branch:1.3.0.2
	gdb_7_2-2010-07-07-branchpoint:1.3;
locks; strict;
comment	@# @;


1.14
date	2013.01.01.06.41.26;	author brobecke;	state Exp;
branches;
next	1.13;

1.13
date	2012.06.26.17.54.59;	author tromey;	state Exp;
branches;
next	1.12;

1.12
date	2012.02.29.14.55.46;	author jkratoch;	state Exp;
branches;
next	1.11;

1.11
date	2012.02.24.00.40.01;	author jkratoch;	state Exp;
branches;
next	1.10;

1.10
date	2012.01.16.16.21.52;	author palves;	state Exp;
branches;
next	1.9;

1.9
date	2012.01.04.08.27.54;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.25.23.53.45;	author jkratoch;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2011.11.25.23.50.15;	author jkratoch;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.08.08.23.48;	author qiyao;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.24.12.01.22;	author muller;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.01.15.33.49;	author brobecke;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.28.18.26.41;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.05.18.07.02;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.02.05.13.09;	author teawater;	state Exp;
branches;
next	;

1.8.2.1
date	2012.01.06.04.54.28;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2009-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the gdb testsuite.

#
# This test tests some i386 general instructions for reverse execution.
#

if ![supports_reverse] {
    return
}


if ![istarget "*86*-*linux*"] then {
    verbose "Skipping i386 reverse tests."
    return
}

standard_testfile

# some targets have leading underscores on assembly symbols.
set additional_flags [gdb_target_symbol_prefix_flags]

if {[prepare_for_testing $testfile.exp $testfile $srcfile \
	 [list debug $additional_flags]]} {
    return -1
}

set end_of_main          [gdb_get_line_number " end of main "]
set end_sse_test         [gdb_get_line_number " end sse_test "]
set end_ssse3_test       [gdb_get_line_number " end ssse3_test "]
set end_sse4_test         [gdb_get_line_number " end sse4_test "]

runto main

if [supports_process_record] {
    # Activate process record/replay
    gdb_test_no_output "record" "Turn on process record"
}

global hex
global decimal

#sse_test

gdb_test "break $end_sse_test" \
    "Breakpoint $decimal at .* line $end_sse_test\." \
    "set breakpoint at end of sse_test"

set test "continue to end of sse_test"
gdb_test_multiple "continue" $test {
    -re " end sse_test .*\r\n$gdb_prompt $" {
	pass $test
    }
    -re " Illegal instruction.*\r\n$gdb_prompt $" {
	untested i386-sse-reverse
	return -1
    }
}

gdb_test "reverse-step" "xorps.*" "reverse-step to xorps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xf000c00080008000f800c00080008000.*" \
    "verify xmm0 at end of sse_test"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x70004000000000007800400000000000.*" \
    "verify xmm1 at end of sse_test"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xf000c000f800c000f000c000f000c000.*" \
    "verify xmm2 at end of sse_test"

gdb_test "reverse-step" "xorpd.*" "reverse-step to xorpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xf000c00080008000f800c00080008000.*" \
    "verify xmm0 after reverse xorps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x80008000800080008000800080008000.*" \
    "verify xmm1 after reverse xorps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xf000c000f800c000f000c000f000c000.*" \
    "verify xmm2 after reverse xorps"

gdb_test "reverse-step" "unpckhps.*" "reverse-step to unpckhps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x8000800080008000fff00000ffc00000.*" \
    "verify xmm0 after reverse xorpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x80008000800080008000800080008000.*" \
    "verify xmm1 after reverse xorpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xf000c000f800c000f000c000f000c000.*" \
    "verify xmm2 after reverse xorpd"

gdb_test "reverse-step" "unpckhpd.*" "reverse-step to unpckhpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse unpckhps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x80008000800080008000800080008000.*" \
    "verify xmm1 after reverse unpckhps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xf000c000f800c000f000c000f000c000.*" \
    "verify xmm2 after reverse unpckhps"

gdb_test "reverse-step" "ucomiss.*" "reverse-step to ucomiss"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse unpckhpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x80008000800080008000800080008000.*" \
    "verify xmm1 after reverse unpckhpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xf000c000f800c000f000c000f000c000.*" \
    "verify xmm2 after reverse unpckhpd"

gdb_test "reverse-step" "ucomisd.*" "reverse-step to ucomisd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse ucomiss"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x80008000800080008000800080008000.*" \
    "verify xmm1 after reverse ucomiss"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xf000c000f800c000f000c000f000c000.*" \
    "verify xmm2 after reverse ucomiss"

gdb_test "reverse-step" "packssdw.*" "reverse-step to packssdw"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse ucomisd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse ucomisd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xf000c000f800c000f000c000f000c000.*" \
    "verify xmm2 after reverse ucomisd"

gdb_test "reverse-step" "packsswb.*" "reverse-step to packsswb"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse packssdw"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse packssdw"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm2 after reverse packssdw"

gdb_test "reverse-step" "orps.*" "reverse-step to orps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse packsswb"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse packsswb"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm2 after reverse packsswb"

gdb_test "reverse-step" "orpd.*" "reverse-step to orpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0000000000000000fff80000ffc00000.*" \
    "verify xmm0 after reverse orps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse orps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm2 after reverse orps"

gdb_test "reverse-step" "mulss.*" "reverse-step to mulss"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0000000000000000fff80000ffc00000.*" \
    "verify xmm0 after reverse orpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse orpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm2 after reverse orpd"

gdb_test "reverse-step" "mulsd.*" "reverse-step to mulsd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0000000000000000fff80000ffc00000.*" \
    "verify xmm0 after reverse mulss"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse mulss"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm2 after reverse mulss"

gdb_test "reverse-step" "mulps.*" "reverse-step to mulps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0000000000000000fff80000ffc00000.*" \
    "verify xmm0 after reverse mulsd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse mulsd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff0000000000000fff00000ffc00000.*" \
    "verify xmm2 after reverse mulsd"

gdb_test "reverse-step" "mulpd.*" "reverse-step to mulpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0000000000000000fff80000ffc00000.*" \
    "verify xmm0 after reverse mulps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm1 after reverse mulps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff0000000000000fff00000ffc00000.*" \
    "verify xmm2 after reverse mulps"

gdb_test "reverse-step" "divss.*" "reverse-step to divss"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0000000000000000fff80000ffc00000.*" \
    "verify xmm0 after reverse mulpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm1 after reverse mulpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff0000000000000fff0000000000000.*" \
    "verify xmm2 after reverse mulpd"

gdb_test "reverse-step" "divsd.*" "reverse-step to divsd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x00000000000000008000000080000000.*" \
    "verify xmm0 after reverse divss"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm1 after reverse divss"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff0000000000000fff0000000000000.*" \
    "verify xmm2 after reverse divss"

gdb_test "reverse-step" "divps.*" "reverse-step to divps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x00000000000000008000000080000000.*" \
    "verify xmm0 after reverse divsd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x00000000000000000000000080000000.*" \
    "verify xmm1 after reverse divsd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff0000000000000fff0000000000000.*" \
    "verify xmm2 after reverse divsd"

gdb_test "reverse-step" "divpd.*" "reverse-step to divpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x00000000000000008000000080000000.*" \
    "verify xmm0 after reverse divps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x00000000000000000000000080000000.*" \
    "verify xmm1 after reverse divps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xbff0000000000000bff0000000000000.*" \
    "verify xmm2 after reverse divps"

gdb_test "reverse-step" "cvtpd2ps.*" "reverse-step to cvtpd2ps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x00000000000000008000000080000000.*" \
    "verify xmm0 after reverse divpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xce80200000000000ce80200000000000.*" \
    "verify xmm1 after reverse divpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xbff0000000000000bff0000000000000.*" \
    "verify xmm2 after reverse divpd"

gdb_test "reverse-step" "cvtpd2dq.*" "reverse-step to cvtpd2dq"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a090807060504ffffffff.*" \
    "verify xmm0 after reverse cvtpd2ps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xce80200000000000ce80200000000000.*" \
    "verify xmm1 after reverse cvtpd2ps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xbff0000000000000bff0000000000000.*" \
    "verify xmm2 after reverse cvtpd2ps"

gdb_test "reverse-step" "cvtdq2ps.*" "reverse-step to cvtdq2ps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a090807060504ffffffff.*" \
    "verify xmm0 after reverse cvtpd2dq"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x0000000000000000ffffffffffffffff.*" \
    "verify xmm1 after reverse cvtpd2dq"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xbff0000000000000bff0000000000000.*" \
    "verify xmm2 after reverse cvtpd2dq"

gdb_test "reverse-step" "cvtdq2pd.*" "reverse-step to cvtdq2pd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a090807060504ffffffff.*" \
    "verify xmm0 after reverse cvtdq2ps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x0000000000000000ffffffffffffffff.*" \
    "verify xmm1 after reverse cvtdq2ps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xffffffffffffffffffffffff00000000.*" \
    "verify xmm2 after reverse cvtdq2ps"

gdb_test "reverse-step" "comiss.*" "reverse-step to comiss"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a090807060504ffffffff.*" \
    "verify xmm0 after reverse cvtdq2pd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x0000000000000000ffffffffffffffff.*" \
    "verify xmm1 after reverse cvtdq2pd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xffffffffffffffffffffffff00000000.*" \
    "verify xmm2 after reverse cvtdq2pd"

gdb_test "reverse-step" "comisd.*" "reverse-step to comisd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a090807060504ffffffff.*" \
    "verify xmm0 after reverse comiss"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x0000000000000000ffffffffffffffff.*" \
    "verify xmm1 after reverse comiss"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xffffffffffffffffffffffff00000000.*" \
    "verify xmm2 after reverse comiss"

gdb_test "reverse-step" "cmpss.*" "reverse-step to cmpss"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse comisd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x0000000000000000ffffffffffffffff.*" \
    "verify xmm1 after reverse comisd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xffffffffffffffffffffffff00000000.*" \
    "verify xmm2 after reverse comisd"

gdb_test "reverse-step" "cmpsd.*" "reverse-step to cmpsd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse cmpss"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x00000000000000000000000000000000.*" \
    "verify xmm1 after reverse cmpss"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xffffffffffffffffffffffff00000000.*" \
    "verify xmm2 after reverse cmpss"

gdb_test "reverse-step" "cmpps.*" "reverse-step to cmpps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse cmpsd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x00000000000000000000000000000000.*" \
    "verify xmm1 after reverse cmpsd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x0f0e0d0c0b0a09082726252400000000.*" \
    "verify xmm2 after reverse cmpsd"

gdb_test "reverse-step" "cmppd.*" "reverse-step to cmppd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse cmpps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x0f0e0d0c0b0a09082726252400000000.*" \
    "verify xmm1 after reverse cmpps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x0f0e0d0c0b0a09082726252400000000.*" \
    "verify xmm2 after reverse cmpps"

gdb_test "reverse-step" "andps.*" "reverse-step to andps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse cmppd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19182726252400000000.*" \
    "verify xmm1 after reverse cmppd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x0f0e0d0c0b0a09082726252400000000.*" \
    "verify xmm2 after reverse cmppd"

gdb_test "reverse-step" "andpd.*" "reverse-step to andpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse andps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19182726252400000000.*" \
    "verify xmm1 after reverse andps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse andps"

gdb_test "reverse-step" "addsubps.*" "reverse-step to addsubps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse andpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19182726252423222120.*" \
    "verify xmm1 after reverse andpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse andpd"

gdb_test "reverse-step" "addsubpd.*" "reverse-step to addsubpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050423222120.*" \
    "verify xmm0 after reverse addsubps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19182726252423222120.*" \
    "verify xmm1 after reverse addsubps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse addsubps"

gdb_test "reverse-step" "addss.*" "reverse-step to addss"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse addsubpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19182726252423222120.*" \
    "verify xmm1 after reverse addsubpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse addsubpd"

gdb_test "reverse-step" "addsd.*" "reverse-step to addsd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse addss"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse addss"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse addss"

gdb_test "reverse-step" "addps.*" "reverse-step to addps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse addsd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse addsd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse addsd"

gdb_test "reverse-step" "addpd.*" "reverse-step to addpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse addps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse addps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse addps"


#ssse3_test

gdb_test "continue" \
    " end sse_test .*" \
    "continue to end of sse_test #2"

gdb_test "break $end_ssse3_test" \
    "Breakpoint $decimal at .* line $end_ssse3_test\." \
    "set breakpoint at end of ssse3_test"

set test "continue to end of ssse3_test"
gdb_test_multiple "continue" $test {
    -re " end ssse3_test .*\r\n$gdb_prompt $" {
	pass $test
    }
    -re " Illegal instruction.*\r\n$gdb_prompt $" {
	untested i386-ssse3-reverse
	return -1
    }
}

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm0 at end of ssse3_test"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 at end of ssse3_test"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm2 at end of ssse3_test"

gdb_test "reverse-step" "pabsd.*" "reverse-step to pabsd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse pabsd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse pabsd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm2 after reverse pabsd"

gdb_test "reverse-step" "pabsw.*" "reverse-step to pabsw"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse pabsw"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse pabsw"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm2 after reverse pabsw"

gdb_test "reverse-step" "pabsb.*" "reverse-step to pabsb"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse pabsb"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse pabsb"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse pabsb"


#sse4_test

gdb_test "continue" \
    " end ssse3_test .*" \
    "continue to end of ssse3_test #2"

gdb_test "break $end_sse4_test" \
    "Breakpoint $decimal at .* line $end_sse4_test\." \
    "set breakpoint at end of sse4_test"

set test "continue to end of sse4_test"
gdb_test_multiple "continue" $test {
    -re " end sse4_test .*\r\n$gdb_prompt $" {
	pass $test
    }
    -re " Illegal instruction.*\r\n$gdb_prompt $" {
	untested i386-sse4-reverse
        return -1
    }
}

gdb_test "reverse-step" "blendvps.*" "reverse-step to blendvps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09082726252413121110.*" \
    "verify xmm0 at end of sse4_test"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 at end of sse4_test"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 at end of sse4_test"

gdb_test "reverse-step" "blendvpd.*" "reverse-step to blendvpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09082726252413121110.*" \
    "verify xmm0 after reverse blendvps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse blendvps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse blendvps"

gdb_test "reverse-step" "blendps.*" "reverse-step to blendps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09081716151413121110.*" \
    "verify xmm0 after reverse blendvpd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse blendvpd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse blendvpd"

gdb_test "reverse-step" "blendpd.*" "reverse-step to blendpd"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0x0f0e0d0c0b0a09080706050403020100.*" \
    "verify xmm0 after reverse blendps"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0x1f1e1d1c1b1a19181716151413121110.*" \
    "verify xmm1 after reverse blendps"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x2f2e2d2c2b2a29282726252423222120.*" \
    "verify xmm2 after reverse blendps"
@


1.13
log
@	* gdb.reverse/break-precsave.exp: Use standard_testfile.
	* gdb.reverse/break-reverse.exp: Use standard_testfile.
	* gdb.reverse/consecutive-precsave.exp: Use standard_testfile.
	* gdb.reverse/consecutive-reverse.exp: Use standard_testfile.
	* gdb.reverse/finish-precsave.exp: Use standard_testfile.
	* gdb.reverse/finish-reverse-bkpt.exp: Use standard_testfile.
	* gdb.reverse/finish-reverse.exp: Use standard_testfile.
	* gdb.reverse/i386-precsave.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.reverse/i386-reverse.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.reverse/i386-sse-reverse.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.reverse/i387-env-reverse.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.reverse/i387-stack-reverse.exp: Use standard_testfile,
	prepare_for_testing
	* gdb.reverse/machinestate-precsave.exp: Use standard_testfile.
	* gdb.reverse/machinestate.exp: Use standard_testfile.
	* gdb.reverse/next-reverse-bkpt-over-sr.exp: Use standard_testfile.
	* gdb.reverse/sigall-precsave.exp: Use standard_testfile,
	build_executable.
	* gdb.reverse/sigall-reverse.exp: Use standard_testfile,
	build_executable.
	* gdb.reverse/solib-precsave.exp: Use standard_testfile,
	standard_output_file.
	* gdb.reverse/solib-reverse.exp: Use standard_testfile,
	standard_output_file.
	* gdb.reverse/step-precsave.exp: Use standard_testfile.
	* gdb.reverse/step-reverse.exp: Use standard_testfile.
	* gdb.reverse/until-precsave.exp: Use standard_testfile.
	* gdb.reverse/until-reverse.exp: Use standard_testfile.
	* gdb.reverse/watch-precsave.exp: Use standard_testfile.
	* gdb.reverse/watch-reverse.exp: Use standard_testfile.
@
text
@d1 1
a1 1
# Copyright 2009-2012 Free Software Foundation, Inc.
@


1.12
log
@gdb/testsuite/
	Support processors without SSSE3.
	* gdb.reverse/i386-sse-reverse.c (sse_test): Move pabsb, pabsw and
	pabsd into ...
	(ssse3_test): ... a new function.
	(main): Call ssse3_test.
	* gdb.reverse/i386-sse-reverse.exp: New variable end_ssse3_test.
	Update expected values everywhere.
	(reverse-step to pabsd, verify xmm0 after reverse pabsd)
	(verify xmm1 after reverse pabsd, verify xmm2 after reverse pabsd)
	(reverse-step to pabsw, verify xmm0 after reverse pabsw)
	(verify xmm1 after reverse pabsw, verify xmm2 after reverse pabsw)
	(reverse-step to pabsb, verify xmm0 after reverse pabsb)
	(verify xmm1 after reverse pabsb, verify xmm2 after reverse pabsb):
	Move these tests lower.
	(set breakpoint at end of ssse3_test, continue to end of ssse3_test)
	(verify xmm0 at end of ssse3_test, verify xmm1 at end of ssse3_test)
	(verify xmm2 at end of ssse3_test, continue to end of ssse3_test #2):
	New tests.
@
text
@d32 1
a32 3
set testfile "i386-sse-reverse"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
d37 2
a38 2
if { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable [list debug $additional_flags]] != "" } {
    untested i386-sse-reverse
a46 6
# Get things started.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}
@


1.11
log
@gdb/testsuite/
	Fix false FAILs on old CPUs without SSE.
	* gdb.reverse/i386-sse-reverse.exp (continue to end of sse_test):
	Return untested for Illegal instruction.
@
text
@d46 1
d85 1
a85 1
    "xmm0 .*uint128 = 0x7f007f007fff7fff7f007f007fff7fff.*" \
d89 1
a89 1
    "xmm1 .*uint128 = 0x00ff00ff0000000000ff00ff00000000.*" \
d93 1
a93 1
    "xmm2 .*uint128 = 0x7f007f007f007f007f007f007f007f00.*" \
d99 1
a99 1
    "xmm0 .*uint128 = 0x7f007f007fff7fff7f007f007fff7fff.*" \
d103 1
a103 1
    "xmm1 .*uint128 = 0x7fff7fff7fff7fff7fff7fff7fff7fff.*" \
d107 1
a107 1
    "xmm2 .*uint128 = 0x7f007f007f007f007f007f007f007f00.*" \
d113 1
a113 1
    "xmm0 .*uint128 = 0x7fff7fff7fff7fff0108000001400000.*" \
d117 1
a117 1
    "xmm1 .*uint128 = 0x7fff7fff7fff7fff7fff7fff7fff7fff.*" \
d121 1
a121 1
    "xmm2 .*uint128 = 0x7f007f007f007f007f007f007f007f00.*" \
d127 1
a127 1
    "xmm0 .*uint128 = 0x01080000014000000108000001400000.*" \
d131 1
a131 1
    "xmm1 .*uint128 = 0x7fff7fff7fff7fff7fff7fff7fff7fff.*" \
d135 1
a135 1
    "xmm2 .*uint128 = 0x7f007f007f007f007f007f007f007f00.*" \
d141 1
a141 1
    "xmm0 .*uint128 = 0x01080000014000000108000001400000.*" \
d145 1
a145 1
    "xmm1 .*uint128 = 0x7fff7fff7fff7fff7fff7fff7fff7fff.*" \
d149 1
a149 1
    "xmm2 .*uint128 = 0x7f007f007f007f007f007f007f007f00.*" \
d155 1
a155 1
    "xmm0 .*uint128 = 0x01080000014000000108000001400000.*" \
d159 1
a159 1
    "xmm1 .*uint128 = 0x7fff7fff7fff7fff7fff7fff7fff7fff.*" \
d163 1
a163 1
    "xmm2 .*uint128 = 0x7f007f007f007f007f007f007f007f00.*" \
d169 1
a169 1
    "xmm0 .*uint128 = 0x01080000014000000108000001400000.*" \
d173 1
a173 1
    "xmm1 .*uint128 = 0x01080000014000000108000001400000.*" \
d177 1
a177 1
    "xmm2 .*uint128 = 0x7f007f007f007f007f007f007f007f00.*" \
d183 1
a183 1
    "xmm0 .*uint128 = 0x01080000014000000108000001400000.*" \
d187 1
a187 1
    "xmm1 .*uint128 = 0x01080000014000000108000001400000.*" \
d191 1
a191 1
    "xmm2 .*uint128 = 0x01080000014000000108000001400000.*" \
d194 1
a194 1
gdb_test "reverse-step" "pabsd.*" "reverse-step to pabsd"
d201 1
a201 1
    "xmm1 .*uint128 = 0x01080000014000000108000001400000.*" \
d205 1
a205 1
    "xmm2 .*uint128 = 0x01080000014000000108000001400000.*" \
a207 42
gdb_test "reverse-step" "pabsw.*" "reverse-step to pabsw"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse pabsd"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse pabsd"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0x01080000014000000108000001400000.*" \
    "verify xmm2 after reverse pabsd"

gdb_test "reverse-step" "pabsb.*" "reverse-step to pabsb"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse pabsw"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse pabsw"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm2 after reverse pabsw"

gdb_test "reverse-step" "orps.*" "reverse-step to orps"

gdb_test "info register xmm0" \
    "xmm0 .*uint128 = 0xfff00000ffc00000fff80000ffc00000.*" \
    "verify xmm0 after reverse pabsb"

gdb_test "info register xmm1" \
    "xmm1 .*uint128 = 0xfff80000ffc00000fff80000ffc00000.*" \
    "verify xmm1 after reverse pabsb"

gdb_test "info register xmm2" \
    "xmm2 .*uint128 = 0xfff00000ffc00000fff00000ffc00000.*" \
    "verify xmm2 after reverse pabsb"

d587 1
a587 1
#sse4_test
d593 76
@


1.10
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d70 10
a79 3
gdb_test "continue" \
    " end sse_test .*" \
    "continue to end of sse_test"
@


1.9
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a25 4
if $tracelevel {
    strace $tracelevel
}

@


1.8
log
@gdb/testsuite/
	Code cleanup.
	* gdb.reverse/i386-sse-reverse.exp (continue to end of sse4_test):
	Convert send_gdb and gdb_expect to gdb_test_multiple.
@
text
@d1 1
a1 1
# Copyright 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.8.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2009-2012 Free Software Foundation, Inc.
@


1.7
log
@gdb/testsuite/
	PR testsuite/12649
	* gdb.reverse/i386-sse-reverse.exp (continue to end of sse_test #2):
	Wrap send_gdb into a new gdb_test.
@
text
@d635 4
a638 4
send_gdb "continue\n"
gdb_expect {
    -re " end sse4_test .*" {
	pass "continue to end of sse4_test"
d640 1
a640 1
    -re " Illegal instruction.*" {
@


1.6
log
@gdb/testsuite/

	* gdb.exp (supports_process_record): New.
	(supports_reverse): New.
	* gdb.reverse/break-precsave.exp: Call support_process_record
	to run test conditionally.
	* gdb.reverse/consecutive-precsave.exp: Likewise.
	* gdb.reverse/i386-precsave.exp: Likewise.
	* gdb.reverse/machinestate-precsave.exp: Likewise.
	* gdb.reverse/solib-precsave.exp: Likewise.
	* gdb.reverse/step-precsave.exp: Likewise.
	* gdb.reverse/until-precsave.exp: Likewise.
	* gdb.reverse/watch-precsave.exp: Likewise.
	* gdb.reverse/break-reverse.exp: Call support_reverse  to run
	test conditionally.
	* gdb.reverse/consecutive-reverse.exp: Likewise.
	* gdb.reverse/finish-precsave.exp: Likewise.
	* gdb.reverse/finish-reverse-bkpt.exp: Likewise.
	* gdb.reverse/finish-reverse.exp: Likewise.
	* gdb.reverse/i386-reverse.exp: Likewise.
	* gdb.reverse/i386-sse-reverse.exp: Likewise.
	* gdb.reverse/machinestate.exp: Likewise.
	* gdb.reverse/next-reverse-bkpt-over-sr.exp: Likewise.
	* gdb.reverse/sigall-precsave.exp: Likewise.
	* gdb.reverse/sigall-reverse.exp: Likewise.
	* gdb.reverse/solib-reverse.exp: Likewise.
	* gdb.reverse/step-reverse.exp: Likewise.
	* gdb.reverse/until-reverse.exp: Likewise.
	* gdb.reverse/watch-reverse.exp: Likewise.
@
text
@d627 3
a629 1
send_gdb "continue\n"
@


1.5
log
@../commit.txt~
@
text
@d22 1
a22 1
if ![target_info exists gdb,can_reverse] {
d60 1
a60 1
if [target_info exists gdb,use_precord] {
@


1.4
log
@run copyright.sh for 2011.
@
text
@d41 1
a41 5
# TODO: detect this automatically
set additional_flags ""
if [istarget "i?86-*-cygwin*"] then {
  set additional_flags "additional_flags=-DSYMBOL_PREFIX=\"_\""
}
@


1.3
log
@2010-05-28  Michael Snyder  <msnyder@@msnyder-server.eng.vmware.com>

	* gdb.reverse/break-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/break-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/consecutive-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/consecutive-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/finish-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/finish-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/i386-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/i386-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/i386-sse-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/i387-env-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/i387-stack-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/machinestate-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/machinestate.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/sigall-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/sigall-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/solib-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/solib-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/step-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/step-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/until-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/until-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/watch-precsave.exp:
	Replace uses of send_gdb / gdb_expect.
	* gdb.reverse/watch-reverse.exp:
	Replace uses of send_gdb / gdb_expect.
@
text
@d1 1
a1 1
# Copyright 2009, 2010 Free Software Foundation, Inc.
@


1.2
log
@Do not set prms_id/bug_id anymore.

2010-05-05  Joel Brobecker  <brobecker@@adacore.com>

	Remove the use of prms_id and bug_id throughout the testsuite.
@
text
@d66 1
a66 2
    gdb_test "record" "" "Turn on process record"
    # FIXME: command ought to acknowledge, so we can test if it succeeded.
@


1.1
log
@2010-04-02  Hui Zhu  <teawater@@gmail.com>
            Michael Snyder <msnyder@@vmware.com>

	* gdb.reverse/i386-sse-reverse.exp: New file.
	* gdb.reverse/i386-sse-reverse.c: New file.
@
text
@a29 2
set prms_id 0
set bug_id 0
@

