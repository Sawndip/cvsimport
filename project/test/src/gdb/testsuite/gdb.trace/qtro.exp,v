head	1.3;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1.2.1
	gdb_7_6-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2013.06.07.17.31.09;	author palves;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.10.13.59.45;	author palves;	state Exp;
branches;
next	1.1;

1.1
date	2013.05.10.13.51.49;	author palves;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.05.10.13.51.49;	author palves;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove superfluous semicolons from testsuite throughout.

A few months ago semicolons after "return" were removed throughout the
testsuite.  However, as I pointed out in review, they're unnecessary
not just after "return", but pretty much after any tcl command.  ';'
is the command separator, and you only need it if there's another
command on the same line afterwards.

This patch was written by running:

 $ find . -name "*.exp" | xargs grep -l ";\s*$" | xargs sed -i 's/\([^#][^\s*;]*\)\s*;\s*$/\1/'

and then undoing changes to comments, and lib/future.exp.

Tested on x86_64 Fedora 17.

gdb/testsuite/
2013-06-07  Pedro Alves  <palves@@redhat.com>

	* boards/native-extended-gdbserver.exp: Remove semicolon.
	* config/arm-ice.exp: Likewise.
	* config/bfin.exp: Likewise.
	* config/cygmon.exp: Likewise.
	* config/h8300.exp: Likewise.
	* config/monitor.exp: Likewise.
	* config/sid.exp: Likewise.
	* config/sim.exp: Likewise.
	* config/slite.exp: Likewise.
	* config/vx.exp: Likewise.
	* gdb.arch/i386-bp_permanent.exp: Likewise.
	* gdb.asm/asm-source.exp: Likewise.
	* gdb.base/args.exp: Likewise.
	* gdb.base/attach-pie-misread.exp: Likewise.
	* gdb.base/auxv.exp: Likewise.
	* gdb.base/bigcore.exp: Likewise.
	* gdb.base/bitfields2.exp: Likewise.
	* gdb.base/bitfields.exp: Likewise.
	* gdb.base/break.exp: Likewise.
	* gdb.base/break-interp.exp: Likewise.
	* gdb.base/callfuncs.exp: Likewise.
	* gdb.base/call-sc.exp: Likewise.
	* gdb.base/commands.exp: Likewise.
	* gdb.base/corefile.exp: Likewise.
	* gdb.base/dbx.exp: Likewise.
	* gdb.base/ending-run.exp: Likewise.
	* gdb.base/exprs.exp: Likewise.
	* gdb.base/funcargs.exp: Likewise.
	* gdb.base/hbreak2.exp: Likewise.
	* gdb.base/huge.exp: Likewise.
	* gdb.base/list.exp: Likewise.
	* gdb.base/memattr.exp: Likewise.
	* gdb.base/overlays.exp: Likewise.
	* gdb.base/printcmds.exp: Likewise.
	* gdb.base/recurse.exp: Likewise.
	* gdb.base/remotetimeout.exp: Likewise.
	* gdb.base/reread.exp: Likewise.
	* gdb.base/savedregs.exp: Likewise.
	* gdb.base/scope.exp: Likewise.
	* gdb.base/sepdebug.exp: Likewise.
	* gdb.base/setshow.exp: Likewise.
	* gdb.base/setvar.exp: Likewise.
	* gdb.base/sigaltstack.exp: Likewise.
	* gdb.base/siginfo-addr.exp: Likewise.
	* gdb.base/siginfo.exp: Likewise.
	* gdb.base/siginfo-obj.exp: Likewise.
	* gdb.base/sigrepeat.exp: Likewise.
	* gdb.base/sigstep.exp: Likewise.
	* gdb.base/structs.exp: Likewise.
	* gdb.base/testenv.exp: Likewise.
	* gdb.base/twice.exp: Likewise.
	* gdb.base/valgrind-db-attach.exp: Likewise.
	* gdb.base/valgrind-infcall.exp: Likewise.
	* gdb.base/varargs.exp: Likewise.
	* gdb.base/watchpoint.exp: Likewise.
	* gdb.cp/gdb1355.exp: Likewise.
	* gdb.cp/misc.exp: Likewise.
	* gdb.disasm/hppa.exp: Likewise.
	* gdb.disasm/t01_mov.exp: Likewise.
	* gdb.disasm/t02_mova.exp: Likewise.
	* gdb.disasm/t03_add.exp: Likewise.
	* gdb.disasm/t04_sub.exp: Likewise.
	* gdb.disasm/t05_cmp.exp: Likewise.
	* gdb.disasm/t06_ari2.exp: Likewise.
	* gdb.disasm/t07_ari3.exp: Likewise.
	* gdb.disasm/t08_or.exp: Likewise.
	* gdb.disasm/t09_xor.exp: Likewise.
	* gdb.disasm/t10_and.exp: Likewise.
	* gdb.disasm/t11_logs.exp: Likewise.
	* gdb.disasm/t12_bit.exp: Likewise.
	* gdb.disasm/t13_otr.exp: Likewise.
	* gdb.gdb/selftest.exp: Likewise.
	* gdb.hp/gdb.base-hp/callfwmall.exp: Likewise.
	* gdb.mi/mi-reverse.exp: Likewise.
	* gdb.pascal/floats.exp: Likewise.
	* gdb.python/py-inferior.exp: Likewise.
	* gdb.threads/attach-into-signal.exp: Likewise.
	* gdb.threads/pthreads.exp: Likewise.
	* gdb.threads/thread_events.exp: Likewise.
	* gdb.threads/watchthreads.exp: Likewise.
	* gdb.trace/actions-changed.exp: Likewise.
	* gdb.trace/actions.exp: Likewise.
	* gdb.trace/ax.exp: Likewise.
	* gdb.trace/backtrace.exp: Likewise.
	* gdb.trace/change-loc.exp: Likewise.
	* gdb.trace/deltrace.exp: Likewise.
	* gdb.trace/disconnected-tracing.exp: Likewise.
	* gdb.trace/ftrace.exp: Likewise.
	* gdb.trace/infotrace.exp: Likewise.
	* gdb.trace/passc-dyn.exp: Likewise.
	* gdb.trace/passcount.exp: Likewise.
	* gdb.trace/pending.exp: Likewise.
	* gdb.trace/qtro.exp: Likewise.
	* gdb.trace/range-stepping.exp: Likewise.
	* gdb.trace/report.exp: Likewise.
	* gdb.trace/save-trace.exp: Likewise.
	* gdb.trace/status-stop.exp: Likewise.
	* gdb.trace/strace.exp: Likewise.
	* gdb.trace/tfile.exp: Likewise.
	* gdb.trace/tfind.exp: Likewise.
	* gdb.trace/trace-break.exp: Likewise.
	* gdb.trace/tracecmd.exp: Likewise.
	* gdb.trace/trace-mt.exp: Likewise.
	* gdb.trace/tspeed.exp: Likewise.
	* gdb.trace/tsv.exp: Likewise.
	* gdb.trace/while-stepping.exp: Likewise.
	* lib/gdb.exp: Likewise.
	* lib/gdbserver-support.exp: Likewise.
	* lib/java.exp: Likewise.
	* lib/mi-support.exp: Likewise.
	* lib/pascal.exp: Likewise.
	* lib/prompt.exp: Likewise.
	* lib/trace-support.exp: Likewise.
@
text
@#   Copyright 1998-2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test helps making sure QTro support doesn't regress.  If the
# stub supports the newer qXfer:traceframe-info:read, then the QTro
# paths in the stub are never exercised.  PR remote/15455 is an
# example of a regression that unfortunately went unnoticed for long.

load_lib trace-support.exp

standard_testfile

if {[prepare_for_testing $testfile.exp $testfile $srcfile debug]} {
    return -1
}
clean_restart $testfile

if ![runto_main] {
    fail "Can't run to main to check for trace support"
    return -1
}

# Check whether we're testing with the remote or extended-remote
# targets, and whether the target supports tracepoints.

proc gdb_is_target_remote { } {
    global gdb_prompt

    set test "probe for target remote"
    gdb_test_multiple "maint print target-stack" $test {
	-re ".*emote serial target in gdb-specific protocol.*$gdb_prompt $" {
	    pass $test
	    return 1
	}
	-re "$gdb_prompt $" {
	    pass $test
	}
    }
    return 0
}

if ![gdb_is_target_remote] {
    return -1
}

if ![gdb_target_supports_trace] {
    unsupported "Current target does not support trace"
    return -1
}

# Run a trace session, stop it, and then inspect the resulting trace
# frame (IOW, returns while tfind mode is active).
proc prepare_for_trace_disassembly { } {
    global gdb_prompt
    gdb_breakpoint "end"

    gdb_test "trace subr" "Tracepoint .*" \
	"tracepoint at subr"

    gdb_trace_setactions "define action" \
	"" \
	"collect parm" "^$"

    gdb_test_no_output "tstart"

    gdb_test "continue" ".*Breakpoint \[0-9\]+, end .*" \
	"advance through tracing"

    gdb_test "tstatus" ".*Collected 1 trace frame.*" \
	"collected 1 trace frame"

    gdb_test_no_output "tstop"

    gdb_tfind_test "tfind start" "start" "0"
}

clean_restart $testfile
runto_main

# Trace once, issuing a tstatus, so that GDB tries
# qXfer:trace-frame-info:read.
prepare_for_trace_disassembly

# Now check whether the packet is supported.
set traceframe_info_supported -1
set test "probe for traceframe-info support"
gdb_test_multiple "show remote traceframe-info-packet" $test {
    -re ".*Support for .* is auto-detected, currently (\[a-z\]*).*$gdb_prompt $" {
	set status $expect_out(1,string)

	if { $status == "enabled" } {
	    set traceframe_info_supported 1
	} else {
	    set traceframe_info_supported 0
	}

	pass $test
    }
}
if { $traceframe_info_supported == -1 } {
    return -1
}

# Check whether we're testing with our own GDBserver.
set is_gdbserver -1
set test "probe for GDBserver"
gdb_test_multiple "monitor help" $test {
    -re "The following monitor commands are supported.*debug-hw-points.*remote-debug.*GDBserver.*$gdb_prompt $" {
	set is_gdbserver 1
	pass $test
    }
    -re "$gdb_prompt $" {
	set is_gdbserver 0
	pass $test
    }
}
if { $is_gdbserver == -1 } {
    return -1
}

# Now disassemble (IOW, read from read-only memory) while inspecting a
# trace frame, twice.  Once with qXfer:traceframe-info:read left to
# auto, and once with it disabled, exercising the QTro fallback path
# in the stub side.
foreach tfinfo { auto off } {
    with_test_prefix "qXfer:traceframe-info:read $tfinfo" {

	clean_restart $testfile
	runto_main
	gdb_test_no_output "set remote traceframe-info-packet $tfinfo"

	prepare_for_trace_disassembly

	set test "trace disassembly"
	gdb_test_multiple "disassemble subr" $test {
	    -re "<(\.\[0-9\]+|)>:.*End of assembler dump.*$gdb_prompt $" {
		pass $test
	    }
	    -re "Cannot access memory.*$gdb_prompt $" {
		if { $traceframe_info_supported == 0 } {
		    # If qXfer:traceframe-info:read is not supported,
		    # then there should be QTro support.
		    fail $test
		} elseif { $tfinfo == off && $is_gdbserver == 1 } {
		    # We we're testing with GDBserver, we know both
		    # qXfer:traceframe-info:read and QTro are
		    # supported (although supporting the former only
		    # would be sufficient), so issue a FAIL instead of
		    # UNSUPPORTED, giving us better visibility of QTro
		    # regressions.
		    fail $test
		} else {
		    # Otherwise, qXfer:traceframe-info:read is
		    # supported, making QTro optional, so this isn't
		    # really a failure.
		    unsupported "$test (no QTro support)"
		}
	    }
	}
    }
}
@


1.2
log
@PR remote/15455 - QTro remote packet broken

In the function remote_trace_set_readonly_regions in gdb/remote.c, the
local variable 'offset' does not account for "QTro" at the start of
the packet with the result that if there are any read-only regions,
the packet is sent -- but without the "QTro" -- causing the remote
stub to report that the packet is unsupported:

  Sending packet: $:0000000000400200,(...),00000000004560a4#ab...Packet received:

vs the expected:

  Sending packet: $QTro:0000000000400200,(...),00000000004560a4#31...Packet received: OK

We don't see the problem when testing with GDBserver, as that supports
qXfer:trace-frame-info:read, meaning GDBserver never needs to read
from the read-only sections directly itself.  This commit adds a test
that explicitly disables qXfer:trace-frame-info:read.

gdb/
2013-05-10  David Taylor  <dtaylor@@emc.com>

	PR remote/15455

	* remote.c (remote_trace_set_readonly_regions): Do not overwrite
	"QTro" at start of packet.

gdb/testsuite/
2013-05-10  Pedro Alves  <palves@@redhat.com>

	PR remote/15455

	* gdb.trace/qtro.c: New file.
	* gdb.trace/qtro.exp: New file.
@
text
@d60 1
a60 1
    return -1;
@


1.1
log
@file qtro.exp was initially added on branch gdb_7_6-branch.
@
text
@d1 173
@


1.1.2.1
log
@PR remote/15455 - QTro remote packet broken

In the function remote_trace_set_readonly_regions in gdb/remote.c, the
local variable 'offset' does not account for "QTro" at the start of
the packet with the result that if there are any read-only regions,
the packet is sent -- but without the "QTro" -- causing the remote
stub to report that the packet is unsupported:

  Sending packet: $:0000000000400200,(...),00000000004560a4#ab...Packet received:

vs the expected:

  Sending packet: $QTro:0000000000400200,(...),00000000004560a4#31...Packet received: OK

We don't see the problem when testing with GDBserver, as that supports
qXfer:trace-frame-info:read, meaning GDBserver never needs to read
from the read-only sections directly itself.  This commit adds a test
that explicitly disables qXfer:trace-frame-info:read.

gdb/
2013-05-10  David Taylor  <dtaylor@@emc.com>

	PR remote/15455

	* remote.c (remote_trace_set_readonly_regions): Do not overwrite
	"QTro" at start of packet.

gdb/testsuite/
2013-05-10  Pedro Alves  <palves@@redhat.com>

	PR remote/15455

	* gdb.trace/qtro.c: New file.
	* gdb.trace/qtro.exp: New file.
@
text
@a0 173
#   Copyright 1998-2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test helps making sure QTro support doesn't regress.  If the
# stub supports the newer qXfer:traceframe-info:read, then the QTro
# paths in the stub are never exercised.  PR remote/15455 is an
# example of a regression that unfortunately went unnoticed for long.

load_lib trace-support.exp

standard_testfile

if {[prepare_for_testing $testfile.exp $testfile $srcfile debug]} {
    return -1
}
clean_restart $testfile

if ![runto_main] {
    fail "Can't run to main to check for trace support"
    return -1
}

# Check whether we're testing with the remote or extended-remote
# targets, and whether the target supports tracepoints.

proc gdb_is_target_remote { } {
    global gdb_prompt

    set test "probe for target remote"
    gdb_test_multiple "maint print target-stack" $test {
	-re ".*emote serial target in gdb-specific protocol.*$gdb_prompt $" {
	    pass $test
	    return 1
	}
	-re "$gdb_prompt $" {
	    pass $test
	}
    }
    return 0
}

if ![gdb_is_target_remote] {
    return -1
}

if ![gdb_target_supports_trace] {
    unsupported "Current target does not support trace"
    return -1;
}

# Run a trace session, stop it, and then inspect the resulting trace
# frame (IOW, returns while tfind mode is active).
proc prepare_for_trace_disassembly { } {
    global gdb_prompt
    gdb_breakpoint "end"

    gdb_test "trace subr" "Tracepoint .*" \
	"tracepoint at subr"

    gdb_trace_setactions "define action" \
	"" \
	"collect parm" "^$"

    gdb_test_no_output "tstart"

    gdb_test "continue" ".*Breakpoint \[0-9\]+, end .*" \
	"advance through tracing"

    gdb_test "tstatus" ".*Collected 1 trace frame.*" \
	"collected 1 trace frame"

    gdb_test_no_output "tstop"

    gdb_tfind_test "tfind start" "start" "0"
}

clean_restart $testfile
runto_main

# Trace once, issuing a tstatus, so that GDB tries
# qXfer:trace-frame-info:read.
prepare_for_trace_disassembly

# Now check whether the packet is supported.
set traceframe_info_supported -1
set test "probe for traceframe-info support"
gdb_test_multiple "show remote traceframe-info-packet" $test {
    -re ".*Support for .* is auto-detected, currently (\[a-z\]*).*$gdb_prompt $" {
	set status $expect_out(1,string)

	if { $status == "enabled" } {
	    set traceframe_info_supported 1
	} else {
	    set traceframe_info_supported 0
	}

	pass $test
    }
}
if { $traceframe_info_supported == -1 } {
    return -1
}

# Check whether we're testing with our own GDBserver.
set is_gdbserver -1
set test "probe for GDBserver"
gdb_test_multiple "monitor help" $test {
    -re "The following monitor commands are supported.*debug-hw-points.*remote-debug.*GDBserver.*$gdb_prompt $" {
	set is_gdbserver 1
	pass $test
    }
    -re "$gdb_prompt $" {
	set is_gdbserver 0
	pass $test
    }
}
if { $is_gdbserver == -1 } {
    return -1
}

# Now disassemble (IOW, read from read-only memory) while inspecting a
# trace frame, twice.  Once with qXfer:traceframe-info:read left to
# auto, and once with it disabled, exercising the QTro fallback path
# in the stub side.
foreach tfinfo { auto off } {
    with_test_prefix "qXfer:traceframe-info:read $tfinfo" {

	clean_restart $testfile
	runto_main
	gdb_test_no_output "set remote traceframe-info-packet $tfinfo"

	prepare_for_trace_disassembly

	set test "trace disassembly"
	gdb_test_multiple "disassemble subr" $test {
	    -re "<(\.\[0-9\]+|)>:.*End of assembler dump.*$gdb_prompt $" {
		pass $test
	    }
	    -re "Cannot access memory.*$gdb_prompt $" {
		if { $traceframe_info_supported == 0 } {
		    # If qXfer:traceframe-info:read is not supported,
		    # then there should be QTro support.
		    fail $test
		} elseif { $tfinfo == off && $is_gdbserver == 1 } {
		    # We we're testing with GDBserver, we know both
		    # qXfer:traceframe-info:read and QTro are
		    # supported (although supporting the former only
		    # would be sufficient), so issue a FAIL instead of
		    # UNSUPPORTED, giving us better visibility of QTro
		    # regressions.
		    fail $test
		} else {
		    # Otherwise, qXfer:traceframe-info:read is
		    # supported, making QTro optional, so this isn't
		    # really a failure.
		    unsupported "$test (no QTro support)"
		}
	    }
	}
    }
}
@

