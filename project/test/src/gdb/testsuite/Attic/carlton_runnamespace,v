head	1.1;
access;
symbols
	carlton_dictionary-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2002.11.15.01.10.43;	author carlton;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.11.15.01.10.43;	author carlton;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.11.22.01.16.14;	author carlton;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.11.24.18.47.19;	author carlton;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.11.28.00.53.25;	author carlton;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2003.05.16.16.10.53;	author carlton;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2003.08.30.03.40.33;	author chastain;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2003.09.13.00.33.37;	author carlton;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file carlton_runnamespace was initially added on branch carlton_dictionary-branch.
@
text
@@


1.1.2.1
log
@2002-11-14  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (symtab.o): Depend on gdb_assert_h.
	* symtab.c: #include "gdb_assert.h"
	* Makefile.in (namespace): Add 'namespace' target.
	* buildsym.c (finish_block): Comment out the using declarations
	generation.
	* block.h: Make argument to block_scope const.
	* block.c (block_scope): Make argument const.
	* symtab.c (lookup_symbol_aux_using): Gather usings via
	block_all_usings.
	(lookup_symbol_namespace): Rename from
	lookup_symbol_aux_using_loop.
	(lookup_symbol_aux_using_loop): New function.
	* block.h: Declare block_all_usings.
	* block.c (block_all_usings): New function.
	* symtab.c (lookup_symbol_aux_nonlocal): Delete FIXME comment.
	* buildsym.c (finish_block): Add FIXME comment.

2002-11-14  David Carlton  <carlton@@math.stanford.edu>

	* carlton_runnamespace: New file.
@
text
@a0 6
#!/bin/bash

# Just run the namespace test.

runtest namespace.exp 2>&1 | grep -v "^Test Run By" > /tmp/namespaceout
diff -u {carlton_,/tmp/}namespaceout
@


1.1.2.2
log
@2002-11-21  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c (get_namespace_objfile): Set
	namespace_objfile->name.
	* dwarf2read.c (scan_partial_symbols): Allow empty pdi.name if
	we're reading a namespace.
	* Makefile.in (dwarf2read.o): Depend on cp_support_h.
	* dwarf2read.c (scan_partial_symbols): Add 'namespace' arg.
	(dwarf2_build_psymtabs_hard): Update call to
	scan_partial_symbols.
	(add_partial_namespace): New function.
	(scan_partial_symbols): Call add_partial_namespace.
	#include "cp-support.h"
	* cp-support.c: Add me to contributors.
	* cp-support.h: Ditto.
	* buildsym.c (scan_for_anonymous_namespaces): Convert for loop
	into a clearer while loop.
	(finish_block): Ditto.
@
text
@d3 1
a3 4
# Just run the namespace test.  But run it using multiple compilers:
# the regular one, and one which generates more namespace debugging
# info.  Maybe eventually I should run this on one which generates
# stabs info, too?
a4 3
EXTRACOMPPATH=/usr/local/testbed/gcc3/bin

echo "Running tests using regular compiler."
a6 5
echo "Running tests using compiler with extra debug info."
PATH=${EXTRACOMPPATH}:${PATH} runtest namespace.exp 2>&1 | grep -v "^Test Run By" > /tmp/namespaceout
diff -u {carlton_,/tmp/}namespaceout

echo "Done."
@


1.1.2.3
log
@2002-11-24  David Carlton  <carlton@@bactrian.org>

	* Makefile.in (c-typeprint.o): Depend on gdb_assert_h.
	* c-typeprint.c: #include "gdb_assert.h"
	* gdbtypes.c (recursive_dump_type): Handle TYPE_CODE_NAMESPACE.
	* c-typeprint.c (c_type_print_varspec_prefix): Ditto.
	(c_type_print_varspec_suffix): Ditto.
	(c_type_print_base): Ditto.
	* typeprint.c (print_type_scalar): Ditto.
	* printcmd.c (print_formatted): Ditto.
	* language.c (structured_type): Ditto.
	* cp-support.c (cp_check_namespace_symbol): Allocate type via
	init_type.
	* gdbtypes.c (init_type): Handle TYPE_CODE_NAMESPACE.
	* valops.c (value_namespace_elt): Handle sym == NULL.

2002-11-24  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/namespace.exp: Eliminate some of the single quotes, and
	duplicate some of the single quote tests without the quotes.
	Change "print E::ce" test.
	Add some ptype <namespace> tests.
	* carlton_runnamespace: Use different files for compiler with and
	without debug info.
@
text
@d8 1
a8 1
EXTRADEBUGPATH=/usr/local/testbed/gcc3/bin
d11 1
a11 1
runtest gdb.c++/namespace.exp 2>&1 | grep -v "^Test Run By" > /tmp/namespaceout
d14 2
a15 2
PATH=${EXTRADEBUGPATH}:${PATH} runtest gdb.c++/namespace.exp 2>&1 | grep -v "^Test Run By" > /tmp/namespacedebugout
diff -u {carlton_,/tmp/}namespacedebugout
@


1.1.2.4
log
@2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (add_partial_enumeration): New function.
	(scan_partial_symbols): Call add_partial_enumeration.
	(locate_pdi_sibling): New function.
	(scan_partial_symbols): Call locate_pdi_sibling.  Get rid of
	nesting_level.
	(pdi_needs_namespace): New function.
	(add_partial_symbol): Add 'namespace' arg; calculate full name
	when appropriate.
	(scan_partial_symbols): Update calls to add_partial_symbol.
	(add_partial_enumeration): Ditto.
	(read_enumeration): Add processing_current_prefix to name when
	appropriate.
	(new_symbol): Set names of enumerators and typedefs appropriately
	if processing_has_namespace_info.
	* symtab.c (lookup_symbol_namespace): Rename 'namespace' argument
	to 'namespace_name'.
	* symtab.h: Ditto.
	* symtab.c (lookup_symbol_namespace): Delete FIXME comments; add a
	new one.
	(lookup_symbol_aux_file): New function.
	(lookup_symbol_aux): Delete FIXME comment.
	(lookup_symbol_aux): Don't search static block explicitly; delete
	FIXME comments.
	* valops.c (value_namespace_elt): Update call to
	lookup_symbol_namespace.
	* symtab.h: Update declaration for lookup_symbol_namespace.
	* symtab.c (lookup_symbol_namespace): Delete 'using' argument and
	add 'block' argument; get using directives via iterators.
	(lookup_symbol_aux_using_loop): Delete 'using' argument and add
	'block' argument.
	(lookup_symbol_aux_using): Don't calculate using directives.
	* block.c (block_using_iterator_first): New function.
	(block_using_iterator_next): Ditto.
	* block.h: Add comment.
	(struct block_using_iterator): New struct.
	Declare block_using_iterator_first, block_using_iterator_next.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (read_structure_scope): Set type name and
	processing_current_prefix appropriately.
	(new_symbol): Make sure that, in symbols associated to class
	types, the name includes appropriate namespaces.
	* buildsym.h: Rename processing_current_namespace to
	processing_current_prefix.
	* buildsym.c (finish_block): Ditto.
	* dwarf2read.c (psymtab_to_symtab_1): Ditto.
	(read_namespace): Ditto.  Also rename previous_namespace to
	previous_prefix.

	Now come a thousand and one const correctness fixes:
	* p-typeprint.c (pascal_print_type): Const.
	(pascal_type_print_method_args): Const.
	* p-lang.h: Const.
	* m2-typeprint.c (m2_print_type): Const.
	* valops.c (hand_function_call): Const.
	* jv-lang.c (java_primitive_type_from_name): Const.
	* jv-lang.h: Const.
	* jv-typeprint.c (java_print_type): Const.
	* language.c: (unk_lang_print_type): Const.
	* stack.c (frame_info): Const.
	* linespec.c (find_methods): Const.
	(find_method_name): Const
	* f-lang.h: Const.
	* f-typeprint.c (f_print_type): Const.
	* c-typeprint.c (c_print_type): Const.
	* c-lang.h: Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (lookup_primitive_typename): Const.
	* stack.c (print_frame): Const.
	(func_command): Delete pointless cast.
	* linespec.c (find_method_name): Const.
	* language.h: Const.
	* symfile.c (compare_psymbols): Const.
	* symtab.c (completion_list_add_name): Const.
	* breakpoint.c (break_at_finish_at_depth_command_1): Remove
	useless cast.
	(break_at_finish_command_1): Ditto.
	* typeprint.c (type_print): Const.
	* symtab.h: Const.
	* symtab.c (gdb_mangle_name): Const.
	(symbol_init_demangled_name): Const.
	(symbol_demangled_name): Const.
	* defs.h: Const.
	* printcmd.c (build_address_symbolic): Const.
	* valops.c (search_struct_method): Const.
	* cp-valprint.c (cp_is_vtbl_ptr_type): Const.
	(cp_print_value): Const.
	(cp_print_class_member): Const.
	* c-typeprint.c (cp_type_print_derivation_info): Const.
	(c_type_print_varspec_prefix): Const.
	(c_type_print_base): Const.
	* p-valprint.c (pascal_object_is_vtbl_ptr_type): Const.
	(pascal_object_print_value): Const.
	(pascal_object_print_class_member): Const.
	* p-typeprint.c (pascal_type_print_derivation_info): Const.
	(pascal_type_print_varspec_prefix): Const.
	(pascal_type_print_base): Const.
	* jv-typeprint.c (java_type_print_base): Const.
	* jv-lang.h (java_demangle_type_signature): Const.
	* jv-lang.c (java_demangle_type_signature): Const.
	(java_demangled_signature_length): Const.
	(java_demangled_signature_copy): Const.
	* jv-typeprint.c (java_type_print_derivation_info): Const.
	* jv-valprint.c (java_value_print): Const.
	(java_print_value_fields): Const.
	* jv-lang.c (is_object_type): Const.
	(evaluate_subexp_java): Const.
	* stabsread.c (read_cpp_abbrev): Const.
	(complain_about_struct_wipeout): Const.
	(cleanup_undefined_types): Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (add_name): Second arg const.
	(lookup_typename): Const.
	(lookup_unsigned_typename): Const.
	(lookup_signed_typename): Const.
	* linespec.c (find_methods): const char *class_name.
	* symtab.c (gdb_mangle_name): const char *newname.
	* valops.c (destructor_name_p): const char *dname.
	(search_struct_field): First arg const.
	* gdbtypes.c (check_typedef): const char *name (multiple places).
	(cfront_mangle_name): const char *newname.
	* gdbtypes.c (add_mangled_type): const char *tname.
	* valops.c (find_overload_match): const char *obj_type_name.
	* utils.c (gdb_print_host_address): Make first arg const.
	* defs.h: Declare first arg of gdb_print_host_address to be
	const.
	* valarith.c (find_size_for_pointer_math): const char *name.

2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc (main): Add marker comment.
	* gdb.c++/m-data.exp: Use marker comment instead of line numbers.
	* gdb.c++/m-data.cc: Delete superfluous namespace.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/m-static1.cc: Ditto.
	* carlton_runtest: Compare based on gdb.sum, not based on output.
	* carlton_runnamespace: Ditto.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Put tests for CClass.
	* gdb.c++/namespace.cc (C): Add CClass.
@
text
@d11 1
a11 2
runtest gdb.c++/namespace.exp > /dev/null 2>&1
grep -v "^Test Run By" gdb.sum > /tmp/namespaceout
d14 1
a14 2
PATH=${EXTRADEBUGPATH}:${PATH} runtest gdb.c++/namespace.exp > /dev/null 2>&1
grep -v "^Test Run By" gdb.sum > /tmp/namespacedebugout
@


1.1.2.5
log
@2003-05-16  David Carlton  <carlton@@bactrian.org>

	* carlton_runnamespace: Run gdb.c++/rtti.exp, too.
	* carlton_runtest (FASTTESTS): Add gdb.c++/breakpoint.exp and
	gdb.c++/rtti.exp.
	* gdb.c++/breakpoint.exp (test_breakpoint): Run to main for every
	breakpoint.
	* gdb.c++/rtti.exp: Add more KFAIL branches.
@
text
@a8 1
TESTS="gdb.c++/namespace.exp gdb.c++/rtti.exp"
d11 1
a11 1
runtest ${TESTS} > /dev/null 2>&1
d15 1
a15 1
PATH=${EXTRADEBUGPATH}:${PATH} runtest ${TESTS} > /dev/null 2>&1
@


1.1.2.6
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* carlton_runnamespace: Ditto.
	* carlton_runtest: Ditto.
	* configure: Regnerate.
@
text
@d9 1
a9 1
TESTS="gdb.cpnamespace.exp gdb.cp/rtti.exp"
@


1.1.2.7
log
@2003-09-12  David Carlton  <carlton@@kealia.com>

	* carlton_runnamespace (TESTS): Fix typo in gdb.c++->gdb.cp
	transition.
@
text
@d9 1
a9 1
TESTS="gdb.cp/namespace.exp gdb.cp/rtti.exp"
@


