head	1.12;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.11
	gdb_7_6-2013-04-26-release:1.11
	gdb_7_6-branch:1.11.0.2
	gdb_7_6-2013-03-12-branchpoint:1.11
	gdb_7_5_1-2012-11-29-release:1.10
	gdb_7_5-2012-08-17-release:1.10
	gdb_7_5-branch:1.10.0.2
	gdb_7_5-2012-07-18-branchpoint:1.10
	gdb_7_4_1-2012-04-26-release:1.9.2.1
	gdb_7_4-2012-01-24-release:1.9.2.1
	gdb_7_4-branch:1.9.0.2
	gdb_7_4-2011-12-13-branchpoint:1.9
	gdb_7_3_1-2011-09-04-release:1.7
	gdb_7_3-2011-07-26-release:1.7
	gdb_7_3-branch:1.7.0.2
	gdb_7_3-2011-04-01-branchpoint:1.7
	gdb_7_2-2010-09-02-release:1.5
	gdb_7_2-branch:1.5.0.2
	gdb_7_2-2010-07-07-branchpoint:1.5
	gdb_7_1-2010-03-18-release:1.4
	gdb_7_1-branch:1.4.0.2
	gdb_7_1-2010-02-18-branchpoint:1.4
	gdb_7_0_1-2009-12-22-release:1.3
	gdb_7_0-2009-10-06-release:1.3
	gdb_7_0-branch:1.3.0.4
	gdb_7_0-2009-09-16-branchpoint:1.3
	msnyder-checkpoint-072509-branch:1.3.0.2
	msnyder-checkpoint-072509-branchpoint:1.3
	reverse-20081226-branch:1.1.0.10
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.8
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.6
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.4
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.2
	msnyder-reverse-20080609-branchpoint:1.1;
locks; strict;
comment	@# @;


1.12
date	2013.06.06.15.50.37;	author tromey;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.01.06.33.25;	author brobecke;	state Exp;
branches;
next	1.10;

1.10
date	2012.01.04.08.17.45;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2011.12.06.20.03.14;	author palves;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2011.08.03.21.17.09;	author philippe;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.01.15.33.40;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.02.15.07.14;	author kazu;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.01.21.29.21;	author msnyder;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.01.07.32.00;	author brobecke;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.01.19.31.52;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.03.05.58.03;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.24.10.21.45;	author vprus;	state Exp;
branches;
next	;

1.9.2.1
date	2012.01.06.04.43.59;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* gdb.base/break-always.exp: Explicitly specify test name.
@
text
@#   Copyright 2008-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that 'set breakpoint always-inserted 1' is not a brick
# Also verifies that breakpoint enabling/disabling works properly
# with duplicated breakpoints.

if { [prepare_for_testing break-always.exp break-always break-always.c] } {
    return -1
}

set bar_location [gdb_get_line_number "break in bar" break-always.c]

gdb_test_no_output "set breakpoint always-inserted on"

gdb_test "show breakpoint always-inserted" "mode is on\." \
    "confirm breakpoint always-inserted"

runto foo

gdb_test "break bar" "Breakpoint 2.*" "set breakpoint on bar"
gdb_test "break bar" "Note: breakpoint 2 also set.*Breakpoint 3.*" "set 2nd breakpoint on bar"
gdb_test "break bar" "Note: breakpoints 2 and 3 also set.*Breakpoint 4.*" "set 3rd breakpoint on bar"
gdb_test "break bar" "Note: breakpoints 2, 3 and 4 also set.*Breakpoint 5.*" "set 4th breakpoint on bar"
gdb_test "info breakpoints" "keep y.*keep y.*keep y.*keep y.*keep y.*" "initial check breakpoint state"
gdb_test_no_output "disable" "initial disable all breakpoints"
gdb_test_no_output "enable" "initial enable all breakpoints"
gdb_test_no_output "disable" "re-disable all breakpoints"
gdb_test_no_output "enable 3" "enable 3.A"
gdb_test_no_output "disable 3" "disable 3.B"
gdb_test_no_output "enable 3" "enable 3.C"
gdb_test_no_output "enable 2" "enable 2.D"
gdb_test_no_output "disable 2" "disable 2.E"
gdb_test_no_output "disable 3" "disable 3.F"
gdb_test_no_output "enable 3" "enable 3.G"
gdb_test_no_output "enable 2" "enable 2.H"
gdb_test_no_output "disable 2" "disable 2.I"
gdb_test "info breakpoints" "keep n.*keep n.*keep y.*keep n.*keep n.*" "before re-enable check breakpoint state"
gdb_test_no_output "enable" "re-enable all breakpoints"

set bp_address 0
set test "set breakpoint on bar 2"
gdb_test_multiple "break bar" $test {
    -re "Breakpoint 6 at ($hex).*$gdb_prompt $" {
	set bp_address $expect_out(1,string)
	pass $test
    }
}

# Save the original INSN under the breakpoint.
gdb_test "p /x \$shadow = *(char *) $bp_address" \
    " = $hex" \
    "save shadow"

# Overwrite memory where the breakpoint is planted.  GDB should update
# its memory breakpoint's shadows, to account for the new contents,
# and still leave the breakpoint insn planted.  Try twice with
# different values, in case we happen to be writting exactly what was
# there already.
gdb_test "p /x *(char *) $bp_address = 0" \
    " = 0x0" \
    "write 0 to breakpoint's address"
gdb_test "p /x *(char *) $bp_address" \
    " = 0x0" \
    "read back 0 from the breakpoint's address"

gdb_test "p /x *(char *) $bp_address = 1" \
    " = 0x1" \
    "write 1 to breakpoint's address"
gdb_test "p /x *(char *) $bp_address" \
    " = 0x1" \
    "read back 1 from the breakpoint's address"

# Restore the original contents.
gdb_test "p /x *(char *) $bp_address = \$shadow" "" \
    "restore the original contents"

# Run to breakpoint.
gdb_continue_to_breakpoint "bar" ".*break-always.c:$bar_location.*"
@


1.11
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d87 2
a88 1
gdb_test "p /x *(char *) $bp_address = \$shadow" ""
@


1.10
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
#   Copyright 2008-2012 Free Software Foundation, Inc.
@


1.9
log
@2011-12-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* breakpoint.c (breakpoint_restore_shadows): Rename to ...
	(breakpoint_xfer_memory): ... this.  Change prototype.  Handle
	memory writes too.
	* breakpoint.h (breakpoint_restore_shadows): Delete.
	(breakpoint_xfer_memory): Declare.
	* mem-break.c (default_memory_insert_breakpoint)
	(default_memory_remove_breakpoint): Use target_write_raw_memory.
	(memory_xfer_partial): Rename to ...
	(memory_xfer_partial_1): ... this.  Don't mask out breakpoints
	here.
	(memory_xfer_partial): New.
	(target_write_raw_memory): New.
	* target.h (target_write_raw_memory): New.

	gdb/testsuite/
	* gdb.base/break-always.exp: Test changing memory at addresses
	with breakpoints inserted.
@
text
@d1 1
a1 1
#   Copyright 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.9.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
#   Copyright 2008-2012 Free Software Foundation, Inc.
@


1.8
log
@2011-08-03  Philippe Waroquiers  <philippe.waroquiers@@skynet.be>

	* breakpoint.c (update_global_location_list): Ensure
	invariant 'first loc marked not duplicated and inserted,
	following locs marked duplicated/not inserted' is respected
	for multiple locations at the same address.
	(unduplicated_should_be_inserted) New function.
	(swap_insertion) New function.

2011-08-03  Philippe Waroquiers  <philippe.waroquiers@@skynet.be>

	* gdb.base/break-always.exp: Complete the test
	with duplicated breakpoints and enabling/disabling them.
@
text
@a51 1
gdb_continue_to_breakpoint "bar" ".*break-always.c:$bar_location.*"
d53 32
d86 2
d89 2
@


1.7
log
@run copyright.sh for 2011.
@
text
@d17 2
d34 18
@


1.6
log
@	* gdb.base/break-always.exp: Do not expect full paths to file
	names.
	* gdb.base/commands.exp: Likewise.
@
text
@d1 1
a1 1
#   Copyright 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.5
log
@2010-06-01  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/arithmet.exp: Use gdb_test_no_output.
	* gdb.base/arrayidx.exp: Ditto.
	* gdb.base/attach.exp: Ditto.
	* gdb.base/auxv.exp: Ditto.
	* gdb.base/bigcre.exp: Ditto.
	* gdb.base/break-always.exp: Ditto.
	* gdb.base/break-interp.exp: Ditto.
	* gdb.base/break.exp: Ditto.
	* gdb.base/breakpoint-shadow.exp: Ditto.
	* gdb.base/call-ar-st.exp: Ditto.
	* gdb.base/call-sc.exp: Ditto.
	* gdb.base/call-signal-resume.exp: Ditto.
	* gdb.base/callfuncs.exp: Ditto.
	* gdb.base/catch-syscall.exp: Ditto.
	* gdb.base/charset.exp: Ditto.
	* gdb.base/code-expr.exp: Ditto.
	* gdb.base/commands.exp: Ditto.
	* gdb.base/cond-expr.exp: Ditto.
	* gdb.base/condbreak.exp: Ditto.
	* gdb.base/cursal.exp: Ditto.
	* gdb.base/cvexpr.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* gdb.base/del.exp: Ditto.
	* gdb.base/detach.exp: Ditto.
	* gdb.base/display.exp: Ditto.
	* gdb.base/ena-dis-br.exp: Ditto.
	* gdb.base/eval-skip.exp: Ditto.
	* gdb.base/foll-fork.exp: Ditto.
	* gdb.base/foll-vfork.exp: Ditto.
	* gdb.base/frame-args.exp: Ditto.
	* gdb.base/funcargs.exp: Ditto.
	* gdb.base/gcore-buffer-overflow.exp: Ditto.
	* gdb.base/gdbvars.exp: Ditto.
	* gdb.base/help.exp: Ditto.
	* gdb.base/ifelse.exp: Ditto.
	* gdb.base/included.exp: Ditto.
	* gdb.base/list.exp: Ditto.
	* gdb.base/macscp.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/multi-fork.exp: Ditto.
	* gdb.base/overlays.exp: Ditto.
	* gdb.base/page.exp: Ditto.
	* gdb.base/pending.exp: Ditto.
	* gdb.base/pointers.exp: Ditto.
	* gdb.base/pr11022.exp: Ditto.
	* gdb.base/prelink.exp: Ditto.
	* gdb.base/printcmds.exp: Ditto.
	* gdb.base/psymtab.exp: Ditto.
	* gdb.base/randomize.exp: Ditto.
	* gdb.base/relational.exp: Ditto.
	* gdb.base/relocate.exp: Ditto.
	* gdb.base/remote.exp: Ditto.
	* gdb.base/sepdebug.exp: Ditto.
	* gdb.base/set-lang-auto.exp: Ditto.
	* gdb.base/setshow.exp: Ditto.
	* gdb.base/setvar.exp: Ditto.
	* gdb.base/signals.exp: Ditto.
	* gdb.base/signull.exp: Ditto.
	* gdb.base/sigstep.exp: Ditto.
	* gdb.base/sizeof.exp: Ditto.
	* gdb.base/solib-disc.exp: Ditto.
	* gdb.base/store.exp: Ditto.
	* gdb.base/structs.exp: Ditto.
	* gdb.base/structs2.exp: Ditto.
	* gdb.base/subst.exp: Ditto.
	* gdb.base/term.exp: Ditto.
	* gdb.base/trace-commands.exp: Ditto.
	* gdb.base/unwindonsignal.exp: Ditto.
	* gdb.base/valgrind-db-attach.exp: Ditto.
	* gdb.base/varargs.exp: Ditto.
	* gdb.base/watch-cond.exp: Ditto.
	* gdb.base/watch_thread_num.exp: Ditto.
	* gdb.base/watchpoint-cond-gone.exp: Ditto.
	* gdb.base/watchpoint.exp: Ditto.
	* gdb.base/whatis-exp.exp: Ditto.
@
text
@d32 1
a32 1
gdb_continue_to_breakpoint "bar" ".*/break-always.c:$bar_location.*"
@


1.4
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d24 1
a24 1
gdb_test "set breakpoint always-inserted on" ""
@


1.3
log
@2009-05-29  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/break-always.exp: Change "1" to "on".
	Add confirmation check.
@
text
@d1 1
a1 1
#   Copyright 2008, 2009 Free Software Foundation, Inc.
@


1.2
log
@        Updated copyright notices for most files.
@
text
@d24 4
a27 1
gdb_test "set breakpoint always-inserted 1" ""
@


1.1
log
@	* breakpoint.h (bp_location_p): New typedef.
	Register a vector of bp_location_p.
	* breakpoint.c (always_inserted_mode)
	(show_always_inserted_mode): New.
	(unlink_locations_from_global_list): Remove.
	(update_global_location_list)
	(update_global_location_list_nothrow): New.
	(update_watchpoint): Don't free locations.
	(should_insert_location): New.
	(insert_bp_location): Use should_insert_location.
	(insert_breakpoint_locations): Copied from
	insert_breakpoints.
	(insert_breakpoint): Use insert_breakpoint_locations.
	(bpstat_stop_status): Call update_global_location_list
	when disabling breakpoint.
	(allocate_bp_location): Don't add to bp_location_chain.
	(set_raw_breakpoint)
	(create_longjmp_breakpoint, enable_longjmp_breakpoint)
	(disable_longjmp_breakpoint, create_overlay_event_breakpoint)
	(enable_overlay_breakpoints, disable_overlay_breakpoints)
	(set_longjmp_resume_breakpoint)
	(enable_watchpoints_after_interactive_call_stop)
	(disable_watchpoints_before_interactive_call_start)
	(create_internal_breakpoint)
	(create_fork_vfork_event_catchpoint)
	(create_exec_event_catchpoint, set_momentary_breakpoint)
	(create_breakpoints, break_command_1, watch_command_1)
	(create_exception_catchpoint)
	(handle_gnu_v3_exceptions)
	(disable_breakpoint, breakpoint_re_set_one)
	(create_thread_event_breakpoint, create_solib_event_breakpoint)
	(create_ada_exception_breakpoint): : Don't call check_duplicates.
	Call update_global_location_list.
	(delete_breakpoint): Don't remove locations and don't
	try to reinsert them. Call update_global_location_list.
	(update_breakpoint_locations): Likewise.
	(restore_always_inserted_mode): New.
	(update_breakpoints_after_exec): Temporary disable
	always inserted mode.
	* Makefile.in: Update dependencies.

	* infrun.c (proceed): Remove breakpoints while stepping
	over breakpoint.
	(handle_inferior_event): Don't remove or insert
	breakpoints.
	* linux-fork.c (checkpoint_command): Remove breakpoints
	before fork and insert after.
	(linux_fork_context): Remove breakpoints before switch
	and insert after.
	* target.c (target_disconnect, target_detach): Remove
	breakpoints from target.
@
text
@d1 1
a1 1
#   Copyright 2008 Free Software Foundation, Inc.
@

