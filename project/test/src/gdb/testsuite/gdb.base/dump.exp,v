head	1.31;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.28
	gdb_7_6-2013-04-26-release:1.28
	gdb_7_6-branch:1.28.0.2
	gdb_7_6-2013-03-12-branchpoint:1.28
	gdb_7_5_1-2012-11-29-release:1.27
	gdb_7_5-2012-08-17-release:1.27
	gdb_7_5-branch:1.27.0.2
	gdb_7_5-2012-07-18-branchpoint:1.27
	gdb_7_4_1-2012-04-26-release:1.25.2.1
	gdb_7_4-2012-01-24-release:1.25.2.1
	gdb_7_4-branch:1.25.0.2
	gdb_7_4-2011-12-13-branchpoint:1.25
	gdb_7_3_1-2011-09-04-release:1.24
	gdb_7_3-2011-07-26-release:1.24
	gdb_7_3-branch:1.24.0.2
	gdb_7_3-2011-04-01-branchpoint:1.24
	gdb_7_2-2010-09-02-release:1.23
	gdb_7_2-branch:1.23.0.2
	gdb_7_2-2010-07-07-branchpoint:1.23
	gdb_7_1-2010-03-18-release:1.19
	gdb_7_1-branch:1.19.0.2
	gdb_7_1-2010-02-18-branchpoint:1.19
	gdb_7_0_1-2009-12-22-release:1.17.4.1
	gdb_7_0-2009-10-06-release:1.17.4.1
	gdb_7_0-branch:1.17.0.4
	gdb_7_0-2009-09-16-branchpoint:1.17
	arc-sim-20090309:1.13
	msnyder-checkpoint-072509-branch:1.17.0.2
	msnyder-checkpoint-072509-branchpoint:1.17
	arc-insight_6_8-branch:1.13.0.10
	arc-insight_6_8-branchpoint:1.13
	insight_6_8-branch:1.13.0.8
	insight_6_8-branchpoint:1.13
	reverse-20081226-branch:1.14.0.6
	reverse-20081226-branchpoint:1.14
	multiprocess-20081120-branch:1.14.0.4
	multiprocess-20081120-branchpoint:1.14
	reverse-20080930-branch:1.14.0.2
	reverse-20080930-branchpoint:1.14
	reverse-20080717-branch:1.13.0.6
	reverse-20080717-branchpoint:1.13
	msnyder-reverse-20080609-branch:1.13.0.4
	msnyder-reverse-20080609-branchpoint:1.13
	drow-reverse-20070409-branch:1.10.0.2
	drow-reverse-20070409-branchpoint:1.10
	gdb_6_8-2008-03-27-release:1.13
	gdb_6_8-branch:1.13.0.2
	gdb_6_8-2008-02-26-branchpoint:1.13
	gdb_6_7_1-2007-10-29-release:1.12
	gdb_6_7-2007-10-10-release:1.12
	gdb_6_7-branch:1.12.0.2
	gdb_6_7-2007-09-07-branchpoint:1.12
	insight_6_6-20070208-release:1.9
	gdb_6_6-2006-12-18-release:1.9
	gdb_6_6-branch:1.9.0.2
	gdb_6_6-2006-11-15-branchpoint:1.9
	insight_6_5-20061003-release:1.8
	gdb-csl-symbian-6_4_50_20060226-12:1.8
	gdb-csl-sourcerygxx-3_4_4-25:1.7
	nickrob-async-20060828-mergepoint:1.9
	gdb-csl-symbian-6_4_50_20060226-11:1.8
	gdb-csl-sourcerygxx-4_1-17:1.8
	gdb-csl-20060226-branch-local-2:1.8
	gdb-csl-sourcerygxx-4_1-14:1.8
	gdb-csl-sourcerygxx-4_1-13:1.8
	gdb-csl-sourcerygxx-4_1-12:1.8
	gdb-csl-sourcerygxx-3_4_4-21:1.8
	gdb_6_5-20060621-release:1.8
	gdb-csl-sourcerygxx-4_1-9:1.8
	gdb-csl-sourcerygxx-4_1-8:1.8
	gdb-csl-sourcerygxx-4_1-7:1.8
	gdb-csl-arm-2006q1-6:1.8
	gdb-csl-sourcerygxx-4_1-6:1.8
	gdb-csl-symbian-6_4_50_20060226-10:1.8
	gdb-csl-symbian-6_4_50_20060226-9:1.8
	gdb-csl-symbian-6_4_50_20060226-8:1.8
	gdb-csl-coldfire-4_1-11:1.8
	gdb-csl-sourcerygxx-3_4_4-19:1.8
	gdb-csl-coldfire-4_1-10:1.8
	gdb_6_5-branch:1.8.0.16
	gdb_6_5-2006-05-14-branchpoint:1.8
	gdb-csl-sourcerygxx-4_1-5:1.8
	nickrob-async-20060513-branch:1.8.0.14
	nickrob-async-20060513-branchpoint:1.8
	gdb-csl-sourcerygxx-4_1-4:1.8
	msnyder-reverse-20060502-branch:1.8.0.12
	msnyder-reverse-20060502-branchpoint:1.8
	gdb-csl-morpho-4_1-4:1.8
	gdb-csl-sourcerygxx-3_4_4-17:1.8
	readline_5_1-import-branch:1.8.0.10
	readline_5_1-import-branchpoint:1.8
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.8
	gdb-csl-symbian-20060226-branch:1.8.0.8
	gdb-csl-symbian-20060226-branchpoint:1.8
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.8
	msnyder-reverse-20060331-branch:1.8.0.6
	msnyder-reverse-20060331-branchpoint:1.8
	gdb-csl-available-20060303-branch:1.8.0.4
	gdb-csl-available-20060303-branchpoint:1.8
	gdb-csl-20060226-branch:1.8.0.2
	gdb-csl-20060226-branchpoint:1.8
	gdb_6_4-20051202-release:1.7
	msnyder-fork-checkpoint-branch:1.7.0.12
	msnyder-fork-checkpoint-branchpoint:1.7
	gdb-csl-gxxpro-6_3-branch:1.7.0.10
	gdb-csl-gxxpro-6_3-branchpoint:1.7
	gdb_6_4-branch:1.7.0.8
	gdb_6_4-2005-11-01-branchpoint:1.7
	gdb-csl-arm-20051020-branch:1.7.0.6
	gdb-csl-arm-20051020-branchpoint:1.7
	gdb-csl-arm-20050325-2005-q1b:1.7
	gdb-csl-arm-20050325-2005-q1a:1.7
	csl-arm-20050325-branch:1.7.0.4
	csl-arm-20050325-branchpoint:1.7
	gdb-post-i18n-errorwarning-20050211:1.7
	gdb-pre-i18n-errorwarning-20050211:1.7
	gdb_6_3-20041109-release:1.7
	gdb_6_3-branch:1.7.0.2
	gdb_6_3-20041019-branchpoint:1.7
	drow_intercu-merge-20040921:1.7
	drow_intercu-merge-20040915:1.7
	jimb-gdb_6_2-e500-branch:1.6.0.14
	jimb-gdb_6_2-e500-branchpoint:1.6
	gdb_6_2-20040730-release:1.6
	gdb_6_2-branch:1.6.0.10
	gdb_6_2-2004-07-10-gmt-branchpoint:1.6
	gdb_6_1_1-20040616-release:1.6
	gdb_6_1-2004-04-05-release:1.6
	drow_intercu-merge-20040402:1.6
	drow_intercu-merge-20040327:1.6
	ezannoni_pie-20040323-branch:1.6.0.8
	ezannoni_pie-20040323-branchpoint:1.6
	cagney_tramp-20040321-mergepoint:1.6
	cagney_tramp-20040309-branch:1.6.0.6
	cagney_tramp-20040309-branchpoint:1.6
	gdb_6_1-branch:1.6.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.6
	drow_intercu-20040221-branch:1.6.0.2
	drow_intercu-20040221-branchpoint:1.6
	cagney_bfdfile-20040213-branch:1.5.0.2
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.6
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.3
	kettenis_sparc-20030918-branch:1.4.0.4
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.2
	cagney_x86i386-20030821-branch:1.3.0.8
	cagney_x86i386-20030821-branchpoint:1.3
	carlton_dictionary-20030805-merge:1.3
	carlton_dictionary-20030627-merge:1.3
	gdb_6_0-branch:1.3.0.6
	gdb_6_0-2003-06-23-branchpoint:1.3
	jimb-ppc64-linux-20030613-branch:1.3.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.3
	cagney_convert-20030606-branch:1.3.0.2
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.2.0.24
	cagney_writestrings-20030508-branchpoint:1.2
	jimb-ppc64-linux-20030528-branch:1.2.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.2
	carlton_dictionary-20030523-merge:1.2
	cagney_fileio-20030521-branch:1.2.0.20
	cagney_fileio-20030521-branchpoint:1.2
	kettenis_i386newframe-20030517-mergepoint:1.2
	jimb-ppc64-linux-20030509-branch:1.2.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.2
	kettenis_i386newframe-20030504-mergepoint:1.2
	carlton_dictionary-20030430-merge:1.2
	kettenis_i386newframe-20030419-branch:1.2.0.16
	kettenis_i386newframe-20030419-branchpoint:1.2
	carlton_dictionary-20030416-merge:1.2
	cagney_frameaddr-20030409-mergepoint:1.2
	kettenis_i386newframe-20030406-branch:1.2.0.14
	kettenis_i386newframe-20030406-branchpoint:1.2
	cagney_frameaddr-20030403-branchpoint:1.2
	cagney_frameaddr-20030403-branch:1.2.0.12
	cagney_framebase-20030330-mergepoint:1.2
	cagney_framebase-20030326-branch:1.2.0.10
	cagney_framebase-20030326-branchpoint:1.2
	cagney_lazyid-20030317-branch:1.2.0.8
	cagney_lazyid-20030317-branchpoint:1.2
	kettenis-i386newframe-20030316-mergepoint:1.2
	offbyone-20030313-branch:1.2.0.6
	offbyone-20030313-branchpoint:1.2
	kettenis-i386newframe-20030308-branch:1.2.0.4
	kettenis-i386newframe-20030308-branchpoint:1.2
	carlton_dictionary-20030305-merge:1.2
	cagney_offbyone-20030303-branch:1.2.0.2
	cagney_offbyone-20030303-branchpoint:1.2
	carlton_dictionary-20030207-merge:1.2
	interps-20030203-mergepoint:1.1
	interps-20030202-branch:1.1.0.20
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.18
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	gdb_5_3-2002-12-12-release:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.16
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.14
	carlton_dictionary-20020920-branchpoint:1.1
	gdb_5_3-branch:1.1.0.12
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.10
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.8
	readline_4_3-import-branchpoint:1.1
	kseitz_interps-20020528-branch:1.1.0.6
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.4
	cagney_regbuf-20020515-branchpoint:1.1
	jimb-macro-020506-branch:1.1.0.2
	jimb-macro-020506-branchpoint:1.1;
locks; strict;
comment	@# @;


1.31
date	2013.07.06.02.36.46;	author luisgpm;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.27.18.49.03;	author tromey;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.06.19.00.13;	author tromey;	state Exp;
branches;
next	1.28;

1.28
date	2013.01.01.06.33.25;	author brobecke;	state Exp;
branches;
next	1.27;

1.27
date	2012.01.16.16.21.44;	author palves;	state Exp;
branches;
next	1.26;

1.26
date	2012.01.04.08.17.45;	author brobecke;	state Exp;
branches;
next	1.25;

1.25
date	2011.07.01.16.42.42;	author qiyao;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2011.01.01.15.33.41;	author brobecke;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.10.19.48.19;	author msnyder;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.08.22.58.03;	author msnyder;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.24.22.06.59;	author msnyder;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.05.18.06.57;	author brobecke;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.01.07.32.00;	author brobecke;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.27.20.42.40;	author uweigand;	state Exp;
branches;
next	1.17;

1.17
date	2009.07.09.20.30.59;	author jkratoch;	state Exp;
branches
	1.17.4.1;
next	1.16;

1.16
date	2009.06.17.18.49.37;	author uweigand;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.03.05.58.03;	author brobecke;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.06.12.52.07;	author jkratoch;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.01.22.53.18;	author drow;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.23.18.14.16;	author brobecke;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.30.12.24.22;	author macro;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.09.17.59.11;	author drow;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.10.05.27.20;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.09.10.55.09;	author tausq;	state Exp;
branches
	1.8.14.1;
next	1.7;

1.7
date	2004.08.02.03.13.56;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.18.04.15.46;	author jimb;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2004.02.02.05.15.26;	author fnf;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.28.18.01.50;	author jjohnstn;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2003.06.02.15.51.24;	author rth;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.06.06.36.24;	author chastain;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.29.01.19.11;	author msnyder;	state Exp;
branches
	1.1.14.1
	1.1.16.1;
next	;

1.25.2.1
date	2012.01.06.04.44.00;	author brobecke;	state Exp;
branches;
next	;

1.17.4.1
date	2009.09.29.00.36.49;	author uweigand;	state Exp;
branches;
next	;

1.8.14.1
date	2006.08.28.07.48.42;	author nickrob;	state Exp;
branches;
next	;

1.6.2.1
date	2004.09.16.17.01.41;	author drow;	state Exp;
branches;
next	;

1.4.2.1
date	2004.03.23.20.12.32;	author ezannoni;	state Exp;
branches;
next	;

1.1.14.1
date	2003.02.07.19.17.59;	author carlton;	state Exp;
branches;
next	1.1.14.2;

1.1.14.2
date	2003.06.27.21.50.20;	author carlton;	state Exp;
branches;
next	1.1.14.3;

1.1.14.3
date	2003.09.17.21.28.50;	author carlton;	state Exp;
branches;
next	;

1.1.16.1
date	2003.12.14.20.27.47;	author drow;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2004.02.09.19.43.55;	author drow;	state Exp;
branches;
next	;


desc
@@


1.31
log
@	* gdb.base/dump.exp: Remove arch-specific tests and do a
	generic data address check to set is64bitonly correctly.
@
text
@# Copyright 2002-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Michael Snyder (msnyder@@redhat.com)
# This is a test for the gdb command "dump".


standard_testfile

set options  {debug}

set is64bitonly "no"
set endian "auto"

if [istarget "alpha*-*-*"] then {
    # SREC etc cannot handle 64-bit addresses.  Force the test
    # program into the low 31 bits of the address space.
    lappend options "additional_flags=-Wl,-taso"
}

if {[istarget "spu*-*-*"]} then {
    # The internal address format used for the combined Cell/B.E.
    # debugger requires 64-bit.
    set is64bitonly "yes"
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable ${options}] != "" } {
     untested dump.exp
     return -1
}

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir

gdb_test "dump mem /dev/null 0x10 0x20" "Cannot access memory at address 0x10" \
	 "inaccessible memory is reported"

gdb_load ${binfile}

# Check the address of a variable.  If it is bigger than 32-bit,
# assume our target has 64-bit addresses that are not supported by SREC,
# IHEX and TEKHEX.  We skip those tests then.
set max_32bit_address "0xffffffff"
set data_address [get_hexadecimal_valueof "&intarray" 0x100000000]
if {${data_address} > ${max_32bit_address}} then {
    set is64bitonly "yes"
}

# Clean up any stale output files from previous test runs

remote_exec build "rm -f intarr1.bin intarr1b.bin intarr1.ihex intarr1.srec intarr1.tekhex intarr2.bin intarr2b.bin intarr2.ihex intarr2.srec intarr2.tekhex intstr1.bin intstr1b.bin intstr1.ihex intstr1.srec intstr1.tekhex intstr2.bin intstr2b.bin intstr2.ihex intstr2.srec intstr2.tekhex intarr3.srec"

# Test help (FIXME:)

# Run target program until data structs are initialized.

if { ! [ runto checkpoint1 ] } then {
    untested dump.exp
    return -1
}

# Get the endianness for the later use with endianless formats.

gdb_test_multiple "show endian" "show endian" {
    -re ".* (big|little) endian.*$gdb_prompt $" { 
	set endian $expect_out(1,string) 
	pass "endianness: $endian"
    }
}

# Now generate some dump files.

proc make_dump_file { command msg } {
  global gdb_prompt

    gdb_test_multiple "${command}" "$msg" {
	-re ".*\[Ee\]rror.*$gdb_prompt $"      { fail $msg }
	-re ".*\[Ww\]arning.*$gdb_prompt $"    { fail $msg }
	-re ".*\[Uu\]ndefined .*$gdb_prompt $" { fail $msg }
	-re ".*$gdb_prompt $"                  { pass $msg }
    }
}

make_dump_file "dump val intarr1.bin intarray" \
	"dump array as value, default"

make_dump_file "dump val intstr1.bin intstruct" \
	"dump struct as value, default"

make_dump_file "dump bin val intarr1b.bin intarray" \
	"dump array as value, binary"

make_dump_file "dump bin val intstr1b.bin intstruct" \
	"dump struct as value, binary"

make_dump_file "dump srec val intarr1.srec intarray" \
	"dump array as value, srec"

make_dump_file "dump srec val intstr1.srec intstruct" \
	"dump struct as value, srec"

make_dump_file "dump ihex val intarr1.ihex intarray" \
	"dump array as value, intel hex"

make_dump_file "dump ihex val intstr1.ihex intstruct" \
	"dump struct as value, intel hex"

make_dump_file "dump tekhex val intarr1.tekhex intarray" \
	"dump array as value, tekhex"

make_dump_file "dump tekhex val intstr1.tekhex intstruct" \
	"dump struct as value, tekhex"

proc capture_value { expression args } {
    global gdb_prompt
    global expect_out

    set output_string ""
    if {[llength $args] > 0} {
	# Convert $args into a simple string and don't use EXPRESSION
	# in the test name.
	set test "[join $args]; capture"
    } {
	set test "capture $expression"
    }
    gdb_test_multiple "print ${expression}" "$test" {
	-re "\\$\[0-9\]+ = (\[^\r\n\]+).*$gdb_prompt $" {
	    set output_string "$expect_out(1,string)"
	    pass "$test"
	}
	-re "(Cannot access memory at address \[^\r\n\]+).*$gdb_prompt $" {
	    # Even a failed value is valid
	    set output_string "$expect_out(1,string)"
	    pass "$test"
	}
    }
    return $output_string
}

# POINTER is a pointer and this proc captures the value of POINTER along
# with POINTER's type.  For example, POINTER is "&intarray", this proc will
# call "p &intarray", capture "(int (*)[32]) 0x804a0e0", and return this
# string.

proc capture_pointer_with_type { pointer } {
    global gdb_prompt
    global expect_out

    set test "capture type of pointer $pointer"
    set output_string ""
    gdb_test_multiple "p ${pointer}" $test {
	-re "\\$\[0-9\]+ = .*$gdb_prompt $" {
	    # Expected output of "p ${pointer}" is like "$7 = (int (*)[32]) 0x804a0e0",
	    # and we want to extract "(int (*)[32]) 0x804a0e0" from it via
	    # following regexp.
	    if [regexp " \\(.*\\).* 0x\[0-9a-fA-F\]+" $expect_out(0,string) output_string] {
		# OUTPUT_STRING is expected to be like "(int (*)[32]) 0x804a0e0".
		pass "$test"
	    } else {
		fail "$test"
	    }
	}
    }

    return $output_string
}

set array_start  [capture_value "/x &intarray\[0\]"]
set array_end    [capture_value "/x &intarray\[32\]"]
set struct_start [capture_value "/x &intstruct"]
set struct_end   [capture_value "/x &intstruct + 1"]

set array_val    [capture_value "intarray"]
set struct_val   [capture_value "intstruct"]

set array_ptr_type [capture_pointer_with_type "&intarray"]
set struct_ptr_type [capture_pointer_with_type "&intstruct"]

make_dump_file "dump mem intarr2.bin $array_start $array_end" \
	"dump array as memory, default"

make_dump_file "dump  mem intstr2.bin $struct_start $struct_end" \
	"dump struct as memory, default"

make_dump_file "dump bin mem intarr2b.bin $array_start $array_end" \
	"dump array as memory, binary"

make_dump_file "dump bin mem intstr2b.bin $struct_start $struct_end" \
	"dump struct as memory, binary"

make_dump_file "dump srec mem intarr2.srec $array_start $array_end" \
	"dump array as memory, srec"

make_dump_file "dump srec mem intstr2.srec $struct_start $struct_end" \
	"dump struct as memory, srec"

make_dump_file "dump ihex mem intarr2.ihex $array_start $array_end" \
	"dump array as memory, ihex"

make_dump_file "dump ihex mem intstr2.ihex $struct_start $struct_end" \
	"dump struct as memory, ihex"

make_dump_file "dump tekhex mem intarr2.tekhex $array_start $array_end" \
	"dump array as memory, tekhex"

make_dump_file "dump tekhex mem intstr2.tekhex $struct_start $struct_end" \
	"dump struct as memory, tekhex"

# test complex expressions
make_dump_file \
	"dump srec mem intarr3.srec &intarray \(char *\) &intarray + sizeof intarray" \
	"dump array as mem, srec, expressions"

proc test_restore_saved_value { restore_args msg oldval newval } {
    global gdb_prompt
    
    gdb_test "restore $restore_args" \
	"Restoring .*" \
	"$msg; file restored ok"
    if { ![string compare $oldval \
	       [capture_value $newval "$msg"]] } then { 
	pass "$msg; value restored ok"
    } else {
	fail "$msg; value restored ok"
    }
}

if ![string compare $is64bitonly "no"] then {

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.srec" "array as value, srec" \
	$array_val "intarray"

  test_restore_saved_value "intstr1.srec" "struct as value, srec" \
	$struct_val "intstruct"

  gdb_test "print zero_all ()" "void" "zero all"

  test_restore_saved_value "intarr2.srec" "array as memory, srec" \
	$array_val "intarray"

  test_restore_saved_value "intstr2.srec" "struct as memory, srec" \
	$struct_val "intstruct"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.ihex" "array as value, ihex" \
	$array_val "intarray"

  test_restore_saved_value "intstr1.ihex" "struct as value, ihex" \
	$struct_val "intstruct"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr2.ihex" "array as memory, ihex" \
	$array_val "intarray"

  test_restore_saved_value "intstr2.ihex" "struct as memory, ihex" \
	$struct_val "intstruct"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.tekhex" "array as value, tekhex" \
	$array_val "intarray"

  test_restore_saved_value "intstr1.tekhex" "struct as value, tekhex" \
	$struct_val "intstruct"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr2.tekhex" "array as memory, tekhex" \
	$array_val "intarray"

  test_restore_saved_value "intstr2.tekhex" "struct as memory, tekhex" \
	$struct_val "intstruct"
}

gdb_test "print zero_all ()" ".*"

test_restore_saved_value "intarr1.bin binary $array_start" \
	"array as value, binary" \
	$array_val "intarray"

test_restore_saved_value "intstr1.bin binary $struct_start" \
	"struct as value, binary" \
	$struct_val "intstruct"

gdb_test "print zero_all ()" ".*"

test_restore_saved_value "intarr2.bin binary $array_start" \
	"array as memory, binary" \
	$array_val "intarray"

test_restore_saved_value "intstr2.bin binary $struct_start" \
	"struct as memory, binary" \
	$struct_val "intstruct"

# test restore with offset.

set array2_start   [capture_value "/x &intarray2\[0\]"]
set struct2_start  [capture_value "/x &intstruct2"]
set array2_offset  \
	[capture_value "(char *) &intarray2 - (char *) &intarray"]
set struct2_offset \
	[capture_value "(char *) &intstruct2 - (char *) &intstruct"]

gdb_test "print zero_all ()" ".*"


if ![string compare $is64bitonly "no"] then {
  test_restore_saved_value "intarr1.srec $array2_offset" \
	"array copy, srec" \
	$array_val "intarray2"

  test_restore_saved_value "intstr1.srec $struct2_offset" \
	"struct copy, srec" \
	$struct_val "intstruct2"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.ihex $array2_offset" \
	"array copy, ihex" \
	$array_val "intarray2"

  test_restore_saved_value "intstr1.ihex $struct2_offset" \
	"struct copy, ihex" \
	$struct_val "intstruct2"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.tekhex $array2_offset" \
	"array copy, tekhex" \
	$array_val "intarray2"

  test_restore_saved_value "intstr1.tekhex $struct2_offset" \
	"struct copy, tekhex" \
	$struct_val "intstruct2"
}

gdb_test "print zero_all ()" ".*"

test_restore_saved_value "intarr1.bin binary $array2_start" \
	"array copy, binary" \
	$array_val "intarray2"

test_restore_saved_value "intstr1.bin binary $struct2_start" \
	"struct copy, binary" \
	$struct_val "intstruct2"

#
# test restore with start/stop addresses.
#
# For this purpose, we will restore just the third element of the array, 
# and check to see that adjacent elements are not modified.
#
# We will need the address and offset of the third and fourth elements.
#

set element3_start  [capture_value "/x &intarray\[3\]"]
set element4_start  [capture_value "/x &intarray\[4\]"]
set element3_offset \
	[capture_value "/x (char *) &intarray\[3\] - (char *) &intarray\[0\]"]
set element4_offset \
	[capture_value "/x (char *) &intarray\[4\] - (char *) &intarray\[0\]"]

if ![string compare $is64bitonly "no"] then {
  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.srec 0 $element3_start $element4_start" \
	"array partial, srec" 4 "intarray\[3\]"

  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 1"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 1"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.ihex 0 $element3_start $element4_start" \
	"array partial, ihex" 4 "intarray\[3\]"

  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 2"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 2"

  gdb_test "print zero_all ()" ".*"

  test_restore_saved_value "intarr1.tekhex 0 $element3_start $element4_start" \
	"array partial, tekhex" 4 "intarray\[3\]"

  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 3"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 3"
}

gdb_test "print zero_all ()" ".*"

test_restore_saved_value \
    "intarr1.bin binary $array_start $element3_offset $element4_offset" \
    "array partial, binary" 4 "intarray\[3\]"

gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 4"
gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 4"

if ![string compare $is64bitonly "no"] then {
  gdb_test "print zero_all ()" ".*" ""

  # restore with expressions 
  test_restore_saved_value \
	"intarr3.srec (char*)${array2_start}-(char*)${array_start} &intarray\[3\] &intarray\[4\]" \
	"array partial with expressions" 4 "intarray2\[3\]"

  gdb_test "print intarray2\[2\] == 0" " = 1" "element 2 not changed, == 4"
  gdb_test "print intarray2\[4\] == 0" " = 1" "element 4 not changed, == 4"
}


# Now start a fresh gdb session, and reload the saved value files.

gdb_exit
gdb_start
gdb_file_cmd ${binfile}

# Now fix the endianness at the correct state.

gdb_test_multiple "set endian $endian" "set endianness" {
    -re ".* (big|little) endian.*$gdb_prompt $" { 
	pass "setting $endian endianness"
    }
}

# Reload saved values one by one, and compare.

if { ![string compare $array_val \
	   [capture_value "intarray" "file binfile; intarray"]] } then {
    fail "start with intarray un-initialized"
} else {
    pass "start with intarray un-initialized"
}

if { ![string compare $struct_val \
	   [capture_value "intstruct" "file binfile; intstruct"]] } then {
    fail "start with intstruct un-initialized"
} else {
    pass "start with intstruct un-initialized"
}

proc test_reload_saved_value { filename msg oldval newval } {
    global gdb_prompt
    
    gdb_file_cmd $filename
    if { ![string compare $oldval \
	       [capture_value $newval "$msg"]] } then { 
	pass "$msg; value restored ok"
    } else {
	fail "$msg; value restored ok"
    }
}

# srec format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
  test_reload_saved_value "intarr1.srec" "reload array as value, srec" \
	$array_val "\*$array_ptr_type"
  test_reload_saved_value "intstr1.srec" "reload struct as value, srec" \
	$struct_val "\*$struct_ptr_type"
  test_reload_saved_value "intarr2.srec" "reload array as memory, srec" \
	$array_val "\*$array_ptr_type"
  test_reload_saved_value "intstr2.srec" "reload struct as memory, srec" \
	$struct_val "\*$struct_ptr_type"
}

# ihex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {

  test_reload_saved_value "intarr1.ihex" "reload array as value, intel hex" \
	$array_val "\*$array_ptr_type"
  test_reload_saved_value "intstr1.ihex" "reload struct as value, intel hex" \
	$struct_val "\*$struct_ptr_type"
  test_reload_saved_value "intarr2.ihex" "reload array as memory, intel hex" \
	$array_val "\*$array_ptr_type"
  test_reload_saved_value "intstr2.ihex" "reload struct as memory, intel hex" \
	$struct_val "\*$struct_ptr_type"
}

# tekhex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
  test_reload_saved_value "intarr1.tekhex" "reload array as value, tekhex" \
	$array_val "\*$array_ptr_type"
  test_reload_saved_value "intstr1.tekhex" "reload struct as value, tekhex" \
	$struct_val "\*$struct_ptr_type"
  test_reload_saved_value "intarr2.tekhex" "reload array as memory, tekhex" \
	$array_val "\*$array_ptr_type"
  test_reload_saved_value "intstr2.tekhex" "reload struct as memory, tekhex" \
	$struct_val "\*$struct_ptr_type"
}

# clean up files

remote_exec build "rm -f intarr1.bin intarr1b.bin intarr1.ihex intarr1.srec intarr1.tekhex intarr2.bin intarr2b.bin intarr2.ihex intarr2.srec intarr2.tekhex intstr1.bin intstr1b.bin intstr1.ihex intstr1.srec intstr1.tekhex intstr2.bin intstr2b.bin intstr2.ihex intstr2.srec intstr2.tekhex intarr3.srec"
@


1.30
log
@test suite update - gdb.base/[cd]

Convert files gdb.base/[cd]*.exp to use standard_output_file et al.

	* call-ar-st.exp, call-rt-st.exp, call-sc.exp,
	call-signal-resume.exp, call-strs.exp, callexit.exp,
	callfuncs.exp, catch-load.exp, catch-syscall.exp, charset.exp,
	checkpoint.exp, chng-syms.exp, code-expr.exp, code_elim.exp,
	commands.exp, completion.exp, complex.exp, cond-expr.exp,
	condbreak.exp, consecutive.exp, constvars.exp, corefile.exp,
	ctxobj.exp, cursal.exp, cvexpr.exp, dbx.exp, default.exp,
	define.exp, del.exp, detach.exp, dfp-test.exp, display.exp,
	dmsym.exp, dump.exp, dup-sect.exp: Use standard_testfile,
	standard_output_file, prepare_for_testing, clean_restart.
@
text
@a32 4
if {[istarget "ia64*-*-*"] || [istarget "hppa64-*-*"]} then {
    set is64bitonly "yes"
}

d55 9
@


1.29
log
@	* gdb.base/dump.exp (capture_value): Don't put expression into
	test name if arguments passed in.
	Rename a couple more tests to make them unique.
@
text
@d20 1
a20 1
set testfile "dump"
a21 2
set srcfile  ${testfile}.c
set binfile  ${objdir}/${subdir}/${testfile}
@


1.28
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d132 3
a134 2
	# Convert $args into a simple string.
	set test "[join $args]; capture $expression"
d444 1
a444 1
	   [capture_value "intarray" "file binfile"]] } then {
d451 1
a451 1
	   [capture_value "intstruct" "file binfile"]] } then {
@


1.27
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d1 1
a1 1
# Copyright 2002, 2004, 2007-2012 Free Software Foundation, Inc.
@


1.26
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a18 4
if $tracelevel then {
	strace $tracelevel
}

@


1.25
log
@2011-07-02  Yao Qi  <yao@@codesourcery.com>

	* gdb.base/dump.exp (capture_pointer_with_type): New.
	Get value from address instead of name.
	Start GDB once, and do `dump' and `restore'
	tests together.
@
text
@d1 1
a1 2
# Copyright 2002, 2004, 2007, 2008, 2009, 2010, 2011
# Free Software Foundation, Inc.
@


1.25.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 1
# Copyright 2002, 2004, 2007-2012 Free Software Foundation, Inc.
@


1.24
log
@run copyright.sh for 2011.
@
text
@d156 28
d192 3
a229 43

# Now start a fresh gdb session, and reload the saved value files.

gdb_exit
gdb_start
gdb_file_cmd ${binfile}

# Now fix the endianness at the correct state.

gdb_test_multiple "set endian $endian" "set endianness" {
    -re ".* (big|little) endian.*$gdb_prompt $" { 
	pass "setting $endian endianness"
    }
}

# Reload saved values one by one, and compare.

if { ![string compare $array_val \
	   [capture_value "intarray" "file binfile"]] } then {
    fail "start with intarray un-initialized"
} else {
    pass "start with intarray un-initialized"
}

if { ![string compare $struct_val \
	   [capture_value "intstruct" "file binfile"]] } then {
    fail "start with intstruct un-initialized"
} else {
    pass "start with intstruct un-initialized"
}

proc test_reload_saved_value { filename msg oldval newval } {
    global gdb_prompt
    
    gdb_file_cmd $filename
    if { ![string compare $oldval \
	       [capture_value $newval "$msg"]] } then { 
	pass "$msg; value restored ok"
    } else {
	fail "$msg; value restored ok"
    }
}

a243 1
# srec format can not be loaded for 64-bit-only platforms
a244 9
  test_reload_saved_value "intarr1.srec" "reload array as value, srec" \
	$array_val "intarray"
  test_reload_saved_value "intstr1.srec" "reload struct as value, srec" \
	$struct_val "intstruct"
  test_reload_saved_value "intarr2.srec" "reload array as memory, srec" \
	$array_val "intarray"
  test_reload_saved_value "intstr2.srec" "reload struct as memory, srec" \
	$struct_val "intstruct"
}
d246 1
a246 2
# ihex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
a247 50
  test_reload_saved_value "intarr1.ihex" "reload array as value, intel hex" \
	$array_val "intarray"
  test_reload_saved_value "intstr1.ihex" "reload struct as value, intel hex" \
	$struct_val "intstruct"
  test_reload_saved_value "intarr2.ihex" "reload array as memory, intel hex" \
	$array_val "intarray"
  test_reload_saved_value "intstr2.ihex" "reload struct as memory, intel hex" \
	$struct_val "intstruct"
}

# tekhex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
  test_reload_saved_value "intarr1.tekhex" "reload array as value, tekhex" \
	$array_val "intarray"
  test_reload_saved_value "intstr1.tekhex" "reload struct as value, tekhex" \
	$struct_val "intstruct"
  test_reload_saved_value "intarr2.tekhex" "reload array as memory, tekhex" \
	$array_val "intarray"
  test_reload_saved_value "intstr2.tekhex" "reload struct as memory, tekhex" \
	$struct_val "intstruct"
}

# Start a fresh gdb session

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# Run to main.
if { ! [ runto_main ] } then {
    untested dump.exp
    return -1
}

if { ![string compare $array_val \
	   [capture_value "intarray" "load binfile"]] } then {
    fail "start with intarray un-initialized, runto main"
} else {
    pass "start with intarray un-initialized, runto main"
}

if { ![string compare $struct_val \
	   [capture_value "intstruct" "load binfile"]] } then {
    fail "start with intstruct un-initialized, runto main"
} else {
    pass "start with intstruct un-initialized, runto main"
}

if ![string compare $is64bitonly "no"] then {
d430 80
@


1.23
log
@2010-06-08  Michael Snyder  <msnyder@@vmware.com>

	* gdb.ada/assign_1.exp: Use ".*" instead of "" as wildcard regexp.
	* gdb.ada/boolean_expr.exp:
	* gdb.ada/frame_args.exp: Ditto.
	* gdb.ada/lang_switch.exp: Ditto.
	* gdb.ada/ptype_arith_binop.exp: Ditto.
	* gdb.ada/ref_param.exp: Ditto.
	* gdb.ada/type_coercion.exp:Ditto.

	* gdb.asm/asm-source.exp: Ditto.

	* gdb.base/attach.exp: Ditto.
	* gdb.base/bitfields2.exp: Ditto.
	* gdb.base/call-signal-resume.exp: Ditto.
	* gdb.base/callfuncs.exp: Ditto.
	* gdb.base/commands.exp: Ditto.
	* gdb.base/dbx.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* gdb.base/dump.exp: Ditto.
	* gdb.base/exprs.exp: Ditto.
	* gdb.base/freebpcmd.exp: Ditto.
	* gdb.base/interrupt.exp: Ditto.
	* gdb.base/list.exp: Ditto.
	* gdb.base/long_long.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/ptype.exp: Ditto.
	* gdb.base/return.exp: Ditto.
	* gdb.base/setshow.exp: Ditto.
	* gdb.base/sigbpt.exp: Ditto.
	* gdb.base/sigrepeat.exp: Ditto.

	* gdb.cp/classes.exp: Ditto.

	* gdb.dwarf2/dw2-restore.exp: Ditto.

	* gdb.gdb/selftest.exp: Ditto.

	* gdb.multi/base.exp: Ditto.
	* gdb.multi/bkpt-multi-exec.exp: Ditto.

	* gdb.python/py-block.exp: Ditto.
	* gdb.python/py-prettyprint.exp: Ditto.
	* gdb.python/py-template.exp: Ditto.

	* gdb.server/ext-attach.exp: Ditto.
	* gdb.server/ext-run.exp: Ditto.
	* gdb.server/server-mon.exp: Ditto.

	* gdb.threads/fork-thread-pending.exp: Ditto.
	* gdb.threads/hand-call-in-threads.exp: Ditto.
	* gdb.threads/interrupted-hand-call.exp: Ditto.
	* gdb.threads/linux-dp.exp: Ditto.
	* gdb.threads/manythreads.exp: Ditto.
	* gdb.threads/print-threads.exp: Ditto.
	* gdb.threads/pthreads.exp: Ditto.
	* gdb.threads/schedlock.exp: Ditto.
	* gdb.threads/thread-unwindonsignal.exp: Ditto.
	* gdb.threads/threadapply.exp: Ditto.
@
text
@d1 2
a2 1
# Copyright 2002, 2004, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.22
log
@2010-06-08  Michael Snyder  <msnyder@@vmware.com>

	* gdb.ada/exec_changed.exp:
	Use ".*" instead of "" as wildcard regexp.

	* gdb.base/async.exp: Use ".*" instead of "" as wildcard regexp.
	* gdb.base/call-ar-st.exp: Ditto.
	* gdb.base/checkpoint.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* gdb.base/dump.exp: Ditto.
	* gdb.base/ending-run.exp: Ditto.
	* gdb.base/fileio.exp: Ditto.
	* gdb.base/miscexprs.exp: Ditto.
	* gdb.base/pointers.exp: Ditto.
	* gdb.base/readline.exp: Ditto.
	* gdb.base/reread.exp: Ditto.
	* gdb.base/restore.exp: Ditto.
	* gdb.base/shlib-call.exp: Ditto.
	* gdb.base/valgrind-db-attach.exp: Ditto.
	* gdb.base/volatile.exp: Ditto.
	* gdb.base/watchpoints.exp: Ditto.

	* gdb.cp/classes.exp: Use ".*" instead of "" as wildcard regexp.

	* gdb.python/py-frame.exp: Use ".*" instead of "" as wildcard regexp.
	* gdb.python/py-value.exp: Ditto.

	* gdb.trace/backtrace.exp: Use ".*" instead of "" as wildcard regexp.
	* gdb.trace/circ.exp: Ditto.
	* gdb.trace/collection.exp: Ditto.
	* gdb.trace/packetlen.exp: Ditto.
	* gdb.trace/passc-dyn.exp: Ditto.
	* gdb.trace/report.exp: Ditto.
	* gdb.trace/tfile.exp: Ditto.
	* gdb.trace/tfind.exp: Ditto.
	* gdb.trace/while-dyn.exp: Ditto.
@
text
@d334 1
a334 1
  gdb_test "print zero_all ()" ""
d342 1
a342 1
  gdb_test "print zero_all ()" ""
d350 1
a350 1
  gdb_test "print zero_all ()" ""
d358 1
a358 1
  gdb_test "print zero_all ()" ""
d367 1
a367 1
gdb_test "print zero_all ()" ""
d377 1
a377 1
gdb_test "print zero_all ()" ""
d396 1
a396 1
gdb_test "print zero_all ()" ""
d408 1
a408 1
  gdb_test "print zero_all ()" ""
d418 1
a418 1
  gdb_test "print zero_all ()" ""
d429 1
a429 1
gdb_test "print zero_all ()" ""
d456 1
a456 1
  gdb_test "print zero_all ()" ""
d464 1
a464 1
  gdb_test "print zero_all ()" ""
d472 1
a472 1
  gdb_test "print zero_all ()" ""
d481 1
a481 1
gdb_test "print zero_all ()" ""
@


1.21
log
@2010-05-24  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/default.exp: Replace send_gdb with gdb_test.
	* gdb.base/define.exp: Replace send_gdb with gdb_test.
	* gdb.base/display.exp: Replace send_gdb with gdb_test.
	* gdb.base/dump.exp: Replace send_gdb with gdb_test.
	* gdb.base/ending-run.exp: Replace send_gdb with gdb_test.
	* gdb.base/eval-skip.exp: Replace send_gdb with gdb_test.
	* gdb.base/exprs.exp: Replace send_gdb with gdb_test.
	* gdb.base/fileio.exp: Replace send_gdb with gdb_test.
	* gdb.base/finish.exp: Replace send_gdb with gdb_test.
	* gdb.base/foll-fork.exp: Replace send_gdb with gdb_test.
	* gdb.base/funcargs.exp: Replace send_gdb with gdb_test.
	* gdb.base/gcore-buffer-overflow.exp: Replace send_gdb with gdb_test.
	* gdb.base/gcore.exp: Replace send_gdb with gdb_test.
	* gdb.base/gdb1090.exp: Replace send_gdb with gdb_test.
	* gdb.base/gdbvars.exp: Replace send_gdb with gdb_test.
	* gdb.base/help.exp: Replace send_gdb with gdb_test.
	* gdb.base/info-proc.exp: Replace send_gdb with gdb_test.
	* gdb.base/jump.exp: Replace send_gdb with gdb_test.
	* gdb.base/long_long.exp: Replace send_gdb with gdb_test.
@
text
@d491 1
a491 1
  gdb_test "print zero_all ()" "" ""
@


1.20
log
@Do not set prms_id/bug_id anymore.

2010-05-05  Joel Brobecker  <brobecker@@adacore.com>

	Remove the use of prms_id and bug_id throughout the testsuite.
@
text
@d80 1
a80 2
send_gdb "show endian\n"
gdb_expect {
a84 3
    default {
	fail "(timeout) getting target endianness"
    }
d92 1
a92 2
    send_gdb "${command}\n"
    gdb_expect {
d96 1
a96 2
	-re ".*$gdb_prompt $" { pass $msg }
	timeout                                { fail "$msg (timeout)" }
d207 1
a207 2
send_gdb "set endian $endian\n"
gdb_expect {
a210 3
    default {
	fail "(timeout) setting $endian endianness"
    }
@


1.19
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@a22 2
set prms_id 0
set bug_id 0
@


1.18
log
@	* gdb.base/dump.exp: Pass difference of pointer types instead
	of integer types as offset to restore in intarr3.srec case.
@
text
@d1 1
a1 1
# Copyright 2002, 2004, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.17
log
@gdb/
	Report error on inaccessible memory.
	* cli/cli-dump.c: Include gdbcore.h.
	(dump_memory_to_file): Call read_memory instead of target_read_memory.

gdb/testsuite/
	* gdb.base/dump.exp (inaccessible memory is reported): New test.
@
text
@d507 1
a507 1
	"intarr3.srec ${array2_start}-${array_start} &intarray\[3\] &intarray\[4\]" \
@


1.17.4.1
log
@	* gdb.base/dump.exp: Pass difference of pointer types instead
	of integer types as offset to restore in intarr3.srec case.
@
text
@d507 1
a507 1
	"intarr3.srec (char*)${array2_start}-(char*)${array_start} &intarray\[3\] &intarray\[4\]" \
@


1.16
log
@ChangeLog:

	* printcmd.c (print_scalar_formatted): Always truncate
	unsigned data types.

	* cli-dump.c (struct callback_data): Change type of load_offset
	to CORE_ADDR.
	(restore_binary_file): Update type casts.
	(restore_command): Parse load_offset as address, not long.

	* utils.c (string_to_core_addr): Do not sign-extend value.
	* varobj.c (find_frame_addr_in_frame_chain): Truncate frame_base
	before comparing against requested frame address.

testsuite/ChangeLog:

	* gdb.base/dump.exp: Handle SPU like 64-bit platforms.
@
text
@d61 4
@


1.15
log
@        Updated copyright notices for most files.
@
text
@d45 6
@


1.14
log
@	Fix for PR gdb/1543.
	* gdb.base/sep.exp: `sep-proc.c' absolute line numbers replaced with
	$LOCATION.
	(location): New variable.
	* config/cfdbug.exp, config/d10v.exp, config/dve.exp, config/i960.exp,
	config/m32r.exp, config/mn10300-eval.exp, config/proelf.exp,
	config/rom68k.exp, config/sh.exp, config/unix.exp, config/vr4300.exp,
	config/vr5000.exp, config/vxworks.exp, gdb.arch/altivec-regs.exp,
	gdb.arch/e500-abi.exp, gdb.arch/e500-regs.exp, gdb.asm/asm-source.exp,
	gdb.base/a2-run.exp, gdb.base/advance.exp, gdb.base/all-bin.exp,
	gdb.base/args.exp, gdb.base/arithmet.exp, gdb.base/assign.exp,
	gdb.base/async.exp, gdb.base/auxv.exp, gdb.base/bigcore.c,
	gdb.base/bigcore.exp, gdb.base/bitfields.exp, gdb.base/bitops.exp,
	gdb.base/break.c, gdb.base/break.exp, gdb.base/break1.c,
	gdb.base/call-ar-st.exp, gdb.base/call-rt-st.exp,
	gdb.base/call-strs.exp, gdb.base/callfuncs.c, gdb.base/callfuncs.exp,
	gdb.base/checkpoint.exp, gdb.base/chng-syms.exp,
	gdb.base/code-expr.exp, gdb.base/commands.exp, gdb.base/completion.exp,
	gdb.base/complex.exp, gdb.base/cond-expr.exp, gdb.base/condbreak.exp,
	gdb.base/consecutive.exp, gdb.base/corefile.exp, gdb.base/cvexpr.c,
	gdb.base/cvexpr.exp, gdb.base/dbx.exp, gdb.base/default.exp,
	gdb.base/define.exp, gdb.base/del.c, gdb.base/detach.exp,
	gdb.base/display.exp, gdb.base/dump.exp, gdb.base/echo.exp,
	gdb.base/environ.exp, gdb.base/eval-skip.exp, gdb.base/exprs.exp,
	gdb.base/fileio.exp, gdb.base/find.exp, gdb.base/finish.exp,
	gdb.base/funcargs.exp, gdb.base/gcore-buffer-overflow.exp,
	gdb.base/gcore.exp, gdb.base/gdb1555.exp, gdb.base/gdbvars.exp,
	gdb.base/help.exp, gdb.base/huge.exp, gdb.base/info-proc.exp,
	gdb.base/interrupt.exp, gdb.base/jump.exp, gdb.base/langs.exp,
	gdb.base/lineinc.exp, gdb.base/list.exp, gdb.base/macscp.exp,
	gdb.base/maint.exp, gdb.base/mips_pro.exp, gdb.base/miscexprs.exp,
	gdb.base/nodebug.exp, gdb.base/nofield.c, gdb.base/opaque.exp,
	gdb.base/overlays.exp, gdb.base/page.exp, gdb.base/pc-fp.exp,
	gdb.base/pending.c, gdb.base/pendshr.c, gdb.base/pointers.exp,
	gdb.base/psymtab.exp, gdb.base/ptype.exp, gdb.base/randomize.c,
	gdb.base/readline.exp, gdb.base/recurse.exp, gdb.base/regs.exp,
	gdb.base/relational.exp, gdb.base/relocate.exp, gdb.base/remote.exp,
	gdb.base/reread.exp, gdb.base/return.exp, gdb.base/return2.exp,
	gdb.base/scope.exp, gdb.base/sect-cmd.exp, gdb.base/sep-proc.c,
	gdb.base/sep.c, gdb.base/sep.exp, gdb.base/sepdebug.c,
	gdb.base/sepdebug.exp, gdb.base/setshow.exp, gdb.base/shlib-call.exp,
	gdb.base/sigaltstack.c, gdb.base/so-indr-cl.exp, gdb.base/solib.exp,
	gdb.base/source.exp, gdb.base/start.c, gdb.base/step-bt.c,
	gdb.base/step-line.exp, gdb.base/structs.c, gdb.base/structs.exp,
	gdb.base/structs2.exp, gdb.base/term.exp, gdb.base/twice.exp,
	gdb.base/type-opaque.exp, gdb.base/until.exp,
	gdb.base/value-double-free.c, gdb.base/varargs.exp,
	gdb.base/watchpoint.exp, gdb.base/whatis-exp.exp, gdb.disasm/am33.exp,
	gdb.disasm/h8300s.exp, gdb.disasm/hppa.exp, gdb.disasm/mn10300.exp,
	gdb.disasm/sh3.exp, gdb.disasm/t01_mov.exp, gdb.disasm/t02_mova.exp,
	gdb.disasm/t03_add.exp, gdb.disasm/t04_sub.exp, gdb.disasm/t05_cmp.exp,
	gdb.disasm/t06_ari2.exp, gdb.disasm/t07_ari3.exp,
	gdb.disasm/t08_or.exp, gdb.disasm/t09_xor.exp, gdb.disasm/t10_and.exp,
	gdb.disasm/t11_logs.exp, gdb.disasm/t12_bit.exp,
	gdb.disasm/t13_otr.exp, gdb.fortran/exprs.exp, gdb.fortran/types.exp,
	gdb.hp/gdb.aCC/exception.exp, gdb.hp/gdb.aCC/optimize.exp,
	gdb.hp/gdb.aCC/watch-cmd.exp, gdb.hp/gdb.base-hp/callfwmall.exp,
	gdb.hp/gdb.base-hp/dollar.exp, gdb.hp/gdb.base-hp/hwwatchbus.exp,
	gdb.hp/gdb.base-hp/pxdb.exp, gdb.hp/gdb.base-hp/reg-pa64.exp,
	gdb.hp/gdb.base-hp/reg.exp, gdb.hp/gdb.base-hp/sized-enum.exp,
	gdb.hp/gdb.base-hp/so-thresh.exp, gdb.hp/gdb.compat/xdb1.exp,
	gdb.hp/gdb.compat/xdb2.exp, gdb.hp/gdb.compat/xdb3.exp,
	gdb.java/jmisc.exp, gdb.java/jv-exp.exp, gdb.java/jv-print.exp,
	gdb.mi/gdb669.exp, gdb.mi/gdb680.exp, gdb.mi/gdb701.exp,
	gdb.mi/gdb792.exp, gdb.mi/mi-basics.exp, gdb.mi/mi-console.exp,
	gdb.mi/mi-hack-cli.exp, gdb.mi/mi-pending.c, gdb.mi/mi-pendshr.c,
	gdb.mi/mi-pthreads.exp, gdb.mi/mi-read-memory.exp, gdb.mi/mi-regs.exp,
	gdb.mi/mi-syn-frame.exp, gdb.mi/mi-until.exp, gdb.mi/mi2-basics.exp,
	gdb.mi/mi2-console.exp, gdb.mi/mi2-hack-cli.exp,
	gdb.mi/mi2-pthreads.exp, gdb.mi/mi2-read-memory.exp,
	gdb.mi/mi2-regs.exp, gdb.mi/mi2-syn-frame.exp, gdb.mi/mi2-until.exp,
	gdb.pascal/types.exp, gdb.stabs/weird.exp,
	gdb.threads/gcore-thread.exp, gdb.threads/manythreads.exp,
	gdb.threads/print-threads.exp, gdb.threads/pthreads.exp,
	gdb.threads/schedlock.exp, gdb.threads/step.exp, gdb.threads/step2.exp,
	gdb.threads/switch-threads.exp, gdb.threads/thread-specific.exp,
	gdb.threads/thread_check.exp, gdb.threads/thread_events.exp,
	gdb.threads/tls-nodebug.exp, gdb.threads/tls-shared.exp,
	gdb.threads/tls.exp, gdb.trace/actions.exp, gdb.trace/backtrace.exp,
	gdb.trace/circ.exp, gdb.trace/collection.exp, gdb.trace/deltrace.exp,
	gdb.trace/infotrace.exp, gdb.trace/limits.exp, gdb.trace/packetlen.exp,
	gdb.trace/passc-dyn.exp, gdb.trace/passcount.exp, gdb.trace/report.exp,
	gdb.trace/save-trace.exp, gdb.trace/tfind.exp, gdb.trace/tracecmd.exp,
	gdb.trace/while-dyn.exp, gdb.trace/while-stepping.exp,
	lib/mi-support.exp, lib/trace-support.exp: Remove reference
	to bug-gdb@@prep.ai.mit.edu .
@
text
@d1 1
a1 1
# Copyright 2002, 2004, 2007, 2008 Free Software Foundation, Inc.
@


1.13
log
@	Updated copyright notices for most files.
@
text
@a15 3
# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

@


1.12
log
@        Switch the license of all .exp files to GPLv3.
        Switch the license of all .f and .f90 files to GPLv3.
        Switch the license of all .s and .S files to GPLv3.
@
text
@d1 1
a1 1
# Copyright 2002, 2004, 2007 Free Software Foundation, Inc.
@


1.11
log
@* gdb.base/dump.exp: Force the correct endianness for binary
formats not carrying this information.
@
text
@d5 1
a5 1
# the Free Software Foundation; either version 2 of the License, or
d7 1
a7 1
# 
d12 1
a12 1
# 
d14 1
a14 2
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.10
log
@Copyright updates for 2007.
@
text
@d37 1
d74 13
d207 12
@


1.9
log
@	* gdb.arch/altivec-abi.exp: Replace gdb_suppress_entire_file with
	untested followed by return combination.
	* gdb.arch/altivec-regs.exp: Likewise.
	* gdb.arch/e500-abi.exp: Likewise.
	* gdb.arch/e500-regs.exp: Likewise.
	* gdb.arch/gdb1291.exp: Likewise.
	* gdb.arch/gdb1431.exp: Likewise.
	* gdb.arch/gdb1558.exp: Likewise.
	* gdb.arch/i386-prologue.exp: Likewise.
	* gdb.arch/i386-unwind.exp: Likewise.
	* gdb.asm/asm-source.exp: Likewise.
	* gdb.base/a2-run.exp: Likewise.
	* gdb.base/advance.exp: Likewise.
	* gdb.base/all-bin.exp: Likewise.
	* gdb.base/annota1.exp: Likewise.
	* gdb.base/annota3.exp: Likewise.
	* gdb.base/args.exp: Likewise.
	* gdb.base/arithmet.exp: Likewise.
	* gdb.base/assign.exp: Likewise.
	* gdb.base/async.exp: Likewise.
	* gdb.base/attach.exp: Likewise.
	* gdb.base/bang.exp: Likewise.
	* gdb.base/bigcore.exp: Likewise.
	* gdb.base/bitfields.exp: Likewise.
	* gdb.base/bitfields2.exp: Likewise.
	* gdb.base/break.exp: Likewise.
	* gdb.base/call-sc.exp: Likewise.
	* gdb.base/call-strs.exp: Likewise.
	* gdb.base/callfuncs.exp: Likewise.
	* gdb.base/checkpoint.exp: Likewise.
	* gdb.base/chng-syms.exp: Likewise.
	* gdb.base/code-expr.exp: Likewise.
	* gdb.base/commands.exp: Likewise.
	* gdb.base/completion.exp: Likewise.
	* gdb.base/cond-expr.exp: Likewise.
	* gdb.base/condbreak.exp: Likewise.
	* gdb.base/consecutive.exp: Likewise.
	* gdb.base/constvars.exp: Likewise.
	* gdb.base/corefile.exp: Likewise.
	* gdb.base/cvexpr.exp: Likewise.
	* gdb.base/dbx.exp: Likewise.
	* gdb.base/define.exp: Likewise.
	* gdb.base/detach.exp: Likewise.
	* gdb.base/display.exp: Likewise.
	* gdb.base/dump.exp: Likewise.
	* gdb.base/ena-dis-br.exp: Likewise.
	* gdb.base/ending-run.exp: Likewise.
	* gdb.base/environ.exp: Likewise.
	* gdb.base/eval-skip.exp: Likewise.
	* gdb.base/exprs.exp: Likewise.
	* gdb.base/fileio.exp: Likewise.
	* gdb.base/finish.exp: Likewise.
	* gdb.base/float.exp: Likewise.
	* gdb.base/foll-exec.exp: Likewise.
	* gdb.base/foll-fork.exp: Likewise.
	* gdb.base/foll-vfork.exp: Likewise.
	* gdb.base/freebpcmd.exp: Likewise.
	* gdb.base/funcargs.exp: Likewise.
	* gdb.base/gcore.exp: Likewise.
	* gdb.base/gdb1090.exp: Likewise.
	* gdb.base/gdb1250.exp: Likewise.
	* gdb.base/huge.exp: Likewise.
	* gdb.base/info-proc.exp: Likewise.
	* gdb.base/interrupt.exp: Likewise.
	* gdb.base/jump.exp: Likewise.
	* gdb.base/langs.exp: Likewise.
	* gdb.base/lineinc.exp: Likewise.
	* gdb.base/list.exp: Likewise.
	* gdb.base/logical.exp: Likewise.
	* gdb.base/long_long.exp: Likewise.
	* gdb.base/macscp.exp: Likewise.
	* gdb.base/maint.exp: Likewise.
	* gdb.base/mips_pro.exp: Likewise.
	* gdb.base/miscexprs.exp: Likewise.
	* gdb.base/multi-forks.exp: Likewise.
	* gdb.base/opaque.exp: Likewise.
	* gdb.base/overlays.exp: Likewise.
	* gdb.base/pc-fp.exp: Likewise.
	* gdb.base/pointers.exp: Likewise.
	* gdb.base/printcmds.exp: Likewise.
	* gdb.base/psymtab.exp: Likewise.
	* gdb.base/ptype.exp: Likewise.
	* gdb.base/recurse.exp: Likewise.
	* gdb.base/relational.exp: Likewise.
	* gdb.base/relocate.exp: Likewise.
	* gdb.base/remote.exp: Likewise.
	* gdb.base/reread.exp: Likewise.
	* gdb.base/restore.exp: Likewise.
	* gdb.base/return.exp: Likewise.
	* gdb.base/return2.exp: Likewise.
	* gdb.base/scope.exp: Likewise.
	* gdb.base/sect-cmd.exp: Likewise.
	* gdb.base/sep.exp: Likewise.
	* gdb.base/sepdebug.exp: Likewise.
	* gdb.base/setshow.exp: Likewise.
	* gdb.base/setvar.exp: Likewise.
	* gdb.base/sigall.exp: Likewise.
	* gdb.base/sigbpt.exp: Likewise.
	* gdb.base/signals.exp: Likewise.
	* gdb.base/signull.exp: Likewise.
	* gdb.base/sizeof.exp: Likewise.
	* gdb.base/solib.exp: Likewise.
	* gdb.base/step-line.exp: Likewise.
	* gdb.base/step-test.exp: Likewise.
	* gdb.base/structs.exp: Likewise.
	* gdb.base/structs2.exp: Likewise.
	* gdb.base/term.exp: Likewise.
	* gdb.base/twice.exp: Likewise.
	* gdb.base/until.exp: Likewise.
	* gdb.base/varargs.exp: Likewise.
	* gdb.base/volatile.exp: Likewise.
	* gdb.base/watchpoint.exp: Likewise.
	* gdb.base/whatis-exp.exp: Likewise.
	* gdb.base/whatis.exp: Likewise.
	* gdb.cp/ambiguous.exp: Likewise.
	* gdb.cp/annota2.exp: Likewise.
	* gdb.cp/annota3.exp: Likewise.
	* gdb.cp/bool.exp: Likewise.
	* gdb.cp/breakpoint.exp: Likewise.
	* gdb.cp/casts.exp: Likewise.
	* gdb.cp/class2.exp: Likewise.
	* gdb.cp/classes.exp: Likewise.
	* gdb.cp/cplusfuncs.exp: Likewise.
	* gdb.cp/ctti.exp: Likewise.
	* gdb.cp/derivation.exp: Likewise.
	* gdb.cp/exception.exp: Likewise.
	* gdb.cp/gdb1355.exp: Likewise.
	* gdb.cp/hang.exp: Likewise.
	* gdb.cp/inherit.exp: Likewise.
	* gdb.cp/local.exp: Likewise.
	* gdb.cp/m-data.exp: Likewise.
	* gdb.cp/m-static.exp: Likewise.
	* gdb.cp/member-ptr.exp: Likewise.
	* gdb.cp/method.exp: Likewise.
	* gdb.cp/misc.exp: Likewise.
	* gdb.cp/namespace.exp: Likewise.
	* gdb.cp/overload.exp: Likewise.
	* gdb.cp/ovldbreak.exp: Likewise.
	* gdb.cp/pr-1023.exp: Likewise.
	* gdb.cp/pr-1210.exp: Likewise.
	* gdb.cp/pr-574.exp: Likewise.
	* gdb.cp/printmethod.exp: Likewise.
	* gdb.cp/psmang.exp: Likewise.
	* gdb.cp/ref-params.exp: Likewise.
	* gdb.cp/ref-types.exp: Likewise.
	* gdb.cp/rtti.exp: Likewise.
	* gdb.cp/templates.exp: Likewise.
	* gdb.cp/try_catch.exp: Likewise.
	* gdb.cp/userdef.exp: Likewise.
	* gdb.cp/virtfunc.exp: Likewise.
	* gdb.disasm/am33.exp: Likewise.
	* gdb.disasm/h8300s.exp: Likewise.
	* gdb.disasm/mn10300.exp: Likewise.
	* gdb.disasm/sh3.exp: Likewise.
	* gdb.disasm/t01_mov.exp: Likewise.
	* gdb.disasm/t02_mova.exp: Likewise.
	* gdb.disasm/t03_add.exp: Likewise.
	* gdb.disasm/t04_sub.exp: Likewise.
	* gdb.disasm/t05_cmp.exp: Likewise.
	* gdb.disasm/t06_ari2.exp: Likewise.
	* gdb.disasm/t07_ari3.exp: Likewise.
	* gdb.disasm/t08_or.exp: Likewise.
	* gdb.disasm/t09_xor.exp: Likewise.
	* gdb.disasm/t10_and.exp: Likewise.
	* gdb.disasm/t11_logs.exp: Likewise.
	* gdb.disasm/t12_bit.exp: Likewise.
	* gdb.disasm/t13_otr.exp: Likewise.
	* gdb.hp/gdb.aCC/optimize.exp: Likewise.
	* gdb.hp/gdb.aCC/watch-cmd.exp: Likewise.
	* gdb.hp/gdb.base-hp/callfwmall.exp: Likewise.
	* gdb.hp/gdb.base-hp/dollar.exp: Likewise.
	* gdb.hp/gdb.base-hp/hwwatchbus.exp: Likewise.
	* gdb.hp/gdb.base-hp/pxdb.exp: Likewise.
	* gdb.hp/gdb.base-hp/reg-pa64.exp: Likewise.
	* gdb.hp/gdb.base-hp/reg.exp: Likewise.
	* gdb.hp/gdb.base-hp/sized-enum.exp: Likewise.
	* gdb.hp/gdb.compat/xdb1.exp: Likewise.
	* gdb.hp/gdb.compat/xdb3.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg01.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg02.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg03.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg04.exp: Likewise.
	* gdb.mi/gdb701.exp: Likewise.
	* gdb.mi/gdb792.exp: Likewise.
	* gdb.mi/mi-basics.exp: Likewise.
	* gdb.mi/mi-break.exp: Likewise.
	* gdb.mi/mi-cli.exp: Likewise.
	* gdb.mi/mi-console.exp: Likewise.
	* gdb.mi/mi-disassemble.exp: Likewise.
	* gdb.mi/mi-eval.exp: Likewise.
	* gdb.mi/mi-file.exp: Likewise.
	* gdb.mi/mi-read-memory.exp: Likewise.
	* gdb.mi/mi-regs.exp: Likewise.
	* gdb.mi/mi-return.exp: Likewise.
	* gdb.mi/mi-simplerun.exp: Likewise.
	* gdb.mi/mi-stack.exp: Likewise.
	* gdb.mi/mi-stepi.exp: Likewise.
	* gdb.mi/mi-syn-frame.exp: Likewise.
	* gdb.mi/mi-until.exp: Likewise.
	* gdb.mi/mi-var-block.exp: Likewise.
	* gdb.mi/mi-var-child.exp: Likewise.
	* gdb.mi/mi-var-cmd.exp: Likewise.
	* gdb.mi/mi-var-display.exp: Likewise.
	* gdb.mi/mi-watch.exp: Likewise.
	* gdb.mi/mi2-basics.exp: Likewise.
	* gdb.mi/mi2-break.exp: Likewise.
	* gdb.mi/mi2-cli.exp: Likewise.
	* gdb.mi/mi2-console.exp: Likewise.
	* gdb.mi/mi2-disassemble.exp: Likewise.
	* gdb.mi/mi2-eval.exp: Likewise.
	* gdb.mi/mi2-file.exp: Likewise.
	* gdb.mi/mi2-read-memory.exp: Likewise.
	* gdb.mi/mi2-regs.exp: Likewise.
	* gdb.mi/mi2-return.exp: Likewise.
	* gdb.mi/mi2-simplerun.exp: Likewise.
	* gdb.mi/mi2-stack.exp: Likewise.
	* gdb.mi/mi2-stepi.exp: Likewise.
	* gdb.mi/mi2-syn-frame.exp: Likewise.
	* gdb.mi/mi2-until.exp: Likewise.
	* gdb.mi/mi2-var-block.exp: Likewise.
	* gdb.mi/mi2-var-child.exp: Likewise.
	* gdb.mi/mi2-var-cmd.exp: Likewise.
	* gdb.mi/mi2-var-display.exp: Likewise.
	* gdb.mi/mi2-watch.exp: Likewise.
	* gdb.stabs/exclfwd.exp: Likewise.
	* gdb.stabs/weird.exp: Likewise.
	* gdb.threads/gcore-thread.exp: Likewise.
	* gdb.trace/actions.exp: Likewise.
	* gdb.trace/backtrace.exp: Likewise.
	* gdb.trace/circ.exp: Likewise.
	* gdb.trace/collection.exp: Likewise.
	* gdb.trace/deltrace.exp: Likewise.
	* gdb.trace/infotrace.exp: Likewise.
	* gdb.trace/limits.exp: Likewise.
	* gdb.trace/packetlen.exp: Likewise.
	* gdb.trace/passc-dyn.exp: Likewise.
	* gdb.trace/passcount.exp: Likewise.
	* gdb.trace/report.exp: Likewise.
	* gdb.trace/save-trace.exp: Likewise.
	* gdb.trace/tfind.exp: Likewise.
	* gdb.trace/tracecmd.exp: Likewise.
	* gdb.trace/while-dyn.exp: Likewise.
	* gdb.trace/while-stepping.exp: Likewise.
@
text
@d1 1
a1 1
# Copyright 2002, 2004 Free Software Foundation, Inc.
@


1.8
log
@2005-12-09  Randolph Chung  <tausq@@debian.org>

	* gdb.base/dump.exp: Mark hppa64-*-* as 64-bit target.
@
text
@d49 2
a50 1
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d69 2
a70 1
    gdb_suppress_entire_file "Program failed to run, so all tests in this file will automatically fail."
d281 2
a282 1
    gdb_suppress_entire_file "Program failed to run, so remaining tests in this file will automatically fail."
@


1.8.14.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d49 1
a49 2
     untested dump.exp
     return -1
d68 1
a68 2
    untested dump.exp
    return -1
d279 1
a279 2
    untested dump.exp
    return -1
@


1.7
log
@2004-08-01  Andrew Cagney  <cagney@@gnu.org>

	Fix PR testsuite/1729.
	* gdb.base/dump.exp: Add test name to callers of capture_value, do
	not use capture_value with value 4.
	(capture_value): Add optional test name parameter.
	(test_reload_saved_value, test_restore_saved_value): Use $msg as
	the prefix, pass to capture_value.
@
text
@d44 1
a44 1
if [istarget "ia64*-*-*"] then {
@


1.6
log
@2004-02-17  Ulrich Weigand <Ulrich.Weigand@@de.ibm.com>

	Committed by Jim Blandy  <jimb@@redhat.com>.

	* gdb.base/dump.exp: Handle negative offsets in decimal, not hex.
@
text
@d116 1
a116 1
proc capture_value { expression } {
d121 10
a130 4
    send_gdb "print ${expression}\n"
    gdb_expect {
	-re ".*\[\r\n\]+.\[0123456789\]+ = (\[^\r\n\]+).*$gdb_prompt $" {
	    set output_string $expect_out(1,string)
d132 4
a135 2
	default {
	    fail "capture_value failed on $expression."
d193 2
a194 1
if { ![string compare $array_val [capture_value "intarray"]] } then {
d200 2
a201 1
if { ![string compare $struct_val [capture_value "intstruct"]] } then {
d211 3
a213 2
    if { ![string compare $oldval [capture_value $newval]] } then { 
	pass $msg 
d215 1
a215 1
	fail $msg 
d223 5
a227 5
	    "Restoring .*" \
	    "Restore command, $msg"

    if { ![string compare $oldval [capture_value $newval]] } then { 
	pass "Restored value, $msg"
d229 1
a229 1
	fail "Restored value, $msg"
d282 2
a283 1
if { ![string compare $array_val [capture_value "intarray"]] } then {
d289 2
a290 1
if { ![string compare $struct_val [capture_value "intstruct"]] } then {
d436 1
a436 2
	"array partial, srec" \
	[capture_value "4"] "intarray\[3\]"
d444 1
a444 2
	"array partial, ihex" \
	[capture_value "4"] "intarray\[3\]"
d452 1
a452 2
	"array partial, tekhex" \
	[capture_value "4"] "intarray\[3\]"
d462 1
a462 2
    "array partial, binary" \
    [capture_value "4"] "intarray\[3\]"
d473 1
a473 2
	"array partial with expressions" \
	[capture_value "4"] "intarray2\[3\]"
a481 1

@


1.6.2.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d116 1
a116 1
proc capture_value { expression args } {
d121 4
a124 10
    if {[llength $args] > 0} {
	# Convert $args into a simple string.
	set test "[join $args]; capture $expression"
    } {
	set test "capture $expression"
    }
    gdb_test_multiple "print ${expression}" "$test" {
	-re "\\$\[0-9\]+ = (\[^\r\n\]+).*$gdb_prompt $" {
	    set output_string "$expect_out(1,string)"
	    pass "$test"
d126 2
a127 4
	-re "(Cannot access memory at address \[^\r\n\]+).*$gdb_prompt $" {
	    # Even a failed value is valid
	    set output_string "$expect_out(1,string)"
	    pass "$test"
d185 1
a185 2
if { ![string compare $array_val \
	   [capture_value "intarray" "file binfile"]] } then {
d191 1
a191 2
if { ![string compare $struct_val \
	   [capture_value "intstruct" "file binfile"]] } then {
d201 2
a202 3
    if { ![string compare $oldval \
	       [capture_value $newval "$msg"]] } then { 
	pass "$msg; value restored ok"
d204 1
a204 1
	fail "$msg; value restored ok"
d212 5
a216 5
	"Restoring .*" \
	"$msg; file restored ok"
    if { ![string compare $oldval \
	       [capture_value $newval "$msg"]] } then { 
	pass "$msg; value restored ok"
d218 1
a218 1
	fail "$msg; value restored ok"
d271 1
a271 2
if { ![string compare $array_val \
	   [capture_value "intarray" "load binfile"]] } then {
d277 1
a277 2
if { ![string compare $struct_val \
	   [capture_value "intstruct" "load binfile"]] } then {
d423 2
a424 1
	"array partial, srec" 4 "intarray\[3\]"
d432 2
a433 1
	"array partial, ihex" 4 "intarray\[3\]"
d441 2
a442 1
	"array partial, tekhex" 4 "intarray\[3\]"
d452 2
a453 1
    "array partial, binary" 4 "intarray\[3\]"
d464 2
a465 1
	"array partial with expressions" 4 "intarray2\[3\]"
d474 1
@


1.5
log
@Reviewed and approved by drow@@mvista.com:

	2004-02-01  Fred Fish  <fnf@@redhat.com>
	* gdb.base/dump.exp: Use runto_main instead of "runto main".
	* gdb.base/finish.exp: Ditto.
	* gdb.base/gcore.exp: Ditto.
	* gdb.base/huge.exp: Ditto.
	* gdb.base/info-proc.exp: Ditto.
	* gdb.base/return2.exp: Ditto.
	* gdb.threads/gcore-thread.exp: Ditto.
@
text
@d356 1
a356 1
	[capture_value "/x (char *) &intarray2 - (char *) &intarray"]
d358 1
a358 1
	[capture_value "/x (char *) &intstruct2 - (char *) &intstruct"]
@


1.4
log
@
2003-08-28  Jeff Johnston  <jjohnstn@@redhat.com>

        * gdb.base/dump.exp: Skip for ia64.
@
text
@d1 1
a1 1
# Copyright 2002 Free Software Foundation, Inc.
d267 1
a267 1
if { ! [ runto main ] } then {
@


1.4.2.1
log
@merge mainline changes into branch
@
text
@d1 1
a1 1
# Copyright 2002, 2004 Free Software Foundation, Inc.
d267 1
a267 1
if { ! [ runto_main ] } then {
d356 1
a356 1
	[capture_value "(char *) &intarray2 - (char *) &intarray"]
d358 1
a358 1
	[capture_value "(char *) &intstruct2 - (char *) &intstruct"]
@


1.3
log
@	* gdb.base/dump.exp [alpha*-*-*]: Add -taso linker switch.
@
text
@d36 2
d44 4
d222 3
a224 1
test_reload_saved_value "intarr1.srec" "reload array as value, srec" \
d226 1
a226 1
test_reload_saved_value "intstr1.srec" "reload struct as value, srec" \
d228 1
a228 1
test_reload_saved_value "intarr2.srec" "reload array as memory, srec" \
d230 1
a230 1
test_reload_saved_value "intstr2.srec" "reload struct as memory, srec" \
d232 4
d237 1
a237 1
test_reload_saved_value "intarr1.ihex" "reload array as value, intel hex" \
d239 1
a239 1
test_reload_saved_value "intstr1.ihex" "reload struct as value, intel hex" \
d241 1
a241 1
test_reload_saved_value "intarr2.ihex" "reload array as memory, intel hex" \
d243 1
a243 1
test_reload_saved_value "intstr2.ihex" "reload struct as memory, intel hex" \
d245 1
d247 3
a249 1
test_reload_saved_value "intarr1.tekhex" "reload array as value, tekhex" \
d251 1
a251 1
test_reload_saved_value "intstr1.tekhex" "reload struct as value, tekhex" \
d253 1
a253 1
test_reload_saved_value "intarr2.tekhex" "reload array as memory, tekhex" \
d255 1
a255 1
test_reload_saved_value "intstr2.tekhex" "reload struct as memory, tekhex" \
d257 1
d283 2
a284 1
test_restore_saved_value "intarr1.srec" "array as value, srec" \
d287 1
a287 1
test_restore_saved_value "intstr1.srec" "struct as value, srec" \
d290 1
a290 1
gdb_test "print zero_all ()" "void" "zero all"
d292 1
a292 1
test_restore_saved_value "intarr2.srec" "array as memory, srec" \
d295 1
a295 1
test_restore_saved_value "intstr2.srec" "struct as memory, srec" \
d298 1
a298 1
gdb_test "print zero_all ()" ""
d300 1
a300 1
test_restore_saved_value "intarr1.ihex" "array as value, ihex" \
d303 1
a303 1
test_restore_saved_value "intstr1.ihex" "struct as value, ihex" \
d306 1
a306 1
gdb_test "print zero_all ()" ""
d308 1
a308 1
test_restore_saved_value "intarr2.ihex" "array as memory, ihex" \
d311 1
a311 1
test_restore_saved_value "intstr2.ihex" "struct as memory, ihex" \
d314 1
a314 1
gdb_test "print zero_all ()" ""
d316 1
a316 1
test_restore_saved_value "intarr1.tekhex" "array as value, tekhex" \
d319 1
a319 1
test_restore_saved_value "intstr1.tekhex" "struct as value, tekhex" \
d322 1
a322 1
gdb_test "print zero_all ()" ""
d324 1
a324 1
test_restore_saved_value "intarr2.tekhex" "array as memory, tekhex" \
d327 1
a327 1
test_restore_saved_value "intstr2.tekhex" "struct as memory, tekhex" \
d329 1
d362 3
a364 1
test_restore_saved_value "intarr1.srec $array2_offset" \
d368 1
a368 1
test_restore_saved_value "intstr1.srec $struct2_offset" \
d372 1
a372 1
gdb_test "print zero_all ()" ""
d374 1
a374 1
test_restore_saved_value "intarr1.ihex $array2_offset" \
d378 1
a378 1
test_restore_saved_value "intstr1.ihex $struct2_offset" \
d382 1
a382 1
gdb_test "print zero_all ()" ""
d384 1
a384 1
test_restore_saved_value "intarr1.tekhex $array2_offset" \
d388 1
a388 1
test_restore_saved_value "intstr1.tekhex $struct2_offset" \
d391 1
d419 2
a420 1
gdb_test "print zero_all ()" ""
d422 1
a422 1
test_restore_saved_value "intarr1.srec 0 $element3_start $element4_start" \
d426 2
a427 2
gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 1"
gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 1"
d429 1
a429 1
gdb_test "print zero_all ()" ""
d431 1
a431 1
test_restore_saved_value "intarr1.ihex 0 $element3_start $element4_start" \
d435 2
a436 2
gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 2"
gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 2"
d438 1
a438 1
gdb_test "print zero_all ()" ""
d440 1
a440 1
test_restore_saved_value "intarr1.tekhex 0 $element3_start $element4_start" \
d444 3
a446 2
gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 3"
gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 3"
d458 2
a459 1
gdb_test "print zero_all ()" "" ""
d461 2
a462 2
# restore with expressions 
test_restore_saved_value \
d467 3
a469 3
gdb_test "print intarray2\[2\] == 0" " = 1" "element 2 not changed, == 4"
gdb_test "print intarray2\[4\] == 0" " = 1" "element 4 not changed, == 4"

@


1.2
log
@2003-02-05  Michael Chastain  <mec@@shout.net>

	* gdb.base/dump.exp: Add missing copyright line.
@
text
@d34 1
d36 7
a42 1
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
@


1.1
log
@2002-03-26  Michael Snyder  <msnyder@@redhat.com>

	* gdb.base/default.exp: Add tests for dump, append, and restore.
	* gdb.base/help.exp: Add tests for dump, append, and restore.
	* gdb.base/dump.exp: New file, test dump, append and restore.
	* gdb.base/dump.c: New file.
@
text
@d1 1
@


1.1.16.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a0 1
# Copyright 2002 Free Software Foundation, Inc.
a32 1
set options  {debug}
d34 1
a34 13
set is64bitonly "no"

if [istarget "alpha*-*-*"] then {
    # SREC etc cannot handle 64-bit addresses.  Force the test
    # program into the low 31 bits of the address space.
    lappend options "additional_flags=-Wl,-taso"
}

if [istarget "ia64*-*-*"] then {
    set is64bitonly "yes"
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable ${options}] != "" } {
d208 1
a208 3
# srec format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
  test_reload_saved_value "intarr1.srec" "reload array as value, srec" \
d210 1
a210 1
  test_reload_saved_value "intstr1.srec" "reload struct as value, srec" \
d212 1
a212 1
  test_reload_saved_value "intarr2.srec" "reload array as memory, srec" \
d214 1
a214 1
  test_reload_saved_value "intstr2.srec" "reload struct as memory, srec" \
a215 4
}

# ihex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
d217 1
a217 1
  test_reload_saved_value "intarr1.ihex" "reload array as value, intel hex" \
d219 1
a219 1
  test_reload_saved_value "intstr1.ihex" "reload struct as value, intel hex" \
d221 1
a221 1
  test_reload_saved_value "intarr2.ihex" "reload array as memory, intel hex" \
d223 1
a223 1
  test_reload_saved_value "intstr2.ihex" "reload struct as memory, intel hex" \
a224 1
}
d226 1
a226 3
# tekhex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
  test_reload_saved_value "intarr1.tekhex" "reload array as value, tekhex" \
d228 1
a228 1
  test_reload_saved_value "intstr1.tekhex" "reload struct as value, tekhex" \
d230 1
a230 1
  test_reload_saved_value "intarr2.tekhex" "reload array as memory, tekhex" \
d232 1
a232 1
  test_reload_saved_value "intstr2.tekhex" "reload struct as memory, tekhex" \
a233 1
}
d259 1
a259 2
if ![string compare $is64bitonly "no"] then {
  test_restore_saved_value "intarr1.srec" "array as value, srec" \
d262 1
a262 1
  test_restore_saved_value "intstr1.srec" "struct as value, srec" \
d265 1
a265 1
  gdb_test "print zero_all ()" "void" "zero all"
d267 1
a267 1
  test_restore_saved_value "intarr2.srec" "array as memory, srec" \
d270 1
a270 1
  test_restore_saved_value "intstr2.srec" "struct as memory, srec" \
d273 1
a273 1
  gdb_test "print zero_all ()" ""
d275 1
a275 1
  test_restore_saved_value "intarr1.ihex" "array as value, ihex" \
d278 1
a278 1
  test_restore_saved_value "intstr1.ihex" "struct as value, ihex" \
d281 1
a281 1
  gdb_test "print zero_all ()" ""
d283 1
a283 1
  test_restore_saved_value "intarr2.ihex" "array as memory, ihex" \
d286 1
a286 1
  test_restore_saved_value "intstr2.ihex" "struct as memory, ihex" \
d289 1
a289 1
  gdb_test "print zero_all ()" ""
d291 1
a291 1
  test_restore_saved_value "intarr1.tekhex" "array as value, tekhex" \
d294 1
a294 1
  test_restore_saved_value "intstr1.tekhex" "struct as value, tekhex" \
d297 1
a297 1
  gdb_test "print zero_all ()" ""
d299 1
a299 1
  test_restore_saved_value "intarr2.tekhex" "array as memory, tekhex" \
d302 1
a302 1
  test_restore_saved_value "intstr2.tekhex" "struct as memory, tekhex" \
a303 1
}
d336 1
a336 3

if ![string compare $is64bitonly "no"] then {
  test_restore_saved_value "intarr1.srec $array2_offset" \
d340 1
a340 1
  test_restore_saved_value "intstr1.srec $struct2_offset" \
d344 1
a344 1
  gdb_test "print zero_all ()" ""
d346 1
a346 1
  test_restore_saved_value "intarr1.ihex $array2_offset" \
d350 1
a350 1
  test_restore_saved_value "intstr1.ihex $struct2_offset" \
d354 1
a354 1
  gdb_test "print zero_all ()" ""
d356 1
a356 1
  test_restore_saved_value "intarr1.tekhex $array2_offset" \
d360 1
a360 1
  test_restore_saved_value "intstr1.tekhex $struct2_offset" \
a362 1
}
d390 1
a390 2
if ![string compare $is64bitonly "no"] then {
  gdb_test "print zero_all ()" ""
d392 1
a392 1
  test_restore_saved_value "intarr1.srec 0 $element3_start $element4_start" \
d396 2
a397 2
  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 1"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 1"
d399 1
a399 1
  gdb_test "print zero_all ()" ""
d401 1
a401 1
  test_restore_saved_value "intarr1.ihex 0 $element3_start $element4_start" \
d405 2
a406 2
  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 2"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 2"
d408 1
a408 1
  gdb_test "print zero_all ()" ""
d410 1
a410 1
  test_restore_saved_value "intarr1.tekhex 0 $element3_start $element4_start" \
d414 2
a415 3
  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 3"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 3"
}
d427 1
a427 2
if ![string compare $is64bitonly "no"] then {
  gdb_test "print zero_all ()" "" ""
d429 2
a430 2
  # restore with expressions 
  test_restore_saved_value \
d435 3
a437 3
  gdb_test "print intarray2\[2\] == 0" " = 1" "element 2 not changed, == 4"
  gdb_test "print intarray2\[4\] == 0" " = 1" "element 4 not changed, == 4"
}
@


1.1.16.2
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d1 1
a1 1
# Copyright 2002, 2004 Free Software Foundation, Inc.
d267 1
a267 1
if { ! [ runto_main ] } then {
@


1.1.14.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a0 1
# Copyright 2002 Free Software Foundation, Inc.
@


1.1.14.2
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a33 1
set options  {debug}
d35 1
a35 7
if [istarget "alpha*-*-*"] then {
    # SREC etc cannot handle 64-bit addresses.  Force the test
    # program into the low 31 bits of the address space.
    lappend options "additional_flags=-Wl,-taso"
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable ${options}] != "" } {
@


1.1.14.3
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@a35 2
set is64bitonly "no"

a41 4
if [istarget "ia64*-*-*"] then {
    set is64bitonly "yes"
}

d216 1
a216 3
# srec format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
  test_reload_saved_value "intarr1.srec" "reload array as value, srec" \
d218 1
a218 1
  test_reload_saved_value "intstr1.srec" "reload struct as value, srec" \
d220 1
a220 1
  test_reload_saved_value "intarr2.srec" "reload array as memory, srec" \
d222 1
a222 1
  test_reload_saved_value "intstr2.srec" "reload struct as memory, srec" \
a223 4
}

# ihex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
d225 1
a225 1
  test_reload_saved_value "intarr1.ihex" "reload array as value, intel hex" \
d227 1
a227 1
  test_reload_saved_value "intstr1.ihex" "reload struct as value, intel hex" \
d229 1
a229 1
  test_reload_saved_value "intarr2.ihex" "reload array as memory, intel hex" \
d231 1
a231 1
  test_reload_saved_value "intstr2.ihex" "reload struct as memory, intel hex" \
a232 1
}
d234 1
a234 3
# tekhex format can not be loaded for 64-bit-only platforms
if ![string compare $is64bitonly "no"] then {
  test_reload_saved_value "intarr1.tekhex" "reload array as value, tekhex" \
d236 1
a236 1
  test_reload_saved_value "intstr1.tekhex" "reload struct as value, tekhex" \
d238 1
a238 1
  test_reload_saved_value "intarr2.tekhex" "reload array as memory, tekhex" \
d240 1
a240 1
  test_reload_saved_value "intstr2.tekhex" "reload struct as memory, tekhex" \
a241 1
}
d267 1
a267 2
if ![string compare $is64bitonly "no"] then {
  test_restore_saved_value "intarr1.srec" "array as value, srec" \
d270 1
a270 1
  test_restore_saved_value "intstr1.srec" "struct as value, srec" \
d273 1
a273 1
  gdb_test "print zero_all ()" "void" "zero all"
d275 1
a275 1
  test_restore_saved_value "intarr2.srec" "array as memory, srec" \
d278 1
a278 1
  test_restore_saved_value "intstr2.srec" "struct as memory, srec" \
d281 1
a281 1
  gdb_test "print zero_all ()" ""
d283 1
a283 1
  test_restore_saved_value "intarr1.ihex" "array as value, ihex" \
d286 1
a286 1
  test_restore_saved_value "intstr1.ihex" "struct as value, ihex" \
d289 1
a289 1
  gdb_test "print zero_all ()" ""
d291 1
a291 1
  test_restore_saved_value "intarr2.ihex" "array as memory, ihex" \
d294 1
a294 1
  test_restore_saved_value "intstr2.ihex" "struct as memory, ihex" \
d297 1
a297 1
  gdb_test "print zero_all ()" ""
d299 1
a299 1
  test_restore_saved_value "intarr1.tekhex" "array as value, tekhex" \
d302 1
a302 1
  test_restore_saved_value "intstr1.tekhex" "struct as value, tekhex" \
d305 1
a305 1
  gdb_test "print zero_all ()" ""
d307 1
a307 1
  test_restore_saved_value "intarr2.tekhex" "array as memory, tekhex" \
d310 1
a310 1
  test_restore_saved_value "intstr2.tekhex" "struct as memory, tekhex" \
a311 1
}
d344 1
a344 3

if ![string compare $is64bitonly "no"] then {
  test_restore_saved_value "intarr1.srec $array2_offset" \
d348 1
a348 1
  test_restore_saved_value "intstr1.srec $struct2_offset" \
d352 1
a352 1
  gdb_test "print zero_all ()" ""
d354 1
a354 1
  test_restore_saved_value "intarr1.ihex $array2_offset" \
d358 1
a358 1
  test_restore_saved_value "intstr1.ihex $struct2_offset" \
d362 1
a362 1
  gdb_test "print zero_all ()" ""
d364 1
a364 1
  test_restore_saved_value "intarr1.tekhex $array2_offset" \
d368 1
a368 1
  test_restore_saved_value "intstr1.tekhex $struct2_offset" \
a370 1
}
d398 1
a398 2
if ![string compare $is64bitonly "no"] then {
  gdb_test "print zero_all ()" ""
d400 1
a400 1
  test_restore_saved_value "intarr1.srec 0 $element3_start $element4_start" \
d404 2
a405 2
  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 1"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 1"
d407 1
a407 1
  gdb_test "print zero_all ()" ""
d409 1
a409 1
  test_restore_saved_value "intarr1.ihex 0 $element3_start $element4_start" \
d413 2
a414 2
  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 2"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 2"
d416 1
a416 1
  gdb_test "print zero_all ()" ""
d418 1
a418 1
  test_restore_saved_value "intarr1.tekhex 0 $element3_start $element4_start" \
d422 2
a423 3
  gdb_test "print intarray\[2\] == 0" " = 1" "element 2 not changed - 3"
  gdb_test "print intarray\[4\] == 0" " = 1" "element 4 not changed - 3"
}
d435 1
a435 2
if ![string compare $is64bitonly "no"] then {
  gdb_test "print zero_all ()" "" ""
d437 2
a438 2
  # restore with expressions 
  test_restore_saved_value \
d443 3
a445 3
  gdb_test "print intarray2\[2\] == 0" " = 1" "element 2 not changed, == 4"
  gdb_test "print intarray2\[4\] == 0" " = 1" "element 4 not changed, == 4"
}
@


