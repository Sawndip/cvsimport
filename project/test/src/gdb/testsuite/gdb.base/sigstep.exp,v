head	1.30;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.28
	gdb_7_6-2013-04-26-release:1.28
	gdb_7_6-branch:1.28.0.2
	gdb_7_6-2013-03-12-branchpoint:1.28
	gdb_7_5_1-2012-11-29-release:1.27
	gdb_7_5-2012-08-17-release:1.27
	gdb_7_5-branch:1.27.0.2
	gdb_7_5-2012-07-18-branchpoint:1.27
	gdb_7_4_1-2012-04-26-release:1.25.4.1
	gdb_7_4-2012-01-24-release:1.25.4.1
	gdb_7_4-branch:1.25.0.4
	gdb_7_4-2011-12-13-branchpoint:1.25
	gdb_7_3_1-2011-09-04-release:1.25
	gdb_7_3-2011-07-26-release:1.25
	gdb_7_3-branch:1.25.0.2
	gdb_7_3-2011-04-01-branchpoint:1.25
	gdb_7_2-2010-09-02-release:1.22
	gdb_7_2-branch:1.22.0.2
	gdb_7_2-2010-07-07-branchpoint:1.22
	gdb_7_1-2010-03-18-release:1.19
	gdb_7_1-branch:1.19.0.2
	gdb_7_1-2010-02-18-branchpoint:1.19
	gdb_7_0_1-2009-12-22-release:1.18
	gdb_7_0-2009-10-06-release:1.18
	gdb_7_0-branch:1.18.0.4
	gdb_7_0-2009-09-16-branchpoint:1.18
	arc-sim-20090309:1.16
	msnyder-checkpoint-072509-branch:1.18.0.2
	msnyder-checkpoint-072509-branchpoint:1.18
	arc-insight_6_8-branch:1.16.0.6
	arc-insight_6_8-branchpoint:1.16
	insight_6_8-branch:1.16.0.4
	insight_6_8-branchpoint:1.16
	reverse-20081226-branch:1.17.0.10
	reverse-20081226-branchpoint:1.17
	multiprocess-20081120-branch:1.17.0.8
	multiprocess-20081120-branchpoint:1.17
	reverse-20080930-branch:1.17.0.6
	reverse-20080930-branchpoint:1.17
	reverse-20080717-branch:1.17.0.4
	reverse-20080717-branchpoint:1.17
	msnyder-reverse-20080609-branch:1.17.0.2
	msnyder-reverse-20080609-branchpoint:1.17
	drow-reverse-20070409-branch:1.13.0.2
	drow-reverse-20070409-branchpoint:1.13
	gdb_6_8-2008-03-27-release:1.16
	gdb_6_8-branch:1.16.0.2
	gdb_6_8-2008-02-26-branchpoint:1.16
	gdb_6_7_1-2007-10-29-release:1.15
	gdb_6_7-2007-10-10-release:1.15
	gdb_6_7-branch:1.15.0.2
	gdb_6_7-2007-09-07-branchpoint:1.15
	insight_6_6-20070208-release:1.11
	gdb_6_6-2006-12-18-release:1.11
	gdb_6_6-branch:1.11.0.8
	gdb_6_6-2006-11-15-branchpoint:1.11
	insight_6_5-20061003-release:1.11
	gdb-csl-symbian-6_4_50_20060226-12:1.10
	gdb-csl-sourcerygxx-3_4_4-25:1.10
	nickrob-async-20060828-mergepoint:1.11
	gdb-csl-symbian-6_4_50_20060226-11:1.10
	gdb-csl-sourcerygxx-4_1-17:1.10
	gdb-csl-20060226-branch-local-2:1.10
	gdb-csl-sourcerygxx-4_1-14:1.10
	gdb-csl-sourcerygxx-4_1-13:1.10
	gdb-csl-sourcerygxx-4_1-12:1.10
	gdb-csl-sourcerygxx-3_4_4-21:1.10
	gdb_6_5-20060621-release:1.11
	gdb-csl-sourcerygxx-4_1-9:1.10
	gdb-csl-sourcerygxx-4_1-8:1.10
	gdb-csl-sourcerygxx-4_1-7:1.10
	gdb-csl-arm-2006q1-6:1.10
	gdb-csl-sourcerygxx-4_1-6:1.10
	gdb-csl-symbian-6_4_50_20060226-10:1.10
	gdb-csl-symbian-6_4_50_20060226-9:1.10
	gdb-csl-symbian-6_4_50_20060226-8:1.10
	gdb-csl-coldfire-4_1-11:1.10
	gdb-csl-sourcerygxx-3_4_4-19:1.10
	gdb-csl-coldfire-4_1-10:1.10
	gdb_6_5-branch:1.11.0.6
	gdb_6_5-2006-05-14-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-5:1.10
	nickrob-async-20060513-branch:1.11.0.4
	nickrob-async-20060513-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-4:1.10
	msnyder-reverse-20060502-branch:1.11.0.2
	msnyder-reverse-20060502-branchpoint:1.11
	gdb-csl-morpho-4_1-4:1.10
	gdb-csl-sourcerygxx-3_4_4-17:1.10
	readline_5_1-import-branch:1.10.0.18
	readline_5_1-import-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.10
	gdb-csl-symbian-20060226-branch:1.10.0.16
	gdb-csl-symbian-20060226-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.10
	msnyder-reverse-20060331-branch:1.10.0.14
	msnyder-reverse-20060331-branchpoint:1.10
	gdb-csl-available-20060303-branch:1.10.0.12
	gdb-csl-available-20060303-branchpoint:1.10
	gdb-csl-20060226-branch:1.10.0.10
	gdb-csl-20060226-branchpoint:1.10
	gdb_6_4-20051202-release:1.10
	msnyder-fork-checkpoint-branch:1.10.0.8
	msnyder-fork-checkpoint-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.10.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.10.0.4
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb-csl-arm-20051020-branch:1.10.0.2
	gdb-csl-arm-20051020-branchpoint:1.10
	gdb-csl-arm-20050325-2005-q1b:1.9
	gdb-csl-arm-20050325-2005-q1a:1.9
	csl-arm-20050325-branch:1.9.0.4
	csl-arm-20050325-branchpoint:1.9
	gdb-post-i18n-errorwarning-20050211:1.9
	gdb-pre-i18n-errorwarning-20050211:1.9
	gdb_6_3-20041109-release:1.9
	gdb_6_3-branch:1.9.0.2
	gdb_6_3-20041019-branchpoint:1.9
	drow_intercu-merge-20040921:1.8
	drow_intercu-20040221-branch:1.8.0.2
	drow_intercu-merge-20040915:1.8
	jimb-gdb_6_2-e500-branch:1.3.0.6
	jimb-gdb_6_2-e500-branchpoint:1.3
	gdb_6_2-20040730-release:1.3
	gdb_6_2-branch:1.3.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.3;
locks; strict;
comment	@# @;


1.30
date	2013.06.27.18.58.28;	author tromey;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.07.17.31.08;	author palves;	state Exp;
branches;
next	1.28;

1.28
date	2013.01.01.06.33.26;	author brobecke;	state Exp;
branches;
next	1.27;

1.27
date	2012.01.16.16.21.45;	author palves;	state Exp;
branches;
next	1.26;

1.26
date	2012.01.04.08.17.46;	author brobecke;	state Exp;
branches;
next	1.25;

1.25
date	2011.03.07.16.03.02;	author tromey;	state Exp;
branches
	1.25.4.1;
next	1.24;

1.24
date	2011.01.01.15.33.42;	author brobecke;	state Exp;
branches;
next	1.23;

1.23
date	2010.11.30.17.41.14;	author devans;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.01.21.29.21;	author msnyder;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.25.21.01.59;	author tromey;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.05.18.06.58;	author brobecke;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.01.07.32.01;	author brobecke;	state Exp;
branches;
next	1.18;

1.18
date	2009.01.03.05.58.03;	author brobecke;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.27.23.42.20;	author devans;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.01.22.53.19;	author drow;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.23.18.14.17;	author brobecke;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.25.15.56.15;	author vprus;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.09.17.59.11;	author drow;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.31.20.01.25;	author drow;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.01.16.39.36;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.18.19.23.54;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.23.20.29.30;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.02.09.47.38;	author chastain;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2004.08.31.14.43.18;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.30.16.59.45;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.25.15.26.19;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.09.13.16.16;	author drow;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.11.16.57.04;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.23.16.44.25;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.17.19.28;	author cagney;	state Exp;
branches;
next	;

1.25.4.1
date	2012.01.06.04.44.01;	author brobecke;	state Exp;
branches;
next	;

1.8.2.1
date	2004.09.16.17.01.41;	author drow;	state Exp;
branches;
next	;


desc
@@


1.30
log
@test suite update - gdb.base/s*

Convert files gdb.base/s*.exp to use standard_output_file et al.

	* gdb.base/save-bp.exp, gdb.base/savedregs.exp,
	gdb.base/scope.exp, gdb.base/sep.exp, gdb.base/sepsymtab.exp,
	gdb.base/set-lang-auto.exp, gdb.base/setshow.exp,
	gdb.base/setvar.exp, gdb.base/shlib-call.exp,
	gdb.base/shreloc.exp, gdb.base/sigall.exp,
	gdb.base/sigaltstack.exp, gdb.base/sigbpt.exp,
	gdb.base/sigchld.exp, gdb.base/siginfo-addr.exp,
	gdb.base/siginfo-infcall.exp, gdb.base/siginfo-obj.exp,
	gdb.base/siginfo.exp, gdb.base/signals.exp, gdb.base/signest.exp,
	gdb.base/signull.exp, gdb.base/sigrepeat.exp,
	gdb.base/sigstep.exp, gdb.base/sizeof.exp,
	gdb.base/skip-solib.exp, gdb.base/so-impl-ld.exp,
	gdb.base/solib-display.exp, gdb.base/solib-nodir.exp,
	gdb.base/solib-overlap.exp, gdb.base/solib-symbol.exp,
	gdb.base/solib-weak.exp, gdb.base/source.exp,
	gdb.base/stack-checking.exp, gdb.base/stale-infcall.exp,
	gdb.base/stap-probe.exp, gdb.base/start.exp,
	gdb.base/step-break.exp, gdb.base/step-bt.exp,
	gdb.base/step-line.exp, gdb.base/step-resume-infcall.exp,
	gdb.base/step-test.exp, gdb.base/structs.exp,
	gdb.base/structs2.exp, gdb.base/structs3.exp,
	gdb.base/symbol-without-target_section.exp: Use standard_testfile,
	standard_output_file, prepare_for_testing, clean_restart.
@
text
@# Copyright 2004-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# The program sigstep.c creates a very simple backtrace containing one
# signal handler and signal trampoline.  A flag is set and then the
# handler returns.  This is repeated at infinitum.

# This test runs the program up to the signal handler, and then
# attempts to step/next out of the handler and back into main.

if [target_info exists gdb,nosignals] {
    verbose "Skipping sigstep.exp because of nosignals."
    continue
}


standard_testfile

if {[prepare_for_testing $testfile.exp $testfile $srcfile debug]} {
    untested $testfile.exp
    return -1
}

gdb_test "display/i \$pc"

# Advance to main
if { ![runto_main] } then {
    gdb_suppress_tests
}

# Pass all the alarms straight through (but verbosely)
# gdb_test "handle SIGALRM print pass nostop"
# gdb_test "handle SIGVTALRM print pass nostop"
# gdb_test "handle SIGPROF print pass nostop"

# Run to the signal handler, validate the backtrace.
gdb_test "break handler"
gdb_test "continue" ".* handler .*" "continue to stepi handler"
gdb_test_sequence "bt" "backtrace for nexti" {
    "\[\r\n\]+.0 \[^\r\n\]* handler "
    "\[\r\n\]+.1  .signal handler called."
    "\[\r\n\]+.2 \[^\r\n\]* main "
}

proc advance { i } {
    global gdb_prompt inferior_exited_re
    set prefix "$i from handler"

    # Get us back into the handler
    gdb_test "continue" ".* handler .*" "$prefix; continue to handler"

    set test "$prefix; leave handler"
    gdb_test_multiple "$i" "${test}" {
	-re "Could not insert single-step breakpoint.*$gdb_prompt $" {
	    setup_kfail gdb/1736 "sparc*-*-openbsd*"
	    fail "$test (could not insert single-step breakpoint)"
	}
	-re "done = 1;.*${gdb_prompt} $" {
	    send_gdb "$i\n"
	    exp_continue -continue_timer
	}
	-re "\} .. handler .*${gdb_prompt} $" {
	    send_gdb "$i\n"
	    exp_continue -continue_timer
	}
	-re "$inferior_exited_re normally.*${gdb_prompt} $" {
	    setup_kfail gdb/1639 powerpc-*-*bsd*
	    fail "$test (program exited)"
	}
	-re "(while ..done|done = 0).*${gdb_prompt} $" {
	    # After stepping out of a function /r signal-handler, GDB will
	    # advance the inferior until it is at the first instruction of
	    # a code-line.  While typically things return to the middle of
	    # the "while..." (and hence GDB advances the inferior to the
	    # "return..." line) it is also possible for the return to land
	    # on the first instruction of "while...".  Accept both cases.
	    pass "$test"
	}
    }
}

proc advancei { i } {
    global gdb_prompt inferior_exited_re
    set prefix "$i from handleri"
    set program_exited 0

    # Get us back into the handler
    gdb_test "continue" ".* handler .*" "$prefix; continue to handler"

    set test "$prefix; leave handler"
    gdb_test_multiple "$i" "${test}" {
        -re "Cannot insert breakpoint 0.*${gdb_prompt} $" {
            # Some platforms use a special read-only page for signal
            # trampolines.  We can't set a breakpoint there, and we
            # don't gracefully fall back to single-stepping.
            setup_kfail gdb/1736 "i?86-*-linux*"
	    setup_kfail gdb/1736 "*-*-openbsd*"
            fail "$test (could not set breakpoint)"
	    return
        }
	-re "Could not insert single-step breakpoint.*$gdb_prompt $" {
	    setup_kfail gdb/1736 "sparc*-*-openbsd*"
	    fail "$test (could not insert single-step breakpoint)"
	}
	-re "Breakpoint \[0-9\]*, handler .*${gdb_prompt} $" {
	    fail "$test (hit breakpoint again)"
	}
	-re "done = 1;.*${gdb_prompt} $" {
	    send_gdb "$i\n"
	    exp_continue -continue_timer
	}
	-re "\} .. handler .*${gdb_prompt} $" {
	    send_gdb "$i\n"
	    exp_continue -continue_timer
	}
	-re "signal handler called.*${gdb_prompt} $" {
	    pass "$test"
	}
	-re "main .*${gdb_prompt} $" {
	    fail "$test (in main)"
	}
	-re "$inferior_exited_re normally.*${gdb_prompt} $" {
	    fail "$test (program exited)"
	    set program_exited 1
	}
	-re "Make handler return now.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue -continue_timer
	}
    }

    set test "$prefix; leave signal trampoline"
    gdb_test_multiple "$i" "${test}" {
	-re "while .*${gdb_prompt} $" {
	    pass "$test (in main)"
	}
	-re "signal handler called.*${gdb_prompt} $" {
	    send_gdb "$i\n"
	    exp_continue -continue_timer
	}
	-re "return .*${gdb_prompt} $" {
	    fail "$test (stepped)"
	}
	-re "Make .*frame return now.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue -continue_timer
	}
	-re "$inferior_exited_re normally.*${gdb_prompt} $" {
	    kfail gdb/1639 "$test (program exited)"
	    set program_exited 1
	}
	-re "The program is not being run.*${gdb_prompt} $" {
	    if { $program_exited } {
		# Previously kfailed with an exit
		pass "$test (the program is not being run)"
	    } else {
		fail "$test (the program is not being run)"
	    }
	}
    }
}

# Check that we can step/next our way out of a signal handler.

advance step
advancei stepi

advance next
advancei nexti

advancei finish
advancei return
gdb_test_no_output "set done = 1" "Set done as return will have skipped it"


# Check that we can step/next our way into / over a signal handler.

# There are at least the following cases: breakpoint @@pc VS breakpoint
# in handler VS step / next / continue.

# Use the real-time itimer, as otherwize the process never gets enough
# time to expire the timer.

delete_breakpoints
set infinite_loop [gdb_get_line_number {while (!done)}]
gdb_test_no_output "set itimer = itimer_real"
gdb_test "break [gdb_get_line_number {done = 0}]"

# Try stepping when there's a signal pending, and a breakpoint at the
# handler.  Should step into the signal handler.

proc skip_to_handler { i } {
    global gdb_prompt
    global infinite_loop
    set prefix "$i to handler"
    
    # Run around to the done
    # You can add more patterns to this if you need them.
    set test "$prefix; resync"
    gdb_test_multiple "continue" "$test" {
	-re "done = 0.*$gdb_prompt " {
	    pass "$test"
	}
    }
    
    # Advance to the infinite loop
    gdb_test "advance $infinite_loop" ".*" "$prefix; advance to infinite loop"

    # Make the signal pending
    sleep 1
    
    # Insert / remove the handler breakpoint.
    gdb_test "break handler" ".*" "$prefix; break handler"
    gdb_test "$i" " handler .*" "$prefix; performing $i"
    gdb_test "clear handler" ".*" "$prefix; clear handler"
}

skip_to_handler step
skip_to_handler next
skip_to_handler continue

# Try stepping when there's a signal pending, and a breakpoint at the
# handler's entry-point.  Should step into the signal handler stopping
# at the entry-point.

# Some systems (e.x., GNU/Linux as of 2004-08-30), when delivering a
# signal, resume the process at the first instruction of the signal
# handler and not the first instruction of the signal trampoline.  The
# stack is constructed such that the signal handler still appears to
# have been called by the trampoline code.  This test checks that it
# is possible to stop the inferior, even at that first instruction.

proc skip_to_handler_entry { i } {
    global gdb_prompt
    global infinite_loop
    set prefix "$i to handler entry"
    
    # Run around to the done
    # You can add more patterns to this if you need them.
    set test "$prefix; resync"
    gdb_test_multiple "continue" "$test" {
	-re "done = 0.*$gdb_prompt " {
	    pass "$test"
	}
    }
    
    # Advance to the infinite loop
    gdb_test "advance $infinite_loop" ".*" "$prefix; advance to infinite loop"

    # Make the signal pending
    sleep 1
    
    # Insert / remove the handler breakpoint.
    gdb_test "break *handler" ".*" "$prefix; break handler"
    gdb_test "$i" " handler .*" "$prefix; performing $i"
    gdb_test "clear *handler" ".*" "$prefix; clear handler"
}

skip_to_handler_entry step
skip_to_handler_entry next
skip_to_handler_entry continue

# Try stepping when there's a signal pending but no breakpoints.
# Should skip the handler advancing to the next line.

proc skip_over_handler { i } {
    global gdb_prompt
    global infinite_loop
    set prefix "$i over handler"
    
    # Run around to the done
    # You can add more patterns to this if you need them.
    set test "$prefix; resync"
    gdb_test_multiple "continue" "$test" {
	-re "done = 0.*$gdb_prompt " {
	    pass "$test"
	}
    }
    
    # Advance to the infinite loop
    gdb_test "advance $infinite_loop" ".*" "$prefix; advance to infinite loop"

    # Make the signal pending
    sleep 1
    
    gdb_test "$i" "done = 0.*" "$prefix; performing $i"
}

skip_over_handler step
skip_over_handler next
skip_over_handler continue

# Try stepping when there's a signal pending, a pre-existing
# breakpoint at the current instruction, and a breakpoint in the
# handler.  Should advance to the signal handler.

proc breakpoint_to_handler { i } {
    global gdb_prompt
    global infinite_loop
    set prefix "$i on breakpoint, to handler"
    
    # Run around to the done
    # You can add more patterns to this if you need them.
    set test "$prefix; resync"
    gdb_test_multiple "continue" "$test" {
	-re "done = 0.*$gdb_prompt " {
	    pass "$test"
	}
    }
    
    gdb_test "break $infinite_loop" ".*" "$prefix; break infinite loop"
    gdb_test "break handler" ".*" "$prefix; break handler"

    # Continue to the infinite loop
    gdb_test "continue" "while ..done.*" "$prefix; continue to infinite loop"

    # Make the signal pending
    sleep 1
    
    gdb_test "$i" " handler .*" "$prefix; performing $i"
    gdb_test "clear $infinite_loop" ".*" "$prefix; clear infinite loop"
    gdb_test "clear handler" ".*" "$prefix; clear handler"
}

breakpoint_to_handler step
breakpoint_to_handler next
breakpoint_to_handler continue

# Try stepping when there's a signal pending, and a breakpoint at the
# handler's entry instruction and a breakpoint at the current
# instruction.  Should step into the signal handler and breakpoint at
# that entry instruction.

# Some systems (e.x., GNU/Linux as of 2004-08-30), when delivering a
# signal, resume the process at the first instruction of the signal
# handler and not the first instruction of the signal trampoline.  The
# stack is constructed such that the signal handler still appears to
# have been called by the trampoline code.  This test checks that it
# is possible to stop the inferior, even at that first instruction.

proc breakpoint_to_handler_entry { i } {
    global gdb_prompt
    global infinite_loop
    set prefix "$i on breakpoint, to handler entry"
    
    # Run around to the done
    # You can add more patterns to this if you need them.
    set test "$prefix; resync"
    gdb_test_multiple "continue" "$test" {
	-re "done = 0.*$gdb_prompt " {
	    pass "$test"
	}
    }
    
    gdb_test "break $infinite_loop" ".*" "$prefix; break infinite loop"
    gdb_test "break *handler" ".*" "$prefix; break handler"

    # Continue to the infinite loop
    gdb_test "continue" "while ..done.*" "$prefix; continue to infinite loop"

    # Make the signal pending
    sleep 1
    
    gdb_test "$i" " handler .*" "$prefix; performing $i"
    gdb_test "clear $infinite_loop" ".*" "$prefix; clear infinite loop"
    gdb_test "clear *handler" ".*" "$prefix; clear handler"
}

breakpoint_to_handler_entry step
breakpoint_to_handler_entry next
breakpoint_to_handler_entry continue

# Try stepping when there's a signal pending, and a pre-existing
# breakpoint at the current instruction, and no breakpoint in the
# handler.  Should advance to the next line.

proc breakpoint_over_handler { i } {
    global gdb_prompt
    global infinite_loop
    set prefix "$i on breakpoint, skip handler"
    
    # Run around to the done
    # You can add more patterns to this if you need them.
    set test "$prefix; resync"
    gdb_test_multiple "continue" "$test" {
	-re "done = 0.*$gdb_prompt " {
	    pass "$test"
	}
    }
    
    gdb_test "break $infinite_loop" ".*" "$prefix; break infinite loop"

    # Continue to the infinite loop
    gdb_test "continue" "while ..done.*" "$prefix; continue to infinite loop"

    # Make the signal pending
    sleep 1
    
    gdb_test "$i" "done = 0.*" "$prefix; performing $i"
    gdb_test "clear $infinite_loop" ".*" "$prefix; clear infinite loop"
}

breakpoint_over_handler step
breakpoint_over_handler next
breakpoint_over_handler continue
@


1.29
log
@Remove superfluous semicolons from testsuite throughout.

A few months ago semicolons after "return" were removed throughout the
testsuite.  However, as I pointed out in review, they're unnecessary
not just after "return", but pretty much after any tcl command.  ';'
is the command separator, and you only need it if there's another
command on the same line afterwards.

This patch was written by running:

 $ find . -name "*.exp" | xargs grep -l ";\s*$" | xargs sed -i 's/\([^#][^\s*;]*\)\s*;\s*$/\1/'

and then undoing changes to comments, and lib/future.exp.

Tested on x86_64 Fedora 17.

gdb/testsuite/
2013-06-07  Pedro Alves  <palves@@redhat.com>

	* boards/native-extended-gdbserver.exp: Remove semicolon.
	* config/arm-ice.exp: Likewise.
	* config/bfin.exp: Likewise.
	* config/cygmon.exp: Likewise.
	* config/h8300.exp: Likewise.
	* config/monitor.exp: Likewise.
	* config/sid.exp: Likewise.
	* config/sim.exp: Likewise.
	* config/slite.exp: Likewise.
	* config/vx.exp: Likewise.
	* gdb.arch/i386-bp_permanent.exp: Likewise.
	* gdb.asm/asm-source.exp: Likewise.
	* gdb.base/args.exp: Likewise.
	* gdb.base/attach-pie-misread.exp: Likewise.
	* gdb.base/auxv.exp: Likewise.
	* gdb.base/bigcore.exp: Likewise.
	* gdb.base/bitfields2.exp: Likewise.
	* gdb.base/bitfields.exp: Likewise.
	* gdb.base/break.exp: Likewise.
	* gdb.base/break-interp.exp: Likewise.
	* gdb.base/callfuncs.exp: Likewise.
	* gdb.base/call-sc.exp: Likewise.
	* gdb.base/commands.exp: Likewise.
	* gdb.base/corefile.exp: Likewise.
	* gdb.base/dbx.exp: Likewise.
	* gdb.base/ending-run.exp: Likewise.
	* gdb.base/exprs.exp: Likewise.
	* gdb.base/funcargs.exp: Likewise.
	* gdb.base/hbreak2.exp: Likewise.
	* gdb.base/huge.exp: Likewise.
	* gdb.base/list.exp: Likewise.
	* gdb.base/memattr.exp: Likewise.
	* gdb.base/overlays.exp: Likewise.
	* gdb.base/printcmds.exp: Likewise.
	* gdb.base/recurse.exp: Likewise.
	* gdb.base/remotetimeout.exp: Likewise.
	* gdb.base/reread.exp: Likewise.
	* gdb.base/savedregs.exp: Likewise.
	* gdb.base/scope.exp: Likewise.
	* gdb.base/sepdebug.exp: Likewise.
	* gdb.base/setshow.exp: Likewise.
	* gdb.base/setvar.exp: Likewise.
	* gdb.base/sigaltstack.exp: Likewise.
	* gdb.base/siginfo-addr.exp: Likewise.
	* gdb.base/siginfo.exp: Likewise.
	* gdb.base/siginfo-obj.exp: Likewise.
	* gdb.base/sigrepeat.exp: Likewise.
	* gdb.base/sigstep.exp: Likewise.
	* gdb.base/structs.exp: Likewise.
	* gdb.base/testenv.exp: Likewise.
	* gdb.base/twice.exp: Likewise.
	* gdb.base/valgrind-db-attach.exp: Likewise.
	* gdb.base/valgrind-infcall.exp: Likewise.
	* gdb.base/varargs.exp: Likewise.
	* gdb.base/watchpoint.exp: Likewise.
	* gdb.cp/gdb1355.exp: Likewise.
	* gdb.cp/misc.exp: Likewise.
	* gdb.disasm/hppa.exp: Likewise.
	* gdb.disasm/t01_mov.exp: Likewise.
	* gdb.disasm/t02_mova.exp: Likewise.
	* gdb.disasm/t03_add.exp: Likewise.
	* gdb.disasm/t04_sub.exp: Likewise.
	* gdb.disasm/t05_cmp.exp: Likewise.
	* gdb.disasm/t06_ari2.exp: Likewise.
	* gdb.disasm/t07_ari3.exp: Likewise.
	* gdb.disasm/t08_or.exp: Likewise.
	* gdb.disasm/t09_xor.exp: Likewise.
	* gdb.disasm/t10_and.exp: Likewise.
	* gdb.disasm/t11_logs.exp: Likewise.
	* gdb.disasm/t12_bit.exp: Likewise.
	* gdb.disasm/t13_otr.exp: Likewise.
	* gdb.gdb/selftest.exp: Likewise.
	* gdb.hp/gdb.base-hp/callfwmall.exp: Likewise.
	* gdb.mi/mi-reverse.exp: Likewise.
	* gdb.pascal/floats.exp: Likewise.
	* gdb.python/py-inferior.exp: Likewise.
	* gdb.threads/attach-into-signal.exp: Likewise.
	* gdb.threads/pthreads.exp: Likewise.
	* gdb.threads/thread_events.exp: Likewise.
	* gdb.threads/watchthreads.exp: Likewise.
	* gdb.trace/actions-changed.exp: Likewise.
	* gdb.trace/actions.exp: Likewise.
	* gdb.trace/ax.exp: Likewise.
	* gdb.trace/backtrace.exp: Likewise.
	* gdb.trace/change-loc.exp: Likewise.
	* gdb.trace/deltrace.exp: Likewise.
	* gdb.trace/disconnected-tracing.exp: Likewise.
	* gdb.trace/ftrace.exp: Likewise.
	* gdb.trace/infotrace.exp: Likewise.
	* gdb.trace/passc-dyn.exp: Likewise.
	* gdb.trace/passcount.exp: Likewise.
	* gdb.trace/pending.exp: Likewise.
	* gdb.trace/qtro.exp: Likewise.
	* gdb.trace/range-stepping.exp: Likewise.
	* gdb.trace/report.exp: Likewise.
	* gdb.trace/save-trace.exp: Likewise.
	* gdb.trace/status-stop.exp: Likewise.
	* gdb.trace/strace.exp: Likewise.
	* gdb.trace/tfile.exp: Likewise.
	* gdb.trace/tfind.exp: Likewise.
	* gdb.trace/trace-break.exp: Likewise.
	* gdb.trace/tracecmd.exp: Likewise.
	* gdb.trace/trace-mt.exp: Likewise.
	* gdb.trace/tspeed.exp: Likewise.
	* gdb.trace/tsv.exp: Likewise.
	* gdb.trace/while-stepping.exp: Likewise.
	* lib/gdb.exp: Likewise.
	* lib/gdbserver-support.exp: Likewise.
	* lib/java.exp: Likewise.
	* lib/mi-support.exp: Likewise.
	* lib/pascal.exp: Likewise.
	* lib/prompt.exp: Likewise.
	* lib/trace-support.exp: Likewise.
@
text
@d30 4
a33 5
set testfile sigstep
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
    untested "Couldn't compile ${srcfile}.c"
a36 6
# get things started
gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

@


1.28
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d48 1
a48 1
    gdb_suppress_tests;
@


1.27
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d1 1
a1 1
# Copyright 2004-2012 Free Software Foundation, Inc.
@


1.26
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a28 4
if $tracelevel then {
    strace $tracelevel
}

@


1.25
log
@gdb
	* infrun.c (print_exited_reason): Include inferior id and pid in
	message.
gdb/testsuite
	* lib/opencl.exp (skip_opencl_tests): Update for exit message
	change.
	* lib/mi-support.exp (mi_gdb_test): Update for exit message
	change.
	* lib/gdb.exp (gdb_test_multiple): Update comment.  Update for
	exit message change.
	(skip_altivec_tests): Update for exit message change.
	(skip_vsx_tests): Likewise.
	(gdb_continue_to_end): Likewise.  Add 'command' argument.
	* lib/cell.exp (skip_cell_tests): Update for exit message change.
	* gdb.threads/tls.exp: Update for exit message change.
	* gdb.threads/thread-unwindonsignal.exp: Use
	gdb_continue_to_end.
	* gdb.threads/step.exp (step_it): Update for exit message change.
	(continue_all): Likewise.
	* gdb.threads/print-threads.exp (test_all_threads): Update for
	exit message change.
	* gdb.threads/interrupted-hand-call.exp: Use
	gdb_continue_to_end.
	* gdb.threads/execl.exp: Use gdb_continue_to_end.
	* gdb.python/py-prettyprint.exp (run_lang_tests): Use
	gdb_continue_to_end.
	* gdb.hp/gdb.objdbg/objdbg02.exp: Use gdb_continue_to_end.
	* gdb.hp/gdb.objdbg/objdbg01.exp: Use gdb_continue_to_end.
	* gdb.hp/gdb.defects/solib-d.exp: Update for exit message change.
	* gdb.cp/method.exp: Update for exit message change.
	* gdb.cp/mb-templates.exp: Update for exit message change.
	* gdb.cp/mb-inline.exp: Use gdb_continue_to_end.
	* gdb.cp/annota3.exp: Update for exit message change.
	* gdb.cp/annota2.exp: Update for exit message change.
	* gdb.cell/fork.exp: Use gdb_continue_to_end.
	* gdb.base/term.exp: Update for exit message change.
	* gdb.base/step-test.exp (test_i): Update for exit message change.
	* gdb.base/sigstep.exp (advance): Update for exit message change.
	(advancei): Likewise.
	* gdb.base/siginfo.exp: Update for exit message change.
	* gdb.base/shlib-call.exp: Use gdb_continue_to_end.
	* gdb.base/reread.exp: Use gdb_continue_to_end.
	* gdb.base/langs.exp: Use gdb_continue_to_end.
	* gdb.base/interrupt.exp: Update for exit message change.
	* gdb.base/gdb1555.exp: Update for exit message change.
	* gdb.base/exe-lock.exp: Use gdb_continue_to_end.
	* gdb.base/ending-run.exp: Update for exit message change.
	* gdb.base/chng-syms.exp: Update for exit message change.
	* gdb.base/checkpoint.exp: Update for exit message change.
	* gdb.base/catch-syscall.exp (check_for_program_end): Use
	gdb_continue_to_end.
	(test_catch_syscall_with_wrong_args): Likewise.
	* gdb.base/call-signal-resume.exp: Use gdb_continue_to_end.
	* gdb.base/break-interp.exp (test_ld): Update for exit message
	change.
	* gdb.base/bang.exp: Update for exit message change.
	* gdb.base/attach.exp (do_attach_tests): Use gdb_continue_to_end.
	(do_call_attach_tests): Likewise.
	* gdb.base/a2-run.exp: Update for exit message change.
	* gdb.arch/ppc-dfp.exp: Update for exit message change.
	* gdb.ada/tasks.exp: Use gdb_continue_to_end.
	* gdb.ada/catch_ex.exp: Use gdb_continue_to_end.
@
text
@d1 1
a1 2
# Copyright 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
# Free Software Foundation, Inc.
@


1.25.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 1
# Copyright 2004-2012 Free Software Foundation, Inc.
@


1.24
log
@run copyright.sh for 2011.
@
text
@d71 1
a71 1
    global gdb_prompt
d91 1
a91 1
	-re "Program exited normally.*${gdb_prompt} $" {
d108 1
a108 1
    global gdb_prompt
d147 1
a147 1
	-re "Program exited normally.*${gdb_prompt} $" {
d173 1
a173 1
	-re "Program exited normally.*${gdb_prompt} $" {
@


1.23
log
@	* lib/gdb.exp (gdb_test_sequence): Return result of gdb_expect_list.
	(gdb_expect_list): Fix spelling errors in comments.
	* gdb.arch/system-gcore.exp: Use gdb_test_sequence instead of
	send_gdb/gdb_expect_list where applicable.
	* gdb.base/call-ar-st.exp: Ditto.
	* gdb.base/funcargs.exp: Ditto.
	* gdb.base/gcore.exp: Ditto.
	* gdb.base/page.exp: Ditto.
	* gdb.base/sigaltstack.exp: Ditto.
	* gdb.base/siginfo.exp: Ditto.
	* gdb.base/sigstep.exp: Ditto.
	* gdb.base/trace-commands.exp: Ditto.
@
text
@d1 1
a1 1
# Copyright 2004, 2005, 2006, 2007, 2008, 2009, 2010
@


1.22
log
@2010-06-01  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/arithmet.exp: Use gdb_test_no_output.
	* gdb.base/arrayidx.exp: Ditto.
	* gdb.base/attach.exp: Ditto.
	* gdb.base/auxv.exp: Ditto.
	* gdb.base/bigcre.exp: Ditto.
	* gdb.base/break-always.exp: Ditto.
	* gdb.base/break-interp.exp: Ditto.
	* gdb.base/break.exp: Ditto.
	* gdb.base/breakpoint-shadow.exp: Ditto.
	* gdb.base/call-ar-st.exp: Ditto.
	* gdb.base/call-sc.exp: Ditto.
	* gdb.base/call-signal-resume.exp: Ditto.
	* gdb.base/callfuncs.exp: Ditto.
	* gdb.base/catch-syscall.exp: Ditto.
	* gdb.base/charset.exp: Ditto.
	* gdb.base/code-expr.exp: Ditto.
	* gdb.base/commands.exp: Ditto.
	* gdb.base/cond-expr.exp: Ditto.
	* gdb.base/condbreak.exp: Ditto.
	* gdb.base/cursal.exp: Ditto.
	* gdb.base/cvexpr.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* gdb.base/del.exp: Ditto.
	* gdb.base/detach.exp: Ditto.
	* gdb.base/display.exp: Ditto.
	* gdb.base/ena-dis-br.exp: Ditto.
	* gdb.base/eval-skip.exp: Ditto.
	* gdb.base/foll-fork.exp: Ditto.
	* gdb.base/foll-vfork.exp: Ditto.
	* gdb.base/frame-args.exp: Ditto.
	* gdb.base/funcargs.exp: Ditto.
	* gdb.base/gcore-buffer-overflow.exp: Ditto.
	* gdb.base/gdbvars.exp: Ditto.
	* gdb.base/help.exp: Ditto.
	* gdb.base/ifelse.exp: Ditto.
	* gdb.base/included.exp: Ditto.
	* gdb.base/list.exp: Ditto.
	* gdb.base/macscp.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/multi-fork.exp: Ditto.
	* gdb.base/overlays.exp: Ditto.
	* gdb.base/page.exp: Ditto.
	* gdb.base/pending.exp: Ditto.
	* gdb.base/pointers.exp: Ditto.
	* gdb.base/pr11022.exp: Ditto.
	* gdb.base/prelink.exp: Ditto.
	* gdb.base/printcmds.exp: Ditto.
	* gdb.base/psymtab.exp: Ditto.
	* gdb.base/randomize.exp: Ditto.
	* gdb.base/relational.exp: Ditto.
	* gdb.base/relocate.exp: Ditto.
	* gdb.base/remote.exp: Ditto.
	* gdb.base/sepdebug.exp: Ditto.
	* gdb.base/set-lang-auto.exp: Ditto.
	* gdb.base/setshow.exp: Ditto.
	* gdb.base/setvar.exp: Ditto.
	* gdb.base/signals.exp: Ditto.
	* gdb.base/signull.exp: Ditto.
	* gdb.base/sigstep.exp: Ditto.
	* gdb.base/sizeof.exp: Ditto.
	* gdb.base/solib-disc.exp: Ditto.
	* gdb.base/store.exp: Ditto.
	* gdb.base/structs.exp: Ditto.
	* gdb.base/structs2.exp: Ditto.
	* gdb.base/subst.exp: Ditto.
	* gdb.base/term.exp: Ditto.
	* gdb.base/trace-commands.exp: Ditto.
	* gdb.base/unwindonsignal.exp: Ditto.
	* gdb.base/valgrind-db-attach.exp: Ditto.
	* gdb.base/varargs.exp: Ditto.
	* gdb.base/watch-cond.exp: Ditto.
	* gdb.base/watch_thread_num.exp: Ditto.
	* gdb.base/watchpoint-cond-gone.exp: Ditto.
	* gdb.base/watchpoint.exp: Ditto.
	* gdb.base/whatis-exp.exp: Ditto.
@
text
@d64 1
a64 2
send_gdb "bt\n"
gdb_expect_list "backtrace for nexti" ".*$gdb_prompt $" {
d67 1
a67 1
    "\[\r\n\]+.2 \[^\r\n\]* main .*"
@


1.21
log
@	* gdb.arch/i386-prologue.exp (skip_breakpoint): Fix setup_kfail
	argument order.
	* gdb.base/macscp.exp: Fix setup_kfail argument order.
	* gdb.base/long_long.exp (gdb_test_xxx): Fix setup_kfail argument
	order.
	* gdb.base/sigbpt.exp (stepi_out): Fix setup_kfail argument
	order.
	* gdb.base/call-sc.exp (setup_kfails): Remove.
	(setup_compiler_kfails): Remove.
	* gdb.base/callfuncs.exp (do_function_calls): Fix setup_kfail
	argument order.
	* gdb.base/siginfo.exp: Fix setup_kfail argument order.
	* gdb.base/sigstep.exp (advance): Fix setup_kfail argument order.
	(advancei): Fix setup_kfail argument order.
	* gdb.base/radix.exp: Fix setup_kfail argument order.
	* gdb.base/solib-weak.exp (do_test): Fix setup_kfail argument
	order.
	* gdb.base/structs.exp (setup_kfails): Remove.
	(setup_compiler_kfails): Fix setup_kfail argument order.
	* gdb.base/sigaltstack.exp (finish_test): Fix setup_kfail argument
	order.
	* gdb.java/jmain.exp: Fix setup_kfail argument order.
	* gdb.pascal/types.exp (test_string_literal_types_accepted): Fix
	setup_kfail argument order.
	* gdb.cp/overload.exp: Fix setup_kfail argument order.
@
text
@d199 1
a199 1
gdb_test "set done = 1" "" "Set done as return will have skipped it"
d212 1
a212 1
gdb_test "set itimer = itimer_real"
d233 1
a233 1
    gdb_test "advance $infinite_loop" "" "$prefix; advance to infinite loop"
d239 1
a239 1
    gdb_test "break handler" "" "$prefix; break handler"
d241 1
a241 1
    gdb_test "clear handler" "" "$prefix; clear handler"
d274 1
a274 1
    gdb_test "advance $infinite_loop" "" "$prefix; advance to infinite loop"
d280 1
a280 1
    gdb_test "break *handler" "" "$prefix; break handler"
d282 1
a282 1
    gdb_test "clear *handler" "" "$prefix; clear handler"
d307 1
a307 1
    gdb_test "advance $infinite_loop" "" "$prefix; advance to infinite loop"
d337 2
a338 2
    gdb_test "break $infinite_loop" "" "$prefix; break infinite loop"
    gdb_test "break handler" "" "$prefix; break handler"
d347 2
a348 2
    gdb_test "clear $infinite_loop" "" "$prefix; clear infinite loop"
    gdb_test "clear handler" "" "$prefix; clear handler"
d381 2
a382 2
    gdb_test "break $infinite_loop" "" "$prefix; break infinite loop"
    gdb_test "break *handler" "" "$prefix; break handler"
d391 2
a392 2
    gdb_test "clear $infinite_loop" "" "$prefix; clear infinite loop"
    gdb_test "clear *handler" "" "$prefix; clear handler"
d417 1
a417 1
    gdb_test "break $infinite_loop" "" "$prefix; break infinite loop"
d426 1
a426 1
    gdb_test "clear $infinite_loop" "" "$prefix; clear infinite loop"
@


1.20
log
@Do not set prms_id/bug_id anymore.

2010-05-05  Joel Brobecker  <brobecker@@adacore.com>

	Remove the use of prms_id and bug_id throughout the testsuite.
@
text
@d81 1
a81 1
	    setup_kfail "sparc*-*-openbsd*" gdb/1736
d93 1
a93 1
	    setup_kfail powerpc-*-*bsd* gdb/1639
d122 2
a123 2
            setup_kfail "i?86-*-linux*" gdb/1736
	    setup_kfail "*-*-openbsd*" gdb/1736
d128 1
a128 1
	    setup_kfail "sparc*-*-openbsd*" gdb/1736
@


1.19
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@a33 2
set prms_id 0
set bug_id 0
@


1.18
log
@        Updated copyright notices for most files.
@
text
@d1 2
a2 1
# Copyright 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.17
log
@	* gdb.base/sigstep.exp (breakpoint_to_handler): Remove setup_kfail
	for bug 1738.
	(breakpoint_to_handler_entry): Ditto.
@
text
@d1 1
a1 1
# Copyright 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
@


1.16
log
@	Updated copyright notices for most files.
@
text
@a346 1
    setup_kfail "i*86-*-*" gdb/1738
a390 1
    setup_kfail "i*86-*-*" gdb/1738
@


1.15
log
@        Switch the license of all .exp files to GPLv3.
        Switch the license of all .f and .f90 files to GPLv3.
        Switch the license of all .s and .S files to GPLv3.
@
text
@d1 1
a1 1
# Copyright 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
@


1.14
log
@	* gdb.base/sigaltstack.exp: Use 'srcfile' in error
	message, not the undefined 'module' variable.
	* gdb.base/siginfo.exp: Likewise.
	* gdb.base/sigstep.exp: Likewise.
	* lib/gdbserver-support.exp (gdb_target_cmd): Quote
	serialport.
	* lib/mi-support.exp (mi_gdb_target_cmd): Likewise.
@
text
@d5 1
a5 1
# the Free Software Foundation; either version 2 of the License, or
d7 1
a7 1
# 
d12 1
a12 1
# 
d14 1
a14 2
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.13
log
@Copyright updates for 2007.
@
text
@d41 1
a41 1
    untested "Couldn't compile ${module}.c"
@


1.12
log
@	* gdb.base/annota1.exp: Allow .*printf in backtraces.
	* gdb.base/annota3.exp: Likewise.
	* gdb.base/sigstep.exp (advancei): Fail if we hit the breakpoint
	again (instead of timing out).
	* gdb.gdb/selftest.exp (do_steps_and_nexts): Add an XFAIL for
	GCC bug 26475.
	* gdb.java/jmisc.exp: Adjust to work with method signatures including
	return types.  Add kfails for GDB bugs 2214 and 2215.  Move exit
	test from jmisc1.exp.
	* gdb.java/jmisc1.exp: Delete.
	* gdb.java/jprint.exp: Adjust to work with method signatures including
	return types.
	* gdb.objc/basicclass.exp: Update for gobjc 4.1 debug info.
	* gdb.threads/linux-dp.exp: Don't be confused by program output.
	* lib/java.exp (compile_java_from_source): Pass the correct type
	to target_compile.
@
text
@d1 1
a1 1
# Copyright 2004, 2005, 2006 Free Software Foundation, Inc.
@


1.11
log
@* gdb.base/sigbpt.exp (stepi_out): FAIL when inserting a
single-step breakpoint fails; make this a KFAIL on
sparc*-*-openbsd*.
* gdb.base/siginfo.exp: Likewise.
* gdb.base/sigstep.exp (advance, advancei): Likewise.
@
text
@d1 1
a1 1
# Copyright 2004 Free Software Foundation, Inc.
d133 3
@


1.10
log
@* gdb.base/sigaltstack.exp (finish_test): KFAIL gdb/1736 on
*-*-openbsd*.
* gdb.base/sigstep.exp (advancei): KFAIL gdb/1736 on *-*-openbsd*.
@
text
@d82 4
d129 4
@


1.9
log
@* gdb.base/sigstep.exp: Avoid comments withing gdb_test_multiple
block.
@
text
@d121 1
@


1.8
log
@2004-09-02  Michael Chastain  <mec.gnu@@mindspring.com>

	* gdb.base/sigstep.exp (advance): Use "-continue_timer" option
	of "exp_continue".
	(advancei): Likewise.
@
text
@d214 1
a219 1
	# other patterns can go here
d255 1
a260 1
	# other patterns can go here
d288 1
a293 1
	# other patterns can go here
d319 1
a324 1
	# other patterns can go here
d364 1
a369 1
	# other patterns can go here
d401 1
a406 1
	# other patterns can go here
@


1.8.2.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@@


1.7
log
@2004-08-31  Andrew Cagney  <cagney@@gnu.org>

	* gdb.base/sigstep.exp (breakpoint_to_handler_entry)
	(skip_to_handler_entry): New procedures.  Test stepping into a
	handler when the breakpoint is at the handler's entry point.
@
text
@d84 1
a84 1
	    exp_continue
d88 1
a88 1
	    exp_continue
d126 1
a126 1
	    exp_continue
d130 1
a130 1
	    exp_continue
d144 1
a144 1
	    exp_continue
d155 1
a155 1
	    exp_continue
d162 1
a162 1
	    exp_continue
@


1.6
log
@2004-08-30  Andrew Cagney  <cagney@@gnu.org>

	Fix PR breakpoints/1757.
	* infrun.c (struct execution_control_state): Replace
	remove_breakpoints_on_following_step with
	step_after_step_resume_breakpoint.
	(init_execution_control_state): Update.
	(handle_inferior_event): For signals, when stepping off a
	breakpoint, set step_after_step_resume_breakpoint.  When
	BPSTAT_WHAT_STEP_RESUME, do a single-step off the breakpoint.
	(keep_going): Delete code handling
	remove_breakpoints_on_following_step.

Index: testsuite/ChangeLog
2004-08-30  Andrew Cagney  <cagney@@gnu.org>

	* gdb.base/sigstep.exp (breakpoint_over_handler): Remove kfail
	gdb/1757.
@
text
@d238 41
d346 45
@


1.5
log
@2004-08-25  Andrew Cagney  <cagney@@gnu.org>

	* gdb.base/sigstep.exp (breakpoint_to_handler, skip_to_handler)
	(skip_over_handler, breakpoint_over_hander): New test procedures.
	(advance, advancei): Add a proper prefix, do not use
	rerun_to_main.
	* gdb.base/sigstep.c (main): Change to use an infinite loop.
@
text
@a330 1
    setup_kfail "powerpc*-*-*" gdb/1757
@


1.4
log
@	PR gdb/1736
	* lib/gdb.exp (gdb_test_multiple): Handle return -code return.
	* gdb.base/sigaltstack.exp (finish_test): Consume output until
	the prompt.
	* gdb.base/sigstep.exp: Add KFAIL for gdb/1736.
@
text
@d19 2
a20 1
# signal handler and signal trampoline.
d23 1
a23 1
# attempts to step/next the inferior back to main.
d75 1
d78 1
a78 2
    rerun_to_main
    gdb_test "continue" ".* handler .*" "continue to handler for $i"
d80 1
a80 1
    set test "$i out of handler"
d94 1
a94 1
	-re "(while ..done|return 0).*${gdb_prompt} $" {
d108 1
d112 1
a112 2
    rerun_to_main
    gdb_test "continue" ".* handler .*" "continue to handler for $i"
d114 1
a114 1
    set test "$i into signal trampoline"
d148 1
a148 1
    set test "$i out of signal trampoline"
d179 2
d189 150
@


1.3
log
@2004-05-11  Andrew Cagney  <cagney@@redhat.com>

	* infrun.c (handle_inferior_event): Simplify code handling
	step-into or return-from a signal trampoline.

Index: testsuite/ChangeLog
2004-05-11  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/sigstep.exp (advancei): Update KFAILs.  gdb/1613 is
	fixed but revealed gdb/1639.
@
text
@d115 8
@


1.2
log
@2004-04-23  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/siginfo.exp: Clean up step out of signal.
	* gdb.base/sigstep.exp: Ditto.
@
text
@d90 2
a91 1
	    kfail gdb/1613 "$test (program exited)"
d126 3
d130 1
a130 1
	    kfail gdb/1613 "$test (program exited)"
a132 3
	-re "main .*${gdb_prompt} $" {
	    fail "$test (in main)"
	}
d155 4
d162 1
a162 1
		pass "$test (The program is not being run)"
d164 1
a164 1
		fail "$test"
@


1.1
log
@2004-04-21  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/sigstep.c: New file.
	* gdb.base/sigstep.exp: New file.
@
text
@d90 1
a90 1
	    kfail gdb/1613 "$test (Program exited normally)"
d92 7
a98 9
	-re "while ..done.*${gdb_prompt} $" {
	    # After stepping out of a function, GDB might find that
	    # the inferior is already at the first instruction of this
	    # line.
	    pass "$test"
	}
	-re "return 0.*${gdb_prompt} $" {
	    # After stepping out of a function, GDB will advance the
	    # inferior to the start of the next line.
d126 1
a126 1
	    kfail gdb/1613 "$test (Program exited normally)"
@

