head	1.70;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.65
	gdb_7_6-2013-04-26-release:1.65
	gdb_7_6-branch:1.65.0.2
	gdb_7_6-2013-03-12-branchpoint:1.65
	gdb_7_5_1-2012-11-29-release:1.57
	gdb_7_5-2012-08-17-release:1.57
	gdb_7_5-branch:1.57.0.2
	gdb_7_5-2012-07-18-branchpoint:1.57
	gdb_7_4_1-2012-04-26-release:1.53.2.1
	gdb_7_4-2012-01-24-release:1.53.2.1
	gdb_7_4-branch:1.53.0.2
	gdb_7_4-2011-12-13-branchpoint:1.53
	gdb_7_3_1-2011-09-04-release:1.50
	gdb_7_3-2011-07-26-release:1.50
	gdb_7_3-branch:1.50.0.2
	gdb_7_3-2011-04-01-branchpoint:1.50
	gdb_7_2-2010-09-02-release:1.46
	gdb_7_2-branch:1.46.0.2
	gdb_7_2-2010-07-07-branchpoint:1.46
	gdb_7_1-2010-03-18-release:1.42
	gdb_7_1-branch:1.42.0.2
	gdb_7_1-2010-02-18-branchpoint:1.42
	gdb_7_0_1-2009-12-22-release:1.39
	gdb_7_0-2009-10-06-release:1.39
	gdb_7_0-branch:1.39.0.4
	gdb_7_0-2009-09-16-branchpoint:1.39
	arc-sim-20090309:1.28
	msnyder-checkpoint-072509-branch:1.39.0.2
	msnyder-checkpoint-072509-branchpoint:1.39
	arc-insight_6_8-branch:1.28.0.6
	arc-insight_6_8-branchpoint:1.28
	insight_6_8-branch:1.28.0.4
	insight_6_8-branchpoint:1.28
	reverse-20081226-branch:1.35.0.2
	reverse-20081226-branchpoint:1.35
	multiprocess-20081120-branch:1.34.0.2
	multiprocess-20081120-branchpoint:1.34
	reverse-20080930-branch:1.33.0.2
	reverse-20080930-branchpoint:1.33
	reverse-20080717-branch:1.32.0.2
	reverse-20080717-branchpoint:1.32
	msnyder-reverse-20080609-branch:1.31.0.2
	msnyder-reverse-20080609-branchpoint:1.31
	drow-reverse-20070409-branch:1.26.0.2
	drow-reverse-20070409-branchpoint:1.26
	gdb_6_8-2008-03-27-release:1.28
	gdb_6_8-branch:1.28.0.2
	gdb_6_8-2008-02-26-branchpoint:1.28
	gdb_6_7_1-2007-10-29-release:1.27
	gdb_6_7-2007-10-10-release:1.27
	gdb_6_7-branch:1.27.0.2
	gdb_6_7-2007-09-07-branchpoint:1.27
	insight_6_6-20070208-release:1.25
	gdb_6_6-2006-12-18-release:1.25
	gdb_6_6-branch:1.25.0.2
	gdb_6_6-2006-11-15-branchpoint:1.25
	insight_6_5-20061003-release:1.22
	gdb-csl-symbian-6_4_50_20060226-12:1.21.28.1.2.1
	gdb-csl-sourcerygxx-3_4_4-25:1.21
	nickrob-async-20060828-mergepoint:1.24
	gdb-csl-symbian-6_4_50_20060226-11:1.21.28.1
	gdb-csl-sourcerygxx-4_1-17:1.21.28.2
	gdb-csl-20060226-branch-local-2:1.21.28.2
	gdb-csl-sourcerygxx-4_1-14:1.21.28.2
	gdb-csl-sourcerygxx-4_1-13:1.21.28.2
	gdb-csl-sourcerygxx-4_1-12:1.21.28.2
	gdb-csl-sourcerygxx-3_4_4-21:1.21.28.2
	gdb_6_5-20060621-release:1.22
	gdb-csl-sourcerygxx-4_1-9:1.21.28.2
	gdb-csl-sourcerygxx-4_1-8:1.21.28.2
	gdb-csl-sourcerygxx-4_1-7:1.21.28.2
	gdb-csl-arm-2006q1-6:1.21.28.2
	gdb-csl-sourcerygxx-4_1-6:1.21.28.2
	gdb-csl-symbian-6_4_50_20060226-10:1.21.28.1
	gdb-csl-symbian-6_4_50_20060226-9:1.21.28.1
	gdb-csl-symbian-6_4_50_20060226-8:1.21.28.1
	gdb-csl-coldfire-4_1-11:1.21.28.2
	gdb-csl-sourcerygxx-3_4_4-19:1.21.28.2
	gdb-csl-coldfire-4_1-10:1.21.28.2
	gdb_6_5-branch:1.22.0.10
	gdb_6_5-2006-05-14-branchpoint:1.22
	gdb-csl-sourcerygxx-4_1-5:1.21.28.2
	nickrob-async-20060513-branch:1.22.0.8
	nickrob-async-20060513-branchpoint:1.22
	gdb-csl-sourcerygxx-4_1-4:1.21.28.2
	msnyder-reverse-20060502-branch:1.22.0.6
	msnyder-reverse-20060502-branchpoint:1.22
	gdb-csl-morpho-4_1-4:1.21.28.1
	gdb-csl-sourcerygxx-3_4_4-17:1.21.28.1
	readline_5_1-import-branch:1.22.0.4
	readline_5_1-import-branchpoint:1.22
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.21.28.1
	gdb-csl-symbian-20060226-branch:1.21.28.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.21.28.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.21.28.1
	msnyder-reverse-20060331-branch:1.22.0.2
	msnyder-reverse-20060331-branchpoint:1.22
	gdb-csl-available-20060303-branch:1.21.0.30
	gdb-csl-available-20060303-branchpoint:1.21
	gdb-csl-20060226-branch:1.21.0.28
	gdb-csl-20060226-branchpoint:1.21
	gdb_6_4-20051202-release:1.21
	msnyder-fork-checkpoint-branch:1.21.0.26
	msnyder-fork-checkpoint-branchpoint:1.21
	gdb-csl-gxxpro-6_3-branch:1.21.0.24
	gdb-csl-gxxpro-6_3-branchpoint:1.21
	gdb_6_4-branch:1.21.0.22
	gdb_6_4-2005-11-01-branchpoint:1.21
	gdb-csl-arm-20051020-branch:1.21.0.20
	gdb-csl-arm-20051020-branchpoint:1.21
	gdb-csl-arm-20050325-2005-q1b:1.21
	gdb-csl-arm-20050325-2005-q1a:1.21
	csl-arm-20050325-branch:1.21.0.18
	csl-arm-20050325-branchpoint:1.21
	gdb-post-i18n-errorwarning-20050211:1.21
	gdb-pre-i18n-errorwarning-20050211:1.21
	gdb_6_3-20041109-release:1.21
	gdb_6_3-branch:1.21.0.14
	gdb_6_3-20041019-branchpoint:1.21
	drow_intercu-merge-20040921:1.21
	drow_intercu-merge-20040915:1.21
	jimb-gdb_6_2-e500-branch:1.21.0.16
	jimb-gdb_6_2-e500-branchpoint:1.21
	gdb_6_2-20040730-release:1.21
	gdb_6_2-branch:1.21.0.12
	gdb_6_2-2004-07-10-gmt-branchpoint:1.21
	gdb_6_1_1-20040616-release:1.21
	gdb_6_1-2004-04-05-release:1.21
	drow_intercu-merge-20040402:1.21
	drow_intercu-merge-20040327:1.21
	ezannoni_pie-20040323-branch:1.21.0.10
	ezannoni_pie-20040323-branchpoint:1.21
	cagney_tramp-20040321-mergepoint:1.21
	cagney_tramp-20040309-branch:1.21.0.8
	cagney_tramp-20040309-branchpoint:1.21
	gdb_6_1-branch:1.21.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.21
	drow_intercu-20040221-branch:1.21.0.4
	drow_intercu-20040221-branchpoint:1.21
	cagney_bfdfile-20040213-branch:1.21.0.2
	cagney_bfdfile-20040213-branchpoint:1.21
	drow-cplus-merge-20040208:1.21
	carlton_dictionary-20040126-merge:1.20
	cagney_bigcore-20040122-branch:1.20.0.2
	cagney_bigcore-20040122-branchpoint:1.20
	drow-cplus-merge-20040113:1.19
	drow-cplus-merge-20031224:1.19
	drow-cplus-merge-20031220:1.19
	carlton_dictionary-20031215-merge:1.19
	drow-cplus-merge-20031214:1.19
	carlton-dictionary-20031111-merge:1.18
	gdb_6_0-2003-10-04-release:1.16.16.1
	kettenis_sparc-20030918-branch:1.18.0.6
	kettenis_sparc-20030918-branchpoint:1.18
	carlton_dictionary-20030917-merge:1.18
	ezannoni_pie-20030916-branchpoint:1.18
	ezannoni_pie-20030916-branch:1.18.0.4
	cagney_x86i386-20030821-branch:1.18.0.2
	cagney_x86i386-20030821-branchpoint:1.18
	carlton_dictionary-20030805-merge:1.17
	carlton_dictionary-20030627-merge:1.16
	gdb_6_0-branch:1.16.0.16
	gdb_6_0-2003-06-23-branchpoint:1.16
	jimb-ppc64-linux-20030613-branch:1.16.0.14
	jimb-ppc64-linux-20030613-branchpoint:1.16
	cagney_convert-20030606-branch:1.16.0.12
	cagney_convert-20030606-branchpoint:1.16
	cagney_writestrings-20030508-branch:1.16.0.10
	cagney_writestrings-20030508-branchpoint:1.16
	jimb-ppc64-linux-20030528-branch:1.16.0.8
	jimb-ppc64-linux-20030528-branchpoint:1.16
	carlton_dictionary-20030523-merge:1.16
	cagney_fileio-20030521-branch:1.16.0.6
	cagney_fileio-20030521-branchpoint:1.16
	kettenis_i386newframe-20030517-mergepoint:1.16
	jimb-ppc64-linux-20030509-branch:1.16.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.16
	kettenis_i386newframe-20030504-mergepoint:1.16
	carlton_dictionary-20030430-merge:1.16
	kettenis_i386newframe-20030419-branch:1.16.0.2
	kettenis_i386newframe-20030419-branchpoint:1.16
	carlton_dictionary-20030416-merge:1.15
	cagney_frameaddr-20030409-mergepoint:1.15
	kettenis_i386newframe-20030406-branch:1.14.0.18
	kettenis_i386newframe-20030406-branchpoint:1.14
	cagney_frameaddr-20030403-branchpoint:1.14
	cagney_frameaddr-20030403-branch:1.14.0.16
	cagney_framebase-20030330-mergepoint:1.14
	cagney_framebase-20030326-branch:1.14.0.14
	cagney_framebase-20030326-branchpoint:1.14
	cagney_lazyid-20030317-branch:1.14.0.12
	cagney_lazyid-20030317-branchpoint:1.14
	kettenis-i386newframe-20030316-mergepoint:1.14
	offbyone-20030313-branch:1.14.0.10
	offbyone-20030313-branchpoint:1.14
	kettenis-i386newframe-20030308-branch:1.14.0.8
	kettenis-i386newframe-20030308-branchpoint:1.14
	carlton_dictionary-20030305-merge:1.14
	cagney_offbyone-20030303-branch:1.14.0.6
	cagney_offbyone-20030303-branchpoint:1.14
	carlton_dictionary-20030207-merge:1.14
	interps-20030203-mergepoint:1.14
	interps-20030202-branch:1.14.0.4
	interps-20030202-branchpoint:1.14
	cagney-unwind-20030108-branch:1.14.0.2
	cagney-unwind-20030108-branchpoint:1.14
	carlton_dictionary-20021223-merge:1.13
	gdb_5_3-2002-12-12-release:1.13
	carlton_dictionary-20021115-merge:1.13
	kseitz_interps-20021105-merge:1.13
	kseitz_interps-20021103-merge:1.13
	drow-cplus-merge-20021020:1.13
	drow-cplus-merge-20021025:1.13
	carlton_dictionary-20021025-merge:1.13
	carlton_dictionary-20021011-merge:1.13
	drow-cplus-branch:1.13.0.12
	drow-cplus-branchpoint:1.13
	kseitz_interps-20020930-merge:1.13
	carlton_dictionary-20020927-merge:1.13
	carlton_dictionary-branch:1.13.0.10
	carlton_dictionary-20020920-branchpoint:1.13
	gdb_5_3-branch:1.13.0.8
	gdb_5_3-2002-09-04-branchpoint:1.13
	kseitz_interps-20020829-merge:1.13
	cagney_sysregs-20020825-branch:1.13.0.6
	cagney_sysregs-20020825-branchpoint:1.13
	readline_4_3-import-branch:1.13.0.4
	readline_4_3-import-branchpoint:1.13
	gdb_5_2_1-2002-07-23-release:1.11
	kseitz_interps-20020528-branch:1.13.0.2
	kseitz_interps-20020528-branchpoint:1.13
	cagney_regbuf-20020515-branch:1.12.0.4
	cagney_regbuf-20020515-branchpoint:1.12
	jimb-macro-020506-branch:1.12.0.2
	jimb-macro-020506-branchpoint:1.12
	gdb_5_2-2002-04-29-release:1.11
	gdb_5_2-branch:1.11.0.2
	gdb_5_2-2002-03-03-branchpoint:1.11
	gdb_5_1_1-2002-01-24-release:1.5.2.1
	gdb_5_1_0_1-2002-01-03-release:1.5.2.1
	cygnus_cvs_20020108_pre:1.10
	gdb_5_1_0_1-2002-01-03-branch:1.5.2.1.0.2
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5.2.1
	gdb_5_1-2001-11-21-release:1.5.2.1
	gdb_s390-2001-09-26-branch:1.5.0.4
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.2
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	gdb-post-ptid_t-2001-05-03:1.2
	gdb-pre-ptid_t-2001-05-03:1.2
	insight-precleanup-2001-01-01:1.1.1.3
	gdb-post-protoization-2000-07-29:1.1.1.3
	gdb-pre-protoization-2000-07-29:1.1.1.3
	gdb-premipsmulti-2000-06-06-branch:1.1.1.3.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.3
	gdb-post-params-removal-2000-06-04:1.1.1.3
	gdb-pre-params-removal-2000-06-04:1.1.1.3
	gdb-post-params-removal-2000-05-28:1.1.1.3
	gdb-pre-params-removal-2000-05-28:1.1.1.3
	gdb_5_0-2000-05-19-release:1.1.1.3
	gdb_4_18_2-2000-05-18-release:1.1.1.3
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.3
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.3
	gdb_5_0-2000-04-10-branch:1.1.1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.3
	repo-unification-2000-02-06:1.1.1.3
	insight-2000-02-04:1.1.1.3
	gdb-2000-02-04:1.1.1.3
	gdb-2000-02-02:1.1.1.3
	gdb-2000-02-01:1.1.1.3
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.3
	gdb-1999-12-07:1.1.1.3
	gdb-1999-12-06:1.1.1.3
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.3
	gdb-1999-09-21:1.1.1.3
	gdb-1999-09-13:1.1.1.3
	gdb-1999-09-08:1.1.1.3
	gdb-1999-08-30:1.1.1.3
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.70
date	2013.06.27.18.49.03;	author tromey;	state Exp;
branches;
next	1.69;

1.69
date	2013.04.13.14.14.08;	author qiyao;	state Exp;
branches;
next	1.68;

1.68
date	2013.04.10.15.11.12;	author palves;	state Exp;
branches;
next	1.67;

1.67
date	2013.03.29.15.21.23;	author qiyao;	state Exp;
branches;
next	1.66;

1.66
date	2013.03.14.13.34.02;	author qiyao;	state Exp;
branches;
next	1.65;

1.65
date	2013.01.17.16.27.35;	author tromey;	state Exp;
branches;
next	1.64;

1.64
date	2013.01.14.21.03.54;	author tromey;	state Exp;
branches;
next	1.63;

1.63
date	2013.01.01.06.33.25;	author brobecke;	state Exp;
branches;
next	1.62;

1.62
date	2012.12.07.20.09.11;	author tromey;	state Exp;
branches;
next	1.61;

1.61
date	2012.12.07.19.58.10;	author tromey;	state Exp;
branches;
next	1.60;

1.60
date	2012.11.20.21.02.36;	author vapier;	state Exp;
branches;
next	1.59;

1.59
date	2012.11.12.17.41.58;	author tromey;	state Exp;
branches;
next	1.58;

1.58
date	2012.08.10.05.03.13;	author vapier;	state Exp;
branches;
next	1.57;

1.57
date	2012.06.21.20.46.21;	author tromey;	state Exp;
branches;
next	1.56;

1.56
date	2012.01.16.16.21.44;	author palves;	state Exp;
branches;
next	1.55;

1.55
date	2012.01.04.08.17.45;	author brobecke;	state Exp;
branches;
next	1.54;

1.54
date	2011.12.13.17.22.08;	author palves;	state Exp;
branches;
next	1.53;

1.53
date	2011.05.04.14.46.17;	author jkratoch;	state Exp;
branches
	1.53.2.1;
next	1.52;

1.52
date	2011.05.04.14.40.42;	author palves;	state Exp;
branches;
next	1.51;

1.51
date	2011.05.02.17.52.28;	author palves;	state Exp;
branches;
next	1.50;

1.50
date	2011.02.23.19.20.39;	author msnyder;	state Exp;
branches;
next	1.49;

1.49
date	2011.01.01.15.33.41;	author brobecke;	state Exp;
branches;
next	1.48;

1.48
date	2010.09.30.17.51.39;	author tromey;	state Exp;
branches;
next	1.47;

1.47
date	2010.08.18.19.02.34;	author tromey;	state Exp;
branches;
next	1.46;

1.46
date	2010.05.05.18.06.57;	author brobecke;	state Exp;
branches;
next	1.45;

1.45
date	2010.04.26.18.37.14;	author tromey;	state Exp;
branches;
next	1.44;

1.44
date	2010.04.04.23.47.16;	author shebs;	state Exp;
branches;
next	1.43;

1.43
date	2010.03.24.21.28.13;	author drow;	state Exp;
branches;
next	1.42;

1.42
date	2010.02.16.20.18.53;	author drow;	state Exp;
branches;
next	1.41;

1.41
date	2010.01.01.07.32.00;	author brobecke;	state Exp;
branches;
next	1.40;

1.40
date	2009.12.28.23.39.09;	author shebs;	state Exp;
branches;
next	1.39;

1.39
date	2009.07.13.19.24.18;	author jkratoch;	state Exp;
branches;
next	1.38;

1.38
date	2009.06.30.21.33.20;	author jkratoch;	state Exp;
branches;
next	1.37;

1.37
date	2009.03.25.10.52.22;	author muller;	state Exp;
branches;
next	1.36;

1.36
date	2009.01.03.05.58.03;	author brobecke;	state Exp;
branches;
next	1.35;

1.35
date	2008.12.22.13.19.30;	author jkratoch;	state Exp;
branches;
next	1.34;

1.34
date	2008.10.22.19.46.13;	author brobecke;	state Exp;
branches;
next	1.33;

1.33
date	2008.08.06.12.52.07;	author jkratoch;	state Exp;
branches;
next	1.32;

1.32
date	2008.07.11.15.07.52;	author tromey;	state Exp;
branches;
next	1.31;

1.31
date	2008.06.09.19.25.15;	author tromey;	state Exp;
branches;
next	1.30;

1.30
date	2008.06.06.20.58.08;	author tromey;	state Exp;
branches;
next	1.29;

1.29
date	2008.05.02.20.30.49;	author drow;	state Exp;
branches;
next	1.28;

1.28
date	2008.01.01.22.53.18;	author drow;	state Exp;
branches;
next	1.27;

1.27
date	2007.08.23.18.14.16;	author brobecke;	state Exp;
branches;
next	1.26;

1.26
date	2007.01.09.17.59.09;	author drow;	state Exp;
branches;
next	1.25;

1.25
date	2006.11.10.16.58.52;	author vprus;	state Exp;
branches;
next	1.24;

1.24
date	2006.08.10.05.27.20;	author brobecke;	state Exp;
branches;
next	1.23;

1.23
date	2006.07.24.20.38.08;	author drow;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.07.15.23.32;	author pbrook;	state Exp;
branches
	1.22.8.1;
next	1.21;

1.21
date	2004.02.01.05.49.07;	author drow;	state Exp;
branches
	1.21.28.1;
next	1.20;

1.20
date	2004.01.13.23.39.54;	author carlton;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.09.18.19.20;	author fnf;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.07.17.58.44;	author ezannoni;	state Exp;
branches
	1.18.4.1;
next	1.17;

1.17
date	2003.06.29.20.32.23;	author drow;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.16.20.07.08;	author ezannoni;	state Exp;
branches
	1.16.16.1;
next	1.15;

1.15
date	2003.04.10.13.38.15;	author ezannoni;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.04.22.37.49;	author drow;	state Exp;
branches
	1.14.16.1;
next	1.13;

1.13
date	2002.05.17.22.03.34;	author jimb;	state Exp;
branches
	1.13.10.1
	1.13.12.1;
next	1.12;

1.12
date	2002.05.01.15.39.32;	author fnf;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	2002.01.13.22.13.06;	author drow;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.17.22.58.42;	author jimb;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.17.21.49.09;	author jimb;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.04.16.18.15;	author jimb;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.27.22.21.22;	author drow;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.06.22.08.12;	author msnyder;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.06.22.51.21;	author msnyder;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.05.30.02.54.41;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.19.53.38;	author ezannoni;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.06.08.21.50;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.30;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.53.2.1
date	2012.01.06.04.43.59;	author brobecke;	state Exp;
branches;
next	;

1.22.8.1
date	2006.08.28.07.48.42;	author nickrob;	state Exp;
branches;
next	;

1.21.28.1
date	2006.03.07.15.48.33;	author pbrook;	state Exp;
branches
	1.21.28.1.2.1;
next	1.21.28.2;

1.21.28.2
date	2006.05.03.17.54.32;	author pbrook;	state Exp;
branches;
next	;

1.21.28.1.2.1
date	2006.09.28.20.18.16;	author drow;	state Exp;
branches;
next	;

1.18.4.1
date	2004.03.23.20.12.32;	author ezannoni;	state Exp;
branches;
next	;

1.16.16.1
date	2003.08.07.18.16.42;	author ezannoni;	state Exp;
branches;
next	;

1.14.16.1
date	2003.04.10.21.33.52;	author cagney;	state Exp;
branches;
next	;

1.13.10.1
date	2003.02.07.19.17.59;	author carlton;	state Exp;
branches;
next	1.13.10.2;

1.13.10.2
date	2003.04.16.19.57.02;	author carlton;	state Exp;
branches;
next	1.13.10.3;

1.13.10.3
date	2003.05.01.00.46.56;	author carlton;	state Exp;
branches;
next	1.13.10.4;

1.13.10.4
date	2003.08.05.17.13.23;	author carlton;	state Exp;
branches;
next	1.13.10.5;

1.13.10.5
date	2003.09.17.21.28.50;	author carlton;	state Exp;
branches;
next	1.13.10.6;

1.13.10.6
date	2003.12.16.00.01.01;	author carlton;	state Exp;
branches;
next	1.13.10.7;

1.13.10.7
date	2004.01.26.19.11.41;	author carlton;	state Exp;
branches;
next	;

1.13.12.1
date	2003.12.14.20.27.47;	author drow;	state Exp;
branches;
next	1.13.12.2;

1.13.12.2
date	2004.02.09.19.43.55;	author drow;	state Exp;
branches;
next	;

1.12.4.1
date	2002.06.15.16.43.15;	author cagney;	state Exp;
branches;
next	;

1.5.2.1
date	2001.10.28.17.59.47;	author drow;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.30;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.06.28.16.02.56;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.08.02.23.46.48;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.70
log
@test suite update - gdb.base/[cd]

Convert files gdb.base/[cd]*.exp to use standard_output_file et al.

	* call-ar-st.exp, call-rt-st.exp, call-sc.exp,
	call-signal-resume.exp, call-strs.exp, callexit.exp,
	callfuncs.exp, catch-load.exp, catch-syscall.exp, charset.exp,
	checkpoint.exp, chng-syms.exp, code-expr.exp, code_elim.exp,
	commands.exp, completion.exp, complex.exp, cond-expr.exp,
	condbreak.exp, consecutive.exp, constvars.exp, corefile.exp,
	ctxobj.exp, cursal.exp, cvexpr.exp, dbx.exp, default.exp,
	define.exp, del.exp, detach.exp, dfp-test.exp, display.exp,
	dmsym.exp, dump.exp, dup-sect.exp: Use standard_testfile,
	standard_output_file, prepare_for_testing, clean_restart.
@
text
@# Copyright 1998-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Elena Zannoni (ezannoni@@cygnus.com)

# This file is part of the gdb testsuite.

#
# tests for command completion
#
# Here are some useful test cases for completion.  
# They should be tested with both M-? and TAB.
#
#   "show output-" "radix"
#   "show output" "-radix"
#   "p" ambiguous (commands starting with p--path, print, printf, etc.)
#   "p "  ambiguous (all symbols)
#   "info t foo" no completions
#   "info t " no completions
#   "info t" ambiguous ("info target", "info terminal", etc.)
#   "info ajksdlfk" no completions
#   "info ajksdlfk " no completions
#   "info" " "
#   "info " ambiguous (all info commands)
#   "p \"break1" unambiguous (completes to filename "break1.c")
#   "p \"break1." unambiguous (should complete to "break1.c" but does not,
#	due to readline limitations)
#   "p 'arg" ambiguous (all symbols starting with arg)
#   "p b-arg" ambiguous (all symbols starting with arg)
#   "p b-" ambiguous (all symbols)
#   "file Make" "file" (word break hard to screw up here)
#   "file ../gdb.stabs/we" "ird" (needs to not break word at slash)
#



#
# test running programs
#

standard_testfile break.c break1.c

if [get_compiler_info] {
    return -1
}

if {[prepare_for_testing $testfile.exp $testfile \
	 [list $srcfile $srcfile2] {debug nowarnings}]} {
    untested $testfile.exp
    return -1
}

if ![runto_main] then {
        perror "tests suppressed"
}

set oldtimeout1 $timeout
set timeout 30

set test "complete 'hfgfh'"
send_gdb "hfgfh\t"
gdb_test_multiple "" "$test" {
    -re "^hfgfh\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" $test {
	    -re "Undefined command: \"hfgfh\"\\.  Try \"help\"\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

#exp_internal 0

set test "complete 'show output'"
send_gdb "show output\t"
gdb_test_multiple "" "$test" {
    -re "^show output-radix $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Default output radix for printing of values is 10\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'show output-'"
send_gdb "show output-\t"
gdb_test_multiple "" "$test" {
    -re "^show output-radix $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Default output radix for printing of values is 10\\..*$gdb_prompt $" {
		pass "$test"
	    }
        }
    }
}

set test "complete 'p'"
send_gdb "p\t"
gdb_test_multiple "" "$test" {
    -re "^p\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "The history is empty\\..*$gdb_prompt $" {
		pass "$test"
	    }
        }
    }
}

set test "complete 'p '"
send_gdb "p \t"
gdb_test_multiple "" "$test" {
    -re "^p \\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "The history is empty\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info t foo'"
send_gdb "info t foo\t"
gdb_test_multiple "" "$test" {
    -re "^info t foo\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Ambiguous info command \"t foo\": target, tasks, terminal, threads, tp, tracepoints, tvariables, (type-printers, )?types\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info t'"
send_gdb "info t\t"
gdb_test_multiple "" "$test" {
    -re "^info t\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Ambiguous info command \"t\": target, tasks, terminal, threads, tp, tracepoints, tvariables, (type-printers, )?types\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info t '"
send_gdb "info t \t"
gdb_test_multiple "" "$test" {
    -re "^info t \\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Ambiguous info command \"t \": target, tasks, terminal, threads, tp, tracepoints, tvariables, (type-printers, )?types\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info asdfgh'"
send_gdb "info asdfgh\t"
gdb_test_multiple "" "$test" {
    -re "^info asdfgh\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Undefined info command: \"asdfgh\".  Try \"help info\"\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info asdfgh '"
send_gdb "info asdfgh \t"
gdb_test_multiple "" "$test" {
    -re "^info asdfgh \\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Undefined info command: \"asdfgh \".  Try \"help info\"\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info'"
send_gdb "info\t"
gdb_test_multiple "" "$test" {
    -re "^info $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands.*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info '"
send_gdb "info \t"
gdb_test_multiple "" "$test" {
    -re "^info \\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\n.*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete (2) 'info '"
send_gdb "info \t"
gdb_test_multiple "" "$test" {
    -re "^info \\\x07$" {
	send_gdb "\t"
	gdb_test_multiple "" "$test" {
	    -re "address.*types.*$gdb_prompt " {
		send_gdb "\n"
		gdb_test_multiple "" "$test" {
		    -re "\"info\".*unambiguous\\..*$gdb_prompt $" {
			pass "$test"
		    }
		}
	    }
	}
    }
}

set test "complete 'help info wat'"
send_gdb "help info wat\t"
gdb_test_multiple "" "$test" {
    -re "^help info watchpoints $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Status of specified watchpoints.*\r\n.*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
    -re "^help info wat\\\x07$" {
	fail "$test"
    }
}

set test "complete 'p \"break1'"
send_gdb "p \"break1\t"
gdb_test_multiple "" "$test" {
    -re "^p \"break1\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {}
    }
    -re "^p \"break1\\.c\"$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

setup_xfail "*-*-*"
set test "complete 'p \"break1.'"
send_gdb "p \"break1.\t"
gdb_test_multiple "" "$test" {
    -re "^p \"break1\\.\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {}
    }
    -re "^p \"break1\\.c\"$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
    -re "^p \"break1\\..*$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {}
    }
}

set test "complete 'p 'arg'"
send_gdb "p 'arg\t"
gdb_test_multiple "" "$test" {
    -re "^p 'arg\\\x07$" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete (2) 'p 'arg'"
send_gdb "p 'arg\t"
gdb_test_multiple "" "$test" {
    -re "^p 'arg\\\x07$" {
	send_gdb "\t"
	gdb_test_multiple "" "$test" {
	    -re "argv.*$gdb_prompt " {
		send_gdb "\n"
		gdb_test_multiple "" "$test" {
		    -re "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt $" {
			pass "$test"
		    }
		}
	    }
	    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)$" {
		send_gdb "n"
		gdb_test_multiple "" "$test" {
		    -re "\\(gdb\\) p 'arg$" {
			send_gdb "\n"
			gdb_test_multiple "" "$test" {
			    -re "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt $" {
				pass "$test"
			    }
			}
		    }
		}
	    }
	}
    }
}

set test "complete 'handle signal'"
send_gdb "handle sigq\t"
gdb_test_multiple "" "$test" {
    -re "^handle sigqSIGQUIT $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "SIGQUIT.*Quit.*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'handle keyword'"
send_gdb "handle nos\t"
gdb_test_multiple "" "$test" {
    -re "^handle nostop $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete help aliases"
send_gdb "help user-define\t"
gdb_test_multiple "" "$test" {
    -re "^help user-defined $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}


# These tests used to try completing the shorter "p b-a".
# Unfortunately, on some systems, there are .o files in system
# libraries which declare static variables named `b'.  Of course,
# those variables aren't really in scope, as far as the compiler is
# concerned.  But GDB deliberately tries to be more liberal: if you
# enter an identifier that doesn't have any binding in scope, GDB will
# search all the program's compilation units for a static variable of
# the given name.
#
# This behavior can help avoid a lot of pedantry, so it's usually a
# good thing.  But in this test case, it causes GDB to print the value
# of some random variable, instead of giving us the "No symbol..."
# error we were expecting.
#
# For example, on S/390 linux, the file s_atan.c in libm.a declares a
# `b', which is a structure containing an int and a float, so GDB says
# ``Argument to arithmetic operation not a number or boolean'' instead
# of ``No symbol ...''.
#
# So, I'm hoping that there is no system with a static library variable named
# `no_var_by_this_name'.

set test "complete 'p no_var_named_this-arg'"
send_gdb "p no_var_named_this-arg\t"
gdb_test_multiple "" "$test" {
    -re "^p no_var_named_this-arg\\\x07$" {
        send_gdb "\n"
	gdb_test_multiple "" "$test" {
            -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
		pass "$test"
            }
        }
    }
}

set test "complete (2) 'p no_var_named_this-arg'"
send_gdb "p no_var_named_this-arg\t"
gdb_test_multiple "" "$test" {
    -re "^p no_var_named_this-arg\\\x07$" {
	send_gdb "\t"
	gdb_test_multiple "" "$test" {
	    -re "argv.*$gdb_prompt " {
		send_gdb "\n"
		gdb_test_multiple "" "$test" {
		    -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
			pass "$test"
		    }
		}
	    }
	    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)$" {
		send_gdb "n\n"

		# Eat the prompt
		gdb_expect {
		    -re "$gdb_prompt " {
			pass "$test (eat prompt)"
		    }
		    timeout {
			fail "(timeout) $test (eat prompt)"
		    }
		}

		gdb_test_multiple "" "$test" {
		    -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
			pass "$test"
		    }
		}
	    }
        }
    }
}

set test "complete (2) 'p no_var_named_this-'"
send_gdb "p no_var_named_this-\t"
gdb_test_multiple "" "$test" {
    -re "^p no_var_named_this-\\\x07$" {
	send_gdb "\t"
	gdb_test_multiple "" "$test" {
	    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)$" {
		send_gdb "n\n"

		# Eat the prompt
		gdb_expect {
		    -re "$gdb_prompt " {
			pass "$test (eat prompt)"
		    }
		    timeout {
			fail "(timeout) $test (eat prompt)"
		    }
		}

		gdb_test_multiple "" "$test" {
		    -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
			pass "$test"
		    }
		}
	    }
	    -re "argv.*$gdb_prompt $" {
		send_gdb "\n"
		gdb_test_multiple "" "$test" {
		    -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
			pass "$test"
		    }
		}
	    }
	}
    }
}

set test "complete 'p values\[0\].a'"
send_gdb "p values\[0\].a\t"
gdb_test_multiple "" "$test" {
    -re "^p values.0..a_field $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re " = 0.*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'p values\[0\] . a'"
send_gdb "p values\[0\] . a\t"
gdb_test_multiple "" "$test" {
    -re "^p values.0. . a_field $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re " = 0.*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'p &values\[0\] -> a'"
send_gdb "p &values\[0\] -> a\t"
gdb_test_multiple "" "$test" {
    -re "^p &values.0. -> a_field $" {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re " = .*0x\[0-9a-fA-F\]*.*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

gdb_test "complete p &values\[0\]->z" \
    "p &values.0.->z_field" \
    "completion of field in anonymous union"

gdb_test "complete ptype &values\[0\]->z" \
    "ptype &values.0.->z_field" \
    "ptype completion of field in anonymous union"

gdb_test "complete whatis &values\[0\]->z" \
    "whatis &values.0.->z_field" \
    "whatis completion of field in anonymous union"

# The following tests used to simply try to complete `${objdir}/file',
# and so on.  The problem is that ${objdir} can be very long; the
# completed filename may be more than eighty characters wide.  When
# this happens, readline tries to manage things, producing output that
# may make sense on the screen, but is rather hard for our script to
# recognize.
#
# In the case that motivated this change, the (gdb) prompt occupied
# the leftmost six columns, and `${objdir}/' was seventy-four
# characters long --- eighty in all.  After printing the slash,
# readline emitted a space, a carriage return, and then `Makefile'
# (the tab character being received as input after `Make'.
#
# Basically, you have to let readline do whatever it's going to do to
# make the screen look right.  If it happens to use a different
# strategy on Tuesdays to get the cursor in the right place, that's
# not something the testsuite should care about.
#
# So, we avoid long lines.  We `cd' to ${objdir} first, and then do
# the completion relative to the current directory.

# ${srcdir} may be a relative path.  We want to make sure we end up
# in the right directory - so make sure we know where it is.
set mydir [pwd]
cd ${srcdir}
set fullsrcdir [pwd]
cd ${mydir}

# If the directory name contains a '+' we must escape it, adding a backslash.
# If not, the test below will fail because it will interpret the '+' as a 
# regexp operator. We use string_to_regexp for this purpose.

gdb_test "cd ${fullsrcdir}" \
         "Working directory [string_to_regexp ${fullsrcdir}].*" \
         "cd to \${srcdir}"


# GDB used to fail adding / on directories, on the first try only.
set uniquedir ../testsuite/gdb.base/comp-dir
set escapeduniquedir [string_to_regexp ${uniquedir}]
set uniquesu subdi
set uniquesub ${uniquesu}r
set escapeuniquesub [string_to_regexp ${uniquesub}]
send_gdb "dir ${uniquedir}\t"
gdb_expect {
	-re "${escapeduniquedir}/" {
	    pass "directory completion"
	    send_gdb "${uniquesu}\t"
	}
	-re "${escapeduniquedir} $" {
	    fail "directory completion (old gdb bug)"
	    send_gdb "\b/${uniquesu}\t"
	}
	default {
	    fail "directory completion (timeout)"
	    send_gdb "\ndir ${uniquedir}/${uniquesu}\t"
	}
}

gdb_expect {
	-re "${escapeuniquesub}/$" {
	    pass "directory completion 2"
	}
	timeout {
	    fail "directory completion 2"
	}
}

# Empty COMMAND sends no newline while " " sends the newline we need.
gdb_test " " "Source directories searched: .*" "Glob remaining of directory test"

gdb_test "complete file ./gdb.base/compl" \
    "file ./gdb.base/completion\\.exp.*" \
    "complete-command 'file ./gdb.base/compl'"

set test "complete 'file ./gdb.base/complet'"
send_gdb "file ./gdb.base/complet\t"
gdb_test_multiple "" "$test" {
    -re "^file ./gdb.base/completion\\.exp $" {
	send_gdb "\n"
	# Ignore the exact error message.
	gdb_test_multiple "" "complete 'file ./gdb.base/complet'" {
	    -re "\r\nA program is being debugged already\\.\[\r\n\]+Are you sure you want to change the file\\? \\(y or n\\) $" {
		send_gdb "n\n"
		exp_continue
	    }
	    -re "$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

set test "complete 'info func marke'"
send_gdb "info func marke\t"
gdb_test_multiple "" "$test" {
    -re "^info func marke.*r$" {
	send_gdb "\t\t"
	gdb_test_multiple "" "$test" {
	    -re "marker1.*$gdb_prompt " {
		send_gdb "\n"
		gdb_test_multiple "" "$test" {
		    -re "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long( int)?\\);.*$gdb_prompt $" {
			pass "$test"
		    }
		}
	    }
	}
    }
}


set test "complete 'set follow-fork-mode'"
send_gdb "set follow-fork-mode \t\t"
gdb_test_multiple "" "$test" {
    -re "child.*parent.*$gdb_prompt " {
	send_gdb "\n"
	gdb_test_multiple "" "$test" {
	    -re "Requires an argument.*child.*parent.*$gdb_prompt $" {
		pass "$test"
	    }
	    -re "Ambiguous item \"\"\\..*$gdb_prompt $" {
		pass "$test"
	    }
	}
    }
}

gdb_test_no_output "complete print values\[0\].x." \
    "field completion with invalid field"

# If there is a non-deprecated completion, it should be returned.
gdb_test "complete sav" "save" "test non-deprecated completion"
# If there is only a deprecated completion, then it should be returned.
gdb_test "complete save-t" "save-tracepoints" "test deprecated completion"


#
# Tag name completion.
#

gdb_test "complete ptype struct some_" "ptype struct some_struct"
gdb_test "complete ptype enum some_" "ptype enum some_enum"
gdb_test "complete ptype union some_" "ptype union some_union"


gdb_test "complete set gnutarget aut" "set gnutarget auto"


gdb_test "complete set cp-abi aut" "set cp-abi auto"

# Test that completion of commands 'target FOO' works well.
set targets [list "core" "tfile" "exec"]

# Test that completion of command 'target ctf' if GDB supports ctf
# target.
gdb_test_multiple "target ctf" "" {
    -re "Undefined target command: \"ctf\"\.  Try \"help target\"\.\r\n$gdb_prompt $" {
    }
    -re "No CTF directory specified.*\r\n$gdb_prompt $" {
	lappend targets "ctf"
    }
}

foreach target_name ${targets} {
    gdb_test "complete target ${target_name} ./gdb.base/completion" \
	"target ${target_name} ./gdb.base/completion\\.exp.*"
}

#
# "set foo unlimited" completion.
#

# A var_uinteger command.
gdb_test "complete set height " "set height unlimited"
gdb_test "complete set height u" "set height unlimited"

# A var_integer command.
gdb_test "complete set listsize " "set listsize unlimited"
gdb_test "complete set listsize unl" "set listsize unlimited"

# A var_zuinteger_unlimited command.
gdb_test "complete set trace-buffer-size " "set trace-buffer-size unlimited"
gdb_test "complete set trace-buffer-size unl" "set trace-buffer-size unlimited"

# Restore globals modified in this test...
set timeout $oldtimeout1

return 0
@


1.69
log
@gdb/

	* ctf.c (_initialize_ctf): Include "completer.h".
	Call add_target_with_completer instead of add_target.

gdb/testsuite/

	* gdb.base/completion.exp: Test completion of command
	'target ctf' if target ctf is supported.
@
text
@d53 1
a53 4
set testfile "break"
set srcfile ${testfile}.c
set srcfile1 ${testfile}1.c
set binfile ${objdir}/${subdir}/${testfile}
d55 2
a56 3
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug nowarnings}] != "" } {
     untested completion.exp
     return -1
d59 3
a61 11
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug nowarnings}] != "" } {
     untested completion.exp
     return -1
}

if  { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug nowarnings}] != "" } {
     untested completion.exp
     return -1
}

if [get_compiler_info] {
a64 6
gdb_exit

gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

@


1.68
log
@Accept "set foo unlimited" in integer/uinteger/zuinteger_unlimited commands.

Currently, several commands take "0" or "-1" to mean "unlimited".

"show" knows when to print "unlimited":

 (gdb) show height
 Number of lines gdb thinks are in a page is 45.
 (gdb) set height 0
 (gdb) show height
 Number of lines gdb thinks are in a page is unlimited.

However, the user can't herself specify "unlimited" directly:

 (gdb) set height unlimited
 No symbol table is loaded.  Use the "file" command.
 (gdb)

This patch addresses that, by adjusting the set handler for all
integer/uinteger/zuinteger_unlimited commands to accept literal
"unlimited".  It also installs a completer.  Presently, we complete on
symbols by default, and at
<http://sourceware.org/ml/gdb-patches/2013-03/msg00864.html> I've
shown a WIP prototype that tried to keep that half working in these
commands.  In the end, it turned out to be more complicated than
justifiable, IMO.  It's super rare to want to pass the value of a
variable/symbol in the program to a GDB set/show knob.  That'll still
work, it's just that we won't assist with completion anymore.  This
patch just sticks with the simple, and completes on "unlimited", and
nothing else.  This simplification means that

  "set he<tab><tab>"

is all it takes to get to:

  "set height unlimited"

The patch then goes through all integer/uinteger/zuinteger_unlimited
commands in the tree, and updates both the online help and the manual
to mention that "unlimited" is accepted in addition to 0/-1.  In the
cases where the command had no online help text at all, this adds it.
I've tried to make the texts read in a way that "unlimited" is
suggested before "0" or "-1" is.

Tested on x86_64 Fedora 17.

gdb/
2013-04-10  Pedro Alves  <palves@@redhat.com>

	* cli/cli-decode.c (integer_unlimited_completer): New function.
	(add_setshow_integer_cmd, add_setshow_uinteger_cmd)
	(add_setshow_zuinteger_unlimited_cmd): Install the "unlimited"
	completer.
	* cli/cli-setshow.c: Include "cli/cli-utils.h".
	(is_unlimited_literal): New function.
	(do_set_command): Handle literal "unlimited" arguments.
	* frame.c (_initialize_frame) <set backtrace limit>: Document
	"unlimited".
	* printcmd.c (_initialize_printcmd) <set print
	max-symbolic-offset>: Add help text.
	* record-full.c (_initialize_record_full) <set record full
	insn-number-max>: Likewise.
	* record.c (_initialize_record) <set record
	instruction-history-size, set record function-call-history-size>:
	Add help text.
	* ser-tcp.c (_initialize_ser_tcp) <set tcp connect-timeout>: Add
	help text.
	* tracepoint.c (_initialize_tracepoint) <set trace-buffer-size>:
	Likewise.
	* source.c (_initialize_source) <set listsize>: Add help text.
	* utils.c (initialize_utils) <set height, set width>: Likewise.
	<set pagination>: Mention "set height unlimited".
	* valprint.c (_initialize_valprint) <set print elements, set print
	repeats>: Document "unlimited".

gdb/doc/
2013-04-10  Pedro Alves  <palves@@redhat.com>

	* gdb.texinfo (Process Record and Replay): Document that "set
	record full insn-number-max", "set record
	instruction-history-size" and "set record
	function-call-history-size" accept "unlimited".
	(Backtrace): Document that "set backtrace limit" accepts
	"unlimited".
	(List): Document that "set listsize" accepts "unlimited".
	(Print Settings)" Document that "set print max-symbolic-offset",
	"set print elements" and "set print repeats" accept "unlimited".
	(Starting and Stopping Trace Experiments): Document that "set
	trace-buffer-size" accepts "unlimited".
	(Remote Configuration): Document that "set tcp connect-timeout"
	accepts "unlimited".
	(Command History): Document that "set history size" accepts
	"unlimited".
	(Screen Size): Document that "set height" and "set width" accepts
	"unlimited".  Adjust "set pagination"'s description to suggest
	"set height unlimited" instead of "set height 0".

gdb/testsuite/
2013-04-10  Pedro Alves  <palves@@redhat.com>

	* gdb.base/completion.exp: Test "set height", "set listsize" and
	"set trace-buffer-size" completion.
	* gdb.base/setshow.exp: Test "set height unlimited".
	* gdb.trace/trace-buffer-size.exp: Test "set trace-buffer-size
	unlimited".
@
text
@d717 1
d719 11
a729 1
foreach target_name { "core" "tfile" "exec" } {
@


1.67
log
@gdb/

2013-03-29  Yao Qi  <yao@@codesourcery.com>

	* corelow.c: Include "completer.h".
	(_initialize_corelow): Call add_target_with_completer with
	argument 'filename_completer'.
	* tracepoint.c: Likewise.
	* exec.c (_initialize_exec): Likewise.
	* target.c (add_target): Rename to ...
	(add_target_with_completer): ... this.  Call set_cmd_completer
	if parameter completer is not NULL.
	(add_target): New.
	* target.h: Include "command.h".
	(add_target_with_completer): Declare it.

gdb/testsuite:

2013-03-29  Yao Qi  <yao@@codesourcery.com>

	* gdb.base/completion.exp: Test completion of commands
	"target core", "target tfile" and "target exec".
	* gdb.trace/tfile.exp: Test completion of command
	"target tfile".
@
text
@d723 16
@


1.66
log
@gdb/testsuite/

	* config/monitor.exp (gdb_target_cmd): Remove semicolon after
	'return'.
	(gdb_target_monitor, gdb_load): Likewise.
	* config/sid.exp (gdb_load): Likewise.
	* config/slite.exp (gdb_load): Likewise.
	* config/vx.exp (gdb_start, spawn_vxgdb): Likewise.
	* gdb.ada/arrayidx.exp, gdb.ada/null_array.exp: Likewise.
	* gdb.arch/mips-octeon-bbit.exp (single_step): Likewise.
	(single_step_until): Likewise.
	* gdb.arch/powerpc-d128-regs.exp: Likewise.
	* gdb.arch/system-gcore.exp: Likewise.
	* gdb.base/bigcore.exp (extract_heap): Likewise.
	* gdb.base/break-on-linker-gcd-function.exp: Likewise.
	* gdb.base/call-ar-st.exp: Likewise.
	* gdb.base/call-rt-st.exp: Likewise.
	* gdb.base/call-sc.exp, gdb.base/call-strs.exp: Likewise.
	* gdb.base/callfuncs.exp, gdb.base/completion.exp: Likewise.
	* gdb.base/condbreak.exp, gdb.base/constvars.exp: Likewise.
	* gdb.base/corefile.exp: Likewise.
	* gdb.base/dbx.exp (gdb_file_cmd): Likewise.
	* gdb.base/exprs.exp, gdb.base/fileio.exp: Likewise.
	* gdb.base/fixsection.exp: Likewise.
	* gdb.base/funcargs.exp: Likewise.
	* gdb.base/gcore-buffer-overflow.exp: Likewise.
	* gdb.base/gcore-relro.exp: Likewise.
	* gdb.base/gcore.exp, gdb.base/gdb11530.exp: Likewise.
	* gdb.base/gdb11531.exp, gdb.base/gnu-ifunc.exp: Likewise.
	* gdb.base/info-os.exp, gdb.base/info-proc.exp: Likewise.
	* gdb.base/interp.exp, gdb.base/langs.exp:: Likewise.
	* gdb.base/list.exp: Likewise.
	(set_listsize): Likewise.
	* gdb.base/logical.exp, gdb.base/mips_pro.exp: Likewise.
	* gdb.base/miscexprs.exp, gdb.base/nodebug.exp: Likewise.
	* gdb.base/opaque.exp, gdb.base/pointers.exp: Likewise.
	* gdb.base/psymtab.exp, gdb.base/ptype.exp: Likewise.
	* gdb.base/relational.exp, gdb.base/scope.exp: Likewise.
	* gdb.base/setvar.exp: Likewise.
	(test_set): Likewise.
	* gdb.base/signals.exp, gdb.base/sizeof.exp: Likewise.
	* gdb.base/solib-overlap.exp: Likewise.
	* gdb.base/store.exp, gdb.base/structs.exp: Likewise.
	* gdb.base/structs2.exp, gdb.base/volatile.exp: Likewise.
	* gdb.base/watchpoint.exp (initialize): Likewise.
	(test_simple_watchpoint): Likewise.
	(test_disabling_watchpoints): Likewise.
	(test_watchpoint_triggered_in_syscall): Likewise.
	* gdb.base/whatis.exp, gdb.cp/ambiguous.exp: Likewise.
	* gdb.cp/casts.exp, gdb.cp/ctti.exp: Likewise.
	* gdb.cp/namespace.exp, gdb.cp/nsdecl.exp: Likewise.
	* gdb.cp/psmang.exp, gdb.dwarf2/dw2-ranges.exp: Likewise.
	* gdb.hp/gdb.aCC/optimize.exp: Likewise.
	* gdb.hp/gdb.aCC/watch-cmd.exp: Likewise.
	* gdb.hp/gdb.base-hp/callfwmall.exp: Likewise.
	* gdb.hp/gdb.base-hp/pxdb.exp: Likewise.
	* gdb.hp/gdb.compat/xdb1.exp: Likewise.
	* gdb.hp/gdb.compat/xdb2.exp: Likewise.
	* gdb.hp/gdb.compat/xdb3.exp: Likewise.
	* gdb.hp/gdb.defects/bs14602.exp: Likewise.
	* gdb.hp/gdb.defects/solib-d.exp: Likewise.
	* gdb.mi/gdb792.exp: Likewise.
	* gdb.mi/mi-inheritance-syntax-error.exp: Likewise.
	* gdb.mi/mi-logging.exp, gdb.mi/mi-var-cp.exp : Likewise.
	* gdb.mi/mi-var-rtti.exp, gdb.python/py-type.exp: Likewise.
	* gdb.threads/gcore-thread.exp: Likewise.
	(load_core): Likewise.
	* gdb.threads/pthreads.exp (all_threads_running): Likewise.
	(test_startup, check_control_c): Likewise.
	* gdb.threads/sigstep-threads.exp: Likewise.
	* gdb.threads/thread_check.exp: Likewise.
	* gdb.trace/backtrace.exp, gdb.trace/change-loc.exp: Likewise.
	* gdb.trace/circ.exp (run_trace_experiment): Likewise.
	(set_a_tracepoint, trace_buffer_normal): Likewise.
	(gdb_trace_circular_tests): Likewise.
	* gdb.trace/collection.exp: Likewise.
	* gdb.trace/disconnected-tracing.exp: Likewise.
	* gdb.trace/infotrace.exp: Likewise.
	* gdb.trace/mi-traceframe-changed.exp: Likewise.
	* gdb.trace/mi-tracepoint-changed.exp: Likewise.
	* gdb.trace/mi-tsv-changed.exp (test_create_delete_modify_tsv): Likewise.
	* gdb.trace/packetlen.exp, gdb.trace/passc-dyn.exp: Likewise.
	* gdb.trace/pending.exp, gdb.trace/report.exp: Likewise.
	* gdb.trace/stap-trace.exp: Likewise.
	* gdb.trace/status-stop.exp,gdb.trace/strace.exp: Likewise.
	* gdb.trace/tfind.exp, gdb.trace/trace-break.exp: Likewise.
	* gdb.trace/trace-buffer-size.exp: Likewise.
	* gdb.trace/tspeed.exp, gdb.trace/tsv.exp: Likewise.
	* gdb.trace/unavailable.exp: Likewise.
	* gdb.trace/while-dyn.exp: Likewise.
	* lib/fortran.exp (set_lang_fortran): Likewise.
	* lib/gdb.exp (default_gdb_version, gdb_start_cmd): Likewise.
	(gdb_breakpoint, gdb_reinitialize_dir): Likewise.
	(default_gdb_start, get_compiler_info): Likewise.
	(gdb_compile, gdb_compile_objc, gdb_reload, gdb_init): Likewise.
	(get_debug_format, setup_xfail_format): Likewise.
	(rerun_to_main, gdb_skip_float_test): Likewise.
	(build_id_debug_filename_get, get_remotetimeout): Likewise.
	* lib/java.exp (set_lang_java): Likewise.
	* lib/mi-support.exp (default_mi_gdb_start): Likewise.
	(mi_gdb_reinitialize_dir, mi_gdb_target_cmd): Likewise.
	(mi_gdb_file_cmd, mi_gdb_test): Likewise.
	(mi_run_cmd_full, mi_expect_interrupt): Likewise.
	* lib/objc.exp (set_lang_objc): Likewise.
	* lib/pascal.exp (set_lang_pascal): Likewise.
	* lib/prompt.exp (default_prompt_gdb_start): Likewise.
	* lib/trace-support.exp (gdb_trace_setactions, gdb_tfind_test): Likewise.
	(gdb_readexpr, gdb_gettpnum, gdb_find_recursion_test_baseline): Likewise.
@
text
@d716 7
@


1.65
log
@	* cp-abi.c (cp_abi_completer): New function.
	(_initialize_cp_abi): Set completer for "set cp-abi".
gdb/testsuite
	* gdb.base/completion.exp: Add "set cp-abi" completion test.
@
text
@d74 1
a74 1
    return -1;
@


1.64
log
@	* cli/cli-decode.c (add_setshow_string_noescape_cmd): Return the
	set command.
	* command.h (add_setshow_string_noescape_cmd): Update.
	* corefile.c (set_gnutarget_command): Remove trailing whitespace.
	(complete_set_gnutarget): New function.
	(_initialize_core): Set the "set gnutarget" completer.
gdb/testsuite
	* gdb.base/completion.exp: Add "set gnutarget" test.
@
text
@d713 3
@


1.63
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d710 3
@


1.62
log
@	* ada-lang.c (ada_make_symbol_completion_list): Add 'code'
	argument, assertion.
	* c-exp.y (typebase): Add completion productions.
	* completer.c (expression_completer): Handle tag completion.
	* expression.h (parse_expression_for_completion): Add argument.
	* f-lang.c (f_make_symbol_completion_list): Add 'code'
	argument.
	* language.h (struct language_defn)
	<la_make_symbol_completion_list>: Add 'code' argument.
	* parse.c (expout_tag_completion_type, expout_completion_name):
	New globals.
	(mark_struct_expression): Add assertion.
	(mark_completion_tag): New function.
	(parse_exp_in_context): Initialize new globals.
	(parse_expression_for_completion): Add 'code' argument.  Handle
	tag completion.
	* parser-defs.h (mark_completion_tag): Declare.
	* symtab.c (default_make_symbol_completion_list_break_on): Add
	'code' argument.  Update.
	(default_make_symbol_completion_list): Add 'code' argument.
	(make_symbol_completion_list): Update.
	(make_symbol_completion_type): New function.
	* symtab.h (default_make_symbol_completion_list_break_on)
	(default_make_symbol_completion_list): Update.
	(make_symbol_completion_type): Declare.
testsuite
	* gdb.base/break1.c (enum some_enum, union some_union): New.
	(some_enum_global, some_union_global, some_value): New globals.
	* gdb.base/completion.exp: Add tag completion tests.
@
text
@d1 1
a1 2
# Copyright 1998-1999, 2002-2004, 2007-2012 Free Software Foundation,
# Inc.
@


1.61
log
@	* typeprint.c (_initialize_typeprint): Set completer
	for "whatis" and "ptype".
testsuite
	* gdb.base/completion.exp: Add tests for ptype and whatis
	completion.
@
text
@d703 8
@


1.60
log
@gdb: include help aliases in help command completion

There are a bunch of aliases that get used with help, but the current
command completion logic does not include those when doing completions.

Since the framework is already mostly in place, extend complete_on_cmdlist
slightly to pass down the ignore_help_classes flag like is done with the
existing lookup command logic.

Now you can do:
	(gdb) help use<tab>
and get back:
	(gdb) help user-defined

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d558 8
@


1.59
log
@	* NEWS: Update.
	* data-directory/Makefile.in (PYTHON_FILES): Add
	type_printers.py.
	* python/lib/gdb/command/type_printers.py: New file.
	* python/lib/gdb/command/types.py (TypePrinter): New class.
	(_get_some_type_recognizers, get_type_recognizers,
	apply_type_recognizers, register_type_printer): New
	functions.
	* python/py-objfile.c (objfile_object) <type_printers>: New
	field.
	(objfpy_dealloc): Decref new field.
	(objfpy_new): Set new field.
	(objfpy_get_type_printers, objfpy_set_type_printers): New
	functions.
	(objfile_to_objfile_object): Set new field.
	(objfile_getset): Add "type_printers".
	* python/py-progspace.c (pspace_object) <type_printers>: New
	field.
	(pspy_dealloc): Decref new field.
	(pspy_new): Set new field.
	(pspy_get_type_printers, pspy_set_type_printers): New functions.
	(pspace_to_pspace_object): Set new field.
	(pspace_getset): Add "type_printers".
	* python/python.c (start_type_printers, apply_type_printers,
	free_type_printers): New functions.
	(_initialize_python): Set gdb.type_printers.
	* python/python.h (start_type_printers, apply_type_printers,
	free_type_printers): Declare.
	* typeprint.c (type_print_raw_options, default_ptype_flags):
	Update for new fields.
	(do_free_global_table, create_global_typedef_table,
	find_global_typedef): New functions.
	(find_typedef_in_hash): Use find_global_typedef.
	(whatis_exp): Use create_global_typedef_table.  Change cleanup
	handling.
	* typeprint.h (struct type_print_options) <global_typedefs,
	global_printers>: New fields.
doc
	* gdb.texinfo (Symbols): Document "info type-printers",
	"enable type-printer" and "disable type-printer".
	(Python API): Add new node to menu.
	(Type Printing API): New node.
	(Progspaces In Python): Document type_printers field.
	(Objfiles In Python): Likewise.
	(gdb.types) <get_type_recognizers, apply_type_recognizers,
	register_type_printer, TypePrinter>: Document.
testsuite
	* gdb.base/completion.exp: Update for "info type-printers".
	* gdb.python/py-typeprint.cc: New file.
	* gdb.python/py-typeprint.exp: New file.
	* gdb.python/py-typeprint.py: New file.
@
text
@d392 13
@


1.58
log
@gdb: add completion handler for "handle" and "signal"

The command line completion has spoiled me.  Thus the lack of completion with
the "handle" command annoys me.  Patch!

This does a few things:
 - adds a VEC_merge helper
 - adds a generic signal completer
 - adds a completion handler for the "handle" command
 - sets the completion handler for the "signal" command

URL: http://sourceware.org/bugzilla/show_bug.cgi?id=10436
Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d164 1
a164 1
	    -re "Ambiguous info command \"t foo\": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..*$gdb_prompt $" {
d177 1
a177 1
	    -re "Ambiguous info command \"t\": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..*$gdb_prompt $" {
d190 1
a190 1
	    -re "Ambiguous info command \"t \": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..*$gdb_prompt $" {
@


1.57
log
@	* lib/gdb.exp (skip_altivec_tests, skip_vsx_tests)
	(build_executable): Update.
	(get_compiler_info): Remove 'binfile' argument.
	* gdb.ada/arrayidx.exp: Update.
	* gdb.ada/null_array.exp: Update.
	* gdb.arch/altivec-abi.exp: Update.
	* gdb.arch/altivec-regs.exp: Update.
	* gdb.arch/amd64-byte.exp: Update.
	* gdb.arch/amd64-dword.exp: Update.
	* gdb.arch/amd64-word.exp: Update.
	* gdb.arch/i386-avx.exp: Update.
	* gdb.arch/i386-byte.exp: Update.
	* gdb.arch/i386-sse.exp: Update.
	* gdb.arch/i386-word.exp: Update.
	* gdb.arch/ppc-dfp.exp: Update.
	* gdb.arch/ppc-fp.exp: Update.
	* gdb.arch/vsx-regs.exp: Update.
	* gdb.base/all-bin.exp: Update.
	* gdb.base/annota1.exp: Update.
	* gdb.base/async.exp: Update.
	* gdb.base/attach.exp: Update.
	* gdb.base/break-interp.exp: Update.
	* gdb.base/call-ar-st.exp: Update.
	* gdb.base/call-rt-st.exp: Update.
	* gdb.base/call-sc.exp: Update.
	* gdb.base/callfuncs.exp: Update.
	* gdb.base/catch-load.exp: Update.
	* gdb.base/completion.exp: Update.
	* gdb.base/complex.exp: Update.
	* gdb.base/condbreak.exp: Update.
	* gdb.base/consecutive.exp: Update.
	* gdb.base/constvars.exp: Update.
	* gdb.base/corefile.exp: Update.
	* gdb.base/eval-skip.exp: Update.
	* gdb.base/expand-psymtabs.exp: Update.
	* gdb.base/exprs.exp: Update.
	* gdb.base/fileio.exp: Update.
	* gdb.base/fixsection.exp: Update.
	* gdb.base/funcargs.exp: Update.
	* gdb.base/gdb11530.exp: Update.
	* gdb.base/gdb1555.exp: Update.
	* gdb.base/gnu-ifunc.exp: Update.
	* gdb.base/gnu_vector.exp: Update.
	* gdb.base/info-macros.exp: Update.
	* gdb.base/jit-simple.exp: Update.
	* gdb.base/jit-so.exp: Update.
	* gdb.base/jit.exp: Update.
	* gdb.base/langs.exp: Update.
	* gdb.base/list.exp: Update.
	* gdb.base/logical.exp: Update.
	* gdb.base/long_long.exp: Update.
	* gdb.base/longjmp.exp: Update.
	* gdb.base/macscp.exp: Update.
	* gdb.base/mips_pro.exp: Update.
	* gdb.base/miscexprs.exp: Update.
	* gdb.base/morestack.exp: Update.
	* gdb.base/nodebug.exp: Update.
	* gdb.base/opaque.exp: Update.
	* gdb.base/pc-fp.exp: Update.
	* gdb.base/pending.exp: Update.
	* gdb.base/permissions.exp: Update.
	* gdb.base/pointers.exp: Update.
	* gdb.base/prelink.exp: Update.
	* gdb.base/printcmds.exp: Update.
	* gdb.base/psymtab.exp: Update.
	* gdb.base/ptype.exp: Update.
	* gdb.base/relational.exp: Update.
	* gdb.base/scope.exp: Update.
	* gdb.base/setvar.exp: Update.
	* gdb.base/shlib-call.exp: Update.
	* gdb.base/shreloc.exp: Update.
	* gdb.base/signals.exp: Update.
	* gdb.base/sizeof.exp: Update.
	* gdb.base/so-impl-ld.exp: Update.
	* gdb.base/so-indr-cl.exp: Update.
	* gdb.base/solib-disc.exp: Update.
	* gdb.base/solib-display.exp: Update.
	* gdb.base/solib-nodir.exp: Update.
	* gdb.base/solib-overlap.exp: Update.
	* gdb.base/solib-symbol.exp: Update.
	* gdb.base/solib-weak.exp: Update.
	* gdb.base/solib.exp: Update.
	* gdb.base/store.exp: Update.
	* gdb.base/structs.exp: Update.
	* gdb.base/structs2.exp: Update.
	* gdb.base/type-opaque.exp: Update.
	* gdb.base/unload.exp: Update.
	* gdb.base/varargs.exp: Update.
	* gdb.base/volatile.exp: Update.
	* gdb.base/watch_thread_num.exp: Update.
	* gdb.base/watchpoint-solib.exp: Update.
	* gdb.base/watchpoint.exp: Update.
	* gdb.base/watchpoints.exp: Update.
	* gdb.base/whatis.exp: Update.
	* gdb.cell/arch.exp: Update.
	* gdb.cell/break.exp: Update.
	* gdb.cell/bt.exp: Update.
	* gdb.cell/core.exp: Update.
	* gdb.cell/data.exp: Update.
	* gdb.cell/ea-cache.exp: Update.
	* gdb.cell/f-regs.exp: Update.
	* gdb.cell/fork.exp: Update.
	* gdb.cell/gcore.exp: Update.
	* gdb.cell/mem-access.exp: Update.
	* gdb.cell/ptype.exp: Update.
	* gdb.cell/registers.exp: Update.
	* gdb.cell/sizeof.exp: Update.
	* gdb.cell/solib-symbol.exp: Update.
	* gdb.cell/solib.exp: Update.
	* gdb.cp/ambiguous.exp: Update.
	* gdb.cp/breakpoint.exp: Update.
	* gdb.cp/bs15503.exp: Update.
	* gdb.cp/casts.exp: Update.
	* gdb.cp/class2.exp: Update.
	* gdb.cp/cpexprs.exp: Update.
	* gdb.cp/cplusfuncs.exp: Update.
	* gdb.cp/ctti.exp: Update.
	* gdb.cp/dispcxx.exp: Update.
	* gdb.cp/gdb1355.exp: Update.
	* gdb.cp/gdb2384.exp: Update.
	* gdb.cp/gdb2495.exp: Update.
	* gdb.cp/infcall-dlopen.exp: Update.
	* gdb.cp/local.exp: Update.
	* gdb.cp/m-data.exp: Update.
	* gdb.cp/m-static.exp: Update.
	* gdb.cp/mb-ctor.exp: Update.
	* gdb.cp/mb-inline.exp: Update.
	* gdb.cp/mb-templates.exp: Update.
	* gdb.cp/member-ptr.exp: Update.
	* gdb.cp/method.exp: Update.
	* gdb.cp/namespace.exp: Update.
	* gdb.cp/nextoverthrow.exp: Update.
	* gdb.cp/nsdecl.exp: Update.
	* gdb.cp/nsrecurs.exp: Update.
	* gdb.cp/nsstress.exp: Update.
	* gdb.cp/nsusing.exp: Update.
	* gdb.cp/pr-1023.exp: Update.
	* gdb.cp/pr-1210.exp: Update.
	* gdb.cp/pr-574.exp: Update.
	* gdb.cp/pr9631.exp: Update.
	* gdb.cp/printmethod.exp: Update.
	* gdb.cp/psmang.exp: Update.
	* gdb.cp/re-set-overloaded.exp: Update.
	* gdb.cp/rtti.exp: Update.
	* gdb.cp/shadow.exp: Update.
	* gdb.cp/templates.exp: Update.
	* gdb.cp/try_catch.exp: Update.
	* gdb.dwarf2/dw2-ranges.exp: Update.
	* gdb.dwarf2/pr10770.exp: Update.
	* gdb.fortran/library-module.exp: Update.
	* gdb.hp/gdb.aCC/optimize.exp: Update.
	* gdb.hp/gdb.aCC/watch-cmd.exp: Update.
	* gdb.hp/gdb.base-hp/callfwmall.exp: Update.
	* gdb.hp/gdb.base-hp/hwwatchbus.exp: Update.
	* gdb.hp/gdb.base-hp/pxdb.exp: Update.
	* gdb.hp/gdb.base-hp/sized-enum.exp: Update.
	* gdb.hp/gdb.base-hp/so-thresh.exp: Update.
	* gdb.hp/gdb.compat/xdb1.exp: Update.
	* gdb.hp/gdb.compat/xdb2.exp: Update.
	* gdb.hp/gdb.compat/xdb3.exp: Update.
	* gdb.hp/gdb.defects/bs14602.exp: Update.
	* gdb.hp/gdb.defects/solib-d.exp: Update.
	* gdb.hp/gdb.objdbg/objdbg01.exp: Update.
	* gdb.hp/gdb.objdbg/objdbg02.exp: Update.
	* gdb.hp/gdb.objdbg/objdbg03.exp: Update.
	* gdb.hp/gdb.objdbg/objdbg04.exp: Update.
	* gdb.mi/gdb792.exp: Update.
	* gdb.mi/mi-pending.exp: Update.
	* gdb.mi/mi-solib.exp: Update.
	* gdb.mi/mi-var-cp.exp: Update.
	* gdb.opt/clobbered-registers-O2.exp: Update.
	* gdb.opt/inline-bt.exp: Update.
	* gdb.opt/inline-cmds.exp: Update.
	* gdb.opt/inline-locals.exp: Update.
	* gdb.python/py-events.exp: Update.
	* gdb.python/py-finish-breakpoint.exp: Update.
	* gdb.python/py-type.exp: Update.
	* gdb.reverse/solib-precsave.exp: Update.
	* gdb.reverse/solib-reverse.exp: Update.
	* gdb.server/solib-list.exp: Update.
	* gdb.stabs/weird.exp: Update.
	* gdb.threads/attach-into-signal.exp: Update.
	* gdb.threads/attach-stopped.exp: Update.
	* gdb.threads/tls-shared.exp: Update.
	* gdb.trace/change-loc.exp: Update.
	* gdb.trace/strace.exp: Update.
@
text
@d366 26
@


1.56
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d74 1
a74 1
if [get_compiler_info ${binfile}] {
@


1.55
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a48 4
if $tracelevel then {
        strace $tracelevel
        }

@


1.54
log
@gdb/doc/
2011-12-13  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo (Implementing a Remote Stub): Explain that you
	should transfer control to the stub in the startup code instead of
	in main.  Mention the need to get past the initial breakpoint.

gdb/testsuite/
2011-12-13  Pedro Alves  <pedro@@codesourcery.com>
	    Doug Evans  <dje@@google.com>

	* lib/gdb.exp (gdb_run_cmd, runto_main, gdb_compile)
	(clean_restart): Remove references to the gdb_stub target board
	variable.
	(gdb_step_for_stub): Delete.

	* gdb.base/annota1.exp: Remove all references to [target_info
	exists gdb_stub], gdb_step_for_stub and usestubs.
	* gdb.base/annota3.exp: Ditto.
	* gdb.base/async.exp: Ditto.
	* gdb.base/break.exp: Ditto.
	* gdb.base/code-expr.exp: Ditto.
	* gdb.base/commands.exp: Ditto.
	* gdb.base/completion.exp: Ditto.
	* gdb.base/condbreak.exp: Ditto.
	* gdb.base/consecutive.exp: Ditto.
	* gdb.base/cvexpr.exp: Ditto.
	* gdb.base/define.exp: Ditto.
	* gdb.base/display.exp: Ditto.
	* gdb.base/ena-dis-br.exp: Ditto.
	* gdb.base/environ.exp: Ditto.
	* gdb.base/gnu-ifunc.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/pending.exp: Ditto.
	* gdb.base/sect-cmd.exp: Ditto.
	* gdb.base/sepdebug.exp: Ditto.
	* gdb.base/unload.exp: Ditto.
	* gdb.base/watchpoint-solib.exp: Ditto.
	* gdb.cp/annota2.exp: Ditto.
	* gdb.cp/annota3.exp: Ditto.
	* gdb.dwarf2/dw2-inline-param.exp: Ditto.
	* gdb.hp/gdb.compat/xdb1.exp: Ditto.
	* gdb.mi/mi-pending.exp: Ditto.
	* gdb.trace/circ.exp: Ditto.
	* gdb.cp/ovldbreak.exp: Ditto.  Adjust expected line numbers.
	* gdb.base/list.exp: Ditto.

	* gdb.base/all-types.c: Remove all calls to set_debug_traps and
	breakpoint function and all references to the usestubs macro.
	* gdb.base/exprs.c: Ditto.
	* gdb.base/freebpcmd.c: Ditto.
	* gdb.base/bitfields.c: Ditto.
	* gdb.base/bitfields2.c: Ditto.
	* gdb.base/break.c: Ditto.
	* gdb.base/call-sc.c: Ditto.
	* gdb.base/call-signals.c: Ditto.
	* gdb.base/callfuncs.c: Ditto.
	* gdb.base/charset.c: Ditto.
	* gdb.base/consecutive.c: Ditto.
	* gdb.base/constvars.c: Ditto.
	* gdb.base/funcargs.c: Ditto.
	* gdb.base/int-type.c: Ditto.
	* gdb.base/interrupt.c: Ditto.
	* gdb.base/langs0.c: Ditto.
	* gdb.base/list0.c: Ditto.
	* gdb.base/mips_pro.c: Ditto.
	* gdb.base/miscexprs.c: Ditto.
	* gdb.base/nodebug.c: Ditto.
	* gdb.base/opaque0.c: Ditto.
	* gdb.base/pointers.c: Ditto.
	* gdb.base/printcmds.c: Ditto.
	* gdb.base/ptype.c: Ditto.
	* gdb.base/recurse.c: Ditto.
	* gdb.base/reread1.c: Ditto.
	* gdb.base/reread2.c: Ditto.
	* gdb.base/restore.c: Ditto.
	* gdb.base/return.c: Ditto.
	* gdb.base/run.c: Ditto.
	* gdb.base/scope0.c: Ditto.
	* gdb.base/sepdebug.c: Ditto.
	* gdb.base/setshow.c: Ditto.
	* gdb.base/setvar.c: Ditto.
	* gdb.base/sigall.c: Ditto.
	* gdb.base/signals.c: Ditto.
	* gdb.base/structs.c: Ditto.
	* gdb.base/structs2.c: Ditto.
	* gdb.base/testenv.c: Ditto.
	* gdb.base/twice.c: Ditto.
	* gdb.base/unwindonsignal.c: Ditto.
	* gdb.base/watchpoint.c: Ditto.
	* gdb.base/watchpoints.c: Ditto.
	* gdb.base/whatis.c: Ditto.
	* gdb.cp/classes.cc: Ditto.
	* gdb.cp/cplusfuncs.cc: Ditto.
	* gdb.cp/derivation.cc: Ditto.
	* gdb.cp/formatted-ref.cc: Ditto.
	* gdb.cp/misc.cc: Ditto.
	* gdb.cp/overload.cc: Ditto.
	* gdb.cp/ovldbreak.cc: Ditto.
	* gdb.cp/ref-params.cc: Ditto.
	* gdb.cp/ref-types.cc: Ditto.
	* gdb.cp/templates.cc: Ditto.
	* gdb.cp/virtfunc.cc: Ditto.
	* gdb.hp/gdb.aCC/run.c: Ditto.
	* gdb.hp/gdb.base-hp/callfwmall.c: Ditto.
	* gdb.hp/gdb.compat/xdb0.c: Ditto.
	* gdb.reverse/consecutive-reverse.c: Ditto.
	* gdb.reverse/sigall-reverse.c: Ditto.
	* gdb.reverse/until-reverse.c: Ditto.
	* gdb.reverse/watch-reverse.c: Ditto.
	* gdb.trace/actions.c: Ditto.
	* gdb.trace/circ.c: Ditto.
	* gdb.trace/collection.c: Ditto.
@
text
@d1 2
a2 2
# Copyright 1998, 1999, 2002, 2003, 2004, 2007, 2008, 2009, 2010, 2011
# Free Software Foundation, Inc.
@


1.53
log
@gdb/testsuite/
	* gdb.base/completion.exp (complete help info wat): Rename to ...
	(complete 'help info wat'): ... here.
	Remove all `-re ".*' and `-re "^.*' redundant regexes.
	(complete 'p 'arg', complete (2) 'p 'arg'): Remove redundant backslash.
@
text
@a53 2
global usestubs

@


1.53.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 2
# Copyright 1998-1999, 2002-2004, 2007-2012 Free Software Foundation,
# Inc.
@


1.52
log
@2011-05-04  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.base/completion.exp: Use gdb_test_multiple instead of
	gdb_test and explicit $gdb_prompt/timeout matches.
@
text
@d273 1
a273 1
set test "complete help info wat"
d299 1
a299 1
	    -re ".*$gdb_prompt $" {
d317 1
a317 1
	    -re ".*$gdb_prompt $" {
d328 1
a328 1
set test "complete 'p \'arg'"
d341 1
a341 1
set test "complete (2) 'p \'arg'"
d347 1
a347 1
	    -re ".*argv.*$gdb_prompt " {
d414 1
a414 1
	    -re ".*argv.*$gdb_prompt " {
d470 1
a470 1
	    -re ".*argv.*$gdb_prompt $" {
d488 1
a488 1
	    -re "^.* = 0.*$gdb_prompt $" {
d501 1
a501 1
	    -re "^.* = 0.*$gdb_prompt $" {
d514 1
a514 1
	    -re "^.* = .*0x\[0-9a-fA-F\]*.*$gdb_prompt $" {
d611 1
a611 1
	    -re ".*$gdb_prompt $" {
@


1.51
log
@2011-05-02  Pedro Alves  <pedro@@codesourcery.com>

	PR testsuite/12649
	Fix races.

	* gdb.base/completion.exp: Remove all sleep calls.  Remove
	unnecessary regexs.  Don't explicitly expect anything after the
	prompt.  Eat the prompt if necessary.
@
text
@d97 1
a97 1

d99 10
a108 13
gdb_expect  {
        -re "^hfgfh\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Undefined command: \"hfgfh\"\\.  Try \"help\"\\..*$gdb_prompt $"\
                                        { pass "complete 'hfgfh'"}
                      -re ".*$gdb_prompt $" { fail "complete 'hfgfh'"}
                      timeout           {fail "(timeout) complete 'hfgfh'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'hfgfh'" }
        timeout         { fail "(timeout) complete 'hfgfh'" }
        }
d112 1
d114 10
a123 15
gdb_expect  {
        -re "^show output-radix $"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Default output radix for printing of values is 10\\..*$gdb_prompt $"\
                                        { pass "complete 'show output'"}
                      -re ".*$gdb_prompt $" { fail "complete 'show output'"}
                      timeout           {fail "(timeout) complete 'show output'"}
                     }
            }

        -re ".*$gdb_prompt $"       { fail "complete 'show output'" }
        timeout         { fail "(timeout) complete 'show output'" }
        }

d125 1
d127 7
a133 13
gdb_expect  {
        -re "^show output-radix $"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Default output radix for printing of values is 10\\..*$gdb_prompt $"\
                                        { pass "complete 'show output-'"}
                      -re ".*$gdb_prompt $" { fail "complete 'show output-'"}
                      timeout           {fail "(timeout) complete 'show output-'"}
                     }
            }

        -re ".*$gdb_prompt $"       { fail "complete 'show output-'" }
        timeout         { fail "(timeout) complete 'show output-'" }
d135 2
d138 1
d140 7
a146 12
gdb_expect  {
        -re "^p\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "The history is empty\\..*$gdb_prompt $"\
                                        { pass "complete 'p'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p'"}
                      timeout           {fail "(timeout) complete 'p' 2"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'p'" }
        timeout         { fail "(timeout) complete 'p' 1" }
d148 2
d151 1
d153 10
a162 14
gdb_expect  {
        -re "^p \\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "The history is empty\\..*$gdb_prompt $"\
                                        { pass "complete 'p '"}
                      -re ".*$gdb_prompt $" { fail "complete 'p '"}
                      timeout           {fail "(timeout) complete 'p ' 1"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'p '" }
        timeout         { fail "(timeout) complete 'p ' 2" }
        }

d164 1
d166 10
a175 13
gdb_expect  {
        -re "^info t foo\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Ambiguous info command \"t foo\": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..*$gdb_prompt $"\
                                        { pass "complete 'info t foo'"}
                      -re ".*$gdb_prompt $" { fail "complete 'info t foo'"}
                      timeout           {fail "(timeout) complete 'info t foo'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info t foo'" }
        timeout         { fail "(timeout) complete 'info t foo'" }
        }
d177 1
d179 10
a188 15
gdb_expect  {
        -re "^info t\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Ambiguous info command \"t\": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..
*$gdb_prompt $"\
                                        { pass "complete 'info t'"}
                      -re ".*$gdb_prompt $" { fail "complete 'info t'"}
                      timeout           {fail "(timeout) complete 'info t'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info t'" }
        timeout         { fail "(timeout) complete 'info t'" }
        }

d190 1
d192 10
a201 15
gdb_expect  {
        -re "^info t \\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Ambiguous info command \"t \": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..
*$gdb_prompt $"\
                                        { pass "complete 'info t '"}
                      -re ".*$gdb_prompt $" { fail "complete 'info t '"}
                      timeout           {fail "(timeout) complete 'info t '"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info t '" }
        timeout         { fail "(timeout) complete 'info t '" }
        }

d203 1
d205 10
a214 15
gdb_expect  {
        -re "^info asdfgh\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Undefined info command: \"asdfgh\".  Try \"help info\"\\..
*$gdb_prompt $"\
                                        { pass "complete 'info asdfgh'"}
                      -re ".*$gdb_prompt $" { fail "complete 'info asdfgh'"}
                      timeout           {fail "(timeout) complete 'info asdfgh'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info asdfgh'" }
        timeout         { fail "(timeout) complete 'info asdfgh'" }
        }

d216 1
d218 10
a227 14
gdb_expect  {
        -re "^info asdfgh \\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Undefined info command: \"asdfgh \".  Try \"help info\"\\..
*$gdb_prompt $"\
                                        { pass "complete 'info asdfgh '"}
                      -re ".*$gdb_prompt $" { fail "complete 'info asdfgh '"}
                      timeout           {fail "(timeout) complete 'info asdfgh '"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info asdfgh '" }
        timeout         { fail "(timeout) complete 'info asdfgh '" }
        }
d229 1
d231 10
a240 13
gdb_expect  {
        -re "^info $"\
            { send_gdb "\n"
              gdb_expect {
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands.*$gdb_prompt $"\
                                        { pass "complete 'info'"}
                      -re ".*$gdb_prompt $" { fail "complete 'info'"}
                      timeout           {fail "(timeout) complete 'info'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info'" }
        timeout         { fail "(timeout) complete 'info'" }
        }
d242 1
d244 10
a253 13
gdb_expect  {
        -re "^info \\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\n.*$gdb_prompt $"\
                                        { pass "complete 'info '"}
                      -re ".*$gdb_prompt $" { fail "complete 'info '"}
                      timeout           {fail "(timeout) complete 'info '"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info '" }
        timeout         { fail "(timeout) complete 'info '" }
        }
d255 1
d257 15
a271 21
gdb_expect  {
        -re "^info \\\x07$"\
            { send_gdb "\t"
              gdb_expect {
                      -re "address.*types.*$gdb_prompt "\
                          { send_gdb "\n"
                            gdb_expect {
                                     -re "\"info\".*unambiguous\\..*$gdb_prompt $"\
                                        { pass "complete (2) 'info '"}
                                     -re ".*$gdb_prompt $" { fail "complete (2) 'info '"}
                                     timeout           {fail "(timeout) complete (2) 'info '"}
                                    }
                           }
                      -re ".*$gdb_prompt $" { fail "complete (2) 'info '"}
                      timeout           {fail "(timeout) complete (2) 'info '"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete (2) 'info '" }
        timeout         { fail "(timeout) complete (2) 'info '" }
        }

d273 1
d275 13
a287 15
gdb_expect  {
        -re "^help info watchpoints $"\
            { send_gdb "\n"
              gdb_expect {
                      -re "Status of specified watchpoints.*\r\n.*$gdb_prompt $"\
                          { pass "complete help info wat" }
                      -re ".*$gdb_prompt $" { fail "complete help info wat"}
                      timeout   {fail "(timeout) complete help info wat"}
                     }
            }
	-re "^help info wat\\\x07$" { fail "complete (2) help info wat" }
        -re ".*$gdb_prompt $" { fail "complete (3) help info wat" }
        timeout         { fail "(timeout) complete (3) help info wat" }
        }

d289 1
d291 10
a300 14
gdb_expect  {
        -re "^p \"break1\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
                      timeout           {fail "(timeout) complete 'p \"break1'"}
                     }
            }
	-re "^p \"break1\\.c\"$"\
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
		}
d302 3
a304 3
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1'" }
        timeout         { fail "(timeout) complete 'p \"break1'" }
        }
d307 1
d309 10
a318 14
gdb_expect  {
        -re "^p \"break1\\.\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
                      timeout           {fail "(timeout) complete 'p \"break1.'"}
                     }
            }
	-re "^p \"break1\\.c\"$"\
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
		}
d320 7
a326 10
	-re "^p \"break1\\..*$"
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
		}
	    }
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1.'" }
        timeout         { fail "(timeout) complete 'p \"break1.'" }
        }
d328 1
d330 10
a339 13
gdb_expect  {
        -re "^p 'arg\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt $"\
                                        { pass "complete 'p \'arg'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p \'arg'"}
                      timeout           {fail "(timeout) complete 'p \'arg'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'p \'arg'" }
        timeout         { fail "(timeout) complete 'p \'arg'" }
        }
d341 1
d343 1
a343 1
gdb_expect {
d346 1
a346 1
	gdb_expect {
d349 1
a349 1
		gdb_expect {
d351 1
a351 1
			pass "complete (2) 'p \'arg'"
a352 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
		    timeout { fail "(timeout) complete (2) 'p \'arg'" }
d357 1
a357 1
		gdb_expect {
d360 1
a360 1
			gdb_expect {
d362 1
a362 1
				pass "complete (2) 'p \'arg'"
a363 4
			    -re ".*$gdb_prompt $" { 
				fail "complete (2) 'p \'arg'"
			    }
			    timeout { fail "(timeout) complete (2) 'p \'arg'" }
a365 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
		    timeout { fail "(timeout) complete (2) 'p \'arg'" }
a367 2
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
	    timeout { fail "(timeout) complete (2) 'p \'arg'" }
a369 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
    timeout { fail "(timeout) complete (2) 'p \'arg'" }
d394 2
d397 1
a397 1
gdb_expect {
d400 1
a400 1
        gdb_expect {
d402 1
a402 7
                pass "complete 'p no_var_named_this-arg'"
            }
            -re ".*$gdb_prompt $" {
                fail "complete 'p no_var_named_this-arg'"
            }
            timeout {
                fail "(timeout) complete 'p no_var_named_this-arg'"
a405 6
    -re ".*$gdb_prompt $" {
        fail "complete 'p no_var_named_this-arg'"
    }
    timeout {
        fail "(timeout) complete 'p no_var_named_this-arg'"
    }
d408 1
d410 1
a410 1
gdb_expect {
d413 1
a413 1
	gdb_expect {
d416 1
a416 1
		gdb_expect {
d418 1
a418 1
			pass "complete (2) 'p no_var_named_this-arg'"
a419 6
		    -re ".*$gdb_prompt $" {
                        fail "complete (2) 'p no_var_named_this-arg'"
                    }
		    timeout {
                        fail "(timeout) complete (2) 'p no_var_named_this-arg'"
                    }
d428 4
a431 1
			pass "complete (2) 'p no_var_named_this-arg' (eat prompt)"
a432 1
		    timeout { fail "(timeout) complete (2) 'p no_var_named_this-' (eat prompt)" }
d435 1
a435 1
		gdb_expect {
d437 1
a437 7
			pass "complete (2) 'p no_var_named_this-arg'"
		    }
		    -re ".*$gdb_prompt $" {
			fail "complete (2) 'p no_var_named_this-arg'"
		    }
		    timeout {
			fail "(timeout) complete (2) 'p no_var_named_this-arg'"
a440 4
	    -re ".*$gdb_prompt $" {
                fail "complete (2) 'p no_var_named_this-arg'"
            }
	    timeout { fail "(timeout) complete (2) 'p no_var_named_this-arg'" }
a442 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p no_var_named_this-arg'" }
    timeout { fail "(timeout) complete (2) 'p no_var_named_this-arg'" }
d445 1
d447 1
a447 1
gdb_expect  {
d450 1
a450 1
	gdb_expect {
d457 4
a460 1
			pass "complete (2) 'p no_var_named_this-' (eat prompt)"
a461 1
		    timeout { fail "(timeout) complete (2) 'p no_var_named_this-' (eat prompt)" }
d464 1
a464 1
		gdb_expect {
d466 1
a466 7
			pass "complete (2) 'p no_var_named_this-'"
		    }
		    -re ".*$gdb_prompt $" {
			fail "complete (2) 'p no_var_named_this-'"
		    }
		    timeout {
			fail "(timeout) complete (2) 'p no_var_named_this-'"
d472 1
a472 1
		gdb_expect {
d474 1
a474 7
			pass "complete (2) 'p no_var_named_this-'"
		    }
		    -re ".*$gdb_prompt $" {
			fail "complete (2) 'p no_var_named_this-'"
		    }
		    timeout {
			fail "(timeout) complete (2) 'p no_var_named_this-'"
a477 4
	    -re ".*$gdb_prompt $" {
                fail "complete (2) 'p no_var_named_this-'"
            }
	    timeout { fail "(timeout) complete (2) 'p no_var_named_this-'" }
a479 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p no_var_named_this-'" }
    timeout { fail "(timeout) complete (2) 'p no_var_named_this-'" }
d482 1
d484 10
a493 13
gdb_expect  {
        -re "^p values.0..a_field $"\
            { send_gdb "\n"
              gdb_expect {
                      -re "^.* = 0.*$gdb_prompt $"\
                                        { pass "complete 'p values\[0\].a'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p values\[0\].a'"}
                      timeout           {fail "(timeout) complete 'p values\[0\].a'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'p values\[0\].a'" }
        timeout         { fail "(timeout) complete 'p values\[0\].a' 2" }
        }
d495 1
d497 10
a506 13
gdb_expect  {
        -re "^p values.0. . a_field $"\
            { send_gdb "\n"
              gdb_expect {
                      -re "^.* = 0.*$gdb_prompt $"\
                                        { pass "complete 'p values\[0\] . a'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p values\[0\] . a'"}
                      timeout           {fail "(timeout) complete 'p values\[0\] . a'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'p values\[0\] . a'" }
        timeout         { fail "(timeout) complete 'p values\[0\] . a' 2" }
        }
d508 1
d510 10
a519 13
gdb_expect  {
        -re "^p &values.0. -> a_field $"\
            { send_gdb "\n"
              gdb_expect {
                      -re "^.* = .*0x\[0-9a-fA-F\]*.*$gdb_prompt $"\
                                        { pass "complete 'p &values\[0\] -> a'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p &values\[0\] -> a'"}
                      timeout           {fail "(timeout) complete 'p &values\[0\] -> a'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'p &values\[0\] -> a'" }
        timeout         { fail "(timeout) complete 'p &values\[0\] -> a' 2" }
        }
d523 1
a523 1
    "copmletion of field in anonymous union"
d596 3
d600 16
a615 6
send_gdb "complete file ./gdb.base/compl\n"
gdb_expect  {
    -re "file ./gdb.base/completion\\.exp.*$gdb_prompt $"
	{ pass "complete-command 'file ./gdb.base/compl'"}
    -re ".*$gdb_prompt $"       { fail "complete-command 'file ./gdb.base/compl'" }
    timeout         { fail "(timeout) complete-command 'file ./gdb.base/compl'" }
d618 1
a618 17
send_gdb "file ./gdb.base/complet\t"
gdb_expect  {
        -re "^file ./gdb.base/completion\\.exp $"\
            { send_gdb "\n"
	      # Ignore the exact error message.
	      gdb_test_multiple "" "complete 'file ./gdb.base/complet'" {
		  -re "\r\nA program is being debugged already\\.\[\r\n\]+Are you sure you want to change the file\\? \\(y or n\\) $" {
		      send_gdb "n\n"
		      exp_continue
		  }
		  -re ".*$gdb_prompt $" { pass "complete 'file ./gdb.base/complet'" }
	      }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'file ./gdb.base/complet'" }
        timeout         { fail "(timeout) complete 'file ./gdb.base/complet'" }
        }

d620 15
a634 21
gdb_expect  {
        -re "^info func marke.*r$"\
            {
	      send_gdb "\t\t"
              gdb_expect {
                      -re "marker1.*$gdb_prompt "\
                      { send_gdb "\n"
                        gdb_expect {
                                -re "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long( int)?\\);.*$gdb_prompt $"\
                                                  { pass "complete 'info func marke'"}
                                -re ".*$gdb_prompt $" { fail "complete 'info func marke'"}
                                timeout           {fail "(timeout) complete 'info func marke'"}
                               }
                      }
                      -re ".*$gdb_prompt $" { fail "complete 'info func marke'"}
                      timeout           {fail "(timeout) complete 'info func marke'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'info func marke'" }
        timeout         { fail "(timeout) complete 'info func marke'" }
        }
d637 1
d639 13
a651 15
gdb_expect  {
        -re "child.*parent.*$gdb_prompt "\
            { send_gdb "\n"
              gdb_expect {
                      -re "Requires an argument.*child.*parent.*$gdb_prompt $"\
                                        { pass "complete 'set follow-fork-mode'"}
                      -re "Ambiguous item \"\"\\..*$gdb_prompt $"\
                                        { pass "complete 'set follow-fork-mode'"}
                      -re ".*$gdb_prompt $" { fail "complete 'set follow-fork-mode'"}
                      timeout           {fail "(timeout) complete 'set follow-fork-mode'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'set follow-fork-mode'" }
        timeout         { fail "(timeout) complete 'set follow-fork-mode'" }
        }
@


1.50
log
@2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* breakpoint.c (breakpoint_1): Change first argument from an int
	to a char pointer, so that the function now accepts a list of
	breakpoints rather than just one.  Use new function
	'number_is_in_list' to implement.
	(breakpoints_info): Pass char * instead of int to breakpoint_1.
	(watchpoints_info): Ditto.
	(tracepoints_info): Ditto.
	(maintenance_info_breakpoints): Ditto.
	(_initialize_breakpoint): Update help strings to reflect the fact
	that these functions can now take more than one argument.
	* cli/cli-utils.c (number_is_in_list): New function.
	* cli/cli-utils.h (number_is_in_list): Export.

2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdb.texinfo (Set Breaks): Add @@dots{} to arguments of info break.
	(Set Watchpoints): Add @@dots{} to argument of info watchpoints.
	(Listing Tracepoints): Add @@dots{} to argument of info tracepoints.

2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/break.exp: Add tests for "info break" with arguments.
	* gdb.trace/infotrace.exp: Update patterns for error and help.
	* gdb.base/completion.exp: Update pattern.
	* gdb.base/ena-dis-br.exp: Update pattern.
	* gdb.base/help.exp: Update patterns.
@
text
@a98 1
sleep 1
a115 1
sleep 1
a125 10
        -re "^show output$"\
            { send_gdb "\n"
               gdb_expect {
                      -re "Default output radix for printing of values is 10\\..*$gdb_prompt $"\
                                        { fail "complete 'show output'"}
                      -re ".*$gdb_prompt $" { fail "complete 'show output'"}
                      timeout           { fail "(timeout) complete 'show output'"}
                     }

             }
a132 1
sleep 1
a142 10
        -re "^show output-$"\
            { send_gdb "\n"
               gdb_expect {
                      -re "Default output radix for printing of values is 10\\..*$gdb_prompt $"\
                                        { fail "complete 'show output-'"}
                      -re ".*$gdb_prompt $" { fail "complete 'show output-'"}
                      timeout           { fail "(timeout) complete 'show output-'"}
                     }

             }
a148 1
sleep 1
a151 1
	      sleep 1
a163 1
sleep 3
a166 1
	      sleep 1
a179 1
sleep 1
a194 1
sleep 1
a211 1
sleep 1
a228 1
sleep 1
a245 1
sleep 1
a261 1
sleep 1
a276 1
sleep 1
a290 1

a291 1
sleep 1
d296 1
a296 1
                      -re "address.*types.*$gdb_prompt info $"\
a331 1
sleep 1
a346 7
	-re "^p \"break1.*$"
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
		}
	    }
a352 1
sleep 1
a379 1
sleep 1
a394 1
sleep 1
d399 1
a399 1
	    -re ".*argv.*$gdb_prompt p 'arg$" {
a458 1
sleep 1
a482 1
sleep 1
d487 1
a487 1
	    -re ".*argv.*$gdb_prompt p no_var_named_this-arg$" {
d502 10
a511 1
		send_gdb "n"
d513 2
a514 13
		    -re "\\(gdb\\) p no_var_named_this-arg$" {
			send_gdb "\n"
			gdb_expect {
			    -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
				pass "complete (2) 'p no_var_named_this-arg'"
			    }
			    -re ".*$gdb_prompt $" {
				fail "complete (2) 'p no_var_named_this-arg'"
			    }
			    timeout {
                                fail "(timeout) complete (2) 'p no_var_named_this-arg'"
                            }
			}
d517 2
a518 2
                        fail "complete (2) 'p no_var_named_this-arg'"
                    }
d520 2
a521 2
                        fail "(timeout) complete (2) 'p no_var_named_this-arg'"
                    }
a534 1
sleep 1
d540 10
a549 1
		send_gdb "n"
d551 2
a552 13
		    -re "\\(gdb\\) p no_var_named_this-$" {
			send_gdb "\n"
			gdb_expect {
			    -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
				pass "complete (2) 'p no_var_named_this-'"
			    }
			    -re ".*$gdb_prompt $" {
				fail "complete (2) 'p no_var_named_this-'"
			    }
			    timeout {
                                fail "(timeout) complete (2) 'p no_var_named_this-'"
                            }
			}
d555 2
a556 2
                        fail "complete (2) 'p no_var_named_this-'"
                    }
d558 2
a559 2
                        fail "(timeout) complete (2) 'p no_var_named_this-'"
                    }
d562 1
a562 1
	    -re ".*argv.*$gdb_prompt p no_var_named_this-$" {
a586 1
sleep 3
a589 1
	      sleep 1
a707 1
sleep 1
a715 1
sleep 1
a732 1
sleep 1
a736 1
              sleep 3
d738 1
a738 1
                      -re "marker1.*$gdb_prompt info func marker$"\
a756 1
sleep 1
d758 1
a758 1
        -re "child.*parent.*$gdb_prompt set follow-fork-mode $"\
@


1.49
log
@run copyright.sh for 2011.
@
text
@d355 1
a355 1
                      -re "Status of watchpoints, .*\r\n.*$gdb_prompt $"\
@


1.48
log
@gdb
	* completer.c (count_struct_fields): Handle anonymous structs and
	unions.
	(add_struct_fields): Likewise.
gdb/testsuite
	* gdb.base/completion.exp: Test completion through anonymous
	union.
	* gdb.base/break1.c (struct some_struct): Add anonymous union.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003, 2004, 2007, 2008, 2009, 2010
@


1.47
log
@gdb
	PR symtab/11919:
	* gdbtypes.c (lookup_struct_elt_type): Clean up error emission.
	* parse.c (parse_field_expression): Use RETURN_MASK_ERROR.  Move
	name-copying lower.  Document exception behavior.
	* completer.c (expression_completer): Catch exceptions from
	parse_field_expression.
gdb/testsuite
	PR symtab/11919:
	* gdb.base/completion.exp: Add test.
@
text
@d687 4
@


1.46
log
@Do not set prms_id/bug_id anymore.

2010-05-05  Joel Brobecker  <brobecker@@adacore.com>

	Remove the use of prms_id and bug_id throughout the testsuite.
@
text
@d830 2
a831 17
send_gdb "p values\[0\].nonex.\t"
gdb_expect  {
        -re "Type struct some_struct has no component named nonex.\r\n$gdb_prompt $"\
            { pass "Completing non-existing component" }
        -re ".*$gdb_prompt $"       { fail "Completing non-existing component" }
        timeout         { fail "(timeout) Completing non-existing component" }
        eof             { fail "(eof) Completing non-existing component #2" }
        }
# Double memory freeing gets found only on the second run:
send_gdb "p values\[0\].nonex.\t"
gdb_expect  {
        -re "Type struct some_struct has no component named nonex.\r\n$gdb_prompt $"\
            { pass "Completing non-existing component #2" }
        -re ".*$gdb_prompt $"       { fail "Completing non-existing component #2" }
        timeout         { fail "(timeout) Completing non-existing component #2" }
        eof             { fail "(eof) Completing non-existing component #2" }
        }
@


1.45
log
@gdb
	* cli/cli-decode.c (complete_on_cmdlist): Make two passes over the
	command list.
gdb/testsuite
	* gdb.base/completion.exp: Add tests for completion and deprecated
	commands.
@
text
@a58 2
set prms_id 0
set bug_id 0
@


1.44
log
@2010-04-04  Stan Shebs  <stan@@codesourcery.com>
	    Nathan Sidwell  <nathan@@codesourcery.com>

	* breakpoint.c (breakpoint_1): Add filter argument, return number of
	breakpoints printed.
	(is_hardware_watchpoint): Make argument const.
	(is_watchpoint): Ditto.
	(is_tracepoint): Merge of tracepoint_type and breakpoint_is_tracepoint,
	use it everywhere.
	(breakpoints_info): Pass NULL to breakpoint_1.
	(maintenance_info_breakpoints): Ditto.
	(watchpoints_info): New function.
	(tracepoints_info): Use breakpoint_1 filter.
	(set_ignore_count): Warn that tracepoint ignore count will be ignored.
	(_initialize_breakpoint): Make "info watchpoints" its own command.
	* breakpoint.h (is_tracepoint): Rename from breakpoint_is_tracepoint.
	* mi/mi-cmd-break.c (mi_cmd_break_commands): Use is_tracepoint.

	* gdb.texinfo (Setting Breakpoints): "info watch" no longer a synonym.
	(Setting Watchpoints): Update description of "info watch".
	(Disabling Breakpoints): Only "info break" lists all.

	* gdb.base/completion.exp: Update for new "info watchpoints".
	* gdb.base/default.exp: Ditto.
	* gdb.base/help.exp: Ditto.
	* gdb.base/watchpoint.exp: Ditto.
	* gdb.trace/infotrace.exp: Update "info tracpoints" output.
@
text
@d850 6
@


1.43
log
@	* gdb.base/completion.exp: Allow long instead of long int.
	* gdb.base/ending-run.exp: Match _rt_entry.* for RealView.
	* gdb.base/gdbvars.c (main): Remove unused usestubs code.  Reference
	variable p.
	* gdb.base/maint.exp: Allow ER_RO and ER_RW instead of .text and .data.
	* gdb.base/pointers.exp: Allow long instead of long int.
	* gdb.base/printcmds.exp: XFAIL for RealView on ARM EABI.
	* gdb.base/step-line.exp: Allow a directory before the source file name.
@
text
@d357 1
a357 1
                      -re "Synonym for .*\r\n.*$gdb_prompt $"\
@


1.42
log
@	gdb/testsuite/
	* gdb.base/comp-dir/subdir/dummy.txt: New file.
	* gdb.base/completion.exp: Use comp-dir/subdir instead of creating
	a temporary directory.
@
text
@d799 1
a799 1
                                -re "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);.*$gdb_prompt $"\
@


1.41
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d727 1
a727 3
# Do not use the `completion' start here as it would conflict with the
# testcase (complete 'file ./gdb.base/complet') expectations.
set uniquedir ${objdir}/${subdir}/compl-uNiQuEdIr
a731 1
file mkdir ${uniquedir}/${uniquesub}
@


1.40
log
@2009-12-28  Stan Shebs  <stan@@codesourcery.com>

	Add trace state variables.
	* ax.h (enum agent_op): Add getv, setv, and tracev.
	(ax_tsv): Declare.
	* ax-gdb.c: Include tracepoint.h.
	(gen_expr): Handle BINOP_ASSIGN, BINOP_ASSIGN_MODIFY, and
	OP_INTERNALVAR.
	(gen_expr_binop_rest): New function, split from gen_expr.
	* ax-general.c (ax_tsv): New function.
	(aop_map): Add new bytecodes.
	* tracepoint.h (struct trace_state_variable): New struct.
	(tsv_s): New typedef.
	(find_trace_state_variable): Declare.
	* tracepoint.c (tvariables): New global.
	(next_tsv_number): New global.
	(create_trace_state_variable): New function.
	(find_trace_state_variable): New function.
	(delete_trace_state_variable): New function.
	(trace_variable_command): New function.
	(delete_trace_variable_command): New function.
	(tvariables_info): New function.
	(trace_start_command): Download tsvs with initial values.
	(_initialize_tracepoint): Add new commands.
	* NEWS: Mention the addition of trace state variables.

==> doc/ChangeLog <==
2009-12-28  Stan Shebs  <stan@@codesourcery.com>

	* gdb.texinfo (Trace State Variables): New section.
	(Tracepoint Packets): Describe trace state variable packets.
	* agentexpr.texi (Bytecode Descriptions): Describe trace state
	variable bytecodes.

==> testsuite/ChangeLog <==
2009-12-28  Stan Shebs  <stan@@codesourcery.com>

	* gdb.trace/tsv.exp: New file.
	* gdb.base/completion.exp: Update ambiguous info output.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003, 2004, 2007, 2008, 2009
@


1.39
log
@gdb/testsuite/
	Fix gdb.base/macscp.exp when using custom inputrc.
	* gdb.base/completion.exp: Remove env(INPUTRC) set and restore.
	* gdb.base/readline.exp: Remove env(INPUTRC) set and restore.  Remove
	env(TERM) set.
	* gdb.cp/cpcompletion.exp: Remove env(INPUTRC) set.
	* lib/gdb.exp (default_gdb_start): Add env(INPUTRC) and env(TERM) set.
@
text
@d214 1
a214 1
                      -re "Ambiguous info command \"t foo\": target, tasks, terminal, threads, tp, tracepoints, types\\..*$gdb_prompt $"\
d230 1
a230 1
                      -re "Ambiguous info command \"t\": target, tasks, terminal, threads, tp, tracepoints, types\\..
d248 1
a248 1
                      -re "Ambiguous info command \"t \": target, tasks, terminal, threads, tp, tracepoints, types\\..
@


1.38
log
@gdb/testsuite/
	* gdb.base/completion.exp (directory completion): Create the directory.
	New variables uniquedir, escapeduniquedir, uniquesu, uniquesub,
	escapeuniquesub.
	(directory completion 2): Expect now ${escapeuniquesub}.
	(Glob remaining of directory test): Remove one excessive newline.
	Expect the real output.
@
text
@a87 12
# Don't let a .inputrc file or an existing setting of INPUTRC mess up
# the test results.  Even if /dev/null doesn't exist on the particular
# platform, the readline library will use the default setting just by
# failing to open the file.  OTOH, opening /dev/null successfully will
# also result in the default settings being used since nothing will be
# read from this file.
global env
if [info exists env(INPUTRC)] {
    set old_inputrc $env(INPUTRC)
}
set env(INPUTRC) "/dev/null"

a853 5
if [info exists old_inputrc] {
    set env(INPUTRC) $old_inputrc
} else {
    unset env(INPUTRC)
}
@


1.37
log
@	* gdb.base/completion.exp: Add a test for directory completion.
@
text
@d738 10
a747 2
# GDB used to fail adding / on directories, on the first try only
send_gdb "dir ../testsu\t"
d749 1
a749 1
	-re "../testsuite/$" {
d751 1
a751 1
	    send_gdb "gdb.bas\t"
d753 1
a753 1
	-re "../testsuite $" {
d755 1
a755 1
	    send_gdb "\b/gdb.bas\t"
d759 1
a759 1
	    send_gdb "\ndir ../testsuite/gdb.bas\t"
d764 1
a764 1
	-re "gdb.base/$" {
d772 2
a773 1
gdb_test "\n" "" "Glob remaining of directory test"
@


1.36
log
@        Updated copyright notices for most files.
@
text
@d737 30
@


1.35
log
@gdb/
	Fix memory double-free.
	* completer.c (line_completion_function): Clear LIST after called xfree.
gdb/testsuite/
	* gdb.base/completion.exp (Completing non-existing component): New test.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003, 2004, 2007, 2008
@


1.34
log
@        * gdb.base/completion.exp: Update expected output following
        the addition of the "info tasks" command.
@
text
@d808 18
@


1.33
log
@	Fix for PR gdb/1543.
	* gdb.base/sep.exp: `sep-proc.c' absolute line numbers replaced with
	$LOCATION.
	(location): New variable.
	* config/cfdbug.exp, config/d10v.exp, config/dve.exp, config/i960.exp,
	config/m32r.exp, config/mn10300-eval.exp, config/proelf.exp,
	config/rom68k.exp, config/sh.exp, config/unix.exp, config/vr4300.exp,
	config/vr5000.exp, config/vxworks.exp, gdb.arch/altivec-regs.exp,
	gdb.arch/e500-abi.exp, gdb.arch/e500-regs.exp, gdb.asm/asm-source.exp,
	gdb.base/a2-run.exp, gdb.base/advance.exp, gdb.base/all-bin.exp,
	gdb.base/args.exp, gdb.base/arithmet.exp, gdb.base/assign.exp,
	gdb.base/async.exp, gdb.base/auxv.exp, gdb.base/bigcore.c,
	gdb.base/bigcore.exp, gdb.base/bitfields.exp, gdb.base/bitops.exp,
	gdb.base/break.c, gdb.base/break.exp, gdb.base/break1.c,
	gdb.base/call-ar-st.exp, gdb.base/call-rt-st.exp,
	gdb.base/call-strs.exp, gdb.base/callfuncs.c, gdb.base/callfuncs.exp,
	gdb.base/checkpoint.exp, gdb.base/chng-syms.exp,
	gdb.base/code-expr.exp, gdb.base/commands.exp, gdb.base/completion.exp,
	gdb.base/complex.exp, gdb.base/cond-expr.exp, gdb.base/condbreak.exp,
	gdb.base/consecutive.exp, gdb.base/corefile.exp, gdb.base/cvexpr.c,
	gdb.base/cvexpr.exp, gdb.base/dbx.exp, gdb.base/default.exp,
	gdb.base/define.exp, gdb.base/del.c, gdb.base/detach.exp,
	gdb.base/display.exp, gdb.base/dump.exp, gdb.base/echo.exp,
	gdb.base/environ.exp, gdb.base/eval-skip.exp, gdb.base/exprs.exp,
	gdb.base/fileio.exp, gdb.base/find.exp, gdb.base/finish.exp,
	gdb.base/funcargs.exp, gdb.base/gcore-buffer-overflow.exp,
	gdb.base/gcore.exp, gdb.base/gdb1555.exp, gdb.base/gdbvars.exp,
	gdb.base/help.exp, gdb.base/huge.exp, gdb.base/info-proc.exp,
	gdb.base/interrupt.exp, gdb.base/jump.exp, gdb.base/langs.exp,
	gdb.base/lineinc.exp, gdb.base/list.exp, gdb.base/macscp.exp,
	gdb.base/maint.exp, gdb.base/mips_pro.exp, gdb.base/miscexprs.exp,
	gdb.base/nodebug.exp, gdb.base/nofield.c, gdb.base/opaque.exp,
	gdb.base/overlays.exp, gdb.base/page.exp, gdb.base/pc-fp.exp,
	gdb.base/pending.c, gdb.base/pendshr.c, gdb.base/pointers.exp,
	gdb.base/psymtab.exp, gdb.base/ptype.exp, gdb.base/randomize.c,
	gdb.base/readline.exp, gdb.base/recurse.exp, gdb.base/regs.exp,
	gdb.base/relational.exp, gdb.base/relocate.exp, gdb.base/remote.exp,
	gdb.base/reread.exp, gdb.base/return.exp, gdb.base/return2.exp,
	gdb.base/scope.exp, gdb.base/sect-cmd.exp, gdb.base/sep-proc.c,
	gdb.base/sep.c, gdb.base/sep.exp, gdb.base/sepdebug.c,
	gdb.base/sepdebug.exp, gdb.base/setshow.exp, gdb.base/shlib-call.exp,
	gdb.base/sigaltstack.c, gdb.base/so-indr-cl.exp, gdb.base/solib.exp,
	gdb.base/source.exp, gdb.base/start.c, gdb.base/step-bt.c,
	gdb.base/step-line.exp, gdb.base/structs.c, gdb.base/structs.exp,
	gdb.base/structs2.exp, gdb.base/term.exp, gdb.base/twice.exp,
	gdb.base/type-opaque.exp, gdb.base/until.exp,
	gdb.base/value-double-free.c, gdb.base/varargs.exp,
	gdb.base/watchpoint.exp, gdb.base/whatis-exp.exp, gdb.disasm/am33.exp,
	gdb.disasm/h8300s.exp, gdb.disasm/hppa.exp, gdb.disasm/mn10300.exp,
	gdb.disasm/sh3.exp, gdb.disasm/t01_mov.exp, gdb.disasm/t02_mova.exp,
	gdb.disasm/t03_add.exp, gdb.disasm/t04_sub.exp, gdb.disasm/t05_cmp.exp,
	gdb.disasm/t06_ari2.exp, gdb.disasm/t07_ari3.exp,
	gdb.disasm/t08_or.exp, gdb.disasm/t09_xor.exp, gdb.disasm/t10_and.exp,
	gdb.disasm/t11_logs.exp, gdb.disasm/t12_bit.exp,
	gdb.disasm/t13_otr.exp, gdb.fortran/exprs.exp, gdb.fortran/types.exp,
	gdb.hp/gdb.aCC/exception.exp, gdb.hp/gdb.aCC/optimize.exp,
	gdb.hp/gdb.aCC/watch-cmd.exp, gdb.hp/gdb.base-hp/callfwmall.exp,
	gdb.hp/gdb.base-hp/dollar.exp, gdb.hp/gdb.base-hp/hwwatchbus.exp,
	gdb.hp/gdb.base-hp/pxdb.exp, gdb.hp/gdb.base-hp/reg-pa64.exp,
	gdb.hp/gdb.base-hp/reg.exp, gdb.hp/gdb.base-hp/sized-enum.exp,
	gdb.hp/gdb.base-hp/so-thresh.exp, gdb.hp/gdb.compat/xdb1.exp,
	gdb.hp/gdb.compat/xdb2.exp, gdb.hp/gdb.compat/xdb3.exp,
	gdb.java/jmisc.exp, gdb.java/jv-exp.exp, gdb.java/jv-print.exp,
	gdb.mi/gdb669.exp, gdb.mi/gdb680.exp, gdb.mi/gdb701.exp,
	gdb.mi/gdb792.exp, gdb.mi/mi-basics.exp, gdb.mi/mi-console.exp,
	gdb.mi/mi-hack-cli.exp, gdb.mi/mi-pending.c, gdb.mi/mi-pendshr.c,
	gdb.mi/mi-pthreads.exp, gdb.mi/mi-read-memory.exp, gdb.mi/mi-regs.exp,
	gdb.mi/mi-syn-frame.exp, gdb.mi/mi-until.exp, gdb.mi/mi2-basics.exp,
	gdb.mi/mi2-console.exp, gdb.mi/mi2-hack-cli.exp,
	gdb.mi/mi2-pthreads.exp, gdb.mi/mi2-read-memory.exp,
	gdb.mi/mi2-regs.exp, gdb.mi/mi2-syn-frame.exp, gdb.mi/mi2-until.exp,
	gdb.pascal/types.exp, gdb.stabs/weird.exp,
	gdb.threads/gcore-thread.exp, gdb.threads/manythreads.exp,
	gdb.threads/print-threads.exp, gdb.threads/pthreads.exp,
	gdb.threads/schedlock.exp, gdb.threads/step.exp, gdb.threads/step2.exp,
	gdb.threads/switch-threads.exp, gdb.threads/thread-specific.exp,
	gdb.threads/thread_check.exp, gdb.threads/thread_events.exp,
	gdb.threads/tls-nodebug.exp, gdb.threads/tls-shared.exp,
	gdb.threads/tls.exp, gdb.trace/actions.exp, gdb.trace/backtrace.exp,
	gdb.trace/circ.exp, gdb.trace/collection.exp, gdb.trace/deltrace.exp,
	gdb.trace/infotrace.exp, gdb.trace/limits.exp, gdb.trace/packetlen.exp,
	gdb.trace/passc-dyn.exp, gdb.trace/passcount.exp, gdb.trace/report.exp,
	gdb.trace/save-trace.exp, gdb.trace/tfind.exp, gdb.trace/tracecmd.exp,
	gdb.trace/while-dyn.exp, gdb.trace/while-stepping.exp,
	lib/mi-support.exp, lib/trace-support.exp: Remove reference
	to bug-gdb@@prep.ai.mit.edu .
@
text
@d226 1
a226 1
                      -re "Ambiguous info command \"t foo\": target, terminal, threads, tp, tracepoints, types\\..*$gdb_prompt $"\
d242 1
a242 1
                      -re "Ambiguous info command \"t\": target, terminal, threads, tp, tracepoints, types\\..
d260 1
a260 1
                      -re "Ambiguous info command \"t \": target, terminal, threads, tp, tracepoints, types\\..
@


1.32
log
@gdb
	* completer.c (complete_line_internal): New function, from
	complete_line.  Add 'for_help' parameter.
	(complete_line): Use it.
	(command_completer): Move later.  Rewrite.
gdb/testsuite
	* gdb.base/completion.exp: Add 'help' completion test.
@
text
@a16 3
# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

@


1.31
log
@gdb
	* completer.c (complete_line): Don't special-case
	expression_completer.
	(expression_completer): Only pass last word to
	location_completer.
	* c-exp.y (yylex): Check 'token', not 'operator'.
gdb/testsuite
	* gdb.base/completion.exp: New tests for field name completion
	with spaces, and field name completion with '->'.
@
text
@d367 17
@


1.30
log
@gdb
	* value.h (evaluate_subexpression_type, extract_field_op):
	Declare.
	* printcmd.c (_initialize_printcmd): Use expression_completer for
	'p', 'inspect', 'call'.
	* parser-defs.h (parse_field_expression): Declare.
	* parse.c: Include exceptions.h.
	(in_parse_field, expout_last_struct): New globals.
	(mark_struct_expression): New function.
	(prefixify_expression): Return int.
	(prefixify_subexp): Return int.  Use expout_last_struct.
	(parse_exp_1): Update.
	(parse_exp_in_context): Add 'out_subexp' argument.  Handle
	in_parse_field.
	(parse_field_expression): New function.
	* expression.h (parse_field_expression): Declare.
	(in_parse_field): Likewise.
	* eval.c (evaluate_subexpression_type): New function.
	(extract_field_op): Likewise.
	* completer.h (expression_completer): Declare.
	* completer.c (expression_completer): New function.
	(count_struct_fields, add_struct_fields): New functions.
	* c-exp.y (yyparse): Redefine.
	(COMPLETE): New token.
	(exp): New productions.
	(saw_name_at_eof, last_was_structop): New globals.
	(yylex): Return COMPLETE when needed.  Recognize in_parse_field.
	(c_parse): New function.
	* breakpoint.c (_initialize_breakpoint): Use expression_completer
	for watch, awatch, and rwatch.
	* Makefile.in (parse.o): Depend on exceptions_h.
gdb/testsuite
	* gdb.base/break1.c (struct some_struct): New struct.
	(values): New global.
	* gdb.base/completion.exp: Add field name completion test.
gdb/doc
	* gdb.texinfo (Completion): Add field name example.
@
text
@d657 30
@


1.29
log
@	* gdb.base/completion.exp: Handle lack of other symbols beginning
	with "a".

	* gdb.base/varargs.exp: Correct quoting for options to gdb_compile.
@
text
@d640 16
@


1.28
log
@	Updated copyright notices for most files.
@
text
@d44 2
a45 2
#   "p 'a" ambiguous (all symbols starting with a)
#   "p b-a" ambiguous (all symbols starting with a)
d424 1
a424 1
send_gdb "p 'a\t"
d427 1
a427 1
        -re "^p 'a\\\x07$"\
d431 3
a433 3
                                        { pass "complete 'p \'a'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p \'a'"}
                      timeout           {fail "(timeout) complete 'p \'a'"}
d436 2
a437 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \'a'" }
        timeout         { fail "(timeout) complete 'p \'a'" }
d440 1
a440 1
send_gdb "p 'a\t"
d443 1
a443 1
    -re "^p 'a\\\x07$" {
d446 1
a446 1
	    -re ".*argv.*$gdb_prompt p .a$" {
d450 1
a450 1
			pass "complete (2) 'p \'a'"
d452 2
a453 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
		    timeout { fail "(timeout) complete (2) 'p \'a'" }
d459 1
a459 1
		    -re "\\(gdb\\) p 'a$" {
d463 1
a463 1
				pass "complete (2) 'p \'a'"
d466 1
a466 1
				fail "complete (2) 'p \'a'"
d468 1
a468 1
			    timeout { fail "(timeout) complete (2) 'p \'a'" }
d471 2
a472 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
		    timeout { fail "(timeout) complete (2) 'p \'a'" }
d475 2
a476 2
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
	    timeout { fail "(timeout) complete (2) 'p \'a'" }
d479 2
a480 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
    timeout { fail "(timeout) complete (2) 'p \'a'" }
d505 1
a505 1
send_gdb "p no_var_named_this-a\t"
d508 1
a508 1
    -re "^p no_var_named_this-a\\\x07$" {
d512 1
a512 1
                pass "complete 'p no_var_named_this-a'"
d515 1
a515 1
                fail "complete 'p no_var_named_this-a'"
d518 1
a518 1
                fail "(timeout) complete 'p no_var_named_this-a'"
d523 1
a523 1
        fail "complete 'p no_var_named_this-a'"
d526 1
a526 1
        fail "(timeout) complete 'p no_var_named_this-a'"
d530 1
a530 1
send_gdb "p no_var_named_this-a\t"
d533 1
a533 1
    -re "^p no_var_named_this-a\\\x07$" {
d536 1
a536 1
	    -re ".*argv.*$gdb_prompt p no_var_named_this-a$" {
d540 1
a540 1
			pass "complete (2) 'p no_var_named_this-a'"
d543 1
a543 1
                        fail "complete (2) 'p no_var_named_this-a'"
d546 1
a546 1
                        fail "(timeout) complete (2) 'p no_var_named_this-a'"
d553 1
a553 1
		    -re "\\(gdb\\) p no_var_named_this-a$" {
d557 1
a557 1
				pass "complete (2) 'p no_var_named_this-a'"
d560 1
a560 1
				fail "complete (2) 'p no_var_named_this-a'"
d563 1
a563 1
                                fail "(timeout) complete (2) 'p no_var_named_this-a'"
d568 1
a568 1
                        fail "complete (2) 'p no_var_named_this-a'"
d571 1
a571 1
                        fail "(timeout) complete (2) 'p no_var_named_this-a'"
d576 1
a576 1
                fail "complete (2) 'p no_var_named_this-a'"
d578 1
a578 1
	    timeout { fail "(timeout) complete (2) 'p no_var_named_this-a'" }
d581 2
a582 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p no_var_named_this-a'" }
    timeout { fail "(timeout) complete (2) 'p no_var_named_this-a'" }
d616 14
@


1.27
log
@        Switch the license of all .exp files to GPLv3.
        Switch the license of all .f and .f90 files to GPLv3.
        Switch the license of all .s and .S files to GPLv3.
@
text
@d1 2
a2 1
# Copyright 1998, 1999, 2002, 2003, 2004, 2007 Free Software Foundation, Inc.
@


1.26
log
@Copyright updates for 2007.
@
text
@d5 1
a5 1
# the Free Software Foundation; either version 2 of the License, or
d7 1
a7 1
# 
d12 1
a12 1
# 
d14 1
a14 2
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.25
log
@2006-11-10  Vladimir Prus  <vladimir@@codesourcery.com>

        * gdb.base/completion.exp: Fix completion tests for
        'info' and 'info '.
        * gdb.base/help.exp (help_test_raw, test_class_help)
        (test_prefix_command_help): Move...
        * lib/gdb.exp: Here.
        * gdb.base/main.exp: Adjust.
        * gdb.cp/maint.exp: Adjust.
        * gdb.trace/tracecmd.exp: Use test_help_class.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003, 2004 Free Software Foundation, Inc.
@


1.24
log
@	* gdb.arch/altivec-abi.exp: Replace gdb_suppress_entire_file with
	untested followed by return combination.
	* gdb.arch/altivec-regs.exp: Likewise.
	* gdb.arch/e500-abi.exp: Likewise.
	* gdb.arch/e500-regs.exp: Likewise.
	* gdb.arch/gdb1291.exp: Likewise.
	* gdb.arch/gdb1431.exp: Likewise.
	* gdb.arch/gdb1558.exp: Likewise.
	* gdb.arch/i386-prologue.exp: Likewise.
	* gdb.arch/i386-unwind.exp: Likewise.
	* gdb.asm/asm-source.exp: Likewise.
	* gdb.base/a2-run.exp: Likewise.
	* gdb.base/advance.exp: Likewise.
	* gdb.base/all-bin.exp: Likewise.
	* gdb.base/annota1.exp: Likewise.
	* gdb.base/annota3.exp: Likewise.
	* gdb.base/args.exp: Likewise.
	* gdb.base/arithmet.exp: Likewise.
	* gdb.base/assign.exp: Likewise.
	* gdb.base/async.exp: Likewise.
	* gdb.base/attach.exp: Likewise.
	* gdb.base/bang.exp: Likewise.
	* gdb.base/bigcore.exp: Likewise.
	* gdb.base/bitfields.exp: Likewise.
	* gdb.base/bitfields2.exp: Likewise.
	* gdb.base/break.exp: Likewise.
	* gdb.base/call-sc.exp: Likewise.
	* gdb.base/call-strs.exp: Likewise.
	* gdb.base/callfuncs.exp: Likewise.
	* gdb.base/checkpoint.exp: Likewise.
	* gdb.base/chng-syms.exp: Likewise.
	* gdb.base/code-expr.exp: Likewise.
	* gdb.base/commands.exp: Likewise.
	* gdb.base/completion.exp: Likewise.
	* gdb.base/cond-expr.exp: Likewise.
	* gdb.base/condbreak.exp: Likewise.
	* gdb.base/consecutive.exp: Likewise.
	* gdb.base/constvars.exp: Likewise.
	* gdb.base/corefile.exp: Likewise.
	* gdb.base/cvexpr.exp: Likewise.
	* gdb.base/dbx.exp: Likewise.
	* gdb.base/define.exp: Likewise.
	* gdb.base/detach.exp: Likewise.
	* gdb.base/display.exp: Likewise.
	* gdb.base/dump.exp: Likewise.
	* gdb.base/ena-dis-br.exp: Likewise.
	* gdb.base/ending-run.exp: Likewise.
	* gdb.base/environ.exp: Likewise.
	* gdb.base/eval-skip.exp: Likewise.
	* gdb.base/exprs.exp: Likewise.
	* gdb.base/fileio.exp: Likewise.
	* gdb.base/finish.exp: Likewise.
	* gdb.base/float.exp: Likewise.
	* gdb.base/foll-exec.exp: Likewise.
	* gdb.base/foll-fork.exp: Likewise.
	* gdb.base/foll-vfork.exp: Likewise.
	* gdb.base/freebpcmd.exp: Likewise.
	* gdb.base/funcargs.exp: Likewise.
	* gdb.base/gcore.exp: Likewise.
	* gdb.base/gdb1090.exp: Likewise.
	* gdb.base/gdb1250.exp: Likewise.
	* gdb.base/huge.exp: Likewise.
	* gdb.base/info-proc.exp: Likewise.
	* gdb.base/interrupt.exp: Likewise.
	* gdb.base/jump.exp: Likewise.
	* gdb.base/langs.exp: Likewise.
	* gdb.base/lineinc.exp: Likewise.
	* gdb.base/list.exp: Likewise.
	* gdb.base/logical.exp: Likewise.
	* gdb.base/long_long.exp: Likewise.
	* gdb.base/macscp.exp: Likewise.
	* gdb.base/maint.exp: Likewise.
	* gdb.base/mips_pro.exp: Likewise.
	* gdb.base/miscexprs.exp: Likewise.
	* gdb.base/multi-forks.exp: Likewise.
	* gdb.base/opaque.exp: Likewise.
	* gdb.base/overlays.exp: Likewise.
	* gdb.base/pc-fp.exp: Likewise.
	* gdb.base/pointers.exp: Likewise.
	* gdb.base/printcmds.exp: Likewise.
	* gdb.base/psymtab.exp: Likewise.
	* gdb.base/ptype.exp: Likewise.
	* gdb.base/recurse.exp: Likewise.
	* gdb.base/relational.exp: Likewise.
	* gdb.base/relocate.exp: Likewise.
	* gdb.base/remote.exp: Likewise.
	* gdb.base/reread.exp: Likewise.
	* gdb.base/restore.exp: Likewise.
	* gdb.base/return.exp: Likewise.
	* gdb.base/return2.exp: Likewise.
	* gdb.base/scope.exp: Likewise.
	* gdb.base/sect-cmd.exp: Likewise.
	* gdb.base/sep.exp: Likewise.
	* gdb.base/sepdebug.exp: Likewise.
	* gdb.base/setshow.exp: Likewise.
	* gdb.base/setvar.exp: Likewise.
	* gdb.base/sigall.exp: Likewise.
	* gdb.base/sigbpt.exp: Likewise.
	* gdb.base/signals.exp: Likewise.
	* gdb.base/signull.exp: Likewise.
	* gdb.base/sizeof.exp: Likewise.
	* gdb.base/solib.exp: Likewise.
	* gdb.base/step-line.exp: Likewise.
	* gdb.base/step-test.exp: Likewise.
	* gdb.base/structs.exp: Likewise.
	* gdb.base/structs2.exp: Likewise.
	* gdb.base/term.exp: Likewise.
	* gdb.base/twice.exp: Likewise.
	* gdb.base/until.exp: Likewise.
	* gdb.base/varargs.exp: Likewise.
	* gdb.base/volatile.exp: Likewise.
	* gdb.base/watchpoint.exp: Likewise.
	* gdb.base/whatis-exp.exp: Likewise.
	* gdb.base/whatis.exp: Likewise.
	* gdb.cp/ambiguous.exp: Likewise.
	* gdb.cp/annota2.exp: Likewise.
	* gdb.cp/annota3.exp: Likewise.
	* gdb.cp/bool.exp: Likewise.
	* gdb.cp/breakpoint.exp: Likewise.
	* gdb.cp/casts.exp: Likewise.
	* gdb.cp/class2.exp: Likewise.
	* gdb.cp/classes.exp: Likewise.
	* gdb.cp/cplusfuncs.exp: Likewise.
	* gdb.cp/ctti.exp: Likewise.
	* gdb.cp/derivation.exp: Likewise.
	* gdb.cp/exception.exp: Likewise.
	* gdb.cp/gdb1355.exp: Likewise.
	* gdb.cp/hang.exp: Likewise.
	* gdb.cp/inherit.exp: Likewise.
	* gdb.cp/local.exp: Likewise.
	* gdb.cp/m-data.exp: Likewise.
	* gdb.cp/m-static.exp: Likewise.
	* gdb.cp/member-ptr.exp: Likewise.
	* gdb.cp/method.exp: Likewise.
	* gdb.cp/misc.exp: Likewise.
	* gdb.cp/namespace.exp: Likewise.
	* gdb.cp/overload.exp: Likewise.
	* gdb.cp/ovldbreak.exp: Likewise.
	* gdb.cp/pr-1023.exp: Likewise.
	* gdb.cp/pr-1210.exp: Likewise.
	* gdb.cp/pr-574.exp: Likewise.
	* gdb.cp/printmethod.exp: Likewise.
	* gdb.cp/psmang.exp: Likewise.
	* gdb.cp/ref-params.exp: Likewise.
	* gdb.cp/ref-types.exp: Likewise.
	* gdb.cp/rtti.exp: Likewise.
	* gdb.cp/templates.exp: Likewise.
	* gdb.cp/try_catch.exp: Likewise.
	* gdb.cp/userdef.exp: Likewise.
	* gdb.cp/virtfunc.exp: Likewise.
	* gdb.disasm/am33.exp: Likewise.
	* gdb.disasm/h8300s.exp: Likewise.
	* gdb.disasm/mn10300.exp: Likewise.
	* gdb.disasm/sh3.exp: Likewise.
	* gdb.disasm/t01_mov.exp: Likewise.
	* gdb.disasm/t02_mova.exp: Likewise.
	* gdb.disasm/t03_add.exp: Likewise.
	* gdb.disasm/t04_sub.exp: Likewise.
	* gdb.disasm/t05_cmp.exp: Likewise.
	* gdb.disasm/t06_ari2.exp: Likewise.
	* gdb.disasm/t07_ari3.exp: Likewise.
	* gdb.disasm/t08_or.exp: Likewise.
	* gdb.disasm/t09_xor.exp: Likewise.
	* gdb.disasm/t10_and.exp: Likewise.
	* gdb.disasm/t11_logs.exp: Likewise.
	* gdb.disasm/t12_bit.exp: Likewise.
	* gdb.disasm/t13_otr.exp: Likewise.
	* gdb.hp/gdb.aCC/optimize.exp: Likewise.
	* gdb.hp/gdb.aCC/watch-cmd.exp: Likewise.
	* gdb.hp/gdb.base-hp/callfwmall.exp: Likewise.
	* gdb.hp/gdb.base-hp/dollar.exp: Likewise.
	* gdb.hp/gdb.base-hp/hwwatchbus.exp: Likewise.
	* gdb.hp/gdb.base-hp/pxdb.exp: Likewise.
	* gdb.hp/gdb.base-hp/reg-pa64.exp: Likewise.
	* gdb.hp/gdb.base-hp/reg.exp: Likewise.
	* gdb.hp/gdb.base-hp/sized-enum.exp: Likewise.
	* gdb.hp/gdb.compat/xdb1.exp: Likewise.
	* gdb.hp/gdb.compat/xdb3.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg01.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg02.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg03.exp: Likewise.
	* gdb.hp/gdb.objdbg/objdbg04.exp: Likewise.
	* gdb.mi/gdb701.exp: Likewise.
	* gdb.mi/gdb792.exp: Likewise.
	* gdb.mi/mi-basics.exp: Likewise.
	* gdb.mi/mi-break.exp: Likewise.
	* gdb.mi/mi-cli.exp: Likewise.
	* gdb.mi/mi-console.exp: Likewise.
	* gdb.mi/mi-disassemble.exp: Likewise.
	* gdb.mi/mi-eval.exp: Likewise.
	* gdb.mi/mi-file.exp: Likewise.
	* gdb.mi/mi-read-memory.exp: Likewise.
	* gdb.mi/mi-regs.exp: Likewise.
	* gdb.mi/mi-return.exp: Likewise.
	* gdb.mi/mi-simplerun.exp: Likewise.
	* gdb.mi/mi-stack.exp: Likewise.
	* gdb.mi/mi-stepi.exp: Likewise.
	* gdb.mi/mi-syn-frame.exp: Likewise.
	* gdb.mi/mi-until.exp: Likewise.
	* gdb.mi/mi-var-block.exp: Likewise.
	* gdb.mi/mi-var-child.exp: Likewise.
	* gdb.mi/mi-var-cmd.exp: Likewise.
	* gdb.mi/mi-var-display.exp: Likewise.
	* gdb.mi/mi-watch.exp: Likewise.
	* gdb.mi/mi2-basics.exp: Likewise.
	* gdb.mi/mi2-break.exp: Likewise.
	* gdb.mi/mi2-cli.exp: Likewise.
	* gdb.mi/mi2-console.exp: Likewise.
	* gdb.mi/mi2-disassemble.exp: Likewise.
	* gdb.mi/mi2-eval.exp: Likewise.
	* gdb.mi/mi2-file.exp: Likewise.
	* gdb.mi/mi2-read-memory.exp: Likewise.
	* gdb.mi/mi2-regs.exp: Likewise.
	* gdb.mi/mi2-return.exp: Likewise.
	* gdb.mi/mi2-simplerun.exp: Likewise.
	* gdb.mi/mi2-stack.exp: Likewise.
	* gdb.mi/mi2-stepi.exp: Likewise.
	* gdb.mi/mi2-syn-frame.exp: Likewise.
	* gdb.mi/mi2-until.exp: Likewise.
	* gdb.mi/mi2-var-block.exp: Likewise.
	* gdb.mi/mi2-var-child.exp: Likewise.
	* gdb.mi/mi2-var-cmd.exp: Likewise.
	* gdb.mi/mi2-var-display.exp: Likewise.
	* gdb.mi/mi2-watch.exp: Likewise.
	* gdb.stabs/exclfwd.exp: Likewise.
	* gdb.stabs/weird.exp: Likewise.
	* gdb.threads/gcore-thread.exp: Likewise.
	* gdb.trace/actions.exp: Likewise.
	* gdb.trace/backtrace.exp: Likewise.
	* gdb.trace/circ.exp: Likewise.
	* gdb.trace/collection.exp: Likewise.
	* gdb.trace/deltrace.exp: Likewise.
	* gdb.trace/infotrace.exp: Likewise.
	* gdb.trace/limits.exp: Likewise.
	* gdb.trace/packetlen.exp: Likewise.
	* gdb.trace/passc-dyn.exp: Likewise.
	* gdb.trace/passcount.exp: Likewise.
	* gdb.trace/report.exp: Likewise.
	* gdb.trace/save-trace.exp: Likewise.
	* gdb.trace/tfind.exp: Likewise.
	* gdb.trace/tracecmd.exp: Likewise.
	* gdb.trace/while-dyn.exp: Likewise.
	* gdb.trace/while-stepping.exp: Likewise.
@
text
@d316 1
a316 1
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\n.*info address.*info watchpoints.*\r\n\r\nType \"help info\" followed by info subcommand name for full documentation.\r\nCommand name abbreviations are allowed if unambiguous\\..*$gdb_prompt $"\
d332 1
a332 1
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\n.*info address.*Type \"help info\" followed by info subcommand name for full documentation.\r\nCommand name abbreviations are allowed if unambiguous\\..*$gdb_prompt $"\
@


1.23
log
@gdb/
	* corefile.c (reopen_exec_file): Only check for an open exec file.
	Use exec_file_attach.
	* exec.c (exec_open): Make static.
	(exec_file_command): Don't use target_preopen.  Query directly about
	changing the file.
	* gdbcore.h (exec_open): Remove prototype.
gdb/testsuite/
	* gdb.base/completion.exp: Update for change in "file" behavior.
	* gdb.stabs/weird.exp: Likewise.
	* lib/mi-support.exp (mi_gdb_file_cmd): Likewise.
	* lib/gdb.exp (gdb_file_cmd): Likewise.  Kill the program explicitly.
@
text
@d71 2
a72 1
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d76 2
a77 1
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d81 2
a82 1
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
@


1.22
log
@2006-03-07  Paul Brook  <paul@@codesourcery.com>

	* gdb.arch/altivec-abi.exp: Use nowarnings instead of
	additional_flags=-w.
	* gdb.arch/altivec-regs.exp: Ditto.
	* gdb.arch/e500-abi.exp: Ditto.
	* gdb.arch/e500-regs.exp: Ditto.
	* gdb.base/all-bin.exp: Ditto.
	* gdb.base/annota1.exp: Ditto.
	* gdb.base/annota3.exp: Ditto.
	* gdb.base/args.exp: Ditto.
	* gdb.base/arithmet.exp: Ditto.
	* gdb.base/assign.exp: Ditto.
	* gdb.base/async.exp: Ditto.
	* gdb.base/bang.exp: Ditto.
	* gdb.base/break.exp: Ditto.
	* gdb.base/call-rt-st.exp: Ditto.
	* gdb.base/completion.exp: Ditto.
	* gdb.base/cond-expr.exp: Ditto.
	* gdb.base/condbreak.exp: Ditto.
	* gdb.base/consecutive.exp: Ditto.
	* gdb.base/define.exp: Ditto.
	* gdb.base/display.exp: Ditto.
	* gdb.base/ena-dis-br.exp: Ditto.
	* gdb.base/environ.exp: Ditto.
	* gdb.base/eval-skip.exp: Ditto.
	* gdb.base/info-proc.exp: Ditto.
	* gdb.base/jump.exp: Ditto.
	* gdb.base/logical.exp: Ditto.
	* gdb.base/long_long.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/miscexprs.exp: Ditto.
	* gdb.base/pc-fp.exp: Ditto.
	* gdb.base/pointers.exp: Ditto.
	* gdb.base/relational.exp: Ditto.
	* gdb.base/reread.exp: Ditto.
	* gdb.base/sect-cmd.exp: Ditto.
	* gdb.base/sep.exp: Ditto.
	* gdb.base/sepdebug.exp: Ditto.
	* gdb.base/until.exp: Ditto.
	* gdb.base/whatis-exp.exp: Ditto.
	* gdb.cp/annota2.exp: Ditto.
	* gdb.cp/annota3.exp: Ditto.
	* gdb.trace/actions.exp: Ditto.
	* gdb.trace/backtrace.exp: Ditto.
	* gdb.trace/circ.exp: Ditto.
	* gdb.trace/collection.exp: Ditto.
	* gdb.trace/deltrace.exp: Ditto.
	* gdb.trace/infotrace.exp: Ditto.
	* gdb.trace/limits.exp: Ditto.
	* gdb.trace/packetlen.exp: Ditto.
	* gdb.trace/passc-dyn.exp: Ditto.
	* gdb.trace/passcount.exp: Ditto.
	* gdb.trace/report.exp: Ditto.
	* gdb.trace/save-trace.exp: Ditto.
	* gdb.trace/tfind.exp: Ditto.
	* gdb.trace/tracecmd.exp: Ditto.
	* gdb.trace/while-dyn.exp: Ditto.
	* gdb.trace/while-stepping.exp: Ditto.
	* lib/gdb.exp: Ditto.
	(gdb_compile): Handle nowarning option.
@
text
@d674 8
a681 13
              gdb_expect {
                      -re "\r\nA program is being debugged already\\.  Kill it\\? \\(y or n\\) $"
                      { send_gdb "n\n"
                        gdb_expect {
                                -re "\r\nProgram not killed\\.\r\n$gdb_prompt $"\
                                        { pass "complete 'file ./gdb.base/complet'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/complet'"}
                                timeout           {fail "(timeout) complete 'file ./gdb.base/complet'"}
                               }
                      }
                      -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/complet'"}
                      timeout           {fail "(timeout) complete 'file ./gdb.base/complet'"}
                     }
@


1.22.8.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d71 1
a71 2
     untested completion.exp
     return -1
d75 1
a75 2
     untested completion.exp
     return -1
d79 1
a79 2
     untested completion.exp
     return -1
d674 13
a686 8
	      # Ignore the exact error message.
	      gdb_test_multiple "" "complete 'file ./gdb.base/complet'" {
		  -re "\r\nA program is being debugged already\\.\[\r\n\]+Are you sure you want to change the file\\? \\(y or n\\) $" {
		      send_gdb "n\n"
		      exp_continue
		  }
		  -re ".*$gdb_prompt $" { pass "complete 'file ./gdb.base/complet'" }
	      }
@


1.21
log
@	* gdb.base/completion.exp: Kill a stray backslash.

	From Jim Ingham <jingham@@apple.com>:
	* gdb.base/completion.exp: Test that "complete file ./gdb.base/compl"
	agrees with the result from sending a tab.
@
text
@d70 1
a70 1
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug additional_flags=-w}] != "" } {
d74 1
a74 1
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug additional_flags=-w}] != "" } {
d78 1
a78 1
if  { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug additional_flags=-w}] != "" } {
@


1.21.28.1
log
@2006-03-07  Paul Brook  <paul@@codesourcery.com>

	Backport from mainline.
	* gdb.arch/altivec-abi.exp: Use nowarnings instead of
	additional_flags=-w.
	* gdb.arch/altivec-regs.exp: Ditto.
	* gdb.arch/e500-abi.exp: Ditto.
	* gdb.arch/e500-regs.exp: Ditto.
	* gdb.base/all-bin.exp: Ditto.
	* gdb.base/annota1.exp: Ditto.
	* gdb.base/annota3.exp: Ditto.
	* gdb.base/args.exp: Ditto.
	* gdb.base/arithmet.exp: Ditto.
	* gdb.base/assign.exp: Ditto.
	* gdb.base/async.exp: Ditto.
	* gdb.base/bang.exp: Ditto.
	* gdb.base/break.exp: Ditto.
	* gdb.base/call-rt-st.exp: Ditto.
	* gdb.base/completion.exp: Ditto.
	* gdb.base/cond-expr.exp: Ditto.
	* gdb.base/condbreak.exp: Ditto.
	* gdb.base/consecutive.exp: Ditto.
	* gdb.base/define.exp: Ditto.
	* gdb.base/display.exp: Ditto.
	* gdb.base/ena-dis-br.exp: Ditto.
	* gdb.base/environ.exp: Ditto.
	* gdb.base/eval-skip.exp: Ditto.
	* gdb.base/info-proc.exp: Ditto.
	* gdb.base/jump.exp: Ditto.
	* gdb.base/logical.exp: Ditto.
	* gdb.base/long_long.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/miscexprs.exp: Ditto.
	* gdb.base/pc-fp.exp: Ditto.
	* gdb.base/pointers.exp: Ditto.
	* gdb.base/relational.exp: Ditto.
	* gdb.base/reread.exp: Ditto.
	* gdb.base/sect-cmd.exp: Ditto.
	* gdb.base/sep.exp: Ditto.
	* gdb.base/sepdebug.exp: Ditto.
	* gdb.base/until.exp: Ditto.
	* gdb.base/whatis-exp.exp: Ditto.
	* gdb.cp/annota2.exp: Ditto.
	* gdb.cp/annota3.exp: Ditto.
	* gdb.trace/actions.exp: Ditto.
	* gdb.trace/backtrace.exp: Ditto.
	* gdb.trace/circ.exp: Ditto.
	* gdb.trace/collection.exp: Ditto.
	* gdb.trace/deltrace.exp: Ditto.
	* gdb.trace/infotrace.exp: Ditto.
	* gdb.trace/limits.exp: Ditto.
	* gdb.trace/packetlen.exp: Ditto.
	* gdb.trace/passc-dyn.exp: Ditto.
	* gdb.trace/passcount.exp: Ditto.
	* gdb.trace/report.exp: Ditto.
	* gdb.trace/save-trace.exp: Ditto.
	* gdb.trace/tfind.exp: Ditto.
	* gdb.trace/tracecmd.exp: Ditto.
	* gdb.trace/while-dyn.exp: Ditto.
	* gdb.trace/while-stepping.exp: Ditto.
	* lib/gdb.exp: Ditto.
	(gdb_compile): Handle nowarning option.
@
text
@d70 1
a70 1
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug nowarnings}] != "" } {
d74 1
a74 1
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug nowarnings}] != "" } {
d78 1
a78 1
if  { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug nowarnings}] != "" } {
@


1.21.28.1.2.1
log
@        gdb/
        * buildsym.c, symtab.c: Add local hack for FILENAME_CMP testing.
        * utils.c (cygwin_filename_cmp): New.

        Backport:
        2006-04-21  Frederic Riss  <frederic.riss@@st.com>
        * dwarf2read.c (dwarf2_start_subfile): Change prototype to accept
        compilation directory as last argument.
        Always pass comp_dir as second argument to start_subfile and prepend
        dirname to the filename when necessary.
        Remove now superfluous search for pre-existing subfile.
        (dwarf_decode_lines): Pass the compilation directory to
        dwarf2_start_subfile.

        gdb/testsuite/
        * config/symbian.exp (gdb_target_symbian): Handle a running target.
        (gdb_load): Add return value.

        * gdb.base/completion.exp: Test arg rather than a.  Handle
        very small lists of symbols.

        * gdb.base/list.exp: Differentiate run behavior based on
        use_gdb_stub.

        * gdb.base/maint.exp: Accept local symbols.  Accept missing .data.

        * gdb.base/remote.exp: Update packet limits.

        * gdb.base/varargs.exp: Don't pass an empty list item.

        * lib/gdb.exp (fullname_syntax): Recognize forward slashes in DOS
        paths.

        Backport:
        2006-06-22  Daniel Jacobowitz  <dan@@codesourcery.com>
        * gdb.base/gdb1555.exp: Use gdb_compile_shlib.  Skip if not
        native.

        2006-06-22  Daniel Jacobowitz  <dan@@codesourcery.com>
        * gdb.stabs/exclfwd.exp: Skip the test if configure did not
        enable stabs testing.

        2006-05-06  Ulrich Weigand  <Ulrich.Weigand@@de.ibm.com>
        * gdb.mi/mi-basics.exp: Add missing serial number to
        expected output in some mi_gdb_test statements.
        * gdb.mi/mi2-basics.exp: Likewise.
@
text
@d44 2
a45 2
#   "p 'arg" ambiguous (all symbols starting with arg)
#   "p b-aarg" ambiguous (all symbols starting with arg)
d421 1
a421 1
send_gdb "p 'arg\t"
d424 1
a424 1
        -re "^p 'arg\\\x07$"\
d428 3
a430 3
                                        { pass "complete 'p \'arg'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p \'arg'"}
                      timeout           {fail "(timeout) complete 'p \'arg'"}
d433 2
a434 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \'arg'" }
        timeout         { fail "(timeout) complete 'p \'arg'" }
d437 1
a437 1
send_gdb "p 'arg\t"
d440 1
a440 1
    -re "^p 'arg\\\x07$" {
d443 1
a443 1
	    -re ".*argv.*$gdb_prompt p 'arg$" {
d447 1
a447 1
			pass "complete (2) 'p \'arg'"
d449 2
a450 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
		    timeout { fail "(timeout) complete (2) 'p \'arg'" }
d456 1
a456 1
		    -re "\\(gdb\\) p 'arg$" {
d460 1
a460 1
				pass "complete (2) 'p \'arg'"
d463 1
a463 1
				fail "complete (2) 'p \'arg'"
d465 1
a465 1
			    timeout { fail "(timeout) complete (2) 'p \'arg'" }
d468 2
a469 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
		    timeout { fail "(timeout) complete (2) 'p \'arg'" }
d472 2
a473 2
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
	    timeout { fail "(timeout) complete (2) 'p \'arg'" }
d476 2
a477 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'arg'" }
    timeout { fail "(timeout) complete (2) 'p \'arg'" }
d502 1
a502 1
send_gdb "p no_var_named_this-arg\t"
d505 1
a505 1
    -re "^p no_var_named_this-arg\\\x07$" {
d509 1
a509 1
                pass "complete 'p no_var_named_this-arg'"
d512 1
a512 1
                fail "complete 'p no_var_named_this-arg'"
d515 1
a515 1
                fail "(timeout) complete 'p no_var_named_this-arg'"
d520 1
a520 1
        fail "complete 'p no_var_named_this-arg'"
d523 1
a523 1
        fail "(timeout) complete 'p no_var_named_this-arg'"
d527 1
a527 1
send_gdb "p no_var_named_this-arg\t"
d530 1
a530 1
    -re "^p no_var_named_this-arg\\\x07$" {
d533 1
a533 1
	    -re ".*argv.*$gdb_prompt p no_var_named_this-arg$" {
d537 1
a537 1
			pass "complete (2) 'p no_var_named_this-arg'"
d540 1
a540 1
                        fail "complete (2) 'p no_var_named_this-arg'"
d543 1
a543 1
                        fail "(timeout) complete (2) 'p no_var_named_this-arg'"
d550 1
a550 1
		    -re "\\(gdb\\) p no_var_named_this-arg$" {
d554 1
a554 1
				pass "complete (2) 'p no_var_named_this-arg'"
d557 1
a557 1
				fail "complete (2) 'p no_var_named_this-arg'"
d560 1
a560 1
                                fail "(timeout) complete (2) 'p no_var_named_this-arg'"
d565 1
a565 1
                        fail "complete (2) 'p no_var_named_this-arg'"
d568 1
a568 1
                        fail "(timeout) complete (2) 'p no_var_named_this-arg'"
d573 1
a573 1
                fail "complete (2) 'p no_var_named_this-arg'"
d575 1
a575 1
	    timeout { fail "(timeout) complete (2) 'p no_var_named_this-arg'" }
d578 2
a579 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p no_var_named_this-arg'" }
    timeout { fail "(timeout) complete (2) 'p no_var_named_this-arg'" }
a612 14
	    -re ".*argv.*$gdb_prompt p no_var_named_this-$" {
		send_gdb "\n"
		gdb_expect {
		    -re "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt $" {
			pass "complete (2) 'p no_var_named_this-'"
		    }
		    -re ".*$gdb_prompt $" {
			fail "complete (2) 'p no_var_named_this-'"
		    }
		    timeout {
			fail "(timeout) complete (2) 'p no_var_named_this-'"
		    }
		}
	    }
@


1.21.28.2
log
@2006-05-03  Paul Brook  <paul@@codesourcery.com>
	Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb/testsuite/gdb.cp/gdb1355.exp: Accept different spellings of
	integer types.
	* gdb/testsuite/gdb.cp/gdb1355.cc: Ensure all types are referenced.
	* gdb/testsuite/gdb.cp/hang2.C: Ditto.
	* gdb/testsuite/gdb.cp/m-data.cc: Ditto.
	* gdb/testsuite/gdb.cp/hang3.C: Ditto.
	* gdb/testsuite/gdb.cp/hang1.C: Ditto.

	* gdb/gdbtypes.c (rank_one_type): Check for plain char -> signed/
	unsigned char.

	* gdb/testsuite/gdb.base/completion.exp: Accept "long" as a type.

	* gdb/testsuite/gdb.base/volatile.exp: Accept different spellings of
	integer types.
	* gdb/testsuite/gdb.base/constvars.c: Ensure all types are referenced.

	* gdb/testsuite/gdb.stabs/weird.exp: Return -1 instead of issuing
	error.

	* gdb/testsuite/gdb.base/advance.c: Add proper function prototype.

	* gdb/testsuite/gdb.base/ending-run.exp: Add case for ARM runtime.

	* gdb/testsuite/gdb.base/gdb1821.c: Ensure all types are referenced.

	* gdb/testsuite/gdb.base/ptype.exp: Accept different spellings of
	integer types.

	* gdb/testsuite/gdb.cp/inherit.exp: Cope with armcc vtable pointers.

	* gdb/testsuite/gdb.mi/mi2-var-child.exp: Accept different spellings
	of integer types.
	* gdb/testsuite/gdb.mi/mi-var-display.exp: Ditto.
	* gdb/testsuite/gdb.mi/mi2-var-display.exp: Ditto.
	* gdb/testsuite/gdb.mi/mi2-var-cmd.exp: Ditto.
@
text
@d703 1
a703 1
                                -re "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long( int)?\\);.*$gdb_prompt $"\
@


1.20
log
@2004-01-13  David Carlton  <carlton@@kealia.com>

	* gdb.base/completion.exp: Don't look for 'ask' after set
	follow-fork-mode.  Update copyright.
@
text
@d660 9
a675 1
\
@


1.19
log
@Committed after testing and independent approval/endorsement.

	2003-12-09  Fred Fish  <fnf@@redhat.com>
	* gdb.base/break.c (marker1, marker2, marker3, marker4): Move
	functions to break1.c and leave prototypes behind.  Add more
	"set breakpoint NN here" comments.
	* gdb.base/break1.c: New file.
	* gdb.base/break.exp: Handle compiling test case from multiple
	source files and change source file references as needed.
	* gdb.base/completion.exp: Ditto.
	* gdb.base/condbreak.exp: Ditto.
	* gdb.base/define.exp: Ditto.
	* gdb.base/ena-dis-br.exp: Ditto.
	* gdb.base/info-proc.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/until.exp: Ditto.
	* gdb.base/condbreak.exp: Use bp_locationNN variables instead of
	hardcoded line numbers.
	* gdb.base/define.exp: Ditto.
	* gdb.base/ena-dis-br.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/until.exp: Ditto.
	* gdb.base/completion.exp: Use "break1" for completion tests since
	"break" is no longer a unique prefix.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003 Free Software Foundation, Inc.
d713 1
a713 1
        -re "ask.*child.*parent.*$gdb_prompt set follow-fork-mode $"\
d716 1
a716 1
                      -re "Requires an argument.*ask.*child.*parent.*$gdb_prompt $"\
@


1.18
log
@2003-08-07  Elena Zannoni  <ezannoni@@redhat.com>

       * gdb.base/completion.exp: Remove reduntant completion test
       on filename.
@
text
@d41 2
a42 2
#   "p \"break" unambiguous (completes to filename "break.c")
#   "p \"break." unambiguous (should complete to "break.c" but does not,
d67 1
d69 11
a79 2
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-w}] != "" } {
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d364 1
a364 1
send_gdb "p \"break\t"
d367 1
a367 1
        -re "^p \"break\\\x07$"\
d370 2
a371 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break'"}
                      timeout           {fail "(timeout) complete 'p \"break'"}
d374 1
a374 1
	-re "^p \"break\\.c\"$"\
d377 2
a378 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break'"}
		    timeout           {fail "(timeout) complete 'p \"break'"}
d381 1
a381 1
	-re "^p \"break.*$"
d384 2
a385 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break'"}
		    timeout           {fail "(timeout) complete 'p \"break'"}
d388 2
a389 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break'" }
        timeout         { fail "(timeout) complete 'p \"break'" }
d393 1
a393 1
send_gdb "p \"break.\t"
d396 1
a396 1
        -re "^p \"break\\.\\\x07$"\
d399 2
a400 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break.'"}
                      timeout           {fail "(timeout) complete 'p \"break.'"}
d403 1
a403 1
	-re "^p \"break\\.c\"$"\
d406 2
a407 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break.'"}
		    timeout           {fail "(timeout) complete 'p \"break.'"}
d410 1
a410 1
	-re "^p \"break\\..*$"
d413 2
a414 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break.'"}
		    timeout           {fail "(timeout) complete 'p \"break.'"}
d417 2
a418 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break.'" }
        timeout         { fail "(timeout) complete 'p \"break.'" }
d695 1
a695 1
                                -re "All functions matching regular expression \"marker\":.*File.*break.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);.*$gdb_prompt $"\
@


1.18.4.1
log
@merge mainline changes into branch
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003, 2004 Free Software Foundation, Inc.
d41 2
a42 2
#   "p \"break1" unambiguous (completes to filename "break1.c")
#   "p \"break1." unambiguous (should complete to "break1.c" but does not,
a66 1
set srcfile1 ${testfile}1.c
d68 2
a69 11

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d354 1
a354 1
send_gdb "p \"break1\t"
d357 1
a357 1
        -re "^p \"break1\\\x07$"\
d360 2
a361 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
                      timeout           {fail "(timeout) complete 'p \"break1'"}
d364 1
a364 1
	-re "^p \"break1\\.c\"$"\
d367 2
a368 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
d371 1
a371 1
	-re "^p \"break1.*$"
d374 2
a375 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
d378 2
a379 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1'" }
        timeout         { fail "(timeout) complete 'p \"break1'" }
d383 1
a383 1
send_gdb "p \"break1.\t"
d386 1
a386 1
        -re "^p \"break1\\.\\\x07$"\
d389 2
a390 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
                      timeout           {fail "(timeout) complete 'p \"break1.'"}
d393 1
a393 1
	-re "^p \"break1\\.c\"$"\
d396 2
a397 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
d400 1
a400 1
	-re "^p \"break1\\..*$"
d403 2
a404 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
d407 2
a408 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1.'" }
        timeout         { fail "(timeout) complete 'p \"break1.'" }
a649 9
send_gdb "complete file ./gdb.base/compl\n"
sleep 1
gdb_expect  {
    -re "file ./gdb.base/completion\\.exp.*$gdb_prompt $"
	{ pass "complete-command 'file ./gdb.base/compl'"}
    -re ".*$gdb_prompt $"       { fail "complete-command 'file ./gdb.base/compl'" }
    timeout         { fail "(timeout) complete-command 'file ./gdb.base/compl'" }
}

d657 1
d685 1
a685 1
                                -re "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);.*$gdb_prompt $"\
d703 1
a703 1
        -re "child.*parent.*$gdb_prompt set follow-fork-mode $"\
d706 1
a706 1
                      -re "Requires an argument.*child.*parent.*$gdb_prompt $"\
@


1.17
log
@	* gdb.base/completion.exp: Tab-complete "complet" instead of
	"compl".
	* gdb.base/complex.exp, gdb.base/complex.c: New files.
@
text
@d614 1
a614 1
# The following tests used to simply try to complete `${objdir}/Make',
d622 1
a622 1
# the leftmost six columns, and `${objdump}/' was seventy-four
a633 30
#
# Note that if we are building in the source tree, then there will be
# more than one completion for ./Make, so we need to handle that also.
# A better long term solution might be to create a temporary directory,
# populate it with a set of known names, and use that directory to
# test completions.

gdb_test "cd ${objdir}" "Working directory ${objdir}.*" "cd to \${objdir}"
send_gdb "file ./Make\t"
sleep 1
gdb_expect  {
        -re "^file ./Make(\\\x07|)file.*$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "\r\nA program is being debugged already\\.  Kill it\\? \\(y or n\\) $"\
                      { send_gdb "n\n"
                        gdb_expect {
                                -re "\r\nProgram not killed\\.\r\n$gdb_prompt $"\
                                        { pass "complete 'file ./Make'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file ./Make'"}
                                timeout           {fail "(timeout) complete 'file ./Make'"}
                               }
                      }
                      -re ".*$gdb_prompt $" { fail "complete 'file ./Make'"}
                      timeout           {fail "(timeout) complete 'file ./Make'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete 'file ./Make'" }
        timeout         { fail "(timeout) complete 'file ./Make'" }
        }
@


1.16
log
@2003-04-16  Elena Zannoni  <ezannoni@@redhat.com>

	* gdb.base/completion.exp: Make 'info func mark' complete on 'info
        func marke' instead. Update test name.
@
text
@d680 1
a680 1
send_gdb "file ./gdb.base/compl\t"
d691 3
a693 3
                                        { pass "complete 'file ./gdb.base/compl'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/compl'"}
                                timeout           {fail "(timeout) complete 'file ./gdb.base/compl'"}
d696 2
a697 2
                      -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/compl'"}
                      timeout           {fail "(timeout) complete 'file ./gdb.base/compl'"}
d700 2
a701 2
        -re ".*$gdb_prompt $"       { fail "complete 'file ./gdb.base/compl'" }
        timeout         { fail "(timeout) complete 'file ./gdb.base/compl'" }
@


1.16.16.1
log
@2003-08-07  Elena Zannoni  <ezannoni@@redhat.com>

       * gdb.base/completion.exp: Remove reduntant completion test
       on filename.

2003-08-07  Elena Zannoni  <ezannoni@@redhat.com>

        * gdb.base/attach.exp, gdb.base/detach.exp, gdb.base/gcore.exp,
        gdb.mi/mi-basics.exp, gdb.threads/gcore-thread.exp,
        gdb.trace/save-trace.exp: Make sure that full pathnames are
        escaped correctly.

2003-08-07  Elena Zannoni  <ezannoni@@redhat.com>

        * configure.in: Don't generate config.h from config.hin.
        * configure: Regenerate.
        * config.hin: Remove file.
        * gdb.mi/pthreads.c: Remove include of config.h, and other ifdefs.
        * gdb.threads/pthreads.c: Ditto.
@
text
@d614 1
a614 1
# The following tests used to simply try to complete `${objdir}/file',
d622 1
a622 1
# the leftmost six columns, and `${objdir}/' was seventy-four
d634 30
@


1.15
log
@2003-04-10  Elena Zannoni  <ezannoni@@redhat.com>

	* gdb.base/completion.exp: Use string_to_regexp to match the
	working directory name.
@
text
@d704 1
a704 1
send_gdb "info func mark\t"
d707 1
a707 1
        -re "^info func mark.*er$"\
d716 3
a718 3
                                                  { pass "complete 'info func mar'"}
                                -re ".*$gdb_prompt $" { fail "complete 'info func mar'"}
                                timeout           {fail "(timeout) complete 'info func mar'"}
d721 2
a722 2
                      -re ".*$gdb_prompt $" { fail "complete 'info func mar'"}
                      timeout           {fail "(timeout) complete 'info func mar'"}
d725 2
a726 2
        -re ".*$gdb_prompt $"       { fail "complete 'info func mar'" }
        timeout         { fail "(timeout) complete 'info func mar'" }
@


1.14
log
@gdb/
	* buildsym.h (processing_hp_compilation): Remove obsolete variable.
	* gdbarch.sh Remove include of "value.h" in gdbarch.h.
	(COERCE_FLOAT_TO_DOUBLE): Remove.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* Makefile.in: Remove value_h from gdbarch_h.
	* valops.c (coerce_float_to_double): New variable.
	(default_coerce_float_to_double): Remove.
	(standard_coerce_float_to_double): Remove.
	(value_arg_coerce): Use coerce_float_to_double.
	(_initialize_valops): Add "set coerce-float-to-double".
	* value.h (default_coerce_float_to_double): Remove prototype.
	(standard_coerce_float_to_double): Remove prototype.

	* hpread.c (hpread_process_one_debug_symbol): Mark C++ functions as
	prototyped.
	* mdebugread.c (parse_symbol): Likewise.
	* stabsread.c (define_symbol): Mark all functions as prototyped.

	* hppa-tdep.c (hppa_coerce_float_to_double): Remove.
	* alpha-tdep.c (alpha_gdbarch_init): Remove call to
	set_gdbarch_coerce_float_to_double.
	* arm-tdep.c (arm_gdbarch_init): Likewise.
	* frv-tdep.c (frv_gdbarch_init): Likewise.
	* h8300-tdep.c (h8300_gdbarch_init): Likewise (commented out).
	* i386-sol2-tdep.c (i386_sol2_init_abi): Likewise.
	* mips-tdep.c (mips_gdbarch_init): Likewise.
	(mips_coerce_float_to_double): Remove.
	* rs6000-tdep.c (rs6000_gdbarch_init): Likewise.
	(rs6000_coerce_float_to_double): Remove.
	* s390-tdep.c (s390_gdbarch_init): Likewise.
	* sh-tdep.c (sh_gdbarch_init): Likewise.
	(sh_coerce_float_to_double): Remove.
	* sparc-tdep.c (sparc_gdbarch_init): Likewise.
	(sparc_coerce_float_to_double): Remove.
	* v850-tdep.c (v850_gdbarch_init): Likewise.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Likewise.
	* config/m32r/tm-m32r.h (COERCE_FLOAT_TO_DOUBLE): Remove.
	* config/pa/tm-hppa.h: (COERCE_FLOAT_TO_DOUBLE): Remove.
	(hppa_coerce_float_to_double): Remove prototype.
	* config/sparc/tm-sparc.h (COERCE_FLOAT_TO_DOUBLE): Remove.
doc/
	* gdb.texinfo (Controlling GDB): Add ABI section.  Document
	"set coerce-float-to-double".
	* gdbint.texinfo (COERCE_FLOAT_TO_DOUBLE): Remove documentation.
testsuite/
	* gdb.base/callfuncs.exp: Don't XFAIL unprototyped functions for
	stabs.
	* gdb.base/completion.exp: Allow marker1(void) as well as marker1().
	* gdb.base/whatis.exp: Always allow (void) after function names.
@
text
@d672 8
a679 1
gdb_test "cd ${fullsrcdir}" "Working directory ${fullsrcdir}.*" "cd to \${srcdir}"
@


1.14.16.1
log
@Merge with mainline.
@
text
@d672 1
a672 8
# If the directory name contains a '+' we must escape it, adding a backslash.
# If not, the test below will fail because it will interpret the '+' as a 
# regexp operator. We use string_to_regexp for this purpose.

gdb_test "cd ${fullsrcdir}" \
         "Working directory [string_to_regexp ${fullsrcdir}].*" \
         "cd to \${srcdir}"

@


1.13
log
@* gdb.base/completion.exp: Recognize the more detailed error
messages produced by the macro expander's lexical analyzer.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002 Free Software Foundation, Inc.
d708 1
a708 1
                                -re "All functions matching regular expression \"marker\":.*File.*break.c:\r\nint marker1\\(\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);.*$gdb_prompt $"\
@


1.13.12.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003 Free Software Foundation, Inc.
d41 2
a42 2
#   "p \"break1" unambiguous (completes to filename "break1.c")
#   "p \"break1." unambiguous (should complete to "break1.c" but does not,
a66 1
set srcfile1 ${testfile}1.c
d68 2
a69 11

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d354 1
a354 1
send_gdb "p \"break1\t"
d357 1
a357 1
        -re "^p \"break1\\\x07$"\
d360 2
a361 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
                      timeout           {fail "(timeout) complete 'p \"break1'"}
d364 1
a364 1
	-re "^p \"break1\\.c\"$"\
d367 2
a368 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
d371 1
a371 1
	-re "^p \"break1.*$"
d374 2
a375 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
d378 2
a379 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1'" }
        timeout         { fail "(timeout) complete 'p \"break1'" }
d383 1
a383 1
send_gdb "p \"break1.\t"
d386 1
a386 1
        -re "^p \"break1\\.\\\x07$"\
d389 2
a390 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
                      timeout           {fail "(timeout) complete 'p \"break1.'"}
d393 1
a393 1
	-re "^p \"break1\\.c\"$"\
d396 2
a397 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
d400 1
a400 1
	-re "^p \"break1\\..*$"
d403 2
a404 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
d407 2
a408 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1.'" }
        timeout         { fail "(timeout) complete 'p \"break1.'" }
d614 1
a614 1
# The following tests used to simply try to complete `${objdir}/file',
d622 1
a622 1
# the leftmost six columns, and `${objdir}/' was seventy-four
d634 30
d672 2
a673 9
# If the directory name contains a '+' we must escape it, adding a backslash.
# If not, the test below will fail because it will interpret the '+' as a 
# regexp operator. We use string_to_regexp for this purpose.

gdb_test "cd ${fullsrcdir}" \
         "Working directory [string_to_regexp ${fullsrcdir}].*" \
         "cd to \${srcdir}"

send_gdb "file ./gdb.base/complet\t"
d684 3
a686 3
                                        { pass "complete 'file ./gdb.base/complet'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/complet'"}
                                timeout           {fail "(timeout) complete 'file ./gdb.base/complet'"}
d689 2
a690 2
                      -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/complet'"}
                      timeout           {fail "(timeout) complete 'file ./gdb.base/complet'"}
d693 2
a694 2
        -re ".*$gdb_prompt $"       { fail "complete 'file ./gdb.base/complet'" }
        timeout         { fail "(timeout) complete 'file ./gdb.base/complet'" }
d697 1
a697 1
send_gdb "info func marke\t"
d700 1
a700 1
        -re "^info func marke.*r$"\
d708 4
a711 4
                                -re "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);.*$gdb_prompt $"\
                                                  { pass "complete 'info func marke'"}
                                -re ".*$gdb_prompt $" { fail "complete 'info func marke'"}
                                timeout           {fail "(timeout) complete 'info func marke'"}
d714 2
a715 2
                      -re ".*$gdb_prompt $" { fail "complete 'info func marke'"}
                      timeout           {fail "(timeout) complete 'info func marke'"}
d718 2
a719 2
        -re ".*$gdb_prompt $"       { fail "complete 'info func marke'" }
        timeout         { fail "(timeout) complete 'info func marke'" }
@


1.13.12.2
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003, 2004 Free Software Foundation, Inc.
a659 9
send_gdb "complete file ./gdb.base/compl\n"
sleep 1
gdb_expect  {
    -re "file ./gdb.base/completion\\.exp.*$gdb_prompt $"
	{ pass "complete-command 'file ./gdb.base/compl'"}
    -re ".*$gdb_prompt $"       { fail "complete-command 'file ./gdb.base/compl'" }
    timeout         { fail "(timeout) complete-command 'file ./gdb.base/compl'" }
}

d667 1
d713 1
a713 1
        -re "child.*parent.*$gdb_prompt set follow-fork-mode $"\
d716 1
a716 1
                      -re "Requires an argument.*child.*parent.*$gdb_prompt $"\
@


1.13.10.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003 Free Software Foundation, Inc.
d708 1
a708 1
                                -re "All functions matching regular expression \"marker\":.*File.*break.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);.*$gdb_prompt $"\
@


1.13.10.2
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d672 1
a672 8
# If the directory name contains a '+' we must escape it, adding a backslash.
# If not, the test below will fail because it will interpret the '+' as a 
# regexp operator. We use string_to_regexp for this purpose.

gdb_test "cd ${fullsrcdir}" \
         "Working directory [string_to_regexp ${fullsrcdir}].*" \
         "cd to \${srcdir}"

@


1.13.10.3
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@d704 1
a704 1
send_gdb "info func marke\t"
d707 1
a707 1
        -re "^info func marke.*r$"\
d716 3
a718 3
                                                  { pass "complete 'info func marke'"}
                                -re ".*$gdb_prompt $" { fail "complete 'info func marke'"}
                                timeout           {fail "(timeout) complete 'info func marke'"}
d721 2
a722 2
                      -re ".*$gdb_prompt $" { fail "complete 'info func marke'"}
                      timeout           {fail "(timeout) complete 'info func marke'"}
d725 2
a726 2
        -re ".*$gdb_prompt $"       { fail "complete 'info func marke'" }
        timeout         { fail "(timeout) complete 'info func marke'" }
@


1.13.10.4
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d680 1
a680 1
send_gdb "file ./gdb.base/complet\t"
d691 3
a693 3
                                        { pass "complete 'file ./gdb.base/complet'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/complet'"}
                                timeout           {fail "(timeout) complete 'file ./gdb.base/complet'"}
d696 2
a697 2
                      -re ".*$gdb_prompt $" { fail "complete 'file ./gdb.base/complet'"}
                      timeout           {fail "(timeout) complete 'file ./gdb.base/complet'"}
d700 2
a701 2
        -re ".*$gdb_prompt $"       { fail "complete 'file ./gdb.base/complet'" }
        timeout         { fail "(timeout) complete 'file ./gdb.base/complet'" }
@


1.13.10.5
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d614 1
a614 1
# The following tests used to simply try to complete `${objdir}/file',
d622 1
a622 1
# the leftmost six columns, and `${objdir}/' was seventy-four
d634 30
@


1.13.10.6
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d41 2
a42 2
#   "p \"break1" unambiguous (completes to filename "break1.c")
#   "p \"break1." unambiguous (should complete to "break1.c" but does not,
a66 1
set srcfile1 ${testfile}1.c
d68 2
a69 11

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
d354 1
a354 1
send_gdb "p \"break1\t"
d357 1
a357 1
        -re "^p \"break1\\\x07$"\
d360 2
a361 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
                      timeout           {fail "(timeout) complete 'p \"break1'"}
d364 1
a364 1
	-re "^p \"break1\\.c\"$"\
d367 2
a368 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
d371 1
a371 1
	-re "^p \"break1.*$"
d374 2
a375 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1'"}
		    timeout           {fail "(timeout) complete 'p \"break1'"}
d378 2
a379 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1'" }
        timeout         { fail "(timeout) complete 'p \"break1'" }
d383 1
a383 1
send_gdb "p \"break1.\t"
d386 1
a386 1
        -re "^p \"break1\\.\\\x07$"\
d389 2
a390 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
                      timeout           {fail "(timeout) complete 'p \"break1.'"}
d393 1
a393 1
	-re "^p \"break1\\.c\"$"\
d396 2
a397 2
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
d400 1
a400 1
	-re "^p \"break1\\..*$"
d403 2
a404 2
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break1.'"}
		    timeout           {fail "(timeout) complete 'p \"break1.'"}
d407 2
a408 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break1.'" }
        timeout         { fail "(timeout) complete 'p \"break1.'" }
d685 1
a685 1
                                -re "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);.*$gdb_prompt $"\
@


1.13.10.7
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2002, 2003, 2004 Free Software Foundation, Inc.
d713 1
a713 1
        -re "child.*parent.*$gdb_prompt set follow-fork-mode $"\
d716 1
a716 1
                      -re "Requires an argument.*child.*parent.*$gdb_prompt $"\
@


1.12
log
@	2002-05-01  Fred Fish  <fnf@@redhat.com>
	* gdb.base/completion.exp: Handle completions of "./Make" for
	more than one completion possibility, as is the case when we
	build and test in the source tree.
@
text
@d417 1
a417 1
                      -re "Invalid character constant\\..*$gdb_prompt $"\
d436 1
a436 1
		    -re "Invalid character constant\\..*$gdb_prompt $" {
d449 1
a449 1
			    -re "Invalid character constant\\..*$gdb_prompt $" {
@


1.12.4.1
log
@merge from trunk
@
text
@d417 1
a417 1
                      -re "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt $"\
d436 1
a436 1
		    -re "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt $" {
d449 1
a449 1
			    -re "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt $" {
@


1.11
log
@2002-01-13  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.base/completion.exp: Expand ${srcdir} to an absolute path.
@
text
@d1 1
a1 1
# Copyright 1998, 1999 Free Software Foundation, Inc.
d634 6
d645 1
a645 1
        -re "file ./Makefile.*$"\
@


1.10
log
@* gdb.base/completion.exp: Rather than completing very long
filenames, which can make the readline library produce output we
don't recognize, cd to the directory first, and then complete
using nice, short relative paths.
@
text
@d659 6
d666 1
a666 1
gdb_test "cd ${srcdir}" "Working directory ${srcdir}.*" "cd to \${srcdir}"
@


1.9
log
@* gdb.base/completion.exp: On some systems, there is, in fact, a
variable named `b' in scope, since GDB treats all static
variables as being in scope.  So use `no_var_named_this'
instead of `b'.
@
text
@d613 24
a636 1
send_gdb "file ${objdir}/Make\t"
d639 1
a639 1
        -re "file ${objdir}/Makefile.*$"\
d646 3
a648 3
                                        { pass "complete 'file Make'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file Make'"}
                                timeout           {fail "(timeout) complete 'file Make'"}
d651 2
a652 2
                      -re ".*$gdb_prompt $" { fail "complete 'file Make'"}
                      timeout           {fail "(timeout) complete 'file Make'"}
d655 2
a656 2
        -re ".*$gdb_prompt $"       { fail "complete 'file Make'" }
        timeout         { fail "(timeout) complete 'file Make'" }
d660 2
a661 1
send_gdb "file ${srcdir}/gdb.base/compl\t"
d664 1
a664 1
        -re "^file ${srcdir}/gdb.base/completion\\.exp $"\
d672 3
a674 3
                                        { pass "complete 'file gdb.base/compl'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/compl'"}
                                timeout           {fail "(timeout) complete 'file gdb.base/compl'"}
d677 2
a678 2
                      -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/compl'"}
                      timeout           {fail "(timeout) complete 'file gdb.base/compl'"}
d681 2
a682 2
        -re ".*$gdb_prompt $"       { fail "complete 'file gdb.base/compl'" }
        timeout         { fail "(timeout) complete 'file gdb.base/compl'" }
@


1.8
log
@* gdb.base/completion.exp: Clarify indentation.
@
text
@d471 22
a492 1
send_gdb "p b-a\t"
d495 1
a495 1
    -re "^p b-a\\\x07$" {
d498 2
a499 2
            -re "No symbol \"b\" in current context\\..*$gdb_prompt $" {
                pass "complete 'p b-a'"
d502 1
a502 1
                fail "complete 'p b-a'"
d505 1
a505 1
                fail "(timeout) complete 'p b-a'"
d510 1
a510 1
        fail "complete 'p b-a'"
d513 1
a513 1
        fail "(timeout) complete 'p b-a'"
d517 1
a517 1
send_gdb "p b-a\t"
d520 1
a520 1
    -re "^p b-a\\\x07$" {
d523 1
a523 1
	    -re ".*argv.*$gdb_prompt p b-a$" {
d526 2
a527 2
		    -re "No symbol \"b\" in current context\\..*$gdb_prompt $" {
			pass "complete (2) 'p b-a'"
d529 6
a534 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
		    timeout { fail "(timeout) complete (2) 'p b-a'" }
d540 1
a540 1
		    -re "\\(gdb\\) p b-a$" {
d543 2
a544 2
			    -re "No symbol \"b\" in current context\\..*$gdb_prompt $" {
				pass "complete (2) 'p b-a'"
d547 1
a547 1
				fail "complete (2) 'p b-a'"
d549 3
a551 1
			    timeout { fail "(timeout) complete (2) 'p b-a'" }
d554 6
a559 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
		    timeout { fail "(timeout) complete (2) 'p b-a'" }
d562 4
a565 2
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
	    timeout { fail "(timeout) complete (2) 'p b-a'" }
d568 2
a569 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
    timeout { fail "(timeout) complete (2) 'p b-a'" }
d572 1
a572 1
send_gdb "p b-\t"
d575 1
a575 1
    -re "^p b-\\\x07$" {
d581 1
a581 1
		    -re "\\(gdb\\) p b-$" {
d584 2
a585 2
			    -re "No symbol \"b\" in current context\\..*$gdb_prompt $" {
				pass "complete (2) 'p b-'"
d588 1
a588 1
				fail "complete (2) 'p b-'"
d590 3
a592 1
			    timeout { fail "(timeout) complete (2) 'p b-'" }
d595 6
a600 2
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'" }
		    timeout { fail "(timeout) complete (2) 'p b-'" }
d603 4
a606 2
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'" }
	    timeout { fail "(timeout) complete (2) 'p b-'" }
d609 2
a610 2
    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'" }
    timeout { fail "(timeout) complete (2) 'p b-'" }
@


1.7
log
@        * gdb.base/completion.exp: Remove incorrect 'p "a' test.
        Add tests for 'p "break' (pass) and 'p "break.' (xfail).
@
text
@d473 12
a484 9
gdb_expect  {
        -re "^p b-a\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re "No symbol \"b\" in current context\\..*$gdb_prompt $"\
                                        { pass "complete 'p b-a'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p b-a'"}
                      timeout           {fail "(timeout) complete 'p b-a'"}
                     }
a485 2
        -re ".*$gdb_prompt $"       { fail "complete 'p b-a'" }
        timeout         { fail "(timeout) complete 'p b-a'" }
d487 8
@


1.6
log
@2001-08-02  Michael Snyder  <msnyder@@redhat.com>

	* gdb.base/completion.exp: Remove the symbol "a64l" from
	the expect string; this is target-specific, and not related
	to what is being tested.
@
text
@d41 3
a43 1
#   "p \"a" no completions (string constant)
d354 1
a354 1
send_gdb "p \"a\t"
d357 1
a357 1
        -re "^p \"a\\\x07$"\
d360 2
a361 4
                      -re "Unterminated string in expression\\..*$gdb_prompt $"\
                                        { pass "complete 'p a'"}
                      -re ".*$gdb_prompt $" { fail "complete 'p a'"}
                      timeout           {fail "(timeout) complete 'p a'"}
d364 45
a408 2
        -re ".*$gdb_prompt $"       { fail "complete 'p \"a'" }
        timeout         { fail "(timeout) complete 'p \"a'" }
@


1.5
log
@2001-07-02  Michael Snyder  <msnyder@@redhat.com>

        * gdb.base/completion.exp: Don't assume that break.c is the only
	source file that may contain functions named "marker".
@
text
@d390 1
a390 1
	    -re "a64l.*argv.*$gdb_prompt p .a$" {
d450 1
a450 1
	    -re "a64l.*argv.*$gdb_prompt p b-a$" {
@


1.5.2.1
log
@Merge from HEAD.

2001-10-27  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.mi/mi-hack-cli.exp: Remove excess newlines from test strings.
        * gdm.mi/mi0-hack-cli.exp: Likewise.

2001-10-01  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.threads/pthreads.exp: Wait for output and delay
        before sending ^C.

2001-10-01  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.mi/mi-var-display.exp (continue to incr_a):  Recognize
        some incorrect output instead of timing out.
        * gdb.mi/mi-var-display.exp (continue to incr_a):  Likewise.

2001-09-27  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.base/completion.exp: Remove incorrect 'p "a' test.
        Add tests for 'p "break' (pass) and 'p "break.' (xfail).
@
text
@d41 1
a41 3
#   "p \"break" unambiguous (completes to filename "break.c")
#   "p \"break." unambiguous (should complete to "break.c" but does not,
#	due to readline limitations)
d352 1
a352 1
send_gdb "p \"break\t"
d355 1
a355 1
        -re "^p \"break\\\x07$"\
d358 4
a361 2
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break'"}
                      timeout           {fail "(timeout) complete 'p \"break'"}
d364 2
a365 45
	-re "^p \"break\\.c\"$"\
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break'"}
		    timeout           {fail "(timeout) complete 'p \"break'"}
		}
	    }
	-re "^p \"break.*$"
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break'"}
		    timeout           {fail "(timeout) complete 'p \"break'"}
		}
	    }
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break'" }
        timeout         { fail "(timeout) complete 'p \"break'" }
        }

setup_xfail "*-*-*"
send_gdb "p \"break.\t"
sleep 1
gdb_expect  {
        -re "^p \"break\\.\\\x07$"\
            { send_gdb "\n"
              gdb_expect {
                      -re ".*$gdb_prompt $" { fail "complete 'p \"break.'"}
                      timeout           {fail "(timeout) complete 'p \"break.'"}
                     }
            }
	-re "^p \"break\\.c\"$"\
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { pass "complete 'p \"break.'"}
		    timeout           {fail "(timeout) complete 'p \"break.'"}
		}
	    }
	-re "^p \"break\\..*$"
	    {	send_gdb "\n"
		gdb_expect {
		    -re ".*$gdb_prompt $" { fail "complete 'p \"break.'"}
		    timeout           {fail "(timeout) complete 'p \"break.'"}
		}
	    }
        -re ".*$gdb_prompt $"       { fail "complete 'p \"break.'" }
        timeout         { fail "(timeout) complete 'p \"break.'" }
@


1.4
log
@	* gdb.base/completion.exp (INPUTRC): Set this environment variable
	to a known value in order to get consistent results regardless
	of the setting of INPUTRC or the presence or contents of .inputrc.
@
text
@d579 1
a579 1
                                -re "All functions matching regular expression \"marker\":\r\n\r\nFile.*break.c:\r\nint marker1\\(\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long int\\);\r\n$gdb_prompt $"\
@


1.3
log
@2001-05-10  Elena Zannoni  <ezannoni@@redhat.com>

       * gdb.base/completion.exp: Revamp test. Make it execute on all
       platforms.
@
text
@d75 13
d612 6
d619 1
a620 14














@


1.2
log
@Update/correct copyright notices.
@
text
@a54 5
if { ![istarget "hppa*-hp-hpux*"] } {
    #skip all these tests for now (FIXME)
    continue
}

d377 1
a377 1
	    -re "a64l.*atol.*$gdb_prompt p .a$" {
d437 1
a437 1
	    -re "a64l.*atol.*$gdb_prompt p b-a$" {
d531 1
a531 1
send_gdb "file ${srcdir}/gdb.base/self\t"
d534 1
a534 1
        -re "^file ${srcdir}/gdb.base/.*'selftest\\.exp' $"\
d542 3
a544 3
                                        { pass "complete 'file gdb.base/self'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/self'"}
                                timeout           {fail "(timeout) complete 'file gdb.base/self'"}
d547 2
a548 2
                      -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/self'"}
                      timeout           {fail "(timeout) complete 'file gdb.base/self'"}
d551 2
a552 2
        -re ".*$gdb_prompt $"       { fail "complete 'file gdb.base/self'" }
        timeout         { fail "(timeout) complete 'file gdb.base/self'" }
a554 1

d566 1
a566 1
                                -re "All functions matching regular expression \"marker\":\r\n\r\nFile.*break.c:\r\nint marker1\\(.*\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long\\);\r\n$gdb_prompt $"\
d587 1
a587 1
                      -re "Requires an argument.*parent.*child.*ask.*$gdb_prompt $"\
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 1998 Free Software Foundation, Inc.
d55 4
a58 3
#skip all these tests for now (FIXME)

continue
d75 4
d89 1
a89 1
set timeout [expr $timeout + 500]
d170 1
d175 1
a175 1
                      timeout           {fail "(timeout) complete 'p'"}
d179 1
a179 1
        timeout         { fail "(timeout) complete 'p'" }
d183 1
a183 1
sleep 1
d187 1
d192 1
a192 1
                      timeout           {fail "(timeout) complete 'p '"}
d196 1
a196 1
        timeout         { fail "(timeout) complete 'p '" }
d293 1
a293 1
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\ninfo address.*info watchpoints.*\r\n\r\nType \"help info\" followed by info subcommand name for full documentation.\r\nCommand name abbreviations are allowed if unambiguous\\..*$gdb_prompt $"\
d309 1
a309 1
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\ninfo address.*Type \"help info\" followed by info subcommand name for full documentation.\r\nCommand name abbreviations are allowed if unambiguous\\..*$gdb_prompt $"\
d323 1
a323 1
        -re "^info \0x7$"\
d378 40
a417 20
gdb_expect  {
        -re "^p 'a\\\x07$"\
            { send_gdb "\t"
              gdb_expect {
                      -re "a64l.*atol.*$gdb_prompt p .a$"\
                          { send_gdb "\n"
                            gdb_expect {
                                     -re "Invalid character constant\\..*$gdb_prompt $"\
                                                       { pass "complete (2) 'p \'a'"}
                                     -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'"}
                                     timeout           {fail "(timeout) complete (2) 'p \'a'"}
                                   }
                          }
                      -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'"}
                      timeout           {fail "(timeout) complete (2) 'p \'a'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete (2) 'p \'a'" }
        timeout         { fail "(timeout) complete (2) 'p \'a'" }
        }
d438 40
a477 21
gdb_expect  {
        -re "^p b-a\\\x07$"\
            { send_gdb "\t"
              gdb_expect {
                      -re "a64l.*atol.*$gdb_prompt p b-a$"\
                          { send_gdb "\n"
                            gdb_expect {
                                     -re "No symbol \"b\" in current context\\..*$gdb_prompt $"\
                                                       { pass "complete (2) 'p b-a'"}
                                     -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'"}
                                     timeout           {fail "(timeout) complete (2) 'p b-a'"}
                                   }
                          }
                      -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'"}
                      timeout           {fail "(timeout) complete (2) 'p b-a'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete (2) 'p b-a'" }
        timeout         { fail "(timeout) complete (2) 'p b-a'" }
        }

d482 29
a510 26
        -re "^p b-\\\x07$"\
            { send_gdb "\t"
              gdb_expect {
                      -re "There are $decimal possibilities\\.  Do you really\r\nwish to see them all. \\(y or n\\)$"\
                          { send_gdb "n"
                            gdb_expect {
                                     -re "\\(gdb\\) p b-$"\
                                         { send_gdb "\n"
                                           gdb_expect {
                                                   -re "No symbol \"b\" in current context\\..*$gdb_prompt $"\
                                                       { pass "complete (2) 'p b-'"}
                                                   -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'"}
                                                   timeout           {fail "(timeout) complete (2) 'p b-'"}
                                                  }
                                          }
                                     -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'"}
                                     timeout           {fail "(timeout) complete (2) 'p b-'"}
                                   }
                          }
                      -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'"}
                      timeout           {fail "(timeout) complete (2) 'p b-'"}
                     }
            }
        -re ".*$gdb_prompt $"       { fail "complete (2) 'p b-'" }
        timeout         { fail "(timeout) complete (2) 'p b-'" }
        }
d536 1
a536 1
send_gdb "file ${srcdir}/gdb.base/a1\t"
d539 1
a539 1
        -re "^file ${srcdir}/gdb.base/.*'a1.*-selftest\\.exp' $"\
d547 3
a549 3
                                        { pass "complete 'file gdb.base/a1'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/a1'"}
                                timeout           {fail "(timeout) complete 'file gdb.base/a1'"}
d552 2
a553 2
                      -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/a1'"}
                      timeout           {fail "(timeout) complete 'file gdb.base/a1'"}
d556 2
a557 2
        -re ".*$gdb_prompt $"       { fail "complete 'file gdb.base/a1'" }
        timeout         { fail "(timeout) complete 'file gdb.base/a1'" }
d565 2
a566 1
            { send_gdb "\t\t"
d569 1
a569 1
                      -re "marker1  marker2  marker3  marker4.*$gdb_prompt info func marker$"\
d572 1
a572 1
                                -re "All functions matching regular expression \"marker\":\r\n\r\nFile.*break.c:\r\nint marker1\\(\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\);\r\n$gdb_prompt $"\
d593 2
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-06-28 snapshot
@
text
@d55 3
a57 4
if { ![istarget "hppa*-hp-hpux*"] } {
    #skip all these tests for now (FIXME)
    continue
}
a73 4
if [get_compiler_info ${binfile}] {
    return -1;
}

d84 1
a84 1
set timeout 30
a164 1
	      sleep 1
d169 1
a169 1
                      timeout           {fail "(timeout) complete 'p' 2"}
d173 1
a173 1
        timeout         { fail "(timeout) complete 'p' 1" }
d177 1
a177 1
sleep 3
a180 1
	      sleep 1
d185 1
a185 1
                      timeout           {fail "(timeout) complete 'p ' 1"}
d189 1
a189 1
        timeout         { fail "(timeout) complete 'p ' 2" }
d286 1
a286 1
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\n.*info address.*info watchpoints.*\r\n\r\nType \"help info\" followed by info subcommand name for full documentation.\r\nCommand name abbreviations are allowed if unambiguous\\..*$gdb_prompt $"\
d302 1
a302 1
                      -re "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\n.*info address.*Type \"help info\" followed by info subcommand name for full documentation.\r\nCommand name abbreviations are allowed if unambiguous\\..*$gdb_prompt $"\
d316 1
a316 1
        -re "^info \\\x07$"\
d371 20
a390 40
gdb_expect {
    -re "^p 'a\\\x07$" {
	send_gdb "\t"
	gdb_expect {
	    -re "a64l.*atol.*$gdb_prompt p .a$" {
		send_gdb "\n"
		gdb_expect {
		    -re "Invalid character constant\\..*$gdb_prompt $" {
			pass "complete (2) 'p \'a'"
		    }
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
		    timeout { fail "(timeout) complete (2) 'p \'a'" }
		}
	    }
	    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)$" {
		send_gdb "n"
		gdb_expect {
		    -re "\\(gdb\\) p 'a$" {
			send_gdb "\n"
			gdb_expect {
			    -re "Invalid character constant\\..*$gdb_prompt $" {
				pass "complete (2) 'p \'a'"
			    }
			    -re ".*$gdb_prompt $" { 
				fail "complete (2) 'p \'a'"
			    }
			    timeout { fail "(timeout) complete (2) 'p \'a'" }
			}
		    }
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
		    timeout { fail "(timeout) complete (2) 'p \'a'" }
		}
	    }
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
	    timeout { fail "(timeout) complete (2) 'p \'a'" }
	}
    }
    -re ".*$gdb_prompt $" { fail "complete (2) 'p \'a'" }
    timeout { fail "(timeout) complete (2) 'p \'a'" }
}
d411 21
a431 40
gdb_expect {
    -re "^p b-a\\\x07$" {
	send_gdb "\t"
	gdb_expect {
	    -re "a64l.*atol.*$gdb_prompt p b-a$" {
		send_gdb "\n"
		gdb_expect {
		    -re "No symbol \"b\" in current context\\..*$gdb_prompt $" {
			pass "complete (2) 'p b-a'"
		    }
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
		    timeout { fail "(timeout) complete (2) 'p b-a'" }
		}
	    }
	    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)$" {
		send_gdb "n"
		gdb_expect {
		    -re "\\(gdb\\) p b-a$" {
			send_gdb "\n"
			gdb_expect {
			    -re "No symbol \"b\" in current context\\..*$gdb_prompt $" {
				pass "complete (2) 'p b-a'"
			    }
			    -re ".*$gdb_prompt $" {
				fail "complete (2) 'p b-a'"
			    }
			    timeout { fail "(timeout) complete (2) 'p b-a'" }
			}
		    }
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
		    timeout { fail "(timeout) complete (2) 'p b-a'" }
		}
	    }
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
	    timeout { fail "(timeout) complete (2) 'p b-a'" }
        }
    }
    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-a'" }
    timeout { fail "(timeout) complete (2) 'p b-a'" }
}
d436 26
a461 29
    -re "^p b-\\\x07$" {
	send_gdb "\t"
	gdb_expect {
	    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)$" {
		send_gdb "n"
		gdb_expect {
		    -re "\\(gdb\\) p b-$" {
			send_gdb "\n"
			gdb_expect {
			    -re "No symbol \"b\" in current context\\..*$gdb_prompt $" {
				pass "complete (2) 'p b-'"
			    }
			    -re ".*$gdb_prompt $" {
				fail "complete (2) 'p b-'"
			    }
			    timeout { fail "(timeout) complete (2) 'p b-'" }
			}
		    }
		    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'" }
		    timeout { fail "(timeout) complete (2) 'p b-'" }
		}
	    }
	    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'" }
	    timeout { fail "(timeout) complete (2) 'p b-'" }
	}
    }
    -re ".*$gdb_prompt $" { fail "complete (2) 'p b-'" }
    timeout { fail "(timeout) complete (2) 'p b-'" }
}
d490 1
a490 1
        -re "^file ${srcdir}/gdb.base/.*'a1.*-self\\.exp' $"\
d516 1
a516 2
            {
	      send_gdb "\t\t"
d519 1
a519 1
                      -re "marker1.*$gdb_prompt info func marker$"\
d522 1
a522 1
                                -re "All functions matching regular expression \"marker\":\r\n\r\nFile.*break.c:\r\nint marker1\\(.*\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long\\);\r\n$gdb_prompt $"\
a542 2
                      -re "Requires an argument.*parent.*child.*ask.*$gdb_prompt $"\
                                        { pass "complete 'set follow-fork-mode'"}
@


1.1.1.3
log
@import gdb-1999-08-02 snapshot
@
text
@d536 1
a536 1
send_gdb "file ${srcdir}/gdb.base/self\t"
d539 1
a539 1
        -re "^file ${srcdir}/gdb.base/.*'selftest\\.exp' $"\
d547 3
a549 3
                                        { pass "complete 'file gdb.base/self'"}
                                -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/self'"}
                                timeout           {fail "(timeout) complete 'file gdb.base/self'"}
d552 2
a553 2
                      -re ".*$gdb_prompt $" { fail "complete 'file gdb.base/self'"}
                      timeout           {fail "(timeout) complete 'file gdb.base/self'"}
d556 2
a557 2
        -re ".*$gdb_prompt $"       { fail "complete 'file gdb.base/self'" }
        timeout         { fail "(timeout) complete 'file gdb.base/self'" }
@


