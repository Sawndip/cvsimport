head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1.2.2
	gdb_7_6-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2013.06.25.11.37.48;	author teawater;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.06.25.11.37.48;	author teawater;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2013.06.26.02.32.53;	author teawater;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2013-06-25  Yao Qi  <yao@@codesourcery.com>
	    Hui Zhu  <hui@@codesourcery.com>
	    Pedro Alves  <palves@@redhat.com>

	PR breakpoints/15075
	PR breakpoints/15434
	* breakpoint.c (bpstat_stop_status): Call
	b->ops->after_condition_true.
	(update_dprintf_command_list): Don't append "continue" command
	to the command list of dprintf breakpoint.
	(base_breakpoint_after_condition_true): New function.
	(base_breakpoint_ops): Add base_breakpoint_after_condition_true.
	(dprintf_after_condition_true): New function.
	(initialize_breakpoint_ops): Set dprintf_after_condition_true.
	* breakpoint.h (breakpoint_ops): Add after_condition_true.

2013-06-25  Yao Qi  <yao@@codesourcery.com>
	    Hui Zhu  <hui@@codesourcery.com>
	    Pedro Alves  <palves@@redhat.com>

	PR breakpoints/15075
	PR breakpoints/15434
	* gdb.base/dprintf-next.c: New file.
	* gdb.base/dprintf-next.exp: New file.
	* gdb.base/dprintf-non-stop.c: New file.
	* gdb.base/dprintf-non-stop.exp: New file.
	* gdb.base/dprintf.exp: Don't check "continue" in the output
	of "info breakpoints".
	* gdb.mi/mi-breakpoint-changed.exp (test_insert_delete_modify):
	Don't check "continue" in script field.
@
text
@#   Copyright (C) 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [is_remote target] then {
    # Testing with remote/non-stop is racy at the moment.
    unsupported "Testing dprintf with remote/non-stop is not supported."
    return 0
}

standard_testfile

if [prepare_for_testing "failed to prepare for dprintf with non-stop" \
    ${testfile} ${srcfile} {debug}] {
    return -1
}

gdb_test_no_output "set target-async on"
gdb_test_no_output "set non-stop on"

if ![runto main] {
    fail "Can't run to main"
    return -1
}

gdb_test "dprintf foo,\"At foo entry\\n\"" "Dprintf .*"

gdb_test "continue &" "Continuing\\."

# Wait for the dprintf to trigger.
set test "dprintf triggered"
gdb_expect {
    -re "At foo entry" {
	pass "$test"
    }
    timeout {
	fail "$test (timeout)"
    }
}

# Now test that we're still able to issue commands.  GDB used to
# implement re-resuming from dprintfs with a synchronous "continue" in
# the dprintf's command list, which stole the prompt from the user.
set test "interrupt"
gdb_test_multiple $test $test {
    -re "interrupt\r\n$gdb_prompt " {
	pass $test
    }
}

set test "inferior stopped"
gdb_test_multiple "" $test {
    -re "\r\n\\\[.* \[0-9\]+\\\] #1 stopped\\\.\r\n" {
	pass $test
    }
}
@


1.1.2.1
log
@file dprintf-non-stop.exp was added on branch gdb_7_6-branch on 2013-06-26 02:32:53 +0000
@
text
@d1 67
@


1.1.2.2
log
@2013-06-26  Yao Qi  <yao@@codesourcery.com>
	    Hui Zhu  <hui@@codesourcery.com>
	    Pedro Alves  <palves@@redhat.com>

	PR breakpoints/15075
	PR breakpoints/15434
	* breakpoint.c (bpstat_stop_status): Call
	b->ops->after_condition_true.
	(update_dprintf_command_list): Don't append "continue" command
	to the command list of dprintf breakpoint.
	(base_breakpoint_after_condition_true): New function.
	(base_breakpoint_ops): Add base_breakpoint_after_condition_true.
	(dprintf_after_condition_true): New function.
	(initialize_breakpoint_ops): Set dprintf_after_condition_true.
	* breakpoint.h (breakpoint_ops): Add after_condition_true.

2013-06-26  Yao Qi  <yao@@codesourcery.com>
	    Hui Zhu  <hui@@codesourcery.com>
	    Pedro Alves  <palves@@redhat.com>

	PR breakpoints/15075
	PR breakpoints/15434
	* gdb.base/dprintf-next.c: New file.
	* gdb.base/dprintf-next.exp: New file.
	* gdb.base/dprintf-non-stop.c: New file.
	* gdb.base/dprintf-non-stop.exp: New file.
	* gdb.base/dprintf.exp: Don't check "continue" in the output
	of "info breakpoints".
	* gdb.mi/mi-breakpoint-changed.exp (test_insert_delete_modify):
	Don't check "continue" in script field.
@
text
@a0 67
#   Copyright (C) 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [is_remote target] then {
    # Testing with remote/non-stop is racy at the moment.
    unsupported "Testing dprintf with remote/non-stop is not supported."
    return 0
}

standard_testfile

if [prepare_for_testing "failed to prepare for dprintf with non-stop" \
    ${testfile} ${srcfile} {debug}] {
    return -1
}

gdb_test_no_output "set target-async on"
gdb_test_no_output "set non-stop on"

if ![runto main] {
    fail "Can't run to main"
    return -1
}

gdb_test "dprintf foo,\"At foo entry\\n\"" "Dprintf .*"

gdb_test "continue &" "Continuing\\."

# Wait for the dprintf to trigger.
set test "dprintf triggered"
gdb_expect {
    -re "At foo entry" {
	pass "$test"
    }
    timeout {
	fail "$test (timeout)"
    }
}

# Now test that we're still able to issue commands.  GDB used to
# implement re-resuming from dprintfs with a synchronous "continue" in
# the dprintf's command list, which stole the prompt from the user.
set test "interrupt"
gdb_test_multiple $test $test {
    -re "interrupt\r\n$gdb_prompt " {
	pass $test
    }
}

set test "inferior stopped"
gdb_test_multiple "" $test {
    -re "\r\n\\\[.* \[0-9\]+\\\] #1 stopped\\\.\r\n" {
	pass $test
    }
}
@


