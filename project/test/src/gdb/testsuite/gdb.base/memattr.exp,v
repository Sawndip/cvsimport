head	1.8;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.6
	gdb_7_6-2013-04-26-release:1.6
	gdb_7_6-branch:1.6.0.2
	gdb_7_6-2013-03-12-branchpoint:1.6
	gdb_7_5_1-2012-11-29-release:1.4
	gdb_7_5-2012-08-17-release:1.4
	gdb_7_5-branch:1.4.0.2
	gdb_7_5-2012-07-18-branchpoint:1.4
	gdb_7_4_1-2012-04-26-release:1.2.4.1
	gdb_7_4-2012-01-24-release:1.2.4.1
	gdb_7_4-branch:1.2.0.4
	gdb_7_4-2011-12-13-branchpoint:1.2
	gdb_7_3_1-2011-09-04-release:1.2
	gdb_7_3-2011-07-26-release:1.2
	gdb_7_3-branch:1.2.0.2
	gdb_7_3-2011-04-01-branchpoint:1.2;
locks; strict;
comment	@# @;


1.8
date	2013.06.27.18.51.31;	author tromey;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.07.17.31.07;	author palves;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.01.06.33.25;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.27.08.58.01;	author palves;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.16.16.21.44;	author palves;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.04.08.17.46;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.09.16.54.51;	author kettenis;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2011.02.23.18.30.22;	author msnyder;	state Exp;
branches;
next	;

1.2.4.1
date	2012.01.06.04.44.00;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.8
log
@test suite update - gdb.base/[h-m]

Convert files gdb.base/[h-m]*.exp to use standard_output_file et al.

	* hook-stop-continue.exp, hook-stop-frame.exp, huge.exp,
	included.exp, inferior-died.exp, infnan.exp, info-fun.exp,
	info-macros.exp, info-os.exp, info-proc.exp, info-target.exp,
	infoline.exp, interp.exp, interrupt.exp, jit-simple.exp,
	jit-so.exp, jump.exp, kill-after-signal.exp, label.exp, langs.exp,
	lineinc.exp, list.exp, logical.exp, long_long.exp, longjmp.exp,
	macscp.exp, maint.exp, memattr.exp, mips_pro.exp, miscexprs.exp,
	morestack.exp, moribund-step.exp, multi-forks.exp: Use
	standard_testfile, standard_output_file, prepare_for_testing,
	clean_restart.
@
text
@# Copyright 2011-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the gdb testsuite

# Test the memory attribute commands.

standard_testfile .c

if { [prepare_for_testing $testfile.exp $testfile $srcfile] } {
    return -1
}

runto main

set mem1start -1
set mem2start -1
set mem3start -1
set mem4start -1
set mem5start -1

set mem1end -1
set mem2end -1
set mem3end -1
set mem4end -1
set mem5end -1


gdb_test_multiple "info address mem1" "get address of mem1" {
    -re "Symbol \"mem1\" is static storage at address ($hex).*$gdb_prompt $" {
	set mem1start $expect_out(1,string)
    }
}

gdb_test_multiple "info address mem2" "get address of mem2" {
    -re "Symbol \"mem2\" is static storage at address ($hex).*$gdb_prompt $" {
	set mem2start $expect_out(1,string)
    }
}

gdb_test_multiple "info address mem3" "get address of mem3" {
    -re "Symbol \"mem3\" is static storage at address ($hex).*$gdb_prompt $" {
	set mem3start $expect_out(1,string)
    }
}

gdb_test_multiple "info address mem4" "get address of mem4" {
    -re "Symbol \"mem4\" is static storage at address ($hex).*$gdb_prompt $" {
	set mem4start $expect_out(1,string)
    }
}

gdb_test_multiple "info address mem5" "get address of mem5" {
    -re "Symbol \"mem5\" is static storage at address ($hex).*$gdb_prompt $" {
	set mem5start $expect_out(1,string)
    }
}

gdb_test_multiple "print &mem1\[64\]" "get end of mem1" {
    -re "$decimal = .* ($hex).*$gdb_prompt $" {
	set mem1end $expect_out(1,string)
    }
}

gdb_test_multiple "print &mem2\[64\]" "get end of mem2" {
    -re "$decimal = .* ($hex).*$gdb_prompt $" {
	set mem2end $expect_out(1,string)
    }
}

gdb_test_multiple "print &mem3\[64\]" "get end of mem3" {
    -re "$decimal = .* ($hex).*$gdb_prompt $" {
	set mem3end $expect_out(1,string)
    }
}

gdb_test_multiple "print &mem4\[64\]" "get end of mem4" {
    -re "$decimal = .* ($hex).*$gdb_prompt $" {
	set mem4end $expect_out(1,string)
    }
}

gdb_test_multiple "print &mem5\[64\]" "get end of mem5" {
    -re "$decimal = .* ($hex).*$gdb_prompt $" {
	set mem5end $expect_out(1,string)
    }
}

gdb_test_no_output "mem $mem1start $mem1end wo" "create mem region 1"
gdb_test_no_output "mem $mem2start $mem2end ro" "create mem region 2"
gdb_test_no_output "mem $mem3start $mem3end rw" "create mem region 3"
gdb_test_no_output "mem $mem4start $mem4end rw" "create mem region 4"
gdb_test_no_output "mem $mem5start $mem5end rw" "create mem region 5"

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test_multiple "info mem" "info mem(1)" {
    -re "1   y  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   y  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   y  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see1 && $see2 && $see3 && $see4 && $see5 } then {
	    pass "info mem (1)"
	} else {
	    fail "info mem (1)"
	}
    }
}

#
# Test read-only, write-only
#

# mem1 is write only: read should fail.
gdb_test "print mem1\[1\]" \
    "Cannot access memory at address $hex" \
    "mem1 cannot be read"

gdb_test "print mem1\[1\] = 9" \
    "$decimal = 9" \
    "mem1 can be written"

# mem2 is read only: write should fail.
gdb_test "print mem2\[1\] = 9" \
    "Cannot access memory at address $hex" \
    "mem2 cannot be written"

gdb_test "print mem2\[1\]" \
    "$decimal = 0" \
    "mem2 can be read"

#
# Test disable and enable
#

gdb_test_no_output "disable mem 1" "disable mem 1"
gdb_test "info mem" "1   n  .*" "mem 1 was disabled"

gdb_test_no_output "enable mem 1" "enable mem 1"
gdb_test "info mem" "1   y  .*" "mem 1 was enabled"

gdb_test_no_output "disable mem 2 4"

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test_multiple "info mem" "mem 2 and 4 were disabled" {
    -re "1   y  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   n  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   n  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   y  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see1 && $see2 && $see3 && $see4 && $see5 } then {
	    pass "mem 2 and 4 were disabled"
	} else {
	    fail "mem 2 and 4 were disabled"
	}
    }
}

gdb_test_no_output "enable mem 2-4" "enable mem 2-4"

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test_multiple "info mem" "mem 2-4 were enabled" {
    -re "1   y  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   y  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   y  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see1 && $see2 && $see3 && $see4 && $see5 } then {
	    pass "mem 2-4 were enabled"
	} else {
	    fail "mem 2-4 were enabled"
	}
    }
}

gdb_test_no_output "disable mem" "disable mem"

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test_multiple "info mem" "mem 1 to 5 were disabled" {
    -re "1   n  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   n  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   n  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   n  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   n  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see1 && $see2 && $see3 && $see4 && $see5 } then {
	    pass "mem 1 to 5 were disabled"
	} else {
	    fail "mem 1 to 5 were disabled"
	}
    }
}

gdb_test_no_output "enable mem" "enable mem"

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test_multiple "info mem" "mem 1 to 5 were enabled" {
    -re "1   y  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   y  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   y  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see1 && $see2 && $see3 && $see4 && $see5 } then {
	    pass "mem 1 to 5 were enabled"
	} else {
	    fail "mem 1 to 5 were enabled"
	}
    }
}

gdb_test "disable mem 7 8" \
    "No memory region number 7.*No memory region number 8." \
    "disable non-existant regions"

#
# Test delete
#

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test_no_output "delete mem 1" "delete mem 1"
gdb_test_multiple "info mem" "mem 1 was deleted" {
    -re "1   y  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   y  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   y  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { !$see1 && $see2 && $see3 && $see4 && $see5 } then {
	    pass "mem 1 was deleted"
	} else {
	    fail "mem 1 was deleted"
	}
    }
}

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test_no_output "delete mem 2 4" "delete mem 2 4"
gdb_test_multiple "info mem" "mem 2 and 4 were deleted" {
    -re "1   y  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   y  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   y  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { !$see1 && !$see2 && $see3 && !$see4 && $see5 } then {
	    pass "mem 2 and 4 were deleted"
	} else {
	    fail "mem 2 and 4 were deleted"
	}
    }
}

set see1 0
set see2 0
set see3 0
set see4 0
set see5 0

gdb_test "delete mem 2-4" \
    "No memory region number 2.*No memory region number 4." \
    "delete mem 2-4"
gdb_test_multiple "info mem" "mem 2-4 were deleted" {
    -re "1   y  \[ \t\]+$hex $hex wo nocache \[^\r\n\]*" {
	set see1 1
	exp_continue
    }
    -re "2   y  \[ \t\]+$hex $hex ro nocache \[^\r\n\]*" {
	set see2 1
	exp_continue
    }
    -re "3   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see3 1
	exp_continue
    }
    -re "4   y  \[ \t\]+$hex $hex rw nocache \[^\r\n\]*" {
	set see4 1
	exp_continue
    }
    -re "5   y  \[ \t\]+$hex $hex rw nocache .\[^\r\n\]*" {
	set see5 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { !$see1 && !$see2 && !$see3 && !$see4 && $see5 } then {
	    pass "mem 2-4 were deleted"
	} else {
	    fail "mem 2-4 were deleted"
	}
    }
}

gdb_test "delete mem 8" "No memory region number 8." \
    "delete non-existant region"

#
# Test overlapping checking
#

proc delete_memory {} {
    global gdb_prompt

    gdb_test_multiple "delete mem" "delete mem" {
       -re "Delete all memory regions.*y or n.*$" {
           send_gdb "y\n"
           exp_continue
       }
       -re "$gdb_prompt $" { }
    }
}

# Create a region that doesn't overlap (a PASS in the table).

proc region_pass { region } {
    gdb_test_no_output "mem $region ro" "$region: no-overlap"
}

# Try to create a region that overlaps (a FAIL in the table).

proc region_fail { region } {
    gdb_test "mem $region ro" "overlapping memory region" "$region: overlap"
}

# Test normal case (upper != 0)
#
#        lo'       hi'
#         |--------|
#  10 20 30 40 50 60 70 80 90
#      |-----|                FAIL
#         |--|                FAIL
#            |--|             FAIL
#               |--|          FAIL
#               |-----|       FAIL
#         |--------|          FAIL
#      |--------------|       FAIL
#      |--------------------- FAIL
#         |------------------ FAIL
#            |--------------- FAIL
#      |--|                   PASS
#                  |--|       PASS
#                        |--- PASS

delete_memory
gdb_test_no_output "mem 0x30 0x60 ro"
with_test_prefix "0x30 0x60" {
    region_fail "0x20 0x40"
    region_fail "0x30 0x40"
    region_fail "0x40 0x50"
    region_fail "0x50 0x60"
    region_fail "0x50 0x70"
    region_fail "0x30 0x60"
    region_fail "0x20 0x70"
    region_fail "0x20 0x0"
    region_fail "0x30 0x0"
    region_fail "0x40 0x0"
    region_pass "0x20 0x30"
    region_pass "0x60 0x70"
    region_pass "0x80 0x0"
}

# Test special case (upper == 0)
#
#           lo'             hi'
#            |---------------
#  00 10 20 30 40 50 60 70 80
#         |--------|          FAIL
#            |-----|          FAIL
#               |--|          FAIL
#         |------------------ FAIL
#            |--------------- FAIL
#               |------------ FAIL
#         |--|                PASS
#   |--|                      PASS

delete_memory
gdb_test_no_output "mem 0x30 0x0 ro"
with_test_prefix "0x30 0x0" {
    region_fail "0x20 0x50"
    region_fail "0x30 0x50"
    region_fail "0x40 0x50"
    region_fail "0x20 0x0"
    region_fail "0x30 0x0"
    region_fail "0x40 0x0"
    region_pass "0x20 0x30"
    region_pass "0x00 0x10"
}
@


1.7
log
@Remove superfluous semicolons from testsuite throughout.

A few months ago semicolons after "return" were removed throughout the
testsuite.  However, as I pointed out in review, they're unnecessary
not just after "return", but pretty much after any tcl command.  ';'
is the command separator, and you only need it if there's another
command on the same line afterwards.

This patch was written by running:

 $ find . -name "*.exp" | xargs grep -l ";\s*$" | xargs sed -i 's/\([^#][^\s*;]*\)\s*;\s*$/\1/'

and then undoing changes to comments, and lib/future.exp.

Tested on x86_64 Fedora 17.

gdb/testsuite/
2013-06-07  Pedro Alves  <palves@@redhat.com>

	* boards/native-extended-gdbserver.exp: Remove semicolon.
	* config/arm-ice.exp: Likewise.
	* config/bfin.exp: Likewise.
	* config/cygmon.exp: Likewise.
	* config/h8300.exp: Likewise.
	* config/monitor.exp: Likewise.
	* config/sid.exp: Likewise.
	* config/sim.exp: Likewise.
	* config/slite.exp: Likewise.
	* config/vx.exp: Likewise.
	* gdb.arch/i386-bp_permanent.exp: Likewise.
	* gdb.asm/asm-source.exp: Likewise.
	* gdb.base/args.exp: Likewise.
	* gdb.base/attach-pie-misread.exp: Likewise.
	* gdb.base/auxv.exp: Likewise.
	* gdb.base/bigcore.exp: Likewise.
	* gdb.base/bitfields2.exp: Likewise.
	* gdb.base/bitfields.exp: Likewise.
	* gdb.base/break.exp: Likewise.
	* gdb.base/break-interp.exp: Likewise.
	* gdb.base/callfuncs.exp: Likewise.
	* gdb.base/call-sc.exp: Likewise.
	* gdb.base/commands.exp: Likewise.
	* gdb.base/corefile.exp: Likewise.
	* gdb.base/dbx.exp: Likewise.
	* gdb.base/ending-run.exp: Likewise.
	* gdb.base/exprs.exp: Likewise.
	* gdb.base/funcargs.exp: Likewise.
	* gdb.base/hbreak2.exp: Likewise.
	* gdb.base/huge.exp: Likewise.
	* gdb.base/list.exp: Likewise.
	* gdb.base/memattr.exp: Likewise.
	* gdb.base/overlays.exp: Likewise.
	* gdb.base/printcmds.exp: Likewise.
	* gdb.base/recurse.exp: Likewise.
	* gdb.base/remotetimeout.exp: Likewise.
	* gdb.base/reread.exp: Likewise.
	* gdb.base/savedregs.exp: Likewise.
	* gdb.base/scope.exp: Likewise.
	* gdb.base/sepdebug.exp: Likewise.
	* gdb.base/setshow.exp: Likewise.
	* gdb.base/setvar.exp: Likewise.
	* gdb.base/sigaltstack.exp: Likewise.
	* gdb.base/siginfo-addr.exp: Likewise.
	* gdb.base/siginfo.exp: Likewise.
	* gdb.base/siginfo-obj.exp: Likewise.
	* gdb.base/sigrepeat.exp: Likewise.
	* gdb.base/sigstep.exp: Likewise.
	* gdb.base/structs.exp: Likewise.
	* gdb.base/testenv.exp: Likewise.
	* gdb.base/twice.exp: Likewise.
	* gdb.base/valgrind-db-attach.exp: Likewise.
	* gdb.base/valgrind-infcall.exp: Likewise.
	* gdb.base/varargs.exp: Likewise.
	* gdb.base/watchpoint.exp: Likewise.
	* gdb.cp/gdb1355.exp: Likewise.
	* gdb.cp/misc.exp: Likewise.
	* gdb.disasm/hppa.exp: Likewise.
	* gdb.disasm/t01_mov.exp: Likewise.
	* gdb.disasm/t02_mova.exp: Likewise.
	* gdb.disasm/t03_add.exp: Likewise.
	* gdb.disasm/t04_sub.exp: Likewise.
	* gdb.disasm/t05_cmp.exp: Likewise.
	* gdb.disasm/t06_ari2.exp: Likewise.
	* gdb.disasm/t07_ari3.exp: Likewise.
	* gdb.disasm/t08_or.exp: Likewise.
	* gdb.disasm/t09_xor.exp: Likewise.
	* gdb.disasm/t10_and.exp: Likewise.
	* gdb.disasm/t11_logs.exp: Likewise.
	* gdb.disasm/t12_bit.exp: Likewise.
	* gdb.disasm/t13_otr.exp: Likewise.
	* gdb.gdb/selftest.exp: Likewise.
	* gdb.hp/gdb.base-hp/callfwmall.exp: Likewise.
	* gdb.mi/mi-reverse.exp: Likewise.
	* gdb.pascal/floats.exp: Likewise.
	* gdb.python/py-inferior.exp: Likewise.
	* gdb.threads/attach-into-signal.exp: Likewise.
	* gdb.threads/pthreads.exp: Likewise.
	* gdb.threads/thread_events.exp: Likewise.
	* gdb.threads/watchthreads.exp: Likewise.
	* gdb.trace/actions-changed.exp: Likewise.
	* gdb.trace/actions.exp: Likewise.
	* gdb.trace/ax.exp: Likewise.
	* gdb.trace/backtrace.exp: Likewise.
	* gdb.trace/change-loc.exp: Likewise.
	* gdb.trace/deltrace.exp: Likewise.
	* gdb.trace/disconnected-tracing.exp: Likewise.
	* gdb.trace/ftrace.exp: Likewise.
	* gdb.trace/infotrace.exp: Likewise.
	* gdb.trace/passc-dyn.exp: Likewise.
	* gdb.trace/passcount.exp: Likewise.
	* gdb.trace/pending.exp: Likewise.
	* gdb.trace/qtro.exp: Likewise.
	* gdb.trace/range-stepping.exp: Likewise.
	* gdb.trace/report.exp: Likewise.
	* gdb.trace/save-trace.exp: Likewise.
	* gdb.trace/status-stop.exp: Likewise.
	* gdb.trace/strace.exp: Likewise.
	* gdb.trace/tfile.exp: Likewise.
	* gdb.trace/tfind.exp: Likewise.
	* gdb.trace/trace-break.exp: Likewise.
	* gdb.trace/tracecmd.exp: Likewise.
	* gdb.trace/trace-mt.exp: Likewise.
	* gdb.trace/tspeed.exp: Likewise.
	* gdb.trace/tsv.exp: Likewise.
	* gdb.trace/while-stepping.exp: Likewise.
	* lib/gdb.exp: Likewise.
	* lib/gdbserver-support.exp: Likewise.
	* lib/java.exp: Likewise.
	* lib/mi-support.exp: Likewise.
	* lib/pascal.exp: Likewise.
	* lib/prompt.exp: Likewise.
	* lib/trace-support.exp: Likewise.
@
text
@d20 1
a20 2
set testfile "memattr"
set srcfile  ${testfile}.c
@


1.6
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d461 1
a461 1
           send_gdb "y\n";
@


1.5
log
@2012-08-27  Wei-cheng Wang  <cole945@@gmail.com>

	* memattr.c (create_mem_region): Fix memory region overlapping
	checking.

2012-08-27  Wei-cheng Wang  <cole945@@gmail.com>
	    Yao Qi <yao@@codesourcery.com>
	    Pedro Alves <palves@@redhat.com>

	* gdb.base/memattr.exp (delete_memory, region_pass, region_fail):
	New procedures.
	(top level): Add overlap checking tests.
@
text
@d1 1
a1 1
# Copyright 2011-2012 Free Software Foundation, Inc.
@


1.4
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d451 92
@


1.3
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a19 4
if $tracelevel then {
    strace $tracelevel
}

@


1.2
log
@* gdb.base/memattr.exp: Adjust regexps to accept spaces as well as
tabs.
@
text
@d1 1
a1 2
# Copyright 2011
# Free Software Foundation, Inc.
@


1.2.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 1
# Copyright 2011-2012 Free Software Foundation, Inc.
@


1.1
log
@2011-02-22  Michael Snyder  <msnyder@@vmware.com>

	* memattr.c (mem_enable_command): Use get_number_or_range.
	(mem_disable_command): Ditto.
	(mem_delete_command): Ditto.
	(_initialize_mem): Tweak usage message to reflect multiple
	arguments.

2011-02-22  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/memattr.exp: New test.
	* gdb.base/memattr.c: Test load for memattr.exp.
@
text
@d120 1
a120 1
    -re "1   y  \t$hex $hex wo nocache \[^\r\n\]*" {
d124 1
a124 1
    -re "2   y  \t$hex $hex ro nocache \[^\r\n\]*" {
d128 1
a128 1
    -re "3   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d132 1
a132 1
    -re "4   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d136 1
a136 1
    -re "5   y  \t$hex $hex rw nocache .\[^\r\n\]*" {
d190 1
a190 1
    -re "1   y  \t$hex $hex wo nocache \[^\r\n\]*" {
d194 1
a194 1
    -re "2   n  \t$hex $hex ro nocache \[^\r\n\]*" {
d198 1
a198 1
    -re "3   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d202 1
a202 1
    -re "4   n  \t$hex $hex rw nocache \[^\r\n\]*" {
d206 1
a206 1
    -re "5   y  \t$hex $hex rw nocache .\[^\r\n\]*" {
d228 1
a228 1
    -re "1   y  \t$hex $hex wo nocache \[^\r\n\]*" {
d232 1
a232 1
    -re "2   y  \t$hex $hex ro nocache \[^\r\n\]*" {
d236 1
a236 1
    -re "3   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d240 1
a240 1
    -re "4   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d244 1
a244 1
    -re "5   y  \t$hex $hex rw nocache .\[^\r\n\]*" {
d266 1
a266 1
    -re "1   n  \t$hex $hex wo nocache \[^\r\n\]*" {
d270 1
a270 1
    -re "2   n  \t$hex $hex ro nocache \[^\r\n\]*" {
d274 1
a274 1
    -re "3   n  \t$hex $hex rw nocache \[^\r\n\]*" {
d278 1
a278 1
    -re "4   n  \t$hex $hex rw nocache \[^\r\n\]*" {
d282 1
a282 1
    -re "5   n  \t$hex $hex rw nocache .\[^\r\n\]*" {
d304 1
a304 1
    -re "1   y  \t$hex $hex wo nocache \[^\r\n\]*" {
d308 1
a308 1
    -re "2   y  \t$hex $hex ro nocache \[^\r\n\]*" {
d312 1
a312 1
    -re "3   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d316 1
a316 1
    -re "4   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d320 1
a320 1
    -re "5   y  \t$hex $hex rw nocache .\[^\r\n\]*" {
d349 1
a349 1
    -re "1   y  \t$hex $hex wo nocache \[^\r\n\]*" {
d353 1
a353 1
    -re "2   y  \t$hex $hex ro nocache \[^\r\n\]*" {
d357 1
a357 1
    -re "3   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d361 1
a361 1
    -re "4   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d365 1
a365 1
    -re "5   y  \t$hex $hex rw nocache .\[^\r\n\]*" {
d386 1
a386 1
    -re "1   y  \t$hex $hex wo nocache \[^\r\n\]*" {
d390 1
a390 1
    -re "2   y  \t$hex $hex ro nocache \[^\r\n\]*" {
d394 1
a394 1
    -re "3   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d398 1
a398 1
    -re "4   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d402 1
a402 1
    -re "5   y  \t$hex $hex rw nocache .\[^\r\n\]*" {
d425 1
a425 1
    -re "1   y  \t$hex $hex wo nocache \[^\r\n\]*" {
d429 1
a429 1
    -re "2   y  \t$hex $hex ro nocache \[^\r\n\]*" {
d433 1
a433 1
    -re "3   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d437 1
a437 1
    -re "4   y  \t$hex $hex rw nocache \[^\r\n\]*" {
d441 1
a441 1
    -re "5   y  \t$hex $hex rw nocache .\[^\r\n\]*" {
@

