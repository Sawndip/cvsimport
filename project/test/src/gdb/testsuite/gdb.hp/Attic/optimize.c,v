head	1.2;
access;
symbols
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	99.08.16.20.02.19;	author jsm;	state dead;
branches;
next	1.1;

1.1
date	99.04.16.01.34.35;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.35;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.2
log
@These files removed in the 1999-08-16 snapshot.
@
text
@/* Source for debugging optimimzed code test.

    cc -g -O -o optimize optimize.c
*/
int callee();
int test_opt;

int main()
{
   int a,b,c,d,e,f,g,h;

   a = 10;;

   /* Value propagate
    */
   b = 2 * a + 1;
   c = 3 * b + 2;

   /* Re-use expressions
    */
   d = (2 * a + 1) * (3 * b + 2);
   e = (2 * a + 1) * (3 * b + 2);

   /* Create dead stores--do lines still exist?
    */
   d = (2 * a + 1) * (3 * b + 2);
   e = (2 * a + 1) * (3 * b + 2);
   d = (2 * a + 1) * (3 * b + 2);
   e = (2 * a + 1) * (3 * b + 2);

   /* Alpha and psi motion
    */
   if( test_opt ) {
       f = e - d;
       f = f--;
   }
   else {
       f = e - d;
       f = f + d * e;
   }

   /* Chi and Rho motion
    */
   h = 0;
   do {
       h++;
       a = b * c + d * e;  /* Chi */
       f = f + d * e;
       g = f + d * e;      /* Rho */
       callee( g+1 );
       test_opt = (test_opt != 1);  /* Cycles */
   } while( g && h < 10);

   /* Opps for tail recursion, unrolling,
    * folding, evaporating
    */
   for( a = 0; a < 100; a++ ) {
       callee( callee ( callee( a )));
       callee( callee ( callee( a )));
       callee( callee ( callee( a )));
   }

   return callee( test_opt );
}

/* defined late to keep line numbers the same
*/
int callee( x )
    int x;      /* not used! */
{
    test_opt++; /* side effect */

    return test_opt;
}

/* end */@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

