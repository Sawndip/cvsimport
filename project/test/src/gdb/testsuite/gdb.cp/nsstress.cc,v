head	1.1;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.12
	gdb_7_6-2013-03-12-branchpoint:1.1
	gdb_7_5_1-2012-11-29-release:1.1
	gdb_7_5-2012-08-17-release:1.1
	gdb_7_5-branch:1.1.0.10
	gdb_7_5-2012-07-18-branchpoint:1.1
	gdb_7_4_1-2012-04-26-release:1.1
	gdb_7_4-2012-01-24-release:1.1
	gdb_7_4-branch:1.1.0.8
	gdb_7_4-2011-12-13-branchpoint:1.1
	gdb_7_3_1-2011-09-04-release:1.1
	gdb_7_3-2011-07-26-release:1.1
	gdb_7_3-branch:1.1.0.6
	gdb_7_3-2011-04-01-branchpoint:1.1
	gdb_7_2-2010-09-02-release:1.1
	gdb_7_2-branch:1.1.0.4
	gdb_7_2-2010-07-07-branchpoint:1.1
	gdb_7_1-2010-03-18-release:1.1
	gdb_7_1-branch:1.1.0.2
	gdb_7_1-2010-02-18-branchpoint:1.1;
locks; strict;
comment	@// @;


1.1
date	2010.01.26.16.47.35;	author swagiaal;	state Exp;
branches;
next	;


desc
@@


1.1
log
@ 2010-01-14  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdb.cp/nsrecurs.exp: New test.
	* gdb.cp/nsrecurs.cc: New test program.
	* gdb.cp/nsstress.exp: New test.
	* gdb.cp/nsstress.cc: New test program.
	* gdb.cp/nsdecl.exp: New test.
	* gdb.cp/nsdecl.cc: New test program.


 2010-01-26  Sami Wagiaalla  <swagiaal@@redhat.com>

	* cp-namespace.c (cp_lookup_symbol_namespace): Added
	search_parent argument.
	(cp_add_using): Initialize 'searched' field.
	(reset_directive_searched): New function.
	* cp-support.h: Add 'searched' field to using_direct struct.
	(cp_lookup_symbol_imports): Ditto.
	* cp-namespace.c (cp_lookup_symbol_imports): Ditto.
	Perform recursive search.
	Implement non parent search.
	* valops.c (value_maybe_namespace_elt): Updated.
@
text
@
namespace A{ int x; }
namespace B{ int x; }
namespace C{ int x; }
namespace D{ int x; }
namespace E{ int x; }
namespace F{ int x; }
namespace G{ int x; }
namespace H{ int x; }
namespace I{ int x; }
namespace J{ int x; }
namespace K{ int x; }
namespace L{ int x; }
namespace M{ int x; }
namespace N{ int x; }
namespace O{ int x; }
namespace P{ int x; }
namespace Q{ int x; }
namespace R{ int x; }
namespace S{ int x; }
namespace T{ int x; }
namespace U{ int x; }
namespace V{ int x; }
namespace W{ int x; }
namespace X{ int x; }
namespace Y{ int x; }
namespace Z{ int x; }


int main(){

  using namespace A;
  using namespace B;
  using namespace C;
  using namespace D;
  using namespace E;
  using namespace F;
  using namespace G;
  using namespace H;
  using namespace I;
  using namespace J;
  using namespace K;
  using namespace L;
  using namespace M;
  using namespace N;
  using namespace O;
  using namespace P;
  using namespace Q;
  using namespace R;
  using namespace S;
  using namespace T;
  using namespace U;
  using namespace V;
  using namespace W;
  using namespace X;
  using namespace Y;
  using namespace Z;

  return 0;
}
@
