head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2013.04.15.17.36.14;	author tromey;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	PR c++/9065:
	* NEWS: Update.
	* breakpoint.c (watchpoint_exp_is_const): Add OP_TYPEID.
	* c-exp.y (TYPEID): New token.
	(exp): Add new TYPEID productions.
	(ident_tokens): Add "typeid".
	* cp-abi.c (cplus_typeid, cplus_typeid_type): New functions.
	* cp-abi.h (cplus_typeid, cplus_typeid_type): Declare.
	(struct cp_abi_ops) <get_typeid, get_typeid_type>: New fields.
	* eval.c (evaluate_subexp_standard) <OP_TYPEID>: New case.
	* expprint.c (dump_subexp_body_standard) <OP_TYPEID>: New
	case.
	* gnu-v3-abi.c (std_type_info_gdbarch_data): New global.
	(build_std_type_info_type, gnuv3_get_typeid_type)
	(gnuv3_get_typeid): New functions.
	(init_gnuv3_ops): Initialize std_type_info_gdbarch_data.  Set
	new fields on ABI object.
	* parse.c (operator_length_standard) <OP_TYPEID>: New case.
	* std-operator.def (OP_TYPEID): New.
gdb/testsuite
	* gdb.cp/typeid.cc: New file.
	* gdb.cp/typeid.exp: New file.
@
text
@# Copyright 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile .cc

if {[skip_cplus_tests]} {
    return -1
}

if {[prepare_for_testing $testfile.exp $testfile $srcfile {debug c++}]} {
    return -1
}

proc do_typeid_tests {started} {
    global hex

    # We might see the standard type or gdb's internal type.
    set type_re "(std::type_info|struct gdb_gnu_v3_type_info)"


    foreach simple_var {i cp ccp ca b} {
	gdb_test "print &typeid($simple_var)" \
	    " = \\($type_re \\*\\) $hex.*"

	# Note that we test pointer equality rather than object
	# equality here.  That is because std::type_info's operator==
	# is not present in the libstdc++ .so.
	gdb_test "print &typeid($simple_var) == &typeid(typeof($simple_var))" \
	    " = true"
    }

    # typeid for these is Derived.  Don't try these tests until the
    # inferior has started.
    if {$started} {
	foreach der_var {*b *vb1 *vb2 *bv d {const Derived} {const Derived &}} {
	    gdb_test "print &typeid($der_var)" \
		" = \\($type_re \\*\\) $hex.*"
	    gdb_test "print &typeid($der_var) == &typeid(d)" \
		" = true"
	}
    }
}

with_test_prefix "before starting" {
    do_typeid_tests 0
}

if ![runto_main] {
    untested typeid
    return -1
}

with_test_prefix "after starting" {
    do_typeid_tests 1
}
@
