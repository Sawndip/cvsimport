head	1.4;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.4
	gdb_7_6-2013-04-26-release:1.4
	gdb_7_6-branch:1.4.0.8
	gdb_7_6-2013-03-12-branchpoint:1.4
	gdb_7_5_1-2012-11-29-release:1.4
	gdb_7_5-2012-08-17-release:1.4
	gdb_7_5-branch:1.4.0.6
	gdb_7_5-2012-07-18-branchpoint:1.4
	gdb_7_4_1-2012-04-26-release:1.4
	gdb_7_4-2012-01-24-release:1.4
	gdb_7_4-branch:1.4.0.4
	gdb_7_4-2011-12-13-branchpoint:1.4
	gdb_7_3_1-2011-09-04-release:1.4
	gdb_7_3-2011-07-26-release:1.4
	gdb_7_3-branch:1.4.0.2
	gdb_7_3-2011-04-01-branchpoint:1.4
	gdb_7_2-2010-09-02-release:1.3
	gdb_7_2-branch:1.3.0.2
	gdb_7_2-2010-07-07-branchpoint:1.3
	gdb_7_1-2010-03-18-release:1.2
	gdb_7_1-branch:1.2.0.2
	gdb_7_1-2010-02-18-branchpoint:1.2;
locks; strict;
comment	@// @;


1.4
date	2011.02.02.17.41.54;	author palves;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.28.20.12.53;	author jkratoch;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.02.23.40.28;	author tromey;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.02.16.45.17;	author tromey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	gdb/
	* c-valprint.c (c_value_print): When doing virtual base pointer
	adjustment, create a new value with adjusted contents rather than
	changing the contents of the value being printed (and getting it
	wrong).

	gdb/testsuite/
	* gdb.cp/virtbase.cc (VirtualBase, VirtualMiddleA, VirtualMiddleB)
	(Virtual): New structs.
	(virtual_o, virtual_middle_b): New globals.
	* gdb.cp/virtbase.exp: New tests.
@
text
@// This first batch of classes are for PR 11226.
namespace mc {
  class Base {
  protected:
    int x;
    
  public:
    Base(void) { x = 2; };
  };
}

namespace ph {
  class Middle: public virtual mc::Base {
  protected:
    int y;
    
  public:
    Middle(void): mc::Base() { y = 3; };

    int get_y(void)
    {
      return y;			// breakpoint 1
    };
  };

  class Derived: public virtual Middle {
  protected:
    int z;
    
  public:
    Derived(void): Middle() { z = 4; };

    int get_z(void)
    {
      return z;			// breakpoint 2
    };
  };
}

// These classes are for PR 9629.
struct A {};
struct B : virtual A {};

struct C {int v; C() {v=11;};};
struct D:virtual C{};

class E:B,D{};

// These classes are for another regression test, from
// https://bugzilla.redhat.com/show_bug.cgi?id=560741

class RHA
{
public:
  RHA() : mA(0xaaaaaaaa) {}
  virtual void a() = 0;  
  int mA;
};

class RHB
{
public:
  RHB() : mB(0xbbbbbbbb) {}
  virtual void b() = 0;
  int mB;
};

class RHC : public RHA,
	  public RHB
{
public:
  RHC() : RHA(), RHB() {}
  virtual void a() {}
  virtual void b() {}
};

class RTTI_base
{
public:
  virtual ~RTTI_base() {}
};

class RTTI_data
{
public:
  RTTI_base base;
  int data;
  RTTI_data() : data(1) {}
};

/* These classes are for testing pointer adjustment when printing a
   pointer into a virtual base, with print object on.  */
struct VirtualBase {
  int x;

  virtual ~VirtualBase() {}
};

struct VirtualMiddleA : public virtual VirtualBase {
  /* Make sure the vbase offset of Virtual::VirtualBaseB is larger
     than what fits in one byte.  */
  int y[300];

  virtual ~VirtualMiddleA() {}
};

struct VirtualMiddleB : public virtual VirtualBase {
  int y;

  virtual ~VirtualMiddleB() {}
};

struct Virtual : public virtual VirtualMiddleA, public virtual VirtualMiddleB {
  int z;

  virtual ~Virtual() {}
};

Virtual virtual_o;
VirtualMiddleB *virtual_middle_b = &virtual_o;

int main() {
  ph::Derived tst;
  tst.get_y();
  tst.get_z();

  E *e = new E;
  RHB *b = new RHC();
  RTTI_data rtti_data;

  return 0;			// breakpoint 3
}
@


1.3
log
@gdb/
	Fix modification of cplus_struct_default.
	* dwarf2read.c (dwarf2_add_member_fn) <no DW_AT_vtable_elem_location>:
	Call ALLOCATE_CPLUS_STRUCT_TYPE.
	* gdbtypes.c (cplus_struct_default): New empty initializer, comment it.

gdb/testsuite/
	* gdb.cp/virtbase.cc (class RTTI_base, class RTTI_data)
	(main) <rtti_data>: New.
	* gdb.cp/virtbase.exp (print rtti_data): New.
@
text
@d91 31
@


1.2
log
@gdb
	* valops.c (value_cast_structs): Try downcasting using the RTTI
	type.
gdb/testsuite
	* gdb.cp/virtbase.exp: Add regression tests.
	* gdb.cp/virtbase.cc (RHA, RHB, RHC): New classes.
	(main): Instantiate RHC.
@
text
@d77 5
d83 7
a89 1

d98 1
@


1.1
log
@gdb
	PR c++/11226, PR c++/9629, PR c++/9688, PR c++/8890:
	* valops.c (search_struct_field): Compute nbases after calling
	CHECK_TYPEDEF.
	(check_field): Call CHECK_TYPEDEF.
	* cp-valprint.c (cp_print_value): Pass correct address to
	baseclass_offset.  Fix check for virtual base past the end of the
	object.  Don't offset address passed to cp_print_value_fields or
	apply_val_pretty_printer.
	(cp_print_value_fields): Fix call to val_print.
	(cp_print_value_fields_rtti): New function.
	* c-valprint.c (c_val_print): Use cp_print_value_fields_rtti.
	* p-valprint.c (pascal_object_print_value_fields): Fix call to
	val_print.
	* python/py-prettyprint.c (apply_val_pretty_printer): Add embedded
	offset to address.
	* language.h (struct language_defn) <la_val_print>: Document.
	* c-lang.h (cp_print_value_fields_rtti): Declare.
gdb/testsuite
	PR c++/11226, PR c++/9629, PR c++/9688, PR c++/8890:
	* gdb.cp/virtbase.cc: New file.
	* gdb.cp/virtbase.exp: New file.
	* gdb.cp/userdef.exp: Allow 'struct' or 'class'.
@
text
@d49 31
d86 1
@

