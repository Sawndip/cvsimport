head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2013.04.15.17.36.14;	author tromey;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	PR c++/9065:
	* NEWS: Update.
	* breakpoint.c (watchpoint_exp_is_const): Add OP_TYPEID.
	* c-exp.y (TYPEID): New token.
	(exp): Add new TYPEID productions.
	(ident_tokens): Add "typeid".
	* cp-abi.c (cplus_typeid, cplus_typeid_type): New functions.
	* cp-abi.h (cplus_typeid, cplus_typeid_type): Declare.
	(struct cp_abi_ops) <get_typeid, get_typeid_type>: New fields.
	* eval.c (evaluate_subexp_standard) <OP_TYPEID>: New case.
	* expprint.c (dump_subexp_body_standard) <OP_TYPEID>: New
	case.
	* gnu-v3-abi.c (std_type_info_gdbarch_data): New global.
	(build_std_type_info_type, gnuv3_get_typeid_type)
	(gnuv3_get_typeid): New functions.
	(init_gnuv3_ops): Initialize std_type_info_gdbarch_data.  Set
	new fields on ABI object.
	* parse.c (operator_length_standard) <OP_TYPEID>: New case.
	* std-operator.def (OP_TYPEID): New.
gdb/testsuite
	* gdb.cp/typeid.cc: New file.
	* gdb.cp/typeid.exp: New file.
@
text
@/* This testcase is part of GDB, the GNU debugger.

   Copyright 2013 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include <typeinfo>

int i;
char *cp;
const char *ccp;
char ca[5];

struct Base
{
  virtual ~Base() { }
};

struct VB1 : public virtual Base
{
};

struct VB2 : public virtual Base
{
};

struct Derived : public VB1, VB2
{
};

Derived d;

Base *b = &d;
VB1 *vb1 = &d;
VB1 *vb2 = &d;

const Base *bv = &d;

int main ()
{
  const std::type_info &xi = typeid(i);
  const std::type_info &xcp = typeid(cp);
  const std::type_info &xccp = typeid(ccp);
  const std::type_info &xca = typeid(ca);
  const std::type_info &xd = typeid(d);
  const std::type_info &xb = typeid(b);

  return 0;
}
@
