head	1.12;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.12
	gdb_7_6-2013-04-26-release:1.12
	gdb_7_6-branch:1.12.0.2
	gdb_7_6-2013-03-12-branchpoint:1.12
	gdb_7_5_1-2012-11-29-release:1.11
	gdb_7_5-2012-08-17-release:1.11
	gdb_7_5-branch:1.11.0.2
	gdb_7_5-2012-07-18-branchpoint:1.11
	gdb_7_4_1-2012-04-26-release:1.9.4.1
	gdb_7_4-2012-01-24-release:1.9.4.1
	gdb_7_4-branch:1.9.0.4
	gdb_7_4-2011-12-13-branchpoint:1.9
	gdb_7_3_1-2011-09-04-release:1.9
	gdb_7_3-2011-07-26-release:1.9
	gdb_7_3-branch:1.9.0.2
	gdb_7_3-2011-04-01-branchpoint:1.9
	gdb_7_2-2010-09-02-release:1.6
	gdb_7_2-branch:1.6.0.2
	gdb_7_2-2010-07-07-branchpoint:1.6
	gdb_7_1-2010-03-18-release:1.3
	gdb_7_1-branch:1.3.0.2
	gdb_7_1-2010-02-18-branchpoint:1.3
	multiprocess-20081120-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.12
date	2013.01.01.06.41.25;	author brobecke;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.25.21.07.32;	author tromey;	state Exp;
branches;
next	1.10;

1.10
date	2012.01.04.08.17.55;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2011.02.27.20.49.27;	author msnyder;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2011.02.25.19.19.26;	author msnyder;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.01.15.33.48;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.18.15.08.29;	author palves;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.10.19.48.19;	author msnyder;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.02.21.46.45;	author msnyder;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.01.07.32.04;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.19.09.56.34;	author palves;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.21.02.36.29;	author shebs;	state dead;
branches
	1.1.2.1;
next	;

1.9.4.1
date	2012.01.06.04.44.10;	author brobecke;	state Exp;
branches;
next	;

1.1.2.1
date	2008.11.21.02.36.29;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2009-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test multi-exec / multi-process features that work for all configurations,
# even ones that cannot run multiple processes simultaneously.

set testfile "base"

set exec1 "hello"
set srcfile1 ${exec1}.c
set binfile1 [standard_output_file ${exec1}]

set exec2 "hangout"
set srcfile2 ${exec2}.c
set binfile2 [standard_output_file ${exec2}]

set exec3 "goodbye"
set srcfile3 ${exec3}.c
set binfile3 [standard_output_file ${exec3}]

if { [build_executable ${testfile}.exp ${exec1} "${srcfile1}" {debug nowarnings}] == -1 } {
    return -1
}

if { [build_executable ${testfile}.exp ${exec2} "${srcfile2}" {debug nowarnings}] == -1} {
    return -1
}

if { [build_executable ${testfile}.exp ${exec3} "${srcfile3}" {debug nowarnings}] == -1 } {
    return -1
}

clean_restart ${exec1}

# Add an empty inferior space, switch to it, and load a main
# executable into it.
gdb_test "add-inferior" "Added inferior 2.*" "add empty inferior 2"
gdb_test "inferior 2" "Switching to inferior 2.*" "switch to inferior 2"
gdb_test "file ${binfile2}" ".*" "load ${exec2} file in inferior 2"

# Add a new inferior space and load a main executable into it in one
# command.
gdb_test "add-inferior -exec ${binfile3}" \
    "Added inferior 3.*" \
    "add inferior 3 with -exec ${exec3}"

# Check that we have multiple spaces.

gdb_test "info inferiors" \
    "Executable.*${exec3}.*${exec2}.*${exec1}.*"

# Test info inferiors with args

set see1 0
set see2 0
set see3 0

gdb_test_multiple "info inferior 2 3" "info inferior 2 3" {
    -re ". 3 \[^\r\n\]*${exec3}" {
	set see3 1
	exp_continue
    }
    -re ". 2 \[^\r\n\]*${exec2}" {
	set see2 1
	exp_continue
    }
    -re ". 1 \[^\r\n\]*${exec1}" {
	set see1 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { !$see1 && $see2 && $see3 } then {
	    pass "info inferior 2 3"
	} else {
	    fail "info inferior 2 3"
	}
    }
}

set see1 0
set see2 0
set see3 0

gdb_test_multiple "info inferior 1-2" "info inferior 1-2" {
    -re ". 3 \[^\r\n\]*${exec3}" {
	set see3 1
	exp_continue
    }
    -re ". 2 \[^\r\n\]*${exec2}" {
	set see2 1
	exp_continue
    }
    -re ". 1 \[^\r\n\]*${exec1}" {
	set see1 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see1 && $see2 && !$see3 } then {
	    pass "info inferior 1-2"
	} else {
	    fail "info inferior 1-2"
	}
    }
}

# Test that we have multiple symbol tables.

gdb_test "inferior 1" ".*" "switch to inferior 1"
gdb_test "info functions commonfun" \
    "${srcfile1}.*" \
    "'info functions commonfun' in inferior 1"

gdb_test "inferior 3" ".*" "switch to inferior 3"
gdb_test "info functions commonfun" \
    "${srcfile3}.*" \
    "'info functions commonfun' in inferior 3"

gdb_test "inferior 1" ".*" "switch back to inferior 1"

gdb_test_no_output "set listsize 1"

gdb_test "list commonfun" "from hello.*" "list commonfun in hello"

gdb_test "print hglob" "1"

gdb_test "print glob" "92" "print glob (${exec1})"


gdb_test "inferior 3" ".*" "switch to inferior 3 to print globals"

gdb_test "print gglob" "2"

gdb_test "print glob" "45" "print glob (${exec3})"

gdb_test "list commonfun" "from goodbye.*" "list commonfun in goodbye"


# Let's run the hello program.
gdb_test "inferior 1" ".*" "switch to inferior 1 to run it"

if { ![runto_main] } then {
    return -1
}

gdb_test "break hello" ".*"
gdb_test "continue" "Breakpoint \[0-9\].*, hello.*"

# Now let's remove the other two

gdb_test_no_output "remove-inferiors 2-3" "remove-inferiors 2-3"

set see1 0
set see2 0
set see3 0

gdb_test_multiple "info inferiors" "check remove-inferiors" {
    -re ". 3 \[^\r\n\]*${exec3}" {
	set see3 1
	exp_continue
    }
    -re ". 2 \[^\r\n\]*${exec2}" {
	set see2 1
	exp_continue
    }
    -re ". 1 \[^\r\n\]*${exec1}" {
	set see1 1
	exp_continue
    }
    -re "$gdb_prompt $" {
	if { $see1 && !$see2 && !$see3 } then {
	    pass "check remove-inferiors"
	} else {
	    fail "check remove-inferiors"
	}
    }
}

@


1.11
log
@	* gdb.multi/watchpoint-multi.exp: Use standard_testfile.
	* gdb.multi/bkpt-multi-exec.exp: Use standard_output_file.  Use
	build_executable, not prepare_for_testing.
	* gdb.multi/base.exp: Use standard_output_file.  Use
	build_executable,  not prepare_for_testing.
@
text
@d1 1
a1 1
# Copyright 2009-2012 Free Software Foundation, Inc.
@


1.10
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d23 1
a23 1
set binfile1 ${objdir}/${subdir}/${exec1}
d27 1
a27 1
set binfile2 ${objdir}/${subdir}/${exec2}
d31 1
a31 1
set binfile3 ${objdir}/${subdir}/${exec3}
d33 1
a33 1
if { [prepare_for_testing ${testfile}.exp ${exec1} "${srcfile1}" {debug nowarnings}] } {
d37 1
a37 1
if { [prepare_for_testing ${testfile}.exp ${exec2} "${srcfile2}" {debug nowarnings}] } {
d41 1
a41 1
if { [prepare_for_testing ${testfile}.exp ${exec3} "${srcfile3}" {debug nowarnings}] } {
@


1.9
log
@2011-02-25  Michael Snyder  <msnyder@@vmware.com>

	* inferior.c (detach_inferior_command): Use get_number_or_range.
	(kill_inferior_command): Ditto.
	(remove_inferior_command): Ditto.
	(initialize_inferiors): Make command names plural.
	Update help strings.

2011-02-25  Michael Snyder  <msnyder@@vmware.com>

	* gdb.texinfo (Inferiors and Programs): Update commands to show
	that they can accept multiple arguments.

2011-02-25  Michael Snyder  <msnyder@@vmware.com>

	* gdb.multi/base.exp: Add test for remove-inferiors.
@
text
@d1 1
a1 1
# Copyright 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.9.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2009-2012 Free Software Foundation, Inc.
@


1.8
log
@2011-02-25  Michael Snyder  <msnyder@@vmware.com>

	* inferior.c (print_inferior): Accept a string instead of an int
	for requested_inferiors, and use get_number_or_range to parse it.
	(info_inferiors_command): Pass args string to print_inferior.
	(initialize_inferiors): Change help string for info inferiors.
	* inferior.h (print_inferior): Export prototype change.

2011-02-25  Michael Snyder  <msnyder@@vmware.com>

	* gdb.multi/base.exp: Add tests for info inferiors with args.
@
text
@d159 31
@


1.7
log
@run copyright.sh for 2011.
@
text
@d64 54
@


1.6
log
@	* gdb.multi/base.exp, gdb.multi/bkpt-multi-exec.exp: Use
	clean_restart, make sure every test has a distinct message, and
	that messages don't include the executable' full path.
@
text
@d1 1
a1 1
# Copyright 2009, 2010 Free Software Foundation, Inc.
@


1.5
log
@2010-06-08  Michael Snyder  <msnyder@@vmware.com>

	* gdb.ada/assign_1.exp: Use ".*" instead of "" as wildcard regexp.
	* gdb.ada/boolean_expr.exp:
	* gdb.ada/frame_args.exp: Ditto.
	* gdb.ada/lang_switch.exp: Ditto.
	* gdb.ada/ptype_arith_binop.exp: Ditto.
	* gdb.ada/ref_param.exp: Ditto.
	* gdb.ada/type_coercion.exp:Ditto.

	* gdb.asm/asm-source.exp: Ditto.

	* gdb.base/attach.exp: Ditto.
	* gdb.base/bitfields2.exp: Ditto.
	* gdb.base/call-signal-resume.exp: Ditto.
	* gdb.base/callfuncs.exp: Ditto.
	* gdb.base/commands.exp: Ditto.
	* gdb.base/dbx.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* gdb.base/dump.exp: Ditto.
	* gdb.base/exprs.exp: Ditto.
	* gdb.base/freebpcmd.exp: Ditto.
	* gdb.base/interrupt.exp: Ditto.
	* gdb.base/list.exp: Ditto.
	* gdb.base/long_long.exp: Ditto.
	* gdb.base/maint.exp: Ditto.
	* gdb.base/ptype.exp: Ditto.
	* gdb.base/return.exp: Ditto.
	* gdb.base/setshow.exp: Ditto.
	* gdb.base/sigbpt.exp: Ditto.
	* gdb.base/sigrepeat.exp: Ditto.

	* gdb.cp/classes.exp: Ditto.

	* gdb.dwarf2/dw2-restore.exp: Ditto.

	* gdb.gdb/selftest.exp: Ditto.

	* gdb.multi/base.exp: Ditto.
	* gdb.multi/bkpt-multi-exec.exp: Ditto.

	* gdb.python/py-block.exp: Ditto.
	* gdb.python/py-prettyprint.exp: Ditto.
	* gdb.python/py-template.exp: Ditto.

	* gdb.server/ext-attach.exp: Ditto.
	* gdb.server/ext-run.exp: Ditto.
	* gdb.server/server-mon.exp: Ditto.

	* gdb.threads/fork-thread-pending.exp: Ditto.
	* gdb.threads/hand-call-in-threads.exp: Ditto.
	* gdb.threads/interrupted-hand-call.exp: Ditto.
	* gdb.threads/linux-dp.exp: Ditto.
	* gdb.threads/manythreads.exp: Ditto.
	* gdb.threads/print-threads.exp: Ditto.
	* gdb.threads/pthreads.exp: Ditto.
	* gdb.threads/schedlock.exp: Ditto.
	* gdb.threads/thread-unwindonsignal.exp: Ditto.
	* gdb.threads/threadapply.exp: Ditto.
@
text
@d45 1
a45 4
gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile1}
d49 3
a51 3
gdb_test "add-inferior" "Added inferior 2.*"
gdb_test "inferior 2" "Switching to inferior 2.*"
gdb_test "file ${binfile2}" ".*"
d55 3
a57 1
gdb_test "add-inferior -exec ${binfile3}"
d66 9
a74 2
gdb_test "inferior 1"
gdb_test "info functions commonfun" "${srcfile1}.*"
d76 1
a76 5
gdb_test "inferior 3"
gdb_test "info functions commonfun" "${srcfile3}.*"


gdb_test "inferior 1"
d80 1
a80 1
gdb_test "list commonfun" "from hello.*"
d87 1
a87 1
gdb_test "inferior 3"
d93 1
a93 1
gdb_test "list commonfun" "from goodbye.*"
d97 1
a97 1
gdb_test "inferior 1"
@


1.4
log
@2010-06-02  Michael Snyder  <msnyder@@vmware.com>

	* gdb.dwarf2/dw2-basic.exp: Use gdb_test_no_output.
	* gdb.dwarf2/dw2-compressed.exp: Ditto.
	* gdb.dwarf2/dw2-intercu.exp: Ditto.
	* gdb.dwarf2/dw2-intermix.exp: Ditto.
	* gdb.dwarf2/dw2-producer.exp: Ditto.
	* gdb.dwarf2/mac-fileno.exp: Ditto.

	* gdb.gdb/observer.exp: Use gdb_test_no_output.
	* gdb.gdb/selftest.exp: Ditto.

	* gdb.multi/base.exp: Use gdb_test_no_output.

	* gdb.opt/inline-cmds.exp: Use gdb_test_no_output.
@
text
@d54 1
a54 1
gdb_test "file ${binfile2}" ""
d101 1
a101 1
gdb_test "break hello" ""
@


1.3
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d76 1
a76 1
gdb_test "set listsize 1" ""
@


1.2
log
@Adding files to HEAD that cvs had declared dead due to existing on
the branch only.

       gdb/testsuite/
	* gdb.base/foll-vfork.exp: Adjust to spell out "follow-fork".
	* gdb.base/foll-exec.exp: Adjust to expect a process id before
	"Executing new program".
	* gdb.base/foll-fork.exp: Adjust to spell out "follow-fork".
	* gdb.base/multi-forks.exp: Ditto.  Adjust to the inferior being
	left listed after having been killed.
	* gdb.base/attach.exp: Adjust to spell out "symbol-file".
	* gdb.base/maint.exp: Adjust test.

	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* gdb.multi/Makefile.in: New.
	* gdb.multi/base.exp: New.
	* gdb.multi/goodbye.c: New.
	* gdb.multi/hangout.c: New.
	* gdb.multi/hello.c: New.
	* gdb.multi/bkpt-multi-exec.c: New.
	* gdb.multi/bkpt-multi-exec.exp: New.
	* gdb.multi/crashme.c: New.
@
text
@d1 1
a1 1
# Copyright 2009 Free Software Foundation, Inc.
@


1.1
log
@file base.exp was initially added on branch multiprocess-20081120-branch.
@
text
@d1 102
@


1.1.2.1
log
@2008-11-20  Stan Shebs  <stan@@codesourcery.com>

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* gdb.multi/Makefile.in: New.
	* gdb.multi/hello.c, hangout.c, goodbye.c: New source files.
	* gdb.multi/base.exp: New file, basic multiprocess tests.
@
text
@a0 149
# Copyright 2008 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test multi-exec / multi-process features that work for all configurations,
# even ones that cannot run multiple processes simultaneously.

set testfile "base"

set exec1 "hello"
set srcfile1 ${exec1}.c
set binfile1 ${objdir}/${subdir}/${exec1}

set exec2 "hangout"
set srcfile2 ${exec2}.c
set binfile2 ${objdir}/${subdir}/${exec2}

set exec3 "goodbye"
set srcfile3 ${exec3}.c
set binfile3 ${objdir}/${subdir}/${exec3}

if { [prepare_for_testing ${testfile}.exp ${exec1} "${srcfile1}" {debug nowarnings}] } {
    return -1
}

if { [prepare_for_testing ${testfile}.exp ${exec2} "${srcfile2}" {debug nowarnings}] } {
    return -1
}

if { [prepare_for_testing ${testfile}.exp ${exec3} "${srcfile3}" {debug nowarnings}] } {
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile1}

send_gdb "add-file ${binfile2}\n"
gdb_expect {
    -re ".*A program is being debugged already.*Are you sure you want to add another executable file. .y or n. $" {
	send_gdb "y\n"
	gdb_expect {
	    -re ".*Load new symbol table from.* .y or n. $" {
		send_gdb "y\n"
		gdb_expect {
		    -re "Reading symbols from.*$gdb_prompt $" {}
		    timeout { fail "loading symbols (timeout)"; return }
		}
	    }
	    -re ".*gdb_prompt $" {}
	    timeout { fail "loading symbols (timeout)"; return }
	}
    }
    -re "$gdb_prompt $"	{ fail "add-file" }
    timeout		{ fail "(timeout) add-file" }
}

send_gdb "add-file ${binfile3}\n"
gdb_expect {
    -re ".*Load new symbol table from.* .y or n. $" {
	send_gdb "y\n"
	gdb_expect {
	    -re "Reading symbols from.*$gdb_prompt $" {}
	    timeout { fail "loading symbols (timeout)"; return }
	}
    }
    -re "$gdb_prompt $"	{ fail "add-file" }
    timeout		{ fail "(timeout) add-file" }
}

# Test that we have multiple executables.

gdb_test "info files" \
    "Symbols from .*Local exec file.*${exec1}.*${exec2}.*${exec3}.*"

# Test that we have multiple symbol tables.

gdb_test "info functions commonfun" "All functions.*${srcfile1}.*${srcfile3}.*"

# Test the focus command.

gdb_test "focus" "No focus has been set.*" "focus (initial default)"

gdb_test "focus ${exec1}" "Current exec is .*${exec1}.*"

gdb_test "focus ${exec2}" "Current exec is .*${exec2}.*"

gdb_test "focus" "Focus is .${exec2}..*(current exec is .*${exec2}).*" \
  "focus (after setting focus)"

gdb_test "focus ${exec2}" "Current exec is .*${exec2}.*" "focus ${exec2} (again)"

gdb_test "focus ${exec1}" "Current exec is .*${exec1}.*" "focus ${exec1} (again)"

gdb_test "set listsize 1" ""

gdb_test "list commonfun" "5\[ \t\]+int commonfun\[(\]\[)\] \{ bar\[(\]\[)\]; \}"

gdb_test "print hglob" "1"

gdb_test "print glob" "92" "print glob (${exec1})"

gdb_test "focus ${exec3}" "Current exec is .*${exec3}.*"

gdb_test "print gglob" "2"

gdb_test "print glob" "45" "print glob (${exec3})"

gdb_test "list commonfun" "41\[ \t\]+void commonfun\[(\]\[)\] \{ mailand\[(\]\[)\]; \}"

# Test the #-syntax.

gdb_test "list #${exec1}#commonfun" \
  "5\[ \t\]+int commonfun\[(\]\[)\] \{ bar\[(\]\[)\]; \}"

gdb_test "list #${exec3}#commonfun" \
  "41\[ \t\]+void commonfun\[(\]\[)\] \{ mailand\[(\]\[)\]; \}"

# Test execution.

gdb_test "focus ${exec1}" "Current exec is .*${exec1}.*" "focus ${exec1} (yet again)"

if { ![runto_main] } then {
    gdb_suppress_tests
}

gdb_test "break hello" ""

gdb_test "continue" "Breakpoint \[0-9\].*, hello.*"

gdb_test "break #hello#26" ""

gdb_test "break #goodbye#commonfun" ""

# Observe that breakpoints are per-executable.

gdb_test "continue" "Breakpoint \[0-9\], main.*26\[\t \]*glob = tmpx;.*"
@

