head	1.2;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.2
	gdb_7_6-2013-04-26-release:1.2
	gdb_7_6-branch:1.2.0.2
	gdb_7_6-2013-03-12-branchpoint:1.2;
locks; strict;
comment	@# @;


1.2
date	2013.01.01.06.33.06;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.24.18.06.10;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2012-2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib "ada.exp"

standard_ada_testfile foo

if {[gdb_compile_ada "${srcfile}" "${binfile}" executable [list debug]] != "" } {
  return -1
}

clean_restart ${testfile}

set bp_location [gdb_get_line_number "STOP1" ${testdir}/foo.adb]
runto "foo.adb:$bp_location"

# Print My_Object and My_Object.Ptr when Ptr is null...

gdb_test "print my_object" \
         "= \\(n => 3, ptr => 0x0, data => \\(3, 5, 8\\)\\)" \
         "print My_Object with null Ptr"

gdb_test "print my_object.ptr" \
         "= \\(foo.table_access\\) 0x0" \
         "print My_Object.Ptr when null"

# Same for My_P_Object...

gdb_test "print my_p_object" \
         "= \\(n => 3, ptr => 0x0, data => \\(3, 5, 8\\)\\)" \
         "print My_P_Object with null Ptr"

gdb_test "print my_p_object.ptr" \
         "\\(foo.p_table_access\\) 0x0" \
         "print My_P_Object.Ptr when null"

# Continue until the Ptr component of both objects get allocated.

set bp_location [gdb_get_line_number "STOP2" ${testdir}/foo.adb]

gdb_breakpoint "foo.adb:$bp_location"

gdb_test "continue" \
         "Breakpoint $decimal, foo \\(\\) at .*foo.adb:$decimal.*" \
         "continue to STOP2"

# Inspect My_Object again...

gdb_test "print my_object" \
         "= \\(n => 3, ptr => $hex, data => \\(3, 5, 8\\)\\)" \
         "print my_object after setting Ptr"

gdb_test "print my_object.ptr" \
         "\\(foo.table_access\\) $hex" \
         "print My_P_Object.Ptr when no longer null"

gdb_test "print my_object.ptr.all" \
         "= \\(13, 21, 34\\)"

# Same with My_P_Object...

gdb_test "print my_p_object" \
         "= \\(n => 3, ptr => $hex, data => \\(3, 5, 8\\)\\)" \
         "print my_p_object after setting Ptr"

gdb_test "print my_p_object.ptr" \
         "= \\(foo.p_table_access\\) $hex" \
         "print My_P_Object.Ptr when no longer null"

gdb_test "print my_p_object.ptr.all" \
         "\\(13, 21, 34\\)"

@


1.1
log
@[Ada] Pointers to unconstrained arrays inside variant record.

gdb/ChangeLog:

        * ada-lang.c (ada_template_to_fixed_record_type_1): Do not
        strip typedef layer when computing the fixed type's field type,
        only when computing its size.

gdb/testsuite/ChangeLog:

        * gdb.ada/unc_arr_ptr_in_var_rec: New testcase.
@
text
@d1 1
a1 1
# Copyright 2012 Free Software Foundation, Inc.
@

