head	1.9;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.8
	gdb_7_6-2013-04-26-release:1.8
	gdb_7_6-branch:1.8.0.2
	gdb_7_6-2013-03-12-branchpoint:1.8
	gdb_7_5_1-2012-11-29-release:1.7
	gdb_7_5-2012-08-17-release:1.7
	gdb_7_5-branch:1.7.0.2
	gdb_7_5-2012-07-18-branchpoint:1.7
	gdb_7_4_1-2012-04-26-release:1.6.2.1
	gdb_7_4-2012-01-24-release:1.6.2.1
	gdb_7_4-branch:1.6.0.2
	gdb_7_4-2011-12-13-branchpoint:1.6
	gdb_7_3_1-2011-09-04-release:1.5.2.1
	gdb_7_3-2011-07-26-release:1.5.2.1
	gdb_7_3-branch:1.5.0.2
	gdb_7_3-2011-04-01-branchpoint:1.5
	gdb_7_2-2010-09-02-release:1.3
	gdb_7_2-branch:1.3.0.4
	gdb_7_2-2010-07-07-branchpoint:1.3
	gdb_7_1-2010-03-18-release:1.3
	gdb_7_1-branch:1.3.0.2
	gdb_7_1-2010-02-18-branchpoint:1.3
	gdb_7_0_1-2009-12-22-release:1.2
	gdb_7_0-2009-10-06-release:1.2
	gdb_7_0-branch:1.2.0.4
	gdb_7_0-2009-09-16-branchpoint:1.2
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.2.0.2
	msnyder-checkpoint-072509-branchpoint:1.2
	arc-insight_6_8-branch:1.1.0.16
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.14
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.12
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.10
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.8
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.6
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.4
	msnyder-reverse-20080609-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.2
	gdb_6_8-2008-02-26-branchpoint:1.1;
locks; strict;
comment	@-- @;


1.9
date	2013.07.10.00.35.01;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2013.01.01.06.33.08;	author brobecke;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.04.08.17.30;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.01.17.03.52;	author brobecke;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2011.01.01.15.33.29;	author brobecke;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2010.12.29.08.02.59;	author brobecke;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.01.07.31.52;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.03.05.57.58;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.03.13.15.43;	author brobecke;	state Exp;
branches;
next	;

1.6.2.1
date	2012.01.06.04.43.44;	author brobecke;	state Exp;
branches;
next	;

1.5.2.1
date	2011.05.17.21.26.20;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[testsuite/Ada] Add testing of access to packed arrays.

This patch adds some tests that evidence a regression fixed by
the following patch from Pedro Alves:

    [PATCH] ada-lang.c:coerce_unspec_val_to_type: Preserve laziness
    http://www.sourceware.org/ml/gdb-patches/2013-07/msg00178.html

gdb/testsuite/ChangeLog:

        * gdb.ada/arrayptr/foo.adb: Add some code defining an access
        to a packed array.
        * gdb.ada/arrayptr.exp: Add a few tests using that new access
        to packed array.
@
text
@--  Copyright 2008-2013 Free Software Foundation, Inc.
--
--  This program is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.

with Pck; use Pck;

procedure Foo is
   type String_Access is access String;

   String_P : String_Access := new String'("Hello");
   Null_String : String_Access := null;

   --  Same situation, but constrained array.
   type Little_Array is array (1 .. 10) of Integer;
   type Little_Array_Ptr is access all Little_Array;
   Arr_Ptr: Little_Array_Ptr :=
     new Little_Array'(21, 22, 23, 24, 25, 26, 27, 28, 29, 30);

   -- Same as above, but with a packed array.
   type Small is range -64 .. 63;
   for Small'Size use 7;
   type Packed_Array is array (1..10) of Small;
   pragma Pack (Packed_Array);

   type Packed_Array_Ptr is access Packed_Array;
   PA_Ptr : Packed_Array_Ptr
      := new Packed_Array'(10, 20, 30, 40, 50, 60, 62, 63, -23, 42);
begin
   Do_Nothing (String_P'Address);  -- STOP
   Do_Nothing (Null_String'Address);
   Do_Nothing (Arr_Ptr'Address);
   Do_Nothing (PA_Ptr'Address);
end Foo;
@


1.8
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d29 10
d43 1
@


1.7
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
--  Copyright 2008-2012 Free Software Foundation, Inc.
@


1.6
log
@extend scope of testing in gdb.ada/arrayptr

We add testing of taking a slice of an array access.  And we also
introduce the same amount of testing, but with an access to a
constrained array.

gdb/testsuite/ChangeLog:

        * gdb.ada/arrayptr/foo.adb: Add access to constrained array.
        * gdb.ada/arrayptr.exp: Add new tests.
@
text
@d1 1
a1 1
--  Copyright 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.6.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
--  Copyright 2008-2012 Free Software Foundation, Inc.
@


1.5
log
@run copyright.sh for 2011.
@
text
@d23 6
d32 1
@


1.5.2.1
log
@extend scope of testing in gdb.ada/arrayptr

We add testing of taking a slice of an array access.  And we also
introduce the same amount of testing, but with an access to a
constrained array.

gdb/testsuite/ChangeLog:

        * gdb.ada/arrayptr/foo.adb: Add access to constrained array.
        * gdb.ada/arrayptr.exp: Add new tests.
@
text
@a22 6

   --  Same situation, but constrained array.
   type Little_Array is array (1 .. 10) of Integer;
   type Little_Array_Ptr is access all Little_Array;
   Arr_Ptr: Little_Array_Ptr :=
     new Little_Array'(21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
a25 1
   Do_Nothing (Arr_Ptr'Address);
@


1.4
log
@[Ada] print null array pointer as `0x0' rather than `(null)'

Trying to print a variable defined as an access to an unconstrained
array:

       type String_Access is access String;
       S1 : String_Access;

If that variable is null, then GDB prints its value in an odd way:

    (gdb) print S1
    $1 = (string_bug.string_access) (null)
                                    ^^^^^^

This patch changes the debugger behavior to print the pointer using
the same output we'd use for any null pointer:

    (gdb) print S1
    $1 = (string_bug.string_access) 0x0

It also adds an assert, helping us verify an assumption.

gdb/ChangeLog:

        * ada-valprint.c (ada_val_print_1): Print null array pointers as
        `0x0' rather than `(null)'.  Add assertion.

gdb/testsuite/ChangeLog:

        * gdb.ada/arrayptr/foo.adb: Add new local variable Null_String.
        * gdb.ada/arrayptr.exp: Add test printing that new variable.
@
text
@d1 1
a1 1
--  Copyright 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.3
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d22 1
d25 1
@


1.2
log
@        Updated copyright notices for most files.
@
text
@d1 1
a1 1
--  Copyright 2008, 2009 Free Software Foundation, Inc.
@


1.1
log
@        * gdb.ada/arrayptr/pck.ads, gdb.ada/arrayptr/pck.adb,
        gdb.ada/arrayptr/foo.adb: New files.
        * gdb.ada/arrayptr.exp: New testcase.
@
text
@d1 1
a1 1
--  Copyright 2008 Free Software Foundation, Inc.
@

