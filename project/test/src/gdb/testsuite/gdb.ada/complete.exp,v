head	1.11;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.9
	gdb_7_6-2013-04-26-release:1.9
	gdb_7_6-branch:1.9.0.2
	gdb_7_6-2013-03-12-branchpoint:1.9
	gdb_7_5_1-2012-11-29-release:1.7
	gdb_7_5-2012-08-17-release:1.7
	gdb_7_5-branch:1.7.0.2
	gdb_7_5-2012-07-18-branchpoint:1.7
	gdb_7_4_1-2012-04-26-release:1.5.4.1
	gdb_7_4-2012-01-24-release:1.5.4.1
	gdb_7_4-branch:1.5.0.4
	gdb_7_4-2011-12-13-branchpoint:1.5
	gdb_7_3_1-2011-09-04-release:1.5
	gdb_7_3-2011-07-26-release:1.5
	gdb_7_3-branch:1.5.0.2
	gdb_7_3-2011-04-01-branchpoint:1.5
	gdb_7_2-2010-09-02-release:1.3
	gdb_7_2-branch:1.3.0.4
	gdb_7_2-2010-07-07-branchpoint:1.3
	gdb_7_1-2010-03-18-release:1.3
	gdb_7_1-branch:1.3.0.2
	gdb_7_1-2010-02-18-branchpoint:1.3
	gdb_7_0_1-2009-12-22-release:1.2
	gdb_7_0-2009-10-06-release:1.2
	gdb_7_0-branch:1.2.0.4
	gdb_7_0-2009-09-16-branchpoint:1.2
	arc-sim-20090309:1.1
	msnyder-checkpoint-072509-branch:1.2.0.2
	msnyder-checkpoint-072509-branchpoint:1.2
	arc-insight_6_8-branch:1.1.0.16
	arc-insight_6_8-branchpoint:1.1
	insight_6_8-branch:1.1.0.14
	insight_6_8-branchpoint:1.1
	reverse-20081226-branch:1.1.0.12
	reverse-20081226-branchpoint:1.1
	multiprocess-20081120-branch:1.1.0.10
	multiprocess-20081120-branchpoint:1.1
	reverse-20080930-branch:1.1.0.8
	reverse-20080930-branchpoint:1.1
	reverse-20080717-branch:1.1.0.6
	reverse-20080717-branchpoint:1.1
	msnyder-reverse-20080609-branch:1.1.0.4
	msnyder-reverse-20080609-branchpoint:1.1
	gdb_6_8-2008-03-27-release:1.1
	gdb_6_8-branch:1.1.0.2
	gdb_6_8-2008-02-26-branchpoint:1.1;
locks; strict;
comment	@# @;


1.11
date	2013.05.16.10.13.33;	author palves;	state Exp;
branches;
next	1.10;

1.10
date	2013.05.16.07.02.43;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.01.06.33.04;	author brobecke;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.26.18.43.01;	author tromey;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.16.16.21.43;	author palves;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.04.08.17.29;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.06.10.35.00;	author brobecke;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2011.01.01.15.33.28;	author brobecke;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.01.07.31.51;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.03.05.57.58;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.05.22.20.51;	author brobecke;	state Exp;
branches;
next	;

1.5.4.1
date	2012.01.06.04.43.42;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.11
log
@gdb.ada/complete.exp: Fix FIXME.

2013-05-16  Pedro Alves  <palves@@redhat.com>

	* gdb.ada/complete.exp (test_gdb_no_completion): Fix typo in
	comment.  Use gdb_test_no_output.
@
text
@# Copyright 2005-2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib "ada.exp"

standard_ada_testfile foo

if {[gdb_compile_ada "${srcfile}" "${binfile}" executable [list debug ]] != "" } {
  return -1
}

clean_restart ${testfile}

set bp_location [gdb_get_line_number "START" ${testdir}/foo.adb]
runto "foo.adb:$bp_location"

set eol "\[\r\n\]*"

# A convenience function that verifies that the "complete EXPR" command
# returns the EXPECTED_OUTPUT.

proc test_gdb_complete { expr expected_output } {
    gdb_test "complete p $expr" \
             "$expected_output" \
             "complete p $expr"
}

# A convenience function that verifies that the "complete EXPR" command
# does not generate any output.

proc test_gdb_no_completion { expr } {
    gdb_test_no_output "complete p $expr"
}

# A convenience function that joins all the arguments together,
# with a regexp that matches zero-or-more end of lines in between
# each argument.  This function is ideal to write the expected output
# of a GDB command that generates more than a couple of lines, as
# this allows us to write each line as a separate string, which is
# easier to read by a human being.

proc multi_line { args } {
    return [join $args "\[\r\n\]*"]
}
# Try a global variable, only one match should be found:

test_gdb_complete "my_glob" \
                  "p my_global_variable"

# A global variable, inside a nested package:

test_gdb_complete "insi" \
                  "p inside_variable"

# A global variable inside a nested package, but only giving part of
# the fully qualified name (top level package name missing):

test_gdb_no_completion "inner.insi"

# An incomplete nested package name, were lies a single symbol:
test_gdb_complete "pck.inne" \
                  "p pck.inner.inside_variable"

# A fully qualified symbol name, mangled...
test_gdb_complete "pck__inner__ins" \
                  "p pck__inner__inside_variable"

# A fully qualified symbol name...
test_gdb_complete "pck.inner.ins" \
                  "p pck.inner.inside_variable"

# Make sure that "inside" is not returned as a possible completion
# for "side"...
test_gdb_no_completion "side"

# Verify that "Exported_Capitalized" is not returned as a match for
# "exported", since its symbol name contains capital letters.
test_gdb_no_completion "exported"

# check the "<...>" notation.
test_gdb_complete "<Exported" \
                  "p <Exported_Capitalized>"

# A global symbol, created by the binder, that starts with __gnat...
test_gdb_complete "__gnat_ada_main_progra" \
                  "p __gnat_ada_main_program_name"

# A global symbol, created by the binder, that starts with __gnat,
# and using the '<' notation.
test_gdb_complete "<__gnat_ada_main_prog" \
                  "p <__gnat_ada_main_program_name>"

# A local variable
test_gdb_complete "some" \
                  "p some_local_variable"

# A local variable variable, but in a different procedure. No match
# should be returned.
test_gdb_no_completion "not_in_sco"

# A fully qualified variable name that doesn't exist...
test_gdb_no_completion "pck.ins"

# A fully qualified variable name that does exist...
test_gdb_complete "pck.my" \
                  "p pck.my_global_variable"

# A fully qualified package name
test_gdb_complete "pck.inne" \
                  "p pck.inner.inside_variable"

# A fully qualified package name, with a dot at the end
test_gdb_complete "pck.inner." \
                  "p pck.inner.inside_variable"

# Two matches, from the global scope:
test_gdb_complete "local_ident" \
                  [multi_line "p local_identical_one" \
                              "p local_identical_two" ]

# Two matches, from the global scope, but using fully qualified names:
test_gdb_complete "pck.local_ident" \
                  [multi_line "p pck.local_identical_one" \
                              "p pck.local_identical_two" ]

# Two matches, from the global scope, but using mangled fully qualified
# names:
test_gdb_complete "pck__local_ident" \
                  [multi_line "p pck__local_identical_one" \
                              "p pck__local_identical_two" ]

# Two matches, one from the global scope, the other from the local scope:
test_gdb_complete "external_ident" \
                  [multi_line "p external_identical_one" \
                              "p external_identical_two" ]

# Complete on the name of package. 
test_gdb_complete "pck" \
                  [multi_line "(p pck\\.ad\[sb\])?" \
                              "(p pck\\.ad\[sb\])?" \
                              "p pck.external_identical_one" \
                              "p pck.inner.inside_variable" \
                              "p pck.local_identical_one" \
                              "p pck.local_identical_two" \
                              "p pck.my_global_variable" \
                              "p pck.proc" ]

# Complete on the name of a package followed by a dot:
test_gdb_complete "pck." \
                  [multi_line "(p pck\\.ad\[sb\])?" \
                              "(p pck\\.ad\[sb\])?" \
                              "p pck.external_identical_one" \
                              "p pck.inner.inside_variable" \
                              "p pck.local_identical_one" \
                              "p pck.local_identical_two" \
                              "p pck.my_global_variable" \
                              "p pck.proc" ]

# Complete a mangled symbol name, but using the '<...>' notation.
test_gdb_complete "<pck__my" \
                  "p <pck__my_global_variable>"

# Very simple completion, but using the interactive form, this time.
# The verification we are trying to make involves the event loop,
# and using the "complete" command is not sufficient to reproduce
# the original problem.
set test "interactive complete 'print some'"
send_gdb "print some\t"
gdb_test_multiple "" "$test" {
    -re "^print some_local_variable $" {
        send_gdb "\n"
        gdb_test_multiple "" "$test" {
            -re " = 1$eol$gdb_prompt $" {
                pass "$test"
            }
        }
    }
}
@


1.10
log
@Missing do_cleanups in ada_make_symbol_completion_list.

This results in an internal-warning when trying the completion
when in Ada mode:

    (gdb) b simple<TAB>
    /[...]/cleanups.c:265: internal-warning: restore_my_cleanups has found a stale cleanup
    A problem internal to GDB has been detected,
    further debugging may prove unreliable.
    Quit this debugging session? (y or n)

gdb/ChangeLog:

        * ada-lang.c (ada_make_symbol_completion_list): Make sure
        all cleanups are done before returning from this function.

gdb/testsuite/ChangeLog:

        * gdb.ada/complete.exp: Add test verifying completion using
        the "tab" key.
@
text
@d41 1
a41 1
# does not genearte any output.
d44 1
a44 4
    # FIXME: brobecker/2007-12-27: How do you verify that the command
    # output is actually really empty???  For now, the following does
    # not verify this at all:
    test_gdb_complete "$expr" ""
@


1.9
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d178 16
a193 1

@


1.8
log
@	* lib/ada.exp (standard_ada_testfile): New proc.
	* gdb.ada/aliased_array.exp: Use standard_ada_testfile.
	* gdb.ada/array_bounds.exp: Use standard_ada_testfile.
	* gdb.ada/array_return.exp: Use standard_ada_testfile.
	* gdb.ada/array_subscript_addr.exp: Use standard_ada_testfile.
	* gdb.ada/arrayidx.exp: Use standard_ada_testfile.
	* gdb.ada/arrayparam.exp: Use standard_ada_testfile.
	* gdb.ada/arrayptr.exp: Use standard_ada_testfile.
	* gdb.ada/atomic_enum.exp: Use standard_ada_testfile.
	* gdb.ada/bad-task-bp-keyword.exp: Use standard_ada_testfile.
	* gdb.ada/bp_enum_homonym.exp: Use standard_ada_testfile.
	* gdb.ada/bp_on_var.exp: Use standard_ada_testfile.
	* gdb.ada/bp_range_type.exp: Use standard_ada_testfile.
	* gdb.ada/call_pn.exp: Use standard_ada_testfile.
	* gdb.ada/catch_ex.exp: Use standard_ada_testfile.
	* gdb.ada/char_enum.exp: Use standard_ada_testfile.
	* gdb.ada/char_param.exp: Use standard_ada_testfile.
	* gdb.ada/complete.exp: Use standard_ada_testfile.
	* gdb.ada/cond_lang.exp: Use standard_ada_testfile,
	standard_output_file.
	* gdb.ada/dyn_loc.exp: Use standard_ada_testfile.
	* gdb.ada/enum_idx_packed.exp: Use standard_ada_testfile.
	* gdb.ada/exec_changed.exp: Use standard_ada_testfile,
	standard_output_file.
	* gdb.ada/exprs.exp: Use standard_ada_testfile.
	* gdb.ada/fixed_cmp.exp: Use standard_ada_testfile.
	* gdb.ada/fixed_points.exp: Use standard_ada_testfile.
	* gdb.ada/formatted_ref.exp: Use standard_ada_testfile.
	* gdb.ada/frame_args.exp: Use standard_ada_testfile.
	* gdb.ada/fullname_bp.exp: Use standard_ada_testfile.
	* gdb.ada/fun_addr.exp: Use standard_ada_testfile.
	* gdb.ada/fun_in_declare.exp: Use standard_ada_testfile.
	* gdb.ada/funcall_param.exp: Use standard_ada_testfile.
	* gdb.ada/homonym.exp: Use standard_ada_testfile.
	* gdb.ada/info_locals_renaming.exp: Use standard_ada_testfile.
	* gdb.ada/int_deref.exp: Use standard_ada_testfile.
	* gdb.ada/interface.exp: Use standard_ada_testfile.
	* gdb.ada/lang_switch.exp: Use standard_ada_testfile,
	standard_output_file
	* gdb.ada/mi_catch_ex.exp: Use standard_ada_testfile.
	* gdb.ada/mi_task_arg.exp: Use standard_ada_testfile.
	* gdb.ada/mi_task_info.exp: Use standard_ada_testfile.
	* gdb.ada/mod_from_name.exp: Use standard_ada_testfile.
	* gdb.ada/nested.exp: Use standard_ada_testfile.
	* gdb.ada/null_array.exp: Use standard_ada_testfile.
	* gdb.ada/null_record.exp: Use standard_ada_testfile.
	* gdb.ada/operator_bp.exp: Use standard_ada_testfile.
	* gdb.ada/packed_array.exp: Use standard_ada_testfile.
	* gdb.ada/packed_tagged.exp: Use standard_ada_testfile.
	* gdb.ada/print_chars.exp: Use standard_ada_testfile.
	* gdb.ada/print_pc.exp: Use standard_ada_testfile.
	* gdb.ada/ptr_typedef.exp: Use standard_ada_testfile.
	* gdb.ada/ptype_field.exp: Use standard_ada_testfile.
	* gdb.ada/ptype_tagged_param.exp: Use standard_ada_testfile.
	* gdb.ada/rec_return.exp: Use standard_ada_testfile.
	* gdb.ada/ref_param.exp: Use standard_ada_testfile.
	* gdb.ada/ref_tick_size.exp: Use standard_ada_testfile.
	* gdb.ada/same_enum.exp: Use standard_ada_testfile.
	* gdb.ada/set_pckd_arr_elt.exp: Use standard_ada_testfile.
	* gdb.ada/small_reg_param.exp: Use standard_ada_testfile.
	* gdb.ada/start.exp: Use standard_ada_testfile.
	* gdb.ada/str_ref_cmp.exp: Use standard_ada_testfile.
	* gdb.ada/sym_print_name.exp: Use standard_ada_testfile.
	* gdb.ada/taft_type.exp: Use standard_ada_testfile.
	* gdb.ada/tagged.exp: Use standard_ada_testfile.
	* gdb.ada/tagged_not_init.exp: Use standard_ada_testfile.
	* gdb.ada/task_bp.exp: Use standard_ada_testfile.
	* gdb.ada/tasks.exp: Use standard_ada_testfile.
	* gdb.ada/tick_last_segv.exp: Use standard_ada_testfile.
	* gdb.ada/type_coercion.exp: Use standard_ada_testfile.
	* gdb.ada/uninitialized_vars.exp: Use standard_ada_testfile.
	* gdb.ada/variant_record_packed_array.exp: Use standard_ada_testfile.
	* gdb.ada/watch_arg.exp: Use standard_ada_testfile.
	* gdb.ada/whatis_array_val.exp: Use standard_ada_testfile.
	* gdb.ada/widewide.exp: Use standard_ada_testfile.
@
text
@d1 1
a1 1
# Copyright 2005, 2007, 2009-2012 Free Software Foundation, Inc.
@


1.7
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d18 1
a18 4
set testdir "complete"
set testfile "${testdir}/foo"
set srcfile ${srcdir}/${subdir}/${testfile}.adb
set binfile ${objdir}/${subdir}/${testfile}
a19 1
file mkdir ${objdir}/${subdir}/${testdir}
@


1.6
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a15 4
if $tracelevel then {
    strace $tracelevel
}

@


1.5
log
@[testsuite/gdb.ada] simplify some testcases by using clean_restart.

gdb/testsuite/ChangeLog:

        * gdb.ada/array_bounds.exp, gdb.ada/array_return.exp,
        gdb.ada/array_subscript_addr.exp, gdb.ada/arrayidx.exp,
        gdb.ada/arrayparam.exp, gdb.ada/arrayptr.exp,
        gdb.ada/atomic_enum.exp, gdb.ada/call_pn.exp,
        gdb.ada/catch_ex.exp, gdb.ada/char_param.exp,
        gdb.ada/complete.exp, gdb.ada/exprs.exp, gdb.ada/fixed_cmp.exp,
        gdb.ada/fixed_points.exp, gdb.ada/formatted_ref.exp,
        gdb.ada/frame_args.exp, gdb.ada/fun_addr.exp,
        gdb.ada/fun_in_declare.exp, gdb.ada/funcall_param.exp,
        gdb.ada/homonym.exp, gdb.ada/int_deref.exp,
        gdb.ada/interface.exp, gdb.ada/lang_switch.exp,
        gdb.ada/mod_from_name.exp, gdb.ada/nested.exp,
        gdb.ada/null_array.exp, gdb.ada/null_record.exp,
        gdb.ada/packed_array.exp, gdb.ada/packed_tagged.exp,
        gdb.ada/print_chars.exp, gdb.ada/print_pc.exp,
        gdb.ada/ptype_field.exp, gdb.ada/ptype_tagged_param.exp,
        gdb.ada/rec_return.exp, gdb.ada/ref_param.exp,
        gdb.ada/ref_tick_size.exp, gdb.ada/start.exp,
        gdb.ada/str_ref_cmp.exp, gdb.ada/sym_print_name.exp,
        gdb.ada/taft_type.exp, gdb.ada/tagged.exp, gdb.ada/tasks.exp,
        gdb.ada/tick_last_segv.exp, gdb.ada/type_coercion.exp,
        gdb.ada/uninitialized_vars.exp,
        gdb.ada/variant_record_packed_array.exp, gdb.ada/watch_arg.exp:
        Simplify by using clean_restart.
@
text
@d1 1
a1 1
# Copyright 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.5.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2005, 2007, 2009-2012 Free Software Foundation, Inc.
@


1.4
log
@run copyright.sh for 2011.
@
text
@d32 1
a32 4
gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}
@


1.3
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d1 1
a1 1
# Copyright 2005, 2007, 2009, 2010 Free Software Foundation, Inc.
@


1.2
log
@        Updated copyright notices for most files.
@
text
@d1 1
a1 1
# Copyright 2005, 2007, 2009 Free Software Foundation, Inc.
@


1.1
log
@        * gdb.ada/complete/pck.ads, gdb.ada/complete/pck.adb,
        gdb.ada/complete/foo.adb: New files.
        * gdb.ada/complete.exp: New testcase.
@
text
@d1 1
a1 1
# Copyright 2005, 2007 Free Software Foundation, Inc.
@

