head	1.2;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.2
	gdb_7_6-2013-04-26-release:1.2
	gdb_7_6-branch:1.2.0.2
	gdb_7_6-2013-03-12-branchpoint:1.2;
locks; strict;
comment	@-- @;


1.2
date	2013.01.01.06.33.22;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.24.18.06.10;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@--  Copyright 2012-2013 Free Software Foundation, Inc.
--
--  This program is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.

with Pck; use Pck;

procedure Foo is

   type Table is array (Positive range <>) of Integer;
   type Table_Access is access Table;

   type Object (N : Integer) is record
       Ptr  : Table_Access;
       Data : Table (1 .. N);
   end record;

   My_Object : Object := (N => 3, Ptr => null, Data => (3, 5, 8));

   --  Same as above, but with a pointer to an unconstrained packed array.

   type Byte is range 0 .. 255;

   type P_Table is array (Positive range <>) of Byte;
   pragma Pack (P_Table);
   type P_Table_Access is access P_Table;

   type P_Object (N : Integer) is record
       Ptr  : P_Table_Access;
       Data : P_Table (1 .. N);
   end record;

   My_P_Object : P_Object := (N => 3, Ptr => null, Data => (3, 5, 8));

begin
   My_Object.Ptr := new Table'(13, 21, 34);    -- STOP1
   My_P_Object.Ptr := new P_Table'(13, 21, 34);
   Do_Nothing (My_Object'Address);             -- STOP2
   Do_Nothing (My_P_Object'Address);
end Foo;

@


1.1
log
@[Ada] Pointers to unconstrained arrays inside variant record.

gdb/ChangeLog:

        * ada-lang.c (ada_template_to_fixed_record_type_1): Do not
        strip typedef layer when computing the fixed type's field type,
        only when computing its size.

gdb/testsuite/ChangeLog:

        * gdb.ada/unc_arr_ptr_in_var_rec: New testcase.
@
text
@d1 1
a1 1
--  Copyright 2012 Free Software Foundation, Inc.
@

