head	1.7;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.7
	gdb_7_6-2013-04-26-release:1.7
	gdb_7_6-branch:1.7.0.2
	gdb_7_6-2013-03-12-branchpoint:1.7
	gdb_7_5_1-2012-11-29-release:1.5
	gdb_7_5-2012-08-17-release:1.5
	gdb_7_5-branch:1.5.0.2
	gdb_7_5-2012-07-18-branchpoint:1.5
	gdb_7_4_1-2012-04-26-release:1.2.4.1
	gdb_7_4-2012-01-24-release:1.2.4.1
	gdb_7_4-branch:1.2.0.4
	gdb_7_4-2011-12-13-branchpoint:1.2
	gdb_7_3_1-2011-09-04-release:1.2
	gdb_7_3-2011-07-26-release:1.2
	gdb_7_3-branch:1.2.0.2
	gdb_7_3-2011-04-01-branchpoint:1.2;
locks; strict;
comment	@# @;


1.7
date	2013.01.01.06.41.23;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.22.14.27.48;	author tromey;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.22.16.44.15;	author tromey;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.16.16.21.50;	author palves;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.04.08.17.54;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.01.15.33.46;	author brobecke;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2010.12.09.16.09.54;	author tromey;	state Exp;
branches;
next	;

1.2.4.1
date	2012.01.06.04.44.08;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2009-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib "java.exp"

standard_testfile .java
if  { [compile_java_from_source $srcdir/$subdir/$srcfile $binfile "-g"] != "" } {
    untested "Couldn't compile ${srcdir}/$subdir/${srcfile}"
    return -1
}

# Start with a fresh gdb.

clean_restart $testfile

set line [gdb_get_line_number "break here" $testfile.java]
if ![runto "$testfile.java:$line"] then {
    perror "couldn't run to jnpe.main"
    continue
} 

if {![skip_unwinder_tests]} {
    unsupported "jnpe.exp could not find _Unwind_DebugHook"
    return -1
}

gdb_test "handle SIGSEGV nostop noprint" \
  "SIGSEGV.*fault" \
  "disable SIGSEGV for next-over-NPE"

# The line where we stop differs according to gcj; just check that we
# did not already execute the catch point.  This is done in a somewhat
# funny way due to other gcj debuginfo oddities that don't
# meaningfully affect the user's experience.

gdb_test "next" \
  ".*" \
  "next over NPE"

set line [gdb_get_line_number "stop point"]
gdb_breakpoint $line
gdb_test "continue" "Continuing.\[\r\n\]*success\[\r\n\]*Breakpoint .*:$line\[\r\n\]*.*// stop point\[\r\n\]*" \
  "continue to success for next-over-NPE"
@


1.6
log
@	* lib/gdb.exp (skip_unwinder_tests): New proc.
	* gdb.cp/nextoverthrow.exp: Use skip_unwinder_tests.
	* gdb.java/jnpe.exp: Use skip_unwinder_tests.
@
text
@d1 1
a1 1
# Copyright 2009-2012 Free Software Foundation, Inc.
@


1.5
log
@	* gdb.java/jmain.exp: Use standard_testfile.
	* gdb.java/jmisc.exp: Use standard_testfile.
	* gdb.java/jnpe.exp: Use standard_testfile.
	* gdb.java/jprint.exp: Use standard_testfile.
@
text
@d34 1
a34 14
# See whether we have the needed unwinder hooks.
set ok 1
gdb_test_multiple "print _Unwind_DebugHook" "check for unwinder hook in java" {
    -re "= .*_Unwind_DebugHook.*\r\n$gdb_prompt $" {
	pass "check for unwinder hook in java"
    }
    -re "No symbol .* in current context.?\r\n$gdb_prompt $" {
	# Pass the test so we don't get bogus fails in the results.
	setup_xfail *-*-*
	fail "check for unwinder hook in java"
	set ok 0
    }
}
if {!$ok} {
@


1.4
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d18 2
a19 4
set testfile "jnpe"
set srcfile ${testfile}.java
set binfile ${objdir}/${subdir}/${testfile}
if  { [compile_java_from_source ${srcdir}/$subdir/${srcfile} ${binfile} "-g"] != "" } {
@


1.3
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a15 4
if $tracelevel then {
  strace $tracelevel
}

@


1.2
log
@run copyright.sh for 2011.
@
text
@d1 1
a1 1
# Copyright 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.2.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2009-2012 Free Software Foundation, Inc.
@


1.1
log
@gdb
	PR c++/9593:
	* thread.c (clear_thread_inferior_resources): Call
	delete_longjmp_breakpoint.
	* infrun.c (handle_inferior_event): Handle exception breakpoints.
	(handle_inferior_event): Likewise.
	(insert_exception_resume_breakpoint): New function.
	(check_exception_resume): Likewise.
	* inferior.h (delete_longjmp_breakpoint_cleanup): Declare.
	* infcmd.c (delete_longjmp_breakpoint_cleanup): No longer static.
	(step_1): Set thread's initiating frame.
	(until_next_continuation): New function.
	(until_next_command): Support exception breakpoints.
	(finish_command_continuation): Delete longjmp breakpoint.
	(finish_forward): Support exception breakpoints.
	* gdbthread.h (struct thread_info) <initiating_frame>: New field.
	* breakpoint.h (enum bptype) <bp_exception, bp_exception_resume,
	bp_exception_master>: New constants.
	(struct bpstat_what) <is_longjmp>: New field.
	(set_longjmp_breakpoint): Update.
	* breakpoint.c (create_exception_master_breakpoint): New function.
	(update_breakpoints_after_exec): Handle bp_exception_master.  Call
	create_exception_master_breakpoint.
	(print_it_typical): Handle bp_exception_master, bp_exception.
	(bpstat_stop_status): Handle bp_exception_master.
	(bpstat_what): Handle bp_exception_master, bp_exception,
	bp_exception_resume.
	(bptype_string): Likewise.
	(print_one_breakpoint_location): Likewise.
	(allocate_bp_location): Likewise.
	(set_longjmp_breakpoint): Handle exception breakpoints.  Change
	interface.
	(delete_longjmp_breakpoint): Handle exception breakpoints.
	(mention): Likewise.
	(struct until_break_command_continuation_args) <thread_num>: New
	field.
	(until_break_command_continuation): Call
	delete_longjmp_breakpoint.
	(until_break_command): Support exception breakpoints.
	(delete_command): Likewise.
	(breakpoint_re_set_one): Likewise.
	(breakpoint_re_set): Likewise.
gdb/testuite
	* gdb.java/jnpe.java: New file.
	* gdb.java/jnpe.exp: New file.
	* gdb.cp/nextoverthrow.exp: New file.
	* gdb.cp/nextoverthrow.cc: New file.
@
text
@d1 1
a1 1
# Copyright 2009, 2010 Free Software Foundation, Inc.
@

