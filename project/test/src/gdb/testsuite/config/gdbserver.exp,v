head	1.20;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.20
	gdb_7_6-2013-04-26-release:1.20
	gdb_7_6-branch:1.20.0.2
	gdb_7_6-2013-03-12-branchpoint:1.20
	gdb_7_5_1-2012-11-29-release:1.19
	gdb_7_5-2012-08-17-release:1.19
	gdb_7_5-branch:1.19.0.2
	gdb_7_5-2012-07-18-branchpoint:1.19
	gdb_7_4_1-2012-04-26-release:1.18.4.1
	gdb_7_4-2012-01-24-release:1.18.4.1
	gdb_7_4-branch:1.18.0.4
	gdb_7_4-2011-12-13-branchpoint:1.18
	gdb_7_3_1-2011-09-04-release:1.18
	gdb_7_3-2011-07-26-release:1.18
	gdb_7_3-branch:1.18.0.2
	gdb_7_3-2011-04-01-branchpoint:1.18
	gdb_7_2-2010-09-02-release:1.17
	gdb_7_2-branch:1.17.0.4
	gdb_7_2-2010-07-07-branchpoint:1.17
	gdb_7_1-2010-03-18-release:1.17
	gdb_7_1-branch:1.17.0.2
	gdb_7_1-2010-02-18-branchpoint:1.17
	gdb_7_0_1-2009-12-22-release:1.16
	gdb_7_0-2009-10-06-release:1.16
	gdb_7_0-branch:1.16.0.4
	gdb_7_0-2009-09-16-branchpoint:1.16
	arc-sim-20090309:1.15
	msnyder-checkpoint-072509-branch:1.16.0.2
	msnyder-checkpoint-072509-branchpoint:1.16
	arc-insight_6_8-branch:1.15.0.16
	arc-insight_6_8-branchpoint:1.15
	insight_6_8-branch:1.15.0.14
	insight_6_8-branchpoint:1.15
	reverse-20081226-branch:1.15.0.12
	reverse-20081226-branchpoint:1.15
	multiprocess-20081120-branch:1.15.0.10
	multiprocess-20081120-branchpoint:1.15
	reverse-20080930-branch:1.15.0.8
	reverse-20080930-branchpoint:1.15
	reverse-20080717-branch:1.15.0.6
	reverse-20080717-branchpoint:1.15
	msnyder-reverse-20080609-branch:1.15.0.4
	msnyder-reverse-20080609-branchpoint:1.15
	drow-reverse-20070409-branch:1.12.0.2
	drow-reverse-20070409-branchpoint:1.12
	gdb_6_8-2008-03-27-release:1.15
	gdb_6_8-branch:1.15.0.2
	gdb_6_8-2008-02-26-branchpoint:1.15
	gdb_6_7_1-2007-10-29-release:1.14
	gdb_6_7-2007-10-10-release:1.14
	gdb_6_7-branch:1.14.0.2
	gdb_6_7-2007-09-07-branchpoint:1.14
	insight_6_6-20070208-release:1.10
	gdb_6_6-2006-12-18-release:1.10
	gdb_6_6-branch:1.10.0.26
	gdb_6_6-2006-11-15-branchpoint:1.10
	insight_6_5-20061003-release:1.10
	gdb-csl-symbian-6_4_50_20060226-12:1.10
	gdb-csl-sourcerygxx-3_4_4-25:1.10
	nickrob-async-20060828-mergepoint:1.10
	gdb-csl-symbian-6_4_50_20060226-11:1.10
	gdb-csl-sourcerygxx-4_1-17:1.10
	gdb-csl-20060226-branch-local-2:1.10
	gdb-csl-sourcerygxx-4_1-14:1.10
	gdb-csl-sourcerygxx-4_1-13:1.10
	gdb-csl-sourcerygxx-4_1-12:1.10
	gdb-csl-sourcerygxx-3_4_4-21:1.10
	gdb_6_5-20060621-release:1.10
	gdb-csl-sourcerygxx-4_1-9:1.10
	gdb-csl-sourcerygxx-4_1-8:1.10
	gdb-csl-sourcerygxx-4_1-7:1.10
	gdb-csl-arm-2006q1-6:1.10
	gdb-csl-sourcerygxx-4_1-6:1.10
	gdb-csl-symbian-6_4_50_20060226-10:1.10
	gdb-csl-symbian-6_4_50_20060226-9:1.10
	gdb-csl-symbian-6_4_50_20060226-8:1.10
	gdb-csl-coldfire-4_1-11:1.10
	gdb-csl-sourcerygxx-3_4_4-19:1.10
	gdb-csl-coldfire-4_1-10:1.10
	gdb_6_5-branch:1.10.0.24
	gdb_6_5-2006-05-14-branchpoint:1.10
	gdb-csl-sourcerygxx-4_1-5:1.10
	nickrob-async-20060513-branch:1.10.0.22
	nickrob-async-20060513-branchpoint:1.10
	gdb-csl-sourcerygxx-4_1-4:1.10
	msnyder-reverse-20060502-branch:1.10.0.20
	msnyder-reverse-20060502-branchpoint:1.10
	gdb-csl-morpho-4_1-4:1.10
	gdb-csl-sourcerygxx-3_4_4-17:1.10
	readline_5_1-import-branch:1.10.0.18
	readline_5_1-import-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.10
	gdb-csl-symbian-20060226-branch:1.10.0.16
	gdb-csl-symbian-20060226-branchpoint:1.10
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.10
	msnyder-reverse-20060331-branch:1.10.0.14
	msnyder-reverse-20060331-branchpoint:1.10
	gdb-csl-available-20060303-branch:1.10.0.12
	gdb-csl-available-20060303-branchpoint:1.10
	gdb-csl-20060226-branch:1.10.0.10
	gdb-csl-20060226-branchpoint:1.10
	gdb_6_4-20051202-release:1.10
	msnyder-fork-checkpoint-branch:1.10.0.8
	msnyder-fork-checkpoint-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.10.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.10.0.4
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb-csl-arm-20051020-branch:1.10.0.2
	gdb-csl-arm-20051020-branchpoint:1.10
	gdb-csl-arm-20050325-2005-q1b:1.8.4.1
	gdb-csl-arm-20050325-2005-q1a:1.8.4.1
	csl-arm-20050325-branch:1.8.0.4
	csl-arm-20050325-branchpoint:1.8
	gdb-post-i18n-errorwarning-20050211:1.8
	gdb-pre-i18n-errorwarning-20050211:1.8
	gdb_6_3-20041109-release:1.8
	gdb_6_3-branch:1.8.0.2
	gdb_6_3-20041019-branchpoint:1.8
	drow_intercu-merge-20040921:1.7
	drow_intercu-merge-20040915:1.7
	jimb-gdb_6_2-e500-branch:1.7.0.12
	jimb-gdb_6_2-e500-branchpoint:1.7
	gdb_6_2-20040730-release:1.7
	gdb_6_2-branch:1.7.0.8
	gdb_6_2-2004-07-10-gmt-branchpoint:1.7
	gdb_6_1_1-20040616-release:1.7
	gdb_6_1-2004-04-05-release:1.7
	drow_intercu-merge-20040402:1.7
	drow_intercu-merge-20040327:1.7
	ezannoni_pie-20040323-branch:1.7.0.6
	ezannoni_pie-20040323-branchpoint:1.7
	cagney_tramp-20040321-mergepoint:1.7
	cagney_tramp-20040309-branch:1.7.0.4
	cagney_tramp-20040309-branchpoint:1.7
	gdb_6_1-branch:1.7.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.7
	drow_intercu-20040221-branch:1.6.0.6
	drow_intercu-20040221-branchpoint:1.6
	cagney_bfdfile-20040213-branch:1.6.0.4
	cagney_bfdfile-20040213-branchpoint:1.6
	drow-cplus-merge-20040208:1.6
	carlton_dictionary-20040126-merge:1.6
	cagney_bigcore-20040122-branch:1.6.0.2
	cagney_bigcore-20040122-branchpoint:1.6
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	kettenis_sparc-20030918-branch:1.5.0.50
	kettenis_sparc-20030918-branchpoint:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.48
	cagney_x86i386-20030821-branch:1.5.0.46
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.44
	gdb_6_0-2003-06-23-branchpoint:1.5
	jimb-ppc64-linux-20030613-branch:1.5.0.42
	jimb-ppc64-linux-20030613-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.40
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.38
	cagney_writestrings-20030508-branchpoint:1.5
	jimb-ppc64-linux-20030528-branch:1.5.0.36
	jimb-ppc64-linux-20030528-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.34
	cagney_fileio-20030521-branchpoint:1.5
	kettenis_i386newframe-20030517-mergepoint:1.5
	jimb-ppc64-linux-20030509-branch:1.5.0.32
	jimb-ppc64-linux-20030509-branchpoint:1.5
	kettenis_i386newframe-20030504-mergepoint:1.5
	carlton_dictionary-20030430-merge:1.5
	kettenis_i386newframe-20030419-branch:1.5.0.30
	kettenis_i386newframe-20030419-branchpoint:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	kettenis_i386newframe-20030406-branch:1.5.0.28
	kettenis_i386newframe-20030406-branchpoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.26
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.24
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.22
	cagney_lazyid-20030317-branchpoint:1.5
	kettenis-i386newframe-20030316-mergepoint:1.5
	offbyone-20030313-branch:1.5.0.20
	offbyone-20030313-branchpoint:1.5
	kettenis-i386newframe-20030308-branch:1.5.0.18
	kettenis-i386newframe-20030308-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.16
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030203-mergepoint:1.5
	interps-20030202-branch:1.5.0.14
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.12
	cagney-unwind-20030108-branchpoint:1.5
	carlton_dictionary-20021223-merge:1.5
	gdb_5_3-2002-12-12-release:1.5
	carlton_dictionary-20021115-merge:1.5
	kseitz_interps-20021105-merge:1.5
	kseitz_interps-20021103-merge:1.5
	drow-cplus-merge-20021020:1.5
	drow-cplus-merge-20021025:1.5
	carlton_dictionary-20021025-merge:1.5
	carlton_dictionary-20021011-merge:1.5
	drow-cplus-branch:1.5.0.10
	drow-cplus-branchpoint:1.5
	kseitz_interps-20020930-merge:1.5
	carlton_dictionary-20020927-merge:1.5
	carlton_dictionary-branch:1.5.0.8
	carlton_dictionary-20020920-branchpoint:1.5
	gdb_5_3-branch:1.5.0.6
	gdb_5_3-2002-09-04-branchpoint:1.5
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.4
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.5.0.2
	readline_4_3-import-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	kseitz_interps-20020528-branch:1.4.0.16
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.14
	cagney_regbuf-20020515-branchpoint:1.4
	jimb-macro-020506-branch:1.4.0.12
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.10
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	gdb-post-ptid_t-2001-05-03:1.3
	gdb-pre-ptid_t-2001-05-03:1.3
	insight-precleanup-2001-01-01:1.2
	gdb-post-protoization-2000-07-29:1.1.1.1
	gdb-pre-protoization-2000-07-29:1.1.1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb-post-params-removal-2000-06-04:1.1.1.1
	gdb-pre-params-removal-2000-06-04:1.1.1.1
	gdb-post-params-removal-2000-05-28:1.1.1.1
	gdb-pre-params-removal-2000-05-28:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.20
date	2013.01.01.06.33.04;	author brobecke;	state Exp;
branches;
next	1.19;

1.19
date	2012.01.04.08.17.29;	author brobecke;	state Exp;
branches;
next	1.18;

1.18
date	2011.01.01.15.33.28;	author brobecke;	state Exp;
branches
	1.18.4.1;
next	1.17;

1.17
date	2010.01.01.07.31.51;	author brobecke;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.03.05.57.58;	author brobecke;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.01.22.53.15;	author drow;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.23.18.14.16;	author brobecke;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.02.21.29.28;	author drow;	state Exp;
branches;
next	1.12;

1.12
date	2007.03.27.17.59.36;	author drow;	state Exp;
branches;
next	1.11;

1.11
date	2007.01.09.17.59.08;	author drow;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.08.12.56.58;	author drow;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.25.20.38.55;	author drow;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.06.22.51.00;	author felix;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2004.02.29.16.51.48;	author drow;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.18.15.23.30;	author drow;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2002.07.19.19.40.28;	author drow;	state Exp;
branches
	1.5.8.1
	1.5.10.1
	1.5.48.1;
next	1.4;

1.4
date	2001.05.10.19.33.13;	author ezannoni;	state Exp;
branches
	1.4.16.1;
next	1.3;

1.3
date	2001.03.06.08.21.48;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.19.21.46.42;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.28;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.18.4.1
date	2012.01.06.04.43.42;	author brobecke;	state Exp;
branches;
next	;

1.8.4.1
date	2005.03.25.20.44.01;	author drow;	state Exp;
branches;
next	;

1.6.6.1
date	2004.03.27.17.38.03;	author drow;	state Exp;
branches;
next	;

1.5.8.1
date	2004.01.26.19.11.40;	author carlton;	state Exp;
branches;
next	;

1.5.10.1
date	2004.02.09.19.43.54;	author drow;	state Exp;
branches;
next	;

1.5.48.1
date	2004.03.23.20.12.32;	author ezannoni;	state Exp;
branches;
next	;

1.4.16.1
date	2002.07.22.21.47.11;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.28;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2000-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test framework for GDB (remote protocol) using a "gdbserver",
# ie. a debug agent running as a native process on the same or
# a different host.

#
# This module to be used for testing gdb with a "gdbserver" 
# built either from libremote or from gdb/gdbserver.  
#

#
# To be addressed or set in your baseboard config file:
#
#   set_board_info gdb_protocol "remote"
#	Unles you have a gdbserver that uses a different protocol...
#
#   set_board_info use_gdb_stub 1
#	This tells the rest of the test suite not to do things
#	like "run" which don't work well on remote targets.
#
#   set_board_info gdb,do_reload_on_run 1
#	Unles you have a gdbserver that can handle multiple sessions.
#
#   set_board_info noargs 1
#	At present there is no provision in the remote protocol
#	for passing arguments.  This test framework does not
#	address the issue, so it's best to set this variable
#	in your baseboard configuration file.  
#	FIXME: there's no reason why the test harness couldn't
#	pass commandline args when it spawns gdbserver.
#
#   set_board_info gdb,noinferiorio 1
#	Neither the traditional gdbserver nor the one in libremote
#	can presently capture stdout and relay it to GDB via the
#	'O' packet.  This means that tests involving printf will
#	fail unles you set this varibale in your baseboard
#	configuration file.
#   
#   set_board_info gdb,no_hardware_watchpoints 1
#	Unles you have a gdbserver that supports hardware watchpoints.
#	FIXME: gdb should detect if the target doesn't support them,
#	and fall back to using software watchpoints.
#
#   set_board_info gdb_server_prog
#	This will be the path to the gdbserver program you want to test.
#	Defaults to "gdbserver".
#
#   set_board_info sockethost
#	The name of the host computer whose socket is being used.
#	Defaults to "localhost".  Note: old gdbserver requires 
#	that you define this, but libremote/gdbserver does not.
#
#   set_board_info gdb,socketport
#	Port id to use for socket connection.  If not set explicitly,
#	it will start at "2345" and increment for each use.
#

# The guts live in gdbserver-support.exp now.

load_lib gdbserver-support.exp

proc gdbserver_gdb_load { } {
    return [gdbserver_spawn ""]
}

proc gdb_reload { } {
    return [gdbserver_run ""]
}

proc gdb_reconnect { } {
    return [gdbserver_reconnect]
}
@


1.19
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2000, 2002-2005, 2007-2012 Free Software Foundation, Inc.
@


1.18
log
@run copyright.sh for 2011.
@
text
@d1 1
a1 2
# Copyright 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
# Free Software Foundation, Inc.
@


1.18.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 2
a2 1
# Copyright 2000, 2002-2005, 2007-2012 Free Software Foundation, Inc.
@


1.17
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d1 1
a1 1
# Copyright 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010
@


1.16
log
@        Updated copyright notices for most files.
@
text
@d1 1
a1 1
# Copyright 2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009
@


1.15
log
@	Updated copyright notices for most files.
@
text
@d1 1
a1 1
# Copyright 2000, 2002, 2003, 2004, 2005, 2007, 2008
@


1.14
log
@        Switch the license of all .exp files to GPLv3.
        Switch the license of all .f and .f90 files to GPLv3.
        Switch the license of all .s and .S files to GPLv3.
@
text
@d1 2
a2 1
# Copyright 2000, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.
@


1.13
log
@	* infrun.c (inferior_ignoring_startup_exec_events): Delete.
	(start_remote): Use STOP_QUIETLY_REMOTE.
	(handle_inferior_event): Do not condition TARGET_WAITKIND_LOADED
	support on a SOLIB_ADD definition.  Update breakpoints_inserted.
	Update to match shared library event breakpoint support.  Only
	resume if appropriate.  Handle STOP_QUIETLY_REMOTE.
	(normal_stop): Handle TARGET_WAITKIND_LOADED.
	* fork-child.c (startup_inferior): Do not set
	inferior_ignoring_startup_exec_events
	* inferior.h (inferior_ignoring_startup_exec_events): Delete
	declaration.
	(enum stop_kind): Improve documentation.  Add STOP_QUIETLY_REMOTE.

	* config/gdbserver.exp (gdb_reconnect): New.
	* gdb.base/so-disc-shr.c, gdb.base/solib-disc.c,
	gdb.base/solib-disc.exp: New files.
	* lib/gdb.exp (gdb_test_multiple): Allow tests to match "Ending
	remote debugging".
	(gdb_compile): Add shlib_load flag.
	* lib/gdbserver-support.exp (gdbserver_run): Save the protocol and
	port.
	(gdbserver_reconnect): New.
@
text
@d5 1
a5 1
# the Free Software Foundation; either version 2 of the License, or
d7 1
a7 1
# 
d12 1
a12 1
# 
d14 1
a14 2
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.12
log
@	* config/gdbserver.exp (gdbserver_gdb_load): Update argument list.
	(gdb_load): Delete, replace with...
	(gdb_reload): ...this.
	* gdb.server/server-run.exp: Use gdb_load and gdbserver_run.
	* gdb.server/server-mon.exp: Likewise.
	* lib/gdb.exp (gdb_run_cmd): Use gdb_reload.
	(gdb_start_cmd): New.
	(gdb_file_cmd): Save the last loaded file.
	(gdb_reload): New.
	(gdb_gnu_strip_debug): Use transform.
	* lib/gdbserver-support.exp (gdbserver_spawn): Move file download
	support here.  Use new $last_loaded_file.  Check mtime.
	(gdb_target_cmd): Handle ObjC failure case.
	(infer_host_exec): Delete.
	(gdbserver_load): Rename to...
	(gdbserver_run): ...this.  Simplify.
	* lib/mi-support.exp (mi_gdb_file_cmd): Set last_loaded_file.
	(mi_gdb_load): Move most contents to a new function...
	(mi_gdb_target_load): ...here.  Simplify call to gdbserver_gdb_load.
	(mi_run_cmd): Use mi_gdb_target_load.
	* gdb.base/break.exp, gdb.base/ending-run.exp, gdb.base/pending.exp,
	gdb.base/sepdebug.exp, gdb.base/unload.exp, gdb.objc/objcdecode.exp:
	Use gdb_run_cmd.
	* gdb.base/charsign.exp: Remove incorrect comment.
	* gdb.base/dbx.exp (gdb_file_cmd): Set last_loaded_file.
	* gdb.ada/exec_changed.exp, gdb.ada/null_record.exp, gdb.ada/start.exp,
	gdb.base/start.exp: Use gdb_start_cmd.
@
text
@d84 4
@


1.11
log
@Copyright updates for 2007.
@
text
@d77 2
a78 2
proc gdbserver_gdb_load { arg } {
    return [gdbserver_spawn $arg ""]
d81 2
a82 2
proc gdb_load { arg } {
    return [gdbserver_load $arg ""]
@


1.10
log
@gdb/testsuite/
	* Makefile.in (ALL_SUBDIRS): Add gdb.gdbserver.
	* configure.ac: Create gdb.gdbserver/Makefile.
	* configure: Regenerated.
	* lib/gdbserver-support.exp: New file, derived from
	config/gdbserver.exp.
	* config/gdbserver.exp: Use gdbserver-support.exp.
	* gdb.gdbserver/Makefile.in: New file.
	* gdb.gdbserver/server.c: New file.
	* gdb.gdbserver/server-run.exp: New file.
gdb/
	* config/fnchange.lst: Add testsuite/gdb.gdbserver entries.
@
text
@d1 1
a1 1
# Copyright 2000, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
@


1.9
log
@	* lib/mi-support.exp (mi_gdb_load): Use /tmp for gdbserver
	downloads.
	* config/gdbserver.exp (gdb_load): Likewise.
@
text
@a0 4
# Test framework for GDB (remote protocol) using a "gdbserver",
# ie. a debug agent running as a native process on the same or
# a different host.

d17 3
a19 4
# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Michael Snyder. (msnyder@@redhat.com)
a25 3
# Load the basic testing library, and the remote stuff.
load_lib ../config/monitor.exp

d68 1
a68 1
#   set_board_info socketport
d73 1
d75 1
d77 2
a78 106
#
# gdb_load -- load a file into the debugger.
#             return a -1 if anything goes wrong.
#

global server_exec;
global portnum;
set portnum "2345";

proc gdbserver_gdb_load { server_exec } {
    global portnum

    # Port id -- either specified in baseboard file, or managed here.
    if [target_info exists gdb,socketport] {
	set portnum [target_info gdb,socketport];
    } else {
	# Bump the port number to avoid conflicts with hung ports.
	incr portnum;
    }

    # Extract the local and remote host ids from the target board struct.

    if [target_info exists sockethost] {
	set debughost  [target_info sockethost];
    } else {
	set debughost "localhost:";
    }
    # Extract the protocol
    if [target_info exists gdb_protocol] {
	set protocol [target_info gdb_protocol];
    } else {
	set protocol "remote";
    }

    # Extract the name of the gdbserver, if known (default 'gdbserver').
    if [target_info exists gdb_server_prog] {
	set gdbserver [target_info gdb_server_prog];
    } else {
	set gdbserver "gdbserver";
    }
    # Extract the socket hostname
    if [target_info exists sockethost] {
	set sockethost [target_info sockethost];
    } else {
	set sockethost ""
    }

    # Export the host:port pair.
    set gdbport $debughost$portnum;

    # Fire off the debug agent
    if [target_info exists gdb_server_args] {
        # This flavour of gdbserver takes as arguments those specified
        # in the board configuration file
        set custom_args [target_info gdb_server_args];
	set server_spawn_id [remote_spawn target \
               "$gdbserver $custom_args"]
    } else {
        # This flavour of gdbserver takes as arguments the port information
        # and the name of the executable file to be debugged.
	set server_spawn_id [remote_spawn target \
	    "$gdbserver $sockethost$portnum $server_exec"]
    }

    # Wait for the server to produce at least one line and an additional
    # character of output.  This will wait until any TCP socket has been
    # created, so that GDB can connect.
    expect {
	-i $server_spawn_id
	-notransfer
	-re ".*\n." { }
    }

    # We can't just call close, because if gdbserver is local then that means
    # that it will get a SIGHUP.  Doing it this way could also allow us to
    # get at the inferior's input or output if necessary, and means that we
    # don't need to redirect output.
    expect_background {
	-i $server_spawn_id
	-re "." { }
	eof {
	    # The spawn ID is already closed now (but not yet waited for).
	    wait -i $expect_out(spawn_id)
	}
    }

    return [list $protocol $gdbport];
}

proc infer_host_exec { } {
    set host_exec ""

    send_gdb "info files\n";
    gdb_expect 30 {
	-re "Symbols from \"(\[^\"\]+)\"" {
	    set host_exec $expect_out(1,string);
	    exp_continue;
	}
	-re "Local exec file:\[\r\n\]+\[ \t\]*`(\[^'\]+)'," {
	    set host_exec $expect_out(1,string);
	    exp_continue;
	}
	-re "$gdb_prompt $" { }
    }

    return $host_exec
d82 1
a82 28
    global host_exec
    global server_exec

    if { $arg == "" && $host_exec == "" } {
	set host_exec [infer_host_exec]
    } elseif { $arg != "" } {
	set host_exec $arg
	if [info exists server_exec] { unset server_exec }
    }

    if { ! [info exists server_exec] } {
	if [is_remote target] {
	    set server_exec [remote_download target $host_exec /tmp/[file tail $host_exec].[pid]]
	} else {
	    set server_exec $host_exec
	}
    }

    set res [gdbserver_gdb_load $server_exec]
    set protocol [lindex $res 0]
    set gdbport [lindex $res 1]

    if { $arg != "" } {
	if [gdb_file_cmd $arg] {
	    return -1
	}
    }
    gdb_target_cmd $protocol $gdbport
@


1.8
log
@2004-10-06  Felix Lee  <felix+log1@@specifixinc.com>

	* config/gdbserver.exp (gdb_load): Use right filename on remote.
@
text
@d5 1
a5 1
#   Copyright 2000, 2002, 2003, 2004 Free Software Foundation, Inc.
d204 1
a204 1
	    set server_exec [remote_download target $host_exec]
@


1.8.4.1
log
@	* lib/mi-support.exp (mi_gdb_load): Use /tmp for gdbserver
	downloads.
	* config/gdbserver.exp (gdb_load): Likewise.
@
text
@d5 1
a5 1
# Copyright 2000, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d204 1
a204 1
	    set server_exec [remote_download target $host_exec /tmp/[file tail $host_exec].[pid]]
@


1.7
log
@	* config/gdbserver.exp (gdbserver_gdb_load): Wait for a complete
	line of output.
@
text
@d210 1
a210 1
    set res [gdbserver_gdb_load $host_exec]
@


1.6
log
@	* config/gdbserver.exp (gdbserver_gdb_load): Rename from gdb_load.
	Remove downloading, guessing the host executable, the calls to
	gdb_file_cmd and gdb_target_cmd, and "load" support.
	(infer_host_exec): New function broken out from gdb_load.
	(gdb_load): New wrapper for gdbserver_gdb_load.
	* lib/mi-support.exp (mi_gdb_target_cmd): New function, based on
	gdb_target_cmd.  Use -target-select.
	(mi_gdb_file_cmd): New function, broken out from mi_gdb_load.
	Download binaries to the host.  Clear last_mi_remote_file when
	we load a new binary.
	(mi_gdb_load): Call mi_gdb_file_cmd.  If gdbserver.exp is loaded,
	call gdbserver_gdb_load and mi_gdb_target_cmd.
@
text
@d147 3
a149 1
    # Wait for the server to produce at least one character of output.
d153 1
a153 1
	-re . { }
@


1.6.6.1
log
@Merge mainline to intercu branch.
@
text
@d147 1
a147 3
    # Wait for the server to produce at least one line and an additional
    # character of output.  This will wait until any TCP socket has been
    # created, so that GDB can connect.
d151 1
a151 1
	-re ".*\n." { }
@


1.5
log
@2002-07-19  Daniel Jacobowitz  <drow@@mvista.com>

        * config/gdbserver.exp (gdb_load): Don't use TCL varargs.
        Improve support for reusing an exec file.  Copy exec file
        to target, and run gdbserver on the target instead of on the host.
@
text
@d5 1
a5 1
#   Copyright 2000, 2002 Free Software Foundation, Inc.
d92 2
a93 6
proc gdb_load { arg } {
    global host_exec;
    global server_exec;
    global portnum;
    global verbose;
    global gdb_prompt;
a132 29
    # Remember new exec file.
    if { $arg == "" } {
	if { ! [info exists host_exec] } {
	    send_gdb "info files\n";
	    gdb_expect 30 {
		-re "Symbols from \"(\[^\"\]+)\"" {
		    set host_exec $expect_out(1,string);
		    exp_continue;
		}
		-re "Local exec file:\[\r\n\]+\[ \t\]*`(\[^'\]+)'," {
		    set host_exec $expect_out(1,string);
		    exp_continue;
		}
		-re "$gdb_prompt $" { }
	    }
	}
    } else {
	set host_exec $arg
	if [info exists server_exec] { unset server_exec }
    }

    if { ! [info exists server_exec] } {
	if [is_remote target] {
	    set server_exec [remote_download target $host_exec]
	} else {
	    set server_exec $host_exec
	}
    }

d145 1
a145 1
    } 
d147 19
a165 4
    # We can't call close, because if gdbserver is local then that means
    # that it will get a SIGHUP.
    ## close -i $server_spawn_id
    wait -nowait -i $server_spawn_id
d167 2
a168 2
    # Give it a little time to establish
    sleep 1
d170 12
a181 4
    # tell gdb what file we are debugging
    if { $arg != "" } {
	if [gdb_file_cmd $arg] {
	    return -1;
d183 1
d186 2
a187 2
    # attach to the "serial port"
    gdb_target_cmd $protocol $gdbport;
d189 9
a197 25
    # do the real load if needed
    if [target_info exists gdb_server_do_load] {
        send_gdb "load\n"
        set timeout 2400
        verbose "Timeout is now $timeout seconds" 2
        gdb_expect {
            -re ".*$gdb_prompt $" {
                if $verbose>1 then {
                    send_user "Loaded $arg into $GDB\n"
                }
                set timeout 30
                verbose "Timeout is now $timeout seconds" 2
                return 1
            }
            -re "$gdb_prompt $"     {
                if $verbose>1 then {
                    perror "GDB couldn't load."
                }
            }
            timeout {
                if $verbose>1 then {
                    perror "Timed out trying to load $arg."
                }
            }
        }
d200 18
a217 1
    return 0;
@


1.5.48.1
log
@merge mainline changes into branch
@
text
@d5 1
a5 1
#   Copyright 2000, 2002, 2003, 2004 Free Software Foundation, Inc.
d92 6
a97 2
proc gdbserver_gdb_load { server_exec } {
    global portnum
d137 29
d178 1
a178 1
    }
d180 4
a183 21
    # Wait for the server to produce at least one line and an additional
    # character of output.  This will wait until any TCP socket has been
    # created, so that GDB can connect.
    expect {
	-i $server_spawn_id
	-notransfer
	-re ".*\n." { }
    }

    # We can't just call close, because if gdbserver is local then that means
    # that it will get a SIGHUP.  Doing it this way could also allow us to
    # get at the inferior's input or output if necessary, and means that we
    # don't need to redirect output.
    expect_background {
	-i $server_spawn_id
	-re "." { }
	eof {
	    # The spawn ID is already closed now (but not yet waited for).
	    wait -i $expect_out(spawn_id)
	}
    }
d185 2
a186 2
    return [list $protocol $gdbport];
}
d188 4
a191 12
proc infer_host_exec { } {
    set host_exec ""

    send_gdb "info files\n";
    gdb_expect 30 {
	-re "Symbols from \"(\[^\"\]+)\"" {
	    set host_exec $expect_out(1,string);
	    exp_continue;
	}
	-re "Local exec file:\[\r\n\]+\[ \t\]*`(\[^'\]+)'," {
	    set host_exec $expect_out(1,string);
	    exp_continue;
a192 1
	-re "$gdb_prompt $" { }
d195 2
a196 2
    return $host_exec
}
d198 25
a222 9
proc gdb_load { arg } {
    global host_exec
    global server_exec

    if { $arg == "" && $host_exec == "" } {
	set host_exec [infer_host_exec]
    } elseif { $arg != "" } {
	set host_exec $arg
	if [info exists server_exec] { unset server_exec }
d225 1
a225 18
    if { ! [info exists server_exec] } {
	if [is_remote target] {
	    set server_exec [remote_download target $host_exec]
	} else {
	    set server_exec $host_exec
	}
    }

    set res [gdbserver_gdb_load $host_exec]
    set protocol [lindex $res 0]
    set gdbport [lindex $res 1]

    if { $arg != "" } {
	if [gdb_file_cmd $arg] {
	    return -1
	}
    }
    gdb_target_cmd $protocol $gdbport
@


1.5.10.1
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d5 1
a5 1
#   Copyright 2000, 2002, 2003, 2004 Free Software Foundation, Inc.
d92 6
a97 2
proc gdbserver_gdb_load { server_exec } {
    global portnum
d137 29
d178 1
a178 1
    }
d180 4
a183 19
    # Wait for the server to produce at least one character of output.
    expect {
	-i $server_spawn_id
	-notransfer
	-re . { }
    }

    # We can't just call close, because if gdbserver is local then that means
    # that it will get a SIGHUP.  Doing it this way could also allow us to
    # get at the inferior's input or output if necessary, and means that we
    # don't need to redirect output.
    expect_background {
	-i $server_spawn_id
	-re "." { }
	eof {
	    # The spawn ID is already closed now (but not yet waited for).
	    wait -i $expect_out(spawn_id)
	}
    }
d185 2
a186 2
    return [list $protocol $gdbport];
}
d188 4
a191 12
proc infer_host_exec { } {
    set host_exec ""

    send_gdb "info files\n";
    gdb_expect 30 {
	-re "Symbols from \"(\[^\"\]+)\"" {
	    set host_exec $expect_out(1,string);
	    exp_continue;
	}
	-re "Local exec file:\[\r\n\]+\[ \t\]*`(\[^'\]+)'," {
	    set host_exec $expect_out(1,string);
	    exp_continue;
a192 1
	-re "$gdb_prompt $" { }
d195 2
a196 2
    return $host_exec
}
d198 25
a222 9
proc gdb_load { arg } {
    global host_exec
    global server_exec

    if { $arg == "" && $host_exec == "" } {
	set host_exec [infer_host_exec]
    } elseif { $arg != "" } {
	set host_exec $arg
	if [info exists server_exec] { unset server_exec }
d225 1
a225 18
    if { ! [info exists server_exec] } {
	if [is_remote target] {
	    set server_exec [remote_download target $host_exec]
	} else {
	    set server_exec $host_exec
	}
    }

    set res [gdbserver_gdb_load $host_exec]
    set protocol [lindex $res 0]
    set gdbport [lindex $res 1]

    if { $arg != "" } {
	if [gdb_file_cmd $arg] {
	    return -1
	}
    }
    gdb_target_cmd $protocol $gdbport
@


1.5.8.1
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d5 1
a5 1
#   Copyright 2000, 2002, 2003, 2004 Free Software Foundation, Inc.
d92 6
a97 2
proc gdbserver_gdb_load { server_exec } {
    global portnum
d137 29
d178 1
a178 1
    }
d180 4
a183 19
    # Wait for the server to produce at least one character of output.
    expect {
	-i $server_spawn_id
	-notransfer
	-re . { }
    }

    # We can't just call close, because if gdbserver is local then that means
    # that it will get a SIGHUP.  Doing it this way could also allow us to
    # get at the inferior's input or output if necessary, and means that we
    # don't need to redirect output.
    expect_background {
	-i $server_spawn_id
	-re "." { }
	eof {
	    # The spawn ID is already closed now (but not yet waited for).
	    wait -i $expect_out(spawn_id)
	}
    }
d185 2
a186 2
    return [list $protocol $gdbport];
}
d188 4
a191 12
proc infer_host_exec { } {
    set host_exec ""

    send_gdb "info files\n";
    gdb_expect 30 {
	-re "Symbols from \"(\[^\"\]+)\"" {
	    set host_exec $expect_out(1,string);
	    exp_continue;
	}
	-re "Local exec file:\[\r\n\]+\[ \t\]*`(\[^'\]+)'," {
	    set host_exec $expect_out(1,string);
	    exp_continue;
a192 1
	-re "$gdb_prompt $" { }
d195 2
a196 2
    return $host_exec
}
d198 25
a222 9
proc gdb_load { arg } {
    global host_exec
    global server_exec

    if { $arg == "" && $host_exec == "" } {
	set host_exec [infer_host_exec]
    } elseif { $arg != "" } {
	set host_exec $arg
	if [info exists server_exec] { unset server_exec }
d225 1
a225 18
    if { ! [info exists server_exec] } {
	if [is_remote target] {
	    set server_exec [remote_download target $host_exec]
	} else {
	    set server_exec $host_exec
	}
    }

    set res [gdbserver_gdb_load $host_exec]
    set protocol [lindex $res 0]
    set gdbport [lindex $res 1]

    if { $arg != "" } {
	if [gdb_file_cmd $arg] {
	    return -1
	}
    }
    gdb_target_cmd $protocol $gdbport
@


1.4
log
@2001-04-12  Elena Zannoni  <ezannoni@@redhat.com>

        * config/gdbserver.exp (gdb_load): Handle the case
        in which the arguments to gdbserver are given in the
        baseboard configuration file.
        Also handle the case in which the server needs to do a
        load.
@
text
@d5 1
a5 1
#   Copyright 2000 Free Software Foundation, Inc.
d92 2
a93 1
proc gdb_load { args } {
d137 3
a139 4
    if { $args == "" || $args == "{}" } {
	if [info exists server_exec] {
	    set args $server_exec;
	} else {
d143 1
a143 1
		    set args $expect_out(1,string);
d147 1
a147 1
		    set args $expect_out(1,string);
d153 3
d158 7
a164 2
    # remember new exec file 
    set server_exec $args;
d171 2
a172 3
        remote_spawn host \
               "$gdbserver $custom_args >& /dev/null < /dev/null &" \
               writeonly
d176 2
a177 3
        remote_spawn host \
	    "$gdbserver $sockethost$portnum $args >& /dev/null < /dev/null &" \
	    writeonly 
d179 6
d186 1
a186 1
    sleep 2
d189 4
a192 2
    if [gdb_file_cmd $args] {
	return -1;
@


1.4.16.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d5 1
a5 1
#   Copyright 2000, 2002 Free Software Foundation, Inc.
d92 1
a92 2
proc gdb_load { arg } {
    global host_exec;
d136 4
a139 3
    # Remember new exec file.
    if { $arg == "" } {
	if { ! [info exists host_exec] } {
d143 1
a143 1
		    set host_exec $expect_out(1,string);
d147 1
a147 1
		    set host_exec $expect_out(1,string);
a152 3
    } else {
	set host_exec $arg
	if [info exists server_exec] { unset server_exec }
d155 2
a156 7
    if { ! [info exists server_exec] } {
	if [is_remote target] {
	    set server_exec [remote_download target $host_exec]
	} else {
	    set server_exec $host_exec
	}
    }
d163 3
a165 2
	set server_spawn_id [remote_spawn target \
               "$gdbserver $custom_args"]
d169 3
a171 2
	set server_spawn_id [remote_spawn target \
	    "$gdbserver $sockethost$portnum $server_exec"]
a172 6

    # We can't call close, because if gdbserver is local then that means
    # that it will get a SIGHUP.
    ## close -i $server_spawn_id
    wait -nowait -i $server_spawn_id

d174 1
a174 1
    sleep 1
d177 2
a178 4
    if { $arg != "" } {
	if [gdb_file_cmd $arg] {
	    return -1;
	}
@


1.3
log
@Update/correct copyright notices.
@
text
@d95 2
d159 11
a169 1
    remote_spawn host \
d172 1
a172 1
    
d184 27
a212 1

@


1.2
log
@2000-10-19  Michael Snyder  <msnyder@@cleaver.cygnus.com>

        * config/gdbserver.exp:  Rewritten from the ground up, to make it
        compatible with the current dejagnu tree, and to make it work with
        the new "gdbserver" in libremote.
@
text
@d5 1
a5 1
#   Copyright (C) 2000, Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d1 6
a6 3
# Test Framework Driver for GDB using the extended gdb remote protocol
#   Copyright 1995, 1997 Free Software Foundation, Inc.
#
d20 6
d27 2
a28 2
# For this to function correctly, you need to set a number of variables
# in your gdb/site.exp file
d30 52
a81 21
#	set noargs 1		-- we can't pass arguments (yet)
#	set noinferiorio 1	-- we can't get io to/from the inferior
#	set targethost <host>	-- name of the remote system (runs gdbserver)
#	set debughost <host>	-- name of the system running gdb
#	set port <number>	-- starting port number for communication
#	set gdbserver <path>	-- path (on the remote side) to find
#				   gdbserver
#       set rsh <path>		-- path (on debughost side) to rsh
#	set rcp <path>		-- path (on debughost side) to rcp
#	
# You will need to be able to spawn processes from gdbhost to run on
# targethost via rsh (this is how we start gdbserver); similarly
# you need to be able to rcp files from gdbhost to targethost.
#
# We don't do much error checking, if something goes wrong, you'll probably
# just get a tcl error and everything will die.  FIXME
#

# Load the basic gdb testing library
load_lib gdb.exp
load_lib monitor.exp
d87 32
a118 16
# Loading a file in the gdbsrever framework is a little strange in that
# we also create the inferior (which is stopped at the first instruction
# in the program when we get control).
#
proc gdb_load { arg } {
    global verbose
    global loadpath
    global loadfile
    global GDB
    global gdb_prompt
    global debughost
    global port

    # bump the port number to avoid conflicts with hung ports
    set targethost [target_info gdb_server_host];
    set debughost [target_info gdb_debug_host];
d124 6
a129 11
    incr port
    set serialport $targethost:$port
     
    # Copy the file down to the remote host.
    set file [remote_download host $arg];

    # now start gdbserver on the remote side
    remote_spawn host "$gdbserver $debughost:$port $file >& /dev/null < /dev/null"
 
    # give it plenty of time to get going (lynx)
    sleep 30
d131 20
a150 3
    # tell gdb we are remote debugging
    if [gdb_target_monitor $arg] {
	return -1;
d153 10
a162 2
    return 1
}
d164 4
a167 5
#
# gdb_start -- start GDB running.
#
proc gdb_start { } {
    global gdb_prompt
d169 2
a170 2
    # do the usual stuff
    catch default_gdb_start
d172 1
a172 7
    # FIXME: This shouldn't be necessary, but lots of PA tests fail
    # without it.
    send "set remotecache 0\n"
    expect {
	-re "set remotecache 0\[\r\n\]+.*$gdb_prompt $" {}
	default { fail "gdb_start"}
    }
d174 1
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

