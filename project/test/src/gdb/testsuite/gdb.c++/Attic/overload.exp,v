head	1.13;
access;
symbols
	cagney_x86i386-20030821-branch:1.12.0.16
	cagney_x86i386-20030821-branchpoint:1.12
	carlton_dictionary-20030805-merge:1.12
	carlton_dictionary-20030627-merge:1.12
	gdb_6_0-branch:1.12.0.14
	gdb_6_0-2003-06-23-branchpoint:1.12
	jimb-ppc64-linux-20030613-branch:1.12.0.12
	jimb-ppc64-linux-20030613-branchpoint:1.12
	cagney_writestrings-20030508-branch:1.12.0.10
	cagney_writestrings-20030508-branchpoint:1.12
	jimb-ppc64-linux-20030528-branch:1.12.0.8
	jimb-ppc64-linux-20030528-branchpoint:1.12
	carlton_dictionary-20030523-merge:1.12
	cagney_fileio-20030521-branch:1.12.0.6
	cagney_fileio-20030521-branchpoint:1.12
	kettenis_i386newframe-20030517-mergepoint:1.12
	jimb-ppc64-linux-20030509-branch:1.12.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.12
	kettenis_i386newframe-20030504-mergepoint:1.12
	carlton_dictionary-20030430-merge:1.12
	kettenis_i386newframe-20030419-branch:1.12.0.2
	kettenis_i386newframe-20030419-branchpoint:1.12
	carlton_dictionary-20030416-merge:1.12
	cagney_frameaddr-20030409-mergepoint:1.11
	kettenis_i386newframe-20030406-branch:1.10.0.14
	kettenis_i386newframe-20030406-branchpoint:1.10
	cagney_frameaddr-20030403-branchpoint:1.10
	cagney_frameaddr-20030403-branch:1.10.0.12
	cagney_framebase-20030330-mergepoint:1.10
	cagney_framebase-20030326-branch:1.10.0.10
	cagney_framebase-20030326-branchpoint:1.10
	cagney_lazyid-20030317-branch:1.10.0.8
	cagney_lazyid-20030317-branchpoint:1.10
	kettenis-i386newframe-20030316-mergepoint:1.10
	offbyone-20030313-branch:1.10.0.6
	offbyone-20030313-branchpoint:1.10
	kettenis-i386newframe-20030308-branch:1.10.0.4
	kettenis-i386newframe-20030308-branchpoint:1.10
	carlton_dictionary-20030305-merge:1.10
	cagney_offbyone-20030303-branch:1.10.0.2
	cagney_offbyone-20030303-branchpoint:1.10
	carlton_dictionary-20030207-merge:1.10
	interps-20030203-mergepoint:1.9
	interps-20030202-branch:1.9.0.2
	interps-20030202-branchpoint:1.9
	cagney-unwind-20030108-branch:1.7.0.20
	cagney-unwind-20030108-branchpoint:1.7
	carlton_dictionary-20021223-merge:1.7
	gdb_5_3-2002-12-12-release:1.7
	carlton_dictionary-20021115-merge:1.7
	kseitz_interps-20021105-merge:1.7
	kseitz_interps-20021103-merge:1.7
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.18
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.16
	carlton_dictionary-20020920-branchpoint:1.7
	gdb_5_3-branch:1.7.0.14
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.7
	cagney_sysregs-20020825-branch:1.7.0.12
	cagney_sysregs-20020825-branchpoint:1.7
	readline_4_3-import-branch:1.7.0.10
	readline_4_3-import-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.7
	kseitz_interps-20020528-branch:1.7.0.8
	kseitz_interps-20020528-branchpoint:1.7
	cagney_regbuf-20020515-branch:1.7.0.6
	cagney_regbuf-20020515-branchpoint:1.7
	jimb-macro-020506-branch:1.7.0.4
	jimb-macro-020506-branchpoint:1.7
	gdb_5_2-2002-04-29-release:1.7
	gdb_5_2-branch:1.7.0.2
	gdb_5_2-2002-03-03-branchpoint:1.7
	gdb_5_1_1-2002-01-24-release:1.5
	gdb_5_1_0_1-2002-01-03-release:1.5
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	gdb-post-ptid_t-2001-05-03:1.5
	gdb-pre-ptid_t-2001-05-03:1.5
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.1.1.5
	gdb-pre-protoization-2000-07-29:1.1.1.5
	gdb-premipsmulti-2000-06-06-branch:1.1.1.5.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.5
	gdb-post-params-removal-2000-06-04:1.1.1.5
	gdb-pre-params-removal-2000-06-04:1.1.1.5
	gdb-post-params-removal-2000-05-28:1.1.1.5
	gdb-pre-params-removal-2000-05-28:1.1.1.5
	gdb_5_0-2000-05-19-release:1.1.1.5
	gdb_4_18_2-2000-05-18-release:1.1.1.5
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.5
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.5
	gdb_5_0-2000-04-10-branch:1.1.1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.5
	repo-unification-2000-02-06:1.1.1.5
	insight-2000-02-04:1.1.1.5
	gdb-2000-02-04:1.1.1.5
	gdb-2000-02-02:1.1.1.5
	gdb-2000-02-01:1.1.1.5
	gdb-2000-01-31:1.1.1.5
	gdb-2000-01-26:1.1.1.5
	gdb-2000-01-24:1.1.1.5
	gdb-2000-01-17:1.1.1.5
	gdb-2000-01-10:1.1.1.5
	gdb-2000-01-05:1.1.1.5
	gdb-1999-12-21:1.1.1.5
	gdb-1999-12-13:1.1.1.5
	gdb-1999-12-07:1.1.1.5
	gdb-1999-12-06:1.1.1.5
	gdb-1999-11-16:1.1.1.5
	gdb-1999-11-08:1.1.1.5
	gdb-1999-11-01:1.1.1.5
	gdb-1999-10-25:1.1.1.5
	gdb-1999-10-18:1.1.1.5
	gdb-1999-10-11:1.1.1.5
	gdb-1999-10-04:1.1.1.5
	gdb-1999-09-28:1.1.1.5
	gdb-1999-09-21:1.1.1.5
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.3
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2003.08.23.03.55.59;	author chastain;	state dead;
branches;
next	1.12;

1.12
date	2003.04.11.19.57.33;	author jimb;	state Exp;
branches
	1.12.14.1;
next	1.11;

1.11
date	2003.04.09.23.21.14;	author jimb;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.04.21.19.27;	author carlton;	state Exp;
branches
	1.10.12.1;
next	1.9;

1.9
date	2003.01.13.20.09.33;	author drow;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.13.20.08.16;	author drow;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.08.05.37.43;	author fnf;	state Exp;
branches
	1.7.16.1
	1.7.18.1;
next	1.6;

1.6
date	2001.11.01.23.41.09;	author msnyder;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.23.17.02.05;	author chastain;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.06.08.21.54;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.05.23.57.36;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.05.23.14.40;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.32;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.32;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.06.21.13.27.31;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.08.02.23.46.55;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.09.09.00.00.28;	author shebs;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.09.22.03.26.23;	author jsm;	state Exp;
branches;
next	;

1.7.16.1
date	2003.01.25.01.04.31;	author carlton;	state Exp;
branches;
next	1.7.16.2;

1.7.16.2
date	2003.02.07.19.17.59;	author carlton;	state Exp;
branches;
next	1.7.16.3;

1.7.16.3
date	2003.04.16.19.57.02;	author carlton;	state Exp;
branches;
next	1.7.16.4;

1.7.16.4
date	2003.08.30.03.40.34;	author chastain;	state dead;
branches;
next	;

1.7.18.1
date	2003.12.14.20.27.51;	author drow;	state dead;
branches;
next	;

1.10.12.1
date	2003.04.10.21.33.52;	author cagney;	state Exp;
branches;
next	;

1.12.14.1
date	2003.08.25.03.53.48;	author chastain;	state dead;
branches;
next	;


desc
@@


1.13
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@# Copyright 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# written by Elena Zannoni (ezannoni@@cygnus.com)

# This file is part of the gdb testsuite
#
# tests for overloaded member functions. Command Line calls
#


if $tracelevel then {
        strace $tracelevel
        }

#
# test running programs
#
set prms_id 0
set bug_id 0

if { [skip_cplus_tests] } { continue }

set testfile "overload"
set srcfile ${testfile}.cc
set binfile ${objdir}/${subdir}/${testfile}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if [get_compiler_info ${binfile} "c++"] {
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# set it up at a breakpoint so we can play with the variable values
#
if ![runto_main] then {
    perror "couldn't run to breakpoint"
    continue
}

if ![runto 'marker1'] then {
    perror "couldn't run to marker1"
    continue
}

gdb_test "up" ".*main.*" "up from marker1"

send_gdb "print foo_instance1\n"
gdb_expect {
    -re ".\[0-9\]* = \{ifoo = 111, ccpfoo = 0x0\}\r\n$gdb_prompt $" {
        pass "print foo_instance1"
      }
    -re ".*$gdb_prompt $" { fail "print foo_instance1" }
    timeout           { fail "(timeout) print foo_instance1" }
  }


setup_xfail "hppa*-*-*" CLLbs16901
send_gdb "ptype foo_instance1\n"
gdb_expect {
  -re "type = class foo \{.*public:.*int ifoo;.*const char \\*ccpfoo;.*foo\\(int\\);.*foo\\(int, (const char|char const) \\*\\);.*foo\\(foo &\\);.*~foo\\(void\\);.*void foofunc\\(int\\);.*void foofunc\\(int, signed char \\*\\);.*int overload1arg\\(void\\);.*int overload1arg\\(char\\);.*int overload1arg\\(signed char\\);.*int overload1arg\\(unsigned char\\);.*int overload1arg\\(short\\);.*int overload1arg\\(unsigned short\\);.*int overload1arg\\(int\\);.*int overload1arg\\(unsigned int\\);.*int overload1arg\\(long\\);.*int overload1arg\\(unsigned long\\);.*int overload1arg\\(float\\);.*int overload1arg\\(double\\);.*int overloadargs\\(int\\);.*int overloadargs\\(int, int\\);.*int overloadargs\\(int, int, int\\);.*int overloadargs\\(int, int, int, int\\);.*int overloadargs\\(int, int, int, int, int\\);.*int overloadargs\\(int, int, int, int, int, int\\);.*int overloadargs\\(int, int, int, int, int, int, int\\);.*int overloadargs\\(int, int, int, int, int, int, int, int\\);.*int overloadargs\\(int, int, int, int, int, int, int, int, int\\);.*int overloadargs\\(int, int, int, int, int, int, int, int, int, int\\);.*int overloadargs\\(int, int, int, int, int, int, int, int, int, int, int\\);\r\n\}\r\n$gdb_prompt $" {
        pass "ptype foo_instance1 (HP aCC -- known quirk with ~foo parameter list)"
      }
    -re "type = class foo .*int overloadargs\\(int, int, int, int, int, int, int, int, int, int, int\\);\r\n\}\r\n$gdb_prompt $" {
	pass "ptype foo_instance1 (shorter match)"
    }
    -re ".*$gdb_prompt $" { fail "ptype foo_instance1" }
    timeout           { fail "(timeout) ptype foo_instance1" }
  }

send_gdb "print foo_instance2\n"
gdb_expect {
    -re ".\[0-9\]* = \{ifoo = 222, ccpfoo = $hex \"A\"\}\r\n$gdb_prompt $" {
        pass "print foo_instance2"
      }
    -re ".*$gdb_prompt $" { fail "print foo_instance2" }
    timeout           { fail "(timeout) print foo_instance2" }
  }

send_gdb "print foo_instance3\n"
gdb_expect {
    -re ".\[0-9\]* = \{ifoo = 222, ccpfoo = $hex \"A\"\}\r\n$gdb_prompt $" {
        pass "print foo_instance3"
      }
    -re ".*$gdb_prompt $" { fail "print foo_instance3" }
    timeout           { fail "(timeout) print foo_instance3" }
  }


send_gdb "print foo_instance1.overloadargs(1)\n"
gdb_expect {
    -re ".\[0-9\]* = 1\r\n$gdb_prompt $" {
        pass "print call overloaded func 1 arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 1 arg" }
    timeout           { fail "(timeout) print call overloaded func 1 arg" }
  }


# If GDB fails to restore the selected frame properly after the
# inferior function call above (see GDB PR 1155 for an explanation of
# why this might happen), all the subsequent tests will fail.  We
# should detect and report that failure, but let the marker call
# finish so that the rest of the tests can run undisturbed.
gdb_test_multiple "frame" "re-selected 'main' frame after inferior call" {
    -re "#0  marker1.*$gdb_prompt $" {
        setup_kfail "gdb/1155" s390-*-linux-gnu
        fail "re-selected 'main' frame after inferior call"
        gdb_test "finish" ".*main.*at .*overload.cc:.*// marker1-returns-here.*" \
            "finish call to marker1"
    }
    -re "#1  ($hex in )?main.*$gdb_prompt $" {
        pass "re-selected 'main' frame after inferior call"
    }
}


send_gdb "print foo_instance1.overloadargs(1, 2)\n"
gdb_expect {
    -re ".\[0-9\]* = 2\r\n$gdb_prompt $" {
        pass "print call overloaded func 2 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 2 args" }
    timeout           { fail "(timeout) print call overloaded func 2  args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3)\n"
gdb_expect {
    -re ".\[0-9\]* = 3\r\n$gdb_prompt $" {
        pass "print call overloaded func 3 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 3 args" }
    timeout           { fail "(timeout) print call overloaded func 3 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4)\n"
gdb_expect {
    -re ".\[0-9\]* = 4\r\n$gdb_prompt $" {
        pass "print call overloaded func 4 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 4 args" }
    timeout           { fail "(timeout) print call overloaded func 4 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4, 5)\n"
gdb_expect {
    -re ".\[0-9\]* = 5\r\n$gdb_prompt $" {
        pass "print call overloaded func 5 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 5 args" }
    timeout           { fail "(timeout) print call overloaded func 5 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6)\n"
gdb_expect {
    -re ".\[0-9\]* = 6\r\n$gdb_prompt $" {
        pass "print call overloaded func 6 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 6 args" }
    timeout           { fail "(timeout) print call overloaded func 6 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7)\n"
gdb_expect {
    -re ".\[0-9\]* = 7\r\n$gdb_prompt $" {
        pass "print call overloaded func 7 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 7 args" }
    timeout           { fail "(timeout) print call overloaded func 7 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8)\n"
gdb_expect {
    -re ".\[0-9\]* = 8\r\n$gdb_prompt $" {
        pass "print call overloaded func 8 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 8 args" }
    timeout           { fail "(timeout) print call overloaded func 8 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
gdb_expect {
    -re ".\[0-9\]* = 9\r\n$gdb_prompt $" {
        pass "print call overloaded func 9 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 9 args" }
    timeout           { fail "(timeout) print call overloaded func 9 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
gdb_expect {
    -re ".\[0-9\]* = 10\r\n$gdb_prompt $" {
        pass "print call overloaded func 10 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 10 args" }
    timeout           { fail "(timeout) print call overloaded func 10 args" }
  }


send_gdb "print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n"
gdb_expect {
    -re ".\[0-9\]* = 11\r\n$gdb_prompt $" {
        pass "print call overloaded func 11 args"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func 11 args" }
    timeout           { fail "(timeout) print call overloaded func 11 args" }
  }


send_gdb "print foo_instance1.overload1arg()\n"
gdb_expect {
    -re ".\[0-9\]* = 1\r\n$gdb_prompt $" {
        pass "print call overloaded func void arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func void arg" }
    timeout           { fail "(timeout) print call overloaded func void arg" }
  }


send_gdb "print foo_instance1.overload1arg((char)arg2)\n"
gdb_expect {
    -re ".\[0-9\]* = 2\r\n$gdb_prompt $" {
        pass "print call overloaded func char arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func char arg" }
    timeout           { fail "(timeout) print call overloaded func char arg" }
  }


send_gdb "print foo_instance1.overload1arg((signed char)arg3)\n"
gdb_expect {
    -re ".\[0-9\]* = 3\r\n$gdb_prompt $" {
        pass "print call overloaded func signed char arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func signed char arg" }
    timeout           { fail "(timeout) print call overloaded func signed char arg" }
  }


send_gdb "print foo_instance1.overload1arg((unsigned char)arg4)\n"
gdb_expect {
    -re ".\[0-9\]* = 4\r\n$gdb_prompt $" {
        pass "print call overloaded func unsigned char arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func unsigned char arg" }
    timeout           { fail "(timeout) print call overloaded func unsigned char arg" }
  }


send_gdb "print foo_instance1.overload1arg((short)arg5)\n"
gdb_expect {
    -re ".\[0-9\]* = 5\r\n$gdb_prompt $" {
        pass "print call overloaded func short arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func short arg" }
    timeout           { fail "(timeout) print call overloaded func short arg" }
  }


send_gdb "print foo_instance1.overload1arg((unsigned short)arg6)\n"
gdb_expect {
    -re ".\[0-9\]* = 6\r\n$gdb_prompt $" {
        pass "print call overloaded func unsigned short arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func unsigned short  arg" }
    timeout           { fail "(timeout) print call overloaded func unsigned short arg" }
  }


send_gdb "print foo_instance1.overload1arg((int)arg7)\n"
gdb_expect {
    -re ".\[0-9\]* = 7\r\n$gdb_prompt $" {
        pass "print call overloaded func int arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func int arg" }
    timeout           { fail "(timeout) print call overloaded func int arg" }
  }


send_gdb "print foo_instance1.overload1arg((unsigned int)arg8)\n"
gdb_expect {
    -re ".\[0-9\]* = 8\r\n$gdb_prompt $" {
        pass "print call overloaded func unsigned int arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func unsigned int arg" }
    timeout           { fail "(timeout) print call overloaded func unsigned int arg" }
  }


send_gdb "print foo_instance1.overload1arg((long)arg9)\n"
gdb_expect {
    -re ".\[0-9\]* = 9\r\n$gdb_prompt $" {
        pass "print call overloaded func long arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func long arg" }
    timeout           { fail "(timeout) print call overloaded func long arg" }
  }


send_gdb "print foo_instance1.overload1arg((unsigned long)arg10)\n"
gdb_expect {
    -re ".\[0-9\]* = 10\r\n$gdb_prompt $" {
        pass "print call overloaded func unsigned long arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func unsigned long arg" }
    timeout           { fail "(timeout) print call overloaded func unsigned long arg" }
  }


send_gdb "print foo_instance1.overload1arg((float)arg11)\n"
gdb_expect {
    -re ".\[0-9\]* = 11\r\n$gdb_prompt $" {
        pass "print call overloaded func float arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func float arg" }
    timeout           { fail "(timeout) print call overloaded func float arg" }
  }


send_gdb "print foo_instance1.overload1arg((double)arg12)\n"
gdb_expect {
    -re ".\[0-9\]* = 12\r\n$gdb_prompt $" {
        pass "print call overloaded func double arg"
      }
    -re ".*$gdb_prompt $" { fail "print call overloaded func double arg" }
    timeout           { fail "(timeout) print call overloaded func double arg" }
  }

# Now some tests to see if we can list overloaded functions properly:

gdb_test "set listsize 1" "" ""
# send_gdb "set listsize 1\n"
# gdb_expect -re ".*$gdb_prompt $"

#
# Decide whether to use "()" or "(void)"
#

send_gdb "info func overloadfnarg\n" 
gdb_expect {
    -re ".*overloadfnarg\\(void\\).*$gdb_prompt $" {
	gdb_test "list foo::overloadfnarg(void)"\
		".*int foo::overloadfnarg.*\\(void\\).*" \
		"list overloaded function with no args"
    }
    -re ".*overloadfnarg\\(\\).*$gdb_prompt $" {
	gdb_test "list foo::overloadfnarg()"\
		".*int foo::overloadfnarg.*\\(void\\).*" \
		"list overloaded function with no args"
    }
    -re ".*$gdb_prompt $" {
	fail "list overloaded function with no args (no matching symbol)"
    }
}

gdb_test "list foo::overloadfnarg(int)"\
    "int foo::overloadfnarg.*\\(int arg\\).*" \
   "list overloaded function with int arg"

gdb_test "list foo::overloadfnarg(int, int (*)(int))" \
   "int foo::overloadfnarg.*\\(int arg, int \\(\\*foo\\) \\(int\\)\\).*" \
   "list overloaded function with function ptr args"

# This one crashes GDB.  Don't know why yet.
gdb_test "list \"foo::overloadfnarg(int, int (*)(int))\"" \
   "int foo::overloadfnarg.*\\(int arg, int \\(\\*foo\\) \\(int\\)\\).*" \
   "list overloaded function with function ptr args - quotes around argument"

gdb_test "print intToChar(1)" ".\[0-9\]* = 297"
@


1.12
log
@* gdb.c++/derivation.exp, gdb.c++/overload.exp,
gdb.c++/userdef.cc: Place comments on the lines to which the
marker function might return.
* gdb.c++/derivation.exp, gdb.c++/overload.exp,
gdb.c++/userdef.exp: Look for those comments to check that we've
returned to the right place, instead of checking line numbers.
@
text
@@


1.12.14.1
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@@


1.11
log
@* gdb.c++/derivation.exp, gdb.c++/overload.exp,
gdb.c++/userdef.exp: If GDB fails to restore the selected frame
after an inferior function call, report the failure, but allow the
test to continue.
@
text
@d132 1
a132 1
        gdb_test "finish" ".*main.*at .*overload.cc:7\[78\].*" \
@


1.10
log
@2003-02-04  David Carlton  <carlton@@math.stanford.edu>

	* gdb.texinfo (C@@t{++}): Recommend DWARF 2, then stabs+.
	(Variables): Recommend stabs+ and DWARF 2.
	(C plus plus expressions): Correct info about
	compiler versions, debug formats.
	(Contributors): Change 'DWARF2' to 'DWARF 2'.
	PR symtab/874.

2003-02-04  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/overload.exp: Test intToChar(1).
	* gdb.c++/overload.cc (intToChar): New.
	(main): Call intToChar.
@
text
@d123 18
@


1.10.12.1
log
@Merge with mainline.
@
text
@a122 18
# If GDB fails to restore the selected frame properly after the
# inferior function call above (see GDB PR 1155 for an explanation of
# why this might happen), all the subsequent tests will fail.  We
# should detect and report that failure, but let the marker call
# finish so that the rest of the tests can run undisturbed.
gdb_test_multiple "frame" "re-selected 'main' frame after inferior call" {
    -re "#0  marker1.*$gdb_prompt $" {
        setup_kfail "gdb/1155" s390-*-linux-gnu
        fail "re-selected 'main' frame after inferior call"
        gdb_test "finish" ".*main.*at .*overload.cc:7\[78\].*" \
            "finish call to marker1"
    }
    -re "#1  ($hex in )?main.*$gdb_prompt $" {
        pass "re-selected 'main' frame after inferior call"
    }
}


@


1.9
log
@Update copyright years.
@
text
@d381 2
@


1.8
log
@	* gdb.c++/overload.exp: Remove some fixed XFAILs.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
@


1.7
log
@Approved by mec@@shout.net.

	2002-01-07  Fred Fish  <fnf@@redhat.com>
	* gdb.c++/overload.exp: Remove unconditional xfails for:
	print foo_instance1.overloadargs(1)
	print foo_instance1.overloadargs(1, 2)
	print foo_instance1.overloadargs(1, 2, 3)
	print foo_instance1.overloadargs(1, 2, 3, 4)
	print foo_instance1.overloadargs(1, 2, 3, 4, 5)
	print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6)
	print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7)
	print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8)
	print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8, 9)
	print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
	print foo_instance1.overloadargs(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
	print foo_instance1.overload1arg()
	print foo_instance1.overload1arg((char)arg2)
	print foo_instance1.overload1arg((signed char)arg3)
	print foo_instance1.overload1arg((unsigned char)arg4)
	print foo_instance1.overload1arg((int)arg7)
	print foo_instance1.overload1arg((unsigned int)arg8)
	print foo_instance1.overload1arg((float)arg11)
	print foo_instance1.overload1arg((double)arg12)
@
text
@a262 7
# The overload resolver added by HP (valops.c:find_overload_match) doesn't
# work right for G++ output, since the list of parameters seems not to
# be filled in correctly.  Until this gets fixed, don't expect to pass
# some of these tests.

setup_xfail "*-*-*" CLLbs16901

a272 2
setup_xfail "*-*-*" CLLbs16901

a302 2
setup_xfail "*-*-*" CLLbs16901

a311 2

setup_xfail "*-*-*" CLLbs16901
@


1.7.18.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.7.16.1
log
@2003-01-24  David Carlton  <carlton@@math.stanford.edu>

	* valops.c (find_oload_champ): New function.
	(find_overload_match): Separate code into find_oload_champ and
	oload_method_static.
	(find_oload_champ): Call oload_method_static.
	(oload_method_static): New function.
	(find_overload_match): Call classify_oload_match.
	(classify_oload_match): New function.
	* value.h: Update declaration of find_overload_match.
	* eval.c (evaluate_subexp_standard): Pass current block to
	find_overload_match.
	* valops.c (find_overload_match): Add CURRENT_BLOCK arg.

2003-01-24  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/overload.exp: Add tests involving overloadNamespace.
	Delete comment about GDB crashing.
	* gdb.c++/overload.cc: Add dummyClass, dummyInstance,
	overloadNamespace, and XXX.
@
text
@d390 1
a393 18

# Now some tests to see how overloading and namespaces interact.

# FIXME: carlton/2003-01-24: It would be nice to throw using
# declarations into the mix, once GDB handles them.

gdb_test "print overloadNamespace(1)" ".\[0-9\]* = 1"
gdb_test "print overloadNamespace('a')" ".\[0-9\]* = 1"
gdb_test "print overloadNamespace(dummyInstance)" ".\[0-9\]* = 2"

if ![runto 'XXX::marker2'] then {
    perror "couldn't run to XXX::marker2"
    continue
}

gdb_test "print overloadNamespace(1)" ".\[0-9\]* = 3" "print overloadNamespace(1) in XXX"
gdb_test "print overloadNamespace('a')" ".\[0-9\]* = 3" "print overloadNamespace('a') in XXX"
gdb_test "print overloadNamespace(dummyInstance)" ".\[0-9\]* = 2" "print overloadNamespace(dummyInstance) in XXX"
@


1.7.16.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d263 7
d280 2
d312 2
d324 2
a392 2

gdb_test "print intToChar(1)" ".\[0-9\]* = 297"
@


1.7.16.3
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a122 18
# If GDB fails to restore the selected frame properly after the
# inferior function call above (see GDB PR 1155 for an explanation of
# why this might happen), all the subsequent tests will fail.  We
# should detect and report that failure, but let the marker call
# finish so that the rest of the tests can run undisturbed.
gdb_test_multiple "frame" "re-selected 'main' frame after inferior call" {
    -re "#0  marker1.*$gdb_prompt $" {
        setup_kfail "gdb/1155" s390-*-linux-gnu
        fail "re-selected 'main' frame after inferior call"
        gdb_test "finish" ".*main.*at .*overload.cc:.*// marker1-returns-here.*" \
            "finish call to marker1"
    }
    -re "#1  ($hex in )?main.*$gdb_prompt $" {
        pass "re-selected 'main' frame after inferior call"
    }
}


@


1.7.16.4
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* carlton_runnamespace: Ditto.
	* carlton_runtest: Ditto.
	* configure: Regnerate.
@
text
@@


1.6
log
@2001-10-31  Michael Snyder  <msnyder@@redhat.com>

	* gdb.c++/overload.exp: Select overloadfnarg(void) or overloadfnarg(),
	depending on what the symbol table contains.
	* gdb.c++/derivation.exp: Accept both "foo(void)" and "foo()" in
	the output of the ptype command.  Similarly, accept both "const &"
	and "const&".
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
a112 6
# The overload resolver added by HP (valops.c:find_overload_match) doesn't
# work right for G++ output, since the list of parameters seems not to
# be filled in correctly.  Until this gets fixed, don't expect to pass
# these tests.

setup_xfail "*-*-*" CLLbs16901
a122 2
setup_xfail "*-*-*" CLLbs16901

a132 2
setup_xfail "*-*-*" CLLbs16901

a142 2
setup_xfail "*-*-*" CLLbs16901

a152 2
setup_xfail "*-*-*" CLLbs16901

a162 2
setup_xfail "*-*-*" CLLbs16901

a172 2
setup_xfail "*-*-*" CLLbs16901

a182 2
setup_xfail "*-*-*" CLLbs16901

a192 2
setup_xfail "*-*-*" CLLbs16901

a202 2
setup_xfail "*-*-*" CLLbs16901

a212 2
setup_xfail "*-*-*" CLLbs16901

a222 2
setup_xfail "*-*-*" CLLbs16901

a232 2
setup_xfail "*-*-*" CLLbs16901

a242 2
setup_xfail "*-*-*" CLLbs16901

a252 2
setup_xfail "*-*-*" CLLbs16901

d263 5
a291 2
setup_xfail "*-*-*" CLLbs16901

a301 2
setup_xfail "*-*-*" CLLbs16901

a335 2
setup_xfail "*-*-*" CLLbs16901

a344 2

setup_xfail "*-*-*" CLLbs16901
@


1.5
log
@2001-04-22  Michael Chastain  <chastain@@redhat.com>

	* gdb.c++/local.exp: Use the 'runto' library function.
	* gdb.c++/namespace.exp: Likewise.
	* gdb.c++/overload.exp: Likewise.
@
text
@d394 3
a396 2
send_gdb "set listsize 1\n"
gdb_expect -re ".*$gdb_prompt $"
d398 20
a417 3
gdb_test "list foo::overloadfnarg(void)"\
   ".*int foo::overloadfnarg.*\\(void\\).*" \
   "print overloaded function with no args"
d421 1
a421 1
   "print overloaded function with int arg"
d425 1
a425 1
   "print overloaded function with function ptr args"
d430 1
a430 1
   "print overloaded function with function ptr args - quotes around argument"
@


1.4
log
@Update/correct copyright notices.
@
text
@d1 1
a1 1
# Copyright 1998, 1999, 2000 Free Software Foundation, Inc.
d64 4
a67 19
send_gdb "break marker1\n" ; gdb_expect -re ".*$gdb_prompt $"

    send_gdb "cont\n"
    gdb_expect {
        -re "Break.* marker1 \\(\\) at .*:$decimal.*$gdb_prompt $" {
            send_gdb "up\n"
            gdb_expect {
                -re ".*main.*$gdb_prompt $" {
		    pass "up from marker1"
		}
                -re ".*$gdb_prompt $" {
		    fail "up from marker1"
		}
                timeout { fail "up from marker1 (timeout)" }
            }
        }
        -re "$gdb_prompt $" { fail "continue to marker1"  }
        timeout { fail "(timeout) continue to marker1"  }
    }
d69 1
@


1.3
log
@2000-12-05  Michael Snyder  <msnyder@@mvstp600e.cygnus.com>

        * gdb.base/constvars.exp: Add a "pass" message if "up" succeeds.
        * gdb.base/miscexprs.exp: Ditto.
        * gdb.base/pointers.exp:  Ditto.
        * gdb.c++/derivation.exp: Ditto.
        * gdb.c++/local.exp:      Ditto.
        * gdb.c++/namespace.exp:  Ditto.
        * gdb.c++/overload.exp:   Ditto.
        * gdb.c++/ref-types.exp:  Ditto.
@
text
@d1 1
a1 1
# Copyright (C) 1998, 1999 Free Software Foundation, Inc.
@


1.2
log
@2000-12-05  Michael Snyder  <msnyder@@mvstp600e.cygnus.com>

        * gdb.base/constvars.exp: Test result of "up" command.
        * gdb.base/miscexprs.exp: Ditto.
        * gdb.base/pointers.exp:  Ditto.
        * gdb.base/scope.exp:     Ditto.
        * gdb.c++/derivation.exp: Ditto.
        * gdb.c++/local.exp:      Ditto.
        * gdb.c++/namespace.exp:  Ditto.
        * gdb.c++/overload.exp:   Ditto.
        * gdb.c++/ref-types.exp:  Ditto.
@
text
@d71 3
a73 1
                -re ".*main.*$gdb_prompt $" {}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 1998 Free Software Foundation, Inc.
d38 2
d48 3
d71 5
a75 2
                -re ".*$gdb_prompt $" {}
                timeout { fail "up from marker1" }
d93 1
d99 3
d125 4
d130 1
d140 3
d153 2
d165 2
d177 2
d189 2
d201 2
d213 2
d225 2
d237 2
d249 2
d261 2
d272 3
d284 3
d297 2
d309 2
d321 2
d333 2
d345 2
d357 2
d369 2
d381 2
d393 2
d403 22
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-06-21 snapshot
@
text
@a45 6
# Create and source the file that provides information about the compiler
# used to compile the test case.

if [get_compiler_info ${binfile} "c++"] {
    return -1
}
a89 3
    -re "type = class foo .*int overloadargs\\(int, int, int, int, int, int, int, int, int, int, int\\);\r\n\}\r\n$gdb_prompt $" {
	pass "ptype foo_instance1 (shorter match)"
    }
a112 5
# The overload resolver added by HP (valops.c:find_overload_match) doesn't
# work right for G++ output, since the list of parameters seems not to
# be filled in correctly.  Until this gets fixed, don't expect to pass
# these tests.
if {$gcc_compiled} then { setup_xfail "*-*-*" }
a122 3

if {$gcc_compiled} then { setup_xfail "*-*-*" }

a132 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a142 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a152 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a162 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a172 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a182 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a192 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a202 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a212 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a222 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a231 3

if {$gcc_compiled} then { setup_xfail "*-*-*" }

a240 3

if {$gcc_compiled} then { setup_xfail "*-*-*" }

a250 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a260 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a270 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a280 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a290 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a300 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a310 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a320 2
if {$gcc_compiled} then { setup_xfail "*-*-*" }

a329 2

if {$gcc_compiled} then { setup_xfail "*-*-*" }
@


1.1.1.3
log
@import gdb-1999-08-02 snapshot
@
text
@d46 3
a90 1
setup_xfail "hppa*-*-*" CLLbs16901
d126 1
a127 1
setup_xfail "*-*-*" CLLbs16901
d138 1
a138 1
setup_xfail "*-*-*" CLLbs16901
d150 1
a150 1
setup_xfail "*-*-*" CLLbs16901
d162 1
a162 1
setup_xfail "*-*-*" CLLbs16901
d174 1
a174 1
setup_xfail "*-*-*" CLLbs16901
d186 1
a186 1
setup_xfail "*-*-*" CLLbs16901
d198 1
a198 1
setup_xfail "*-*-*" CLLbs16901
d210 1
a210 1
setup_xfail "*-*-*" CLLbs16901
d222 1
a222 1
setup_xfail "*-*-*" CLLbs16901
d234 1
a234 1
setup_xfail "*-*-*" CLLbs16901
d246 1
a246 1
setup_xfail "*-*-*" CLLbs16901
d258 1
a258 1
setup_xfail "*-*-*" CLLbs16901
d270 1
a270 1
setup_xfail "*-*-*" CLLbs16901
d282 1
a282 1
setup_xfail "*-*-*" CLLbs16901
d294 1
a294 1
setup_xfail "*-*-*" CLLbs16901
d306 1
a306 1
setup_xfail "*-*-*" CLLbs16901
d318 1
a318 1
setup_xfail "*-*-*" CLLbs16901
d330 1
a330 1
setup_xfail "*-*-*" CLLbs16901
d342 1
a342 1
setup_xfail "*-*-*" CLLbs16901
d354 1
a354 1
setup_xfail "*-*-*" CLLbs16901
d366 1
a366 1
setup_xfail "*-*-*" CLLbs16901
d378 1
a378 1
setup_xfail "*-*-*" CLLbs16901
d390 1
a390 1
setup_xfail "*-*-*" CLLbs16901
@


1.1.1.4
log
@import gdb-1999-09-08 snapshot
@
text
@d1 1
a1 1
# Copyright (C) 1998, 1999 Free Software Foundation, Inc.
a36 2

if { [skip_cplus_tests] } { continue }
@


1.1.1.5
log
@import gdb-1999-09-21
@
text
@a399 22

# Now some tests to see if we can list overloaded functions properly:

send_gdb "set listsize 1\n"
gdb_expect -re ".*$gdb_prompt $"

gdb_test "list foo::overloadfnarg(void)"\
   ".*int foo::overloadfnarg.*\\(void\\).*" \
   "print overloaded function with no args"

gdb_test "list foo::overloadfnarg(int)"\
    "int foo::overloadfnarg.*\\(int arg\\).*" \
   "print overloaded function with int arg"

gdb_test "list foo::overloadfnarg(int, int (*)(int))" \
   "int foo::overloadfnarg.*\\(int arg, int \\(\\*foo\\) \\(int\\)\\).*" \
   "print overloaded function with function ptr args"

# This one crashes GDB.  Don't know why yet.
gdb_test "list \"foo::overloadfnarg(int, int (*)(int))\"" \
   "int foo::overloadfnarg.*\\(int arg, int \\(\\*foo\\) \\(int\\)\\).*" \
   "print overloaded function with function ptr args - quotes around argument"
@


