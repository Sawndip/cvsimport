head	1.3;
access;
symbols
	cagney_x86i386-20030821-branch:1.2.0.10
	cagney_x86i386-20030821-branchpoint:1.2
	carlton_dictionary-20030805-merge:1.2
	carlton_dictionary-20030627-merge:1.2
	gdb_6_0-branch:1.2.0.8
	gdb_6_0-2003-06-23-branchpoint:1.2
	jimb-ppc64-linux-20030613-branch:1.2.0.6
	jimb-ppc64-linux-20030613-branchpoint:1.2
	cagney_writestrings-20030508-branch:1.1.0.50
	cagney_writestrings-20030508-branchpoint:1.1
	jimb-ppc64-linux-20030528-branch:1.2.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.2
	carlton_dictionary-20030523-merge:1.2
	cagney_fileio-20030521-branch:1.2.0.2
	cagney_fileio-20030521-branchpoint:1.2
	kettenis_i386newframe-20030517-mergepoint:1.1
	jimb-ppc64-linux-20030509-branch:1.1.0.48
	jimb-ppc64-linux-20030509-branchpoint:1.1
	kettenis_i386newframe-20030504-mergepoint:1.1
	carlton_dictionary-20030430-merge:1.1
	kettenis_i386newframe-20030419-branch:1.1.0.46
	kettenis_i386newframe-20030419-branchpoint:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	kettenis_i386newframe-20030406-branch:1.1.0.44
	kettenis_i386newframe-20030406-branchpoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.42
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.40
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.38
	cagney_lazyid-20030317-branchpoint:1.1
	kettenis-i386newframe-20030316-mergepoint:1.1
	offbyone-20030313-branch:1.1.0.36
	offbyone-20030313-branchpoint:1.1
	kettenis-i386newframe-20030308-branch:1.1.0.34
	kettenis-i386newframe-20030308-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.32
	cagney_offbyone-20030303-branchpoint:1.1
	carlton_dictionary-20030207-merge:1.1
	interps-20030203-mergepoint:1.1
	interps-20030202-branch:1.1.0.30
	interps-20030202-branchpoint:1.1
	cagney-unwind-20030108-branch:1.1.0.28
	cagney-unwind-20030108-branchpoint:1.1
	carlton_dictionary-20021223-merge:1.1
	gdb_5_3-2002-12-12-release:1.1
	carlton_dictionary-20021115-merge:1.1
	kseitz_interps-20021105-merge:1.1
	kseitz_interps-20021103-merge:1.1
	drow-cplus-merge-20021020:1.1
	drow-cplus-merge-20021025:1.1
	carlton_dictionary-20021025-merge:1.1
	carlton_dictionary-20021011-merge:1.1
	drow-cplus-branch:1.1.0.26
	drow-cplus-branchpoint:1.1
	kseitz_interps-20020930-merge:1.1
	carlton_dictionary-20020927-merge:1.1
	carlton_dictionary-branch:1.1.0.24
	carlton_dictionary-20020920-branchpoint:1.1
	gdb_5_3-branch:1.1.0.22
	gdb_5_3-2002-09-04-branchpoint:1.1
	kseitz_interps-20020829-merge:1.1
	cagney_sysregs-20020825-branch:1.1.0.20
	cagney_sysregs-20020825-branchpoint:1.1
	readline_4_3-import-branch:1.1.0.18
	readline_4_3-import-branchpoint:1.1
	gdb_5_2_1-2002-07-23-release:1.1
	kseitz_interps-20020528-branch:1.1.0.16
	kseitz_interps-20020528-branchpoint:1.1
	cagney_regbuf-20020515-branch:1.1.0.14
	cagney_regbuf-20020515-branchpoint:1.1
	jimb-macro-020506-branch:1.1.0.12
	jimb-macro-020506-branchpoint:1.1
	gdb_5_2-2002-04-29-release:1.1
	gdb_5_2-branch:1.1.0.10
	gdb_5_2-2002-03-03-branchpoint:1.1
	gdb_5_1_1-2002-01-24-release:1.1
	gdb_5_1_0_1-2002-01-03-release:1.1
	cygnus_cvs_20020108_pre:1.1
	gdb_5_1_0_1-2002-01-03-branch:1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1
	gdb_5_1-2001-11-21-release:1.1
	gdb_s390-2001-09-26-branch:1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1
	gdb_5_1-2001-07-29-branch:1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1
	dberlin-typesystem-branch:1.1.0.2
	dberlin-typesystem-branchpoint:1.1
	gdb-post-ptid_t-2001-05-03:1.1
	gdb-pre-ptid_t-2001-05-03:1.1
	insight-precleanup-2001-01-01:1.1
	gdb-post-protoization-2000-07-29:1.1
	gdb-pre-protoization-2000-07-29:1.1;
locks; strict;
comment	@// @;


1.3
date	2003.08.23.03.55.59;	author chastain;	state dead;
branches;
next	1.2;

1.2
date	2003.05.20.03.56.28;	author carlton;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2000.06.12.01.31.41;	author dberlin;	state Exp;
branches
	1.1.24.1
	1.1.26.1;
next	;

1.1.24.1
date	2002.10.11.21.56.48;	author carlton;	state Exp;
branches;
next	1.1.24.2;

1.1.24.2
date	2002.10.15.23.59.23;	author carlton;	state Exp;
branches;
next	1.1.24.3;

1.1.24.3
date	2002.10.18.00.00.19;	author carlton;	state Exp;
branches;
next	1.1.24.4;

1.1.24.4
date	2002.11.28.00.53.26;	author carlton;	state Exp;
branches;
next	1.1.24.5;

1.1.24.5
date	2002.12.18.00.45.44;	author carlton;	state Exp;
branches;
next	1.1.24.6;

1.1.24.6
date	2003.05.23.18.40.52;	author carlton;	state Exp;
branches;
next	1.1.24.7;

1.1.24.7
date	2003.08.30.03.40.34;	author chastain;	state dead;
branches;
next	;

1.1.26.1
date	2002.10.22.19.59.37;	author carlton;	state Exp;
branches;
next	1.1.26.2;

1.1.26.2
date	2003.12.14.20.27.51;	author drow;	state dead;
branches;
next	;

1.2.8.1
date	2003.08.25.03.53.48;	author chastain;	state dead;
branches;
next	;


desc
@@


1.3
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@namespace AAA {
  char c;
  int i;
  int A_xyzq (int);
  char xyzq (char);
  class inA {
  public:
    int xx;
    int fum (int);
  };
};

int AAA::inA::fum (int i)
{
  return 10 + i;
}

namespace BBB {
  char c;
  int i;
  int B_xyzq (int);
  char xyzq (char);

  namespace CCC {
    char xyzq (char);
  };

  class Class {
  public:
    char xyzq (char);
    int dummy;
  };
};

int AAA::A_xyzq (int x)
{
  return 2 * x;
}

char AAA::xyzq (char c)
{
  return 'a';
}


int BBB::B_xyzq (int x)
{
  return 3 * x;
}

char BBB::xyzq (char c)
{
  return 'b';
}

char BBB::CCC::xyzq (char c)
{
  return 'z';
}

char BBB::Class::xyzq (char c)
{
  return 'o';
}

void marker1(void)
{
  return;
}

namespace
{
  int X = 9;

  namespace G
  {
    int Xg = 10;
  }
}

namespace C
{
  int c = 1;
  int shadow = 12;

  namespace
  {
    int cX = 6;
    
    namespace F
    {
      int cXf = 7;
    }
  }

  namespace C
  {
    int cc = 2;
  }

  namespace D
  {
    int cd = 3;
    int shadow = 13;

    namespace E
    {
      int cde = 5;
    }

    void marker2 (void)
    {
      // NOTE: carlton/2003-04-23: I'm listing the expressions that I
      // plan to have GDB try to print out, just to make sure that the
      // compiler and I agree which ones should be legal!  It's easy
      // to screw up when testing the boundaries of namespace stuff.
      c;
      //cc;
      C::cc;
      cd;
      E::cde;
      shadow;
      cX;
      F::cXf;
      X;
      G::Xg;
      //cXOtherFile;
      //XOtherFile;

      return;
    }

  }
}

int main ()
{
  using AAA::inA;
  char c1;

  using namespace BBB;
  
  c1 = xyzq ('x');
  c1 = AAA::xyzq ('x');
  c1 = BBB::CCC::xyzq ('m');
  
  inA ina;

  ina.xx = 33;

  int y;

  y = AAA::A_xyzq (33);
  y += B_xyzq (44);

  BBB::Class cl;

  c1 = cl.xyzq('e');

  marker1();
  
  C::D::marker2 ();
}
@


1.2
log
@2003-05-19  David Carlton  <carlton@@bactrian.org>

	Partial fix for PR c++/827.
	* cp-support.h: Include symtab.h.
	Declare cp_lookup_symbol_nonlocal, cp_lookup_symbol_namespace.
	* cp-namespace.c: Update contributors.
	(cp_lookup_symbol_nonlocal): New.
	(lookup_namespace_scope, cp_lookup_symbol_namespace)
	(lookup_symbol_file): Ditto.
	* c-lang.c (cplus_language_defn): Use cp_lookup_symbol_nonlocal.
	* block.h: Declare block_scope, block_using, block_global_block.
	* block.c (block_scope): New.
	(block_using, block_global_block): Ditto.
	* Makefile.in (cp_support_h): Depend on symtab_h.
	* config/djgpp/fnchange.lst: Add testsuite/gdb.c++/namespace1.cc.

2003-05-19  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/namespace.exp: Add namespace scope and anonymous
	namespace tests.
	Bump copyright date.
	* gdb.c++/namespace.cc: Add anonymous namespace and namespace C.
	(main): Call C::D::marker2.
	* gdb.c++/namespace1.cc: New file.
@
text
@@


1.2.8.1
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@@


1.1
log
@Forgot a file
@
text
@d71 64
d162 1
a163 5

  



@


1.1.26.1
log
@2002-10-22  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (buildsym.o): Depend on $(gdb_assert_h) and
	$(cp_support_h).
	(cp-support.o): Fix dependencies and add $(gdb_obstack_h) and
	$(gdb_assert_h).
	(symtab.o): Depend on $(cp_support_h).
	* symtab.h: Add opaque declaration for struct using_direct_node.
	(struct block): Add member 'language_specific'.
	(BLOCK_USING): New macro.
	* symtab.c: #include "cp-support.h"
	(lookup_symbol_aux): Call lookup_symbol_aux_nonlocal and
	lookup_symbol_aux_using when appropriate.
	(lookup_symbol_aux_nonlocal): New function.
	(lookup_symbol_aux_using): New function.
	(lookup_symbol_aux_using_loop): New function.
	* symfile.h: Add opaque declaration for struct obstack.
	Declare obsavestring to take a const char *.
	* symfile.c (obsavestring): Make first argument a const char *.
	* jv-lang.c (get_java_class_symtab): Initialize BLOCK_USING.
	* dwarf2read.c: New variable current_namespace.
	(scan_partial_symbols): Handle DW_TAG_namespace.
	(psymtab_to_symtab_1): Initialize current_namespace.
	(process_die): Handle DW_TAG_namespace,
	DW_TAG_imported_declaration, DW_TAG_imported_module.
	(read_namespace): New function.
	(dwarf2_name): New function.
	(dwarf2_extension): New function.
	(dwarf_tag_name): Add DWARF 3 names.
	(dwarf_attr_name): Ditto.
	(dwarf_type_encoding_name): Ditto.
	* cp-support.h: Opaque declaration for struct obstack.
	(struct using_direct): New struct.
	(struct using_direct_node): New struct.
	Add declarations for cp_add_using_obstack, cp_add_using_xmalloc,
	cp_copy_usings, cp_free_usings,	cp_find_first_component.
	* cp-support.c: #include "gdb_obstack.h", "gdb_assert.h".
	Comment on demangled name pitfalls.
	(cp_add_using_obstack): New function.
	(cp_add_using_xmalloc): New function.
	(cp_copy_usings): New function.
	(cp_free_usings): New function.
	(cp_find_first_component): New function.
	* buildsym.h: Declare processing_has_namespace_info.
	Declare add_using_directive.
	* buildsym.c: #include "gdb_assert.h", "cp-support.h".
	Change comment after #include "symfile.h".
	New variable using_list.
	(add_symbol_to_list): Scan for anonymous namespaces when
	appropriate.
	(scan_for_anonymous_namespaces): New function.
	(add_using_directive): New function.
	(start_symtab): Initialize processing_has_namespace_info,
	using_list.
	(end_symtab): Copy using_list into block.
	(copy_usings_to_obstack): New function.
	(finish_block): Set BLOCK_USING in general case and in C++
	function case.

2002-10-22  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add tests involving namespaces
	  starting from C.
	* gdb.c++/namespace.cc: Add namespaces with names starting
	  from C and their contents.
@
text
@a70 142
namespace
{
  int X = 9;

  namespace G
  {
    int Xg = 10;

    namespace
    {
      int XgX = 11;
    }
  }
}

namespace H
{
  int h = 14;
}

namespace I = H;

namespace J
{
  int j = 15;
}

using namespace J;

namespace K
{
  int k = 16;
}

namespace L
{
  using namespace K;
}

namespace O
{
  int o = 18;
}

namespace P
{
  using namespace O;
}

namespace Q
{
  using namespace P;
}

namespace R
{
  int r1 = 19;
  int r2 = 20;
}

using R::r1;

namespace C
{
  int c = 1;
  int shadow = 12;

  namespace
  {
    int cX = 6;
    
    namespace F
    {
      int cXf = 7;

      namespace
      {
	int cXfX = 8;
      }
    }
  }

  namespace C
  {
    int cc = 2;
  }

  namespace E
  {
    int ce = 4;
  }

  namespace D
  {
    int cd = 3;
    int shadow = 13;

    namespace E
    {
      int cde = 5;
    }

    namespace M
    {
      int cdm = 17;
    }

    using namespace M;

    void marker2 (void)
    {
      // NOTE: carlton/2002-10-11: I'm listing the expressions that I
      // plan to have GDB try to print out, just to make sure that the
      // compiler and I agree which ones should be legal!  It's easy
      // to screw up when testing the boundaries of namespace stuff.
      c;
      //cc;
      C::cc;
      cd;
      E::cde;
      shadow;
      //E::ce;
      cX;
      F::cXf;
      F::cXfX;
      X;
      G::Xg;
      G::XgX;
      I::h;
      j;
      L::k;
      //k;
      cdm;
      Q::o;
      //o;
      r1;
      //r2;
      return;
    }

  }
}
d97 6
a103 2
  C::D::marker2 ();
}
@


1.1.26.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.1.24.1
log
@2002-10-11  David Carlton  <carlton@@math.stanford.edu>

	* jv-lang.c (get_java_class_symtab): Initialize BLOCK_USING (bl)
	to NULL.
	* cp-support.c: Change all uses of 'struct using_data' and 'struct
	using_data_node' to 'struct using_direct' and 'struct
	using_direct_node'.
	(cp_free_usings): Fix loop.
	* symtab.c: Ditto.
	* symtab.h: Ditto
	* cp-support.h: Delete declarations for commented-out functions.
	Rename 'struct using_data' and 'struct using_data_node' to 'struct
	using_direct' and 'struct using_direct_node'.
	* cp-support.c: Delete commented-out functions.

2002-10-10  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_using_loop): New function.
	(lookup_symbol_aux_nonlocal): New function.
	(lookup_symbol_aux): Call lookup_symbol_aux_nonlocal instead of
	lookup_symbol_aux_symtabs and lookup_symbol_aux_psymtabs.

	* Makefile.in (symtab.o): Depend on $(cp_support_h).

	* symtab.c: #include "cp-support.h"

	* cp-support.h: Declare cp_copy_usings, cp_free_usings.

	* cp-support.c (cp_free_usings): New function.
	(cp_copy_usings): New function.

	* symtab.c (lookup_symbol_aux): Call lookup_symbol_aux_using to
	apply using directives.
	(lookup_symbol_aux_using): New function.

2002-10-11  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add tests from within C::D::marker2.
	* gdb.c++/namespace.cc: Add namespace C and its contents.
@
text
@a70 41
namespace C
{
  int c = 1;

  namespace C
  {
    int cc = 2;
  }

  namespace E
  {
    int ce = 4;
  }

  namespace D
  {
    int cd = 3;

    namespace E
    {
      int cde = 5;
    }

    void marker2 (void)
    {
      // NOTE: carlton/2002-10-11: I'm listing the expressions that I
      // plan to have GDB try to print out, just to make sure that the
      // compiler and I agree which ones should be legal!  It's easy
      // to screw up when testing the boundaries of namespace stuff.
      c;
      //cc;
      C::cc;
      cd;
      E::cde;
      //E::ce;
      return;
    }

  }
}

d97 6
a103 2
  C::D::marker2 ();
}
@


1.1.24.2
log
@2002-10-15  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_using_loop): prefix_len should be <=
	outer_length.
	(lookup_symbol_aux_using_loop): Don't skip colons in rest_of_outer
	if we've used all of outer.
	* cp-support.h: Rename declaration of cp_add_using to
	cp_add_using_obstack.
	* cp-support.c (cp_add_using_obstack): Rename from cp_add_using.
	* buildsym.h: Rename arguments in declaration of
	add_using_directive.
	* buildsym.c (add_using_directive): Finish definition, rename
	arguments.
	* cp-support.h: Add declaration for cp_add_using_xmalloc.
	* cp-support.c (cp_add_using_xmalloc): New function.
	* buildsym.c (copy_usings_to_obstack): New function.
	(end_symtab): Set STATIC_BLOCK's BLOCK_USING using
	copy_usings_to_obstack.

2002-10-15  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add anonymous namespace tests.
	* gdb.c++/namespace.cc: Add anonymous namespaces.
@
text
@a70 15
namespace
{
  int X = 9;

  namespace G
  {
    int Xg = 10;

    namespace
    {
      int XgX = 11;
    }
  }
}

a74 15
  namespace
  {
    int cX = 6;
    
    namespace F
    {
      int cXf = 7;

      namespace
      {
	int cXfX = 8;
      }
    }
  }

a105 6
      cX;
      F::cXf;
      F::cXfX;
      X;
      G::Xg;
      G::XgX;
d111 1
@


1.1.24.3
log
@2002-10-16  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (dwarf_tag_name): Add DWARF 3 names.
	(dwarf_attr_name): Ditto.
	(dwarf_type_encoding_name): Ditto.
	(scan_partial_symbols): Descend into DW_TAG_namespace entries.
	(process_die): Handle DW_TAG_namespace,
	DW_TAG_imported_declaration, DW_TAG_imported_module.
	(read_namespace): New function.

2002-10-17  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.cc: Add namespace renaming, using directives,
	and using declarations.
	* gdb.c++/namespace.exp: Add some xfails, including namespace
	renaming, using directives, and using declarations.
@
text
@a85 47
namespace H
{
  int h = 14;
}

namespace I = H;

namespace J
{
  int j = 15;
}

using namespace J;

namespace K
{
  int k = 16;
}

namespace L
{
  using namespace K;
}

namespace O
{
  int o = 18;
}

namespace P
{
  using namespace O;
}

namespace Q
{
  using namespace P;
}

namespace R
{
  int r1 = 19;
  int r2 = 20;
}

using R::r1;

a88 1
  int shadow = 12;
a117 1
    int shadow = 13;
a123 7
    namespace M
    {
      int cdm = 17;
    }

    using namespace M;

a134 1
      shadow;
a141 9
      I::h;
      j;
      L::k;
      //k;
      cdm;
      Q::o;
      //o;
      r1;
      //r2;
@


1.1.24.4
log
@2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (add_partial_enumeration): New function.
	(scan_partial_symbols): Call add_partial_enumeration.
	(locate_pdi_sibling): New function.
	(scan_partial_symbols): Call locate_pdi_sibling.  Get rid of
	nesting_level.
	(pdi_needs_namespace): New function.
	(add_partial_symbol): Add 'namespace' arg; calculate full name
	when appropriate.
	(scan_partial_symbols): Update calls to add_partial_symbol.
	(add_partial_enumeration): Ditto.
	(read_enumeration): Add processing_current_prefix to name when
	appropriate.
	(new_symbol): Set names of enumerators and typedefs appropriately
	if processing_has_namespace_info.
	* symtab.c (lookup_symbol_namespace): Rename 'namespace' argument
	to 'namespace_name'.
	* symtab.h: Ditto.
	* symtab.c (lookup_symbol_namespace): Delete FIXME comments; add a
	new one.
	(lookup_symbol_aux_file): New function.
	(lookup_symbol_aux): Delete FIXME comment.
	(lookup_symbol_aux): Don't search static block explicitly; delete
	FIXME comments.
	* valops.c (value_namespace_elt): Update call to
	lookup_symbol_namespace.
	* symtab.h: Update declaration for lookup_symbol_namespace.
	* symtab.c (lookup_symbol_namespace): Delete 'using' argument and
	add 'block' argument; get using directives via iterators.
	(lookup_symbol_aux_using_loop): Delete 'using' argument and add
	'block' argument.
	(lookup_symbol_aux_using): Don't calculate using directives.
	* block.c (block_using_iterator_first): New function.
	(block_using_iterator_next): Ditto.
	* block.h: Add comment.
	(struct block_using_iterator): New struct.
	Declare block_using_iterator_first, block_using_iterator_next.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (read_structure_scope): Set type name and
	processing_current_prefix appropriately.
	(new_symbol): Make sure that, in symbols associated to class
	types, the name includes appropriate namespaces.
	* buildsym.h: Rename processing_current_namespace to
	processing_current_prefix.
	* buildsym.c (finish_block): Ditto.
	* dwarf2read.c (psymtab_to_symtab_1): Ditto.
	(read_namespace): Ditto.  Also rename previous_namespace to
	previous_prefix.

	Now come a thousand and one const correctness fixes:
	* p-typeprint.c (pascal_print_type): Const.
	(pascal_type_print_method_args): Const.
	* p-lang.h: Const.
	* m2-typeprint.c (m2_print_type): Const.
	* valops.c (hand_function_call): Const.
	* jv-lang.c (java_primitive_type_from_name): Const.
	* jv-lang.h: Const.
	* jv-typeprint.c (java_print_type): Const.
	* language.c: (unk_lang_print_type): Const.
	* stack.c (frame_info): Const.
	* linespec.c (find_methods): Const.
	(find_method_name): Const
	* f-lang.h: Const.
	* f-typeprint.c (f_print_type): Const.
	* c-typeprint.c (c_print_type): Const.
	* c-lang.h: Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (lookup_primitive_typename): Const.
	* stack.c (print_frame): Const.
	(func_command): Delete pointless cast.
	* linespec.c (find_method_name): Const.
	* language.h: Const.
	* symfile.c (compare_psymbols): Const.
	* symtab.c (completion_list_add_name): Const.
	* breakpoint.c (break_at_finish_at_depth_command_1): Remove
	useless cast.
	(break_at_finish_command_1): Ditto.
	* typeprint.c (type_print): Const.
	* symtab.h: Const.
	* symtab.c (gdb_mangle_name): Const.
	(symbol_init_demangled_name): Const.
	(symbol_demangled_name): Const.
	* defs.h: Const.
	* printcmd.c (build_address_symbolic): Const.
	* valops.c (search_struct_method): Const.
	* cp-valprint.c (cp_is_vtbl_ptr_type): Const.
	(cp_print_value): Const.
	(cp_print_class_member): Const.
	* c-typeprint.c (cp_type_print_derivation_info): Const.
	(c_type_print_varspec_prefix): Const.
	(c_type_print_base): Const.
	* p-valprint.c (pascal_object_is_vtbl_ptr_type): Const.
	(pascal_object_print_value): Const.
	(pascal_object_print_class_member): Const.
	* p-typeprint.c (pascal_type_print_derivation_info): Const.
	(pascal_type_print_varspec_prefix): Const.
	(pascal_type_print_base): Const.
	* jv-typeprint.c (java_type_print_base): Const.
	* jv-lang.h (java_demangle_type_signature): Const.
	* jv-lang.c (java_demangle_type_signature): Const.
	(java_demangled_signature_length): Const.
	(java_demangled_signature_copy): Const.
	* jv-typeprint.c (java_type_print_derivation_info): Const.
	* jv-valprint.c (java_value_print): Const.
	(java_print_value_fields): Const.
	* jv-lang.c (is_object_type): Const.
	(evaluate_subexp_java): Const.
	* stabsread.c (read_cpp_abbrev): Const.
	(complain_about_struct_wipeout): Const.
	(cleanup_undefined_types): Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (add_name): Second arg const.
	(lookup_typename): Const.
	(lookup_unsigned_typename): Const.
	(lookup_signed_typename): Const.
	* linespec.c (find_methods): const char *class_name.
	* symtab.c (gdb_mangle_name): const char *newname.
	* valops.c (destructor_name_p): const char *dname.
	(search_struct_field): First arg const.
	* gdbtypes.c (check_typedef): const char *name (multiple places).
	(cfront_mangle_name): const char *newname.
	* gdbtypes.c (add_mangled_type): const char *tname.
	* valops.c (find_overload_match): const char *obj_type_name.
	* utils.c (gdb_print_host_address): Make first arg const.
	* defs.h: Declare first arg of gdb_print_host_address to be
	const.
	* valarith.c (find_size_for_pointer_math): const char *name.

2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc (main): Add marker comment.
	* gdb.c++/m-data.exp: Use marker comment instead of line numbers.
	* gdb.c++/m-data.cc: Delete superfluous namespace.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/m-static1.cc: Ditto.
	* carlton_runtest: Compare based on gdb.sum, not based on output.
	* carlton_runnamespace: Ditto.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Put tests for CClass.
	* gdb.c++/namespace.cc (C): Add CClass.
@
text
@a137 9
  class CClass {
  public:
    int x;
    class NestedClass {
    public:
      int y;
    };
  };

@


1.1.24.5
log
@2002-12-17  David Carlton  <carlton@@math.stanford.edu>

	* c-exp.y (yylex): Modify the #if 1 block to handle nested types
	in a more honest manner.
	* symtab.c (lookup_nested_type): New function.
	* symtab.h: Declare lookup_nested_type.

2002-12-16  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_partial_symbol): Don't search past the end of
	the partial symbols.
	* Makefile.in (f-exp.tab.c): Don't depend on c-exp.tab.c.
	* dwarf2read.c (new_symbol): Only make global symbols associated
	to structures, etc. if the current language is C++.
	(add_partial_symbol): Ditto (for partial symbols).

2002-12-17  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc: Whitespace cleanup, to match mainline patch.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/namespace.exp: Fix comment.  Delete third argument to
	all the gdb_tests.

2002-12-16  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change KFAIL messages to point to c++/XXX
	instead of gdb/XXX.
@
text
@a198 1
      //C::D::cd;
@


1.1.24.6
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d191 1
a191 1
      // NOTE: carlton/2003-04-23: I'm listing the expressions that I
a207 2
      //cXOtherFile;
      //XOtherFile;
a217 1

d249 1
a249 1
  
@


1.1.24.7
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* carlton_runnamespace: Ditto.
	* carlton_runtest: Ditto.
	* configure: Regnerate.
@
text
@@


