head	1.12;
access;
symbols
	cagney_x86i386-20030821-branch:1.11.0.2
	cagney_x86i386-20030821-branchpoint:1.11
	carlton_dictionary-20030805-merge:1.11
	carlton_dictionary-20030627-merge:1.10
	gdb_6_0-branch:1.10.0.28
	gdb_6_0-2003-06-23-branchpoint:1.10
	jimb-ppc64-linux-20030613-branch:1.10.0.26
	jimb-ppc64-linux-20030613-branchpoint:1.10
	cagney_writestrings-20030508-branch:1.10.0.24
	cagney_writestrings-20030508-branchpoint:1.10
	jimb-ppc64-linux-20030528-branch:1.10.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.10
	carlton_dictionary-20030523-merge:1.10
	cagney_fileio-20030521-branch:1.10.0.20
	cagney_fileio-20030521-branchpoint:1.10
	kettenis_i386newframe-20030517-mergepoint:1.10
	jimb-ppc64-linux-20030509-branch:1.10.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.10
	kettenis_i386newframe-20030504-mergepoint:1.10
	carlton_dictionary-20030430-merge:1.10
	kettenis_i386newframe-20030419-branch:1.10.0.16
	kettenis_i386newframe-20030419-branchpoint:1.10
	carlton_dictionary-20030416-merge:1.10
	cagney_frameaddr-20030409-mergepoint:1.10
	kettenis_i386newframe-20030406-branch:1.10.0.14
	kettenis_i386newframe-20030406-branchpoint:1.10
	cagney_frameaddr-20030403-branchpoint:1.10
	cagney_frameaddr-20030403-branch:1.10.0.12
	cagney_framebase-20030330-mergepoint:1.10
	cagney_framebase-20030326-branch:1.10.0.10
	cagney_framebase-20030326-branchpoint:1.10
	cagney_lazyid-20030317-branch:1.10.0.8
	cagney_lazyid-20030317-branchpoint:1.10
	kettenis-i386newframe-20030316-mergepoint:1.10
	offbyone-20030313-branch:1.10.0.6
	offbyone-20030313-branchpoint:1.10
	kettenis-i386newframe-20030308-branch:1.10.0.4
	kettenis-i386newframe-20030308-branchpoint:1.10
	carlton_dictionary-20030305-merge:1.10
	cagney_offbyone-20030303-branch:1.10.0.2
	cagney_offbyone-20030303-branchpoint:1.10
	carlton_dictionary-20030207-merge:1.8
	interps-20030203-mergepoint:1.8
	interps-20030202-branch:1.8.0.2
	interps-20030202-branchpoint:1.8
	cagney-unwind-20030108-branch:1.7.0.14
	cagney-unwind-20030108-branchpoint:1.7
	carlton_dictionary-20021223-merge:1.7
	gdb_5_3-2002-12-12-release:1.7
	carlton_dictionary-20021115-merge:1.7
	kseitz_interps-20021105-merge:1.7
	kseitz_interps-20021103-merge:1.7
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.12
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.10
	carlton_dictionary-20020920-branchpoint:1.7
	gdb_5_3-branch:1.7.0.8
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.7
	cagney_sysregs-20020825-branch:1.7.0.6
	cagney_sysregs-20020825-branchpoint:1.7
	readline_4_3-import-branch:1.7.0.4
	readline_4_3-import-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.6
	kseitz_interps-20020528-branch:1.7.0.2
	kseitz_interps-20020528-branchpoint:1.7
	cagney_regbuf-20020515-branch:1.6.0.6
	cagney_regbuf-20020515-branchpoint:1.6
	jimb-macro-020506-branch:1.6.0.4
	jimb-macro-020506-branchpoint:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.6
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.4
	gdb_5_1-2001-07-29-branchpoint:1.3
	dberlin-typesystem-branch:1.3.0.2
	dberlin-typesystem-branchpoint:1.3
	gdb-post-ptid_t-2001-05-03:1.3
	gdb-pre-ptid_t-2001-05-03:1.3
	insight-precleanup-2001-01-01:1.1.1.4
	gdb-post-protoization-2000-07-29:1.1.1.4
	gdb-pre-protoization-2000-07-29:1.1.1.4
	gdb-premipsmulti-2000-06-06-branch:1.1.1.4.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.4
	gdb-post-params-removal-2000-06-04:1.1.1.4
	gdb-pre-params-removal-2000-06-04:1.1.1.4
	gdb-post-params-removal-2000-05-28:1.1.1.4
	gdb-pre-params-removal-2000-05-28:1.1.1.4
	gdb_5_0-2000-05-19-release:1.1.1.4
	gdb_4_18_2-2000-05-18-release:1.1.1.4
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.4
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.4
	gdb_5_0-2000-04-10-branch:1.1.1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.4
	repo-unification-2000-02-06:1.1.1.4
	insight-2000-02-04:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.4
	gdb-2000-01-26:1.1.1.4
	gdb-2000-01-24:1.1.1.4
	gdb-2000-01-17:1.1.1.4
	gdb-2000-01-10:1.1.1.4
	gdb-2000-01-05:1.1.1.4
	gdb-1999-12-21:1.1.1.4
	gdb-1999-12-13:1.1.1.4
	gdb-1999-12-07:1.1.1.4
	gdb-1999-12-06:1.1.1.4
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.3
	gdb-1999-09-21:1.1.1.3
	gdb-1999-09-13:1.1.1.3
	gdb-1999-09-08:1.1.1.3
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2003.08.23.03.55.59;	author chastain;	state dead;
branches;
next	1.11;

1.11
date	2003.06.30.00.12.09;	author chastain;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.13.22.42.59;	author chastain;	state Exp;
branches
	1.10.28.1;
next	1.9;

1.9
date	2003.02.13.21.33.20;	author chastain;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.17.19.24.16;	author carlton;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.20.05.14.47;	author chastain;	state Exp;
branches
	1.7.10.1
	1.7.12.1;
next	1.6;

1.6
date	2002.01.20.19.46.32;	author drow;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2002.01.20.19.22.13;	author drow;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.07.22.02.23;	author drow;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.06.08.21.53;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.18.07.10.32;	author chastain;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.32;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.32;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.08.02.23.46.54;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.09.09.00.00.28;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.12.07.03.56.17;	author jsm;	state Exp;
branches;
next	;

1.6.6.1
date	2002.06.15.16.43.15;	author cagney;	state Exp;
branches;
next	;

1.7.10.1
date	2003.02.07.19.17.59;	author carlton;	state Exp;
branches;
next	1.7.10.2;

1.7.10.2
date	2003.03.06.00.56.36;	author carlton;	state Exp;
branches;
next	1.7.10.3;

1.7.10.3
date	2003.08.05.17.13.24;	author carlton;	state Exp;
branches;
next	1.7.10.4;

1.7.10.4
date	2003.08.30.03.40.34;	author chastain;	state dead;
branches;
next	;

1.7.12.1
date	2003.12.14.20.27.51;	author drow;	state dead;
branches;
next	;

1.10.28.1
date	2003.07.02.14.24.46;	author chastain;	state Exp;
branches;
next	1.10.28.2;

1.10.28.2
date	2003.08.25.03.53.48;	author chastain;	state dead;
branches;
next	;


desc
@@


1.12
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@# Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@@cygnus.com)

set ws "\[\r\n\t \]+"
set nl "\[\r\n\]+"

# The format of a g++ virtual base pointer.
set vbptr "(_vb\[$.\]|__vb_)\[0-9\]?"

if $tracelevel then {
	strace $tracelevel
}

if { [skip_cplus_tests] } { continue }

# Note - create separate "inherit" executable from misc.cc

set testfile "inherit"
set srcfile misc.cc
set binfile ${objdir}/${subdir}/${testfile}


# Create and source the file that provides information about the compiler
# used to compile the test case.

if [get_compiler_info ${binfile} "c++"] {
    return -1
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

#
# Single inheritance, print individual members.
#

proc test_print_si_members {} {
    # Print all members of g_A using fully qualified form.

    gdb_test "print g_A.A::a" ".* = 1" "print g_A.A::a"

    gdb_test "print g_A.A::x" ".* = 2" "print g_A.A::x"

    # Print members of g_A using nonambiguous compact form.

    gdb_test "print g_A.a" ".* = 1" "print g_A.a"

    gdb_test "print g_A.x" ".* = 2" "print g_A.x"

    # Print all members of g_B using fully qualified form.

    gdb_test "print g_B.A::a" ".* = 3" "print g_B.A::a"

    gdb_test "print g_B.A::x" ".* = 4" "print g_B.A::x"

    gdb_test "print g_B.B::b" ".* = 5" "print g_B.B::b"

    gdb_test "print g_B.B::x" ".* = 6" "print g_B.B::x"

    # Print members of g_B using nonambiguous compact form.

    gdb_test "print g_B.a" ".* = 3" "print g_B.a"

    gdb_test "print g_B.b" ".* = 5" "print g_B.b"

    gdb_test "print g_B.x" ".* = 6" "print g_B.x"

    # Print all members of g_C using fully qualified form.

    gdb_test "print g_C.A::a" ".* = 7" "print g_C.A::a"

    gdb_test "print g_C.A::x" ".* = 8" "print g_C.A::x"

    gdb_test "print g_C.C::c" ".* = 9" "print g_C.C::c"

    gdb_test "print g_C.C::x" ".* = 10" "print g_C.C::x"

    # Print members of g_C using nonambiguous compact form.

    gdb_test "print g_C.a" ".* = 7" "print g_C.a"

    gdb_test "print g_C.c" ".* = 9" "print g_C.c"

    gdb_test "print g_C.x" ".* = 10" "print g_C.x"
}

#
# Single inheritance, print type definitions.
#

proc test_ptype_si {} {
    global gdb_prompt
    global ws
    global nl
    global hp_aCC_compiler

    # Print class A as a type.

    send_gdb "ptype A\n"
    gdb_expect {
	-re "type = class A \{$nl.*\[ \]*int a;$nl\[ \]*int x;$nl.*\[ \]*\}$nl$gdb_prompt $" {
	    pass "ptype A (FIXME)"
	}
	-re "type = struct A \{$nl\[ \]*int a;$nl\[ \]*int x;$nl\[ \]*\}$nl$gdb_prompt $" {
	    setup_xfail "*-*-*"
	    fail "ptype A (FIXME)"
	}
	-re ".*$gdb_prompt $" { fail "ptype A" }
	timeout { fail "ptype A (timeout)" ; return }
    }

    # Print class A as an explicit class.

    send_gdb "ptype class A\n"
    gdb_expect {
	-re "type = class A \{$nl.*\[ \]*int a;$nl\[ \]*int x;$nl.*\[ \]*\}$nl$gdb_prompt $" {
	    pass "ptype class A (FIXME)"
	}
	-re "type = struct A \{$nl\[ \]*int a;$nl\[ \]*int x;$nl\[ \]*\}$nl$gdb_prompt $" {
            if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
	    fail "ptype class A (FIXME)"
	}
	-re ".*$gdb_prompt $" { fail "ptype class A" }
	timeout { fail "ptype class A (timeout)" ; return }
    }

    # Print type of an object of type A.

    send_gdb "ptype g_A\n"
    gdb_expect {
	-re "type = class A \{$nl.*\[ \]*int a;$nl\[ \]*int x;$nl.*\[ \]*\}$nl$gdb_prompt $" {
	    pass "ptype g_A (FIXME)"
	}
	-re "type = struct A \{$nl\[ \]*int a;$nl\[ \]*int x;$nl\[ \]*\}$nl$gdb_prompt $" {
            if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
	    fail "ptype g_A (FIXME)"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_A" }
	timeout { fail "ptype g_A (timeout)" ; return }
    }

    # Print class B as a type.

    gdb_test "ptype B" "type = class B : public A \{$nl\[ \]*public:$nl\[ \]*int b;$nl\[ \]*int x;$nl.*\}" "ptype B"

    # Print class B as an explicit class.

    gdb_test "ptype class B" "type = class B : public A \{$nl\[ \]*public:$nl\[ \]*int b;$nl\[ \]*int x;$nl.*\}" "ptype class B"

    # Print type of an object of type B.

    gdb_test "ptype g_B" "type = class B : public A \{$nl\[ \]*public:$nl\[ \]*int b;$nl\[ \]*int x;$nl.*\}" "ptype g_B"

    # Print class C as a type.

    gdb_test "ptype C" "type = class C : public A \{$nl\[ \]*public:$nl\[ \]*int c;$nl\[ \]*int x;$nl.*\}" "ptype C"

    # Print class C as an explicit class.

    gdb_test "ptype class C" "type = class C : public A \{$nl\[ \]*public:$nl\[ \]*int c;$nl\[ \]*int x;$nl.*\}" "ptype class C"

    # Print type of an object of type g_C.

    gdb_test "ptype g_C" "type = class C : public A \{$nl\[ \]*public:$nl\[ \]*int c;$nl\[ \]*int x;$nl.*\}" "ptype g_C"

    # gcc cygnus-2.3.3 (Q1) has this bug, but it was fixed as of
    # cygnus-2.3.3-930417.  PR 2819.
    send_gdb "ptype tagless_struct\n"
    gdb_expect {
	-re "type = class \{${ws}public:${ws}int one;${ws}int two;${ws}tagless_struct & operator=\\(tagless_struct (const ?)?&\\);${ws}tagless_struct\\(tagless_struct (const ?)?&\\);${ws}tagless_struct\\(\\);${ws}\}$nl$gdb_prompt $" {
	    pass "ptype tagless struct"
	}
	-re "type = class \{${ws}public:${ws}int one;${ws}int two;;${ws}\}$nl$gdb_prompt $" {
	    pass "ptype tagless struct"
	}
	-re "type = (struct|class).*\{.*int one;.*int two;.*\}$nl$gdb_prompt $" {
	    pass "ptype tagless struct (obsolete gcc or gdb)"
	}
	-re ".*$gdb_prompt $" {
	    fail "ptype tagless struct"
	}
	timeout {
	    fail "ptype tagless struct (timeout)"
	}
    }

    send_gdb "ptype v_tagless\n"
    gdb_expect {
	-re "type = class \{${ws}public:${ws}int one;${ws}int two;${ws}tagless_struct & operator=\\(tagless_struct (const ?)?&\\);${ws}tagless_struct\\(tagless_struct (const ?)?&\\);${ws}tagless_struct\\(\\);${ws}\}$nl$gdb_prompt $" {
	    pass "ptype variable of type tagless struct"
	}
	-re "type = class \{${ws}public:${ws}int one;${ws}int two;;${ws}\}$nl$gdb_prompt $" {
	    pass "ptype tagless struct"
	}
	-re "type = (struct|class).*\{.*int one;.*int two;.*\}$nl$gdb_prompt $" {
	    pass "ptype variable of type tagless struct (obsolete gcc or gdb)"
	}
	-re ".*$gdb_prompt $" {
	    fail "ptype variable of type tagless struct"
	}
	timeout {
	    fail "ptype variable of type tagless struct (timeout)"
	}
    }
}

#
# Single inheritance, print complete classes.
#

proc test_print_si_classes {} {
    # Print all members of g_A.

    gdb_test "print g_A" ".* = \{a = 1, x = 2\}" "print g_A"

    # Print all members of g_B.

    gdb_test "print g_B" ".* = \{\<(class |)A\> = \{a = 3, x = 4\}, b = 5, x = 6\}" "print g_B"

    # Print all members of g_C.

    gdb_test "print g_C" ".* = \{\<(class |)A\> = \{a = 7, x = 8\}, c = 9, x = 10\}" "print g_C"
}

#
# Single inheritance, print anonymous unions.
# GDB versions prior to 4.14 entered an infinite loop when printing
# the type of a class containing an anonymous union, and they were also
# incapable of printing the member of an anonymous union.
# We test the printing of the member first, and perform the other tests
# only if the test succeeds, to avoid the infinite loop.
#

proc test_print_anon_union {} {
    global gdb_prompt
    global ws
    global nl

    gdb_test "print g_anon_union.a" ".* = 2" "print anonymous union member"
    send_gdb "print g_anon_union\n"
    gdb_expect {
	-re ".* = \{one = 1, ( = |)\{a = 2, b = 2\}\}$nl$gdb_prompt $" {
	    pass "print variable of type anonymous union"
	}
	-re ".* = .*\{one = 1, ( = |)\{a = 2, b = .*\}\}$nl$gdb_prompt $" {
	    pass "print variable of type anonymous union (obsolete gcc or gdb)"
	}
	-re ".*$nl$gdb_prompt $" {
	    fail "print variable of type anonymous union"
	}
	timeout {
	    fail "print variableof type anonymous union (timeout)"
	}
    }
    send_gdb "ptype g_anon_union\n"
    gdb_expect {
	-re "type = class class_with_anon_union \{${ws}public:${ws}int one;${ws}union \{${ws}public:${ws}int a;${ws}long int b;${ws}union \{\.\.\.\} & operator=\\(union \{\.\.\.\} &\\);${ws}\\\$_0 \\(union \{\.\.\.\} &\\);${ws}\\\$_0 \\(\\);${ws}\};${ws}class_with_anon_union & operator=\\(class_with_anon_union const &\\);${ws}class_with_anon_union\\(class_with_anon_union const &\\);${ws}class_with_anon_union\\(void\\);${ws}\}$nl$gdb_prompt $" {
	    pass "print type of anonymous union"
	}
	-re "type = class class_with_anon_union \{${ws}public:${ws}int one;${ws}union \{${ws}int a;${ws}long int b;${ws}\};${ws}class_with_anon_union & operator=\\(class_with_anon_union const ?&\\);${ws}class_with_anon_union\\(class_with_anon_union const ?&\\);${ws}class_with_anon_union\\((void|)\\);${ws}\}$nl$gdb_prompt $" {
	    pass "print type of anonymous union"
	}
	-re "type = class class_with_anon_union \{${ws}public:${ws}int one;${ws}union \{${ws}int a;${ws}long int b;${ws}\};${ws}\}$nl$gdb_prompt $" {
	    pass "print type of anonymous union"
	}
	-re "type = (struct|class).*\{.*int one;.*union \{.*int a;.*(long|long int|int) b;.*\};.*\}$nl$gdb_prompt $" {
	    pass "print type of anonymous union (obsolete gcc or gdb)"
	}
	-re ".*$nl$gdb_prompt $" {
	    fail "print type of anonymous union"
	}
	timeout {
	    fail "print type of anonymous union (timeout)"
	}
    }
}

#
# Multiple inheritance, print individual members.
#

proc test_print_mi_members {} {
    global gdb_prompt
    global nl
    global hp_aCC_compiler

    # Print all members of g_A.

    gdb_test "print g_A.A::a" ".* = 1" "print g_A.A::a"
    
    gdb_test "print g_A.A::x" ".* = 2" "print g_A.A::x"

    # Print all members of g_B.

    gdb_test "print g_B.A::a" ".* = 3" "print g_B.A::a"

    gdb_test "print g_B.A::x" ".* = 4" "print g_B.A::x"

    gdb_test "print g_B.B::b" ".* = 5" "print g_B.B::b"

    gdb_test "print g_B.B::x" ".* = 6" "print g_B.B::x"

    # Print all members of g_C.

    gdb_test "print g_C.A::a" ".* = 7" "print g_C.A::a"

    gdb_test "print g_C.A::x" ".* = 8" "print g_C.A::x"

    gdb_test "print g_C.C::c" ".* = 9" "print g_C.C::c"

    gdb_test "print g_C.C::x" ".* = 10" "print g_C.C::x"

    # Print all members of g_D.

    # The following is ambiguous, and gdb should detect this.
    # For now, accept gdb's behavior as an expected failure if it
    # simply prints either member correctly.

    send_gdb "print g_D.A::a\n"
    gdb_expect {	
	-re "warning: A ambiguous; using D::C::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 15$nl$gdb_prompt $" {
	    pass "print g_D.A::a"
	}
	-re "warning: A ambiguous; using D::B::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 11$nl$gdb_prompt $" {
	    pass "print g_D.A::a (using B)"
	}
	-re ".* = 15$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_D.A::a"
	}
	-re ".* = 11$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_D.A::a"
	}
	-re ".*$gdb_prompt $" { fail "print g_D.A::a" }
	timeout { fail "print g_D.A::a (timeout)" ; return }
    }

    # The following is ambiguous, and gdb should detect this.
    # For now, accept gdb's behavior as an expected failure if it
    # simply prints either member correctly.

    send_gdb "print g_D.A::x\n"
    gdb_expect {
	-re "warning: A ambiguous; using D::C::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 16$nl$gdb_prompt $" {
	    pass "print g_D.A::x"
	}
	-re "warning: A ambiguous; using D::B::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 12$nl$gdb_prompt $" {
	    pass "print g_D.A::x (using B)"
	}
	-re ".* = 16$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_D.A::x"
	}
	-re ".* = 12$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_D.A::x"
	}
	-re ".*$gdb_prompt $" { fail "print g_D.A::x" }
	timeout { fail "print g_D.A::x (timeout)" ; return }
    }

    gdb_test "print g_D.B::b" ".* = 13" "print g_D.B::b"

    gdb_test "print g_D.B::x" ".* = 14" "print g_D.B::x"

    gdb_test "print g_D.C::c" ".* = 17" "print g_D.C::c"

    gdb_test "print g_D.C::x" ".* = 18" "print g_D.C::x"

    gdb_test "print g_D.D::d" ".* = 19" "print g_D.D::d"

    gdb_test "print g_D.D::x" ".* = 20" "print g_D.D::x"

    # Print all members of g_E.

    # The following is ambiguous, and gdb should detect this.
    # For now, accept gdb's behavior as an expected failure if it
    # simply prints either member correctly.

    send_gdb "print g_E.A::a\n"
    gdb_expect {
	-re ".* = 21$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_E.A::a"
	}
	-re ".* = 25$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_E.A::a"
	}
	-re ".*$gdb_prompt $" { fail "print g_E.A::a" }
	timeout { fail "print g_E.A::a (timeout)" ; return }
    }

    # The following is ambiguous, and gdb should detect this.
    # For now, accept gdb's behavior as an expected failure if it
    # simply prints either member correctly.

    send_gdb "print g_E.A::x\n"
    gdb_expect {
	-re "warning: A ambiguous; using E::D::C::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 26$nl$gdb_prompt $" {
	    pass "print g_E.A::x"
	}
	-re "warning: A ambiguous; using E::D::B::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 22$nl$gdb_prompt $" {
	    pass "print g_E.A::x (using B)"
	}
	-re ".* = 26$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_E.A::x"
	}
	-re ".* = 22$nl$gdb_prompt $" {
	    kfail "gdb/68" "print g_E.A::x"
	}
	-re ".*$gdb_prompt $" { fail "print g_E.A::x" }
	timeout { fail "print g_E.A::x (timeout)" ; return }
    }

    gdb_test "print g_E.B::b" ".* = 23" "print g_E.B::b"

    gdb_test "print g_E.B::x" ".* = 24" "print g_E.B::x"

    gdb_test "print g_E.C::c" ".* = 27" "print g_E.C::c"

    gdb_test "print g_E.C::x" ".* = 28" "print g_E.C::x"

    gdb_test "print g_E.D::d" ".* = 29" "print g_E.D::d"

    gdb_test "print g_E.D::x" ".* = 30" "print g_E.D::x"

    gdb_test "print g_E.E::e" ".* = 31" "print g_E.E::e"

    gdb_test "print g_E.E::x" ".* = 32" "print g_E.E::x"
}

#
# Multiple inheritance, print type definitions.
#

proc test_ptype_mi {} {
    global nl

    gdb_test "ptype D" "type = class D : public B, public C \{$nl\[ \]*public:$nl\[ \]*int d;$nl\[ \]*int x;$nl.*\}" "ptype D"

    gdb_test "ptype class D" "type = class D : public B, public C \{$nl\[ \]*public:$nl\[ \]*int d;$nl\[ \]*int x;$nl.*\}" "ptype class D"

    gdb_test "ptype g_D" "type = class D : public B, public C \{$nl\[ \]*public:$nl\[ \]*int d;$nl\[ \]*int x;$nl.*\}" "ptype g_D"

    gdb_test "ptype E" "type = class E : public D \{$nl\[ \]*public:$nl\[ \]*int e;$nl\[ \]*int x;$nl.*\}" "ptype E"

    gdb_test "ptype class E" "type = class E : public D \{$nl\[ \]*public:$nl\[ \]*int e;$nl\[ \]*int x;$nl.*\}" "ptype class E"

    gdb_test "ptype g_E" "type = class E : public D \{$nl\[ \]*public:$nl\[ \]*int e;$nl\[ \]*int x;$nl.*\}" "ptype g_E"
}

#
# Multiple inheritance, print complete classes.
#

proc test_print_mi_classes {} {
    # Print all members of g_D.

    gdb_test "print g_D" ".* = \{\<(class |)B\> = \{\<(class |)A\> = \{a = 11, x = 12\}, b = 13, x = 14\}, \<(class |)C\> = \{\<(class |)A\> = \{a = 15, x = 16\}, c = 17, x = 18\}, d = 19, x = 20\}" "print g_D"

    # Print all members of g_E.

    gdb_test "print g_E" ".* = \{\<(class |)D\> = \{\<(class |)B\> = \{\<(class |)A\> = \{a = 21, x = 22\}, b = 23, x = 24\}, \<(class |)C\> = \{\<(class |)A\> = \{a = 25, x = 26\}, c = 27, x = 28\}, d = 29, x = 30\}, e = 31, x = 32\}" "print g_E"
}

#
# Single virtual inheritance, print individual members.
#

proc test_print_svi_members {} {
    global gdb_prompt
    global decimal
    global nl

    # Print all members of g_vA.

    gdb_test "print g_vA.vA::va" ".* = 1" "print g_vA.vA::va"

    gdb_test "print g_vA.vA::vx" ".* = 2" "print g_vA.vA::vx"

    # Print members of g_vA using compact form.

    gdb_test "print g_vA.va" ".* = 1" "print g_vA.va"

    gdb_test "print g_vA.vx" ".* = 2" "print g_vA.vx"

    # Print all members of g_vB.

    send_gdb "print g_vB.vA::va\n"
    gdb_expect {
	-re ".* = 3$nl$gdb_prompt $" { pass "print g_vB.vA::va" }
	-re ".*virtual baseclass botch.*$gdb_prompt $" {
	    # Does not happen with gcc cygnus-2.4.5-930828
	    fail "print g_vB.vA::va (known bug with gcc cygnus-2.4.5-930417)"
	    # Many of the rest of these tests have the same problem.
	    return 0
	}
	-re ".*$gdb_prompt $" { fail "print g_vB.vA::va" }
	timeout { fail "print g_vB.vA::va (timeout)" ; return }
    }

    gdb_test "print g_vB.vA::vx" ".* = 4" "print g_vB.vA::vx"

    gdb_test "print g_vB.vB::vb" ".* = 5" "print g_vB.vB::vb"

    gdb_test "print g_vB.vB::vx" ".* = 6" "print g_vB.vB::vx"

    # Print members of g_vB using compact form.

    gdb_test "print g_vB.va" ".* = 3" "print g_vB.va"

    gdb_test "print g_vB.vb" ".* = 5" "print g_vB.vb"

    gdb_test "print g_vB.vx" ".* = 6" "print g_vB.vx"

    # Print all members of g_vC.

    gdb_test "print g_vC.vA::va" ".* = 7" "print g_vC.vA::va"

    gdb_test "print g_vC.vA::vx" ".* = 8" "print g_vC.vA::vx"

    gdb_test "print g_vC.vC::vc" ".* = 9" "print g_vC.vC::vc"

    gdb_test "print g_vC.vC::vx" ".* = 10" "print g_vC.vC::vx"

    # Print members of g_vC using compact form.

    gdb_test "print g_vC.va" ".* = 7" "print g_vC.va"

    gdb_test "print g_vC.vc" ".* = 9" "print g_vC.vc"

    gdb_test "print g_vC.vx" ".* = 10" "print g_vC.vx"
}

#
# Single virtual inheritance, print type definitions.
#

proc test_ptype_vi {} {
    global gdb_prompt
    global ws
    global nl
    global vbptr

    # This class does not use any C++-specific features, so it's fine for
    # it to print as "struct".
    send_gdb "ptype vA\n"
    gdb_expect {
	-re "type = class vA \{$nl\[ \]*public:$nl\[ \]*int va;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype vA"
	}
	-re "type = struct vA \{$nl\[ \]*int va;$nl\[ \]*int vx;$nl\}$nl$gdb_prompt $" {
	    pass "ptype vA"
	}
	-re ".*$gdb_prompt $" { fail "ptype vA" }
	timeout { fail "ptype vA (timeout)" ; return }
    }

    # This class does not use any C++-specific features, so it's fine for
    # it to print as "struct".
    send_gdb "ptype class vA\n"
    gdb_expect {
	-re "type = class vA \{$nl\[ \]*public:$nl\[ \]*int va;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype class vA"
	}
	-re "type = struct vA \{$nl\[ \]*int va;$nl\[ \]*int vx;$nl\}$nl$gdb_prompt $" {
	    pass "ptype class vA"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vA" }
	timeout { fail "ptype class vA (timeout)" ; return }
    }

    # This class does not use any C++-specific features, so it's fine for
    # it to print as "struct".
    send_gdb "ptype g_vA\n"
    gdb_expect {
	-re "type = class vA \{$nl\[ \]*public:$nl\[ \]*int va;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype g_vA"
	}
	-re "type = struct vA \{$nl\[ \]*int va;$nl\[ \]*int vx;$nl\}$nl$gdb_prompt $" {
	    pass "ptype g_vA"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vA" }
	timeout { fail "ptype g_vA (timeout)" ; return }
    }

    send_gdb "ptype vB\n"
    gdb_expect {
	-re "ptype vB${nl}type = class vB : public virtual vA \{$nl  private:${ws}vA \\*${vbptr}vA;$nl  public:${ws}int vb;${ws}int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype vB"
	}
	-re "ptype vB${nl}type = class vB : public virtual vA \{$nl  public:${ws}int vb;${ws}int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype vB (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype vB" }
	timeout { fail "ptype vB (timeout)" }
    }

    send_gdb "ptype class vB\n"
    gdb_expect {
	-re "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype class vB"
	}
	-re "type = class vB : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype class vB (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vB" }
	timeout { fail "ptype class vB (timeout)" }
    }

    send_gdb "ptype g_vB\n"
    gdb_expect {
	-re "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype g_vB"
	}
	-re "type = class vB : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype g_vB (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vB" }
	timeout { fail "ptype g_vB (timeout)" }
    }

    send_gdb "ptype vC\n"
    gdb_expect {
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype vC"
	}
	-re "type = class vC : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype vC (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype vC" }
	timeout { fail "ptype vC (timeout)" }
    }

    send_gdb "ptype class vC\n"
    gdb_expect {
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype class vC"
	}
	-re "type = class vC : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype class vC (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vC" }
	timeout { fail "ptype class vC (timeout)" }
    }

    send_gdb "ptype g_vC\n"
    gdb_expect {
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype g_vC"
	}
	-re "type = class vC : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype g_vC (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vC" }
	timeout { fail "ptype g_vC (timeout)" }
    }
}

#
# Single virtual inheritance, print complete classes.
#

proc test_print_svi_classes {} {
    global gdb_prompt
    global hex
    global decimal
    global nl
    global vbptr

    # Print all members of g_vA.

    gdb_test "print g_vA" ".* = \{va = 1, vx = 2\}" "print g_vA"

    # Print all members of g_vB.

    send_gdb "print g_vB\n"
    gdb_expect {
	-re ".* = \{\<class vA\> = \{va = 3, vx = 4\}, vb = 5, vx = 6, Virtual table at $hex\}$nl$gdb_prompt $" {
           pass "print g_vB (aCC)"
	}
	-re ".* = \{\<class vA\> = \{va = 3, vx = 4\}, vb = 5, vx = 6, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vB (aCC)"
	}
	-re ".* = \{\<vA\> = \{va = 3, vx = 4\}, ${vbptr}vA = $hex, vb = 5, vx = 6\}$nl$gdb_prompt $" {
	    pass "print g_vB"
	}
	-re ".* = \{\<vA\> = \{va = 3, vx = 4\}, _vptr.vB = $hex, vb = 5, vx = 6\}$nl$gdb_prompt $" {
	    pass "print g_vB (FIXME v3 vtbl ptr)"
	}
	-re ".* = \{\<vA\> = \{va = 3, vx = 4\}, _vptr.vB = $hex <VTT for vB>, vb = 5, vx = 6\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vB"
	}

	-re ".*invalid address 0x0.*$gdb_prompt $" {
	    # Does not happen with gcc cygnus-2.4.5-930828
	    fail "print g_vB (known bug with gcc cygnus-2.4.5-930417)"
	    # Many of the rest of these tests have the same problem.
	    return 0
	}
	-re ".*$gdb_prompt $" { fail "print g_vB" }
	timeout { fail "print g_vB (timeout)" ; return }
    }

    # Print all members of g_vC.

    send_gdb "print g_vC\n"
    gdb_expect {
	-re ".* = \{\<class vA\> = \{va = 7, vx = 8\}, vc = 9, vx = 10, Virtual table at $hex\}$nl$gdb_prompt $" {
	    pass "print g_vC (aCC)"
	}
	-re ".* = \{\<class vA\> = \{va = 7, vx = 8\}, vc = 9, vx = 10, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vC (aCC)"
	}
	-re ".* = \{\<vA\> = \{va = 7, vx = 8\}, ${vbptr}vA = $hex, vc = 9, vx = 10\}$nl$gdb_prompt $" {
	    pass "print g_vC"
	}
	-re ".* = \{\<vA\> = \{va = 7, vx = 8\}, _vptr.vC = $hex, vc = 9, vx = 10\}$nl$gdb_prompt $" {
	    pass "print g_vC (FIXME v3 vtbl ptr)"
	}
	-re ".* = \{\<vA\> = \{va = 7, vx = 8\}, _vptr.vC = $hex <VTT for vC>, vc = 9, vx = 10\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vC"
	}
	-re ".*$gdb_prompt $" { fail "print g_vC" }
	timeout { fail "print g_vC (timeout)" }
    }
}

#
# Multiple virtual inheritance, print individual members.
#

proc test_print_mvi_members {} {
    global gdb_prompt
    global decimal
    global nl

    # Print all members of g_vD.

    send_gdb "print g_vD.vA::va\n"
    gdb_expect {
	-re ".* = 19$nl$gdb_prompt $" { pass "print g_vD.vA::va" }
	-re ".*virtual baseclass botch.*$gdb_prompt $" {
	    # Does not happen with gcc cygnus-2.4.5-930828
	    fail "print g_vD.vA::va (known bug with gcc cygnus-2.4.5-930417)"
	    # Many of the rest of these tests have the same problem.
	    return 0
	}
	-re ".*$gdb_prompt $" { fail "print g_vD.vA::va" }
	timeout { fail "print g_vD.vA::va (timeout)" ; return }
    }

    gdb_test "print g_vD.vA::vx" ".* = 20" "print g_vD.vA::vx"

    gdb_test "print g_vD.vB::vb" ".* = 21" "print g_vD.vB::vb"

    gdb_test "print g_vD.vB::vx" ".* = 22" "print g_vD.vB::vx"

    gdb_test "print g_vD.vC::vc" ".* = 23" "print g_vD.vC::vc"

    gdb_test "print g_vD.vC::vx" ".* = 24" "print g_vD.vC::vx"

    gdb_test "print g_vD.vD::vd" ".* = 25" "print g_vD.vD::vd"

    gdb_test "print g_vD.vD::vx" ".* = 26" "print g_vD.vD::vx"

    # Print all members of g_vE.

    gdb_test "print g_vE.vA::va" ".* = 0" "print g_vE.vA::va"

    gdb_test "print g_vE.vA::vx" ".* = 0" "print g_vE.vA::vx"

    gdb_test "print g_vE.vB::vb" ".* = 0" "print g_vE.vB::vb"

    gdb_test "print g_vE.vB::vx" ".* = 0" "print g_vE.vB::vx"

    gdb_test "print g_vE.vC::vc" ".* = 0" "print g_vE.vC::vc"

    gdb_test "print g_vE.vC::vx" ".* = 0" "print g_vE.vC::vx"

    gdb_test "print g_vE.vD::vd" ".* = 0" "print g_vE.vD::vd"

    gdb_test "print g_vE.vD::vx" ".* = 0" "print g_vE.vD::vx"

    gdb_test "print g_vE.vE::ve" ".* = 27" "print g_vE.vE::ve"

    gdb_test "print g_vE.vE::vx" ".* = 28" "print g_vE.vE::vx"
}

#
# Multiple virtual inheritance, print type definitions.
#

proc test_ptype_mvi {} {
    global gdb_prompt
    global ws
    global nl
    global vbptr

    send_gdb "ptype vD\n"
    gdb_expect {
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \\*${vbptr}vC;${ws}vB \\*${vbptr}vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype vD"
	}
        -re ".*class vD : public virtual vB, public virtual vC \{${ws}public:${ws}int vd;${ws}int vx;.*\}.*$gdb_prompt $" {
	    pass "ptype vD"
	}
	-re ".*$gdb_prompt $" { fail "ptype vD" }
	timeout { fail "(timeout) ptype vD" }
    }

    send_gdb "ptype class vD\n"
    gdb_expect {
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \\*${vbptr}vC;${ws}vB \\*${vbptr}vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype class vD"
	}
	-re ".*class vD : public virtual vB, public virtual vC \{${ws}public:${ws}int vd;${ws}int vx;.*\}.*$gdb_prompt $" {
	    pass "ptype class vD"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vD" }
	timeout { fail "(timeout) ptype class vD" }
    }

    send_gdb "ptype g_vD\n"
    gdb_expect {
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \\*${vbptr}vC;${ws}vB \\*${vbptr}vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype g_vD"
	}
	-re ".*class vD : public virtual vB, public virtual vC \{${ws}public:${ws}int vd;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype g_vD"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vD" }
	timeout { fail "(timeout) ptype g_vD" }
    }

    send_gdb "ptype vE\n"
    gdb_expect {
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \\*${vbptr}vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype vE"
	}
	-re ".*class vE : public virtual vD \{${ws}public:${ws}int ve;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype vE"
	}
	-re ".*$gdb_prompt $" { fail "ptype vE" }
	timeout { fail "(timeout) ptype vE" }
    }

    send_gdb "ptype class vE\n"
    gdb_expect {
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \\*${vbptr}vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype class vE"
	}
	-re "type = class vE : public virtual vD \{${ws}public:${ws}int ve;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype class vE"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vE" }
	timeout { fail "(timeout) ptype class vE" }
    }

    send_gdb "ptype g_vE\n"
    gdb_expect {
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \\*${vbptr}vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype g_vE"
	}
	-re "type = class vE : public virtual vD \{${ws}public:${ws}int ve;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype g_vE"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vE" }
	timeout { fail "(timeout) ptype g_vE" }
    }
}

#
# Multiple virtual inheritance, print complete classes.
#

proc test_print_mvi_classes {} {
    global gdb_prompt
    global hex
    global decimal
    global nl
    global vbptr

    # Print all members of g_vD.

    send_gdb "print g_vD\n"
    gdb_expect {
	-re ".* = \{\<class vB\> = \{\<class vA\> = \{va = 19, vx = 20\}, vb = 21, vx = 22, Virtual table at $hex\}, \<class vC\> = \{vc = 23, vx = 24, Virtual table at $hex\}, vd = 25, vx = 26, Virtual table at $hex\}$nl$gdb_prompt $" {
	    pass "print g_vD (aCC)"
	}
	-re ".* = \{\<class vB\> = \{\<class vA\> = \{va = 19, vx = 20\}, vb = 21, vx = 22, __vfp = $hex\}, \<class vC\> = \{vc = 23, vx = 24, __vfp = $hex\}, vd = 25, vx = 26, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vD (aCC)"
	}
	-re ".* = \{\<vB\> = \{\<vA\> = \{va = 19, vx = 20\}, ${vbptr}vA = $hex, vb = 21, vx = 22\}, \<vC\> = \{${vbptr}vA = $hex, vc = 23, vx = 24\}, ${vbptr}vC = $hex, ${vbptr}vB = $hex, vd = 25, vx = 26\}$nl$gdb_prompt $" {
	    pass "print g_vD"
	}
	-re ".* = \{\<vB\> = \{\<vA\> = \{va = 19, vx = 20\}, _vptr.vB = $hex, vb = 21, vx = 22\}, \<vC\> = \{_vptr.vC = $hex, vc = 23, vx = 24\}, _vptr.vD = $hex, vd = 25, vx = 26\}$nl$gdb_prompt $" {
	    pass "print g_vD (FIXME v3 vtbl ptr)"
	}
	-re ".* = \{\<vB\> = \{\<vA\> = \{va = 19, vx = 20\}, _vptr.vB = $hex, vb = 21, vx = 22\}, \<vC\> = \{_vptr.vC = $hex <VTT for vD>, vc = 23, vx = 24\}, _vptr.vD = $hex, vd = 25, vx = 26\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vD"
	}
	-re ".*invalid address 0x0.*$gdb_prompt $" {
	    # Does not happen with gcc cygnus-2.4.5-930828
	    fail "print g_vD (known bug with gcc cygnus-2.4.5-930417)"
	    # Many of the rest of these tests have the same problem.
	    return 0
	}
	-re ".*$gdb_prompt $" { fail "print g_vD" }
	timeout { fail "print g_vD (timeout)" ; return }
    }

    # Print all members of g_vE.

    send_gdb "print g_vE\n"
    gdb_expect {
	-re ".* = \{\<class vD\> = \{\<class vB\> = \{\<class vA\> = \{va = 0, vx = 0\}, vb = 0, vx = 0, Virtual table at $hex\}, \<class vC\> = \{vc = 0, vx = 0, Virtual table at $hex\}, vd = 0, vx = 0, Virtual table at $hex\}, ve = 27, vx = 28, Virtual table at $hex\}$nl$gdb_prompt $" {
	    pass "print g_vE (aCC)"
	}
	-re ".* = \{\<class vD\> = \{\<class vB\> = \{\<class vA\> = \{va = 0, vx = 0\}, vb = 0, vx = 0, __vfp = $hex\}, \<class vC\> = \{vc = 0, vx = 0, __vfp = $hex\}, vd = 0, vx = 0, __vfp = $hex\}, ve = 27, vx = 28, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vE (aCC)"
	}
	-re ".* = \{\<vD\> = \{\<vB\> = \{\<vA\> = \{va = 0, vx = 0\}, ${vbptr}vA = $hex, vb = 0, vx = 0\}, \<vC\> = \{${vbptr}vA = $hex, vc = 0, vx = 0\}, ${vbptr}vC = $hex, ${vbptr}vB = $hex, vd = 0, vx = 0\}, ${vbptr}vD = $hex, ve = 27, vx = 28\}$nl$gdb_prompt $" {
	    pass "print g_vE"
	}
	-re ".* = \{\<vD\> = \{\<vB\> = \{\<vA\> = \{va = 0, vx = 0\}, _vptr.vB = $hex *(\<VTT for vD\>)?, vb = 0, vx = 0\}, \<vC\> = \{_vptr.vC = $hex *(\<VTT for vD\>)?, vc = 0, vx = 0\}, _vptr.vD = $hex, vd = 0, vx = 0\}, _vptr.vE = $hex, ve = 27, vx = 28\}$nl$gdb_prompt $" {
	    pass "print g_vE (FIXME v3 vtbl ptr)"
	}
	-re ".*$gdb_prompt $" { fail "print g_vE" }
	timeout { fail "print g_vE (timeout)" }
    }
}

proc do_tests {} {
    global prms_id
    global bug_id
    global subdir
    global objdir
    global srcdir
    global binfile

    set prms_id 0
    set bug_id 0

    # Start with a fresh gdb.

    gdb_exit
    gdb_start
    gdb_reinitialize_dir $srcdir/$subdir
    gdb_load $binfile

    gdb_test "set language c++" ""
    gdb_test "set width 0" ""

    # Get the debug format for the compiled test case.

    if { ![ runto_main] } {
	gdb_suppress_tests;
    }

    test_ptype_si
    test_ptype_mi
    test_ptype_vi
    test_ptype_mvi

    gdb_stop_suppressing_tests;
    
    if { ![ runto 'inheritance2' ] } {
	gdb_suppress_tests;
    }

    test_print_si_members
    test_print_si_classes
    test_print_mi_members
    test_print_mi_classes
    test_print_anon_union

    gdb_stop_suppressing_tests;

    if { ![ runto 'inheritance4' ] } {
	gdb_suppress_tests;
    }

    test_print_svi_members
    test_print_svi_classes
    test_print_mvi_members
    test_print_mvi_classes
}

do_tests
@


1.11
log
@2003-06-29  Michael Chastain  <mec@@shout.net>

	* gdb.c++/inherit.exp (test_print_svi_classes): Accept gdb
	output of '<VTT for class>' for virtual base classes.
@
text
@@


1.10
log
@2003-02-13  Michael Chastain  <mec@@shout.net>

	* gdb.c++/inherit.exp: Remove call to get_debug_format.
@
text
@d707 8
d741 7
d923 7
@


1.10.28.1
log
@2003-06-29  Michael Chastain  <mec@@shout.net>

	* gdb.c++/inherit.exp (test_print_svi_classes): Accept gdb
	output of '<VTT for class>' for virtual base classes.
@
text
@a706 8
	-re ".* = \{\<vA\> = \{va = 3, vx = 4\}, _vptr.vB = $hex <VTT for vB>, vb = 5, vx = 6\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vB"
	}

a732 7
	-re ".* = \{\<vA\> = \{va = 7, vx = 8\}, _vptr.vC = $hex <VTT for vC>, vc = 9, vx = 10\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vC"
	}
a907 7
	}
	-re ".* = \{\<vB\> = \{\<vA\> = \{va = 19, vx = 20\}, _vptr.vB = $hex, vb = 21, vx = 22\}, \<vC\> = \{_vptr.vC = $hex <VTT for vD>, vc = 23, vx = 24\}, _vptr.vD = $hex, vd = 25, vx = 26\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vD"
@


1.10.28.2
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@@


1.9
log
@2003-02-12  Michael Chastain  <mec@@shout.net>

	* gdb.c++/classes.exp: Remove setup_xfail_format for DWARF 1.
	* gdb.c++/inherit.exp: Likewise.
	* gdb.c++/cplusfuncs.exp: Remove suppression logic for DWARF 1.
	* gdb.c++/templates.exp: Likewise.
	* gdb.c++/virtfunc.exp: Likewise.
@
text
@a964 2
    } else {
	get_debug_format
@


1.8
log
@2003-01-17  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/inherit.exp (test_print_mi_members): KFAIL tests
	corresponding to PR c++/68.

(and fix date of previous ChangeLog entry; oops.)
@
text
@a81 1
    setup_xfail_format "DWARF 1"
a99 1
    setup_xfail_format "DWARF 1"
a163 1
    setup_xfail_format "DWARF 1"
a167 1
    setup_xfail_format "DWARF 1"
a171 1
    setup_xfail_format "DWARF 1"
a175 1
    setup_xfail_format "DWARF 1"
a179 1
    setup_xfail_format "DWARF 1"
a183 1
    setup_xfail_format "DWARF 1"
a237 1
    setup_xfail_format "DWARF 1"
a241 1
    setup_xfail_format "DWARF 1"
a258 1
    setup_xfail_format "DWARF 1"
a259 1
    setup_xfail_format "DWARF 1"
a274 1
    setup_xfail_format "DWARF 1"
a382 1
    setup_xfail_format "DWARF 1"
a384 1
    setup_xfail_format "DWARF 1"
a434 1
    setup_xfail_format "DWARF 1"
a436 1
    setup_xfail_format "DWARF 1"
a454 1
    setup_xfail_format "DWARF 1"
a456 1
    setup_xfail_format "DWARF 1"
a458 1
    setup_xfail_format "DWARF 1"
a460 1
    setup_xfail_format "DWARF 1"
a462 1
    setup_xfail_format "DWARF 1"
a464 1
    setup_xfail_format "DWARF 1"
a474 1
    setup_xfail_format "DWARF 1"
a478 1
    setup_xfail_format "DWARF 1"
a504 1
    setup_xfail_format "DWARF 1"
a517 1
    setup_xfail_format "DWARF 1"
a525 1
    setup_xfail_format "DWARF 1"
a533 1
    setup_xfail_format "DWARF 1"
a535 1
    setup_xfail_format "DWARF 1"
a543 1
    setup_xfail_format "DWARF 1"
a602 1
    setup_xfail_format "DWARF 1"
a614 1
    setup_xfail_format "DWARF 1"
a626 1
    setup_xfail_format "DWARF 1"
a638 1
    setup_xfail_format "DWARF 1"
a650 1
    setup_xfail_format "DWARF 1"
a662 1
    setup_xfail_format "DWARF 1"
a692 1
    setup_xfail_format "DWARF 1"
a718 1
    setup_xfail_format "DWARF 1"
a748 1
    setup_xfail_format "DWARF 1"
a761 1
    setup_xfail_format "DWARF 1"
a763 1
    setup_xfail_format "DWARF 1"
a765 1
    setup_xfail_format "DWARF 1"
a767 1
    setup_xfail_format "DWARF 1"
a769 1
    setup_xfail_format "DWARF 1"
a777 1
    setup_xfail_format "DWARF 1"
a779 1
    setup_xfail_format "DWARF 1"
a781 1
    setup_xfail_format "DWARF 1"
a783 1
    setup_xfail_format "DWARF 1"
a785 1
    setup_xfail_format "DWARF 1"
a787 1
    setup_xfail_format "DWARF 1"
a789 1
    setup_xfail_format "DWARF 1"
a808 1
    setup_xfail_format "DWARF 1"
a820 1
    setup_xfail_format "DWARF 1"
a832 1
    setup_xfail_format "DWARF 1"
a844 1
    setup_xfail_format "DWARF 1"
a856 1
    setup_xfail_format "DWARF 1"
a868 1
    setup_xfail_format "DWARF 1"
a894 1
    setup_xfail_format "DWARF 1"
a920 1
    setup_xfail_format "DWARF 1"
@


1.7
log
@2002-05-19  Michael Chastain  <mec@@shout.net>

	* gdb.c++/inherit.exp: Accept "VTT for ..." in output strings.
@
text
@d1 1
a1 1
# Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002
a351 1
    if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d361 1
a361 1
	    fail "print g_D.A::a (FIXME)"
d364 1
a364 1
	    fail "print g_D.A::a (FIXME)"
a373 1
    if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d383 1
a383 1
	    fail "print g_D.A::x (FIXME)"
d386 1
a386 1
	    fail "print g_D.A::x (FIXME)"
a411 1
    setup_xfail "*-*-*"
d415 1
a415 1
	    fail "print g_E.A::a (FIXME)"
d418 1
a418 1
	    fail "print g_E.A::a (FIXME)"
a427 1
    if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d437 1
a437 1
	    fail "print g_E.A::x (FIXME)"
d440 1
a440 1
	    fail "print g_E.A::x (FIXME)"
@


1.7.12.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.7.10.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1 1
a1 1
# Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003
d352 1
d362 1
a362 1
	    kfail "gdb/68" "print g_D.A::a"
d365 1
a365 1
	    kfail "gdb/68" "print g_D.A::a"
d375 1
d385 1
a385 1
	    kfail "gdb/68" "print g_D.A::x"
d388 1
a388 1
	    kfail "gdb/68" "print g_D.A::x"
d414 1
d418 1
a418 1
	    kfail "gdb/68" "print g_E.A::a"
d421 1
a421 1
	    kfail "gdb/68" "print g_E.A::a"
d431 1
d441 1
a441 1
	    kfail "gdb/68" "print g_E.A::x"
d444 1
a444 1
	    kfail "gdb/68" "print g_E.A::x"
@


1.7.10.2
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d82 1
d101 1
d166 1
d171 1
d176 1
d181 1
d186 1
d191 1
d246 1
d251 1
d269 1
d271 1
d287 1
d396 1
d399 1
d450 1
d453 1
d472 1
d475 1
d478 1
d481 1
d484 1
d487 1
d498 1
d503 1
d530 1
d544 1
d553 1
d562 1
d565 1
d574 1
d634 1
d647 1
d660 1
d673 1
d686 1
d699 1
d730 1
d757 1
d788 1
d802 1
d805 1
d808 1
d811 1
d814 1
d823 1
d826 1
d829 1
d832 1
d835 1
d838 1
d841 1
d861 1
d874 1
d887 1
d900 1
d913 1
d926 1
d953 1
d980 1
d1025 2
@


1.7.10.3
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a706 8
	-re ".* = \{\<vA\> = \{va = 3, vx = 4\}, _vptr.vB = $hex <VTT for vB>, vb = 5, vx = 6\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vB"
	}

a732 7
	-re ".* = \{\<vA\> = \{va = 7, vx = 8\}, _vptr.vC = $hex <VTT for vC>, vc = 9, vx = 10\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vC"
	}
a907 7
	}
	-re ".* = \{\<vB\> = \{\<vA\> = \{va = 19, vx = 20\}, _vptr.vB = $hex, vb = 21, vx = 22\}, \<vC\> = \{_vptr.vC = $hex <VTT for vD>, vc = 23, vx = 24\}, _vptr.vD = $hex, vd = 25, vx = 26\}$nl$gdb_prompt $" {
	    # Happens with gcc 3.3 -gstabs+
	    # Does not happen with gcc 3.2.3 -gstabs+.
	    # Does not happen gcc HEAD%20030624 (pre-3.4) -gstabs+.
	    # -- chastain 2003-06-29
	    pass "print g_vD"
@


1.7.10.4
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* carlton_runnamespace: Ditto.
	* carlton_runtest: Ditto.
	* configure: Regnerate.
@
text
@@


1.6
log
@Copyright year updates.
@
text
@d996 1
a996 1
	-re ".* = \{\<vD\> = \{\<vB\> = \{\<vA\> = \{va = 0, vx = 0\}, _vptr.vB = $hex, vb = 0, vx = 0\}, \<vC\> = \{_vptr.vC = $hex, vc = 0, vx = 0\}, _vptr.vD = $hex, vd = 0, vx = 0\}, _vptr.vE = $hex, ve = 27, vx = 28\}$nl$gdb_prompt $" {
@


1.6.6.1
log
@merge from trunk
@
text
@d996 1
a996 1
	-re ".* = \{\<vD\> = \{\<vB\> = \{\<vA\> = \{va = 0, vx = 0\}, _vptr.vB = $hex *(\<VTT for vD\>)?, vb = 0, vx = 0\}, \<vC\> = \{_vptr.vC = $hex *(\<VTT for vD\>)?, vc = 0, vx = 0\}, _vptr.vD = $hex, vd = 0, vx = 0\}, _vptr.vE = $hex, ve = 27, vx = 28\}$nl$gdb_prompt $" {
@


1.5
log
@2002-01-20  Daniel Jacobowitz  <drow@@mvista.com>

	* gdb.c++/classes.exp: Update for improved v3 support and skipping
	artificial methods/arguments.
	* gdb.c++/derivation.exp: Likewise.
	* gdb.c++/inherit.exp: Likewise.
	* gdb.c++/method.exp: Likewise.
	* gdb.c++/virtfunc.exp: Likewise.
@
text
@d1 1
a1 1
# Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001
@


1.4
log
@        * gdb.c++/classes.exp, gdb.c++/derivation.exp,
        gdb.c++/inherit.exp, gdb.c++/method.exp,
        gdb.c++/namespace.exp, gdb.c++/templates.exp,
        gdb.c++/userdef.exp, gdb.c++/virtfunc.exp: Updates for v3 demangler
        and class layout support.
@
text
@d198 4
a201 1
	-re "type = class \{${ws}public:${ws}int one;${ws}int two;${ws}tagless_struct & operator=\\(tagless_struct &\\);${ws}\\\$_1 \\(tagless_struct &\\);${ws}\\\$_1 \\(\\);${ws}\}$nl$gdb_prompt $" {
d217 1
a217 1
	-re "type = class \{${ws}public:${ws}int one;${ws}int two;${ws}tagless_struct & operator=\\(tagless_struct &\\);${ws}\\\$_1 \\(tagless_struct &\\);${ws}\\\$_1 \\(\\);${ws}\}$nl$gdb_prompt $" {
d220 3
d291 6
@


1.3
log
@Update/correct copyright notices.
@
text
@d734 3
d761 3
d957 3
d983 3
@


1.2
log
@2001-02-14  Michael Chastain  <chastain@@redhat.com>

	* gdb.c++/inherit.exp (do_tests): Change runto statements
	from "runto 'foo(void)'" to "runto 'foo'".  This makes the
	statements demangler agnostic.
@
text
@d1 2
a2 1
# Copyright (C) 1992, 1993, 1994, 1997, 1999, 2001 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# Copyright (C) 1992, 1993, 1994, 1997 Free Software Foundation, Inc.
d25 3
d32 2
a33 3
# Check to see if we have an executable to test.  If not, then either we
# haven't tried to compile one, or the compilation failed for some reason.
# In either case, just notify the user and skip the tests in this file.
a47 9
# if we are on HPUX and we are not compiled with gcc, then skip these tests.

if [istarget hppa*-*-hpux*] {
    if {!$gcc_compiled} {
	continue 
    }
}


d116 1
d141 1
a141 1
	    setup_xfail "*-*-*"
d156 1
a156 1
	    setup_xfail "*-*-*"
d240 1
a240 1
    gdb_test "print g_B" ".* = \{\<A\> = \{a = 3, x = 4\}, b = 5, x = 6\}" "print g_B"
d245 1
a245 1
    gdb_test "print g_C" ".* = \{\<A\> = \{a = 7, x = 8\}, c = 9, x = 10\}" "print g_C"
d267 1
a267 1
	-re ".* = \{one = 1,  = \{a = 2, b = 2\}\}$nl$gdb_prompt $" {
d270 1
a270 1
	-re ".* = .*\{one = 1,  = \{a = 2, b = .*\}\}$nl$gdb_prompt $" {
d305 1
d339 1
a339 1
    setup_xfail "*-*-*"
d341 8
a348 2
    gdb_expect {
	-re ".* = 11$nl$gdb_prompt $" {
d351 1
a351 1
	-re ".* = 15$nl$gdb_prompt $" {
d362 1
a362 1
    setup_xfail "*-*-*"
d365 7
a371 1
	-re ".* = 12$nl$gdb_prompt $" {
d374 1
a374 1
	-re ".* = 16$nl$gdb_prompt $" {
d418 1
a418 1
    setup_xfail "*-*-*"
d421 7
a427 1
	-re ".* = 22$nl$gdb_prompt $" {
d430 1
a430 1
	-re ".* = 26$nl$gdb_prompt $" {
d490 1
a490 1
    gdb_test "print g_D" ".* = \{\<B\> = \{\<A\> = \{a = 11, x = 12\}, b = 13, x = 14\}, \<C\> = \{\<A\> = \{a = 15, x = 16\}, c = 17, x = 18\}, d = 19, x = 20\}" "print g_D"
d495 1
a495 1
    gdb_test "print g_E" ".* = \{\<D\> = \{\<B\> = \{\<A\> = \{a = 21, x = 22\}, b = 23, x = 24\}, \<C\> = \{\<A\> = \{a = 25, x = 26\}, c = 27, x = 28\}, d = 29, x = 30\}, e = 31, x = 32\}" "print g_E"
d579 1
d581 1
d626 11
a636 1
    gdb_test "ptype vB" "ptype vB\[\r\n\]+type = class vB : public virtual vA \{$nl  private:$nl\[ \]+vA \[*\]+_vb\[\\\$\.\]+vA;$nl  public:$nl\[ \]+int vb;$nl\[ \]+int vx;$nl.*\}" "ptype vB"
d639 11
a649 1
    gdb_test "ptype class vB" "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}" "ptype class vB"
d652 11
a662 1
    gdb_test "ptype g_vB" "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}" "ptype g_vB"
d665 11
a675 1
    gdb_test "ptype vC" "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}" "ptype vC"
d678 11
a688 1
    gdb_test "ptype class vC" "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}" "ptype class vC"
d691 11
a701 1
    gdb_test "ptype g_vC" "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}" "ptype g_vC"
d713 1
d724 7
a730 1
	-re ".* = \{\<vA\> = \{va = 3, vx = 4\}, _vb\[\\\$\.\]vA = $hex, vb = 5, vx = 6\}$nl$gdb_prompt $" {
d746 14
a759 1
    gdb_test "print g_vC" ".* = \{\<vA\> = \{va = 7, vx = 8\}, _vb\[\\\$\.\]vA = $hex, vc = 9, vx = 10\}" "print g_vC"
d841 2
d844 1
d847 11
a857 1
    gdb_test "ptype vD" "type = class vD : public virtual vB, public virtual vC \{$nl\[ \]*private:$nl\[ \]*vC \[*\]+_vb\[\\\$\.\]vC;$nl\[ \]*vB \[*\]+_vb\[\\\$\.\]vB;$nl\[ \]*public:$nl\[ \]*int vd;$nl\[ \]*int vx;$nl.*\}" "ptype vD"
d860 11
a870 1
    gdb_test "ptype class vD" "type = class vD : public virtual vB, public virtual vC \{$nl\[ \]*private:$nl\[ \]*vC \[*\]+_vb\[\\\$\.\]vC;$nl\[ \]*vB \[*\]+_vb\[\\\$\.\]vB;$nl\[ \]*public:$nl\[ \]*int vd;$nl\[ \]*int vx;$nl.*\}" "ptype class vD"
d873 11
a883 1
    gdb_test "ptype g_vD" "type = class vD : public virtual vB, public virtual vC \{$nl\[ \]*private:$nl\[ \]*vC \[*\]+_vb\[\\\$\.\]vC;$nl\[ \]*vB \[*\]+_vb\[\\\$\.\]vB;$nl\[ \]*public:$nl\[ \]*int vd;$nl\[ \]*int vx;$nl.*\}" "ptype g_vD"
d886 11
a896 1
    gdb_test "ptype vE" "type = class vE : public virtual vD \{$nl\[ \]*private:$nl\[ \]*vD \[*\]+_vb\[\\\$\.\]vD;$nl\[ \]*public:$nl\[ \]*int ve;$nl\[ \]*int vx;$nl.*\}" "ptype vE"
d899 11
a909 1
    gdb_test "ptype class vE" "type = class vE : public virtual vD \{$nl\[ \]*private:$nl\[ \]*vD \[*\]+_vb\[\\\$\.\]vD;$nl\[ \]*public:$nl\[ \]*int ve;$nl\[ \]*int vx;$nl.*\}" "ptype class vE"
d912 11
a922 1
    gdb_test "ptype g_vE" "type = class vE : public virtual vD \{$nl\[ \]*private:$nl\[ \]*vD \[*\]+_vb\[\\\$\.\]vD;$nl\[ \]*public:$nl\[ \]*int ve;$nl\[ \]*int vx;$nl.*\}" "ptype g_vE"
d934 1
d941 7
a947 1
	-re ".* = \{\<vB\> = \{\<vA\> = \{va = 19, vx = 20\}, _vb\[\\\$\.\]vA = $hex, vb = 21, vx = 22\}, \<vC\> = \{_vb\[\\\$\.\]vA = $hex, vc = 23, vx = 24\}, _vb\[\\\$\.\]vC = $hex, _vb\[\\\$\.\]vB = $hex, vd = 25, vx = 26\}$nl$gdb_prompt $" {
d963 14
a976 1
    gdb_test "print g_vE" ".* = \{\<vD\> = \{\<vB\> = \{\<vA\> = \{va = 0, vx = 0\}, _vb\[\\\$\.\]vA = $hex, vb = 0, vx = 0\}, \<vC\> = \{_vb\[\\\$\.\]vA = $hex, vc = 0, vx = 0\}, _vb\[\\\$\.\]vC = $hex, _vb\[\\\$\.\]vB = $hex, vd = 0, vx = 0\}, _vb\[\\\$\.\]vD = $hex, ve = 27, vx = 28\}" "print g_vE"
d1015 1
a1015 1
    if { ![ runto 'inheritance2(void)' ] } {
d1027 1
a1027 1
    if { ![ runto 'inheritance4(void)' ] } {
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-08-02 snapshot
@
text
@d46 9
a122 1
    global hp_aCC_compiler
d147 1
a147 1
            if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d162 1
a162 1
            if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d246 1
a246 1
    gdb_test "print g_B" ".* = \{\<(class |)A\> = \{a = 3, x = 4\}, b = 5, x = 6\}" "print g_B"
d251 1
a251 1
    gdb_test "print g_C" ".* = \{\<(class |)A\> = \{a = 7, x = 8\}, c = 9, x = 10\}" "print g_C"
d273 1
a273 1
	-re ".* = \{one = 1, ( = |)\{a = 2, b = 2\}\}$nl$gdb_prompt $" {
d276 1
a276 1
	-re ".* = .*\{one = 1, ( = |)\{a = 2, b = .*\}\}$nl$gdb_prompt $" {
a310 1
    global hp_aCC_compiler
d344 1
a344 1
    if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d346 3
a348 6
    gdb_expect {	
	-re "warning: A ambiguous; using D::C::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 15$nl$gdb_prompt $" {
	    pass "print g_D.A::a"
	}
	-re "warning: A ambiguous; using D::B::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 11$nl$gdb_prompt $" {
	    pass "print g_D.A::a (using B)"
a352 3
	-re ".* = 11$nl$gdb_prompt $" {
	    fail "print g_D.A::a (FIXME)"
	}
d361 1
a361 1
    if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d364 2
a365 5
	-re "warning: A ambiguous; using D::C::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 16$nl$gdb_prompt $" {
	    pass "print g_D.A::x"
	}
	-re "warning: A ambiguous; using D::B::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 12$nl$gdb_prompt $" {
	    pass "print g_D.A::x (using B)"
a369 3
	-re ".* = 12$nl$gdb_prompt $" {
	    fail "print g_D.A::x (FIXME)"
	}
d411 1
a411 1
    if {!$hp_aCC_compiler} {setup_xfail "*-*-*"}
d414 2
a415 5
	-re "warning: A ambiguous; using E::D::C::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 26$nl$gdb_prompt $" {
	    pass "print g_E.A::x"
	}
	-re "warning: A ambiguous; using E::D::B::A. Use a cast to disambiguate.$nl\\$\[0-9\]* = 22$nl$gdb_prompt $" {
	    pass "print g_E.A::x (using B)"
a419 3
	-re ".* = 22$nl$gdb_prompt $" {
	    fail "print g_E.A::x (FIXME)"
	}
d477 1
a477 1
    gdb_test "print g_D" ".* = \{\<(class |)B\> = \{\<(class |)A\> = \{a = 11, x = 12\}, b = 13, x = 14\}, \<(class |)C\> = \{\<(class |)A\> = \{a = 15, x = 16\}, c = 17, x = 18\}, d = 19, x = 20\}" "print g_D"
d482 1
a482 1
    gdb_test "print g_E" ".* = \{\<(class |)D\> = \{\<(class |)B\> = \{\<(class |)A\> = \{a = 21, x = 22\}, b = 23, x = 24\}, \<(class |)C\> = \{\<(class |)A\> = \{a = 25, x = 26\}, c = 27, x = 28\}, d = 29, x = 30\}, e = 31, x = 32\}" "print g_E"
a565 1
    global ws
d611 1
a611 11
    send_gdb "ptype vB\n"
    gdb_expect {
	-re "ptype vB${nl}type = class vB : public virtual vA \{$nl  private:${ws}vA \[*\]+_vb\[\\\$\.\]+vA;$nl  public:${ws}int vb;${ws}int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype vB"
	}
	-re "ptype vB${nl}type = class vB : public virtual vA \{$nl  public:${ws}int vb;${ws}int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype vB (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype vB" }
	timeout { fail "ptype vB (timeout)" }
    }
d614 1
a614 11
    send_gdb "ptype class vB\n"
    gdb_expect {
	-re "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype class vB"
	}
	-re "type = class vB : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype class vB (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vB" }
	timeout { fail "ptype class vB (timeout)" }
    }
d617 1
a617 11
    send_gdb "ptype g_vB\n"
    gdb_expect {
	-re "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype g_vB"
	}
	-re "type = class vB : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
	    pass "ptype g_vB (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vB" }
	timeout { fail "ptype g_vB (timeout)" }
    }
d620 1
a620 11
    send_gdb "ptype vC\n"
    gdb_expect {
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype vC"
	}
	-re "type = class vC : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype vC (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype vC" }
	timeout { fail "ptype vC (timeout)" }
    }
d623 1
a623 11
    send_gdb "ptype class vC\n"
    gdb_expect {
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype class vC"
	}
	-re "type = class vC : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype class vC (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vC" }
	timeout { fail "ptype class vC (timeout)" }
    }
d626 1
a626 11
    send_gdb "ptype g_vC\n"
    gdb_expect {
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \[*\]+_vb\[\\\$\.\]vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype g_vC"
	}
	-re "type = class vC : public virtual vA \{$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
            pass "ptype g_vC (aCC)"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vC" }
	timeout { fail "ptype g_vC (timeout)" }
    }
a647 6
	-re ".* = \{\<class vA\> = \{va = 3, vx = 4\}, vb = 5, vx = 6, Virtual table at $hex\}$nl$gdb_prompt $" {
           pass "print g_vB (aCC)"
	}
	-re ".* = \{\<class vA\> = \{va = 3, vx = 4\}, vb = 5, vx = 6, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vB (aCC)"
	}
d664 1
a664 14
    send_gdb "print g_vC\n"
    gdb_expect {
	-re ".* = \{\<class vA\> = \{va = 7, vx = 8\}, vc = 9, vx = 10, Virtual table at $hex\}$nl$gdb_prompt $" {
	    pass "print g_vC (aCC)"
	}
	-re ".* = \{\<class vA\> = \{va = 7, vx = 8\}, vc = 9, vx = 10, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vC (aCC)"
	}
	-re ".* = \{\<vA\> = \{va = 7, vx = 8\}, _vb\[\\\$\.\]vA = $hex, vc = 9, vx = 10\}$nl$gdb_prompt $" {
	    pass "print g_vC"
	}
	-re ".*$gdb_prompt $" { fail "print g_vC" }
	timeout { fail "print g_vC (timeout)" }
    }
a745 2
    global gdb_prompt
    global ws
d749 1
a749 11
    send_gdb "ptype vD\n"
    gdb_expect {
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \[*\]+_vb\[\\\$\.\]vC;${ws}vB \[*\]+_vb\[\\\$\.\]vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype vD"
	}
        -re ".*class vD : public virtual vB, public virtual vC \{${ws}public:${ws}int vd;${ws}int vx;.*\}.*$gdb_prompt $" {
	    pass "ptype vD"
	}
	-re ".*$gdb_prompt $" { fail "ptype vD" }
	timeout { fail "(timeout) ptype vD" }
    }
d752 1
a752 11
    send_gdb "ptype class vD\n"
    gdb_expect {
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \[*\]+_vb\[\\\$\.\]vC;${ws}vB \[*\]+_vb\[\\\$\.\]vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype class vD"
	}
	-re ".*class vD : public virtual vB, public virtual vC \{${ws}public:${ws}int vd;${ws}int vx;.*\}.*$gdb_prompt $" {
	    pass "ptype class vD"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vD" }
	timeout { fail "(timeout) ptype class vD" }
    }
d755 1
a755 11
    send_gdb "ptype g_vD\n"
    gdb_expect {
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \[*\]+_vb\[\\\$\.\]vC;${ws}vB \[*\]+_vb\[\\\$\.\]vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype g_vD"
	}
	-re ".*class vD : public virtual vB, public virtual vC \{${ws}public:${ws}int vd;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype g_vD"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vD" }
	timeout { fail "(timeout) ptype g_vD" }
    }
d758 1
a758 11
    send_gdb "ptype vE\n"
    gdb_expect {
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \[*\]+_vb\[\\\$\.\]vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype vE"
	}
	-re ".*class vE : public virtual vD \{${ws}public:${ws}int ve;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype vE"
	}
	-re ".*$gdb_prompt $" { fail "ptype vE" }
	timeout { fail "(timeout) ptype vE" }
    }
d761 1
a761 11
    send_gdb "ptype class vE\n"
    gdb_expect {
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \[*\]+_vb\[\\\$\.\]vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype class vE"
	}
	-re "type = class vE : public virtual vD \{${ws}public:${ws}int ve;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype class vE"
	}
	-re ".*$gdb_prompt $" { fail "ptype class vE" }
	timeout { fail "(timeout) ptype class vE" }
    }
d764 1
a764 11
    send_gdb "ptype g_vE\n"
    gdb_expect {
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \[*\]+_vb\[\\\$\.\]vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
	    pass "ptype g_vE"
	}
	-re "type = class vE : public virtual vD \{${ws}public:${ws}int ve;${ws}int vx;\r\n.*\}.*$gdb_prompt $" {
	    pass "ptype g_vE"
	}
	-re ".*$gdb_prompt $" { fail "ptype g_vE" }
	timeout { fail "(timeout) ptype g_vE" }
    }
a781 6
	-re ".* = \{\<class vB\> = \{\<class vA\> = \{va = 19, vx = 20\}, vb = 21, vx = 22, Virtual table at $hex\}, \<class vC\> = \{vc = 23, vx = 24, Virtual table at $hex\}, vd = 25, vx = 26, Virtual table at $hex\}$nl$gdb_prompt $" {
	    pass "print g_vD (aCC)"
	}
	-re ".* = \{\<class vB\> = \{\<class vA\> = \{va = 19, vx = 20\}, vb = 21, vx = 22, __vfp = $hex\}, \<class vC\> = \{vc = 23, vx = 24, __vfp = $hex\}, vd = 25, vx = 26, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vD (aCC)"
	}
d798 1
a798 14
    send_gdb "print g_vE\n"
    gdb_expect {
	-re ".* = \{\<class vD\> = \{\<class vB\> = \{\<class vA\> = \{va = 0, vx = 0\}, vb = 0, vx = 0, Virtual table at $hex\}, \<class vC\> = \{vc = 0, vx = 0, Virtual table at $hex\}, vd = 0, vx = 0, Virtual table at $hex\}, ve = 27, vx = 28, Virtual table at $hex\}$nl$gdb_prompt $" {
	    pass "print g_vE (aCC)"
	}
	-re ".* = \{\<class vD\> = \{\<class vB\> = \{\<class vA\> = \{va = 0, vx = 0\}, vb = 0, vx = 0, __vfp = $hex\}, \<class vC\> = \{vc = 0, vx = 0, __vfp = $hex\}, vd = 0, vx = 0, __vfp = $hex\}, ve = 27, vx = 28, __vfp = $hex\}$nl$gdb_prompt $" {
	    pass "print g_vE (aCC)"
	}
	-re ".* = \{\<vD\> = \{\<vB\> = \{\<vA\> = \{va = 0, vx = 0\}, _vb\[\\\$\.\]vA = $hex, vb = 0, vx = 0\}, \<vC\> = \{_vb\[\\\$\.\]vA = $hex, vc = 0, vx = 0\}, _vb\[\\\$\.\]vC = $hex, _vb\[\\\$\.\]vB = $hex, vd = 0, vx = 0\}, _vb\[\\\$\.\]vD = $hex, ve = 27, vx = 28\}$nl$gdb_prompt $" {
	    pass "print g_vE"
	}
	-re ".*$gdb_prompt $" { fail "print g_vE" }
	timeout { fail "print g_vE (timeout)" }
    }
@


1.1.1.3
log
@import gdb-1999-09-08 snapshot
@
text
@d29 3
a31 2
if { [skip_cplus_tests] } { continue }

@


1.1.1.4
log
@import gdb-1999-12-06 snapshot
@
text
@d1 1
a1 1
# Copyright (C) 1992, 1993, 1994, 1997, 1999 Free Software Foundation, Inc.
a24 3
# The format of a g++ virtual base pointer.
set vbptr "(_vb\[$.\]|__vb_)\[0-9\]?"

a577 1
    global vbptr
d624 1
a624 1
	-re "ptype vB${nl}type = class vB : public virtual vA \{$nl  private:${ws}vA \\*${vbptr}vA;$nl  public:${ws}int vb;${ws}int vx;$nl.*\}$nl$gdb_prompt $" {
d637 1
a637 1
	-re "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
d650 1
a650 1
	-re "type = class vB : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vb;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
d663 1
a663 1
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
d676 1
a676 1
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
d689 1
a689 1
	-re "type = class vC : public virtual vA \{$nl\[ \]*private:$nl\[ \]*vA \\*${vbptr}vA;$nl\[ \]*public:$nl\[ \]*int vc;$nl\[ \]*int vx;$nl.*\}$nl$gdb_prompt $" {
a708 1
    global vbptr
d725 1
a725 1
	-re ".* = \{\<vA\> = \{va = 3, vx = 4\}, ${vbptr}vA = $hex, vb = 5, vx = 6\}$nl$gdb_prompt $" {
d749 1
a749 1
	-re ".* = \{\<vA\> = \{va = 7, vx = 8\}, ${vbptr}vA = $hex, vc = 9, vx = 10\}$nl$gdb_prompt $" {
a838 1
    global vbptr
d843 1
a843 1
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \\*${vbptr}vC;${ws}vB \\*${vbptr}vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
d856 1
a856 1
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \\*${vbptr}vC;${ws}vB \\*${vbptr}vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
d869 1
a869 1
	-re "type = class vD : public virtual vB, public virtual vC \{${ws}private:${ws}vC \\*${vbptr}vC;${ws}vB \\*${vbptr}vB;${ws}public:${ws}int vd;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
d882 1
a882 1
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \\*${vbptr}vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
d895 1
a895 1
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \\*${vbptr}vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
d908 1
a908 1
	-re "type = class vE : public virtual vD \{${ws}private:${ws}vD \\*${vbptr}vD;${ws}public:${ws}int ve;${ws}int vx;$nl.*\}.*$gdb_prompt $" {
a927 1
    global vbptr
d940 1
a940 1
	-re ".* = \{\<vB\> = \{\<vA\> = \{va = 19, vx = 20\}, ${vbptr}vA = $hex, vb = 21, vx = 22\}, \<vC\> = \{${vbptr}vA = $hex, vc = 23, vx = 24\}, ${vbptr}vC = $hex, ${vbptr}vB = $hex, vd = 25, vx = 26\}$nl$gdb_prompt $" {
d964 1
a964 1
	-re ".* = \{\<vD\> = \{\<vB\> = \{\<vA\> = \{va = 0, vx = 0\}, ${vbptr}vA = $hex, vb = 0, vx = 0\}, \<vC\> = \{${vbptr}vA = $hex, vc = 0, vx = 0\}, ${vbptr}vC = $hex, ${vbptr}vB = $hex, vd = 0, vx = 0\}, ${vbptr}vD = $hex, ve = 27, vx = 28\}$nl$gdb_prompt $" {
@


