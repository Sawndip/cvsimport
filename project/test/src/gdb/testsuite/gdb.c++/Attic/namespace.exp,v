head	1.14;
access;
symbols
	cagney_x86i386-20030821-branch:1.13.0.10
	cagney_x86i386-20030821-branchpoint:1.13
	carlton_dictionary-20030805-merge:1.13
	carlton_dictionary-20030627-merge:1.13
	gdb_6_0-branch:1.13.0.8
	gdb_6_0-2003-06-23-branchpoint:1.13
	jimb-ppc64-linux-20030613-branch:1.13.0.6
	jimb-ppc64-linux-20030613-branchpoint:1.13
	cagney_writestrings-20030508-branch:1.12.0.42
	cagney_writestrings-20030508-branchpoint:1.12
	jimb-ppc64-linux-20030528-branch:1.13.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.13
	carlton_dictionary-20030523-merge:1.13
	cagney_fileio-20030521-branch:1.13.0.2
	cagney_fileio-20030521-branchpoint:1.13
	kettenis_i386newframe-20030517-mergepoint:1.12
	jimb-ppc64-linux-20030509-branch:1.12.0.40
	jimb-ppc64-linux-20030509-branchpoint:1.12
	kettenis_i386newframe-20030504-mergepoint:1.12
	carlton_dictionary-20030430-merge:1.12
	kettenis_i386newframe-20030419-branch:1.12.0.38
	kettenis_i386newframe-20030419-branchpoint:1.12
	carlton_dictionary-20030416-merge:1.12
	cagney_frameaddr-20030409-mergepoint:1.12
	kettenis_i386newframe-20030406-branch:1.12.0.36
	kettenis_i386newframe-20030406-branchpoint:1.12
	cagney_frameaddr-20030403-branchpoint:1.12
	cagney_frameaddr-20030403-branch:1.12.0.34
	cagney_framebase-20030330-mergepoint:1.12
	cagney_framebase-20030326-branch:1.12.0.32
	cagney_framebase-20030326-branchpoint:1.12
	cagney_lazyid-20030317-branch:1.12.0.30
	cagney_lazyid-20030317-branchpoint:1.12
	kettenis-i386newframe-20030316-mergepoint:1.12
	offbyone-20030313-branch:1.12.0.28
	offbyone-20030313-branchpoint:1.12
	kettenis-i386newframe-20030308-branch:1.12.0.26
	kettenis-i386newframe-20030308-branchpoint:1.12
	carlton_dictionary-20030305-merge:1.12
	cagney_offbyone-20030303-branch:1.12.0.24
	cagney_offbyone-20030303-branchpoint:1.12
	carlton_dictionary-20030207-merge:1.12
	interps-20030203-mergepoint:1.12
	interps-20030202-branch:1.12.0.22
	interps-20030202-branchpoint:1.12
	cagney-unwind-20030108-branch:1.12.0.20
	cagney-unwind-20030108-branchpoint:1.12
	carlton_dictionary-20021223-merge:1.12
	gdb_5_3-2002-12-12-release:1.12
	carlton_dictionary-20021115-merge:1.12
	kseitz_interps-20021105-merge:1.12
	kseitz_interps-20021103-merge:1.12
	drow-cplus-merge-20021020:1.12
	drow-cplus-merge-20021025:1.12
	carlton_dictionary-20021025-merge:1.12
	carlton_dictionary-20021011-merge:1.12
	drow-cplus-branch:1.12.0.18
	drow-cplus-branchpoint:1.12
	kseitz_interps-20020930-merge:1.12
	carlton_dictionary-20020927-merge:1.12
	carlton_dictionary-branch:1.12.0.16
	carlton_dictionary-20020920-branchpoint:1.12
	gdb_5_3-branch:1.12.0.14
	gdb_5_3-2002-09-04-branchpoint:1.12
	kseitz_interps-20020829-merge:1.12
	cagney_sysregs-20020825-branch:1.12.0.12
	cagney_sysregs-20020825-branchpoint:1.12
	readline_4_3-import-branch:1.12.0.10
	readline_4_3-import-branchpoint:1.12
	gdb_5_2_1-2002-07-23-release:1.12
	kseitz_interps-20020528-branch:1.12.0.8
	kseitz_interps-20020528-branchpoint:1.12
	cagney_regbuf-20020515-branch:1.12.0.6
	cagney_regbuf-20020515-branchpoint:1.12
	jimb-macro-020506-branch:1.12.0.4
	jimb-macro-020506-branchpoint:1.12
	gdb_5_2-2002-04-29-release:1.12
	gdb_5_2-branch:1.12.0.2
	gdb_5_2-2002-03-03-branchpoint:1.12
	gdb_5_1_1-2002-01-24-release:1.6
	gdb_5_1_0_1-2002-01-03-release:1.6
	cygnus_cvs_20020108_pre:1.8
	gdb_5_1_0_1-2002-01-03-branch:1.6.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.6
	gdb_5_1-2001-11-21-release:1.6
	gdb_s390-2001-09-26-branch:1.6.0.6
	gdb_s390-2001-09-26-branchpoint:1.6
	gdb_5_1-2001-07-29-branch:1.6.0.4
	gdb_5_1-2001-07-29-branchpoint:1.6
	dberlin-typesystem-branch:1.6.0.2
	dberlin-typesystem-branchpoint:1.6
	gdb-post-ptid_t-2001-05-03:1.6
	gdb-pre-ptid_t-2001-05-03:1.6
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.1
	gdb-pre-protoization-2000-07-29:1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.1;
locks; strict;
comment	@# @;


1.14
date	2003.08.23.03.55.59;	author chastain;	state dead;
branches;
next	1.13;

1.13
date	2003.05.20.03.56.29;	author carlton;	state Exp;
branches
	1.13.8.1;
next	1.12;

1.12
date	2002.01.10.20.46.16;	author jason;	state Exp;
branches
	1.12.16.1
	1.12.18.1;
next	1.11;

1.11
date	2002.01.10.18.27.09;	author msnyder;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.10.17.48.03;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.10.13.21.58;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.07.22.02.23;	author drow;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.21.00.13.30;	author msnyder;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.23.17.02.05;	author chastain;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.08.21.09.23;	author taylor;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.06.08.21.54;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.05.23.57.36;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.05.23.14.40;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.20.47.28;	author dberlin;	state Exp;
branches;
next	;

1.12.16.1
date	2002.10.11.21.56.48;	author carlton;	state Exp;
branches;
next	1.12.16.2;

1.12.16.2
date	2002.10.15.23.59.24;	author carlton;	state Exp;
branches;
next	1.12.16.3;

1.12.16.3
date	2002.10.18.00.00.19;	author carlton;	state Exp;
branches;
next	1.12.16.4;

1.12.16.4
date	2002.10.25.23.49.58;	author carlton;	state Exp;
branches;
next	1.12.16.5;

1.12.16.5
date	2002.11.20.01.09.54;	author carlton;	state Exp;
branches;
next	1.12.16.6;

1.12.16.6
date	2002.11.23.00.42.55;	author carlton;	state Exp;
branches;
next	1.12.16.7;

1.12.16.7
date	2002.11.24.18.47.19;	author carlton;	state Exp;
branches;
next	1.12.16.8;

1.12.16.8
date	2002.11.28.00.53.26;	author carlton;	state Exp;
branches;
next	1.12.16.9;

1.12.16.9
date	2002.12.01.22.07.56;	author carlton;	state Exp;
branches;
next	1.12.16.10;

1.12.16.10
date	2002.12.18.00.45.44;	author carlton;	state Exp;
branches;
next	1.12.16.11;

1.12.16.11
date	2002.12.21.00.17.45;	author carlton;	state Exp;
branches;
next	1.12.16.12;

1.12.16.12
date	2003.01.07.01.28.24;	author carlton;	state Exp;
branches;
next	1.12.16.13;

1.12.16.13
date	2003.05.08.01.10.52;	author carlton;	state Exp;
branches;
next	1.12.16.14;

1.12.16.14
date	2003.05.09.18.28.53;	author carlton;	state Exp;
branches;
next	1.12.16.15;

1.12.16.15
date	2003.05.23.18.40.52;	author carlton;	state Exp;
branches;
next	1.12.16.16;

1.12.16.16
date	2003.06.16.20.00.46;	author carlton;	state Exp;
branches;
next	1.12.16.17;

1.12.16.17
date	2003.06.27.22.47.33;	author carlton;	state Exp;
branches;
next	1.12.16.18;

1.12.16.18
date	2003.08.30.03.40.34;	author chastain;	state dead;
branches;
next	;

1.12.18.1
date	2002.10.22.19.59.37;	author carlton;	state Exp;
branches;
next	1.12.18.2;

1.12.18.2
date	2003.12.14.20.27.51;	author drow;	state dead;
branches;
next	;

1.13.8.1
date	2003.08.25.03.53.48;	author chastain;	state dead;
branches;
next	;


desc
@@


1.14
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@# Copyright 1997, 1998, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# tests for namespaces
# Written by Satish Pai <pai@@apollo.hp.com> 1997-07-23

# This file is part of the gdb testsuite

# Note: These tests are geared to the HP aCC compiler,
# which has an idiosyncratic way of emitting debug info
# for namespaces.
# Note: As of 2000-06-03, these pass under g++ - djb


if $tracelevel then {
        strace $tracelevel
        }

set prms_id 0
set bug_id 0

if { [skip_cplus_tests] } { continue }

set testfile "namespace"
set srcfile ${testfile}.cc
set objfile ${objdir}/${subdir}/${testfile}.o
set srcfile1 ${testfile}1.cc
set objfile1 ${objdir}/${subdir}/${testfile}1.o
set binfile ${objdir}/${subdir}/${testfile}

if [get_compiler_info ${binfile}] {
    return -1;
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${objfile}" object {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${objfile1}" object {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${objfile} ${objfile1}" "${binfile}" executable {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}


#
# set it up at a breakpoint so we can play with the variable values
#
if ![runto_main] then {
    perror "couldn't run to breakpoint"
    continue
}

if ![runto 'marker1'] then {
    perror "couldn't run to marker1"
    continue
}

gdb_test "up" ".*main.*" "up from marker1"

# Access a data item inside a namespace using colons and
# single quotes :-(

send_gdb "print 'AAA::c'\n"
gdb_expect {
   -re "\\$\[0-9\]* = 0 '\\\\(0|000)'\r\n$gdb_prompt $" { pass "print 'AAA::c'" }
   -re ".*$gdb_prompt $" { fail "print 'AAA::c'" }
   timeout { fail "(timeout) print 'AAA::c'" }
}

# An object declared using "using".

send_gdb "print ina\n"
gdb_expect {
   -re "\\$\[0-9\]+ = {xx = 33}.*$gdb_prompt $" {
      pass "print ina"
   }
   -re ".*$gdb_prompt $" { fail "print ina" }
   timeout { fail "(timeout) print ina" }
}

send_gdb "ptype ina\n"
gdb_expect {
   -re "type = class (AAA::|)inA \{\r\n\[ \]*public:\r\n\[ \]*int xx;\r\n\[ \]*\r\n\[ \]*.*int fum\\(int\\);\r\n\}\r\n$gdb_prompt $" {
       pass "ptype ina"
   }
   -re ".*$gdb_prompt $" { fail "ptype ina" }
   timeout { fail "(timeout) ptype ina" }
}

# Check all functions are known to GDB

setup_xfail hppa*-*-*11* CLLbs14869
send_gdb "info func xyzq\n"
gdb_expect {
   -re "All functions.*File.*namespace.cc:\r\nint AAA::A_xyzq\\(int\\);\r\nint BBB::B_xyzq\\(int\\);\r\nchar AAA::xyzq\\(char\\);\r\nchar BBB::xyzq\\(char\\);\r\nchar BBB::CCC::xyzq\\(char\\);\r\nchar BBB::Class::xyzq\\(char\\);\r\n$gdb_prompt $" {
       pass "info func xyzq"
   }    
   -re "All functions.*File.*namespace.cc:\r\nint AAA::A_xyzq\\(int\\);\r\nchar AAA::xyzq\\(char\\);\r\nint BBB::B_xyzq\\(int\\);\r\nchar BBB::CCC::xyzq\\(char\\);\r\nchar BBB::Class::xyzq\\(char\\);\r\nchar BBB::xyzq\\(char\\);\r\n$gdb_prompt $" {
       pass "info func xyzq"
   }    
   -re ".*$gdb_prompt $" { fail "info func xyzq" }
   timeout { fail "(timeout) info func xyzq" }
}

# Call a function in a namespace

send_gdb "print 'AAA::xyzq'('x')\n"
gdb_expect {
   -re "\\$\[0-9\]* = 97 'a'\r\n$gdb_prompt $" {
       pass "print 'AAA::xyzq'('x')"
   }
   -re ".*$gdb_prompt $" { fail "print 'AAA::xyzq'('x')" }
   timeout { fail "(timeout) print 'AAA::xyzq'('x')" }
}
       
# Break on a function in a namespace

send_gdb "break AAA::xyzq\n"
gdb_expect {
    -re "Breakpoint.*at $hex: file.*namespace.cc, line 42\\.\r\n$gdb_prompt $" {
         pass "break AAA::xyzq"
    }    
   -re ".*$gdb_prompt $" { fail "break AAA::xyzq" }
   timeout { fail "(timeout) break AAA::xyzq" }
}

# Call a function in a nested namespace

send_gdb "print 'BBB::CCC::xyzq'('x')\n"
gdb_expect {
   -re "\\$\[0-9\]* = 122 'z'\r\n$gdb_prompt $" {
       pass "print 'BBB::CCC::xyzq'('x')"
   }
   -re ".*$gdb_prompt $" { fail "print 'BBB::CCC::xyzq'('x')" }
   timeout { fail "(timeout) print 'BBB::CCC::xyzq'('x')" }
}
       
# Break on a function in a nested namespace

send_gdb "break BBB::CCC::xyzq\n"
gdb_expect {
    -re "Breakpoint.*at $hex: file.*namespace.cc, line 58\\.\r\n$gdb_prompt $" {
         pass "break BBB::CCC::xyzq"
    }    
   -re ".*$gdb_prompt $" { fail "break BBB::CCC::xyzq" }
   timeout { fail "(timeout) break BBB::CCC::xyzq" }
}

# Print address of a function in a class in a namespace

send_gdb "print 'BBB::Class::xyzq'\n"
gdb_expect {
   -re "\\$\[0-9\]* = \{char \\((BBB::|)Class \\*( const|), (char|int)\\)\} $hex <BBB::Class::xyzq\\(char\\)>\r\n$gdb_prompt $" {
       pass "print 'BBB::Class::xyzq'"
   }
   -re ".*$gdb_prompt $" { fail "print 'BBB::Class::xyzq'" }
   timeout { fail "(timeout) print 'BBB::Class::xyzq'" }
}

# Break on a function in a class in a namespace

send_gdb "break BBB::Class::xyzq\n"
gdb_expect {
    -re "Breakpoint.*at $hex: file.*namespace.cc, line 63\\.\r\n$gdb_prompt $" {
         pass "break BBB::Class::xyzq"
    }    
   -re ".*$gdb_prompt $" { fail "break BBB::Class::xyzq" }
   timeout { fail "(timeout) break BBB::Class::xyzq" }
}

# Test to see if the appropriate namespaces are in scope when trying
# to print out stuff from within a function defined within a
# namespace.

if ![runto "C::D::marker2"] then {
    perror "couldn't run to marker2"
    continue
}

gdb_test "print c" "\\$\[0-9\].* = 1"
gdb_test "print cc" "No symbol \"cc\" in current context."
gdb_test "print 'C::cc'" "\\$\[0-9\].* = 2"
gdb_test "print cd" "\\$\[0-9\].* = 3"
gdb_test "print 'E::cde'" "\\$\[0-9\].* = 5"
gdb_test "print shadow" "\\$\[0-9\].* = 13"
gdb_test "print cOtherFile" "\\$\[0-9\].* = 316"

# Some anonymous namespace tests.

gdb_test "print cX" "\\$\[0-9\].* = 6"
gdb_test "print 'F::cXf'" "\\$\[0-9\].* = 7"
gdb_test "print X" "\\$\[0-9\].* = 9"
gdb_test "print 'G::Xg'" "\\$\[0-9\].* = 10"
gdb_test "print cXOtherFile" "No symbol \"cXOtherFile\" in current context."
gdb_test "print XOtherFile" "No symbol \"XOtherFile\" in current context."
@


1.13
log
@2003-05-19  David Carlton  <carlton@@bactrian.org>

	Partial fix for PR c++/827.
	* cp-support.h: Include symtab.h.
	Declare cp_lookup_symbol_nonlocal, cp_lookup_symbol_namespace.
	* cp-namespace.c: Update contributors.
	(cp_lookup_symbol_nonlocal): New.
	(lookup_namespace_scope, cp_lookup_symbol_namespace)
	(lookup_symbol_file): Ditto.
	* c-lang.c (cplus_language_defn): Use cp_lookup_symbol_nonlocal.
	* block.h: Declare block_scope, block_using, block_global_block.
	* block.c (block_scope): New.
	(block_using, block_global_block): Ditto.
	* Makefile.in (cp_support_h): Depend on symtab_h.
	* config/djgpp/fnchange.lst: Add testsuite/gdb.c++/namespace1.cc.

2003-05-19  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/namespace.exp: Add namespace scope and anonymous
	namespace tests.
	Bump copyright date.
	* gdb.c++/namespace.cc: Add anonymous namespace and namespace C.
	(main): Call C::D::marker2.
	* gdb.c++/namespace1.cc: New file.
@
text
@@


1.13.8.1
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* configure: Regnerate.
@
text
@@


1.12
log
@        * gdb.c++/namespace.exp: Accept trailing const for 'this'.

        * gdb.c++/classes.exp: Accept 'A const' or 'const A' in copy
        constructors.
        * gdb.c++/derivation.exp: Likewise.
        * gdb.c++/templates.exp: Likewise.
        * gdb.c++/virtfunc.exp: Likewise.
@
text
@d1 1
a1 1
# Copyright 1997, 1998, 2000, 2001, 2002 Free Software Foundation, Inc.
d42 3
d51 3
d55 3
d59 2
a60 3
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will a
utomatically fail."
a62 2


d195 25
@


1.12.18.1
log
@2002-10-22  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (buildsym.o): Depend on $(gdb_assert_h) and
	$(cp_support_h).
	(cp-support.o): Fix dependencies and add $(gdb_obstack_h) and
	$(gdb_assert_h).
	(symtab.o): Depend on $(cp_support_h).
	* symtab.h: Add opaque declaration for struct using_direct_node.
	(struct block): Add member 'language_specific'.
	(BLOCK_USING): New macro.
	* symtab.c: #include "cp-support.h"
	(lookup_symbol_aux): Call lookup_symbol_aux_nonlocal and
	lookup_symbol_aux_using when appropriate.
	(lookup_symbol_aux_nonlocal): New function.
	(lookup_symbol_aux_using): New function.
	(lookup_symbol_aux_using_loop): New function.
	* symfile.h: Add opaque declaration for struct obstack.
	Declare obsavestring to take a const char *.
	* symfile.c (obsavestring): Make first argument a const char *.
	* jv-lang.c (get_java_class_symtab): Initialize BLOCK_USING.
	* dwarf2read.c: New variable current_namespace.
	(scan_partial_symbols): Handle DW_TAG_namespace.
	(psymtab_to_symtab_1): Initialize current_namespace.
	(process_die): Handle DW_TAG_namespace,
	DW_TAG_imported_declaration, DW_TAG_imported_module.
	(read_namespace): New function.
	(dwarf2_name): New function.
	(dwarf2_extension): New function.
	(dwarf_tag_name): Add DWARF 3 names.
	(dwarf_attr_name): Ditto.
	(dwarf_type_encoding_name): Ditto.
	* cp-support.h: Opaque declaration for struct obstack.
	(struct using_direct): New struct.
	(struct using_direct_node): New struct.
	Add declarations for cp_add_using_obstack, cp_add_using_xmalloc,
	cp_copy_usings, cp_free_usings,	cp_find_first_component.
	* cp-support.c: #include "gdb_obstack.h", "gdb_assert.h".
	Comment on demangled name pitfalls.
	(cp_add_using_obstack): New function.
	(cp_add_using_xmalloc): New function.
	(cp_copy_usings): New function.
	(cp_free_usings): New function.
	(cp_find_first_component): New function.
	* buildsym.h: Declare processing_has_namespace_info.
	Declare add_using_directive.
	* buildsym.c: #include "gdb_assert.h", "cp-support.h".
	Change comment after #include "symfile.h".
	New variable using_list.
	(add_symbol_to_list): Scan for anonymous namespaces when
	appropriate.
	(scan_for_anonymous_namespaces): New function.
	(add_using_directive): New function.
	(start_symtab): Initialize processing_has_namespace_info,
	using_list.
	(end_symtab): Copy using_list into block.
	(copy_usings_to_obstack): New function.
	(finish_block): Set BLOCK_USING in general case and in C++
	function case.

2002-10-22  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add tests involving namespaces
	  starting from C.
	* gdb.c++/namespace.cc: Add namespaces with names starting
	  from C and their contents.
@
text
@a188 68
# Test to see if the appropriate namespaces are in scope when trying
# to print out stuff from within a function defined within a
# namespace.

if ![runto "'C::D::marker2'"] then {
    perror "couldn't run to marker2"
    continue
}

gdb_test "print c" "\\$\[0-9\].* = 1" "print c"
gdb_test "print cc" "No symbol \"cc\" in current context." "print cc"
gdb_test "print 'C::cc'" "\\$\[0-9\].* = 2" "print C::cc"
gdb_test "print cd" "\\$\[0-9\].* = 3" "print cd"
gdb_test "print 'C::D::cd'" "\\$\[0-9\].* = 3" "print C::D::cd"
gdb_test "print 'E::cde'" "\\$\[0-9\].* = 5" "print E::cde"

# FIXME: carlton/2002-10-17: It's somewhat accidental that we
# currently get this one right.  (Delete this comment once namespace
# scope issues have been handled correctly!)

gdb_test "print shadow" "\\$\[0-9\].* = 13" "print shadow"


# NOTE: carlton/2002-10-17: This one won't get fixed until namespaces
# are first-class objects.

setup_xfail "*-*-*"
gdb_test "print 'E::ce'" "No symbol \"E::ce\" in current context." "print E::ce"

# Some anonymous namespace tests.

gdb_test "print cX" "\\$\[0-9\].* = 6" "print cX"
gdb_test "print 'F::cXf'" "\\$\[0-9\].* = 7" "print F::cXf"
gdb_test "print 'F::cXfX'" "\\$\[0-9\].* = 8" "print F::cXfX"
gdb_test "print X" "\\$\[0-9\].* = 9" "print X"
gdb_test "print 'G::Xg'" "\\$\[0-9\].* = 10" "print G::Xg"
gdb_test "print 'G::XgX'" "\\$\[0-9\].* = 11" "print G::XgX"

# Test namespace renaming.

setup_xfail "*-*-*"
gdb_test "print 'I::h'" "\\$\[0-9\].* = 14" "print I::h"

# Test using directives.

# NOTE: carlton/2002-10-17: Some of these are easy, but some of these
# have unfortunate interactions with namespace scope issues.  As of
# this writing, some of these pass, but they pass for the wrong reasons.

setup_xfail "*-*-*"
gdb_test "print j" "\\$\[0-9\].* = 15" "print j"
setup_xfail "*-*-*"
gdb_test "print 'L::k'" "\\$\[0-9\].* = 16" "print L::k"
setup_xfail "*-*-*"
gdb_test "print k" "No symbol \"k\" in current context." "print k"
setup_xfail "*-*-*"
gdb_test "print cdm" "\\$\[0-9\].* = 17" "print cdm"
setup_xfail "*-*-*"
gdb_test "print 'Q::o'" "\\$\[0-9\].* = 18" "print Q::o"
setup_xfail "*-*-*"
gdb_test "print o" "No symbol \"o\" in current context." "print o"

# Test using declarations.  I should probably test these more.

setup_xfail "*-*-*"
gdb_test "print r1" "\\$\[0-9\].* = 19" "print r1"
setup_xfail "*-*-*"
gdb_test "print r2" "No symbol \"r2\" in current context." "print r2"
@


1.12.18.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.12.16.1
log
@2002-10-11  David Carlton  <carlton@@math.stanford.edu>

	* jv-lang.c (get_java_class_symtab): Initialize BLOCK_USING (bl)
	to NULL.
	* cp-support.c: Change all uses of 'struct using_data' and 'struct
	using_data_node' to 'struct using_direct' and 'struct
	using_direct_node'.
	(cp_free_usings): Fix loop.
	* symtab.c: Ditto.
	* symtab.h: Ditto
	* cp-support.h: Delete declarations for commented-out functions.
	Rename 'struct using_data' and 'struct using_data_node' to 'struct
	using_direct' and 'struct using_direct_node'.
	* cp-support.c: Delete commented-out functions.

2002-10-10  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_using_loop): New function.
	(lookup_symbol_aux_nonlocal): New function.
	(lookup_symbol_aux): Call lookup_symbol_aux_nonlocal instead of
	lookup_symbol_aux_symtabs and lookup_symbol_aux_psymtabs.

	* Makefile.in (symtab.o): Depend on $(cp_support_h).

	* symtab.c: #include "cp-support.h"

	* cp-support.h: Declare cp_copy_usings, cp_free_usings.

	* cp-support.c (cp_free_usings): New function.
	(cp_copy_usings): New function.

	* symtab.c (lookup_symbol_aux): Call lookup_symbol_aux_using to
	apply using directives.
	(lookup_symbol_aux_using): New function.

2002-10-11  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add tests from within C::D::marker2.
	* gdb.c++/namespace.cc: Add namespace C and its contents.
@
text
@a188 19
# Now, test to see if the appropriate namespaces are in scope when
# trying to print out stuff from within a function defined within a
# namespace.

if ![runto "'C::D::marker2'"] then {
    perror "couldn't run to marker2"
    continue
}

gdb_test "print c" "\\$\[0-9\].* = 1" "print c"
gdb_test "print cc" "No symbol \"cc\" in current context." "print cc"
gdb_test "print 'C::cc'" "\\$\[0-9\].* = 2" "print C::cc"
gdb_test "print cd" "\\$\[0-9\].* = 3" "print cd"
gdb_test "print 'C::D::cd'" "\\$\[0-9\].* = 3" "print C::D::cd"
gdb_test "print 'E::cde'" "\\$\[0-9\].* = 5" "print E::cde"

# FIXME: carlton/2002-10-11: It would be nice to test printing
# "E::ce", but unfortunately GDB will print it out even though it
# shouldn't.  Oops.
@


1.12.16.2
log
@2002-10-15  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_using_loop): prefix_len should be <=
	outer_length.
	(lookup_symbol_aux_using_loop): Don't skip colons in rest_of_outer
	if we've used all of outer.
	* cp-support.h: Rename declaration of cp_add_using to
	cp_add_using_obstack.
	* cp-support.c (cp_add_using_obstack): Rename from cp_add_using.
	* buildsym.h: Rename arguments in declaration of
	add_using_directive.
	* buildsym.c (add_using_directive): Finish definition, rename
	arguments.
	* cp-support.h: Add declaration for cp_add_using_xmalloc.
	* cp-support.c (cp_add_using_xmalloc): New function.
	* buildsym.c (copy_usings_to_obstack): New function.
	(end_symtab): Set STATIC_BLOCK's BLOCK_USING using
	copy_usings_to_obstack.

2002-10-15  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add anonymous namespace tests.
	* gdb.c++/namespace.cc: Add anonymous namespaces.
@
text
@a207 7

gdb_test "print cX" "\\$\[0-9\].* = 6" "print cX"
gdb_test "print 'F::cXf'" "\\$\[0-9\].* = 7" "print F::cXf"
gdb_test "print 'F::cXfX'" "\\$\[0-9\].* = 8" "print F::cXfX"
gdb_test "print X" "\\$\[0-9\].* = 9" "print X"
gdb_test "print 'G::Xg'" "\\$\[0-9\].* = 10" "print G::Xg"
gdb_test "print 'G::XgX'" "\\$\[0-9\].* = 11" "print G::XgX"
@


1.12.16.3
log
@2002-10-16  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (dwarf_tag_name): Add DWARF 3 names.
	(dwarf_attr_name): Ditto.
	(dwarf_type_encoding_name): Ditto.
	(scan_partial_symbols): Descend into DW_TAG_namespace entries.
	(process_die): Handle DW_TAG_namespace,
	DW_TAG_imported_declaration, DW_TAG_imported_module.
	(read_namespace): New function.

2002-10-17  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.cc: Add namespace renaming, using directives,
	and using declarations.
	* gdb.c++/namespace.exp: Add some xfails, including namespace
	renaming, using directives, and using declarations.
@
text
@d189 2
a190 2
# Test to see if the appropriate namespaces are in scope when trying
# to print out stuff from within a function defined within a
d205 3
a207 14
# FIXME: carlton/2002-10-17: It's somewhat accidental that we
# currently get this one right.  (Delete this comment once namespace
# scope issues have been handled correctly!)

gdb_test "print shadow" "\\$\[0-9\].* = 13" "print shadow"


# NOTE: carlton/2002-10-17: This one won't get fixed until namespaces
# are first-class objects.

setup_xfail "*-*-*"
gdb_test "print 'E::ce'" "No symbol \"E::ce\" in current context." "print E::ce"

# Some anonymous namespace tests.
a214 31

# Test namespace renaming.

setup_xfail "*-*-*"
gdb_test "print 'I::h'" "\\$\[0-9\].* = 14" "print I::h"

# Test using directives.

# NOTE: carlton/2002-10-17: Some of these are easy, but some of these
# have unfortunate interactions with namespace scope issues.  As of
# this writing, some of these pass, but they pass for the wrong reasons.

setup_xfail "*-*-*"
gdb_test "print j" "\\$\[0-9\].* = 15" "print j"
setup_xfail "*-*-*"
gdb_test "print 'L::k'" "\\$\[0-9\].* = 16" "print L::k"
setup_xfail "*-*-*"
gdb_test "print k" "No symbol \"k\" in current context." "print k"
setup_xfail "*-*-*"
gdb_test "print cdm" "\\$\[0-9\].* = 17" "print cdm"
setup_xfail "*-*-*"
gdb_test "print 'Q::o'" "\\$\[0-9\].* = 18" "print Q::o"
setup_xfail "*-*-*"
gdb_test "print o" "No symbol \"o\" in current context." "print o"

# Test using declarations.  I should probably test these more.

setup_xfail "*-*-*"
gdb_test "print r1" "\\$\[0-9\].* = 19" "print r1"
setup_xfail "*-*-*"
gdb_test "print r2" "No symbol \"r2\" in current context." "print r2"
@


1.12.16.4
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d215 1
a215 1
setup_kfail "FIXME"
d229 1
a229 1
setup_kfail "FIXME"
d238 1
a238 1
setup_kfail "FIXME"
d240 1
a240 1
setup_kfail "FIXME"
d242 1
a242 1
setup_kfail "FIXME"
d244 1
a244 1
setup_kfail "FIXME"
d246 1
a246 1
setup_kfail "FIXME"
d248 1
a248 1
setup_kfail "FIXME"
d253 1
a253 1
setup_kfail "FIXME"
d255 1
a255 1
setup_kfail "FIXME"
@


1.12.16.5
log
@2002-11-19  David Carlton  <carlton@@math.stanford.edu>

	* block.c: Whitespace cleanup.
	* buildsym.c (finish_block): Delete #if'd out code.
	* symtab.c (lookup_symbol_namespace): Add comment.
	* dwarf2read.c (scan_partial_symbols): Fix typo.

2002-11-19  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Delete FIXME comment.
	Fill in PR's for setup_kfail's.
	Fiddle with comments at top of file.
@
text
@d21 1
a21 1
# Originally written by Satish Pai <pai@@apollo.hp.com> 1997-07-23
d25 1
a25 1
# Note: The original tests were geared to the HP aCC compiler,
d28 1
a28 1
# Note: As of 2000-06-03, they passed under g++ - djb
d204 5
d211 1
d213 1
a213 1
# are first-class objects.  The PR isn't right, either.
d215 1
a215 1
setup_kfail "gdb/827"
d229 1
a229 1
setup_kfail "gdb/830"
d238 1
a238 1
setup_kfail "gdb/829"
d240 1
a240 1
setup_kfail "gdb/829"
d242 1
a242 1
setup_kfail "gdb/829"
d244 1
a244 1
setup_kfail "gdb/829"
d246 1
a246 1
setup_kfail "gdb/829"
d248 1
a248 1
setup_kfail "gdb/829"
d253 1
a253 1
setup_kfail "gdb/831"
d255 1
a255 1
setup_kfail "gdb/831"
@


1.12.16.6
log
@2002-11-22  David Carlton  <carlton@@math.stanford.edu>

	* linespec.c (examine_compound_token): Rewrite as switch
	statement, and add FIXME comment.
	* frame.h: Make arg of block_innermost_frame const.
	* blockframe.c (block_innermost_frame): Make arg const.
	* block.h: Make args to block_function, contained_in const.
	* block.c (block_function): Make arg const.
	(contained_in): Ditto.
	* value.h: Make arg of symbol_read_needs_frame const.
	* findvar.c (symbol_read_needs_frame): Make arg const.
	* symtab.h: Make first arg of symbol_demangled_name const.
	* symtab.c (symbol_demangled_name): Make arg const.
	* value.h: Make first arg of read_var_value const.
	* findvar.c (read_var_value): Make first arg const.
	* Makefile.in (valops.o): Depend on cp_support_h.
	* valops.c: #include "cp-support.h"
	* symtab.h: Add FIXME about name of namespace_enum.
	Add opaque declaration of struct using_direct_node.
	* symtab.c (lookup_symbol_namespace): Make extern; rename args.
	* symtab.h: Declare lookup_symbol_namespace.
	* valops.c (value_struct_elt_for_reference): Make 'name' a const
	char *.
	(value_namespace_elt): New function.
	* expprint.c (print_subexp): Ditto.
	(dump_subexp): Ditto.
	* parse.c (length_of_subexp): Ditto.
	(prefixify_subexp): Ditto.
	* expression.h: Update comment to reflect the block in OP_SCOPE.
	* c-exp.y: Set block in OP_SCOPE expression.
	* jv-exp.y (push_qualified_expression_name): Put a NULL block in
	OP_SCOPE expression.
	* objc-exp.y: Ditto.
	* p-exp.y: Ditto.
	* eval.c (evaluate_subexp_standard): Handle OP_SCOPE via
	value_aggregate_elt.
	* value.h: Add declaration for value_aggregate_elt; delete
	declaration for value_struct_elt_for_reference.
	* valops.c (value_aggregate_elt): New function.
	(value_struct_elt_for_reference): Make static.  Don't check type
	of curtype.
	* c-exp.y: Accept TYPE_CODE_NAMESPACE in qualified_name.
	* cp-support.c (cp_check_namespace_symbol): Set TYPE_NAME (type).

2002-11-22  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change a couple of tests to not use
	single quotes.
@
text
@d79 1
a79 3
# single quotes. :-(

# NOTE: carlton/2002-11-22: the colons are becoming less necessary.
a87 7
send_gdb "print AAA::c\n"
gdb_expect {
   -re "\\$\[0-9\]* = 0 '\\\\(0|000)'\r\n$gdb_prompt $" { pass "print AAA::c" }
   -re ".*$gdb_prompt $" { fail "print AAA::c" }
   timeout { fail "(timeout) print AAA::c" }
}

d125 1
a125 1
send_gdb "print AAA::xyzq('x')\n"
d128 1
a128 1
       pass "print AAA::xyzq('x')"
d130 2
a131 2
   -re ".*$gdb_prompt $" { fail "print AAA::xyzq('x')" }
   timeout { fail "(timeout) print AAA::xyzq('x')" }
@


1.12.16.7
log
@2002-11-24  David Carlton  <carlton@@bactrian.org>

	* Makefile.in (c-typeprint.o): Depend on gdb_assert_h.
	* c-typeprint.c: #include "gdb_assert.h"
	* gdbtypes.c (recursive_dump_type): Handle TYPE_CODE_NAMESPACE.
	* c-typeprint.c (c_type_print_varspec_prefix): Ditto.
	(c_type_print_varspec_suffix): Ditto.
	(c_type_print_base): Ditto.
	* typeprint.c (print_type_scalar): Ditto.
	* printcmd.c (print_formatted): Ditto.
	* language.c (structured_type): Ditto.
	* cp-support.c (cp_check_namespace_symbol): Allocate type via
	init_type.
	* gdbtypes.c (init_type): Handle TYPE_CODE_NAMESPACE.
	* valops.c (value_namespace_elt): Handle sym == NULL.

2002-11-24  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/namespace.exp: Eliminate some of the single quotes, and
	duplicate some of the single quote tests without the quotes.
	Change "print E::ce" test.
	Add some ptype <namespace> tests.
	* carlton_runnamespace: Use different files for compiler with and
	without debug info.
@
text
@d81 1
a81 4
# NOTE: carlton/2002-11-24: the colons are becoming less necessary (or
# even desirable.)  For tests where it should still work with colons,
# I'm including versions both with and without colons; for tests that
# shouldn't work with colons, I'm only including one version.
a133 9
send_gdb "print 'AAA::xyzq'('x')\n"
gdb_expect {
   -re "\\$\[0-9\]* = 97 'a'\r\n$gdb_prompt $" {
       pass "print 'AAA::xyzq'('x')"
   }
   -re ".*$gdb_prompt $" { fail "print 'AAA::xyzq'('x')" }
   timeout { fail "(timeout) print 'AAA::xyzq'('x')" }
}
       
a164 9
send_gdb "print BBB::CCC::xyzq('x')\n"
gdb_expect {
   -re "\\$\[0-9\]* = 122 'z'\r\n$gdb_prompt $" {
       pass "print 'BBB::CCC::xyzq'('x')"
   }
   -re ".*$gdb_prompt $" { fail "print BBB::CCC::xyzq('x')" }
   timeout { fail "(timeout) print BBB::CCC::xyzq('x')" }
}
       
a186 9
send_gdb "print BBB::Class::xyzq\n"
gdb_expect {
   -re "\\$\[0-9\]* = \{char \\((BBB::|)Class \\*( const|), (char|int)\\)\} $hex <BBB::Class::xyzq\\(char\\)>\r\n$gdb_prompt $" {
       pass "print BBB::Class::xyzq"
   }
   -re ".*$gdb_prompt $" { fail "print BBB::Class::xyzq" }
   timeout { fail "(timeout) print BBB::Class::xyzq" }
}

d202 1
a202 1
if ![runto "C::D::marker2"] then {
d209 1
a209 2
gdb_test "print 'C::cc'" "\\$\[0-9\].* = 2" "print 'C::cc'"
gdb_test "print C::cc" "\\$\[0-9\].* = 2" "print C::cc"
d211 2
a212 4
gdb_test "print 'C::D::cd'" "\\$\[0-9\].* = 3" "print 'C::D::cd'"
gdb_test "print C::D::cd" "\\$\[0-9\].* = 3" "print C::D::cd"
gdb_test "print 'E::cde'" "\\$\[0-9\].* = 5" "print 'E::cde'"
gdb_test "print E::cde" "\\$\[0-9\].* = 5" "print E::cde"
d214 6
a219 3
gdb_test "print E::ce" "No symbol \"ce\" in namespace \"C::D::E\"." "print E::ce"
gdb_test "ptype C" "type = namespace C::C" "ptype C::C"
gdb_test "ptype E" "type = namespace C::D::E" "ptype C::D::E"
d224 2
a225 4
gdb_test "print 'F::cXf'" "\\$\[0-9\].* = 7" "print 'F::cXf'"
gdb_test "print F::cXf" "\\$\[0-9\].* = 7" "print F::cXf"
gdb_test "print 'F::cXfX'" "\\$\[0-9\].* = 8" "print 'F::cXfX'"
gdb_test "print F::cXfX" "\\$\[0-9\].* = 8" "print F::cXfX"
d227 2
a228 4
gdb_test "print 'G::Xg'" "\\$\[0-9\].* = 10" "print 'G::Xg'"
gdb_test "print G::Xg" "\\$\[0-9\].* = 10" "print G::Xg"
gdb_test "print 'G::XgX'" "\\$\[0-9\].* = 11" "print 'G::XgX'"
gdb_test "print G::XgX" "\\$\[0-9\].* = 11" "print G::XgX"
d233 1
a233 1
gdb_test "print I::h" "\\$\[0-9\].* = 14" "print I::h"
d244 1
a244 1
gdb_test "print L::k" "\\$\[0-9\].* = 16" "print L::k"
d250 1
a250 1
gdb_test "print Q::o" "\\$\[0-9\].* = 18" "print Q::o"
@


1.12.16.8
log
@2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (add_partial_enumeration): New function.
	(scan_partial_symbols): Call add_partial_enumeration.
	(locate_pdi_sibling): New function.
	(scan_partial_symbols): Call locate_pdi_sibling.  Get rid of
	nesting_level.
	(pdi_needs_namespace): New function.
	(add_partial_symbol): Add 'namespace' arg; calculate full name
	when appropriate.
	(scan_partial_symbols): Update calls to add_partial_symbol.
	(add_partial_enumeration): Ditto.
	(read_enumeration): Add processing_current_prefix to name when
	appropriate.
	(new_symbol): Set names of enumerators and typedefs appropriately
	if processing_has_namespace_info.
	* symtab.c (lookup_symbol_namespace): Rename 'namespace' argument
	to 'namespace_name'.
	* symtab.h: Ditto.
	* symtab.c (lookup_symbol_namespace): Delete FIXME comments; add a
	new one.
	(lookup_symbol_aux_file): New function.
	(lookup_symbol_aux): Delete FIXME comment.
	(lookup_symbol_aux): Don't search static block explicitly; delete
	FIXME comments.
	* valops.c (value_namespace_elt): Update call to
	lookup_symbol_namespace.
	* symtab.h: Update declaration for lookup_symbol_namespace.
	* symtab.c (lookup_symbol_namespace): Delete 'using' argument and
	add 'block' argument; get using directives via iterators.
	(lookup_symbol_aux_using_loop): Delete 'using' argument and add
	'block' argument.
	(lookup_symbol_aux_using): Don't calculate using directives.
	* block.c (block_using_iterator_first): New function.
	(block_using_iterator_next): Ditto.
	* block.h: Add comment.
	(struct block_using_iterator): New struct.
	Declare block_using_iterator_first, block_using_iterator_next.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (read_structure_scope): Set type name and
	processing_current_prefix appropriately.
	(new_symbol): Make sure that, in symbols associated to class
	types, the name includes appropriate namespaces.
	* buildsym.h: Rename processing_current_namespace to
	processing_current_prefix.
	* buildsym.c (finish_block): Ditto.
	* dwarf2read.c (psymtab_to_symtab_1): Ditto.
	(read_namespace): Ditto.  Also rename previous_namespace to
	previous_prefix.

	Now come a thousand and one const correctness fixes:
	* p-typeprint.c (pascal_print_type): Const.
	(pascal_type_print_method_args): Const.
	* p-lang.h: Const.
	* m2-typeprint.c (m2_print_type): Const.
	* valops.c (hand_function_call): Const.
	* jv-lang.c (java_primitive_type_from_name): Const.
	* jv-lang.h: Const.
	* jv-typeprint.c (java_print_type): Const.
	* language.c: (unk_lang_print_type): Const.
	* stack.c (frame_info): Const.
	* linespec.c (find_methods): Const.
	(find_method_name): Const
	* f-lang.h: Const.
	* f-typeprint.c (f_print_type): Const.
	* c-typeprint.c (c_print_type): Const.
	* c-lang.h: Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (lookup_primitive_typename): Const.
	* stack.c (print_frame): Const.
	(func_command): Delete pointless cast.
	* linespec.c (find_method_name): Const.
	* language.h: Const.
	* symfile.c (compare_psymbols): Const.
	* symtab.c (completion_list_add_name): Const.
	* breakpoint.c (break_at_finish_at_depth_command_1): Remove
	useless cast.
	(break_at_finish_command_1): Ditto.
	* typeprint.c (type_print): Const.
	* symtab.h: Const.
	* symtab.c (gdb_mangle_name): Const.
	(symbol_init_demangled_name): Const.
	(symbol_demangled_name): Const.
	* defs.h: Const.
	* printcmd.c (build_address_symbolic): Const.
	* valops.c (search_struct_method): Const.
	* cp-valprint.c (cp_is_vtbl_ptr_type): Const.
	(cp_print_value): Const.
	(cp_print_class_member): Const.
	* c-typeprint.c (cp_type_print_derivation_info): Const.
	(c_type_print_varspec_prefix): Const.
	(c_type_print_base): Const.
	* p-valprint.c (pascal_object_is_vtbl_ptr_type): Const.
	(pascal_object_print_value): Const.
	(pascal_object_print_class_member): Const.
	* p-typeprint.c (pascal_type_print_derivation_info): Const.
	(pascal_type_print_varspec_prefix): Const.
	(pascal_type_print_base): Const.
	* jv-typeprint.c (java_type_print_base): Const.
	* jv-lang.h (java_demangle_type_signature): Const.
	* jv-lang.c (java_demangle_type_signature): Const.
	(java_demangled_signature_length): Const.
	(java_demangled_signature_copy): Const.
	* jv-typeprint.c (java_type_print_derivation_info): Const.
	* jv-valprint.c (java_value_print): Const.
	(java_print_value_fields): Const.
	* jv-lang.c (is_object_type): Const.
	(evaluate_subexp_java): Const.
	* stabsread.c (read_cpp_abbrev): Const.
	(complain_about_struct_wipeout): Const.
	(cleanup_undefined_types): Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (add_name): Second arg const.
	(lookup_typename): Const.
	(lookup_unsigned_typename): Const.
	(lookup_signed_typename): Const.
	* linespec.c (find_methods): const char *class_name.
	* symtab.c (gdb_mangle_name): const char *newname.
	* valops.c (destructor_name_p): const char *dname.
	(search_struct_field): First arg const.
	* gdbtypes.c (check_typedef): const char *name (multiple places).
	(cfront_mangle_name): const char *newname.
	* gdbtypes.c (add_mangled_type): const char *tname.
	* valops.c (find_overload_match): const char *obj_type_name.
	* utils.c (gdb_print_host_address): Make first arg const.
	* defs.h: Declare first arg of gdb_print_host_address to be
	const.
	* valarith.c (find_size_for_pointer_math): const char *name.

2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc (main): Add marker comment.
	* gdb.c++/m-data.exp: Use marker comment instead of line numbers.
	* gdb.c++/m-data.cc: Delete superfluous namespace.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/m-static1.cc: Ditto.
	* carlton_runtest: Compare based on gdb.sum, not based on output.
	* carlton_runnamespace: Ditto.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Put tests for CClass.
	* gdb.c++/namespace.cc (C): Add CClass.
@
text
@a250 10
gdb_test "ptype CClass" "type = class C::CClass \{\r\n  public:\r\n    int x;\r\n\}" "ptype CClass"
gdb_test "ptype CClass::NestedClass" "type = class C::CClass::NestedClass \{\r\n  public:\r\n    int y;\r\n\}" "ptype CClass::NestedClass"
gdb_test "ptype NestedClass" "No symbol \"NestedClass\" in current context." "ptype NestedClass"
gdb_test "ptype ::C::CClass" "type = class C::CClass \{\r\n  public:\r\n    inty;\r\n\}" "ptype ::C::CClass"
gdb_test "ptype ::C::CClass::NestedClass" "type = class C::CClass::NestedClass \{\r\n  public:\r\n    int y;\r\n\}" "ptype ::C::CClass::NestedClass"
gdb_test "ptype ::C::NestedClass" "No symbol \"NestedClass\" in namespace \"C\"." "ptype ::C::NestedClass"
gdb_test "ptype C::CClass" "No symbol \"Class\" in namespace \"C::C\"" "ptype C::CClass"
gdb_test "ptype C::CClass::NestedClass" "No symbol \"Class\" in namespace \"C::C\"" "ptype C::CClass::NestedClass"
gdb_test "ptype C::NestedClass" "No symbol \"NestedClass\" in namespace \"C::C\"." "ptype C::NestedClass"

@


1.12.16.9
log
@2002-11-29  David Carlton  <carlton@@bactrian.org>

	* dwarf2read.c (add_partial_symbol): Add partial symbols
	corresponding to classes, etc. to global list.
	(new_symbol): Ditto, mutatis mutandem.

2002-11-29  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/namespace.exp: Add OtherFileClass tests.
	* gdb.c++/namespace1.cc (C): New file.
@
text
@a41 1
set srcfile1 ${testfile}1.cc
d50 1
a50 1
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile} ${srcdir}/${subdir}/${srcfile1}" "${binfile}" executable {debug c++}] != "" } {
d254 1
a254 1
gdb_test "ptype ::C::CClass" "type = class C::CClass \{\r\n  public:\r\n    int x;\r\n\}" "ptype ::C::CClass"
a259 6

# Tests involving multiple files

gdb_test "ptype OtherFileClass" "type = class C::OtherFileClass \{\r\n  public:\r\n    int z;\r\n\}" "ptype OtherFileClass"
gdb_test "ptype ::C::OtherFileClass" "type = class C::OtherFileClass \{\r\n  public:\r\n    int z;\r\n\}" "ptype ::C::OtherFileClass"
gdb_test "ptype C::OtherFileClass" "No symbol \"Class\" in namespace \"C::C\"" "ptype C::OtherFileClass"
@


1.12.16.10
log
@2002-12-17  David Carlton  <carlton@@math.stanford.edu>

	* c-exp.y (yylex): Modify the #if 1 block to handle nested types
	in a more honest manner.
	* symtab.c (lookup_nested_type): New function.
	* symtab.h: Declare lookup_nested_type.

2002-12-16  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_partial_symbol): Don't search past the end of
	the partial symbols.
	* Makefile.in (f-exp.tab.c): Don't depend on c-exp.tab.c.
	* dwarf2read.c (new_symbol): Only make global symbols associated
	to structures, etc. if the current language is C++.
	(add_partial_symbol): Ditto (for partial symbols).

2002-12-17  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc: Whitespace cleanup, to match mainline patch.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/namespace.exp: Fix comment.  Delete third argument to
	all the gdb_tests.

2002-12-16  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change KFAIL messages to point to c++/XXX
	instead of gdb/XXX.
@
text
@d82 4
a85 4
# NOTE: carlton/2002-11-24: the quotes are becoming less necessary (or
# even desirable.)  For tests where it should still work with quotes,
# I'm including versions both with and without quotes; for tests that
# shouldn't work with quotes, I'm only including one version.
d181 1
a181 1
       pass "print BBB::CCC::xyzq('x')"
d238 23
a260 22
gdb_test "print c" "\\$\[0-9\].* = 1"
gdb_test "print cc" "No symbol \"cc\" in current context."
gdb_test "print 'C::cc'" "\\$\[0-9\].* = 2"
gdb_test "print C::cc" "\\$\[0-9\].* = 2"
gdb_test "print cd" "\\$\[0-9\].* = 3"
gdb_test "print C::D::cd" "No type \"D\" within context \"C::C\"."
gdb_test "print 'E::cde'" "\\$\[0-9\].* = 5"
gdb_test "print E::cde" "\\$\[0-9\].* = 5"
gdb_test "print shadow" "\\$\[0-9\].* = 13"
gdb_test "print E::ce" "No symbol \"ce\" in namespace \"C::D::E\"."
gdb_test "ptype C" "type = namespace C::C"
gdb_test "ptype E" "type = namespace C::D::E"

gdb_test "ptype CClass" "type = class C::CClass \{\r\n  public:\r\n    int x;\r\n\}"
gdb_test "ptype CClass::NestedClass" "type = class C::CClass::NestedClass \{\r\n  public:\r\n    int y;\r\n\}"
gdb_test "ptype NestedClass" "No symbol \"NestedClass\" in current context."
gdb_test "ptype ::C::CClass" "type = class C::CClass \{\r\n  public:\r\n    int x;\r\n\}"
gdb_test "ptype ::C::CClass::NestedClass" "type = class C::CClass::NestedClass \{\r\n  public:\r\n    int y;\r\n\}"
gdb_test "ptype ::C::NestedClass" "No symbol \"NestedClass\" in namespace \"C\"."
gdb_test "ptype C::CClass" "No symbol \"CClass\" in namespace \"C::C\"."
gdb_test "ptype C::CClass::NestedClass" "No symbol \"CClass\" in namespace \"C::C\"."
gdb_test "ptype C::NestedClass" "No symbol \"NestedClass\" in namespace \"C::C\"."
d264 3
a266 3
gdb_test "ptype OtherFileClass" "type = class C::OtherFileClass \{\r\n  public:\r\n    int z;\r\n\}"
gdb_test "ptype ::C::OtherFileClass" "type = class C::OtherFileClass \{\r\n  public:\r\n    int z;\r\n\}"
gdb_test "ptype C::OtherFileClass" "No symbol \"Class\" in namespace \"C::C\"."
d270 10
a279 10
gdb_test "print cX" "\\$\[0-9\].* = 6"
gdb_test "print 'F::cXf'" "\\$\[0-9\].* = 7"
gdb_test "print F::cXf" "\\$\[0-9\].* = 7"
gdb_test "print 'F::cXfX'" "\\$\[0-9\].* = 8"
gdb_test "print F::cXfX" "\\$\[0-9\].* = 8"
gdb_test "print X" "\\$\[0-9\].* = 9"
gdb_test "print 'G::Xg'" "\\$\[0-9\].* = 10"
gdb_test "print G::Xg" "\\$\[0-9\].* = 10"
gdb_test "print 'G::XgX'" "\\$\[0-9\].* = 11"
gdb_test "print G::XgX" "\\$\[0-9\].* = 11"
d283 2
a284 2
setup_kfail "c++/830" "*-*-*"
gdb_test "print I::h" "\\$\[0-9\].* = 14"
d292 12
a303 12
setup_kfail "c++/829" "*-*-*"
gdb_test "print j" "\\$\[0-9\].* = 15"
setup_kfail "c++/829" "*-*-*"
gdb_test "print L::k" "\\$\[0-9\].* = 16"
setup_kfail "c++/829" "*-*-*"
gdb_test "print k" "No symbol \"k\" in current context."
setup_kfail "c++/829" "*-*-*"
gdb_test "print cdm" "\\$\[0-9\].* = 17"
setup_kfail "c++/829" "*-*-*"
gdb_test "print Q::o" "\\$\[0-9\].* = 18"
setup_kfail "c++/829" "*-*-*"
gdb_test "print o" "No symbol \"o\" in current context."
d307 4
a310 4
setup_kfail "c++/831" "*-*-*"
gdb_test "print r1" "\\$\[0-9\].* = 19"
setup_kfail "c++/831" "*-*-*"
gdb_test "print r2" "No symbol \"r2\" in current context."
@


1.12.16.11
log
@2002-12-20  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_minsyms): Don't call
	lookup_symbol_aux from within this.
	* values.c (value_static_field): lookup_symbol_linkage.
	(value_fn_field): lookup_symbol_linkage.
	* valops.c (value_struct_elt_for_reference): lookup_symbol_linkage.
	* blockframe.c (inside_main_func): lookup_symbol_linkage.
	* source.c (select_source_symtab): lookup_symbol_linkage.
	* nlmread.c (nlm_symfile_read): Call lookup_symbol_linkage.
	* nindy-tdep.c (nindy_frame_chain_valid): Call
	lookup_symbol_linkage.
	* linespec.c (count_methods): Call lookup_symbol_linkage.
	(add_matching_methods): Ditto.
	(add_constructors): Ditto.
	* hppa-tdep.c (find_stub_with_shl_get): Call
	lookup_symbol_linkage.  Delete symbol2.
	(initialize_hp_cxx_exception_support): Call lookup_symbol_linkage.
	* cli/cli-cmds.c (edit_command): SYMBOL_PRINT_NAME.
	(list_command): SYMBOL_PRINT_NAME.
	* valops.c (value_of_variable): SYMBOL_PRINT_NAME
	(hand_function_call): SYMBOL_PRINT_NAME.
	* typeprint.c (typedef_print): SYMBOL_PRINT_NAME.
	* tracepoint.c (tracepoints_info): SYMBOL_PRINT_NAME.
	* symtab.c (lookup_partial_symbol): SYMBOL_BEST_NAME.
	(compare_search_syms): SYMBOL_BEST_NAME.
	(print_symbol_info): SYMBOL_PRINT_NAME.
	(print_msymbol_info): SYMBOL_PRINT_NAME.
	(rbreak_command): SYMBOL_PRINT_NAME.
	* symmisc.c (print_symbol): SYMBOL_PRINT_NAME.
	* stack.c (print_frame): SYMBOL_PRINT_NAME.
	(frame_info): SYMBOL_PRINT_NAME.
	(print_block_frame_locals): SYMBOL_PRINT_NAME.
	(print_block_frame_labels): SYMBOL_PRINT_NAME.
	(print_frame_arg_vars): SYMBOL_PRINT_NAME.
	(return_command): SYMBOL_PRINT_NAME.
	* stabsread.c (define_symbol): SYMBOL_PRINT_NAME.
	* p-valprint.c (pascal_val_print): SYMBOL_PRINT_NAME.
	* printcmd.c (build_address_symbolic): SYMBOL_PRINT_NAME.
	(sym_info): SYMBOL_PRINT_NAME.
	(print_frame_args): SYMBOL_PRINT_NAME.
	* objc-lang.c (compare_selectors): SYMBOL_BEST_NAME.
	(compare_classes): SYMBOL_BEST_NAME.
	* maint.c (maintenance_translate_address): SYMBOL_PRINT_NAME.
	* linespec.c (find_method): SYMBOL_PRINT_NAME.
	(select_symbols): SYMBOL_PRINT_NAME.
	* infcmd.c (jump_command): SYMBOL_PRINT_NAME.
	* findvar.c (locate_var_value): SYMBOL_PRINT_NAME.
	* expprint.c (print_subexp): SYMBOL_PRINT_NAME.
	* c-valprint.c (c_val_print): SYMBOL_PRINT_NAME.
	* buildsym.c (finish_block): SYMBOL_PRINT_NAME.
	* breakpoint.c (print_one_breakpoint): SYMBOL_PRINT_NAME.
	* ax-gdb.c (gen_var_ref): SYMBOL_PRINT_NAME.
	* ada-typeprint.c (ada_typedef_print): SYMBOL_PRINT_NAME.
	* ada-lang.c (user_select_syms): Use SYMBOL_PRINT_NAME instead of
	SYMBOL_SOURCE_NAME.
	(user_select_syms):
	(ada_finish_decode_line_1): Use SYMBOL_BEST_NAME instead of
	SYMBOL_SOURCE_NAME.
	* symtab.h (SYMBOL_PRINT_NAME): Rename from SYMBOL_SOURCE_NAME.
	* symfile.c (compare_symbols): Use SYMBOL_BEST_NAME, not
	SYMBOL_SOURCE_NAME.
	(compare_psymbols): Ditto.
	* symtab.c (lookup_symbol_linkage): New function.
	* symtab.h: Declare lookup_symbol_linkage.
	* c-valprint.c (c_val_print): Call lookup_symbol_minsym.
	* symtab.c (lookup_symbol_aux_minsyms): Call minsym_static.
	* minsyms.c (minsym_static): New function.
	* symtab.h: Declare minsym_static.
	* symtab.c (lookup_symbol_minsym): New function.
	(search_symbols): Call lookup_symbol_minsym instead of
	lookup_symbol.
	(lookup_symbol_namespace): Don't take apart NAME.
	* symtab.h: Declare lookup_symbol_minsym.
	* printcmd.c (build_address_symbolic): Don't use old version of
	SYMBOL_LINKAGE_NAME.
	* symtab.c (lookup_block_symbol): Change mangled names to linkage
	name, and use SYMBOL_LINKAGE_NAME as appropriate.
	* symtab.h (SYMBOL_LINKAGE_NAME): New macro, with a different
	meaning from the old macro of the same name.  Also, add comments
	about proper uses of names.
@
text
@d272 1
d277 1
@


1.12.16.12
log
@2003-01-06  David Carlton  <carlton@@math.stanford.edu>

	* config/djgpp/fnchange.lst: Mention
	testsuite/gdb.c++/namespace1.cc.
	* cp-support.h: Declare cp_lookup_namespace_symbol.
	* cp-support.c (cp_lookup_namespace_symbol): New function.
	(cp_check_namespace_symbol): Call cp_lookup_namespace_symbol.
	(cp_lookup_possible_namespace_symbol): Update comment.
	* symtab.c (lookup_symbol_aux_file): Add 'anonymous_namespace'
	argument.
	(lookup_symbol_namespace): Call lookup_symbol_aux_file with new
	argument.
	* cp-support.h: Declare cp_is_anonymous.
	* cp-support.c (cp_is_anonymous): New function.
	* buildsym.c (add_symbol_to_list): Don't test for anonymous
	namespace mention here.
	(scan_for_anonymous_namespaces): Test for it here, instead.
	* symtab.c (lookup_symbol_aux_minsyms): Delete.
	(lookup_symbol_aux_nonlocal): Don't call
	lookup_symbol_aux_minsyms.

2003-01-06  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Test anonymous namespaces and multiple
	files.
	* gdb.c++/namespace1.cc: Add anonymous namespaces.
@
text
@a276 2
gdb_test "print cXOtherFile" "No symbol \"cXOtherFile\" in current context."
gdb_test "print XOtherFile" "No symbol \"XOtherFile\" in current context."
@


1.12.16.13
log
@2003-05-07  David Carlton  <carlton@@bactrian.org>

	* valops.c (value_aggregate_elt): Add 'noside' argument.
	(value_struct_elt_for_reference): Add 'block', 'noside'
	arguments.  Call value_maybe_namespace_elt.
	(value_namespace_elt): Add 'noside' argument.  Break out code into
	value_maybe_namespace_elt.
	(value_maybe_namespace_elt): New.  Handle types.
	* value.h: Update declaration for value_aggregate_elt.
	* eval.c (evaluate_subexp_standard): Pass 'noside' to
	value_aggregate_elt.
	* c-exp.y: Added 'qualified_type'.
	(yylex): Comment out nested type stuff.

2003-05-07  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/namespace.exp: Update messages to match new parser
	changes.
@
text
@d258 1
a258 1
gdb_test "ptype C::CClass::NestedClass" "No type \"CClass\" within class or namespace \"C::C\"."
d265 1
a265 1
gdb_test "ptype C::OtherFileClass" "No symbol \"OtherFileClass\" in namespace \"C::C\"."
@


1.12.16.14
log
@2003-05-09  David Carlton  <carlton@@bactrian.org>

	* linespec.c (examine_compound_token): Handled classes nested
	within classes, not just classes nested within namespaces.

2003-05-09  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/breakpoint.cc: New.
	* gdb.c++/breakpoint.exp: New.
	* gdb.c++/namespace.exp: Update "print C::D::cd" for current
	output.
@
text
@d243 1
a243 1
gdb_test "print C::D::cd" "No type \"D\" within class or namespace \"C::C\"."
@


1.12.16.15
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d1 1
a1 1
# Copyright 1997, 1998, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a41 1
set objfile ${objdir}/${subdir}/${testfile}.o
a42 1
set objfile1 ${objdir}/${subdir}/${testfile}1.o
d49 5
a53 2
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${objfile}" object {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
a55 3
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${objfile1}" object {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}
a56 3
if  { [gdb_compile "${objfile} ${objfile1}" "${binfile}" executable {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}
a262 1
gdb_test "print cOtherFile" "\\$\[0-9\].* = 316"
@


1.12.16.16
log
@2003-06-16  David Carlton  <carlton@@kealia.com>

	* symfile.h: Change formatting.
	* block.c (allocate_block): Rephrase comment.
	* block.h (BLOCK_GCC_COMPILED): Move definition.
	* cp-namespace.c: Include command.h instead of gdbcmd.h.  Update
	comments, reorder functions.
	(lookup_symbol_file): Set symtab when looking for namespace
	symbols.  Update call to lookup_possible_namespace_symbol.
	(initialize_namespace_blocks): Change comment.
	(get_namespace_objfile): Change objfile name.
	(cp_check_namespace_symbol): Extract body into
	check_namespace_symbol_block.
	(check_namespace_symbol_block): New.
	(lookup_namespace_symbol): Make static, rename from
	cp_lookup_symbol.
	(check_possible_namespace_symbols_loop): Update comment.
	(check_one_possible_namespace_symbol): Call
	check_namespace_symbol_block.
	(lookup_possible_namespace_symbol): Make static; rename from
	cp_lookup_possible_namespace_symbol.
	* cp-support.h: Update declarations.
	* Makefile.in (c-typeprint.o): Don't depend on gdb_assert_h.
	(cp-namespace.o): Depend on command_h, not gdbcmd_h.
	* c-typeprint.c: Don't include gdb_assert.h.
	(c_type_print_base): Delete assertion.  Use TYPE_TAG_NAME.
	* dwarf2read.c: Delete double include of cp-support.h.
	(add_partial_symbol): Look at psym for static variables.
	(add_partial_namespace): Update call to
	cp_check_namespace_symbol.
	(locate_pdi_sibling): Update comment.

2003-06-16  David Carlton  <carlton@@kealia.com>

	* gdb.c++/namespace.exp: Add 'maint cp namespace' test.
	* gdb.c++/maint.exp (test_namespace): Change comment.
@
text
@a315 15

# Test to make sure that 'maint cplus namespace' is at least picking
# up one of the namespaces in this file.

# FIXME: carlton/2003-06-16: We should check to make sure it picks up
# all of the namespaces.  Unfortunately, I can't guarantee what order
# they'll be listed in when you do 'maint cplus namespace'.  Probably
# I should stash the output of that command in a variable somewhere
# and examine that variable for all of the relevant namespaces.

# FIXME: carlton/2003-06-16: This test (like many others in this file,
# doubtless) will fail in non-DWARF-2 situations; I need to go through
# and audit the tests accordingly at some point.

gdb_test "maint cplus namespace" ".*C::C.*"
@


1.12.16.17
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* dwarf2read.c (add_partial_symbol): Add 'objfile' argument to
	call to cp_check_possible_namespace_symbols.
	(add_partial_namespace): Add partial symbol instead of calling
	cp_check_namespace_symbol.
	(read_namespace): Add symbol associated to namespace.
	(new_symbol): Handle DW_TAG_namespace.
	* cp-support.h: Delete declaration of cp_check_namespace_symbol;
	add 'objfile' argument to declaration of
	cp_check_possible_namespace_symbols.
	* cp-namespace.c: Delete variables namespace_block,
	possible_namespace_block, namespace_objfile.
	Delete functions get_namespace_block, get_namespace_objfile,
	cp_check_namespace_symbol, check_namespace_symbol_block,
	lookup_namespace_symbol.
	(lookup_symbol_file): Delete call to lookup_namespace_symbol;
	tweak call to lookup_possible_namespace_symbol.
	(initialize_namespace_symtab): Rename from
	initialize_namespace_blocks; add 'objfile' argument, don't do
	anything special with global block.
	(get_possible_namespace_block): Add 'objfile' argument.
	(check_possible_namespace_symbols_loop)
	(cp_check_possible_namespace_symbols): Ditto.
	(free_namespace_block): Rename from free_namespace_blocks; don't
	do anything special with global block.
	(check_one_possible_namespace_symbol): Add 'objfile' argument, and
	inline call to check_namespace_symbol_block.
	(lookup_possible_namespace_symbol): Add 'symtab' argument, loop
	over all objfiles.
	(maintenance_cplus_namespace): Only have possible symbols; add
	loop over objfiles.
	(_initialize_cp_namespace): Tweak doc string.
	* objfiles.h: Add opaque declaration of struct symtab.
	(struct objfile): Add cp_namespace_symtab member.
	* objfiles.c (allocate_objfile): Set
	objfile->cp_namespace_symtab.

2003-06-27  David Carlton  <carlton@@kealia.com>

	* carlton_runtest (FASTTESTS): Add gdb.c++/pr-1210.exp.
	* gdb.c++/namespace.exp: Delete test for maint cp namespace.
	* gdb.c++/maint.exp (test_help): Tweak output for 'help maint cp
	namespace'.
	(test_namespace): Tweak comment.
@
text
@d316 15
@


1.12.16.18
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* carlton_runnamespace: Ditto.
	* carlton_runtest: Ditto.
	* configure: Regnerate.
@
text
@@


1.11
log
@2002-01-10  Michael Snyder  <msnyder@@redhat.com>

        * gdb.c++/namespace.exp: Accept both '\0' and '\000'.
@
text
@d171 1
a171 1
   -re "\\$\[0-9\]* = \{char \\((BBB::|)Class \\*, (char|int)\\)\} $hex <BBB::Class::xyzq\\(char\\)>\r\n$gdb_prompt $" {
@


1.10
log
@update copyright
@
text
@d83 1
a83 1
   -re "\\$\[0-9\]* = 0 '\\\\0'\r\n$gdb_prompt $" { pass "print 'AAA::c'" }
@


1.9
log
@        * gdb.c++/namespace.exp: '\0', not '\000'.
@
text
@d1 1
a1 1
# Copyright 1997, 1998, 2000, 2001 Free Software Foundation, Inc.
@


1.8
log
@        * gdb.c++/classes.exp, gdb.c++/derivation.exp,
        gdb.c++/inherit.exp, gdb.c++/method.exp,
        gdb.c++/namespace.exp, gdb.c++/templates.exp,
        gdb.c++/userdef.exp, gdb.c++/virtfunc.exp: Updates for v3 demangler
        and class layout support.
@
text
@d83 1
a83 1
   -re "\\$\[0-9\]* = 0 '\\\\000'\r\n$gdb_prompt $" { pass "print 'AAA::c'" }
@


1.7
log
@2001-11-20  Michael Snyder  <msnyder@@redhat.com>

	* gdb.c++/namespace.exp: Fix quotes in output messages.
@
text
@d116 3
@


1.6
log
@2001-04-22  Michael Chastain  <chastain@@redhat.com>

	* gdb.c++/local.exp: Use the 'runto' library function.
	* gdb.c++/namespace.exp: Likewise.
	* gdb.c++/overload.exp: Likewise.
@
text
@d169 1
a169 1
       pass "print 'BBB::Class'::xyzq"
d171 2
a172 2
   -re ".*$gdb_prompt $" { fail "print 'BBB::Class'::xyzq" }
   timeout { fail "(timeout) print 'BBB::Class'::xyzq" }
@


1.5
log
@	* gdb.base/annota1.exp: Move test of isnative to earlier in the
 	file -- to prevent failing when the compile fails but we have no
 	intention of running the tests anyway.

	* gdb.base/long_long.exp: Test target_info for no_long_long, skip
	tests if set.

	* gdb.base/maint.exp: Support 2 byte integers as well as 4 byte
 	integers.

	* gdb.c++/ctti.exp: Skip tests if skip_cplus_tests returns true.
	* gdb.c++/namespace.exp: Ditto.

Fix PR gdb/16.
@
text
@d71 6
a76 14
send_gdb "break marker1\n" ; gdb_expect -re ".*$gdb_prompt $"
    send_gdb "cont\n"
    gdb_expect {
        -re "Break.* marker1 \\(\\) at .*:$decimal.*$gdb_prompt $" {
            send_gdb "up\n"
            gdb_expect {
                -re ".*main.*$gdb_prompt $" { pass "up from marker1" }
                -re ".*$gdb_prompt $"       { fail "up from marker1" }
                timeout { fail "up from marker1 (timeout)" }
            }
        }
        -re "$gdb_prompt $" { fail "continue to marker1"  }
        timeout { fail "(timeout) continue to marker1"  }
    }
@


1.4
log
@Update/correct copyright notices.
@
text
@d1 1
a1 1
# Copyright 1997, 1998, 2000 Free Software Foundation, Inc.
d38 1
@


1.3
log
@2000-12-05  Michael Snyder  <msnyder@@mvstp600e.cygnus.com>

        * gdb.base/constvars.exp: Add a "pass" message if "up" succeeds.
        * gdb.base/miscexprs.exp: Ditto.
        * gdb.base/pointers.exp:  Ditto.
        * gdb.c++/derivation.exp: Ditto.
        * gdb.c++/local.exp:      Ditto.
        * gdb.c++/namespace.exp:  Ditto.
        * gdb.c++/overload.exp:   Ditto.
        * gdb.c++/ref-types.exp:  Ditto.
@
text
@d1 1
a1 1
# Copyright (C) 1997, 1998 Free Software Foundation, Inc.
@


1.2
log
@2000-12-05  Michael Snyder  <msnyder@@mvstp600e.cygnus.com>

        * gdb.base/constvars.exp: Test result of "up" command.
        * gdb.base/miscexprs.exp: Ditto.
        * gdb.base/pointers.exp:  Ditto.
        * gdb.base/scope.exp:     Ditto.
        * gdb.c++/derivation.exp: Ditto.
        * gdb.c++/local.exp:      Ditto.
        * gdb.c++/namespace.exp:  Ditto.
        * gdb.c++/overload.exp:   Ditto.
        * gdb.c++/ref-types.exp:  Ditto.
@
text
@d77 1
a77 1
                -re ".*$gdb_prompt $" { fail "up from marker1" }
@


1.1
log
@New tests, fix old tests, make more tests work
@
text
@d76 3
a78 2
                -re ".*$gdb_prompt $" { pass "up from marker1" }
                timeout { fail "up from marker1" }
@

