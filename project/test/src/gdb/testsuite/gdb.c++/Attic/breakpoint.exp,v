head	1.1;
access;
symbols
	carlton_dictionary-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.05.09.18.28.53;	author carlton;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.05.09.18.28.53;	author carlton;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.05.16.16.10.54;	author carlton;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.08.30.03.40.33;	author chastain;	state dead;
branches;
next	;


desc
@@


1.1
log
@file breakpoint.exp was initially added on branch carlton_dictionary-branch.
@
text
@@


1.1.2.1
log
@2003-05-09  David Carlton  <carlton@@bactrian.org>

	* linespec.c (examine_compound_token): Handled classes nested
	within classes, not just classes nested within namespaces.

2003-05-09  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/breakpoint.cc: New.
	* gdb.c++/breakpoint.exp: New.
	* gdb.c++/namespace.exp: Update "print C::D::cd" for current
	output.
@
text
@a0 68
# Copyright 2003 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# This file is part of the gdb testsuite.

# This contains tests for breakpoints in C++.

# NOTE: carlton/2003-05-09: It's not at all comprehensive right now,
# and lots of the other files test breakpoints as well.  But I wanted
# to add a test covering a bug I found in linespec.c:decode_compound,
# and putting it in a separate file seemed natural.

if $tracelevel then {
        strace $tracelevel
        }

if { [skip_cplus_tests] } { continue }

#
# test running programs
#
set prms_id 0
set bug_id 0

set testfile "breakpoint"
set srcfile ${testfile}.cc
set binfile ${objdir}/${subdir}/${testfile}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug c++}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if [get_compiler_info ${binfile} "c++"] {
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

proc test_breakpoint {name} {
    gdb_breakpoint "${name}"
    gdb_test "continue" "Continuing.\r\n\r\nBreakpoint \[0-9\]*, ${name}.*" "continue to ${name}"
}

if ![runto_main] then {
    perror "couldn't run to breakpoint"
    continue
}

test_breakpoint "C1::Nested::foo"

gdb_exit
return 0
@


1.1.2.2
log
@2003-05-16  David Carlton  <carlton@@bactrian.org>

	* carlton_runnamespace: Run gdb.c++/rtti.exp, too.
	* carlton_runtest (FASTTESTS): Add gdb.c++/breakpoint.exp and
	gdb.c++/rtti.exp.
	* gdb.c++/breakpoint.exp (test_breakpoint): Run to main for every
	breakpoint.
	* gdb.c++/rtti.exp: Add more KFAIL branches.
@
text
@d56 7
a62 9
    # Restart the program every time, so that a single failure doesn't
    # lead to a cascade.
    if ![runto_main] then {
	perror "couldn't run to main when testing ${name}"
	continue
    } else {
	gdb_breakpoint "${name}"
	gdb_test "continue" "Continuing.\r\n\r\nBreakpoint \[0-9\]*, ${name}.*" "continue to ${name}"
    }
@


1.1.2.3
log
@2003-08-22  Michael Chastain  <mec@@shout.net>

	* gdb.cp: New directory.
	* gdb.cp/*: Copy from gdb.c++/*.
	* gdb.c++/*: Remove.
	* Makefile.in: Change gdb.c++ to gdb.cp.
	* configure.in:  Ditto.
	* carlton_runnamespace: Ditto.
	* carlton_runtest: Ditto.
	* configure: Regnerate.
@
text
@@


