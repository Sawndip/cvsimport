head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2013.07.30.15.36.18;	author aburgess;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.30.15.05.01;	author aburgess;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Don't raise an error for optimized out sub-fields.

  http://sourceware.org/ml/gdb-patches/2013-07/msg00317.html

gdb/ChangeLog

        * value.c (value_fetch_lazy): Mark optimized out values as such
        rather than raising an error.

gdb/testsuite/ChangeLog

        * gdb.dwarf2/pieces-optimized-out.exp: Expect "<optimized out>"
        when printing an optimized out value.  Expect an error when using
        an optimized out value in an expression.
@
text
@# Copyright 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
load_lib dwarf.exp
# Test some DWARF piece operators.

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0  
}
# This test can only be run on x86 targets.
if {![is_x86_like_target]} {
    return 0  
}

standard_testfile .S
set csrcfile ${testfile}.c

if {[prepare_for_testing ${testfile}.exp ${testfile} $srcfile]} {
    return -1
}

if ![runto foo] {
    return -1
}

# Move back up to main.
gdb_test "up" "#1  $hex in main.*" "move up a frame"

# Now take a look at the 's' structure.
gdb_test "p s" \
    " = {a = 5, b = <optimized out>, c = <optimized out>, d = <optimized out>}" \
    "print s"
gdb_test "p s.a" " = 5" "print s.a"
gdb_test "p s.b" " = <optimized out>" "print s.b"
gdb_test "p s.c" " = <optimized out>" "print s.c"
gdb_test "p s.d" " = <optimized out>" "print s.d"
gdb_test "p s.d + 1" "value has been optimized out" "print s.d + 1"

@


1.1
log
@value_fetch_lazy, ensure parent is not lazy and check parent for validity.

  http://sourceware.org/ml/gdb-patches/2013-07/msg00316.html

gdb/ChangeLog

        * value.c (value_fetch_lazy): Ensure parent value is not lazy
        before checking which bits of the parent, not the child, value are
        valid.

gdb/testsuite/ChangeLog

        * gdb.dwarf2/pieces-optimized-out.exp: New file.
        * gdb.dwarf2/pieces-optimized-out.c: New file.
        * gdb.dwarf2/pieces-optimized-out.S: New file.
@
text
@d47 3
a49 2
gdb_test "p s.c" "value has been optimized out" "print s.c"
gdb_test "p s.d" "value has been optimized out" "print s.d"
@

