head	1.4;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.3
	gdb_7_6-2013-04-26-release:1.3
	gdb_7_6-branch:1.3.0.2
	gdb_7_6-2013-03-12-branchpoint:1.3;
locks; strict;
comment	@# @;


1.4
date	2013.05.20.22.11.37;	author devans;	state Exp;
branches;
next	1.3;

1.3
date	2013.02.01.19.33.47;	author tromey;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.01.18.08.52;	author tromey;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.31.17.41.09;	author tromey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* lib/dwarf.exp (Dwarf): New variable _abbrev_section.
	(_handle_DW_TAG): Use it.
	(cu, tu): Replace parameters is_64, version, addr_size with options.
	All callers updated.  Add Fission support.
	* gdb.dwarf2/implptrconst.exp: Update callers of "cu".
	* gdb.dwarf2/method-ptr.exp: Ditto.
	* gdb.dwarf2/nostaticblock.exp: Ditto.
	* gdb.dwarf2/subrange.exp: Ditto.
	* gdb.dwarf2/missing-sig-type.exp: Update callers of "cu", "tu".
@
text
@# Copyright 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0  
}

if { [skip_cplus_tests] } { continue }

standard_testfile .cc method-ptr-dw.S

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    declare_labels int_label float_label struct_label
    declare_labels ptr_label subr_label memptr_label

    cu {} {
	compile_unit {{language @@DW_LANG_C_plus_plus}} {
	    int_label: base_type {
		{name int}
		{encoding @@DW_ATE_signed}
		{byte_size 4 DW_FORM_sdata}
	    }

	    float_label: base_type {
		{name float}
		{encoding @@DW_ATE_float}
		{byte_size 4 DW_FORM_sdata}
	    }

	    struct_label: structure_type {
		{name S}
		{byte_size 1 DW_FORM_sdata}
	    }

	    ptr_label: pointer_type {
		{type :$struct_label}
	    }

	    subr_label: subroutine_type {
		{type :$int_label}
	    } {
		formal_parameter {
		    {type :$ptr_label}
		    {artificial 1 DW_FORM_flag_present}
		}
		formal_parameter {
		    {type :$float_label}
		}
	    }

	    memptr_label: ptr_to_member_type {
		{type :$subr_label}
		{containing_type :$struct_label}
	    }

	    typedef {
		{name the_typedef}
		{type :$memptr_label}
	    }
	}
    }
}

if  {[gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile}1.o \
	  object {nodebug}] != ""} {
    return -1
}

if  {[gdb_compile $asm_file ${binfile}2.o object {nodebug}] != ""} {
    return -1
}

if  {[gdb_compile [list ${binfile}1.o ${binfile}2.o] \
	  "${binfile}" executable {c++}] != ""} {
    return -1
}

clean_restart ${testfile}

gdb_test "ptype the_typedef" \
    "type = int \\(S::\\*\\)\\(S \\* const, float\\)"
@


1.3
log
@	* gdb.dwarf2/method-ptr.exp: Use correct form for non-string
	attributes.
@
text
@d32 1
a32 1
    cu 0 2 8 {
@


1.2
log
@2013-02-01  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	    Tom Tromey  <tromey@@redhat.com>

	* gdb.dwarf2/method-ptr.exp: Link with c++.
	* lib/dwarf.exp (Dwarf::assemble): Declare _cu_count.
@
text
@d37 1
a37 1
		{byte_size 4}
d43 1
a43 1
		{byte_size 4}
d48 1
a48 1
		{byte_size 1}
d60 1
a60 1
		    {artificial 1}
@


1.1
log
@	PR c++/14998:
	* dwarf2read.c (read_tag_ptr_to_member_type): Handle
	TYPE_CODE_FUNC.
gdb/testsuite
	* gdb.dwarf2/method-ptr.cc: New file.
	* gdb.dwarf2/method-ptr.exp: New file.
@
text
@d90 1
a90 1
	  "${binfile}" executable {}] != ""} {
@

