head	1.2;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1
	gdb_7_6-2013-04-26-release:1.1
	gdb_7_6-branch:1.1.0.2
	gdb_7_6-2013-03-12-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.05.20.22.11.37;	author devans;	state Exp;
branches;
next	1.1;

1.1
date	2013.02.18.21.04.28;	author tromey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* lib/dwarf.exp (Dwarf): New variable _abbrev_section.
	(_handle_DW_TAG): Use it.
	(cu, tu): Replace parameters is_64, version, addr_size with options.
	All callers updated.  Add Fission support.
	* gdb.dwarf2/implptrconst.exp: Update callers of "cu".
	* gdb.dwarf2/method-ptr.exp: Ditto.
	* gdb.dwarf2/nostaticblock.exp: Ditto.
	* gdb.dwarf2/subrange.exp: Ditto.
	* gdb.dwarf2/missing-sig-type.exp: Update callers of "cu", "tu".
@
text
@# Copyright 2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
if {![dwarf2_support]} {
    return 0  
}

if { [skip_cplus_tests] } { continue }

standard_testfile method-ptr.cc subrange-dw.S

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {
    cu {} {
 	compile_unit {{language @@DW_LANG_Pascal83}} {
	    declare_labels byte_label typedef_label array_label

	    byte_label: base_type {
		{name byte}
		{encoding @@DW_ATE_unsigned}
		{byte_size 1 DW_FORM_sdata}
	    }

	    typedef_label: typedef {
		{name byte_typedef}
		{type :$byte_label}
	    }

	    array_label: array_type {
		{type :$byte_label}
	    } {
		subrange_type {
		    {lower_bound 0 DW_FORM_sdata}
		    {upper_bound 191 DW_FORM_sdata}
		    {byte_stride 2 DW_FORM_sdata}
		    {type :$typedef_label}
		}
	    }

	    typedef {
		{name TByteArray}
		{type :$array_label}
	    }
	}
    }
}

if  {[gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile}1.o \
	  object {nodebug}] != ""} {
    return -1
}

if  {[gdb_compile $asm_file ${binfile}2.o object {nodebug}] != ""} {
    return -1
}

if  {[gdb_compile [list ${binfile}1.o ${binfile}2.o] \
	  "${binfile}" executable {c++}] != ""} {
    return -1
}

clean_restart ${testfile}

gdb_test_no_output "set language pascal"

gdb_test "ptype TByteArray" \
    "type = array \\\[0\\.\\.191\\\] of byte"
@


1.1
log
@	PR gdb/15102:
	* dwarf2read.c (read_subrange_type): Use result of
	'check_typedef'.
gdb/testsuite
	* gdb.dwarf2/subrange.exp: New file.
@
text
@d29 1
a29 1
    cu 0 2 8 {
@

