head	1.2;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1.2.1
	gdb_7_6-2013-04-26-release:1.1.2.1
	gdb_7_6-branch:1.1.0.2
	gdb_7_6-2013-03-12-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.26.07.15.09;	author mmetzger;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.11.08.59.00;	author mmetzger;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.03.26.07.21.25;	author mmetzger;	state Exp;
branches;
next	;


desc
@@


1.2
log
@record-btrace: fix assertion when enabling recording after re-run

Reading symbols from /bin/true...(no debugging symbols found)...done.
(gdb) b _start
Function "_start" not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (_start) pending.
(gdb) r
Starting program: /bin/true

Breakpoint 1, 0x00000039a0400af0 in _start () from /lib64/ld-linux-x86-64.so.2
(gdb) rec b
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /bin/true

Breakpoint 1, 0x00000039a0400af0 in _start () from /lib64/ld-linux-x86-64.so.2
(gdb) rec b
gdb/record-btrace.c:154: internal-error: record_btrace_open:
 Assertion `record_btrace_thread_observer == NULL' failed.
A problem internal to GDB has been detected,
further debugging may prove unreliable.
Quit this debugging session? (y or n)


gdb/
	* record-btrace.c (record_btrace_close): Call
	record_btrace_auto_disable.

testsuite/
	* gdb.btrace/enable.exp: Add regression test.
@
text
@# This testcase is part of GDB, the GNU debugger.
#
# Copyright 2013 Free Software Foundation, Inc.
#
# Contributed by Intel Corp. <christian.himpel@@intel.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# check for btrace support
if { [skip_btrace_tests] } { return -1 }

# start fresh - without an executable
gdb_exit
gdb_start

# record cannot be stopped, if it was never active
gdb_test "record stop" "No record target is currently active\\..*" "record stop without target"

# btrace cannot be enabled without a running inferior
gdb_test "record btrace" "The program is not being run\\." "record btrace without running program"

# no function and no instruction history without btrace enabled
gdb_test "record function-call-history" "No record target is currently active\\..*" "record function-call-history without target"
gdb_test "record instruction-history" "No record target is currently active\\..*" "record instruction-history without target"
gdb_test "info record" "No record target is currently active\\." "info record without target"

# start inferior
standard_testfile
if [prepare_for_testing $testfile.exp $testfile {} {debug}] {
    return -1
}
if ![runto_main] {
    return -1
}

# enable btrace
gdb_test_no_output "record btrace" "record btrace"
gdb_test "record function-call-history" "No trace\\." "record function-call-history without trace"
gdb_test "record instruction-history" "No trace\\." "record instruction-history without trace"

# btrace cannot be enabled twice
gdb_test "record btrace" "The process is already being recorded\\." "record btrace the second time"

# full record cannot be activated as long as btrace is active
gdb_test "record full" "Process record target already running\\.  Use \"record stop\" to stop record target first\\." "record full cannot be enabled"

# no trace recorded yet
gdb_test "info record" "Active record target: record-btrace\r\nRecorded 0 instructions in 0 functions for thread 1.*\\." "info record without trace"

# stop btrace record
gdb_test "record stop" "Process record is stopped and all execution logs are deleted\\." "record stop"
gdb_test "record stop" "No record target is currently active\\..*" "record stop the second time"

# enable btrace again
gdb_test_no_output "record btrace" "record btrace re-enable"
gdb_test "record btrace" "The process is already being recorded\\." "record btrace re-enable twice"

# continue to the end and make sure we don't die
gdb_test "continue" ".*Inferior.*exited.*" "continue to end"

# skip the rerun test when using gdbserver
# otherwise rerun twice, target should be automatically disabled
load_lib gdbserver-support.exp
if [skip_gdbserver_tests] {
    return 0
}
clean_restart $testfile
if ![runto_main] {
    return -1
}
if ![runto_main] {
    return -1
}

# make sure record-btrace can be enabled after re-run
clean_restart $testfile
if ![runto_main] {
    return -1
}
gdb_test_no_output "record btrace"
if ![runto_main] {
    return -1
}
gdb_test_no_output "record btrace" "enable after re-run"
@


1.1
log
@Add tests for the new record-btrace target.

testsuite/
	* Makefile.in: Add btrace testsuite.
	* configure: Regenerated.
	* configure.ac: Add btrace testsuite.
	* gdb.btrace/Makefile.in: New file.
	* gdb.btrace/enable.c: New file.
	* gdb.btrace/enable.exp: New file.
	* gdb.btrace/function_call_history.c: New file.
	* gdb.btrace/function_call_history.exp: New file.
	* gdb.btrace/instruction_history.c: New file.
	* gdb.btrace/instruction_history.exp: New file.
	* gdb.btrace/instruction_history.S: New file.
	* lib/gdb.exp: Add btrace skip proc.
@
text
@d85 11
@


1.1.2.1
log
@record-btrace: fix assertion when enabling recording after re-run

Reading symbols from /bin/true...(no debugging symbols found)...done.
(gdb) b _start
Function "_start" not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (_start) pending.
(gdb) r
Starting program: /bin/true

Breakpoint 1, 0x00000039a0400af0 in _start () from /lib64/ld-linux-x86-64.so.2
(gdb) rec b
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /bin/true

Breakpoint 1, 0x00000039a0400af0 in _start () from /lib64/ld-linux-x86-64.so.2
(gdb) rec b
gdb/record-btrace.c:154: internal-error: record_btrace_open:
 Assertion `record_btrace_thread_observer == NULL' failed.
A problem internal to GDB has been detected,
further debugging may prove unreliable.
Quit this debugging session? (y or n)


gdb/
	* record-btrace.c (record_btrace_close): Call
	record_btrace_auto_disable.

testsuite/
	* gdb.btrace/enable.exp: Add regression test.
@
text
@a84 11

# make sure record-btrace can be enabled after re-run
clean_restart $testfile
if ![runto_main] {
    return -1
}
gdb_test_no_output "record btrace"
if ![runto_main] {
    return -1
}
gdb_test_no_output "record btrace" "enable after re-run"
@


