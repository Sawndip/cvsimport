head	1.8;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.8
	gdb_7_6-2013-04-26-release:1.8
	gdb_7_6-branch:1.8.0.2
	gdb_7_6-2013-03-12-branchpoint:1.8
	gdb_7_5_1-2012-11-29-release:1.6
	gdb_7_5-2012-08-17-release:1.6
	gdb_7_5-branch:1.6.0.2
	gdb_7_5-2012-07-18-branchpoint:1.6
	gdb_7_4_1-2012-04-26-release:1.4.4.1
	gdb_7_4-2012-01-24-release:1.4.4.1
	gdb_7_4-branch:1.4.0.4
	gdb_7_4-2011-12-13-branchpoint:1.4
	gdb_7_3_1-2011-09-04-release:1.4
	gdb_7_3-2011-07-26-release:1.4
	gdb_7_3-branch:1.4.0.2
	gdb_7_3-2011-04-01-branchpoint:1.4;
locks; strict;
comment	@# @;


1.8
date	2013.01.01.06.41.25;	author brobecke;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.29.18.56.23;	author uweigand;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.16.16.21.51;	author palves;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.04.08.17.55;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.31.19.05.23;	author uweigand;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2011.01.25.16.10.28;	author kwerner;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.01.15.33.48;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.05.14.31.30;	author kwerner;	state Exp;
branches;
next	;

1.4.4.1
date	2012.01.06.04.44.10;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2010-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
#
# Contributed by Ken Werner <ken.werner@@de.ibm.com>.
#
# Tests GDBs support for OpenCL operators.

load_lib opencl.exp

if { [skip_opencl_tests] } {
    return 0
}

set testfile "operators"
set clprogram [remote_download target ${srcdir}/${subdir}/${testfile}.cl]

# Compile the generic OpenCL host app
if { [gdb_compile_opencl_hostapp "${clprogram}" "${testfile}" "" ] != "" } {
    untested ${testfile}.exp
    return -1
}

# Load the OpenCL app
clean_restart ${testfile}

# Set breakpoint at the OpenCL kernel
gdb_test "tbreak testkernel" \
    "" \
    "Set pending breakpoint" \
    ".*Function \"testkernel\" not defined.*Make breakpoint pending.*y or \\\[n\\\]. $" \
    "y"

gdb_run_cmd
gdb_test "" ".*reakpoint.*1.*testkernel.*" "run"

# Continue to the marker
gdb_breakpoint [gdb_get_line_number "marker" "${clprogram}"]
gdb_continue_to_breakpoint "marker"

# Retrieve some information about availability of OpenCL extensions
set have_cl_khr_fp64 [get_integer_valueof "have_cl_khr_fp64" 0]
set have_cl_khr_fp16 [get_integer_valueof "have_cl_khr_fp16" 0]

proc check_basic { name type isfloat } {
  gdb_test "print/d ${name}a" " = 2"
  gdb_test "print/d ${name}b" " = 1"
  gdb_test "print/d ${name}4a" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d ${name}4b" " = \\{1, 2, 8, 4\\}"

  gdb_test "ptype ${name}a" "type = ${type}"
  gdb_test "ptype ${name}b" "type = ${type}"
  gdb_test "ptype ${name}4a" "type = ${type}4"
  gdb_test "ptype ${name}4b" "type = ${type}4"

  if { ! ${isfloat} } {
    gdb_test "print/d u${name}a" " = 2"
    gdb_test "print/d u${name}b" " = 1"
    gdb_test "print/d u${name}4a" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4b" " = \\{1, 2, 8, 4\\}"
    gdb_test "ptype u${name}a" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}4a" "type = u${type}4"
    gdb_test "ptype u${name}4b" "type = u${type}4"
  }
}

# Arithmetic operators
proc check_arithmetic_ops { name type isfloat size } {
  # scalar with scalar
  gdb_test "print/d ${name}a + ${name}b" " = 3"
  gdb_test "print/d ${name}a - ${name}b" " = 1"
  gdb_test "print/d ${name}a * ${name}b" " = 2"
  gdb_test "print/d ${name}a / ${name}b" " = 2"
  # scalar with vector
  gdb_test "print/d ${name}a + ${name}4b" " = \\{3, 4, 10, 6\\}"
  gdb_test "print/d ${name}4a - ${name}b" " = \\{1, 3, 7, 15\\}"
  gdb_test "print/d ${name}4a * ${name}b" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d ${name}a / ${name}4b" " = \\{2, 1, 0, 0\\}"
  # vector with vector
  gdb_test "print/d ${name}4a + ${name}4b" " = \\{3, 6, 16, 20\\}"
  gdb_test "print/d ${name}4a - ${name}4b" " = \\{1, 2, 0, 12\\}"
  gdb_test "print/d ${name}4a * ${name}4b" " = \\{2, 8, 64, 64\\}"
  gdb_test "print/d ${name}4a / ${name}4b" " = \\{2, 2, 1, 4\\}"

  # scalar
  gdb_test "print/d ${name}a++" " = 2"
  gdb_test "print/d ++${name}a" " = 4"
  gdb_test "print/d ${name}a--" " = 4"
  gdb_test "print/d --${name}a" " = 2"
  gdb_test "print/d +${name}a" " = 2"
  gdb_test "print/d -${name}a" " = -2"
  # vector
  gdb_test "print/d ${name}4a++" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d ++${name}4a" " = \\{4, 6, 10, 18\\}"
  gdb_test "print/d ${name}4a--" " = \\{4, 6, 10, 18\\}"
  gdb_test "print/d --${name}4a" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d +${name}4a" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d -${name}4a" " = \\{-2, -4, -8, -16\\}"

  # scalar with vector
  gdb_test "ptype ${name}a + ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a - ${name}b" "type = ${type}4"
  gdb_test "ptype ${name}a * ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a / ${name}b" "type = ${type}4"
  # vector with vector
  gdb_test "ptype ${name}4a + ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a - ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a * ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a / ${name}4b" "type = ${type}4"

  # scalar
  gdb_test "ptype ${name}a++" "type = ${type}"
  gdb_test "ptype ++${name}a" "type = ${type}"
  gdb_test "ptype ${name}a--" "type = ${type}"
  gdb_test "ptype --${name}a" "type = ${type}"
  # vector
  gdb_test "ptype ${name}4a++" "type = ${type}4"
  gdb_test "ptype ++${name}4a" "type = ${type}4"
  gdb_test "ptype ${name}4a--" "type = ${type}4"
  gdb_test "ptype --${name}4a" "type = ${type}4"
  gdb_test "ptype +${name}4a" "type = ${type}4"
  gdb_test "ptype -${name}4a" "type = ${type}4"

  if { ${isfloat} } {
    # scalar with scalar
    gdb_test "ptype ${name}a + ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a - ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a * ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a / ${name}b" "type = ${type}"
    # scalar
    gdb_test "ptype +${name}a" "type = ${type}"
    gdb_test "ptype -${name}a" "type = ${type}"
  } else {
    # scalar with scalar
    gdb_test "print/d ${name}a % ${name}b" " = 0"
    # scalar with vector
    gdb_test "print/d ${name}4a % ${name}b" " = \\{0, 0, 0, 0\\}"
    # vector with vector
    gdb_test "print/d ${name}4a % ${name}b" " = \\{0, 0, 0, 0\\}"

    # scalar with scalar
    gdb_test "print/d u${name}a + u${name}b" " = 3"
    gdb_test "print/d u${name}a - u${name}b" " = 1"
    gdb_test "print/d u${name}a * u${name}b" " = 2"
    gdb_test "print/d u${name}a / u${name}b" " = 2"
    gdb_test "print/d u${name}a % u${name}b" " = 0"
    # scalar with vector
    gdb_test "print/d u${name}a + u${name}4b" " = \\{3, 4, 10, 6\\}"
    gdb_test "print/d u${name}4a - u${name}b" " = \\{1, 3, 7, 15\\}"
    gdb_test "print/d u${name}4a * u${name}b" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}a / u${name}4b" " = \\{2, 1, 0, 0\\}"
    gdb_test "print/d u${name}4a % u${name}b" " = \\{0, 0, 0, 0\\}"
    # vector with vector
    gdb_test "print/d u${name}4a + u${name}4b" " = \\{3, 6, 16, 20\\}"
    gdb_test "print/d u${name}4a - u${name}4b" " = \\{1, 2, 0, 12\\}"
    gdb_test "print/d u${name}4a * u${name}4b" " = \\{2, 8, 64, 64\\}"
    gdb_test "print/d u${name}4a / u${name}4b" " = \\{2, 2, 1, 4\\}"
    gdb_test "print/d u${name}4a % u${name}4b" " = \\{0, 0, 0, 0\\}"

    # scalar
    gdb_test "print/d u${name}a++" " = 2"
    gdb_test "print/d ++u${name}a" " = 4"
    gdb_test "print/d u${name}a--" " = 4"
    gdb_test "print/d --u${name}a" " = 2"
    gdb_test "print/d +u${name}a" " = 2"
    gdb_test "print/x -u${name}a" " = 0x.*fe"
    # vector
    gdb_test "print/d u${name}4a++" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d ++u${name}4a" " = \\{4, 6, 10, 18\\}"
    gdb_test "print/d u${name}4a--" " = \\{4, 6, 10, 18\\}"
    gdb_test "print/d --u${name}4a" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d +u${name}4a" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/x -u${name}4a" " = \\{0x.*fe, 0x.*fc, 0x.*f8, 0x.*f0\\}"

    # scalar with scalar
    if { ${size} < 4 } {
      gdb_test "ptype ${name}a + ${name}b" "type = int"
      gdb_test "ptype ${name}a - ${name}b" "type = int"
      gdb_test "ptype ${name}a * ${name}b" "type = int"
      gdb_test "ptype ${name}a / ${name}b" "type = int"
      gdb_test "ptype ${name}a % ${name}b" "type = int"
      gdb_test "ptype +${name}a" "type = int"
      gdb_test "ptype -${name}a" "type = int"
      gdb_test "ptype u${name}a + u${name}b" "type = int"
      gdb_test "ptype u${name}a - u${name}b" "type = int"
      gdb_test "ptype u${name}a * u${name}b" "type = int"
      gdb_test "ptype u${name}a / u${name}b" "type = int"
      gdb_test "ptype u${name}a % u${name}b" "type = int"
      gdb_test "ptype +u${name}a" "type = int"
      gdb_test "ptype -u${name}a" "type = int"
    } elseif { ${size} == 4 } {
      gdb_test "ptype ${name}a + ${name}b" "type = int"
      gdb_test "ptype ${name}a - ${name}b" "type = int"
      gdb_test "ptype ${name}a * ${name}b" "type = int"
      gdb_test "ptype ${name}a / ${name}b" "type = int"
      gdb_test "ptype ${name}a % ${name}b" "type = int"
      gdb_test "ptype +${name}a" "type = int"
      gdb_test "ptype -${name}a" "type = int"
      gdb_test "ptype u${name}a + u${name}b" "type = (unsigned int|uint)"
      gdb_test "ptype u${name}a - u${name}b" "type = (unsigned int|uint)"
      gdb_test "ptype u${name}a * u${name}b" "type = (unsigned int|uint)"
      gdb_test "ptype u${name}a / u${name}b" "type = (unsigned int|uint)"
      gdb_test "ptype u${name}a % u${name}b" "type = (unsigned int|uint)"
      gdb_test "ptype +u${name}a" "type = (unsigned int|uint)"
      gdb_test "ptype -u${name}a" "type = (unsigned int|uint)"
    } else { # ${size} == 8
      gdb_test "ptype ${name}a + ${name}b" "type = long"
      gdb_test "ptype ${name}a - ${name}b" "type = long"
      gdb_test "ptype ${name}a * ${name}b" "type = long"
      gdb_test "ptype ${name}a / ${name}b" "type = long"
      gdb_test "ptype ${name}a % ${name}b" "type = long"
      gdb_test "ptype +${name}a" "type = long"
      gdb_test "ptype -${name}a" "type = long"
      gdb_test "ptype u${name}a + u${name}b" "type = (unsigned long|ulong)"
      gdb_test "ptype u${name}a - u${name}b" "type = (unsigned long|ulong)"
      gdb_test "ptype u${name}a * u${name}b" "type = (unsigned long|ulong)"
      gdb_test "ptype u${name}a / u${name}b" "type = (unsigned long|ulong)"
      gdb_test "ptype u${name}a % u${name}b" "type = (unsigned long|ulong)"
      # scalar
      gdb_test "ptype +u${name}a" "type = (unsigned long|ulong)"
      gdb_test "ptype -u${name}a" "type = (unsigned long|ulong)"
    }
    gdb_test "ptype u${name}a++" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype ++u${name}a" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a--" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype --u${name}a" "type = (unsigned ${type}|u${type})"
    # scalar with vector
    gdb_test "ptype ${name}a % ${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}a + u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a - u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}a * u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a / u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}a % u${name}4b" "type = u${type}4"
    # vector with vector
    gdb_test "ptype ${name}4a % ${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}4a + u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a - u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a * u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a / u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a % u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a++" "type = u${type}4"
    gdb_test "ptype ++u${name}4a" "type = u${type}4"
    gdb_test "ptype u${name}4a--" "type = u${type}4"
    gdb_test "ptype --u${name}4a" "type = u${type}4"
    gdb_test "ptype +u${name}4a" "type = u${type}4"
    gdb_test "ptype -u${name}4a" "type = u${type}4"
  }
}

# Relational operators
proc check_relational_ops { name type isfloat size } {
  # scalar with scalar
  gdb_test "print/d ${name}a > ${name}b" " = 1"
  gdb_test "print/d ${name}b < ${name}a" " = 1"
  gdb_test "print/d ${name}b >= ${name}a" " = 0"
  gdb_test "print/d ${name}a <= ${name}b" " = 0"
  # scalar with vector
  gdb_test "print/d ${name}4a > ${name}b" " = \\{-1, -1, -1, -1\\}"
  gdb_test "print/d ${name}a < ${name}4b" " = \\{0, 0, -1, -1\\}"
  gdb_test "print/d ${name}4a >= ${name}b" " = \\{-1, -1, -1, -1\\}"
  gdb_test "print/d ${name}a <= ${name}4b" " = \\{0, -1, -1, -1\\}"
  # vector with vector
  gdb_test "print/d ${name}4a > ${name}4b" " = \\{-1, -1, 0, -1\\}"
  gdb_test "print/d ${name}4b < ${name}4a" " = \\{-1, -1, 0, -1\\}"
  gdb_test "print/d ${name}4b >= ${name}4a" " = \\{0, 0, -1, 0\\}"
  gdb_test "print/d ${name}4a <= ${name}4b" " = \\{0, 0, -1, 0\\}"

  # result type should be int for scalars
  gdb_test "ptype ${name}a < ${name}b" "type = int"
  gdb_test "ptype ${name}a > ${name}b" "type = int"
  gdb_test "ptype ${name}a <= ${name}b" "type = int"
  gdb_test "ptype ${name}a >= ${name}b" "type = int"

  if { ${isfloat} } {
    if { ${size} == 2 } {
      # result type should be short for half precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a > ${name}b" "type = short4"
      gdb_test "ptype ${name}a < ${name}4b" "type = short4"
      gdb_test "ptype ${name}4a >= ${name}b" "type = short4"
      gdb_test "ptype ${name}a <= ${name}4b" "type = short4"
      # vector with vector
      gdb_test "ptype ${name}4a > ${name}4b" "type = short4"
      gdb_test "ptype ${name}4a < ${name}4b" "type = short4"
      gdb_test "ptype ${name}4a >= ${name}4b" "type = short4"
      gdb_test "ptype ${name}4a <= ${name}4b" "type = short4"
    } elseif { ${size} == 4 } {
      # result type should be int for single precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a > ${name}b" "type = int4"
      gdb_test "ptype ${name}a < ${name}4b" "type = int4"
      gdb_test "ptype ${name}4a >= ${name}b" "type = int4"
      gdb_test "ptype ${name}a <= ${name}4b" "type = int4"
      # vector with vector
      gdb_test "ptype ${name}4a > ${name}4b" "type = int4"
      gdb_test "ptype ${name}4a < ${name}4b" "type = int4"
      gdb_test "ptype ${name}4a >= ${name}4b" "type = int4"
      gdb_test "ptype ${name}4a <= ${name}4b" "type = int4"
    } else { # ${size} == 8
      # result type should be long for double precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a > ${name}b" "type = long4"
      gdb_test "ptype ${name}a < ${name}4b" "type = long4"
      gdb_test "ptype ${name}4a >= ${name}b" "type = long4"
      gdb_test "ptype ${name}a <= ${name}4b" "type = long4"
      # vector with vector
      gdb_test "ptype ${name}4a > ${name}4b" "type = long4"
      gdb_test "ptype ${name}4a < ${name}4b" "type = long4"
      gdb_test "ptype ${name}4a >= ${name}4b" "type = long4"
      gdb_test "ptype ${name}4a <= ${name}4b" "type = long4"
    }
  } else {
    # scalar with scalar
    gdb_test "print/d u${name}a > u${name}b" " = 1"
    gdb_test "print/d u${name}b < u${name}a" " = 1"
    gdb_test "print/d u${name}b >= u${name}a" " = 0"
    gdb_test "print/d u${name}a <= u${name}b" " = 0"
    # scalar with vector
    gdb_test "print/d u${name}4a > u${name}b" " = \\{-1, -1, -1, -1\\}"
    gdb_test "print/d u${name}a < u${name}4b" " = \\{0, 0, -1, -1\\}"
    gdb_test "print/d u${name}4a >= u${name}b" " = \\{-1, -1, -1, -1\\}"
    gdb_test "print/d u${name}a <= u${name}4b" " = \\{0, -1, -1, -1\\}"
    # vector with vector
    gdb_test "print/d u${name}4a > u${name}4b" " = \\{-1, -1, 0, -1\\}"
    gdb_test "print/d u${name}4b < u${name}4a" " = \\{-1, -1, 0, -1\\}"
    gdb_test "print/d u${name}4b >= u${name}4a" " = \\{0, 0, -1, 0\\}"
    gdb_test "print/d u${name}4a <= u${name}4b" " = \\{0, 0, -1, 0\\}"

    # result type for unsigned operands is signed
    # scalar with scalar
    gdb_test "ptype u${name}a < u${name}b" "type = int"
    gdb_test "ptype u${name}a > u${name}b" "type = int"
    gdb_test "ptype u${name}a <= u${name}b" "type = int"
    gdb_test "ptype u${name}a >= u${name}b" "type = int"
    # scalar with vector
    gdb_test "ptype u${name}4a > u${name}b" "type = ${type}4"
    gdb_test "ptype u${name}a < u${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}4a >= u${name}b" "type = ${type}4"
    gdb_test "ptype u${name}a <= u${name}4b" "type = ${type}4"
    # vector with vector
    gdb_test "ptype u${name}4a > u${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}4a < u${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}4a >= u${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}4a <= u${name}4b" "type = ${type}4"
  }
}

# Equality operators
proc check_equality_ops { name type isfloat size } {
  # scalar with scalar
  gdb_test "print/d ${name}a == ${name}b" " = 0"
  gdb_test "print/d ${name}a != ${name}b" " = 1"
  # scalar with vector
  gdb_test "print/d ${name}4a == ${name}b" " = \\{0, 0, 0, 0\\}"
  gdb_test "print/d ${name}a != ${name}4b" " = \\{-1, 0, -1, -1\\}"
  # vector with vector
  gdb_test "print/d ${name}4a == ${name}4b" " = \\{0, 0, -1, 0\\}"
  gdb_test "print/d ${name}4a != ${name}4b" " = \\{-1, -1, 0, -1\\}"

  # scalar with scalar
  gdb_test "ptype ${name}a == ${name}b" "type = int"
  gdb_test "ptype ${name}a != ${name}b" "type = int"

  if { ${isfloat} } {
    if { ${size} == 2 } {
      # result type should be short for half precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a == ${name}b" "type = short4"
      gdb_test "ptype ${name}a != ${name}4b" "type = short4"
      # vector with vector
      gdb_test "ptype ${name}4a == ${name}4b" "type = short4"
      gdb_test "ptype ${name}4a != ${name}4b" "type = short4"
    } elseif { ${size} == 4 } {
      # result type should be int for single precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a == ${name}b" "type = int4"
      gdb_test "ptype ${name}a != ${name}4b" "type = int4"
      # vector with vector
      gdb_test "ptype ${name}4a == ${name}4b" "type = int4"
      gdb_test "ptype ${name}4a != ${name}4b" "type = int4"
    } else { # ${size} == 8
      # result type should be long for double precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a == ${name}b" "type = long4"
      gdb_test "ptype ${name}a != ${name}4b" "type = long4"
      # vector with vector
      gdb_test "ptype ${name}4a == ${name}4b" "type = long4"
      gdb_test "ptype ${name}4a != ${name}4b" "type = long4"
    }
  } else {
    # scalar with scalar
    gdb_test "print/d u${name}a == u${name}b" " = 0"
    gdb_test "print/d u${name}a != u${name}b" " = 1"
    # scalar with vector
    gdb_test "print/d u${name}4a == u${name}b" " = \\{0, 0, 0, 0\\}"
    gdb_test "print/d u${name}a != u${name}4b" " = \\{-1, 0, -1, -1\\}"
    # vector with vector
    gdb_test "print/d u${name}4a == u${name}4b" " = \\{0, 0, -1, 0\\}"
    gdb_test "print/d u${name}4b != u${name}4a" " = \\{-1, -1, 0, -1\\}"

    # result type for unsigned operands is signed
    # scalar with scalar
    gdb_test "ptype u${name}a == u${name}b" "type = int"
    gdb_test "ptype u${name}a != u${name}b" "type = int"
    # scalar with vector
    gdb_test "ptype u${name}4a == u${name}b" "type = ${type}4"
    gdb_test "ptype u${name}a != u${name}4b" "type = ${type}4"
    # vector with vector
    gdb_test "ptype u${name}4a == u${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}4a != u${name}4b" "type = ${type}4"
  }
}

# Shift operators
proc check_shift_ops { name type size } {
  # scalar with scalar
  gdb_test "print/d ${name}a << ${name}b" " = 4"
  gdb_test "print/d ${name}a >> ${name}b" " = 1"
  gdb_test "print/d u${name}a << u${name}b" " = 4"
  gdb_test "print/d u${name}a >> u${name}b" " = 1"
  # scalar with vector
  gdb_test "print/d ${name}4a << ${name}b" " = \\{4, 8, 16, 32\\}"
  gdb_test "print/d ${name}4a >> ${name}b" " = \\{1, 2, 4, 8\\}"
  gdb_test "print/d u${name}4a << u${name}b" " = \\{4, 8, 16, 32\\}"
  gdb_test "print/d u${name}4a >> u${name}b" " = \\{1, 2, 4, 8\\}"
  # vector with vector
  if { ${size} == 1 } {
    gdb_test "print/d ${name}4a << ${name}4b" " = \\{4, 16, 0, 0\\}"
    gdb_test "print/d u${name}4a << u${name}4b" " = \\{4, 16, 0, 0\\}"
  } else {
    gdb_test "print/d ${name}4a << ${name}4b" " = \\{4, 16, 2048, 256\\}"
    gdb_test "print/d u${name}4a << u${name}4b" " = \\{4, 16, 2048, 256\\}"
  }
  gdb_test "print/d ${name}4a >> ${name}4b" " = \\{1, 1, 0, 1\\}"
  gdb_test "print/d u${name}4a >> u${name}4b" " = \\{1, 1, 0, 1\\}"

  # scalar with scalar
  if { ${size} < 4 } {
    gdb_test "ptype ${name}a << ${name}b" "type = int"
    gdb_test "ptype ${name}a >> ${name}b" "type = int"
    gdb_test "ptype u${name}a << u${name}b" "type = int"
    gdb_test "ptype u${name}a >> u${name}b" "type = int"
  } elseif { ${size} == 4 } {
    gdb_test "ptype ${name}a << ${name}b" "type = int"
    gdb_test "ptype ${name}a >> ${name}b" "type = int"
    gdb_test "ptype u${name}a << u${name}b" "type = (unsigned int|uint)"
    gdb_test "ptype u${name}a >> u${name}b" "type = (unsigned int|uint)"
  } else { # ${size} == 8
    gdb_test "ptype ${name}a << ${name}b" "type = long"
    gdb_test "ptype ${name}a >> ${name}b" "type = long"
    gdb_test "ptype u${name}a << u${name}b" "type = (unsigned long|ulong)"
    gdb_test "ptype u${name}a >> u${name}b" "type = (unsigned long|ulong)"
  }
  # scalar with vector
  gdb_test "ptype ${name}4a << ${name}b" "type = ${type}4"
  gdb_test "ptype ${name}4a >> ${name}b" "type = ${type}4"
  gdb_test "ptype u${name}4a << u${name}b" "type = u${type}4"
  gdb_test "ptype u${name}4a >> u${name}b" "type = u${type}4"
  # vector with vector
  gdb_test "ptype ${name}4a << ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a >> ${name}4b" "type = ${type}4"
  gdb_test "ptype u${name}4a << u${name}4b" "type = u${type}4"
  gdb_test "ptype u${name}4a >> u${name}4b" "type = u${type}4"
}

# Bitwise operators
proc check_bitwise_ops { name type size } {
  # scalar with scalar
  gdb_test "print/d ${name}a & ${name}b" " = 0"
  gdb_test "print/d ${name}a | ${name}b" " = 3"
  gdb_test "print/d ${name}a ^ ${name}b" " = 3"
  gdb_test "print/d u${name}a & u${name}b" " = 0"
  gdb_test "print/d u${name}a | u${name}b" " = 3"
  gdb_test "print/d u${name}a ^ u${name}b" " = 3"
  # scalar with vector
  gdb_test "print/d ${name}4a & ${name}b" " = \\{0, 0, 0, 0\\}"
  gdb_test "print/d ${name}a | ${name}4b" " = \\{3, 2, 10, 6\\}"
  gdb_test "print/d ${name}4a ^ ${name}b" " = \\{3, 5, 9, 17\\}"
  gdb_test "print/d u${name}4a & u${name}b" " = \\{0, 0, 0, 0\\}"
  gdb_test "print/d u${name}a | u${name}4b" " = \\{3, 2, 10, 6\\}"
  gdb_test "print/d u${name}4a ^ u${name}b" " = \\{3, 5, 9, 17\\}"
  # vector with vector
  gdb_test "print/d ${name}4a & ${name}4b" " = \\{0, 0, 8, 0\\}"
  gdb_test "print/d ${name}4a | ${name}4b" " = \\{3, 6, 8, 20\\}"
  gdb_test "print/d ${name}4a ^ ${name}4b" " = \\{3, 6, 0, 20\\}"
  gdb_test "print/d u${name}4a & u${name}4b" " = \\{0, 0, 8, 0\\}"
  gdb_test "print/d u${name}4a | u${name}4b" " = \\{3, 6, 8, 20\\}"
  gdb_test "print/d u${name}4a ^ u${name}4b" " = \\{3, 6, 0, 20\\}"

  # scalar with scalar
  if { ${size} < 4 } {
    gdb_test "ptype ${name}a & ${name}b" "type = int"
    gdb_test "ptype ${name}a | ${name}b" "type = int"
    gdb_test "ptype ${name}a ^ ${name}b" "type = int"
    gdb_test "ptype u${name}a & u${name}b" "type = int"
    gdb_test "ptype u${name}a | u${name}b" "type = int"
    gdb_test "ptype u${name}a ^ u${name}b" "type = int"
  } elseif { ${size} == 4 } {
    gdb_test "ptype ${name}a & ${name}b" "type = int"
    gdb_test "ptype ${name}a | ${name}b" "type = int"
    gdb_test "ptype ${name}a ^ ${name}b" "type = int"
    gdb_test "ptype u${name}a & u${name}b" "type = (unsigned int|uint)"
    gdb_test "ptype u${name}a | u${name}b" "type = (unsigned int|uint)"
    gdb_test "ptype u${name}a ^ u${name}b" "type = (unsigned int|uint)"
  } else { # ${size} == 8
    gdb_test "ptype ${name}a & ${name}b" "type = long"
    gdb_test "ptype ${name}a | ${name}b" "type = long"
    gdb_test "ptype ${name}a ^ ${name}b" "type = long"
    gdb_test "ptype u${name}a & u${name}b" "type = (unsigned long|ulong)"
    gdb_test "ptype u${name}a | u${name}b" "type = (unsigned long|ulong)"
    gdb_test "ptype u${name}a ^ u${name}b" "type = (unsigned long|ulong)"
  }
  # scalar with vector
  gdb_test "ptype ${name}4a & ${name}b" "type = ${type}4"
  gdb_test "ptype ${name}a | ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a ^ ${name}b" "type = ${type}4"
  gdb_test "ptype u${name}4a & u${name}b" "type = u${type}4"
  gdb_test "ptype u${name}a | u${name}4b" "type = u${type}4"
  gdb_test "ptype u${name}4a ^ u${name}b" "type = u${type}4"
  # vector with vector
  gdb_test "ptype ${name}4a & ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a | ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a ^ ${name}4b" "type = ${type}4"
  gdb_test "ptype u${name}4a & u${name}4b" "type = u${type}4"
  gdb_test "ptype u${name}4a | u${name}4b" "type = u${type}4"
  gdb_test "ptype u${name}4a ^ u${name}4b" "type = u${type}4"

  # scalar
  if { ${size} < 8 } {
    gdb_test "print/x ~${name}a" " = 0xfffffffd"
    gdb_test "print/x ~u${name}a" " = 0xfffffffd"
  } else {
    gdb_test "print/x ~${name}a" " = 0xfffffffffffffffd"
    gdb_test "print/x ~u${name}a" " = 0xfffffffffffffffd"
  }
  # vector
  if { ${size} == 1 } {
    gdb_test "print/x ~${name}4a" " = \\{0xfd, 0xfb, 0xf7, 0xef\\}"
    gdb_test "print/x ~u${name}4a" " = \\{0xfd, 0xfb, 0xf7, 0xef\\}"
  } elseif { ${size} == 2 } {
    gdb_test "print/x ~${name}4a" " = \\{0xfffd, 0xfffb, 0xfff7, 0xffef\\}"
    gdb_test "print/x ~u${name}4a" " = \\{0xfffd, 0xfffb, 0xfff7, 0xffef\\}"
  } elseif { ${size} == 4 } {
    gdb_test "print/x ~${name}4a" " = \\{0xfffffffd, 0xfffffffb, 0xfffffff7, 0xffffffef\\}"
    gdb_test "print/x ~u${name}4a" " = \\{0xfffffffd, 0xfffffffb, 0xfffffff7, 0xffffffef\\}"
  } else { # ${size} == 8
    gdb_test "print/x ~${name}4a" " = \\{0xfffffffffffffffd, 0xfffffffffffffffb, 0xfffffffffffffff7, 0xffffffffffffffef\\}"
    gdb_test "print/x ~u${name}4a" " = \\{0xfffffffffffffffd, 0xfffffffffffffffb, 0xfffffffffffffff7, 0xffffffffffffffef\\}"
  }
  # scalar
  if { ${size} < 4 } {
    gdb_test "ptype ~${name}a" "type = int"
    gdb_test "ptype ~u${name}a" "type = int"
  } elseif { ${size} == 4 } {
    gdb_test "ptype ~${name}a" "type = int"
    gdb_test "ptype ~u${name}a" "type = (unsigned int|uint)"
  } else { # ${size} == 8
    gdb_test "ptype ~${name}a" "type = long"
    gdb_test "ptype ~u${name}a" "type = (unsigned long|ulong)"
  }
  # vector
  gdb_test "ptype ~${name}4a" "type = ${type}4"
  gdb_test "ptype ~u${name}4a" "type = u${type}4"
}

# Logical operators
proc check_logical_ops { name type isfloat size } {
  # scalar
  gdb_test "print/d !${name}a " " = 0"
  gdb_test "print/d !!${name}a " " = 1"
  # vector
  gdb_test "print/d !${name}4a " " = \\{0, 0, 0, 0\\}"
  gdb_test "print/d !!${name}4a " " = \\{-1, -1, -1, -1\\}"

  # scalar with scalar
  gdb_test "print/d ${name}a && ${name}b" " = 1"
  gdb_test "print/d ${name}a && !${name}b" " = 0"
  gdb_test "print/d ${name}a || ${name}b" " = 1"
  gdb_test "print/d ${name}a || !${name}b" " = 1"
  gdb_test "print/d !${name}a || !${name}b" " = 0"

  # scalar with vector
  gdb_test "print/d ${name}4a && ${name}b" " = \\{-1, -1, -1, -1\\}"
  gdb_test "print/d ${name}4a && !${name}b" " = \\{0, 0, 0, 0\\}"
  gdb_test "print/d ${name}a || ${name}4b" " = \\{-1, -1, -1, -1\\}"
  gdb_test "print/d ${name}a || !${name}4b" " = \\{-1, -1, -1, -1\\}"
  gdb_test "print/d !${name}4a || !${name}b" " = \\{0, 0, 0, 0\\}"
  # vector with vector
  gdb_test "print/d ${name}4a && ${name}4b" " = \\{-1, -1, -1, -1\\}"
  gdb_test "print/d ${name}4a || ${name}4b" " = \\{-1, -1, -1, -1\\}"

  # result type should be int for scalars
  gdb_test "ptype !${name}a" "type = int"
  gdb_test "ptype ${name}a && ${name}b" "type = int"
  gdb_test "ptype ${name}a || ${name}b" "type = int"

  if { ${isfloat} } {
    if { ${size} == 2 } {
      # result type should be short for half precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a && ${name}b" "type = short4"
      gdb_test "ptype ${name}a || ${name}4b" "type = short4"
      # vector with vector
      gdb_test "ptype !${name}4a" "type = short4"
      gdb_test "ptype ${name}4a && ${name}4b" "type = short4"
      gdb_test "ptype ${name}4a || ${name}4b" "type = short4"
    } elseif { ${size} == 4 } {
      # result type should be int for single precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a && ${name}b" "type = int4"
      gdb_test "ptype ${name}a || ${name}4b" "type = int4"
      # vector with vector
      gdb_test "ptype !${name}4a" "type = int4"
      gdb_test "ptype ${name}4a && ${name}4b" "type = int4"
      gdb_test "ptype ${name}4a || ${name}4b" "type = int4"
    } else { # ${size} == 8
      # result type should be long for double precision floating point vectors
      # scalar with vector
      gdb_test "ptype ${name}4a && ${name}b" "type = long4"
      gdb_test "ptype ${name}a || ${name}4b" "type = long4"
      # vector with vector
      gdb_test "ptype !${name}4a" "type = long4"
      gdb_test "ptype ${name}4a && ${name}4b" "type = long4"
      gdb_test "ptype ${name}4a || ${name}4b" "type = long4"
    }
  } else {
    # unsigned scalar
    gdb_test "print/d !u${name}a " " = 0"
    gdb_test "print/d !!u${name}a " " = 1"
    # unsigned vector
    gdb_test "print/d !u${name}4a " " = \\{0, 0, 0, 0\\}"
    gdb_test "print/d !!u${name}4a " " = \\{-1, -1, -1, -1\\}"

    # scalar with scalar
    gdb_test "print/d u${name}a && u${name}b" " = 1"
    gdb_test "print/d u${name}a || u${name}b" " = 1"
    # scalar with vector
    gdb_test "print/d u${name}4a && u${name}b" " = \\{-1, -1, -1, -1\\}"
    gdb_test "print/d u${name}a || u${name}4b" " = \\{-1, -1, -1, -1\\}"
    # vector with vector
    gdb_test "print/d u${name}4a && u${name}4b" " = \\{-1, -1, -1, -1\\}"
    gdb_test "print/d u${name}4a || u${name}4b" " = \\{-1, -1, -1, -1\\}"

    # scalar
    gdb_test "ptype !u${name}a" "type = int"
    # vector
    gdb_test "ptype !${name}4a" "type = ${type}4"
    gdb_test "ptype !u${name}4a" "type = ${type}4"

    # scalar with vector
    gdb_test "ptype ${name}4a && ${name}b" "type = ${type}4"
    gdb_test "ptype ${name}a || ${name}4b" "type = ${type}4"
    # result type for unsigned vector operand is signed
    gdb_test "ptype u${name}4a && u${name}b" "type = ${type}4"
    gdb_test "ptype u${name}a || u${name}4b" "type = ${type}4"
    # vector with vector
    gdb_test "ptype ${name}4a && ${name}4b" "type = ${type}4"
    gdb_test "ptype ${name}4a || ${name}4b" "type = ${type}4"
    # result type for unsigned vector operand is signed
    gdb_test "ptype u${name}4a && u${name}4b" "type = ${type}4"
    gdb_test "ptype u${name}4a || u${name}4b" "type = ${type}4"
  }
}

# Conditional operator
proc check_conditional_op { name type isfloat } {
  # scalar with scalar
  gdb_test "print/d ${name}a ? ${name}b : ${name}a" " = 1"
  gdb_test "print/d !${name}a ? ${name}b : ${name}a" " = 2"
  # scalar with vector
  gdb_test "print/d ${name}4a ? ${name}4b : ${name}a" " = \\{1, 2, 8, 4\\}"
  gdb_test "print/d ${name}4a ? ${name}b : ${name}4a" " = \\{1, 1, 1, 1\\}"
  gdb_test "print/d ${name}4a > 4 ? 1 : ${name}4a" " = \\{2, 4, 1, 1\\}"
  gdb_test "print/d ${name}4a > 4 ? ${name}4b : ${name}a" " = \\{2, 2, 8, 4\\}"
  # vector with vector
  gdb_test "print/d ${name}4a ? ${name}4b : ${name}4a" " = \\{1, 2, 8, 4\\}"
  gdb_test "print/d ${name}4a > 4 ? ${name}4b : ${name}4a" " = \\{2, 4, 8, 4\\}"

  # scalar with scalar
  gdb_test "ptype ${name}a ? ${name}b : ${name}a" "type = ${type}"
  # scalar with vector
  gdb_test "ptype ${name}4a ? ${name}4b : ${name}a" "type = ${type}4"
  gdb_test "ptype ${name}4a ? ${name}b : ${name}4a" "type = ${type}4"
  # vector with vector
  gdb_test "ptype ${name}4a ? ${name}4b : ${name}4a" "type = ${type}4"

  if { !${isfloat} } {
    # scalar with scalar
    gdb_test "print/d u${name}a ? u${name}b : u${name}a" " = 1"
    gdb_test "print/d !u${name}a ? u${name}b : u${name}a" " = 2"
    # scalar with vector
    gdb_test "print/d u${name}4a ? u${name}4b : u${name}a" " = \\{1, 2, 8, 4\\}"
    gdb_test "print/d u${name}4a ? u${name}b : u${name}4a" " = \\{1, 1, 1, 1\\}"
    gdb_test "print/d u${name}4a > 4 ? 1 : u${name}4a" " = \\{2, 4, 1, 1\\}"
    gdb_test "print/d u${name}4a > 4 ? u${name}4b : u${name}a" " = \\{2, 2, 8, 4\\}"
    # vector with vector
    gdb_test "print/d u${name}4a ? u${name}4b : u${name}4a" " = \\{1, 2, 8, 4\\}"
    gdb_test "print/d u${name}4a > 4 ? u${name}4b : u${name}4a" " = \\{2, 4, 8, 4\\}"

    # scalar with scalar
    gdb_test "ptype u${name}a ? u${name}b : u${name}a" "type = (unsigned ${type}|u${type})"
    # scalar with vector
    gdb_test "ptype u${name}4a ? u${name}4b : u${name}a" "type = u${type}4"
    gdb_test "ptype u${name}4a ? u${name}b : u${name}4a" "type = u${type}4"
    # vector with vector
    gdb_test "ptype u${name}4a ? u${name}4b : u${name}4a" "type = u${type}4"
  }
}

# Assignment operators
proc check_assignment_ops { name type isfloat size } {
  # scalar with scalar
  gdb_test "print/d ${name}a = ${name}b" " = 1"
  gdb_test "print/d ${name}a = 2" " = 2"
  gdb_test "print/d ${name}a += ${name}b" " = 3"
  gdb_test "print/d ${name}a -= ${name}b" " = 2"
  gdb_test "print/d ${name}b *= ${name}a" " = 2"
  gdb_test "print/d ${name}b /= ${name}a" " = 1"
  # scalar with vector
  gdb_test "print/d ${name}4a = ${name}b" " = \\{1, 1, 1, 1\\}"
  gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d ${name}4a += ${name}b" " = \\{3, 5, 9, 17\\}"
  gdb_test "print/d ${name}4a -= ${name}b" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d ${name}4b *= ${name}a" " = \\{2, 4, 16, 8\\}"
  gdb_test "print/d ${name}4b /= ${name}a" " = \\{1, 2, 8, 4\\}"
  # vector with vector
  gdb_test "print/d ${name}4a = ${name}4b" " = \\{1, 2, 8, 4\\}"
  gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d ${name}4a += ${name}4b" " = \\{3, 6, 16, 20\\}"
  gdb_test "print/d ${name}4a -= ${name}4b" " = \\{2, 4, 8, 16\\}"
  gdb_test "print/d ${name}4b *= ${name}4a" " = \\{2, 8, 64, 64\\}"
  gdb_test "print/d ${name}4b /= ${name}4a" " = \\{1, 2, 8, 4\\}"

  # scalar with scalar
  gdb_test "ptype ${name}a = ${name}b" "type = ${type}"
  gdb_test "ptype ${name}a += ${name}b" "type = ${type}"
  gdb_test "ptype ${name}a -= ${name}b" "type = ${type}"
  gdb_test "ptype ${name}a *= ${name}b" "type = ${type}"
  gdb_test "ptype ${name}a /= ${name}b" "type = ${type}"
  # scalar with vector
  gdb_test "ptype ${name}4a = ${name}b" "type = ${type}4"
  gdb_test "ptype ${name}4a += ${name}b" "type = ${type}4"
  gdb_test "ptype ${name}4a -= ${name}b" "type = ${type}4"
  gdb_test "ptype ${name}4b *= ${name}a" "type = ${type}4"
  gdb_test "ptype ${name}4b /= ${name}a" "type = ${type}4"
  # vector with vector
  gdb_test "ptype ${name}4a = ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a += ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4a -= ${name}4b" "type = ${type}4"
  gdb_test "ptype ${name}4b *= ${name}4a" "type = ${type}4"
  gdb_test "ptype ${name}4b /= ${name}4a" "type = ${type}4"

  if { !${isfloat} } {
    # scalar with scalar
    gdb_test "print/d ${name}a %= ${name}b" " = 0"
    gdb_test "print/d ${name}a = 2" " = 2"
    gdb_test "print/d ${name}a <<= ${name}b" " = 4"
    gdb_test "print/d ${name}a = 2" " = 2"
    gdb_test "print/d ${name}a >>= ${name}b" " = 1"
    gdb_test "print/d ${name}a = 2" " = 2"
    gdb_test "print/d ${name}a &= ${name}b" " = 0"
    gdb_test "print/d ${name}a = 2" " = 2"
    gdb_test "print/d ${name}a |= ${name}b" " = 3"
    gdb_test "print/d ${name}a = 2" " = 2"
    gdb_test "print/d ${name}a ^= ${name}b" " = 3"
    gdb_test "print/d ${name}a = 2" " = 2"
    # scalar with vector
    gdb_test "print/d ${name}4b %= ${name}a" " = \\{1, 0, 0, 0\\}"
    gdb_test "print/d ${name}4b = \{1, 2, 8, 4\}" " = \\{1, 2, 8, 4\\}"
    gdb_test "print/d ${name}4a <<= ${name}b" " = \\{4, 8, 16, 32\\}"
    gdb_test "print/d ${name}4a >>= ${name}b" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d ${name}4a &= ${name}b" " = \\{0, 0, 0, 0\\}"
    gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d ${name}4a |= ${name}b" " = \\{3, 5, 9, 17\\}"
    gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d ${name}4a ^= ${name}b" " = \\{3, 5, 9, 17\\}"
    gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    # vector with vector
    gdb_test "print/d ${name}4b %= ${name}4a" " = \\{1, 2, 0, 4\\}"
    gdb_test "print/d ${name}4b = \{1, 2, 8, 4\}" " = \\{1, 2, 8, 4\\}"
    if { ${size} == 1 } {
      gdb_test "print/d ${name}4a <<= ${name}4b" " = \\{4, 16, 0, 0\\}"
      gdb_test "print/d ${name}4a >>= ${name}4b" " = \\{2, 4, 0, 0\\}"
      gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    } else {
      gdb_test "print/d ${name}4a <<= ${name}4b" " = \\{4, 16, 2048, 256\\}"
      gdb_test "print/d ${name}4a >>= ${name}4b" " = \\{2, 4, 8, 16\\}"
    }
    gdb_test "print/d ${name}4a &= ${name}4b" " = \\{0, 0, 8, 0\\}"
    gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d ${name}4a |= ${name}4b" " = \\{3, 6, 8, 20\\}"
    gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d ${name}4a ^= ${name}4b" " = \\{3, 6, 0, 20\\}"
    gdb_test "print/d ${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"

    # scalar with scalar
    gdb_test "ptype ${name}a %= ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a <<= ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a >>= ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a &= ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a |= ${name}b" "type = ${type}"
    gdb_test "ptype ${name}a ^= ${name}b" "type = ${type}"
    # scalar with vector
    gdb_test "ptype ${name}4a %= ${name}b" "type = ${type}4"
    gdb_test "ptype ${name}4a <<= ${name}b" "type = ${type}4"
    gdb_test "ptype ${name}4a >>= ${name}b" "type = ${type}4"
    gdb_test "ptype ${name}4a &= ${name}b" "type = ${type}4"
    gdb_test "ptype ${name}4a |= ${name}b" "type = ${type}4"
    gdb_test "ptype ${name}4a ^= ${name}b" "type = ${type}4"
    # vector with vector
    gdb_test "ptype ${name}4a %= ${name}4b" "type = ${type}4"
    gdb_test "ptype ${name}4a <<= ${name}4b" "type = ${type}4"
    gdb_test "ptype ${name}4a >>= ${name}4b" "type = ${type}4"
    gdb_test "ptype ${name}4a &= ${name}4b" "type = ${type}4"
    gdb_test "ptype ${name}4a |= ${name}4b" "type = ${type}4"
    gdb_test "ptype ${name}4a ^= ${name}4b" "type = ${type}4"

    # scalar with scalar
    gdb_test "print/d u${name}a = u${name}b" " = 1"
    gdb_test "print/d u${name}a = 2" " = 2"
    gdb_test "print/d u${name}a += u${name}b" " = 3"
    gdb_test "print/d u${name}a -= u${name}b" " = 2"
    gdb_test "print/d u${name}b *= u${name}a" " = 2"
    gdb_test "print/d u${name}b /= u${name}a" " = 1"
    gdb_test "print/d u${name}a %= u${name}b" " = 0"
    gdb_test "print/d u${name}a = 2" " = 2"
    gdb_test "print/d u${name}a <<= u${name}b" " = 4"
    gdb_test "print/d u${name}a = 2" " = 2"
    gdb_test "print/d u${name}a >>= u${name}b" " = 1"
    gdb_test "print/d u${name}a = 2" " = 2"
    gdb_test "print/d u${name}a &= u${name}b" " = 0"
    gdb_test "print/d u${name}a = 2" " = 2"
    gdb_test "print/d u${name}a |= u${name}b" " = 3"
    gdb_test "print/d u${name}a = 2" " = 2"
    gdb_test "print/d u${name}a ^= u${name}b" " = 3"
    gdb_test "print/d u${name}a = 2" " = 2"
    # scalar with vector
    gdb_test "print/d u${name}4a = u${name}b" " = \\{1, 1, 1, 1\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4a += u${name}b" " = \\{3, 5, 9, 17\\}"
    gdb_test "print/d u${name}4a -= u${name}b" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4b *= u${name}a" " = \\{2, 4, 16, 8\\}"
    gdb_test "print/d u${name}4b /= u${name}a" " = \\{1, 2, 8, 4\\}"
    gdb_test "print/d u${name}4b %= u${name}a" " = \\{1, 0, 0, 0\\}"
    gdb_test "print/d u${name}4b = \{1, 2, 8, 4\}" " = \\{1, 2, 8, 4\\}"
    gdb_test "print/d u${name}4a <<= u${name}b" " = \\{4, 8, 16, 32\\}"
    gdb_test "print/d u${name}4a >>= u${name}b" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4a &= u${name}b" " = \\{0, 0, 0, 0\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4a |= u${name}b" " = \\{3, 5, 9, 17\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4a ^= u${name}b" " = \\{3, 5, 9, 17\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    # vector with vector
    gdb_test "print/d u${name}4a = u${name}4b" " = \\{1, 2, 8, 4\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4a += u${name}4b" " = \\{3, 6, 16, 20\\}"
    gdb_test "print/d u${name}4a -= u${name}4b" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4b *= u${name}4a" " = \\{2, 8, 64, 64\\}"
    gdb_test "print/d u${name}4b /= u${name}4a" " = \\{1, 2, 8, 4\\}"
    gdb_test "print/d u${name}4b %= u${name}4a" " = \\{1, 2, 0, 4\\}"
    gdb_test "print/d u${name}4b = \{1, 2, 8, 4\}" " = \\{1, 2, 8, 4\\}"
    if { ${size} == 1 } {
      gdb_test "print/d u${name}4a <<= u${name}4b" " = \\{4, 16, 0, 0\\}"
      gdb_test "print/d u${name}4a >>= u${name}4b" " = \\{2, 4, 0, 0\\}"
      gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    } else {
      gdb_test "print/d u${name}4a <<= u${name}4b" " = \\{4, 16, 2048, 256\\}"
      gdb_test "print/d u${name}4a >>= u${name}4b" " = \\{2, 4, 8, 16\\}"
    }
    gdb_test "print/d u${name}4a &= u${name}4b" " = \\{0, 0, 8, 0\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4a |= u${name}4b" " = \\{3, 6, 8, 20\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"
    gdb_test "print/d u${name}4a ^= u${name}4b" " = \\{3, 6, 0, 20\\}"
    gdb_test "print/d u${name}4a = \{2, 4, 8, 16\}" " = \\{2, 4, 8, 16\\}"

    # scalar with scalar
    gdb_test "ptype u${name}a = u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a += u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a -= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a *= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a /= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a %= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a <<= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a >>= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a &= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a |= u${name}b" "type = (unsigned ${type}|u${type})"
    gdb_test "ptype u${name}a ^= u${name}b" "type = (unsigned ${type}|u${type})"
    # scalar with vector
    gdb_test "ptype u${name}4a = u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4a += u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4a -= u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4b *= u${name}a" "type = u${type}4"
    gdb_test "ptype u${name}4b /= u${name}a" "type = u${type}4"
    gdb_test "ptype u${name}4a %= u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4a <<= u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4a >>= u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4a &= u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4a |= u${name}b" "type = u${type}4"
    gdb_test "ptype u${name}4a ^= u${name}b" "type = u${type}4"
    # vector with vector
    gdb_test "ptype u${name}4a = u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a += u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a -= u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4b *= u${name}4a" "type = u${type}4"
    gdb_test "ptype u${name}4b /= u${name}4a" "type = u${type}4"
    gdb_test "ptype u${name}4a %= u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a <<= u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a >>= u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a &= u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a |= u${name}4b" "type = u${type}4"
    gdb_test "ptype u${name}4a ^= u${name}4b" "type = u${type}4"
  }
}

proc do_check { name type isfloat size } {
  check_basic ${name} ${type} ${isfloat}
  check_arithmetic_ops ${name} ${type} ${isfloat} ${size}
  check_relational_ops ${name} ${type} ${isfloat} ${size}
  check_equality_ops ${name} ${type} ${isfloat} ${size}
  if { !${isfloat} } {
    check_shift_ops ${name} ${type} ${size}
    check_bitwise_ops ${name} ${type} ${size}
  }
  check_logical_ops ${name} ${type} ${isfloat} ${size}
  check_conditional_op ${name} ${type} ${isfloat}
  check_assignment_ops ${name} ${type} ${isfloat} ${size}
}

do_check "c" "char" 0 1
do_check "s" "short" 0 2
do_check "i" "int" 0 4
do_check "l" "long" 0 8
if { ${have_cl_khr_fp16} } {
  do_check "h" "half" 1 2
}
do_check "f" "float" 1 4
if { ${have_cl_khr_fp64} } {
  do_check "d" "double" 1 8
}
# Delete the OpenCL program source
remote_file target delete ${clprogram}
@


1.7
log
@ChangeLog:

	* opencl-lang.c (opencl_print_type): New function.
	(opencl_language_arch_info): Install it.

testsuite/ChangeLog:

	* gdb.opencl/convs_casts.exp: Always expect standard vector type names.
	* gdb.opencl/datatypes.exp: Likewise.
	* gdb.opencl/operators.exp: Likewise.
	* gdb.opencl/vec_comps.exp: Likewise.
@
text
@d1 1
a1 1
# Copyright 2010-2012 Free Software Foundation, Inc.
@


1.6
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d64 2
a65 2
  gdb_test "ptype ${name}4a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4b" "type = ${type} \\\[4\\\]"
d74 2
a75 2
    gdb_test "ptype u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
d113 9
a121 9
  gdb_test "ptype ${name}a + ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a - ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}a * ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a / ${name}b" "type = ${type} \\\[4\\\]"
  # vector with vector
  gdb_test "ptype ${name}4a + ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a - ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a * ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a / ${name}4b" "type = ${type} \\\[4\\\]"
d129 6
a134 6
  gdb_test "ptype ${name}4a++" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ++${name}4a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a--" "type = ${type} \\\[4\\\]"
  gdb_test "ptype --${name}4a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype +${name}4a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype -${name}4a" "type = ${type} \\\[4\\\]"
d240 19
a258 19
    gdb_test "ptype ${name}a % ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}a + u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a - u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}a * u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a / u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}a % u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    # vector with vector
    gdb_test "ptype ${name}4a % ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}4a + u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a - u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a * u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a / u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a % u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a++" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype ++u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a--" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype --u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype +u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype -u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
d290 4
a293 4
      gdb_test "ptype ${name}4a > ${name}b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}a < ${name}4b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}4a >= ${name}b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}a <= ${name}4b" "type = short \\\[4\\\]"
d295 4
a298 4
      gdb_test "ptype ${name}4a > ${name}4b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}4a < ${name}4b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}4a >= ${name}4b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}4a <= ${name}4b" "type = short \\\[4\\\]"
d302 4
a305 4
      gdb_test "ptype ${name}4a > ${name}b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}a < ${name}4b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}4a >= ${name}b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}a <= ${name}4b" "type = int \\\[4\\\]"
d307 4
a310 4
      gdb_test "ptype ${name}4a > ${name}4b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}4a < ${name}4b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}4a >= ${name}4b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}4a <= ${name}4b" "type = int \\\[4\\\]"
d314 4
a317 4
      gdb_test "ptype ${name}4a > ${name}b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}a < ${name}4b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}4a >= ${name}b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}a <= ${name}4b" "type = long \\\[4\\\]"
d319 4
a322 4
      gdb_test "ptype ${name}4a > ${name}4b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}4a < ${name}4b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}4a >= ${name}4b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}4a <= ${name}4b" "type = long \\\[4\\\]"
d348 9
a356 9
    gdb_test "ptype u${name}4a > u${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}a < u${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}4a >= u${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}a <= u${name}4b" "type = ${type} \\\[4\\\]"
    # vector with vector
    gdb_test "ptype u${name}4a > u${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}4a < u${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}4a >= u${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}4a <= u${name}4b" "type = ${type} \\\[4\\\]"
d380 2
a381 2
      gdb_test "ptype ${name}4a == ${name}b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}a != ${name}4b" "type = short \\\[4\\\]"
d383 2
a384 2
      gdb_test "ptype ${name}4a == ${name}4b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}4a != ${name}4b" "type = short \\\[4\\\]"
d388 2
a389 2
      gdb_test "ptype ${name}4a == ${name}b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}a != ${name}4b" "type = int \\\[4\\\]"
d391 2
a392 2
      gdb_test "ptype ${name}4a == ${name}4b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}4a != ${name}4b" "type = int \\\[4\\\]"
d396 2
a397 2
      gdb_test "ptype ${name}4a == ${name}b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}a != ${name}4b" "type = long \\\[4\\\]"
d399 2
a400 2
      gdb_test "ptype ${name}4a == ${name}4b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}4a != ${name}4b" "type = long \\\[4\\\]"
d418 2
a419 2
    gdb_test "ptype u${name}4a == u${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}a != u${name}4b" "type = ${type} \\\[4\\\]"
d421 2
a422 2
    gdb_test "ptype u${name}4a == u${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}4a != u${name}4b" "type = ${type} \\\[4\\\]"
d467 9
a475 9
  gdb_test "ptype ${name}4a << ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a >> ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype u${name}4a << u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  gdb_test "ptype u${name}4a >> u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  # vector with vector
  gdb_test "ptype ${name}4a << ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a >> ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype u${name}4a << u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  gdb_test "ptype u${name}4a >> u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
d526 13
a538 13
  gdb_test "ptype ${name}4a & ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}a | ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a ^ ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype u${name}4a & u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  gdb_test "ptype u${name}a | u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  gdb_test "ptype u${name}4a ^ u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  # vector with vector
  gdb_test "ptype ${name}4a & ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a | ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a ^ ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype u${name}4a & u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  gdb_test "ptype u${name}4a | u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
  gdb_test "ptype u${name}4a ^ u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
d574 2
a575 2
  gdb_test "ptype ~${name}4a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ~u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
d613 2
a614 2
      gdb_test "ptype ${name}4a && ${name}b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}a || ${name}4b" "type = short \\\[4\\\]"
d616 3
a618 3
      gdb_test "ptype !${name}4a" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}4a && ${name}4b" "type = short \\\[4\\\]"
      gdb_test "ptype ${name}4a || ${name}4b" "type = short \\\[4\\\]"
d622 2
a623 2
      gdb_test "ptype ${name}4a && ${name}b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}a || ${name}4b" "type = int \\\[4\\\]"
d625 3
a627 3
      gdb_test "ptype !${name}4a" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}4a && ${name}4b" "type = int \\\[4\\\]"
      gdb_test "ptype ${name}4a || ${name}4b" "type = int \\\[4\\\]"
d631 2
a632 2
      gdb_test "ptype ${name}4a && ${name}b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}a || ${name}4b" "type = long \\\[4\\\]"
d634 3
a636 3
      gdb_test "ptype !${name}4a" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}4a && ${name}4b" "type = long \\\[4\\\]"
      gdb_test "ptype ${name}4a || ${name}4b" "type = long \\\[4\\\]"
d659 2
a660 2
    gdb_test "ptype !${name}4a" "type = ${type} \\\[4\\\]"
    gdb_test "ptype !u${name}4a" "type = ${type} \\\[4\\\]"
d663 2
a664 2
    gdb_test "ptype ${name}4a && ${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}a || ${name}4b" "type = ${type} \\\[4\\\]"
d666 2
a667 2
    gdb_test "ptype u${name}4a && u${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}a || u${name}4b" "type = ${type} \\\[4\\\]"
d669 2
a670 2
    gdb_test "ptype ${name}4a && ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a || ${name}4b" "type = ${type} \\\[4\\\]"
d672 2
a673 2
    gdb_test "ptype u${name}4a && u${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype u${name}4a || u${name}4b" "type = ${type} \\\[4\\\]"
d694 2
a695 2
  gdb_test "ptype ${name}4a ? ${name}4b : ${name}a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a ? ${name}b : ${name}4a" "type = ${type} \\\[4\\\]"
d697 1
a697 1
  gdb_test "ptype ${name}4a ? ${name}4b : ${name}4a" "type = ${type} \\\[4\\\]"
d715 2
a716 2
    gdb_test "ptype u${name}4a ? u${name}4b : u${name}a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a ? u${name}b : u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
d718 1
a718 1
    gdb_test "ptype u${name}4a ? u${name}4b : u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
d753 11
a763 11
  gdb_test "ptype ${name}4a = ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a += ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a -= ${name}b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4b *= ${name}a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4b /= ${name}a" "type = ${type} \\\[4\\\]"
  # vector with vector
  gdb_test "ptype ${name}4a = ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a += ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4a -= ${name}4b" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4b *= ${name}4a" "type = ${type} \\\[4\\\]"
  gdb_test "ptype ${name}4b /= ${name}4a" "type = ${type} \\\[4\\\]"
d816 13
a828 13
    gdb_test "ptype ${name}4a %= ${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a <<= ${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a >>= ${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a &= ${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a |= ${name}b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a ^= ${name}b" "type = ${type} \\\[4\\\]"
    # vector with vector
    gdb_test "ptype ${name}4a %= ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a <<= ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a >>= ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a &= ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a |= ${name}4b" "type = ${type} \\\[4\\\]"
    gdb_test "ptype ${name}4a ^= ${name}4b" "type = ${type} \\\[4\\\]"
d903 23
a925 23
    gdb_test "ptype u${name}4a = u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a += u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a -= u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4b *= u${name}a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4b /= u${name}a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a %= u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a <<= u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a >>= u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a &= u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a |= u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a ^= u${name}b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    # vector with vector
    gdb_test "ptype u${name}4a = u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a += u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a -= u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4b *= u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4b /= u${name}4a" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a %= u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a <<= u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a >>= u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a &= u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a |= u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
    gdb_test "ptype u${name}4a ^= u${name}4b" "type = (unsigned ${type}|u${type}) \\\[4\\\]"
@


1.5
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a19 4
if $tracelevel {
    strace $tracelevel
}

@


1.4
log
@	* gdb.opencl/convs_casts.exp: Use tbreak instead of break to
	proceed to initial kernel entry point.
	* gdb.opencl/datatypes.exp: Likewise.
	* gdb.opencl/operators.exp: Likewise.
	* gdb.opencl/vec_comps.exp: Likewise.
@
text
@d1 1
a1 1
# Copyright 2010, 2011 Free Software Foundation, Inc.
@


1.4.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2010-2012 Free Software Foundation, Inc.
@


1.3
log
@gdb/testsuite/ChangeLog

2011-01-25  Ken Werner  <ken.werner@@de.ibm.com>

        * gdb.opencl/convs_casts.cl: Move program scope variables into the
        OpenCL kernel function. Add a comment as marker. Add address space
        qualifiers for the remaining program scope variables.
        * gdb.opencl/datatypes.cl: Likewise.
        * gdb.opencl/operators.cl: Likewise.
        * gdb.opencl/vec_comps.cl: Likewise.
        * gdb.opencl/convs_casts.exp: Replace gdb_test_multiple by gdb_test.
        Add breakpoint at the marker comment.
        * gdb.opencl/datatypes.exp: Likewise.
        * gdb.opencl/operators.exp: Likewise.
        * gdb.opencl/vec_comps.exp: Likewise.
@
text
@d43 1
a43 1
gdb_test "break testkernel" \
d50 1
a50 1
gdb_test "" ".*Breakpoint.*1.*testkernel.*" "run"
@


1.2
log
@run copyright.sh for 2011.
@
text
@d43 5
a47 5
gdb_test_multiple "break testkernel" "set pending breakpoint" {
     -re ".*Function \"testkernel\" not defined.*Make breakpoint pending.*y or \\\[n\\\]. $" {
            gdb_test "y" "Breakpoint.*testkernel.*pending." "set pending breakpoint (without symbols)"
     }
}
d52 4
@


1.1
log
@gdb:
	* NEWS: Mention OpenCL C language support.
	* Makefile.in (SFILES): Add opencl-lang.c.
	(COMMON_OBS): Add opencl-lang.o.
	* opencl-lang.c: New File
	* defs.h (enum language): Add language_opencl.
	* dwarf2read.c (read_file_scope): Handle DW_AT_producer for the
	IBM XL C OpenCL compiler.
	* c-lang.h: Include "parser-defs.h".
	(evaluate_subexp_c): Declare.
	* c-lang.c (evaluate_subexp_c): Remove the static qualifier.
	(c_op_print_tab): Add declaration.
	* eval.c (binop_promote): Handle language_opencl.
	* c-exp.y: Lookup the primitive types instead of referring to the
	builtins.

gdb/testsuite:
	* Makefile.in (ALL_SUBDIRS): Add gdb.opencl.
	* configure.ac (AC_OUTPUT): Add gdb.opencl/Makefile.
	* configure: Regenerate.
	* gdb.opencl/Makefile.in: New File.
	* gdb.opencl/datatypes.exp: Likewise.
	* gdb.opencl/datatypes.cl: Likewise.
	* gdb.opencl/operators.exp: Likewise.
	* gdb.opencl/operators.cl: Likewise.
	* gdb.opencl/vec_comps.exp: Likewise.
	* gdb.opencl/vec_comps.cl: Likewise.
	* gdb.opencl/convs_casts.exp: Likewise.
	* gdb.opencl/convs_casts.cl: Likewise.
	* lib/opencl.exp: Likewise.
	* lib/opencl_hostapp.c: Likewise.
	* lib/opencl_kernel.cl: Likewise.
	* lib/cl_util.c: Likewise.
	* lib/cl_util.c: Likewise.
	* gdb.base/default.exp (set language): Add "opencl" to the list of
	languages.

gdb/doc:
	* gdb.texinfo: (Summary) Add mention about OpenCL C language support.
	(OpenCL C): New node.
@
text
@d1 1
a1 1
# Copyright 2010 Free Software Foundation, Inc.
@

