head	1.10;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.10
	gdb_7_6-2013-04-26-release:1.10
	gdb_7_6-branch:1.10.0.2
	gdb_7_6-2013-03-12-branchpoint:1.10
	gdb_7_5_1-2012-11-29-release:1.8
	gdb_7_5-2012-08-17-release:1.8
	gdb_7_5-branch:1.8.0.2
	gdb_7_5-2012-07-18-branchpoint:1.8
	gdb_7_4_1-2012-04-26-release:1.6.4.1
	gdb_7_4-2012-01-24-release:1.6.4.1
	gdb_7_4-branch:1.6.0.4
	gdb_7_4-2011-12-13-branchpoint:1.6
	gdb_7_3_1-2011-09-04-release:1.6
	gdb_7_3-2011-07-26-release:1.6
	gdb_7_3-branch:1.6.0.2
	gdb_7_3-2011-04-01-branchpoint:1.6;
locks; strict;
comment	@# @;


1.10
date	2013.01.01.06.41.25;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.29.18.56.23;	author uweigand;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.16.16.21.51;	author palves;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.04.08.17.55;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2011.02.16.14.38.53;	author kwerner;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2011.02.15.20.10.13;	author kwerner;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.31.19.05.23;	author uweigand;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.25.16.10.28;	author kwerner;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.01.15.33.48;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.05.14.31.30;	author kwerner;	state Exp;
branches;
next	;

1.6.4.1
date	2012.01.06.04.44.10;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2010-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
#
# Contributed by Ken Werner <ken.werner@@de.ibm.com>.
#
# Tests OpenCL data types.

load_lib opencl.exp

if { [skip_opencl_tests] } {
    return 0
}

set testfile "datatypes"
set clprogram [remote_download target ${srcdir}/${subdir}/${testfile}.cl]

# Compile the generic OpenCL host app
if { [gdb_compile_opencl_hostapp "${clprogram}" "${testfile}" "" ] != "" } {
    untested ${testfile}.exp
    return -1
}

gdb_exit
gdb_start

# Manually switch the language to opencl
gdb_test_no_output "set language opencl" "No prompt when setting the language to opencl"

# Check OpenCL data types (GDB)
gdb_test "whatis bool" "type = bool"
gdb_test "p sizeof(bool)" " = 1"

gdb_test "whatis char" "type = char"
gdb_test "p sizeof(char)" " = 1"
gdb_test "whatis char2" "type = char2"
gdb_test "p sizeof(char2)" " = 2"
gdb_test "whatis char3" "type = char3"
gdb_test "p sizeof(char3)" " = 4"
gdb_test "whatis char4" "type = char4"
gdb_test "p sizeof(char4)" " = 4"
gdb_test "whatis char8" "type = char8"
gdb_test "p sizeof(char8)" " = 8"
gdb_test "whatis char16" "type = char16"
gdb_test "p sizeof(char16)" " = 16"

gdb_test "whatis unsigned char" "type = unsigned char"
gdb_test "p sizeof(unsigned char)" " = 1"
gdb_test "whatis uchar" "type = uchar"
gdb_test "p sizeof(uchar)" " = 1"
gdb_test "whatis uchar2" "type = uchar2"
gdb_test "p sizeof(uchar2)" " = 2"
gdb_test "whatis uchar3" "type = uchar3"
gdb_test "p sizeof(uchar3)" " = 4"
gdb_test "whatis uchar4" "type = uchar4"
gdb_test "p sizeof(uchar4)" " = 4"
gdb_test "whatis uchar8" "type = uchar8"
gdb_test "p sizeof(uchar8)" " = 8"
gdb_test "whatis uchar16" "type = uchar16"
gdb_test "p sizeof(uchar16)" " = 16"

gdb_test "whatis short" "type = short"
gdb_test "p sizeof(short)" " = 2"
gdb_test "whatis short2" "type = short2"
gdb_test "p sizeof(short2)" " = 4"
gdb_test "whatis short3" "type = short3"
gdb_test "p sizeof(short3)" " = 8"
gdb_test "whatis short4" "type = short4"
gdb_test "p sizeof(short4)" " = 8"
gdb_test "whatis short8" "type = short8"
gdb_test "p sizeof(short8)" " = 16"
gdb_test "whatis short16" "type = short16"
gdb_test "p sizeof(short16)" " = 32"

gdb_test "whatis unsigned short" "type = unsigned short"
gdb_test "p sizeof(unsigned short)" " = 2"
gdb_test "whatis ushort" "type = ushort"
gdb_test "p sizeof(ushort)" " = 2"
gdb_test "whatis ushort2" "type = ushort2"
gdb_test "p sizeof(ushort2)" " = 4"
gdb_test "whatis ushort3" "type = ushort3"
gdb_test "p sizeof(ushort3)" " = 8"
gdb_test "whatis ushort4" "type = ushort4"
gdb_test "p sizeof(ushort4)" " = 8"
gdb_test "whatis ushort8" "type = ushort8"
gdb_test "p sizeof(ushort8)" " = 16"
gdb_test "whatis ushort16" "type = ushort16"
gdb_test "p sizeof(ushort16)" " = 32"

gdb_test "whatis int" "type = int"
gdb_test "p sizeof(int)" " = 4"
gdb_test "whatis int2" "type = int2"
gdb_test "p sizeof(int2)" " = 8"
gdb_test "whatis int3" "type = int3"
gdb_test "p sizeof(int3)" " = 16"
gdb_test "whatis int4" "type = int4"
gdb_test "p sizeof(int4)" " = 16"
gdb_test "whatis int8" "type = int8"
gdb_test "p sizeof(int8)" " = 32"
gdb_test "whatis int16" "type = int16"
gdb_test "p sizeof(int16)" " = 64"

gdb_test "whatis unsigned int" "type = unsigned int"
gdb_test "p sizeof(unsigned int)" " = 4"
gdb_test "whatis uint" "type = uint"
gdb_test "p sizeof(uint)" " = 4"
gdb_test "whatis uint2" "type = uint2"
gdb_test "p sizeof(uint2)" " = 8"
gdb_test "whatis uint3" "type = uint3"
gdb_test "p sizeof(uint3)" " = 16"
gdb_test "whatis uint4" "type = uint4"
gdb_test "p sizeof(uint4)" " = 16"
gdb_test "whatis uint8" "type = uint8"
gdb_test "p sizeof(uint8)" " = 32"
gdb_test "whatis uint16" "type = uint16"
gdb_test "p sizeof(uint16)" " = 64"

gdb_test "whatis long" "type = long"
gdb_test "p sizeof(long)" " = 8"
gdb_test "whatis long2" "type = long2"
gdb_test "p sizeof(long2)" " = 16"
gdb_test "whatis long3" "type = long3"
gdb_test "p sizeof(long3)" " = 32"
gdb_test "whatis long4" "type = long4"
gdb_test "p sizeof(long4)" " = 32"
gdb_test "whatis long8" "type = long8"
gdb_test "p sizeof(long8)" " = 64"
gdb_test "whatis long16" "type = long16"
gdb_test "p sizeof(long16)" " = 128"

gdb_test "whatis unsigned long" "type = unsigned long"
gdb_test "p sizeof(unsigned long)" " = 8"
gdb_test "whatis ulong" "type = ulong"
gdb_test "p sizeof(ulong)" " = 8"
gdb_test "whatis ulong2" "type = ulong2"
gdb_test "p sizeof(ulong2)" " = 16"
gdb_test "whatis ulong3" "type = ulong3"
gdb_test "p sizeof(ulong3)" " = 32"
gdb_test "whatis ulong4" "type = ulong4"
gdb_test "p sizeof(ulong4)" " = 32"
gdb_test "whatis ulong8" "type = ulong8"
gdb_test "p sizeof(ulong8)" " = 64"
gdb_test "whatis ulong16" "type = ulong16"
gdb_test "p sizeof(ulong16)" " = 128"

gdb_test "whatis half" "type = half"
gdb_test "p sizeof(half)" " = 2"
gdb_test "whatis half2" "type = half2"
gdb_test "p sizeof(half2)" " = 4"
gdb_test "whatis half3" "type = half3"
gdb_test "p sizeof(half3)" " = 8"
gdb_test "whatis half4" "type = half4"
gdb_test "p sizeof(half4)" " = 8"
gdb_test "whatis half8" "type = half8"
gdb_test "p sizeof(half8)" " = 16"
gdb_test "whatis half16" "type = half16"
gdb_test "p sizeof(half16)" " = 32"

gdb_test "whatis float" "type = float"
gdb_test "p sizeof(float)" " = 4"
gdb_test "whatis float2" "type = float2"
gdb_test "p sizeof(float2)" " = 8"
gdb_test "whatis float3" "type = float3"
gdb_test "p sizeof(float3)" " = 16"
gdb_test "whatis float4" "type = float4"
gdb_test "p sizeof(float4)" " = 16"
gdb_test "whatis float8" "type = float8"
gdb_test "p sizeof(float8)" " = 32"
gdb_test "whatis float16" "type = float16"
gdb_test "p sizeof(float16)" " = 64"

gdb_test "whatis double" "type = double"
gdb_test "p sizeof(double)" " = 8"
gdb_test "whatis double2" "type = double2"
gdb_test "p sizeof(double2)" " = 16"
gdb_test "whatis double3" "type = double3"
gdb_test "p sizeof(double3)" " = 32"
gdb_test "whatis double4" "type = double4"
gdb_test "p sizeof(double4)" " = 32"
gdb_test "whatis double8" "type = double8"
gdb_test "p sizeof(double8)" " = 64"
gdb_test "whatis double16" "type = double16"
gdb_test "p sizeof(double16)" " = 128"

# Set the language back to the default: "auto; currently c"
gdb_test_no_output "set language c" "No prompt when setting the language to c"
gdb_test_no_output "set language auto" "No prompt when setting the language to auto"

# Load the OpenCL app
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${objdir}/${subdir}/${testfile}

# Set breakpoint at the OpenCL kernel
gdb_test "tbreak testkernel" \
    "" \
    "Set pending breakpoint" \
    ".*Function \"testkernel\" not defined.*Make breakpoint pending.*y or \\\[n\\\]. $" \
    "y"

gdb_run_cmd
gdb_test "" ".*reakpoint.*1.*testkernel.*" "run"

# Continue to the marker
gdb_breakpoint [gdb_get_line_number "marker" "${clprogram}"]
gdb_continue_to_breakpoint "marker"

# Check if the language was switched to opencl
gdb_test "show language" "The current source language is \"auto; currently opencl\"\."

# Retrieve some information about the OpenCL version and the availability of extensions
set opencl_version [get_integer_valueof "opencl_version" 0]
set have_cl_khr_fp64 [get_integer_valueof "have_cl_khr_fp64" 0]
set have_cl_khr_fp16 [get_integer_valueof "have_cl_khr_fp16" 0]

# Check OpenCL data types (DWARF)
gdb_test "whatis b" "type = bool"
gdb_test "p sizeof(b)" " = 1"
gdb_test "print b" " = (false|0)"

gdb_test "whatis c" "type = char"
gdb_test "p sizeof(c)" " = 1"
gdb_test "print/d c" " = 1"
gdb_test "whatis c2" "type = char2"
gdb_test "p sizeof(c2)" " = 2"
gdb_test "print c2" " = \\{1, 2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis c3" "type = char3"
  gdb_test "p sizeof(c3)" " = 4"
  gdb_test "print c3" " = \\{1, 2, 3\\}"
}
gdb_test "whatis c4" "type = char4"
gdb_test "p sizeof(c4)" " = 4"
gdb_test "print c4" " = \\{1, 2, 3, 4\\}"
gdb_test "whatis c8" "type = char8"
gdb_test "p sizeof(c8)" " = 8"
gdb_test "print c8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
gdb_test "whatis c16" "type = char16"
gdb_test "p sizeof(c16)" " = 16"
gdb_test "print c16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"

gdb_test "whatis uc" "type = uchar"
gdb_test "p sizeof(uc)" " = 1"
gdb_test "print/d uc" " = 1"
gdb_test "whatis uc2" "type = uchar2"
gdb_test "p sizeof(uc2)" " = 2"
gdb_test "print uc2" " = \\{1, 2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis uc3" "type = uchar3"
  gdb_test "p sizeof(uc3)" " = 4"
  gdb_test "print uc3" " = \\{1, 2, 3\\}"
}
gdb_test "whatis uc4" "type = uchar4"
gdb_test "p sizeof(uc4)" " = 4"
gdb_test "print uc4" " = \\{1, 2, 3, 4\\}"
gdb_test "whatis uc8" "type = uchar8"
gdb_test "p sizeof(uc8)" " = 8"
gdb_test "print uc8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
gdb_test "whatis uc16" "type = uchar16"
gdb_test "p sizeof(uc16)" " = 16"
gdb_test "print uc16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"

gdb_test "whatis s" "type = short"
gdb_test "p sizeof(s)" " = 2"
gdb_test "print s" " = -1"
gdb_test "whatis s2" "type = short2"
gdb_test "p sizeof(s2)" " = 4"
gdb_test "print s2" " = \\{-1, -2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis s3" "type = short3"
  gdb_test "p sizeof(s3)" " = 8"
  gdb_test "print s3" " = \\{-1, -2, -3\\}"
}
gdb_test "whatis s4" "type = short4"
gdb_test "p sizeof(s4)" " = 8"
gdb_test "print s4" " = \\{-1, -2, -3, -4\\}"
gdb_test "whatis s8" "type = short8"
gdb_test "p sizeof(s8)" " = 16"
gdb_test "print s8" " = \\{-1, -2, -3, -4, -5, -6, -7, -8\\}"
gdb_test "whatis s16" "type = short16"
gdb_test "p sizeof(s16)" " = 32"
gdb_test "print s16" " = \\{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16\\}"

gdb_test "whatis us" "type = ushort"
gdb_test "p sizeof(us)" " = 2"
gdb_test "print us" " = 1"
gdb_test "whatis us2" "type = ushort2"
gdb_test "p sizeof(us2)" " = 4"
gdb_test "print us2" " = \\{1, 2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis us3" "type = ushort3"
  gdb_test "p sizeof(us3)" " = 8"
  gdb_test "print us3" " = \\{1, 2, 3\\}"
}
gdb_test "whatis us4" "type = ushort4"
gdb_test "p sizeof(us4)" " = 8"
gdb_test "print us4" " = \\{1, 2, 3, 4\\}"
gdb_test "whatis us8" "type = ushort8"
gdb_test "p sizeof(us8)" " = 16"
gdb_test "print us8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
gdb_test "whatis us16" "type = ushort16"
gdb_test "p sizeof(us16)" " = 32"
gdb_test "print us16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"

gdb_test "whatis i" "type = int"
gdb_test "p sizeof(i)" " = 4"
gdb_test "print i" " = -1"
gdb_test "whatis i2" "type = int2"
gdb_test "p sizeof(i2)" " = 8"
gdb_test "print i2" " = \\{-1, -2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis i3" "type = int3"
  gdb_test "p sizeof(i3)" " = 16"
  gdb_test "print i3" " = \\{-1, -2, -3\\}"
}
gdb_test "whatis i4" "type = int4"
gdb_test "p sizeof(i4)" " = 16"
gdb_test "print i4" " = \\{-1, -2, -3, -4\\}"
gdb_test "whatis i8" "type = int8"
gdb_test "p sizeof(i8)" " = 32"
gdb_test "print i8" " = \\{-1, -2, -3, -4, -5, -6, -7, -8\\}"
gdb_test "whatis i16" "type = int16"
gdb_test "p sizeof(i16)" " = 64"
gdb_test "print i16" " = \\{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16\\}"

gdb_test "whatis ui" "type = uint"
gdb_test "p sizeof(ui)" " = 4"
gdb_test "print ui" " = 1"
gdb_test "whatis ui2" "type = uint2"
gdb_test "p sizeof(ui2)" " = 8"
gdb_test "print ui2" " = \\{1, 2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis ui3" "type = uint3"
  gdb_test "p sizeof(ui3)" " = 16"
  gdb_test "print ui3" " = \\{1, 2, 3\\}"
}
gdb_test "whatis ui4" "type = uint4"
gdb_test "p sizeof(ui4)" " = 16"
gdb_test "print ui4" " = \\{1, 2, 3, 4\\}"
gdb_test "whatis ui8" "type = uint8"
gdb_test "p sizeof(ui8)" " = 32"
gdb_test "print ui8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
gdb_test "whatis ui16" "type = uint16"
gdb_test "p sizeof(ui16)" " = 64"
gdb_test "print ui16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"

gdb_test "whatis l" "type = long"
gdb_test "p sizeof(l)" " = 8"
gdb_test "print l" " = -1"
gdb_test "whatis l2" "type = long2"
gdb_test "p sizeof(l2)" " = 16"
gdb_test "print l2" " = \\{-1, -2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis l3" "type = long3"
  gdb_test "p sizeof(l3)" " = 32"
  gdb_test "print l3" " = \\{-1, -2, -3\\}"
}
gdb_test "whatis l4" "type = long4"
gdb_test "p sizeof(l4)" " = 32"
gdb_test "print l4" " = \\{-1, -2, -3, -4\\}"
gdb_test "whatis l8" "type = long8"
gdb_test "p sizeof(l8)" " = 64"
gdb_test "print l8" " = \\{-1, -2, -3, -4, -5, -6, -7, -8\\}"
gdb_test "whatis l16" "type = long16"
gdb_test "p sizeof(l16)" " = 128"
gdb_test "print l16" " = \\{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16\\}"

gdb_test "whatis ul" "type = ulong"
gdb_test "p sizeof(ul)" " = 8"
gdb_test "print ul" " = 1"
gdb_test "whatis ul2" "type = ulong2"
gdb_test "p sizeof(ul2)" " = 16"
gdb_test "print ul2" " = \\{1, 2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis ul3" "type = ulong3"
  gdb_test "p sizeof(ul3)" " = 32"
  gdb_test "print ul3" " = \\{1, 2, 3\\}"
}
gdb_test "whatis ul4" "type = ulong4"
gdb_test "p sizeof(ul4)" " = 32"
gdb_test "print ul4" " = \\{1, 2, 3, 4\\}"
gdb_test "whatis ul8" "type = ulong8"
gdb_test "p sizeof(ul8)" " = 64"
gdb_test "print ul8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
gdb_test "whatis ul16" "type = ulong16"
gdb_test "p sizeof(ul16)" " = 128"
gdb_test "print ul16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"

gdb_test "whatis ph" "type = half \\*"
gdb_test "whatis *ph" "type = half"
gdb_test "p sizeof(*ph)" " = 2"

if { ${have_cl_khr_fp16} } {
  gdb_test "whatis h" "type = half"
  gdb_test "p sizeof(h)" " = 2"
  gdb_test "print h" " = 1"
  gdb_test "whatis h2" "type = half2"
  gdb_test "p sizeof(h2)" " = 4"
  gdb_test "print h2" " = \\{1, 2\\}"
  if { ${opencl_version} >= 110 } {
    gdb_test "whatis h3" "type = half3"
    gdb_test "p sizeof(h3)" " = 8"
    gdb_test "print h3" " = \\{1, 2, 3\\}"
  }
  gdb_test "whatis h4" "type = half4"
  gdb_test "p sizeof(h4)" " = 8"
  gdb_test "print h4" " = \\{1, 2, 3, 4\\}"
  gdb_test "whatis h8" "type = half8"
  gdb_test "p sizeof(h8)" " = 16"
  gdb_test "print h8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
  gdb_test "whatis h16" "type = half16"
  gdb_test "p sizeof(h16)" " = 16"
  gdb_test "print h16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"
}

gdb_test "whatis f" "type = float"
gdb_test "p sizeof(f)" " = 4"
gdb_test "print f" " = 1"
gdb_test "whatis f2" "type = float2"
gdb_test "p sizeof(f2)" " = 8"
gdb_test "print f2" " = \\{1, 2\\}"
if { ${opencl_version} >= 110 } {
  gdb_test "whatis f3" "type = float3"
  gdb_test "p sizeof(f3)" " = 16"
  gdb_test "print f3" " = \\{1, 2, 3\\}"
}
gdb_test "whatis f4" "type = float4"
gdb_test "p sizeof(f4)" " = 16"
gdb_test "print f4" " = \\{1, 2, 3, 4\\}"
gdb_test "whatis f8" "type = float8"
gdb_test "p sizeof(f8)" " = 32"
gdb_test "print f8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
gdb_test "whatis f16" "type = float16"
gdb_test "p sizeof(f16)" " = 64"
gdb_test "print f16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"

if { ${have_cl_khr_fp64} } {
  gdb_test "whatis d" "type = double"
  gdb_test "p sizeof(d)" " = 8"
  gdb_test "print d" " = 1"
  gdb_test "whatis d2" "type = double2"
  gdb_test "p sizeof(d2)" " = 16"
  gdb_test "print d2" " = \\{1, 2\\}"
  if { ${opencl_version} >= 110 } {
    gdb_test "whatis d3" "type = double3"
    gdb_test "p sizeof(d3)" " = 32"
    gdb_test "print d3" " = \\{1, 2, 3\\}"
  }
  gdb_test "whatis d4" "type = double4"
  gdb_test "p sizeof(d4)" " = 32"
  gdb_test "print d4" " = \\{1, 2, 3, 4\\}"
  gdb_test "whatis d8" "type = double8"
  gdb_test "p sizeof(d8)" " = 64"
  gdb_test "print d8" " = \\{1, 2, 3, 4, 5, 6, 7, 8\\}"
  gdb_test "whatis d16" "type = double16"
  gdb_test "p sizeof(d16)" " = 128"
  gdb_test "print d16" " = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\}"
}

# Delete the OpenCL program source
remote_file target delete ${clprogram}
@


1.9
log
@ChangeLog:

	* opencl-lang.c (opencl_print_type): New function.
	(opencl_language_arch_info): Install it.

testsuite/ChangeLog:

	* gdb.opencl/convs_casts.exp: Always expect standard vector type names.
	* gdb.opencl/datatypes.exp: Likewise.
	* gdb.opencl/operators.exp: Likewise.
	* gdb.opencl/vec_comps.exp: Likewise.
@
text
@d1 1
a1 1
# Copyright 2010-2012 Free Software Foundation, Inc.
@


1.8
log
@2012-01-16  Pedro Alves  <palves@@redhat.com>

	Remove all calls to strace.
@
text
@d234 1
a234 1
gdb_test "whatis c2" "type = char(2| \\\[2\\\])"
d238 1
a238 1
  gdb_test "whatis c3" "type = char(3| \\\[3\\\])"
d242 1
a242 1
gdb_test "whatis c4" "type = char(4| \\\[4\\\])"
d245 1
a245 1
gdb_test "whatis c8" "type = char(8| \\\[8\\\])"
d248 1
a248 1
gdb_test "whatis c16" "type = char(16| \\\[16\\\])"
d252 1
a252 1
gdb_test "whatis uc" "type = (uchar|unsigned char)"
d255 1
a255 1
gdb_test "whatis uc2" "type = (uchar2|(uchar|unsigned char) \\\[2\\\])"
d259 1
a259 1
  gdb_test "whatis uc3" "type = (uchar3|(uchar|unsigned char) \\\[3\\\])"
d263 1
a263 1
gdb_test "whatis uc4" "type = (uchar4|(uchar|unsigned char) \\\[4\\\])"
d266 1
a266 1
gdb_test "whatis uc8" "type = (uchar8|(uchar|unsigned char) \\\[8\\\])"
d269 1
a269 1
gdb_test "whatis uc16" "type = (uchar16|(uchar|unsigned char) \\\[16\\\])"
d276 1
a276 1
gdb_test "whatis s2" "type = short(2| \\\[2\\\])"
d280 1
a280 1
  gdb_test "whatis s3" "type = short(3| \\\[3\\\])"
d284 1
a284 1
gdb_test "whatis s4" "type = short(4| \\\[4\\\])"
d287 1
a287 1
gdb_test "whatis s8" "type = short(8| \\\[8\\\])"
d290 1
a290 1
gdb_test "whatis s16" "type = short(16| \\\[16\\\])"
d294 1
a294 1
gdb_test "whatis us" "type = (ushort|unsigned short)"
d297 1
a297 1
gdb_test "whatis us2" "type = (ushort2|(ushort|unsigned short) \\\[2\\\])"
d301 1
a301 1
  gdb_test "whatis us3" "type = (ushort3|(ushort|unsigned short) \\\[3\\\])"
d305 1
a305 1
gdb_test "whatis us4" "type = (ushort4|(ushort|unsigned short) \\\[4\\\])"
d308 1
a308 1
gdb_test "whatis us8" "type = (ushort8|(ushort|unsigned short) \\\[8\\\])"
d311 1
a311 1
gdb_test "whatis us16" "type = (ushort16|(ushort|unsigned short) \\\[16\\\])"
d318 1
a318 1
gdb_test "whatis i2" "type = int(2| \\\[2\\\])"
d322 1
a322 1
  gdb_test "whatis i3" "type = int(3| \\\[3\\\])"
d326 1
a326 1
gdb_test "whatis i4" "type = int(4| \\\[4\\\])"
d329 1
a329 1
gdb_test "whatis i8" "type = int(8| \\\[8\\\])"
d332 1
a332 1
gdb_test "whatis i16" "type = int(16| \\\[16\\\])"
d336 1
a336 1
gdb_test "whatis ui" "type = (uint|unsigned int)"
d339 1
a339 1
gdb_test "whatis ui2" "type = (uint2|(uint|unsigned int) \\\[2\\\])"
d343 1
a343 1
  gdb_test "whatis ui3" "type = (uint3|(uint|unsigned int) \\\[3\\\])"
d347 1
a347 1
gdb_test "whatis ui4" "type = (uint4|(uint|unsigned int) \\\[4\\\])"
d350 1
a350 1
gdb_test "whatis ui8" "type = (uint8|(uint|unsigned int) \\\[8\\\])"
d353 1
a353 1
gdb_test "whatis ui16" "type = (uint16|(uint|unsigned int) \\\[16\\\])"
d360 1
a360 1
gdb_test "whatis l2" "type = long(2| \\\[2\\\])"
d364 1
a364 1
  gdb_test "whatis l3" "type = long(3| \\\[3\\\])"
d368 1
a368 1
gdb_test "whatis l4" "type = long(4| \\\[4\\\])"
d371 1
a371 1
gdb_test "whatis l8" "type = long(8| \\\[8\\\])"
d374 1
a374 1
gdb_test "whatis l16" "type = long(16| \\\[16\\\])"
d378 1
a378 1
gdb_test "whatis ul" "type = (ulong|unsigned long)"
d381 1
a381 1
gdb_test "whatis ul2" "type = (ulong2|(ulong|unsigned long) \\\[2\\\])"
d385 1
a385 1
  gdb_test "whatis ul3" "type = (ulong3|(ulong|unsigned long) \\\[3\\\])"
d389 1
a389 1
gdb_test "whatis ul4" "type = (ulong4|(ulong|unsigned long) \\\[4\\\])"
d392 1
a392 1
gdb_test "whatis ul8" "type = (ulong8|(ulong|unsigned long) \\\[8\\\])"
d395 1
a395 1
gdb_test "whatis ul16" "type = (ulong16|(ulong|unsigned long) \\\[16\\\])"
d407 1
a407 1
  gdb_test "whatis h2" "type = half(2| \\\[2\\\])"
d411 1
a411 1
    gdb_test "whatis h3" "type = half(3| \\\[3\\\])"
d415 1
a415 1
  gdb_test "whatis h4" "type = half(4| \\\[4\\\])"
d418 1
a418 1
  gdb_test "whatis h8" "type = half(8| \\\[8\\\])"
d421 1
a421 1
  gdb_test "whatis h16" "type = half(16| \\\[16\\\])"
d429 1
a429 1
gdb_test "whatis f2" "type = float(2| \\\[2\\\])"
d433 1
a433 1
  gdb_test "whatis f3" "type = float(3| \\\[3\\\])"
d437 1
a437 1
gdb_test "whatis f4" "type = float(4| \\\[4\\\])"
d440 1
a440 1
gdb_test "whatis f8" "type = float(8| \\\[8\\\])"
d443 1
a443 1
gdb_test "whatis f16" "type = float(16| \\\[16\\\])"
d451 1
a451 1
  gdb_test "whatis d2" "type = double(2| \\\[2\\\])"
d455 1
a455 1
    gdb_test "whatis d3" "type = double(3| \\\[3\\\])"
d459 1
a459 1
  gdb_test "whatis d4" "type = double(4| \\\[4\\\])"
d462 1
a462 1
  gdb_test "whatis d8" "type = double(8| \\\[8\\\])"
d465 1
a465 1
  gdb_test "whatis d16" "type = double(16| \\\[16\\\])"
@


1.7
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a19 4
if $tracelevel {
    strace $tracelevel
}

@


1.6
log
@gdb/testsuite/ChangeLog

2011-02-16  Ken Werner  <ken.werner@@de.ibm.com>

        * gdb.opencl/datatypes.exp: Allow "false" when printing the content of
        a bool variable. Expect correct OpenCL names for vector types. Use the
        uc3 variable name instead of referring to the uchar3 built-in type.
        Escape the asterisk at the half pointer test.
@
text
@d1 1
a1 1
# Copyright 2010, 2011 Free Software Foundation, Inc.
@


1.6.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2010-2012 Free Software Foundation, Inc.
@


1.5
log
@gdb/ChangeLog

2011-02-15  Ken Werner  <ken.werner@@de.ibm.com>

	* opencl-lang.c (build_opencl_types): Set the size of the built-in
	bool data type to a size of one byte.

gdb/testsuite/ChangeLog

2011-02-15  Ken Werner  <ken.werner@@de.ibm.com>

	* gdb.opencl/datatypes.exp: Expect the size of a bool to be one byte.
@
text
@d233 1
a233 1
gdb_test "print b" " = 0"
d238 1
a238 1
gdb_test "whatis c2" "type = char \\\[2\\\]"
d242 1
a242 1
  gdb_test "whatis c3" "type = char \\\[3\\\]"
d246 1
a246 1
gdb_test "whatis c4" "type = char \\\[4\\\]"
d249 1
a249 1
gdb_test "whatis c8" "type = char \\\[8\\\]"
d252 1
a252 1
gdb_test "whatis c16" "type = char \\\[16\\\]"
d259 1
a259 1
gdb_test "whatis uc2" "type = (uchar|unsigned char) \\\[2\\\]"
d263 2
a264 2
  gdb_test "whatis uc3" "type = (uchar|unsigned char) \\\[3\\\]"
  gdb_test "p sizeof(uchar3)" " = 4"
d267 1
a267 1
gdb_test "whatis uc4" "type = (uchar|unsigned char) \\\[4\\\]"
d270 1
a270 1
gdb_test "whatis uc8" "type = (uchar|unsigned char) \\\[8\\\]"
d273 1
a273 1
gdb_test "whatis uc16" "type = (uchar|unsigned char) \\\[16\\\]"
d280 1
a280 1
gdb_test "whatis s2" "type = short \\\[2\\\]"
d284 1
a284 1
  gdb_test "whatis s3" "type = short \\\[3\\\]"
d288 1
a288 1
gdb_test "whatis s4" "type = short \\\[4\\\]"
d291 1
a291 1
gdb_test "whatis s8" "type = short \\\[8\\\]"
d294 1
a294 1
gdb_test "whatis s16" "type = short \\\[16\\\]"
d301 1
a301 1
gdb_test "whatis us2" "type = (ushort|unsigned short) \\\[2\\\]"
d305 1
a305 1
  gdb_test "whatis us3" "type = (ushort|unsigned short) \\\[3\\\]"
d309 1
a309 1
gdb_test "whatis us4" "type = (ushort|unsigned short) \\\[4\\\]"
d312 1
a312 1
gdb_test "whatis us8" "type = (ushort|unsigned short) \\\[8\\\]"
d315 1
a315 1
gdb_test "whatis us16" "type = (ushort|unsigned short) \\\[16\\\]"
d322 1
a322 1
gdb_test "whatis i2" "type = int \\\[2\\\]"
d326 1
a326 1
  gdb_test "whatis i3" "type = int \\\[3\\\]"
d330 1
a330 1
gdb_test "whatis i4" "type = int \\\[4\\\]"
d333 1
a333 1
gdb_test "whatis i8" "type = int \\\[8\\\]"
d336 1
a336 1
gdb_test "whatis i16" "type = int \\\[16\\\]"
d343 1
a343 1
gdb_test "whatis ui2" "type = (uint|unsigned int) \\\[2\\\]"
d347 1
a347 1
  gdb_test "whatis ui3" "type = (uint|unsigned int) \\\[3\\\]"
d351 1
a351 1
gdb_test "whatis ui4" "type = (uint|unsigned int) \\\[4\\\]"
d354 1
a354 1
gdb_test "whatis ui8" "type = (uint|unsigned int) \\\[8\\\]"
d357 1
a357 1
gdb_test "whatis ui16" "type = (uint|unsigned int) \\\[16\\\]"
d364 1
a364 1
gdb_test "whatis l2" "type = long \\\[2\\\]"
d368 1
a368 1
  gdb_test "whatis l3" "type = long \\\[3\\\]"
d372 1
a372 1
gdb_test "whatis l4" "type = long \\\[4\\\]"
d375 1
a375 1
gdb_test "whatis l8" "type = long \\\[8\\\]"
d378 1
a378 1
gdb_test "whatis l16" "type = long \\\[16\\\]"
d385 1
a385 1
gdb_test "whatis ul2" "type = (ulong|unsigned long) \\\[2\\\]"
d389 1
a389 1
  gdb_test "whatis ul3" "type = (ulong|unsigned long) \\\[3\\\]"
d393 1
a393 1
gdb_test "whatis ul4" "type = (ulong|unsigned long) \\\[4\\\]"
d396 1
a396 1
gdb_test "whatis ul8" "type = (ulong|unsigned long) \\\[8\\\]"
d399 1
a399 1
gdb_test "whatis ul16" "type = (ulong|unsigned long) \\\[16\\\]"
d403 1
a403 1
gdb_test "whatis ph" "type = half *"
d411 1
a411 1
  gdb_test "whatis h2" "type = half \\\[2\\\]"
d415 1
a415 1
    gdb_test "whatis h3" "type = half \\\[3\\\]"
d419 1
a419 1
  gdb_test "whatis h4" "type = half \\\[4\\\]"
d422 1
a422 1
  gdb_test "whatis h8" "type = half \\\[8\\\]"
d425 1
a425 1
  gdb_test "whatis h16" "type = half \\\[16\\\]"
d433 1
a433 1
gdb_test "whatis f2" "type = float \\\[2\\\]"
d437 1
a437 1
  gdb_test "whatis f3" "type = float \\\[3\\\]"
d441 1
a441 1
gdb_test "whatis f4" "type = float \\\[4\\\]"
d444 1
a444 1
gdb_test "whatis f8" "type = float \\\[8\\\]"
d447 1
a447 1
gdb_test "whatis f16" "type = float \\\[16\\\]"
d455 1
a455 1
  gdb_test "whatis d2" "type = double \\\[2\\\]"
d459 1
a459 1
    gdb_test "whatis d3" "type = double \\\[3\\\]"
d463 1
a463 1
  gdb_test "whatis d4" "type = double \\\[4\\\]"
d466 1
a466 1
  gdb_test "whatis d8" "type = double \\\[8\\\]"
d469 1
a469 1
  gdb_test "whatis d16" "type = double \\\[16\\\]"
@


1.4
log
@	* gdb.opencl/convs_casts.exp: Use tbreak instead of break to
	proceed to initial kernel entry point.
	* gdb.opencl/datatypes.exp: Likewise.
	* gdb.opencl/operators.exp: Likewise.
	* gdb.opencl/vec_comps.exp: Likewise.
@
text
@d47 1
a47 1
gdb_test "p sizeof(bool)" " = 4"
d232 1
a232 1
gdb_test "p sizeof(b)" " = 4"
@


1.3
log
@gdb/testsuite/ChangeLog

2011-01-25  Ken Werner  <ken.werner@@de.ibm.com>

        * gdb.opencl/convs_casts.cl: Move program scope variables into the
        OpenCL kernel function. Add a comment as marker. Add address space
        qualifiers for the remaining program scope variables.
        * gdb.opencl/datatypes.cl: Likewise.
        * gdb.opencl/operators.cl: Likewise.
        * gdb.opencl/vec_comps.cl: Likewise.
        * gdb.opencl/convs_casts.exp: Replace gdb_test_multiple by gdb_test.
        Add breakpoint at the marker comment.
        * gdb.opencl/datatypes.exp: Likewise.
        * gdb.opencl/operators.exp: Likewise.
        * gdb.opencl/vec_comps.exp: Likewise.
@
text
@d209 1
a209 1
gdb_test "break testkernel" \
d216 1
a216 1
gdb_test "" ".*Breakpoint.*1.*testkernel.*" "run"
@


1.2
log
@run copyright.sh for 2011.
@
text
@d209 5
a213 5
gdb_test_multiple "break testkernel" "set pending breakpoint" {
     -re ".*Function \"testkernel\" not defined.*Make breakpoint pending.*y or \\\[n\\\]. $" {
            gdb_test "y" "Breakpoint.*testkernel.*pending." "set pending breakpoint (without symbols)"
     }
}
d218 4
@


1.1
log
@gdb:
	* NEWS: Mention OpenCL C language support.
	* Makefile.in (SFILES): Add opencl-lang.c.
	(COMMON_OBS): Add opencl-lang.o.
	* opencl-lang.c: New File
	* defs.h (enum language): Add language_opencl.
	* dwarf2read.c (read_file_scope): Handle DW_AT_producer for the
	IBM XL C OpenCL compiler.
	* c-lang.h: Include "parser-defs.h".
	(evaluate_subexp_c): Declare.
	* c-lang.c (evaluate_subexp_c): Remove the static qualifier.
	(c_op_print_tab): Add declaration.
	* eval.c (binop_promote): Handle language_opencl.
	* c-exp.y: Lookup the primitive types instead of referring to the
	builtins.

gdb/testsuite:
	* Makefile.in (ALL_SUBDIRS): Add gdb.opencl.
	* configure.ac (AC_OUTPUT): Add gdb.opencl/Makefile.
	* configure: Regenerate.
	* gdb.opencl/Makefile.in: New File.
	* gdb.opencl/datatypes.exp: Likewise.
	* gdb.opencl/datatypes.cl: Likewise.
	* gdb.opencl/operators.exp: Likewise.
	* gdb.opencl/operators.cl: Likewise.
	* gdb.opencl/vec_comps.exp: Likewise.
	* gdb.opencl/vec_comps.cl: Likewise.
	* gdb.opencl/convs_casts.exp: Likewise.
	* gdb.opencl/convs_casts.cl: Likewise.
	* lib/opencl.exp: Likewise.
	* lib/opencl_hostapp.c: Likewise.
	* lib/opencl_kernel.cl: Likewise.
	* lib/cl_util.c: Likewise.
	* lib/cl_util.c: Likewise.
	* gdb.base/default.exp (set language): Add "opencl" to the list of
	languages.

gdb/doc:
	* gdb.texinfo: (Summary) Add mention about OpenCL C language support.
	(OpenCL C): New node.
@
text
@d1 1
a1 1
# Copyright 2010 Free Software Foundation, Inc.
@

