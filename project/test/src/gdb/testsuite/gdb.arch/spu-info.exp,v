head	1.11;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.11
	gdb_7_6-2013-04-26-release:1.11
	gdb_7_6-branch:1.11.0.2
	gdb_7_6-2013-03-12-branchpoint:1.11
	gdb_7_5_1-2012-11-29-release:1.10
	gdb_7_5-2012-08-17-release:1.10
	gdb_7_5-branch:1.10.0.2
	gdb_7_5-2012-07-18-branchpoint:1.10
	gdb_7_4_1-2012-04-26-release:1.9.4.1
	gdb_7_4-2012-01-24-release:1.9.4.1
	gdb_7_4-branch:1.9.0.4
	gdb_7_4-2011-12-13-branchpoint:1.9
	gdb_7_3_1-2011-09-04-release:1.9
	gdb_7_3-2011-07-26-release:1.9
	gdb_7_3-branch:1.9.0.2
	gdb_7_3-2011-04-01-branchpoint:1.9
	gdb_7_2-2010-09-02-release:1.8
	gdb_7_2-branch:1.8.0.2
	gdb_7_2-2010-07-07-branchpoint:1.8
	gdb_7_1-2010-03-18-release:1.7
	gdb_7_1-branch:1.7.0.2
	gdb_7_1-2010-02-18-branchpoint:1.7
	gdb_7_0_1-2009-12-22-release:1.6
	gdb_7_0-2009-10-06-release:1.6
	gdb_7_0-branch:1.6.0.4
	gdb_7_0-2009-09-16-branchpoint:1.6
	arc-sim-20090309:1.3
	msnyder-checkpoint-072509-branch:1.6.0.2
	msnyder-checkpoint-072509-branchpoint:1.6
	arc-insight_6_8-branch:1.3.0.6
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.4
	insight_6_8-branchpoint:1.3
	reverse-20081226-branch:1.5.0.6
	reverse-20081226-branchpoint:1.5
	multiprocess-20081120-branch:1.5.0.4
	multiprocess-20081120-branchpoint:1.5
	reverse-20080930-branch:1.5.0.2
	reverse-20080930-branchpoint:1.5
	reverse-20080717-branch:1.4.0.4
	reverse-20080717-branchpoint:1.4
	msnyder-reverse-20080609-branch:1.4.0.2
	msnyder-reverse-20080609-branchpoint:1.4
	gdb_6_8-2008-03-27-release:1.3
	gdb_6_8-branch:1.3.0.2
	gdb_6_8-2008-02-26-branchpoint:1.3
	gdb_6_7_1-2007-10-29-release:1.2
	gdb_6_7-2007-10-10-release:1.2
	gdb_6_7-branch:1.2.0.2
	gdb_6_7-2007-09-07-branchpoint:1.2;
locks; strict;
comment	@# @;


1.11
date	2013.01.01.06.33.24;	author brobecke;	state Exp;
branches;
next	1.10;

1.10
date	2012.01.04.08.17.45;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.01.15.33.40;	author brobecke;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2010.05.05.18.06.57;	author brobecke;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.01.07.32.00;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.03.05.58.03;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.07.21.25.28;	author uweigand;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.31.08.34.42;	author deuling;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.01.22.53.18;	author drow;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.23.18.14.16;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.12.14.35.26;	author uweigand;	state Exp;
branches;
next	;

1.9.4.1
date	2012.01.06.04.43.59;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2007-2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This file is part of the gdb testsuite.
#
# Contributed by Markus Deuling <deuling@@de.ibm.com>.
# Tests for 'info spu' commands.


if { ![istarget "spu-*-elf"] } then {
  verbose "Skipping SPU-only testcase"
  return
}

set testfile "spu-info"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
set sources ${srcdir}/${subdir}/${srcfile}

if { [gdb_compile $sources ${binfile} executable { debug }] != "" } {
  return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# Continue to MARKER
proc c_to { marker } {
  global srcfile
  set line [gdb_get_line_number $marker]
  gdb_test "break $line" \
	   "Breakpoint.*at.*file.*$srcfile.*line $line.*" \
	   "break $line"
  gdb_test "continue" \
	   "Continuing.*Breakpoint.*at.*$srcfile.*$line.*" \
	   "continue to $line"
}



if ![runto_main] then {
  fail "Can't run to main"
  return 0
}

# Check the help.
gdb_test "info spu" \
	 ".*info spu.* must be followed by the name of an SPU facility.*" \
	 "info spu"
gdb_test "help info spu" \
	 "Various SPU specific commands.*List of info spu subcommands.*" \
	 "help info spu"

gdb_test "help info spu dma" \
	 "Display MFC DMA status." \
	 "help info spu dma"
gdb_test "help info spu event" \
	 "Display SPU event facility status." \
	 "help info spu event"
gdb_test "help info spu mailbox" \
	 "Display SPU mailbox facility status." \
	 "help info spu mailbox"
gdb_test "help info spu proxydma" \
	 "Display MFC Proxy-DMA status." \
	 "help info spu proxydma"
gdb_test "help info spu signal" \
	 "Display SPU signal notification facility status." \
	 "help info spu signal"


# architecture should be spu:256K.
gdb_test "show architecture" \
	 "The target architecture is set automatically.*currently spu:256K.*" \
	 "architecture = spu256K"

# 'info spu event'.
gdb_test "info spu event" \
	 "Event Status.*Event Mask.*" \
	 "info spu event"

# 'info spu signal'.
gdb_test "info spu signal" \
	 "Signal 1 not pending.*\(Type.*\).*Signal 2 not pending.*\(Type.*\).*" \
	 "info spu signal"

# 'info spu mailbox'.
gdb_test "info spu mailbox" \
	 "SPU Outbound Mailbox.*SPU Outbound Interrupt Mailbox.*" \
	 "info spu mailbox"

# 'info spu dma'.
gdb_test "info spu dma" \
	 "Tag-Group Status.*Tag-Group Mask.*Stall-and-Notify .*Atomic Cmd Status.*" \
	 "info spu dma"

# 'info spu proxydma'.
gdb_test "info spu proxydma" \
	 "Tag-Group Status.*Tag-Group Mask.*" \
	  "info spu proxydma"

# Event tests.
c_to "Marker Event"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000000.*" \
	"empty event status"

# MFC_MULTI_SRC_SYNC_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00001000.*" \
	"event mask 0x1000"
# MFC_PRIV_ATTN_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000800.*" \
	"event mask 0x0800"
# MFC_LLR_LOST_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000400.*" \
	"event mask 0x0400"
# MFC_SIGNAL_NOTIFY_1_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000200.*" \
	"event mask 0x0200"
# MFC_SIGNAL_NOTIFY_2_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000100.*" \
	"event mask 0x0100"
# MFC_OUT_MBOX_AVAILABLE_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000080.*" \
	"event mask 0x0080"
# MFC_OUT_INTR_MBOX_AVAILABLE_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000040.*" \
	"event mask 0x0040"
# MFC_DECREMENTER_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000020.*" \
	"event mask 0x0020"
# MFC_IN_MBOX_AVAILABLE_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000010.*" \
	"event mask 0x0010"
# MFC_COMMAND_QUEUE_AVAILABLE_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000008.*" \
	"event mask 0x0008"
# MFC_LIST_STALL_NOTIFY_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000002.*" \
	"event mask 0x0002"
# MFC_TAG_STATUS_UPDATE_EVENT.
gdb_test "next" "" "next"
gdb_test "info spu event" \
	"Event Status 0x00000000.*Event Mask   0x00000001.*" \
	"event mask 0x0001"


# DMA tests.
# 'info spu dma' should be empty.
c_to "Marker DMA"
gdb_test "info spu dma" \
	 "Tag-Group Status.*0x00000000.*Tag-Group Mask.*0x00000000.*Stall-and-Notify.*0x00000000.*Atomic Cmd Status.*0x00000000\[\r\n\]+" \
	 "info spu dma (empty)"

# 'info spu dma' should be filled with some data.
c_to "Marker DMAWait"
gdb_test "next" "" "next"
gdb_test "info spu dma" \
	 "Tag-Group Status.*0x00000000.*Tag-Group Mask.*0x00000020.*Stall-and-Notify.*0x00000000.*Atomic Cmd Status.*0x00000000.*Opcode.*Tag.*TId.*RId.*EA.*LSA.*Size.*LstAddr.*LstSize.*E.*get.*5.*0.*0.*0x00080\[ \r\n\]+" \
	 "info spu dma (non-empty)"
gdb_test "finish" "" "finish"

# Mailbox Test
# 'info spu mailbox' should be empty.
c_to "Marker Mbox"
set msg "info spu mailbox"
gdb_test_multiple "info spu mailbox" $msg {
    -re "SPU Outbound Mailbox.*0x00000000.*SPU Outbound Interrupt Mailbox.*0x00000000.*$gdb_prompt $" {
      pass $msg
    }
    -re "SPU Outbound Mailbox.*0x.*SPU Outbound Interrupt Mailbox.*0x.*$gdb_prompt $" {
      # Older kernels had a bug that caused them to return arbitrary values
      # when attempting to read from an empty mailbox via spufs.
      xfail $msg
    }
}

# 'info spu mailbox' should now contain data.
c_to "Marker MboxEnd"
gdb_test "info spu mailbox" \
	 "SPU Outbound Mailbox.*0x12345678.*SPU Outbound Interrupt Mailbox.*0x12345678.*" \
	 "info spu mailbox"

# Signal Test
# 'info spu signal'.
c_to "Marker Signal"
gdb_test "info spu signal" \
	 "Signal 1 not pending.*\(Type.*\).*Signal 2 not pending.*\(Type.*\).*" \
	 "info spu signal"

# 'info spu signal' with signal1 pending.
c_to "Marker Signal1"
gdb_test "info spu signal" \
	 "Signal 1 control word 0x801c0800.*Signal 2 not pending.*\(Type.*\).*" \
	 "info spu signal"

# 'info spu signal' with signal1 and signal2 pending.
c_to "Marker Signal2"
gdb_test "info spu signal" \
	 "Signal 1 control word 0x801c0800.*Signal 2 control word 0x801c0800.*" \
	 "info spu signal"

# Read signal1. Only signal2 is pending.
c_to "Marker SignalRead"
gdb_test "info spu signal" \
	 "Signal 1 not pending.*Signal 2 control word 0x801c0800.*" \
	 "info spu signal"


gdb_exit

return 0
@


1.10
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2007-2012 Free Software Foundation, Inc.
@


1.9
log
@run copyright.sh for 2011.
@
text
@d1 1
a1 1
# Copyright 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.9.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2007-2012 Free Software Foundation, Inc.
@


1.8
log
@Do not set prms_id/bug_id anymore.

2010-05-05  Joel Brobecker  <brobecker@@adacore.com>

	Remove the use of prms_id and bug_id throughout the testsuite.
@
text
@d1 1
a1 1
# Copyright 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.7
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@a20 2
set prms_id 0
set bug_id 0
@


1.6
log
@        Updated copyright notices for most files.
@
text
@d1 1
a1 1
# Copyright 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.5
log
@ChangeLog:

	* spu-tdep.c (info_spu_dma_cmdlist): Only show entries with
	the valid bit set.  Ensure display order respects partial
	order defined by dependency bits.

testsuite/ChangeLog:

	* gdb.arch/spu-info.exp: Updated for "info spu dma" changes.
@
text
@d1 1
a1 1
# Copyright 2007, 2008 Free Software Foundation, Inc.
@


1.4
log
@
2008-03-31  Markus Deuling  <deuling@@de.ibm.com>
	    Ulrich Weigand  <Ulrich.Weigand@@de.ibm.com>

	* gdb.arch/spu-info.exp (info spu mailbox): Check for correct initial
	value.  Add xfail for older kernels.
@
text
@d109 1
a109 1
	 "Tag-Group Status.*Tag-Group Mask.*Stall-and-Notify .*Atomic Cmd Status.*Opcode.*Tag.*TId.*RId.*EA.*LSA.*Size.*LstAddr.*LstSize.*E.*" \
d114 1
a114 1
	 "Tag-Group Status.*Tag-Group Mask.*Opcode.*Tag.*TId.*RId.*EA.*LSA.*Size.*LstAddr.*LstSize.*E.*" \
d189 1
a189 1
	 "Tag-Group Status.*0x00000000.*Tag-Group Mask.*0x00000000.*Stall-and-Notify.*0x00000000.*Atomic Cmd Status.*0x00000000.*Opcode.*Tag.*TId.*RId.*EA.*LSA.*Size.*LstAddr.*LstSize.*E.*0.*0.*0.*0.*0x00000 0x00000.*" \
d196 1
a196 1
	 "Tag-Group Status.*0x00000000.*Tag-Group Mask.*0x00000020.*Stall-and-Notify.*0x00000000.*Atomic Cmd Status.*0x00000000.*Opcode.*Tag.*TId.*RId.*EA.*LSA.*Size.*LstAddr.*LstSize.*E.*getl.*putllc.*get.*mfcsync.*get.*0.*0.*0.*0.*0x00000 0x00000.*" \
@


1.3
log
@	Updated copyright notices for most files.
@
text
@d203 11
a213 3
gdb_test "info spu mailbox" \
	 "SPU Outbound Mailbox.*0xc0000000.*SPU Outbound Interrupt Mailbox.*0xc0000000.*" \
	 "info spu mailbox"
@


1.2
log
@        Switch the license of all .exp files to GPLv3.
        Switch the license of all .f and .f90 files to GPLv3.
        Switch the license of all .s and .S files to GPLv3.
@
text
@d1 1
a1 1
# Copyright 2007 Free Software Foundation, Inc.
@


1.1
log
@
	* target.h (enum target_object): Add TARGET_OBJECT_SPU.
	* spu-linux-nat.c (spu_xfer_partial): Handle TARGET_OBJECT_SPU.

	* spu-tdep.h (SPU_NUM_PSEUDO_REGS): Add 5 pseudo registers.
	(enum spu_regnum): Add SPU_FPSCR_REGNUM, SPU_SRR0_REGNUM,
	SPU_LSLR_REGNUM, SPU_DECR_REGNUM, SPU_DECR_STATUS_REGNUM.
	* spu-tdep.c (infospucmdlist): New variable.
	(spu_register_name): Handle additional pseudo registers.
	(spu_register_type): Likewise.
	(spu_pseudo_register_read): Likewise.
	(spu_pseudo_register_write): Likewise.
	(spu_pseudo_register_read_spu): New function.
	(spu_pseudo_register_write_spu): Likewise.
	(info_spu_event_command): New function.
	(info_spu_signal_command): Likewise.
	(info_spu_mailbox_list): Likewise.
	(info_spu_mailbox_command): Likewise.
	(spu_mfc_get_bitfield): Likewise.
	(info_spu_dma_cmdlist): Likewise.
	(info_spu_dma_command): Likewise.
	(info_spu_proxydma_command): Likewise.
	(info_spu_command): Likewise.
	(_initialize_spu_tdep): Install "info spu" commands.

testsuite/ChangeLog:

	* gdb.arch/spu-info.exp: New testcase.
	* gdb.arch/spu-info.c: New file.

doc/ChangeLog:

	* gdb.texinfo (Architectures): Add new SPU section to document
	Cell Broadband Engine SPU architecture specific commands.
@
text
@d5 1
a5 1
# the Free Software Foundation; either version 2 of the License, or
d14 1
a14 3
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.  
@

