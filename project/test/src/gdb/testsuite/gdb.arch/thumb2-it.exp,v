head	1.6;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.6
	gdb_7_6-2013-04-26-release:1.6
	gdb_7_6-branch:1.6.0.2
	gdb_7_6-2013-03-12-branchpoint:1.6
	gdb_7_5_1-2012-11-29-release:1.5
	gdb_7_5-2012-08-17-release:1.5
	gdb_7_5-branch:1.5.0.2
	gdb_7_5-2012-07-18-branchpoint:1.5
	gdb_7_4_1-2012-04-26-release:1.4.4.1
	gdb_7_4-2012-01-24-release:1.4.4.1
	gdb_7_4-branch:1.4.0.4
	gdb_7_4-2011-12-13-branchpoint:1.4
	gdb_7_3_1-2011-09-04-release:1.4
	gdb_7_3-2011-07-26-release:1.4
	gdb_7_3-branch:1.4.0.2
	gdb_7_3-2011-04-01-branchpoint:1.4
	gdb_7_2-2010-09-02-release:1.3
	gdb_7_2-branch:1.3.0.4
	gdb_7_2-2010-07-07-branchpoint:1.3
	gdb_7_1-2010-03-18-release:1.3
	gdb_7_1-branch:1.3.0.2
	gdb_7_1-2010-02-18-branchpoint:1.3;
locks; strict;
comment	@# @;


1.6
date	2013.01.01.06.33.24;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.04.08.17.45;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.01.15.33.40;	author brobecke;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2010.02.16.21.20.14;	author drow;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.01.16.16.30;	author drow;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.01.16.13.17;	author drow;	state Exp;
branches;
next	;

1.4.4.1
date	2012.01.06.04.43.59;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2010-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test single stepping over Thumb-2 IT blocks.

if {![istarget arm*-*eabi*]} then {
    verbose "Skipping Thumb-2 tests."
    return
}

set testfile "thumb2-it"
set srcfile ${testfile}.S
set binfile ${objdir}/${subdir}/${testfile}

if { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable debug] != "" } {
    untested thumb2-it.exp
    return -1
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if ![runto_main] then {
    untested thumb2-it.exp
    return -1
}

# Make sure that the compiler options allow Thumb-2.
gdb_test_multiple "list" "list main" {
    -re ".*@@ No Thumb-2.*$gdb_prompt $" {
	pass "list main"
	untested thumb2-it.exp
	return -1
    }
    -re ".*@@ Thumb-2 OK.*$gdb_prompt $" {
	pass "list main"
    }
}

proc test_it_block { func } {
    global gdb_prompt
    global software_step

    if { ! [gdb_breakpoint "*${func}"] } {
	unresolved "$func, IT block tests"
	return
    }

    gdb_test "call ${func}()" "Breakpoint.*@@ Setup.*" "$func, call"

    set expected 0
    set reached 0
    set steps 0
    set ok 1
    while { $ok } {
	set ok 0
	set msg "$func, stepi $steps"
	gdb_test_multiple "stepi" "$msg" {
	    -re ".*@@ Setup.*$gdb_prompt $" {
		pass "$msg"
		set ok 1
	    }
	    -re ".*@@ IT instruction, Expected == (\[0-9\]*)\r\n$gdb_prompt $" {
		set expected $expect_out(1,string)
		pass "$msg"
		set ok 1
	    }
	    -re ".*@@ Reached.*$gdb_prompt $" {
		incr reached
		pass "$msg"
		set ok 1
		if { [regexp {@@ Reached, Set ([^\r\n]*)\r\n} $expect_out(0,string) dummy change] } {
		    gdb_test "set $change" "" "$func, set $change"
		}
	    }
	    -re ".*@@ Not reached.*$gdb_prompt $" {
		# An instruction in an IT block whose predicate is false when
		# we reach it.  If using software single step, we should not
		# stop here.
		if { $software_step } {
		    fail "$msg"
		} else {
		    pass "$msg"
		    set ok 1
		}
	    }
	    -re ".*@@ Never reached.*$gdb_prompt $" {
		# An instruction that should be branched over.
		fail "$msg"
	    }
	    -re ".*@@ Done.*$gdb_prompt $" {
		pass "$msg"
		if { $reached == $expected } {
		    pass "$func, correct instructions reached"
		} else {
		    fail "$func, correct instructions reached"
		}
		if { [regexp {@@ Done, Check ([^\r\n]*)\r\n} $expect_out(0,string) dummy check] } {
		    gdb_test "print $check" ".* = 1" "$func, $check"
		}
	    }
	}
	if { ! $ok } {
	    break
	}
	incr steps
	continue
    }

    gdb_test "continue" "" "$func, continue"
    return
}

proc test_it_break { ndx } {
    global software_step

    set line [gdb_get_line_number "@@ Break ${ndx}"]

    if { ! [gdb_breakpoint "${line}"] } {
	unresolved "continue to breakpoint: test ${ndx}"
	return
    }

    if { $software_step } {
	gdb_continue_to_breakpoint "test ${ndx}" ".*@@ Location ${ndx}.*"
    } else {
	gdb_continue_to_breakpoint "test ${ndx}" ".*@@ Break ${ndx}.*"
    }
}

# If we are using software single-stepping in GDB, then GDB will not
# stop at conditional instructions with a false predicate during stepi.
# If we are using a simulator or debug interface with hardware single
# step, then GDB will stop at such instructions.
if { [istarget arm*-linux*] } {
    set software_step 1
} else {
    set software_step 0
}

for { set i 1 } { $i <= 8 } { incr i } {
    test_it_block it_${i}
}

gdb_breakpoint "*it_breakpoints"
gdb_test "call it_breakpoints()" "Breakpoint.*"
for { set i 1 } { $i <= 7 } { incr i } {
    test_it_break ${i}
}
@


1.5
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2010-2012 Free Software Foundation, Inc.
@


1.4
log
@run copyright.sh for 2011.
@
text
@d1 1
a1 1
# Copyright 2010, 2011 Free Software Foundation, Inc.
@


1.4.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright 2010-2012 Free Software Foundation, Inc.
@


1.3
log
@	gdb/testsuite/
	* gdb.arch/thumb2-it.exp (test_it_break): Handle hardware
	single-stepping.
@
text
@d1 1
a1 1
# Copyright 2010 Free Software Foundation, Inc.
@


1.2
log
@	* arm-tdep.c (arm_find_mapping_symbol): New function, from
	arm_pc_is_thumb.
	(arm_pc_is_thumb): Use arm_find_mapping_symbol.
	(extend_buffer_earlier): New function.
	(MAX_IT_BLOCK_PREFIX, IT_SCAN_THRESHOLD): New constants.
	(arm_adjust_breakpoint_address): New function.
	(arm_gdbarch_init): Register arm_adjust_breakpoint_address.

	testsuite/
	* gdb.arch/thumb2-it.S (it_breakpoints): New function.
	* gdb.arch/thumb2-it.exp (test_it_break): New function.
	(Top level): Call it.
@
text
@d129 2
d138 5
a142 1
    gdb_continue_to_breakpoint "test ${ndx}" ".*@@ Location ${ndx}.*"
@


1.1
log
@	* arm-linux-tdep.c (arm_linux_thumb2_be_breakpoint)
	(arm_linux_thumb2_le_breakpoint): New constants.
	(arm_linux_init_abi): Set thumb2_breakpoint and
	thumb2_breakpoint_size.
	* arm-tdep.c (thumb_insn_size, thumb_advance_itstate): New functions.
	(thumb_get_next_pc): Add a comment.  Rename IT to ITSTATE.
	Implement support for single stepping through IT blocks if
	a 32-bit Thumb breakpoint instruction is available.
	(arm_breakpoint_from_pc): If a 32-bit Thumb breakpoint instruction
	is available, use it when needed.
	(arm_remote_breakpoint_from_pc): New function.
	(arm_gdbarch_init): Register arm_remote_breakpoint_from_pc.
	* arm-tdep.h (struct gdbarch_tdep): Correct thumb_breakpoint
	comment.  Add thumb2_breakpoint and thumb2_breakpoint_size.

	gdbserver/
	* linux-arm-low.c (thumb_breakpoint_len): Delete.
	(thumb2_breakpoint): New.
	(arm_breakpoint_at): Check for Thumb-2 breakpoints.

	testsuite/
	* gdb.arch/thumb2-it.S, gdb.arch/thumb2-it.exp: New files.
@
text
@d128 11
d152 6
@

