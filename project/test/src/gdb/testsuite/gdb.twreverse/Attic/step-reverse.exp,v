head	1.1;
access;
symbols
	reverse-20081226-branch:1.1.2.11.0.2
	reverse-20081226-branchpoint:1.1.2.11
	reverse-20080717-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.09.02.01.36.20;	author msnyder;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2008.09.02.01.36.20;	author msnyder;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2008.09.04.00.13.30;	author msnyder;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2008.09.04.03.18.13;	author msnyder;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2008.09.04.03.41.49;	author msnyder;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2008.09.04.03.59.02;	author msnyder;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2008.09.04.04.16.08;	author msnyder;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2008.09.04.17.29.35;	author msnyder;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2008.09.07.00.29.15;	author msnyder;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2008.09.09.19.05.17;	author msnyder;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2008.09.19.20.44.04;	author msnyder;	state Exp;
branches;
next	1.1.2.11;

1.1.2.11
date	2008.09.19.21.17.10;	author msnyder;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file step-reverse.exp was initially added on branch reverse-20080717-branch.
@
text
@@


1.1.2.1
log
@2008-09-01  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: New file.
	* gdb.twreverse/step-reverse.c: New file.
@
text
@a0 68
# This testcase is part of GDB, the GNU debugger.

# Copyright 2008 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
# step-reverse.exp -- Expect script to test reverse stepping in gdb.
# Lots of code borrowed from "step-test.exp".

if $tracelevel then {
    strace $tracelevel
}

if { [prepare_for_testing step-reverse.exp step-reverse step-reverse.c] } {
    return -1
}

runto main

# Activate record/replay
# FIXME: command needs to acknowledge, so we can test if it succeeded.

gdb_test "record" "" "Turn on recording"

# plain vanilla step/next (no count)

gdb_test "next" ".*NEXT TEST 1.*" "next test 1"
gdb_test "step" ".*STEP TEST 1.*" "step test 1"

# step/next with count

gdb_test "next 2" ".*NEXT TEST 2.*" "next test 2"
gdb_test "step 3" ".*STEP TEST 2.*" "step test 2"

# Set reverse execution direction
# FIXME: command needs to acknowledge, so we can test if it succeeded.

gdb_test "set exec-dir reverse" "" "set reverse execution"

# step/next backward with count

gdb_test "step 2" ".*REVERSE STEP TEST 1.*" "reverse step test 1"
gdb_test "next 2" ".*REVERSE NEXT TEST 1.*" "reverse next test 1"

# step/next backward without count

gdb_test "step" ".*STEP TEST 1.*" "reverse step test 2"
gdb_test "next" ".*NEXT TEST 1.*" "reverse next step 2"



# Finish test by running forward to the end.
# FIXME return to this later...
# gdb_test "set exec-dir forward" "" "set forward execution"
# gdb_continue_to_end "step-reverse.exp"

return 0

@


1.1.2.2
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for reverse stepping
	over, into, and out of a function call.
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@a44 13
# step over call

gdb_test "step" ".*NEXT OVER THIS CALL.*" "step up to call"
gdb_test "next" ".*STEP INTO THIS CALL.*" "next over call"

# step into call

gdb_test "step" ".*ARRIVED IN CALLEE.*" "step into call"

###
###
###

a49 8
# step backward out of called function

gdb_test "step" ".*STEP INTO THIS CALL.*" "reverse step out of called fn"

# next backward over call

gdb_test "next" ".*NEXT OVER THIS CALL.*" "reverse next over call"

d52 1
a52 1
gdb_test "step 3" ".*REVERSE STEP TEST 1.*" "reverse step test 1"
@


1.1.2.3
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for stepping
	backward into a function call.
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@a53 13
# finish out of call

set test_message "finish out of fn call"
gdb_test_multiple "finish" "$test_message" {
    -re "STEP INTO THIS CALL" {
	send_gdb "step\n"
	exp_continue
    }
    -re "FINISH TEST" {
	pass "$test_message"
    }
}

d63 1
a63 15
# step backward into function (thru return)

set test_message "reverse step into fn call"

gdb_test_multiple "step" "$test_message" {
    -re "RETURN FROM CALLEE" {
	send_gdb "step\n"
	exp_continue
    }
    -re "ARRIVED IN CALLEE" {
	pass "$test_message"
    }
}

# step backward out of called function (thru call)
d89 1
@


1.1.2.4
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for reverse stepi.
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@a66 16
# stepi over flat code (no calls)

set test_message "stepi test 1"
gdb_test_multiple "stepi" "$test_message" {
    -re "FINISH TEST" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "STEPI TEST" {
	pass "$test_message"
    }
    -re "NEXTI_TEST" {
	fail "$test_message (too far)"
    }
}

a75 23
# stepi backward over flat code (no calls)

set stepi_location  [gdb_get_line_number "FINISH TEST"  step-reverse.c]

global hex

set test_message "reverse stepi test 1"
gdb_test_multiple "stepi" "$test_message" {
    -re "STEPI TEST" {
	fail "$test_message (start statement)"
    }
    -re "$hex\[ \t\]*$stepi_location\[ \t\].* FINISH TEST" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "$stepi_location\[ \t\].* FINISH TEST" {
	pass "$test_message"
    }
    -re "STEP INTO THIS CALL" {
	fail "$test_message (too far)"
    }
}

d79 1
@


1.1.2.5
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for reverse stepi
	thru a function call (back to caller).
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@a27 2
global hex

d69 1
a69 1
set test_message "simple stepi"
a82 19
# stepi into a function call

set test_message "stepi into function call"
gdb_test_multiple "stepi" "$test_message" {
    -re "ARRIVED IN CALLEE" {
	pass "$test_message"
    }
    -re "NEXTI TEST" {
	fail "$test_message (too far)"
    }
    -re "RETURN FROM CALLEE" {
	fail "$test_message (too far)"
    }
    -re "ENTER CALLEE" {
	send_gdb "stepi\n"
	exp_continue
    }
}

d92 1
a92 1
# stepi backward out of a function call
a94 20
set test_message "reverse stepi from a function call"
gdb_test_multiple "stepi" "$test_message" {
    -re "ARRIVED IN CALLEE" {
	fail "$test_message (start statement)"
    }
    -re "ENTER CALLEE" {
	send_gdb "stepi\n" 
	exp_continue
    }
    -re "${hex}\[ \t\]*$stepi_location\[ \t\].*STEPI TEST" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "STEPI TEST" {
	pass "$test_message"
    }
    -re "STEP INTO THIS CALL" {
	fail "$test_message (too far)"
    }
}
d96 1
a96 1
# stepi backward over flat code (no calls)
d98 1
a98 2
set stepi_location  [gdb_get_line_number "FINISH TEST"  step-reverse.c]
set test_message "simple reverse stepi"
@


1.1.2.6
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for reverse stepi
	thru the return of a function (into callee).
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@a59 3
    -re "FINISH TEST" {
	pass "$test_message"
    }
d64 3
a72 3
    -re "STEPI TEST" {
	pass "$test_message"
    }
d77 3
a103 24
# stepi thru return of a function call

set test_message "stepi back from function call"
gdb_test_multiple "stepi" "$test_message" {
    -re "NEXTI TEST" {
	pass "$test_message"
    }
    -re "ARRIVED IN CALLEE" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "RETURN FROM CALLEE" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "STEPI TEST" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "ENTER CALLEE" {
	fail "$test_message (too far)"
    }
}

a112 27
# stepi backward thru return and into a function

set stepi_location  [gdb_get_line_number "ARRIVED IN CALLEE"  step-reverse.c]
set test_message "reverse stepi thru function return"
gdb_test_multiple "stepi" "$test_message" {
    -re "NEXTI TEST" {
	fail "$test_message (start statement)"
    }
    -re "RETURN FROM CALLEE" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "$hex\[ \t\]*$stepi_location\[ \t\].*ARRIVED IN CALLEE" {
	send_gdb "stepi\n"
	exp_continue
    }
    -re "ARRIVED IN CALLEE" {
	pass "$test_message"
    }
    -re "ENTER CALLEE" {
	fail "$test_message (too far)"
    }
    -re "STEPI TEST" {
	fail "$test_message (too far)"
    }
}

@


1.1.2.7
log
@whitespace fixes
@
text
@d80 1
a80 1
    -re "NEXTI TEST" {
d139 1
a139 1
set stepi_location  [gdb_get_line_number "ARRIVED IN CALLEE" step-reverse.c]
d166 1
a166 1
set stepi_location  [gdb_get_line_number "FINISH TEST" step-reverse.c]
d190 1
a190 1
set stepi_location  [gdb_get_line_number "FINISH TEST" step-reverse.c]
@


1.1.2.8
log
@2008-09-06  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add $gdb_prompt to regexps.
@
text
@d60 1
a60 1
    -re "FINISH TEST.*$gdb_prompt $" {
d63 1
a63 1
    -re "STEP INTO THIS CALL.*$gdb_prompt $" {
d73 1
a73 1
    -re "STEPI TEST.*$gdb_prompt $" {
d76 1
a76 1
    -re "FINISH TEST.*$gdb_prompt $" {
d80 1
a80 1
    -re "NEXTI TEST.*$gdb_prompt $" {
d89 1
a89 1
    -re "ARRIVED IN CALLEE.*$gdb_prompt $" {
d92 1
a92 1
    -re "NEXTI TEST.*$gdb_prompt $" {
d95 1
a95 1
    -re "RETURN FROM CALLEE.*$gdb_prompt $" {
d98 1
a98 1
    -re "ENTER CALLEE.*$gdb_prompt $" {
d108 1
a108 1
    -re "NEXTI TEST.*$gdb_prompt $" {
d111 1
a111 1
    -re "ARRIVED IN CALLEE.*$gdb_prompt $" {
d115 1
a115 1
    -re "RETURN FROM CALLEE.*$gdb_prompt $" {
d119 1
a119 1
    -re "STEPI TEST.*$gdb_prompt $" {
d123 1
a123 1
    -re "ENTER CALLEE.*$gdb_prompt $" {
d142 1
a142 1
    -re "NEXTI TEST.*$gdb_prompt $" {
d145 1
a145 1
    -re "RETURN FROM CALLEE.*$gdb_prompt $" {
d149 1
a149 1
    -re "$hex\[ \t\]*$stepi_location.*ARRIVED IN CALLEE.*$gdb_prompt $" {
d153 1
a153 1
    -re "ARRIVED IN CALLEE.*$gdb_prompt $" {
d156 1
a156 1
    -re "ENTER CALLEE.*$gdb_prompt $" {
d159 1
a159 1
    -re "STEPI TEST.*$gdb_prompt $" {
d169 1
a169 1
    -re "ARRIVED IN CALLEE.*$gdb_prompt $" {
d172 1
a172 1
    -re "ENTER CALLEE.*$gdb_prompt $" {
d176 1
a176 1
    -re "${hex}\[ \t\]*$stepi_location.*STEPI TEST.*$gdb_prompt $" {
d180 1
a180 1
    -re "STEPI TEST.*$gdb_prompt $" {
d183 1
a183 1
    -re "STEP INTO THIS CALL.*$gdb_prompt $" {
d193 1
a193 1
    -re "STEPI TEST.*$gdb_prompt $" {
d196 1
a196 1
    -re "$hex\[ \t\]*$stepi_location.* FINISH TEST.*$gdb_prompt $" {
d200 1
a200 1
    -re "$stepi_location\[ \t\].* FINISH TEST.*$gdb_prompt $" {
d203 1
a203 1
    -re "STEP INTO THIS CALL.*$gdb_prompt $" {
d212 1
a212 1
    -re "RETURN FROM CALLEE.*$gdb_prompt $" {
d216 1
a216 1
    -re "ARRIVED IN CALLEE.*$gdb_prompt $" {
@


1.1.2.9
log
@2008-09-09  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/return2-reverse.c: Rename to:
	* gdb.twreverse/finish-reverse.c: New name of file.
	* gdb.twreverse/*.exp: Sharpen regexps, add $gdb_prompt.

2008-09-06  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/watch-reverse.exp: New file.
	* gdb.twreverse/watch-reverse.c: New file.
	* gdb.twreverse/Makefile.in: Add watch-reverse for make clean.
	* gdb.twreverse/step-reverse.exp: Add $gdb_prompt to regexps.
@
text
@d20 3
a22 2
set testfile "step-reverse"
set srcfile  ${testfile}.c
d24 1
a24 2
if { [prepare_for_testing step-reverse.exp $testfile $srcfile] } {
    untested step-reverse.exp
a28 1
global decimal
d139 1
a139 1
set stepi_location  [gdb_get_line_number "ARRIVED IN CALLEE" "$srcfile"]
d166 1
a166 1
set stepi_location  [gdb_get_line_number "FINISH TEST" "$srcfile"]
d190 1
a190 1
set stepi_location  [gdb_get_line_number "FINISH TEST" "$srcfile"]
d200 1
a200 1
    -re "$stepi_location.* FINISH TEST.*$gdb_prompt $" {
d237 1
a237 1
gdb_test "next" ".*NEXT TEST 1.*" "reverse next test 2"
@


1.1.2.10
log
@prepare_for_testing, standardize
@
text
@d23 2
a24 1
if { [prepare_for_testing $testfile.exp $testfile $srcfile] } {
@


1.1.2.11
log
@don't need globals hex and decimal
@
text
@d27 3
@


