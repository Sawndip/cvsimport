head	1.1;
access;
symbols
	reverse-20081226-branch:1.1.2.5.0.2
	reverse-20081226-branchpoint:1.1.2.5
	reverse-20080717-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2008.09.02.01.36.20;	author msnyder;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2008.09.02.01.36.20;	author msnyder;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2008.09.04.00.13.30;	author msnyder;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2008.09.04.03.18.13;	author msnyder;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2008.09.04.03.41.49;	author msnyder;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2008.09.04.03.59.02;	author msnyder;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file step-reverse.c was initially added on branch reverse-20080717-branch.
@
text
@@


1.1.2.1
log
@2008-09-01  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: New file.
	* gdb.twreverse/step-reverse.c: New file.
@
text
@a0 61
#include <stdlib.h>
#include <string.h>

/* Test various kinds of stepping.
*/
int myglob = 0;

int callee() {
    myglob++; return 0;
}

/* A structure which, we hope, will need to be passed using memcpy.  */
struct rhomboidal {
  int rather_large[100];
};

void
large_struct_by_value (struct rhomboidal r)
{
  myglob += r.rather_large[42]; /* step-test.exp: arrive here 1 */
}

int main () {
   int w,x,y,z;
   int a[10], b[10];

   /* Test "next" and "step" */
   w = 0;	/* BREAK AT MAIN */
   x = 1;	/* NEXT TEST 1 */
   y = 2;	/* STEP TEST 1 */
   z = 3;	/* REVERSE NEXT TEST 1 */
   w = w + 2;	/* NEXT TEST 2 */
   x = x + 3;	/* REVERSE STEP TEST 1 */
   y = y + 4;
   z = z + 5;	/* STEP TEST 2 */

   /* Test that "next" goes over a call */
   callee(); /* OVER */

   /* Test that "step" doesn't */
   callee(); /* INTO */

   /* Test "stepi" */
   a[5] = a[3] - a[4];
   callee(); /* STEPI */
   
   /* Test "nexti" */
   callee(); /* NEXTI */

   y = w + z;

   {
     struct rhomboidal r;
     memset (r.rather_large, 0, sizeof (r.rather_large));
     r.rather_large[42] = 10;
     large_struct_by_value (r);  /* step-test.exp: large struct by value */
   }

   exit (0);
}

@


1.1.2.2
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for reverse stepping
	over, into, and out of a function call.
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@d9 1
a9 1
  myglob++; return 0;	/* ARRIVED IN CALLEE */
d38 1
a38 1
   callee(); /* NEXT OVER THIS CALL */
d41 1
a41 1
   callee(); /* STEP INTO THIS CALL */
@


1.1.2.3
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for stepping
	backward into a function call.
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@d10 1
a10 1
}			/* RETURN FROM CALLEE */
d44 1
a44 1
   a[5] = a[3] - a[4]; /* FINISH TEST */
@


1.1.2.4
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for reverse stepi.
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@d38 1
a38 1
   callee();	/* NEXT OVER THIS CALL */
d41 1
a41 1
   callee();	/* STEP INTO THIS CALL */
d45 1
a45 1
   callee();	/* STEPI TEST */
d48 1
a48 1
   callee();	/* NEXTI TEST */
@


1.1.2.5
log
@2008-09-03  Michael Snyder  <msnyder@@vmware.com>

	* gdb.twreverse/step-reverse.exp: Add tests for reverse stepi
	thru a function call (back to caller).
	* gdb.twreverse/step-reverse.c: Ditto.
@
text
@d8 1
a8 1
int callee() {		/* ENTER CALLEE */
@


