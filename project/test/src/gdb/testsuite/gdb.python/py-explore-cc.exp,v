head	1.3;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.3
	gdb_7_6-2013-04-26-release:1.3
	gdb_7_6-branch:1.3.0.2
	gdb_7_6-2013-03-12-branchpoint:1.3
	gdb_7_5_1-2012-11-29-release:1.2
	gdb_7_5-2012-08-17-release:1.2
	gdb_7_5-branch:1.2.0.2
	gdb_7_5-2012-07-18-branchpoint:1.2;
locks; strict;
comment	@# @;


1.3
date	2013.01.01.06.41.26;	author brobecke;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.22.17.59.33;	author tromey;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.11.05.50.44;	author sivachandra;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright (C) 2012-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the GDB testsuite.  It tests the mechanism
# exposing values to Python.

if { [skip_cplus_tests] } { continue }

standard_testfile py-explore.cc

if {[prepare_for_testing $testfile.exp $testfile $srcfile {debug c++}]} {
    return -1
}

# Skip all tests if Python scripting is not enabled.
if { [skip_python_tests] } { continue }

set int_ptr_ref_desc "The value of 'int_ptr_ref' is of type 'int_ptr' which is a typedef of type 'int \\*'.*\'int_ptr_ref' is a pointer to a value of type 'int'.*"

set b_desc "The value of 'b' is a struct/class of type 'B' with the following fields:.*\
A = <Enter 0 to explore this base class of type 'A'>.*\
i = 10 \\.\\. \\(Value of type 'int'\\).*\
c = 97 'a' \\.\\. \\(Value of type 'char'\\).*"

set B_desc "'B' is a struct/class with the following fields:.*\
A = <Enter 0 to explore this base class of type 'A'>.*\
i = <Enter 1 to explore this field of type 'int'>.*\
c = <Enter 2 to explore this field of type 'char'>.*"

if ![runto_main] {
   return -1
}

gdb_breakpoint [gdb_get_line_number "Break here."]
gdb_continue_to_breakpoint "Break here" ".*Break here.*"

gdb_test "explore A" "'A' is a struct/class with no fields\."
gdb_test "explore a" "The value of 'a' is a struct/class of type 'const A' with no fields\."
gdb_test "explore int_ref" "'int_ref' is a scalar value of type 'int'.*int_ref = 10"

gdb_test_multiple "explore int_ptr_ref" "" {
    -re "$int_ptr_ref_desc.*Continue exploring it as a pointer to a single value \\\[y/n\\\]:.*" {
        pass "explore int_ptr_ref"
        gdb_test_multiple "y" "explore_int_ptr_ref_as_single_value_pointer" {
            -re "'\[*\]int_ptr_ref' is a scalar value of type 'int'.*\[*\]int_ptr_ref = 10.*$gdb_prompt" {
                pass "explore_int_ptr_ref_as_single_value_pointer"
            }
        }
    }
}

gdb_test_multiple "explore b" "" {
    -re "$b_desc.*Enter the field number of choice:.*" {
        pass "explore b"
        gdb_test_multiple "0" "explore_base_class_A" {
            -re "The value of 'b\.A' is a struct/class of type 'A' with no fields\." {
                pass "explore_base_class_A"
                gdb_test_multiple "\0" "return_to_b_from_A" {
                    -re ".*$b_desc.*Enter the field number of choice:.*" {
                        pass "return_to_b_from_A"
                        gdb_test_multiple "1" "explore_field_i_of_b" {
                            -re "'b\.i' is a scalar value of type 'int'.*b\.i = 10.*" {
                                pass "explore_field_i_of_b"
                                gdb_test_multiple "\0" "return_to_b_from_i" {
                                    -re "$b_desc.*Enter the field number of choice:.*" {
                                        pass "return_to_b_from_i"
                                    }
                                }
                            }
                        }
                        gdb_test_multiple "2" "explore_field_c_of_b" {
                            -re "'b\.c' is a scalar value of type 'char'.*b\.c = .*'a'.*" {
                                pass "explore_field_c_of_b"
                                gdb_test_multiple "\0" "return_to_b_from_c" {
                                    -re "$b_desc.*Enter the field number of choice:.*" {
                                        pass "return_to_b_from_i"
                                    }
                                }
                            }
                        }
                        gdb_test_multiple "\0" "return_to_gdb_prompt" {
                            -re "$gdb_prompt" {
                                pass "return_to_gdb_prompt_from_b"
                            }
                        }
                    }
                }
            }
        }
    }
}

gdb_test_multiple "explore B" "" {
    -re "$B_desc.*Enter the field number of choice:.*" {
        pass "explore B"
        gdb_test_multiple "0" "explore_base_class_A" {
            -re "base class 'A' of 'B' is a struct/class of type 'A' with no fields\." {
                pass "explore_base_class_A"
                gdb_test_multiple "\0" "return_to_B" {
                    -re "$B_desc.*Enter the field number of choice:.*" {
                        pass "return_to_B"
                        gdb_test_multiple "1" "explore_field_i_of_B" {
                            -re "field 'i' of 'B' is of a scalar type 'int'.*" {
                                pass "explore_field_i_of_B"
                                gdb_test_multiple "\0" "return_to_B_from_i" {
                                    -re "$B_desc.*Enter the field number of choice:.*" {
                                        pass "return_to_B_from_i"
                                    }
                                }
                            }
                        }
                        gdb_test_multiple "2" "explore_field_c_of_B" {
                            -re "field 'c' of 'B' is of a scalar type 'char'.*" {
                                pass "explore_field_c_of_B"
                                gdb_test_multiple "\0" "return_to_B_from_c" {
                                    -re "$B_desc.*Enter the field number of choice:.*" {
                                        pass "return_to_B_from_c"
                                    }
                                }
                            }
                        }
                        gdb_test_multiple "\0" "return_to_gdb_prompt" {
                            -re "$gdb_prompt" {
                                pass "return_to_gdb_prompt_from_B"
                            }
                        }
                    }
                }
            }
        }
    }
}
@


1.2
log
@	* gdb.python/lib-types.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.python/py-block.exp: Use standard_testfile.
	* gdb.python/py-breakpoint.exp: Use standard_testfile.
	* gdb.python/py-events.exp: Use standard_testfile,
	standard_output_file.
	* gdb.python/py-evsignal.exp: Use standard_testfile.
	* gdb.python/py-evethreads.exp: Use standard_testfile.
	* gdb.python/py-explore-cc.exp: Use standard_testfile.
	* gdb.python/py-explore.exp: Use standard_testfile.
	* gdb.python/py-finish-breakpoint.exp: Use standard_testfile,
	standard_output_file.
	* gdb.python/py-finish-breakpoint2.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.python/py-frame-inline.exp: Use standard_testfile.
	* gdb.python/py-frame.exp: Use standard_testfile.
	* gdb.python/py-inferior.exp: Use standard_testfile.
	* gdb.python/py-infthread.exp: Use standard_testfile.
	* gdb.python/py-mi.exp: Use standard_testfile.
	* gdb.python/py-objfile-script.exp: Use standard_testfile,
	build_executable.
	* gdb.python/py-objfile.exp: Use standard_testfile.
	* gdb.python/py-pp-maint.exp: Use standard_testfile,
	prepare_for_testing.
	* gdb.python/py-prettyprint.exp: Use standard_testfile.
	* gdb.python/py-progspace.exp: Use standard_testfile,
	build_executable.
	* gdb.python/py-prompt.exp: Use standard_testfile,
	build_executable.
	* gdb.python/py-section-script.exp: Use standard_testfile,
	build_executable.
	* gdb.python/py-shared.exp: Use standard_testfile,
	standard_output_file, clean_restart.
	* gdb.python/py-symbol.exp: Use standard_output_file,
	prepare_for_testing.
	* gdb.python/py-symtab.exp: Use standard_output_file,
	prepare_for_testing
	* gdb.python/py-template.exp: Use standard_testfile.
	* gdb.python/py-type.exp: Use standard_testfile.
	* gdb.python/py-value-cc.exp: Use standard_testfile.
	* gdb.python/py-value.exp: Use standard_testfile.
	* gdb.python/python.exp: Use standard_testfile, build_executable.
@
text
@d1 1
a1 1
# Copyright (C) 2012 Free Software Foundation, Inc.
@


1.1
log
@2012-04-02  Siva Chandra Reddy  <sivachandra@@google.com>

	New command 'explore' which helps explore values and types in
	scope.
	* NEWS: Add an entry about the new 'explore' command.
	* data-directory/Makefile.in: Add gdb/command/explore.py
	* python/lib/gdb/command/explore.py: Implemention of the 'explore'
	command using the GDB Python API.

	* doc/gdb.texinfo (Examining Data): Document the 'explore'
	command.

	* testsuite/gdb.python/Makefile.in: Add py-explore to EXECUTABLES.
	* testsuite/gdb.python/py-explore.c: C program used for testing
	the new 'explore' command on C constructs.
	* testsuite/gdb.python/py-explore.cc: C++ program used for testing
	the new 'explore' command on C++ constructs.
	* testsuite/gdb-python/py-explore.exp: Tests for the new 'explore'
	command on C constructs.
	* testsuite/gdb-python/py-explore-cc.exp: Tests for the new
	'explore' command on C++ constructs.
@
text
@d21 1
a21 3
set testfile "py-explore"
set srcfile ${testfile}.cc
set binfile ${objdir}/${subdir}/${testfile}
@

