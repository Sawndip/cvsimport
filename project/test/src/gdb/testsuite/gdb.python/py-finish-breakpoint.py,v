head	1.5;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.5
	gdb_7_6-2013-04-26-release:1.5
	gdb_7_6-branch:1.5.0.2
	gdb_7_6-2013-03-12-branchpoint:1.5
	gdb_7_5_1-2012-11-29-release:1.3
	gdb_7_5-2012-08-17-release:1.3
	gdb_7_5-branch:1.3.0.2
	gdb_7_5-2012-07-18-branchpoint:1.3
	gdb_7_4_1-2012-04-26-release:1.1.2.2
	gdb_7_4-2012-01-24-release:1.1.2.2
	gdb_7_4-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2013.01.01.06.41.26;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.10.21.22.21;	author pkoning;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.20.20.00.14;	author palves;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.04.08.27.49;	author brobecke;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.23.17.06.16;	author kpouget;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.12.23.17.58.39;	author kpouget;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2012.01.06.04.54.27;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright (C) 2011-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the GDB testsuite.  It tests python Finish
# Breakpoints.
                
class MyFinishBreakpoint (gdb.FinishBreakpoint):
        def __init__(self, val, frame):
                gdb.FinishBreakpoint.__init__ (self, frame)
                print ("MyFinishBreakpoint init")
                self.val = val
                
        def stop(self):
                print ("MyFinishBreakpoint stop with %d" % int (self.val.dereference ()))
                print ("return_value is: %d" % int (self.return_value))
                gdb.execute ("where 1")
                return True
        
        def out_of_scope(self):
                print ("MyFinishBreakpoint out of scope")

class TestBreakpoint(gdb.Breakpoint):
    def __init__(self):
        gdb.Breakpoint.__init__ (self, spec="test_1", internal=1)
        self.silent = True
        self.count = 0
        print ("TestBreakpoint init")
        
    def stop(self):
        self.count += 1
        try:
                TestFinishBreakpoint (gdb.newest_frame (), self.count)
        except ValueError as e:
                print (e)
        return False

class TestFinishBreakpoint (gdb.FinishBreakpoint):
    def __init__ (self, frame, count):
        self.count = count
        gdb.FinishBreakpoint.__init__ (self, frame, internal=1)
        
        
    def stop(self):
        print ("-->", self.number)
        if (self.count == 3):
            print ("test stop: %d" % self.count)
            return True
        else:
            print ("test don't stop: %d" % self.count)
            return False 
        
    
    def out_of_scope(self):
        print ("test didn't finish: %d" % self.count)

class TestExplicitBreakpoint(gdb.Breakpoint):
        def stop(self):
                try:
                        SimpleFinishBreakpoint (gdb.newest_frame ())
                except ValueError as e:
                        print (e)
                return False

class SimpleFinishBreakpoint(gdb.FinishBreakpoint):
        def __init__(self, frame):
                gdb.FinishBreakpoint.__init__ (self, frame)
                
                print ("SimpleFinishBreakpoint init")
                
        def stop(self):
                print ("SimpleFinishBreakpoint stop" )
                return True
        
        def out_of_scope(self):
                print ("SimpleFinishBreakpoint out of scope")

print ("Python script imported")
@


1.4
log
@2012-12-10  Paul Koning  <paul_koning@@dell.com>

	* gdb.base/charset.exp: Change print syntax for Python 3
	compatibility.
	* gdb.python/py-block.exp: Ditto.
	* gdb.python/py-breakpoint.exp: Ditto.
	* gdb.python/py-cmd.exp: Ditto.
	* gdb.python/py-events.py: Ditto.
	* gdb.python/py-finish-breakpoint.py: Ditto.
	* gdb.python/py-finish-breakpoint2.exp: Ditto.
	* gdb.python/py-finish-breakpoint2.py: Ditto.
	* gdb.python/py-frame-inline.exp: Ditto.
	* gdb.python/py-frame.exp: Ditto.
	* gdb.python/py-infthread.exp: Ditto.
	* gdb.python/py-objfile.exp: Ditto.
	* gdb.python/py-parameter.exp: Ditto.
	* gdb.python/py-progspace.exp: Ditto.
	* gdb.python/py-prompt.exp: Ditto.
	* gdb.python/py-symbol.exp: Ditto.
	* gdb.python/py-symtab.exp: Ditto.
	* gdb.python/py-template.exp: Ditto.
	* gdb.python/py-value-cc.exp: Ditto.
	* gdb.python/python.exp: Ditto.
	* gdb.python/source2.py: Ditto.
	* gdb.python/lib-types.exp: Change print syntax for Python 3
	compatibility.
	Use sorted() function rather than sort() method.
	Accept either int or long values for enum values.
	* gdb.python/py-events.exp: Use exec(open(...).read()) instead of
	execfile for Python 3 compatibility.
	* gdb.python/py-evsignal.exp: Ditto.
	* gdb.python/py-evthreads.exp: Ditto.
	* gdb.python/py-mi.exp: Ditto.
	* gdb.python/py-pp-maint.exp: Ditto.
	* gdb.python/py-prettyprint.exp: Ditto.
	* gdb.python/py-finish-breakpoint.exp: Change print syntax for
	Python 3 compatibility.
	Skip tests for Python 2.4.
	* gdb.python/py-inferior.exp: Change print syntax for
	Python 3 compatibility.
	Use byte string rather than character string in memory write test
	if Python 3.
	* gdb.python/py-pp-maint.py: Change class declarations to "new
	class" syntax.
	* gdb.python/py-prettyprint.py: Change iterator class to generator
	function for Python 3 compatibility.
	Make all classes "new style".
	Fix indentation issue and stray semicolon.
	* gdb.python/py-shared.expChange print syntax for Python 3
	compatibility.
	Define "long" if Python 3.
	* gdb.python/py-type.exp: Change print syntax for Python 3
	compatibility.
	Accept either int or long values for enum values.
	* gdb.python/py-value.exp: Change print syntax for Python 3
	compatibility.
	Skip "long" and "unicode" tests if Python 3.
	Accept either "type" or "class" in type checks.
	* lib/gdb.exp (gdb_py_is_py3k): New flag set if Python 3.
	(gdb_py_is_py24): New flag set if Python 2.4 or 2.5.
@
text
@d1 1
a1 1
# Copyright (C) 2011-2012 Free Software Foundation, Inc.
@


1.3
log
@2012-01-20  Pedro Alves  <palves@@redhat.com>

	* gdb.python/py-finish-breakpoint.py: Fix typo.
@
text
@d18 1
a18 1
		
d20 13
a32 13
	def __init__(self, val, frame):
		gdb.FinishBreakpoint.__init__ (self, frame)
		print "MyFinishBreakpoint init"
		self.val = val
		
	def stop(self):
		print "MyFinishBreakpoint stop with %d" % int (self.val.dereference ())
		print "return_value is: %d" % int (self.return_value)
		gdb.execute ("where 1")
		return True
	
	def out_of_scope(self):
		print "MyFinishBreakpoint out of scope"
d39 1
a39 1
        print "TestBreakpoint init"
d42 3
a44 3
    	self.count += 1
    	try:
        	TestFinishBreakpoint (gdb.newest_frame (), self.count)
d46 1
a46 1
        	print e
d51 1
a51 1
    	self.count = count
d56 1
a56 1
        print "-->", self.number
d58 1
a58 1
            print "test stop: %d" % self.count
d61 1
a61 1
            print "test don't stop: %d" % self.count
d66 1
a66 1
        print "test didn't finish: %d" % self.count
d69 6
a74 6
	def stop(self):
		try:
			SimpleFinishBreakpoint (gdb.newest_frame ())
		except ValueError as e:
			print e
		return False
d77 11
a87 11
	def __init__(self, frame):
		gdb.FinishBreakpoint.__init__ (self, frame)
		
		print "SimpleFinishBreakpoint init"
		
	def stop(self):
		print "SimpleFinishBreakpoint stop" 
		return True
	
	def out_of_scope(self):
		print "SimpleFinishBreakpoint out of scope"
d89 1
a89 1
print "Python script imported"
@


1.2
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d89 1
a89 1
print "Python script importedd"
@


1.1
log
@	Introduce gdb.FinishBreakpoint in Python

	* Makefile.in (SUBDIR_PYTHON_OBS): Add py-finishbreakpoint.o.
	(SUBDIR_PYTHON_SRCS): Add python/py-finishbreakpoint.c.
	Add build rule for this file.
	* infcmd.c (print_return_value): Split to create get_return_value.
	(get_return_value): New function based on print_return_value. Handle
	case where stop_registers are not set.
	* inferior.h (get_return_value): New prototype.
	* python/py-breakpoint.c (bppy_pending_object): Make non-static.
	(gdbpy_breakpoint_created): Set is_py_finish_bp is necessary.
	(struct breakpoint_object): Move to python-internal.h
	(BPPY_REQUIRE_VALID): Likewise.
	(BPPY_SET_REQUIRE_VALID): Likewise.
	(gdbpy_breakpoint_created): Initialize is_finish_bp.
	(gdbpy_should_stop): Add  pre/post hooks before/after calling stop
	method.
	* python/python-internal.h (breakpoint_object_type): Add as extern.
	(bppy_pending_object): Likewise.
	(typedef struct breakpoint_object) Removed.
	(struct breakpoint_object): Moved from py-breakpoint.c.
	Add field is_finish_bp.
	(BPPY_REQUIRE_VALID): Moved from py-breakpoint.c.
	(BPPY_SET_REQUIRE_VALID): Likewise.
	(frame_object_to_frame_info): New prototype.
	(gdbpy_initialize_finishbreakpoints): New prototype.
	(bpfinishpy_is_finish_bp): Likewise.
	(bpfinishpy_pre_stop_hook): Likewise.
	(bpfinishpy_post_stop_hook): Likewise.
	* python/py-finishbreakpoint.c: New file.
	* python/py-frame.c(frame_object_to_frame_info): Make non-static and
	accept PyObject instead of frame_object.
	(frapy_is_valid): Don't cast to frame_object.
	(frapy_name): Likewise.
	(frapy_type): Likewise.
	(frapy_unwind_stop_reason): Likewise.
	(frapy_pc): Likewise.
	(frapy_block): Likewise.
	(frapy_function): Likewise.
	(frapy_older): Likewise.
	(frapy_newer): Likewise.
	(frapy_find_sal): Likewise.
	(frapy_read_var): Likewise.
	(frapy_select): Likewise.
	* python/python.c (gdbpy_is_stopped_at_finish_bp): New noop function.
	(_initialize_python): Add gdbpy_initialize_finishbreakpoints.
	* python/python.h: Include breakpoint.h
	(gdbpy_is_stopped_at_finish_bp): New prototype.

doc/
	* gdb.texinfo (Finish Breakpoints in Python): New subsection.
	(Python API): Add menu entry for Finish Breakpoints.

testsuite/
	* Makefile.in (EXECUTABLES): Add py-finish-breakpoint and
	py-finish-breakpoint2
	(MISCALLANEOUS): Add py-events-shlib.so and py-events-shlib-nodebug.so
	* gdb.python/py-breakpoint.exp (mult_line): Define and use variable
	instead of line number.
	* gdb.python/py-finish-breakpoint.c: New file.
	* gdb.python/py-finish-breakpoint.exp: New file.
	* gdb.python/py-finish-breakpoint.py: New file.
	* gdb.python/py-finish-breakpoint2.cc: New file.
	* gdb.python/py-finish-breakpoint2.exp: New file.
	* gdb.python/py-finish-breakpoint2.py: New file.
@
text
@d1 1
a1 1
# Copyright (C) 2011 Free Software Foundation, Inc.
@


1.1.2.1
log
@New files from previous patch (Python FinishBreakpoint)
@
text
@@


1.1.2.2
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1 1
a1 1
# Copyright (C) 2011-2012 Free Software Foundation, Inc.
@


