head	1.7;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.7
	gdb_7_6-branch:1.7.0.12
	gdb_7_5-branch:1.7.0.10
	gdb_7_4-branch:1.7.0.8
	gdb_7_3-branch:1.7.0.6
	gdb_7_1-branch:1.7.0.4
	gdb_7_0-branch:1.7.0.2
	arc-sim-20090309:1.6
	arc-insight_6_8-branch:1.6.0.16
	arc-insight_6_8-branchpoint:1.6
	insight_6_8-branch:1.6.0.14
	insight_6_8-branchpoint:1.6
	insight_6_6-20070208-release:1.6
	gdb_6_6-branch:1.6.0.12
	gdb_6_6-2006-11-15-branchpoint:1.6
	insight_6_5-20061003-release:1.6
	gdb_6_5-branch:1.6.0.10
	gdb_6_5-2006-05-14-branchpoint:1.6
	gdb_6_4-branch:1.6.0.8
	gdb_6_4-2005-11-01-branchpoint:1.6
	gdb-csl-arm-20051020-branch:1.6.0.6
	gdb-csl-arm-20051020-branchpoint:1.6
	gdb_6_1-2004-04-05-release:1.6
	gdb_6_1-branch:1.6.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.6
	gdb_6_0-2003-10-04-release:1.6
	gdb_6_0-branch:1.6.0.2
	gdb_6_0-2003-06-23-branchpoint:1.6
	gdb_5_3-2002-12-12-release:1.5
	gdb_5_3-branch:1.5.0.2
	gdb_5_3-2002-09-04-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.10
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.3
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.6
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.4
	gdb_5_1-2001-07-29-branchpoint:1.3
	dberlin-typesystem-branch:1.3.0.2
	dberlin-typesystem-branchpoint:1.3
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2008.12.21.17.38.55;	author jkratoch;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.27.22.18.44;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.26.21.11.26;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.07.21.50.39;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.07.20.39.32;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.09.17.20.03;	author hunt;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.45;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.45;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	Fix for PR gdb/8648.
	* gdb.arch/ppc-fp.exp, gdb.arch/vsx-regs.exp, gdb.base/watchpoint-hw.c,
	gdb.gdbtk/browser.test, gdb.gdbtk/console.test, gdb.gdbtk/srcwin.test,
	gdb.gdbtk/srcwin2.test, gdb.gdbtk/srcwin3.test, gdb.gdbtk/windows.test,
	gdb.threads/tls2.c: Remove reference to bug-gdb@@prep.ai.mit.edu .
@
text
@#   Copyright (C) 1999, 2001 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# This file was written by Martin Hunt (hunt@@cygnus.com)

# Read in the standard defs file

if {![gdbtk_read_defs]} {
  break
}

global objdir srcdir


# move the pointer to the center of the bbox relative to $win
proc move_mouse_to {win bbox} {
  if {[llength $bbox] != 4} {
    return 0
  }
  set x [expr [lindex $bbox 0] + [lindex $bbox 2] / 2]
  set y [expr [lindex $bbox 1] + [lindex $bbox 3] / 2]
  warp_pointer . [winfo rootx $win] [winfo rooty $win]

  set nx 0
  set ny 0

  while {$nx != $x || $ny != $y} {
    if {$nx < $x} {incr nx}
    if {$ny < $y} {incr ny}
    warp_pointer $win $nx $ny
  }
  return 1
}

proc click {win bbox bnum} {
  if {![move_mouse_to $win $bbox]} {
    return 0
  }
  update

  set x [expr [lindex $bbox 0] + [lindex $bbox 2] / 2]
  set y [expr [lindex $bbox 1] + [lindex $bbox 3] / 2]

  if {[catch {event generate $win <Button-$bnum> -x $x -y $y} result]} {
    return 0
  }
  if {[catch {event generate $win <ButtonRelease-$bnum> -x $x -y $y} result]} {
    return 0
  }
  return 1
}


#####                 #####
#                         #
#  SECTION 1: Mode Tests  #
#                         #
#####                 #####

# Load the test executable
set program [file join $objdir list]
if {[catch {gdbtk_test_file $program} t]} {
  # This isn't a test case, since if this fails, we're hosed.
  gdbtk_test_error "loading \"$program\": $t"
}

set srcwin [ManagedWin::open SrcWin]
set stw [$srcwin test_get twin]
set twin [$stw test_get twin]

# get things started
gdb_cmd "break main"
gdbtk_test_run

# Test: srcwin-1.1
# Desc: Check for something in source window
gdbtk_test srcwin-1.1 "source window has contents" {
  set file1(source) [$twin get 1.0 end]
  expr {![string compare $file1(source) ""]}
} {0}


# Test: srcwin-1.2
# Desc: source->assembly mode change
gdbtk_test srcwin-1.2 "source->assembly mode change" {
  $srcwin mode "" ASSEMBLY
  set twin [$stw test_get twin]
  set file1(assembly) [$twin get 1.0 end]
  expr {![string compare $file1(source) $file1(assembly)]}
} {0}

# Test: srcwin-1.3
# Desc: assembly->mixed mode change
gdbtk_test srcwin-1.3 "assembly->mixed mode change" {
  $srcwin mode "" MIXED
  set twin [$stw test_get twin]
  set file1(mixed) [$twin get 1.0 end]
  expr {![string compare $file1(mixed) $file1(assembly)]}
} {0}

# Test: srcwin-1.4
# Desc: mixed->src+asm mode change
gdbtk_test srcwin-1.4 "mixed->src+asm mode change" {
  $srcwin mode "" SRC+ASM
  set twin [$stw test_get twin]
  set bwin [$stw test_get bwin]
  set s [$twin get 1.0 end]
  set a [$bwin get 1.0 end]
  list [string compare $a $file1(assembly)] [string compare $s $file1(source)] [winfo ismapped $bwin]
} {0 0 1}

# Test: srcwin-1.5
# Desc: src+asm->source mode change
gdbtk_test srcwin-1.5 "src+asm->source mode change" {
  $srcwin mode "" SOURCE
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  set bwin [$stw test_get bwin]
  list [string compare $file1(source) $a] [winfo ismapped $bwin]
} {0 0}

# Test: srcwin-1.6
# Desc: source->mixed mode change
gdbtk_test srcwin-1.6 "source->mixed mode change" {
  $srcwin mode "" MIXED
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  string compare $file1(mixed) $a
} {0}

# Test: srcwin-1.7
# Desc: mixed->source mode change
gdbtk_test srcwin-1.7 "mixed->source mode change" {
  $srcwin mode "" SOURCE
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  string compare $file1(source) $a
} {0}

# Test: srcwin-1.8
# Desc: source->src+asm mode change
gdbtk_test srcwin-1.8 "source->src+asm mode change" {
  $srcwin mode "" SRC+ASM
  set twin [$stw test_get twin]
  set bwin [$stw test_get bwin]
  set s [$twin get 1.0 end]
  set a [$bwin get 1.0 end]
  list [string compare $a $file1(assembly)] [string compare $s $file1(source)] [winfo ismapped $bwin]
} {0 0 1}

# Test: srcwin-1.9
# Desc: src+asm->assembly mode change
gdbtk_test srcwin-1.9 "src+asm->assembly mode change" {
  $srcwin mode "" ASSEMBLY
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  string compare $file1(assembly) $a
} {0}

# Test: srcwin-1.10
# Desc: assembly->src+asm mode change
gdbtk_test srcwin-1.10 "assembly->src+asm mode change" {
  $srcwin mode "" SRC+ASM
  set twin [$stw test_get twin]
  set bwin [$stw test_get bwin]
  set s [$twin get 1.0 end]
  set a [$bwin get 1.0 end]
  list [string compare $a $file1(assembly)] [string compare $s $file1(source)] [winfo ismapped $bwin]
} {0 0 1}

# Test: srcwin-1.11
# Desc: src+asm->mixed mode change
gdbtk_test srcwin-1.11 "src+asm->mixed mode change" {
  $srcwin mode "" MIXED
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  set bwin [$stw test_get bwin]
  expr {[string compare $file1(mixed) $a] ||
	[winfo ismapped $bwin]}
} {0}

# Test: srcwin-1.12
# Desc: mixed->assembly mode change
gdbtk_test srcwin-1.12 "mixed->assembly mode change" {
  $srcwin mode "" ASSEMBLY
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  string compare $file1(assembly) $a
} {0}

# Test: srcwin-1.13
# Desc: assembly->source mode change
gdbtk_test srcwin-1.13 "assembly->source mode change" {
  $srcwin mode "" SOURCE
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  string compare $file1(source) $a
} {0}


#####                       #####
#                               #
#  SECTION 2: Basic Operations  #
#                               #
#####                       #####

# Test: srcwin-2.1
# Desc: check contents of filename combobox
gdbtk_test srcwin-2.1 "check contents of filename combobox" {
  set statbar [$srcwin test_get _statbar]
  set names [$statbar.name list get 0 end]
  set r 0
  foreach f {list0.c list1.c} {
    if {[lsearch $names $f] != -1} {
      incr r
    }
  }
  set r
} {2}

# Test: srcwin-2.2
# Desc: check contents of function combobox
gdbtk_test srcwin-2.2 "check contents of function combobox" {
  set names [$statbar.func list get 0 end]
  set r 0
  foreach f {main foo unused} {
    if {[lsearch $names $f] != -1} {
      incr r
    }
  }
  set r
} {3}

# Test: srcwin-2.3
# Desc: goto filename
gdbtk_test srcwin-2.3 "goto filename" {
  set func [$srcwin test_get _name 1]
  $func "" list1.c
  set twin [$stw test_get twin]
  set file2(source) [$twin get 1.0 end]
  expr {![string compare $file1(source) $file2(source)]}
} {0}

# Test: srcwin-2.4
# Desc: check contents of function combobox
gdbtk_test srcwin-2.4 "check contents of function combobox" {
  set names [$statbar.func list get 0 end]
  set r 0
  foreach f {bar long_line oof unused} {
    if {[lsearch $names $f] != -1} {
      incr r
    }
  }
  set r
} {4}

# Test: srcwin-2.5
# Desc: function combobox entry field should be empty after switching to a new file
gdbtk_test srcwin-2.5 "function combobox entry field should be empty" {
  set names [$statbar.func get]
  string length $names
} {0}

# Test: srcwin-2.6
# Desc: goto function
gdbtk_test srcwin-2.6 "goto function bar" {
  $srcwin goto_func "" bar
  set r 0

  # now get a dump of all tags and check that only one line is
  # marked BROWSE_TAG and no lines are STACK_TAG or PC_TAG.

  # We know that list1.c should have BROWSE_TAG set at index 5.2
  # for function "bar".  If list1.c is changed or the layout of the source
  # window is changed, this must be updated.
  if {![catch {set z [$twin dump -tag 1.0 end]}]} {
    foreach {k v i} $z {
      if {$k == "tagon"} {
	if {$v == "BROWSE_TAG"} {
	  if {$i == "10.2"} {
	    incr r
	  } else {
	    incr r 5
	  }
	}
	if {$v == "STACK_TAG"} { incr r 10}
	if {$v == "PC_TAG"} { incr r 100}
      }
    }
  } else {
    set r -1
  }

  if {$r == 1} {
    # things are OK so far, so just verify the function name is displayed
    # in the combobox entry field.
    set names [$statbar.func get]
    if {[string compare $names "bar"]} {set r -2}
  }
  set r
} {1}

# Test: srcwin-2.7
# Desc: goto function "oof". This tests that the correct line is highlighted
# with BROWSE_TAG and no other lines are highlighted. It also checks that
# the combobox has the correct function name in it.  Finally, list1.c
# has an extremely long line, line 32, that breaks some functions.  We verify 
# that the GDBtk has the correct line number.

gdbtk_test srcwin-2.7 "goto function oof" {
  $srcwin goto_func "" oof
  set r 0

  # now get a dump of all tags and check that only one line is
  # marked BROWSE_TAG and no lines are STACK_TAG or PC_TAG.

  # We know that list1.c should have BROWSE_TAG set at index 32.2
  # for function "oof".  If list1.c is changed or the layout of the source
  # window is changed, this must be updated.
  if {![catch {set z [$twin dump -tag 1.0 end]}]} {
    foreach {k v i} $z {
      if {$k == "tagon"} {
	if {$v == "BROWSE_TAG"} {
	  if {$i == "38.2"} {
	    set line_number [$twin get "$i wordstart" "$i wordend"]
	    if {$line_number == "38"} {
	      incr r
	    } else {
	      incr r -100
	    }
	  } else {
	    incr r 5
	  }
	}
	if {$v == "STACK_TAG"} {incr r 10}
	if {$v == "PC_TAG"} {incr r 100}
      }
    }
  } else {
    set r -1
  }

  if {$r == 1} {
    # things are OK so far, so just verify the function name is displayed
    # in the combobox entry field.
    set names [$statbar.func get]
    if {[string compare $names "oof"]} {set r -2}
  }
  set r
} {1}

# Test: srcwin-2.8
# Desc: This test issues a next command while browsing list1.c.
# It should display list0.c and highlight the correct line.
gdbtk_test srcwin-2.8 "step while browsing" {
  gdb_immediate "next" 1
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list0.c"} {set r -1}
  if {$func != "main"} {set r -2}

  # check that correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file1(source) $a]} {set r -3}

  # check for PC_TAG on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "11.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# Test: srcwin-2.9
# Desc: This test issues a next command while the current
# PC is ready to call a function.  It should not go into the function and
# should update the PC highlight correctly.
gdbtk_test srcwin-2.9 "next" {
  gdb_immediate "next" 1
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list0.c"} {set r -1}
  if {$func != "main"} {set r -2}

  # check that correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file1(source) $a]} {set r -3}

  # check for PC_TAG on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "12.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# Test: srcwin-2.10
# Desc: This test issues a step command while the current
# PC is ready to call a function.  It should step into the function.
gdbtk_test srcwin-2.10 "step" {
  gdb_immediate "step" 1
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list0.h"} {set r -1}
  if {$func != "foo"} {set r -2}

  # check that a new file is displayed
  set twin [$stw test_get twin]
  set file3(source) [$twin get 1.0 end]
  if {![string compare $file1(source) $file3(source)]} {set r -3}

  # check for PC_TAG on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "9.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# Test: srcwin-2.11
# Desc: This test issues a break and a continue
gdbtk_test srcwin-2.11 "set BP and continue" {
  gdb_immediate "break oof" 1
  gdb_immediate "continue" 1
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list1.c"} {set r -1}
  if {$func != "oof"} {set r -2}

  # check that the correct file is displayed
  # we must clear the breakpoint first so it doesn't mess up the
  # comparison...
  gdb_immediate "clear oof" 1  
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file2(source) $a]} {set r -3}
  
  # check for PC_TAG on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "38.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

#####                       #####
#                               #
#  SECTION 3: Stack Operations  #
#                               #
#####                       #####

# Test: srcwin-3.1
# Desc: This tests "stack up" 
gdbtk_test srcwin-3.1 "stack up (1)" {
  $srcwin stack up
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list1.c"} {set r -1}
  if {$func != "long_line"} {set r -2}

  # check that the correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file2(source) $a]} {set r -3}
  
  # check for PC_TAG and STACK_TAG on correct lines
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    # return n + 1;
	    if {$i == "38.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {
	    # oof (67);
	    if {$i == "26.2"} {
	      incr r
	    } else {
	      incr r 10
	    }
	  }
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {2}

# Test: srcwin-3.2
# Desc: Another "stack up"  test
gdbtk_test srcwin-3.2 "stack up (2)" {
  $srcwin stack up
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list1.c"} {set r -1}
  if {$func != "bar"} {set r -2}

  # check that the correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file2(source) $a]} {set r -3}
  
  # check for PC_TAG and STACK_TAG on correct lines
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    # return n + 1;
	    if {$i == "38.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {
	    # long_line ();
	    if {$i == "12.2"} {
	      incr r
	    } else {
	      incr r 10
	    }
	  }
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {2}

# Test: srcwin-3.3
# Desc: Another "stack up"  test
gdbtk_test srcwin-3.3 "stack up (3)" {
  $srcwin stack up
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list0.h"} {set r -1}
  if {$func != "foo"} {set r -2}

  # check that the correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {![string compare $file2(source) $a]} {set r -3}
  
  # check for PC_TAG and STACK_TAG on correct lines
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "STACK_TAG"} {
	    if {$i == "9.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "PC_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# Test: srcwin-3.4
# Desc: Another "stack up"  test
gdbtk_test srcwin-3.4 "stack up (4)" {
  $srcwin stack up
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list0.c"} {set r -1}
  if {$func != "main"} {set r -2}

  # check that the correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file1(source) $a]} {set r -3}
  
  # check for PC_TAG and STACK_TAG on correct lines
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "STACK_TAG"} {
	    if {$i == "12.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "PC_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# Disabled for now because there are different correct results.
# Test should be rewritten to include those.
# Test: srcwin-3.5
# Desc: "stack up" when we are at the top
#gdbtk_test srcwin-3.5 "stack up when at the top" {
#  $srcwin stack up
#  set r 0
#  set name [$statbar.name get]
#  set func [$statbar.func get]
#
  # check contents of name and function comboboxes
#  if {$name != "list0.c"} {set r -1}
#  if {$func != "main"} {set r -2}

  # check that the correct file is displayed
#  set twin [$stw test_get twin]
#  set a [$twin get 1.0 end]
#  if {[string compare $file1(source) $a]} {set r -3}
  
  # check for PC_TAG and STACK_TAG on correct lines
#  if {$r == 0} {
#    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
#      foreach {k v i} $z {
#	if {$k == "tagon"} {
#	  if {$v == "STACK_TAG"} {
#	    if {$i == "12.2"} {
#	      incr r
#	    } else {
#	      incr r 5
#	    }
#	  }
#	  if {$v == "PC_TAG"} {incr r 10}
#	  if {$v == "BROWSE_TAG"} {incr r 100}
#	}
#      }
#    } else {
#      set r -4
#    }
#  }
#  set r
#} {1}

# Test: srcwin-3.6
# Desc: "stack down"  test
gdbtk_test srcwin-3.6 "stack down" {
  $srcwin stack down
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list0.h"} {set r -1}
  if {$func != "foo"} {set r -2}

  # check that the correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {![string compare $file2(source) $a]} {set r -3}
  
  # check for PC_TAG and STACK_TAG on correct lines
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "STACK_TAG"} {
	    if {$i == "9.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "PC_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# Test: srcwin-3.7
# Desc: "stack bottom"  test
gdbtk_test srcwin-3.7 "stack bottom" {
  $srcwin stack bottom
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list1.c"} {set r -1}
  if {$func != "oof"} {set r -2}

  # check that the correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file2(source) $a]} {set r -3}
  
  # check for PC_TAG on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "38.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# Test: srcwin-3.8
# Desc: "stack down" when at bottom
gdbtk_test srcwin-3.8 "stack down when at bottom" {
  $srcwin stack down
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list1.c"} {set r -1}
  if {$func != "oof"} {set r -2}

  # check that the correct file is displayed
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file2(source) $a]} {set r -3}
  
  # check for PC_TAG on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "38.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}

# 4 -  BREAKPOINTS

# Test: srcwin-4.1
# Desc: Set BP in another file. Tests bp and cache functions
gdbtk_test srcwin-4.1 "set BP in another file" {
  gdb_immediate "break foo" 1
  $srcwin goto_func "" foo
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

  # check contents of name and function comboboxes
  if {$name != "list0.h"} {set r -1}
  if {$func != "foo"} {set r -2}

  set twin [$stw test_get twin]
  
  # check for BROWSE_TAG and BP image on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "BROWSE_TAG"} {
	    if {$i == "9.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "PC_TAG"} {incr r 100}
	} elseif {$k == "image"} {
	  if {$i == "9.0"} {
	    incr r
	  } else {
	    set r -200
	  }
	}
      }
    } else {
      set r -4
    }
  }
  
  if {$r == 2} {
    # clear BP and compare with previous contents. This should succeed,
    gdb_immediate "clear foo" 1
    set a [$twin get 1.0 end]
    if {[string compare $file3(source) $a]} {set r -3}
  }
  
  set r
} {2}

# Test: srcwin-4.2
# Desc: Test temporary BP
gdbtk_test srcwin-4.2 "temporary BP" {
  set r 0
  if {[catch {gdb_immediate "tbreak foo" 1} msg]} {
    set r -500
  }
  set name [$statbar.name get]
  set func [$statbar.func get]
  
  # check contents of name and function comboboxes
  if {$name != "list0.h"} {set r -1}
  if {$func != "foo"} {set r -2}

  set twin [$stw test_get twin]
  
  # check for BROWSE_TAG and BP image on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "BROWSE_TAG"} {
	    if {$i == "9.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "PC_TAG"} {incr r 100}
	} elseif {$k == "image"} {
	  if {$i == "9.0"} {
	    incr r
	  } else {
	    set r -200
	  }
	}
      }
    } else {
      set r -4
    }
  }
  
  gdb_immediate "continue" 1
  
  # now check for PC_TAG and no image
  if {$r == 2} {
    if {![catch {set z [$twin dump 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "9.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	} elseif {$k == "image"} {
	  set r -200
	}
      }
    } else {
      set r -4
    }
  }
  
  set r
} {3}

# Test: srcwin-4.3
# Desc: Test BP balloons
gdbtk_test srcwin-4.3 "BP Balloons" {
  # move pointer out of the way
  warp_pointer . 0 0 
  set r 0
  gdb_immediate "break 10" 1
  gdb_immediate "tbreak 10" 1

  set twin [$stw test_get twin]
  
  # check for BROWSE_TAG and BP image on correct line
  if {$r == 0} {
    if {![catch {set z [$twin dump 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "PC_TAG"} {
	    if {$i == "9.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "STACK_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	} elseif {$k == "image"} {
	  if {$i == "10.0"} {
	    incr r
	    # we found the bp image, now we will test the bp balloon messages
	    set balloon [winfo toplevel [namespace tail $srcwin]].__balloon
	    # shouldn't be mapped yet
	    if {[winfo ismapped $balloon]} {
	      set r -3000
	      break
	    }
	    move_mouse_to $twin [$twin bbox $i]
	    #wait a second for the balloon message to appear
	    sleep 1
	    if {![winfo ismapped $balloon]} {
	      set r -4000
	      break
	    }
	    # read the contents of the balloon and parse it into lines
	    set a [split [$balloon.label cget -text] \n]
	    set i 0
	    # foreach line parse it and check the type and make sure it is enabled
	    foreach line $a {
	      if {[lindex $line 0] == "breakpoint"} {continue}
	      incr i
	      set enabled [lindex $line 0]
	      set bptype [lindex $line 2]
	      switch $i {
		1 {
		  if {$bptype != "donttouch"} {set r -1000}
		}
		2 {
		  if {$bptype != "delete"} {set r -2000}
		}
	      }
	    }
	  } else {
	    set r -200
	  }
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {2}

#ManagedWin::open DebugWin

# Test: srcwin-4.4
# Desc: Click on line to set BP
gdbtk_test srcwin-4.4 "Click on line to set BP" {
  set r 0

  # click mouse button 1 at index 20.1
  if {![click $twin [$twin bbox 20.1] 1]} {
    set r "Click failed on line 20.1"
  } else {

    # now look for BP at line 20
    foreach bpnum [gdb_get_breakpoint_list] {
      set bpinfo [gdb_get_breakpoint_info $bpnum]
      lassign $bpinfo file func line pc type enabled disposition \
	ignore_count commands cond thread hit_count
      set file [lindex [file split $file] end]
      if {$file == "list0.h"} {
	if {$line == "20"} {
	  if {$enabled == "1"} {incr r}
	  if {$func == "foo"} {incr r}
	  if {$type == "breakpoint"} {incr r}
	  if {$disposition == "donttouch"} {incr r}
	}
      }
    }
  }
  set r
} {4}


# Test: srcwin-4.5
# Desc: Continue till here popup
gdbtk_test srcwin-4.5 "Continue till here popup" {
  set twin [$stw test_get twin]

  # Get coordinates of line 16
  set b [$twin bbox 16.1]
  set y [expr {[lindex $b 1] + ([lindex $b 3] / 2)}]

  # Continue to here
  $stw continue_to_here $twin $y

  # Where is the PC_TAG?
  set pcs {}
  set tags [$twin tag ranges PC_TAG]
  foreach {start end} $tags {
    lappend pcs [expr {int($start)}]
  }

  # Where are breakpoints?
  set bps {}
  set imgs [$twin dump -image 1.0 end]
  foreach {foo bar line} $imgs {
    lappend bps $line
  }

  list $pcs $bps
} {16 {10.0 20.0}}

# 5.1 balloon variables
# Test: srcwin-5.1
# Desc: variable balloon test
# continues to BP at line 20 and checks to see that value was updated
gdbtk_test srcwin-5.1 "variable balloon test" {
  # move pointer out of the way
  warp_pointer . 0 0 
  set r 0
  set twin [$stw test_get twin]

  # move pointer to variable "x" and check balloon
  set index [string first "x++" [$twin get 20.0 20.end]]
  move_mouse_to $twin [$twin bbox 20.$index]
  sleep 1
  if {[winfo ismapped $balloon]} {
    if {![string compare "x=9" [$balloon.label cget -text]]} {incr r}
    gdb_immediate "continue" 1
    sleep 1
    if {![string compare "x=13" [$balloon.label cget -text]]} {incr r}
  } else {
    set r -1
  }

  set r
} {2}

# 6.1 mixed mode disassembly of include file
# Test: srcwin-6.1
# Desc: Some versions of GDBtk can't do mixed-mode disassembly of a function
# that is in an include file. PR# mi/1101

gdbtk_test srcwin-6.1 "mixed mode disassembly of include file (mi/1101)" {
  set r 0
  $srcwin mode "" MIXED

  # check contents of name and function comboboxes
  set name [$statbar.name get]
  set func [$statbar.func get]
  if {$name != "list0.h"} {set r -1}
  if {$func != "foo"} {set r -2}
  
  # check contents of source window
  set twin [$stw test_get twin]
  set text [$twin get 1.0 end]
  # Is it correct? I don't know.  Guess we look for some pieces of source...
  if {[string first "static void" $text] != -1 &&
      [string first "foo (x)" $text] != -1 &&
      [string first "bar (x++);" $text] != -1} {
    set r 1
  }
  
  set r
} {1}

gdbtk_test_done
@


1.6
log
@2003-02-27  Martin M. Hunt  <hunt@@redhat.com>

	* srcwin.test: Use "list get" instead of "listget" to
	get contents of comboboxes.
	(2.1): Be less sensitive.

	* srcwin2.test: Use "list get" instead of "listget" to
	get contents of comboboxes
	(2-1.3): Accept assembly == mixed
	for no source tests.

	* srcwin3.test:  Use "list get" instead of "listget" to
	get contents of comboboxes
@
text
@a16 3
# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

@


1.5
log
@2002-04-26  Martin M. Hunt  <hunt@@redhat.com>

	* defs (gdbtk_test_done): Call gdbtk_force_quit.

2002-04-26  Martin M. Hunt  <hunt@@redhat.com>

	* srcwin.test (click): Take a button number as an arg.
	Generate a ButtonPress event then a ButtonRelease event
	for that button number.
	(4.4): Fix args for click().
	(5.1): Fix results again.
@
text
@d227 1
a227 1
  set names [$statbar.name listget 0 end]
d229 1
a229 1
  foreach f {list0.c list1.c list0.h} {
d235 1
a235 1
} {3}
d240 1
a240 1
  set names [$statbar.func listget 0 end]
d263 1
a263 1
  set names [$statbar.func listget 0 end]
d1167 3
a1169 2
# that is in an include file.
gdbtk_test srcwin-6.1 "mixed mode disassembly of include file" {
@


1.4
log
@2002-03-07  Martin M. Hunt  <hunt@@redhat.com>

	* srcwin.test (5.1): Adjust line numbers to
	test now runs correctly.
@
text
@d51 1
a51 1
proc click {win bbox event} {
d60 4
a63 1
  if {[catch {event generate $win $event -x $x -y $y} result]} {
d1085 1
a1085 1
  if {![click $twin [$twin bbox 20.1] <Button-1>]} {
d1153 1
a1153 1
    if {![string compare "x=5" [$balloon.label cget -text]]} {incr r}
d1155 2
a1156 1
    if {![string compare "x=9" [$balloon.label cget -text]]} {incr r}
@


1.3
log
@        * README: New file.

        * configure.in: Check for executable filename extension.
        * Makefile.in: Add filename extensions.
        * configure: Regenerated.

        * defs: Fix typo setting _test(verbose).
        (gdbtk_test_file): New proc to load executables into gdbtk.
        (gdbtk_test_run): New proc to run executables on gdbtk.
        * browser.exp: Don't check if DISPLAY is set: let
        gdbtk_initialize_display do it all for us.
        Call gdbtk_done when finished with tests.
        * c_variable.exp: Ditto.
        * console.exp: Ditto.
        * cpp_variable.exp: Ditto.
        Only run tests if c++ is supported in the configuration.
        * srcwin.exp: Ditto the DISPLAY stuff.
        Accumulate all test results for the end and report them then.

        * browser.test: Use gdbtk_test_file and gdbtk_test_run
        to load and run an executable.
        * c_variable.test: Use gdbtk_test_file and gdbtk_test_run
        to load and run an executable.
        * srcwin.test: Ditto.
        * srcwin1.test: Ditto.
        * srcwin2.test: Ditto.
        * browser.test: (set_search_mode): Use "configure
        -value" not "entryset" to set the combobox's value. We need
        to have the command fired.
        (browser-3.5): Remove trailing whitespace which causes test to
        fail.
        (browser-4.4): Expect something rational. Regexp "\_1$" cannot
        match "func_10"!
        (browser-4.5): Ditto.
        (browser-5.12): Select all files for search to make test
        match description.
        (browser-6.2): Renamed from another test also calledd 6.1.
        (browser-7.1): Delete all breakpoints at once without from_tty.
        Select all entries in the comobox before invoking BP set/delete
        button.
        (browser-7.2): Ditto.

        * list0.c, list1.c, list0.h: New files. Grabbed from gdb.base.
        * srcwin.exp: Use these local files instead of those in gdb.base.
@
text
@d1081 3
a1083 3
  # click mouse button 1 at index 14.1
  if {![click $twin [$twin bbox 14.1] <Button-1>]} {
    set r "Click failed on line 14.1"
d1086 1
a1086 1
    # now look for BP at line 14
d1093 1
a1093 1
	if {$line == "14"} {
d1111 2
a1112 2
  # Get coordinates of line 12
  set b [$twin bbox 12.1]
d1133 1
a1133 1
} {12 {10.0 14.0}}
d1138 1
a1138 1
# continues to BP at line 14 and checks to see that value was updated
d1146 2
a1147 2
  set index [string first "x++" [$twin get 10.0 10.end]]
  move_mouse_to $twin [$twin bbox 10.$index]
d1152 1
a1152 1
    if {![string compare "x=7" [$balloon.label cget -text]]} {incr r}
@


1.2
log
@2001-04-09  Martin M. Hunt  <hunt@@redhat.com>

	* srcwin1.test: Fix line numbers to correspond to
	modified source files in gdb.base. Commented-out test
	case for moving up past main() because sometimes there
	is a libc init function which makes the results
	inconsistent.
	* srcwin2.test: Ditto.
	* srcwin3.test: Ditto.
@
text
@d74 4
a77 10
if {$tcl_platform(platform) == "windows"} {
  set file [file join $objdir list.exe]
} else {
  set file [file join $objdir list]
}

# This isn't a test case, since if this fails, we're hosed.
if {[catch {gdb_cmd "file $file" 1} t]} {
  # an error occured loading the file
  gdbtk_test_error "loading \"$file\": $t"
d86 1
a86 1
run_executable
a1108 1
  set r 
d1111 1
a1111 1
  # click mouse button 1 at index 12.1
d1113 17
a1129 46
  if {![click $twin $b <ButtonPress-3>]} {
    set r "Click failed on $b"
  } else {
  
    # Hack. Just release the botton 10 pixels to the right and below
    # where the press was.  This should select the first entry in the
    # popup menu, "Continue to Here". This should be made more robust.
    if {[llength $b] == 4} {
      set x [expr [lindex $b 0] + [lindex $b 2] / 2 + 10]
      set y [expr [lindex $b 1] + [lindex $b 3] / 2 + 10]
      if {![click $twin [list $x $y 0 0] <ButtonRelease-3>]} {
	set r "Click failed at $x $y"
      } else {

	# check for PC_TAG on the correct line
	if {$r == 0} {
	  if {![catch {set z [$twin dump 1.0 end]}]} {
	    foreach {k v i} $z {
	      if {$k == "tagon"} {
		if {$v == "PC_TAG"} {
		  if {$i == "12.2"} {
		    incr r
		  } else {
		    incr r 5
		  }
		}
		if {$v == "STACK_TAG"} {incr r 10}
		if {$v == "BROWSE_TAG"} {incr r 100}
	      } elseif {$k == "image"} {
		switch $i {
		  10.0 {incr r}
		  12.0 {incr r}
		  14.0 {incr r}
		  default {incr r 1000}
		}
	      }
	    }
	  } else {
	    set r -4
	  }
	}
      }
    } else {
      set r "Line 12.1 was not visible..."
    }
    # should have seen on PC_TAG at line 12, plus BP images at 10.0, 12.0 and 14.0
d1131 3
a1133 2
  set r
} {4}
a1187 5

# Local variables:
# mode: tcl
# change-log-default-name: "ChangeLog-gdbtk"
# End:
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#   Copyright (C) 1999 Cygnus Solutions
d299 1
a299 1
	  if {$i == "5.2"} {
d343 1
a343 1
	  if {$i == "32.2"} {
d345 1
a345 1
	    if {$line_number == "32"} {
d478 1
a478 1
	    if {$i == "8.2"} {
d522 1
a522 1
	    if {$i == "32.2"} {
d568 2
a569 1
	    if {$i == "32.2"} {
d576 2
a577 1
	    if {$i == "22.2"} {
d616 2
a617 1
	    if {$i == "32.2"} {
d624 2
a625 1
	    if {$i == "7.2"} {
d664 1
a664 1
	    if {$i == "8.2"} {
d721 2
d725 6
a730 6
gdbtk_test srcwin-3.5 "stack up when at the top" {
  $srcwin stack up
  set r 0
  set name [$statbar.name get]
  set func [$statbar.func get]

d732 2
a733 2
  if {$name != "list0.c"} {set r -1}
  if {$func != "main"} {set r -2}
d736 3
a738 3
  set twin [$stw test_get twin]
  set a [$twin get 1.0 end]
  if {[string compare $file1(source) $a]} {set r -3}
d741 21
a761 21
  if {$r == 0} {
    if {![catch {set z [$twin dump -tag 1.0 end]}]} {
      foreach {k v i} $z {
	if {$k == "tagon"} {
	  if {$v == "STACK_TAG"} {
	    if {$i == "12.2"} {
	      incr r
	    } else {
	      incr r 5
	    }
	  }
	  if {$v == "PC_TAG"} {incr r 10}
	  if {$v == "BROWSE_TAG"} {incr r 100}
	}
      }
    } else {
      set r -4
    }
  }
  set r
} {1}
d786 1
a786 1
	    if {$i == "8.2"} {
d826 1
a826 1
	    if {$i == "32.2"} {
d866 1
a866 1
	    if {$i == "32.2"} {
d906 1
a906 1
	    if {$i == "8.2"} {
d915 1
a915 1
	  if {$i == "8.0"} {
d959 1
a959 1
	    if {$i == "8.2"} {
d968 1
a968 1
	  if {$i == "8.0"} {
d988 1
a988 1
	    if {$i == "8.2"} {
d1025 1
a1025 1
	    if {$i == "8.2"} {
d1185 1
a1185 1
    if {![string compare "x=6" [$balloon.label cget -text]]} {incr r}
d1187 1
a1187 1
    if {![string compare "x=8" [$balloon.label cget -text]]} {incr r}
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
