head	1.4;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.4
	gdb_7_6-branch:1.4.0.30
	gdb_7_5-branch:1.4.0.28
	gdb_7_4-branch:1.4.0.26
	gdb_7_3-branch:1.4.0.24
	gdb_7_1-branch:1.4.0.22
	gdb_7_0-branch:1.4.0.20
	arc-sim-20090309:1.4
	arc-insight_6_8-branch:1.4.0.18
	arc-insight_6_8-branchpoint:1.4
	insight_6_8-branch:1.4.0.16
	insight_6_8-branchpoint:1.4
	insight_6_6-20070208-release:1.4
	gdb_6_6-branch:1.4.0.14
	gdb_6_6-2006-11-15-branchpoint:1.4
	insight_6_5-20061003-release:1.4
	gdb_6_5-branch:1.4.0.12
	gdb_6_5-2006-05-14-branchpoint:1.4
	gdb_6_4-branch:1.4.0.10
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb-csl-arm-20051020-branch:1.4.0.8
	gdb-csl-arm-20051020-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.4
	gdb_6_1-branch:1.4.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	gdb_6_0-2003-10-04-release:1.4
	gdb_6_0-branch:1.4.0.4
	gdb_6_0-2003-06-23-branchpoint:1.4
	gdb_5_3-2002-12-12-release:1.4
	gdb_5_3-branch:1.4.0.2
	gdb_5_3-2002-09-04-branchpoint:1.4
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2002.04.26.21.11.26;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.26.06.00.07;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.07.20.39.32;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.45;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.45;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@2002-04-26  Martin M. Hunt  <hunt@@redhat.com>

	* defs (gdbtk_test_done): Call gdbtk_force_quit.

2002-04-26  Martin M. Hunt  <hunt@@redhat.com>

	* srcwin.test (click): Take a button number as an arg.
	Generate a ButtonPress event then a ButtonRelease event
	for that button number.
	(4.4): Fix args for click().
	(5.1): Fix results again.
@
text
@# This file contains support code for the gdbtk test suite.
# Copyright 2001 Red Hat, Inc.
#
# Based on the Tcl testsuite support code, portions of this file
# are Copyright (c) 1990-1994 The Regents of the University of California and
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
#
global _test env srcdir objdir

if {![info exists srcdir]} {
  if {[info exists env(SRCDIR)]} {
    set srcdir $env(SRCDIR)
  } else {
    set srcdir .
  }
}

if {![info exists objdir]} {
  if {[info exists env(OBJDIR)]} {
    set objdir $env(OBJDIR)
  } elseif {$_test(interactive)} {
    # If running interactively, assume that the objdir is
    # relative to the executable's location
    set objdir [file join [file dirname [info nameofexecutable]] testsuite gdb.gdbtk]
  } else {
    set objdir .
  }
}

if {![info exists _test(verbose)]} {
  if {[info exists env(GDBTK_VERBOSE)]} {
    set _test(verbose) $env(GDBTK_VERBOSE)
  } else {
    set _test(verbose) 0
  }
}
if {![info exists _test(tests)]} {

  if {[info exists env(GDBTK_TESTS)]} {
    set _test(tests) $env(GDBTK_TESTS)
  } else {
    set _test(tests) {}
  }
}

if {[info exists env(GDBTK_LOGFILE)]} {
  set _test(logfile) [open $env(GDBTK_LOGFILE) a+]
  fconfigure $_test(logfile) -buffering none
} else {
  set _test(logfile) {}
}

# Informs gdbtk internals that testsuite is running. An example
# where this is needed is the window manager, which must place
# all windows at some place on the screen so that the system's
# window manager does not interfere. This is reset in gdbtk_test_done.
set env(GDBTK_TEST_RUNNING) 1

# The gdb "file" command to use for gdbtk testing
# NOTE: This proc appends ".exe" to all windows' programs
proc gdbtk_test_file {filename} {
  global tcl_platform

  if {$tcl_platform(platform) == "windows"} {
    append filename ".exe"
  }

  set err [catch {gdb_cmd "file $filename" 1} text]
  if {$err} {
    error $text
  }

  return $text
}

proc gdbtk_test_run {{prog_args {}}} {
  global env

  # Get the target_info array from the testsuite
  array set target_info $env(TARGET_INFO)

  # We get the target ready by:
  # 1. Run all init commands
  # 2. Issue target command
  # 3. Issue load command
  # 4. Issue run command
  foreach cmd $target_info(init) {
    set err [catch {gdb_cmd $cmd 0} txt]
    if {$err} {
      _report_error "Target initialization command \"$cmd\" failed: $txt"
      return 0
    }
  }

  if {$target_info(target) != ""} {
    set err [catch {gdb_cmd $target_info(target) 0} txt]
    if {$err} {
      _report_error "Failed to connect to target: $txt"
      return 0
    }
  }

  if {$target_info(load) != ""} {
    set err [catch {gdb_cmd $target_info(load) 0} txt]
    if {$err} {
      _report_error "Failed to load: $txt"
      return 0
    }
  }

  if {$target_info(run) != ""} {
    set err [catch {gdb_cmd $target_info(run) 0} txt]
    if {$err} {
      _report_error "Could not run target with \"$target_info(run)\": $txt"
      return 0
    }
  }

  return 1
}

proc _report_error {msg} {
  global _test

  if {[info exists _test(interactive)] && $_test(interactive)} {
    # Dialog
    tk_messageBox -message $msg -icon error -type ok
  } else {
    # to stderr
    puts stderr $msg
  }
}

proc gdbtk_print_verbose {status name description script code answer} {
  global _test

  switch $code {
    0 {
      set code_words {}
    }
    1 {
      set code_words "Test generated error: $answer"
    }

    2 {
      set code_words "Test generated return exception;  result was: $answer"
    }

    3 {
      set code_words "Test generated break exception"
    }

    4 {
      set code_words "Test generated continue exception"
    }

    5 {
      set code_words "Test generated exception $code;  message was:$answer"
    }
  }

  if {$_test(verbose) > 1 \
	|| ($_test(verbose) != 1 && ($status == "ERROR" || $status == "FAIL"))} {
    # Printed when user verbose mode (verbose > 1) or an error/failure occurs
    # not running the testsuite (dejagnu)
    puts stdout "\n"
    puts stdout "==== $name $description"
    puts stdout "==== Contents of test case:"
    puts stdout "$script"
    if {$code_words != ""} {
      puts stdout $code_words
    }
    puts stdout "==== Result was:"
    puts stdout "$answer"
  } elseif {$_test(verbose)} {
    # Printed for the testsuite (verbose = 1)
    puts stdout "[list $status $name $description $code_words]"

    if {$_test(logfile) != ""} {
      puts $_test(logfile) "\n"
      puts $_test(logfile) "==== $name $description"
      puts $_test(logfile) "==== Contents of test case:"
      puts $_test(logfile) "$script"
      if {$code_words != ""} {
	puts $_test(logfile) $code_words
      }
      puts $_test(logfile) "==== Result was:"
      puts $_test(logfile) "$answer"
    }
  }
}

# gdbtk_test
#
# This procedure runs a test and prints an error message if the
# test fails.
#
# Arguments:
# name -		Name of test, in the form foo-1.2.
# description -		Short textual description of the test, to
#			help humans understand what it does.
# script -		Script to run to carry out the test.  It must
#			return a result that can be checked for
#			correctness.
# answer -		Expected result from script.

proc gdbtk_test {name description script answer} {
  global _test test_ran

  set test_ran 0
  if {[string compare $_test(tests) ""] != 0} then {
    set ok 0
    foreach test $_test(tests) {
      if [string match $test $name] then {
	set ok 1
	break
      }
    }
    if !$ok then return
  }

  set code [catch {uplevel $script} result]
  set test_ran 1
  if {$code != 0} {
    # Error
    gdbtk_print_verbose ERROR $name $description $script \
      $code $result
  } elseif {[string compare $result $answer] == 0} { 
    if {[string index $name 0] == "*"} {
      # XPASS
      set HOW XPASS
    } else {
      set HOW PASS
    }

    if {$_test(verbose)} {
      gdbtk_print_verbose $HOW $name $description $script \
	$code $result
      if {$_test(verbose) != 1} {
	puts stdout "++++ $name ${HOW}ED"
      }
    }
    if {$_test(logfile) != ""} {
      puts $_test(logfile) "++++ $name ${HOW}ED"
    }
  } else {
    if {[string index $name 0] == "*"} {
      # XFAIL
      set HOW XFAIL
    } else {
      set HOW FAIL
    }

    gdbtk_print_verbose $HOW $name $description $script \
      $code $result
    if {$_test(verbose) != 1} {
      puts stdout "---- Result should have been:"
      puts stdout "$answer"
      puts stdout "---- $name ${HOW}ED" 
    }
    if {$_test(logfile) != ""} {
      puts $_test(logfile) "---- Result should have been:"
      puts $_test(logfile) "$answer"
      puts $_test(logfile) "---- $name ${HOW}ED" 
    }
  }
}

proc gdbtk_dotests {file args} {
  global _test
  set savedTests $_test(tests)
  set _test(tests) $args
  source $file
  set _test(tests) $savedTests
}

proc gdbtk_test_done {} {
  global _test env

  if {$_test(logfile) != ""} {
    close $_test(logfile)
  }

  set env(GDBTK_TEST_RUNNING) 0
  if {![info exists _test(interactive)] || !$_test(interactive)} {
    gdbtk_force_quit
  }
}

proc gdbtk_test_error {desc} {
  set desc [join [split $desc \n] |]
  puts "ERROR \{$desc\} \{\} \{\}"
  gdbtk_test_done
}

# Override the warning dialog. We don't want to see them.
rename show_warning real_show_warning
proc show_warning {msg} {
  global _test

  set str "INSIGHT TESTSUITE WARNING: $msg"
  puts stdout $str
  if {$_test(logfile) != ""} {
    puts $_test(logfile) $str
  }
}
@


1.3
log
@	* defs (_report_error): Fix typo.
	(show_warning): Redefine the standard warning handler
	so that we don't end up stalling tests with a warning dialog.

	* windows.exp: New file.
	* windows.test: New file.
@
text
@d279 1
a279 1
  
d286 1
a286 1
    gdb_force_quit
@


1.2
log
@        * README: New file.

        * configure.in: Check for executable filename extension.
        * Makefile.in: Add filename extensions.
        * configure: Regenerated.

        * defs: Fix typo setting _test(verbose).
        (gdbtk_test_file): New proc to load executables into gdbtk.
        (gdbtk_test_run): New proc to run executables on gdbtk.
        * browser.exp: Don't check if DISPLAY is set: let
        gdbtk_initialize_display do it all for us.
        Call gdbtk_done when finished with tests.
        * c_variable.exp: Ditto.
        * console.exp: Ditto.
        * cpp_variable.exp: Ditto.
        Only run tests if c++ is supported in the configuration.
        * srcwin.exp: Ditto the DISPLAY stuff.
        Accumulate all test results for the end and report them then.

        * browser.test: Use gdbtk_test_file and gdbtk_test_run
        to load and run an executable.
        * c_variable.test: Use gdbtk_test_file and gdbtk_test_run
        to load and run an executable.
        * srcwin.test: Ditto.
        * srcwin1.test: Ditto.
        * srcwin2.test: Ditto.
        * browser.test: (set_search_mode): Use "configure
        -value" not "entryset" to set the combobox's value. We need
        to have the command fired.
        (browser-3.5): Remove trailing whitespace which causes test to
        fail.
        (browser-4.4): Expect something rational. Regexp "\_1$" cannot
        match "func_10"!
        (browser-4.5): Ditto.
        (browser-5.12): Select all files for search to make test
        match description.
        (browser-6.2): Renamed from another test also calledd 6.1.
        (browser-7.1): Delete all breakpoints at once without from_tty.
        Select all entries in the comobox before invoking BP set/delete
        button.
        (browser-7.2): Ditto.

        * list0.c, list1.c, list0.h: New files. Grabbed from gdb.base.
        * srcwin.exp: Use these local files instead of those in gdb.base.
@
text
@d125 1
a125 1
  if {[info exists _tesst(interactive)] && $_test(interactive)} {
d294 12
@


1.1
log
@Initial revision
@
text
@d2 1
d8 1
a8 1
global srcdir _test env srcdir objdir
d34 1
a34 1
    set _test(verbose)
d58 75
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
