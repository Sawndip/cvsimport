head	1.4;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.4
	gdb_7_6-branch:1.4.0.12
	gdb_7_5-branch:1.4.0.10
	gdb_7_4-branch:1.4.0.8
	gdb_7_3-branch:1.4.0.6
	gdb_7_1-branch:1.4.0.4
	gdb_7_0-branch:1.4.0.2
	arc-sim-20090309:1.3
	arc-insight_6_8-branch:1.3.0.20
	arc-insight_6_8-branchpoint:1.3
	insight_6_8-branch:1.3.0.18
	insight_6_8-branchpoint:1.3
	insight_6_6-20070208-release:1.3
	gdb_6_6-branch:1.3.0.16
	gdb_6_6-2006-11-15-branchpoint:1.3
	insight_6_5-20061003-release:1.3
	gdb_6_5-branch:1.3.0.14
	gdb_6_5-2006-05-14-branchpoint:1.3
	gdb_6_4-branch:1.3.0.12
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb-csl-arm-20051020-branch:1.3.0.10
	gdb-csl-arm-20051020-branchpoint:1.3
	gdb_6_1-2004-04-05-release:1.3
	gdb_6_1-branch:1.3.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	gdb_6_0-2003-10-04-release:1.3
	gdb_6_0-branch:1.3.0.6
	gdb_6_0-2003-06-23-branchpoint:1.3
	gdb_5_3-2002-12-12-release:1.3
	gdb_5_3-branch:1.3.0.4
	gdb_5_3-2002-09-04-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2008.12.21.17.38.55;	author jkratoch;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.18.17.28.53;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.07.20.39.32;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.45;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.45;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	Fix for PR gdb/8648.
	* gdb.arch/ppc-fp.exp, gdb.arch/vsx-regs.exp, gdb.base/watchpoint-hw.c,
	gdb.gdbtk/browser.test, gdb.gdbtk/console.test, gdb.gdbtk/srcwin.test,
	gdb.gdbtk/srcwin2.test, gdb.gdbtk/srcwin3.test, gdb.gdbtk/windows.test,
	gdb.threads/tls2.c: Remove reference to bug-gdb@@prep.ai.mit.edu .
@
text
@#   Copyright (C) 1998, 1999, 2002 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# This file was written by Keith Seitz (keiths@@cygnus.com)

# Read in the standard defs file

if {![gdbtk_read_defs]} {
  break
}

global objdir test_ran
global console text
set console [ManagedWin::open Console]
set text [$console test set _twin]

#####                            #####
#                                    #
#  Helper functions for this module  #
#                                    #
#####                            #####

# console_command --
#      Invoke STRING as a command in the console window and
#      return the result
proc console_command {string} { 
  global console text

  # Save current position
  set line [lindex [split [$text index cmdmark] .] 0]
  incr line 1

  # Insert and invoke command
  $text insert end $string
  $console invoke
  update

  # Get the result
  set end [lindex [split [$text index cmdmark] .] 0]
  incr end -1
  return [$text get $line.0 [list $end.0 lineend]]
} 

# get_cmd_line --
#     Return the command line
proc get_cmd_line {} {
  global text

  update
  set index [$text index cmdmark]
  return [$text get [list $index linestart] [list $index lineend]]
}

# clear_command_line --
#     Clear the command line
proc clear_command_line {} {
  global text
  $text delete {cmdmark + 1 char} insert
}

#####         #####
#                 #
#  CONSOLE TESTS  #
#                 #
#####         #####

#
# Miscellaneous tests
#

# Test:  console-misc-1
# Desc:  Change console prompt
gdbtk_test console-misc-1 {change console prompt} {
  # Insert the "set prompt" command into the text widget
  console_command {set prompt (test) }

  $text get {cmdmark linestart} {cmdmark lineend}
} {(test) }
if {$test_ran} {
  console_command {set prompt (gdb) }
}

#
# Paste tests
#

# Test:  console-paste-1
# Desc:  Paste the X selection into console window
gdbtk_test console-paste-1 {paste X text} {
  # This is cheesy, but it works... Create a text widget
  # which holds the current selection...
  text .test_text
  .test_text insert end "this is some pasted text"
  .test_text tag add sel 1.0 {1.0 lineend}
  event generate .test_text <<Copy>>
  event generate $text <<Paste>>
  get_cmd_line
} {(gdb) this is some pasted text}
if {$test_ran} {
  destroy .test_text
  clear_command_line
}

#
# Test for errors
#

# Test:  console-error-1
# Desc:  Check if console window reports internal gdb errors
gdbtk_test console-error-1 {invoke unknown command} {
  console_command {this_command_doesn't_exist}
} {Error: Undefined command: "this".  Try "help".
}

#
# History tests
#

# Test:  console-history-1.1
# Desc:  Exercise the up-history functionality
gdbtk_test console-history-1.1 {up history once} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}
  # this doesn't seem to work reliably: event generate $text <Up>
  $console test _previous
  get_cmd_line
} {(gdb) help si}
if {$test_ran} {
  clear_command_line
}

# Test:  console-history-1.2
# Desc:  Exercise the up-history functionality
gdbtk_test console-history-1.2 {up history twice} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}
  # this doesn't seem to work reliably: event generate $text <Up>
  # this doesn't seem to work reliably: event generate $text <Up>
  $console test _previous
  $console test _previous
  get_cmd_line
} {(gdb) help quit}
if {$test_ran} {
  clear_command_line
}

# Test:  console-history-1.3
# Desc:  Exercise the up-history functionality
gdbtk_test console-history-1.3 {up history four times} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}

  for {set i 0} {$i < 4} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Up>
    $console test _previous
  }
  get_cmd_line
} {(gdb) show remotedevice}
if {$test_ran} {
  clear_command_line
}

# Test:  console-history-1.4
# Desc:  Exercise the up-history functionality
gdbtk_test console-history-1.4 {up fourteen times} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}
  for {set i 0} {$i < 14} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Up>
    $console test _previous
  }
  get_cmd_line
} {(gdb) show annotate}
if {$test_ran} {
  clear_command_line
}

# Test:  console-history-1.5
# Desc:  Exercise the up-history search functionality
gdbtk_test console-history-1.5 {up search} {
 # Add some commands into the command buffer
  console_command {show height}
  console_command {show annotate}
  console_command {show complaints}
  console_command {print main}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}

  $text insert end "sh"
  # this doesn't seem to work reliably: event generate $text <Shift-Up>
  # this doesn't seem to work reliably: event generate $text <Shift-Up>
  # this doesn't seem to work reliably: event generate $text <Shift-Up>
  $console test _search_history
  $console test _search_history
  $console test _search_history
  get_cmd_line
} {(gdb) show annotate}


# Test:  console-history-1.6
# Desc:  Exercise the down-history search functionality
gdbtk_test console-history-1.6 {down search} {
  # this doesn't seem to work reliably: event generate $text <Shift-Down>
  # this doesn't seem to work reliably: event generate $text <Shift-Down>
  $console test _rsearch_history
  $console test _rsearch_history
  get_cmd_line
} {(gdb) show remotelogbase}

# Test:  console-history-1.7
# Desc:  Down-history search to bottom
# We go back down until the original partialcommand is displayed
gdbtk_test console-history-1.7 {down search to bottom} {
  # this doesn't seem to work reliably: event generate $text <Shift-Down>
  # this doesn't seem to work reliably: event generate $text <Shift-Down>
  $console test _rsearch_history
  $console test _rsearch_history
  get_cmd_line
} {(gdb) sh}

# Test:  console-history-1.8
# Desc:  Up-history search to top
# We go up until there are no matches
gdbtk_test console-history-1.8 {up search to top} {
  for {set i 0} {$i < 100} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Shift-Up>
    $console test _search_history
  }
  get_cmd_line
} {(gdb) show annotate}

if {$test_ran} {
  clear_command_line
}

# Test:  console-history-2.1
# Desc:  Exercise the down-history functionality
gdbtk_test console-history-2.1 {down once} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}

  for {set i 0} {$i < 14} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Up>
    $console test _previous
  }
  # this doesn't seem to work reliably: event generate $text <Down>
  $console test _next
  get_cmd_line
} {(gdb) show complaints}
if {$test_ran} {
  clear_command_line
}

# Test:  console-history-2.2
# Desc:  Exercise the down-history functionality
gdbtk_test console-history-2.2 {down twice} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}

  for {set i 0} {$i < 14} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Up>
    $console test _previous
  }

  # this doesn't seem to work reliably: event generate $text <Down>
  # this doesn't seem to work reliably: event generate $text <Down>
  $console test _next
  $console test _next
  get_cmd_line
} {(gdb) show confirm}
if {$test_ran} {
  clear_command_line
}

# Test:  console-history-2.3
# Desc:  Exercise the down-history functionality
gdbtk_test console-history-2.3 {down four times} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}

  for {set i 0} {$i < 14} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Up>
    $console test _previous
  }

  for {set i 0} {$i < 4} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Down>
    $console test _next
  }
  get_cmd_line
} {(gdb) show language}
if {$test_ran} {
  clear_command_line
}

# Test:  console-history-2.4
# Desc:  Exercise the down-history functionality
gdbtk_test console-history-2.4 {down infinitely} {
  # Add some commands into the command buffer
  console_command {show annotate}
  console_command {show complaints}
  console_command {show confirm}
  console_command {show height}
  console_command {show language}
  console_command {show print demangle}
  console_command {show remotebaud}
  console_command {show remotebreak}
  console_command {show remotecache}
  console_command {show remotedebug}
  console_command {show remotedevice}
  console_command {show remotelogbase}
  console_command {help quit}
  console_command {help si}
  for {set i 0} {$i < 14} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Up>
    $console test _previous
  }

  for {set i 0} {$i < 20} {incr i} {
    # this doesn't seem to work reliably: event generate $text <Down>
    $console test _next
  }
  get_cmd_line
} {(gdb) }
if {$test_ran} {
  clear_command_line
}

#
# gdb - gdbtk Interface Tests
#

# Test:  console-interface-1.1
# Desc:  Verify that a "file" command in the console window causes
#        gdb to invoke the pre-/post-add-symbol hooks
set file_loaded 0
gdbtk_test console-interface-1.1 {file command goes through hooks} {
  global TEST1_RESULT TEST2_RESULT

  # This is really ugly, but its the only way to do this...
  rename gdbtk_tcl_pre_add_symbol pre_add
  rename gdbtk_tcl_post_add_symbol post_add

  proc gdbtk_tcl_pre_add_symbol {file} {
    global TEST1_RESULT

    set TEST1_RESULT $file
    pre_add $file
  }
  proc gdbtk_tcl_post_add_symbol {} {
    global TEST2_RESULT

    set TEST2_RESULT ok
    post_add
  }

  # load a file and make sure we went through the pre/post_add_symbol hooks
  set TEST1_RESULT {}
  set TEST2_RESULT {}
  set file [file join $objdir simple]
  console_command "file $file"
  if {$TEST1_RESULT != $file} {
    set result "did not go through gdbtk_tcl_pre_add_symbol ($TEST1_RESULT)"
  } elseif {$TEST2_RESULT != "ok"} {
    set result "did not go through gdbtk_tcl_post_add_symbol"
  } else {
    set result {}
    set file_loaded 1
  }

  set result
} {}
if {$test_ran} {
  rename gdbtk_tcl_pre_add_symbol {}
  rename gdbtk_tcl_post_add_symbol {}
  rename pre_add gdbtk_tcl_pre_add_symbol
  rename post_add gdbtk_tcl_post_add_symbol
}

#
#  Exit
#
gdbtk_test_done
@


1.3
log
@	* console.test: Don't rely on "event generate" to do
	keystrokes. It just doesn't work. Use the console window's
	"test" method instead.
	Use Console::test instead of Console::get_text.
@
text
@a16 3
# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

@


1.2
log
@        * README: New file.

        * configure.in: Check for executable filename extension.
        * Makefile.in: Add filename extensions.
        * configure: Regenerated.

        * defs: Fix typo setting _test(verbose).
        (gdbtk_test_file): New proc to load executables into gdbtk.
        (gdbtk_test_run): New proc to run executables on gdbtk.
        * browser.exp: Don't check if DISPLAY is set: let
        gdbtk_initialize_display do it all for us.
        Call gdbtk_done when finished with tests.
        * c_variable.exp: Ditto.
        * console.exp: Ditto.
        * cpp_variable.exp: Ditto.
        Only run tests if c++ is supported in the configuration.
        * srcwin.exp: Ditto the DISPLAY stuff.
        Accumulate all test results for the end and report them then.

        * browser.test: Use gdbtk_test_file and gdbtk_test_run
        to load and run an executable.
        * c_variable.test: Use gdbtk_test_file and gdbtk_test_run
        to load and run an executable.
        * srcwin.test: Ditto.
        * srcwin1.test: Ditto.
        * srcwin2.test: Ditto.
        * browser.test: (set_search_mode): Use "configure
        -value" not "entryset" to set the combobox's value. We need
        to have the command fired.
        (browser-3.5): Remove trailing whitespace which causes test to
        fail.
        (browser-4.4): Expect something rational. Regexp "\_1$" cannot
        match "func_10"!
        (browser-4.5): Ditto.
        (browser-5.12): Select all files for search to make test
        match description.
        (browser-6.2): Renamed from another test also calledd 6.1.
        (browser-7.1): Delete all breakpoints at once without from_tty.
        Select all entries in the comobox before invoking BP set/delete
        button.
        (browser-7.2): Ditto.

        * list0.c, list1.c, list0.h: New files. Grabbed from gdb.base.
        * srcwin.exp: Use these local files instead of those in gdb.base.
@
text
@d1 1
a1 1
#   Copyright (C) 1998, 1999 Cygnus Solutions
d31 1
a31 1
set text [$console get_text]
d153 2
a154 1
  event generate $text <Up>
d179 4
a182 2
  event generate $text <Up>
  event generate $text <Up>
d209 2
a210 1
    event generate $text <Up>
d237 2
a238 1
    event generate $text <Up>
d259 6
a264 3
  event generate $text <Shift-Up>
  event generate $text <Shift-Up>
  event generate $text <Shift-Up>
d272 4
a275 2
  event generate $text <Shift-Down>
  event generate $text <Shift-Down>
d283 4
a286 2
  event generate $text <Shift-Down>
  event generate $text <Shift-Down>
d295 2
a296 1
    event generate $text <Shift-Up>
d325 2
a326 1
    event generate $text <Up>
d328 2
a329 1
  event generate $text <Down>
d356 2
a357 1
    event generate $text <Up>
d360 4
a363 2
  event generate $text <Down>
  event generate $text <Down>
d390 2
a391 1
    event generate $text <Up>
d395 2
a396 1
  event generate $text <Down>
d423 2
a424 1
    event generate $text <Up>
d428 2
a429 1
    event generate $text <Down>
@


1.1
log
@Initial revision
@
text
@d111 1
a111 1

a469 5

# Local variables:
# mode: tcl
# change-log-default-name: "ChangeLog-gdbtk"
# End:
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
