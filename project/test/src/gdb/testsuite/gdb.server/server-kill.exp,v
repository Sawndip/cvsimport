head	1.3;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.1.2.4
	gdb_7_6-2013-04-26-release:1.1.2.4
	gdb_7_6-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2013.04.09.15.26.44;	author jkratoch;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.04.02.16.04;	author qiyao;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.22.20.39.29;	author jkratoch;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.03.22.20.39.29;	author jkratoch;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2013.03.22.20.41.46;	author jkratoch;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2013.04.04.02.21.17;	author qiyao;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2013.04.09.15.27.14;	author jkratoch;	state Exp;
branches;
next	;


desc
@@


1.3
log
@gdb/testsuite/
	* gdb.server/server-kill.exp (tstatus): Permit also ECONNRESET
	response.
@
text
@# This testcase is part of GDB, the GNU debugger.
#
# Copyright 2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib gdbserver-support.exp

standard_testfile

if {[skip_gdbserver_tests]} {
    return 0
}

if { [prepare_for_testing ${testfile}.exp ${testfile}] } {
    return -1
}

# Make sure we're disconnected, in case we're testing with an
# extended-remote board, therefore already connected.
gdb_test "disconnect" ".*"

gdbserver_run ""

# Otherwise the breakpoint at 'main' would not cause insert
# breakpoints during first step.
delete_breakpoints

set server_pid [exp_pid -i [board_info target fileid]]
remote_exec target "kill -9 $server_pid"

# Force GDB to talk with GDBserver, so that we can get the
# "connection closed" error.
gdb_test "tstatus" {Remote connection closed|Remote communication error\.  Target disconnected\.: Connection reset by peer\.}
@


1.2
log
@gdb/testsuite/

	* gdb.server/server-kill.exp: Use command 'tstatus' instead of
	'step'.
@
text
@d45 1
a45 1
gdb_test "tstatus" "Remote connection closed"
@


1.1
log
@gdb/
	* exceptions.h (enum errors): New entry TARGET_CLOSE_ERROR.
	* remote.c (trace_error): Remove the special handling of '2'.
	(readchar) <SERIAL_EOF>
	(readchar) <SERIAL_ERROR>
	(getpkt_or_notif_sane_1): Use TARGET_CLOSE_ERROR for them.
	(remote_get_trace_status): Call throw_exception if EX is
	TARGET_CLOSE_ERROR.
	* utils.c (perror_with_name): Rename to ...
	(throw_perror_with_name): ... here.  New parameter errcode, describe it
	in the function comment.
	(perror_with_name): New function wrapper.
	* utils.h (enum errors): New stub declaration.
	(throw_perror_with_name): New declaration.

gdb/testsuite/
	* gdb.server/server-kill.c: New file.
	* gdb.server/server-kill.exp: New file.
@
text
@d43 3
a45 1
gdb_test "step" "Remote connection closed"
@


1.1.2.1
log
@file server-kill.exp was added on branch gdb_7_6-branch on 2013-03-22 20:41:46 +0000
@
text
@d1 43
@


1.1.2.2
log
@gdb/
	* exceptions.h (enum errors): New entry TARGET_CLOSE_ERROR.
	* remote.c (trace_error): Remove the special handling of '2'.
	(readchar) <SERIAL_EOF>
	(readchar) <SERIAL_ERROR>
	(getpkt_or_notif_sane_1): Use TARGET_CLOSE_ERROR for them.
	(remote_get_trace_status): Call throw_exception if EX is
	TARGET_CLOSE_ERROR.
	* utils.c (perror_with_name): Rename to ...
	(throw_perror_with_name): ... here.  New parameter errcode, describe it
	in the function comment.
	(perror_with_name): New function wrapper.
	* utils.h (enum errors): New stub declaration.
	(throw_perror_with_name): New declaration.

gdb/testsuite/
	* gdb.server/server-kill.c: New file.
	* gdb.server/server-kill.exp: New file.
@
text
@a0 43
# This testcase is part of GDB, the GNU debugger.
#
# Copyright 2013 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib gdbserver-support.exp

standard_testfile

if {[skip_gdbserver_tests]} {
    return 0
}

if { [prepare_for_testing ${testfile}.exp ${testfile}] } {
    return -1
}

# Make sure we're disconnected, in case we're testing with an
# extended-remote board, therefore already connected.
gdb_test "disconnect" ".*"

gdbserver_run ""

# Otherwise the breakpoint at 'main' would not cause insert
# breakpoints during first step.
delete_breakpoints

set server_pid [exp_pid -i [board_info target fileid]]
remote_exec target "kill -9 $server_pid"

gdb_test "step" "Remote connection closed"
@


1.1.2.3
log
@gdb/testsuite/

	* gdb.server/server-kill.exp: Use command 'tstatus' instead of
	'step'.
@
text
@d43 1
a43 3
# Force GDB to talk with GDBserver, so that we can get the
# "connection closed" error.
gdb_test "tstatus" "Remote connection closed"
@


1.1.2.4
log
@gdb/testsuite/
	* gdb.server/server-kill.exp (tstatus): Permit also ECONNRESET
	response.
@
text
@d45 1
a45 1
gdb_test "tstatus" {Remote connection closed|Remote communication error\.  Target disconnected\.: Connection reset by peer\.}
@


