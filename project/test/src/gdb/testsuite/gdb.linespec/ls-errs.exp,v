head	1.6;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.6
	gdb_7_6-2013-04-26-release:1.6
	gdb_7_6-branch:1.6.0.2
	gdb_7_6-2013-03-12-branchpoint:1.6
	gdb_7_5_1-2012-11-29-release:1.3.2.2
	gdb_7_5-2012-08-17-release:1.3.2.1
	gdb_7_5-branch:1.3.0.2
	gdb_7_5-2012-07-18-branchpoint:1.3;
locks; strict;
comment	@# @;


1.6
date	2013.01.01.06.41.24;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.11.16.12.05;	author devans;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.30.17.45.37;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.25.20.31.21;	author tromey;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2012.06.13.18.06.07;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.05.18.50.29;	author kseitz;	state Exp;
branches;
next	;

1.3.2.1
date	2012.07.30.18.03.58;	author kseitz;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2012.10.11.16.57.44;	author devans;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@# Copyright 2012-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Tests for linespec error conditions

standard_testfile
set exefile $testfile

if {[prepare_for_testing $testfile $exefile $srcfile \
	 {debug nowarnings}]} {
    return -1
}

# Turn off the pending breakpoint queries.
gdb_test_no_output "set breakpoint pending off"

# We intentionally do not use gdb_breakpoint for these tests.

# Add the (invalid) LINESPEC to the test array named in ARRAY_NAME.
# Use the index into ::error_messages MSG_ID and ARGS to create
# an error message which is the expect result of attempting to
# break on the given LINESPEC.
proc add {array_name linespec msg_id args} {
    global error_messages
    upvar $array_name tests

    lappend tests(linespecs) $linespec
    set tests("$linespec") [string_to_regexp \
				[eval format \$error_messages($msg_id) $args]]
}

# Common error message format strings.
array set error_messages {
    invalid_file "No source file named %s."
    invalid_function "Function \"%s\" not defined."
    invalid_var_or_func "Undefined convenience variable or function \"%s\" not defined."
    invalid_function_f "Function \"%s\" not defined in \"%s\"."
    invalid_var_or_func_f \
	"Undefined convenience variable or function \"%s\" not defined in \"%s\"."
    invalid_label "No label \"%s\" defined in function \"%s\"."
    invalid_offset "No line %d in the current file."
    invalid_offset_f "No line %d in file \"%s\"."
    unexpected "malformed linespec error: unexpected %s"
    unexpected_opt "malformed linespec error: unexpected %s, \"%s\""
    unmatched_quote "unmatched quote"
}

# Some commonly used whitespace tests around ':'.
set spaces [list ":" ": " " :" " : " "\t:  " "  :\t" "\t:\t" " \t:\t " \
		"\t  \t:\t  \t  \t"]

# A list of invalid offsets.
set invalid_offsets [list -100 +500 1000]

# THE_TESTS will hold all of our test information.  Array index
# "linespecs" will contain the complete list of all linespecs
# to be tested.  An array index of \"$linespec\" will contain
# the expected result.
set the_tests(linespecs) {}

# Try some simple, invalid linespecs involving spaces.
foreach x $spaces {
    add the_tests $x unexpected "colon"
}

# Test invalid filespecs starting with offset.  This is done
# first so that default offsets are tested.
foreach x $invalid_offsets {
    set offset $x

    # Relative offsets are relative to line 16.  Adjust
    # expected offset from error message accordingly.
    if {[string index $x 0] == "+" ||
	[string index $x 0] == "-"} {
	incr offset 16
    }
    add the_tests $x invalid_offset $offset
}

# Test offsets with trailing tokens w/ and w/o spaces.
foreach x $spaces {
    add the_tests "3$x" unexpected "colon"
    add the_tests "+10$x" unexpected "colon"
    add the_tests "-10$x" unexpected "colon"
}

foreach x {1 +1 +100 -10} {
    add the_tests "3 $x" unexpected_opt "number" $x
    add the_tests "+10 $x" unexpected_opt "number" $x
    add the_tests "-10 $x" unexpected_opt "number" $x
}

add the_tests "3 foo" unexpected_opt "string" "foo"
add the_tests "+10 foo" unexpected_opt "string" "foo"
add the_tests "-10 foo" unexpected_opt "string" "foo"

# Test invalid linespecs starting with filename.
foreach x [list "this_file_doesn't_exist.c" \
	       "this file has spaces.c" \
	       "\"file::colons.c\"" \
	       "'file::colons.c'" \
	       "\"this \"file\" has quotes.c\"" \
	       "'this \"file\" has quotes.c'" \
	       "'this 'file' has quotes.c'" \
	       "\"this 'file' has quotes.c\"" \
	       "\"spaces: and :colons.c\"" \
	       "'more: :spaces: :and  colons::.c'"] {
    # Remove any quoting from FILENAME for the error message.
    add the_tests "$x:3" invalid_file [string trim $x \"']
}

# Test unmatched quotes.
foreach x {"\"src-file.c'" "'src-file.c"} {
    add the_tests "$x:3" unmatched_quote
}

add the_tests $srcfile invalid_function $srcfile
foreach x {"foo" " foo" " foo "} {
    # Trim any leading/trailing whitespace for error messages.
    add the_tests "$srcfile:$x" invalid_function_f [string trim $x] $srcfile
    add the_tests "$srcfile:main:$x" invalid_label [string trim $x] "main" 
}

foreach x $spaces {
    add the_tests "$srcfile$x" unexpected "end of input"
    add the_tests "$srcfile:main$x" unexpected "end of input"
}

add the_tests "${srcfile}::" invalid_function "${srcfile}::"
add the_tests "$srcfile:3 1" unexpected_opt "number" "1"
add the_tests "$srcfile:3 +100" unexpected_opt "number" "+100"
add the_tests "$srcfile:3 -100" unexpected_opt "number" "-100"
add the_tests "$srcfile:3 foo" unexpected_opt "string" "foo"

foreach x $invalid_offsets {
    add the_tests "$srcfile:$x" invalid_offset_f $x $srcfile
    add the_tests "\"$srcfile:$x\"" invalid_offset_f $x $srcfile
    add the_tests "'$srcfile:$x'" invalid_offset_f $x $srcfile
}

# Test invalid filespecs starting with function.
foreach x {"foobar" "foo::bar" "foo.bar" "foo ." "foo bar" "foo 1" \
	       "foo 0" "foo +10" "foo -10" "foo +100" "foo -100"} {
    add the_tests $x invalid_function $x
}

foreach x $spaces {
    add the_tests "main${x}there" invalid_label "there" "main"
    add the_tests "main:here${x}" unexpected "end of input"
}

add the_tests "main 3" invalid_function "main 3"
add the_tests "main +100" invalid_function "main +100"
add the_tests "main -100" invalid_function "main -100"
add the_tests "main foo" invalid_function "main foo"

foreach x {"3" "+100" "-100" "foo"} {
    add the_tests "main:here $x" invalid_label "here $x" "main"
}

foreach x {"if" "task" "thread"} {
    add the_tests $x invalid_function $x
}

add the_tests "'main.c'flubber" unexpected_opt "string" "flubber"
add the_tests "'main.c',21" invalid_function "main.c"
add the_tests "'main.c' " invalid_function "main.c"
add the_tests "'main.c'3" unexpected_opt "number" "3"
add the_tests "'main.c'+3" unexpected_opt "number" "+3"

# Test undefined convenience variables.
set x {$zippo}
add the_tests $x invalid_var_or_func $x
add the_tests "$srcfile:$x" invalid_var_or_func_f $x $srcfile

# Run the tests
foreach linespec $the_tests(linespecs) {
    gdb_test "break $linespec" $the_tests("$linespec")
}
@


1.5
log
@	PR breakpoints/14643.
	* linespec.c (struct ls_parser): New member keyword_ok.
	(linespec_lexer_lex_string): Add comment.
	(linespec_lexer_lex_one): Ignore keywords if it's the wrong place
	for one.
	(parse_linespec): Set keyword_ok.

	testsuite/
	* gdb.linespec/ls-errs.exp: Change tests of "b if|task|thread".
	* gdb.linespec/thread.c: New file.
	* gdb.linespec/thread.exp: New file.
@
text
@d1 1
a1 1
# Copyright 2012 Free Software Foundation, Inc.
@


1.4
log
@	* linespec.c (linespec_lex_number): A number followed
	by quotes is a valid number, too.

	* gdb.linespec/ls-errs.exp: Check some quote-enclosed
	linespecs.
@
text
@d174 1
a174 1
    add the_tests $x unexpected_opt "keyword" $x
@


1.3
log
@	* gdb.linespec/ls-errs.exp: Use standard_testfile.
	* gdb.linespec/ls-dollar.exp: Use standard_testfile.
	* gdb.linespec/linespec.exp: Use standard_testfile.
@
text
@d149 2
@


1.3.2.1
log
@	* linespec.c (linespec_lex_number): A number followed
	by quotes is a valid number, too.

	* gdb.linespec/ls-errs.exp: Check some quote-enclosed
	linespecs.
@
text
@a148 2
    add the_tests "\"$srcfile:$x\"" invalid_offset_f $x $srcfile
    add the_tests "'$srcfile:$x'" invalid_offset_f $x $srcfile
@


1.3.2.2
log
@	PR breakpoints/14643.
	* linespec.c (struct ls_parser): New member keyword_ok.
	(linespec_lexer_lex_string): Add comment.
	(linespec_lexer_lex_one): Ignore keywords if it's the wrong place
	for one.
	(parse_linespec): Set keyword_ok.

	testsuite/
	* gdb.linespec/ls-errs.exp: Change tests of "b if|task|thread".
	* gdb.linespec/thread.c: New file.
	* gdb.linespec/thread.exp: New file.
@
text
@d174 1
a174 1
    add the_tests $x invalid_function $x
@


1.2
log
@	PR breakpoints/13798 and mi/11541
	* gdb.linespec/ls-errs.exp: Add a few more tests for
	filenames with spaces and colons.
@
text
@d18 2
a19 4
set base ls-errs
set srcfile "$base.c"
set testfile "$base.exp"
set exefile $base
@


1.1
log
@linespec rewrite:
	* linespec.c (decode_compound): Remove.
	(enum offset_relative_sign): New enum.
	(struct line_offset): New struct.
	(struct linespec): New struct.
	(struct linespec_state): Move file_symtabs,
	user_filename, and user_function into struct linespec.
	Make result an anonymous struct holding vectors of
	symbolp and minsym_and_objfile_d.
	Add language member.
	(enum ls_token_type): New enum.
	(linespec_keywords): New array.
	(struct ls_token): New struct.
	(struct ls_parser): New struct.
	(linespec_lexer_lex_number): New function.
	(linespec_lexer_lex_keyword): New function.
	(is_ada_operator): New function.
	(skip_quote_char): New function.
	(copy_token_string): New function.
	(is_closing_quote_enclosed): New function.
	(find_parameter_list_end): New function.
	(linespec_lexer_lex_string): New function.
	(linespec_lexer_lex_one): New function.
	(linespec_lexer_consume_token): New function.
	(linespec_lexer_peek_token): New function.
	(cplusplus_error): Remove unused function.
	(find_methods): Update comment.
	(find_toplevel_char): Return const.
	(is_objc_method_format): Remove unused function.
	(find_toplevel_string): New function.
	(is_linespec_boundary): Remove.
	(symbol_not_found_error): New function.
	(find_method_overload_end): Remove function.
	(unexpected_linespec_error): New function.
	(keep_name_info): Remove.
	(linespec_parse_line_offset): New function.
	(linespec_parse_basic): New function.
	(canonicalize_linespec): New function.
	(decode_line_internal): Remove.
	(create_sals_line_offset): New function adapted from
	decode_all_digits.
	(convert_linespec_to_sals): New function.
	(parse_linespec): New function.
	(linespec_parser_new): New function.
	(linespec_state_destructor): Change parameter type to
	struct linespec_state *.
	Add language parameter.
	Remove freeing of moved members.
	(linespec_parser_delete): New function.
	(decode_line_full): Use parse_linespec and linespec_parser_new.
	(decode_line_1): Likewise.
	(decode_indirect): Rename to ...
	(linespec_expression_to_pc): ... this and rewrite
	to simply find CORE_ADDR, storing this result for later
	conversion to SALs.
	(locate_first_half): Remove.
	(deocde_objc): Add parameter LS.
	Initialize new struct collect_info members.
	Handle minimal symbols, too.
	(decode_compound): Delete.
	(lookup_prefix_sym): Rewrite.
	(compare_msymbols): New function.
	(find_method): Rewrite.
	Do not call cplusplus_error.
	(symtabs_from_filename): Rewrite.
	(collect_function_symbols): Delete.
	(find_function_symbols): Rewrite without ARGPTR-style
	processing.
	(decode_all_digits): Delete. (Rewritten as create_sals_line_offset.)
	(decode_dollar): Adapted and renamed to ...
	(linespec_parse_variable): ... this.
	(find_linespec_symbols): New function.
	(decode_label): Adapted and renamed to ...
	(find_label_symbols): ... this.
	(decode_digits_list_mode): Add and use LS argument.
	(decode_digits_ordinary): Likewise.
	(collect_symbols): Do not collect SALs, just symbols and msymbols.
	If in list mode, allow any symbol class.  Otherwise, only
	permit LOC_BLOCK symbols.
	(minsym_found): Update comments.
	(search_minsyms_for_name): Do not convert the matching symbol
	into a SAL.  Simply push the symbol and objfile into the
	result vector.
	(decode_variable): Delete. Contents adapted into
	find_linespec_symbols.

	* cp-support.c (SKIP_SPACE): Remove.
	(operator_tokens): Remove unused global.
	(cp_validate_operator): Remove.
	* cp-support.h (cp_validate_operator): Remove declaration.

	* gdb.base/advance.exp: Update error message for
	"advance malformed" test.
	* gdb.base/break.exp: Likewise for "breakpoint with
	trailing garbage" test.
	* gdb.base/hbreak2.exp: Likewise for "hardware breakpoint
	with trailing garbage" test.
	* gdb.base/jump.exp: Likewise for "jump with trailing
	argument junk" test.
	* gdb.base/sepdebug.exp: Likewise for "breakpoint with
	trailng garbage" test.
	* gdb.base/until.exp: Likewise for "malformed until" test.
	* gdb.cp/ovldbreak.exp: Create the breakpoint table
	for "breakpoint info (after setting on all)".
	* gdb.cp/userdef.exp: Remove quoting for "break A2::operator+"
	tests.
	* gdb.cp/cplabel.cc: New file.
	* gdb.cp/cplabel.exp: New test.
	* gdb.linespec/ls-errs.c: New file.
	* gdb.linespec/ls-errs.exp: New test.
@
text
@d119 3
a121 1
	       "\"this 'file' has quotes.c\""] {
@

