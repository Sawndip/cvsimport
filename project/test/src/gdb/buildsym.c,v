head	1.110;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.107
	gdb_7_6-2013-04-26-release:1.107
	gdb_7_6-branch:1.107.0.2
	gdb_7_6-2013-03-12-branchpoint:1.107
	gdb_7_5_1-2012-11-29-release:1.101
	gdb_7_5-2012-08-17-release:1.101
	gdb_7_5-branch:1.101.0.2
	gdb_7_5-2012-07-18-branchpoint:1.101
	gdb_7_4_1-2012-04-26-release:1.89.2.1
	gdb_7_4-2012-01-24-release:1.89.2.1
	gdb_7_4-branch:1.89.0.2
	gdb_7_4-2011-12-13-branchpoint:1.89
	gdb_7_3_1-2011-09-04-release:1.85
	gdb_7_3-2011-07-26-release:1.85
	gdb_7_3-branch:1.85.0.2
	gdb_7_3-2011-04-01-branchpoint:1.85
	gdb_7_2-2010-09-02-release:1.80
	gdb_7_2-branch:1.80.0.2
	gdb_7_2-2010-07-07-branchpoint:1.80
	gdb_7_1-2010-03-18-release:1.78
	gdb_7_1-branch:1.78.0.2
	gdb_7_1-2010-02-18-branchpoint:1.78
	gdb_7_0_1-2009-12-22-release:1.76
	gdb_7_0-2009-10-06-release:1.76
	gdb_7_0-branch:1.76.0.4
	gdb_7_0-2009-09-16-branchpoint:1.76
	arc-sim-20090309:1.59
	msnyder-checkpoint-072509-branch:1.76.0.2
	msnyder-checkpoint-072509-branchpoint:1.76
	arc-insight_6_8-branch:1.59.0.6
	arc-insight_6_8-branchpoint:1.59
	insight_6_8-branch:1.59.0.4
	insight_6_8-branchpoint:1.59
	reverse-20081226-branch:1.67.0.6
	reverse-20081226-branchpoint:1.67
	multiprocess-20081120-branch:1.67.0.4
	multiprocess-20081120-branchpoint:1.67
	reverse-20080930-branch:1.67.0.2
	reverse-20080930-branchpoint:1.67
	reverse-20080717-branch:1.64.0.4
	reverse-20080717-branchpoint:1.64
	msnyder-reverse-20080609-branch:1.64.0.2
	msnyder-reverse-20080609-branchpoint:1.64
	drow-reverse-20070409-branch:1.47.0.2
	drow-reverse-20070409-branchpoint:1.47
	gdb_6_8-2008-03-27-release:1.59
	gdb_6_8-branch:1.59.0.2
	gdb_6_8-2008-02-26-branchpoint:1.59
	gdb_6_7_1-2007-10-29-release:1.50
	gdb_6_7-2007-10-10-release:1.50
	gdb_6_7-branch:1.50.0.2
	gdb_6_7-2007-09-07-branchpoint:1.50
	insight_6_6-20070208-release:1.43
	gdb_6_6-2006-12-18-release:1.43
	gdb_6_6-branch:1.43.0.2
	gdb_6_6-2006-11-15-branchpoint:1.43
	insight_6_5-20061003-release:1.42
	gdb-csl-symbian-6_4_50_20060226-12:1.42.8.2
	gdb-csl-sourcerygxx-3_4_4-25:1.41
	nickrob-async-20060828-mergepoint:1.43
	gdb-csl-symbian-6_4_50_20060226-11:1.42.8.1
	gdb-csl-sourcerygxx-4_1-17:1.42
	gdb-csl-20060226-branch-local-2:1.42
	gdb-csl-sourcerygxx-4_1-14:1.42
	gdb-csl-sourcerygxx-4_1-13:1.42
	gdb-csl-sourcerygxx-4_1-12:1.42
	gdb-csl-sourcerygxx-3_4_4-21:1.42
	gdb_6_5-20060621-release:1.42
	gdb-csl-sourcerygxx-4_1-9:1.42
	gdb-csl-sourcerygxx-4_1-8:1.42
	gdb-csl-sourcerygxx-4_1-7:1.42
	gdb-csl-arm-2006q1-6:1.42
	gdb-csl-sourcerygxx-4_1-6:1.42
	gdb-csl-symbian-6_4_50_20060226-10:1.42.8.1
	gdb-csl-symbian-6_4_50_20060226-9:1.42.8.1
	gdb-csl-symbian-6_4_50_20060226-8:1.42.8.1
	gdb-csl-coldfire-4_1-11:1.42
	gdb-csl-sourcerygxx-3_4_4-19:1.42
	gdb-csl-coldfire-4_1-10:1.42
	gdb_6_5-branch:1.42.0.16
	gdb_6_5-2006-05-14-branchpoint:1.42
	gdb-csl-sourcerygxx-4_1-5:1.42
	nickrob-async-20060513-branch:1.42.0.14
	nickrob-async-20060513-branchpoint:1.42
	gdb-csl-sourcerygxx-4_1-4:1.42
	msnyder-reverse-20060502-branch:1.42.0.12
	msnyder-reverse-20060502-branchpoint:1.42
	gdb-csl-morpho-4_1-4:1.42
	gdb-csl-sourcerygxx-3_4_4-17:1.42
	readline_5_1-import-branch:1.42.0.10
	readline_5_1-import-branchpoint:1.42
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.42
	gdb-csl-symbian-20060226-branch:1.42.0.8
	gdb-csl-symbian-20060226-branchpoint:1.42
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.42
	msnyder-reverse-20060331-branch:1.42.0.6
	msnyder-reverse-20060331-branchpoint:1.42
	gdb-csl-available-20060303-branch:1.42.0.4
	gdb-csl-available-20060303-branchpoint:1.42
	gdb-csl-20060226-branch:1.42.0.2
	gdb-csl-20060226-branchpoint:1.42
	gdb_6_4-20051202-release:1.41
	msnyder-fork-checkpoint-branch:1.41.0.12
	msnyder-fork-checkpoint-branchpoint:1.41
	gdb-csl-gxxpro-6_3-branch:1.41.0.10
	gdb-csl-gxxpro-6_3-branchpoint:1.41
	gdb_6_4-branch:1.41.0.8
	gdb_6_4-2005-11-01-branchpoint:1.41
	gdb-csl-arm-20051020-branch:1.41.0.6
	gdb-csl-arm-20051020-branchpoint:1.41
	msnyder-tracepoint-checkpoint-branch:1.41.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.41
	gdb-csl-arm-20050325-2005-q1b:1.41
	gdb-csl-arm-20050325-2005-q1a:1.41
	csl-arm-20050325-branch:1.41.0.2
	csl-arm-20050325-branchpoint:1.41
	gdb-post-i18n-errorwarning-20050211:1.41
	gdb-pre-i18n-errorwarning-20050211:1.41
	gdb_6_3-20041109-release:1.40
	gdb_6_3-branch:1.40.0.2
	gdb_6_3-20041019-branchpoint:1.40
	drow_intercu-merge-20040921:1.40
	drow_intercu-merge-20040915:1.40
	jimb-gdb_6_2-e500-branch:1.39.0.16
	jimb-gdb_6_2-e500-branchpoint:1.39
	gdb_6_2-20040730-release:1.39
	gdb_6_2-branch:1.39.0.12
	gdb_6_2-2004-07-10-gmt-branchpoint:1.39
	gdb_6_1_1-20040616-release:1.39
	gdb_6_1-2004-04-05-release:1.39
	drow_intercu-merge-20040402:1.39
	drow_intercu-merge-20040327:1.39
	ezannoni_pie-20040323-branch:1.39.0.10
	ezannoni_pie-20040323-branchpoint:1.39
	cagney_tramp-20040321-mergepoint:1.39
	cagney_tramp-20040309-branch:1.39.0.8
	cagney_tramp-20040309-branchpoint:1.39
	gdb_6_1-branch:1.39.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.39
	drow_intercu-20040221-branch:1.39.0.4
	drow_intercu-20040221-branchpoint:1.39
	cagney_bfdfile-20040213-branch:1.39.0.2
	cagney_bfdfile-20040213-branchpoint:1.39
	drow-cplus-merge-20040208:1.39
	carlton_dictionary-20040126-merge:1.38
	cagney_bigcore-20040122-branch:1.38.0.2
	cagney_bigcore-20040122-branchpoint:1.38
	drow-cplus-merge-20040113:1.38
	drow-cplus-merge-20031224:1.38
	drow-cplus-merge-20031220:1.38
	carlton_dictionary-20031215-merge:1.38
	drow-cplus-merge-20031214:1.38
	carlton-dictionary-20031111-merge:1.38
	gdb_6_0-2003-10-04-release:1.33
	kettenis_sparc-20030918-branch:1.36.0.4
	kettenis_sparc-20030918-branchpoint:1.36
	carlton_dictionary-20030917-merge:1.36
	ezannoni_pie-20030916-branchpoint:1.36
	ezannoni_pie-20030916-branch:1.36.0.2
	cagney_x86i386-20030821-branch:1.33.0.6
	cagney_x86i386-20030821-branchpoint:1.33
	carlton_dictionary-20030805-merge:1.33
	carlton_dictionary-20030627-merge:1.33
	gdb_6_0-branch:1.33.0.4
	gdb_6_0-2003-06-23-branchpoint:1.33
	jimb-ppc64-linux-20030613-branch:1.33.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.33
	cagney_convert-20030606-branch:1.32.0.12
	cagney_convert-20030606-branchpoint:1.32
	cagney_writestrings-20030508-branch:1.32.0.10
	cagney_writestrings-20030508-branchpoint:1.32
	jimb-ppc64-linux-20030528-branch:1.32.0.8
	jimb-ppc64-linux-20030528-branchpoint:1.32
	carlton_dictionary-20030523-merge:1.32
	cagney_fileio-20030521-branch:1.32.0.6
	cagney_fileio-20030521-branchpoint:1.32
	kettenis_i386newframe-20030517-mergepoint:1.32
	jimb-ppc64-linux-20030509-branch:1.32.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.32
	kettenis_i386newframe-20030504-mergepoint:1.32
	carlton_dictionary-20030430-merge:1.32
	kettenis_i386newframe-20030419-branch:1.32.0.2
	kettenis_i386newframe-20030419-branchpoint:1.32
	carlton_dictionary-20030416-merge:1.32
	cagney_frameaddr-20030409-mergepoint:1.31
	kettenis_i386newframe-20030406-branch:1.31.0.14
	kettenis_i386newframe-20030406-branchpoint:1.31
	cagney_frameaddr-20030403-branchpoint:1.31
	cagney_frameaddr-20030403-branch:1.31.0.12
	cagney_framebase-20030330-mergepoint:1.31
	cagney_framebase-20030326-branch:1.31.0.10
	cagney_framebase-20030326-branchpoint:1.31
	cagney_lazyid-20030317-branch:1.31.0.8
	cagney_lazyid-20030317-branchpoint:1.31
	kettenis-i386newframe-20030316-mergepoint:1.31
	offbyone-20030313-branch:1.31.0.6
	offbyone-20030313-branchpoint:1.31
	kettenis-i386newframe-20030308-branch:1.31.0.4
	kettenis-i386newframe-20030308-branchpoint:1.31
	carlton_dictionary-20030305-merge:1.31
	cagney_offbyone-20030303-branch:1.31.0.2
	cagney_offbyone-20030303-branchpoint:1.31
	carlton_dictionary-20030207-merge:1.27
	interps-20030203-mergepoint:1.27
	interps-20030202-branch:1.27.0.2
	interps-20030202-branchpoint:1.27
	cagney-unwind-20030108-branch:1.26.0.2
	cagney-unwind-20030108-branchpoint:1.26
	carlton_dictionary-20021223-merge:1.24
	gdb_5_3-2002-12-12-release:1.19
	carlton_dictionary-20021115-merge:1.21
	kseitz_interps-20021105-merge:1.21
	kseitz_interps-20021103-merge:1.21
	drow-cplus-merge-20021020:1.20
	drow-cplus-merge-20021025:1.20
	carlton_dictionary-20021025-merge:1.20
	carlton_dictionary-20021011-merge:1.20
	drow-cplus-branch:1.20.0.4
	drow-cplus-branchpoint:1.20
	kseitz_interps-20020930-merge:1.20
	carlton_dictionary-20020927-merge:1.20
	carlton_dictionary-branch:1.20.0.2
	carlton_dictionary-20020920-branchpoint:1.20
	gdb_5_3-branch:1.19.0.6
	gdb_5_3-2002-09-04-branchpoint:1.19
	kseitz_interps-20020829-merge:1.19
	cagney_sysregs-20020825-branch:1.19.0.4
	cagney_sysregs-20020825-branchpoint:1.19
	readline_4_3-import-branch:1.19.0.2
	readline_4_3-import-branchpoint:1.19
	gdb_5_2_1-2002-07-23-release:1.14
	kseitz_interps-20020528-branch:1.16.0.4
	kseitz_interps-20020528-branchpoint:1.16
	cagney_regbuf-20020515-branch:1.16.0.2
	cagney_regbuf-20020515-branchpoint:1.16
	jimb-macro-020506-branch:1.14.0.4
	jimb-macro-020506-branchpoint:1.14
	gdb_5_2-2002-04-29-release:1.14
	gdb_5_2-branch:1.14.0.2
	gdb_5_2-2002-03-03-branchpoint:1.14
	gdb_5_1_1-2002-01-24-release:1.11
	gdb_5_1_0_1-2002-01-03-release:1.11
	cygnus_cvs_20020108_pre:1.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.11
	gdb_5_1_0_1-2002-01-03-branch:1.11.0.8
	gdb_5_1-2001-11-21-release:1.11
	gdb_s390-2001-09-26-branch:1.11.0.6
	gdb_s390-2001-09-26-branchpoint:1.11
	gdb_5_1-2001-07-29-branch:1.11.0.4
	gdb_5_1-2001-07-29-branchpoint:1.11
	dberlin-typesystem-branch:1.11.0.2
	dberlin-typesystem-branchpoint:1.11
	gdb-post-ptid_t-2001-05-03:1.11
	gdb-pre-ptid_t-2001-05-03:1.11
	insight-precleanup-2001-01-01:1.7
	gdb-post-protoization-2000-07-29:1.6
	gdb-pre-protoization-2000-07-29:1.5
	gdb-premipsmulti-2000-06-06-branch:1.5.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.5
	gdb-post-params-removal-2000-06-04:1.4
	gdb-pre-params-removal-2000-06-04:1.4
	gdb-post-params-removal-2000-05-28:1.4
	gdb-pre-params-removal-2000-05-28:1.4
	gdb_5_0-2000-05-19-release:1.4
	gdb_4_18_2-2000-05-18-release:1.4
	gdb_4_95_1-2000-05-11-snapshot:1.4
	gdb_4_95_0-2000-04-27-snapshot:1.4
	gdb_5_0-2000-04-10-branch:1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.4
	repo-unification-2000-02-06:1.1.1.4
	insight-2000-02-04:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.3
	gdb-1999-12-07:1.1.1.3
	gdb-1999-12-06:1.1.1.3
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.3
	gdb-1999-09-21:1.1.1.3
	gdb-1999-09-13:1.1.1.3
	gdb-1999-09-08:1.1.1.3
	gdb-1999-08-30:1.1.1.3
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.110
date	2013.09.25.22.24.05;	author devans;	state Exp;
branches;
next	1.109;

1.109
date	2013.08.20.18.57.00;	author devans;	state Exp;
branches;
next	1.108;

1.108
date	2013.04.01.12.48.03;	author aristovski;	state Exp;
branches;
next	1.107;

1.107
date	2013.01.21.18.05.12;	author tromey;	state Exp;
branches;
next	1.106;

1.106
date	2013.01.01.06.32.40;	author brobecke;	state Exp;
branches;
next	1.105;

1.105
date	2012.12.10.17.09.28;	author tromey;	state Exp;
branches;
next	1.104;

1.104
date	2012.10.03.17.04.59;	author devans;	state Exp;
branches;
next	1.103;

1.103
date	2012.09.19.20.06.47;	author devans;	state Exp;
branches;
next	1.102;

1.102
date	2012.07.18.19.59.35;	author tromey;	state Exp;
branches;
next	1.101;

1.101
date	2012.07.13.20.26.10;	author jkratoch;	state Exp;
branches;
next	1.100;

1.100
date	2012.07.10.20.20.15;	author devans;	state Exp;
branches;
next	1.99;

1.99
date	2012.07.10.03.49.25;	author devans;	state Exp;
branches;
next	1.98;

1.98
date	2012.06.05.01.17.55;	author devans;	state Exp;
branches;
next	1.97;

1.97
date	2012.05.29.20.23.17;	author devans;	state Exp;
branches;
next	1.96;

1.96
date	2012.05.29.18.54.50;	author devans;	state Exp;
branches;
next	1.95;

1.95
date	2012.05.10.19.59.12;	author tromey;	state Exp;
branches;
next	1.94;

1.94
date	2012.05.10.19.50.07;	author tromey;	state Exp;
branches;
next	1.93;

1.93
date	2012.04.23.18.53.16;	author tromey;	state Exp;
branches;
next	1.92;

1.92
date	2012.03.12.14.15.21;	author tromey;	state Exp;
branches;
next	1.91;

1.91
date	2012.02.07.04.48.18;	author devans;	state Exp;
branches;
next	1.90;

1.90
date	2012.01.04.08.16.59;	author brobecke;	state Exp;
branches;
next	1.89;

1.89
date	2011.11.15.23.12.30;	author devans;	state Exp;
branches
	1.89.2.1;
next	1.88;

1.88
date	2011.04.06.00.07.06;	author jkratoch;	state Exp;
branches;
next	1.87;

1.87
date	2011.04.04.15.11.19;	author tromey;	state Exp;
branches;
next	1.86;

1.86
date	2011.04.04.14.29.26;	author tromey;	state Exp;
branches;
next	1.85;

1.85
date	2011.03.23.18.23.54;	author ktietz;	state Exp;
branches;
next	1.84;

1.84
date	2011.01.05.22.22.47;	author msnyder;	state Exp;
branches;
next	1.83;

1.83
date	2011.01.01.15.32.58;	author brobecke;	state Exp;
branches;
next	1.82;

1.82
date	2010.12.29.21.44.26;	author msnyder;	state Exp;
branches;
next	1.81;

1.81
date	2010.10.01.20.26.10;	author tromey;	state Exp;
branches;
next	1.80;

1.80
date	2010.05.13.22.44.02;	author msnyder;	state Exp;
branches;
next	1.79;

1.79
date	2010.03.12.21.13.15;	author swagiaal;	state Exp;
branches;
next	1.78;

1.78
date	2010.01.01.07.31.30;	author brobecke;	state Exp;
branches
	1.78.2.1;
next	1.77;

1.77
date	2009.10.06.22.47.19;	author muller;	state Exp;
branches;
next	1.76;

1.76
date	2009.07.02.17.21.05;	author uweigand;	state Exp;
branches;
next	1.75;

1.75
date	2009.06.29.13.18.37;	author uweigand;	state Exp;
branches;
next	1.74;

1.74
date	2009.06.28.00.20.22;	author drow;	state Exp;
branches;
next	1.73;

1.73
date	2009.06.23.17.46.51;	author swagiaal;	state Exp;
branches;
next	1.72;

1.72
date	2009.06.22.19.50.10;	author jkratoch;	state Exp;
branches;
next	1.71;

1.71
date	2009.06.17.18.41.50;	author uweigand;	state Exp;
branches;
next	1.70;

1.70
date	2009.05.23.16.17.13;	author jkratoch;	state Exp;
branches;
next	1.69;

1.69
date	2009.03.24.01.32.46;	author brobecke;	state Exp;
branches;
next	1.68;

1.68
date	2009.01.03.05.57.50;	author brobecke;	state Exp;
branches;
next	1.67;

1.67
date	2008.08.21.18.40.34;	author drow;	state Exp;
branches;
next	1.66;

1.66
date	2008.08.21.18.14.38;	author drow;	state Exp;
branches;
next	1.65;

1.65
date	2008.08.10.18.41.33;	author palves;	state Exp;
branches;
next	1.64;

1.64
date	2008.05.27.19.29.51;	author schwab;	state Exp;
branches;
next	1.63;

1.63
date	2008.05.22.17.00.07;	author uweigand;	state Exp;
branches;
next	1.62;

1.62
date	2008.05.22.16.59.01;	author uweigand;	state Exp;
branches;
next	1.61;

1.61
date	2008.05.22.16.58.02;	author uweigand;	state Exp;
branches;
next	1.60;

1.60
date	2008.04.17.17.54.04;	author devans;	state Exp;
branches;
next	1.59;

1.59
date	2008.01.01.22.53.09;	author drow;	state Exp;
branches;
next	1.58;

1.58
date	2007.12.04.23.43.57;	author jimb;	state Exp;
branches;
next	1.57;

1.57
date	2007.11.15.22.54.22;	author devans;	state Exp;
branches;
next	1.56;

1.56
date	2007.11.14.23.14.40;	author devans;	state Exp;
branches;
next	1.55;

1.55
date	2007.11.05.18.06.10;	author brobecke;	state Exp;
branches;
next	1.54;

1.54
date	2007.10.23.12.04.57;	author brobecke;	state Exp;
branches;
next	1.53;

1.53
date	2007.10.12.15.34.45;	author uweigand;	state Exp;
branches;
next	1.52;

1.52
date	2007.10.11.17.38.59;	author drow;	state Exp;
branches;
next	1.51;

1.51
date	2007.09.21.18.01.24;	author brobecke;	state Exp;
branches;
next	1.50;

1.50
date	2007.08.23.18.08.26;	author brobecke;	state Exp;
branches;
next	1.49;

1.49
date	2007.06.09.13.49.20;	author uweigand;	state Exp;
branches;
next	1.48;

1.48
date	2007.05.14.14.10.35;	author drow;	state Exp;
branches;
next	1.47;

1.47
date	2007.02.27.22.57.42;	author brobecke;	state Exp;
branches;
next	1.46;

1.46
date	2007.01.21.16.49.40;	author drow;	state Exp;
branches;
next	1.45;

1.45
date	2007.01.09.17.58.50;	author drow;	state Exp;
branches;
next	1.44;

1.44
date	2007.01.04.20.26.41;	author drow;	state Exp;
branches;
next	1.43;

1.43
date	2006.08.25.16.32.32;	author drow;	state Exp;
branches;
next	1.42;

1.42
date	2005.12.17.22.33.59;	author eliz;	state Exp;
branches
	1.42.8.1
	1.42.14.1;
next	1.41;

1.41
date	2005.01.29.17.53.25;	author ibr;	state Exp;
branches;
next	1.40;

1.40
date	2004.09.11.10.24.45;	author hilfingr;	state Exp;
branches;
next	1.39;

1.39
date	2004.02.07.23.13.46;	author ezannoni;	state Exp;
branches
	1.39.4.1;
next	1.38;

1.38
date	2003.10.06.19.27.12;	author cagney;	state Exp;
branches;
next	1.37;

1.37
date	2003.09.21.01.26.44;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2003.09.16.18.56.34;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2003.09.14.16.32.12;	author cagney;	state Exp;
branches;
next	1.34;

1.34
date	2003.09.11.23.43.56;	author carlton;	state Exp;
branches;
next	1.33;

1.33
date	2003.06.11.23.29.46;	author carlton;	state Exp;
branches;
next	1.32;

1.32
date	2003.04.15.23.07.11;	author carlton;	state Exp;
branches;
next	1.31;

1.31
date	2003.02.25.21.36.17;	author carlton;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.21.15.24.17;	author drow;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.20.17.17.23;	author carlton;	state Exp;
branches;
next	1.28;

1.28
date	2003.02.20.00.01.05;	author carlton;	state Exp;
branches;
next	1.27;

1.27
date	2003.01.14.00.15.05;	author ezannoni;	state Exp;
branches;
next	1.26;

1.26
date	2003.01.09.18.30.32;	author cagney;	state Exp;
branches;
next	1.25;

1.25
date	2003.01.02.14.27.26;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2002.12.17.00.39.07;	author kevinb;	state Exp;
branches;
next	1.23;

1.23
date	2002.11.18.20.57.55;	author kdienes;	state Exp;
branches;
next	1.22;

1.22
date	2002.11.18.19.14.10;	author kdienes;	state Exp;
branches;
next	1.21;

1.21
date	2002.10.25.22.25.55;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.10.23.45.26;	author msnyder;	state Exp;
branches
	1.20.2.1
	1.20.4.1;
next	1.19;

1.19
date	2002.08.21.00.57.42;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.29.22.55.26;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.11.20.46.18;	author drow;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.15.21.19.18;	author jimb;	state Exp;
branches
	1.16.4.1;
next	1.15;

1.15
date	2002.05.12.04.20.05;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.20.19.42.04;	author drow;	state Exp;
branches
	1.14.4.1;
next	1.13;

1.13
date	2002.01.20.19.12.23;	author drow;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.12.23.51.28;	author drow;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.30.10.30.27;	author eliz;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.04.06.13.14.55;	author fnasser;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.06.08.21.06;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.25.04.45.11;	author kevinb;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.15.01.01.45;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.30.01.48.24;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.05.20.49.53;	author dberlin;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.21.03.04.19;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.21.02.51.07;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.18.22.15.46;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.33.58;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.89.2.1
date	2012.01.06.04.43.05;	author brobecke;	state Exp;
branches;
next	;

1.78.2.1
date	2010.04.08.17.15.10;	author swagiaal;	state Exp;
branches;
next	;

1.42.8.1
date	2006.04.17.14.21.14;	author drow;	state Exp;
branches;
next	1.42.8.2;

1.42.8.2
date	2006.09.28.20.18.16;	author drow;	state Exp;
branches;
next	;

1.42.14.1
date	2006.08.28.07.48.50;	author nickrob;	state Exp;
branches;
next	;

1.39.4.1
date	2004.09.16.17.00.54;	author drow;	state Exp;
branches;
next	;

1.20.2.1
date	2002.09.20.23.55.03;	author carlton;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2002.09.24.00.04.50;	author carlton;	state Exp;
branches;
next	1.20.2.3;

1.20.2.3
date	2002.09.25.00.19.26;	author carlton;	state Exp;
branches;
next	1.20.2.4;

1.20.2.4
date	2002.10.08.00.12.23;	author carlton;	state Exp;
branches;
next	1.20.2.5;

1.20.2.5
date	2002.10.09.23.08.10;	author carlton;	state Exp;
branches;
next	1.20.2.6;

1.20.2.6
date	2002.10.15.00.20.32;	author carlton;	state Exp;
branches;
next	1.20.2.7;

1.20.2.7
date	2002.10.15.23.59.21;	author carlton;	state Exp;
branches;
next	1.20.2.8;

1.20.2.8
date	2002.10.18.23.42.57;	author carlton;	state Exp;
branches;
next	1.20.2.9;

1.20.2.9
date	2002.10.22.00.17.27;	author carlton;	state Exp;
branches;
next	1.20.2.10;

1.20.2.10
date	2002.10.22.23.22.56;	author carlton;	state Exp;
branches;
next	1.20.2.11;

1.20.2.11
date	2002.11.14.00.07.54;	author carlton;	state Exp;
branches;
next	1.20.2.12;

1.20.2.12
date	2002.11.15.01.10.42;	author carlton;	state Exp;
branches;
next	1.20.2.13;

1.20.2.13
date	2002.11.15.19.18.37;	author carlton;	state Exp;
branches;
next	1.20.2.14;

1.20.2.14
date	2002.11.20.01.09.53;	author carlton;	state Exp;
branches;
next	1.20.2.15;

1.20.2.15
date	2002.11.22.01.16.13;	author carlton;	state Exp;
branches;
next	1.20.2.16;

1.20.2.16
date	2002.11.28.00.53.21;	author carlton;	state Exp;
branches;
next	1.20.2.17;

1.20.2.17
date	2002.12.21.00.17.43;	author carlton;	state Exp;
branches;
next	1.20.2.18;

1.20.2.18
date	2002.12.23.19.38.13;	author carlton;	state Exp;
branches;
next	1.20.2.19;

1.20.2.19
date	2003.01.07.01.28.22;	author carlton;	state Exp;
branches;
next	1.20.2.20;

1.20.2.20
date	2003.02.07.19.17.45;	author carlton;	state Exp;
branches;
next	1.20.2.21;

1.20.2.21
date	2003.02.12.23.37.09;	author carlton;	state Exp;
branches;
next	1.20.2.22;

1.20.2.22
date	2003.02.22.01.33.13;	author carlton;	state Exp;
branches;
next	1.20.2.23;

1.20.2.23
date	2003.03.06.00.56.24;	author carlton;	state Exp;
branches;
next	1.20.2.24;

1.20.2.24
date	2003.03.11.01.01.10;	author carlton;	state Exp;
branches;
next	1.20.2.25;

1.20.2.25
date	2003.04.16.19.56.51;	author carlton;	state Exp;
branches;
next	1.20.2.26;

1.20.2.26
date	2003.06.27.21.49.46;	author carlton;	state Exp;
branches;
next	1.20.2.27;

1.20.2.27
date	2003.09.17.21.28.07;	author carlton;	state Exp;
branches;
next	1.20.2.28;

1.20.2.28
date	2003.11.11.23.50.38;	author carlton;	state Exp;
branches;
next	;

1.20.4.1
date	2002.10.22.19.59.36;	author carlton;	state Exp;
branches;
next	1.20.4.2;

1.20.4.2
date	2002.11.22.17.15.55;	author carlton;	state Exp;
branches;
next	1.20.4.3;

1.20.4.3
date	2003.12.14.20.27.07;	author drow;	state Exp;
branches;
next	1.20.4.4;

1.20.4.4
date	2004.02.09.19.43.31;	author drow;	state Exp;
branches;
next	;

1.16.4.1
date	2002.07.22.21.46.56;	author kseitz;	state Exp;
branches;
next	1.16.4.2;

1.16.4.2
date	2002.08.09.18.34.23;	author kseitz;	state Exp;
branches;
next	1.16.4.3;

1.16.4.3
date	2002.08.30.22.52.42;	author kseitz;	state Exp;
branches;
next	1.16.4.4;

1.16.4.4
date	2002.10.01.00.46.03;	author kseitz;	state Exp;
branches;
next	1.16.4.5;

1.16.4.5
date	2002.11.04.00.17.29;	author ezannoni;	state Exp;
branches;
next	;

1.14.4.1
date	2002.05.09.18.35.54;	author jimb;	state Exp;
branches;
next	;

1.11.2.1
date	2001.07.06.19.16.57;	author dberlin;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.33.58;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.04.31;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.08.02.23.45.13;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.02.02.00.21.04;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.110
log
@	* symfile.h (struct sym_fns): Add "objfile" argument to
	sym_read_linetable.  All uses updated.
@
text
@/* Support routines for building symbol tables in GDB's internal format.
   Copyright (C) 1986-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* This module provides subroutines used for creating and adding to
   the symbol table.  These routines are called from various symbol-
   file-reading routines.

   Routines to support specific debugging information formats (stabs,
   DWARF, etc) belong somewhere else.  */

#include "defs.h"
#include "bfd.h"
#include "gdb_obstack.h"
#include "symtab.h"
#include "symfile.h"
#include "objfiles.h"
#include "gdbtypes.h"
#include "gdb_assert.h"
#include "complaints.h"
#include "gdb_string.h"
#include "expression.h"		/* For "enum exp_opcode" used by...  */
#include "bcache.h"
#include "filenames.h"		/* For DOSish file names.  */
#include "macrotab.h"
#include "demangle.h"		/* Needed by SYMBOL_INIT_DEMANGLED_NAME.  */
#include "block.h"
#include "cp-support.h"
#include "dictionary.h"
#include "addrmap.h"

/* Ask buildsym.h to define the vars it normally declares `extern'.  */
#define	EXTERN
/**/
#include "buildsym.h"		/* Our own declarations.  */
#undef	EXTERN

/* For cleanup_undefined_stabs_types and finish_global_stabs (somewhat
   questionable--see comment where we call them).  */

#include "stabsread.h"

/* List of subfiles.  */

static struct subfile *subfiles;

/* List of free `struct pending' structures for reuse.  */

static struct pending *free_pendings;

/* Non-zero if symtab has line number info.  This prevents an
   otherwise empty symtab from being tossed.  */

static int have_line_numbers;

/* The mutable address map for the compilation unit whose symbols
   we're currently reading.  The symtabs' shared blockvector will
   point to a fixed copy of this.  */
static struct addrmap *pending_addrmap;

/* The obstack on which we allocate pending_addrmap.
   If pending_addrmap is NULL, this is uninitialized; otherwise, it is
   initialized (and holds pending_addrmap).  */
static struct obstack pending_addrmap_obstack;

/* Non-zero if we recorded any ranges in the addrmap that are
   different from those in the blockvector already.  We set this to
   zero when we start processing a symfile, and if it's still zero at
   the end, then we just toss the addrmap.  */
static int pending_addrmap_interesting;

/* An obstack used for allocating pending blocks.  */

static struct obstack pending_block_obstack;

/* List of blocks already made (lexical contexts already closed).
   This is used at the end to make the blockvector.  */

struct pending_block
  {
    struct pending_block *next;
    struct block *block;
  };

/* Pointer to the head of a linked list of symbol blocks which have
   already been finalized (lexical contexts already closed) and which
   are just waiting to be built into a blockvector when finalizing the
   associated symtab.  */

static struct pending_block *pending_blocks;

struct subfile_stack
  {
    struct subfile_stack *next;
    char *name;
  };

static struct subfile_stack *subfile_stack;

/* The macro table for the compilation unit whose symbols we're
   currently reading.  All the symtabs for the CU will point to this.  */
static struct macro_table *pending_macros;

static int compare_line_numbers (const void *ln1p, const void *ln2p);

static void record_pending_block (struct objfile *objfile,
				  struct block *block,
				  struct pending_block *opblock);

/* Initial sizes of data structures.  These are realloc'd larger if
   needed, and realloc'd down to the size actually used, when
   completed.  */

#define	INITIAL_CONTEXT_STACK_SIZE	10
#define	INITIAL_LINE_VECTOR_LENGTH	1000


/* Maintain the lists of symbols and blocks.  */

/* Add a symbol to one of the lists of symbols.  */

void
add_symbol_to_list (struct symbol *symbol, struct pending **listhead)
{
  struct pending *link;

  /* If this is an alias for another symbol, don't add it.  */
  if (symbol->ginfo.name && symbol->ginfo.name[0] == '#')
    return;

  /* We keep PENDINGSIZE symbols in each link of the list.  If we
     don't have a link with room in it, add a new link.  */
  if (*listhead == NULL || (*listhead)->nsyms == PENDINGSIZE)
    {
      if (free_pendings)
	{
	  link = free_pendings;
	  free_pendings = link->next;
	}
      else
	{
	  link = (struct pending *) xmalloc (sizeof (struct pending));
	}

      link->next = *listhead;
      *listhead = link;
      link->nsyms = 0;
    }

  (*listhead)->symbol[(*listhead)->nsyms++] = symbol;
}

/* Find a symbol named NAME on a LIST.  NAME need not be
   '\0'-terminated; LENGTH is the length of the name.  */

struct symbol *
find_symbol_in_list (struct pending *list, char *name, int length)
{
  int j;
  const char *pp;

  while (list != NULL)
    {
      for (j = list->nsyms; --j >= 0;)
	{
	  pp = SYMBOL_LINKAGE_NAME (list->symbol[j]);
	  if (*pp == *name && strncmp (pp, name, length) == 0
	      && pp[length] == '\0')
	    {
	      return (list->symbol[j]);
	    }
	}
      list = list->next;
    }
  return (NULL);
}

/* At end of reading syms, or in case of quit, really free as many
   `struct pending's as we can easily find.  */

void
really_free_pendings (void *dummy)
{
  struct pending *next, *next1;

  for (next = free_pendings; next; next = next1)
    {
      next1 = next->next;
      xfree ((void *) next);
    }
  free_pendings = NULL;

  free_pending_blocks ();

  for (next = file_symbols; next != NULL; next = next1)
    {
      next1 = next->next;
      xfree ((void *) next);
    }
  file_symbols = NULL;

  for (next = global_symbols; next != NULL; next = next1)
    {
      next1 = next->next;
      xfree ((void *) next);
    }
  global_symbols = NULL;

  if (pending_macros)
    free_macro_table (pending_macros);

  if (pending_addrmap)
    {
      obstack_free (&pending_addrmap_obstack, NULL);
      pending_addrmap = NULL;
    }
}

/* This function is called to discard any pending blocks.  */

void
free_pending_blocks (void)
{
  if (pending_blocks != NULL)
    {
      obstack_free (&pending_block_obstack, NULL);
      pending_blocks = NULL;
    }
}

/* Take one of the lists of symbols and make a block from it.  Keep
   the order the symbols have in the list (reversed from the input
   file).  Put the block on the list of pending blocks.  */

static struct block *
finish_block_internal (struct symbol *symbol, struct pending **listhead,
		       struct pending_block *old_blocks,
		       CORE_ADDR start, CORE_ADDR end,
		       struct objfile *objfile,
		       int is_global, int expandable)
{
  struct gdbarch *gdbarch = get_objfile_arch (objfile);
  struct pending *next, *next1;
  struct block *block;
  struct pending_block *pblock;
  struct pending_block *opblock;

  block = (is_global
	   ? allocate_global_block (&objfile->objfile_obstack)
	   : allocate_block (&objfile->objfile_obstack));

  if (symbol)
    {
      BLOCK_DICT (block) = dict_create_linear (&objfile->objfile_obstack,
					       *listhead);
    }
  else
    {
      if (expandable)
	{
	  BLOCK_DICT (block) = dict_create_hashed_expandable ();
	  dict_add_pending (BLOCK_DICT (block), *listhead);
	}
      else
	{
	  BLOCK_DICT (block) =
	    dict_create_hashed (&objfile->objfile_obstack, *listhead);
	}
    }

  BLOCK_START (block) = start;
  BLOCK_END (block) = end;

  /* Put the block in as the value of the symbol that names it.  */

  if (symbol)
    {
      struct type *ftype = SYMBOL_TYPE (symbol);
      struct dict_iterator iter;
      SYMBOL_BLOCK_VALUE (symbol) = block;
      BLOCK_FUNCTION (block) = symbol;

      if (TYPE_NFIELDS (ftype) <= 0)
	{
	  /* No parameter type information is recorded with the
	     function's type.  Set that from the type of the
	     parameter symbols.  */
	  int nparams = 0, iparams;
	  struct symbol *sym;

	  /* Here we want to directly access the dictionary, because
	     we haven't fully initialized the block yet.  */
	  ALL_DICT_SYMBOLS (BLOCK_DICT (block), iter, sym)
	    {
	      if (SYMBOL_IS_ARGUMENT (sym))
		nparams++;
	    }
	  if (nparams > 0)
	    {
	      TYPE_NFIELDS (ftype) = nparams;
	      TYPE_FIELDS (ftype) = (struct field *)
		TYPE_ALLOC (ftype, nparams * sizeof (struct field));

	      iparams = 0;
	      /* Here we want to directly access the dictionary, because
		 we haven't fully initialized the block yet.  */
	      ALL_DICT_SYMBOLS (BLOCK_DICT (block), iter, sym)
		{
		  if (iparams == nparams)
		    break;

		  if (SYMBOL_IS_ARGUMENT (sym))
		    {
		      TYPE_FIELD_TYPE (ftype, iparams) = SYMBOL_TYPE (sym);
		      TYPE_FIELD_ARTIFICIAL (ftype, iparams) = 0;
		      iparams++;
		    }
		}
	    }
	}
    }
  else
    {
      BLOCK_FUNCTION (block) = NULL;
    }

  /* Now "free" the links of the list, and empty the list.  */

  for (next = *listhead; next; next = next1)
    {
      next1 = next->next;
      next->next = free_pendings;
      free_pendings = next;
    }
  *listhead = NULL;

  /* Check to be sure that the blocks have an end address that is
     greater than starting address.  */

  if (BLOCK_END (block) < BLOCK_START (block))
    {
      if (symbol)
	{
	  complaint (&symfile_complaints,
		     _("block end address less than block "
		       "start address in %s (patched it)"),
		     SYMBOL_PRINT_NAME (symbol));
	}
      else
	{
	  complaint (&symfile_complaints,
		     _("block end address %s less than block "
		       "start address %s (patched it)"),
		     paddress (gdbarch, BLOCK_END (block)),
		     paddress (gdbarch, BLOCK_START (block)));
	}
      /* Better than nothing.  */
      BLOCK_END (block) = BLOCK_START (block);
    }

  /* Install this block as the superblock of all blocks made since the
     start of this scope that don't have superblocks yet.  */

  opblock = NULL;
  for (pblock = pending_blocks; 
       pblock && pblock != old_blocks; 
       pblock = pblock->next)
    {
      if (BLOCK_SUPERBLOCK (pblock->block) == NULL)
	{
	  /* Check to be sure the blocks are nested as we receive
	     them.  If the compiler/assembler/linker work, this just
	     burns a small amount of time.

	     Skip blocks which correspond to a function; they're not
	     physically nested inside this other blocks, only
	     lexically nested.  */
	  if (BLOCK_FUNCTION (pblock->block) == NULL
	      && (BLOCK_START (pblock->block) < BLOCK_START (block)
		  || BLOCK_END (pblock->block) > BLOCK_END (block)))
	    {
	      if (symbol)
		{
		  complaint (&symfile_complaints,
			     _("inner block not inside outer block in %s"),
			     SYMBOL_PRINT_NAME (symbol));
		}
	      else
		{
		  complaint (&symfile_complaints,
			     _("inner block (%s-%s) not "
			       "inside outer block (%s-%s)"),
			     paddress (gdbarch, BLOCK_START (pblock->block)),
			     paddress (gdbarch, BLOCK_END (pblock->block)),
			     paddress (gdbarch, BLOCK_START (block)),
			     paddress (gdbarch, BLOCK_END (block)));
		}
	      if (BLOCK_START (pblock->block) < BLOCK_START (block))
		BLOCK_START (pblock->block) = BLOCK_START (block);
	      if (BLOCK_END (pblock->block) > BLOCK_END (block))
		BLOCK_END (pblock->block) = BLOCK_END (block);
	    }
	  BLOCK_SUPERBLOCK (pblock->block) = block;
	}
      opblock = pblock;
    }

  block_set_using (block, using_directives, &objfile->objfile_obstack);
  using_directives = NULL;

  record_pending_block (objfile, block, opblock);

  return block;
}

struct block *
finish_block (struct symbol *symbol, struct pending **listhead,
	      struct pending_block *old_blocks,
	      CORE_ADDR start, CORE_ADDR end,
	      struct objfile *objfile)
{
  return finish_block_internal (symbol, listhead, old_blocks,
				start, end, objfile, 0, 0);
}

/* Record BLOCK on the list of all blocks in the file.  Put it after
   OPBLOCK, or at the beginning if opblock is NULL.  This puts the
   block in the list after all its subblocks.

   Allocate the pending block struct in the objfile_obstack to save
   time.  This wastes a little space.  FIXME: Is it worth it?  */

static void
record_pending_block (struct objfile *objfile, struct block *block,
		      struct pending_block *opblock)
{
  struct pending_block *pblock;

  if (pending_blocks == NULL)
    obstack_init (&pending_block_obstack);

  pblock = (struct pending_block *)
    obstack_alloc (&pending_block_obstack, sizeof (struct pending_block));
  pblock->block = block;
  if (opblock)
    {
      pblock->next = opblock->next;
      opblock->next = pblock;
    }
  else
    {
      pblock->next = pending_blocks;
      pending_blocks = pblock;
    }
}


/* Record that the range of addresses from START to END_INCLUSIVE
   (inclusive, like it says) belongs to BLOCK.  BLOCK's start and end
   addresses must be set already.  You must apply this function to all
   BLOCK's children before applying it to BLOCK.

   If a call to this function complicates the picture beyond that
   already provided by BLOCK_START and BLOCK_END, then we create an
   address map for the block.  */
void
record_block_range (struct block *block,
                    CORE_ADDR start, CORE_ADDR end_inclusive)
{
  /* If this is any different from the range recorded in the block's
     own BLOCK_START and BLOCK_END, then note that the address map has
     become interesting.  Note that even if this block doesn't have
     any "interesting" ranges, some later block might, so we still
     need to record this block in the addrmap.  */
  if (start != BLOCK_START (block)
      || end_inclusive + 1 != BLOCK_END (block))
    pending_addrmap_interesting = 1;

  if (! pending_addrmap)
    {
      obstack_init (&pending_addrmap_obstack);
      pending_addrmap = addrmap_create_mutable (&pending_addrmap_obstack);
    }

  addrmap_set_empty (pending_addrmap, start, end_inclusive, block);
}


static struct blockvector *
make_blockvector (struct objfile *objfile)
{
  struct pending_block *next;
  struct blockvector *blockvector;
  int i;

  /* Count the length of the list of blocks.  */

  for (next = pending_blocks, i = 0; next; next = next->next, i++)
    {;
    }

  blockvector = (struct blockvector *)
    obstack_alloc (&objfile->objfile_obstack,
		   (sizeof (struct blockvector)
		    + (i - 1) * sizeof (struct block *)));

  /* Copy the blocks into the blockvector.  This is done in reverse
     order, which happens to put the blocks into the proper order
     (ascending starting address).  finish_block has hair to insert
     each block into the list after its subblocks in order to make
     sure this is true.  */

  BLOCKVECTOR_NBLOCKS (blockvector) = i;
  for (next = pending_blocks; next; next = next->next)
    {
      BLOCKVECTOR_BLOCK (blockvector, --i) = next->block;
    }

  free_pending_blocks ();

  /* If we needed an address map for this symtab, record it in the
     blockvector.  */
  if (pending_addrmap && pending_addrmap_interesting)
    BLOCKVECTOR_MAP (blockvector)
      = addrmap_create_fixed (pending_addrmap, &objfile->objfile_obstack);
  else
    BLOCKVECTOR_MAP (blockvector) = 0;

  /* Some compilers output blocks in the wrong order, but we depend on
     their being in the right order so we can binary search.  Check the
     order and moan about it.
     Note: Remember that the first two blocks are the global and static
     blocks.  We could special case that fact and begin checking at block 2.
     To avoid making that assumption we do not.  */
  if (BLOCKVECTOR_NBLOCKS (blockvector) > 1)
    {
      for (i = 1; i < BLOCKVECTOR_NBLOCKS (blockvector); i++)
	{
	  if (BLOCK_START (BLOCKVECTOR_BLOCK (blockvector, i - 1))
	      > BLOCK_START (BLOCKVECTOR_BLOCK (blockvector, i)))
	    {
	      CORE_ADDR start
		= BLOCK_START (BLOCKVECTOR_BLOCK (blockvector, i));

	      complaint (&symfile_complaints, _("block at %s out of order"),
			 hex_string ((LONGEST) start));
	    }
	}
    }

  return (blockvector);
}

/* Start recording information about source code that came from an
   included (or otherwise merged-in) source file with a different
   name.  NAME is the name of the file (cannot be NULL), DIRNAME is
   the directory in which the file was compiled (or NULL if not
   known).  */

void
start_subfile (const char *name, const char *dirname)
{
  struct subfile *subfile;

  /* See if this subfile is already known as a subfile of the current
     main source file.  */

  for (subfile = subfiles; subfile; subfile = subfile->next)
    {
      char *subfile_name;

      /* If NAME is an absolute path, and this subfile is not, then
	 attempt to create an absolute path to compare.  */
      if (IS_ABSOLUTE_PATH (name)
	  && !IS_ABSOLUTE_PATH (subfile->name)
	  && subfile->dirname != NULL)
	subfile_name = concat (subfile->dirname, SLASH_STRING,
			       subfile->name, (char *) NULL);
      else
	subfile_name = subfile->name;

      if (FILENAME_CMP (subfile_name, name) == 0)
	{
	  current_subfile = subfile;
	  if (subfile_name != subfile->name)
	    xfree (subfile_name);
	  return;
	}
      if (subfile_name != subfile->name)
	xfree (subfile_name);
    }

  /* This subfile is not known.  Add an entry for it.  Make an entry
     for this subfile in the list of all subfiles of the current main
     source file.  */

  subfile = (struct subfile *) xmalloc (sizeof (struct subfile));
  memset ((char *) subfile, 0, sizeof (struct subfile));
  subfile->next = subfiles;
  subfiles = subfile;
  current_subfile = subfile;

  /* Save its name and compilation directory name.  */
  subfile->name = xstrdup (name);
  subfile->dirname = (dirname == NULL) ? NULL : xstrdup (dirname);

  /* Initialize line-number recording for this subfile.  */
  subfile->line_vector = NULL;

  /* Default the source language to whatever can be deduced from the
     filename.  If nothing can be deduced (such as for a C/C++ include
     file with a ".h" extension), then inherit whatever language the
     previous subfile had.  This kludgery is necessary because there
     is no standard way in some object formats to record the source
     language.  Also, when symtabs are allocated we try to deduce a
     language then as well, but it is too late for us to use that
     information while reading symbols, since symtabs aren't allocated
     until after all the symbols have been processed for a given
     source file.  */

  subfile->language = deduce_language_from_filename (subfile->name);
  if (subfile->language == language_unknown
      && subfile->next != NULL)
    {
      subfile->language = subfile->next->language;
    }

  /* Initialize the debug format string to NULL.  We may supply it
     later via a call to record_debugformat.  */
  subfile->debugformat = NULL;

  /* Similarly for the producer.  */
  subfile->producer = NULL;

  /* If the filename of this subfile ends in .C, then change the
     language of any pending subfiles from C to C++.  We also accept
     any other C++ suffixes accepted by deduce_language_from_filename.  */
  /* Likewise for f2c.  */

  if (subfile->name)
    {
      struct subfile *s;
      enum language sublang = deduce_language_from_filename (subfile->name);

      if (sublang == language_cplus || sublang == language_fortran)
	for (s = subfiles; s != NULL; s = s->next)
	  if (s->language == language_c)
	    s->language = sublang;
    }

  /* And patch up this file if necessary.  */
  if (subfile->language == language_c
      && subfile->next != NULL
      && (subfile->next->language == language_cplus
	  || subfile->next->language == language_fortran))
    {
      subfile->language = subfile->next->language;
    }
}

/* For stabs readers, the first N_SO symbol is assumed to be the
   source file name, and the subfile struct is initialized using that
   assumption.  If another N_SO symbol is later seen, immediately
   following the first one, then the first one is assumed to be the
   directory name and the second one is really the source file name.

   So we have to patch up the subfile struct by moving the old name
   value to dirname and remembering the new name.  Some sanity
   checking is performed to ensure that the state of the subfile
   struct is reasonable and that the old name we are assuming to be a
   directory name actually is (by checking for a trailing '/').  */

void
patch_subfile_names (struct subfile *subfile, char *name)
{
  if (subfile != NULL && subfile->dirname == NULL && subfile->name != NULL
      && IS_DIR_SEPARATOR (subfile->name[strlen (subfile->name) - 1]))
    {
      subfile->dirname = subfile->name;
      subfile->name = xstrdup (name);
      set_last_source_file (name);

      /* Default the source language to whatever can be deduced from
         the filename.  If nothing can be deduced (such as for a C/C++
         include file with a ".h" extension), then inherit whatever
         language the previous subfile had.  This kludgery is
         necessary because there is no standard way in some object
         formats to record the source language.  Also, when symtabs
         are allocated we try to deduce a language then as well, but
         it is too late for us to use that information while reading
         symbols, since symtabs aren't allocated until after all the
         symbols have been processed for a given source file.  */

      subfile->language = deduce_language_from_filename (subfile->name);
      if (subfile->language == language_unknown
	  && subfile->next != NULL)
	{
	  subfile->language = subfile->next->language;
	}
    }
}

/* Handle the N_BINCL and N_EINCL symbol types that act like N_SOL for
   switching source files (different subfiles, as we call them) within
   one object file, but using a stack rather than in an arbitrary
   order.  */

void
push_subfile (void)
{
  struct subfile_stack *tem
    = (struct subfile_stack *) xmalloc (sizeof (struct subfile_stack));

  tem->next = subfile_stack;
  subfile_stack = tem;
  if (current_subfile == NULL || current_subfile->name == NULL)
    {
      internal_error (__FILE__, __LINE__, 
		      _("failed internal consistency check"));
    }
  tem->name = current_subfile->name;
}

char *
pop_subfile (void)
{
  char *name;
  struct subfile_stack *link = subfile_stack;

  if (link == NULL)
    {
      internal_error (__FILE__, __LINE__,
		      _("failed internal consistency check"));
    }
  name = link->name;
  subfile_stack = link->next;
  xfree ((void *) link);
  return (name);
}

/* Add a linetable entry for line number LINE and address PC to the
   line vector for SUBFILE.  */

void
record_line (struct subfile *subfile, int line, CORE_ADDR pc)
{
  struct linetable_entry *e;

  /* Ignore the dummy line number in libg.o */
  if (line == 0xffff)
    {
      return;
    }

  /* Make sure line vector exists and is big enough.  */
  if (!subfile->line_vector)
    {
      subfile->line_vector_length = INITIAL_LINE_VECTOR_LENGTH;
      subfile->line_vector = (struct linetable *)
	xmalloc (sizeof (struct linetable)
	   + subfile->line_vector_length * sizeof (struct linetable_entry));
      subfile->line_vector->nitems = 0;
      have_line_numbers = 1;
    }

  if (subfile->line_vector->nitems + 1 >= subfile->line_vector_length)
    {
      subfile->line_vector_length *= 2;
      subfile->line_vector = (struct linetable *)
	xrealloc ((char *) subfile->line_vector,
		  (sizeof (struct linetable)
		   + (subfile->line_vector_length
		      * sizeof (struct linetable_entry))));
    }

  /* Normally, we treat lines as unsorted.  But the end of sequence
     marker is special.  We sort line markers at the same PC by line
     number, so end of sequence markers (which have line == 0) appear
     first.  This is right if the marker ends the previous function,
     and there is no padding before the next function.  But it is
     wrong if the previous line was empty and we are now marking a
     switch to a different subfile.  We must leave the end of sequence
     marker at the end of this group of lines, not sort the empty line
     to after the marker.  The easiest way to accomplish this is to
     delete any empty lines from our table, if they are followed by
     end of sequence markers.  All we lose is the ability to set
     breakpoints at some lines which contain no instructions
     anyway.  */
  if (line == 0 && subfile->line_vector->nitems > 0)
    {
      e = subfile->line_vector->item + subfile->line_vector->nitems - 1;
      while (subfile->line_vector->nitems > 0 && e->pc == pc)
	{
	  e--;
	  subfile->line_vector->nitems--;
	}
    }

  e = subfile->line_vector->item + subfile->line_vector->nitems++;
  e->line = line;
  e->pc = pc;
}

/* Needed in order to sort line tables from IBM xcoff files.  Sigh!  */

static int
compare_line_numbers (const void *ln1p, const void *ln2p)
{
  struct linetable_entry *ln1 = (struct linetable_entry *) ln1p;
  struct linetable_entry *ln2 = (struct linetable_entry *) ln2p;

  /* Note: this code does not assume that CORE_ADDRs can fit in ints.
     Please keep it that way.  */
  if (ln1->pc < ln2->pc)
    return -1;

  if (ln1->pc > ln2->pc)
    return 1;

  /* If pc equal, sort by line.  I'm not sure whether this is optimum
     behavior (see comment at struct linetable in symtab.h).  */
  return ln1->line - ln2->line;
}

/* Return the macro table.
   Initialize it if this is the first use.  */

struct macro_table *
get_macro_table (struct objfile *objfile, const char *comp_dir)
{
  if (! pending_macros)
    pending_macros = new_macro_table (&objfile->per_bfd->storage_obstack,
				      objfile->per_bfd->macro_cache,
				      comp_dir);
  return pending_macros;
}

/* Start a new symtab for a new source file.  Called, for example,
   when a stabs symbol of type N_SO is seen, or when a DWARF
   TAG_compile_unit DIE is seen.  It indicates the start of data for
   one original source file.

   NAME is the name of the file (cannot be NULL).  DIRNAME is the directory in
   which the file was compiled (or NULL if not known).  START_ADDR is the
   lowest address of objects in the file (or 0 if not known).  */

void
start_symtab (const char *name, const char *dirname, CORE_ADDR start_addr)
{
  restart_symtab (start_addr);
  set_last_source_file (name);
  start_subfile (name, dirname);
}

/* Restart compilation for a symtab.
   This is used when a symtab is built from multiple sources.
   The symtab is first built with start_symtab and then for each additional
   piece call restart_symtab.  */

void
restart_symtab (CORE_ADDR start_addr)
{
  set_last_source_file (NULL);
  last_source_start_addr = start_addr;
  file_symbols = NULL;
  global_symbols = NULL;
  within_function = 0;
  have_line_numbers = 0;

  /* Context stack is initially empty.  Allocate first one with room
     for 10 levels; reuse it forever afterward.  */
  if (context_stack == NULL)
    {
      context_stack_size = INITIAL_CONTEXT_STACK_SIZE;
      context_stack = (struct context_stack *)
	xmalloc (context_stack_size * sizeof (struct context_stack));
    }
  context_stack_depth = 0;

  /* We shouldn't have any address map at this point.  */
  gdb_assert (! pending_addrmap);

  /* Initialize the list of sub source files with one entry for this
     file (the top-level source file).  */
  subfiles = NULL;
  current_subfile = NULL;
}

/* Subroutine of end_symtab to simplify it.  Look for a subfile that
   matches the main source file's basename.  If there is only one, and
   if the main source file doesn't have any symbol or line number
   information, then copy this file's symtab and line_vector to the
   main source file's subfile and discard the other subfile.  This can
   happen because of a compiler bug or from the user playing games
   with #line or from things like a distributed build system that
   manipulates the debug info.  */

static void
watch_main_source_file_lossage (void)
{
  struct subfile *mainsub, *subfile;

  /* Find the main source file.
     This loop could be eliminated if start_symtab saved it for us.  */
  mainsub = NULL;
  for (subfile = subfiles; subfile; subfile = subfile->next)
    {
      /* The main subfile is guaranteed to be the last one.  */
      if (subfile->next == NULL)
	mainsub = subfile;
    }

  /* If the main source file doesn't have any line number or symbol
     info, look for an alias in another subfile.

     We have to watch for mainsub == NULL here.  It's a quirk of
     end_symtab, it can return NULL so there may not be a main
     subfile.  */

  if (mainsub
      && mainsub->line_vector == NULL
      && mainsub->symtab == NULL)
    {
      const char *mainbase = lbasename (mainsub->name);
      int nr_matches = 0;
      struct subfile *prevsub;
      struct subfile *mainsub_alias = NULL;
      struct subfile *prev_mainsub_alias = NULL;

      prevsub = NULL;
      for (subfile = subfiles;
	   /* Stop before we get to the last one.  */
	   subfile->next;
	   subfile = subfile->next)
	{
	  if (filename_cmp (lbasename (subfile->name), mainbase) == 0)
	    {
	      ++nr_matches;
	      mainsub_alias = subfile;
	      prev_mainsub_alias = prevsub;
	    }
	  prevsub = subfile;
	}

      if (nr_matches == 1)
	{
	  gdb_assert (mainsub_alias != NULL && mainsub_alias != mainsub);

	  /* Found a match for the main source file.
	     Copy its line_vector and symtab to the main subfile
	     and then discard it.  */

	  mainsub->line_vector = mainsub_alias->line_vector;
	  mainsub->line_vector_length = mainsub_alias->line_vector_length;
	  mainsub->symtab = mainsub_alias->symtab;

	  if (prev_mainsub_alias == NULL)
	    subfiles = mainsub_alias->next;
	  else
	    prev_mainsub_alias->next = mainsub_alias->next;
	  xfree (mainsub_alias);
	}
    }
}

/* Helper function for qsort.  Parameters are `struct block *' pointers,
   function sorts them in descending order by their BLOCK_START.  */

static int
block_compar (const void *ap, const void *bp)
{
  const struct block *a = *(const struct block **) ap;
  const struct block *b = *(const struct block **) bp;

  return ((BLOCK_START (b) > BLOCK_START (a))
	  - (BLOCK_START (b) < BLOCK_START (a)));
}

/* Reset globals used to build symtabs.  */

static void
reset_symtab_globals (void)
{
  set_last_source_file (NULL);
  current_subfile = NULL;
  pending_macros = NULL;
  if (pending_addrmap)
    {
      obstack_free (&pending_addrmap_obstack, NULL);
      pending_addrmap = NULL;
    }
}

/* Implementation of the first part of end_symtab.  It allows modifying
   STATIC_BLOCK before it gets finalized by end_symtab_from_static_block.
   If the returned value is NULL there is no blockvector created for
   this symtab (you still must call end_symtab_from_static_block).

   END_ADDR is the same as for end_symtab: the address of the end of the
   file's text.

   If EXPANDABLE is non-zero the STATIC_BLOCK dictionary is made
   expandable.

   If REQUIRED is non-zero, then a symtab is created even if it does
   not contain any symbols.  */

struct block *
end_symtab_get_static_block (CORE_ADDR end_addr, struct objfile *objfile,
			     int expandable, int required)
{
  /* Finish the lexical context of the last function in the file; pop
     the context stack.  */

  if (context_stack_depth > 0)
    {
      struct context_stack *cstk = pop_context ();

      /* Make a block for the local symbols within.  */
      finish_block (cstk->name, &local_symbols, cstk->old_blocks,
		    cstk->start_addr, end_addr, objfile);

      if (context_stack_depth > 0)
	{
	  /* This is said to happen with SCO.  The old coffread.c
	     code simply emptied the context stack, so we do the
	     same.  FIXME: Find out why it is happening.  This is not
	     believed to happen in most cases (even for coffread.c);
	     it used to be an abort().  */
	  complaint (&symfile_complaints,
	             _("Context stack not empty in end_symtab"));
	  context_stack_depth = 0;
	}
    }

  /* Reordered executables may have out of order pending blocks; if
     OBJF_REORDERED is true, then sort the pending blocks.  */

  if ((objfile->flags & OBJF_REORDERED) && pending_blocks)
    {
      unsigned count = 0;
      struct pending_block *pb;
      struct block **barray, **bp;
      struct cleanup *back_to;

      for (pb = pending_blocks; pb != NULL; pb = pb->next)
	count++;

      barray = xmalloc (sizeof (*barray) * count);
      back_to = make_cleanup (xfree, barray);

      bp = barray;
      for (pb = pending_blocks; pb != NULL; pb = pb->next)
	*bp++ = pb->block;

      qsort (barray, count, sizeof (*barray), block_compar);

      bp = barray;
      for (pb = pending_blocks; pb != NULL; pb = pb->next)
	pb->block = *bp++;

      do_cleanups (back_to);
    }

  /* Cleanup any undefined types that have been left hanging around
     (this needs to be done before the finish_blocks so that
     file_symbols is still good).

     Both cleanup_undefined_stabs_types and finish_global_stabs are stabs
     specific, but harmless for other symbol readers, since on gdb
     startup or when finished reading stabs, the state is set so these
     are no-ops.  FIXME: Is this handled right in case of QUIT?  Can
     we make this cleaner?  */

  cleanup_undefined_stabs_types (objfile);
  finish_global_stabs (objfile);

  if (!required
      && pending_blocks == NULL
      && file_symbols == NULL
      && global_symbols == NULL
      && have_line_numbers == 0
      && pending_macros == NULL)
    {
      /* Ignore symtabs that have no functions with real debugging info.  */
      return NULL;
    }
  else
    {
      /* Define the STATIC_BLOCK.  */
      return finish_block_internal (NULL, &file_symbols, NULL,
				    last_source_start_addr, end_addr, objfile,
				    0, expandable);
    }
}

/* Implementation of the second part of end_symtab.  Pass STATIC_BLOCK
   as value returned by end_symtab_get_static_block.

   SECTION is the same as for end_symtab: the section number
   (in objfile->section_offsets) of the blockvector and linetable.

   If EXPANDABLE is non-zero the GLOBAL_BLOCK dictionary is made
   expandable.  */

struct symtab *
end_symtab_from_static_block (struct block *static_block,
			      struct objfile *objfile, int section,
			      int expandable)
{
  struct symtab *symtab = NULL;
  struct blockvector *blockvector;
  struct subfile *subfile;
  struct subfile *nextsub;

  if (static_block == NULL)
    {
      /* Ignore symtabs that have no functions with real debugging info.  */
      blockvector = NULL;
    }
  else
    {
      CORE_ADDR end_addr = BLOCK_END (static_block);

      /* Define after STATIC_BLOCK also GLOBAL_BLOCK, and build the
         blockvector.  */
      finish_block_internal (NULL, &global_symbols, NULL,
			     last_source_start_addr, end_addr, objfile,
			     1, expandable);
      blockvector = make_blockvector (objfile);
    }

  /* Read the line table if it has to be read separately.
     This is only used by xcoffread.c.  */
  if (objfile->sf->sym_read_linetable != NULL)
    objfile->sf->sym_read_linetable (objfile);

  /* Handle the case where the debug info specifies a different path
     for the main source file.  It can cause us to lose track of its
     line number information.  */
  watch_main_source_file_lossage ();

  /* Now create the symtab objects proper, one for each subfile.  */
  /* (The main file is the last one on the chain.)  */

  for (subfile = subfiles; subfile; subfile = nextsub)
    {
      int linetablesize = 0;
      symtab = NULL;

      /* If we have blocks of symbols, make a symtab.  Otherwise, just
         ignore this file and any line number info in it.  */
      if (blockvector)
	{
	  if (subfile->line_vector)
	    {
	      linetablesize = sizeof (struct linetable) +
	        subfile->line_vector->nitems * sizeof (struct linetable_entry);

	      /* Like the pending blocks, the line table may be
	         scrambled in reordered executables.  Sort it if
	         OBJF_REORDERED is true.  */
	      if (objfile->flags & OBJF_REORDERED)
		qsort (subfile->line_vector->item,
		       subfile->line_vector->nitems,
		     sizeof (struct linetable_entry), compare_line_numbers);
	    }

	  /* Now, allocate a symbol table.  */
	  if (subfile->symtab == NULL)
	    symtab = allocate_symtab (subfile->name, objfile);
	  else
	    symtab = subfile->symtab;

	  /* Fill in its components.  */
	  symtab->blockvector = blockvector;
          symtab->macro_table = pending_macros;
	  if (subfile->line_vector)
	    {
	      /* Reallocate the line table on the symbol obstack.  */
	      symtab->linetable = (struct linetable *)
		obstack_alloc (&objfile->objfile_obstack, linetablesize);
	      memcpy (symtab->linetable, subfile->line_vector, linetablesize);
	    }
	  else
	    {
	      symtab->linetable = NULL;
	    }
	  symtab->block_line_section = section;
	  if (subfile->dirname)
	    {
	      /* Reallocate the dirname on the symbol obstack.  */
	      symtab->dirname = (char *)
		obstack_alloc (&objfile->objfile_obstack,
			       strlen (subfile->dirname) + 1);
	      strcpy (symtab->dirname, subfile->dirname);
	    }
	  else
	    {
	      symtab->dirname = NULL;
	    }

	  /* Use whatever language we have been using for this
	     subfile, not the one that was deduced in allocate_symtab
	     from the filename.  We already did our own deducing when
	     we created the subfile, and we may have altered our
	     opinion of what language it is from things we found in
	     the symbols.  */
	  symtab->language = subfile->language;

	  /* Save the debug format string (if any) in the symtab.  */
	  symtab->debugformat = subfile->debugformat;

	  /* Similarly for the producer.  */
	  symtab->producer = subfile->producer;

	  /* All symtabs for the main file and the subfiles share a
	     blockvector, so we need to clear primary for everything
	     but the main file.  */

	  symtab->primary = 0;
	}
      else
        {
          if (subfile->symtab)
            {
              /* Since we are ignoring that subfile, we also need
                 to unlink the associated empty symtab that we created.
                 Otherwise, we can run into trouble because various parts
                 such as the block-vector are uninitialized whereas
                 the rest of the code assumes that they are.
                 
                 We can only unlink the symtab because it was allocated
                 on the objfile obstack.  */
              struct symtab *s;

              if (objfile->symtabs == subfile->symtab)
                objfile->symtabs = objfile->symtabs->next;
              else
                ALL_OBJFILE_SYMTABS (objfile, s)
                  if (s->next == subfile->symtab)
                    {
                      s->next = s->next->next;
                      break;
                    }
              subfile->symtab = NULL;
            }
        }
      if (subfile->name != NULL)
	{
	  xfree ((void *) subfile->name);
	}
      if (subfile->dirname != NULL)
	{
	  xfree ((void *) subfile->dirname);
	}
      if (subfile->line_vector != NULL)
	{
	  xfree ((void *) subfile->line_vector);
	}

      nextsub = subfile->next;
      xfree ((void *) subfile);
    }

  /* Set this for the main source file.  */
  if (symtab)
    {
      symtab->primary = 1;

      if (symtab->blockvector)
	{
	  struct block *b = BLOCKVECTOR_BLOCK (symtab->blockvector,
					       GLOBAL_BLOCK);

	  set_block_symtab (b, symtab);
	}
    }

  /* Default any symbols without a specified symtab to the primary
     symtab.  */
  if (blockvector)
    {
      int block_i;

      for (block_i = 0; block_i < BLOCKVECTOR_NBLOCKS (blockvector); block_i++)
	{
	  struct block *block = BLOCKVECTOR_BLOCK (blockvector, block_i);
	  struct symbol *sym;
	  struct dict_iterator iter;

	  /* Inlined functions may have symbols not in the global or
	     static symbol lists.  */
	  if (BLOCK_FUNCTION (block) != NULL)
	    if (SYMBOL_SYMTAB (BLOCK_FUNCTION (block)) == NULL)
	      SYMBOL_SYMTAB (BLOCK_FUNCTION (block)) = symtab;

	  /* Note that we only want to fix up symbols from the local
	     blocks, not blocks coming from included symtabs.  That is why
	     we use ALL_DICT_SYMBOLS here and not ALL_BLOCK_SYMBOLS.  */
	  ALL_DICT_SYMBOLS (BLOCK_DICT (block), iter, sym)
	    if (SYMBOL_SYMTAB (sym) == NULL)
	      SYMBOL_SYMTAB (sym) = symtab;
	}
    }

  reset_symtab_globals ();

  return symtab;
}

/* Finish the symbol definitions for one main source file, close off
   all the lexical contexts for that file (creating struct block's for
   them), then make the struct symtab for that file and put it in the
   list of all such.

   END_ADDR is the address of the end of the file's text.  SECTION is
   the section number (in objfile->section_offsets) of the blockvector
   and linetable.

   Note that it is possible for end_symtab() to return NULL.  In
   particular, for the DWARF case at least, it will return NULL when
   it finds a compilation unit that has exactly one DIE, a
   TAG_compile_unit DIE.  This can happen when we link in an object
   file that was compiled from an empty source file.  Returning NULL
   is probably not the correct thing to do, because then gdb will
   never know about this empty file (FIXME).

   If you need to modify STATIC_BLOCK before it is finalized you should
   call end_symtab_get_static_block and end_symtab_from_static_block
   yourself.  */

struct symtab *
end_symtab (CORE_ADDR end_addr, struct objfile *objfile, int section)
{
  struct block *static_block;

  static_block = end_symtab_get_static_block (end_addr, objfile, 0, 0);
  return end_symtab_from_static_block (static_block, objfile, section, 0);
}

/* Same as end_symtab except create a symtab that can be later added to.  */

struct symtab *
end_expandable_symtab (CORE_ADDR end_addr, struct objfile *objfile,
		       int section)
{
  struct block *static_block;

  static_block = end_symtab_get_static_block (end_addr, objfile, 1, 0);
  return end_symtab_from_static_block (static_block, objfile, section, 1);
}

/* Subroutine of augment_type_symtab to simplify it.
   Attach SYMTAB to all symbols in PENDING_LIST that don't have one.  */

static void
set_missing_symtab (struct pending *pending_list, struct symtab *symtab)
{
  struct pending *pending;
  int i;

  for (pending = pending_list; pending != NULL; pending = pending->next)
    {
      for (i = 0; i < pending->nsyms; ++i)
	{
	  if (SYMBOL_SYMTAB (pending->symbol[i]) == NULL)
	    SYMBOL_SYMTAB (pending->symbol[i]) = symtab;
	}
    }
}

/* Same as end_symtab, but for the case where we're adding more symbols
   to an existing symtab that is known to contain only type information.
   This is the case for DWARF4 Type Units.  */

void
augment_type_symtab (struct objfile *objfile, struct symtab *primary_symtab)
{
  struct blockvector *blockvector = primary_symtab->blockvector;

  if (context_stack_depth > 0)
    {
      complaint (&symfile_complaints,
		 _("Context stack not empty in augment_type_symtab"));
      context_stack_depth = 0;
    }
  if (pending_blocks != NULL)
    complaint (&symfile_complaints, _("Blocks in a type symtab"));
  if (pending_macros != NULL)
    complaint (&symfile_complaints, _("Macro in a type symtab"));
  if (have_line_numbers)
    complaint (&symfile_complaints,
	       _("Line numbers recorded in a type symtab"));

  if (file_symbols != NULL)
    {
      struct block *block = BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK);

      /* First mark any symbols without a specified symtab as belonging
	 to the primary symtab.  */
      set_missing_symtab (file_symbols, primary_symtab);

      dict_add_pending (BLOCK_DICT (block), file_symbols);
    }

  if (global_symbols != NULL)
    {
      struct block *block = BLOCKVECTOR_BLOCK (blockvector, GLOBAL_BLOCK);

      /* First mark any symbols without a specified symtab as belonging
	 to the primary symtab.  */
      set_missing_symtab (global_symbols, primary_symtab);

      dict_add_pending (BLOCK_DICT (block), global_symbols);
    }

  reset_symtab_globals ();
}

/* Push a context block.  Args are an identifying nesting level
   (checkable when you pop it), and the starting PC address of this
   context.  */

struct context_stack *
push_context (int desc, CORE_ADDR valu)
{
  struct context_stack *new;

  if (context_stack_depth == context_stack_size)
    {
      context_stack_size *= 2;
      context_stack = (struct context_stack *)
	xrealloc ((char *) context_stack,
		  (context_stack_size * sizeof (struct context_stack)));
    }

  new = &context_stack[context_stack_depth++];
  new->depth = desc;
  new->locals = local_symbols;
  new->old_blocks = pending_blocks;
  new->start_addr = valu;
  new->using_directives = using_directives;
  new->name = NULL;

  local_symbols = NULL;
  using_directives = NULL;

  return new;
}

/* Pop a context block.  Returns the address of the context block just
   popped.  */

struct context_stack *
pop_context (void)
{
  gdb_assert (context_stack_depth > 0);
  return (&context_stack[--context_stack_depth]);
}



/* Compute a small integer hash code for the given name.  */

int
hashname (const char *name)
{
    return (hash(name,strlen(name)) % HASHSIZE);
}


void
record_debugformat (const char *format)
{
  current_subfile->debugformat = format;
}

void
record_producer (const char *producer)
{
  current_subfile->producer = producer;
}

/* Merge the first symbol list SRCLIST into the second symbol list
   TARGETLIST by repeated calls to add_symbol_to_list().  This
   procedure "frees" each link of SRCLIST by adding it to the
   free_pendings list.  Caller must set SRCLIST to a null list after
   calling this function.

   Void return.  */

void
merge_symbol_lists (struct pending **srclist, struct pending **targetlist)
{
  int i;

  if (!srclist || !*srclist)
    return;

  /* Merge in elements from current link.  */
  for (i = 0; i < (*srclist)->nsyms; i++)
    add_symbol_to_list ((*srclist)->symbol[i], targetlist);

  /* Recurse on next.  */
  merge_symbol_lists (&(*srclist)->next, targetlist);

  /* "Free" the current link.  */
  (*srclist)->next = free_pendings;
  free_pendings = (*srclist);
}


/* Name of source file whose symbol data we are now processing.  This
   comes from a symbol of type N_SO for stabs.  For Dwarf it comes
   from the DW_AT_name attribute of a DW_TAG_compile_unit DIE.  */

static char *last_source_file;

/* See buildsym.h.  */

void
set_last_source_file (const char *name)
{
  xfree (last_source_file);
  last_source_file = name == NULL ? NULL : xstrdup (name);
}

/* See buildsym.h.  */

const char *
get_last_source_file (void)
{
  return last_source_file;
}



/* Initialize anything that needs initializing when starting to read a
   fresh piece of a symbol file, e.g. reading in the stuff
   corresponding to a psymtab.  */

void
buildsym_init (void)
{
  free_pendings = NULL;
  file_symbols = NULL;
  global_symbols = NULL;
  pending_blocks = NULL;
  pending_macros = NULL;
  using_directives = NULL;
  subfile_stack = NULL;

  /* We shouldn't have any address map at this point.  */
  gdb_assert (! pending_addrmap);
  pending_addrmap_interesting = 0;
}

/* Initialize anything that needs initializing when a completely new
   symbol file is specified (not just adding some symbols from another
   file, e.g. a shared library).  */

void
buildsym_new_init (void)
{
  buildsym_init ();
}
@


1.109
log
@	* buildsym.c (subfile_stack): Move here from buildsym.h.
	(pending_macros): Ditto.
	(get_macro_table): New function.
	(buildsym_init): Initialize subfile_stack.
	* coffread.c (type_vector,type_vector_length): Moved here from
	buildsym.h.
	(INITIAL_TYPE_VECTOR_LENGTH): Ditto.
	(coff_symtab_read): Use it.
	* dbxread.c (read_ofile_symtab): Delete init of subfile_stack.
	* dwarf2read.c (macro_start_file): Replace uses of pending_macros
	with call to get_macro_table.
	* stabsread.c (type_vector,type_vector_length): Moved here from
	buildsym.h.
	(INITIAL_TYPE_VECTOR_LENGTH): Ditto.
	* buildsym.h (get_macro_table): Declare.
@
text
@d1147 2
a1148 1
  /* Read the line table if it has to be read separately.  */
d1150 1
a1150 1
    objfile->sf->sym_read_linetable ();
@


1.108
log
@	Cleanup: remove unused - breakpoint, buildsym

	* breakpoint.c (parse_cond_to_aexpr): Remove unused 'old_chain'.
	(print_it_watchpoint): Remove unused 'bl'.
	(say_where): Remove unused 'uiout'.
	(bpstat_remove_breakpoint_callback): Remove unused 'uiout'.
	(bkpt_breakpoint_hit): Remove unused 'b'.
	(internal_bkpt_print_it): Remove unused 'uiout'.
	* buildsym.c (augment_type_symtab): Remove unused 'i'.

	Reference: http://sourceware.org/ml/gdb-patches/2013-03/msg01080.html
@
text
@d105 13
a117 1

a122 1

d839 13
d1565 1
@


1.107
log
@	* buildsym.c (patch_subfile_names): Use set_last_source_file.
	(start_symtab): Make 'name' and 'dirname' const.  Use
	set_last_source_file.
	(restart_symtab, reset_symtab_globals): Use set_last_source_file.
	(last_source_file): Define.  Now static.
	(set_last_source_file, get_last_source_file): New functions.
	* buildsym.h (last_source_file): Don't declare.
	(start_symtab): Update.
	(set_last_source_file, get_last_source_file): Declare.
	* coffread.c (complete_symtab): Use set_last_source_file.
	(coff_end_symtab): Likewise.
	(coff_symtab_read): Use set_last_source_file, get_last_source_file.
	* dbxread.c (read_dbx_symtab, read_ofile_symtab): Use
	set_last_source_file.
	(process_one_symbol): Use get_last_source_file.
	* mdebugread.c (parse_partial_symbols): Use set_last_source_file.
	(psymtab_to_symtab_1): Use get_last_source_file.
	* xcoffread.c (process_linenos): Use get_last_source_file.
	(complete_symtab): Use set_last_source_file.
	(read_xcoff_symtab): Use set_last_source_file, get_last_source_file.
	(scan_xcoff_symtab): Use set_last_source_file.
@
text
@a1369 1
  int i;
@


1.106
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d684 1
a684 1
      last_source_file = name;
d838 1
a838 1
start_symtab (char *name, char *dirname, CORE_ADDR start_addr)
d841 1
a841 1
  last_source_file = name;
d853 1
a853 1
  last_source_file = NULL;
d974 1
a974 1
  last_source_file = NULL;
d1503 26
@


1.105
log
@	* buildsym.c (struct pending_block): Move from buildsym.h.
	(pending_blocks): Likewise; now static.
	(pending_block_obstack): New global.
	(free_pending_blocks): Free blocks.
	(record_pending_block): Use pending_block_obstack.
	* buildsym.h (struct pending_block): Move definition to
	buildsym.c.
	(pending_blocks): Don't declare.
@
text
@d2 1
a2 1
   Copyright (C) 1986-2004, 2007-2012 Free Software Foundation, Inc.
@


1.104
log
@	PR symtab/14601
	* buildsym.c (buildsym_init): Reset using_directives to NULL.

	testsuite/
	* gdb.cp/using-crash.exp: New file.
	* gdb.cp/using-crash.cc: New file.
@
text
@d86 19
d227 5
a231 3
  /* The links are made in the objfile_obstack, so we only need to
     reset PENDING_BLOCKS.  */
  pending_blocks = NULL;
d442 3
d446 1
a446 1
    obstack_alloc (&objfile->objfile_obstack, sizeof (struct pending_block));
@


1.103
log
@	* buildsym.h (param_symbols): Delete, unused.
	(context_stack): Delete member "params", unused.
	* buildsym.c (push_context): Update.
	* dwarf2read.c (read_func_scope): Update.
@
text
@d1491 1
@


1.102
log
@	* dwarf2read.c (struct dwarf2_per_objfile) <dwz_file>: New field.
	(struct dwarf2_per_cu_data) <length>: No longer bitfield.
	<is_dwz>: New field.
	(struct dwz_file): New.
	(struct partial_die_info) <is_dwz, spec_is_dwz>: New fields.
	(locate_dwz_sections, dwarf2_get_dwz_file)
	(get_abbrev_section_for_cu): New functions.
	(error_check_comp_unit_head, read_and_check_comp_unit_head)
	(read_and_check_type_unit_head): Add abbrev_section argument.
	(create_debug_types_hash_table): Update.
	(init_cutu_and_read_dies): Use proper abbrev section.
	(init_cutu_and_read_dies_no_follow): Likewise.
	(set_partial_user): Do nothing if PST==NULL.
	(read_comp_units_from_section): New function.
	(create_all_comp_units): Use it.
	(scan_partial_symbols, partial_die_parent_scope): Update.
	(skip_one_die): Handle DW_FORM_GNU_ref_alt, DW_FORM_GNU_strp_alt.
	(process_imported_unit_die, read_partial_die): Handle .dwz files.
	(find_partial_die): Add offset_in_dwz argument.  Update.
	(guess_partial_die_structure_name, fixup_partial_die): Update.
	(read_attribute_value): Handle DW_FORM_GNU_ref_alt,
	DW_FORM_GNU_strp_alt.
	(read_indirect_string_from_dwz): New function.
	(dwarf2_const_value_attr): Handle DW_FORM_GNU_strp_alt.
	(dump_die_shallow): Handle DW_FORM_GNU_ref_alt, DW_FORM_GNU_strp_alt.
	(is_ref_attr): Handle DW_FORM_GNU_ref_alt.
	(follow_die_offset): Add offset_in_dwz argument.
	(follow_die_ref, dwarf2_fetch_die_location_block): Update.
	(skip_form_bytes): Handle DW_FORM_GNU_strp_alt.
	(dwarf_decode_macro_bytes): Add section_is_dwz argument.
	Handle new macro forms.
	(dwarf_decode_macros): Update.
	(dwarf2_find_containing_comp_unit): Add offset_in_dwz argument.
	(dwarf2_per_objfile_free): Unref dwz_bfd, if it exists
	(lookup_die_type): Handle DW_FORM_GNU_ref_alt.
	(create_debug_types_hash_table): Use correct abbrev section.
	(get_debug_line_section): New function.
	(dwarf_decode_line_header, dwarf_decode_lines_1): Use it.
	(process_full_comp_unit): Pass 'required' argument to
	end_symtab_get_static_block.
	* buildsym.h (end_symtab_get_static_block): Update.
	* buildsym.c (end_symtab_get_static_block): Add 'required'
	argument.
	(end_symtab, end_expandable_symtab): Update.
@
text
@a1406 1
  new->params = param_symbols;
a1412 1
  param_symbols = NULL;
@


1.101
log
@gdb/
	* buildsym.c (end_symtab_1): Split it to ...
	(end_symtab_get_static_block): ... this ...
	(end_symtab_from_static_block): ... and this function.
	(end_symtab, end_expandable_symtab): Call them.
	* buildsym.h (end_symtab_get_static_block)
	(end_symtab_from_static_block): New declarations.
	* dwarf2read.c (process_full_comp_unit): New variable static_block.
	Set its valid CU ranges.

gdb/testsuite/
	* gdb.dwarf2/dw2-minsym-in-cu.S: New file.
	* gdb.dwarf2/dw2-minsym-in-cu.exp: New file.
@
text
@d969 4
a972 1
   expandable.  */
d976 1
a976 1
			     int expandable)
d1044 2
a1045 1
  if (pending_blocks == NULL
d1303 1
a1303 1
  static_block = end_symtab_get_static_block (end_addr, objfile, 0);
d1315 1
a1315 1
  static_block = end_symtab_get_static_block (end_addr, objfile, 1);
@


1.100
log
@	* buildsym.c (finish_block_internal): New arg "expandable".
	All callers updated.
	(start_symtab): Move most contents to ...
	(restart_symtab): ... here.  New function.
	(reset_symtab_globals): New function.
	(end_symtab_1): Renamed from end_symtab.  New arg "expandable".
	Call reset_symtab_globals.
	(end_symtab, end_expandable_symtab): New functions.
	(set_missing_symtab, augment_type_symtab): New functions.
	* buildsym.h (end_expandable_symtab): Declare.
	(augment_type_symtab, restart_symtab): Declare.
@
text
@d960 14
a973 23
/* Finish the symbol definitions for one main source file, close off
   all the lexical contexts for that file (creating struct block's for
   them), then make the struct symtab for that file and put it in the
   list of all such.

   END_ADDR is the address of the end of the file's text.  SECTION is
   the section number (in objfile->section_offsets) of the blockvector
   and linetable.

   If EXPANDABLE is non-zero the dictionaries for the global and static
   blocks are made expandable.

   Note that it is possible for end_symtab() to return NULL.  In
   particular, for the DWARF case at least, it will return NULL when
   it finds a compilation unit that has exactly one DIE, a
   TAG_compile_unit DIE.  This can happen when we link in an object
   file that was compiled from an empty source file.  Returning NULL
   is probably not the correct thing to do, because then gdb will
   never know about this empty file (FIXME).  */

static struct symtab *
end_symtab_1 (CORE_ADDR end_addr, struct objfile *objfile, int section,
	      int expandable)
a974 6
  struct symtab *symtab = NULL;
  struct blockvector *blockvector;
  struct subfile *subfile;
  struct context_stack *cstk;
  struct subfile *nextsub;

d980 2
a981 1
      cstk = pop_context ();
d1047 34
a1080 2
      /* Ignore symtabs that have no functions with real debugging
         info.  */
d1085 3
a1087 1
      /* Define the STATIC_BLOCK & GLOBAL_BLOCK, and build the
d1089 3
a1091 4
      finish_block_internal (0, &file_symbols, 0, last_source_start_addr,
			     end_addr, objfile, 0, expandable);
      finish_block_internal (0, &global_symbols, 0, last_source_start_addr,
			     end_addr, objfile, 1, expandable);
d1273 20
a1292 1
/* See end_symtab_1 for details.  */
d1297 4
a1300 1
  return end_symtab_1 (end_addr, objfile, section, 0);
d1303 1
a1303 1
/* See end_symtab_1 for details.  */
d1309 4
a1312 1
  return end_symtab_1 (end_addr, objfile, section, 1);
@


1.99
log
@	* buildsym.c (start_subfile): Remove unnecessary check for
	name == NULL.
@
text
@d222 1
a222 1
		       int is_global)
d241 10
a250 2
      BLOCK_DICT (block) = dict_create_hashed (&objfile->objfile_obstack,
					       *listhead);
d405 1
a405 1
				start, end, objfile, 0);
d816 1
d818 12
a850 1

a852 1
  start_subfile (name, dirname);
d945 15
d969 3
d980 3
a982 2
struct symtab *
end_symtab (CORE_ADDR end_addr, struct objfile *objfile, int section)
d1015 1
d1069 2
a1070 2
      finish_block (0, &file_symbols, 0, last_source_start_addr,
		    end_addr, objfile);
d1072 1
a1072 1
			     end_addr, objfile, 1);
d1249 77
a1325 4
  last_source_file = NULL;
  current_subfile = NULL;
  pending_macros = NULL;
  if (pending_addrmap)
d1327 7
a1333 2
      obstack_free (&pending_addrmap_obstack, NULL);
      pending_addrmap = NULL;
d1336 1
a1336 1
  return symtab;
@


1.98
log
@	* buildsym.c (make_blockvector): Add comment.
@
text
@d575 1
a575 1
  subfile->name = (name == NULL) ? NULL : xstrdup (name);
@


1.97
log
@	* buildsym.c (block_compar): Fix comment.
	(end_symtab): Fix and clarify some comments.
@
text
@d499 1
a499 1
        
d502 4
a505 1
     order and moan about it.  */
@


1.96
log
@	* stabsread.h (cleanup_undefined_stabs_types): Renamed from
	cleanup_undefined_types.
	* stabsread.c (cleanup_undefined_stabs_types): Ditto.
	All callers updated.
@
text
@d910 1
a910 1
/* Helper function for qsort.  Parametes are `struct block *' pointers,
d1129 1
a1129 1
                 Otherwise, we can into trouble because various parts
d1199 2
a1200 1
	     blocks, not blocks coming from included symtabs.  */
@


1.95
log
@	* jv-lang.c (get_java_class_symtab): Use allocate_global_block,
	set_block_symtab.
	* jit.c (finalize_symtab): Use allocate_global_block,
	set_block_symtab.
	* buildsym.c (finish_block_internal): New function, from old
	finish_block.
	(finish_block): Rewrite.
	(end_symtab): Use finish_block_internal, set_block_symtab.
	* block.h (struct global_block): New.
	(allocate_global_block, set_block_symtab): Declare.
	* block.c (allocate_global_block, set_block_symtab): New
	functions.
@
text
@d52 1
a52 1
/* For cleanup_undefined_types and finish_global_stabs (somewhat
d1004 1
a1004 1
     Both cleanup_undefined_types and finish_global_stabs are stabs
d1010 1
a1010 1
  cleanup_undefined_types (objfile);
@


1.94
log
@	* tracepoint.c (scope_info): Update.
	* symtab.c (lookup_block_symbol, iterate_over_symbols)
	(find_pc_sect_symtab, search_symbols)
	(default_make_symbol_completion_list_break_on)
	(make_file_symbol_completion_list): Update.
	* symmisc.c (dump_symtab_1): Update.
	* stack.c (print_frame_args, iterate_over_block_locals)
	(print_frame_labels, iterate_over_block_arg_vars): Update.
	* python/py-block.c (block_object) <dict>: Remove.
	<block>: New field.
	<iter>: Change type.
	(blpy_iter): Update.
	(blpy_block_syms_iternext): Update.
	* psymtab.c (map_block): Use block iterators.
	* objfiles.c (objfile_relocate1): Use ALL_DICT_SYMBOLS.
	* mi/mi-cmd-stack.c (list_args_or_locals): Update.
	* mdebugread.c (parse_symbol, mylookup_symbol): Update.
	* infrun.c (check_exception_resume): Update.
	* cp-support.c (make_symbol_overload_list_block): Update.
	* coffread.c (patch_opaque_types): Update.
	* buildsym.c (finish_block, end_symtab): Use ALL_DICT_SYMBOLS.
	* block.h (struct block_iterator): New.
	(block_iterator_first, block_iterator_next, block_iter_name_first)
	(block_iter_name_next, block_iter_match_first)
	(block_iter_match_next): Declare.
	(ALL_BLOCK_SYMBOLS): Redefine.
	* block.c (block_iterator_first, block_iterator_next)
	(block_iter_name_first, block_iter_name_next)
	(block_iter_match_first, block_iter_match_next): New functions.
	* ada-lang.c (ada_add_block_symbols)
	(ada_make_symbol_completion_list): Use block iterator.
@
text
@d217 6
a222 5
struct block *
finish_block (struct symbol *symbol, struct pending **listhead,
	      struct pending_block *old_blocks,
	      CORE_ADDR start, CORE_ADDR end,
	      struct objfile *objfile)
d230 3
a232 1
  block = allocate_block (&objfile->objfile_obstack);
a246 3
  /* Superblock filled in when containing block is made.  */
  BLOCK_SUPERBLOCK (block) = NULL;
  BLOCK_NAMESPACE (block) = NULL;
d390 9
d1029 2
a1030 2
      finish_block (0, &global_symbols, 0, last_source_start_addr,
		    end_addr, objfile);
d1170 8
@


1.93
log
@	* buildsym.c (add_free_pendings): Remove.
	* buildsym.h (add_free_pendings): Remove.
@
text
@d264 4
a267 1
	  ALL_BLOCK_SYMBOLS (block, iter, sym)
d279 3
a281 1
	      ALL_BLOCK_SYMBOLS (block, iter, sym)
d1181 3
a1183 3
	  for (sym = dict_iterator_first (BLOCK_DICT (block), &iter);
	       sym != NULL;
	       sym = dict_iterator_next (&iter))
@


1.92
log
@	* buildsym.c (record_pending_block): Now static.
	* buildsym.h: (record_pending_block): Remove.
@
text
@a103 14
/* Add a pending list to free_pendings.  */
void
add_free_pendings (struct pending *list)
{
  struct pending *link = list;

  if (list)
    {
      while (link->next) link = link->next;
      link->next = free_pendings;
      free_pendings = list;
    }
}

@


1.91
log
@	* gdbtypes.h (struct main_type): Change type of name,tag_name,
	and fields.name members from char * to const char *.  All uses updated.
	(struct cplus_struct_type): Change type of fn_fieldlists.name member
	from char * to const char *.  All uses updated.
	(type_name_no_tag): Update.
	(lookup_unsigned_typename, lookup_signed_typename): Update.
	* gdbtypes.c (type_name_no_tag): Change result type
	from char * to const char *.  All callers updated.
	(lookup_unsigned_typename, lookup_signed_typename): Change type of
	name parameter from char * to const char *.
	* symtab.h (struct cplus_specific): Change type of demangled_name
	member from char * to const char *.  All uses updated.
	(struct general_symbol_info): Change type of name and
	mangled_lang.demangled_name members from char * to const char *.
	All uses updated.
	(symbol_get_demangled_name, symbol_natural_name): Update.
	(symbol_demangled_name, symbol_search_name): Update.
	* symtab.c (symbol_get_demangled_name): Change result type
	from char * to const char *.  All callers updated.
	(symbol_natural_name, symbol_demangled_name): Ditto.
	(symbol_search_name): Ditto.
	(completion_list_add_name): Change type of symname,sym_text,
	text,word parameters from char * to const char *.
	(completion_list_objc_symbol): Change type of sym_text,
	text,word parameters from char * to const char *.
	* ada-lang.c (find_struct_field): Change type of name parameter
	from char * to const char *.
	(encoded_ordered_before): Similarly for N0,N1 parameters.
	(old_renaming_is_invisible): Similarly for function_name parameter.
	(ada_type_name): Change result type from char * to const char *.
	All callers updated.
	* ada-lang.h (ada_type_name): Update.
	* buildsym.c (hashname): Change type of name parameter
	from char * to const char *.
	* buildsym.h (hashname): Update.
	* dbxread.c (end_psymtab): Change type of include_list parameter
	from char ** to const char **.
	* dwarf2read.c (determine_prefix): Change result type
	from char * to const char *.  All callers updated.
	* f-lang.c (find_common_for_function): Change type of name, funcname
	parameters from char * to const char *.
	* f-lang.c (find_common_for_function): Update.
	* f-valprint.c (list_all_visible_commons): Change type of funcname
	parameters from char * to const char *.
	* gdbarch.sh (static_transform_name): Change type of name parameter
	and result from char * to const char *.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* i386-sol2-tdep.c (i386_sol2_static_transform_name): Change type
	of name parameter from char * to const char *.
	* jv-lang.c (java_primitive_type_from_name): Ditto.
	(java_demangled_signature_length): Similarly for signature parameter.
	(java_demangled_signature_copy): Ditto.
	(java_demangle_type_signature): Ditto.
	* jv-lang.h (java_primitive_type_from_name): Update.
	(java_demangle_type_signature): Update.
	* objc-lang.c (specialcmp): Change type of a,b parameters
	from char * to const char *.
	* p-lang.c (is_pascal_string_type): Change type of arrayname parameter
	from char * to const char *.  All callers updated.
	* p-lang.h (is_pascal_string_type): Update.
	* solib-frv.c (find_canonical_descriptor_in_load_object): Change type
	of name parameter from char * to const char *.
	* sparc-sol2-tdep.c (sparc_sol2_static_transform_name): Ditto.
	* utils.c (fprintf_symbol_filtered): Ditto.
	* defs.h (fprintf_symbol_filtered): Update.
	* sparc-tdep.h (sparc_sol2_static_transform_name): Update.
	* stabsread.h (end_psymtab): Update.
	* stack.c (find_frame_funname): Change type of funname parameter
	from char ** to const char **.
	* stack.h (find_frame_funname): Update.
	* typeprint.c (type_print): Change type of varstring parameter
	from char * to const char *.
	* value.h (type_print): Update.
	* xcoffread.c (xcoff_start_psymtab): Change type of filename parameter
	from char * to const char *.  All callers updated.
	(xcoff_end_psymtab): Change type of include_list parameter
	from char ** to const char **.  All callers updated.
	(swap_sym): Similarly for name parameter.  All callers updated.
	* coffread.c (patch_type): Add (char*) cast to xfree parameter.
	Use xstrdup.
	(process_coff_symbol): Use xstrdup.
	* stabsread.c (stabs_method_name_from_physname): Renamed from
	update_method_name_from_physname.  Change result type from void
	to char *.  All callers updated.
	(read_member_functions): In has_destructor case, store name in objfile
	obstack instead of malloc space.  In !has_stub case, fix mem leak.
@
text
@d88 4
d407 1
a407 1
void
@


1.90
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d154 1
a154 1
  char *pp;
d1254 1
a1254 1
hashname (char *name)
@


1.89
log
@	* buildsym.c (add_symbol_to_list): Delete outdated comment.
@
text
@d2 1
a2 3
   Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009,
   2010, 2011 Free Software Foundation, Inc.
@


1.89.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 3
a4 1
   Copyright (C) 1986-2004, 2007-2012 Free Software Foundation, Inc.
@


1.88
log
@gdb/
	Fix regression of displaying the debug format.
	* buildsym.c (end_symtab): Set symtab's debugformat and producer from
	subfile.
@
text
@d115 2
a116 5
      
/* Add a symbol to one of the lists of symbols.  While we're at it, if
   we're in the C++ case and don't have full namespace debugging info,
   check to see if it references an anonymous namespace; if so, add an
   appropriate using directive.  */
@


1.87
log
@	* mdebugread.c (psymtab_to_symtab_1): Copy linetable to obstack.
	(new_symtab): Don't set `free_code' on symtab.
	(new_linetable): Properly handle size==0.
	* symtab.h (struct symtab) <free_code, free_func>: Remove.
	* symmisc.c (free_symtab): Don't free the linetable.  Don't call
	free_func.
	* jv-lang.c (struct jv_per_objfile_data): New.
	(jv_per_objfile_free): Free the data.
	(get_dynamics_objfile): Allocate a jv_per_objfile_data.
	(get_java_class_symtab): Set the `dict' field on the
	jv_per_objfile_data.
	(free_class_block): Remove.
	* buildsym.c (end_symtab): Don't set `free_code' or `free_func' on
	the symtab.
@
text
@d1112 6
@


1.86
log
@	* xcoffread.c (read_xcoff_symtab): Make `debugfmt' const.
	* symtab.h (struct symtab) <producer, debugformat>: Now const.
	* symmisc.c (free_symtab): Don't free debugformat.
	* buildsym.h (struct subfile) <producer, debugformat>: Now const.
	(record_debugformat, record_producer): Document.
	* buildsym.c (end_symtab): Don't save debugformat and producer
	names on obstack.
	(end_symtab): Don't free debugformat and producer fields.
	(record_debugformat): Don't call xstrdup.
	(record_producer): Likewise.
@
text
@a1102 2
	  symtab->free_code = free_linetable;
	  symtab->free_func = NULL;
@


1.85
log
@2011-03-23  Kai Tietz  <ktietz@@redhat.com>

	* breakpoint.c (clear_command): Use filename_cmp
	instead of strcmp for comparison.
	* buildsym.c (watch_main_source_file_lossage): Likewise.
	(patch_subfile_names): Use IS_DIR_SEPARATOR instead of
	checking just for slash.
	* dbxread.c (read_dbx_symtab): Use lbasename instead of
	strrchr and filename_cmp instead of strcmp for filenames.
	(add_old_header_file): Use filename_cmp
	instead of strcmp for comparison.
	* exec.c (exec_set_section_address): Likewise.
	* macrotab.c (macro_lookup_inclusion): Likewise.
	(macro_lookup_inclusion): Likewise.
	* elfread.c (_initialize_elfread): Likewise.
	(elfstab_offset_sections): Likewise.
	(elfstab_offset_sections): Use lbasename instead of
	strrchr.
	* mdebugread.c (parse_partial_symbols): Likewise.
	(arse_partial_symbols): Use filename_(n)cmp instead of
	str(n)cmp for comparison.
	* minsyms.c (lookup_minimal_symbol): Likewise.
	* psymtab.c (read_psymtabs_with_filename): Likewise.
	* solib.c (solib_read_symbols): Likewise.
	(reload_shared_libraries_1): Likewise.
	* symmisc.c (maintenance_print_symbols): Likewise.
	* symfile.c (separate_debug_file_exists): Likewise.
	(reread_symbols): Likewise.
	(find_separate_debug_file_by_debuglink): Likewise.
	* remote-fileio.c (remote_fileio_func_rename): Likewise.
	* source.c (add_path): Likewise.
	* symtab.c (filename_seen): Likewise.
	(file_matches): Likewise.
	(print_symbol_info): Likewise.
	(maybe_add_partial_symtab_filename): Likewise.
	(make_source_files_completion_list): Likewise.
	* xml-syscall.c (init_sysinfo): Likewise.
	* windows-nat.c (_initialize_check_for_gdb_ini): Use
	IS_DIR_SEPARATOR for checking for trailing path separator.
@
text
@a1113 14
	  /* Save the debug format string (if any) in the symtab.  */
	  if (subfile->debugformat != NULL)
	    {
	      symtab->debugformat = obsavestring (subfile->debugformat,
					      strlen (subfile->debugformat),
						  &objfile->objfile_obstack);
	    }

	  /* Similarly for the producer.  */
	  if (subfile->producer != NULL)
	    symtab->producer = obsavestring (subfile->producer,
					     strlen (subfile->producer),
					     &objfile->objfile_obstack);

a1157 6
      if (subfile->debugformat != NULL)
	{
	  xfree ((void *) subfile->debugformat);
	}
      if (subfile->producer != NULL)
	xfree (subfile->producer);
d1262 1
a1262 1
record_debugformat (char *format)
d1264 1
a1264 1
  current_subfile->debugformat = xstrdup (format);
d1270 1
a1270 6
  /* The producer is not always provided in the debugging info.
     Do nothing if PRODUCER is NULL.  */
  if (producer == NULL)
    return;

  current_subfile->producer = xstrdup (producer);
@


1.84
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d646 1
a646 1
      && subfile->name[strlen (subfile->name) - 1] == '/')
d881 1
a881 1
	  if (strcmp (lbasename (subfile->name), mainbase) == 0)
@


1.83
log
@run copyright.sh for 2011.
@
text
@d329 2
a330 1
		     _("block end address less than block start address in %s (patched it)"),
d336 2
a337 1
		     _("block end address %s less than block start address %s (patched it)"),
d375 2
a376 1
			     _("inner block (%s-%s) not inside outer block (%s-%s)"),
d701 2
a702 1
      internal_error (__FILE__, __LINE__, _("failed internal consistency check"));
@


1.82
log
@2010-12-29  Michael Snyder  <msnyder@@vmware.com>

	* bcache.c: Comment clean-up.
	* block.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* bsd-kvm.c: Ditto.
	* buildsym.c: Ditto.
@
text
@d4 1
a4 1
   2010 Free Software Foundation, Inc.
@


1.81
log
@	* symfile.h (allocate_symtab): Update.
	* symfile.c (allocate_symtab): Make 'filename' const.
	* psymtab.c (add_psymbol_to_bcache): Make 'name' const.
	(add_psymbol_to_list): Likewise.
	* psympriv.h (struct partial_symtab) <filename, dirname>: Now
	const.
	(add_psymbol_to_list): Update.
	* mdebugread.c (new_symtab): Make 'name' const.
	(psymtab_to_symtab_1): Make 'filename' const.
	* elfread.c (elfstab_offset_sections): Update.
	* dwarf2read.c (dwarf_decode_lines): Make 'comp_dir' const.
	(dwarf2_start_subfile): Make 'dirname' and 'comp_dir' const.
	(psymtab_include_file_name): Update.
	* dbxread.c (find_stab_function_addr): Make 'filename' const.
	* buildsym.h (start_subfile): Update.
	* buildsym.c (start_subfile): Make arguments const.
@
text
@d26 1
a26 1
   DWARF, etc) belong somewhere else. */
d38 1
a38 1
#include "expression.h"		/* For "enum exp_opcode" used by... */
d40 1
a40 1
#include "filenames.h"		/* For DOSish file names */
d51 1
a51 1
#include "buildsym.h"		/* Our own declarations */
d100 1
a100 1
/* maintain the lists of symbols and blocks */
d102 1
a102 1
/* Add a pending list to free_pendings. */
d130 1
a130 1
  /* We keep PENDINGSIZE symbols in each link of the list. If we
d178 1
a178 1
   `struct pending's as we can easily find. */
d218 1
a218 1
/* This function is called to discard any pending blocks. */
d259 1
a259 1
  /* Superblock filled in when containing block is made */
d276 1
a276 1
	     parameter symbols. */
d322 1
a322 1
     greater than starting address */
d339 1
a339 1
      /* Better than nothing */
d354 1
a354 1
	     them. If the compiler/assembler/linker work, this just
d476 1
a476 1
  /* Copy the blocks into the blockvector. This is done in reverse
d478 1
a478 1
     (ascending starting address). finish_block has hair to insert
d499 1
a499 1
     their being in the right order so we can binary search. Check the
d523 2
a524 1
   the directory in which the file was compiled (or NULL if not known).  */
d559 1
a559 1
  /* This subfile is not known.  Add an entry for it. Make an entry
d569 1
a569 1
  /* Save its name and compilation directory name */
d585 1
a585 1
     source file. */
d595 1
a595 1
     later via a call to record_debugformat. */
d637 1
a637 1
   directory name actually is (by checking for a trailing '/'). */
d658 1
a658 1
         symbols have been processed for a given source file. */
d684 2
a685 1
      internal_error (__FILE__, __LINE__, _("failed internal consistency check"));
d830 8
a837 8
/* Subroutine of end_symtab to simplify it.
   Look for a subfile that matches the main source file's basename.
   If there is only one, and if the main source file doesn't have any
   symbol or line number information, then copy this file's symtab and
   line_vector to the main source file's subfile and discard the other subfile.
   This can happen because of a compiler bug or from the user playing games
   with #line or from things like a distributed build system that manipulates
   the debug info.  */
d854 6
a859 4
  /* If the main source file doesn't have any line number or symbol info,
     look for an alias in another subfile.
     We have to watch for mainsub == NULL here.  It's a quirk of end_symtab,
     it can return NULL so there may not be a main subfile.  */
d935 1
a935 1
   never know about this empty file (FIXME). */
d1024 4
a1027 4
      finish_block (0, &file_symbols, 0, last_source_start_addr, end_addr,
		    objfile);
      finish_block (0, &global_symbols, 0, last_source_start_addr, end_addr,
		    objfile);
d1048 1
a1048 1
      /* If we have blocks of symbols, make a symtab. Otherwise, just
d1077 1
a1077 1
	      /* Reallocate the line table on the symbol obstack */
d1089 1
a1089 1
	      /* Reallocate the dirname on the symbol obstack */
d1107 1
a1107 1
	     the symbols. */
d1110 1
a1110 1
	  /* Save the debug format string (if any) in the symtab */
d1197 2
a1198 2
	  /* Inlined functions may have symbols not in the global or static
	     symbol lists.  */
d1257 1
a1257 1
   popped. */
d1268 1
a1268 1
/* Compute a small integer hash code for the given name. */
d1300 1
a1300 1
   Void return. */
@


1.80
log
@2010-05-13  Michael Snyder  <msnyder@@vmware.com>

	* blockframe.c: White space.
	* breakpoint.c: White space.
	* buildsym.c: White space.
@
text
@d526 1
a526 1
start_subfile (char *name, char *dirname)
@


1.79
log
@2010-03-12  Sami Wagiaalla  <swagiaal@@redhat.com>

	* buildsym.c (finish_block): Reset using_directives pointer
	after block initialization.


2010-03-12  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdb.cp/gdb2384-base.h: Created 'namespace B'.
	* gdb.cp/gdb2384-base.cc: Use 'namespace B'.
@
text
@d677 1
a677 1
  = (struct subfile_stack *) xmalloc (sizeof (struct subfile_stack));
d711 1
a712 1

@


1.78
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d390 1
@


1.78.2.1
log
@PR 11408: Backport using_directives memory leak fix.

2010-04-08  Sami Wagiaalla  <swagiaal@@redhat.com>

	PR Breakpoints/11408:
	* cp-namespace.c (cp_add_using): Deleted.
	(cp_add_using_directive): Use obstack allocations.
	Merged the function cp_add_using into this one.
	Added 'struct obstack *' argument.
	(cp_scan_for_anonymous_namespaces): Updated.
	* cp-support.h: Updated.
	* dwarf2read.c (read_import_statement): Updated.
	(read_namespace): Updated.
	* buildsym.c (finish_block): Reset using_directives pointer
	after block initialization.


2010-03-22  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdb.cp/gdb2384-base.h: Created 'namespace B'.
	* gdb.cp/gdb2384-base.cc: Use 'namespace B'.
@
text
@a389 1
  using_directives = NULL;
@


1.77
log
@	ARI fix: OP eol rule.
	* blockframe.c (find_pc_partial_function): Avoid operator at end of
	line.
	* buildsym.c (find_symbol_in_list): Idem.
	(start_subfile, patch_subfile_names): Idem.
	* c-exp.y (variable, yylex): Idem.
	* c-typeprint.c (c_print_type, c_type_print_base): Idem.
	* c-valprint.c (c_val_print): Idem.
	* coffread.c (patch_opaque_types, process_coff_symbol): Idem.
	* corelow.c (core_open): Idem.
	* cris-tdep.c (move_reg_to_mem_movem_op): Idem.
	* cli/cli-decode.c (help_cmd_list, find_command_name_length): Idem.
@
text
@d3 2
a4 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009
   Free Software Foundation, Inc.
@


1.76
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d166 2
a167 2
	  if (*pp == *name && strncmp (pp, name, length) == 0 &&
	      pp[length] == '\0')
d586 2
a587 2
  if (subfile->language == language_unknown &&
      subfile->next != NULL)
d659 2
a660 2
      if (subfile->language == language_unknown &&
	  subfile->next != NULL)
@


1.75
log
@	* gdbtypes.h (struct builtin_type): Remove builtin_core_addr,
	nodebug_text_symbol, nodebug_data_symbol, nodebug_unknown_symbol,
	and nodebug_tls_symbol members.
	(struct objfile_type): New data structure.
	(objfile_type): Add prototype.
	* gdbtypes.c (gdbtypes_post_init): Remove initialization code
	for types no longer in struct builtin_type.
	(objfile_type_data): New static variable.
	(_initialize_gdbtypes): Initialize it.
	(objfile_type): New function.

	* gdbtypes.h (builtin_type_error): Remove.
	* gdbtypes.c (build_complex): Do not use builtin_type_error.
	* symtab.c (builtin_type_error): Remove.
	(_initialize_symtab): Remove initialization.

	* stabsread.c (dbx_lookup_type, define_symbol, error_type,
	rs6000_builtin_type, read_range_type): Use per-objfile types
	instead of global or per-architecture builtin types.
	* coffread.c (decode_type): Likewise.
	* dwarf2read.c (read_array_type, read_tag_string_type,
	new_symbol, die_type): Likewise.
	* mdebugread.c (parse_symbol, basic_type, upgrade_type,
	parse_procedure, psymtab_to_symtab_1): Likewise.
	* xcoffread.c (process_xcoff_symbol): Likewise.
	* parse.c (write_exp_msymbol): Likewise.

	* stabsread.c (rs6000_builtin_type_data): New static variable.
	(_initialize_stabsread): Initialize it.
	(rs6000_builtin_type): Add OBJFILE argument.  Allocate builtin
	types per-objfile instead of globally.

	* stabsread.c (dbx_lookup_type): Add OBJFILE argument.  Use it
	instead of current_objfile; pass it to rs6000_builtin_type.
	(dbx_alloc_type, read_type, read_range_type): Update calls.
	(cleanup_undefined_types_noname): Add OBJFILE argument and
	pass it to dbx_lookup_type.
	(cleanup_undefined_types): Add OBJFILE argument and pass it
	to cleanup_undefined_types_noname.
	* stabsread.h (cleanup_undefined_types): Add OBJFILE argument.
	* buildsym.c (end_symtab): Update call.
@
text
@d238 1
d335 3
a337 2
		     _("block end address 0x%s less than block start address 0x%s (patched it)"),
		     paddr_nz (BLOCK_END (block)), paddr_nz (BLOCK_START (block)));
d373 5
a377 5
			     _("inner block (0x%s-0x%s) not inside outer block (0x%s-0x%s)"),
			     paddr_nz (BLOCK_START (pblock->block)),
			     paddr_nz (BLOCK_END (pblock->block)),
			     paddr_nz (BLOCK_START (block)),
			     paddr_nz (BLOCK_END (block)));
@


1.74
log
@	gdb/
	* NEWS: Document inlined function support.
	* Makefile.in (SFILES): Add inline-frame.c.
	(COMMON_OBS): Add inline-frame.o.
	* block.c (contained_in): Rewrite to use lexical nesting.
	(block_linkage_function): Skip inlined function blocks.
	(block_inlined_p): New.
	* block.h (struct block): Update comment.
	(block_inlined_p): New prototype.
	* blockframe.c (get_frame_block): Handle inlined functions.
	(get_frame_function): Do not use block_linkage_function.
	(block_innermost_frame): Use get_frame_block and contained_in.
	* breakpoint.c (watchpoint_check): Remove extra reinit_frame_cache.
	Skip over inlined functions.  Simplify epilogue check.
	(bpstat_check_breakpoint_conditions): Use get_stack_frame_id.
	Update comments.
	(set_momentary_breakpoint): Only accept non-inlined frames.
	(watch_command_1): Use frame_unwind_caller_pc and
	frame_unwind_caller_id instead of get_prev_frame.
	(until_break_command): Likewise.  Use get_stack_frame_id.
	* buildsym.c (end_symtab): Set SYMBOL_SYMTAB for block functions.
	* dwarf2loc.c (dwarf_expr_frame_base): Use block_linkage_function.
	* dwarf2read.c (process_die): Handle DW_TAG_inlined_subroutine.
	(read_func_scope, new_symbol): Likewise.  Handle arguments specially
	for inlined functions without call site information.
	(inherit_abstract_dies): Allow tag mismatch for inlined subroutines.
	(die_specification): Treat DW_AT_abstract_origin as a specification.
	(read_type_die): Handle DW_TAG_inlined_subroutine.
	* frame-unwind.c (frame_unwind_init): Add inline_frame_unwind.
	* frame.c (fprint_frame_id): Print inline depth.
	(fprint_frame_type): Handle INLINE_FRAME and SENTINEL_FRAME.
	(skip_inlined_frames, get_stack_frame_id): New.
	(frame_unwind_caller_id): Use skip_inlined_frames.
	(frame_id_inlined_p): New.
	(frame_id_eq): Make the logic match the comments.  Add inline_depth
	check.
	(frame_id_inner): Handle inlined functions.
	(frame_unwind_pc): New function, copied from frame_unwind_caller_pc.
	(frame_unwind_caller_pc): Use skip_inlined_frames and frame_unwind_pc.
	(get_prev_frame_1): Check for inline frames.  Split out frame
	allocation to get_prev_frame_raw.
	(get_prev_frame_raw): New function.
	(get_prev_frame): Handle inline frames.
	(get_frame_pc): Use frame_unwind_pc.
	(get_frame_address_in_block): Skip inlined frames on both sides.
	(pc_notcurrent): Delete.
	(find_frame_sal): Rewrite to handle inline call sites.  Use
	get_frame_address_in_block.
	(deprecated_update_frame_pc_hack): Make static.
	* frame.h: Update comments.
	(struct frame_id): Add inline_depth.
	(enum frame_type): Add INLINE_FRAME.
	(frame_id_inlined_p, get_stack_frame_id): New prototypes.
	* gdbthread.h (struct thread_info): Add step_stack_frame_id field.
	* infcmd.c (set_step_frame): New function.
	(step_once): Use set_step_frame.  Handle inlined functions.
	(until_next_command): Use set_step_frame.
	(finish_backward), finish_forward): Use get_stack_frame_id.
	(finish_command): Support inlined functions.
	* inferior.h (set_step_info): New prototype.
	* infrun.c (RESUME_ALL): Use minus_one_ptid.
	(clear_proceed_status): Clear step_stack_frame_id.
	(init_wait_for_inferior): Call clear_inline_frame_state.
	(init_execution_control_state): Make static.
	(set_step_info): New function.
	(init_thread_stepping_state): Do not set the symtab or line here.
	(stepped_in_from): New function.
	(handle_inferior_event): Handle inlined functions.  Use set_step_info.
	(insert_step_resume_breakpoint_at_frame): Use get_stack_frame_id.
	(struct inferior_status): Add step_stack_frame_id.
	(save_inferior_status, restore_inferior_status): Save and restore
	step_stack_frame_id.
	* inline-frame.c, inline-frame.h: New files.
	* minsyms.c (prim_record_minimal_symbol_and_info): Use XCALLOC.
	* regcache.c (regcache_write_pc): Call reinit_frame_cache.
	* s390-tdep.c (s390_prologue_frame_unwind_cache): Handle INLINE_FRAME.
	* stack.c (frame_show_address): New.
	(print_frame_info, print_frame): Use it.
	(find_frame_funname): Use get_frame_function.  Handle inlined blocks.
	(frame_info): Mark inlined functions.
	(backtrace_command_1): Use get_current_user_frame.
	(print_frame_local_vars, print_frame_label_vars): Update comments.
	(return_command): Refuse inlined functions.
	* symtab.c (lookup_symbol_aux_local): Stop at inlined function
	boundaries.
	(find_function_start_sal): Avoid inlined functions.
	(completion_list_add_fields): New function.
	(default_make_symbol_completion_list): Use it.  Use block_static_block
	and block_global_block.  Check for inlined functions.
	(skip_prologue_using_sal): Avoid line number comparison across
	inlining.
	* symtab.h (struct symbol): Add is_inlined.
	(SYMBOL_INLINED): New.
	* target.c (target_resume): Call clear_inline_frame_state.
	* valops.c (value_of_variable): Check block_inlined_p.

	gdb/doc/
	* gdb.texinfo (Debugging Optimized Code): New chapter.
	(Compiling for Debugging): Reference it.  Move some
	text to the new section.

	gdb/testsuite/
	* gdb.base/break.exp: Add an XFAIL for gcc/36748.
	* gdb.cp/annota2.exp: Accept frames-invalid in more places.
	* gdb.opt/Makefile.in (EXECUTABLES): Update.
	* gdb.opt/clobbered-registers-O2.exp: Update to GPL v3.
	* gdb.opt/inline-bt.c, gdb.opt/inline-bt.exp,
	gdb.opt/inline-cmds.c, gdb.opt/inline-cmds.exp,
	gdb.opt/inline-locals.c, gdb.opt/inline-locals.exp,
	gdb.opt/inline-markers.c: New files.
	* lib/gdb.exp (skip_inline_frame_tests): New function.
	(skip_inline_var_tests): New function.
@
text
@d1000 1
a1000 1
  cleanup_undefined_types ();
@


1.73
log
@2009-06-23  Sami Wagiaalla  <swagiaal@@redhat.com>

       * dwarf2read.c (process_die): Handle import statements
       (DW_TAG_imported_declaration, case DW_TAG_imported_module)
       (read_import_statement): New.
       (read_func_scope): Update using_directives to point to current context
       (read_lexical_block_scope): Ditto.
       * cp-support.h: Added prototype for cp_add_using.
       * cp-namespace.c: Removed local context_stack.
       (cp_initialize_namespace): Deleted.
       (cp_finalize_namespace): Deleted.
       (cp_add_using_directive): Use using_directives instead of using_list.
       (cp_add_using): No longer static.
       * buildsym.h: Created global using_direct variable.
       Created using_direct variable in context_stack.
       * buildsym.c (finish_block): Set using directives for the block under
       construction.
       (start_symtab): Removed call to cp_initialize_namespace().
       (end_symtab): Removed call to cp_finalize_namespace().
       (push_context): Save and reset using_directives.
       * block.c (block_using): Return using directives for given
       block instead of static block.

2009-06-23  Sami Wagiaalla  <swagiaal@@redhat.com>

       * gdb.cp/namespace-using.exp: New test.
       * gdb.cp/namespace-using.cc: New test.
@
text
@d1190 6
@


1.72
log
@gdb/
	PR gdb/9988:
	* buildsym.c (block_compar): New function.
	(end_symtab): Replace the bubble sort by a qsort based code.
@
text
@d387 2
a816 4
  /* Set up support for C++ namespace support, in case we need it.  */

  cp_initialize_namespace ();

a1021 2
      cp_finalize_namespace (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK),
			     &objfile->objfile_obstack);
d1233 1
d1238 1
@


1.71
log
@	* buildsym.c (record_line): Remove call to gdbarch_addr_bits_remove.

	* coffread.c (coff_symtab_read): Call gdbarch_addr_bits_remove before
	calling record_line.
	(enter_linenos): Likewise.
	* dbxread.c (process_one_symbol): Likewise.
	* dwarf2read.c (dwarf_decode_lines): Likewise.
	* mdebugread.c (psymtab_to_symtab_1): Likewise.
	* xcoffread.c (enter_line_range): Likewise.
@
text
@d902 13
d968 14
a981 5
      /* FIXME!  Remove this horrid bubble sort and use merge sort!!! */
      int swapped;
      do
	{
	  struct pending_block *pb, *pbnext;
d983 1
a983 3
	  pb = pending_blocks;
	  pbnext = pb->next;
	  swapped = 0;
d985 3
a987 3
	  while (pbnext)
	    {
	      /* swap blocks if unordered! */
d989 1
a989 12
	      if (BLOCK_START (pb->block) < BLOCK_START (pbnext->block))
		{
		  struct block *tmp = pb->block;
		  pb->block = pbnext->block;
		  pbnext->block = tmp;
		  swapped = 1;
		}
	      pb = pbnext;
	      pbnext = pbnext->next;
	    }
	}
      while (swapped);
@


1.70
log
@gdb/
	Replace the savestring calls by xstrdup calls where possible.
	* breakpoint.c (condition_command, set_raw_breakpoint)
	(create_catchpoint, update_breakpoint_locations): Replace the
	savestring calls by xstrdup calls where possible.
	* buildsym.c (start_subfile, patch_subfile_names, record_debugformat)
	(record_producer): Likewise.
	* coffread.c (coff_start_symtab, complete_symtab): Likewise.
	* corefile.c (set_gnutarget): Likewise.
	* dbxread.c (add_new_header_file): Likewise.
	* demangle.c (set_demangling_command, set_demangling_style): Likewise.
	* event-top.c (push_prompt, pop_prompt, command_line_handler)
	(set_async_prompt): Likewise.
	* infcmd.c (set_inferior_io_terminal, attach_command_post_wait):
	Likewise.
	* language.c (set_language_command, _initialize_language): Likewise.
	* linespec.c (decode_line_2): Likewise.
	* rs6000-nat.c (add_vmap): Likewise.
	* top.c (set_prompt, init_history, init_main): Likewise.
	* tracepoint.c (stringify_collection_list): Likewise.
	* varobj.c (varobj_create): Remove variable expr_len.  Replace the
	savestring calls by xstrdup calls where possible.
	(value_of_root, c_name_of_variable, c_describe_child): Replace the
	savestring calls by xstrdup calls where possible.
	* xcoffread.c (complete_symtab): Likewise.
	* cli/cli-script.c (build_command_line, define_command): Likewise.
	* cli/cli-setshow.c (do_setshow_command): Likewise.
@
text
@a733 2
  pc = gdbarch_addr_bits_remove (current_gdbarch, pc);

@


1.69
log
@        * buildsym.c (end_symtab): If we ignore the subfiles, then
        unlink the associated symtabs if they were already allocated.
@
text
@d564 2
a565 3
  subfile->name = (name == NULL) ? NULL : savestring (name, strlen (name));
  subfile->dirname =
    (dirname == NULL) ? NULL : savestring (dirname, strlen (dirname));
d640 1
a640 1
      subfile->name = savestring (name, strlen (name));
d1262 1
a1262 1
  current_subfile->debugformat = savestring (format, strlen (format));
d1273 1
a1273 1
  current_subfile->producer = savestring (producer, strlen (producer));
@


1.68
log
@        Updated copyright notices for most files.
@
text
@d1121 26
@


1.67
log
@	* buildsym.c (add_symbol_to_list): Do not call
	cp_scan_for_anonymous_namespaces here.
	(finish_block): Do not call cp_set_block_scope here.
	* cp-namespace.c (processing_has_namespace_info)
	(processing_current_prefix): Delete.
	(cp_initialize_namespace): Do not initialize
	processing_has_namespace_info.
	(cp_scan_for_anonymous_namespaces): Use SYMBOL_DEMANGLED_NAME.  Do
	not check processing_has_namespace_info.
	(cp_set_block_scope): Take prefix and namespace info flag as
	arguments.  Honor namespaces regardless of a demangled name.
	* cp-support.h (processing_has_namespace_info)
	(processing_current_prefix): Delete declarations.
	(cp_set_block_scope): Update prototype.
	* dwarf2read.c (processing_has_namespace_info)
	(processing_current_prefix): New static variables.
	(read_file_scope): Initialize processing_has_namespace_info.
	(read_func_scope): Call cp_set_block_scope for C++.
	(new_symbol): Call cp_scan_for_anonymous_namespaces for C++.
	* symtab.c (symbol_demangled_name): Accept a const argument.
	* symtab.h (symbol_demangled_name): Update prototype.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008
@


1.66
log
@	* ax-gdb.c (gen_var_ref): Use SYMBOL_LINKAGE_NAME.
	* blockframe.c (find_pc_partial_function): Likewise.
	* buildsym.c (find_symbol_in_list): Likewise.
	* c-valprint.c (c_val_print): Likewise.
	* coffread.c (patch_opaque_types, process_coff_symbol): Likewise.
	(coff_read_enum_type): Likewise.  Use SYMBOL_SET_LINKAGE_NAME.
	* cp-support.c (cp_remove_params): Renamed from remove_params and
	made global.
	(overload_list_add_symbol): Update call to remove_params.
	* cp-support.h (cp_remove_params): Declare.
	* dwarf2read.c (process_enumeration_scope): Use SYMBOL_LINKAGE_NAME.
	(dwarf2_const_value): Use SYMBOL_PRINT_NAME.
	* expprint.c (dump_subexp_body_standard): Likewise.
	* f-valprint.c (info_common_command, there_is_a_visible_common_named):
	Use SYMBOL_LINKAGE_NAME to find symbols and SYMBOL_PRINT_NAME
	for messages.
	* findvar.c (read_var_value): Use SYMBOL_LINKAGE_NAME.
	* gnu-v2-abi.c (gnuv2_value_rtti_type): Likewise.
	* hppa-hpux-tdep.c (hppa32_hpux_in_solib_call_trampoline)
	(hppa_hpux_skip_trampoline_code): Use SYMBOL_LINKAGE_NAME to find
	symbols and SYMBOL_PRINT_NAME for messages.
	* jv-lang.c (add_class_symbol): Use SYMBOL_SET_LINKAGE_NAME.
	* linespec.c (decode_line_2): Use SYMBOL_LINKAGE_NAME.
	* mdebugread.c (parse_symbol): Use SYMBOL_LINKAGE_NAME and
	SYMBOL_SET_LINKAGE_NAME.
	(mylookup_symbol): Use SYMBOL_LINKAGE_NAME.
	* minsyms.c (add_minsym_to_demangled_hash_table): Use
	SYMBOL_SEARCH_NAME.
	(lookup_minimal_symbol): Use SYMBOL_LINKAGE_NAME or
	SYMBOL_MATCHES_SEARCH_NAME, depending on the pass.
	* objfiles.h (ALL_OBJFILE_MSYMBOLS): Use SYMBOL_LINKAGE_NAME.
	* printcmd.c (build_address_symbolic): Use SYMBOL_LINKAGE_NAME.
	(address_info): Use SYMBOL_PRINT_NAME for messages and
	SYMBOL_LINKAGE_NAME for lookups.
	* sol-thread.c (info_cb): Use SYMBOL_PRINT_NAME for messages.
	* stabsread.c (patch_block_stabs, define_symbol)
	(read_type, read_enum_type, common_block_end)
	(cleanup_undefined_types_1, scan_file_globals): Use
	SYMBOL_LINKAGE_NAME, SYMBOL_SET_LINKAGE_NAME, ALL_OBJFILE_MSYMBOLS,
	and SYMBOL_PRINT_NAME.
	* stack.c (print_frame_args): Use SYMBOL_LINKAGE_NAME.
	(print_frame, frame_info): Use SYMBOL_PRINT_NAME for output.  Use
	cp_remove_params instead of cplus_demangle.
	(print_block_frame_labels, print_frame_arg_vars): Use
	SYMBOL_LINKAGE_NAME.
	* symmisc.c (dump_msymbols): Use ALL_OBJFILE_MSYMBOLS and
	SYMBOL_LINKAGE_NAME.
	(dump_symtab_1, print_symbol, print_partial_symbols)
	(maintenance_check_symtabs): Use SYMBOL_LINKAGE_NAME.
	* symtab.h (DEPRECATED_SYMBOL_NAME): Delete.
	(SYMBOL_SET_LINKAGE_NAME): New.
	(SYMBOL_SET_NAMES): Add a comment.
	* tracepoint.c (set_traceframe_context, validate_actionline)
	(collect_symbol, scope_info): Use SYMBOL_LINKAGE_NAME for
	lookups and SYMBOL_PRINT_NAME for output.
	* typeprint.c (typedef_print): Use SYMBOL_LINKAGE_NAME.
	* xcoffread.c (process_xcoff_symbol): Use SYMBOL_SET_LINKAGE_NAME.
@
text
@a149 6

  /* Check to see if we might need to look for a mention of anonymous
     namespaces.  */
  
  if (SYMBOL_LANGUAGE (symbol) == language_cplus)
    cp_scan_for_anonymous_namespaces (symbol);
a303 6

      /* If we're in the C++ case, set the block's scope.  */
      if (SYMBOL_LANGUAGE (symbol) == language_cplus)
	{
	  cp_set_block_scope (symbol, block, &objfile->objfile_obstack);
	}
@


1.65
log
@	* buildsym.c (start_subfile): Properly cast sentinel in concat
	call.
	* cp-name-parser.y: Include "config.h".
	* xml-tdesc.c (fetch_xml_from_file): Properly cast sentinel in
	concat call.
	* gdb_select.h: Include sys/time.h if sys/select.h is not
	available.
@
text
@d171 1
a171 1
	  pp = DEPRECATED_SYMBOL_NAME (list->symbol[j]);
@


1.64
log
@	* symtab.h (enum address_class): Remove LOC_REGPARM and
	LOC_COMPUTED_ARG.
	(struct symbol): Add is_argument.
	(SYMBOL_IS_ARGUMENT): Define.

	* ada-lang.c (ada_add_block_symbols): Use SYMBOL_IS_ARGUMENT.
	* buildsym.c (finish_block): Likewise.
	* stack.c (print_frame_args, print_block_frame_locals)
	(print_frame_arg_vars): Likewise.
	* symtab.c (lookup_block_symbol): Likewise.
	* tracepoint.c (add_local_symbols): Likewise.
	* mi/mi-cmd-stack.c (list_args_or_locals): Likewise.

	* coffread.c (process_coff_symbol): Set SYMBOL_IS_ARGUMENT.
	* dwarf2read.c (new_symbol): Likewise.
	* mdebugread.c (parse_symbol): Likewise.
	* stabsread.c (define_symbol): Likewise.

	* ada-exp.y (select_possible_type_sym): Don't handle LOC_REGPARM
	and LOC_COMPUTED_ARG.
	* ada-lang.c (resolve_subexp, symtab_for_sym): Likewise.
	* ax-gdb.c (gen_var_ref): Likewise.
	* eval.c (evaluate_subexp_for_address): Likewise.
	* findvar.c (symbol_read_needs_frame, read_var_value): Likewise.
	* m2-exp.y (yylex): Likewise.
	* printcmd.c (address_info): Likewise.
	* symmisc.c (print_symbol, print_partial_symbols): Likewise.
	* tracepoint.c (collect_symbol, scope_info): Likewise.

testsuite/:
	* gdb.base/frame-args.exp: Handle arguments that are optimized
	out.
@
text
@d550 1
a550 1
			       subfile->name, NULL);
@


1.63
log
@	* symtab.h (enum address_class): Remove LOC_BASEREG and
	LOC_BASEREG_ARG.
	(struct symbol): Remove "basereg" member of "aux_value" union.
	(SYMBOL_BASEREG): Remove.

	* ada-exp.y (select_possible_type_sym): Do not handle LOC_BASEREG
	or LOC_BASEREG_ARG.
	* ada-lang.c (resolve_subexp, symtab_for_sym): Likewise.
	(ada_add_block_symbols): Likewise.
	* ax-gdb.c (gen_var_ref): Likewise.
	* buildsym.c (finish_block): Likewise.
	* findvar.c (symbol_read_needs_frame, read_var_value): Likewise.
	* m2-exp.y (yylex): Likewise.
	* mi/mi-cmd-stack.c (list_args_or_locals): Likewise.
	* printcmd.c (address_info): Likewise.
	* stack.c (print_frame_args, print_block_frame_locals): Likewise.
	(print_frame_arg_vars): Likewise.
	* symmisc.c (print_symbol): Likewise.
	* symtab.c (lookup_block_symbol): Likewise.
	* tracepoint.c (collect_symbol, add_local_symbols): Likewise.
	(scope_info): Likewise.
@
text
@d286 2
a287 24
	      switch (SYMBOL_CLASS (sym))
		{
		case LOC_ARG:
		case LOC_REF_ARG:
		case LOC_REGPARM:
		case LOC_REGPARM_ADDR:
		case LOC_COMPUTED_ARG:
		  nparams++;
		  break;
		case LOC_UNDEF:
		case LOC_CONST:
		case LOC_STATIC:
		case LOC_REGISTER:
		case LOC_LOCAL:
		case LOC_TYPEDEF:
		case LOC_LABEL:
		case LOC_BLOCK:
		case LOC_CONST_BYTES:
		case LOC_UNRESOLVED:
		case LOC_OPTIMIZED_OUT:
		case LOC_COMPUTED:
		default:
		  break;
		}
d301 1
a301 1
		  switch (SYMBOL_CLASS (sym))
a302 5
		    case LOC_ARG:
		    case LOC_REF_ARG:
		    case LOC_REGPARM:
		    case LOC_REGPARM_ADDR:
		    case LOC_COMPUTED_ARG:
a305 15
		      break;
		    case LOC_UNDEF:
		    case LOC_CONST:
		    case LOC_STATIC:
		    case LOC_REGISTER:
		    case LOC_LOCAL:
		    case LOC_TYPEDEF:
		    case LOC_LABEL:
		    case LOC_BLOCK:
		    case LOC_CONST_BYTES:
		    case LOC_UNRESOLVED:
		    case LOC_OPTIMIZED_OUT:
		    case LOC_COMPUTED:
		    default:
		      break;
@


1.62
log
@	* symtab.h (enum address_class): Remove LOC_LOCAL_ARG.

	* ada-exp.y (select_possible_type_sym): Do not handle LOC_LOCAL_ARG.
	* ada-lang.c (resolve_subexp, symtab_for_sym): Likewise.
	(ada_add_block_symbols): Likewise.
	* ax-gdb.c (gen_var_ref): Likewise.
	* buildsyms.c (finish_block): Likewise.
	* findvar.c (symbol_read_needs_frame, read_var_value): Likewise.
	* m2-exp.y (yylex): Likewise.
	* mi/mi-cmd-stack.c (list_args_or_locals): Likewise.
	* printcmd.c (address_info): Likewise.
	* stack.c (print_frame_args, print_frame_arg_vars): Likewise.
	* symmisc.c (print_symbol, print_partial_symbols): Likewise.
	* symtab.c (lookup_block_symbol): Likewise.
	* tracepoint.c (collect_symbol, add_local_symbols): Likewise.
	(scope_info): Likewise.
@
text
@a291 1
		case LOC_BASEREG_ARG:
a303 1
		case LOC_BASEREG:
a328 1
		    case LOC_BASEREG_ARG:
a342 1
		    case LOC_BASEREG:
@


1.61
log
@	* symtab.h (enum address_class): Remove LOC_INDIRECT and
	LOC_HP_THREAD_LOCAL_STATIC.

	* findvar.c (symbol_read_needs_frame, read_var_value): Do not
	handle LOC_INDIRECT or LOC_HP_THREAD_LOCAL_STATIC.
	(read_var_value): Likewise.
	* buildsym.c (finish_block): Likewise.
	* objfiles.c (objfile_relocate): Likewise.
	* printcmd.c (address_info): Likewise.
	* symmisc.c (print_symbol, print_partial_symbols): Likewise.
	* tracepoint.c (scope_info): Likewise.
@
text
@a292 1
		case LOC_LOCAL_ARG:
a331 1
		    case LOC_LOCAL_ARG:
@


1.60
log
@	* buildsym.c (watch_main_source_file_lossage): New fn.
	(end_symtab): Call it.

	* gdb.base/hashline1.exp: New testcase.
	* gdb.base/hashline2.exp: New testcase.
	* gdb.base/hashline2.exp: New testcase.
@
text
@a299 1
		case LOC_INDIRECT:
a341 1
		    case LOC_INDIRECT:
@


1.59
log
@	Updated copyright notices for most files.
@
text
@d892 75
d1088 5
@


1.58
log
@Support lexical blocks and function bodies that occupy
non-contiguous address ranges.
* addrmap.c, addrmap.h: New files.
* block.h (struct addrmap): New forward declaration.
(struct blockvector): New member, 'map'.
(BLOCKVECTOR_MAP): New accessor macro.
* block.c: #include "addrmap.h"
(blockvector_for_pc_sect): If the blockvector we've found has
an address map, use it instead of searching the blocks.
* buildsym.c: #include "addrmap.h"
(pending_addrmap_obstack, pending_addrmap_interesting): New static
variables.
(really_free_pendings): If we have a pending addrmap, free it too.
(record_block_range): New function.
(make_blockvector): If we have an interesting pending addrmap,
record it in the new blockvector.
(start_symtab, buildsym_init): Assert that there is no pending
addrmap now; we should have cleaned up any addrmaps we'd built
previously.
(end_symtab): If there is a pending addrmap left over that didn't
get included in the blockvector, free it.
* buildsym.h (struct addrmap): New forward declaration.
(record_block_range): New prototype.
* objfiles.c: #include "addrmap.h".
(objfile_relocate): Relocate the blockvector's address map, if
present.
* dwarf2read.c (dwarf2_record_block_ranges): New function.
(read_func_scope, read_lexical_block_scope): Call it.
* Makefile.in (SFILES): Add addrmap.c.
(addrmap_h): New header dependency variable.
(COMMON_OBS): Add addrmap.o.
(addrmap.o): New rule.l
(block.o, objfiles.o, buildsym.o): Depend on $(addrmap_h).

* block.c (blockvector_for_pc, blockvector_for_pc_sect): Return a
pointer to the block, not its index in the blockvector.
(block_for_pc_sect): Use the returned block, instead of looking it
up ourselves.
* block.h (blockvector_for_pc, blockvector_for_pc_sect): Update
declarations.
* breakpoint.c (resolve_sal_pc): Use returned block, instead of
looking it up ourselves.
* stack.c (print_frame_label_vars): Disable function, which
depends on the block's index.

* buildsym.c (finish_block): Return the block we've built.
* buildsym.h (finish_block): Update prototype.

* defs.h (CORE_ADDR_MAX): New constant.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007
@


1.57
log
@	* buildsym.h (subfiles): Move ...
	* buildsym.c (subfiles): ... to here and make static.
@
text
@d46 1
d71 17
d216 6
d238 1
a238 1
void
d450 2
d483 32
d547 8
d877 3
d1155 5
d1273 4
@


1.56
log
@	* buildsym.c (start_subfile,start_symtab): Doc fixes.
@
text
@d58 4
@


1.55
log
@        * buildsym.c (finish_block): Remove "#if 1"/"#endif" brackets.
        (make_blockvector): Likewise. Remove FIXME comment.
@
text
@d510 1
a510 1
   the directory in which it resides (or NULL if not known).  */
d781 5
a785 1
   one original source file.  */
a789 1

@


1.54
log
@        * buildsym.c (free_pending_blocks): Remove commented-out code.
        (make_blockvector): Likewise. Re-use free_pending_blocks.
        (end_symtab): Remove commented-out code.
@
text
@a353 1
#if 1
a373 1
#endif
a384 1
#if 1
a415 1
#endif
a484 2
#if 1				/* FIXME, shut this off after a while
				   to speed up symbol reading.  */
d487 1
a487 1
     order and moan about it.  FIXME.  */
a502 1
#endif
@


1.53
log
@	* block.h (struct block): Remove "gcc_compile_flag" member.
	(BLOCK_GCC_COMPILED): Remove.
	* block.c (allocate_block): Do not clear BLOCK_GCC_COMPILED.
	* buildsym.c (finish_block): Do not set it.
	* symmisc.c (dump_symtab_1): Do not dump it.

	* value.h (using_struct_return): Remove "gcc_p" argument.
	* value.c (using_struct_return): Likewise.
	* eval.c (evaluate_subexp_standard): Adapt callers.
	* infcall.c (call_function_by_hand): Likewise.
	* stack.c (return_command): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.

	* gdbarch.sh (push_dummy_code): Remove "using_gcc" parameter.
	* gdbarch.c, gdbarch.h: Regenerate.
	* cris-tdep.c (cris_push_dummy_code): Adapt prototype.
	* hppa-hpux-tdep.c (hppa_hpux_push_dummy_code): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.
	* infcall.c (generic_push_dummy_code, push_dummy_code): Likewise.
	(push_dummy_code, call_function_by_hand): Adapt callers.
@
text
@d201 2
a202 11
#if 0				/* Now we make the links in the
				   objfile_obstack, so don't free
				   them.  */
  struct pending_block *bnext, *bnext1;

  for (bnext = pending_blocks; bnext; bnext = bnext1)
    {
      bnext1 = bnext->next;
      xfree ((void *) bnext);
    }
#endif
d487 1
a487 11
#if 0				/* Now we make the links in the
				   obstack, so don't free them.  */
  /* Now free the links of the list, and empty the list.  */

  for (next = pending_blocks; next; next = next1)
    {
      next1 = next->next;
      xfree (next);
    }
#endif
  pending_blocks = NULL;
a959 8
#if 0
	      /* I think this is artifact from before it went on the
	         obstack. I doubt we'll need the memory between now
	         and when we free it later in this function.  */
	      /* First, shrink the linetable to make more memory.  */
	      subfile->line_vector = (struct linetable *)
		xrealloc ((char *) subfile->line_vector, linetablesize);
#endif
@


1.52
log
@	* buildsym.c (record_line): Remove empty lines followed by
	end-of-sequence markers.
@
text
@a248 2
  BLOCK_GCC_COMPILED (block) = processing_gcc_compilation;

@


1.51
log
@        * symfile.h (struct sym_fns): Add new field sym_read_linetable.
        * coffread.c, dbxread.c, elfread.c, mipsread.c somread.c:
        Adjust the struct sym_fns object accordingly by setting
        the new field to NULL.
        * xcoffread.c (aix_process_linenos): Make static.
        (xcoff_sym_fns): Set new field to aix_process_linenos.
        * buildsym.c (end_symtab): Replace call to PROCESS_LINENUMBER_HOOK
        by call to new the new sym_fns sym_read_linetable function.
        * config/powerpc/aix.mt (DEPRECATED_TM_FILE): Delete.
        * config/rs6000/tm-rs6000.h: Delete.
@
text
@d755 25
d782 1
a782 1
  e->pc = gdbarch_addr_bits_remove (current_gdbarch, pc);
@


1.50
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d936 3
a938 4
#ifndef PROCESS_LINENUMBER_HOOK
#define PROCESS_LINENUMBER_HOOK()
#endif
  PROCESS_LINENUMBER_HOOK ();	/* Needed for xcoff. */
@


1.49
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (ADDR_BITS_REMOVE): Replace by gdbarch_addr_bits_remove.
	* value.c (value_as_address): Likewise (comment).
	* remote-mips.c (common_breakpoint): Likewise.
	* regcache.c (read_pc_pid): Likewise.
	* printcmd.c (do_one_display): Likewise.
	* monitor.c (monitor_write_memory, monitor_read_memory)
	(monitor_insert_breakpoint): Likewise.
	* mips-tdep.c (heuristic_proc_start): Likewise.
	* infrun.c (insert_step_resume_breakpoint_at_frame)
	(insert_step_resume_breakpoint_at_caller): Likewise.
	* buildsym.c (record_line): Likewise.
	* arm-tdep.c (arm_scan_prologue, thumb_get_next_pc)
	(arm_get_next_pc): Likewise.
	* armnbsd-nat.c (arm_supply_gregset, fetch_register, store_register)
	(store_regs): Likewise.
	* arm-linux-tdep.c (arm_linux_supply_gregset): Likewise.
	* arm-linux-nat.c (fetch_register, fetch_regs): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d10 1
a10 1
   the Free Software Foundation; either version 2 of the License, or
d19 1
a19 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.48
log
@	* buildsym.c (start_subfile): Handle absolute pathnames
	while comparing subfile names.
@
text
@d759 1
a759 1
  e->pc = ADDR_BITS_REMOVE(pc);
@


1.47
log
@        * buildsym.c (record_producer): Do nothing if no producer is provided.
@
text
@d552 13
a564 1
      if (FILENAME_CMP (subfile->name, name) == 0)
d567 2
d571 2
@


1.46
log
@2007-01-21  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* buildsym.c (end_symtab): Use preallocated symtab if available.
	Fill in SYMBOL_SYMTAB.
	* buildsym.h (struct subfile): Add symtab member.
	* dwarf2read.c (struct dwarf2_cu): Add line_header.
	(struct file_entry): Add symtab.
	(free_cu_line_header): New function.
	(read_file_scope): Use it.  Save line_header in the cu.  Process
	lines before DIEs.
	(add_file_name): Initialize new symtab member.
	(dwarf_decode_lines): Create symtabs for included files.
	(new_symbol): Set SYMBOL_SYMTAB.
	* symtab.c (lookup_symbol): Use SYMBOL_SYMTAB.
	(search_symbols): Likewise.
	* symtab.h (struct symbol): Add symtab member.
	(SYMBOL_SYMTAB): Define.

	* gdb.base/included.c, gdb.base/included.exp,
	gdb.base/included.h: New files.
@
text
@d1142 5
@


1.45
log
@Copyright updates for 2007.
@
text
@d962 4
a965 1
	  symtab = allocate_symtab (subfile->name, objfile);
d1054 20
@


1.44
log
@	* buildsym.c (start_subfile): Handle producer.
	(record_producer): New function.
	* buildsym.h (struct subfile): Include producer.
	(record_producer): New prototype.
	* dwarf2-frame.c (struct dwarf2_cie): Add version and augmentation.
	(struct dwarf2_frame_state): Add armcc_cfa_offsets_sf and
	armcc_cfa_offsets_reversed.
	(execute_cfa_program): Handle armcc_cfa_offsets_sf.
	(dwarf2_frame_find_quirks): New function.
	(dwarf2_frame_cache): Call it.  Handle armcc_cfa_offsets_reversed.
	(decode_frame_entry_1): Record the CIE version.  Record the
	augmentation.  Skip armcc augmentations.
	* dwarf2read.c (read_file_scope): Save the producer.
	* symtab.h (struct symtab): Rename unused version member to
	producer.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
@


1.43
log
@	* buildsym.c (finish_block): Don't adjust the boundaries of
	nested functions.
@
text
@d599 3
d1010 6
d1038 2
d1116 6
@


1.42
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d403 8
a410 3
	     burns a small amount of time.  */
	  if (BLOCK_START (pblock->block) < BLOCK_START (block) ||
	      BLOCK_END (pblock->block) > BLOCK_END (block))
@


1.42.14.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d403 3
a405 8
	     burns a small amount of time.

	     Skip blocks which correspond to a function; they're not
	     physically nested inside this other blocks, only
	     lexically nested.  */
	  if (BLOCK_FUNCTION (pblock->block) == NULL
	      && (BLOCK_START (pblock->block) < BLOCK_START (block)
		  || BLOCK_END (pblock->block) > BLOCK_END (block)))
@


1.42.8.1
log
@	* buildsym.c (start_subfile): Handle producer.
	(record_producer): New function.
	* buildsym.h (struct subfile): Include producer.
	(record_producer): New prototype.
	* dwarf2-frame.c (struct dwarf2_cie): Add version.
	(struct dwarf2_frame_state): Add armcc_cfa_offsets_sf and
	armcc_cfa_offsets_reversed.
	(execute_cfa_program): Handle armcc_cfa_offsets_sf.
	(dwarf2_frame_find_quirks): New function.
	(dwarf2_frame_cache): Call it.  Handle armcc_cfa_offsets_reversed.
	(decode_frame_entry_1): Record the CIE version.
	* dwarf2read.c (read_file_scope): Save the producer.
	* symtab.h (struct symtab): Rename unused version member to
	producer.
@
text
@a593 3
  /* Similarly for the producer.  */
  subfile->producer = NULL;

a1001 6
	  /* Similarly for the producer.  */
	  if (subfile->producer != NULL)
	    symtab->producer = obsavestring (subfile->producer,
					     strlen (subfile->producer),
					     &objfile->objfile_obstack);

a1023 2
      if (subfile->producer != NULL)
	xfree (subfile->producer);
a1099 6
void
record_producer (const char *producer)
{
  current_subfile->producer = savestring (producer, strlen (producer));
}

@


1.42.8.2
log
@        gdb/
        * buildsym.c, symtab.c: Add local hack for FILENAME_CMP testing.
        * utils.c (cygwin_filename_cmp): New.

        Backport:
        2006-04-21  Frederic Riss  <frederic.riss@@st.com>
        * dwarf2read.c (dwarf2_start_subfile): Change prototype to accept
        compilation directory as last argument.
        Always pass comp_dir as second argument to start_subfile and prepend
        dirname to the filename when necessary.
        Remove now superfluous search for pre-existing subfile.
        (dwarf_decode_lines): Pass the compilation directory to
        dwarf2_start_subfile.

        gdb/testsuite/
        * config/symbian.exp (gdb_target_symbian): Handle a running target.
        (gdb_load): Add return value.

        * gdb.base/completion.exp: Test arg rather than a.  Handle
        very small lists of symbols.

        * gdb.base/list.exp: Differentiate run behavior based on
        use_gdb_stub.

        * gdb.base/maint.exp: Accept local symbols.  Accept missing .data.

        * gdb.base/remote.exp: Update packet limits.

        * gdb.base/varargs.exp: Don't pass an empty list item.

        * lib/gdb.exp (fullname_syntax): Recognize forward slashes in DOS
        paths.

        Backport:
        2006-06-22  Daniel Jacobowitz  <dan@@codesourcery.com>
        * gdb.base/gdb1555.exp: Use gdb_compile_shlib.  Skip if not
        native.

        2006-06-22  Daniel Jacobowitz  <dan@@codesourcery.com>
        * gdb.stabs/exclfwd.exp: Skip the test if configure did not
        enable stabs testing.

        2006-05-06  Ulrich Weigand  <Ulrich.Weigand@@de.ibm.com>
        * gdb.mi/mi-basics.exp: Add missing serial number to
        expected output in some mi_gdb_test statements.
        * gdb.mi/mi2-basics.exp: Likewise.
@
text
@a48 7
#ifdef __CYGWIN__
/* LOCAL: Hack for testing using a Windows compiler and a Cygwin GDB.  */
int cygwin_filename_cmp (const char *lhs, const char *rhs);
#undef FILENAME_CMP
#define FILENAME_CMP cygwin_filename_cmp
#endif

@


1.41
log
@2005-01-29  Baurzhan Ismagulov  <ibr@@radix50.net>

	* ax-gdb.c, ax-general.c, bcache.c, bfd-target.c, bsd-kvm.c,
	* buildsym.c, c-lang.c, c-typeprint.c, c-valprint.c, charset.c,
	* coff-pe-read.c, coffread.c, complaints.c, copying.c: I18n markup.
@
text
@d2 1
a2 1
   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
d20 2
a21 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.40
log
@* language.c (local_hex_format_custom): Remove.
(local_hex_string): Rename to hex_string, use C format, and move to
utils.c
(local_hex_string_custom): Rename to hex_string_custom and change
interface.  Now uses C format.  Move to utils.c
(local_octal_format_custom): Remove.
(local_decimal_format_custom): Remove.
(unknown_language_defn): Remove language-specific number
formatting entries.
(auto_language_defn): Ditto.
(local_language_defn): Ditto.
* language.h (struct language_format_info): Delete declaration.
(struct language_defn): Remove language_format_info fields
la_binary_format, la_octal_format, la_decimal_format, la_hex_format.
(local_binary_format): Remove macro.
(local_binary_format_prefix): Remove macro.
(local_binary_format_specifier): Remove macro.
(local_binary_format_suffix): Remove macro.
(local_octal_format): Remove macro.
(local_octal_format_prefix): Remove macro.
(local_octal_format_specifier): Remove macro.
(local_octal_format_suffix): Remove macro.
(local_decimal_format): Remove macro.
(local_decimal_format_prefix): Remove macro.
(local_decimal_format_specifier): Remove macro.
(local_decimal_format_suffix): Remove macro.
(local_hex_format): Remove macro.
(local_hex_format_prefix): Remove macro.
(local_hex_format_specifier): Remove macro.
(local_hex_format_suffix): Remove macro.
(local_decimal_format_custom): Remove.
(local_octal_format_custom): Remove.
(local_hex_format_custom): Remove.
(local_hex_string): Rename to hex_string and move to defs.h.
(local_hex_string_custom): Rename to hex_string_custom, change
interface, and move to defs.h.
* utils.c: (int_string): New function.
(hex_string): New function (from language.c).
(hex_string_custom): New function (from language.c).
(octal2str): New function.
(decimal2str): Add width parameter.
(paddr_u): Use new decimal2str interface.
(paddr_d): Ditto.
* defs.h (hex_string): Declare.
(hex_string_custom): Declare.
(int_string): Declare.
* printcmd.c (print_scalar_formatted): Remove localized binary
formatting.
* valprint.c (print_longest): Use int_string.
(print_floating): Use C hex format.
(print_hex_chars): Ditto.
(print_binary_chars): Remove language-specific formatting.
(print_octal_chars): Use C octal format.
(print_decimal_chars): Delocalize format.
(print_decimal): Remove.
* ada-lang.c (ada_language_defn): Remove language-specific number
formatting entries.
* p-lang.c (pascal_language_defn): Ditto.
* c-lang.c (c_language_defn): Ditto.
(cplus_language_defn): Ditto.
(asm_language_defn): Ditto.
(minimal_language_defn): Ditto.
* f-lang.c (f_language_defn): Ditto.
* jv-lang.c (java_language_defn): Ditto.
* m2-lang.c (m2_language_defn): Ditto.
* scm-lang.c (scm_language_defn): Ditto.
* objc-lang.c (objc_language_defn): Ditto.
* memattr.c (mem_info_command): Use renamed hex_string_custom with
new interface.
* pa64solib.c (pa64_sharedlibrary_info_command): Ditto.
* ui-out.c (ui_out_field_core_addr): Ditto.
* breakpoint.c (breakpoint_adjustment_warning): Ditto.
* exec.c (print_section_info): Ditto.
* i387-tdep.c (print_i387_status_word): Ditto.
(print_i387_control_word): Ditto.
(i387_print_float_info): Ditto.
* maint.c (maint_print_section_info): Ditto.
* solib.c (info_sharedlibrary_command): Ditto.
* somsolib.c (som_sharedlibrary_info_command): Ditto.
* symtab.c (print_msymbol_info): Ditto.
* tracepoint.c (tracepoints_info): Ditto.
* solib-frv.c (lm_base): Ditto.
(frv_current_sos): Ditto.
(enable_break2): Ditto.
(enable_break): Ditto.
* dbxread.c (read_dbx_symtab): Use renamed hex_string.
(process_one_symbol): Ditto.
* infcmd.c (program_info): Ditto.
* mdebugread.c (parse_partial_symbols): Ditto.
* symfile.c (add_symbol_file_command): Ditto.
* cli/cli-cmds.c (edit_command): Ditto.
(list_command): Ditto.
* infcall.c (call_function_by_hand): Ditto.
* remote-vx.c (vx_run_files_info): Ditto.
(vx_wait): Ditto.
(vx_attach): Ditto.
(vx_detach): Ditto.
(vx_kill): Ditto.
* aix-thread.c (pdc_symbol_addrs): Ditto.
(pdc_read_regs): Ditto.
(pdc_write_regs): Ditto.
(pdc_read_data): Ditto.
(pdc_write_data): Ditto.
* d10v-tdep.c (display_trace): Ditto.
* rs6000-nat.c (find_toc_address): Ditto.
* aix-thread.c: Don't include language.h.
* buildsym.c: Ditto.
* dbxread.c: Ditto.
* mdebugread.c: Ditto.
* rs6000-nat.c: Ditto.
* buildsym.c (make_blockvector): Use renamed hex_string.
@
text
@d376 1
a376 1
		     "block end address less than block start address in %s (patched it)",
d382 1
a382 1
		     "block end address 0x%s less than block start address 0x%s (patched it)",
d410 1
a410 1
			     "inner block not inside outer block in %s",
d416 1
a416 1
			     "inner block (0x%s-0x%s) not inside outer block (0x%s-0x%s)",
d522 1
a522 1
	      complaint (&symfile_complaints, "block at %s out of order",
d677 1
a677 1
      internal_error (__FILE__, __LINE__, "failed internal consistency check");
d690 1
a690 1
      internal_error (__FILE__, __LINE__, "failed internal consistency check");
d841 1
a841 1
	             "Context stack not empty in end_symtab");
@


1.39
log
@2004-02-07  Elena Zannoni  <ezannoni@@redhat.com>

	* buildsym.c (free_pending_blocks, finish_block)
	(record_pending_block, make_blockvector, end_symtab): Replace
	symbol_obstack with objfile_obstack.
	* coffread.c (process_coff_symbol, coff_read_struct_type)
	(coff_read_enum_type): Ditto.
	* cp-namespace.c (initialize_namespace_symtab)
	(check_one_possible_namespace_symbol): Ditto.
	* dwarf2read.c (new_symbol, dwarf2_const_value, macro_start_file)
	(dwarf2_symbol_mark_computed): Ditto.
	* dwarfread.c (enum_type, new_symbol, synthesize_typedef): Ditto.
	* elfread.c (elf_symtab_read): Ditto.
	* hpread.c (hpread_symfile_init, hpread_symfile_init)
	(hpread_read_enum_type, hpread_read_function_type)
	(hpread_read_doc_function_type, hpread_process_one_debug_symbol):
	Ditto.
	* jv-lang.c (get_java_class_symtab, add_class_symbol)
	(java_link_class_type): Ditto.
	* mdebugread.c (parse_symbol, psymtab_to_symtab_1, new_symtab)
	(new_symbol): Ditto.
	* minsyms.c (install_minimal_symbols): Ditto.
	* objfiles.c (allocate_objfile): Remove init of symbol_obstack.
	(terminate_minimal_symbol_table): Replace symbol_obstack with
	objfile_obstack.
	(free_objfile): Remove freeing of symbol_obstack.
	* objfiles.h: Remove symbol_obstack field.
	* pa64solib.c (add_to_solist): Replace symbol_obstack with
	objfile_obstack.
	* solib-sunos.c (allocate_rt_common_objfile): Remove init of
	symbol_obstack.
	(solib_add_common_symbols): Replace symbol_obstack with
	objfile_obstack.
	* somsolib.c (som_solib_add): Ditto.
	* stabsread.c (patch_block_stabs, define_symbol, read_enum_type)
	(common_block_start, common_block_end): Ditto.
	* symfile.c (reread_symbols): Remove freeing and init of
	symbol_obstack.
	(allocate_symtab): Rename symbol_obstack to objfile_obstack.
	* symfile.h: Update comment.
	* symmisc.c (print_objfile_statistics): Remove symbol_obstack
	stats printing.
	* symtab.c (symbol_set_names): Replace symbol_obstack with
	objfile_obstack.
	* symtab.h (struct general_symbol_info, struct minimal_symbol):
	Update comments.
	* xcoffread.c (read_xcoff_symtab, SYMBOL_DUP, SYMNAME_ALLOC)
	(init_stringtab, xcoff_initial_scan): Replace symbol_obstack with
	objfile_obstack.
@
text
@a40 1
#include "language.h"		/* For "local_hex_string" */
d523 1
a523 1
			 local_hex_string ((LONGEST) start));
@


1.39.4.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d41 1
d524 1
a524 1
			 hex_string ((LONGEST) start));
@


1.38
log
@2003-10-06  Andrew Cagney  <cagney@@redhat.com>

	* breakpoint.c, breakpoint.h: Remove obsolete code and comments.
	* buildsym.c, dbxread.c, gdbtypes.c, mdebugread.c: Ditto.
	* monitor.c, sparc-tdep.c, stabsread.c: Ditto.
	* stabsread.h, xcoffread.c: Ditto.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
d205 1
a205 1
				   symbol_obstack, so don't free
d233 1
a233 1
  block = allocate_block (&objfile->symbol_obstack);
d237 1
a237 1
      BLOCK_DICT (block) = dict_create_linear (&objfile->symbol_obstack,
d242 1
a242 1
      BLOCK_DICT (block) = dict_create_hashed (&objfile->symbol_obstack,
d350 1
a350 1
	  cp_set_block_scope (symbol, block, &objfile->symbol_obstack);
d442 1
a442 1
   Allocate the pending block struct in the symbol_obstack to save
d452 1
a452 1
    obstack_alloc (&objfile->symbol_obstack, sizeof (struct pending_block));
d480 1
a480 1
    obstack_alloc (&objfile->symbol_obstack,
d912 1
a912 1
			     &objfile->symbol_obstack);
d964 1
a964 1
		obstack_alloc (&objfile->symbol_obstack, linetablesize);
d976 1
a976 1
		obstack_alloc (&objfile->symbol_obstack,
d1000 1
a1000 1
						  &objfile->symbol_obstack);
@


1.37
log
@2003-09-20  Andrew Cagney  <cagney@@redhat.com>

	* breakpoint.c: Eliminate ARGSUSED.
	* buildsym.c, cli/cli-cmds.c, cli/cli-script.c: Ditto.
	* coffread.c, corelow.c, dwarf2read.c, event-top.c: Ditto.
	* exec.c, gcore.c, hpux-thread.c, infcmd.c, inflow.c: Ditto.
	* infrun.c, inftarg.c, maint.c, ocd.c, printcmd.c: Ditto.
	* procfs.c, regcache.c, remote-rdi.c, remote-sds.c: Ditto.
	* remote.c, sol-thread.c, source.c, stabsread.c: Ditto.
	* stack.c, symfile.c, target.c, top.c, typeprint.c: Ditto.
	* utils.c, v850ice.c, valprint.c, values.c, win32-nat.c: Ditto.
	* wince.c, remote-vx.c: Ditto.
@
text
@a594 7
#if 0 /* OBSOLETE CFront */
// OBSOLETE   /* cfront output is a C program, so in most ways it looks like a C
// OBSOLETE      program.  But to demangle we need to set the language to C++.  We
// OBSOLETE      can distinguish cfront code by the fact that it has #line
// OBSOLETE      directives which specify a file name ending in .C. */
#endif /* OBSOLETE CFront */
     
a597 1
  /* OBSOLETE     (in particular, some people use .cxx with cfront).  */
@


1.36
log
@2003-09-16  Andrew Cagney  <cagney@@redhat.com>

	* buildsym.c: Remove more occurances of "register".
	* coffread.c, dbxread.c, dcache.c, dwarf2read.c: Ditto.
	* environ.c, eval.c, f-valprint.c, findvar.c: Ditto.
	* gdbtypes.c, gnu-v2-abi.c, h8300-tdep.c, hppa-tdep.c: Ditto.
	* infcmd.c, mdebugread.c, minsyms.c, mips-tdep.c: Ditto.
	* printcmd.c, remote-vx.c, sh-stub.c, sh-tdep.c: Ditto.
	* sh64-tdep.c, source.c, stabsread.c, stack.c: Ditto.
	* standalone.c, symfile.c, symmisc.c, symtab.c: Ditto.
	* utils.c, valops.c, values.c, xcoffread.c: Ditto.
@
text
@a166 1
/* ARGSUSED */
@


1.35
log
@2003-09-14  Andrew Cagney  <cagney@@redhat.com>

	* alpha-nat.c: Remove some occurances of "register".
	* alpha-tdep.c, arm-tdep.c, blockframe.c, breakpoint.c: Ditto.
	* buildsym.c, c-typeprint.c, c-valprint.c, coffread.c: Ditto.
	* corefile.c, cp-support.c, cp-valprint.c, cris-tdep.c: Ditto.
	* dbxread.c, dcache.c, dwarf2read.c, elfread.c: Ditto.
	* environ.c, eval.c, event-top.c, f-typeprint.c: Ditto.
	* f-valprint.c, findvar.c, frame.c, gdbtypes.c: Ditto.
	* h8300-tdep.c, hppa-tdep.c, hppab-nat.c, hppah-nat.c: Ditto.
	* hppam3-nat.c, hpread.c, ia64-aix-nat.c, ia64-linux-nat.c: Ditto.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Ditto.
	* infttrace.c, irix5-nat.c, jv-typeprint.c: Ditto.
	* jv-valprint.c, m68k-tdep.c, m68klinux-nat.c, main.c: Ditto.
	* mdebugread.c, minsyms.c, mips-linux-tdep.c: Ditto.
	* mips-nat.c, mips-tdep.c, mipsread.c, mipsv4-nat.c: Ditto.
	* ns32k-tdep.c, objfiles.c, p-typeprint.c: Ditto.
	* p-valprint.c, ppc-linux-nat.c, printcmd.c: Ditto.
	* remote-mips.c, remote-vx.c, rs6000-nat.c: Ditto.
	* rs6000-tdep.c, scm-exp.c, sh-tdep.c, sh64-tdep.c: Ditto.
	* solib.c, somread.c, source.c, sparc-tdep.c: Ditto.
	* stabsread.c, stack.c, standalone.c, symfile.c: Ditto.
	* symmisc.c, symtab.c, top.c, tracepoint.c: Ditto.
	* typeprint.c, utils.c, valarith.c, valops.c: Ditto.
	* values.c, vax-tdep.c, xcoffread.c: Ditto.
@
text
@d712 1
a712 1
record_line (register struct subfile *subfile, int line, CORE_ADDR pc)
@


1.34
log
@2003-09-11  David Carlton  <carlton@@kealia.com>

	* buildsym.c (finish_block): Use allocate_block to allocate the
	block.
	* mdebugread.c (new_block): Add FIXME.
@
text
@d87 1
a87 1
  register struct pending *link = list;
d105 1
a105 1
  register struct pending *link;
d229 3
a231 3
  register struct pending *next, *next1;
  register struct block *block;
  register struct pending_block *pblock;
d450 1
a450 1
  register struct pending_block *pblock;
d470 3
a472 3
  register struct pending_block *next;
  register struct blockvector *blockvector;
  register int i;
d542 1
a542 1
  register struct subfile *subfile;
d680 1
a680 1
  register struct subfile_stack *tem
d695 2
a696 2
  register char *name;
  register struct subfile_stack *link = subfile_stack;
d827 4
a830 4
  register struct symtab *symtab = NULL;
  register struct blockvector *blockvector;
  register struct subfile *subfile;
  register struct context_stack *cstk;
d1059 1
a1059 1
  register struct context_stack *new;
d1121 1
a1121 1
  register int i;
@


1.33
log
@2003-06-11  David Carlton  <carlton@@bactrian.org>

	* dictionary.h: New.
	* dictionary.c: New.
	* block.h: Add opaque declaration for struct dictionary.
	(struct block): Add 'dict' member; delete 'hashtable', 'nsyms',
	'sym' members.
	(BLOCK_DICT): New macro.
	Delete macros BLOCK_HASHTABLE, BLOCK_NSYMS, BLOCK_SYM,
	BLOCK_BUCKETS, BLOCK_BUCKET, BLOCK_HASHTABLE_SIZE,
	BLOCK_SHOULD_SORT.
	(ALL_BLOCK_SYMBOLS): Update definition.
	* Makefile.in (SFILES): Add dictionary.c.
	(dictionary_h): New.
	(COMMON_OBS): Add dictionary.o.
	(dictionary.o): New.
	(ada-lang.o): Depend on dictionary_h.
	(buildsym.o, coffread.o, jv-lang.o, mdebugread.o, objfiles.o)
	(stack.o, symmisc.o, symtab.o, tracepoint.o, valops.o)
	(mi-cmd-stack.o): Ditto.
	(gdbtk-cmds.o): Update dependencies.
	(gdbtk-stack.o): Ditto.
	* ada-lang.c: Include dictionary.h.
	(symtab_for_sym): Update uses of ALL_BLOCK_SYMBOLS.
	(fill_in_ada_prototype, debug_print_block): Ditto.
	(ada_add_block_symbols): Update uses of ALL_BLOCK_SYMBOLS; replace
	explicit iteration by use of ALL_BLOCK_SYMBOLS.  Delete variable
	'is_sorted'.
	* mdebugread.c: Include dictionary.h.
	(struct parse_stack): Delete 'maxsyms' member.
	(parse_symbol): Update calls to new_block.  Delete calls to
	shrink_block.  Use dictionary methods.
	(psymtab_to_symtab_1): Delete calls to sort_symtab_syms.
	Update calls to new_symtab.  Don't maintain maxsyms data.
	(mylookup_symbol): Update use of ALL_BLOCK_SYMBOLS.
	(add_symbol): Just call dict_add_symbol.
	(new_symtab): Delete 'maxsyms' argument.
	(new_symtab): Update calls to new_block.
	(new_block): Delete 'maxsyms' argument; add 'function' argument.
	(shrink_block): Delete function.
	(fixup_sigtramp): Update call to new_block.  Add symbol via
	dict_add_symbol.
	* jv-lang.c: Include dictionary.h.
	(get_java_class_symtab): Set the BLOCK_DICT of the blocks
	appropriately.  Set class_symtab->free_func.  Make sure the
	blockvector is big enough to hold two blocks.
	(add_class_symtab_symbol): Use dictionary methods.
	(free_class_block): New function.
	(type_from_class): Replace explicit iteration by
	ALL_BLOCK_SYMBOLS.
	* symtab.h (struct symtab): Replace 'free_ptr' method by
	'free_func'.
	* dwarf2read.c (psymtab_to_symtab_1): Delete call to
	sort_symtab_syms.
	* dwarfread.c (psymtab_to_symtab_1): Delete call to
	sort_symtab_syms.
	* coffread.c (coff_symfile_read): Delete call to sort_symtab_syms.
	Include dictionary.h.
	(patch_opaque_types): Update use of ALL_BLOCK_SYMBOLS.
	* dbxread.c (dbx_psymtab_to_symtab_1): Delete call to
	sort_symtab_syms.
	* objfiles.c: Include dictionary.h.
	(objfile_relocate): Update use of ALL_BLOCK_SYMBOLS.
	* buildsym.c: Include dictionary.h.
	(finish_block): Use dictionary methods.
	(end_symtab): Set free_func to NULL, not free_ptr.
	* tracepoint.c: Include dictionary.h.
	(add_local_symbols): Update use of ALL_BLOCK_SYMBOLS.
	(scope_info): Ditto.
	* stack.c: Include dictionary.h.
	(print_block_frame_locals): Update use of ALL_BLOCK_SYMBOLS.
	(print_block_frame_labels, print_frame_arg_vars)
	(print_frame_args): Ditto.
	* symmisc.c (free_symtab_block): Use dictionary methods.
	(dump_symtab): Ditto.
	(free_symtab): Replace use of 'free_ptr' by 'free_func'.
	Include	dictionary.h.
	* symfile.h: Delete declarations of sort_block_syms,
	sort_symtab_syms.
	* symfile.c (sort_block_syms): Delete.
	(sort_symtab_syms): Delete.
	* symtab.c: Include dictionary.h.
	(lookup_block_symbol): Use dictionary iterators.
	(find_pc_sect_symtab): Update use of ALL_BLOCK_SYMBOLS.
	(search_symbols, make_symbol_completion_list): Ditto.
	(make_symbol_overload_list): Ditto.
	* valops.c (value_of_local): Use dict_empty.
	Include dictionary.h.

2003-06-11  David Carlton  <carlton@@bactrian.org>

	* generic/gdbtk-stack.c: Include dictionary.h.
	(gdb_block_vars): Update use of ALL_BLOCK_SYMBOLS.
	(gdb_get_blocks, gdb_get_vars_command): Ditto.
	* generic/gdbtk-cmds.c: Include dictionary.h.
	(gdb_listfuncs): Update use of ALL_BLOCK_SYMBOLS.

2003-06-11  David Carlton  <carlton@@bactrian.org>

	* mi-cmd-stack.c: Include dictionary.h.
	(list_args_or_locals): Update use of ALL_BLOCK_SYMBOLS.
@
text
@d234 1
a234 1
  /* Initialize the block's dictionary.  */
a237 2
      block = (struct block *) 
	obstack_alloc (&objfile->symbol_obstack, sizeof (struct block));
a242 2
      block = (struct block *) 
	obstack_alloc (&objfile->symbol_obstack, sizeof (struct block));
@


1.32
log
@2003-04-15  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (SFILES): Add cp-namespace.c.
	(COMMON_OBS): Add cp-namespace.o.
	(block.o): Depend on gdb_obstack_h and cp_support_h.
	(buildsym.o): Depend on cp_support_h.
	(cp-namespace.o): New.
	(cp-support.o): Depend on gdb_string_h, demangle_h, gdb_assert_h,
	gdb_obstack_h, symtab_h, symfile_h, and gdbcmd_h.
	(dwarf2read.o): Depend on cp_support_h.
	* jv-lang.c (get_java_class_symtab): Set BLOCK_NAMESPACE.
	* dwarf2read.c (process_die): Set processing_has_namespace_info,
	processing_current_namespace.
	(read_namespace): Update processing_current_namespace; check for
	anonymous namespaces.
	(dwarf2_name): New function.
	(dwarf2_extension): Ditto.
	* cp-support.h: Update copyright, contributors.
	Add inclusion guards.
	Add opaque declaration for structs obstack, block, symbol.
	(struct using_direct): New struct.
	Add declarations for cp_find_first_component,
	cp_entire_prefix_len, processing_has_namespace_info,
	processing_current_namespace, cp_is_anonymous,
	cp_add_using_directive, cp_initialize_namespace,
	cp_finalize_namespace, cp_set_block_scope,
	cp_scan_for_anonymous_namespaces.
	* cp-namespace.c: New file.
	* cp-support.c: Update copyright.
	Include ctype.h, gdb_assert.h, gdbcmd.h.
	New variable maint_cplus_cmd_list.
	(cp_find_first_component): New function.
	(cp_entire_prefix_len, maint_cplus_command)
	(first_component_command, _initialize_cp_support): Ditto.
	* buildsym.c: Include cp-support.h.
	New variable using_list.
	(add_symbol_to_list): Check for anonymous namespaces.
	(finish_block): Set block's scope.
	(start_symtab): Initialize C++ namespace support.
	(end_symtab): Finalize C++ namespace support.
	* block.h: Add opaque declarations for structs
	block_namespace_info, using_direct, and obstack.
	Add declarations for block_set_scope and block_set_using.
	(struct block): Add 'language_specific' member.
	(BLOCK_NAMESPACE): New macro.
	* block.c: Include gdb_obstack.h and cp-support.h.
	(struct block_namespace_info): New struct.
	(block_set_scope): New function.
	(block_set_using, block_initialize_namespace): Ditto.

2003-04-15  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/maint.exp: New file.
@
text
@d48 1
a232 11
  register int i;
  register int j;

  /* Count the length of the list of symbols.  */

  for (next = *listhead, i = 0;
       next;
       i += next->nsyms, next = next->next)
    {
      /* EMPTY */ ;
    }
d234 1
a234 1
  /* Copy the symbols into the block.  */
d239 3
a241 9
	obstack_alloc (&objfile->symbol_obstack,
		       (sizeof (struct block) + 
			((i - 1) * sizeof (struct symbol *))));
      BLOCK_NSYMS (block) = i;
      for (next = *listhead; next; next = next->next)
	for (j = next->nsyms - 1; j >= 0; j--)
	  {
	    BLOCK_SYM (block, --i) = next->symbol[j];
	  }
a244 2
      int htab_size = BLOCK_HASHTABLE_SIZE (i);

d246 3
a248 24
	obstack_alloc (&objfile->symbol_obstack,
		       (sizeof (struct block) + 
			((htab_size - 1) * sizeof (struct symbol *))));
      for (j = 0; j < htab_size; j++)
	{
	  BLOCK_BUCKET (block, j) = 0;
	}
      BLOCK_BUCKETS (block) = htab_size;
      for (next = *listhead; next; next = next->next)
	{
	  for (j = next->nsyms - 1; j >= 0; j--)
	    {
	      struct symbol *sym;
	      unsigned int hash_index;
	      const char *name = SYMBOL_DEMANGLED_NAME (next->symbol[j]);
	      if (name == NULL)
		name = DEPRECATED_SYMBOL_NAME (next->symbol[j]);
	      hash_index = msymbol_hash_iw (name);
	      hash_index = hash_index % BLOCK_BUCKETS (block);
	      sym = BLOCK_BUCKET (block, hash_index);
	      BLOCK_BUCKET (block, hash_index) = next->symbol[j];
	      next->symbol[j]->hash_next = sym;
	    }
	}
d264 1
a266 1
      BLOCK_HASHTABLE (block) = 0;
d275 1
a275 1
	  ALL_BLOCK_SYMBOLS (block, i, sym)
d312 2
a313 1
	      for (i = iparams = 0; iparams < nparams; i++)
d315 3
a317 1
		  sym = BLOCK_SYM (block, i);
a360 1
      BLOCK_HASHTABLE (block) = 1;
d442 1
d998 1
a998 1
	  symtab->free_ptr = NULL;
@


1.31
log
@2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.h (SYMBOL_NATURAL_NAME): New macro.
	(SYMBOL_LINKAGE_NAME): Ditto.
	(SYMBOL_PRINT_NAME): Use SYMBOL_NATURAL_NAME and
	SYMBOL_LINKAGE_NAME.
	(struct general_symbol_info): Expand comment.
	(DEPRECATED_SYMBOL_NAME): Rename from SYMBOL_NAME.
	(SYMBOL_MATCHES_NAME): Use DEPRECATED_SYMBOL_NAME.
	(SYMBOL_MATCHES_REGEXP): Ditto.
	* symtab.c (symbol_natural_name): New function.
	* objfiles.h: Replace all uses of SYMBOL_NAME by
	DEPRECATED_SYMBOL_NAME.
	* xcoffread.c, valops.c, typeprint.c, tracepoint.c: Ditto.
	* symtab.c, symmisc.c, symfile.c, stack.c, stabsread.c: Ditto.
	* somsolib.c, sol-thread.c, rs6000-tdep.c, p-valprint.c: Ditto.
	* printcmd.c, objfiles.c, objc-lang.c, mipsread.c: Ditto.
	* minsyms.c, mdebugread.c, linespec.c, jv-lang.c: Ditto.
	* i386-tdep.c, i386-linux-tdep.c, hpread.c, hppa-tdep.c: Ditto.
	* gnu-v2-abi.c, f-valprint.c, findvar.c, expprint.c: Ditto.
	* dwarfread.c, dwarf2read.c, dbxread.c, c-valprint.c: Ditto.
	* cp-valprint.c, coffread.c, buildsym.c, breakpoint.c: Ditto.
	* blockframe.c, ax-gdb.c, arm-linux-tdep.c, ada-lang.c: Ditto.
	* ada-exp.y: Ditto.
	* ada-exp.y: Update copyright.
	* sol-thread.c, mipsread.c, jv-lang.c, f-valprint.c: Ditto.
	* cp-valprint.c: Ditto.

2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* generic/gdbtk.h: Replace all instances of SYMBOL_NAME by
	DEPRECATED_SYMBOL_NAME.
	* generic/gdbtk-stack.c, generic/gdbtk-cmds.c: Ditto.
	* generic/gdbtk-stack.c, generic/gdbtk-cmds.c: Update copyright.

2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c: Replace all instances of SYMBOL_NAME with
	DEPRECATED_SYMBOL_NAME.  Update copyright.
@
text
@d47 2
d96 4
a99 1
/* Add a symbol to one of the lists of symbols.  */
d130 6
d294 1
d387 6
d835 4
d960 2
@


1.30
log
@	Based on a patch from Daniel Berlin (dberlin@@dberlin.org).
	* symtab.h: Add opaque declarations of struct axs_value and
	struct agent_expr.
	(enum address_class): Add LOC_COMPUTED and LOC_COMPUTED_ARG.
	(struct location_funcs): New type.
	(struct symbol): Add "loc" to aux_value.
	(SYMBOL_LOCATION_BATON, SYMBOL_LOCATION_FUNCS): New macros.
	* dwarf2read.c: Include "dwarf2expr.h".
	(dwarf2_symbol_mark_computed): New function.
	(read_func_scope): Use it.
	(var_decode_location): New function.
	(new_symbol): Use it.
	* dwarf2expr.c, dwarf2expr.h, dwarf2loc.c, dwarf2loc.h: New files.

	* Makefile.in (SFILES): Add dwarf2loc.c and dwarf2expr.c.
	(dwarf2expr_h, dwarf2loc_h): New variables.
	(COMMON_OBS): Add dwarf2expr.o and dwarf2loc.o.
	(dwarf2expr.o, dwarf2loc.o): New rules.
	(dwarf2read.o): Add $(dwarf2expr_h) and $(dwarf2loc_h).
	* buildsym.c (finish_block): Handle LOC_COMPUTED and
	LOC_COMPUTED_ARG.
	* findvar.c (symbol_read_needs_frame, read_var_value): Likewise.
	* m2-exp.y (yylex): Likewise.
	* printcmd.c (address_info, print_frame_args): Likewise.
	* stack.c (print_block_frame_locals, print_frame_arg_vars): Likewise.
	* symmisc.c (print_symbol, print_partial_symbols): Likewise.
	* ada-lang.c (ada_resolve_subexp, symtab_for_sym)
	(ada_add_block_symbols, fill_in_ada_prototype): Likewise.
	* symtab.c (lookup_block_symbol): Likewise.
@
text
@d140 1
a140 1
	  pp = SYMBOL_NAME (list->symbol[j]);
d269 1
a269 1
		name = SYMBOL_NAME (next->symbol[j]);
@


1.29
log
@2003-02-20  David Carlton  <carlton@@math.stanford.edu>

	* symtab.h (SYMBOL_PRINT_NAME): Rename from SYMBOL_SOURCE_NAME;
	expand comment.
	* ada-lang.c (user_select_syms, ada_finish_decode_line_1): Replace
	SYMBOL_PRINT_NAME with SYMBOL_SOURCE_NAME.
	* ada-typeprint.c (ada_typedef_print): Ditto.
	* ax-gdb.c (gen_var_ref): Ditto.
	* breakpoint.c (print_one_breakpoint): Ditto.
	* buildsym.c (finish_block): Ditto.
	* c-valprint.c (c_val_print): Ditto.
	* expprint.c (print_subexp): Ditto.
	* findvar.c (locate_var_value): Ditto.
	* infcmd.c (jump_command): Ditto.
	* linespec.c (decode_line_2, decode_compound): Ditto.
	* maint.c (maintenance_translate_address): Ditto.
	* objc-lang.c (compare_selectors, compare_classes): Ditto.
	* printcmd.c (build_address_symbolic, sym_info, print_frame_args):
	Ditto.
	* p-valprint.c (pascal_val_print): Ditto.
	* stabsread.c (define_symbol): Ditto.
	* stack.c (print_frame, frame_info, print_block_frame_locals)
	(print_frame_arg_vars, return_command): Ditto.
	* symfile.c (compare_symbols, compare_psymbols): Ditto.
	* symmisc.c (print_symbol): Ditto.
	* symtab.c (lookup_partial_symbol, lookup_block_symbol)
	(compare_search_syms, print_symbol_info, print_msymbol_info)
	(rbreak_command): Ditto.
	* tracepoint.c (tracepoints_info): Ditto.
	* typeprint.c (typedef_print): Ditto.
	* valops.c (value_of_variable, hand_function_call): Ditto.
	* cli/cli-cmds.c (edit_command, list_command): Ditto.
	* ada-typeprint.c: Update Copyright.
	* infcmd.c, objc-lang.c, p-valprint.c, symmisc.c: Ditto.
	* tracepoint.c, cli/cli-cmds.c: Ditto.
@
text
@d312 1
d328 1
d350 1
d368 1
@


1.28
log
@2003-02-19  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (SFILES): Add block.c.
	(block_h): New.
	(COMMON_OBS): Add block.o.
	(block.o): New.
	(x86-64-tdep.o): Add $(block_h).
	(values.o, valops.o, tracepoint.o, symtab.o, symmisc.o, symfile.o)
	(stack.o, printcmd.o, p-exp.tab.o, parse.o, objfiles.o)
	(objc-exp.tab.o, objc-lang.o, nlmread.o, mips-tdep.o, mdebugread.o)
	(m2-exp.tab.o, linespec.o, jv-lang.o, jv-exp.tab.o, infcmd.o)
	(f-valprint.o, findvar.o, f-exp.tab.o, expprint.o, coffread.o)
	(c-exp.tab.o, buildsym.o, breakpoint.o, blockframe.o, ax-gdb.o)
	(alpha-tdep.o, ada-lang.o, ada-exp.tab.o, mi-cmd-stack.o): Ditto.
	* value.h: Add opaque declaration for struct block.
	* parser-defs.h, objc-lang.h, buildsym.h, breakpoint.h: Ditto.
	* ada-lang.h: Ditto.
	* x86-64-tdep.c: #include "block.h"
	* values.c, valops.c, tracepoint.c, symtab.c, symmisc.c: Ditto.
	* symfile.c, stack.c, printcmd.c, p-exp.y, parse.c: Ditto.
	* objfiles.c, objc-exp.y, objc-lang.c, nlmread.c: Ditto.
	* mips-tdep.c, mdebugread.c, m2-exp.y, linespec.c: Ditto.
	* jv-lang.c, jv-exp.y, infcmd.c, f-valprint.c: Ditto.
	* findvar.c, f-exp.y, expprint.c, coffread.c, c-exp.y: Ditto.
	* buildsym.c, breakpoint.c, blockframe.c, ax-gdb.c: Ditto.
	* alpha-tdep.c, ada-lang.c, ada-exp.y: Ditto.
	* blockframe.c (blockvector_for_pc_sect): Move to "block.c".
	(blockvector_for_pc, block_for_pc_sect, block_for_pc): Ditto.
	* symtab.c (block_function): Ditto.
	(contained_in): Ditto.
	* frame.h: Move block_for_pc and block_for_pc_sect declarations to
	block.h.  Add opaque declaration for struct block.
	* symtab.h: Move block_function and contained_in declarations to
	block.h.  Add opaque declarations for struct block, struct
	blockvector.
	(struct block): Move to block.h.
	(struct blockvector): Ditto.
	(BLOCK_START, BLOCK_END, BLOCK_FUNCTION, BLOCK_SUPERBLOCK)
	(BLOCK_GCC_COMPILED, BLOCK_HASHTABLE, BLOCK_NSYMS, BLOCK_SYM)
	(BLOCK_BUCKETS, BLOCK_BUCKET, BLOCK_HASHTABLE_SIZE)
	(ALL_BLOCK_SYMBOLS, BLOCK_SHOULD_SORT, BLOCKVECTOR_NBLOCKS)
	(BLOCKVECTOR_BLOCK, GLOBAL_BLOCK, STATIC_BLOCK, FIRST_LOCAL_BLOCK):
	Ditto.
	* block.c: New file.
	* block.h: New file.

2003-02-19  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c: #include "block.h"
@
text
@d398 1
a398 1
		     SYMBOL_SOURCE_NAME (symbol));
d432 1
a432 1
			     SYMBOL_SOURCE_NAME (symbol));
@


1.27
log
@2003-01-13  Elena Zannoni  <ezannoni@@redhat.com>

	* stabsread.h (process_later, resolve_cfront_continuation):
	Obsolete.
	Update copyright years.
	* buildsym.c (start_subfile): Obsolete comment pertinent to Cfront.
	Update copyright year.
	* dbxread.c(struct cont_elem): Obsolete.
	(process_later, process_now): Obsolete functions.
	(read_dbx_symtab, read_ofile_symtab): Obsolete cfront support.
	Update copyright year.
	* gdbtypes.c (INIT_EXTRA, ADD_EXTRA): Obsolete macros.
	(add_name, add_mangled_type, cfront_mangle_name): Obsolete functions.
	* mdebugread.c (parse_type): Obsolete comment pertinent to Cfront.
	(parse_partial_symbols): Obsolete cfront support.
	* stabsread.c
	(CFRONT_VISIBILITY_PRIVATE,CFRONT_VISIBILITY_PUBLIC): Obsolete
	macros.
	(get_substring, get_cfront_method_physname, msg_unknown_complaint,
	read_cfront_baseclasses, read_cfront_member_functions,
	resolve_cfront_continuation,read_cfront_static_fields,
	copy_cfront_struct_fields): Obsolete functions.
	(define_symbol, read_one_struct_field): Obsolete cfront support.
	* xcoffread.c (scan_xcoff_symtab): Obsolete CFront support.
	Update Copyright year.
@
text
@d46 1
@


1.26
log
@2003-01-09  Andrew Cagney  <ac131313@@redhat.com>

	* somsolib.h: Fix function indentation.
	* disasm.c, buildsym.c, buildsym.h: Eliminate PTR.
	* gnu-v2-abi.c, f-typeprint.c, x86-64-linux-tdep.c: Eliminate STREQ.
	* demangle.c, ax-gdb.c, c-valprint.c: Eliminate STREQ.
	* alpha-osf1-tdep.c, corefile.c: Eliminate STREQ.
	* somsolib.c, inftarg.c: Remove assignment in if conditional.
@
text
@d3 2
a4 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d613 8
a620 6
  /* cfront output is a C program, so in most ways it looks like a C
     program.  But to demangle we need to set the language to C++.  We
     can distinguish cfront code by the fact that it has #line
     directives which specify a file name ending in .C.

     So if the filename of this subfile ends in .C, then change the
d622 2
a623 2
     any other C++ suffixes accepted by deduce_language_from_filename
     (in particular, some people use .cxx with cfront).  */
@


1.25
log
@2003-01-02  Andrew Cagney  <ac131313@@redhat.com>

	* valarith.c (value_binop): Delete obsolete code and comments.
	* configure.host: Ditto.
	* buildsym.h (make_blockvector): Ditto.
	* buildsym.c (make_blockvector): Ditto.
	* defs.h (enum language): Ditto.
	(chill_demangle): Ditto.
	* elfread.c (elf_symtab_read): Ditto.
	* dwarfread.c (CHILL_PRODUCER): Ditto.
	(set_cu_language): Ditto.
	(handle_producer): Ditto.
	* expprint.c (print_subexp): Ditto.
	* gdbtypes.c (chill_varying_type): Ditto.
	* gdbtypes.h (builtin_type_chill_bool): Ditto.
	(builtin_type_chill_char, builtin_type_chill_long): Ditto.
	(builtin_type_chill_ulong, builtin_type_chill_real): Ditto.
	(chill_varying_type): Ditto.
	* language.h (_LANG_chill): Ditto.
	* language.c (binop_result_type, integral_type): Ditto.
	(character_type, string_type, structured_type): Ditto.
	(lang_bool_type, binop_type_check): Ditto.
	* stabsread.h (os9k_stabs): Ditto.
	* stabsread.c (os9k_type_vector, dbx_lookup_type): Ditto.
	(define_symbol, read_type, read_struct_fields): Ditto.
	(read_array_type, read_enum_type, read_huge_number): Ditto.
	(read_range_type, start_stabs): Ditto.
	* symfile.c (init_filename_language_table): Ditto.
	(add_psymbol_with_dem_name_to_list): Ditto.
	* symtab.c (symbol_init_language_specific): Ditto.
	(symbol_init_demangled_name, symbol_demangled_name): Ditto.
	* symtab.h (struct general_symbol_info): Ditto.
	(SYMBOL_CHILL_DEMANGLED_NAME): Ditto.
	* typeprint.c (typedef_print): Ditto.
	* utils.c (fprintf_symbol_filtered): Ditto.
	* valops.c (value_cast, search_struct_field, value_slice): Delete
	obsolete code.
	(varying_to_slice): Delete function.
	* value.h (COERCE_VARYING_ARRAY): Delete obsolete macro contents.
	(varying_to_slice): Delete declaration.
	* MAINTAINERS: Update.
@
text
@d155 1
a155 1
really_free_pendings (PTR dummy)
@


1.24
log
@Replace complain() with complaint().
@
text
@a482 4
/* OBSOLETE Note that this is only used in this file and in dstread.c, which */
/* OBSOLETE should be fixed to not need direct access to this function.  When */
/* OBSOLETE that is done, it can be made static again. */

@


1.23
log
@2002-11-18  Klee Dienes  <kdienes@@apple.com>

        * buildsym.c (pop_context): Add comment.
@
text
@a75 17
/* Complaints about the symbols we have encountered.  */

struct deprecated_complaint block_end_complaint =
{"block end address less than block start address in %s (patched it)", 0, 0};

struct deprecated_complaint anon_block_end_complaint =
{"block end address 0x%lx less than block start address 0x%lx (patched it)", 0, 0};

struct deprecated_complaint innerblock_complaint =
{"inner block not inside outer block in %s", 0, 0};

struct deprecated_complaint innerblock_anon_complaint =
{"inner block (0x%lx-0x%lx) not inside outer block (0x%lx-0x%lx)", 0, 0};

struct deprecated_complaint blockvector_complaint =
{"block at %s out of order", 0, 0};

d394 3
a396 1
	  complain (&block_end_complaint, SYMBOL_SOURCE_NAME (symbol));
d400 3
a402 1
	  complain (&anon_block_end_complaint, BLOCK_END (block), BLOCK_START (block));
d428 3
a430 2
		  complain (&innerblock_complaint,
			    SYMBOL_SOURCE_NAME (symbol));
d434 6
a439 3
		  complain (&innerblock_anon_complaint, BLOCK_START (pblock->block),
			    BLOCK_END (pblock->block), BLOCK_START (block),
			    BLOCK_END (block));
d544 2
a545 2
	      complain (&blockvector_complaint,
			local_hex_string ((LONGEST) start));
d864 2
a865 3
	  static struct deprecated_complaint msg =
	  {"Context stack not empty in end_symtab", 0, 0};
	  complain (&msg);
@


1.22
log
@2002-11-18  Klee Dienes  <kdienes@@apple.com>

        * buildsym.h (pop_context): Convert to function, defined in
        buildsym.c.
        * buildsym.c: Include gdb_assert.h.
        (pop_context): Implement as C function.  Add check for stack
        underflow.
        * dbxread.c (process_one_symbol): Complain and stop processing
        that symbol if we are already at the top of the context stack for
        a function-end N_FUN (this would imply an umatched RBRAC).  Ditto
        when processing N_RBRAC.
@
text
@d1105 3
@


1.21
log
@2002-10-25  Andrew Cagney  <cagney@@redhat.com>

	* complaints.h (struct deprecated_complaint): Rename `struct
	complaint'.
	* complaints.c (complain): Update.
	* remote-vx68.c, remote-vxmips.c, remote-vxsparc.c: Delete
	incorrect comment indicating that "symfile.h" was being included
	for the `struct complaint' definition.
	* remote-vx.c: Update.
	* objc-lang.c: Update.
	* xcoffread.c: Update.
	* hpread.c: Update.
	* mdebugread.c: Update.
	* stabsread.c: Update.
	* dwarf2read.c: Update.
	* dwarfread.c: Update.
	* elfread.c: Update.
	* coffread.c: Update.
	* stabsread.h: Update.
	* dbxread.c: Update.
	* buildsym.c: Update.
	* gdbtypes.c: Update.
	* macrotab.c: Update.
@
text
@d36 1
d1104 8
@


1.20
log
@2002-09-10  Michael Snyder  <msnyder@@redhat.com>

	* buildsym.c (finish_block): Protect against null pointer.
@
text
@d33 1
a33 1
#include "symfile.h"		/* Needed for "struct complaint" */
d77 1
a77 1
struct complaint block_end_complaint =
d80 1
a80 1
struct complaint anon_block_end_complaint =
d83 1
a83 1
struct complaint innerblock_complaint =
d86 1
a86 1
struct complaint innerblock_anon_complaint =
d89 1
a89 1
struct complaint blockvector_complaint =
d872 1
a872 1
	  static struct complaint msg =
@


1.20.4.1
log
@2002-10-22  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (buildsym.o): Depend on $(gdb_assert_h) and
	$(cp_support_h).
	(cp-support.o): Fix dependencies and add $(gdb_obstack_h) and
	$(gdb_assert_h).
	(symtab.o): Depend on $(cp_support_h).
	* symtab.h: Add opaque declaration for struct using_direct_node.
	(struct block): Add member 'language_specific'.
	(BLOCK_USING): New macro.
	* symtab.c: #include "cp-support.h"
	(lookup_symbol_aux): Call lookup_symbol_aux_nonlocal and
	lookup_symbol_aux_using when appropriate.
	(lookup_symbol_aux_nonlocal): New function.
	(lookup_symbol_aux_using): New function.
	(lookup_symbol_aux_using_loop): New function.
	* symfile.h: Add opaque declaration for struct obstack.
	Declare obsavestring to take a const char *.
	* symfile.c (obsavestring): Make first argument a const char *.
	* jv-lang.c (get_java_class_symtab): Initialize BLOCK_USING.
	* dwarf2read.c: New variable current_namespace.
	(scan_partial_symbols): Handle DW_TAG_namespace.
	(psymtab_to_symtab_1): Initialize current_namespace.
	(process_die): Handle DW_TAG_namespace,
	DW_TAG_imported_declaration, DW_TAG_imported_module.
	(read_namespace): New function.
	(dwarf2_name): New function.
	(dwarf2_extension): New function.
	(dwarf_tag_name): Add DWARF 3 names.
	(dwarf_attr_name): Ditto.
	(dwarf_type_encoding_name): Ditto.
	* cp-support.h: Opaque declaration for struct obstack.
	(struct using_direct): New struct.
	(struct using_direct_node): New struct.
	Add declarations for cp_add_using_obstack, cp_add_using_xmalloc,
	cp_copy_usings, cp_free_usings,	cp_find_first_component.
	* cp-support.c: #include "gdb_obstack.h", "gdb_assert.h".
	Comment on demangled name pitfalls.
	(cp_add_using_obstack): New function.
	(cp_add_using_xmalloc): New function.
	(cp_copy_usings): New function.
	(cp_free_usings): New function.
	(cp_find_first_component): New function.
	* buildsym.h: Declare processing_has_namespace_info.
	Declare add_using_directive.
	* buildsym.c: #include "gdb_assert.h", "cp-support.h".
	Change comment after #include "symfile.h".
	New variable using_list.
	(add_symbol_to_list): Scan for anonymous namespaces when
	appropriate.
	(scan_for_anonymous_namespaces): New function.
	(add_using_directive): New function.
	(start_symtab): Initialize processing_has_namespace_info,
	using_list.
	(end_symtab): Copy using_list into block.
	(copy_usings_to_obstack): New function.
	(finish_block): Set BLOCK_USING in general case and in C++
	function case.

2002-10-22  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add tests involving namespaces
	  starting from C.
	* gdb.c++/namespace.cc: Add namespaces with names starting
	  from C and their contents.
@
text
@d33 1
a33 1
#include "symfile.h"		/* Needed for "struct complaint", obsavestring */
a43 2
#include "gdb_assert.h"
#include "cp-support.h"
a62 5

/* List of using directives that are active in the current file.  */

static struct using_direct_node *using_list;

a64 8

static void scan_for_anonymous_namespaces (struct symbol *symbol);

static struct using_direct_node *copy_usings_to_obstack (struct
							 using_direct_node
							 *usings,
							 struct obstack
							 *obstack);
d108 1
a108 4
/* Add a symbol to one of the lists of symbols.  While we're at it, if
   we're in the C++ case and don't have full namespace debugging info,
   check to see if it references an anonymous namespace; if so, add an
   appropriate using directive.  */
a138 43

  /* Check to see if we might need to look for a mention of anonymous
     namespaces.  */
  
   if (SYMBOL_LANGUAGE (symbol) == language_cplus
       && !processing_has_namespace_info
       && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL)
     scan_for_anonymous_namespaces (symbol);
}

/* Check to see if a symbol is contained within an anonymous
   namespace; if so, add an appropriate using directive.  */

/* Optimize away strlen ("(anonymous namespace)").  */

#define ANONYMOUS_NAMESPACE_LEN 21

static void
scan_for_anonymous_namespaces (struct symbol *symbol)
{
  const char *name = SYMBOL_CPLUS_DEMANGLED_NAME (symbol);
  const char *beginning, *end;

  /* FIXME: carlton/2002-10-14: Should we do some sort of fast search
     first to see if the substring "(anonymous namespace)" occurs in
     name at all?  */

  for (beginning = name, end = cp_find_first_component (name);
       *end == ':';
       /* The "+ 2" is for the "::"-.  */
       beginning = end + 2, end = cp_find_first_component (beginning))
    {
      if ((end - beginning) == ANONYMOUS_NAMESPACE_LEN
	  && strncmp (beginning, "(anonymous namespace)",
		      ANONYMOUS_NAMESPACE_LEN) == 0)
	/* We've found a component of the name that's an anonymous
	   namespace.  So add symbols in it to the namespace given by
	   the previous component if there is one, or to the global
	   namespace if there isn't.  */
	add_using_directive (name,
			     beginning == name ? 0 : beginning - name - 2,
			     end - name);
    }
a165 29
/* This adds a using directive to using_list.  NAME is the start of a
   string that should contain the namespaces we want to add as initial
   substrings, OUTER_LENGTH is the end of the outer namespace, and
   INNER_LENGTH is the end of the inner namespace.  If the using
   directive in question has already been added, don't add it
   twice.  */

void
add_using_directive (const char *name, unsigned int outer_length,
		     unsigned int inner_length)
{
  struct using_direct_node *current;
  struct using_direct_node *new_node;
  struct using_direct *new;

  gdb_assert (outer_length < inner_length);

  /* Has it already been added?  */

  for (current = using_list; current; current = current->next)
    if (current->current->outer_length == outer_length
	&& current->current->inner_length == inner_length
	&& (strncmp (current->current->name, name, inner_length) == 0))
      return;

  using_list = cp_add_using_xmalloc (name, outer_length, inner_length,
				     using_list);
}

a296 1
  BLOCK_USING (block) = NULL;
a384 28

      /* If we're in the C++ case, make sure that we add 'using'
	 directives for all of the namespaces in which this function
	 lives.  Also, make sure that the name was originally mangled:
	 if not, there certainly isn't any namespace information to
	 worry about!  (Also, if not, the gdb_assert will fail.)  */
      if (SYMBOL_LANGUAGE (symbol) == language_cplus
	  && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL)
	{
	  const char *name = SYMBOL_CPLUS_DEMANGLED_NAME (symbol);
	  const char *next;

	  for (next = cp_find_first_component (name);
	       *next == ':';
	       /* The '+ 2' is to skip the '::'.  */
	       next = cp_find_first_component (next + 2))
	    {
	      BLOCK_USING (block)
		= cp_add_using_obstack (name, 0, next - name,
					BLOCK_USING (block),
					&objfile->symbol_obstack);
	    }

	  /* FIMXE: carlton/2002-10-09: Until I understand the
	     possible pitfalls of demangled names a lot better, I want
	     to make sure I'm not running into surprises.  */
	  gdb_assert (*next == '\0');
	}
a809 2
  processing_has_namespace_info = 0;
  using_list = NULL;
a942 7
      if (using_list != NULL)
	{
	  BLOCK_USING (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK))
	    = copy_usings_to_obstack (using_list,
				      &objfile->symbol_obstack);
	  using_list = NULL;
	}
a1070 26
}

/* This reallocates USINGS using OBSTACK and xfree's USINGS.  It
   returns the reallocated version of USINGS.  */

static struct using_direct_node *
copy_usings_to_obstack (struct using_direct_node *usings,
			struct obstack *obstack)
{
  if (usings == NULL)
    return NULL;
  else
    {
      struct using_direct_node *new_node
	= cp_add_using_obstack (usings->current->name,
				usings->current->outer_length,
				usings->current->inner_length,
				copy_usings_to_obstack (usings->next,
							obstack),
				obstack);

      xfree (usings->current);
      xfree (usings);

      return new_node;
    }
@


1.20.4.2
log
@2002-11-22  David Carlton  <carlton@@math.stanford.edu>

	* symtab.h: Add opaque declarations for struct namespace_info and
	struct obstack.
	(struct block): The language_specific stuff is now a struct
	namespace_info rather than a struct using_direct_node.
	(BLOCK_NAMESPACE): New macro.
	Delete macro BLOCK_USING.
	Add declarations for block_using, block_all_usings,
	block_set_using, block_scope, block_set_scope.
	* symtab.c: #include "gdb_assert.h"
	(lookup_symbol_aux): Move minsym stuff inside
	lookup_symbol_aux_nonlocal, and always do global search via
	lookup_symbol_aux_using.
	(lookup_symbol_aux_nonlocal): Do minsym search.
	(lookup_symbol_aux_using): Calculate usings via block_all_usings;
	handle namespace scope.
	(lookup_symbol_aux_using_loop): New function, not to be confused
	with the previous function of the same name.  (Sorry about that.)
	(lookup_symbol_namespace): Renamed from
	lookup_symbol_aux_using_loop.
	(lookup_symbol_aux_minsyms): Add block_index argument, delete
	is_a_field_of_this argument, and only check either global or
	static symbols rather than both of them.
	(block_using): New function.
	(block_all_usings): New function.
	(block_set_using): New function.
	(block_scope): New function.
	(block_set_scope): New function.
	(block_initialize_namespace): New function.
	* jv-lang.c (get_java_class_symtab): BLOCK_NAMESPACE instead of
	BLOCK_USING.
	* dwarf2read.c: Delete variable current_namespace, and replace its
	uses by processing_current_namespace (from buildsym.h).
	(scan_partial_symbols): Allow empty pdi.name if we're
	reading a namespace.
	* cp-support.h (struct namespace_info): New struct.
	* cp-support.c: Add comment.
	* buildsym.h: New variable processing_current_namespace.
	* buildsym.c (add_symbol_to_list): Do fast search for
	"(anonymous namespace)".
	(scan_for_anonymous_namespaces): Delete FIXME.  Convert for loop
	into a clearer while loop.
	(finish_block): Replace BLOCK_USING by BLOCK_NAMESPACE.
	(finish_block): Set block_scope of function blocks rather than
	generating using directives that would have a similar effect.
	(end_symtab): Set using via block_set_using rather than
	BLOCK_USING.
	* Makefile.in (symtab.o): Depend on gdb_assert_h.
@
text
@d163 1
a163 3
       && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL
       && strstr (SYMBOL_CPLUS_DEMANGLED_NAME (symbol),
		  "(anonymous namespace)") != NULL)
d178 1
a178 2
  const char *beginning = name;
  const char *end = cp_find_first_component (beginning);
d180 8
a187 1
  while (*end == ':')
d192 7
a198 12
	{
	  /* We've found a component of the name that's an anonymous
	     namespace.  So add symbols in it to the namespace given
	     by the previous component if there is one, or to the
	     global namespace if there isn't.  */
	  add_using_directive (name,
			       beginning == name ? 0 : beginning - name - 2,
			       end - name);
	}
      /* The "+ 2" is for the "::".  */
       beginning = end + 2;
       end = cp_find_first_component (beginning);
d387 1
a387 1
  BLOCK_NAMESPACE (block) = NULL;
d488 4
a491 4
	  if (processing_has_namespace_info)
	    block_set_scope (block, processing_current_namespace,
			     &objfile->symbol_obstack);
	  else
d493 5
a497 1
	      const char *current, *next;
d499 4
a502 25
	      /* FIXME: carlton/2002-11-14: For members of classes,
		 with this include the class name as well?  I don't
		 think that's a problem yet, but it will be.  */

	      current = name;
	      next = cp_find_first_component (current);
	      while (*next == ':')
		{
		  current = next;
		  /* The '+ 2' is to skip the '::'.  */
		  next = cp_find_first_component (current + 2);
		}
	      if (current == name)
		block_set_scope (block, "", &objfile->symbol_obstack);
	      else
		block_set_scope (block,
				 obsavestring (name, current - name,
					       &objfile->symbol_obstack),
				 &objfile->symbol_obstack);
	      
	      /* FIXME: carlton/2002-10-09: Until I understand the
		 possible pitfalls of demangled names a lot better, I
		 want to make sure I'm not running into surprises.  */
	      gdb_assert (*next == '\0');
	    }
d1066 3
a1068 4
	  block_set_using (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK),
			   copy_usings_to_obstack (using_list,
						   &objfile->symbol_obstack),
			   &objfile->symbol_obstack);
@


1.20.4.3
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d3 1
a3 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
d33 1
a33 1
#include "symfile.h"
a35 1
#include "gdb_assert.h"
d44 1
a44 1
#include "block.h"
a45 2
#include "dictionary.h"

d65 5
d72 8
d90 17
d113 1
a113 1
  struct pending *link = list;
d131 1
a131 1
  struct pending *link;
d161 40
a200 2
  if (SYMBOL_LANGUAGE (symbol) == language_cplus)
    cp_scan_for_anonymous_namespaces (symbol);
d216 1
a216 1
	  pp = DEPRECATED_SYMBOL_NAME (list->symbol[j]);
d228 29
d260 1
d262 1
a262 1
really_free_pendings (void *dummy)
d322 3
a324 3
  struct pending *next, *next1;
  struct block *block;
  struct pending_block *pblock;
d326 11
d338 1
a338 1
  block = allocate_block (&objfile->symbol_obstack);
d342 10
a351 2
      BLOCK_DICT (block) = dict_create_linear (&objfile->symbol_obstack,
					       *listhead);
d355 27
a381 2
      BLOCK_DICT (block) = dict_create_hashed (&objfile->symbol_obstack,
					       *listhead);
a396 1
      struct dict_iterator iter;
d399 1
d408 1
a408 1
	  ALL_BLOCK_SYMBOLS (block, iter, sym)
a417 1
		case LOC_COMPUTED_ARG:
a432 1
		case LOC_COMPUTED:
d443 1
a443 2
	      iparams = 0;
	      ALL_BLOCK_SYMBOLS (block, iter, sym)
d445 1
a445 3
		  if (iparams == nparams)
		    break;

a453 1
		    case LOC_COMPUTED_ARG:
a470 1
		    case LOC_COMPUTED:
d478 7
a484 2
      /* If we're in the C++ case, set the block's scope.  */
      if (SYMBOL_LANGUAGE (symbol) == language_cplus)
d486 35
a520 1
	  cp_set_block_scope (symbol, block, &objfile->symbol_obstack);
d526 1
d547 1
a547 3
	  complaint (&symfile_complaints,
		     "block end address less than block start address in %s (patched it)",
		     SYMBOL_PRINT_NAME (symbol));
d551 1
a551 3
	  complaint (&symfile_complaints,
		     "block end address 0x%s less than block start address 0x%s (patched it)",
		     paddr_nz (BLOCK_END (block)), paddr_nz (BLOCK_START (block)));
d577 2
a578 3
		  complaint (&symfile_complaints,
			     "inner block not inside outer block in %s",
			     SYMBOL_PRINT_NAME (symbol));
d582 3
a584 6
		  complaint (&symfile_complaints,
			     "inner block (0x%s-0x%s) not inside outer block (0x%s-0x%s)",
			     paddr_nz (BLOCK_START (pblock->block)),
			     paddr_nz (BLOCK_END (pblock->block)),
			     paddr_nz (BLOCK_START (block)),
			     paddr_nz (BLOCK_END (block)));
a599 1

d611 1
a611 1
  struct pending_block *pblock;
d628 4
d635 3
a637 3
  struct pending_block *next;
  struct blockvector *blockvector;
  int i;
d689 2
a690 2
	      complaint (&symfile_complaints, "block at %s out of order",
			 local_hex_string ((LONGEST) start));
d707 1
a707 1
  struct subfile *subfile;
d761 6
a766 1
  /* If the filename of this subfile ends in .C, then change the
d768 2
a769 1
     any other C++ suffixes accepted by deduce_language_from_filename.  */
d843 1
a843 1
  struct subfile_stack *tem
d858 2
a859 2
  char *name;
  struct subfile_stack *link = subfile_stack;
d875 1
a875 1
record_line (struct subfile *subfile, int line, CORE_ADDR pc)
d947 2
a959 4
  /* Set up support for C++ namespace support, in case we need it.  */

  cp_initialize_namespace ();

d988 4
a991 4
  struct symtab *symtab = NULL;
  struct blockvector *blockvector;
  struct subfile *subfile;
  struct context_stack *cstk;
d1011 3
a1013 2
	  complaint (&symfile_complaints,
	             "Context stack not empty in end_symtab");
d1082 8
a1089 2
      cp_finalize_namespace (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK),
			     &objfile->symbol_obstack);
d1162 1
a1162 1
	  symtab->free_func = NULL;
d1220 26
d1253 1
a1253 1
  struct context_stack *new;
a1275 11

/* Pop a context block.  Returns the address of the context block just
   popped. */

struct context_stack *
pop_context (void)
{
  gdb_assert (context_stack_depth > 0);
  return (&context_stack[--context_stack_depth]);
}

d1304 1
a1304 1
  int i;
@


1.20.4.4
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
d205 1
a205 1
				   objfile_obstack, so don't free
d233 1
a233 1
  block = allocate_block (&objfile->objfile_obstack);
d237 1
a237 1
      BLOCK_DICT (block) = dict_create_linear (&objfile->objfile_obstack,
d242 1
a242 1
      BLOCK_DICT (block) = dict_create_hashed (&objfile->objfile_obstack,
d350 1
a350 1
	  cp_set_block_scope (symbol, block, &objfile->objfile_obstack);
d442 1
a442 1
   Allocate the pending block struct in the objfile_obstack to save
d452 1
a452 1
    obstack_alloc (&objfile->objfile_obstack, sizeof (struct pending_block));
d480 1
a480 1
    obstack_alloc (&objfile->objfile_obstack,
d912 1
a912 1
			     &objfile->objfile_obstack);
d964 1
a964 1
		obstack_alloc (&objfile->objfile_obstack, linetablesize);
d976 1
a976 1
		obstack_alloc (&objfile->objfile_obstack,
d1000 1
a1000 1
						  &objfile->objfile_obstack);
@


1.20.2.1
log
@2002-09-20  David Carlton  <carlton@@math.stanford.edu>

	* jv-lang.c (get_java_class_symtab): Use xmalloc to allocate
	GLOBAL_BLOCK rather than xmmalloc.
	(free_class_block): Use xfree rather than xmfree.
	* mdebugread.c: #include "dictionary.h"
	(new_block): Remove argument.  Initialize BLOCK_DICT.
	(parse_symbol): Update call to new_block.
	(new_symtab): Ditto.
	(fixup_sigtramp): Ditto.
	Delete MAXSYMS member of struct parse_stack.
	(psymtab_to_symtab_1): Don't set maxsyms.
	(new_symtab): Remove maxsyms argument.
	(psymtab_to_symtab_1): Update call to new_symtab.
	(shrink_block): Delete function.
	(add_symbol): Add symbols via dict_add_symbol_block.
	* jv-lang.c (add_class_symtab_symbol): Add symbols via
	dict_add_symbol_block.
	Delete variable class_symtab_space.
	* Makefile.in (jv-lang.o): Add dictionary_h.
	* jv-lang.c: #include "dictionary.h"
	* symmisc.c (free_symtab): Call free_func rather than freeing free_ptr.
	* jv-lang.c (get_java_class_symtab): Initialize free_func rather
	than free_ptr.
	(free_class_block): New function.
	(add_class_symtab_symbol): Delete reference to free_ptr.
	* buildsym.c (end_symtab): Initialize free_func rather than free_ptr.
	* symtab.h (struct symtab): Replace free_ptr by free_func.
	* jv-lang.c (get_java_class_symtab): Add DICT_BLOCK assignments.
	* Makefile.in (buildsym.o): Add dictionary_h.
	* buildsym.c (finish_block): Initialize BLOCK_DICT (block).
	#include "dictionary.h"
	* symtab.h (struct block): Add 'dict' member.
	(BLOCK_DICT): New macro.
	* dictionary.c: New file.
	* dictionary.h: New file.
	* Makefile.in (SFILES): Add dictionary.c
	(dictionary_h): New variable.
	(COMMON_OBS): Add dictionary.o.
	(dictionary.o): New rule.
	(carlton): New rule.
@
text
@a43 1
#include "dictionary.h"
a296 1
  BLOCK_DICT (block) = dict_create_block (block);
d1015 1
a1015 1
	  symtab->free_func = NULL;
@


1.20.2.2
log
@2002-09-23  David Carlton  <carlton@@math.stanford.edu>

	* dictionary.c (struct dict_vtbl): 'add_symbol' field.
	(add_symbol_generic): New function.
	(free_obstack): New function.
	(dict_create_hashed): New function.
	(lookup_hashed): New function.
	(iterator_first_hashed): New function.
	(iterator_hashed_advance): New function.
	(iterator_next_hashed): New function.
	* dictionary.h: A few more declarations.
	* mdebugread.c (parse_symbol): Use dict_iterator when finding
	parameters.
	* Makefile.in (valops.o): Depend on dictionary_h.
	* valops.c (value_of_this): Check empty block via dict_empty.
	#include "dictionary.h"
	* symfile.c (free_named_symtabs): Check empty block via dict_empty.
	* dictionary.h: Declare dict_empty.
	* symmisc.c (dump_symtab): Don't print out number of
	symbols/buckets.
	* printcmd.c (print_frame_args): Delete assertion that block isn't
	a hashtable.
	* symmisc.c (free_symtab_block): Update to use dictionary
	methods.
	* symtab.h (struct symtab): Comment on free_contents.
	* jv-lang.c (get_java_class_symtab): Set class_symtab->free_code.
	* mdebugread.c (add_symbol): Delete 'nsyms' variable.
	(fixup_sigtramp): Add symbol via dict_add_symbol_block.
	* Makefile.in (mi-cmd-stack.o): Depend on dictionary_h.
	* ada-lang.c (symtab_for_sym): Update uses of ALL_BLOCK_SYMBOLS.
	(ada_add_block_symbols): Ditto.
	(debug_print_block): Ditto.
	(fill_in_ada_prototype): Ditto.
	* breakpoint.c (get_catch_sals): Ditto.
	* coffread.c (patch_opaque_types): Ditto.
	* tracepoint.c (add_local_symbols): Ditto.
	(scope_info): Ditto.
	* symtab.c (find_pc_sect_symtab): Ditto.
	(search_symbols): Ditto.
	(make_symbol_completion_list): Ditto.
	(find_addr_symbol): Ditto.
	(make_file_symbol_completion_list): Ditto.
	(make_symbol_overload_list): Ditto.
	* symmisc.c (dump_symtab): Ditto.
	* stack.c (print_block_frame_locals): Ditto.
	(print_block_frame_labels): Ditto.
	(print_frame_arg_vars): Ditto.
	* printcmd.c (print_frame_args): Ditto.
	* objfiles.c (objfile_relocate): Ditto.
	* mdebugread.c (mylookup_symbol): Ditto.
	* Makefile.in (ada-lang.o): Depend on dictionary_h.
	* Makefile.in (tracepoint.o): Ditto.
	* Makefile.in (symmisc.o): Ditto.
	* Makefile.in (stack.o): Ditto.
	* Makefile.in (printcmd.o): Ditto.
	* Makefile.in (objfiles.o): Ditto.
	* Makefile.in (coffread.o): Ditto.
	* Makefile.in (breakpoint.o): Ditto.
	* ada-lang.c: #include "dictionary.h"
	* tracepoint.c: Ditto.
	* symmisc.c: Ditto.
	* stack.c: Ditto.
	* printcmd.c: Ditto.
	* objfiles.c: Ditto.
	* coffread.c: Ditto.
	* breakpoint.c: Ditto.
	* symtab.h: Comment out ALL_BLOCK_SYMBOLS.  (Moved to
	dictionary.h.)
	* dictionary.c: Dict_iterator accessor macros.
	(struct dict_vtbl): Add iterator_first, iterator_next.
	(dict_iterator_first): New function.
	(dict_iterator_next): New function.
	(iterator_first_block): New function.
	(iterator_next_block): New function.
	(iterator_block_hashed_advance): New function.
	* dictionary.h: Add dict_iterator stuff.
	* Makefile.in (symtab.o): Depend on dictionary_h.
	* symtab.c: #include "dictionary.h"
	* dictionary.c: Move down #include "dictionary.h", for now...
	(free_block): Rename from dict_free_block.
	(struct dict_vtbl): Add LOOKUP member.
	(dict_lookup): New function.
	(lookup_block): New function.
	* dictionary.h: Declare dict_lookup.
	* symtab.c (lookup_block_symbol): Use dict_lookup.

2002-09-23  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c (list_args_or_locals): Update use of
	ALL_BLOCK_SYMBOLS.
	#include "dictionary.h"
@
text
@a261 1
      BLOCK_DICT (block) = dict_create_block (block);
d265 2
d268 24
a291 3
	obstack_alloc (&objfile->symbol_obstack, sizeof (struct block));
      BLOCK_DICT (block) = dict_create_hashed (&objfile->symbol_obstack,
					       *listhead);
d298 1
a309 1
      struct dict_iterator iter;
d318 1
a318 1
	  ALL_BLOCK_SYMBOLS (block, iter, sym)
@


1.20.2.3
log
@2002-09-24  David Carlton  <carlton@@math.stanford.edu>

	* dictionary.c: Comment out block-specific stuff.
	* jv-lang.c (get_java_class_symtab): Allocate GLOBAL_BLOCK on
	obstack.
	(free_class_block): Don't free GLOBAL_BLOCK.
	* dictionary.h: Comment out block-specific stuff.
	* symtab.h: Comment out the members of struct block that
	BLOCK_DICT obsoletes, and their accessors.
	* Makefile.in (buildsym.o): Depend on gdb_assert_h.
	* buildsym.c (finish_block): Don't count number of symbols.
	(finish_block): Replace BLOCK_SYM reference with use of iterator.
	#include "gdb_assert.h"
	* symfile.c (free_named_symtabs): Fix calls to dict_empty
	(which would seem to be #if'd out; oops...).
	* buildsym.c (finish_block): Don't set BLOCK_HASHTABLE.
	* jv-lang.c (get_java_class_symtab): Don't set BLOCK_HASHTABLE and
	BLOCK_NSYMS.
	* mdebugread.c (new_block): Allocate BLOCK_DICT via
	dict_create_linear_expandable.
	(add_symbol): Add symbol via dict_add_symbol; no need to chase
	pointers.
	(fixup_sigtramp): Add symbol via dict_add_symbol.
	(new_symtab): Add FIXME comment on freeing blocks.
	* jv-lang.c (get_java_class_symtab): Allocate GLOBAL_BLOCK's dict
	using dict_create_linear_expandable.
	(add_class_symtab_symbol): Add symbol using dict_add_symbol.
	* dictionary.c (struct dictionary_linear_expandable): New struct.
	(struct dictionary): Added member 'linear_expandable'.
	(DICT_LINEAR_EXPANDABLE_MAXSYMS): New macro.
	New variable dict_block_vtbl.  Made all the _vtbl variables static.
	Renamed all 'maxsyms' to 'capacity'.
	(dict_create_linear_expandable): New function.
	(add_symbol_linear_expandable): New function.
	(free_linear_expandable): New function.
	* jv-lang.c (get_java_class_symtab): Create static block's
	dictionary with dict_create_linear.
	* buildsym.c (finish_block): Create function blocks' dictionaries
	with dict_create_linear.
	* dictionary.c (lookup_linear): New function.
	(iterator_first_linear): New function.
	(iterator_next_linear): New function.
	* dictionary.h: Moved comment.
	* dictionary.c (struct dictionary_linear): New struct.
	(struct dictionary): Added 'linear' member.
	(DICT_LINEAR_NSYMS): New macro.
	(DICT_LINEAR_SYMS): New macro.
	(DICT_LINEAR_SYM): New macro.
	New variable dict_linear_vtbl.
	(dict_create_linear): New function.
@
text
@a44 1
#include "gdb_assert.h"
d236 1
d239 10
a248 1
  /* Initialize the block's dictionary.  */
d253 10
a262 3
	obstack_alloc (&objfile->symbol_obstack, sizeof (struct block));
      BLOCK_DICT (block) = dict_create_linear (&objfile->symbol_obstack,
					       *listhead);
d286 1
d331 1
a331 4
	      for (sym = dict_iterator_first (BLOCK_DICT (block), &iter),
		     iparams = 0;
		   iparams < nparams;
		   sym = dict_iterator_next (&iter))
d333 1
a333 1
		  gdb_assert (sym != NULL);
d369 1
@


1.20.2.4
log
@2002-10-07  David Carlton  <carlton@@math.stanford.edu>

	* buildsym.c (finish_block): Initialize BLOCK_USING to NULL.
	* symtab.h (struct block): Delete last remnants of non-dictionary
	symbol lists.
	(struct block): Add field 'language_specific' and accessor macro
	BLOCK_USING.
	* cp-support.h (struct using_data): New struct.
	(struct using_data_node): New struct.
@
text
@a259 1
  BLOCK_USING (block) = NULL;
@


1.20.2.5
log
@2002-10-09  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Comment out cp_find_last_component and
	cp_locate_arguments.
	Add comments warning about pitfals involving demangled names.
	* buildsym.c (finish_block): Grab the namespace names from the
	front instead of from the back.
	* Makefile.in (cp-support.o): Depend on gdb_assert_h.
	* cp-support.c: #include "gdb_assert.h"
	* cp-support.h: Declare cp_find_first_component.
	* cp-support.c (cp_find_first_component): New function.
	* buildsym.c (finish_block): Don't add namespace using stuff
	unless there's a demangled name to work with.
	(finish_block): Delete unused variable 'j'.
	(finish_block): Move declaration of iter earlier to pacify GCC.

2002-10-08  David Carlton  <carlton@@math.stanford.edu>

	* symfile.c (obsavestring): Make first argument a const char *.
	* symfile.h: Add opaque declaration for 'struct obstack'.
	Make obsavestring take a const char * as its first argument.
	* Makefile.in (cp-support.o): Correct dependencies.
	* cp-support.h: Declare cp_add_using.
	* cp-support.c: #include "gdb_obstack.h"
	(cp_add_using): New function.
	* Makefile.in (buildsym.o): Depend on $(cp_support_h).
	* buildsym.c (finish_block): Add 'using' directives for
	functions.
	#include "cp-support.h"
	* cp-support.h: Add function declarations.
	* cp-support.c (cp_locate_arguments): New function.
	(cp_find_last_component): New function.
	* symtab.h (struct block): Add comment.
@
text
@d33 1
a33 1
#include "symfile.h"		/* Needed for "struct complaint", obsavestring */
a45 1
#include "cp-support.h"
d237 1
a268 1
      struct dict_iterator iter;
d271 1
a350 30
	}

      /* If we're in the C++ case, make sure that we add 'using'
	 directives for all of the namespaces in which this function
	 lives.  Also, make sure that the name was originally mangled:
	 if not, there certainly isn't any namespace information to
	 worry about!  (Also, if not, the gdb_assert will fail.)  */
      if (SYMBOL_LANGUAGE (symbol) == language_cplus
	  && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL)
	{
	  const char *name = SYMBOL_CPLUS_DEMANGLED_NAME (symbol);
	  const char *next;

	  for (next = cp_find_first_component (name);
	       *next == ':';
	       /* The '+ 2' is to skip the '::'.  */
	       next = cp_find_first_component (next + 2))
	    {
	      const char *namespace_name
		= obsavestring (name, next - name,
				&objfile->symbol_obstack);
	      BLOCK_USING (block)
		= cp_add_using ("", namespace_name, BLOCK_USING (block),
				&objfile->symbol_obstack);
	    }

	  /* FIMXE: carlton/2002-10-09: Until I understand the
	     possible pitfalls of demangled names a lot better, I want
	     to make sure I'm not running into surprises.  */
	  gdb_assert (*next == '\0');
@


1.20.2.6
log
@2002-10-14  David Carlton  <carlton@@math.stanford.edu>

	* buildsym.c (add_using_directive): Rewrite to match new version
	of struct using_direct.
	(finish_block): Ditto.

	* symtab.c (lookup_symbol_aux_using_loop): Add 'prefix_len'
	argument; rewrite to match new version of struct using_direct.

	* cp-support.h: Update declaration for cp_add_using.

	* cp-support.c (cp_add_using): Rewrite to match new version of
	struct using_direct.

	* cp-support.h (struct using_direct): Rewrite struct.

	* buildsym.h: Declaration for add_using_directive.

	* buildsym.c: New variable 'using_list'.
	(start_symtab): Initialize using_list.
	(end_symtab): Initialize BLOCK_USING of STATIC_BLOCK.
	(scan_for_anonymous_namespaces): New function.
	(add_symbol_to_list): In C++ case, look for anonymous namespaces.
	(add_using_directive): New function.
@
text
@a65 5

/* List of using directives that are active in the current file.  */

static struct using_direct_node *using_list;

a67 2

static void scan_for_anonymous_namespaces (struct symbol *symbol);
d111 1
a111 3
/* Add a symbol to one of the lists of symbols.  While we're at it,
   check to see if it references an anonymous namespace; if so, add an
   appropriate using directive.  */
a141 42

  /* Check to see if we might need to look for a mention of anonymous
     namespaces.  */
  /* TODOTODO */
/*   if (SYMBOL_LANGUAGE (symbol) == language_cplus */
/*       && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL) */
/*     scan_for_anonymous_namespaces (symbol) */
}

/* Check to see if a symbol is contained within an anonymous
   namespace; if so, add an appropriate using directive.  */

/* Optimize away strlen ("(anonymous namespace)").  */

#define ANONYMOUS_NAMESPACE_LEN 21

static void
scan_for_anonymous_namespaces (struct symbol *symbol)
{
  const char *name = SYMBOL_CPLUS_DEMANGLED_NAME (symbol);
  const char *beginning, *end;

  /* FIXME: carlton/2002-10-14: Should we do some sort of fast search
     first to see if the substring "(anonymous namespace)" occurs in
     name at all?  */

  for (beginning = name, end = cp_find_first_component (name);
       *end == ':';
       /* The "+ 2" is for ':'.  */
       beginning = end + 2, end = cp_find_first_component (beginning))
    {
      if ((end - beginning) == ANONYMOUS_NAMESPACE_LEN
	  && strncmp (beginning, "(anonymous namespace)",
		      ANONYMOUS_NAMESPACE_LEN) == 0)
	/* We've found a component of the name that's an anonymous
	   namespace.  So add symbols in it to the namespace given by
	   the previous component if there is one, or to the global
	   namespace if there isn't.  */
	add_using_directive (name,
			     beginning == name ? 0 : beginning - name - 2,
			     end - name);
    }
a168 26
/* This adds a using directive to using_list.  NAME is the start of a
   string that should contain the namespaces we want to add as initial
   substrings, OUTER_INDEX is the end of the outer namespace, and
   INNER_INDEX is the end of the inner namespace.  If the using
   directive in question has already been added, don't add it
   twice.  */

void
add_using_directive (const char *name, unsigned int outer_index,
		     unsigned int inner_index)
{
  struct using_direct_node *current;

  gdb_assert (outer_index < inner_index);

  /* Has it already been added?  */

  for (current = using_list; current; current = current->next)
    if (strncmp (current->current->name, name, outer_index) == 0
	&& strncmp (current->current->name, name, inner_index) == 0)
      return;

  /* TODOTODO */
}


d369 3
d373 1
a373 1
		= cp_add_using (name, 0, next - name, BLOCK_USING (block),
a805 1
  using_list = NULL;
a938 4
      /* TODOTODO */
/*       BLOCK_USING (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK)) */
/* 	= cp_copy_usings_obstack (using_list, &objfile->symbol_obstack); */
/*       cp_deep_free_usings (using_list); */
a1067 4

/* Search the block for global symbols indicating the presence of
   anonymous namespaces; add using declarations for them, if
   found.  */
@


1.20.2.7
log
@2002-10-15  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_using_loop): prefix_len should be <=
	outer_length.
	(lookup_symbol_aux_using_loop): Don't skip colons in rest_of_outer
	if we've used all of outer.
	* cp-support.h: Rename declaration of cp_add_using to
	cp_add_using_obstack.
	* cp-support.c (cp_add_using_obstack): Rename from cp_add_using.
	* buildsym.h: Rename arguments in declaration of
	add_using_directive.
	* buildsym.c (add_using_directive): Finish definition, rename
	arguments.
	* cp-support.h: Add declaration for cp_add_using_xmalloc.
	* cp-support.c (cp_add_using_xmalloc): New function.
	* buildsym.c (copy_usings_to_obstack): New function.
	(end_symtab): Set STATIC_BLOCK's BLOCK_USING using
	copy_usings_to_obstack.

2002-10-15  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Add anonymous namespace tests.
	* gdb.c++/namespace.cc: Add anonymous namespaces.
@
text
@a74 6

static struct using_direct_node *copy_usings_to_obstack (struct
							 using_direct_node
							 *usings,
							 struct obstack
							 *obstack);
d118 3
a120 3
/* Add a symbol to one of the lists of symbols.  While we're at it, if
   we're in the C++ case, check to see if it references an anonymous
   namespace; if so, add an appropriate using directive.  */
d154 4
a157 4
  
   if (SYMBOL_LANGUAGE (symbol) == language_cplus
       && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL)
     scan_for_anonymous_namespaces (symbol);
d179 1
a179 1
       /* The "+ 2" is for the "::"-.  */
d222 2
a223 2
   substrings, OUTER_LENGTH is the end of the outer namespace, and
   INNER_LENGTH is the end of the inner namespace.  If the using
d228 2
a229 2
add_using_directive (const char *name, unsigned int outer_length,
		     unsigned int inner_length)
a231 2
  struct using_direct_node *new_node;
  struct using_direct *new;
d233 1
a233 1
  gdb_assert (outer_length < inner_length);
d238 2
a239 3
    if (current->current->outer_length == outer_length
	&& current->current->inner_length == inner_length
	&& (strncmp (current->current->name, name, inner_length) == 0))
d242 1
a242 2
  using_list = cp_add_using_xmalloc (name, outer_length, inner_length,
				     using_list);
d447 2
a448 3
		= cp_add_using_obstack (name, 0, next - name,
					BLOCK_USING (block),
					&objfile->symbol_obstack);
d1014 4
a1017 7
      if (using_list != NULL)
	{
	  BLOCK_USING (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK))
	    = copy_usings_to_obstack (using_list,
				      &objfile->symbol_obstack);
	  using_list = NULL;
	}
a1145 26
}

/* This reallocates USINGS using OBSTACK and xfree's USINGS.  It
   returns the reallocated version of USINGS.  */

static struct using_direct_node *
copy_usings_to_obstack (struct using_direct_node *usings,
			struct obstack *obstack)
{
  if (usings == NULL)
    return NULL;
  else
    {
      struct using_direct_node *new_node
	= cp_add_using_obstack (usings->current->name,
				usings->current->outer_length,
				usings->current->inner_length,
				copy_usings_to_obstack (usings->next,
							obstack),
				obstack);

      xfree (usings->current);
      xfree (usings);

      return new_node;
    }
@


1.20.2.8
log
@2002-10-18  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (block_h): New variable.
	Updated dependencies to reflect it.
	* parse.c (parse_exp_1): Use BLOCK_START.
	#include "block.h"
	* p-exp.tab.c: Regenerated.
	* m2-exp.tab.c: Ditto.
	* jv-exp.tab.c: Ditto.
	* f-exp.tab.c: Ditto.
	* c-exp.tab.c: Ditto.
	* ada-exp.tab.c: Ditto.
	* ada-lang.c: #include "block.h"
	* p-exp.y: Ditto.
	* objc-exp.y: Ditto.
	* m2-exp.y: Ditto.
	* jv-exp.y: Ditto.
	* f-exp.y: Ditto.
	* c-exp.y: Ditto.
	* ada-exp.y: Ditto.
	* values.c: Ditto.
	* valops.c: Ditto.
	* tracepoint.c: Ditto.
	* symtab.c: Ditto.
	* symmisc.c: Ditto.
	* symfile.c: Ditto.
	* stack.c: Ditto.
	* printcmd.c: Ditto.
	* objfiles.c: Ditto.
	* objc-lang.c: Ditto.
	* nlmread.c: Ditto.
	* mips-tdep.c: Ditto.
	* mdebugread.c: Ditto.
	* linespec.c: Ditto.
	* jv-lang.c: Ditto.
	* infcmd.c: Ditto.
	* f-valprint.c: Ditto.
	* findvar.c: Ditto.
	* expprint.c: Ditto.
	* coffread.c: Ditto.
	* buildsym.c: Ditto.
	* breakpoint.c: Ditto.
	* blockframe.c: Ditto.
	* ax-gdb.c: Ditto.
	* alpha-tdep.c: Ditto.
	* block.h: New file.
	* symtab.h: Moved struct block, struct blockvector, and related
	macros and function declarations to block.h.
	* dwarf2read.c (process_die): Set processing_has_namespace_info if
	we run into DW_TAG_namespace, DW_TAG_imported_declaration, or
	DW_TAG_imported_module.
	New variable current_namespace.
	(psymtab_to_symtab_1): Set current_namespace to "".
	(dwarf2_name): New function.
	(dwarf2_add_member_fn): Get name via dwarf2_name.
	(read_typedef): Ditto.
	(read_file_scope): Ditto.
	(dwarf2_add_field): Ditto.
	(read_structure_scope): Ditto.
	(read_enumeration): Ditto.
	(dwarf2_extension): New function.
	(read_namespace): Set current_namespace correctly; also, if we're
	entering an anonymous namespace, add an appropriate using
	directive.
	* buildsym.c (start_symtab): Reset processing_has_namespace_info
	to 0.
	(add_symbol_to_list): Only scan for anonymous namespaces if
	!processing_has_namespace_info.
	* buildsym.h: Add new flag processing_has_namespace_info.

2002-10-18  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c: #include "block.h"
@
text
@a32 1
#include "block.h"
a161 1
       && !processing_has_namespace_info
a890 1
  processing_has_namespace_info = 0;
d1187 4
@


1.20.2.9
log
@2002-10-21  David Carlton  <carlton@@math.stanford.edu>

	* buildsym.c (add_symbol_to_list): Expand comment.
	* objc-lang.c (find_methods): Use BLOCK_START, BLOCK_END.
	* Makefile.in (x86-64-tdep.o): Depend on block_h.
	* x86-64-tdep.c (x86_64_skip_prologue): Use BLOCK_END and
	SYMBOL_BLOCK_VALUE.
@
text
@d126 2
a127 3
   we're in the C++ case and don't have full namespace debugging info,
   check to see if it references an anonymous namespace; if so, add an
   appropriate using directive.  */
d256 1
@


1.20.2.10
log
@2002-10-22  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (scan_partial_symbols): Clarify some comments.
	* symtab.c (lookup_symbol_aux): Always call
	lookup_symbol_aux_using to search global symtabs/psymtabs.
	(lookup_symbol_aux_local): Add static_block argument.
	* buildsym.c (add_symbol_to_list): Do a quick scan for "(anonymous
	namespace)" before calling scan_for_anonymous_namespaces.
	(scan_for_anonymous_namespaces): Delete FIXME comment.
@
text
@d165 1
a165 3
       && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL
       && strstr (SYMBOL_CPLUS_DEMANGLED_NAME (symbol),
		  "(anonymous namespace)") != NULL)
d181 4
@


1.20.2.11
log
@2002-11-13  David Carlton  <carlton@@math.stanford.edu>

	* buildsym.c (finish_block): Initialize block_scope (block) in
	C++ function blocks.
	* dwarf2read.c: Delete variable current_namespace.
	(psymtab_to_symtab_1): Rename current_namespace to
	processing_current_namespace.
	(read_namespace): Ditto.
	* buildsym.h: New variable processing_current_namespace.
	* block.h: Declarations for block_scope and block_set_scope.
	* block.c (block_scope): New function.
	(block_set_scope): New function.
	* cp-support.h (struct namespace_info): Add 'scope' member.
	* buildsym.c (finish_block): Replace BLOCK_USING by
	block_set_using.
	(end_symtab): Ditto.
	* block.h: Declaration for block_set_using.
	* block.c (block_set_using): New function.
	(block_initialize_namespace): New function.
	* symtab.c (lookup_symbol_aux_using): Replace BLOCK_USING by
	block_using.
	* buildsym.c (finish_block): Set BLOCK_NAMESPACE to NULL, not
	BLOCK_USING.
	* jv-lang.c (get_java_class_symtab): Ditto.
	* block.h: Declaration for block_using.
	* block.c (block_using): New function.
	* Makefile.in (block.o): New rule; also add block.c to SFILES and
	block.o to COMMON_OBS.
	* block.c: New file.
	* symtab.c (contained_in): Move to block.c.
	(block_function): Ditto.
	* block.h (struct block): Have the language-specific stuff contain
	a struct namespace_info.
	(BLOCK_NAMESPACE): New macro.
	(BLOCK_USING): Delete.
	* linespec.c (decode_variable): Add comment before
	decode_variable.
	* cp-support.h (struct namespace_info): New struct.
@
text
@d347 1
a347 1
  BLOCK_NAMESPACE (block) = NULL;
a450 22
	  if (processing_has_namespace_info)
	    block_set_scope (block, processing_current_namespace,
			     &objfile->symbol_obstack);
	  else
	    {
	      const char *current, *next;
	      
	      for (current = name, next = cp_find_first_component (current);
		   *next == ':';
		   /* The '+ 2' is to skip the '::'.  */
		   current = next,
		     next = cp_find_first_component (current + 2))
		;
	      if (current == name)
		block_set_scope (block, "", &objfile->symbol_obstack);
	      else
		block_set_scope (block,
				 obsavestring (name, current - name,
					       &objfile->symbol_obstack),
				 &objfile->symbol_obstack);
	    }
	  
d456 4
a459 5
	      block_set_using (block,
			       cp_add_using_obstack (name, 0, next - name,
						     block_using (block),
						     &objfile->symbol_obstack),
			       &objfile->symbol_obstack);
d462 1
a462 1
	  /* FIXME: carlton/2002-10-09: Until I understand the
d1028 3
a1030 4
	  block_set_using (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK),
			   copy_usings_to_obstack (using_list,
						   &objfile->symbol_obstack),
			   &objfile->symbol_obstack);
@


1.20.2.12
log
@2002-11-14  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (symtab.o): Depend on gdb_assert_h.
	* symtab.c: #include "gdb_assert.h"
	* Makefile.in (namespace): Add 'namespace' target.
	* buildsym.c (finish_block): Comment out the using declarations
	generation.
	* block.h: Make argument to block_scope const.
	* block.c (block_scope): Make argument const.
	* symtab.c (lookup_symbol_aux_using): Gather usings via
	block_all_usings.
	(lookup_symbol_namespace): Rename from
	lookup_symbol_aux_using_loop.
	(lookup_symbol_aux_using_loop): New function.
	* block.h: Declare block_all_usings.
	* block.c (block_all_usings): New function.
	* symtab.c (lookup_symbol_aux_nonlocal): Delete FIXME comment.
	* buildsym.c (finish_block): Add FIXME comment.

2002-11-14  David Carlton  <carlton@@math.stanford.edu>

	* carlton_runnamespace: New file.
@
text
@a456 4

	      /* FIXME: carlton/2002-11-14: For members of classes,
		 with this include the class name as well?  I don't
		 think that's a problem yet, but it will be.  */
a470 5
	      
	      /* FIXME: carlton/2002-10-09: Until I understand the
		 possible pitfalls of demangled names a lot better, I
		 want to make sure I'm not running into surprises.  */
	      gdb_assert (*next == '\0');
a472 1
#if 0	  
d484 5
a488 1
#endif
@


1.20.2.13
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d34 1
a34 1
#include "symfile.h"
d94 1
a94 1
struct deprecated_complaint block_end_complaint =
d97 1
a97 1
struct deprecated_complaint anon_block_end_complaint =
d100 1
a100 1
struct deprecated_complaint innerblock_complaint =
d103 1
a103 1
struct deprecated_complaint innerblock_anon_complaint =
d106 1
a106 1
struct deprecated_complaint blockvector_complaint =
d984 1
a984 1
	  static struct deprecated_complaint msg =
@


1.20.2.14
log
@2002-11-19  David Carlton  <carlton@@math.stanford.edu>

	* block.c: Whitespace cleanup.
	* buildsym.c (finish_block): Delete #if'd out code.
	* symtab.c (lookup_symbol_namespace): Add comment.
	* dwarf2read.c (scan_partial_symbols): Fix typo.

2002-11-19  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Delete FIXME comment.
	Fill in PR's for setup_kfail's.
	Fiddle with comments at top of file.
@
text
@d481 14
@


1.20.2.15
log
@2002-11-21  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c (get_namespace_objfile): Set
	namespace_objfile->name.
	* dwarf2read.c (scan_partial_symbols): Allow empty pdi.name if
	we're reading a namespace.
	* Makefile.in (dwarf2read.o): Depend on cp_support_h.
	* dwarf2read.c (scan_partial_symbols): Add 'namespace' arg.
	(dwarf2_build_psymtabs_hard): Update call to
	scan_partial_symbols.
	(add_partial_namespace): New function.
	(scan_partial_symbols): Call add_partial_namespace.
	#include "cp-support.h"
	* cp-support.c: Add me to contributors.
	* cp-support.h: Ditto.
	* buildsym.c (scan_for_anonymous_namespaces): Convert for loop
	into a clearer while loop.
	(finish_block): Ditto.
@
text
@d182 1
a182 2
  const char *beginning = name;
  const char *end = cp_find_first_component (beginning);
d184 4
a187 1
  while (*end == ':')
d192 7
a198 12
	{
	  /* We've found a component of the name that's an anonymous
	     namespace.  So add symbols in it to the namespace given
	     by the previous component if there is one, or to the
	     global namespace if there isn't.  */
	  add_using_directive (name,
			       beginning == name ? 0 : beginning - name - 2,
			       end - name);
	}
      /* The "+ 2" is for the "::".  */
       beginning = end + 2;
       end = cp_find_first_component (beginning);
d461 7
a467 9

	      current = name;
	      next = cp_find_first_component (current);
	      while (*next == ':')
		{
		  current = next;
		  /* The '+ 2' is to skip the '::'.  */
		  next = cp_find_first_component (current + 2);
		}
@


1.20.2.16
log
@2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (add_partial_enumeration): New function.
	(scan_partial_symbols): Call add_partial_enumeration.
	(locate_pdi_sibling): New function.
	(scan_partial_symbols): Call locate_pdi_sibling.  Get rid of
	nesting_level.
	(pdi_needs_namespace): New function.
	(add_partial_symbol): Add 'namespace' arg; calculate full name
	when appropriate.
	(scan_partial_symbols): Update calls to add_partial_symbol.
	(add_partial_enumeration): Ditto.
	(read_enumeration): Add processing_current_prefix to name when
	appropriate.
	(new_symbol): Set names of enumerators and typedefs appropriately
	if processing_has_namespace_info.
	* symtab.c (lookup_symbol_namespace): Rename 'namespace' argument
	to 'namespace_name'.
	* symtab.h: Ditto.
	* symtab.c (lookup_symbol_namespace): Delete FIXME comments; add a
	new one.
	(lookup_symbol_aux_file): New function.
	(lookup_symbol_aux): Delete FIXME comment.
	(lookup_symbol_aux): Don't search static block explicitly; delete
	FIXME comments.
	* valops.c (value_namespace_elt): Update call to
	lookup_symbol_namespace.
	* symtab.h: Update declaration for lookup_symbol_namespace.
	* symtab.c (lookup_symbol_namespace): Delete 'using' argument and
	add 'block' argument; get using directives via iterators.
	(lookup_symbol_aux_using_loop): Delete 'using' argument and add
	'block' argument.
	(lookup_symbol_aux_using): Don't calculate using directives.
	* block.c (block_using_iterator_first): New function.
	(block_using_iterator_next): Ditto.
	* block.h: Add comment.
	(struct block_using_iterator): New struct.
	Declare block_using_iterator_first, block_using_iterator_next.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (read_structure_scope): Set type name and
	processing_current_prefix appropriately.
	(new_symbol): Make sure that, in symbols associated to class
	types, the name includes appropriate namespaces.
	* buildsym.h: Rename processing_current_namespace to
	processing_current_prefix.
	* buildsym.c (finish_block): Ditto.
	* dwarf2read.c (psymtab_to_symtab_1): Ditto.
	(read_namespace): Ditto.  Also rename previous_namespace to
	previous_prefix.

	Now come a thousand and one const correctness fixes:
	* p-typeprint.c (pascal_print_type): Const.
	(pascal_type_print_method_args): Const.
	* p-lang.h: Const.
	* m2-typeprint.c (m2_print_type): Const.
	* valops.c (hand_function_call): Const.
	* jv-lang.c (java_primitive_type_from_name): Const.
	* jv-lang.h: Const.
	* jv-typeprint.c (java_print_type): Const.
	* language.c: (unk_lang_print_type): Const.
	* stack.c (frame_info): Const.
	* linespec.c (find_methods): Const.
	(find_method_name): Const
	* f-lang.h: Const.
	* f-typeprint.c (f_print_type): Const.
	* c-typeprint.c (c_print_type): Const.
	* c-lang.h: Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (lookup_primitive_typename): Const.
	* stack.c (print_frame): Const.
	(func_command): Delete pointless cast.
	* linespec.c (find_method_name): Const.
	* language.h: Const.
	* symfile.c (compare_psymbols): Const.
	* symtab.c (completion_list_add_name): Const.
	* breakpoint.c (break_at_finish_at_depth_command_1): Remove
	useless cast.
	(break_at_finish_command_1): Ditto.
	* typeprint.c (type_print): Const.
	* symtab.h: Const.
	* symtab.c (gdb_mangle_name): Const.
	(symbol_init_demangled_name): Const.
	(symbol_demangled_name): Const.
	* defs.h: Const.
	* printcmd.c (build_address_symbolic): Const.
	* valops.c (search_struct_method): Const.
	* cp-valprint.c (cp_is_vtbl_ptr_type): Const.
	(cp_print_value): Const.
	(cp_print_class_member): Const.
	* c-typeprint.c (cp_type_print_derivation_info): Const.
	(c_type_print_varspec_prefix): Const.
	(c_type_print_base): Const.
	* p-valprint.c (pascal_object_is_vtbl_ptr_type): Const.
	(pascal_object_print_value): Const.
	(pascal_object_print_class_member): Const.
	* p-typeprint.c (pascal_type_print_derivation_info): Const.
	(pascal_type_print_varspec_prefix): Const.
	(pascal_type_print_base): Const.
	* jv-typeprint.c (java_type_print_base): Const.
	* jv-lang.h (java_demangle_type_signature): Const.
	* jv-lang.c (java_demangle_type_signature): Const.
	(java_demangled_signature_length): Const.
	(java_demangled_signature_copy): Const.
	* jv-typeprint.c (java_type_print_derivation_info): Const.
	* jv-valprint.c (java_value_print): Const.
	(java_print_value_fields): Const.
	* jv-lang.c (is_object_type): Const.
	(evaluate_subexp_java): Const.
	* stabsread.c (read_cpp_abbrev): Const.
	(complain_about_struct_wipeout): Const.
	(cleanup_undefined_types): Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (add_name): Second arg const.
	(lookup_typename): Const.
	(lookup_unsigned_typename): Const.
	(lookup_signed_typename): Const.
	* linespec.c (find_methods): const char *class_name.
	* symtab.c (gdb_mangle_name): const char *newname.
	* valops.c (destructor_name_p): const char *dname.
	(search_struct_field): First arg const.
	* gdbtypes.c (check_typedef): const char *name (multiple places).
	(cfront_mangle_name): const char *newname.
	* gdbtypes.c (add_mangled_type): const char *tname.
	* valops.c (find_overload_match): const char *obj_type_name.
	* utils.c (gdb_print_host_address): Make first arg const.
	* defs.h: Declare first arg of gdb_print_host_address to be
	const.
	* valarith.c (find_size_for_pointer_math): const char *name.

2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc (main): Add marker comment.
	* gdb.c++/m-data.exp: Use marker comment instead of line numbers.
	* gdb.c++/m-data.cc: Delete superfluous namespace.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/m-static1.cc: Ditto.
	* carlton_runtest: Compare based on gdb.sum, not based on output.
	* carlton_runnamespace: Ditto.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Put tests for CClass.
	* gdb.c++/namespace.cc (C): Add CClass.
@
text
@d455 1
a455 1
	    block_set_scope (block, processing_current_prefix,
@


1.20.2.17
log
@2002-12-20  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_minsyms): Don't call
	lookup_symbol_aux from within this.
	* values.c (value_static_field): lookup_symbol_linkage.
	(value_fn_field): lookup_symbol_linkage.
	* valops.c (value_struct_elt_for_reference): lookup_symbol_linkage.
	* blockframe.c (inside_main_func): lookup_symbol_linkage.
	* source.c (select_source_symtab): lookup_symbol_linkage.
	* nlmread.c (nlm_symfile_read): Call lookup_symbol_linkage.
	* nindy-tdep.c (nindy_frame_chain_valid): Call
	lookup_symbol_linkage.
	* linespec.c (count_methods): Call lookup_symbol_linkage.
	(add_matching_methods): Ditto.
	(add_constructors): Ditto.
	* hppa-tdep.c (find_stub_with_shl_get): Call
	lookup_symbol_linkage.  Delete symbol2.
	(initialize_hp_cxx_exception_support): Call lookup_symbol_linkage.
	* cli/cli-cmds.c (edit_command): SYMBOL_PRINT_NAME.
	(list_command): SYMBOL_PRINT_NAME.
	* valops.c (value_of_variable): SYMBOL_PRINT_NAME
	(hand_function_call): SYMBOL_PRINT_NAME.
	* typeprint.c (typedef_print): SYMBOL_PRINT_NAME.
	* tracepoint.c (tracepoints_info): SYMBOL_PRINT_NAME.
	* symtab.c (lookup_partial_symbol): SYMBOL_BEST_NAME.
	(compare_search_syms): SYMBOL_BEST_NAME.
	(print_symbol_info): SYMBOL_PRINT_NAME.
	(print_msymbol_info): SYMBOL_PRINT_NAME.
	(rbreak_command): SYMBOL_PRINT_NAME.
	* symmisc.c (print_symbol): SYMBOL_PRINT_NAME.
	* stack.c (print_frame): SYMBOL_PRINT_NAME.
	(frame_info): SYMBOL_PRINT_NAME.
	(print_block_frame_locals): SYMBOL_PRINT_NAME.
	(print_block_frame_labels): SYMBOL_PRINT_NAME.
	(print_frame_arg_vars): SYMBOL_PRINT_NAME.
	(return_command): SYMBOL_PRINT_NAME.
	* stabsread.c (define_symbol): SYMBOL_PRINT_NAME.
	* p-valprint.c (pascal_val_print): SYMBOL_PRINT_NAME.
	* printcmd.c (build_address_symbolic): SYMBOL_PRINT_NAME.
	(sym_info): SYMBOL_PRINT_NAME.
	(print_frame_args): SYMBOL_PRINT_NAME.
	* objc-lang.c (compare_selectors): SYMBOL_BEST_NAME.
	(compare_classes): SYMBOL_BEST_NAME.
	* maint.c (maintenance_translate_address): SYMBOL_PRINT_NAME.
	* linespec.c (find_method): SYMBOL_PRINT_NAME.
	(select_symbols): SYMBOL_PRINT_NAME.
	* infcmd.c (jump_command): SYMBOL_PRINT_NAME.
	* findvar.c (locate_var_value): SYMBOL_PRINT_NAME.
	* expprint.c (print_subexp): SYMBOL_PRINT_NAME.
	* c-valprint.c (c_val_print): SYMBOL_PRINT_NAME.
	* buildsym.c (finish_block): SYMBOL_PRINT_NAME.
	* breakpoint.c (print_one_breakpoint): SYMBOL_PRINT_NAME.
	* ax-gdb.c (gen_var_ref): SYMBOL_PRINT_NAME.
	* ada-typeprint.c (ada_typedef_print): SYMBOL_PRINT_NAME.
	* ada-lang.c (user_select_syms): Use SYMBOL_PRINT_NAME instead of
	SYMBOL_SOURCE_NAME.
	(user_select_syms):
	(ada_finish_decode_line_1): Use SYMBOL_BEST_NAME instead of
	SYMBOL_SOURCE_NAME.
	* symtab.h (SYMBOL_PRINT_NAME): Rename from SYMBOL_SOURCE_NAME.
	* symfile.c (compare_symbols): Use SYMBOL_BEST_NAME, not
	SYMBOL_SOURCE_NAME.
	(compare_psymbols): Ditto.
	* symtab.c (lookup_symbol_linkage): New function.
	* symtab.h: Declare lookup_symbol_linkage.
	* c-valprint.c (c_val_print): Call lookup_symbol_minsym.
	* symtab.c (lookup_symbol_aux_minsyms): Call minsym_static.
	* minsyms.c (minsym_static): New function.
	* symtab.h: Declare minsym_static.
	* symtab.c (lookup_symbol_minsym): New function.
	(search_symbols): Call lookup_symbol_minsym instead of
	lookup_symbol.
	(lookup_symbol_namespace): Don't take apart NAME.
	* symtab.h: Declare lookup_symbol_minsym.
	* printcmd.c (build_address_symbolic): Don't use old version of
	SYMBOL_LINKAGE_NAME.
	* symtab.c (lookup_block_symbol): Change mangled names to linkage
	name, and use SYMBOL_LINKAGE_NAME as appropriate.
	* symtab.h (SYMBOL_LINKAGE_NAME): New macro, with a different
	meaning from the old macro of the same name.  Also, add comments
	about proper uses of names.
@
text
@d511 1
a511 1
	  complain (&block_end_complaint, SYMBOL_PRINT_NAME (symbol));
d542 1
a542 1
			    SYMBOL_PRINT_NAME (symbol));
@


1.20.2.18
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@a36 1
#include "gdb_assert.h"
d92 17
d511 1
a511 3
	  complaint (&symfile_complaints,
		     "block end address less than block start address in %s (patched it)",
		     SYMBOL_PRINT_NAME (symbol));
d515 1
a515 3
	  complaint (&symfile_complaints,
		     "block end address 0x%s less than block start address 0x%s (patched it)",
		     paddr_nz (BLOCK_END (block)), paddr_nz (BLOCK_START (block)));
d541 2
a542 3
		  complaint (&symfile_complaints,
			     "inner block not inside outer block in %s",
			     SYMBOL_PRINT_NAME (symbol));
d546 3
a548 6
		  complaint (&symfile_complaints,
			     "inner block (0x%s-0x%s) not inside outer block (0x%s-0x%s)",
			     paddr_nz (BLOCK_START (pblock->block)),
			     paddr_nz (BLOCK_END (pblock->block)),
			     paddr_nz (BLOCK_START (block)),
			     paddr_nz (BLOCK_END (block)));
d653 2
a654 2
	      complaint (&symfile_complaints, "block at %s out of order",
			 local_hex_string ((LONGEST) start));
d975 3
a977 2
	  complaint (&symfile_complaints,
	             "Context stack not empty in end_symtab");
a1239 11

/* Pop a context block.  Returns the address of the context block just
   popped. */

struct context_stack *
pop_context (void)
{
  gdb_assert (context_stack_depth > 0);
  return (&context_stack[--context_stack_depth]);
}

@


1.20.2.19
log
@2003-01-06  David Carlton  <carlton@@math.stanford.edu>

	* config/djgpp/fnchange.lst: Mention
	testsuite/gdb.c++/namespace1.cc.
	* cp-support.h: Declare cp_lookup_namespace_symbol.
	* cp-support.c (cp_lookup_namespace_symbol): New function.
	(cp_check_namespace_symbol): Call cp_lookup_namespace_symbol.
	(cp_lookup_possible_namespace_symbol): Update comment.
	* symtab.c (lookup_symbol_aux_file): Add 'anonymous_namespace'
	argument.
	(lookup_symbol_namespace): Call lookup_symbol_aux_file with new
	argument.
	* cp-support.h: Declare cp_is_anonymous.
	* cp-support.c (cp_is_anonymous): New function.
	* buildsym.c (add_symbol_to_list): Don't test for anonymous
	namespace mention here.
	(scan_for_anonymous_namespaces): Test for it here, instead.
	* symtab.c (lookup_symbol_aux_minsyms): Delete.
	(lookup_symbol_aux_nonlocal): Don't call
	lookup_symbol_aux_minsyms.

2003-01-06  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Test anonymous namespaces and multiple
	files.
	* gdb.c++/namespace1.cc: Add anonymous namespaces.
@
text
@d149 3
a151 1
       && SYMBOL_CPLUS_DEMANGLED_NAME (symbol) != NULL)
d166 2
a167 11
  const char *beginning;
  const char *end;

  /* Start with a quick-and-dirty check for mention of "(anonymous
     namespace)".  */

  if (!cp_is_anonymous (name, -1))
    return;

  beginning = name;
  end = cp_find_first_component (beginning);	 
@


1.20.2.20
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d3 1
a3 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
d255 1
a255 1
really_free_pendings (void *dummy)
d591 4
d724 6
a729 8
#if 0 /* OBSOLETE CFront */
// OBSOLETE   /* cfront output is a C program, so in most ways it looks like a C
// OBSOLETE      program.  But to demangle we need to set the language to C++.  We
// OBSOLETE      can distinguish cfront code by the fact that it has #line
// OBSOLETE      directives which specify a file name ending in .C. */
#endif /* OBSOLETE CFront */
     
  /* If the filename of this subfile ends in .C, then change the
d731 2
a732 2
     any other C++ suffixes accepted by deduce_language_from_filename.  */
  /* OBSOLETE     (in particular, some people use .cxx with cfront).  */
@


1.20.2.21
log
@2003-02-12  David Carlton  <carlton@@math.stanford.edu>

	* linespec.c (examine_compound_token): Call decode_namespace.
	(decode_namespace): New function.
	* cp-support.c (cp_find_first_component): Return the offset, not a
	pointer.
	(check_possible_namespace_symbols_loop): Update call to
	cp_find_first_component.
	(cp_check_possible_namespace_symbols): Ditto.
	(cp_func_name): Ditto.
	* buildsym.c (scan_for_anonymous_namespaces): Ditto.
	(finish_block): Ditto.
	* linespec.c (examine_compound_token): Ditto.
	* symtab.c (lookup_symbol_aux_using_loop): Ditto.
	* valops.c (find_oload_champ_namespace_loop): Ditto.
	* cp-support.h: Declare cp_find_first_component to return an int.
	* Makefile.in (linespec.o): cp_support_h.
	* linespec.c (symtab_from_filename): Rename from handle_filename.
	(decode_line_1): Call symtab_from_filename instead of
	handle_filename.
	(locate_compound_sym): Rename from locate_class_sym.  Search in
	such a way that we find namespace symbols, too.
	(examine_compound_token): Call locate_class_sym instead of
	locate_compound_sym.
	(locate_compound_sym): Add NAMESPACE arg.
	(examine_compound_token): New arg to locate_compound_sym.
	Handle TYPE_CODE_NAMESPACE.
	#include "cp-support.hp"
@
text
@d165 2
a166 3
  int old_index;
  int new_index;
  const char *len;
d174 2
a175 2
  old_index = 0;
  new_index = cp_find_first_component (name + old_index);
d177 1
a177 1
  while (name[new_index] == ':')
d179 2
a180 2
      if ((new_index - old_index) == ANONYMOUS_NAMESPACE_LEN
	  && strncmp (name + old_index, "(anonymous namespace)",
d188 2
a189 2
			       old_index == 0 ? 0 : old_index - 2,
			       new_index);
d192 2
a193 2
      old_index = new_index + 2;
      new_index = old_index + cp_find_first_component (name + old_index);
d458 1
a458 1
	      next = current + cp_find_first_component (current);
d463 1
a463 2
		  next = current + 2;
		  next += cp_find_first_component (next);
@


1.20.2.22
log
@2003-02-21  David Carlton  <carlton@@math.stanford.edu>

	* linespec.c (locate_compound_sym): Update call to
	lookup_symbol_namespace.
	* symtab.c (make_symbol_overload_list): Delete namespace_len
	argument.
	* symtab.h: Update declaration for make_symbol_overload_list.
	* valops.c (find_oload_champ_namespace_loop): New format for
	make_symbol_overload_list.
	* symtab.c (lookup_symbol_namespace): Delete namespace_len
	argument.
	(lookup_symbol_aux_using_loop): Update call to
	lookup_symbol_namespace.
	(make_symbol_overload_list_using): Delete namespace_len argument.
	* linespec.c (decode_namespace): Update call to
	lookup_symbol_namespace.
	* valops.c (value_namespace_elt): Ditto.
	* symtab.c (lookup_nested_type): Ditto.
	* symtab.h: Update declaration for lookup_symbol_namespace.
	* block.c (block_all_usings): Delete.
	(block_using): Make static.
	(block_using_iterator_next): New using_direct format.
	(block_using_iterator_first): Ditto.
	* buildsym.c (scan_for_anonymous_namespaces): Rename variables.
	(add_using_directive): New using functions.
	(end_symtab): Use cp_copy_usings.
	(copy_usings_to_obstack): Delete.
	* block.c: Tweak initial comment.
	(struct namespace_info): Move here.
	(block_initialize_namespace): Set scope to NULL!
	* block.h: Add compilation guards.
	Reorder and update declarations.
	* cp-support.c (cp_find_first_component): Return unsigned int.
	(cp_entire_prefix_len): New.
	(cp_add_using_obstack): Delete.
	(cp_add_using_xmalloc): Delete.
	(cp_copy_usings): Rewrite.
	(cp_free_usings): Delete.
	(cp_add_using): New.
	(cp_is_anonymous): Delete second argument.
	(xstrndup): New.
	* cp-support.h: Add compilation guards.
	Update declarations.
	* coffread.c: New variable coff_source_file.
	(coff_start_symtab): Use coff_source_file.
	(complete_symtab): Ditto.
	(coff_end_symtab): Ditto.
	(coff_symtab_read): Ditto.
	* dbxread.c (find_stab_function_addr): Const fix.
	* buildsym.h: Const fix.
	* buildsym.c (start_symtab): Const fix.
	(start_subfile): Ditto.
	* cp-support.c (cp_add_using_xmalloc): Copy name.
	* dwarf2read.c (read_namespace): Loop through extensions
	correctly.
	(read_file_scope): Const fix.
	(dwarf2_add_field): Ditto.
	(read_structure_scope): Ditto.
	(read_enumeration): Ditto.
	(read_typedef): Ditto.
	* buildsym.c (finish_block): Update comments and simplify code
	when setting scope.
	* buildsym.h: Add opaque declaration of 'struct block'.
	Change comment before processing_current_prefix.
	* arm-tdep.c (arm_gdbarch_init): Add break; after default:.
@
text
@d34 1
a46 1
#include "block.h"
d72 1
a72 1
static struct using_direct *using_list;
d78 6
d165 2
a166 2
  unsigned int previous_component;
  unsigned int next_component;
d172 1
a172 1
  if (!cp_is_anonymous (name))
d175 2
a176 2
  previous_component = 0;
  next_component = cp_find_first_component (name + previous_component);
d178 1
a178 1
  while (name[next_component] == ':')
d180 2
a181 3
      if ((next_component - previous_component) == ANONYMOUS_NAMESPACE_LEN
	  && strncmp (name + previous_component,
		      "(anonymous namespace)",
d189 2
a190 3
			       previous_component == 0
			       ? 0 : previous_component - 2,
			       next_component);
d193 2
a194 3
      previous_component = next_component + 2;
      next_component = (previous_component
			+ cp_find_first_component (name + previous_component));
d223 2
a224 2
/* Add a using directive to using_list.  NAME is the start of a string
   that should contain the namespaces we want to add as initial
d234 5
a238 2
  struct using_direct *current;
  struct using_direct *new_node;
d242 5
a246 7
  for (current = using_list; current != NULL; current = current->next)
    {
      if ((strncmp (current->inner, name, inner_length) == 0)
	  && (strlen (current->inner) == inner_length)
	  && (strlen (current->outer) == outer_length))
	return;
    }
d248 2
a249 2
  using_list = cp_add_using (name, inner_length, outer_length,
			     using_list);
d436 5
a440 4
      /* If we're in the C++ case, record the namespace that the
	 function was defined in.  Make sure that the name was
	 originally mangled: if not, there certainly isn't any
	 namespace information to worry about!  */
d444 3
d448 2
a449 7
	    {
	      block_set_scope
		(block, obsavestring (processing_current_prefix,
				      strlen (processing_current_prefix),
				      &objfile->symbol_obstack),
		 &objfile->symbol_obstack);
	    }
d452 1
a452 2
	      /* Try to figure out the appropriate namespace from the
		 demangled name.  */
d454 25
a478 12
	      /* FIXME: carlton/2003-02-21: If the function in
		 question is a method of a class, the name will
		 actually include the name of the class as well.  This
		 should be harmless, but is a little unfortunate.  */

	      const char *name = SYMBOL_CPLUS_DEMANGLED_NAME (symbol);
	      unsigned int prefix_len = cp_entire_prefix_len (name);

	      block_set_scope (block,
			       obsavestring (name, prefix_len,
					     &objfile->symbol_obstack),
			       &objfile->symbol_obstack);
d667 1
a667 1
start_subfile (const char *name, char *dirname)
d902 1
a902 1
start_symtab (const char *name, char *dirname, CORE_ADDR start_addr)
d1048 2
a1049 2
			   cp_copy_usings (using_list,
					   &objfile->symbol_obstack),
d1181 26
@


1.20.2.23
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d208 1
a208 1
	  pp = DEPRECATED_SYMBOL_NAME (list->symbol[j]);
a368 1
		case LOC_COMPUTED_ARG:
a383 1
		case LOC_COMPUTED:
a407 1
		    case LOC_COMPUTED_ARG:
a424 1
		    case LOC_COMPUTED:
@


1.20.2.24
log
@2003-03-10  David Carlton  <carlton@@math.stanford.edu>

	* buildsym.c (scan_for_anonymous_namespaces): Allow
	"{anonymous}".
	* cp-support.c (cp_is_anonymous): Scan for "{anonymous}".
@
text
@d151 4
a161 2
  const char *anonymous_name;
  int anonymous_len;
d163 2
a164 19
  /* Start with a quick-and-dirty check for mentions of anonymous
     namespaces.  */

  switch (cp_is_anonymous (name))
    {
    case 1:
      anonymous_name = "(anonymous namespace)";
      break;
    case 2:
      /* FIXME: carlton/2003-03-10: This corresponds to GCCv2, and
	 urrently, the demangler actually can't demangle all anonymous
	 namespace mentions correctly.  (See PR gdb/1134.) Given
	 GCCv2's lack of namespace support, I'm tempted to skip this
	 case entirely.  */
      anonymous_name = "{anonymous}";
      break;
    default:
      return;
    }
d166 2
a167 1
  anonymous_len = strlen (anonymous_name);
d174 4
a177 4
      if ((next_component - previous_component) == anonymous_len
	  && (strncmp (name + previous_component, anonymous_name,
		       anonymous_len)
	      == 0))
@


1.20.2.25
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d47 2
a49 2
#include "dictionary.h"

d69 5
d76 2
d142 65
a206 2
  if (SYMBOL_LANGUAGE (symbol) == language_cplus)
    cp_scan_for_anonymous_namespaces (symbol);
d234 28
d450 6
a455 2
      /* If we're in the C++ case, set the block's scope.  */
      if (SYMBOL_LANGUAGE (symbol) == language_cplus)
d457 26
a482 1
	  cp_set_block_scope (symbol, block, &objfile->symbol_obstack);
d914 2
a926 4
  /* Set up support for C++ namespace support, in case we need it.  */

  cp_initialize_namespace ();

d1048 8
a1055 2
      cp_finalize_namespace (BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK),
			     &objfile->symbol_obstack);
@


1.20.2.26
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d312 4
a315 2
	      iparams = 0;
	      ALL_BLOCK_SYMBOLS (block, iter, sym)
d317 1
a317 3
		  if (iparams == nparams)
		    break;

a440 1

@


1.20.2.27
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d87 1
a87 1
  struct pending *link = list;
d105 1
a105 1
  struct pending *link;
d229 3
a231 3
  struct pending *next, *next1;
  struct block *block;
  struct pending_block *pblock;
d234 1
a234 1
  block = allocate_block (&objfile->symbol_obstack);
d238 2
d245 2
d454 1
a454 1
  struct pending_block *pblock;
d474 3
a476 3
  struct pending_block *next;
  struct blockvector *blockvector;
  int i;
d546 1
a546 1
  struct subfile *subfile;
d684 1
a684 1
  struct subfile_stack *tem
d699 2
a700 2
  char *name;
  struct subfile_stack *link = subfile_stack;
d716 1
a716 1
record_line (struct subfile *subfile, int line, CORE_ADDR pc)
d831 4
a834 4
  struct symtab *symtab = NULL;
  struct blockvector *blockvector;
  struct subfile *subfile;
  struct context_stack *cstk;
d1063 1
a1063 1
  struct context_stack *new;
d1125 1
a1125 1
  int i;
@


1.20.2.28
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d167 1
d596 7
d606 1
@


1.19
log
@2002-08-20  Andrew Cagney  <cagney@@redhat.com>
* NEWS: Mention that the Apollo line was made obsolete.
* configure.tgt: Make m68*-apollo*-bsd*, m68*-hp-bsd*, and
m68*-hp-hpux* obsolete.
* configure.host: Make m68*-apollo*-sysv*, m68*-apollo*-bsd*,
m68*-hp-bsd* and m68*-hp-hpux* obsolete.
* buildsym.c (make_blockvector): Make static.
* buildsym.h (make_blockvector): Make extern declaration obsolete.
* Makefile.in (HFILES_NO_SRCDIR): Remove dst.h
(ALLDEPFILES): Remove dstread.c.
(dstread.o): Obsolete make rule.
* dstread.c: Makefile obsolete.
* dst.h: Ditto.
* config/m68k/hp300hpux.mt: Ditto.
* config/m68k/hp300hpux.mh: Ditto.
* config/m68k/hp300bsd.mt: Ditto.
* config/m68k/hp300bsd.mh: Ditto.
* config/m68k/apollo68b.mt: Ditto.
* config/m68k/apollo68v.mh: Ditto.
* config/m68k/apollo68b.mh: Ditto.
@
text
@d425 3
a427 1
  for (pblock = pending_blocks; pblock != old_blocks; pblock = pblock->next)
@


1.18
log
@2002-07-29  Andrew Cagney  <ac131313@@redhat.com>

* gdb_obstack.h: New file.
* symtab.h: Include "gdb_obstack.h" instead of "obstack.h".
(obstack_chunk_alloc, obstack_chunk_free): Delete macros.
* objfiles.h: Include "gdb_obstack.h".
* Makefile.in (gdb_obstack_h): Define.
(symtab_h): Add $(gdb_obstack_h).
(objfiles_h): Add $(gdb_obstack_h).

* objfiles.c: Include "gdb_obstack.h" instead of "obstack.h".
* macrotab.c, cp-valprint.c, dbxread.c: Ditto.
* ch-typeprint.c, ch-valprint.c, dstread.c: Ditto.
* macroexp.c, p-typeprint.c, stabsread.c: Ditto.
* symtab.c, f-typeprint.c, mdebugread.c: Ditto.
* p-valprint.c, symmisc.c, typeprint.c: Ditto.
* symfile.c, coffread.c, c-typeprint.c: Ditto.
* buildsym.c, bcache.c, ada-typeprint.c: Ditto.

* Makefile.in (bcache.o): Update dependencies.
(buildsym.o, c-typeprint.o, ch-typeprint.o): Ditto.
(ch-valprint.o, coffread.o, cp-valprint.o): Ditto.
(dbxread.o, dstread.o, f-typeprint.o): Ditto.
(objfiles.o, p-typeprint.o, p-valprint.o): Ditto.
(stabsread.o, symfile.o, symmisc.o): Ditto.
(symtab.o, typeprint.o, macroexp.o): Ditto.
(macrotab.o, mdebugread.o): Ditto.
(f_lang_h, coff_sym_h, coff_symconst_h): Define.
(coff_ecoff_h, aout_aout64_h): Define.
(aout_stabs_gnu_h, libaout_h): Define.
@
text
@d489 3
a491 3
/* Note that this is only used in this file and in dstread.c, which
   should be fixed to not need direct access to this function.  When
   that is done, it can be made static again. */
d493 1
a493 1
struct blockvector *
@


1.17
log
@2002-07-11  Daniel Jacobowitz  <drow@@mvista.com>

	Based on patch from Daniel Berlin <dberlin@@dberlin.org>.
	* buildsym.c: Include "demangle.h" for SYMBOL_INIT_DEMANGLED_NAME.
	(finish_block) For non-function blocks, hash the symbol table.  For
	function blocks, mark the symbol table as unhashed.
	* minsyms.c (msymbol_hash): Return hash value without taking modulus.
	(msymbol_hash_iw): Likewise.
	(add_minsym_to_hash_table): Take modulus of msymbol_hash's return
	value.
	(add_minsym_to_demangled_hash_table): Likewise for msymbol_hash_iw.
	(lookup_minimal_symbol): Likewise for both.
	* symtab.h (struct block): Add `hashtable' flag.  Comment the
	hashtable.
	(BLOCK_HASHTABLE, BLOCK_BUCKETS, BLOCK_BUCKET): New macro.
	(ALL_BLOCK_SYMBOLS): Update.
	(BLOCK_SHOULD_SORT): Do not sort hashed blocks.
	(struct symbol): Add `hash_next' pointer.
	* symtab.c (lookup_block_symbol): Search using the hash table when
	possible.
	(find_pc_sect_symtab): Use ALL_BLOCK_SYMBOLS.
	(search_symbols, find_addr_symbol): Likewise.

	* dstread.c (process_dst_block): Clear hashtable bit for new block.
	(read_dst_symtab): Likewise.
	* jv-lang.c (get_java_class_symtab): Likewise.
	* mdebugread.c: Include "gdb_assert.h".
	(shrink_block): Assert that the block being modified is not hashed.
	* coffread.c (patch_opaque_types): Use ALL_BLOCK_SYMBOLS.
	* symmisc.c (free_symtab_block): Walk the hash table when freeing
	symbols.
	(dump_symtab): Recognize hashed blocks.
	* printcmd.c (print_frame_args):  Assert that function blocks do not
	have hashed symbol tables.
	* ada-lang.c (symtab_for_sym): Use ALL_BLOCK_SYMBOLS.
	(fill_in_ada_prototype, debug_print_block): Likewise.
	(ada_add_block_symbols): Use ALL_BLOCK_SYMBOLS.  Handle hash tables.
@
text
@d31 1
a31 1
#include "obstack.h"
@


1.16
log
@Add macro structures to GDB's symbol tables.  Nobody puts anything
in them yet.
* symtab.h (struct symtab): New member: `macro_table'.
* buildsym.h (pending_macros): New global variable.
* buildsym.c: #include "macrotab.h".
(buildsym_init): Initialize `pending_macros'.
(end_symtab): If we found macro information while reading a CU's
debugging info, do build a symtab structure for it.  Make the
symtab point to the macro information, and clear the
`pending_macros' pointer which held it while we were reading the
debug info.
(really_free_pendings): Free any pending macro table.
* objfiles.h (struct objfile): New member: `macro_cache'.
* objfiles.c (allocate_objfile): Set allocate and free functions
for the macro cache's objstack.
(free_objfile): Empty the macro cache's obstack.
* symfile.c (reread_symbols): Empty the macro cache's obstack, and
set new allocate and free functions for it.
* solib-sunos.c (allocate_rt_common_objfile): Set allocate and
free functions for the macro cache's objstack.  (Why is this
function building its own objfile?)
* symmisc.c (print_objfile_statistics): Print statistics on the
macro bcache.
* Makefile.in: Note that buildsym.o depends on macrotab.h.
@
text
@d43 1
a246 3
  block = (struct block *) obstack_alloc (&objfile->symbol_obstack,
	    (sizeof (struct block) + ((i - 1) * sizeof (struct symbol *))));

d249 14
a262 2
  BLOCK_NSYMS (block) = i;
  for (next = *listhead; next; next = next->next)
d264 12
a275 1
      for (j = next->nsyms - 1; j >= 0; j--)
d277 13
a289 1
	  BLOCK_SYM (block, --i) = next->symbol[j];
d307 1
d389 1
@


1.16.4.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@a42 1
#include "demangle.h"		/* Needed by SYMBOL_INIT_DEMANGLED_NAME.  */
d246 3
d251 2
a252 14
  if (symbol)
    {
      block = (struct block *) 
	obstack_alloc (&objfile->symbol_obstack,
		       (sizeof (struct block) + 
			((i - 1) * sizeof (struct symbol *))));
      BLOCK_NSYMS (block) = i;
      for (next = *listhead; next; next = next->next)
	for (j = next->nsyms - 1; j >= 0; j--)
	  {
	    BLOCK_SYM (block, --i) = next->symbol[j];
	  }
    }
  else
d254 1
a254 12
      int htab_size = BLOCK_HASHTABLE_SIZE (i);

      block = (struct block *) 
	obstack_alloc (&objfile->symbol_obstack,
		       (sizeof (struct block) + 
			((htab_size - 1) * sizeof (struct symbol *))));
      for (j = 0; j < htab_size; j++)
	{
	  BLOCK_BUCKET (block, j) = 0;
	}
      BLOCK_BUCKETS (block) = htab_size;
      for (next = *listhead; next; next = next->next)
d256 1
a256 13
	  for (j = next->nsyms - 1; j >= 0; j--)
	    {
	      struct symbol *sym;
	      unsigned int hash_index;
	      const char *name = SYMBOL_DEMANGLED_NAME (next->symbol[j]);
	      if (name == NULL)
		name = SYMBOL_NAME (next->symbol[j]);
	      hash_index = msymbol_hash_iw (name);
	      hash_index = hash_index % BLOCK_BUCKETS (block);
	      sym = BLOCK_BUCKET (block, hash_index);
	      BLOCK_BUCKET (block, hash_index) = next->symbol[j];
	      next->symbol[j]->hash_next = sym;
	    }
a273 1
      BLOCK_HASHTABLE (block) = 0;
a354 1
      BLOCK_HASHTABLE (block) = 1;
@


1.16.4.2
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d31 1
a31 1
#include "gdb_obstack.h"
@


1.16.4.3
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d489 3
a491 3
/* OBSOLETE Note that this is only used in this file and in dstread.c, which */
/* OBSOLETE should be fixed to not need direct access to this function.  When */
/* OBSOLETE that is done, it can be made static again. */
d493 1
a493 1
static struct blockvector *
@


1.16.4.4
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d425 1
a425 3
  for (pblock = pending_blocks; 
       pblock && pblock != old_blocks; 
       pblock = pblock->next)
@


1.16.4.5
log
@merge from mainline
@
text
@d33 1
a33 1
#include "symfile.h"
d77 1
a77 1
struct deprecated_complaint block_end_complaint =
d80 1
a80 1
struct deprecated_complaint anon_block_end_complaint =
d83 1
a83 1
struct deprecated_complaint innerblock_complaint =
d86 1
a86 1
struct deprecated_complaint innerblock_anon_complaint =
d89 1
a89 1
struct deprecated_complaint blockvector_complaint =
d872 1
a872 1
	  static struct deprecated_complaint msg =
@


1.15
log
@* language.c (local_hex_string_custom): Simplify.  Do not depend
on PRINTF_HAS_LONG_LONG or CC_HAS_LONG_LONG.

* memattr.c (mem_info_command): Replace calls to
longest_local_hex_string and longest_local_hex_string_custom.
* buildsym.c (make_blockvector): Ditto.
* solib.c (info_sharedlibrary_command): Ditto.
* tracepoint.c (tracepoints_info): Ditto.
* symtab.c (print_msymbol_info): Ditto.

* language.c (local_hex_string): Delete.
(local_hex_string_custom): Delete.
(longest_local_hex_string): Rename to local_hex_string.
(longest_local_hex_string_custom): Rename to
local_hex_string_custom.
* language.h (local_hex_string): Change parameter type to LONGEST.
(local_hex_string_custom): Ditto.
(longest_local_hex_string): Delete declaration.
(longest_local_hex_string_custom): Ditto.

* solib.c: Update copyright.
* memattr.c: Update copyright.
@
text
@d42 1
d196 3
d890 2
a891 1
      && have_line_numbers == 0)
d952 1
d1031 1
d1122 1
@


1.14
log
@2002-01-20  Daniel Jacobowitz  <drow@@mvista.com>

	* buildsym.c: Update copyright years.
	* c-typeprint.c: Likewise.
	* dwarf2read.c: Likewise.
	* f-typeprint.c: Likewise.
	* gdbtypes.c: Likewise.
	* gdbtypes.h: Likewise.
	* hp-symtab-read.c: Likewise.
	* hpread.c: Likewise.
	* mdebugread.c: Likewise.
	* p-typeprint.c: Likewise.
@
text
@d39 1
a39 1
#include "language.h"		/* For "longest_local_hex_string_custom" */
d512 1
a512 1
			longest_local_hex_string ((LONGEST) start));
@


1.14.4.1
log
@Add macro structures to GDB's symbol tables.  Nobody puts anything
in them yet.
* symtab.h (struct symtab): New member: `macro_table'.
* buildsym.h (pending_macros): New global variable.
* buildsym.c: #include "macrotab.h".
(buildsym_init): Initialize `pending_macros'.
(end_symtab): If we found macro information while reading a CU's
debugging info, do build a symtab structure for it.  Make the
symtab point to the macro information, and clear the
`pending_macros' pointer which held it while we were reading the
debug info.
(really_free_pendings): Free any pending macro table.
* objfiles.h (struct objfile): New member: `macro_cache'.
* objfiles.c (allocate_objfile): Set allocate and free functions
for the macro cache's objstack.
(free_objfile): Empty the macro cache's obstack.
* symfile.c (reread_symbols): Empty the macro cache's obstack, and
set new allocate and free functions for it.
* solib-sunos.c (allocate_rt_common_objfile): Set allocate and
free functions for the macro cache's objstack.  (Why is this
function building its own objfile?)
* symmisc.c (print_objfile_statistics): Print statistics on the
macro bcache.
* Makefile.in: Note that buildsym.o depends on macrotab.h.
@
text
@a41 1
#include "macrotab.h"
a194 3

  if (pending_macros)
    free_macro_table (pending_macros);
d886 1
a886 2
      && have_line_numbers == 0
      && pending_macros == NULL)
a946 1
          symtab->macro_table = pending_macros;
a1024 1
  pending_macros = NULL;
a1114 1
  pending_macros = NULL;
@


1.13
log
@2002-01-15  Daniel Jacobowitz  <drow@@mvista.com>

	* gdbtypes.h (struct type): Fix whitespace.  Remove obsolete
	comment.  Add ``artificial'' to ``union field_location''.

	* dwarf2read.c: Remove ad-hoc TYPE_FIELD_ARTIFICIAL.

	* buildsym.c (finish_block): Initialize TYPE_FIELD_ARTIFICIAL to 0.
	* mdebugread.c (parse_symbol): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* hp-symtab-read.c (hpread_function_type): Likewise, instead of
	initializing TYPE_FIELD_BITPOS to n (obsolete).
	(hpread_doc_function_type): Likewise.
	* hpread.c (hpread_function_type): Likewise.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
@


1.12
log
@2001-10-12  Daniel Jacobowitz  <drow@@mvista.com>

        * symtab.h (struct block): (ALL_BLOCK_SYMBOLS): New macro.

        * symtab.c (find_pc_sect_symtab): Use ALL_BLOCK_SYMBOLS.
        (make_symbol_completion_list): Likewise.
        (make_symbol_overload_list): Likewise.
        * buildsym.c (finish_block): Likewise.
        * breakpoint.c (get_catch_sals):  Likewise.
        * mdebugread.c (mylookup_symbol): Likewise.
        * objfiles.c (objfile_relocate): Likewise.
        * printcmd.c (print_frame_args): Likewise.
        * stack.c (print_block_frame_locals): Likewise.
        (print_block_frame_labels): Likewise.
        (print_frame_arg_vars): Likewise.
        * symmisc.c (dump_symtab): Likewise.
        * tracepoint.c (add_local_symbols): Likewise.
        (scope_info): Likewise.

2001-10-12  Daniel Jacobowitz  <drow@@mvista.com>

        * mi-cmd-stack.c (list_args_or_locals): Use ALL_BLOCK_SYMBOLS.

2001-10-12  Daniel Jacobowitz  <drow@@mvista.com>

        * generic/gdbtk-cmds.c (gdb_listfuncs): Use ALL_BLOCK_SYMBOLS.
        * generic/gdbtk-stack.c (gdb_block_vars): Likewise.
        (gdb_get_blocks): Likewise.
        (gdb_get_vars_command): Likewise.
5~
@
text
@d325 1
@


1.11
log
@	* buildsym.c (start_subfile): Use FILENAME_CMP instead of STREQ.
	(top-level): #include filenames.h.

	* dwarf2read.c (dwarf2_start_subfile): Use IS_ABSOLUTE_PATH and
	FILENAME_CMP, to DTRT on non-Posix platforms.
	(top-level): #include filenames.h.
@
text
@d278 1
a278 1
	  for (i = 0; i < BLOCK_NSYMS (block); i++)
a279 1
	      sym = BLOCK_SYM (block, i);
@


1.11.2.1
log
@Typesystem work initial import.
Note that this currently isn't building, i'm in the middle of converting make_function_type/lookup_function_type
@
text
@d2 2
a3 1
   Copyright 1986-2000 Free Software Foundation, Inc.
d41 1
a41 1
#include "demangle.h"
a45 1
#include "splay-tree.h"
d47 1
a47 1
static int block_id=0;
a52 1
splay_tree symbolsplay = 0;
d82 1
a82 1
{"inner block (0x%lx-0x%lx) not inside outer block (0x%lx-0x%lx) in %s", 0, 0};
d176 1
a176 1
      free ((void *) next);
d185 1
a185 1
      free ((void *) next);
d192 1
a192 1
      free ((void *) next);
d202 11
d232 1
a232 1
  unsigned int closest_size;
d234 1
d241 7
a247 20
  /* If it's a block representing a function, we can't use a hash
     table, or else the args will get out of order. */
  if (symbol)
    {
      block = (struct block *) obstack_alloc (&objfile->symbol_obstack,
					      (sizeof (struct block) + ((i - 1) * sizeof (struct symbol *))));
      
      /* Copy the symbols into the block.  */
      BLOCK_NSYMS (block) = i;
    }
  /* Otherwise, use a hash table representation */
  else
    {
      block = (struct block *) obstack_alloc (&objfile->symbol_obstack,
					      (sizeof (struct block) + ((((i - 1)/4)+1) * sizeof (struct symbol *))));
      BLOCK_NBUCKETS (block) = (i/4) + 1;
      for (j = 0; j < BLOCK_NBUCKETS (block); j++)
	BLOCK_BUCKET (block, j) = 0;
    }
  BLOCK_ID (block) = block_id++;
d252 1
a252 32
	  splay_tree_node result;
	  struct block_splay_data *temp;
	  const char *symname;
	  SYMBOL_INIT_DEMANGLED_NAME (next->symbol[j], &objfile->symbol_obstack);
	  symname = SYMBOL_SOURCE_NAME (next->symbol[j]);
	  result = splay_tree_lookup (symbolsplay, (splay_tree_key) symname);
	  if (result != NULL)
	    {
	      temp = (struct block_splay_data *)result->value;
	      bitmap_set_bit (temp->blocks, BLOCK_ID (block));
	    }
	  else
	    {
	      temp = xmalloc (sizeof (struct block_splay_data));
	      temp->blocks = BITMAP_XMALLOC();
	      bitmap_set_bit (temp->blocks, BLOCK_ID (block));
	      splay_tree_insert (symbolsplay, (splay_tree_key)symname, (splay_tree_value) temp);
	    }
	  if (symbol) 
	    {
	      BLOCK_SYM (block, --i) = next->symbol[j];
	    }
	  else
	    {
	      unsigned int hashval;
	      hashval = msymbol_hash_iw (symname) % BLOCK_NBUCKETS (block);
	      if (BLOCK_BUCKET (block, hashval) != NULL)
		{
		  next->symbol[j]->hash_next = BLOCK_BUCKET (block, hashval);
		}
	      BLOCK_BUCKET (block, hashval) = next->symbol[j];
	    }
d255 1
a255 1
  
a257 1

d375 1
a375 4
	  /* FIXME 32x64 */
	  complain (&anon_block_end_complaint,
		    (unsigned long) BLOCK_END (block),
		    (unsigned long) BLOCK_START (block));
a398 1
		  /* FIXME 32x64 */
a399 4
			    (unsigned long) BLOCK_START (pblock->block),
			    (unsigned long) BLOCK_END (pblock->block),
			    (unsigned long) BLOCK_START (block),
			    (unsigned long) BLOCK_END (block),
d404 3
a406 6
		  /* FIXME 32x64 */
		  complain (&innerblock_anon_complaint,
			    (unsigned long) BLOCK_START (pblock->block),
			    (unsigned long) BLOCK_END (pblock->block),
			    (unsigned long) BLOCK_START (block),
			    (unsigned long) BLOCK_END (block));
d410 1
a410 1
	      if (BLOCK_END (pblock->block) > BLOCK_END (block)) 
a449 25
static int
compare_blocks (const void *v1, const void *v2)
{
  const struct block *const *b1 = v1;
  const struct block *const *b2 = v2;

  if ((*b1)->startaddr < (*b2)->startaddr)
    return -1;
  else if ((*b1)->startaddr > (*b2)->startaddr)
    return 1;
  else if ((*b1)->endaddr < (*b2)->endaddr)
    return 1;
  else if ((*b1)->endaddr > (*b2)->endaddr)
    return -1;
  else
    return 0;
}

static int
compare_names (splay_tree_key v1, splay_tree_key v2)
{
  const char *b1 = (const char *)v1;
  const char *b2 = (const char *)v2;
  return (strcmp (b1, b2));
}
d484 10
d496 6
a501 2
#if 1
  if (objfile->flags & OBJF_REORDERED)
d503 12
a514 5
      if (BLOCKVECTOR_NBLOCKS (blockvector) > 2)
	qsort (&blockvector->block[2],
	       BLOCKVECTOR_NBLOCKS (blockvector) - 2,
	       sizeof (struct block *),
	       compare_blocks);
d536 1
a536 1
      if (STREQ (subfile->name, name))
d672 1
a672 1
      error ("no entry to push onto subfile stack");
d685 1
a685 1
      error ("subfile stack empty");
d689 1
a689 1
  free ((void *) link);
d730 1
a730 1
  e->pc = pc;
a823 1

d838 32
d894 6
a899 3
      /* Define STATIC_BLOCK and GLOBAL_BLOCK and build the blockvector. */
      finish_block (0, &file_symbols, 0, last_source_start_addr, end_addr, objfile);
      finish_block (0, &global_symbols, 0, last_source_start_addr, end_addr, objfile);
d924 8
d998 1
a998 1
	  free ((void *) subfile->name);
d1002 1
a1002 1
	  free ((void *) subfile->dirname);
d1006 1
a1006 1
	  free ((void *) subfile->line_vector);
d1010 1
a1010 1
	  free ((void *) subfile->debugformat);
d1014 1
a1014 1
      free ((void *) subfile);
a1124 8
}

void
_initialize_buildsym (void)
{
  symbolsplay = splay_tree_new (compare_names, 
				NULL, 
				(splay_tree_delete_value_fn)free);
@


1.10
log
@2001-04-06  Fernando Nasser  <fnasser@@redhat.com>

	* buildsym.c (record_line): Turn off unused addr bits.
@
text
@d41 1
d536 1
a536 1
      if (STREQ (subfile->name, name))
@


1.9
log
@Update/correct copyright notices.
@
text
@d729 1
a729 1
  e->pc = pc;
@


1.8
log
@Replace calls to abort() with calls to internal_error().
@
text
@d2 2
a3 1
   Copyright 1986-2000 Free Software Foundation, Inc.
@


1.7
log
@Replace free() with xfree().
@
text
@d670 1
a670 1
      abort ();
d683 1
a683 1
      abort ();
@


1.6
log
@Protoization.
@
text
@d174 1
a174 1
      free ((void *) next);
d183 1
a183 1
      free ((void *) next);
d190 1
a190 1
      free ((void *) next);
d208 1
a208 1
      free ((void *) bnext);
d489 1
a489 1
      free (next);
d687 1
a687 1
  free ((void *) link);
d996 1
a996 1
	  free ((void *) subfile->name);
d1000 1
a1000 1
	  free ((void *) subfile->dirname);
d1004 1
a1004 1
	  free ((void *) subfile->line_vector);
d1008 1
a1008 1
	  free ((void *) subfile->debugformat);
d1012 1
a1012 1
      free ((void *) subfile);
@


1.5
log
@C++ improvements
@
text
@d1107 1
a1107 1
buildsym_init ()
d1120 1
a1120 1
buildsym_new_init ()
@


1.4
log
@Include "expression.h" which "language.h" depends on.
@
text
@d39 1
a39 1

d1058 1
d1064 1
a1064 22
  register char *p = name;
  register int total = p[0];
  register int c;

  c = p[1];
  total += c << 2;
  if (c)
    {
      c = p[2];
      total += c << 4;
      if (c)
	{
	  total += p[3] << 6;
	}
    }

  /* Ensure result is positive.  */
  if (total < 0)
    {
      total += (1000 << 6);
    }
  return (total % HASHSIZE);
@


1.3
log
@Include "language.h" for longest_local_hex_string_custom().
@
text
@d37 1
@


1.2
log
@* buildsym.h (add_free_pendings): Declare.
* buildsym.c (add_free_pendings): New function.
(make_blockvector): 32x64 fix using longest_local_hex_string().
(start_subfile): initialize variable 'subfile'.
@
text
@d37 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1986-1999 Free Software Foundation, Inc.
d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d39 2
a40 1
#define	EXTERN			/**/
d84 1
a84 1
{"block at 0x%lx out of order", 0, 0};
d88 14
d165 1
a165 1
really_free_pendings (int foo)
d239 1
a239 1
    (sizeof (struct block) + ((i - 1) * sizeof (struct symbol *))));
d401 1
a401 1
		     BLOCK_END (pblock->block), BLOCK_START (block),
d504 2
a505 8

	      /* FIXME-32x64: loses if CORE_ADDR doesn't fit in a
	         long.  Possible solutions include a version of
	         complain which takes a callback, a
	         sprintf_address_numeric to match
	         print_address_numeric, or a way to set up a GDB_FILE
	         which causes sprintf rather than fprintf to be
	         called.  */
d508 1
a508 1
			(unsigned long) BLOCK_START (BLOCKVECTOR_BLOCK (blockvector, i)));
d544 1
d583 1
a583 1
  
d709 1
a709 1
		 + subfile->line_vector_length * sizeof (struct linetable_entry));
d869 1
a869 1
  
d935 1
a935 1
		       sizeof (struct linetable_entry), compare_line_numbers);
d982 2
a983 2
				      strlen (subfile->debugformat),
					  &objfile->symbol_obstack);
d1039 1
a1039 1
	      (context_stack_size * sizeof (struct context_stack)));
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d38 1
a38 2
#define	EXTERN
/**/
d223 1
a223 1
	    (sizeof (struct block) + ((i - 1) * sizeof (struct symbol *))));
d385 1
a385 1
			    BLOCK_END (pblock->block), BLOCK_START (block),
d572 1
a572 1

d698 1
a698 1
	   + subfile->line_vector_length * sizeof (struct linetable_entry));
d858 1
a858 1

d924 1
a924 1
		     sizeof (struct linetable_entry), compare_line_numbers);
d971 2
a972 2
					      strlen (subfile->debugformat),
						  &objfile->symbol_obstack);
d1028 1
a1028 1
		  (context_stack_size * sizeof (struct context_stack)));
@


1.1.1.3
log
@import gdb-1999-08-02 snapshot
@
text
@d151 1
a151 1
really_free_pendings (PTR dummy)
@


1.1.1.4
log
@import gdb-2000-02-01 snapshot
@
text
@d2 1
a2 1
   Copyright 1986-2000 Free Software Foundation, Inc.
d495 1
a495 1
	         print_address_numeric, or a way to set up a UI_FILE
@


