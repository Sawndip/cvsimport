head	1.158;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.153
	gdb_7_6-2013-04-26-release:1.153
	gdb_7_6-branch:1.153.0.2
	gdb_7_6-2013-03-12-branchpoint:1.153
	gdb_7_5_1-2012-11-29-release:1.148
	gdb_7_5-2012-08-17-release:1.148
	gdb_7_5-branch:1.148.0.2
	gdb_7_5-2012-07-18-branchpoint:1.148
	gdb_7_4_1-2012-04-26-release:1.143.2.1
	gdb_7_4-2012-01-24-release:1.143.2.1
	gdb_7_4-branch:1.143.0.2
	gdb_7_4-2011-12-13-branchpoint:1.143
	gdb_7_3_1-2011-09-04-release:1.138.2.1
	gdb_7_3-2011-07-26-release:1.138.2.1
	gdb_7_3-branch:1.138.0.2
	gdb_7_3-2011-04-01-branchpoint:1.138
	gdb_7_2-2010-09-02-release:1.121.2.1
	gdb_7_2-branch:1.121.0.2
	gdb_7_2-2010-07-07-branchpoint:1.121
	gdb_7_1-2010-03-18-release:1.119
	gdb_7_1-branch:1.119.0.2
	gdb_7_1-2010-02-18-branchpoint:1.119
	gdb_7_0_1-2009-12-22-release:1.116
	gdb_7_0-2009-10-06-release:1.116
	gdb_7_0-branch:1.116.0.2
	gdb_7_0-2009-09-16-branchpoint:1.116
	arc-sim-20090309:1.59.2.1
	msnyder-checkpoint-072509-branch:1.115.0.2
	msnyder-checkpoint-072509-branchpoint:1.115
	arc-insight_6_8-branch:1.59.2.1.0.4
	arc-insight_6_8-branchpoint:1.59.2.1
	insight_6_8-branch:1.59.2.1.0.2
	insight_6_8-branchpoint:1.59.2.1
	reverse-20081226-branch:1.98.0.4
	reverse-20081226-branchpoint:1.98
	multiprocess-20081120-branch:1.98.0.2
	multiprocess-20081120-branchpoint:1.98
	reverse-20080930-branch:1.95.0.2
	reverse-20080930-branchpoint:1.95
	reverse-20080717-branch:1.83.0.2
	reverse-20080717-branchpoint:1.83
	msnyder-reverse-20080609-branch:1.71.0.2
	msnyder-reverse-20080609-branchpoint:1.71
	drow-reverse-20070409-branch:1.52.0.2
	drow-reverse-20070409-branchpoint:1.52
	gdb_6_8-2008-03-27-release:1.59.2.1
	gdb_6_8-branch:1.59.0.2
	gdb_6_8-2008-02-26-branchpoint:1.59
	gdb_6_7_1-2007-10-29-release:1.54
	gdb_6_7-2007-10-10-release:1.54
	gdb_6_7-branch:1.54.0.2
	gdb_6_7-2007-09-07-branchpoint:1.54
	insight_6_6-20070208-release:1.48
	gdb_6_6-2006-12-18-release:1.48
	gdb_6_6-branch:1.48.0.18
	gdb_6_6-2006-11-15-branchpoint:1.48
	insight_6_5-20061003-release:1.48
	gdb-csl-symbian-6_4_50_20060226-12:1.48
	gdb-csl-sourcerygxx-3_4_4-25:1.47
	nickrob-async-20060828-mergepoint:1.48
	gdb-csl-symbian-6_4_50_20060226-11:1.48
	gdb-csl-sourcerygxx-4_1-17:1.48
	gdb-csl-20060226-branch-local-2:1.48
	gdb-csl-sourcerygxx-4_1-14:1.48
	gdb-csl-sourcerygxx-4_1-13:1.48
	gdb-csl-sourcerygxx-4_1-12:1.48
	gdb-csl-sourcerygxx-3_4_4-21:1.48
	gdb_6_5-20060621-release:1.48
	gdb-csl-sourcerygxx-4_1-9:1.48
	gdb-csl-sourcerygxx-4_1-8:1.48
	gdb-csl-sourcerygxx-4_1-7:1.48
	gdb-csl-arm-2006q1-6:1.48
	gdb-csl-sourcerygxx-4_1-6:1.48
	gdb-csl-symbian-6_4_50_20060226-10:1.48
	gdb-csl-symbian-6_4_50_20060226-9:1.48
	gdb-csl-symbian-6_4_50_20060226-8:1.48
	gdb-csl-coldfire-4_1-11:1.48
	gdb-csl-sourcerygxx-3_4_4-19:1.48
	gdb-csl-coldfire-4_1-10:1.48
	gdb_6_5-branch:1.48.0.16
	gdb_6_5-2006-05-14-branchpoint:1.48
	gdb-csl-sourcerygxx-4_1-5:1.48
	nickrob-async-20060513-branch:1.48.0.14
	nickrob-async-20060513-branchpoint:1.48
	gdb-csl-sourcerygxx-4_1-4:1.48
	msnyder-reverse-20060502-branch:1.48.0.12
	msnyder-reverse-20060502-branchpoint:1.48
	gdb-csl-morpho-4_1-4:1.48
	gdb-csl-sourcerygxx-3_4_4-17:1.48
	readline_5_1-import-branch:1.48.0.10
	readline_5_1-import-branchpoint:1.48
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.48
	gdb-csl-symbian-20060226-branch:1.48.0.8
	gdb-csl-symbian-20060226-branchpoint:1.48
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.48
	msnyder-reverse-20060331-branch:1.48.0.6
	msnyder-reverse-20060331-branchpoint:1.48
	gdb-csl-available-20060303-branch:1.48.0.4
	gdb-csl-available-20060303-branchpoint:1.48
	gdb-csl-20060226-branch:1.48.0.2
	gdb-csl-20060226-branchpoint:1.48
	gdb_6_4-20051202-release:1.46
	msnyder-fork-checkpoint-branch:1.47.0.4
	msnyder-fork-checkpoint-branchpoint:1.47
	gdb-csl-gxxpro-6_3-branch:1.47.0.2
	gdb-csl-gxxpro-6_3-branchpoint:1.47
	gdb_6_4-branch:1.46.0.8
	gdb_6_4-2005-11-01-branchpoint:1.46
	gdb-csl-arm-20051020-branch:1.46.0.6
	gdb-csl-arm-20051020-branchpoint:1.46
	msnyder-tracepoint-checkpoint-branch:1.46.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.46
	gdb-csl-arm-20050325-2005-q1b:1.46
	gdb-csl-arm-20050325-2005-q1a:1.46
	csl-arm-20050325-branch:1.46.0.2
	csl-arm-20050325-branchpoint:1.46
	gdb-post-i18n-errorwarning-20050211:1.43
	gdb-pre-i18n-errorwarning-20050211:1.42
	gdb_6_3-20041109-release:1.38
	gdb_6_3-branch:1.38.0.2
	gdb_6_3-20041019-branchpoint:1.38
	drow_intercu-merge-20040921:1.38
	drow_intercu-merge-20040915:1.38
	jimb-gdb_6_2-e500-branch:1.37.0.6
	jimb-gdb_6_2-e500-branchpoint:1.37
	gdb_6_2-20040730-release:1.37
	gdb_6_2-branch:1.37.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.37
	gdb_6_1_1-20040616-release:1.32
	gdb_6_1-2004-04-05-release:1.32
	drow_intercu-merge-20040402:1.32
	drow_intercu-merge-20040327:1.32
	ezannoni_pie-20040323-branch:1.32.0.18
	ezannoni_pie-20040323-branchpoint:1.32
	cagney_tramp-20040321-mergepoint:1.32
	cagney_tramp-20040309-branch:1.32.0.16
	cagney_tramp-20040309-branchpoint:1.32
	gdb_6_1-branch:1.32.0.14
	gdb_6_1-2004-03-01-gmt-branchpoint:1.32
	drow_intercu-20040221-branch:1.32.0.12
	drow_intercu-20040221-branchpoint:1.32
	cagney_bfdfile-20040213-branch:1.32.0.10
	cagney_bfdfile-20040213-branchpoint:1.32
	drow-cplus-merge-20040208:1.32
	carlton_dictionary-20040126-merge:1.32
	cagney_bigcore-20040122-branch:1.32.0.8
	cagney_bigcore-20040122-branchpoint:1.32
	drow-cplus-merge-20040113:1.32
	drow-cplus-merge-20031224:1.32
	drow-cplus-merge-20031220:1.32
	carlton_dictionary-20031215-merge:1.32
	drow-cplus-merge-20031214:1.32
	carlton-dictionary-20031111-merge:1.32
	gdb_6_0-2003-10-04-release:1.31.14.1
	kettenis_sparc-20030918-branch:1.32.0.6
	kettenis_sparc-20030918-branchpoint:1.32
	carlton_dictionary-20030917-merge:1.32
	ezannoni_pie-20030916-branchpoint:1.32
	ezannoni_pie-20030916-branch:1.32.0.4
	cagney_x86i386-20030821-branch:1.32.0.2
	cagney_x86i386-20030821-branchpoint:1.32
	carlton_dictionary-20030805-merge:1.32
	carlton_dictionary-20030627-merge:1.31
	gdb_6_0-branch:1.31.0.14
	gdb_6_0-2003-06-23-branchpoint:1.31
	jimb-ppc64-linux-20030613-branch:1.31.0.12
	jimb-ppc64-linux-20030613-branchpoint:1.31
	cagney_convert-20030606-branch:1.31.0.10
	cagney_convert-20030606-branchpoint:1.31
	cagney_writestrings-20030508-branch:1.31.0.8
	cagney_writestrings-20030508-branchpoint:1.31
	jimb-ppc64-linux-20030528-branch:1.31.0.6
	jimb-ppc64-linux-20030528-branchpoint:1.31
	carlton_dictionary-20030523-merge:1.31
	cagney_fileio-20030521-branch:1.31.0.4
	cagney_fileio-20030521-branchpoint:1.31
	kettenis_i386newframe-20030517-mergepoint:1.31
	jimb-ppc64-linux-20030509-branch:1.31.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.31
	kettenis_i386newframe-20030504-mergepoint:1.30
	carlton_dictionary-20030430-merge:1.30
	kettenis_i386newframe-20030419-branch:1.30.0.2
	kettenis_i386newframe-20030419-branchpoint:1.30
	carlton_dictionary-20030416-merge:1.30
	cagney_frameaddr-20030409-mergepoint:1.29
	kettenis_i386newframe-20030406-branch:1.29.0.4
	kettenis_i386newframe-20030406-branchpoint:1.29
	cagney_frameaddr-20030403-branchpoint:1.29
	cagney_frameaddr-20030403-branch:1.29.0.2
	cagney_framebase-20030330-mergepoint:1.29
	cagney_framebase-20030326-branch:1.28.0.10
	cagney_framebase-20030326-branchpoint:1.28
	cagney_lazyid-20030317-branch:1.28.0.8
	cagney_lazyid-20030317-branchpoint:1.28
	kettenis-i386newframe-20030316-mergepoint:1.28
	offbyone-20030313-branch:1.28.0.6
	offbyone-20030313-branchpoint:1.28
	kettenis-i386newframe-20030308-branch:1.28.0.4
	kettenis-i386newframe-20030308-branchpoint:1.28
	carlton_dictionary-20030305-merge:1.28
	cagney_offbyone-20030303-branch:1.28.0.2
	cagney_offbyone-20030303-branchpoint:1.28
	carlton_dictionary-20030207-merge:1.28
	interps-20030203-mergepoint:1.28
	interps-20030202-branch:1.27.0.2
	interps-20030202-branchpoint:1.27
	cagney-unwind-20030108-branch:1.26.0.2
	cagney-unwind-20030108-branchpoint:1.26
	carlton_dictionary-20021223-merge:1.26
	gdb_5_3-2002-12-12-release:1.23
	carlton_dictionary-20021115-merge:1.23
	kseitz_interps-20021105-merge:1.23
	kseitz_interps-20021103-merge:1.23
	drow-cplus-merge-20021020:1.23
	drow-cplus-merge-20021025:1.23
	carlton_dictionary-20021025-merge:1.23
	carlton_dictionary-20021011-merge:1.23
	drow-cplus-branch:1.23.0.10
	drow-cplus-branchpoint:1.23
	kseitz_interps-20020930-merge:1.23
	carlton_dictionary-20020927-merge:1.23
	carlton_dictionary-branch:1.23.0.8
	carlton_dictionary-20020920-branchpoint:1.23
	gdb_5_3-branch:1.23.0.6
	gdb_5_3-2002-09-04-branchpoint:1.23
	kseitz_interps-20020829-merge:1.23
	cagney_sysregs-20020825-branch:1.23.0.4
	cagney_sysregs-20020825-branchpoint:1.23
	readline_4_3-import-branch:1.23.0.2
	readline_4_3-import-branchpoint:1.23
	gdb_5_2_1-2002-07-23-release:1.20
	kseitz_interps-20020528-branch:1.22.0.6
	kseitz_interps-20020528-branchpoint:1.22
	cagney_regbuf-20020515-branch:1.22.0.4
	cagney_regbuf-20020515-branchpoint:1.22
	jimb-macro-020506-branch:1.22.0.2
	jimb-macro-020506-branchpoint:1.22
	gdb_5_2-2002-04-29-release:1.20
	gdb_5_2-branch:1.20.0.2
	gdb_5_2-2002-03-03-branchpoint:1.20
	gdb_5_1_1-2002-01-24-release:1.18
	gdb_5_1_0_1-2002-01-03-release:1.18
	cygnus_cvs_20020108_pre:1.19
	gdb_5_1_0_1-2002-01-03-branchpoint:1.18
	gdb_5_1_0_1-2002-01-03-branch:1.18.0.6
	gdb_5_1-2001-11-21-release:1.18
	gdb_s390-2001-09-26-branch:1.18.0.4
	gdb_s390-2001-09-26-branchpoint:1.18
	gdb_5_1-2001-07-29-branch:1.18.0.2
	gdb_5_1-2001-07-29-branchpoint:1.18
	dberlin-typesystem-branch:1.17.0.2
	dberlin-typesystem-branchpoint:1.17
	gdb-post-ptid_t-2001-05-03:1.14
	gdb-pre-ptid_t-2001-05-03:1.13
	insight-precleanup-2001-01-01:1.9
	gdb-post-protoization-2000-07-29:1.6
	gdb-pre-protoization-2000-07-29:1.5
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.11
	gdb_5_0-2000-05-19-release:1.1.1.11
	gdb_4_18_2-2000-05-18-release:1.1.1.11
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.11
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.11
	gdb_5_0-2000-04-10-branch:1.1.1.11.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.11
	repo-unification-2000-02-06:1.1.1.11
	insight-2000-02-04:1.1.1.11
	gdb-2000-02-04:1.1.1.11
	gdb-2000-02-02:1.1.1.11
	gdb-2000-02-01:1.1.1.10
	gdb-2000-01-31:1.1.1.10
	gdb-2000-01-26:1.1.1.10
	gdb-2000-01-24:1.1.1.10
	gdb-2000-01-17:1.1.1.10
	gdb-2000-01-10:1.1.1.9
	gdb-2000-01-05:1.1.1.8
	gdb-1999-12-21:1.1.1.8
	gdb-1999-12-13:1.1.1.8
	gdb-1999-12-07:1.1.1.8
	gdb-1999-12-06:1.1.1.8
	gdb-1999-11-16:1.1.1.8
	gdb-1999-11-08:1.1.1.8
	gdb-1999-11-01:1.1.1.8
	gdb-1999-10-25:1.1.1.8
	gdb-1999-10-18:1.1.1.8
	gdb-1999-10-11:1.1.1.8
	gdb-1999-10-04:1.1.1.8
	gdb-1999-09-28:1.1.1.8
	gdb-1999-09-21:1.1.1.8
	gdb-1999-09-13:1.1.1.8
	gdb-1999-09-08:1.1.1.8
	gdb-1999-08-30:1.1.1.7
	gdb-1999-08-23:1.1.1.7
	gdb-1999-08-16:1.1.1.6
	gdb-1999-08-09:1.1.1.6
	gdb-1999-08-02:1.1.1.6
	gdb-1999-07-26:1.1.1.6
	gdb-1999-07-19:1.1.1.6
	gdb-1999-07-12:1.1.1.6
	gdb-post-reformat-19990707:1.1.1.6
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.6
	gdb-pre-reformat-19990707:1.1.1.5
	gdb-1999-07-07:1.1.1.5
	gdb-1999-07-05:1.1.1.5
	gdb-1999-06-28:1.1.1.5
	gdb-1999-06-21:1.1.1.5
	gdb-1999-06-14:1.1.1.5
	gdb-1999-06-07:1.1.1.5
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.158
date	2013.09.30.11.50.12;	author luisgpm;	state Exp;
branches;
next	1.157;

1.157
date	2013.09.17.18.26.39;	author palves;	state Exp;
branches;
next	1.156;

1.156
date	2013.08.30.15.32.45;	author palves;	state Exp;
branches;
next	1.155;

1.155
date	2013.07.15.11.14.32;	author alianwar;	state Exp;
branches;
next	1.154;

1.154
date	2013.05.23.17.12.51;	author palves;	state Exp;
branches;
next	1.153;

1.153
date	2013.03.11.08.17.08;	author mmetzger;	state Exp;
branches;
next	1.152;

1.152
date	2013.03.07.21.57.30;	author kseitz;	state Exp;
branches;
next	1.151;

1.151
date	2013.01.31.18.37.37;	author aristovski;	state Exp;
branches;
next	1.150;

1.150
date	2013.01.01.06.41.28;	author brobecke;	state Exp;
branches;
next	1.149;

1.149
date	2012.07.27.00.52.36;	author qiyao;	state Exp;
branches;
next	1.148;

1.148
date	2012.06.28.16.34.03;	author palves;	state Exp;
branches;
next	1.147;

1.147
date	2012.04.27.20.38.38;	author sergiodj;	state Exp;
branches;
next	1.146;

1.146
date	2012.03.02.19.26.10;	author palves;	state Exp;
branches;
next	1.145;

1.145
date	2012.02.16.14.34.59;	author tromey;	state Exp;
branches;
next	1.144;

1.144
date	2012.01.04.08.27.56;	author brobecke;	state Exp;
branches;
next	1.143;

1.143
date	2011.09.13.14.48.55;	author palves;	state Exp;
branches
	1.143.2.1;
next	1.142;

1.142
date	2011.08.04.19.10.13;	author palves;	state Exp;
branches;
next	1.141;

1.141
date	2011.05.30.18.04.32;	author palves;	state Exp;
branches;
next	1.140;

1.140
date	2011.05.27.18.26.19;	author palves;	state Exp;
branches;
next	1.139;

1.139
date	2011.04.19.15.16.14;	author marckhouzam;	state Exp;
branches;
next	1.138;

1.138
date	2011.03.10.18.33.59;	author tromey;	state Exp;
branches
	1.138.2.1;
next	1.137;

1.137
date	2011.03.09.14.22.09;	author tromey;	state Exp;
branches;
next	1.136;

1.136
date	2011.02.21.23.40.46;	author msnyder;	state Exp;
branches;
next	1.135;

1.135
date	2011.02.19.01.24.55;	author msnyder;	state Exp;
branches;
next	1.134;

1.134
date	2011.02.19.01.02.56;	author msnyder;	state Exp;
branches;
next	1.133;

1.133
date	2011.02.16.09.46.09;	author qiyao;	state Exp;
branches;
next	1.132;

1.132
date	2011.02.15.21.17.52;	author msnyder;	state Exp;
branches;
next	1.131;

1.131
date	2011.01.19.17.21.36;	author tromey;	state Exp;
branches;
next	1.130;

1.130
date	2011.01.12.02.44.47;	author tromey;	state Exp;
branches;
next	1.129;

1.129
date	2011.01.11.21.53.25;	author msnyder;	state Exp;
branches;
next	1.128;

1.128
date	2011.01.05.22.22.53;	author msnyder;	state Exp;
branches;
next	1.127;

1.127
date	2011.01.01.15.33.18;	author brobecke;	state Exp;
branches;
next	1.126;

1.126
date	2010.12.21.19.10.13;	author tromey;	state Exp;
branches;
next	1.125;

1.125
date	2010.12.09.16.09.52;	author tromey;	state Exp;
branches;
next	1.124;

1.124
date	2010.11.28.04.33.46;	author jkratoch;	state Exp;
branches;
next	1.123;

1.123
date	2010.11.28.04.31.24;	author jkratoch;	state Exp;
branches;
next	1.122;

1.122
date	2010.08.06.19.45.58;	author palves;	state Exp;
branches;
next	1.121;

1.121
date	2010.06.18.17.44.36;	author shebs;	state Exp;
branches
	1.121.2.1;
next	1.120;

1.120
date	2010.05.17.01.15.20;	author msnyder;	state Exp;
branches;
next	1.119;

1.119
date	2010.01.12.21.40.24;	author vprus;	state Exp;
branches
	1.119.2.1;
next	1.118;

1.118
date	2010.01.01.07.31.42;	author brobecke;	state Exp;
branches;
next	1.117;

1.117
date	2009.10.19.09.51.42;	author palves;	state Exp;
branches;
next	1.116;

1.116
date	2009.09.13.16.28.28;	author brobecke;	state Exp;
branches;
next	1.115;

1.115
date	2009.07.02.21.57.27;	author palves;	state Exp;
branches;
next	1.114;

1.114
date	2009.06.07.16.46.48;	author palves;	state Exp;
branches;
next	1.113;

1.113
date	2009.05.24.21.06.53;	author devans;	state Exp;
branches;
next	1.112;

1.112
date	2009.05.24.18.00.08;	author palves;	state Exp;
branches;
next	1.111;

1.111
date	2009.05.18.14.07.17;	author palves;	state Exp;
branches;
next	1.110;

1.110
date	2009.05.05.13.24.49;	author uweigand;	state Exp;
branches;
next	1.109;

1.109
date	2009.03.31.15.23.57;	author palves;	state Exp;
branches;
next	1.108;

1.108
date	2009.03.27.02.44.51;	author devans;	state Exp;
branches;
next	1.107;

1.107
date	2009.03.26.21.30.26;	author devans;	state Exp;
branches;
next	1.106;

1.106
date	2009.03.25.21.53.10;	author palves;	state Exp;
branches;
next	1.105;

1.105
date	2009.03.25.21.42.34;	author palves;	state Exp;
branches;
next	1.104;

1.104
date	2009.03.22.17.59.59;	author palves;	state Exp;
branches;
next	1.103;

1.103
date	2009.02.05.18.54.50;	author palves;	state Exp;
branches;
next	1.102;

1.102
date	2009.01.30.18.43.04;	author vprus;	state Exp;
branches;
next	1.101;

1.101
date	2009.01.18.17.42.16;	author palves;	state Exp;
branches;
next	1.100;

1.100
date	2009.01.17.20.39.52;	author nickrob;	state Exp;
branches;
next	1.99;

1.99
date	2009.01.03.05.57.53;	author brobecke;	state Exp;
branches;
next	1.98;

1.98
date	2008.11.17.12.13.49;	author vprus;	state Exp;
branches;
next	1.97;

1.97
date	2008.11.09.07.54.27;	author vprus;	state Exp;
branches;
next	1.96;

1.96
date	2008.10.23.23.11.21;	author palves;	state Exp;
branches;
next	1.95;

1.95
date	2008.09.22.15.18.30;	author palves;	state Exp;
branches;
next	1.94;

1.94
date	2008.09.08.22.10.20;	author palves;	state Exp;
branches;
next	1.93;

1.93
date	2008.09.08.21.57.42;	author palves;	state Exp;
branches;
next	1.92;

1.92
date	2008.09.08.21.55.16;	author palves;	state Exp;
branches;
next	1.91;

1.91
date	2008.09.08.21.52.25;	author palves;	state Exp;
branches;
next	1.90;

1.90
date	2008.09.08.21.51.18;	author palves;	state Exp;
branches;
next	1.89;

1.89
date	2008.09.08.21.48.52;	author palves;	state Exp;
branches;
next	1.88;

1.88
date	2008.09.08.21.46.21;	author palves;	state Exp;
branches;
next	1.87;

1.87
date	2008.09.08.21.43.00;	author palves;	state Exp;
branches;
next	1.86;

1.86
date	2008.09.08.21.40.39;	author palves;	state Exp;
branches;
next	1.85;

1.85
date	2008.08.18.22.35.17;	author palves;	state Exp;
branches;
next	1.84;

1.84
date	2008.07.26.10.23.56;	author vprus;	state Exp;
branches;
next	1.83;

1.83
date	2008.07.13.19.25.58;	author palves;	state Exp;
branches;
next	1.82;

1.82
date	2008.07.12.16.37.57;	author vprus;	state Exp;
branches;
next	1.81;

1.81
date	2008.07.12.12.34.19;	author vprus;	state Exp;
branches;
next	1.80;

1.80
date	2008.07.11.11.26.39;	author palves;	state Exp;
branches;
next	1.79;

1.79
date	2008.07.11.11.07.39;	author palves;	state Exp;
branches;
next	1.78;

1.78
date	2008.07.09.22.42.43;	author palves;	state Exp;
branches;
next	1.77;

1.77
date	2008.07.09.22.30.46;	author palves;	state Exp;
branches;
next	1.76;

1.76
date	2008.07.09.22.16.15;	author palves;	state Exp;
branches;
next	1.75;

1.75
date	2008.07.09.10.58.41;	author palves;	state Exp;
branches;
next	1.74;

1.74
date	2008.06.28.09.42.15;	author vprus;	state Exp;
branches;
next	1.73;

1.73
date	2008.06.13.20.19.19;	author vprus;	state Exp;
branches;
next	1.72;

1.72
date	2008.06.10.10.23.53;	author vprus;	state Exp;
branches;
next	1.71;

1.71
date	2008.06.06.00.32.51;	author nickrob;	state Exp;
branches;
next	1.70;

1.70
date	2008.05.20.21.05.07;	author nickrob;	state Exp;
branches;
next	1.69;

1.69
date	2008.05.09.08.14.47;	author eliz;	state Exp;
branches;
next	1.68;

1.68
date	2008.05.04.19.39.00;	author palves;	state Exp;
branches;
next	1.67;

1.67
date	2008.05.03.15.10.41;	author vprus;	state Exp;
branches;
next	1.66;

1.66
date	2008.05.01.14.27.39;	author vprus;	state Exp;
branches;
next	1.65;

1.65
date	2008.03.23.09.53.52;	author vprus;	state Exp;
branches;
next	1.64;

1.64
date	2008.03.21.15.44.53;	author drow;	state Exp;
branches;
next	1.63;

1.63
date	2008.03.17.18.41.29;	author vprus;	state Exp;
branches;
next	1.62;

1.62
date	2008.03.15.13.53.25;	author vprus;	state Exp;
branches;
next	1.61;

1.61
date	2008.03.14.17.21.07;	author vprus;	state Exp;
branches;
next	1.60;

1.60
date	2008.03.12.22.10.55;	author palves;	state Exp;
branches;
next	1.59;

1.59
date	2008.01.23.11.26.28;	author vprus;	state Exp;
branches
	1.59.2.1;
next	1.58;

1.58
date	2008.01.01.22.53.13;	author drow;	state Exp;
branches;
next	1.57;

1.57
date	2007.12.06.12.57.51;	author vprus;	state Exp;
branches;
next	1.56;

1.56
date	2007.09.10.21.27.23;	author drow;	state Exp;
branches;
next	1.55;

1.55
date	2007.09.10.18.49.26;	author uweigand;	state Exp;
branches;
next	1.54;

1.54
date	2007.08.23.18.08.46;	author brobecke;	state Exp;
branches;
next	1.53;

1.53
date	2007.04.10.14.53.46;	author drow;	state Exp;
branches;
next	1.52;

1.52
date	2007.03.30.12.57.43;	author drow;	state Exp;
branches;
next	1.51;

1.51
date	2007.02.28.17.35.01;	author drow;	state Exp;
branches;
next	1.50;

1.50
date	2007.02.02.12.18.37;	author denis;	state Exp;
branches;
next	1.49;

1.49
date	2007.01.09.17.58.59;	author drow;	state Exp;
branches;
next	1.48;

1.48
date	2005.12.17.22.34.03;	author eliz;	state Exp;
branches;
next	1.47;

1.47
date	2005.11.14.17.03.25;	author ams;	state Exp;
branches;
next	1.46;

1.46
date	2005.02.15.15.49.22;	author cagney;	state Exp;
branches;
next	1.45;

1.45
date	2005.02.14.18.10.10;	author cagney;	state Exp;
branches;
next	1.44;

1.44
date	2005.02.12.00.39.21;	author cagney;	state Exp;
branches;
next	1.43;

1.43
date	2005.02.11.04.06.06;	author cagney;	state Exp;
branches;
next	1.42;

1.42
date	2005.01.14.23.27.14;	author cagney;	state Exp;
branches;
next	1.41;

1.41
date	2005.01.13.22.08.26;	author cagney;	state Exp;
branches;
next	1.40;

1.40
date	2005.01.12.18.31.33;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2004.10.29.20.23.13;	author cagney;	state Exp;
branches;
next	1.38;

1.38
date	2004.08.25.15.18.05;	author cagney;	state Exp;
branches;
next	1.37;

1.37
date	2004.05.25.03.59.29;	author tausq;	state Exp;
branches;
next	1.36;

1.36
date	2004.05.12.22.19.02;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2004.05.10.23.27.49;	author cagney;	state Exp;
branches;
next	1.34;

1.34
date	2004.05.02.00.21.41;	author cagney;	state Exp;
branches;
next	1.33;

1.33
date	2004.04.28.16.36.25;	author cagney;	state Exp;
branches;
next	1.32;

1.32
date	2003.07.28.13.02.12;	author drow;	state Exp;
branches
	1.32.12.1;
next	1.31;

1.31
date	2003.05.05.00.27.08;	author cagney;	state Exp;
branches
	1.31.8.1
	1.31.14.1;
next	1.30;

1.30
date	2003.04.12.17.48.55;	author cagney;	state Exp;
branches
	1.30.2.1;
next	1.29;

1.29
date	2003.03.28.21.42.41;	author jjohnstn;	state Exp;
branches;
next	1.28;

1.28
date	2003.02.03.01.18.37;	author ezannoni;	state Exp;
branches
	1.28.10.1;
next	1.27;

1.27
date	2003.01.14.00.07.43;	author ezannoni;	state Exp;
branches
	1.27.2.1;
next	1.26;

1.26
date	2002.12.20.03.37.33;	author ezannoni;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2002.12.06.07.35.55;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2002.11.29.19.15.15;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2002.08.02.20.51.21;	author cagney;	state Exp;
branches
	1.23.8.1
	1.23.10.1;
next	1.22;

1.22
date	2002.05.05.01.15.13;	author cagney;	state Exp;
branches
	1.22.6.1;
next	1.21;

1.21
date	2002.04.21.20.23.33;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.17.22.15.17;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.18.05.00.49;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.28.19.48.15;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.13.22.56.16;	author msnyder;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.02.00.36.20;	author msnyder;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.12.05.04.01;	author jimb;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.04.04.15.28;	author kevinb;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.17.19.01.35;	author msnyder;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.06.08.21.17;	author kevinb;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.01.01.39.21;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.26.19.47.19;	author jeffh;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.15.01.01.50;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.17.03.49.41;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.28.22.15.09;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.30.01.48.27;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.22.00.15.30;	author msnyder;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.19.21.03.06;	author nsd;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.07.04.43.30;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.32;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.06;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.143.2.1
date	2012.01.06.04.54.30;	author brobecke;	state Exp;
branches;
next	;

1.138.2.1
date	2011.04.19.15.24.49;	author marckhouzam;	state Exp;
branches;
next	;

1.121.2.1
date	2010.08.06.19.51.49;	author palves;	state Exp;
branches;
next	1.121.2.2;

1.121.2.2
date	2011.04.19.15.28.52;	author marckhouzam;	state Exp;
branches;
next	;

1.119.2.1
date	2010.08.06.19.56.02;	author palves;	state Exp;
branches;
next	;

1.59.2.1
date	2008.03.12.22.22.06;	author palves;	state Exp;
branches;
next	;

1.32.12.1
date	2004.09.16.17.01.24;	author drow;	state Exp;
branches;
next	;

1.31.8.1
date	2003.06.03.20.54.40;	author cagney;	state Exp;
branches;
next	;

1.31.14.1
date	2003.07.28.13.02.41;	author drow;	state Exp;
branches;
next	;

1.30.2.1
date	2003.05.18.09.44.25;	author kettenis;	state Exp;
branches;
next	;

1.28.10.1
date	2003.03.30.16.35.23;	author cagney;	state Exp;
branches;
next	;

1.27.2.1
date	2003.02.03.06.02.45;	author cagney;	state Exp;
branches;
next	1.27.2.2;

1.27.2.2
date	2003.02.04.01.26.54;	author cagney;	state Exp;
branches;
next	;

1.26.2.1
date	2003.01.20.00.38.14;	author cagney;	state Exp;
branches;
next	;

1.23.8.1
date	2002.12.23.19.38.47;	author carlton;	state Exp;
branches;
next	1.23.8.2;

1.23.8.2
date	2003.02.07.19.17.53;	author carlton;	state Exp;
branches;
next	1.23.8.3;

1.23.8.3
date	2003.04.16.19.56.56;	author carlton;	state Exp;
branches;
next	1.23.8.4;

1.23.8.4
date	2003.05.23.18.40.46;	author carlton;	state Exp;
branches;
next	1.23.8.5;

1.23.8.5
date	2003.08.05.17.13.15;	author carlton;	state Exp;
branches;
next	;

1.23.10.1
date	2003.12.14.20.27.33;	author drow;	state Exp;
branches;
next	;

1.22.6.1
date	2002.08.09.18.34.27;	author kseitz;	state Exp;
branches;
next	1.22.6.2;

1.22.6.2
date	2002.08.28.16.55.55;	author kseitz;	state Exp;
branches;
next	1.22.6.3;

1.22.6.3
date	2002.08.29.22.54.21;	author kseitz;	state Exp;
branches;
next	1.22.6.4;

1.22.6.4
date	2002.09.04.20.18.31;	author kseitz;	state Exp;
branches;
next	1.22.6.5;

1.22.6.5
date	2002.10.01.00.46.14;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.06;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.25.37;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.43.04;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.03.36;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.06.07.19.17.56;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.07.07.20.10.42;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.08.23.22.36.21;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.09.08.23.59.36;	author shebs;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2000.01.11.03.07.25;	author jsm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2000.01.18.00.54.12;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2000.02.03.04.14.36;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.158
log
@	* aarch64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* aix-thread.c (BUILD_THREAD, BUILD_LWP): Remove.
	Replace BUILD_THREAD with ptid_build.
	Replace BUILD_LWP with ptid_build.
	Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* alphabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* amd64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* amd64bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* arm-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* armnbsd-nat.c: Replace PIDGET with ptid_get_pid.
	* auxv.c: Likewise.
	* breakpoint.c: Likewise.
	* common/ptid.c (ptid_is_pid): Condense check for
	null_ptid and minus_one_ptid.
	(ptid_lwp_p): New function.
	(ptid_tid_p): New function.
	* common/ptid.h: Update comments for accessors.
	(ptid_lwp_p): New prototype.
	(ptid_tid_p): New prototype.
	* defs.h (PIDGET, TIDGET, MERGEPID): Do not define.
	* gcore.c: Replace PIDGET with ptid_get_pid.
	* gdbthread.h: Likewise.
	* gnu-nat.c: Likewise.
	* hppa-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* hppabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* hppanbsd-nat.c: Likewise.
	* i386-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* i386bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* ia64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	* infcmd.c: Likewise.
	* inferior.h: Likewise.
	* inflow.c: Likewise.
	* infrun.c: Likewise.
	* linux-fork.c: Likewise.
	* linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace GET_PID with ptid_get_pid.
	Replace is_lwp with ptid_lwp_p.
	Replace GET_LWP with ptid_get_lwp.
	Replace BUILD_LWP with ptid_build.
@
text
@/* Multi-process/thread control for GDB, the GNU debugger.

   Copyright (C) 1986-2013 Free Software Foundation, Inc.

   Contributed by Lynx Real-Time Systems, Inc.  Los Gatos, CA.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "symtab.h"
#include "frame.h"
#include "inferior.h"
#include "environ.h"
#include "value.h"
#include "target.h"
#include "gdbthread.h"
#include "exceptions.h"
#include "command.h"
#include "gdbcmd.h"
#include "regcache.h"
#include "gdb.h"
#include "gdb_string.h"
#include "btrace.h"

#include <ctype.h>
#include <sys/types.h>
#include <signal.h>
#include "ui-out.h"
#include "observer.h"
#include "annotate.h"
#include "cli/cli-decode.h"
#include "gdb_regex.h"
#include "cli/cli-utils.h"
#include "continuations.h"

/* Definition of struct thread_info exported to gdbthread.h.  */

/* Prototypes for exported functions.  */

void _initialize_thread (void);

/* Prototypes for local functions.  */

struct thread_info *thread_list = NULL;
static int highest_thread_num;

static void thread_command (char *tidstr, int from_tty);
static void thread_apply_all_command (char *, int);
static int thread_alive (struct thread_info *);
static void info_threads_command (char *, int);
static void thread_apply_command (char *, int);
static void restore_current_thread (ptid_t);
static void prune_threads (void);

/* Data to cleanup thread array.  */

struct thread_array_cleanup
{
  /* Array of thread pointers used to set
     reference count.  */
  struct thread_info **tp_array;

  /* Thread count in the array.  */
  int count;
};


struct thread_info*
inferior_thread (void)
{
  struct thread_info *tp = find_thread_ptid (inferior_ptid);
  gdb_assert (tp);
  return tp;
}

void
delete_step_resume_breakpoint (struct thread_info *tp)
{
  if (tp && tp->control.step_resume_breakpoint)
    {
      delete_breakpoint (tp->control.step_resume_breakpoint);
      tp->control.step_resume_breakpoint = NULL;
    }
}

void
delete_exception_resume_breakpoint (struct thread_info *tp)
{
  if (tp && tp->control.exception_resume_breakpoint)
    {
      delete_breakpoint (tp->control.exception_resume_breakpoint);
      tp->control.exception_resume_breakpoint = NULL;
    }
}

static void
clear_thread_inferior_resources (struct thread_info *tp)
{
  /* NOTE: this will take care of any left-over step_resume breakpoints,
     but not any user-specified thread-specific breakpoints.  We can not
     delete the breakpoint straight-off, because the inferior might not
     be stopped at the moment.  */
  if (tp->control.step_resume_breakpoint)
    {
      tp->control.step_resume_breakpoint->disposition = disp_del_at_next_stop;
      tp->control.step_resume_breakpoint = NULL;
    }

  if (tp->control.exception_resume_breakpoint)
    {
      tp->control.exception_resume_breakpoint->disposition
	= disp_del_at_next_stop;
      tp->control.exception_resume_breakpoint = NULL;
    }

  delete_longjmp_breakpoint_at_next_stop (tp->num);

  bpstat_clear (&tp->control.stop_bpstat);

  btrace_teardown (tp);

  do_all_intermediate_continuations_thread (tp, 1);
  do_all_continuations_thread (tp, 1);
}

static void
free_thread (struct thread_info *tp)
{
  if (tp->private)
    {
      if (tp->private_dtor)
	tp->private_dtor (tp->private);
      else
	xfree (tp->private);
    }

  xfree (tp->name);
  xfree (tp);
}

void
init_thread_list (void)
{
  struct thread_info *tp, *tpnext;

  highest_thread_num = 0;

  if (!thread_list)
    return;

  for (tp = thread_list; tp; tp = tpnext)
    {
      tpnext = tp->next;
      free_thread (tp);
    }

  thread_list = NULL;
}

/* Allocate a new thread with target id PTID and add it to the thread
   list.  */

static struct thread_info *
new_thread (ptid_t ptid)
{
  struct thread_info *tp;

  tp = xcalloc (1, sizeof (*tp));

  tp->ptid = ptid;
  tp->num = ++highest_thread_num;
  tp->next = thread_list;
  thread_list = tp;

  /* Nothing to follow yet.  */
  tp->pending_follow.kind = TARGET_WAITKIND_SPURIOUS;
  tp->state = THREAD_STOPPED;

  return tp;
}

struct thread_info *
add_thread_silent (ptid_t ptid)
{
  struct thread_info *tp;

  tp = find_thread_ptid (ptid);
  if (tp)
    /* Found an old thread with the same id.  It has to be dead,
       otherwise we wouldn't be adding a new thread with the same id.
       The OS is reusing this id --- delete it, and recreate a new
       one.  */
    {
      /* In addition to deleting the thread, if this is the current
	 thread, then we need to take care that delete_thread doesn't
	 really delete the thread if it is inferior_ptid.  Create a
	 new template thread in the list with an invalid ptid, switch
	 to it, delete the original thread, reset the new thread's
	 ptid, and switch to it.  */

      if (ptid_equal (inferior_ptid, ptid))
	{
	  tp = new_thread (null_ptid);

	  /* Make switch_to_thread not read from the thread.  */
	  tp->state = THREAD_EXITED;
	  switch_to_thread (null_ptid);

	  /* Now we can delete it.  */
	  delete_thread (ptid);

	  /* Now reset its ptid, and reswitch inferior_ptid to it.  */
	  tp->ptid = ptid;
	  tp->state = THREAD_STOPPED;
	  switch_to_thread (ptid);

	  observer_notify_new_thread (tp);

	  /* All done.  */
	  return tp;
	}
      else
	/* Just go ahead and delete it.  */
	delete_thread (ptid);
    }

  tp = new_thread (ptid);
  observer_notify_new_thread (tp);

  return tp;
}

struct thread_info *
add_thread_with_info (ptid_t ptid, struct private_thread_info *private)
{
  struct thread_info *result = add_thread_silent (ptid);

  result->private = private;

  if (print_thread_events)
    printf_unfiltered (_("[New %s]\n"), target_pid_to_str (ptid));

  annotate_new_thread ();
  return result;
}

struct thread_info *
add_thread (ptid_t ptid)
{
  return add_thread_with_info (ptid, NULL);
}

/* Delete thread PTID.  If SILENT, don't notify the observer of this
   exit.  */
static void
delete_thread_1 (ptid_t ptid, int silent)
{
  struct thread_info *tp, *tpprev;

  tpprev = NULL;

  for (tp = thread_list; tp; tpprev = tp, tp = tp->next)
    if (ptid_equal (tp->ptid, ptid))
      break;

  if (!tp)
    return;

  /* If this is the current thread, or there's code out there that
     relies on it existing (refcount > 0) we can't delete yet.  Mark
     it as exited, and notify it.  */
  if (tp->refcount > 0
      || ptid_equal (tp->ptid, inferior_ptid))
    {
      if (tp->state != THREAD_EXITED)
	{
	  observer_notify_thread_exit (tp, silent);

	  /* Tag it as exited.  */
	  tp->state = THREAD_EXITED;

	  /* Clear breakpoints, etc. associated with this thread.  */
	  clear_thread_inferior_resources (tp);
	}

       /* Will be really deleted some other time.  */
       return;
     }

  /* Notify thread exit, but only if we haven't already.  */
  if (tp->state != THREAD_EXITED)
    observer_notify_thread_exit (tp, silent);

  /* Tag it as exited.  */
  tp->state = THREAD_EXITED;
  clear_thread_inferior_resources (tp);

  if (tpprev)
    tpprev->next = tp->next;
  else
    thread_list = tp->next;

  free_thread (tp);
}

/* Delete thread PTID and notify of thread exit.  If this is
   inferior_ptid, don't actually delete it, but tag it as exited and
   do the notification.  If PTID is the user selected thread, clear
   it.  */
void
delete_thread (ptid_t ptid)
{
  delete_thread_1 (ptid, 0 /* not silent */);
}

void
delete_thread_silent (ptid_t ptid)
{
  delete_thread_1 (ptid, 1 /* silent */);
}

struct thread_info *
find_thread_id (int num)
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (tp->num == num)
      return tp;

  return NULL;
}

/* Find a thread_info by matching PTID.  */
struct thread_info *
find_thread_ptid (ptid_t ptid)
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (ptid_equal (tp->ptid, ptid))
      return tp;

  return NULL;
}

/*
 * Thread iterator function.
 *
 * Calls a callback function once for each thread, so long as
 * the callback function returns false.  If the callback function
 * returns true, the iteration will end and the current thread
 * will be returned.  This can be useful for implementing a 
 * search for a thread with arbitrary attributes, or for applying
 * some operation to every thread.
 *
 * FIXME: some of the existing functionality, such as 
 * "Thread apply all", might be rewritten using this functionality.
 */

struct thread_info *
iterate_over_threads (int (*callback) (struct thread_info *, void *),
		      void *data)
{
  struct thread_info *tp, *next;

  for (tp = thread_list; tp; tp = next)
    {
      next = tp->next;
      if ((*callback) (tp, data))
	return tp;
    }

  return NULL;
}

int
thread_count (void)
{
  int result = 0;
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    ++result;

  return result;  
}

int
valid_thread_id (int num)
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (tp->num == num)
      return 1;

  return 0;
}

int
pid_to_thread_id (ptid_t ptid)
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (ptid_equal (tp->ptid, ptid))
      return tp->num;

  return 0;
}

ptid_t
thread_id_to_pid (int num)
{
  struct thread_info *thread = find_thread_id (num);

  if (thread)
    return thread->ptid;
  else
    return pid_to_ptid (-1);
}

int
in_thread_list (ptid_t ptid)
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (ptid_equal (tp->ptid, ptid))
      return 1;

  return 0;			/* Never heard of 'im.  */
}

/* Finds the first thread of the inferior given by PID.  If PID is -1,
   return the first thread in the list.  */

struct thread_info *
first_thread_of_process (int pid)
{
  struct thread_info *tp, *ret = NULL;

  for (tp = thread_list; tp; tp = tp->next)
    if (pid == -1 || ptid_get_pid (tp->ptid) == pid)
      if (ret == NULL || tp->num < ret->num)
	ret = tp;

  return ret;
}

struct thread_info *
any_thread_of_process (int pid)
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (ptid_get_pid (tp->ptid) == pid)
      return tp;

  return NULL;
}

struct thread_info *
any_live_thread_of_process (int pid)
{
  struct thread_info *tp;
  struct thread_info *tp_executing = NULL;

  for (tp = thread_list; tp; tp = tp->next)
    if (tp->state != THREAD_EXITED && ptid_get_pid (tp->ptid) == pid)
      {
	if (tp->executing)
	  tp_executing = tp;
	else
	  return tp;
      }

  return tp_executing;
}

/* Print a list of thread ids currently known, and the total number of
   threads.  To be used from within catch_errors.  */
static int
do_captured_list_thread_ids (struct ui_out *uiout, void *arg)
{
  struct thread_info *tp;
  int num = 0;
  struct cleanup *cleanup_chain;
  int current_thread = -1;

  update_thread_list ();

  cleanup_chain = make_cleanup_ui_out_tuple_begin_end (uiout, "thread-ids");

  for (tp = thread_list; tp; tp = tp->next)
    {
      if (tp->state == THREAD_EXITED)
	continue;

      if (ptid_equal (tp->ptid, inferior_ptid))
	current_thread = tp->num;

      num++;
      ui_out_field_int (uiout, "thread-id", tp->num);
    }

  do_cleanups (cleanup_chain);

  if (current_thread != -1)
    ui_out_field_int (uiout, "current-thread-id", current_thread);
  ui_out_field_int (uiout, "number-of-threads", num);
  return GDB_RC_OK;
}

/* Official gdblib interface function to get a list of thread ids and
   the total number.  */
enum gdb_rc
gdb_list_thread_ids (struct ui_out *uiout, char **error_message)
{
  if (catch_exceptions_with_msg (uiout, do_captured_list_thread_ids, NULL,
				 error_message, RETURN_MASK_ALL) < 0)
    return GDB_RC_FAIL;
  return GDB_RC_OK;
}

/* Return true if TP is an active thread.  */
static int
thread_alive (struct thread_info *tp)
{
  if (tp->state == THREAD_EXITED)
    return 0;
  if (!target_thread_alive (tp->ptid))
    return 0;
  return 1;
}

static void
prune_threads (void)
{
  struct thread_info *tp, *next;

  for (tp = thread_list; tp; tp = next)
    {
      next = tp->next;
      if (!thread_alive (tp))
	delete_thread (tp->ptid);
    }
}

void
thread_change_ptid (ptid_t old_ptid, ptid_t new_ptid)
{
  struct inferior *inf;
  struct thread_info *tp;

  /* It can happen that what we knew as the target inferior id
     changes.  E.g, target remote may only discover the remote process
     pid after adding the inferior to GDB's list.  */
  inf = find_inferior_pid (ptid_get_pid (old_ptid));
  inf->pid = ptid_get_pid (new_ptid);

  tp = find_thread_ptid (old_ptid);
  tp->ptid = new_ptid;

  observer_notify_thread_ptid_changed (old_ptid, new_ptid);
}

void
set_running (ptid_t ptid, int running)
{
  struct thread_info *tp;
  int all = ptid_equal (ptid, minus_one_ptid);

  /* We try not to notify the observer if no thread has actually changed 
     the running state -- merely to reduce the number of messages to 
     frontend.  Frontend is supposed to handle multiple *running just fine.  */
  if (all || ptid_is_pid (ptid))
    {
      int any_started = 0;

      for (tp = thread_list; tp; tp = tp->next)
	if (all || ptid_get_pid (tp->ptid) == ptid_get_pid (ptid))
	  {
	    if (tp->state == THREAD_EXITED)
	      continue;
	    if (running && tp->state == THREAD_STOPPED)
	      any_started = 1;
	    tp->state = running ? THREAD_RUNNING : THREAD_STOPPED;
	  }
      if (any_started)
	observer_notify_target_resumed (ptid);
    }
  else
    {
      int started = 0;

      tp = find_thread_ptid (ptid);
      gdb_assert (tp);
      gdb_assert (tp->state != THREAD_EXITED);
      if (running && tp->state == THREAD_STOPPED)
 	started = 1;
      tp->state = running ? THREAD_RUNNING : THREAD_STOPPED;
      if (started)
  	observer_notify_target_resumed (ptid);
    }
}

static int
is_thread_state (ptid_t ptid, enum thread_state state)
{
  struct thread_info *tp;

  tp = find_thread_ptid (ptid);
  gdb_assert (tp);
  return tp->state == state;
}

int
is_stopped (ptid_t ptid)
{
  return is_thread_state (ptid, THREAD_STOPPED);
}

int
is_exited (ptid_t ptid)
{
  return is_thread_state (ptid, THREAD_EXITED);
}

int
is_running (ptid_t ptid)
{
  return is_thread_state (ptid, THREAD_RUNNING);
}

int
any_running (void)
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (tp->state == THREAD_RUNNING)
      return 1;

  return 0;
}

int
is_executing (ptid_t ptid)
{
  struct thread_info *tp;

  tp = find_thread_ptid (ptid);
  gdb_assert (tp);
  return tp->executing;
}

void
set_executing (ptid_t ptid, int executing)
{
  struct thread_info *tp;
  int all = ptid_equal (ptid, minus_one_ptid);

  if (all || ptid_is_pid (ptid))
    {
      for (tp = thread_list; tp; tp = tp->next)
	if (all || ptid_get_pid (tp->ptid) == ptid_get_pid (ptid))
	  tp->executing = executing;
    }
  else
    {
      tp = find_thread_ptid (ptid);
      gdb_assert (tp);
      tp->executing = executing;
    }
}

void
set_stop_requested (ptid_t ptid, int stop)
{
  struct thread_info *tp;
  int all = ptid_equal (ptid, minus_one_ptid);

  if (all || ptid_is_pid (ptid))
    {
      for (tp = thread_list; tp; tp = tp->next)
	if (all || ptid_get_pid (tp->ptid) == ptid_get_pid (ptid))
	  tp->stop_requested = stop;
    }
  else
    {
      tp = find_thread_ptid (ptid);
      gdb_assert (tp);
      tp->stop_requested = stop;
    }

  /* Call the stop requested observer so other components of GDB can
     react to this request.  */
  if (stop)
    observer_notify_thread_stop_requested (ptid);
}

void
finish_thread_state (ptid_t ptid)
{
  struct thread_info *tp;
  int all;
  int any_started = 0;

  all = ptid_equal (ptid, minus_one_ptid);

  if (all || ptid_is_pid (ptid))
    {
      for (tp = thread_list; tp; tp = tp->next)
	{
 	  if (tp->state == THREAD_EXITED)
  	    continue;
	  if (all || ptid_get_pid (ptid) == ptid_get_pid (tp->ptid))
	    {
	      if (tp->executing && tp->state == THREAD_STOPPED)
		any_started = 1;
	      tp->state = tp->executing ? THREAD_RUNNING : THREAD_STOPPED;
	    }
	}
    }
  else
    {
      tp = find_thread_ptid (ptid);
      gdb_assert (tp);
      if (tp->state != THREAD_EXITED)
	{
	  if (tp->executing && tp->state == THREAD_STOPPED)
	    any_started = 1;
	  tp->state = tp->executing ? THREAD_RUNNING : THREAD_STOPPED;
	}
    }

  if (any_started)
    observer_notify_target_resumed (ptid);
}

void
finish_thread_state_cleanup (void *arg)
{
  ptid_t *ptid_p = arg;

  gdb_assert (arg);

  finish_thread_state (*ptid_p);
}

int
pc_in_thread_step_range (CORE_ADDR pc, struct thread_info *thread)
{
  return (pc >= thread->control.step_range_start
	  && pc < thread->control.step_range_end);
}

/* Prints the list of threads and their details on UIOUT.
   This is a version of 'info_threads_command' suitable for
   use from MI.
   If REQUESTED_THREAD is not -1, it's the GDB id of the thread
   that should be printed.  Otherwise, all threads are
   printed.
   If PID is not -1, only print threads from the process PID.
   Otherwise, threads from all attached PIDs are printed.
   If both REQUESTED_THREAD and PID are not -1, then the thread
   is printed if it belongs to the specified process.  Otherwise,
   an error is raised.  */
void
print_thread_info (struct ui_out *uiout, char *requested_threads, int pid)
{
  struct thread_info *tp;
  ptid_t current_ptid;
  struct cleanup *old_chain;
  char *extra_info, *name, *target_id;
  int current_thread = -1;

  update_thread_list ();
  current_ptid = inferior_ptid;

  /* We'll be switching threads temporarily.  */
  old_chain = make_cleanup_restore_current_thread ();

  /* For backward compatibility, we make a list for MI.  A table is
     preferable for the CLI, though, because it shows table
     headers.  */
  if (ui_out_is_mi_like_p (uiout))
    make_cleanup_ui_out_list_begin_end (uiout, "threads");
  else
    {
      int n_threads = 0;

      for (tp = thread_list; tp; tp = tp->next)
	{
	  if (!number_is_in_list (requested_threads, tp->num))
	    continue;

	  if (pid != -1 && ptid_get_pid (tp->ptid) != pid)
	    continue;

	  if (tp->state == THREAD_EXITED)
	    continue;

	  ++n_threads;
	}

      if (n_threads == 0)
	{
	  if (requested_threads == NULL || *requested_threads == '\0')
	    ui_out_message (uiout, 0, _("No threads.\n"));
	  else
	    ui_out_message (uiout, 0, _("No threads match '%s'.\n"),
			    requested_threads);
	  do_cleanups (old_chain);
	  return;
	}

      make_cleanup_ui_out_table_begin_end (uiout, 4, n_threads, "threads");

      ui_out_table_header (uiout, 1, ui_left, "current", "");
      ui_out_table_header (uiout, 4, ui_left, "id", "Id");
      ui_out_table_header (uiout, 17, ui_left, "target-id", "Target Id");
      ui_out_table_header (uiout, 1, ui_left, "frame", "Frame");
      ui_out_table_body (uiout);
    }

  for (tp = thread_list; tp; tp = tp->next)
    {
      struct cleanup *chain2;
      int core;

      if (!number_is_in_list (requested_threads, tp->num))
	continue;

      if (pid != -1 && ptid_get_pid (tp->ptid) != pid)
	{
	  if (requested_threads != NULL && *requested_threads != '\0')
	    error (_("Requested thread not found in requested process"));
	  continue;
	}

      if (ptid_equal (tp->ptid, current_ptid))
	current_thread = tp->num;

      if (tp->state == THREAD_EXITED)
	continue;

      chain2 = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);

      if (ui_out_is_mi_like_p (uiout))
	{
	  /* Compatibility.  */
	  if (ptid_equal (tp->ptid, current_ptid))
	    ui_out_text (uiout, "* ");
	  else
	    ui_out_text (uiout, "  ");
	}
      else
	{
	  if (ptid_equal (tp->ptid, current_ptid))
	    ui_out_field_string (uiout, "current", "*");
	  else
	    ui_out_field_skip (uiout, "current");
	}

      ui_out_field_int (uiout, "id", tp->num);

      /* For the CLI, we stuff everything into the target-id field.
	 This is a gross hack to make the output come out looking
	 correct.  The underlying problem here is that ui-out has no
	 way to specify that a field's space allocation should be
	 shared by several fields.  For MI, we do the right thing
	 instead.  */

      target_id = target_pid_to_str (tp->ptid);
      extra_info = target_extra_thread_info (tp);
      name = tp->name ? tp->name : target_thread_name (tp);

      if (ui_out_is_mi_like_p (uiout))
	{
	  ui_out_field_string (uiout, "target-id", target_id);
	  if (extra_info)
	    ui_out_field_string (uiout, "details", extra_info);
	  if (name)
	    ui_out_field_string (uiout, "name", name);
	}
      else
	{
	  struct cleanup *str_cleanup;
	  char *contents;

	  if (extra_info && name)
	    contents = xstrprintf ("%s \"%s\" (%s)", target_id,
				   name, extra_info);
	  else if (extra_info)
	    contents = xstrprintf ("%s (%s)", target_id, extra_info);
	  else if (name)
	    contents = xstrprintf ("%s \"%s\"", target_id, name);
	  else
	    contents = xstrdup (target_id);
	  str_cleanup = make_cleanup (xfree, contents);

	  ui_out_field_string (uiout, "target-id", contents);
	  do_cleanups (str_cleanup);
	}

      if (tp->state == THREAD_RUNNING)
	ui_out_text (uiout, "(running)\n");
      else
	{
	  /* The switch below puts us at the top of the stack (leaf
	     frame).  */
	  switch_to_thread (tp->ptid);
	  print_stack_frame (get_selected_frame (NULL),
			     /* For MI output, print frame level.  */
			     ui_out_is_mi_like_p (uiout),
			     LOCATION, 0);
	}

      if (ui_out_is_mi_like_p (uiout))
	{
	  char *state = "stopped";

	  if (tp->state == THREAD_RUNNING)
	    state = "running";
	  ui_out_field_string (uiout, "state", state);
	}

      core = target_core_of_thread (tp->ptid);
      if (ui_out_is_mi_like_p (uiout) && core != -1)
	ui_out_field_int (uiout, "core", core);

      do_cleanups (chain2);
    }

  /* Restores the current thread and the frame selected before
     the "info threads" command.  */
  do_cleanups (old_chain);

  if (pid == -1 && requested_threads == NULL)
    {
      gdb_assert (current_thread != -1
		  || !thread_list
		  || ptid_equal (inferior_ptid, null_ptid));
      if (current_thread != -1 && ui_out_is_mi_like_p (uiout))
	ui_out_field_int (uiout, "current-thread-id", current_thread);

      if (current_thread != -1 && is_exited (current_ptid))
	ui_out_message (uiout, 0, "\n\
The current thread <Thread ID %d> has terminated.  See `help thread'.\n",
			current_thread);
      else if (thread_list
	       && current_thread == -1
	       && ptid_equal (current_ptid, null_ptid))
	ui_out_message (uiout, 0, "\n\
No selected thread.  See `help thread'.\n");
    }
}

/* Print information about currently known threads 

   Optional ARG is a thread id, or list of thread ids.

   Note: this has the drawback that it _really_ switches
         threads, which frees the frame cache.  A no-side
         effects info-threads command would be nicer.  */

static void
info_threads_command (char *arg, int from_tty)
{
  print_thread_info (current_uiout, arg, -1);
}

/* Switch from one thread to another.  */

void
switch_to_thread (ptid_t ptid)
{
  /* Switch the program space as well, if we can infer it from the now
     current thread.  Otherwise, it's up to the caller to select the
     space it wants.  */
  if (!ptid_equal (ptid, null_ptid))
    {
      struct inferior *inf;

      inf = find_inferior_pid (ptid_get_pid (ptid));
      gdb_assert (inf != NULL);
      set_current_program_space (inf->pspace);
      set_current_inferior (inf);
    }

  if (ptid_equal (ptid, inferior_ptid))
    return;

  inferior_ptid = ptid;
  reinit_frame_cache ();

  /* We don't check for is_stopped, because we're called at times
     while in the TARGET_RUNNING state, e.g., while handling an
     internal event.  */
  if (!ptid_equal (inferior_ptid, null_ptid)
      && !is_exited (ptid)
      && !is_executing (ptid))
    stop_pc = regcache_read_pc (get_thread_regcache (ptid));
  else
    stop_pc = ~(CORE_ADDR) 0;
}

static void
restore_current_thread (ptid_t ptid)
{
  switch_to_thread (ptid);
}

static void
restore_selected_frame (struct frame_id a_frame_id, int frame_level)
{
  struct frame_info *frame = NULL;
  int count;

  /* This means there was no selected frame.  */
  if (frame_level == -1)
    {
      select_frame (NULL);
      return;
    }

  gdb_assert (frame_level >= 0);

  /* Restore by level first, check if the frame id is the same as
     expected.  If that fails, try restoring by frame id.  If that
     fails, nothing to do, just warn the user.  */

  count = frame_level;
  frame = find_relative_frame (get_current_frame (), &count);
  if (count == 0
      && frame != NULL
      /* The frame ids must match - either both valid or both outer_frame_id.
	 The latter case is not failsafe, but since it's highly unlikely
	 the search by level finds the wrong frame, it's 99.9(9)% of
	 the time (for all practical purposes) safe.  */
      && frame_id_eq (get_frame_id (frame), a_frame_id))
    {
      /* Cool, all is fine.  */
      select_frame (frame);
      return;
    }

  frame = frame_find_by_id (a_frame_id);
  if (frame != NULL)
    {
      /* Cool, refound it.  */
      select_frame (frame);
      return;
    }

  /* Nothing else to do, the frame layout really changed.  Select the
     innermost stack frame.  */
  select_frame (get_current_frame ());

  /* Warn the user.  */
  if (frame_level > 0 && !ui_out_is_mi_like_p (current_uiout))
    {
      warning (_("Couldn't restore frame #%d in "
		 "current thread.  Bottom (innermost) frame selected:"),
	       frame_level);
      /* For MI, we should probably have a notification about
	 current frame change.  But this error is not very
	 likely, so don't bother for now.  */
      print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC, 1);
    }
}

struct current_thread_cleanup
{
  ptid_t inferior_ptid;
  struct frame_id selected_frame_id;
  int selected_frame_level;
  int was_stopped;
  int inf_id;
  int was_removable;
};

static void
do_restore_current_thread_cleanup (void *arg)
{
  struct thread_info *tp;
  struct current_thread_cleanup *old = arg;

  tp = find_thread_ptid (old->inferior_ptid);

  /* If the previously selected thread belonged to a process that has
     in the mean time been deleted (due to normal exit, detach, etc.),
     then don't revert back to it, but instead simply drop back to no
     thread selected.  */
  if (tp
      && find_inferior_pid (ptid_get_pid (tp->ptid)) != NULL)
    restore_current_thread (old->inferior_ptid);
  else
    {
      restore_current_thread (null_ptid);
      set_current_inferior (find_inferior_id (old->inf_id));
    }

  /* The running state of the originally selected thread may have
     changed, so we have to recheck it here.  */
  if (!ptid_equal (inferior_ptid, null_ptid)
      && old->was_stopped
      && is_stopped (inferior_ptid)
      && target_has_registers
      && target_has_stack
      && target_has_memory)
    restore_selected_frame (old->selected_frame_id,
			    old->selected_frame_level);
}

static void
restore_current_thread_cleanup_dtor (void *arg)
{
  struct current_thread_cleanup *old = arg;
  struct thread_info *tp;
  struct inferior *inf;

  tp = find_thread_ptid (old->inferior_ptid);
  if (tp)
    tp->refcount--;
  inf = find_inferior_id (old->inf_id);
  if (inf != NULL)
    inf->removable = old->was_removable;
  xfree (old);
}

/* Set the thread reference count.  */

static void
set_thread_refcount (void *data)
{
  int k;
  struct thread_array_cleanup *ta_cleanup = data;

  for (k = 0; k != ta_cleanup->count; k++)
    ta_cleanup->tp_array[k]->refcount--;
}

struct cleanup *
make_cleanup_restore_current_thread (void)
{
  struct thread_info *tp;
  struct frame_info *frame;
  struct current_thread_cleanup *old;

  old = xmalloc (sizeof (struct current_thread_cleanup));
  old->inferior_ptid = inferior_ptid;
  old->inf_id = current_inferior ()->num;
  old->was_removable = current_inferior ()->removable;

  if (!ptid_equal (inferior_ptid, null_ptid))
    {
      old->was_stopped = is_stopped (inferior_ptid);
      if (old->was_stopped
	  && target_has_registers
	  && target_has_stack
	  && target_has_memory)
	{
	  /* When processing internal events, there might not be a
	     selected frame.  If we naively call get_selected_frame
	     here, then we can end up reading debuginfo for the
	     current frame, but we don't generally need the debuginfo
	     at this point.  */
	  frame = get_selected_frame_if_set ();
	}
      else
	frame = NULL;

      old->selected_frame_id = get_frame_id (frame);
      old->selected_frame_level = frame_relative_level (frame);

      tp = find_thread_ptid (inferior_ptid);
      if (tp)
	tp->refcount++;
    }

  current_inferior ()->removable = 0;

  return make_cleanup_dtor (do_restore_current_thread_cleanup, old,
			    restore_current_thread_cleanup_dtor);
}

/* Apply a GDB command to a list of threads.  List syntax is a whitespace
   seperated list of numbers, or ranges, or the keyword `all'.  Ranges consist
   of two numbers seperated by a hyphen.  Examples:

   thread apply 1 2 7 4 backtrace       Apply backtrace cmd to threads 1,2,7,4
   thread apply 2-7 9 p foo(1)  Apply p foo(1) cmd to threads 2->7 & 9
   thread apply all p x/i $pc   Apply x/i $pc cmd to all threads.  */

static void
thread_apply_all_command (char *cmd, int from_tty)
{
  struct cleanup *old_chain;
  char *saved_cmd;
  int tc;
  struct thread_array_cleanup ta_cleanup;

  if (cmd == NULL || *cmd == '\000')
    error (_("Please specify a command following the thread ID list"));

  update_thread_list ();

  old_chain = make_cleanup_restore_current_thread ();

  /* Save a copy of the command in case it is clobbered by
     execute_command.  */
  saved_cmd = xstrdup (cmd);
  make_cleanup (xfree, saved_cmd);
  tc = thread_count ();

  if (tc)
    {
      struct thread_info **tp_array;
      struct thread_info *tp;
      int i = 0, k;

      /* Save a copy of the thread_list in case we execute detach
         command.  */
      tp_array = xmalloc (sizeof (struct thread_info *) * tc);
      make_cleanup (xfree, tp_array);
      ta_cleanup.tp_array = tp_array;
      ta_cleanup.count = tc;

      ALL_THREADS (tp)
        {
          tp_array[i] = tp;
          tp->refcount++;
          i++;
        }

      make_cleanup (set_thread_refcount, &ta_cleanup);

      for (k = 0; k != i; k++)
        if (thread_alive (tp_array[k]))
          {
            switch_to_thread (tp_array[k]->ptid);
            printf_filtered (_("\nThread %d (%s):\n"), 
			     tp_array[k]->num,
			     target_pid_to_str (inferior_ptid));
            execute_command (cmd, from_tty);

            /* Restore exact command used previously.  */
            strcpy (cmd, saved_cmd);
	  }
    }

  do_cleanups (old_chain);
}

static void
thread_apply_command (char *tidlist, int from_tty)
{
  char *cmd;
  struct cleanup *old_chain;
  char *saved_cmd;
  struct get_number_or_range_state state;

  if (tidlist == NULL || *tidlist == '\000')
    error (_("Please specify a thread ID list"));

  for (cmd = tidlist; *cmd != '\000' && !isalpha (*cmd); cmd++);

  if (*cmd == '\000')
    error (_("Please specify a command following the thread ID list"));

  /* Save a copy of the command in case it is clobbered by
     execute_command.  */
  saved_cmd = xstrdup (cmd);
  old_chain = make_cleanup (xfree, saved_cmd);

  init_number_or_range (&state, tidlist);
  while (!state.finished && state.string < cmd)
    {
      struct thread_info *tp;
      int start;

      start = get_number_or_range (&state);

      make_cleanup_restore_current_thread ();

      tp = find_thread_id (start);

      if (!tp)
	warning (_("Unknown thread %d."), start);
      else if (!thread_alive (tp))
	warning (_("Thread %d has terminated."), start);
      else
	{
	  switch_to_thread (tp->ptid);

	  printf_filtered (_("\nThread %d (%s):\n"), tp->num,
			   target_pid_to_str (inferior_ptid));
	  execute_command (cmd, from_tty);

	  /* Restore exact command used previously.  */
	  strcpy (cmd, saved_cmd);
	}
    }

  do_cleanups (old_chain);
}

/* Switch to the specified thread.  Will dispatch off to thread_apply_command
   if prefix of arg is `apply'.  */

static void
thread_command (char *tidstr, int from_tty)
{
  if (!tidstr)
    {
      if (ptid_equal (inferior_ptid, null_ptid))
	error (_("No thread selected"));

      if (target_has_stack)
	{
	  if (is_exited (inferior_ptid))
	    printf_filtered (_("[Current thread is %d (%s) (exited)]\n"),
			     pid_to_thread_id (inferior_ptid),
			     target_pid_to_str (inferior_ptid));
	  else
	    printf_filtered (_("[Current thread is %d (%s)]\n"),
			     pid_to_thread_id (inferior_ptid),
			     target_pid_to_str (inferior_ptid));
	}
      else
	error (_("No stack."));
      return;
    }

  gdb_thread_select (current_uiout, tidstr, NULL);
}

/* Implementation of `thread name'.  */

static void
thread_name_command (char *arg, int from_tty)
{
  struct thread_info *info;

  if (ptid_equal (inferior_ptid, null_ptid))
    error (_("No thread selected"));

  arg = skip_spaces (arg);

  info = inferior_thread ();
  xfree (info->name);
  info->name = arg ? xstrdup (arg) : NULL;
}

/* Find thread ids with a name, target pid, or extra info matching ARG.  */

static void
thread_find_command (char *arg, int from_tty)
{
  struct thread_info *tp;
  char *tmp;
  unsigned long match = 0;

  if (arg == NULL || *arg == '\0')
    error (_("Command requires an argument."));

  tmp = re_comp (arg);
  if (tmp != 0)
    error (_("Invalid regexp (%s): %s"), tmp, arg);

  update_thread_list ();
  for (tp = thread_list; tp; tp = tp->next)
    {
      if (tp->name != NULL && re_exec (tp->name))
	{
	  printf_filtered (_("Thread %d has name '%s'\n"),
			   tp->num, tp->name);
	  match++;
	}

      tmp = target_thread_name (tp);
      if (tmp != NULL && re_exec (tmp))
	{
	  printf_filtered (_("Thread %d has target name '%s'\n"),
			   tp->num, tmp);
	  match++;
	}

      tmp = target_pid_to_str (tp->ptid);
      if (tmp != NULL && re_exec (tmp))
	{
	  printf_filtered (_("Thread %d has target id '%s'\n"),
			   tp->num, tmp);
	  match++;
	}

      tmp = target_extra_thread_info (tp);
      if (tmp != NULL && re_exec (tmp))
	{
	  printf_filtered (_("Thread %d has extra info '%s'\n"),
			   tp->num, tmp);
	  match++;
	}
    }
  if (!match)
    printf_filtered (_("No threads match '%s'\n"), arg);
}

/* Print notices when new threads are attached and detached.  */
int print_thread_events = 1;
static void
show_print_thread_events (struct ui_file *file, int from_tty,
                          struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file,
		    _("Printing of thread events is %s.\n"),
                    value);
}

static int
do_captured_thread_select (struct ui_out *uiout, void *tidstr)
{
  int num;
  struct thread_info *tp;

  num = value_as_long (parse_and_eval (tidstr));

  tp = find_thread_id (num);

  if (!tp)
    error (_("Thread ID %d not known."), num);

  if (!thread_alive (tp))
    error (_("Thread ID %d has terminated."), num);

  switch_to_thread (tp->ptid);

  annotate_thread_changed ();

  ui_out_text (uiout, "[Switching to thread ");
  ui_out_field_int (uiout, "new-thread-id", pid_to_thread_id (inferior_ptid));
  ui_out_text (uiout, " (");
  ui_out_text (uiout, target_pid_to_str (inferior_ptid));
  ui_out_text (uiout, ")]");

  /* Note that we can't reach this with an exited thread, due to the
     thread_alive check above.  */
  if (tp->state == THREAD_RUNNING)
    ui_out_text (uiout, "(running)\n");
  else
    {
      ui_out_text (uiout, "\n");
      print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC, 1);
    }

  /* Since the current thread may have changed, see if there is any
     exited thread we can now delete.  */
  prune_threads ();

  return GDB_RC_OK;
}

enum gdb_rc
gdb_thread_select (struct ui_out *uiout, char *tidstr, char **error_message)
{
  if (catch_exceptions_with_msg (uiout, do_captured_thread_select, tidstr,
				 error_message, RETURN_MASK_ALL) < 0)
    return GDB_RC_FAIL;
  return GDB_RC_OK;
}

void
update_thread_list (void)
{
  prune_threads ();
  target_find_new_threads ();
}

/* Return a new value for the selected thread's id.  Return a value of 0 if
   no thread is selected, or no threads exist.  */

static struct value *
thread_id_make_value (struct gdbarch *gdbarch, struct internalvar *var,
		      void *ignore)
{
  struct thread_info *tp = find_thread_ptid (inferior_ptid);

  return value_from_longest (builtin_type (gdbarch)->builtin_int,
			     (tp ? tp->num : 0));
}

/* Commands with a prefix of `thread'.  */
struct cmd_list_element *thread_cmd_list = NULL;

/* Implementation of `thread' variable.  */

static const struct internalvar_funcs thread_funcs =
{
  thread_id_make_value,
  NULL,
  NULL
};

void
_initialize_thread (void)
{
  static struct cmd_list_element *thread_apply_list = NULL;

  add_info ("threads", info_threads_command, 
	    _("Display currently known threads.\n\
Usage: info threads [ID]...\n\
Optional arguments are thread IDs with spaces between.\n\
If no arguments, all threads are displayed."));

  add_prefix_cmd ("thread", class_run, thread_command, _("\
Use this command to switch between threads.\n\
The new thread ID must be currently known."),
		  &thread_cmd_list, "thread ", 1, &cmdlist);

  add_prefix_cmd ("apply", class_run, thread_apply_command,
		  _("Apply a command to a list of threads."),
		  &thread_apply_list, "thread apply ", 1, &thread_cmd_list);

  add_cmd ("all", class_run, thread_apply_all_command,
	   _("Apply a command to all threads."), &thread_apply_list);

  add_cmd ("name", class_run, thread_name_command,
	   _("Set the current thread's name.\n\
Usage: thread name [NAME]\n\
If NAME is not given, then any existing name is removed."), &thread_cmd_list);

  add_cmd ("find", class_run, thread_find_command, _("\
Find threads that match a regular expression.\n\
Usage: thread find REGEXP\n\
Will display thread ids whose name, target ID, or extra info matches REGEXP."),
	   &thread_cmd_list);

  if (!xdb_commands)
    add_com_alias ("t", "thread", class_run, 1);

  add_setshow_boolean_cmd ("thread-events", no_class,
         &print_thread_events, _("\
Set printing of thread events (such as thread start and exit)."), _("\
Show printing of thread events (such as thread start and exit)."), NULL,
         NULL,
         show_print_thread_events,
         &setprintlist, &showprintlist);

  create_internalvar_type_lazy ("_thread", &thread_funcs, NULL);
}
@


1.157
log
@PR gdb/15911: "info threads" changes the default source and line (for "break", "list")

"info threads" changes the default source for "break" and "list", to
whatever the location of the first/bottom thread in the thread list
is...

 (gdb) b start
 (gdb) c
 ...
 (gdb) list
 *lists "start"*
 (gdb) b 23
 Breakpoint 3 at 0x400614: file test.c, line 23.
 (gdb) info threads
   Id   Target Id         Frame
 * 2    Thread 0x7ffff7fcb700 (LWP 1760) "test" start (arg=0x0) at test.c:23
   1    Thread 0x7ffff7fcc740 (LWP 1748) "test" 0x000000323dc08e60 in pthread_join (threadid=140737353922304, thread_return=0x0) at pthread_join.c:93
 (gdb) b 23
 Breakpoint 4 at 0x323dc08d90: file pthread_join.c, line 23.
                                    ^^^^^^^^^^^^^^^
 (gdb) list
 93          lll_wait_tid (pd->tid);
 94
 95
 96        /* Restore cancellation mode.  */
 97        CANCEL_RESET (oldtype);
 98
 99        /* Remove the handler.  */
 100       pthread_cleanup_pop (0);
 101
 102

The issue is that print_stack_frame always sets the current sal to the
frame's sal.  print_frame_info (which print_stack_frame calls to do
most of the work) also sets the last displayed sal, but only if
print_what isn't LOCATION.  Now the call in question, from within
thread.c:print_thread_info, does pass in LOCATION as print_what, but
print_stack_frame doesn't have the same check print_frame_info has.
We could consider adding it, but setting these globals depending on
print_what isn't very clean, IMO.  What we have is two logically
distinct operations mixed in the same function(s):

  #1 - print frame, in the format specified by {print_what,
    print_level and print_args}.

  #2 - We're displaying a frame to the user, and I want the default
    sal to point here, because the program stopped here, or the user
    did some context-changing command (up, down, etc.).

So I added a new parameter to print_stack_frame & friends for point
#2, and went through all calls in the tree adjusting as necessary.

Tested on x86_64 Fedora 17.

gdb/
2013-09-17  Pedro Alves  <palves@@redhat.com>

	PR gdb/15911
	* ada-tasks.c (task_command_1): Adjust call to print_stack_frame.
	* bsd-kvm.c (bsd_kvm_open, bsd_kvm_proc_cmd, bsd_kvm_pcb_cmd):
	* corelow.c (core_open):
	* frame.h (print_stack_frame, print_frame_info): New
	'set_current_sal' parameter.
	* infcmd.c (finish_command, kill_command): Adjust call to
	print_stack_frame.
	* inferior.c (inferior_command): Likewise.
	* infrun.c (normal_stop): Likewise.
	* linux-fork.c (linux_fork_context): Likewise.
	* record-full.c (record_full_goto_entry, record_full_restore):
	Likewise.
	* remote-mips.c (common_open): Likewise.
	* stack.c (print_stack_frame): New 'set_current_sal' parameter.
	Use it.
	(print_frame_info): New 'set_current_sal' parameter.  Set the last
	displayed sal depending on the new paremeter instead of looking at
	print_what.
	(backtrace_command_1, select_and_print_frame, frame_command)
	(current_frame_command, up_command, down_command): Adjust call to
	print_stack_frame.
	* thread.c (print_thread_info, restore_selected_frame)
	(do_captured_thread_select): Adjust call to print_stack_frame.
	* tracepoint.c (tfind_1): Likewise.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_frame): Likewise.
	* mi/mi-interp.c (mi_on_normal_stop): Likewise.
	* mi/mi-main.c (mi_cmd_exec_return, mi_cmd_trace_find): Likewise.

	gdb/testsuite/
	* gdb.threads/info-threads-cur-sal-2.c: New file.
	* gdb.threads/info-threads-cur-sal.c: New file.
	* gdb.threads/info-threads-cur-sal.exp: New file.
@
text
@d813 1
a813 1
	  if (pid != -1 && PIDGET (tp->ptid) != pid)
d850 1
a850 1
      if (pid != -1 && PIDGET (tp->ptid) != pid)
@


1.156
log
@restore_selected_frame: tweak warning.

I noticed SRC_LINE has special handling within print_stack_frame (mid
statement handling), so I audited all uses, and noticed the one in
restore_selected_frame.  I actually added this warning myself back in
2008, but reading back, I think we can do better.  "reparsed frame" is
probably confusing to users.

Old:

 warning: Couldn't restore frame #2 in current thread, at reparsed frame #0

 45         w = 0;
 (gdb)

New:

 warning: Couldn't restore frame #2 in current thread.  Bottom (innermost) frame selected:
 #0  foo () at foo.c:45
 45         w = 0;
 (gdb)

Tested on x86_64 Fedora 17.

gdb/
2013-08-30  Pedro Alves  <palves@@redhat.com>

	* thread.c (restore_selected_frame): Use SRC_AND_LOC, and change
	warning text.
@
text
@d932 1
a932 1
			     LOCATION);
d1085 1
a1085 1
      print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
d1470 1
a1470 1
      print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
@


1.155
log
@2013-07-15  Ali Anwar  <ali_anwar@@codesourcery.com>

        PR threads/13217
        * thread.c (thread_apply_all_command): Check for valid threads
        and thread count.
        (thread_array_cleanup): New struct.
        (set_thread_refcount): New function.
@
text
@d1080 1
a1080 1
		 "current thread, at reparsed frame #0\n"),
d1085 1
a1085 1
      print_stack_frame (get_selected_frame (NULL), 1, SRC_LINE);
@


1.154
log
@Factor out in-stepping-range checks.

This adds a function for doing within-thread's-stepping-range checks,
and converts a couple spots to use it.  Following patches will add
more uses.

gdb/
2013-05-23  Yao Qi  <yao@@codesourcery.com>
	    Pedro Alves  <palves@@redhat.com>

	* gdbthread.h (pc_in_thread_step_range): New declaration.
	* thread.c (pc_in_thread_step_range): New function.
	* infrun.c (handle_inferior_event): Use it.
@
text
@d68 13
d1148 12
a1214 1
  struct thread_info *tp;
d1217 2
d1231 32
a1262 4
  for (tp = thread_list; tp; tp = tp->next)
    if (thread_alive (tp))
      {
	switch_to_thread (tp->ptid);
d1264 4
a1267 6
	printf_filtered (_("\nThread %d (%s):\n"),
			 tp->num, target_pid_to_str (inferior_ptid));
	execute_command (cmd, from_tty);
	strcpy (cmd, saved_cmd);	/* Restore exact command used
					   previously.  */
      }
@


1.153
log
@Add branch trace information to struct thread_info.

Add functions to enable, disable, clear, and fetch a thread's branch trace.

gdb/
	* target.h: Include btrace.h.
	(struct target_ops) <to_supports_btrace, to_enable_btrace,
	to_disable_btrace, to_teardown_btrace, to_read_btrace>: New.
	* target.c (target_supports_btrace): New function.
	(target_enable_btrace): New function.
	(target_disable_btrace): New function.
	(target_teardown_btrace): New function.
	(target_read_btrace): New function.
	* btrace.h: New file.
	* btrace.c: New file.
	* Makefile.in: Add btrace.c.
	* gdbthread.h: Include btrace.h.
	(struct thread_info): Add btrace field.
	* thread.c: Include btrace.h.
	(clear_thread_inferior_resources): Call target_teardown_btrace.
	* common/btrace-common.h: New file.
@
text
@d753 7
@


1.152
log
@	* breakpoint.c (catch_syscall_split_args): Use skip_spaces.
	(trace_pass_command): Likewise.
	* cli/cli-cmds.c: Include cli/cli-utils.h.
	(source_command): Use skip-spaces.
	(disassemble_command): Likewise.
	* findcmd.c: Include cli/cli-utils.h.
	(parse_find_args): Use skip_spaces.
	* go32-nat.c: Include cli/cli-utils.h.
	(go32_sldt): Use skip_spaces.
	(go32_sgdt): Likewise.
	(go32_sidt): Likewise.
	(go32_pde): Likewise.
	(go32_pte): Likewise.
	(go32_pte_for_address): Likewise.
	* infcmd.c: Include cli/cli-utils.h.
	(registers_info): Use skip_spaces.
	* linux-tdep.c (read_mapping): Use skip_spaces_const.
	(linux_info_proc): Likewise.
	* linux-thread-db.c: Include cli/cli-utils.h.
	(info_auto_load_libthread_db): Use skip_spaces_const.
	* m32r-rom.c: Include cli/cli-utils.h.
	(m32r_upload_command): Use skip_spaces.
	* maint.c: Include cli/cli-utils.h.
	(maintenance_translate_address): Use skip_spaces.
	* mi/mi-parse.c: Include cli/cli-utils.h.
	(mi_parse_argv): Use skip_spaces.
	(mi_parse): Likewise.
	* minsyms.c: Include cli/cli-utils.h.
	(msymbol_hash_iw): Use skip_spaces_const.
	* objc-lang.c: Include cli/cli-utils.h.
	(parse_selector): Use skip_spaces.
	(parse_method): Likewise.
	* python/python.c: Include cli/cli-utils.h.
	(python_interactive_command)[HAVE_PYTHON]: Use skip_spaces.
	(python_command)[HAVE_PYTHON]: Likewise.
	(python_interactive_command)[!HAVE_PYTHON]: Likewise.
	* remote-m32r-sdi.c: Include cli/cli-utils.h.
	(m32r_load): Use skip_spaces.
	* serial.c: Include cli/cli-utils.h.
	(serial_open): Use skip_spaces_const.
	* stack.c: Include cli/cli-utils.h.
	(parse_frame_specification_1): Use skip_spaces_const.
	* symfile.c: Include cli/cli-utils.h.
	(set_ext_lang_command): Use skip_spaces.
	* symtab.c: Include cli/cli-utils.h.
	(rbreak_command): Use skip_spaces.
	* thread.c (thread_name_command): Use skip_spaces.
	* tracepoint.c (validate_actionline): Use skip_spaces.
	(encode_actions_1): Likewise.
	(trace_find_range_command): Likewise.
	(trace_find_outside_command): Likewise.
	(trace_dump_actions): Likewise.
@
text
@d36 1
d120 2
@


1.151
log
@2013-01-31  Aleksandar Ristovski  <aristovski@@qnx.com>

	* charset.c (intermediate_encoding): Remove unused i.
	* completer.c (signal_completer): Remove unused i.
	* continuations.c (discard_my_continuations_1): Remove unused
	continuation_ptr.
	* corelow.c (core_close): Remove unuseD name.
	(get_core_siginfo): Remove unused pid.
	* cp-namespace.c (cp_lookup_symbol_imports_or_template): Remove unused
	i, cps.
	* dwarf2loc.c (dwarf2_compile_expr_to_ax): Remove unused base_offset.
	(loclist_describe_location): Remove unused first.
	* event-top.c (command_line_handler): Remove unused got_eof.
	* exec.c (exec_close_1): Remove unused need_symtab_cleanup.
	(resize_section_table): Remove unused old_value.
	* gdb_bfd.c (gdb_bfd_map_section): Remove unused header.
	* gnu-v3-abi.c (compute_vtable_size): Remove unused addr.
	* i386-tdep.c (i386_process_record): Remove unused rex.
	* infcmd.c (get_return_value): Remove unused uiout.
	* jv-lang.c (type_from_class): Remove unused is_array.
	* jv-valprint.c (java_val_print): Remove unused i.
	* linux-nat.c (linux_nat_stop_lwp): Remove unused ptid.
	* linux-thread-db.c (thread_db_find_new_threads_2): Remove unuseD pid.
	* m2-typeprint.c (m2_print_type): Remove unused code.
	* macroexp.c (get_character_constant): Remove unused body_start.
	(macro_stringify): Remove unused result.
	* objc-lang.c (find_methods): Remove unused gdbarch.
	* objfiles.c (filter_overlapping_sections): Remove unused abfd1, abfd2.
	* regcache.c (regcache_cooked_read): Remove unused gdbarch.
	* stack.c (print_frame_args): Remove unused summary.
	* thread.c (thread_apply_command): Remove unused p.
	* valarith.c (value_x_unop): Remove unused mangle_ptr.
	* valops.c (search_struct_method): Remove unused skip.
	* valprint.c (generic_val_print): Remove unused byte_order.
	* varobj.c (varobj_update): Remove unused changed.
	* cli/cli-cmds.c (complete_command): Remove unused next_item.
	(alias_command): Remove unused c.
	* mi/mi-cmd-catch.c (mi_catch_load_unload): Remove unused c.
	* mi/mi-main.c (mi_cmd_data_write_register_values): Remove unused
	format.
	(mi_cmd_data_write_memory): Remove unused word_format.
	(mi_cmd_data_write_memory_bytes): Remove unused r.
	* python/py-gdb-readline.c (gdbpy_readline_wrapper): Remove unused
	p_start, p_end.
	* python/python.c (_initialize_python): Remove unused cmd_name, cmd.
	* tui/tui-disasm.c (tui_set_disassem_content): Remove unused
	line_width.

Reference: http://sourceware.org/ml/gdb-patches/2013-01/msg00766.html
@
text
@d1303 1
a1303 2
  while (arg && isspace (*arg))
    ++arg;
@


1.150
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@a1235 1
      char *p = tidlist;
@


1.149
log
@gdb/
	* thread.c (switch_to_thread): Don't call registers_changed.
@
text
@d3 1
a3 2
   Copyright (C) 1986-1988, 1993-2004, 2007-2012 Free Software
   Foundation, Inc.
@


1.148
log
@gdb/
2012-06-28  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	    Pedro Alves  <palves@@redhat.com>

	* gdbthread.h (ALL_THREADS): New macro.
	(thread_list): Declare.
	* infrun.c (handle_inferior_event) <spurious signal>: Don't keep
	going, but instead fall through to the stepping handling.
	* linux-nat.c (resume_lwp): New parameter 'signo'.  Resume with
	the passed in signal.  Adjust debug output.
	(resume_callback): Rename to ...
	(linux_nat_resume_callback): ... this.  Pass the thread's last
	stop signal, if in "pass" state.
	(linux_nat_resume): Adjust to rename.
	(stop_wait_callback): New assertion.  Don't respawn signals;
	instead let the LWP remain with SIGNALLED set.
	(linux_nat_wait_1): Remove flushing of pending SIGSTOPs.
	* remote.c (append_pending_thread_resumptions): New.
	(remote_vcont_resume): Call it.
	* target.h (target_resume): Extend comment.

gdb/testsuite/
2012-06-28  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	    Pedro Alves  <palves@@redhat.com>

	* gdb.threads/siginfo-threads.exp: New file.
	* gdb.threads/siginfo-threads.c: New file.
	* gdb.threads/sigstep-threads.exp: New file.
	* gdb.threads/sigstep-threads.c: New file.
@
text
@a989 1
  registers_changed ();
@


1.147
log
@2012-04-27  Sergio Durigan Junior  <sergiodj@@redhat.com>
	    Tom Tromey  <tromey@@redhat.com>

	* ax-gdb.c (gen_expr): Clean up code to handle internal variables
	and to compile agent expressions.
	* infrun.c (siginfo_make_value): New argument `ignore'.
	(siginfo_funcs): New struct.
	(_initialize_infrun): New argument when calling
	`create_internalvar_type_lazy'.
	* thread.c (thread_id_make_value): New argument `ignore'.
	(thread_funcs): New struct.
	(_initialize_thread): New argument when calling
	`create_internalvar_type_lazy'.
	* tracepoint.c (sdata_make_value): New argument `ignore'.
	(sdata_funcs): New struct.
	(_initialize_tracepoint): New argument when calling
	`create_internalvar_type_lazy'.
	* value.c (make_value): New struct.
	(create_internalvar_type_lazy): New argument `data'.
	(compile_internalvar_to_ax): New function.
	(value_of_internalvar): Properly handling `make_value' case.
	(clear_internalvar): Likewise.
	(show_convenience): Adding `TRY_CATCH' block.
	* value.h (internalvar_make_value): Delete, replace by...
	(struct internalvar_funcs): ... this.
	(create_internalvar_type_lazy) <fun>: Delete argument.
	(create_internalvar_type_lazy) <funcs>, <data>: New arguments.
	(compile_internalvar_to_ax): New function.
	* windows-tdep.c (tlb_make_value): New argument `ignore'.
	(tlb_funcs): New struct.
	(_initialize_windows_tdep): New argument when calling
	`create_internalvar_type_lazy'.
@
text
@d57 1
a57 1
static struct thread_info *thread_list = NULL;
@


1.146
log
@2012-03-02  Tom Tromey  <tromey@@redhat.com>
	    Pedro Alves  <palves@@redhat.com>

	PR breakpoints/13776:
	* breakpoint.c (breakpoint_init_inferior): Delete step-resume
	breakpoints.
	(delete_longjmp_breakpoint_at_next_stop): New.
	* breakpoint.h (delete_longjmp_breakpoint_at_next_stop): Declare.
	* target.c (generic_mourn_inferior): Call mark_breakpoints_out
	before deleting the inferior.  Add comments.
	* thread.c (clear_thread_inferior_resources): Don't delete lonjmp
	breakpoints immediately, but only on next stop.  Move that code
	next to where we mark other breakpoints for deletion.
@
text
@d1442 2
a1443 1
thread_id_make_value (struct gdbarch *gdbarch, struct internalvar *var)
d1454 9
d1508 1
a1508 1
  create_internalvar_type_lazy ("_thread", thread_id_make_value);
@


1.145
log
@	PR c++/13653:
	* thread.c (struct current_thread_cleanup) <was_removable>: New
	field.
	(do_restore_current_thread_cleanup): Restore 'removable' field.
	(restore_current_thread_cleanup_dtor): Likewise.
	(make_cleanup_restore_current_thread): Initialize new field.
testsuite/gdb
	* gdb.base/inferior-died.c: New file.
	* gdb.base/inferior-died.exp: New file.
@
text
@d116 2
a121 2

  delete_longjmp_breakpoint (tp->num);
@


1.144
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d1075 1
d1116 1
d1121 3
d1137 1
d1165 2
@


1.143
log
@2011-09-13  Pedro Alves  <pedro@@codesourcery.com>

	* gdbthread.h (enum thread_state): Moved here.
	(struct thread_info): Rename `executing_' field to `executing' and
	`state_' to `state'.
	* thread.c (enum thread_state): Moved to gdbthread.h.
	(new_thread, add_thread_silent, delete_thread_1)
	(any_live_thread_of_process, thread_alive, set_running)
	(set_running, is_thread_state, any_running, is_executing)
	(set_executing, finish_thread_state, print_thread_info)
	(do_captured_thread_select): Adjust.
@
text
@d3 2
a4 3
   Copyright (C) 1986, 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.143.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 3
a5 2
   Copyright (C) 1986-1988, 1993-2004, 2007-2012 Free Software
   Foundation, Inc.
@


1.142
log
@2011-08-04  Pedro Alves  <pedro@@codesourcery.com>

	* ui-out.h (uiout): Rename to ...
	(current_uiout): ... this.
	* ui-out.c (uiout): Rename to ...
	(current_uiout): ... this.
	* ada-lang.c (print_it_exception, print_one_exception)
	(print_mention_exception): Adjust.
	* breakpoint.c (watchpoint_check): Adjust.
	(print_breakpoint_location, print_one_breakpoint, breakpoint_1)
	(default_collect_info, watchpoints_info, print_one_catch_fork)
	(print_one_catch_vfork, print_one_catch_syscall)
	(print_one_catch_exec, mention, print_it_ranged_breakpoint)
	(print_one_ranged_breakpoint, print_mention_ranged_breakpoint)
	(print_it_watchpoint, print_mention_watchpoint)
	(print_it_masked_watchpoint, print_mention_masked_watchpoint)
	(print_it_exception_catchpoint, print_one_exception_catchpoint)
	(print_mention_exception_catchpoint, say_where, bkpt_print_it)
	(bkpt_print_mention, momentary_bkpt_print_it)
	(tracepoint_print_mention, update_static_tracepoint)
	(tracepoints_info, save_breakpoints): Adjust.
	* cli-out.c (field_separator): Adjust.
	* cp-abi.c (list_cp_abis, show_cp_abi_cmd): Adjust.
	* exceptions.c (catch_exceptions_with_msg, catch_errors): Adjust.
	* frame.c (get_current_frame): Adjust.
	* infcmd.c (run_command_1, print_return_value): Adjust.
	* inferior.c (inferior_command, info_inferiors_command): Adjust.
	* infrun.c (print_end_stepping_range_reason): Adjust.
	(print_signal_exited_reason, print_exited_reason): Adjust.
	(print_signal_received_reason, print_no_history_reason): Adjust.
	* interps.c (interp_set): Adjust.
	* osdata.c (info_osdata_command): Adjust.
	* progspace.c (maintenance_info_program_spaces_command): Adjust.
	* remote-fileio.c (remote_fileio_request): Adjust.
	* remote.c (show_remote_cmd): Adjust.
	* solib.c (info_sharedlibrary_command): Adjust.
	* source.c (print_source_lines_base): Adjust.
	* stack.c (print_stack_frame): Adjust.
	(do_gdb_disassembly, print_frame_info, print_frame): Adjust.
	* symfile-mem.c (add_vsyscall_page): Adjust.
	* symfile.c (load_progress, generic_load)
	(print_transfer_performance): Adjust.
	* thread.c (info_threads_command, restore_selected_frame)
	(thread_command): Adjust.
	* top.c (make_cleanup_restore_ui_file): Adjust.
	* tracepoint.c (tvariables_info_1, trace_status_mi, tfind_1)
	(print_one_static_tracepoint_marker): Adjust.
	* cli/cli-cmds.c (print_disassembly): Adjust.
	* cli/cli-decode.c (print_doc_line): Adjust.
	* cli/cli-interp.c (safe_execute_command): Adjust.
	* cli/cli-logging.c (set_logging_redirect, pop_output_files)
	(handle_redirections): Adjust.
	* cli/cli-script.c (show_user_1): Adjust.
	* cli/cli-setshow.c (do_setshow_command, cmd_show_list): Adjust.
	* mi/mi-cmd-break.c (breakpoint_notify): Adjust.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Adjust.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd, mi_cmd_env_path)
	(mi_cmd_env_dir): Adjust.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file)
	(print_partial_file_name, mi_cmd_file_list_exec_source_files): Adjust.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_depth, mi_cmd_stack_list_args)
	(list_args_or_locals): Adjust.
	* mi/mi-cmd-var.c (print_varobj, mi_cmd_var_create)
	(mi_cmd_var_delete, mi_cmd_var_set_format, mi_cmd_var_set_frozen)
	(mi_cmd_var_show_format, mi_cmd_var_info_num_children)
	(mi_cmd_var_list_children, mi_cmd_var_info_type)
	(mi_cmd_var_info_path_expression, mi_cmd_var_info_expression)
	(mi_cmd_var_show_attributes, mi_cmd_var_evaluate_expression)
	(mi_cmd_var_assign, mi_cmd_var_update, varobj_update_one): Adjust.
	* mi/mi-interp.c (mi_on_normal_stop): Adjust.
	* mi/mi-main.c (mi_cmd_gdb_exit, mi_cmd_thread_select)
	(mi_cmd_thread_list_ids, mi_cmd_thread_info, print_one_inferior)
	(list_available_thread_groups, mi_cmd_list_thread_groups)
	(mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values, get_register)
	(mi_cmd_data_evaluate_expression, mi_cmd_data_read_memory)
	(mi_cmd_data_read_memory_bytes, mi_cmd_list_features)
	(mi_cmd_list_target_features, mi_cmd_add_inferior)
	(mi_execute_command, mi_load_progress): Adjust.
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Adjust.
	* python/py-auto-load.c (print_script, info_auto_load_scripts):
	Adjust.
	* python/py-breakpoint.c (bppy_get_commands): Adjust.
	* tui/tui-interp.c (tui_command_loop): Adjust.
	* tui/tui-io.c (tui_setup_io, tui_initialize_io): Adjust.
@
text
@a68 9
/* Frontend view of the thread state.  Possible extensions: stepping,
   finishing, until(ling),...  */
enum thread_state
{
  THREAD_STOPPED,
  THREAD_RUNNING,
  THREAD_EXITED,
};

d176 1
a176 1
  tp->state_ = THREAD_STOPPED;
d205 1
a205 1
	  tp->state_ = THREAD_EXITED;
d213 1
a213 1
	  tp->state_ = THREAD_STOPPED;
d274 1
a274 1
      if (tp->state_ != THREAD_EXITED)
d279 1
a279 1
	  tp->state_ = THREAD_EXITED;
d290 1
a290 1
  if (tp->state_ != THREAD_EXITED)
d294 1
a294 1
  tp->state_ = THREAD_EXITED;
d470 1
a470 1
    if (tp->state_ != THREAD_EXITED && ptid_get_pid (tp->ptid) == pid)
d472 1
a472 1
	if (tp->executing_)
d497 1
a497 1
      if (tp->state_ == THREAD_EXITED)
d530 1
a530 1
  if (tp->state_ == THREAD_EXITED)
d584 1
a584 1
	    if (tp->state_ == THREAD_EXITED)
d586 1
a586 1
	    if (running && tp->state_ == THREAD_STOPPED)
d588 1
a588 1
	    tp->state_ = running ? THREAD_RUNNING : THREAD_STOPPED;
d599 2
a600 2
      gdb_assert (tp->state_ != THREAD_EXITED);
      if (running && tp->state_ == THREAD_STOPPED)
d602 1
a602 1
      tp->state_ = running ? THREAD_RUNNING : THREAD_STOPPED;
d615 1
a615 1
  return tp->state_ == state;
d642 1
a642 1
    if (tp->state_ == THREAD_RUNNING)
d655 1
a655 1
  return tp->executing_;
d668 1
a668 1
	  tp->executing_ = executing;
d674 1
a674 1
      tp->executing_ = executing;
d716 1
a716 1
 	  if (tp->state_ == THREAD_EXITED)
d720 1
a720 1
	      if (tp->executing_ && tp->state_ == THREAD_STOPPED)
d722 1
a722 1
	      tp->state_ = tp->executing_ ? THREAD_RUNNING : THREAD_STOPPED;
d730 1
a730 1
      if (tp->state_ != THREAD_EXITED)
d732 1
a732 1
	  if (tp->executing_ && tp->state_ == THREAD_STOPPED)
d734 1
a734 1
	  tp->state_ = tp->executing_ ? THREAD_RUNNING : THREAD_STOPPED;
d795 1
a795 1
	  if (tp->state_ == THREAD_EXITED)
d839 1
a839 1
      if (tp->state_ == THREAD_EXITED)
d901 1
a901 1
      if (tp->state_ == THREAD_RUNNING)
d918 1
a918 1
	  if (tp->state_ == THREAD_RUNNING)
d1400 1
a1400 1
  if (tp->state_ == THREAD_RUNNING)
@


1.141
log
@2011-05-30  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* continuations.h (continuation_ftype): Add `err' parameter.
	Document parameters.
	(do_all_continuations, do_all_continuations_thread)
	(do_all_intermediate_continuations)
	(do_all_intermediate_continuations_thread)
	(do_all_inferior_continuations): Add `err' parameter.
	* continuations.c (do_my_continuations_1, do_my_continuations)
	(do_all_inferior_continuations, do_all_continuations_ptid)
	(do_all_continuations_thread_callback)
	(do_all_continuations_thread, do_all_continuations)
	(do_all_intermediate_continuations_thread_callback)
	(do_all_intermediate_continuations_thread)
	(do_all_intermediate_continuations): Add `err' parameter, and pass
	it down all the way to the continuations proper.
	* inf-loop.c (inferior_event_handler): If fetching an inferior
	event throws an error, don't pop the target, and still call the
	continuations, but with `err' set.  Adjust all other continuation
	calls.
	* breakpoint.c (until_break_command_continuation): Add `err'
	parameter.
	* infcmd.c (step_1_continuation): Add `err' parameter.  Don't
	issue another step if `err' is set.
	(struct until_next_continuation_args): New.
	(until_next_continuation): Add `err' parameter.  Adjust.
	(until_next_command): Adjust.
	(struct finish_command_continuation_args): Add `thread' field.
	(finish_command_continuation): Add `err' parameter.  Handle it.
	(finish_forward): Adjust.
	(attach_command_continuation): Add `err' parameter.  Handle it.
	* infrun.c (infrun_thread_stop_requested_callback): Adjust to
	cancel the continuations.
	* interps.c (interp_set): Adjust to cancel the continuations.
	* thread.c (clear_thread_inferior_resources): Adjust to cancel the
	continuations rather than discarding.
	(free_thread): Don't clear thread inferior resources here.
	(delete_thread_1): Do it here instead.  And do it before removing
	the thread from the threads list.  Tag the thread as exited before
	clearing thread inferior resources.
@
text
@d974 1
a974 1
  print_thread_info (uiout, arg, -1);
d1066 1
a1066 1
  if (frame_level > 0 && !ui_out_is_mi_like_p (uiout))
d1295 1
a1295 1
  gdb_thread_select (uiout, tidstr, NULL);
@


1.140
log
@2011-05-27  Pedro Alves  <pedro@@codesourcery.com>

	* defs.h (struct continuation, continuation_ftype)
	(continuation_free_arg_ftype, add_continuation)
	(do_all_continuations, do_all_continuations_thread)
	(discard_all_continuations, discard_all_continuations_thread)
	(add_intermediate_continuation, do_all_intermediate_continuations)
	(do_all_intermediate_continuations_thread)
	(discard_all_intermediate_continuations)
	(discard_all_intermediate_continuations_thread)
	(add_inferior_continuation, do_all_inferior_continuations)
	(discard_all_inferior_continuations): Move to ...
	* continuations.h: ... this new file.
	* breakpoint.c, continuations.c, event-top.c, inf-loop.c,
	infcmd.c, inferior.c, infrun.c, interps.c: Include
	continuations.h.
@
text
@d128 2
a129 2
  discard_all_intermediate_continuations_thread (tp);
  discard_all_continuations_thread (tp);
a136 2
  clear_thread_inferior_resources (tp);

d298 8
a310 4
  /* Notify thread exit, but only if we haven't already.  */
  if (tp->state_ != THREAD_EXITED)
    observer_notify_thread_exit (tp, silent);

@


1.139
log
@2011-04-19  Marc Khouzam  <marc.khouzam@@ericsson.com>

	* thread.c (any_live_thread_of_process): Prioritize threads
	that are not executing.
	* gdbthread.h (any_live_thread_of_process): Update comment
	as per above change.
@
text
@d48 1
@


1.138
log
@	* tracepoint.c (trace_actions_command): Update.
	* thread.c (thread_apply_command): Update.
	* reverse.c (delete_bookmark_command): Update.
	(bookmarks_info): Update.
	* printcmd.c (undisplay_command): Update.
	* memattr.c (mem_enable_command): Update.
	(mem_disable_command): Update.
	(mem_delete_command): Update.
	* inferior.c (detach_inferior_command): Update.
	(kill_inferior_command): Update.
	(remove_inferior_command): Update.
	* cli/cli-utils.h (struct get_number_or_range_state): New.
	(init_number_or_range): Declare.
	(get_number_or_range): Update.
	* cli/cli-utils.c (init_number_or_range): New function.
	(get_number_or_range): Change 'pp' parameter to 'state'.  Remove
	static variables.
	(number_is_in_list): Update.
	* breakpoint.h (get_tracepoint_by_number): Update.
	* breakpoint.c (map_breakpoint_numbers): Update for change to
	get_number_or_range.
	(find_location_by_number): Use get_number, not
	get_number_or_range.
	(trace_pass_set_count): New function.
	(trace_pass_command): Update for change to get_number_or_range.
	Rework loop logic.
	(get_tracepoint_by_number): Remove 'multi_p' parameter; add
	'state' parameter.
@
text
@d473 1
a473 1
  struct thread_info *tp_running = NULL;
d476 1
a476 1
    if (ptid_get_pid (tp->ptid) == pid)
d478 3
a480 1
	if (tp->state_ == THREAD_STOPPED)
a481 2
	else if (tp->state_ == THREAD_RUNNING)
	  tp_running = tp;
d484 1
a484 1
  return tp_running;
@


1.138.2.1
log
@2011-04-19  Marc Khouzam  <marc.khouzam@@ericsson.com>

	* thread.c (any_live_thread_of_process): Prioritize threads
	that are not executing.
	* gdbthread.h (any_live_thread_of_process): Update comment
	as per above change.
@
text
@d473 1
a473 1
  struct thread_info *tp_executing = NULL;
d476 1
a476 1
    if (tp->state_ != THREAD_EXITED && ptid_get_pid (tp->ptid) == pid)
d478 1
a478 3
	if (tp->executing_)
	  tp_executing = tp;
	else
d480 2
d484 1
a484 1
  return tp_executing;
@


1.137
log
@	* thread.c (restore_selected_frame): Handle frame_level == -1.
	(make_cleanup_restore_current_thread): Use
	get_selected_frame_if_set.
	* frame.h (get_selected_frame_if_set): Declare.
	* frame.c (get_selected_frame_if_set): New function.
@
text
@d1217 1
d1231 3
a1233 1
  while (tidlist < cmd)
d1239 1
a1239 1
      start = get_number_or_range (&tidlist);
@


1.136
log
@2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdbthread.h (print_thread_info): Change prototype.
	* thread.c (print_thread_info): Accept char* instead of int for
	requested_threads argument.  Use new function number_is_in_list
	to determine which threads to list.
	(info_threads_command): Pass char* to print_thread_info.
	* cli/cli-utils.c (number_is_in_list): New function.
	* cli/cli-utils.h (number_is_in_list): Export.
	* mi/mi-main.c (mi_cmd_thread_info): Pass char* to
	print_thread_info.
	(print_one_inferior): Ditto.
	(mi_cmd_list_thread_groups): Ditto.

2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdb.threads/thread-find.exp: Update patterns for changes in
	output of "info threads" command.
@
text
@d1022 7
d1147 8
a1154 1
	frame = get_selected_frame (NULL);
@


1.135
log
@2011-02-18  Michael Snyder  <msnyder@@vmware.com>

	* thread.c (thread_apply_command): Re-implement using
	get_number_or_range.
@
text
@d47 1
d759 1
a759 1
   This is a version of 'info_thread_command' suitable for
d770 1
a770 1
print_thread_info (struct ui_out *uiout, int requested_thread, int pid)
d795 1
a795 1
	  if (requested_thread != -1 && tp->num != requested_thread)
d809 1
a809 1
	  if (requested_thread == -1)
d812 2
a813 1
	    ui_out_message (uiout, 0, _("No thread %d.\n"), requested_thread);
d832 1
a832 1
      if (requested_thread != -1 && tp->num != requested_thread)
d837 1
a837 1
	  if (requested_thread != -1)
d940 1
a940 1
  if (pid == -1 && requested_thread == -1)
d971 1
a971 17
  int tid = -1;

  if (arg == NULL || *arg == '\0')
    {
      print_thread_info (uiout, -1, -1);
      return;
    }

  while (arg != NULL && *arg != '\0')
    {
      tid = get_number_or_range (&arg);

      if (tid <= 0)
	error (_("invalid thread id %d"), tid);

      print_thread_info (uiout, tid, -1);
    }
@


1.134
log
@2011-02-18  Michael Snyder  <msnyder@@vmware.com>

	* thread.c (info_threads_command): Re-implement using
	get_number_or_range.
@
text
@a1214 1
  char *p;
d1233 2
a1234 1
      int start, end;
d1236 1
a1236 4
      start = strtol (tidlist, &p, 10);
      if (p == tidlist)
	error (_("Error parsing %s"), tidlist);
      tidlist = p;
d1238 1
a1238 2
      while (*tidlist == ' ' || *tidlist == '\t')
	tidlist++;
d1240 1
a1240 7
      if (*tidlist == '-')	/* Got a range of IDs?  */
	{
	  tidlist++;		/* Skip the - */
	  end = strtol (tidlist, &p, 10);
	  if (p == tidlist)
	    error (_("Error parsing %s"), tidlist);
	  tidlist = p;
d1242 4
a1245 3
	  while (*tidlist == ' ' || *tidlist == '\t')
	    tidlist++;
	}
a1246 5
	end = start;

      make_cleanup_restore_current_thread ();

      for (; start <= end; start++)
d1248 1
a1248 1
	  tp = find_thread_id (start);
d1250 3
a1252 7
	  if (!tp)
	    warning (_("Unknown thread %d."), start);
	  else if (!thread_alive (tp))
	    warning (_("Thread %d has terminated."), start);
	  else
	    {
	      switch_to_thread (tp->ptid);
d1254 2
a1255 7
	      printf_filtered (_("\nThread %d (%s):\n"), tp->num,
			       target_pid_to_str (inferior_ptid));
	      execute_command (cmd, from_tty);

	      /* Restore exact command used previously.  */
	      strcpy (cmd, saved_cmd);
	    }
@


1.133
log
@2011-02-16  Yao Qi  <yao@@codesourcery.com>

        * thread.c (info_threads_command): Add missing i18n markup and remove
        trailing newline.
@
text
@d979 1
a979 2
      int tmp_tid = strtol (arg, &arg, 0);
      unsigned int highrange;
d981 2
a982 2
      if (tmp_tid <= 0)
	error (_("invalid thread id %d"), tmp_tid);
a983 1
      tid = tmp_tid;
a984 18

      while (*arg == ' ' || *arg == '\t')
	++arg;

      if (*arg == '-')
	{
	  /* Do a range of threads.  Must be in ascending order.  */
	  ++arg;	/* Skip the hyphen.  */
	  highrange = strtoul (arg, &arg, 0);
	  if (highrange < tid)
	    error (_("inverted range"));

	  /* Do the threads in the range (first one already done).  */
	  while (tid < highrange)
	    {
	      print_thread_info (uiout, ++tid, -1);
	    }
	}
@


1.132
log
@2011-02-15  Michael Snyder  <msnyder@@vmware.com>

	* command.h (enum command_class): New class 'no_set_class', for
	"show" commands without a corresponding "set" command.
	* value.c (_initialize_values): Use 'no_set_class' for "show values".
	* copying.c (_initialize_copying): Ditto for "show copying" and
	"show warranty".
	* cli/cli-cmds.c (init_cli_cmds): Ditto for "show commands" and
	"show version".
	* cli/cli-setshow.c (cmd_show_list): Skip "show" commands for
	which there is no corresponding "set" command (eg. "show copying").

2011-02-14  Michael Snyder  <msnyder@@vmware.com>

	* gdb.texinfo (threads): Document argument for "info threads" cmd.
	Document new command "thread find".

2011-02-15  Michael Snyder  <msnyder@@vmware.com>

	* gdb.base/default.exp: Add tests for thread commands.
	* gdb.base/help.exp: Add tests for thread commands.
	* gdb.threads/thread-find.exp: New test for thread find command.
@
text
@d983 1
a983 1
	error ("invalid thread id %d\n", tmp_tid);
@


1.131
log
@gdb
	PR mi/8618:
	* thread.c (free_thread): Free 'name'.
	(print_thread_info): Emit thread name.  Change CLI output.
	(thread_name_command): New function.
	(do_captured_thread_select): Emit newline.
	(_initialize_thread): Register 'thread name' command.
	* target.h (struct target_ops) <to_thread_name>: New field.
	(target_thread_name): New macro.
	* target.c (update_current_target): Handle to_thread_name.
	* python/py-infthread.c (thpy_get_name): New function.
	(thpy_set_name): Likewise.
	(thread_object_getset): Add "name".
	* linux-nat.c (linux_nat_thread_name): New function.
	(linux_nat_add_target): Set to_thread_name.
	* gdbthread.h (struct thread_info) <name>: New field.
gdb/doc
	* gdb.texinfo (Threads): Document thread name output and `thread
	name' command.
	(Threads In Python): Document Thread.name attribute.
	(GDB/MI Thread Commands): Document thread attributes.
gdb/testsuite
	* gdb.python/py-infthread.exp: Add thread tests.
@
text
@d46 1
d958 1
d960 1
a960 1
/* Print information about currently known threads 
d962 3
a964 4
 * Note: this has the drawback that it _really_ switches
 *       threads, which frees the frame cache.  A no-side
 *       effects info-threads command would be nicer.
 */
d969 37
a1005 1
  print_thread_info (uiout, -1, -1);
d1353 54
d1497 5
a1501 2
  add_info ("threads", info_threads_command,
	    _("IDs of currently known threads."));
d1520 6
@


1.130
log
@	* thread.c (do_captured_thread_select): Emit newline before
	printing frame.
@
text
@d144 1
d773 1
a773 1
  char *extra_info;
d815 1
a815 1
      make_cleanup_ui_out_table_begin_end (uiout, 5, n_threads, "threads");
a819 1
      ui_out_table_header (uiout, 1, ui_noalign, "details", "");
a863 1
      ui_out_field_string (uiout, "target-id", target_pid_to_str (tp->ptid));
d865 8
d874 3
a876 1
      if (extra_info)
d878 24
a901 3
	  ui_out_text (uiout, " (");
	  ui_out_field_string (uiout, "details", extra_info);
	  ui_out_text (uiout, ")");
a902 2
      else if (! ui_out_is_mi_like_p (uiout))
	ui_out_field_skip (uiout, "details");
d1298 18
d1421 5
@


1.129
log
@2011-01-11  Michael Snyder  <msnyder@@vmware.com>

	* s390-tdep.c: Comment cleanup, mostly periods and spaces.
	* score-tdep.c: Ditto.
	* score-tdep.h: Ditto.
	* ser-base.c: Ditto.
	* ser-go32.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* ser-mingw.c: Ditto.
	* ser-pipe.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* sh64-tdep.c: Ditto.
	* shnbsd-nat.c: Ditto.
	* sh-tdep.c: Ditto.
	* sh-tdep.h: Ditto.
	* solib.c: Ditto.
	* solib-darwin.c: Ditto.
	* solib-frv.c: Ditto.
	* solib.h: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-spu.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solist.h: Ditto.
	* sol-thread.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* source.h: Ditto.
	* sparc64-linux-tdep.c: Ditto.
	* sparc64-tdep.c: Ditto.
	* sparc-linux-nat.c: Ditto.
	* sparc-linux-tdep.c: Ditto.
	* sparc-sol2-nat.c: Ditto.
	* sparc-sol2-tdep.c: Ditto.
	* sparc-tdep.c: Ditto.
	* sparc-tdep.h: Ditto.
	* spu-tdep.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.h: Ditto.
	* stack.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target.c: Ditto.
	* target-descriptions.c: Ditto.
	* target-descriptions.h: Ditto.
	* target.h: Ditto.
	* target-memory.c: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* trad-frame.h: Ditto.
	* typeprint.c: Ditto.
@
text
@d1312 4
a1315 1
    print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
@


1.128
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d47 1
a47 1
/* Definition of struct thread_info exported to gdbthread.h */
d49 1
a49 1
/* Prototypes for exported functions. */
d53 1
a53 1
/* Prototypes for local functions. */
d435 1
a435 1
  return 0;			/* Never heard of 'im */
d485 1
a485 1
   threads. To be used from within catch_errors. */
d519 1
a519 1
   the total number. */
d529 1
a529 1
/* Return true if TP is an active thread. */
d757 1
a757 1
   use from MI.  
d760 1
a760 1
   printed.  
d762 1
a762 1
   Otherwise, threads from all attached PIDs are printed.   
d943 1
a943 1
/* Switch from one thread to another. */
d1131 1
a1131 2
   thread apply all p x/i $pc   Apply x/i $pc cmd to all threads
 */
d1148 1
a1148 1
     execute_command */
d1183 1
a1183 1
     execute_command */
d1199 1
a1199 1
      if (*tidlist == '-')	/* Got a range of IDs? */
@


1.127
log
@run copyright.sh for 2011.
@
text
@d1027 2
a1028 2
      warning (_("\
Couldn't restore frame #%d in current thread, at reparsed frame #0\n"),
d1160 2
a1161 1
	strcpy (cmd, saved_cmd);	/* Restore exact command used previously */
d1277 2
a1278 2
  fprintf_filtered (file, _("\
Printing of thread events is %s.\n"),
@


1.126
log
@gdb
	* thread.c (print_thread_info): Make a ui-out table in CLI mode.
gdb/testsuite
	* gdb.threads/execl.exp: Update.
	* gdb.threads/linux-dp.exp: Update.
	* gdb.threads/manythreads.exp: Update.
	* gdb.threads/tls.exp: Update.
@
text
@d4 1
a4 1
   2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009, 2010
@


1.125
log
@gdb
	PR c++/9593:
	* thread.c (clear_thread_inferior_resources): Call
	delete_longjmp_breakpoint.
	* infrun.c (handle_inferior_event): Handle exception breakpoints.
	(handle_inferior_event): Likewise.
	(insert_exception_resume_breakpoint): New function.
	(check_exception_resume): Likewise.
	* inferior.h (delete_longjmp_breakpoint_cleanup): Declare.
	* infcmd.c (delete_longjmp_breakpoint_cleanup): No longer static.
	(step_1): Set thread's initiating frame.
	(until_next_continuation): New function.
	(until_next_command): Support exception breakpoints.
	(finish_command_continuation): Delete longjmp breakpoint.
	(finish_forward): Support exception breakpoints.
	* gdbthread.h (struct thread_info) <initiating_frame>: New field.
	* breakpoint.h (enum bptype) <bp_exception, bp_exception_resume,
	bp_exception_master>: New constants.
	(struct bpstat_what) <is_longjmp>: New field.
	(set_longjmp_breakpoint): Update.
	* breakpoint.c (create_exception_master_breakpoint): New function.
	(update_breakpoints_after_exec): Handle bp_exception_master.  Call
	create_exception_master_breakpoint.
	(print_it_typical): Handle bp_exception_master, bp_exception.
	(bpstat_stop_status): Handle bp_exception_master.
	(bpstat_what): Handle bp_exception_master, bp_exception,
	bp_exception_resume.
	(bptype_string): Likewise.
	(print_one_breakpoint_location): Likewise.
	(allocate_bp_location): Likewise.
	(set_longjmp_breakpoint): Handle exception breakpoints.  Change
	interface.
	(delete_longjmp_breakpoint): Handle exception breakpoints.
	(mention): Likewise.
	(struct until_break_command_continuation_args) <thread_num>: New
	field.
	(until_break_command_continuation): Call
	delete_longjmp_breakpoint.
	(until_break_command): Support exception breakpoints.
	(delete_command): Likewise.
	(breakpoint_re_set_one): Likewise.
	(breakpoint_re_set): Likewise.
gdb/testuite
	* gdb.java/jnpe.java: New file.
	* gdb.java/jnpe.exp: New file.
	* gdb.cp/nextoverthrow.exp: New file.
	* gdb.cp/nextoverthrow.cc: New file.
@
text
@d781 43
a823 1
  make_cleanup_ui_out_list_begin_end (uiout, "threads");
d847 8
a854 2
      if (ptid_equal (tp->ptid, current_ptid))
	ui_out_text (uiout, "* ");
d856 6
a861 1
	ui_out_text (uiout, "  ");
a863 1
      ui_out_text (uiout, " ");
d873 2
a874 1
      ui_out_text (uiout, "  ");
@


1.124
log
@gdb/
	Fix step_resume_breakpoint unsaved during an infcall.
	* gdbthread.h (struct thread_control_state): Move here field
	step_resume_breakpoint ...
	(struct thread_info): ... from here.
	* infrun.c (save_infcall_control_state): Reset
	control.step_resume_breakpoint to NULL.
	(restore_infcall_control_state, discard_infcall_control_state): Delete
	control.step_resume_breakpoint.
	* arm-linux-tdep.c, infrun.c, thread.c: Update all the references to
	the moved field.

gdb/testsuite/
	Fix step_resume_breakpoint unsaved during an infcall.
	* gdb.base/step-resume-infcall.exp: New file.
	* gdb.base/step-resume-infcall.c: New file.
@
text
@d93 10
d116 7
d127 2
@


1.123
log
@gdb/
	Rename and move inferior_thread_state and inferior_status.
	* gdbthread.h (struct thread_control_state): New struct, move fields
	step_range_start, step_range_end, step_frame_id, step_stack_frame_id,
	trap_expected, proceed_to_finish, in_infcall, step_over_calls,
	stop_step and stop_bpstat here from struct thread_info.
	(struct thread_suspend_state): New struct, move field stop_signal here
	from struct thread_info.
	(struct thread_info): Move the fields above from this struct.
	* inferior.h: Move the inferior_thread_state and inferior_status
	declarations comment to their definitions at infrun.c.
	(struct inferior_control_state): New struct, move field stop_soon from
	struct inferior here.
	(struct inferior_suspend_state): New empty struct.
	(struct inferior): New fields control and suspend.  Move out field
	stop_soon.
	* infrun.c (struct inferior_thread_state): Rename to ...
	(infcall_suspend_state): ... here.  Replace field stop_signal by
	fields thread_suspend and inferior_suspend.
	(save_inferior_thread_state): Rename to ...
	(save_infcall_suspend_state): ... here.  New variable inf.  Update the
	code for new fields.
	(restore_inferior_thread_state): Rename to ...
	(restore_infcall_suspend_state): ... here.  New variable inf.  Update
	the code for new fields.
	(do_restore_inferior_thread_state_cleanup): Rename to ...
	(do_restore_infcall_suspend_state_cleanup): ... here.
	(make_cleanup_restore_inferior_thread_state): Rename to ...
	(make_cleanup_restore_infcall_suspend_state): ... here.
	(discard_inferior_thread_state): Rename to ...
	(discard_infcall_suspend_state): ... here.
	(get_inferior_thread_state_regcache): Rename to ...
	(get_infcall_suspend_state_regcache): ... here.
	(struct inferior_status): Rename to ...
	(struct infcall_control_state): ... here.  Replace fields
	step_range_start, step_range_end, step_frame_id, step_stack_frame_id,
	trap_expected, proceed_to_finish, in_infcall, step_over_calls,
	stop_step, stop_bpstat and stop_soon by fields thread_control and
	inferior_control.
	(save_inferior_status): Rename to ...
	(save_infcall_control_state): ... here.  Update the code for new
	fields.
	(restore_inferior_status): Rename to ...
	(restore_infcall_control_state): ... here.  Update the code for new
	fields.
	(do_restore_inferior_status_cleanup): Rename to ...
	(do_restore_infcall_control_state_cleanup): ... here.
	(make_cleanup_restore_inferior_status): Rename to ...
	(make_cleanup_restore_infcall_control_state): ... here.
	(discard_inferior_status): Rename to ...
	(discard_infcall_control_state): ... here.
	* alpha-tdep.c, breakpoint.c, dummy-frame.c, dummy-frame.h,
	exceptions.c, fbsd-nat.c, gdbthread.h, infcall.c, infcmd.c,
	inferior.c, inferior.h, infrun.c, linux-nat.c, mi/mi-interp.c,
	mips-tdep.c, procfs.c, solib-irix.c, solib-osf.c, solib-spu.c,
	solib-sunos.c, solib-svr4.c, thread.c, windows-nat.c: Update all the
	references to the moved fields and renamed functions.
@
text
@d86 1
a86 1
  if (tp && tp->step_resume_breakpoint)
d88 2
a89 2
      delete_breakpoint (tp->step_resume_breakpoint);
      tp->step_resume_breakpoint = NULL;
d100 1
a100 1
  if (tp->step_resume_breakpoint)
d102 2
a103 2
      tp->step_resume_breakpoint->disposition = disp_del_at_next_stop;
      tp->step_resume_breakpoint = NULL;
@


1.122
log
@	* thread.c (add_thread_silent): Use null_ptid instead of
	minus_one_ptid while getting rid of stale inferior_ptid.
@
text
@d106 1
a106 1
  bpstat_clear (&tp->stop_bpstat);
@


1.121
log
@	* thread.c (thread_id_make_value): Make a value representing the
	current thread.
	(_initialize_thread): Create $_thread.

	* gdb.texinfo (Debugging Programs with Multiple Threads): Describe
	$_thread.

	* gdb.threads/thread-specific.exp: Add tests of $_thread.
@
text
@d190 1
a190 1
	  tp = new_thread (ptid);
d194 1
a194 1
	  switch_to_thread (minus_one_ptid);
@


1.121.2.1
log
@2010-08-06  Maciej W. Rozycki  <macro@@codesourcery.com>

	* thread.c (add_thread_silent): Use null_ptid instead of
	minus_one_ptid while getting rid of stale inferior_ptid.
@
text
@d190 1
a190 1
	  tp = new_thread (null_ptid);
d194 1
a194 1
	  switch_to_thread (null_ptid);
@


1.121.2.2
log
@2011-04-19  Marc Khouzam  <marc.khouzam@@ericsson.com>

	* thread.c (any_live_thread_of_process): Prioritize threads
	that are not executing.
	* gdbthread.h (any_live_thread_of_process): Update comment
	as per above change.
@
text
@d451 1
a451 1
  struct thread_info *tp_executing = NULL;
d454 1
a454 1
    if (tp->state_ != THREAD_EXITED && ptid_get_pid (tp->ptid) == pid)
d456 1
a456 3
	if (tp->executing_)
	  tp_executing = tp;
	else
d458 2
d462 1
a462 1
  return tp_executing;
@


1.120
log
@2010-05-16  Michael Snyder  <msnyder@@vmware.com>

	* target.c: White space.
	* target-descriptions.c: White space.
	* target-memory.c: White space.
	* thread.c: White space.
	* top.c: White space.
	* tracepoint.c: White space.
	* trad-frame.c: White space.
	* tramp-frame.c: White space.
	* ui-file.c: White space.
	* ui-out.c: White space.
	* user-regs.c: White space.
	* utils.c: White space.
@
text
@d1265 12
d1310 2
@


1.119
log
@	Implement core awareness.

	* bcache.c (compare_ints): Remove
	(print_percentage): Use compare_positive_ints.
	* defs.h (compare_positive_ints): Declare.
	* linux-nat.h (struct lin_lwp): New field core.
	(linux_nat_core_of_thread_1): Declare.
	* linux-nat.c (add_lwp): Init the 'core' field.
	(linux_nat_wait_1): Record the core.
	(linux_nat_core_of_thread_1, linux_nat_core_of_thread): New.
	(linux_nat_add_target): Register the above.
	* linux-thread-db.c (update_thread_core): New.
	(thread_db_find_new_threads): Update core information for
	every thread.
	* remote.c (struct private_thread_info): New.
	(free_private_thread_info, demand_private_info): New.
	(PACKET_qXfer_threads, use_osdata_threads): New.
	(struct thread_item, threads_parsing_context
	(start_thread, end_thread, thread_attributes)
	(thread_children, threads_children, threads_elements): New.
	(remote_threads_info): Try qXfer:threads before anything
	else.
	(remote_protocol_packets): Register qXfer:threads.
	(remote_open_1): Init use_osdata_threads.
	(struct stop_reply): New field 'core'.
	(remote_parse_stop_reply): Parse core number.
	(process_stop_reply): Record core number.
	(remote_xfer_partial): Handle qXfer:threads.
	(remote_core_of_thread): New.
	(init_remote_ops): Register remote_core_of_thread.
	(_initialize_remote): Register qXfer:read.
	* target.c (target_core_of_thread): New
	* target.h (enum target_object): New value TARGET_OBJECT_THREADS.
	(struct target_ops): New field to_core_of_threads.
	(target_core_of_thread): Declare.
	* gdbthread.h (struct thread_info): New field private_dtor.
	* thread.c (print_thread_info): Report the core.
	* ui-out.c (MAX_UI_OUT_LEVELS): Increase.
	* utils.c (compare_positive_ints): New.
	* features/threads.dtd: New.
	* mi/mi-interp.c (mi_on_normal_stop): Report the core.
	* mi/mi-main.c (struct collect_cores_data, collect_cores)
	(do_nothing, free_vector_of_osdata_items)
	(splay_tree_int_comparator, free_splay_tree): New.
	(print_one_inferior_data): Implemented printing of selected
	inferiors.  Collect and print cores.
	(output_cores): New.
	(mi_cmd_list_thread_groups): Support --recurse.  Permit specifying
	thread groups together with --available.
@
text
@d400 1
d564 1
d580 1
d820 1
d1012 1
@


1.119.2.1
log
@2010-08-06  Maciej W. Rozycki  <macro@@codesourcery.com>

	* thread.c (add_thread_silent): Use null_ptid instead of
	minus_one_ptid while getting rid of stale inferior_ptid.
@
text
@d190 1
a190 1
	  tp = new_thread (null_ptid);
d194 1
a194 1
	  switch_to_thread (null_ptid);
@


1.118
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@a116 2
  /* FIXME: do I ever need to call the back-end to give it a
     chance at this private data before deleting the thread?  */
d118 6
a123 1
    xfree (tp->private);
d474 1
a474 2
  prune_threads ();
  target_find_new_threads ();
d753 1
a753 2
  prune_threads ();
  target_find_new_threads ();
d763 1
d822 4
d1067 1
a1067 2
  prune_threads ();
  target_find_new_threads ();
d1253 7
@


1.117
log
@2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	Add base multi-executable/process support to GDB.

	gdb/
	* Makefile.in (SFILES): Add progspace.c.
	(COMMON_OBS): Add progspace.o.
	* progspace.h: New.
	* progspace.c: New.

	* breakpoint.h (struct bp_target_info) <placed_address_space>: New
	field.
	(struct bp_location) <pspace>: New field.
	(struct breakpoint) <pspace>: New field.
	(bpstat_stop_status, breakpoint_here_p)
	(moribund_breakpoint_here_p, breakpoint_inserted_here_p)
	(regular_breakpoint_inserted_here_p)
	(software_breakpoint_inserted_here_p, breakpoint_thread_match)
	(set_default_breakpoint): Adjust prototypes.
	(remove_breakpoints_pid, breakpoint_program_space_exit): Declare.
	(insert_single_step_breakpoint, deprecated_insert_raw_breakpoint):
	Adjust prototypes.
	* breakpoint.c (executing_startup): Delete.
	(default_breakpoint_sspace): New.
	(breakpoint_restore_shadows): Skip if the address space doesn't
	match.
	(update_watchpoint): Record the frame's program space in the
	breakpoint location.
	(insert_bp_location): Record the address space in target_info.
	Adjust to pass the symbol space to solib_name_from_address.
	(breakpoint_program_space_exit): New.
	(insert_breakpoint_locations): Switch the symbol space and thread
	when inserting breakpoints.  Don't insert breakpoints in a vfork
	parent waiting for vfork done if we're not attached to the vfork
	child.
	(remove_breakpoints_pid): New.
	(reattach_breakpoints): Switch to a thread of PID.  Ignore
	breakpoints of other symbol spaces.
	(create_internal_breakpoint): Store the symbol space in the sal.
	(create_longjmp_master_breakpoint): Iterate over all symbol
	spaces.
	(update_breakpoints_after_exec): Ignore breakpoints for other
	symbol spaces.
	(remove_breakpoint): Rename to ...
	(remove_breakpoint_1): ... this.  Pass the breakpoints symbol
	space to solib_name_from_address.
	(remove_breakpoint): New.
	(mark_breakpoints_out): Ignore breakpoints from other symbol
	spaces.
	(breakpoint_init_inferior): Ditto.
	(breakpoint_here_p): Add an address space argument and adjust to
	use breakpoint_address_match.
	(moribund_breakpoint_here_p): Ditto.
	(regular_breakpoint_inserted_here_p): Ditto.
	(breakpoint_inserted_here_p): Ditto.
	(software_breakpoint_inserted_here_p): Ditto.
	(breakpoint_thread_match): Ditto.
	(bpstat_check_location): Ditto.
	(bpstat_stop_status): Ditto.
	(print_breakpoint_location): If there's a location to print,
	switch the current symbol space.
	(print_one_breakpoint_location): Add `allflag' argument.
	(print_one_breakpoint): Ditto.	Adjust.
	(do_captured_breakpoint_query): Adjust.
	(breakpoint_1): Adjust.
	(breakpoint_has_pc): Also match the symbol space.
	(describe_other_breakpoints): Add a symbol space argument and
	adjust.
	(set_default_breakpoint): Add a symbol space argument.	Set
	default_breakpoint_sspace.
	(breakpoint_address_match): New.
	(check_duplicates_for): Add an address space argument, and adjust.
	(set_raw_breakpoint): Record the symbol space in the location and
	in the breakpoint.
	(set_longjmp_breakpoint): Skip longjmp master breakpoints from
	other symbol spaces.
	(remove_thread_event_breakpoints, remove_solib_event_breakpoints)
	(disable_breakpoints_in_shlibs): Skip breakpoints from other
	symbol spaces.
	(disable_breakpoints_in_unloaded_shlib): Match symbol spaces.
	(create_catchpoint): Set the symbol space in the sal.
	(disable_breakpoints_before_startup): Skip breakpoints from other
	symbol spaces.	Set executing_startup in the current symbol space.
	(enable_breakpoints_after_startup): Clear executing_startup in the
	current symbol space.  Skip breakpoints from other symbol spaces.
	(clone_momentary_breakpoint): Also copy the symbol space.
	(add_location_to_breakpoint): Set the location's symbol space.
	(bp_loc_is_permanent): Switch thread and symbol space.
	(create_breakpoint): Adjust.
	(expand_line_sal_maybe): Expand comment to mention symbol spaces.
	Switch thread and symbol space when reading memory.
	(parse_breakpoint_sals): Set the symbol space in the sal.
	(break_command_really): Ditto.
	(skip_prologue_sal): Switch and space.
	(resolve_sal_pc): Ditto.
	(watch_command_1): Record the symbol space in the sal.
	(create_ada_exception_breakpoint): Adjust.
	(clear_command): Adjust.  Match symbol spaces.
	(update_global_location_list): Use breakpoint_address_match.
	(breakpoint_re_set_one): Switch thread and space.
	(breakpoint_re_set): Save symbol space.
	(breakpoint_re_set_thread): Also reset the symbol space.
	(deprecated_insert_raw_breakpoint): Add an address space argument.
	Adjust.
	(insert_single_step_breakpoint): Ditto.
	(single_step_breakpoint_inserted_here_p): Ditto.
	(clear_syscall_counts): New.
	(_initialize_breakpoint): Install it as inferior_exit observer.

	* exec.h: Include "progspace.h".
	(exec_bfd, exec_bfd_mtime): New defines.
	(exec_close): Declare.
	* exec.c: Include "gdbthread.h" and "progspace.h".
	(exec_bfd, exec_bfd_mtime, current_target_sections_1): Delete.
	(using_exec_ops): New.
	(exec_close_1): Rename to exec_close, and make public.
	(exec_close): Rename to exec_close_1, and adjust all callers.  Add
	description.  Remove target sections and close executables from
	all program spaces.
	(exec_file_attach): Add comment.
	(add_target_sections): Check on `using_exec_ops' to check if the
	target should be pushed.
	(remove_target_sections): Only unpush the target if there are no
	more target sections in any symbol space.
	* gdbcore.h: Include "exec.h".
	(exec_bfd, exec_bfd_mtime): Remove declarations.

	* frame.h (get_frame_program_space, get_frame_address_space)
	(frame_unwind_program_space): Declare.
	* frame.c (struct frame_info) <pspace, aspace>: New fields.
	(create_sentinel_frame): Add program space argument.  Set the
	pspace and aspace fields of the frame object.
	(get_current_frame, create_new_frame): Adjust.
	(get_frame_program_space): New.
	(frame_unwind_program_space): New.
	(get_frame_address_space): New.
	* stack.c (print_frame_info): Adjust.
	(print_frame): Use the frame's program space.

	* gdbthread.h (any_live_thread_of_process): Declare.
	* thread.c (any_live_thread_of_process): New.
	(switch_to_thread): Switch the program space as well.
	(restore_selected_frame): Don't warn if trying to restore frame
	level 0.

	* inferior.h: Include "progspace.h".
	(detach_fork): Declare.
	(struct inferior) <removable, aspace, pspace>
	<vfork_parent, vfork_child, pending_detach>
	<waiting_for_vfork_done>: New fields.
	<terminal_info>: Remove field.
	<data, num_data>: New fields.
	(register_inferior_data, register_inferior_data_with_cleanup)
	(clear_inferior_data, set_inferior_data, inferior_data): Declare.
	(exit_inferior, exit_inferior_silent, exit_inferior_num_silent)
	(inferior_appeared): Declare.
	(find_inferior_pid): Typo.
	(find_inferior_id, find_inferior_for_program_space): Declare.
	(set_current_inferior, save_current_inferior, prune_inferiors)
	(number_of_inferiors): Declare.
	(inferior_list): Declare.
	* inferior.c: Include "gdbcore.h" and "symfile.h".
	(inferior_list): Make public.
	(delete_inferior_1): Always delete thread silently.
	(find_inferior_id): Make public.
	(current_inferior_): New.
	(current_inferior): Use it.
	(set_current_inferior): New.
	(restore_inferior): New.
	(save_current_inferior): New.
	(free_inferior): Free the per-inferior data.
	(add_inferior_silent): Allocate per-inferior data.
	Call inferior_appeared.
	(delete_threads_of_inferior): New.
	(delete_inferior_1): Adjust interface to take an inferior pointer.
	(delete_inferior): Adjust.
	(delete_inferior_silent): Adjust.
	(exit_inferior_1): New.
	(exit_inferior): New.
	(exit_inferior_silent): New.
	(exit_inferior_num_silent): New.
	(detach_inferior): Adjust.
	(inferior_appeared): New.
	(discard_all_inferiors): Adjust.
	(find_inferior_id): Make public.  Assert pid is not zero.
	(find_inferior_for_program_space): New.
	(have_inferiors): Check if we have any inferior with pid not zero.
	(have_live_inferiors): Go over all pushed targets looking for
	process_stratum.
	(prune_inferiors): New.
	(number_of_inferiors): New.
	(print_inferior): Add executable column.  Print vfork parent/child
	relationships.
	(inferior_command): Adjust to cope with not running inferiors.
	(remove_inferior_command): New.
	(add_inferior_command): New.
	(clone_inferior_command): New.
	(struct inferior_data): New.
	(struct inferior_data_registration): New.
	(struct inferior_data_registry): New.
	(inferior_data_registry): New.
	(register_inferior_data_with_cleanup): New.
	(register_inferior_data): New.
	(inferior_alloc_data): New.
	(inferior_free_data): New.
	(clear_inferior_data): New.
	(set_inferior_data): New.
	(inferior_data): New.
	(initialize_inferiors): New.
	(_initialize_inferiors): Register "add-inferior",
	"remove-inferior" and "clone-inferior" commands.

	* objfiles.h: Include "progspace.h".
	(struct objfile) <pspace>: New field.
	(symfile_objfile, object_files): Don't declare.
	(ALL_PSPACE_OBJFILES): New.
	(ALL_PSPACE_OBJFILES_SAFE): New.
	(ALL_OBJFILES, ALL_OBJFILES_SAFE): Adjust.
	(ALL_PSPACE_SYMTABS): New.
	(ALL_PRIMARY_SYMTABS): Adjust.
	(ALL_PSPACE_PRIMARY_SYMTABS): New.
	(ALL_PSYMTABS): Adjust.
	(ALL_PSPACE_PSYMTABS): New.
	* objfiles.c (object_files, symfile_objfile): Delete.
	(struct objfile_sspace_info): New.
	(objfiles_pspace_data): New.
	(objfiles_pspace_data_cleanup): New.
	(get_objfile_pspace_data): New.
	(objfiles_changed_p): Delete.
	(allocate_objfile): Set the objfile's program space.  Adjust to
	reference objfiles_changed_p in pspace data.
	(free_objfile): Adjust to reference objfiles_changed_p in pspace
	data.
	(objfile_relocate): Ditto.
	(update_section_map): Add pspace argument.  Adjust to iterate over
	objfiles in the passed in pspace.
	(find_pc_section): Delete sections and num_sections statics.
	Adjust to refer to program space's objfiles_changed_p.	Adjust to
	refer to sections and num_sections store in the objfile's pspace
	data.
	(objfiles_changed): Adjust to reference objfiles_changed_p in
	pspace data.
	(_initialize_objfiles): New.
	* linespec.c (decode_all_digits, decode_dollar): Set the sal's
	program space.
	* source.c (current_source_pspace): New.
	(get_current_source_symtab_and_line): Set the sal's program space.
	(set_current_source_symtab_and_line): Set current_source_pspace.
	(select_source_symtab): Ditto.	Use ALL_OBJFILES.
	(forget_cached_source_info): Iterate over all program spaces.
	* symfile.c (clear_symtab_users): Adjust.
	* symmisc.c (print_symbol_bcache_statistics): Iterate over all
	program spaces.
	(print_objfile_statistics): Ditto.
	(maintenance_print_msymbols): Ditto.
	(maintenance_print_objfiles): Ditto.
	(maintenance_info_symtabs): Ditto.
	(maintenance_info_psymtabs): Ditto.
	* symtab.h (SYMTAB_PSPACE): New.
	(struct symtab_and_line) <pspace>: New field.
	* symtab.c (init_sal): Clear the sal's program space.
	(find_pc_sect_symtab): Set the sal's program space.  Switch thread
	and space.
	(append_expanded_sal): Add program space argument.  Iterate over
	all program spaces.
	(expand_line_sal): Iterate over all program spaces.  Switch
	program space.

	* target.h (enum target_waitkind) <TARGET_WAITKIND_VFORK_DONE>: New.
	(struct target_ops) <to_thread_address_space>: New field.
	(target_thread_address_space): Define.
	* target.c (target_detach): Only remove breakpoints from the
	inferior we're detaching.
	(target_thread_address_space): New.

	* defs.h (initialize_progspace): Declare.
	* top.c (gdb_init): Call it.

	* solist.h (struct so_list) <sspace>: New field.
	* solib.h (struct program_space): Forward declare.
	(solib_name_from_address): Adjust prototype.
	* solib.c (so_list_head): Replace with a macro referencing the
	program space.
	(update_solib_list): Set the so's program space.
	(solib_name_from_address): Add a program space argument and adjust.

	* solib-svr4.c (struct svr4_info) <pid>: Delete field.
	<interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low>
	<interp_plt_sect_high>: New fields.
	(svr4_info_p, svr4_info): Delete.
	(solib_svr4_sspace_data): New.
	(get_svr4_info): Rewrite.
	(svr4_sspace_data_cleanup): New.
	(open_symbol_file_object): Adjust.
	(svr4_default_sos): Adjust.
	(svr4_fetch_objfile_link_map): Adjust.
	(interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low)
	(interp_plt_sect_high): Delete.
	(svr4_in_dynsym_resolve_code): Adjust.
	(enable_break): Adjust.
	(svr4_clear_solib): Revert bit that removed the svr4_info here,
	and reinstate clearing debug_base, debug_loader_offset_p,
	debug_loader_offset and debug_loader_name.
	(_initialize_svr4_solib): Register solib_svr4_pspace_data.  Don't
	install an inferior_exit observer anymore.

	* printcmd.c (struct display) <pspace>: New field.
	(display_command): Set the display's sspace.
	(do_one_display): Match the display's sspace.
	(display_uses_solib_p): Ditto.

	* linux-fork.c (detach_fork): Moved to infrun.c.
	(_initialize_linux_fork): Moved "detach-on-fork" command to
	infrun.c.
	* infrun.c (detach_fork): Moved from linux-fork.c.
	(proceed_after_vfork_done): New.
	(handle_vfork_child_exec_or_exit): New.
	(follow_exec_mode_replace, follow_exec_mode_keep)
	(follow_exec_mode_names, follow_exec_mode_string)
	(show_follow_exec_mode_string): New.
	(follow_exec): New.  Reinstate the mark_breakpoints_out call.
	Remove shared libraries before attaching new executable.  If user
	wants to keep the inferior, keep it.
	(displaced_step_fixup): Adjust to pass an address space to the
	breakpoints module.
	(resume): Ditto.
	(clear_proceed_status): In all-stop mode, always clear the proceed
	status of all threads.
	(prepare_to_proceed): Adjust to pass an address space to the
	breakpoints module.
	(proceed): Ditto.
	(adjust_pc_after_break): Ditto.
	(handle_inferior_event): When handling a process exit, switch the
	program space to the inferior's that had exited.  Call
	handle_vfork_child_exec_or_exit.  Adjust to pass an address space
	to the breakpoints module.  In non-stop mode, when following a
	fork and detach-fork is off, also resume the other branch.  Handle
	TARGET_WAITKIND_VFORK_DONE.  Set the program space in sals.
	(normal_stop): Prune inferiors.
	(_initialize_infrun): Install the new "follow-exec-mode" command.
	"detach-on-fork" moved here.

	* regcache.h (get_regcache_aspace): Declare.
	* regcache.c (struct regcache) <aspace>: New field.
	(regcache_xmalloc): Clear the aspace.
	(get_regcache_aspace): New.
	(regcache_cpy): Copy the aspace field.
	(regcache_cpy_no_passthrough): Ditto.
	(get_thread_regcache): Fetch the thread's address space from the
	target, and store it in the regcache.

	* infcall.c (call_function_by_hand): Set the sal's pspace.

	* arch-utils.c (default_has_shared_address_space): New.
	* arch-utils.h (default_has_shared_address_space): Declare.

	* gdbarch.sh (has_shared_address_space): New.
	* gdbarch.h, gdbarch.c: Regenerate.

	* linux-tdep.c: Include auxv.h, target.h, elf/common.h.
	(linux_has_shared_address_space): New.
	(_initialize_linux_tdep): Declare.

	* arm-tdep.c (arm_software_single_step): Pass the frame's address
	space to insert_single_step_breakpoint.
	* arm-linux-tdep.c (arm_linux_software_single_step): Pass the
	frame's pspace to breakpoint functions.
	* cris-tdep.c (crisv32_single_step_through_delay): Ditto.
	(cris_software_single_step): Ditto.
	* mips-tdep.c (deal_with_atomic_sequence): Add frame argument.
	Pass the frame's pspace to breakpoint functions.
	(mips_software_single_step): Adjust.
	(mips_single_step_through_delay): Adjust.
	* rs6000-aix-tdep.c (rs6000_software_single_step): Adjust.
	* rs6000-tdep.c (ppc_deal_with_atomic_sequence): Adjust.
	* solib-irix.c (enable_break): Adjust to pass the current frame's
	address space to breakpoint functions.
	* sparc-tdep.c (sparc_software_single_step): Ditto.
	* spu-tdep.c (spu_software_single_step): Ditto.
	* alpha-tdep.c (alpha_software_single_step): Ditto.
	* record.c (record_wait): Adjust to pass an address space to the
	breakpoints module.

	* fork-child.c (fork_inferior): Set the new inferior's program and
	address spaces.
	* inf-ptrace.c (inf_ptrace_follow_fork): Copy the parent's program
	and address spaces.
	(inf_ptrace_attach): Set the inferior's program and address spaces.
	* linux-nat.c: Include "solib.h".
	(linux_child_follow_fork): Manage parent and child's program and
	address spaces.	 Clone the parent's program space if necessary.
	Don't wait for the vfork to be done here.  Refuse to resume if
	following the vfork parent while leaving the child stopped.
	(resume_callback): Don't resume a vfork parent.
	(linux_nat_resume): Also check for pending events in the
	lp->waitstatus field.
	(linux_handle_extended_wait): Report TARGET_WAITKIND_VFORK_DONE
	events to the core.
	(stop_wait_callback): Don't wait for SIGSTOP on vfork parents.
	(cancel_breakpoint): Adjust.
	* linux-thread-db.c (thread_db_wait): Don't remove thread event
	breakpoints here.
	(thread_db_mourn_inferior): Don't mark breakpoints out here.
	Remove thread event breakpoints after mourning.
	* corelow.c: Include progspace.h.
	(core_open): Set the inferior's program and address spaces.
	* remote.c (remote_add_inferior): Set the new inferior's program
	and address spaces.
	(remote_start_remote): Update address spaces.
	(extended_remote_create_inferior_1): Don't init the thread list if
	we already debugging other inferiors.
	* darwin-nat.c (darwin_attach): Set the new inferior's program and
	address spaces.
	* gnu-nat.c (gnu_attach): Ditto.
	* go32-nat.c (go32_create_inferior): Ditto.
	* inf-ttrace.c (inf_ttrace_follow_fork, inf_ttrace_attach): Ditto.
	* monitor.c (monitor_open): Ditto.
	* nto-procfs.c (procfs_attach, procfs_create_inferior): Ditto.
	* procfs.c (do_attach): Ditto.
	* windows-nat.c (do_initial_windows_stuff): Ditto.

	* inflow.c (inferior_process_group)
	(terminal_init_inferior_with_pgrp, terminal_inferior,
	(terminal_ours_1, inflow_inferior_exit, copy_terminal_info)
	(child_terminal_info, new_tty_postfork, set_sigint_trap): Adjust
	to use per-inferior data instead of inferior->terminal_info.
	(inflow_inferior_data): New.
	(inflow_new_inferior): Delete.
	(inflow_inferior_data_cleanup): New.
	(get_inflow_inferior_data): New.

	* mi/mi-interp.c (mi_new_inferior): Rename to...
	(mi_inferior_appeared): ... this.
	(mi_interpreter_init): Adjust.

	* tui/tui-disasm.c: Include "progspace.h".
	(tui_set_disassem_content): Pass an address space to
	breakpoint_here_p.

	* NEWS: Mention multi-program debugging support.  Mention new
	commands "add-inferior", "clone-inferior", "remove-inferior",
	"maint info program-spaces", and new option "set
	follow-exec-mode".

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* observer.texi (new_inferior): Rename to...
	(inferior_appeared): ... this.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/testsuite/
	* gdb.base/foll-vfork.exp: Adjust to spell out "follow-fork".
	* gdb.base/foll-exec.exp: Adjust to expect a process id before
	"Executing new program".
	* gdb.base/foll-fork.exp: Adjust to spell out "follow-fork".
	* gdb.base/multi-forks.exp: Ditto.  Adjust to the inferior being
	left listed after having been killed.
	* gdb.base/attach.exp: Adjust to spell out "symbol-file".
	* gdb.base/maint.exp: Adjust test.

	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* gdb.multi/Makefile.in: New.
	* gdb.multi/base.exp: New.
	* gdb.multi/goodbye.c: New.
	* gdb.multi/hangout.c: New.
	* gdb.multi/hello.c: New.
	* gdb.multi/bkpt-multi-exec.c: New.
	* gdb.multi/bkpt-multi-exec.exp: New.
	* gdb.multi/crashme.c: New.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Inferiors): Rename node to ...
	(Inferiors and Programs): ... this.  Mention running multiple
	programs in the same debug session.
	<info inferiors>: Mention the new 'Executable' column if "info
	inferiors".  Update examples.  Document the "add-inferior",
	"clone-inferior", "remove-inferior" and "maint info
	program-spaces" commands.
	(Process): Rename node to...
	(Forks): ... this.  Document "set|show follow-exec-mode".
@
text
@d4 1
a4 1
   2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009
@


1.116
log
@        gdb/
        * frame.c (get_frame_id): Default to outer_frame_id if the this_id
        method does not supply an ID.  Assert that the result is not
        null_frame_id.
        (outer_frame_id): New.
        (frame_id_p): Accept outer_frame_id.
        (frame_id_eq): Allow outer_frame_id to be equal to itself.
        (frame_find_by_id): Revert previous local workarounds.
        (get_prev_frame_1): Adjust end-of-stack check to test outer_frame_id.
        * frame.h (null_frame_id, frame_id_p): Update comments.
        (outer_frame_id): Declare.
        * infrun.c (handle_inferior_event): Do not treat all steps from the
        outermost frame as subroutine calls.

        * libunwind-frame.c (libunwind_frame_this_id): Do not clear THIS_ID.
        * hppa-tdep.c (hppa_stub_frame_this_id): Likewise.
        * ia64-tdep.c (ia64_frame_this_id): Likewise.
        (ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id):
        Use outer_frame_id instead of null_frame_id.
        * amd64obsd-tdep.c (amd64obsd_trapframe_cache): Use outer_frame_id.
        * i386obsd-tdep.c (i386obsd_trapframe_cache): Likewise.
        * inline-frame.c (inline_frame_this_id): Refuse outer_frame_id.
        * thread.c (restore_selected_frame): Update comment and remove
        frame_id_p check.

        gdb/doc/
        * gdbint.texinfo (Unwinding the Frame ID): Reference outer_frame_id.
@
text
@d443 18
d866 13
d943 1
a943 1
  if (!ui_out_is_mi_like_p (uiout))
d961 1
d980 4
a983 1
    restore_current_thread (null_ptid);
d1017 1
@


1.115
log
@gdb/
2009-07-02  Pedro Alves  <pedro@@codesourcery.com>

	* linux-nat.c (linux_child_follow_fork): If we're staying attached
	to the child process, enable event reporting on it.  Don't handle
	checkpoints here.  Instead, add the child fork to the lwp thread
	and inferior lists without clobbering the previous inferior.  Let
	the thread_db layer learn about a new child process, even if
	following the parent.
	(linux_nat_switch_fork): Delete lwps of the current inferior only,
	instead of clearing the whole list.  Use thread_change_ptid to
	give the core the illusion the new checkpoint is still the same
	inferior.  Clear the register cache.
	(linux_handle_extended_wait): Handle checkpoints here.
	(linux_multi_process): Turn on.
	* linux-fork.c (struct fork_info) <pc>: Remove field.
	(init_fork_list): Do not delete the checkpoint from the inferior
	list (it is not there).
	(fork_load_infrun_state): Don't switch inferior_ptid here.  Pass
	the new checkpoint's ptid to linux_nat_switch_fork.
	(fork_save_infrun_state): Make static.  Don't stop the pc field of
	fork_info, it's gone.
	(linux_fork_mourn_inferior): Don't delete the checkpoint from the
	inferior list, it's not there.
	(linux_fork_detach): Ditto.
	(delete_fork_command): Replace mention of fork/checkpoint by
	checkpoint only.
	(detach_fork_command): Likewise.  Don't delete the checkpoint from
	the inferior list.
	(info_forks_command): Adjust.
	(restore_detach_fork): Delete.
	(checkpointing_pid): New.
	(linux_fork_checkpointing_p): New.
	(save_detach_fork): Delete.
	(checkpoint_command): Delete temp_detach_fork.  Don't remove
	breakpoints, that's a nop.  Store the pid of the process we're
	checkpointing, and use make_cleanup_restore_integer to restore it.
	Don't reinsert breakpoints here.
	(process_command, fork_command): Delete.
	(restart_command): Update comments to only mention checkpoints,
	not forks.
	(_initialize_linux_fork): Delete "fork", "process", "info forks"
	commands.
	* linux-fork.h (fork_save_infrun_state, fork_list): Delete
	declarations.
	(linux_fork_checkpointing_p): Declare.
	* cli/cli-cmds.c (killlist): New.
	* cli/cli-cmds.h (killlist): Declare.
	* gdbcmd.h (killlist): Declare.
	* inferior.c: Include "gdbthread.h".
	(detach_inferior_command, kill_inferior_command)
	(inferior_command): New.
	(info_inferiors_command): Allow specifying a specific inferior id.
	(_initialize_inferiors): Register "inferior", "kill inferior" and
	"detach inferior" commands.
	* infcmd.c (_initialize_infcmd): Make "kill" a prefix command.
	* gdbthread.h (any_thread_of_process): Declare.
	* thread.c (any_thread_of_process): New.

	* NEWS: Mention multi-inferior debugging.  Mention 'info
	inferiors', 'inferior', 'detach inferior' and 'kill inferior' as
	new commands.
	(Removed commands): New section, mentioning that 'info forks',
	'fork', 'process', 'delete fork' and 'detach fork' are now gone.

gdb/testsuite/
2009-07-02  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.base/multi-forks.exp: Only run detach-on-fork tests on
	linux.  Adjust to use "inferior", "info inferiors", "detach
	inferior" and "kill inferior" instead of "restart", "info fork",
	"detach fork" and "delete fork".
	* gdb.base/ending-run.exp: Spell out "info".
	* gdb.base/help.exp: Adjust to use test_prefix_command_help for
	the "kill" command.

gdb/doc/
2009-07-02  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo (Debugging multiple inferiors): Document the
	"inferior", "detach inferior" and "kill inferior" commands.
	(Debugging Programs with Multiple Processes): Adjust to mention
	generic "inferior" commands.  Delete mention of "detach fork" and
	"delete fork".  Cross reference to "Debugging multiple inferiors"
	section.
@
text
@d888 2
a889 2
      /* Either the frame ids match, of they're both invalid.  The
	 latter case is not failsafe, but since it's highly unlikely
d892 1
a892 5
      && (frame_id_eq (get_frame_id (frame), a_frame_id)
	  /* Note: could be better to check every frame_id
	     member for equality here.  */
	  || (!frame_id_p (get_frame_id (frame))
	      && !frame_id_p (a_frame_id))))
@


1.114
log
@	* target.h (struct target_ops): Make to_has_all_memory,
	to_has_memory, to_has_stack, to_has_registers and to_has_execution
	methods instead of variables.
	(target_has_all_memory_1, target_has_memory_1, target_has_stack_1)
	(target_has_registers_1, target_has_execution_1): Declare
	functions.
	(target_has_all_memory): Rewrite to call target_has_all_memory_1.
	(target_has_memory): Rewrite to call target_has_memory_1.
	(target_has_stack): Rewrite to call target_has_all_stack_1.
	(target_has_registers): Rewrite to call target_has_registers_1.
	(target_has_execution): Rewrite to call target_has_execution_1.
	(default_child_has_all_memory, default_child_has_memory)
	(default_child_has_stack, default_child_has_registers)
	(default_child_has_execution): Declare.
	(target_mark_running, target_mark_exited): Delete declarations.
	* target.c (default_child_has_all_memory,
	default_child_has_memory, default_child_has_stack,
	default_child_has_registers, default_child_has_execution): New.
	(target_has_all_memory_1, target_has_memory_1, target_has_stack_1,
	target_has_registers_1, target_has_execution_1): New.
	(add_target): Default the to_has_all_memory, to_has_all_memory,
	to_has_memory, to_has_stack, to_has_registers and to_has_execution
	callbacks to return 0.
	(update_current_target): Do not inherit to_has_all_memory,
	to_has_memory, to_has_stack, to_has_registers or to_has_execution.
	(target_mark_running, target_mark_exited): Delete.
	(memory_xfer_partial): Adjust.
	(target_read_memory, target_write_memory, target_search_memory):
	Dispatch to the the top-most target, not the flattened
	current_target.
	(target_info): Adjust.
	(init_dummy_target): Install return_zero as callback for
	to_has_all_memory, to_has_memory, to_has_stack, to_has_registers,
	to_has_execution.
	(set_maintenance_target_async_permitted): Use have_live_inferiors
	instead of target_has_execution.
	* target-memory.c (target_write_memory_blocks): Dispatch memory
	writes to the the top-most target, not the flattened
	current_target.

	* breakpoint.c (insert_breakpoints): Don't check for
	target_has_execution here.
	(update_global_location_list): Check if there are live inferiors
	to debug instead of target_has_execution.
	* infcmd.c (kill_command, detach_command): Check if there are
	inferiors instead of target_has_execution.
	* inferior.h (have_live_inferiors): Declare.
	* inferior.c (have_live_inferiors): New.
	* infrun.c (normal_stop): Don't check for target_has_execution to
	finish the thread states.
	* thread.c (is_thread_state, is_stopped, is_exited, is_running)
	(any_running, is_executing): Remove checks for
	target_has_execution.
	* top.c (kill_or_detach): Don't try to kill core inferiors.
	(quit_target): Don't check for target_has_execution.

	* corelow.c (core_has_memory, core_has_stack, core_has_registers):
	New.
	(init_core_ops): Install core_has_memory, core_has_stack and
	core_has_registers.
	* exec.c (exec_has_memory): New.
	(init_exec_ops): Install exec_has_memory.
	* remote.c (remote_add_inferior): Don't call target_mark_running.
	(remote_start_remote): Don't call target_mark_exited or call
	target_mark_running.
	(remote_open_1): Use have_inferiors instead of
	target_has_execution.  Don't use target_mark_exited.
	(init_remote_ops): Install deafult_child_has_all_memory,
	default_child_has_memory, default_child_has_stack,
	default_child_has_registers, default_child_has_execution.
	* bsd-kvm.c (bsd_kvm_return_one): New.
	(bsd_kvm_add_target): Register bsd_kvm_return_one as
	to_has_memory, to_has_stack and to_has_registers callbacks.
	* remote-m32r-sdi.c (m32r_return_one): New.
	(init_m32r_ops): Register it.
	* inf-child.c (inf_child_target): Adjust to register
	default_child_has_all_memory, default_child_has_memory,
	default_child_has_stack, default_child_has_registers,
	default_child_has_execution callbacks.
	* gnu-nat.c (init_gnu_ops): Likewise.
	* go32-nat.c (init_go32_ops): Likewise.
	* hpux-thread.c (init_hpux_thread_ops): Likewise.
	* monitor.c (init_base_monitor_ops): Likewise.
	* nto-procfs.c (init_procfs_ops): Likewise.
	* remote-mips.c (_initialize_remote_mips): Likewise.
	* windows-nat.c (init_windows_ops): Likewise.
	* remote-sim.c (gdbsim_create_inferior): Don't use
	target_mark_running or target_mark_exited.
	(gdbsim_mourn_inferior): Don't call target_mark_exited.
	(init_gdbsim_ops): Adjust to register
	default_child_has_all_memory, default_child_has_memory,
	default_child_has_stack, default_child_has_registers,
	default_child_has_execution callbacks.

	* linux-nat.c (linux_nat_xfer_partial): If reading memory, and
	there's no inferior selected, defer to a lower stratum.
@
text
@d431 12
@


1.113
log
@gdb:
	Global renaming of find_thread_pid to find_thread_ptid.
	* gdbthread.h (find_thread_ptid): Renamed from find_thread_pid.
	* thread.c (find_thread_ptid): Renamed from find_thread_pid.
	All callers updated.
gdbserver:
	Global renaming of find_thread_pid to find_thread_ptid.
	* server.h (find_thread_ptid): Renamed from find_thread_pid.
	* inferiors.c (find_thread_ptid): Renamed from find_thread_pid.
	All callers updated.
@
text
@a561 3
  if (!target_has_execution)
    return 0;

a569 4
  /* Without execution, this property is always true.  */
  if (!target_has_execution)
    return 1;

a575 4
  /* Without execution, this property is always false.  */
  if (!target_has_execution)
    return 0;

a581 4
   /* Without execution, this property is always false.  */
  if (!target_has_execution)
    return 0;

a589 3
  if (!target_has_execution)
    return 0;

a601 3
  if (!target_has_execution)
    return 0;

@


1.112
log
@gdb/
	* gdbthread.h (struct thread_info): New `pending_follow' field.
	* thread.c (new_thread): New function.
	(add_thread_silent): Use it.
	* breakpoint.c (internal_breakpoint_number): New global, moved
	from inside...
	(create_internal_breakpoint): ... this.
	(clone_momentary_breakpoint): New.
	* breakpoint.h (clone_momentary_breakpoint): Declare.
	* infrun.c (nullify_last_target_wait_ptid): Move declaration
	higher.
	(pending_follow): Delete.
	(follow_fork): Handle pending follow fork event here.  Moved the
	preserving of thread stepping state here.
	(resume): Don't handle pending follow fork events here.  Only
	install the inferior's terminal modes if we're about to resume it.
	(proceed): Handle possible pending follow fork events here.
	(init_wait_for_inferior): No need to clear pending_follow anymore,
	it's gone.
	(handle_inferior_event): Adjust to per-thread `pending_follow'.
	Call `follow_fork' to handle following the fork.  If the
	follow-fork is cancelled, stop stepping.
	* linux-nat.c (linux_child_follow_fork): Adjust to per-thread
	`pending_follow' events.  Remove code that handled preserving the
	thread stepping state.
	* inf-ptrace.c (inf_ptrace_follow_fork): Ditto.
	* inf-ttrace.c (inf_ttrace_follow_fork): Ditto.

gdb/testsuite/
	* gdb.threads/fork-thread-pending.c: New.
	* gdb.threads/fork-thread-pending.exp: New.
@
text
@d78 1
a78 1
  struct thread_info *tp = find_thread_pid (inferior_ptid);
d171 1
a171 1
  tp = find_thread_pid (ptid);
d316 1
a316 1
find_thread_pid (ptid_t ptid)
d513 1
a513 1
  tp = find_thread_pid (old_ptid);
d546 1
a546 1
      tp = find_thread_pid (ptid);
d565 1
a565 1
  tp = find_thread_pid (ptid);
d623 1
a623 1
  tp = find_thread_pid (ptid);
d642 1
a642 1
      tp = find_thread_pid (ptid);
d662 1
a662 1
      tp = find_thread_pid (ptid);
d698 1
a698 1
      tp = find_thread_pid (ptid);
d951 1
a951 1
  tp = find_thread_pid (old->inferior_ptid);
d980 1
a980 1
  tp = find_thread_pid (old->inferior_ptid);
d1010 1
a1010 1
      tp = find_thread_pid (inferior_ptid);
@


1.111
log
@	* fork-child.c (fork_inferior): Only reset the thread list if this
	is the first inferior.
	(startup_inferior): If the target support multi-process, tell it
	to resume only the new process.
	* linux-nat.c (num_lwps): Delete global.
	(purge_lwp_list): New function.
	(num_lwps): New function.
	(add_lwp, delete_lwp): Adjust.
	(ptid_match): New.
	(iterate_over_lwps): Add filter argument.  Handle it.
	(linux_nat_attach): Remove FIXME note.
	(linux_nat_detach): Adjust to iterate over threads of the inferior
	we're detaching from.  Adjust to num_lwps being a function.  Don't
	assume the head of the lwp list is the main thread of the process
	we're detaching from.  Don't destroy the LWP list.
	(resume_callback): Add debug output.
	(linux_nat_resume): Handle resuming a single inferior.  Allow a
	wildcard resume in non-stop mode.
	(linux_handle_extended_wait): Don't assume inferior_ptid is the
	correct inferior of the parent LWP.
	(status_callback): Also check lp->waitstatus.
	(select_event_lwp): Add new filter parameter.  Handle it.
	(linux_nat_filter_event): Adjust to num_lwps being a function.
	(linux_nat_wait_1): When adding the first lwp of the inferior, use
	an is_lwp check instead of checking for the number of lwps.
	(linux_nat_wait_1): Handle waiting for a specific tgid.  Handle
	pending process exit statuses.
	(linux_nat_mourn_inferior): Don't destroy all the LWP info.
	Instead delete LWPs of the inferior that we're mourning.  Don't
	unregister from the event loop here.
	(linux_nat_pid_to_str): Use `num_lwps'.
	(linux_nat_make_corefile_notes): Adjust to walk over lwps of a
	single inferior.
	(linux_nat_is_async_p): Check if async was masked out.
	(linux_multi_process): New global.
	(linux_nat_supports_multi_process): New.
	(linux_nat_stop_lwp): Remove LWP filtering.  It is done by the
	caller.
	(linux_nat_stop): Adjust to make iterate_over_lwps itself do the
	LWP filtering.
	(linux_nat_close): New.
	(linux_nat_add_target): Register linux_nat_close and
	linux_nat_supports_multi_process.
	* linux-nat.h (iterate_over_lwps): Add filter argument.
	* linux-thread-db.c (thread_db_handle): Delete.
	(proc_handle, thread_agent, td_init_p, td_ta_new_p)
	(td_ta_map_id2thr_p, td_ta_map_lwp2thr_p, td_ta_thr_iter_p)
	(td_ta_event_addr_p, td_ta_set_event_p, td_ta_event_getmsg_p)
	(td_thr_validate_p, td_thr_get_info_p, td_thr_event_enable_p)
	(td_thr_tls_get_addr_p, td_create_bp_addr, td_death_bp_addr): No
	longer globals, moved to...
	(struct thread_db_info): ... this new structure.
	(thread_db_list): New.
	(add_thread_db_info, get_thread_db_info, delete_thread_db_info):
	New.
	(have_threads_callback): Filter out threads of all inferiors but
	the one specified by the ARGS argument.
	(have_threads): Add ptid argument specifying the inferior we're
	interested in.  Handle it.
	(struct thread_get_info_inout): New.
	(thread_get_info_callback, thread_from_lwp): Adjust to use it.
	(thread_db_attach_lwp): Check that inferior of the passed in
	thread is using thread-db.  Adjust.
	(enable_thread_event): Remove thread_agent parameter.  Instead,
	get it from the per-inferior thread-db info.
	(dladdr_to_soname): Move higher up.
	(enable_thread_event_reporting): Adjust to use per-inferior
	thread-db info.
	(try_thread_db_load_1): Replace `handle' parameter by a
	thread_db_info parameter.  Adjust to use per-inferior thread-db
	info.
	(try_thread_db_load): Adjust to use per-inferior thread-db info.
	(thread_db_load, disable_thread_event_reporting): Ditto.
	(check_for_thread_db): Remove conditional reporting of which
	libthread_db is in use.
	(thread_db_new_objfile): Add comment about inferior_ptid.
	(attach_thread): Adjust to use per-inferior thread-db info.
	(thread_db_detach): Adjust to use per-inferior thread-db info.
	Remove thread event breakpoints of the current inferior.  Only
	unpush the thread-db target if there are no more processes using
	it.
	(check_event): Adjust to use per-inferior thread-db info.
	(thread_db_wait): Adjust to use per-inferior thread-db info.  Only
	unpush the thread-db target if there are no more processes using
	it.
	(thread_db_mourn_inferior): Adjust to use per-inferior thread-db
	info.  Mark breakpoints of the current inferior out before
	deleting them.  Only unpush the thread-db target if there are no
	more processes using it.
	(find_new_threads_callback): Adjust to use per-inferior thread_db
	info.
	(thread_db_find_new_threads_1): Add new ptid argument.  Adjust to
	use per-inferior thread-db info.
	(thread_db_find_new_threads): Adjust to use per-inferior thread-db
	info.
	(thread_db_get_thread_local_address): Adjust.
	(thread_db_get_ada_task_ptid): Adjust.
	* inf-ptrace.c (inf_ptrace_mourn_inferior): Only unpush the target
	if there no more processes left to debug.
	* thread.c (set_running, set_executing): Handle resuming all
	threads of a single inferior.
	* mi/mi-interp.c (mi_output_running_pid): New.
	(mi_inferior_count): New.
	(mi_on_resume): For backwards compatibility, if resuming all
	threads of an inferior, and there is only one inferior, output
	"all".
@
text
@d144 22
d187 1
a187 6
	  tp = xmalloc (sizeof (*tp));
	  memset (tp, 0, sizeof (*tp));
	  tp->ptid = minus_one_ptid;
	  tp->num = ++highest_thread_num;
	  tp->next = thread_list;
	  thread_list = tp;
d211 1
a211 7
  tp = (struct thread_info *) xmalloc (sizeof (*tp));
  memset (tp, 0, sizeof (*tp));
  tp->ptid = ptid;
  tp->num = ++highest_thread_num;
  tp->next = thread_list;
  thread_list = tp;

@


1.110
log
@	* inferior.h (read_pc, write_pc): Remove.
	* regcache.c (read_pc, write_pc): Remove.

	* infrun.c (displaced_step_fixup): Use regcache_read_pc instead
	of read_pc.
	(handle_inferior_event): Use regcache_read_pc instead of read_pc
	when determining value of stop_pc.  Replace subsequent uses of
	read_pc by inspecting already-retrieved stop_pc value.
	(keep_going): Use regcache_read_pc instead of read_pc.

	* breakpoint.c (watchpoint_check): Use current frame architecture
	and PC instead of current_gdbarch and read_pc ().
	* tracepoint.c (set_traceframe_context): Replace PC argument
	with FRAME argument.
	(trace_start_command, finish_tfind_command): Update calls.
	(finish_tfind_command): Compare frame IDs to identify transitions
	between frames.
	(trace_find_pc_command): Use regcache_read_pc instead of read_pc.
	* rs6000-nat.c (exec_one_dummy_insn): Pass in regcache instead
	of gdbarch.  Use regcache_read_pc and regcache_write_pc instead
	of read_pc and write_pc.
	(store_register): Make regcache argument non-const.  Update call
	to exec_one_dummy_insn.

	* thread.c (switch_to_thread): Use regcache_read_pc instead of read_pc.
	* infcmd.c (post_create_inferior): Likewise.
	* solib-darwin.c (darwin_solib_create_inferior_hook): Likewise.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Likewise.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Likewise.
	* solib-svr4.c (enable_break, svr4_relocate_main_executable): Likewise.
	* linux-fork.c (fork_load_infrun_state): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_push_dummy_code): Likewise.
	* record.c (record_wait): Likewise.
	* procfs.c (procfs_wait): Likewise.
	* remote-mips.c (common_open, mips_wait): Likewise.
	* remote-m32r-sdi.c (m32r_resume): Likewise.

	* symfile.c (generic_load): Use regcache_write_pc instead of write_pc.
	* monitor.c (monitor_create_inferior, monitor_load): Likewise.
	* m32r-rom.c (m32r_load, m32r_upload_command): Likewise.
	* remote-m32r-sdi.c (m32r_create_inferior, m32r_load): Likewise.
	* remote-mips.c (mips_create_inferior, mips_load): Likewise.

	* solib-darwin.c: Include "regcache.h".
	* solib-pa64.c: Include "regcache.h".
	* solib-svr4.c: Include "regcache.h.".

	* symfile.c: Do not mention read_pc or write_pc in comments.
	* dink32-rom.c: Likewise.
	* m32r-rom.c: Likewise.
	* mips-tdep.c: Likewise.
@
text
@d512 1
d517 1
a517 1
  if (PIDGET (ptid) == -1)
d521 8
a528 7
	{
 	  if (tp->state_ == THREAD_EXITED)
  	    continue;
  	  if (running && tp->state_ == THREAD_STOPPED)
  	    any_started = 1;
 	  tp->state_ = running ? THREAD_RUNNING : THREAD_STOPPED;
	}
d621 1
d623 1
a623 1
  if (PIDGET (ptid) == -1)
d626 2
a627 1
	tp->executing_ = executing;
@


1.109
log
@	* remote.c (remote_notice_new_inferior): Use ptid_is_pid.  Check
	if the thread's ptid without a thread id field is in the list
	before calling thread_change_ptid.
	(extended_remote_attach_1): In non-stop mode, do not rely on
	querying the current thread, instead, query the thread list, and
	select the first thread of the process.
	* gdbthread.h (first_thread_of_process): Declare.
	* thread.c (first_thread_of_process): Define.
@
text
@d855 1
a855 1
    stop_pc = read_pc ();
@


1.108
log
@	* thread.c (do_restore_current_thread_cleanup): Redo test for
	whether to restore old->inferior_ptid.

	* gdb.mi/mi-nonstop-exit.exp: New file.
	* gdb.mi/non-stop-exit.c: New file.
@
text
@d404 16
@


1.107
log
@	* thread.c (inferior_thread) Remove "extern" in definition.
@
text
@d927 3
a929 2
      && is_exited (tp->ptid)
      && find_inferior_pid (ptid_get_pid (tp->ptid)) == NULL)
a930 2
  else
    restore_current_thread (old->inferior_ptid);
@


1.106
log
@gdb/
	* infrun.c (infrun_thread_thread_exit): New.
	(_initialize_infrun): Attach it to the thread_exit observer.
	* thread.c (delete_thread_1): Always call the observer, passing it
	the silent flag.
	* mi/mi-interp.c (mi_thread_exit): Add "silent" parameter.  If
	SILENT, return immediately.

gdb/doc/
	* observer.texi (thread_exit): Add "silent" parameter.
@
text
@d75 1
a75 1
extern struct thread_info*
@


1.105
log
@	* infrun.c (normal_stop): Use has_stack_frames instead of
	target_has_stack.
	* mi/mi-main.c (mi_execute_command): Avoid calling inferior_thread
	when there is no thread selected.
	(mi_cmd_execute): Don't special case commands that can run without
	a valid selected thread.
	* top.c (execute_command): Don't special case commands that can
	run without a valid selected thread.  Use has_stack_frames.
	* infcmd.c (ensure_valid_thread): New.
	(continue_1, step_1, jump_command, signal_command): Use it.
	(detach_command): Error out if there's no selected thread/inferior.
	* thread.c (print_thread_info): Allow having no thread selected.
	(switch_to_thread): Don't read the PC if there is no current thread.
	(do_restore_current_thread_cleanup): Don't record the current
	frame if there is no current thread.
	(make_cleanup_restore_current_thread): Don't read frame info if
	there is no selected thread.
	(_initialize_thread): Don't mark commands as
	"no_selected_thread_ok".
	* frame.c (get_current_frame): Error out if there is no valid
	selected thread.
	(has_stack_frames): Return false if there is no valid
	selected thread.
	* cli/cli-cmds.c (init_cli_cmds): Don't mark commands as
	"no_selected_thread_ok".
	* cli/cli-decode.c (set_cmd_no_selected_thread_ok)
	(get_cmd_no_selected_thread_ok): Delete.
	* cli/cli-decode.h (CMD_NO_SELECTED_THREAD_OK): Delete.
	(set_cmd_no_selected_thread_ok, get_cmd_no_selected_thread_ok):
	Delete declaration.
	* stack.c (get_selected_block): Use has_stack_frames.
@
text
@d250 1
a250 2
	  if (!silent)
	    observer_notify_thread_exit (tp);
d269 2
a270 2
  if (!silent && tp->state_ != THREAD_EXITED)
    observer_notify_thread_exit (tp);
@


1.104
log
@	* gdbthread.h (struct thread_info): Add in_infcall member.
	* infcall.c (run_inferior_call): Save, set and restore in_infcall.
	Remove reverences to suppress_resume_observer.  Refresh
	`call_thread' after returning from `proceed'.
	* infcmd.c (suppress_resume_observer): Delete.
	* inferior.h (suppress_resume_observer): Delete declaration.
	* mi/mi-interp.c (mi_on_resume): Suppress output while calling an
	inferior function.
	* thread.c (set_running): Remove references to
	suppress_resume_observer.
	* infrun.c (struct inferior_status): Add in_infcall member.
	(save_inferior_status): Save it.
	(restore_inferior_status): Restore it.
@
text
@d788 1
a788 1
  if (pid == -1 && requested_thread == -1 )
d791 2
a792 1
		  || !thread_list);
d800 5
d837 3
a839 1
  if (!is_exited (ptid) && !is_executing (ptid))
d920 13
a932 1
  restore_current_thread (old->inferior_ptid);
d936 2
a937 1
  if (old->was_stopped
a965 8
  old->was_stopped = is_stopped (inferior_ptid);
  if (old->was_stopped
      && target_has_registers
      && target_has_stack
      && target_has_memory)
    frame = get_selected_frame (NULL);
  else
    frame = NULL;
d967 13
a979 2
  old->selected_frame_id = get_frame_id (frame);
  old->selected_frame_level = frame_relative_level (frame);
d981 4
a984 3
  tp = find_thread_pid (inferior_ptid);
  if (tp)
    tp->refcount++;
d1114 3
a1202 1
  struct cmd_list_element *c;
d1204 2
a1205 3
  c = add_info ("threads", info_threads_command,
		_("IDs of currently known threads."));
  set_cmd_no_selected_thread_ok (c);
d1207 1
a1207 1
  c = add_prefix_cmd ("thread", class_run, thread_command, _("\
d1210 5
a1214 2
		      &thread_cmd_list, "thread ", 1, &cmdlist);
  set_cmd_no_selected_thread_ok (c);
d1216 2
a1217 8
  c = add_prefix_cmd ("apply", class_run, thread_apply_command,
		      _("Apply a command to a list of threads."),
		      &thread_apply_list, "thread apply ", 1, &thread_cmd_list);
  set_cmd_no_selected_thread_ok (c);

  c = add_cmd ("all", class_run, thread_apply_all_command,
	       _("Apply a command to all threads."), &thread_apply_list);
  set_cmd_no_selected_thread_ok (c);
@


1.103
log
@	* target.h (target_tid_to_str): Delete.
	* thread.c (print_thread_info, thread_apply_all_command)
	(thread_apply_command, thread_command, do_captured_thread_select):
	Use target_pid_to_str instead of target_tid_to_str.
	* linux-fork.c (delete_fork_command): Likewise.
@
text
@d512 2
a513 2
      if (any_started && !suppress_resume_observer)
	observer_notify_target_resumed (ptid);      
d524 1
a524 1
      if (started && !suppress_resume_observer)
@


1.102
log
@	PR 8145.
	* thread.c (do_captured_list_thread_ids): Report the current
	thread id.
@
text
@d749 1
a749 1
      ui_out_field_string (uiout, "target-id", target_tid_to_str (tp->ptid));
d999 1
a999 1
			 tp->num, target_tid_to_str (inferior_ptid));
d1069 1
a1069 1
			       target_tid_to_str (inferior_ptid));
d1094 1
a1094 1
			     target_tid_to_str (inferior_ptid));
d1098 1
a1098 1
			     target_tid_to_str (inferior_ptid));
d1142 1
a1142 1
  ui_out_text (uiout, target_tid_to_str (inferior_ptid));
@


1.101
log
@	PR gdb/9747:
	* gdbthread.h (finish_thread_state, finish_thread_state_cleanup):
	Declare.
	* thread.c (finish_thread_state, finish_thread_state_cleanup): New.
	* infrun.c (wait_for_inferior, fetch_inferior_event): If an error
	is thrown while handling an event, finish the thread state.
	(normal_stop): Use finish_thread_state cleanup.
	* infcmd.c (run_command_1): If an error is thrown while starting
	the inferior, finish the thread state.
@
text
@d413 1
d424 4
d433 3
@


1.100
log
@(thread_command): Move call to annotate_thread_changed
to...
(do_captured_thread_select): ... here, to avoid printing an
annotation if the thread change generates an exception.
@
text
@d635 49
@


1.99
log
@        Updated copyright notices for most files.
@
text
@a1047 1
  annotate_thread_changed ();
d1080 2
@


1.98
log
@	Implement -list-thread-groups.

        * thread.c (print_thread_info): New parameter pid, to print
        threads of specific process.
        * gdbthread.h (print_thread_info): New parameter pid.
        * mi/mi-cmds.c (mi_cmds): Register -list-thread-groups.
        * mi/mi-cmds.h (mi_cmd_list_thread_groups): New.
        * mi/mi-main.c (mi_cmd_thread_info): Adjust.
        (print_one_process, mi_cmd_list_thread_groups): New.
@
text
@d4 2
a5 1
   2000, 2001, 2002, 2003, 2004, 2007, 2008 Free Software Foundation, Inc.
@


1.97
log
@	* thread.c (print_thread_info): Eliminate now useless checks
	for exited threads.
@
text
@d639 6
a644 1
   printed.  */
d646 1
a646 1
print_thread_info (struct ui_out *uiout, int requested_thread)
d669 7
d730 1
a730 1
  if (requested_thread == -1)
d755 1
a755 1
  print_thread_info (uiout, -1);
@


1.96
log
@gdb/
2008-10-23  Pedro Alves  <pedro@@codesourcery.com>

	* defs.h: Mention ptid_is_pid.
	* inferior.h (ptid_is_pid): Declare.
	* gdbthread.h (struct thread_info) <stop_requested>: New field.
	(set_stop_requested): Declare.
	* infcmd.c (interrupt_target_1): Call set_stop_requested.
	* infrun.c (clear_proceed_status): Clear stop_requested.
	(infrun_thread_stop_requested_callback,
	infrun_thread_stop_requested): New.
	(handle_inferior_event): If a TARGET_SIGNAL_TRAP is reported on a
	thread that had an explicit stop request, pretend we got a
	TARGET_SIGNAL_0.  Always stop if the thread had an explicit stop
	request.
	(print_stop_reason): In the SIGNAL_RECEIVED case, if we're not
	outputting to MI, and we got a TARGET_SIGNAL_0, print "# Stopped",
	instead of mentioning signal 0.
	(ptid_is_pid): New.
	* thread.c (set_stop_requested): New.

	* linux-nat.c (queued_waitpid): Rename to ...
	(queued_waitpid_1): ... this.  Add `peek' argument.  Handle it.
	(queued_waitpid): New, as wrapper to queued_waitpid_1.
	(push_waitpid): Push the SIGTRAP to the local event queue, to the
	kernel's.
	(send_sigint_callback): Delete.
	(linux_nat_stop_lwp): New.
	(linux_nat_stop): Use it.

gdb/doc/
2008-10-23  Pedro Alves  <pedro@@codesourcery.com>

	* observer.texi (thread_stop_requested): New.

gdb/testsuite/
2008-10-23  Pedro Alves  <pedro@@codesourcery.com>

	* lib/mi-support.exp (mi_expect_interrupt): Expect signal 0
	instead of SIGINT.
@
text
@d681 2
a682 1
      if (tp->state_ != THREAD_EXITED)
d684 3
a686 8
	  extra_info = target_extra_thread_info (tp);
	  if (extra_info)
	    {
	      ui_out_text (uiout, " (");
	      ui_out_field_string (uiout, "details", extra_info);
	      ui_out_text (uiout, ")");
	    }
	  ui_out_text (uiout, "  ");
d688 1
d706 1
a706 3
	  if (tp->state_ == THREAD_EXITED)
	    state = "exited";
	  else if (tp->state_ == THREAD_RUNNING)
@


1.95
log
@	Implement remote multi-process extensions.

	* remote.c (struct remote_state): Add extended and
	multi_process_aware fields.
	(remote_multi_process_p): New.
	(PACKET_vKill): New.
	(record_currthread): Use thread_change_ptid.  Notice new
	inferiors.
	(set_thread, remote_thread_alive): Use write_ptid.
	(write_ptid, read_ptid): New.
	(remote_current_thread, remote_threads_extra_info): Use them.
	(remote_threads_info): Likewise.  Detect new inferiors.
	(remote_start_remote): Add inferior to inferior list.
	(remote_multi_process_feature): New.
	(remote_protocol_features): Add "multiprocess" feature.
	(remote_query_supported): Pass "multiprocess+" as supported
	features.
	(remote_open_1): Clear multi_process_aware.  Set extended
	accordingly.
	(remote_detach_1): Detach current process.  Use extended packet
	format for extended-remote multi-process.  Detach process from the
	inferior list.  Only mourn after printing output.
	(extended_remote_attach_1): Add process to the inferior list.
	(remote_vcont_resume): Use write_ptid to pass the thread ids.
	(remote_wait): Use read_ptid.  Implement the extended
	multi-process extension format of the 'W' and 'X' reply packets.
	Remove exited inferiors from inferior list.
	(remote_xfer_memory): Set general thread.
	(remote_vkill): New.
	(extended_remote_kill): New.
	(remote_mourn_1): Discard all inferiors.
	(select_new_thread_callback): New.
	(extended_remote_mourn_1): If there are more processes to debug,
	switch to a thread in another process, and don't pop the target.
	(extended_remote_create_inferior_1): Add the new process to the
	inferior list.
	(remote_stopped_by_watchpoint): Indenting.
	(remote_xfer_partial): Set the general thread.
	(remote_pid_to_str): If the remote is multi-process aware, print
	the process id as well as the thread id.
	(remote_get_thread_local_address): Use write_ptid.
	(init_extended_remote_ops): Register extended_remote_kill.
	(_initialize_remote): Register new packets.  Change
	magic_null_ptid's, not_sent_ptid's and any_thread_ptid's pid
	member to 42000.

	* thread.c (thread_change_ptid): Also account for the inferior pid
	changing.

	* inferior.h (discard_all_inferiors): Declare.
	* inferior.c (discard_all_inferiors): New.
@
text
@d609 25
@


1.94
log
@	* inferior.h (context_switch_to): Delete.
	* infrun.c (context_switch): Don't save and load infrun state.
	(context_switch_to): Delete.

	* infcmd.c (proceed_thread_callback): Replace context_switch_to
	calls by switch_to_thread calls.

	* gdbthread.h (save_infrun_state, load_infrun_state): Delete.
	* thread.c (main_thread_state, main_thread_executing): Delete.
	(inferior_thread): Delete references to them.
	(add_thread_silent): Fix case where we're adding a thread with the
	same ptid as an exited thread.  Remove references to
	context-switching.
	(load_infrun_state, save_infrun_state): Delete.
	(thread_alive, is_thread_state, any_running, is_executing)
	(set_executing): Remove the special handling for targets that
	don't register any thread.
	(restore_current_thread, thread_apply_all_command)
	(do_captured_thread_select): Unconditionally call
	switch_to_thread.

	* mi/mi-main.c (mi_cmd_execute): Check for exited threads.
	Call switch_to_thread instead of context_switch_to.
@
text
@d469 10
a478 1
  struct thread_info * tp = find_thread_pid (old_ptid);
@


1.93
log
@	Remove global continuations in favour of a per-thread
	continuations.

	* gdbthread.h (struct thread_info): Add comments around
	continuations and intermediate_continuations.
	(save_infrun_state, load_infrun_state): Delete continuations and
	intermediate_continuations arguments.
	* infrun.c (fetch_inferior_event): Only call normal_stop if
	stop_soon is NO_STOP_QUIETLY.
	(context_switch): Don't context-switch the continuations.
	* thread.c (clear_thread_inferior_resources): Discard all
	continuations of the thread we're clearing.
	(save_infrun_state, load_infrun_state): Delete continuations and
	intermediate_continuations arguments, and the code referencing
	them.
	* utils.c: Include "gdbthread.h".
	(cmd_continuation, intermediate_continuation): Delete.
	(add_continuation): Add thread_info* argument.  Install the
	continuation on it.
	(restore_thread_cleanup): New.
	(do_all_continuations_ptid, do_all_continuations_thread_callback):
	New.
	(do_all_continuations): Reimplement.
	(discard_all_continuations_thread_callback,
	discard_all_continuations_thread): New.
	(discard_all_continuations): Reimplement.
	(add_intermediate_continuation): Add thread_info* argument.
	Install the continuation on it.
	(do_all_intermediate_continuations_thread_callback)
	(do_all_intermediate_continuations_thread): New.
	(do_all_intermediate_continuations): Reimplement.
	(discard_all_intermediate_continuations_thread_callback): New.
	(discard_all_intermediate_continuations_thread): New.
	(discard_all_intermediate_continuations): Reimplement.

	* breakpoint.c (until_break_command): Install the continuation on
	the current thread.

	* defs.h (cmd_continuation, intermediate_continuation): Delete.
	(struct thread_info): Forward declare.
	(add_continuation, add_intermediate_continuation): Add
	thread_info* argument.
	(do_all_continuations_thread, discard_all_continuations_thread)
	(do_all_intermediate_continuations_thread)
	(discard_all_intermediate_continuations_thread): Declare.
	* inf-loop.c (inferior_event_handler): In non-stop only run
	continuations on the thread that stopped.  In all-stop, run
	continuations on all threads.
	* infcmd.c (step_once, finish_command): Adjust.
@
text
@a73 3
static enum thread_state main_thread_state = THREAD_STOPPED;
static int main_thread_executing = 0;

a129 2
  main_thread_state = THREAD_STOPPED;
  main_thread_executing = 0;
d156 5
a160 6
	 thread, then we need to also get rid of the current infrun
	 context, and take care that delete_thread doesn't really
	 delete the thread if it is inferior_ptid.  Create a new
	 template thread in the list with an invalid ptid, context
	 switch to it, delete the original thread, reset the new
	 thread's ptid, and switch to it.  */
d170 4
a173 1
	  context_switch_to (minus_one_ptid);
d178 1
a178 2
	  /* Since the context is already set to this new thread,
	     reset its ptid, and reswitch inferior_ptid to it.  */
d180 1
a441 28
/* Load infrun state for the thread PID.  */

void
load_infrun_state (ptid_t ptid)
{
  struct thread_info *tp;

  /* If we can't find the thread, then we're debugging a single threaded
     process.  No need to do anything in that case.  */
  tp = find_thread_id (pid_to_thread_id (ptid));
  if (tp == NULL)
    return;
}

/* Save infrun state for the thread PID.  */

void
save_infrun_state (ptid_t ptid)
{
  struct thread_info *tp;

  /* If we can't find the thread, then we're debugging a single-threaded
     process.  Nothing to do in that case.  */
  tp = find_thread_id (pid_to_thread_id (ptid));
  if (tp == NULL)
    return;
}

a479 18
  if (!thread_list)
    {
      /* This is one of the targets that does not add main
	 thread to the thread list.  Just use a single
	 global flag to indicate that a thread is running.  

	 This problem is unique to ST programs.  For MT programs,
	 the main thread is always present in the thread list.  If it's
	 not, the first call to context_switch will mess up GDB internal
	 state.  */
      if (running
 	  && main_thread_state != THREAD_RUNNING
 	  && !suppress_resume_observer)
	observer_notify_target_resumed (ptid);
      main_thread_state = running ? THREAD_RUNNING : THREAD_STOPPED;
      return;
    }

a518 3
  if (!thread_list)
    return main_thread_state == state;

a561 3
  if (!thread_list)
    return main_thread_state == THREAD_RUNNING;

a576 3
  if (!thread_list)
    return main_thread_executing;

a586 9
  if (!thread_list)
    {
      /* This target does not add the main thread to the thread list.
	 Use a global flag to indicate that the thread is
	 executing.  */
      main_thread_executing = executing;
      return;
    }

d741 1
a741 7
  if (!ptid_equal (ptid, inferior_ptid))
    {
      if (non_stop)
	context_switch_to (ptid);
      else
	switch_to_thread (ptid);
    }
d897 1
a897 4
	if (non_stop)
	  context_switch_to (tp->ptid);
	else
	  switch_to_thread (tp->ptid);
d967 1
a967 4
	      if (non_stop)
		context_switch_to (tp->ptid);
	      else
		switch_to_thread (tp->ptid);
d1037 1
a1037 4
  if (non_stop)
    context_switch_to (tp->ptid);
  else
    switch_to_thread (tp->ptid);
@


1.92
log
@	Remove the global stop_step in favour of a per-thread
	stop_step.

	* inferior.h (stop_step): Delete.

	* gdbthread.h (struct thread_info): Add comments to stop_step.
	(save_infrun_state, load_infrun_state): Remove stop_step argument.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	stop_step argument, and references to it.

	* infrun.c (clear_proceed_status): Clear stop_step.
	(fetch_inferior_event): Adjust.
	(context_switch): Don't context-switch stop_step.
	(handle_inferior_event): Adjust.
	(normal_stop): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* infcmd.c (stop_step): Delete.
	(step_1, step_1_continuation, step_once, until_next_command):
	Adjust.
@
text
@d109 3
d448 1
a448 3
load_infrun_state (ptid_t ptid,
		   struct continuation **continuations,
		   struct continuation **intermediate_continuations)
a456 10

  /* In all-stop mode, these are global state, while in non-stop mode,
     they are per thread.  */
  if (non_stop)
    {
      *continuations = tp->continuations;
      tp->continuations = NULL;
      *intermediate_continuations = tp->intermediate_continuations;
      tp->intermediate_continuations = NULL;
    }
d462 1
a462 3
save_infrun_state (ptid_t ptid,
		   struct continuation *continuations,
		   struct continuation *intermediate_continuations)
a470 8

  /* In all-stop mode, these are global state, while in non-stop mode,
     they are per thread.  */
  if (non_stop)
    {
      tp->continuations = continuations;
      tp->intermediate_continuations = intermediate_continuations;
    }
@


1.91
log
@	Remove the global step_multi in favour of a per-thread
	step_multi.

	* inferior.h (step_multi): Delete.
	* gdbthread.h (struct thread_info): Add comments around
	step_multi.
	(save_infrun_state, load_infrun_state): Remove step_multi
	parameter.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	step_multi argument, and references to it.
	* infcmd.c (step_multi): Delete.
	(step_1): Adjust.
	(step_1_continuation, until_next_command): Adjust.
	* infrun.c (fetch_inferior_event): Adjust.
	(context_switch): Don't context-switch step_multi.
	(print_stop_reason, normal_stop): Adjust.
@
text
@d447 1
a447 2
		   struct continuation **intermediate_continuations,
		   int *stop_step)
a464 1
      *stop_step = tp->stop_step;
d473 1
a473 2
		   struct continuation *intermediate_continuations,
		   int stop_step)
a488 1
      tp->stop_step = stop_step;
@


1.90
log
@	Remove the global stop_signal in favour of a per-thread
	stop_signal.

	* inferior.h (stop_signal): Delete.
	* gdbthread.h (save_infrun_state, load_infrun_state): Remove
	stop_signal argument.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	stop_signal argument.  Don't reference it.

	* infcmd.c (stop_signal): Delete.
	(program_info): Adjust.
	* infrun.c (resume): Clear stop_signal.
	(proceed): Adjust.  Pass the last stop_signal to the thread we're
	resuming.
	(context_switch): Don't context-switch stop_signal.
	(handle_inferior_event, keep_going): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* fbsd-nat.c: Include "gdbthread.h".
	(find_signalled_thread, find_stop_signal): New.
	(fbsd_make_corefile_notes): Use it.
	* fork-child.c (startup_inferior): Adjust.

	* linux-nat.c (get_pending_status): Adjust.
	(linux_nat_do_thread_registers): Adjust.
	(find_signalled_thread, find_stop_signal): New.
	(linux_nat_do_thread_registers): Add stop_signal parameter.
	(struct linux_nat_corefile_thread_data): Add stop_signal member.
	(linux_nat_corefile_thread_callback): Pass stop_signal.
	(linux_nat_do_registers): Delete.
	(linux_nat_make_corefile_notes): Use find_stop_signal.  Assume
	there's always a thread.

	* procfs.c (find_signalled_thread, find_stop_signal): New.
	(find_stop_signal): New.
	(procfs_do_thread_registers): Add stop_signal parameter.
	(struct procfs_corefile_thread_data): Add stop_signal member.
	(procfs_corefile_thread_callback): Pass args->stop_signal.
	(procfs_make_note_section): Find the last stop_signal.

	* solib-irix.c: Include gdbthread.h.
	(irix_solib_create_inferior_hook): Adjust.
	* solib-osf.c: Include gdbthread.h.
	(osf_solib_create_inferior_hook): Adjust.
	* solib-sunos.c: Include gdbthread.h.
	(sunos_solib_create_inferior_hook): Adjust.
	* solib-svr4.c: Include gdbthread.h.
	(svr4_solib_create_inferior_hook): Adjust.

	* win32-nat.c (do_initial_win32_stuff): Adjust.
@
text
@d448 1
a448 2
		   int *stop_step,
		   int *step_multi)
a466 1
      *step_multi = tp->step_multi;
d476 1
a476 2
		   int stop_step,
		   int step_multi)
a492 1
      tp->step_multi = step_multi;
@


1.89
log
@	* gdbthread.h (struct thread_info): Add comments around
	proceed_to_finish.
	(save_infrun_state, load_infrun_state): Remove proceed_to_finish
	argument.
	* thread.c (load_infrun_state, save_infrun_state): Delete
	proceed_to_finish argument and references to it.

	* infcall.c (call_function_by_hand): Adjust.
	* infcmd.c (finish_command): Adjust.
	* infrun.c (proceed_to_finish): Delete.
	(clear_proceed_status): Adjust.
	(context_switch): Don't context-switch proceed_to_finish.
	(normal_stop, save_inferior_status, restore_inferior_status):
	Adjust.
@
text
@d449 1
a449 2
		   int *step_multi,
		   enum target_signal *stop_signal)
a468 1
      *stop_signal = tp->stop_signal;
d479 1
a479 2
		   int step_multi,
		   enum target_signal stop_signal)
a496 1
      tp->stop_signal = stop_signal;
@


1.88
log
@	* inferior.h (stop_bpstat): Delete.

	* breakpoint.h (bpstat_do_actions): Remove bpstat* argument.

	* breakpoint.c (bpstat_do_actions): Rename to ...
	(bpstat_do_actions_1): ... this.  Make static.  Change return type
	to int.  Return true if a breakpoint proceeded.
	(bpstat_do_actions): New, as wrapper around bpstat_do_actions_1.
	(delete_breakpoint): Don't reference the global stop_bpstat; it's
	gone.

	* gdbthread.h (struct thread_info): Add stop_bpstat.
	(save_infrun_state, load_infrun_state): Remove stop_bpstat
	argument.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	stop_bpstat argument, and the code referencing it.

	* infcall.c: Include "gdbthread.h".
	(call_function_by_hand): Adjust.
	* exceptions.c: Include "gdbthread.h".
	(throw_exception): Adjust.
	* infcmd.c (stop_bpstat): Delete.
	(continue_command): In all-stop, set the ignore count on the
	thread that reported the stop.  In non-stop, set it on the current
	thread.
	(finish_command_continuation): Adjust.
	(program_info): Adjust.
	* infrun.c (clear_proceed_status): Adjust.
	(context_switch): Don't context-switch stop_bpstat.
	(handle_inferior_event): Adjust.
	(normal_stop): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* inf-loop.c (inferior_event_handler): Remove parameter to
	bpstat_do_actions call.
	* top.c (command_loop): Remove parameter to bpstat_do_actions
	call.  Call it unconditionally.
	* event-top.c (command_handler): Ditto.
	* python/python.c (execute_gdb_command): Ditto.
@
text
@a447 1
		   int *proceed_to_finish,
a467 1
      *proceed_to_finish = tp->proceed_to_finish;
a479 1
		   int proceed_to_finish,
a497 1
      tp->proceed_to_finish = proceed_to_finish;
@


1.87
log
@	* inferior.h (step_over_calls): Delete.

	* gdbthread.h (save_infrun_state, load_infrun_state): Remove
	step_over_calls argument.
	* thread.c (save_infrun_state, load_infrun_state): Remove
	step_over_calls argument.  Adjust.

	* infcmd.c (step_over_calls): Delete.
	(step_1): Adjust.
	* infrun.c (clear_proceed_status): Adjust.
	(context_switch): Don't context-switch step_over_calls.
	(handle_inferior_event, save_inferior_status)
	(restore_inferior_status): Adjust.
@
text
@d451 1
a451 2
		   enum target_signal *stop_signal,
		   bpstat *stop_bpstat)
a472 5

      /* Swap instead of copy, so we only have to update one of
	 them.  */
      *stop_bpstat = tp->stop_bpstat;
      tp->stop_bpstat = 0;
d485 1
a485 2
		   enum target_signal stop_signal,
		   bpstat stop_bpstat)
a504 1
      tp->stop_bpstat = stop_bpstat;
@


1.86
log
@	Remove context switching in favour of accessing thread_info fields
	directly.

	* infrun.c (stepping_over_breakpoint, step_resume_breakpoint):
	Delete.
	(struct thread_stepping_state): Delete.
	(gtss, tss): Delete.
	(follow_inferior_reset_breakpoints, follow_exec)
	(resume, clear_proceed_status): Adjust.
	(prev_pc): Delete.
	(proceed, start_remote, init_wait_for_inferior): Adjust.
	(struct execution_control_state): Add event_thread member.
	(delete_step_resume_breakpoint_callback)
	(delete_step_thread_step_resume_breakpoint)
	(delete_step_thread_step_resume_breakpoint_cleanup)
	(delete_step_thread_step_resume_breakpoint): New.
	(wait_for_inferior, init_execution_control_state): Use
	delete_step_thread_step_resume_breakpoint_cleanup.
	(wait_for_inferior): Set the event_thread.
	(fetch_inferior_event): Ditto.  Delete the step-resume breakpoint
	with delete_step_thread_step_resume_breakpoint.
	(init_thread_stepping_state): Change parameter type to
	thread_info.  Adjust.
	(context_switch): Don't context switch prev_pc,
	stepping_over_breakpoint, step_resume_breakpoint,
	step_range_start, step_range_end, step_frame_id,
	tss->stepping_over_breakpoint,
	tss->stepping_through_solib_after_catch,
	tss->stepping_through_solib_catchpoints, tss->current_line, or
	tss->current_symtab.
	(adjust_pc_after_break, handle_inferior_event)
	(currently_stepping, step_into_function)
	(insert_step_resume_breakpoint_at_sal)
	(insert_longjmp_resume_breakpoint, keep_going): Adjust.
	(clear_stepping_state): New.
	(normal_stop): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* gdbthread.h (struct thread_info): Comments describing the
	members moved here.  Add step_after_step_resume_breakpoint.
	(delete_step_resume_breakpoint): Add thread_info argument.
	(save_infrun_state, load_infrun_state): Remove prev_pc,
	trap_expected, step_resume_breakpoint, step_range_start,
	step_range_end, step_frame_id, another_trap,
	stepping_through_solib_after_catch,
	stepping_through_solib_catchpoints, current_line and
	current_symtab function arguments.
	(inferior_thread): Declare.

	* thread.c (inferior_thread): New.
	(delete_step_resume_breakpoint): Add a thread_info parameter and
	rewrite.
	(load_infrun_state, save_infrun_state): Remove prev_pc,
	trap_expected, step_resume_breakpoint, step_range_start,
	step_range_end, step_frame_id, stepping_over_breakpoint,
	stepping_through_solib_after_catch,
	stepping_through_solib_catchpoints, current_line and
	current_symtab args.  Remove code referencing them.

	* infcmd.c (step_range_start, step_range_end, step_frame_id):
	Delete.
	(step_1, step_once, until_next_command): Adjust.

	* inferior.h (step_range_start, step_range_end, step_frame_id):
	Delete.

	* linux-nat.c (linux_child_follow_fork): If following the child,
	move the step state to it.  Adjust.
	* inf-ptrace.c (inf_ptrace_follow_fork): Ditto.
	* inf-ttrace.c (inf_ttrace_follow_fork): Ditto.
@
text
@a448 1
		   enum step_over_calls_kind *step_over_calls,
a470 1
      *step_over_calls = tp->step_over_calls;
a488 1
		   enum step_over_calls_kind step_over_calls,
a508 1
      tp->step_over_calls = step_over_calls;
@


1.85
log
@2008-08-18  Pedro Alves  <pedro@@codesourcery.com>

	gdb/doc/
	* observer.texi (thread_ptid_changed): New.

	gdb/
	* gdbthread.h (thread_change_ptid): Declare.
	* infrun.c (infrun_thread_ptid_changed): New.
	(_initialize_infrun): Attach infrun_thread_ptid_changed to the
	thread_ptid_changed observer.
	* regcache.c (regcache_thread_ptid_changed): New.
	(_initialize_regcache): Attach regcache_thread_ptid_changed to the
	thread_ptid_changed observer.
	* thread.c (thread_change_ptid): New.
@
text
@d77 8
d86 1
a86 1
delete_step_resume_breakpoint (void *arg)
d88 1
a88 4
  struct breakpoint **breakpointp = (struct breakpoint **) arg;
  struct thread_info *tp;

  if (*breakpointp != NULL)
d90 2
a91 6
      delete_breakpoint (*breakpointp);
      for (tp = thread_list; tp; tp = tp->next)
	if (tp->step_resume_breakpoint == *breakpointp)
	  tp->step_resume_breakpoint = NULL;

      *breakpointp = NULL;
a445 11
		   CORE_ADDR *prev_pc,
		   int *trap_expected,
		   struct breakpoint **step_resume_breakpoint,
		   CORE_ADDR *step_range_start,
		   CORE_ADDR *step_range_end,
		   struct frame_id *step_frame_id,
		   int *stepping_over_breakpoint,
		   int *stepping_through_solib_after_catch,
		   bpstat *stepping_through_solib_catchpoints,
		   int *current_line,
		   struct symtab **current_symtab,
a462 14
  *prev_pc = tp->prev_pc;
  *trap_expected = tp->trap_expected;
  *step_resume_breakpoint = tp->step_resume_breakpoint;
  *step_range_start = tp->step_range_start;
  *step_range_end = tp->step_range_end;
  *step_frame_id = tp->step_frame_id;
  *stepping_over_breakpoint = tp->stepping_over_breakpoint;
  *stepping_through_solib_after_catch =
    tp->stepping_through_solib_after_catch;
  *stepping_through_solib_catchpoints =
    tp->stepping_through_solib_catchpoints;
  *current_line = tp->current_line;
  *current_symtab = tp->current_symtab;

a487 11
		   CORE_ADDR prev_pc,
		   int trap_expected,
		   struct breakpoint *step_resume_breakpoint,
		   CORE_ADDR step_range_start,
		   CORE_ADDR step_range_end,
		   const struct frame_id *step_frame_id,
		   int stepping_over_breakpoint,
		   int stepping_through_solib_after_catch,
		   bpstat stepping_through_solib_catchpoints,
		   int current_line,
		   struct symtab *current_symtab,
a504 12
  tp->prev_pc = prev_pc;
  tp->trap_expected = trap_expected;
  tp->step_resume_breakpoint = step_resume_breakpoint;
  tp->step_range_start = step_range_start;
  tp->step_range_end = step_range_end;
  tp->step_frame_id = (*step_frame_id);
  tp->stepping_over_breakpoint = stepping_over_breakpoint;
  tp->stepping_through_solib_after_catch = stepping_through_solib_after_catch;
  tp->stepping_through_solib_catchpoints = stepping_through_solib_catchpoints;
  tp->current_line = current_line;
  tp->current_symtab = current_symtab;

@


1.84
log
@	Kill cmd_async_ok.
        * cli/cli-decode.h (CMD_ASYNC_OK, set_cmd_async_ok)
        (get_cmd_async_ok): Remove.
        * cli/cli-decode.c (set_cmd_async_ok, get_cmd_async_ok): Remove.
        * cli/cli-cmds.c (init_cli_cmds): Don't use set_cmd_async_ok.
        * infcmd.c (_initialize_infcmd): Likewise.
        * thread.c (_initialize_thread): Likewise.
@
text
@d592 9
@


1.83
log
@	* thread.c (restore_selected_frame): On fail to restore, select
	the innermost frame, and don't crash when warning the user.
@
text
@a1245 1
  set_cmd_async_ok (c);
a1251 1
  set_cmd_async_ok (c);
a1256 1
  set_cmd_async_ok (c);
a1260 1
  set_cmd_async_ok (c);
@


1.82
log
@	Implement --thread and --frame.
	* gdbthread.h (find_thread_id): Declare.
        * thread.c (find_thread_id): Make non-static.
        * mi/mi-main.c (mi_cmd_execute): Switch to the right
        thread and frame, if necessary.
        * mi/mi-parse.c (mi_parse): Handle --thread and --frame.
        * mi/mi-parse.h (strcut mi_parse): New fields thread and frame.
@
text
@d941 5
a945 2
  /* Nothing else to do, the frame layout really changed.
     Tell the user.  */
d954 1
a954 1
      print_stack_frame (frame, 1, SRC_LINE);
@


1.81
log
@	Report thread state in -thread-info output.
        * thread.c (print_thread_info): Add new field "state".
@
text
@a56 2
static struct thread_info *find_thread_id (int num);

d290 1
a290 1
static struct thread_info *
@


1.80
log
@	* thread.c (thread_apply_command): Move making the cleanup out of
	the loop.
@
text
@d826 10
@


1.79
log
@	Exited threads.

	* thread.c (enum thread_state): New.
	(thread_state main_thread_running): Delete, in favor of...
	(thread_state main_thread_state): ... this.  Update throughout.
	(clear_thread_inferior_resources): New, split from free_thread.
	(free_thread): Call clear_thread_inferior_resources.
	(init_thread_list): Set main thread to stopped state.
	(add_thread_silent): Take care of PTID reuses.
	(delete_thread): If deleting inferior_ptid or a thread with
	refcount > 0, mark it as exited, but still keep it in the list.
	Only notify of thread exits, if we haven't done so yet.
	(iterate_over_threads): Make it safe to delete threads while
	iterating over them.
	(do_captured_list_thread_ids): Don't account for exited threads.
	(thread_alive): Check for the THREAD_EXITED state, and don't set
	ptid to -1 on exited threads.
	(set_running): Update to account for extra possible states.
	(is_thread_state): New.
	(is_stopped, is_exited): New.
	(is_running): Implement in terms of is_thread_state.
	(any_running): Update.
	(print_thread_info): Update.  Account for exited threads.  Don't
	warn about missed frame restoring here, its done in the cleanup.
	(switch_to_thread): Don't read from a thread that has gone.
	(restore_current_thread): In non-stop mode, do a full context
	switch.
	(restore_selected_frame): Add a frame_level argument.  Rewrite.
	(struct current_thread_cleanup): Add selected_frame_level and
	was_stopped members.
	(do_restore_current_thread_cleanup): Check if thread was stopped
	and still is, and if the target has registers, stack and memory
	before restoring the selected frame.  Don't delete the cleanup
	argument here.
	(restore_current_thread_cleanup_dtor): New.
	(make_cleanup_restore_current_thread): Remove all arguments.
	Rewrite.
	(thread_apply_all_command): Update.  Prune threads.
	(thread_apply_command): Update.
	(thread_command): Account for currently selected exited thread.
	(do_captured_thread_select): Check for a running thread.  Prune
	threads.
	(_initialize_thread): Make "info threads", "thread", "thread
	apply", and "thread apply all" appliable without a selected thread.
	* gdbthread.h (struct thread_info): Replace running_ by state_.
	Add refcount.
	(is_exited, is_stopped): Declare.
	(make_cleanup_restore_current_thread): Remove all arguments.
	* infrun.c: Include "event-top.h".
	(fetch_inferior_event): In non-stop mode, restore selected thread
	and frame after handling the event and running breakpoint
	commands.  Display GDB prompt if needed.
	(normal_stop): In non-stop mode, don't print thread switching
	notice.
	* cli/cli-decode.c (set_cmd_no_selected_thread_ok)
	(get_cmd_no_selected_thread_ok): New.
	* cli/cli-decode.h (CMD_NO_SELECTED_THREAD_OK): New.
	(set_cmd_no_selected_thread_ok, get_cmd_no_selected_thread_ok):
	Declare.
	* cli/cli-cmds.c: Set "pwd", "help", "info", "show" as
	no-selected-thread ok.
	* top.c (execute_command): Check for non no-selected-thread-ok
	commands.
	* linux-nat.c (struct saved_ptids, threads_to_delete)
	(record_dead_thread, prune_lwps): Delete.
	(exit_lwp): Unconditionally delete thread.
	(linux_nat_resume): Remove prune_lwps call.
	* infcmd.c (proceed_thread_callback): Check if !is_stopped instead
	of is_running.  Adjust to make_cleanup_restore_current_thread
	interface change.
	* mi/mi-main.c (mi_cmd_execute): Only allow a few commands if the
	selected thread has exited.
	* inf-loop.c (inferior_event_handler): Don't display the prompt
	here.
	* varobj.c (c_value_of_root): Update.
	* defs.h (make_cleanup_dtor): Declare.
	* utils.c (make_cleanup_dtor): New.

	* Makefile.in (infrun.o): Depend on $(event_top_h).
@
text
@d1105 2
a1116 2
	      make_cleanup_restore_current_thread ();

@


1.78
log
@	Non-stop inferior control.

	* infrun.c (resume): In non-stop mode, always resume just one
	thread.
	(proceed): Don't call prepare_to_proceed in non-stop mode.
	(fetch_inferior_event): In non-stop mode, switch context before
	handling the event.
	(error_is_running, ensure_not_running): New.
	(handle_inferior_event): In non-stop mode: Mark only the event
	thread as stopped.  Require that the target module manages adding
	threads to the thread list.  Assert that there isn't a
	deferred_step_ptid set.  Don't switch to infwait_thread_hop_state.
	(normal_stop): Only mark not-running if inferior hasn't exited.
	In non-stop mode, only mark the event thread.

	* thread.c:Include "cli/cli-decode.h".
	(print_thread_info): Don't read from a running thread.
	Output "(running)" if thread is running.
	(switch_to_thread): Don't read stop_pc if thread is executing.
	(do_restore_current_thread_cleanup): Don't write to a running
	thread.
	(thread_apply_all_command): Don't read from a running thread.  In
	non-stop mode, do a full context-switch instead of just switching
	threads.
	(thread_apply_command): In non-stop mode, do a full context-switch
	instead of just switching threads.
	(do_captured_thread_select): Likewise.  Inform user if selected
	thread is running.
	(_initialize_thread): Mark "info threads" and "thread" and
	async_ok.

	* inf-loop.c (inferior_event_handler): In non-stop mode, don't
	unregister the target from the event loop.

	* infcmd.c (continue_command, step_1, jump_command)
	(signal_command): Ensure the selected thread isn't running.
	(interrupt_target_command): In non-stop mode, interrupt only the
	selected thread.

	* inferior.h (error_is_running, ensure_not_running): Declare.

	* target.h (struct target_ops): Add ptid argument to the to_stop
	member.
	(target_stop): Add ptid_t argument.

	* target.c (update_current_target): Add ptid argument to to_stop's
	type.
	(debug_to_stop): Add ptid_t argument.
	(debug_to_rcmd): Set to_stop_ptid.

	* remote.c (remote_stop): Add ptid_t argument.
	(async_remote_interrupt): Add inferior_ptid to target_stop.
	* inf-ptrace.c (inf_ptrace_stop): Add ptid argument.

	* Makefile.in (thread.o): Depend on $(cli_decode_h).
@
text
@a43 1

d67 10
a76 1
static int main_thread_running = 0;
d97 1
a97 1
free_thread (struct thread_info *tp)
d104 4
a107 1
    tp->step_resume_breakpoint->disposition = disp_del_at_next_stop;
d110 6
d131 1
a131 1
  main_thread_running = 0;
d151 43
d242 22
d269 2
a270 1
  if (!silent)
d276 4
d335 1
a335 1
  struct thread_info *tp;
d337 6
a342 3
  for (tp = thread_list; tp; tp = tp->next)
    if ((*callback) (tp, data))
      return tp;
d421 2
d573 1
a573 1
  if (PIDGET (tp->ptid) == -1)
d576 1
a576 4
    {
      tp->ptid = pid_to_ptid (-1);	/* Mark it as dead */
      return 0;
    }
d608 3
a610 1
      if (running && !main_thread_running && !suppress_resume_observer)
d612 1
a612 1
      main_thread_running = running;
d624 5
a628 3
	  if (running && !tp->running_)
	    any_started = 1;
	  tp->running_ = running;
d635 1
d638 7
a644 4
      if (running && !tp->running_ && !suppress_resume_observer)
	observer_notify_target_resumed (ptid);
      tp->running_ = running;
    }  
d647 2
a648 2
int
is_running (ptid_t ptid)
d656 1
a656 1
    return main_thread_running;
d660 31
a690 1
  return tp->running_;  
d702 1
a702 1
    return main_thread_running;
d705 1
a705 1
    if (tp->running_)
d757 1
a757 1
   If REQESTED_THREAD is not -1, it's the GDB id of the thread
a764 1
  struct frame_info *cur_frame;
a765 1
  struct frame_id saved_frame_id;
a768 9
  /* Backup current thread and selected frame.  */
  if (!is_running (inferior_ptid))
    saved_frame_id = get_frame_id (get_selected_frame (NULL));
  else
    saved_frame_id = null_frame_id;

  old_chain = make_cleanup_restore_current_thread (inferior_ptid, saved_frame_id);
  make_cleanup_ui_out_list_begin_end (uiout, "threads");

d772 5
d784 6
d793 1
a793 4
	{
	  current_thread = tp->num;
	  ui_out_text (uiout, "* ");
	}
d801 1
a801 2
      extra_info = target_extra_thread_info (tp);
      if (extra_info)
d803 8
a810 3
	  ui_out_text (uiout, " (");
	  ui_out_field_string (uiout, "details", extra_info);
	  ui_out_text (uiout, ")");
d812 2
a813 2
      ui_out_text (uiout, "  ");
      if (tp->running_)
d835 2
a836 1
      gdb_assert (current_thread != -1 || !thread_list);
a838 1
    }
d840 4
a843 13
  if (is_running (inferior_ptid))
    return;

  /*  If case we were not able to find the original frame, print the
      new selected frame.  */
  if (frame_find_by_id (saved_frame_id) == NULL)
    {
      warning (_("Couldn't restore frame in current thread, at frame 0"));
      /* For MI, we should probably have a notification about
	 current frame change.  But this error is not very likely, so
	 don't bother for now.  */
      if (!ui_out_is_mi_like_p (uiout))
	print_stack_frame (get_selected_frame (NULL), 0, LOCATION);
d873 4
a876 1
  if (!is_executing (ptid))
d887 4
a890 1
      switch_to_thread (ptid);
d895 1
a895 1
restore_selected_frame (struct frame_id a_frame_id)
d897 2
a898 1
  struct frame_info *selected_frame_info = NULL;
d900 1
a900 2
  if (frame_id_eq (a_frame_id, null_frame_id))
    return;        
d902 17
a918 1
  if ((selected_frame_info = frame_find_by_id (a_frame_id)) != NULL)
d920 24
a943 1
      select_frame (selected_frame_info);
d951 2
d958 1
d962 19
a980 5
  /* A command like 'thread apply all $exec_command&' may change the
     running state of the originally selected thread, so we have to
     recheck it here.  */
  if (!is_running (old->inferior_ptid))
    restore_selected_frame (old->selected_frame_id);
d985 1
a985 2
make_cleanup_restore_current_thread (ptid_t inferior_ptid, 
                                     struct frame_id a_frame_id)
d987 5
a991 2
  struct current_thread_cleanup *old
    = xmalloc (sizeof (struct current_thread_cleanup));
d993 18
a1010 2
  old->selected_frame_id = a_frame_id;
  return make_cleanup (do_restore_current_thread_cleanup, old);
d1026 1
a1026 1
  struct cleanup *old_chain = make_cleanup (null_cleanup, 0);
a1027 3
  struct frame_id saved_frame_id;
  ptid_t current_ptid;
  int thread_has_changed = 0;
a1030 2
  
  current_ptid = inferior_ptid;
d1032 2
a1033 5
  if (!is_running (inferior_ptid))
    saved_frame_id = get_frame_id (get_selected_frame (NULL));
  else
    saved_frame_id = null_frame_id;
  make_cleanup_restore_current_thread (inferior_ptid, saved_frame_id);
d1035 1
a1035 3
  /* It is safe to update the thread list now, before
     traversing it for "thread apply all".  MVS */
  target_find_new_threads ();
a1054 3
  if (!ptid_equal (current_ptid, inferior_ptid))
    thread_has_changed = 1;

a1055 3
  /* Print stack frame only if we changed thread.  */
  if (thread_has_changed && !is_running (inferior_ptid))
    print_stack_frame (get_current_frame (), 1, SRC_LINE);
a1063 1
  struct cleanup *saved_cmd_cleanup_chain;
a1064 3
  struct frame_id saved_frame_id;
  ptid_t current_ptid;
  int thread_has_changed = 0;
a1073 8
  current_ptid = inferior_ptid;

  if (!is_running (inferior_ptid))
    saved_frame_id = get_frame_id (get_selected_frame (NULL));
  else
    saved_frame_id = null_frame_id;
  old_chain = make_cleanup_restore_current_thread (inferior_ptid, saved_frame_id);

d1077 1
a1077 1
  saved_cmd_cleanup_chain = make_cleanup (xfree, (void *) saved_cmd);
d1115 2
d1121 1
d1125 3
a1127 1
	      strcpy (cmd, saved_cmd);	/* Restore exact command used previously */
a1131 4
  if (!ptid_equal (current_ptid, inferior_ptid))
    thread_has_changed = 1;

  do_cleanups (saved_cmd_cleanup_chain);
a1132 3
  /* Print stack frame only if we changed thread.  */
  if (thread_has_changed)
    print_stack_frame (get_current_frame (), 1, SRC_LINE);
a1142 1
      /* Don't generate an error, just say which thread is current. */
d1144 10
a1153 3
	printf_filtered (_("[Current thread is %d (%s)]\n"),
			 pid_to_thread_id (inferior_ptid),
			 target_tid_to_str (inferior_ptid));
d1201 5
a1205 1
  if (!tp->running_)
d1207 4
a1210 2
  else
    ui_out_text (uiout, "(running)\n");
d1236 1
d1243 1
d1245 5
a1249 3
  add_prefix_cmd ("apply", class_run, thread_apply_command,
		  _("Apply a command to a list of threads."),
		  &thread_apply_list, "thread apply ", 1, &thread_cmd_list);
d1251 4
a1254 2
  add_cmd ("all", class_run, thread_apply_all_command,
	   _("Apply a command to all threads."), &thread_apply_list);
@


1.77
log
@	Per-thread commands.

	* gdbthread.h: Remove unneeded forward declarations.
	Include "inferior.h".
	(struct thread_info): Add continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi and stop_signal members.
	(save_infrun_state): Add continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat parameters.
	(load_infrun_state): Add continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat parameters.

	* thread.c (load_infrun_state): In non-stop mode, load
	continuations, intermediate_continuations, proceed_to_finish,
	step_over_calls, stop_step, step_multi and stop_signal.
	(save_infrun_state): Store continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat.
	(save_infrun_state): Store continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat.
	(free_thread): Clear The thread's stop_bpstat.

	* inferior.h (context_switch_to): Declare.

	* infrun.c (ecss): New global.
	(context_switch): Context switch continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat.
	(wait_for_inferior): Use global ecss.
	(async_ecss, async_ecs): Delete.
	(fetch_inferior_event): Use global ecss.
	(context_switch_to): New.

	* top.c (execute_command): In non-stop, only check if the current
	thread is running, in all-stop, check if there's any thread
	running.

	* breakpoint.c (bpstat_remove_breakpoint): New.
	(bpstat_remove_breakpoint_callback): New.
	(delete_breakpoint): Clear the stop_bpstats of all threads.

	* mi/mi-main.c (mi_cmd_execute): In non-stop, only check if the
	current thread is running, in all-stop, check if there's any
	thread running.

	* Makefile.in (gdbthread_h): Depend on $(inferior_h).
@
text
@d45 2
d645 5
a649 1
  saved_frame_id = get_frame_id (get_selected_frame (NULL));
a650 1

d685 12
a696 6
      /* That switch put us at the top of the stack (leaf frame).  */
      switch_to_thread (tp->ptid);
      print_stack_frame (get_selected_frame (NULL), 
			 /* For MI output, print frame level.  */
			 ui_out_is_mi_like_p (uiout),
			 LOCATION);
d712 3
d753 5
a757 1
  stop_pc = read_pc ();
d794 6
a799 1
  restore_selected_frame (old->selected_frame_id);
d827 1
a827 2
  struct cleanup *old_chain;
  struct cleanup *saved_cmd_cleanup_chain;
d837 6
a842 2
  saved_frame_id = get_frame_id (get_selected_frame (NULL));
  old_chain = make_cleanup_restore_current_thread (inferior_ptid, saved_frame_id);
d851 1
a851 1
  saved_cmd_cleanup_chain = make_cleanup (xfree, (void *) saved_cmd);
d855 5
a859 1
	switch_to_thread (tp->ptid);
a868 1
  do_cleanups (saved_cmd_cleanup_chain);
d871 1
a871 1
  if (thread_has_changed)
a872 1

d896 5
a900 1
  saved_frame_id = get_frame_id (get_selected_frame (NULL));
d944 4
a947 1
	      switch_to_thread (tp->ptid);
d1015 4
a1018 1
  switch_to_thread (tp->ptid);
d1026 5
a1030 1
  print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
d1050 1
d1052 3
a1054 2
  add_info ("threads", info_threads_command,
	    _("IDs of currently known threads."));
d1056 1
a1056 1
  add_prefix_cmd ("thread", class_run, thread_command, _("\
d1059 2
a1060 1
		  &thread_cmd_list, "thread ", 1, &cmdlist);
@


1.76
log
@	Add "executing" property to threads.

	* inferior.h (target_executing): Delete.
	* gdbthread.h (struct thread_info): Add executing_ field.
	(set_executing, is_executing): New.
	* thread.c (main_thread_executing): New.
	(init_thread_list): Clear it and also main_thread_running.
	(is_running): Return false if target has no execution.
	(any_running, is_executing, set_executing): New.

	* top.c: Include "gdbthread.h".
	(target_executing): Delete.
	(execute_command): Replace target_executing check by any_running.
	* event-top.c: Include "gdbthread.h".
	(display_gdb_prompt, command_handler): Replace target_executing by
	is_running.
	* inf-loop.c: Include "gdbthread.h".  Don't mark as not executing
	here.  Replace target_executing by is_running.
	* infrun.c (handle_inferior_event): Mark all threads as
	not-executing.
	* linux-nat.c (linux_nat_resume): Don't mark thread as executing
	here.
	* stack.c (get_selected_block): Return null if inferior is
	executing.
	* target.c (target_resume): Mark resumed ptid as executing.
	* breakpoint.c (until_break_command): Replace target_executing
	check by is_executing.
	* remote.c (remote_async_resume): Don't mark inferior as executing
	here.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Replace target_executing
	by any_running.

	* mi/mi-main.c (mi_cmd_exec_interrupt, mi_cmd_execute)
	(mi_execute_async_cli_command): Replace target_executing by
	is_running.

	* frame.c (get_current_frame): Error out if the current thread is
	executing.
	(has_stack_frames): New.
	(get_selected_frame, deprecated_safe_get_selected_frame): Check
	has_stack_frames.

	* Makefile.in (event-top.o, frame.o, inf-loop.o, top.o): Depend on
	$(gdbthread_h).
@
text
@d96 2
d363 9
a371 1
		   struct symtab **current_symtab)
d394 20
d430 9
a438 1
		   struct symtab *current_symtab)
d459 14
@


1.75
log
@	* monitor (monitor_ptid): New global.
	(monitor_open): Silently add the main task to GDB's thread list.
	(monitor_close, monitor_mourn_inferior): Silently delete the main
	task from GDB's thread list.
	(monitor_thread_alive, monitor_pid_to_str): New.
	(init_base_monitor_ops): Register monitor_thread_alive and
	monitor_pid_to_str.
	(_initialize_remote_monitors): Initialize monitor_ptid.

	* gdbthread.h (delete_thread_silent): Declare.
	* thread.c (delete_thread): Rename to ...
	(delete_thread_1): ... this.  Add "silent" parameter.  If silent,
	don't do exit notifications.
	(delete_thread, delete_thread_silent): New, as wrappers to
	delete_thread_1.
@
text
@d66 3
d110 3
a449 2
static int main_thread_running = 0;

d501 3
d512 61
@


1.74
log
@        * breakpoint.c (moribund_locations): New.
        (bpstat_stop_status): Process moribund locations.
        (update_global_location_list): Add removed
        locations to moribund_locations.
        (breakpoint_retire_moribund): New.
        * breakpoint.h (struct bp_location): New field
        events_till_retirement.
        (breakpoint_retire_moribund): Declare.
        * thread.c (thread_count): New.
        * infrun.c (handle_inferior_event): Call
        breakpoint_retire_moribund.
        * gdbthread.h (thread_count): Declare.
@
text
@d156 4
a159 2
void
delete_thread (ptid_t ptid)
d177 2
a178 1
  observer_notify_thread_exit (tp);
d183 12
@


1.73
log
@	Don't suppress *running when doing finish.
        * infcall.c (call_function_by_hand): Set both
        suppress_resume_observer and suppress_stop_observer.
        * infcmd.c (suppress_run_stop_observers): Split into...
        (suppress_resume_observer, suppress_stop_observer): ...those.
        (finish_command_continuation): Clear suppress_stop_observer.
        (finish_command): Set suppress_stop_observer.
        * inferior.h (suppress_run_stop_observers): Split into...
        (suppress_resume_observer, suppress_stop_observer): ...those.
        * infrun.c (normal_stop): Check for suppress_stop_observer.
        * thread.c (set_running): Check for suppress_resume_observer.
@
text
@d233 12
@


1.72
log
@	Implement *running.
        * Makefile.in: Update dependencies.
        * gdbthread.h (struct thread_info): New field
        running_.
        (set_running, is_running): New.
        * thread.c (set_running, is_running): New.
        * inferior.h (suppress_normal_stop_observer): Rename to...
        (suppress_run_stop_observers): ..this.
        * infcmd.c (suppress_normal_stop_observer): Rename to...
        (suppress_run_stop_observers): ..this.
        (finish_command_continuation, finish_command): Adjust.
        * infcall.c (call_function_by_hand): Adjust.
        * infrun.c (normal_stop): Call set_running.
        * target.c (target_resume): New.  Call set_running.
        * target.h (target_resume): Convert from macro to
        a function.

        * mi/mi-interp.c (mi_on_resume): New.
        (mi_interpreter_init): Register mi_on_resume.
@
text
@d434 1
a434 1
      if (running && !main_thread_running && !suppress_run_stop_observers)
d452 1
a452 1
      if (any_started && !suppress_run_stop_observers)
d459 1
a459 1
      if (running && !tp->running_ && !suppress_run_stop_observers)
@


1.71
log
@* annotate.c (annotate_thread_changed): New function.
* thread.c (thread_command) : Use it.
* infrun.c (normal_stop): Use it.
@
text
@d417 61
@


1.70
log
@(add_thread_with_info): Use it.
@
text
@d741 1
@


1.69
log
@	* thread.c (_initialize_thread): Don't use commas and periods in
	first line of doc string of "set/show print thread-events".
@
text
@d43 1
d145 2
a146 1
  
@


1.68
log
@gdb/
	* breakpoint.c (update_breakpoints_after_exec): Delete bp_longjmp
	and bp_longjmp_resume breakpoints.
	(breakpoint_address_is_meaningful): Claim bp_longjmp_resume as
	meaningful.
	(create_longjmp_breakpoint): Don't create bp_longjmp_resume
	breakpoints.  Create bp_longjmp breakpoints as momentary
	breakpoints.
	(enable_longjmp_breakpoint): Delete.
	(set_longjmp_breakpoint): New.
	(disable_longjmp_breakpoint): Delete.
	(delete_longjmp_breakpoint): New.
	(set_longjmp_resume_breakpoint): Delete.
	(set_momentary_breakpoint_at_pc): New.
	(breakpoint_re_set_one): Don't delete bp_longjmp and
	bp_longjmp_resume breakpoints.
	(breakpoint_re_set): Don't create longjmp and longjmp-resume
	breakpoints.

	* infrun.c (step_resume_breakpoint): Add comment.
	(struct execution_control_state): Delete handling_longjmp member.
	(init_execution_control_state). Don't clear handling_longjmp.
	(context_switch): Don't context switch handling_longjmp.
	(handle_inferior_event): If handling a bp_longjmp breakpoint,
	create a bp_longjmp_resume breakpoint, and set it as current
	step_resume_breakpoint, then step over the longjmp breakpoint.  If
	handling a bp_longjmp_resume breakpoint, don't delete the longjmp
	breakpoint, delete the longjmp-resume breakpoint, and stop
	stepping.
	(currently_stepping): Remove handling_longjmp from expression.
	(insert_step_resume_breakpoint_at_sal): Update comment.
	(insert_longjmp_resume_breakpoint): New.

	* breakpoint.h (set_momentary_breakpoint_at_pc): Declare.
	(enable_longjmp_breakpoint, disable_longjmp_breakpoint): Delete
	declarations.
	(set_longjmp_breakpoint, delete_longjmp_breakpoint): Declare.
	(set_longjmp_resume_breakpoint): Delete declaration.

	* gdbthread.h (save_infrun_state): Remove handling_longjmp
	parameter.
	(load_infrun_state): Delete *handling_longjmp parameter.
	* thread.c (save_infrun_state): Remove handling_longjmp parameter.
	Update body.
	(load_infrun_state): Delete *handling_longjmp parameter.  Update
	body.

	* infcmd.c (disable_longjmp_breakpoint_cleanup): Delete.
	(delete_longjmp_breakpoint_cleanup): New.
	(step_1): Call set_longjmp_breakpoint instead of
	enable_longjmp_breakpoint.  Use delete_longjmp_breakpoint_cleanup
	instead of disable_longjmp_breakpoint_cleanup when making cleanup.
	(step_1_continuation): Pass thread id in the continuation args to
	step_once.
	(step_once): Add thread parameter.  Pass thread id the the
	continuation.

gdb/testsuite/
	* gdb.cp/annota2.exp: Adjust to breakpoints invalidations at
	different times.
@
text
@d818 2
a819 2
Set printing of thread events (e.g., thread start and exit)."), _("\
Show printing of thread events (e.g., thread start and exit)."), NULL,
@


1.67
log
@2008-05-03  Pedro Alves  <pedro@@codesourcery.com>

	* thread.c (delete_thread): Call observer_notify_thread_exit.
        * mi/mi-interp.c (mi_interpreter_init): Register mi_thread_exit as
        thread_exit observer.
        (mi_thread_exit): New.
@
text
@a321 1
		   int *handling_longjmp,
a341 1
  *handling_longjmp = tp->handling_longjmp;
a360 1
		   int handling_longjmp,
a380 1
  tp->handling_longjmp = handling_longjmp;
@


1.66
log
@	* thread.c (add_thread): Move observer call to ...
        (add_thread_silent): ... here.
@
text
@d173 2
@


1.65
log
@	* thread.c (make_cleanup_restore_current_thread): Make it
	globally visible.
	* gdbthread.h (make_cleanup_restore_current_thread): Declare.
	* varobj.c (varobj_update): Don't save/restore frame.
	(c_value_of_root): Save/restore thread and frame here,
	using make_cleanup_restore_current_thread.
	* Makefile.in: Update dependecies.
@
text
@d129 3
a143 2

  observer_notify_new_thread (result);
@


1.64
log
@2008-03-21  Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdbthread.h (add_thread_with_info): New.
	* linux-thread-db.c: Add some documentation.
	(GET_LWP, GET_PID, GET_THREAD, is_lwp, is_thread, BUILD_LWP): Delete.
	(struct private_thread_info): Remove th_valid and ti_valid.
	Replace ti with tid.
	(thread_get_info_callback): Do not add TID to the new ptid.  Do
	not cache th or ti.
	(thread_db_map_id2thr, lwp_from_thread): Delete functions.
	(thread_from_lwp): Assert that the LWP is set.  Do not add TID to the
	new PTID.
	(attach_thread): Handle an already-existing thread.  Use
	add_thread_with_info.  Cache the th and tid.
	(detach_thread): Verify that private was set.  Remove verbose
	argument and printing.  Update caller.
	(thread_db_detach): Do not adjust inferior_ptid.
	(clear_lwpid_callback, thread_db_resume, thread_db_kill): Delete.
	(check_event, find_new_threads_callback): Do not add TID to the new PTID.
	(thread_db_wait): Do not use lwp_from_thread.
	(thread_db_pid_to_str): Use the cached TID.
	(thread_db_extra_thread_info): Check that private is set.
	(same_ptid_callback): Delete.
	(thread_db_get_thread_local_address): Do not use it or check
	is_thread.  Check that private is set.  Assume that the thread
	handle is already cached.
	(init_thread_db_ops): Remove to_resume and to_kill.
	* thread.c (add_thread_with_info): New.
	(add_thread): Use it.
	* linux-nat.c (find_thread_from_lwp): Delete.
	(exit_lwp): Do not use it.  Check print_thread_events.  Print before
	deleting the thread.
	(GET_PID, GET_LWP, BUILD_LWP, is_lwp): Move to...
	* linux-nat.h (GET_PID, GET_LWP, BUILD_LWP, is_lwp): ...here.
	* inf-ttrace.c (inf_ttrace_wait): Use print_thread_events and
	printf_unfiltered for thread exits.
	* procfs.c (procfs_wait): Likewise.

2008-03-21  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.threads/fork-child-threads.exp: Test next over fork.
@
text
@a63 2
static struct cleanup *make_cleanup_restore_current_thread (ptid_t,
                                                            struct frame_id);
d571 1
a571 1
static struct cleanup *
@


1.63
log
@    * thread.c (print_thread_info): Don't insist
    on having current thread if there are no
    threads at all.
@
text
@d135 1
a135 1
add_thread (ptid_t ptid)
d139 2
d149 6
@


1.62
log
@	Implement -thread-info.
        * gdbthread.h (print_thread_info): Declare.

        * thread.c (print_thread_info): New, extracted
        from info_threads_command and adjusted to
        work for CLI and MI.
        (info_threads_command): Use print_thread_info.
	* Makefile.in: Update dependencies.

        * mi/mi-cmds.c (mi_cmds): Specify a handler
        for -thread-info.
        * mi/mi-cmds.h (mi_cmd_thread_info): Declare.
        * mi/mi-main.c (mi_cmd_thread_info): New.
        (mi_cmd_list_features): Include 'thread-info'.
@
text
@d481 2
a482 2
      gdb_assert (current_thread != -1);
      if (ui_out_is_mi_like_p (uiout))
@


1.61
log
@	Implement MI notification for new threads.
        * doc/observer.texi (new_thread): Document.
        * observer.sh: Forward declare struct thread_info.
        * thread.c (add_thread): Notify observer.

        * interps.h (interp_init_ftype): New parameter
        top_level.
        (interp_set): Likewise.
        (top_level_interpreter_data): Declare.
        * interps.c (interp_set): New parameter top_level.
        Pass it to interpreter's init function.  Remember
        top level interpreter.
        (interpreter_exec_cmd): Adjust.
        (top_level_interpreter_data): New.
        * main.c (captured_main): Pass 1 for top_level
        parameter of interp_set.
	* cli/cli-interp.c (cli_interpreter_init): New
        parameter top_level.
        * tui/tui-interp.c (tui_init): New parameter top_level.

        * mi/mi-interp.c (mi_new_thread): New.
        (mi_interpreter_init): If top level, register
        observer for new threads.

        * Makefile.in (mi-interp.o, thread.o): Update dependencies.
@
text
@d410 8
a417 9
/* Print information about currently known threads 

 * Note: this has the drawback that it _really_ switches
 *       threads, which frees the frame cache.  A no-side
 *       effects info-threads command would be nicer.
 */

static void
info_threads_command (char *arg, int from_tty)
d425 1
d431 2
d438 7
d446 4
a449 1
	printf_filtered ("* ");
d451 1
a451 1
	printf_filtered ("  ");
d453 3
a455 1
      printf_filtered ("%d %s", tp->num, target_tid_to_str (tp->ptid));
d459 6
a464 2
	printf_filtered (" (%s)", extra_info);
      puts_filtered ("  ");
d467 6
a472 1
      print_stack_frame (get_selected_frame (NULL), 0, LOCATION);
d479 7
d491 5
a495 1
      print_stack_frame (get_selected_frame (NULL), 0, LOCATION);
d499 14
@


1.60
log
@	* thread.c (add_thread): Use printf_unfiltered to print.
@
text
@d42 1
d141 2
@


1.59
log
@        Inform about new thread in a single place.

        * thread.c (add_thread_silent): Renamed
        from add_thread.
        (print_thread_events): New variable definition.
        (show_print_thread_events): New function.
        (_initialize_thread): Add "set print thread-events" and
        "show print thread-events" commands.
        (add_thread): Announce new thread.
        * gdbthread.h (add_thread_silent): Declare.
        (print_thread_events): New variable declaration.
        * inf-ttrace.c (inf_ttrace_wait): Don't
        inform about new thread, as add_thread is always
        called too, and will take care of that.
        * infrun.c (handle_inferior_event): Likewise.
        * procfs.c (procfs_wait): Likewise.
        * remote.c (remote_currthread): Likewise.
        * sol-thread.c (sol_thread_wait): Likewise.
        * win32-nat.c (get_win32_debug_event): Likewise.
        * linux-thread-db.c (attach_thread): Likewise.
        Remove the verbose parameter.
        (check_event): Make detach_thread be verbose
        only if print_thread_events is set.
        * linux-nat.c (lin_lwp_attach_lwp): Don't inform
        about new thread.  This is called only from
        linux-thread-db.c:attach_thread, which will take care.
        Remove the verbose parameter.
        * linux-nat.h (lin_lwp_attach_lwp): Adjust prototype.
@
text
@d139 1
a139 1
    printf_filtered (_("[New %s]\n"), target_pid_to_str (ptid));
@


1.59.2.1
log
@	* thread.c (add_thread): Use printf_unfiltered to print.
@
text
@d139 1
a139 1
    printf_unfiltered (_("[New %s]\n"), target_pid_to_str (ptid));
@


1.58
log
@	Updated copyright notices for most files.
@
text
@a118 3
/* add_thread now returns a pointer to the new thread_info, 
   so that back_ends can initialize their private data.  */

d120 1
a120 1
add_thread (ptid_t ptid)
d133 11
d686 11
d759 8
@


1.57
log
@	Clarify infrun variable naming.
	* infrun.c (trap_expected): Rename
	to stepping_over_breakpoint.  Document.
	(stepping_past_breakpoint): Remove.
	(stepping_past_breakpoint_ptdi): Renamed
	to deferred_step_ptid.
	(struct execution_control_state): Rename
	the another_trap field to stepping_over_breakpoint.
	(struct inferior_status): Rename the trap_expected
	field to stepping_over_breakpoint.
	(clear_proceed_status, proceed)
	(init_execution_control_state, context_switch)
	(handle_inferior_event, currently_stepping)
	(keep_going, save_inferior_status)
	(restore_inferior_status, prepare_to_proceed): Adjust.
	* gdbthread.h (struct thread_info): Rename the
	trap_expected field to stepping_over_breakpoint.
	* thread.c (load_infrun_state, save_infrun_state):
	Adjust.
@
text
@d4 1
a4 1
   2000, 2001, 2002, 2003, 2004, 2007 Free Software Foundation, Inc.
@


1.56
log
@	* thread.c (free_thread): Do not delete the step resume breakpoint
	right away.
@
text
@d303 1
a303 1
		   int *another_trap,
d324 1
a324 1
  *another_trap = tp->another_trap;
d344 1
a344 1
		   int another_trap,
d365 1
a365 1
  tp->another_trap = another_trap;
@


1.55
log
@	* infrun.c (stepping_past_breakpoint): New global variable.
	(stepping_past_breakpoint_ptid): Likewise.
	(prepare_to_proceed): Add STEP parameter.  Do not check for Ctrl-C.
	Only switch threads if we need to single-step over a breakpoint hit
	in the previously selected thread.  If stepping, remember previous
	thread to switch back to in STEPPING_PAST_BREAKPOINT[_PTID].  Call
	switch_to_thread instead of copying its contents.
	(proceed): Pass STEP to prepare_to_proceed.  Always set ONEPROC if
	prepare_to_proceed returns true.
	(init_wait_for_inferior): Reset STEPPING_PAST_BREAKPOINT.
	(context_switch): Call switch_to_thread.
	(handle_inferior_event): Switch back to previous thread if requested
	in STEPPING_PAST_BREAKPOINT[_PTID] by prepare_to_proceed.
	* gdbthread.h (switch_to_thread): Add prototype.
	* thread.c (switch_to_thread): Make global.
@
text
@d87 3
a89 1
     but not any user-specified thread-specific breakpoints. */
d91 1
a91 1
    delete_breakpoint (tp->step_resume_breakpoint);
@


1.54
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@a61 1
static void switch_to_thread (ptid_t ptid);
d454 1
a454 1
static void
@


1.53
log
@	* breakpoint.c (gdb_breakpoint_query): Really return an
	enum gdb_rc.
	(gdb_breakpoint): Likewise.
	* thread.c (do_captured_list_thread_ids): Likewise.
	(do_captured_thread_select): Likewise.
	* mi/mi-main.c (mi_cmd_thread_select): Expect an enum gdb_rc.
	(mi_cmd_thread_list_ids): Remove bogus initialization.
@
text
@d12 1
a12 1
   the Free Software Foundation; either version 2 of the License, or
d21 1
a21 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.52
log
@	* Makefile.in (SFILES): Remove nlmread.c.
	(COMMON_OBS): Remove nlmread.o.
	(nlmread.o): Delete rule.
	* README: Delete reference to remote-st.c.
	* acinclude.m4 (CY_AC_TCL_LYNX_POSIX): Delete.
	* defs.h (enum gdb_osabi): Delete GDB_OSABI_NETWARE and
	GDB_OSABI_LYNXOS.
	* i386-tdep.c (i386_nw_init_abi, i386_nlm_osabi_sniffer): Delete.
	(_initialize_i386_tdep): Do not reference them.
	* nlmread.c: Delete file.
	* osabi.c (gdb_osabi_names): Remove NetWare and LynxOS.
	* target.c: Doc update.
	* thread.c: Delete commented include.
	* config/alpha/tm-alpha.h: Doc update.

	* gdb.texinfo (Startup): Delete references to some alternate
	names for .gdbinit.
	(Thread): Remove LynxOS reference.
	(Tandem ST2000): Delete target-specific documentation.
	* gdbint.texinfo (Symbol Handling): Remove mention of NLM.
	(Target Architecture Definition): Remove mention of GDB_OSABI_NETWARE
	and GDB_OSABI_LYNXOS.

	* config/netware.exp: Delete file.
@
text
@d287 4
a290 2
  return catch_exceptions_with_msg (uiout, do_captured_list_thread_ids, NULL,
				    error_message, RETURN_MASK_ALL);
d710 4
a713 2
  return catch_exceptions_with_msg (uiout, do_captured_thread_select, tidstr,
				    error_message, RETURN_MASK_ALL);
@


1.51
log
@	* frame.c (frame_pop, frame_observer_target_changed): Call
	reinit_frame_cache.
	(flush_cached_frames): Rename to reinit_frame_cache and delete
	old implementation.
	* frame.h (flush_cached_frames): Delete prototype and update comment.

	* bsd-kvm.c (bsd_kvm_open, bsd_kvm_proc_cmd, bsd_kvm_pcb_cmd): Call
	reinit_frame_cache instead of flush_cached_frames.  Do not call
	select_frame after reinit_frame_cache.
	* corelow.c (core_open): Likewise.
	* gdbarch.sh (deprecated_current_gdbarch_select_hack): Likewise.
	* infrun.c (prepare_to_proceed, context_switch)
	(handle_inferior_event): Likewise.
	* linux-fork.c (fork_load_infrun_state): Likewise.
	* ocd.c (ocd_start_remote): Likewise.
	* remote-e7000.c (e7000_start_remote): Likewise.
	* remote-mips.c (device): Likewise.
	* thread.c (switch_to_thread): Likewise.
	* tracepoint.c (finish_tfind_command): Likewise.
	* gdbarch.c: Regenerated.
@
text
@a44 2
/*#include "lynxos-core.h" */

@


1.50
log
@2007-02-02  Denis Pilat  <denis.pilat@@st.com>

	* thread.c (make_cleanup_restore_current_thread): New function.
	(info_threads_command): Use of make_cleanup_restore_current_thread
	to restore the current thread and the selected frame.
	(restore_selected_frame): New function.
	(struct current_thread_cleanup): Add frame_id field.
	(do_restore_current_thread_cleanup): Add restoring of the selected
	frame.
	(make_cleanup_restore_current_thread): Likewise.
	(thread_apply_all_command): backup the selected frame while
	entering the function and restore it at exit.
	(thread_apply_command): Likewise.
@
text
@d464 1
a464 1
  flush_cached_frames ();
a466 1
  select_frame (get_current_frame ());
@


1.49
log
@Copyright updates for 2007.
@
text
@d68 2
d413 2
a414 1
  struct frame_id saved_frame_id = get_frame_id (get_selected_frame (NULL));
d417 4
d437 1
a437 1

d442 3
a444 1
  switch_to_thread (current_ptid);
d446 3
a448 6
  /* Restores the frame set by the user before the "info threads"
     command.  We have finished the info-threads display by switching
     back to the current thread.  That switch has put us at the top of
     the stack (leaf frame).  */
  cur_frame = frame_find_by_id (saved_frame_id);
  if (cur_frame == NULL)
a449 1
      /* Ooops, can't restore, tell user where we are.  */
a452 6
  else
    {
      select_frame (cur_frame);
      /* re-show current frame. */
      show_stack_frame (cur_frame);
    }
d476 14
a489 1
      print_stack_frame (get_current_frame (), 1, SRC_LINE);
d496 1
d504 1
d509 2
a510 1
make_cleanup_restore_current_thread (ptid_t inferior_ptid)
d515 1
d535 3
d541 4
a544 2

  old_chain = make_cleanup_restore_current_thread (inferior_ptid);
d564 3
d569 4
d583 3
d595 3
a597 1
  old_chain = make_cleanup_restore_current_thread (inferior_ptid);
d649 3
d654 3
@


1.48
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d3 2
a4 2
   Copyright (C) 1986, 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998,
   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
@


1.47
log
@2005-11-14  Andrew Stubbs  <andrew.stubbs@@st.com>

	* thread.c (_initialize_thread): Correct the 'thread apply' help
	message.
@
text
@d3 1
a3 1
   Copyright 1986, 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998,
d22 2
a23 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.46
log
@2005-02-15  Andrew Cagney  <cagney@@gnu.org>

	Mark up add_com, add_info and add_prefix_cmd.
	* breakpoint.c, cp-support.c, dcache.c, dwarf2read.c: Update.
	* exec.c, f-valprint.c, frame.c, gcore.c, gnu-nat.c: Update.
	* go32-nat.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* kod.c, language.c, linux-nat.c, m32r-rom.c, macrocmd.c: Update.
	* maint.c, memattr.c, mips-tdep.c, nto-procfs.c, objc-lang.c: Update.
	* ocd.c, pa64solib.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote-e7000.c, remote-m32r-sdi.c, remote-mips.c: Update.
	* remote-sds.c, remote-sim.c, remote-st.c, remote-utils.c: Update.
	* remote.c, rs6000-tdep.c, ser-go32.c, serial.c: Update.
	* sh-tdep.c, solib.c, somsolib.c, source.c, stack.c: Update.
	* symfile.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, typeprint.c, utils.c, valprint.c: Update.
	* win32-nat.c, xcoffsolib.c, cli/cli-cmds.c, cli/cli-dump.c: Update.
	* cli/cli-logging.c, tui/tui-layout.c, tui/tui-regs.c: Update.
	* tui/tui-stack.c, tui/tui-win.c: Update.
@
text
@d694 1
a694 1
		  &thread_apply_list, "apply ", 1, &thread_cmd_list);
@


1.45
log
@2005-02-14  Andrew Cagney  <cagney@@gnu.org>

	Mark up add_cmd.
	* arch-utils.c, avr-tdep.c, breakpoint.c, corefile.c: Update.
	* cp-abi.c, cp-namespace.c, cp-support.c, dummy-frame.c: Update.
	* exec.c, gnu-nat.c, go32-nat.c, hppa-tdep.c, infcmd.c: Update.
	* infrun.c, interps.c, macrocmd.c, maint.c, memattr.c: Update.
	* mips-tdep.c, ocd.c, osabi.c, printcmd.c, regcache.c: Update.
	* reggroups.c, remote-fileio.c, remote-rdi.c, remote.c: Update.
	* sol-thread.c, source.c, stack.c, symfile-mem.c: Update.
	* symfile.c, thread.c, tracepoint.c, valprint.c, value.c: Update.
	* win32-nat.c, cli/cli-cmds.c, cli/cli-dump.c: Update.
	* cli/cli-logging.c, tui/tui-regs.c: Update.
@
text
@d685 1
a685 1
	    "IDs of currently known threads.");
d687 4
a690 3
  add_prefix_cmd ("thread", class_run, thread_command,
		  "Use this command to switch between threads.\n\
The new thread ID must be currently known.", &thread_cmd_list, "thread ", 1, &cmdlist);
d693 1
a693 1
		  "Apply a command to a list of threads.",
@


1.44
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up some of printf_filtered and printf_unfiltered.
	* ada-lang.c, annotate.c, arch-utils.c, breakpoint.c: Update.
	* corelow.c, cp-namespace.c, cp-support.c, dcache.c: Update.
	* demangle.c, dsrec.c, dwarf2read.c, dwarfread.c: Update.
	* event-loop.c, event-top.c, exec.c, f-valprint.c: Update.
	* gdbtypes.c, inf-loop.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcmd.c, inflow.c, infrun.c, inftarg.c, language.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, maint.c: Update.
	* mdebugread.c, memattr.c, monitor.c, objc-lang.c: Update.
	* ocd.c, osabi.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote.c, solib-som.c, solib.c, somsolib.c, source.c: Update.
	* stack.c, symfile.c, symmisc.c, target.c, thread.c: Update.
	* top.c, utils.c, valprint.c, value.c, cli/cli-cmds.c: Update.
	* cli/cli-dump.c, cli/cli-logging.c, tui/tui-hooks.c: Update.
	* tui/tui-regs.c, tui/tui-win.c: Update.
@
text
@d696 1
a696 1
	   "Apply a command to all threads.", &thread_apply_list);
@


1.43
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@d537 1
a537 1
	printf_filtered ("\nThread %d (%s):\n",
d608 1
a608 1
	      printf_filtered ("\nThread %d (%s):\n", tp->num,
d630 1
a630 1
	printf_filtered ("[Current thread is %d (%s)]\n",
@


1.42
log
@2005-01-14  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (catch_exceptions): Delete errstring parameter.
	(catch_exceptions_with_msg): Ditto.
	* exceptions.c (catch_exceptions_with_msg): Update.
	(catch_exceptions): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* frame.c (get_current_frame): Update.
	* wrapper.c (gdb_value_struct_elt): Update.
	* exceptions.c (catch_exceptions): Update.
	* thread.c (gdb_list_thread_ids, gdb_thread_select): Update.
	* breakpoint.c (gdb_breakpoint_query, gdb_breakpoint): Update.
	* remote-fileio.c (remote_fileio_request): Update.
@
text
@d445 1
a445 1
      warning ("Couldn't restore frame in current thread, at frame 0");
d521 1
a521 1
    error ("Please specify a command following the thread ID list");
d557 1
a557 1
    error ("Please specify a thread ID list");
d562 1
a562 1
    error ("Please specify a command following the thread ID list");
d577 1
a577 1
	error ("Error parsing %s", tidlist);
d588 1
a588 1
	    error ("Error parsing %s", tidlist);
d602 1
a602 1
	    warning ("Unknown thread %d.", start);
d604 1
a604 1
	    warning ("Thread %d has terminated.", start);
d634 1
a634 1
	error ("No stack.");
d652 1
a652 1
    error ("Thread ID %d not known.", num);
d655 1
a655 1
    error ("Thread ID %d has terminated.\n", num);
@


1.41
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* breakpoint.c (gdb_breakpoint_query): Update, use
	catch_exceptions_with_msg.
	(do_captured_breakpoint): Add uiout parameter.
	(gdb_breakpoint): Update, use catch_exceptions_with_msg.
	* mi/mi-main.c (mi_cmd_thread_select): Pass mi_error_message to
	gdb_thread_select.  Return MI_CMD_ERROR instead of
	MI_CMD_CAUGHT_ERROR.
	(mi_cmd_thread_list_ids): Ditto for gdb_list_thread_ids.
	(enum captured_mi_execute_command_actions): Delete
	EXECUTE_COMMAND_DISPLAY_ERROR.
	(captured_mi_execute_command): Delete code handling
	MI_CMD_CAUGHT_ERROR.
	(mi_execute_command): Don't check for
	EXECUTE_COMMAND_DISPLAY_ERROR.
	* mi/mi-cmd-break.c (breakpoint_notify): Update call to
	gdb_breakpoint_query.
	(mi_cmd_break_insert): Pass mi_error_message to gdb_breakpoint.
	* mi/mi-cmds.h (enum mi_cmd_result): Delete MI_CMD_CAUGHT_ERROR.
	* gdb.h (gdb_thread_select, gdb_list_thread_ids)
	(gdb_breakpoint, gdb_breakpoint_query): Add error_message
	parameter.
	* thread.c (thread_command): Update call.
	(gdb_thread_select, gdb_list_thread_ids): Update, call
	catch_exceptions_with_msg.
@
text
@d288 1
a288 1
				    NULL, error_message, RETURN_MASK_ALL);
d673 1
a673 1
				    NULL, error_message, RETURN_MASK_ALL);
@


1.40
log
@2005-01-12  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (enum return_reason, RETURN_MASK)
	(RETURN_MASK_QUIT, RETURN_MASK_ERROR, RETURN_MASK_ALL)
	(return_mask, throw_exception, catch_exceptions_ftype)
	(catch_exceptions_with_msg, catch_errors_ftype, catch_errors)
	(catch_command_errors_ftype, catch_command_errors): Move to
	exceptions.h.
	* exceptions.c, exceptions.h: New files.
	* top.c: Do not include <setjmp.h>.
	(SIGJMP_BUF, SIGSETJMP, SIGLONGJMP, catch_return)
	(throw_exception, catcher, catch_exceptions)
	(catch_exceptions_with_msg, struct catch_errors_args)
	(do_catch_errors, catch_errors, struct captured_command_args)
	(do_captured_command, catch_command_errors): Move to exceptions.c.
	* wrapper.c, wince.c, win32-nat.c, utils.c: Include "exceptions.h".
	* tui/tui-interp.c, top.c, thread.c, symmisc.c: Ditto.
	* symfile-mem.c, stack.c, solib.c, rs6000-nat.c: Ditto.
	* remote-sds.c, remote-mips.c, remote-fileio.c: Ditto.
	* remote-e7000.c, objc-lang.c, ocd.c: Ditto.
	* remote.c, nto-procfs.c, monitor.c, mi/mi-main.c: Ditto.
	* main.c, m32r-rom.c, infrun.c, inf-loop.c: Ditto.
	* hppa-hpux-tdep.c, frame.c, event-top.c, event-loop.c: Ditto.
	* corelow.c, corefile.c, cli/cli-interp.c, breakpoint.c: Ditto.
	* ada-valprint.c, ada-lang.c: Ditto.
	* Makefile.in (HFILES_NO_SRCDIR, COMMON_OBS): Add exceptions.h and
	exceptions.o.  Update all dependencies.
@
text
@d285 1
a285 1
gdb_list_thread_ids (struct ui_out *uiout)
d287 2
a288 2
  return catch_exceptions (uiout, do_captured_list_thread_ids, NULL,
			   NULL, RETURN_MASK_ALL);
d638 1
a638 1
  gdb_thread_select (uiout, tidstr);
d670 1
a670 1
gdb_thread_select (struct ui_out *uiout, char *tidstr)
d672 2
a673 2
  return catch_exceptions (uiout, do_captured_thread_select, tidstr,
			   NULL, RETURN_MASK_ALL);
@


1.39
log
@2004-10-29  Andrew Cagney  <cagney@@gnu.org>

	* frame.h (get_selected_frame): Add message parameter.
	* frame.c (get_selected_frame): Add and use message parameter.
	* stack.c (current_frame_command, return_command, locals_info)
	(catch_info, args_info, up_silently_base, down_silently_base): Use
	get_selected_frame with an explicit message.
	* thread.c, stack.c, sh-tdep.c, sh64-tdep.c: Update.
	* remote-rdp.c, remote-mips.c, remote-e7000.c: Update.
	* ocd.c, mi/mi-main.c, mi/mi-cmd-stack.c: Update.
	* infrun.c, inflow.c, infcmd.c, frame.c: Update.
	* findvar.c, eval.c, corelow.c, bsd-kvm.c: Update.
	* breakpoint.c: Update.
@
text
@d33 1
@


1.38
log
@2004-08-25  Andrew Cagney  <cagney@@gnu.org>

	* infrun.c (struct execution_control_state): Delete field
	"stepping_through_sigtramp".
	(init_execution_control_state): Do not set same.
	(context_switch): Do not pass same to save_infrun_state and
	load_infrun_state.
	* gdbthread.h (struct thread_info): Delete field
	stepping_through_sigtramp.
	(save_infrun_state, load_infrun_state): Delete parameter
	stepping_through_sigtramp.
	* thread.c (load_infrun_state, save_infrun_state): Update.
@
text
@d410 1
a410 1
  struct frame_id saved_frame_id = get_frame_id (get_selected_frame ());
d431 1
a431 1
      print_stack_frame (get_selected_frame (), 0, LOCATION);
d445 1
a445 1
      print_stack_frame (get_selected_frame (), 0, LOCATION);
d664 1
a664 1
  print_stack_frame (get_selected_frame (), 1, SRC_AND_LOC);
@


1.37
log
@2004-05-24  Randolph Chung  <tausq@@debian.org>

	* thread.c (info_threads_command, thread_apply_all_command)
	(thread_apply_command, thread_command, do_captured_thread_select):
	Remove HPUXHPPA-specific code.
@
text
@a303 1
		   int *stepping_through_sigtramp,
a326 1
  *stepping_through_sigtramp = tp->stepping_through_sigtramp;
a344 1
		   int stepping_through_sigtramp,
a365 1
  tp->stepping_through_sigtramp = stepping_through_sigtramp;
@


1.36
log
@2004-05-12  Andrew Cagney  <cagney@@redhat.com>

	* thread.c (load_infrun_state): Delete step_sp.
	* infrun.c (context_switch): Ditto.
	* inferior.h (step_sp): Ditto.
	* infcmd.c (step_sp, step_1, step_once, until_next_command): Ditto.
	* gdbthread.h (struct thread_info, save_infrun_state)
	(restore_infrun_state): Ditto.
@
text
@a426 1
#ifdef HPUXHPPA
a427 3
#else
      printf_filtered ("%d %s", tp->num, target_pid_to_str (tp->ptid));
#endif
a539 1
#ifdef HPUXHPPA
a541 4
#else
	printf_filtered ("\nThread %d (%s):\n", tp->num,
			 target_pid_to_str (inferior_ptid));
#endif
a610 1
#ifdef HPUXHPPA
a612 4
#else
	      printf_filtered ("\nThread %d (%s):\n", tp->num,
			       target_pid_to_str (inferior_ptid));
#endif
d635 1
a635 6
#if defined(HPUXHPPA)
			 target_tid_to_str (inferior_ptid)
#else
			 target_pid_to_str (inferior_ptid)
#endif
	  );
a664 1
#if defined(HPUXHPPA)
a665 3
#else
  ui_out_text (uiout, target_pid_to_str (inferior_ptid));
#endif
@


1.35
log
@2004-05-10  Andrew Cagney  <cagney@@redhat.com>

	* infrun.c (through_sigtramp_breakpoint): Delete variable.
	(context_switch): Do not switch through_sigtramp_breakpoint.
	* gdbthread.h (save_infrun_state, load_infrun_state)
	(struct thread_info): Delete through_sigtramp_breakpoint parameter
	and structure member.
	* thread.c (load_infrun_state, save_infrun_state): Update.
@
text
@d306 1
a306 1
		   struct symtab **current_symtab, CORE_ADDR *step_sp)
a330 1
  *step_sp = tp->step_sp;
d349 1
a349 1
		   struct symtab *current_symtab, CORE_ADDR step_sp)
a371 1
  tp->step_sp = step_sp;
@


1.34
log
@2004-05-01  Andrew Cagney  <cagney@@redhat.com>

	* breakpoint.c (insert_bp_location): Use get_frame_id, and
	frame_find_by_id instead of frame_relative_level.
	(do_enable_breakpoint): Ditto.
	* thread.c: Update copyright.
	(info_threads_command): Ditto, simplify.
@
text
@a296 1
		   struct breakpoint **through_sigtramp_breakpoint,
a318 1
  *through_sigtramp_breakpoint = tp->through_sigtramp_breakpoint;
a340 1
		   struct breakpoint *through_sigtramp_breakpoint,
a362 1
  tp->through_sigtramp_breakpoint = through_sigtramp_breakpoint;
@


1.33
log
@2004-04-28  Andrew Cagney  <cagney@@redhat.com>

	* stack.c (print_stack_frame_stub): Delete declaration.
	(struct print_stack_frame_args, print_stack_frame)
	(print_frame_info, print_frame): Replace "source" with print what.
	Replace "print" with "print_level".  Replace "args" with
	"print_args".
	* frame.h (show_and_print_stack_frame, print_stack_frame)
	(print_frame_info): Update declarations.
	* stack.c (select_and_print_frame, frame_command)
	(current_frame_command, up_command, down_command): Update calls -
	use get_selected_frame, pass "enum print_what" for source, do not
	call frame_relative_level.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames): Ditto.
	* remote-rdp.c (remote_rdp_open): Ditto.
	* remote-mips.c (common_open): Ditto.
	* remote-e7000.c (e7000_start_remote): Ditto.
	* ocd.c (ocd_start_remote): Ditto.
	* mi/mi-main.c (mi_cmd_exec_return): Ditto.
	* infrun.c (normal_stop): Ditto.
	* inflow.c (kill_command): Ditto.
	* infcmd.c (finish_command): Ditto.
	* corelow.c (core_open): Ditto.
	* tracepoint.c (finish_tfind_command): Ditto.
	* thread.c (info_threads_command, info_threads_command)
	(restore_current_thread, do_captured_thread_select): Ditto.
	* ada-tasks.c (task_command): Ditto.
@
text
@d4 1
a4 1
   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d420 1
a420 2
  int saved_frame_level = frame_relative_level (get_selected_frame ());
  int counter;
a422 5
  /* Check that there really is a frame.  This happens when a simulator
     is connected but not loaded or running, for instance.  */
  if (legacy_frame_p (current_gdbarch) && saved_frame_level < 0)
    error ("No frame.");

d450 6
a455 9
  /* Code below copied from "up_silently_base" in "stack.c".
   * It restores the frame set by the user before the "info threads"
   * command.  We have finished the info-threads display by switching
   * back to the current thread.  That switch has put us at the top
   * of the stack (leaf frame).
   */
  counter = saved_frame_level;
  cur_frame = find_relative_frame (get_selected_frame (), &counter);
  if (counter != 0)
d457 1
a457 1
      /* Ooops, can't restore, tell user where we are. */
d464 2
a466 3

  /* re-show current frame. */
  show_stack_frame (cur_frame);
@


1.32
log
@	* thread.c (info_threads_command): Use get_selected_frame ().
	Check that there is at least one non-sentinel frame.
@
text
@d451 1
a451 1
      print_stack_frame (get_selected_frame (), -1, 0);
d468 1
a468 1
      print_stack_frame (get_selected_frame (), -1, 0);
d500 1
a500 1
      print_stack_frame (get_current_frame (), 0, -1);
d707 1
a707 2
  print_stack_frame (deprecated_selected_frame,
		     frame_relative_level (deprecated_selected_frame), 1);
@


1.32.12.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d4 1
a4 1
   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d297 1
d305 1
d307 1
a307 1
		   struct symtab **current_symtab)
d320 1
d330 1
d333 1
d343 1
d351 1
d353 1
a353 1
		   struct symtab *current_symtab)
d366 1
d374 1
d377 1
d420 2
a421 1
  struct frame_id saved_frame_id = get_frame_id (get_selected_frame ());
d424 5
d439 1
d441 3
d451 1
a451 1
      print_stack_frame (get_selected_frame (), 0, LOCATION);
d456 9
a464 6
  /* Restores the frame set by the user before the "info threads"
     command.  We have finished the info-threads display by switching
     back to the current thread.  That switch has put us at the top of
     the stack (leaf frame).  */
  cur_frame = frame_find_by_id (saved_frame_id);
  if (cur_frame == NULL)
d466 1
a466 1
      /* Ooops, can't restore, tell user where we are.  */
d468 1
a468 1
      print_stack_frame (get_selected_frame (), 0, LOCATION);
a472 2
      /* re-show current frame. */
      show_stack_frame (cur_frame);
d474 3
d500 1
a500 1
      print_stack_frame (get_current_frame (), 1, SRC_LINE);
d560 1
d563 4
d636 1
d639 4
d665 6
a670 1
			 target_tid_to_str (inferior_ptid));
d700 1
d702 3
d707 2
a708 1
  print_stack_frame (get_selected_frame (), 1, SRC_AND_LOC);
@


1.31
log
@2003-05-04  Andrew Cagney  <cagney@@redhat.com>

	* gdbthread.h (save_infrun_state): Drop prev_func_name parameter.
	(load_infrun_state): Ditto.
	(struct thread_info): Drop "prev_func_name" field.
	* thread.c (load_infrun_state): Update.
	(save_infrun_state): Update.
	* infrun.c (prev_func_name): Delete variable.
	(init_wait_for_inferior): Do not clear prev_func_name.
	(stop_stepping, keep_going, context_switch): Do not swap
	prev_func_name.
	(handle_inferior_event, check_sigtramp2): Use pc_in_sigtramp
	instead of PC_IN_SIGTRAMP.
@
text
@d420 1
a420 1
  int saved_frame_level = frame_relative_level (deprecated_selected_frame);
d424 4
a427 4
  /* Avoid coredumps which would happen if we tried to access a NULL
     deprecated_selected_frame.  */
  if (!target_has_stack)
    error ("No stack.");
d451 1
a451 4
      if (deprecated_selected_frame)
	print_stack_frame (deprecated_selected_frame, -1, 0);
      else
	printf_filtered ("[No stack.]\n");
d463 1
a463 1
  cur_frame = find_relative_frame (deprecated_selected_frame, &counter);
d468 1
a468 1
      print_stack_frame (deprecated_selected_frame, -1, 0);
@


1.31.14.1
log
@	* thread.c (info_threads_command): Use get_selected_frame ().
	Check that there is at least one non-sentinel frame.
@
text
@d420 1
a420 1
  int saved_frame_level = frame_relative_level (get_selected_frame ());
d424 4
a427 4
  /* Check that there really is a frame.  This happens when a simulator
     is connected but not loaded or running, for instance.  */
  if (legacy_frame_p (current_gdbarch) && saved_frame_level < 0)
    error ("No frame.");
d451 4
a454 1
      print_stack_frame (get_selected_frame (), -1, 0);
d466 1
a466 1
  cur_frame = find_relative_frame (get_selected_frame (), &counter);
d471 1
a471 1
      print_stack_frame (get_selected_frame (), -1, 0);
@


1.31.8.1
log
@Snap const char * mess.
@
text
@d59 2
a60 2
static void thread_command (const char *tidstr, int from_tty);
static void thread_apply_all_command (const char *, int);
d62 2
a63 2
static void info_threads_command (const char *, int);
static void thread_apply_command (const char *, int);
d415 1
a415 1
info_threads_command (const char *arg, int from_tty)
d539 1
a539 1
thread_apply_all_command (const char *cmd, int from_tty)
d579 1
a579 1
thread_apply_command (const char *tidlist, int from_tty)
d581 1
a581 1
  const char *cmd;
d660 1
a660 1
thread_command (const char *tidstr, int from_tty)
d716 1
a716 1
gdb_thread_select (struct ui_out *uiout, const char *tidstr)
@


1.30
log
@2003-04-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbthread.h (save_infrun_state): Delete parameter
	"prev_func_start".
	(struct thread_info): Delete field "prev_func_start".
	(load_infrun_state): Ditto.
	* thread.c (load_infrun_state, save_infrun_state): Update.
	* infrun.c (prev_func_start): Delete variable.
	(context_switch, init_wait_for_inferior): Update.
	(stop_stepping, keep_going): Update.
@
text
@a294 1
		   char **prev_func_name,
a317 1
  *prev_func_name = tp->prev_func_name;
a340 1
		   char *prev_func_name,
a363 1
  tp->prev_func_name = prev_func_name;
@


1.30.2.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d295 1
d319 1
d343 1
d367 1
@


1.29
log
@
2003-03-28  Jeff Johnston  <jjohnstn@@redhat.com>

        * thread.c: Reindented.
        * lin-lwp.c: Ditto.
        * linux-proc.c: Ditto.
@
text
@a294 1
		   CORE_ADDR *prev_func_start,
a318 1
  *prev_func_start = tp->prev_func_start;
a342 1
		   CORE_ADDR prev_func_start,
a366 1
  tp->prev_func_start = prev_func_start;
@


1.28
log
@2003-02-02  Elena Zannoni  <ezannoni@@redhat.com>

	Fix PR gdb/742 gdb/743
	* disasm.c (dump_insns): Use make_cleanup_ui_out_tuple_begin_end.
	(do_mixed_source_and_assembly): Use
	make_cleanup_ui_out_tuple_begin_end and
	make_cleanup_ui_out_tuple_begin_end.
	(do_mixed_source_and_assembly): Ditto.
	* thread.c (do_captured_list_thread_ids): Ditto.
	* ui-out.h (ui_out_table_begin, ui_out_list_begin,
	ui_out_tuple_begin, ui_out_table_end, ui_out_list_end,
	ui_out_tuple_end): Delete prototypes.
	* ui-out.c (ui_out_list_begin, ui_out_tuple_begin,
	ui_out_list_end, ui_out_tuple_end): Delete.

	From Kevin Buettner  <kevinb@@redhat.com>:
	* ui-out.h (make_cleanup_ui_out_table_begin_end): New function.
        * ui-out.c (make_cleanup_ui_out_table_begin_end)
        (do_cleanup_table_end):  New functions.
        * breakpoint.c (print_it_typical, print_one_breakpoint, mention):
        Use cleanups to invoke_ui_out_tuple_end().
        (breakpoint_1): Use cleanup to invoke ui_out_table_end().
	* cli/cli-setshow.c (cmd_show_list): Use
	make_cleanup_ui_out_tuple_begin_end.
@
text
@d258 2
a259 3
static int 
do_captured_list_thread_ids (struct ui_out *uiout,
			     void *arg)
d293 2
a294 2
load_infrun_state (ptid_t ptid, 
		   CORE_ADDR *prev_pc, 
d296 1
a296 1
		   char **prev_func_name, 
d300 1
a300 1
		   CORE_ADDR *step_range_start, 
d302 1
a302 1
		   struct frame_id *step_frame_id, 
d304 1
a304 1
		   int *another_trap, 
d308 2
a309 3
		   int *current_line, 
		   struct symtab **current_symtab, 
		   CORE_ADDR *step_sp)
d330 4
a333 2
  *stepping_through_solib_after_catch = tp->stepping_through_solib_after_catch;
  *stepping_through_solib_catchpoints = tp->stepping_through_solib_catchpoints;
d343 2
a344 2
save_infrun_state (ptid_t ptid, 
		   CORE_ADDR prev_pc, 
d346 1
a346 1
		   char *prev_func_name, 
d350 1
a350 1
		   CORE_ADDR step_range_start, 
d352 1
a352 1
		   const struct frame_id *step_frame_id, 
d354 1
a354 1
		   int another_trap, 
d357 1
a357 1
		   int stepping_through_sigtramp, 
d359 1
a359 2
		   struct symtab *current_symtab,
		   CORE_ADDR step_sp)
d508 1
a508 1
  if (! ptid_equal (ptid, inferior_ptid))
d573 1
a573 2
			 tp->num,
			 target_tid_to_str (inferior_ptid));
d579 1
a579 1
	strcpy (cmd, saved_cmd); /* Restore exact command used previously */
d691 1
a691 2
do_captured_thread_select (struct ui_out *uiout,
			   void *tidstr)
d724 1
a724 2
gdb_thread_select (struct ui_out *uiout,
		   char *tidstr)
d743 1
a743 2
The new thread ID must be currently known.", &thread_cmd_list, "thread ", 1,
		  &cmdlist);
d750 1
a750 2
	   "Apply a command to all threads.",
	   &thread_apply_list);
@


1.28.10.1
log
@Merge with mainline.
@
text
@d258 3
a260 2
static int
do_captured_list_thread_ids (struct ui_out *uiout, void *arg)
d294 2
a295 2
load_infrun_state (ptid_t ptid,
		   CORE_ADDR *prev_pc,
d297 1
a297 1
		   char **prev_func_name,
d301 1
a301 1
		   CORE_ADDR *step_range_start,
d303 1
a303 1
		   struct frame_id *step_frame_id,
d305 1
a305 1
		   int *another_trap,
d309 3
a311 2
		   int *current_line,
		   struct symtab **current_symtab, CORE_ADDR *step_sp)
d332 2
a333 4
  *stepping_through_solib_after_catch =
    tp->stepping_through_solib_after_catch;
  *stepping_through_solib_catchpoints =
    tp->stepping_through_solib_catchpoints;
d343 2
a344 2
save_infrun_state (ptid_t ptid,
		   CORE_ADDR prev_pc,
d346 1
a346 1
		   char *prev_func_name,
d350 1
a350 1
		   CORE_ADDR step_range_start,
d352 1
a352 1
		   const struct frame_id *step_frame_id,
d354 1
a354 1
		   int another_trap,
d357 1
a357 1
		   int stepping_through_sigtramp,
d359 2
a360 1
		   struct symtab *current_symtab, CORE_ADDR step_sp)
d509 1
a509 1
  if (!ptid_equal (ptid, inferior_ptid))
d574 2
a575 1
			 tp->num, target_tid_to_str (inferior_ptid));
d581 1
a581 1
	strcpy (cmd, saved_cmd);	/* Restore exact command used previously */
d693 2
a694 1
do_captured_thread_select (struct ui_out *uiout, void *tidstr)
d727 2
a728 1
gdb_thread_select (struct ui_out *uiout, char *tidstr)
d747 2
a748 1
The new thread ID must be currently known.", &thread_cmd_list, "thread ", 1, &cmdlist);
d755 2
a756 1
	   "Apply a command to all threads.", &thread_apply_list);
@


1.27
log
@2003-01-13  Elena Zannoni  <ezannoni@@redhat.com>

	* stack.c (print_frame_info, print_stack_frame_base_stub,
	print_stack_frame_base, show_and_print_stack_frame_stub,
	show_and_print_stack_frame, print_only_stack_frame_stub,
	print_only_stack_frame): Delete functions.
	(print_stack_frame_stub): Call print_frame_info instead of
	print_frame_info_base.
	(print_frame_info_base): Rename to print_frame_info.
	(backtrace_command_1): Call print_frame_info, instead of
	print_frame_info_base.
	(current_frame_command): Call print_stack_frame, instead of
	print_only_stack_frame.
	(frame_command): Call print_stack_frame, instead of
	show_and_print_stack_frame.
	(up_command): Ditto.
	(down_command): Ditto.
	* frame.h (print_only_stack_frame): Delete prototype.
	* infrun.c (normal_stop): Call print_stack_frame, instead of
	show_and_print_stack_frame.
	* thread.c (info_threads_command): Call print_stack_frame, instead
	of print_only_stack_frame.

2003-01-13  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-main.c (mi_cmd_exec_return): Use print_stack_frame instead of
	show_and_print_stack_frame.
@
text
@d264 1
d269 1
a269 1
  ui_out_tuple_begin (uiout, "thread-ids");
d277 1
a277 1
  ui_out_tuple_end (uiout);
@


1.27.2.1
log
@Merge kseitz_interps-20020528-branch.
@
text
@a263 1
  struct cleanup *cleanup_chain;
d268 1
a268 1
  cleanup_chain = make_cleanup_ui_out_tuple_begin_end (uiout, "thread-ids");
d276 1
a276 1
  do_cleanups (cleanup_chain);
a695 1
  ptid_t old_ptid;
a699 1
  old_ptid = inferior_ptid;
a721 4

  if (!ptid_equal (old_ptid, inferior_ptid))
    selected_thread_changed_event (pid_to_thread_id (inferior_ptid));

@


1.27.2.2
log
@Kill off anything not directly related to the CLI command.
@
text
@d697 1
d702 1
d725 4
@


1.26
log
@2002-12-19  Keith Seitz  <keiths@@redhat.com>

	patch committed by Elena Zannoni  <ezannoni@@redhat.com>
	* thread.c (do_captured_list_thread_ids): Call prune_threads and
	target_find_new_threads. Fix for PR mi/669.
@
text
@d4 1
a4 1
   1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d460 1
a460 1
	print_only_stack_frame (deprecated_selected_frame, -1, 0);
@


1.26.2.1
log
@Merge branch with mainline:
POP_FRAME_P;
frame-unwind.h.
@
text
@d4 1
a4 1
   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d460 1
a460 1
	print_stack_frame (deprecated_selected_frame, -1, 0);
@


1.25
log
@2002-12-05  Andrew Cagney  <ac131313@@redhat.com>

	* gdbthread.h: Include "frame.h".
	(struct thread_info): Replace step_frame_address with
	step_frame_id.
	* inferior.h: Include "frame.h".
	(step_frame_id): Replace external variable step_frame_address.
	* gdbthread.h (save_infrun_state): Replace step_frame_address
	parameter with step_frame_id parameter.
	(load_infrun_state): Ditto.
	* Makefile.in (gdbthread_h, inferior_h): Add $(frame_h).
	* infcmd.c (step_frame_id, step_1, step_once): Update.
	* thread.c (load_infrun_state, save_infrun_state): Update.
	* infrun.c (clear_proceed_status, save_inferior_status): Update.
	(handle_inferior_event, step_over_function): Update.
	(normal_stop, context_switch, restore_inferior_status): Update.
	(struct inferior_status): Replace step_frame_address with
	step_frame_id.
@
text
@d265 3
@


1.24
log
@2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* stack.c (selected_frame, select_frame): Move from here ...
	* frame.c (selected_frame, select_frame): ... to here.  Include
	"language.h".
	* Makefile.in (frame.o): Update dependencies.
	* frame.c (get_selected_frame): New function.
	* frame.h (get_selected_frame): Declare.
	(deprecated_selected_frame): Rename selected_frame.
	* ada-lang.c, ada-tasks.c, breakpoint.c, corelow.c: Update.
	* eval.c, f-valprint.c, findvar.c, frame.c, frame.h: Update.
	* h8300-tdep.c, h8500-tdep.c, hppa-tdep.c, infcmd.c: Update.
	* inflow.c, infrun.c, macroscope.c, mips-tdep.c: Update.
	* mn10300-tdep.c, ocd.c, regcache.h, remote-e7000.c: Update.
	* remote-mips.c, remote-rdp.c, sh-tdep.c, sparc-tdep.c: Update.
	* stack.c, thread.c, tracepoint.c, valops.c, varobj.c: Update.
	* z8k-tdep.c, cli/cli-cmds.c: Update.

Index: mi/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* mi/mi-cmd-stack.c, mi/mi-main.c: Update to use
	deprecated_selected_frame.

Index: tui/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* tui/tui-hooks.c: Update to use deprecated_selected_frame.
	* tui/tui.c, tui/tuiDisassem.c, tui/tuiRegs.c: Ditto.
	* tui/tuiSource.c, tui/tuiSourceWin.c, tui/tuiWin.c: Ditto.
@
text
@d299 1
a299 1
		   CORE_ADDR *step_frame_address, 
d325 1
a325 1
  *step_frame_address = tp->step_frame_address;
d348 1
a348 1
		   CORE_ADDR step_frame_address, 
d374 1
a374 1
  tp->step_frame_address = step_frame_address;
@


1.23
log
@Fri Aug  2 15:53:50 2002  Andrew Cagney  <cagney@@redhat.com>

* gdbarch.sh: Include "gdb_string.h".
* gdbarch.c: Regenerate.

* regcache.c: Include "gdb_string.h".
* ax-general.c: Ditto.
* varobj.c: Ditto.
* std-regs.c: Ditto.
* fbsd-proc.c: Ditto.
* thread.c: Ditto.

* Makefile.in (regcache.o): Update dependencies.
(thread.o, gdbarch.o): Ditto.
(ax-general.o, gdbarch.o): Ditto.
(varobj.o, std-regs.o): Ditto.
(fbsd-proc.o): Specify dependencies.
@
text
@d425 1
a425 1
  int saved_frame_level = frame_relative_level (selected_frame);
d430 1
a430 1
     selected_frame.  */
d456 2
a457 2
      if (selected_frame)
	print_only_stack_frame (selected_frame, -1, 0);
d471 1
a471 1
  cur_frame = find_relative_frame (selected_frame, &counter);
d476 1
a476 1
      print_stack_frame (selected_frame, -1, 0);
d717 2
a718 1
  print_stack_frame (selected_frame, frame_relative_level (selected_frame), 1);
@


1.23.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d4 1
a4 1
   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d258 3
a260 2
static int
do_captured_list_thread_ids (struct ui_out *uiout, void *arg)
a263 1
  struct cleanup *cleanup_chain;
d265 1
a265 4
  prune_threads ();
  target_find_new_threads ();

  cleanup_chain = make_cleanup_ui_out_tuple_begin_end (uiout, "thread-ids");
d273 1
a273 1
  do_cleanups (cleanup_chain);
d290 4
a293 2
load_infrun_state (ptid_t ptid,
		   CORE_ADDR *prev_pc,
d297 1
a297 1
		   CORE_ADDR *step_range_start,
d299 1
a299 1
		   struct frame_id *step_frame_id,
d301 1
a301 1
		   int *another_trap,
d305 3
a307 2
		   int *current_line,
		   struct symtab **current_symtab, CORE_ADDR *step_sp)
d318 2
d325 1
a325 1
  *step_frame_id = tp->step_frame_id;
d328 2
a329 4
  *stepping_through_solib_after_catch =
    tp->stepping_through_solib_after_catch;
  *stepping_through_solib_catchpoints =
    tp->stepping_through_solib_catchpoints;
d339 4
a342 2
save_infrun_state (ptid_t ptid,
		   CORE_ADDR prev_pc,
d346 1
a346 1
		   CORE_ADDR step_range_start,
d348 1
a348 1
		   const struct frame_id *step_frame_id,
d350 1
a350 1
		   int another_trap,
d353 1
a353 1
		   int stepping_through_sigtramp,
d355 2
a356 1
		   struct symtab *current_symtab, CORE_ADDR step_sp)
d367 2
d374 1
a374 1
  tp->step_frame_id = (*step_frame_id);
d425 1
a425 1
  int saved_frame_level = frame_relative_level (get_selected_frame ());
d429 4
a432 4
  /* Check that there really is a frame.  This happens when a simulator
     is connected but not loaded or running, for instance.  */
  if (legacy_frame_p (current_gdbarch) && saved_frame_level < 0)
    error ("No frame.");
d456 4
a459 1
      print_stack_frame (get_selected_frame (), -1, 0);
d471 1
a471 1
  cur_frame = find_relative_frame (get_selected_frame (), &counter);
d476 1
a476 1
      print_stack_frame (get_selected_frame (), -1, 0);
d505 1
a505 1
  if (!ptid_equal (ptid, inferior_ptid))
d570 2
a571 1
			 tp->num, target_tid_to_str (inferior_ptid));
d577 1
a577 1
	strcpy (cmd, saved_cmd);	/* Restore exact command used previously */
d689 2
a690 1
do_captured_thread_select (struct ui_out *uiout, void *tidstr)
d717 1
a717 2
  print_stack_frame (deprecated_selected_frame,
		     frame_relative_level (deprecated_selected_frame), 1);
d722 2
a723 1
gdb_thread_select (struct ui_out *uiout, char *tidstr)
d742 2
a743 1
The new thread ID must be currently known.", &thread_cmd_list, "thread ", 1, &cmdlist);
d750 2
a751 1
	   "Apply a command to all threads.", &thread_apply_list);
@


1.23.8.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@a264 3
  prune_threads ();
  target_find_new_threads ();

d299 1
a299 1
		   struct frame_id *step_frame_id, 
d325 1
a325 1
  *step_frame_id = tp->step_frame_id;
d348 1
a348 1
		   const struct frame_id *step_frame_id, 
d374 1
a374 1
  tp->step_frame_id = (*step_frame_id);
d425 1
a425 1
  int saved_frame_level = frame_relative_level (deprecated_selected_frame);
d430 1
a430 1
     deprecated_selected_frame.  */
d456 2
a457 2
      if (deprecated_selected_frame)
	print_only_stack_frame (deprecated_selected_frame, -1, 0);
d471 1
a471 1
  cur_frame = find_relative_frame (deprecated_selected_frame, &counter);
d476 1
a476 1
      print_stack_frame (deprecated_selected_frame, -1, 0);
d717 1
a717 2
  print_stack_frame (deprecated_selected_frame,
		     frame_relative_level (deprecated_selected_frame), 1);
@


1.23.8.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d4 1
a4 1
   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a263 1
  struct cleanup *cleanup_chain;
d268 1
a268 1
  cleanup_chain = make_cleanup_ui_out_tuple_begin_end (uiout, "thread-ids");
d276 1
a276 1
  do_cleanups (cleanup_chain);
d460 1
a460 1
	print_stack_frame (deprecated_selected_frame, -1, 0);
@


1.23.8.3
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d258 3
a260 2
static int
do_captured_list_thread_ids (struct ui_out *uiout, void *arg)
d294 4
a297 3
load_infrun_state (ptid_t ptid,
		   CORE_ADDR *prev_pc,
		   char **prev_func_name,
d301 1
a301 1
		   CORE_ADDR *step_range_start,
d303 1
a303 1
		   struct frame_id *step_frame_id,
d305 1
a305 1
		   int *another_trap,
d309 3
a311 2
		   int *current_line,
		   struct symtab **current_symtab, CORE_ADDR *step_sp)
d322 1
d332 2
a333 4
  *stepping_through_solib_after_catch =
    tp->stepping_through_solib_after_catch;
  *stepping_through_solib_catchpoints =
    tp->stepping_through_solib_catchpoints;
d343 4
a346 3
save_infrun_state (ptid_t ptid,
		   CORE_ADDR prev_pc,
		   char *prev_func_name,
d350 1
a350 1
		   CORE_ADDR step_range_start,
d352 1
a352 1
		   const struct frame_id *step_frame_id,
d354 1
a354 1
		   int another_trap,
d357 1
a357 1
		   int stepping_through_sigtramp,
d359 2
a360 1
		   struct symtab *current_symtab, CORE_ADDR step_sp)
d371 1
d509 1
a509 1
  if (!ptid_equal (ptid, inferior_ptid))
d574 2
a575 1
			 tp->num, target_tid_to_str (inferior_ptid));
d581 1
a581 1
	strcpy (cmd, saved_cmd);	/* Restore exact command used previously */
d693 2
a694 1
do_captured_thread_select (struct ui_out *uiout, void *tidstr)
d727 2
a728 1
gdb_thread_select (struct ui_out *uiout, char *tidstr)
d747 2
a748 1
The new thread ID must be currently known.", &thread_cmd_list, "thread ", 1, &cmdlist);
d755 2
a756 1
	   "Apply a command to all threads.", &thread_apply_list);
@


1.23.8.4
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d295 1
d319 1
d343 1
d367 1
@


1.23.8.5
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d420 1
a420 1
  int saved_frame_level = frame_relative_level (get_selected_frame ());
d424 4
a427 4
  /* Check that there really is a frame.  This happens when a simulator
     is connected but not loaded or running, for instance.  */
  if (legacy_frame_p (current_gdbarch) && saved_frame_level < 0)
    error ("No frame.");
d451 4
a454 1
      print_stack_frame (get_selected_frame (), -1, 0);
d466 1
a466 1
  cur_frame = find_relative_frame (get_selected_frame (), &counter);
d471 1
a471 1
      print_stack_frame (get_selected_frame (), -1, 0);
@


1.22
log
@* frame.h (select_frame): Delete level parameter.
* stack.c (select_frame): Update.  Use frame_relative_level to
obtain the frame's level.
(select_and_print_frame): Update call.
(select_frame_command): Ditto.
(up_silently_base): Ditto.
(down_silently_base): Ditto.
* ocd.c (ocd_start_remote): Ditto.
* remote-rdp.c (remote_rdp_open): Ditto.
* remote-mips.c (mips_initialize): Ditto.
(common_open): Ditto.
* remote-e7000.c (e7000_start_remote): Ditto.
* m3-nat.c (select_thread): Ditto.
* hppa-tdep.c (child_get_current_exception_event): Ditto.
(child_get_current_exception_event): Ditto.
* varobj.c (varobj_create): Ditto.
(varobj_update): Ditto.
(c_value_of_root): Ditto.
* tracepoint.c (finish_tfind_command): Ditto.
* corelow.c (core_open): Ditto.
* arch-utils.c (generic_prepare_to_proceed): Ditto.
* thread.c (info_threads_command): Ditto.
(switch_to_thread): Ditto.
* infrun.c (normal_stop): Ditto.
(restore_selected_frame): Ditto.
(restore_inferior_status): Ditto.
* breakpoint.c (insert_breakpoints): Ditto.
(watchpoint_check): Ditto.
(bpstat_stop_status): Ditto.
(do_enable_breakpoint): Ditto.
* blockframe.c (flush_cached_frames): Ditto.
(reinit_frame_cache): Ditto.
@
text
@d37 1
@


1.22.6.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@a36 1
#include "gdb_string.h"
@


1.22.6.2
log
@        * thread.c (do_captured_thread_select): Add context-changed
        notification.
        * infrun.c (handle_inferior_event): Remove context-changed
        notification. The stop result already has this information.

        * thread.c (do_captured_list_thread_ids): Use ui_out_list_begin/end
        instead of ui_out_tuple_begin/end.
@
text
@d265 1
a265 1
  ui_out_list_begin (uiout, "thread-ids");
d273 1
a273 1
  ui_out_list_end (uiout);
a692 1
  ptid_t old_ptid;
a696 1
  old_ptid = inferior_ptid;
a717 4

  if (!ptid_equal (old_ptid, inferior_ptid))
    context_changed_event (pid_to_thread_id (inferior_ptid));

@


1.22.6.3
log
@        * gdb-events.sh (context_changed): Rename to selected_thread_changed
        to parallel selected_frame_level_changed.
        * thread.c (do_captured_thread_select): Ditto.
        * gdb-events.c: Regenerate.
        * gdb-events.h: Regenerate.
@
text
@d722 1
a722 1
    selected_thread_changed_event (pid_to_thread_id (inferior_ptid));
@


1.22.6.4
log
@        * thread.c (do_captured_list_thread_ids): Call prune_threads
        and target_find_new_threads.
@
text
@a264 3
  prune_threads ();
  target_find_new_threads ();

@


1.22.6.5
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d268 1
a268 1
  ui_out_tuple_begin (uiout, "thread-ids");
d276 1
a276 1
  ui_out_tuple_end (uiout);
@


1.21
log
@* frame.h (selected_frame_level): Document as deprecated.
(frame_relative_level): Declare.
* stack.c (frame_relative_level): New function.
(selected_frame_level): Document as deprecated.
(select_frame): Do not set the selected_frame_level.

* stack.c (frame_info, record_selected_frame): Update.
(frame_command, current_frame_command): Update.
(up_silently_base, up_command, down_silently_base): Update.
(down_command): Update.
* inflow.c (kill_command): Update.
* tracepoint.c (finish_tfind_command): Update.
* corelow.c (core_open): Update.
* thread.c (info_threads_command): Update.
(do_captured_thread_select): Update.
* infcmd.c (finish_command): Update.
* breakpoint.c (insert_breakpoints, do_enable_breakpoint): Update.
@
text
@d479 1
a479 1
      select_frame (cur_frame, saved_frame_level);
d498 1
a498 1
  select_frame (get_current_frame (), 0);
@


1.20
log
@Remove else clause to #if UI_OUT.
@
text
@d424 1
a424 1
  int saved_frame_level = selected_frame_level;
d716 1
a716 1
  print_stack_frame (selected_frame, selected_frame_level, 1);
@


1.19
log
@Add ui_out parameter to libgdb functions.
@
text
@d2 4
a5 3
   Copyright 1986, 1987, 1988, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2001
   Free Software Foundation, Inc.
a6 1
   
a40 1
#ifdef UI_OUT
a41 1
#endif
d254 1
a254 1
#ifdef UI_OUT
a284 1
#endif
a697 1
#ifdef UI_OUT
a699 5
#else
  if (!tp)
    error ("Thread ID %d not known.  Use the \"info threads\" command to\n\
see the IDs of currently known threads.", num);
#endif
a705 1
#ifdef UI_OUT
a714 10
#else /* UI_OUT */
  printf_filtered ("[Switching to thread %d (%s)]\n",
		   pid_to_thread_id (inferior_ptid),
#if defined(HPUXHPPA)
		   target_tid_to_str (inferior_ptid)
#else
		   target_pid_to_str (inferior_ptid)
#endif
    );
#endif /* UI_OUT */
@


1.18
log
@Move libgdb library functions to gdb.h (new file).
Update everything related to this.
@
text
@d260 2
a261 1
do_captured_list_thread_ids (void *arg)
d282 1
a282 1
gdb_list_thread_ids (/* output object */)
d284 2
a285 2
  return catch_errors (do_captured_list_thread_ids, NULL,
		       NULL, RETURN_MASK_ALL);
d687 1
a687 1
  gdb_thread_select (tidstr);
d691 2
a692 1
do_captured_thread_select (void *tidstr)
d741 2
a742 1
gdb_thread_select (char *tidstr)
d744 2
a745 2
  return catch_errors (do_captured_thread_select, tidstr,
		       NULL, RETURN_MASK_ALL);
@


1.17
log
@2001-06-13  Michael Snyder  <msnyder@@redhat.com>

        * gdbthread.h (struct thread_info): Add new fields:
        current_line, current_symtab, step_sp, for saved infrun state.
        * thread.c (save_infrun_state, load_infrun_state): Save and
        restore current_line, current_symtab, and step_sp.
        (add_thread): Rather than adding assignments to initialize
	the new fields, just use memset (tp, 0, sizeof (*tp).
	This way future new fields will not be overlooked.
        * infrun.c (handle_inferior_event): Save and restore save_sp,
        current_line, and current_symtab when switching threads.
@
text
@d36 1
@


1.16
log
@2001-06-01  Michael Snyder  <msnyder@@redhat.com>

	* thread.c (delete_step_resume_breakpoint): New function.
	Maintain internal consistency of the thread list while deleting
	a step_resume_breakpoint.
	* gdbthread.h (delete_step_resume_breakpoint): Export.
	* breakpoint.c (bpstat_find_step_resume_breakpoint):
	Make thread-aware: don't return a step_resume_breakpoint
	for the wrong thread.
	* infrun.c (wait_for_inferior): Call delete_step_resume_breakpoint
	instead of delete_breakpoint_current_contents.
	(fetch_inferior_event): Ditto.
	(handle_inferior_event): Call delete_step_resume_breakpoint
	instead of delete_breakpoint.
@
text
@d127 2
a128 2
  tp = (struct thread_info *) xmalloc (sizeof (struct thread_info));

a130 14
  tp->prev_pc = 0;
  tp->prev_func_start = 0;
  tp->prev_func_name = NULL;
  tp->step_range_start = 0;
  tp->step_range_end = 0;
  tp->step_frame_address = 0;
  tp->step_resume_breakpoint = 0;
  tp->through_sigtramp_breakpoint = 0;
  tp->handling_longjmp = 0;
  tp->trap_expected = 0;
  tp->another_trap = 0;
  tp->stepping_through_solib_after_catch = 0;
  tp->stepping_through_solib_catchpoints = NULL;
  tp->stepping_through_sigtramp = 0;
a131 1
  tp->private = NULL;
d290 5
a294 2
load_infrun_state (ptid_t ptid, CORE_ADDR *prev_pc, CORE_ADDR *prev_func_start,
		   char **prev_func_name, int *trap_expected,
d297 6
a302 3
		   CORE_ADDR *step_range_start, CORE_ADDR *step_range_end,
		   CORE_ADDR *step_frame_address, int *handling_longjmp,
		   int *another_trap, int *stepping_through_solib_after_catch,
d304 4
a307 1
		   int *stepping_through_sigtramp)
d320 1
d322 1
a325 1
  *through_sigtramp_breakpoint = tp->through_sigtramp_breakpoint;
a326 1
  *trap_expected = tp->trap_expected;
d331 3
d339 5
a343 2
save_infrun_state (ptid_t ptid, CORE_ADDR prev_pc, CORE_ADDR prev_func_start,
		   char *prev_func_name, int trap_expected,
d346 6
a351 3
		   CORE_ADDR step_range_start, CORE_ADDR step_range_end,
		   CORE_ADDR step_frame_address, int handling_longjmp,
		   int another_trap, int stepping_through_solib_after_catch,
d353 4
a356 1
		   int stepping_through_sigtramp)
d369 1
d371 1
a374 1
  tp->through_sigtramp_breakpoint = through_sigtramp_breakpoint;
a375 1
  tp->trap_expected = trap_expected;
d380 3
@


1.15
log
@* thread.c (do_captured_list_thread_ids): Use ui_out_tuple_begin
and ui_out_tuple_end instead of ui_out_list_begin and
ui_out_list_end.
@
text
@d68 17
@


1.14
log
@Phase 1 of the ptid_t changes.
@
text
@d262 1
a262 1
  ui_out_list_begin (uiout, "thread-ids");
d270 1
a270 1
  ui_out_list_end (uiout);
@


1.13
log
@2001-04-17  Eirik Fuller <eirik@@netapp.com>

	* thread.c (do_captured_thread_select): Allow the argument to the
	thread command to be an expression rather than a literal integer.
@
text
@d64 2
a65 2
static void restore_current_thread (int);
static void switch_to_thread (int pid);
d106 1
a106 1
add_thread (int pid)
d112 1
a112 1
  tp->pid = pid;
d135 1
a135 1
delete_thread (int pid)
d142 1
a142 1
    if (tp->pid == pid)
d168 1
a168 1
/* Find a thread_info by matching 'pid'.  */
d170 1
a170 1
find_thread_pid (int pid)
d175 1
a175 1
    if (tp->pid == pid)
d221 1
a221 1
pid_to_thread_id (int pid)
d226 1
a226 1
    if (tp->pid == pid)
d232 1
a232 1
int
d237 1
a237 1
    return thread->pid;
d239 1
a239 1
    return -1;
d243 1
a243 1
in_thread_list (int pid)
d248 1
a248 1
    if (tp->pid == pid)
d288 1
a288 1
load_infrun_state (int pid, CORE_ADDR *prev_pc, CORE_ADDR *prev_func_start,
d302 1
a302 1
  tp = find_thread_id (pid_to_thread_id (pid));
d325 1
a325 1
save_infrun_state (int pid, CORE_ADDR prev_pc, CORE_ADDR prev_func_start,
d339 1
a339 1
  tp = find_thread_id (pid_to_thread_id (pid));
d363 1
a363 1
  if (tp->pid == -1)
d365 1
a365 1
  if (!target_thread_alive (tp->pid))
d367 1
a367 1
      tp->pid = -1;		/* Mark it as dead */
d382 1
a382 1
	delete_thread (tp->pid);
d397 1
a397 1
  int current_pid;
d410 1
a410 1
  current_pid = inferior_pid;
d413 1
a413 1
      if (tp->pid == current_pid)
d419 1
a419 1
      printf_filtered ("%d %s", tp->num, target_tid_to_str (tp->pid));
d421 1
a421 1
      printf_filtered ("%d %s", tp->num, target_pid_to_str (tp->pid));
d429 1
a429 1
      switch_to_thread (tp->pid);
d436 1
a436 1
  switch_to_thread (current_pid);
d464 1
a464 1
switch_to_thread (int pid)
d466 1
a466 1
  if (pid == inferior_pid)
d469 1
a469 1
  inferior_pid = pid;
d477 1
a477 1
restore_current_thread (int pid)
d479 1
a479 1
  if (pid != inferior_pid)
d481 1
a481 1
      switch_to_thread (pid);
d488 1
a488 1
  int inferior_pid;
d495 1
a495 1
  restore_current_thread (old->inferior_pid);
d500 1
a500 1
make_cleanup_restore_current_thread (int inferior_pid)
d504 1
a504 1
  old->inferior_pid = inferior_pid;
d528 1
a528 1
  old_chain = make_cleanup_restore_current_thread (inferior_pid);
d541 1
a541 1
	switch_to_thread (tp->pid);
d545 1
a545 1
			 target_tid_to_str (inferior_pid));
d548 1
a548 1
			 target_pid_to_str (inferior_pid));
d575 1
a575 1
  old_chain = make_cleanup_restore_current_thread (inferior_pid);
d618 1
a618 1
	      switch_to_thread (tp->pid);
d621 1
a621 1
			       target_tid_to_str (inferior_pid));
d624 1
a624 1
			       target_pid_to_str (inferior_pid));
d647 1
a647 1
			 pid_to_thread_id (inferior_pid),
d649 1
a649 1
			 target_tid_to_str (inferior_pid)
d651 1
a651 1
			 target_pid_to_str (inferior_pid)
d684 1
a684 1
  switch_to_thread (tp->pid);
d688 1
a688 1
  ui_out_field_int (uiout, "new-thread-id", pid_to_thread_id (inferior_pid));
d691 1
a691 1
  ui_out_text (uiout, target_tid_to_str (inferior_pid));
d693 1
a693 1
  ui_out_text (uiout, target_pid_to_str (inferior_pid));
d698 1
a698 1
		   pid_to_thread_id (inferior_pid),
d700 1
a700 1
		   target_tid_to_str (inferior_pid)
d702 1
a702 1
		   target_pid_to_str (inferior_pid)
@


1.12
log
@Update/correct copyright notices.
@
text
@d668 1
a668 1
  num = atoi ((char *)tidstr);
@


1.11
log
@Create new file regcache.h.  Update all uses.
@
text
@d2 3
a4 2
   Copyright 1986, 1987, 1988, 1993, 1998, 1999, 2000, 2001

d6 1
a6 1
   Free Software Foundation, Inc.
@


1.10
log
@2001-01-24  Jeff Holcomb  <jeffh@@redhat.com>

        * remote-udi.c (udi_open): Change strdup to xstrdup.
        * thread.c (thread_apply_all_command): Change strdup to xstrdup.
        Update copyright message.
        * varobj.c (delete_variable_1): Likewise.

        * gdb_string.h: Remove declaration of strdup.  Update copyright
        message.
        * config/xm-mpw.h: Likewise.
        * config/i386/xm-i386mach.h: Likewise.
        * config/m68k/xm-apollo68b.h: Likewise.
        * config/m68k/xm-hp300bsd.h: Likewise.
        * config/rs6000/xm-rs6000.h: Likewise.
        * config/vax/xm-vaxult.h: Remove declaration of strdup.
        * config/vax/xm-vaxult2.h: Likewise.
@
text
@d34 1
@


1.9
log
@Replace free() with xfree().
@
text
@d2 1
a2 1
   Copyright 1986, 1987, 1988, 1993, 1998, 1999, 2000
d534 1
a534 1
  saved_cmd = strdup (cmd);
d577 1
a577 1
  saved_cmd = strdup (cmd);
@


1.8
log
@* thread.c (thread_apply_all_command): Save the command before executing it
because it may be modified.  Restore the saved command so that the same command
is executed on next thread.
(thread_apply_command): Same correction.
@
text
@d77 1
a77 1
    free (tp->private);
d79 1
a79 1
  free (tp);
d494 1
a494 1
  free (old);
d535 1
a535 1
  saved_cmd_cleanup_chain = make_cleanup (free, (void *) saved_cmd);
d578 1
a578 1
  saved_cmd_cleanup_chain = make_cleanup (free, (void *) saved_cmd);
@


1.7
log
@Protoization.
@
text
@d520 2
d532 4
d549 1
d552 1
d562 2
d575 4
d625 1
d630 1
@


1.6
log
@Protoization.
@
text
@d194 2
a195 3
iterate_over_threads (callback, data)
     int (*callback) ();
     void *data;
@


1.5
log
@2000-07-21  Michael Snyder  <msnyder@@cleaver.cygnus.com>

        * thread.c (thread_apply_all_command): Update thread list first.
@
text
@d83 1
a83 1
init_thread_list ()
d104 1
a104 2
add_thread (pid)
     int pid;
d133 1
a133 2
delete_thread (pid)
     int pid;
d155 1
a155 2
find_thread_id (num)
     int num;
d168 1
a168 2
find_thread_pid (pid)
     int pid;
d208 1
a208 2
valid_thread_id (num)
     int num;
d220 1
a220 2
pid_to_thread_id (pid)
     int pid;
d232 1
a232 2
thread_id_to_pid (num)
     int num;
d242 1
a242 2
in_thread_list (pid)
     int pid;
d287 9
a295 23
load_infrun_state (pid, prev_pc, prev_func_start, prev_func_name,
		   trap_expected, step_resume_breakpoint,
		   through_sigtramp_breakpoint, step_range_start,
		   step_range_end, step_frame_address,
		   handling_longjmp, another_trap,
		   stepping_through_solib_after_catch,
		   stepping_through_solib_catchpoints,
		   stepping_through_sigtramp)
     int pid;
     CORE_ADDR *prev_pc;
     CORE_ADDR *prev_func_start;
     char **prev_func_name;
     int *trap_expected;
     struct breakpoint **step_resume_breakpoint;
     struct breakpoint **through_sigtramp_breakpoint;
     CORE_ADDR *step_range_start;
     CORE_ADDR *step_range_end;
     CORE_ADDR *step_frame_address;
     int *handling_longjmp;
     int *another_trap;
     int *stepping_through_solib_after_catch;
     bpstat *stepping_through_solib_catchpoints;
     int *stepping_through_sigtramp;
d324 9
a332 23
save_infrun_state (pid, prev_pc, prev_func_start, prev_func_name,
		   trap_expected, step_resume_breakpoint,
		   through_sigtramp_breakpoint, step_range_start,
		   step_range_end, step_frame_address,
		   handling_longjmp, another_trap,
		   stepping_through_solib_after_catch,
		   stepping_through_solib_catchpoints,
		   stepping_through_sigtramp)
     int pid;
     CORE_ADDR prev_pc;
     CORE_ADDR prev_func_start;
     char *prev_func_name;
     int trap_expected;
     struct breakpoint *step_resume_breakpoint;
     struct breakpoint *through_sigtramp_breakpoint;
     CORE_ADDR step_range_start;
     CORE_ADDR step_range_end;
     CORE_ADDR step_frame_address;
     int handling_longjmp;
     int another_trap;
     int stepping_through_solib_after_catch;
     bpstat stepping_through_solib_catchpoints;
     int stepping_through_sigtramp;
d360 1
a360 2
thread_alive (tp)
     struct thread_info *tp;
d373 1
a373 1
prune_threads ()
d393 1
a393 3
info_threads_command (arg, from_tty)
     char *arg;
     int from_tty;
d463 1
a463 2
switch_to_thread (pid)
     int pid;
d476 1
a476 2
restore_current_thread (pid)
     int pid;
d517 1
a517 3
thread_apply_all_command (cmd, from_tty)
     char *cmd;
     int from_tty;
d550 1
a550 3
thread_apply_command (tidlist, from_tty)
     char *tidlist;
     int from_tty;
d623 1
a623 3
thread_command (tidstr, from_tty)
     char *tidstr;
     int from_tty;
d705 1
a705 1
_initialize_thread ()
@


1.4
log
@	* thread.c (free_thread): New function.
	(init_thread_list): Always zero highest_thread_num.  Call
	free_thread() instead of free().
	(delete_thread): Move thread cleanup code to free_thread().
@
text
@d570 4
@


1.3
log
@Purge last remaining make_cleanup_func.
@
text
@d66 16
d87 1
d94 1
a94 1
      free (tp);
a97 1
  highest_thread_num = 0;
d153 1
a153 13
  /* NOTE: this will take care of any left-over step_resume breakpoints,
     but not any user-specified thread-specific breakpoints. */
  if (tp->step_resume_breakpoint)
    delete_breakpoint (tp->step_resume_breakpoint);

  /* FIXME: do I ever need to call the back-end to give it a
     chance at this private data before deleting the thread?  */
  if (tp->private)
    free (tp->private);

  free (tp);

  return;
@


1.2
log
@PARAMS removal.
@
text
@d522 22
d564 1
a564 2
  old_chain = make_cleanup ((make_cleanup_func) restore_current_thread,
			    (void *) inferior_pid);
d580 2
d601 1
a601 2
  old_chain = make_cleanup ((make_cleanup_func) restore_current_thread,
			    (void *) inferior_pid);
d652 2
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1986, 1987, 1988, 1993, 1998
d7 1
a7 1
This file is part of GDB.
d9 14
a22 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d38 3
d42 1
a42 35
/*#include "lynxos-core.h"*/

struct thread_info
{
  struct thread_info *next;
  int pid;			/* Actual process id */
  int num;			/* Convenient handle */
  CORE_ADDR prev_pc;		/* State from wait_for_inferior */
  CORE_ADDR prev_func_start;
  char *prev_func_name;
  struct breakpoint *step_resume_breakpoint;
  struct breakpoint *through_sigtramp_breakpoint;
  CORE_ADDR step_range_start;
  CORE_ADDR step_range_end;
  CORE_ADDR step_frame_address;
  int trap_expected;
  int handling_longjmp;
  int another_trap;

  /* This is set TRUE when a catchpoint of a shared library event
     triggers.  Since we don't wish to leave the inferior in the
     solib hook when we report the event, we step the inferior
     back to user code before stopping and reporting the event.
     */
  int  stepping_through_solib_after_catch;

  /* When stepping_through_solib_after_catch is TRUE, this is a
     list of the catchpoints that should be reported as triggering
     when we finally do stop stepping.
     */
  bpstat  stepping_through_solib_catchpoints;

  /* This is set to TRUE when this thread is in a signal handler
     trampoline and we're single-stepping through it */
  int stepping_through_sigtramp;
d44 1
a44 1
};
d48 1
a48 1
void _initialize_thread PARAMS ((void));
a51 4
#if !defined(FIND_NEW_THREADS)
#define FIND_NEW_THREADS target_find_new_threads
#endif  
			   
d55 1
a55 62
static struct thread_info * find_thread_id PARAMS ((int num));

static void thread_command PARAMS ((char * tidstr, int from_tty));
static void thread_apply_all_command PARAMS ((char *, int));
static int  thread_alive PARAMS ((struct thread_info *));
static void info_threads_command PARAMS ((char *, int));
static void thread_apply_command PARAMS ((char *, int));
static void restore_current_thread PARAMS ((int));
static void switch_to_thread PARAMS ((int pid));
static void prune_threads PARAMS ((void));

/* If the host has threads, the host machine definition may set this
   macro. But, for remote thread debugging, it gets more complex and
   setting macros does not bind to the various target dependent
   methods well. So, we use the vector target_thread_functions */

static struct target_thread_vector *target_thread_functions;

int
target_find_new_threads ()
{
  int retval = 0;
  if (target_thread_functions &&
      target_thread_functions->find_new_threads)
    retval = (*(target_thread_functions->find_new_threads)) ();
  return retval;		/* no support */
}


int
target_get_thread_info PARAMS ((gdb_threadref * ref,
				int selection,		/* FIXME: Selection */
				struct gdb_ext_thread_info * info));

int
target_get_thread_info (ref, selection, info)

     gdb_threadref *ref;
     int selection;
    /* FIXME: Selection */
     struct gdb_ext_thread_info *info;

{
  int retval = 0;
  if (target_thread_functions
      && target_thread_functions->get_thread_info)
    retval = (*(target_thread_functions->get_thread_info)) (ref, selection, info);
  return retval;
}


/* It is possible that these bind and unbinf functions implement a
   stack the interface allows it, but its not implemented that way
 */


void
bind_target_thread_vector (vec)
     struct target_thread_vector *vec;
{
  target_thread_functions = vec;
}
d57 8
a64 8
struct target_thread_vector *
unbind_target_thread_vector ()
{
  struct target_thread_vector *retval;
  retval = target_thread_functions;
  target_thread_functions = 0;
  return retval;
}				/* unbind_target_thread-vector */
d84 4
a87 1
void
d102 1
a102 1
  tp->step_frame_address =0;
d112 1
d114 1
d137 10
d154 1
a154 1
    int num;
d165 42
d209 1
a209 1
    int num;
d222 1
a222 1
    int pid;
d235 1
a235 1
    int num;
d246 1
a246 1
    int pid;
d256 31
d290 9
a298 8
void load_infrun_state (pid, prev_pc, prev_func_start, prev_func_name,
			trap_expected, step_resume_breakpoint,
			through_sigtramp_breakpoint, step_range_start,
			step_range_end, step_frame_address,
			handling_longjmp, another_trap,
			stepping_through_solib_after_catch,
			stepping_through_solib_catchpoints,
			stepping_through_sigtramp)
d311 3
a313 3
     int *  stepping_through_solib_after_catch;
     bpstat *  stepping_through_solib_catchpoints;
     int *  stepping_through_sigtramp;
d341 9
a349 8
void save_infrun_state (pid, prev_pc, prev_func_start, prev_func_name,
			trap_expected, step_resume_breakpoint,
			through_sigtramp_breakpoint, step_range_start,
			step_range_end, step_frame_address,
			handling_longjmp, another_trap,
			stepping_through_solib_after_catch,
			stepping_through_solib_catchpoints,
			stepping_through_sigtramp)
d362 3
a364 3
     int  stepping_through_solib_after_catch;
     bpstat  stepping_through_solib_catchpoints;
     int  stepping_through_sigtramp;
d397 1
a397 1
  if (! target_thread_alive (tp->pid))
d399 1
a399 1
      tp->pid = -1;	/* Mark it as dead */
d408 1
a408 1
  struct thread_info *tp, *tpprev, *next;
a409 1
  tpprev = 0;
d414 1
a414 9
	{
	  if (tpprev)
	    tpprev->next = next;
	  else
	    thread_list  = next;
	  free (tp);
	}
      else
	tpprev = tp;
d419 1
a419 1
 *
d431 5
a435 4
  int                current_pid;
  struct frame_info  *cur_frame;
  int                saved_frame_level = selected_frame_level;
  int                counter;
d439 2
a440 1
  if (!target_has_stack) error ("No stack.");
d443 1
a443 3
#if defined(FIND_NEW_THREADS)
  FIND_NEW_THREADS ();
#endif
d453 1
a453 1
      printf_filtered ("%d %s  ", tp->num, target_tid_to_str (tp->pid));
d455 1
a455 1
      printf_filtered ("%d %s  ", tp->num, target_pid_to_str (tp->pid));
d457 6
d478 2
a479 2
  counter   = saved_frame_level;
  cur_frame = find_relative_frame(selected_frame, &counter);
d488 1
a488 1
      select_frame(cur_frame, saved_frame_level);
d492 1
a492 1
  show_stack_frame(cur_frame);
d507 1
a507 1
  stop_pc = read_pc();
d515 1
a515 1
  if (pid != inferior_pid) 
d518 1
a518 1
      print_stack_frame( get_current_frame(), 0, -1);
d526 4
a529 4
	thread apply 1 2 7 4 backtrace	Apply backtrace cmd to threads 1,2,7,4
	thread apply 2-7 9 p foo(1)	Apply p foo(1) cmd to threads 2->7 & 9
	thread apply all p x/i $pc	Apply x/i $pc cmd to all threads
*/
d542 1
a542 1
  old_chain = make_cleanup ((make_cleanup_func) restore_current_thread, 
d573 1
a573 1
  for (cmd = tidlist; *cmd != '\000' && !isalpha(*cmd); cmd++);
d578 1
a578 1
  old_chain = make_cleanup ((make_cleanup_func) restore_current_thread, 
d596 1
a596 1
	  tidlist++;	/* Skip the - */
a639 3
  int num;
  struct thread_info *tp;

d645 1
a645 1
			 pid_to_thread_id(inferior_pid),
d647 1
a647 1
			 target_tid_to_str(inferior_pid)
d649 1
a649 1
			 target_pid_to_str(inferior_pid)
d651 1
a651 1
			 );
d656 11
a666 1
  num = atoi (tidstr);
d670 4
d677 1
d684 11
a694 3
  if (context_hook)
    context_hook (num);

d702 3
a704 1
		   );
d706 8
a722 1
  extern struct cmd_list_element *cmdlist;
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d107 1
a107 3
static int target_find_new_threads PARAMS ((void));

static int
d701 1
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d83 1
a83 1
#define FIND_NEW_THREADS local_find_new_threads
d107 2
d110 1
a110 1
local_find_new_threads ()
d457 3
a459 1
  target_find_new_threads ();
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@a98 1
static int local_find_new_threads PARAMS ((void));
@


1.1.1.5
log
@import gdb-1999-06-07 snapshot
@
text
@d82 4
d99 62
@


1.1.1.6
log
@import gdb-1999-07-07 post reformat
@
text
@d7 1
a7 1
   This file is part of GDB.
d9 13
a21 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d38 1
a38 1
/*#include "lynxos-core.h" */
d41 20
a60 20
  {
    struct thread_info *next;
    int pid;			/* Actual process id */
    int num;			/* Convenient handle */
    CORE_ADDR prev_pc;		/* State from wait_for_inferior */
    CORE_ADDR prev_func_start;
    char *prev_func_name;
    struct breakpoint *step_resume_breakpoint;
    struct breakpoint *through_sigtramp_breakpoint;
    CORE_ADDR step_range_start;
    CORE_ADDR step_range_end;
    CORE_ADDR step_frame_address;
    int trap_expected;
    int handling_longjmp;
    int another_trap;

    /* This is set TRUE when a catchpoint of a shared library event
       triggers.  Since we don't wish to leave the inferior in the
       solib hook when we report the event, we step the inferior
       back to user code before stopping and reporting the event.
d62 1
a62 1
    int stepping_through_solib_after_catch;
d64 3
a66 3
    /* When stepping_through_solib_after_catch is TRUE, this is a
       list of the catchpoints that should be reported as triggering
       when we finally do stop stepping.
d68 1
a68 1
    bpstat stepping_through_solib_catchpoints;
d70 3
a72 3
    /* This is set to TRUE when this thread is in a signal handler
       trampoline and we're single-stepping through it */
    int stepping_through_sigtramp;
d74 1
a74 1
  };
d85 1
a85 1
static struct thread_info *find_thread_id PARAMS ((int num));
d87 1
a87 1
static void thread_command PARAMS ((char *tidstr, int from_tty));
d89 1
a89 1
static int thread_alive PARAMS ((struct thread_info *));
d129 1
a129 1
  tp->step_frame_address = 0;
d169 1
a169 1
     int num;
d182 1
a182 1
     int num;
d195 1
a195 1
     int pid;
d208 1
a208 1
     int num;
d219 1
a219 1
     int pid;
d232 8
a239 9
void
load_infrun_state (pid, prev_pc, prev_func_start, prev_func_name,
		   trap_expected, step_resume_breakpoint,
		   through_sigtramp_breakpoint, step_range_start,
		   step_range_end, step_frame_address,
		   handling_longjmp, another_trap,
		   stepping_through_solib_after_catch,
		   stepping_through_solib_catchpoints,
		   stepping_through_sigtramp)
d252 3
a254 3
     int *stepping_through_solib_after_catch;
     bpstat *stepping_through_solib_catchpoints;
     int *stepping_through_sigtramp;
d282 8
a289 9
void
save_infrun_state (pid, prev_pc, prev_func_start, prev_func_name,
		   trap_expected, step_resume_breakpoint,
		   through_sigtramp_breakpoint, step_range_start,
		   step_range_end, step_frame_address,
		   handling_longjmp, another_trap,
		   stepping_through_solib_after_catch,
		   stepping_through_solib_catchpoints,
		   stepping_through_sigtramp)
d302 3
a304 3
     int stepping_through_solib_after_catch;
     bpstat stepping_through_solib_catchpoints;
     int stepping_through_sigtramp;
d337 1
a337 1
  if (!target_thread_alive (tp->pid))
d339 1
a339 1
      tp->pid = -1;		/* Mark it as dead */
d359 1
a359 1
	    thread_list = next;
d368 1
a368 1

d380 4
a383 4
  int current_pid;
  struct frame_info *cur_frame;
  int saved_frame_level = selected_frame_level;
  int counter;
d387 1
a387 2
  if (!target_has_stack)
    error ("No stack.");
d419 2
a420 2
  counter = saved_frame_level;
  cur_frame = find_relative_frame (selected_frame, &counter);
d429 1
a429 1
      select_frame (cur_frame, saved_frame_level);
d433 1
a433 1
  show_stack_frame (cur_frame);
d448 1
a448 1
  stop_pc = read_pc ();
d456 1
a456 1
  if (pid != inferior_pid)
d459 1
a459 1
      print_stack_frame (get_current_frame (), 0, -1);
d467 4
a470 4
   thread apply 1 2 7 4 backtrace       Apply backtrace cmd to threads 1,2,7,4
   thread apply 2-7 9 p foo(1)  Apply p foo(1) cmd to threads 2->7 & 9
   thread apply all p x/i $pc   Apply x/i $pc cmd to all threads
 */
d483 1
a483 1
  old_chain = make_cleanup ((make_cleanup_func) restore_current_thread,
d514 1
a514 1
  for (cmd = tidlist; *cmd != '\000' && !isalpha (*cmd); cmd++);
d519 1
a519 1
  old_chain = make_cleanup ((make_cleanup_func) restore_current_thread,
d537 1
a537 1
	  tidlist++;		/* Skip the - */
d589 1
a589 1
			 pid_to_thread_id (inferior_pid),
d591 1
a591 1
			 target_tid_to_str (inferior_pid)
d593 1
a593 1
			 target_pid_to_str (inferior_pid)
d595 1
a595 1
	  );
d623 1
a623 1
    );
@


1.1.1.7
log
@import gdb-1999-08-23 snapshot
@
text
@a162 5
  /* NOTE: this will take care of any left-over step_resume breakpoints,
     but not any user-specified thread-specific breakpoints. */
  if (tp->step_resume_breakpoint)
    delete_breakpoint (tp->step_resume_breakpoint);

d353 1
d358 9
a366 1
	delete_thread (tp->pid);
@


1.1.1.8
log
@import gdb-1999-09-08 snapshot
@
text
@d356 1
a356 1
  struct thread_info *tp, *next;
@


1.1.1.9
log
@import gdb-2000-01-10 snapshot
@
text
@d2 1
a2 1
   Copyright 1986, 1987, 1988, 1993, 1998, 1999, 2000
d41 35
a75 1
/* Definition of struct thread_info exported to gdbthread.h */
d115 1
a115 4
/* add_thread now returns a pointer to the new thread_info, 
   so that back_ends can initialize their private data.  */

struct thread_info *
a140 1
  return tp;
a167 5
  /* FIXME: do I ever need to call the back-end to give it a
     chance at this private data before deleting the thread?  */
  if (tp->private)
    free (tp->private);

a185 42
/* Find a thread_info by matching 'pid'.  */
struct thread_info *
find_thread_pid (pid)
     int pid;
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if (tp->pid == pid)
      return tp;

  return NULL;
}

/*
 * Thread iterator function.
 *
 * Calls a callback function once for each thread, so long as
 * the callback function returns false.  If the callback function
 * returns true, the iteration will end and the current thread
 * will be returned.  This can be useful for implementing a 
 * search for a thread with arbitrary attributes, or for applying
 * some operation to every thread.
 *
 * FIXME: some of the existing functionality, such as 
 * "Thread apply all", might be rewritten using this functionality.
 */

struct thread_info *
iterate_over_threads (callback, data)
     int (*callback) ();
     void *data;
{
  struct thread_info *tp;

  for (tp = thread_list; tp; tp = tp->next)
    if ((*callback) (tp, data))
      return tp;

  return NULL;
}

a382 1
  char *extra_info;
d400 1
a400 1
      printf_filtered ("%d %s", tp->num, target_tid_to_str (tp->pid));
d402 1
a402 1
      printf_filtered ("%d %s", tp->num, target_pid_to_str (tp->pid));
a403 6

      extra_info = target_extra_thread_info (tp);
      if (extra_info)
	printf_filtered (" (%s)", extra_info);
      puts_filtered ("  ");

@


1.1.1.10
log
@import gdb-2000-01-17 snapshot
@
text
@a108 1
  tp->private = NULL;
d605 3
d624 1
a624 11

  gdb_thread_select (tidstr);
}

static int
do_captured_thread_select (void *tidstr)
{
  int num;
  struct thread_info *tp;

  num = atoi ((char *)tidstr);
d637 3
a647 1

a648 8
  return GDB_RC_OK;
}

enum gdb_rc
gdb_thread_select (char *tidstr)
{
  return catch_errors (do_captured_thread_select, tidstr,
		       NULL, RETURN_MASK_ALL);
@


1.1.1.11
log
@import gdb-2000-02-02 snapshot
@
text
@a37 3
#ifdef UI_OUT
#include "ui-out.h"
#endif
a252 31
#ifdef UI_OUT
/* Print a list of thread ids currently known, and the total number of
   threads. To be used from within catch_errors. */
static int 
do_captured_list_thread_ids (void *arg)
{
  struct thread_info *tp;
  int num = 0;

  ui_out_list_begin (uiout, "thread-ids");

  for (tp = thread_list; tp; tp = tp->next)
    {
      num++;
      ui_out_field_int (uiout, "thread-id", tp->num);
    }

  ui_out_list_end (uiout);
  ui_out_field_int (uiout, "number-of-threads", num);
  return GDB_RC_OK;
}

/* Official gdblib interface function to get a list of thread ids and
   the total number. */
enum gdb_rc
gdb_list_thread_ids (/* output object */)
{
  return catch_errors (do_captured_list_thread_ids, NULL,
		       NULL, RETURN_MASK_ALL);
}
#endif
a635 4
#ifdef UI_OUT
  if (!tp)
    error ("Thread ID %d not known.", num);
#else
a638 1
#endif
a644 11
#ifdef UI_OUT
  ui_out_text (uiout, "[Switching to thread ");
  ui_out_field_int (uiout, "new-thread-id", pid_to_thread_id (inferior_pid));
  ui_out_text (uiout, " (");
#if defined(HPUXHPPA)
  ui_out_text (uiout, target_tid_to_str (inferior_pid));
#else
  ui_out_text (uiout, target_pid_to_str (inferior_pid));
#endif
  ui_out_text (uiout, ")]");
#else /* UI_OUT */
a652 1
#endif /* UI_OUT */
@


