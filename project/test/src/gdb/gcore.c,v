head	1.61;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.56
	gdb_7_6-2013-04-26-release:1.56
	gdb_7_6-branch:1.56.0.2
	gdb_7_6-2013-03-12-branchpoint:1.56
	gdb_7_5_1-2012-11-29-release:1.48
	gdb_7_5-2012-08-17-release:1.48
	gdb_7_5-branch:1.48.0.2
	gdb_7_5-2012-07-18-branchpoint:1.48
	gdb_7_4_1-2012-04-26-release:1.45.4.1
	gdb_7_4-2012-01-24-release:1.45.4.1
	gdb_7_4-branch:1.45.0.4
	gdb_7_4-2011-12-13-branchpoint:1.45
	gdb_7_3_1-2011-09-04-release:1.45
	gdb_7_3-2011-07-26-release:1.45
	gdb_7_3-branch:1.45.0.2
	gdb_7_3-2011-04-01-branchpoint:1.45
	gdb_7_2-2010-09-02-release:1.40
	gdb_7_2-branch:1.40.0.2
	gdb_7_2-2010-07-07-branchpoint:1.40
	gdb_7_1-2010-03-18-release:1.38
	gdb_7_1-branch:1.38.0.2
	gdb_7_1-2010-02-18-branchpoint:1.38
	gdb_7_0_1-2009-12-22-release:1.34
	gdb_7_0-2009-10-06-release:1.34
	gdb_7_0-branch:1.34.0.4
	gdb_7_0-2009-09-16-branchpoint:1.34
	arc-sim-20090309:1.27
	msnyder-checkpoint-072509-branch:1.34.0.2
	msnyder-checkpoint-072509-branchpoint:1.34
	arc-insight_6_8-branch:1.27.0.10
	arc-insight_6_8-branchpoint:1.27
	insight_6_8-branch:1.27.0.8
	insight_6_8-branchpoint:1.27
	reverse-20081226-branch:1.30.0.6
	reverse-20081226-branchpoint:1.30
	multiprocess-20081120-branch:1.30.0.4
	multiprocess-20081120-branchpoint:1.30
	reverse-20080930-branch:1.30.0.2
	reverse-20080930-branchpoint:1.30
	reverse-20080717-branch:1.27.0.6
	reverse-20080717-branchpoint:1.27
	msnyder-reverse-20080609-branch:1.27.0.4
	msnyder-reverse-20080609-branchpoint:1.27
	drow-reverse-20070409-branch:1.20.0.2
	drow-reverse-20070409-branchpoint:1.20
	gdb_6_8-2008-03-27-release:1.27
	gdb_6_8-branch:1.27.0.2
	gdb_6_8-2008-02-26-branchpoint:1.27
	gdb_6_7_1-2007-10-29-release:1.25
	gdb_6_7-2007-10-10-release:1.25
	gdb_6_7-branch:1.25.0.2
	gdb_6_7-2007-09-07-branchpoint:1.25
	insight_6_6-20070208-release:1.19
	gdb_6_6-2006-12-18-release:1.19
	gdb_6_6-branch:1.19.0.2
	gdb_6_6-2006-11-15-branchpoint:1.19
	insight_6_5-20061003-release:1.18
	gdb-csl-symbian-6_4_50_20060226-12:1.18
	gdb-csl-sourcerygxx-3_4_4-25:1.17
	nickrob-async-20060828-mergepoint:1.18
	gdb-csl-symbian-6_4_50_20060226-11:1.18
	gdb-csl-sourcerygxx-4_1-17:1.18
	gdb-csl-20060226-branch-local-2:1.18
	gdb-csl-sourcerygxx-4_1-14:1.18
	gdb-csl-sourcerygxx-4_1-13:1.18
	gdb-csl-sourcerygxx-4_1-12:1.18
	gdb-csl-sourcerygxx-3_4_4-21:1.18
	gdb_6_5-20060621-release:1.18
	gdb-csl-sourcerygxx-4_1-9:1.18
	gdb-csl-sourcerygxx-4_1-8:1.18
	gdb-csl-sourcerygxx-4_1-7:1.18
	gdb-csl-arm-2006q1-6:1.18
	gdb-csl-sourcerygxx-4_1-6:1.18
	gdb-csl-symbian-6_4_50_20060226-10:1.18
	gdb-csl-symbian-6_4_50_20060226-9:1.18
	gdb-csl-symbian-6_4_50_20060226-8:1.18
	gdb-csl-coldfire-4_1-11:1.18
	gdb-csl-sourcerygxx-3_4_4-19:1.18
	gdb-csl-coldfire-4_1-10:1.18
	gdb_6_5-branch:1.18.0.16
	gdb_6_5-2006-05-14-branchpoint:1.18
	gdb-csl-sourcerygxx-4_1-5:1.18
	nickrob-async-20060513-branch:1.18.0.14
	nickrob-async-20060513-branchpoint:1.18
	gdb-csl-sourcerygxx-4_1-4:1.18
	msnyder-reverse-20060502-branch:1.18.0.12
	msnyder-reverse-20060502-branchpoint:1.18
	gdb-csl-morpho-4_1-4:1.18
	gdb-csl-sourcerygxx-3_4_4-17:1.18
	readline_5_1-import-branch:1.18.0.10
	readline_5_1-import-branchpoint:1.18
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.18
	gdb-csl-symbian-20060226-branch:1.18.0.8
	gdb-csl-symbian-20060226-branchpoint:1.18
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.18
	msnyder-reverse-20060331-branch:1.18.0.6
	msnyder-reverse-20060331-branchpoint:1.18
	gdb-csl-available-20060303-branch:1.18.0.4
	gdb-csl-available-20060303-branchpoint:1.18
	gdb-csl-20060226-branch:1.18.0.2
	gdb-csl-20060226-branchpoint:1.18
	gdb_6_4-20051202-release:1.17
	msnyder-fork-checkpoint-branch:1.17.0.12
	msnyder-fork-checkpoint-branchpoint:1.17
	gdb-csl-gxxpro-6_3-branch:1.17.0.10
	gdb-csl-gxxpro-6_3-branchpoint:1.17
	gdb_6_4-branch:1.17.0.8
	gdb_6_4-2005-11-01-branchpoint:1.17
	gdb-csl-arm-20051020-branch:1.17.0.6
	gdb-csl-arm-20051020-branchpoint:1.17
	msnyder-tracepoint-checkpoint-branch:1.17.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.17
	gdb-csl-arm-20050325-2005-q1b:1.17
	gdb-csl-arm-20050325-2005-q1a:1.17
	csl-arm-20050325-branch:1.17.0.2
	csl-arm-20050325-branchpoint:1.17
	gdb-post-i18n-errorwarning-20050211:1.16
	gdb-pre-i18n-errorwarning-20050211:1.15
	gdb_6_3-20041109-release:1.15
	gdb_6_3-branch:1.15.0.4
	gdb_6_3-20041019-branchpoint:1.15
	drow_intercu-merge-20040921:1.15
	drow_intercu-merge-20040915:1.15
	jimb-gdb_6_2-e500-branch:1.15.0.6
	jimb-gdb_6_2-e500-branchpoint:1.15
	gdb_6_2-20040730-release:1.15
	gdb_6_2-branch:1.15.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.15
	gdb_6_1_1-20040616-release:1.14
	gdb_6_1-2004-04-05-release:1.14
	drow_intercu-merge-20040402:1.14
	drow_intercu-merge-20040327:1.14
	ezannoni_pie-20040323-branch:1.14.0.12
	ezannoni_pie-20040323-branchpoint:1.14
	cagney_tramp-20040321-mergepoint:1.14
	cagney_tramp-20040309-branch:1.14.0.10
	cagney_tramp-20040309-branchpoint:1.14
	gdb_6_1-branch:1.14.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.14
	drow_intercu-20040221-branch:1.14.0.6
	drow_intercu-20040221-branchpoint:1.14
	cagney_bfdfile-20040213-branch:1.14.0.4
	cagney_bfdfile-20040213-branchpoint:1.14
	drow-cplus-merge-20040208:1.14
	carlton_dictionary-20040126-merge:1.14
	cagney_bigcore-20040122-branch:1.14.0.2
	cagney_bigcore-20040122-branchpoint:1.14
	drow-cplus-merge-20040113:1.13
	drow-cplus-merge-20031224:1.13
	drow-cplus-merge-20031220:1.13
	carlton_dictionary-20031215-merge:1.13
	drow-cplus-merge-20031214:1.13
	carlton-dictionary-20031111-merge:1.13
	gdb_6_0-2003-10-04-release:1.10
	kettenis_sparc-20030918-branch:1.11.0.4
	kettenis_sparc-20030918-branchpoint:1.11
	carlton_dictionary-20030917-merge:1.11
	ezannoni_pie-20030916-branchpoint:1.11
	ezannoni_pie-20030916-branch:1.11.0.2
	cagney_x86i386-20030821-branch:1.10.0.16
	cagney_x86i386-20030821-branchpoint:1.10
	carlton_dictionary-20030805-merge:1.10
	carlton_dictionary-20030627-merge:1.10
	gdb_6_0-branch:1.10.0.14
	gdb_6_0-2003-06-23-branchpoint:1.10
	jimb-ppc64-linux-20030613-branch:1.10.0.12
	jimb-ppc64-linux-20030613-branchpoint:1.10
	cagney_convert-20030606-branch:1.10.0.10
	cagney_convert-20030606-branchpoint:1.10
	cagney_writestrings-20030508-branch:1.10.0.8
	cagney_writestrings-20030508-branchpoint:1.10
	jimb-ppc64-linux-20030528-branch:1.10.0.6
	jimb-ppc64-linux-20030528-branchpoint:1.10
	carlton_dictionary-20030523-merge:1.10
	cagney_fileio-20030521-branch:1.10.0.4
	cagney_fileio-20030521-branchpoint:1.10
	kettenis_i386newframe-20030517-mergepoint:1.10
	jimb-ppc64-linux-20030509-branch:1.10.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.10
	kettenis_i386newframe-20030504-mergepoint:1.10
	carlton_dictionary-20030430-merge:1.10
	kettenis_i386newframe-20030419-branch:1.9.0.18
	kettenis_i386newframe-20030419-branchpoint:1.9
	carlton_dictionary-20030416-merge:1.9
	cagney_frameaddr-20030409-mergepoint:1.9
	kettenis_i386newframe-20030406-branch:1.9.0.16
	kettenis_i386newframe-20030406-branchpoint:1.9
	cagney_frameaddr-20030403-branchpoint:1.9
	cagney_frameaddr-20030403-branch:1.9.0.14
	cagney_framebase-20030330-mergepoint:1.9
	cagney_framebase-20030326-branch:1.9.0.12
	cagney_framebase-20030326-branchpoint:1.9
	cagney_lazyid-20030317-branch:1.9.0.10
	cagney_lazyid-20030317-branchpoint:1.9
	kettenis-i386newframe-20030316-mergepoint:1.9
	offbyone-20030313-branch:1.9.0.8
	offbyone-20030313-branchpoint:1.9
	kettenis-i386newframe-20030308-branch:1.9.0.6
	kettenis-i386newframe-20030308-branchpoint:1.9
	carlton_dictionary-20030305-merge:1.9
	cagney_offbyone-20030303-branch:1.9.0.4
	cagney_offbyone-20030303-branchpoint:1.9
	carlton_dictionary-20030207-merge:1.9
	interps-20030203-mergepoint:1.9
	interps-20030202-branch:1.9.0.2
	interps-20030202-branchpoint:1.9
	cagney-unwind-20030108-branch:1.8.0.2
	cagney-unwind-20030108-branchpoint:1.8
	carlton_dictionary-20021223-merge:1.7
	gdb_5_3-2002-12-12-release:1.7
	carlton_dictionary-20021115-merge:1.7
	kseitz_interps-20021105-merge:1.7
	kseitz_interps-20021103-merge:1.7
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.10
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.8
	carlton_dictionary-20020920-branchpoint:1.7
	gdb_5_3-branch:1.7.0.6
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.7
	cagney_sysregs-20020825-branch:1.7.0.4
	cagney_sysregs-20020825-branchpoint:1.7
	readline_4_3-import-branch:1.7.0.2
	readline_4_3-import-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.4
	kseitz_interps-20020528-branch:1.5.0.6
	kseitz_interps-20020528-branchpoint:1.5
	cagney_regbuf-20020515-branch:1.5.0.4
	cagney_regbuf-20020515-branchpoint:1.5
	jimb-macro-020506-branch:1.5.0.2
	jimb-macro-020506-branchpoint:1.5
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4;
locks; strict;
comment	@ * @;


1.61
date	2013.09.30.11.50.11;	author luisgpm;	state Exp;
branches;
next	1.60;

1.60
date	2013.08.09.15.30.48;	author palves;	state Exp;
branches;
next	1.59;

1.59
date	2013.08.08.17.00.42;	author palves;	state Exp;
branches;
next	1.58;

1.58
date	2013.05.14.20.30.48;	author tromey;	state Exp;
branches;
next	1.57;

1.57
date	2013.05.07.01.38.04;	author jkratoch;	state Exp;
branches;
next	1.56;

1.56
date	2013.01.01.06.32.42;	author brobecke;	state Exp;
branches;
next	1.55;

1.55
date	2012.11.20.22.51.04;	author muller;	state Exp;
branches;
next	1.54;

1.54
date	2012.11.09.19.57.58;	author tromey;	state Exp;
branches;
next	1.53;

1.53
date	2012.08.07.13.26.32;	author jkratoch;	state Exp;
branches;
next	1.52;

1.52
date	2012.07.23.14.57.54;	author tromey;	state Exp;
branches;
next	1.51;

1.51
date	2012.07.23.14.56.10;	author tromey;	state Exp;
branches;
next	1.50;

1.50
date	2012.07.18.19.34.57;	author tromey;	state Exp;
branches;
next	1.49;

1.49
date	2012.07.18.19.33.33;	author tromey;	state Exp;
branches;
next	1.48;

1.48
date	2012.01.20.09.59.14;	author uweigand;	state Exp;
branches;
next	1.47;

1.47
date	2012.01.20.09.56.55;	author uweigand;	state Exp;
branches;
next	1.46;

1.46
date	2012.01.04.08.17.02;	author brobecke;	state Exp;
branches;
next	1.45;

1.45
date	2011.01.07.19.36.17;	author msnyder;	state Exp;
branches
	1.45.4.1;
next	1.44;

1.44
date	2011.01.05.22.22.49;	author msnyder;	state Exp;
branches;
next	1.43;

1.43
date	2011.01.01.15.33.05;	author brobecke;	state Exp;
branches;
next	1.42;

1.42
date	2010.09.15.03.30.30;	author amodra;	state Exp;
branches;
next	1.41;

1.41
date	2010.08.31.18.08.43;	author jkratoch;	state Exp;
branches;
next	1.40;

1.40
date	2010.05.14.20.17.37;	author msnyder;	state Exp;
branches;
next	1.39;

1.39
date	2010.05.07.02.09.55;	author msnyder;	state Exp;
branches;
next	1.38;

1.38
date	2010.02.16.20.48.52;	author drow;	state Exp;
branches;
next	1.37;

1.37
date	2010.01.01.07.31.32;	author brobecke;	state Exp;
branches;
next	1.36;

1.36
date	2009.12.01.22.46.11;	author jsm28;	state Exp;
branches;
next	1.35;

1.35
date	2009.10.22.19.36.06;	author msnyder;	state Exp;
branches;
next	1.34;

1.34
date	2009.07.02.17.21.06;	author uweigand;	state Exp;
branches
	1.34.2.1;
next	1.33;

1.33
date	2009.06.17.18.48.26;	author uweigand;	state Exp;
branches;
next	1.32;

1.32
date	2009.02.21.16.14.48;	author palves;	state Exp;
branches;
next	1.31;

1.31
date	2009.01.03.05.57.51;	author brobecke;	state Exp;
branches;
next	1.30;

1.30
date	2008.09.11.14.27.34;	author uweigand;	state Exp;
branches;
next	1.29;

1.29
date	2008.09.04.22.49.28;	author devans;	state Exp;
branches;
next	1.28;

1.28
date	2008.08.20.11.21.44;	author palves;	state Exp;
branches;
next	1.27;

1.27
date	2008.01.01.22.53.09;	author drow;	state Exp;
branches;
next	1.26;

1.26
date	2007.11.16.04.53.46;	author deuling;	state Exp;
branches;
next	1.25;

1.25
date	2007.08.23.18.08.31;	author brobecke;	state Exp;
branches;
next	1.24;

1.24
date	2007.06.20.18.32.10;	author hjl;	state Exp;
branches;
next	1.23;

1.23
date	2007.06.13.17.53.51;	author uweigand;	state Exp;
branches;
next	1.22;

1.22
date	2007.06.06.15.26.28;	author uweigand;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.13.12.27.29;	author uweigand;	state Exp;
branches;
next	1.20;

1.20
date	2007.01.09.17.58.50;	author drow;	state Exp;
branches;
next	1.19;

1.19
date	2006.10.20.22.06.28;	author drow;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.17.22.33.59;	author eliz;	state Exp;
branches;
next	1.17;

1.17
date	2005.02.15.15.49.10;	author cagney;	state Exp;
branches
	1.17.12.1;
next	1.16;

1.16
date	2005.02.11.04.05.49;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2004.06.15.01.04.19;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.14.18.39.08;	author ezannoni;	state Exp;
branches
	1.14.6.1;
next	1.13;

1.13
date	2003.10.11.01.56.53;	author roland;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.21.01.26.44;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.04.21.05.49;	author kettenis;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2003.04.21.16.48.37;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.14.00.49.04;	author cagney;	state Exp;
branches
	1.9.18.1;
next	1.8;

1.8
date	2003.01.08.22.47.46;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.08.14.59.35;	author cagney;	state Exp;
branches
	1.7.8.1
	1.7.10.1;
next	1.6;

1.6
date	2002.08.06.15.53.08;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.12.23.09.48;	author msnyder;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2002.02.14.01.57.36;	author msnyder;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.14.20.00.48;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.10.23.32.25;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.09.00.36.57;	author msnyder;	state Exp;
branches;
next	;

1.45.4.1
date	2012.01.06.04.43.14;	author brobecke;	state Exp;
branches;
next	;

1.34.2.1
date	2009.08.07.01.19.25;	author msnyder;	state Exp;
branches;
next	;

1.17.12.1
date	2005.11.22.00.11.55;	author msnyder;	state Exp;
branches;
next	1.17.12.2;

1.17.12.2
date	2005.11.22.00.31.14;	author msnyder;	state Exp;
branches;
next	;

1.14.6.1
date	2004.09.16.17.01.04;	author drow;	state Exp;
branches;
next	;

1.11.2.1
date	2003.09.29.22.40.19;	author ezannoni;	state Exp;
branches;
next	;

1.9.18.1
date	2003.05.04.11.37.41;	author kettenis;	state Exp;
branches;
next	;

1.7.8.1
date	2003.02.07.19.17.48;	author carlton;	state Exp;
branches;
next	1.7.8.2;

1.7.8.2
date	2003.05.01.00.46.48;	author carlton;	state Exp;
branches;
next	1.7.8.3;

1.7.8.3
date	2003.09.17.21.28.19;	author carlton;	state Exp;
branches;
next	1.7.8.4;

1.7.8.4
date	2003.11.11.23.50.43;	author carlton;	state Exp;
branches;
next	1.7.8.5;

1.7.8.5
date	2004.01.26.19.11.23;	author carlton;	state Exp;
branches;
next	;

1.7.10.1
date	2003.12.14.20.27.14;	author drow;	state Exp;
branches;
next	1.7.10.2;

1.7.10.2
date	2004.02.09.19.43.38;	author drow;	state Exp;
branches;
next	;

1.5.6.1
date	2002.08.09.18.34.24;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.61
log
@	* aarch64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* aix-thread.c (BUILD_THREAD, BUILD_LWP): Remove.
	Replace BUILD_THREAD with ptid_build.
	Replace BUILD_LWP with ptid_build.
	Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* alphabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* amd64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* amd64bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* arm-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* armnbsd-nat.c: Replace PIDGET with ptid_get_pid.
	* auxv.c: Likewise.
	* breakpoint.c: Likewise.
	* common/ptid.c (ptid_is_pid): Condense check for
	null_ptid and minus_one_ptid.
	(ptid_lwp_p): New function.
	(ptid_tid_p): New function.
	* common/ptid.h: Update comments for accessors.
	(ptid_lwp_p): New prototype.
	(ptid_tid_p): New prototype.
	* defs.h (PIDGET, TIDGET, MERGEPID): Do not define.
	* gcore.c: Replace PIDGET with ptid_get_pid.
	* gdbthread.h: Likewise.
	* gnu-nat.c: Likewise.
	* hppa-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* hppabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* hppanbsd-nat.c: Likewise.
	* i386-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* i386bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* ia64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	* infcmd.c: Likewise.
	* inferior.h: Likewise.
	* inflow.c: Likewise.
	* infrun.c: Likewise.
	* linux-fork.c: Likewise.
	* linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace GET_PID with ptid_get_pid.
	Replace is_lwp with ptid_lwp_p.
	Replace GET_LWP with ptid_get_lwp.
	Replace BUILD_LWP with ptid_build.
@
text
@/* Generate a core file for the inferior process.

   Copyright (C) 2001-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "elf-bfd.h"
#include "infcall.h"
#include "inferior.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "solib.h"
#include "symfile.h"
#include "arch-utils.h"
#include "completer.h"
#include "gcore.h"
#include "cli/cli-decode.h"
#include "gdb_assert.h"
#include <fcntl.h>
#include "regcache.h"
#include "regset.h"
#include "gdb_bfd.h"
#include "readline/tilde.h"

/* The largest amount of memory to read from the target at once.  We
   must throttle it to limit the amount of memory used by GDB during
   generate-core-file for programs with large resident data.  */
#define MAX_COPY_BYTES (1024 * 1024)

static const char *default_gcore_target (void);
static enum bfd_architecture default_gcore_arch (void);
static unsigned long default_gcore_mach (void);
static int gcore_memory_sections (bfd *);

/* create_gcore_bfd -- helper for gcore_command (exported).
   Open a new bfd core file for output, and return the handle.  */

bfd *
create_gcore_bfd (const char *filename)
{
  bfd *obfd = gdb_bfd_openw (filename, default_gcore_target ());

  if (!obfd)
    error (_("Failed to open '%s' for output."), filename);
  bfd_set_format (obfd, bfd_core);
  bfd_set_arch_mach (obfd, default_gcore_arch (), default_gcore_mach ());
  return obfd;
}

/* write_gcore_file -- helper for gcore_command (exported).
   Compose and write the corefile data to the core file.  */


void
write_gcore_file (bfd *obfd)
{
  void *note_data = NULL;
  int note_size = 0;
  asection *note_sec = NULL;

  /* An external target method must build the notes section.  */
  /* FIXME: uweigand/2011-10-06: All architectures that support core file
     generation should be converted to gdbarch_make_corefile_notes; at that
     point, the target vector method can be removed.  */
  if (!gdbarch_make_corefile_notes_p (target_gdbarch ()))
    note_data = target_make_corefile_notes (obfd, &note_size);
  else
    note_data = gdbarch_make_corefile_notes (target_gdbarch (), obfd, &note_size);

  if (note_data == NULL || note_size == 0)
    error (_("Target does not support core file generation."));

  /* Create the note section.  */
  note_sec = bfd_make_section_anyway_with_flags (obfd, "note0",
						 SEC_HAS_CONTENTS
						 | SEC_READONLY
						 | SEC_ALLOC);
  if (note_sec == NULL)
    error (_("Failed to create 'note' section for corefile: %s"),
	   bfd_errmsg (bfd_get_error ()));

  bfd_set_section_vma (obfd, note_sec, 0);
  bfd_set_section_alignment (obfd, note_sec, 0);
  bfd_set_section_size (obfd, note_sec, note_size);

  /* Now create the memory/load sections.  */
  if (gcore_memory_sections (obfd) == 0)
    error (_("gcore: failed to get corefile memory sections from target."));

  /* Write out the contents of the note section.  */
  if (!bfd_set_section_contents (obfd, note_sec, note_data, 0, note_size))
    warning (_("writing note section (%s)"), bfd_errmsg (bfd_get_error ()));
}

static void
do_bfd_delete_cleanup (void *arg)
{
  bfd *obfd = arg;
  const char *filename = obfd->filename;

  gdb_bfd_unref (arg);
  unlink (filename);
}

/* gcore_command -- implements the 'gcore' command.
   Generate a core file from the inferior process.  */

static void
gcore_command (char *args, int from_tty)
{
  struct cleanup *filename_chain;
  struct cleanup *bfd_chain;
  char *corefilename;
  bfd *obfd;

  /* No use generating a corefile without a target process.  */
  if (!target_has_execution)
    noprocess ();

  if (args && *args)
    corefilename = tilde_expand (args);
  else
    {
      /* Default corefile name is "core.PID".  */
      corefilename = xstrprintf ("core.%d", ptid_get_pid (inferior_ptid));
    }
  filename_chain = make_cleanup (xfree, corefilename);

  if (info_verbose)
    fprintf_filtered (gdb_stdout,
		      "Opening corefile '%s' for output.\n", corefilename);

  /* Open the output file.  */
  obfd = create_gcore_bfd (corefilename);

  /* Need a cleanup that will close and delete the file.  */
  bfd_chain = make_cleanup (do_bfd_delete_cleanup, obfd);

  /* Call worker function.  */
  write_gcore_file (obfd);

  /* Succeeded.  */
  discard_cleanups (bfd_chain);
  gdb_bfd_unref (obfd);

  fprintf_filtered (gdb_stdout, "Saved corefile %s\n", corefilename);
  do_cleanups (filename_chain);
}

static unsigned long
default_gcore_mach (void)
{
#if 1	/* See if this even matters...  */
  return 0;
#else

  const struct bfd_arch_info *bfdarch = gdbarch_bfd_arch_info (target_gdbarch ());

  if (bfdarch != NULL)
    return bfdarch->mach;
  if (exec_bfd == NULL)
    error (_("Can't find default bfd machine type (need execfile)."));

  return bfd_get_mach (exec_bfd);
#endif /* 1 */
}

static enum bfd_architecture
default_gcore_arch (void)
{
  const struct bfd_arch_info *bfdarch = gdbarch_bfd_arch_info (target_gdbarch ());

  if (bfdarch != NULL)
    return bfdarch->arch;
  if (exec_bfd == NULL)
    error (_("Can't find bfd architecture for corefile (need execfile)."));

  return bfd_get_arch (exec_bfd);
}

static const char *
default_gcore_target (void)
{
  /* The gdbarch may define a target to use for core files.  */
  if (gdbarch_gcore_bfd_target_p (target_gdbarch ()))
    return gdbarch_gcore_bfd_target (target_gdbarch ());

  /* Otherwise, try to fall back to the exec_bfd target.  This will probably
     not work for non-ELF targets.  */
  if (exec_bfd == NULL)
    return NULL;
  else
    return bfd_get_target (exec_bfd);
}

/* Derive a reasonable stack segment by unwinding the target stack,
   and store its limits in *BOTTOM and *TOP.  Return non-zero if
   successful.  */

static int
derive_stack_segment (bfd_vma *bottom, bfd_vma *top)
{
  struct frame_info *fi, *tmp_fi;

  gdb_assert (bottom);
  gdb_assert (top);

  /* Can't succeed without stack and registers.  */
  if (!target_has_stack || !target_has_registers)
    return 0;

  /* Can't succeed without current frame.  */
  fi = get_current_frame ();
  if (fi == NULL)
    return 0;

  /* Save frame pointer of TOS frame.  */
  *top = get_frame_base (fi);
  /* If current stack pointer is more "inner", use that instead.  */
  if (gdbarch_inner_than (get_frame_arch (fi), get_frame_sp (fi), *top))
    *top = get_frame_sp (fi);

  /* Find prev-most frame.  */
  while ((tmp_fi = get_prev_frame (fi)) != NULL)
    fi = tmp_fi;

  /* Save frame pointer of prev-most frame.  */
  *bottom = get_frame_base (fi);

  /* Now canonicalize their order, so that BOTTOM is a lower address
     (as opposed to a lower stack frame).  */
  if (*bottom > *top)
    {
      bfd_vma tmp_vma;

      tmp_vma = *top;
      *top = *bottom;
      *bottom = tmp_vma;
    }

  return 1;
}

/* call_target_sbrk --
   helper function for derive_heap_segment.  */

static bfd_vma
call_target_sbrk (int sbrk_arg)
{
  struct objfile *sbrk_objf;
  struct gdbarch *gdbarch;
  bfd_vma top_of_heap;
  struct value *target_sbrk_arg;
  struct value *sbrk_fn, *ret;
  bfd_vma tmp;

  if (lookup_minimal_symbol ("sbrk", NULL, NULL) != NULL)
    {
      sbrk_fn = find_function_in_inferior ("sbrk", &sbrk_objf);
      if (sbrk_fn == NULL)
	return (bfd_vma) 0;
    }
  else if (lookup_minimal_symbol ("_sbrk", NULL, NULL) != NULL)
    {
      sbrk_fn = find_function_in_inferior ("_sbrk", &sbrk_objf);
      if (sbrk_fn == NULL)
	return (bfd_vma) 0;
    }
  else
    return (bfd_vma) 0;

  gdbarch = get_objfile_arch (sbrk_objf);
  target_sbrk_arg = value_from_longest (builtin_type (gdbarch)->builtin_int, 
					sbrk_arg);
  gdb_assert (target_sbrk_arg);
  ret = call_function_by_hand (sbrk_fn, 1, &target_sbrk_arg);
  if (ret == NULL)
    return (bfd_vma) 0;

  tmp = value_as_long (ret);
  if ((LONGEST) tmp <= 0 || (LONGEST) tmp == 0xffffffff)
    return (bfd_vma) 0;

  top_of_heap = tmp;
  return top_of_heap;
}

/* Derive a reasonable heap segment for ABFD by looking at sbrk and
   the static data sections.  Store its limits in *BOTTOM and *TOP.
   Return non-zero if successful.  */

static int
derive_heap_segment (bfd *abfd, bfd_vma *bottom, bfd_vma *top)
{
  bfd_vma top_of_data_memory = 0;
  bfd_vma top_of_heap = 0;
  bfd_size_type sec_size;
  bfd_vma sec_vaddr;
  asection *sec;

  gdb_assert (bottom);
  gdb_assert (top);

  /* This function depends on being able to call a function in the
     inferior.  */
  if (!target_has_execution)
    return 0;

  /* The following code assumes that the link map is arranged as
     follows (low to high addresses):

     ---------------------------------
     | text sections                 |
     ---------------------------------
     | data sections (including bss) |
     ---------------------------------
     | heap                          |
     --------------------------------- */

  for (sec = abfd->sections; sec; sec = sec->next)
    {
      if (bfd_get_section_flags (abfd, sec) & SEC_DATA
	  || strcmp (".bss", bfd_section_name (abfd, sec)) == 0)
	{
	  sec_vaddr = bfd_get_section_vma (abfd, sec);
	  sec_size = bfd_get_section_size (sec);
	  if (sec_vaddr + sec_size > top_of_data_memory)
	    top_of_data_memory = sec_vaddr + sec_size;
	}
    }

  top_of_heap = call_target_sbrk (0);
  if (top_of_heap == (bfd_vma) 0)
    return 0;

  /* Return results.  */
  if (top_of_heap > top_of_data_memory)
    {
      *bottom = top_of_data_memory;
      *top = top_of_heap;
      return 1;
    }

  /* No additional heap space needs to be saved.  */
  return 0;
}

static void
make_output_phdrs (bfd *obfd, asection *osec, void *ignored)
{
  int p_flags = 0;
  int p_type = 0;

  /* FIXME: these constants may only be applicable for ELF.  */
  if (strncmp (bfd_section_name (obfd, osec), "load", 4) == 0)
    p_type = PT_LOAD;
  else if (strncmp (bfd_section_name (obfd, osec), "note", 4) == 0)
    p_type = PT_NOTE;
  else
    p_type = PT_NULL;

  p_flags |= PF_R;	/* Segment is readable.  */
  if (!(bfd_get_section_flags (obfd, osec) & SEC_READONLY))
    p_flags |= PF_W;	/* Segment is writable.  */
  if (bfd_get_section_flags (obfd, osec) & SEC_CODE)
    p_flags |= PF_X;	/* Segment is executable.  */

  bfd_record_phdr (obfd, p_type, 1, p_flags, 0, 0, 0, 0, 1, &osec);
}

/* find_memory_region_ftype implementation.  DATA is 'bfd *' for the core file
   GDB is creating.  */

static int
gcore_create_callback (CORE_ADDR vaddr, unsigned long size, int read,
		       int write, int exec, int modified, void *data)
{
  bfd *obfd = data;
  asection *osec;
  flagword flags = SEC_ALLOC | SEC_HAS_CONTENTS | SEC_LOAD;

  /* If the memory segment has no permissions set, ignore it, otherwise
     when we later try to access it for read/write, we'll get an error
     or jam the kernel.  */
  if (read == 0 && write == 0 && exec == 0 && modified == 0)
    {
      if (info_verbose)
        {
          fprintf_filtered (gdb_stdout, "Ignore segment, %s bytes at %s\n",
                            plongest (size), paddress (target_gdbarch (), vaddr));
        }

      return 0;
    }

  if (write == 0 && modified == 0 && !solib_keep_data_in_core (vaddr, size))
    {
      /* See if this region of memory lies inside a known file on disk.
	 If so, we can avoid copying its contents by clearing SEC_LOAD.  */
      struct objfile *objfile;
      struct obj_section *objsec;

      ALL_OBJSECTIONS (objfile, objsec)
	{
	  bfd *abfd = objfile->obfd;
	  asection *asec = objsec->the_bfd_section;
	  bfd_vma align = (bfd_vma) 1 << bfd_get_section_alignment (abfd,
								    asec);
	  bfd_vma start = obj_section_addr (objsec) & -align;
	  bfd_vma end = (obj_section_endaddr (objsec) + align - 1) & -align;

	  /* Match if either the entire memory region lies inside the
	     section (i.e. a mapping covering some pages of a large
	     segment) or the entire section lies inside the memory region
	     (i.e. a mapping covering multiple small sections).

	     This BFD was synthesized from reading target memory,
	     we don't want to omit that.  */
	  if (objfile->separate_debug_objfile_backlink == NULL
	      && ((vaddr >= start && vaddr + size <= end)
	          || (start >= vaddr && end <= vaddr + size))
	      && !(bfd_get_file_flags (abfd) & BFD_IN_MEMORY))
	    {
	      flags &= ~(SEC_LOAD | SEC_HAS_CONTENTS);
	      goto keep;	/* Break out of two nested for loops.  */
	    }
	}

    keep:;
    }

  if (write == 0)
    flags |= SEC_READONLY;

  if (exec)
    flags |= SEC_CODE;
  else
    flags |= SEC_DATA;

  osec = bfd_make_section_anyway_with_flags (obfd, "load", flags);
  if (osec == NULL)
    {
      warning (_("Couldn't make gcore segment: %s"),
	       bfd_errmsg (bfd_get_error ()));
      return 1;
    }

  if (info_verbose)
    {
      fprintf_filtered (gdb_stdout, "Save segment, %s bytes at %s\n",
			plongest (size), paddress (target_gdbarch (), vaddr));
    }

  bfd_set_section_size (obfd, osec, size);
  bfd_set_section_vma (obfd, osec, vaddr);
  bfd_section_lma (obfd, osec) = 0; /* ??? bfd_set_section_lma?  */
  return 0;
}

static int
objfile_find_memory_regions (find_memory_region_ftype func, void *obfd)
{
  /* Use objfile data to create memory sections.  */
  struct objfile *objfile;
  struct obj_section *objsec;
  bfd_vma temp_bottom, temp_top;

  /* Call callback function for each objfile section.  */
  ALL_OBJSECTIONS (objfile, objsec)
    {
      bfd *ibfd = objfile->obfd;
      asection *isec = objsec->the_bfd_section;
      flagword flags = bfd_get_section_flags (ibfd, isec);

      /* Separate debug info files are irrelevant for gcore.  */
      if (objfile->separate_debug_objfile_backlink != NULL)
	continue;

      if ((flags & SEC_ALLOC) || (flags & SEC_LOAD))
	{
	  int size = bfd_section_size (ibfd, isec);
	  int ret;

	  ret = (*func) (obj_section_addr (objsec), size, 
			 1, /* All sections will be readable.  */
			 (flags & SEC_READONLY) == 0, /* Writable.  */
			 (flags & SEC_CODE) != 0, /* Executable.  */
			 1, /* MODIFIED is unknown, pass it as true.  */
			 obfd);
	  if (ret != 0)
	    return ret;
	}
    }

  /* Make a stack segment.  */
  if (derive_stack_segment (&temp_bottom, &temp_top))
    (*func) (temp_bottom, temp_top - temp_bottom,
	     1, /* Stack section will be readable.  */
	     1, /* Stack section will be writable.  */
	     0, /* Stack section will not be executable.  */
	     1, /* Stack section will be modified.  */
	     obfd);

  /* Make a heap segment.  */
  if (derive_heap_segment (exec_bfd, &temp_bottom, &temp_top))
    (*func) (temp_bottom, temp_top - temp_bottom,
	     1, /* Heap section will be readable.  */
	     1, /* Heap section will be writable.  */
	     0, /* Heap section will not be executable.  */
	     1, /* Heap section will be modified.  */
	     obfd);

  return 0;
}

static void
gcore_copy_callback (bfd *obfd, asection *osec, void *ignored)
{
  bfd_size_type size, total_size = bfd_section_size (obfd, osec);
  file_ptr offset = 0;
  struct cleanup *old_chain = NULL;
  void *memhunk;

  /* Read-only sections are marked; we don't have to copy their contents.  */
  if ((bfd_get_section_flags (obfd, osec) & SEC_LOAD) == 0)
    return;

  /* Only interested in "load" sections.  */
  if (strncmp ("load", bfd_section_name (obfd, osec), 4) != 0)
    return;

  size = min (total_size, MAX_COPY_BYTES);
  memhunk = xmalloc (size);
  old_chain = make_cleanup (xfree, memhunk);

  while (total_size > 0)
    {
      if (size > total_size)
	size = total_size;

      if (target_read_memory (bfd_section_vma (obfd, osec) + offset,
			      memhunk, size) != 0)
	{
	  warning (_("Memory read failed for corefile "
		     "section, %s bytes at %s."),
		   plongest (size),
		   paddress (target_gdbarch (), bfd_section_vma (obfd, osec)));
	  break;
	}
      if (!bfd_set_section_contents (obfd, osec, memhunk, offset, size))
	{
	  warning (_("Failed to write corefile contents (%s)."),
		   bfd_errmsg (bfd_get_error ()));
	  break;
	}

      total_size -= size;
      offset += size;
    }

  do_cleanups (old_chain);	/* Frees MEMHUNK.  */
}

static int
gcore_memory_sections (bfd *obfd)
{
  /* Try gdbarch method first, then fall back to target method.  */
  if (!gdbarch_find_memory_regions_p (target_gdbarch ())
      || gdbarch_find_memory_regions (target_gdbarch (),
				      gcore_create_callback, obfd) != 0)
    {
      if (target_find_memory_regions (gcore_create_callback, obfd) != 0)
	return 0;			/* FIXME: error return/msg?  */
    }

  /* Record phdrs for section-to-segment mapping.  */
  bfd_map_over_sections (obfd, make_output_phdrs, NULL);

  /* Copy memory region contents.  */
  bfd_map_over_sections (obfd, gcore_copy_callback, NULL);

  return 1;
}

/* Provide a prototype to silence -Wmissing-prototypes.  */
extern initialize_file_ftype _initialize_gcore;

void
_initialize_gcore (void)
{
  add_com ("generate-core-file", class_files, gcore_command, _("\
Save a core file with the current state of the debugged process.\n\
Argument is optional filename.  Default filename is 'core.<process_id>'."));

  add_com_alias ("gcore", "generate-core-file", class_files, 1);
  exec_set_find_memory_regions (objfile_find_memory_regions);
}
@


1.60
log
@gcore: Make tilde-expanded filename visible.

Most commands in GDB show the tilde-expanded filename in user visible
output.  This makes gcore behave the same.

Before:

  (gdb) generate-core-file ~/a/b
  Failed to open '~/a/b' for output.
  (gdb) generate-core-file ~/core
  Saved corefile ~/core

After:

  (gdb) generate-core-file ~/a/b
  Failed to open '/home/pedro/a/b' for output.
  (gdb) generate-core-file ~/core
  Saved corefile /home/pedro/core

Tested on x86_64 Fedora 17.

gdb/
2013-08-09  Pedro Alves  <palves@@redhat.com>

	* gcore.c (create_gcore_bfd): Don't use tilde_expand here.
	(gcore_command): Use tilde_expand here, and when showing the
	filename to the user, show the expanded version.
@
text
@d139 1
a139 1
      corefilename = xstrprintf ("core.%d", PIDGET (inferior_ptid));
@


1.59
log
@gcore: expand tilde in filename.

Before this patch, this fails:

 (gdb) generate-core-file ~/core
 Failed to open '~/core' for output.

After the patch:

 (gdb) generate-core-file ~/core
 Saved corefile ~/core

gdb/
2013-08-08  Azat Khuzhin  <a3at.mail@@gmail.com>  (tiny change)

	* gcore.c (create_gcore_bfd): Use tilde_expand.
@
text
@d55 1
a55 6
  char *fullname;
  bfd *obfd;

  fullname = tilde_expand (filename);
  obfd = gdb_bfd_openw (fullname, default_gcore_target ());
  xfree (fullname);
d125 3
a127 2
  struct cleanup *old_chain;
  char *corefilename, corefilename_buffer[40];
d135 1
a135 1
    corefilename = args;
d139 1
a139 3
      xsnprintf (corefilename_buffer, sizeof (corefilename_buffer),
		 "core.%d", PIDGET (inferior_ptid));
      corefilename = corefilename_buffer;
d141 1
d151 1
a151 1
  old_chain = make_cleanup (do_bfd_delete_cleanup, obfd);
d157 3
d161 1
a161 3

  discard_cleanups (old_chain);
  gdb_bfd_unref (obfd);
@


1.58
log
@	* gcore.c (create_gcore_bfd): Make 'filename' const.
	* gcore.h (create_gcore_bfd): Make 'filename' const.
	* record-full.c (record_full_save): Make 'recfilename' const.
	* target.c (target_save_record): Make 'filename' const.
	* target.h (struct target_ops) <to_save_record>: Make 'filename'
	const.
	(target_save_record): Likewise.
@
text
@d37 1
d55 6
a60 1
  bfd *obfd = gdb_bfd_openw (filename, default_gcore_target ());
@


1.57
log
@gdb/
	* gcore.c (gcore_create_callback): Ignore sections with
	separate_debug_objfile_backlink != NULL.
@
text
@d52 1
a52 1
create_gcore_bfd (char *filename)
@


1.56
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d431 3
a433 2
	  if (((vaddr >= start && vaddr + size <= end)
	       || (start >= vaddr && end <= vaddr + size))
@


1.55
log
@	ARI fixes: sprintf rule.
	Replace sprintf function calls for char arrays by
	calls to xsnprintf calls.
	* arm-tdep.c (arm_push_dummy_call): Replace sprintf by xsnprintf.
	(arm_dwarf_reg_to_regnum, arm_return_value): Ditto.
	(arm_neon_quad_read, arm_pseudo_read): Ditto.
	(arm_neon_quad_write, arm_pseudo_write): Ditto.
	* breakpoint.c (condition_completer): Ditto.
	(create_tracepoint_from_upload): Ditto.
	* dwarf2read.c (file_full_name): Ditto.
	* gcore.c (gcore_command): Ditto.
	* gnu-nat.c (proc_string, gnu_pid_to_str): Ditto.
	* go32-nat.c (go32_sysinfo): Ditto.
	* interps.c (interp_set): Ditto.
	* m32c-tdep.c (make_types): Ditto.
	* ppc-linux-nat.c (fetch_register, store_register): Ditto.
	* remote-m32r-sdi.c (m32r_open): Ditto.
	* sol-thread.c (td_err_string): Ditto.
	(td_state_string, solaris_pid_to_str): Ditto.
	* symtab.c (gdb_mangle_name): Ditto.
	* cli/cli-script.c (execute_control_command): Ditto.
	(define_command, document_command): Ditto.
	* tui/tui-io.c (tui_rl_display_match_list): Ditto.
	* tui/tui-stack.c (tui_make_status_line): Ditto.
	* tui/tui-win.c (tui_update_gdb_sizes): Ditto.
@
text
@d3 1
a3 1
   Copyright (C) 2001-2012 Free Software Foundation, Inc.
@


1.54
log
@	* gdbarch.sh (target_gdbarch): Remove macro.
	(get_target_gdbarch): Rename to target_gdbarch.
	* gdbarch.c, gdbarch.h: Rebuild.
	* ada-tasks.c, aix-thread.c, amd64-linux-nat.c, arch-utils.c,
	arm-tdep.c, auxv.c, breakpoint.c, bsd-uthread.c, corefile.c,
	darwin-nat-info.c, dcache.c, dsrec.c, exec.c, fbsd-nat.c,
	filesystem.c, gcore.c, gnu-nat.c, i386-darwin-nat.c, i386-nat.c,
	ia64-vms-tdep.c, inf-ptrace.c, infcmd.c, jit.c, linux-nat.c,
	linux-tdep.c, linux-thread-db.c, m32r-rom.c, memattr.c,
	mep-tdep.c, microblaze-tdep.c, mips-linux-nat.c,
	mips-linux-tdep.c, mips-tdep.c, monitor.c, moxie-tdep.c,
	nto-procfs.c, nto-tdep.c, ppc-linux-nat.c, proc-service.c,
	procfs.c, progspace.c, ravenscar-thread.c, record.c,
	remote-m32r-sdi.c, remote-mips.c, remote-sim.c, remote.c,
	rl78-tdep.c, rs6000-nat.c, rx-tdep.c, s390-nat.c, sol-thread.c,
	solib-darwin.c, solib-dsbt.c, solib-frv.c, solib-ia64-hpux.c,
	solib-irix.c, solib-pa64.c, solib-som.c, solib-spu.c,
	solib-sunos.c, solib-svr4.c, solib.c, spu-linux-nat.c,
	spu-multiarch.c, spu-tdep.c, symfile-mem.c, symfile.c, symtab.c,
	target-descriptions.c, target.c, target.h, tracepoint.c,
	windows-nat.c, windows-tdep.c, xcoffsolib.c, cli/cli-dump.c,
	common/agent.c, mi/mi-interp.c, python/py-finishbreakpoint.c,
	python/py-inferior.c, python/python.c: Update.
@
text
@d137 2
a138 1
      sprintf (corefilename_buffer, "core.%d", PIDGET (inferior_ptid));
@


1.53
log
@gdb/
	PR 11804
	* defs.h (find_memory_region_ftype): New comment.  New arg modified.
	* fbsd-nat.c (fbsd_find_memory_regions): Add the passed modified value.
	* gcore.c (gcore_create_callback): New function comment.  Add modified
	parameter.  Only write modified regions.  Set SEC_READONLY exactly
	according to MODIFIED.
	(objfile_find_memory_regions): Ignore separate debug info files.  Ass
	the passed modified value to FUNC.
	* gnu-nat.c (gnu_find_memory_regions): Add the passed modified value.
	* linux-tdep.c (linux_find_memory_regions): Try to reads smaps file
	first.  New variables modified and has_anonymous.  Parse the lines of
	smaps file.  Add the passed MODIFIED value to FUNC.
	* procfs.c (find_memory_regions_callback): Add the passed modified
	value.

gdb/testsuite/
	PR 11804
	* gdb.base/gcore-relro.exp: New file.
	* gdb.base/gcore-relro-main.c: New file.
	* gdb.base/gcore-relro-lib.c: New file.
@
text
@d78 1
a78 1
  if (!gdbarch_make_corefile_notes_p (target_gdbarch))
d81 1
a81 1
    note_data = gdbarch_make_corefile_notes (target_gdbarch, obfd, &note_size);
d168 1
a168 1
  const struct bfd_arch_info *bfdarch = gdbarch_bfd_arch_info (target_gdbarch);
d182 1
a182 1
  const struct bfd_arch_info *bfdarch = gdbarch_bfd_arch_info (target_gdbarch);
d196 2
a197 2
  if (gdbarch_gcore_bfd_target_p (target_gdbarch))
    return gdbarch_gcore_bfd_target (target_gdbarch);
d401 1
a401 1
                            plongest (size), paddress (target_gdbarch, vaddr));
d461 1
a461 1
			plongest (size), paddress (target_gdbarch, vaddr));
d557 1
a557 1
		   paddress (target_gdbarch, bfd_section_vma (obfd, osec)));
d578 2
a579 2
  if (!gdbarch_find_memory_regions_p (target_gdbarch)
      || gdbarch_find_memory_regions (target_gdbarch,
@


1.52
log
@	* cli/cli-dump.c (bfd_openr_with_cleanup): Use gdb_bfd_openr.
	(bfd_openw_with_cleanup): Use gdb_bfd_openw.
	* corelow.c (core_open): Use gdb_bfd_fopen.
	* dsrec.c (load_srec): Use gdb_bfd_openr.
	* exec.c (exec_file_attach): Use gdb_bfd_fopen.
	* gcore.c (gcore_memory_sections): Use gdb_bfd_openw.
	* gdb_bfd.c (gdb_bfd_fopen, gdb_bfd_openr, gdb_bfd_openw)
	(gdb_bfd_openr_iovec, gdb_bfd_openr_next_archived_file)
	(gdb_bfd_fdopenr): New functions.
	* gdb_bfd.h (gdb_bfd_fopen, gdb_bfd_openr, gdb_bfd_openw)
	(gdb_bfd_openr_iovec, gdb_bfd_openr_next_archived_file)
	(gdb_bfd_fdopenr): Declare.
	* jit.c (bfd_open_from_target_memory): Use gdb_bfd_openr_iovec.
	* m32-rom.c (m32r_load, m32r_upload_command): Use gdb_bfd_openr.
	* machoread.c (macho_symfile_read_all_oso): Use gdb_bfd_openr,
	gdb_bfd_openr_next_archived_file.
	(macho_check_dsym): Use gdb_bfd_openr.
	(macho_add_oso_symfile): Don't call gdb_bfd_stash_filename.
	* procfs.c (insert_dbx_link_bpt_in_file): Use gdb_bfd_fdopenr.
	* remote-m32r-sdi.c (m32r_load): Use gdb_bfd_openr.
	* remote-mips.c (mips_load_srec, pmon_load_fast): Use
	gdb_bfd_openr.
	* remote.c (remote_bfd_open): Use gdb_bfd_openr_iovec.
	* rs6000-nat.c (add_vmap): Use gdb_bfd_openr, gdb_bfd_fdopenr,
	gdb_bfd_openr_next_archived_file.
	* solib-darwin.c (darwin_solib_get_all_image_info_addr_at_init):
	Use gdb_bfd_openr.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Use
	gdb_bfd_openr.
	* solib-spu.c (spu_bfd_fopen): Use gdb_bfd_openr_iovec.
	* solib.c (solib_bfd_fopen): Use gdb_bfd_fopen.
	* spu-linux-nat.c (spu_bfd_open): Use gdb_bfd_openr_iovec.
	* symfile.c (bfd_open_maybe_remote): Use gdb_bfd_openr.
	(symfile_bfd_open): Use gdb_bfd_fopen.
	(generic_load): Use gdb_bfd_openr.
	* windows-nat.c (windows_make_so): Use gdb_bfd_openr.
@
text
@d382 3
d386 2
a387 2
gcore_create_callback (CORE_ADDR vaddr, unsigned long size,
		       int read, int write, int exec, void *data)
d396 1
a396 1
  if (read == 0 && write == 0 && exec == 0)
d407 1
a407 1
  if (write == 0 && !solib_keep_data_in_core (vaddr, size))
d439 1
a439 2
    keep:
      flags |= SEC_READONLY;
d442 3
d485 4
d498 1
d511 1
d520 1
@


1.51
log
@	* bfd-target.c (target_bfd_reopen): Update.
	* cli/cli-dump.c (bfd_openr_with_cleanup)
	(bfd_openw_with_cleanup): Update.
	* corelow.c (core_open): Update.
	* dsrec.c (load_srec): Update.
	* exec.c (exec_file_attach): Update.
	* gcore.c (create_gcore_bfd): Update.
	* gdb_bfd.c (gdb_bfd_ref): Return void.
	(gdb_bfd_open): Update.
	* gdb_bfd.h (gdb_bfd_ref): Return void.
	Update comments.
	* jit.c (jit_bfd_try_read_symtab): Update.
	* m32r-rom.c (m32r_load, m32r_upload_command): Update.
	* machoread.c (macho_symfile_read_all_oso): Update.
	(macho_check_dsym): Update.
	* procfs.c (insert_dbx_link_bpt_in_file): Update.
	* remote-m32r-sdi.c (m32r_load): Update.
	* remote-mips.c (mips_load_srec, pmon_load_fast): Update.
	* rs6000-nat.c (add_vmap): Update.
	* solib-darwin.c (darwin_solib_get_all_image_info_addr_at_init):
	Update.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Update.
	* solib-spu.c (spu_bfd_open): Update.
	* solib.c (solib_bfd_fopen, solib_read_symbols): Update.
	* spu-linux-nat.c (spu_bfd_open): Update.
	* symfile.c (bfd_open_maybe_remote, symfile_bfd_open)
	(generic_load): Update.
	* windows-nat.c (windows_make_so): Update.
@
text
@d54 1
a54 1
  bfd *obfd = bfd_openw (filename, default_gcore_target ());
a55 1
  gdb_bfd_ref (obfd);
a57 1
  gdb_bfd_stash_filename (obfd);
@


1.50
log
@	* symfile.c (symfile_bfd_open): Don't copy name.  Call
	gdb_bfd_stash_filename.
	(load_command): Open the new BFD before freeing the old.
	(bfd_open_maybe_remote): Call gdb_bfd_stash_filename.
	* symfile-mem.c (symbol_file_add_from_memory): Don't copy name.
	Call gdb_bfd_stash_filename.
	* spu-linux-nat.c (spu_bfd_open): Don't copy name.
	* solib-spu.c (spu_bfd_fopen): Don't copy name.  Call
	gdb_bfd_stash_filename.
	* solib-darwin.c (darwin_solib_get_all_image_info_addr_at_init):
	Free found_pathname.
	* rs6000-nat.c (add_vmap): Don't copy filename.  Call
	gdb_bfd_stash_filename.
	* remote.c (remote_bfd_open): Call gdb_bfd_stash_filename.
	* machoread.c (macho_add_oso_symfile): Call
	gdb_bfd_stash_filename.
	(macho_symfile_read_all_oso): Arrange to free archive_name.  Call
	gdb_bfd_stash_filename.
	(macho_check_dsym): Don't copy filename.  Call
	gdb_bfd_stash_filename.
	* jit.c (bfd_open_from_target_memory): Don't copy the filename.
	* gdb_bfd.c (gdb_bfd_stash_filename): New function.
	* gdb_bfd.h (gdb_bfd_stash_filename): Declare.
	* gcore.c (create_gcore_bfd): Call gdb_bfd_stash_filename.
	* exec.c (exec_close): Don't free the BFD's filename.
	(exec_file_attach): Don't copy the filename.  Call
	gdb_bfd_stash_filename.
	* corelow.c (core_close): Don't free the BFD's filename.
	(core_open): Call gdb_bfd_stash_filename.
	* corefile.c (reopen_exec_file): Remove #if 0 code.
	* solib.c (solib_bfd_fopen): Call gdb_bfd_stash_filename.  Free
	pathname.
	* dwarf2read.c (try_open_dwo_file): Call gdb_bfd_stash_filename.
@
text
@d54 1
a54 1
  bfd *obfd = gdb_bfd_ref (bfd_openw (filename, default_gcore_target ()));
d56 1
@


1.49
log
@	* dwarf2read.c (try_open_dwo_file): Use gdb_bfd_ref and
	gdb_bfd_unref.
	(free_dwo_file): Use gdb_bfd_unref.
	* cli/cli-dump.c: Include gdb_bfd.h.
	(bfd_openw_with_cleanup): Use gdb_bfd_ref.
	(bfd_openr_with_cleanup): Likewise.
	* windows-nat.c (windows_make_so): Use gdb_bfd_ref,
	gdb_bfd_unref.
	* utils.c: Include gdb_bfd.h.
	(do_bfd_close_cleanup): Use gdb_bfd_unref.
	* symfile.c: Include gdb_bfd.h.
	(separate_debug_file_exists): Use gdb_bfd_unref.
	(bfd_open_maybe_remote): Use gdb_bfd_ref.
	(symfile_bfd_open): Use gdb_bfd_ref, gdb_bfd_unref.
	(generic_load): Use gdb_bfd_ref.
	(reread_symbols): Use gdb_bfd_unref.
	* symfile-mem.c: Include gdb_bfd.h.
	(symbol_file_add_from_memory): Use make_cleanup_bfd_close.
	* spu-linux-nat.c (spu_bfd_open): Use gdb_bfd_ref, gdb_bfd_unref.
	* solib.c: Include gdb_bfd.h.
	(solib_bfd_fopen): Use gdb_bfd_ref.
	(solib_bfd_open): Use gdb_bfd_unref.
	(free_so_symbols): Use gdb_bfd_unref.
	(reload_shared_libraries_1): Use gdb_bfd_unref.
	* solib-spu.c: Include gdb_bfd.h.
	(spu_bfd_fopen): Use gdb_bfd_ref, gdb_bfd_unref.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Use gdb_bfd_ref,
	gdb_bfd_unref.
	* solib-frv.c: Include gdb_bfd.h.
	(enable_break2): Use gdb_bfd_unref.
	* solib-dsbt.c: Include gdb_bfd.h.
	(enable_break2): Use gdb_bfd_unref.
	* solib-darwin.c: Include gdb_bfd.h.
	(darwin_solib_get_all_image_info_addr_at_init): Use gdb_bfd_ref,
	gdb_bfd_unref.
	(darwin_bfd_open): Use gdb_bfd_unref.
	* rs6000-nat.c (add_vmap): Use gdb_bfd_ref, gdb_bfd_unref.
	* remote-mips.c: Include gdb_bfd.h.
	(mips_load_srec): Use gdb_bfd_ref.
	(pmon_load_fast): Use gdb_bfd_ref.
	* remote-m32r-sdi.c: Include gdb_bfd.h.
	(m32r_load): Use gdb_bfd_ref.
	* record.c: Include gdb_bfd.h.
	(record_save_cleanups): Use gdb_bfd_unref.
	(cmd_record_save): Use gdb_bfd_unref.
	* procfs.c (insert_dbx_link_bpt_in_file): Use gdb_bfd_ref,
	gdb_bfd_unref.
	* objfiles.h (gdb_bfd_close_or_warn): Remove.
	(gdb_bfd_ref, gdb_bfd_unref): Move to gdb_bfd.h.
	* objfiles.c: Include gdb_bfd.h.
	(free_objfile): Use gdb_bfd_unref.
	(gdb_bfd_close_or_warn, gdb_bfd_ref, gdb_bfd_unref): Move to
	gdb_bfd.c.
	* machoread.c (macho_add_oso_symfile): Use gdb_bfd_unref.
	(macho_symfile_read_all_oso): Use gdb_bfd_ref, gdb_bfd_unref.
	(macho_check_dsym): Likewise.
	* m32r-rom.c: Include gdb_bfd.h.
	(m32r_load): Use gdb_bfd_ref.
	(m32r_upload_command): Use gdb_bfd_ref.
	* jit.c: Include gdb_bfd.h.
	(jit_bfd_try_read_symtab): Use gdb_bfd_ref, gdb_bfd_unref.
	* gdb_bfd.h: New file.
	* gdb_bfd.c: New file.
	* gcore.c: Include gdb_bfd.h.
	(create_gcore_bfd): Use gdb_bfd_ref.
	(do_bfd_delete_cleanup): Use gdb_bfd_unref.
	(gcore_command): Use gdb_bfd_unref.
	* exec.c: Include gdb_bfd.h.
	(exec_close): Use gdb_bfd_unref.
	(exec_close_1): Use gdb_bfd_unref.
	(exec_file_attach): Use gdb_bfd_ref.
	* elfread.c: Include gdb_bfd.h.
	(build_id_verify): Use gdb_bfd_unref.
	* dsrec.c: Include gdb_bfd.h.
	(load_srec): Use gdb_bfd_ref.
	* corelow.c: Include gdb_bfd.h.
	(core_close): Use gdb_bfd_unref.
	(core_open): Use gdb_bfd_ref.
	* bfd-target.c: Include gdb_bfd.h.
	(target_bfd_xclose): Use gdb_bfd_unref.
	(target_bfd_reopen): Use gdb_bfd_ref.
	* Makefile.in (SFILES): Add gdb_bfd.c.
	(HFILES_NO_SRCDIR): Add gdb_bfd.h.
	(COMMON_OBS): Add gdb_bfd.o.
@
text
@d58 1
@


1.48
log
@	* gdbarch.sh (find_memory_regions): New callback.
	* gdbarch.c, gdbarch.h: Regenerate.

	* gcore.c (gcore_memory_sections): Try gdbarch find_memory_regions
	callback before falling back to target method.

	* linux-nat.c (read_mapping, linux_nat_find_memory_regions): Remove.
	(linux_target_install_ops): No longer install it.

	* linux-tdep.c (linux_find_memory_regions): New function.
	(linux_init_abi): Install it.
@
text
@d36 1
d54 1
a54 1
  bfd *obfd = bfd_openw (filename, default_gcore_target ());
d114 1
a114 1
  bfd_close (arg);
d158 1
a158 1
  bfd_close (obfd);
@


1.47
log
@	* gdbarch.sh (make_corefile_notes): New architecture callback.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Likewise.

	* gcore.c (write_gcore_file): Try gdbarch_make_corefile_notes
	before target_make_corefile_notes.  If NULL is returned, the
	target does not support core file generation.

	* linux-nat.c: Include "linux-tdep.h".
	(find_signalled_thread, find_stop_signal): Remove.
	(linux_nat_do_thread_registers): Likewise.
	(struct linux_nat_corefile_thread_data): Likewise.
	(linux_nat_corefile_thread_callback): Likewise.
	(iterate_over_spus): Likewise.
	(struct linux_spu_corefile_data): Likewise.
	(linux_spu_corefile_callback): Likewise.
	(linux_spu_make_corefile_notes): Likewise.
	(linux_nat_collect_thread_registers): New function.
	(linux_nat_make_corefile_notes): Replace contents by call to
	linux_make_corefile_notes passing linux_nat_collect_thread_registers
	as native-only callback.

	* linux-tdep.h: Include "bfd.h".
	(struct regcache): Add forward declaration.
	(linux_collect_thread_registers_ftype): New typedef.
	(linux_make_corefile_notes): Add prototype.
	* linux-tdep.c: Include "gdbthread.h", "gdbcore.h", "regcache.h",
	"regset.h", and "elf-bfd.h".
	(find_signalled_thread, find_stop_signal): New functions.
	(linux_spu_make_corefile_notes): Likewise.
	(linux_collect_thread_registers): Likewise.
	(struct linux_corefile_thread_data): New data structure.
	(linux_corefile_thread_callback): New funcion.
	(linux_make_corefile_notes): Likewise.
	(linux_make_corefile_notes_1): Likewise.
	(linux_init_abi): Install it.
@
text
@d564 8
a571 2
  if (target_find_memory_regions (gcore_create_callback, obfd) != 0)
    return 0;			/* FIXME: error return/msg?  */
@


1.46
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d74 10
a83 1
  note_data = target_make_corefile_notes (obfd, &note_size);
d86 11
a96 14
  if (note_data != NULL && note_size != 0)
    {
      note_sec = bfd_make_section_anyway_with_flags (obfd, "note0",
						     SEC_HAS_CONTENTS
						     | SEC_READONLY
						     | SEC_ALLOC);
      if (note_sec == NULL)
	error (_("Failed to create 'note' section for corefile: %s"),
	       bfd_errmsg (bfd_get_error ()));

      bfd_set_section_vma (obfd, note_sec, 0);
      bfd_set_section_alignment (obfd, note_sec, 0);
      bfd_set_section_size (obfd, note_sec, note_size);
    }
d103 2
a104 6
  if (note_data != NULL && note_size != 0)
    {
      if (!bfd_set_section_contents (obfd, note_sec, note_data, 0, note_size))
	warning (_("writing note section (%s)"), 
		 bfd_errmsg (bfd_get_error ()));
    }
@


1.45
log
@2011-01-07  Michael Snyder  <msnyder@@vmware.com>

	* ada-lang.c: Comment cleanup, mostly periods and spaces.
	* ada-lang.h: Ditto.
	* ada-tasks.c: Ditto.
	* ada-valprint.c: Ditto.
	* aix-threads.c: Ditto.
	* alpha-linux-nat.c: Ditto.
	* alpha-linux-tdep.c: Ditto.
	* alpha-mdebug-tdep.c: Ditto.
	* alpha-nat.c: Ditto.
	* alpha-osf1-tdep.c: Ditto.
	* alpha-tdep.c: Ditto.
	* alphabsd-nat.c: Ditto.
	* alphabsd-tdep.c: Ditto.
	* amd64-darwin-tdep.c: Ditto.
	* amd64-linux-nat.c: Ditto.
	* amd64-linux-tdep.c: Ditto.
	* amd64-sol2-tdep.c: Ditto.
	* amd64-tdep.c: Ditto.
	* amd64-fbsd-tdep.c: Ditto.
	* amd64-nbsd-tdep.c: Ditto.
	* amd64-obsd-tdep.c: Ditto.
	* amd64-linux-nat.c: Ditto.
	* amd64-linux-tdep.c: Ditto.
	* arm-tdep.c: Ditto.
	* arm-tdep.h: Ditto.
	* armnbsd-nat.c: Ditto.
	* avr-tdep.c: Ditto.
	* bfin-tdep.c: Ditto.
	* bsd-kvm.c: Ditto.
	* c-typeprintc: Ditto.
	* c-valprint.c: Ditto.
	* coff-pe-read.h: Ditto.
	* coffreead.c: Ditto.
	* cris-tdep.c: Ditto.
	* d-lang.c: Ditto.
	* darwin-nat-info.c: Ditto.
	* darwin-nat.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* dcache.c: Ditto.
	* dcache.h: Ditto.
	* dec-thread.c: Ditto.
	* defs.h: Ditto.
	* demangle.c: Ditto.
	* dicos-tdep.c: Ditto.
	* dictionary.c: Ditto.
	* dictionary.h: Ditto.
	* dink32-rom.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dsrec.c: Ditto.
	* dummy-frame.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* environ.c: Ditto.
	* eval.c: Ditto.
	* event-top.h: Ditto.
	* exceptions.c: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-exp.y: Ditto.
	* f-lang.c: Ditto.
	* f-lang.h: Ditto.
	* f-typeprint.c: Ditto.
	* f-valprint.c: Ditto.
	* fbsd-nat.c: Ditto.
	* findvar.c: Ditto.
	* fork-child.c: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* frv-linux-tdep.c: Ditto.
	* frv-tdep.c: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_string.h: Ditto.
	* gdb_thread_db.h: Ditto.
	* gdb_wait.h: Ditto.
	* gdbarch.sh: Ditto.
	* gdbcore.h: Ditto.
	* gdbthread.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* gnu-nat.c: Ditto.
	* gnu-nat.h: Ditto.
	* gnu-v2-abi.c: Ditto.
	* gnu-v3-abi.c: Ditto.
	* go32-nat.c: Ditto.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
@
text
@d3 1
a3 2
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
   2011 Free Software Foundation, Inc.
@


1.45.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 1
   Copyright (C) 2001-2012 Free Software Foundation, Inc.
@


1.44
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d430 1
a430 1
	      goto keep;	/* break out of two nested for loops */
d501 1
a501 1
  /* Make a heap segment. */
@


1.43
log
@run copyright.sh for 2011.
@
text
@d540 2
a541 1
	  warning (_("Memory read failed for corefile section, %s bytes at %s."),
@


1.42
log
@	PR 4606
	* gcore.c (gcore_create_callback): Clear SEC_HAS_CONTENTS rather
	than setting SEC_NEVER_LOAD on sections that need not be copied.
@
text
@d3 2
a4 2
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   Free Software Foundation, Inc.
@


1.41
log
@gdb/
	Code cleanup.
	* defs.h (find_memory_region_ftype): New typedef.
	(exec_set_find_memory_regions): Use it.
	* exec.c (exec_set_find_memory_regions): Use find_memory_region_ftype.
	* fbsd-nat.c (fbsd_find_memory_regions): Likewise.
	* gcore.c (objfile_find_memory_regions): Likewise.
	* gnu-nat.c (gnu_find_memory_regions): Likewise.
	* linux-nat.c (linux_nat_find_memory_regions): Likewise.
	* procfs.c (iterate_over_mappings_cb_ftype): Remove.
	(iterate_over_mappings): Rename iterate_over_mappings_cb_ftype to
	find_memory_region_ftype.
	(insert_dbx_link_bpt_in_region): Likewise.
	(iterate_over_mappings): Likewise.  Drop the comment part about the
	function prototype.
	(find_memory_regions_callback): Use find_memory_region_ftype.
	(proc_find_memory_regions): Likewise.
	(info_mappings_callback): Rename iterate_over_mappings_cb_ftype to
	find_memory_region_ftype.
	* target.c (dummy_find_memory_regions): Use find_memory_region_ftype.
	* target.h (struct target_ops) <to_find_memory_regions>: Likewise.
@
text
@d429 1
a429 2
	      flags &= ~SEC_LOAD;
	      flags |= SEC_NEVER_LOAD;
@


1.40
log
@2010-05-14  Michael Snyder  <msnyder@@vmware.com>

	* gcore.c: White space.
	* gdb.c: White space.
	* gdbtypes.c: White space.
	* gnu-nat.c: White space.
	* gnu-v2-abi.c: White space.
	* gnu-v3-abi.c: White space.
@
text
@d465 1
a465 3
objfile_find_memory_regions (int (*func) (CORE_ADDR, unsigned long,
					  int, int, int, void *),
			     void *obfd)
@


1.39
log
@2010-05-06  Michael Snyder  <msnyder@@vmware.com>

	* xml-support.c (xinclude_start_include): Delete unused variable.
	(xml_process_xincludes): Delete unused variable.
	* xml-syscall.c (syscall_parse_xml): Delete unused variable.
	* target-descriptions.c (tdesc_gdb_type): Delete unused variable.
	(tdesc_find_arch_register): Delete unused variable.
	(tdesc_use_registers): Delete unused variable.
	* xml-tdesc.c (tdesc_start_target): Delete unused variable.
	* inferior.c (print_inferior): Delete unused variable.
	* record.c (record_open_1): Delete unused variable.
	(record_restore): Delete unused variable.
	(cmd_record_save): Delete unused variable.
	* gcore.c (derive_heap_segment): Delete unused variable.
	(objfile_find_memory_regions): Use unused variable.
	* jit.c (jit_inferior_init): Delete unused variable.
	* progspace.c (clone_program_space): Delete unused variable.
	(pspace_empty_p): Delete unused variable.
@
text
@d55 1
d417 1
@


1.38
log
@	gdb/
	* gcore.c (do_bfd_delete_cleanup): New function.
	(gcore_command): Use it.  Discard the cleanup after success.
	(gcore_copy_callback): Delete dead code.
@
text
@a302 1
  struct gdbarch *gdbarch;
a477 1
      int ret;
d484 1
a484 1
	  ret = (*func) (obj_section_addr (objsec), bfd_section_size (ibfd, isec),
@


1.37
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d105 10
d145 2
a146 2
  /* Need a cleanup that will close the file (FIXME: delete it?).  */
  old_chain = make_cleanup_bfd_close (obfd);
d154 2
a155 3
  /* Clean-ups will close the output file and free malloc memory.  */
  do_cleanups (old_chain);
  return;
a532 3
  /* ??? This is crap since xmalloc should never return NULL.  */
  if (memhunk == NULL)
    error (_("Not enough memory to create corefile."));
@


1.36
log
@	* gcore.c: Include solib.h.
	(gcore_create_callback): Call solib_keep_data_in_core when
	considering not saving memory in core file.
	* solib-svr4.c (svr4_keep_data_in_core): New.
	(_initialize_svr4_solib): Initialize
	svr4_so_ops.keep_data_in_core.
	* solib.c (solib_keep_data_in_core): New.
	* solib.h (solib_keep_data_in_core): Declare.
	* solist.h (struct target_so_ops): Add keep_data_in_core.
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.35
log
@2009-10-16  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@msnyder-server.eng.vmware.com>

	* record.c (RECORD_FILE_MAGIC): New constant.
	(record_arch_list_cleanups): Renamed from record_message_cleanups.
	(bfdcore_read): New function.
	(netorder64): New function.
	(netorder32): New function.
	(netorder16): New function.
	(record_restore): New function.  Restore a saved record log.
	(bfdcore_write): New function.
	(cmd_record_restore): New function.
	(cmd_record_save): New function.  Save a record log to a file.
	(_initialize_record): Set up commands for save and restore.

2009-10-17  Michael Snyder  <msnyder@@vmware.com>

	* gcore.h: New file.
	* gcore.c (create_gcore_bfd): New function.
	(write_gcore_file): New function.
	(call_target_sbrk): New function.  Abstracted from gcore_command.
	(gcore_command): Call call_target_sbrk.
@
text
@d27 1
d393 1
a393 1
  if (write == 0)
@


1.34
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d28 3
a30 1

a31 1

d33 3
d47 2
a48 1
/* Generate a core file from the inferior process.  */
d50 2
a51 2
static void
gcore_command (char *args, int from_tty)
d53 7
a59 6
  struct cleanup *old_chain;
  char *corefilename, corefilename_buffer[40];
  asection *note_sec = NULL;
  bfd *obfd;
  void *note_data = NULL;
  int note_size = 0;
d61 2
a62 3
  /* No use generating a corefile without a target process.  */
  if (!target_has_execution)
    noprocess ();
a63 8
  if (args && *args)
    corefilename = args;
  else
    {
      /* Default corefile name is "core.PID".  */
      sprintf (corefilename_buffer, "core.%d", PIDGET (inferior_ptid));
      corefilename = corefilename_buffer;
    }
d65 6
a70 14
  if (info_verbose)
    fprintf_filtered (gdb_stdout,
		      "Opening corefile '%s' for output.\n", corefilename);

  /* Open the output file.  */
  obfd = bfd_openw (corefilename, default_gcore_target ());
  if (!obfd)
    error (_("Failed to open '%s' for output."), corefilename);

  /* Need a cleanup that will close the file (FIXME: delete it?).  */
  old_chain = make_cleanup_bfd_close (obfd);

  bfd_set_format (obfd, bfd_core);
  bfd_set_arch_mach (obfd, default_gcore_arch (), default_gcore_mach ());
d99 26
a124 1
	warning (_("writing note section (%s)"), bfd_errmsg (bfd_get_error ()));
d127 13
d242 44
a292 1
  struct objfile *sbrk_objf;
a296 1
  struct value *zero, *sbrk;
d331 2
a332 21
  /* Now get the top-of-heap by calling sbrk in the inferior.  */
  if (lookup_minimal_symbol ("sbrk", NULL, NULL) != NULL)
    {
      sbrk = find_function_in_inferior ("sbrk", &sbrk_objf);
      if (sbrk == NULL)
	return 0;
    }
  else if (lookup_minimal_symbol ("_sbrk", NULL, NULL) != NULL)
    {
      sbrk = find_function_in_inferior ("_sbrk", &sbrk_objf);
      if (sbrk == NULL)
	return 0;
    }
  else
    return 0;

  gdbarch = get_objfile_arch (sbrk_objf);
  zero = value_from_longest (builtin_type (gdbarch)->builtin_int, 0);
  gdb_assert (zero);
  sbrk = call_function_by_hand (sbrk, 1, &zero);
  if (sbrk == NULL)
a333 1
  top_of_heap = value_as_long (sbrk);
d351 1
a351 1
  int p_type;
d356 2
d359 1
a359 1
    p_type = PT_NOTE;
@


1.34.2.1
log
@2009-08-06  Michael Snyder  <msnyder@@msnyder-server.eng.vmware.com>

	* gcore.c (create_gcore_bfd): New function, abstracted
	from gcore_command for export.
	(write_gcore_file): New function, abstracted from
	gcore_command for export.
	(gcore_command): Call helper functions (above).

	(call_target_sbrk): New function, abstracted from
	derive_heap_segment.
	(derive_heap_segment): Call helper function (above).

	(load_core_segments): New function.
	(load_corefile): New function.
	(rcore_command): New function.
	(_initialize_gcore): Add new command "restore-core-file".
@
text
@a27 2
#include "arch-utils.h"
#include "completer.h"
d43 1
a43 1
/* create_gcore_bfd -- helper for gcore_command (exported).  */
d45 2
a46 2
extern bfd *
create_gcore_bfd (char *filename)
d48 26
a73 1
  bfd *obfd = bfd_openw (filename, default_gcore_target ());
d75 5
a79 1
    error (_("Failed to open '%s' for output."), filename);
a81 11
  return obfd;
}

/* write_gcore_file -- helper for gcore_command (exported).  */

extern void
write_gcore_file (bfd *obfd)
{
  void *note_data = NULL;
  int note_size = 0;
  asection *note_sec = NULL;
d110 1
a110 26
	warning (_("writing note section (%s)"), 
		 bfd_errmsg (bfd_get_error ()));
    }
}

/* gcore_command -- implements the 'gcore' command.
   Generate a core file from the inferior process.  */

static void
gcore_command (char *args, int from_tty)
{
  struct cleanup *old_chain;
  char *corefilename, corefilename_buffer[40];
  bfd *obfd;

  /* No use generating a corefile without a target process.  */
  if (!target_has_execution)
    noprocess ();

  if (args && *args)
    corefilename = args;
  else
    {
      /* Default corefile name is "core.PID".  */
      sprintf (corefilename_buffer, "core.%d", PIDGET (inferior_ptid));
      corefilename = corefilename_buffer;
a112 13
  if (info_verbose)
    fprintf_filtered (gdb_stdout,
		      "Opening corefile '%s' for output.\n", corefilename);

  /* Open the output file.  */
  obfd = create_gcore_bfd (corefilename);

  /* Need a cleanup that will close the file (FIXME: delete it?).  */
  old_chain = make_cleanup_bfd_close (obfd);

  /* Call worker function.  */
  write_gcore_file (obfd);

a214 41
static bfd_vma
call_target_sbrk (int sbrk_arg)
{
  struct objfile *sbrk_objf;
  struct gdbarch *gdbarch;
  bfd_vma top_of_heap;
  struct value *target_sbrk_arg;
  struct value *sbrk_fn, *ret;
  bfd_vma tmp;

  if (lookup_minimal_symbol ("sbrk", NULL, NULL) != NULL)
    {
      sbrk_fn = find_function_in_inferior ("sbrk", &sbrk_objf);
      if (sbrk_fn == NULL)
	return (bfd_vma) 0;
    }
  else if (lookup_minimal_symbol ("_sbrk", NULL, NULL) != NULL)
    {
      sbrk_fn = find_function_in_inferior ("_sbrk", &sbrk_objf);
      if (sbrk_fn == NULL)
	return (bfd_vma) 0;
    }
  else
    return (bfd_vma) 0;

  gdbarch = get_objfile_arch (sbrk_objf);
  target_sbrk_arg = value_from_longest (builtin_type (gdbarch)->builtin_int, 
					sbrk_arg);
  gdb_assert (target_sbrk_arg);
  ret = call_function_by_hand (sbrk_fn, 1, &target_sbrk_arg);
  if (ret == NULL)
    return (bfd_vma) 0;

  tmp = value_as_long (ret);
  if ((LONGEST) tmp <= 0 || (LONGEST) tmp == 0xffffffff)
    return (bfd_vma) 0;

  top_of_heap = tmp;
  return top_of_heap;
}

d222 1
d227 1
d262 21
a282 2
  top_of_heap = call_target_sbrk (0);
  if (top_of_heap == (bfd_vma) 0)
d284 1
d302 1
a302 1
  int p_type = 0;
d307 1
a307 1
  else if (strncmp (bfd_section_name (obfd, osec), "note", 4) == 0)
a308 2
  else
    p_type = PT_NULL;
a518 192
struct load_core_args_params {
  int from_tty;
  bfd_vma top_of_heap;
};

static void
load_core_segments (bfd *abfd, asection *asect, void *arg)
{
  struct load_core_args_params *params = arg;
  struct cleanup *old_chain;
  char *memhunk;
  int ret;

  if ((bfd_section_size (abfd, asect) > 0) &&
      (bfd_get_section_flags (abfd, asect) & SEC_LOAD) &&
      !(bfd_get_section_flags (abfd, asect) & SEC_READONLY))
    {
      if (info_verbose && params->from_tty)
	{
	  printf_filtered (_("Load core section %s"), 
			   bfd_section_name (abfd, asect));
	  printf_filtered (_(", vma 0x%08lx to 0x%08lx"), 
			   (unsigned long) bfd_section_vma (abfd, asect),
			   (unsigned long) bfd_section_vma (abfd, asect) +
			   (int) bfd_section_size (abfd, asect));
	  printf_filtered (_(", size = %d"), 
			   (int) bfd_section_size (abfd, asect));
	  printf_filtered (_(".\n"));
	}
      /* Fixme cleanup? */
      memhunk = xmalloc (bfd_section_size (abfd, asect));
      bfd_get_section_contents (abfd, asect, memhunk, 0, 
				bfd_section_size (abfd, asect));
      if ((ret = target_write_memory (bfd_section_vma (abfd, asect), 
				      memhunk, 
				      bfd_section_size (abfd, asect))) != 0)
	{
	  print_sys_errmsg ("load_core_segments", ret);
	  if ((LONGEST) params->top_of_heap < 
	      (LONGEST) bfd_section_vma (abfd, asect) + 
	      (LONGEST) bfd_section_size (abfd, asect))
	    {
	      int increment = bfd_section_vma (abfd, asect) +
		bfd_section_size (abfd, asect) - params->top_of_heap;

	      params->top_of_heap = call_target_sbrk (increment);
	      if (params->top_of_heap == 0)
		error ("sbrk failed, TOH = 0x%08lx", params->top_of_heap);
	      else
		printf_filtered ("Increase TOH to 0x%08lx and retry.\n",
				 (unsigned long) params->top_of_heap);
	      if (target_write_memory (bfd_section_vma (abfd, asect), 
				       memhunk, 
				       bfd_section_size (abfd, asect)) != 0)
		{
		  error ("Nope, still failed.");
		}
	    }
	}
      xfree (memhunk);
    }
}

#include <fcntl.h>
#ifndef O_BINARY
#define O_BINARY 0
#endif

#include "regcache.h"
#include "regset.h"

extern bfd *
load_corefile (char *filename, int from_tty)
{
  struct load_core_args_params params;
  struct bfd_section *regsect;
  const struct regset *regset;
  struct regcache *regcache;
  struct cleanup *old_chain;
  struct gdbarch *gdbarch;
  char *scratch_path;
  int scratch_chan;
  char *contents;
  bfd *core_bfd;
  int size;

  scratch_chan = openp (getenv ("PATH"), OPF_TRY_CWD_FIRST, filename, 
			O_BINARY | O_RDONLY | O_LARGEFILE, &scratch_path);
  if (scratch_chan < 0)
    perror_with_name (filename);

  core_bfd = bfd_fdopenr (scratch_path, gnutarget, scratch_chan);
  old_chain = make_cleanup_bfd_close (core_bfd);
  if (!core_bfd)
    perror_with_name (scratch_path);

  if (!bfd_check_format (core_bfd, bfd_core))
    error (_("\"%s\" is not a core file: %s"), 
	   filename, bfd_errmsg (bfd_get_error ()));

  params.from_tty = from_tty;
  params.top_of_heap = call_target_sbrk (0);
  if (params.top_of_heap == 0)
    error (_("Couldn't get sbrk."));

  bfd_map_over_sections (core_bfd, load_core_segments, (void *) &params);
  /* Now need to get/set registers.  */
  regsect = bfd_get_section_by_name (core_bfd, ".reg");

  if (!regsect)
    error (_("Couldn't find .reg section."));

  size = bfd_section_size (core_bfd, regsect);
  contents = alloca (size);
  bfd_get_section_contents (core_bfd, regsect, contents, 0, size);

  /* See FIXME kettenis/20031023 comment in corelow.c */
  gdbarch = gdbarch_from_bfd (core_bfd);

  if (gdbarch && gdbarch_regset_from_core_section_p (gdbarch))
    {
      regset = gdbarch_regset_from_core_section (gdbarch, ".reg", size);
      if (!regset)
	error (_("Failed to allocate regset."));

      registers_changed ();
      regcache = get_current_regcache ();
      regset->supply_regset (regset, regcache, -1, contents, size);
      reinit_frame_cache ();
      target_store_registers (regcache, -1);
    }
  else
    error (_("Failed to get regset from core section"));

  discard_cleanups (old_chain);
  return core_bfd;
}

static void
rcore_command (char *args, int from_tty)
{
  extern void nullify_last_target_wait_ptid (void);
  char *corefilename, corefilename_buffer[40];
  struct cleanup *old_chain;
  static int rcore_warned;
  bfd  *core_bfd;

  /* Can't restore a corefile without a target process.  */
  if (!target_has_execution)
    noprocess ();

  /* Experimental warning.  Remove upon confidence.  */
  if (!rcore_warned)
    {
      warning ("This command is experimental, and may have dire\n\
and unexpected results!  Proceed at your own risk.");
      if (!query ("Are you sure you want to go there? "))
	{
	  fputs_filtered ("Cancelled at user request.\n", gdb_stdout);
	  return;
	}
      else
	{
	  fputs_filtered ("Very well.  Warning will not be repeated.\n",
			  gdb_stdout);
	}
    }
  rcore_warned = 1;

  if (args && *args)
    corefilename = args;
  else
    {
      /* Default corefile name is "core.PID".  */
      sprintf (corefilename_buffer, "core.%d", PIDGET (inferior_ptid));
      corefilename = corefilename_buffer;
    }

  if (info_verbose)
    fprintf_filtered (gdb_stdout,
		      _("Opening corefile '%s' for input.\n"), corefilename);

  core_bfd = load_corefile (corefilename, from_tty);
  old_chain = make_cleanup_bfd_close (core_bfd);

  reinit_frame_cache ();
  nullify_last_target_wait_ptid ();
  print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
  /* Cleanups will close bfd etc. */
  do_cleanups (old_chain);
}

a524 2
  struct cmd_list_element *c;

a530 6

  c = add_com ("restore-core-file", class_obscure, rcore_command, _("\
Restore the machine state from a core file into the debugged process.\n\
Argument is optional filename.  Default filename is 'core.<process_id>'."));
  set_cmd_completer (c, filename_completer);
  add_com_alias ("rcore", "restore-core-file", class_obscure, 1);
@


1.33
log
@	* gdbarch.sh (gcore_bfd_target): New gdbarch callback.
	* gdbarch.h, gdbarch.c: Regenerate.

	* gcore.c (default_gcore_target): Make return value const.
	Call gdbarch_gcore_bfd_target if present.
	(default_gcore_arch, default_gcore_mach): Use target_gdbarch.

	* corelow.c (core_read_description): Call gdbarch_core_read_description
	on core_gdbarch instead of current_gdbarch.

	* ppc-linux-tdep.c (ppc_linux_init_abi): Install gcore_bfd_target.
@
text
@d334 2
a335 2
          fprintf_filtered (gdb_stdout, "Ignore segment, %s bytes at 0x%s\n",
                            plongest (size), paddr_nz (vaddr));
d392 2
a393 2
      fprintf_filtered (gdb_stdout, "Save segment, %s bytes at 0x%s\n",
			plongest (size), paddr_nz (vaddr));
d485 3
a487 2
	  warning (_("Memory read failed for corefile section, %s bytes at 0x%s."),
		   plongest (size), paddr (bfd_section_vma (obfd, osec)));
@


1.32
log
@2008-02-21  Pedro Alves  <pedro@@codesorcery.com>

	Silence a few -Wmissing-prototypes warnings.

	PR build/9877:
	* amd64-nat.c: Include "amd64-nat.h".
	* fork-child.c (_initialize_fork_child): Ditto.
	* gcore.c (_initialize_gcore): Ditto.
	* inf-ptrace.c: Include "inf-ptrace.h".
	(inf_ptrace_store_registers): Make it static.
	* linux-nat.c (linux_nat_terminal_ours): Make it static.
	(_initialize_linux_nat): Declare before definition.
	* linux-tdep.c: Include "linux-tdep.h".
	* linux-thread-db.c (_initialize_thread_db): Declare before
	definition.
	* proc-service.c (_initialize_proc_service): Ditto.
	* remote.c (remote_send_printf): Make it static.
	* solib.c: Include "solib.h".
	* symfile-mem.c (_initialize_symfile_mem): Declare before
	definition.
	* ada-lang.c (ada_la_decode, ada_match_name)
	(ada_suppress_symbol_printing, ada_is_array_type)
	(ada_value_ptr_subscript, ada_array_length)
	(ada_to_static_fixed_value): Make them static.
	(_initialize_ada_language): Declare before definition.
	* ada-tasks.c (ada_get_task_number, ada_get_environment_task)
	(ada_task_list_changed, ada_new_objfile_observer): Make them
	static.
	(_initialize_tasks): Declare before definition.
	* addrmap.c (_initialize_addrmap): Declare before definition.
	* auxv.c (default_auxv_parse): Make it static.
	* bfd-target.c (target_bfd_xfer_partial, target_bfd_xclose): Make
	them static.
	* breakpoint.c (remove_sal): Add line break.
	(expand_line_sal_maybe): Make it static.
	* cp-name-parser.y: Include "cp-support.h".
	* cp-valprint.c (cp_find_class_member): Make it static.
	* eval.c (value_f90_subarray): Ditto.
	* exceptions.c (print_any_exception): Ditto.
	* findcmd.c (_initialize_mem_search): Declare before definition.
	* frame.c (frame_observer_target_changed): Make it static.
	* gnu-v3-abi.c (gnuv3_find_method_in): Make it static.
	* inf-child.c: Include "inf-child.h".
	* inferior.h (valid_inferior_id): Rename to ...
	(valid_gdb_inferior_id): ... this.
	* infrun.c (infrun_thread_stop_requested, siginfo_make_value):
	Make them static.
	* jv-lang.c (java_language_arch_info): Make it static.
	* m2-typeprint.c (m2_get_discrete_bounds): Ditto.
	* osdata.c (info_osdata_command): Make it static.
	* regcache.c (regcache_observer_target_changed): Make it static.
	* reverse.c (_initialize_reverse): Declare before definition.
	* stabsread.c (cleanup_undefined_types_noname)
	(cleanup_undefined_types_1): Make them static.
	* symfile.c (place_section): Make it static.
	* symtab.c (find_pc_sect_psymtab_closer): Make it static.
	* target-descriptions.c (_initialize_target_descriptions): Declare
	before definition.
	* target.c (default_get_ada_task_ptid, find_default_can_async_p)
	(find_default_is_async_p, find_default_supports_non_stop): Make
	them static.
	(target_supports_non_stop): Add prototype.
	(dummy_pid_to_str): Make it static.
	* utils.c (_initialize_utils): Declare before definition.
	* ada-exp.y (_initialize_ada_exp): Declare before definition.
	* solib-svr4.c (HAS_LM_DYNAMIC_FROM_LINK_MAP): Add a prototype.
	* target.h (struct target_ops): Add a prototype to the
	to_can_execute_reverse callback.
	* macroscope.c (_initialize_macroscope): Declare before definition.
	* cp-namespace.c (_initialize_cp_namespace): Declare before definition.
	* python/python.c (_initialize_python): Declare before definition.
	* tui/tui-command.c: Include "tui/tui-command.h".
	* tui/tui-data.c (init_content_element, init_win_info): Make them
	static.
	* tui/tui-disasm.c: Include "tui/tui-disasm.h".
	* tui/tui-interp.c (_initialize_tui_interp): Declare before
	definition.
	* tui/tui-layout.c: Include "tui/tui-layout.h".
	(_initialize_tui_layout): Declare before definition.
	* tui/tui-regs.c: Include "tui/tui-regs.h".
	(tui_display_reg_element_at_line): Make it static.
	(_initialize_tui_regs): Declare before definition.
	* tui/tui-stack.c (_initialize_tui_stack): Declare before
	definition.
	* tui/tui-win.c: Include "tui/tui-win.h".
	(_initialize_tui_win): Declare before definition.
	(tui_sigwinch_handler): Make it static.  Wrap in ifdef SIGWINCH.
	* tui/tui-win.h (tui_sigwinch_handler): Delete declaration.
	(tui_get_cmd_list): Add a prototype.
	* tui/tui-windata.c: Include tui-windata.h.
	* tui/tui-wingeneral.c (box_win): Make it static.
	* cli/cli-logging.c (show_logging_command): Make it static.
	(_initialize_cli_logging): Declare before definition.
	* mi/mi-common.c (_initialize_gdb_mi_common): Declare before
	definition.
@
text
@d38 1
a38 1
static char *default_gcore_target (void);
d128 1
a128 1
  const struct bfd_arch_info *bfdarch = gdbarch_bfd_arch_info (current_gdbarch);
d142 1
a142 2
  const struct bfd_arch_info * bfdarch = gdbarch_bfd_arch_info
					 (current_gdbarch);
d152 1
a152 1
static char *
d155 6
a160 1
  /* FIXME: This may only work for ELF targets.  */
@


1.31
log
@        Updated copyright notices for most files.
@
text
@d514 3
@


1.30
log
@	* valops.c: Include "objfiles.h" and "symtab.h".
	(find_function_in_inferior): New argument OBJF_P.  Use it to return
	objfile where function is defined.  Use per-objfile arch types
	instead of builtin_type_ to define default return type.

	* linux-fork.c (checkpoint_command): Update calls.  Use per-objfile
	architecture to define inferior call argument types.
	* gcore.c (derive_heap_segment): Likewise.
	* objc-lang.c (value_nsstring): Likewise.
	* scm-lang.c (scm_lookup_name): Likewise.
	* scm-valprint.c (scm_inferior_print): Likewise.
	* valops.c (value_allocate_space_in_inferior): Likewise.

	* eval.c (evaluate_subexp_standard): Update calls.
	* objc-lang.c (lookup_objc_class, print_object_command): Likewise.

	* linux-fork.c: Include "objfiles.h".
	* scm-lang.c: Include "objfiles.h".
	* scm-valprint.c: Include "objfiles.h".
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
@


1.29
log
@	* defs.h (plongest,pulongest): Renamed from paddr_u,paddr_d.
	Change argument of pulongest from CORE_ADDR to ULONGEST.
	All callers updated.
	* utils.c (plongest): Renamed from paddr_d.
	(pulongest): Renamed from paddr_u, change arg type to ULONGEST.
	* remote-mips.c (send_srec): Use paddr_nz instead of paddr_u in
	`CORE_ADDR addr' arg of error message.
@
text
@d218 2
d261 1
a261 1
      sbrk = find_function_in_inferior ("sbrk");
d267 1
a267 1
      sbrk = find_function_in_inferior ("_sbrk");
d274 2
a275 1
  zero = value_from_longest (builtin_type_int, 0);
@


1.28
log
@	* objfiles.h (struct obj_section): Remove addr and endaddr fields.
	(obj_section_offset, obj_section_addr, obj_section_endaddr): New
	macros.
	* objfiles.c (add_to_objfile_sections): Don't set addr, endaddr
	and offset.  Use size_t instead of unsigned long.
	(build_objfile_section_table): Use size_t instead of unsigned
	long.
	(objfile_relocate): Don't relocate s->addr and s->endaddr, they're
	gone.
	(find_pc_sect_section): Use obj_section_addr and
	obj_section_endaddr.
	* symfile.c (symfile.c): Remove code that maps sections
	offsets in "addr" to the object's sections.
	* blockframe.c (find_pc_partial_function): Use obj_section_endaddr.
	* gcore.c (gcore_create_callback): Use obj_section_addr and
	obj_section_endaddr.
	* maint.c (print_objfile_section_info): Likewise.
	* printcmd.c (sym_info): Use obj_section_addr and
	obj_section_endaddr.
	* symtab.c (fixup_section): Likewise.
@
text
@d328 1
a328 1
                           paddr_d (size), paddr_nz (vaddr));
d386 1
a386 1
			paddr_d (size), paddr_nz (vaddr));
d479 1
a479 1
		   paddr_d (size), paddr (bfd_section_vma (obfd, osec)));
@


1.27
log
@	Updated copyright notices for most files.
@
text
@d347 2
a348 2
	  bfd_vma start = objsec->addr & -align;
	  bfd_vma end = (objsec->endaddr + align - 1) & -align;
d418 1
a418 1
	  ret = (*func) (objsec->addr, bfd_section_size (ibfd, isec),
@


1.26
log
@2007-11-16  Markus Deuling  <deuling@@de.ibm.com>

	* m32r-rom.c (m32r_supply_register): Use get_regcache_arch to get at
	the current architecture by regcache.
	* ppcnbsd-nat.c (ppcnbsd_supply_pcb): Likewise.
	* ppc-linux-nat.c (fetch_altivec_register, fetch_spe_register)
	(fetch_register, supply_vrregset, fetch_ppc_registers)
	(store_altivec_register, store_spe_register, store_register)
	(fill_vrregset, store_ppc_registers): Likewise.
	* ppcobsd-nat.c (ppcobsd_supply_pcb): Likewise.
	* win32-nat.c (do_win32_fetch_inferior_registers)
	(do_win32_store_inferior_registers): Likewise.
	* procfs.c (procfs_fetch_registers, procfs_store_registers): Likewise.
	* remote-m32r-sdi.c (m32r_fetch_registers)
	(m32r_store_registers): Likewise.
	* remote-sim.c (gdbsim_fetch_register, gdbsim_store_register): Likewise.

	* trad-frame.c (trad_frame_alloc_saved_regs): Replace current_gdbarch by
	gdbarch.
	* user-regs.c (user_reg_map_name_to_regnum): Likewise.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call)
	(do_ppc_sysv_return_value, ppc64_sysv_abi_push_dummy_call)
	(ppc64_sysv_abi_return_value): Likewise.
	* m32c-tdep.c (m32c_register_reggroup_p): Likewise.
	* m2-lang.c (build_m2_types): Likewise.
	* ppc-linux-tdep.c (ppc_linux_sigtramp_cache
	* ppcnbsd-tdep.c (ppcnbsd_sigtramp_cache_init): Likewise.
	* ppcobsd-tdep.c (ppcobsd_sigtramp_frame_cache): Likewise.
	* rs6000-tdep.c (ppc_dwarf2_frame_init_reg): Likewise.

	* m68hc11-tdep.c (m68hc11_frame_unwind_cache): Use get_frame_arch to
	get at the current architecture by frame_info.
	* gcore.c (derive_stack_segment): Likewise.

	* shnbsd-nat.c (GETREGS_SUPPLIES): Add gdbarch parameter.
	(shnbsd_fetch_inferior_registers, shnbsd_store_inferior_registers): Add
	gdbarch to GETREGS_SUPPLIES call.
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007
@


1.25
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d187 1
a187 1
  if (gdbarch_inner_than (current_gdbarch, get_frame_sp (fi), *top))
@


1.24
log
@2007-06-20  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 4606
	* gcore.c (gcore_command): Use bfd_make_section_anyway_with_flags
	instead of bfd_make_section_anyway.
	(gcore_create_callback): Likewise.  Also set SEC_NEVER_LOAD
	when clearing SEC_LOAD.
@
text
@d10 1
a10 1
   the Free Software Foundation; either version 2 of the License, or
d19 1
a19 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.23
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_ARCHITECTURE): Replace by gdbarch_bfd_arch_info.
	* arch-utils.c (show_architecture): Likewise.
	* remote-mips.c (mips_open): Likewise
	* nto-tdep.c (nto_find_and_open_solib)
	(nto_init_solib_absolute_prefix): Likewise.
	* nto-procfs (procfs_open): Likewise.
	* m68hc11-tdep.c (gdb_print_insn_m68hc11): Likewise.
	* gcore.c (default_gcore_mach, default_gcore_arch): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d91 4
a94 1
      note_sec = bfd_make_section_anyway (obfd, "note0");
a99 2
      bfd_set_section_flags (obfd, note_sec,
			     SEC_HAS_CONTENTS | SEC_READONLY | SEC_ALLOC);
d363 1
d377 1
a377 1
  osec = bfd_make_section_anyway (obfd, "load");
a393 1
  bfd_set_section_flags (obfd, osec, flags);
@


1.22
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (INNER_THAN): Replace by gdbarch_inner_than.
	* infcall.c (call_function_by_hand): Likewise.
	* gcore.c (derive_stack_segment): Likewise.
	* frame.c (frame_id_inner): Likewise.
	* arch-utils.c (core_addr_lessthan): Likewise (comment).
	* ada-lang.c (ensure_lval): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d128 2
a129 2
#ifdef TARGET_ARCHITECTURE
  const struct bfd_arch_info *bfdarch = TARGET_ARCHITECTURE;
a132 1
#endif /* TARGET_ARCHITECTURE */
d143 2
a144 2
#ifdef TARGET_ARCHITECTURE
  const struct bfd_arch_info * bfdarch = TARGET_ARCHITECTURE;
a147 1
#endif
@


1.21
log
@	* inferior.h (read_sp): Remove prototype.
	* regcache.c (read_sp): Remove.
	* gcore.c (derive_stack_segment): Use get_frame_sp instead of read_sp.
	* infcall.c (call_function_by_hand): Likewise.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call): Use regcache instead
	of calling read_sp.
	* rs6000-tdep.c (rs6000_push_dummy_call): Likewise.
@
text
@d190 1
a190 1
  if (INNER_THAN (get_frame_sp (fi), *top))
@


1.20
log
@Copyright updates for 2007.
@
text
@d190 2
a191 2
  if (INNER_THAN (read_sp (), *top))
    *top = read_sp ();
@


1.19
log
@	* gcore.c (MAX_COPY_BYTES): Define.
	(gcore_copy_callback): Use it to limit allocation.
@
text
@d3 1
a3 1
   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006
@


1.18
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d3 2
a4 1
   Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d35 5
d453 2
a454 1
  bfd_size_type size = bfd_section_size (obfd, osec);
d466 1
d473 22
a494 7
  if (target_read_memory (bfd_section_vma (obfd, osec),
			  memhunk, size) != 0)
    warning (_("Memory read failed for corefile section, %s bytes at 0x%s."),
	     paddr_d (size), paddr (bfd_section_vma (obfd, osec)));
  if (!bfd_set_section_contents (obfd, osec, memhunk, 0, size))
    warning (_("Failed to write corefile contents (%s)."),
	     bfd_errmsg (bfd_get_error ()));
@


1.17
log
@2005-02-15  Andrew Cagney  <cagney@@gnu.org>

	Mark up add_com, add_info and add_prefix_cmd.
	* breakpoint.c, cp-support.c, dcache.c, dwarf2read.c: Update.
	* exec.c, f-valprint.c, frame.c, gcore.c, gnu-nat.c: Update.
	* go32-nat.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* kod.c, language.c, linux-nat.c, m32r-rom.c, macrocmd.c: Update.
	* maint.c, memattr.c, mips-tdep.c, nto-procfs.c, objc-lang.c: Update.
	* ocd.c, pa64solib.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote-e7000.c, remote-m32r-sdi.c, remote-mips.c: Update.
	* remote-sds.c, remote-sim.c, remote-st.c, remote-utils.c: Update.
	* remote.c, rs6000-tdep.c, ser-go32.c, serial.c: Update.
	* sh-tdep.c, solib.c, somsolib.c, source.c, stack.c: Update.
	* symfile.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, typeprint.c, utils.c, valprint.c: Update.
	* win32-nat.c, xcoffsolib.c, cli/cli-cmds.c, cli/cli-dump.c: Update.
	* cli/cli-logging.c, tui/tui-layout.c, tui/tui-regs.c: Update.
	* tui/tui-stack.c, tui/tui-win.c: Update.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d19 2
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.17.12.1
log
@2005-11-21  Michael Snyder  <msnyder@@redhat.com>

	* gcore.c: Add restore-corefile-command.

	(call_target_sbrk): Abstracted from derive_heap_segment.
	(derive_heap_segment): Call call_target_sbrk instead of
	coding it inline.
	(load_core_sections): Callback for bfd_map_over_sections.
	(rcore_command): Implements restore-corefile-command ('rcore').
	(__initialize_gcore): Add new command rcore/restore-corefile.
@
text
@a207 42
/* Call target sbrk.  */

static bfd_vma top_of_heap;

static bfd_vma
call_target_sbrk (int sbrk_arg)
{
  struct value *target_sbrk_arg;
  struct value *sbrk_fn, *ret;
  bfd_vma tmp;

  if (lookup_minimal_symbol ("sbrk", NULL, NULL) != NULL)
    {
      sbrk_fn = find_function_in_inferior ("sbrk");
      if (sbrk_fn == NULL)
	return (bfd_vma) 0;
    }
  else if (lookup_minimal_symbol ("_sbrk", NULL, NULL) != NULL)
    {
      sbrk_fn = find_function_in_inferior ("_sbrk");
      if (sbrk_fn == NULL)
	return (bfd_vma) 0;
    }
  else
    return (bfd_vma) 0;

  target_sbrk_arg = value_from_longest (builtin_type_int, sbrk_arg);
  if (target_sbrk_arg == NULL)
    return (bfd_vma) 0;

  ret = call_function_by_hand (sbrk_fn, 1, &target_sbrk_arg);
  if (ret == NULL)
    return (bfd_vma) 0;

  tmp = value_as_long (ret);
  if ((LONGEST) tmp <= 0 || (LONGEST) tmp == 0xffffffff)
    return (bfd_vma) 0;

  top_of_heap = tmp;
  return top_of_heap;
}

d216 1
a253 1
#if 0
a274 4
#else
  if (call_target_sbrk (0) == (bfd_vma) 0)
    return 0;
#endif
a490 176
/* OK now, I want to add a new command to read a corefile, 
   and restore its state into the inferior process.  Obviously
   dangerous, probably want to make certain that they are 
   actually the same process!  But we can put that off till
   later.  Let's see what's required.  This should actually
   be pretty easy.  */

static void
load_core_sections (bfd *abfd, asection *asect, void *arg)
{
  unsigned long from_tty = (unsigned long) arg;
  char *memhunk;
  int ret;

  if ((bfd_section_size (abfd, asect) > 0) &&
      (bfd_get_section_flags (abfd, asect) & SEC_LOAD))
    {
      if (info_verbose && from_tty)
	{
	  printf_filtered (_("Load core section %s"), 
			   bfd_section_name (abfd, asect));
	  printf_filtered (_(", vma 0x%08lx to 0x%08lx"), 
			   (unsigned long) bfd_section_vma (abfd, asect),
			   (unsigned long) bfd_section_vma (abfd, asect) +
			   (int) bfd_section_size (abfd, asect));
	  printf_filtered (_(", size = %d"), 
			   (int) bfd_section_size (abfd, asect));
	  printf_filtered (_(".\n"));
	}
      /* Fixme cleanup? */
      memhunk = xmalloc (bfd_section_size (abfd, asect));
      bfd_get_section_contents (abfd, asect, memhunk, 0, 
				bfd_section_size (abfd, asect));
      if ((ret = target_write_memory (bfd_section_vma (abfd, asect), 
				      memhunk, 
				      bfd_section_size (abfd, asect))) != 0)
	{
	  print_sys_errmsg ("load_core_sections", ret);
	  if ((LONGEST) top_of_heap < 
	      (LONGEST) bfd_section_vma (abfd, asect) + 
	      (LONGEST) bfd_section_size (abfd, asect))
	    {
	      int increment = bfd_section_vma (abfd, asect) +
		bfd_section_size (abfd, asect) - top_of_heap;

	      if (call_target_sbrk (increment) == 0)
		error ("sbrk failed, TOH = 0x%08lx", top_of_heap);
	      else
		printf_filtered ("Increase TOH to 0x%08lx and retry.\n",
				 (unsigned long) top_of_heap);
	      if (target_write_memory (bfd_section_vma (abfd, asect), 
				       memhunk, 
				       bfd_section_size (abfd, asect)) != 0)
		{
		  error ("Nope, still failed.");
		}
	    }
	}
      xfree (memhunk);
    }
}

#include <fcntl.h>
#ifndef O_BINARY
#define O_BINARY 0
#endif

#include "regcache.h"
#include "regset.h"

static int rcore_warned;

static void
rcore_command (char *args, int from_tty)
{
  /* corelow.c core_open */
  /* scratch_chan = open (filename)
     temp_bfd = bfd_fdopenr (filename, gnutarget, scratch_chan)
     bfd_check_format (temp_bfd, bfd_core)
     build_section_table (core_bfd, to_sections, to_sections_end)
     bfd_map_over_sections (core_bfd, myfunc)
     myfunc will check for loadable, contents, and size, 
     and then write the section contents into memory at vma.
  */
  char *corefilename, corefilename_buffer[40], *scratch_path;
  int  scratch_chan;
  bfd  *core_bfd;

  /* Can't restore a corefile without a target process.  */
  if (!target_has_execution)
    noprocess ();

  /* Experimental warning.  Remove upon confidence.  */
  if (!rcore_warned)
    {
      warning ("This command is experimental, and may have dire\n\
and unexpected results!  Proceed at your own risk.");
      if (!query ("Are you sure you want to go there? "))
	{
	  fputs_filtered ("Cancelled at user request.\n", gdb_stdout);
	  return;
	}
      else
	{
	  fputs_filtered ("Very well.  Warning will not be repeated.\n",
			  gdb_stdout);
	}
    }
  rcore_warned = 1;

  if (args && *args)
    corefilename = args;
  else
    {
      /* Default corefile name is "core.PID".  */
      sprintf (corefilename_buffer, "core.%d", PIDGET (inferior_ptid));
      corefilename = corefilename_buffer;
    }

  if (info_verbose)
    fprintf_filtered (gdb_stdout,
		      _("Opening corefile '%s' for input.\n"), corefilename);

  scratch_chan = openp (getenv ("PATH"), OPF_TRY_CWD_FIRST, corefilename, 
			O_BINARY | O_RDONLY | O_LARGEFILE, 0, &scratch_path);
  if (scratch_chan < 0)
    perror_with_name (corefilename);

  core_bfd = bfd_fdopenr (scratch_path, gnutarget, scratch_chan);
  if (!core_bfd)
    perror_with_name (scratch_path);

  if (!bfd_check_format (core_bfd, bfd_core))
    {
      make_cleanup_bfd_close (core_bfd);
      error (_("\"%s\" is not a core file: %s"), 
	     corefilename, bfd_errmsg (bfd_get_error ()));
    }

  if (call_target_sbrk (0) == (bfd_vma) 0)
    error ("Couldn't get sbrk.");

  bfd_map_over_sections (core_bfd, load_core_sections, (void *) from_tty);
  /* Now need to get/set registers.  */
  {
    struct bfd_section *regsect = bfd_get_section_by_name (core_bfd, ".reg");
    char *contents;
    int size;

    if (!regsect)
      error (_("Couldn't find .reg section."));

    size = bfd_section_size (core_bfd, regsect);
    contents = xmalloc (size);
    bfd_get_section_contents (core_bfd, regsect, contents, 0, size);

    if (gdbarch_regset_from_core_section_p (current_gdbarch))
      {
	const struct regset *regset;

	regset = gdbarch_regset_from_core_section (current_gdbarch, 
						   ".reg", size);
	if (!regset)
	  error (_("Failed to allocate regset."));

	registers_changed ();
	regset->supply_regset (regset, current_regcache, 
			       -1, contents, size);
	reinit_frame_cache ();
	target_store_registers (-1);
      }
  }

  bfd_close (core_bfd);
}

a499 5

  add_com ("restore-core-file", class_experimental, rcore_command, _("\
Restore the machine state from a core file into the debugged process.\n\
Argument is optional filename.  Default filename is 'core.<process_id>'."));
  add_com_alias ("rcore", "restore-core-file", class_experimental, 1);
@


1.17.12.2
log
@class_obscure
@
text
@d723 1
a723 1
  add_com ("restore-core-file", class_obscure, rcore_command, _("\
d726 1
a726 1
  add_com_alias ("rcore", "restore-core-file", class_obscure, 1);
@


1.16
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@d494 1
a494 2
  add_com ("generate-core-file", class_files, gcore_command,
	   "\
d496 1
a496 1
Argument is optional filename.  Default filename is 'core.<process_id>'.");
@


1.15
log
@	* dsrec.c (load_srec, make_srec): Use bfd_get_section_size instead of
	bfd_get_section_size_before_reloc or _raw_size.
	* dwarf2-frame.c (dwarf2_build_frame_info): Likewise.
	* dwarf2read.c (dwarf2_locate_sections): Likewise.
	(dwarf2_read_section): Likewise.
	* elfread.c (elf_locate_sections): Likewise.
	* gcore.c (derive_heap_segment): Likewise.
	* mipsread.c (read_alphacoff_dynamic_symtab): Likewise.
	* remote-e7000.c (e7000_load): Likewise.
	* remote-m32r-sdi.c (m32r_load): Likewise.
	* remote-mips.c (mips_load_srec): Likewise.
	(pmon_load_fast): Likewise.
	* remote.c (compare_sections_command): Likewise.
	* symfile.c (add_section_size_callback): Likewise.
	(load_section_callback): Likewise.
	(pc_in_unmapped_range): Likewise.
	(pc_in_mapped_range): Likewise.
	(sections_overlap): Likewise.
	(list_overlays_command): Likewise.
	(simple_overlay_update_1): Likewise.
	(simple_overlay_update): Likewise.
	* tracepoint.c (remote_set_transparent_ranges): Likewise.
	* win32-nat.c (core_section_load_dll_symbols): Likewise.
@
text
@d71 1
a71 1
    error ("Failed to open '%s' for output.", corefilename);
d87 1
a87 1
	error ("Failed to create 'note' section for corefile: %s",
d99 1
a99 1
    error ("gcore: failed to get corefile memory sections from target.");
d105 1
a105 1
	warning ("writing note section (%s)", bfd_errmsg (bfd_get_error ()));
d129 1
a129 1
    error ("Can't find default bfd machine type (need execfile).");
d145 1
a145 1
    error ("Can't find bfd architecture for corefile (need execfile).");
d374 1
a374 1
      warning ("Couldn't make gcore segment: %s",
d462 1
a462 1
    error ("Not enough memory to create corefile.");
d467 1
a467 1
    warning ("Memory read failed for corefile section, %s bytes at 0x%s\n",
d470 1
a470 1
    warning ("Failed to write corefile contents (%s).",
@


1.14
log
@2004-01-14  Elena Zannoni  <ezannoni@@redhat.com>

	* gcore.c (gcore_copy_callback): Use paddr_d to print size
	variable.
	(gcore_create_callback): Ditto.  Skip any memory segment that has
	no permissions set.
@
text
@d247 1
a247 1
	  sec_size = bfd_get_section_size_before_reloc (sec);
@


1.14.6.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d247 1
a247 1
	  sec_size = bfd_get_section_size (sec);
@


1.13
log
@2003-10-08  Roland McGrath  <roland@@redhat.com>

	* gcore.c (make_mem_sec): Function removed, folded into ...
	(gcore_create_callback): ... here.  To omit a section, clear its
	SEC_LOAD bit rather than zeroing its size.
	Omit read-only sections only if they correspond to a known disk file.
	(gcore_copy_callback): Ignore sections without SEC_LOAD flag set.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Free Software Foundation, Inc.
d317 14
d381 2
a382 2
      fprintf_filtered (gdb_stdout, "Save segment, %lld bytes at 0x%s\n",
			(long long) size, paddr_nz (vaddr));
d467 2
a468 2
    warning ("Memory read failed for corefile section, %ld bytes at 0x%s\n",
	     (long) size, paddr (bfd_section_vma (obfd, osec)));
@


1.12
log
@2003-09-20  Andrew Cagney  <cagney@@redhat.com>

	* breakpoint.c: Eliminate ARGSUSED.
	* buildsym.c, cli/cli-cmds.c, cli/cli-script.c: Ditto.
	* coffread.c, corelow.c, dwarf2read.c, event-top.c: Ditto.
	* exec.c, gcore.c, hpux-thread.c, infcmd.c, inflow.c: Ditto.
	* infrun.c, inftarg.c, maint.c, ocd.c, printcmd.c: Ditto.
	* procfs.c, regcache.c, remote-rdi.c, remote-sds.c: Ditto.
	* remote.c, sol-thread.c, source.c, stabsread.c: Ditto.
	* stack.c, symfile.c, target.c, top.c, typeprint.c: Ditto.
	* utils.c, v850ice.c, valprint.c, values.c, win32-nat.c: Ditto.
	* wince.c, remote-vx.c: Ditto.
@
text
@d65 1
a65 1
    fprintf_filtered (gdb_stdout, 
d87 1
a87 1
	error ("Failed to create 'note' section for corefile: %s", 
d91 1
a91 1
      bfd_set_section_flags (obfd, note_sec, 
d164 1
a164 1
static int 
d212 1
a212 1
static int 
d309 3
a311 3
static asection *
make_mem_sec (bfd *obfd, bfd_vma addr, bfd_size_type size,
	      unsigned int flags, unsigned int alignment)
d313 1
d315 41
d362 1
a362 1
      return NULL;
d368 1
a368 1
			(long long) size, paddr_nz (addr));
d372 1
a372 1
  bfd_set_section_vma (obfd, osec, addr);
d374 2
a375 26
  bfd_set_section_alignment (obfd, osec, alignment);
  bfd_set_section_flags (obfd, osec,
			 flags | SEC_LOAD | SEC_ALLOC | SEC_HAS_CONTENTS);
  return osec;
}

static int
gcore_create_callback (CORE_ADDR vaddr, unsigned long size,
		       int read, int write, int exec, void *data)
{
  flagword flags = 0;

  if (write == 0)
    {
      flags |= SEC_READONLY;
      /* Mark readonly sections as zero-sized, such that we can avoid
         copying their contents.  */
      size = 0;
    }

  if (exec)
    flags |= SEC_CODE;
  else
    flags |= SEC_DATA;

  return ((make_mem_sec (data, vaddr, size, flags, 0)) == NULL);
d401 1
a401 1
	  ret = (*func) (objsec->addr, bfd_section_size (ibfd, isec), 
d413 1
a413 1
    (*func) (temp_bottom, temp_top - temp_bottom, 
d437 2
a438 3
  /* Read-only sections are marked as zero-size.  We don't have to
     copy their contents.  */
  if (size == 0)
d451 1
a451 1
  if (target_read_memory (bfd_section_vma (obfd, osec), 
d456 1
a456 1
    warning ("Failed to write corefile contents (%s).", 
@


1.11
log
@* gcore.c: Reorder include files in alphabetical order.  Include
"gdb_assert.h".  Various coding style fixes.
(derive_stack_segment, derive_heap_segment): Replace check for
non-null BOTTOM and TOP with gdb_assert.
(derive_heap_segment): Replace check for successful creation of
ZERO with gdb_assert.
(make_mem_sec): Use bfd_section_lma to set OSEC->lma.
@
text
@a287 1
/* ARGSUSED */
@


1.11.2.1
log
@2003-09-29  Elena Zannoni  <ezannoni@@redhat.com>

	* exec.c (exec_set_find_memory_regions): Update parameter list.
	* defs.h (exec_set_find_memory_regions): Update parameter list.
	* fbsd-proc.c (fbsd_find_memory_regions): Likewise. Update call to
	function parameter.
	* gcore.c (gcore_create_callback): Update paramter list.
	(objfile_find_memory_regions): Update parameter list. Update calls
	to function parameter.
	* gnu-nat.c (gnu_find_memory_regions): Update parameter
	list. Update calls to function parameter.
	* inftarg.c (inftarg_set_find_memory_regions): Update parameter
	list.
	* linux-proc.c (read_mapping): Prune the leading whitespaces in
	the filename.
	(linux_find_memory_regions): Update parameter list. Update call to
	function parameter.
	* procfs.c (find_memory_regions_callback): Update paremeters and
	calls.
	(proc_find_memory_regions): Update parameters.
	* sol-thread.c (sol_find_memory_regions): Update parameter list.
	* target.h (struct target_ops): Update definition of
	to_find_memory_regions field.
@
text
@d341 1
a341 2
		       int read, int write, int exec, char *filename,
		       void *data)
d363 1
a363 1
					  int, int, int, char *, void *),
a387 1
			 NULL,
a399 1
	     NULL,
a407 1
	     NULL,
@


1.10
log
@2003-04-21  Andrew Cagney  <cagney@@redhat.com>

	* infcall.c: New file.
	* infcall.h: New file.
	* valarith.c: Include "infcall.h".
	* scm-lang.c, objc-lang.cm, hppa-tdep.c, gcore.c: Ditto.
	* eval.c, ada-valprint.c, ada-lang.c: Ditto.
	* Makefile.in (valarith.o, scm-lang.o): Update dependencies.
	(objc-lang.o, hppa-tdep.o, gcore.o): Update dependencies.
	(eval.o, ada-valprint.o, ada-lang.o): Update dependencies.
	(SFILES): Add "infcall.c"
	(COMMON_OBS): Add "infcall.o".
	(infcall.o): Specify dependencies.
	* value.h (call_function_by_hand): Delete declaration.
	* inferior.h (run_stack_dummy): Delete declaration.
	* infcmd.c (breakpoint_auto_delete_contents): Move to "infcall.c".
	(run_stack_dummy): Move to "infcall.c", merged into
	call_function_by_hand.
	* valops.c (call_function_by_hand): Moved to "infcall.c".
	(find_function_addr, value_arg_coerce): Ditto.
	(unwindonsignal_p, coerce_float_to_double): Ditto.
	(_initialize_valops): Move "set/show coerce-float-to-double", and
	"set/show unwindonsignal" commands to "infcall.c".
	* v850-tdep.c, target.h: Update comments.
	* sparc-tdep.c (sparc_fix_call_dummy): Update comments.
	* sh-tdep.c (sh_init_extra_frame_info): Update comments.
	(sh64_init_extra_frame_info): Update comments.
	* mn10300-tdep.c: Update comments.
	* mcore-tdep.c (mcore_init_extra_frame_info): Update comments.
	* config/sparc/tm-sparc.h: Update comments.
	* breakpoint.h: Update comments.
	* avr-tdep.c (avr_init_extra_frame_info): Update comments.
	* arm-tdep.c: Update comment.
@
text
@d23 2
a24 1
#include "cli/cli-decode.h"
d27 1
a27 1
#include "elf-bfd.h"
a28 2
#include "objfiles.h"
#include "infcall.h"
d30 8
a37 4
static char                  *default_gcore_target (void);
static enum bfd_architecture  default_gcore_arch (void);
static unsigned long          default_gcore_mach (void);
static int                    gcore_memory_sections (bfd *);
d39 1
a39 2
/* Function: gcore_command
   Generate a core file from the inferior process.  */
d52 1
a52 1
  if (!(target_has_execution))
d68 4
a71 5
  /* Open the output file. */
  if (!(obfd = bfd_openw (corefilename, default_gcore_target ())))
    {
      error ("Failed to open '%s' for output.", corefilename);
    }
d73 1
a73 1
  /* Need a cleanup that will close the file (FIXME: delete it?). */
d79 2
a80 2
  /* An external target method must build the notes section. */
  note_data = (char *) target_make_corefile_notes (obfd, &note_size);
d82 1
a82 1
  /* Create the note section. */
d85 2
a86 1
      if ((note_sec = bfd_make_section_anyway (obfd, "note0")) == NULL)
d97 1
a97 1
  /* Now create the memory/load sections. */
d101 1
a101 1
  /* Write out the contents of the note section. */
d105 1
a105 4
	{
	  warning ("writing note section (%s)", 
		   bfd_errmsg (bfd_get_error ()));
	}
d108 2
a109 3
  /* Succeeded. */
  fprintf_filtered (gdb_stdout, 
		    "Saved corefile %s\n", corefilename);
d111 1
a111 1
  /* Clean-ups will close the output file and free malloc memory. */
d119 1
a119 1
#if 1	/* See if this even matters... */
d123 1
a123 1
  const struct bfd_arch_info * bfdarch = TARGET_ARCHITECTURE;
d153 1
a153 1
  /* FIXME -- this may only work for ELF targets.  */
d160 3
a162 5
/* Function: derive_stack_segment

   Derive a reasonable stack segment by unwinding the target stack. 
   
   Returns 0 for failure, 1 for success.  */
a166 1
  bfd_vma tmp_vma;
d169 2
a170 2
  if (bottom == NULL || top == NULL)
    return 0;	/* Paranoia. */
d172 1
d174 1
a174 1
    return 0;	/* Can't succeed without stack and registers. */
d176 4
a179 2
  if ((fi = get_current_frame ()) == NULL)
    return 0;	/* Can't succeed without current frame. */
d181 1
a181 1
  /* Save frame pointer of TOS frame. */
d183 1
a183 1
  /* If current stack pointer is more "inner", use that instead. */
d187 1
a187 1
  /* Find prev-most frame. */
d191 1
a191 1
  /* Save frame pointer of prev-most frame. */
d194 2
a195 2
  /* Now canonicalize their order, so that 'bottom' is a lower address
   (as opposed to a lower stack frame). */
d198 2
d205 1
a205 1
  return 1;	/* success */
d208 3
a210 6
/* Function: derive_heap_segment

   Derive a reasonable heap segment by looking at sbrk and
   the static data sections.
   
   Returns 0 for failure, 1 for success.  */
d222 2
a223 2
  if (bottom == NULL || top == NULL)
    return 0;		/* Paranoia. */
d225 2
d228 4
a231 2
    return 0;		/* This function depends on being able
			   to call a function in the inferior.  */
d233 7
a239 5
  /* Assumption: link map is arranged as follows (low to high addresses):
     text sections
     data sections (including bss)
     heap
  */
d243 2
a244 2
      if (bfd_get_section_flags (abfd, sec) & SEC_DATA ||
	  strcmp (".bss", bfd_section_name (abfd, sec)) == 0)
d252 1
d256 2
a257 1
      if ((sbrk = find_function_in_inferior ("sbrk")) == NULL)
d262 2
a263 1
      if ((sbrk = find_function_in_inferior ("_sbrk")) == NULL)
d269 4
a272 3
  if ((zero = value_from_longest (builtin_type_int, (LONGEST) 0)) == NULL)
    return 0;
  if ((sbrk = call_function_by_hand (sbrk, 1, &zero)) == NULL)
d276 1
a276 1
  /* Return results. */
d281 1
a281 1
      return 1;	/* success */
d283 3
a285 2
  else
    return 0;	/* No additional heap space needs to be saved. */
d307 1
a307 2
  bfd_record_phdr (obfd, p_type, 1, p_flags, 0, 0, 
		   0, 0, 1, &osec);
d311 2
a312 5
make_mem_sec (bfd *obfd, 
	      bfd_vma addr, 
	      bfd_size_type size, 
	      unsigned int flags, 
	      unsigned int alignment)
d316 2
a317 1
  if ((osec = bfd_make_section_anyway (obfd, "load")) == NULL)
d326 1
a326 2
      fprintf_filtered (gdb_stdout, 
			"Save segment, %lld bytes at 0x%s\n",
d332 1
a332 1
  osec->lma = 0;	/* FIXME: there should be a macro for this! */
d334 1
a334 1
  bfd_set_section_flags (obfd, osec, 
d340 2
a341 4
gcore_create_callback (CORE_ADDR vaddr, 
		       unsigned long size,
		       int read, int write, int exec, 
		       void *data)
d348 2
a349 1
      /* Set size == zero for readonly sections. */
d352 1
d354 1
a354 3
    {
      flags |= SEC_CODE;
    }
d356 1
a356 3
    {
      flags |= SEC_DATA;
    }
d358 1
a358 1
  return ((make_mem_sec ((bfd *) data, vaddr, size, flags, 0)) == NULL);
d362 2
a363 4
objfile_find_memory_regions (int (*func) (CORE_ADDR, 
					  unsigned long,
					  int, int, int,
					   void *), 
d366 1
a366 1
  /* Use objfile data to create memory sections. */
d371 1
a371 1
  /* Call callback function for each objfile section. */
d384 6
a389 6
	  if ((ret = (*func) (objsec->addr, 
			      bfd_section_size (ibfd, isec), 
			      1, /* All sections will be readable.  */
			      (flags & SEC_READONLY) == 0, /* writable */
			      (flags & SEC_CODE) != 0, /* executable */
			      obfd)) != 0)
d394 1
a394 1
  /* Make a stack segment. */
d396 4
a399 5
    (*func) (temp_bottom, 
	     temp_top - temp_bottom, 
	     1, /* Stack section will be readable */
	     1, /* Stack section will be writable */
	     0, /* Stack section will not be executable */
d404 4
a407 5
    (*func) (temp_bottom, 
	     temp_top - temp_bottom, 
	     1, /* Heap section will be readable */
	     1, /* Heap section will be writable */
	     0, /* Heap section will not be executable */
d409 1
d420 2
d423 3
a425 2
    return;	/* Read-only sections are marked as zero-size.
		   We don't have to copy their contents. */
d427 1
a427 1
    return;	/* Only interested in "load" sections. */
d429 3
a431 1
  if ((memhunk = xmalloc (size)) == NULL)
d443 1
a443 1
  do_cleanups (old_chain);	/* frees the xmalloc buffer */
d450 1
a450 1
    return 0;	/* FIXME error return/msg? */
d452 1
a452 1
  /* Record phdrs for section-to-segment mapping. */
d455 1
a455 1
  /* Copy memory region contents. */
d458 1
a458 1
  return 1;	/* success */
d465 2
a466 1
	   "Save a core file with the current state of the debugged process.\n\
@


1.9
log
@2003-01-13  Andrew Cagney  <ac131313@@redhat.com>

	* ax-gdb.c, c-valprint.c, charset.c, corefile.c: Update copyright.
	* demangle.c, disasm.c, dwarf2cfi.c, dwarfread.c: Update copyright.
	* elfread.c, eval.c, expprint.c, expression.h: Update copyright.
	* f-typeprint.c, findvar.c, gcore.c, gdb_mbuild.sh: Update copyright.
	* gdbtypes.h, gnu-v2-abi.c, inferior.h, inftarg.c: Update copyright.
	* language.c, language.h, m32r-tdep.c: Update copyright.
	* mn10200-tdep.c, scm-lang.c, scm-lang.h: Update copyright.
	* somsolib.c, somsolib.h, symfile.c, symtab.h: Update copyright.
	* thread-db.c, typeprint.c, utils.c, valarith.c: Update copyright.
	* values.c, win32-nat.c, x86-64-linux-nat.c: Update copyright.
	* x86-64-linux-tdep.c, z8k-tdep.c: Update copyright.
	* cli/cli-decode.h, config/h8500/tm-h8500.h: Update copyright.

Index: mi/ChangeLog
2003-01-13  Andrew Cagney  <ac131313@@redhat.com>

	* mi-cmd-env.c: Update copyright.
@
text
@d29 1
@


1.9.18.1
log
@Merge from mainline.
@
text
@a28 1
#include "infcall.h"
@


1.8
log
@2003-01-08  Andrew Cagney  <cagney@@redhat.com>

	* gcore.c, i386-linux-tdep.c: Use get_frame_pc, get_next_frame and
	get_frame_base.
@
text
@d2 2
a3 1
   Copyright 2001, 2002 Free Software Foundation, Inc.
@


1.7
log
@2002-08-08  Andrew Cagney  <cagney@@redhat.com>

* gcore.c (override_derive_stack_segment): Delete variable.
(preempt_derive_stack_segment): Delete function.
(derive_stack_segment): Delete function.
(default_derive_stack_segment): Renamed to derive_stack_segment.
(override_derive_heap_segment): Delete variable.
(preempt_derive_heap_segment): Delete function.
(derive_heap_segment): Delete function.
(default_derive_heap_segment): Rename to derive_heap_segment.
@
text
@d182 1
a182 1
  *top = fi->frame;
d192 1
a192 1
  *bottom = fi->frame;
@


1.7.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 2

   Copyright 2001, 2002, 2003 Free Software Foundation, Inc.
d22 1
a22 2
#include "elf-bfd.h"
#include "infcall.h"
d25 2
a27 3
#include "symfile.h"

#include "cli/cli-decode.h"
d29 4
a32 1
#include "gdb_assert.h"
d34 2
a35 6
static char *default_gcore_target (void);
static enum bfd_architecture default_gcore_arch (void);
static unsigned long default_gcore_mach (void);
static int gcore_memory_sections (bfd *);

/* Generate a core file from the inferior process.  */
d48 1
a48 1
  if (!target_has_execution)
d61 1
a61 1
    fprintf_filtered (gdb_stdout,
d64 5
a68 4
  /* Open the output file.  */
  obfd = bfd_openw (corefilename, default_gcore_target ());
  if (!obfd)
    error ("Failed to open '%s' for output.", corefilename);
d70 1
a70 1
  /* Need a cleanup that will close the file (FIXME: delete it?).  */
d76 2
a77 2
  /* An external target method must build the notes section.  */
  note_data = target_make_corefile_notes (obfd, &note_size);
d79 1
a79 1
  /* Create the note section.  */
d82 2
a83 3
      note_sec = bfd_make_section_anyway (obfd, "note0");
      if (note_sec == NULL)
	error ("Failed to create 'note' section for corefile: %s",
d87 1
a87 1
      bfd_set_section_flags (obfd, note_sec,
d93 1
a93 1
  /* Now create the memory/load sections.  */
d97 1
a97 1
  /* Write out the contents of the note section.  */
d101 4
a104 1
	warning ("writing note section (%s)", bfd_errmsg (bfd_get_error ()));
d107 3
a109 2
  /* Succeeded.  */
  fprintf_filtered (gdb_stdout, "Saved corefile %s\n", corefilename);
d111 1
a111 1
  /* Clean-ups will close the output file and free malloc memory.  */
d119 1
a119 1
#if 1	/* See if this even matters...  */
d123 1
a123 1
  const struct bfd_arch_info *bfdarch = TARGET_ARCHITECTURE;
d153 1
a153 1
  /* FIXME: This may only work for ELF targets.  */
d160 1
a160 3
/* Derive a reasonable stack segment by unwinding the target stack,
   and store its limits in *BOTTOM and *TOP.  Return non-zero if
   successful.  */
d162 5
a166 1
static int
d169 1
d172 2
a173 2
  gdb_assert (bottom);
  gdb_assert (top);
a174 1
  /* Can't succeed without stack and registers.  */
d176 1
a176 1
    return 0;
d178 2
a179 4
  /* Can't succeed without current frame.  */
  fi = get_current_frame ();
  if (fi == NULL)
    return 0;
d181 3
a183 3
  /* Save frame pointer of TOS frame.  */
  *top = get_frame_base (fi);
  /* If current stack pointer is more "inner", use that instead.  */
d187 1
a187 1
  /* Find prev-most frame.  */
d191 2
a192 2
  /* Save frame pointer of prev-most frame.  */
  *bottom = get_frame_base (fi);
d194 2
a195 2
  /* Now canonicalize their order, so that BOTTOM is a lower address
     (as opposed to a lower stack frame).  */
a197 2
      bfd_vma tmp_vma;

d203 1
a203 1
  return 1;
d206 6
a211 3
/* Derive a reasonable heap segment for ABFD by looking at sbrk and
   the static data sections.  Store its limits in *BOTTOM and *TOP.
   Return non-zero if successful.  */
d213 1
a213 1
static int
d223 2
a224 2
  gdb_assert (bottom);
  gdb_assert (top);
a225 2
  /* This function depends on being able to call a function in the
     inferior.  */
d227 2
a228 1
    return 0;
d230 5
a234 10
  /* The following code assumes that the link map is arranged as
     follows (low to high addresses):

     ---------------------------------
     | text sections                 |
     ---------------------------------
     | data sections (including bss) |
     ---------------------------------
     | heap                          |
     --------------------------------- */
d238 2
a239 2
      if (bfd_get_section_flags (abfd, sec) & SEC_DATA
	  || strcmp (".bss", bfd_section_name (abfd, sec)) == 0)
a246 1

d250 1
a250 2
      sbrk = find_function_in_inferior ("sbrk");
      if (sbrk == NULL)
d255 1
a255 2
      sbrk = find_function_in_inferior ("_sbrk");
      if (sbrk == NULL)
d261 3
a263 4
  zero = value_from_longest (builtin_type_int, 0);
  gdb_assert (zero);
  sbrk = call_function_by_hand (sbrk, 1, &zero);
  if (sbrk == NULL)
d267 1
a267 1
  /* Return results.  */
d272 1
a272 1
      return 1;
d274 2
a275 3

  /* No additional heap space needs to be saved.  */
  return 0;
d278 1
d297 2
a298 1
  bfd_record_phdr (obfd, p_type, 1, p_flags, 0, 0, 0, 0, 1, &osec);
d301 6
a306 3
static int
gcore_create_callback (CORE_ADDR vaddr, unsigned long size,
		       int read, int write, int exec, void *data)
a307 1
  bfd *obfd = data;
a308 1
  flagword flags = SEC_ALLOC | SEC_HAS_CONTENTS | SEC_LOAD;
d310 8
a317 1
  if (write == 0)
d319 4
a322 4
      /* See if this region of memory lies inside a known file on disk.
	 If so, we can avoid copying its contents by clearing SEC_LOAD.  */
      struct objfile *objfile;
      struct obj_section *objsec;
d324 16
a339 23
      ALL_OBJSECTIONS (objfile, objsec)
	{
	  bfd *abfd = objfile->obfd;
	  asection *asec = objsec->the_bfd_section;
	  bfd_vma align = (bfd_vma) 1 << bfd_get_section_alignment (abfd,
								    asec);
	  bfd_vma start = objsec->addr & -align;
	  bfd_vma end = (objsec->endaddr + align - 1) & -align;
	  /* Match if either the entire memory region lies inside the
	     section (i.e. a mapping covering some pages of a large
	     segment) or the entire section lies inside the memory region
	     (i.e. a mapping covering multiple small sections).

	     This BFD was synthesized from reading target memory,
	     we don't want to omit that.  */
	  if (((vaddr >= start && vaddr + size <= end)
	       || (start >= vaddr && end <= vaddr + size))
	      && !(bfd_get_file_flags (abfd) & BFD_IN_MEMORY))
	    {
	      flags &= ~SEC_LOAD;
	      goto keep;	/* break out of two nested for loops */
	    }
	}
d341 2
a342 1
    keep:
d344 2
a346 1

a347 6
    flags |= SEC_CODE;
  else
    flags |= SEC_DATA;

  osec = bfd_make_section_anyway (obfd, "load");
  if (osec == NULL)
d349 1
a349 3
      warning ("Couldn't make gcore segment: %s",
	       bfd_errmsg (bfd_get_error ()));
      return 1;
d351 1
a351 2

  if (info_verbose)
d353 1
a353 2
      fprintf_filtered (gdb_stdout, "Save segment, %lld bytes at 0x%s\n",
			(long long) size, paddr_nz (vaddr));
d356 1
a356 5
  bfd_set_section_size (obfd, osec, size);
  bfd_set_section_vma (obfd, osec, vaddr);
  bfd_section_lma (obfd, osec) = 0; /* ??? bfd_set_section_lma?  */
  bfd_set_section_flags (obfd, osec, flags);
  return 0;
d360 4
a363 2
objfile_find_memory_regions (int (*func) (CORE_ADDR, unsigned long,
					  int, int, int, void *),
d366 1
a366 1
  /* Use objfile data to create memory sections.  */
d371 1
a371 1
  /* Call callback function for each objfile section.  */
d384 6
a389 6
	  ret = (*func) (objsec->addr, bfd_section_size (ibfd, isec),
			 1, /* All sections will be readable.  */
			 (flags & SEC_READONLY) == 0, /* Writable.  */
			 (flags & SEC_CODE) != 0, /* Executable.  */
			 obfd);
	  if (ret != 0)
d394 1
a394 1
  /* Make a stack segment.  */
d396 5
a400 4
    (*func) (temp_bottom, temp_top - temp_bottom,
	     1, /* Stack section will be readable.  */
	     1, /* Stack section will be writable.  */
	     0, /* Stack section will not be executable.  */
d405 5
a409 4
    (*func) (temp_bottom, temp_top - temp_bottom,
	     1, /* Heap section will be readable.  */
	     1, /* Heap section will be writable.  */
	     0, /* Heap section will not be executable.  */
a410 1

d421 3
a423 5
  /* Read-only sections are marked; we don't have to copy their contents.  */
  if ((bfd_get_section_flags (obfd, osec) & SEC_LOAD) == 0)
    return;

  /* Only interested in "load" sections.  */
d425 1
a425 1
    return;
d427 1
a427 3
  memhunk = xmalloc (size);
  /* ??? This is crap since xmalloc should never return NULL.  */
  if (memhunk == NULL)
d431 1
a431 1
  if (target_read_memory (bfd_section_vma (obfd, osec),
d436 1
a436 1
    warning ("Failed to write corefile contents (%s).",
d439 1
a439 1
  do_cleanups (old_chain);	/* Frees MEMHUNK.  */
d446 1
a446 1
    return 0;			/* FIXME: error return/msg?  */
d448 1
a448 1
  /* Record phdrs for section-to-segment mapping.  */
d451 1
a451 1
  /* Copy memory region contents.  */
d454 1
a454 1
  return 1;
d461 1
a461 2
	   "\
Save a core file with the current state of the debugged process.\n\
@


1.7.10.2
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
a316 14
  /* If the memory segment has no permissions set, ignore it, otherwise
     when we later try to access it for read/write, we'll get an error
     or jam the kernel.  */
  if (read == 0 && write == 0 && exec == 0)
    {
      if (info_verbose)
        {
          fprintf_filtered (gdb_stdout, "Ignore segment, %s bytes at 0x%s\n",
                           paddr_d (size), paddr_nz (vaddr));
        }

      return 0;
    }

d367 2
a368 2
      fprintf_filtered (gdb_stdout, "Save segment, %s bytes at 0x%s\n",
			paddr_d (size), paddr_nz (vaddr));
d453 2
a454 2
    warning ("Memory read failed for corefile section, %s bytes at 0x%s\n",
	     paddr_d (size), paddr (bfd_section_vma (obfd, osec)));
@


1.7.8.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d2 1
a2 2

   Copyright 2001, 2002, 2003 Free Software Foundation, Inc.
d182 1
a182 1
  *top = get_frame_base (fi);
d192 1
a192 1
  *bottom = get_frame_base (fi);
@


1.7.8.2
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@a28 1
#include "infcall.h"
@


1.7.8.3
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d23 1
a23 2
#include "elf-bfd.h"
#include "infcall.h"
d26 2
d29 1
a29 3
#include "symfile.h"

#include "cli/cli-decode.h"
d31 4
a34 1
#include "gdb_assert.h"
d36 2
a37 6
static char *default_gcore_target (void);
static enum bfd_architecture default_gcore_arch (void);
static unsigned long default_gcore_mach (void);
static int gcore_memory_sections (bfd *);

/* Generate a core file from the inferior process.  */
d50 1
a50 1
  if (!target_has_execution)
d66 5
a70 4
  /* Open the output file.  */
  obfd = bfd_openw (corefilename, default_gcore_target ());
  if (!obfd)
    error ("Failed to open '%s' for output.", corefilename);
d72 1
a72 1
  /* Need a cleanup that will close the file (FIXME: delete it?).  */
d78 2
a79 2
  /* An external target method must build the notes section.  */
  note_data = target_make_corefile_notes (obfd, &note_size);
d81 1
a81 1
  /* Create the note section.  */
d84 1
a84 2
      note_sec = bfd_make_section_anyway (obfd, "note0");
      if (note_sec == NULL)
d95 1
a95 1
  /* Now create the memory/load sections.  */
d99 1
a99 1
  /* Write out the contents of the note section.  */
d103 4
a106 1
	warning ("writing note section (%s)", bfd_errmsg (bfd_get_error ()));
d109 3
a111 2
  /* Succeeded.  */
  fprintf_filtered (gdb_stdout, "Saved corefile %s\n", corefilename);
d113 1
a113 1
  /* Clean-ups will close the output file and free malloc memory.  */
d121 1
a121 1
#if 1	/* See if this even matters...  */
d125 1
a125 1
  const struct bfd_arch_info *bfdarch = TARGET_ARCHITECTURE;
d155 1
a155 1
  /* FIXME: This may only work for ELF targets.  */
d162 5
a166 3
/* Derive a reasonable stack segment by unwinding the target stack,
   and store its limits in *BOTTOM and *TOP.  Return non-zero if
   successful.  */
d171 1
d174 2
a175 2
  gdb_assert (bottom);
  gdb_assert (top);
a176 1
  /* Can't succeed without stack and registers.  */
d178 1
a178 1
    return 0;
d180 2
a181 4
  /* Can't succeed without current frame.  */
  fi = get_current_frame ();
  if (fi == NULL)
    return 0;
d183 1
a183 1
  /* Save frame pointer of TOS frame.  */
d185 1
a185 1
  /* If current stack pointer is more "inner", use that instead.  */
d189 1
a189 1
  /* Find prev-most frame.  */
d193 1
a193 1
  /* Save frame pointer of prev-most frame.  */
d196 2
a197 2
  /* Now canonicalize their order, so that BOTTOM is a lower address
     (as opposed to a lower stack frame).  */
a199 2
      bfd_vma tmp_vma;

d205 1
a205 1
  return 1;
d208 6
a213 3
/* Derive a reasonable heap segment for ABFD by looking at sbrk and
   the static data sections.  Store its limits in *BOTTOM and *TOP.
   Return non-zero if successful.  */
d225 2
a226 2
  gdb_assert (bottom);
  gdb_assert (top);
a227 2
  /* This function depends on being able to call a function in the
     inferior.  */
d229 2
a230 4
    return 0;

  /* The following code assumes that the link map is arranged as
     follows (low to high addresses):
d232 5
a236 7
     ---------------------------------
     | text sections                 |
     ---------------------------------
     | data sections (including bss) |
     ---------------------------------
     | heap                          |
     --------------------------------- */
d240 2
a241 2
      if (bfd_get_section_flags (abfd, sec) & SEC_DATA
	  || strcmp (".bss", bfd_section_name (abfd, sec)) == 0)
a248 1

d252 1
a252 2
      sbrk = find_function_in_inferior ("sbrk");
      if (sbrk == NULL)
d257 1
a257 2
      sbrk = find_function_in_inferior ("_sbrk");
      if (sbrk == NULL)
d263 3
a265 4
  zero = value_from_longest (builtin_type_int, 0);
  gdb_assert (zero);
  sbrk = call_function_by_hand (sbrk, 1, &zero);
  if (sbrk == NULL)
d269 1
a269 1
  /* Return results.  */
d274 1
a274 1
      return 1;
d276 2
a277 3

  /* No additional heap space needs to be saved.  */
  return 0;
d299 2
a300 1
  bfd_record_phdr (obfd, p_type, 1, p_flags, 0, 0, 0, 0, 1, &osec);
d304 5
a308 2
make_mem_sec (bfd *obfd, bfd_vma addr, bfd_size_type size,
	      unsigned int flags, unsigned int alignment)
d312 1
a312 2
  osec = bfd_make_section_anyway (obfd, "load");
  if (osec == NULL)
d321 2
a322 1
      fprintf_filtered (gdb_stdout, "Save segment, %lld bytes at 0x%s\n",
d328 1
a328 1
  bfd_section_lma (obfd, osec) = 0; /* ??? bfd_set_section_lma?  */
d330 1
a330 1
  bfd_set_section_flags (obfd, osec,
d336 4
a339 2
gcore_create_callback (CORE_ADDR vaddr, unsigned long size,
		       int read, int write, int exec, void *data)
d346 1
a346 2
      /* Mark readonly sections as zero-sized, such that we can avoid
         copying their contents.  */
a348 1

d350 3
a352 1
    flags |= SEC_CODE;
d354 3
a356 1
    flags |= SEC_DATA;
d358 1
a358 1
  return ((make_mem_sec (data, vaddr, size, flags, 0)) == NULL);
d362 4
a365 2
objfile_find_memory_regions (int (*func) (CORE_ADDR, unsigned long,
					  int, int, int, void *),
d368 1
a368 1
  /* Use objfile data to create memory sections.  */
d373 1
a373 1
  /* Call callback function for each objfile section.  */
d386 6
a391 6
	  ret = (*func) (objsec->addr, bfd_section_size (ibfd, isec), 
			 1, /* All sections will be readable.  */
			 (flags & SEC_READONLY) == 0, /* Writable.  */
			 (flags & SEC_CODE) != 0, /* Executable.  */
			 obfd);
	  if (ret != 0)
d396 1
a396 1
  /* Make a stack segment.  */
d398 5
a402 4
    (*func) (temp_bottom, temp_top - temp_bottom, 
	     1, /* Stack section will be readable.  */
	     1, /* Stack section will be writable.  */
	     0, /* Stack section will not be executable.  */
d407 5
a411 4
    (*func) (temp_bottom, temp_top - temp_bottom,
	     1, /* Heap section will be readable.  */
	     1, /* Heap section will be writable.  */
	     0, /* Heap section will not be executable.  */
a412 1

a422 2
  /* Read-only sections are marked as zero-size.  We don't have to
     copy their contents.  */
d424 2
a425 3
    return;

  /* Only interested in "load" sections.  */
d427 1
a427 1
    return;
d429 1
a429 3
  memhunk = xmalloc (size);
  /* ??? This is crap since xmalloc should never return NULL.  */
  if (memhunk == NULL)
d441 1
a441 1
  do_cleanups (old_chain);	/* Frees MEMHUNK.  */
d448 1
a448 1
    return 0;			/* FIXME: error return/msg?  */
d450 1
a450 1
  /* Record phdrs for section-to-segment mapping.  */
d453 1
a453 1
  /* Copy memory region contents.  */
d456 1
a456 1
  return 1;
d463 1
a463 2
	   "\
Save a core file with the current state of the debugged process.\n\
@


1.7.8.4
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d65 1
a65 1
    fprintf_filtered (gdb_stdout,
d87 1
a87 1
	error ("Failed to create 'note' section for corefile: %s",
d91 1
a91 1
      bfd_set_section_flags (obfd, note_sec,
d164 1
a164 1
static int
d212 1
a212 1
static int
d288 1
d310 3
a312 3
static int
gcore_create_callback (CORE_ADDR vaddr, unsigned long size,
		       int read, int write, int exec, void *data)
a313 1
  bfd *obfd = data;
a314 41
  flagword flags = SEC_ALLOC | SEC_HAS_CONTENTS | SEC_LOAD;

  if (write == 0)
    {
      /* See if this region of memory lies inside a known file on disk.
	 If so, we can avoid copying its contents by clearing SEC_LOAD.  */
      struct objfile *objfile;
      struct obj_section *objsec;

      ALL_OBJSECTIONS (objfile, objsec)
	{
	  bfd *abfd = objfile->obfd;
	  asection *asec = objsec->the_bfd_section;
	  bfd_vma align = (bfd_vma) 1 << bfd_get_section_alignment (abfd,
								    asec);
	  bfd_vma start = objsec->addr & -align;
	  bfd_vma end = (objsec->endaddr + align - 1) & -align;
	  /* Match if either the entire memory region lies inside the
	     section (i.e. a mapping covering some pages of a large
	     segment) or the entire section lies inside the memory region
	     (i.e. a mapping covering multiple small sections).

	     This BFD was synthesized from reading target memory,
	     we don't want to omit that.  */
	  if (((vaddr >= start && vaddr + size <= end)
	       || (start >= vaddr && end <= vaddr + size))
	      && !(bfd_get_file_flags (abfd) & BFD_IN_MEMORY))
	    {
	      flags &= ~SEC_LOAD;
	      goto keep;	/* break out of two nested for loops */
	    }
	}

    keep:
      flags |= SEC_READONLY;
    }

  if (exec)
    flags |= SEC_CODE;
  else
    flags |= SEC_DATA;
d321 1
a321 1
      return 1;
d327 1
a327 1
			(long long) size, paddr_nz (vaddr));
d331 1
a331 1
  bfd_set_section_vma (obfd, osec, vaddr);
d333 26
a358 2
  bfd_set_section_flags (obfd, osec, flags);
  return 0;
d384 1
a384 1
	  ret = (*func) (objsec->addr, bfd_section_size (ibfd, isec),
d396 1
a396 1
    (*func) (temp_bottom, temp_top - temp_bottom,
d420 3
a422 2
  /* Read-only sections are marked; we don't have to copy their contents.  */
  if ((bfd_get_section_flags (obfd, osec) & SEC_LOAD) == 0)
d435 1
a435 1
  if (target_read_memory (bfd_section_vma (obfd, osec),
d440 1
a440 1
    warning ("Failed to write corefile contents (%s).",
@


1.7.8.5
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
a316 14
  /* If the memory segment has no permissions set, ignore it, otherwise
     when we later try to access it for read/write, we'll get an error
     or jam the kernel.  */
  if (read == 0 && write == 0 && exec == 0)
    {
      if (info_verbose)
        {
          fprintf_filtered (gdb_stdout, "Ignore segment, %s bytes at 0x%s\n",
                           paddr_d (size), paddr_nz (vaddr));
        }

      return 0;
    }

d367 2
a368 2
      fprintf_filtered (gdb_stdout, "Save segment, %s bytes at 0x%s\n",
			paddr_d (size), paddr_nz (vaddr));
d453 2
a454 2
    warning ("Memory read failed for corefile section, %s bytes at 0x%s\n",
	     paddr_d (size), paddr (bfd_section_vma (obfd, osec)));
@


1.6
log
@2002-08-06  Andrew Cagney  <ac131313@@redhat.com>
* gcore.c: Do not include <sys/procfs.h>.
* Makefile.in (gcore.o): Update dependencies.
@
text
@d160 1
a160 3
/*
 * Default method for stack segment (preemptable by target).
 */
a161 9
static int (*override_derive_stack_segment) (bfd_vma *, bfd_vma *);

extern void
preempt_derive_stack_segment (int (*override_func) (bfd_vma *, bfd_vma *))
{
  override_derive_stack_segment = override_func;
}

/* Function: default_derive_stack_segment
d167 1
a167 1
default_derive_stack_segment (bfd_vma *bottom, bfd_vma *top)
d206 1
a206 21
static int
derive_stack_segment (bfd_vma *bottom, bfd_vma *top)
{
  if (override_derive_stack_segment)
    return override_derive_stack_segment (bottom, top);
  else
    return default_derive_stack_segment (bottom, top);
}

/*
 * Default method for heap segment (preemptable by target).
 */

static int (*override_derive_heap_segment) (bfd *, bfd_vma *, bfd_vma *);

extern void
preempt_derive_heap_segment (int (*override_func) (bfd *, 
						   bfd_vma *, bfd_vma *))
{
  override_derive_heap_segment = override_func;
}
a207 1
/* Function: default_derive_heap_segment
d214 1
a214 1
default_derive_heap_segment (bfd *abfd, bfd_vma *bottom, bfd_vma *top)
a275 9
}

static int
derive_heap_segment (bfd *abfd, bfd_vma *bottom, bfd_vma *top)
{
  if (override_derive_heap_segment)
    return override_derive_heap_segment (abfd, bottom, top);
  else
    return default_derive_heap_segment (abfd, bottom, top);
@


1.5
log
@2002-04-12  Michael Snyder  <msnyder@@redhat.com>

	* gcore.c (default_derive_heap_segment): Use bfd_section_name.
	If no symbol found for "sbrk", try "_sbrk".
	(make_output_phdrs): Use bfd_section_name.
	(gcore_copy_callback): Use bfd_section_name.
@
text
@a25 1
#include <sys/procfs.h>
@


1.5.6.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d26 1
d161 3
a163 1
/* Function: derive_stack_segment
d165 9
d179 1
a179 1
derive_stack_segment (bfd_vma *bottom, bfd_vma *top)
d218 21
a238 1
/* Function: derive_heap_segment
d240 1
d247 1
a247 1
derive_heap_segment (bfd *abfd, bfd_vma *bottom, bfd_vma *top)
d309 9
@


1.4
log
@2002-02-13  Michael Snyder  <msnyder@@redhat.com>

	* gcore.c (gcore_command): Use gcore_default_target instead of NULL.
	(default_gcore_mach): Just return 0, work around a problem in bfd.
	(default_gcore_target): OK to return NULL if exec_bfd is null.
	(make_mem_sec): Use a cast, avoid a warning.

	* procfs.c (find_memory_regions_callback): Use a cast instead of
	calling host_pointer_to_address (which complains if
	sizeof (host pointer) != sizeof (target pointer)).
	(procfs_make_note_section): Avoid overflow in psargs string.
@
text
@d272 1
a272 1
	  strcmp (".bss", bfd_get_section_name (abfd, sec)) == 0)
d281 11
a291 1
  if ((sbrk = find_function_in_inferior ("sbrk")) == NULL)
d293 1
d328 1
a328 1
  if (strncmp (osec->name, "load", 4) == 0)
d466 1
a466 1
  if (strncmp ("load", bfd_get_section_name (obfd, osec), 4) != 0)
@


1.3
log
@2002-01-14  Michael Snyder  <msnyder@@redhat.com>

	* linux-proc.c (linux_do_thread_registers): Ignore fpxregs
	until we can resolve portability issues.
	* gregset.h: Remove references to fpxregs.
	* gcore.c (gcore_command): Initialize note_sec to NULL.
@
text
@d66 1
a66 1
  if (!(obfd = bfd_openw (corefilename, NULL /*default_gcore_target ()*/)))
d120 3
d128 1
a128 1
#endif
d133 1
d156 3
a158 3
    error ("Can't find default bfd target for corefile (need execfile).");

  return bfd_get_target (exec_bfd);
d351 2
a352 2
			"Save segment, %ld bytes at 0x%s\n",
			size, paddr_nz (addr));
@


1.2
log
@2002-01-10  Michael Snyder  <msnyder@@redhat.com>

	* Makefile.in: Add rules for gcore.o and linux-proc.o.
	* gcore.c: Include cli/cli-decode.h instead of command.h.
@
text
@d43 1
a43 1
  asection *note_sec;
@


1.1
log
@2002-01-03  Michael Snyder  <msnyder@@redhat.com>

	Implement a "generate-core-file" command in gdb, save target state.
	* gcore.c: New file.  Implement new command 'generate-core-file'.
	Save a corefile image of the current state of the inferior.
	* linux-proc.c: Add linux-specific code for saving corefiles.
	* target.h (struct target_ops): Add new target vectors for saving
	corefiles; to_find_memory_regions and to_make_corefile_notes.
	(target_find_memory_regions): New macro.
	(target_make_corefile_notes): New macro.
	* target.c (update_current_target): Inherit new target methods.
	(dummy_find_memory_regions): New place-holder method.
	(dummy_make_corefile_notes): New place-holder method.
	(init_dummy_target): Initialize new dummy target vectors.
	* exec.c (exec_set_find_memory_regions): New function.
	Allow the exec_ops vector for memory regions to be taken over.
	(exec_make_note_section): New function, target vector method.
	* defs.h (exec_set_find_memory_regions): Export prototype.
	* procfs.c (proc_find_memory_regions): New function, corefile method.
	(procfs_make_note_section): New function, corefile method.
	(init_procfs_ops): Set new target vector pointers.
	(find_memory_regions_callback): New function.
	(procfs_do_thread_registers): New function.
	(procfs_corefile_thread_callback): New function.
	* sol-thread.c (sol_find_memory_regions): New function.
	(sol_make_note_section): New function.
	(init_sol_thread_ops): Initialize new target vectors.
	* inftarg.c (inftarg_set_find_memory_regions): New function.
	Allow to_find_memory_regions vector to be taken over.
	(inftarg_set_make_corefile_notes): New function.
	Allow to_make_corefile_notes vector to be taken over.
	* thread-db.c (thread_db_new_objfile): Don't activate thread-db
	interface layer if not target_has_execution (may be a corefile).
	* config/i386/linux.mh: Add gcore.o to NATDEPFILES.
	* config/sparc/sun4sol2.mh: Ditto.
	* config/alpha/alpha-linux.mh: Ditto.
	* config/arm/linux.mh: Ditto.
	* config/i386/x86-64linux.mh: Ditto.
	* config/ia64/linux.mh: Ditto.
	* config/m68k/linux.mh: Ditto.
	* config/mips/linux.mh: Ditto.
	* config/powerpc/linux.mh: Ditto.
	* config/sparc/linux.mh: Ditto.
@
text
@d22 1
a22 1
#include "command.h"
@

