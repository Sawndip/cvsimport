head	1.100;
access;
symbols
	gdb_6_3-20041109-release:1.99
	gdb_6_3-branch:1.99.0.32
	gdb_6_3-20041019-branchpoint:1.99
	drow_intercu-merge-20040921:1.99
	drow_intercu-merge-20040915:1.99
	jimb-gdb_6_2-e500-branch:1.99.0.34
	jimb-gdb_6_2-e500-branchpoint:1.99
	gdb_6_2-20040730-release:1.99
	gdb_6_2-branch:1.99.0.30
	gdb_6_2-2004-07-10-gmt-branchpoint:1.99
	gdb_6_1_1-20040616-release:1.99
	gdb_6_1-2004-04-05-release:1.99
	drow_intercu-merge-20040402:1.99
	drow_intercu-merge-20040327:1.99
	ezannoni_pie-20040323-branch:1.99.0.28
	ezannoni_pie-20040323-branchpoint:1.99
	cagney_tramp-20040321-mergepoint:1.99
	cagney_tramp-20040309-branch:1.99.0.26
	cagney_tramp-20040309-branchpoint:1.99
	gdb_6_1-branch:1.99.0.24
	gdb_6_1-2004-03-01-gmt-branchpoint:1.99
	drow_intercu-20040221-branch:1.99.0.22
	drow_intercu-20040221-branchpoint:1.99
	cagney_bfdfile-20040213-branch:1.99.0.20
	cagney_bfdfile-20040213-branchpoint:1.99
	drow-cplus-merge-20040208:1.99
	carlton_dictionary-20040126-merge:1.99
	cagney_bigcore-20040122-branch:1.99.0.18
	cagney_bigcore-20040122-branchpoint:1.99
	drow-cplus-merge-20040113:1.99
	drow-cplus-merge-20031224:1.99
	drow-cplus-merge-20031220:1.99
	carlton_dictionary-20031215-merge:1.99
	drow-cplus-merge-20031214:1.99
	carlton-dictionary-20031111-merge:1.99
	gdb_6_0-2003-10-04-release:1.99
	kettenis_sparc-20030918-branch:1.99.0.16
	kettenis_sparc-20030918-branchpoint:1.99
	carlton_dictionary-20030917-merge:1.99
	ezannoni_pie-20030916-branchpoint:1.99
	ezannoni_pie-20030916-branch:1.99.0.14
	cagney_x86i386-20030821-branch:1.99.0.12
	cagney_x86i386-20030821-branchpoint:1.99
	carlton_dictionary-20030805-merge:1.99
	carlton_dictionary-20030627-merge:1.99
	gdb_6_0-branch:1.99.0.10
	gdb_6_0-2003-06-23-branchpoint:1.99
	jimb-ppc64-linux-20030613-branch:1.99.0.8
	jimb-ppc64-linux-20030613-branchpoint:1.99
	cagney_convert-20030606-branch:1.99.0.6
	cagney_convert-20030606-branchpoint:1.99
	cagney_writestrings-20030508-branch:1.98.0.20
	cagney_writestrings-20030508-branchpoint:1.98
	jimb-ppc64-linux-20030528-branch:1.99.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.99
	carlton_dictionary-20030523-merge:1.99
	cagney_fileio-20030521-branch:1.99.0.2
	cagney_fileio-20030521-branchpoint:1.99
	kettenis_i386newframe-20030517-mergepoint:1.99
	jimb-ppc64-linux-20030509-branch:1.98.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.98
	kettenis_i386newframe-20030504-mergepoint:1.98
	carlton_dictionary-20030430-merge:1.98
	kettenis_i386newframe-20030419-branch:1.98.0.16
	kettenis_i386newframe-20030419-branchpoint:1.98
	carlton_dictionary-20030416-merge:1.98
	cagney_frameaddr-20030409-mergepoint:1.98
	kettenis_i386newframe-20030406-branch:1.98.0.14
	kettenis_i386newframe-20030406-branchpoint:1.98
	cagney_frameaddr-20030403-branchpoint:1.98
	cagney_frameaddr-20030403-branch:1.98.0.12
	cagney_framebase-20030330-mergepoint:1.98
	cagney_framebase-20030326-branch:1.98.0.10
	cagney_framebase-20030326-branchpoint:1.98
	cagney_lazyid-20030317-branch:1.98.0.8
	cagney_lazyid-20030317-branchpoint:1.98
	kettenis-i386newframe-20030316-mergepoint:1.98
	offbyone-20030313-branch:1.98.0.6
	offbyone-20030313-branchpoint:1.98
	kettenis-i386newframe-20030308-branch:1.98.0.4
	kettenis-i386newframe-20030308-branchpoint:1.98
	carlton_dictionary-20030305-merge:1.98
	cagney_offbyone-20030303-branch:1.98.0.2
	cagney_offbyone-20030303-branchpoint:1.98
	carlton_dictionary-20030207-merge:1.98
	interps-20030203-mergepoint:1.97
	interps-20030202-branch:1.97.0.4
	interps-20030202-branchpoint:1.97
	cagney-unwind-20030108-branch:1.97.0.2
	cagney-unwind-20030108-branchpoint:1.97
	carlton_dictionary-20021223-merge:1.96
	gdb_5_3-2002-12-12-release:1.96
	carlton_dictionary-20021115-merge:1.96
	kseitz_interps-20021105-merge:1.96
	kseitz_interps-20021103-merge:1.96
	drow-cplus-merge-20021020:1.96
	drow-cplus-merge-20021025:1.96
	carlton_dictionary-20021025-merge:1.96
	carlton_dictionary-20021011-merge:1.96
	drow-cplus-branch:1.96.0.14
	drow-cplus-branchpoint:1.96
	kseitz_interps-20020930-merge:1.96
	carlton_dictionary-20020927-merge:1.96
	carlton_dictionary-branch:1.96.0.12
	carlton_dictionary-20020920-branchpoint:1.96
	gdb_5_3-branch:1.96.0.10
	gdb_5_3-2002-09-04-branchpoint:1.96
	kseitz_interps-20020829-merge:1.96
	cagney_sysregs-20020825-branch:1.96.0.8
	cagney_sysregs-20020825-branchpoint:1.96
	readline_4_3-import-branch:1.96.0.6
	readline_4_3-import-branchpoint:1.96
	gdb_5_2_1-2002-07-23-release:1.95
	kseitz_interps-20020528-branch:1.96.0.4
	kseitz_interps-20020528-branchpoint:1.96
	cagney_regbuf-20020515-branch:1.96.0.2
	cagney_regbuf-20020515-branchpoint:1.96
	jimb-macro-020506-branch:1.95.0.4
	jimb-macro-020506-branchpoint:1.95
	gdb_5_2-2002-04-29-release:1.95
	gdb_5_2-branch:1.95.0.2
	gdb_5_2-2002-03-03-branchpoint:1.95
	gdb_5_1_1-2002-01-24-release:1.93
	gdb_5_1_0_1-2002-01-03-release:1.93
	cygnus_cvs_20020108_pre:1.94
	gdb_5_1_0_1-2002-01-03-branchpoint:1.93
	gdb_5_1_0_1-2002-01-03-branch:1.93.0.6
	gdb_5_1-2001-11-21-release:1.93
	gdb_s390-2001-09-26-branch:1.93.0.4
	gdb_s390-2001-09-26-branchpoint:1.93
	gdb_5_1-2001-07-29-branch:1.93.0.2
	gdb_5_1-2001-07-29-branchpoint:1.93
	dberlin-typesystem-branch:1.89.0.2
	dberlin-typesystem-branchpoint:1.89
	gdb-post-ptid_t-2001-05-03:1.82
	gdb-pre-ptid_t-2001-05-03:1.82
	insight-precleanup-2001-01-01:1.56
	gdb-post-protoization-2000-07-29:1.42
	gdb-pre-protoization-2000-07-29:1.42
	gdb-premipsmulti-2000-06-06-branch:1.30.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.30
	gdb-post-params-removal-2000-06-04:1.27
	gdb-pre-params-removal-2000-06-04:1.27
	gdb-post-params-removal-2000-05-28:1.25
	gdb-pre-params-removal-2000-05-28:1.25
	gdb_5_0-2000-05-19-release:1.7.2.10
	gdb_4_18_2-2000-05-18-release:1.7.2.10
	gdb_4_95_1-2000-05-11-snapshot:1.7.2.8
	gdb_4_95_0-2000-04-27-snapshot:1.7.2.7
	gdb_5_0-2000-04-10-branch:1.7.0.2
	gdb_5_0-2000-04-10-branchpoint:1.7
	repo-unification-2000-02-06:1.1.1.2
	insight-2000-02-04:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.100
date	2004.11.09.15.35.15;	author cagney;	state dead;
branches;
next	1.99;

1.99
date	2003.05.17.05.59.57;	author cagney;	state Exp;
branches;
next	1.98;

1.98
date	2003.02.04.23.59.25;	author cagney;	state Exp;
branches
	1.98.16.1;
next	1.97;

1.97
date	2003.01.02.20.29.15;	author kettenis;	state Exp;
branches;
next	1.96;

1.96
date	2002.05.11.23.48.23;	author drow;	state Exp;
branches
	1.96.12.1
	1.96.14.1;
next	1.95;

1.95
date	2002.01.13.16.16.58;	author cagney;	state Exp;
branches;
next	1.94;

1.94
date	2001.11.15.06.43.10;	author cagney;	state Exp;
branches;
next	1.93;

1.93
date	2001.07.10.22.38.38;	author cagney;	state Exp;
branches;
next	1.92;

1.92
date	2001.07.07.17.39.35;	author cagney;	state Exp;
branches;
next	1.91;

1.91
date	2001.07.07.17.19.50;	author cagney;	state Exp;
branches;
next	1.90;

1.90
date	2001.07.07.16.12.19;	author cagney;	state Exp;
branches;
next	1.89;

1.89
date	2001.07.04.20.52.13;	author cagney;	state Exp;
branches;
next	1.88;

1.88
date	2001.07.04.18.51.51;	author cagney;	state Exp;
branches;
next	1.87;

1.87
date	2001.06.29.20.32.48;	author ezannoni;	state Exp;
branches;
next	1.86;

1.86
date	2001.06.29.01.19.23;	author cagney;	state Exp;
branches;
next	1.85;

1.85
date	2001.06.28.19.04.10;	author cagney;	state Exp;
branches;
next	1.84;

1.84
date	2001.06.28.03.33.26;	author cagney;	state Exp;
branches;
next	1.83;

1.83
date	2001.05.10.18.20.51;	author cagney;	state Exp;
branches;
next	1.82;

1.82
date	2001.04.27.16.40.29;	author cagney;	state Exp;
branches;
next	1.81;

1.81
date	2001.04.27.16.20.51;	author cagney;	state Exp;
branches;
next	1.80;

1.80
date	2001.04.19.23.56.13;	author cagney;	state Exp;
branches;
next	1.79;

1.79
date	2001.04.17.21.20.48;	author cagney;	state Exp;
branches;
next	1.78;

1.78
date	2001.04.11.22.39.07;	author cagney;	state Exp;
branches;
next	1.77;

1.77
date	2001.04.06.16.25.21;	author cagney;	state Exp;
branches;
next	1.76;

1.76
date	2001.04.05.14.49.28;	author cagney;	state Exp;
branches;
next	1.75;

1.75
date	2001.04.03.21.56.01;	author cagney;	state Exp;
branches;
next	1.74;

1.74
date	2001.04.03.21.14.36;	author cagney;	state Exp;
branches;
next	1.73;

1.73
date	2001.04.02.20.57.26;	author cagney;	state Exp;
branches;
next	1.72;

1.72
date	2001.03.27.07.09.01;	author eliz;	state Exp;
branches;
next	1.71;

1.71
date	2001.03.26.18.06.43;	author cagney;	state Exp;
branches;
next	1.70;

1.70
date	2001.03.24.01.26.09;	author cagney;	state Exp;
branches;
next	1.69;

1.69
date	2001.03.23.01.14.10;	author cagney;	state Exp;
branches;
next	1.68;

1.68
date	2001.03.22.14.59.09;	author cagney;	state Exp;
branches;
next	1.67;

1.67
date	2001.03.19.23.19.23;	author cagney;	state Exp;
branches;
next	1.66;

1.66
date	2001.03.15.17.06.00;	author cagney;	state Exp;
branches;
next	1.65;

1.65
date	2001.03.14.22.05.34;	author cagney;	state Exp;
branches;
next	1.64;

1.64
date	2001.03.08.15.13.00;	author cagney;	state Exp;
branches;
next	1.63;

1.63
date	2001.03.08.03.19.59;	author cagney;	state Exp;
branches;
next	1.62;

1.62
date	2001.03.05.22.22.57;	author cagney;	state Exp;
branches;
next	1.61;

1.61
date	2001.02.23.22.20.38;	author cagney;	state Exp;
branches;
next	1.60;

1.60
date	2001.02.19.23.20.54;	author cagney;	state Exp;
branches;
next	1.59;

1.59
date	2001.02.16.22.59.48;	author cagney;	state Exp;
branches;
next	1.58;

1.58
date	2001.02.08.06.03.52;	author cagney;	state Exp;
branches;
next	1.57;

1.57
date	2001.01.31.01.24.00;	author cagney;	state Exp;
branches;
next	1.56;

1.56
date	2000.12.21.16.28.28;	author fnasser;	state Exp;
branches;
next	1.55;

1.55
date	2000.11.27.00.37.19;	author cagney;	state Exp;
branches;
next	1.54;

1.54
date	2000.11.20.02.06.18;	author cagney;	state Exp;
branches;
next	1.53;

1.53
date	2000.11.20.01.57.26;	author cagney;	state Exp;
branches;
next	1.52;

1.52
date	2000.11.03.22.00.56;	author jtc;	state Exp;
branches;
next	1.51;

1.51
date	2000.10.23.22.49.28;	author davea;	state Exp;
branches;
next	1.50;

1.50
date	2000.09.06.15.23.04;	author hjl;	state Exp;
branches;
next	1.49;

1.49
date	2000.08.08.03.23.14;	author taylor;	state Exp;
branches;
next	1.48;

1.48
date	2000.08.04.09.32.19;	author cagney;	state Exp;
branches;
next	1.47;

1.47
date	2000.08.03.08.39.21;	author cagney;	state Exp;
branches;
next	1.46;

1.46
date	2000.08.03.05.49.02;	author cagney;	state Exp;
branches;
next	1.45;

1.45
date	2000.08.02.11.11.46;	author cagney;	state Exp;
branches;
next	1.44;

1.44
date	2000.08.02.05.40.25;	author cagney;	state Exp;
branches;
next	1.43;

1.43
date	2000.08.02.01.07.38;	author cagney;	state Exp;
branches;
next	1.42;

1.42
date	2000.07.24.14.49.05;	author green;	state Exp;
branches;
next	1.41;

1.41
date	2000.07.11.08.51.59;	author cagney;	state Exp;
branches;
next	1.40;

1.40
date	2000.07.09.19.11.44;	author ezannoni;	state Exp;
branches;
next	1.39;

1.39
date	2000.07.05.08.05.53;	author cagney;	state Exp;
branches;
next	1.38;

1.38
date	2000.07.04.22.55.42;	author kettenis;	state Exp;
branches;
next	1.37;

1.37
date	2000.06.23.08.12.27;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2000.06.12.06.12.14;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2000.06.08.06.35.39;	author cagney;	state Exp;
branches;
next	1.34;

1.34
date	2000.06.08.04.00.56;	author cagney;	state Exp;
branches;
next	1.33;

1.33
date	2000.06.08.00.52.56;	author cagney;	state Exp;
branches;
next	1.32;

1.32
date	2000.06.07.04.43.30;	author cagney;	state Exp;
branches;
next	1.31;

1.31
date	2000.06.07.04.38.02;	author cagney;	state Exp;
branches;
next	1.30;

1.30
date	2000.06.05.05.20.58;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2000.06.04.13.46.37;	author cagney;	state Exp;
branches;
next	1.28;

1.28
date	2000.06.04.01.58.49;	author cagney;	state Exp;
branches;
next	1.27;

1.27
date	2000.06.01.10.26.00;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2000.05.30.08.52.57;	author cagney;	state Exp;
branches;
next	1.25;

1.25
date	2000.05.25.01.50.50;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2000.05.25.01.07.17;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2000.05.23.07.49.05;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2000.05.22.02.07.18;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2000.05.17.08.46.20;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2000.05.16.09.00.20;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2000.05.16.05.07.53;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2000.05.15.23.10.56;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2000.05.12.10.50.50;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2000.05.12.10.42.02;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.27.00.23.02;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.26.08.12.39;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.23.08.15.49;	author eliz;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.19.10.33.21;	author schauer;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.19.09.15.32;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.19.07.01.08;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.19.03.37.07;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.10.10.52.19;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.07.04.33.21;	author cagney;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.04.04.05.13.44;	author dberlin;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.04.02.11.36;	author hjl;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.03.08.47.48;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.29.03.51.18;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.27.10.24.58;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.33.57;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.33.57;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.05.14.42.08;	author shebs;	state Exp;
branches;
next	;

1.7.2.1
date	2000.04.10.11.17.12;	author cagney;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2000.04.14.00.01.26;	author cagney;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2000.04.19.03.37.11;	author cagney;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2000.04.19.07.01.00;	author cagney;	state Exp;
branches;
next	1.7.2.5;

1.7.2.5
date	2000.04.23.09.14.04;	author eliz;	state Exp;
branches;
next	1.7.2.6;

1.7.2.6
date	2000.04.26.08.03.30;	author cagney;	state Exp;
branches;
next	1.7.2.7;

1.7.2.7
date	2000.04.27.00.20.19;	author cagney;	state Exp;
branches;
next	1.7.2.8;

1.7.2.8
date	2000.05.11.00.32.18;	author cagney;	state Exp;
branches;
next	1.7.2.9;

1.7.2.9
date	2000.05.12.10.42.02;	author cagney;	state Exp;
branches;
next	1.7.2.10;

1.7.2.10
date	2000.05.12.10.50.47;	author cagney;	state Exp;
branches;
next	;

1.96.12.1
date	2003.02.07.19.17.43;	author carlton;	state Exp;
branches;
next	1.96.12.2;

1.96.12.2
date	2003.05.23.18.40.34;	author carlton;	state Exp;
branches;
next	;

1.96.14.1
date	2003.12.14.20.27.04;	author drow;	state Exp;
branches;
next	;

1.98.16.1
date	2003.05.18.09.43.56;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.100
log
@2004-11-09  Andrew Cagney  <cagney@@gnu.org>

	* TODO: Delete.
@
text
@If you find inaccuracies in this list, please send mail to
gdb-patches@@sources.redhat.com.  If you would like to work on any
of these, you should consider sending mail to the same address, to
find out whether anyone else is working on it.


			GDB 5.1 - Fixes
			===============

Below is a list of problems identified during the GDB 5.0 release
cycle.  People hope to have these problems fixed in 5.1.

--

Wow, three bug reports for the same problem in one day!  We should
probably make fixing this a real priority :-).

Anyway, thanks for reporting.

The following patch will fix the problems with setting breakpoints in
dynamically loaded objects:

   http://sources.redhat.com/ml/gdb-patches/2000-05/msg00230.html

This patch isn't checked in yet (ping Michael/JimB), but I hope this
will be in the next GDB release.

There should really be a test in the testsuite for this problem, since
it keeps coming up :-(.  Any volunteers?

Mark

--

		GDB 5.1 - New features
		======================

The following new features should be included in 5.1.

--

		GDB 5.1 - Cleanups
		==================

The following code cleanups will hopefully be applied to GDB 5.1.

--

		GDB 5.1 - Known Problems
		========================

--

z8k

The z8k has suffered bit rot and is known to not build.  The problem
was occuring in the opcodes directory.

--

The BFD directory requires bug-fixed AUTOMAKE et.al.

AUTOMAKE 1.4 incorrectly set the TEXINPUTS environment variable.  It
contained the full path to texinfo.tex when it should have only
contained the directory.  The bug has been fixed in the current
AUTOMAKE sources.  Automake snapshots can be found in:
	ftp://sources.redhat.com/pub/gdb/infrastructure
and	ftp://sources.redhat.com/pub/binutils

--

Solaris 8 x86 CURSES_H problem
http://sources.redhat.com/ml/gdb/2000-07/msg00038.html

The original problem was worked around with:

    2000-06-06  Michael Snyder  <msnyder@@cygnus.com>

        * configure.in: Enable autoconf to find curses.h on Solaris 2.8.
        * configure: Regenerate.

When building both GDB and SID using the same source tree the problem
will still occure. sid/component/configure.in mis-configures
<curses.h> and leaves wrong information in the config cache.

--

		GDB 5.2 - Fixes
		===============

--

		GDB 5.2 - New features
		======================

--

GCC 3.0 ABI support (but hopefully sooner...).

--

Objective C/C++ support (but hopefully sooner...).

--

Import of readline 4.2

--

		GDB 5.2 - Cleanups
		==================

The following cleanups have been identified as part of GDB 5.2.

--

Compiler warnings.

Eliminate warnings for all targets on at least one host for one of the
-W flags.  Flags up for debate include: -Wswitch -Wcomment -trigraphs
-Wtrigraphs -Wunused-function -Wunused-label -Wunused-variable
-Wunused-value -Wchar-subscripts -Wtraditional -Wshadow -Wcast-qual
-Wcast-align -Wwrite-strings -Wconversion -Wstrict-prototypes
-Wmissing-prototypes -Wmissing-declarations -Wredundant-decls
-Woverloaded-virtual -Winline

--

Deprecate, if not delete, the following:

        register[]
        register_valid[]
	REGISTER_BYTE()
                Replaced by, on the target side
                  supply_register()
                and on core-gdb side:
                  {read,write}_register_gen()
		Remote.c will need to use something
		other than REGISTER_BYTE() and
		REGISTER_RAW_SIZE() when unpacking
		[gG] packets.

        STORE_PSEUDO_REGISTER
        FETCH_PSEUDO_REGISTER
                Now handed by the methods
                  gdbarch_{read,write}_register()
                which sits between core GDB and
                the register cache.

        REGISTER_CONVERTIBLE
        REGISTER_CONVERT_TO_RAW
        REGISTER_CONVERT_TO_VIRTUAL
                I think these three are redundant.
                gdbarch_register_{read,write} can
                do any conversion it likes.

        REGISTER_VIRTUAL_SIZE
        MAX_REGISTER_VIRTUAL_SIZE
        REGISTER_VIRTUAL_TYPE
                I think these can be replaced by
		the pair:
                  FRAME_REGISTER_TYPE(frame, regnum)
                  REGISTER_TYPE(regnum)

	DO_REGISTERS_INFO
		Replace with
		 FRAME_REGISTER_INFO (frame, ...)

	REGISTER_SIM_REGNO()
		If nothing else rename this so that
		how it relates to rawreg and the
		regnum is clear.

--

Obsolete the targets:

arm*-wince-pe
mips*-*-pe
sh*-*-pe

--

Obsolete the protocols:

RDB?

``As of version 5.3, WindRiver has removed the RDB server (RDB
protocol support is built into gdb).''  -- Till.

--

Restructure gdb directory tree so that it avoids any 8.3 and 14
filename problems.

--

Convert GDB build process to AUTOMAKE.

See also sub-directory configure below.

The current convention is (kind of) to use $(<header>_h) in all
dependency lists.  It isn't done in a consistent way.

--

		GDB 5.2 - Known Problems
		========================

--

		Code Cleanups: General
		======================

The following are more general cleanups and fixes.  They are not tied
to any specific release.


			New Features and Fixes
			======================

These are harder than cleanups but easier than work involving
fundamental architectural change.

--

			Language Support
			================

New languages come onto the scene all the time.

--

Re: Various C++ things

RTTI for g++ should be using the typeinfo functions rather than the
vtables.  The typeinfo functions are always at offset 4 from the
beginning of the vtable, and are always right. The vtables will have
weird names like E::VB sometimes.  The typeinfo function will always
be "E type_info function", or somesuch.

value_virtual_fn_field needs to be fixed so there are no failures for
virtual functions for C++ using g++.

Testsuite cases are the major priority right now for C++ support,
since i have to make a lot of changes that could potentially break
each other.

--


			Symbol Support
			==============

--

Investiagate ways of reducing memory.

--

Investigate ways of improving load time.

--

			Testsuite Support
			=================

There are never to many testcases.

--

Better thread testsuite.

--

Better C++ testsuite.

--

		Architectural Changes: General
		==============================

These are harder than simple cleanups / fixes and, consequently
involve more work.  Typically an Architectural Change will be broken
down into a more digestible set of cleanups and fixes.

--

		Architectural Change: Multi-arch et al.
		=======================================

The long term objective is to remove all assumptions that there is a
single target with a single address space with a single instruction
set architecture and single application binary interface.

This is an ongoing effort.  The first milestone is to enable
``multi-arch'' where by all architectural decisions are made at
runtime.

It should be noted that ``gdbarch'' is really ``gdbabi'' and
``gdbisa''.  Once things are multi-arched breaking that down correctly
will become much easier.

--

	Architectural Change: MI, LIBGDB and scripting languages
	========================================================

See also architectural changes related to the event loop.  LIBGDB
can't be finished until there is a generic event loop being used by
all targets.

The long term objective is it to be possible to integrate GDB into
scripting languages.

--

		Architectural Change: Async
		===========================

While GDB uses an event loop when prompting the user for input.  That
event loop is not exploited by targets when they allow the target
program to continue.  Typically targets still block in (target_wait())
until the program again halts.

The closest a target comes to supporting full asynchronous mode are
the remote targets ``async'' and ``extended-async''.

--

# Local Variables:
# mode: text
# End:
@


1.99
log
@2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTES): Rename REGISTER_BYTES.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-linux-tdep.c (arm_linux_extract_return_value): Delete reference.
	* TODO (REGISTER_BYTES): Delete reference.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init_32082): Update.
	(ns32k_gdbarch_init_32382): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* sparc-tdep.c (sparc_pop_frame): Update.
	* rs6000-tdep.c (rs6000_pop_frame): Update.
	* remote.c (init_remote_state): Update.
	(remote_prepare_to_store): Update.
	* remote-vx.c (vx_prepare_to_store): Update.
	* remote-sds.c (sds_fetch_registers): Update.
	(sds_prepare_to_store): Update.
	* remote-array.c: Update.
	* regcache.c (init_legacy_regcache_descr): Update.
	(init_regcache_descr): Update.
	* mips-tdep.c (mips_eabi_extract_return_value): Update.
	(mips_o64_extract_return_value): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* irix4-nat.c (fetch_core_registers): Update.
	* i386-tdep.h: Update.
	* hppa-tdep.c (pa_do_registers_info): Update.
	(pa_do_strcat_registers_info): Update.
	* cris-tdep.c (cris_register_bytes_ok): Update.
	* config/nm-gnu.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/sparc/nm-sun4sol2.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-sun4os4.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-nbsd.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/s390/tm-s390.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-mips.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix6.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix5.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/m68k/tm-sun3.h (DEPRECATED_REGISTER_BYTES): Update.
	(REGISTER_BYTES_OK): Update.
	* config/m68k/nm-sun3.h (CHILD_PREPARE_TO_STORE): Update.
	* config/ia64/tm-ia64.h (DEPRECATED_REGISTER_BYTES): Update.

Index: doc/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	REGISTER_BYTES with DEPRECATED_REGISTER_BYTES.  Fix typo,
	DEPRECATED_REGISTER_SIZE instead of REGISTER_BYTE.

Index: mi/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_setup_architecture_data):
@
text
@@


1.98
log
@2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* values.c: Delete code conditional on IS_TRAPPED_INTERNALVAR.
	* TODO: Delete reference to IS_TRAPPED_INTERNALVAR.
	* utils.c (init_page_info): Delete reference to MPW in comments.
	* main.c (captured_main): Delete #ifdef MPW.

Index: doc/ChangeLog
2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	descrption of IS_TRAPPED_INTERNALVAR.
@
text
@a173 4
	REGISTER_BYTES
		The size of the cache can be computed
		on the fly.

@


1.98.16.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d174 4
@


1.97
log
@* configure.in: Remove UI_OUT configuration code.
* ada-lang.c: Update assuming UI_OUT is always true.
* Makefile.in (UIOUT_CFLAGS): Remove.
* configure: Regenerated.
* TODO: Remove blurb about elimination of -DUI_OUT.
@
text
@a177 4
	IS_TRAPPED_INTERNALVAR
		The pseudo registers should eventually make
		this redundant.

@


1.96
log
@2002-05-11  Daniel Jacobowitz  <drow@@mvista.com>

        * TODO: Remove value_headof/value_from_vtable_info comment.
        * printcmd.c (print_command_1): Don't call value_from_vtable_info.
        * values.c (value_headof, value_from_vtable_info): Delete.
        * value.h (value_from_vtable_info): Delete prototype.
@
text
@a116 6
Remove old code that does not use ui_out functions and all the related
"ifdef"s.  This also allows the elimination of -DUI_OUT from
Makefile.in and configure.in.

--

@


1.96.14.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d117 6
d179 8
@


1.96.12.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d117 6
d183 4
@


1.96.12.2
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d174 4
@


1.95
log
@From 2002-01-09 John Marshall <johnm@@falch.net>:
* CONTRIBUTE, README, TODO: Change sourceware.cygnus.com to
sources.redhat.com, and tweak some related URLs which had
suffered from linkrot.
@
text
@a249 4
value_headof/value_from_vtable_info are worthless, and should be
removed.  The one place in printcmd.c that uses it should use the RTTI
functions.

@


1.94
log
@* TODO (register_buffer): Delete.
* regcache.c (register_buffer): Make static.
(regcache_collect): New function.
* regcache.h (register_buffer): Delete declaration.
(regcache_collect): Declare.
* remote.c (store_register_using_P): Rewrite using
regcache_collect.
(remote_store_registers): Ditto.
* go32-nat.c (store_register): Ditto.
@
text
@d2 1
a2 1
gdb-patches@@sourceware.cygnus.com.  If you would like to work on any
d23 1
a23 1
   http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00230.html
d67 2
a68 2
	ftp://sourceware.cygnus.com/pub/gdb/snapshots
and	ftp://sourceware.cygnus.com/pub/binutils
@


1.93
log
@m88k builds.  Tweek remote-bug.c to include "serial.h".
@
text
@a138 1
        register_buffer()
@


1.92
log
@Updates.
@
text
@a60 6
m88k

The m88k has suffered bit rot and is known to not build.

--

@


1.91
log
@* symtab.c (main_name): New function.
(set_main_name): New function.
* symtab.h: Declare.
* TODO: Update

From 2000-03-05 Anthony Green <green@@redhat.com>:
* dbxread.c (process_one_symbol): Handle the N_MAIN stab by
setting main_name.
* blockframe.c (inside_main_func): Use main_name instead of
"main".
* symtab.c (find_main_psymtab): Ditto.
* source.c (select_source_symtab): Ditto.
* nlmread.c (nlm_symfile_read): Ditto.
* rs6000-tdep.c (skip_prologue): Ditto.
@
text
@a34 13
x86 linux GDB and SIGALRM (???)
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00803.html

This problem has been fixed, but a regression test still needs to be
added to the testsuite:
http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00309.html

Mark

[The test has been submitted for approval - cagney]

--

a38 22

--

Pascal (Pierre Muller, David Taylor)

Pierre Muller has contributed patches for adding Pascal Language
support to GDB.

2 pascal language patches inserted in database
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00521.html

Indent -gnu ?
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00496.html

[I think this has been merged, need to confirm - cagney]

-- 2001-03-08

Add CRIS target.

A predicate to this is the multi-arching of SOFTWARE_SINGLE_STEP().  A
patch has been submitted.
@


1.90
log
@TODO: Convert most items into PRs.
@
text
@a67 17
--

Java (Anthony Green, David Taylor)

Anthony Green has a number of Java patches that did not make it into
the 5.0 release.  The first two are in cvs now, but the third needs
some fixing up before it can go in.

Patch: java tests
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00512.html

Patch: java booleans
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00515.html

Patch: handle N_MAIN stab
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00527.html

@


1.89
log
@* gdbint.texinfo (Target Architecture Definition): GDBARCH is a C
structure and not macros.
(Host Definition): Document that much of this chapter is obsolete.
(Target Architecture Definition): Update list of files that make
up a target architecture.
(Coding): Update.
@
text
@a47 23
RFD: infrun.c: No bpstat_stop_status call after proceed over break?
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00665.html

GDB misses watchpoint triggers after proceeding over a breakpoint on
x86 targets.

--

GDB 5.0 doesn't work on Linux/SPARC

There are two parts to this.

      o	  GDB 5.0 doesn't work on GNU/Linux/SPARC32

      o	  GDB 5.0 doesn't work on the new target
	  GNU/Linux/SPARC64

GDB does build on both these targets.

The first problem is the one that should be fixed.

--

a100 8
Fix copyright notices.

Turns out that ``1998-2000'' isn't considered valid :-(

http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00467.html

--

d119 11
d249 1
a249 1
Obsolete the targets.
d255 2
d259 1
a259 1
RDB
a290 277
--

Investigate changing --target=a29k-amd-udi to a29k-*-coff* and
rationalize *.mt files.  The got-ya is in remote-eb.c - it has its own
custom tty manipulation - it should be using the serial object.

--

Rename read_register{,_pid}() to read_unsigned_register{,_pid}().

--

Problem with weak functions
http://sourceware.cygnus.com/ml/gdb/2000-05/msg00060.html

Dan Nicolaescu writes:
> It seems that gdb-4.95.1  does not display correctly the function when
> stoping in weak functions. 
> 
> It stops in a function that is defined as weak, not in the function
> that is actually run... 

--

Follow through `make check' with --enable-shared.

When the srcware tree is configured with --enable-shared, the `expect'
program won't run properly.  Jim Wilson found out gdb has a local hack
to set LD_LIBRARY_PATH, but, AFAIK, no other project has been hacked
similarly.

http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00845.html

--

Delete macro TARGET_BYTE_ORDER_SELECTABLE.

Patches in the database.

--

printcmd.c (print_address_numeric):

NOTE: This assumes that the significant address information is kept in
the least significant bits of ADDR - the upper bits were either zero
or sign extended.  Should ADDRESS_TO_POINTER() or some
ADDRESS_TO_PRINTABLE() be used to do the conversion?

--

The BFD directory requires bug-fixed AUTOMAKE et.al.

AUTOMAKE 1.4 incorrectly set the TEXINPUTS environment variable.  It
contained the full path to texinfo.tex when it should have only
contained the directory.  The bug has been fixed in the current
AUTOMAKE sources.  Automake snapshots can be found in:
	ftp://sourceware.cygnus.com/pub/gdb/snapshots
and	ftp://sourceware.cygnus.com/pub/binutils

--

Find something better than DEFAULT_BFD_ARCH, DEFAULT_BFD_VEC to
determine the default isa/byte-order.

--

Rely on BFD_BIG_ENDIAN and BFD_LITTLE_ENDIAN instead of host dependent
BIG_ENDIAN and LITTLE_ENDIAN.

--

Eliminate more compiler warnings.

Of course there also needs to be the usual debate over which warnings
are valid and how to best go about this.

One method: choose a single option; get agreement that it is
reasonable; try it out to see if there isn't anything silly about it
(-Wunused-parameters is an example of that) then incrementally hack
away.

The other method is to enable all warnings and eliminate them from one
file at a time.

--

Elimination of ``(catch_errors_ftype *) func''.

Like make_cleanup_func it isn't portable.
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00791.html
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00814.html

--

Nuke #define CONST_PTR.

--

Nuke USG define.

--

[PATCH/5] src/intl/Makefile.in:distclean additions
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00363.html

Do not forget to merge the patch back into the trunk.

--

Rationalize the host-endian code (grep for HOST_BYTE_ORDER).

At present defs.h includes <endian.h> (which is linux specific) yet
almost nothing depends on it.  Suggest "gdb_endian.h" which can also
handle <machine/endian.h> and only include that where it is really
needed.

--

Replace savestring() with something from libiberty.

An xstrldup()? but that would have different semantics.

--

Rationalize use of floatformat_unknown in GDB sources.

Instead of defaulting to floatformat_unknown, should hosts/targets
specify the value explicitly?

http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00447.html

--

Add a ``name'' member to include/floatformat.h:struct floatformat.
Print that name in gdbarch.c.

--

Sort out the harris mess in include/floatformat.h (it hardwires two
different floating point formats).

--

See of the GDB local floatformat_do_doublest() and libiberty's
floatformat_to_double (which was once GDB's ...) can be merged some
how.

--

Eliminate mmalloc(), mstrsave() et.al. from GDB.

Also eliminate it from defs.h.

--

Eliminate PTR.  ISO-C allows ``void *''.

--

Eliminate abort ().

GDB should never abort.  GDB should either throw ``error ()'' or
``internal_error ()''.  Better still GDB should naturally unwind with
an error status.

--

GDB probably doesn't build on FreeBSD pre 2.2.x
http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00378.html

Fixes to get FreeBSD working on 2.2.x, 3.x and 4.x caused the code to
suffer bit rot.

--

Deprecate "fg".  Apparently ``fg'' is actually continue.

http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00417.html

--

Deprecate current use of ``floatformat_unknown''.

Require all targets to explicitly provide their float format instead
of defaulting to floatformat unknown.  Doing the latter leads to nasty
bugs.

http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00447.html

--

Rationalize floatformat_to_double() vs floatformat_to_doublest().

Looks like GDB migrated floatformat_to_double() to libiberty but then
turned around and created a ..._to_doublest() the latter containing
several bug fixes.

http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00472.html

--

Move floatformat_ia64_ext to libiberty/include floatformat.[ch].

http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00466.html

--

The ``maintenance deprecate set endian big'' command doesn't notice
that it is deprecating ``set endian'' and not ``set endian big'' (big
is implemented using an enum).  Is anyone going to notice this?

--

When tab expanding something like ``set arch<tab>'' ignore the
deprecated ``set archdebug'' and expand to ``set architecture''.

--

Eliminate ``arm_register_names[j] = (char *) regnames[j]'' and the
like from arm-tdep.c.

--

Fix uses of ->function.cfunc = set_function().

The command.c code calls sfunc() when a set command.  Rather than
change it suggest fixing the callback function so that it is more
useful.  See:

http://sourceware.cygnus.com/ml/gdb-patches/2000-06/msg00062.html

See also ``Fix implementation of  ``target xxx''.'' below.

--

IRIX 3.x support is probably broken.

--

Delete sim/SIM_HAVE_BREAKPOINTS and gdb/SIM_HAS_BREAKPOINTS.
http://sourceware.cygnus.com/ml/gdb-patches/2000-07/msg00042.html

Apart from the d30v, are there any sim/common simulators that make use
of this?

A brief summary of what happened is that sim/common/sim-break.c was
created as a good idea.  It turned out a better idea was to use
SIM_SIGBREAK and have GDB pass back sim_resume (..., SIGBREAK).

--

Move remote_remove_hw_breakpoint, remote_insert_hw_breakpoint,
remote_remove_watchpoint, remote_insert_watchpoint into target vector.

--

Eliminate ``extern'' from C files.

--

Replace ``STREQ()'' et.al. with ``strcmp() == 0'' et.al.

Extreme care is recommeded - perhaps only modify tests that are
exercised by the testsuite (as determined using some type of code
coverage analysis).

--

Replace the file gdb/CONTRIBUTE with a file that is generated from the
gdb/doc/*.texinfo directory.

--

Rewrite/break up sparcl-tdep.c so that it uses ser*.c as the mechanism
for accessing either the serial or UDP port.

--
d300 2
a301 1
Hardware watchpoint problems on x86 OSes, including Linux:
d303 1
a303 4
1. Delete/disable hardware watchpoints should free hardware debug
registers. 
2. Watch for different values on a viariable with one hardware debug
register.
d305 1
a305 1
According to Eli Zaretskii <eliz@@delorie.com>:
d307 1
a307 8
These are not GDB/ia32 issues per se: the above features are all
implemented in the DJGPP port of GDB and work in v5.0.  Every
x86-based target should be able to lift the relevant parts of
go32-nat.c and use them almost verbatim.  You get debug register
sharing through reference counts, and the ability to watch large
regions (up to 16 bytes) using multiple registers.  (The required
infrastructure in high-level GDB application code, mostly in
breakpoint.c, is also working since v5.0.)
d309 3
a311 1
--
d313 5
a317 2
Add built-by, build-date, tm, xm, nm and anything else into gdb binary
so that you can see how the GDB was created.
d319 2
a320 1
--
d322 3
a324 4
Add an "info bfd" command that displays supported object formats,
similarly to objdump -i.

Is there a command already?
a327 1
Fix ``I'm sorry, Dave, I can't do that.'' from symfile.c.
d329 2
a330 1
This requires internationalization.
d334 1
a334 4
Add support for:
 
(gdb) p fwprintf(stdout,L"%S\n", f)
No symbol "L" in current context.
d338 1
a338 7
Cleanup configury support for optional sub-directories.

Check how GCC handles multiple front ends for an example of how things
could work.  A tentative first step is to rationalize things so that
all sub directories are handled in a fashion similar to gdb/mi.

See also automake above.
d342 2
a343 1
Add a transcript mechanism to GDB.
d345 1
a345 3
Such a mechanism might log all gdb input and output to a file in a
form that would allow it to be replayed.  It could involve ``gdb
--transcript=FILE'' or it could involve ``(gdb) transcript file''.
d349 1
a349 1
Can the xdep files be replaced by autoconf?
d353 1
a353 1
Document trace machinery
d357 2
a358 1
Document ui-out and ui-file.
d360 3
a362 1
http://sourceware.cygnus.com/ml/gdb/2000-04/msg00121.html
d366 2
a367 1
Update texinfo.tex to latest?
d369 3
a371 1
--
d373 3
a375 1
Incorporate agentexpr.texi into gdb.texinfo
d377 3
a379 5
agentexpr.texi mostly describes the details of the byte code used for
tracepoints, not the internals of the support for this in GDB.  So it
looks like gdb.texinfo is a better place for this information.

http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00566.html
d383 2
a384 1
Document overlay machinery.
d386 3
a388 1
--
d390 2
a391 5
``(gdb) catch signal SIGNAL''

Overlaps with ``handle SIGNAL'' but the implied behavior is different.
You can attach commands to a catch but not a handle.  A handle has a
limited number of hardwired actions.
d395 2
a396 1
Fix TUI
d398 4
a401 1
     o  readline/*.h bitrot
d403 2
a404 5
        The TUI isn't up-to-date with
        respect to the readline currently
        bundled with GDB.  Importing a
        new readline is on the 5.1 wish
        list so this can only get worse.
d406 1
a406 1266
        Grep for things like term_cursor_move.

        (To be honest, I don't see anyone
        importing a new readline before 5.1 is
        out)

     o  tui.c:va_catch_errors() bitrot

        This nasty piece of work used knowledge
        of the internals of GDBs error functions :-(
        Ever since those internals were cleaned
        up this code has been broken. :-(

     o  tuiWin.c:c_makeVisibleWithNewHeight() broken
        tuiLayout.c:_extractDisplayStartAddr() broken

        Both these function call find_line_pc()
        incorrectly (wrong args, wrong return value).

        I suspect this bug has always been there!
        It had been hidden because those files
        didn't include the necessary header files
        from gdb proper :-(

     o  tuiRegs() host dependant

        Not suprisingly, this isn't a very portable
        section of code.  However, I'm sure people
        could live with no regs in the short to
        medium term.

     o  defs.h: #include "tui.h" et.al.

        I'm not sure where this came from.
        It was a really bad idea.

        To get things to compile I did a nasty
        hack (Just declare what was needed and
        replace any expressions like xx->y.z()
        in GDB proper with function calls).  I
        could commit it slightly cleaned up if
        you like.

        Medium Term. the #ifdef TUI and TuiDo()
        should be changed to hooks (like GDBTK).
        The gdb-events.[hc] is there for that
        purpose (1)

     o  tui.c:_tuiReset() host dependant

        tui.c contains a lump of termio[s]
        I suspect an equivalent block of
        code can be lifted from readline.
        An equivalent readline function may
        even be available.

     o  curses.h vs ncurses.h.

        Simple portability problem.

     o  subsetCompare()

        This function is a mystery - where is it?

     o  tui-file.[hc] cleanup

        This can be significantly simplified.

     o  The code should be pacified. (-Werror -W...)

        There are plenty of #includes,
        duplicate #includes, missing function decls
        and the like.

        Some of the problems I found were through
        fixing a few of the warnings.

     o  The code should be GNUtified.

        It would be very nice to have this code
        look like the rest of GDB.  That way people
        would be more accepting of it as a true
        gdb component.

        Until it is GNUtified it is going to stick
        out like a sore thumb to the programmer.

     o  The code should be clearly copyrighted

        (FSF, with due credit to HP)

--

Add support for ``gdb --- PROGRAM ARGS ...''.
Add support for ``gdb -cmd=...''

Along with many variations.  Check:

????? for a full discussion.

for a discussion.

--

Implement ``(gdb) !ls''.

Which is very different from ``(gdb) ! ls''.  Implementing the latter
is trivial.

http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00034.html

--

Change the (char *list[]) to (const char (*)[]) so that dynamic lists can
be passed.

--

When tab expanding something like ``set arch<tab>'' ignore the
deprecated ``set archdebug'' and expand to ``set architecture''.

--

Replace the code that uses the host FPU with an emulator of the target
FPU.

--

The "ocd reset" command needs to flush the dcache, which requires breaking
the abstraction layer between the target independent and target code.  One
way to address this is provide a generic "reset" command and target vector.

http://sources.redhat.com/ml/gdb-patches/2000-10/msg00011.html

--

			Language Support
			================

New languages come onto the scene all the time.

--

Re: Various C++ things

value_headof/value_from_vtable_info are worthless, and should be
removed.  The one place in printcmd.c that uses it should use the RTTI
functions.

RTTI for g++ should be using the typeinfo functions rather than the
vtables.  The typeinfo functions are always at offset 4 from the
beginning of the vtable, and are always right. The vtables will have
weird names like E::VB sometimes.  The typeinfo function will always
be "E type_info function", or somesuch.

value_virtual_fn_field needs to be fixed so there are no failures for
virtual functions for C++ using g++.

Testsuite cases are the major priority right now for C++ support,
since i have to make a lot of changes that could potentially break
each other.

--

Add support for Modula3

Get DEC/Compaq to contribute their Modula-3 support.

--

		Remote Protocol Support
		=======================

--

Revised UDP support (was: Re: [Fwd: [patch] UDP transport support])
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00000.html

(Broken) support for GDB's remote protocol across UDP is to be
included in the follow-on release.

It should be noted that UDP can only work when the [Gg] packet fits in
a single UDP packet.

There is also much debate over the merit of this.

--

Migrate qfThreadInfo packet -> qThreadInfo. (Andrew Cagney)

Add support for packet enable/disable commands with these thread
packets.  General cleanup.

[PATCH] Document the ThreadInfo remote protocol queries
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00832.html

[PATCH] "info threads" queries for remote.c
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00831.html

--

Remote protocol doco feedback.

Too much feedback to mention needs to be merged in (901660).  Search
for the word ``remote''.


http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00023.html
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00056.html
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00382.html

--

GDB doesn't recover gracefully from remote protocol errors.

GDB wasn't checking for NAKs from the remote target.  Instead a NAK is
ignored and a timeout is required before GDB retries.  A pre-cursor to
fixing this this is making GDB's remote protocol packet more robust.

While downloading to a remote protocol target, gdb ignores packet
errors in so far as it will continue to download with chunk N+1 even
if chunk N was not correctly sent.  This causes gdb.base/remote.exp to
take a painfully long time to run.  As a PS that test needs to be
fixed so that it builds on 16 bit machines.

--

Fix the ``!'' packet.

JT reported that the existing targets do, in fact return ``OK'' so it
is possible to merge remote and extended-remote targets.

--

Drop ``<address>'' from the [SsCc] packets.

I don't think that GDB generates them so having it in the protocol is
silly.

--

Fix doco on the ``q'' packet.

It has evolved into a generic RPC.  The notes should reflect this and,
perhaps, the ``Q'' packet can be deprecated.

The doco should mention that ``OK'' is a valid packet response.

The doco should explain why ``OK'' needs to be a valid packet
response.

--

Add the cycle step command.

http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00237.html

--

Resolve how to scale things to support very large packets.

--

Resolve how to handle a target that changes things like its endianess
on the fly - should it be returned in the ``T'' packet?

Underlying problem is that the register file is target endian.  If the
target endianess changes gdb doesn't know.

Suggest encoding registers as NN!VALUE.

--

GDB should allow incomming packets to be larger than outgoing ones.  A
fully loaded T packet (containing all registers) can be very large -
definitly larger than a corresponding Gg packet.

--

			Symbol Support
			==============

If / when GDB starts to support the debugging of multi-processor
(rather than multi-thread) applications the symtab code will need to
be updated a little so that several independent symbol tables are
active at a given time.

The other interesting change is a clarification of the exact meaning
of CORE_ADDR and that has had consequences for a few targets (that
were abusing that data type).

--

Investiagate ways of reducing memory.

--

Investigate ways of improving load time.

--

Get the d10v to use POINTER_TO_ADDRESS and ADDRESS_TO_POINTER.

Consequence of recent symtab clarification.  No marks for figuring out
who maintains the d10v.

--

Get the MIPS to correctly sign extend all address <-> pointer
conversions.

Consequence of recent symtab clarification.  No marks for figuring out
who maintains the MIPS.

--

GDB truncates 64 bit enums.

http://sourceware.cygnus.com/ml/gdb-patches/2000-06/msg00290.html

--

			Testsuite Support
			=================

There are never to many testcases.

--

Better thread testsuite.

--

Better C++ testsuite.

--

Look at adding a GDB specific testsuite directory so that white box
tests of key internals can be added (eg ui_file).

--

Separate out tests that involve the floating point (FP).

(Something for people brining up new targets).  FP and non-fp tests
are combined.  I think there should be set of basic tests that
exercise pure integer support and then a more expanded set that
exercise FP and FP/integer interactions.

As an example, the MIPS, for n32 as problems with passing FP's and
structs.  Since most inferior call tests include FP it is difficult to
determine of the integer tests are ok.

--

		Architectural Changes: General
		==============================

These are harder than simple cleanups / fixes and, consequently
involve more work.  Typically an Architectural Change will be broken
down into a more digestible set of cleanups and fixes.

--

Cleanup software single step.

At present many targets implement software single step by directly
blatting memory (see rs6000-tdep.c).  Those targets should register
the applicable breakpoints using the breakpoint framework.  Perhaphs a
new internal breakpoint class ``step'' is needed.

--

Replace READ_FP() with FRAME_HANDLE().

READ_FP() is a hangover from the days of the vax when the ABI really
did have a frame pointer register.  Modern architectures typically
construct a virtual frame-handle from the stack pointer and various
other bits of string.

Unfortunately GDB still treats this synthetic FP register as though it
is real.  That in turn really confuses users (arm and ``print $fp'' VS
``info registers fp'').  The synthetic FP should be separated out of
the true register set presented to the user.

--

Register Cache Cleanup (below from Andrew Cagney)

I would depict the current register architecture as something like:

        High GDB  -->   Low GDB
            |              |
           \|/            \|/
            --- REG NR -----
                   |
    register + REGISTER_BYTE(reg_nr)
                   |
                  \|/
        -------------------------
        |  extern register[]    |
        -------------------------

where neither the high (valops.c et.al.) or low gdb (*-tdep.c) are
really clear on what mechanisms they should be using to manipulate that
buffer.   Further, much code assumes, dangerously, that registers are
contigious.  Having got mips-tdep.c to support multiple ABIs, believe
me, that is a bad assumption.  Finally, that register cache layout is
determined by the current remote/local target and _not_ the less
specific target ISA.  In fact, in many cases it is determined by the
somewhat arbitrary layout of the [gG] packets!


How I would like the register file to work is more like:


          High GDB
             |
            \|/
       pseudo reg-nr
             |
        map pseudo <->
        random cache
        bytes       
             |
            \|/
        ------------
        | register |
        |  cache   |
        ------------
            /|\
             |
        map random cache
        bytes to target
        dependent i-face
            /|\
             |
       target dependent
        such as [gG] packet
        or ptrace buffer

The main objectives being:

        o       a clear separation between the low
                level target and the high level GDB

        o       a mechanism that solves the general
                problem of register aliases, overlaps
                etc instead of treating them as optional
                extras that can be wedged in as an after
                thought (that is a reasonable description
                of the current code).

                Identify then solve the hard case and the
                rest just falls out.  GDB solved the easy
                case and then tried to ignore the real
                world :-)

        o       a removal of the assumption that the
                mapping between the register cache
                and virtual registers is largely static.
                If you flip the USR/SSR stack register
                select bit in the status-register then
                the corresponding stack registers should
                reflect the change.

        o       a mechanism that clearly separates the
                gdb internal register cache from any
                target (not architecture) dependent
                specifics such as [gG] packets.

Of course, like anything, it sounds good in theory.  In reality, it
would have to contend with many<->many relationships at both the
virt<->cache and cache<->target level.  For instance:

        virt<->cache
                Modifying an mmx register may involve
                scattering values across both FP and
                mmpx specific parts of a buffer

        cache<->target
                When writing back a SP it may need to
                both be written to both SP and USP.


Hmm,

Rather than let this like the last time it was discussed, just slip, I'm
first going to add this e-mail (+ references) to TODO.  I'd then like to
sketch out a broad strategy I think could get us there.


First thing I'd suggest is separating out the ``extern registers[]''
code so that we can at least identify what is using it.  At present
things are scattered across many files.  That way we can at least
pretend that there is a cache instead of a global array :-)

I'd then suggest someone putting up a proposal for the pseudo-reg /
high-level side interface so that code can be adopted to it.  For old
code, initially a blanket rename of write_register_bytes() to
deprecated_write_register_bytes() would help.

Following that would, finaly be the corresponding changes to the target.

--

Check that GDB can handle all BFD architectures (Andrew Cagney)

There should be a test that checks that BFD/GDB are in sync with
regard to architecture changes.  Something like a test that first
queries GDB for all supported architectures and then feeds each back
to GDB..  Anyone interested in learning how to write tests?  :-)

--

		Architectural Change: Multi-arch et al.
		=======================================

The long term objective is to remove all assumptions that there is a
single target with a single address space with a single instruction
set architecture and single application binary interface.

This is an ongoing effort.  The first milestone is to enable
``multi-arch'' where by all architectural decisions are made at
runtime.

It should be noted that ``gdbarch'' is really ``gdbabi'' and
``gdbisa''.  Once things are multi-arched breaking that down correctly
will become much easier.

--

GDBARCH cleanup (Andrew Cagney)

The non-generated parts of gdbarch.{sh,h,c} should be separated out
into arch-utils.[hc].

Document that gdbarch_init_ftype could easily fail because it didn't
identify an architecture.

--

Fix BELIEVE_PPC_PROMOTION.  Change it to BELIEVE_PPC_PROMOTION_P?

At present there is still #ifdef BELIEVE_PPC_PROMOTION code in the
symtab file.

--

Fix target_signal_from_host() etc.

The name is wrong for starters.  ``target_signal'' should probably be
``gdb_signal''.  ``from_host'' should be ``from_target_signal''.
After that it needs to be multi-arched and made independent of any
host signal numbering.

Once this is done, the signal enum can probably be moved to
include/gdb so that it is available to embedded stubs.

--

Update ALPHA so that it uses ``struct frame_extra_info'' instead of
EXTRA_FRAME_INFO.

This is a barrier to replacing mips_extra_func_info with something
that works with multi-arch.

--

Multi-arch  mips_extra_func_info.

This first needs the alpha to be updated so that it uses ``struct
frame_extra_info''.

--

Rationalize TARGET_SINGLE_FORMAT and TARGET_SINGLE_BIT et al.

Surely one of them is redundant.

--

Convert ALL architectures to MULTI-ARCH.

--

Select the initial multi-arch ISA / ABI based on --target or similar.

At present the default is based on what ever is first in the BFD
archures table.  It should be determined based on the ``--target=...''
name.

--

Make MIPS pure multi-arch.

It is only at the multi-arch enabled stage.

--

Truly multi-arch.

Enable the code to recognize --enable-targets=.... like BINUTILS does.

Can the tm.h and nm.h files be eliminated by multi-arch.

--

	Architectural Change: MI, LIBGDB and scripting languages
	========================================================

See also architectural changes related to the event loop.  LIBGDB
can't be finished until there is a generic event loop being used by
all targets.

The long term objective is it to be possible to integrate GDB into
scripting languages.

--

Implement generic ``(gdb) commmand > file''

Once everything is going through ui_file it should be come fairly
easy.

http://sourceware.cygnus.com/ml/gdb/2000-04/msg00104.html

--

Replace gdb_stdtarg with gdb_targout (and possibly gdb_targerr).

gdb_stdtarg is easily confused with gdb_stdarg.

--

Extra ui_file methods - dump.

Very useful for whitebox testing.

--

Eliminate error_begin().

With ui_file, there is no need for the statefull error_begin ()
function.

--

Send normal output to gdb_stdout.
Send error messages to gdb_stderror.
Send debug and log output log gdb_stdlog.

GDB still contains many cases where (f)printf or printf_filtered () is
used when it should be sending the messages to gdb_stderror or
gdb_stdlog.  The thought of #defining printf to something has crossed
peoples minds ;-)

--

Re-do GDB's output pager.

GDB's output pager still relies on people correctly using *_filtered
for gdb_stdout and *_unfiltered for gdb_stdlog / gdb_stderr.
Hopefully, with all normal output going to gdb_stdout, the pager can
just look at the ui_file that the output is on and then use that to
decide what to do about paging.  Sounds good in theory.

--

Check/cleanup MI documentation.

The list of commands specified in the documentation needs to be
checked against the mi-cmds.c table in a mechanical way (so that they
two can be kept up-to-date).

--

Convert MI into libgdb

MI provides a text interface into what should be many of the libgdb
functions.  The implementation of those functions should be separated
into the MI interface and the functions proper.  Those functions being
moved to gdb/lib say.

--

Create libgdb.h

The first part can already be found in defs.h.

--

MI's input does not use buffering.

At present the MI interface reads raw characters of from an unbuffered
FD.  This is to avoid several nasty buffer/race conditions.  That code
should be changed so that it registers its self with the event loop
(on the input FD) and then push commands up to MI as they arrive.

The serial code already does this.

--

Make MI interface accessible from existing CLI.

--

Add a breakpoint-edit command to MI.

It would be similar to MI's breakpoint create but would apply to an
existing breakpoint.  It saves the need to delete/create breakpoints
when ever they are changed.

--

Add directory path to MI breakpoint.

That way the GUI's task of finding the file within which the
breakpoint was set is simplified.

--

Add a mechanism to reject certain expression classes to MI

There are situtations where you don't want GDB's expression
parser/evaluator to perform inferior function calls or variable
assignments.  A way of restricting the expression parser so that such
operations are not accepted would be very helpful.

--

Remove sideffects from libgdb breakpoint create function.

The user can use the CLI to create a breakpoint with partial
information - no file (gdb would use the file from the last
breakpoint).

The libgdb interface currently affects that environment which can lead
to confusion when a user is setting breakpoints via both the MI and
the CLI.

This is also a good example of how getting the CLI ``right'' will be
hard.

--

Move gdb_lasterr to ui_out?

The way GDB throws errors and records them needs a re-think.  ui_out
handles the correct output well.  It doesn't resolve what to do with
output / error-messages when things go wrong.

--

do_setshow_command contains a 1024 byte buffer.

The function assumes that there will never be any more than 1024 bytes
of enum.  It should use mem_file.

--

Should struct cmd_list_element . completer take the command as an
argument?

--

Should the bulk of top.c:line_completion_function() be moved to
command.[hc]?  complete_on_cmdlist() and complete_on_enums() could
then be made private.

--

top.c (execute_command): Should a command being valid when the target
is running be made an attribute (predicate) to the command rather than
an explicit set of tests.

--

top.c (execute_command): Should the bulk of this function be moved
into command.[hc] so that top.c doesn't grub around in the command
internals?

--

		Architectural Change: Async
		===========================

While GDB uses an event loop when prompting the user for input.  That
event loop is not exploited by targets when they allow the target
program to continue.  Typically targets still block in (target_wait())
until the program again halts.

The closest a target comes to supporting full asynchronous mode are
the remote targets ``async'' and ``extended-async''.

--

Asynchronous expression evaluator

Inferior function calls hang GDB.

--

Fix implementation of  ``target xxx''.

At present when the user specifies ``target xxxx'', the CLI maps that
directly onto a target open method.  It is then assumed that the
target open method should do all sorts of complicated things as this
is the only chance it has.  Check how the various remote targets
duplicate the target operations.  Check also how the various targets
behave differently for purely arbitrary reasons.

What should happen is that ``target xxxx'' should call a generic
``target'' function and that should then co-ordinate the opening of
``xxxx''.  This becomes especially important when you're trying to
open an asynchronous target that may need to perform background tasks
as part of the ``attach'' phase.

Unfortunately, due to limitations in the old/creaking command.h
interface, that isn't possible.  The function being called isn't told
of the ``xxx'' or any other context information.

Consequently a precursor to fixing ``target xxxx'' is to clean up the
CLI code so that it passes to the callback function (attatched to a
command) useful information such as the actual command and a context
for that command.  Other changes such as making ``struct command''
opaque may also help.

See also:
http://sourceware.cygnus.com/ml/gdb-patches/2000-06/msg00062.html

--

Make "target xxx" command interruptible.

As things become async this becomes possible.  A target would start
the connect and then return control to the event loop.  A cntrl-c
would notify the target that the operation is to be abandoned and the
target code could respond.

--

Add a "suspend" subcommand of the "continue" command to suspend gdb
while continuing  execution of the subprocess.  Useful when you are
debugging servers and you want to dodge out and initiate a connection
to a server running under gdb.

[hey async!!]

--

			TODO FAQ
			========

Frequently requested but not approved requests.

--

Eliminate unused argument warnings using ATTRIBUTE_UNUSED.

The benefits on this one are thought to be marginal - GDBs design
means that unused parameters are very common.  GCC 3.0 will also
include the option -Wno-unused-parameter which means that ``-Wall
-Wno-unused-parameters -Werror'' can be specified.

--



			Legacy Wish List
			================

This list is not up to date, and opinions vary about the importance or
even desirability of some of the items.  If you do fix something, it
always pays to check the below.

--

@@c This does not work (yet if ever).  FIXME.
@@c @@item --parse=@@var{lang} @@dots{}
@@c Configure the @@value{GDBN} expression parser to parse the listed languages.
@@c @@samp{all} configures @@value{GDBN} for all supported languages.  To get a
@@c list of all supported languages, omit the argument.  Without this
@@c option, @@value{GDBN} is configured to parse all supported languages.

--

START_INFERIOR_TRAPS_EXPECTED need never be defined to 2, since that
is its default value.  Clean this up.

--

It should be possible to use symbols from shared libraries before we know
exactly where the libraries will be loaded.  E.g. "b perror" before running
the program.  This could maybe be done as an extension of the "breakpoint
re-evaluation" after new symbols are loaded.

--

Make single_step() insert and remove breakpoints in one operation.

[If this is talking about having single_step() insert the breakpoints,
run the target then pull the breakpoints then it is wrong.  The
function has to return as control has to eventually be passed back to
the main event loop.]

--

Speed up single stepping by avoiding extraneous ptrace calls.

--

Speed up single stepping by not inserting and removing breakpoints
each time the inferior starts and stops.

Breakpoints should not be inserted and deleted all the time.  Only the
one(s) there should be removed when we have to step over one.  Support
breakpoints that don't have to be removed to step over them.

[this has resulted in numerous debates.  The issue isn't clear cut]

--

Provide "voodoo" debugging of core files.  This creates a zombie
process as a child of the debugger, and loads it up with the data,
stack, and regs of the core file.  This allows you to call functions
in the executable, to manipulate the data in the core file.

[you wish]

--

GDB reopens the source file on every line, as you "next" through it.

[still true? I've a memory of this being fixed]

--

Perhaps "i source" should take an argument like that of "list".

--

Remove "at 0xnnnn" from the "b foo" response, if `print address off' and if
it matches the source line indicated.

--

The prompt at end of screen should accept space as well as CR.

--

Backtrace should point out what the currently selected frame is, in
its display, perhaps showing "@@3 foo (bar, ...)" or ">3 foo (bar,
...)" rather than "#3 foo (bar, ...)".

--

"i program" should work for core files, and display more info, like what
actually caused it to die.

--

"x/10i" should shorten the long name, if any, on subsequent lines.

--

"next" over a function that longjumps, never stops until next time you happen
to get to that spot by accident.  E.g. "n" over execute_command which has
an error.

--

"set zeroprint off", don't bother printing members of structs which
are entirely zero.  Useful for those big structs with few useful
members.

--

GDB does four ioctl's for every command, probably switching terminal modes
to/from inferior or for readline or something.

--

terminal_ours versus terminal_inferior: cache state.  Switch should be a noop
if the state is the same, too.

--

"i frame" shows wrong "arglist at" location, doesn't show where the args
should be found, only their actual values.

--

There should be a way for "set" commands to validate the new setting
before it takes effect.

--

"ena d" is ambiguous, why?  "ena delete" seems to think it is a command!

--

i line VAR produces "Line number not known for symbol ``var''.".  I
thought we were stashing that info now!

--

We should be able to write to random files at hex offsets like adb.

--

[elena - delete this]

Handle add_file with separate text, data, and bss addresses.  Maybe
handle separate addresses for each segment in the object file?

--

[Jimb/Elena delete this one]

Handle free_named_symtab to cope with multiply-loaded object files
in a dynamic linking environment.  Should remember the last copy loaded,
but not get too snowed if it finds references to the older copy.

--

[elena delete this also]

Remove all references to:
	text_offset
	data_offset
	text_data_start
	text_end
	exec_data_offset
	...
now that we have BFD.  All remaining are in machine dependent files.

--

Re-organize help categories into things that tend to fit on a screen
and hang together.

--

Add in commands like ADB's for searching for patterns, etc.  We should
be able to examine and patch raw unsymboled binaries as well in gdb as
we can in adb.  (E.g. increase the timeout in /bin/login without source).

[actually, add ADB interface :-]

--

When doing "step" or "next", if a few lines of source are skipped between
the previous line and the current one, print those lines, not just the
last line of a multiline statement.

--

Handling of "&" address-of operator needs some serious overhaul
for ANSI C and consistency on arrays and functions.
  For "float point[15];":
ptype &point[4]   ==> Attempt to take address of non-lvalue.
  For "char *malloc();":
ptype malloc	  ==> "char *()";  should be same as
ptype &malloc     ==> "char *(*)()"
call printf ("%x\n", malloc)   ==> weird value, should be same as
call printf ("%x\n", &malloc)  ==> correct value

--

Fix dbxread.c symbol reading in the presence of interrupts.  It
currently leaves a cleanup to blow away the entire symbol table when a
QUIT occurs.  (What's wrong with that? -kingdon, 28 Oct 1993).

[I suspect that the grype was that, on a slow system, you might want
to cntrl-c and get just half the symbols and then load the rest later
- scary to be honest]

--

Mipsread.c reads include files depth-first, because the dependencies
in the psymtabs are way too inclusive (it seems to me).  Figure out what
really depends on what, to avoid recursing 20 or 30 times while reading
real symtabs.

--

value_add() should be subtracting the lower bound of arrays, if known,
and possibly checking against the upper bound for error reporting.

--

When listing source lines, check for a preceding \n, to verify that
the file hasn't changed out from under us.

[fixed by some other means I think.  That hack wouldn't actually work
reliably - the file might move such that another \n appears. ]

--

Get all the remote systems (where the protocol allows it) to be able to
stop the remote system when the GDB user types ^C (like remote.c
does).  For ebmon, use ^Ak.

--

Possible feature: A version of the "disassemble" command which shows
both source and assembly code ("set symbol-filename on" is a partial
solution).

[has this been done?  It was certainly done for MI and GDBtk]

--

investigate "x/s 0" (right now stops early) (I think maybe GDB is
using a 0 address for bad purposes internally).

--

Make "info path" and path_command work again (but independent of the
environment either of gdb or that we'll pass to the inferior).

--

Make GDB understand the GCC feature for putting octal constants in
enums.  Make it so overflow on an enum constant does not error_type
the whole type.  Allow arbitrarily large enums with type attributes.
Put all this stuff in the testsuite.

--

Make TYPE_CODE_ERROR with a non-zero TYPE_LENGTH more useful (print
the value in hex; process type attributes).  Add this to the
testsuite.  This way future compilers can add new types and old
versions of GDB can do something halfway reasonable.

--

Fix mdebugread.c:parse_type to do fundamental types right (see
rs6000_builtin_type in stabsread.c for what "right" is--the point is
that the debug format fixes the sizes of these things and it shouldn't
depend on stuff like TARGET_PTR_BIT and so on.  For mdebug, there seem
to be separate bt* codes for 64 bit and 32 bit things, and GDB should
be aware of that).  Also use a switch statement for clarity and speed.

--

Investigate adding symbols in target_load--some targets do, some
don't.

--

Put dirname in psymtabs and change lookup*symtab to use dirname (so
/foo/bar.c works whether compiled by cc /foo/bar.c, or cd /foo; cc
bar.c).

--

Merge xcoffread.c and coffread.c.  Use breakpoint_re_set instead of
fixup_breakpoints.

--

Make a watchpoint which contains a function call an error (it is
broken now, making it work is probably not worth the effort).

--

New test case based on weird.exp but in which type numbers are not
renumbered (thus multiply defining a type).  This currently causes an
infinite loop on "p v_comb".

--

[Hey! Hint Hint Delete Delete!!!]

Fix 386 floating point so that floating point registers are real
registers (but code can deal at run-time if they are missing, like
mips and 68k).  This would clean up "info float" and related stuff.

--

gcc -g -c enummask.c then gdb enummask.o, then "p v".  GDB complains
about not being able to access memory location 0.

-------------------- enummask.c
enum mask
{
  ANIMAL = 0,
  VEGETABLE = 1,
  MINERAL = 2,
  BASIC_CATEGORY = 3,

  WHITE = 0,
  BLUE = 4,
  GREEN = 8,
  BLACK = 0xc,
  COLOR = 0xc,

  ALIVE = 0x10,

  LARGE = 0x20
} v;

--

If try to modify value in file with "set write off" should give
appropriate error not "cannot access memory at address 0x65e0".

--

Allow core file without exec file on RS/6000.

--

Make sure "shell" with no arguments works right on DOS.

--

Make gdb.ini (as well as .gdbinit) be checked on all platforms, so
the same directory can be NFS-mounted on unix or DOS, and work the
same way.

--

[Is this another delete???]

Get SECT_OFF_TEXT stuff out of objfile_relocate (might be needed to
get RS/6000 to work right, might not be immediately relevant).

--

Work out some kind of way to allow running the inferior to be done as
a sub-execution of, eg. breakpoint command lists.  Currently running
the inferior interupts any command list execution.  This would require
some rewriting of wait_for_inferior & friends, and hence should
probably be done in concert with the above.

--

Add function arguments to gdb user defined functions.

--

Add convenience variables that refer to exec file, symbol file,
selected frame source file, selected frame function, selected frame
line number, etc.

--

Modify the handling of symbols grouped through BINCL/EINCL stabs to
allocate a partial symtab for each BINCL/EINCL grouping.  This will
seriously decrease the size of inter-psymtab dependencies and hence
lessen the amount that needs to be read in when a new source file is
accessed. 

--

Add a command for searching memory, a la adb.  It specifies size,
mask, value, start address.  ADB searches until it finds it or hits
an error (or is interrupted).

--

Remove the range and type checking code and documentation, if not
going to implement.
@


1.88
log
@* TODO: Delete all thread items.  The thread code was overhauled.
@
text
@a12 14
-- 2001-03-08

Update GDB's coding standard documentation.  Known topics:

       o     alloca/malloc et.al.

       o     typedef and structs

       o	ISO-C

and most likely also:

       o	 include conventions

@


1.87
log
@2001-06-28  Elena Zannoni  <ezannoni@@redhat.com>

        * TODO: Add import of readline 4.2 as a gdb 5.2 task.
@
text
@a184 5
Thread support.  Right now, as soon as a thread finishes and exits,
you're hosed.  This problem is reported once a week or so.

--

a854 52

--

			Thread Support
			==============

--

Generic: lin-thread cannot handle thread exit (Mark Kettenis, Michael
Snyder) http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00525.html

The thread_db assisted debugging code doesn't handle exiting threads
properly, at least in combination with glibc 2.1.3 (the framework is
there, just not the actual code).  There are at least two problems
that prevent this from working.

As an additional reference point, the pre thread_db code did not work
either.

--

GNU/Linux/x86 and random thread signals (and Solaris/SPARC but not
Solaris/x86).
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00336.html

Christopher Blizzard writes:

So, I've done some more digging into this and it looks like Jim
Kingdon has reported this problem in the past:

http://sourceware.cygnus.com/ml/bug-gdb/1999-10/msg00058.html

I can reproduce this problem both with and without Tom's patch.  Has
anyone seen this before?  Maybe have a solution for it hanging around?
:)

There's a test case for this documented at:

when debugging threaded applications you get extra SIGTRAPs
http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=9565

[There should be a GDB testcase - cagney]

--

GDB5 TOT on unixware 7
http://sourceware.cygnus.com/ml/gdb/2000-04/msg00119.html

Robert Lipe writes:
> I just spun the top of tree of the GDB5 branch on UnixWare 7.  As a
> practical matter, the current thread support is somewhat more annoying
> than when GDB was thread-unaware.
@


1.86
log
@* rdi-share/unixcomm.c (SERIAL_PREFIX): Always provide a default.
* rdi-share/hostchan.h (__unix): Hack, provide a default value.
* rdi-share/host.h (__unix): Hack, define when __NetBSD__.
* TODO: Update.
* MAINTAINERS: Update.  arm-elf builds.
@
text
@d203 4
@


1.85
log
@Build MI by default.
@
text
@a135 8
-- 2001-03-26

Resolve the build status of all broken targets as identified by the
MAINTAINERS file.

	o	arm-* vs NetBSD's lack of ``unix''
	o	arm-* vs IRIX (see below)

a332 12

--

Can't build IRIX -> arm GDB.
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00356.html

David Whedon writes:
> Now I'm building for an embedded arm target.  If there is a way of turning
> remote-rdi off, I couldn't find it. It looks like it gets built by default
> in gdb/configure.tgt(line 58) Anyway, the build dies in
> gdb/rdi-share/unixcomm.c.  SERPORT1 et. al. never get defined because we
> aren't one of the architectures supported.
@


1.84
log
@Exterminate ser-ocd.c.
@
text
@a91 19
Enable MI by default.  Old code can be deleted after 5.1 is out.

Issues:

	o	syntax change where a list would
		look like:
		     [ foo=a, foo=b, foo=c ]
		instead of
		     { foo=a, foo=b, foo=c }

	o	kill off the idea of a reverse
		query.

	o	review test cases

	o	enable it

--

@


1.83
log
@General updates for 5.1/5.2 lists.
@
text
@a28 4
Obsolete ser-ocd.c.

--

@


1.82
log
@Zap romp host.
@
text
@d29 4
d249 7
a255 3
Eliminate all warnings for at least one host/target for the flags:
-Wimplicit -Wreturn-type -Wcomment -Wtrigraphs -Wformat -Wparentheses
-Wpointer-arith -Wuninitialized
d309 19
d640 5
d1087 8
d1373 3
@


1.81
log
@All 5.1 obsolete targets are done.
@
text
@a164 4
Zap still more of that nonexistant romp target.

--

@


1.80
log
@Obsolete MPW as host.
@
text
@a162 60
-- 2001-03-15

			Obsolete some targets.

Possible selection criteria are:

	o	uses a deprecated feature

	o	doesn't build

	o	doesn't have a maintainer

Steps:		   
	  
	o	Identify TUPPLE : CPU / HOST / TARGET
		combinations.

		  TUPPLE	        CPU	 HOST	  TARGET     ZAPPED
		  ------		---	 ----	  ------     ------
		  ns32k-*-mach3*        ns32k	 ns32km3  ns32km3    yes
		  ns32k-umax-*		ns32k	 umax	  -	     yes
		  ns32k-utek-sysv*	ns32k	 merlin	  merlin     yes
		  ns32k-utek-*		ns32k	 -	  umax	     yes
		  tic80-*		tic80	 -	  tic80	     yes
		  m68*-isi-*		m68k	 isi	  isi        yes
		  m68*-sony-*		m68k	 news	  news	     yes
		  m68030-sony-*		m68k	 news1000 -	     yes
		  m68*-rom68k-*		m68k	 -	  (monitor)  yes
		  m68*-*bug-*		m68k	 -	  (monitor)  yes
		  m68*-monitor-*	m68k	 -	  (monitor)  yes
		  m68*-est-*		m68k	 -	  (monitor)  yes
		  a29k-*-*		a29k	 ultra3	  -          yes
		  a29k-*-sym1*		a29k	 -	  ultra3     yes
		  a29k-*-kern*		a29k	 -	  a29k-kern  yes
		  powerpcle-*-solaris*	powerpc	 solaris  solaris    yes
		  powerpcle-*-cygwin*	powerpc	 cygwin	  cygwin     yes
		  powerpc-*-netware*	powerpc  -	  ppc-nw     yes
		  w65-*-*		w65	 -	  w65        yes
		  i[3456]86-*-sunos*	i386	 sun386	  sun386     yes
		  mpw			m68k	 mpw	  mpw	     yes
		  mpw			powerpc	 mpw	  mpw	     yes

		(DONE)

	o	post proposals to gdb@@
		(DONE)

	o	post revised proposals to gdb-announce@@
		crossed with gdb@@ reply-to to gdb@@
		(DONE)

	o	clobber the tupple and files:
			configure.host
			configure.tgt
			config/CPU/*HOST*
			config/CPU/*TARGET*
			*-tdep.c *-nat.c *-xdep.c

	o	update NEWS

@


1.79
log
@Obsolete NEWS and ISI systems (along with a few redundant m68k targets).
@
text
@a162 2
	o	delete mpw?

d202 2
@


1.78
log
@Obsolete sun386i.
@
text
@d189 7
a195 7
		  m68*-isi-*		m68k	 isi	  isi
		  m68*-sony-*		m68k	 news	  news
		  m68030-sony-*		m68k	 news1000 -
		  m68*-rom68k-*		m68k	 -	  (monitor)
		  m68*-*bug-*		m68k	 -	  (monitor)
		  m68*-monitor-*	m68k	 -	  (monitor)
		  m68*-est-*		m68k	 -	  (monitor)
@


1.77
log
@Obsolete powerpcle-*-cygwin* and powerpcle-*-solaris* platforms
and powerpc-*-netware* target.
@
text
@d203 1
a203 1
		  i[3456]86-*-sunos*	i386	 sun386	  sun386
@


1.76
log
@Obsolete a29k-*-* host and a29k-*-sym1* and a29k-*-kern* targets.
@
text
@d199 4
a202 4
		  powerpcle-*-solaris*	powerpc	 solaris  solaris
		  powerpcle-*-cygwin*	powerpc	 cygwin	  cygwin
		  powerpc-*-netware*	powerpc  -	  ppc-nw
		  w65-*-*		w65	 -	  w65       yes
d222 4
@


1.75
log
@Obsolete w65-*-* target.
@
text
@d196 3
a198 2
		  a29k-*-*		a29k	 ultra3	  -
		  a29k-*-sym1*		a29k	 -	  ultra3
d387 6
@


1.74
log
@Obsolete tic80.
@
text
@d201 1
a201 1
		  w65-*-*		w65	 -	  w65
@


1.73
log
@Obsolete ns32k-*-mach3*, ns32k-umax-*, ns32k-utek-sysv* and
ns32k-utek-*.
@
text
@d188 1
a188 1
		  tic80-*		tic80	 -	  tic80
@


1.72
log
@(Cleanups): Remove the item about converting docs to GFDL.
@
text
@d179 24
a202 1
	o	post proposals to gdb@@ (DONE)
a203 2
	o	post announcement to gdb-announce@@
		crossed with gdb@@ reply-to to gdb@@
d206 2
a207 16
	                ns32k-*-mach3*
        	        ns32k-umax-*
                	ns32k-utek-sysv*
		        tic80-*
			m68*-isi-*
			m68*-sony-*
			m68*-rom68k-*
			m68*-*bug-*
			m68*-monitor-*
			m68*-est-*
			a29k-ultra3
			powerpcle-*-solaris*
			powerpcle-*-cygwin*
			powerpc-*-netware*
		        w65-*-*
			i[3456]86-*-sunos*
d209 3
a211 1
	o	clobber the files:
d213 5
a217 2
			configure.{in,host,tgt}
			Makefile.in
a218 1
			configure/*/*
@


1.71
log
@Mark m88k as known to be broken.
@
text
@a212 13
Change documentation to GFDL license.

``It is time to make an effort to start using the GFDL more
thoroughly.  Would all GNU maintainers please change the license to
the GFDL, for all manuals and other major documentation files?

The GFDL and some instructions for using it can be found in
http://www.gnu.org/copyleft/''

	RMS

--

@


1.70
log
@Re-vamp the register code so that a lot more is routed through
{read,write}_register_gen.  Hook that function with multi-arch.
@
text
@d155 1
a155 1
-- 2001-03-22
a162 2
	o	delete m88k?

d243 6
@


1.69
log
@Update list of obsolete targets.
@
text
@d308 52
@


1.68
log
@Cleanup remote protocol section.  Add notes on ``!'', ``q'' and the
non-use of the continue address.
@
text
@d155 1
a155 1
-- 2001-03-14
d165 2
d193 4
d200 1
@


1.67
log
@* TODO: List known problems with TUI.
@
text
@d328 1
a328 10
Revised UDP support (was: Re: [Fwd: [patch] UDP transport support])
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00000.html

(Broken) support for GDB's remote protocol across UDP is to be
included in the follow-on release.

It should be noted that UDP can only work when the [Gg] packet fits in
a single UDP packet.

There is also much debate over the merit of this.
a913 13
Migrate qfThreadInfo packet -> qThreadInfo. (Andrew Cagney)

Add support for packet enable/disable commands with these thread
packets.  General cleanup.

[PATCH] Document the ThreadInfo remote protocol queries
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00832.html

[PATCH] "info threads" queries for remote.c
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00831.html

--

d953 26
d1005 26
a1045 4

--

Rename read_register{,_pid}() to read_unsigned_register{,_pid}().
@


1.66
log
@Add list of targets being obsoleted.
@
text
@d725 100
a824 1
Get the TUI working on all platforms.
@


1.65
log
@Update target list.
@
text
@d157 2
a158 2
Resolve the status of all broken targets as identified by the MAINTAINERS
file.
d163 13
a175 1
	o	delete TiC80
d177 28
a204 1
	o	delete m88k?
@


1.64
log
@* TODO: Revise 5.1 list.  Delete PARAMS task.  Add coding standard
review.  Clarify GNU/LINUX/sparc.  Move other tasks to 5.2 or
general.
@
text
@d155 1
a155 1
-- 2001-03-08
d159 7
@


1.63
log
@Doco SID + GDB + Solaris 8 broken.
@
text
@d13 14
d29 15
a43 2
RFD: infrun.c: No bpstat_stop_status call after proceed over break?
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00665.html
d45 1
a45 2
GDB misses watchpoint triggers after proceeding over a breakpoint on
x86 targets.
d58 1
a58 11
--

Can't build IRIX -> arm GDB.
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00356.html

David Whedon writes:
> Now I'm building for an embedded arm target.  If there is a way of turning
> remote-rdi off, I couldn't find it. It looks like it gets built by default
> in gdb/configure.tgt(line 58) Anyway, the build dies in
> gdb/rdi-share/unixcomm.c.  SERPORT1 et. al. never get defined because we
> aren't one of the architectures supported.
d62 2
a63 2
Problem with weak functions
http://sourceware.cygnus.com/ml/gdb/2000-05/msg00060.html
d65 2
a66 6
Dan Nicolaescu writes:
> It seems that gdb-4.95.1  does not display correctly the function when
> stoping in weak functions. 
> 
> It stops in a function that is defined as weak, not in the function
> that is actually run... 
d72 1
a72 14
--

Thread support.  Right now, as soon as a thread finishes and exits,
you're hosed.  This problem is reported once a week or so.

--

Wow, three bug reports for the same problem in one day!  We should
probably make fixing this a real priority :-).

Anyway, thanks for reporting.

The following patch will fix the problems with setting breakpoints in
dynamically loaded objects:
d74 1
a74 1
   http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00230.html
d76 2
a77 2
This patch isn't checked in yet (ping Michael/JimB), but I hope this
will be in the next GDB release.
d79 1
a79 2
There should really be a test in the testsuite for this problem, since
it keeps coming up :-(.  Any volunteers?
d81 1
a81 1
Mark
d94 15
d122 2
d141 1
a141 1
--
d143 1
a143 1
[Comming...]
d145 2
a146 14
Modify gdb to work correctly with Pascal.

--

Revised UDP support (was: Re: [Fwd: [patch] UDP transport support])
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00000.html

(Broken) support for GDB's remote protocol across UDP is to be
included in the follow-on release.

It should be noted that UDP can only work when the [Gg] packet fits in
a single UDP packet.

There is also much debate over the merit of this.
d155 5
a174 6
Delete macro TARGET_BYTE_ORDER_SELECTABLE.

Patches in the database.

--

d183 2
a184 36
Purge PARAMS.

Eliminate all uses of PARAMS in GDB's source code.

--

printcmd.c (print_address_numeric):

NOTE: This assumes that the significant address information is kept in
the least significant bits of ADDR - the upper bits were either zero
or sign extended.  Should ADDRESS_TO_POINTER() or some
ADDRESS_TO_PRINTABLE() be used to do the conversion?

--

Compiler warnings.

Eliminate all warnings for at least one host/target for the flags:
-Wimplicit -Wreturn-type -Wcomment -Wtrigraphs -Wformat -Wparentheses
-Wpointer-arith -Wuninitialized

--

Follow through `make check' with --enable-shared.

When the srcware tree is configured with --enable-shared, the `expect'
program won't run properly.  Jim Wilson found out gdb has a local hack
to set LD_LIBRARY_PATH, but, AFAIK, no other project has been hacked
similarly.

http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00845.html

--

		GDB 5.1 Known Problems
		======================
d216 2
a217 1
Fix at least one thread bug.
d247 5
a251 1
Eliminate one more compiler warnings.
d269 5
d279 63
@


1.62
log
@* TODO (GDB 5.1 Known Problems): Document z8k as broken.
@
text
@a86 28
Re: GDB 5.0.1?
http://sources.redhat.com/ml/gdb/2000-07/msg00038.html

Is the Solaris 8 x86 problem fixed?  When you configure it, configure
incorrectly determines that I have no curses.h.  This causes mucho
compilation errors later on.

Simply editing the config.h to define CURSES_H fixes the problem, and
then the build works fine.

The status for this problem:

Solaris 8 x86 (PIII-560)
gcc 2.95.2

I had the same problem with several of the snapshots shortly before
5.0 became official, and 5.0 has the same problem.

I sent some mail in about it long ago, and never saw a reply.

I haven't had time to figure it out myself, especially since I get all
confused trying to figure out what configure does, I was happy to find
the workaround.

Mike

--

d224 16
@


1.61
log
@Mention how to cite GDB problem reports.
@
text
@d243 12
@


1.60
log
@TODO Tweeks.
@
text
@d522 5
@


1.59
log
@Move hardware stuff to not 5.1 - changelog already committed.
@
text
@d257 5
a261 1
Objective C/C++ Support.  Bu hopefully sooner...
d273 2
a274 1
"ifdef"s.
d278 1
a278 1
Eliminate more compiler warnings.
d530 1
a530 1
Hardware watchpint problems on x86 OSes, including Linux:
@


1.58
log
@Add __FILE__ and __LINE__ parameter to internal_error() /
internal_verror().
@
text
@a14 20
Hardware watchpint problems on x86 OSes, including Linux:

1. Delete/disable hardware watchpoints should free hardware debug
registers. 
2. Watch for different values on a viariable with one hardware debug
register.

According to Eli Zaretskii <eliz@@delorie.com>:

These are not GDB/ia32 issues per se: the above features are all
implemented in the DJGPP port of GDB and work in v5.0.  Every
x86-based target should be able to lift the relevant parts of
go32-nat.c and use them almost verbatim.  You get debug register
sharing through reference counts, and the ability to watch large
regions (up to 16 bytes) using multiple registers.  (The required
infrastructure in high-level GDB application code, mostly in
breakpoint.c, is also working since v5.0.)

--

d522 20
@


1.57
log
@Replace strsave() with xstrdup().
@
text
@a435 4
Add __LINE__ and __FILE__ to internal_error().

--

@


1.56
log
@2000-12-21  Fernando Nasser  <fnasser@@redhat.com>

        * TODO: Add pre-uiout code removal to 5.2 cleanups.
@
text
@a386 4
Replace strsave() + mstrsave() with libiberty:xstrdup().

--

d418 1
a418 1
Eliminate mmalloc() from GDB.
@


1.55
log
@* TODO: Add GFDL updates to 5.1 release criteria.
@
text
@d288 5
@


1.54
log
@Replace asprintf() / vasprintf() with xasprintf() xvasprintf().
@
text
@d202 13
@


1.53
log
@Add ``extern'' and STREQ to cleanups.
@
text
@a368 7
Replace asprintf() calls with xasprintf() calls.

As with things like strdup() most calls to asprintf() don't check the
return value.

--

@


1.52
log
@* TODO: Note abstraction layer violation where "ocd reset" command
must invalidate the dcache, and how this might be fixed.

* monitor.c (#include "dcache.h"): Removed.
(remote_dcache): Removed.
(monitor_open): Removed code that created local dcache.
(flush_monitor_dcache): Removed (unused function).
(monitor_resume): Removed call to dcache_invd().
(monitor_load): Likewise.
(monitor_xfer_memory): Changed to call monitor_write_memory(),
monitor_write_memory_block(), and monitor_read_memory() instead
of dcache_xfer_memory().
* monitor.h (flush_monitor_dcache): Removed (unused function).
* ocd.c (#include "dcache.h"): Removed.
(ocd_dcache): Removed.
(ocd_open): Removed code that created local dcache.
(ocd_resume): Removed call to dcache_invd().
(ocd_xfer_memory): Changed to call ocd_write_bytes() and
ocd_read_bytes() instead of dcache_xfer_memory().
(bdm_reset_command): Invalidate target dcache.
* remote-bug.c (bug_load): Remove call to dcache_invd().
(bug_resume): Likewise.
(bug_settings): Remove dcache, readfunc, and writefunc fields
from initializer.
(bug_xfer_memory): Changed to call bug_read_memory() and
bug_write_memory() instead of dcache_xfer_memory().
* remote-nindy.c (#include "dcache.h"): Removed.
(nindy_dcache): Removed.
(nindy_open): Removed code that created local dcache.
(nindy_resume): Removed call to dcache_invd().
(nindy_load): Likewise.
(nindy_xfer_inferior_memory): Changed to call ninMemPut() and
ninMemGet() instead of dcache_xfer_memory().
* remote-sds.c (#include "dcache.h"): Removed.
(sds_dcache): Removed.
(sds_open): Removed code that created local dcache.
(sds_resume): Removed call to dcache_invd().
(sds_xfer_memory): Changed to call sds_write_bytes() and
sds_read_bytes() instead of dcache_xfer_memory().
* remote-utils.c (gr_open): Removed code that created local dcache.
* remote-utils.h (#include "dcache.h"): Removed.
(struct gr_settings): Removed dcache, readfunc, and writefunc fields.
(gr_get_dcache, gr_set_dcache): Removed macro definitions.
* remote.c (#include "dcache.h"): Removed.
(remote_dcache): Removed.
(remote_open_1): Removed code that created local dcache.
(remote_async_open_1): Likewise.
(remote_resume): Removed call to dcache_invd().
(remote_async_resume): Likewise.
(remote_xfer_memory): Changed to call remote_write_bytes() and
remote_read_bytes() instead of dcache_xfer_memory().
* wince.c (#include "dcache.h"): Removed.
(remote_dcache): Removed.
(child_create_inferior): Removed code that created local dcache.
(child_xfer_memory): Changed to call remote_write_bytes() and
remote_read_bytes() instead of dcache_xfer_memory().
(child_resume): Removed call to dcache_invd().

* target.c (target_dcache): Added.
(target_load): Invalidate target_dcache.
(do_xfer_memory): New function.
(target_xfer_memory): Reimplement in terms of dcache_xfer_memory().
(target_xfer_memory_partial): Likewise.
(initialize_targets): Create target_dcache.
* target.h (#include "dcache.h"): Added.
(target_open): Invalidate target_dcache.
(target_resume): Likewise.
(do_xfer_memory): New declaration.

* dcache.c (dcache_init): Removed reading and writing arguments.
(dcache_struct): Removed read_memory and write_memory fields.
(dcache_write_line): Call do_xfer_memory.
(dcache_read_line): Likewise.
(dcache_xfer_memory): Likewise.
(dcache_invalidate): Renamed from dcache_invd.
(dcache_init): Updated.
(dcache_xfer_memory): Updated.
* dcache.h (memxferfunc): Removed definition.
@
text
@d522 12
@


1.51
log
@
Corrected spelling errors in comments
@
text
@d652 8
@


1.50
log
@2000-09-06  H.J. Lu  <hjl@@gnu.org>

	* TODO: Add hardware watchpint problems on x86 OSes for 5.1.
@
text
@d74 1
a74 1
> that is actualy run... 
d317 1
a317 1
Rely on BFD_BIG_ENDIAN and BFD_LITTLE_ENDIAN instead of host dependant
d511 1
a511 1
A brief summary of what happended is that sim/common/sim-break.c was
d607 1
a607 1
Overlaps with ``handle SIGNAL'' but the implied behavour is different.
d809 1
a809 1
be updated a little so that several independant symbol tables are
d905 1
a905 1
Unfortunatly GDB still treats this synthetic FP register as though it
d959 1
a959 1
        dependant i-face
d962 1
a962 1
       target dependant
d993 1
a993 1
                target (not architecture) dependant
d1078 1
a1078 1
After that it needs to be multi-arched and made independant of any
d1225 1
a1225 1
Make MI interface accessable from existing CLI.
d1340 1
a1340 1
Unfortunatly, due to limitations in the old/creaking command.h
@


1.49
log
@remove build_parse entry about buffer overrun.
@
text
@d15 20
@


1.48
log
@Re-implement ``set/show remote Z-packet ...'' commands so that each Z
packet sub-type can be explicitly controled.
@
text
@a61 4
parse.c:build_parse() has a buffer overrun.

--

@


1.47
log
@Minor tweeks.
@
text
@d501 5
d759 1
a759 1
errors in so far as it will continue to edownload with chunk N+1 even
a780 5

--

Use the recently added add_set_auto_boolean_cmd() function to
implement the X-packet commands.
@


1.46
log
@List things for 5.1.
@
text
@d329 4
@


1.45
log
@Thu Jul 27 17:38:35 2000  Andrew Cagney  <cagney@@b1.cygnus.com>

        * configure.in (targetfile): Ignore TM_FILE, don't just issue
        warning.
        (tm_h, xm_h, nm_h, GDB_TM_FILE, GDB_XM_FILE, GDB_NM_FILE): Define.
        * acconfig.h (GDB_XM_FILE, GDB_TM_FILE, GDB_NM_FILE): Add.
        * config/nm-empty.h: Delete.
        * defs.h (xm.h, nm.h, tm.h): Only include when GDB_XM_FILE,
        GDB_NM_FILE or GDB_TM_FILE defined.
        * Makefile.in (defs_h): Replace tm.h, xm.h and nm.h with tm_h,
        xm_h and nm_h macro that are defined by configure.
        (tm_h, xm_h, tm_h): New.
        * configure, config.in: Regenerate
        * TODO: Update.
@
text
@d7 2
a8 2
		Known problems in GDB 5.0
		=========================
d11 1
a11 13
cycle.  People hope to have these problems fixed in a follow-on
release.

--

The BFD directory requires bug-fixed AUTOMAKE et.al.

AUTOMAKE 1.4 incorrectly set the TEXINPUTS environment variable.  It
contained the full path to texinfo.tex when it should have only
contained the directory.  The bug has been fixed in the current
AUTOMAKE sources.  Automake snapshots can be found in:
	ftp://sourceware.cygnus.com/pub/gdb/snapshots
and	ftp://sourceware.cygnus.com/pub/binutils
a33 11
Revised UDP support (was: Re: [Fwd: [patch] UDP transport support])
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00000.html

(Broken) support for GDB's remote protocol across UDP is to be
included in the follow-on release.

It should be noted that UDP can only work when the [Gg] packet fits in
a single UDP packet.

--

d62 3
a64 2
		Code Cleanups: Next Release
		===========================
d66 2
a67 2
The following are small cleanups that will hopefully be completed by
the follow on to 5.0.
d71 110
a180 1
Delete macro TARGET_BYTE_ORDER_SELECTABLE.
d182 1
a182 1
Patches in the database.
d186 1
a186 1
Purge PARAMS.
d188 1
a188 1
Eliminate all uses of PARAMS in GDB's source code.
d200 1
a200 2
Find something better than DEFAULT_BFD_ARCH, DEFAULT_BFD_VEC to
determine the default isa/byte-order.
d202 1
a202 4
--

Rely on BFD_BIG_ENDIAN and BFD_LITTLE_ENDIAN instead of host dependant
BIG_ENDIAN and LITTLE_ENDIAN.
d215 62
d285 21
a326 1

d409 4
a452 11
Follow through `make check' with --enable-shared.

When the srcware tree is configured with --enable-shared, the `expect'
program won't run properly.  Jim Wilson found out gdb has a local hack
to set LD_LIBRARY_PATH, but, AFAIK, no other project has been hacked
similarly.

http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00845.html

--

a496 4
parse.c:build_parse() has a buffer overrun.

--

a529 9
Convert GDB build process to AUTOMAKE.

See also sub-directory configure below.

The current convention is (kind of) to use $(<header>_h) in all
dependency lists.  It isn't done in a consistent way.

--

a539 5
Restructure gdb directory tree so that it avoids any 8.3 and 14
filename problems.

--

a563 2


a695 36

--

Pascal (Pierre Muller, David Taylor)

Pierre Muller has contributed patches for adding Pascal Language
support to GDB.

2 pascal language patches inserted in database
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00521.html

Indent -gnu ?
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00496.html

--

Java (Anthony Green, David Taylor)

Anthony Green has a number of Java patches that did not make it into
the 5.0 release.  The first two are in cvs now, but the third needs
some fixing up before it can go in.

Patch: java tests
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00512.html

Patch: java booleans
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00515.html

Patch: handle N_MAIN stab
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00527.html

--

[Comming...]

Modify gdb to work correctly with Pascal.
@


1.44
log
@Use add_set_auto_boolean_cmd() to implement ``set remote ?-packet''
command.
@
text
@a353 6
Some of these (*m.h) would be added to the generated config.h.  That
in turn would fix a long standing bug where by the build process many
not notice a changed tm.h file.  Since everything depends on config.h,
a change to *m.h forces a change to config.h and, consequently forces
a rebuild.

@


1.43
log
@Updates.
@
text
@a634 7
set/show remote X-packet ...

``(gdb) help set remote X-packet'' doesn't list the applicable
responses.  The help message needs to be expanded.

--

@


1.42
log
@Updated TODO.
@
text
@d52 3
d375 7
d683 9
@


1.41
log
@* printcmd.c (print_scalar_formatted): Move masking of 'a' address
from here.
(print_address_numeric): To here.
* TODO: Update.
@
text
@d573 2
a574 1
the 5.0 release.
@


1.40
log
@2000-07-06  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * TODO: Remove readline 4.1 import item.
@
text
@d120 9
@


1.39
log
@Update TODO.
@
text
@a239 8
Updated readline

Readline 4.? is out.  A merge wouldn't hurt.  Patches are in:

http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00436.html

--

@


1.38
log
@* TODO: Update.
@
text
@d323 16
d708 6
@


1.37
log
@Add support for auto_boolean (true, false or auto).
@
text
@d38 3
a40 5
I know there are problems with single stepping through signal
handlers.  These problems were present in 4.18.  They were just masked
because 4.18 failed to recognize signal handlers.  Fixing it is not
easy, and will require changes to handle_inferior_event(), that I
prefer not to make before the 5.0 release.
@


1.36
log
@Update TODO - SER_HARDWIRE problem was fixed.
@
text
@d1126 30
@


1.35
log
@MIPS is always multi-arch enabled.
@
text
@a281 12
Always build ser-tcp.c.

The patch as submitted was just going to add ser-tcp.c to the Alpha's
makefile.  A better patch is to instead add ser-tcp.c to SER_HARDWARE
and make it a standard part of all debuggers.

If problems occure then configure.in can sort them out.

http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00544.html

--

@


1.34
log
@Use config.bfd to determine the default architecture and byte order.
Flush all BYTE_ORDER_DEFAULT macros from mips. Can rely on BFD's value.
@
text
@d333 4
d975 6
@


1.33
log
@Change signature of function add_set_enum_cmd() so that it uses
constant character pointers.  Update everything.
As a consequence fix infrun's follow-fork plugging a small memory leak.
@
text
@d112 10
@


1.32
log
@Purge last remaining make_cleanup_func.
@
text
@a294 6
Change the parameter ``char *list[]'' (etc) to ``const char (*)[]'' so
that dynamic lists from things like gdbarch_printable_names() can be
passed.

--

d306 16
d1161 3
@


1.31
log
@The attatched moves the remaining guff from gdbarch.{h,c,sh} to
arch-utils.{h,c}.  The ``set architecutre'' and ``set endian''
commands (part of the move) were implemented to use add_set_enum_cmd()
so that ``set architecture <tab>'' works.
@
text
@a103 8
Elimination of make_cleanup_func. (Andrew Cagney)

make_cleanup_func elimination
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00791.html
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00814.html

--

d138 3
@


1.30
log
@More updates.
@
text
@d300 17
d354 3
d448 10
a913 8

--

Fix ``set architecture <tab>''

This command should expand to a list of all supported architectures.
At present ``info architecture'' needs to be used.  That is simply
wrong.  It involves the use of add_set_enum_cmd().
@


1.29
log
@Add host_pointer_to_address() and address_to_host_pointer().  Add
signed_pointer_to_address() etc.  Rename generic_pointer_to_address()
to unsigned_pointer_to_address() etc.
@
text
@a13 2
(The names in paren indicate people that posted the original problem.)

a26 14
Possible regressions with some devel GCCs.
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00475.html

gcc-2.95.2 outputs a line note *before* the prologue (and one for the
closing brace after the epilogue, instead of before it, as it used to
be). By disabling the RTL-style prologue generating mechanism
(undocumented GCC option -mno-schedule-prologue), you get back the
traditional behaviour.
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00510.html

This should now be fixed.

--

a27 1
(Peter Schauer)
d80 4
d98 1
a98 1
Purge PARAMS
a127 8
ATTRIBUTE_UNUSED

The need for this as almost been eliminated.  The next version of GCC
(assuming cagney gets the relevant patch committed) will be able to
supress unused parameter warnings.

--

d542 16
a557 13
value_headof/value_from_vtable_info are worthless, and should be removed.
The one place in printcmd.c that uses it should use the RTTI functions.

RTTI for g++ should be using the typeinfo functions rather than the vtables.
The typeinfo functions are always at offset 4 from the beginning of the vtable,
and are always right. The vtables will have weird names like E::VB sometimes.
The typeinfo function will always be "E type_info function", or somesuch.

value_virtual_fn_field needs to be fixed so there are no failures for virtual
functions for C++ using g++.

Testsuite cases are the major priority right now for C++ support, since i have
to make a lot of changes that could potentially break each other.
d611 12
d660 33
d974 1
a974 2
These are for debugging / testing.  An aside is to set up a whitebox
testsuite for key internals such as ui_file.
d1155 18
d1204 5
@


1.28
log
@Eliminate safe_strsignal().
@
text
@a17 9
GDB requires GCC to build under IRIX

IRIX, being more pedantic than GCC reports as errors certain
assignments that GCC treats as warnings.

This can be worked around by building GDB with the GCC compiler.

--

@


1.27
log
@More updates.
@
text
@d877 9
@


1.26
log
@Further re-arange into distinct sections.
@
text
@d134 8
d269 19
a287 1
Readline 4.? is out.  A merge wouldn't hurt.
d291 40
d397 22
@


1.25
log
@Have TUI use the same configury mechanism as MI.
@
text
@d7 2
a8 2
			Known problems in GDB 5.0
			=========================
a37 66
Generic: lin-thread cannot handle thread exit (Mark Kettenis, Michael
Snyder) http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00525.html

The thread_db assisted debugging code doesn't handle exiting threads
properly, at least in combination with glibc 2.1.3 (the framework is
there, just not the actual code).  There are at least two problems
that prevent this from working.

As an additional reference point, the pre thread_db code did not work
either.

--

Java (Anthony Green, David Taylor)

Anthony Green has a number of Java patches that did not make it into
the 5.0 release.

Patch: java tests
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00512.html

Patch: java booleans
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00515.html

Patch: handle N_MAIN stab
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00527.html

--

Pascal (Pierre Muller, David Taylor)

Pierre Muller has contributed patches for adding Pascal Language
support to GDB.

2 pascal language patches inserted in database
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00521.html

Indent -gnu ?
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00496.html

--

GNU/Linux/x86 and random thread signals (and Solaris/SPARC but not
Solaris/x86).
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00336.html

Christopher Blizzard writes:

So, I've done some more digging into this and it looks like Jim
Kingdon has reported this problem in the past:

http://sourceware.cygnus.com/ml/bug-gdb/1999-10/msg00058.html

I can reproduce this problem both with and without Tom's patch.  Has
anyone seen this before?  Maybe have a solution for it hanging around?
:)

There's a test case for this documented at:

when debugging threaded applications you get extra SIGTRAPs
http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=9565

[There should be a GDB testcase - cagney]

--

d106 21
a126 2
GDB5 TOT on unixware 7
http://sourceware.cygnus.com/ml/gdb/2000-04/msg00119.html
d128 3
a130 4
Robert Lipe writes:
> I just spun the top of tree of the GDB5 branch on UnixWare 7.  As a
> practical matter, the current thread support is somewhat more annoying
> than when GDB was thread-unaware.
d134 2
a135 2
			Code Cleanups
			=============
d137 2
a138 2
The following are small cleanups that will hopefully be completed by
the follow on to 5.0.
d165 88
a252 1
Delete macro TARGET_BYTE_ORDER_SELECTABLE.
d254 2
a255 1
Patches in the database.
d265 27
a291 1
Purge PARAMS
d293 1
a293 1
Eliminate all uses of PARAMS in GDB's source code.
d297 1
a297 1
Elimination of make_cleanup_func. (Andrew Cagney)
d299 1
a299 3
make_cleanup_func elimination
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00791.html
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00814.html
d303 5
a307 1
Elimination of ``(catch_errors_ftype *) func''.
d309 1
a309 1
Like make_cleanup_func it isn't portable.
d313 4
a316 1
Re: Various C++ things
d318 1
a318 2
value_headof/value_from_vtable_info are worthless, and should be removed.
The one place in printcmd.c that uses it should use the RTTI functions.
d320 3
a322 4
RTTI for g++ should be using the typeinfo functions rather than the vtables.
The typeinfo functions are always at offset 4 from the beginning of the vtable,
and are always right. The vtables will have weird names like E::VB sometimes.
The typeinfo function will always be "E type_info function", or somesuch.
d324 1
a324 2
value_virtual_fn_field needs to be fixed so there are no failures for virtual
functions for C++ using g++.
d326 1
a326 2
Testsuite cases are the major priority right now for C++ support, since i have
to make a lot of changes that could potentially break each other.
d330 3
a332 1
Fix ``set architecture <tab>''
d334 1
a334 3
This command should expand to a list of all supported architectures.
At present ``info architecture'' needs to be used.  That is simply
wrong.  It involves the use of add_set_enum_cmd().
d338 5
a342 1
GDBARCH cleanup (Andrew Cagney)
d344 1
a344 2
The non-generated parts of gdbarch.{sh,h,c} should be separated out
into arch-utils.[hc].
d346 1
a346 2
Document that gdbarch_init_ftype could easily fail because it didn't
identify an architecture.
d350 2
a351 1
Migrate qfThreadInfo packet -> qThreadInfo. (Andrew Cagney)
d353 1
a353 2
Add support for packet enable/disable commands with these thread
packets.  General cleanup.
d355 1
a355 2
[PATCH] Document the ThreadInfo remote protocol queries
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00832.html
d357 1
a357 2
[PATCH] "info threads" queries for remote.c
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00831.html
d361 4
a364 2
			General Cleanups / Fixes
			========================
d366 6
a371 2
The following are more general cleanups and fixes.  They are not tied
to any specific release.
d375 2
a376 1
Nuke USG define.
d380 7
a386 2
[PATCH/5] src/intl/Makefile.in:distclean additions
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00363.html
d388 2
a389 1
Do not forget to merge the patch back into the trunk.
d393 19
a411 2
Update ALPHA so that it uses ``struct frame_extra_info'' instead of
EXTRA_FRAME_INFO.
d413 1
a413 2
This is a barrier to replacing mips_extra_func_info with something
that works with multi-arch.
d417 2
a418 1
Multi-arch  mips_extra_func_info.
d420 4
a423 2
This first needs the alpha to be updated so that it uses ``struct
frame_extra_info''.
d427 7
a433 3
Send normal output to gdb_stdout.
Send error messages to gdb_stderror.
Send debug and log output log gdb_stdlog.
d435 2
a436 4
GDB still contains many cases where (f)printf or printf_filtered () is
used when it should be sending the messages to gdb_stderror or
gdb_stdlog.  The thought of #defining printf to something has crossed
peoples minds ;-)
d440 2
a441 1
Rationalize the host-endian code (grep for HOST_BYTE_ORDER).
d443 1
a443 4
At present defs.h includes <endian.h> (which is linux specific) yet
almost nothing depends on it.  Suggest "gdb_endian.h" which can also
handle <machine/endian.h> and only include that where it is really
needed.
d447 7
a453 1
Replace asprintf() calls with xasprintf() calls.
d455 2
a456 2
As with things like strdup() most calls to asprintf() don't check the
return value.
d460 7
a466 1
Rationaize savestring(), msavestring() and mstrsave().
d468 5
a472 1
In general libiberty's xstrdup () can be used.
d476 1
a476 1
Eliminate mmalloc() from GDB.
d478 1
a478 1
Also eliminate it from defs.h.
d482 15
a496 5
Check/cleanup MI documentation.

The list of commands specified in the documentation needs to be
checked against the mi-cmds.c table in a mechanical way (so that they
two can be kept up-to-date).
d500 1
a500 1
Eliminate error_begin().
d502 1
a502 2
With ui_file, there is no need for the statefull error_begin ()
function.
d506 2
a507 8
Add built-by, build-date, tm, xm, nm and anything else into gdb binary
so that you can see how the GDB was created.

Some of these (*m.h) would be added to the generated config.h.  That
in turn would fix a long standing bug where by the build process many
not notice a changed tm.h file.  Since everything depends on config.h,
a change to *m.h forces a change to config.h and, consequently forces
a rebuild.
d511 1
a511 1
Replace gdb_stdtarg with gdb_targout (and possibly gdb_targerr).
d513 2
a514 1
gdb_stdtarg is easily confused with gdb_stdarg.
d523 5
d530 5
a534 1
set/show remote X-packet ...
d536 5
a540 2
``(gdb) help set remote X-packet'' doesn't list the applicable
responses.  The help message needs to be expanded.
d544 1
a544 1
Extra ui_file methods - dump.
d546 1
a546 2
These are for debugging / testing.  An aside is to set up a whitebox
testsuite for key internals such as ui_file.
d550 13
a562 2
Add an "info bfd" command that displays supported object formats,
similarly to objdump -i.
d564 1
a564 1
Is there a command already?
d568 1
a568 1
Eliminate PTR.  ISO-C allows ``void *''.
d572 1
a572 1
Eliminate abort ().
d574 2
a575 3
GDB should never abort.  GDB should either throw ``error ()'' or
``internal_error ()''.  Better still GDB should naturally unwind with
an error status.
d579 2
a580 2
GDB probably doesn't build on FreeBSD pre 2.2.x
http://sourceware.cygnus.com/ml/gdb-patches/2000-05/msg00378.html
d582 2
a583 2
Fixes to get FreeBSD working on 2.2.x, 3.x and 4.x caused the code to
suffer bit rot.
d587 2
a588 2
			Architectural Changes
			=====================
d596 9
a618 11
MI's input does not use buffering.

At present the MI interface reads raw characters of from an unbuffered
FD.  This is to avoid several nasty buffer/race conditions.  That code
should be changed so that it registers its self with the event loop
(on the input FD) and then push commands up to MI as they arrive.

The serial code already does this.

--

a737 6
Fix ``I'm sorry, Dave, I can't do that.'' from symfile.c.

This requires internationalization.

--

d747 2
a748 1
Add support for Modula3
d750 11
a760 1
Get DEC/Compaq to contribute their Modula-3 support.
d764 7
a770 1
Convert ALL architectures to MULTI-ARCH.
d774 1
a774 1
Convert GDB build process to AUTOMAKE.
d776 2
a777 1
See also sub-directory configure below.
d781 1
a781 1
Cleanup configury support for optional sub-directories.
d783 3
a785 3
Check how GCC handles multiple front ends for an example of how things
could work.  A tentative first step is to rationalize things so that
all sub directories are handled in a fashion similar to gdb/mi.
d787 1
a787 1
See also automake above.
d789 2
a790 1
--
d792 2
a793 2
Restructure gdb directory tree so that it avoids any 8.3 and 14
filename problems.
d797 4
a800 2
Can the xdep files be replaced by autoconf?
Can the tm.h and nm.h files be eliminated by multi-arch.
d804 1
a804 1
Add a transcript mechanism to GDB.
d806 1
a806 3
Such a mechanism might log all gdb input and output to a file in a
form that would allow it to be replayed.  It could involve ``gdb
--transcript=FILE'' or it could involve ``(gdb) transcript file''.
d810 1
a810 1
Make MI interface accessable from existing CLI.
d826 29
d857 8
a864 1
Add a breakpoint-edit command to MI.
d866 2
a867 3
It would be similar to MI's breakpoint create but would apply to an
existing breakpoint.  It saves the need to delete/create breakpoints
when ever they are changed.
d871 3
a873 1
Add directory path to MI breakpoint.
d875 4
a878 2
That way the GUI's task of finding the file within which the
breakpoint was set is simplified.
d892 54
a945 1
Add mechanism to reject expression classes to MI
d949 2
a950 1
assignments.
d969 10
a978 1
GDB doesn't recover gracefully from remote protocol errors.
d980 4
a983 3
GDB wasn't checking for NAKs from the remote target.  Instead a NAK is
ignored and a timeout is required before GDB retries.  A pre-cursor to
fixing this this is making GDB's remote protocol packet more robust.
d985 2
a986 5
While downloading to a remote protocol target, gdb ignores packet
errors in so far as it will continue to edownload with chunk N+1 even
if chunk N was not correctly sent.  This causes gdb.base/remote.exp to
take a painfully long time to run.  As a PS that test needs to be
fixed so that it builds on 16 bit machines.
d990 1
a990 1
Move gdb_lasterr to ui_out?
d992 1
a992 3
The way GDB throws errors and records them needs a re-think.  ui_out
handles the correct output well.  It doesn't resolve what to do with
output / error-messages when things go wrong.
d1023 6
a1028 1
Document trace machinery
d1032 6
a1037 1
Document overlay machinery.
a1177 4
Make "target xxx" command interruptible.

--

a1416 9
Add a "suspend" subcommand of the "continue" command to suspend gdb
while continuing  execution of the subprocess.  Useful when you are
debugging servers and you want to dodge out and initiate a connection
to a server running under gdb.

[hey async!!]

--

a1421 6

--

[Comming...]

Modify gdb to work correctly with Pascal.
@


1.24
log
@Update JimI's e-mail addres.
Update TODO - FreeBSD mostly fixed.
@
text
@a305 9
Eliminate gdb/tui/Makefile.in.
Cleanup configury support for optional sub-directories.

Check how GCC handles multiple front ends for an example of how things
could work.  A tentative first step is to rationalize things so that
all sub directories are handled in a fashion similar to gdb/mi.

--

d626 12
@


1.23
log
@IRIX GCC fixes from 5.0 branch.
@
text
@a37 10
gdb-cvs fails to build on freebsd-elf
http://sourceware.cygnus.com/ml/gdb/2000-04/msg00004.html

Either the FreeBSD group need to contribute their local GDB changes
back to the master sources or someone needs to provides a new
(clean-room) implementation.  Since the former involves a fairly
complicated assignment the latter may be easier. [cagney]

--

d445 8
@


1.22
log
@Replace preg() with phex().  Cleanup monitor.c.
@
text
@d18 1
a18 1
GDB doesn't build under IRIX6.4
d20 2
a21 1
Benjamin Gamsa wrote:
d23 1
a23 6
Has anyone successfully built the latest (from cvs) gdb on IRIX6.4 or
later?  The first problem I hit is that proc-api.c includes
sys/user.h, which no longer exists under IRIX6.4.  If I comment out
that include, the next problem I hit is that PIOCGETPR and PIOCGETU
are no longer defined in IRIX6.4 (presumably related to the
disappearance of user.h).
@


1.21
log
@Minor maint et.al. tweeks.
@
text
@d253 6
d357 2
a358 1
gdb_stdlog.
d364 1
a364 1
At preent defs.h includes <endian.h> (which is linux specific) yet
@


1.20
log
@Review TODO.
@
text
@d212 15
d443 12
d605 6
@


1.19
log
@Rename mi/ChangeLog-mi -> mi/ChangeLog
@
text
@d196 1
a196 1
			Code cleanups
d199 2
a200 2
The following code cleanups are planned for the follow-on release to
GDB 5.0.
d256 8
a268 3
The ``info architecture'' command should be replaced with a fixed
``set architecture'' (implemented using the command.c enum code).

d287 12
d315 115
a429 2
Re: [RFC] Change configure.in so -W arnings match reality
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00350.html
d431 3
a433 3
Some GCC compilers do not like -Wreturn-type.  (Going forward there
may be more problems like that).  Need to check which of the warning
options are valid.  Need to probably disable warnings by default.
d437 22
a458 2
			General Wish List
			=================
d596 149
a753 7
Document trace machinery.

Document overlay machinery.

Extend .gdbinit mechanism to specify name on command line, allow for
lists of files to load, include function of --tclcommand.

d761 1
a761 2
Add an "info bfd" command that displays supported object formats,
similarly to objdump -i.
d766 2
d773 2
d777 2
d781 2
d790 1
a790 2
Update gdbint.texinfo to include doc on the directory structure and 
the various tricks of building gdb.
d792 1
a792 3
Do a tutorial in gdb.texinfo on how to do simple things in gdb.
E.g. how to set a breakpoint that just prints something and continues.
How to break on aborts.  Etc.
d799 1
a799 1
GDB reopens the source file on every line, as you "next" through it.
d801 1
a801 2
Referencing the vtbl member of a struct doesn't work.  It prints OK
if you print the struct, but it gets 0 if you try to deref it.
d803 1
a803 6
Persistent command history: A feature where you could save off a list
of the commands you did, so you can edit it into something that will bring
the target to the same place every time you source it.
This would also be useful for automated fast watchpointing; if you go
past the place where it watchpoints, you just start it over again and
do it more carefully.
d805 1
a805 2
Deal with the SunOS 4.0 and 4.1.1 ptrace bug that loses the registers if
the stack is paged out.
d807 1
a807 2
Finish the C++ exception handling stub routines.  Lint points them out
as unused statics functions.
d811 1
a811 16
See if core-aout.c's fetch_core_registers can be used on more machines.
E.g. MIPS (mips-xdep.c).

unpack_double() does not handle IEEE float on the target unless the host
is also IEEE.  Death on a vax.

Set up interface between GDB and INFO so that you can hop into interactive
INFO and back out again.  When running under Emacs, should use Emacs
info, else fork the info program.  Installation of GDB should install
its texinfo files into the info tree automagically, including the readline
texinfo files.

"help address" ought to find the "help set print address" entry.

Remove the VTBL internal guts from printouts of C++ structs, unless
vtblprint is set.
d816 2
d820 1
a820 6
Check STORE_RETURN_VALUE on all architectures.  Check near it in tm-sparc.h
for other bogosities.

Check for storage leaks in GDB, I'm sure there are a lot!

vtblprint of a vtbl should demangle the names it's printing.
d826 2
d831 2
d835 1
a835 2
Check through the code for FIXME comments and fix them.  dbxread.c,
blockframe.c, and plenty more. (I count 634 as of 940621 - sts)
d841 2
d847 2
d852 2
d857 1
a857 19
ptype $i6 = void??!

Clean up invalid_float handling so gdb doesn't coredump when it tries to
access a NaN.  While this might work on SPARC, other machines are not
configured right.

"b value_at ; commands ; continue ; end" stops EVERY OTHER TIME!
Then once you enter a command, it does the command, runs two more
times, and then stops again!  Bizarre...  (This behaviour has been
modified, but it is not yet 100% predictable when e.g. the commands
call functions in the child, and while there, the child is interrupted
with a signal, or hits a breakpoint.)

help completion, help history should work.

Check that we can handle stack trace through varargs AND alloca in same
function, on 29K.

wait_for_inferior loops forever if wait() gives it an error.
d862 2
d867 1
a867 12
A mess of floating point opcodes are missing from sparc-opcode.h.
Also, a little program should test the table for bits that are
overspecified or underspecified.  E.g. if the must-be-ones bits
and the must-be-zeroes bits leave some fields unexamined, and the format
string leaves them unprinted, then point this out.  If multiple
non-alias patterns match, point this out too.  Finally, there should
be a sparc-optest.s file that tries each pattern out.  This file
should end up coming back the same (modulo transformation comments) 
if fed to "gas" then the .o is fed to gdb for disassembly.

Eliminate all the core_file_command's in all the xdep files.
Eliminate separate declarations of registers[] everywhere.
d871 1
a871 6
Perhaps move the tdep, xdep, and nat files, into the config
subdirectories.  If not, at least straighten out their names so that
they all start with the machine name.

inferior_status should include stop_print_frame.  It won't need to be
reset in wait_for_inferior after bpstat_stop_status call, then.
d876 2
d880 2
d884 4
d891 4
d899 3
a901 5
Generalize and Standardize the RPC interface to a target program,
improve it beyond the "ptrace" interface, and see if it can become a
standard for remote debugging.  (This is talking about the vxworks
interface.  Seems unlikely to me that there will be "a standard" for
remote debugging anytime soon --kingdon, 8 Nov 1994).
d912 1
a912 9
When quitting with a running program, if a core file was previously
examined, you get "Couldn't read float regs from core file"...if 
indeed it can't.  generic_mourn_inferior...

Have remote targets give a warning on a signal argument to
target_resume.  Or better yet, extend the protocols so that it works
like it does on the Unix-like systems.

Sort help and info output.
d917 1
a917 3
renote-nindy.c handles interrupts poorly; it error()s out of badly
chosen places, e.g. leaving current_frame zero, which causes core dumps
on the next command.
d923 3
a925 5
Those xdep files that call register_addr without defining it are
probably simply broken.  When reconfiguring this part of gdb, I could
only make guesses about how to redo some of those files, and I
probably guessed wrong, or left them "for later" when I have a
machine that can attempt to build them.
d931 1
a931 5
When searching for C++ superclasses in value_cast in valops.c, we must
not search the "fields", only the "superclasses".  There might be a
struct with a field name that matches the superclass name.  This can
happen when the struct was defined before the superclass (before the
name became a typedef).
d943 2
d949 6
d960 2
d965 1
a965 5
mipsread.c symbol table allocation and deallocation should be checked.
My suspicion is that it's full of memory leaks.

SunOS should have a target_lookup_symbol() for common'd things allocated
by the shared library linker ld.so.
d970 2
a971 2
When listing source lines, eat leading whitespace corresponding to the
line-number prefix we print.  This avoids long lines wrapping.
d973 1
a973 3
mipsread.c needs to check for old symtabs and psymtabs for the same
files, the way it happens for dbxread.c and coffread.c, for VxWorks
incremental symbol table reloading.
d979 2
d985 4
d992 2
d997 2
d1004 2
d1011 1
a1011 7
Clean up formatting of "info registers" on MIPS and 88k.  See if it
is possible to do this generically across all target architectures.

GDB gets bfd/corefile.c and gdb/corefile.c confused (this should be easy to
repeat even with something more recent than GDB 4.9).

Check that unmatched RBRAC doesn't abort().
d1020 2
d1025 2
d1031 2
d1036 1
a1036 6
Fix byte order and int size sins in tm-a29k.h
(EXTRACT_RETURN_VALUE).  Perhaps should reproduce bug and verify fix
(or perhaps should just fix it...).

Make a watchpoint on a constant expression an error (or warning
perhaps)
d1041 1
a1041 5
Re-do calls to signal() in remote.c, and inflow.c (set_sigint_trap and
so on) to be independent of the debugging target, using target_stop to
stop the inferior.  Probably the part which is now handled by
interrupt_query in remote.c can be done without any new features in
the debugging target.
d1047 1
a1047 3
Nuke baseclass_addr.

Nuke USG define.
d1049 1
a1049 1
"source file more recent" loses on re-read
d1055 1
a1055 3
Look at Solaris bug in interrupt.exp.  Can get out of syscall with
PRSABORT (syscall will return EINTR) but merely doing that leads to a
"can't read memory" error.
d1079 2
d1084 1
a1084 3
Why do we allow a target to omit standard register names (NO_STD_REGS
in tm-z8k.h)?  I thought the standard register names were supposed to
be just that, standard.
d1088 2
d1092 2
d1098 3
a1100 1
cd ~/tmp/<M-?> causes infinite loop (where ~/tmp is a directory).
d1105 1
a1105 23
Clean up add_toc_to_loadinfo

Think about attached processes and sharing terminal.

John sez in reference to ignoring errors from tcsegpgrp if attach_flag:
set_tty_state should not have any trouble with attached processes.
Instead, the tty handling should leave the pgrp of the tty alone when
attaching to processes (perhaps pass terminal_init_inferior a flag
saying whether we're attaching).

PAGE_SIZE redefined warnings on AIX.  Probably should be using
BFD_PAGE_SIZE throughout BFD.

Rewrite proceed, wait_for_inferior, and normal_stop to clean them up.
Suggestions: 

	1) Make each test in wait_for_inferior a seperate subroutine
	   call.
	2) Combine wait_for_inferior and normal_stop to clean up
	   communication via global variables.
	3) See if you can find some way to clean up the global
	   variables that are used; possibly group them by data flow
	   and information content?
d1113 2
d1117 2
d1123 2
d1130 3
a1132 9
Add stab information to allow reasonable debugging of inline functions
(possibly they should show up on a stack backtrace?  With a note
indicating that they weren't "real"?).

Modify the naked "until" command to step until past the current source
line, rather than past the current pc value.  This is tricky simply
because the low level routines have no way of specifying a multi-line
step range, and there is no way of saying "don't print stuff when we
stop" from above (otherwise could just call step many times).
d1140 1
a1140 1
Do an "x/i $pc" after each stepi or nexti.  
d1142 1
a1142 2
Modify all of the disassemblers to use printf_filtered to get correct
more filtering.
d1146 2
d1151 2
@


1.18
log
@Add notes on register cache.
@
text
@a237 8
ChangeLog.mi vs ChangeLog-mi (Andrew Cagney)
Needs further debate.

Re: [PATCH] Add change-log variables to more MI files
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00811.html

--

@


1.17
log
@Mention UnixWare thread problem.
@
text
@d2 3
a4 3
bug-gdb@@prep.ai.mit.edu.  If you would like to work on any of these,
you should consider sending mail to the same address, to find out
whether anyone else is working on it.
d7 2
a8 2
Known problems in GDB 5.0
=========================
d196 2
a197 4
		------------------------------------------------

Code cleanups
=============
d315 121
a435 2
General Wish List
=================
d448 14
a461 2
This list is probably not up to date, and opinions vary about the
importance or even desirability of some of the items.
@


1.16
log
@Doc weak symbol problem.
@
text
@d186 10
@


1.15
log
@Document IRIX->ARM cross compile problem.
@
text
@d172 11
@


1.14
log
@Document bfd/doc/Makefile.in TEXINPUTS problem.
@
text
@d162 13
@


1.13
log
@	* Makefile.in (GDBMI_DIR): New variable.
	(SET_TEXINPUTS): Add $(GDBMI_DIR).
	(SFILES_DOC): Add $(GDBMI_DIR)/gdbmi.texinfo.
	(gdbmi.texinfo): New target, for texi2roff.
	(gdb.me, gdb.ms, gdb.mm): Depend on gdbmi.texinfo.
	(gdb.info, gdb_toc.html): Add "-I ${GDBMI_DIR}".

	* gdb.texinfo (Top): Add GDB/MI to the main menu and @@include
	gdbmi.texinfo.
	(Mode Options): Add xref to GDB/MI docs and remove a FIXME
	comment.

	* gdbmi.texinfo: Lots of changes, to include this document as part
	of the GDB manual.

	* TODO, NEWS: Update due to inclusion of gdbmi.texinfo in the GDB
	manual.
@
text
@d31 11
@


1.12
log
@	* TODO:  Update.
@
text
@a142 18
MI documentation in GDB user guide. (Andrew Cagney, Elena Zannoni,
Stan Shebs, anyone else?)

> (Are there plans to make gdbmi.texi be part of the manual as well?)

I'd like to see it go in there sooner rather than later too.  Otherwise
you're introducing discrepancies between the manual and the documentation,
and everybody is confused - witness the lack of doc for the tracing
commands still, some two years after they were added...

Discussion on MI can be found on the thread: [PATCH] GDB command-line
switches and annotations docs
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00639.html

MI documentation can be found in the file gdb/mi/gdbmi.texinfo

--

@


1.11
log
@Document -Wreturn-type problem.
@
text
@a127 4
I think
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00664.html
fixed this.

@


1.10
log
@* TODO: Cleanup.
* NEWS: Update GDB version.  Duplicate paragraph explaining obsolete.
@
text
@d285 9
@


1.9
log
@Document real fix to problem of tui/Makefile not being deleted.
@
text
@a172 92
GDB 5.0: Test results
=====================

Please include:

	o	the output of `config.guess`
	o	the date
	o	the compiler
	o	a note mentioning the reason
		for any serious failures.

--

alpha-dec-osf4.0a, vendor compiler, 2000-03-04

Still has many compile warnings (mostly relating back to PTR vs void*)
but it did compile using:

	CC=cc .../configure
	make

Test results are:

# of expected passes            6223
# of unexpected failures        103
# of unexpected successes       2
# of expected failures          196
# of unresolved testcases       6
# of unsupported tests          1

Looking at the output it would appear that GDB is stepping into some
functions instead of ``next'' ing over them:

	35          dummy();
	(gdb) next
	dummy () at /home/cagney/GDB-DEJAGNU/src/gdb/testsuite/gdb.base/all-types.c:41
	41      {

Since there is no active maintainer, I'd consider this sufficient for
5.0 :-/

--

sparc-sun-solaris2.6, egcs-2.91.66, 2000-02-10
http://sourceware.cygnus.com/ml/gdb-testers/2000-q1/msg00030.html

There is a SIGTRAP problem that occures in ptrace.exp (Cagney to
expand on).

# of expected passes            6420
# of unexpected failures        7
# of expected failures          199

--

solaris 2.5.1 sparc?, 2.9-gnupro-99r1, 2000-02-10
http://sourceware.cygnus.com/ml/gdb-testers/2000-q1/msg00032.html

# of expected passes            6420
# of unexpected failures        6
# of expected failures          199

--

sparc-unknown-netbsdelf1.4P, egcs-1.1.2+, 2000-03-01

This is with a very recent kernel.

# of expected passes            6055
# of unexpected failures        88
# of unexpected successes       1
# of expected failures          190
# of unresolved testcases       59

--

GNU/Linux PPC
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00185.html

Kevins merged it all in.

--

Unixware

Builds ok.  Problems with some of the thread code.  Unfortunate but
not a show stopper.  Nick D's still looking at it.

Re: uw-threads issues
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00025.html


a174 1

d275 7
@


1.8
log
@TODO, NEWS: Update.  Mention MI.
@
text
@d362 9
@


1.7
log
@From 2000-03-27 Peter Schauer <pes@@regent.e-technik.tu-muenchen.de>:
* procfs.c (init_procfs_ops):  Set procfs_ops.to_has_memory and
procfs_ops.to_has_all_memory to 1.
@
text
@d7 2
a8 6
TODO: GDB 5.0
=============

Here are _all_ the issues that have been raised vis-a-vis the 5.0
release.  Also check the GDB, and other, mail archives
(http://sourceware.cygnus.com/ml/gdb/).
d10 3
a12 3
If, however, you fix something, then feel free to tweek this file
(deleting the problem).  Just send a note to gdb-patches so that I see
the change.
d14 1
a14 2
The names in paren are those that might know more about the problem.
They don't necessarily indicate the people that will fix the problem.
d18 1
a18 2
GDB 5.0: Must have
------------------
d20 8
a27 2
These are things that have been identifed as must-have for this
release of GDB.
d31 2
a32 2
GDB 5.0: Nice to have
---------------------
d34 4
a37 3
These are things that might make it in 5.0 but don't sit in the
critical path.  If they miss the 5.0 cut then they definitly should
make the follow-on release.
d41 2
a42 2
Generic: lin-thread cannot handle thread exit (Mark Kettenis, Michael Snyder)
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00525.html
d49 1
a49 1
As an additional reference point, the pre thread_db code didn't work
d56 2
a57 1
Anthony Green has started contributing late breaking Java patches:
a67 2
It should be able to squeeze these in.

d72 2
a73 5
The pascal support patches nave been added to the patch data base.  I
[cagney] strongly suspect that they are better suited for 5.1.

Indent -gnu ?
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00496.html
d78 2
a79 6
--

Programs run under GDB have SIGCHLD masked.

[I think this can be worked around by using the action command -
cagney]
d84 2
a85 1
Solaris/x86)
d107 2
a108 1
IRIX?
d110 6
a115 1
Benjamin Gamsa wrote:
d117 1
a117 6
Has anyone successfully built the latest (from cvs) gdb on IRIX6.4 or
later?  The first problem I hit is that proc-api.c includes
sys/user.h, which no longer exists under IRIX6.4.  If I comment out
that include, the next problem I hit is that PIOCGETPR and PIOCGETU
are no longer defined in IRIX6.4 (presumably related to the
disappearance of user.h).
d121 3
a123 4
Regressions (prologue) with devel GCC.

The current head of the GCC branch doesn't co-operate well with GDB
over debug information.
d125 2
a126 4
Regressions problem (200 failures)
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00475.html

--
d128 1
a128 1
RFA: infrun.c, breakpoint.c: Kludge for Solaris x86 hardware watchpoint support
d130 1
a130 12

Unfortunately I'd need the following kludge to work around a Solaris
x86 kernel problem with hardware watchpoint support.  See the comment
in the patches for a description of the problem.

--

RFD: infrun.c: No bpstat_stop_status call after proceed over break ?
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00665.html

I am currently trying to fix a GDB bug with missing watchpoint triggers
after proceeding over a breakpoint on x86 targets.
d137 5
a141 6
--

Migrate qfThreadInfo packet -> qThreadInfo. (Andrew Cagney)

Add support for packet enable/disable commands with these thread
packets.  General cleanup.
d143 1
a143 5
[PATCH] Document the ThreadInfo remote protocol queries
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00832.html

[PATCH] "info threads" queries for remote.c
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00831.html
d161 2
d168 2
a169 34
--

problems loading shared libraries - with attached test case
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00820.html

Hi, I'm having problems loading shared libraries.  This is with a
build of gdb out of cvs that I pulled and built on March 27th and has
been there for at least a week.  I haven't gone back further than
that.  This is with the gcc that is shipping with Red Hat 6.2:

Reading specs from
/usr/lib/gcc-lib/i386-redhat-linux/egcs-2.91.66/specs gcc version
egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)

I'm using "set auto-solib-add 0" after main has been called.  If I use
"shar" to load a shared library manually once I can't use it again to
load another shared library later.  Please see the attached log for an
example of how to reproduce the problem.

--

GDB 5.0: Won't have
-------------------

The following are on hold until GDB 5.0 is branched.  In general they
won't go in as they unsettle the GDB sources.

--

ATTRIBUTE_UNUSED

The need for this as almost been eliminated.  The next version of GCC
(assuming cagney gets the revised patch approved) will be able to
supress unused parameter warnings.
a172 65
Delete macro TARGET_BYTE_ORDER_SELECTABLE.

Patches in the database.

--

Updated readline

Readline 4.? is out.  A merge wouldn't hurt.

--

Purge PARAMS

Something to do post 5.0 branch

--

Elimination of make_cleanup_func. (Andrew Cagney)

make_cleanup_func elimination
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00791.html
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00814.html

--

ChangeLog.mi vs ChangeLog-mi (Andrew Cagney)
Needs further debate.

Re: [PATCH] Add change-log variables to more MI files
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00811.html

--

Re: gdb-cvs fails on freebsd-elf
http://sourceware.cygnus.com/ml/gdb/2000-04/msg00004.html

FreeBSD haven't contributed their local GDB changes back to the master
sources (they would at least need an FSF assignment by all
individuales that contributed to the work).  Given the strong
likelhood that this will never happen, I'd suggest that a better
strategy would be for someone (with an FSF/GDD assignment) to do a new
(clean-room) implementation.  That can then be accepted in time for
GDB 5.1.

--

Re: Various C++ things

value_headof/value_from_vtable_info are worthless, and should be removed.
The one place in printcmd.c that uses it should use the RTTI functions.

RTTI for g++ should be using the typeinfo functions rather than the vtables.
The typeinfo functions are always at offset 4 from the beginning of the vtable,
and are always right. The vtables will have weird names like E::VB sometimes.
The typeinfo function will always be "E type_info function", or somesuch.

value_virtual_fn_field needs to be fixed so there are no failures for virtual
functions for C++ using g++.

Testsuite cases are the major priority right now for C++ support, since i have
to make a lot of changes that could potentially break each other.


--
d174 1
a174 1
---------------------
d268 65
a332 2
General Wish List
=================
d339 1
a339 1
into gdbarch-utils.[hc] (Name ok).
d346 18
@


1.7.2.1
log
@TODO, NEWS: Update.  Mention MI.
@
text
@d7 6
a12 2
Known problems in GDB 5.0
=========================
d14 3
a16 3
Below is a list of problems identified during the GDB 5.0 release
cycle.  People hope to have these problems fixed in a follow-on
release.
d18 2
a19 1
(The names in paren indicate people that posted the original problem.)
d23 2
a24 1
GDB doesn't build under IRIX6.4
d26 2
a27 8
Benjamin Gamsa wrote:

Has anyone successfully built the latest (from cvs) gdb on IRIX6.4 or
later?  The first problem I hit is that proc-api.c includes
sys/user.h, which no longer exists under IRIX6.4.  If I comment out
that include, the next problem I hit is that PIOCGETPR and PIOCGETU
are no longer defined in IRIX6.4 (presumably related to the
disappearance of user.h).
d31 2
a32 2
gdb-cvs fails to build on freebsd-elf
http://sourceware.cygnus.com/ml/gdb/2000-04/msg00004.html
d34 3
a36 4
Either the FreeBSD group need to contribute their local GDB changes
back to the master sources or someone needs to provides a new
(clean-room) implementation.  Since the former involves a fairly
complicated assignment the latter may be easier. [cagney]
d40 2
a41 2
Generic: lin-thread cannot handle thread exit (Mark Kettenis, Michael
Snyder) http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00525.html
d48 1
a48 1
As an additional reference point, the pre thread_db code did not work
d55 1
a55 2
Anthony Green has a number of Java patches that did not make it into
the 5.0 release.
d66 2
d72 5
a76 2
Pierre Muller has contributed patches for adding Pascal Language
support to GDB.
d81 6
a86 2
Indent -gnu ?
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00496.html
d91 1
a91 2
Solaris/x86).
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00336.html
d113 19
a131 1
Possible regressions with some devel GCCs.
d134 4
a137 6
gcc-2.95.2 outputs a line note *before* the prologue (and one for the
closing brace after the epilogue, instead of before it, as it used to
be). By disabling the RTL-style prologue generating mechanism
(undocumented GCC option -mno-schedule-prologue), you get back the
traditional behaviour.
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00510.html
d139 3
a141 1
This should now be fixed.
d145 1
a145 2
RFD: infrun.c: No bpstat_stop_status call after proceed over break?
(Peter Schauer)
d148 2
a149 6
GDB misses watchpoint triggers after proceeding over a breakpoint on
x86 targets.

I think
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00664.html
fixed this.
d156 6
a161 5
I know there are problems with single stepping through signal
handlers.  These problems were present in 4.18.  They were just masked
because 4.18 failed to recognize signal handlers.  Fixing it is not
easy, and will require changes to handle_inferior_event(), that I
prefer not to make before the 5.0 release.
d163 5
a167 1
Mark
a184 2
MI documentation can be found in the file gdb/mi/gdbmi.texinfo

d190 34
a223 2
(Broken) support for GDB's remote protocol across UDP is to be
included in the follow-on release.
d227 65
d293 1
a293 1
=====================
d387 2
a388 65
Code cleanups
=============

The following code cleanups are planned for the follow-on release to
GDB 5.0.

--

ATTRIBUTE_UNUSED

The need for this as almost been eliminated.  The next version of GCC
(assuming cagney gets the relevant patch committed) will be able to
supress unused parameter warnings.

--

Delete macro TARGET_BYTE_ORDER_SELECTABLE.

Patches in the database.

--

Updated readline

Readline 4.? is out.  A merge wouldn't hurt.

--

Purge PARAMS

Eliminate all uses of PARAMS in GDB's source code.

--

Elimination of make_cleanup_func. (Andrew Cagney)

make_cleanup_func elimination
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00791.html
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00814.html

--

ChangeLog.mi vs ChangeLog-mi (Andrew Cagney)
Needs further debate.

Re: [PATCH] Add change-log variables to more MI files
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00811.html

--

Re: Various C++ things

value_headof/value_from_vtable_info are worthless, and should be removed.
The one place in printcmd.c that uses it should use the RTTI functions.

RTTI for g++ should be using the typeinfo functions rather than the vtables.
The typeinfo functions are always at offset 4 from the beginning of the vtable,
and are always right. The vtables will have weird names like E::VB sometimes.
The typeinfo function will always be "E type_info function", or somesuch.

value_virtual_fn_field needs to be fixed so there are no failures for virtual
functions for C++ using g++.

Testsuite cases are the major priority right now for C++ support, since i have
to make a lot of changes that could potentially break each other.
d395 1
a395 1
into arch-utils.[hc].
a401 18

--

Migrate qfThreadInfo packet -> qThreadInfo. (Andrew Cagney)

Add support for packet enable/disable commands with these thread
packets.  General cleanup.

[PATCH] Document the ThreadInfo remote protocol queries
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00832.html

[PATCH] "info threads" queries for remote.c
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00831.html

--

General Wish List
=================
@


1.7.2.2
log
@MSG 00665 isn't yet fixed.
@
text
@d128 4
@


1.7.2.3
log
@Add rm tui/Makefile to distclean rule.
Document real fix.
@
text
@a357 9
Eliminate gdb/tui/Makefile.in.
Cleanup configury support for optional sub-directories.

Check how GCC handles multiple front ends for an example of how things
could work.  A tentative first step is to rationalize things so that
all sub directories are handled in a fashion similar to gdb/mi.

--

@


1.7.2.4
log
@* TODO: Cleanup.
* NEWS: Update GDB version.  Duplicate paragraph explaining obsolete.
@
text
@d169 92
d262 1
@


1.7.2.5
log
@	* Makefile.in (GDBMI_DIR): New variable.
	(SET_TEXINPUTS): Add $(GDBMI_DIR).
	(SFILES_DOC): Add $(GDBMI_DIR)/gdbmi.texinfo.
	(gdbmi.texinfo): New target, for texi2roff.
	(gdb.me, gdb.ms, gdb.mm): Depend on gdbmi.texinfo.
	(gdb.info, gdb_toc.html): Add "-I ${GDBMI_DIR}".

	* gdb.texinfo (Top): Add GDB/MI to the main menu and @@include
	gdbmi.texinfo.
	(Mode Options): Add xref to GDB/MI docs and remove a FIXME
	comment.

	* gdbmi.texinfo: Lots of changes, to include this document as part
	of the GDB manual.

	* TODO, NEWS: Update due to inclusion of gdbmi.texinfo in the GDB
	manual.
@
text
@d143 18
@


1.7.2.6
log
@Re-generate bfd/doc/Makefile.in with a snapshot of automake that
doesn't contain a TEXINPUTS path bug.
@
text
@a30 11
The BFD directory requires bug-fixed AUTOMAKE et.al.

AUTOMAKE 1.4 incorrectly set the TEXINPUTS environment variable.  It
contained the full path to texinfo.tex when it should have only
contained the directory.  The bug has been fixed in the current
AUTOMAKE sources.  Automake snapshots can be found in:
	ftp://sourceware.cygnus.com/pub/gdb/snapshots
and	ftp://sourceware.cygnus.com/pub/binutils

--

@


1.7.2.7
log
@Document IRIX->ARM cross compile problem.
@
text
@a161 13
Can't build IRIX -> arm GDB.
http://sourceware.cygnus.com/ml/gdb-patches/2000-04/msg00356.html

David Whedon writes:
> Now I'm building for an embedded arm target.  If there is a way of turning
> remote-rdi off, I couldn't find it. It looks like it gets built by default
> in gdb/configure.tgt(line 58) Anyway, the build dies in
> gdb/rdi-share/unixcomm.c.  SERPORT1 et. al. never get defined because we
> aren't one of the architectures supported.


--

@


1.7.2.8
log
@Fix IRIX 6.5 compile problems (GCC only).
@
text
@d18 1
a18 1
GDB requires GCC to build under IRIX
d20 1
a20 2
IRIX, being more pedantic than GCC reports as errors certain
assignments that GCC treats as warnings.
d22 6
a27 1
This can be worked around by building GDB with the GCC compiler.
@


1.7.2.9
log
@Doc weak symbol problem.
@
text
@a167 11
--

Problem with weak functions
http://sourceware.cygnus.com/ml/gdb/2000-05/msg00060.html

Dan Nicolaescu writes:
> It seems that gdb-4.95.1  does not display correctly the function when
> stoping in weak functions. 
> 
> It stops in a function that is defined as weak, not in the function
> that is actualy run... 
@


1.7.2.10
log
@Mention UnixWare thread problem.
@
text
@a181 10
GDB5 TOT on unixware 7
http://sourceware.cygnus.com/ml/gdb/2000-04/msg00119.html

Robert Lipe writes:
> I just spun the top of tree of the GDB5 branch on UnixWare 7.  As a
> practical matter, the current thread support is somewhat more annoying
> than when GDB was thread-unaware.

--

@


1.6
log
@Update todo
@
text
@a30 18
Solaris/x86 - which? (Nick Duffek, Peter Schauer, Michael Snyder?)

Nick D's working through patches from Michael Snyder and Peter S.

--


RFA: procfs.c: init_procfs_ops should set
procfs_ops.to_has_[all]_memory (Peter Schauer, Andrew Cagney?)

I am pretty sure that this is caused by some accidental deletion, but
procfs.c:init_procfs_ops no longer sets procfs_ops.to_has_memory and
procfs_ops.to_has_all_memory.

http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg01057.html

--

@


1.5
log
@2000-04-03  H.J. Lu  <hjl@@gnu.org>

	* TODO: Remove the regex entry.
@
text
@d292 18
@


1.4
log
@Update removing anything fixed.
@
text
@a270 11
Allow GDB to use installed regex.  Think about updating regex to more
recent version (Andrew Cagney).

Re: A new patch for regex
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00635.html

A patch for gnu-regex
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00568.html

--

@


1.3
log
@Update GDB 5 status.
@
text
@a30 28
Watch point related patches (Eli Zaretskii, Michael Snyder, ???)

Eli writes: This doesn't include the watchpoint-related patches I sent
beginning with August or September, and mentioned them again three
weeks ago.  Here again are the pointers to the relevant messages:

Hardware breakpoints and watchpoints: patches
http://sourceware.cygnus.com/ml/gdb-patches/1999-q3/msg00173.html

Re: Hardware breakpoints and watchpoints: patches
http://sourceware.cygnus.com/ml/gdb-patches/1999-q3/msg00204.html

Re: Hardware breakpoints and watchpoints: patches
http://sourceware.cygnus.com/ml/gdb-patches/1999-q4/msg00200.html

Hardware watchpoints for bitfields
http://sourceware.cygnus.com/ml/gdb-patches/1999-q4/msg00201.html

--

Tom's speedups to GDB (Tom Tromey, Jim Blandy)

I believe that there was a late breaking fix that stopped a coredump.

http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00869.html

--

d199 2
a200 1
[PATCH] GDB command-line switches and annotations docs
d205 24
d287 13
@


1.2
log
@Add GDB 5.0 release criteria.
@
text
@a64 1
Texinfo broken/builds (Andrew Cagney, Stan Shebs)
d66 2
a67 1
Cagney probably botched a fix to a botch.
d69 3
a71 1
--
d73 1
a73 11
x86 linux GDB and SIGALRM
http://sourceware.cygnus.com/ml/gdb/2000-q1/msg00803.html

--

RFA: breakpoint.c: Minor output fixes for hardware watchpoints
http://sourceware.cygnus.com/ml/gdb-patches/2000-q1/msg00558.html

During implementation of hardware watchpoints on Solaris, I noticed the
following inconsistencies in breakpoint.c output between software and
hardware breakpoints.
d121 6
d199 33
d266 27
d390 24
@


1.1
log
@Initial revision
@
text
@d6 18
a23 1
General To Do List
d26 307
d336 14
a722 3
Make DEBUG_EXPRESSIONS a maintenance command, dependent on
MAINTENANCE_COMMANDS.

d803 3
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990504 snapshot
@
text
@a11 14
Document trace machinery.

Document overlay machinery.

Extend .gdbinit mechanism to specify name on command line, allow for
lists of files to load, include function of --tclcommand.

@@c This does not work (yet if ever).  FIXME.
@@c @@item --parse=@@var{lang} @@dots{}
@@c Configure the @@value{GDBN} expression parser to parse the listed languages.
@@c @@samp{all} configures @@value{GDBN} for all supported languages.  To get a
@@c list of all supported languages, omit the argument.  Without this
@@c option, @@value{GDBN} is configured to parse all supported languages.

d385 3
a467 3

Remove the range and type checking code and documentation, if not
going to implement.
@

