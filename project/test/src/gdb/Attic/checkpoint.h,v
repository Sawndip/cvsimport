head	1.1;
access;
symbols
	msnyder-checkpoint-072509-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2009.07.26.01.32.59;	author msnyder;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2009.07.26.01.32.59;	author msnyder;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2009.07.26.23.15.07;	author msnyder;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file checkpoint.h was initially added on branch msnyder-checkpoint-072509-branch.
@
text
@@


1.1.2.1
log
@2009-07-25  Michael Snyder  <msnyder@@vmware.com>

	* checkpoint.c: New file, target-agnostic checkpoints.
	* checkpoint.h: New file, interface.
	* Makefile.in (SFILES): Add checkpoint.c.
@
text
@a0 25
/* External interface for checkpoint module.
   Copyright (C) 2009
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#if !defined (CHECKPOINT_H)
#define CHECKPOINT_H 1

extern void checkpoint_init (void);

#endif	/* CHECKPOINT_H */
@


1.1.2.2
log
@2009-07-26  Michael Snyder  <msnyder@@vmware.com>

	In-flux state: target methods temporarily broken.

	* checkpoint.c (checkpoint_insert): New function.
	(checkpint_first): New function.
	(checkpoint_next): New function.
	(checkpoint_unlink): New function.
	(checkpoint_find_id): New function.
	(checkpoint_command): Manage list locally.
	(delete_checkpoint_command): Ditto.
	(info_checkpoints_command): Ditto.
	(restart_command): Ditto

	* checkpoint.h (checkpoint_insert, checkpoint_first,
	checkpoint_next, checkpoint_unlink, checkpoint_find_id): Export.

	* record.c (record_insert_checkpoint): New function.
	(record_delete_checkpoint): New function.
	(record_show_checkpoint_info): New function.
	(record_goto_checkpoint): New function.
	(record_restore_checkpoint): New function.
@
text
@a22 27
/*
 * The data structure for the checkpoint list.
 */
struct checkpoint_info 
{
  int checkpoint_id;
  void *client_data;
  struct checkpoint_info *next;
};

/*
 * Public functions for managing the checkpoint list.
 */

/* Insert a checkpoint into the list.  */
extern struct checkpoint_info *checkpoint_insert (void *client_data);

/* Unlink a checkpoint from the list.  */
extern void checkpoint_unlink (struct checkpoint_info *cp);

/* Find a checkpoint (by id) in the list.  */
extern struct checkpoint_info *checkpoint_find_id (int id);

/* Traverse the checkpoint list.  */
extern struct checkpoint_info *checkpoint_first (void);
extern struct checkpoint_info *checkpoint_next (void);

@


