head	1.2;
access;
symbols
	insight-precleanup-2001-01-01:1.1.1.6
	gdb-post-protoization-2000-07-29:1.1.1.6
	gdb-pre-protoization-2000-07-29:1.1.1.6
	gdb-premipsmulti-2000-06-06-branch:1.1.1.6.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.6
	gdb-post-params-removal-2000-06-04:1.1.1.6
	gdb-pre-params-removal-2000-06-04:1.1.1.6
	gdb-post-params-removal-2000-05-28:1.1.1.6
	gdb-pre-params-removal-2000-05-28:1.1.1.6
	gdb_5_0-2000-05-19-release:1.1.1.6
	gdb_4_18_2-2000-05-18-release:1.1.1.6
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.6
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.6
	gdb_5_0-2000-04-10-branch:1.1.1.6.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.6
	repo-unification-2000-02-06:1.1.1.6
	insight-2000-02-04:1.1.1.6
	gdb-2000-02-04:1.1.1.6
	gdb-2000-02-02:1.1.1.6
	gdb-2000-02-01:1.1.1.6
	gdb-2000-01-31:1.1.1.5
	gdb-2000-01-26:1.1.1.5
	gdb-2000-01-24:1.1.1.5
	gdb-2000-01-17:1.1.1.5
	gdb-2000-01-10:1.1.1.5
	gdb-2000-01-05:1.1.1.5
	gdb-1999-12-21:1.1.1.5
	gdb-1999-12-13:1.1.1.5
	gdb-1999-12-07:1.1.1.5
	gdb-1999-12-06:1.1.1.5
	gdb-1999-11-16:1.1.1.5
	gdb-1999-11-08:1.1.1.5
	gdb-1999-11-01:1.1.1.5
	gdb-1999-10-25:1.1.1.5
	gdb-1999-10-18:1.1.1.5
	gdb-1999-10-11:1.1.1.5
	gdb-1999-10-04:1.1.1.5
	gdb-1999-09-28:1.1.1.5
	gdb-1999-09-21:1.1.1.5
	gdb-1999-09-13:1.1.1.5
	gdb-1999-09-08:1.1.1.5
	gdb-1999-08-30:1.1.1.5
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.4
	gdb-1999-07-26:1.1.1.4
	gdb-1999-07-19:1.1.1.4
	gdb-1999-07-12:1.1.1.4
	gdb-post-reformat-19990707:1.1.1.4
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.4
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.3
	gdb-1999-06-28:1.1.1.3
	gdb-1999-06-21:1.1.1.3
	gdb-1999-06-14:1.1.1.3
	gdb-1999-06-07:1.1.1.3
	gdb-1999-06-01:1.1.1.3
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2001.02.08.06.30.24;	author cagney;	state dead;
branches;
next	1.1;

1.1
date	99.04.16.01.34.06;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.06;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.05.14.43.01;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.25.18.03.33;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.07.07.20.10.36;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.08.31.01.06.10;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.02.02.00.21.10;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove configurations marked as obsolete in 5.0.
@
text
@/* Print instructions for Tahoe target machines, for GDB.
   Copyright 1986, 1989, 1991, 1992 Free Software Foundation, Inc.
   Contributed by the State University of New York at Buffalo, by the
   Distributed Computer Systems Lab, Department of Computer Science, 1991.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "symtab.h"
#include "opcode/tahoe.h"

/* Tahoe instructions are never longer than this.  */
#define MAXLEN 62

/* Number of elements in the opcode table.  */
#define NOPCODES (sizeof votstrs / sizeof votstrs[0])

static unsigned char *print_insn_arg ();

/* Print the Tahoe instruction at address MEMADDR in debugged memory,
   on STREAM.  Returns length of the instruction, in bytes.  */

int
tahoe_print_insn (memaddr, stream)
     CORE_ADDR memaddr;
     GDB_FILE *stream;
{
  unsigned char buffer[MAXLEN];
  register int i;
  register unsigned char *p;
  register char *d;

  read_memory (memaddr, buffer, MAXLEN);

  for (i = 0; i < NOPCODES; i++)
    if (votstrs[i].detail.code == buffer[0]
	|| votstrs[i].detail.code == *(unsigned short *)buffer)
      break;

  /* Handle undefined instructions.  */
  if (i == NOPCODES)
    {
      fprintf_unfiltered (stream, "0%o", buffer[0]);
      return 1;
    }

  fprintf_unfiltered (stream, "%s", votstrs[i].name);

  /* Point at first byte of argument data,
     and at descriptor for first argument.  */
  p = buffer + 1 + (votstrs[i].detail.code >= 0x100);
  d = votstrs[i].detail.args;

  if (*d)
    fputc_unfiltered ('\t', stream);

  while (*d)
    {
      p = print_insn_arg (d, p, memaddr + (p - buffer), stream);
      d += 2;
      if (*d)
	fprintf_unfiltered (stream, ",");
    }
  return p - buffer;
}
/*******************************************************************/
static unsigned char *
print_insn_arg (d, p, addr, stream)
     char *d;
     register char *p;
     CORE_ADDR addr;
     GDB_FILE *stream;
{
  int temp1 = 0;
  register int regnum = *p & 0xf;
  float floatlitbuf;

  if (*d == 'b')
    {
      if (d[1] == 'b')
	fprintf_unfiltered (stream, "0x%x", addr + *p++ + 1);
      else
	{

	  temp1 = *p;
	  temp1 <<= 8;
	  temp1 |= *(p + 1);
	  fprintf_unfiltered (stream, "0x%x", addr + temp1 + 2);
	  p += 2;
	}
    }
  else
    switch ((*p++ >> 4) & 0xf)
      {
      case 0:
      case 1:
      case 2:
      case 3:			/* Literal (short immediate byte) mode */
	if (d[1] == 'd' || d[1] == 'f' || d[1] == 'g' || d[1] == 'h')
	  {
	    *(int *)&floatlitbuf = 0x4000 + ((p[-1] & 0x3f) << 4);
	    fprintf_unfiltered (stream, "$%f", floatlitbuf);
	  }
	else
	  fprintf_unfiltered (stream, "$%d", p[-1] & 0x3f);
	break;

      case 4:			/* Indexed */
	p = (char *) print_insn_arg (d, p, addr + 1, stream);
	fprintf_unfiltered (stream, "[%s]", REGISTER_NAME (regnum));
	break;

      case 5:			/* Register */
	fprintf_unfiltered (stream, REGISTER_NAME (regnum));
	break;

      case 7:			/* Autodecrement */
	fputc_unfiltered ('-', stream);
      case 6:			/* Register deferred */
	fprintf_unfiltered (stream, "(%s)", REGISTER_NAME (regnum));
	break;

      case 9:	                /* Absolute Address & Autoincrement deferred */
	fputc_unfiltered ('*', stream);
	if (regnum == PC_REGNUM)
	  {
	    temp1 = *p;
	    temp1 <<= 8;
	    temp1 |= *(p +1);

	    fputc_unfiltered ('$', stream);
	    print_address (temp1, stream);
	    p += 4;
	    break;
	  }
      case 8:			/*Immediate & Autoincrement SP */
        if (regnum == 8)         /*88 is Immediate Byte Mode*/
	  fprintf_unfiltered (stream, "$%d", *p++);

	else if (regnum == 9)        /*89 is Immediate Word Mode*/
	  {
	    temp1 = *p;
	    temp1 <<= 8; 
	    temp1 |= *(p +1);
	    fprintf_unfiltered (stream, "$%d", temp1);
	    p += 2;
	  }  

	else if (regnum == PC_REGNUM)    /*8F is Immediate Long Mode*/
	  {
	    temp1 = *p;
	    temp1 <<=8;
	    temp1 |= *(p +1);
	    temp1 <<=8;
	    temp1 |= *(p +2);
	    temp1 <<= 8;
	    temp1 |= *(p +3);
	    fprintf_unfiltered (stream, "$%d", temp1);
	    p += 4;
	  }

	else                            /*8E is Autoincrement SP Mode*/
	      fprintf_unfiltered (stream, "(%s)+", REGISTER_NAME (regnum));
	break;

      case 11:			/* Register + Byte Displacement Deferred Mode*/
	fputc_unfiltered ('*', stream);
      case 10:			/* Register + Byte Displacement Mode*/
	if (regnum == PC_REGNUM)
	  print_address (addr + *p + 2, stream);
	else
	  fprintf_unfiltered (stream, "%d(%s)", *p, REGISTER_NAME (regnum));
	p += 1;
	break;

      case 13:			/* Register + Word Displacement Deferred Mode*/
	fputc_unfiltered ('*', stream);
      case 12:			/* Register + Word Displacement Mode*/
	temp1 = *p;
	temp1 <<= 8;
	temp1 |= *(p +1);
	if (regnum == PC_REGNUM)
	  print_address (addr + temp1 + 3, stream);
	else
	  fprintf_unfiltered (stream, "%d(%s)", temp1, REGISTER_NAME (regnum));
	p += 2;
	break;

      case 15:			/* Register + Long Displacement Deferred Mode*/
	fputc_unfiltered ('*', stream);
      case 14:			/* Register + Long Displacement Mode*/
	temp1 = *p;
	temp1 <<= 8;
	temp1 |= *(p +1);
	temp1 <<= 8;
	temp1 |= *(p +2);
	temp1 <<= 8;
	temp1 |= *(p +3);
	if (regnum == PC_REGNUM)
	  print_address (addr + temp1 + 5, stream);
	else
	  fprintf_unfiltered (stream, "%d(%s)", temp1, REGISTER_NAME (regnum));
	p += 4;
      }

  return (unsigned char *) p;
}













@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990504 snapshot
@
text
@a33 31
/* Advance PC across any function entry prologue instructions
   to reach some "real" code.  */

CORE_ADDR
tahoe_skip_prologue (pc)
     CORE_ADDR pc;
{
  register int op = (unsigned char) read_memory_integer (pc, 1);
  if (op == 0x11)
    pc += 2;  /* skip brb */
  if (op == 0x13)
    pc += 3;  /* skip brw */
  if (op == 0x2c
      && ((unsigned char) read_memory_integer (pc+2, 1)) == 0x5e)
    pc += 3;  /* skip subl2 */
  if (op == 0xe9
      && ((unsigned char) read_memory_integer (pc+1, 1)) == 0xae
      && ((unsigned char) read_memory_integer(pc+3, 1)) == 0x5e)
    pc += 4;  /* skip movab */
  if (op == 0xe9
      && ((unsigned char) read_memory_integer (pc+1, 1)) == 0xce
      && ((unsigned char) read_memory_integer(pc+4, 1)) == 0x5e)
    pc += 5;  /* skip movab */
  if (op == 0xe9
      && ((unsigned char) read_memory_integer (pc+1, 1)) == 0xee
      && ((unsigned char) read_memory_integer(pc+6, 1)) == 0x5e)
    pc += 7;  /* skip movab */
  return pc;
}


@


1.1.1.3
log
@import gdb-1999-05-25 snapshot
@
text
@a63 9
/* Return number of args passed to a frame.
   Can return -1, meaning no way to tell.  */

int
tahoe_frame_num_args (fi)
     struct frame_info *fi;
{
  return (((0xffff & read_memory_integer(((fi)->frame-4),4)) - 4) >> 2);
}
@


1.1.1.4
log
@import gdb-1999-07-07 post reformat
@
text
@d6 1
a6 1
   This file is part of GDB.
d8 13
a20 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d43 1
a43 1
    pc += 2;			/* skip brb */
d45 1
a45 1
    pc += 3;			/* skip brw */
d47 2
a48 2
      && ((unsigned char) read_memory_integer (pc + 2, 1)) == 0x5e)
    pc += 3;			/* skip subl2 */
d50 3
a52 3
      && ((unsigned char) read_memory_integer (pc + 1, 1)) == 0xae
      && ((unsigned char) read_memory_integer (pc + 3, 1)) == 0x5e)
    pc += 4;			/* skip movab */
d54 3
a56 3
      && ((unsigned char) read_memory_integer (pc + 1, 1)) == 0xce
      && ((unsigned char) read_memory_integer (pc + 4, 1)) == 0x5e)
    pc += 5;			/* skip movab */
d58 3
a60 3
      && ((unsigned char) read_memory_integer (pc + 1, 1)) == 0xee
      && ((unsigned char) read_memory_integer (pc + 6, 1)) == 0x5e)
    pc += 7;			/* skip movab */
d71 1
a71 1
  return (((0xffff & read_memory_integer (((fi)->frame - 4), 4)) - 4) >> 2);
d91 1
a91 1
	|| votstrs[i].detail.code == *(unsigned short *) buffer)
d155 1
a155 1
	    *(int *) &floatlitbuf = 0x4000 + ((p[-1] & 0x3f) << 4);
d177 1
a177 1
      case 9:			/* Absolute Address & Autoincrement deferred */
d183 1
a183 1
	    temp1 |= *(p + 1);
d191 1
a191 1
	if (regnum == 8)	/*88 is Immediate Byte Mode */
d194 1
a194 1
	else if (regnum == 9)	/*89 is Immediate Word Mode */
d197 2
a198 2
	    temp1 <<= 8;
	    temp1 |= *(p + 1);
d201 1
a201 1
	  }
d203 1
a203 1
	else if (regnum == PC_REGNUM)	/*8F is Immediate Long Mode */
d206 4
d211 1
a211 5
	    temp1 |= *(p + 1);
	    temp1 <<= 8;
	    temp1 |= *(p + 2);
	    temp1 <<= 8;
	    temp1 |= *(p + 3);
d216 2
a217 2
	else			/*8E is Autoincrement SP Mode */
	  fprintf_unfiltered (stream, "(%s)+", REGISTER_NAME (regnum));
d220 1
a220 1
      case 11:			/* Register + Byte Displacement Deferred Mode */
d222 1
a222 1
      case 10:			/* Register + Byte Displacement Mode */
d230 1
a230 1
      case 13:			/* Register + Word Displacement Deferred Mode */
d232 1
a232 1
      case 12:			/* Register + Word Displacement Mode */
d235 1
a235 1
	temp1 |= *(p + 1);
d243 1
a243 1
      case 15:			/* Register + Long Displacement Deferred Mode */
d245 1
a245 1
      case 14:			/* Register + Long Displacement Mode */
d248 1
a248 1
	temp1 |= *(p + 1);
d250 1
a250 1
	temp1 |= *(p + 2);
d252 1
a252 1
	temp1 |= *(p + 3);
d262 13
@


1.1.1.5
log
@import gdb-1999-08-30 snapshot
@
text
@d1 262
a262 262
/* OBSOLETE /* Print instructions for Tahoe target machines, for GDB. */
/* OBSOLETE    Copyright 1986, 1989, 1991, 1992 Free Software Foundation, Inc. */
/* OBSOLETE    Contributed by the State University of New York at Buffalo, by the */
/* OBSOLETE    Distributed Computer Systems Lab, Department of Computer Science, 1991. */
/* OBSOLETE  */
/* OBSOLETE    This file is part of GDB. */
/* OBSOLETE  */
/* OBSOLETE    This program is free software; you can redistribute it and/or modify */
/* OBSOLETE    it under the terms of the GNU General Public License as published by */
/* OBSOLETE    the Free Software Foundation; either version 2 of the License, or */
/* OBSOLETE    (at your option) any later version. */
/* OBSOLETE  */
/* OBSOLETE    This program is distributed in the hope that it will be useful, */
/* OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of */
/* OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the */
/* OBSOLETE    GNU General Public License for more details. */
/* OBSOLETE  */
/* OBSOLETE    You should have received a copy of the GNU General Public License */
/* OBSOLETE    along with this program; if not, write to the Free Software */
/* OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330, */
/* OBSOLETE    Boston, MA 02111-1307, USA.  *x/ */
/* OBSOLETE  */
/* OBSOLETE #include "defs.h" */
/* OBSOLETE #include "symtab.h" */
/* OBSOLETE #include "opcode/tahoe.h" */
/* OBSOLETE  */
/* OBSOLETE /* Tahoe instructions are never longer than this.  *x/ */
/* OBSOLETE #define MAXLEN 62 */
/* OBSOLETE  */
/* OBSOLETE /* Number of elements in the opcode table.  *x/ */
/* OBSOLETE #define NOPCODES (sizeof votstrs / sizeof votstrs[0]) */
/* OBSOLETE  */
/* OBSOLETE static unsigned char *print_insn_arg (); */
/* OBSOLETE  */
/* OBSOLETE /* Advance PC across any function entry prologue instructions */
/* OBSOLETE    to reach some "real" code.  *x/ */
/* OBSOLETE  */
/* OBSOLETE CORE_ADDR */
/* OBSOLETE tahoe_skip_prologue (pc) */
/* OBSOLETE      CORE_ADDR pc; */
/* OBSOLETE { */
/* OBSOLETE   register int op = (unsigned char) read_memory_integer (pc, 1); */
/* OBSOLETE   if (op == 0x11) */
/* OBSOLETE     pc += 2;			/* skip brb *x/ */
/* OBSOLETE   if (op == 0x13) */
/* OBSOLETE     pc += 3;			/* skip brw *x/ */
/* OBSOLETE   if (op == 0x2c */
/* OBSOLETE       && ((unsigned char) read_memory_integer (pc + 2, 1)) == 0x5e) */
/* OBSOLETE     pc += 3;			/* skip subl2 *x/ */
/* OBSOLETE   if (op == 0xe9 */
/* OBSOLETE       && ((unsigned char) read_memory_integer (pc + 1, 1)) == 0xae */
/* OBSOLETE       && ((unsigned char) read_memory_integer (pc + 3, 1)) == 0x5e) */
/* OBSOLETE     pc += 4;			/* skip movab *x/ */
/* OBSOLETE   if (op == 0xe9 */
/* OBSOLETE       && ((unsigned char) read_memory_integer (pc + 1, 1)) == 0xce */
/* OBSOLETE       && ((unsigned char) read_memory_integer (pc + 4, 1)) == 0x5e) */
/* OBSOLETE     pc += 5;			/* skip movab *x/ */
/* OBSOLETE   if (op == 0xe9 */
/* OBSOLETE       && ((unsigned char) read_memory_integer (pc + 1, 1)) == 0xee */
/* OBSOLETE       && ((unsigned char) read_memory_integer (pc + 6, 1)) == 0x5e) */
/* OBSOLETE     pc += 7;			/* skip movab *x/ */
/* OBSOLETE   return pc; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Return number of args passed to a frame. */
/* OBSOLETE    Can return -1, meaning no way to tell.  *x/ */
/* OBSOLETE  */
/* OBSOLETE int */
/* OBSOLETE tahoe_frame_num_args (fi) */
/* OBSOLETE      struct frame_info *fi; */
/* OBSOLETE { */
/* OBSOLETE   return (((0xffff & read_memory_integer (((fi)->frame - 4), 4)) - 4) >> 2); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Print the Tahoe instruction at address MEMADDR in debugged memory, */
/* OBSOLETE    on STREAM.  Returns length of the instruction, in bytes.  *x/ */
/* OBSOLETE  */
/* OBSOLETE int */
/* OBSOLETE tahoe_print_insn (memaddr, stream) */
/* OBSOLETE      CORE_ADDR memaddr; */
/* OBSOLETE      GDB_FILE *stream; */
/* OBSOLETE { */
/* OBSOLETE   unsigned char buffer[MAXLEN]; */
/* OBSOLETE   register int i; */
/* OBSOLETE   register unsigned char *p; */
/* OBSOLETE   register char *d; */
/* OBSOLETE  */
/* OBSOLETE   read_memory (memaddr, buffer, MAXLEN); */
/* OBSOLETE  */
/* OBSOLETE   for (i = 0; i < NOPCODES; i++) */
/* OBSOLETE     if (votstrs[i].detail.code == buffer[0] */
/* OBSOLETE 	|| votstrs[i].detail.code == *(unsigned short *) buffer) */
/* OBSOLETE       break; */
/* OBSOLETE  */
/* OBSOLETE   /* Handle undefined instructions.  *x/ */
/* OBSOLETE   if (i == NOPCODES) */
/* OBSOLETE     { */
/* OBSOLETE       fprintf_unfiltered (stream, "0%o", buffer[0]); */
/* OBSOLETE       return 1; */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   fprintf_unfiltered (stream, "%s", votstrs[i].name); */
/* OBSOLETE  */
/* OBSOLETE   /* Point at first byte of argument data, */
/* OBSOLETE      and at descriptor for first argument.  *x/ */
/* OBSOLETE   p = buffer + 1 + (votstrs[i].detail.code >= 0x100); */
/* OBSOLETE   d = votstrs[i].detail.args; */
/* OBSOLETE  */
/* OBSOLETE   if (*d) */
/* OBSOLETE     fputc_unfiltered ('\t', stream); */
/* OBSOLETE  */
/* OBSOLETE   while (*d) */
/* OBSOLETE     { */
/* OBSOLETE       p = print_insn_arg (d, p, memaddr + (p - buffer), stream); */
/* OBSOLETE       d += 2; */
/* OBSOLETE       if (*d) */
/* OBSOLETE 	fprintf_unfiltered (stream, ","); */
/* OBSOLETE     } */
/* OBSOLETE   return p - buffer; */
/* OBSOLETE } */
/* OBSOLETE /*******************************************************************x/ */
/* OBSOLETE static unsigned char * */
/* OBSOLETE print_insn_arg (d, p, addr, stream) */
/* OBSOLETE      char *d; */
/* OBSOLETE      register char *p; */
/* OBSOLETE      CORE_ADDR addr; */
/* OBSOLETE      GDB_FILE *stream; */
/* OBSOLETE { */
/* OBSOLETE   int temp1 = 0; */
/* OBSOLETE   register int regnum = *p & 0xf; */
/* OBSOLETE   float floatlitbuf; */
/* OBSOLETE  */
/* OBSOLETE   if (*d == 'b') */
/* OBSOLETE     { */
/* OBSOLETE       if (d[1] == 'b') */
/* OBSOLETE 	fprintf_unfiltered (stream, "0x%x", addr + *p++ + 1); */
/* OBSOLETE       else */
/* OBSOLETE 	{ */
/* OBSOLETE  */
/* OBSOLETE 	  temp1 = *p; */
/* OBSOLETE 	  temp1 <<= 8; */
/* OBSOLETE 	  temp1 |= *(p + 1); */
/* OBSOLETE 	  fprintf_unfiltered (stream, "0x%x", addr + temp1 + 2); */
/* OBSOLETE 	  p += 2; */
/* OBSOLETE 	} */
/* OBSOLETE     } */
/* OBSOLETE   else */
/* OBSOLETE     switch ((*p++ >> 4) & 0xf) */
/* OBSOLETE       { */
/* OBSOLETE       case 0: */
/* OBSOLETE       case 1: */
/* OBSOLETE       case 2: */
/* OBSOLETE       case 3:			/* Literal (short immediate byte) mode *x/ */
/* OBSOLETE 	if (d[1] == 'd' || d[1] == 'f' || d[1] == 'g' || d[1] == 'h') */
/* OBSOLETE 	  { */
/* OBSOLETE 	    *(int *) &floatlitbuf = 0x4000 + ((p[-1] & 0x3f) << 4); */
/* OBSOLETE 	    fprintf_unfiltered (stream, "$%f", floatlitbuf); */
/* OBSOLETE 	  } */
/* OBSOLETE 	else */
/* OBSOLETE 	  fprintf_unfiltered (stream, "$%d", p[-1] & 0x3f); */
/* OBSOLETE 	break; */
/* OBSOLETE  */
/* OBSOLETE       case 4:			/* Indexed *x/ */
/* OBSOLETE 	p = (char *) print_insn_arg (d, p, addr + 1, stream); */
/* OBSOLETE 	fprintf_unfiltered (stream, "[%s]", REGISTER_NAME (regnum)); */
/* OBSOLETE 	break; */
/* OBSOLETE  */
/* OBSOLETE       case 5:			/* Register *x/ */
/* OBSOLETE 	fprintf_unfiltered (stream, REGISTER_NAME (regnum)); */
/* OBSOLETE 	break; */
/* OBSOLETE  */
/* OBSOLETE       case 7:			/* Autodecrement *x/ */
/* OBSOLETE 	fputc_unfiltered ('-', stream); */
/* OBSOLETE       case 6:			/* Register deferred *x/ */
/* OBSOLETE 	fprintf_unfiltered (stream, "(%s)", REGISTER_NAME (regnum)); */
/* OBSOLETE 	break; */
/* OBSOLETE  */
/* OBSOLETE       case 9:			/* Absolute Address & Autoincrement deferred *x/ */
/* OBSOLETE 	fputc_unfiltered ('*', stream); */
/* OBSOLETE 	if (regnum == PC_REGNUM) */
/* OBSOLETE 	  { */
/* OBSOLETE 	    temp1 = *p; */
/* OBSOLETE 	    temp1 <<= 8; */
/* OBSOLETE 	    temp1 |= *(p + 1); */
/* OBSOLETE  */
/* OBSOLETE 	    fputc_unfiltered ('$', stream); */
/* OBSOLETE 	    print_address (temp1, stream); */
/* OBSOLETE 	    p += 4; */
/* OBSOLETE 	    break; */
/* OBSOLETE 	  } */
/* OBSOLETE       case 8:			/*Immediate & Autoincrement SP *x/ */
/* OBSOLETE 	if (regnum == 8)	/*88 is Immediate Byte Mode *x/ */
/* OBSOLETE 	  fprintf_unfiltered (stream, "$%d", *p++); */
/* OBSOLETE  */
/* OBSOLETE 	else if (regnum == 9)	/*89 is Immediate Word Mode *x/ */
/* OBSOLETE 	  { */
/* OBSOLETE 	    temp1 = *p; */
/* OBSOLETE 	    temp1 <<= 8; */
/* OBSOLETE 	    temp1 |= *(p + 1); */
/* OBSOLETE 	    fprintf_unfiltered (stream, "$%d", temp1); */
/* OBSOLETE 	    p += 2; */
/* OBSOLETE 	  } */
/* OBSOLETE  */
/* OBSOLETE 	else if (regnum == PC_REGNUM)	/*8F is Immediate Long Mode *x/ */
/* OBSOLETE 	  { */
/* OBSOLETE 	    temp1 = *p; */
/* OBSOLETE 	    temp1 <<= 8; */
/* OBSOLETE 	    temp1 |= *(p + 1); */
/* OBSOLETE 	    temp1 <<= 8; */
/* OBSOLETE 	    temp1 |= *(p + 2); */
/* OBSOLETE 	    temp1 <<= 8; */
/* OBSOLETE 	    temp1 |= *(p + 3); */
/* OBSOLETE 	    fprintf_unfiltered (stream, "$%d", temp1); */
/* OBSOLETE 	    p += 4; */
/* OBSOLETE 	  } */
/* OBSOLETE  */
/* OBSOLETE 	else			/*8E is Autoincrement SP Mode *x/ */
/* OBSOLETE 	  fprintf_unfiltered (stream, "(%s)+", REGISTER_NAME (regnum)); */
/* OBSOLETE 	break; */
/* OBSOLETE  */
/* OBSOLETE       case 11:			/* Register + Byte Displacement Deferred Mode *x/ */
/* OBSOLETE 	fputc_unfiltered ('*', stream); */
/* OBSOLETE       case 10:			/* Register + Byte Displacement Mode *x/ */
/* OBSOLETE 	if (regnum == PC_REGNUM) */
/* OBSOLETE 	  print_address (addr + *p + 2, stream); */
/* OBSOLETE 	else */
/* OBSOLETE 	  fprintf_unfiltered (stream, "%d(%s)", *p, REGISTER_NAME (regnum)); */
/* OBSOLETE 	p += 1; */
/* OBSOLETE 	break; */
/* OBSOLETE  */
/* OBSOLETE       case 13:			/* Register + Word Displacement Deferred Mode *x/ */
/* OBSOLETE 	fputc_unfiltered ('*', stream); */
/* OBSOLETE       case 12:			/* Register + Word Displacement Mode *x/ */
/* OBSOLETE 	temp1 = *p; */
/* OBSOLETE 	temp1 <<= 8; */
/* OBSOLETE 	temp1 |= *(p + 1); */
/* OBSOLETE 	if (regnum == PC_REGNUM) */
/* OBSOLETE 	  print_address (addr + temp1 + 3, stream); */
/* OBSOLETE 	else */
/* OBSOLETE 	  fprintf_unfiltered (stream, "%d(%s)", temp1, REGISTER_NAME (regnum)); */
/* OBSOLETE 	p += 2; */
/* OBSOLETE 	break; */
/* OBSOLETE  */
/* OBSOLETE       case 15:			/* Register + Long Displacement Deferred Mode *x/ */
/* OBSOLETE 	fputc_unfiltered ('*', stream); */
/* OBSOLETE       case 14:			/* Register + Long Displacement Mode *x/ */
/* OBSOLETE 	temp1 = *p; */
/* OBSOLETE 	temp1 <<= 8; */
/* OBSOLETE 	temp1 |= *(p + 1); */
/* OBSOLETE 	temp1 <<= 8; */
/* OBSOLETE 	temp1 |= *(p + 2); */
/* OBSOLETE 	temp1 <<= 8; */
/* OBSOLETE 	temp1 |= *(p + 3); */
/* OBSOLETE 	if (regnum == PC_REGNUM) */
/* OBSOLETE 	  print_address (addr + temp1 + 5, stream); */
/* OBSOLETE 	else */
/* OBSOLETE 	  fprintf_unfiltered (stream, "%d(%s)", temp1, REGISTER_NAME (regnum)); */
/* OBSOLETE 	p += 4; */
/* OBSOLETE       } */
/* OBSOLETE  */
/* OBSOLETE   return (unsigned char *) p; */
/* OBSOLETE } */
@


1.1.1.6
log
@import gdb-2000-02-01 snapshot
@
text
@d2 1
a2 1
/* OBSOLETE    Copyright 1986, 1989, 1991, 1992, 2000 Free Software Foundation, Inc. */
d81 1
a81 1
/* OBSOLETE      struct ui_file *stream; */
d127 1
a127 1
/* OBSOLETE      struct ui_file *stream; */
@


