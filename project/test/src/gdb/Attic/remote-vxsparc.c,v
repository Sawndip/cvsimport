head	1.18;
access;
symbols
	gdb_6_3-20041109-release:1.17
	gdb_6_3-branch:1.17.0.16
	gdb_6_3-20041019-branchpoint:1.17
	drow_intercu-merge-20040921:1.17
	drow_intercu-merge-20040915:1.17
	jimb-gdb_6_2-e500-branch:1.17.0.18
	jimb-gdb_6_2-e500-branchpoint:1.17
	gdb_6_2-20040730-release:1.17
	gdb_6_2-branch:1.17.0.14
	gdb_6_2-2004-07-10-gmt-branchpoint:1.17
	gdb_6_1_1-20040616-release:1.17
	gdb_6_1-2004-04-05-release:1.17
	drow_intercu-merge-20040402:1.17
	drow_intercu-merge-20040327:1.17
	ezannoni_pie-20040323-branch:1.17.0.12
	ezannoni_pie-20040323-branchpoint:1.17
	cagney_tramp-20040321-mergepoint:1.17
	cagney_tramp-20040309-branch:1.17.0.10
	cagney_tramp-20040309-branchpoint:1.17
	gdb_6_1-branch:1.17.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.17
	drow_intercu-20040221-branch:1.17.0.6
	drow_intercu-20040221-branchpoint:1.17
	cagney_bfdfile-20040213-branch:1.17.0.4
	cagney_bfdfile-20040213-branchpoint:1.17
	drow-cplus-merge-20040208:1.17
	carlton_dictionary-20040126-merge:1.17
	cagney_bigcore-20040122-branch:1.17.0.2
	cagney_bigcore-20040122-branchpoint:1.17
	drow-cplus-merge-20040113:1.17
	drow-cplus-merge-20031224:1.16
	drow-cplus-merge-20031220:1.16
	carlton_dictionary-20031215-merge:1.16
	drow-cplus-merge-20031214:1.16
	carlton-dictionary-20031111-merge:1.16
	gdb_6_0-2003-10-04-release:1.12
	kettenis_sparc-20030918-branch:1.14.0.2
	kettenis_sparc-20030918-branchpoint:1.14
	carlton_dictionary-20030917-merge:1.14
	ezannoni_pie-20030916-branchpoint:1.12
	ezannoni_pie-20030916-branch:1.12.0.10
	cagney_x86i386-20030821-branch:1.12.0.8
	cagney_x86i386-20030821-branchpoint:1.12
	carlton_dictionary-20030805-merge:1.12
	carlton_dictionary-20030627-merge:1.12
	gdb_6_0-branch:1.12.0.6
	gdb_6_0-2003-06-23-branchpoint:1.12
	jimb-ppc64-linux-20030613-branch:1.12.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.12
	cagney_convert-20030606-branch:1.12.0.2
	cagney_convert-20030606-branchpoint:1.12
	cagney_writestrings-20030508-branch:1.11.0.12
	cagney_writestrings-20030508-branchpoint:1.11
	jimb-ppc64-linux-20030528-branch:1.11.0.10
	jimb-ppc64-linux-20030528-branchpoint:1.11
	carlton_dictionary-20030523-merge:1.11
	cagney_fileio-20030521-branch:1.11.0.8
	cagney_fileio-20030521-branchpoint:1.11
	kettenis_i386newframe-20030517-mergepoint:1.11
	jimb-ppc64-linux-20030509-branch:1.11.0.6
	jimb-ppc64-linux-20030509-branchpoint:1.11
	kettenis_i386newframe-20030504-mergepoint:1.11
	carlton_dictionary-20030430-merge:1.11
	kettenis_i386newframe-20030419-branch:1.11.0.4
	kettenis_i386newframe-20030419-branchpoint:1.11
	carlton_dictionary-20030416-merge:1.11
	cagney_frameaddr-20030409-mergepoint:1.11
	kettenis_i386newframe-20030406-branch:1.11.0.2
	kettenis_i386newframe-20030406-branchpoint:1.11
	cagney_frameaddr-20030403-branchpoint:1.10
	cagney_frameaddr-20030403-branch:1.10.0.16
	cagney_framebase-20030330-mergepoint:1.10
	cagney_framebase-20030326-branch:1.10.0.14
	cagney_framebase-20030326-branchpoint:1.10
	cagney_lazyid-20030317-branch:1.10.0.12
	cagney_lazyid-20030317-branchpoint:1.10
	kettenis-i386newframe-20030316-mergepoint:1.10
	offbyone-20030313-branch:1.10.0.10
	offbyone-20030313-branchpoint:1.10
	kettenis-i386newframe-20030308-branch:1.10.0.8
	kettenis-i386newframe-20030308-branchpoint:1.10
	carlton_dictionary-20030305-merge:1.10
	cagney_offbyone-20030303-branch:1.10.0.6
	cagney_offbyone-20030303-branchpoint:1.10
	carlton_dictionary-20030207-merge:1.10
	interps-20030203-mergepoint:1.10
	interps-20030202-branch:1.10.0.4
	interps-20030202-branchpoint:1.10
	cagney-unwind-20030108-branch:1.10.0.2
	cagney-unwind-20030108-branchpoint:1.10
	carlton_dictionary-20021223-merge:1.10
	gdb_5_3-2002-12-12-release:1.7
	carlton_dictionary-20021115-merge:1.10
	kseitz_interps-20021105-merge:1.8
	kseitz_interps-20021103-merge:1.8
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.16
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.14
	carlton_dictionary-20020920-branchpoint:1.7
	gdb_5_3-branch:1.7.0.12
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.7
	cagney_sysregs-20020825-branch:1.7.0.10
	cagney_sysregs-20020825-branchpoint:1.7
	readline_4_3-import-branch:1.7.0.8
	readline_4_3-import-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.6
	kseitz_interps-20020528-branch:1.7.0.6
	kseitz_interps-20020528-branchpoint:1.7
	cagney_regbuf-20020515-branch:1.7.0.4
	cagney_regbuf-20020515-branchpoint:1.7
	jimb-macro-020506-branch:1.7.0.2
	jimb-macro-020506-branchpoint:1.7
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.10
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.6
	gdb_5_1_0_1-2002-01-03-release:1.6
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.6.0.8
	gdb_5_1-2001-11-21-release:1.6
	gdb_s390-2001-09-26-branch:1.6.0.6
	gdb_s390-2001-09-26-branchpoint:1.6
	gdb_5_1-2001-07-29-branch:1.6.0.4
	gdb_5_1-2001-07-29-branchpoint:1.6
	dberlin-typesystem-branch:1.6.0.2
	dberlin-typesystem-branchpoint:1.6
	gdb-post-ptid_t-2001-05-03:1.6
	gdb-pre-ptid_t-2001-05-03:1.6
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.2
	insight-2000-02-04:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.18
date	2004.11.13.23.10.01;	author cagney;	state dead;
branches;
next	1.17;

1.17
date	2004.01.03.12.09.47;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.02.20.28.30;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.30.13.23.49;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.17.15.42.21;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.17.14.24.30;	author cagney;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.02.09.39;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.06.01.13.59;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.14.20.37.29;	author cagney;	state Exp;
branches
	1.10.16.1;
next	1.9;

1.9
date	2002.11.07.15.31.31;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.25.22.25.55;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.24.05.34.52;	author davem;	state Exp;
branches
	1.7.6.1
	1.7.14.1
	1.7.16.1;
next	1.6;

1.6
date	2001.03.01.01.39.21;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.02.23.04.14;	author jtc;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.02.19.14.33;	author jtc;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.30.01.48.27;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.09.08.52.47;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.09.30;	author jsm;	state Exp;
branches;
next	;

1.7.6.1
date	2002.11.04.00.17.32;	author ezannoni;	state Exp;
branches;
next	;

1.7.14.1
date	2002.11.15.19.18.54;	author carlton;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2003.04.16.19.56.54;	author carlton;	state Exp;
branches;
next	1.7.14.3;

1.7.14.3
date	2003.06.27.21.50.07;	author carlton;	state Exp;
branches;
next	1.7.14.4;

1.7.14.4
date	2003.09.17.21.28.30;	author carlton;	state Exp;
branches;
next	1.7.14.5;

1.7.14.5
date	2003.11.11.23.50.53;	author carlton;	state Exp;
branches;
next	1.7.14.6;

1.7.14.6
date	2004.01.26.19.11.29;	author carlton;	state Exp;
branches;
next	;

1.7.16.1
date	2003.12.14.20.27.29;	author drow;	state Exp;
branches;
next	1.7.16.2;

1.7.16.2
date	2004.01.13.16.11.59;	author drow;	state Exp;
branches;
next	;

1.10.16.1
date	2003.04.10.21.33.49;	author cagney;	state Exp;
branches;
next	;


desc
@@


1.18
log
@2004-11-13  Andrew Cagney  <cagney@@gnu.org>

	* configure.tgt: Delete i[34567]86-*-vxworks*, m68*-netx-*,
	m68*-*-vxworks*, mips*-*-vxworks*, powerpc-*-vxworks*, and
	sparc-*-vxworks*.
	* NEWS: Mention that vxworks was deleted.
	* config/m68k/tm-vx68.h, config/mips/tm-vxmips.h: Delete.
	* config/powerpc/tm-vxworks.h, config/tm-vxworks.h: Delete.
	* config/i386/vxworks.mt, config/m68k/vxworks68.mt: Delete.
	* config/mips/vxmips.mt, config/powerpc/vxworks.mt: Delete.
	* config/sparc/vxworks.mt, vx-share/dbgRpcLib.h: Delete.
	* vx-share/ptrace.h, vx-share/regPacket.h: Delete.
	* vx-share/vxTypes.h, vx-share/vxWorks.h: Delete.
	* vx-share/wait.h, vx-share/xdr_ld.c: Delete.
	* vx-share/xdr_ld.h, vx-share/xdr_ptrace.c: Delete.
	* vx-share/xdr_ptrace.h, vx-share/xdr_rdb.c: Delete.
	* vx-share/xdr_rdb.h, remote-vxsparc.c: Delete.
	* remote-vxmips.c, remote-vx.c: Delete.
	* remote-vx68.c: Delete.
	* config/m68k/tm-os68k.h: Remove reference to VxWorks.
	* config/m68k/os68k.mt, ada-lang.h: Ditto.
	* Makefile.in (HFILES_NO_SRCDIR, ALLDEPFILES, remote-vx68.o)
	(remote-vx.o, remote-vxmips.o, remote-vxsparc.o): Delete vx files.
@
text
@/* SPARC-specific portions of the RPC protocol for VxWorks.

   Contributed by Wind River Systems.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "regcache.h"

#include "gdb_string.h"

#include "sparc-tdep.h"

#include "vx-share/ptrace.h"
#include "vx-share/regPacket.h"

#define SPARC_R_G1	(SPARC_R_G0 + SPARC_GREG_SIZE)

const struct sparc_gregset vxsparc_gregset =
{
  SPARC_R_PSR,			/* %psr */
  SPARC_R_PC,			/* %pc */
  SPARC_R_NPC,			/* %npc */
  SPARC_R_Y,			/* %y */
  SPARC_R_WIM,			/* %wim */
  SPARC_R_TBR,			/* %tbr */
  SPARC_R_G1,			/* %g1 */
  SPARC_R_I0			/* %l0 */
};

/* Flag set if target has an FPU.  */

extern int target_has_fp;

/* Generic register read/write routines in remote-vx.c.  */

extern void net_read_registers ();
extern void net_write_registers ();

/* Read a register or registers from the VxWorks target.  REGNUM is
   the register to read, or -1 for all; currently, it is ignored.
   FIXME: Look at REGNUM to improve efficiency.  */

void
vx_read_register (int regnum)
{
  struct regcache *regcache = current_regcache;
  char gregs[SPARC_GREG_PLEN];
  char fpregs[SPARC_FPREG_PLEN];
  CORE_ADDR sp;

  /* Get the general-purpose registers.  */
  net_read_registers (gregs, SPARC_GREG_PLEN, PTRACE_GETREGS);
  sparc32_supply_gregset (&vxsparc_gregset, regcache, -1, gregs);

  /* If the target has floating-point registers, fetch them.
     Otherwise, zero the floating-point register values in GDB's
     register cache for good measure, even though we might not need
     to.  */
  if (target_has_fp)
    net_read_registers (fpregs, SPARC_FPREG_PLEN, PTRACE_GETFPREGS);
  else
    memset (fpregs, 0, SPARC_FPREG_PLEN);
  sparc32_supply_fpregset (regcache, -1, fpregs);
}

/* Store a register or registers into the VxWorks target.  REGNUM is
   the register to store, or -1 for all; currently, it is ignored.
   FIXME: Look at REGNUM to improve efficiency.  */

void
vx_write_register (int regnum)
{
  struct regcache *regcache = current_regcache;
  char gregs[SPARC_GREG_PLEN];
  char fpregs[SPARC_FPREG_PLEN];
  int gregs_p = 1;
  int fpregs_p = 1;
  CORE_ADDR sp;

  if (regnum != -1)
    {
      if ((SPARC_G0_REGNUM <= regnum && regnum <= SPARC_I7_REGNUM)
	  || (SPARC32_Y_REGNUM <= regnum && regnum <= SPARC32_NPC_REGNUM))
	fpregs_p = 0;
      else
	gregs_p = 0;
    }

  /* Store the general-purpose registers.  */
  if (gregs_p)
    {
      sparc32_collect_gregset (&vxsparc_gregset, regcache, -1, gregs);
      net_write_registers (gregs, SPARC_GREG_PLEN, PTRACE_SETREGS);

      /* Deal with the stack regs.  */
      if (regnum == -1 || regnum == SPARC_SP_REGNUM
	  || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_I7_REGNUM))
	{
	  ULONGEST sp;

	  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);
	  sparc_collect_rwindow (regcache, sp, regnum);
	}
    }

  /* Store the floating-point registers if the target has them.  */
  if (fpregs_p && target_has_fp)
    {
      sparc32_collect_fpregset (regcache, -1, fpregs);
      net_write_registers (fpregs, SPARC_FPREG_PLEN, PTRACE_SETFPREGS);
    }
}
@


1.17
log
@* configure.tgt: Add back sparc-*-vxworks*.
* remote-vxsparc.c: Remove all includes except for "defs.h",
"regcache.h", "vx-share/ptrace.h" and "vx-share/regPacket.h".
Include "sparc-tdep.h".
(SPARC_R_G1): New define.
(vxsparc_gregset): New variable.
(ext_format_sparc): Remove extern declaration.
(vx_read_register): Rewrite to use sparc32_supply_gregset and
sparc32_supply_fpregset.
(vx_write_register): Rewrite to use sparc32_collect_gregset,
sparc_collect_rwindow and sparc32_collect_fpregset.
* config/sparc/tm-vxworks.h: New file, based on recently removed
tm-vxsparc.h.
* config/sparc/vxworks.mt: New file, based on recently removed
vxworks.mt.
@
text
@@


1.16
log
@2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_RAW_SIZE): Rename
	REGISTER_RAW_SIZE.
	* gdbarch.h, gdbarch.c: Re-generate.
	* aix-thread.c, alpha-tdep.h, arm-tdep.c, core-sol2.c: Update.
	* cris-tdep.c, dve3900-rom.c, findvar.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, ia64-tdep.c, infcmd.c, infptrace.c: Update.
	* infrun.c, irix5-nat.c, lynx-nat.c, mips-linux-tdep.c: Update.
	* mips-nat.c, mips-tdep.c, mipsv4-nat.c, mn10300-tdep.c: Update.
	* monitor.c, ns32k-tdep.c, ppc-linux-nat.c, regcache.c: Update.
	* remote-e7000.c, remote-mips.c, remote-sim.c: Update.
	* remote-vxmips.c, remote-vxsparc.c, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, rs6000-tdep.c, s390-tdep.c: Update.
	* sh64-tdep.c, sparc-nat.c, sparc-tdep.c, stack.c: Update.
	* target.c, tracepoint.c, v850-tdep.c, v850ice.c, valops.c: Update.
	* vax-tdep.c, vax-tdep.h, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-delta68.h, config/m68k/tm-vx68.h: Update.
	* config/sparc/tm-sparc.h, config/sparc/tm-sparclynx.h: Update.

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_RAW_SIZE to DEPRECATED_REGISTER_RAW_SIZE.
	* gdb.texinfo (Packets, Stop Reply Packets): Ditto.
	* gdbint.texinfo (Target Architecture Definition): Rename

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_RAW_SIZE to
	DEPRECATED_REGISTER_RAW_SIZE.
@
text
@d1 1
a1 2
/* sparc-dependent portions of the RPC protocol
   used with a VxWorks target 
a21 1
#include <stdio.h>
a22 9

#include "vx-share/regPacket.h"
#include "frame.h"
#include "inferior.h"
#include "target.h"
#include "gdbcore.h"
#include "command.h"
#include "symtab.h"
#include "symfile.h"
d26 3
a28 13
#include <errno.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>

#ifdef _AIX			/* IBM claims "void *malloc()" not char * */
#define malloc bogon_malloc
#endif

#include <rpc/rpc.h>
#include <sys/time.h>		/* UTek's <rpc/rpc.h> doesn't #incl this */
#include <netdb.h>
d30 1
a30 8
#include "vx-share/xdr_ptrace.h"
#include "vx-share/xdr_ld.h"
#include "vx-share/xdr_rdb.h"
#include "vx-share/dbgRpcLib.h"

/* get rid of value.h if possible */
#include <value.h>
#include <symtab.h>
d32 1
a32 1
/* Flag set if target has fpu */
d34 11
a44 1
extern int target_has_fp;
d46 1
a46 1
/* sparc floating point format descriptor, from "sparc-tdep.c."  */
d48 1
a48 1
extern struct ext_format ext_format_sparc;
d55 3
a57 3
/* Read a register or registers from the VxWorks target.
   REGNO is the register to read, or -1 for all; currently,
   it is ignored.  FIXME look at regno to improve efficiency.  */
d60 1
a60 1
vx_read_register (int regno)
d62 3
a64 2
  char sparc_greg_packet[SPARC_GREG_PLEN];
  char sparc_fpreg_packet[SPARC_FPREG_PLEN];
d67 8
a74 30
  /* Get general-purpose registers.  When copying values into
     registers [], don't assume that a location in registers []
     is properly aligned for the target data type.  */

  net_read_registers (sparc_greg_packet, SPARC_GREG_PLEN, PTRACE_GETREGS);

  /* Now copy the register values into registers[].
     Note that this code depends on the ordering of the REGNUMs
     as defined in "tm-sparc.h".  */

  bcopy (&sparc_greg_packet[SPARC_R_G0],
	 &deprecated_registers[DEPRECATED_REGISTER_BYTE (G0_REGNUM)],
	 32 * SPARC_GREG_SIZE);
  bcopy (&sparc_greg_packet[SPARC_R_Y],
	 &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)], 6 * SPARC_GREG_SIZE);

  /* Now write the local and in registers to the register window spill
     area in the frame.  VxWorks does not do this for the active frame
     automatically; it greatly simplifies debugging.  */

  sp = extract_unsigned_integer (&deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)],
				 DEPRECATED_REGISTER_RAW_SIZE (SP_REGNUM));
  write_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
		16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));

  /* If the target has floating point registers, fetch them.
     Otherwise, zero the floating point register values in
     registers[] for good measure, even though we might not
     need to.  */

d76 1
a76 10
    {
      net_read_registers (sparc_fpreg_packet, SPARC_FPREG_PLEN,
			  PTRACE_GETFPREGS);
      bcopy (&sparc_fpreg_packet[SPARC_R_FP0],
	     &deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	     32 * SPARC_FPREG_SIZE);
      bcopy (&sparc_fpreg_packet[SPARC_R_FSR],
	     &deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	     1 * SPARC_FPREG_SIZE);
    }
d78 2
a79 10
    {
      memset (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	      0, 32 * SPARC_FPREG_SIZE);
      memset (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	      0, 1 * SPARC_FPREG_SIZE);
    }

  /* Mark the register cache valid.  */

  deprecated_registers_fetched ();
d82 3
a84 3
/* Store a register or registers into the VxWorks target.
   REGNO is the register to store, or -1 for all; currently,
   it is ignored.  FIXME look at regno to improve efficiency.  */
d87 1
a87 1
vx_write_register (int regno)
d89 5
a93 4
  char sparc_greg_packet[SPARC_GREG_PLEN];
  char sparc_fpreg_packet[SPARC_FPREG_PLEN];
  int in_gp_regs;
  int in_fp_regs;
d96 1
a96 7
  /* Store general purpose registers.  When copying values from
     registers [], don't assume that a location in registers []
     is properly aligned for the target data type.  */

  in_gp_regs = 1;
  in_fp_regs = 1;
  if (regno >= 0)
d98 3
a100 3
      if ((G0_REGNUM <= regno && regno <= I7_REGNUM)
	  || (Y_REGNUM <= regno && regno <= DEPRECATED_NPC_REGNUM))
	in_fp_regs = 0;
d102 1
a102 1
	in_gp_regs = 0;
d104 3
a106 1
  if (in_gp_regs)
d108 2
a109 4
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (G0_REGNUM)],
	     &sparc_greg_packet[SPARC_R_G0], 32 * SPARC_GREG_SIZE);
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)],
	     &sparc_greg_packet[SPARC_R_Y], 6 * SPARC_GREG_SIZE);
d111 5
a115 4
      net_write_registers (sparc_greg_packet, SPARC_GREG_PLEN, PTRACE_SETREGS);

      /* If this is a local or in register, or we're storing all
         registers, update the register window spill area.  */
d117 2
a118 6
      if (regno < 0 || (L0_REGNUM <= regno && regno <= I7_REGNUM))
	{
	  sp = extract_unsigned_integer (&deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)],
					 DEPRECATED_REGISTER_RAW_SIZE (SP_REGNUM));
	  write_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
			16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d122 2
a123 3
  /* Store floating point registers if the target has them.  */

  if (in_fp_regs && target_has_fp)
d125 2
a126 7
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	     &sparc_fpreg_packet[SPARC_R_FP0], 32 * SPARC_FPREG_SIZE);
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	     &sparc_fpreg_packet[SPARC_R_FSR], 1 * SPARC_FPREG_SIZE);

      net_write_registers (sparc_fpreg_packet, SPARC_FPREG_PLEN,
			   PTRACE_SETFPREGS);
@


1.15
log
@2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* remote-vxsparc.c (vx_read_register): Replace bzero with memset.
	* remote-vxmips.c (vx_read_register): Ditto.
	* remote-vx68.c (vx_read_register): Ditto.
	* gnu-nat.c (inf_validate_procs): Ditto.
@
text
@d105 1
a105 1
				 REGISTER_RAW_SIZE (SP_REGNUM));
d107 1
a107 1
		16 * REGISTER_RAW_SIZE (L0_REGNUM));
d180 1
a180 1
					 REGISTER_RAW_SIZE (SP_REGNUM));
d182 1
a182 1
			16 * REGISTER_RAW_SIZE (L0_REGNUM));
@


1.14
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_NPC_REGNUM): Deprecate NPC_REGNUM.
	* gdbarch.h, gdbarch.c: Regenerate.
	* core-sol2.c, hppa-tdep.c, lynx-nat.c, procfs.c: Update.
	* regcache.c, remote-vxsparc.c, sparc-linux-nat.c: Update.
	* sparc-nat.c, sparc-tdep.c, sparc64-tdep.c: Update.
	* sparcnbsd-tdep.c: Update.
@
text
@d127 4
a130 4
      bzero (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	     32 * SPARC_FPREG_SIZE);
      bzero (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	     1 * SPARC_FPREG_SIZE);
@


1.13
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTE): Rename REGISTER_BYTE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arm-linux-tdep.c, core-sol2.c, cris-tdep.c: Update.
	* d10v-tdep.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, irix5-nat.c, lynx-nat.c, m68knbsd-nat.c: Update.
	* mcore-tdep.c, mips-linux-tdep.c, mips-tdep.c: Update.
	* mipsv4-nat.c, mn10300-tdep.c, ns32k-tdep.c: Update.
	* ns32knbsd-nat.c, ppc-bdm.c, regcache.c, remote-sds.c: Update.
	* remote-vx68.c, remote-vxmips.c, remote-vxsparc.c: Update.
	* remote.c, rs6000-tdep.c, s390-tdep.c, sh64-tdep.c: Update.
	* sparc-nat.c, sparc-tdep.c, sun3-nat.c, v850-tdep.c: Update.
	* v850ice.c, vax-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-cisco.h, config/m68k/tm-delta68.h: Update.
	* config/pa/nm-hppah.h: Update.

2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* mi/mi-main.c: Rename REGISTER_BYTE to DEPRECATED_REGISTER_BYTE.
@
text
@d160 1
a160 1
	  || (Y_REGNUM <= regno && regno <= NPC_REGNUM))
@


1.12
log
@2003-06-01  Andrew Cagney  <cagney@@redhat.com>

	* defs.h (extract_address): Delete declaration.
	* findvar.c (extract_address): Delete function.
	* xstormy16-tdep.c (xstormy16_extract_return_value): Replace
	extract_address with the inline equivalent,
	extract_unsigned_integer.
	(xstormy16_extract_struct_value_address): Ditto.
	(xstormy16_pointer_to_address): Ditto.
	* vax-tdep.c (vax_extract_struct_value_address): Ditto.
	* v850-tdep.c (v850_push_arguments): Ditto.
	(v850_extract_return_value): Ditto.
	(v850_extract_struct_value_address): Ditto.
	* sparcnbsd-tdep.c (sparcnbsd_get_longjmp_target_32): Ditto.
	(sparcnbsd_get_longjmp_target_64): Ditto.
	* sparc-tdep.c (sparc_frame_saved_pc): Ditto.
	(get_longjmp_target): Ditto.
	* sh-tdep.c (sh_extract_struct_value_address): Ditto.
	(sh64_extract_struct_value_address): Ditto.
	(sh_push_arguments): Ditto.
	(sh64_push_arguments): Ditto.
	* remote-vxsparc.c (vx_read_register): Ditto.
	* ppc-linux-tdep.c (ppc_linux_skip_trampoline_code): Ditto.
	* ns32k-tdep.c (ns32k_extract_struct_value_address): Ditto.
	* mn10300-tdep.c (mn10300_extract_struct_value_address): Ditto.
	* mipsv4-nat.c (get_longjmp_target): Ditto.
	* mipsnbsd-tdep.c (mipsnbsd_get_longjmp_target): Ditto.
	* mips-nat.c (get_longjmp_target): Ditto.
	* mips-linux-tdep.c (mips_linux_get_longjmp_target): Ditto.
	* mcore-tdep.c (mcore_extract_struct_value_address): Ditto.
	* m68k-tdep.c (m68k_get_longjmp_target): Ditto.
	* m68hc11-tdep.c (m68hc11_extract_struct_value_address): Ditto.
	* irix5-nat.c (get_longjmp_target): Ditto.
	* irix4-nat.c (get_longjmp_target): Ditto.
	* ia64-tdep.c (generic_elf_find_global_pointer): Ditto.
	(ia64_push_arguments): Ditto.
	* hpux-thread.c (hpux_thread_store_registers): Ditto.
	* h8300-tdep.c (h8300_push_arguments): Ditto.
	(h8300_store_return_value): Ditto.
	(h8300_extract_struct_value_address): Ditto.
	* frv-tdep.c (frv_extract_struct_value_address): Ditto.
	(frv_push_arguments): Ditto.
	* avr-tdep.c (avr_pointer_to_address): Ditto.
	(avr_push_arguments): Ditto.
	* arm-tdep.c (arm_push_dummy_call): Ditto.
	(arm_get_longjmp_target): Ditto.
	* arm-linux-tdep.c (arm_linux_push_arguments): Ditto.
	* alpha-tdep.c (alpha_extract_struct_value_address): Ditto.
	(alpha_get_longjmp_target): Ditto.
@
text
@d95 1
a95 1
	 &deprecated_registers[REGISTER_BYTE (G0_REGNUM)],
d98 1
a98 1
	 &deprecated_registers[REGISTER_BYTE (Y_REGNUM)], 6 * SPARC_GREG_SIZE);
d104 1
a104 1
  sp = extract_unsigned_integer (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
d106 1
a106 1
  write_memory (sp, &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d119 1
a119 1
	     &deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d122 1
a122 1
	     &deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
d127 1
a127 1
      bzero (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d129 1
a129 1
      bzero (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
d167 1
a167 1
      bcopy (&deprecated_registers[REGISTER_BYTE (G0_REGNUM)],
d169 1
a169 1
      bcopy (&deprecated_registers[REGISTER_BYTE (Y_REGNUM)],
d179 1
a179 1
	  sp = extract_unsigned_integer (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
d181 1
a181 1
	  write_memory (sp, &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d190 1
a190 1
      bcopy (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d192 1
a192 1
      bcopy (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
@


1.11
log
@2003-04-05  Andrew Cagney  <cagney@@redhat.com>

	Eliminate FRAME_FIND_SAVED_REGS.
	* config/pa/tm-hppah.h (hppa_hpux_frame_find_saved_regs_in_sigtramp):
	Change FSR parameter to a pointer.
	* config/pa/tm-hppa64.h (FRAME_FIND_SAVED_REGS_IN_SIGTRAMP):
	Assume FSR parameter is a pointer.
	* hppa-hpux-tdep.c (hppa_hpux_frame_find_saved_regs_in_sigtramp):
	Make fsr a pointer.
	* hppa-tdep.c (hppa_frame_find_saved_regs): New function.
	(hppa_frame_saved_pc): Call hppa_frame_init_saved_regs.  Make
	saved_regs a pointer.
	(hppa_frame_saved_pc): Ditto.
	(find_dummy_frame_regs): Make frame_saved_regs a pointer
	(hppa_pop_frame): Call hppa_frame_init_saved_regs.  Make fsr a
	pointer.
	(restore_pc_queue): Make fsr a pointer.
	(hppa_frame_find_saved_regs): Make frame_saved_regs a pointer.
	(hppa_frame_chain): Make saved_regs a pointer, call
	hppa_frame_init_saved_regs.
	* sparc-tdep.c: Include "gdb_assert.h".
	(sparc_frame_find_saved_regs): Replace internal_error with
	gdb_assert.
	* remote-vxsparc.c (vx_read_register): Delete reference to
	FRAME_FIND_SAVED_REGS.
	* gdbarch.sh: Delete check for FRAME_FIND_SAVED_REGS.
	* gdbarch.h: Regenerate.
	* frame.h (DEPRECATED_FRAME_INIT_SAVED_REGS): Delete macro.
	(deprecated_get_frame_saved_regs): Delete declaration.
	(struct frame_saved_regs): Delete definition.
	* frame.c (deprecated_get_frame_saved_regs): Delete function.
	* config/pa/tm-hppa.h (hppa_frame_init_saved_regs): Declare.
	(hppa_frame_find_saved_regs): Delete declaration.
	(FRAME_FIND_SAVED_REGS): Delete macro.
	(DEPRECATED_FRAME_INIT_SAVED_REGS): Define.
	* config/i386/tm-ptx.h (FRAME_FIND_SAVED_REGS): Delete
	FRAME_FIND_SAVED_REGS in comment.
@
text
@d104 2
a105 2
  sp = extract_address (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
			REGISTER_RAW_SIZE (SP_REGNUM));
d179 2
a180 2
	  sp = extract_address (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
				REGISTER_RAW_SIZE (SP_REGNUM));
@


1.10
log
@2002-11-14  Andrew Cagney  <ac131313@@redhat.com>

	* regcache.h (deprecated_registers): Rename registers.
	* a68v-nat.c, alpha-nat.c, arch-utils.c, core-sol2.c: Update.
	* hp300ux-nat.c, hppab-nat.c, hppah-nat.c: Update.
	* hppam3-nat.c, hpux-thread.c, i386gnu-nat.c: Update.
	* ia64-aix-nat.c, ia64-linux-nat.c, ia64-tdep.c: Update.
	* irix4-nat.c, irix5-nat.c, lynx-nat.c, m68k-tdep.c: Update.
	* m68knbsd-nat.c, mips-linux-tdep.c, mipsm3-nat.c: Update.
	* mipsv4-nat.c, ns32knbsd-nat.c, ppc-bdm.c: Update.
	* ppc-sysv-tdep.c, ptx4-nat.c, regcache.c, remote-es.c: Update.
	* remote-sds.c, remote-vx68.c, remote-vxmips.c: Update.
	* remote-vxsparc.c, rs6000-tdep.c, sol-thread.c: Update.
	* sparc-nat.c, sparc-tdep.c, sun3-nat.c, symm-nat.c: Update.
	* v850ice.c: Update.
@
text
@d100 3
a102 4
  /* Now write the local and in registers to the register window
     spill area in the frame.  VxWorks does not do this for the
     active frame automatically; it greatly simplifies debugging
     (FRAME_FIND_SAVED_REGS, in particular, depends on this).  */
@


1.10.16.1
log
@Merge with mainline.
@
text
@d100 4
a103 3
  /* Now write the local and in registers to the register window spill
     area in the frame.  VxWorks does not do this for the active frame
     automatically; it greatly simplifies debugging.  */
@


1.9
log
@2002-11-07  Andrew Cagney  <ac131313@@redhat.com>

	* regcache.c (deprecated_registers_fetched): Update.
	* regcache.h (deprecated_registers_fetched): Rename
	registers_fetched.
	* remote-vxsparc.c (vx_read_register): Update.
	* remote-vxmips.c (vx_read_register): Update.
	* remote-vx68.c (vx_read_register): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* mipsm3-nat.c (fetch_inferior_registers): Update.
	* sun3-nat.c (fetch_inferior_registers): Update.
	* symm-nat.c (fetch_inferior_registers): Update.
	* ns32knbsd-nat.c (fetch_inferior_registers): Update.
	(fetch_core_registers): Update.
	(fetch_kcore_registers): Update.
	* mips-nat.c (fetch_inferior_registers): Update.
	* corelow.c (get_core_registers): Update.
	* a68v-nat.c (fetch_inferior_registers): Update.
@
text
@d95 2
a96 1
	 &registers[REGISTER_BYTE (G0_REGNUM)], 32 * SPARC_GREG_SIZE);
d98 1
a98 1
	 &registers[REGISTER_BYTE (Y_REGNUM)], 6 * SPARC_GREG_SIZE);
d105 1
a105 1
  sp = extract_address (&registers[REGISTER_BYTE (SP_REGNUM)],
d107 1
a107 1
  write_memory (sp, &registers[REGISTER_BYTE (L0_REGNUM)],
d120 2
a121 1
	     &registers[REGISTER_BYTE (FP0_REGNUM)], 32 * SPARC_FPREG_SIZE);
d123 2
a124 1
	     &registers[REGISTER_BYTE (FPS_REGNUM)], 1 * SPARC_FPREG_SIZE);
d128 4
a131 2
      bzero (&registers[REGISTER_BYTE (FP0_REGNUM)], 32 * SPARC_FPREG_SIZE);
      bzero (&registers[REGISTER_BYTE (FPS_REGNUM)], 1 * SPARC_FPREG_SIZE);
d168 1
a168 1
      bcopy (&registers[REGISTER_BYTE (G0_REGNUM)],
d170 1
a170 1
      bcopy (&registers[REGISTER_BYTE (Y_REGNUM)],
d180 1
a180 1
	  sp = extract_address (&registers[REGISTER_BYTE (SP_REGNUM)],
d182 1
a182 1
	  write_memory (sp, &registers[REGISTER_BYTE (L0_REGNUM)],
d191 1
a191 1
      bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)],
d193 1
a193 1
      bcopy (&registers[REGISTER_BYTE (FPS_REGNUM)],
@


1.8
log
@2002-10-25  Andrew Cagney  <cagney@@redhat.com>

	* complaints.h (struct deprecated_complaint): Rename `struct
	complaint'.
	* complaints.c (complain): Update.
	* remote-vx68.c, remote-vxmips.c, remote-vxsparc.c: Delete
	incorrect comment indicating that "symfile.h" was being included
	for the `struct complaint' definition.
	* remote-vx.c: Update.
	* objc-lang.c: Update.
	* xcoffread.c: Update.
	* hpread.c: Update.
	* mdebugread.c: Update.
	* stabsread.c: Update.
	* dwarf2read.c: Update.
	* dwarfread.c: Update.
	* elfread.c: Update.
	* coffread.c: Update.
	* stabsread.h: Update.
	* dbxread.c: Update.
	* buildsym.c: Update.
	* gdbtypes.c: Update.
	* macrotab.c: Update.
@
text
@d131 1
a131 1
  registers_fetched ();
@


1.7
log
@2002-04-21  David S. Miller  <davem@@redhat.com>

	* remote-vxsparc.c (vx_read_register): Fix typo, we want
	REGISTER_RAW_SIZE of SP_REGNUM not CORE_ADDR.
	(vx_write_register): Likewise.
@
text
@d33 1
a33 1
#include "symfile.h"		/* for struct complaint */
@


1.7.16.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d33 1
a33 1
#include "symfile.h"
d95 1
a95 2
	 &deprecated_registers[DEPRECATED_REGISTER_BYTE (G0_REGNUM)],
	 32 * SPARC_GREG_SIZE);
d97 1
a97 1
	 &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)], 6 * SPARC_GREG_SIZE);
d99 9
a107 8
  /* Now write the local and in registers to the register window spill
     area in the frame.  VxWorks does not do this for the active frame
     automatically; it greatly simplifies debugging.  */

  sp = extract_unsigned_integer (&deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)],
				 DEPRECATED_REGISTER_RAW_SIZE (SP_REGNUM));
  write_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
		16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d119 1
a119 2
	     &deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	     32 * SPARC_FPREG_SIZE);
d121 1
a121 2
	     &deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	     1 * SPARC_FPREG_SIZE);
d125 2
a126 4
      memset (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	      0, 32 * SPARC_FPREG_SIZE);
      memset (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	      0, 1 * SPARC_FPREG_SIZE);
d131 1
a131 1
  deprecated_registers_fetched ();
d156 1
a156 1
	  || (Y_REGNUM <= regno && regno <= DEPRECATED_NPC_REGNUM))
d163 1
a163 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (G0_REGNUM)],
d165 1
a165 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)],
d175 4
a178 4
	  sp = extract_unsigned_integer (&deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)],
					 DEPRECATED_REGISTER_RAW_SIZE (SP_REGNUM));
	  write_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
			16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d186 1
a186 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d188 1
a188 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
@


1.7.16.2
log
@Merge mainline to branch.  GDB is broken until I update cp-names.y.
@
text
@d1 2
a2 1
/* SPARC-specific portions of the RPC protocol for VxWorks.
d23 1
d25 9
d37 13
a49 3

#include "sparc-tdep.h"

d51 8
a58 1
#include "vx-share/regPacket.h"
d60 1
a60 1
#define SPARC_R_G1	(SPARC_R_G0 + SPARC_GREG_SIZE)
d62 1
a62 11
const struct sparc_gregset vxsparc_gregset =
{
  SPARC_R_PSR,			/* %psr */
  SPARC_R_PC,			/* %pc */
  SPARC_R_NPC,			/* %npc */
  SPARC_R_Y,			/* %y */
  SPARC_R_WIM,			/* %wim */
  SPARC_R_TBR,			/* %tbr */
  SPARC_R_G1,			/* %g1 */
  SPARC_R_I0			/* %l0 */
};
d64 1
a64 1
/* Flag set if target has an FPU.  */
d66 1
a66 1
extern int target_has_fp;
d73 3
a75 3
/* Read a register or registers from the VxWorks target.  REGNUM is
   the register to read, or -1 for all; currently, it is ignored.
   FIXME: Look at REGNUM to improve efficiency.  */
d78 1
a78 1
vx_read_register (int regnum)
d80 2
a81 3
  struct regcache *regcache = current_regcache;
  char gregs[SPARC_GREG_PLEN];
  char fpregs[SPARC_FPREG_PLEN];
d84 30
a113 8
  /* Get the general-purpose registers.  */
  net_read_registers (gregs, SPARC_GREG_PLEN, PTRACE_GETREGS);
  sparc32_supply_gregset (&vxsparc_gregset, regcache, -1, gregs);

  /* If the target has floating-point registers, fetch them.
     Otherwise, zero the floating-point register values in GDB's
     register cache for good measure, even though we might not need
     to.  */
d115 10
a124 1
    net_read_registers (fpregs, SPARC_FPREG_PLEN, PTRACE_GETFPREGS);
d126 10
a135 2
    memset (fpregs, 0, SPARC_FPREG_PLEN);
  sparc32_supply_fpregset (regcache, -1, fpregs);
d138 3
a140 3
/* Store a register or registers into the VxWorks target.  REGNUM is
   the register to store, or -1 for all; currently, it is ignored.
   FIXME: Look at REGNUM to improve efficiency.  */
d143 1
a143 1
vx_write_register (int regnum)
d145 4
a148 5
  struct regcache *regcache = current_regcache;
  char gregs[SPARC_GREG_PLEN];
  char fpregs[SPARC_FPREG_PLEN];
  int gregs_p = 1;
  int fpregs_p = 1;
d151 7
a157 1
  if (regnum != -1)
d159 3
a161 3
      if ((SPARC_G0_REGNUM <= regnum && regnum <= SPARC_I7_REGNUM)
	  || (SPARC32_Y_REGNUM <= regnum && regnum <= SPARC32_NPC_REGNUM))
	fpregs_p = 0;
d163 1
a163 1
	gregs_p = 0;
d165 6
d172 4
a175 5
  /* Store the general-purpose registers.  */
  if (gregs_p)
    {
      sparc32_collect_gregset (&vxsparc_gregset, regcache, -1, gregs);
      net_write_registers (gregs, SPARC_GREG_PLEN, PTRACE_SETREGS);
d177 1
a177 3
      /* Deal with the stack regs.  */
      if (regnum == -1 || regnum == SPARC_SP_REGNUM
	  || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_I7_REGNUM))
d179 4
a182 4
	  ULONGEST sp;

	  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);
	  sparc_collect_rwindow (regcache, sp, regnum);
d186 3
a188 2
  /* Store the floating-point registers if the target has them.  */
  if (fpregs_p && target_has_fp)
d190 7
a196 2
      sparc32_collect_fpregset (regcache, -1, fpregs);
      net_write_registers (fpregs, SPARC_FPREG_PLEN, PTRACE_SETFPREGS);
@


1.7.14.1
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d33 1
a33 1
#include "symfile.h"
d95 1
a95 2
	 &deprecated_registers[REGISTER_BYTE (G0_REGNUM)],
	 32 * SPARC_GREG_SIZE);
d97 1
a97 1
	 &deprecated_registers[REGISTER_BYTE (Y_REGNUM)], 6 * SPARC_GREG_SIZE);
d104 1
a104 1
  sp = extract_address (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
d106 1
a106 1
  write_memory (sp, &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d119 1
a119 2
	     &deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
	     32 * SPARC_FPREG_SIZE);
d121 1
a121 2
	     &deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
	     1 * SPARC_FPREG_SIZE);
d125 2
a126 4
      bzero (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
	     32 * SPARC_FPREG_SIZE);
      bzero (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
	     1 * SPARC_FPREG_SIZE);
d131 1
a131 1
  deprecated_registers_fetched ();
d163 1
a163 1
      bcopy (&deprecated_registers[REGISTER_BYTE (G0_REGNUM)],
d165 1
a165 1
      bcopy (&deprecated_registers[REGISTER_BYTE (Y_REGNUM)],
d175 1
a175 1
	  sp = extract_address (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
d177 1
a177 1
	  write_memory (sp, &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d186 1
a186 1
      bcopy (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d188 1
a188 1
      bcopy (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
@


1.7.14.2
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d100 4
a103 3
  /* Now write the local and in registers to the register window spill
     area in the frame.  VxWorks does not do this for the active frame
     automatically; it greatly simplifies debugging.  */
@


1.7.14.3
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d104 2
a105 2
  sp = extract_unsigned_integer (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
				 REGISTER_RAW_SIZE (SP_REGNUM));
d179 2
a180 2
	  sp = extract_unsigned_integer (&deprecated_registers[REGISTER_BYTE (SP_REGNUM)],
					 REGISTER_RAW_SIZE (SP_REGNUM));
@


1.7.14.4
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d95 1
a95 1
	 &deprecated_registers[DEPRECATED_REGISTER_BYTE (G0_REGNUM)],
d98 1
a98 1
	 &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)], 6 * SPARC_GREG_SIZE);
d104 1
a104 1
  sp = extract_unsigned_integer (&deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)],
d106 1
a106 1
  write_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
d119 1
a119 1
	     &deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d122 1
a122 1
	     &deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
d127 1
a127 1
      bzero (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d129 1
a129 1
      bzero (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
d160 1
a160 1
	  || (Y_REGNUM <= regno && regno <= DEPRECATED_NPC_REGNUM))
d167 1
a167 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (G0_REGNUM)],
d169 1
a169 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)],
d179 1
a179 1
	  sp = extract_unsigned_integer (&deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)],
d181 1
a181 1
	  write_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
d190 1
a190 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d192 1
a192 1
      bcopy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
@


1.7.14.5
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d105 1
a105 1
				 DEPRECATED_REGISTER_RAW_SIZE (SP_REGNUM));
d107 1
a107 1
		16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d127 4
a130 4
      memset (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	      0, 32 * SPARC_FPREG_SIZE);
      memset (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	      0, 1 * SPARC_FPREG_SIZE);
d180 1
a180 1
					 DEPRECATED_REGISTER_RAW_SIZE (SP_REGNUM));
d182 1
a182 1
			16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
@


1.7.14.6
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d1 2
a2 1
/* SPARC-specific portions of the RPC protocol for VxWorks.
d23 1
d25 9
d37 13
a49 3

#include "sparc-tdep.h"

d51 8
a58 1
#include "vx-share/regPacket.h"
d60 1
a60 1
#define SPARC_R_G1	(SPARC_R_G0 + SPARC_GREG_SIZE)
d62 1
a62 11
const struct sparc_gregset vxsparc_gregset =
{
  SPARC_R_PSR,			/* %psr */
  SPARC_R_PC,			/* %pc */
  SPARC_R_NPC,			/* %npc */
  SPARC_R_Y,			/* %y */
  SPARC_R_WIM,			/* %wim */
  SPARC_R_TBR,			/* %tbr */
  SPARC_R_G1,			/* %g1 */
  SPARC_R_I0			/* %l0 */
};
d64 1
a64 1
/* Flag set if target has an FPU.  */
d66 1
a66 1
extern int target_has_fp;
d73 3
a75 3
/* Read a register or registers from the VxWorks target.  REGNUM is
   the register to read, or -1 for all; currently, it is ignored.
   FIXME: Look at REGNUM to improve efficiency.  */
d78 1
a78 1
vx_read_register (int regnum)
d80 2
a81 3
  struct regcache *regcache = current_regcache;
  char gregs[SPARC_GREG_PLEN];
  char fpregs[SPARC_FPREG_PLEN];
d84 30
a113 8
  /* Get the general-purpose registers.  */
  net_read_registers (gregs, SPARC_GREG_PLEN, PTRACE_GETREGS);
  sparc32_supply_gregset (&vxsparc_gregset, regcache, -1, gregs);

  /* If the target has floating-point registers, fetch them.
     Otherwise, zero the floating-point register values in GDB's
     register cache for good measure, even though we might not need
     to.  */
d115 10
a124 1
    net_read_registers (fpregs, SPARC_FPREG_PLEN, PTRACE_GETFPREGS);
d126 10
a135 2
    memset (fpregs, 0, SPARC_FPREG_PLEN);
  sparc32_supply_fpregset (regcache, -1, fpregs);
d138 3
a140 3
/* Store a register or registers into the VxWorks target.  REGNUM is
   the register to store, or -1 for all; currently, it is ignored.
   FIXME: Look at REGNUM to improve efficiency.  */
d143 1
a143 1
vx_write_register (int regnum)
d145 4
a148 5
  struct regcache *regcache = current_regcache;
  char gregs[SPARC_GREG_PLEN];
  char fpregs[SPARC_FPREG_PLEN];
  int gregs_p = 1;
  int fpregs_p = 1;
d151 7
a157 1
  if (regnum != -1)
d159 3
a161 3
      if ((SPARC_G0_REGNUM <= regnum && regnum <= SPARC_I7_REGNUM)
	  || (SPARC32_Y_REGNUM <= regnum && regnum <= SPARC32_NPC_REGNUM))
	fpregs_p = 0;
d163 1
a163 1
	gregs_p = 0;
d165 6
d172 4
a175 5
  /* Store the general-purpose registers.  */
  if (gregs_p)
    {
      sparc32_collect_gregset (&vxsparc_gregset, regcache, -1, gregs);
      net_write_registers (gregs, SPARC_GREG_PLEN, PTRACE_SETREGS);
d177 1
a177 3
      /* Deal with the stack regs.  */
      if (regnum == -1 || regnum == SPARC_SP_REGNUM
	  || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_I7_REGNUM))
d179 4
a182 4
	  ULONGEST sp;

	  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);
	  sparc_collect_rwindow (regcache, sp, regnum);
d186 3
a188 2
  /* Store the floating-point registers if the target has them.  */
  if (fpregs_p && target_has_fp)
d190 7
a196 2
      sparc32_collect_fpregset (regcache, -1, fpregs);
      net_write_registers (fpregs, SPARC_FPREG_PLEN, PTRACE_SETFPREGS);
@


1.7.6.1
log
@merge from mainline
@
text
@d33 1
a33 1
#include "symfile.h"
@


1.6
log
@Create new file regcache.h.  Update all uses.
@
text
@d105 1
a105 1
			REGISTER_RAW_SIZE (CORE_ADDR));
d176 1
a176 1
				REGISTER_RAW_SIZE (CORE_ADDR));
@


1.5
log
@* ppc-bdm.c (#include <signal.h>): Removed.
* remote-array.c: Likewise.
* remote-bug.c: Likewise.
* remote-e7000.c: Likewise.
* remote-mips.c: Likewise.
* remote-os9k.c: Likewise.
* remote-st.c: Likewise.
* remote-udi.c: Likewise.
* remote-vx29k.c: Likewise.
* remote-vx68.c: Likewise.
* remote-vx960.c: Likewise.
* remote-vxmips.c: Likewise.
* remote-vxsparc.c: Likewise.
@
text
@d34 1
@


1.4
log
@* monitor.c (#include "gdb_wait.h"): Removed.
* ocd.c: Likewise.
* ppc-bdm.c: Likewise.
* remote-adapt.c: Likewise.
* remote-array.c: Likewise.
* remote-bug.c: Likewise.
* remote-e7000.c: Likewise.
* remote-eb.c: Likewise.
* remote-es.c: Likewise.
* remote-mips.c: Likewise.
* remote-mm.c: Likewise.
* remote-nindy.c: Likewise.
* remote-os9k.c: Likewise.
* remote-rdi.c: Likewise.
* remote-rdp.c: Likewise.
* remote-sds.c: Likewise.
* remote-sim.c: Likewise.
* remote-st.c: Likewise.
* remote-udi.c: Likewise.
* remote-vx.c: Likewise.
* remote-vx29k.c: Likewise.
* remote-vx68.c: Likewise.
* remote-vx960.c: Likewise.
* remote-vxmips.c: Likewise.
* remote-vxsparc.c: Likewise.
* remote.c: Likewise.
* ser-pipe.c: Likewise.
* ser-unix.c: Likewise.
* Makefile.in: Updated dependencies.
-------------------------------------------------------------------
@
text
@a36 1
#include <signal.h>
@


1.3
log
@Protoization.
@
text
@a28 1
#include "gdb_wait.h"
@


1.2
log
@Replace ../include/wait.h with gdb_wait.h.
@
text
@d79 1
a79 2
vx_read_register (regno)
     int regno;
d140 1
a140 2
vx_write_register (regno)
     int regno;
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
Contributed by Wind River Systems.
d6 1
a6 1
This file is part of GDB.
d8 14
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d26 1
a26 1
#include "vx-share/regPacket.h"  
d29 1
a29 1
#include "wait.h"
d44 1
a44 1
#ifdef _AIX                     /* IBM claims "void *malloc()" not char * */
d106 2
a107 2
  sp = extract_address (&registers[REGISTER_BYTE (SP_REGNUM)], 
	REGISTER_RAW_SIZE (CORE_ADDR));
d119 3
a121 3
                          PTRACE_GETFPREGS);
      bcopy (&sparc_fpreg_packet[SPARC_R_FP0], 
             &registers[REGISTER_BYTE (FP0_REGNUM)], 32 * SPARC_FPREG_SIZE);
d126 1
a126 1
    { 
d159 1
a159 1
          || (Y_REGNUM <= regno && regno <= NPC_REGNUM))
d177 3
a179 3
        {
  	  sp = extract_address (&registers[REGISTER_BYTE (SP_REGNUM)], 
		REGISTER_RAW_SIZE (CORE_ADDR));
d189 1
a189 1
      bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)], 
d191 1
a191 1
      bcopy (&registers[REGISTER_BYTE (FPS_REGNUM)], 
d195 1
a195 1
                           PTRACE_SETFPREGS);
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   Contributed by Wind River Systems.
d6 1
a6 1
   This file is part of GDB.
d8 13
a20 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d25 1
a25 1
#include "vx-share/regPacket.h"
d43 1
a43 1
#ifdef _AIX			/* IBM claims "void *malloc()" not char * */
d105 2
a106 2
  sp = extract_address (&registers[REGISTER_BYTE (SP_REGNUM)],
			REGISTER_RAW_SIZE (CORE_ADDR));
d118 3
a120 3
			  PTRACE_GETFPREGS);
      bcopy (&sparc_fpreg_packet[SPARC_R_FP0],
	     &registers[REGISTER_BYTE (FP0_REGNUM)], 32 * SPARC_FPREG_SIZE);
d125 1
a125 1
    {
d158 1
a158 1
	  || (Y_REGNUM <= regno && regno <= NPC_REGNUM))
d176 3
a178 3
	{
	  sp = extract_address (&registers[REGISTER_BYTE (SP_REGNUM)],
				REGISTER_RAW_SIZE (CORE_ADDR));
d188 1
a188 1
      bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)],
d190 1
a190 1
      bcopy (&registers[REGISTER_BYTE (FPS_REGNUM)],
d194 1
a194 1
			   PTRACE_SETFPREGS);
@

