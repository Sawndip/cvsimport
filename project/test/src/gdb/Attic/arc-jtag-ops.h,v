head	1.1;
access;
symbols
	arc-sim-20090309:1.1.2.1
	arc-insight_6_8-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2009.03.09.21.07.40;	author amylaar;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2009.03.09.21.07.40;	author amylaar;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2009.09.11.04.45.44;	author amylaar;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file arc-jtag-ops.h was initially added on branch arc-insight_6_8-branch.
@
text
@@


1.1.2.1
log
@Check in ARCompact simulator.  A valid configuration is arc-elf.
This is not quite finished and has most likely a few files that are
obsolete & not used, but it's good enough to run gcc regression tests.
@
text
@a0 62
/* Target dependent code for ARC700, for GDB, the GNU debugger.

   Copyright 2005 Free Software Foundation, Inc.

   Contributed by Codito Technologies Pvt. Ltd. (www.codito.com)

   Authors: 
      Sameer Dhavale <sameer.dhavale@@codito.com>
      Soam Vasani <soam.vasani@@codito.com>

   This file is part of GDB.
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
*/


#define ARC_NR_CORE_REGS        64
#define MAX_ARC700_REG_SIZE     4
#define JTAG_READ_FAILURE 0
#define JTAG_WRITE_FAILURE 0
enum arc_jtag_status
  {
    JTAG_OPENED,
    JTAG_CLOSED, 
    JTAG_RUNNING
  };

struct jtag_ops{
  char *name;
  void (*jtag_open) (void);
  void (*jtag_close) (void);
  int (*jtag_memory_write) (unsigned int, unsigned int *, int);
  int (*jtag_memory_chunk_write) (unsigned int, unsigned int *, int);
  int (*jtag_memory_read) (unsigned int, unsigned int *, int);
  int (*jtag_memory_chunk_read) (unsigned int, unsigned int *, int);
  int (*jtag_read_aux_reg) (unsigned int, unsigned int *);
  int (*jtag_write_aux_reg) (unsigned int, unsigned int);
  int (*jtag_read_core_reg) (unsigned int, unsigned int *);
  int (*jtag_write_core_reg) (unsigned int, unsigned int);
  void (*jtag_wait) (void);
  void (*jtag_reset_board) (void);
  enum arc_jtag_status jtag_status;
  int arc_jtag_state_machine_debug;
};


#define IS_ARC700	(arc_get_architecture() == ARC700)
#define IS_ARC600	(arc_get_architecture() == ARC600)
#define IS_A5		(arc_get_architecture() == A5)
#define IS_A4		(arc_get_architecture() == A4)
@


1.1.2.2
log
@gdb/insight for ARCompact (from Richard Stuckey)
@
text
@d1 1
a1 1
/* Target dependent code for ARC processor family, for GDB, the GNU debugger.
d3 1
a3 1
   Copyright 2005, 2008, 2009 Free Software Foundation, Inc.
d7 3
a9 4
   Authors:
      Sameer Dhavale  <sameer.dhavale@@codito.com>
      Soam Vasani     <soam.vasani@@codito.com>
      Richard Stuckey <richard.stuckey@@arc.com>
d12 1
a12 1

d15 1
a15 1
   the Free Software Foundation; either version 3 of the License, or
d17 1
a17 1

d22 1
a22 1

d24 3
a26 62
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/******************************************************************************/
/*                                                                            */
/* Outline:                                                                   */
/*     This header file defines the JTAG interface to an ARC processor.       */
/*                                                                            */
/*     Operations are provided for:                                           */
/*        1) controlling the interface                                        */
/*        2) reading/writing the core registers of the processor              */
/*        3) reading/writing the auxiliary registers of the processor         */
/*        4) reading/writing single words in the target memory                */
/*        5) reading/writing blocks in the target memory                      */
/*                                                                            */
/*     The addresses specified for the memory word read/write operations must */
/*     be word-aligned.  Those specified for the memory block read/write      */
/*     operations may have any alignment; these operations may transfer an    */
/*     arbitrary number of bytes.                                             */
/*                                                                            */
/* Usage:                                                                     */
/*     The module exports a global variable arc_jtag_ops which holds pointers */
/*     to the functions for the operations, as well as some state information.*/
/*     This variable is initialized by the module's initialization function   */
/*     which must be called before any use is made of the module (N.B. the    */
/*     call to this function is generated by the gdb build mechanism, so this */
/*     function should not be explicitly called).                             */
/*                                                                            */
/*     The variable arc_jtag_ops.retry_count controls how many repeated       */
/*     attempts are made if a read/write operation fail; this variable is     */
/*     initially set to 50.                                                   */
/*                                                                            */
/* Debugging Facilities:                                                      */
/*     If the variable arc_jtag_ops.state_machine_debug is set to TRUE then   */
/*     trace information will be output.                                      */
/*                                                                            */
/* Host/Target Byte Order:                                                    */
/*     The register contents returned by the read/write aux/core register     */
/*     functions, or supplied to them, are in little-endian byte order.       */
/*                                                                            */
/*     The memory contents returned by the read/write word/chunk/pattern      */
/*     functions, or supplied to them, are in host byte order; the functions  */
/*     perform whatever byte-swapping is required by the endiannness of the   */
/*     target.                                                                */
/*                                                                            */
/******************************************************************************/

#ifndef ARC_JTAG_OPS
#define ARC_JTAG_OPS

/* ARC header files */
#include "arc-support.h"


#define ARC_TARGET_NAME     "arcjtag"


typedef enum
{
    JTAG_SUCCESS,
    JTAG_READ_FAILURE,
    JTAG_WRITE_FAILURE
} JTAG_OperationStatus;
d29 6
a34 2
typedef enum
{
d36 27
a62 35
    JTAG_CLOSED
} JTAG_Status;


typedef struct
{
    JTAG_Status  status;
    unsigned int retry_count;
    Boolean      state_machine_debug;

    Boolean (*open)        (ARC_RegisterNumber mem_subsys);
    void    (*close)       (void);
    void    (*reset)       (void);
    void    (*reset_board) (void);
    void    (*check_open)  (void);

    /* These operations return the number of bytes read/written.  */
    unsigned int (*memory_read_word)     (ARC_Address address, ARC_Word *data);                          /* single word.  */
    unsigned int (*memory_write_word)    (ARC_Address address, ARC_Word  data);                          /* single word.  */
    unsigned int (*memory_read_chunk)    (ARC_Address address, ARC_Byte *data,    unsigned int words);   /* block.        */
    unsigned int (*memory_write_chunk)   (ARC_Address address, ARC_Byte *data,    unsigned int words);   /* block.        */
    unsigned int (*memory_write_pattern) (ARC_Address address, ARC_Word  pattern, unsigned int words);   /* block.        */

    JTAG_OperationStatus (*read_aux_reg)   (ARC_RegisterNumber reg, ARC_RegisterContents *contents);
    JTAG_OperationStatus (*write_aux_reg)  (ARC_RegisterNumber reg, ARC_RegisterContents  contents);
    JTAG_OperationStatus (*read_core_reg)  (ARC_RegisterNumber reg, ARC_RegisterContents *contents);
    JTAG_OperationStatus (*write_core_reg) (ARC_RegisterNumber reg, ARC_RegisterContents  contents);
} JTAG_Operations;


extern JTAG_Operations arc_jtag_ops;


#endif /* ARC_JTAG_OPS */
/******************************************************************************/
@


