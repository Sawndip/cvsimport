head	1.1;
access;
symbols
	nickrob-async-20060513-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2006.05.12.07.40.23;	author nickrob;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.05.12.07.40.23;	author nickrob;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.08.28.06.11.57;	author nickrob;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.08.31.01.04.58;	author nickrob;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.09.02.09.41.46;	author nickrob;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.09.05.10.09.48;	author nickrob;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2006.09.10.13.05.34;	author nickrob;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2006.09.15.22.49.40;	author nickrob;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2006.09.17.12.26.02;	author nickrob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file async-nat-inferior.c was initially added on branch nickrob-async-20060513-branch.
@
text
@@


1.1.2.1
log
@2006-05-13    Changes based on Apple GDB (CVS repository 5th Sept 2005)

	* async-nat-inferior.c, async-nat-inferior.h,
	* async-nat-sigthread.c, async-nat-sigthread.h: New files

	* linux-nat.c: Include async-nat-inferior.h.
	(linux_nat_wait): Add extra argument.  If target_can_async_p
	do something completely different.

	* interps.h (interp_set, interp_set_quiet): New externs.

	* interps.c (interp_set): Make asynchronous.
	(interp_set_quiet): Don't make static.
	(current_interp_command_loop): Call functions with new arguments.

	* target.h (target_wait): Add extra argument.
	(gdb_override_async, gdb_set_async_override) New externs.
	(target_can_async_p): Make conditional on gdb_override_async.

	* target.c (gdb_override_async): New variable.
	(gdb_set_async_override, do_restore_target_async_mask):
	New functions.
	(debug_to_wait): Add extra argument.

	* linux-thread-db.c (thread_db_wait): Add extra argument.

	* wrapper.h (safe_execute_command): Declare structure.

	* top.c (*deprecated_target_wait_hook): Add extra argument.
	(read_command_file): Make asynchronous.

	* remote.c (remote_wait, remote_async_wait): Add extra argument.

	* infrun.c: Include event-top.h
	(wait_for_inferior, fetch_inferior_event): Add extra argument to
	target_wait.
	(proceed): Set target_executing = 0.
	(handle_inferior_event): Call async_disable_stdin if async.

	* inf-ptrace.c: Include inf-loop.h, async-nat-inferior.h.
	(inf_ptrace_him): Create a signal thread.
	(inf_ptrace_wait): Add extra argument to target_wait.

	* inf-loop.c (inferior_event_handler, complete_execution):
	Changes for asynchronous operation (copied verbatim).

	* inf-child.c: Include async-nat-inferior.h.
	(inf_child_target): Use methods async_terminal_inferior
	and async_terminal_ours.

	* i386-linux-nat.c: Include inf-loop.h, async-nat-inferior.h.
	(i386_linux_resume): Call gdb_process_events and then
	async methods.

	* exec.c: Include event-loop.h, async-nat-inferior.h.
	(async_file_handler, standard_async, standard_is_async_p)
	(standard_can_async_p): New functions.
	(init_exec_ops): Initialise above methods.

	* event-top.h (cli_command_loop): Make argument void*.

	* event-top.c (display_gdb_prompt, async_enable_stdin)
	(async_disable_stdin, handle_sigint, async_request_quit)
	(gdb_setup_readline, _initialize_event_loop):
	Changes for asynchronous operation (copied verbatim).
	(cli_command_loop): Make argument void*.

	* event-loop.h (gdb_client_data): Move typedef to defs.h.
	(gdb_create_event): Declare.
	(event_handler_func): Move typedef from event-loop.c.

	* event-loop.c (use_poll): Set to 0.
	(gdb_queue_event, gdb_create_event): New functions.
	(async_queue_event): Don't make static.
	(create_file_event): Use gdb_create_event.
	(gdb_event): Change component from int to void*.
	(process_event, handle_file_event, handle_timer_event):
	Change according to gdb_event.
	(event_handler_func): Move typedef to event-loop.c.

	* defs.h: (gdb_mi_run_status, event_loop_p): New externs.
	(gdb_client_data): Move typedef from event-loop.h.
	(*deprecated_command_loop_hook): Make argument void*.
	(*deprecated_target_wait_hook): Add argument.

	* cli-out.h (cli_quoted_out_new): Declare.

	* cli-out.c (cli_quoted_out_new): New function.
	Include mi/mi-console.h.

	* cli/cli-interp.c: Include inferior.h, mi/mi-console.h.
	(safe_execute_command): Make static.
	(cli_interpreter_resume, cli_interpreter_exec):
	Make asynchronous.
	(cli_quoted_interpreter_resume): New function.
	(_initialize_cli_interp): Add li_command_loop to procs.
	Initialize the console-quoted interpreter.

	* tui/tui-hooks.c (tui_target_wait_hook): Add extra argument.

	* mi/mi-main.h (mi_dont_register_continuation)
	(current_command_token,  mi_interp, mi_interpreter_exec_continuation)
	(mi_continuation_arg): New externs.
	(mi_setup_continuation_arg): Declare.

	* mi/mi-main.c: Include wrapper.h.
	(struct mi_continuation_arg): New structure.
	(mi_interpreter_exec_continuation): Move to mi-interp.c.
	(mi_execute_async_cli_command)
	(mi_exec_async_cli_cmd_continuation): Make asynchronous.
	(mi_setup_continuation_arg): New function.

	* mi/mi-interp.c (mi_interpreter_exec_continuation):
	Move from mi-main.c
	(mi_cmd_interpreter_exec): Switch interpreters.  Make
	asynchronous.
	(mi1_command_loop, mi2_command_loop, mi3_command_loop):
	Make argument void*.

	* Makefile.in (async_nat_inferior_h, async_nat_sigthread_h):
	New variables.
	(gdb$(EXEEXT), $(TUI)$(EXEEXT)): Link with libpthread.
	(async-nat-inferior.o, async-nat-sigthread.o): New rules.
	(COMMON_OBS): Add above object files.
	(exec.o, i386-linux-nat.o, inf-ptrace.o, linux-nat.o):
	Update dependencies.

2006-05-13  Nick Roberts  <nickrob@@snap.net.nz>

	* main.c: (event_loop_p): Re-instate variable.
	(captured_main): Re-instate async/noasync option.
	(print_gdb_help): Describe option again.

	* exec.c(init_exec_ops): Only initialise async methods with async
	option.

	* inf-ptrace.c (inf_ptrace_him): Only reate a signal thread with
	async option.

	* README.async, TODO.async, PROBLEMS.async: New files.
@
text
@a0 604
/* Async support for GDB, the GNU debugger.
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2004
   Free Software Foundation, Inc.

   Contributed by Apple Computer, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "top.h"
#include "inferior.h"
#include "target.h"
#include "symfile.h"
#include "symtab.h"
#include "objfiles.h"
#include "gdbcmd.h"
#include "gdbcore.h"
#include "gdbthread.h"
#include "regcache.h"
#include "environ.h"
#include "event-top.h"
#include "inf-loop.h"
#include "gdb_stat.h"
#include "exceptions.h"

#include "bfd.h"

#include <sys/ptrace.h>
#include <sys/signal.h>
#include <setjmp.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <ctype.h>
#include <sys/param.h>
#include <sys/sysctl.h>

#include "async-nat-inferior.h"
/* classic-inferior-support */
//#include "macosx-nat.h"
//#include "macosx-nat-inferior-util.h"

#ifndef EXC_SOFT_SIGNAL
#define EXC_SOFT_SIGNAL 0
#endif

extern int standard_is_async_p (void);
extern int standard_can_async_p (void);

extern bfd *exec_bfd;

gdb_inferior_status *gdb_status = NULL;

int inferior_ptrace_flag = 1;
int inferior_ptrace_on_attach_flag = 1;
int inferior_bind_exception_port_flag = 1;
int inferior_handle_exceptions_flag = 1;
int inferior_handle_all_events_flag = 1;

enum gdb_source_type
{
  NEXT_SOURCE_NONE = 0x0,
  NEXT_SOURCE_EXCEPTION = 0x1,
  NEXT_SOURCE_SIGNAL = 0x2,
  NEXT_SOURCE_CFM = 0x4,
  NEXT_SOURCE_ALL = 0x7
};

struct gdb_pending_event
{
  enum gdb_source_type type;
  unsigned char *buf;
  struct gdb_pending_event *next;
};

struct gdb_pending_event *pending_event_chain, *pending_event_tail;

static enum gdb_source_type gdb_fetch_event (struct
                                                   gdb_inferior_status
                                                   *inferior,
                                                   unsigned char *buf,
                                                   size_t len,
                                                   unsigned int flags,
                                                   int timeout);

static int gdb_service_event (enum gdb_source_type source,
                                 unsigned char *buf,
                                 struct target_waitstatus *status);

static void gdb_handle_signal (gdb_signal_thread_message *msg,
			       struct target_waitstatus *status);

static void gdb_add_to_pending_events (enum gdb_source_type,
                                          unsigned char *buf);

static void gdb_pending_event_handler (void *data);

void gdb_clear_pending_events ();

static void gdb_inferior_reset (gdb_inferior_status *s);

static void gdb_inferior_destroy (gdb_inferior_status *s);

static void gdb_handle_signal (gdb_signal_thread_message *msg,
			       struct target_waitstatus *status)
{
  //CHECK_FATAL (gdb_status != NULL);

  //CHECK_FATAL (gdb_status->attached_in_ptrace);
  //CHECK_FATAL (!gdb_status->stopped_in_ptrace);
  /* CHECK_FATAL (! gdb_status->stopped_in_softexc); */

  /* if (inferior_debug_flag)
    {
      gdb_signal_thread_debug_status (stderr, msg->status);
      } */

  if (msg->pid != gdb_status->pid)
    {
      warning ("gdb_handle_signal: signal message was for pid %d, "
               "not for inferior process (pid %d)\n",
               msg->pid, gdb_status->pid);
      return;
    }

  if (WIFEXITED (msg->status))
    {
      status->kind = TARGET_WAITKIND_EXITED;
      status->value.integer = WEXITSTATUS (msg->status);
      return;
    }

  if (!WIFSTOPPED (msg->status))
    {
      status->kind = TARGET_WAITKIND_SIGNALLED;
      status->value.sig = target_signal_from_host (WTERMSIG (msg->status));
      return;
    }

  gdb_status->stopped_in_ptrace = 1;

  //prepare_threads_after_stop (gdb_status);

  status->kind = TARGET_WAITKIND_STOPPED;
  status->value.sig = target_signal_from_host (WSTOPSIG (msg->status));
}

static void
gdb_add_to_port_set (struct gdb_inferior_status *inferior,
                        fd_set * fds, int flags)
{
  FD_ZERO (fds);

  if ((flags & NEXT_SOURCE_SIGNAL)
      && inferior->signal_status.receive_fd > 0)
    {
      FD_SET (inferior->signal_status.receive_fd, fds);
    }
}

/* TIMEOUT is either -1, 0, or greater than 0.
   For 0, check if there is anything to read, but don't block.
   For -1, block until there is something to read.
   For >0, block at least the specified number of microseconds, or until there
   is something to read.
   The kernel doesn't give better than ~1HZ (0.01 sec) resolution, so
   don't use this as a high accuracy timer. */

static enum gdb_source_type
gdb_fetch_event (struct gdb_inferior_status *inferior,
                    unsigned char *buf, size_t len,
                    unsigned int flags, int timeout)
{
  fd_set fds;
  int fd, ret;
  struct timeval tv;

  //  CHECK_FATAL (len >= sizeof (gdb_signal_thread_message));

  tv.tv_sec = 0;
  tv.tv_usec = timeout;

  gdb_add_to_port_set (inferior, &fds, flags);

  for (;;)
    {
      if (timeout == -1)
        {
          ret = select (FD_SETSIZE, &fds, NULL, NULL, NULL);
        }
      else
        {
          ret = select (FD_SETSIZE, &fds, NULL, NULL, &tv);
        }
      if ((ret < 0) && (errno == EINTR))
        {
          continue;
        }
      if (ret < 0)
        {
          internal_error (__FILE__, __LINE__, "unable to select: %s",
                          strerror (errno));
        }
      if (ret == 0)
        {
          return NEXT_SOURCE_NONE;
        }
      break;
    }

  fd = inferior->signal_status.receive_fd;
  if (fd > 0 && FD_ISSET (fd, &fds))
    {
      read (fd, buf, sizeof (gdb_signal_thread_message));
      return NEXT_SOURCE_SIGNAL;
    }

  return NEXT_SOURCE_NONE;
}

/* This takes the data from an event and puts it on the tail of the
   "pending event" chain. */

static void
gdb_add_to_pending_events (enum gdb_source_type type,
                              unsigned char *buf)
{
  struct gdb_pending_event *new_event;

  new_event = (struct gdb_pending_event *)
    xmalloc (sizeof (struct gdb_pending_event));

  new_event->type = type;

  if (type == NEXT_SOURCE_SIGNAL)
    {
      gdb_signal_thread_message *mssg;
      mssg = (gdb_signal_thread_message *)
        xmalloc (sizeof (gdb_signal_thread_message));
      memcpy (mssg, buf, sizeof (gdb_signal_thread_message));
      /*inferior_debug (1,
	"gdb_add_to_pending_events: adding a signal event to the pending events.\n"); */
      new_event->buf = (void *) mssg;
    }

  new_event->next = NULL;

  if (pending_event_chain == NULL)
    {
      pending_event_chain = new_event;
      pending_event_tail = new_event;
    }
  else
    {
      pending_event_tail->next = new_event;
      pending_event_tail = new_event;
    }
}

void
gdb_clear_pending_events ()
{
  struct gdb_pending_event *event_ptr = pending_event_chain;

  while (event_ptr != NULL)
    {
      pending_event_chain = event_ptr->next;
      xfree (event_ptr->buf);
      xfree (event_ptr);
      event_ptr = pending_event_chain;
    }
}

/* This extracts the top of the pending event chain and posts a gdb event
   with its content to the gdb event queue.  Returns 0 if there were no
   pending events to be posted, 1 otherwise. */

int
gdb_post_pending_event (void)
{
  struct gdb_pending_event *event;

  if (pending_event_chain == NULL)
    {
      //inferior_debug (1, "gdb_post_pending_event: no events to post\n");
      return 0;
    }
  else
    {
      event = pending_event_chain;
      pending_event_chain = pending_event_chain->next;
      if (pending_event_chain == NULL)
        pending_event_tail = NULL;

      /*inferior_debug (1,
	"gdb_post_pending_event: consuming event off queue\n"); */
      gdb_queue_event (gdb_pending_event_handler, (void *) event, HEAD);

      return 1;
    }
}

static void
gdb_pending_event_handler (void *data)
{
  //inferior_debug (1, "Called in gdb_pending_event_handler\n");
  async_client_callback (INF_REG_EVENT, data);
}

static int
gdb_service_event (enum gdb_source_type source,
                      unsigned char *buf, struct target_waitstatus *status)
{
 if (source == NEXT_SOURCE_SIGNAL)
    {
      // inferior_debug (1, "gdb_service_events: got signal message\n");
      gdb_handle_signal ((gdb_signal_thread_message *) buf, status);
      //      CHECK_FATAL (status->kind != TARGET_WAITKIND_SPURIOUS);
      if (!inferior_handle_all_events_flag)
        {
          return 1;
        }
    }
  else
    {
      error ("got message from unknown source: 0x%08x\n", source);
      return 0;
    }
  return 1;
}

/* This drains the event sources.  The first event found is directly
   handled.  The rest are placed on the pending events queue, to be
   handled the next time that the inferior is "run".

   Returns: The number of events found. */

int
gdb_process_events (struct gdb_inferior_status *inferior,
                       struct target_waitstatus *status,
                       int timeout, int service_first_event)
{
  enum gdb_source_type source;
  unsigned char buf[1024];
  int event_count;

  //  CHECK_FATAL (status->kind == TARGET_WAITKIND_SPURIOUS);

  source = gdb_fetch_event (inferior, buf, sizeof (buf),
                               NEXT_SOURCE_ALL, timeout);
  if (source == NEXT_SOURCE_NONE)
    {
      return 0;
    }

  event_count = 1;

  if (service_first_event)
    {
      if (gdb_service_event (source, buf, status) == 0)
        return 0;
    }
  else
    {
      gdb_add_to_pending_events (source, buf);
    }

  for (;;)
    {
      source = gdb_fetch_event (inferior, buf, sizeof (buf),
                                   NEXT_SOURCE_ALL, 0);
      if (source == NEXT_SOURCE_NONE)
        {
          break;
        }
      else
        {
          event_count++;

          /* Stuff the remaining events onto the pending_events queue.
             These will be dispatched when we run again. */
          /* PENDING_EVENTS */
          gdb_add_to_pending_events (source, buf);
        }
    }

  /*inferior_debug (2,
          "gdb_process_events: returning with (status->kind == %d)\n",
	  status->kind); */
  return event_count;
}

ptid_t
gdb_process_pending_event (struct gdb_inferior_status *ns,
                              struct target_waitstatus *status,
                              gdb_client_data client_data)
{
  struct gdb_pending_event *event
    = (struct gdb_pending_event *) client_data;

  //inferior_debug (1, "Processing pending event type: %d\n", event->type);
  gdb_service_event (event->type, (unsigned char *) event->buf, status);

  return ptid_build (gdb_status->pid, 0, gdb_status->last_thread);
}

void
gdb_create_inferior (struct gdb_inferior_status *inferior,  int pid)
{
  //  CHECK_FATAL (inferior != NULL);

  gdb_inferior_destroy (inferior);
  gdb_inferior_reset (inferior);

  inferior->pid = pid;

  inferior->attached_in_ptrace = 0;
  inferior->stopped_in_ptrace = 0;
  inferior->stopped_in_softexc = 0;

  inferior->suspend_count = 0;
}

static int remote_async_terminal_ours_p = 1;
static void (*ofunc) (int);
static PTR sigint_remote_twice_token;
static PTR sigint_remote_token;

static void remote_interrupt_twice (int signo);
static void remote_interrupt (int signo);
static void handle_remote_sigint_twice (int sig);
static void handle_remote_sigint (int sig);
static void async_remote_interrupt_twice (gdb_client_data arg);
static void async_remote_interrupt (gdb_client_data arg);

static void
interrupt_query (void)
{
  target_terminal_ours ();

  if (query ("Interrupted while waiting for the program.\n\
Give up (and stop debugging it)? "))
    {
      target_mourn_inferior ();
      deprecated_throw_reason (RETURN_QUIT);
    }

  target_terminal_inferior ();
}

static void
remote_interrupt_twice (int signo)
{
  signal (signo, ofunc);
  interrupt_query ();
  signal (signo, remote_interrupt);
}

static void
remote_interrupt (int signo)
{
  signal (signo, remote_interrupt_twice);
  target_stop ();
}

static void
handle_remote_sigint_twice (int sig)
{
  signal (sig, handle_sigint);
  sigint_remote_twice_token =
    create_async_signal_handler (inferior_event_handler_wrapper, NULL);
  mark_async_signal_handler_wrapper (sigint_remote_twice_token);
}

static void
handle_remote_sigint (int sig)
{
  signal (sig, handle_remote_sigint_twice);
  sigint_remote_twice_token =
    create_async_signal_handler (async_remote_interrupt_twice, NULL);
  mark_async_signal_handler_wrapper (sigint_remote_token);
}

static void
async_remote_interrupt_twice (gdb_client_data arg)
{
  if (target_executing)
    {
      interrupt_query ();
      signal (SIGINT, handle_remote_sigint);
    }
}

static void
async_remote_interrupt (gdb_client_data arg)
{
  target_stop ();
}

static void
cleanup_sigint_signal_handler (void *dummy)
{
  signal (SIGINT, handle_sigint);
  if (sigint_remote_twice_token)
    delete_async_signal_handler ((struct async_signal_handler **)
                                 &sigint_remote_twice_token);
  if (sigint_remote_token)
    delete_async_signal_handler ((struct async_signal_handler **)
                                 &sigint_remote_token);
}

static void
initialize_sigint_signal_handler (void)
{
  sigint_remote_token =
    create_async_signal_handler (async_remote_interrupt, NULL);
  signal (SIGINT, handle_remote_sigint);
}

void
async_terminal_inferior (void)
{
  terminal_inferior ();

  if (!sync_execution)
    return;
  if (!remote_async_terminal_ours_p)
    return;
  //  CHECK_FATAL (sync_execution);
  //  CHECK_FATAL (remote_async_terminal_ours_p);
  delete_file_handler (input_fd);
  remote_async_terminal_ours_p = 0;
  initialize_sigint_signal_handler ();
}

void
async_terminal_ours (void)
{
  terminal_ours ();

  if (!sync_execution)
    return;
  if (remote_async_terminal_ours_p)
    return;
  //  CHECK_FATAL (sync_execution);
  //  CHECK_FATAL (!remote_async_terminal_ours_p);
  cleanup_sigint_signal_handler (NULL);

  add_file_handler (input_fd, stdin_event_handler, 0);

  remote_async_terminal_ours_p = 1;
}

static void
gdb_inferior_reset (gdb_inferior_status *s)
{
  s->pid = 0;

  s->attached_in_ptrace = 0;
  s->stopped_in_ptrace = 0;
  s->stopped_in_softexc = 0;

  s->suspend_count = 0;

  s->last_thread = 0;

  gdb_signal_thread_init (&s->signal_status);

}

static void
gdb_inferior_destroy (gdb_inferior_status *s)
{
  gdb_signal_thread_destroy (&s->signal_status);

  s->pid = 0;

  gdb_inferior_reset (s);
}

void
_initialize_gdb_inferior ()
{
  gdb_status = (struct gdb_inferior_status *)
    xmalloc (sizeof (struct gdb_inferior_status));

  gdb_inferior_reset (gdb_status);
}
@


1.1.2.2
log
@* linux-nat.c (linux_nat_attach, linux_nat_detach): Make attach/
detach work asynchronously.

* inf-ptrace.c (inf_ptrace_attach): Ditto.

* infcmd.c (attach_command): Ditto.

* inf-child.c (inf_child_target): Reset to_terminal_inferior/
to_terminal_ours to synchronous methods.

* async-nat-inferior.c (gdb_process_events): Don't poll for
exceptions.
(gdb_process_pending_event): Use pid_to_ptid.
(gdb_inferior_reset): Remove last_thread component.

* async-nat-inferior.h (struct gdb_inferior_status): Remove
last_thread component.
@
text
@d120 2
a121 3
static void
gdb_handle_signal (gdb_signal_thread_message *msg,
		   struct target_waitstatus *status)
d384 22
d420 1
a420 1
  return pid_to_ptid (gdb_status->pid);
d581 2
@


1.1.2.3
log
@Modify commentary at start.
Remove (duplicated/unnecessary?) remote functions.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2006
d5 1
a5 2
   Original code from Apple Computer, Inc.
   Modified by Nick Roberts <nickrob@@snap.net.nz>
d419 96
d522 4
d527 2
d538 5
d545 2
@


1.1.2.4
log
@(gdb_inferior_destroy): Make global.
@
text
@d115 2
d119 2
d456 1
a456 1
void
@


1.1.2.5
log
@Remove declarations for
standard_is_async_p standard_can_async_p.
@
text
@d64 3
@


1.1.2.6
log
@(gdb_process_pending_event): Include lwp no
in return value.
@
text
@d393 1
a393 1
  return ptid_build (gdb_status->pid, gdb_status->pid, 0);
@


1.1.2.7
log
@* async-nat-inferior.h (struct gdb_inferior_status): Remove
unused members.

* async-nat-inferior.c: Don't set above deleted members.
@
text
@d118 11
d408 3
d441 3
@


1.1.2.8
log
@Copy code from Apple more carefully and remove redundant code
@
text
@d26 1
d28 3
d32 5
d38 16
d56 9
d68 6
d77 4
a80 1
  NEXT_SOURCE_SIGNAL = 0x1,
d142 2
d295 2
d306 1
d315 2
d318 6
d350 1
a350 1
                               NEXT_SOURCE_SIGNAL, timeout);
a367 26
  /* FIXME: we want to poll in gdb_fetch_event because otherwise we
     arbitrarily wait however long the wait quanta for select is
     (seemingly ~.01 sec).  However, if we do this we aren't giving
     the mach exception thread a chance to run, and see if there are
     any more exceptions available.  Normally this is okay, because
     there really IS only one message, but to be correct we need to
     use some thread synchronization. */
  for (;;)
    {
      source = gdb_fetch_event (inferior, buf, sizeof (buf),
                                   NEXT_SOURCE_SIGNAL, 0);
      if (source == NEXT_SOURCE_NONE)
        {
          break;
        }
      else
        {
          event_count++;

          /* Stuff the remaining events onto the pending_events queue.
             These will be dispatched when we run again. */
          /* PENDING_EVENTS */
          gdb_add_to_pending_events (source, buf);
        }
    }

a380 1
  // printf ("IN GDB_PROCESS_PENDING_EVENT %s\n", event->buf);
d388 2
@


