head	1.7;
access;
symbols
	gdb-post-ptid_t-2001-05-03:1.6
	gdb-pre-ptid_t-2001-05-03:1.6
	insight-precleanup-2001-01-01:1.4
	gdb-post-protoization-2000-07-29:1.4
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.1.1.4
	gdb-post-params-removal-2000-05-28:1.1.1.4
	gdb-pre-params-removal-2000-05-28:1.1.1.4
	gdb_5_0-2000-05-19-release:1.1.1.4
	gdb_4_18_2-2000-05-18-release:1.1.1.4
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.4
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.4
	gdb_5_0-2000-04-10-branch:1.1.1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.4
	repo-unification-2000-02-06:1.1.1.4
	insight-2000-02-04:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.3
	gdb-1999-12-07:1.1.1.3
	gdb-1999-12-06:1.1.1.3
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.3
	gdb-1999-09-21:1.1.1.3
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.7
date	2001.06.28.03.33.26;	author cagney;	state dead;
branches;
next	1.6;

1.6
date	2001.03.06.08.21.16;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.05.16.38.07;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.30.01.48.27;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.14.00.59.07;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.04.00.41.09;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.09.47;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.09.22.03.25.00;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.02.02.00.21.10;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Exterminate ser-ocd.c.
@
text
@/* Remote serial interface for Macraigor Systems implementation of
   On-Chip Debugging using serial target box or serial wiggler

   Copyright 1994, 1997, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "serial.h"

#ifdef _WIN32
#include <windows.h>
#endif

#ifdef _WIN32
/* On Windows, this function pointer is initialized to a function in
   the wiggler DLL.  */
static int (*dll_do_command) (const char *, char *);
#endif

static int
ocd_open (serial_t scb, const char *name)
{
#ifdef _WIN32
  /* Find the wiggler DLL which talks to the board.  */
  if (dll_do_command == NULL)
    {
      HINSTANCE handle;

      /* FIXME: Should the user be able to configure this?  */
      handle = LoadLibrary ("Wigglers.dll");
      if (handle == NULL)
	error ("Can't load Wigglers.dll");

      dll_do_command = ((int (*) (const char *, char *))
			GetProcAddress (handle, "do_command"));
      if (dll_do_command == NULL)
	error ("Can't find do_command function in Wigglers.dll");
    }
#else
  /* No wiggler DLLs on Unix yet, fail.  */
  error ("Wiggler library not available for this type of host.");
#endif /* _WIN32 */
  return 0;
}

static int
ocd_noop (serial_t scb)
{
  return 0;
}

static void
ocd_raw (serial_t scb)
{
  /* Always in raw mode */
}

/* We need a buffer to store responses from the Wigglers.dll */
#define WIGGLER_BUFF_SIZE 512
unsigned char from_wiggler_buffer[WIGGLER_BUFF_SIZE];
unsigned char *wiggler_buffer_ptr;	/* curr spot in buffer */

static int
ocd_readchar (serial_t scb, int timeout)
{
  /* Catch attempts at reading past the end of the buffer */
  if (wiggler_buffer_ptr >
      (from_wiggler_buffer + (sizeof (char *) * WIGGLER_BUFF_SIZE)))
      error ("ocd_readchar asked to read past the end of the buffer!");

  return (int) *wiggler_buffer_ptr++;	/* return curr char and increment ptr */
}

struct ocd_ttystate
{
  int dummy;
};

/* ocd_{get set}_tty_state() are both dummys to fill out the function
   vector.  Someday, they may do something real... */

static serial_ttystate
ocd_get_tty_state (serial_t scb)
{
  struct ocd_ttystate *state;

  state = (struct ocd_ttystate *) xmalloc (sizeof *state);

  return (serial_ttystate) state;
}

static int
ocd_set_tty_state (serial_t scb, serial_ttystate ttystate)
{
  return 0;
}

static int
ocd_noflush_set_tty_state (serial_t scb, serial_ttystate new_ttystate,
			   serial_ttystate old_ttystate)
{
  return 0;
}

static void
ocd_print_tty_state (serial_t scb,
		     serial_ttystate ttystate,
		     struct ui_file *stream)
{
  /* Nothing to print.  */
  return;
}

static int
ocd_setbaudrate (serial_t scb, int rate)
{
  return 0;
}

static int
ocd_setstopbits (serial_t scb, int rate)
{
  return 0;
}

static int
ocd_write (serial_t scb, const char *str, int len)
{
#ifdef _WIN32
  /* send packet to Wigglers.dll and store response so we can give it to
     remote-wiggler.c when get_packet is run */
  dll_do_command (str, from_wiggler_buffer);
  wiggler_buffer_ptr = from_wiggler_buffer;
#endif

  return 0;
}

static void
ocd_close (serial_t scb)
{
}

static struct serial_ops ocd_ops =
{
  "ocd",
  0,
  ocd_open,
  ocd_close,
  ocd_readchar,
  ocd_write,
  ocd_noop,			/* flush output */
  ocd_noop,			/* flush input */
  ocd_noop,			/* send break -- currently used only for nindy */
  ocd_raw,
  ocd_get_tty_state,
  ocd_set_tty_state,
  ocd_print_tty_state,
  ocd_noflush_set_tty_state,
  ocd_setbaudrate,
  ocd_setstopbits,
  ocd_noop,			/* wait for output to drain */
};

void
_initialize_ser_ocd_bdm (void)
{
  serial_add_interface (&ocd_ops);
}
@


1.6
log
@Update/correct copyright notices.
@
text
@@


1.5
log
@* ocd.h (ocd_xfer_memory): Add ``attrib'' parameter.
* ocd.c (ocd_xfer_memory): Ditto.
* ser-ocd.c (ocd_setstopbits): New function. Add to ocd_ops.
* MAINTAINERS: Document powerpc-eabi and powerpcle-eabi as
buildable with ,-Werror.

* Makefile.in (symfile_h): Define.
(mcore-tdep.o): Add $(symfile_h), $(gdbcore_h) and $(inferior_h).
* mcore-tdep.c: Include "symfile.h", "gdbcore.h" and "inferior.h".
* MAINTAINERS: Document mcore-elf and mcore-pe as buildable with
,-Werror.

* dsrec.c (make_srec): Fix internal_error fmt arg.
* MAINTAINERS: Document i960-coff as buildable with ,-Werror.
@
text
@d4 2
a5 1
   Copyright 1994, 1997, 1999, 2000 Free Software Foundation, Inc.
@


1.4
log
@Protoization.
@
text
@d137 6
d177 1
@


1.3
log
@PARAMS elimination.
@
text
@d37 1
a37 3
ocd_open (scb, name)
     serial_t scb;
     const char *name;
d63 1
a63 2
ocd_noop (scb)
     serial_t scb;
d69 1
a69 2
ocd_raw (scb)
     serial_t scb;
d80 1
a80 3
ocd_readchar (scb, timeout)
     serial_t scb;
     int timeout;
d99 1
a99 2
ocd_get_tty_state (scb)
     serial_t scb;
d109 1
a109 3
ocd_set_tty_state (scb, ttystate)
     serial_t scb;
     serial_ttystate ttystate;
d115 2
a116 4
ocd_noflush_set_tty_state (scb, new_ttystate, old_ttystate)
     serial_t scb;
     serial_ttystate new_ttystate;
     serial_ttystate old_ttystate;
d131 1
a131 3
ocd_setbaudrate (scb, rate)
     serial_t scb;
     int rate;
d137 1
a137 4
ocd_write (scb, str, len)
     serial_t scb;
     const char *str;
     int len;
d150 1
a150 2
ocd_close (scb)
     serial_t scb;
d175 1
a175 1
_initialize_ser_ocd_bdm ()
@


1.2
log
@Eliminate PARAMS from function pointer declarations.
@
text
@d52 1
a52 1
      dll_do_command = ((int (*)PARAMS ((const char *, char *)))
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
	On-Chip Debugging using serial target box or serial wiggler
d4 1
a4 1
   Copyright 1994, 1997 Free Software Foundation, Inc.
d20 2
a21 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a29 9
static int ser_ocd_open PARAMS ((serial_t scb, const char *name));
static void ser_ocd_raw PARAMS ((serial_t scb));
static int ser_ocd_readchar PARAMS ((serial_t scb, int timeout));
static int ser_ocd_setbaudrate PARAMS ((serial_t scb, int rate));
static int ser_ocd_write PARAMS ((serial_t scb, const char *str, int len));
static void ser_ocd_close PARAMS ((serial_t scb));
static serial_ttystate ser_ocd_get_tty_state PARAMS ((serial_t scb));
static int ser_ocd_set_tty_state PARAMS ((serial_t scb, serial_ttystate state));

d33 1
a33 1
static int (*dll_do_command) PARAMS ((const char *, char *));
d52 1
a52 1
      dll_do_command = ((int (*) PARAMS ((const char *, char *)))
a77 5
static void
ocd_readremote ()
{
}

d81 1
a81 1
unsigned char * wiggler_buffer_ptr;	/* curr spot in buffer */
d90 2
a91 2
              (from_wiggler_buffer + (sizeof (char *) * WIGGLER_BUFF_SIZE)))
    error ("ocd_readchar asked to read past the end of the buffer!");
d93 1
a93 1
  return (int) *wiggler_buffer_ptr++; /* return curr char and increment ptr */
d96 2
a97 1
struct ocd_ttystate {
d133 3
a135 3
ocd_print_tty_state (scb, ttystate)
     serial_t scb;
     serial_ttystate ttystate;
d155 1
a155 3
  char c;

#ifdef _WIN32 
d157 1
a157 1
	remote-wiggler.c when get_packet is run */
d179 3
a181 3
  ocd_noop,		/* flush output */
  ocd_noop,		/* flush input */
  ocd_noop,		/* send break -- currently used only for nindy */
d188 1
a188 1
  ocd_noop,		/* wait for output to drain */
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d2 1
a2 1
   On-Chip Debugging using serial target box or serial wiggler
d20 1
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d60 1
a60 1
      dll_do_command = ((int (*)PARAMS ((const char *, char *)))
d94 1
a94 1
unsigned char *wiggler_buffer_ptr;	/* curr spot in buffer */
d103 2
a104 2
      (from_wiggler_buffer + (sizeof (char *) * WIGGLER_BUFF_SIZE)))
      error ("ocd_readchar asked to read past the end of the buffer!");
d106 1
a106 1
  return (int) *wiggler_buffer_ptr++;	/* return curr char and increment ptr */
d109 1
a109 2
struct ocd_ttystate
{
d169 1
a169 1
#ifdef _WIN32
d171 1
a171 1
     remote-wiggler.c when get_packet is run */
d193 3
a195 3
  ocd_noop,			/* flush output */
  ocd_noop,			/* flush input */
  ocd_noop,			/* send break -- currently used only for nindy */
d202 1
a202 1
  ocd_noop,			/* wait for output to drain */
@


1.1.1.3
log
@import gdb-1999-09-21
@
text
@d4 1
a4 1
   Copyright 1994, 1997, 1999 Free Software Foundation, Inc.
d30 9
d87 5
d147 3
a149 3
ocd_print_tty_state (serial_t scb,
		     serial_ttystate ttystate,
		     struct gdb_file *stream)
d169 2
@


1.1.1.4
log
@import gdb-2000-02-01 snapshot
@
text
@d4 1
a4 1
   Copyright 1994, 1997, 1999, 2000 Free Software Foundation, Inc.
d135 1
a135 1
		     struct ui_file *stream)
@


