head	1.8;
access;
symbols
	gdb_5_3-2002-12-12-release:1.7
	carlton_dictionary-20021115-merge:1.7
	kseitz_interps-20021105-merge:1.7
	kseitz_interps-20021103-merge:1.7
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.10
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.8
	carlton_dictionary-20020920-branchpoint:1.7
	gdb_5_3-branch:1.7.0.6
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.7
	cagney_sysregs-20020825-branch:1.7.0.4
	cagney_sysregs-20020825-branchpoint:1.7
	readline_4_3-import-branch:1.7.0.2
	readline_4_3-import-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.6
	kseitz_interps-20020528-branch:1.6.0.16
	kseitz_interps-20020528-branchpoint:1.6
	cagney_regbuf-20020515-branch:1.6.0.14
	cagney_regbuf-20020515-branchpoint:1.6
	jimb-macro-020506-branch:1.6.0.12
	jimb-macro-020506-branchpoint:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.10
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.6
	gdb_5_1_0_1-2002-01-03-release:1.6
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.6.0.8
	gdb_5_1-2001-11-21-release:1.6
	gdb_s390-2001-09-26-branch:1.6.0.6
	gdb_s390-2001-09-26-branchpoint:1.6
	gdb_5_1-2001-07-29-branch:1.6.0.4
	gdb_5_1-2001-07-29-branchpoint:1.6
	dberlin-typesystem-branch:1.6.0.2
	dberlin-typesystem-branchpoint:1.6
	gdb-post-ptid_t-2001-05-03:1.6
	gdb-pre-ptid_t-2001-05-03:1.6
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.2
	insight-2000-02-04:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.8
date	2002.12.16.20.39.10;	author cagney;	state dead;
branches;
next	1.7;

1.7
date	2002.08.22.21.52.44;	author cagney;	state Exp;
branches
	1.7.8.1
	1.7.10.1;
next	1.6;

1.6
date	2001.03.01.01.39.21;	author cagney;	state Exp;
branches
	1.6.16.1;
next	1.5;

1.5
date	2001.02.02.23.04.14;	author jtc;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.02.19.14.33;	author jtc;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.30.01.48.27;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.09.08.52.47;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.04;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.09.28;	author jsm;	state Exp;
branches;
next	;

1.6.16.1
date	2002.08.30.22.52.45;	author kseitz;	state Exp;
branches;
next	;

1.7.8.1
date	2002.12.23.19.38.40;	author carlton;	state dead;
branches;
next	;

1.7.10.1
date	2003.12.14.20.27.29;	author drow;	state dead;
branches;
next	;


desc
@@


1.8
log
@2002-12-16  Andrew Cagney  <ac131313@@redhat.com>

	* config/arc/arc.mt, config/arc/tm-arc.h: Delete.
	* config/d30v/d30v.mt, config/d30v/tm-d30v.h: Delete.
	* config/fr30/fr30.mt, config/fr30/tm-fr30.h: Delete.
	* config/i386/i386aix.mh, config/i386/i386aix.mt: Delete.
	* config/i386/i386m3.mh, config/i386/i386m3.mt: Delete.
	* config/i386/i386mach.mh, config/i386/i386os9k.mt: Delete.
	* config/i386/nm-i386aix.h, config/i386/nm-i386mach.h: Delete.
	* config/i386/nm-m3.h, config/i386/tm-i386aix.h: Delete.
	* config/i386/tm-i386m3.h, config/i386/tm-i386mk.h: Delete.
	* config/i386/xm-i386aix.h, config/i386/xm-i386m3.h: Delete.
	* config/i386/xm-i386mach.h, config/i386/xm-i386mk.h: Delete.
	* config/i960/mon960.mt, config/i960/nindy960.mt: Delete.
	* config/i960/tm-i960.h, config/i960/tm-mon960.h: Delete.
	* config/i960/tm-nindy960.h, config/i960/tm-vx960.h: Delete.
	* config/i960/vxworks960.mt, config/m68k/apollo68b.mh: Delete.
	* config/m68k/apollo68b.mt, config/m68k/apollo68v.mh: Delete.
	* config/m68k/hp300bsd.mh, config/m68k/hp300bsd.mt: Delete.
	* config/m68k/hp300hpux.mh, config/m68k/hp300hpux.mt: Delete.
	* config/m88k/delta88.mh, config/m88k/delta88.mt: Delete.
	* config/m88k/delta88v4.mh, config/m88k/delta88v4.mt: Delete.
	* config/m88k/m88k.mh, config/m88k/m88k.mt: Delete.
	* config/m88k/nm-delta88v4.h, config/m88k/nm-m88k.h: Delete.
	* config/m88k/tm-delta88.h, config/m88k/tm-delta88v4.h: Delete.
	* config/m88k/tm-m88k.h, config/m88k/xm-delta88.h: Delete.
	* config/m88k/xm-dgux.h: Delete.
	* fr30-tdep.c, i386aix-nat.c, i386m3-nat.c: Delete.
	* i386mach-nat.c, i960-tdep.c, m88k-nat.c: Delete.
	* os9kread.c, remote-bug.c, remote-nindy.c: Delete.
	* remote-nrom.c, remote-os9k.c, remote-vx960.c: Delete.
	* d30v-tdep.c, arc-tdep.c, cxux-nat.c, dst.h, dstread.c: Delete.
	* ch-exp.c, ch-lang.c, ch-lang.h, ch-typeprint.c: Delete.
	* ch-valprint.c: Delete.
@
text
@// OBSOLETE /* i80960-dependent portions of the RPC protocol
// OBSOLETE    used with a VxWorks target 
// OBSOLETE 
// OBSOLETE    Contributed by Wind River Systems.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #include <stdio.h>
// OBSOLETE #include "defs.h"
// OBSOLETE 
// OBSOLETE #include "vx-share/regPacket.h"
// OBSOLETE #include "frame.h"
// OBSOLETE #include "inferior.h"
// OBSOLETE #include "target.h"
// OBSOLETE #include "gdbcore.h"
// OBSOLETE #include "command.h"
// OBSOLETE #include "symtab.h"
// OBSOLETE #include "symfile.h"		/* for struct complaint */
// OBSOLETE #include "regcache.h"
// OBSOLETE 
// OBSOLETE #include "gdb_string.h"
// OBSOLETE #include <errno.h>
// OBSOLETE #include <fcntl.h>
// OBSOLETE #include <sys/types.h>
// OBSOLETE #include <sys/time.h>
// OBSOLETE #include <sys/socket.h>
// OBSOLETE 
// OBSOLETE #ifdef _AIX			/* IBM claims "void *malloc()" not char * */
// OBSOLETE #define malloc bogon_malloc
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE #include <rpc/rpc.h>
// OBSOLETE #include <sys/time.h>		/* UTek's <rpc/rpc.h> doesn't #incl this */
// OBSOLETE #include <netdb.h>
// OBSOLETE #include "vx-share/ptrace.h"
// OBSOLETE #include "vx-share/xdr_ptrace.h"
// OBSOLETE #include "vx-share/xdr_ld.h"
// OBSOLETE #include "vx-share/xdr_rdb.h"
// OBSOLETE #include "vx-share/dbgRpcLib.h"
// OBSOLETE 
// OBSOLETE /* get rid of value.h if possible */
// OBSOLETE #include <value.h>
// OBSOLETE #include <symtab.h>
// OBSOLETE 
// OBSOLETE /* Flag set if target has fpu */
// OBSOLETE 
// OBSOLETE extern int target_has_fp;
// OBSOLETE 
// OBSOLETE /* 960 floating point format descriptor, from "i960-tdep.c."  */
// OBSOLETE 
// OBSOLETE extern struct ext_format ext_format_i960;
// OBSOLETE 
// OBSOLETE /* Generic register read/write routines in remote-vx.c.  */
// OBSOLETE 
// OBSOLETE extern void net_read_registers ();
// OBSOLETE extern void net_write_registers ();
// OBSOLETE 
// OBSOLETE /* Read a register or registers from the VxWorks target.
// OBSOLETE    REGNO is the register to read, or -1 for all; currently,
// OBSOLETE    it is ignored.  FIXME look at regno to improve efficiency.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE vx_read_register (int regno)
// OBSOLETE {
// OBSOLETE   char i960_greg_packet[I960_GREG_PLEN];
// OBSOLETE   char i960_fpreg_packet[I960_FPREG_PLEN];
// OBSOLETE 
// OBSOLETE   /* Get general-purpose registers.  When copying values into
// OBSOLETE      registers [], don't assume that a location in registers []
// OBSOLETE      is properly aligned for the target data type.  */
// OBSOLETE 
// OBSOLETE   net_read_registers (i960_greg_packet, I960_GREG_PLEN, PTRACE_GETREGS);
// OBSOLETE 
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_R0],
// OBSOLETE 	 &registers[REGISTER_BYTE (R0_REGNUM)], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_G0],
// OBSOLETE 	 &registers[REGISTER_BYTE (G0_REGNUM)], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_PCW],
// OBSOLETE 	 &registers[REGISTER_BYTE (PCW_REGNUM)], sizeof (int));
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_ACW],
// OBSOLETE 	 &registers[REGISTER_BYTE (ACW_REGNUM)], sizeof (int));
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_TCW],
// OBSOLETE 	 &registers[REGISTER_BYTE (TCW_REGNUM)], sizeof (int));
// OBSOLETE 
// OBSOLETE   /* If the target has floating point registers, fetch them.
// OBSOLETE      Otherwise, zero the floating point register values in
// OBSOLETE      registers[] for good measure, even though we might not
// OBSOLETE      need to.  */
// OBSOLETE 
// OBSOLETE   if (target_has_fp)
// OBSOLETE     {
// OBSOLETE       net_read_registers (i960_fpreg_packet, I960_FPREG_PLEN,
// OBSOLETE 			  PTRACE_GETFPREGS);
// OBSOLETE       bcopy (&i960_fpreg_packet[I960_R_FP0],
// OBSOLETE 	     &registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
// OBSOLETE     }
// OBSOLETE   else
// OBSOLETE     bzero (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	   REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
// OBSOLETE 
// OBSOLETE   /* Mark the register cache valid.  */
// OBSOLETE 
// OBSOLETE   registers_fetched ();
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Store a register or registers into the VxWorks target.
// OBSOLETE    REGNO is the register to store, or -1 for all; currently,
// OBSOLETE    it is ignored.  FIXME look at regno to improve efficiency.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE vx_write_register (int regno)
// OBSOLETE {
// OBSOLETE   char i960_greg_packet[I960_GREG_PLEN];
// OBSOLETE   char i960_fpreg_packet[I960_FPREG_PLEN];
// OBSOLETE 
// OBSOLETE   /* Store floating-point registers.  When copying values from
// OBSOLETE      registers [], don't assume that a location in registers []
// OBSOLETE      is properly aligned for the target data type.  */
// OBSOLETE 
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (R0_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_R0], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (G0_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_G0], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (PCW_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_PCW], sizeof (int));
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (ACW_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_ACW], sizeof (int));
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (TCW_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_TCW], sizeof (int));
// OBSOLETE 
// OBSOLETE   net_write_registers (i960_greg_packet, I960_GREG_PLEN, PTRACE_SETREGS);
// OBSOLETE 
// OBSOLETE   /* Store floating point registers if the target has them.  */
// OBSOLETE 
// OBSOLETE   if (target_has_fp)
// OBSOLETE     {
// OBSOLETE       bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	     &i960_fpreg_packet[I960_R_FP0],
// OBSOLETE 	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
// OBSOLETE 
// OBSOLETE       net_write_registers (i960_fpreg_packet, I960_FPREG_PLEN,
// OBSOLETE 			   PTRACE_SETFPREGS);
// OBSOLETE     }
// OBSOLETE }
@


1.7
log
@Obsolete i960.
@
text
@@


1.7.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.7.8.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.6
log
@Create new file regcache.h.  Update all uses.
@
text
@d1 160
a160 160
/* i80960-dependent portions of the RPC protocol
   used with a VxWorks target 

   Contributed by Wind River Systems.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include <stdio.h>
#include "defs.h"

#include "vx-share/regPacket.h"
#include "frame.h"
#include "inferior.h"
#include "target.h"
#include "gdbcore.h"
#include "command.h"
#include "symtab.h"
#include "symfile.h"		/* for struct complaint */
#include "regcache.h"

#include "gdb_string.h"
#include <errno.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>

#ifdef _AIX			/* IBM claims "void *malloc()" not char * */
#define malloc bogon_malloc
#endif

#include <rpc/rpc.h>
#include <sys/time.h>		/* UTek's <rpc/rpc.h> doesn't #incl this */
#include <netdb.h>
#include "vx-share/ptrace.h"
#include "vx-share/xdr_ptrace.h"
#include "vx-share/xdr_ld.h"
#include "vx-share/xdr_rdb.h"
#include "vx-share/dbgRpcLib.h"

/* get rid of value.h if possible */
#include <value.h>
#include <symtab.h>

/* Flag set if target has fpu */

extern int target_has_fp;

/* 960 floating point format descriptor, from "i960-tdep.c."  */

extern struct ext_format ext_format_i960;

/* Generic register read/write routines in remote-vx.c.  */

extern void net_read_registers ();
extern void net_write_registers ();

/* Read a register or registers from the VxWorks target.
   REGNO is the register to read, or -1 for all; currently,
   it is ignored.  FIXME look at regno to improve efficiency.  */

void
vx_read_register (int regno)
{
  char i960_greg_packet[I960_GREG_PLEN];
  char i960_fpreg_packet[I960_FPREG_PLEN];

  /* Get general-purpose registers.  When copying values into
     registers [], don't assume that a location in registers []
     is properly aligned for the target data type.  */

  net_read_registers (i960_greg_packet, I960_GREG_PLEN, PTRACE_GETREGS);

  bcopy (&i960_greg_packet[I960_R_R0],
	 &registers[REGISTER_BYTE (R0_REGNUM)], 16 * I960_GREG_SIZE);
  bcopy (&i960_greg_packet[I960_R_G0],
	 &registers[REGISTER_BYTE (G0_REGNUM)], 16 * I960_GREG_SIZE);
  bcopy (&i960_greg_packet[I960_R_PCW],
	 &registers[REGISTER_BYTE (PCW_REGNUM)], sizeof (int));
  bcopy (&i960_greg_packet[I960_R_ACW],
	 &registers[REGISTER_BYTE (ACW_REGNUM)], sizeof (int));
  bcopy (&i960_greg_packet[I960_R_TCW],
	 &registers[REGISTER_BYTE (TCW_REGNUM)], sizeof (int));

  /* If the target has floating point registers, fetch them.
     Otherwise, zero the floating point register values in
     registers[] for good measure, even though we might not
     need to.  */

  if (target_has_fp)
    {
      net_read_registers (i960_fpreg_packet, I960_FPREG_PLEN,
			  PTRACE_GETFPREGS);
      bcopy (&i960_fpreg_packet[I960_R_FP0],
	     &registers[REGISTER_BYTE (FP0_REGNUM)],
	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
    }
  else
    bzero (&registers[REGISTER_BYTE (FP0_REGNUM)],
	   REGISTER_RAW_SIZE (FP0_REGNUM) * 4);

  /* Mark the register cache valid.  */

  registers_fetched ();
}

/* Store a register or registers into the VxWorks target.
   REGNO is the register to store, or -1 for all; currently,
   it is ignored.  FIXME look at regno to improve efficiency.  */

void
vx_write_register (int regno)
{
  char i960_greg_packet[I960_GREG_PLEN];
  char i960_fpreg_packet[I960_FPREG_PLEN];

  /* Store floating-point registers.  When copying values from
     registers [], don't assume that a location in registers []
     is properly aligned for the target data type.  */

  bcopy (&registers[REGISTER_BYTE (R0_REGNUM)],
	 &i960_greg_packet[I960_R_R0], 16 * I960_GREG_SIZE);
  bcopy (&registers[REGISTER_BYTE (G0_REGNUM)],
	 &i960_greg_packet[I960_R_G0], 16 * I960_GREG_SIZE);
  bcopy (&registers[REGISTER_BYTE (PCW_REGNUM)],
	 &i960_greg_packet[I960_R_PCW], sizeof (int));
  bcopy (&registers[REGISTER_BYTE (ACW_REGNUM)],
	 &i960_greg_packet[I960_R_ACW], sizeof (int));
  bcopy (&registers[REGISTER_BYTE (TCW_REGNUM)],
	 &i960_greg_packet[I960_R_TCW], sizeof (int));

  net_write_registers (i960_greg_packet, I960_GREG_PLEN, PTRACE_SETREGS);

  /* Store floating point registers if the target has them.  */

  if (target_has_fp)
    {
      bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)],
	     &i960_fpreg_packet[I960_R_FP0],
	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);

      net_write_registers (i960_fpreg_packet, I960_FPREG_PLEN,
			   PTRACE_SETFPREGS);
    }
}
@


1.6.16.1
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d1 160
a160 160
// OBSOLETE /* i80960-dependent portions of the RPC protocol
// OBSOLETE    used with a VxWorks target 
// OBSOLETE 
// OBSOLETE    Contributed by Wind River Systems.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #include <stdio.h>
// OBSOLETE #include "defs.h"
// OBSOLETE 
// OBSOLETE #include "vx-share/regPacket.h"
// OBSOLETE #include "frame.h"
// OBSOLETE #include "inferior.h"
// OBSOLETE #include "target.h"
// OBSOLETE #include "gdbcore.h"
// OBSOLETE #include "command.h"
// OBSOLETE #include "symtab.h"
// OBSOLETE #include "symfile.h"		/* for struct complaint */
// OBSOLETE #include "regcache.h"
// OBSOLETE 
// OBSOLETE #include "gdb_string.h"
// OBSOLETE #include <errno.h>
// OBSOLETE #include <fcntl.h>
// OBSOLETE #include <sys/types.h>
// OBSOLETE #include <sys/time.h>
// OBSOLETE #include <sys/socket.h>
// OBSOLETE 
// OBSOLETE #ifdef _AIX			/* IBM claims "void *malloc()" not char * */
// OBSOLETE #define malloc bogon_malloc
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE #include <rpc/rpc.h>
// OBSOLETE #include <sys/time.h>		/* UTek's <rpc/rpc.h> doesn't #incl this */
// OBSOLETE #include <netdb.h>
// OBSOLETE #include "vx-share/ptrace.h"
// OBSOLETE #include "vx-share/xdr_ptrace.h"
// OBSOLETE #include "vx-share/xdr_ld.h"
// OBSOLETE #include "vx-share/xdr_rdb.h"
// OBSOLETE #include "vx-share/dbgRpcLib.h"
// OBSOLETE 
// OBSOLETE /* get rid of value.h if possible */
// OBSOLETE #include <value.h>
// OBSOLETE #include <symtab.h>
// OBSOLETE 
// OBSOLETE /* Flag set if target has fpu */
// OBSOLETE 
// OBSOLETE extern int target_has_fp;
// OBSOLETE 
// OBSOLETE /* 960 floating point format descriptor, from "i960-tdep.c."  */
// OBSOLETE 
// OBSOLETE extern struct ext_format ext_format_i960;
// OBSOLETE 
// OBSOLETE /* Generic register read/write routines in remote-vx.c.  */
// OBSOLETE 
// OBSOLETE extern void net_read_registers ();
// OBSOLETE extern void net_write_registers ();
// OBSOLETE 
// OBSOLETE /* Read a register or registers from the VxWorks target.
// OBSOLETE    REGNO is the register to read, or -1 for all; currently,
// OBSOLETE    it is ignored.  FIXME look at regno to improve efficiency.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE vx_read_register (int regno)
// OBSOLETE {
// OBSOLETE   char i960_greg_packet[I960_GREG_PLEN];
// OBSOLETE   char i960_fpreg_packet[I960_FPREG_PLEN];
// OBSOLETE 
// OBSOLETE   /* Get general-purpose registers.  When copying values into
// OBSOLETE      registers [], don't assume that a location in registers []
// OBSOLETE      is properly aligned for the target data type.  */
// OBSOLETE 
// OBSOLETE   net_read_registers (i960_greg_packet, I960_GREG_PLEN, PTRACE_GETREGS);
// OBSOLETE 
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_R0],
// OBSOLETE 	 &registers[REGISTER_BYTE (R0_REGNUM)], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_G0],
// OBSOLETE 	 &registers[REGISTER_BYTE (G0_REGNUM)], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_PCW],
// OBSOLETE 	 &registers[REGISTER_BYTE (PCW_REGNUM)], sizeof (int));
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_ACW],
// OBSOLETE 	 &registers[REGISTER_BYTE (ACW_REGNUM)], sizeof (int));
// OBSOLETE   bcopy (&i960_greg_packet[I960_R_TCW],
// OBSOLETE 	 &registers[REGISTER_BYTE (TCW_REGNUM)], sizeof (int));
// OBSOLETE 
// OBSOLETE   /* If the target has floating point registers, fetch them.
// OBSOLETE      Otherwise, zero the floating point register values in
// OBSOLETE      registers[] for good measure, even though we might not
// OBSOLETE      need to.  */
// OBSOLETE 
// OBSOLETE   if (target_has_fp)
// OBSOLETE     {
// OBSOLETE       net_read_registers (i960_fpreg_packet, I960_FPREG_PLEN,
// OBSOLETE 			  PTRACE_GETFPREGS);
// OBSOLETE       bcopy (&i960_fpreg_packet[I960_R_FP0],
// OBSOLETE 	     &registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
// OBSOLETE     }
// OBSOLETE   else
// OBSOLETE     bzero (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	   REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
// OBSOLETE 
// OBSOLETE   /* Mark the register cache valid.  */
// OBSOLETE 
// OBSOLETE   registers_fetched ();
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Store a register or registers into the VxWorks target.
// OBSOLETE    REGNO is the register to store, or -1 for all; currently,
// OBSOLETE    it is ignored.  FIXME look at regno to improve efficiency.  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE vx_write_register (int regno)
// OBSOLETE {
// OBSOLETE   char i960_greg_packet[I960_GREG_PLEN];
// OBSOLETE   char i960_fpreg_packet[I960_FPREG_PLEN];
// OBSOLETE 
// OBSOLETE   /* Store floating-point registers.  When copying values from
// OBSOLETE      registers [], don't assume that a location in registers []
// OBSOLETE      is properly aligned for the target data type.  */
// OBSOLETE 
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (R0_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_R0], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (G0_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_G0], 16 * I960_GREG_SIZE);
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (PCW_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_PCW], sizeof (int));
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (ACW_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_ACW], sizeof (int));
// OBSOLETE   bcopy (&registers[REGISTER_BYTE (TCW_REGNUM)],
// OBSOLETE 	 &i960_greg_packet[I960_R_TCW], sizeof (int));
// OBSOLETE 
// OBSOLETE   net_write_registers (i960_greg_packet, I960_GREG_PLEN, PTRACE_SETREGS);
// OBSOLETE 
// OBSOLETE   /* Store floating point registers if the target has them.  */
// OBSOLETE 
// OBSOLETE   if (target_has_fp)
// OBSOLETE     {
// OBSOLETE       bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	     &i960_fpreg_packet[I960_R_FP0],
// OBSOLETE 	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
// OBSOLETE 
// OBSOLETE       net_write_registers (i960_fpreg_packet, I960_FPREG_PLEN,
// OBSOLETE 			   PTRACE_SETFPREGS);
// OBSOLETE     }
// OBSOLETE }
@


1.5
log
@* ppc-bdm.c (#include <signal.h>): Removed.
* remote-array.c: Likewise.
* remote-bug.c: Likewise.
* remote-e7000.c: Likewise.
* remote-mips.c: Likewise.
* remote-os9k.c: Likewise.
* remote-st.c: Likewise.
* remote-udi.c: Likewise.
* remote-vx29k.c: Likewise.
* remote-vx68.c: Likewise.
* remote-vx960.c: Likewise.
* remote-vxmips.c: Likewise.
* remote-vxsparc.c: Likewise.
@
text
@d34 1
@


1.4
log
@* monitor.c (#include "gdb_wait.h"): Removed.
* ocd.c: Likewise.
* ppc-bdm.c: Likewise.
* remote-adapt.c: Likewise.
* remote-array.c: Likewise.
* remote-bug.c: Likewise.
* remote-e7000.c: Likewise.
* remote-eb.c: Likewise.
* remote-es.c: Likewise.
* remote-mips.c: Likewise.
* remote-mm.c: Likewise.
* remote-nindy.c: Likewise.
* remote-os9k.c: Likewise.
* remote-rdi.c: Likewise.
* remote-rdp.c: Likewise.
* remote-sds.c: Likewise.
* remote-sim.c: Likewise.
* remote-st.c: Likewise.
* remote-udi.c: Likewise.
* remote-vx.c: Likewise.
* remote-vx29k.c: Likewise.
* remote-vx68.c: Likewise.
* remote-vx960.c: Likewise.
* remote-vxmips.c: Likewise.
* remote-vxsparc.c: Likewise.
* remote.c: Likewise.
* ser-pipe.c: Likewise.
* ser-unix.c: Likewise.
* Makefile.in: Updated dependencies.
-------------------------------------------------------------------
@
text
@a36 1
#include <signal.h>
@


1.3
log
@Protoization.
@
text
@a28 1
#include "gdb_wait.h"
@


1.2
log
@Replace ../include/wait.h with gdb_wait.h.
@
text
@d79 1
a79 2
vx_read_register (regno)
     int regno;
d128 1
a128 2
vx_write_register (regno)
     int regno;
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
Contributed by Wind River Systems.
d6 1
a6 1
This file is part of GDB.
d8 14
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d26 1
a26 1
#include "vx-share/regPacket.h"  
d29 1
a29 1
#include "wait.h"
d44 1
a44 1
#ifdef _AIX                     /* IBM claims "void *malloc()" not char * */
d110 4
a113 4
                          PTRACE_GETFPREGS);
      bcopy (&i960_fpreg_packet[I960_R_FP0], 
             &registers[REGISTER_BYTE (FP0_REGNUM)],
  	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
d117 1
a117 1
           REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
d156 1
a156 1
      bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)], 
d161 1
a161 1
                           PTRACE_SETFPREGS);
a163 1

@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   Contributed by Wind River Systems.
d6 1
a6 1
   This file is part of GDB.
d8 13
a20 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d25 1
a25 1
#include "vx-share/regPacket.h"
d43 1
a43 1
#ifdef _AIX			/* IBM claims "void *malloc()" not char * */
d109 4
a112 4
			  PTRACE_GETFPREGS);
      bcopy (&i960_fpreg_packet[I960_R_FP0],
	     &registers[REGISTER_BYTE (FP0_REGNUM)],
	     REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
d116 1
a116 1
	   REGISTER_RAW_SIZE (FP0_REGNUM) * 4);
d155 1
a155 1
      bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)],
d160 1
a160 1
			   PTRACE_SETFPREGS);
d163 1
@

