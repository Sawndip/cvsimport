head	1.12;
access;
symbols
	gdb_5_2_1-2002-07-23-release:1.9
	jimb-macro-020506-branch:1.10.0.2
	jimb-macro-020506-branchpoint:1.10
	gdb_5_2-2002-04-29-release:1.9
	gdb_5_2-branch:1.9.0.2
	gdb_5_2-2002-03-03-branchpoint:1.9
	gdb_5_1_1-2002-01-24-release:1.5
	gdb_5_1_0_1-2002-01-03-release:1.5
	cygnus_cvs_20020108_pre:1.9
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	gdb-post-ptid_t-2001-05-03:1.5
	gdb-pre-ptid_t-2001-05-03:1.5
	insight-precleanup-2001-01-01:1.2
	gdb-post-protoization-2000-07-29:1.1
	gdb-pre-protoization-2000-07-29:1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.1
	gdb-post-params-removal-2000-06-04:1.1
	gdb-pre-params-removal-2000-06-04:1.1
	gdb-post-params-removal-2000-05-28:1.1
	gdb-pre-params-removal-2000-05-28:1.1;
locks; strict;
comment	@ * @;


1.12
date	2002.05.11.17.22.26;	author thorpej;	state dead;
branches;
next	1.11;

1.11
date	2002.05.11.11.16.23;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.06.11.39.51;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.27.15.22.27;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.13.17.34.52;	author kevinb;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.12.22.27.35;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.21.12.15.15;	author smid;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.27.16.06.53;	author dhoward;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.03.01.01.39.20;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.17.09.01.14;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.10.14.54.51;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.23.23.44.44;	author kettenis;	state Exp;
branches;
next	;

1.5.4.1
date	2002.01.25.06.41.30;	author kevinb;	state Exp;
branches;
next	;


desc
@@


1.12
log
@* Makefile.in (ALLDEPFILES): Remove i387-nat.c.
(i387-nat.o): Delete dependency list.
(go32-nat.o): Change i387-nat.h to i387-tdep.h.
(x86-64-linux-nat.o): Likewise.
* i387-nat.c: Delete file, moving contents to...
* i387-tdep.c: ...here.
* i387-nat.h: Rename...
* i387-tdep.h: ...to this.
* go32-nat.c: Include i387-tdep.h instead of i387-nat.h.
* i386-linux-nat.c: Likewise.
* i386bsd-nat.c: Likewise.
* i386gnu-nat.c: Likewise.
* i386nbsd-nat.c: Likewise.
* i386v4-nat.c: Likewise.
* x86-64-linux-nat.c: Likewise.
* config/i386/fbsd.mh (NATDEPFILES): Remove i387-nat.o.
* config/i386/go32.mh (NATDEPFILES): Likewise.
* config/i386/i386gnu.mh (NATDEPFILES): Likewise.
* config/i386/i386sol2.mh (NATDEPFILES): Likewise.
* config/i386/i386v42mp.mh (NATDEPFILES): Likewise.
* config/i386/linux.mh (NATDEPFILES): Likewise.
* config/i386/nbsd.mh (NATDEPFILES): Likewise.
* config/i386/nbsdelf.mh (NATDEPFILES): Likewise.
* config/i386/obsd.mh (NATDEPFILES): Likewise.
* config/i386/x86-64linux.mh (NATDEPFILES): Likewise.
@
text
@/* Native-dependent code for the i387.
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "inferior.h"
#include "value.h"
#include "regcache.h"

#include "i387-nat.h"
#include "i386-tdep.h"

/* FIXME: kettenis/2000-05-21: Right now more than a few i386 targets
   define their own routines to manage the floating-point registers in
   GDB's register array.  Most (if not all) of these targets use the
   format used by the "fsave" instruction in their communication with
   the OS.  They should all be converted to use the routines below.  */

/* At fsave_offset[REGNUM] you'll find the offset to the location in
   the data structure used by the "fsave" instruction where GDB
   register REGNUM is stored.  */

static int fsave_offset[] =
{
  28 + 0 * FPU_REG_RAW_SIZE,	/* FP0_REGNUM through ...  */
  28 + 1 * FPU_REG_RAW_SIZE,  
  28 + 2 * FPU_REG_RAW_SIZE,  
  28 + 3 * FPU_REG_RAW_SIZE,  
  28 + 4 * FPU_REG_RAW_SIZE,  
  28 + 5 * FPU_REG_RAW_SIZE,  
  28 + 6 * FPU_REG_RAW_SIZE,  
  28 + 7 * FPU_REG_RAW_SIZE,	/* ... FP7_REGNUM.  */
  0,				/* FCTRL_REGNUM (16 bits).  */
  4,				/* FSTAT_REGNUM (16 bits).  */
  8,				/* FTAG_REGNUM (16 bits).  */
  16,				/* FISEG_REGNUM (16 bits).  */
  12,				/* FIOFF_REGNUM.  */
  24,				/* FOSEG_REGNUM.  */
  20,				/* FOOFF_REGNUM.  */
  18				/* FOP_REGNUM (bottom 11 bits).  */
};

#define FSAVE_ADDR(fsave, regnum) (fsave + fsave_offset[regnum - FP0_REGNUM])


/* Fill register REGNUM in GDB's register array with the appropriate
   value from *FSAVE.  This function masks off any of the reserved
   bits in *FSAVE.  */

void
i387_supply_register (int regnum, char *fsave)
{
  /* Most of the FPU control registers occupy only 16 bits in
     the fsave area.  Give those a special treatment.  */
  if (regnum >= FPC_REGNUM
      && regnum != FIOFF_REGNUM && regnum != FOOFF_REGNUM)
    {
      unsigned char val[4];

      memcpy (val, FSAVE_ADDR (fsave, regnum), 2);
      val[2] = val[3] = 0;
      if (regnum == FOP_REGNUM)
	val[1] &= ((1 << 3) - 1);
      supply_register (regnum, val);
    }
  else
    supply_register (regnum, FSAVE_ADDR (fsave, regnum));
}

/* Fill GDB's register array with the floating-point register values
   in *FSAVE.  This function masks off any of the reserved
   bits in *FSAVE.  */

void
i387_supply_fsave (char *fsave)
{
  int i;

  for (i = FP0_REGNUM; i < XMM0_REGNUM; i++)
    i387_supply_register (i, fsave);
}

/* Fill register REGNUM (if it is a floating-point register) in *FSAVE
   with the value in GDB's register array.  If REGNUM is -1, do this
   for all registers.  This function doesn't touch any of the reserved
   bits in *FSAVE.  */

void
i387_fill_fsave (char *fsave, int regnum)
{
  int i;

  for (i = FP0_REGNUM; i < XMM0_REGNUM; i++)
    if (regnum == -1 || regnum == i)
      {
	/* Most of the FPU control registers occupy only 16 bits in
           the fsave area.  Give those a special treatment.  */
	if (i >= FPC_REGNUM
	    && i != FIOFF_REGNUM && i != FOOFF_REGNUM)
	  {
	    unsigned char buf[4];

	    regcache_collect (i, buf);

	    if (i == FOP_REGNUM)
	      {
		/* The opcode occupies only 11 bits.  Make sure we
                   don't touch the other bits.  */
		buf[1] &= ((1 << 3) - 1);
		buf[1] |= ((FSAVE_ADDR (fsave, i))[1] & ~((1 << 3) - 1));
	      }
	    memcpy (FSAVE_ADDR (fsave, i), buf, 2);
	  }
	else
	  regcache_collect (i, FSAVE_ADDR (fsave, i));
      }
}


/* At fxsave_offset[REGNUM] you'll find the offset to the location in
   the data structure used by the "fxsave" instruction where GDB
   register REGNUM is stored.  */

static int fxsave_offset[] =
{
  32,				/* FP0_REGNUM through ...  */
  48,
  64,
  80,
  96,
  112,
  128,
  144,				/* ... FP7_REGNUM (80 bits each).  */
  0,				/* FCTRL_REGNUM (16 bits).  */
  2,				/* FSTAT_REGNUM (16 bits).  */
  4,				/* FTAG_REGNUM (16 bits).  */
  12,				/* FISEG_REGNUM (16 bits).  */
  8,				/* FIOFF_REGNUM.  */
  20,				/* FOSEG_REGNUM (16 bits).  */
  16,				/* FOOFF_REGNUM.  */
  6,				/* FOP_REGNUM (bottom 11 bits).  */
  160,				/* XMM0_REGNUM through ...  */
  176,
  192,
  208,
  224,
  240,
  256,
  272,				/* ... XMM7_REGNUM (128 bits each).  */
  24,				/* MXCSR_REGNUM.  */
};

#define FXSAVE_ADDR(fxsave, regnum) \
  (fxsave + fxsave_offset[regnum - FP0_REGNUM])

static int i387_tag (unsigned char *raw);


/* Fill GDB's register array with the floating-point and SSE register
   values in *FXSAVE.  This function masks off any of the reserved
   bits in *FXSAVE.  */

void
i387_supply_fxsave (char *fxsave)
{
  int i;

  for (i = FP0_REGNUM; i <= MXCSR_REGNUM; i++)
    {
      /* Most of the FPU control registers occupy only 16 bits in
	 the fxsave area.  Give those a special treatment.  */
      if (i >= FPC_REGNUM && i < XMM0_REGNUM
	  && i != FIOFF_REGNUM && i != FOOFF_REGNUM)
	{
	  unsigned char val[4];

	  memcpy (val, FXSAVE_ADDR (fxsave, i), 2);
	  val[2] = val[3] = 0;
	  if (i == FOP_REGNUM)
	    val[1] &= ((1 << 3) - 1);
	  else if (i== FTAG_REGNUM)
	    {
	      /* The fxsave area contains a simplified version of the
                 tag word.  We have to look at the actual 80-bit FP
                 data to recreate the traditional i387 tag word.  */

	      unsigned long ftag = 0;
	      int fpreg;
	      int top;

	      top = (((FXSAVE_ADDR (fxsave, FSTAT_REGNUM))[1] >> 3) & 0x7);

	      for (fpreg = 7; fpreg >= 0; fpreg--)
		{
		  int tag;

		  if (val[0] & (1 << fpreg))
		    {
		      int regnum = (fpreg + 8 - top) % 8 + FP0_REGNUM;
		      tag = i387_tag (FXSAVE_ADDR (fxsave, regnum));
		    }
		  else
		    tag = 3;		/* Empty */

		  ftag |= tag << (2 * fpreg);
		}
	      val[0] = ftag & 0xff;
	      val[1] = (ftag >> 8) & 0xff;
	    }
	  supply_register (i, val);
	}
      else
	supply_register (i, FXSAVE_ADDR (fxsave, i));
    }
}

/* Fill register REGNUM (if it is a floating-point or SSE register) in
   *FXSAVE with the value in GDB's register array.  If REGNUM is -1, do
   this for all registers.  This function doesn't touch any of the
   reserved bits in *FXSAVE.  */

void
i387_fill_fxsave (char *fxsave, int regnum)
{
  int i;

  for (i = FP0_REGNUM; i <= MXCSR_REGNUM; i++)
    if (regnum == -1 || regnum == i)
      {
	/* Most of the FPU control registers occupy only 16 bits in
           the fxsave area.  Give those a special treatment.  */
	if (i >= FPC_REGNUM && i < XMM0_REGNUM
	    && i != FIOFF_REGNUM && i != FDOFF_REGNUM)
	  {
	    unsigned char buf[4];

	    regcache_collect (i, buf);

	    if (i == FOP_REGNUM)
	      {
		/* The opcode occupies only 11 bits.  Make sure we
                   don't touch the other bits.  */
		buf[1] &= ((1 << 3) - 1);
		buf[1] |= ((FXSAVE_ADDR (fxsave, i))[1] & ~((1 << 3) - 1));
	      }
	    else if (i == FTAG_REGNUM)
	      {
		/* Converting back is much easier.  */

		unsigned short ftag;
		int fpreg;

		ftag = (buf[1] << 8) | buf[0];
		buf[0] = 0;
		buf[1] = 0;

		for (fpreg = 7; fpreg >= 0; fpreg--)
		  {
		    int tag = (ftag >> (fpreg * 2)) & 3;

		    if (tag != 3)
		      buf[0] |= (1 << fpreg);
		  }
	      }
	    memcpy (FXSAVE_ADDR (fxsave, i), buf, 2);
	  }
	else
	  regcache_collect (i, FXSAVE_ADDR (fxsave, i));
      }
}

/* Recreate the FTW (tag word) valid bits from the 80-bit FP data in
   *RAW.  */

static int
i387_tag (unsigned char *raw)
{
  int integer;
  unsigned int exponent;
  unsigned long fraction[2];

  integer = raw[7] & 0x80;
  exponent = (((raw[9] & 0x7f) << 8) | raw[8]);
  fraction[0] = ((raw[3] << 24) | (raw[2] << 16) | (raw[1] << 8) | raw[0]);
  fraction[1] = (((raw[7] & 0x7f) << 24) | (raw[6] << 16)
		 | (raw[5] << 8) | raw[4]);

  if (exponent == 0x7fff)
    {
      /* Special.  */
      return (2);
    }
  else if (exponent == 0x0000)
    {
      if (fraction[0] == 0x0000 && fraction[1] == 0x0000 && !integer)
	{
	  /* Zero.  */
	  return (1);
	}
      else
	{
	  /* Special.  */
	  return (2);
	}
    }
  else
    {
      if (integer)
	{
	  /* Valid.  */
	  return (0);
	}
      else
	{
	  /* Special.  */
	  return (2);
	}
    }
}
@


1.11
log
@* i387-nat.c (i387_supply_register, i387_fill_fsave,
i387_supply_fxsave, i387_fill_fxsave): Rewrite in order to do the
right thing on architectures with different endianness and/or
integer sizes.
@
text
@@


1.10
log
@* i387-nat.c (i387_fill_fsave): Use regcache_collect.
(i387_fill_fxsave): Likewise.
@
text
@d2 1
a2 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
d74 1
a74 1
      unsigned int val = *(unsigned short *) (FSAVE_ADDR (fsave, regnum));
d76 2
d79 2
a80 6
	{
	  val &= ((1 << 11) - 1);
	  supply_register (regnum, (char *) &val);
	}
      else
	supply_register (regnum, (char *) &val);
d117 1
a117 1
	    char buf[4];
d123 4
a126 8
		unsigned short oldval, newval;

		/* The opcode occupies only 11 bits.  */
		oldval = (*(unsigned short *) (FSAVE_ADDR (fsave, i)));
		newval = *(unsigned short *) buf;
		newval &= ((1 << 11) - 1);
		newval |= oldval & ~((1 << 11) - 1);
		memcpy (FSAVE_ADDR (fsave, i), &newval, 2);
d128 1
a128 2
	    else
	      memcpy (FSAVE_ADDR (fsave, i), buf, 2);
d191 1
a191 1
	  unsigned long val = *(unsigned short *) (FXSAVE_ADDR (fxsave, i));
d193 2
d196 1
a196 4
	    {
	      val &= ((1 << 11) - 1);
	      supply_register (i, (char *) &val);
	    }
a203 1
	      unsigned long fstat;
d207 1
a207 2
	      fstat = *(unsigned short *) (FXSAVE_ADDR (fxsave, FSTAT_REGNUM));
	      top = ((fstat >> 11) & 0x7);
d213 1
a213 1
		  if (val & (1 << fpreg))
d223 2
a224 1
	      supply_register (i, (char *) &ftag);
d226 1
a226 2
	  else
	    supply_register (i, (char *) &val);
d251 1
a251 1
	    char buf[4];
d257 4
a260 8
		unsigned short oldval, newval;

		/* The opcode occupies only 11 bits.  */
		oldval = (*(unsigned short *) (FXSAVE_ADDR (fxsave, i)));
		newval = *(unsigned short *) buf;
		newval &= ((1 << 11) - 1);
		newval |= oldval & ~((1 << 11) - 1);
		memcpy (FXSAVE_ADDR (fxsave, i), &newval, 2);
a265 1
		unsigned short val = 0;
d269 3
a271 1
		ftag = *(unsigned short *) buf;
d278 1
a278 1
		      val |= (1 << fpreg);
a279 2

		memcpy (FXSAVE_ADDR (fxsave, i), &val, 2);
d281 1
a281 2
	    else
	      memcpy (FXSAVE_ADDR (fxsave, i), buf, 2);
@


1.9
log
@* config/i386/tm-i386.h (FP7_REGNUM, FIRST_FPU_CTRL_REGNUM,
FCTRL_REGNUM, FPC_REGNUM, FSTAT_REGNUM, FTAG_REGNUM, FCS_REGNUM,
FCOFF_REGNUM, FDS_REGNUM, FDOFF_REGNUM, FOP_REGNUM,
LAST_FPU_CTRL_REGNUM, XMM0_REGNUM, XMM7_REGNUM, MXCSR_REGNUM,
IS_FP_REGNUM, IS_SSE_REGNUM): Removed.
(FP0_REGNUM): Define conditionally depending on HAVE_I387_REGS.
(SIZEOF_FPU_CTRL_REGS): Hardcode value.
* i386-tdep.h (struct gdbarch_tdep): Change such that it contains
a single member `num_xmm_regs'.
(FPC_REGNUM): New macro.
(FIRST_FPU_REGNUM, LAST_FPU_REGNUM, FISRT_XMM_REGNUM,
LAST_XMM_REGNUM, MXCSR_REGNUM, FIRST_FPU_CTRL_REGNUM,
LAST_FPU_CTRL_REGNUM): Removed.
(FCTRL_REGNUM, FSTAT_REGNUM, FTAG_REGNUM, FOP_REGNUM, XMM0_REGNUM,
MXCSR_REGNUM): Define unconditionally.  Change macros to match the
comment describing the register layout.
(FISEG_REGNUM, FIOFF_REGNUM, FOSEG_REGNUM, FOOFF_REGNUM): New macros.
(FP_REGNUM_P, FPC_REGNUM_P, SSE_REGNUM_P): New macros.
(IS_FP_REGNUM, IS_FPU_CTRL_REGNUM, IS_SSE_REGNUM): Make obsolete,
unconditionally define in terms of FP_REGNUM_P, FPC_REGNUM_P and
SSE_REGNUM_P).
(FCS_REGNUM, FCOFF_REGNUM, FDS_REGNUM, FDOFF_REGNUM): Make
obsolete, unconditionally define in terms of FISEG_REGNUM,
FIOFF_REGNUM, FOSEG_REGNUM, FOOFF_REGNUM.
* i386-tdep.c (i386_gdbarch_init): Initialize `num_xmm_regs'
member of `struct gdbarch_tdep'.
* x86-64-tdep.c (i386_gdbarch_init): Change initialization of
`struct gdbarch_tdep'.
* i387-nat.c (FCS_REGNUM, FCOFF_REGNUM, FDS_REGNUM, FDOFF_REGNUM):
Replace with FISEG_REGNUM, FIOFF_REGNUM, FOSEG_REGNUM and
FOOFF_REGNUM.  Use FPC_REGNUM instead of FIRST_FPU_CTRL_REGNUM.
Use XMM0_REGNUM instead of LAST_FPU_CTRL_REGNUM.
@
text
@d119 4
d129 1
a129 1
		newval = *(unsigned short *) &registers[REGISTER_BYTE (i)];
d135 1
a135 1
	      memcpy (FSAVE_ADDR (fsave, i), &registers[REGISTER_BYTE (i)], 2);
d138 1
a138 2
	  memcpy (FSAVE_ADDR (fsave, i), &registers[REGISTER_BYTE (i)],
		  REGISTER_RAW_SIZE (i));
d261 4
d271 1
a271 1
		newval = *(unsigned short *) &registers[REGISTER_BYTE (i)];
d284 1
a284 1
		ftag = *(unsigned short *) &registers[REGISTER_BYTE (i)];
d297 1
a297 2
	      memcpy (FXSAVE_ADDR (fxsave, i),
		      &registers[REGISTER_BYTE (i)], 2);
d300 1
a300 2
	  memcpy (FXSAVE_ADDR (fxsave, i), &registers[REGISTER_BYTE (i)],
		  REGISTER_RAW_SIZE (i));
@


1.8
log
@	* i387-nat.c (i387_fill_fxsave): Change type of ``val'' from char
	to short so that we don't memcpy() beyond the end of this buffer.
	Also, change shift value used in computing val to account for the
	fact that only eight bits are used.
@
text
@d52 4
a55 4
  16,				/* FCS_REGNUM (16 bits).  */
  12,				/* FCOFF_REGNUM.  */
  24,				/* FDS_REGNUM.  */
  20,				/* FDOFF_REGNUM.  */
d71 2
a72 2
  if (regnum >= FIRST_FPU_CTRL_REGNUM
      && regnum != FCOFF_REGNUM && regnum != FDOFF_REGNUM)
d97 1
a97 1
  for (i = FP0_REGNUM; i <= LAST_FPU_CTRL_REGNUM; i++)
d111 1
a111 1
  for (i = FP0_REGNUM; i <= LAST_FPU_CTRL_REGNUM; i++)
d116 2
a117 2
	if (i >= FIRST_FPU_CTRL_REGNUM
	    && i != FCOFF_REGNUM && i != FDOFF_REGNUM)
d157 4
a160 4
  12,				/* FCS_REGNUM (16 bits).  */
  8,				/* FCOFF_REGNUM.  */
  20,				/* FDS_REGNUM (16 bits).  */
  16,				/* FDOFF_REGNUM.  */
d192 2
a193 2
      if (i >= FIRST_FPU_CTRL_REGNUM && i < XMM0_REGNUM
	  && i != FCOFF_REGNUM && i != FDOFF_REGNUM)
d255 2
a256 2
	if (i >= FIRST_FPU_CTRL_REGNUM && i < XMM0_REGNUM
	    && i != FCOFF_REGNUM && i != FDOFF_REGNUM)
@


1.7
log
@* i386-tdep.h (FPU_REG_RAW_SIZE): Define unconditionally.
* i387-nat.c, i387-tdep.c: Unconditionally include "i386-tdep.h".
* config/i386/tm-i386.h (FPU_REG_RAW_SIZE): Removed.
(SIZEOF_FPU_REGS): Don't use FPU_REG_RAW_SIZE here.
@
text
@d273 1
a273 1
		unsigned char val = 0;
d284 1
a284 1
		      val |= (1 << (fpreg * 2));
@


1.6
log
@* i386-tdep.h: New file.
* i387-nat.c: Include i386-tdep.h when multiarch.
* i387-tdep.c: Ditto.
@
text
@a26 2

#if GDB_MULTI_ARCH > 0
a27 1
#endif
@


1.5
log
@	(Changes from Kevin Buettner, with minor update by Don Howard.)

	* i387-nat.c (i387_supply_fxsave, i387_fill_fxsave, i387_tag): Fix
	typos in which hexadecimal constants were really intended to be
	binary constants.
	(i387_tag): Swap logic regarding zero vs non-zero exponents.
@
text
@d28 4
@


1.5.4.1
log
@Fix x86 floating point vs. thread problem in 5.1 branch.
@
text
@d272 1
a272 1
		unsigned short val = 0;
d283 1
a283 1
		      val |= (1 << fpreg);
@


1.4
log
@Create new file regcache.h.  Update all uses.
@
text
@d213 1
a213 1
	      top = ((fstat >> 11) & 0x111);
d217 1
a217 1
		  int tag = 0x11;
d224 2
d280 1
a280 1
		    int tag = (ftag >> (fpreg * 2)) & 0x11;
d282 2
a283 2
		    if (tag != 0x11)
		      val |= (1 << fpreg);
d317 1
a317 1
      return (0x10);
d321 1
a321 1
      if (integer)
d323 2
a324 2
	  /* Valid.  */
	  return (0x00);
d329 1
a329 1
	  return (0x10);
d334 1
a334 1
      if (fraction[0] == 0x0000 && fraction[1] == 0x0000 && !integer)
d336 2
a337 2
	  /* Zero.  */
	  return (0x01);
d342 1
a342 1
	  return (0x10);
@


1.3
log
@* i387-nat.c: Include "i387-nat.h".  Use regnum instead of regno
consistently for parameter names.  Fix comments accordingly.
(i387_supply_register): New function.
(i387_supply_fsave): Implement using i387_supply_register.
* i387-nat.h: Use regnum instead of regno consistently for
parameter names.  Fix comments accordingly.
(i387_supply_register): New prototype.
@
text
@d24 1
@


1.2
log
@* i387-nat.h (i387_supply_fsave, i387_fill_fsave): Make extern.
(i387_supply_fxsave, i387_fill_fxsave): New prototypes.
* i387-nat.c (i387_supply_fsave): Declare `val' as `unsigned int'.
(fxsave_offset): New variable.
(FXSAVE_ADDR): New macro.
(i387_supply_fxsave, i387_fill_fxsave, i387_tag): New functions.
@
text
@d2 1
a2 1
   Copyright 2000 Free Software Foundation, Inc.
d25 2
d33 1
a33 1
/* At fsave_offset[REGNO] you'll find the offset to the location in
d35 1
a35 1
   register REGNO is stored.  */
d60 26
d96 1
a96 19
    {
      /* Most of the FPU control registers occupy only 16 bits in
	 the fsave area.  Give those a special treatment.  */
      if (i >= FIRST_FPU_CTRL_REGNUM
	  && i != FCOFF_REGNUM && i != FDOFF_REGNUM)
	{
	  unsigned int val = *(unsigned short *) (FSAVE_ADDR (fsave, i));

	  if (i == FOP_REGNUM)
	    {
	      val &= ((1 << 11) - 1);
	      supply_register (i, (char *) &val);
	    }
	  else
	    supply_register (i, (char *) &val);
	}
      else
	supply_register (i, FSAVE_ADDR (fsave, i));
    }
d99 2
a100 2
/* Fill register REGNO (if it is a floating-point register) in *FSAVE
   with the value in GDB's register array.  If REGNO is -1, do this
d105 1
a105 1
i387_fill_fsave (char *fsave, int regno)
d110 1
a110 1
    if (regno == -1 || regno == i)
d138 1
a138 1
/* At fxsave_offset[REGNO] you'll find the offset to the location in
d140 1
a140 1
   register REGNO is stored.  */
d236 2
a237 2
/* Fill register REGNO (if it is a floating-point or SSE register) in
   *FXSAVE with the value in GDB's register array.  If REGNO is -1, do
d242 1
a242 1
i387_fill_fxsave (char *fxsave, int regno)
d247 1
a247 1
    if (regno == -1 || regno == i)
@


1.1
log
@* i387-nat.h, i387-nat.c: New files.
@
text
@d2 1
a2 1
   Copyright (C) 2000 Free Software Foundation, Inc.
d74 1
a74 1
	  unsigned val = *(unsigned short *) (FSAVE_ADDR (fsave, i));
d125 207
@

