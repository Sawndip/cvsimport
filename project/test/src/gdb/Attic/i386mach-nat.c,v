head	1.10;
access;
symbols
	gdb_5_3-2002-12-12-release:1.9
	carlton_dictionary-20021115-merge:1.9
	kseitz_interps-20021105-merge:1.9
	kseitz_interps-20021103-merge:1.9
	drow-cplus-merge-20021020:1.9
	drow-cplus-merge-20021025:1.9
	carlton_dictionary-20021025-merge:1.9
	carlton_dictionary-20021011-merge:1.9
	drow-cplus-branch:1.9.0.10
	drow-cplus-branchpoint:1.9
	kseitz_interps-20020930-merge:1.9
	carlton_dictionary-20020927-merge:1.9
	carlton_dictionary-branch:1.9.0.8
	carlton_dictionary-20020920-branchpoint:1.9
	gdb_5_3-branch:1.9.0.6
	gdb_5_3-2002-09-04-branchpoint:1.9
	kseitz_interps-20020829-merge:1.9
	cagney_sysregs-20020825-branch:1.9.0.4
	cagney_sysregs-20020825-branchpoint:1.9
	readline_4_3-import-branch:1.9.0.2
	readline_4_3-import-branchpoint:1.9
	gdb_5_2_1-2002-07-23-release:1.8
	kseitz_interps-20020528-branch:1.8.0.16
	kseitz_interps-20020528-branchpoint:1.8
	cagney_regbuf-20020515-branch:1.8.0.14
	cagney_regbuf-20020515-branchpoint:1.8
	jimb-macro-020506-branch:1.8.0.12
	jimb-macro-020506-branchpoint:1.8
	gdb_5_2-2002-04-29-release:1.8
	gdb_5_2-branch:1.8.0.10
	gdb_5_2-2002-03-03-branchpoint:1.8
	gdb_5_1_1-2002-01-24-release:1.8
	gdb_5_1_0_1-2002-01-03-release:1.8
	cygnus_cvs_20020108_pre:1.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.8
	gdb_5_1_0_1-2002-01-03-branch:1.8.0.8
	gdb_5_1-2001-11-21-release:1.8
	gdb_s390-2001-09-26-branch:1.8.0.6
	gdb_s390-2001-09-26-branchpoint:1.8
	gdb_5_1-2001-07-29-branch:1.8.0.4
	gdb_5_1-2001-07-29-branchpoint:1.8
	dberlin-typesystem-branch:1.8.0.2
	dberlin-typesystem-branchpoint:1.8
	gdb-post-ptid_t-2001-05-03:1.8
	gdb-pre-ptid_t-2001-05-03:1.7
	insight-precleanup-2001-01-01:1.5
	gdb-post-protoization-2000-07-29:1.4
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb-post-params-removal-2000-06-04:1.3
	gdb-pre-params-removal-2000-06-04:1.3
	gdb-post-params-removal-2000-05-28:1.3
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.1.1.4
	gdb_4_18_2-2000-05-18-release:1.1.1.4
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.4
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.4
	gdb_5_0-2000-04-10-branch:1.1.1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.4
	repo-unification-2000-02-06:1.1.1.4
	insight-2000-02-04:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.4
	gdb-2000-01-26:1.1.1.4
	gdb-2000-01-24:1.1.1.4
	gdb-2000-01-17:1.1.1.4
	gdb-2000-01-10:1.1.1.4
	gdb-2000-01-05:1.1.1.4
	gdb-1999-12-21:1.1.1.4
	gdb-1999-12-13:1.1.1.4
	gdb-1999-12-07:1.1.1.4
	gdb-1999-12-06:1.1.1.4
	gdb-1999-11-16:1.1.1.4
	gdb-1999-11-08:1.1.1.4
	gdb-1999-11-01:1.1.1.4
	gdb-1999-10-25:1.1.1.4
	gdb-1999-10-18:1.1.1.4
	gdb-1999-10-11:1.1.1.4
	gdb-1999-10-04:1.1.1.4
	gdb-1999-09-28:1.1.1.3
	gdb-1999-09-21:1.1.1.3
	gdb-1999-09-13:1.1.1.3
	gdb-1999-09-08:1.1.1.3
	gdb-1999-08-30:1.1.1.3
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.10
date	2002.12.16.20.39.06;	author cagney;	state dead;
branches;
next	1.9;

1.9
date	2002.08.18.16.32.14;	author kettenis;	state Exp;
branches
	1.9.8.1
	1.9.10.1;
next	1.8;

1.8
date	2001.05.04.04.15.25;	author kevinb;	state Exp;
branches
	1.8.16.1;
next	1.7;

1.7
date	2001.03.06.08.21.08;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.01.01.39.20;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.07.19.27.15;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.30.01.48.25;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.28.01.12.27;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.10.17.38.16;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.02;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.02;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.24.27;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.20.07.03;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.10.05.23.08.20;	author jsm;	state Exp;
branches;
next	;

1.8.16.1
date	2002.08.30.22.52.44;	author kseitz;	state Exp;
branches;
next	;

1.9.8.1
date	2002.12.23.19.38.29;	author carlton;	state dead;
branches;
next	;

1.9.10.1
date	2003.12.14.20.27.17;	author drow;	state dead;
branches;
next	;


desc
@@


1.10
log
@2002-12-16  Andrew Cagney  <ac131313@@redhat.com>

	* config/arc/arc.mt, config/arc/tm-arc.h: Delete.
	* config/d30v/d30v.mt, config/d30v/tm-d30v.h: Delete.
	* config/fr30/fr30.mt, config/fr30/tm-fr30.h: Delete.
	* config/i386/i386aix.mh, config/i386/i386aix.mt: Delete.
	* config/i386/i386m3.mh, config/i386/i386m3.mt: Delete.
	* config/i386/i386mach.mh, config/i386/i386os9k.mt: Delete.
	* config/i386/nm-i386aix.h, config/i386/nm-i386mach.h: Delete.
	* config/i386/nm-m3.h, config/i386/tm-i386aix.h: Delete.
	* config/i386/tm-i386m3.h, config/i386/tm-i386mk.h: Delete.
	* config/i386/xm-i386aix.h, config/i386/xm-i386m3.h: Delete.
	* config/i386/xm-i386mach.h, config/i386/xm-i386mk.h: Delete.
	* config/i960/mon960.mt, config/i960/nindy960.mt: Delete.
	* config/i960/tm-i960.h, config/i960/tm-mon960.h: Delete.
	* config/i960/tm-nindy960.h, config/i960/tm-vx960.h: Delete.
	* config/i960/vxworks960.mt, config/m68k/apollo68b.mh: Delete.
	* config/m68k/apollo68b.mt, config/m68k/apollo68v.mh: Delete.
	* config/m68k/hp300bsd.mh, config/m68k/hp300bsd.mt: Delete.
	* config/m68k/hp300hpux.mh, config/m68k/hp300hpux.mt: Delete.
	* config/m88k/delta88.mh, config/m88k/delta88.mt: Delete.
	* config/m88k/delta88v4.mh, config/m88k/delta88v4.mt: Delete.
	* config/m88k/m88k.mh, config/m88k/m88k.mt: Delete.
	* config/m88k/nm-delta88v4.h, config/m88k/nm-m88k.h: Delete.
	* config/m88k/tm-delta88.h, config/m88k/tm-delta88v4.h: Delete.
	* config/m88k/tm-m88k.h, config/m88k/xm-delta88.h: Delete.
	* config/m88k/xm-dgux.h: Delete.
	* fr30-tdep.c, i386aix-nat.c, i386m3-nat.c: Delete.
	* i386mach-nat.c, i960-tdep.c, m88k-nat.c: Delete.
	* os9kread.c, remote-bug.c, remote-nindy.c: Delete.
	* remote-nrom.c, remote-os9k.c, remote-vx960.c: Delete.
	* d30v-tdep.c, arc-tdep.c, cxux-nat.c, dst.h, dstread.c: Delete.
	* ch-exp.c, ch-lang.c, ch-lang.h, ch-typeprint.c: Delete.
	* ch-valprint.c: Delete.
@
text
@// OBSOLETE /* Native dependent code for Mach 386's for GDB, the GNU debugger.
// OBSOLETE    Copyright 1986, 1987, 1989, 1991, 1992, 1993, 1995, 1996, 1999, 2000,
// OBSOLETE    2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #include "defs.h"
// OBSOLETE #include "frame.h"
// OBSOLETE #include "inferior.h"
// OBSOLETE #include "gdbcore.h"
// OBSOLETE #include "regcache.h"
// OBSOLETE 
// OBSOLETE #include <sys/param.h>
// OBSOLETE #include <sys/dir.h>
// OBSOLETE #include <sys/user.h>
// OBSOLETE #include <signal.h>
// OBSOLETE #include <sys/ioctl.h>
// OBSOLETE #include <fcntl.h>
// OBSOLETE 
// OBSOLETE #include <sys/ptrace.h>
// OBSOLETE #include <machine/reg.h>
// OBSOLETE 
// OBSOLETE #include <sys/file.h>
// OBSOLETE #include "gdb_stat.h"
// OBSOLETE #include <sys/core.h>
// OBSOLETE 
// OBSOLETE static void fetch_core_registers (char *, unsigned, int, CORE_ADDR);
// OBSOLETE 
// OBSOLETE void
// OBSOLETE fetch_inferior_registers (int regno)
// OBSOLETE {
// OBSOLETE   struct regs inferior_registers;
// OBSOLETE   struct fp_state inferior_fp_registers;
// OBSOLETE 
// OBSOLETE   registers_fetched ();
// OBSOLETE 
// OBSOLETE   ptrace (PTRACE_GETREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_registers);
// OBSOLETE   ptrace (PTRACE_GETFPREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);
// OBSOLETE 
// OBSOLETE   memcpy (registers, &inferior_registers, sizeof inferior_registers);
// OBSOLETE 
// OBSOLETE   memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	  inferior_fp_registers.f_st,
// OBSOLETE 	  sizeof inferior_fp_registers.f_st);
// OBSOLETE   memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
// OBSOLETE 	  &inferior_fp_registers.f_ctrl,
// OBSOLETE 	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Store our register values back into the inferior.
// OBSOLETE    If REGNO is -1, do this for all registers.
// OBSOLETE    Otherwise, REGNO specifies which register (so we can save time).  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE store_inferior_registers (int regno)
// OBSOLETE {
// OBSOLETE   struct regs inferior_registers;
// OBSOLETE   struct fp_state inferior_fp_registers;
// OBSOLETE 
// OBSOLETE   memcpy (&inferior_registers, registers, 20 * 4);
// OBSOLETE 
// OBSOLETE   memcpy (inferior_fp_registers.f_st, &registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	  sizeof inferior_fp_registers.f_st);
// OBSOLETE   memcpy (&inferior_fp_registers.f_ctrl,
// OBSOLETE 	  &registers[REGISTER_BYTE (FPC_REGNUM)],
// OBSOLETE 	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
// OBSOLETE 
// OBSOLETE #ifdef PTRACE_FP_BUG
// OBSOLETE   if (regno == FP_REGNUM || regno == -1)
// OBSOLETE     /* Storing the frame pointer requires a gross hack, in which an
// OBSOLETE        instruction that moves eax into ebp gets single-stepped.  */
// OBSOLETE     {
// OBSOLETE       int stack = inferior_registers.r_reg[SP_REGNUM];
// OBSOLETE       int stuff = ptrace (PTRACE_PEEKDATA, PIDGET (inferior_ptid),
// OBSOLETE 			  (PTRACE_ARG3_TYPE) stack);
// OBSOLETE       int reg = inferior_registers.r_reg[EAX];
// OBSOLETE       inferior_registers.r_reg[EAX] =
// OBSOLETE 	inferior_registers.r_reg[FP_REGNUM];
// OBSOLETE       ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
// OBSOLETE 	      (PTRACE_ARG3_TYPE) & inferior_registers);
// OBSOLETE       ptrace (PTRACE_POKEDATA, PIDGET (inferior_ptid),
// OBSOLETE               (PTRACE_ARG3_TYPE) stack, 0xc589);
// OBSOLETE       ptrace (PTRACE_SINGLESTEP, PIDGET (inferior_ptid),
// OBSOLETE               (PTRACE_ARG3_TYPE) stack, 0);
// OBSOLETE       wait (0);
// OBSOLETE       ptrace (PTRACE_POKEDATA, PIDGET (inferior_ptid),
// OBSOLETE               (PTRACE_ARG3_TYPE) stack, stuff);
// OBSOLETE       inferior_registers.r_reg[EAX] = reg;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE   ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_registers);
// OBSOLETE   ptrace (PTRACE_SETFPREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);
// OBSOLETE }
// OBSOLETE 
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Provide registers to GDB from a core file.
// OBSOLETE 
// OBSOLETE    CORE_REG_SECT points to an array of bytes, which were obtained from
// OBSOLETE    a core file which BFD thinks might contain register contents. 
// OBSOLETE    CORE_REG_SIZE is its size.
// OBSOLETE 
// OBSOLETE    WHICH says which register set corelow suspects this is:
// OBSOLETE      0 --- the general-purpose register set
// OBSOLETE      2 --- the floating-point register set
// OBSOLETE 
// OBSOLETE    REG_ADDR isn't used.  */
// OBSOLETE 
// OBSOLETE static void
// OBSOLETE fetch_core_registers (char *core_reg_sect, unsigned core_reg_size,
// OBSOLETE 		      int which, CORE_ADDR reg_addr)
// OBSOLETE {
// OBSOLETE   int val;
// OBSOLETE 
// OBSOLETE   switch (which)
// OBSOLETE     {
// OBSOLETE     case 0:
// OBSOLETE     case 1:
// OBSOLETE       memcpy (registers, core_reg_sect, core_reg_size);
// OBSOLETE       break;
// OBSOLETE 
// OBSOLETE     case 2:
// OBSOLETE       memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	      core_reg_sect,
// OBSOLETE 	      core_reg_size);	/* FIXME, probably bogus */
// OBSOLETE #ifdef FPC_REGNUM
// OBSOLETE       memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
// OBSOLETE 	      &corestr.c_fpu.f_fpstatus.f_ctrl,
// OBSOLETE 	      sizeof corestr.c_fpu.f_fpstatus -
// OBSOLETE 	      sizeof corestr.c_fpu.f_fpstatus.f_st);
// OBSOLETE #endif
// OBSOLETE       break;
// OBSOLETE     }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Register that we are able to handle i386mach core file formats.
// OBSOLETE    FIXME: is this really bfd_target_unknown_flavour? */
// OBSOLETE 
// OBSOLETE static struct core_fns i386mach_core_fns =
// OBSOLETE {
// OBSOLETE   bfd_target_unknown_flavour,		/* core_flavour */
// OBSOLETE   default_check_format,			/* check_format */
// OBSOLETE   default_core_sniffer,			/* core_sniffer */
// OBSOLETE   fetch_core_registers,			/* core_read_registers */
// OBSOLETE   NULL					/* next */
// OBSOLETE };
// OBSOLETE 
// OBSOLETE void
// OBSOLETE _initialize_core_i386mach (void)
// OBSOLETE {
// OBSOLETE   add_core_fns (&i386mach_core_fns);
// OBSOLETE }
@


1.9
log
@* NEWS: Mention that the i[3456]-*mach3*, i[3456]-*-mach* and
i[3456]-*-osf1mk* configurations have been made obsolete.
* configure.host: Make i[3456]86-*-mach3*, i[3456]86-*mach* and
i[3456]86-*-osf1mk* hosts obsolete.
* confighure.tgt: Make i[3456]86-*-mach3*, i[3456]86-*-osf1mk*
targets obsolete.
* config/i386/i386mach.mh, config/i386/nm-i386mach.h,
config/i386/xm-i386mach.h, config/i386/i386m3.mh,
config/i386/i386m3.mt, config/i386/nm-m3.h,
config/i386/tm-i386m3.h, config/i386/xm-i386m3.h,
config/i386/i386mk.mh, config/i386/i386mk.mt,
config/i386/tm-i386mk.h, config/i386/xm-i386mk.h: Make files
obsolete.
* i386mach-nat.c, i386m3-nat.c: Make files obsolete.
* Makefile.in (ALLDEPFILES): Remove i386mach.c i386m3-nat.c
(i386mach-nat.o, i386m3-nat.o):Make targets obsolete.
@
text
@@


1.9.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.9.8.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.8
log
@Phase 1 of the ptid_t changes.
@
text
@d1 172
a172 172
/* Native dependent code for Mach 386's for GDB, the GNU debugger.
   Copyright 1986, 1987, 1989, 1991, 1992, 1993, 1995, 1996, 1999, 2000,
   2001 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "frame.h"
#include "inferior.h"
#include "gdbcore.h"
#include "regcache.h"

#include <sys/param.h>
#include <sys/dir.h>
#include <sys/user.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <fcntl.h>

#include <sys/ptrace.h>
#include <machine/reg.h>

#include <sys/file.h>
#include "gdb_stat.h"
#include <sys/core.h>

static void fetch_core_registers (char *, unsigned, int, CORE_ADDR);

void
fetch_inferior_registers (int regno)
{
  struct regs inferior_registers;
  struct fp_state inferior_fp_registers;

  registers_fetched ();

  ptrace (PTRACE_GETREGS, PIDGET (inferior_ptid),
	  (PTRACE_ARG3_TYPE) & inferior_registers);
  ptrace (PTRACE_GETFPREGS, PIDGET (inferior_ptid),
	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);

  memcpy (registers, &inferior_registers, sizeof inferior_registers);

  memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
	  inferior_fp_registers.f_st,
	  sizeof inferior_fp_registers.f_st);
  memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
	  &inferior_fp_registers.f_ctrl,
	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
}

/* Store our register values back into the inferior.
   If REGNO is -1, do this for all registers.
   Otherwise, REGNO specifies which register (so we can save time).  */

void
store_inferior_registers (int regno)
{
  struct regs inferior_registers;
  struct fp_state inferior_fp_registers;

  memcpy (&inferior_registers, registers, 20 * 4);

  memcpy (inferior_fp_registers.f_st, &registers[REGISTER_BYTE (FP0_REGNUM)],
	  sizeof inferior_fp_registers.f_st);
  memcpy (&inferior_fp_registers.f_ctrl,
	  &registers[REGISTER_BYTE (FPC_REGNUM)],
	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);

#ifdef PTRACE_FP_BUG
  if (regno == FP_REGNUM || regno == -1)
    /* Storing the frame pointer requires a gross hack, in which an
       instruction that moves eax into ebp gets single-stepped.  */
    {
      int stack = inferior_registers.r_reg[SP_REGNUM];
      int stuff = ptrace (PTRACE_PEEKDATA, PIDGET (inferior_ptid),
			  (PTRACE_ARG3_TYPE) stack);
      int reg = inferior_registers.r_reg[EAX];
      inferior_registers.r_reg[EAX] =
	inferior_registers.r_reg[FP_REGNUM];
      ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
	      (PTRACE_ARG3_TYPE) & inferior_registers);
      ptrace (PTRACE_POKEDATA, PIDGET (inferior_ptid),
              (PTRACE_ARG3_TYPE) stack, 0xc589);
      ptrace (PTRACE_SINGLESTEP, PIDGET (inferior_ptid),
              (PTRACE_ARG3_TYPE) stack, 0);
      wait (0);
      ptrace (PTRACE_POKEDATA, PIDGET (inferior_ptid),
              (PTRACE_ARG3_TYPE) stack, stuff);
      inferior_registers.r_reg[EAX] = reg;
    }
#endif
  ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
	  (PTRACE_ARG3_TYPE) & inferior_registers);
  ptrace (PTRACE_SETFPREGS, PIDGET (inferior_ptid),
	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);
}



/* Provide registers to GDB from a core file.

   CORE_REG_SECT points to an array of bytes, which were obtained from
   a core file which BFD thinks might contain register contents. 
   CORE_REG_SIZE is its size.

   WHICH says which register set corelow suspects this is:
     0 --- the general-purpose register set
     2 --- the floating-point register set

   REG_ADDR isn't used.  */

static void
fetch_core_registers (char *core_reg_sect, unsigned core_reg_size,
		      int which, CORE_ADDR reg_addr)
{
  int val;

  switch (which)
    {
    case 0:
    case 1:
      memcpy (registers, core_reg_sect, core_reg_size);
      break;

    case 2:
      memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
	      core_reg_sect,
	      core_reg_size);	/* FIXME, probably bogus */
#ifdef FPC_REGNUM
      memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
	      &corestr.c_fpu.f_fpstatus.f_ctrl,
	      sizeof corestr.c_fpu.f_fpstatus -
	      sizeof corestr.c_fpu.f_fpstatus.f_st);
#endif
      break;
    }
}


/* Register that we are able to handle i386mach core file formats.
   FIXME: is this really bfd_target_unknown_flavour? */

static struct core_fns i386mach_core_fns =
{
  bfd_target_unknown_flavour,		/* core_flavour */
  default_check_format,			/* check_format */
  default_core_sniffer,			/* core_sniffer */
  fetch_core_registers,			/* core_read_registers */
  NULL					/* next */
};

void
_initialize_core_i386mach (void)
{
  add_core_fns (&i386mach_core_fns);
}
@


1.8.16.1
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d1 172
a172 172
// OBSOLETE /* Native dependent code for Mach 386's for GDB, the GNU debugger.
// OBSOLETE    Copyright 1986, 1987, 1989, 1991, 1992, 1993, 1995, 1996, 1999, 2000,
// OBSOLETE    2001 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #include "defs.h"
// OBSOLETE #include "frame.h"
// OBSOLETE #include "inferior.h"
// OBSOLETE #include "gdbcore.h"
// OBSOLETE #include "regcache.h"
// OBSOLETE 
// OBSOLETE #include <sys/param.h>
// OBSOLETE #include <sys/dir.h>
// OBSOLETE #include <sys/user.h>
// OBSOLETE #include <signal.h>
// OBSOLETE #include <sys/ioctl.h>
// OBSOLETE #include <fcntl.h>
// OBSOLETE 
// OBSOLETE #include <sys/ptrace.h>
// OBSOLETE #include <machine/reg.h>
// OBSOLETE 
// OBSOLETE #include <sys/file.h>
// OBSOLETE #include "gdb_stat.h"
// OBSOLETE #include <sys/core.h>
// OBSOLETE 
// OBSOLETE static void fetch_core_registers (char *, unsigned, int, CORE_ADDR);
// OBSOLETE 
// OBSOLETE void
// OBSOLETE fetch_inferior_registers (int regno)
// OBSOLETE {
// OBSOLETE   struct regs inferior_registers;
// OBSOLETE   struct fp_state inferior_fp_registers;
// OBSOLETE 
// OBSOLETE   registers_fetched ();
// OBSOLETE 
// OBSOLETE   ptrace (PTRACE_GETREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_registers);
// OBSOLETE   ptrace (PTRACE_GETFPREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);
// OBSOLETE 
// OBSOLETE   memcpy (registers, &inferior_registers, sizeof inferior_registers);
// OBSOLETE 
// OBSOLETE   memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	  inferior_fp_registers.f_st,
// OBSOLETE 	  sizeof inferior_fp_registers.f_st);
// OBSOLETE   memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
// OBSOLETE 	  &inferior_fp_registers.f_ctrl,
// OBSOLETE 	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Store our register values back into the inferior.
// OBSOLETE    If REGNO is -1, do this for all registers.
// OBSOLETE    Otherwise, REGNO specifies which register (so we can save time).  */
// OBSOLETE 
// OBSOLETE void
// OBSOLETE store_inferior_registers (int regno)
// OBSOLETE {
// OBSOLETE   struct regs inferior_registers;
// OBSOLETE   struct fp_state inferior_fp_registers;
// OBSOLETE 
// OBSOLETE   memcpy (&inferior_registers, registers, 20 * 4);
// OBSOLETE 
// OBSOLETE   memcpy (inferior_fp_registers.f_st, &registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	  sizeof inferior_fp_registers.f_st);
// OBSOLETE   memcpy (&inferior_fp_registers.f_ctrl,
// OBSOLETE 	  &registers[REGISTER_BYTE (FPC_REGNUM)],
// OBSOLETE 	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
// OBSOLETE 
// OBSOLETE #ifdef PTRACE_FP_BUG
// OBSOLETE   if (regno == FP_REGNUM || regno == -1)
// OBSOLETE     /* Storing the frame pointer requires a gross hack, in which an
// OBSOLETE        instruction that moves eax into ebp gets single-stepped.  */
// OBSOLETE     {
// OBSOLETE       int stack = inferior_registers.r_reg[SP_REGNUM];
// OBSOLETE       int stuff = ptrace (PTRACE_PEEKDATA, PIDGET (inferior_ptid),
// OBSOLETE 			  (PTRACE_ARG3_TYPE) stack);
// OBSOLETE       int reg = inferior_registers.r_reg[EAX];
// OBSOLETE       inferior_registers.r_reg[EAX] =
// OBSOLETE 	inferior_registers.r_reg[FP_REGNUM];
// OBSOLETE       ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
// OBSOLETE 	      (PTRACE_ARG3_TYPE) & inferior_registers);
// OBSOLETE       ptrace (PTRACE_POKEDATA, PIDGET (inferior_ptid),
// OBSOLETE               (PTRACE_ARG3_TYPE) stack, 0xc589);
// OBSOLETE       ptrace (PTRACE_SINGLESTEP, PIDGET (inferior_ptid),
// OBSOLETE               (PTRACE_ARG3_TYPE) stack, 0);
// OBSOLETE       wait (0);
// OBSOLETE       ptrace (PTRACE_POKEDATA, PIDGET (inferior_ptid),
// OBSOLETE               (PTRACE_ARG3_TYPE) stack, stuff);
// OBSOLETE       inferior_registers.r_reg[EAX] = reg;
// OBSOLETE     }
// OBSOLETE #endif
// OBSOLETE   ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_registers);
// OBSOLETE   ptrace (PTRACE_SETFPREGS, PIDGET (inferior_ptid),
// OBSOLETE 	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);
// OBSOLETE }
// OBSOLETE 
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Provide registers to GDB from a core file.
// OBSOLETE 
// OBSOLETE    CORE_REG_SECT points to an array of bytes, which were obtained from
// OBSOLETE    a core file which BFD thinks might contain register contents. 
// OBSOLETE    CORE_REG_SIZE is its size.
// OBSOLETE 
// OBSOLETE    WHICH says which register set corelow suspects this is:
// OBSOLETE      0 --- the general-purpose register set
// OBSOLETE      2 --- the floating-point register set
// OBSOLETE 
// OBSOLETE    REG_ADDR isn't used.  */
// OBSOLETE 
// OBSOLETE static void
// OBSOLETE fetch_core_registers (char *core_reg_sect, unsigned core_reg_size,
// OBSOLETE 		      int which, CORE_ADDR reg_addr)
// OBSOLETE {
// OBSOLETE   int val;
// OBSOLETE 
// OBSOLETE   switch (which)
// OBSOLETE     {
// OBSOLETE     case 0:
// OBSOLETE     case 1:
// OBSOLETE       memcpy (registers, core_reg_sect, core_reg_size);
// OBSOLETE       break;
// OBSOLETE 
// OBSOLETE     case 2:
// OBSOLETE       memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
// OBSOLETE 	      core_reg_sect,
// OBSOLETE 	      core_reg_size);	/* FIXME, probably bogus */
// OBSOLETE #ifdef FPC_REGNUM
// OBSOLETE       memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
// OBSOLETE 	      &corestr.c_fpu.f_fpstatus.f_ctrl,
// OBSOLETE 	      sizeof corestr.c_fpu.f_fpstatus -
// OBSOLETE 	      sizeof corestr.c_fpu.f_fpstatus.f_st);
// OBSOLETE #endif
// OBSOLETE       break;
// OBSOLETE     }
// OBSOLETE }
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Register that we are able to handle i386mach core file formats.
// OBSOLETE    FIXME: is this really bfd_target_unknown_flavour? */
// OBSOLETE 
// OBSOLETE static struct core_fns i386mach_core_fns =
// OBSOLETE {
// OBSOLETE   bfd_target_unknown_flavour,		/* core_flavour */
// OBSOLETE   default_check_format,			/* check_format */
// OBSOLETE   default_core_sniffer,			/* core_sniffer */
// OBSOLETE   fetch_core_registers,			/* core_read_registers */
// OBSOLETE   NULL					/* next */
// OBSOLETE };
// OBSOLETE 
// OBSOLETE void
// OBSOLETE _initialize_core_i386mach (void)
// OBSOLETE {
// OBSOLETE   add_core_fns (&i386mach_core_fns);
// OBSOLETE }
@


1.7
log
@Update/correct copyright notices.
@
text
@d52 1
a52 1
  ptrace (PTRACE_GETREGS, inferior_pid,
d54 1
a54 1
  ptrace (PTRACE_GETFPREGS, inferior_pid,
d91 1
a91 1
      int stuff = ptrace (PTRACE_PEEKDATA, inferior_pid,
d96 1
a96 1
      ptrace (PTRACE_SETREGS, inferior_pid,
d98 4
a101 2
      ptrace (PTRACE_POKEDATA, inferior_pid, (PTRACE_ARG3_TYPE) stack, 0xc589);
      ptrace (PTRACE_SINGLESTEP, inferior_pid, (PTRACE_ARG3_TYPE) stack, 0);
d103 2
a104 1
      ptrace (PTRACE_POKEDATA, inferior_pid, (PTRACE_ARG3_TYPE) stack, stuff);
d108 1
a108 1
  ptrace (PTRACE_SETREGS, inferior_pid,
d110 1
a110 1
  ptrace (PTRACE_SETFPREGS, inferior_pid,
@


1.6
log
@Create new file regcache.h.  Update all uses.
@
text
@d2 2
a3 2
   Copyright 1986, 1987, 1989, 1991, 1992, 2001 Free Software
   Foundation, Inc.
@


1.5
log
@Protoization.
@
text
@d2 2
a3 1
   Copyright (C) 1986, 1987, 1989, 1991, 1992 Free Software Foundation, Inc.
d26 1
@


1.4
log
@Protoization.
@
text
@d43 1
a43 2
fetch_inferior_registers (regno)
     int regno;			/* Original value discarded */
d111 11
a121 1
/* Work with core files, for GDB. */
d124 2
a125 5
fetch_core_registers (core_reg_sect, core_reg_size, which, reg_addr)
     char *core_reg_sect;
     unsigned core_reg_size;
     int which;
     CORE_ADDR reg_addr;	/* Unused in this version */
@


1.3
log
@PARAMS removal.
@
text
@d71 1
a71 2
store_inferior_registers (regno)
     int regno;
d158 1
a158 1
_initialize_core_i386mach ()
@


1.2
log
@2000-05-08  Michael Snyder  <msnyder@@seadog.cygnus.com>

        * gdbarch.sh: Add FP0_REGNUM to list of multi-arched register numbers.
        * gdbarch.c, gdbarch.h: Regenerate.
        * core-regset.c: Change FP0_REGNUM to a runtime test.
        * procfs.c: Ditto.
        * sun3-nat.c: Ditto.
        * sparc-tdep.c: Ditto.

        * i386mach-nat.c: Remove unnecessary ifdef for FP0_REGNUM.
        * ptx4-nat.c: Ditto.

        * sol-thread.c (sol_thread_create_inferior): only add the thread
        to the thread list if it is not already in there.
        (prototypes for thread_db func ptrs): pretty up formatting.
@
text
@d40 1
a40 1
static void fetch_core_registers PARAMS ((char *, unsigned, int, CORE_ADDR));
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d44 1
a44 1
     int regno;		/* Original value discarded */
a47 1
  extern char registers[];
d52 1
a52 1
	  (PTRACE_ARG3_TYPE) &inferior_registers);
d54 1
a54 1
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers);
d59 2
a60 2
	 inferior_fp_registers.f_st,
	 sizeof inferior_fp_registers.f_st);
d62 2
a63 2
	 &inferior_fp_registers.f_ctrl,
	 sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
a75 1
  extern char registers[];
d79 2
a80 2
  memcpy (inferior_fp_registers.f_st,&registers[REGISTER_BYTE (FP0_REGNUM)],
	 sizeof inferior_fp_registers.f_st);
d82 3
a84 3
	 &registers[REGISTER_BYTE (FPC_REGNUM)],
	 sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
  
d97 1
a97 1
	      (PTRACE_ARG3_TYPE) &inferior_registers);
d106 1
a106 1
	  (PTRACE_ARG3_TYPE) &inferior_registers);
d108 1
a108 1
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers);
a122 1
  extern char registers[];
d124 11
a134 12
  switch (which) {
  case 0:
  case 1:
    memcpy (registers, core_reg_sect, core_reg_size);
    break;

  case 2:
#ifdef FP0_REGNUM
    memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
	   core_reg_sect,
	   core_reg_size);		/* FIXME, probably bogus */
#endif
d136 4
a139 4
    memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
	   &corestr.c_fpu.f_fpstatus.f_ctrl,
	   sizeof corestr.c_fpu.f_fpstatus -
	   sizeof corestr.c_fpu.f_fpstatus.f_st);
d141 2
a142 2
    break;
  }
d144 1
a145 1

d151 5
a155 3
  bfd_target_unknown_flavour,
  fetch_core_registers,
  NULL
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d47 1
d76 1
d124 1
@


1.1.1.3
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d43 1
a43 1
     int regno;			/* Original value discarded */
d51 1
a51 1
	  (PTRACE_ARG3_TYPE) & inferior_registers);
d53 1
a53 1
	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);
d58 2
a59 2
	  inferior_fp_registers.f_st,
	  sizeof inferior_fp_registers.f_st);
d61 2
a62 2
	  &inferior_fp_registers.f_ctrl,
	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);
d78 2
a79 2
  memcpy (inferior_fp_registers.f_st, &registers[REGISTER_BYTE (FP0_REGNUM)],
	  sizeof inferior_fp_registers.f_st);
d81 3
a83 3
	  &registers[REGISTER_BYTE (FPC_REGNUM)],
	  sizeof inferior_fp_registers - sizeof inferior_fp_registers.f_st);

d96 1
a96 1
	      (PTRACE_ARG3_TYPE) & inferior_registers);
d105 1
a105 1
	  (PTRACE_ARG3_TYPE) & inferior_registers);
d107 1
a107 1
	  (PTRACE_ARG3_TYPE) & inferior_fp_registers);
d123 5
a127 6
  switch (which)
    {
    case 0:
    case 1:
      memcpy (registers, core_reg_sect, core_reg_size);
      break;
d129 1
a129 1
    case 2:
d131 3
a133 3
      memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
	      core_reg_sect,
	      core_reg_size);	/* FIXME, probably bogus */
d136 4
a139 4
      memcpy (&registers[REGISTER_BYTE (FPC_REGNUM)],
	      &corestr.c_fpu.f_fpstatus.f_ctrl,
	      sizeof corestr.c_fpu.f_fpstatus -
	      sizeof corestr.c_fpu.f_fpstatus.f_st);
d141 2
a142 2
      break;
    }
d144 1
a145 1

@


1.1.1.4
log
@import gdb-1999-10-04 snapshot
@
text
@d153 3
a155 5
  bfd_target_unknown_flavour,		/* core_flavour */
  default_check_format,			/* check_format */
  default_core_sniffer,			/* core_sniffer */
  fetch_core_registers,			/* core_read_registers */
  NULL					/* next */
@


