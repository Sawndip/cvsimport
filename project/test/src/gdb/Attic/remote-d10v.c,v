head	1.2;
access;
symbols
	gdb-1999-09-13:1.1.1.3
	gdb-1999-09-08:1.1.1.3
	gdb-1999-08-30:1.1.1.3
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	99.09.22.03.36.42;	author jsm;	state dead;
branches;
next	1.1;

1.1
date	99.04.16.01.34.03;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.03;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.25.18.02.59;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.20.08.57;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed in the 1999-09-21 snapshot.
@
text
@/* Remote target communications for d10v connected via a serial line.
   Copyright 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997 Free
   Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "gdb_string.h"
#include <fcntl.h>
#include "frame.h"
#include "inferior.h"
#include "bfd.h"
#include "symfile.h"
#include "target.h"
#include "wait.h"
/*#include "terminal.h"*/
#include "gdbcmd.h"
#include "objfiles.h"
#include "gdb-stabs.h"
#include "gdbthread.h"

#include "dcache.h"

#ifdef USG
#include <sys/types.h>
#endif

#include <signal.h>
#include "serial.h"

/* Prototypes for local functions */

static void remote_d10v_open PARAMS ((char *name, int from_tty));

/* Define the target subroutine names */
static struct target_ops remote_d10v_ops;

/* Open a connection to a remote debugger.
   NAME is the filename used for communication.  */

static void
remote_d10v_open (name, from_tty)
     char *name;
     int from_tty;
{
  pop_target ();
  push_remote_target (name, from_tty);
}


/* Translate a GDB virtual ADDR/LEN into a format the remote target
   understands.  Returns number of bytes that can be transfered
   starting at taddr, ZERO if no bytes can be transfered. */
int
remote_d10v_translate_xfer_address (memaddr, nr_bytes, taddr)
     CORE_ADDR memaddr;
     int nr_bytes;
     CORE_ADDR *taddr;
{
  CORE_ADDR phys;
  CORE_ADDR seg;
  CORE_ADDR off;
  char *from = "unknown";
  char *to = "unknown";
  unsigned short imap0 = read_register (IMAP0_REGNUM);
  unsigned short imap1 = read_register (IMAP1_REGNUM);
  unsigned short dmap = read_register (DMAP_REGNUM);

  /* GDB interprets addresses as:

       0x00xxxxxx: Logical data address segment        (DMAP translated memory)
       0x01xxxxxx: Logical instruction address segment (IMAP translated memory)
       0x10xxxxxx: Physical data memory segment        (On-chip data memory)
       0x11xxxxxx: Physical instruction memory segment (On-chip insn memory)
       0x12xxxxxx: Phisical unified memory segment     (Unified memory)

     The remote d10v board interprets addresses as:

       0x00xxxxxx: Phisical unified memory segment     (Unified memory)
       0x01xxxxxx: Physical instruction memory segment (On-chip insn memory)
       0x02xxxxxx: Physical data memory segment        (On-chip data memory)

     Translate according to current IMAP/dmap registers */

  enum {
    targ_unified = 0x00000000,
    targ_insn = 0x01000000,
    targ_data = 0x02000000,
  };

  seg = (memaddr >> 24);
  off = (memaddr & 0xffffffL);

  switch (seg) 
      {
      case 0x00: /* in logical data address segment */
	{
	  from = "logical-data";
	  if (off <= 0x7fffL)
	    {
	      /* On chip data */
	      phys = targ_data + off;
	      if (off + nr_bytes > 0x7fffL)
		/* don't cross VM boundary */
		nr_bytes = 0x7fffL - off + 1;
	      to = "chip-data";
	    }
	  else if (off <= 0xbfffL)
	    {
	      short map = dmap;
	      if (map & 0x1000)
		{
		  /* Instruction memory */
		  phys = targ_insn | ((map & 0xf) << 14) | (off & 0x3fff);
		  to = "chip-insn";
		}
	      else
		{
		  /* Unified memory */
		  phys = targ_unified | ((map & 0x3ff) << 14) | (off & 0x3fff);
		  to = "unified";
		}
	      if (off + nr_bytes > 0xbfffL)
		/* don't cross VM boundary */
		nr_bytes = (0xbfffL - off + 1);
	    }	    
	  else
	    {
	      /* Logical address out side of data segments, not supported */
	      return (0);
	    }
	  break;
	}

      case 0x01: /* in logical instruction address segment */
	{
	  short map;
	  from = "logical-insn";
	  if (off <= 0x1ffffL)
	    {
	      map = imap0;
	    }
	  else if (off <= 0x3ffffL)
	    {
	      map = imap1;
	    }
	  else
	    {
	      /* Logical address outside of IMAP[01] segment, not
		 supported */
	      return (0);
	    }
	  if ((off & 0x1ffff) + nr_bytes > 0x1ffffL)
	    {
	      /* don't cross VM boundary */
	      nr_bytes = 0x1ffffL - (off & 0x1ffffL) + 1;
	    }
	  if (map & 0x1000)
	    /* Instruction memory */
	    {
	      phys = targ_insn | off;
	      to = "chip-insn";
	    }
	  else
	    {
	      phys = ((map & 0x7fL) << 17) + (off & 0x1ffffL);
	      if (phys > 0xffffffL)
		/* Address outside of unified address segment */
		return (0);
	      phys |= targ_unified;
	      to = "unified";
	    }
	  break;
	}

      case 0x10: /* Physical data memory segment */
	from = "phys-data";
	phys = targ_data | off;
	to = "chip-data";
	break;

      case 0x11: /* Physical instruction memory */
	from = "phys-insn";
	phys = targ_insn | off;
	to = "chip-insn";
	break;

      case 0x12: /* Physical unified memory */
	from = "phys-unified";
	phys = targ_unified | off;
	to = "unified";
	break;

      default:
	return (0);
      }


  *taddr = phys;
  return nr_bytes;
}


void
_initialize_remote_d10v ()
{
  remote_d10v_ops.to_shortname = "d10v";
  remote_d10v_ops.to_longname = "Remote d10v serial target in gdb-specific protocol";
  remote_d10v_ops.to_doc = "Use a remote d10v via a serial line, using a gdb-specific protocol.\n\
Specify the serial device it is connected to (e.g. /dev/ttya).";
  remote_d10v_ops.to_open = remote_d10v_open;

  add_target (&remote_d10v_ops);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-05-25 snapshot
@
text
@a46 2
extern void _initialize_remote_d10v PARAMS ((void));

d68 2
a69 2
void
remote_d10v_translate_xfer_address (memaddr, nr_bytes, targ_addr, targ_len)
d72 1
a72 2
     CORE_ADDR *targ_addr;
     int *targ_len;
d144 1
a144 2
	      *targ_len = 0;
	      return;
d165 1
a165 2
	      *targ_len = 0;
	      return;
d182 2
a183 5
		{
		  /* Address outside of unified address segment */
		  *targ_len = 0;
		  return;
		}
d209 1
a209 2
	*targ_len = 0;
	return;
d213 2
a214 2
  *targ_addr = phys;
  *targ_len = nr_bytes;
@


1.1.1.3
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d30 1
a30 1
/*#include "terminal.h" */
d88 5
a92 5
     0x00xxxxxx: Logical data address segment        (DMAP translated memory)
     0x01xxxxxx: Logical instruction address segment (IMAP translated memory)
     0x10xxxxxx: Physical data memory segment        (On-chip data memory)
     0x11xxxxxx: Physical instruction memory segment (On-chip insn memory)
     0x12xxxxxx: Phisical unified memory segment     (Unified memory)
d96 3
a98 3
     0x00xxxxxx: Phisical unified memory segment     (Unified memory)
     0x01xxxxxx: Physical instruction memory segment (On-chip insn memory)
     0x02xxxxxx: Physical data memory segment        (On-chip data memory)
d102 5
a106 6
  enum
    {
      targ_unified = 0x00000000,
      targ_insn = 0x01000000,
      targ_data = 0x02000000,
    };
d111 1
a111 3
  switch (seg)
    {
    case 0x00:			/* in logical data address segment */
d113 61
a173 6
	from = "logical-data";
	if (off <= 0x7fffL)
	  {
	    /* On chip data */
	    phys = targ_data + off;
	    if (off + nr_bytes > 0x7fffL)
d175 33
a207 28
	      nr_bytes = 0x7fffL - off + 1;
	    to = "chip-data";
	  }
	else if (off <= 0xbfffL)
	  {
	    short map = dmap;
	    if (map & 0x1000)
	      {
		/* Instruction memory */
		phys = targ_insn | ((map & 0xf) << 14) | (off & 0x3fff);
		to = "chip-insn";
	      }
	    else
	      {
		/* Unified memory */
		phys = targ_unified | ((map & 0x3ff) << 14) | (off & 0x3fff);
		to = "unified";
	      }
	    if (off + nr_bytes > 0xbfffL)
	      /* don't cross VM boundary */
	      nr_bytes = (0xbfffL - off + 1);
	  }
	else
	  {
	    /* Logical address out side of data segments, not supported */
	    *targ_len = 0;
	    return;
	  }
a208 1
      }
d210 4
a213 42
    case 0x01:			/* in logical instruction address segment */
      {
	short map;
	from = "logical-insn";
	if (off <= 0x1ffffL)
	  {
	    map = imap0;
	  }
	else if (off <= 0x3ffffL)
	  {
	    map = imap1;
	  }
	else
	  {
	    /* Logical address outside of IMAP[01] segment, not
	       supported */
	    *targ_len = 0;
	    return;
	  }
	if ((off & 0x1ffff) + nr_bytes > 0x1ffffL)
	  {
	    /* don't cross VM boundary */
	    nr_bytes = 0x1ffffL - (off & 0x1ffffL) + 1;
	  }
	if (map & 0x1000)
	  /* Instruction memory */
	  {
	    phys = targ_insn | off;
	    to = "chip-insn";
	  }
	else
	  {
	    phys = ((map & 0x7fL) << 17) + (off & 0x1ffffL);
	    if (phys > 0xffffffL)
	      {
		/* Address outside of unified address segment */
		*targ_len = 0;
		return;
	      }
	    phys |= targ_unified;
	    to = "unified";
	  }
d215 4
a219 23

    case 0x10:			/* Physical data memory segment */
      from = "phys-data";
      phys = targ_data | off;
      to = "chip-data";
      break;

    case 0x11:			/* Physical instruction memory */
      from = "phys-insn";
      phys = targ_insn | off;
      to = "chip-insn";
      break;

    case 0x12:			/* Physical unified memory */
      from = "phys-unified";
      phys = targ_unified | off;
      to = "unified";
      break;

    default:
      *targ_len = 0;
      return;
    }
@

