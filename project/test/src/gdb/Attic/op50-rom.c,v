head	1.5;
access;
symbols
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.4
	kettenis_sparc-20030918-branch:1.4.0.66
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.64
	cagney_x86i386-20030821-branch:1.4.0.62
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.60
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.4.0.58
	jimb-ppc64-linux-20030613-branchpoint:1.4
	cagney_convert-20030606-branch:1.4.0.56
	cagney_convert-20030606-branchpoint:1.4
	cagney_writestrings-20030508-branch:1.4.0.54
	cagney_writestrings-20030508-branchpoint:1.4
	jimb-ppc64-linux-20030528-branch:1.4.0.52
	jimb-ppc64-linux-20030528-branchpoint:1.4
	carlton_dictionary-20030523-merge:1.4
	cagney_fileio-20030521-branch:1.4.0.50
	cagney_fileio-20030521-branchpoint:1.4
	kettenis_i386newframe-20030517-mergepoint:1.4
	jimb-ppc64-linux-20030509-branch:1.4.0.48
	jimb-ppc64-linux-20030509-branchpoint:1.4
	kettenis_i386newframe-20030504-mergepoint:1.4
	carlton_dictionary-20030430-merge:1.4
	kettenis_i386newframe-20030419-branch:1.4.0.46
	kettenis_i386newframe-20030419-branchpoint:1.4
	carlton_dictionary-20030416-merge:1.4
	cagney_frameaddr-20030409-mergepoint:1.4
	kettenis_i386newframe-20030406-branch:1.4.0.44
	kettenis_i386newframe-20030406-branchpoint:1.4
	cagney_frameaddr-20030403-branchpoint:1.4
	cagney_frameaddr-20030403-branch:1.4.0.42
	cagney_framebase-20030330-mergepoint:1.4
	cagney_framebase-20030326-branch:1.4.0.40
	cagney_framebase-20030326-branchpoint:1.4
	cagney_lazyid-20030317-branch:1.4.0.38
	cagney_lazyid-20030317-branchpoint:1.4
	kettenis-i386newframe-20030316-mergepoint:1.4
	offbyone-20030313-branch:1.4.0.36
	offbyone-20030313-branchpoint:1.4
	kettenis-i386newframe-20030308-branch:1.4.0.34
	kettenis-i386newframe-20030308-branchpoint:1.4
	carlton_dictionary-20030305-merge:1.4
	cagney_offbyone-20030303-branch:1.4.0.32
	cagney_offbyone-20030303-branchpoint:1.4
	carlton_dictionary-20030207-merge:1.4
	interps-20030203-mergepoint:1.4
	interps-20030202-branch:1.4.0.30
	interps-20030202-branchpoint:1.4
	cagney-unwind-20030108-branch:1.4.0.28
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.4
	carlton_dictionary-20021115-merge:1.4
	kseitz_interps-20021105-merge:1.4
	kseitz_interps-20021103-merge:1.4
	drow-cplus-merge-20021020:1.4
	drow-cplus-merge-20021025:1.4
	carlton_dictionary-20021025-merge:1.4
	carlton_dictionary-20021011-merge:1.4
	drow-cplus-branch:1.4.0.26
	drow-cplus-branchpoint:1.4
	kseitz_interps-20020930-merge:1.4
	carlton_dictionary-20020927-merge:1.4
	carlton_dictionary-branch:1.4.0.24
	carlton_dictionary-20020920-branchpoint:1.4
	gdb_5_3-branch:1.4.0.22
	gdb_5_3-2002-09-04-branchpoint:1.4
	kseitz_interps-20020829-merge:1.4
	cagney_sysregs-20020825-branch:1.4.0.20
	cagney_sysregs-20020825-branchpoint:1.4
	readline_4_3-import-branch:1.4.0.18
	readline_4_3-import-branchpoint:1.4
	gdb_5_2_1-2002-07-23-release:1.4
	kseitz_interps-20020528-branch:1.4.0.16
	kseitz_interps-20020528-branchpoint:1.4
	cagney_regbuf-20020515-branch:1.4.0.14
	cagney_regbuf-20020515-branchpoint:1.4
	jimb-macro-020506-branch:1.4.0.12
	jimb-macro-020506-branchpoint:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.10
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	gdb-post-ptid_t-2001-05-03:1.4
	gdb-pre-ptid_t-2001-05-03:1.4
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.2
	gdb_5_0-2000-05-19-release:1.1.1.2
	gdb_4_18_2-2000-05-18-release:1.1.1.2
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.2
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.2
	gdb_5_0-2000-04-10-branch:1.1.1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.2
	repo-unification-2000-02-06:1.1.1.2
	insight-2000-02-04:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2004.01.04.23.21.17;	author chastain;	state dead;
branches;
next	1.4;

1.4
date	2001.03.06.08.21.11;	author kevinb;	state Exp;
branches
	1.4.24.1
	1.4.26.1;
next	1.3;

1.3
date	2000.07.30.01.48.26;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.28;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.03;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.03;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.08.33;	author jsm;	state Exp;
branches;
next	;

1.4.24.1
date	2004.01.26.19.11.29;	author carlton;	state dead;
branches;
next	;

1.4.26.1
date	2004.01.13.16.11.58;	author drow;	state dead;
branches;
next	;


desc
@@


1.5
log
@2004-01-04  Michael Chastain  <mec.gnu@@mindspring.com>

	* op50-rom.c: Delete.
	* w89k-rom.c: Delete.
	* Makefile.in: Remove references.
@
text
@/* Remote target glue for the Oki op50n based eval board.

   Copyright 1995, 1998, 1999, 2000 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "gdbcore.h"
#include "target.h"
#include "monitor.h"
#include "serial.h"

static void op50n_open (char *args, int from_tty);

/*
 * this array of registers need to match the indexes used by GDB. The
 * whole reason this exists is cause the various ROM monitors use
 * different strings than GDB does, and doesn't support all the
 * registers either. So, typing "info reg sp" becomes a "r30".
 */

static char *op50n_regnames[NUM_REGS] =
{
  "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
  "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
  "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23",
  "r24", "r25", "r26", "r27", "r28", "r29", "r30", "r31",
  "cr11", "p", NULL, NULL, NULL, "cr15", "cr19", "cr20",
  "cr21", "cr22", NULL, NULL, NULL, NULL, NULL, NULL,
  NULL, NULL, NULL, "cr0", "cr8", "cr9", "cr10", "cr12",
  "cr13", "cr24", "cr25", "cr26",
};

/*
 * Define the monitor command strings. Since these are passed directly
 * through to a printf style function, we need can include formatting
 * strings. We also need a CR or LF on the end.
 */

static struct target_ops op50n_ops;

static char *op50n_inits[] =
{".\r", NULL};

static struct monitor_ops op50n_cmds;

static void
init_op50n_cmds (void)
{
  op50n_cmds.flags = MO_CLR_BREAK_USES_ADDR /*| MO_GETMEM_READ_SINGLE */ ;	/* flags */
  op50n_cmds.init = op50n_inits;	/* Init strings */
  op50n_cmds.cont = "g\r";	/* continue command */
  op50n_cmds.step = "t\r";	/* single step */
  op50n_cmds.stop = "\003.\r";	/* Interrupt char */
  op50n_cmds.set_break = "b %x\r";	/* set a breakpoint */
  op50n_cmds.clr_break = "b %x;0\r";	/* clear breakpoint at addr */
  op50n_cmds.clr_all_break = "bx\r";	/* clear all breakpoints */
  op50n_cmds.fill = "fx %x s%x %x\r";	/* memory fill cmd (addr, len, val) */
  op50n_cmds.setmem.cmdb = "sx %x %x\r";	/* setmem.cmdb (addr, value) */
  op50n_cmds.setmem.cmdw = "sh %x %x\r";	/* setmem.cmdw (addr, value) */
  op50n_cmds.setmem.cmdl = "s %x %x\r";		/* setmem.cmdl (addr, value) */
  op50n_cmds.setmem.cmdll = NULL;	/* setmem.cmdll (addr, value) */
  op50n_cmds.setmem.resp_delim = NULL;	/* setmem.resp_delim */
  op50n_cmds.setmem.term = NULL;	/* setmem.term */
  op50n_cmds.setmem.term_cmd = NULL;	/* setmem.term_cmd */
#if 0
  {
    "sx %x\r",			/* getmem.cmdb (addr, len) */
      "sh %x\r",		/* getmem.cmdw (addr, len) */
      "s %x\r",			/* getmem.cmdl (addr, len) */
      NULL,			/* getmem.cmdll (addr, len) */
      " : ",			/* getmem.resp_delim */
      " ",			/* getmem.term */
      ".\r",			/* getmem.term_cmd */
  };
#else
  op50n_cmds.getmem.cmdb = "dx %x s%x\r";	/* getmem.cmdb (addr, len) */
  op50n_cmds.getmem.cmdw = NULL;	/* getmem.cmdw (addr, len) */
  op50n_cmds.getmem.cmdl = NULL;	/* getmem.cmdl (addr, len) */
  op50n_cmds.getmem.cmdll = NULL;	/* getmem.cmdll (addr, len) */
  op50n_cmds.getmem.resp_delim = " : ";		/* getmem.resp_delim */
  op50n_cmds.getmem.term = NULL;	/* getmem.term */
  op50n_cmds.getmem.term_cmd = NULL;	/* getmem.term_cmd */
#endif
  op50n_cmds.setreg.cmd = "x %s %x\r";	/* setreg.cmd (name, value) */
  op50n_cmds.setreg.resp_delim = NULL;	/* setreg.resp_delim */
  op50n_cmds.setreg.term = NULL;	/* setreg.term */
  op50n_cmds.setreg.term_cmd = NULL;	/* setreg.term_cmd */
  op50n_cmds.getreg.cmd = "x %s\r";	/* getreg.cmd (name) */
  op50n_cmds.getreg.resp_delim = "=";	/* getreg.resp_delim */
  op50n_cmds.getreg.term = " ";	/* getreg.term */
  op50n_cmds.getreg.term_cmd = ".\r";	/* getreg.term_cmd */
  op50n_cmds.dump_registers = NULL;	/* dump_registers */
  op50n_cmds.register_pattern = NULL;	/* register_pattern */
  op50n_cmds.supply_register = NULL;	/* supply_register */
  op50n_cmds.load_routine = NULL;	/* load routine */
  op50n_cmds.load = "r 0\r";	/* download command */
  op50n_cmds.loadresp = NULL;	/* load response */
  op50n_cmds.prompt = "\n#";	/* monitor command prompt */
  op50n_cmds.line_term = "\r";	/* end-of-command delimitor */
  op50n_cmds.cmd_end = NULL;	/* optional command terminator */
  op50n_cmds.target = &op50n_ops;	/* target operations */
  op50n_cmds.stopbits = SERIAL_1_STOPBITS;	/* number of stop bits */
  op50n_cmds.regnames = op50n_regnames;		/* register names */
  op50n_cmds.magic = MONITOR_OPS_MAGIC;		/* magic */
};

static void
op50n_open (char *args, int from_tty)
{
  monitor_open (args, &op50n_cmds, from_tty);
}

void
_initialize_op50n (void)
{
  init_op50n_cmds ();
  init_monitor_ops (&op50n_ops);

  op50n_ops.to_shortname = "op50n";
  op50n_ops.to_longname = "Oki's debug monitor for the Op50n Eval board";
  op50n_ops.to_doc = "Debug on a Oki OP50N eval board.\n\
Specify the serial device it is connected to (e.g. /dev/ttya).";
  op50n_ops.to_open = op50n_open;

  add_target (&op50n_ops);
}
@


1.4
log
@Update/correct copyright notices.
@
text
@@


1.4.24.1
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@@


1.4.26.1
log
@Merge mainline to branch.  GDB is broken until I update cp-names.y.
@
text
@@


1.3
log
@Protoization.
@
text
@d3 1
a3 1
   Copyright 1995 Free Software Foundation, Inc.
@


1.2
log
@PARAMS removal.
@
text
@d124 1
a124 3
op50n_open (args, from_tty)
     char *args;
     int from_tty;
d130 1
a130 1
_initialize_op50n ()
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d28 1
a28 1
static void op50n_open PARAMS ((char *args, int from_tty));
d45 1
a45 1
  NULL, NULL, NULL, "cr0", "cr8", "cr9", "cr10","cr12",
d57 2
a58 1
static char *op50n_inits[] = {".\r", NULL};
d60 1
a60 1
static struct monitor_ops op50n_cmds ;
d62 2
a63 2
static void 
init_op50n_cmds(void)
d65 16
a80 16
  op50n_cmds.flags =   MO_CLR_BREAK_USES_ADDR /*| MO_GETMEM_READ_SINGLE*/; /* flags */
  op50n_cmds.init =   op50n_inits;			/* Init strings */
  op50n_cmds.cont =   "g\r";			/* continue command */
  op50n_cmds.step =   "t\r";			/* single step */
  op50n_cmds.stop =   "\003.\r";			/* Interrupt char */
  op50n_cmds.set_break =   "b %x\r";			/* set a breakpoint */
  op50n_cmds.clr_break =   "b %x;0\r";			/* clear breakpoint at addr */
  op50n_cmds.clr_all_break =   "bx\r";			/* clear all breakpoints */
  op50n_cmds.fill =   "fx %x s%x %x\r";		/* memory fill cmd (addr, len, val) */
  op50n_cmds.setmem.cmdb =     "sx %x %x\r";		/* setmem.cmdb (addr, value) */
  op50n_cmds.setmem.cmdw =     "sh %x %x\r";		/* setmem.cmdw (addr, value) */
  op50n_cmds.setmem.cmdl =     "s %x %x\r";		/* setmem.cmdl (addr, value) */
  op50n_cmds.setmem.cmdll =     NULL;			/* setmem.cmdll (addr, value) */
  op50n_cmds.setmem.resp_delim =     NULL;			/* setmem.resp_delim */
  op50n_cmds.setmem.term =     NULL;			/* setmem.term */
  op50n_cmds.setmem.term_cmd =     NULL;			/* setmem.term_cmd */
d84 1
a84 1
      "sh %x\r",			/* getmem.cmdw (addr, len) */
d90 1
a90 1
      } ;
d92 7
a98 7
  op50n_cmds.getmem.cmdb =     "dx %x s%x\r";		/* getmem.cmdb (addr, len) */
  op50n_cmds.getmem.cmdw =     NULL;			/* getmem.cmdw (addr, len) */
  op50n_cmds.getmem.cmdl =     NULL;			/* getmem.cmdl (addr, len) */
  op50n_cmds.getmem.cmdll =     NULL;			/* getmem.cmdll (addr, len) */
  op50n_cmds.getmem.resp_delim =     " : ";			/* getmem.resp_delim */
  op50n_cmds.getmem.term =     NULL;			/* getmem.term */
  op50n_cmds.getmem.term_cmd =     NULL;			/* getmem.term_cmd */
d100 21
a120 21
  op50n_cmds.setreg.cmd =     "x %s %x\r";		/* setreg.cmd (name, value) */
  op50n_cmds.setreg.resp_delim =     NULL;			/* setreg.resp_delim */
  op50n_cmds.setreg.term =     NULL;			/* setreg.term */
  op50n_cmds.setreg.term_cmd =     NULL;			/* setreg.term_cmd */
  op50n_cmds.getreg.cmd =     "x %s\r";			/* getreg.cmd (name) */
  op50n_cmds.getreg.resp_delim =     "=";			/* getreg.resp_delim */
  op50n_cmds.getreg.term =     " ";			/* getreg.term */
  op50n_cmds.getreg.term_cmd =     ".\r";			/* getreg.term_cmd */
  op50n_cmds.dump_registers =   NULL;				/* dump_registers */
  op50n_cmds.register_pattern =   NULL;				/* register_pattern */
  op50n_cmds.supply_register =   NULL;				/* supply_register */
  op50n_cmds.load_routine =   NULL;				/* load routine */
  op50n_cmds.load =   "r 0\r";			/* download command */
  op50n_cmds.loadresp =   NULL;				/* load response */
  op50n_cmds.prompt =   "\n#";			/* monitor command prompt */
  op50n_cmds.line_term =   "\r";				/* end-of-command delimitor */
  op50n_cmds.cmd_end =   NULL;				/* optional command terminator */
  op50n_cmds.target =   &op50n_ops;			/* target operations */
  op50n_cmds.stopbits =   SERIAL_1_STOPBITS;		/* number of stop bits */
  op50n_cmds.regnames =   op50n_regnames;		/* register names */
  op50n_cmds.magic =   MONITOR_OPS_MAGIC;		/* magic */
d134 1
a134 1
  init_op50n_cmds() ;
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d44 1
a44 1
  NULL, NULL, NULL, "cr0", "cr8", "cr9", "cr10", "cr12",
d56 1
a56 2
static char *op50n_inits[] =
{".\r", NULL};
d58 1
a58 1
static struct monitor_ops op50n_cmds;
d60 2
a61 2
static void
init_op50n_cmds (void)
d63 16
a78 16
  op50n_cmds.flags = MO_CLR_BREAK_USES_ADDR /*| MO_GETMEM_READ_SINGLE */ ;	/* flags */
  op50n_cmds.init = op50n_inits;	/* Init strings */
  op50n_cmds.cont = "g\r";	/* continue command */
  op50n_cmds.step = "t\r";	/* single step */
  op50n_cmds.stop = "\003.\r";	/* Interrupt char */
  op50n_cmds.set_break = "b %x\r";	/* set a breakpoint */
  op50n_cmds.clr_break = "b %x;0\r";	/* clear breakpoint at addr */
  op50n_cmds.clr_all_break = "bx\r";	/* clear all breakpoints */
  op50n_cmds.fill = "fx %x s%x %x\r";	/* memory fill cmd (addr, len, val) */
  op50n_cmds.setmem.cmdb = "sx %x %x\r";	/* setmem.cmdb (addr, value) */
  op50n_cmds.setmem.cmdw = "sh %x %x\r";	/* setmem.cmdw (addr, value) */
  op50n_cmds.setmem.cmdl = "s %x %x\r";		/* setmem.cmdl (addr, value) */
  op50n_cmds.setmem.cmdll = NULL;	/* setmem.cmdll (addr, value) */
  op50n_cmds.setmem.resp_delim = NULL;	/* setmem.resp_delim */
  op50n_cmds.setmem.term = NULL;	/* setmem.term */
  op50n_cmds.setmem.term_cmd = NULL;	/* setmem.term_cmd */
d82 1
a82 1
      "sh %x\r",		/* getmem.cmdw (addr, len) */
d88 1
a88 1
  };
d90 7
a96 7
  op50n_cmds.getmem.cmdb = "dx %x s%x\r";	/* getmem.cmdb (addr, len) */
  op50n_cmds.getmem.cmdw = NULL;	/* getmem.cmdw (addr, len) */
  op50n_cmds.getmem.cmdl = NULL;	/* getmem.cmdl (addr, len) */
  op50n_cmds.getmem.cmdll = NULL;	/* getmem.cmdll (addr, len) */
  op50n_cmds.getmem.resp_delim = " : ";		/* getmem.resp_delim */
  op50n_cmds.getmem.term = NULL;	/* getmem.term */
  op50n_cmds.getmem.term_cmd = NULL;	/* getmem.term_cmd */
d98 21
a118 21
  op50n_cmds.setreg.cmd = "x %s %x\r";	/* setreg.cmd (name, value) */
  op50n_cmds.setreg.resp_delim = NULL;	/* setreg.resp_delim */
  op50n_cmds.setreg.term = NULL;	/* setreg.term */
  op50n_cmds.setreg.term_cmd = NULL;	/* setreg.term_cmd */
  op50n_cmds.getreg.cmd = "x %s\r";	/* getreg.cmd (name) */
  op50n_cmds.getreg.resp_delim = "=";	/* getreg.resp_delim */
  op50n_cmds.getreg.term = " ";	/* getreg.term */
  op50n_cmds.getreg.term_cmd = ".\r";	/* getreg.term_cmd */
  op50n_cmds.dump_registers = NULL;	/* dump_registers */
  op50n_cmds.register_pattern = NULL;	/* register_pattern */
  op50n_cmds.supply_register = NULL;	/* supply_register */
  op50n_cmds.load_routine = NULL;	/* load routine */
  op50n_cmds.load = "r 0\r";	/* download command */
  op50n_cmds.loadresp = NULL;	/* load response */
  op50n_cmds.prompt = "\n#";	/* monitor command prompt */
  op50n_cmds.line_term = "\r";	/* end-of-command delimitor */
  op50n_cmds.cmd_end = NULL;	/* optional command terminator */
  op50n_cmds.target = &op50n_ops;	/* target operations */
  op50n_cmds.stopbits = SERIAL_1_STOPBITS;	/* number of stop bits */
  op50n_cmds.regnames = op50n_regnames;		/* register names */
  op50n_cmds.magic = MONITOR_OPS_MAGIC;		/* magic */
d132 1
a132 1
  init_op50n_cmds ();
@

