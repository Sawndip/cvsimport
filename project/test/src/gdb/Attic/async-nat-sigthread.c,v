head	1.1;
access;
symbols
	nickrob-async-20060513-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2006.05.12.07.40.23;	author nickrob;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.05.12.07.40.23;	author nickrob;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.08.31.01.05.25;	author nickrob;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.09.14.02.26.37;	author nickrob;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.09.17.12.26.21;	author nickrob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file async-nat-sigthread.c was initially added on branch nickrob-async-20060513-branch.
@
text
@@


1.1.2.1
log
@2006-05-13    Changes based on Apple GDB (CVS repository 5th Sept 2005)

	* async-nat-inferior.c, async-nat-inferior.h,
	* async-nat-sigthread.c, async-nat-sigthread.h: New files

	* linux-nat.c: Include async-nat-inferior.h.
	(linux_nat_wait): Add extra argument.  If target_can_async_p
	do something completely different.

	* interps.h (interp_set, interp_set_quiet): New externs.

	* interps.c (interp_set): Make asynchronous.
	(interp_set_quiet): Don't make static.
	(current_interp_command_loop): Call functions with new arguments.

	* target.h (target_wait): Add extra argument.
	(gdb_override_async, gdb_set_async_override) New externs.
	(target_can_async_p): Make conditional on gdb_override_async.

	* target.c (gdb_override_async): New variable.
	(gdb_set_async_override, do_restore_target_async_mask):
	New functions.
	(debug_to_wait): Add extra argument.

	* linux-thread-db.c (thread_db_wait): Add extra argument.

	* wrapper.h (safe_execute_command): Declare structure.

	* top.c (*deprecated_target_wait_hook): Add extra argument.
	(read_command_file): Make asynchronous.

	* remote.c (remote_wait, remote_async_wait): Add extra argument.

	* infrun.c: Include event-top.h
	(wait_for_inferior, fetch_inferior_event): Add extra argument to
	target_wait.
	(proceed): Set target_executing = 0.
	(handle_inferior_event): Call async_disable_stdin if async.

	* inf-ptrace.c: Include inf-loop.h, async-nat-inferior.h.
	(inf_ptrace_him): Create a signal thread.
	(inf_ptrace_wait): Add extra argument to target_wait.

	* inf-loop.c (inferior_event_handler, complete_execution):
	Changes for asynchronous operation (copied verbatim).

	* inf-child.c: Include async-nat-inferior.h.
	(inf_child_target): Use methods async_terminal_inferior
	and async_terminal_ours.

	* i386-linux-nat.c: Include inf-loop.h, async-nat-inferior.h.
	(i386_linux_resume): Call gdb_process_events and then
	async methods.

	* exec.c: Include event-loop.h, async-nat-inferior.h.
	(async_file_handler, standard_async, standard_is_async_p)
	(standard_can_async_p): New functions.
	(init_exec_ops): Initialise above methods.

	* event-top.h (cli_command_loop): Make argument void*.

	* event-top.c (display_gdb_prompt, async_enable_stdin)
	(async_disable_stdin, handle_sigint, async_request_quit)
	(gdb_setup_readline, _initialize_event_loop):
	Changes for asynchronous operation (copied verbatim).
	(cli_command_loop): Make argument void*.

	* event-loop.h (gdb_client_data): Move typedef to defs.h.
	(gdb_create_event): Declare.
	(event_handler_func): Move typedef from event-loop.c.

	* event-loop.c (use_poll): Set to 0.
	(gdb_queue_event, gdb_create_event): New functions.
	(async_queue_event): Don't make static.
	(create_file_event): Use gdb_create_event.
	(gdb_event): Change component from int to void*.
	(process_event, handle_file_event, handle_timer_event):
	Change according to gdb_event.
	(event_handler_func): Move typedef to event-loop.c.

	* defs.h: (gdb_mi_run_status, event_loop_p): New externs.
	(gdb_client_data): Move typedef from event-loop.h.
	(*deprecated_command_loop_hook): Make argument void*.
	(*deprecated_target_wait_hook): Add argument.

	* cli-out.h (cli_quoted_out_new): Declare.

	* cli-out.c (cli_quoted_out_new): New function.
	Include mi/mi-console.h.

	* cli/cli-interp.c: Include inferior.h, mi/mi-console.h.
	(safe_execute_command): Make static.
	(cli_interpreter_resume, cli_interpreter_exec):
	Make asynchronous.
	(cli_quoted_interpreter_resume): New function.
	(_initialize_cli_interp): Add li_command_loop to procs.
	Initialize the console-quoted interpreter.

	* tui/tui-hooks.c (tui_target_wait_hook): Add extra argument.

	* mi/mi-main.h (mi_dont_register_continuation)
	(current_command_token,  mi_interp, mi_interpreter_exec_continuation)
	(mi_continuation_arg): New externs.
	(mi_setup_continuation_arg): Declare.

	* mi/mi-main.c: Include wrapper.h.
	(struct mi_continuation_arg): New structure.
	(mi_interpreter_exec_continuation): Move to mi-interp.c.
	(mi_execute_async_cli_command)
	(mi_exec_async_cli_cmd_continuation): Make asynchronous.
	(mi_setup_continuation_arg): New function.

	* mi/mi-interp.c (mi_interpreter_exec_continuation):
	Move from mi-main.c
	(mi_cmd_interpreter_exec): Switch interpreters.  Make
	asynchronous.
	(mi1_command_loop, mi2_command_loop, mi3_command_loop):
	Make argument void*.

	* Makefile.in (async_nat_inferior_h, async_nat_sigthread_h):
	New variables.
	(gdb$(EXEEXT), $(TUI)$(EXEEXT)): Link with libpthread.
	(async-nat-inferior.o, async-nat-sigthread.o): New rules.
	(COMMON_OBS): Add above object files.
	(exec.o, i386-linux-nat.o, inf-ptrace.o, linux-nat.o):
	Update dependencies.

2006-05-13  Nick Roberts  <nickrob@@snap.net.nz>

	* main.c: (event_loop_p): Re-instate variable.
	(captured_main): Re-instate async/noasync option.
	(print_gdb_help): Describe option again.

	* exec.c(init_exec_ops): Only initialise async methods with async
	option.

	* inf-ptrace.c (inf_ptrace_him): Only reate a signal thread with
	async option.

	* README.async, TODO.async, PROBLEMS.async: New files.
@
text
@a0 267
/* Async support for GDB, the GNU debugger.
   Copyright 1997, 1998, 1999, 2000, 2001, 2002
   Free Software Foundation, Inc.

   Contributed by Apple Computer, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "gdbcmd.h"
#include "event-loop.h"
#include "inferior.h"

#include "async-nat-sigthread.h"
//#include "macosx-nat-inferior.h"
//#include "macosx-nat-mutils.h"

#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

#include <sys/select.h>

static FILE *sigthread_stderr_re = NULL;
static int sigthread_debugflag = 0;
static void* gdb_signal_thread (void *arg);

/* A re-entrant version for use by the signal handling thread */

void
sigthread_debug_re (const char *fmt, ...)
{
  va_list ap;
  if (sigthread_debugflag)
    {
      va_start (ap, fmt);
      fprintf (sigthread_stderr_re, "[%d sigthread]: ", getpid ());
      vfprintf (sigthread_stderr_re, fmt, ap);
      va_end (ap);
      fflush (sigthread_stderr_re);
    }
}

void
gdb_signal_thread_init (gdb_signal_thread_status *s)
{
  s->transmit_fd = -1;
  s->receive_fd = -1;

  s->inferior_pid = -1;
  s->signal_thread = 0;
}

void
gdb_signal_thread_create (gdb_signal_thread_status *s, int pid)
{
  int fd[2];
  int ret;

  ret = pipe (fd);
  //  CHECK_FATAL (ret == 0);

  s->transmit_fd = fd[1];
  s->receive_fd = fd[0];

  s->inferior_pid = pid;

  s->signal_thread =
    gdb_thread_fork (gdb_signal_thread, s);
}

void
gdb_signal_thread_destroy (gdb_signal_thread_status *s)
{
  if (s->signal_thread != 0)
    {
      gdb_thread_kill (s->signal_thread);
    }

  if (s->receive_fd > 0)
    {
      delete_file_handler (s->receive_fd);
      close (s->receive_fd);
    }
  if (s->transmit_fd > 0)
    close (s->transmit_fd);

  gdb_signal_thread_init (s);
}

void
gdb_signal_thread_debug (FILE *f, gdb_signal_thread_status *s)
{
  fprintf (f, "                [SIGNAL THREAD]\n");
}

void
gdb_signal_thread_debug_status (FILE *f, WAITSTATUS status)
{
  if (WIFEXITED (status))
    {
      fprintf (f, "process exited with status %d\n", WEXITSTATUS (status));
    }
  else if (WIFSIGNALED (status))
    {
      fprintf (f, "process terminated with signal %d (%s)\n",
               WTERMSIG (status),
               target_signal_to_string (WTERMSIG (status)));
    }
  else if (WIFSTOPPED (status))
    {
      fprintf (f, "process stopped with signal %d (%s)\n", WSTOPSIG (status),
               target_signal_to_string (WSTOPSIG (status)));
    }
  else
    {
      fprintf (f, "unknown status value %d\n", status);
    }
}

static void*
gdb_signal_thread (void *arg)
{
  gdb_signal_thread_status *s = (gdb_signal_thread_status *) arg;
  //  CHECK_FATAL (s != NULL);

  for (;;)
    {

      gdb_signal_thread_message msg;
      WAITSTATUS status = 0;
      pid_t pid = 0;

      pthread_testcancel ();

      sigthread_debug_re
        ("gdb_signal_thread: waiting for events for pid %d\n",
         s->inferior_pid);

      pid = waitpid (s->inferior_pid, &status, 0);

      sigthread_debug_re
        ("gdb_signal_thread: received event for pid %d\n",
         s->inferior_pid);

      if ((pid < 0) && (errno == ECHILD))
        {
          sigthread_debug_re
            ("gdb_signal_thread: no children present; waiting for parent\n");
          for (;;)
            {
              pthread_testcancel ();
              sched_yield ();
            }
        }

      if ((pid < 0) && (errno == EINTR))
        {
          sigthread_debug_re
            ("gdb_signal_thread: wait interrupted; continuing\n");
          continue;
        }

      if (pid < 0)
        {
          fprintf (sigthread_stderr_re,
                   "gdb_signal_thread: unexpected error: %s\n",
                   strerror (errno));
          abort ();
        }

      if (sigthread_debugflag)
        {
          sigthread_debug_re ("gdb_signal_thread: received event for pid %d: ", pid);
          gdb_signal_thread_debug_status (sigthread_stderr_re, status);
        }

      if (pid != s->inferior_pid)
        {
          fprintf (sigthread_stderr_re,
                   "gdb_signal_thread: event was for unexpected pid (got %d, was expecting %d)\n",
                   pid, s->inferior_pid);
          abort ();
        }

      msg.pid = pid;
      msg.status = status;
      write (s->transmit_fd, &msg, sizeof (msg));
    }
}

void
gdb_pthread_kill (pthread_t pthread)
{
  int ret;

  ret = pthread_cancel (pthread);
  if (ret != 0)
    {
      warning ("Unable to cancel thread: %s (%d)", strerror (errno), errno);
    }
}

pthread_t
gdb_pthread_fork (pthread_fn_t function, void *arg)
{
  int result;
  pthread_t pthread = 0;
  pthread_attr_t attr;

  result = pthread_attr_init (&attr);
  if (result != 0)
    {
      error ("Unable to initialize thread attributes: %s (%d)",
             strerror (errno), errno);
    }

  result = pthread_attr_setdetachstate (&attr, PTHREAD_CREATE_JOINABLE);
  if (result != 0)
    {
      error ("Unable to initialize thread attributes: %s (%d)",
             strerror (errno), errno);
    }

  result = pthread_create (&pthread, &attr, function, arg);
  if (result != 0)
    {
      error ("Unable to create thread: %s (%d)", strerror (errno), errno);
    }

  result = pthread_attr_destroy (&attr);
  if (result != 0)
    {
      warning ("Unable to deallocate thread attributes: %s (%d)",
               strerror (errno), errno);
    }

  return pthread;
}

void
_initialize_gdb_nat_sigthread ()
{
  sigthread_stderr_re = fdopen (fileno (stderr), "w+");

  add_setshow_boolean_cmd ("signals", no_class,
			   &sigthread_debugflag, _("\
Set if printing signal thread debugging statements."), _("\
Show if printing signal thread debugging statements."), NULL,
			   NULL, NULL,
			   &setdebuglist, &showdebuglist);
}
@


1.1.2.2
log
@Modify commentary at start.
@
text
@d2 1
a2 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2006
d5 1
a5 2
   Original code from Apple Computer, Inc.
   Modified by Nick Roberts <nickrob@@snap.net.nz>
@


1.1.2.3
log
@* async-nat-sigthread.c (gdb_signal_thread_debug),
* async-nat-sigthread.h: Remove redundant gdb_signal_thread_debug.
@
text
@d108 6
@


1.1.2.4
log
@Copy code from Apple more carefully and remove redundant code
@
text
@d31 2
d34 2
d37 1
d77 1
d135 1
a211 7

  ret = pthread_join (pthread, NULL);
  if (ret != 0)
    {
      warning ("Unable to join to canceled thread: %s (%d)", strerror (errno),
               errno);
    }
@


