head	1.15;
access;
symbols
	gdb_5_2_1-2002-07-23-release:1.14
	gdb_5_2-2002-04-29-release:1.14
	gdb_5_2-branch:1.14.0.2
	gdb_5_2-2002-03-03-branchpoint:1.14
	gdb_5_1_1-2002-01-24-release:1.13
	gdb_5_1_0_1-2002-01-03-release:1.13
	cygnus_cvs_20020108_pre:1.14
	gdb_5_1_0_1-2002-01-03-branchpoint:1.13
	gdb_5_1_0_1-2002-01-03-branch:1.13.0.8
	gdb_5_1-2001-11-21-release:1.13
	gdb_s390-2001-09-26-branch:1.13.0.6
	gdb_s390-2001-09-26-branchpoint:1.13
	gdb_5_1-2001-07-29-branch:1.13.0.4
	gdb_5_1-2001-07-29-branchpoint:1.13
	dberlin-typesystem-branch:1.13.0.2
	dberlin-typesystem-branchpoint:1.13
	gdb-post-ptid_t-2001-05-03:1.13
	gdb-pre-ptid_t-2001-05-03:1.12
	insight-precleanup-2001-01-01:1.6
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.2
	insight-2000-02-04:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.15
date	2002.05.04.15.52.38;	author cagney;	state dead;
branches;
next	1.14;

1.14
date	2002.01.06.15.02.01;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.04.04.15.26;	author kevinb;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.14.19.23.02;	author jtc;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.14.16.42.30;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.06.08.21.12;	author kevinb;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.01.01.39.21;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.02.19.14.33;	author jtc;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.23.22.48.55;	author jtc;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.01.01.48;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.06.21.50.56;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.01.00.12.10;	author jtc;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.30.01.48.26;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.09.08.52.46;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.03;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.03;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.09.00;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@* MAINTAINERS: Mark a29k as deleted.
* NEWS: Mention that a29k was removed.  Add OBSOLETE section.
Move new configurations to the top.
* configure.tgt: Remove a29k.
* config/a29k/tm-vx29k.h: Delete.
* config/a29k/vx29k.mt: Delete.
* config/a29k/tm-a29k.h: Delete.
* config/a29k/a29k-udi.mt: Delete.
* config/a29k/a29k.mt: Delete.
* a29k-tdep.c: Delete.
* remote-udi.c: Delete.
* remote-mm.c: Delete.
* remote-eb.c: Delete.
* remote-adapt.c: Delete.
* Makefile.in: Remove obsolete code.
* gdbserver/Makefile.in: Ditto.
* config/s390/s390x.mt: Ditto.
* config/s390/s390.mt: Ditto.
* config/sparc/sparclynx.mh: Ditto.
* config/sparc/linux.mh: Ditto.
* config/pa/hppaosf.mh: Ditto.
* config/pa/hppabsd.mh: Ditto.
* config/ns32k/nbsd.mt: Ditto.
* config/mips/vr5000.mt: Ditto.
* config/m68k/sun3os4.mh: Ditto.
* config/m68k/nbsd.mt: Ditto.
* config/m68k/m68klynx.mh: Ditto.
* config/m32r/m32r.mt: Ditto.
* config/i386/x86-64linux.mt: Ditto.
* config/i386/nbsdelf.mt: Ditto.
* config/i386/nbsd.mt: Ditto.
* config/i386/i386lynx.mh: Ditto.
@
text
@/* OBSOLETE /* Remote debugging interface for AMD 29000 EBMON on IBM PC, for GDB. */
/* OBSOLETE    Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001 */
/* OBSOLETE    Free Software Foundation, Inc. */
/* OBSOLETE    Contributed by Cygnus Support.  Written by Jim Kingdon for Cygnus. */
/* OBSOLETE  */
/* OBSOLETE    This file is part of GDB. */
/* OBSOLETE  */
/* OBSOLETE    This program is free software; you can redistribute it and/or modify */
/* OBSOLETE    it under the terms of the GNU General Public License as published by */
/* OBSOLETE    the Free Software Foundation; either version 2 of the License, or */
/* OBSOLETE    (at your option) any later version. */
/* OBSOLETE  */
/* OBSOLETE    This program is distributed in the hope that it will be useful, */
/* OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of */
/* OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the */
/* OBSOLETE    GNU General Public License for more details. */
/* OBSOLETE  */
/* OBSOLETE    You should have received a copy of the GNU General Public License */
/* OBSOLETE    along with this program; if not, write to the Free Software */
/* OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330, */
/* OBSOLETE    Boston, MA 02111-1307, USA.  */ */
/* OBSOLETE  */
/* OBSOLETE /* This is like remote.c but is for an esoteric situation-- */
/* OBSOLETE    having a a29k board in a PC hooked up to a unix machine with */
/* OBSOLETE    a serial line, and running ctty com1 on the PC, through which */
/* OBSOLETE    the unix machine can run ebmon.  Not to mention that the PC */
/* OBSOLETE    has PC/NFS, so it can access the same executables that gdb can, */
/* OBSOLETE    over the net in real time.  */ */
/* OBSOLETE  */
/* OBSOLETE #include "defs.h" */
/* OBSOLETE #include "gdb_string.h" */
/* OBSOLETE #include "regcache.h" */
/* OBSOLETE  */
/* OBSOLETE #include "inferior.h" */
/* OBSOLETE #include "bfd.h" */
/* OBSOLETE #include "symfile.h" */
/* OBSOLETE #include "value.h" */
/* OBSOLETE #include <ctype.h> */
/* OBSOLETE #include <fcntl.h> */
/* OBSOLETE #include <signal.h> */
/* OBSOLETE #include <errno.h> */
/* OBSOLETE #include "terminal.h" */
/* OBSOLETE #include "target.h" */
/* OBSOLETE #include "gdbcore.h" */
/* OBSOLETE  */
/* OBSOLETE extern struct target_ops eb_ops;	/* Forward declaration */ */
/* OBSOLETE  */
/* OBSOLETE static void eb_close (); */
/* OBSOLETE  */
/* OBSOLETE #define LOG_FILE "eb.log" */
/* OBSOLETE #if defined (LOG_FILE) */
/* OBSOLETE FILE *log_file; */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE static int timeout = 24; */
/* OBSOLETE  */
/* OBSOLETE /* Descriptor for I/O to remote machine.  Initialize it to -1 so that */
/* OBSOLETE    eb_open knows that we don't have a file open when the program */
/* OBSOLETE    starts.  */ */
/* OBSOLETE int eb_desc = -1; */
/* OBSOLETE  */
/* OBSOLETE /* stream which is fdopen'd from eb_desc.  Only valid when */
/* OBSOLETE    eb_desc != -1.  */ */
/* OBSOLETE FILE *eb_stream; */
/* OBSOLETE  */
/* OBSOLETE /* Read a character from the remote system, doing all the fancy */
/* OBSOLETE    timeout stuff.  */ */
/* OBSOLETE static int */
/* OBSOLETE readchar (void) */
/* OBSOLETE { */
/* OBSOLETE   char buf; */
/* OBSOLETE  */
/* OBSOLETE   buf = '\0'; */
/* OBSOLETE #ifdef HAVE_TERMIO */
/* OBSOLETE   /* termio does the timeout for us.  */ */
/* OBSOLETE   read (eb_desc, &buf, 1); */
/* OBSOLETE #else */
/* OBSOLETE   alarm (timeout); */
/* OBSOLETE   if (read (eb_desc, &buf, 1) < 0) */
/* OBSOLETE     { */
/* OBSOLETE       if (errno == EINTR) */
/* OBSOLETE 	error ("Timeout reading from remote system."); */
/* OBSOLETE       else */
/* OBSOLETE 	perror_with_name ("remote"); */
/* OBSOLETE     } */
/* OBSOLETE   alarm (0); */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE   if (buf == '\0') */
/* OBSOLETE     error ("Timeout reading from remote system."); */
/* OBSOLETE #if defined (LOG_FILE) */
/* OBSOLETE   putc (buf & 0x7f, log_file); */
/* OBSOLETE #endif */
/* OBSOLETE   return buf & 0x7f; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Keep discarding input from the remote system, until STRING is found.  */
/* OBSOLETE    Let the user break out immediately.  */ */
/* OBSOLETE static void */
/* OBSOLETE expect (char *string) */
/* OBSOLETE { */
/* OBSOLETE   char *p = string; */
/* OBSOLETE  */
/* OBSOLETE   immediate_quit++; */
/* OBSOLETE   while (1) */
/* OBSOLETE     { */
/* OBSOLETE       if (readchar () == *p) */
/* OBSOLETE 	{ */
/* OBSOLETE 	  p++; */
/* OBSOLETE 	  if (*p == '\0') */
/* OBSOLETE 	    { */
/* OBSOLETE 	      immediate_quit--; */
/* OBSOLETE 	      return; */
/* OBSOLETE 	    } */
/* OBSOLETE 	} */
/* OBSOLETE       else */
/* OBSOLETE 	p = string; */
/* OBSOLETE     } */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Keep discarding input until we see the ebmon prompt. */
/* OBSOLETE  */
/* OBSOLETE    The convention for dealing with the prompt is that you */
/* OBSOLETE    o give your command */
/* OBSOLETE    o *then* wait for the prompt. */
/* OBSOLETE  */
/* OBSOLETE    Thus the last thing that a procedure does with the serial line */
/* OBSOLETE    will be an expect_prompt().  Exception:  eb_resume does not */
/* OBSOLETE    wait for the prompt, because the terminal is being handed over */
/* OBSOLETE    to the inferior.  However, the next thing which happens after that */
/* OBSOLETE    is a eb_wait which does wait for the prompt. */
/* OBSOLETE    Note that this includes abnormal exit, e.g. error().  This is */
/* OBSOLETE    necessary to prevent getting into states from which we can't */
/* OBSOLETE    recover.  */ */
/* OBSOLETE static void */
/* OBSOLETE expect_prompt (void) */
/* OBSOLETE { */
/* OBSOLETE #if defined (LOG_FILE) */
/* OBSOLETE   /* This is a convenient place to do this.  The idea is to do it often */
/* OBSOLETE      enough that we never lose much data if we terminate abnormally.  */ */
/* OBSOLETE   fflush (log_file); */
/* OBSOLETE #endif */
/* OBSOLETE   expect ("\n# "); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Get a hex digit from the remote system & return its value. */
/* OBSOLETE    If ignore_space is nonzero, ignore spaces (not newline, tab, etc).  */ */
/* OBSOLETE static int */
/* OBSOLETE get_hex_digit (int ignore_space) */
/* OBSOLETE { */
/* OBSOLETE   int ch; */
/* OBSOLETE   while (1) */
/* OBSOLETE     { */
/* OBSOLETE       ch = readchar (); */
/* OBSOLETE       if (ch >= '0' && ch <= '9') */
/* OBSOLETE 	return ch - '0'; */
/* OBSOLETE       else if (ch >= 'A' && ch <= 'F') */
/* OBSOLETE 	return ch - 'A' + 10; */
/* OBSOLETE       else if (ch >= 'a' && ch <= 'f') */
/* OBSOLETE 	return ch - 'a' + 10; */
/* OBSOLETE       else if (ch == ' ' && ignore_space) */
/* OBSOLETE 	; */
/* OBSOLETE       else */
/* OBSOLETE 	{ */
/* OBSOLETE 	  expect_prompt (); */
/* OBSOLETE 	  error ("Invalid hex digit from remote system."); */
/* OBSOLETE 	} */
/* OBSOLETE     } */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Get a byte from eb_desc and put it in *BYT.  Accept any number */
/* OBSOLETE    leading spaces.  */ */
/* OBSOLETE static void */
/* OBSOLETE get_hex_byte (char *byt) */
/* OBSOLETE { */
/* OBSOLETE   int val; */
/* OBSOLETE  */
/* OBSOLETE   val = get_hex_digit (1) << 4; */
/* OBSOLETE   val |= get_hex_digit (0); */
/* OBSOLETE   *byt = val; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Get N 32-bit words from remote, each preceded by a space, */
/* OBSOLETE    and put them in registers starting at REGNO.  */ */
/* OBSOLETE static void */
/* OBSOLETE get_hex_regs (int n, int regno) */
/* OBSOLETE { */
/* OBSOLETE   long val; */
/* OBSOLETE   int i; */
/* OBSOLETE  */
/* OBSOLETE   for (i = 0; i < n; i++) */
/* OBSOLETE     { */
/* OBSOLETE       int j; */
/* OBSOLETE  */
/* OBSOLETE       val = 0; */
/* OBSOLETE       for (j = 0; j < 8; j++) */
/* OBSOLETE 	val = (val << 4) + get_hex_digit (j == 0); */
/* OBSOLETE       supply_register (regno++, (char *) &val); */
/* OBSOLETE     } */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Called when SIGALRM signal sent due to alarm() timeout.  */ */
/* OBSOLETE #ifndef HAVE_TERMIO */
/* OBSOLETE  */
/* OBSOLETE volatile int n_alarms; */
/* OBSOLETE  */
/* OBSOLETE void */
/* OBSOLETE eb_timer (void) */
/* OBSOLETE { */
/* OBSOLETE #if 0 */
/* OBSOLETE   if (kiodebug) */
/* OBSOLETE     printf ("eb_timer called\n"); */
/* OBSOLETE #endif */
/* OBSOLETE   n_alarms++; */
/* OBSOLETE } */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE /* malloc'd name of the program on the remote system.  */ */
/* OBSOLETE static char *prog_name = NULL; */
/* OBSOLETE  */
/* OBSOLETE /* Nonzero if we have loaded the file ("yc") and not yet issued a "gi" */
/* OBSOLETE    command.  "gi" is supposed to happen exactly once for each "yc".  */ */
/* OBSOLETE static int need_gi = 0; */
/* OBSOLETE  */
/* OBSOLETE /* Number of SIGTRAPs we need to simulate.  That is, the next */
/* OBSOLETE    NEED_ARTIFICIAL_TRAP calls to eb_wait should just return */
/* OBSOLETE    SIGTRAP without actually waiting for anything.  */ */
/* OBSOLETE  */
/* OBSOLETE static int need_artificial_trap = 0; */
/* OBSOLETE  */
/* OBSOLETE /* This is called not only when we first attach, but also when the */
/* OBSOLETE    user types "run" after having attached.  */ */
/* OBSOLETE static void */
/* OBSOLETE eb_create_inferior (char *execfile, char *args, char **env) */
/* OBSOLETE { */
/* OBSOLETE   int entry_pt; */
/* OBSOLETE  */
/* OBSOLETE   if (args && *args) */
/* OBSOLETE     error ("Can't pass arguments to remote EBMON process"); */
/* OBSOLETE  */
/* OBSOLETE   if (execfile == 0 || exec_bfd == 0) */
/* OBSOLETE     error ("No executable file specified"); */
/* OBSOLETE  */
/* OBSOLETE   entry_pt = (int) bfd_get_start_address (exec_bfd); */
/* OBSOLETE  */
/* OBSOLETE   { */
/* OBSOLETE     /* OK, now read in the file.  Y=read, C=COFF, D=no symbols */
/* OBSOLETE        0=start address, %s=filename.  */ */
/* OBSOLETE  */
/* OBSOLETE     fprintf (eb_stream, "YC D,0:%s", prog_name); */
/* OBSOLETE  */
/* OBSOLETE     if (args != NULL) */
/* OBSOLETE       fprintf (eb_stream, " %s", args); */
/* OBSOLETE  */
/* OBSOLETE     fprintf (eb_stream, "\n"); */
/* OBSOLETE     fflush (eb_stream); */
/* OBSOLETE  */
/* OBSOLETE     expect_prompt (); */
/* OBSOLETE  */
/* OBSOLETE     need_gi = 1; */
/* OBSOLETE   } */
/* OBSOLETE  */
/* OBSOLETE /* The "process" (board) is already stopped awaiting our commands, and */
/* OBSOLETE    the program is already downloaded.  We just set its PC and go.  */ */
/* OBSOLETE  */
/* OBSOLETE   clear_proceed_status (); */
/* OBSOLETE  */
/* OBSOLETE   /* Tell wait_for_inferior that we've started a new process.  */ */
/* OBSOLETE   init_wait_for_inferior (); */
/* OBSOLETE  */
/* OBSOLETE   /* Set up the "saved terminal modes" of the inferior */
/* OBSOLETE      based on what modes we are starting it with.  */ */
/* OBSOLETE   target_terminal_init (); */
/* OBSOLETE  */
/* OBSOLETE   /* Install inferior's terminal modes.  */ */
/* OBSOLETE   target_terminal_inferior (); */
/* OBSOLETE  */
/* OBSOLETE   /* insert_step_breakpoint ();  FIXME, do we need this?  */ */
/* OBSOLETE   proceed ((CORE_ADDR) entry_pt, TARGET_SIGNAL_DEFAULT, 0);	/* Let 'er rip... */ */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Translate baud rates from integers to damn B_codes.  Unix should */
/* OBSOLETE    have outgrown this crap years ago, but even POSIX wouldn't buck it.  */ */
/* OBSOLETE  */
/* OBSOLETE #ifndef B19200 */
/* OBSOLETE #define B19200 EXTA */
/* OBSOLETE #endif */
/* OBSOLETE #ifndef B38400 */
/* OBSOLETE #define B38400 EXTB */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE struct */
/* OBSOLETE { */
/* OBSOLETE   int rate, damn_b; */
/* OBSOLETE } */
/* OBSOLETE baudtab[] = */
/* OBSOLETE { */
/* OBSOLETE   { */
/* OBSOLETE     0, B0 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     50, B50 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     75, B75 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     110, B110 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     134, B134 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     150, B150 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     200, B200 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     300, B300 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     600, B600 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     1200, B1200 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     1800, B1800 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     2400, B2400 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     4800, B4800 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     9600, B9600 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     19200, B19200 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     38400, B38400 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE   { */
/* OBSOLETE     -1, -1 */
/* OBSOLETE   } */
/* OBSOLETE   , */
/* OBSOLETE }; */
/* OBSOLETE  */
/* OBSOLETE int */
/* OBSOLETE damn_b (int rate) */
/* OBSOLETE { */
/* OBSOLETE   int i; */
/* OBSOLETE  */
/* OBSOLETE   for (i = 0; baudtab[i].rate != -1; i++) */
/* OBSOLETE     if (rate == baudtab[i].rate) */
/* OBSOLETE       return baudtab[i].damn_b; */
/* OBSOLETE   return B38400;		/* Random */ */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE  */
/* OBSOLETE /* Open a connection to a remote debugger. */
/* OBSOLETE    NAME is the filename used for communication, then a space, */
/* OBSOLETE    then the name of the program as we should name it to EBMON.  */ */
/* OBSOLETE  */
/* OBSOLETE static int baudrate = 9600; */
/* OBSOLETE static char *dev_name; */
/* OBSOLETE void */
/* OBSOLETE eb_open (char *name, int from_tty) */
/* OBSOLETE { */
/* OBSOLETE   TERMINAL sg; */
/* OBSOLETE  */
/* OBSOLETE   char *p; */
/* OBSOLETE  */
/* OBSOLETE   target_preopen (from_tty); */
/* OBSOLETE  */
/* OBSOLETE   /* Find the first whitespace character, it separates dev_name from */
/* OBSOLETE      prog_name.  */ */
/* OBSOLETE   if (name == 0) */
/* OBSOLETE     goto erroid; */
/* OBSOLETE  */
/* OBSOLETE   for (p = name; */
/* OBSOLETE        *p != '\0' && !isspace (*p); p++) */
/* OBSOLETE     ; */
/* OBSOLETE   if (*p == '\0') */
/* OBSOLETE   erroid: */
/* OBSOLETE     error ("\ */
/* OBSOLETE Please include the name of the device for the serial port,\n\ */
/* OBSOLETE the baud rate, and the name of the program to run on the remote system."); */
/* OBSOLETE   dev_name = alloca (p - name + 1); */
/* OBSOLETE   strncpy (dev_name, name, p - name); */
/* OBSOLETE   dev_name[p - name] = '\0'; */
/* OBSOLETE  */
/* OBSOLETE   /* Skip over the whitespace after dev_name */ */
/* OBSOLETE   for (; isspace (*p); p++) */
/* OBSOLETE     /*EMPTY */ ; */
/* OBSOLETE  */
/* OBSOLETE   if (1 != sscanf (p, "%d ", &baudrate)) */
/* OBSOLETE     goto erroid; */
/* OBSOLETE  */
/* OBSOLETE   /* Skip the number and then the spaces */ */
/* OBSOLETE   for (; isdigit (*p); p++) */
/* OBSOLETE     /*EMPTY */ ; */
/* OBSOLETE   for (; isspace (*p); p++) */
/* OBSOLETE     /*EMPTY */ ; */
/* OBSOLETE  */
/* OBSOLETE   if (prog_name != NULL) */
/* OBSOLETE     xfree (prog_name); */
/* OBSOLETE   prog_name = savestring (p, strlen (p)); */
/* OBSOLETE  */
/* OBSOLETE   eb_close (0); */
/* OBSOLETE  */
/* OBSOLETE   eb_desc = open (dev_name, O_RDWR); */
/* OBSOLETE   if (eb_desc < 0) */
/* OBSOLETE     perror_with_name (dev_name); */
/* OBSOLETE   ioctl (eb_desc, TIOCGETP, &sg); */
/* OBSOLETE #ifdef HAVE_TERMIO */
/* OBSOLETE   sg.c_cc[VMIN] = 0;		/* read with timeout.  */ */
/* OBSOLETE   sg.c_cc[VTIME] = timeout * 10; */
/* OBSOLETE   sg.c_lflag &= ~(ICANON | ECHO); */
/* OBSOLETE   sg.c_cflag = (sg.c_cflag & ~CBAUD) | damn_b (baudrate); */
/* OBSOLETE #else */
/* OBSOLETE   sg.sg_ispeed = damn_b (baudrate); */
/* OBSOLETE   sg.sg_ospeed = damn_b (baudrate); */
/* OBSOLETE   sg.sg_flags |= RAW | ANYP; */
/* OBSOLETE   sg.sg_flags &= ~ECHO; */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE   ioctl (eb_desc, TIOCSETP, &sg); */
/* OBSOLETE   eb_stream = fdopen (eb_desc, "r+"); */
/* OBSOLETE  */
/* OBSOLETE   push_target (&eb_ops); */
/* OBSOLETE   if (from_tty) */
/* OBSOLETE     printf ("Remote %s debugging %s using %s\n", target_shortname, */
/* OBSOLETE 	    prog_name, dev_name); */
/* OBSOLETE  */
/* OBSOLETE #ifndef HAVE_TERMIO */
/* OBSOLETE #ifndef NO_SIGINTERRUPT */
/* OBSOLETE   /* Cause SIGALRM's to make reads fail with EINTR instead of resuming */
/* OBSOLETE      the read.  */ */
/* OBSOLETE   if (siginterrupt (SIGALRM, 1) != 0) */
/* OBSOLETE     perror ("eb_open: error in siginterrupt"); */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE   /* Set up read timeout timer.  */ */
/* OBSOLETE   if ((void (*)) signal (SIGALRM, eb_timer) == (void (*)) -1) */
/* OBSOLETE     perror ("eb_open: error in signal"); */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE #if defined (LOG_FILE) */
/* OBSOLETE   log_file = fopen (LOG_FILE, "w"); */
/* OBSOLETE   if (log_file == NULL) */
/* OBSOLETE     perror_with_name (LOG_FILE); */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE   /* Hello?  Are you there?  */ */
/* OBSOLETE   write (eb_desc, "\n", 1); */
/* OBSOLETE  */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Close out all files and local state before this target loses control. */ */
/* OBSOLETE  */
/* OBSOLETE static void */
/* OBSOLETE eb_close (int quitting) */
/* OBSOLETE { */
/* OBSOLETE  */
/* OBSOLETE   /* Due to a bug in Unix, fclose closes not only the stdio stream, */
/* OBSOLETE      but also the file descriptor.  So we don't actually close */
/* OBSOLETE      eb_desc.  */ */
/* OBSOLETE   if (eb_stream) */
/* OBSOLETE     fclose (eb_stream);		/* This also closes eb_desc */ */
/* OBSOLETE   if (eb_desc >= 0) */
/* OBSOLETE     /* close (eb_desc); */ */
/* OBSOLETE  */
/* OBSOLETE     /* Do not try to close eb_desc again, later in the program.  */ */
/* OBSOLETE     eb_stream = NULL; */
/* OBSOLETE   eb_desc = -1; */
/* OBSOLETE  */
/* OBSOLETE #if defined (LOG_FILE) */
/* OBSOLETE   if (log_file) */
/* OBSOLETE     { */
/* OBSOLETE       if (ferror (log_file)) */
/* OBSOLETE 	printf ("Error writing log file.\n"); */
/* OBSOLETE       if (fclose (log_file) != 0) */
/* OBSOLETE 	printf ("Error closing log file.\n"); */
/* OBSOLETE     } */
/* OBSOLETE #endif */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Terminate the open connection to the remote debugger. */
/* OBSOLETE    Use this when you want to detach and do something else */
/* OBSOLETE    with your gdb.  */ */
/* OBSOLETE void */
/* OBSOLETE eb_detach (int from_tty) */
/* OBSOLETE { */
/* OBSOLETE   pop_target ();		/* calls eb_close to do the real work */ */
/* OBSOLETE   if (from_tty) */
/* OBSOLETE     printf ("Ending remote %s debugging\n", target_shortname); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Tell the remote machine to resume.  */ */
/* OBSOLETE  */
/* OBSOLETE void */
/* OBSOLETE eb_resume (ptid_t ptid, int step, enum target_signal sig) */
/* OBSOLETE { */
/* OBSOLETE   if (step) */
/* OBSOLETE     { */
/* OBSOLETE       write (eb_desc, "t 1,s\n", 6); */
/* OBSOLETE       /* Wait for the echo.  */ */
/* OBSOLETE       expect ("t 1,s\r"); */
/* OBSOLETE       /* Then comes a line containing the instruction we stepped to.  */ */
/* OBSOLETE       expect ("\n@@"); */
/* OBSOLETE       /* Then we get the prompt.  */ */
/* OBSOLETE       expect_prompt (); */
/* OBSOLETE  */
/* OBSOLETE       /* Force the next eb_wait to return a trap.  Not doing anything */
/* OBSOLETE          about I/O from the target means that the user has to type */
/* OBSOLETE          "continue" to see any.  This should be fixed.  */ */
/* OBSOLETE       need_artificial_trap = 1; */
/* OBSOLETE     } */
/* OBSOLETE   else */
/* OBSOLETE     { */
/* OBSOLETE       if (need_gi) */
/* OBSOLETE 	{ */
/* OBSOLETE 	  need_gi = 0; */
/* OBSOLETE 	  write (eb_desc, "gi\n", 3); */
/* OBSOLETE  */
/* OBSOLETE 	  /* Swallow the echo of "gi".  */ */
/* OBSOLETE 	  expect ("gi\r"); */
/* OBSOLETE 	} */
/* OBSOLETE       else */
/* OBSOLETE 	{ */
/* OBSOLETE 	  write (eb_desc, "GR\n", 3); */
/* OBSOLETE 	  /* Swallow the echo.  */ */
/* OBSOLETE 	  expect ("GR\r"); */
/* OBSOLETE 	} */
/* OBSOLETE     } */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Wait until the remote machine stops, then return, */
/* OBSOLETE    storing status in STATUS just as `wait' would.  */ */
/* OBSOLETE  */
/* OBSOLETE ptid_t */
/* OBSOLETE eb_wait (ptid_t ptid, struct target_waitstatus *status) */
/* OBSOLETE { */
/* OBSOLETE   /* Strings to look for.  '?' means match any single character.   */
/* OBSOLETE      Note that with the algorithm we use, the initial character */
/* OBSOLETE      of the string cannot recur in the string, or we will not */
/* OBSOLETE      find some cases of the string in the input.  */ */
/* OBSOLETE  */
/* OBSOLETE   static char bpt[] = "Invalid interrupt taken - #0x50 - "; */
/* OBSOLETE   /* It would be tempting to look for "\n[__exit + 0x8]\n" */
/* OBSOLETE      but that requires loading symbols with "yc i" and even if */
/* OBSOLETE      we did do that we don't know that the file has symbols.  */ */
/* OBSOLETE   static char exitmsg[] = "\n@@????????I    JMPTI     GR121,LR0"; */
/* OBSOLETE   char *bp = bpt; */
/* OBSOLETE   char *ep = exitmsg; */
/* OBSOLETE  */
/* OBSOLETE   /* Large enough for either sizeof (bpt) or sizeof (exitmsg) chars.  */ */
/* OBSOLETE   char swallowed[50]; */
/* OBSOLETE   /* Current position in swallowed.  */ */
/* OBSOLETE   char *swallowed_p = swallowed; */
/* OBSOLETE  */
/* OBSOLETE   int ch; */
/* OBSOLETE   int ch_handled; */
/* OBSOLETE  */
/* OBSOLETE   int old_timeout = timeout; */
/* OBSOLETE  */
/* OBSOLETE   status->kind = TARGET_WAITKIND_EXITED; */
/* OBSOLETE   status->value.integer = 0; */
/* OBSOLETE  */
/* OBSOLETE   if (need_artificial_trap != 0) */
/* OBSOLETE     { */
/* OBSOLETE       status->kind = TARGET_WAITKIND_STOPPED; */
/* OBSOLETE       status->value.sig = TARGET_SIGNAL_TRAP; */
/* OBSOLETE       need_artificial_trap--; */
/* OBSOLETE       return 0; */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   timeout = 0;			/* Don't time out -- user program is running. */ */
/* OBSOLETE   while (1) */
/* OBSOLETE     { */
/* OBSOLETE       ch_handled = 0; */
/* OBSOLETE       ch = readchar (); */
/* OBSOLETE       if (ch == *bp) */
/* OBSOLETE 	{ */
/* OBSOLETE 	  bp++; */
/* OBSOLETE 	  if (*bp == '\0') */
/* OBSOLETE 	    break; */
/* OBSOLETE 	  ch_handled = 1; */
/* OBSOLETE  */
/* OBSOLETE 	  *swallowed_p++ = ch; */
/* OBSOLETE 	} */
/* OBSOLETE       else */
/* OBSOLETE 	bp = bpt; */
/* OBSOLETE  */
/* OBSOLETE       if (ch == *ep || *ep == '?') */
/* OBSOLETE 	{ */
/* OBSOLETE 	  ep++; */
/* OBSOLETE 	  if (*ep == '\0') */
/* OBSOLETE 	    break; */
/* OBSOLETE  */
/* OBSOLETE 	  if (!ch_handled) */
/* OBSOLETE 	    *swallowed_p++ = ch; */
/* OBSOLETE 	  ch_handled = 1; */
/* OBSOLETE 	} */
/* OBSOLETE       else */
/* OBSOLETE 	ep = exitmsg; */
/* OBSOLETE  */
/* OBSOLETE       if (!ch_handled) */
/* OBSOLETE 	{ */
/* OBSOLETE 	  char *p; */
/* OBSOLETE  */
/* OBSOLETE 	  /* Print out any characters which have been swallowed.  */ */
/* OBSOLETE 	  for (p = swallowed; p < swallowed_p; ++p) */
/* OBSOLETE 	    putc (*p, stdout); */
/* OBSOLETE 	  swallowed_p = swallowed; */
/* OBSOLETE  */
/* OBSOLETE 	  putc (ch, stdout); */
/* OBSOLETE 	} */
/* OBSOLETE     } */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE   if (*bp == '\0') */
/* OBSOLETE     { */
/* OBSOLETE       status->kind = TARGET_WAITKIND_STOPPED; */
/* OBSOLETE       status->value.sig = TARGET_SIGNAL_TRAP; */
/* OBSOLETE     } */
/* OBSOLETE   else */
/* OBSOLETE     { */
/* OBSOLETE       status->kind = TARGET_WAITKIND_EXITED; */
/* OBSOLETE       status->value.integer = 0; */
/* OBSOLETE     } */
/* OBSOLETE   timeout = old_timeout; */
/* OBSOLETE  */
/* OBSOLETE   return 0; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Return the name of register number REGNO */
/* OBSOLETE    in the form input and output by EBMON. */
/* OBSOLETE  */
/* OBSOLETE    Returns a pointer to a static buffer containing the answer.  */ */
/* OBSOLETE static char * */
/* OBSOLETE get_reg_name (int regno) */
/* OBSOLETE { */
/* OBSOLETE   static char buf[80]; */
/* OBSOLETE   if (regno >= GR96_REGNUM && regno < GR96_REGNUM + 32) */
/* OBSOLETE     sprintf (buf, "GR%03d", regno - GR96_REGNUM + 96); */
/* OBSOLETE   else if (regno >= LR0_REGNUM && regno < LR0_REGNUM + 128) */
/* OBSOLETE     sprintf (buf, "LR%03d", regno - LR0_REGNUM); */
/* OBSOLETE   else if (regno == Q_REGNUM) */
/* OBSOLETE     strcpy (buf, "SR131"); */
/* OBSOLETE   else if (regno >= BP_REGNUM && regno <= CR_REGNUM) */
/* OBSOLETE     sprintf (buf, "SR%03d", regno - BP_REGNUM + 133); */
/* OBSOLETE   else if (regno == ALU_REGNUM) */
/* OBSOLETE     strcpy (buf, "SR132"); */
/* OBSOLETE   else if (regno >= IPC_REGNUM && regno <= IPB_REGNUM) */
/* OBSOLETE     sprintf (buf, "SR%03d", regno - IPC_REGNUM + 128); */
/* OBSOLETE   else if (regno >= VAB_REGNUM && regno <= LRU_REGNUM) */
/* OBSOLETE     sprintf (buf, "SR%03d", regno - VAB_REGNUM); */
/* OBSOLETE   else if (regno == GR1_REGNUM) */
/* OBSOLETE     strcpy (buf, "GR001"); */
/* OBSOLETE   return buf; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Read the remote registers into the block REGS.  */ */
/* OBSOLETE  */
/* OBSOLETE static void */
/* OBSOLETE eb_fetch_registers (void) */
/* OBSOLETE { */
/* OBSOLETE   int reg_index; */
/* OBSOLETE   int regnum_index; */
/* OBSOLETE   char tempbuf[10]; */
/* OBSOLETE   int i; */
/* OBSOLETE  */
/* OBSOLETE #if 0 */
/* OBSOLETE   /* This should not be necessary, because one is supposed to read the */
/* OBSOLETE      registers only when the inferior is stopped (at least with */
/* OBSOLETE      ptrace() and why not make it the same for remote?).  */ */
/* OBSOLETE   /* ^A is the "normal character" used to make sure we are talking to EBMON */
/* OBSOLETE      and not to the program being debugged.  */ */
/* OBSOLETE   write (eb_desc, "\001\n"); */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE   write (eb_desc, "dw gr96,gr127\n", 14); */
/* OBSOLETE   for (reg_index = 96, regnum_index = GR96_REGNUM; */
/* OBSOLETE        reg_index < 128; */
/* OBSOLETE        reg_index += 4, regnum_index += 4) */
/* OBSOLETE     { */
/* OBSOLETE       sprintf (tempbuf, "GR%03d ", reg_index); */
/* OBSOLETE       expect (tempbuf); */
/* OBSOLETE       get_hex_regs (4, regnum_index); */
/* OBSOLETE       expect ("\n"); */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   for (i = 0; i < 128; i += 32) */
/* OBSOLETE     { */
/* OBSOLETE       /* The PC has a tendency to hang if we get these */
/* OBSOLETE          all in one fell swoop ("dw lr0,lr127").  */ */
/* OBSOLETE       sprintf (tempbuf, "dw lr%d\n", i); */
/* OBSOLETE       write (eb_desc, tempbuf, strlen (tempbuf)); */
/* OBSOLETE       for (reg_index = i, regnum_index = LR0_REGNUM + i; */
/* OBSOLETE 	   reg_index < i + 32; */
/* OBSOLETE 	   reg_index += 4, regnum_index += 4) */
/* OBSOLETE 	{ */
/* OBSOLETE 	  sprintf (tempbuf, "LR%03d ", reg_index); */
/* OBSOLETE 	  expect (tempbuf); */
/* OBSOLETE 	  get_hex_regs (4, regnum_index); */
/* OBSOLETE 	  expect ("\n"); */
/* OBSOLETE 	} */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   write (eb_desc, "dw sr133,sr133\n", 15); */
/* OBSOLETE   expect ("SR133          "); */
/* OBSOLETE   get_hex_regs (1, BP_REGNUM); */
/* OBSOLETE   expect ("\n"); */
/* OBSOLETE  */
/* OBSOLETE   write (eb_desc, "dw sr134,sr134\n", 15); */
/* OBSOLETE   expect ("SR134                   "); */
/* OBSOLETE   get_hex_regs (1, FC_REGNUM); */
/* OBSOLETE   expect ("\n"); */
/* OBSOLETE  */
/* OBSOLETE   write (eb_desc, "dw sr135,sr135\n", 15); */
/* OBSOLETE   expect ("SR135                            "); */
/* OBSOLETE   get_hex_regs (1, CR_REGNUM); */
/* OBSOLETE   expect ("\n"); */
/* OBSOLETE  */
/* OBSOLETE   write (eb_desc, "dw sr131,sr131\n", 15); */
/* OBSOLETE   expect ("SR131                            "); */
/* OBSOLETE   get_hex_regs (1, Q_REGNUM); */
/* OBSOLETE   expect ("\n"); */
/* OBSOLETE  */
/* OBSOLETE   write (eb_desc, "dw sr0,sr14\n", 12); */
/* OBSOLETE   for (reg_index = 0, regnum_index = VAB_REGNUM; */
/* OBSOLETE        regnum_index <= LRU_REGNUM; */
/* OBSOLETE        regnum_index += 4, reg_index += 4) */
/* OBSOLETE     { */
/* OBSOLETE       sprintf (tempbuf, "SR%03d ", reg_index); */
/* OBSOLETE       expect (tempbuf); */
/* OBSOLETE       get_hex_regs (reg_index == 12 ? 3 : 4, regnum_index); */
/* OBSOLETE       expect ("\n"); */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   /* There doesn't seem to be any way to get these.  */ */
/* OBSOLETE   { */
/* OBSOLETE     int val = -1; */
/* OBSOLETE     supply_register (FPE_REGNUM, (char *) &val); */
/* OBSOLETE     supply_register (INTE_REGNUM, (char *) &val); */
/* OBSOLETE     supply_register (FPS_REGNUM, (char *) &val); */
/* OBSOLETE     supply_register (EXO_REGNUM, (char *) &val); */
/* OBSOLETE   } */
/* OBSOLETE  */
/* OBSOLETE   write (eb_desc, "dw gr1,gr1\n", 11); */
/* OBSOLETE   expect ("GR001 "); */
/* OBSOLETE   get_hex_regs (1, GR1_REGNUM); */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Fetch register REGNO, or all registers if REGNO is -1. */
/* OBSOLETE    Returns errno value.  */ */
/* OBSOLETE void */
/* OBSOLETE eb_fetch_register (int regno) */
/* OBSOLETE { */
/* OBSOLETE   if (regno == -1) */
/* OBSOLETE     eb_fetch_registers (); */
/* OBSOLETE   else */
/* OBSOLETE     { */
/* OBSOLETE       char *name = get_reg_name (regno); */
/* OBSOLETE       fprintf (eb_stream, "dw %s,%s\n", name, name); */
/* OBSOLETE       expect (name); */
/* OBSOLETE       expect (" "); */
/* OBSOLETE       get_hex_regs (1, regno); */
/* OBSOLETE       expect_prompt (); */
/* OBSOLETE     } */
/* OBSOLETE   return; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Store the remote registers from the contents of the block REGS.  */ */
/* OBSOLETE  */
/* OBSOLETE static void */
/* OBSOLETE eb_store_registers (void) */
/* OBSOLETE { */
/* OBSOLETE   int i, j; */
/* OBSOLETE   fprintf (eb_stream, "s gr1,%x\n", read_register (GR1_REGNUM)); */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE  */
/* OBSOLETE   for (j = 0; j < 32; j += 16) */
/* OBSOLETE     { */
/* OBSOLETE       fprintf (eb_stream, "s gr%d,", j + 96); */
/* OBSOLETE       for (i = 0; i < 15; ++i) */
/* OBSOLETE 	fprintf (eb_stream, "%x,", read_register (GR96_REGNUM + j + i)); */
/* OBSOLETE       fprintf (eb_stream, "%x\n", read_register (GR96_REGNUM + j + 15)); */
/* OBSOLETE       expect_prompt (); */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   for (j = 0; j < 128; j += 16) */
/* OBSOLETE     { */
/* OBSOLETE       fprintf (eb_stream, "s lr%d,", j); */
/* OBSOLETE       for (i = 0; i < 15; ++i) */
/* OBSOLETE 	fprintf (eb_stream, "%x,", read_register (LR0_REGNUM + j + i)); */
/* OBSOLETE       fprintf (eb_stream, "%x\n", read_register (LR0_REGNUM + j + 15)); */
/* OBSOLETE       expect_prompt (); */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   fprintf (eb_stream, "s sr133,%x,%x,%x\n", read_register (BP_REGNUM), */
/* OBSOLETE 	   read_register (FC_REGNUM), read_register (CR_REGNUM)); */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE   fprintf (eb_stream, "s sr131,%x\n", read_register (Q_REGNUM)); */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE   fprintf (eb_stream, "s sr0,"); */
/* OBSOLETE   for (i = 0; i < 11; ++i) */
/* OBSOLETE     fprintf (eb_stream, "%x,", read_register (VAB_REGNUM + i)); */
/* OBSOLETE   fprintf (eb_stream, "%x\n", read_register (VAB_REGNUM + 11)); */
/* OBSOLETE   expect_prompt (); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Store register REGNO, or all if REGNO == 0. */
/* OBSOLETE    Return errno value.  */ */
/* OBSOLETE void */
/* OBSOLETE eb_store_register (int regno) */
/* OBSOLETE { */
/* OBSOLETE   if (regno == -1) */
/* OBSOLETE     eb_store_registers (); */
/* OBSOLETE   else */
/* OBSOLETE     { */
/* OBSOLETE       char *name = get_reg_name (regno); */
/* OBSOLETE       fprintf (eb_stream, "s %s,%x\n", name, read_register (regno)); */
/* OBSOLETE       /* Setting GR1 changes the numbers of all the locals, so */
/* OBSOLETE          invalidate the register cache.  Do this *after* calling */
/* OBSOLETE          read_register, because we want read_register to return the */
/* OBSOLETE          value that write_register has just stuffed into the registers */
/* OBSOLETE          array, not the value of the register fetched from the */
/* OBSOLETE          inferior.  */ */
/* OBSOLETE       if (regno == GR1_REGNUM) */
/* OBSOLETE 	registers_changed (); */
/* OBSOLETE       expect_prompt (); */
/* OBSOLETE     } */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Get ready to modify the registers array.  On machines which store */
/* OBSOLETE    individual registers, this doesn't need to do anything.  On machines */
/* OBSOLETE    which store all the registers in one fell swoop, this makes sure */
/* OBSOLETE    that registers contains all the registers from the program being */
/* OBSOLETE    debugged.  */ */
/* OBSOLETE  */
/* OBSOLETE void */
/* OBSOLETE eb_prepare_to_store (void) */
/* OBSOLETE { */
/* OBSOLETE   /* Do nothing, since we can store individual regs */ */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Transfer LEN bytes between GDB address MYADDR and target address */
/* OBSOLETE    MEMADDR.  If WRITE is non-zero, transfer them to the target, */
/* OBSOLETE    otherwise transfer them from the target.  TARGET is unused. */
/* OBSOLETE  */
/* OBSOLETE    Returns the number of bytes transferred. */ */
/* OBSOLETE  */
/* OBSOLETE int */
/* OBSOLETE eb_xfer_inferior_memory (CORE_ADDR memaddr, char *myaddr, int len, int write, */
/* OBSOLETE 			 struct mem_attrib *attrib ATTRIBUTE_UNUSED, */
/* OBSOLETE 			 struct target_ops *target ATTRIBUTE_UNUSED) */
/* OBSOLETE { */
/* OBSOLETE   if (write) */
/* OBSOLETE     return eb_write_inferior_memory (memaddr, myaddr, len); */
/* OBSOLETE   else */
/* OBSOLETE     return eb_read_inferior_memory (memaddr, myaddr, len); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE void */
/* OBSOLETE eb_files_info (void) */
/* OBSOLETE { */
/* OBSOLETE   printf ("\tAttached to %s at %d baud and running program %s.\n", */
/* OBSOLETE 	  dev_name, baudrate, prog_name); */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Copy LEN bytes of data from debugger memory at MYADDR */
/* OBSOLETE    to inferior's memory at MEMADDR.  Returns length moved.  */ */
/* OBSOLETE int */
/* OBSOLETE eb_write_inferior_memory (CORE_ADDR memaddr, char *myaddr, int len) */
/* OBSOLETE { */
/* OBSOLETE   int i; */
/* OBSOLETE  */
/* OBSOLETE   for (i = 0; i < len; i++) */
/* OBSOLETE     { */
/* OBSOLETE       if ((i % 16) == 0) */
/* OBSOLETE 	fprintf (eb_stream, "sb %x,", memaddr + i); */
/* OBSOLETE       if ((i % 16) == 15 || i == len - 1) */
/* OBSOLETE 	{ */
/* OBSOLETE 	  fprintf (eb_stream, "%x\n", ((unsigned char *) myaddr)[i]); */
/* OBSOLETE 	  expect_prompt (); */
/* OBSOLETE 	} */
/* OBSOLETE       else */
/* OBSOLETE 	fprintf (eb_stream, "%x,", ((unsigned char *) myaddr)[i]); */
/* OBSOLETE     } */
/* OBSOLETE   return len; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Read LEN bytes from inferior memory at MEMADDR.  Put the result */
/* OBSOLETE    at debugger address MYADDR.  Returns length moved.  */ */
/* OBSOLETE int */
/* OBSOLETE eb_read_inferior_memory (CORE_ADDR memaddr, char *myaddr, int len) */
/* OBSOLETE { */
/* OBSOLETE   int i; */
/* OBSOLETE  */
/* OBSOLETE   /* Number of bytes read so far.  */ */
/* OBSOLETE   int count; */
/* OBSOLETE  */
/* OBSOLETE   /* Starting address of this pass.  */ */
/* OBSOLETE   unsigned long startaddr; */
/* OBSOLETE  */
/* OBSOLETE   /* Number of bytes to read in this pass.  */ */
/* OBSOLETE   int len_this_pass; */
/* OBSOLETE  */
/* OBSOLETE   /* Note that this code works correctly if startaddr is just less */
/* OBSOLETE      than UINT_MAX (well, really CORE_ADDR_MAX if there was such a */
/* OBSOLETE      thing).  That is, something like */
/* OBSOLETE      eb_read_bytes (CORE_ADDR_MAX - 4, foo, 4) */
/* OBSOLETE      works--it never adds len to memaddr and gets 0.  */ */
/* OBSOLETE   /* However, something like */
/* OBSOLETE      eb_read_bytes (CORE_ADDR_MAX - 3, foo, 4) */
/* OBSOLETE      doesn't need to work.  Detect it and give up if there's an attempt */
/* OBSOLETE      to do that.  */ */
/* OBSOLETE   if (((memaddr - 1) + len) < memaddr) */
/* OBSOLETE     { */
/* OBSOLETE       errno = EIO; */
/* OBSOLETE       return 0; */
/* OBSOLETE     } */
/* OBSOLETE  */
/* OBSOLETE   startaddr = memaddr; */
/* OBSOLETE   count = 0; */
/* OBSOLETE   while (count < len) */
/* OBSOLETE     { */
/* OBSOLETE       len_this_pass = 16; */
/* OBSOLETE       if ((startaddr % 16) != 0) */
/* OBSOLETE 	len_this_pass -= startaddr % 16; */
/* OBSOLETE       if (len_this_pass > (len - count)) */
/* OBSOLETE 	len_this_pass = (len - count); */
/* OBSOLETE  */
/* OBSOLETE       fprintf (eb_stream, "db %x,%x\n", startaddr, */
/* OBSOLETE 	       (startaddr - 1) + len_this_pass); */
/* OBSOLETE       expect ("\n"); */
/* OBSOLETE  */
/* OBSOLETE       /* Look for 8 hex digits.  */ */
/* OBSOLETE       i = 0; */
/* OBSOLETE       while (1) */
/* OBSOLETE 	{ */
/* OBSOLETE 	  if (isxdigit (readchar ())) */
/* OBSOLETE 	    ++i; */
/* OBSOLETE 	  else */
/* OBSOLETE 	    { */
/* OBSOLETE 	      expect_prompt (); */
/* OBSOLETE 	      error ("Hex digit expected from remote system."); */
/* OBSOLETE 	    } */
/* OBSOLETE 	  if (i >= 8) */
/* OBSOLETE 	    break; */
/* OBSOLETE 	} */
/* OBSOLETE  */
/* OBSOLETE       expect ("  "); */
/* OBSOLETE  */
/* OBSOLETE       for (i = 0; i < len_this_pass; i++) */
/* OBSOLETE 	get_hex_byte (&myaddr[count++]); */
/* OBSOLETE  */
/* OBSOLETE       expect_prompt (); */
/* OBSOLETE  */
/* OBSOLETE       startaddr += len_this_pass; */
/* OBSOLETE     } */
/* OBSOLETE   return len; */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE static void */
/* OBSOLETE eb_kill (char *args, int from_tty) */
/* OBSOLETE { */
/* OBSOLETE   return;			/* Ignore attempts to kill target system */ */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Clean up when a program exits. */
/* OBSOLETE  */
/* OBSOLETE    The program actually lives on in the remote processor's RAM, and may be */
/* OBSOLETE    run again without a download.  Don't leave it full of breakpoint */
/* OBSOLETE    instructions.  */ */
/* OBSOLETE  */
/* OBSOLETE void */
/* OBSOLETE eb_mourn_inferior (void) */
/* OBSOLETE { */
/* OBSOLETE   remove_breakpoints (); */
/* OBSOLETE   unpush_target (&eb_ops); */
/* OBSOLETE   generic_mourn_inferior ();	/* Do all the proper things now */ */
/* OBSOLETE } */
/* OBSOLETE /* Define the target subroutine names */ */
/* OBSOLETE  */
/* OBSOLETE struct target_ops eb_ops; */
/* OBSOLETE  */
/* OBSOLETE static void */
/* OBSOLETE init_eb_ops (void) */
/* OBSOLETE { */
/* OBSOLETE   eb_ops.to_shortname = "amd-eb"; */
/* OBSOLETE   eb_ops.to_longname = "Remote serial AMD EBMON target"; */
/* OBSOLETE   eb_ops.to_doc = "Use a remote computer running EBMON connected by a serial line.\n\ */
/* OBSOLETE Arguments are the name of the device for the serial line,\n\ */
/* OBSOLETE the speed to connect at in bits per second, and the filename of the\n\ */
/* OBSOLETE executable as it exists on the remote computer.  For example,\n\ */
/* OBSOLETE target amd-eb /dev/ttya 9600 demo", */
/* OBSOLETE     eb_ops.to_open = eb_open; */
/* OBSOLETE   eb_ops.to_close = eb_close; */
/* OBSOLETE   eb_ops.to_attach = 0; */
/* OBSOLETE   eb_ops.to_post_attach = NULL; */
/* OBSOLETE   eb_ops.to_require_attach = NULL; */
/* OBSOLETE   eb_ops.to_detach = eb_detach; */
/* OBSOLETE   eb_ops.to_require_detach = NULL; */
/* OBSOLETE   eb_ops.to_resume = eb_resume; */
/* OBSOLETE   eb_ops.to_wait = eb_wait; */
/* OBSOLETE   eb_ops.to_post_wait = NULL; */
/* OBSOLETE   eb_ops.to_fetch_registers = eb_fetch_register; */
/* OBSOLETE   eb_ops.to_store_registers = eb_store_register; */
/* OBSOLETE   eb_ops.to_prepare_to_store = eb_prepare_to_store; */
/* OBSOLETE   eb_ops.to_xfer_memory = eb_xfer_inferior_memory; */
/* OBSOLETE   eb_ops.to_files_info = eb_files_info; */
/* OBSOLETE   eb_ops.to_insert_breakpoint = 0; */
/* OBSOLETE   eb_ops.to_remove_breakpoint = 0;	/* Breakpoints */ */
/* OBSOLETE   eb_ops.to_terminal_init = 0; */
/* OBSOLETE   eb_ops.to_terminal_inferior = 0; */
/* OBSOLETE   eb_ops.to_terminal_ours_for_output = 0; */
/* OBSOLETE   eb_ops.to_terminal_ours = 0; */
/* OBSOLETE   eb_ops.to_terminal_info = 0;	/* Terminal handling */ */
/* OBSOLETE   eb_ops.to_kill = eb_kill; */
/* OBSOLETE   eb_ops.to_load = generic_load;	/* load */ */
/* OBSOLETE   eb_ops.to_lookup_symbol = 0;	/* lookup_symbol */ */
/* OBSOLETE   eb_ops.to_create_inferior = eb_create_inferior; */
/* OBSOLETE   eb_ops.to_post_startup_inferior = NULL; */
/* OBSOLETE   eb_ops.to_acknowledge_created_inferior = NULL; */
/* OBSOLETE   eb_ops.to_clone_and_follow_inferior = NULL; */
/* OBSOLETE   eb_ops.to_post_follow_inferior_by_clone = NULL; */
/* OBSOLETE   eb_ops.to_insert_fork_catchpoint = NULL; */
/* OBSOLETE   eb_ops.to_remove_fork_catchpoint = NULL; */
/* OBSOLETE   eb_ops.to_insert_vfork_catchpoint = NULL; */
/* OBSOLETE   eb_ops.to_remove_vfork_catchpoint = NULL; */
/* OBSOLETE   eb_ops.to_has_forked = NULL; */
/* OBSOLETE   eb_ops.to_has_vforked = NULL; */
/* OBSOLETE   eb_ops.to_can_follow_vfork_prior_to_exec = NULL; */
/* OBSOLETE   eb_ops.to_post_follow_vfork = NULL; */
/* OBSOLETE   eb_ops.to_insert_exec_catchpoint = NULL; */
/* OBSOLETE   eb_ops.to_remove_exec_catchpoint = NULL; */
/* OBSOLETE   eb_ops.to_has_execd = NULL; */
/* OBSOLETE   eb_ops.to_reported_exec_events_per_exec_call = NULL; */
/* OBSOLETE   eb_ops.to_has_exited = NULL; */
/* OBSOLETE   eb_ops.to_mourn_inferior = eb_mourn_inferior; */
/* OBSOLETE   eb_ops.to_can_run = 0;	/* can_run */ */
/* OBSOLETE   eb_ops.to_notice_signals = 0;	/* notice_signals */ */
/* OBSOLETE   eb_ops.to_thread_alive = 0;	/* thread-alive */ */
/* OBSOLETE   eb_ops.to_stop = 0;		/* to_stop */ */
/* OBSOLETE   eb_ops.to_pid_to_exec_file = NULL; */
/* OBSOLETE   eb_ops.to_stratum = process_stratum; */
/* OBSOLETE   eb_ops.DONT_USE = 0;		/* next */ */
/* OBSOLETE   eb_ops.to_has_all_memory = 1; */
/* OBSOLETE   eb_ops.to_has_memory = 1; */
/* OBSOLETE   eb_ops.to_has_stack = 1; */
/* OBSOLETE   eb_ops.to_has_registers = 1; */
/* OBSOLETE   eb_ops.to_has_execution = 1;	/* all mem, mem, stack, regs, exec */ */
/* OBSOLETE   eb_ops.to_sections = 0;	/* sections */ */
/* OBSOLETE   eb_ops.to_sections_end = 0;	/* sections end */ */
/* OBSOLETE   eb_ops.to_magic = OPS_MAGIC;	/* Always the last thing */ */
/* OBSOLETE }; */
/* OBSOLETE  */
/* OBSOLETE void */
/* OBSOLETE _initialize_remote_eb (void) */
/* OBSOLETE { */
/* OBSOLETE   init_eb_ops (); */
/* OBSOLETE   add_target (&eb_ops); */
/* OBSOLETE } */
@


1.14
log
@* MAINTAINERS: Mark a29k target as obsolete.
* Makefile.in (a29k-tdep.o, remote-adapt.o, remote-eb.o)
(remote-mm.o, remote-udi.o): Obsolete.  Remove references in
comments.
* NEWS: Note that a29k targets are obsolete.
* a29k-tdep.c: Mark as obsolete.
* configure.tgt: Mark a29k-*-aout*, a29k-*-coff*, a29k-*-elf*,
a29k-*-ebmon*, a29k-*-kern*, a29k-*-none*, a29k-*-udi* and
a29k-*-vxworks* targets as obsolete.
* remote-adapt.c: Obsolete.
* remote-eb.c: Obsolete.
* remote-mm.c: Obsolete.
* remote-udi.c: Obsolete.
* config/a29k/a29k-udi.mt: Obsolete.
* config/a29k/a29k.mt: Obsolete.
* config/a29k/tm-a29k.h: Obsolete.
* config/a29k/tm-vx29k.h: Obsolete.
* config/a29k/vx29k.mt: Obsolete.
@
text
@@


1.13
log
@Phase 1 of the ptid_t changes.
@
text
@d1 1088
a1088 1088
/* Remote debugging interface for AMD 29000 EBMON on IBM PC, for GDB.
   Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.
   Contributed by Cygnus Support.  Written by Jim Kingdon for Cygnus.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* This is like remote.c but is for an esoteric situation--
   having a a29k board in a PC hooked up to a unix machine with
   a serial line, and running ctty com1 on the PC, through which
   the unix machine can run ebmon.  Not to mention that the PC
   has PC/NFS, so it can access the same executables that gdb can,
   over the net in real time.  */

#include "defs.h"
#include "gdb_string.h"
#include "regcache.h"

#include "inferior.h"
#include "bfd.h"
#include "symfile.h"
#include "value.h"
#include <ctype.h>
#include <fcntl.h>
#include <signal.h>
#include <errno.h>
#include "terminal.h"
#include "target.h"
#include "gdbcore.h"

extern struct target_ops eb_ops;	/* Forward declaration */

static void eb_close ();

#define LOG_FILE "eb.log"
#if defined (LOG_FILE)
FILE *log_file;
#endif

static int timeout = 24;

/* Descriptor for I/O to remote machine.  Initialize it to -1 so that
   eb_open knows that we don't have a file open when the program
   starts.  */
int eb_desc = -1;

/* stream which is fdopen'd from eb_desc.  Only valid when
   eb_desc != -1.  */
FILE *eb_stream;

/* Read a character from the remote system, doing all the fancy
   timeout stuff.  */
static int
readchar (void)
{
  char buf;

  buf = '\0';
#ifdef HAVE_TERMIO
  /* termio does the timeout for us.  */
  read (eb_desc, &buf, 1);
#else
  alarm (timeout);
  if (read (eb_desc, &buf, 1) < 0)
    {
      if (errno == EINTR)
	error ("Timeout reading from remote system.");
      else
	perror_with_name ("remote");
    }
  alarm (0);
#endif

  if (buf == '\0')
    error ("Timeout reading from remote system.");
#if defined (LOG_FILE)
  putc (buf & 0x7f, log_file);
#endif
  return buf & 0x7f;
}

/* Keep discarding input from the remote system, until STRING is found. 
   Let the user break out immediately.  */
static void
expect (char *string)
{
  char *p = string;

  immediate_quit++;
  while (1)
    {
      if (readchar () == *p)
	{
	  p++;
	  if (*p == '\0')
	    {
	      immediate_quit--;
	      return;
	    }
	}
      else
	p = string;
    }
}

/* Keep discarding input until we see the ebmon prompt.

   The convention for dealing with the prompt is that you
   o give your command
   o *then* wait for the prompt.

   Thus the last thing that a procedure does with the serial line
   will be an expect_prompt().  Exception:  eb_resume does not
   wait for the prompt, because the terminal is being handed over
   to the inferior.  However, the next thing which happens after that
   is a eb_wait which does wait for the prompt.
   Note that this includes abnormal exit, e.g. error().  This is
   necessary to prevent getting into states from which we can't
   recover.  */
static void
expect_prompt (void)
{
#if defined (LOG_FILE)
  /* This is a convenient place to do this.  The idea is to do it often
     enough that we never lose much data if we terminate abnormally.  */
  fflush (log_file);
#endif
  expect ("\n# ");
}

/* Get a hex digit from the remote system & return its value.
   If ignore_space is nonzero, ignore spaces (not newline, tab, etc).  */
static int
get_hex_digit (int ignore_space)
{
  int ch;
  while (1)
    {
      ch = readchar ();
      if (ch >= '0' && ch <= '9')
	return ch - '0';
      else if (ch >= 'A' && ch <= 'F')
	return ch - 'A' + 10;
      else if (ch >= 'a' && ch <= 'f')
	return ch - 'a' + 10;
      else if (ch == ' ' && ignore_space)
	;
      else
	{
	  expect_prompt ();
	  error ("Invalid hex digit from remote system.");
	}
    }
}

/* Get a byte from eb_desc and put it in *BYT.  Accept any number
   leading spaces.  */
static void
get_hex_byte (char *byt)
{
  int val;

  val = get_hex_digit (1) << 4;
  val |= get_hex_digit (0);
  *byt = val;
}

/* Get N 32-bit words from remote, each preceded by a space,
   and put them in registers starting at REGNO.  */
static void
get_hex_regs (int n, int regno)
{
  long val;
  int i;

  for (i = 0; i < n; i++)
    {
      int j;

      val = 0;
      for (j = 0; j < 8; j++)
	val = (val << 4) + get_hex_digit (j == 0);
      supply_register (regno++, (char *) &val);
    }
}

/* Called when SIGALRM signal sent due to alarm() timeout.  */
#ifndef HAVE_TERMIO

volatile int n_alarms;

void
eb_timer (void)
{
#if 0
  if (kiodebug)
    printf ("eb_timer called\n");
#endif
  n_alarms++;
}
#endif

/* malloc'd name of the program on the remote system.  */
static char *prog_name = NULL;

/* Nonzero if we have loaded the file ("yc") and not yet issued a "gi"
   command.  "gi" is supposed to happen exactly once for each "yc".  */
static int need_gi = 0;

/* Number of SIGTRAPs we need to simulate.  That is, the next
   NEED_ARTIFICIAL_TRAP calls to eb_wait should just return
   SIGTRAP without actually waiting for anything.  */

static int need_artificial_trap = 0;

/* This is called not only when we first attach, but also when the
   user types "run" after having attached.  */
static void
eb_create_inferior (char *execfile, char *args, char **env)
{
  int entry_pt;

  if (args && *args)
    error ("Can't pass arguments to remote EBMON process");

  if (execfile == 0 || exec_bfd == 0)
    error ("No executable file specified");

  entry_pt = (int) bfd_get_start_address (exec_bfd);

  {
    /* OK, now read in the file.  Y=read, C=COFF, D=no symbols
       0=start address, %s=filename.  */

    fprintf (eb_stream, "YC D,0:%s", prog_name);

    if (args != NULL)
      fprintf (eb_stream, " %s", args);

    fprintf (eb_stream, "\n");
    fflush (eb_stream);

    expect_prompt ();

    need_gi = 1;
  }

/* The "process" (board) is already stopped awaiting our commands, and
   the program is already downloaded.  We just set its PC and go.  */

  clear_proceed_status ();

  /* Tell wait_for_inferior that we've started a new process.  */
  init_wait_for_inferior ();

  /* Set up the "saved terminal modes" of the inferior
     based on what modes we are starting it with.  */
  target_terminal_init ();

  /* Install inferior's terminal modes.  */
  target_terminal_inferior ();

  /* insert_step_breakpoint ();  FIXME, do we need this?  */
  proceed ((CORE_ADDR) entry_pt, TARGET_SIGNAL_DEFAULT, 0);	/* Let 'er rip... */
}

/* Translate baud rates from integers to damn B_codes.  Unix should
   have outgrown this crap years ago, but even POSIX wouldn't buck it.  */

#ifndef B19200
#define B19200 EXTA
#endif
#ifndef B38400
#define B38400 EXTB
#endif

struct
{
  int rate, damn_b;
}
baudtab[] =
{
  {
    0, B0
  }
  ,
  {
    50, B50
  }
  ,
  {
    75, B75
  }
  ,
  {
    110, B110
  }
  ,
  {
    134, B134
  }
  ,
  {
    150, B150
  }
  ,
  {
    200, B200
  }
  ,
  {
    300, B300
  }
  ,
  {
    600, B600
  }
  ,
  {
    1200, B1200
  }
  ,
  {
    1800, B1800
  }
  ,
  {
    2400, B2400
  }
  ,
  {
    4800, B4800
  }
  ,
  {
    9600, B9600
  }
  ,
  {
    19200, B19200
  }
  ,
  {
    38400, B38400
  }
  ,
  {
    -1, -1
  }
  ,
};

int
damn_b (int rate)
{
  int i;

  for (i = 0; baudtab[i].rate != -1; i++)
    if (rate == baudtab[i].rate)
      return baudtab[i].damn_b;
  return B38400;		/* Random */
}


/* Open a connection to a remote debugger.
   NAME is the filename used for communication, then a space,
   then the name of the program as we should name it to EBMON.  */

static int baudrate = 9600;
static char *dev_name;
void
eb_open (char *name, int from_tty)
{
  TERMINAL sg;

  char *p;

  target_preopen (from_tty);

  /* Find the first whitespace character, it separates dev_name from
     prog_name.  */
  if (name == 0)
    goto erroid;

  for (p = name;
       *p != '\0' && !isspace (*p); p++)
    ;
  if (*p == '\0')
  erroid:
    error ("\
Please include the name of the device for the serial port,\n\
the baud rate, and the name of the program to run on the remote system.");
  dev_name = alloca (p - name + 1);
  strncpy (dev_name, name, p - name);
  dev_name[p - name] = '\0';

  /* Skip over the whitespace after dev_name */
  for (; isspace (*p); p++)
    /*EMPTY */ ;

  if (1 != sscanf (p, "%d ", &baudrate))
    goto erroid;

  /* Skip the number and then the spaces */
  for (; isdigit (*p); p++)
    /*EMPTY */ ;
  for (; isspace (*p); p++)
    /*EMPTY */ ;

  if (prog_name != NULL)
    xfree (prog_name);
  prog_name = savestring (p, strlen (p));

  eb_close (0);

  eb_desc = open (dev_name, O_RDWR);
  if (eb_desc < 0)
    perror_with_name (dev_name);
  ioctl (eb_desc, TIOCGETP, &sg);
#ifdef HAVE_TERMIO
  sg.c_cc[VMIN] = 0;		/* read with timeout.  */
  sg.c_cc[VTIME] = timeout * 10;
  sg.c_lflag &= ~(ICANON | ECHO);
  sg.c_cflag = (sg.c_cflag & ~CBAUD) | damn_b (baudrate);
#else
  sg.sg_ispeed = damn_b (baudrate);
  sg.sg_ospeed = damn_b (baudrate);
  sg.sg_flags |= RAW | ANYP;
  sg.sg_flags &= ~ECHO;
#endif

  ioctl (eb_desc, TIOCSETP, &sg);
  eb_stream = fdopen (eb_desc, "r+");

  push_target (&eb_ops);
  if (from_tty)
    printf ("Remote %s debugging %s using %s\n", target_shortname,
	    prog_name, dev_name);

#ifndef HAVE_TERMIO
#ifndef NO_SIGINTERRUPT
  /* Cause SIGALRM's to make reads fail with EINTR instead of resuming
     the read.  */
  if (siginterrupt (SIGALRM, 1) != 0)
    perror ("eb_open: error in siginterrupt");
#endif

  /* Set up read timeout timer.  */
  if ((void (*)) signal (SIGALRM, eb_timer) == (void (*)) -1)
    perror ("eb_open: error in signal");
#endif

#if defined (LOG_FILE)
  log_file = fopen (LOG_FILE, "w");
  if (log_file == NULL)
    perror_with_name (LOG_FILE);
#endif

  /* Hello?  Are you there?  */
  write (eb_desc, "\n", 1);

  expect_prompt ();
}

/* Close out all files and local state before this target loses control. */

static void
eb_close (int quitting)
{

  /* Due to a bug in Unix, fclose closes not only the stdio stream,
     but also the file descriptor.  So we don't actually close
     eb_desc.  */
  if (eb_stream)
    fclose (eb_stream);		/* This also closes eb_desc */
  if (eb_desc >= 0)
    /* close (eb_desc); */

    /* Do not try to close eb_desc again, later in the program.  */
    eb_stream = NULL;
  eb_desc = -1;

#if defined (LOG_FILE)
  if (log_file)
    {
      if (ferror (log_file))
	printf ("Error writing log file.\n");
      if (fclose (log_file) != 0)
	printf ("Error closing log file.\n");
    }
#endif
}

/* Terminate the open connection to the remote debugger.
   Use this when you want to detach and do something else
   with your gdb.  */
void
eb_detach (int from_tty)
{
  pop_target ();		/* calls eb_close to do the real work */
  if (from_tty)
    printf ("Ending remote %s debugging\n", target_shortname);
}

/* Tell the remote machine to resume.  */

void
eb_resume (ptid_t ptid, int step, enum target_signal sig)
{
  if (step)
    {
      write (eb_desc, "t 1,s\n", 6);
      /* Wait for the echo.  */
      expect ("t 1,s\r");
      /* Then comes a line containing the instruction we stepped to.  */
      expect ("\n@@");
      /* Then we get the prompt.  */
      expect_prompt ();

      /* Force the next eb_wait to return a trap.  Not doing anything
         about I/O from the target means that the user has to type
         "continue" to see any.  This should be fixed.  */
      need_artificial_trap = 1;
    }
  else
    {
      if (need_gi)
	{
	  need_gi = 0;
	  write (eb_desc, "gi\n", 3);

	  /* Swallow the echo of "gi".  */
	  expect ("gi\r");
	}
      else
	{
	  write (eb_desc, "GR\n", 3);
	  /* Swallow the echo.  */
	  expect ("GR\r");
	}
    }
}

/* Wait until the remote machine stops, then return,
   storing status in STATUS just as `wait' would.  */

ptid_t
eb_wait (ptid_t ptid, struct target_waitstatus *status)
{
  /* Strings to look for.  '?' means match any single character.  
     Note that with the algorithm we use, the initial character
     of the string cannot recur in the string, or we will not
     find some cases of the string in the input.  */

  static char bpt[] = "Invalid interrupt taken - #0x50 - ";
  /* It would be tempting to look for "\n[__exit + 0x8]\n"
     but that requires loading symbols with "yc i" and even if
     we did do that we don't know that the file has symbols.  */
  static char exitmsg[] = "\n@@????????I    JMPTI     GR121,LR0";
  char *bp = bpt;
  char *ep = exitmsg;

  /* Large enough for either sizeof (bpt) or sizeof (exitmsg) chars.  */
  char swallowed[50];
  /* Current position in swallowed.  */
  char *swallowed_p = swallowed;

  int ch;
  int ch_handled;

  int old_timeout = timeout;

  status->kind = TARGET_WAITKIND_EXITED;
  status->value.integer = 0;

  if (need_artificial_trap != 0)
    {
      status->kind = TARGET_WAITKIND_STOPPED;
      status->value.sig = TARGET_SIGNAL_TRAP;
      need_artificial_trap--;
      return 0;
    }

  timeout = 0;			/* Don't time out -- user program is running. */
  while (1)
    {
      ch_handled = 0;
      ch = readchar ();
      if (ch == *bp)
	{
	  bp++;
	  if (*bp == '\0')
	    break;
	  ch_handled = 1;

	  *swallowed_p++ = ch;
	}
      else
	bp = bpt;

      if (ch == *ep || *ep == '?')
	{
	  ep++;
	  if (*ep == '\0')
	    break;

	  if (!ch_handled)
	    *swallowed_p++ = ch;
	  ch_handled = 1;
	}
      else
	ep = exitmsg;

      if (!ch_handled)
	{
	  char *p;

	  /* Print out any characters which have been swallowed.  */
	  for (p = swallowed; p < swallowed_p; ++p)
	    putc (*p, stdout);
	  swallowed_p = swallowed;

	  putc (ch, stdout);
	}
    }
  expect_prompt ();
  if (*bp == '\0')
    {
      status->kind = TARGET_WAITKIND_STOPPED;
      status->value.sig = TARGET_SIGNAL_TRAP;
    }
  else
    {
      status->kind = TARGET_WAITKIND_EXITED;
      status->value.integer = 0;
    }
  timeout = old_timeout;

  return 0;
}

/* Return the name of register number REGNO
   in the form input and output by EBMON.

   Returns a pointer to a static buffer containing the answer.  */
static char *
get_reg_name (int regno)
{
  static char buf[80];
  if (regno >= GR96_REGNUM && regno < GR96_REGNUM + 32)
    sprintf (buf, "GR%03d", regno - GR96_REGNUM + 96);
  else if (regno >= LR0_REGNUM && regno < LR0_REGNUM + 128)
    sprintf (buf, "LR%03d", regno - LR0_REGNUM);
  else if (regno == Q_REGNUM)
    strcpy (buf, "SR131");
  else if (regno >= BP_REGNUM && regno <= CR_REGNUM)
    sprintf (buf, "SR%03d", regno - BP_REGNUM + 133);
  else if (regno == ALU_REGNUM)
    strcpy (buf, "SR132");
  else if (regno >= IPC_REGNUM && regno <= IPB_REGNUM)
    sprintf (buf, "SR%03d", regno - IPC_REGNUM + 128);
  else if (regno >= VAB_REGNUM && regno <= LRU_REGNUM)
    sprintf (buf, "SR%03d", regno - VAB_REGNUM);
  else if (regno == GR1_REGNUM)
    strcpy (buf, "GR001");
  return buf;
}

/* Read the remote registers into the block REGS.  */

static void
eb_fetch_registers (void)
{
  int reg_index;
  int regnum_index;
  char tempbuf[10];
  int i;

#if 0
  /* This should not be necessary, because one is supposed to read the
     registers only when the inferior is stopped (at least with
     ptrace() and why not make it the same for remote?).  */
  /* ^A is the "normal character" used to make sure we are talking to EBMON
     and not to the program being debugged.  */
  write (eb_desc, "\001\n");
  expect_prompt ();
#endif

  write (eb_desc, "dw gr96,gr127\n", 14);
  for (reg_index = 96, regnum_index = GR96_REGNUM;
       reg_index < 128;
       reg_index += 4, regnum_index += 4)
    {
      sprintf (tempbuf, "GR%03d ", reg_index);
      expect (tempbuf);
      get_hex_regs (4, regnum_index);
      expect ("\n");
    }

  for (i = 0; i < 128; i += 32)
    {
      /* The PC has a tendency to hang if we get these
         all in one fell swoop ("dw lr0,lr127").  */
      sprintf (tempbuf, "dw lr%d\n", i);
      write (eb_desc, tempbuf, strlen (tempbuf));
      for (reg_index = i, regnum_index = LR0_REGNUM + i;
	   reg_index < i + 32;
	   reg_index += 4, regnum_index += 4)
	{
	  sprintf (tempbuf, "LR%03d ", reg_index);
	  expect (tempbuf);
	  get_hex_regs (4, regnum_index);
	  expect ("\n");
	}
    }

  write (eb_desc, "dw sr133,sr133\n", 15);
  expect ("SR133          ");
  get_hex_regs (1, BP_REGNUM);
  expect ("\n");

  write (eb_desc, "dw sr134,sr134\n", 15);
  expect ("SR134                   ");
  get_hex_regs (1, FC_REGNUM);
  expect ("\n");

  write (eb_desc, "dw sr135,sr135\n", 15);
  expect ("SR135                            ");
  get_hex_regs (1, CR_REGNUM);
  expect ("\n");

  write (eb_desc, "dw sr131,sr131\n", 15);
  expect ("SR131                            ");
  get_hex_regs (1, Q_REGNUM);
  expect ("\n");

  write (eb_desc, "dw sr0,sr14\n", 12);
  for (reg_index = 0, regnum_index = VAB_REGNUM;
       regnum_index <= LRU_REGNUM;
       regnum_index += 4, reg_index += 4)
    {
      sprintf (tempbuf, "SR%03d ", reg_index);
      expect (tempbuf);
      get_hex_regs (reg_index == 12 ? 3 : 4, regnum_index);
      expect ("\n");
    }

  /* There doesn't seem to be any way to get these.  */
  {
    int val = -1;
    supply_register (FPE_REGNUM, (char *) &val);
    supply_register (INTE_REGNUM, (char *) &val);
    supply_register (FPS_REGNUM, (char *) &val);
    supply_register (EXO_REGNUM, (char *) &val);
  }

  write (eb_desc, "dw gr1,gr1\n", 11);
  expect ("GR001 ");
  get_hex_regs (1, GR1_REGNUM);
  expect_prompt ();
}

/* Fetch register REGNO, or all registers if REGNO is -1.
   Returns errno value.  */
void
eb_fetch_register (int regno)
{
  if (regno == -1)
    eb_fetch_registers ();
  else
    {
      char *name = get_reg_name (regno);
      fprintf (eb_stream, "dw %s,%s\n", name, name);
      expect (name);
      expect (" ");
      get_hex_regs (1, regno);
      expect_prompt ();
    }
  return;
}

/* Store the remote registers from the contents of the block REGS.  */

static void
eb_store_registers (void)
{
  int i, j;
  fprintf (eb_stream, "s gr1,%x\n", read_register (GR1_REGNUM));
  expect_prompt ();

  for (j = 0; j < 32; j += 16)
    {
      fprintf (eb_stream, "s gr%d,", j + 96);
      for (i = 0; i < 15; ++i)
	fprintf (eb_stream, "%x,", read_register (GR96_REGNUM + j + i));
      fprintf (eb_stream, "%x\n", read_register (GR96_REGNUM + j + 15));
      expect_prompt ();
    }

  for (j = 0; j < 128; j += 16)
    {
      fprintf (eb_stream, "s lr%d,", j);
      for (i = 0; i < 15; ++i)
	fprintf (eb_stream, "%x,", read_register (LR0_REGNUM + j + i));
      fprintf (eb_stream, "%x\n", read_register (LR0_REGNUM + j + 15));
      expect_prompt ();
    }

  fprintf (eb_stream, "s sr133,%x,%x,%x\n", read_register (BP_REGNUM),
	   read_register (FC_REGNUM), read_register (CR_REGNUM));
  expect_prompt ();
  fprintf (eb_stream, "s sr131,%x\n", read_register (Q_REGNUM));
  expect_prompt ();
  fprintf (eb_stream, "s sr0,");
  for (i = 0; i < 11; ++i)
    fprintf (eb_stream, "%x,", read_register (VAB_REGNUM + i));
  fprintf (eb_stream, "%x\n", read_register (VAB_REGNUM + 11));
  expect_prompt ();
}

/* Store register REGNO, or all if REGNO == 0.
   Return errno value.  */
void
eb_store_register (int regno)
{
  if (regno == -1)
    eb_store_registers ();
  else
    {
      char *name = get_reg_name (regno);
      fprintf (eb_stream, "s %s,%x\n", name, read_register (regno));
      /* Setting GR1 changes the numbers of all the locals, so
         invalidate the register cache.  Do this *after* calling
         read_register, because we want read_register to return the
         value that write_register has just stuffed into the registers
         array, not the value of the register fetched from the
         inferior.  */
      if (regno == GR1_REGNUM)
	registers_changed ();
      expect_prompt ();
    }
}

/* Get ready to modify the registers array.  On machines which store
   individual registers, this doesn't need to do anything.  On machines
   which store all the registers in one fell swoop, this makes sure
   that registers contains all the registers from the program being
   debugged.  */

void
eb_prepare_to_store (void)
{
  /* Do nothing, since we can store individual regs */
}

/* Transfer LEN bytes between GDB address MYADDR and target address
   MEMADDR.  If WRITE is non-zero, transfer them to the target,
   otherwise transfer them from the target.  TARGET is unused.

   Returns the number of bytes transferred. */

int
eb_xfer_inferior_memory (CORE_ADDR memaddr, char *myaddr, int len, int write,
			 struct mem_attrib *attrib ATTRIBUTE_UNUSED,
			 struct target_ops *target ATTRIBUTE_UNUSED)
{
  if (write)
    return eb_write_inferior_memory (memaddr, myaddr, len);
  else
    return eb_read_inferior_memory (memaddr, myaddr, len);
}

void
eb_files_info (void)
{
  printf ("\tAttached to %s at %d baud and running program %s.\n",
	  dev_name, baudrate, prog_name);
}

/* Copy LEN bytes of data from debugger memory at MYADDR
   to inferior's memory at MEMADDR.  Returns length moved.  */
int
eb_write_inferior_memory (CORE_ADDR memaddr, char *myaddr, int len)
{
  int i;

  for (i = 0; i < len; i++)
    {
      if ((i % 16) == 0)
	fprintf (eb_stream, "sb %x,", memaddr + i);
      if ((i % 16) == 15 || i == len - 1)
	{
	  fprintf (eb_stream, "%x\n", ((unsigned char *) myaddr)[i]);
	  expect_prompt ();
	}
      else
	fprintf (eb_stream, "%x,", ((unsigned char *) myaddr)[i]);
    }
  return len;
}

/* Read LEN bytes from inferior memory at MEMADDR.  Put the result
   at debugger address MYADDR.  Returns length moved.  */
int
eb_read_inferior_memory (CORE_ADDR memaddr, char *myaddr, int len)
{
  int i;

  /* Number of bytes read so far.  */
  int count;

  /* Starting address of this pass.  */
  unsigned long startaddr;

  /* Number of bytes to read in this pass.  */
  int len_this_pass;

  /* Note that this code works correctly if startaddr is just less
     than UINT_MAX (well, really CORE_ADDR_MAX if there was such a
     thing).  That is, something like
     eb_read_bytes (CORE_ADDR_MAX - 4, foo, 4)
     works--it never adds len to memaddr and gets 0.  */
  /* However, something like
     eb_read_bytes (CORE_ADDR_MAX - 3, foo, 4)
     doesn't need to work.  Detect it and give up if there's an attempt
     to do that.  */
  if (((memaddr - 1) + len) < memaddr)
    {
      errno = EIO;
      return 0;
    }

  startaddr = memaddr;
  count = 0;
  while (count < len)
    {
      len_this_pass = 16;
      if ((startaddr % 16) != 0)
	len_this_pass -= startaddr % 16;
      if (len_this_pass > (len - count))
	len_this_pass = (len - count);

      fprintf (eb_stream, "db %x,%x\n", startaddr,
	       (startaddr - 1) + len_this_pass);
      expect ("\n");

      /* Look for 8 hex digits.  */
      i = 0;
      while (1)
	{
	  if (isxdigit (readchar ()))
	    ++i;
	  else
	    {
	      expect_prompt ();
	      error ("Hex digit expected from remote system.");
	    }
	  if (i >= 8)
	    break;
	}

      expect ("  ");

      for (i = 0; i < len_this_pass; i++)
	get_hex_byte (&myaddr[count++]);

      expect_prompt ();

      startaddr += len_this_pass;
    }
  return len;
}

static void
eb_kill (char *args, int from_tty)
{
  return;			/* Ignore attempts to kill target system */
}

/* Clean up when a program exits.

   The program actually lives on in the remote processor's RAM, and may be
   run again without a download.  Don't leave it full of breakpoint
   instructions.  */

void
eb_mourn_inferior (void)
{
  remove_breakpoints ();
  unpush_target (&eb_ops);
  generic_mourn_inferior ();	/* Do all the proper things now */
}
/* Define the target subroutine names */

struct target_ops eb_ops;

static void
init_eb_ops (void)
{
  eb_ops.to_shortname = "amd-eb";
  eb_ops.to_longname = "Remote serial AMD EBMON target";
  eb_ops.to_doc = "Use a remote computer running EBMON connected by a serial line.\n\
Arguments are the name of the device for the serial line,\n\
the speed to connect at in bits per second, and the filename of the\n\
executable as it exists on the remote computer.  For example,\n\
target amd-eb /dev/ttya 9600 demo",
    eb_ops.to_open = eb_open;
  eb_ops.to_close = eb_close;
  eb_ops.to_attach = 0;
  eb_ops.to_post_attach = NULL;
  eb_ops.to_require_attach = NULL;
  eb_ops.to_detach = eb_detach;
  eb_ops.to_require_detach = NULL;
  eb_ops.to_resume = eb_resume;
  eb_ops.to_wait = eb_wait;
  eb_ops.to_post_wait = NULL;
  eb_ops.to_fetch_registers = eb_fetch_register;
  eb_ops.to_store_registers = eb_store_register;
  eb_ops.to_prepare_to_store = eb_prepare_to_store;
  eb_ops.to_xfer_memory = eb_xfer_inferior_memory;
  eb_ops.to_files_info = eb_files_info;
  eb_ops.to_insert_breakpoint = 0;
  eb_ops.to_remove_breakpoint = 0;	/* Breakpoints */
  eb_ops.to_terminal_init = 0;
  eb_ops.to_terminal_inferior = 0;
  eb_ops.to_terminal_ours_for_output = 0;
  eb_ops.to_terminal_ours = 0;
  eb_ops.to_terminal_info = 0;	/* Terminal handling */
  eb_ops.to_kill = eb_kill;
  eb_ops.to_load = generic_load;	/* load */
  eb_ops.to_lookup_symbol = 0;	/* lookup_symbol */
  eb_ops.to_create_inferior = eb_create_inferior;
  eb_ops.to_post_startup_inferior = NULL;
  eb_ops.to_acknowledge_created_inferior = NULL;
  eb_ops.to_clone_and_follow_inferior = NULL;
  eb_ops.to_post_follow_inferior_by_clone = NULL;
  eb_ops.to_insert_fork_catchpoint = NULL;
  eb_ops.to_remove_fork_catchpoint = NULL;
  eb_ops.to_insert_vfork_catchpoint = NULL;
  eb_ops.to_remove_vfork_catchpoint = NULL;
  eb_ops.to_has_forked = NULL;
  eb_ops.to_has_vforked = NULL;
  eb_ops.to_can_follow_vfork_prior_to_exec = NULL;
  eb_ops.to_post_follow_vfork = NULL;
  eb_ops.to_insert_exec_catchpoint = NULL;
  eb_ops.to_remove_exec_catchpoint = NULL;
  eb_ops.to_has_execd = NULL;
  eb_ops.to_reported_exec_events_per_exec_call = NULL;
  eb_ops.to_has_exited = NULL;
  eb_ops.to_mourn_inferior = eb_mourn_inferior;
  eb_ops.to_can_run = 0;	/* can_run */
  eb_ops.to_notice_signals = 0;	/* notice_signals */
  eb_ops.to_thread_alive = 0;	/* thread-alive */
  eb_ops.to_stop = 0;		/* to_stop */
  eb_ops.to_pid_to_exec_file = NULL;
  eb_ops.to_stratum = process_stratum;
  eb_ops.DONT_USE = 0;		/* next */
  eb_ops.to_has_all_memory = 1;
  eb_ops.to_has_memory = 1;
  eb_ops.to_has_stack = 1;
  eb_ops.to_has_registers = 1;
  eb_ops.to_has_execution = 1;	/* all mem, mem, stack, regs, exec */
  eb_ops.to_sections = 0;	/* sections */
  eb_ops.to_sections_end = 0;	/* sections end */
  eb_ops.to_magic = OPS_MAGIC;	/* Always the last thing */
};

void
_initialize_remote_eb (void)
{
  init_eb_ops ();
  add_target (&eb_ops);
}
@


1.12
log
@* target.h (target_ops): Removed to_core_file_to_sym_file vector
function.
* corelow.c (core_ops): Updated for above change.
* gnu-nat.c (core_ops): Likewise.
* inftarg.c (child_ops): Likewise.
* monitor.c (monitor_ops): Likewise.
* ppc-bdm.c (bdm_ppc_ops): Likewise.
* remote-adapt.c (adapt_ops): Likewise.
* remote-bug.c (bug_ops): Likewise.
* remote-e7000.c (e7000_ops): Likewise.
* remote-eb.c (eb_ops): Likewise.
* remote-es.c (es1800_ops, es1800_child_ops): Likewise.
* remote-mm.c (mm_ops): Likewise.
* remote-nindy.c (nindy_ops): Likewise.
* remote-nrom.c (nrom_ops): Likewise.
* remote-os9k.c (rombug_ops): Likewise.
* remote-rdp.c (remote_rdp_ops): Likewise.
* remote-sim.c (gdbsim_ops): Likewise.
* remote-st.c (st2000_ops): Likewise.
* v850ice.c (v850ice_ops): Likewise.
* target.c (cleanup_target): Likewise
(update_current_target): Likewise.
(setup_target_debug): Likewise
(debug_to_core_file_to_sym_file): Removed.

* corefile.c (core_file_command) [HPUXHPPA]: Removed code that
sets symbol file from information obtained from the core file.
* corelow.c (core_file_to_sym_file): Removed.
@
text
@d523 1
a523 1
eb_resume (int pid, int step, enum target_signal sig)
d562 2
a563 2
int
eb_wait (struct target_waitstatus *status)
@


1.11
log
@Eliminate some uses of __STDC__.
@
text
@a1070 1
  eb_ops.to_core_file_to_sym_file = NULL;
@


1.10
log
@Update/correct copyright notices.
@
text
@a204 4
#ifndef __STDC__
#define volatile
/**/
#endif
@


1.9
log
@Create new file regcache.h.  Update all uses.
@
text
@d2 2
a3 1
   Copyright 1990, 1991, 1992, 2001 Free Software Foundation, Inc.
@


1.8
log
@* monitor.c (#include "gdb_wait.h"): Removed.
* ocd.c: Likewise.
* ppc-bdm.c: Likewise.
* remote-adapt.c: Likewise.
* remote-array.c: Likewise.
* remote-bug.c: Likewise.
* remote-e7000.c: Likewise.
* remote-eb.c: Likewise.
* remote-es.c: Likewise.
* remote-mips.c: Likewise.
* remote-mm.c: Likewise.
* remote-nindy.c: Likewise.
* remote-os9k.c: Likewise.
* remote-rdi.c: Likewise.
* remote-rdp.c: Likewise.
* remote-sds.c: Likewise.
* remote-sim.c: Likewise.
* remote-st.c: Likewise.
* remote-udi.c: Likewise.
* remote-vx.c: Likewise.
* remote-vx29k.c: Likewise.
* remote-vx68.c: Likewise.
* remote-vx960.c: Likewise.
* remote-vxmips.c: Likewise.
* remote-vxsparc.c: Likewise.
* remote.c: Likewise.
* ser-pipe.c: Likewise.
* ser-unix.c: Likewise.
* Makefile.in: Updated dependencies.
-------------------------------------------------------------------
@
text
@d31 1
@


1.7
log
@* exec.c (xfer_memory): Add attrib argument.
* infptrace.c (child_xfer_memory): Likewise.
* monitor.c (monitor_xfer_memory): Likewise.
* remote-adapt.c (adapt_xfer_inferior_memory): Likewise.
* remote-array.c (array_xfer_memory): Likewise.
* remote-bug.c (bug_xfer_memory): Likewise.
* remote-e7000.c (e7000_xfer_inferior_memory): Likewise.
* remote-eb.c (eb_xfer_inferior_memory): Likewise.
* remote-es.c (es1800_xfer_inferior_memory): Likewise.
* remote-mips.c (mips_xfer_memory): Likewise.
* remote-mm.c (mm_xfer_inferior_memory): Likewise.
* remote-nindy.c (nindy_xfer_inferior_memory): Likewise.
* remote-os9k.c (rombug_xfer_inferior_memory): Likewise.
* remote-rdi.c (arm_rdi_xfer_memory): Likewise.
* remote-rdp.c (remote_rdp_xfer_inferior_memory): Likewise.
* remote-sds.c (sds_xfer_memory): Likewise.
* remote-sim.c (gdbsim_xfer_inferior_memory): Likewise.
* remote-st.c (st2000_xfer_inferior_memory): Likewise.
* remote-udi.c (udi_xfer_inferior_memory): Likewise.
* remote-vx.c (vx_xfer_memory): Likewise.
* remote.c (remote_xfer_memory): Likewise.
* target.c (debug_to_xfer_memory, do_xfer_memory): Likewise.
* target.h (child_xfer_memory, do_xfer_memory, xfer_memory): Likewise.

* target.h (#include "memattr.h"): Added.
(target_ops.to_xfer_memory): Add attrib argument.

* wince.c (_initialize_inftarg): Removed call to set_dcache_state.
* dcache.h (set_dcache_state): Removed declaration.
* dcache.c (set_dcache_state): Removed definition

* dcache.c: Update module comment, as dcache is now enabled and
disabled with memory region attributes instead of by the global
variable "remotecache".  Add comment describing the interaction
between dcache and memory region attributes.
(dcache_xfer_memory): Add comment describing benefits of moving
cache writeback to a higher level.
(dcache_struct): Removed cache_has_stuff field.  This was used to
record whether the cache had been accessed in order to invalidate
it when it was disabled.  However, this is not needed because the
cache is write through and the code that enables, disables, and
deletes memory regions invalidate the cache.  Add comment which
suggests that we could be more selective and only invalidate those
cache lines containing data from those memory regions.
(dcache_invalidate): Updated.
(dcache_xfer_memory): Updated.

(dcache_alloc): Don't abort() if dcache_enabled_p is clear.
(dcache_xfer_memory): Removed code that called do_xfer_memory() to
perform a uncached transfer if dcache_enabled_p was clear.  This
function is now only called if caching is enabled for the memory
region.
(dcache_info): Always print cache info.

* target.c (do_xfer_memory): Add attrib argument.
(target_xfer_memory, target_xfer_memory_partial): Break transfer
into chunks defined by memory regions, pass region attributes to
do_xfer_memory().
* dcache.c (dcache_read_line, dcache_write_line): Likewise.

* Makefile.in (SFILES): Add memattr.c.
(COMMON_OBS): Add memattr.o.
(dcache.o): Add target.h to dependencies.
* memattr.c: New file.
* memattr.h: Likewise.
@
text
@a34 1
#include "gdb_wait.h"
@


1.6
log
@Replace free() with xfree().
@
text
@d2 1
a2 1
   Copyright 1990, 1991, 1992 Free Software Foundation, Inc.
d882 2
a883 1
			 struct target_ops *target)
@


1.5
log
@Protoization.
@
text
@d429 1
a429 1
    free (prog_name);
@


1.4
log
@* dcache.c (dcache_info): Output a cache line's state vector so it
lines up under the data vector.

* dcache.c (dcache_read_line): New function.
(dcache_peek_byte): Use it.
(dcache_alloc): Return NULL if write of reclaimed cache line fails.
(dcache_peek_byte, dcache_poke_byte): Return failure if
dcache_alloc() returns a NULL data block pointer.
(dcache_xfer_memory): Don't force writeback unless we were writing.

* monitor.c (monitor_expect): Change places where immediate_quit
is set to 1 or 0 to increments and decrements respectively.  This
allows such changes to nest properly.
* ocd.c (ocd_start_remote): Likewise.
* remote-adapt.c (expect): Likewise.
* remote-array.c (expect): Likewise.
* remote-eb.c (expect): Likewise.
* remote-e7000.c (e7000_start_remote): Likewise.
* remote-mips.c (mips_expect_timeout, mips_getstring): Likewise.
* remote-nrom.c (expect): Likewise.
* remote-os9k.c (expect): Likewise.
* remote-sds.c (sds_start_remote): Likewise.
* remote-st.c (expect): Likewise.
* remote-utils.c (sr_expect): Likewise.
* remote.c (remote_start_remote): Likewise.
* tracepoint.c (read_actions): Likewise.

* remote-mips.c (mips_getstring): Balance changes to immediate_quit.
@
text
@d874 5
a879 1
/* FIXME-someday!  Merge these two.  */
d881 2
a882 6
eb_xfer_inferior_memory (memaddr, myaddr, len, write, target)
     CORE_ADDR memaddr;
     char *myaddr;
     int len;
     int write;
     struct target_ops *target;	/* ignored */
@


1.3
log
@Protoization.
@
text
@d103 1
a103 1
  immediate_quit = 1;
d111 1
a111 1
	      immediate_quit = 0;
@


1.2
log
@Replace ../include/wait.h with gdb_wait.h.
@
text
@d68 1
a68 1
readchar ()
d99 1
a99 2
expect (string)
     char *string;
d135 1
a135 1
expect_prompt ()
d148 1
a148 2
get_hex_digit (ignore_space)
     int ignore_space;
d173 1
a173 2
get_hex_byte (byt)
     char *byt;
d185 1
a185 3
get_hex_regs (n, regno)
     int n;
     int regno;
d211 1
a211 1
eb_timer ()
d237 1
a237 4
eb_create_inferior (execfile, args, env)
     char *execfile;
     char *args;
     char **env;
d372 1
a372 2
damn_b (rate)
     int rate;
d390 1
a390 3
eb_open (name, from_tty)
     char *name;
     int from_tty;
d486 1
a486 2
eb_close (quitting)
     int quitting;
d516 1
a516 2
eb_detach (from_tty)
     int from_tty;
d526 1
a526 3
eb_resume (pid, step, sig)
     int pid, step;
     enum target_signal sig;
d566 1
a566 2
eb_wait (status)
     struct target_waitstatus *status;
d665 1
a665 2
get_reg_name (regno)
     int regno;
d690 1
a690 1
eb_fetch_registers ()
d784 1
a784 2
eb_fetch_register (regno)
     int regno;
d803 1
a803 1
eb_store_registers ()
d842 1
a842 2
eb_store_register (regno)
     int regno;
d869 1
a869 1
eb_prepare_to_store ()
d891 1
a891 1
eb_files_info ()
d900 1
a900 4
eb_write_inferior_memory (memaddr, myaddr, len)
     CORE_ADDR memaddr;
     char *myaddr;
     int len;
d922 1
a922 4
eb_read_inferior_memory (memaddr, myaddr, len)
     CORE_ADDR memaddr;
     char *myaddr;
     int len;
d992 1
a992 3
eb_kill (args, from_tty)
     char *args;
     int from_tty;
d1004 1
a1004 1
eb_mourn_inferior ()
d1087 1
a1087 1
_initialize_remote_eb ()
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d35 1
a35 1
#include "wait.h"
d45 1
a45 1
extern struct target_ops eb_ops;		/* Forward declaration */
d47 1
a47 1
static void eb_close();
d107 1
a107 1
      if (readchar() == *p)
d198 1
a198 1
      
d210 2
a211 1
#define volatile /**/
d264 1
a264 1
	fprintf(eb_stream, " %s", args);
d290 1
a290 1
  proceed ((CORE_ADDR)entry_pt, TARGET_SIGNAL_DEFAULT, 0);		/* Let 'er rip... */
d303 74
a376 18
struct {int rate, damn_b;} baudtab[] = {
	{0, B0},
	{50, B50},
	{75, B75},
	{110, B110},
	{134, B134},
	{150, B150},
	{200, B200},
	{300, B300},
	{600, B600},
	{1200, B1200},
	{1800, B1800},
	{2400, B2400},
	{4800, B4800},
	{9600, B9600},
	{19200, B19200},
	{38400, B38400},
	{-1, -1},
d379 2
a380 1
int damn_b (rate)
d386 3
a388 2
    if (rate == baudtab[i].rate) return baudtab[i].damn_b;
  return B38400;	/* Random */
d408 1
a408 1
  
d418 1
a418 1
erroid:
d428 2
a429 2
    /*EMPTY*/;
  
d435 1
a435 1
    /*EMPTY*/;
d437 2
a438 2
    /*EMPTY*/;
  
d490 1
a490 1
  
d505 1
a505 1
    fclose (eb_stream);	/* This also closes eb_desc */
d509 2
a510 2
  /* Do not try to close eb_desc again, later in the program.  */
  eb_stream = NULL;
d514 7
a520 6
  if (log_file) {
    if (ferror (log_file))
      printf ("Error writing log file.\n");
    if (fclose (log_file) != 0)
      printf ("Error closing log file.\n");
  }
d531 1
a531 1
  pop_target();		/* calls eb_close to do the real work */
d535 1
a535 1
 
d564 1
a564 1
	  
d588 1
a588 1
  
d618 1
a618 1
  timeout = 0;		/* Don't time out -- user program is running. */
d656 1
a656 1
	  
d661 1
a661 1
  if (*bp== '\0')
d738 1
a738 1
	 all in one fell swoop ("dw lr0,lr127").  */
d870 5
a874 5
	 invalidate the register cache.  Do this *after* calling
	 read_register, because we want read_register to return the
	 value that write_register has just stuffed into the registers
	 array, not the value of the register fetched from the
	 inferior.  */
d901 1
a901 1
     struct target_ops *target;		/* ignored */
d932 1
a932 1
	  fprintf (eb_stream, "%x\n", ((unsigned char *)myaddr)[i]);
d936 1
a936 1
	fprintf (eb_stream, "%x,", ((unsigned char *)myaddr)[i]);
d944 1
a944 1
eb_read_inferior_memory(memaddr, myaddr, len)
d969 6
a974 5
  if (((memaddr - 1) + len) < memaddr) {
    errno = EIO;
    return 0;
  }
  
d1021 1
a1021 1
  return;		/* Ignore attempts to kill target system */
d1039 1
a1039 1
struct target_ops eb_ops ;
d1041 2
a1042 2
static void 
init_eb_ops(void)
d1044 3
a1046 3
  eb_ops.to_shortname = 	"amd-eb";
  eb_ops.to_longname = 	"Remote serial AMD EBMON target";
  eb_ops.to_doc = 	"Use a remote computer running EBMON connected by a serial line.\n\
d1051 3
a1053 3
    eb_ops.to_open = 	eb_open;
  eb_ops.to_close = 	eb_close;
  eb_ops.to_attach = 	0;
d1056 1
a1056 1
  eb_ops.to_detach = 	eb_detach;
d1058 2
a1059 2
  eb_ops.to_resume = 	eb_resume;
  eb_ops.to_wait  = 	eb_wait;
d1061 16
a1076 16
  eb_ops.to_fetch_registers  = 	eb_fetch_register;
  eb_ops.to_store_registers  = 	eb_store_register;
  eb_ops.to_prepare_to_store = 	eb_prepare_to_store;
  eb_ops.to_xfer_memory  = 	eb_xfer_inferior_memory;
  eb_ops.to_files_info  = 	eb_files_info;
  eb_ops.to_insert_breakpoint = 	0;
  eb_ops.to_remove_breakpoint = 	0;	/* Breakpoints */
  eb_ops.to_terminal_init  = 	0;
  eb_ops.to_terminal_inferior = 	0;
  eb_ops.to_terminal_ours_for_output = 	0;
  eb_ops.to_terminal_ours  = 	0;
  eb_ops.to_terminal_info  = 	0;	/* Terminal handling */
  eb_ops.to_kill  = 	eb_kill;
  eb_ops.to_load  = 	generic_load;	/* load */
  eb_ops.to_lookup_symbol = 	0; /* lookup_symbol */
  eb_ops.to_create_inferior = 	eb_create_inferior;
d1079 1
a1079 1
  eb_ops.to_clone_and_follow_inferior = NULL;      
d1084 1
a1084 1
  eb_ops.to_remove_vfork_catchpoint = NULL;                  
d1086 2
a1087 2
  eb_ops.to_has_vforked = NULL;            
  eb_ops.to_can_follow_vfork_prior_to_exec = NULL;        
d1094 5
a1098 5
  eb_ops.to_mourn_inferior = 	eb_mourn_inferior;
  eb_ops.to_can_run  =   	0;	/* can_run */
  eb_ops.to_notice_signals =   	0; /* notice_signals */
  eb_ops.to_thread_alive  = 	0; /* thread-alive */
  eb_ops.to_stop  = 	0;			/* to_stop */
d1101 10
a1110 10
  eb_ops.to_stratum = 	process_stratum;
  eb_ops.DONT_USE = 	0; /* next */
  eb_ops.to_has_all_memory = 	1;
  eb_ops.to_has_memory = 	1;
  eb_ops.to_has_stack = 	1;
  eb_ops.to_has_registers = 	1;
  eb_ops.to_has_execution = 	1;	/* all mem, mem, stack, regs, exec */
  eb_ops.to_sections = 	0; /* sections */
  eb_ops.to_sections_end = 	0; /* sections end */
  eb_ops.to_magic = 	OPS_MAGIC;		/* Always the last thing */
d1116 1
a1116 1
  init_eb_ops() ;
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d44 1
a44 1
extern struct target_ops eb_ops;	/* Forward declaration */
d46 1
a46 1
static void eb_close ();
d106 1
a106 1
      if (readchar () == *p)
d197 1
a197 1

d209 1
a209 2
#define volatile
/**/
d262 1
a262 1
      fprintf (eb_stream, " %s", args);
d288 1
a288 1
  proceed ((CORE_ADDR) entry_pt, TARGET_SIGNAL_DEFAULT, 0);	/* Let 'er rip... */
d301 18
a318 74
struct
{
  int rate, damn_b;
}
baudtab[] =
{
  {
    0, B0
  }
  ,
  {
    50, B50
  }
  ,
  {
    75, B75
  }
  ,
  {
    110, B110
  }
  ,
  {
    134, B134
  }
  ,
  {
    150, B150
  }
  ,
  {
    200, B200
  }
  ,
  {
    300, B300
  }
  ,
  {
    600, B600
  }
  ,
  {
    1200, B1200
  }
  ,
  {
    1800, B1800
  }
  ,
  {
    2400, B2400
  }
  ,
  {
    4800, B4800
  }
  ,
  {
    9600, B9600
  }
  ,
  {
    19200, B19200
  }
  ,
  {
    38400, B38400
  }
  ,
  {
    -1, -1
  }
  ,
d321 1
a321 2
int
damn_b (rate)
d327 2
a328 3
    if (rate == baudtab[i].rate)
      return baudtab[i].damn_b;
  return B38400;		/* Random */
d348 1
a348 1

d358 1
a358 1
  erroid:
d368 2
a369 2
    /*EMPTY */ ;

d375 1
a375 1
    /*EMPTY */ ;
d377 2
a378 2
    /*EMPTY */ ;

d430 1
a430 1

d445 1
a445 1
    fclose (eb_stream);		/* This also closes eb_desc */
d449 2
a450 2
    /* Do not try to close eb_desc again, later in the program.  */
    eb_stream = NULL;
d454 6
a459 7
  if (log_file)
    {
      if (ferror (log_file))
	printf ("Error writing log file.\n");
      if (fclose (log_file) != 0)
	printf ("Error closing log file.\n");
    }
d470 1
a470 1
  pop_target ();		/* calls eb_close to do the real work */
d474 1
a474 1

d503 1
a503 1

d527 1
a527 1

d557 1
a557 1
  timeout = 0;			/* Don't time out -- user program is running. */
d595 1
a595 1

d600 1
a600 1
  if (*bp == '\0')
d677 1
a677 1
         all in one fell swoop ("dw lr0,lr127").  */
d809 5
a813 5
         invalidate the register cache.  Do this *after* calling
         read_register, because we want read_register to return the
         value that write_register has just stuffed into the registers
         array, not the value of the register fetched from the
         inferior.  */
d840 1
a840 1
     struct target_ops *target;	/* ignored */
d871 1
a871 1
	  fprintf (eb_stream, "%x\n", ((unsigned char *) myaddr)[i]);
d875 1
a875 1
	fprintf (eb_stream, "%x,", ((unsigned char *) myaddr)[i]);
d883 1
a883 1
eb_read_inferior_memory (memaddr, myaddr, len)
d908 5
a912 6
  if (((memaddr - 1) + len) < memaddr)
    {
      errno = EIO;
      return 0;
    }

d959 1
a959 1
  return;			/* Ignore attempts to kill target system */
d977 1
a977 1
struct target_ops eb_ops;
d979 2
a980 2
static void
init_eb_ops (void)
d982 3
a984 3
  eb_ops.to_shortname = "amd-eb";
  eb_ops.to_longname = "Remote serial AMD EBMON target";
  eb_ops.to_doc = "Use a remote computer running EBMON connected by a serial line.\n\
d989 3
a991 3
    eb_ops.to_open = eb_open;
  eb_ops.to_close = eb_close;
  eb_ops.to_attach = 0;
d994 1
a994 1
  eb_ops.to_detach = eb_detach;
d996 2
a997 2
  eb_ops.to_resume = eb_resume;
  eb_ops.to_wait = eb_wait;
d999 16
a1014 16
  eb_ops.to_fetch_registers = eb_fetch_register;
  eb_ops.to_store_registers = eb_store_register;
  eb_ops.to_prepare_to_store = eb_prepare_to_store;
  eb_ops.to_xfer_memory = eb_xfer_inferior_memory;
  eb_ops.to_files_info = eb_files_info;
  eb_ops.to_insert_breakpoint = 0;
  eb_ops.to_remove_breakpoint = 0;	/* Breakpoints */
  eb_ops.to_terminal_init = 0;
  eb_ops.to_terminal_inferior = 0;
  eb_ops.to_terminal_ours_for_output = 0;
  eb_ops.to_terminal_ours = 0;
  eb_ops.to_terminal_info = 0;	/* Terminal handling */
  eb_ops.to_kill = eb_kill;
  eb_ops.to_load = generic_load;	/* load */
  eb_ops.to_lookup_symbol = 0;	/* lookup_symbol */
  eb_ops.to_create_inferior = eb_create_inferior;
d1017 1
a1017 1
  eb_ops.to_clone_and_follow_inferior = NULL;
d1022 1
a1022 1
  eb_ops.to_remove_vfork_catchpoint = NULL;
d1024 2
a1025 2
  eb_ops.to_has_vforked = NULL;
  eb_ops.to_can_follow_vfork_prior_to_exec = NULL;
d1032 5
a1036 5
  eb_ops.to_mourn_inferior = eb_mourn_inferior;
  eb_ops.to_can_run = 0;	/* can_run */
  eb_ops.to_notice_signals = 0;	/* notice_signals */
  eb_ops.to_thread_alive = 0;	/* thread-alive */
  eb_ops.to_stop = 0;		/* to_stop */
d1039 10
a1048 10
  eb_ops.to_stratum = process_stratum;
  eb_ops.DONT_USE = 0;		/* next */
  eb_ops.to_has_all_memory = 1;
  eb_ops.to_has_memory = 1;
  eb_ops.to_has_stack = 1;
  eb_ops.to_has_registers = 1;
  eb_ops.to_has_execution = 1;	/* all mem, mem, stack, regs, exec */
  eb_ops.to_sections = 0;	/* sections */
  eb_ops.to_sections_end = 0;	/* sections end */
  eb_ops.to_magic = OPS_MAGIC;	/* Always the last thing */
d1054 1
a1054 1
  init_eb_ops ();
@

