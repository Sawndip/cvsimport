head	1.256;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.249
	gdb_7_6-2013-04-26-release:1.249
	gdb_7_6-branch:1.249.0.2
	gdb_7_6-2013-03-12-branchpoint:1.249
	gdb_7_5_1-2012-11-29-release:1.234
	gdb_7_5-2012-08-17-release:1.234
	gdb_7_5-branch:1.234.0.2
	gdb_7_5-2012-07-18-branchpoint:1.234
	gdb_7_4_1-2012-04-26-release:1.221.2.1
	gdb_7_4-2012-01-24-release:1.221.2.1
	gdb_7_4-branch:1.221.0.2
	gdb_7_4-2011-12-13-branchpoint:1.221
	gdb_7_3_1-2011-09-04-release:1.215
	gdb_7_3-2011-07-26-release:1.215
	gdb_7_3-branch:1.215.0.2
	gdb_7_3-2011-04-01-branchpoint:1.215
	gdb_7_2-2010-09-02-release:1.195
	gdb_7_2-branch:1.195.0.2
	gdb_7_2-2010-07-07-branchpoint:1.195
	gdb_7_1-2010-03-18-release:1.186
	gdb_7_1-branch:1.186.0.2
	gdb_7_1-2010-02-18-branchpoint:1.186
	gdb_7_0_1-2009-12-22-release:1.176
	gdb_7_0-2009-10-06-release:1.176
	gdb_7_0-branch:1.176.0.4
	gdb_7_0-2009-09-16-branchpoint:1.176
	arc-sim-20090309:1.144
	msnyder-checkpoint-072509-branch:1.176.0.2
	msnyder-checkpoint-072509-branchpoint:1.176
	arc-insight_6_8-branch:1.144.0.6
	arc-insight_6_8-branchpoint:1.144
	insight_6_8-branch:1.144.0.4
	insight_6_8-branchpoint:1.144
	reverse-20081226-branch:1.155.0.4
	reverse-20081226-branchpoint:1.155
	multiprocess-20081120-branch:1.155.0.2
	multiprocess-20081120-branchpoint:1.155
	reverse-20080930-branch:1.150.0.2
	reverse-20080930-branchpoint:1.150
	reverse-20080717-branch:1.145.0.4
	reverse-20080717-branchpoint:1.145
	msnyder-reverse-20080609-branch:1.145.0.2
	msnyder-reverse-20080609-branchpoint:1.145
	drow-reverse-20070409-branch:1.114.0.2
	drow-reverse-20070409-branchpoint:1.114
	gdb_6_8-2008-03-27-release:1.144
	gdb_6_8-branch:1.144.0.2
	gdb_6_8-2008-02-26-branchpoint:1.144
	gdb_6_7_1-2007-10-29-release:1.134
	gdb_6_7-2007-10-10-release:1.134
	gdb_6_7-branch:1.134.0.2
	gdb_6_7-2007-09-07-branchpoint:1.134
	insight_6_6-20070208-release:1.106
	gdb_6_6-2006-12-18-release:1.106
	gdb_6_6-branch:1.106.0.2
	gdb_6_6-2006-11-15-branchpoint:1.106
	insight_6_5-20061003-release:1.105.12.1
	gdb-csl-symbian-6_4_50_20060226-12:1.104
	gdb-csl-sourcerygxx-3_4_4-25:1.101
	nickrob-async-20060828-mergepoint:1.106
	gdb-csl-symbian-6_4_50_20060226-11:1.104
	gdb-csl-sourcerygxx-4_1-17:1.104.2.1
	gdb-csl-20060226-branch-local-2:1.104.2.1
	gdb-csl-sourcerygxx-4_1-14:1.104.2.1
	gdb-csl-sourcerygxx-4_1-13:1.104.2.1
	gdb-csl-sourcerygxx-4_1-12:1.104.2.1
	gdb-csl-sourcerygxx-3_4_4-21:1.104.2.1
	gdb_6_5-20060621-release:1.105
	gdb-csl-sourcerygxx-4_1-9:1.104.2.1
	gdb-csl-sourcerygxx-4_1-8:1.104.2.1
	gdb-csl-sourcerygxx-4_1-7:1.104.2.1
	gdb-csl-arm-2006q1-6:1.104.2.1
	gdb-csl-sourcerygxx-4_1-6:1.104.2.1
	gdb-csl-symbian-6_4_50_20060226-10:1.104
	gdb-csl-symbian-6_4_50_20060226-9:1.104
	gdb-csl-symbian-6_4_50_20060226-8:1.104
	gdb-csl-coldfire-4_1-11:1.104.2.1
	gdb-csl-sourcerygxx-3_4_4-19:1.104.2.1
	gdb-csl-coldfire-4_1-10:1.104.2.1
	gdb_6_5-branch:1.105.0.12
	gdb_6_5-2006-05-14-branchpoint:1.105
	gdb-csl-sourcerygxx-4_1-5:1.104.2.1
	nickrob-async-20060513-branch:1.105.0.10
	nickrob-async-20060513-branchpoint:1.105
	gdb-csl-sourcerygxx-4_1-4:1.104.2.1
	msnyder-reverse-20060502-branch:1.105.0.8
	msnyder-reverse-20060502-branchpoint:1.105
	gdb-csl-morpho-4_1-4:1.104
	gdb-csl-sourcerygxx-3_4_4-17:1.104
	readline_5_1-import-branch:1.105.0.6
	readline_5_1-import-branchpoint:1.105
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.104
	gdb-csl-symbian-20060226-branch:1.104.0.4
	gdb-csl-symbian-20060226-branchpoint:1.104
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.104
	msnyder-reverse-20060331-branch:1.105.0.4
	msnyder-reverse-20060331-branchpoint:1.105
	gdb-csl-available-20060303-branch:1.105.0.2
	gdb-csl-available-20060303-branchpoint:1.105
	gdb-csl-20060226-branch:1.104.0.2
	gdb-csl-20060226-branchpoint:1.104
	gdb_6_4-20051202-release:1.101
	msnyder-fork-checkpoint-branch:1.101.0.8
	msnyder-fork-checkpoint-branchpoint:1.101
	gdb-csl-gxxpro-6_3-branch:1.101.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.101
	gdb_6_4-branch:1.101.0.4
	gdb_6_4-2005-11-01-branchpoint:1.101
	gdb-csl-arm-20051020-branch:1.101.0.2
	gdb-csl-arm-20051020-branchpoint:1.101
	msnyder-tracepoint-checkpoint-branch:1.100.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.100
	gdb-csl-arm-20050325-2005-q1b:1.99
	gdb-csl-arm-20050325-2005-q1a:1.99
	csl-arm-20050325-branch:1.99.0.2
	csl-arm-20050325-branchpoint:1.99
	gdb-post-i18n-errorwarning-20050211:1.94
	gdb-pre-i18n-errorwarning-20050211:1.93
	gdb_6_3-20041109-release:1.92
	gdb_6_3-branch:1.92.0.2
	gdb_6_3-20041019-branchpoint:1.92
	drow_intercu-merge-20040921:1.92
	drow_intercu-merge-20040915:1.92
	jimb-gdb_6_2-e500-branch:1.82.0.10
	jimb-gdb_6_2-e500-branchpoint:1.82
	gdb_6_2-20040730-release:1.82
	gdb_6_2-branch:1.82.0.6
	gdb_6_2-2004-07-10-gmt-branchpoint:1.82
	gdb_6_1_1-20040616-release:1.81.4.1
	gdb_6_1-2004-04-05-release:1.81.4.1
	drow_intercu-merge-20040402:1.82
	drow_intercu-merge-20040327:1.82
	ezannoni_pie-20040323-branch:1.82.0.4
	ezannoni_pie-20040323-branchpoint:1.82
	cagney_tramp-20040321-mergepoint:1.82
	cagney_tramp-20040309-branch:1.82.0.2
	cagney_tramp-20040309-branchpoint:1.82
	gdb_6_1-branch:1.81.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.81
	drow_intercu-20040221-branch:1.81.0.2
	drow_intercu-20040221-branchpoint:1.81
	cagney_bfdfile-20040213-branch:1.80.0.2
	cagney_bfdfile-20040213-branchpoint:1.80
	drow-cplus-merge-20040208:1.80
	carlton_dictionary-20040126-merge:1.79
	cagney_bigcore-20040122-branch:1.79.0.2
	cagney_bigcore-20040122-branchpoint:1.79
	drow-cplus-merge-20040113:1.78
	drow-cplus-merge-20031224:1.78
	drow-cplus-merge-20031220:1.78
	carlton_dictionary-20031215-merge:1.78
	drow-cplus-merge-20031214:1.78
	carlton-dictionary-20031111-merge:1.78
	gdb_6_0-2003-10-04-release:1.73.4.1
	kettenis_sparc-20030918-branch:1.77.0.4
	kettenis_sparc-20030918-branchpoint:1.77
	carlton_dictionary-20030917-merge:1.77
	ezannoni_pie-20030916-branchpoint:1.77
	ezannoni_pie-20030916-branch:1.77.0.2
	cagney_x86i386-20030821-branch:1.74.0.2
	cagney_x86i386-20030821-branchpoint:1.74
	carlton_dictionary-20030805-merge:1.74
	carlton_dictionary-20030627-merge:1.74
	gdb_6_0-branch:1.73.0.4
	gdb_6_0-2003-06-23-branchpoint:1.73
	jimb-ppc64-linux-20030613-branch:1.73.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.73
	cagney_convert-20030606-branch:1.72.0.6
	cagney_convert-20030606-branchpoint:1.72
	cagney_writestrings-20030508-branch:1.71.0.20
	cagney_writestrings-20030508-branchpoint:1.71
	jimb-ppc64-linux-20030528-branch:1.72.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.72
	carlton_dictionary-20030523-merge:1.72
	cagney_fileio-20030521-branch:1.72.0.2
	cagney_fileio-20030521-branchpoint:1.72
	kettenis_i386newframe-20030517-mergepoint:1.72
	jimb-ppc64-linux-20030509-branch:1.71.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.71
	kettenis_i386newframe-20030504-mergepoint:1.71
	carlton_dictionary-20030430-merge:1.71
	kettenis_i386newframe-20030419-branch:1.71.0.16
	kettenis_i386newframe-20030419-branchpoint:1.71
	carlton_dictionary-20030416-merge:1.71
	cagney_frameaddr-20030409-mergepoint:1.71
	kettenis_i386newframe-20030406-branch:1.71.0.14
	kettenis_i386newframe-20030406-branchpoint:1.71
	cagney_frameaddr-20030403-branchpoint:1.71
	cagney_frameaddr-20030403-branch:1.71.0.12
	cagney_framebase-20030330-mergepoint:1.71
	cagney_framebase-20030326-branch:1.71.0.10
	cagney_framebase-20030326-branchpoint:1.71
	cagney_lazyid-20030317-branch:1.71.0.8
	cagney_lazyid-20030317-branchpoint:1.71
	kettenis-i386newframe-20030316-mergepoint:1.71
	offbyone-20030313-branch:1.71.0.6
	offbyone-20030313-branchpoint:1.71
	kettenis-i386newframe-20030308-branch:1.71.0.4
	kettenis-i386newframe-20030308-branchpoint:1.71
	carlton_dictionary-20030305-merge:1.71
	cagney_offbyone-20030303-branch:1.71.0.2
	cagney_offbyone-20030303-branchpoint:1.71
	carlton_dictionary-20030207-merge:1.70
	interps-20030203-mergepoint:1.69
	interps-20030202-branch:1.69.0.2
	interps-20030202-branchpoint:1.69
	cagney-unwind-20030108-branch:1.65.0.2
	cagney-unwind-20030108-branchpoint:1.65
	carlton_dictionary-20021223-merge:1.64
	gdb_5_3-2002-12-12-release:1.56.6.1
	carlton_dictionary-20021115-merge:1.62
	kseitz_interps-20021105-merge:1.62
	kseitz_interps-20021103-merge:1.62
	drow-cplus-merge-20021020:1.60
	drow-cplus-merge-20021025:1.60
	carlton_dictionary-20021025-merge:1.61
	carlton_dictionary-20021011-merge:1.59
	drow-cplus-branch:1.59.0.2
	drow-cplus-branchpoint:1.59
	kseitz_interps-20020930-merge:1.58
	carlton_dictionary-20020927-merge:1.58
	carlton_dictionary-branch:1.58.0.2
	carlton_dictionary-20020920-branchpoint:1.58
	gdb_5_3-branch:1.56.0.6
	gdb_5_3-2002-09-04-branchpoint:1.56
	kseitz_interps-20020829-merge:1.56
	cagney_sysregs-20020825-branch:1.56.0.4
	cagney_sysregs-20020825-branchpoint:1.56
	readline_4_3-import-branch:1.56.0.2
	readline_4_3-import-branchpoint:1.56
	gdb_5_2_1-2002-07-23-release:1.41
	kseitz_interps-20020528-branch:1.52.0.2
	kseitz_interps-20020528-branchpoint:1.52
	cagney_regbuf-20020515-branch:1.51.0.2
	cagney_regbuf-20020515-branchpoint:1.51
	jimb-macro-020506-branch:1.47.0.2
	jimb-macro-020506-branchpoint:1.47
	gdb_5_2-2002-04-29-release:1.41
	gdb_5_2-branch:1.41.0.2
	gdb_5_2-2002-03-03-branchpoint:1.41
	gdb_5_1_1-2002-01-24-release:1.23
	gdb_5_1_0_1-2002-01-03-release:1.23
	cygnus_cvs_20020108_pre:1.35
	gdb_5_1_0_1-2002-01-03-branchpoint:1.23
	gdb_5_1_0_1-2002-01-03-branch:1.23.0.6
	gdb_5_1-2001-11-21-release:1.23
	gdb_s390-2001-09-26-branch:1.23.0.4
	gdb_s390-2001-09-26-branchpoint:1.23
	gdb_5_1-2001-07-29-branch:1.23.0.2
	gdb_5_1-2001-07-29-branchpoint:1.23
	dberlin-typesystem-branch:1.22.0.2
	dberlin-typesystem-branchpoint:1.22
	gdb-post-ptid_t-2001-05-03:1.21
	gdb-pre-ptid_t-2001-05-03:1.21
	insight-precleanup-2001-01-01:1.16
	gdb-post-protoization-2000-07-29:1.12
	gdb-pre-protoization-2000-07-29:1.11
	gdb-premipsmulti-2000-06-06-branch:1.9.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.9
	gdb-post-params-removal-2000-06-04:1.9
	gdb-pre-params-removal-2000-06-04:1.9
	gdb-post-params-removal-2000-05-28:1.9
	gdb-pre-params-removal-2000-05-28:1.8
	gdb_5_0-2000-05-19-release:1.8
	gdb_4_18_2-2000-05-18-release:1.8
	gdb_4_95_1-2000-05-11-snapshot:1.8
	gdb_4_95_0-2000-04-27-snapshot:1.8
	gdb_5_0-2000-04-10-branch:1.8.0.2
	gdb_5_0-2000-04-10-branchpoint:1.8
	repo-unification-2000-02-06:1.1.1.12
	insight-2000-02-04:1.1.1.12
	gdb-2000-02-04:1.1.1.12
	gdb-2000-02-02:1.1.1.12
	gdb-2000-02-01:1.1.1.12
	gdb-2000-01-31:1.1.1.12
	gdb-2000-01-26:1.1.1.12
	gdb-2000-01-24:1.1.1.12
	gdb-2000-01-17:1.1.1.12
	gdb-2000-01-10:1.1.1.12
	gdb-2000-01-05:1.1.1.12
	gdb-1999-12-21:1.1.1.12
	gdb-1999-12-13:1.1.1.12
	gdb-1999-12-07:1.1.1.11
	gdb-1999-12-06:1.1.1.11
	gdb-1999-11-16:1.1.1.10
	gdb-1999-11-08:1.1.1.10
	gdb-1999-11-01:1.1.1.10
	gdb-1999-10-25:1.1.1.9
	gdb-1999-10-18:1.1.1.9
	gdb-1999-10-11:1.1.1.8
	gdb-1999-10-04:1.1.1.8
	gdb-1999-09-28:1.1.1.8
	gdb-1999-09-21:1.1.1.8
	gdb-1999-09-13:1.1.1.8
	gdb-1999-09-08:1.1.1.8
	gdb-1999-08-30:1.1.1.7
	gdb-1999-08-23:1.1.1.7
	gdb-1999-08-16:1.1.1.7
	gdb-1999-08-09:1.1.1.7
	gdb-1999-08-02:1.1.1.7
	gdb-1999-07-26:1.1.1.7
	gdb-1999-07-19:1.1.1.7
	gdb-1999-07-12:1.1.1.6
	gdb-post-reformat-19990707:1.1.1.6
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.6
	gdb-pre-reformat-19990707:1.1.1.5
	gdb-1999-07-07:1.1.1.5
	gdb-1999-07-05:1.1.1.4
	gdb-1999-06-28:1.1.1.4
	gdb-1999-06-21:1.1.1.4
	gdb-1999-06-14:1.1.1.3
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.256
date	2013.10.17.13.28.37;	author qiyao;	state Exp;
branches;
next	1.255;

1.255
date	2013.10.02.00.46.06;	author kseitz;	state Exp;
branches;
next	1.254;

1.254
date	2013.09.24.13.57.37;	author jkratoch;	state Exp;
branches;
next	1.253;

1.253
date	2013.09.16.18.00.34;	author shebs;	state Exp;
branches;
next	1.252;

1.252
date	2013.08.20.06.42.19;	author amodra;	state Exp;
branches;
next	1.251;

1.251
date	2013.04.15.17.30.36;	author tromey;	state Exp;
branches;
next	1.250;

1.250
date	2013.03.15.17.10.42;	author tromey;	state Exp;
branches;
next	1.249;

1.249
date	2013.01.21.18.10.33;	author tromey;	state Exp;
branches;
next	1.248;

1.248
date	2013.01.21.18.07.03;	author tromey;	state Exp;
branches;
next	1.247;

1.247
date	2013.01.14.20.59.26;	author tromey;	state Exp;
branches;
next	1.246;

1.246
date	2013.01.01.06.32.44;	author brobecke;	state Exp;
branches;
next	1.245;

1.245
date	2012.12.03.19.59.13;	author tromey;	state Exp;
branches;
next	1.244;

1.244
date	2012.11.12.17.37.36;	author tromey;	state Exp;
branches;
next	1.243;

1.243
date	2012.09.27.08.57.16;	author siddhesh;	state Exp;
branches;
next	1.242;

1.242
date	2012.09.10.17.12.51;	author kseitz;	state Exp;
branches;
next	1.241;

1.241
date	2012.08.17.17.36.58;	author kseitz;	state Exp;
branches;
next	1.240;

1.240
date	2012.08.16.07.36.20;	author qiyao;	state Exp;
branches;
next	1.239;

1.239
date	2012.08.15.23.43.14;	author kseitz;	state Exp;
branches;
next	1.238;

1.238
date	2012.08.14.19.35.47;	author devans;	state Exp;
branches;
next	1.237;

1.237
date	2012.08.14.19.28.16;	author devans;	state Exp;
branches;
next	1.236;

1.236
date	2012.08.14.19.03.47;	author devans;	state Exp;
branches;
next	1.235;

1.235
date	2012.08.02.09.36.39;	author qiyao;	state Exp;
branches;
next	1.234;

1.234
date	2012.07.09.14.20.51;	author tromey;	state Exp;
branches;
next	1.233;

1.233
date	2012.07.06.14.48.47;	author tromey;	state Exp;
branches;
next	1.232;

1.232
date	2012.07.06.14.46.59;	author tromey;	state Exp;
branches;
next	1.231;

1.231
date	2012.06.28.17.13.18;	author devans;	state Exp;
branches;
next	1.230;

1.230
date	2012.05.23.23.45.09;	author devans;	state Exp;
branches;
next	1.229;

1.229
date	2012.04.18.06.46.46;	author jkratoch;	state Exp;
branches;
next	1.228;

1.228
date	2012.04.17.13.55.31;	author palves;	state Exp;
branches;
next	1.227;

1.227
date	2012.04.17.12.43.20;	author jkratoch;	state Exp;
branches;
next	1.226;

1.226
date	2012.02.07.04.48.20;	author devans;	state Exp;
branches;
next	1.225;

1.225
date	2012.01.09.22.31.39;	author devans;	state Exp;
branches;
next	1.224;

1.224
date	2012.01.09.20.27.48;	author kseitz;	state Exp;
branches;
next	1.223;

1.223
date	2012.01.08.21.02.45;	author devans;	state Exp;
branches;
next	1.222;

1.222
date	2012.01.04.08.17.03;	author brobecke;	state Exp;
branches;
next	1.221;

1.221
date	2011.11.10.06.53.55;	author devans;	state Exp;
branches
	1.221.2.1;
next	1.220;

1.220
date	2011.10.14.20.22.17;	author kseitz;	state Exp;
branches;
next	1.219;

1.219
date	2011.10.09.19.10.52;	author jkratoch;	state Exp;
branches;
next	1.218;

1.218
date	2011.06.24.19.47.37;	author tromey;	state Exp;
branches;
next	1.217;

1.217
date	2011.06.23.09.51.57;	author aburgess;	state Exp;
branches;
next	1.216;

1.216
date	2011.05.06.14.12.18;	author jkratoch;	state Exp;
branches;
next	1.215;

1.215
date	2011.03.28.20.21.03;	author jkratoch;	state Exp;
branches;
next	1.214;

1.214
date	2011.02.14.11.35.44;	author palves;	state Exp;
branches;
next	1.213;

1.213
date	2011.01.11.19.39.35;	author bauermann;	state Exp;
branches;
next	1.212;

1.212
date	2011.01.11.19.23.02;	author bauermann;	state Exp;
branches;
next	1.211;

1.211
date	2011.01.07.19.36.19;	author msnyder;	state Exp;
branches;
next	1.210;

1.210
date	2011.01.05.22.22.49;	author msnyder;	state Exp;
branches;
next	1.209;

1.209
date	2011.01.01.15.33.05;	author brobecke;	state Exp;
branches;
next	1.208;

1.208
date	2010.12.08.21.33.20;	author devans;	state Exp;
branches;
next	1.207;

1.207
date	2010.11.04.20.43.23;	author swagiaal;	state Exp;
branches;
next	1.206;

1.206
date	2010.11.04.20.26.23;	author swagiaal;	state Exp;
branches;
next	1.205;

1.205
date	2010.11.03.14.21.57;	author kwerner;	state Exp;
branches;
next	1.204;

1.204
date	2010.10.19.16.07.23;	author swagiaal;	state Exp;
branches;
next	1.203;

1.203
date	2010.10.15.17.48.47;	author jkratoch;	state Exp;
branches;
next	1.202;

1.202
date	2010.10.14.16.13.42;	author swagiaal;	state Exp;
branches;
next	1.201;

1.201
date	2010.10.12.20.58.17;	author swagiaal;	state Exp;
branches;
next	1.200;

1.200
date	2010.10.06.08.44.14;	author kwerner;	state Exp;
branches;
next	1.199;

1.199
date	2010.09.08.17.17.42;	author tromey;	state Exp;
branches;
next	1.198;

1.198
date	2010.09.01.21.50.26;	author tromey;	state Exp;
branches;
next	1.197;

1.197
date	2010.08.18.19.02.32;	author tromey;	state Exp;
branches;
next	1.196;

1.196
date	2010.07.28.16.23.58;	author tromey;	state Exp;
branches;
next	1.195;

1.195
date	2010.07.06.12.56.23;	author uweigand;	state Exp;
branches;
next	1.194;

1.194
date	2010.06.29.16.53.09;	author devans;	state Exp;
branches;
next	1.193;

1.193
date	2010.06.28.20.12.52;	author jkratoch;	state Exp;
branches;
next	1.192;

1.192
date	2010.05.14.20.17.37;	author msnyder;	state Exp;
branches;
next	1.191;

1.191
date	2010.05.11.22.03.02;	author muller;	state Exp;
branches;
next	1.190;

1.190
date	2010.05.06.19.41.12;	author msnyder;	state Exp;
branches;
next	1.189;

1.189
date	2010.04.21.23.21.03;	author muller;	state Exp;
branches;
next	1.188;

1.188
date	2010.03.01.17.19.22;	author drow;	state Exp;
branches;
next	1.187;

1.187
date	2010.02.19.22.22.48;	author tromey;	state Exp;
branches;
next	1.186;

1.186
date	2010.02.02.16.47.14;	author tromey;	state Exp;
branches;
next	1.185;

1.185
date	2010.01.22.17.06.49;	author tromey;	state Exp;
branches;
next	1.184;

1.184
date	2010.01.18.20.54.34;	author tromey;	state Exp;
branches;
next	1.183;

1.183
date	2010.01.14.18.58.57;	author devans;	state Exp;
branches;
next	1.182;

1.182
date	2010.01.12.05.48.56;	author brobecke;	state Exp;
branches;
next	1.181;

1.181
date	2010.01.03.18.55.31;	author jkratoch;	state Exp;
branches;
next	1.180;

1.180
date	2010.01.01.07.31.32;	author brobecke;	state Exp;
branches;
next	1.179;

1.179
date	2009.12.14.06.19.13;	author hilfingr;	state Exp;
branches;
next	1.178;

1.178
date	2009.11.12.19.47.25;	author drow;	state Exp;
branches;
next	1.177;

1.177
date	2009.11.11.16.45.46;	author kseitz;	state Exp;
branches;
next	1.176;

1.176
date	2009.07.02.12.57.14;	author uweigand;	state Exp;
branches
	1.176.4.1;
next	1.175;

1.175
date	2009.07.02.12.55.30;	author uweigand;	state Exp;
branches;
next	1.174;

1.174
date	2009.07.02.12.48.53;	author uweigand;	state Exp;
branches;
next	1.173;

1.173
date	2009.07.02.12.46.19;	author uweigand;	state Exp;
branches;
next	1.172;

1.172
date	2009.07.02.12.44.34;	author uweigand;	state Exp;
branches;
next	1.171;

1.171
date	2009.07.02.12.42.36;	author uweigand;	state Exp;
branches;
next	1.170;

1.170
date	2009.07.02.12.18.46;	author uweigand;	state Exp;
branches;
next	1.169;

1.169
date	2009.07.02.12.11.19;	author uweigand;	state Exp;
branches;
next	1.168;

1.168
date	2009.06.29.13.19.19;	author uweigand;	state Exp;
branches;
next	1.167;

1.167
date	2009.06.29.13.18.37;	author uweigand;	state Exp;
branches;
next	1.166;

1.166
date	2009.06.17.18.47.35;	author uweigand;	state Exp;
branches;
next	1.165;

1.165
date	2009.06.17.18.46.25;	author uweigand;	state Exp;
branches;
next	1.164;

1.164
date	2009.06.16.18.39.41;	author kseitz;	state Exp;
branches;
next	1.163;

1.163
date	2009.05.01.14.43.20;	author jkratoch;	state Exp;
branches;
next	1.162;

1.162
date	2009.04.10.03.36.32;	author jkratoch;	state Exp;
branches;
next	1.161;

1.161
date	2009.02.06.22.59.00;	author palves;	state Exp;
branches;
next	1.160;

1.160
date	2009.01.26.18.57.44;	author palves;	state Exp;
branches;
next	1.159;

1.159
date	2009.01.11.16.03.08;	author jkratoch;	state Exp;
branches;
next	1.158;

1.158
date	2009.01.09.17.41.53;	author palves;	state Exp;
branches;
next	1.157;

1.157
date	2009.01.03.05.57.51;	author brobecke;	state Exp;
branches;
next	1.156;

1.156
date	2008.12.28.14.14.19;	author jkratoch;	state Exp;
branches;
next	1.155;

1.155
date	2008.11.10.20.53.43;	author tromey;	state Exp;
branches;
next	1.154;

1.154
date	2008.10.22.20.11.56;	author brobecke;	state Exp;
branches;
next	1.153;

1.153
date	2008.10.08.12.49.12;	author jkratoch;	state Exp;
branches;
next	1.152;

1.152
date	2008.10.03.22.00.46;	author ppluzhnikov;	state Exp;
branches;
next	1.151;

1.151
date	2008.10.02.22.06.07;	author jkratoch;	state Exp;
branches;
next	1.150;

1.150
date	2008.09.11.14.24.27;	author uweigand;	state Exp;
branches;
next	1.149;

1.149
date	2008.09.11.14.21.21;	author uweigand;	state Exp;
branches;
next	1.148;

1.148
date	2008.09.11.14.20.50;	author uweigand;	state Exp;
branches;
next	1.147;

1.147
date	2008.08.24.16.39.56;	author tromey;	state Exp;
branches;
next	1.146;

1.146
date	2008.08.18.19.41.28;	author tromey;	state Exp;
branches;
next	1.145;

1.145
date	2008.05.19.15.50.09;	author uweigand;	state Exp;
branches;
next	1.144;

1.144
date	2008.02.03.22.13.29;	author devans;	state Exp;
branches;
next	1.143;

1.143
date	2008.01.09.17.01.54;	author brobecke;	state Exp;
branches;
next	1.142;

1.142
date	2008.01.01.22.53.10;	author drow;	state Exp;
branches;
next	1.141;

1.141
date	2007.12.20.17.17.21;	author bauermann;	state Exp;
branches;
next	1.140;

1.140
date	2007.12.04.23.33.00;	author uweigand;	state Exp;
branches;
next	1.139;

1.139
date	2007.11.08.00.08.46;	author jsm28;	state Exp;
branches;
next	1.138;

1.138
date	2007.11.02.19.35.18;	author uweigand;	state Exp;
branches;
next	1.137;

1.137
date	2007.10.30.21.53.18;	author uweigand;	state Exp;
branches;
next	1.136;

1.136
date	2007.10.25.17.57.34;	author bauermann;	state Exp;
branches;
next	1.135;

1.135
date	2007.10.03.20.37.31;	author drow;	state Exp;
branches;
next	1.134;

1.134
date	2007.09.05.00.51.48;	author drow;	state Exp;
branches;
next	1.133;

1.133
date	2007.08.23.18.08.33;	author brobecke;	state Exp;
branches;
next	1.132;

1.132
date	2007.08.17.23.12.46;	author msnyder;	state Exp;
branches;
next	1.131;

1.131
date	2007.08.11.00.28.30;	author msnyder;	state Exp;
branches;
next	1.130;

1.130
date	2007.08.11.00.22.21;	author msnyder;	state Exp;
branches;
next	1.129;

1.129
date	2007.08.02.21.08.12;	author msnyder;	state Exp;
branches;
next	1.128;

1.128
date	2007.08.02.21.01.37;	author msnyder;	state Exp;
branches;
next	1.127;

1.127
date	2007.06.22.12.32.19;	author uweigand;	state Exp;
branches;
next	1.126;

1.126
date	2007.06.22.12.26.59;	author uweigand;	state Exp;
branches;
next	1.125;

1.125
date	2007.06.16.18.28.24;	author uweigand;	state Exp;
branches;
next	1.124;

1.124
date	2007.06.16.17.25.59;	author uweigand;	state Exp;
branches;
next	1.123;

1.123
date	2007.06.13.17.59.50;	author uweigand;	state Exp;
branches;
next	1.122;

1.122
date	2007.06.13.17.48.13;	author uweigand;	state Exp;
branches;
next	1.121;

1.121
date	2007.06.13.17.30.01;	author uweigand;	state Exp;
branches;
next	1.120;

1.120
date	2007.06.12.16.33.20;	author uweigand;	state Exp;
branches;
next	1.119;

1.119
date	2007.06.12.15.33.04;	author uweigand;	state Exp;
branches;
next	1.118;

1.118
date	2007.06.06.15.23.05;	author uweigand;	state Exp;
branches;
next	1.117;

1.117
date	2007.05.31.17.01.45;	author uweigand;	state Exp;
branches;
next	1.116;

1.116
date	2007.05.17.20.15.36;	author brobecke;	state Exp;
branches;
next	1.115;

1.115
date	2007.05.17.16.38.25;	author brobecke;	state Exp;
branches;
next	1.114;

1.114
date	2007.02.28.19.42.08;	author brobecke;	state Exp;
branches;
next	1.113;

1.113
date	2007.02.28.16.35.48;	author brobecke;	state Exp;
branches;
next	1.112;

1.112
date	2007.01.29.17.31.05;	author drow;	state Exp;
branches;
next	1.111;

1.111
date	2007.01.09.17.58.51;	author drow;	state Exp;
branches;
next	1.110;

1.110
date	2007.01.03.19.01.25;	author drow;	state Exp;
branches;
next	1.109;

1.109
date	2007.01.03.18.05.43;	author drow;	state Exp;
branches;
next	1.108;

1.108
date	2006.12.06.20.15.19;	author jimb;	state Exp;
branches;
next	1.107;

1.107
date	2006.12.06.00.57.04;	author jimb;	state Exp;
branches;
next	1.106;

1.106
date	2006.08.22.19.45.12;	author kettenis;	state Exp;
branches;
next	1.105;

1.105
date	2006.03.01.19.34.46;	author drow;	state Exp;
branches
	1.105.10.1
	1.105.12.1;
next	1.104;

1.104
date	2006.02.01.23.14.10;	author drow;	state Exp;
branches
	1.104.2.1;
next	1.103;

1.103
date	2006.01.18.21.24.19;	author kettenis;	state Exp;
branches;
next	1.102;

1.102
date	2005.12.17.22.34.00;	author eliz;	state Exp;
branches;
next	1.101;

1.101
date	2005.06.27.08.38.13;	author woodzltc;	state Exp;
branches;
next	1.100;

1.100
date	2005.04.06.17.01.24;	author jimb;	state Exp;
branches;
next	1.99;

1.99
date	2005.02.24.13.51.32;	author cagney;	state Exp;
branches;
next	1.98;

1.98
date	2005.02.18.18.58.56;	author cagney;	state Exp;
branches;
next	1.97;

1.97
date	2005.02.18.15.25.25;	author cagney;	state Exp;
branches;
next	1.96;

1.96
date	2005.02.12.00.39.19;	author cagney;	state Exp;
branches;
next	1.95;

1.95
date	2005.02.11.18.13.49;	author cagney;	state Exp;
branches;
next	1.94;

1.94
date	2005.02.11.04.05.49;	author cagney;	state Exp;
branches;
next	1.93;

1.93
date	2004.11.04.17.50.16;	author jimb;	state Exp;
branches;
next	1.92;

1.92
date	2004.08.08.17.18.16;	author cagney;	state Exp;
branches;
next	1.91;

1.91
date	2004.08.07.21.03.33;	author cagney;	state Exp;
branches;
next	1.90;

1.90
date	2004.08.07.19.53.06;	author cagney;	state Exp;
branches;
next	1.89;

1.89
date	2004.08.07.19.25.58;	author cagney;	state Exp;
branches;
next	1.88;

1.88
date	2004.07.28.15.49.03;	author cagney;	state Exp;
branches;
next	1.87;

1.87
date	2004.07.28.14.32.19;	author cagney;	state Exp;
branches;
next	1.86;

1.86
date	2004.07.28.04.33.49;	author cagney;	state Exp;
branches;
next	1.85;

1.85
date	2004.07.28.02.46.22;	author cagney;	state Exp;
branches;
next	1.84;

1.84
date	2004.07.28.02.03.51;	author cagney;	state Exp;
branches;
next	1.83;

1.83
date	2004.07.26.14.53.01;	author cagney;	state Exp;
branches;
next	1.82;

1.82
date	2004.03.09.17.08.25;	author drow;	state Exp;
branches
	1.82.10.1;
next	1.81;

1.81
date	2004.02.15.15.22.06;	author cagney;	state Exp;
branches
	1.81.2.1
	1.81.4.1;
next	1.80;

1.80
date	2004.02.07.16.57.55;	author ezannoni;	state Exp;
branches;
next	1.79;

1.79
date	2004.01.21.04.11.16;	author cagney;	state Exp;
branches;
next	1.78;

1.78
date	2003.10.06.19.27.12;	author cagney;	state Exp;
branches;
next	1.77;

1.77
date	2003.09.16.18.56.35;	author cagney;	state Exp;
branches;
next	1.76;

1.76
date	2003.09.14.16.32.12;	author cagney;	state Exp;
branches;
next	1.75;

1.75
date	2003.09.11.19.49.18;	author carlton;	state Exp;
branches;
next	1.74;

1.74
date	2003.06.23.21.05.40;	author cagney;	state Exp;
branches;
next	1.73;

1.73
date	2003.06.08.18.27.13;	author cagney;	state Exp;
branches
	1.73.4.1;
next	1.72;

1.72
date	2003.05.14.17.43.17;	author ezannoni;	state Exp;
branches;
next	1.71;

1.71
date	2003.02.07.21.44.00;	author kevinb;	state Exp;
branches
	1.71.16.1;
next	1.70;

1.70
date	2003.02.04.21.19.26;	author carlton;	state Exp;
branches;
next	1.69;

1.69
date	2003.01.17.19.12.18;	author cagney;	state Exp;
branches;
next	1.68;

1.68
date	2003.01.14.00.15.05;	author ezannoni;	state Exp;
branches;
next	1.67;

1.67
date	2003.01.13.20.09.33;	author drow;	state Exp;
branches;
next	1.66;

1.66
date	2003.01.13.20.08.58;	author drow;	state Exp;
branches;
next	1.65;

1.65
date	2003.01.02.14.27.26;	author cagney;	state Exp;
branches;
next	1.64;

1.64
date	2002.12.17.00.39.07;	author kevinb;	state Exp;
branches;
next	1.63;

1.63
date	2002.12.11.20.19.39;	author kevinb;	state Exp;
branches;
next	1.62;

1.62
date	2002.10.25.22.25.55;	author cagney;	state Exp;
branches;
next	1.61;

1.61
date	2002.10.25.15.59.56;	author cagney;	state Exp;
branches;
next	1.60;

1.60
date	2002.10.16.20.50.22;	author kevinb;	state Exp;
branches;
next	1.59;

1.59
date	2002.10.02.22.01.53;	author drow;	state Exp;
branches
	1.59.2.1;
next	1.58;

1.58
date	2002.09.14.15.39.52;	author kettenis;	state Exp;
branches
	1.58.2.1;
next	1.57;

1.57
date	2002.09.14.02.09.39;	author drow;	state Exp;
branches;
next	1.56;

1.56
date	2002.08.20.19.57.32;	author ezannoni;	state Exp;
branches
	1.56.6.1;
next	1.55;

1.55
date	2002.08.10.05.12.40;	author cagney;	state Exp;
branches;
next	1.54;

1.54
date	2002.08.01.17.18.32;	author cagney;	state Exp;
branches;
next	1.53;

1.53
date	2002.06.14.14.34.25;	author drow;	state Exp;
branches;
next	1.52;

1.52
date	2002.05.27.09.17.24;	author hunt;	state Exp;
branches
	1.52.2.1;
next	1.51;

1.51
date	2002.05.14.18.30.50;	author drow;	state Exp;
branches
	1.51.2.1;
next	1.50;

1.50
date	2002.05.13.14.00.36;	author drow;	state Exp;
branches;
next	1.49;

1.49
date	2002.05.12.02.20.38;	author drow;	state Exp;
branches;
next	1.48;

1.48
date	2002.05.08.22.58.39;	author ezannoni;	state Exp;
branches;
next	1.47;

1.47
date	2002.05.06.17.37.14;	author ezannoni;	state Exp;
branches;
next	1.46;

1.46
date	2002.05.04.21.24.07;	author jimb;	state Exp;
branches;
next	1.45;

1.45
date	2002.05.04.00.21.09;	author jimb;	state Exp;
branches;
next	1.44;

1.44
date	2002.04.26.20.08.18;	author ezannoni;	state Exp;
branches;
next	1.43;

1.43
date	2002.04.20.01.09.28;	author ezannoni;	state Exp;
branches;
next	1.42;

1.42
date	2002.03.23.01.24.54;	author cagney;	state Exp;
branches;
next	1.41;

1.41
date	2002.02.08.17.34.33;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2002.02.03.23.18.11;	author drow;	state Exp;
branches;
next	1.39;

1.39
date	2002.02.03.22.57.56;	author drow;	state Exp;
branches;
next	1.38;

1.38
date	2002.01.22.19.57.40;	author cagney;	state Exp;
branches;
next	1.37;

1.37
date	2002.01.20.19.42.04;	author drow;	state Exp;
branches;
next	1.36;

1.36
date	2002.01.15.19.38.19;	author ezannoni;	state Exp;
branches;
next	1.35;

1.35
date	2001.12.20.03.26.08;	author jimb;	state Exp;
branches;
next	1.34;

1.34
date	2001.12.12.02.11.51;	author fnf;	state Exp;
branches;
next	1.33;

1.33
date	2001.12.12.02.07.10;	author fnf;	state Exp;
branches;
next	1.32;

1.32
date	2001.12.10.06.23.21;	author fnf;	state Exp;
branches;
next	1.31;

1.31
date	2001.12.10.06.19.51;	author fnf;	state Exp;
branches;
next	1.30;

1.30
date	2001.12.10.06.13.11;	author fnf;	state Exp;
branches;
next	1.29;

1.29
date	2001.12.07.22.11.51;	author drow;	state Exp;
branches;
next	1.28;

1.28
date	2001.11.15.01.55.59;	author msnyder;	state Exp;
branches;
next	1.27;

1.27
date	2001.11.13.19.07.00;	author ezannoni;	state Exp;
branches;
next	1.26;

1.26
date	2001.10.28.12.43.12;	author kettenis;	state Exp;
branches;
next	1.25;

1.25
date	2001.08.24.04.46.43;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2001.08.23.01.09.38;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2001.07.08.20.42.15;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2001.07.06.14.44.19;	author jimb;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2001.04.30.17.09.19;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.27.00.19.09;	author jimb;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.20.01.37.09;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.07.02.57.08;	author jtc;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.06.08.21.07;	author kevinb;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.15.01.01.47;	author kevinb;	state Exp;
branches;
next	1.15;

1.15
date	2000.11.27.02.18.44;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2000.09.02.00.05.02;	author davea;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.25.20.51.19;	author taylor;	state Exp;
branches;
next	1.12;

1.12
date	2000.07.30.01.48.25;	author kevinb;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.17.03.39.34;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2000.07.09.05.15.50;	author nsd;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.28.01.12.27;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.04.04.53.50;	author dberlin;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.03.03.39.09;	author nsd;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.28.02.25.14;	author dberlin;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.24.01.51.13;	author dberlin;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.13.10.01.23;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.13.07.30.00;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.10.08.02.58;	author dberlin;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.01;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.221.2.1
date	2012.01.06.04.43.15;	author brobecke;	state Exp;
branches;
next	;

1.176.4.1
date	2010.01.03.22.11.54;	author jkratoch;	state Exp;
branches;
next	;

1.105.10.1
date	2006.08.28.07.48.48;	author nickrob;	state Exp;
branches;
next	;

1.105.12.1
date	2006.09.01.19.00.31;	author brobecke;	state Exp;
branches;
next	;

1.104.2.1
date	2006.05.03.17.54.32;	author pbrook;	state Exp;
branches;
next	;

1.82.10.1
date	2005.03.17.05.39.18;	author jimb;	state Exp;
branches;
next	;

1.81.2.1
date	2004.03.27.17.37.49;	author drow;	state Exp;
branches;
next	1.81.2.2;

1.81.2.2
date	2004.09.16.17.01.06;	author drow;	state Exp;
branches;
next	;

1.81.4.1
date	2004.03.09.17.10.19;	author drow;	state Exp;
branches;
next	;

1.73.4.1
date	2003.06.23.21.11.32;	author cagney;	state Exp;
branches;
next	;

1.71.16.1
date	2003.05.18.09.44.10;	author kettenis;	state Exp;
branches;
next	;

1.59.2.1
date	2002.10.26.17.12.07;	author drow;	state Exp;
branches;
next	1.59.2.2;

1.59.2.2
date	2002.11.01.16.26.09;	author drow;	state Exp;
branches;
next	1.59.2.3;

1.59.2.3
date	2003.12.14.20.27.15;	author drow;	state Exp;
branches;
next	1.59.2.4;

1.59.2.4
date	2004.02.09.19.43.40;	author drow;	state Exp;
branches;
next	;

1.58.2.1
date	2002.10.11.22.22.54;	author carlton;	state Exp;
branches;
next	1.58.2.2;

1.58.2.2
date	2002.10.25.23.49.54;	author carlton;	state Exp;
branches;
next	1.58.2.3;

1.58.2.3
date	2002.11.15.19.18.44;	author carlton;	state Exp;
branches;
next	1.58.2.4;

1.58.2.4
date	2002.11.24.18.47.18;	author carlton;	state Exp;
branches;
next	1.58.2.5;

1.58.2.5
date	2002.11.28.00.53.23;	author carlton;	state Exp;
branches;
next	1.58.2.6;

1.58.2.6
date	2002.12.23.19.38.25;	author carlton;	state Exp;
branches;
next	1.58.2.7;

1.58.2.7
date	2003.02.01.01.17.22;	author carlton;	state Exp;
branches;
next	1.58.2.8;

1.58.2.8
date	2003.02.07.19.17.49;	author carlton;	state Exp;
branches;
next	1.58.2.9;

1.58.2.9
date	2003.02.12.00.38.06;	author carlton;	state Exp;
branches;
next	1.58.2.10;

1.58.2.10
date	2003.03.06.00.56.28;	author carlton;	state Exp;
branches;
next	1.58.2.11;

1.58.2.11
date	2003.05.23.18.40.39;	author carlton;	state Exp;
branches;
next	1.58.2.12;

1.58.2.12
date	2003.06.27.21.49.56;	author carlton;	state Exp;
branches;
next	1.58.2.13;

1.58.2.13
date	2003.09.17.21.28.20;	author carlton;	state Exp;
branches;
next	1.58.2.14;

1.58.2.14
date	2003.11.11.23.50.44;	author carlton;	state Exp;
branches;
next	1.58.2.15;

1.58.2.15
date	2004.01.26.19.11.24;	author carlton;	state Exp;
branches;
next	;

1.56.6.1
date	2002.10.02.22.09.01;	author drow;	state Exp;
branches;
next	;

1.52.2.1
date	2002.06.20.01.32.28;	author kseitz;	state Exp;
branches;
next	1.52.2.2;

1.52.2.2
date	2002.08.09.18.34.24;	author kseitz;	state Exp;
branches;
next	1.52.2.3;

1.52.2.3
date	2002.08.30.22.52.44;	author kseitz;	state Exp;
branches;
next	1.52.2.4;

1.52.2.4
date	2002.10.01.00.46.08;	author kseitz;	state Exp;
branches;
next	1.52.2.5;

1.52.2.5
date	2002.11.04.00.17.31;	author ezannoni;	state Exp;
branches;
next	;

1.51.2.1
date	2002.06.15.16.42.51;	author cagney;	state Exp;
branches;
next	;

1.22.2.1
date	2001.07.06.19.17.00;	author dberlin;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.01;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.24.13;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.06.14.18.07.34;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.06.21.13.25.02;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.07.07.17.21.19;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.07.07.20.06.23;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.07.19.23.27.55;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.09.08.23.59.12;	author shebs;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.10.19.02.46.36;	author jsm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.11.02.04.44.15;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	99.12.07.03.56.00;	author jsm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.12.14.01.05.31;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.256
log
@gdb/

	* Makefile.in (SFILES): Add c-varobj.c and jv-varobj.c.
	(COMMON_OBS): Add c-varobj.o and jv-varobj.o.
	* ada-varobj.c: Include "varobj.h".
	(ada_number_of_children): New.  Moved from varobj.c.
	(ada_name_of_variable, ada_name_of_child): Likewise.
	(ada_path_expr_of_child, ada_value_of_child): Likewise.
	(ada_type_of_child, ada_value_of_variable): Likewise.
	(ada_value_is_changeable_p, ada_value_has_mutated): Likewise.
	(ada_varobj_ops): New.
	* c-varobj.c, jv-varobj.c: New file.  Moved from varobj.c.
	* gdbtypes.c (get_target_type): New.  Moved from varobj.c.
	* gdbtypes.h (get_target_type): Declare.
	* varobj.c: Remove the inclusion of "ada-varobj.h" and
	"ada-lang.h".
	(ANONYMOUS_STRUCT_NAME): Move it to c-varobj.c.
	(ANONYMOUS_UNION_NAME): Likewise.
	(get_type, get_value_type, get_target_type): Remove declarations.
	(value_get_print_value, varobj_value_get_print_value): Likewise.
	(c_number_of_children, c_name_of_variable): Likewise.
	(c_name_of_child, c_path_expr_of_child): Likewise.
	(c_value_of_child, c_type_of_child): Likewise.
	(c_value_of_variable, cplus_number_of_children): Likewise.
	(cplus_class_num_children, cplus_name_of_variable): Likewise.
	(cplus_name_of_child, cplus_path_expr_of_child): Likewise.
	(cplus_value_of_child, cplus_type_of_child): Likewise.
	(cplus_value_of_variable, java_number_of_children): Likewise.
	(java_name_of_variable, java_name_of_child): Likewise.
	(java_path_expr_of_child, java_value_of_child): Likewise.
	(java_type_of_child, java_value_of_variable): Likewise.
	(ada_number_of_children, ada_name_of_variable): Likewise.
	(ada_name_of_child, ada_path_expr_of_child): Likewise.
	(ada_value_of_child, ada_type_of_child): Likewise.
	(ada_value_of_variable, ada_value_is_changeable_p): Likewise.
	(ada_value_has_mutated): Likewise.
	(struct language_specific): Move it to varobj.h.
	(CPLUS_FAKE_CHILD): Move it to varobj.h.
	(restrict_range): Rename it varobj_restrict_range.  Make it extern.
	Callers update.
	(get_path_expr_parent): Rename it to varobj_get_path_expr_parent.
	Make it extern.
	(is_anonymous_child): Move it to c-varobj.c and rename to
	varobj_is_anonymous_child.  Caller update.
	(get_type): Move it to c-varobj.c.
	(get_value_type): Rename it varobj_get_value_type.  Make it
	extern.
	(get_target_type): Move it gdbtypes.c.
	(varobj_formatted_print_options): New function.
	(value_get_print_value): Rename it to
	varobj_value_get_print_value and make it extern.
	(varobj_value_is_changeable_p): Make it extern.
	(adjust_value_for_child_access): Move it to c-varobj.c.
	(default_value_is_changeable_p): Rename it to
	varobj_default_value_is_changeable_p.  Make it extern.
	(c_number_of_children, c_name_of_variable): Move it to c-varobj.c
	(c_name_of_child, c_path_expr_of_child): Likewise.
	(c_value_of_child, c_type_of_child): Likewise.
	(c_value_of_variable, cplus_number_of_children): Likewise.
	(cplus_class_num_children, cplus_name_of_variable): Likewise.
	(cplus_name_of_child, cplus_path_expr_of_child): Likewise.
	(cplus_value_of_child, cplus_type_of_child): Likewise.
	(cplus_value_of_variable): Likewise.
	(java_number_of_children, java_name_of_variable): Move it to jv-varobj.c.
	(java_name_of_child, java_path_expr_of_child): Likewise.
	(java_value_of_child, java_type_of_child): Likewise.
	(java_value_of_variable): Likewise.
	(ada_number_of_children, ada_name_of_variable): Move it to ada-varobj.c.
	(ada_name_of_child, ada_path_expr_of_child): Likewise.
	(ada_value_of_child, ada_type_of_child): Likewise.
	(ada_value_of_variable, ada_value_is_changeable_p): Likewise.
	(ada_value_has_mutated): Likewise.
	* varobj.h (CPLUS_FAKE_CHILD): New macro, moved from varobj.c.
	(struct lang_varobj_ops): New.  Renamed by 'struct language_specific'.
	(c_varobj_ops, cplus_varobj_ops): Declare.
	(java_varobj_ops, ada_varobj_ops): Declare.
	(varobj_default_value_is_changeable_p): Declare.
	(varobj_value_is_changeable_p): Declare.
	(varobj_get_value_type, varobj_is_anonymous_child): Declare.
	(varobj_get_path_expr_parent): Declare.
	(varobj_value_get_print_value): Declare.
	(varobj_formatted_print_options): Declare.
	(varobj_restrict_range): Declare.
@
text
@/* Support routines for manipulating internal types for GDB.

   Copyright (C) 1992-2013 Free Software Foundation, Inc.

   Contributed by Cygnus Support, using pieces from other GDB modules.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "gdb_string.h"
#include "bfd.h"
#include "symtab.h"
#include "symfile.h"
#include "objfiles.h"
#include "gdbtypes.h"
#include "expression.h"
#include "language.h"
#include "target.h"
#include "value.h"
#include "demangle.h"
#include "complaints.h"
#include "gdbcmd.h"
#include "cp-abi.h"
#include "gdb_assert.h"
#include "hashtab.h"
#include "exceptions.h"
#include "cp-support.h"

/* Initialize BADNESS constants.  */

const struct rank LENGTH_MISMATCH_BADNESS = {100,0};

const struct rank TOO_FEW_PARAMS_BADNESS = {100,0};
const struct rank INCOMPATIBLE_TYPE_BADNESS = {100,0};

const struct rank EXACT_MATCH_BADNESS = {0,0};

const struct rank INTEGER_PROMOTION_BADNESS = {1,0};
const struct rank FLOAT_PROMOTION_BADNESS = {1,0};
const struct rank BASE_PTR_CONVERSION_BADNESS = {1,0};
const struct rank INTEGER_CONVERSION_BADNESS = {2,0};
const struct rank FLOAT_CONVERSION_BADNESS = {2,0};
const struct rank INT_FLOAT_CONVERSION_BADNESS = {2,0};
const struct rank VOID_PTR_CONVERSION_BADNESS = {2,0};
const struct rank BOOL_CONVERSION_BADNESS = {3,0};
const struct rank BASE_CONVERSION_BADNESS = {2,0};
const struct rank REFERENCE_CONVERSION_BADNESS = {2,0};
const struct rank NULL_POINTER_CONVERSION_BADNESS = {2,0};
const struct rank NS_POINTER_CONVERSION_BADNESS = {10,0};
const struct rank NS_INTEGER_POINTER_CONVERSION_BADNESS = {3,0};

/* Floatformat pairs.  */
const struct floatformat *floatformats_ieee_half[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_ieee_half_big,
  &floatformat_ieee_half_little
};
const struct floatformat *floatformats_ieee_single[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_ieee_single_big,
  &floatformat_ieee_single_little
};
const struct floatformat *floatformats_ieee_double[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_ieee_double_big,
  &floatformat_ieee_double_little
};
const struct floatformat *floatformats_ieee_double_littlebyte_bigword[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_ieee_double_big,
  &floatformat_ieee_double_littlebyte_bigword
};
const struct floatformat *floatformats_i387_ext[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_i387_ext,
  &floatformat_i387_ext
};
const struct floatformat *floatformats_m68881_ext[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_m68881_ext,
  &floatformat_m68881_ext
};
const struct floatformat *floatformats_arm_ext[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_arm_ext_big,
  &floatformat_arm_ext_littlebyte_bigword
};
const struct floatformat *floatformats_ia64_spill[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_ia64_spill_big,
  &floatformat_ia64_spill_little
};
const struct floatformat *floatformats_ia64_quad[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_ia64_quad_big,
  &floatformat_ia64_quad_little
};
const struct floatformat *floatformats_vax_f[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_vax_f,
  &floatformat_vax_f
};
const struct floatformat *floatformats_vax_d[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_vax_d,
  &floatformat_vax_d
};
const struct floatformat *floatformats_ibm_long_double[BFD_ENDIAN_UNKNOWN] = {
  &floatformat_ibm_long_double_big,
  &floatformat_ibm_long_double_little
};

/* Should opaque types be resolved?  */

static int opaque_type_resolution = 1;

/* A flag to enable printing of debugging information of C++
   overloading.  */

unsigned int overload_debug = 0;

/* A flag to enable strict type checking.  */

static int strict_type_checking = 1;

/* A function to show whether opaque types are resolved.  */

static void
show_opaque_type_resolution (struct ui_file *file, int from_tty,
			     struct cmd_list_element *c, 
			     const char *value)
{
  fprintf_filtered (file, _("Resolution of opaque struct/class/union types "
			    "(if set before loading symbols) is %s.\n"),
		    value);
}

/* A function to show whether C++ overload debugging is enabled.  */

static void
show_overload_debug (struct ui_file *file, int from_tty,
		     struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file, _("Debugging of C++ overloading is %s.\n"), 
		    value);
}

/* A function to show the status of strict type checking.  */

static void
show_strict_type_checking (struct ui_file *file, int from_tty,
			   struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file, _("Strict type checking is %s.\n"), value);
}


/* Allocate a new OBJFILE-associated type structure and fill it
   with some defaults.  Space for the type structure is allocated
   on the objfile's objfile_obstack.  */

struct type *
alloc_type (struct objfile *objfile)
{
  struct type *type;

  gdb_assert (objfile != NULL);

  /* Alloc the structure and start off with all fields zeroed.  */
  type = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct type);
  TYPE_MAIN_TYPE (type) = OBSTACK_ZALLOC (&objfile->objfile_obstack,
					  struct main_type);
  OBJSTAT (objfile, n_types++);

  TYPE_OBJFILE_OWNED (type) = 1;
  TYPE_OWNER (type).objfile = objfile;

  /* Initialize the fields that might not be zero.  */

  TYPE_CODE (type) = TYPE_CODE_UNDEF;
  TYPE_VPTR_FIELDNO (type) = -1;
  TYPE_CHAIN (type) = type;	/* Chain back to itself.  */

  return type;
}

/* Allocate a new GDBARCH-associated type structure and fill it
   with some defaults.  Space for the type structure is allocated
   on the heap.  */

struct type *
alloc_type_arch (struct gdbarch *gdbarch)
{
  struct type *type;

  gdb_assert (gdbarch != NULL);

  /* Alloc the structure and start off with all fields zeroed.  */

  type = XZALLOC (struct type);
  TYPE_MAIN_TYPE (type) = XZALLOC (struct main_type);

  TYPE_OBJFILE_OWNED (type) = 0;
  TYPE_OWNER (type).gdbarch = gdbarch;

  /* Initialize the fields that might not be zero.  */

  TYPE_CODE (type) = TYPE_CODE_UNDEF;
  TYPE_VPTR_FIELDNO (type) = -1;
  TYPE_CHAIN (type) = type;	/* Chain back to itself.  */

  return type;
}

/* If TYPE is objfile-associated, allocate a new type structure
   associated with the same objfile.  If TYPE is gdbarch-associated,
   allocate a new type structure associated with the same gdbarch.  */

struct type *
alloc_type_copy (const struct type *type)
{
  if (TYPE_OBJFILE_OWNED (type))
    return alloc_type (TYPE_OWNER (type).objfile);
  else
    return alloc_type_arch (TYPE_OWNER (type).gdbarch);
}

/* If TYPE is gdbarch-associated, return that architecture.
   If TYPE is objfile-associated, return that objfile's architecture.  */

struct gdbarch *
get_type_arch (const struct type *type)
{
  if (TYPE_OBJFILE_OWNED (type))
    return get_objfile_arch (TYPE_OWNER (type).objfile);
  else
    return TYPE_OWNER (type).gdbarch;
}

/* See gdbtypes.h.  */

struct type *
get_target_type (struct type *type)
{
  if (type != NULL)
    {
      type = TYPE_TARGET_TYPE (type);
      if (type != NULL)
	type = check_typedef (type);
    }

  return type;
}

/* Alloc a new type instance structure, fill it with some defaults,
   and point it at OLDTYPE.  Allocate the new type instance from the
   same place as OLDTYPE.  */

static struct type *
alloc_type_instance (struct type *oldtype)
{
  struct type *type;

  /* Allocate the structure.  */

  if (! TYPE_OBJFILE_OWNED (oldtype))
    type = XZALLOC (struct type);
  else
    type = OBSTACK_ZALLOC (&TYPE_OBJFILE (oldtype)->objfile_obstack,
			   struct type);

  TYPE_MAIN_TYPE (type) = TYPE_MAIN_TYPE (oldtype);

  TYPE_CHAIN (type) = type;	/* Chain back to itself for now.  */

  return type;
}

/* Clear all remnants of the previous type at TYPE, in preparation for
   replacing it with something else.  Preserve owner information.  */

static void
smash_type (struct type *type)
{
  int objfile_owned = TYPE_OBJFILE_OWNED (type);
  union type_owner owner = TYPE_OWNER (type);

  memset (TYPE_MAIN_TYPE (type), 0, sizeof (struct main_type));

  /* Restore owner information.  */
  TYPE_OBJFILE_OWNED (type) = objfile_owned;
  TYPE_OWNER (type) = owner;

  /* For now, delete the rings.  */
  TYPE_CHAIN (type) = type;

  /* For now, leave the pointer/reference types alone.  */
}

/* Lookup a pointer to a type TYPE.  TYPEPTR, if nonzero, points
   to a pointer to memory where the pointer type should be stored.
   If *TYPEPTR is zero, update it to point to the pointer type we return.
   We allocate new memory if needed.  */

struct type *
make_pointer_type (struct type *type, struct type **typeptr)
{
  struct type *ntype;	/* New type */
  struct type *chain;

  ntype = TYPE_POINTER_TYPE (type);

  if (ntype)
    {
      if (typeptr == 0)
	return ntype;		/* Don't care about alloc, 
				   and have new type.  */
      else if (*typeptr == 0)
	{
	  *typeptr = ntype;	/* Tracking alloc, and have new type.  */
	  return ntype;
	}
    }

  if (typeptr == 0 || *typeptr == 0)	/* We'll need to allocate one.  */
    {
      ntype = alloc_type_copy (type);
      if (typeptr)
	*typeptr = ntype;
    }
  else			/* We have storage, but need to reset it.  */
    {
      ntype = *typeptr;
      chain = TYPE_CHAIN (ntype);
      smash_type (ntype);
      TYPE_CHAIN (ntype) = chain;
    }

  TYPE_TARGET_TYPE (ntype) = type;
  TYPE_POINTER_TYPE (type) = ntype;

  /* FIXME!  Assumes the machine has only one representation for pointers!  */

  TYPE_LENGTH (ntype)
    = gdbarch_ptr_bit (get_type_arch (type)) / TARGET_CHAR_BIT;
  TYPE_CODE (ntype) = TYPE_CODE_PTR;

  /* Mark pointers as unsigned.  The target converts between pointers
     and addresses (CORE_ADDRs) using gdbarch_pointer_to_address and
     gdbarch_address_to_pointer.  */
  TYPE_UNSIGNED (ntype) = 1;

  /* Update the length of all the other variants of this type.  */
  chain = TYPE_CHAIN (ntype);
  while (chain != ntype)
    {
      TYPE_LENGTH (chain) = TYPE_LENGTH (ntype);
      chain = TYPE_CHAIN (chain);
    }

  return ntype;
}

/* Given a type TYPE, return a type of pointers to that type.
   May need to construct such a type if this is the first use.  */

struct type *
lookup_pointer_type (struct type *type)
{
  return make_pointer_type (type, (struct type **) 0);
}

/* Lookup a C++ `reference' to a type TYPE.  TYPEPTR, if nonzero,
   points to a pointer to memory where the reference type should be
   stored.  If *TYPEPTR is zero, update it to point to the reference
   type we return.  We allocate new memory if needed.  */

struct type *
make_reference_type (struct type *type, struct type **typeptr)
{
  struct type *ntype;	/* New type */
  struct type *chain;

  ntype = TYPE_REFERENCE_TYPE (type);

  if (ntype)
    {
      if (typeptr == 0)
	return ntype;		/* Don't care about alloc, 
				   and have new type.  */
      else if (*typeptr == 0)
	{
	  *typeptr = ntype;	/* Tracking alloc, and have new type.  */
	  return ntype;
	}
    }

  if (typeptr == 0 || *typeptr == 0)	/* We'll need to allocate one.  */
    {
      ntype = alloc_type_copy (type);
      if (typeptr)
	*typeptr = ntype;
    }
  else			/* We have storage, but need to reset it.  */
    {
      ntype = *typeptr;
      chain = TYPE_CHAIN (ntype);
      smash_type (ntype);
      TYPE_CHAIN (ntype) = chain;
    }

  TYPE_TARGET_TYPE (ntype) = type;
  TYPE_REFERENCE_TYPE (type) = ntype;

  /* FIXME!  Assume the machine has only one representation for
     references, and that it matches the (only) representation for
     pointers!  */

  TYPE_LENGTH (ntype) =
    gdbarch_ptr_bit (get_type_arch (type)) / TARGET_CHAR_BIT;
  TYPE_CODE (ntype) = TYPE_CODE_REF;

  if (!TYPE_REFERENCE_TYPE (type))	/* Remember it, if don't have one.  */
    TYPE_REFERENCE_TYPE (type) = ntype;

  /* Update the length of all the other variants of this type.  */
  chain = TYPE_CHAIN (ntype);
  while (chain != ntype)
    {
      TYPE_LENGTH (chain) = TYPE_LENGTH (ntype);
      chain = TYPE_CHAIN (chain);
    }

  return ntype;
}

/* Same as above, but caller doesn't care about memory allocation
   details.  */

struct type *
lookup_reference_type (struct type *type)
{
  return make_reference_type (type, (struct type **) 0);
}

/* Lookup a function type that returns type TYPE.  TYPEPTR, if
   nonzero, points to a pointer to memory where the function type
   should be stored.  If *TYPEPTR is zero, update it to point to the
   function type we return.  We allocate new memory if needed.  */

struct type *
make_function_type (struct type *type, struct type **typeptr)
{
  struct type *ntype;	/* New type */

  if (typeptr == 0 || *typeptr == 0)	/* We'll need to allocate one.  */
    {
      ntype = alloc_type_copy (type);
      if (typeptr)
	*typeptr = ntype;
    }
  else			/* We have storage, but need to reset it.  */
    {
      ntype = *typeptr;
      smash_type (ntype);
    }

  TYPE_TARGET_TYPE (ntype) = type;

  TYPE_LENGTH (ntype) = 1;
  TYPE_CODE (ntype) = TYPE_CODE_FUNC;

  INIT_FUNC_SPECIFIC (ntype);

  return ntype;
}

/* Given a type TYPE, return a type of functions that return that type.
   May need to construct such a type if this is the first use.  */

struct type *
lookup_function_type (struct type *type)
{
  return make_function_type (type, (struct type **) 0);
}

/* Given a type TYPE and argument types, return the appropriate
   function type.  If the final type in PARAM_TYPES is NULL, make a
   varargs function.  */

struct type *
lookup_function_type_with_arguments (struct type *type,
				     int nparams,
				     struct type **param_types)
{
  struct type *fn = make_function_type (type, (struct type **) 0);
  int i;

  if (nparams > 0)
    {
      if (param_types[nparams - 1] == NULL)
	{
	  --nparams;
	  TYPE_VARARGS (fn) = 1;
	}
      else if (TYPE_CODE (check_typedef (param_types[nparams - 1]))
	       == TYPE_CODE_VOID)
	{
	  --nparams;
	  /* Caller should have ensured this.  */
	  gdb_assert (nparams == 0);
	  TYPE_PROTOTYPED (fn) = 1;
	}
    }

  TYPE_NFIELDS (fn) = nparams;
  TYPE_FIELDS (fn) = TYPE_ZALLOC (fn, nparams * sizeof (struct field));
  for (i = 0; i < nparams; ++i)
    TYPE_FIELD_TYPE (fn, i) = param_types[i];

  return fn;
}

/* Identify address space identifier by name --
   return the integer flag defined in gdbtypes.h.  */

int
address_space_name_to_int (struct gdbarch *gdbarch, char *space_identifier)
{
  int type_flags;

  /* Check for known address space delimiters.  */
  if (!strcmp (space_identifier, "code"))
    return TYPE_INSTANCE_FLAG_CODE_SPACE;
  else if (!strcmp (space_identifier, "data"))
    return TYPE_INSTANCE_FLAG_DATA_SPACE;
  else if (gdbarch_address_class_name_to_type_flags_p (gdbarch)
           && gdbarch_address_class_name_to_type_flags (gdbarch,
							space_identifier,
							&type_flags))
    return type_flags;
  else
    error (_("Unknown address space specifier: \"%s\""), space_identifier);
}

/* Identify address space identifier by integer flag as defined in 
   gdbtypes.h -- return the string version of the adress space name.  */

const char *
address_space_int_to_name (struct gdbarch *gdbarch, int space_flag)
{
  if (space_flag & TYPE_INSTANCE_FLAG_CODE_SPACE)
    return "code";
  else if (space_flag & TYPE_INSTANCE_FLAG_DATA_SPACE)
    return "data";
  else if ((space_flag & TYPE_INSTANCE_FLAG_ADDRESS_CLASS_ALL)
           && gdbarch_address_class_type_flags_to_name_p (gdbarch))
    return gdbarch_address_class_type_flags_to_name (gdbarch, space_flag);
  else
    return NULL;
}

/* Create a new type with instance flags NEW_FLAGS, based on TYPE.

   If STORAGE is non-NULL, create the new type instance there.
   STORAGE must be in the same obstack as TYPE.  */

static struct type *
make_qualified_type (struct type *type, int new_flags,
		     struct type *storage)
{
  struct type *ntype;

  ntype = type;
  do
    {
      if (TYPE_INSTANCE_FLAGS (ntype) == new_flags)
	return ntype;
      ntype = TYPE_CHAIN (ntype);
    }
  while (ntype != type);

  /* Create a new type instance.  */
  if (storage == NULL)
    ntype = alloc_type_instance (type);
  else
    {
      /* If STORAGE was provided, it had better be in the same objfile
	 as TYPE.  Otherwise, we can't link it into TYPE's cv chain:
	 if one objfile is freed and the other kept, we'd have
	 dangling pointers.  */
      gdb_assert (TYPE_OBJFILE (type) == TYPE_OBJFILE (storage));

      ntype = storage;
      TYPE_MAIN_TYPE (ntype) = TYPE_MAIN_TYPE (type);
      TYPE_CHAIN (ntype) = ntype;
    }

  /* Pointers or references to the original type are not relevant to
     the new type.  */
  TYPE_POINTER_TYPE (ntype) = (struct type *) 0;
  TYPE_REFERENCE_TYPE (ntype) = (struct type *) 0;

  /* Chain the new qualified type to the old type.  */
  TYPE_CHAIN (ntype) = TYPE_CHAIN (type);
  TYPE_CHAIN (type) = ntype;

  /* Now set the instance flags and return the new type.  */
  TYPE_INSTANCE_FLAGS (ntype) = new_flags;

  /* Set length of new type to that of the original type.  */
  TYPE_LENGTH (ntype) = TYPE_LENGTH (type);

  return ntype;
}

/* Make an address-space-delimited variant of a type -- a type that
   is identical to the one supplied except that it has an address
   space attribute attached to it (such as "code" or "data").

   The space attributes "code" and "data" are for Harvard
   architectures.  The address space attributes are for architectures
   which have alternately sized pointers or pointers with alternate
   representations.  */

struct type *
make_type_with_address_space (struct type *type, int space_flag)
{
  int new_flags = ((TYPE_INSTANCE_FLAGS (type)
		    & ~(TYPE_INSTANCE_FLAG_CODE_SPACE
			| TYPE_INSTANCE_FLAG_DATA_SPACE
		        | TYPE_INSTANCE_FLAG_ADDRESS_CLASS_ALL))
		   | space_flag);

  return make_qualified_type (type, new_flags, NULL);
}

/* Make a "c-v" variant of a type -- a type that is identical to the
   one supplied except that it may have const or volatile attributes
   CNST is a flag for setting the const attribute
   VOLTL is a flag for setting the volatile attribute
   TYPE is the base type whose variant we are creating.

   If TYPEPTR and *TYPEPTR are non-zero, then *TYPEPTR points to
   storage to hold the new qualified type; *TYPEPTR and TYPE must be
   in the same objfile.  Otherwise, allocate fresh memory for the new
   type whereever TYPE lives.  If TYPEPTR is non-zero, set it to the
   new type we construct.  */

struct type *
make_cv_type (int cnst, int voltl, 
	      struct type *type, 
	      struct type **typeptr)
{
  struct type *ntype;	/* New type */

  int new_flags = (TYPE_INSTANCE_FLAGS (type)
		   & ~(TYPE_INSTANCE_FLAG_CONST 
		       | TYPE_INSTANCE_FLAG_VOLATILE));

  if (cnst)
    new_flags |= TYPE_INSTANCE_FLAG_CONST;

  if (voltl)
    new_flags |= TYPE_INSTANCE_FLAG_VOLATILE;

  if (typeptr && *typeptr != NULL)
    {
      /* TYPE and *TYPEPTR must be in the same objfile.  We can't have
	 a C-V variant chain that threads across objfiles: if one
	 objfile gets freed, then the other has a broken C-V chain.

	 This code used to try to copy over the main type from TYPE to
	 *TYPEPTR if they were in different objfiles, but that's
	 wrong, too: TYPE may have a field list or member function
	 lists, which refer to types of their own, etc. etc.  The
	 whole shebang would need to be copied over recursively; you
	 can't have inter-objfile pointers.  The only thing to do is
	 to leave stub types as stub types, and look them up afresh by
	 name each time you encounter them.  */
      gdb_assert (TYPE_OBJFILE (*typeptr) == TYPE_OBJFILE (type));
    }
  
  ntype = make_qualified_type (type, new_flags, 
			       typeptr ? *typeptr : NULL);

  if (typeptr != NULL)
    *typeptr = ntype;

  return ntype;
}

/* Make a 'restrict'-qualified version of TYPE.  */

struct type *
make_restrict_type (struct type *type)
{
  return make_qualified_type (type,
			      (TYPE_INSTANCE_FLAGS (type)
			       | TYPE_INSTANCE_FLAG_RESTRICT),
			      NULL);
}

/* Replace the contents of ntype with the type *type.  This changes the
   contents, rather than the pointer for TYPE_MAIN_TYPE (ntype); thus
   the changes are propogated to all types in the TYPE_CHAIN.

   In order to build recursive types, it's inevitable that we'll need
   to update types in place --- but this sort of indiscriminate
   smashing is ugly, and needs to be replaced with something more
   controlled.  TYPE_MAIN_TYPE is a step in this direction; it's not
   clear if more steps are needed.  */

void
replace_type (struct type *ntype, struct type *type)
{
  struct type *chain;

  /* These two types had better be in the same objfile.  Otherwise,
     the assignment of one type's main type structure to the other
     will produce a type with references to objects (names; field
     lists; etc.) allocated on an objfile other than its own.  */
  gdb_assert (TYPE_OBJFILE (ntype) == TYPE_OBJFILE (ntype));

  *TYPE_MAIN_TYPE (ntype) = *TYPE_MAIN_TYPE (type);

  /* The type length is not a part of the main type.  Update it for
     each type on the variant chain.  */
  chain = ntype;
  do
    {
      /* Assert that this element of the chain has no address-class bits
	 set in its flags.  Such type variants might have type lengths
	 which are supposed to be different from the non-address-class
	 variants.  This assertion shouldn't ever be triggered because
	 symbol readers which do construct address-class variants don't
	 call replace_type().  */
      gdb_assert (TYPE_ADDRESS_CLASS_ALL (chain) == 0);

      TYPE_LENGTH (chain) = TYPE_LENGTH (type);
      chain = TYPE_CHAIN (chain);
    }
  while (ntype != chain);

  /* Assert that the two types have equivalent instance qualifiers.
     This should be true for at least all of our debug readers.  */
  gdb_assert (TYPE_INSTANCE_FLAGS (ntype) == TYPE_INSTANCE_FLAGS (type));
}

/* Implement direct support for MEMBER_TYPE in GNU C++.
   May need to construct such a type if this is the first use.
   The TYPE is the type of the member.  The DOMAIN is the type
   of the aggregate that the member belongs to.  */

struct type *
lookup_memberptr_type (struct type *type, struct type *domain)
{
  struct type *mtype;

  mtype = alloc_type_copy (type);
  smash_to_memberptr_type (mtype, domain, type);
  return mtype;
}

/* Return a pointer-to-method type, for a method of type TO_TYPE.  */

struct type *
lookup_methodptr_type (struct type *to_type)
{
  struct type *mtype;

  mtype = alloc_type_copy (to_type);
  smash_to_methodptr_type (mtype, to_type);
  return mtype;
}

/* Allocate a stub method whose return type is TYPE.  This apparently
   happens for speed of symbol reading, since parsing out the
   arguments to the method is cpu-intensive, the way we are doing it.
   So, we will fill in arguments later.  This always returns a fresh
   type.  */

struct type *
allocate_stub_method (struct type *type)
{
  struct type *mtype;

  mtype = alloc_type_copy (type);
  TYPE_CODE (mtype) = TYPE_CODE_METHOD;
  TYPE_LENGTH (mtype) = 1;
  TYPE_STUB (mtype) = 1;
  TYPE_TARGET_TYPE (mtype) = type;
  /*  _DOMAIN_TYPE (mtype) = unknown yet */
  return mtype;
}

/* Create a range type using either a blank type supplied in
   RESULT_TYPE, or creating a new type, inheriting the objfile from
   INDEX_TYPE.

   Indices will be of type INDEX_TYPE, and will range from LOW_BOUND
   to HIGH_BOUND, inclusive.

   FIXME: Maybe we should check the TYPE_CODE of RESULT_TYPE to make
   sure it is TYPE_CODE_UNDEF before we bash it into a range type?  */

struct type *
create_range_type (struct type *result_type, struct type *index_type,
		   LONGEST low_bound, LONGEST high_bound)
{
  if (result_type == NULL)
    result_type = alloc_type_copy (index_type);
  TYPE_CODE (result_type) = TYPE_CODE_RANGE;
  TYPE_TARGET_TYPE (result_type) = index_type;
  if (TYPE_STUB (index_type))
    TYPE_TARGET_STUB (result_type) = 1;
  else
    TYPE_LENGTH (result_type) = TYPE_LENGTH (check_typedef (index_type));
  TYPE_RANGE_DATA (result_type) = (struct range_bounds *)
    TYPE_ZALLOC (result_type, sizeof (struct range_bounds));
  TYPE_LOW_BOUND (result_type) = low_bound;
  TYPE_HIGH_BOUND (result_type) = high_bound;

  if (low_bound >= 0)
    TYPE_UNSIGNED (result_type) = 1;

  return result_type;
}

/* Set *LOWP and *HIGHP to the lower and upper bounds of discrete type
   TYPE.  Return 1 if type is a range type, 0 if it is discrete (and
   bounds will fit in LONGEST), or -1 otherwise.  */

int
get_discrete_bounds (struct type *type, LONGEST *lowp, LONGEST *highp)
{
  CHECK_TYPEDEF (type);
  switch (TYPE_CODE (type))
    {
    case TYPE_CODE_RANGE:
      *lowp = TYPE_LOW_BOUND (type);
      *highp = TYPE_HIGH_BOUND (type);
      return 1;
    case TYPE_CODE_ENUM:
      if (TYPE_NFIELDS (type) > 0)
	{
	  /* The enums may not be sorted by value, so search all
	     entries.  */
	  int i;

	  *lowp = *highp = TYPE_FIELD_ENUMVAL (type, 0);
	  for (i = 0; i < TYPE_NFIELDS (type); i++)
	    {
	      if (TYPE_FIELD_ENUMVAL (type, i) < *lowp)
		*lowp = TYPE_FIELD_ENUMVAL (type, i);
	      if (TYPE_FIELD_ENUMVAL (type, i) > *highp)
		*highp = TYPE_FIELD_ENUMVAL (type, i);
	    }

	  /* Set unsigned indicator if warranted.  */
	  if (*lowp >= 0)
	    {
	      TYPE_UNSIGNED (type) = 1;
	    }
	}
      else
	{
	  *lowp = 0;
	  *highp = -1;
	}
      return 0;
    case TYPE_CODE_BOOL:
      *lowp = 0;
      *highp = 1;
      return 0;
    case TYPE_CODE_INT:
      if (TYPE_LENGTH (type) > sizeof (LONGEST))	/* Too big */
	return -1;
      if (!TYPE_UNSIGNED (type))
	{
	  *lowp = -(1 << (TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1));
	  *highp = -*lowp - 1;
	  return 0;
	}
      /* ... fall through for unsigned ints ...  */
    case TYPE_CODE_CHAR:
      *lowp = 0;
      /* This round-about calculation is to avoid shifting by
         TYPE_LENGTH (type) * TARGET_CHAR_BIT, which will not work
         if TYPE_LENGTH (type) == sizeof (LONGEST).  */
      *highp = 1 << (TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1);
      *highp = (*highp - 1) | *highp;
      return 0;
    default:
      return -1;
    }
}

/* Assuming TYPE is a simple, non-empty array type, compute its upper
   and lower bound.  Save the low bound into LOW_BOUND if not NULL.
   Save the high bound into HIGH_BOUND if not NULL.

   Return 1 if the operation was successful.  Return zero otherwise,
   in which case the values of LOW_BOUND and HIGH_BOUNDS are unmodified.

   We now simply use get_discrete_bounds call to get the values
   of the low and high bounds.
   get_discrete_bounds can return three values:
   1, meaning that index is a range,
   0, meaning that index is a discrete type,
   or -1 for failure.  */

int
get_array_bounds (struct type *type, LONGEST *low_bound, LONGEST *high_bound)
{
  struct type *index = TYPE_INDEX_TYPE (type);
  LONGEST low = 0;
  LONGEST high = 0;
  int res;

  if (index == NULL)
    return 0;

  res = get_discrete_bounds (index, &low, &high);
  if (res == -1)
    return 0;

  /* Check if the array bounds are undefined.  */
  if (res == 1
      && ((low_bound && TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED (type))
	  || (high_bound && TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))))
    return 0;

  if (low_bound)
    *low_bound = low;

  if (high_bound)
    *high_bound = high;

  return 1;
}

/* Create an array type using either a blank type supplied in
   RESULT_TYPE, or creating a new type, inheriting the objfile from
   RANGE_TYPE.

   Elements will be of type ELEMENT_TYPE, the indices will be of type
   RANGE_TYPE.

   FIXME: Maybe we should check the TYPE_CODE of RESULT_TYPE to make
   sure it is TYPE_CODE_UNDEF before we bash it into an array
   type?  */

struct type *
create_array_type (struct type *result_type, 
		   struct type *element_type,
		   struct type *range_type)
{
  LONGEST low_bound, high_bound;

  if (result_type == NULL)
    result_type = alloc_type_copy (range_type);

  TYPE_CODE (result_type) = TYPE_CODE_ARRAY;
  TYPE_TARGET_TYPE (result_type) = element_type;
  if (get_discrete_bounds (range_type, &low_bound, &high_bound) < 0)
    low_bound = high_bound = 0;
  CHECK_TYPEDEF (element_type);
  /* Be careful when setting the array length.  Ada arrays can be
     empty arrays with the high_bound being smaller than the low_bound.
     In such cases, the array length should be zero.  */
  if (high_bound < low_bound)
    TYPE_LENGTH (result_type) = 0;
  else
    TYPE_LENGTH (result_type) =
      TYPE_LENGTH (element_type) * (high_bound - low_bound + 1);
  TYPE_NFIELDS (result_type) = 1;
  TYPE_FIELDS (result_type) =
    (struct field *) TYPE_ZALLOC (result_type, sizeof (struct field));
  TYPE_INDEX_TYPE (result_type) = range_type;
  TYPE_VPTR_FIELDNO (result_type) = -1;

  /* TYPE_FLAG_TARGET_STUB will take care of zero length arrays.  */
  if (TYPE_LENGTH (result_type) == 0)
    TYPE_TARGET_STUB (result_type) = 1;

  return result_type;
}

struct type *
lookup_array_range_type (struct type *element_type,
			 LONGEST low_bound, LONGEST high_bound)
{
  struct gdbarch *gdbarch = get_type_arch (element_type);
  struct type *index_type = builtin_type (gdbarch)->builtin_int;
  struct type *range_type
    = create_range_type (NULL, index_type, low_bound, high_bound);

  return create_array_type (NULL, element_type, range_type);
}

/* Create a string type using either a blank type supplied in
   RESULT_TYPE, or creating a new type.  String types are similar
   enough to array of char types that we can use create_array_type to
   build the basic type and then bash it into a string type.

   For fixed length strings, the range type contains 0 as the lower
   bound and the length of the string minus one as the upper bound.

   FIXME: Maybe we should check the TYPE_CODE of RESULT_TYPE to make
   sure it is TYPE_CODE_UNDEF before we bash it into a string
   type?  */

struct type *
create_string_type (struct type *result_type,
		    struct type *string_char_type,
		    struct type *range_type)
{
  result_type = create_array_type (result_type,
				   string_char_type,
				   range_type);
  TYPE_CODE (result_type) = TYPE_CODE_STRING;
  return result_type;
}

struct type *
lookup_string_range_type (struct type *string_char_type,
			  LONGEST low_bound, LONGEST high_bound)
{
  struct type *result_type;

  result_type = lookup_array_range_type (string_char_type,
					 low_bound, high_bound);
  TYPE_CODE (result_type) = TYPE_CODE_STRING;
  return result_type;
}

struct type *
create_set_type (struct type *result_type, struct type *domain_type)
{
  if (result_type == NULL)
    result_type = alloc_type_copy (domain_type);

  TYPE_CODE (result_type) = TYPE_CODE_SET;
  TYPE_NFIELDS (result_type) = 1;
  TYPE_FIELDS (result_type) = TYPE_ZALLOC (result_type, sizeof (struct field));

  if (!TYPE_STUB (domain_type))
    {
      LONGEST low_bound, high_bound, bit_length;

      if (get_discrete_bounds (domain_type, &low_bound, &high_bound) < 0)
	low_bound = high_bound = 0;
      bit_length = high_bound - low_bound + 1;
      TYPE_LENGTH (result_type)
	= (bit_length + TARGET_CHAR_BIT - 1) / TARGET_CHAR_BIT;
      if (low_bound >= 0)
	TYPE_UNSIGNED (result_type) = 1;
    }
  TYPE_FIELD_TYPE (result_type, 0) = domain_type;

  return result_type;
}

/* Convert ARRAY_TYPE to a vector type.  This may modify ARRAY_TYPE
   and any array types nested inside it.  */

void
make_vector_type (struct type *array_type)
{
  struct type *inner_array, *elt_type;
  int flags;

  /* Find the innermost array type, in case the array is
     multi-dimensional.  */
  inner_array = array_type;
  while (TYPE_CODE (TYPE_TARGET_TYPE (inner_array)) == TYPE_CODE_ARRAY)
    inner_array = TYPE_TARGET_TYPE (inner_array);

  elt_type = TYPE_TARGET_TYPE (inner_array);
  if (TYPE_CODE (elt_type) == TYPE_CODE_INT)
    {
      flags = TYPE_INSTANCE_FLAGS (elt_type) | TYPE_INSTANCE_FLAG_NOTTEXT;
      elt_type = make_qualified_type (elt_type, flags, NULL);
      TYPE_TARGET_TYPE (inner_array) = elt_type;
    }

  TYPE_VECTOR (array_type) = 1;
}

struct type *
init_vector_type (struct type *elt_type, int n)
{
  struct type *array_type;

  array_type = lookup_array_range_type (elt_type, 0, n - 1);
  make_vector_type (array_type);
  return array_type;
}

/* Smash TYPE to be a type of pointers to members of DOMAIN with type
   TO_TYPE.  A member pointer is a wierd thing -- it amounts to a
   typed offset into a struct, e.g. "an int at offset 8".  A MEMBER
   TYPE doesn't include the offset (that's the value of the MEMBER
   itself), but does include the structure type into which it points
   (for some reason).

   When "smashing" the type, we preserve the objfile that the old type
   pointed to, since we aren't changing where the type is actually
   allocated.  */

void
smash_to_memberptr_type (struct type *type, struct type *domain,
			 struct type *to_type)
{
  smash_type (type);
  TYPE_TARGET_TYPE (type) = to_type;
  TYPE_DOMAIN_TYPE (type) = domain;
  /* Assume that a data member pointer is the same size as a normal
     pointer.  */
  TYPE_LENGTH (type)
    = gdbarch_ptr_bit (get_type_arch (to_type)) / TARGET_CHAR_BIT;
  TYPE_CODE (type) = TYPE_CODE_MEMBERPTR;
}

/* Smash TYPE to be a type of pointer to methods type TO_TYPE.

   When "smashing" the type, we preserve the objfile that the old type
   pointed to, since we aren't changing where the type is actually
   allocated.  */

void
smash_to_methodptr_type (struct type *type, struct type *to_type)
{
  smash_type (type);
  TYPE_TARGET_TYPE (type) = to_type;
  TYPE_DOMAIN_TYPE (type) = TYPE_DOMAIN_TYPE (to_type);
  TYPE_LENGTH (type) = cplus_method_ptr_size (to_type);
  TYPE_CODE (type) = TYPE_CODE_METHODPTR;
}

/* Smash TYPE to be a type of method of DOMAIN with type TO_TYPE.
   METHOD just means `function that gets an extra "this" argument'.

   When "smashing" the type, we preserve the objfile that the old type
   pointed to, since we aren't changing where the type is actually
   allocated.  */

void
smash_to_method_type (struct type *type, struct type *domain,
		      struct type *to_type, struct field *args,
		      int nargs, int varargs)
{
  smash_type (type);
  TYPE_TARGET_TYPE (type) = to_type;
  TYPE_DOMAIN_TYPE (type) = domain;
  TYPE_FIELDS (type) = args;
  TYPE_NFIELDS (type) = nargs;
  if (varargs)
    TYPE_VARARGS (type) = 1;
  TYPE_LENGTH (type) = 1;	/* In practice, this is never needed.  */
  TYPE_CODE (type) = TYPE_CODE_METHOD;
}

/* Return a typename for a struct/union/enum type without "struct ",
   "union ", or "enum ".  If the type has a NULL name, return NULL.  */

const char *
type_name_no_tag (const struct type *type)
{
  if (TYPE_TAG_NAME (type) != NULL)
    return TYPE_TAG_NAME (type);

  /* Is there code which expects this to return the name if there is
     no tag name?  My guess is that this is mainly used for C++ in
     cases where the two will always be the same.  */
  return TYPE_NAME (type);
}

/* A wrapper of type_name_no_tag which calls error if the type is anonymous.
   Since GCC PR debug/47510 DWARF provides associated information to detect the
   anonymous class linkage name from its typedef.

   Parameter TYPE should not yet have CHECK_TYPEDEF applied, this function will
   apply it itself.  */

const char *
type_name_no_tag_or_error (struct type *type)
{
  struct type *saved_type = type;
  const char *name;
  struct objfile *objfile;

  CHECK_TYPEDEF (type);

  name = type_name_no_tag (type);
  if (name != NULL)
    return name;

  name = type_name_no_tag (saved_type);
  objfile = TYPE_OBJFILE (saved_type);
  error (_("Invalid anonymous type %s [in module %s], GCC PR debug/47510 bug?"),
	 name ? name : "<anonymous>",
	 objfile ? objfile_name (objfile) : "<arch>");
}

/* Lookup a typedef or primitive type named NAME, visible in lexical
   block BLOCK.  If NOERR is nonzero, return zero if NAME is not
   suitably defined.  */

struct type *
lookup_typename (const struct language_defn *language,
		 struct gdbarch *gdbarch, const char *name,
		 const struct block *block, int noerr)
{
  struct symbol *sym;
  struct type *type;

  sym = lookup_symbol (name, block, VAR_DOMAIN, 0);
  if (sym != NULL && SYMBOL_CLASS (sym) == LOC_TYPEDEF)
    return SYMBOL_TYPE (sym);

  type = language_lookup_primitive_type_by_name (language, gdbarch, name);
  if (type)
    return type;

  if (noerr)
    return NULL;
  error (_("No type named %s."), name);
}

struct type *
lookup_unsigned_typename (const struct language_defn *language,
			  struct gdbarch *gdbarch, const char *name)
{
  char *uns = alloca (strlen (name) + 10);

  strcpy (uns, "unsigned ");
  strcpy (uns + 9, name);
  return lookup_typename (language, gdbarch, uns, (struct block *) NULL, 0);
}

struct type *
lookup_signed_typename (const struct language_defn *language,
			struct gdbarch *gdbarch, const char *name)
{
  struct type *t;
  char *uns = alloca (strlen (name) + 8);

  strcpy (uns, "signed ");
  strcpy (uns + 7, name);
  t = lookup_typename (language, gdbarch, uns, (struct block *) NULL, 1);
  /* If we don't find "signed FOO" just try again with plain "FOO".  */
  if (t != NULL)
    return t;
  return lookup_typename (language, gdbarch, name, (struct block *) NULL, 0);
}

/* Lookup a structure type named "struct NAME",
   visible in lexical block BLOCK.  */

struct type *
lookup_struct (const char *name, const struct block *block)
{
  struct symbol *sym;

  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0);

  if (sym == NULL)
    {
      error (_("No struct type named %s."), name);
    }
  if (TYPE_CODE (SYMBOL_TYPE (sym)) != TYPE_CODE_STRUCT)
    {
      error (_("This context has class, union or enum %s, not a struct."),
	     name);
    }
  return (SYMBOL_TYPE (sym));
}

/* Lookup a union type named "union NAME",
   visible in lexical block BLOCK.  */

struct type *
lookup_union (const char *name, const struct block *block)
{
  struct symbol *sym;
  struct type *t;

  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0);

  if (sym == NULL)
    error (_("No union type named %s."), name);

  t = SYMBOL_TYPE (sym);

  if (TYPE_CODE (t) == TYPE_CODE_UNION)
    return t;

  /* If we get here, it's not a union.  */
  error (_("This context has class, struct or enum %s, not a union."), 
	 name);
}

/* Lookup an enum type named "enum NAME",
   visible in lexical block BLOCK.  */

struct type *
lookup_enum (const char *name, const struct block *block)
{
  struct symbol *sym;

  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0);
  if (sym == NULL)
    {
      error (_("No enum type named %s."), name);
    }
  if (TYPE_CODE (SYMBOL_TYPE (sym)) != TYPE_CODE_ENUM)
    {
      error (_("This context has class, struct or union %s, not an enum."), 
	     name);
    }
  return (SYMBOL_TYPE (sym));
}

/* Lookup a template type named "template NAME<TYPE>",
   visible in lexical block BLOCK.  */

struct type *
lookup_template_type (char *name, struct type *type, 
		      const struct block *block)
{
  struct symbol *sym;
  char *nam = (char *) 
    alloca (strlen (name) + strlen (TYPE_NAME (type)) + 4);

  strcpy (nam, name);
  strcat (nam, "<");
  strcat (nam, TYPE_NAME (type));
  strcat (nam, " >");	/* FIXME, extra space still introduced in gcc?  */

  sym = lookup_symbol (nam, block, VAR_DOMAIN, 0);

  if (sym == NULL)
    {
      error (_("No template type named %s."), name);
    }
  if (TYPE_CODE (SYMBOL_TYPE (sym)) != TYPE_CODE_STRUCT)
    {
      error (_("This context has class, union or enum %s, not a struct."),
	     name);
    }
  return (SYMBOL_TYPE (sym));
}

/* Given a type TYPE, lookup the type of the component of type named
   NAME.

   TYPE can be either a struct or union, or a pointer or reference to
   a struct or union.  If it is a pointer or reference, its target
   type is automatically used.  Thus '.' and '->' are interchangable,
   as specified for the definitions of the expression element types
   STRUCTOP_STRUCT and STRUCTOP_PTR.

   If NOERR is nonzero, return zero if NAME is not suitably defined.
   If NAME is the name of a baseclass type, return that type.  */

struct type *
lookup_struct_elt_type (struct type *type, const char *name, int noerr)
{
  int i;
  char *typename;

  for (;;)
    {
      CHECK_TYPEDEF (type);
      if (TYPE_CODE (type) != TYPE_CODE_PTR
	  && TYPE_CODE (type) != TYPE_CODE_REF)
	break;
      type = TYPE_TARGET_TYPE (type);
    }

  if (TYPE_CODE (type) != TYPE_CODE_STRUCT 
      && TYPE_CODE (type) != TYPE_CODE_UNION)
    {
      typename = type_to_string (type);
      make_cleanup (xfree, typename);
      error (_("Type %s is not a structure or union type."), typename);
    }

#if 0
  /* FIXME: This change put in by Michael seems incorrect for the case
     where the structure tag name is the same as the member name.
     I.e. when doing "ptype bell->bar" for "struct foo { int bar; int
     foo; } bell;" Disabled by fnf.  */
  {
    char *typename;

    typename = type_name_no_tag (type);
    if (typename != NULL && strcmp (typename, name) == 0)
      return type;
  }
#endif

  for (i = TYPE_NFIELDS (type) - 1; i >= TYPE_N_BASECLASSES (type); i--)
    {
      const char *t_field_name = TYPE_FIELD_NAME (type, i);

      if (t_field_name && (strcmp_iw (t_field_name, name) == 0))
	{
	  return TYPE_FIELD_TYPE (type, i);
	}
     else if (!t_field_name || *t_field_name == '\0')
	{
	  struct type *subtype 
	    = lookup_struct_elt_type (TYPE_FIELD_TYPE (type, i), name, 1);

	  if (subtype != NULL)
	    return subtype;
	}
    }

  /* OK, it's not in this class.  Recursively check the baseclasses.  */
  for (i = TYPE_N_BASECLASSES (type) - 1; i >= 0; i--)
    {
      struct type *t;

      t = lookup_struct_elt_type (TYPE_BASECLASS (type, i), name, 1);
      if (t != NULL)
	{
	  return t;
	}
    }

  if (noerr)
    {
      return NULL;
    }

  typename = type_to_string (type);
  make_cleanup (xfree, typename);
  error (_("Type %s has no component named %s."), typename, name);
}

/* Lookup the vptr basetype/fieldno values for TYPE.
   If found store vptr_basetype in *BASETYPEP if non-NULL, and return
   vptr_fieldno.  Also, if found and basetype is from the same objfile,
   cache the results.
   If not found, return -1 and ignore BASETYPEP.
   Callers should be aware that in some cases (for example,
   the type or one of its baseclasses is a stub type and we are
   debugging a .o file, or the compiler uses DWARF-2 and is not GCC),
   this function will not be able to find the
   virtual function table pointer, and vptr_fieldno will remain -1 and
   vptr_basetype will remain NULL or incomplete.  */

int
get_vptr_fieldno (struct type *type, struct type **basetypep)
{
  CHECK_TYPEDEF (type);

  if (TYPE_VPTR_FIELDNO (type) < 0)
    {
      int i;

      /* We must start at zero in case the first (and only) baseclass
         is virtual (and hence we cannot share the table pointer).  */
      for (i = 0; i < TYPE_N_BASECLASSES (type); i++)
	{
	  struct type *baseclass = check_typedef (TYPE_BASECLASS (type, i));
	  int fieldno;
	  struct type *basetype;

	  fieldno = get_vptr_fieldno (baseclass, &basetype);
	  if (fieldno >= 0)
	    {
	      /* If the type comes from a different objfile we can't cache
		 it, it may have a different lifetime.  PR 2384 */
	      if (TYPE_OBJFILE (type) == TYPE_OBJFILE (basetype))
		{
		  TYPE_VPTR_FIELDNO (type) = fieldno;
		  TYPE_VPTR_BASETYPE (type) = basetype;
		}
	      if (basetypep)
		*basetypep = basetype;
	      return fieldno;
	    }
	}

      /* Not found.  */
      return -1;
    }
  else
    {
      if (basetypep)
	*basetypep = TYPE_VPTR_BASETYPE (type);
      return TYPE_VPTR_FIELDNO (type);
    }
}

static void
stub_noname_complaint (void)
{
  complaint (&symfile_complaints, _("stub type has NULL name"));
}

/* Find the real type of TYPE.  This function returns the real type,
   after removing all layers of typedefs, and completing opaque or stub
   types.  Completion changes the TYPE argument, but stripping of
   typedefs does not.

   Instance flags (e.g. const/volatile) are preserved as typedefs are
   stripped.  If necessary a new qualified form of the underlying type
   is created.

   NOTE: This will return a typedef if TYPE_TARGET_TYPE for the typedef has
   not been computed and we're either in the middle of reading symbols, or
   there was no name for the typedef in the debug info.

   NOTE: Lookup of opaque types can throw errors for invalid symbol files.
   QUITs in the symbol reading code can also throw.
   Thus this function can throw an exception.

   If TYPE is a TYPE_CODE_TYPEDEF, its length is updated to the length of
   the target type.

   If this is a stubbed struct (i.e. declared as struct foo *), see if
   we can find a full definition in some other file.  If so, copy this
   definition, so we can use it in future.  There used to be a comment
   (but not any code) that if we don't find a full definition, we'd
   set a flag so we don't spend time in the future checking the same
   type.  That would be a mistake, though--we might load in more
   symbols which contain a full definition for the type.  */

struct type *
check_typedef (struct type *type)
{
  struct type *orig_type = type;
  /* While we're removing typedefs, we don't want to lose qualifiers.
     E.g., const/volatile.  */
  int instance_flags = TYPE_INSTANCE_FLAGS (type);

  gdb_assert (type);

  while (TYPE_CODE (type) == TYPE_CODE_TYPEDEF)
    {
      if (!TYPE_TARGET_TYPE (type))
	{
	  const char *name;
	  struct symbol *sym;

	  /* It is dangerous to call lookup_symbol if we are currently
	     reading a symtab.  Infinite recursion is one danger.  */
	  if (currently_reading_symtab)
	    return make_qualified_type (type, instance_flags, NULL);

	  name = type_name_no_tag (type);
	  /* FIXME: shouldn't we separately check the TYPE_NAME and
	     the TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or
	     VAR_DOMAIN as appropriate?  (this code was written before
	     TYPE_NAME and TYPE_TAG_NAME were separate).  */
	  if (name == NULL)
	    {
	      stub_noname_complaint ();
	      return make_qualified_type (type, instance_flags, NULL);
	    }
	  sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0);
	  if (sym)
	    TYPE_TARGET_TYPE (type) = SYMBOL_TYPE (sym);
	  else					/* TYPE_CODE_UNDEF */
	    TYPE_TARGET_TYPE (type) = alloc_type_arch (get_type_arch (type));
	}
      type = TYPE_TARGET_TYPE (type);

      /* Preserve the instance flags as we traverse down the typedef chain.

	 Handling address spaces/classes is nasty, what do we do if there's a
	 conflict?
	 E.g., what if an outer typedef marks the type as class_1 and an inner
	 typedef marks the type as class_2?
	 This is the wrong place to do such error checking.  We leave it to
	 the code that created the typedef in the first place to flag the
	 error.  We just pick the outer address space (akin to letting the
	 outer cast in a chain of casting win), instead of assuming
	 "it can't happen".  */
      {
	const int ALL_SPACES = (TYPE_INSTANCE_FLAG_CODE_SPACE
				| TYPE_INSTANCE_FLAG_DATA_SPACE);
	const int ALL_CLASSES = TYPE_INSTANCE_FLAG_ADDRESS_CLASS_ALL;
	int new_instance_flags = TYPE_INSTANCE_FLAGS (type);

	/* Treat code vs data spaces and address classes separately.  */
	if ((instance_flags & ALL_SPACES) != 0)
	  new_instance_flags &= ~ALL_SPACES;
	if ((instance_flags & ALL_CLASSES) != 0)
	  new_instance_flags &= ~ALL_CLASSES;

	instance_flags |= new_instance_flags;
      }
    }

  /* If this is a struct/class/union with no fields, then check
     whether a full definition exists somewhere else.  This is for
     systems where a type definition with no fields is issued for such
     types, instead of identifying them as stub types in the first
     place.  */

  if (TYPE_IS_OPAQUE (type) 
      && opaque_type_resolution 
      && !currently_reading_symtab)
    {
      const char *name = type_name_no_tag (type);
      struct type *newtype;

      if (name == NULL)
	{
	  stub_noname_complaint ();
	  return make_qualified_type (type, instance_flags, NULL);
	}
      newtype = lookup_transparent_type (name);

      if (newtype)
	{
	  /* If the resolved type and the stub are in the same
	     objfile, then replace the stub type with the real deal.
	     But if they're in separate objfiles, leave the stub
	     alone; we'll just look up the transparent type every time
	     we call check_typedef.  We can't create pointers between
	     types allocated to different objfiles, since they may
	     have different lifetimes.  Trying to copy NEWTYPE over to
	     TYPE's objfile is pointless, too, since you'll have to
	     move over any other types NEWTYPE refers to, which could
	     be an unbounded amount of stuff.  */
	  if (TYPE_OBJFILE (newtype) == TYPE_OBJFILE (type))
	    type = make_qualified_type (newtype,
					TYPE_INSTANCE_FLAGS (type),
					type);
	  else
	    type = newtype;
	}
    }
  /* Otherwise, rely on the stub flag being set for opaque/stubbed
     types.  */
  else if (TYPE_STUB (type) && !currently_reading_symtab)
    {
      const char *name = type_name_no_tag (type);
      /* FIXME: shouldn't we separately check the TYPE_NAME and the
         TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
         as appropriate?  (this code was written before TYPE_NAME and
         TYPE_TAG_NAME were separate).  */
      struct symbol *sym;

      if (name == NULL)
	{
	  stub_noname_complaint ();
	  return make_qualified_type (type, instance_flags, NULL);
	}
      sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0);
      if (sym)
        {
          /* Same as above for opaque types, we can replace the stub
             with the complete type only if they are in the same
             objfile.  */
	  if (TYPE_OBJFILE (SYMBOL_TYPE(sym)) == TYPE_OBJFILE (type))
            type = make_qualified_type (SYMBOL_TYPE (sym),
					TYPE_INSTANCE_FLAGS (type),
					type);
	  else
	    type = SYMBOL_TYPE (sym);
        }
    }

  if (TYPE_TARGET_STUB (type))
    {
      struct type *range_type;
      struct type *target_type = check_typedef (TYPE_TARGET_TYPE (type));

      if (TYPE_STUB (target_type) || TYPE_TARGET_STUB (target_type))
	{
	  /* Nothing we can do.  */
	}
      else if (TYPE_CODE (type) == TYPE_CODE_ARRAY
	       && TYPE_NFIELDS (type) == 1
	       && (TYPE_CODE (range_type = TYPE_INDEX_TYPE (type))
		   == TYPE_CODE_RANGE))
	{
	  /* Now recompute the length of the array type, based on its
	     number of elements and the target type's length.
	     Watch out for Ada null Ada arrays where the high bound
	     is smaller than the low bound.  */
	  const LONGEST low_bound = TYPE_LOW_BOUND (range_type);
	  const LONGEST high_bound = TYPE_HIGH_BOUND (range_type);
	  ULONGEST len;

	  if (high_bound < low_bound)
	    len = 0;
	  else
	    {
	      /* For now, we conservatively take the array length to be 0
		 if its length exceeds UINT_MAX.  The code below assumes
		 that for x < 0, (ULONGEST) x == -x + ULONGEST_MAX + 1,
		 which is technically not guaranteed by C, but is usually true
		 (because it would be true if x were unsigned with its
		 high-order bit on).  It uses the fact that
		 high_bound-low_bound is always representable in
		 ULONGEST and that if high_bound-low_bound+1 overflows,
		 it overflows to 0.  We must change these tests if we 
		 decide to increase the representation of TYPE_LENGTH
		 from unsigned int to ULONGEST.  */
	      ULONGEST ulow = low_bound, uhigh = high_bound;
	      ULONGEST tlen = TYPE_LENGTH (target_type);

	      len = tlen * (uhigh - ulow + 1);
	      if (tlen == 0 || (len / tlen - 1 + ulow) != uhigh 
		  || len > UINT_MAX)
		len = 0;
	    }
	  TYPE_LENGTH (type) = len;
	  TYPE_TARGET_STUB (type) = 0;
	}
      else if (TYPE_CODE (type) == TYPE_CODE_RANGE)
	{
	  TYPE_LENGTH (type) = TYPE_LENGTH (target_type);
	  TYPE_TARGET_STUB (type) = 0;
	}
    }

  type = make_qualified_type (type, instance_flags, NULL);

  /* Cache TYPE_LENGTH for future use.  */
  TYPE_LENGTH (orig_type) = TYPE_LENGTH (type);

  return type;
}

/* Parse a type expression in the string [P..P+LENGTH).  If an error
   occurs, silently return a void type.  */

static struct type *
safe_parse_type (struct gdbarch *gdbarch, char *p, int length)
{
  struct ui_file *saved_gdb_stderr;
  struct type *type = NULL; /* Initialize to keep gcc happy.  */
  volatile struct gdb_exception except;

  /* Suppress error messages.  */
  saved_gdb_stderr = gdb_stderr;
  gdb_stderr = ui_file_new ();

  /* Call parse_and_eval_type() without fear of longjmp()s.  */
  TRY_CATCH (except, RETURN_MASK_ERROR)
    {
      type = parse_and_eval_type (p, length);
    }

  if (except.reason < 0)
    type = builtin_type (gdbarch)->builtin_void;

  /* Stop suppressing error messages.  */
  ui_file_delete (gdb_stderr);
  gdb_stderr = saved_gdb_stderr;

  return type;
}

/* Ugly hack to convert method stubs into method types.

   He ain't kiddin'.  This demangles the name of the method into a
   string including argument types, parses out each argument type,
   generates a string casting a zero to that type, evaluates the
   string, and stuffs the resulting type into an argtype vector!!!
   Then it knows the type of the whole function (including argument
   types for overloading), which info used to be in the stab's but was
   removed to hack back the space required for them.  */

static void
check_stub_method (struct type *type, int method_id, int signature_id)
{
  struct gdbarch *gdbarch = get_type_arch (type);
  struct fn_field *f;
  char *mangled_name = gdb_mangle_name (type, method_id, signature_id);
  char *demangled_name = gdb_demangle (mangled_name,
				       DMGL_PARAMS | DMGL_ANSI);
  char *argtypetext, *p;
  int depth = 0, argcount = 1;
  struct field *argtypes;
  struct type *mtype;

  /* Make sure we got back a function string that we can use.  */
  if (demangled_name)
    p = strchr (demangled_name, '(');
  else
    p = NULL;

  if (demangled_name == NULL || p == NULL)
    error (_("Internal: Cannot demangle mangled name `%s'."), 
	   mangled_name);

  /* Now, read in the parameters that define this type.  */
  p += 1;
  argtypetext = p;
  while (*p)
    {
      if (*p == '(' || *p == '<')
	{
	  depth += 1;
	}
      else if (*p == ')' || *p == '>')
	{
	  depth -= 1;
	}
      else if (*p == ',' && depth == 0)
	{
	  argcount += 1;
	}

      p += 1;
    }

  /* If we read one argument and it was ``void'', don't count it.  */
  if (strncmp (argtypetext, "(void)", 6) == 0)
    argcount -= 1;

  /* We need one extra slot, for the THIS pointer.  */

  argtypes = (struct field *)
    TYPE_ALLOC (type, (argcount + 1) * sizeof (struct field));
  p = argtypetext;

  /* Add THIS pointer for non-static methods.  */
  f = TYPE_FN_FIELDLIST1 (type, method_id);
  if (TYPE_FN_FIELD_STATIC_P (f, signature_id))
    argcount = 0;
  else
    {
      argtypes[0].type = lookup_pointer_type (type);
      argcount = 1;
    }

  if (*p != ')')		/* () means no args, skip while.  */
    {
      depth = 0;
      while (*p)
	{
	  if (depth <= 0 && (*p == ',' || *p == ')'))
	    {
	      /* Avoid parsing of ellipsis, they will be handled below.
	         Also avoid ``void'' as above.  */
	      if (strncmp (argtypetext, "...", p - argtypetext) != 0
		  && strncmp (argtypetext, "void", p - argtypetext) != 0)
		{
		  argtypes[argcount].type =
		    safe_parse_type (gdbarch, argtypetext, p - argtypetext);
		  argcount += 1;
		}
	      argtypetext = p + 1;
	    }

	  if (*p == '(' || *p == '<')
	    {
	      depth += 1;
	    }
	  else if (*p == ')' || *p == '>')
	    {
	      depth -= 1;
	    }

	  p += 1;
	}
    }

  TYPE_FN_FIELD_PHYSNAME (f, signature_id) = mangled_name;

  /* Now update the old "stub" type into a real type.  */
  mtype = TYPE_FN_FIELD_TYPE (f, signature_id);
  TYPE_DOMAIN_TYPE (mtype) = type;
  TYPE_FIELDS (mtype) = argtypes;
  TYPE_NFIELDS (mtype) = argcount;
  TYPE_STUB (mtype) = 0;
  TYPE_FN_FIELD_STUB (f, signature_id) = 0;
  if (p[-2] == '.')
    TYPE_VARARGS (mtype) = 1;

  xfree (demangled_name);
}

/* This is the external interface to check_stub_method, above.  This
   function unstubs all of the signatures for TYPE's METHOD_ID method
   name.  After calling this function TYPE_FN_FIELD_STUB will be
   cleared for each signature and TYPE_FN_FIELDLIST_NAME will be
   correct.

   This function unfortunately can not die until stabs do.  */

void
check_stub_method_group (struct type *type, int method_id)
{
  int len = TYPE_FN_FIELDLIST_LENGTH (type, method_id);
  struct fn_field *f = TYPE_FN_FIELDLIST1 (type, method_id);
  int j, found_stub = 0;

  for (j = 0; j < len; j++)
    if (TYPE_FN_FIELD_STUB (f, j))
      {
	found_stub = 1;
	check_stub_method (type, method_id, j);
      }

  /* GNU v3 methods with incorrect names were corrected when we read
     in type information, because it was cheaper to do it then.  The
     only GNU v2 methods with incorrect method names are operators and
     destructors; destructors were also corrected when we read in type
     information.

     Therefore the only thing we need to handle here are v2 operator
     names.  */
  if (found_stub && strncmp (TYPE_FN_FIELD_PHYSNAME (f, 0), "_Z", 2) != 0)
    {
      int ret;
      char dem_opname[256];

      ret = cplus_demangle_opname (TYPE_FN_FIELDLIST_NAME (type, 
							   method_id),
				   dem_opname, DMGL_ANSI);
      if (!ret)
	ret = cplus_demangle_opname (TYPE_FN_FIELDLIST_NAME (type, 
							     method_id),
				     dem_opname, 0);
      if (ret)
	TYPE_FN_FIELDLIST_NAME (type, method_id) = xstrdup (dem_opname);
    }
}

/* Ensure it is in .rodata (if available) by workarounding GCC PR 44690.  */
const struct cplus_struct_type cplus_struct_default = { };

void
allocate_cplus_struct_type (struct type *type)
{
  if (HAVE_CPLUS_STRUCT (type))
    /* Structure was already allocated.  Nothing more to do.  */
    return;

  TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_CPLUS_STUFF;
  TYPE_RAW_CPLUS_SPECIFIC (type) = (struct cplus_struct_type *)
    TYPE_ALLOC (type, sizeof (struct cplus_struct_type));
  *(TYPE_RAW_CPLUS_SPECIFIC (type)) = cplus_struct_default;
}

const struct gnat_aux_type gnat_aux_default =
  { NULL };

/* Set the TYPE's type-specific kind to TYPE_SPECIFIC_GNAT_STUFF,
   and allocate the associated gnat-specific data.  The gnat-specific
   data is also initialized to gnat_aux_default.  */

void
allocate_gnat_aux_type (struct type *type)
{
  TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_GNAT_STUFF;
  TYPE_GNAT_SPECIFIC (type) = (struct gnat_aux_type *)
    TYPE_ALLOC (type, sizeof (struct gnat_aux_type));
  *(TYPE_GNAT_SPECIFIC (type)) = gnat_aux_default;
}

/* Helper function to initialize the standard scalar types.

   If NAME is non-NULL, then it is used to initialize the type name.
   Note that NAME is not copied; it is required to have a lifetime at
   least as long as OBJFILE.  */

struct type *
init_type (enum type_code code, int length, int flags,
	   const char *name, struct objfile *objfile)
{
  struct type *type;

  type = alloc_type (objfile);
  TYPE_CODE (type) = code;
  TYPE_LENGTH (type) = length;

  gdb_assert (!(flags & (TYPE_FLAG_MIN - 1)));
  if (flags & TYPE_FLAG_UNSIGNED)
    TYPE_UNSIGNED (type) = 1;
  if (flags & TYPE_FLAG_NOSIGN)
    TYPE_NOSIGN (type) = 1;
  if (flags & TYPE_FLAG_STUB)
    TYPE_STUB (type) = 1;
  if (flags & TYPE_FLAG_TARGET_STUB)
    TYPE_TARGET_STUB (type) = 1;
  if (flags & TYPE_FLAG_STATIC)
    TYPE_STATIC (type) = 1;
  if (flags & TYPE_FLAG_PROTOTYPED)
    TYPE_PROTOTYPED (type) = 1;
  if (flags & TYPE_FLAG_INCOMPLETE)
    TYPE_INCOMPLETE (type) = 1;
  if (flags & TYPE_FLAG_VARARGS)
    TYPE_VARARGS (type) = 1;
  if (flags & TYPE_FLAG_VECTOR)
    TYPE_VECTOR (type) = 1;
  if (flags & TYPE_FLAG_STUB_SUPPORTED)
    TYPE_STUB_SUPPORTED (type) = 1;
  if (flags & TYPE_FLAG_FIXED_INSTANCE)
    TYPE_FIXED_INSTANCE (type) = 1;
  if (flags & TYPE_FLAG_GNU_IFUNC)
    TYPE_GNU_IFUNC (type) = 1;

  TYPE_NAME (type) = name;

  /* C++ fancies.  */

  if (name && strcmp (name, "char") == 0)
    TYPE_NOSIGN (type) = 1;

  switch (code)
    {
      case TYPE_CODE_STRUCT:
      case TYPE_CODE_UNION:
      case TYPE_CODE_NAMESPACE:
        INIT_CPLUS_SPECIFIC (type);
        break;
      case TYPE_CODE_FLT:
        TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_FLOATFORMAT;
        break;
      case TYPE_CODE_FUNC:
	INIT_FUNC_SPECIFIC (type);
        break;
    }
  return type;
}

/* Queries on types.  */

int
can_dereference (struct type *t)
{
  /* FIXME: Should we return true for references as well as
     pointers?  */
  CHECK_TYPEDEF (t);
  return
    (t != NULL
     && TYPE_CODE (t) == TYPE_CODE_PTR
     && TYPE_CODE (TYPE_TARGET_TYPE (t)) != TYPE_CODE_VOID);
}

int
is_integral_type (struct type *t)
{
  CHECK_TYPEDEF (t);
  return
    ((t != NULL)
     && ((TYPE_CODE (t) == TYPE_CODE_INT)
	 || (TYPE_CODE (t) == TYPE_CODE_ENUM)
	 || (TYPE_CODE (t) == TYPE_CODE_FLAGS)
	 || (TYPE_CODE (t) == TYPE_CODE_CHAR)
	 || (TYPE_CODE (t) == TYPE_CODE_RANGE)
	 || (TYPE_CODE (t) == TYPE_CODE_BOOL)));
}

/* Return true if TYPE is scalar.  */

static int
is_scalar_type (struct type *type)
{
  CHECK_TYPEDEF (type);

  switch (TYPE_CODE (type))
    {
    case TYPE_CODE_ARRAY:
    case TYPE_CODE_STRUCT:
    case TYPE_CODE_UNION:
    case TYPE_CODE_SET:
    case TYPE_CODE_STRING:
      return 0;
    default:
      return 1;
    }
}

/* Return true if T is scalar, or a composite type which in practice has
   the memory layout of a scalar type.  E.g., an array or struct with only
   one scalar element inside it, or a union with only scalar elements.  */

int
is_scalar_type_recursive (struct type *t)
{
  CHECK_TYPEDEF (t);

  if (is_scalar_type (t))
    return 1;
  /* Are we dealing with an array or string of known dimensions?  */
  else if ((TYPE_CODE (t) == TYPE_CODE_ARRAY
	    || TYPE_CODE (t) == TYPE_CODE_STRING) && TYPE_NFIELDS (t) == 1
	   && TYPE_CODE (TYPE_INDEX_TYPE (t)) == TYPE_CODE_RANGE)
    {
      LONGEST low_bound, high_bound;
      struct type *elt_type = check_typedef (TYPE_TARGET_TYPE (t));

      get_discrete_bounds (TYPE_INDEX_TYPE (t), &low_bound, &high_bound);

      return high_bound == low_bound && is_scalar_type_recursive (elt_type);
    }
  /* Are we dealing with a struct with one element?  */
  else if (TYPE_CODE (t) == TYPE_CODE_STRUCT && TYPE_NFIELDS (t) == 1)
    return is_scalar_type_recursive (TYPE_FIELD_TYPE (t, 0));
  else if (TYPE_CODE (t) == TYPE_CODE_UNION)
    {
      int i, n = TYPE_NFIELDS (t);

      /* If all elements of the union are scalar, then the union is scalar.  */
      for (i = 0; i < n; i++)
	if (!is_scalar_type_recursive (TYPE_FIELD_TYPE (t, i)))
	  return 0;

      return 1;
    }

  return 0;
}

/* A helper function which returns true if types A and B represent the
   "same" class type.  This is true if the types have the same main
   type, or the same name.  */

int
class_types_same_p (const struct type *a, const struct type *b)
{
  return (TYPE_MAIN_TYPE (a) == TYPE_MAIN_TYPE (b)
	  || (TYPE_NAME (a) && TYPE_NAME (b)
	      && !strcmp (TYPE_NAME (a), TYPE_NAME (b))));
}

/* If BASE is an ancestor of DCLASS return the distance between them.
   otherwise return -1;
   eg:

   class A {};
   class B: public A {};
   class C: public B {};
   class D: C {};

   distance_to_ancestor (A, A, 0) = 0
   distance_to_ancestor (A, B, 0) = 1
   distance_to_ancestor (A, C, 0) = 2
   distance_to_ancestor (A, D, 0) = 3

   If PUBLIC is 1 then only public ancestors are considered,
   and the function returns the distance only if BASE is a public ancestor
   of DCLASS.
   Eg:

   distance_to_ancestor (A, D, 1) = -1.  */

static int
distance_to_ancestor (struct type *base, struct type *dclass, int public)
{
  int i;
  int d;

  CHECK_TYPEDEF (base);
  CHECK_TYPEDEF (dclass);

  if (class_types_same_p (base, dclass))
    return 0;

  for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
    {
      if (public && ! BASETYPE_VIA_PUBLIC (dclass, i))
	continue;

      d = distance_to_ancestor (base, TYPE_BASECLASS (dclass, i), public);
      if (d >= 0)
	return 1 + d;
    }

  return -1;
}

/* Check whether BASE is an ancestor or base class or DCLASS
   Return 1 if so, and 0 if not.
   Note: If BASE and DCLASS are of the same type, this function
   will return 1. So for some class A, is_ancestor (A, A) will
   return 1.  */

int
is_ancestor (struct type *base, struct type *dclass)
{
  return distance_to_ancestor (base, dclass, 0) >= 0;
}

/* Like is_ancestor, but only returns true when BASE is a public
   ancestor of DCLASS.  */

int
is_public_ancestor (struct type *base, struct type *dclass)
{
  return distance_to_ancestor (base, dclass, 1) >= 0;
}

/* A helper function for is_unique_ancestor.  */

static int
is_unique_ancestor_worker (struct type *base, struct type *dclass,
			   int *offset,
			   const gdb_byte *valaddr, int embedded_offset,
			   CORE_ADDR address, struct value *val)
{
  int i, count = 0;

  CHECK_TYPEDEF (base);
  CHECK_TYPEDEF (dclass);

  for (i = 0; i < TYPE_N_BASECLASSES (dclass) && count < 2; ++i)
    {
      struct type *iter;
      int this_offset;

      iter = check_typedef (TYPE_BASECLASS (dclass, i));

      this_offset = baseclass_offset (dclass, i, valaddr, embedded_offset,
				      address, val);

      if (class_types_same_p (base, iter))
	{
	  /* If this is the first subclass, set *OFFSET and set count
	     to 1.  Otherwise, if this is at the same offset as
	     previous instances, do nothing.  Otherwise, increment
	     count.  */
	  if (*offset == -1)
	    {
	      *offset = this_offset;
	      count = 1;
	    }
	  else if (this_offset == *offset)
	    {
	      /* Nothing.  */
	    }
	  else
	    ++count;
	}
      else
	count += is_unique_ancestor_worker (base, iter, offset,
					    valaddr,
					    embedded_offset + this_offset,
					    address, val);
    }

  return count;
}

/* Like is_ancestor, but only returns true if BASE is a unique base
   class of the type of VAL.  */

int
is_unique_ancestor (struct type *base, struct value *val)
{
  int offset = -1;

  return is_unique_ancestor_worker (base, value_type (val), &offset,
				    value_contents_for_printing (val),
				    value_embedded_offset (val),
				    value_address (val), val) == 1;
}


/* Overload resolution.  */

/* Return the sum of the rank of A with the rank of B.  */

struct rank
sum_ranks (struct rank a, struct rank b)
{
  struct rank c;
  c.rank = a.rank + b.rank;
  c.subrank = a.subrank + b.subrank;
  return c;
}

/* Compare rank A and B and return:
   0 if a = b
   1 if a is better than b
  -1 if b is better than a.  */

int
compare_ranks (struct rank a, struct rank b)
{
  if (a.rank == b.rank)
    {
      if (a.subrank == b.subrank)
	return 0;
      if (a.subrank < b.subrank)
	return 1;
      if (a.subrank > b.subrank)
	return -1;
    }

  if (a.rank < b.rank)
    return 1;

  /* a.rank > b.rank */
  return -1;
}

/* Functions for overload resolution begin here.  */

/* Compare two badness vectors A and B and return the result.
   0 => A and B are identical
   1 => A and B are incomparable
   2 => A is better than B
   3 => A is worse than B  */

int
compare_badness (struct badness_vector *a, struct badness_vector *b)
{
  int i;
  int tmp;
  short found_pos = 0;		/* any positives in c? */
  short found_neg = 0;		/* any negatives in c? */

  /* differing lengths => incomparable */
  if (a->length != b->length)
    return 1;

  /* Subtract b from a */
  for (i = 0; i < a->length; i++)
    {
      tmp = compare_ranks (b->rank[i], a->rank[i]);
      if (tmp > 0)
	found_pos = 1;
      else if (tmp < 0)
	found_neg = 1;
    }

  if (found_pos)
    {
      if (found_neg)
	return 1;		/* incomparable */
      else
	return 3;		/* A > B */
    }
  else
    /* no positives */
    {
      if (found_neg)
	return 2;		/* A < B */
      else
	return 0;		/* A == B */
    }
}

/* Rank a function by comparing its parameter types (PARMS, length
   NPARMS), to the types of an argument list (ARGS, length NARGS).
   Return a pointer to a badness vector.  This has NARGS + 1
   entries.  */

struct badness_vector *
rank_function (struct type **parms, int nparms, 
	       struct value **args, int nargs)
{
  int i;
  struct badness_vector *bv;
  int min_len = nparms < nargs ? nparms : nargs;

  bv = xmalloc (sizeof (struct badness_vector));
  bv->length = nargs + 1;	/* add 1 for the length-match rank.  */
  bv->rank = xmalloc ((nargs + 1) * sizeof (int));

  /* First compare the lengths of the supplied lists.
     If there is a mismatch, set it to a high value.  */

  /* pai/1997-06-03 FIXME: when we have debug info about default
     arguments and ellipsis parameter lists, we should consider those
     and rank the length-match more finely.  */

  LENGTH_MATCH (bv) = (nargs != nparms)
		      ? LENGTH_MISMATCH_BADNESS
		      : EXACT_MATCH_BADNESS;

  /* Now rank all the parameters of the candidate function.  */
  for (i = 1; i <= min_len; i++)
    bv->rank[i] = rank_one_type (parms[i - 1], value_type (args[i - 1]),
				 args[i - 1]);

  /* If more arguments than parameters, add dummy entries.  */
  for (i = min_len + 1; i <= nargs; i++)
    bv->rank[i] = TOO_FEW_PARAMS_BADNESS;

  return bv;
}

/* Compare the names of two integer types, assuming that any sign
   qualifiers have been checked already.  We do it this way because
   there may be an "int" in the name of one of the types.  */

static int
integer_types_same_name_p (const char *first, const char *second)
{
  int first_p, second_p;

  /* If both are shorts, return 1; if neither is a short, keep
     checking.  */
  first_p = (strstr (first, "short") != NULL);
  second_p = (strstr (second, "short") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* Likewise for long.  */
  first_p = (strstr (first, "long") != NULL);
  second_p = (strstr (second, "long") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* Likewise for char.  */
  first_p = (strstr (first, "char") != NULL);
  second_p = (strstr (second, "char") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* They must both be ints.  */
  return 1;
}

/* Compares type A to type B returns 1 if the represent the same type
   0 otherwise.  */

int
types_equal (struct type *a, struct type *b)
{
  /* Identical type pointers.  */
  /* However, this still doesn't catch all cases of same type for b
     and a.  The reason is that builtin types are different from
     the same ones constructed from the object.  */
  if (a == b)
    return 1;

  /* Resolve typedefs */
  if (TYPE_CODE (a) == TYPE_CODE_TYPEDEF)
    a = check_typedef (a);
  if (TYPE_CODE (b) == TYPE_CODE_TYPEDEF)
    b = check_typedef (b);

  /* If after resolving typedefs a and b are not of the same type
     code then they are not equal.  */
  if (TYPE_CODE (a) != TYPE_CODE (b))
    return 0;

  /* If a and b are both pointers types or both reference types then
     they are equal of the same type iff the objects they refer to are
     of the same type.  */
  if (TYPE_CODE (a) == TYPE_CODE_PTR
      || TYPE_CODE (a) == TYPE_CODE_REF)
    return types_equal (TYPE_TARGET_TYPE (a),
                        TYPE_TARGET_TYPE (b));

  /* Well, damnit, if the names are exactly the same, I'll say they
     are exactly the same.  This happens when we generate method
     stubs.  The types won't point to the same address, but they
     really are the same.  */

  if (TYPE_NAME (a) && TYPE_NAME (b)
      && strcmp (TYPE_NAME (a), TYPE_NAME (b)) == 0)
    return 1;

  /* Check if identical after resolving typedefs.  */
  if (a == b)
    return 1;

  /* Two function types are equal if their argument and return types
     are equal.  */
  if (TYPE_CODE (a) == TYPE_CODE_FUNC)
    {
      int i;

      if (TYPE_NFIELDS (a) != TYPE_NFIELDS (b))
	return 0;
      
      if (!types_equal (TYPE_TARGET_TYPE (a), TYPE_TARGET_TYPE (b)))
	return 0;

      for (i = 0; i < TYPE_NFIELDS (a); ++i)
	if (!types_equal (TYPE_FIELD_TYPE (a, i), TYPE_FIELD_TYPE (b, i)))
	  return 0;

      return 1;
    }

  return 0;
}

/* Compare one type (PARM) for compatibility with another (ARG).
 * PARM is intended to be the parameter type of a function; and
 * ARG is the supplied argument's type.  This function tests if
 * the latter can be converted to the former.
 * VALUE is the argument's value or NULL if none (or called recursively)
 *
 * Return 0 if they are identical types;
 * Otherwise, return an integer which corresponds to how compatible
 * PARM is to ARG.  The higher the return value, the worse the match.
 * Generally the "bad" conversions are all uniformly assigned a 100.  */

struct rank
rank_one_type (struct type *parm, struct type *arg, struct value *value)
{
  struct rank rank = {0,0};

  if (types_equal (parm, arg))
    return EXACT_MATCH_BADNESS;

  /* Resolve typedefs */
  if (TYPE_CODE (parm) == TYPE_CODE_TYPEDEF)
    parm = check_typedef (parm);
  if (TYPE_CODE (arg) == TYPE_CODE_TYPEDEF)
    arg = check_typedef (arg);

  /* See through references, since we can almost make non-references
     references.  */
  if (TYPE_CODE (arg) == TYPE_CODE_REF)
    return (sum_ranks (rank_one_type (parm, TYPE_TARGET_TYPE (arg), NULL),
                       REFERENCE_CONVERSION_BADNESS));
  if (TYPE_CODE (parm) == TYPE_CODE_REF)
    return (sum_ranks (rank_one_type (TYPE_TARGET_TYPE (parm), arg, NULL),
                       REFERENCE_CONVERSION_BADNESS));
  if (overload_debug)
  /* Debugging only.  */
    fprintf_filtered (gdb_stderr, 
		      "------ Arg is %s [%d], parm is %s [%d]\n",
		      TYPE_NAME (arg), TYPE_CODE (arg), 
		      TYPE_NAME (parm), TYPE_CODE (parm));

  /* x -> y means arg of type x being supplied for parameter of type y.  */

  switch (TYPE_CODE (parm))
    {
    case TYPE_CODE_PTR:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_PTR:

	  /* Allowed pointer conversions are:
	     (a) pointer to void-pointer conversion.  */
	  if (TYPE_CODE (TYPE_TARGET_TYPE (parm)) == TYPE_CODE_VOID)
	    return VOID_PTR_CONVERSION_BADNESS;

	  /* (b) pointer to ancestor-pointer conversion.  */
	  rank.subrank = distance_to_ancestor (TYPE_TARGET_TYPE (parm),
	                                       TYPE_TARGET_TYPE (arg),
	                                       0);
	  if (rank.subrank >= 0)
	    return sum_ranks (BASE_PTR_CONVERSION_BADNESS, rank);

	  return INCOMPATIBLE_TYPE_BADNESS;
	case TYPE_CODE_ARRAY:
	  if (types_equal (TYPE_TARGET_TYPE (parm),
	                   TYPE_TARGET_TYPE (arg)))
	    return EXACT_MATCH_BADNESS;
	  return INCOMPATIBLE_TYPE_BADNESS;
	case TYPE_CODE_FUNC:
	  return rank_one_type (TYPE_TARGET_TYPE (parm), arg, NULL);
	case TYPE_CODE_INT:
	  if (value != NULL && TYPE_CODE (value_type (value)) == TYPE_CODE_INT)
	    {
	      if (value_as_long (value) == 0)
		{
		  /* Null pointer conversion: allow it to be cast to a pointer.
		     [4.10.1 of C++ standard draft n3290]  */
		  return NULL_POINTER_CONVERSION_BADNESS;
		}
	      else
		{
		  /* If type checking is disabled, allow the conversion.  */
		  if (!strict_type_checking)
		    return NS_INTEGER_POINTER_CONVERSION_BADNESS;
		}
	    }
	  /* fall through  */
	case TYPE_CODE_ENUM:
	case TYPE_CODE_FLAGS:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
    case TYPE_CODE_ARRAY:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_PTR:
	case TYPE_CODE_ARRAY:
	  return rank_one_type (TYPE_TARGET_TYPE (parm), 
				TYPE_TARGET_TYPE (arg), NULL);
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
    case TYPE_CODE_FUNC:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_PTR:	/* funcptr -> func */
	  return rank_one_type (parm, TYPE_TARGET_TYPE (arg), NULL);
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
    case TYPE_CODE_INT:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_INT:
	  if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))
	    {
	      /* Deal with signed, unsigned, and plain chars and
	         signed and unsigned ints.  */
	      if (TYPE_NOSIGN (parm))
		{
		  /* This case only for character types.  */
		  if (TYPE_NOSIGN (arg))
		    return EXACT_MATCH_BADNESS;	/* plain char -> plain char */
		  else		/* signed/unsigned char -> plain char */
		    return INTEGER_CONVERSION_BADNESS;
		}
	      else if (TYPE_UNSIGNED (parm))
		{
		  if (TYPE_UNSIGNED (arg))
		    {
		      /* unsigned int -> unsigned int, or 
			 unsigned long -> unsigned long */
		      if (integer_types_same_name_p (TYPE_NAME (parm), 
						     TYPE_NAME (arg)))
			return EXACT_MATCH_BADNESS;
		      else if (integer_types_same_name_p (TYPE_NAME (arg), 
							  "int")
			       && integer_types_same_name_p (TYPE_NAME (parm),
							     "long"))
			/* unsigned int -> unsigned long */
			return INTEGER_PROMOTION_BADNESS;
		      else
			/* unsigned long -> unsigned int */
			return INTEGER_CONVERSION_BADNESS;
		    }
		  else
		    {
		      if (integer_types_same_name_p (TYPE_NAME (arg), 
						     "long")
			  && integer_types_same_name_p (TYPE_NAME (parm), 
							"int"))
			/* signed long -> unsigned int */
			return INTEGER_CONVERSION_BADNESS;
		      else
			/* signed int/long -> unsigned int/long */
			return INTEGER_CONVERSION_BADNESS;
		    }
		}
	      else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))
		{
		  if (integer_types_same_name_p (TYPE_NAME (parm), 
						 TYPE_NAME (arg)))
		    return EXACT_MATCH_BADNESS;
		  else if (integer_types_same_name_p (TYPE_NAME (arg), 
						      "int")
			   && integer_types_same_name_p (TYPE_NAME (parm), 
							 "long"))
		    return INTEGER_PROMOTION_BADNESS;
		  else
		    return INTEGER_CONVERSION_BADNESS;
		}
	      else
		return INTEGER_CONVERSION_BADNESS;
	    }
	  else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
	    return INTEGER_PROMOTION_BADNESS;
	  else
	    return INTEGER_CONVERSION_BADNESS;
	case TYPE_CODE_ENUM:
	case TYPE_CODE_FLAGS:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	  return INTEGER_PROMOTION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	case TYPE_CODE_PTR:
	  return NS_POINTER_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_ENUM:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_INT:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	  return INTEGER_CONVERSION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_CHAR:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	  return INTEGER_CONVERSION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	case TYPE_CODE_INT:
	  if (TYPE_LENGTH (arg) > TYPE_LENGTH (parm))
	    return INTEGER_CONVERSION_BADNESS;
	  else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
	    return INTEGER_PROMOTION_BADNESS;
	  /* >>> !! else fall through !! <<< */
	case TYPE_CODE_CHAR:
	  /* Deal with signed, unsigned, and plain chars for C++ and
	     with int cases falling through from previous case.  */
	  if (TYPE_NOSIGN (parm))
	    {
	      if (TYPE_NOSIGN (arg))
		return EXACT_MATCH_BADNESS;
	      else
		return INTEGER_CONVERSION_BADNESS;
	    }
	  else if (TYPE_UNSIGNED (parm))
	    {
	      if (TYPE_UNSIGNED (arg))
		return EXACT_MATCH_BADNESS;
	      else
		return INTEGER_PROMOTION_BADNESS;
	    }
	  else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))
	    return EXACT_MATCH_BADNESS;
	  else
	    return INTEGER_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_RANGE:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_INT:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	  return INTEGER_CONVERSION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_BOOL:
      switch (TYPE_CODE (arg))
	{
	  /* n3290 draft, section 4.12.1 (conv.bool):

	     "A prvalue of arithmetic, unscoped enumeration, pointer, or
	     pointer to member type can be converted to a prvalue of type
	     bool.  A zero value, null pointer value, or null member pointer
	     value is converted to false; any other value is converted to
	     true.  A prvalue of type std::nullptr_t can be converted to a
	     prvalue of type bool; the resulting value is false."  */
	case TYPE_CODE_INT:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_ENUM:
	case TYPE_CODE_FLT:
	case TYPE_CODE_MEMBERPTR:
	case TYPE_CODE_PTR:
	  return BOOL_CONVERSION_BADNESS;
	case TYPE_CODE_RANGE:
	  return INCOMPATIBLE_TYPE_BADNESS;
	case TYPE_CODE_BOOL:
	  return EXACT_MATCH_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_FLT:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_FLT:
	  if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
	    return FLOAT_PROMOTION_BADNESS;
	  else if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))
	    return EXACT_MATCH_BADNESS;
	  else
	    return FLOAT_CONVERSION_BADNESS;
	case TYPE_CODE_INT:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_CHAR:
	  return INT_FLOAT_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_COMPLEX:
      switch (TYPE_CODE (arg))
	{		/* Strictly not needed for C++, but...  */
	case TYPE_CODE_FLT:
	  return FLOAT_PROMOTION_BADNESS;
	case TYPE_CODE_COMPLEX:
	  return EXACT_MATCH_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_STRUCT:
      /* currently same as TYPE_CODE_CLASS.  */
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_STRUCT:
	  /* Check for derivation */
	  rank.subrank = distance_to_ancestor (parm, arg, 0);
	  if (rank.subrank >= 0)
	    return sum_ranks (BASE_CONVERSION_BADNESS, rank);
	  /* else fall through */
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_UNION:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_UNION:
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_MEMBERPTR:
      switch (TYPE_CODE (arg))
	{
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_METHOD:
      switch (TYPE_CODE (arg))
	{

	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_REF:
      switch (TYPE_CODE (arg))
	{

	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}

      break;
    case TYPE_CODE_SET:
      switch (TYPE_CODE (arg))
	{
	  /* Not in C++ */
	case TYPE_CODE_SET:
	  return rank_one_type (TYPE_FIELD_TYPE (parm, 0), 
				TYPE_FIELD_TYPE (arg, 0), NULL);
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_VOID:
    default:
      return INCOMPATIBLE_TYPE_BADNESS;
    }				/* switch (TYPE_CODE (arg)) */
}

/* End of functions for overload resolution.  */

/* Routines to pretty-print types.  */

static void
print_bit_vector (B_TYPE *bits, int nbits)
{
  int bitno;

  for (bitno = 0; bitno < nbits; bitno++)
    {
      if ((bitno % 8) == 0)
	{
	  puts_filtered (" ");
	}
      if (B_TST (bits, bitno))
	printf_filtered (("1"));
      else
	printf_filtered (("0"));
    }
}

/* Note the first arg should be the "this" pointer, we may not want to
   include it since we may get into a infinitely recursive
   situation.  */

static void
print_arg_types (struct field *args, int nargs, int spaces)
{
  if (args != NULL)
    {
      int i;

      for (i = 0; i < nargs; i++)
	recursive_dump_type (args[i].type, spaces + 2);
    }
}

int
field_is_static (struct field *f)
{
  /* "static" fields are the fields whose location is not relative
     to the address of the enclosing struct.  It would be nice to
     have a dedicated flag that would be set for static fields when
     the type is being created.  But in practice, checking the field
     loc_kind should give us an accurate answer.  */
  return (FIELD_LOC_KIND (*f) == FIELD_LOC_KIND_PHYSNAME
	  || FIELD_LOC_KIND (*f) == FIELD_LOC_KIND_PHYSADDR);
}

static void
dump_fn_fieldlists (struct type *type, int spaces)
{
  int method_idx;
  int overload_idx;
  struct fn_field *f;

  printfi_filtered (spaces, "fn_fieldlists ");
  gdb_print_host_address (TYPE_FN_FIELDLISTS (type), gdb_stdout);
  printf_filtered ("\n");
  for (method_idx = 0; method_idx < TYPE_NFN_FIELDS (type); method_idx++)
    {
      f = TYPE_FN_FIELDLIST1 (type, method_idx);
      printfi_filtered (spaces + 2, "[%d] name '%s' (",
			method_idx,
			TYPE_FN_FIELDLIST_NAME (type, method_idx));
      gdb_print_host_address (TYPE_FN_FIELDLIST_NAME (type, method_idx),
			      gdb_stdout);
      printf_filtered (_(") length %d\n"),
		       TYPE_FN_FIELDLIST_LENGTH (type, method_idx));
      for (overload_idx = 0;
	   overload_idx < TYPE_FN_FIELDLIST_LENGTH (type, method_idx);
	   overload_idx++)
	{
	  printfi_filtered (spaces + 4, "[%d] physname '%s' (",
			    overload_idx,
			    TYPE_FN_FIELD_PHYSNAME (f, overload_idx));
	  gdb_print_host_address (TYPE_FN_FIELD_PHYSNAME (f, overload_idx),
				  gdb_stdout);
	  printf_filtered (")\n");
	  printfi_filtered (spaces + 8, "type ");
	  gdb_print_host_address (TYPE_FN_FIELD_TYPE (f, overload_idx), 
				  gdb_stdout);
	  printf_filtered ("\n");

	  recursive_dump_type (TYPE_FN_FIELD_TYPE (f, overload_idx),
			       spaces + 8 + 2);

	  printfi_filtered (spaces + 8, "args ");
	  gdb_print_host_address (TYPE_FN_FIELD_ARGS (f, overload_idx), 
				  gdb_stdout);
	  printf_filtered ("\n");

	  print_arg_types (TYPE_FN_FIELD_ARGS (f, overload_idx),
			   TYPE_NFIELDS (TYPE_FN_FIELD_TYPE (f, 
							     overload_idx)),
			   spaces);
	  printfi_filtered (spaces + 8, "fcontext ");
	  gdb_print_host_address (TYPE_FN_FIELD_FCONTEXT (f, overload_idx),
				  gdb_stdout);
	  printf_filtered ("\n");

	  printfi_filtered (spaces + 8, "is_const %d\n",
			    TYPE_FN_FIELD_CONST (f, overload_idx));
	  printfi_filtered (spaces + 8, "is_volatile %d\n",
			    TYPE_FN_FIELD_VOLATILE (f, overload_idx));
	  printfi_filtered (spaces + 8, "is_private %d\n",
			    TYPE_FN_FIELD_PRIVATE (f, overload_idx));
	  printfi_filtered (spaces + 8, "is_protected %d\n",
			    TYPE_FN_FIELD_PROTECTED (f, overload_idx));
	  printfi_filtered (spaces + 8, "is_stub %d\n",
			    TYPE_FN_FIELD_STUB (f, overload_idx));
	  printfi_filtered (spaces + 8, "voffset %u\n",
			    TYPE_FN_FIELD_VOFFSET (f, overload_idx));
	}
    }
}

static void
print_cplus_stuff (struct type *type, int spaces)
{
  printfi_filtered (spaces, "n_baseclasses %d\n",
		    TYPE_N_BASECLASSES (type));
  printfi_filtered (spaces, "nfn_fields %d\n",
		    TYPE_NFN_FIELDS (type));
  if (TYPE_N_BASECLASSES (type) > 0)
    {
      printfi_filtered (spaces, "virtual_field_bits (%d bits at *",
			TYPE_N_BASECLASSES (type));
      gdb_print_host_address (TYPE_FIELD_VIRTUAL_BITS (type), 
			      gdb_stdout);
      printf_filtered (")");

      print_bit_vector (TYPE_FIELD_VIRTUAL_BITS (type),
			TYPE_N_BASECLASSES (type));
      puts_filtered ("\n");
    }
  if (TYPE_NFIELDS (type) > 0)
    {
      if (TYPE_FIELD_PRIVATE_BITS (type) != NULL)
	{
	  printfi_filtered (spaces, 
			    "private_field_bits (%d bits at *",
			    TYPE_NFIELDS (type));
	  gdb_print_host_address (TYPE_FIELD_PRIVATE_BITS (type), 
				  gdb_stdout);
	  printf_filtered (")");
	  print_bit_vector (TYPE_FIELD_PRIVATE_BITS (type),
			    TYPE_NFIELDS (type));
	  puts_filtered ("\n");
	}
      if (TYPE_FIELD_PROTECTED_BITS (type) != NULL)
	{
	  printfi_filtered (spaces, 
			    "protected_field_bits (%d bits at *",
			    TYPE_NFIELDS (type));
	  gdb_print_host_address (TYPE_FIELD_PROTECTED_BITS (type), 
				  gdb_stdout);
	  printf_filtered (")");
	  print_bit_vector (TYPE_FIELD_PROTECTED_BITS (type),
			    TYPE_NFIELDS (type));
	  puts_filtered ("\n");
	}
    }
  if (TYPE_NFN_FIELDS (type) > 0)
    {
      dump_fn_fieldlists (type, spaces);
    }
}

/* Print the contents of the TYPE's type_specific union, assuming that
   its type-specific kind is TYPE_SPECIFIC_GNAT_STUFF.  */

static void
print_gnat_stuff (struct type *type, int spaces)
{
  struct type *descriptive_type = TYPE_DESCRIPTIVE_TYPE (type);

  recursive_dump_type (descriptive_type, spaces + 2);
}

static struct obstack dont_print_type_obstack;

void
recursive_dump_type (struct type *type, int spaces)
{
  int idx;

  if (spaces == 0)
    obstack_begin (&dont_print_type_obstack, 0);

  if (TYPE_NFIELDS (type) > 0
      || (HAVE_CPLUS_STRUCT (type) && TYPE_NFN_FIELDS (type) > 0))
    {
      struct type **first_dont_print
	= (struct type **) obstack_base (&dont_print_type_obstack);

      int i = (struct type **) 
	obstack_next_free (&dont_print_type_obstack) - first_dont_print;

      while (--i >= 0)
	{
	  if (type == first_dont_print[i])
	    {
	      printfi_filtered (spaces, "type node ");
	      gdb_print_host_address (type, gdb_stdout);
	      printf_filtered (_(" <same as already seen type>\n"));
	      return;
	    }
	}

      obstack_ptr_grow (&dont_print_type_obstack, type);
    }

  printfi_filtered (spaces, "type node ");
  gdb_print_host_address (type, gdb_stdout);
  printf_filtered ("\n");
  printfi_filtered (spaces, "name '%s' (",
		    TYPE_NAME (type) ? TYPE_NAME (type) : "<NULL>");
  gdb_print_host_address (TYPE_NAME (type), gdb_stdout);
  printf_filtered (")\n");
  printfi_filtered (spaces, "tagname '%s' (",
		    TYPE_TAG_NAME (type) ? TYPE_TAG_NAME (type) : "<NULL>");
  gdb_print_host_address (TYPE_TAG_NAME (type), gdb_stdout);
  printf_filtered (")\n");
  printfi_filtered (spaces, "code 0x%x ", TYPE_CODE (type));
  switch (TYPE_CODE (type))
    {
    case TYPE_CODE_UNDEF:
      printf_filtered ("(TYPE_CODE_UNDEF)");
      break;
    case TYPE_CODE_PTR:
      printf_filtered ("(TYPE_CODE_PTR)");
      break;
    case TYPE_CODE_ARRAY:
      printf_filtered ("(TYPE_CODE_ARRAY)");
      break;
    case TYPE_CODE_STRUCT:
      printf_filtered ("(TYPE_CODE_STRUCT)");
      break;
    case TYPE_CODE_UNION:
      printf_filtered ("(TYPE_CODE_UNION)");
      break;
    case TYPE_CODE_ENUM:
      printf_filtered ("(TYPE_CODE_ENUM)");
      break;
    case TYPE_CODE_FLAGS:
      printf_filtered ("(TYPE_CODE_FLAGS)");
      break;
    case TYPE_CODE_FUNC:
      printf_filtered ("(TYPE_CODE_FUNC)");
      break;
    case TYPE_CODE_INT:
      printf_filtered ("(TYPE_CODE_INT)");
      break;
    case TYPE_CODE_FLT:
      printf_filtered ("(TYPE_CODE_FLT)");
      break;
    case TYPE_CODE_VOID:
      printf_filtered ("(TYPE_CODE_VOID)");
      break;
    case TYPE_CODE_SET:
      printf_filtered ("(TYPE_CODE_SET)");
      break;
    case TYPE_CODE_RANGE:
      printf_filtered ("(TYPE_CODE_RANGE)");
      break;
    case TYPE_CODE_STRING:
      printf_filtered ("(TYPE_CODE_STRING)");
      break;
    case TYPE_CODE_ERROR:
      printf_filtered ("(TYPE_CODE_ERROR)");
      break;
    case TYPE_CODE_MEMBERPTR:
      printf_filtered ("(TYPE_CODE_MEMBERPTR)");
      break;
    case TYPE_CODE_METHODPTR:
      printf_filtered ("(TYPE_CODE_METHODPTR)");
      break;
    case TYPE_CODE_METHOD:
      printf_filtered ("(TYPE_CODE_METHOD)");
      break;
    case TYPE_CODE_REF:
      printf_filtered ("(TYPE_CODE_REF)");
      break;
    case TYPE_CODE_CHAR:
      printf_filtered ("(TYPE_CODE_CHAR)");
      break;
    case TYPE_CODE_BOOL:
      printf_filtered ("(TYPE_CODE_BOOL)");
      break;
    case TYPE_CODE_COMPLEX:
      printf_filtered ("(TYPE_CODE_COMPLEX)");
      break;
    case TYPE_CODE_TYPEDEF:
      printf_filtered ("(TYPE_CODE_TYPEDEF)");
      break;
    case TYPE_CODE_NAMESPACE:
      printf_filtered ("(TYPE_CODE_NAMESPACE)");
      break;
    default:
      printf_filtered ("(UNKNOWN TYPE CODE)");
      break;
    }
  puts_filtered ("\n");
  printfi_filtered (spaces, "length %d\n", TYPE_LENGTH (type));
  if (TYPE_OBJFILE_OWNED (type))
    {
      printfi_filtered (spaces, "objfile ");
      gdb_print_host_address (TYPE_OWNER (type).objfile, gdb_stdout);
    }
  else
    {
      printfi_filtered (spaces, "gdbarch ");
      gdb_print_host_address (TYPE_OWNER (type).gdbarch, gdb_stdout);
    }
  printf_filtered ("\n");
  printfi_filtered (spaces, "target_type ");
  gdb_print_host_address (TYPE_TARGET_TYPE (type), gdb_stdout);
  printf_filtered ("\n");
  if (TYPE_TARGET_TYPE (type) != NULL)
    {
      recursive_dump_type (TYPE_TARGET_TYPE (type), spaces + 2);
    }
  printfi_filtered (spaces, "pointer_type ");
  gdb_print_host_address (TYPE_POINTER_TYPE (type), gdb_stdout);
  printf_filtered ("\n");
  printfi_filtered (spaces, "reference_type ");
  gdb_print_host_address (TYPE_REFERENCE_TYPE (type), gdb_stdout);
  printf_filtered ("\n");
  printfi_filtered (spaces, "type_chain ");
  gdb_print_host_address (TYPE_CHAIN (type), gdb_stdout);
  printf_filtered ("\n");
  printfi_filtered (spaces, "instance_flags 0x%x", 
		    TYPE_INSTANCE_FLAGS (type));
  if (TYPE_CONST (type))
    {
      puts_filtered (" TYPE_FLAG_CONST");
    }
  if (TYPE_VOLATILE (type))
    {
      puts_filtered (" TYPE_FLAG_VOLATILE");
    }
  if (TYPE_CODE_SPACE (type))
    {
      puts_filtered (" TYPE_FLAG_CODE_SPACE");
    }
  if (TYPE_DATA_SPACE (type))
    {
      puts_filtered (" TYPE_FLAG_DATA_SPACE");
    }
  if (TYPE_ADDRESS_CLASS_1 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_1");
    }
  if (TYPE_ADDRESS_CLASS_2 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_2");
    }
  if (TYPE_RESTRICT (type))
    {
      puts_filtered (" TYPE_FLAG_RESTRICT");
    }
  puts_filtered ("\n");

  printfi_filtered (spaces, "flags");
  if (TYPE_UNSIGNED (type))
    {
      puts_filtered (" TYPE_FLAG_UNSIGNED");
    }
  if (TYPE_NOSIGN (type))
    {
      puts_filtered (" TYPE_FLAG_NOSIGN");
    }
  if (TYPE_STUB (type))
    {
      puts_filtered (" TYPE_FLAG_STUB");
    }
  if (TYPE_TARGET_STUB (type))
    {
      puts_filtered (" TYPE_FLAG_TARGET_STUB");
    }
  if (TYPE_STATIC (type))
    {
      puts_filtered (" TYPE_FLAG_STATIC");
    }
  if (TYPE_PROTOTYPED (type))
    {
      puts_filtered (" TYPE_FLAG_PROTOTYPED");
    }
  if (TYPE_INCOMPLETE (type))
    {
      puts_filtered (" TYPE_FLAG_INCOMPLETE");
    }
  if (TYPE_VARARGS (type))
    {
      puts_filtered (" TYPE_FLAG_VARARGS");
    }
  /* This is used for things like AltiVec registers on ppc.  Gcc emits
     an attribute for the array type, which tells whether or not we
     have a vector, instead of a regular array.  */
  if (TYPE_VECTOR (type))
    {
      puts_filtered (" TYPE_FLAG_VECTOR");
    }
  if (TYPE_FIXED_INSTANCE (type))
    {
      puts_filtered (" TYPE_FIXED_INSTANCE");
    }
  if (TYPE_STUB_SUPPORTED (type))
    {
      puts_filtered (" TYPE_STUB_SUPPORTED");
    }
  if (TYPE_NOTTEXT (type))
    {
      puts_filtered (" TYPE_NOTTEXT");
    }
  puts_filtered ("\n");
  printfi_filtered (spaces, "nfields %d ", TYPE_NFIELDS (type));
  gdb_print_host_address (TYPE_FIELDS (type), gdb_stdout);
  puts_filtered ("\n");
  for (idx = 0; idx < TYPE_NFIELDS (type); idx++)
    {
      if (TYPE_CODE (type) == TYPE_CODE_ENUM)
	printfi_filtered (spaces + 2,
			  "[%d] enumval %s type ",
			  idx, plongest (TYPE_FIELD_ENUMVAL (type, idx)));
      else
	printfi_filtered (spaces + 2,
			  "[%d] bitpos %d bitsize %d type ",
			  idx, TYPE_FIELD_BITPOS (type, idx),
			  TYPE_FIELD_BITSIZE (type, idx));
      gdb_print_host_address (TYPE_FIELD_TYPE (type, idx), gdb_stdout);
      printf_filtered (" name '%s' (",
		       TYPE_FIELD_NAME (type, idx) != NULL
		       ? TYPE_FIELD_NAME (type, idx)
		       : "<NULL>");
      gdb_print_host_address (TYPE_FIELD_NAME (type, idx), gdb_stdout);
      printf_filtered (")\n");
      if (TYPE_FIELD_TYPE (type, idx) != NULL)
	{
	  recursive_dump_type (TYPE_FIELD_TYPE (type, idx), spaces + 4);
	}
    }
  if (TYPE_CODE (type) == TYPE_CODE_RANGE)
    {
      printfi_filtered (spaces, "low %s%s  high %s%s\n",
			plongest (TYPE_LOW_BOUND (type)), 
			TYPE_LOW_BOUND_UNDEFINED (type) ? " (undefined)" : "",
			plongest (TYPE_HIGH_BOUND (type)),
			TYPE_HIGH_BOUND_UNDEFINED (type) 
			? " (undefined)" : "");
    }
  printfi_filtered (spaces, "vptr_basetype ");
  gdb_print_host_address (TYPE_VPTR_BASETYPE (type), gdb_stdout);
  puts_filtered ("\n");
  if (TYPE_VPTR_BASETYPE (type) != NULL)
    {
      recursive_dump_type (TYPE_VPTR_BASETYPE (type), spaces + 2);
    }
  printfi_filtered (spaces, "vptr_fieldno %d\n", 
		    TYPE_VPTR_FIELDNO (type));

  switch (TYPE_SPECIFIC_FIELD (type))
    {
      case TYPE_SPECIFIC_CPLUS_STUFF:
	printfi_filtered (spaces, "cplus_stuff ");
	gdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), 
				gdb_stdout);
	puts_filtered ("\n");
	print_cplus_stuff (type, spaces);
	break;

      case TYPE_SPECIFIC_GNAT_STUFF:
	printfi_filtered (spaces, "gnat_stuff ");
	gdb_print_host_address (TYPE_GNAT_SPECIFIC (type), gdb_stdout);
	puts_filtered ("\n");
	print_gnat_stuff (type, spaces);
	break;

      case TYPE_SPECIFIC_FLOATFORMAT:
	printfi_filtered (spaces, "floatformat ");
	if (TYPE_FLOATFORMAT (type) == NULL)
	  puts_filtered ("(null)");
	else
	  {
	    puts_filtered ("{ ");
	    if (TYPE_FLOATFORMAT (type)[0] == NULL
		|| TYPE_FLOATFORMAT (type)[0]->name == NULL)
	      puts_filtered ("(null)");
	    else
	      puts_filtered (TYPE_FLOATFORMAT (type)[0]->name);

	    puts_filtered (", ");
	    if (TYPE_FLOATFORMAT (type)[1] == NULL
		|| TYPE_FLOATFORMAT (type)[1]->name == NULL)
	      puts_filtered ("(null)");
	    else
	      puts_filtered (TYPE_FLOATFORMAT (type)[1]->name);

	    puts_filtered (" }");
	  }
	puts_filtered ("\n");
	break;

      case TYPE_SPECIFIC_FUNC:
	printfi_filtered (spaces, "calling_convention %d\n",
                          TYPE_CALLING_CONVENTION (type));
	/* tail_call_list is not printed.  */
	break;
    }

  if (spaces == 0)
    obstack_free (&dont_print_type_obstack, NULL);
}

/* Trivial helpers for the libiberty hash table, for mapping one
   type to another.  */

struct type_pair
{
  struct type *old, *new;
};

static hashval_t
type_pair_hash (const void *item)
{
  const struct type_pair *pair = item;

  return htab_hash_pointer (pair->old);
}

static int
type_pair_eq (const void *item_lhs, const void *item_rhs)
{
  const struct type_pair *lhs = item_lhs, *rhs = item_rhs;

  return lhs->old == rhs->old;
}

/* Allocate the hash table used by copy_type_recursive to walk
   types without duplicates.  We use OBJFILE's obstack, because
   OBJFILE is about to be deleted.  */

htab_t
create_copied_types_hash (struct objfile *objfile)
{
  return htab_create_alloc_ex (1, type_pair_hash, type_pair_eq,
			       NULL, &objfile->objfile_obstack,
			       hashtab_obstack_allocate,
			       dummy_obstack_deallocate);
}

/* Recursively copy (deep copy) TYPE, if it is associated with
   OBJFILE.  Return a new type allocated using malloc, a saved type if
   we have already visited TYPE (using COPIED_TYPES), or TYPE if it is
   not associated with OBJFILE.  */

struct type *
copy_type_recursive (struct objfile *objfile, 
		     struct type *type,
		     htab_t copied_types)
{
  struct type_pair *stored, pair;
  void **slot;
  struct type *new_type;

  if (! TYPE_OBJFILE_OWNED (type))
    return type;

  /* This type shouldn't be pointing to any types in other objfiles;
     if it did, the type might disappear unexpectedly.  */
  gdb_assert (TYPE_OBJFILE (type) == objfile);

  pair.old = type;
  slot = htab_find_slot (copied_types, &pair, INSERT);
  if (*slot != NULL)
    return ((struct type_pair *) *slot)->new;

  new_type = alloc_type_arch (get_type_arch (type));

  /* We must add the new type to the hash table immediately, in case
     we encounter this type again during a recursive call below.  */
  stored
    = obstack_alloc (&objfile->objfile_obstack, sizeof (struct type_pair));
  stored->old = type;
  stored->new = new_type;
  *slot = stored;

  /* Copy the common fields of types.  For the main type, we simply
     copy the entire thing and then update specific fields as needed.  */
  *TYPE_MAIN_TYPE (new_type) = *TYPE_MAIN_TYPE (type);
  TYPE_OBJFILE_OWNED (new_type) = 0;
  TYPE_OWNER (new_type).gdbarch = get_type_arch (type);

  if (TYPE_NAME (type))
    TYPE_NAME (new_type) = xstrdup (TYPE_NAME (type));
  if (TYPE_TAG_NAME (type))
    TYPE_TAG_NAME (new_type) = xstrdup (TYPE_TAG_NAME (type));

  TYPE_INSTANCE_FLAGS (new_type) = TYPE_INSTANCE_FLAGS (type);
  TYPE_LENGTH (new_type) = TYPE_LENGTH (type);

  /* Copy the fields.  */
  if (TYPE_NFIELDS (type))
    {
      int i, nfields;

      nfields = TYPE_NFIELDS (type);
      TYPE_FIELDS (new_type) = XCALLOC (nfields, struct field);
      for (i = 0; i < nfields; i++)
	{
	  TYPE_FIELD_ARTIFICIAL (new_type, i) = 
	    TYPE_FIELD_ARTIFICIAL (type, i);
	  TYPE_FIELD_BITSIZE (new_type, i) = TYPE_FIELD_BITSIZE (type, i);
	  if (TYPE_FIELD_TYPE (type, i))
	    TYPE_FIELD_TYPE (new_type, i)
	      = copy_type_recursive (objfile, TYPE_FIELD_TYPE (type, i),
				     copied_types);
	  if (TYPE_FIELD_NAME (type, i))
	    TYPE_FIELD_NAME (new_type, i) = 
	      xstrdup (TYPE_FIELD_NAME (type, i));
	  switch (TYPE_FIELD_LOC_KIND (type, i))
	    {
	    case FIELD_LOC_KIND_BITPOS:
	      SET_FIELD_BITPOS (TYPE_FIELD (new_type, i),
				TYPE_FIELD_BITPOS (type, i));
	      break;
	    case FIELD_LOC_KIND_ENUMVAL:
	      SET_FIELD_ENUMVAL (TYPE_FIELD (new_type, i),
				 TYPE_FIELD_ENUMVAL (type, i));
	      break;
	    case FIELD_LOC_KIND_PHYSADDR:
	      SET_FIELD_PHYSADDR (TYPE_FIELD (new_type, i),
				  TYPE_FIELD_STATIC_PHYSADDR (type, i));
	      break;
	    case FIELD_LOC_KIND_PHYSNAME:
	      SET_FIELD_PHYSNAME (TYPE_FIELD (new_type, i),
				  xstrdup (TYPE_FIELD_STATIC_PHYSNAME (type,
								       i)));
	      break;
	    default:
	      internal_error (__FILE__, __LINE__,
			      _("Unexpected type field location kind: %d"),
			      TYPE_FIELD_LOC_KIND (type, i));
	    }
	}
    }

  /* For range types, copy the bounds information.  */
  if (TYPE_CODE (type) == TYPE_CODE_RANGE)
    {
      TYPE_RANGE_DATA (new_type) = xmalloc (sizeof (struct range_bounds));
      *TYPE_RANGE_DATA (new_type) = *TYPE_RANGE_DATA (type);
    }

  /* Copy pointers to other types.  */
  if (TYPE_TARGET_TYPE (type))
    TYPE_TARGET_TYPE (new_type) = 
      copy_type_recursive (objfile, 
			   TYPE_TARGET_TYPE (type),
			   copied_types);
  if (TYPE_VPTR_BASETYPE (type))
    TYPE_VPTR_BASETYPE (new_type) = 
      copy_type_recursive (objfile,
			   TYPE_VPTR_BASETYPE (type),
			   copied_types);
  /* Maybe copy the type_specific bits.

     NOTE drow/2005-12-09: We do not copy the C++-specific bits like
     base classes and methods.  There's no fundamental reason why we
     can't, but at the moment it is not needed.  */

  if (TYPE_CODE (type) == TYPE_CODE_FLT)
    TYPE_FLOATFORMAT (new_type) = TYPE_FLOATFORMAT (type);
  else if (TYPE_CODE (type) == TYPE_CODE_STRUCT
	   || TYPE_CODE (type) == TYPE_CODE_UNION
	   || TYPE_CODE (type) == TYPE_CODE_NAMESPACE)
    INIT_CPLUS_SPECIFIC (new_type);

  return new_type;
}

/* Make a copy of the given TYPE, except that the pointer & reference
   types are not preserved.
   
   This function assumes that the given type has an associated objfile.
   This objfile is used to allocate the new type.  */

struct type *
copy_type (const struct type *type)
{
  struct type *new_type;

  gdb_assert (TYPE_OBJFILE_OWNED (type));

  new_type = alloc_type_copy (type);
  TYPE_INSTANCE_FLAGS (new_type) = TYPE_INSTANCE_FLAGS (type);
  TYPE_LENGTH (new_type) = TYPE_LENGTH (type);
  memcpy (TYPE_MAIN_TYPE (new_type), TYPE_MAIN_TYPE (type),
	  sizeof (struct main_type));

  return new_type;
}

/* Helper functions to initialize architecture-specific types.  */

/* Allocate a type structure associated with GDBARCH and set its
   CODE, LENGTH, and NAME fields.  */

struct type *
arch_type (struct gdbarch *gdbarch,
	   enum type_code code, int length, char *name)
{
  struct type *type;

  type = alloc_type_arch (gdbarch);
  TYPE_CODE (type) = code;
  TYPE_LENGTH (type) = length;

  if (name)
    TYPE_NAME (type) = xstrdup (name);

  return type;
}

/* Allocate a TYPE_CODE_INT type structure associated with GDBARCH.
   BIT is the type size in bits.  If UNSIGNED_P is non-zero, set
   the type's TYPE_UNSIGNED flag.  NAME is the type name.  */

struct type *
arch_integer_type (struct gdbarch *gdbarch,
		   int bit, int unsigned_p, char *name)
{
  struct type *t;

  t = arch_type (gdbarch, TYPE_CODE_INT, bit / TARGET_CHAR_BIT, name);
  if (unsigned_p)
    TYPE_UNSIGNED (t) = 1;
  if (name && strcmp (name, "char") == 0)
    TYPE_NOSIGN (t) = 1;

  return t;
}

/* Allocate a TYPE_CODE_CHAR type structure associated with GDBARCH.
   BIT is the type size in bits.  If UNSIGNED_P is non-zero, set
   the type's TYPE_UNSIGNED flag.  NAME is the type name.  */

struct type *
arch_character_type (struct gdbarch *gdbarch,
		     int bit, int unsigned_p, char *name)
{
  struct type *t;

  t = arch_type (gdbarch, TYPE_CODE_CHAR, bit / TARGET_CHAR_BIT, name);
  if (unsigned_p)
    TYPE_UNSIGNED (t) = 1;

  return t;
}

/* Allocate a TYPE_CODE_BOOL type structure associated with GDBARCH.
   BIT is the type size in bits.  If UNSIGNED_P is non-zero, set
   the type's TYPE_UNSIGNED flag.  NAME is the type name.  */

struct type *
arch_boolean_type (struct gdbarch *gdbarch,
		   int bit, int unsigned_p, char *name)
{
  struct type *t;

  t = arch_type (gdbarch, TYPE_CODE_BOOL, bit / TARGET_CHAR_BIT, name);
  if (unsigned_p)
    TYPE_UNSIGNED (t) = 1;

  return t;
}

/* Allocate a TYPE_CODE_FLT type structure associated with GDBARCH.
   BIT is the type size in bits; if BIT equals -1, the size is
   determined by the floatformat.  NAME is the type name.  Set the
   TYPE_FLOATFORMAT from FLOATFORMATS.  */

struct type *
arch_float_type (struct gdbarch *gdbarch,
		 int bit, char *name, const struct floatformat **floatformats)
{
  struct type *t;

  if (bit == -1)
    {
      gdb_assert (floatformats != NULL);
      gdb_assert (floatformats[0] != NULL && floatformats[1] != NULL);
      bit = floatformats[0]->totalsize;
    }
  gdb_assert (bit >= 0);

  t = arch_type (gdbarch, TYPE_CODE_FLT, bit / TARGET_CHAR_BIT, name);
  TYPE_FLOATFORMAT (t) = floatformats;
  return t;
}

/* Allocate a TYPE_CODE_COMPLEX type structure associated with GDBARCH.
   NAME is the type name.  TARGET_TYPE is the component float type.  */

struct type *
arch_complex_type (struct gdbarch *gdbarch,
		   char *name, struct type *target_type)
{
  struct type *t;

  t = arch_type (gdbarch, TYPE_CODE_COMPLEX,
		 2 * TYPE_LENGTH (target_type), name);
  TYPE_TARGET_TYPE (t) = target_type;
  return t;
}

/* Allocate a TYPE_CODE_FLAGS type structure associated with GDBARCH.
   NAME is the type name.  LENGTH is the size of the flag word in bytes.  */

struct type *
arch_flags_type (struct gdbarch *gdbarch, char *name, int length)
{
  int nfields = length * TARGET_CHAR_BIT;
  struct type *type;

  type = arch_type (gdbarch, TYPE_CODE_FLAGS, length, name);
  TYPE_UNSIGNED (type) = 1;
  TYPE_NFIELDS (type) = nfields;
  TYPE_FIELDS (type) = TYPE_ZALLOC (type, nfields * sizeof (struct field));

  return type;
}

/* Add field to TYPE_CODE_FLAGS type TYPE to indicate the bit at
   position BITPOS is called NAME.  */

void
append_flags_type_flag (struct type *type, int bitpos, char *name)
{
  gdb_assert (TYPE_CODE (type) == TYPE_CODE_FLAGS);
  gdb_assert (bitpos < TYPE_NFIELDS (type));
  gdb_assert (bitpos >= 0);

  if (name)
    {
      TYPE_FIELD_NAME (type, bitpos) = xstrdup (name);
      SET_FIELD_BITPOS (TYPE_FIELD (type, bitpos), bitpos);
    }
  else
    {
      /* Don't show this field to the user.  */
      SET_FIELD_BITPOS (TYPE_FIELD (type, bitpos), -1);
    }
}

/* Allocate a TYPE_CODE_STRUCT or TYPE_CODE_UNION type structure (as
   specified by CODE) associated with GDBARCH.  NAME is the type name.  */

struct type *
arch_composite_type (struct gdbarch *gdbarch, char *name, enum type_code code)
{
  struct type *t;

  gdb_assert (code == TYPE_CODE_STRUCT || code == TYPE_CODE_UNION);
  t = arch_type (gdbarch, code, 0, NULL);
  TYPE_TAG_NAME (t) = name;
  INIT_CPLUS_SPECIFIC (t);
  return t;
}

/* Add new field with name NAME and type FIELD to composite type T.
   Do not set the field's position or adjust the type's length;
   the caller should do so.  Return the new field.  */

struct field *
append_composite_type_field_raw (struct type *t, char *name,
				 struct type *field)
{
  struct field *f;

  TYPE_NFIELDS (t) = TYPE_NFIELDS (t) + 1;
  TYPE_FIELDS (t) = xrealloc (TYPE_FIELDS (t),
			      sizeof (struct field) * TYPE_NFIELDS (t));
  f = &(TYPE_FIELDS (t)[TYPE_NFIELDS (t) - 1]);
  memset (f, 0, sizeof f[0]);
  FIELD_TYPE (f[0]) = field;
  FIELD_NAME (f[0]) = name;
  return f;
}

/* Add new field with name NAME and type FIELD to composite type T.
   ALIGNMENT (if non-zero) specifies the minimum field alignment.  */

void
append_composite_type_field_aligned (struct type *t, char *name,
				     struct type *field, int alignment)
{
  struct field *f = append_composite_type_field_raw (t, name, field);

  if (TYPE_CODE (t) == TYPE_CODE_UNION)
    {
      if (TYPE_LENGTH (t) < TYPE_LENGTH (field))
	TYPE_LENGTH (t) = TYPE_LENGTH (field);
    }
  else if (TYPE_CODE (t) == TYPE_CODE_STRUCT)
    {
      TYPE_LENGTH (t) = TYPE_LENGTH (t) + TYPE_LENGTH (field);
      if (TYPE_NFIELDS (t) > 1)
	{
	  SET_FIELD_BITPOS (f[0],
			    (FIELD_BITPOS (f[-1])
			     + (TYPE_LENGTH (FIELD_TYPE (f[-1]))
				* TARGET_CHAR_BIT)));

	  if (alignment)
	    {
	      int left;

	      alignment *= TARGET_CHAR_BIT;
	      left = FIELD_BITPOS (f[0]) % alignment;

	      if (left)
		{
		  SET_FIELD_BITPOS (f[0], FIELD_BITPOS (f[0]) + (alignment - left));
		  TYPE_LENGTH (t) += (alignment - left) / TARGET_CHAR_BIT;
		}
	    }
	}
    }
}

/* Add new field with name NAME and type FIELD to composite type T.  */

void
append_composite_type_field (struct type *t, char *name,
			     struct type *field)
{
  append_composite_type_field_aligned (t, name, field, 0);
}

static struct gdbarch_data *gdbtypes_data;

const struct builtin_type *
builtin_type (struct gdbarch *gdbarch)
{
  return gdbarch_data (gdbarch, gdbtypes_data);
}

static void *
gdbtypes_post_init (struct gdbarch *gdbarch)
{
  struct builtin_type *builtin_type
    = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct builtin_type);

  /* Basic types.  */
  builtin_type->builtin_void
    = arch_type (gdbarch, TYPE_CODE_VOID, 1, "void");
  builtin_type->builtin_char
    = arch_integer_type (gdbarch, TARGET_CHAR_BIT,
			 !gdbarch_char_signed (gdbarch), "char");
  builtin_type->builtin_signed_char
    = arch_integer_type (gdbarch, TARGET_CHAR_BIT,
			 0, "signed char");
  builtin_type->builtin_unsigned_char
    = arch_integer_type (gdbarch, TARGET_CHAR_BIT,
			 1, "unsigned char");
  builtin_type->builtin_short
    = arch_integer_type (gdbarch, gdbarch_short_bit (gdbarch),
			 0, "short");
  builtin_type->builtin_unsigned_short
    = arch_integer_type (gdbarch, gdbarch_short_bit (gdbarch),
			 1, "unsigned short");
  builtin_type->builtin_int
    = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),
			 0, "int");
  builtin_type->builtin_unsigned_int
    = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),
			 1, "unsigned int");
  builtin_type->builtin_long
    = arch_integer_type (gdbarch, gdbarch_long_bit (gdbarch),
			 0, "long");
  builtin_type->builtin_unsigned_long
    = arch_integer_type (gdbarch, gdbarch_long_bit (gdbarch),
			 1, "unsigned long");
  builtin_type->builtin_long_long
    = arch_integer_type (gdbarch, gdbarch_long_long_bit (gdbarch),
			 0, "long long");
  builtin_type->builtin_unsigned_long_long
    = arch_integer_type (gdbarch, gdbarch_long_long_bit (gdbarch),
			 1, "unsigned long long");
  builtin_type->builtin_float
    = arch_float_type (gdbarch, gdbarch_float_bit (gdbarch),
		       "float", gdbarch_float_format (gdbarch));
  builtin_type->builtin_double
    = arch_float_type (gdbarch, gdbarch_double_bit (gdbarch),
		       "double", gdbarch_double_format (gdbarch));
  builtin_type->builtin_long_double
    = arch_float_type (gdbarch, gdbarch_long_double_bit (gdbarch),
		       "long double", gdbarch_long_double_format (gdbarch));
  builtin_type->builtin_complex
    = arch_complex_type (gdbarch, "complex",
			 builtin_type->builtin_float);
  builtin_type->builtin_double_complex
    = arch_complex_type (gdbarch, "double complex",
			 builtin_type->builtin_double);
  builtin_type->builtin_string
    = arch_type (gdbarch, TYPE_CODE_STRING, 1, "string");
  builtin_type->builtin_bool
    = arch_type (gdbarch, TYPE_CODE_BOOL, 1, "bool");

  /* The following three are about decimal floating point types, which
     are 32-bits, 64-bits and 128-bits respectively.  */
  builtin_type->builtin_decfloat
    = arch_type (gdbarch, TYPE_CODE_DECFLOAT, 32 / 8, "_Decimal32");
  builtin_type->builtin_decdouble
    = arch_type (gdbarch, TYPE_CODE_DECFLOAT, 64 / 8, "_Decimal64");
  builtin_type->builtin_declong
    = arch_type (gdbarch, TYPE_CODE_DECFLOAT, 128 / 8, "_Decimal128");

  /* "True" character types.  */
  builtin_type->builtin_true_char
    = arch_character_type (gdbarch, TARGET_CHAR_BIT, 0, "true character");
  builtin_type->builtin_true_unsigned_char
    = arch_character_type (gdbarch, TARGET_CHAR_BIT, 1, "true character");

  /* Fixed-size integer types.  */
  builtin_type->builtin_int0
    = arch_integer_type (gdbarch, 0, 0, "int0_t");
  builtin_type->builtin_int8
    = arch_integer_type (gdbarch, 8, 0, "int8_t");
  builtin_type->builtin_uint8
    = arch_integer_type (gdbarch, 8, 1, "uint8_t");
  builtin_type->builtin_int16
    = arch_integer_type (gdbarch, 16, 0, "int16_t");
  builtin_type->builtin_uint16
    = arch_integer_type (gdbarch, 16, 1, "uint16_t");
  builtin_type->builtin_int32
    = arch_integer_type (gdbarch, 32, 0, "int32_t");
  builtin_type->builtin_uint32
    = arch_integer_type (gdbarch, 32, 1, "uint32_t");
  builtin_type->builtin_int64
    = arch_integer_type (gdbarch, 64, 0, "int64_t");
  builtin_type->builtin_uint64
    = arch_integer_type (gdbarch, 64, 1, "uint64_t");
  builtin_type->builtin_int128
    = arch_integer_type (gdbarch, 128, 0, "int128_t");
  builtin_type->builtin_uint128
    = arch_integer_type (gdbarch, 128, 1, "uint128_t");
  TYPE_INSTANCE_FLAGS (builtin_type->builtin_int8) |=
    TYPE_INSTANCE_FLAG_NOTTEXT;
  TYPE_INSTANCE_FLAGS (builtin_type->builtin_uint8) |=
    TYPE_INSTANCE_FLAG_NOTTEXT;

  /* Wide character types.  */
  builtin_type->builtin_char16
    = arch_integer_type (gdbarch, 16, 0, "char16_t");
  builtin_type->builtin_char32
    = arch_integer_type (gdbarch, 32, 0, "char32_t");
	

  /* Default data/code pointer types.  */
  builtin_type->builtin_data_ptr
    = lookup_pointer_type (builtin_type->builtin_void);
  builtin_type->builtin_func_ptr
    = lookup_pointer_type (lookup_function_type (builtin_type->builtin_void));
  builtin_type->builtin_func_func
    = lookup_function_type (builtin_type->builtin_func_ptr);

  /* This type represents a GDB internal function.  */
  builtin_type->internal_fn
    = arch_type (gdbarch, TYPE_CODE_INTERNAL_FUNCTION, 0,
		 "<internal function>");

  return builtin_type;
}

/* This set of objfile-based types is intended to be used by symbol
   readers as basic types.  */

static const struct objfile_data *objfile_type_data;

const struct objfile_type *
objfile_type (struct objfile *objfile)
{
  struct gdbarch *gdbarch;
  struct objfile_type *objfile_type
    = objfile_data (objfile, objfile_type_data);

  if (objfile_type)
    return objfile_type;

  objfile_type = OBSTACK_CALLOC (&objfile->objfile_obstack,
				 1, struct objfile_type);

  /* Use the objfile architecture to determine basic type properties.  */
  gdbarch = get_objfile_arch (objfile);

  /* Basic types.  */
  objfile_type->builtin_void
    = init_type (TYPE_CODE_VOID, 1,
		 0,
		 "void", objfile);

  objfile_type->builtin_char
    = init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
		 (TYPE_FLAG_NOSIGN
		  | (gdbarch_char_signed (gdbarch) ? 0 : TYPE_FLAG_UNSIGNED)),
		 "char", objfile);
  objfile_type->builtin_signed_char
    = init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
		 0,
		 "signed char", objfile);
  objfile_type->builtin_unsigned_char
    = init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
		 TYPE_FLAG_UNSIGNED,
		 "unsigned char", objfile);
  objfile_type->builtin_short
    = init_type (TYPE_CODE_INT,
		 gdbarch_short_bit (gdbarch) / TARGET_CHAR_BIT,
		 0, "short", objfile);
  objfile_type->builtin_unsigned_short
    = init_type (TYPE_CODE_INT,
		 gdbarch_short_bit (gdbarch) / TARGET_CHAR_BIT,
		 TYPE_FLAG_UNSIGNED, "unsigned short", objfile);
  objfile_type->builtin_int
    = init_type (TYPE_CODE_INT,
		 gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT,
		 0, "int", objfile);
  objfile_type->builtin_unsigned_int
    = init_type (TYPE_CODE_INT,
		 gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT,
		 TYPE_FLAG_UNSIGNED, "unsigned int", objfile);
  objfile_type->builtin_long
    = init_type (TYPE_CODE_INT,
		 gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT,
		 0, "long", objfile);
  objfile_type->builtin_unsigned_long
    = init_type (TYPE_CODE_INT,
		 gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT,
		 TYPE_FLAG_UNSIGNED, "unsigned long", objfile);
  objfile_type->builtin_long_long
    = init_type (TYPE_CODE_INT,
		 gdbarch_long_long_bit (gdbarch) / TARGET_CHAR_BIT,
		 0, "long long", objfile);
  objfile_type->builtin_unsigned_long_long
    = init_type (TYPE_CODE_INT,
		 gdbarch_long_long_bit (gdbarch) / TARGET_CHAR_BIT,
		 TYPE_FLAG_UNSIGNED, "unsigned long long", objfile);

  objfile_type->builtin_float
    = init_type (TYPE_CODE_FLT,
		 gdbarch_float_bit (gdbarch) / TARGET_CHAR_BIT,
		 0, "float", objfile);
  TYPE_FLOATFORMAT (objfile_type->builtin_float)
    = gdbarch_float_format (gdbarch);
  objfile_type->builtin_double
    = init_type (TYPE_CODE_FLT,
		 gdbarch_double_bit (gdbarch) / TARGET_CHAR_BIT,
		 0, "double", objfile);
  TYPE_FLOATFORMAT (objfile_type->builtin_double)
    = gdbarch_double_format (gdbarch);
  objfile_type->builtin_long_double
    = init_type (TYPE_CODE_FLT,
		 gdbarch_long_double_bit (gdbarch) / TARGET_CHAR_BIT,
		 0, "long double", objfile);
  TYPE_FLOATFORMAT (objfile_type->builtin_long_double)
    = gdbarch_long_double_format (gdbarch);

  /* This type represents a type that was unrecognized in symbol read-in.  */
  objfile_type->builtin_error
    = init_type (TYPE_CODE_ERROR, 0, 0, "<unknown type>", objfile);

  /* The following set of types is used for symbols with no
     debug information.  */
  objfile_type->nodebug_text_symbol
    = init_type (TYPE_CODE_FUNC, 1, 0,
		 "<text variable, no debug info>", objfile);
  TYPE_TARGET_TYPE (objfile_type->nodebug_text_symbol)
    = objfile_type->builtin_int;
  objfile_type->nodebug_text_gnu_ifunc_symbol
    = init_type (TYPE_CODE_FUNC, 1, TYPE_FLAG_GNU_IFUNC,
		 "<text gnu-indirect-function variable, no debug info>",
		 objfile);
  TYPE_TARGET_TYPE (objfile_type->nodebug_text_gnu_ifunc_symbol)
    = objfile_type->nodebug_text_symbol;
  objfile_type->nodebug_got_plt_symbol
    = init_type (TYPE_CODE_PTR, gdbarch_addr_bit (gdbarch) / 8, 0,
		 "<text from jump slot in .got.plt, no debug info>",
		 objfile);
  TYPE_TARGET_TYPE (objfile_type->nodebug_got_plt_symbol)
    = objfile_type->nodebug_text_symbol;
  objfile_type->nodebug_data_symbol
    = init_type (TYPE_CODE_INT,
		 gdbarch_int_bit (gdbarch) / HOST_CHAR_BIT, 0,
		 "<data variable, no debug info>", objfile);
  objfile_type->nodebug_unknown_symbol
    = init_type (TYPE_CODE_INT, 1, 0,
		 "<variable (not text or data), no debug info>", objfile);
  objfile_type->nodebug_tls_symbol
    = init_type (TYPE_CODE_INT,
		 gdbarch_int_bit (gdbarch) / HOST_CHAR_BIT, 0,
		 "<thread local variable, no debug info>", objfile);

  /* NOTE: on some targets, addresses and pointers are not necessarily
     the same.

     The upshot is:
     - gdb's `struct type' always describes the target's
       representation.
     - gdb's `struct value' objects should always hold values in
       target form.
     - gdb's CORE_ADDR values are addresses in the unified virtual
       address space that the assembler and linker work with.  Thus,
       since target_read_memory takes a CORE_ADDR as an argument, it
       can access any memory on the target, even if the processor has
       separate code and data address spaces.

     In this context, objfile_type->builtin_core_addr is a bit odd:
     it's a target type for a value the target will never see.  It's
     only used to hold the values of (typeless) linker symbols, which
     are indeed in the unified virtual address space.  */

  objfile_type->builtin_core_addr
    = init_type (TYPE_CODE_INT,
		 gdbarch_addr_bit (gdbarch) / 8,
		 TYPE_FLAG_UNSIGNED, "__CORE_ADDR", objfile);

  set_objfile_data (objfile, objfile_type_data, objfile_type);
  return objfile_type;
}

extern initialize_file_ftype _initialize_gdbtypes;

void
_initialize_gdbtypes (void)
{
  gdbtypes_data = gdbarch_data_register_post_init (gdbtypes_post_init);
  objfile_type_data = register_objfile_data ();

  add_setshow_zuinteger_cmd ("overload", no_class, &overload_debug,
			     _("Set debugging of C++ overloading."),
			     _("Show debugging of C++ overloading."),
			     _("When enabled, ranking of the "
			       "functions is displayed."),
			     NULL,
			     show_overload_debug,
			     &setdebuglist, &showdebuglist);

  /* Add user knob for controlling resolution of opaque types.  */
  add_setshow_boolean_cmd ("opaque-type-resolution", class_support,
			   &opaque_type_resolution,
			   _("Set resolution of opaque struct/class/union"
			     " types (if set before loading symbols)."),
			   _("Show resolution of opaque struct/class/union"
			     " types (if set before loading symbols)."),
			   NULL, NULL,
			   show_opaque_type_resolution,
			   &setlist, &showlist);

  /* Add an option to permit non-strict type checking.  */
  add_setshow_boolean_cmd ("type", class_support,
			   &strict_type_checking,
			   _("Set strict type checking."),
			   _("Show strict type checking."),
			   NULL, NULL,
			   show_strict_type_checking,
			   &setchecklist, &showchecklist);
}
@


1.255
log
@Constification of parse_linespec and fallout:
https://sourceware.org/ml/gdb-patches/2013-09/msg01017.html
https://sourceware.org/ml/gdb-patches/2013-09/msg01018.html
https://sourceware.org/ml/gdb-patches/2013-09/msg01019.html
https://sourceware.org/ml/gdb-patches/2013-09/msg01020.html
@
text
@d242 15
@


1.254
log
@Code cleanup: Add objfile_name accessor

gdb/
2013-09-24  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	Code cleanup: Add objfile_name accessor function.
	* ada-lang.c (is_known_support_routine): Use objfile_name.
	* auto-load.c (source_gdb_script_for_objfile)
	(auto_load_objfile_script): Likewise.
	* coffread.c (coff_symtab_read, read_one_sym): Likewise.
	* dbxread.c (dbx_symfile_read): Likewise.
	* dwarf2-frame.c (dwarf2_build_frame_info): Likewise.
	* dwarf2loc.c (locexpr_describe_location_piece): Likewise.
	* dwarf2read.c (dwarf2_get_dwz_file, dwarf2_read_index)
	(dw2_symtab_iter_next, dw2_expand_symtabs_matching)
	(lookup_dwp_signatured_type, lookup_dwo_unit)
	(dwarf2_build_psymtabs_hard, scan_partial_symbols, process_queue)
	(fixup_go_packaging, process_imported_unit_die, dwarf2_physname)
	(read_import_statement, create_dwo_cu, open_and_init_dwp_file)
	(lookup_dwo_cutu, read_call_site_scope, dwarf2_ranges_read)
	(dwarf2_record_block_ranges, read_common_block, read_typedef)
	(read_subrange_type, load_partial_dies, read_partial_die)
	(read_addr_index_1, read_str_index, dwarf_decode_lines_1)
	(die_containing_type, build_error_marker_type, lookup_die_type)
	(follow_die_ref_or_sig, follow_die_ref, dwarf2_fetch_die_loc_sect_off)
	(dwarf2_fetch_constant_bytes, follow_die_sig, get_signatured_type)
	(get_DW_AT_signature_type, write_psymtabs_to_index)
	(save_gdb_index_command): Likewise.
	* elfread.c (find_separate_debug_file_by_buildid, elf_symfile_read):
	Likewise.
	* expprint.c (dump_subexp_body_standard): Likewise.
	* gdbtypes.c (type_name_no_tag_or_error): Likewise.
	* jit.c (jit_object_close_impl): Use the objfile field name renamed to
	original_name.
	* linux-thread-db.c (try_thread_db_load_from_pdir_1): New variable
	obj_name, use objfile_name for it, use the variable.
	(try_thread_db_load_from_pdir, has_libpthread, thread_db_new_objfile):
	Use objfile_name.
	* machoread.c (macho_symtab_read, macho_check_dsym)
	(macho_symfile_relocate): Likewise.
	* maint.c (maintenance_translate_address): Likewise.
	* minidebug.c (find_separate_debug_file_in_section): Likewise.
	* minsyms.c (install_minimal_symbols): Likewise.
	* objfiles.c (allocate_objfile): Use the objfile field name renamed to
	original_name.
	(filter_overlapping_sections): Use objfile_name.
	(objfile_name): New function.
	* objfiles.h (struct objfile): Rename field name to original_name.
	(objfile_name): New prototype.
	* printcmd.c (sym_info, address_info): Use objfile_name.
	* probe.c (parse_probes, collect_probes, compare_probes)
	(info_probes_for_ops): Likewise.
	* progspace.c (clone_program_space): Likewise.
	* psymtab.c (require_partial_symbols, dump_psymtab, allocate_psymtab)
	(maintenance_info_psymtabs): Likewise.
	* python/py-auto-load.c (gdbpy_load_auto_script_for_objfile)
	(source_section_scripts): Likewise.
	* python/py-objfile.c (objfpy_get_filename): Likewise.
	* python/py-progspace.c (pspy_get_filename): Likewise.
	* solib-aix.c (solib_aix_get_toc_value): Likewise.
	* solib-som.c (match_main, som_solib_section_offsets): Likewise.
	* solib.c (solib_read_symbols): Likewise.
	* stabsread.c (scan_file_globals): Likewise.
	* stap-probe.c (handle_stap_probe): Likewise.
	* symfile.c (symbol_file_clear, separate_debug_file_exists)
	(find_separate_debug_file_by_debuglink): Likewise.
	(reread_symbols): Likewise.  Use the objfile field name renamed to
	original_name.
	(allocate_symtab): Use objfile_name.
	* symmisc.c (print_symbol_bcache_statistics, print_objfile_statistics)
	(dump_objfile, dump_msymbols, dump_symtab_1)
	(maintenance_print_msymbols, maintenance_print_objfiles)
	(maintenance_info_symtabs, maintenance_check_symtabs): Likewise.
	* target.c (target_translate_tls_address, target_info): Likewise.
	* xcoffread.c (xcoff_initial_scan): Make variable name const.  Use
	objfile_name.
@
text
@d1356 1
a1356 1
lookup_struct_elt_type (struct type *type, char *name, int noerr)
@


1.253
log
@	* README: Update references to writing code for GDB.
	* configure.ac (build_warnings): Remove obsolete comment.
	* configure: Regenerate.
	* gdbarch.sh: Remove references to gdbint.texinfo.
	* gdbarch.h: Regenerate.
	* gdbtypes.c (objfile_type): Remove comments referencing internals
	manual and D10V.

	[gdb/doc]
	Remove the internals manual gdbint.texinfo.
	* Makefile.in (INFO_DEPS): Remove gdbint.info.
	(PDFFILES): Remove gdbint.pdf.
	(HTMLFILES): Remove gdbint/index.html.
	(HTMLFILES_INSTALL): Remove gdbint.
	(GDBINT_DOC_FILES): Remove.
	(dvi): Remove gdbint.dvi.
	(ps): Remove gdbint.ps.
	* gdbint.texinfo: Remove file.
	* gdb.texinfo (Maintenance Commands): Remove reference to gdbint.
@
text
@d1190 2
a1191 1
	 name ? name : "<anonymous>", objfile ? objfile->name : "<arch>");
@


1.252
log
@	* doublest.c (convert_floatformat_to_doublest): Use fmt->split_half
	for IBM long double nan and inf.
	(floatformat_is_negative, floatformat_classify,
	floatformat_mantissa): Similarly.
	(floatformat_ieee_single, floatformat_ieee_double,
	floatformat_ieee_quad, floatformat_arm_ext,
	floatformat_ia64_spill): Delete unused vars.
	(_initialize_doublest): Delete unused function.
	* gdbtypes.c (floatformats_ibm_long_double): Use new big- and
	little-endian variants of floatformat_ibm_long_double.
@
text
@d4072 1
a4072 3
     the same --- for example, on the D10V, pointers are 16 bits long,
     but addresses are 32 bits long.  See doc/gdbint.texinfo,
     ``Pointers Are Not Always Addresses''.
a4084 6
     So, for example:
     - If v is a value holding a D10V code pointer, its contents are
       in target form: a big-endian address left-shifted two bits.
     - If p is a D10V pointer type, TYPE_LENGTH (p) == 2, just as
       sizeof (void *) == 2 on the target.

@


1.251
log
@	PR c++/11990:
	* c-lang.c (cplus_language_defn): Use gdb_demangle.
	* c-typeprint.c (c_type_print_base): Use gdb_demangle.
	* cp-support.c (mangled_name_to_comp): Use gdb_demangle.
	(gdb_demangle): New function.
	* cp-support.h (gdb_demangle): Declare.
	* dwarf2read.c (dwarf2_physname, fixup_partial_die)
	(dwarf2_name): Use gdb_demangle.
	* gdbtypes.c (check_stub_method): Use gdb_demangle.
	* gnu-v3-abi.c (gnuv3_rtti_type): Strip @@plt and version
	suffixes from name.
	(gnuv3_print_method_ptr): Use gdb_demangle.
	* jv-lang.c (java_demangle): Use gdb_demangle.
	* jv-typeprint.c (java_type_print_base): Use gdb_demangle.
	* language.c (unk_lang_demangle): Use gdb_demangle.
	* symtab.c (symbol_find_demangled_name)
	(demangle_for_lookup): Use gdb_demangle.
@
text
@d111 2
a112 2
  &floatformat_ibm_long_double,
  &floatformat_ibm_long_double
@


1.250
log
@    	PR c++/15116:
    	* gdbtypes.c (types_equal): Handle TYPE_CODE_FUNC.
gdb/testsuite
    	* gdb.cp/overload.cc (intintfunc): New.
    	* gdb.cp/overload.exp: Add regression test.
@
text
@d40 1
d1768 2
a1769 2
  char *demangled_name = cplus_demangle (mangled_name,
					 DMGL_PARAMS | DMGL_ANSI);
@


1.249
log
@	* dwarf2read.c (fixup_go_packaging): Save package name
	on objfile obstack.
	* gdbtypes.c (init_type): Don't copy name.
@
text
@d2459 19
@


1.248
log
@	* gdbtypes.c (init_type): Make 'name' const.
	* gdbtypes.h (init_type): Update.
@
text
@d1953 3
a1955 4
   If NAME is non-NULL, then we make a copy of the string pointed
   to by name in the objfile_obstack for that objfile, and initialize
   the type name to that copy.  There are places (mipsread.c in particular),
   where init_type is called with a NULL value for NAME).  */
d1993 1
a1993 3
  if (name)
    TYPE_NAME (type) = obsavestring (name, strlen (name),
				     &objfile->objfile_obstack);
@


1.247
log
@	PR symtab/14442:
	* c-typeprint.c (cp_type_print_method_args): Handle 'restrict'.
	(c_type_print_modifier): Likewise.
	* dwarf2read.c (read_tag_restrict_type): New function.
	(read_type_die_1): Handle DW_TAG_restrict_type.
	* gdbtypes.c (make_restrict_type): New function.
	(recursive_dump_type): Handle TYPE_RESTRICT.
	* gdbtypes.h (enum type_flag_values): Renumber.
	(enum type_instance_flag_value): Add
	TYPE_INSTANCE_FLAG_RESTRICT.
	(TYPE_RESTRICT): New macro.
	(make_restrict_type): Declare.
gdb/testsuite
	* gdb.dwarf2/dw2-restrict.S: New file.
	* gdb.dwarf2/dw2-restrict.c: New file.
	* gdb.dwarf2/dw2-restrict.exp: New file.
@
text
@d1960 1
a1960 1
	   char *name, struct objfile *objfile)
@


1.246
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d679 11
d3208 4
@


1.245
log
@	* ada-exp.y (write_object_renaming, write_var_or_type)
	(write_ambiguous_var, write_var_from_sym): Make blocks const.
	* ada-lang.c (replace_operator_with_call)
	(find_old_style_renaming_symbol): Make blocks const.
	* ada-lang.h (ada_find_renaming_symbol): Update.
	(struct ada_symbol_info) <block>: Now const.
	* breakpoint.c (watch_command_1): Update.
	* breakpoint.h (struct watchpoint) <exp_valid_block,
	cond_exp_valid_block>: Now const.
	* c-exp.y (classify_inner_name, classify_name): Make block
	argument const.
	* expprint.c (print_subexp_standard) <OP_VAR_VALUE>: Make 'b'
	const.
	* expression.h (innermost_block, parse_exp_1): Update.
	(union exp_element) <block>: Now const.
	* gdbtypes.c (lookup_template_type, lookup_enum, lookup_union)
	(lookup_struct): Make block argument const.
	* gdbtypes.h (lookup_template_type): Update.
	* go-exp.y (classify_name, classify_packaged_name)
	(package_name_p): Make block argument const.
	* objc-lang.c (lookup_struct_typedef): Make block argument const.
	* objc-lang.h (lookup_struct_typedef): Update.
	* parse.c (parse_exp_in_context, parse_exp_1)
	(write_exp_elt_block): Make block arguments const.
	(expression_context_block, innermost_block): Now const.
	* parser-defs.h (write_exp_elt_block): Update.
	(expression_context_block, innermost_block, block_found): Now
	const.
	* printcmd.c (struct display) <block>: Now const.
	* symtab.h (lookup_struct, lookup_union, lookup_enum): Update.
	* valops.c (address_of_variable): Make block argument const.
	* value.h (value_of_variable): Update.
	* varobj.c (struct varobj_root) <valid_block>: Now const.
@
text
@d3 1
a3 1
   Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@


1.244
log
@	* c-typeprint.c (find_typedef_for_canonicalize,
	print_name_maybe_canonical): New functions.
	(c_print_type): Look up type name.
	(cp_type_print_derivation_info): Add flags argument.  Use
	print_name_maybe_canonical.
	(cp_type_print_method_args): Add wrapping.
	(c_type_print_varspec_prefix): Use print_name_maybe_canonical.
	(c_type_print_template_args): New function.
	(c_type_print_base): Change wrapping.  Use
	print_name_maybe_canonical.
	<TYPE_CODE_STRUCT>: Possibly create a typedef hash, and do
	type name lookups.
	* gdbtypes.c (types_equal): No longer static.
	* gdbtypes.h (types_equal): Declare.
	* typeprint.c (type_print_raw_options, default_ptype_flags):
	Update.
	(struct typedef_hash_table): New.
	(hash_typedef_field, eq_typedef_field,
	recursively_update_typedef_hash, add_template_parameters,
	create_typedef_hash, free_typedef_hash, do_free_typedef_hash,
	make_cleanup_free_typedef_hash, copy_typedef_hash_element,
	copy_typedef_hash, find_typedef_in_hash): New functions.
	* typeprint.h (struct type_print_options) <local_typedefs>:
	New field.
	(recursively_update_typedef_hash, add_template_parameters,
	create_typedef_hash, free_typedef_hash,
	make_cleanup_free_typedef_hash, copy_typedef_hash,
	find_typedef_in_hash): Declare.
testsuite
	* gdb.base/call-sc.exp: Use "ptype/r".
	* gdb.base/volatile.exp: Don't expect "int".
	* gdb.cp/ptype-flags.cc: New file.
	* gdb.cp/ptype-flags.exp: New file.
	* gdb.cp/templates.exp: Use ptype/r.
	(test_ptype_of_templates, test_template_typedef): Likewise.
	* lib/cp-support.exp (cp_test_ptype_class): Add in_ptype_arg
	argument.  Handle template names and template parameters.
	* gdb.mi/mi-var-cmd.exp: Accept "long".
	* gdb.mi/mi-var-child.exp: Accept "long".
	* gdb.mi/mi-var-display.exp: Accept "long".
	* gdb.mi/mi2-var-child.exp: Accept "long".
@
text
@d1237 1
a1237 1
lookup_struct (const char *name, struct block *block)
d1259 1
a1259 1
lookup_union (const char *name, struct block *block)
d1283 1
a1283 1
lookup_enum (const char *name, struct block *block)
d1305 1
a1305 1
		      struct block *block)
@


1.243
log
@	* gdbtypes.c (lookup_array_range_type): Expand parameters
	LOW_BOUND and HIGH_BOUND to LONGEST.
	(lookup_string_range_type): Likewise.
	* gdbtypes.h (lookup_array_range_type): Likewise.
	(lookup_string_range_type): Likewise.
	* valops.c (value_cstring): Expand parameter LEN to ssize_t.
	Expand HIGHBOUND to ssize_t.
	(value_string): Likewise.
	* value.h (value_cstring): Expand parameter LEN to ssize_t.
	(value_string): Likewise.
@
text
@d2409 1
a2409 1
static int
@


1.242
log
@	PR gdb/13483
	* gdbtypes.h (BOOL_PTR_CONVERSION_BADNESS): Rename to ...
	(BOOL_CONVERSION_BADNESS): ... this.
	* gdbtypes.c (BOOL_PTR_CONVERSION_BADNESS): Likewise.
	(rank_one_type): Allow all boolean conversions
	permitted by the standard.

	* gdb.cp/converts.cc (A::A): Add ctor.
	(A::member_): Add member.
	(enum my_enum): New enumeration.
	(main): Add calls to foo1_7 with various
	permitted arguments.
	* gdb.cp/converts.exp: Add tests for boolean
	conversions permitted by the standard.
@
text
@d967 1
a967 1
			 int low_bound, int high_bound)
d1003 1
a1003 1
			  int low_bound, int high_bound)
@


1.241
log
@	PR c++/13356
	* gdbtypes.c (strict_type_checking): New variable.
	(show_strict_type_checking): New function.
	(rank_one_type): Return NS_POINTER_INTEGER_CONVERSION_BADNESS
	if strict type checking is disabled.
	(_initialize_gdbtypes): Add "check type" subcommand.
	* gdbtypes.h (NS_INTEGER_POINTER_CONVERSION_BADNESS): New struct.

	PR c++/13356
	* gdb.base/default.exp: Update all "check type" tests.
	* gdb.base/help.exp: Likewise.
	* gdb.base/setshow.exp: Likewise.
	* gdb.cp/converts.cc (foo1_type_check): New function.
	(foo2_type_check): New function.
	(foo3_type_check): New function.
	(main): Call new functions.
	* converts.exp: Add tests for integer-to-pointer conversions
	with/without strict type-checking.

	PR c++/13356
	* gdb.texinfo (Type and Range Checking): Remove warning.
	Remove spurious commas.
	Update text and examples for re-implementation of set/show
	check type.
	(C and C++ Type and Range Checks): Likewise.

	* language.h (type_mode): Remove.
	(type_check): Remove.
	(struct language_defn): Remove la_type_check.
	(STRICT_TYPE): Remove unused macro.
	(type_error): Remove.
	* language.c (set_type_range_case): Renamed to ...
	(set_range_case): ... this.  Update all callers.
	Remove type_mode/type_check.
	(type_mode): Remove.
	(type_check): Remove.
	(show_type_command): Remove.
	(set_type_command): Remove.
	(language_info): Remove type checking output.
	(type_error): Remove unused function.
	(range_error): Update comment.
	(unknown_language_defn): Remove la_type_check.
	(auto_language_defn): Likewise.
	(local_language_defn): Likewise.
	(_initialize_language): Remove "check type" subcommand.
	* ada-lang.c (ada_language_defn): Remove la_type_check.
	* c-lang.c (c_language_defn): Likewise.
	(cplus_language_defn): Likewise.
	(asm_language_defn): Likewise.
	(minimal_language_defn): Likewise.
	* d-lang.c (d_language_defn): Likewise.
	* f-lang.c (f_language_defn): Likewise.
	* go-lang.c (go_language_defn): Likewise.
	* jv-lang.c (java_language_defn): Likewise.
	* m2-lang.c (m2_language_defn): Likewise.
	* objc-lang.c (objc_language_defn): Likewise.
	* opencl-lang.c (opencl_language_defn): Likewise.
	* p-lang.c (pascal_language_defn): Likewise.
@
text
@d57 1
a57 1
const struct rank BOOL_PTR_CONVERSION_BADNESS = {3,0};
d2721 8
a2730 1
	case TYPE_CODE_RANGE:
d2733 4
a2737 2
	case TYPE_CODE_PTR:
	  return BOOL_PTR_CONVERSION_BADNESS;
@


1.240
log
@gdb/
	* gdbtypes.h (enum type_code): Define TYPE_CODE_BITSTRING -1.
	* arm-tdep.c (arm_type_align): Remove code handling TYPE_CODE_BITSTRING.
	* c-typeprint.c (c_type_print_varspec_prefix): Likewise.
	(c_type_print_varspec_suffix): Likewise.
	* eval.c (evaluate_subexp_standard): Likewise.
	* f-typeprint.c (f_type_print_varspec_prefix): Likewise.
	(f_type_print_varspec_suffix): Likewise.
	* gdbtypes.c (is_scalar_type): Likewise.
	(recursive_dump_type): Likewise.
	* infcall.c (value_arg_coerce): Likewise.
	* m2-valprint.c (m2_val_print): Likewise.
	* p-typeprint.c (pascal_type_print_varspec_prefix): Likewise.
	(pascal_type_print_varspec_suffix): Likewise.
	(pascal_type_print_base): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	(pascal_val_print): Likewise.
	* valops.c (value_slice): Likewise.
	* valprint.c (scalar_type_p): Likewise.
	* valarith.c (value_bitstring_subscript): Remove.
	(value_concat): Remove code handling TYPE_CODE_BITSTRING.
	Remove comment on TYPE_CODE_BITSTRING.

	* stabsread.c (read_type): Don't set TYPE_CODE (type) to
	TYPE_CODE_BITSTRING.

	* python/py-type.c (pyty_codes): Move ENTRY (TYPE_CODE_BITSTRING) to
	slot 0.

gdb/doc:
	* gdb.texinfo (Types In Python): Mention gdb.TYPE_CODE_BITSTRING
	is deprecated.
@
text
@d62 1
d123 4
d149 9
d2524 1
a2524 2
	  if (value != NULL && TYPE_CODE (value_type (value)) == TYPE_CODE_INT
	      && value_as_long (value) == 0)
d2526 12
a2537 3
	      /* Null pointer conversion: allow it to be cast to a pointer.
		 [4.10.1 of C++ standard draft n3290]  */
	      return NULL_POINTER_CONVERSION_BADNESS;
d4093 9
@


1.239
log
@	* gdbtypes.c (opaque_type_resolution): Make static.
	Add missing comment.
	(overload_debug): Add missing comment.
	(show_opaque_type_resolution): Likewise.
	(show_overload_debug): Likewise.
	(print_bit_vector): Remove unnecessary forward declaration.
	(print_arg_types): Likewise.
	(dump_fn_fieldlists): Likewise.
	(print_cplus_stuff): Likewise.
@
text
@a2036 1
    case TYPE_CODE_BITSTRING:
a3076 3
    case TYPE_CODE_BITSTRING:
      printf_filtered ("(TYPE_CODE_BITSTRING)");
      break;
@


1.238
log
@	* gdbtypes.c (struct extra): Delete, unused.
@
text
@d113 10
a122 1
int opaque_type_resolution = 1;
d134 1
a134 1
unsigned int overload_debug = 0;
a143 4
static void print_bit_vector (B_TYPE *, int);
static void print_arg_types (struct field *, int, int);
static void dump_fn_fieldlists (struct type *, int);
static void print_cplus_stuff (struct type *, int);
@


1.237
log
@	* gdbtypes.c: Whitespace cleanup.
	(address_space_name_to_int): Remove "extern" from definition.
	(_initialize_gdbtypes): Declare with initialize_file_ftype.
@
text
@a134 6
struct extra
  {
    char str[128];
    int len;
  };				/* Maximum extension is 128!  FIXME  */

@


1.236
log
@	* gdbtypes.c (make_pointer_type): Remove redundant setting of
	TYPE_POINTER_TYPE (type).
@
text
@d113 1
a114 1
int opaque_type_resolution = 1;
d126 1
d145 1
a145 2


a227 1

d254 1
d315 1
a315 2
  /* FIXME!  Assume the machine has only one representation for
     pointers!  */
a450 1

d499 2
a500 1
extern int
d622 1
d675 1
a1265 1

d1917 1
a1926 1

d1995 2
d2231 1
a2808 1

d2810 2
d3323 1
a3323 1

d3512 1
a3512 2


d3517 1
d3537 1
d3556 1
d3573 1
d3591 1
d3613 1
d3628 1
d3645 1
d3667 1
d3683 1
d3702 1
d3742 1
a3749 1

a3885 1

d4049 1
a4050 1
extern void _initialize_gdbtypes (void);
@


1.235
log
@gdb/
	* dwarf2loc.c (entry_values_debug): Add 'unsigned'.
	(_initialize_dwarf2loc): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* dwarf2loc.h: Update the declaration of 'entry_values_debug'.
	* dwarf2read.c (dwarf2_die_debug): Add 'unsigned'.
	(_initialize_dwarf2_read): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* darwin-nat.c (dwarwin_debug_flag): Add 'unsigned'.
	(_initialize_darwin_inferior): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* frame.c (frame_debug): Add 'unsigned'.
	(_intialize_frame): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* frame.h: Update the declaration of 'frame_debug'.
	* gdbtypes.c (overload_debug): Add 'unsigned'.
	(_initialize_gdbtypes): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* inferior.h: Update declaration of 'debug_infrun'.
	* infrun.c (debug_infrun): Add 'unsigned'.
	(_initialize_infrun): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* jit.c (jit_debug): Add 'unsigned'.
	(_initialize_jit): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* linux-nat.c (debug_linux_nat): Add 'unsigned'.
	(_initialize_linux_nat): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* linux-thread-db.c (libthread_db_debug): Add 'unsigned'.
	(_initialize_thread_db): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* machoread.c (mach_o_debug_level): Add 'unsigned'.
	(_initialize_machoread): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* mi/mi-cmd-var.c: Update the declaration of 'varobjdebug'.
	* microblaze-tdep.c (microblaze_debug_flag): Add 'unsigned'.
	(_initialize_microblaze_tdep): Call add_setshow_zuinteger_cmd
	intead of add_setshow_zinteger_cmd.
	* mips-tdep.c (mips_debug): Add 'unsigned'.
	(_initialize_mips_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* monitor.c (monitor_debug): Add 'unsigned'.
	(_initialize_remote_monitors): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* observer.c (observer_debug): Add 'unsigned'.
	(_initialize_observer): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* parse.c (expressiondebug): Add 'unsigned'.
	(_initialize_parse): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.c (record_debug): Add 'unsigned'.
	(_initialize_record): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.h: Update the declaration of 'record_debug'.
	* stap-probe.c (stap_expression_debug): Add 'unsigned'.
	(_initialize_stap_probe): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* serial.c (global_serial_debug_p): Add 'unsigned'.
	(_initialize_serial): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-dsbt.c (solib_dsbt_debug): Add 'unsigned'.
	(_initialize_dsbt_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-frv.c (solib_frv_debug): Add 'unsigned'.
	(_initialize_frv_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* target.c (targetdebug): Add 'unsigned'.
	(initialize_targets): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* valops.c (overload_debug): Add 'unsigned'.
	* varobj.c (varobjdebug): Add 'unsigned'.
	(_initialize_varobj): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* xtensa-tdep.c (xtensa_debug_level): Add 'unsigned'.
	(_initialize_xtensa_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.

	* arch-utils.h: Remove the declaration of 'gdbarch_debug'.
	* gdbarch.sh (gdbarch_debug): Add 'unsigned'.
	(extern void _initialize_gdbarch): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* gdbarch.c, gdbarch.h: Re-generated.
@
text
@a326 3
  if (!TYPE_POINTER_TYPE (type))	/* Remember it, if don't have one.  */
    TYPE_POINTER_TYPE (type) = ntype;

@


1.234
log
@	* c-exp.y (check_parameter_typelist): New function.
	(parameter_typelist): Call it.
	* eval.c (make_params): Handle '(void)' case.
	* gdbtypes.c (lookup_function_type_with_arguments): Handle
	'(void)' case.
testsuite
	* gdb.base/whatis.exp: Add error checks for improper 'void' uses.
	* gdb.base/callfuncs.exp: Add cast-based test.
	* gdb.base/callfuncs.c (voidfunc): New function.
@
text
@d125 1
a125 1
int overload_debug = 0;
d4047 8
a4054 8
  add_setshow_zinteger_cmd ("overload", no_class, &overload_debug,
			    _("Set debugging of C++ overloading."),
			    _("Show debugging of C++ overloading."),
			    _("When enabled, ranking of the "
			      "functions is displayed."),
			    NULL,
			    show_overload_debug,
			    &setdebuglist, &showdebuglist);
@


1.233
log
@	* c-exp.y (DOTDOTDOT): New token.
	(func_mod, exp): Use parameter_typelist.
	(parameter_typelist): New production.
	(tokentab3): Add "..." token.
	* eval.c (make_params): Handle varargs.
	* gdbtypes.c (lookup_function_type_with_arguments): Handle
	varargs.
testsuite
	* gdb.base/whatis.exp: Add test.
@
text
@d477 1
a477 1
  if (nparams > 0 && param_types[nparams - 1] == NULL)
d479 13
a491 2
      --nparams;
      TYPE_VARARGS (fn) = 1;
@


1.232
log
@	PR exp/9608:
	* c-exp.y (%union) <tvec>: Change type.
	(func_mod): Now uses <tvec> type.
	(exp): Update for tvec change.
	(direct_abs_decl): Push the typelist.
	(func_mod): Return a typelist.
	(nonempty_typelist): Update for tvec change.
	* gdbtypes.c (lookup_function_type_with_arguments): New function.
	* gdbtypes.h (lookup_function_type_with_arguments): Declare.
	* parse.c (pop_type_list): New function.
	(push_typelist): New function.
	(follow_types): Handle tp_function_with_arguments.
	* parser-defs.h (type_ptr): New typedef.  Define a VEC.
	(enum type_pieces) <tp_function_with_arguments>: New constant.
	(union type_stack_elt) <typelist_val>: New field.
	(push_typelist): Declare.
testsuite
	* gdb.base/whatis.exp: Add regression test.
@
text
@d466 2
a467 1
   function type.  */
d477 6
@


1.231
log
@	* gdbtypes.c (lookup_typename): Rename local variable "tmp" to "type".
@
text
@d465 19
@


1.230
log
@	* gdbtypes.c (lookup_typename): Simplify.
@
text
@d1143 1
a1143 1
  struct type *tmp;
d1149 3
a1151 3
  tmp = language_lookup_primitive_type_by_name (language, gdbarch, name);
  if (tmp)
    return tmp;
@


1.229
log
@gdb/
	PR symtab/7259:
	* ada-exp.y (convert_char_literal): Use TYPE_FIELD_ENUMVAL.
	* ada-lang.c (ada_discrete_type_high_bound)
	(ada_discrete_type_low_bound): Use TYPE_FIELD_ENUMVAL for
	TYPE_CODE_ENUM.
	(ada_identical_enum_types_p): Use TYPE_FIELD_ENUMVAL.
	(pos_atr, value_val_atr): Use TYPE_FIELD_ENUMVAL for TYPE_CODE_ENUM.
	* ada-typeprint.c (print_enum_type): Change variable lastval to LONGEST.
	Use TYPE_FIELD_ENUMVAL.
	* ada-valprint.c (print_optional_low_bound, ada_print_scalar)
	(ada_val_print_1): Use TYPE_FIELD_ENUMVAL for TYPE_CODE_ENUM.
	* c-typeprint.c (c_type_print_base): Move variable lastval to inner
	block, change it to LONGEST.  Use TYPE_FIELD_ENUMVAL for
	TYPE_CODE_ENUM.
	* coffread.c (coff_read_enum_type): Use SET_FIELD_ENUMVAL.
	* dwarf2read.c (process_enumeration_scope): Likewise.
	* gdb-gdb.py (TypeFlagsPrinter): Use field.enumval instead of
	field.bitpos.
	(class StructMainTypePrettyPrinter): Support also
	FIELD_LOC_KIND_ENUMVAL.
	* gdbtypes.c (get_discrete_bounds): Use TYPE_FIELD_ENUMVAL for
	TYPE_CODE_ENUM.
	(recursive_dump_type): Use TYPE_FIELD_ENUMVAL for TYPE_CODE_ENUM.
	(copy_type_recursive): Support also FIELD_LOC_KIND_ENUMVAL.
	* gdbtypes.h (enum field_loc_kind): New FIELD_LOC_KIND_ENUMVAL.
	(struct main_type.flds_bnds.fields.loc): Adjust bitpos comment.  New
	field enumval.
	(struct main_type.flds_bnds.bields): Adjust loc_kind and bitsize to
	accommodate enumval.
	(struct call_site): Adjust loc_kind to accommodate enumval.
	(FIELD_ENUMVAL, FIELD_ENUMVAL_LVAL, SET_FIELD_ENUMVAL)
	(TYPE_FIELD_ENUMVAL): New macros.
	* m2-typeprint.c (m2_enum): Use TYPE_FIELD_ENUMVAL.
	* mdebugread.c (parse_symbol): Use TYPE_FIELD_ENUMVAL for
	TYPE_CODE_ENUM.
	* p-typeprint.c (pascal_type_print_base): Likewise.
	* python/lib/gdb/printing.py (class FlagEnumerationPrinter): Use
	enumval.
	* python/lib/gdb/types.py (make_enum_dict): Likewise.
	* python/py-type.c (convert_field): New variable addrstring.  Use
	TYPE_FIELD_ENUMVAL for TYPE_CODE_ENUM.
	(check_types_equal): Support also FIELD_LOC_KIND_ENUMVAL.
	* stabsread.c (read_enum_type): Use SET_FIELD_ENUMVAL.
	* typepint.c (print_type_scalar): Use TYPE_FIELD_ENUMVAL for
	TYPE_CODE_ENUM.
	* valprint.c (generic_val_print): Likewise.

gdb/testsuite/
	PR symtab/7259:
	* gdb.base/enumval.c: New test case.
	* gdb.base/enumval.exp: New test case.
	* gdb.python/py-type.exp (test_enums): Use field.enumval instead of
	field.bitpos.
@
text
@d1146 10
a1155 17
  if (sym == NULL || SYMBOL_CLASS (sym) != LOC_TYPEDEF)
    {
      tmp = language_lookup_primitive_type_by_name (language, gdbarch, name);
      if (tmp)
	{
	  return tmp;
	}
      else if (!tmp && noerr)
	{
	  return NULL;
	}
      else
	{
	  error (_("No type named %s."), name);
	}
    }
  return (SYMBOL_TYPE (sym));
@


1.228
log
@2012-04-17  Pedro Alves  <palves@@redhat.com>

	* gdbtypes.h (FIELD_BITPOS): Rename to ...
	(FIELD_BITPOS_LVAL): ... this.
	(FIELD_BITPOS): New.
	(SET_FIELD_BITPOS): Adjust to use FIELD_BITPOS_LVAL.
	* dwarf2read.c (dwarf2_add_field): Use SET_FIELD_BITPOS.
	* gdbtypes.c (append_composite_type_field_aligned): Adjust to use
	SET_FIELD_BITPOS.
	* gnu-v3-abi.c (build_gdb_vtable_type): Adjust to use
	SET_FIELD_BITPOS.
	* stabsread.c (read_cpp_abbrev, read_one_struct_field)
	(read_baseclasses): Adjust to use SET_FIELD_BITPOS.
	* target-descriptions.c (tdesc_gdb_type): Adjust to use
	SET_FIELD_BITPOS.
@
text
@d778 1
a778 1
	  *lowp = *highp = TYPE_FIELD_BITPOS (type, 0);
d781 4
a784 4
	      if (TYPE_FIELD_BITPOS (type, i) < *lowp)
		*lowp = TYPE_FIELD_BITPOS (type, i);
	      if (TYPE_FIELD_BITPOS (type, i) > *highp)
		*highp = TYPE_FIELD_BITPOS (type, i);
d3200 9
a3208 4
      printfi_filtered (spaces + 2,
			"[%d] bitpos %d bitsize %d type ",
			idx, TYPE_FIELD_BITPOS (type, idx),
			TYPE_FIELD_BITSIZE (type, idx));
d3405 4
@


1.227
log
@gdb/
	Do not rely on FIELD_LOC_KIND_BITPOS being zero.
	* ada-lang.c (ada_template_to_fixed_record_type_1): Replace
	TYPE_FIELD_BITPOS used as lvalue by SET_FIELD_BITPOS.
	* gdbtypes.c (append_flags_type_flag): Likewise, twice.
	* jv-lang.c (java_link_class_type): Likewise, once.
	* stabsread.c (read_enum_type): Likewise.
@
text
@d3669 4
a3672 3
	  FIELD_BITPOS (f[0]) = (FIELD_BITPOS (f[-1])
				 + (TYPE_LENGTH (FIELD_TYPE (f[-1]))
				    * TARGET_CHAR_BIT));
d3683 1
a3683 1
		  FIELD_BITPOS (f[0]) += (alignment - left);
@


1.226
log
@	* gdbtypes.h (struct main_type): Change type of name,tag_name,
	and fields.name members from char * to const char *.  All uses updated.
	(struct cplus_struct_type): Change type of fn_fieldlists.name member
	from char * to const char *.  All uses updated.
	(type_name_no_tag): Update.
	(lookup_unsigned_typename, lookup_signed_typename): Update.
	* gdbtypes.c (type_name_no_tag): Change result type
	from char * to const char *.  All callers updated.
	(lookup_unsigned_typename, lookup_signed_typename): Change type of
	name parameter from char * to const char *.
	* symtab.h (struct cplus_specific): Change type of demangled_name
	member from char * to const char *.  All uses updated.
	(struct general_symbol_info): Change type of name and
	mangled_lang.demangled_name members from char * to const char *.
	All uses updated.
	(symbol_get_demangled_name, symbol_natural_name): Update.
	(symbol_demangled_name, symbol_search_name): Update.
	* symtab.c (symbol_get_demangled_name): Change result type
	from char * to const char *.  All callers updated.
	(symbol_natural_name, symbol_demangled_name): Ditto.
	(symbol_search_name): Ditto.
	(completion_list_add_name): Change type of symname,sym_text,
	text,word parameters from char * to const char *.
	(completion_list_objc_symbol): Change type of sym_text,
	text,word parameters from char * to const char *.
	* ada-lang.c (find_struct_field): Change type of name parameter
	from char * to const char *.
	(encoded_ordered_before): Similarly for N0,N1 parameters.
	(old_renaming_is_invisible): Similarly for function_name parameter.
	(ada_type_name): Change result type from char * to const char *.
	All callers updated.
	* ada-lang.h (ada_type_name): Update.
	* buildsym.c (hashname): Change type of name parameter
	from char * to const char *.
	* buildsym.h (hashname): Update.
	* dbxread.c (end_psymtab): Change type of include_list parameter
	from char ** to const char **.
	* dwarf2read.c (determine_prefix): Change result type
	from char * to const char *.  All callers updated.
	* f-lang.c (find_common_for_function): Change type of name, funcname
	parameters from char * to const char *.
	* f-lang.c (find_common_for_function): Update.
	* f-valprint.c (list_all_visible_commons): Change type of funcname
	parameters from char * to const char *.
	* gdbarch.sh (static_transform_name): Change type of name parameter
	and result from char * to const char *.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* i386-sol2-tdep.c (i386_sol2_static_transform_name): Change type
	of name parameter from char * to const char *.
	* jv-lang.c (java_primitive_type_from_name): Ditto.
	(java_demangled_signature_length): Similarly for signature parameter.
	(java_demangled_signature_copy): Ditto.
	(java_demangle_type_signature): Ditto.
	* jv-lang.h (java_primitive_type_from_name): Update.
	(java_demangle_type_signature): Update.
	* objc-lang.c (specialcmp): Change type of a,b parameters
	from char * to const char *.
	* p-lang.c (is_pascal_string_type): Change type of arrayname parameter
	from char * to const char *.  All callers updated.
	* p-lang.h (is_pascal_string_type): Update.
	* solib-frv.c (find_canonical_descriptor_in_load_object): Change type
	of name parameter from char * to const char *.
	* sparc-sol2-tdep.c (sparc_sol2_static_transform_name): Ditto.
	* utils.c (fprintf_symbol_filtered): Ditto.
	* defs.h (fprintf_symbol_filtered): Update.
	* sparc-tdep.h (sparc_sol2_static_transform_name): Update.
	* stabsread.h (end_psymtab): Update.
	* stack.c (find_frame_funname): Change type of funname parameter
	from char ** to const char **.
	* stack.h (find_frame_funname): Update.
	* typeprint.c (type_print): Change type of varstring parameter
	from char * to const char *.
	* value.h (type_print): Update.
	* xcoffread.c (xcoff_start_psymtab): Change type of filename parameter
	from char * to const char *.  All callers updated.
	(xcoff_end_psymtab): Change type of include_list parameter
	from char ** to const char **.  All callers updated.
	(swap_sym): Similarly for name parameter.  All callers updated.
	* coffread.c (patch_type): Add (char*) cast to xfree parameter.
	Use xstrdup.
	(process_coff_symbol): Use xstrdup.
	* stabsread.c (stabs_method_name_from_physname): Renamed from
	update_method_name_from_physname.  Change result type from void
	to char *.  All callers updated.
	(read_member_functions): In has_destructor case, store name in objfile
	obstack instead of malloc space.  In !has_stub case, fix mem leak.
@
text
@d3609 1
a3609 1
      TYPE_FIELD_BITPOS (type, bitpos) = bitpos;
d3614 1
a3614 1
      TYPE_FIELD_BITPOS (type, bitpos) = -1;
@


1.225
log
@	* gdbtypes.c (safe_parse_type): Initialize type to keep gcc happy.
	* varobj.c (varobj_set_value): Initialize val,value to keep gcc happy.
@
text
@d1095 1
a1095 1
char *
d1167 1
a1167 1
			  struct gdbarch *gdbarch, char *name)
d1178 1
a1178 1
			struct gdbarch *gdbarch, char *name)
d1341 1
a1341 1
      char *t_field_name = TYPE_FIELD_NAME (type, i);
d1483 1
a1483 1
	  char *name;
d1546 1
a1546 1
      char *name = type_name_no_tag (type);
d1580 1
a1580 1
      char *name = type_name_no_tag (type);
@


1.224
log
@	* Makefile.in (SFILES): Remove wrapper.c.
	(HFILES_NO_SRCDIR): Remove wrapper.h.
	(COMMON_OBS): Remove wrapper.o.
	* cli/cli-interp.c: Don't inlude wrapper.h.
	* corelow.c: Likewise.
	(core_open): Replace gdb_target_find_new_threads with
	TRY_CATCH around target_find_new_threads.
	* eval.c (fetch_subexp_value): Likewise for value_fetch_lazy.
	* gdbtypes.c (safe_parse_type): Likewise for parse_and_eval_type.
	* varobj.c (varobj_create): Likewise for parse_exp_1 and
	evaluate_expression.
	(varobj_set_value): Likewise for evaluate_expression and
	value_assign.
	(install_new_variable): Likewise for value_fetch_lazy.
	(adjust_value_for_child_access): Likewise for value_ind.
	(c_describe_child): Likewise for value_subscript and
	value_ind.
	(c_value_of_root): Likewise for evaluate_expression.
	* wrapper.c: Remove.
	* wrapper.h: Remove.
@
text
@d1677 1
a1677 1
  struct type *type;
@


1.223
log
@	* gdbtypes.h (struct cplus_struct_type): Delete member
	nfn_fields_total.  All uses removed.
@
text
@a35 1
#include "wrapper.h"
d39 1
a39 1

d1678 1
d1685 6
a1690 1
  if (!gdb_parse_and_eval_type (p, length, &type))
@


1.222
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a2897 2
  printfi_filtered (spaces, "nfn_fields_total %d\n",
		    TYPE_NFN_FIELDS_TOTAL (type));
@


1.221
log
@	* gdbtypes.c (check_typedef): Document that this function can
	throw an exception.
@
text
@d3 1
a3 3
   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002,
   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.221.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 3
a5 1
   Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@


1.220
log
@	PR c++/13225
	* eval.c (evaluate_subexp_standard): Do not construct
	an array of types; pass the value array directly to
	find_overload_match.
	* gdbtypes.h (NULL_POINTER_CONVERSION_BADNESS): Declare.
	(rank_function): Take an array of values instead of types.
	(rank_one_type): Add struct value * parameter.
	* gdbtypes.c (NULL_POINTER_CONVERSION_BADNESS): Define.
	(rank_function): For each argument, pass the argument's
	value to rank_one_type.
	(rank_one_type): Add VALUE parameter.
	If the parameter type is a pointer and the argument type
	is an integer, return NULL_POINTER_CONVERSION_BADNESS if
	VALUE is zero.
	Update all calls to rank_one_type, passing NULL for new
	VALUE parameter.
	* valarith.c (value_user_defined_cpp_op): Do not construct
	an array of types; pass the value array directly to
	find_overload_match.
	* valops.c (find_overload_method_list): Take an array of
	values instead of types.
	Save the type of OBJP for later use.
	Update calls to find_oload_champ, and find_oload_champ_namespace.
	(find_oload_champ_namespace): Take an array of values instead
	of types.
	(find_oload_champ_namespace_loop): Likewise.
	(find_oload_champ): Likewise.
	(classify_oload_match): Inspect all arguments
	until INCOMPATIBLE is found. Return the worst badness found
	otherwise.
	(compare_parameters): Update call to rank_one_type.
	* value.h (find_overload_match): Take an array of values instead
	of types.
@
text
@d1457 4
@


1.219
log
@gdb/
	Code reshuffle.
	* gdb-gdb.py (StructMainTypePrettyPrinter): Change
	TYPE_SPECIFIC_CALLING_CONVENTION to TYPE_SPECIFIC_FUNC.  Move
	calling_convention under func_stuff there.
	* gdbtypes.c (make_function_type): Call INIT_FUNC_SPECIFIC.
	(init_type) <TYPE_CODE_FUNC>: Likewise.
	(recursive_dump_type): Change TYPE_SPECIFIC_CALLING_CONVENTION to
	TYPE_SPECIFIC_FUNC.  New comment for tail_call_list.
	* gdbtypes.h (enum type_specific_kind): Change
	TYPE_SPECIFIC_CALLING_CONVENTION to TYPE_SPECIFIC_FUNC.
	(struct main_type) <type_specific>: Change calling_convention to
	func_stuff.  Move calling_convention to ...
	(struct func_type): ... this new struct.
	(INIT_FUNC_SPECIFIC): New #define.
	(TYPE_CALLING_CONVENTION): Change calling_convention to func_stuff.
@
text
@d63 1
a63 1

d2286 1
a2286 1
	       struct type **args, int nargs)
d2309 2
a2310 1
    bv->rank[i] = rank_one_type (parms[i-1], args[i-1]);
d2409 1
d2417 1
a2417 1
rank_one_type (struct type *parm, struct type *arg)
d2433 1
a2433 1
    return (sum_ranks (rank_one_type (parm, TYPE_TARGET_TYPE (arg)),
d2436 1
a2436 1
    return (sum_ranks (rank_one_type (TYPE_TARGET_TYPE (parm), arg),
d2473 1
a2473 1
	  return rank_one_type (TYPE_TARGET_TYPE (parm), arg);
d2475 8
d2497 1
a2497 1
				TYPE_TARGET_TYPE (arg));
d2505 1
a2505 1
	  return rank_one_type (parm, TYPE_TARGET_TYPE (arg));
d2761 1
a2761 1
				TYPE_FIELD_TYPE (arg, 0));
@


1.218
log
@	* varobj.c (update_dynamic_varobj_children): Make 'name' const.
	* symtab.h (lookup_struct, lookup_union, lookup_enum): Update.
	* python/python.c (gdbpy_parameter): Make 'arg' const.
	(execute_gdb_command): Likewise.
	(gdbpy_decode_line): Likewise.  Copy it.
	(gdbpy_parse_and_eval): Make 'expr_string' const.  Copy it.
	(gdbpy_write): Make 'arg' const.
	* python/py-type.c (typy_lookup_typename): Make 'type_name'
	const.
	(gdbpy_lookup_type): Likewise.
	* python/py-prettyprint.c (print_children): Make 'name' const.
	* python/py-param.c (parmpy_init): Make 'name' const.  Copy it.
	* python/py-inferior.c (infpy_write_memory): Make 'buf_len' a
	Py_ssize_t.
	* python/py-function.c (fnpy_init): Make 'name' const.
	* python/py-cmd.c (cmdpy_init): Make 'name' const.  Copy it.
	(gdbpy_string_to_argv): Make 'input' const.
	* python/py-breakpoint.c (bppy_init): Make 'spec' const.  Copy
	it.
	* gdbtypes.h (lookup_typename): Update.
	* gdbtypes.c (lookup_typename): Make 'name' const.
	(lookup_struct): Likewise.
	(lookup_union): Likewise.
	(lookup_enum): Likewise.
@
text
@d453 2
d1956 1
a1956 1
        TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_CALLING_CONVENTION;
d3262 1
a3262 1
      case TYPE_SPECIFIC_CALLING_CONVENTION:
d3265 1
@


1.217
log
@http://sourceware.org/ml/gdb-patches/2011-06/msg00136.html

2011-06-23  Andrew Burgess  <aburgess@@broadcom.com>

	* gdbtypes.c (append_composite_type_field_aligned): Fix
	calculation of bit position based on alignment.
@
text
@d1140 1
a1140 1
		 struct gdbarch *gdbarch, char *name,
d1197 1
a1197 1
lookup_struct (char *name, struct block *block)
d1219 1
a1219 1
lookup_union (char *name, struct block *block)
d1244 1
a1244 1
lookup_enum (char *name, struct block *block)
@


1.216
log
@gdb/
	* c-exp.y (qualified_name): Call destructor_name_p with $1.type.
	(classify_inner_name): Call cp_lookup_nested_type with
	yylval.tsym.type.
	* cp-namespace.c (cp_lookup_nested_type): New variable
	saved_parent_type.  Call CHECK_TYPEDEF for parent_type.  Call
	type_name_no_tag_or_error with saved_parent_type.
	* dwarf2read.c (load_partial_dies): Read in any children of
	DW_TAG_typedef with complaint in such case.
	* gdbtypes.c (type_name_no_tag_or_error): New function.
	* gdbtypes.h (type_name_no_tag_or_error): New prototype.
	* valops.c (destructor_name_p): New comment for parameter type.  Remove
	type const.  Make dname and cp const.  Call type_name_no_tag_or_error.
	* value.h (destructor_name_p): Remove type const.
@
text
@d3657 4
a3660 1
	      int left = FIELD_BITPOS (f[0]) % (alignment * TARGET_CHAR_BIT);
d3664 2
a3665 2
		  FIELD_BITPOS (f[0]) += left;
		  TYPE_LENGTH (t) += left / TARGET_CHAR_BIT;
@


1.215
log
@gdb/
	GDB internal type support for STT_GNU_IFUNC.
	* elfread.c (record_minimal_symbol): Support mst_text_gnu_ifunc.
	(elf_symtab_read): Set mst_text_gnu_ifunc for
	BSF_GNU_INDIRECT_FUNCTION.
	* eval.c (evaluate_subexp_standard): Support TYPE_GNU_IFUNC.
	* gdbtypes.c (init_type): Support TYPE_FLAG_GNU_IFUNC,
	builtin_func_func, nodebug_text_gnu_ifunc_symbol and
	nodebug_got_plt_symbol.
	* gdbtypes.h (enum type_flag_value): New entry TYPE_FLAG_GNU_IFUNC.
	(TYPE_GNU_IFUNC): New.
	(struct main_type): New field flag_gnu_ifunc.
	(struct builtin_type): New field builtin_func_func.
	(struct objfile_type): New fields nodebug_text_gnu_ifunc_symbol and
	nodebug_got_plt_symbol.
	* minsyms.c (lookup_minimal_symbol_text): Support mst_text_gnu_ifunc.
	(in_gnu_ifunc_stub): New.
	(prim_record_minimal_symbol, find_solib_trampoline_target): Support
	mst_text_gnu_ifunc.
	* parse.c (write_exp_msymbol): New variable ifunc_msym.  Detect and
	support mst_text_gnu_ifunc.  Support mst_slot_got_plt.
	* solib-svr4.c (svr4_in_dynsym_resolve_code): Return true also for
	in_gnu_ifunc_stub.
	* symmisc.c (dump_msymbols): Support mst_text_gnu_ifunc.
	* symtab.c (search_symbols): Likewise.
	* symtab.h (enum minimal_symbol_type): New fields mst_text_gnu_ifunc
	and mst_slot_got_plt.
	(in_gnu_ifunc_stub): New declaration.
@
text
@d1108 26
@


1.214
log
@	gdb/
	* exceptions.h (NOT_AVAILABLE_ERROR): New error.
	* value.c: Include "exceptions.h".
	(require_available): Throw NOT_AVAILABLE_ERROR instead of a
	generic error.
	* cp-abi.c: Include gdb_assert.h.
	(baseclass_offset): Add `embedded_offset' and `val' parameters.
	Assert the method is implemented.  Wrap NOT_AVAILABLE_ERROR
	errors.
	* cp-abi.h (baseclass_offset): Add `embedded_offset' and `val'
	parameters.  No longer returns -1 on error.
	(struct cp_abi_ops) <baseclass_offset>: Add `embedded_offset' and
	`val' parameters.
	* cp-valprint.c: Include exceptions.h.
	(cp_print_value): Handle NOT_AVAILABLE_ERROR errors when fetching
	the baseclass_offset.  Handle unavailable base classes.  Use
	val_print_invalid_address.
	* p-valprint.c: Include exceptions.h.
	(pascal_object_print_value): Handle NOT_AVAILABLE_ERROR errors
	when fetching the baseclass_offset.  No longer expect
	baseclass_offset returning -1.  Handle unavailable base classes.
	Use val_print_invalid_address.
	* valops.c (dynamic_cast_check_1): Rename `contents' parameter to
	`valaddr' parameter, and change its type to gdb_byte pointer.  Add
	`embedded_offset' and `val' parameters.  Adjust.
	(dynamic_cast_check_2): Rename `contents' parameter to `valaddr'
	parameter, and change its type to gdb_byte pointer.  Add
	`embedded_offset' and `val' parameters.  Adjust.  No longer expect
	baseclass_offset returning -1.
	(value_dynamic_cast): Use value_contents_for_printing rather than
	value_contents.  Adjust.
	(search_struct_field): No longer expect baseclass_offset returning
	-1.
	(search_struct_method): If reading memory from the target is
	necessary, wrap it in a new value to pass to baseclass_offset.  No
	longer expect baseclass_offset returning -1.
	(find_method_list): No longer expect baseclass_offset returning
	-1.  Use value_contents_for_printing rather than value_contents.
	* valprint.c (val_print_invalid_address): New function.
	* valprint.h (val_print_invalid_address): Declare.
	* gdbtypes.c (is_unique_ancestor_worker): New `embedded_offset'
	and `val' parameters.  No longer expect baseclass_offset returning
	-1.  Adjust.
	* gnu-v2-abi.c: Include "exceptions.h".
	(gnuv2_baseclass_offset): Add `embedded_offset' and `val'
	parameters.  Handle unavailable memory.  Recurse through
	gnuv2_baseclass_offset directly, rather than through
	baseclass_offset.  No longer returns -1 on not found, instead
	throw an error.
	* gnu-v3-abi.c (gnuv3_baseclass_offset): Add `embedded_offset' and
	`val' parameters.  Adjust.

	gdb/testsuite/
	* gdb.trace/unavailable.cc (class Base, class Middle, class
	Derived): New types.
	(derived_unavail, derived_partial, derived_whole): New globals.
	(virtual_partial): New global.
	(virtualp): Point at virtual_partial.
	* gdb.trace/unavailable.exp (gdb_collect_globals_test): Add tests
	related to unavailable vptr.
@
text
@d1905 2
d3777 2
d3892 12
@


1.213
log
@2011-01-11  Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* breakpoint.c (resources_needed_watchpoint): Fix indentation.
	* gdbtypes.c (is_scalar_type_recursive): Fix formatting.
@
text
@d2104 2
a2105 1
			   const bfd_byte *contents, CORE_ADDR address)
d2114 2
a2115 2
      struct type *iter = check_typedef (TYPE_BASECLASS (dclass, i));
      int this_offset = baseclass_offset (dclass, i, contents, address);
d2117 4
a2120 2
      if (this_offset == -1)
	error (_("virtual baseclass botch"));
d2142 3
a2144 2
					    contents + this_offset,
					    address + this_offset);
d2159 3
a2161 2
				    value_contents (val),
				    value_address (val)) == 1;
@


1.212
log
@2011-01-11  Sergio Durigan Junior  <sergiodj@@linux.vnet.ibm.com>
	    Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	Implement support for PowerPC BookE ranged watchpoints.

gdb/
	* breakpoint.h
	(struct breakpoint_ops) <resources_needed>: New method.
	Initialize to NULL in all existing breakpoint_ops instances.
	(struct breakpoint) <exact>: New field.
	(target_exact_watchpoints): Declare external global.
	* breakpoint.c (target_exact_watchpoints): New global flag.
	(update_watchpoint): Set b->type to bp_hardware_watchpoint and
	b->enable_state to bp_enabled before calling
	hw_watchpoint_used_count.
	(hw_watchpoint_used_count): Iterate over all bp_locations in a
	watchpoint.  Call breakpoint's breakpoint_ops.resources_needed
	if available.
	(insert_watchpoint, remove_watchpoint): Use fixed length of 1 byte
	if the watchpoint is exact.
	(resources_needed_watchpoint): New function.
	(watchpoint_breakpoint_ops): Add resources_needed_watchpoint.
	(watch_command_1): Set b->exact if the user asked for an exact
	watchpoint and one can be set.
	(can_use_hardware_watchpoint): Add exact_watchpoints argument.
	Pass fixed length of 1 to target_region_ok_for_hw_watchpoint if
	the user asks for an exact watchpoint and one can be set.  Return
	number of needed debug registers to watch the expression.
	* gdbtypes.c (is_scalar_type): New function, based on
	valprint.c:scalar_type_p.
	(is_scalar_type_recursive): New function.
	* gdbtypes.h (is_scalar_type_recursive): Declare.
	* ppc-linux-nat.c (ppc_linux_region_ok_for_hw_watchpoint): Always
	handle regions when ranged watchpoints are available.
	(create_watchpoint_request): New function.
	(ppc_linux_insert_watchpoint, ppc_linux_remove_watchpoint): Use
	create_watchpoint_request.
	* rs6000-tdep.c (show_powerpc_exact_watchpoints): New function.
	(_initialize_rs6000_tdep): Add `exact-watchpoints' boolean to the
	`set powerpc' and `show powerpc' commands.
	* target.h (struct target_ops) <to_region_ok_for_hw_watchpoint>:
	Mention documentation comment in the target macro.
	(target_region_ok_for_hw_watchpoint): Document return value.

gdb/doc/
	* gdb.texinfo (PowerPC Embedded): Document ranged watchpoints and
	the "set powerpc exact-watchpoints" flag.
@
text
@d1980 2
a1981 2
   the memory layout of a scalar type. E.g., an array or struct with only one
   scalar element inside it, or a union with only scalar elements.  */
@


1.211
log
@2011-01-07  Michael Snyder  <msnyder@@vmware.com>

	* ada-lang.c: Comment cleanup, mostly periods and spaces.
	* ada-lang.h: Ditto.
	* ada-tasks.c: Ditto.
	* ada-valprint.c: Ditto.
	* aix-threads.c: Ditto.
	* alpha-linux-nat.c: Ditto.
	* alpha-linux-tdep.c: Ditto.
	* alpha-mdebug-tdep.c: Ditto.
	* alpha-nat.c: Ditto.
	* alpha-osf1-tdep.c: Ditto.
	* alpha-tdep.c: Ditto.
	* alphabsd-nat.c: Ditto.
	* alphabsd-tdep.c: Ditto.
	* amd64-darwin-tdep.c: Ditto.
	* amd64-linux-nat.c: Ditto.
	* amd64-linux-tdep.c: Ditto.
	* amd64-sol2-tdep.c: Ditto.
	* amd64-tdep.c: Ditto.
	* amd64-fbsd-tdep.c: Ditto.
	* amd64-nbsd-tdep.c: Ditto.
	* amd64-obsd-tdep.c: Ditto.
	* amd64-linux-nat.c: Ditto.
	* amd64-linux-tdep.c: Ditto.
	* arm-tdep.c: Ditto.
	* arm-tdep.h: Ditto.
	* armnbsd-nat.c: Ditto.
	* avr-tdep.c: Ditto.
	* bfin-tdep.c: Ditto.
	* bsd-kvm.c: Ditto.
	* c-typeprintc: Ditto.
	* c-valprint.c: Ditto.
	* coff-pe-read.h: Ditto.
	* coffreead.c: Ditto.
	* cris-tdep.c: Ditto.
	* d-lang.c: Ditto.
	* darwin-nat-info.c: Ditto.
	* darwin-nat.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* dcache.c: Ditto.
	* dcache.h: Ditto.
	* dec-thread.c: Ditto.
	* defs.h: Ditto.
	* demangle.c: Ditto.
	* dicos-tdep.c: Ditto.
	* dictionary.c: Ditto.
	* dictionary.h: Ditto.
	* dink32-rom.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dsrec.c: Ditto.
	* dummy-frame.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* environ.c: Ditto.
	* eval.c: Ditto.
	* event-top.h: Ditto.
	* exceptions.c: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-exp.y: Ditto.
	* f-lang.c: Ditto.
	* f-lang.h: Ditto.
	* f-typeprint.c: Ditto.
	* f-valprint.c: Ditto.
	* fbsd-nat.c: Ditto.
	* findvar.c: Ditto.
	* fork-child.c: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* frv-linux-tdep.c: Ditto.
	* frv-tdep.c: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_string.h: Ditto.
	* gdb_thread_db.h: Ditto.
	* gdb_wait.h: Ditto.
	* gdbarch.sh: Ditto.
	* gdbcore.h: Ditto.
	* gdbthread.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* gnu-nat.c: Ditto.
	* gnu-nat.h: Ditto.
	* gnu-v2-abi.c: Ditto.
	* gnu-v3-abi.c: Ditto.
	* go32-nat.c: Ditto.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
@
text
@d1958 62
@


1.210
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d776 1
a776 1
	     entries */
d831 1
a831 1
   Return 1 if the operation was successful. Return zero otherwise,
d911 1
a911 1
  /* TYPE_FLAG_TARGET_STUB will take care of zero length arrays */
d1249 1
a1249 1
  strcat (nam, " >");	/* FIXME, extra space still introduced in gcc? */
d1303 1
a1303 1
     I.E. when doing "ptype bell->bar" for "struct foo { int bar; int
d1387 1
a1387 1
		 it, it may have a different lifetime. PR 2384 */
d1433 1
a1433 1
   we can find a full definition in some other file. If so, copy this
d1595 1
a1595 1
	     is smaller than the low bound. */
d1609 1
a1609 1
		 high-order bit on). It uses the fact that
d1614 1
a1614 1
		 from unsigned int to ULONGEST. */
d1739 1
a1739 1
  if (*p != ')')		/* () means no args, skip while */
d1989 1
a1989 1
   distance_to_ancestor (A, D, 1) = -1  */
d2131 1
a2131 1
  /* a.rank > b.rank  */
d2135 1
a2135 1
/* Functions for overload resolution begin here */
d2196 1
a2196 1
  bv->length = nargs + 1;	/* add 1 for the length-match rank */
d2210 1
a2210 1
  /* Now rank all the parameters of the candidate function */
d2214 1
a2214 1
  /* If more arguments than parameters, add dummy entries */
d2291 1
a2291 2
  /*
     Well, damnit, if the names are exactly the same, I'll say they
d2294 1
a2294 2
     really are the same.
  */
d2346 1
a2346 1
  /* x -> y means arg of type x being supplied for parameter of type y */
d2412 1
a2412 1
		  /* This case only for character types */
d2603 1
a2603 1
      /* currently same as TYPE_CODE_CLASS */
d2666 1
a2666 1
/* End of functions for overload resolution */
d3304 1
a3304 1
  /* For range types, copy the bounds information. */
@


1.209
log
@run copyright.sh for 2011.
@
text
@d123 2
a124 2
  fprintf_filtered (file, _("\
Resolution of opaque struct/class/union types (if set before loading symbols) is %s.\n"),
d2433 2
a2434 1
			return INTEGER_PROMOTION_BADNESS;	/* unsigned int -> unsigned long */
d2436 2
a2437 1
			return INTEGER_CONVERSION_BADNESS;	/* unsigned long -> unsigned int */
d2445 2
a2446 1
			return INTEGER_CONVERSION_BADNESS;	/* signed long -> unsigned int */
d2448 2
a2449 1
			return INTEGER_CONVERSION_BADNESS;	/* signed int/long -> unsigned int/long */
d3112 2
a3113 1
			TYPE_HIGH_BOUND_UNDEFINED (type) ? " (undefined)" : "");
d3244 2
a3245 1
  stored = obstack_alloc (&objfile->objfile_obstack, sizeof (struct type_pair));
d3879 5
a3883 4
  add_setshow_zinteger_cmd ("overload", no_class, &overload_debug, _("\
Set debugging of C++ overloading."), _("\
Show debugging of C++ overloading."), _("\
When enabled, ranking of the functions is displayed."),
d3890 6
a3895 4
			   &opaque_type_resolution, _("\
Set resolution of opaque struct/class/union types (if set before loading symbols)."), _("\
Show resolution of opaque struct/class/union types (if set before loading symbols)."), NULL,
			   NULL,
@


1.208
log
@	* gdbtypes.c (check_typedef): Tweak comment.
@
text
@d4 1
a4 1
   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
@


1.207
log
@Fix derived class overload problem.

2010-11-04  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdbtypes.h (struct rank): Created subrank.
	* gdbtypes.c: Initialized subrank for all
	'BADNESS' constants.
	(distance_to_ancestor): New function.
	(is_ancestor): Use distance_to_ancestor.
	(is_public_ancestor): Ditto.
	(sum_ranks): Handle subrank.
	(compare_ranks): Ditto.
	(rank_one_type): Subrank base conversions.

2010-11-04  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdb.cp/overload.exp: Added test for inheritance
	overload.
	* gdb.cp/overload.cc: Ditto.
	* gdb.cp/oranking.exp: Removed releveant kfails.
@
text
@d1585 1
a1585 1
	  /* Empty.  */
@


1.206
log
@Create and use struct rank.

2010-11-04  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdbtypes.h: Create struct rank.
	Convert all 'BADNESS' macros to const struct rank declarations.
	(sum_ranks): New function.
	(compare_ranks): New function.
	* valops.c (find_oload_champ): Updated.
	(classify_oload_match): Use compare_ranks.
	Improved comments.
	(compare_parameters): Use compare_ranks.
	* gdbtypes.c: Initialize 'BADNESS' constants.
	(sum_ranks): New function.
	(compare_ranks): New function.
	(compare_badness): Use compare_ranks.
	(rank_function): Use global constants instead of literals.
	(rank_one_type): Ditto.
	Return struct rank.
	Use sum_ranks.
@
text
@d46 1
a46 1
const struct rank LENGTH_MISMATCH_BADNESS = {100};
d48 2
a49 2
const struct rank TOO_FEW_PARAMS_BADNESS = {100};
const struct rank INCOMPATIBLE_TYPE_BADNESS = {100};
d51 1
a51 1
const struct rank EXACT_MATCH_BADNESS = {0};
d53 10
a62 10
const struct rank INTEGER_PROMOTION_BADNESS = {1};
const struct rank FLOAT_PROMOTION_BADNESS = {1};
const struct rank BASE_PTR_CONVERSION_BADNESS = {1};
const struct rank INTEGER_CONVERSION_BADNESS = {2};
const struct rank FLOAT_CONVERSION_BADNESS = {2};
const struct rank INT_FLOAT_CONVERSION_BADNESS = {2};
const struct rank VOID_PTR_CONVERSION_BADNESS = {2};
const struct rank BOOL_PTR_CONVERSION_BADNESS = {3};
const struct rank BASE_CONVERSION_BADNESS = {2};
const struct rank REFERENCE_CONVERSION_BADNESS = {2};
d64 1
a64 1
const struct rank NS_POINTER_CONVERSION_BADNESS = {10};
d1970 20
a1989 4
/* Check whether BASE is an ancestor or base class of DCLASS
   Return 1 if so, and 0 if not.  If PUBLIC is 1 then only public
   ancestors are considered, and the function returns 1 only if
   BASE is a public ancestor of DCLASS.  */
d1992 1
a1992 1
do_is_ancestor (struct type *base, struct type *dclass, int public)
d1995 1
d2001 1
a2001 1
    return 1;
d2008 3
a2010 2
      if (do_is_ancestor (base, TYPE_BASECLASS (dclass, i), public))
	return 1;
d2013 1
a2013 1
  return 0;
d2025 1
a2025 1
  return do_is_ancestor (base, dclass, 0);
d2034 1
a2034 1
  return do_is_ancestor (base, dclass, 1);
d2106 1
d2119 8
a2126 1
    return 0;
d2131 1
d2322 1
d2363 5
a2367 3
	  if (is_ancestor (TYPE_TARGET_TYPE (parm),
	                          TYPE_TARGET_TYPE (arg)))
	    return BASE_PTR_CONVERSION_BADNESS;
d2606 3
a2608 2
	  if (is_ancestor (parm, arg))
	    return BASE_CONVERSION_BADNESS;
@


1.205
log
@gdb:
	* dwarf2read.c (read_array_type): Read the DW_AT_byte_size from the
	DIE and set the length of the type.
	* gdbtypes.h (get_array_bounds): Move here from valprint.h.
	* gdbtypes.c (get_array_bounds): Move here from valprint.c and
	return 0 if the corresponding bounds of the type are undefined.
	* valprint.h (get_array_bounds): Move declaration to gdbtypes.h.
	* valprint.c (get_array_bounds): Move implementation to gdbtypes.c.
	(val_print_array_elements): Use get_array_bounds to compute the number
	of array elements instead of dividing the length of the array by the
	length of the element types.
	* valarith.c (vector_binop): Likewise.
	* valops.c (value_cast): Likewise.
	* c-valprint.c (c_val_print): Likewise.
	* c-typeprint.c (c_type_print_varspec_suffix): Likewise.

gdb/testsuite:
	* gdb.base/gnu_vector.exp: Adjust expect messages.
@
text
@d44 22
d2081 26
d2131 1
a2131 1
      tmp = a->rank[i] - b->rank[i];
d2179 3
a2181 1
  LENGTH_MATCH (bv) = (nargs != nparms) ? LENGTH_MISMATCH_BADNESS : 0;
d2292 1
a2292 1
int
d2297 1
a2297 1
    return 0;
d2308 2
a2309 2
    return (rank_one_type (parm, TYPE_TARGET_TYPE (arg))
	    + REFERENCE_CONVERSION_BADNESS);
d2311 2
a2312 2
    return (rank_one_type (TYPE_TARGET_TYPE (parm), arg)
	    + REFERENCE_CONVERSION_BADNESS);
d2343 1
a2343 1
	    return 0;
d2386 1
a2386 1
		    return 0;	/* plain char -> plain char */
d2398 1
a2398 1
			return 0;
d2422 1
a2422 1
		    return 0;
d2488 1
a2488 1
		return 0;
d2495 1
a2495 1
		return 0;
d2500 1
a2500 1
	    return 0;
d2534 1
a2534 1
	  return 0;
d2546 1
a2546 1
	    return 0;
d2565 1
a2565 1
	  return 0;
@


1.204
log
@Support pointer to bool conversion.

2010-10-19  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdbtypes.h: Introduce BOOL_PTR_CONVERSION_BADNESS.
	* gdbtypes.c (rank_one_type): Use BOOL_PTR_CONVERSION_BADNESS
	for conversion.
	Make all other conversions illegal.

2010-10-19  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdb.cp/converts.exp: Test pointer to bool conversion.
	Test pointer to long conversion.
	* gdb.cp/oranking.exp: Removed relevant kfail.
@
text
@d805 44
@


1.203
log
@gdb/
	PR exp/12117
	* gdbtypes.c (check_typedef): Clean up function comment.
	Keep track of instance flags as we strip typedefs and create a new
	type to preserve them if necessary.
	* gdbtypes.h (type) <instance_flags>: Extend the comment.

gdb/testsuite/
	PR exp/12117
	* gdb.cp/ptype-cv-cp.cc: New file.
	* gdb.cp/ptype-cv-cp.exp: New file.
@
text
@a2258 1
	  return POINTER_CONVERSION_BADNESS;
d2436 1
d2438 1
a2438 1
	  return BOOLEAN_CONVERSION_BADNESS;
@


1.202
log
@Fixed void* vs int* overload issue (PR C++/10343).

2010-10-14  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdbtypes.h: Create BASE_PTR_CONVERSION_BADNESS.
	* gdbtypes.c (rank_one_type): Move type comparison code out of here
	to...
	(types_equal): ...here. And changed it as follows:
	Outside of typedefs type must be of the same TYPE_CODE.
	When compairing two pointers or references they are equal if their
	targets are equal.
	Correct pointer conversions.

2010-10-14  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdb.cp/converts.cc: New test program.
	* gdb.cp/converts.exp: New test.
	* gdb.cp/overload.exp: Added test for void* vs int*.
	* gdb.cp/overload.exp: Ditto.
	* gdb.cp/oranking.exp: Removed related kfail.
@
text
@d1350 15
a1364 1
/* Added by Bryan Boreham, Kewill, Sun Sep 17 18:07:17 1989.
d1372 1
a1372 14
   symbols which contain a full definition for the type.

   This used to be coded as a macro, but I don't think it is called 
   often enough to merit such treatment.

   Find the real type of TYPE.  This function returns the real type,
   after removing all layers of typedefs and completing opaque or stub
   types.  Completion changes the TYPE argument, but stripping of
   typedefs does not.

   If TYPE is a TYPE_CODE_TYPEDEF, its length is (also) set to the length of
   the target type instead of zero.  However, in the case of TYPE_CODE_TYPEDEF
   check_typedef can still return different type than the original TYPE
   pointer.  */
d1378 3
a1380 1
  int is_const, is_volatile;
d1394 1
a1394 1
	    return type;
d1404 1
a1404 1
	      return type;
d1413 26
a1440 3
  is_const = TYPE_CONST (type);
  is_volatile = TYPE_VOLATILE (type);

d1457 1
a1457 1
	  return type;
d1474 3
a1476 1
	    make_cv_type (is_const, is_volatile, newtype, &type);
d1495 1
a1495 1
	  return type;
d1501 1
a1501 1
             with the complete type only if they are int the same
d1504 3
a1506 2
            make_cv_type (is_const, is_volatile, 
			  SYMBOL_TYPE (sym), &type);
d1566 3
d1571 1
@


1.201
log
@Eliminate 'is_ancestor' redundant code.

2010-10-12  Sami Wagiaalla  <swagiaal@@redhat.com>

	* gdbtypes.c (do_is_ancestor): New function.
	(is_ancestor): Use do_is_ancestor.
	(is_public_ancestor): Use do_is_ancestor.
@
text
@d2105 50
d2168 2
a2169 5
  /* Identical type pointers.  */
  /* However, this still doesn't catch all cases of same type for arg
     and param.  The reason is that builtin types are different from
     the same ones constructed from the object.  */
  if (parm == arg)
a2177 15
  /*
     Well, damnit, if the names are exactly the same, I'll say they
     are exactly the same.  This happens when we generate method
     stubs.  The types won't point to the same address, but they
     really are the same.
  */

  if (TYPE_NAME (parm) && TYPE_NAME (arg) 
      && !strcmp (TYPE_NAME (parm), TYPE_NAME (arg)))
    return 0;

  /* Check if identical after resolving typedefs.  */
  if (parm == arg)
    return 0;

d2201 4
a2204 2
	  if (TYPE_CODE (TYPE_TARGET_TYPE (parm)) == TYPE_CODE_VOID
	      && TYPE_CODE (TYPE_TARGET_TYPE (arg)) != TYPE_CODE_VOID)
d2206 7
a2212 3
	  else
	    return rank_one_type (TYPE_TARGET_TYPE (parm), 
				  TYPE_TARGET_TYPE (arg));
d2214 4
a2217 2
	  return rank_one_type (TYPE_TARGET_TYPE (parm), 
				TYPE_TARGET_TYPE (arg));
@


1.200
log
@gdb:
	* gdbtypes.h (struct main_type): Remove flag_nottext.
	(enum type_flag_value): Remove TYPE_FLAG_NOTTEXT.
	(enum type_instance_flag_value): Add TYPE_INSTANCE_FLAG_NOTTEXT.
	(TYPE_NOTTEXT): Use TYPE_INSTANCE_FLAG_NOTTEXT instead of flag_nottext.
	* gdbtypes.c (make_vector_type): Use TYPE_INSTANCE_FLAG_NOTTEXT instead
	of TYPE_FLAG_NOTTEXT.
	(init_type): Remove the initialization of the flag_nottext field.
	(gdbtypes_post_init): Use TYPE_INSTANCE_FLAG_NOTTEXT instead of
	TYPE_FLAG_NOTTEXT.
	* c-valprint.c (c_val_print): Remove TYPE_VECTOR check.
gdb/testsuite:
	* gdb.base/gnu_vector.c: Add variable c4.
	* gdb.base/gnu_vector.exp: Add tests for character vector printing.
	* gdb.arch/altivec-abi.exp: Fix expect pattern of character vectors.
@
text
@d1871 4
a1874 5
/* Check whether BASE is an ancestor or base class or DCLASS 
   Return 1 if so, and 0 if not.
   Note: callers may want to check for identity of the types before
   calling this function -- identical types are considered to satisfy
   the ancestor relationship even if they're identical.  */
d1876 2
a1877 2
int
is_ancestor (struct type *base, struct type *dclass)
d1889 4
a1892 1
      if (is_ancestor (base, TYPE_BASECLASS (dclass, i)))
d1899 12
d1917 1
a1917 17
  int i;

  CHECK_TYPEDEF (base);
  CHECK_TYPEDEF (dclass);

  if (class_types_same_p (base, dclass))
    return 1;

  for (i = 0; i < TYPE_N_BASECLASSES (dclass); ++i)
    {
      if (! BASETYPE_VIA_PUBLIC (dclass, i))
	continue;
      if (is_public_ancestor (base, TYPE_BASECLASS (dclass, i)))
	return 1;
    }

  return 0;
@


1.199
log
@	Revert:
	2010-09-01  Tom Tromey  <tromey@@redhat.com>
	* dwarf2read.c, gdbtypes.c, psymtab.c, symfile.h, symtab.c,
	symtab.h: Revert earlier change.
@
text
@d945 1
a945 1
      flags = TYPE_INSTANCE_FLAGS (elt_type) | TYPE_FLAG_NOTTEXT;
a1803 2
  if (flags & TYPE_FLAG_NOTTEXT)
    TYPE_NOTTEXT (type) = 1;
d3491 4
a3494 2
  TYPE_NOTTEXT (builtin_type->builtin_int8) = 1;
  TYPE_NOTTEXT (builtin_type->builtin_uint8) = 1;
@


1.198
log
@	* symtab.h (lookup_type_symbol): Declare.
	* symtab.c (lookup_symbol_in_language_full): Rename from
	lookup_symbol_in_language.  Add 'for_type' argument.
	(lookup_symbol_in_language): New function.
	(lookup_type_symbol): Likewise.
	(lookup_symbol_aux): Add 'for_type' argument.
	(match_symbol_aux): New function.
	(lookup_symbol_aux_symtabs): Use expand_one_symtab_matching.
	(match_transparent_type): New function.
	(basic_lookup_transparent_type): Use expand_one_symtab_matching.
	* symfile.h (struct quick_symbol_functions)
	<pre_expand_symtabs_matching>: Remove.
	<expand_one_symtab_matching>: New field.
	* psymtab.c (expand_one_symtab_matching_psymtabs): New function.
	(pre_expand_symtabs_matching_psymtabs): Remove.
	(psym_functions): Update.
	* gdbtypes.c (lookup_typename): Use lookup_type_symbol.
	* dwarf2read.c (dw2_lookup_symbol): Update comment.
	(dw2_pre_expand_symtabs_matching): Remove.
	(dw2_expand_one_symtab_matching): New function.
	(dwarf2_gdb_index_functions): Update.
@
text
@d1054 1
a1054 1
  sym = lookup_type_symbol (name, block, VAR_DOMAIN, language->la_language);
@


1.197
log
@gdb
	PR symtab/11919:
	* gdbtypes.c (lookup_struct_elt_type): Clean up error emission.
	* parse.c (parse_field_expression): Use RETURN_MASK_ERROR.  Move
	name-copying lower.  Document exception behavior.
	* completer.c (expression_completer): Catch exceptions from
	parse_field_expression.
gdb/testsuite
	PR symtab/11919:
	* gdb.base/completion.exp: Add test.
@
text
@d1054 1
a1054 1
  sym = lookup_symbol (name, block, VAR_DOMAIN, 0);
@


1.196
log
@gdb
	PR c++/9946:
	* symfile.c (reread_symbols): Clear template_symbols.
	* symtab.h (struct symbol) <is_cplus_template_function>: New
	field.
	(SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION): New macro.
	(struct template_symbol): New.
	* symtab.c (lookup_symbol_aux_local): Use
	cp_lookup_symbol_imports_or_template.
	* objfiles.h (struct objfile) <template_symbols>: New field.
	* objfiles.c (relocate_one_symbol): New function.
	(objfile_relocate1): Use it.  Relocate isolated symbols.
	* gdbtypes.h (struct cplus_struct_type) <n_template_arguments,
	template_arguments>: New fields.
	(TYPE_N_TEMPLATE_ARGUMENTS): New macro.
	(TYPE_TEMPLATE_ARGUMENTS): Likewise.
	(TYPE_TEMPLATE_ARGUMENT): Likewise.
	(lookup_typename): Update.
	* gdbtypes.c (lookup_typename): Constify "block" argument.
	* dwarf2read.c: Include vec.h.
	(symbolp): New typedef.
	(read_func_scope): Read template arguments.  Allocate a
	template_symbol when needed.
	(read_structure_type): Read template arguments.
	(new_symbol_full): New function, from new_symbol.  Handle
	DW_TAG_template_type_param and DW_TAG_template_value_param.
	(new_symbol): Rewrite as wrapper.
	* cp-support.h (cp_lookup_symbol_imports_or_template): Declare.
	* cp-namespace.c: Include language.h.
	(search_symbol_list): New function.
	(cp_lookup_symbol_imports_or_template): Likewise.
gdb/testsuite
	PR c++/9946:
	* gdb.cp/temargs.exp: New file.
	* gdb.cp/temargs.cc: New file.
@
text
@d1215 1
d1229 3
a1231 5
      target_terminal_ours ();
      gdb_flush (gdb_stdout);
      fprintf_unfiltered (gdb_stderr, "Type ");
      type_print (type, "", gdb_stderr, -1);
      error (_(" is not a structure or union type."));
d1283 3
a1285 8
  target_terminal_ours ();
  gdb_flush (gdb_stdout);
  fprintf_unfiltered (gdb_stderr, "Type ");
  type_print (type, "", gdb_stderr, -1);
  fprintf_unfiltered (gdb_stderr, " has no component named ");
  fputs_filtered (name, gdb_stderr);
  error (("."));
  return (struct type *) -1;	/* For lint */
@


1.195
log
@include/ChangeLog:

2010-07-06  Ken Werner  <ken.werner@@de.ibm.com>

	* floatformat.h (floatformat_ieee_half_big): Add declaration.
	(floatformat_ieee_half_little): Likewise.

libiberty/ChangeLog:

2010-07-06  Ken Werner  <ken.werner@@de.ibm.com>

	* floatformat.c (floatformat_ieee_half_big): New variable.
	(floatformat_ieee_half_little): Likewise.

gdb/ChangeLog:

2010-07-06  Ken Werner  <ken.werner@@de.ibm.com>

	* gdbtypes.h (floatformats_ieee_half): Add declaration.
	* gdbtypes.c (floatformats_ieee_half): New variable.
	* doublest.c (floatformat_from_length): Set format to
	gdbarch_half_format if length matches.
	* gdbarch.sh (half_bit): New architecture method.
	(half_format): Likewise.
	* gdbarch.h: Regenerate.
	* gdbarch.c: Likewise.
@
text
@d1049 1
a1049 1
		 struct block *block, int noerr)
@


1.194
log
@	PR c++/11702
	* NEWS: Add entry.
	* dwarf2read.c (dwarf2_add_field): If DW_AT_const_value is present,
	create a symbol for the field and record the value.
	(new_symbol): Handle DW_TAG_member.
	* gdbtypes.c (field_is_static): Remove FIXME.
	* symtab.c (search_symbols): When searching for VARIABLES_DOMAIN,
	only ignore LOC_CONST symbols that are enums.

	testsuite/
	Test PR c++/11702.
	* gdb.cp/m-static.exp: Add testcase.
	* gdb.cp/m-static.h (gnu_obj_4): Add initialized static const member.
@
text
@d45 4
@


1.193
log
@gdb/
	Fix modification of cplus_struct_default.
	* dwarf2read.c (dwarf2_add_member_fn) <no DW_AT_vtable_elem_location>:
	Call ALLOCATE_CPLUS_STRUCT_TYPE.
	* gdbtypes.c (cplus_struct_default): New empty initializer, comment it.

gdb/testsuite/
	* gdb.cp/virtbase.cc (class RTTI_base, class RTTI_data)
	(main) <rtti_data>: New.
	* gdb.cp/virtbase.exp (print rtti_data): New.
@
text
@d2515 1
a2515 3
     loc_kind should give us an accurate answer (at least as long as
     we assume that DWARF block locations are not going to be used
     for static fields).  FIXME?  */
@


1.192
log
@2010-05-14  Michael Snyder  <msnyder@@vmware.com>

	* gcore.c: White space.
	* gdb.c: White space.
	* gdbtypes.c: White space.
	* gnu-nat.c: White space.
	* gnu-v2-abi.c: White space.
	* gnu-v3-abi.c: White space.
@
text
@d1736 2
a1737 1
const struct cplus_struct_type cplus_struct_default;
@


1.191
log
@2010-05-11  Pierre Muller  <muller@@ics.u-strasbg.fr>

	PR exp/11530.
	* gdbtypes.c (lookup_struct_elt_type): Also lookup
	names of unnamed structures or unions.

testsuite ChangeLog entry:

2010-05-11  Pierre Muller  <muller@@ics.u-strasbg.fr>

	PR exp/11530.
	* testsuite/gdb.base/gdb11530.c: New file.
	* testsuite/gdb.base/gdb11530.exp: New file.
@
text
@d446 1
d856 1
d889 1
d909 1
d953 1
d1175 1
d1255 3
a1257 2
	  struct type *subtype = lookup_struct_elt_type (
				   TYPE_FIELD_TYPE (type, i), name, 1);
d1429 1
d1465 1
d1509 21
a1529 20
	  else {
	    /* For now, we conservatively take the array length to be 0
	       if its length exceeds UINT_MAX.  The code below assumes
	       that for x < 0, (ULONGEST) x == -x + ULONGEST_MAX + 1,
	       which is technically not guaranteed by C, but is usually true
	       (because it would be true if x were unsigned with its
	       high-order bit on). It uses the fact that
	       high_bound-low_bound is always representable in
	       ULONGEST and that if high_bound-low_bound+1 overflows,
	       it overflows to 0.  We must change these tests if we 
	       decide to increase the representation of TYPE_LENGTH
	       from unsigned int to ULONGEST. */
	    ULONGEST ulow = low_bound, uhigh = high_bound;
	    ULONGEST tlen = TYPE_LENGTH (target_type);

	    len = tlen * (uhigh - ulow + 1);
	    if (tlen == 0 || (len / tlen - 1 + ulow) != uhigh 
		|| len > UINT_MAX)
	      len = 0;
	  }
d2993 1
d3001 1
d3266 1
d3316 1
d3332 1
d3350 1
d3368 1
@


1.190
log
@2010-05-06  Michael Snyder  <msnyder@@vmware.com>

	* macrocmd.c (_initialize_macrocmd): Delete unused variable.
	* macroexp.c (gather_arguments): Delete unused variable.
	(substitute_args): Delete unused variable.
	* completer.c (gdb_completer_loc_break_characters): Unused, delete.
	* gdbarch.sh (gdbarch_printable_names): Delete unused variable.
	(_initialize_gdbarch): Delete unused variable.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c (initialize_current_architecture):
	Delete unused variable.
	(_initialize_gdbarch_utils): Delete unused variable.
	* gdbtypes.c (make_cv_type): Delete unused variable.
	(make_type_with_address_space): Delete unused variable.
@
text
@d1247 7
@


1.189
log
@gdb ChangeLog

	* gdbtypes.h (builtin_type): Add builtin_char16 and builtin_char32
	fields.
	* gdbtypes.c (gdbtypes_post_init): Set builtin_char16 and
	builtin_char32 fields.
	* printcmd.c (decode_format): Set char size to '\0'
	for strings unless explicit size is given.
	(print_formatted): Correct calculation of NEXT_ADDRESS
	for 16 or 32 bit strings.
	(do_examine): Do not force byte size for strings.
	Use builtin_char16 and builtin_char32 types to display
	16 or 32 bit-wide strings.
	(x_command): Set LAST_SIZE to 'b' for string type.

gdb/doc ChangeLog

      * gdb.texinfo (Examining memory): Update for
	change in string display with explicit size.

gdb/testsuite ChangeLog

	* gdb.base/charset.c (Strin16, String32): New variables.
	* gdb.base/charset.exp (gdb_test): Test correct display
	of 16 or 32 bit strings.
@
text
@a542 1
  struct type *ntype;
a568 2
  struct type *tmp_type = type;	/* tmp type */
  struct objfile *objfile;
d571 2
a572 1
		   & ~(TYPE_INSTANCE_FLAG_CONST | TYPE_INSTANCE_FLAG_VOLATILE));
@


1.188
log
@	* gdbtypes.c (append_composite_type_field_raw): New.
	(append_composite_type_field_aligned): Use the new function.
	* gdbtypes.h (append_composite_type_field_raw): Declare.
	* target-descriptions.c (struct tdesc_type_field): Add start and end.
	(struct tdesc_type_flag): New type.
	(struct tdesc_type): Add TDESC_TYPE_STRUCT and TDESC_TYPE_FLAGS to
	kind.  Add size to u.u.  Add u.f for flags.
	(tdesc_gdb_type): Handle TDESC_TYPE_STRUCT and TDESC_TYPE_FLAGS.
	(tdesc_free_type): Likewise.
	(tdesc_create_struct, tdesc_set_struct_size, tdesc_create_flags): New.
	(tdesc_add_field): Handle TDESC_TYPE_STRUCT.
	(tdesc_add_bitfield, tdesc_add_flag): New.
	* target-descriptions.h (tdesc_create_struct, tdesc_set_struct_size)
	(tdesc_create_flags, tdesc_add_bitfield, tdesc_add_flag): Declare.
	* xml-tdesc.c (struct tdesc_parsing_data): Rename current_union to
	current_type.  Add current_type_size and current_type_is_flags.
	(tdesc_start_union): Clear the new fields.
	(tdesc_start_struct, tdesc_start_flags): New.
	(tdesc_start_field): Handle struct fields, including bitfields.
	(field_attributes): Make type optional.  Add start and end.
	(union_children): Rename to struct_union_children.
	(union_attributes): Rename to struct_union_attributes.  Add optional
	size.
	(flags_attributes): New.
	(feature_children): Add struct and flags.
	* features/gdb-target.dtd: Add flags and struct to features.
	Make field type optional.  Add field start and end.

	doc/
	* gdb.texinfo (Types): Describe <struct> and <flags>.

	testsuite/
	* gdb.xml/extra-regs.xml: Add struct1, struct2, and flags
	types.  Add structreg, bitfields, and flags registers.
	* gdb.xml/tdesc-regs.exp: Test structreg and bitfields
	registers.
@
text
@d3477 7
@


1.187
log
@	* p-typeprint.c (pascal_type_print_varspec_prefix): Update.
	* m2-typeprint.c (m2_print_type): Update.
	* gdbtypes.c (recursive_dump_type): Update.
	(copy_type_recursive): Update.
	* c-typeprint.c (c_type_print_varspec_prefix): Update.
	(c_type_print_base): Update.
	* gdbtypes.h (TYPE_CODE_TEMPLATE, TYPE_CODE_TEMPLATE_ARG):
	Remove.
	(struct cplus_struct_type) <ntemplate_args>: Remove.
	<struct template_arg>: Remove.
	<is_dynamic>: Move earlier.
	(TYPE_TEMPLATE_ARGS): Remove.
	(TYPE_NTEMPLATE_ARGS): Remove.
	(TYPE_TEMPLATE_ARG): Remove.
@
text
@d3306 5
a3310 4
   ALIGNMENT (if non-zero) specifies the minimum field alignment.  */
void
append_composite_type_field_aligned (struct type *t, char *name,
				     struct type *field, int alignment)
d3320 10
@


1.186
log
@gdb
	* m2-typeprint.c (m2_record_fields): Don't use
	TYPE_DECLARED_TYPE.
	* gdbtypes.h (TYPE_DECLARED_CLASS): New macro.
	(struct main_type) <flag_declared_class>: New field.
	(struct cplus_struct_type) <declared_type>: Remove.
	<ntemplate_args>: Move earlier.
	(DECLARED_TYPE_CLASS, DECLARED_TYPE_UNION, DECLARED_TYPE_STRUCT)
	(DECLARED_TYPE_TEMPLATE): Remove.
	(TYPE_DECLARED_TYPE): Remove.
	* gdbtypes.c (lookup_union): Don't use TYPE_DECLARED_TYPE.
	* dwarf2read.c (read_structure_type): Set TYPE_DECLARED_CLASS.
	* c-typeprint.c (c_type_print_base): Use TYPE_DECLARED_CLASS, not
	TYPE_DECLARED_TYPE.
gdb/testsuite
	* gdb.dwarf2/member-ptr-forwardref.exp: Update expected result for
	type-printing change.
@
text
@a2757 6
    case TYPE_CODE_TEMPLATE:
      printf_filtered ("(TYPE_CODE_TEMPLATE)");
      break;
    case TYPE_CODE_TEMPLATE_ARG:
      printf_filtered ("(TYPE_CODE_TEMPLATE_ARG)");
      break;
a3119 1
	   || TYPE_CODE (type) == TYPE_CODE_TEMPLATE
@


1.185
log
@gdb
	PR symtab/11199:
	* dwarf2read.c (quirk_gcc_member_function_pointer): Change return
	type and arguments.  Use smash_to_methodptr_type.
	(read_structure_type): Call quirk_gcc_member_function_pointer
	later.
	* gdbtypes.h (smash_to_methodptr_type): Declare.
	* gdbtypes.c (smash_to_methodptr_type): New function.
	(lookup_methodptr_type): Use it.
gdb/testsuite
2010-01-22  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	PR symtab/11199:
	* gdb.dwarf2/member-ptr-forwardref.exp,
	gdb.dwarf2/member-ptr-forwardref.S: New.
@
text
@a1134 7
  /* C++ unions may come out with TYPE_CODE_CLASS, but we look at
   * a further "declared_type" field to discover it is really a union.
   */
  if (HAVE_CPLUS_STRUCT (t))
    if (TYPE_DECLARED_TYPE (t) == DECLARED_TYPE_UNION)
      return t;

@


1.184
log
@gdb
	PR c++/9680:
	* c-exp.y (REINTERPRET_CAST, DYNAMIC_CAST, STATIC_CAST)
	(CONST_CAST): New tokens.
	(exp): Add new productions.
	(ident_tokens): Add const_cast, dynamic_cast, static_cast, and
	reinterpret_cast.
	(is_cast_operator): New function.
	(yylex): Handle cast operators specially.
	* eval.c (evaluate_subexp_standard) <UNOP_DYNAMIC_CAST,
	UNOP_REINTERPRET_CAST>: New cases.
	* expprint.c (print_subexp_standard): Likewise.
	(op_name_standard): Likewise.
	(dump_subexp_body_standard): Likewise.
	* parse.c (operator_length_standard): Likewise.
	* expression.h (enum exp_opcode): New constants UNOP_DYNAMIC_CAST,
	UNOP_REINTERPRET_CAST.
	* gdbtypes.c (class_types_same_p): New function.
	(is_ancestor): Use it.
	(is_public_ancestor): New function.
	(is_unique_ancestor_worker): Likewise.
	(is_unique_ancestor): Likewise.
	* gdbtypes.h (class_types_same_p, is_public_ancestor)
	(is_unique_ancestor): Declare.
	* valops.c (value_reinterpret_cast): New function.
	(dynamic_cast_check_1): Likewise.
	(dynamic_cast_check_2): Likewise.
	(value_dynamic_cast): Likewise.
	* value.h (value_reinterpret_cast, value_dynamic_cast): Declare.
gdb/testsuite
	PR c++/9680:
	* gdb.cp/casts.cc: Add new classes and variables.
	* gdb.cp/casts.exp: Test new operators.
@
text
@d676 1
a676 4
  TYPE_TARGET_TYPE (mtype) = to_type;
  TYPE_DOMAIN_TYPE (mtype) = TYPE_DOMAIN_TYPE (to_type);
  TYPE_LENGTH (mtype) = cplus_method_ptr_size (to_type);
  TYPE_CODE (mtype) = TYPE_CODE_METHODPTR;
d981 16
@


1.183
log
@	* gdbtypes.c (arch_flags_type): Fix comment.
	* gdbtypes.h (arch_composite_type): Fix comment.
@
text
@d1841 12
d1867 1
a1867 1
  if (base == dclass)
d1869 22
a1890 2
  if (TYPE_NAME (base) && TYPE_NAME (dclass) 
      && !strcmp (TYPE_NAME (base), TYPE_NAME (dclass)))
d1893 7
a1899 3
  for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
    if (is_ancestor (base, TYPE_BASECLASS (dclass, i)))
      return 1;
d1903 61
@


1.182
log
@gdb/ChangeLog:

        Add support for DW_AT_GNAT_descriptive_type.
        * gdbtypes.h (enum type_specific_kind): New enum.
        (struct main_type) [type_specific_field]: New component.
        [type_specific]: Add new component "gnat_stuff".
        (struct gnat_aux_type): New type.
        (INIT_CPLUS_SPECIFIC): Also set TYPE_SPECIFIC_FIELD (type).
        (HAVE_CPLUS_STRUCT): Also check TYPE_SPECIFIC_FIELD (type).
        (gnat_aux_default, allocate_gnat_aux_type): Add declaration.
        (INIT_GNAT_SPECIFIC, ALLOCATE_GNAT_AUX_TYPE, HAVE_GNAT_AUX_INFO)
        (TYPE_SPECIFIC_FIELD): New macros.
        (TYPE_CPLUS_SPECIFIC): Return cplus_struct_default if the given
        type does not hold any cplus-specific data.
        (TYPE_RAW_CPLUS_SPECIFIC): New macro.
        (TYPE_GNAT_SPECIFIC, TYPE_DESCRIPTIVE_TYPE): New macros.
        (TYPE_IS_OPAQUE): Use HAVE_CPLUS_STRUCT to check if type has
        cplus-specific data.
        * gdbtypes.c (allocate_cplus_struct_type): Minor stylistic rewrite.
        Set new component TYPE_SPECIFIC_FIELD (type).
        (gnat_aux_default): New constant.
        (allocate_gnat_aux_type): New function.
        (init_type): Add initialization the type-specific stuff for
        TYPE_CODE_FLT and TYPE_CODE_FUNC types.
        (print_gnat_stuff): New function.
        (recursive_dump_type): Use HAVE_CPLUS_STRUCT to check for cplus-
        specific data.  Adjust code that prints the contents of the
        type-specific union using the TYPE_SPECIFIC_FIELD value.
        * dwarf2read.c (dwarf2_attach_fields_to_type): Do not allocate
        the type cplus stuff for Ada types.
        (dwarf2_add_member_fn, dwarf2_attach_fn_fields_to_type):
        Error out if these routines are called with an Ada type.
        (read_structure_type, read_array_type, read_subrange_type):
        Add call to set_descriptive_type.
        (set_die_type): Initialize the gnat-specific data if necessary.
        (need_gnat_info, die_descriptive_type, set_descriptive_type):
        New functions.
        * ada-lang.c (decode_constrained_packed_array_type): Use
        decode_constrained_packed_array_type instead of doing a standard
        lookup to locate a parallel type.
        (find_parallel_type_by_descriptive_type): New function.
        (ada_find_parallel_type_with_name): New function.
        (ada_find_parallel_type): Reimplement using
        ada_find_parallel_type_with_name.
        * ada-valprint.c (print_field_values): Use HAVE_CPLUS_STRUCT
        to check if type has a cplus stuff.
        * linespec.c (total_number_of_methods): Likewise.
        * mdebugread.c (new_type): Likewise.

gdb/testsuite/ChangeLog:

        * gdb.base/maint.exp: Adjust the expected output for the
        "maint print type" test. Use gdb_test_multiple instead of
        gdb_sent/gdb_expect.
@
text
@d3160 1
a3160 1
   NAME is the type name.  LENGTH is the number of flag bits.  */
@


1.181
log
@gdb/
	* gdbtypes.c (check_typedef): New comment on type length.
	* value.c (allocate_value_lazy): Remove the unused atype variable.  New
	comment on type length.
	(value_primitive_field): Keep the original TYPE value, new comment.

gdb/testsuite/
	* gdb.mi/var-cmd.c (do_bitfield_tests): Change "V.sharable" type to
	"uint_for_mi_testing".
@
text
@d1720 23
a1742 6
  if (!HAVE_CPLUS_STRUCT (type))
    {
      TYPE_CPLUS_SPECIFIC (type) = (struct cplus_struct_type *)
	TYPE_ALLOC (type, sizeof (struct cplus_struct_type));
      *(TYPE_CPLUS_SPECIFIC (type)) = cplus_struct_default;
    }
d1745 1
d1798 1
a1798 2
  if (code == TYPE_CODE_STRUCT || code == TYPE_CODE_UNION
      || code == TYPE_CODE_NAMESPACE)
d1800 11
a1810 1
      INIT_CPLUS_SPECIFIC (type);
d2525 11
d2547 1
a2547 1
      || (TYPE_CPLUS_SPECIFIC (type) && TYPE_NFN_FIELDS (type) > 0))
d2816 2
a2817 1
  switch (TYPE_CODE (type))
d2819 45
a2863 7
    case TYPE_CODE_STRUCT:
      printfi_filtered (spaces, "cplus_stuff ");
      gdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), 
			      gdb_stdout);
      puts_filtered ("\n");
      print_cplus_stuff (type, spaces);
      break;
a2864 39
    case TYPE_CODE_FLT:
      printfi_filtered (spaces, "floatformat ");
      if (TYPE_FLOATFORMAT (type) == NULL)
	puts_filtered ("(null)");
      else
	{
	  puts_filtered ("{ ");
	  if (TYPE_FLOATFORMAT (type)[0] == NULL
	      || TYPE_FLOATFORMAT (type)[0]->name == NULL)
	    puts_filtered ("(null)");
	  else
	    puts_filtered (TYPE_FLOATFORMAT (type)[0]->name);

	  puts_filtered (", ");
	  if (TYPE_FLOATFORMAT (type)[1] == NULL
	      || TYPE_FLOATFORMAT (type)[1]->name == NULL)
	    puts_filtered ("(null)");
	  else
	    puts_filtered (TYPE_FLOATFORMAT (type)[1]->name);

	  puts_filtered (" }");
	}
      puts_filtered ("\n");
      break;

    default:
      /* We have to pick one of the union types to be able print and
         test the value.  Pick cplus_struct_type, even though we know
         it isn't any particular one.  */
      printfi_filtered (spaces, "type_specific ");
      gdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
      if (TYPE_CPLUS_SPECIFIC (type) != NULL)
	{
	  printf_filtered (_(" (unknown data form)"));
	}
      printf_filtered ("\n");
      break;

    }
@


1.180
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d1345 1
a1345 1
   often enough to merit such treatment.  */
d1347 1
a1347 1
/* Find the real type of TYPE.  This function returns the real type,
d1350 6
a1355 1
   typedefs does not.  */
@


1.179
log
@* dwarf2read.c (struct attribute): Increase sizes of unsnd and snd
fields to allow larger integer sizes.
(read_subrange_type): Increase size of bound values.
Add logic to determine signedness based on base-type size, signedness.
(read_attribute_value): Change format for bad byte size in message.
(read_8_bytes): Increase size of result type.
(dump_die_shallow): Change format for value.
(dwarf2_get_attr_constant_value): Increase size of return type.
Correct comment.
* gdbtypes.c (create_range_type): Change API to increase size of
bounds. struct field -> union field.
Always take signedness from base type.
(check_typedef): Use new API for TYPE_LOW_BOUND, TYPE_HIGH_BOUND.
(recursive_dump_type, copy_type_recursive): Adjust to new
representation of range types.
* gdbtypes.h (fields_or_bounds): New union containing struct field and
new struct range_bounds, used for range types.
(TYPE_RANGE_DATA): New macro to access range_bounds member.
(TYPE_LOW_BOUND, TYPE_HIGH_BOUND): Represent with new TYPE_RANGE_DATA.
(TYPE_LOW_BOUND_UNDEFINED, TYPE_HIGH_BOUND_UNDEFINED): New macros,
taking over the job of TYPE_FIELD_ARTIFICIAL for range bounds.
(SET_TYPE_LOW_BOUND, SET_TYPE_HIGH_BOUND, SET_TYPE_LOW_BOUND_DEFINED)
(SET_TYPE_HIGH_BOUND_DEFINED): New macros.
(TYPE_FIELDS, TYPE_BASECLASS, TYPE_BASECLASS_NAME, TYPE_FIELD)
(TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED)
(TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED, TYPE_ARRAY_UPPER_BOUND_VALUE)
(TYPE_ARRAY_LOWER_BOUND_VALUE):	Adjust to new representation.
(create_range_type): Adjust API.
* ada-lang.c (ada_modulus): Use new extended bound values.
(discrete_type_low_bound): Rename to...
(ada_discrete_type_low_bound): ... and make external.
(discrete_type_high_bound): Rename to...
(ada_discrete_type_high_bound): ... and make external.
(ada_value_slice_from_ptr, ada_array_bound_from_type)
(ada_evaluate_subexp, to_fixed_range_type):
Use ada_discrete_type_low_bound, ada_discrete_type_high_bound.
* ada-typeprint.c (print_range): Use ada_discrete_type_low_bound,
ada_discrete_type_high_bound.  Don't look at field count, which
is no longer meaningful.  Print bounds whenever argument is a range
or enumeration.
* ada-lang.h (ada_discrete_type_low_bound,ada_discrete_type_high_bound):
Declare.
* varobj.c (c_describe_child): Adjust to render larger values.
* mdebugread.c (parse_type): Use proper abstractions for range types:
TYPE_RANGE_DATA, SET_TYPE_LOW_BOUND_DEFINED,
SET_TYPE_HIGH_BOUND_DEFINED.
* p-typeprint.c (pascal_type_print_varspec_prefix): Use larger format
for bounds.
@
text
@d4 2
a5 1
   2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.178
log
@2009-11-12  Daniel Jacobowitz  <dan@@codesourcery.com>
	    Paul Brook  <paul@@codesourcery.com>

	* c-typeprint.c (c_type_print_base): Skip artificial fields.
	Use get_vptr_fieldno to skip the vtable pointer.
	* dwarf2read.c (dwarf2_add_field): Set FIELD_ARTIFICIAL on artificial
	fields.
	(dwarf2_add_member_fn): Complain about virtual member functions
	without DW_AT_vtable_elem_location and force TYPE_CPLUS_DYNAMIC.
	* gdbtypes.c (get_vptr_fieldno): Update comment.
	* gdbtypes.h (struct cplus_struct_type): Add is_dynamic.
	(TYPE_CPLUS_DYNAMIC): New macro.
	* gnu-v3-abi.c (gnuv3_dynamic_class): New.
	(gnuv3_get_vtable): Rewrite to use gnuv3_dynamic_class.  Move higher.
	(gnuv3_rtti_type, gnuv3_get_virtual_fn, gnuv3_baseclass_offset): Use
	gnuv3_get_vtable.
	* varobj.c (cplus_class_num_children, cplus_describe_child): Skip
	artificial fields.  Use get_vptr_fieldno to skip the vtable pointer.
@
text
@d714 1
a714 1
		   int low_bound, int high_bound)
d724 2
a725 4
  TYPE_NFIELDS (result_type) = 2;
  TYPE_FIELDS (result_type) = TYPE_ZALLOC (result_type,
					   TYPE_NFIELDS (result_type)
					   * sizeof (struct field));
d1476 5
a1480 5
	     is smaller than the low bound.  */
	  const int low_bound = TYPE_LOW_BOUND (range_type);
	  const int high_bound = TYPE_HIGH_BOUND (range_type);
	  int nb_elements;
	
d1482 22
a1503 5
	    nb_elements = 0;
	  else
	    nb_elements = high_bound - low_bound + 1;
	
	  TYPE_LENGTH (type) = nb_elements * TYPE_LENGTH (target_type);
d2755 8
d2951 7
@


1.177
log
@	* c-expy. (operator_stoken): New function.
	(OPERATOR): New token.
	(NEW): New token.
	(DELETE): New token.
	(operator): New rule.
	(name): Add operator.
	(ident_tokens): Add "new", "delete", and "operator".
	* gdbtypes.c (rank_one_type): Don't complain about
	void pointer conversion badness if both types are
	void pointers.
@
text
@d1280 2
a1281 1
   debugging a .o file), this function will not be able to find the
@


1.176
log
@	* gdbtypes.c (make_pointer_type, make_reference_type,
	smash_to_memberptr_type, lookup_array_range_type, check_stub_method):
	Use type architecture instead of current_gdbarch.

	* gdbtypes.h (address_space_name_to_int, address_space_int_to_name):
	Add GDBARCH paramter.
	* gdbtypes.c (address_space_name_to_int, address_space_int_to_name):
	Add GDBARCH parameter.   Use it instead of current_gdbarch.
	* c-typeprint.c (c_type_print_modifier): Update call.
	* parse.c (push_type_address_space): Likewise.

	* findvar.c (extract_typed_address, store_typed_address): Use type
	architecture instead of current_gdbarch.

	* value.c (value_as_address, unpack_field_as_long): Use type architecture
	instead of current_gdbarch.

	* doublest.c (floatformat_from_length): Add GDBARCH argument.  Use it
	instead of current_gdbarch.
	(floatformat_from_type): Pass type architecture.

	* infcall.c (find_function_addr): Use type architecture instead
	of current_gdbarch.

	* valarith.c (value_bitstring_subscript, value_x_binop, value_neg,
	value_bit_index): Use type architecture instead of current_gdbarch.
	* valops.c (value_cast, value_slice): Likewise.

	* value.h (modify_field): Add TYPE argument.
	* value.c (modify_field): Add TYPE argument.  Use type architecture
	instead of current_gdbarch.
	(set_internalvar_component): Likewise.
	* eval.c (evaluate_struct_tuple): Update call.
	* valops.c (value_assign): Likewise.
	* ada-lang.c (modify_general_field): Likewise.  Add TYPE argument.
	(make_array_descriptor): Update calls.
	(move_bits): Add BITS_BIG_ENDIAN_P argument.  Use it instead of
	current_gdbarch.
	(ada_value_assign, value_assign_to_component): Update calls.
	(decode_packed_array, ada_value_primitive_packed_val, ada_value_assign,
	value_assign_to_component): Use type arch instead of current_gdbarch.

	* printcmd.c (float_type_from_length): Remove GDBARCH argument,
	use type architecture instead.
	(print_scalar_formatted, printf_command): Update calls.  Use type
	architecture instead of current_gdbarch.
	* valprint.c (val_print_type_code_int): Use type architecture
	instead of current_gdbarch.
	* varobj.c (value_get_print_value): Likewise.
	* python/python-prettyprint.c (print_string_repr): Add GDBARCH
	argument.  Use it instead of current_gdbarch.
	(apply_val_pretty_printer): Update call.

	* ada-valprint.c (ada_val_print_1): Use type architecture instead
	of current_gdbarch.
	* c-valprint.c (print_function_pointer_address): Add GDBARCH argument.
	Use it instead of current_gdbarch.
	(c_val_print): Update calls passing type architecture.
	* f-valprint.c (f_val_print): Use type architecture instead of
	current_gdbarch.
	* jv-valprint (java_value_print): Likewise.
	* m2-valprint.c (print_function_pointer_address): Add GDBARCH argument.
	Use it instead of current_gdbarch.
	(print_unpacked_pointer): Update calls passing type architecture.
	* scm-valprint.c (scm_scmval_print): Use type architecture instead of
	current_gdbarch.

	* gnu-v3-abi.c (get_class_arch): Remove.
	(gnuv3_rtti_type): Use get_type_arch instead of get_class_arch.  Remove
	special-case check for Java classes.
	(gnuv3_virtual_fn_field, gnuv3_baseclass_offset, gnuv3_print_method_ptr,
	gnuv3_method_ptr_size, gnuv3_make_method_ptr, gnuv3_method_ptr_to_value):
	Use get_type_arch instead of get_class_arch.
@
text
@d2007 2
a2008 1
	  if (TYPE_CODE (TYPE_TARGET_TYPE (parm)) == TYPE_CODE_VOID)
@


1.176.4.1
log
@gdb/
	* gdbtypes.c (check_typedef): New comment on type length.
	* value.c (allocate_value_lazy): Remove the unused atype variable.  New
	comment on type length.
	(value_primitive_field): Keep the original TYPE value, new comment.

gdb/testsuite/
	* gdb.mi/var-cmd.c (do_bitfield_tests): Change "V.sharable" type to
	"uint_for_mi_testing".
@
text
@d1345 1
a1345 1
   often enough to merit such treatment.
d1347 1
a1347 1
   Find the real type of TYPE.  This function returns the real type,
d1350 1
a1350 6
   typedefs does not.

   If TYPE is a TYPE_CODE_TYPEDEF, its length is (also) set to the length of
   the target type instead of zero.  However, in the case of TYPE_CODE_TYPEDEF
   check_typedef can still return different type than the original TYPE
   pointer.  */
@


1.175
log
@	* gdbtypes.h (TYPE_OBJFILE_OWNED, TYPE_OWNER): New macros.
	(TYPE_OBJFILE, TYPE_ALLOC, TYPE_ZALLOC): Reimplement.
	(alloc_type_arch): Add prototype.
	(alloc_type_copy): Likewise.
	(get_type_arch): Likewise.
	(arch_type): Likewise.
	(arch_integer_type): Likewise.
	(arch_character_type): Likewise.
	(arch_boolean_type): Likewise.
	(init_float_type): Remove, replace by ...
	(arch_float_type): ... this.
	(init_complex_type): Remove, replace by ...
	(arch_complex_type): ... this.
	(init_flags_type): Remove, replace by ...
	(arch_flags_type): ... this.
	(init_composite_type): Remove, replace by ...
	(arch_composite_type): ... this.

	* gdbtypes.c (alloc_type): No longer support NULL objfile.
	(init_type): Likewise.
	(alloc_type_arch): New function.
	(alloc_type_copy): New function.
	(get_type_arch): New function.

	(smash_type): Preserve type ownership information.
	(make_pointer_type, make_reference_type, make_function_type,
	smash_to_memberptr_type, smash_to_method_type): No longer
	preserve OBJFILE across smash_type calls.
	(make_pointer_type, make_reference_type, make_function_type,
	lookup_memberptr_type, lookup_methodptr_type, allocate_stub_method,
	create_range_type, create_array_type, create_set_type, copy_type):
	Use alloc_type_copy when allocating types.
	(check_typedef): Use alloc_type_arch.
	(copy_type_recursive): Likewise.  Preserve type ownership data
	after copying type.
	(recursive_dump_type): Dump type ownership data.
	(alloc_type_instance): Update type ownership check.
	(copy_type, copy_type_recursive): Likewise.

	(arch_type): New function.
	(arch_integer_type): Likewise.
	(arch_character_type): Likewise.
	(arch_boolean_type): Likewise.
	(init_float_type): Remove, replace by ...
	(arch_float_type): ... this.
	(init_complex_type): Remove, replace by ...
	(arch_complex_type): ... this.
	(init_flags_type): Remove, replace by ...
	(arch_flags_type): ... this.
	(append_flags_type_flag): Move down.
	(init_composite_type): Remove, replace by ...
	(arch_composite_type): ... this.
	(append_composite_type_field_aligned,
	append_composite_type_field): Move down.

	* gdbarch.c (gdbtypes_post_init): Allocate all types
	using per-architecture routines.
	* ada-lang.c (ada_language_arch_info): Likewise.
	* f-lang.c (build_fortran_types): Likewise.
	* jv-lang.c (build_java_types): Likewise.
	* m2-lang.c (build_m2_types): Likewise.
	* scm-lang.c (build_scm_types): Likewise.

	* ada-lang.c (ada_type_of_array): Use alloc_type_copy.
	(packed_array_type): Likewise.
	(ada_template_to_fixed_record_type_1): Likewise.
	(template_to_static_fixed_type): Likewise.
	(to_record_with_fixed_variant_part): Likewise.
	(to_fixed_variant_branch_type): Likewise.
	(to_fixed_array_type): Likewise.
	(to_fixed_range_type): Likewise.
	(empty_record): Use type instead of objfile argument.
	Use alloc_type_copy.
	(to_fixed_variant_branch_type): Update call to empty_record.
	* jv-lang.c (type_from_class): Use alloc_type_arch.

	* arm-tdep.c (arm_ext_type): Allocate per-architecture type.
	* i386-tdep.c (i386_eflags_type, i386_mxcsr_type, i387_ext_type,
	i386_mmx_type, i386_sse_type): Likewise.
	* ia64-tdep.c (ia64_ext_type): Likewise.
	* m32c-tdep.c (make_types): Likewise.
	* m68k-tdep.c (m68k_ps_type, m68881_ext_type): Likewise.
	* rs6000-tdep.c (rs6000_builtin_type_vec64,
	rs6000_builtin_type_vec128): Likewise.
	* sparc-tdep.c (sparc_psr_type, sparc_fsr_type): Likewise.
	* sparc64-tdep.c (sparc64_pstate_type, sparc64_fsr_type,
	sparc64_fprs_type): Likewise.
	* spu-tdep.c (spu_builtin_type_vec128): Likewise.
	* xtensa-tdep.c (xtensa_register_type): Likewise.
	* linux-tdep.c (linux_get_siginfo_type): Likewise.
	* target-descriptions.c (tdesc_gdb_type): Likewise.
	* gnu-v3-abi.c (build_gdb_vtable_type): Likewise.
@
text
@d294 2
a295 2
  TYPE_LENGTH (ntype) = 
    gdbarch_ptr_bit (current_gdbarch) / TARGET_CHAR_BIT;
d372 2
a373 1
  TYPE_LENGTH (ntype) = gdbarch_ptr_bit (current_gdbarch) / TARGET_CHAR_BIT;
d442 1
a442 1
address_space_name_to_int (char *space_identifier)
a443 1
  struct gdbarch *gdbarch = current_gdbarch;
d463 1
a463 1
address_space_int_to_name (int space_flag)
a464 1
  struct gdbarch *gdbarch = current_gdbarch;
d857 1
a857 1
  struct gdbarch *gdbarch = current_gdbarch;
d980 2
a981 1
  TYPE_LENGTH (type) = gdbarch_ptr_bit (current_gdbarch) / TARGET_CHAR_BIT;
d1538 1
a1538 1
  struct gdbarch *gdbarch = current_gdbarch;
@


1.174
log
@	* gdbtypes.h (builtin_type_ieee_single, builtin_type_ieee_double,
	builtin_type_i387_ext, builtin_type_m68881_ext, builtin_type_arm_ext,
	builtin_type_ia64_spill, builtin_type_ia64_quad): Remove.
	(init_float_type, init_complex_type): Add prototypes.
	* gdbtypes.c (builtin_type_ieee_single, builtin_type_ieee_double,
	builtin_type_i387_ext, builtin_type_m68881_ext, builtin_type_arm_ext,
	builtin_type_ia64_spill, builtin_type_ia64_quad): Remove.
	(_initialize_gdbtypes): Do not initialize them.
	(build_flt): Rename to ...
	(init_float_type): ... this.  Make global.
	(build_complex): Rename to ...
	(init_complex_type): ... this.  Make global.  Remove BIT argument.
	(gdbtypes_post_init): Update calls.

	* ada-lang.c (ada_language_arch_info): Use init_float_type.
	* jv-lang.c (build_java_types): Likewise.
	* m2-lang.c (build_m2_types): Likewise.
	* f-lang.c (build_fortran_types): Use init_float_type and
	init_complex_type.

	* target-descriptions.c (tdesc_gdb_type): Call init_float_type instead
	of using builtin_type_ieee_single, builtin_type_ieee_double, or
	builtin_type_arm_ext.

	* ia64-tdep.h (struct gdbarch_tdep): Add ia64_ext_type member.
	* ia64-tdep.c (builtin_type_ia64_ext): Remove.
	(_initialize_ia64_tdep): Do not initialize it.
	(floatformat_valid, floatformat_ia64_ext, floatformats_ia64_ext):
	Move up.
	(ia64_ext_type): New function.
	(ia64_register_reggroup_p, ia64_convert_register_p,
	ia64_register_to_value, ia64_value_to_register,
	ia64_extract_return_value, ia64_store_return_value): Use ia64_ext_type
	instead of builtin_type_ia64_ext.

	* i386-tdep.h (struct gdbarch_tdep): Add i387_ext_type member.
	(i387_ext_type): Add prototype.
	* i386-tdep.c (i387_ext_type): New function.
	(i386_extract_return_value, i386_store_return_value,
	i386_register_type): Use it instead of builtin_type_i387_ext.
	* amd64-tdep.c (amd64_register_type): Likewise.
	* i387-tdep.c (print_i387_value, i387_register_to_value,
	i387_value_to_register): Likewise.
	(print_i387_value, print_i387_ext): Add GDBARCH argument.
	(print_i387_ext, i387_print_float_info): Pass to subroutines.

	* m68k-tdep.h (struct gdbarch_tdep): Add m68881_ext_type member.
	* m68k-tdep.c (m68881_ext_type): New function.
	(m68k_register_type, m68k_convert_register_p): Use it instead
	of builtin_type_m68881_ext.

	* arm-tdep.h (struct gdbarch_tdep): Add arm_ext_type member.
	* arm-tdep.c (arm_ext_type): New function.
	(arm_register_type): Use it instead of builtin_type_arm_ext.

	* alpha-tdep.c (alpha_register_type): Use builtin types
	instead of builtin_type_ieee_double.

	* mips-tdep.c (mips_float_register_type, mips_double_register_type):
	Remove.
	(mips_register_type): Use builtin types instead of
	builtin_type_ieee_single and builtin_type_ieee_double.
	(mips_print_fp_register): Use builtin types instead of
	mips_float_register_type and mips_double_register_type.

	* hppa-tdep.c (hppa32_register_type, hppa64_register_type):
	Use builtin types instead of builtin_type_ieee_single and
	builtin_type_ieee_double.
@
text
@d122 3
a124 4
/* Alloc a new type structure and fill it with some defaults.  If
   OBJFILE is non-NULL, then allocate the space for the type structure
   in that objfile's objfile_obstack.  Otherwise allocate the new type
   structure by xmalloc () (for permanent types).  */
d131 2
d134 20
d155 14
a168 12
  if (objfile == NULL)
    {
      type = XZALLOC (struct type);
      TYPE_MAIN_TYPE (type) = XZALLOC (struct main_type);
    }
  else
    {
      type = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct type);
      TYPE_MAIN_TYPE (type) = OBSTACK_ZALLOC (&objfile->objfile_obstack,
					      struct main_type);
      OBJSTAT (objfile, n_types++);
    }
a172 1
  TYPE_OBJFILE (type) = objfile;
d179 26
d216 1
a216 1
  if (TYPE_OBJFILE (oldtype) == NULL)
d230 1
a230 1
   replacing it with something else.  */
d234 3
d239 4
a257 1
  struct objfile *objfile;
d276 1
a276 1
      ntype = alloc_type (TYPE_OBJFILE (type));
a282 1
      objfile = TYPE_OBJFILE (ntype);
a285 1
      TYPE_OBJFILE (ntype) = objfile;
a334 1
  struct objfile *objfile;
d353 1
a353 1
      ntype = alloc_type (TYPE_OBJFILE (type));
a359 1
      objfile = TYPE_OBJFILE (ntype);
a362 1
      TYPE_OBJFILE (ntype) = objfile;
a406 1
  struct objfile *objfile;
d410 1
a410 1
      ntype = alloc_type (TYPE_OBJFILE (type));
a416 1
      objfile = TYPE_OBJFILE (ntype);
a417 1
      TYPE_OBJFILE (ntype) = objfile;
d663 1
a663 1
  mtype = alloc_type (TYPE_OBJFILE (type));
d675 1
a675 1
  mtype = alloc_type (TYPE_OBJFILE (to_type));
d694 4
a697 2
  mtype = init_type (TYPE_CODE_METHOD, 1, TYPE_FLAG_STUB, NULL,
		     TYPE_OBJFILE (type));
d718 1
a718 1
    result_type = alloc_type (TYPE_OBJFILE (index_type));
d826 2
a827 3
    {
      result_type = alloc_type (TYPE_OBJFILE (range_type));
    }
d904 2
a905 3
    {
      result_type = alloc_type (TYPE_OBJFILE (domain_type));
    }
a925 33
void
append_flags_type_flag (struct type *type, int bitpos, char *name)
{
  gdb_assert (TYPE_CODE (type) == TYPE_CODE_FLAGS);
  gdb_assert (bitpos < TYPE_NFIELDS (type));
  gdb_assert (bitpos >= 0);

  if (name)
    {
      TYPE_FIELD_NAME (type, bitpos) = xstrdup (name);
      TYPE_FIELD_BITPOS (type, bitpos) = bitpos;
    }
  else
    {
      /* Don't show this field to the user.  */
      TYPE_FIELD_BITPOS (type, bitpos) = -1;
    }
}

struct type *
init_flags_type (char *name, int length)
{
  int nfields = length * TARGET_CHAR_BIT;
  struct type *type;

  type = init_type (TYPE_CODE_FLAGS, length, 
		    TYPE_FLAG_UNSIGNED, name, NULL);
  TYPE_NFIELDS (type) = nfields;
  TYPE_FIELDS (type) = TYPE_ZALLOC (type, nfields * sizeof (struct field));

  return type;
}

a975 4
  struct objfile *objfile;

  objfile = TYPE_OBJFILE (type);

a976 1
  TYPE_OBJFILE (type) = objfile;
a996 4
  struct objfile *objfile;

  objfile = TYPE_OBJFILE (type);

a997 1
  TYPE_OBJFILE (type) = objfile;
d1386 1
a1386 1
	    TYPE_TARGET_TYPE (type) = alloc_type (NULL);
d1708 4
a1711 5
   If NAME is non-NULL and OBJFILE is non-NULL, then we make a copy of
   the string pointed to by name in the objfile_obstack for that
   objfile, and initialize the type name to that copy.  There are
   places (mipsread.c in particular, where init_type is called with a
   NULL value for NAME).  */
d1749 3
a1751 9
  if ((name != NULL) && (objfile != NULL))
    {
      TYPE_NAME (type) = obsavestring (name, strlen (name), 
				       &objfile->objfile_obstack);
    }
  else
    {
      TYPE_NAME (type) = name;
    }
a1765 61
/* Helper function.  Create an empty composite type.  */

struct type *
init_composite_type (char *name, enum type_code code)
{
  struct type *t;
  gdb_assert (code == TYPE_CODE_STRUCT
	      || code == TYPE_CODE_UNION);
  t = init_type (code, 0, 0, NULL, NULL);
  TYPE_TAG_NAME (t) = name;
  return t;
}

/* Helper function.  Append a field to a composite type.  */

void
append_composite_type_field_aligned (struct type *t, char *name,
				     struct type *field, int alignment)
{
  struct field *f;
  TYPE_NFIELDS (t) = TYPE_NFIELDS (t) + 1;
  TYPE_FIELDS (t) = xrealloc (TYPE_FIELDS (t),
			      sizeof (struct field) * TYPE_NFIELDS (t));
  f = &(TYPE_FIELDS (t)[TYPE_NFIELDS (t) - 1]);
  memset (f, 0, sizeof f[0]);
  FIELD_TYPE (f[0]) = field;
  FIELD_NAME (f[0]) = name;
  if (TYPE_CODE (t) == TYPE_CODE_UNION)
    {
      if (TYPE_LENGTH (t) < TYPE_LENGTH (field))
	TYPE_LENGTH (t) = TYPE_LENGTH (field);
    }
  else if (TYPE_CODE (t) == TYPE_CODE_STRUCT)
    {
      TYPE_LENGTH (t) = TYPE_LENGTH (t) + TYPE_LENGTH (field);
      if (TYPE_NFIELDS (t) > 1)
	{
	  FIELD_BITPOS (f[0]) = (FIELD_BITPOS (f[-1])
				 + (TYPE_LENGTH (FIELD_TYPE (f[-1]))
				    * TARGET_CHAR_BIT));

	  if (alignment)
	    {
	      int left = FIELD_BITPOS (f[0]) % (alignment * TARGET_CHAR_BIT);
	      if (left)
		{
		  FIELD_BITPOS (f[0]) += left;
		  TYPE_LENGTH (t) += left / TARGET_CHAR_BIT;
		}
	    }
	}
    }
}

void
append_composite_type_field (struct type *t, char *name,
			     struct type *field)
{
  append_composite_type_field_aligned (t, name, field, 0);
}

d2609 10
a2618 2
  printfi_filtered (spaces, "objfile ");
  gdb_print_host_address (TYPE_OBJFILE (type), gdb_stdout);
d2849 1
a2849 1
  if (TYPE_OBJFILE (type) == NULL)
d2861 1
a2861 1
  new_type = alloc_type (NULL);
d2873 2
a2874 1
  TYPE_OBJFILE (new_type) = NULL;
d2965 1
a2965 1
  gdb_assert (TYPE_OBJFILE (type) != NULL);
d2967 1
a2967 1
  new_type = alloc_type (TYPE_OBJFILE (type));
d2976 75
d3052 2
a3053 1
init_float_type (int bit, char *name, const struct floatformat **floatformats)
d3065 1
a3065 1
  t = init_type (TYPE_CODE_FLT, bit / TARGET_CHAR_BIT, 0, name, NULL);
d3070 2
d3073 2
a3074 1
init_complex_type (char *name, struct type *target_type)
d3077 2
a3078 2
  t = init_type (TYPE_CODE_COMPLEX, 2 * TYPE_LENGTH (target_type),
		 0, name, (struct objfile *) NULL);
d3083 100
d3198 35
a3232 53
  builtin_type->builtin_void =
    init_type (TYPE_CODE_VOID, 1,
	       0,
	       "void", (struct objfile *) NULL);
  builtin_type->builtin_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       (TYPE_FLAG_NOSIGN
                | (gdbarch_char_signed (gdbarch) ? 0 : TYPE_FLAG_UNSIGNED)),
	       "char", (struct objfile *) NULL);
  builtin_type->builtin_signed_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "signed char", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned char", (struct objfile *) NULL);
  builtin_type->builtin_short =
    init_type (TYPE_CODE_INT, 
	       gdbarch_short_bit (gdbarch) / TARGET_CHAR_BIT,
	       0, "short", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_short =
    init_type (TYPE_CODE_INT, 
	       gdbarch_short_bit (gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, "unsigned short", 
	       (struct objfile *) NULL);
  builtin_type->builtin_int =
    init_type (TYPE_CODE_INT, 
	       gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT,
	       0, "int", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_int =
    init_type (TYPE_CODE_INT, 
	       gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, "unsigned int", 
	       (struct objfile *) NULL);
  builtin_type->builtin_long =
    init_type (TYPE_CODE_INT, 
	       gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT,
	       0, "long", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_long =
    init_type (TYPE_CODE_INT, 
	       gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, "unsigned long", 
	       (struct objfile *) NULL);
  builtin_type->builtin_long_long =
    init_type (TYPE_CODE_INT,
	       gdbarch_long_long_bit (gdbarch) / TARGET_CHAR_BIT,
	       0, "long long", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_long_long =
    init_type (TYPE_CODE_INT,
	       gdbarch_long_long_bit (gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, "unsigned long long", 
	       (struct objfile *) NULL);
d3234 1
a3234 1
    = init_float_type (gdbarch_float_bit (gdbarch),
d3237 1
a3237 1
    = init_float_type (gdbarch_double_bit (gdbarch),
d3240 1
a3240 1
    = init_float_type (gdbarch_long_double_bit (gdbarch),
d3243 2
a3244 1
    = init_complex_type ("complex", builtin_type->builtin_float);
d3246 6
a3251 9
    = init_complex_type ("double complex", builtin_type->builtin_double);
  builtin_type->builtin_string =
    init_type (TYPE_CODE_STRING, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "string", (struct objfile *) NULL);
  builtin_type->builtin_bool =
    init_type (TYPE_CODE_BOOL, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "bool", (struct objfile *) NULL);
d3256 1
a3256 3
    = init_type (TYPE_CODE_DECFLOAT, 32 / 8,
	        0,
	       "_Decimal32", (struct objfile *) NULL);
d3258 1
a3258 3
    = init_type (TYPE_CODE_DECFLOAT, 64 / 8,
	       0,
	       "_Decimal64", (struct objfile *) NULL);
d3260 1
a3260 3
    = init_type (TYPE_CODE_DECFLOAT, 128 / 8,
	       0,
	       "_Decimal128", (struct objfile *) NULL);
d3263 4
a3266 8
  builtin_type->builtin_true_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "true character", (struct objfile *) NULL);
  builtin_type->builtin_true_unsigned_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "true character", (struct objfile *) NULL);
d3269 24
a3292 44
  builtin_type->builtin_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
  builtin_type->builtin_int8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       TYPE_FLAG_NOTTEXT,
	       "int8_t", (struct objfile *) NULL);
  builtin_type->builtin_uint8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       TYPE_FLAG_UNSIGNED | TYPE_FLAG_NOTTEXT,
	       "uint8_t", (struct objfile *) NULL);
  builtin_type->builtin_int16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       0,
	       "int16_t", (struct objfile *) NULL);
  builtin_type->builtin_uint16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint16_t", (struct objfile *) NULL);
  builtin_type->builtin_int32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       0,
	       "int32_t", (struct objfile *) NULL);
  builtin_type->builtin_uint32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint32_t", (struct objfile *) NULL);
  builtin_type->builtin_int64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       0,
	       "int64_t", (struct objfile *) NULL);
  builtin_type->builtin_uint64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint64_t", (struct objfile *) NULL);
  builtin_type->builtin_int128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       0,
	       "int128_t", (struct objfile *) NULL);
  builtin_type->builtin_uint128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint128_t", (struct objfile *) NULL);
d3295 4
a3298 4
  builtin_type->builtin_data_ptr =
    make_pointer_type (builtin_type->builtin_void, NULL);
  builtin_type->builtin_func_ptr =
    lookup_pointer_type (lookup_function_type (builtin_type->builtin_void));
d3301 3
a3303 3
  builtin_type->internal_fn =
    init_type (TYPE_CODE_INTERNAL_FUNCTION, 0, 0,
	       "<internal function>", NULL);
@


1.173
log
@	* gdbtypes.h (builtin_type_int0, builtin_type_int8, builtin_type_uint8,
	builtin_type_int16, builtin_type_uint16, builtin_type_int32,
	builtin_type_uint32, builtin_type_int64, builtin_type_uint64,
	builtin_type_int128, builtin_type_uint128): Remove.
	(struct builtin_type): New members builtin_int0, builtin_int8,
	builtin_uint8, builtin_int16, builtin_uint16, builtin_int32,
	builtin_uint32, builtin_int64, builtin_uint64, builtin_int128,
	and builtin_uint128.
	* gdbtypes.c (builtin_type_int0, builtin_type_int8, builtin_type_uint8,
	builtin_type_int16, builtin_type_uint16, builtin_type_int32,
	builtin_type_uint32, builtin_type_int64, builtin_type_uint64,
	builtin_type_int128, builtin_type_uint128): Remove.
	(_initialize_gdbtypes): Do not initialize them.
	(gdbtypes_post_init): Initialize fixed-size integer types.

	* dwarf2expr.c (unsigned_address_type, signed_address_type): Add
	GDBARCH argument.  Return platform-specific type.
	(dwarf2_read_address, execute_stack_op): Update calls.

	* target-descriptions.c (tdesc_gdb_type): Use platform-specific types
	instead of global builtin_int_... variables.
	* mi/mi-main.c (mi_cmd_data_read_memory): Likewise.
	* printcmd.c (do_examine): Likewise.
	* jv-exp.y (parse_number): Likewise.

	* alpha-tdep.c (alpha_register_type, alpha_push_dummy_call,
	alpha_store_return_value): Likewise.
	* amd64-linux-tdep.c (amd64_linux_register_type): Likewise.
	* amd64-tdep.c (amd64_register_type): Likewise.
	* arm-tdep.c (arm_register_type): Likewise.
	* avr-tdep.c (avr_register_type): Likewise.
	* cris-tdep.c (cris_register_type, crisv32_register_type): Likewise.
	* frv-tdep.c (frv_register_type): Likewise.
	* h8300-tdep.c h8300_register_type): Likewise.
	* hppa-tdep.c (hppa64_push_dummy_call, hppa32_register_type,
	hppa64_register_type): Likewise.
	* i386-tdep.c (i386_mmx_type, i386_sse_type): Likewise.
	* iq2000-tdep.c (iq2000_register_type): Likewise.
	* lm32-tdep.c (lm32_register_type, lm32_push_dummy_call): Likewise.
	* m32r-tdep.c (m32r_register_type): Likewise.
	* m68hc11-tdep.c (m68hc11_register_type, m68hc11_pseudo_register_read,
	m68hc11_pseudo_register_write): Likewise.
	* m68k-tdep.c (m68k_register_type): Likewise.
	* m88k-tdep.c (m88k_register_type, m88k_store_arguments): Likewise.
	* mep-tdep.c (mep_register_type): Likewise.
	* mips-tdep.c (mips_register_type, mips_pseudo_register_type,
	mips_print_fp_register): Likewise.
	* moxie-tdep.c (moxie_register_type): Likewise.
	* mt-tdep.c (mt_copro_register_type, mt_register_type): Likewise.
	* rs6000-tdep.c (rs6000_builtin_type_vec64,
	rs6000_builtin_type_vec128): Likewise.
	* score-tdep.c (score_register_type): Likewise.
	* sparc-tdep.c (sparc32_register_type, sparc32_store_arguments):
	Likewise.
	* sparc64-tdep.c (sparc64_register_type, sparc64_store_arguments):
	Likewise.
	* spu-tdep.c (spu_builtin_type_vec128, spu_register_type): Likewise.
	* v850-tdep.c (v850_register_type): Likewise.
	* xstormy16-tdep.c (xstormy16_register_type): Likewise.
	* xtensa-tdep.c (xtensa_register_type): Likewise.

	* mt-tdep.c (struct gdbarch_tdep): New data structure.
	(mt_gdbarch_init): Alloc TDEP structures.
	(mt_register_type): Cache coprocessor type in TDEP instead of
	static global variable.

	* xtensa-tdep.h (struct gdbarch_tdep): Add type_entries member.
	* xtensa-tdep.c (type_entries): Remove.
	(xtensa_register_type): Cache fixed-size types in TDEP instead
	of in global variable.
@
text
@a88 7
struct type *builtin_type_ieee_single;
struct type *builtin_type_ieee_double;
struct type *builtin_type_i387_ext;
struct type *builtin_type_m68881_ext;
struct type *builtin_type_arm_ext;
struct type *builtin_type_ia64_spill;
struct type *builtin_type_ia64_quad;
d3032 2
a3033 2
static struct type *
build_flt (int bit, char *name, const struct floatformat **floatformats)
d3050 10
a3067 11

static struct type *
build_complex (int bit, char *name, struct type *target_type)
{
  struct type *t;
  t = init_type (TYPE_CODE_COMPLEX, 2 * bit / TARGET_CHAR_BIT,
		 0, name, (struct objfile *) NULL);
  TYPE_TARGET_TYPE (t) = target_type;
  return t;
}

d3129 2
a3130 2
    = build_flt (gdbarch_float_bit (gdbarch), "float",
		 gdbarch_float_format (gdbarch));
d3132 2
a3133 2
    = build_flt (gdbarch_double_bit (gdbarch), "double",
		 gdbarch_double_format (gdbarch));
d3135 2
a3136 2
    = build_flt (gdbarch_long_double_bit (gdbarch), "long double",
		 gdbarch_long_double_format (gdbarch));
d3138 1
a3138 2
    = build_complex (gdbarch_float_bit (gdbarch), "complex",
		     builtin_type->builtin_float);
d3140 1
a3140 2
    = build_complex (gdbarch_double_bit (gdbarch), "double complex",
		     builtin_type->builtin_double);
a3394 20
  /* FIXME: The following types are architecture-neutral.  However,
     they contain pointer_type and reference_type fields potentially
     caching pointer or reference types that *are* architecture
     dependent.  */

  builtin_type_ieee_single =
    build_flt (-1, "builtin_type_ieee_single", floatformats_ieee_single);
  builtin_type_ieee_double =
    build_flt (-1, "builtin_type_ieee_double", floatformats_ieee_double);
  builtin_type_i387_ext =
    build_flt (-1, "builtin_type_i387_ext", floatformats_i387_ext);
  builtin_type_m68881_ext =
    build_flt (-1, "builtin_type_m68881_ext", floatformats_m68881_ext);
  builtin_type_arm_ext =
    build_flt (-1, "builtin_type_arm_ext", floatformats_arm_ext);
  builtin_type_ia64_spill =
    build_flt (-1, "builtin_type_ia64_spill", floatformats_ia64_spill);
  builtin_type_ia64_quad =
    build_flt (-1, "builtin_type_ia64_quad", floatformats_ia64_quad);

@


1.172
log
@	* gdbtypes.h (builtin_type_true_char): Remove.
	(builtin_type_true_unsigned_char): Likewise.
	(struct builtin_type): Add builtin_true_char and
	builtin_true_unsigned_char members.
	* gdbtypes.c (builtin_type_true_char): Remove.
	(builtin_type_true_unsigned_char): Likewise.
	(_initialize_gdbtypes): Do not initialize them.
	(gdbtypes_post_init): Initialize builtin_true_char and
	builtin_true_unsigned_char members of builtin_type.

	* printcmd.c (print_scalar_formatted): Use builtin_type
	members instead of builtin_type_true_char and
	builtin_type_true_unsigned_char.
	* ada-valprint.c (ada_val_print_1): Likewise.
@
text
@a41 14
/* These variables point to the objects
   representing the predefined C data types.  */

struct type *builtin_type_int0;
struct type *builtin_type_int8;
struct type *builtin_type_uint8;
struct type *builtin_type_int16;
struct type *builtin_type_uint16;
struct type *builtin_type_int32;
struct type *builtin_type_uint32;
struct type *builtin_type_int64;
struct type *builtin_type_uint64;
struct type *builtin_type_int128;
struct type *builtin_type_uint128;
d3185 46
a3409 45
  builtin_type_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
  builtin_type_int8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       TYPE_FLAG_NOTTEXT,
	       "int8_t", (struct objfile *) NULL);
  builtin_type_uint8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       TYPE_FLAG_UNSIGNED | TYPE_FLAG_NOTTEXT,
	       "uint8_t", (struct objfile *) NULL);
  builtin_type_int16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       0,
	       "int16_t", (struct objfile *) NULL);
  builtin_type_uint16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint16_t", (struct objfile *) NULL);
  builtin_type_int32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       0,
	       "int32_t", (struct objfile *) NULL);
  builtin_type_uint32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint32_t", (struct objfile *) NULL);
  builtin_type_int64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       0,
	       "int64_t", (struct objfile *) NULL);
  builtin_type_uint64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint64_t", (struct objfile *) NULL);
  builtin_type_int128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       0,
	       "int128_t", (struct objfile *) NULL);
  builtin_type_uint128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint128_t", (struct objfile *) NULL);

@


1.171
log
@	* gdbtypes.h (builtin_type_void): Remove.
	* gdbtypes.c (builtin_type_void): Remove.
	(_initialize_gdbtypes): Do not initialize it.

	(safe_parse_type): Add GDBARCH argument.  Use it to construct
	void return type.
	(check_stub_method): Update call.

	* infcall.c (call_function_by_hand): Use platform-specific type
	instead of builtin_type_void.
	* valops.c (value_cast): Use input void type instead of
	builtin_type_void.
@
text
@a110 5
/* Platform-neutral character types.  */
struct type *builtin_type_true_char;
struct type *builtin_type_true_unsigned_char;


d3189 10
a3437 9
  builtin_type_true_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "true character", (struct objfile *) NULL);
  builtin_type_true_unsigned_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "true character", (struct objfile *) NULL);

@


1.170
log
@	* gdbtypes.c (lookup_array_range_type): Add prototype.
	(lookup_string_range_type): Likewise.
	* gdbtypes.c (lookup_array_range_type): New function.
	(lookup_string_range_type): Likewise.

	* ax-gdb.c (gen_repeat): Use lookup_array_range_type.
	* parse.c (follow_types): Likewise.
	* jv-lang.c (java_array_type): Likewise.
	* gnu-v3-abi.c (build_gdb_vtable_type): Likewise.
	* mt-tdep.c (mt_register_type): Likewise.
	* sh-tdep.c (sh_sh4_build_float_register_type): Likewise.
	* sh64-tdep.c (sh64_build_float_register_type): Likewise.
	* value.c (allocate_repeat_value): Likewise.
	* valops.c (value_array, value_cstring): Likewise.
	* valops.c (value_string): Use lookup_string_range_type.
@
text
@a110 3
/* Platform-neutral void type.  */
struct type *builtin_type_void;

d1525 1
a1525 1
   occurs, silently return builtin_type_void.  */
d1528 1
a1528 1
safe_parse_type (char *p, int length)
d1539 1
a1539 1
    type = builtin_type_void;
d1561 1
d1635 1
a1635 1
		    safe_parse_type (argtypetext, p - argtypetext);
a3432 4
  builtin_type_void =
    init_type (TYPE_CODE_VOID, 1,
	       0,
	       "void", (struct objfile *) NULL);
@


1.169
log
@	* gdbtypes.h (struct builtin_type): Add internal_fn member.
	* gdbtypes.c (gdbtypes_post_init): Initialize it.
	* value.c (internal_fn_type): Remove.
	(_initialize_values): Do not initialize it.

	* value.c (struct internalvar): Add enum internalvar_kind type and
	kind member.  Restructure union internalvar_data type.  Remove type,
	canonical, and make_value members.
	(init_if_undefined_command): Update for data structure changes.
	(create_internalvar): Likewise.
	(create_internalvar_type_lazy): Likewise.
	(get_internalvar_integer): Likewise.
	(get_internalvar_function): Likewise.
	(set_internalvar_component): Likewise.
	(set_internalvar): Likewise.
	(set_internalvar_integer): Likewise.
	(set_internalvar_function): Likewise.
	(clear_internalvar): Likewise.
	(add_internal_function): Likewise.
	(preserve_one_internalvar): New function.
	(preserve_values): Call it.

	* value.h (value_of_internalvar): Add GDBARCH parameter.
	(internalvar_make_value): Likewise.
	* value.c (value_of_internalvar): Add GDBARCH parameter.  Pass it to
	make_value callback.  Use it to generate per-architecture result value
	types for internal variables with no pre-defined type.  Update for data
	structure changes.
	(show_convenience): Pass architecture to value_of_internalvar.
	* eval.c (evaluate_subexp_standard): Likewise.
	* infrun.c (siginfo_make_value): Add GDBARCH parameter.  Use it
	instead of current frame architecture.  Return per-architecture type.

	* value.h (set_internalvar_string): Add prototype.
	* value.c (set_internalvar_string): New function.
	* tracepoint.c (set_traceframe_context): Use it.
@
text
@d836 11
d872 11
d972 1
a972 5
 
  array_type = create_array_type (0, elt_type,
				  create_range_type (0, 
						     builtin_type_int32,
						     0, n-1));
@


1.168
log
@	* gdbtypes.h (make_function_type): Remove OBJFILE parameter.
	* gdbtypes.c (make_function_type): Remove OBJFILE parameter.
	(lookup_function_type): Update call.
	* stabsread.c (read_type): Likewise.
	* dwarf2read.c (read_subroutine_type): Use lookup_function_type
	instead of make_function_type.
	* jv-lang.c (type_from_class): Likewise.  Do not allocate types
	on the fake "dynamics" obstack.
@
text
@d3184 5
@


1.167
log
@	* gdbtypes.h (struct builtin_type): Remove builtin_core_addr,
	nodebug_text_symbol, nodebug_data_symbol, nodebug_unknown_symbol,
	and nodebug_tls_symbol members.
	(struct objfile_type): New data structure.
	(objfile_type): Add prototype.
	* gdbtypes.c (gdbtypes_post_init): Remove initialization code
	for types no longer in struct builtin_type.
	(objfile_type_data): New static variable.
	(_initialize_gdbtypes): Initialize it.
	(objfile_type): New function.

	* gdbtypes.h (builtin_type_error): Remove.
	* gdbtypes.c (build_complex): Do not use builtin_type_error.
	* symtab.c (builtin_type_error): Remove.
	(_initialize_symtab): Remove initialization.

	* stabsread.c (dbx_lookup_type, define_symbol, error_type,
	rs6000_builtin_type, read_range_type): Use per-objfile types
	instead of global or per-architecture builtin types.
	* coffread.c (decode_type): Likewise.
	* dwarf2read.c (read_array_type, read_tag_string_type,
	new_symbol, die_type): Likewise.
	* mdebugread.c (parse_symbol, basic_type, upgrade_type,
	parse_procedure, psymtab_to_symtab_1): Likewise.
	* xcoffread.c (process_xcoff_symbol): Likewise.
	* parse.c (write_exp_msymbol): Likewise.

	* stabsread.c (rs6000_builtin_type_data): New static variable.
	(_initialize_stabsread): Initialize it.
	(rs6000_builtin_type): Add OBJFILE argument.  Allocate builtin
	types per-objfile instead of globally.

	* stabsread.c (dbx_lookup_type): Add OBJFILE argument.  Use it
	instead of current_objfile; pass it to rs6000_builtin_type.
	(dbx_alloc_type, read_type, read_range_type): Update calls.
	(cleanup_undefined_types_noname): Add OBJFILE argument and
	pass it to dbx_lookup_type.
	(cleanup_undefined_types): Add OBJFILE argument and pass it
	to cleanup_undefined_types_noname.
	* stabsread.h (cleanup_undefined_types): Add OBJFILE argument.
	* buildsym.c (end_symtab): Update call.
@
text
@d381 1
a381 2
   function type we return.  We allocate new memory from OBJFILE if needed; use
   NULL for permanent types.  */
d384 1
a384 2
make_function_type (struct type *type, struct type **typeptr,
		    struct objfile *objfile)
d387 1
d391 1
a391 1
      ntype = alloc_type (objfile);
d398 1
d418 1
a418 1
  return make_function_type (type, (struct type **) 0, TYPE_OBJFILE (type));
@


1.166
log
@	* gdbtypes.c (create_string_type): Receive character type as argument.
	* gdbtypes.h (create_string_type): Add character type argument.
        * dwarf2read.c (read_tag_string_type): Pass character type to
	create_string_type.

	* value.h (value_string): Add character type argument.
	* valops.c (value_string): Add character type argument.  Pass it to
	create_string_type.  Do not allocate space in inferior.
	* valarith.c (value_concat): Pass character type to value_string.

	* value.h (value_typed_string): Rename to ...
	(value_cstring): ... this.
	* valops.c (value_typed_string): Rename to ...
	(value_cstring): ... this.
	* c-lang.c (evaluate_subexp_c): Update.

	* python/python-value.c (builtin_type_pychar): New define.
	(convert_value_from_python): Call value_cstring instead
	of value_from_string.
	* value.c (value_from_string): Remove.
	* value.h (value_from_string): Remove.

	* eval.c (evaluate_subexp_standard): Pass character type to
	value_string.  Pass expression architecture to value_nsstring
	and lookup_child_selector.
	* objc-lang.h (lookup_objc_class): Add GDBARCH parameter.
	(lookup_child_selector): Likewise.
	(value_nsstring): Likewise.
	* objc-lang.c (lookup_objc_class): Add GDBARCH parameter.
	Pass character type to value_string..
	(lookup_child_selector): Likewise.
	(value_nsstring): Add GDBARCH parameter, use it instead of
	objfile architecture.  Pass architecture to lookup_objc_class
	and lookup_child_selector. Pass character type to value_string.
	(end_msglist): Pass architecture to lookup_objc_class.
	* objc-exp.y: Pass architecture to lookup_objc_class.
@
text
@a3072 5
  if (bit <= 0 || target_type == builtin_type_error)
    {
      gdb_assert (builtin_type_error != NULL);
      return builtin_type_error;
    }
d3085 1
d3178 124
a3301 1
  /* Pointer/Address types.  */
d3325 9
a3333 14
     In this context, builtin_type->CORE_ADDR is a bit odd: it's a
     target type for a value the target will never see.  It's only
     used to hold the values of (typeless) linker symbols, which are
     indeed in the unified virtual address space.  */

  builtin_type->builtin_data_ptr =
    make_pointer_type (builtin_type->builtin_void, NULL);
  builtin_type->builtin_func_ptr =
    lookup_pointer_type (lookup_function_type (builtin_type->builtin_void));
  builtin_type->builtin_core_addr =
    init_type (TYPE_CODE_INT, 
	       gdbarch_addr_bit (gdbarch) / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__CORE_ADDR", (struct objfile *) NULL);
d3335 3
a3338 21
  /* The following set of types is used for symbols with no
     debug information.  */
  builtin_type->nodebug_text_symbol =
    init_type (TYPE_CODE_FUNC, 1, 0, 
	       "<text variable, no debug info>", NULL);
  TYPE_TARGET_TYPE (builtin_type->nodebug_text_symbol) =
    builtin_type->builtin_int;
  builtin_type->nodebug_data_symbol =
    init_type (TYPE_CODE_INT, 
	       gdbarch_int_bit (gdbarch) / HOST_CHAR_BIT, 0,
	       "<data variable, no debug info>", NULL);
  builtin_type->nodebug_unknown_symbol =
    init_type (TYPE_CODE_INT, 1, 0,
	       "<variable (not text or data), no debug info>", NULL);
  builtin_type->nodebug_tls_symbol =
    init_type (TYPE_CODE_INT, 
	       gdbarch_int_bit (gdbarch) / HOST_CHAR_BIT, 0,
	       "<thread local variable, no debug info>", NULL);

  return builtin_type;
}
d3345 1
@


1.165
log
@	* gdbtypes.h (struct language_defn): Add forward declaration.
	(lookup_typename): Add LANGUAGE and GDBARCH parameters.
	(lookup_unsigned_typename): Likewise.
	(lookup_signed_typename): Likewise.
	* gdbtypes.c (lookup_typename): Add LANGUAGE and GDBARCH parameters.
	Use them instead of current_language and current_gdbarch.
	(lookup_unsigned_typename): Add LANGUAGE and GDBARCH parameters.
	Pass them to lookup_typename.
	(lookup_signed_typename): Likewise.

	* c-exp.y: Pass parse_language and parse_gdbarch to
	lookup_unsigned_typename and lookup_signed_typename.
	* objc-exp.y: Likewise.
	* m2-exp.y: Pass parse_language and parse_gdbarch to lookup_typename.

	* c-lang.c (evaluate_subexp_c): Pass expression language and
	gdbarch to lookup_typename.
	* printcmd.c (printf_command): Pass current language and
	gdbarch to lookup_typename.
	* python/python-type.c (typy_lookup_typename): Likewise.
	Include "language.h".
@
text
@d849 2
a850 1
create_string_type (struct type *result_type, 
a852 4
  struct type *string_char_type;
      
  string_char_type = language_string_char_type (current_language,
						current_gdbarch);
@


1.164
log
@	* linespec.c (collect_methods): Delete.
	(add_matching_methods): Reove destructor special case.
	(find_method): Call find_methods directly instead of
	collect_methods.
	* valops.c (value_struct_elt): Remove destructor
	special cases.
	(check_field): Likewise.
	(value_struct_elt_for_reference): Likewise.
	(destructor_name_p): Remove misleading comment about dtors
	being "special cases".
	* gdbtypes.h (get_destructor_fn_field): Remove. No longer needed.
	* gdbtypes.c (get_destructor_fn_field): Likewise.
@
text
@d1039 3
a1041 1
lookup_typename (char *name, struct block *block, int noerr)
d1049 1
a1049 3
      tmp = language_lookup_primitive_type_by_name (current_language,
						    current_gdbarch,
						    name);
d1067 2
a1068 1
lookup_unsigned_typename (char *name)
d1074 1
a1074 1
  return (lookup_typename (uns, (struct block *) NULL, 0));
d1078 2
a1079 1
lookup_signed_typename (char *name)
d1086 1
a1086 1
  t = lookup_typename (uns, (struct block *) NULL, 1);
d1090 1
a1090 1
  return lookup_typename (name, (struct block *) NULL, 0);
@


1.163
log
@gdb/
	Make specifiable the make_function_type type memory ownership.
	* gdbtypes.c (make_function_type): New parameter `objfile', use it
	explicitely instead of TYPE-initialized removed local variable
	`objfile'.  Describe `objfile' it in the function comment.
	(lookup_function_type): Update make_function_type callers.
	* gdbtypes.h (make_function_type): Update the prototype.
	* jv-lang.c (java_link_class_type): Update make_function_type callers.
	* dwarf2read.c (read_subroutine_type): Likewise.
	* stabsread.c (read_type): Likewise.
@
text
@a1336 28
/* Find the method and field indices for the destructor in class type T.
   Return 1 if the destructor was found, otherwise, return 0.  */

int
get_destructor_fn_field (struct type *t, 
			 int *method_indexp, 
			 int *field_indexp)
{
  int i;

  for (i = 0; i < TYPE_NFN_FIELDS (t); i++)
    {
      int j;
      struct fn_field *f = TYPE_FN_FIELDLIST1 (t, i);

      for (j = 0; j < TYPE_FN_FIELDLIST_LENGTH (t, i); j++)
	{
	  if (is_destructor_name (TYPE_FN_FIELD_PHYSNAME (f, j)) != 0)
	    {
	      *method_indexp = i;
	      *field_indexp = j;
	      return 1;
	    }
	}
    }
  return 0;
}

@


1.162
log
@	* gdbtypes.c: Remove excessive parentheses at the return keywords.
@
text
@d381 2
a382 1
   function type we return.  We allocate new memory if needed.  */
d385 2
a386 1
make_function_type (struct type *type, struct type **typeptr)
a388 1
  struct objfile *objfile;
d392 1
a392 1
      ntype = alloc_type (TYPE_OBJFILE (type));
a398 1
      objfile = TYPE_OBJFILE (ntype);
d418 1
a418 1
  return make_function_type (type, (struct type **) 0);
@


1.161
log
@2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* target.h (enum target_object): Add new TARGET_OBJECT_SIGNAL_INFO.
	* infrun.c (siginfo_value_read, siginfo_value_write): New.
	(siginfo_value_funcs): New.
	(siginfo_make_value): New.
	(_initialize_infrun): Create the $_siginfo convenience variable.
	* gdbtypes.h (append_composite_type_field_aligned): Declare.
	* gdbtypes.c (append_composite_type_field): Rename to...
	(append_composite_type_field_aligned): ... this.  Add ALIGNMENT
	argument.  Handle it.
	(append_composite_type_field): Rewrite on top of
	append_composite_type_field_aligned.
	* value.h (internalvar_make_value): New typedef.
	(struct internalvar) <make_value>: New field.
	(create_internalvar_type_lazy): Declare.
	* value.c (create_internalvar): Clear make_value.
	(create_internalvar_type_lazy): New.
	(value_of_internalvar): If make_value is set use it.
	(preserve_values): Skip internal variables that don't have a
	value.
	* gdbarch.sh (get_siginfo_type): New.
	* gdbarch.h, gdbarch.c: Regenerate.

	* linux-tdep.h, linux-tdep.c: New.
	* amd64-linux-tdep.c: Include "linux-tdep.h".
	(amd64_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.
	* i386-linux-tdep.c: Include "linux-tdep.h".
	(i386_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.
	* arm-linux-tdep.c: Include "linux-tdep.h".
	(i386_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.

	* linux-nat.c (linux_xfer_siginfo): New.
	(linux_nat_xfer_partial): Handle TARGET_OBJECT_SIGNAL_INFO.
	* remote.c (PACKET_qXfer_siginfo_read)
	(PACKET_qXfer_siginfo_write): New.
	(feature remote_protocol_features): Add "qXfer:siginfo:read" and
	"qXfer:siginfo:write" features.
	(remote_xfer_partial): Handle TARGET_OBJECT_SIGNAL_INFO.
	(_initialize_remote): Add "set/show remote read-siginfo-object"
	and "set/show remote write-siginfo-object" commands.

	* Makefile.in (ALL_TARGET_OBS): Add linux-tdep.o.
	(HFILES_NO_SRCDIR): Add linux-tdep.h.
	(ALLDEPFILES): Add linux-tdep.c.

	* configure.tgt (arm*-*-linux* | arm*-*-uclinux*)
	(i[34567]86-*-linux*, x86_64-*-linux*): Add linux-tdep.o to
	gdb_target_obs.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/gdbserver/
	* server.c (handle_query): Report qXfer:siginfo:read and
	qXfer:siginfo:write as supported and handle them.
	* target.h (struct target_ops) <qxfer_siginfo>: New field.
	* linux-low.c (linux_xfer_siginfo): New.
	(linux_target_ops): Set it.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Signals): Document $_siginfo.
	(Convenience Variables): Mention $_siginfo.
	(Remote Configuration): Document qXfer:siginfo:read,
	qXfer:siginfo:write packets, and the read-siginfo-object,
	write-siginfo-object commands.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/testsuite/
	* gdb.base/siginfo-obj.c, gdb.base/siginfo-obj.exp: New.
@
text
@d183 1
a183 1
  return (type);
d207 1
a207 1
  return (type);
d648 1
a648 1
  return (mtype);
d681 1
a681 1
  return (mtype);
d833 1
a833 1
  return (result_type);
d860 1
a860 1
  return (result_type);
d887 1
a887 1
  return (result_type);
d1052 1
a1052 1
	  return (tmp);
d1056 1
a1056 1
	  return (NULL);
d1130 1
a1130 1
    return (t);
d1137 1
a1137 1
      return (t);
d1806 1
a1806 1
  return (type);
@


1.160
log
@	* gdbtypes.c (alloc_type, alloc_type_instance, create_range_type)
	(create_array_type, create_set_type, init_flags_type)
	(copy_type_recursive): Replace pairs of calls to XALLOC and memset
	with a call to XZALLOC or XCALLOC, and pairs of calls to
	obstack_alloc and memset with a call to OBSTACK_ZALLOC.
@
text
@d1825 2
a1826 2
append_composite_type_field (struct type *t, char *name, 
			     struct type *field)
d1845 15
a1859 3
	FIELD_BITPOS (f[0]) = (FIELD_BITPOS (f[-1])
			       + (TYPE_LENGTH (FIELD_TYPE (f[-1]))
				  * TARGET_CHAR_BIT));
d1863 7
@


1.159
log
@	* gdbtypes.c (make_qualified_type, replace_type): Reformat to the GNU
	coding style.
@
text
@d165 2
a166 3
      type = xmalloc (sizeof (struct type));
      memset (type, 0, sizeof (struct type));
      TYPE_MAIN_TYPE (type) = xmalloc (sizeof (struct main_type));
d170 3
a172 5
      type = obstack_alloc (&objfile->objfile_obstack,
			    sizeof (struct type));
      memset (type, 0, sizeof (struct type));
      TYPE_MAIN_TYPE (type) = obstack_alloc (&objfile->objfile_obstack,
					     sizeof (struct main_type));
a174 1
  memset (TYPE_MAIN_TYPE (type), 0, sizeof (struct main_type));
d198 1
a198 4
    {
      type = xmalloc (sizeof (struct type));
      memset (type, 0, sizeof (struct type));
    }
d200 3
a202 5
    {
      type = obstack_alloc (&TYPE_OBJFILE (oldtype)->objfile_obstack,
			    sizeof (struct type));
      memset (type, 0, sizeof (struct type));
    }
d699 1
a699 3
    {
      result_type = alloc_type (TYPE_OBJFILE (index_type));
    }
d707 3
a709 5
  TYPE_FIELDS (result_type) = TYPE_ALLOC (result_type,
					  TYPE_NFIELDS (result_type)
					  * sizeof (struct field));
  memset (TYPE_FIELDS (result_type), 0,
	  TYPE_NFIELDS (result_type) * sizeof (struct field));
d825 1
a825 2
    (struct field *) TYPE_ALLOC (result_type, sizeof (struct field));
  memset (TYPE_FIELDS (result_type), 0, sizeof (struct field));
d872 1
a872 3
  TYPE_FIELDS (result_type) = (struct field *)
    TYPE_ALLOC (result_type, 1 * sizeof (struct field));
  memset (TYPE_FIELDS (result_type), 0, sizeof (struct field));
d918 1
a918 3
  TYPE_FIELDS (type) = TYPE_ALLOC (type, 
				   nfields * sizeof (struct field));
  memset (TYPE_FIELDS (type), 0, nfields * sizeof (struct field));
d2966 1
a2966 2
      TYPE_FIELDS (new_type) = xmalloc (sizeof (struct field) * nfields);
      memset (TYPE_FIELDS (new_type), 0, sizeof (struct field) * nfields);
@


1.158
log
@	* gdbtypes.c (append_composite_type_field): Correct the location of
	appended fields.
@
text
@d481 7
a487 5
  do {
    if (TYPE_INSTANCE_FLAGS (ntype) == new_flags)
      return ntype;
    ntype = TYPE_CHAIN (ntype);
  } while (ntype != type);
d625 14
a638 12
  do {
    /* Assert that this element of the chain has no address-class bits
       set in its flags.  Such type variants might have type lengths
       which are supposed to be different from the non-address-class
       variants.  This assertion shouldn't ever be triggered because
       symbol readers which do construct address-class variants don't
       call replace_type().  */
    gdb_assert (TYPE_ADDRESS_CLASS_ALL (chain) == 0);

    TYPE_LENGTH (chain) = TYPE_LENGTH (type);
    chain = TYPE_CHAIN (chain);
  } while (ntype != chain);
@


1.157
log
@        Updated copyright notices for most files.
@
text
@d1859 3
a1861 4
	{
	  FIELD_BITPOS (f[0]) = (FIELD_BITPOS (f[-1])
				 + TYPE_LENGTH (field) * TARGET_CHAR_BIT);
	}
@


1.156
log
@	Fix TYPE_HIGH_BOUND for TYPE_CODE_RANGE using arbitrary TYPE_NFIELDS in
	preparation for supporting DW_AT_byte_stride.
	* ada-lang.c (packed_array_type, ada_index_type): Use TYPE_INDEX_TYPE.
	(ada_array_bound_from_type): Move `index_type' declaration to the
	function start.  New variable `retval'.  Return the bounds for
	TYPE_CODE_RANGE using TYPE_LOW_BOUND and TYPE_HIGH_BOUND.  Abort on
	invalid index type codes.
	* ada-typeprint.c (print_range): Set `upper_bound' for TYPE_CODE_RANGE
	now using TYPE_HIGH_BOUND.
	* ada-valprint.c (val_print_packed_array_elements): Use `index_type'.
	* eval.c (evaluate_subexp_standard): Use TYPE_INDEX_TYPE.
	* gdbtypes.c (create_range_type): Use TYPE_LOW_BOUND, TYPE_HIGH_BOUND,
	refer to the number of fields only through TYPE_NFIELDS.
	(create_array_type): Use TYPE_INDEX_TYPE.
	(check_typedef): Use TYPE_INDEX_TYPE, TYPE_LOW_BOUND, TYPE_HIGH_BOUND.
	* gdbtypes.h (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED)
	(TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED): Use TYPE_INDEX_TYPE.
	(TYPE_ARRAY_UPPER_BOUND_VALUE, TYPE_ARRAY_LOWER_BOUND_VALUE): Use
	TYPE_INDEX_TYPE, TYPE_LOW_BOUND, TYPE_HIGH_BOUND,
	* hppa-tdep.c (hppa_alignof <TYPE_CODE_ARRAY>): Use TYPE_INDEX_TYPE.
	* mdebugread.c (parse_type): Use TYPE_LOW_BOUND, TYPE_HIGH_BOUND,
	* valarith.c (value_bit_index): Use TYPE_INDEX_TYPE.
@
text
@d4 1
a4 1
   2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
@


1.155
log
@	* gdbtypes.c (copy_type_recursive): Clear new fields.
@
text
@d714 7
a720 5
  TYPE_FIELDS (result_type) = (struct field *)
    TYPE_ALLOC (result_type, 2 * sizeof (struct field));
  memset (TYPE_FIELDS (result_type), 0, 2 * sizeof (struct field));
  TYPE_FIELD_BITPOS (result_type, 0) = low_bound;
  TYPE_FIELD_BITPOS (result_type, 1) = high_bound;
d725 1
a725 1
  return (result_type);
d836 1
a836 1
  TYPE_FIELD_TYPE (result_type, 0) = range_type;
d1522 1
a1522 1
	       && (TYPE_CODE (range_type = TYPE_FIELD_TYPE (type, 0))
d1529 2
a1530 2
	  const int low_bound = TYPE_FIELD_BITPOS (range_type, 0);
	  const int high_bound = TYPE_FIELD_BITPOS (range_type, 1);
@


1.154
log
@        * gdbtypes.c (copy_type): New function.
        * gdbtypes.h (copy_type): Add declaration.
        * ada-lang.c (ada_to_fixed_type_1): If there is a parallel XVZ
        variable, then use it.
@
text
@d2980 1
@


1.153
log
@	Convert static_kind into loc_kind enum.
	* gdbtypes.h (enum field_loc_kind): New.
	(union field_location): New field dwarf_block.
	(struct field): Rename static_kind as loc_kind.
	(FIELD_STATIC_KIND): Rename to ...
	(FIELD_LOC_KIND): ... here.
	(TYPE_FIELD_STATIC_KIND): Rename to ...
	(TYPE_FIELD_LOC_KIND): ... here and use there now new FIELD_LOC_KIND.
	(TYPE_FIELD_STATIC_HAS_ADDR): Remove.
	(TYPE_FIELD_STATIC): Remove.
	(TYPE_FIELD_BITPOS): Reformat.
	(SET_FIELD_BITPOS): New.
	(FIELD_PHYSADDR): Rename to ...
	(FIELD_STATIC_PHYSADDR): ... here.
	(TYPE_FIELD_STATIC_PHYSADDR): Follow the FIELD_PHYSADDR rename.
	(SET_FIELD_PHYSADDR): Use new FIELD_LOC_KIND.
	(FIELD_PHYSNAME): Rename to ...
	(FIELD_STATIC_PHYSNAME): ... here.
	(TYPE_FIELD_STATIC_PHYSNAME): Follow the FIELD_PHYSNAME rename.
	(SET_FIELD_PHYSNAME): Use new FIELD_LOC_KIND.
	(FIELD_DWARF_BLOCK, TYPE_FIELD_DWARF_BLOCK, SET_FIELD_DWARF_BLOCK): New.
	(field_is_static): New declaration.
	* gdbtypes.c (field_is_static): New function.
	(copy_type_recursive): Update throughout.
	* amd64-tdep.c, c-typeprint.c, coffread.c, cp-valprint.c, dwarf2read.c,
	eval.c, jv-typeprint.c, jv-valprint.c, mdebugread.c, p-typeprint.c,
	p-valprint.c, valops.c, value.c, varobj.c: Update throughout.
@
text
@d3043 22
@


1.152
log
@2008-10-03  Paul Pluzhnikov  <ppluzhnikov@@google.com>

	PR gdb/2384:
	* gdbtypes.c (get_vptr_fieldno): baseclass and basetype may have
	different lifetimes.
@
text
@d2437 14
d2992 1
a2992 8
	  if (TYPE_FIELD_STATIC_HAS_ADDR (type, i))
	    SET_FIELD_PHYSADDR (TYPE_FIELD (new_type, i),
				TYPE_FIELD_STATIC_PHYSADDR (type, i));
	  else if (TYPE_FIELD_STATIC (type, i))
	    SET_FIELD_PHYSNAME (TYPE_FIELD (new_type, i),
				xstrdup (TYPE_FIELD_STATIC_PHYSNAME (type, 
								     i)));
	  else
d2994 17
a3010 3
	      TYPE_FIELD_BITPOS (new_type, i) = 
		TYPE_FIELD_BITPOS (type, i);
	      TYPE_FIELD_STATIC_KIND (new_type, i) = 0;
@


1.151
log
@gdb/
	Replace TYPE_ARRAY_{UPPER,LOWER}_BOUND_TYPE by a bit if {un,}defined.
	* c-typeprint.c (c_type_print_varspec_suffix), m2-typeprint.c
	(m2_array), p-typeprint.c (pascal_type_print_varspec_prefix),
	valops.c (value_cast), varobj.c (c_number_of_children): Replace
	TYPE_ARRAY_UPPER_BOUND_TYPE compared to BOUND_CANNOT_BE_DETERMINED by
	TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED.
	* parse.c (follow_types): Use TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED.
	* f-valprint.c (f77_get_dynamic_upperbound): Replace with ...
	(f77_get_upperbound): ... this function handling now only
	TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED.
	(f77_get_dynamic_lowerbound): Replace with ...
	(f77_get_lowerbound): ... this function handling now only
	TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED.
	(f77_get_dynamic_length_of_aggregate, f77_create_arrayprint_offset_tbl):
	Update their callers.
	* eval.c (evaluate_subexp_standard): Update their callers.
	* f-lang.h (f77_get_dynamic_upperbound, f77_get_upperbound)
	(f77_get_dynamic_lowerbound, f77_get_lowerbound): Update their
	prototypes.
	(BOUND_FETCH_OK, BOUND_FETCH_ERROR): Remove.
	* f-typeprint.c (f_type_print_varspec_suffix, f_type_print_base): Remove
	the lower_bound_was_default variable.  Update the
	f77_get_dynamic_upperbound, f77_get_upperbound and
	TYPE_ARRAY_UPPER_BOUND_TYPE calls.
	* gdbtypes.c (print_bound_type): Remove the function.
	(recursive_dump_type): Remove its calls printing UPPER_BOUND_TYPE and
	LOWER_BOUND_TYPE.
	* gdbtypes.h (enum array_bound_type): Remove.
	(struct main_type): Remove the fields upper_bound_type and
	lower_bound_type.  Comment the new overload of the field artificial.
	(TYPE_ARRAY_UPPER_BOUND_TYPE): Replace by ...
	(TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED): ... this macro.
	(TYPE_ARRAY_LOWER_BOUND_TYPE): Replace by ...
	(TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED): ... this macro.

gdb/testsuite/
	* gdb.base/maint.exp (maint print type): Remove printing
	UPPER_BOUND_TYPE and LOWER_BOUND_TYPE.
@
text
@d1327 1
a1327 1
	      if (TYPE_OBJFILE (type) == TYPE_OBJFILE (baseclass))
@


1.150
log
@	* cp-abi.h (cplus_method_ptr_size): Add TO_TYPE parameter.
	(cplus_make_method_ptr): Add TYPE parameter.
	* cp-abi.c (cplus_method_ptr_size): Add TO_TYPE parameter.  Pass it
	on to current_cp_abi.method_ptr_size callback.
	(cplus_make_method_ptr): Add TYPE parameter.  Pass it on to
	current_cp_abi.make_method_ptr callback.

	* gdbtypes.c (lookup_methodptr_type): Pass target type
	argument to cplus_method_ptr_size.
	* valops.c (value_cast): Pass type argument to cplus_make_method_ptr.
	(value_struct_elt_for_reference): Likewise.

	* gnu-v3-abi.c (get_class_arch): New function.
	(vtable_address_point_offset): Add GDBARCH parameter.  Use it
	instead of current_gdbarch.  Update all callers.
	(gnuv3_get_vtable): Likewise.
	(gnuv3_get_virtual_fn): Likewise.
	(gnuv3_decode_method_ptr): Likewise.
	(gnuv3_rtti_type): Call get_class_arch to determine architecture.
	Use it instead of current_gdbarch.
	(gnuv3_virtual_fn_field): Likewise.
	(gnuv3_baseclass_offset): Likewise.
	(gnuv3_print_method_ptr): Likewise.
	(gnuv3_method_ptr_to_value): Likewise.
	(gnuv3_method_ptr_size): Add TYPE parameter.  Use it to determine
	class architecture.  Use architecture types instead of builtin types.
	(gnuv3_make_method_ptr): Likewise.

	* cp-valprint.c (cp_print_class_member): Expect pointer type
	instead of class type.  Use its length when extracting value.
	* c-valprint.c (c_val_print): Update call to cp_print_class_member.
@
text
@a2558 29
static void
print_bound_type (int bt)
{
  switch (bt)
    {
    case BOUND_CANNOT_BE_DETERMINED:
      printf_filtered ("(BOUND_CANNOT_BE_DETERMINED)");
      break;
    case BOUND_BY_REF_ON_STACK:
      printf_filtered ("(BOUND_BY_REF_ON_STACK)");
      break;
    case BOUND_BY_VALUE_ON_STACK:
      printf_filtered ("(BOUND_BY_VALUE_ON_STACK)");
      break;
    case BOUND_BY_REF_IN_REG:
      printf_filtered ("(BOUND_BY_REF_IN_REG)");
      break;
    case BOUND_BY_VALUE_IN_REG:
      printf_filtered ("(BOUND_BY_VALUE_IN_REG)");
      break;
    case BOUND_SIMPLE:
      printf_filtered ("(BOUND_SIMPLE)");
      break;
    default:
      printf_filtered (_("(unknown bound type)"));
      break;
    }
}

a2692 8
  printfi_filtered (spaces, "upper_bound_type 0x%x ",
		    TYPE_ARRAY_UPPER_BOUND_TYPE (type));
  print_bound_type (TYPE_ARRAY_UPPER_BOUND_TYPE (type));
  puts_filtered ("\n");
  printfi_filtered (spaces, "lower_bound_type 0x%x ",
		    TYPE_ARRAY_LOWER_BOUND_TYPE (type));
  print_bound_type (TYPE_ARRAY_LOWER_BOUND_TYPE (type));
  puts_filtered ("\n");
@


1.149
log
@	* gdbtypes.h (struct builtin_type): Remove builtin_true_char
	and builtin_true_unsigned_char.
	(builtin_type_true_char): Remove macro, add extern declaration.
	(builtin_type_true_unsigned_char): Add extern declaration.
	* gdbtypes.c (builtin_type_true_char): New global variable.
	(builtin_type_true_unsigned_char): Likewise.
	(_initialize_gdbtypes): Initialize them.
	(gdbtypes_post_init): Do not initialize builtin_true_char
	and builtin_true_unsigned_char members of struct builtin_type.

	* printcmd.c (print_scalar_formatted): Do not use builtin_type;
	use builtin_type_true_unsigned_char instead.

	* ada-valprint.c (ada_val_print_1): Use builtin_type_true_char
	instead of builtin_type_char for internal string.
@
text
@d666 1
a666 1
  TYPE_LENGTH (mtype) = cplus_method_ptr_size ();
@


1.148
log
@	* gdbtypes.h (builtin_type_void): Remove macro, add declaration.
	(builtin_type_f_void): Remove macro.
	* gdbtypes.c (builtin_type_void): New global variable.
	(_initialize_gdbtypes): Initialize it.

	* gnu-v3-abi.c (build_gdb_vtable_type): Do not call
	lookup_pointer_type or lookup_function_type on builtin_type_void.
	* printcmd.c (set_next_address): Likewise.
	* objc-lang.c (value_nsstring): Likewise.
	* mt-tdep.c (mt_copro_register_type): Likewise.
	* xtensa-tdep.c (xtensa_register_type): Likewise.

	* symfile.c (syms_from_objfile): Remove special handling
	of builtin_type_void and builtin_type_char.
@
text
@d114 4
a3115 8
  builtin_type->builtin_true_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "true character", (struct objfile *) NULL);
  builtin_type->builtin_true_unsigned_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "true character", (struct objfile *) NULL);
d3336 8
@


1.147
log
@gdb:
	* xml-tdesc.c (tdesc_end_union): Update.
	* stabsread.c (define_symbol): Update.
	(read_type): Update.
	(read_struct_type): Update.
	(read_enum_type): Update.
	* spu-tdep.c (spu_builtin_type_vec128): Update.
	* sh-tdep.c (sh_push_dummy_call_fpu): Update.
	(sh_push_dummy_call_nofpu): Update.
	* mdebugread.c (parse_symbol): Update.
	(parse_symbol): Update.
	(parse_symbol): Update.
	(upgrade_type): Update.
	* jv-lang.c (java_lookup_class): Update.
	* iq2000-tdep.c (iq2000_pointer_to_address): Update.
	* i386-tdep.c (i386_mmx_type): Update.
	(i386_sse_type): Update.
	* gdbtypes.h (enum type_flag_value): New enum.
	(enum type_instance_flag_value): New enum.
	(TYPE_FLAG_UNSIGNED, TYPE_FLAG_NOSIGN, TYPE_FLAG_STUB,
	TYPE_FLAG_TARGET_STUB, TYPE_FLAG_STATIC, TYPE_FLAG_PROTOTYPED,
	TYPE_FLAG_INCOMPLETE, TYPE_FLAG_VARARGS, TYPE_FLAG_VECTOR,
	TYPE_FLAG_FIXED_INSTANCE, TYPE_FLAG_STUB_SUPPORTED,
	TYPE_FLAG_NOTTEXT): Now enum constants.
	(TYPE_FLAG_CONST, TYPE_FLAG_VOLATILE, TYPE_FLAG_CODE_SPACE,
	TYPE_FLAG_DATA_SPACE, TYPE_FLAG_ADDRESS_CLASS_1,
	TYPE_FLAG_ADDRESS_CLASS_2): Remove.
	(TYPE_INSTANCE_FLAG_CONST, TYPE_INSTANCE_FLAG_VOLATILE,
	TYPE_INSTANCE_FLAG_CODE_SPACE, TYPE_INSTANCE_FLAG_DATA_SPACE,
	TYPE_INSTANCE_FLAG_ADDRESS_CLASS_1,
	TYPE_INSTANCE_FLAG_ADDRESS_CLASS_2): New constants.
	(TYPE_UNSIGNED, TYPE_NOSIGN, TYPE_STUB, TYPE_TARGET_STUB,
	TYPE_STATIC, TYPE_PROTOTYPED, TYPE_INCOMPLETE, TYPE_VARARGS,
	TYPE_VECTOR, TYPE_FIXED_INSTANCE, TYPE_STUB_SUPPORTED,
	TYPE_NOTTEXT): Update.
	(TYPE_FLAG_ADDRESS_CLASS_ALL): Remove.
	(TYPE_INSTANCE_FLAG_ADDRESS_CLASS_ALL): New define.
	(TYPE_VOLATILE, TYPE_CODE_SPACE, TYPE_DATA_SPACE,
	TYPE_ADDRESS_CLASS_1, TYPE_ADDRESS_CLASS_2,
	TYPE_ADDRESS_CLASS_ALL): Update.
	(struct main_type) <flags>: Remove.
	<flag_unsigned, flag_nosign, flag_stub, flag_target_stub,
	flag_static, flag_prototyped, flag_incomplete, flag_varargs,
	flag_vector, flag_stub_supported, flag_nottext,
	flag_fixed_instance>: New fields.
	<nfields, vptr_fieldno>: Move earlier.
	(TYPE_FLAGS): Remove.
	* gdbtypes.c (make_pointer_type): Update.
	(address_space_name_to_int): Update.
	(address_space_int_to_name): Update.
	(make_type_with_address_space): Update.
	(make_cv_type): Update.
	(create_range_type): Update.
	(get_discrete_bounds): Update.
	(create_set_type): Update.
	(make_vector_type): Update.
	(smash_to_method_type): Update.
	(check_typedef): Update.
	(check_stub_method): Update.
	(init_type): Individually assign flag fields.
	(recursive_dump_type): Don't print entire TYPE_FLAGS field.  Do
	print TYPE_FIXED_INSTANCE, TYPE_STUB_SUPPORTED, and TYPE_NOTTEXT.
	(copy_type_recursive): Copy the entire main type.  Don't use
	TYPE_FLAGS.
	* features/rs6000/powerpc-altivec64l.c
	(initialize_tdesc_powerpc_altivec64l): Update.
	* features/rs6000/powerpc-altivec64.c
	(initialize_tdesc_powerpc_altivec64): Update.
	* features/rs6000/powerpc-altivec32l.c
	(initialize_tdesc_powerpc_altivec32l): Update.
	* features/rs6000/powerpc-altivec32.c
	(initialize_tdesc_powerpc_altivec32): Update.
	* features/rs6000/powerpc-7400.c (initialize_tdesc_powerpc_7400):
	Update.
	* features/arm-with-iwmmxt.c (initialize_tdesc_arm_with_iwmmxt):
	Update.
	* dwarf2read.c (read_structure_type): Update.
	(read_enumeration_type): Likewise.
	(process_enumeration_scope): Likewise.
	(read_tag_pointer_type): Likewise.
	(read_subroutine_type): Likewise.
	(read_subroutine_type): Likewise.
	(read_base_type): Likewise.
	* coffread.c (coff_read_enum_type): Update.
	* ada-valprint.c (adjust_type_signedness): Update.
	* ada-typeprint.c (print_record_field_types): Update.
	* ada-lang.c (packed_array_type): Update.
	(empty_record): Don't reset TYPE_FLAGS.
	(ada_template_to_fixed_record_type_1): Update.
	(ada_template_to_fixed_record_type_1): Likewise.
	(template_to_static_fixed_type): Likewise.
	(to_record_with_fixed_variant_part): Likewise.
	(to_fixed_record_type): Likewise.
	(to_fixed_array_type): Likewise.
	(to_static_fixed_type): Likewise.
gdb/testsuite:
	* gdb.base/maint.exp: Update "maint print type".
@
text
@d111 3
d3336 5
@


1.146
log
@	* gdbtypes.c (copy_type_recursive): Allocate 'stored' on objfile's
	obstack.
@
text
@d280 1
a280 1
  TYPE_FLAGS (ntype) |= TYPE_FLAG_UNSIGNED;
d432 1
a432 1
    return TYPE_FLAG_CODE_SPACE;
d434 1
a434 1
    return TYPE_FLAG_DATA_SPACE;
d451 1
a451 1
  if (space_flag & TYPE_FLAG_CODE_SPACE)
d453 1
a453 1
  else if (space_flag & TYPE_FLAG_DATA_SPACE)
d455 1
a455 1
  else if ((space_flag & TYPE_FLAG_ADDRESS_CLASS_ALL)
d528 3
a530 2
		    & ~(TYPE_FLAG_CODE_SPACE | TYPE_FLAG_DATA_SPACE
		        | TYPE_FLAG_ADDRESS_CLASS_ALL))
d557 1
a557 1
		   & ~(TYPE_FLAG_CONST | TYPE_FLAG_VOLATILE));
d560 1
a560 1
    new_flags |= TYPE_FLAG_CONST;
d563 1
a563 1
    new_flags |= TYPE_FLAG_VOLATILE;
d703 1
a703 1
    TYPE_FLAGS (result_type) |= TYPE_FLAG_TARGET_STUB;
d714 1
a714 1
    TYPE_FLAGS (result_type) |= TYPE_FLAG_UNSIGNED;
d752 1
a752 1
	      TYPE_FLAGS (type) |= TYPE_FLAG_UNSIGNED;
d832 1
a832 1
    TYPE_FLAGS (result_type) |= TYPE_FLAG_TARGET_STUB;
d886 1
a886 1
	TYPE_FLAGS (result_type) |= TYPE_FLAG_UNSIGNED;
d951 1
a951 1
  TYPE_FLAGS (array_type) |= TYPE_FLAG_VECTOR;
d1019 1
a1019 1
    TYPE_FLAGS (type) |= TYPE_FLAG_VARARGS;
d1530 1
a1530 1
	  TYPE_FLAGS (type) &= ~TYPE_FLAG_TARGET_STUB;
d1535 1
a1535 1
	  TYPE_FLAGS (type) &= ~TYPE_FLAG_TARGET_STUB;
d1679 1
a1679 1
  TYPE_FLAGS (mtype) &= ~TYPE_FLAG_STUB;
d1682 1
a1682 1
    TYPE_FLAGS (mtype) |= TYPE_FLAG_VARARGS;
d1764 27
a1790 1
  TYPE_FLAGS (type) |= flags;
d1804 1
a1804 1
    TYPE_FLAGS (type) |= TYPE_FLAG_NOSIGN;
d2769 2
a2770 1
  printfi_filtered (spaces, "flags 0x%x", TYPE_FLAGS (type));
d2810 12
d2976 5
a2980 6
  /* Copy the common fields of types.  */
  TYPE_CODE (new_type) = TYPE_CODE (type);
  TYPE_ARRAY_UPPER_BOUND_TYPE (new_type) = 
    TYPE_ARRAY_UPPER_BOUND_TYPE (type);
  TYPE_ARRAY_LOWER_BOUND_TYPE (new_type) = 
    TYPE_ARRAY_LOWER_BOUND_TYPE (type);
a2984 2
  TYPE_FLAGS (new_type) = TYPE_FLAGS (type);
  TYPE_VPTR_FIELDNO (new_type) = TYPE_VPTR_FIELDNO (type);
a2989 1
  TYPE_NFIELDS (new_type) = TYPE_NFIELDS (type);
@


1.145
log
@	* symtab.h (lookup_symbol_in_language): Remove SYMTAB parameter.
	(lookup_symbol): Likewise.
	* symtab.c (lookup_symbol_in_language): Remove SYMTAB parameter.
	(lookup_symbol): Likewise.
	(search_symbols): Update.

	* linespec.c (find_methods, collect_methods): Update.
	(add_matching_methods, add_constructors): Update.
	(decode_compound, decode_dollar, decode_variable): Update.
	(lookup_prefix_sym): Update.

	(symbol_found): Remove SYM_SYMTAB parameter.
	Use SYMBOL_SYMTAB (sym) instead.

	* gdbtypes.c (lookup_typename): Update.
	(lookup_struct, lookup_union, lookup_enum): Update.
	(lookup_template_type): Update.
	(check_typedef): Update.
	* language.c (lang_bool_type): Update.
	* mdebugread.c (parse_procedure): Update.
	* mi/mi-cmd-stack.c (list_args_or_locals): Update.
	* parse.c (write_dollar_variable): Update.
	* printcmd.c (address_info): Update.
	* source.c (select_source_symtab): Update.
	* stack.c (print_frame_args, print_frame_arg_vars): Update.
	* valops.c (find_function_in_inferior): Update.
	(value_struct_elt_for_reference): Update.
	* value.c (value_static_field, value_fn_field): Update.

	* alpha-mdebug-tdep.c (find_proc_desc): Update.
	* arm-tdep.c (arm_skip_prologue): Update.
	* mt-tdep.c (mt_skip_prologue): Update.
	* xstormy16-tdep.c (xstormy16_skip_prologue): Update.

	* ada-lang.h (struct ada_symbol_info): Remove SYMTAB member.
	* ada-lang.c (ada_add_block_symbols): Remove SYMTAB parameter.
	(add_defn_to_vec): Likewise.
	(ada_add_block_symbols): Likewise.
	(lookup_cached_symbol, cache_symbol): Likewise.
	(standard_lookup): Update.
	(ada_lookup_symbol_list): Update.

	* c-valprint.c (c_val_print): Update.
	* cp-support.c (cp_lookup_rtti_type): Update.
	* jv-lang.c (java_lookup_class, get_java_object_type): Update.
	* objc-lang.c (lookup_struct_typedef, find_imps): Update.
	* p-valprint.c (pascal_val_print): Update.
	* scm-lang.c (scm_lookup_name): Update.

	* c-exp.y: Update.
	* f-exp.y: Update.
	* jv-exp.y: Update.
	* m2-exp.y: Update.
	* objc-exp.y: Update.
	* p-exp.y: Update.
@
text
@d2931 1
a2931 1
  stored = xmalloc (sizeof (struct type_pair));
@


1.144
log
@	PR 2384
	* gdbtypes.c (get_vptr_fieldno): Renamed from fill_in_vptr_fieldno.
	Return basetype, fieldno if found.  All callers updated.
	Don't cache TYPE_VPTR_FIELDNO, TYPE_VPTR_BASETYPE if from different
	objfile.
	* gdbtypes.h (get_vptr_fieldno): Renamed from fill_in_vptr_fieldno.
	* symfile.h (fill_in_vptr_fieldno): Delete.

	* gdb.cp/gdb2384.exp: New file.
	* gdb.cp/gdb2384.cc: New file.
	* gdb.cp/gdb2384-base.h: New file.
	* gdb.cp/gdb2384-base.cc: New file.
@
text
@d1048 1
a1048 2
  sym = lookup_symbol (name, block, VAR_DOMAIN, 0, 
		       (struct symtab **) NULL);
d1103 1
a1103 2
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
		       (struct symtab **) NULL);
d1126 1
a1126 2
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
		       (struct symtab **) NULL);
d1157 1
a1157 2
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
		       (struct symtab **) NULL);
d1185 1
a1185 2
  sym = lookup_symbol (nam, block, VAR_DOMAIN, 0, 
		       (struct symtab **) NULL);
d1423 1
a1423 2
	  sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0,
			       (struct symtab **) NULL);
d1487 1
a1487 2
      sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 
			   0, (struct symtab **) NULL);
@


1.143
log
@        * gdbtypes.c (create_array_type): Add handling of null Ada arrays.
        (check_typedef): Likewise.
@
text
@d1291 6
a1296 2
/* If possible, make the vptr_fieldno and vptr_basetype fields of TYPE
   valid.  Callers should be aware that in some cases (for example,
d1300 1
a1300 1
   vptr_basetype will remain NULL.  */
d1302 2
a1303 2
void
fill_in_vptr_fieldno (struct type *type)
d1315 6
a1320 4
	  struct type *baseclass = check_typedef (TYPE_BASECLASS (type,
								  i));
	  fill_in_vptr_fieldno (baseclass);
	  if (TYPE_VPTR_FIELDNO (baseclass) >= 0)
d1322 10
a1331 3
	      TYPE_VPTR_FIELDNO (type) = TYPE_VPTR_FIELDNO (baseclass);
	      TYPE_VPTR_BASETYPE (type) = TYPE_VPTR_BASETYPE (baseclass);
	      break;
d1334 9
@


1.142
log
@	Updated copyright notices for most files.
@
text
@d814 8
a821 2
  TYPE_LENGTH (result_type) =
    TYPE_LENGTH (element_type) * (high_bound - low_bound + 1);
d1501 13
a1513 5
	     number of elements and the target type's length.  */
	  TYPE_LENGTH (type) =
	    ((TYPE_FIELD_BITPOS (range_type, 1)
	      - TYPE_FIELD_BITPOS (range_type, 0) + 1)
	     * TYPE_LENGTH (target_type));
@


1.141
log
@	* gdbtypes.c (gdbtypes_post_init): Change names of decimal float types
	to conform to C extension for decimal float.
	* c-lang.c (enum c_primitive_types): Add entries for Decimal Floating
	Point types.
	(enum cplus_primitive_types): Likewise.
	(c_language_arch_info): Add Decimal Floating Point builtin types to
	the primitive_type_vector.
	(cplus_language_arch_info): Likewise.
@
text
@d3 2
a4 2
   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
   2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
@


1.140
log
@	* coffread.c (decode_type): Use builtin_type_int32 instead
	of FT_INTEGER fundamental type for array range index type.
	(decode_base_type): Use builtin types of current_gdbarch
	instead of fundamental types.

	* dwarf2read.c (struct dwarf2_cu): Remove ftypes member.
	(read_file_scope): Do not initialize ftypes member.
	(dwarf_base_type, dwarf2_fundamental_types): Remove functions.
	(read_array_type): Use builtin_type_int32 instead of FT_INTEGER
	fundamental type for array range index type.
	(read_tag_string_type): Likewise for string range index type.
	Also, do not overwrite FT_CHAR type with new string type.
	(read_base_type): If DW_AT_name is missing, create unnamed type
	with given properties instead of looking for a fundamental type.
	Create new types as TYPE_TARGET_TYPE for DW_ATE_address and
	DW_ATE_complex_float types.
	(read_subrange_type): Create new type to represent missing
	DW_AT_type instead of looking for a fundamental type.
	(die_type): Use builtin type to represent "void" instead of
	looking for a fundamental type.

	* stabsread.c (define_symbol): Use builtin types to represent
	'r' and 'i' floating-point and integer constants.

	* gdbtypes.c (lookup_fundamental_type): Remove.
	* gdbtypes.h (lookup_fundamental_type): Remove prototype.
	(FT_VOID, FT_BOOLEAN, FT_CHAR, FT_SIGNED_CHAR, FT_UNSIGNED_CHAR,
	FT_SHORT, FT_SIGNED_SHORT, FT_UNSIGNED_SHORT, FT_INTEGER,
	FT_SIGNED_INTEGER, FT_UNSIGNED_INTEGER, FT_LONG, FT_SIGNED_LONG,
	FT_UNSIGNED_LONG, FT_LONG_LONG, FT_SIGNED_LONG_LONG,
	FT_UNSIGNED_LONG_LONG, FT_FLOAT, FT_DBL_PREC_FLOAT, FT_EXT_PREC_FLOAT,
	FT_COMPLEX, FT_DBL_PREC_COMPLEX, FT_EXT_PREC_COMPLEX, FT_STRING,
	FT_FIXED_DECIMAL, FT_FLOAT_DECIMAL, FT_BYTE, FT_UNSIGNED_BYTE,
	FT_TEMPLATE_ARG, FT_DECFLOAT, FT_DBL_PREC_DECFLOAT,
	FT_EXT_PREC_DECFLOAT, FT_NUM_MEMBERS): Remove macros.
	* objfiles.c (struct objfile): Remove fundamental_types member.
	* symfile.c (reread_symbols): Do not clear fundamental_types.

	* language.h (struct language_defn): Remove la_fund_type member.
	(create_fundamental_type): Remove.
	* language.c (unk_lang_create_fundamental_type): Remove.
	(unknown_language_defn, auto_language_defn,
	local_language_defn): Adapt initializer.
	* ada-lang.c (ada_create_fundamental_type): Remove.
	(ada_language_defn): Adapt initializer.
	* c-lang.h (c_create_fundamental_type): Remove prototype.
	* c-lang.c (c_create_fundamental_type): Remove.
	(c_language_defn, cplus_language_defn, asm_language_defn,
	minimal_language_defn): Adapt initializer.
	* f-lang.c (f_create_fundamental_type): Remove.
	(f_language_defn): Adapt initializer.
	* jv-lang.c (java_create_fundamental_type): Remove.
	(java_language_defn): Adapt initializer.
	* m2-lang.c (m2_create_fundamental_type): Remove.
	(m2_language_defn): Adapt initializer.
	* objc-lang.c (objc_create_fundamental_type): Remove.
	(objc_language_defn): Adapt initializer.
	* p-lang.h (pascal_create_fundamental_type): Remove prototype.
	* p-lang.c (pascal_create_fundamental_type): Remove.
	(pascal_language_defn): Adapt initializer.
	* scm-lang.c (scm_language_defn): Adapt initializer.
@
text
@d3125 1
a3125 1
	       "decimal float", (struct objfile *) NULL);
d3129 1
a3129 1
	       "decimal double", (struct objfile *) NULL);
d3133 1
a3133 1
	       "decimal long double", (struct objfile *) NULL);
@


1.139
log
@include:
2007-11-07  Joseph Myers  <joseph@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* floatformat.h (struct floatformat): Add split_half field.
	(floatformat_ibm_long_double): New.

libiberty:
2007-11-07  Joseph Myers  <joseph@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* floatformat.c (mant_bits_set): New.
	(floatformat_to_double): Use it.  Note no special handling of
	split formats.
	(floatformat_from_double): Note no special handing of split
	formats.
	(floatformat_ibm_long_double_is_valid,
	floatformat_ibm_long_double): New.
	(floatformat_ieee_single_big, floatformat_ieee_single_little,
	floatformat_ieee_double_big, floatformat_ieee_double_little,
	floatformat_ieee_double_littlebyte_bigword, floatformat_vax_f,
	floatformat_vax_d, floatformat_vax_g, floatformat_i387_ext,
	floatformat_m68881_ext, floatformat_i960_ext,
	floatformat_m88110_ext, floatformat_m88110_harris_ext,
	floatformat_arm_ext_big, floatformat_arm_ext_littlebyte_bigword,
	floatformat_ia64_spill_big, floatformat_ia64_spill_little,
	floatformat_ia64_quad_big, floatformat_ia64_quad_little): Update
	for addition of split_half field.

gdb:
2007-11-07  Joseph Myers  <joseph@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdbtypes.c (floatformats_ibm_long_double): New.
	* gdbtypes.h (floatformats_ibm_long_double): Declare.
	* ia64-tdep.c (floatformat_ia64_ext): Update for addition of
	split_half field.
	* mips-tdep.c (n32n64_floatformat_always_valid,
	floatformat_n32n64_long_double_big, floatformats_n32n64_long):
	Remove.
	(mips_gdbarch_init): Use floatformats_ibm_long_double instead of
	floatformats_n32n64_long.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Use 128-bit IBM long
	double.
	* doublest.c (convert_floatformat_to_doublest,
	convert_doublest_to_floatformat): Handle split floating-point
	formats.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call): Handle IBM long
	double arguments.
	(ppc64_sysv_abi_push_dummy_call): Likewise.
	(do_ppc_sysv_return_value): Handle IBM long double return.
@
text
@a1800 59
/* Look up a fundamental type for the specified objfile.
   May need to construct such a type if this is the first use.

   Some object file formats (ELF, COFF, etc) do not define fundamental
   types such as "int" or "double".  Others (stabs for example), do
   define fundamental types.

   For the formats which don't provide fundamental types, gdb can
   create such types, using defaults reasonable for the current
   language and the current target machine.

   NOTE: This routine is obsolescent.  Each debugging format reader
   should manage it's own fundamental types, either creating them from
   suitable defaults or reading them from the debugging information,
   whichever is appropriate.  The DWARF reader has already been fixed
   to do this.  Once the other readers are fixed, this routine will go
   away.  Also note that fundamental types should be managed on a
   compilation unit basis in a multi-language environment, not on a
   linkage unit basis as is done here.  */


struct type *
lookup_fundamental_type (struct objfile *objfile, int typeid)
{
  struct type **typep;
  int nbytes;

  if (typeid < 0 || typeid >= FT_NUM_MEMBERS)
    {
      error (_("internal error - invalid fundamental type id %d"), 
	     typeid);
    }

  /* If this is the first time we need a fundamental type for this
     objfile then we need to initialize the vector of type
     pointers.  */

  if (objfile->fundamental_types == NULL)
    {
      nbytes = FT_NUM_MEMBERS * sizeof (struct type *);
      objfile->fundamental_types = (struct type **)
	obstack_alloc (&objfile->objfile_obstack, nbytes);
      memset ((char *) objfile->fundamental_types, 0, nbytes);
      OBJSTAT (objfile, n_types += FT_NUM_MEMBERS);
    }

  /* Look for this particular type in the fundamental type vector.  If
     one is not found, create and install one appropriate for the
     current language.  */

  typep = objfile->fundamental_types + typeid;
  if (*typep == NULL)
    {
      *typep = create_fundamental_type (objfile, typeid);
    }

  return (*typep);
}

@


1.138
log
@	* gdbtypes.h (struct cplus_struct_type): Remove runtime_ptr member.
	(TYPE_RUNTIME_PTR, TYPE_VTABLE, TYPE_HAS_VTABLE,
	TYPE_PRIMARY_BASE, TYPE_VIRTUAL_BASE_LIST): Remove macros.
	(HP_ACC_VFUNC_START, HP_ACC_VBASE_START, HP_ACC_TYPEINFO_OFFSET,
	HP_ACC_TOP_OFFSET_OFFSET): Likewise.
	(has_vtable, primary_base_class, virtual_base_list_length,
	virtual_base_list_length_skip_primaries, virtual_base_index,
	virtual_base_index_skip_primaries, class_index_in_primary_list,
	count_virtual_fns): Remove prototypes.
	* gdbtypes.c (has_vtable, primary_base_class, current_vbase_list,
	virtual_base_list_aux, virtual_base_list, virtual_base_list_length,
	virtual_base_list_length_skip_primaries, virtual_base_index,
	virtual_base_index_skip_primaries, class_index_in_primary_list,
	count_virtual_fns): Remove.

	* cp-valprint.c (cp_print_hpacc_virtual_table_entries): Remove.
	(hpacc_vtbl_ptr_name, hpacc_vtbl_ptr_type_name): Remove.
	(cp_print_value_fields): Remove support for HP aCC vtables.
	(cp_print_value): Likewise.
	* c-typeprint.c (c_type_print_base): Likewise.

	* value.h (find_rt_vbase_offset): Remove prototype.
	* valops.c (find_rt_vbase_offset): Remove.
	(search_struct_method): Remove support for HP aCC vtables.
	(find_method_list): Likewise.
@
text
@d98 4
@


1.137
log
@2007-10-30  Markus Deuling  <deuling@@de.ibm.com>

	* gdbtypes.c (gdbtypes_post_init): Replace current_gdbarch by gdbarch.
@
text
@a137 1
static void virtual_base_list_aux (struct type *dclass);
a1907 332



/* See whether DCLASS has a virtual table.  This routine is aimed at
   the HP/Taligent ANSI C++ runtime model, and may not work with other
   runtime models.  Return 1 => Yes, 0 => No.  */

int
has_vtable (struct type *dclass)
{
  /* In the HP ANSI C++ runtime model, a class has a vtable only if it
     has virtual functions or virtual bases.  */

  int i;

  if (TYPE_CODE (dclass) != TYPE_CODE_CLASS)
    return 0;

  /* First check for the presence of virtual bases.  */
  if (TYPE_FIELD_VIRTUAL_BITS (dclass))
    for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
      if (B_TST (TYPE_FIELD_VIRTUAL_BITS (dclass), i))
	return 1;

  /* Next check for virtual functions.  */
  if (TYPE_FN_FIELDLISTS (dclass))
    for (i = 0; i < TYPE_NFN_FIELDS (dclass); i++)
      if (TYPE_FN_FIELD_VIRTUAL_P (TYPE_FN_FIELDLIST1 (dclass, i), 0))
	return 1;

  /* Recurse on non-virtual bases to see if any of them needs a
     vtable.  */
  if (TYPE_FIELD_VIRTUAL_BITS (dclass))
    for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
      if ((!B_TST (TYPE_FIELD_VIRTUAL_BITS (dclass), i)) 
	  && (has_vtable (TYPE_FIELD_TYPE (dclass, i))))
	return 1;

  /* Well, maybe we don't need a virtual table.  */
  return 0;
}

/* Return a pointer to the "primary base class" of DCLASS.

   A NULL return indicates that DCLASS has no primary base, or that it
   couldn't be found (insufficient information).

   This routine is aimed at the HP/Taligent ANSI C++ runtime model,
   and may not work with other runtime models.  */

struct type *
primary_base_class (struct type *dclass)
{
  /* In HP ANSI C++'s runtime model, a "primary base class" of a class
     is the first directly inherited, non-virtual base class that
     requires a virtual table.  */

  int i;

  if (TYPE_CODE (dclass) != TYPE_CODE_CLASS)
    return NULL;

  for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
    if (!TYPE_FIELD_VIRTUAL (dclass, i) 
	&& has_vtable (TYPE_FIELD_TYPE (dclass, i)))
      return TYPE_FIELD_TYPE (dclass, i);

  return NULL;
}

/* Global manipulated by virtual_base_list[_aux]().  */

static struct vbase *current_vbase_list = NULL;

/* Return a pointer to a null-terminated list of struct vbase items.
   The vbasetype pointer of each item in the list points to the type
   information for a virtual base of the argument DCLASS.

   Helper function for virtual_base_list(). 
   Note: the list goes backward, right-to-left.  
   virtual_base_list() copies the items out in reverse order.  */

static void
virtual_base_list_aux (struct type *dclass)
{
  struct vbase *tmp_vbase;
  int i;

  if (TYPE_CODE (dclass) != TYPE_CODE_CLASS)
    return;

  for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
    {
      /* Recurse on this ancestor, first */
      virtual_base_list_aux (TYPE_FIELD_TYPE (dclass, i));

      /* If this current base is itself virtual, add it to the list */
      if (BASETYPE_VIA_VIRTUAL (dclass, i))
	{
	  struct type *basetype = TYPE_FIELD_TYPE (dclass, i);

	  /* Check if base already recorded */
	  tmp_vbase = current_vbase_list;
	  while (tmp_vbase)
	    {
	      if (tmp_vbase->vbasetype == basetype)
		break;		/* found it */
	      tmp_vbase = tmp_vbase->next;
	    }

	  if (!tmp_vbase)	/* normal exit from loop */
	    {
	      /* Allocate new item for this virtual base */
	      tmp_vbase = (struct vbase *) xmalloc (sizeof (struct vbase));

	      /* Stick it on at the end of the list */
	      tmp_vbase->vbasetype = basetype;
	      tmp_vbase->next = current_vbase_list;
	      current_vbase_list = tmp_vbase;
	    }
	}			/* if virtual */
    }				/* for loop over bases */
}


/* Compute the list of virtual bases in the right order.  Virtual
   bases are laid out in the object's memory area in order of their
   occurrence in a depth-first, left-to-right search through the
   ancestors.

   Argument DCLASS is the type whose virtual bases are required.
   Return value is the address of a null-terminated array of pointers
   to struct type items.

   This routine is aimed at the HP/Taligent ANSI C++ runtime model,
   and may not work with other runtime models.

   This routine merely hands off the argument to virtual_base_list_aux()
   and then copies the result into an array to save space.  */

static struct type **
virtual_base_list (struct type *dclass)
{
  struct vbase *tmp_vbase;
  struct vbase *tmp_vbase_2;
  int i;
  int count;
  struct type **vbase_array;

  current_vbase_list = NULL;
  virtual_base_list_aux (dclass);

  for (i = 0, tmp_vbase = current_vbase_list; 
       tmp_vbase != NULL; 
       i++, tmp_vbase = tmp_vbase->next)
    /* no body */ ;

  count = i;

  vbase_array = (struct type **) 
    xmalloc ((count + 1) * sizeof (struct type *));

  for (i = count - 1, tmp_vbase = current_vbase_list; 
       i >= 0; i--, 
	 tmp_vbase = tmp_vbase->next)
    vbase_array[i] = tmp_vbase->vbasetype;

  /* Get rid of constructed chain.  */
  tmp_vbase_2 = tmp_vbase = current_vbase_list;
  while (tmp_vbase)
    {
      tmp_vbase = tmp_vbase->next;
      xfree (tmp_vbase_2);
      tmp_vbase_2 = tmp_vbase;
    }

  vbase_array[count] = NULL;
  return vbase_array;
}

/* Return the length of the virtual base list of the type DCLASS.  */

int
virtual_base_list_length (struct type *dclass)
{
  int i;
  struct vbase *tmp_vbase;

  current_vbase_list = NULL;
  virtual_base_list_aux (dclass);

  for (i = 0, tmp_vbase = current_vbase_list; 
       tmp_vbase != NULL; 
       i++, tmp_vbase = tmp_vbase->next)
    /* no body */ ;
  return i;
}

/* Return the number of elements of the virtual base list of the type
   DCLASS, ignoring those appearing in the primary base (and its
   primary base, recursively).  */

int
virtual_base_list_length_skip_primaries (struct type *dclass)
{
  int i;
  struct vbase *tmp_vbase;
  struct type *primary;

  primary = TYPE_RUNTIME_PTR (dclass) ? TYPE_PRIMARY_BASE (dclass) : NULL;

  if (!primary)
    return virtual_base_list_length (dclass);

  current_vbase_list = NULL;
  virtual_base_list_aux (dclass);

  for (i = 0, tmp_vbase = current_vbase_list; 
       tmp_vbase != NULL; 
       tmp_vbase = tmp_vbase->next)
    {
      if (virtual_base_index (tmp_vbase->vbasetype, primary) >= 0)
	continue;
      i++;
    }
  return i;
}

/* Return the index (position) of type BASE, which is a virtual base
   class of DCLASS, in the latter's virtual base list.  A return of -1
   indicates "not found" or a problem.  */

int
virtual_base_index (struct type *base, struct type *dclass)
{
  struct type *vbase, **vbase_list;
  int i;

  if ((TYPE_CODE (dclass) != TYPE_CODE_CLASS) 
      || (TYPE_CODE (base) != TYPE_CODE_CLASS))
    return -1;

  vbase_list = virtual_base_list (dclass);
  for (i = 0, vbase = vbase_list[0];
       vbase != NULL;
       vbase = vbase_list[++i])
    if (vbase == base)
      break;

  xfree (vbase_list);
  return vbase ? i : -1;
}

/* Return the index (position) of type BASE, which is a virtual base
   class of DCLASS, in the latter's virtual base list.  Skip over all
   bases that may appear in the virtual base list of the primary base
   class of DCLASS (recursively).  A return of -1 indicates "not
   found" or a problem.  */

int
virtual_base_index_skip_primaries (struct type *base, 
				   struct type *dclass)
{
  struct type *vbase, **vbase_list;
  int i, j;
  struct type *primary;

  if ((TYPE_CODE (dclass) != TYPE_CODE_CLASS) 
      || (TYPE_CODE (base) != TYPE_CODE_CLASS))
    return -1;

  primary = TYPE_RUNTIME_PTR (dclass) ? TYPE_PRIMARY_BASE (dclass) : NULL;

  vbase_list = virtual_base_list (dclass);
  for (i = 0, j = -1, vbase = vbase_list[0];
       vbase != NULL;
       vbase = vbase_list[++i])
    {
      if (!primary 
	  || (virtual_base_index_skip_primaries (vbase, primary) < 0))
	j++;
      if (vbase == base)
	break;
    }
  xfree (vbase_list);
  return vbase ? j : -1;
}

/* Return position of a derived class DCLASS in the list of primary
   bases starting with the remotest ancestor.  Position returned is
   0-based.  */

int
class_index_in_primary_list (struct type *dclass)
{
  struct type *pbc;		/* primary base class */

  /* Simply recurse on primary base */
  pbc = TYPE_PRIMARY_BASE (dclass);
  if (pbc)
    return 1 + class_index_in_primary_list (pbc);
  else
    return 0;
}

/* Return a count of the number of virtual functions a type has.  This
   includes all the virtual functions it inherits from its base
   classes too.  */

/* pai: FIXME This doesn't do the right thing: count redefined virtual
   functions only once (latest redefinition).  */

int
count_virtual_fns (struct type *dclass)
{
  int fn, oi;			/* function and overloaded instance indices */
  int vfuncs;			/* count to return */

  /* recurse on bases that can share virtual table */
  struct type *pbc = primary_base_class (dclass);
  if (pbc)
    vfuncs = count_virtual_fns (pbc);
  else
    vfuncs = 0;

  for (fn = 0; fn < TYPE_NFN_FIELDS (dclass); fn++)
    for (oi = 0; oi < TYPE_FN_FIELDLIST_LENGTH (dclass, fn); oi++)
      if (TYPE_FN_FIELD_VIRTUAL_P (TYPE_FN_FIELDLIST1 (dclass, fn), oi))
	vfuncs++;

  return vfuncs;
}
@


1.136
log
@2007-10-25  Wu Zhou  <woodzltc@@cn.ibm.com>
	    Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* c-lang.c (c_create_fundamental_type): Create fundamental
	types for DFP.
	* c-typeprint.c (c_type_print_varspec_prefix): Add
	TYPE_CODE_DECFLOAT to no prefix needed case.
	(c_type_print_varspec_suffix): Add TYPE_CODE_DECFLOAT to no
	suffix needed case.
	* c-valprint.c (c_val_print): Call print_decimal_floating to
	print DFP values.
	* dwarf2read.c (read_base_type): Read DW_ATE_decimal_float
	attribute code and return TYPE_CODE_DECFLOAT.
	(dwarf_base_type): Set dwarf2_fundamental_type for DFP values.
	* gdbtypes.c (gdbtypes_post_init): Initialize builtin_decfloat,
	builtin_decdouble and builtin_declong.
	* gdbtypes.h (enum type_code): Add TYPE_CODE_DECFLOAT as a
	type code for DFP.
	(FT_DECFLOAT, FT_DBL_PREC_DECFLOAT, FT_EXT_PREC_DECFLOAT): New
	types, for decimal floating point.
	(FT_NUM_MEMBERS):  Increment, new types added.
	(struct builtin_type): Add builtin_decfloat, builtin_decdouble
	and builtin_declong.
	* valprint.c (print_decimal_floating): New function to print DFP
	values.
	* value.h (print_decimal_floating): Prototype.
@
text
@d3430 1
a3430 2
                | (gdbarch_char_signed (current_gdbarch) ? 
		   0 : TYPE_FLAG_UNSIGNED)),
d3450 1
a3450 1
	       gdbarch_short_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3454 1
a3454 1
	       gdbarch_short_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3459 1
a3459 1
	       gdbarch_int_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3463 1
a3463 1
	       gdbarch_int_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3468 1
a3468 1
	       gdbarch_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3472 1
a3472 1
	       gdbarch_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3477 1
a3477 1
	       gdbarch_long_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3481 1
a3481 1
	       gdbarch_long_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
d3558 1
a3558 1
	       gdbarch_addr_bit (current_gdbarch) / 8,
@


1.135
log
@	* gdbtypes.c (create_range_type): Do not set TYPE_FIELD_TYPE for the
	bounds.
	(init_vector_type): Use builtin_type_int32.
@
text
@d3509 15
@


1.134
log
@	* NEWS: Update description of string changes.  Mention print/s.
	* c-valprint.c (textual_element_type): New.
	(c_val_print): Use it.  Do not skip address printing for pointers
	with a string format.
	(c_value_print): Doc update.
	* dwarf2read.c (read_array_type): Use make_vector_type.
	* gdbtypes.c (make_vector_type): New.
	(init_vector_type): Use it.
	(gdbtypes_post_init): Initialize builtin_true_unsigned_char.
	(_initialize_gdbtypes): Mark int8_t and uint8_t as TYPE_FLAG_NOTTEXT.
	* gdbtypes.h (struct builtin_type): Add builtin_true_unsigned_char.
	(TYPE_FLAG_NOTTEXT, TYPE_NOTTEXT): New.
	(make_vector_type): New.
	* printcmd.c (print_formatted): Only handle 's' and 'i' for examine.
	Call the language print routine for string format.
	(print_scalar_formatted): Call val_print for string format.  Handle
	unsigned original types for char format.
	(validate_format): Do not reject string format.
	* stabsread.c (read_type): Use make_vector_type.
	* xml-tdesc.c (tdesc_start_vector): Use init_vector_type.

	* gdb.texinfo (Output Formats): Update 'c' description.  Describe 's'.
	(Examining Memory): Update mentions of the 's' format.
	(Automatic Display): Likewise.

	* gdb.arch/i386-sse.exp: Do not expect character constants.
	* gdb.base/charsign.c, gdb.base/charsign.exp: Delete.
	* gdb.base/display.exp: Allow print/s.
	* gdb.base/printcmds.exp, gdb.base/setvar.exp: Revert signed
	and unsigned char array changes.
@
text
@a707 2
  TYPE_FIELD_TYPE (result_type, 0) = builtin_type_int;	/* FIXME */
  TYPE_FIELD_TYPE (result_type, 1) = builtin_type_int;	/* FIXME */
d951 1
a951 1
						     builtin_type_int,
@


1.133
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d920 26
d955 1
a955 1
  TYPE_FLAGS (array_type) |= TYPE_FLAG_VECTOR;
d3439 4
d3590 1
a3590 1
	       0,
d3594 1
a3594 1
	       TYPE_FLAG_UNSIGNED,
@


1.132
log
@2007-08-17  Michael Snyder  <msnyder@@access-company.com>

	* gdbtypes.h (virtual_base_list): Remove export decl.
	* gdbtypes.c (virtual_base_list): Make static.  Not called outside.
	(virtual_base_index): Memory leak.
	(virtual_base_index_skip_primaries): Ditto.
@
text
@d12 1
a12 1
   the Free Software Foundation; either version 2 of the License, or
d21 1
a21 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.131
log
@2007-08-10  Michael Snyder  <msnyder@@access-company.com>

	* gdbtypes.c: Coding standard cleanup.
@
text
@d2027 1
a2027 1
struct type **
a2114 1

d2122 1
a2122 1
  struct type *vbase;
d2129 6
a2134 8
  i = 0;
  vbase = virtual_base_list (dclass)[0];
  while (vbase)
    {
      if (vbase == base)
	break;
      vbase = virtual_base_list (dclass)[++i];
    }
d2136 1
a2139 2


d2150 1
a2150 1
  struct type *vbase;
d2160 4
a2163 4
  j = -1;
  i = 0;
  vbase = virtual_base_list (dclass)[0];
  while (vbase)
a2169 1
      vbase = virtual_base_list (dclass)[++i];
d2171 1
a2171 1

@


1.130
log
@2007-08-10  Michael Snyder  <msnyder@@access-company.com>

	* gdbtypes.c: Comment/whitespace cleanup.
@
text
@d1199 2
a1200 2
  if (TYPE_CODE (type) != TYPE_CODE_STRUCT &&
      TYPE_CODE (type) != TYPE_CODE_UNION)
d1877 2
a1878 2
  if (TYPE_NAME (base) && TYPE_NAME (dclass) &&
      !strcmp (TYPE_NAME (base), TYPE_NAME (dclass)))
d1921 2
a1922 2
      if ((!B_TST (TYPE_FIELD_VIRTUAL_BITS (dclass), i)) &&
	  (has_vtable (TYPE_FIELD_TYPE (dclass, i))))
d1950 2
a1951 2
    if (!TYPE_FIELD_VIRTUAL (dclass, i) &&
	has_vtable (TYPE_FIELD_TYPE (dclass, i)))
d2126 2
a2127 2
  if ((TYPE_CODE (dclass) != TYPE_CODE_CLASS) ||
      (TYPE_CODE (base) != TYPE_CODE_CLASS))
d2158 2
a2159 2
  if ((TYPE_CODE (dclass) != TYPE_CODE_CLASS) ||
      (TYPE_CODE (base) != TYPE_CODE_CLASS))
d2382 2
a2383 2
  if (TYPE_NAME (parm) && TYPE_NAME (arg) &&
      !strcmp (TYPE_NAME (parm), TYPE_NAME (arg)))
@


1.129
log
@2007-08-02  Michael Snyder  <msnyder@@access-company.com>

	* gdbtypes.c (create_set_type): Test should only be done within
	the preceeding if block.  Otherwise, variable is uninitialized.
@
text
@d3 2
a4 2
   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002,
   2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
d113 2
a114 1
			     struct cmd_list_element *c, const char *value)
d126 2
a127 1
  fprintf_filtered (file, _("Debugging of C++ overloading is %s.\n"), value);
d134 1
a134 1
  };				/* maximum extension is 128! FIXME */
d145 2
a146 2
   in that objfile's objfile_obstack.  Otherwise allocate the new type structure
   by xmalloc () (for permanent types).  */
d153 1
a153 1
  /* Alloc the structure and start off with all fields zeroed. */
d172 1
a172 1
  /* Initialize the fields that might not be zero. */
d241 2
a242 1
	return ntype;		/* Don't care about alloc, and have new type.  */
d245 1
a245 1
	  *typeptr = ntype;	/* Tracking alloc, and we have new type.  */
d256 1
a256 2
  else
    /* We have storage, but need to reset it.  */
d269 2
a270 1
  /* FIXME!  Assume the machine has only one representation for pointers!  */
d272 2
a273 1
  TYPE_LENGTH (ntype) = gdbarch_ptr_bit (current_gdbarch) / TARGET_CHAR_BIT;
d278 1
a278 1
     gdbarch_address_to_pointer. */
d304 4
a307 4
/* Lookup a C++ `reference' to a type TYPE.  TYPEPTR, if nonzero, points
   to a pointer to memory where the reference type should be stored.
   If *TYPEPTR is zero, update it to point to the reference type we return.
   We allocate new memory if needed.  */
d321 2
a322 1
	return ntype;		/* Don't care about alloc, and have new type.  */
d325 1
a325 1
	  *typeptr = ntype;	/* Tracking alloc, and we have new type.  */
d336 1
a336 2
  else
    /* We have storage, but need to reset it.  */
d349 3
a351 2
  /* FIXME!  Assume the machine has only one representation for references,
     and that it matches the (only) representation for pointers!  */
d370 2
a371 1
/* Same as above, but caller doesn't care about memory allocation details.  */
d379 4
a382 4
/* Lookup a function type that returns type TYPE.  TYPEPTR, if nonzero, points
   to a pointer to memory where the function type should be stored.
   If *TYPEPTR is zero, update it to point to the function type we return.
   We allocate new memory if needed.  */
d396 1
a396 2
  else
    /* We have storage, but need to reset it.  */
d429 1
a429 1
  /* Check for known address space delimiters. */
d444 1
a444 1
   gdbtypes.h -- return the string version of the adress space name. */
d484 4
a487 4
      /* If STORAGE was provided, it had better be in the same objfile as
	 TYPE.  Otherwise, we can't link it into TYPE's cv chain: if one
	 objfile is freed and the other kept, we'd have dangling
	 pointers.  */
d517 4
a520 3
   The space attributes "code" and "data" are for Harvard architectures.
   The address space attributes are for architectures which have
   alternately sized pointers or pointers with alternate representations.  */
d546 3
a548 1
make_cv_type (int cnst, int voltl, struct type *type, struct type **typeptr)
d580 2
a581 1
  ntype = make_qualified_type (type, new_flags, typeptr ? *typeptr : NULL);
d611 2
a612 2
  /* The type length is not a part of the main type.  Update it for each
     type on the variant chain.  */
d662 5
a666 5
/* Allocate a stub method whose return type is TYPE.  
   This apparently happens for speed of symbol reading, since parsing
   out the arguments to the method is cpu-intensive, the way we are doing
   it.  So, we will fill in arguments later.
   This always returns a fresh type.   */
d680 3
a682 2
/* Create a range type using either a blank type supplied in RESULT_TYPE,
   or creating a new type, inheriting the objfile from INDEX_TYPE.
d684 2
a685 2
   Indices will be of type INDEX_TYPE, and will range from LOW_BOUND to
   HIGH_BOUND, inclusive.
d687 2
a688 2
   FIXME:  Maybe we should check the TYPE_CODE of RESULT_TYPE to make
   sure it is TYPE_CODE_UNDEF before we bash it into a range type? */
d719 3
a721 3
/* Set *LOWP and *HIGHP to the lower and upper bounds of discrete type TYPE.
   Return 1 if type is a range type, 0 if it is discrete (and bounds
   will fit in LONGEST), or -1 otherwise. */
d749 1
a749 1
	  /* Set unsigned indicator if warranted. */
d774 1
a774 1
      /* ... fall through for unsigned ints ... */
d779 1
a779 1
         if TYPE_LENGTH (type) == sizeof (LONGEST). */
d788 3
a790 2
/* Create an array type using either a blank type supplied in RESULT_TYPE,
   or creating a new type, inheriting the objfile from RANGE_TYPE.
d795 3
a797 2
   FIXME:  Maybe we should check the TYPE_CODE of RESULT_TYPE to make
   sure it is TYPE_CODE_UNDEF before we bash it into an array type? */
d800 2
a801 1
create_array_type (struct type *result_type, struct type *element_type,
d831 4
a834 4
/* Create a string type using either a blank type supplied in RESULT_TYPE,
   or creating a new type.  String types are similar enough to array of
   char types that we can use create_array_type to build the basic type
   and then bash it into a string type.
d839 3
a841 2
   FIXME:  Maybe we should check the TYPE_CODE of RESULT_TYPE to make
   sure it is TYPE_CODE_UNDEF before we bash it into a string type? */
d844 2
a845 1
create_string_type (struct type *result_type, struct type *range_type)
d912 2
a913 1
  type = init_type (TYPE_CODE_FLAGS, length, TYPE_FLAG_UNSIGNED, name, NULL);
d915 2
a916 1
  TYPE_FIELDS (type) = TYPE_ALLOC (type, nfields * sizeof (struct field));
d928 2
a929 1
				  create_range_type (0, builtin_type_int,
d942 2
a943 2
   When "smashing" the type, we preserve the objfile that the
   old type pointed to, since we aren't changing where the type is actually
d967 2
a968 2
   When "smashing" the type, we preserve the objfile that the
   old type pointed to, since we aren't changing where the type is actually
d1001 3
a1003 3
  /* Is there code which expects this to return the name if there is no
     tag name?  My guess is that this is mainly used for C++ in cases where
     the two will always be the same.  */
d1007 3
a1009 3
/* Lookup a typedef or primitive type named NAME,
   visible in lexical block BLOCK.
   If NOERR is nonzero, return zero if NAME is not suitably defined.  */
d1017 2
a1018 1
  sym = lookup_symbol (name, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1059 1
a1059 1
  /* If we don't find "signed FOO" just try again with plain "FOO". */
d1082 2
a1083 1
      error (_("This context has class, union or enum %s, not a struct."), name);
d1115 3
a1117 2
  /* If we get here, it's not a union */
  error (_("This context has class, struct or enum %s, not a union."), name);
d1137 2
a1138 1
      error (_("This context has class, struct or union %s, not an enum."), name);
d1147 2
a1148 1
lookup_template_type (char *name, struct type *type, struct block *block)
d1151 2
a1152 1
  char *nam = (char *) alloca (strlen (name) + strlen (TYPE_NAME (type)) + 4);
d1156 1
a1156 1
  strcat (nam, " >");		/* FIXME, extra space still introduced in gcc? */
d1158 2
a1159 1
  sym = lookup_symbol (nam, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1167 2
a1168 1
      error (_("This context has class, union or enum %s, not a struct."), name);
d1173 2
a1174 1
/* Given a type TYPE, lookup the type of the component of type named NAME.  
d1176 5
a1180 4
   TYPE can be either a struct or union, or a pointer or reference to a struct or
   union.  If it is a pointer or reference, its target type is automatically used.
   Thus '.' and '->' are interchangable, as specified for the definitions of the
   expression element types STRUCTOP_STRUCT and STRUCTOP_PTR.
d1210 4
a1213 4
  /* FIXME:  This change put in by Michael seems incorrect for the case where
     the structure tag name is the same as the member name.  I.E. when doing
     "ptype bell->bar" for "struct foo { int bar; int foo; } bell;"
     Disabled by fnf. */
d1263 3
a1265 3
   debugging a .o file), this function will not be able to find the virtual
   function table pointer, and vptr_fieldno will remain -1 and vptr_basetype
   will remain NULL.  */
d1276 2
a1277 2
      /* We must start at zero in case the first (and only) baseclass is
         virtual (and hence we cannot share the table pointer).  */
d1280 2
a1281 1
	  struct type *baseclass = check_typedef (TYPE_BASECLASS (type, i));
d1297 3
a1299 1
get_destructor_fn_field (struct type *t, int *method_indexp, int *field_indexp)
d1331 5
a1335 5
   definition, so we can use it in future.  There used to be a comment (but
   not any code) that if we don't find a full definition, we'd set a flag
   so we don't spend time in the future checking the same type.  That would
   be a mistake, though--we might load in more symbols which contain a
   full definition for the type.
d1340 4
a1343 4
/* Find the real type of TYPE.  This function returns the real type, after
   removing all layers of typedefs and completing opaque or stub types.
   Completion changes the TYPE argument, but stripping of typedefs does
   not.  */
d1361 1
a1361 1
	     reading a symtab.  Infinite recursion is one danger. */
d1366 4
a1369 4
	  /* FIXME: shouldn't we separately check the TYPE_NAME and the
	     TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
	     as appropriate?  (this code was written before TYPE_NAME and
	     TYPE_TAG_NAME were separate).  */
d1379 2
a1380 2
	  else
	    TYPE_TARGET_TYPE (type) = alloc_type (NULL);	/* TYPE_CODE_UNDEF */
d1388 9
a1396 6
  /* If this is a struct/class/union with no fields, then check whether a
     full definition exists somewhere else.  This is for systems where a
     type definition with no fields is issued for such types, instead of
     identifying them as stub types in the first place */

  if (TYPE_IS_OPAQUE (type) && opaque_type_resolution && !currently_reading_symtab)
d1409 10
a1418 10
	  /* If the resolved type and the stub are in the same objfile,
	     then replace the stub type with the real deal.  But if
	     they're in separate objfiles, leave the stub alone; we'll
	     just look up the transparent type every time we call
	     check_typedef.  We can't create pointers between types
	     allocated to different objfiles, since they may have
	     different lifetimes.  Trying to copy NEWTYPE over to TYPE's
	     objfile is pointless, too, since you'll have to move over any
	     other types NEWTYPE refers to, which could be an unbounded
	     amount of stuff.  */
d1425 2
a1426 1
  /* Otherwise, rely on the stub flag being set for opaque/stubbed types */
d1440 2
a1441 1
      sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0, (struct symtab **) NULL);
d1448 2
a1449 1
            make_cv_type (is_const, is_volatile, SYMBOL_TYPE (sym), &type);
d1462 1
d1473 1
a1473 2
	      - TYPE_FIELD_BITPOS (range_type, 0)
	      + 1)
d1483 1
a1483 1
  /* Cache TYPE_LENGTH for future use. */
d1488 2
a1489 2
/* Parse a type expression in the string [P..P+LENGTH).  If an error occurs,
   silently return builtin_type_void. */
d1497 1
a1497 1
  /* Suppress error messages. */
d1501 1
a1501 1
  /* Call parse_and_eval_type() without fear of longjmp()s. */
d1505 1
a1505 1
  /* Stop suppressing error messages. */
d1514 7
a1520 7
   He ain't kiddin'.  This demangles the name of the method into a string
   including argument types, parses out each argument type, generates
   a string casting a zero to that type, evaluates the string, and stuffs
   the resulting type into an argtype vector!!!  Then it knows the type
   of the whole function (including argument types for overloading),
   which info used to be in the stab's but was removed to hack back
   the space required for them.  */
d1541 2
a1542 1
    error (_("Internal: Cannot demangle mangled name `%s'."), mangled_name);
d1632 5
a1636 4
/* This is the external interface to check_stub_method, above.  This function
   unstubs all of the signatures for TYPE's METHOD_ID method name.  After
   calling this function TYPE_FN_FIELD_STUB will be cleared for each signature
   and TYPE_FN_FIELDLIST_NAME will be correct.
d1654 5
a1658 4
  /* GNU v3 methods with incorrect names were corrected when we read in
     type information, because it was cheaper to do it then.  The only GNU v2
     methods with incorrect method names are operators and destructors;
     destructors were also corrected when we read in type information.
d1667 2
a1668 1
      ret = cplus_demangle_opname (TYPE_FN_FIELDLIST_NAME (type, method_id),
d1671 2
a1672 1
	ret = cplus_demangle_opname (TYPE_FN_FIELDLIST_NAME (type, method_id),
d1694 5
a1698 4
   If NAME is non-NULL and OBJFILE is non-NULL, then we make a copy
   of the string pointed to by name in the objfile_obstack for that objfile,
   and initialize the type name to that copy.  There are places (mipsread.c
   in particular, where init_type is called with a NULL value for NAME). */
d1701 2
a1702 2
init_type (enum type_code code, int length, int flags, char *name,
	   struct objfile *objfile)
d1712 2
a1713 2
      TYPE_NAME (type) =
	obsavestring (name, strlen (name), &objfile->objfile_obstack);
d1749 2
a1750 1
append_composite_type_field (struct type *t, char *name, struct type *field)
d1783 3
a1785 3
   For the formats which don't provide fundamental types, gdb can create
   such types, using defaults reasonable for the current language and
   the current target machine.
d1787 1
a1787 1
   NOTE:  This routine is obsolescent.  Each debugging format reader
d1790 5
a1794 5
   whichever is appropriate.  The DWARF reader has already been
   fixed to do this.  Once the other readers are fixed, this routine
   will go away.  Also note that fundamental types should be managed
   on a compilation unit basis in a multi-language environment, not
   on a linkage unit basis as is done here. */
d1805 2
a1806 1
      error (_("internal error - invalid fundamental type id %d"), typeid);
d1809 3
a1811 2
  /* If this is the first time we need a fundamental type for this objfile
     then we need to initialize the vector of type pointers. */
d1822 3
a1824 2
  /* Look for this particular type in the fundamental type vector.  If one is
     not found, create and install one appropriate for the current language. */
d1838 2
a1839 1
  /* FIXME: Should we return true for references as well as pointers?  */
d1865 1
a1865 1
   the ancestor relationship even if they're identical */
d1905 1
a1905 1
  /* First check for the presence of virtual bases */
d1911 1
a1911 1
  /* Next check for virtual functions */
d1917 2
a1918 1
  /* Recurse on non-virtual bases to see if any of them needs a vtable */
d1925 1
a1925 1
  /* Well, maybe we don't need a virtual table */
d1942 1
a1942 1
     requires a virtual table */
d1957 1
a1957 1
/* Global manipulated by virtual_base_list[_aux]() */
d1961 3
a1963 3
/* Return a pointer to a null-terminated list of struct vbase
   items. The vbasetype pointer of each item in the list points to the
   type information for a virtual base of the argument DCLASS.
d1966 2
a1967 2
   Note: the list goes backward, right-to-left. virtual_base_list()
   copies the items out in reverse order.  */
d2039 3
a2041 1
  for (i = 0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; i++, tmp_vbase = tmp_vbase->next)
d2046 2
a2047 1
  vbase_array = (struct type **) xmalloc ((count + 1) * sizeof (struct type *));
d2049 3
a2051 1
  for (i = count - 1, tmp_vbase = current_vbase_list; i >= 0; i--, tmp_vbase = tmp_vbase->next)
d2054 1
a2054 1
  /* Get rid of constructed chain */
d2078 3
a2080 1
  for (i = 0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; i++, tmp_vbase = tmp_vbase->next)
d2104 3
a2106 1
  for (i = 0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; tmp_vbase = tmp_vbase->next)
d2145 1
a2145 1
   class of DCLASS, in the latter's virtual base list. Skip over all
d2151 2
a2152 1
virtual_base_index_skip_primaries (struct type *base, struct type *dclass)
d2169 2
a2170 1
      if (!primary || (virtual_base_index_skip_primaries (vbase, primary) < 0))
d2180 3
a2182 3
/* Return position of a derived class DCLASS in the list of
 * primary bases starting with the remotest ancestor.
 * Position returned is 0-based. */
d2197 3
a2199 4
/* Return a count of the number of virtual functions a type has.
 * This includes all the virtual functions it inherits from its
 * base classes too.
 */
d2202 1
a2202 2
 * functions only once (latest redefinition)
 */
d2230 4
a2233 4
 * 0 => A and B are identical
 * 1 => A and B are incomparable
 * 2 => A is better than B
 * 3 => A is worse than B */
d2274 4
a2277 3
/* Rank a function by comparing its parameter types (PARMS, length NPARMS),
 * to the types of an argument list (ARGS, length NARGS).
 * Return a pointer to a badness vector. This has NARGS + 1 entries. */
d2280 2
a2281 1
rank_function (struct type **parms, int nparms, struct type **args, int nargs)
d2292 1
a2292 1
   * If there is a mismatch, set it to a high value. */
d2295 2
a2296 2
   * arguments and ellipsis parameter lists, we should consider those
   * and rank the length-match more finely. */
d2320 2
a2321 1
  /* If both are shorts, return 1; if neither is a short, keep checking.  */
d2356 2
a2357 2
 * PARM is to ARG. The higher the return value, the worse the match.
 * Generally the "bad" conversions are all uniformly assigned a 100 */
d2362 1
a2362 1
  /* Identical type pointers */
d2364 2
a2365 2
   * and param. The reason is that builtin types are different from
   * the same ones constructed from the object. */
d2376 3
a2378 3
     Well, damnit, if the names are exactly the same,
     i'll say they are exactly the same. This happens when we generate
     method stubs. The types won't point to the same address, but they
d2384 1
a2384 1
      return 0;
d2386 1
a2386 1
  /* Check if identical after resolving typedefs */
d2391 1
a2391 1
     references. */
d2399 5
a2403 3
  /* Debugging only. */
    fprintf_filtered (gdb_stderr,"------ Arg is %s [%d], parm is %s [%d]\n",
        TYPE_NAME (arg), TYPE_CODE (arg), TYPE_NAME (parm), TYPE_CODE (parm));
d2416 2
a2417 1
	    return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
d2419 2
a2420 1
	  return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
d2438 2
a2439 1
	  return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
d2458 1
a2458 1
	         signed and unsigned ints */
d2462 4
a2465 4
		  if (TYPE_NOSIGN (arg))	/* plain char -> plain char */
		    return 0;
		  else
		    return INTEGER_CONVERSION_BADNESS;	/* signed/unsigned char -> plain char */
d2471 4
a2474 2
		      /* unsigned int -> unsigned int, or unsigned long -> unsigned long */
		      if (integer_types_same_name_p (TYPE_NAME (parm), TYPE_NAME (arg)))
d2476 4
a2479 2
		      else if (integer_types_same_name_p (TYPE_NAME (arg), "int")
			       && integer_types_same_name_p (TYPE_NAME (parm), "long"))
d2486 4
a2489 2
		      if (integer_types_same_name_p (TYPE_NAME (arg), "long")
			  && integer_types_same_name_p (TYPE_NAME (parm), "int"))
d2497 2
a2498 1
		  if (integer_types_same_name_p (TYPE_NAME (parm), TYPE_NAME (arg)))
d2500 4
a2503 2
		  else if (integer_types_same_name_p (TYPE_NAME (arg), "int")
			   && integer_types_same_name_p (TYPE_NAME (parm), "long"))
d2560 2
a2561 2
	  /* Deal with signed, unsigned, and plain chars for C++
	     and with int cases falling through from previous case */
d2637 1
a2637 1
	{			/* Strictly not needed for C++, but... */
d2696 2
a2697 1
	  return rank_one_type (TYPE_FIELD_TYPE (parm, 0), TYPE_FIELD_TYPE (arg, 0));
d2730 2
a2731 1
   include it since we may get into a infinitely recursive situation.  */
d2776 2
a2777 1
	  gdb_print_host_address (TYPE_FN_FIELD_TYPE (f, overload_idx), gdb_stdout);
d2784 2
a2785 1
	  gdb_print_host_address (TYPE_FN_FIELD_ARGS (f, overload_idx), gdb_stdout);
d2789 2
a2790 1
			   TYPE_NFIELDS (TYPE_FN_FIELD_TYPE (f, overload_idx)),
d2826 2
a2827 1
      gdb_print_host_address (TYPE_FIELD_VIRTUAL_BITS (type), gdb_stdout);
d2838 2
a2839 1
	  printfi_filtered (spaces, "private_field_bits (%d bits at *",
d2841 2
a2842 1
	  gdb_print_host_address (TYPE_FIELD_PRIVATE_BITS (type), gdb_stdout);
d2850 2
a2851 1
	  printfi_filtered (spaces, "protected_field_bits (%d bits at *",
d2853 2
a2854 1
	  gdb_print_host_address (TYPE_FIELD_PROTECTED_BITS (type), gdb_stdout);
d2910 1
a2910 1
      = (struct type **) obstack_base (&dont_print_type_obstack);
d2912 2
a2913 2
      int i = (struct type **) obstack_next_free (&dont_print_type_obstack)
      - first_dont_print;
d3057 2
a3058 1
  printfi_filtered (spaces, "instance_flags 0x%x", TYPE_INSTANCE_FLAGS (type));
d3153 2
a3154 1
  printfi_filtered (spaces, "vptr_fieldno %d\n", TYPE_VPTR_FIELDNO (type));
d3159 2
a3160 1
      gdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
d3191 3
a3193 3
      /* We have to pick one of the union types to be able print and test
         the value.  Pick cplus_struct_type, even though we know it isn't
         any particular one. */
d3243 4
a3246 4
/* Recursively copy (deep copy) TYPE, if it is associated with OBJFILE.
   Return a new type allocated using malloc, a saved type if we have already
   visited TYPE (using COPIED_TYPES), or TYPE if it is not associated with
   OBJFILE.  */
d3249 2
a3250 1
copy_type_recursive (struct objfile *objfile, struct type *type,
d3260 2
a3261 2
  /* This type shouldn't be pointing to any types in other objfiles; if
     it did, the type might disappear unexpectedly.  */
d3280 4
a3283 2
  TYPE_ARRAY_UPPER_BOUND_TYPE (new_type) = TYPE_ARRAY_UPPER_BOUND_TYPE (type);
  TYPE_ARRAY_LOWER_BOUND_TYPE (new_type) = TYPE_ARRAY_LOWER_BOUND_TYPE (type);
d3304 2
a3305 1
	  TYPE_FIELD_ARTIFICIAL (new_type, i) = TYPE_FIELD_ARTIFICIAL (type, i);
d3312 2
a3313 1
	    TYPE_FIELD_NAME (new_type, i) = xstrdup (TYPE_FIELD_NAME (type, i));
d3319 2
a3320 1
				xstrdup (TYPE_FIELD_STATIC_PHYSNAME (type, i)));
d3323 2
a3324 1
	      TYPE_FIELD_BITPOS (new_type, i) = TYPE_FIELD_BITPOS (type, i);
d3332 4
a3335 3
    TYPE_TARGET_TYPE (new_type) = copy_type_recursive (objfile,
						       TYPE_TARGET_TYPE (type),
						       copied_types);
d3337 4
a3340 3
    TYPE_VPTR_BASETYPE (new_type) = copy_type_recursive (objfile,
							 TYPE_VPTR_BASETYPE (type),
							 copied_types);
d3429 3
a3431 3
    init_type
	(TYPE_CODE_INT, gdbarch_short_bit (current_gdbarch) / TARGET_CHAR_BIT,
	 0, "short", (struct objfile *) NULL);
d3433 4
a3436 3
    init_type
	(TYPE_CODE_INT, gdbarch_short_bit (current_gdbarch) / TARGET_CHAR_BIT,
	 TYPE_FLAG_UNSIGNED, "unsigned short", (struct objfile *) NULL);
d3438 3
a3440 3
    init_type
	(TYPE_CODE_INT, gdbarch_int_bit (current_gdbarch) / TARGET_CHAR_BIT,
	 0, "int", (struct objfile *) NULL);
d3442 4
a3445 3
    init_type
	(TYPE_CODE_INT, gdbarch_int_bit (current_gdbarch) / TARGET_CHAR_BIT,
	 TYPE_FLAG_UNSIGNED, "unsigned int", (struct objfile *) NULL);
d3447 3
a3449 3
    init_type
	(TYPE_CODE_INT, gdbarch_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
	 0, "long", (struct objfile *) NULL);
d3451 4
a3454 3
    init_type
	(TYPE_CODE_INT, gdbarch_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
	 TYPE_FLAG_UNSIGNED, "unsigned long", (struct objfile *) NULL);
d3488 1
a3488 1
  /* Pointer/Address types. */
d3516 5
a3520 4
  builtin_type->builtin_data_ptr
    = make_pointer_type (builtin_type->builtin_void, NULL);
  builtin_type->builtin_func_ptr
    = lookup_pointer_type (lookup_function_type (builtin_type->builtin_void));
d3522 2
a3523 1
    init_type (TYPE_CODE_INT, gdbarch_addr_bit (current_gdbarch) / 8,
d3530 16
a3545 13
  builtin_type->nodebug_text_symbol
    = init_type (TYPE_CODE_FUNC, 1, 0, "<text variable, no debug info>", NULL);
  TYPE_TARGET_TYPE (builtin_type->nodebug_text_symbol)
    = builtin_type->builtin_int;
  builtin_type->nodebug_data_symbol
    = init_type (TYPE_CODE_INT, gdbarch_int_bit (gdbarch) / HOST_CHAR_BIT, 0,
		 "<data variable, no debug info>", NULL);
  builtin_type->nodebug_unknown_symbol
    = init_type (TYPE_CODE_INT, 1, 0,
		 "<variable (not text or data), no debug info>", NULL);
  builtin_type->nodebug_tls_symbol
    = init_type (TYPE_CODE_INT, gdbarch_int_bit (gdbarch) / HOST_CHAR_BIT, 0,
		 "<thread local variable, no debug info>", NULL);
d3556 4
a3559 3
  /* FIXME: The following types are architecture-neutral.  However, they
     contain pointer_type and reference_type fields potentially caching
     pointer or reference types that *are* architecture dependent.  */
d3606 14
a3619 14
  builtin_type_ieee_single
    = build_flt (-1, "builtin_type_ieee_single", floatformats_ieee_single);
  builtin_type_ieee_double
    = build_flt (-1, "builtin_type_ieee_double", floatformats_ieee_double);
  builtin_type_i387_ext
    = build_flt (-1, "builtin_type_i387_ext", floatformats_i387_ext);
  builtin_type_m68881_ext
    = build_flt (-1, "builtin_type_m68881_ext", floatformats_m68881_ext);
  builtin_type_arm_ext
    = build_flt (-1, "builtin_type_arm_ext", floatformats_arm_ext);
  builtin_type_ia64_spill
    = build_flt (-1, "builtin_type_ia64_spill", floatformats_ia64_spill);
  builtin_type_ia64_quad
    = build_flt (-1, "builtin_type_ia64_quad", floatformats_ia64_quad);
d3629 1
a3629 1
  /* Add user knob for controlling resolution of opaque types */
@


1.128
log
@2007-08-02  Michael Snyder  <msnyder@@access-company.com>

	* gdbtypes.c (check_typedef): Guard NULL.
@
text
@a845 1
  LONGEST low_bound, high_bound, bit_length;
d858 1
d864 2
a868 3
  if (low_bound >= 0)
    TYPE_FLAGS (result_type) |= TYPE_FLAG_UNSIGNED;

@


1.127
log
@	* gdbtypes.h (builtin_type_true_char, builtin_type_void,
	builtin_type_char, builtin_type_short, builtin_type_int,
	builtin_type_long, builtin_type_signed_char,
	builtin_type_unsigned_char, builtin_type_unsigned_short,
	builtin_type_unsigned_int, builtin_type_unsigned_long,
	builtin_type_float, builtin_type_double, builtin_type_long_double,
	builtin_type_complex, builtin_type_double_complex, builtin_type_string,
	builtin_type_bool, builtin_type_long_long,
	builtin_type_unsigned_long_long, builtin_type_void_data_ptr,
	builtin_type_void_func_ptr, builtin_type_CORE_ADDR): Replace global
	variable declaration with compatibility macro.
	* gdbtypes.c (builtin_type_true_char, builtin_type_void,
	builtin_type_char, builtin_type_short, builtin_type_int,
	builtin_type_long, builtin_type_signed_char,
	builtin_type_unsigned_char, builtin_type_unsigned_short,
	builtin_type_unsigned_int, builtin_type_unsigned_long,
	builtin_type_float, builtin_type_double, builtin_type_long_double,
	builtin_type_complex, builtin_type_double_complex, builtin_type_string,
	builtin_type_bool, builtin_type_long_long,
	builtin_type_unsigned_long_long, builtin_type_void_data_ptr,
	builtin_type_void_func_ptr, builtin_type_CORE_ADDR): Remove.
	(build_gdbtypes): Remove.
	(_initialize_gdbtypes): Do not call build_gdbtypes, move installing
	opaque-type-resolution command here.   Do not call
	deprecated_register_gdbarch_swap.
@
text
@d1321 2
@


1.126
log
@	* gdbtypes.h (struct builtin_type): New members nodebug_text_symbol,
	nodebug_data_symbol, nodebug_unknown_symbol, and nodebug_tls_symbol.
	* gdbtypes.c (gdbtypes_post_init): Initialize nodebug_ default types.

	* parse.c (msym_text_symbol_type, msym_data_symbol_type): Remove.
	(msym_unknown_symbol_type, msym_tls_symbol_type): Remove.
	(write_exp_msymbol): Use builtin nodebug_ types instead of them.
	(build_parse): Remove.
	(_initialize_parse): Do not call build_parse.  Do not register
	msym_ types for gdbarch-swapping.

	* dwarf2read.c (new_symbol): Use default nodebug_data_symbol type
	instead of creating private type.

	* xcoffread.c (func_symbol_type, var_symbol_type): Remove.
	(_initialize_xcoffread): Do not initialized them.
	(process_xcoff_symbol): Use builtin nodebug_ types instead of them.

	* mdebugread.c (nodebug_func_symbol_type): Remove.
	(nodebug_var_symbol_type): Remove.
	(_initialize_mdebugread): Do not initialize them.
	(parse_symbol): Use builtin nodebug_ type instead of them.
	(parse_procedure): Likewise.
@
text
@a46 19
struct type *builtin_type_void;
struct type *builtin_type_char;
struct type *builtin_type_true_char;
struct type *builtin_type_short;
struct type *builtin_type_int;
struct type *builtin_type_long;
struct type *builtin_type_long_long;
struct type *builtin_type_signed_char;
struct type *builtin_type_unsigned_char;
struct type *builtin_type_unsigned_short;
struct type *builtin_type_unsigned_int;
struct type *builtin_type_unsigned_long;
struct type *builtin_type_unsigned_long_long;
struct type *builtin_type_float;
struct type *builtin_type_double;
struct type *builtin_type_long_double;
struct type *builtin_type_complex;
struct type *builtin_type_double_complex;
struct type *builtin_type_string;
a57 1
struct type *builtin_type_bool;
a108 3
struct type *builtin_type_void_data_ptr;
struct type *builtin_type_void_func_ptr;
struct type *builtin_type_CORE_ADDR;
a3277 138
static void
build_gdbtypes (void)
{
  builtin_type_void =
    init_type (TYPE_CODE_VOID, 1,
	       0,
	       "void", (struct objfile *) NULL);
  builtin_type_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       (TYPE_FLAG_NOSIGN
                | (gdbarch_char_signed (current_gdbarch) ?
		   0 : TYPE_FLAG_UNSIGNED)),
	       "char", (struct objfile *) NULL);
  builtin_type_true_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "true character", (struct objfile *) NULL);
  builtin_type_signed_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "signed char", (struct objfile *) NULL);
  builtin_type_unsigned_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned char", (struct objfile *) NULL);
  builtin_type_short =
    init_type (TYPE_CODE_INT,
	       gdbarch_short_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       0, "short", (struct objfile *) NULL);
  builtin_type_unsigned_short =
    init_type (TYPE_CODE_INT,
	       gdbarch_short_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, "unsigned short", (struct objfile *) NULL);
  builtin_type_int =
    init_type (TYPE_CODE_INT,
	       gdbarch_int_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       0, "int", (struct objfile *) NULL);
  builtin_type_unsigned_int =
    init_type (TYPE_CODE_INT,
	       gdbarch_int_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, "unsigned int", (struct objfile *) NULL);
  builtin_type_long =
    init_type (TYPE_CODE_INT,
	       gdbarch_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       0, "long", (struct objfile *) NULL);
  builtin_type_unsigned_long =
    init_type (TYPE_CODE_INT,
	       gdbarch_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, "unsigned long", (struct objfile *) NULL);
  builtin_type_long_long =
    init_type (TYPE_CODE_INT,
	       gdbarch_long_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       0, "long long", (struct objfile *) NULL);
  builtin_type_unsigned_long_long =
    init_type (TYPE_CODE_INT,
	       gdbarch_long_long_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED, 
	       "unsigned long long", (struct objfile *) NULL);

  builtin_type_float
    = build_flt (gdbarch_float_bit (current_gdbarch), "float",
				    gdbarch_float_format (current_gdbarch));
  builtin_type_double
    = build_flt (gdbarch_double_bit (current_gdbarch), "double",
				     gdbarch_double_format (current_gdbarch));
  builtin_type_long_double
    = build_flt (gdbarch_long_double_bit (current_gdbarch), "long double",
					  gdbarch_long_double_format
					    (current_gdbarch));

  builtin_type_complex =
    init_type (TYPE_CODE_COMPLEX,
	       2 * gdbarch_float_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       0,
	       "complex", (struct objfile *) NULL);
  TYPE_TARGET_TYPE (builtin_type_complex) = builtin_type_float;
  builtin_type_double_complex =
    init_type (TYPE_CODE_COMPLEX,
	       2 * gdbarch_double_bit (current_gdbarch) / TARGET_CHAR_BIT,
	       0,
	       "double complex", (struct objfile *) NULL);
  TYPE_TARGET_TYPE (builtin_type_double_complex) = builtin_type_double;
  builtin_type_string =
    init_type (TYPE_CODE_STRING, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "string", (struct objfile *) NULL);
  builtin_type_bool =
    init_type (TYPE_CODE_BOOL, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "bool", (struct objfile *) NULL);

  /* Add user knob for controlling resolution of opaque types */
  add_setshow_boolean_cmd ("opaque-type-resolution", class_support,
			   &opaque_type_resolution, _("\
Set resolution of opaque struct/class/union types (if set before loading symbols)."), _("\
Show resolution of opaque struct/class/union types (if set before loading symbols)."), NULL,
			   NULL,
			   show_opaque_type_resolution,
			   &setlist, &showlist);
  opaque_type_resolution = 1;

  /* Pointer/Address types. */

  /* NOTE: on some targets, addresses and pointers are not necessarily
     the same --- for example, on the D10V, pointers are 16 bits long,
     but addresses are 32 bits long.  See doc/gdbint.texinfo,
     ``Pointers Are Not Always Addresses''.

     The upshot is:
     - gdb's `struct type' always describes the target's
       representation.
     - gdb's `struct value' objects should always hold values in
       target form.
     - gdb's CORE_ADDR values are addresses in the unified virtual
       address space that the assembler and linker work with.  Thus,
       since target_read_memory takes a CORE_ADDR as an argument, it
       can access any memory on the target, even if the processor has
       separate code and data address spaces.

     So, for example:
     - If v is a value holding a D10V code pointer, its contents are
       in target form: a big-endian address left-shifted two bits.
     - If p is a D10V pointer type, TYPE_LENGTH (p) == 2, just as
       sizeof (void *) == 2 on the target.

     In this context, builtin_type_CORE_ADDR is a bit odd: it's a
     target type for a value the target will never see.  It's only
     used to hold the values of (typeless) linker symbols, which are
     indeed in the unified virtual address space.  */
  builtin_type_void_data_ptr = make_pointer_type (builtin_type_void, NULL);
  builtin_type_void_func_ptr
    = lookup_pointer_type (lookup_function_type (builtin_type_void));
  builtin_type_CORE_ADDR =
    init_type (TYPE_CODE_INT, gdbarch_addr_bit (current_gdbarch) / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__CORE_ADDR", (struct objfile *) NULL);
}

d3448 5
a3452 1
  struct cmd_list_element *c;
a3453 3
  /* FIXME: Why don't the following types need to be arch-swapped?
     See the comment at the top of the calls to
     DEPRECATED_REGISTER_GDBARCH_SWAP below.  */
a3498 39
  build_gdbtypes ();

  gdbtypes_data = gdbarch_data_register_post_init (gdbtypes_post_init);

  /* FIXME - For the moment, handle types by swapping them in and out.
     Should be using the per-architecture data-pointer and a large
     struct. 

     Note that any type T that we might create a 'T *' type for must
     be arch-swapped: we cache a type's 'T *' type in the pointer_type
     field, so if we change architectures but don't swap T, then
     lookup_pointer_type will start handing out pointer types made for
     a different architecture.  */
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_void);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_char);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_short);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_int);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_long);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_long_long);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_signed_char);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_unsigned_char);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_unsigned_short);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_unsigned_int);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_unsigned_long);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_unsigned_long_long);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_float);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_double);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_long_double);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_complex);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_double_complex);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_string);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_void_data_ptr);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_void_func_ptr);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_CORE_ADDR);
  deprecated_register_gdbarch_swap (NULL, 0, build_gdbtypes);

  /* Note: These types do not need to be swapped - they are target
     neutral.  FIXME: Are you sure?  See the comment above the calls
     to DEPRECATED_REGISTER_GDBARCH_SWAP above.  */
d3521 9
@


1.125
log
@	* gdbarch.sh (bfd_vma): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.

	* gdbtypes.h (builtin_bfd_vma_type): Remove.
	* gdbtypes.h (builtin_bfd_vma_type): Remove.
	(build_gdbtypes): Do not initialize it.
	(_initialize_gdbtypes): Do not swap it.
@
text
@d3585 17
@


1.124
log
@	* gdbtypes.c (builtin_type_v2_double, builtin_type_v4_float,
	builtin_type_v2_int64, builtin_type_v4_int32, builtin_type_v8_int16,
	builtin_type_v16_int8, builtin_type_v2_float, builtin_type_v2_int32,
	builtin_type_v4_int16, builtin_type_v8_int8, builtin_type_v4sf,
	builtin_type_v4si, builtin_type_v16qi, builtin_type_v8qi,
	builtin_type_v8hi, builtin_type_v4hi, builtin_type_v2si,
	builtin_type_vec64, builtin_type_vec128): Remove.
	(init_simd_type): Remove.
	(init_vector_type): Make global.
	(build_builtin_type_vec64, build_builtin_type_vec128): Remove.
	(build_gdbtypes): Do not build vector types.
	(_initialize_gdbtypes): Do not swap vector types.
	* gdbtypes.h (builtin_type_v2_double, builtin_type_v4_float,
	builtin_type_v2_int64, builtin_type_v4_int32, builtin_type_v8_int16,
	builtin_type_v16_int8, builtin_type_v2_float, builtin_type_v2_int32,
	builtin_type_v4_int16, builtin_type_v8_int8, builtin_type_v4sf,
	builtin_type_v4si, builtin_type_v16qi, builtin_type_v8qi,
	builtin_type_v8hi, builtin_type_v4hi, builtin_type_v2si,
	builtin_type_vec64, builtin_type_vec128): Remove declarations.
	(init_vector_type): Add prototype.

	* i386-tdep.h (struct gdbarch_tdep): Add i386_mmx_type and
	i386_sse_type members.
	(i386_mmx_type, i386_sse_type): Change from variables to functions.
	* i386-tdep.c (i386_mmx_type, i386_sse_type): Remove variables.
	(i386_init_types): Do not build vector types.
	(i386_mmx_type, i386_sse_type): New functions.
	(i386_register_type): Call them instead of using global variables.
	(i386_gdbarch_init): Use XCALLOC to allocate tdep structure.
	* amd64-tdep.c (amd64_register_type): Call i386_sse_type instead
	of using global variable.

	* rs6000-tdep.h (struct gdbarch_tdep): Add ppc_builtin_type_vec64
	and ppc_builtin_type_vec128 members.
	* rs6000-tdep.c (rs6000_builtin_type_vec64): New function.
	(rs6000_builtin_type_vec128): Likewise.
	(rs6000_register_type): Call them instead of using builtin_type_vec64
	and builtin_type_vec128.
	(rs6000_gdbarch_init): Use XCALLOC to allocate tdep structure.

	* spu-tdep.c (struct gdbarch_tdep): New data type.
	(spu_builtin_type_vec128): Remove variable.
	(spu_builtin_type_vec128): New function.
	(spu_register_type): Call it instead of using global variable.
	(spu_gdbarch_init): Allocate tdep structure.
	(spu_init_vector_type): Remove function.
	(_initialize_spu_tdep): Do not call it.
@
text
@a131 1
struct type *builtin_type_bfd_vma;
a3436 4
  builtin_type_bfd_vma =
    init_type (TYPE_CODE_INT, gdbarch_addr_bit (current_gdbarch) / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__bfd_vma", (struct objfile *) NULL);
a3675 1
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_bfd_vma);
@


1.123
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_ADDR_BIT): Replace by gdbarch_addr_bit.
	* valops.c (value_cast): Likewise.
	* utils.c (strlen_paddr, paddr, paddr_nz, paddress): Likewise.
	* ui-out.c (ui_out_field_core_addr): Likewise.
	* tracepoint.c (tracepoints_info): Likewise.
	* symtab.c (print_msymbol_info): Likewise.
	* solib-irix.c (irix_current_sos)
	(irix_open_symbol_file_object): Likewise.
	* remote.c (build_remote_gdbarch_data): Likewise.
	* prologue-value.c (make_pv_area): Likewise.
	* procfs.c (info_mappings_callback): Likewise.
	* printcmd.c (print_scalar_formatted)
	(deprecated_print_address_numeric): Likewise.
	* memattr.c (mem_info_command): Likewise.
	* linux-nat.c (linux_nat_info_proc_cmd): Likewise.
	* gdbtypes.c (build_flt, gdbtypes_post_init): Likewise.
	* exec.c (print_section_info): Likewise.
	* dwarf2read.c (read_subrange_type): Likewise.
	* dwarf2loc.c (find_location_expression): Likewise.
	* dwarf2expr.c (dwarf2_read_address, unsigned_address_type)
	(signed_address_type, execute_stack_op): Likewise.
	* breakpoint.c (print_one_breakpoint, breakpoint_1): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a78 23
/* 128 bit long vector types */
struct type *builtin_type_v2_double;
struct type *builtin_type_v4_float;
struct type *builtin_type_v2_int64;
struct type *builtin_type_v4_int32;
struct type *builtin_type_v8_int16;
struct type *builtin_type_v16_int8;
/* 64 bit long vector types */
struct type *builtin_type_v2_float;
struct type *builtin_type_v2_int32;
struct type *builtin_type_v4_int16;
struct type *builtin_type_v8_int8;

struct type *builtin_type_v4sf;
struct type *builtin_type_v4si;
struct type *builtin_type_v16qi;
struct type *builtin_type_v8qi;
struct type *builtin_type_v8hi;
struct type *builtin_type_v4hi;
struct type *builtin_type_v2si;
struct type *builtin_type_vec64;
struct type *builtin_type_vec128;

d930 1
a930 27
/* Construct and return a type of the form:
	struct NAME { ELT_TYPE ELT_NAME[N]; }
   We use these types for SIMD registers.  For example, the type of
   the SSE registers on the late x86-family processors is:
	struct __builtin_v4sf { float f[4]; }
   built by the function call:
	init_simd_type ("__builtin_v4sf", builtin_type_float, "f", 4)
   The type returned is a permanent type, allocated using malloc; it
   doesn't live in any objfile's obstack.  */
static struct type *
init_simd_type (char *name,
		struct type *elt_type,
		char *elt_name,
		int n)
{
  struct type *simd_type;
  struct type *array_type;
  
  simd_type = init_composite_type (name, TYPE_CODE_STRUCT);
  array_type = create_array_type (0, elt_type,
				  create_range_type (0, builtin_type_int,
						     0, n-1));
  append_composite_type_field (simd_type, elt_name, array_type);
  return simd_type;
}

static struct type *
a941 60
static struct type *
build_builtin_type_vec64 (void)
{
  /* Construct a type for the 64 bit registers.  The type we're
     building is this: */
#if 0
  union __gdb_builtin_type_vec64
  {
    int64_t uint64;
    float v2_float[2];
    int32_t v2_int32[2];
    int16_t v4_int16[4];
    int8_t v8_int8[8];
  };
#endif

  struct type *t;

  t = init_composite_type ("__gdb_builtin_type_vec64", TYPE_CODE_UNION);
  append_composite_type_field (t, "uint64", builtin_type_int64);
  append_composite_type_field (t, "v2_float", builtin_type_v2_float);
  append_composite_type_field (t, "v2_int32", builtin_type_v2_int32);
  append_composite_type_field (t, "v4_int16", builtin_type_v4_int16);
  append_composite_type_field (t, "v8_int8", builtin_type_v8_int8);

  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec64";
  return t;
}

static struct type *
build_builtin_type_vec128 (void)
{
  /* Construct a type for the 128 bit registers.  The type we're
     building is this: */
#if 0
 union __gdb_builtin_type_vec128 
  {
    int128_t uint128;
    float v4_float[4];
    int32_t v4_int32[4];
    int16_t v8_int16[8];
    int8_t v16_int8[16];
  };
#endif

  struct type *t;

  t = init_composite_type ("__gdb_builtin_type_vec128", TYPE_CODE_UNION);
  append_composite_type_field (t, "uint128", builtin_type_int128);
  append_composite_type_field (t, "v4_float", builtin_type_v4_float);
  append_composite_type_field (t, "v4_int32", builtin_type_v4_int32);
  append_composite_type_field (t, "v8_int16", builtin_type_v8_int16);
  append_composite_type_field (t, "v16_int8", builtin_type_v16_int8);

  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec128";
  return t;
}

a3402 33
  /* Build SIMD types.  */
  builtin_type_v4sf
    = init_simd_type ("__builtin_v4sf", builtin_type_float, "f", 4);
  builtin_type_v4si
    = init_simd_type ("__builtin_v4si", builtin_type_int32, "f", 4);
  builtin_type_v16qi
    = init_simd_type ("__builtin_v16qi", builtin_type_int8, "f", 16);
  builtin_type_v8qi
    = init_simd_type ("__builtin_v8qi", builtin_type_int8, "f", 8);
  builtin_type_v8hi
    = init_simd_type ("__builtin_v8hi", builtin_type_int16, "f", 8);
  builtin_type_v4hi
    = init_simd_type ("__builtin_v4hi", builtin_type_int16, "f", 4);
  builtin_type_v2si
    = init_simd_type ("__builtin_v2si", builtin_type_int32, "f", 2);

  /* 128 bit vectors.  */
  builtin_type_v2_double = init_vector_type (builtin_type_double, 2);
  builtin_type_v4_float = init_vector_type (builtin_type_float, 4);
  builtin_type_v2_int64 = init_vector_type (builtin_type_int64, 2);
  builtin_type_v4_int32 = init_vector_type (builtin_type_int32, 4);
  builtin_type_v8_int16 = init_vector_type (builtin_type_int16, 8);
  builtin_type_v16_int8 = init_vector_type (builtin_type_int8, 16);
  /* 64 bit vectors.  */
  builtin_type_v2_float = init_vector_type (builtin_type_float, 2);
  builtin_type_v2_int32 = init_vector_type (builtin_type_int32, 2);
  builtin_type_v4_int16 = init_vector_type (builtin_type_int16, 4);
  builtin_type_v8_int8 = init_vector_type (builtin_type_int8, 8);

  /* Vector types.  */
  builtin_type_vec64 = build_builtin_type_vec64 ();
  builtin_type_vec128 = build_builtin_type_vec128 ();

a3677 18
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v4sf);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v4si);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v16qi);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v8qi);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v8hi);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v4hi);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v2si);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v2_double);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v4_float);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v2_int64);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v4_int32);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v8_int16);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v16_int8);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v2_float);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v2_int32);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v8_int8);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_v4_int16);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_vec128);
@


1.122
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_BFD_VMA_BIT): Replace by gdbarch_bfd_vma_bit.
	* gdbtypes.c (build_flt): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d3577 1
a3577 1
    init_type (TYPE_CODE_INT, TARGET_ADDR_BIT / 8,
d3728 1
a3728 1
    init_type (TYPE_CODE_INT, TARGET_ADDR_BIT / 8,
@


1.121
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_PTR_BIT): Replace with gdbarch_ptr_bit.
	* solib-svr4.c (svr4_truncate_ptr): Likewise.
	* solib-pa64.c (read_dynamic_info): Likewise.
	* solib-legacy.c (legacy_svr4_fetch_link_map_offsets): Likewise.
	* solib.c (info_sharedlibrary_command): Likewise.
	* s390-nat.c (SUBOFF): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	* procfs.c (info_proc_mappings): Likewise.
	* printcmd.c (decode_format): Likewise.
	* nto-tdep.c (nto_truncate_ptr): Likewise.
	* mips-linux-tdep.c (mips_linux_get_longjmp_target)
	(mips64_linux_get_longjmp_target): Likewise.
	* m68k-tdep.c (m68k_get_longjmp_target): Likewise.
	* jv-valprint.c (java_value_print): Likewise.
	* jv-lang.c (get_java_object_header_size): Likewise.
	* hppa-tdep.c (skip_prologue_hard_way, hppa_frame_cache): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_skip_trampoline_code)
	(hppa_hpux_unwind_adjust_stub): Likewise.
	* gnu-v3-abi.c (build_gdb_vtable_type): Likewise.
	* gdbtypes.c (make_pointer_type, make_reference_type)
	(smash_to_memberptr_type): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d3581 1
a3581 1
    init_type (TYPE_CODE_INT, TARGET_BFD_VMA_BIT / 8,
@


1.120
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_FLOAT_BIT): Replace by gdbarch_float_bit.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* mdebugread.c (_initialize_mdebugread): Likewise.
	* m2-lang.c (m2_create_fundamental_type)
	(_initialize_m2_language): Likewise.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbarch.sh (TARGET_FLOAT_FORMAT): Replace by gdbarch_float_format.
	* value.c (unpack_double): Likewise (comment).
	* gdbtypes.c (build_gdbtypes): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* gdbarch.sh (TARGET_DOUBLE_BIT): Replace by gdbarch_double_bit.
	* valarith.c (value_binop): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* mdebugread.c (_initialize_mdebugread): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* cris-tdep.c (cris_gdbarch_init): Likewise (comment).
	* c-lang.c (c_create_fundamental_type): Likewise.
	* ada-lex.l (processReal): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbarch.sh (TARGET_DOUBLE_FORMAT): Replace by gdbarch_double_format.
	* value.c (unpack_double): Likewise (comment).
	* gdbtypes.c (build_gdbtypes): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* gdbarch.sh (TARGET_LONG_DOUBLE_BIT): Replace by
	gdbarch_long_double_bit.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* ada-lex.l (processReal): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbarch.sh (TARGET_LONG_DOUBLE_FORMAT): Replace by
	gdbarch_long_double_format.
	* gdbtypes.c (build_gdbtypes): Likewise.
	* doublest.c (floatformat_from_length): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d316 1
a316 1
  TYPE_LENGTH (ntype) = TARGET_PTR_BIT / TARGET_CHAR_BIT;
d395 1
a395 1
  TYPE_LENGTH (ntype) = TARGET_PTR_BIT / TARGET_CHAR_BIT;
d1076 1
a1076 1
  TYPE_LENGTH (type) = TARGET_PTR_BIT / TARGET_CHAR_BIT;
@


1.119
log
@2007-06-12  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_SHORT_BIT): Replace by gdbarch_int_bit.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* f-lang.c (f_create_fundamental_type, build_fortran_types): Likewise.
	* gdbtypes.c (build_gdbtypes, gdbtypes_post_init): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* gdbarch.sh (TARGET_INT_BIT): Replace by gdbarch_int_bit.
	* c-exp.y (parse_number): Likewise.
	* objc-exp.y (parse_number): Likewise.
	* ada-lex.l (processInt): Likewise.
	* f-exp.y (parse_number): Likewise.
	* p-exp.y (parse_number): Likewise.
	* ada-lang.c (ada_create_fundamental_type, ada_language_arch_info)
	(gdbtypes_post_init, build_gdbtypes): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* parse.c (build_parse): Likewise.
	* xcoffread.c (_initialize_xcoffread): Likewise.
	* stabsread.c (define_symbol, read_one_struct_field, read_enum_type)
	(read_range_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* f-lang.c (build_fortran_types, f_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type, _initialize_m2_language)
	(m2_create_fundamental_type): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* coffread.c (coff_read_enum_type): Likewise.
	* mdebugread.c (parse_symbol, _initialize_mdebugread): Likewise.
	* dwarf2read.c (new_symbol): Likewise.
	* gdbarch.sh (TARGET_LONG_BIT): Replace by gdbarch_long_bit.
	* c-exp.y (parse_number): Likewise.
	* objc-exp.y (parse_number): Likewise.
	* ada-lex.l (processInt): Likewise.
	* f-exp.y (parse_number): Likewise.
	* p-exp.y (parse_number): Likewise.
	* valarith.c (value_binop): Likewise.
	* symfile.c (read_target_long_array, simple_overlay_update_1): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbtypes.c (build_gdbtypes, gdbtypes_post_init): Likewise.
	* symfile.c (TARGET_LONG_BYTES): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* f-lang.c (f_create_fundamental_type): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* coffread.c (decode_base_type): Likewise.
	* gdbarch.sh (TARGET_LONG_LONG_BIT): Replace by gdbarch_long_long_bit.
	* c-exp.y (parse_number): Likewise.
	* objc-exp.y (parse_number): Likewise.
	* p-exp.y (parse_number): Likewise.
	* ada-lang.c (ada_create_fundamental_type)
	(ada_language_arch_info): Likewise.
	* gdbtypes.c (gdbtypes_post_init, build_gdbtypes): Likewise.
	* stabsread.c (read_range_type): Likewise.
	* p-lang.c (pascal_create_fundamental_type): Likewise.
	* objc-lang.c (objc_create_fundamental_type): Likewise.
	* m2-lang.c (m2_create_fundamental_type): Likewise.
	* f-lang.c (f_create_fundamental_type): Likewise.
	* c-lang.c (c_create_fundamental_type): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d3469 11
a3479 6
  builtin_type_float = build_flt (TARGET_FLOAT_BIT, "float",
				  TARGET_FLOAT_FORMAT);
  builtin_type_double = build_flt (TARGET_DOUBLE_BIT, "double",
				   TARGET_DOUBLE_FORMAT);
  builtin_type_long_double = build_flt (TARGET_LONG_DOUBLE_BIT, "long double",
					TARGET_LONG_DOUBLE_FORMAT);
d3482 2
a3483 1
    init_type (TYPE_CODE_COMPLEX, 2 * TARGET_FLOAT_BIT / TARGET_CHAR_BIT,
d3488 2
a3489 1
    init_type (TYPE_CODE_COMPLEX, 2 * TARGET_DOUBLE_BIT / TARGET_CHAR_BIT,
@


1.118
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (ADDRESS_TO_POINTER): Replace by
	gdbarch_address_to_pointer.
	* findvar.c (store_typed_address): Likewise.
	* gdbtypes.c (make_pointer_type): Likewise (comment).
	* procfs.c (procfs_address_to_host_pointer): Likewise.
	* std-regs.c (value_of_builtin_frame_reg): Likewise.
	(value_of_builtin_frame_fp_reg): Likewise.
	(value_of_builtin_frame_pc_reg): Likewise.
	* utils.c (paddress): Likewise (comment).
	* gdbarch.sh (POINTER_TO_ADDRESS): Replace by
	gdbarch_pointer_to_address.
	* findvar.c (extract_typed_address): Likewise.
	* gdbtypes.c (make_pointer_type): Likewise (comment).
	* valops.c (value_cast): Likewise (comment).
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d3437 3
a3439 3
    init_type (TYPE_CODE_INT, TARGET_SHORT_BIT / TARGET_CHAR_BIT,
	       0,
	       "short", (struct objfile *) NULL);
d3441 3
a3443 3
    init_type (TYPE_CODE_INT, TARGET_SHORT_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned short", (struct objfile *) NULL);
d3445 3
a3447 3
    init_type (TYPE_CODE_INT, TARGET_INT_BIT / TARGET_CHAR_BIT,
	       0,
	       "int", (struct objfile *) NULL);
d3449 3
a3451 3
    init_type (TYPE_CODE_INT, TARGET_INT_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned int", (struct objfile *) NULL);
d3453 3
a3455 3
    init_type (TYPE_CODE_INT, TARGET_LONG_BIT / TARGET_CHAR_BIT,
	       0,
	       "long", (struct objfile *) NULL);
d3457 3
a3459 3
    init_type (TYPE_CODE_INT, TARGET_LONG_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned long", (struct objfile *) NULL);
d3461 3
a3463 3
    init_type (TYPE_CODE_INT, TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT,
	       0,
	       "long long", (struct objfile *) NULL);
d3465 3
a3467 2
    init_type (TYPE_CODE_INT, TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
a3468 1

d3632 3
a3634 3
    init_type (TYPE_CODE_INT, TARGET_SHORT_BIT / TARGET_CHAR_BIT,
	       0,
	       "short", (struct objfile *) NULL);
d3636 3
a3638 3
    init_type (TYPE_CODE_INT, TARGET_SHORT_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned short", (struct objfile *) NULL);
d3640 3
a3642 3
    init_type (TYPE_CODE_INT, TARGET_INT_BIT / TARGET_CHAR_BIT,
	       0,
	       "int", (struct objfile *) NULL);
d3644 3
a3646 3
    init_type (TYPE_CODE_INT, TARGET_INT_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned int", (struct objfile *) NULL);
d3648 3
a3650 3
    init_type (TYPE_CODE_INT, TARGET_LONG_BIT / TARGET_CHAR_BIT,
	       0,
	       "long", (struct objfile *) NULL);
d3652 3
a3654 3
    init_type (TYPE_CODE_INT, TARGET_LONG_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned long", (struct objfile *) NULL);
d3656 3
a3658 3
    init_type (TYPE_CODE_INT, TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT,
	       0,
	       "long long", (struct objfile *) NULL);
d3660 4
a3663 3
    init_type (TYPE_CODE_INT, TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned long long", (struct objfile *) NULL);
@


1.117
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_CHAR_SIGNED): Replace by gdbarch_char_signed.
	* gdbtypes.c (build_gdbtypes, gdbtypes_post_init): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d320 2
a321 2
     and addresses (CORE_ADDRs) using POINTER_TO_ADDRESS() and
     ADDRESS_TO_POINTER(). */
@


1.116
log
@        * gdbtypes.c (make_reference_type): Preserve the type chain
        and set the length of all the variants of the pointer type.
@
text
@d3421 2
a3422 1
                | (TARGET_CHAR_SIGNED ? 0 : TYPE_FLAG_UNSIGNED)),
d3616 2
a3617 1
                | (TARGET_CHAR_SIGNED ? 0 : TYPE_FLAG_UNSIGNED)),
@


1.115
log
@        * gdbtypes.c (make_pointer_type): Preserve the pointer type chain
        and set the length of all the variants of the pointer type.
@
text
@d357 1
d383 1
d385 1
d401 8
@


1.114
log
@        * gdbtypes.c (replace_type): Fix typo that caused us to not update
        length of the types referenced by the new type CV ring.
@
text
@d279 1
d305 1
d307 1
d327 8
@


1.113
log
@        * gdbtypes.c (check_typedef): Do not replace stub type if
        the resolved type is not defined in the same objfile.
@
text
@d639 1
a639 1
    TYPE_LENGTH (ntype) = TYPE_LENGTH (type);
@


1.112
log
@	* doublest.c (floatformat_from_length): Use the right element from
	gdbarch floatformats.
	(floatformat_from_type, extract_typed_floating)
	(store_typed_floating): Likewise.
	* doublest.h: Remove declarations for undefined floatformat arrays.
	* gdbarch.sh (float_format, double_format, long_double_format): Change
	to pairs.
	(pformat): Update for pairs.
	* gdbarch.c, gdbarch.h: Regenerated.
	* gdbtypes.c (floatformats_ieee_single, floatformats_ieee_double)
	(floatformats_ieee_double_littlebyte_bigword)
	(floatformats_i387_ext, floatformats_m68881_ext, floatformats_arm_ext)
	(floatformats_ia64_spill, floatformats_ia64_quad, floatformats_vax_f)
	(floatformats_vax_d): New variables.
	(builtin_type_ieee_single, builtin_type_ieee_double)
	(builtin_type_arm_ext, builtin_type_ia64_spill)
	(builtin_type_ia64_quad): Replace arrays with individual types.
	(builtin_type_ieee_single_big, builtin_type_ieee_single_little)
	(builtin_type_ieee_double_big, builtin_type_ieee_double_little)
	(builtin_type_ieee_double_littlebyte_bigword, builtin_type_i960_ext)
	(builtin_type_m88110_ext, builtin_type_m88110_harris_ext)
	(builtin_type_arm_ext_big, builtin_type_arm_ext_littlebyte_bigword)
	(builtin_type_ia64_spill_big, builtin_type_ia64_spill_little)
	(builtin_type_ia64_quad_big, builtin_type_ia64_quad_little): Delete
	unused and endian-specific types.
	(recursive_dump_type): Update for floatformat pairs.
	(build_flt): Move higher.  Handle bit == -1.  Take a floatformat pair.
	(build_gdbtypes): Use build_flt.
	(_initialize_gdbtypes): Update set of initialized types.
	* gdbtypes.h: Update declarations to match gdbtypes.c.
	(struct main_type): Store a pointer to two floatformats.
	* arch-utils.c (default_float_format, default_double_format): Delete.
	* arch-utils.h (default_float_format, default_double_format): Delete.

	* arm-tdep.c, avr-tdep.c, hppa-tdep.c, hppabsd-tdep.c, i386-tdep.c,
	ia64-tdep.c,  iq2000-tdep.c, m68k-tdep.c, m88k-tdep.c,
	mips-linux-tdep.c, mips-tdep.c, mt-tdep.c, ppcobsd-tdep.c,
	sparc-linux-tdep.c, sparc-tdep.c, sparcnbsd-tdep.c, spu-tdep.c,
	vax-tdep.c, alpha-tdep.c, ppc-sysv-tdep.c: Update.
@
text
@d1517 9
a1525 1
	make_cv_type (is_const, is_volatile, SYMBOL_TYPE (sym), &type);
@


1.111
log
@Copyright updates for 2007.
@
text
@d101 45
a145 7
struct type *builtin_type_ieee_single[BFD_ENDIAN_UNKNOWN];
struct type *builtin_type_ieee_single_big;
struct type *builtin_type_ieee_single_little;
struct type *builtin_type_ieee_double[BFD_ENDIAN_UNKNOWN];
struct type *builtin_type_ieee_double_big;
struct type *builtin_type_ieee_double_little;
struct type *builtin_type_ieee_double_littlebyte_bigword;
d148 4
a151 12
struct type *builtin_type_i960_ext;
struct type *builtin_type_m88110_ext;
struct type *builtin_type_m88110_harris_ext;
struct type *builtin_type_arm_ext[BFD_ENDIAN_UNKNOWN];
struct type *builtin_type_arm_ext_big;
struct type *builtin_type_arm_ext_littlebyte_bigword;
struct type *builtin_type_ia64_spill[BFD_ENDIAN_UNKNOWN];
struct type *builtin_type_ia64_spill_big;
struct type *builtin_type_ia64_spill_little;
struct type *builtin_type_ia64_quad[BFD_ENDIAN_UNKNOWN];
struct type *builtin_type_ia64_quad_big;
struct type *builtin_type_ia64_quad_little;
d3181 1
a3181 2
      if (TYPE_FLOATFORMAT (type) == NULL
	  || TYPE_FLOATFORMAT (type)->name == NULL)
d3184 17
a3200 1
	puts_filtered (TYPE_FLOATFORMAT (type)->name);
d3363 18
d3437 8
a3444 29
  builtin_type_float =
    init_type (TYPE_CODE_FLT, TARGET_FLOAT_BIT / TARGET_CHAR_BIT,
	       0,
	       "float", (struct objfile *) NULL);
/* vinschen@@redhat.com 2002-02-08:
   The below lines are disabled since they are doing the wrong
   thing for non-multiarch targets.  They are setting the correct
   type of floats for the target but while on multiarch targets
   this is done everytime the architecture changes, it's done on
   non-multiarch targets only on startup, leaving the wrong values
   in even if the architecture changes (eg. from big-endian to
   little-endian).  */
#if 0
  TYPE_FLOATFORMAT (builtin_type_float) = TARGET_FLOAT_FORMAT;
#endif
  builtin_type_double =
    init_type (TYPE_CODE_FLT, TARGET_DOUBLE_BIT / TARGET_CHAR_BIT,
	       0,
	       "double", (struct objfile *) NULL);
#if 0
  TYPE_FLOATFORMAT (builtin_type_double) = TARGET_DOUBLE_FORMAT;
#endif
  builtin_type_long_double =
    init_type (TYPE_CODE_FLT, TARGET_LONG_DOUBLE_BIT / TARGET_CHAR_BIT,
	       0,
	       "long double", (struct objfile *) NULL);
#if 0
  TYPE_FLOATFORMAT (builtin_type_long_double) = TARGET_LONG_DOUBLE_FORMAT;
#endif
a3557 15
build_flt (int bit, char *name, const struct floatformat *floatformat)
{
  struct type *t;
  if (bit <= 0 || floatformat == NULL)
    {
      gdb_assert (builtin_type_error != NULL);
      return builtin_type_error;
    }
  t = init_type (TYPE_CODE_FLT, bit / TARGET_CHAR_BIT,
		 0, name, (struct objfile *) NULL);
  TYPE_FLOATFORMAT (t) = floatformat;
  return t;
}

static struct type *
d3807 14
a3820 104
  builtin_type_ieee_single_big =
    init_type (TYPE_CODE_FLT, floatformat_ieee_single_big.totalsize / 8,
	       0, "builtin_type_ieee_single_big", NULL);
  TYPE_FLOATFORMAT (builtin_type_ieee_single_big) = &floatformat_ieee_single_big;
  builtin_type_ieee_single_little =
    init_type (TYPE_CODE_FLT, floatformat_ieee_single_little.totalsize / 8,
	       0, "builtin_type_ieee_single_little", NULL);
  TYPE_FLOATFORMAT (builtin_type_ieee_single_little) = &floatformat_ieee_single_little;
  builtin_type_ieee_single[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ieee_single_big.totalsize,
		 "builtin_type_ieee_single_big",
		 &floatformat_ieee_single_big);
  builtin_type_ieee_single[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ieee_single_little.totalsize,
		 "builtin_type_ieee_single_little",
		 &floatformat_ieee_single_little);
  builtin_type_ieee_double_big =
    init_type (TYPE_CODE_FLT, floatformat_ieee_double_big.totalsize / 8,
	       0, "builtin_type_ieee_double_big", NULL);
  TYPE_FLOATFORMAT (builtin_type_ieee_double_big) = &floatformat_ieee_double_big;
  builtin_type_ieee_double_little =
    init_type (TYPE_CODE_FLT, floatformat_ieee_double_little.totalsize / 8,
	       0, "builtin_type_ieee_double_little", NULL);
  TYPE_FLOATFORMAT (builtin_type_ieee_double_little) = &floatformat_ieee_double_little;
  builtin_type_ieee_double[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ieee_double_big.totalsize,
		 "builtin_type_ieee_double_big",
		 &floatformat_ieee_double_big);
  builtin_type_ieee_double[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ieee_double_little.totalsize,
		 "builtin_type_ieee_double_little",
		 &floatformat_ieee_double_little);
  builtin_type_ieee_double_littlebyte_bigword =
    init_type (TYPE_CODE_FLT, floatformat_ieee_double_littlebyte_bigword.totalsize / 8,
	       0, "builtin_type_ieee_double_littlebyte_bigword", NULL);
  TYPE_FLOATFORMAT (builtin_type_ieee_double_littlebyte_bigword) = &floatformat_ieee_double_littlebyte_bigword;
  builtin_type_i387_ext =
    init_type (TYPE_CODE_FLT, floatformat_i387_ext.totalsize / 8,
	       0, "builtin_type_i387_ext", NULL);
  TYPE_FLOATFORMAT (builtin_type_i387_ext) = &floatformat_i387_ext;
  builtin_type_m68881_ext =
    init_type (TYPE_CODE_FLT, floatformat_m68881_ext.totalsize / 8,
	       0, "builtin_type_m68881_ext", NULL);
  TYPE_FLOATFORMAT (builtin_type_m68881_ext) = &floatformat_m68881_ext;
  builtin_type_i960_ext =
    init_type (TYPE_CODE_FLT, floatformat_i960_ext.totalsize / 8,
	       0, "builtin_type_i960_ext", NULL);
  TYPE_FLOATFORMAT (builtin_type_i960_ext) = &floatformat_i960_ext;
  builtin_type_m88110_ext =
    init_type (TYPE_CODE_FLT, floatformat_m88110_ext.totalsize / 8,
	       0, "builtin_type_m88110_ext", NULL);
  TYPE_FLOATFORMAT (builtin_type_m88110_ext) = &floatformat_m88110_ext;
  builtin_type_m88110_harris_ext =
    init_type (TYPE_CODE_FLT, floatformat_m88110_harris_ext.totalsize / 8,
	       0, "builtin_type_m88110_harris_ext", NULL);
  TYPE_FLOATFORMAT (builtin_type_m88110_harris_ext) = &floatformat_m88110_harris_ext;
  builtin_type_arm_ext_big =
    init_type (TYPE_CODE_FLT, floatformat_arm_ext_big.totalsize / 8,
	       0, "builtin_type_arm_ext_big", NULL);
  TYPE_FLOATFORMAT (builtin_type_arm_ext_big) = &floatformat_arm_ext_big;
  builtin_type_arm_ext_littlebyte_bigword =
    init_type (TYPE_CODE_FLT, floatformat_arm_ext_littlebyte_bigword.totalsize / 8,
	       0, "builtin_type_arm_ext_littlebyte_bigword", NULL);
  TYPE_FLOATFORMAT (builtin_type_arm_ext_littlebyte_bigword) = &floatformat_arm_ext_littlebyte_bigword;
  builtin_type_arm_ext[BFD_ENDIAN_BIG]
    = build_flt (floatformat_arm_ext_big.totalsize,
		 "builtin_type_arm_ext_big",
		 &floatformat_arm_ext_big);
  builtin_type_arm_ext[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_arm_ext_littlebyte_bigword.totalsize,
		 "builtin_type_arm_ext_littlebyte_bigword",
		 &floatformat_arm_ext_littlebyte_bigword);
  builtin_type_ia64_spill_big =
    init_type (TYPE_CODE_FLT, floatformat_ia64_spill_big.totalsize / 8,
	       0, "builtin_type_ia64_spill_big", NULL);
  TYPE_FLOATFORMAT (builtin_type_ia64_spill_big) = &floatformat_ia64_spill_big;
  builtin_type_ia64_spill_little =
    init_type (TYPE_CODE_FLT, floatformat_ia64_spill_little.totalsize / 8,
	       0, "builtin_type_ia64_spill_little", NULL);
  TYPE_FLOATFORMAT (builtin_type_ia64_spill_little) = &floatformat_ia64_spill_little;
  builtin_type_ia64_spill[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ia64_spill_big.totalsize,
		 "builtin_type_ia64_spill_big",
		 &floatformat_ia64_spill_big);
  builtin_type_ia64_spill[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ia64_spill_little.totalsize,
		 "builtin_type_ia64_spill_little",
		 &floatformat_ia64_spill_little);
  builtin_type_ia64_quad_big =
    init_type (TYPE_CODE_FLT, floatformat_ia64_quad_big.totalsize / 8,
	       0, "builtin_type_ia64_quad_big", NULL);
  TYPE_FLOATFORMAT (builtin_type_ia64_quad_big) = &floatformat_ia64_quad_big;
  builtin_type_ia64_quad_little =
    init_type (TYPE_CODE_FLT, floatformat_ia64_quad_little.totalsize / 8,
	       0, "builtin_type_ia64_quad_little", NULL);
  TYPE_FLOATFORMAT (builtin_type_ia64_quad_little) = &floatformat_ia64_quad_little;
  builtin_type_ia64_quad[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ia64_quad_big.totalsize,
		 "builtin_type_ia64_quad_big",
		 &floatformat_ia64_quad_big);
  builtin_type_ia64_quad[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ia64_quad_little.totalsize,
		 "builtin_type_ia64_quad_little",
		 &floatformat_ia64_quad_little);
@


1.110
log
@	Warning fixes.
	* ada-lang.c (find_struct_field): Initialize *byte_offset_p.
	* breakpoint.c (do_enable_breakpoint): Ignore both mem_cnt and i.
	* c-typeprint.c (c_type_print_varspec_suffix): Don't test length
	greater than or equal to zero.
	* m2-typeprint.c (m2_array): Likewise.
	* p-typeprint.c (pascal_type_print_varspec_prefix): Likewise.
	* gdbtypes.c (copy_type_recursive): Correct == typo.
	* i386-tdep.c (i386_skip_prologue): Remove stray semicolon.
	* linux-nat.c (linux_nat_info_proc_cmd): Don't compare a pointer
	greater than zero.
	* macroscope.c (sal_macro_scope): Don't name a local variable "main".
	(default_macro_scope): Remove unused variable.
	* prologue-value.h (pv_area_find_reg): Don't name an argument
	"register".
	* remote-fileio.c (remote_fio_func_map): Add missing braces.
	* remote.c (sigint_remote_twice_token, sigint_remote_token): Change
	type.
	(cleanup_sigint_signal_handler): Remove casts.
	* valprint.c (val_print): Use a volatile local for the modified
	argument.
	* varobj.c (languages): Remove extra array dimension.
	(varobj_create): Correct access to languages array.
	* mi/mi-cmd-break.c (mi_cmd_break_insert, mi_cmd_break_watch): Add
	missing braces.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_path, mi_cmd_env_dir): Likewise.
	* mi/mi-getopt.c (mi_valid_noargs): Likewise.
	* mi/mi-main.c (mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_write_memory): Likewise.
	* signals/signals.c (target_signal_to_string): Cast to int before
	comparing.
	* tui/tui-layout.c (init_and_make_win): Take and return a void *.
	Update all callers.
@
text
@d4 1
a4 1
   2003, 2004, 2005, 2006 Free Software Foundation, Inc.
@


1.109
log
@	* NEWS: Mention pointer to member improvements.
	* Makefile.in (gnu-v3-abi.o): Delete special rule.
	(eval.o, gnu-v3-abi.o, ia64-tdep.o): Update.
	* ada-valprint.c (ada_print_scalar): Update for new type codes.
	* c-typeprint.c (c_print_type): Update for new type codes.
	(c_type_print_varspec_prefix, c_type_print_varspec_suffix)
	(c_type_print_base): Likewise.
	(c_type_print_args): Rewrite.
	* c-valprint.c (c_val_print): Update for new type codes.  Remove
	support for references to members.  Treat methods like functions.
	* cp-abi.c (cplus_print_method_ptr, cplus_method_ptr_size)
	(cplus_make_method_ptr, cplus_method_ptr_to_value): New.
	* cp-abi.h (cplus_print_method_ptr, cplus_method_ptr_size)
	(cplus_make_method_ptr, cplus_method_ptr_to_value): New prototypes.
	(struct cp_abi_ops): Add corresponding members.
	* cp-valprint.c (cp_print_class_method): Delete.
	(cp_find_class_member): New function.
	(cp_print_class_member): Use it.  Simplify support for bogus
	member pointers.
	* dwarf2read.c (quirk_gcc_member_function_pointer): Use
	lookup_methodptr_type.
	(read_tag_ptr_to_member_type): Likewise, and lookup_memberptr_type.
	* eval.c (evaluate_subexp_standard): Implement EVAL_SKIP for
	OP_SCOPE.  Update call to value_aggregate_elt.  Rewrite member
	pointer support.
	(evaluate_subexp_for_address): Handle OP_SCOPE explicitly.  Handle
	references returned by user defined operators.
	* f-typeprint.c (f_print_type, f_type_print_varspec_prefix)
	(f_type_print_varspec_suffix): Remove support for member pointers.
	* gdbtypes.c (lookup_memberptr_type): Renamed from lookup_member_type
	and adjusted.
	(smash_to_memberptr_type): Likewise, from smash_to_member_type.
	(lookup_methodptr_type): New.
	(rank_one_type): Adjust for TYPE_CODE_MEMBERPTR.
	(recursive_dump_type): Update for new types.
	* gdbtypes.h (enum type_code): Replace TYPE_CODE_MEMBER with
	TYPE_CODE_MEMBERPTR and TYPE_CODE_METHODPTR.
	(lookup_memberptr_type, lookup_methodptr_type)
	(smash_to_memberptr_type): New prototypes.
	(smash_to_method_type): Formatting fix.
	(lookup_member_type, smash_to_member_type): Delete prototypes.
	* gnu-v3-abi.c (gnuv3_get_vtable, gnuv3_get_virtual_fn): New.
	Do not rely on debug information for the vptr or the method's
	enclosing type.  Handle function descriptors for IA64.
	(gnuv3_virtual_fn_field): Rewrite using the new functions.
	(gnuv3_find_method_in, gnuv3_print_method_ptr)
	(gnuv3_method_ptr_size, gnuv3_make_method_ptr)
	(gnuv3_method_ptr_to_value): New.
	(init_gnuv3_ops): Set new members of gnu_v3_abi_ops.
	* hpread.c (hpread_type_lookup): Update for new types.
	* infcall.c (value_arg_coerce): Likewise.
	* m2-typeprint.c (m2_print_type): Remove explicit support
	for member pointers.
	* m2-valprint.c (m2_val_print): Likewise.
	* p-typeprint.c (pascal_type_print_varspec_prefix)
	(pascal_type_print_varspec_suffix, pascal_type_print_base): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	(pascal_object_print_class_method, pascal_object_print_class_member):
	Delete.
	* p-lang.h (pascal_object_print_class_method)
	(pascal_object_print_class_member): Delete prototypes.
	* stabsread.c (read_type): Update for new types.
	* typeprint.c (print_type_scalar): Likewise.
	* valops.c (value_struct_elt_for_reference, value_namespace_elt)
	(value_maybe_namespace_elt, value_aggregate_elt): Add want_address
	argument.  Construct a pointer to member if the address of a
	function or data member is requested.
	(value_cast_pointers): Don't modify the input value.
	(value_cast): Adjust pointer to member handling for new types.
	Allow null pointer to member constants.  Don't modify the input
	value.
	(value_ind): Remove pointer to member check.  Handle function
	descriptors for function pointers.
	(value_struct_elt, value_find_oload_method_list, check_field):
	Remove pointer to member checks.
	* value.c (unpack_long): Allow pointers to data members.
	(value_from_longest): Allow member pointers.
	* value.h (value_aggregate_elt): Add want_address.
	* varobj.c (c_variable_editable): Remove check for members.
	* gdbarch.sh: Add vtable_function_descriptors and vbit_in_delta.
	* ia64-tdep.c (ia64_convert_from_func_ptr_addr): Handle descriptors
	in virtual tables.
	(ia64_gdbarch_init): Call set_gdbarch_vtable_function_descriptors.
	* c-lang.h (cp_print_class_method): Delete prototype.
	* arm-tdep.c (arm_gdbarch_init): Call set_gdbarch_vbit_in_delta.
	* mips-tdep.c (mips_gdbarch_init): Likewise.
	* gdbarch.c, gdbarch.h: Regenerated.

	* gdb.cp/classes.exp (test_pointers_to_class_members): Update expected
	output.  Test the types of members and member pointers.
	* gdb.cp/inherit.exp (test_print_mi_member_types): Remove KFAILs for
	gdb/2092.
	* gdb.cp/member-ptr.exp: Search for a comment instead of a
	statement.  Enable for GCC.  Update expected output for some tests
	and add new tests.  Remove obsolete GCC KFAILs.  Allow GCC's class
	layout.
	* gdb.cp/member-ptr.cc (Padding, Padding::vspacer, Base, Base::get_x)
	(Base::vget_base, Left, Left::vget, Right, Right::vget, Diamond)
	(Diamond::vget_base): New.
	(main): Add new tests.
	* gdb.cp/printmethod.exp: Update expected output for member functions.
	* gdb.cp/virtfunc.exp (test_virtual_calls): Add a KFAIL for
	print pEe->D::vg().
@
text
@d3308 1
a3308 1
    TYPE_FLOATFORMAT (new_type) == TYPE_FLOATFORMAT (type);
@


1.108
log
@2006-12-06  Jim Blandy  <jimb@@codesourcery.com>

	* gdbtypes.c: Revert 2006-12-05 change, and explain why.
@
text
@d624 1
a624 1
lookup_member_type (struct type *type, struct type *domain)
d629 1
a629 1
  smash_to_member_type (mtype, domain, type);
d633 15
d999 6
a1004 5
/* Smash TYPE to be a type of members of DOMAIN with type TO_TYPE. 
   A MEMBER is a wierd thing -- it amounts to a typed offset into
   a struct, e.g. "an int at offset 8".  A MEMBER TYPE doesn't
   include the offset (that's the value of the MEMBER itself), but does
   include the structure type into which it points (for some reason).
d1011 2
a1012 2
smash_to_member_type (struct type *type, struct type *domain,
		      struct type *to_type)
d1022 4
a1025 2
  TYPE_LENGTH (type) = 1;	/* In practice, this is never needed.  */
  TYPE_CODE (type) = TYPE_CODE_MEMBER;
d2664 1
a2664 1
    case TYPE_CODE_MEMBER:
d2978 5
a2982 2
    case TYPE_CODE_MEMBER:
      printf_filtered ("(TYPE_CODE_MEMBER)");
@


1.107
log
@	* gdbtypes.c (built_gdbtypes): Don't set builtin_type_void here.
	(_initialize_gdbtypes): Do it here, and don't swap it when the
	architecture changes.
@
text
@d3300 4
d3653 3
a3655 4
  builtin_type_void =
    init_type (TYPE_CODE_VOID, 1,
	       0,
	       "void", (struct objfile *) NULL);
d3707 8
a3714 1
     struct. */
d3757 2
a3758 1
     neutral.  */
@


1.106
log
@* gdbtypes.c (init_flags_type): Set all fields to zero instead of
just the first one.
@
text
@a3299 4
  builtin_type_void =
    init_type (TYPE_CODE_VOID, 1,
	       0,
	       "void", (struct objfile *) NULL);
d3649 4
a3704 1
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_void);
@


1.105
log
@gdb/
	* gdbtypes.c (lookup_struct_elt_type): Correct noerr for recursive
	calls.
gdb/testsuite/
	* gdb.cp/inherit.exp (test_print_mi_member_types): New function.
	(do_tests): Call it.
@
text
@d881 1
a881 1
  memset (TYPE_FIELDS (type), 0, sizeof (struct field));
@


1.105.12.1
log
@        * gdbtypes.c (init_flags_type): Set all fields to zero instead of
        just the first one.
@
text
@d881 1
a881 1
  memset (TYPE_FIELDS (type), 0, nfields * sizeof (struct field));
@


1.105.10.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d881 1
a881 1
  memset (TYPE_FIELDS (type), 0, nfields * sizeof (struct field));
@


1.104
log
@gdb/
	* Makefile.in (gdbtypes_h, gdbtypes.o, utils.o): Update.
	* defs.h (hashtab_obstack_allocate, dummy_obstack_deallocate): Add
	prototypes.
	* dwarf2read.c (read_subroutine_type): Use TYPE_ZALLOC.
	(hashtab_obstack_allocate, dummy_obstack_deallocate): Moved to...
	* utils.c (hashtab_obstack_allocate, dummy_obstack_deallocate):
	...here.
	* gdbtypes.c: Include "hashtab.h".
	(build_gdbtypes): Remove extra prototype.
	(struct type_pair, type_pair_hash, type_pair_eq)
	(create_copied_types_hash, copy_type_recursive): New.
	* gdbtypes.h: Include "hashtab.h".
	(TYPE_ZALLOC): New.
	(create_copied_types_hash, copy_type_recursive): New prototypes.
	* objfiles.c (free_objfile): Call preserve_values.
	* symfile.c (reread_symbols): Likewise.
	(clear_symtab_users): Remove calls to clear_value_history and
	clear_internalvars.
	* value.c (clear_value_history, clear_internalvars): Removed.
	(preserve_one_value, preserve_values): New functions.
	* value.h (clear_value_history, clear_internalvars): Removed.
	(preserve_values): New prototype.

	* tracepoint.c (_initialize_tracepoint): Do not initialize convenience
	variables here.
gdb/doc/
	* gdb.texinfo (Files): Remove obsolete bits from the description
	of "symbol-file".
@
text
@d1274 1
a1274 1
      t = lookup_struct_elt_type (TYPE_BASECLASS (type, i), name, noerr);
@


1.104.2.1
log
@2006-05-03  Paul Brook  <paul@@codesourcery.com>
	Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb/testsuite/gdb.cp/gdb1355.exp: Accept different spellings of
	integer types.
	* gdb/testsuite/gdb.cp/gdb1355.cc: Ensure all types are referenced.
	* gdb/testsuite/gdb.cp/hang2.C: Ditto.
	* gdb/testsuite/gdb.cp/m-data.cc: Ditto.
	* gdb/testsuite/gdb.cp/hang3.C: Ditto.
	* gdb/testsuite/gdb.cp/hang1.C: Ditto.

	* gdb/gdbtypes.c (rank_one_type): Check for plain char -> signed/
	unsigned char.

	* gdb/testsuite/gdb.base/completion.exp: Accept "long" as a type.

	* gdb/testsuite/gdb.base/volatile.exp: Accept different spellings of
	integer types.
	* gdb/testsuite/gdb.base/constvars.c: Ensure all types are referenced.

	* gdb/testsuite/gdb.stabs/weird.exp: Return -1 instead of issuing
	error.

	* gdb/testsuite/gdb.base/advance.c: Add proper function prototype.

	* gdb/testsuite/gdb.base/ending-run.exp: Add case for ARM runtime.

	* gdb/testsuite/gdb.base/gdb1821.c: Ensure all types are referenced.

	* gdb/testsuite/gdb.base/ptype.exp: Accept different spellings of
	integer types.

	* gdb/testsuite/gdb.cp/inherit.exp: Cope with armcc vtable pointers.

	* gdb/testsuite/gdb.mi/mi2-var-child.exp: Accept different spellings
	of integer types.
	* gdb/testsuite/gdb.mi/mi-var-display.exp: Ditto.
	* gdb/testsuite/gdb.mi/mi2-var-display.exp: Ditto.
	* gdb/testsuite/gdb.mi/mi2-var-cmd.exp: Ditto.
@
text
@a2454 2
	      else if (TYPE_NOSIGN (arg))
		return INTEGER_CONVERSION_BADNESS;	/* plain char -> signed/unsigned char */
@


1.103
log
@Based on a previous patch form Michal Ludvig:
* gdbtypes.c (append_flags_type_flag, init_flags_type): New
functions.
(is_integral_type, rank_one_type, recursive_dump_type): Add
support for TYPE_CODE_FLAGS.
* gdbtypes.h (enum type_code): Add TYPE_CODE_FLAGS.
(append_flags_type_field, init_flags_type): New prototypes.
* ada-valprint.c (ada_val_print_1): Add support for
TYPE_CODE_FLAGS.
* c-valprint.c (c_val_print): Likewise.
* f-valprint.c (f_val_print): Likewise.
* p-valprint.c (pascal_val_print): Likewise.
* valprint.c (val_print_type_code_flags): New function.
* valprint.h (val_print_type_code_flags): New prototype.
* value.c (unpack_long, value_from_longest): Add support for
TYPE_CODE_FLAGS.
@
text
@d4 1
a4 1
   2003, 2004, 2006 Free Software Foundation, Inc.
d42 1
d3156 141
a3296 1
static void build_gdbtypes (void);
@


1.102
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d2 4
a5 2
   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003,
   2004 Free Software Foundation, Inc.
d852 33
d1860 1
d2413 1
d2494 1
d2929 3
@


1.101
log
@	* gdbtypes.c (get_discrete_bounds): Fix a comment typo.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003,
d20 2
a21 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.100
log
@Move construction of IA-32 vector types to i386-tdep.c.
* gdbtypes.c (build_builtin_type_vec64i,
build_builtin_type_vec128i): Delete functions.
(builtin_type_vec64i, builtin_type_vec128i): Delete variables.
(build_gdbtypes): Don't initialize them.
(_initialize_gdbtypes): Don't register GDBARCH swap entries for
them.
* gdbtypes.h (builtin_type_vec64i, builtin_type_vec128i): Delete
declarations.
(builtin_type_v2_float, builtin_type_v2_int32,
builtin_type_v4_int16, builtin_type_v8_int8,
builtin_type_v2_double, builtin_type_v4_float,
builtin_type_v2_int64, builtin_type_v4_int32,
builtin_type_v8_int16, builtin_type_v16_int8): Add extern
declarations.
* i386-tdep.c (i386_mmx_type, i386_sse_type): New variables.
(i386_build_mmx_type, i386_build_sse_type): New functions.
(i386_register_type): Call them, rather than referring to
builtin_type_vec64i and builtin_type_vec128i.
@
text
@d687 1
a687 1
   Return 1 of type is a range type, 0 if it is discrete (and bounds
@


1.99
log
@2005-02-24  Andrew Cagney  <cagney@@gnu.org>

	Add show_VARIABLE functions, update add_setshow call.
	* varobj.c (_initialize_varobj, show_varobjdebug): Add and update.
	* valprint.c (_initialize_valprint, show_print_max)
	(show_stop_print_at_null, show_repeat_count_threshold)
	(show_prettyprint_structs, show_unionprint)
	(show_prettyprint_arrays, show_addressprint, show_input_radix)
	(show_output_radix): Ditto.
	* valops.c (_initialize_valops, show_overload_resolution): Ditto.
	* utils.c (initialize_utils, show_chars_per_line)
	(show_lines_per_page, show_demangle, show_pagination_enabled)
	(show_sevenbit_strings, show_asm_demangle): Ditto
	* tui/tui-win.c (_initialize_tui_win, show_tui_border_kind)
	(show_tui_border_mode, show_tui_active_border_mode): Ditto.
	* top.c (init_main, show_new_async_prompt)
	(show_async_command_editing_p, show_write_history_p)
	(show_history_size, show_history_filename, show_caution)
	(show_annotation_level, init_main): Ditto.
	* target.c (initialize_targets, show_targetdebug)
	(show_trust_readonly): Ditto.
	* symfile.c (_initialize_symfile, show_symbol_reloading)
	(show_ext_args, show_download_write_size)
	(show_debug_file_directory): Ditto.
	* source.c (_initialize_source, show_lines_to_list): Ditto.
	* solib.c (_initialize_solib, show_auto_solib_add)
	(show_solib_search_path): Ditto.
	* p-valprint.c (_initialize_pascal_valprint)
	(show_pascal_static_field_print): Ditto.
	* printcmd.c (_initialize_printcmd, show_max_symbolic_offset)
	(show_print_symbol_filename): Add and update.
	* parse.c (_initialize_parse, show_expressiondebug): Dito.
	* observer.c (_initialize_observer, show_observer_debug): Dito.
	* maint.c (_initialize_maint_cmds, show_watchdog)
	(show_maintenance_profile_p): Dito.
	* linux-nat.c (_initialize_linux_nat, show_debug_linux_nat): Dito.
	* infrun.c (_initialize_infrun, show_debug_infrun)
	(show_stop_on_solib_events, show_follow_fork_mode_string)
	(show_scheduler_mode, show_step_stop_if_no_debug): Ditto.
	* infcall.c (_initialize_infcall, show_coerce_float_to_double_p)
	(show_unwind_on_signal_p): Ditto.
	* gdbtypes.c (build_gdbtypes, show_opaque_type_resolution)
	(_initialize_gdbtypes, show_overload_debug): Ditto.
	* gdb-events.c, gdb-events.sh (_initialize_gdb_events)
	(show_gdb_events_debug): Ditto.
	* gdbarch.c, gdbarch.sh (show_gdbarch_debug)
	(_initialize_gdbarch): Ditto.
	* frame.c (_initialize_frame, show_backtrace_past_main)
	(show_backtrace_past_entry, show_backtrace_limit)
	(show_frame_debug): Ditto.
	* exec.c (_initialize_exec, show_write_files): Ditto.
	* dwarf2read.c (_initialize_dwarf2_read)
	(show_dwarf2_max_cache_age): Ditto.
	* demangle.c (_initialize_demangler)
	(show_demangling_style_names): Ditto.
	* dcache.c (_initialize_dcache, show_dcache_enabled_p): Ditto.
	* cp-valprint.c (show_static_field_print)
	(_initialize_cp_valprint, show_vtblprint, show_objectprint): Ditto.
	* corefile.c (_initialize_core, show_gnutarget_string): Ditto.
	* cli/cli-logging.c (_initialize_cli_logging)
	(show_logging_overwrite, show_logging_redirect)
	(show_logging_filename): Ditto.
	* cli/cli-cmds.c (show_info_verbose, show_history_expansion_p)
	(init_cli_cmds, show_baud_rate, show_remote_debug)
	(show_remote_timeout, show_max_user_call_depth): Ditto.
	* charset.c (show_host_charset_name, show_target_charset_name)
	(initialize_charset): Ditto.
	* breakpoint.c (show_can_use_hw_watchpoints)
	(show_pending_break_support, _initialize_breakpoint): Ditto.
@
text
@a96 1
struct type *builtin_type_vec64i;
a97 1
struct type *builtin_type_vec128i;
a918 28
build_builtin_type_vec64i (void)
{
  /* Construct a type for the 64 bit registers.  The type we're
     building is this: */
#if 0
  union __gdb_builtin_type_vec64i 
  {
    int64_t uint64;
    int32_t v2_int32[2];
    int16_t v4_int16[4];
    int8_t v8_int8[8];
  };
#endif

  struct type *t;

  t = init_composite_type ("__gdb_builtin_type_vec64i", TYPE_CODE_UNION);
  append_composite_type_field (t, "uint64", builtin_type_int64);
  append_composite_type_field (t, "v2_int32", builtin_type_v2_int32);
  append_composite_type_field (t, "v4_int16", builtin_type_v4_int16);
  append_composite_type_field (t, "v8_int8", builtin_type_v8_int8);

  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec64i";
  return t;
}

static struct type *
a947 20
static struct type *
build_builtin_type_vec128i (void)
{
  /* 128-bit Intel SIMD registers */
  struct type *t;

  t = init_composite_type ("__gdb_builtin_type_vec128i", TYPE_CODE_UNION);
  append_composite_type_field (t, "v4_float", builtin_type_v4_float);
  append_composite_type_field (t, "v2_double", builtin_type_v2_double);
  append_composite_type_field (t, "v16_int8", builtin_type_v16_int8);
  append_composite_type_field (t, "v8_int16", builtin_type_v8_int16);
  append_composite_type_field (t, "v4_int32", builtin_type_v4_int32);
  append_composite_type_field (t, "v2_int64", builtin_type_v2_int64);
  append_composite_type_field (t, "uint128", builtin_type_int128);

  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec128i";
  return t;
}

a3259 1
  builtin_type_vec64i = build_builtin_type_vec64i ();
a3260 1
  builtin_type_vec128i = build_builtin_type_vec128i ();
a3558 1
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_vec128i);
@


1.98
log
@2005-02-18  Andrew Cagney  <cagney@@gnu.org>

	Use add_setshow_zinteger_cmd through out.  Re-sync gdbarch.sh
	and gdbarch.c.
	* breakpoint.c, frame.c, gdb-events.sh, gdbarch.sh: Update.
	* gdbtypes.c, infrun.c, linux-nat.c, maint.c, monitor.c: Update.
	* pa64solib.c, parse.c, remote-mips.c, ser-go32.c: Update.
	* serial.c, solib-frv.c, somsolib.c, target.c, top.c: Update.
	* varobj.c, cli/cli-cmds.c: Update.
	* gdbarch.c, gdb-events.c: Regenerate.
@
text
@d127 9
d137 6
d3275 1
a3275 1
			   NULL, /* FIXME: i18n: */
d3730 1
a3730 1
			    NULL, /* FIXME: i18n: */
@


1.97
log
@2005-02-18  Andrew Cagney  <cagney@@gnu.org>

	Use add_setshow_boolean_command through out.  Delete #ifdef 0'ed
	code adding set/show boolean commands.
	* cp-valprint.c, dcache.c, exec.c, gdbtypes.c, infrun.c: Update.
	* monitor.c, p-valprint.c, pa64solib.c, printcmd.c: Update.
	* proc-api.c, remote-mips.c, remote.c, solib.c: Update.
	* somsolib.c, symfile.c, top.c, utils.c, valops.c: Update.
	* valprint.c, win32-nat.c, wince.c, xcoffsolib.c: Update.
	* cli/cli-cmds.c: Update.
@
text
@d3710 7
a3716 5
  deprecated_add_show_from_set
    (add_set_cmd ("overload", no_class, var_zinteger, (char *) &overload_debug,
		  "Set debugging of C++ overloading.\n\
When enabled, ranking of the functions is displayed.", &setdebuglist),
     &showdebuglist);
@


1.96
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up some of printf_filtered and printf_unfiltered.
	* ada-lang.c, annotate.c, arch-utils.c, breakpoint.c: Update.
	* corelow.c, cp-namespace.c, cp-support.c, dcache.c: Update.
	* demangle.c, dsrec.c, dwarf2read.c, dwarfread.c: Update.
	* event-loop.c, event-top.c, exec.c, f-valprint.c: Update.
	* gdbtypes.c, inf-loop.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcmd.c, inflow.c, infrun.c, inftarg.c, language.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, maint.c: Update.
	* mdebugread.c, memattr.c, monitor.c, objc-lang.c: Update.
	* ocd.c, osabi.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote.c, solib-som.c, solib.c, somsolib.c, source.c: Update.
	* stack.c, symfile.c, symmisc.c, target.c, thread.c: Update.
	* top.c, utils.c, valprint.c, value.c, cli/cli-cmds.c: Update.
	* cli/cli-dump.c, cli/cli-logging.c, tui/tui-hooks.c: Update.
	* tui/tui-regs.c, tui/tui-win.c: Update.
@
text
@d3255 7
a3261 5
  deprecated_add_show_from_set
    (add_set_cmd ("opaque-type-resolution", class_support, var_boolean, (char *) &opaque_type_resolution,
		  "Set resolution of opaque struct/class/union types (if set before loading symbols).",
		  &setlist),
     &showlist);
@


1.95
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up error_no_arg, query, perror_with_name, complaint, and
	internal_error.
	* breakpoint.c, cp-abi.c, cp-namespace.c, cp-support.c: Update.
	* cris-tdep.c, dbxread.c, dictionary.c, dsrec.c: Update.
	* dummy-frame.c, dve3900-rom.c, dwarf2-frame.c, dwarf2expr.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, event-loop.c: Update.
	* exceptions.c, exec.c, f-lang.c, findvar.c, fork-child.c: Update.
	* frame-unwind.c, frame.c, frv-linux-tdep.c, frv-tdep.c: Update.
	* gdb_assert.h, gdbarch.c, gdbtypes.c, gnu-nat.c: Update.
	* go32-nat.c, hppa-tdep.c, hppabsd-nat.c, hpread.c: Update.
	* i386-linux-nat.c, i386-nat.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386fbsd-nat.c, inf-ptrace.c, inf-ttrace.c, infcall.c: Update.
	* infcmd.c, inflow.c, infptrace.c, infrun.c, inftarg.c: Update.
	* interps.c, language.c, linespec.c, linux-nat.c: Update.
	* m32r-linux-nat.c, m68k-tdep.c, m68kbsd-nat.c: Update.
	* m68klinux-nat.c, m88kbsd-nat.c, macroexp.c, macroscope.c: Update.
	* macrotab.c, maint.c, mdebugread.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mips64obsd-nat.c: Update.
	* mipsnbsd-nat.c, mn10300-tdep.c, monitor.c, nto-procfs.c: Update.
	* objc-lang.c, objfiles.c, objfiles.h, ocd.c, osabi.c: Update.
	* parse.c, ppc-bdm.c, ppc-linux-nat.c, ppc-sysv-tdep.c: Update.
	* ppcnbsd-nat.c, ppcobsd-nat.c, printcmd.c, procfs.c: Update.
	* regcache.c, reggroups.c, remote-e7000.c, remote-mips.c: Update.
	* remote-rdp.c, remote-sds.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote.c, rs6000-nat.c, rs6000-tdep.c: Update.
	* s390-nat.c, s390-tdep.c, sentinel-frame.c, serial.c: Update.
	* sh-tdep.c, sh3-rom.c, sh64-tdep.c, shnbsd-nat.c: Update.
	* solib-aix5.c, solib-svr4.c, solib.c, source.c: Update.
	* sparc-nat.c, stabsread.c, stack.c, symfile.c, symtab.c: Update.
	* symtab.h, target.c, tracepoint.c, ui-file.c, ui-out.c: Update.
	* utils.c, valops.c, valprint.c, vax-nat.c, vaxbsd-nat.c: Update.
	* win32-nat.c, xcoffread.c, xstormy16-tdep.c: Update.
	* cli/cli-cmds.c, cli/cli-logging.c, cli/cli-script.c: Update.
	* cli/cli-setshow.c, mi/mi-cmd-break.c, mi/mi-cmds.c: Update.
	* mi/mi-console.c, mi/mi-getopt.c, mi/mi-out.c: Update.
	* tui/tui-file.c, tui/tui-interp.c: Update.
@
text
@d2697 1
a2697 3
	{
	  printf_filtered ("1");
	}
d2699 1
a2699 3
	{
	  printf_filtered ("0");
	}
d2736 1
a2736 1
      printf_filtered (") length %d\n",
d2856 1
a2856 1
      printf_filtered ("(unknown bound type)");
d2886 1
a2886 1
	      printf_filtered (" <same as already seen type>\n");
d3139 1
a3139 1
	  printf_filtered (" (unknown data form)");
@


1.94
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@d1356 1
a1356 1
  complaint (&symfile_complaints, "stub type has NULL name");
@


1.93
log
@* gdbtypes.c (make_qualified_type): Doc fix.  Add assertion to
prevent cross-objfile references.
(make_cv_type): Doc fix.  Don't create cross-objfile references,
even for stub types.
(replace_type): Add assertion to prevent cross-objfile references.
(check_typedef): Never resolve a stub type by copying over a type
from another file.
@
text
@d414 1
a414 1
    error ("Unknown address space specifier: \"%s\"", space_identifier);
d1078 1
a1078 1
	  error ("No type named %s.", name);
d1122 1
a1122 1
      error ("No struct type named %s.", name);
d1126 1
a1126 1
      error ("This context has class, union or enum %s, not a struct.", name);
d1144 1
a1144 1
    error ("No union type named %s.", name);
d1159 1
a1159 1
  error ("This context has class, struct or enum %s, not a union.", name);
d1175 1
a1175 1
      error ("No enum type named %s.", name);
d1179 1
a1179 1
      error ("This context has class, struct or union %s, not an enum.", name);
d1201 1
a1201 1
      error ("No template type named %s.", name);
d1205 1
a1205 1
      error ("This context has class, union or enum %s, not a struct.", name);
d1241 1
a1241 1
      error (" is not a structure or union type.");
d1291 1
a1291 1
  error (".");
d1557 1
a1557 1
    error ("Internal: Cannot demangle mangled name `%s'.", mangled_name);
d1814 1
a1814 1
      error ("internal error - invalid fundamental type id %d", typeid);
@


1.92
log
@2004-08-08  Andrew Cagney  <cagney@@gnu.org>

	* gdbtypes.c (builtin_type_arm_ext, builtin_type_ieee_single)
	(builtin_type_ieee_double, builtin_type_ia64_quad)
	(builtin_type_ia64_spill, _initialize_gdbtypes): Add tables of
	BE/LE floating-point types.
	* gdbtypes.h (builtin_type_arm_ext, builtin_type_ieee_single)
	(builtin_type_ieee_double, builtin_type_ia64_quad)
	(builtin_type_ia64_spill): Declare.
	* doublest.c (_initialize_doublest, floatformat_ieee_single)
	(floatformat_ieee_double, floatformat_arm_ext)
	(floatformat_ia64_spill, floatformat_ia64_quad): Add tables
	of LE/BE floatformats.
	* doublest.h: (struct floatformat, floatformat_ieee_single)
	(floatformat_ieee_double, floatformat_arm_ext)
	(floatformat_ia64_spill, floatformat_ia64_quad): Declare.
@
text
@d436 3
a438 1
   If STORAGE is non-NULL, create the new type instance there.  */
d458 6
a511 4
   TYPEPTR, if nonzero, points
   to a pointer to memory where the reference type should be stored.
   If *TYPEPTR is zero, update it to point to the reference type we return.
   We allocate new memory if needed.  */
d513 5
d536 13
a548 14
      /* Objfile is per-core-type.  This const-qualified type had best
	 belong to the same objfile as the type it is qualifying, unless
	 we are overwriting a stub type, in which case the safest thing
	 to do is to copy the core type into the new objfile.  */

      gdb_assert (TYPE_OBJFILE (*typeptr) == TYPE_OBJFILE (type)
		  || TYPE_STUB (*typeptr));
      if (TYPE_OBJFILE (*typeptr) != TYPE_OBJFILE (type))
	{
	  TYPE_MAIN_TYPE (*typeptr)
	    = TYPE_ALLOC (*typeptr, sizeof (struct main_type));
	  *TYPE_MAIN_TYPE (*typeptr)
	    = *TYPE_MAIN_TYPE (type);
	}
d573 6
d1433 1
d1435 16
a1450 1
	make_cv_type (is_const, is_volatile, newtype, &type);
@


1.91
log
@2004-08-07  Andrew Cagney  <cagney@@gnu.org>

	* gdbtypes.c (build_flt, build_complex): New functions.
	(gdbtypes_post_init): Use.
@
text
@d100 1
d103 1
d112 1
d115 1
d118 1
d3585 8
d3601 8
d3641 8
d3657 8
d3673 8
@


1.90
log
@2004-08-07  Andrew Cagney  <cagney@@gnu.org>

	* gdbtypes.c (_initialize_gdbtypes): Do not swap builtin_type_int8
	through to builtin_type_uint128.
@
text
@d3315 31
d3405 15
a3419 25
  builtin_type->builtin_float =
    init_type (TYPE_CODE_FLT, TARGET_FLOAT_BIT / TARGET_CHAR_BIT,
	       0,
	       "float", (struct objfile *) NULL);
  TYPE_FLOATFORMAT (builtin_type->builtin_float) = TARGET_FLOAT_FORMAT;
  builtin_type->builtin_double =
    init_type (TYPE_CODE_FLT, TARGET_DOUBLE_BIT / TARGET_CHAR_BIT,
	       0,
	       "double", (struct objfile *) NULL);
  TYPE_FLOATFORMAT (builtin_type->builtin_double) = TARGET_DOUBLE_FORMAT;
  builtin_type->builtin_long_double =
    init_type (TYPE_CODE_FLT, TARGET_LONG_DOUBLE_BIT / TARGET_CHAR_BIT,
	       0,
	       "long double", (struct objfile *) NULL);
  TYPE_FLOATFORMAT (builtin_type->builtin_long_double) = TARGET_LONG_DOUBLE_FORMAT;
  builtin_type->builtin_complex =
    init_type (TYPE_CODE_COMPLEX, 2 * TARGET_FLOAT_BIT / TARGET_CHAR_BIT,
	       0,
	       "complex", (struct objfile *) NULL);
  TYPE_TARGET_TYPE (builtin_type->builtin_complex) = builtin_type->builtin_float;
  builtin_type->builtin_double_complex =
    init_type (TYPE_CODE_COMPLEX, 2 * TARGET_DOUBLE_BIT / TARGET_CHAR_BIT,
	       0,
	       "double complex", (struct objfile *) NULL);
  TYPE_TARGET_TYPE (builtin_type->builtin_double_complex) = builtin_type->builtin_double;
@


1.89
log
@2004-08-07  Andrew Cagney  <cagney@@gnu.org>

	* gdbtypes.h (struct builtin_type): Delete builtin_int0 through to
	builtin_uint128.
	* gdbtypes.c (gdbtypes_post_init): Update.
	(build_gdbtypes): Move initialization of builtin_type_int0
	through to builtin_type_uint128 from here ...
	(_initialize_gdbtypes): ... to here.
	* d10v-tdep.c (d10v_register_type): Update.
@
text
@a3523 10
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_int8);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_uint8);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_int16);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_uint16);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_int32);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_uint32);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_int64);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_uint64);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_int128);
  DEPRECATED_REGISTER_GDBARCH_SWAP (builtin_type_uint128);
@


1.88
log
@2004-07-28  Andrew Cagney  <cagney@@gnu.org>

	* gdbtypes.c (lookup_primitive_typename): Delete function.
	* gdbtypes.h (lookup_primitive_typename): Delete declaration.
	* ada-lex.l: Use language_lookup_primitive_type_by_name.
	* gdbtypes.c (lookup_typename): Ditto.
	* f-exp.y (yylex): Ditto.
	* c-exp.y (yylex): Ditto, eliminate assignment in "if".
@
text
@a3217 44
  builtin_type_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
  builtin_type_int8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       0,
	       "int8_t", (struct objfile *) NULL);
  builtin_type_uint8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint8_t", (struct objfile *) NULL);
  builtin_type_int16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       0,
	       "int16_t", (struct objfile *) NULL);
  builtin_type_uint16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint16_t", (struct objfile *) NULL);
  builtin_type_int32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       0,
	       "int32_t", (struct objfile *) NULL);
  builtin_type_uint32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint32_t", (struct objfile *) NULL);
  builtin_type_int64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       0,
	       "int64_t", (struct objfile *) NULL);
  builtin_type_uint64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint64_t", (struct objfile *) NULL);
  builtin_type_int128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       0,
	       "int128_t", (struct objfile *) NULL);
  builtin_type_uint128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint128_t", (struct objfile *) NULL);
a3402 44
  builtin_type->builtin_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
  builtin_type->builtin_int8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       0,
	       "int8_t", (struct objfile *) NULL);
  builtin_type->builtin_uint8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint8_t", (struct objfile *) NULL);
  builtin_type->builtin_int16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       0,
	       "int16_t", (struct objfile *) NULL);
  builtin_type->builtin_uint16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint16_t", (struct objfile *) NULL);
  builtin_type->builtin_int32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       0,
	       "int32_t", (struct objfile *) NULL);
  builtin_type->builtin_uint32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint32_t", (struct objfile *) NULL);
  builtin_type->builtin_int64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       0,
	       "int64_t", (struct objfile *) NULL);
  builtin_type->builtin_uint64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint64_t", (struct objfile *) NULL);
  builtin_type->builtin_int128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       0,
	       "int128_t", (struct objfile *) NULL);
  builtin_type->builtin_uint128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint128_t", (struct objfile *) NULL);
d3453 46
@


1.87
log
@2004-07-28  Andrew Cagney  <cagney@@gnu.org>

	* gdbtypes.h (struct builtin_type): Rename true_char to
	builtin_true_char.
	* gdbtypes.c (gdbtypes_post_init): Update.
	* c-lang.c (arch_info): New function.
	(enum c_primitive_types): New enum.
	(c_language_defn): Instead of string_char_type and
	primitive_type_vector set la_language_arch_info.
@
text
@a1032 11
/* Lookup a primitive type named NAME. 
   Return zero if NAME is not a primitive type. */

struct type *
lookup_primitive_typename (char *name)
{
  return language_lookup_primitive_type_by_name (current_language,
						 current_gdbarch,
						 name);
}

d1046 3
a1048 1
      tmp = lookup_primitive_typename (name);
@


1.86
log
@2004-07-28  Andrew Cagney  <cagney@@gnu.org>

	* language.h (struct language_arch_info): Fix typo
	s/primative/primitive/.
	* gdbtypes.c (lookup_primitive_typename): Ditto.
	* language.c (language_lookup_primitive_type_by_name)
	(unknown_language_arch_info): Ditto.
@
text
@d3383 1
a3383 1
  builtin_type->true_char =
@


1.85
log
@2004-07-27  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (enum language): Add nr_languages.
	* language.h (struct language_arch_info): Define.
	(struct language_defn): Add la_language_arch_info.
	(language_lookup_primative_type_by_name): Declare.
	(language_string_char_type): Declare.
	* language.c (_initialize_language, language_gdbarch_post_init)
	(struct language_gdbarch, language_gdbarch_data): Implement
	per-architecture language information.
	(unknown_language_arch_info, language_string_char_type)
	(language_lookup_primative_type_by_name): New functions.
	(unknown_language_defn, auto_language_defn)
	(local_language_defn): Set la_language_arch_info to
	unknown_language_arch_info.
	(unknown_builtin_types): Delete.
	* gdbtypes.c (lookup_primitive_typename): Use
	language_lookup_primative_type_by_name.
	(create_string_type): Use language_string_char_type.
	* values.c (value_from_string): Use language_string_char_type.
	* scm-lang.c (scm_language_defn): Add NULL la_language_arch_info.
	* p-lang.c (pascal_language_defn): Ditto.
	* m2-lang.c (m2_language_defn): Ditto.
	* jv-lang.c (java_language_defn): Ditto.
	* objc-lang.c (objc_language_defn): Ditto.
	* f-lang.c (f_language_defn): Ditto.
	* c-lang.c (c_language_defn, cplus_language_defn)
	(asm_language_defn, minimal_language_defn): Ditto.
@
text
@d1039 1
a1039 1
  return language_lookup_primative_type_by_name (current_language,
@


1.84
log
@2004-07-27  Andrew Cagney  <cagney@@gnu.org>

	* gdbtypes.h (struct builtin_type): Declare.
	(builtin_type): Declare.
	* d10v-tdep.c (d10v_register_type): Use builtin_type.
	* gdbtypes.c (_initialize_gdbtypes): Register gdbtypes_post_init.
	(gdbtypes_post_init): New function.
	(builtin_type): New function.
@
text
@d777 4
d782 1
a782 1
				   *current_language->string_char_type,
d1039 3
a1041 10
  struct type **const *p;

  for (p = current_language->la_builtin_type_vector; *p != NULL; p++)
    {
      if (strcmp (TYPE_NAME (**p), name) == 0)
	{
	  return (**p);
	}
    }
  return (NULL);
@


1.83
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (deprecated_add_show_from_set): Deprecate.
	* xcoffsolib.c (_initialize_xcoffsolib): Update.
	* wince.c (_initialize_wince): Update.
	* win32-nat.c (_initialize_win32_nat): Update.
	* varobj.c (_initialize_varobj): Update.
	* valops.c (_initialize_valops): Update.
	* utils.c (initialize_utils, initialize_utils): Update.
	* tui/tui-win.c (_initialize_tui_win): Update.
	* top.c (init_main): Update.
	* symfile.c (_initialize_symfile): Update.
	* source.c (_initialize_source): Update.
	* somsolib.c (_initialize_som_solib): Update.
	* solib.c (_initialize_solib): Update.
	* solib-frv.c (_initialize_frv_solib): Update.
	* serial.c (_initialize_serial): Update.
	* ser-go32.c (_initialize_ser_dos, _initialize_ser_dos): Update.
	* remote.c (_initialize_remote, _initialize_remote): Update.
	* remote-vx.c (_initialize_vx): Update.
	* remote-utils.c (_initialize_sr_support): Update.
	* remote-sds.c (_initialize_remote_sds): Update.
	* remote-mips.c (_initialize_remote_mips): Update.
	* remote-e7000.c (_initialize_remote_e7000): Update.
	* proc-api.c (_initialize_proc_api): Update.
	* printcmd.c: Update.
	* parse.c (_initialize_parse): Update.
	* pa64solib.c (_initialize_pa64_solib): Update.
	* p-valprint.c (_initialize_pascal_valprint): Update.
	* monitor.c (_initialize_remote_monitors): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* maint.c (_initialize_maint_cmds): Update.
	* lin-lwp.c (_initialize_lin_lwp): Update.
	* language.c (_initialize_language): Update.
	* kod.c (_initialize_kod): Update.
	* infrun.c (set_schedlock_func, _initialize_infrun): Update.
	* i386-tdep.c (_initialize_i386_tdep): Update.
	* gdbtypes.c (build_gdbtypes, _initialize_gdbtypes): Update.
	* gdbarch.sh: Update.
	* gdbarch.c: Re-generate.
	* gdb-events.sh: Update.
	* gdb-events.c: Re-generate.
	* frame.c (_initialize_frame): Update.
	* exec.c: Update.
	* demangle.c (_initialize_demangler): Update.
	* dcache.c (_initialize_dcache): Update.
	* cris-tdep.c (_initialize_cris_tdep, cris_version_update): Update.
	* cp-valprint.c (_initialize_cp_valprint): Update.
	* corefile.c (_initialize_core): Update.
	* command.h: Update.
	* cli/cli-decode.h: Update.
	* cli/cli-cmds.c (init_cli_cmds): Update.
	* charset.c (_initialize_charset): Update.
	* breakpoint.c (_initialize_breakpoint): Update.
	* arm-tdep.c (_initialize_arm_tdep_initialize_arm_tdep): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.
	* aix-thread.c (_initialize_aix_thread): Update.
@
text
@d3363 185
d3555 2
@


1.82
log
@	* arm-tdep.c (arm_use_struct_convention): Look through typedefs.
	* gdbtypes.c (check_typedef): Update comments.
@
text
@d3280 1
a3280 1
  add_show_from_set
d3493 5
a3497 6
  add_show_from_set (
		     add_set_cmd ("overload", no_class, var_zinteger, (char *) &overload_debug,
				  "Set debugging of C++ overloading.\n\
			  When enabled, ranking of the functions\n\
			  is displayed.", &setdebuglist),
		     &showdebuglist);
@


1.82.10.1
log
@gdb/ChangeLog:
2005-03-17  Jim Blandy  <jimb@@redhat.com>

	* gdbtypes.c (build_builtin_type_vec64): Include a 'double' member
	in the union, too, since these registers can hold 64-bit floating
	point types.

gdb/testsuite/ChangeLog:
2005-03-17  Jim Blandy  <jimb@@redhat.com>

	* gdb.arch/e500-regs.exp: Expect to see 'dbl' members in ev
	registers.
@
text
@a860 1
    double dbl;
a871 1
  append_composite_type_field (t, "dbl", builtin_type_double);
@


1.81
log
@2004-02-15  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (deprecated_register_gdbarch_swap): Rename
	register_gdbarch_swap.
	(DEPRECATED_REGISTER_GDBARCH_SWAP): Rename REGISTER_GDBARCH_SWAP.
	* f-lang.c (_initialize_f_language): Update, use
	DEPRECATED_REGISTER_GDBARCH_SWAP.
	* remote.c (_initialize_remote): Ditto.
	* regcache.c (_initialize_regcache): Ditto.
	* parse.c (_initialize_parse): Ditto.
	* infrun.c (_initialize_infrun): Ditto.
	* mi/mi-main.c (_initialize_mi_main): Ditto.
	* gdbtypes.c (_initialize_gdbtypes): Ditto.
@
text
@d1346 6
d1365 4
a1368 5
static void
stub_noname_complaint (void)
{
  complaint (&symfile_complaints, "stub type has NULL name");
}
@


1.81.2.1
log
@Merge mainline to intercu branch.
@
text
@a1345 6
static void
stub_noname_complaint (void)
{
  complaint (&symfile_complaints, "stub type has NULL name");
}

d1359 5
a1363 4
/* Find the real type of TYPE.  This function returns the real type, after
   removing all layers of typedefs and completing opaque or stub types.
   Completion changes the TYPE argument, but stripping of typedefs does
   not.  */
@


1.81.2.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a99 1
struct type *builtin_type_ieee_single[BFD_ENDIAN_UNKNOWN];
a101 1
struct type *builtin_type_ieee_double[BFD_ENDIAN_UNKNOWN];
a109 1
struct type *builtin_type_arm_ext[BFD_ENDIAN_UNKNOWN];
a111 1
struct type *builtin_type_ia64_spill[BFD_ENDIAN_UNKNOWN];
a113 1
struct type *builtin_type_ia64_quad[BFD_ENDIAN_UNKNOWN];
a776 4
  struct type *string_char_type;
      
  string_char_type = language_string_char_type (current_language,
						current_gdbarch);
d778 1
a778 1
				   string_char_type,
d1029 18
d1060 1
a1060 3
      tmp = language_lookup_primitive_type_by_name (current_language,
						    current_gdbarch,
						    name);
d3230 44
d3280 1
a3280 1
  deprecated_add_show_from_set
a3362 162
static struct gdbarch_data *gdbtypes_data;

const struct builtin_type *
builtin_type (struct gdbarch *gdbarch)
{
  return gdbarch_data (gdbarch, gdbtypes_data);
}


static struct type *
build_flt (int bit, char *name, const struct floatformat *floatformat)
{
  struct type *t;
  if (bit <= 0 || floatformat == NULL)
    {
      gdb_assert (builtin_type_error != NULL);
      return builtin_type_error;
    }
  t = init_type (TYPE_CODE_FLT, bit / TARGET_CHAR_BIT,
		 0, name, (struct objfile *) NULL);
  TYPE_FLOATFORMAT (t) = floatformat;
  return t;
}

static struct type *
build_complex (int bit, char *name, struct type *target_type)
{
  struct type *t;
  if (bit <= 0 || target_type == builtin_type_error)
    {
      gdb_assert (builtin_type_error != NULL);
      return builtin_type_error;
    }
  t = init_type (TYPE_CODE_COMPLEX, 2 * bit / TARGET_CHAR_BIT,
		 0, name, (struct objfile *) NULL);
  TYPE_TARGET_TYPE (t) = target_type;
  return t;
}

static void *
gdbtypes_post_init (struct gdbarch *gdbarch)
{
  struct builtin_type *builtin_type
    = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct builtin_type);

  builtin_type->builtin_void =
    init_type (TYPE_CODE_VOID, 1,
	       0,
	       "void", (struct objfile *) NULL);
  builtin_type->builtin_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       (TYPE_FLAG_NOSIGN
                | (TARGET_CHAR_SIGNED ? 0 : TYPE_FLAG_UNSIGNED)),
	       "char", (struct objfile *) NULL);
  builtin_type->builtin_true_char =
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "true character", (struct objfile *) NULL);
  builtin_type->builtin_signed_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "signed char", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_char =
    init_type (TYPE_CODE_INT, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned char", (struct objfile *) NULL);
  builtin_type->builtin_short =
    init_type (TYPE_CODE_INT, TARGET_SHORT_BIT / TARGET_CHAR_BIT,
	       0,
	       "short", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_short =
    init_type (TYPE_CODE_INT, TARGET_SHORT_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned short", (struct objfile *) NULL);
  builtin_type->builtin_int =
    init_type (TYPE_CODE_INT, TARGET_INT_BIT / TARGET_CHAR_BIT,
	       0,
	       "int", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_int =
    init_type (TYPE_CODE_INT, TARGET_INT_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned int", (struct objfile *) NULL);
  builtin_type->builtin_long =
    init_type (TYPE_CODE_INT, TARGET_LONG_BIT / TARGET_CHAR_BIT,
	       0,
	       "long", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_long =
    init_type (TYPE_CODE_INT, TARGET_LONG_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned long", (struct objfile *) NULL);
  builtin_type->builtin_long_long =
    init_type (TYPE_CODE_INT, TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT,
	       0,
	       "long long", (struct objfile *) NULL);
  builtin_type->builtin_unsigned_long_long =
    init_type (TYPE_CODE_INT, TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT,
	       TYPE_FLAG_UNSIGNED,
	       "unsigned long long", (struct objfile *) NULL);
  builtin_type->builtin_float
    = build_flt (gdbarch_float_bit (gdbarch), "float",
		 gdbarch_float_format (gdbarch));
  builtin_type->builtin_double
    = build_flt (gdbarch_double_bit (gdbarch), "double",
		 gdbarch_double_format (gdbarch));
  builtin_type->builtin_long_double
    = build_flt (gdbarch_long_double_bit (gdbarch), "long double",
		 gdbarch_long_double_format (gdbarch));
  builtin_type->builtin_complex
    = build_complex (gdbarch_float_bit (gdbarch), "complex",
		     builtin_type->builtin_float);
  builtin_type->builtin_double_complex
    = build_complex (gdbarch_double_bit (gdbarch), "double complex",
		     builtin_type->builtin_double);
  builtin_type->builtin_string =
    init_type (TYPE_CODE_STRING, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "string", (struct objfile *) NULL);
  builtin_type->builtin_bool =
    init_type (TYPE_CODE_BOOL, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "bool", (struct objfile *) NULL);

  /* Pointer/Address types. */

  /* NOTE: on some targets, addresses and pointers are not necessarily
     the same --- for example, on the D10V, pointers are 16 bits long,
     but addresses are 32 bits long.  See doc/gdbint.texinfo,
     ``Pointers Are Not Always Addresses''.

     The upshot is:
     - gdb's `struct type' always describes the target's
       representation.
     - gdb's `struct value' objects should always hold values in
       target form.
     - gdb's CORE_ADDR values are addresses in the unified virtual
       address space that the assembler and linker work with.  Thus,
       since target_read_memory takes a CORE_ADDR as an argument, it
       can access any memory on the target, even if the processor has
       separate code and data address spaces.

     So, for example:
     - If v is a value holding a D10V code pointer, its contents are
       in target form: a big-endian address left-shifted two bits.
     - If p is a D10V pointer type, TYPE_LENGTH (p) == 2, just as
       sizeof (void *) == 2 on the target.

     In this context, builtin_type->CORE_ADDR is a bit odd: it's a
     target type for a value the target will never see.  It's only
     used to hold the values of (typeless) linker symbols, which are
     indeed in the unified virtual address space.  */
  builtin_type->builtin_data_ptr
    = make_pointer_type (builtin_type->builtin_void, NULL);
  builtin_type->builtin_func_ptr
    = lookup_pointer_type (lookup_function_type (builtin_type->builtin_void));
  builtin_type->builtin_core_addr =
    init_type (TYPE_CODE_INT, TARGET_ADDR_BIT / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__CORE_ADDR", (struct objfile *) NULL);

  return builtin_type;
}

a3367 46

  builtin_type_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
  builtin_type_int8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       0,
	       "int8_t", (struct objfile *) NULL);
  builtin_type_uint8 =
    init_type (TYPE_CODE_INT, 8 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint8_t", (struct objfile *) NULL);
  builtin_type_int16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       0,
	       "int16_t", (struct objfile *) NULL);
  builtin_type_uint16 =
    init_type (TYPE_CODE_INT, 16 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint16_t", (struct objfile *) NULL);
  builtin_type_int32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       0,
	       "int32_t", (struct objfile *) NULL);
  builtin_type_uint32 =
    init_type (TYPE_CODE_INT, 32 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint32_t", (struct objfile *) NULL);
  builtin_type_int64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       0,
	       "int64_t", (struct objfile *) NULL);
  builtin_type_uint64 =
    init_type (TYPE_CODE_INT, 64 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint64_t", (struct objfile *) NULL);
  builtin_type_int128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       0,
	       "int128_t", (struct objfile *) NULL);
  builtin_type_uint128 =
    init_type (TYPE_CODE_INT, 128 / 8,
	       TYPE_FLAG_UNSIGNED,
	       "uint128_t", (struct objfile *) NULL);

a3369 2
  gdbtypes_data = gdbarch_data_register_post_init (gdbtypes_post_init);

d3391 10
a3435 8
  builtin_type_ieee_single[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ieee_single_big.totalsize,
		 "builtin_type_ieee_single_big",
		 &floatformat_ieee_single_big);
  builtin_type_ieee_single[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ieee_single_little.totalsize,
		 "builtin_type_ieee_single_little",
		 &floatformat_ieee_single_little);
a3443 8
  builtin_type_ieee_double[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ieee_double_big.totalsize,
		 "builtin_type_ieee_double_big",
		 &floatformat_ieee_double_big);
  builtin_type_ieee_double[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ieee_double_little.totalsize,
		 "builtin_type_ieee_double_little",
		 &floatformat_ieee_double_little);
a3475 8
  builtin_type_arm_ext[BFD_ENDIAN_BIG]
    = build_flt (floatformat_arm_ext_big.totalsize,
		 "builtin_type_arm_ext_big",
		 &floatformat_arm_ext_big);
  builtin_type_arm_ext[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_arm_ext_littlebyte_bigword.totalsize,
		 "builtin_type_arm_ext_littlebyte_bigword",
		 &floatformat_arm_ext_littlebyte_bigword);
a3483 8
  builtin_type_ia64_spill[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ia64_spill_big.totalsize,
		 "builtin_type_ia64_spill_big",
		 &floatformat_ia64_spill_big);
  builtin_type_ia64_spill[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ia64_spill_little.totalsize,
		 "builtin_type_ia64_spill_little",
		 &floatformat_ia64_spill_little);
d3492 7
a3498 14
  builtin_type_ia64_quad[BFD_ENDIAN_BIG]
    = build_flt (floatformat_ia64_quad_big.totalsize,
		 "builtin_type_ia64_quad_big",
		 &floatformat_ia64_quad_big);
  builtin_type_ia64_quad[BFD_ENDIAN_LITTLE]
    = build_flt (floatformat_ia64_quad_little.totalsize,
		 "builtin_type_ia64_quad_little",
		 &floatformat_ia64_quad_little);

  deprecated_add_show_from_set
    (add_set_cmd ("overload", no_class, var_zinteger, (char *) &overload_debug,
		  "Set debugging of C++ overloading.\n\
When enabled, ranking of the functions is displayed.", &setdebuglist),
     &showdebuglist);
@


1.81.4.1
log
@	* arm-tdep.c (arm_use_struct_convention): Look through typedefs.
	* gdbtypes.c (check_typedef): Update comments.
@
text
@a1345 6
static void
stub_noname_complaint (void)
{
  complaint (&symfile_complaints, "stub type has NULL name");
}

d1359 5
a1363 4
/* Find the real type of TYPE.  This function returns the real type, after
   removing all layers of typedefs and completing opaque or stub types.
   Completion changes the TYPE argument, but stripping of typedefs does
   not.  */
@


1.80
log
@2004-02-07  Elena Zannoni  <ezannoni@@redhat.com>

        * objfiles.h (struct objfile): Add objfile_obstack field.
        Remove type_obstack field.

        * dwarf2read.c (dwarf2_add_field,dwarf2_add_member_fn,
        read_structure_scope read_enumeration, new_symbol): Replace
        type_obstack with objfile_obstack.
        * dwarfread.c (struct_type, enum_type): Ditto.
        * gdbtypes.c (alloc_type, alloc_type_instance, init_type)
        (lookup_fundamental_type): Ditto.
        * gdbtypes.h (TYPE_ALLOC): Ditto.
        * hpread.c (hpread_read_enum_type, hpread_read_function_type)
        (hpread_read_doc_function_type, hpread_read_struct_type)
        (fix_static_member_physnames, hpread_read_array_type)
        (hpread_read_subrange_type, hpread_type_lookup): Ditto.
        * jv-lang.c (java_lookup_class, type_from_class, type_from_class)
        (java_link_class_type): Ditto.
        * mdebugread.c (parse_type): Ditto.
        * objfiles.c (allocate_objfile, free_objfile): Ditto.
        * solib-sunos.c (solib_add_common_symbols): Ditto.
        * stabsread.c (define_symbol, read_type, read_member_functions,
        read_cpp_abbrev, read_one_struct_field): Ditto.
        * symfile.c (reread_symbols): Ditto.
        * symmisc.c (print_objfile_statistics): Ditto.
@
text
@d3368 52
a3419 52
  register_gdbarch_swap (&builtin_type_void, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_char, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_short, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_long_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_signed_char, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_char, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_short, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_int, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_long_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_float, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_double, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_long_double, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_complex, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_double_complex, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_string, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int8, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint8, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int16, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint16, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int32, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint32, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int64, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint64, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int128, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint128, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v4sf, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v4si, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v16qi, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v8qi, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v8hi, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v4hi, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v2si, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v2_double, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v4_float, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v2_int64, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v4_int32, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v8_int16, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v16_int8, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v2_float, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v2_int32, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v8_int8, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v4_int16, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_vec128, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_vec128i, sizeof (struct type *), NULL);
  REGISTER_GDBARCH_SWAP (builtin_type_void_data_ptr);
  REGISTER_GDBARCH_SWAP (builtin_type_void_func_ptr);
  REGISTER_GDBARCH_SWAP (builtin_type_CORE_ADDR);
  REGISTER_GDBARCH_SWAP (builtin_type_bfd_vma);
  register_gdbarch_swap (NULL, 0, build_gdbtypes);
@


1.79
log
@2004-01-20  Andrew Cagney  <cagney@@redhat.com>

	* source.c (ambiguous_line_spec): Delete never-defined function.
	* remote-rdi.c (arm_rdi_mourn, arm_rdi_send): Ditto.
	* gdbtypes.c (add_name, add_mangled_type): Ditto.
	* cli/cli-cmds.c (validate_comname): Ditto.
@
text
@d2 2
a3 2
   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
d139 1
a139 1
   in that objfile's type_obstack.  Otherwise allocate the new type structure
d157 1
a157 1
      type = obstack_alloc (&objfile->type_obstack,
d160 1
a160 1
      TYPE_MAIN_TYPE (type) = obstack_alloc (&objfile->type_obstack,
d194 1
a194 1
      type = obstack_alloc (&TYPE_OBJFILE (oldtype)->type_obstack,
d1678 1
a1678 1
   of the string pointed to by name in the type_obstack for that objfile,
d1695 1
a1695 1
	obsavestring (name, strlen (name), &objfile->type_obstack);
d1796 1
a1796 1
	obstack_alloc (&objfile->type_obstack, nbytes);
@


1.78
log
@2003-10-06  Andrew Cagney  <cagney@@redhat.com>

	* breakpoint.c, breakpoint.h: Remove obsolete code and comments.
	* buildsym.c, dbxread.c, gdbtypes.c, mdebugread.c: Ditto.
	* monitor.c, sparc-tdep.c, stabsread.c: Ditto.
	* stabsread.h, xcoffread.c: Ditto.
@
text
@a129 2
static void add_name (struct extra *, char *);
static void add_mangled_type (struct extra *, struct type *);
@


1.77
log
@2003-09-16  Andrew Cagney  <cagney@@redhat.com>

	* buildsym.c: Remove more occurances of "register".
	* coffread.c, dbxread.c, dcache.c, dwarf2read.c: Ditto.
	* environ.c, eval.c, f-valprint.c, findvar.c: Ditto.
	* gdbtypes.c, gnu-v2-abi.c, h8300-tdep.c, hppa-tdep.c: Ditto.
	* infcmd.c, mdebugread.c, minsyms.c, mips-tdep.c: Ditto.
	* printcmd.c, remote-vx.c, sh-stub.c, sh-tdep.c: Ditto.
	* sh64-tdep.c, source.c, stabsread.c, stack.c: Ditto.
	* standalone.c, symfile.c, symmisc.c, symtab.c: Ditto.
	* utils.c, valops.c, values.c, xcoffread.c: Ditto.
@
text
@a131 3
#if 0 /* OBSOLETE CFront */
// OBSOLETE static void cfront_mangle_name (struct type *, int, int);
#endif /* OBSOLETE CFront */
a1476 188

#if 0 /* OBSOLETE CFront */
// OBSOLETE  /* New code added to support parsing of Cfront stabs strings */
// OBSOLETE  #define INIT_EXTRA { pextras->len=0; pextras->str[0]='\0'; }
// OBSOLETE  #define ADD_EXTRA(c) { pextras->str[pextras->len++]=c; }

// OBSOLETE  static void
// OBSOLETE  add_name (struct extra *pextras, char *n)
// OBSOLETE  {
// OBSOLETE    int nlen;

// OBSOLETE    if ((nlen = (n ? strlen (n) : 0)) == 0)
// OBSOLETE      return;
// OBSOLETE    sprintf (pextras->str + pextras->len, "%d%s", nlen, n);
// OBSOLETE    pextras->len = strlen (pextras->str);
// OBSOLETE  }

// OBSOLETE  static void
// OBSOLETE  add_mangled_type (struct extra *pextras, struct type *t)
// OBSOLETE  {
// OBSOLETE    enum type_code tcode;
// OBSOLETE    int tlen, tflags;
// OBSOLETE    char *tname;

// OBSOLETE    tcode = TYPE_CODE (t);
// OBSOLETE    tlen = TYPE_LENGTH (t);
// OBSOLETE    tflags = TYPE_FLAGS (t);
// OBSOLETE    tname = TYPE_NAME (t);
// OBSOLETE    /* args of "..." seem to get mangled as "e" */

// OBSOLETE    switch (tcode)
// OBSOLETE      {
// OBSOLETE      case TYPE_CODE_INT:
// OBSOLETE        if (tflags == 1)
// OBSOLETE  	ADD_EXTRA ('U');
// OBSOLETE        switch (tlen)
// OBSOLETE  	{
// OBSOLETE  	case 1:
// OBSOLETE  	  ADD_EXTRA ('c');
// OBSOLETE  	  break;
// OBSOLETE  	case 2:
// OBSOLETE  	  ADD_EXTRA ('s');
// OBSOLETE  	  break;
// OBSOLETE  	case 4:
// OBSOLETE  	  {
// OBSOLETE  	    char *pname;
// OBSOLETE  	    if ((pname = strrchr (tname, 'l'), pname) && !strcmp (pname, "long"))
// OBSOLETE  	      {
// OBSOLETE  		ADD_EXTRA ('l');
// OBSOLETE  	      }
// OBSOLETE  	    else
// OBSOLETE  	      {
// OBSOLETE  		ADD_EXTRA ('i');
// OBSOLETE  	      }
// OBSOLETE  	  }
// OBSOLETE  	  break;
// OBSOLETE  	default:
// OBSOLETE  	  {
// OBSOLETE  	    complaint (&symfile_complaints, "Bad int type code length x%x",
// OBSOLETE  		       tlen);
// OBSOLETE  	  }
// OBSOLETE  	}
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_FLT:
// OBSOLETE        switch (tlen)
// OBSOLETE  	{
// OBSOLETE  	case 4:
// OBSOLETE  	  ADD_EXTRA ('f');
// OBSOLETE  	  break;
// OBSOLETE  	case 8:
// OBSOLETE  	  ADD_EXTRA ('d');
// OBSOLETE  	  break;
// OBSOLETE  	case 16:
// OBSOLETE  	  ADD_EXTRA ('r');
// OBSOLETE  	  break;
// OBSOLETE  	default:
// OBSOLETE  	  {
// OBSOLETE  	    complaint (&symfile_complaints, "Bad float type code length x%x",
// OBSOLETE  		       tlen);
// OBSOLETE  	  }
// OBSOLETE  	}
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_REF:
// OBSOLETE        ADD_EXTRA ('R');
// OBSOLETE        /* followed by what it's a ref to */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_PTR:
// OBSOLETE        ADD_EXTRA ('P');
// OBSOLETE        /* followed by what it's a ptr to */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_TYPEDEF:
// OBSOLETE        {
// OBSOLETE  	complaint (&symfile_complaints,
// OBSOLETE  	           "Typedefs in overloaded functions not yet supported");
// OBSOLETE        }
// OBSOLETE        /* followed by type bytes & name */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_FUNC:
// OBSOLETE        ADD_EXTRA ('F');
// OBSOLETE        /* followed by func's arg '_' & ret types */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_VOID:
// OBSOLETE        ADD_EXTRA ('v');
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_METHOD:
// OBSOLETE        ADD_EXTRA ('M');
// OBSOLETE        /* followed by name of class and func's arg '_' & ret types */
// OBSOLETE        add_name (pextras, tname);
// OBSOLETE        ADD_EXTRA ('F');		/* then mangle function */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_STRUCT:	/* C struct */
// OBSOLETE      case TYPE_CODE_UNION:	/* C union */
// OBSOLETE      case TYPE_CODE_ENUM:	/* Enumeration type */
// OBSOLETE        /* followed by name of type */
// OBSOLETE        add_name (pextras, tname);
// OBSOLETE        break;

// OBSOLETE        /* errors possible types/not supported */
// OBSOLETE      case TYPE_CODE_CHAR:
// OBSOLETE      case TYPE_CODE_ARRAY:	/* Array type */
// OBSOLETE      case TYPE_CODE_MEMBER:	/* Member type */
// OBSOLETE      case TYPE_CODE_BOOL:
// OBSOLETE      case TYPE_CODE_COMPLEX:	/* Complex float */
// OBSOLETE      case TYPE_CODE_UNDEF:
// OBSOLETE      case TYPE_CODE_SET:	/* Pascal sets */
// OBSOLETE      case TYPE_CODE_RANGE:
// OBSOLETE      case TYPE_CODE_STRING:
// OBSOLETE      case TYPE_CODE_BITSTRING:
// OBSOLETE      case TYPE_CODE_ERROR:
// OBSOLETE      default:
// OBSOLETE        {
// OBSOLETE  	complaint (&symfile_complaints, "Unknown type code x%x", tcode);
// OBSOLETE        }
// OBSOLETE      }
// OBSOLETE    if (TYPE_TARGET_TYPE (t))
// OBSOLETE      add_mangled_type (pextras, TYPE_TARGET_TYPE (t));
// OBSOLETE  }

// OBSOLETE  void
// OBSOLETE  cfront_mangle_name (struct type *type, int i, int j)
// OBSOLETE  {
// OBSOLETE    struct fn_field *f;
// OBSOLETE    char *mangled_name = gdb_mangle_name (type, i, j);

// OBSOLETE    f = TYPE_FN_FIELDLIST1 (type, i);	/* moved from below */

// OBSOLETE    /* kludge to support cfront methods - gdb expects to find "F" for 
// OBSOLETE       ARM_mangled names, so when we mangle, we have to add it here */
// OBSOLETE    if (ARM_DEMANGLING)
// OBSOLETE      {
// OBSOLETE        int k;
// OBSOLETE        char *arm_mangled_name;
// OBSOLETE        struct fn_field *method = &f[j];
// OBSOLETE        char *field_name = TYPE_FN_FIELDLIST_NAME (type, i);
// OBSOLETE        char *physname = TYPE_FN_FIELD_PHYSNAME (f, j);
// OBSOLETE        char *newname = type_name_no_tag (type);

// OBSOLETE        struct type *ftype = TYPE_FN_FIELD_TYPE (f, j);
// OBSOLETE        int nargs = TYPE_NFIELDS (ftype);		/* number of args */
// OBSOLETE        struct extra extras, *pextras = &extras;
// OBSOLETE        INIT_EXTRA

// OBSOLETE  	if (TYPE_FN_FIELD_STATIC_P (f, j))	/* j for sublist within this list */
// OBSOLETE  	ADD_EXTRA ('S')
// OBSOLETE  	  ADD_EXTRA ('F')
// OBSOLETE  	/* add args here! */
// OBSOLETE  	  if (nargs <= 1)	/* no args besides this */
// OBSOLETE  	  ADD_EXTRA ('v')
// OBSOLETE  	    else
// OBSOLETE  	  {
// OBSOLETE  	    for (k = 1; k < nargs; k++)
// OBSOLETE  	      {
// OBSOLETE  		struct type *t;
// OBSOLETE  		t = TYPE_FIELD_TYPE (ftype, k);
// OBSOLETE  		add_mangled_type (pextras, t);
// OBSOLETE  	      }
// OBSOLETE  	  }
// OBSOLETE        ADD_EXTRA ('\0')
// OBSOLETE  	printf ("add_mangled_type: %s\n", extras.str);	/* FIXME */
// OBSOLETE        xasprintf (&arm_mangled_name, "%s%s", mangled_name, extras.str);
// OBSOLETE        xfree (mangled_name);
// OBSOLETE        mangled_name = arm_mangled_name;
// OBSOLETE      }
// OBSOLETE  }

// OBSOLETE  #undef ADD_EXTRA
// OBSOLETE  /* End of new code added to support parsing of Cfront stabs strings */
#endif /* OBSOLETE CFront */
@


1.76
log
@2003-09-14  Andrew Cagney  <cagney@@redhat.com>

	* alpha-nat.c: Remove some occurances of "register".
	* alpha-tdep.c, arm-tdep.c, blockframe.c, breakpoint.c: Ditto.
	* buildsym.c, c-typeprint.c, c-valprint.c, coffread.c: Ditto.
	* corefile.c, cp-support.c, cp-valprint.c, cris-tdep.c: Ditto.
	* dbxread.c, dcache.c, dwarf2read.c, elfread.c: Ditto.
	* environ.c, eval.c, event-top.c, f-typeprint.c: Ditto.
	* f-valprint.c, findvar.c, frame.c, gdbtypes.c: Ditto.
	* h8300-tdep.c, hppa-tdep.c, hppab-nat.c, hppah-nat.c: Ditto.
	* hppam3-nat.c, hpread.c, ia64-aix-nat.c, ia64-linux-nat.c: Ditto.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Ditto.
	* infttrace.c, irix5-nat.c, jv-typeprint.c: Ditto.
	* jv-valprint.c, m68k-tdep.c, m68klinux-nat.c, main.c: Ditto.
	* mdebugread.c, minsyms.c, mips-linux-tdep.c: Ditto.
	* mips-nat.c, mips-tdep.c, mipsread.c, mipsv4-nat.c: Ditto.
	* ns32k-tdep.c, objfiles.c, p-typeprint.c: Ditto.
	* p-valprint.c, ppc-linux-nat.c, printcmd.c: Ditto.
	* remote-mips.c, remote-vx.c, rs6000-nat.c: Ditto.
	* rs6000-tdep.c, scm-exp.c, sh-tdep.c, sh64-tdep.c: Ditto.
	* solib.c, somread.c, source.c, sparc-tdep.c: Ditto.
	* stabsread.c, stack.c, standalone.c, symfile.c: Ditto.
	* symmisc.c, symtab.c, top.c, tracepoint.c: Ditto.
	* typeprint.c, utils.c, valarith.c, valops.c: Ditto.
	* values.c, vax-tdep.c, xcoffread.c: Ditto.
@
text
@d1023 1
a1023 1
type_name_no_tag (register const struct type *type)
@


1.75
log
@2003-09-11  David Carlton  <carlton@@kealia.com>

	* gdbtypes.h: Add TYPE_CODE_NAMESPACE.
	* gdbtypes.c (init_type): Handle TYPE_CODE_NAMESPACE.
	(recursive_dump_type): Ditto.
	* printcmd.c (print_formatted): Ditto.
	* typeprint.c (print_type_scalar): Ditto.
	* c-typeprint.c (c_type_print_varspec_prefix): Ditto.
	(c_type_print_varspec_suffix, c_type_print_base): Ditto.
	* cp-support.h: Declare cp_check_possible_namespace_symbols,
	maint_cplus_cmd_list.
	* cp-support.c: Make maint_cplus_cmd_list extern.
	* cp-namespace.c: Include objfiles.h, gdbtypes.h, dictionary.h,
	command.h.
	(lookup_symbol_file): Look in possible namespace blocks when
	appropriate.
	(initialize_namespace_symtab): New.
	(get_possible_namespace_block, free_namespace_block)
	(check_possible_namespace_symbols)
	(check_possible_namespace_symbols_loop)
	(check_one_possible_namespace_symbol)
	(lookup_possible_namespace_symbol, maintenance_cplus_namespace)
	(_initialize_cp_namespace): Ditto.
	* block.h: Declare allocate_block.
	* block.c (allocate_block): New.
	* jv-lang.c (get_java_class_symtab): Allocate blocks via
	allocate_block.
	* symfile.h: Update declaration of add_psymbol_to_list.
	* symfile.c (add_psymbol_to_list): Return the partial symbol in
	question.
	* dwarf2read.c (dwarf2_build_psymtabs_hard): Add argument to
	scan_partial_symbols_call.
	(scan_partial_symbols): Add NAMESPACE argument; update calls to
	helper functions.
	(add_partial_symbol): If necessary, scan mangled names for names
	of namespaces.
	(add_partial_namespace): Add NAMESPACE argument; generate partial
	symbols associated  to namespaces.
	(add_partial_enumeration): Add NAMESPACE argument.
	(new_symbol): Allow namespace syms.
	(read_namespace): Generate namespace syms.
	* objfiles.h: Add opaque declaration of struct symtab.
	(struct objfile): Add cp_namespace_symtab member.
	* objfiles.c (allocate_objfile): Set
	objfile->cp_namespace_symtab.
	* Makefile.in (cp-namespace.o): Depend on objfiles_h, gdbtypes_h,
	dictionary_h, command_h.

2003-09-11  David Carlton  <carlton@@kealia.com>

	* gdb.c++/namespace.exp: Add tests for namespace types.
	* gdb.c++/maint.exp (test_help): Test 'help maint cp namespace'.
	(test_namespace): New.
@
text
@d150 1
a150 1
  register struct type *type;
d231 1
a231 1
  register struct type *ntype;	/* New type */
d298 1
a298 1
  register struct type *ntype;	/* New type */
d360 1
a360 1
  register struct type *ntype;	/* New type */
d512 2
a513 2
  register struct type *ntype;	/* New type */
  register struct type *tmp_type = type;	/* tmp type */
d596 1
a596 1
  register struct type *mtype;
d1059 2
a1060 2
  register struct symbol *sym;
  register struct type *tmp;
d1113 1
a1113 1
  register struct symbol *sym;
d1135 1
a1135 1
  register struct symbol *sym;
d1167 1
a1167 1
  register struct symbol *sym;
d1879 1
a1879 1
  register struct type *type;
d1974 2
a1975 2
  register struct type **typep;
  register int nbytes;
d2069 1
a2069 1
  register int i;
d2112 1
a2112 1
  register int i;
d2141 1
a2141 1
  register int i;
d2198 3
a2200 3
  register struct vbase *tmp_vbase;
  register struct vbase *tmp_vbase_2;
  register int i;
d2235 2
a2236 2
  register int i;
  register struct vbase *tmp_vbase;
d2253 2
a2254 2
  register int i;
  register struct vbase *tmp_vbase;
d2282 2
a2283 2
  register struct type *vbase;
  register int i;
d2312 2
a2313 2
  register struct type *vbase;
  register int i, j;
@


1.74
log
@2003-06-23  Andrew Cagney  <cagney@@redhat.com>

	* rs6000-tdep.c (rs6000_register_virtual_type): Add explict cases
	for 0 "int0" and 4 "int32" sized registers.
	* gdbtypes.c (builtin_type_int0): Define.
	(build_gdbtypes): Initialize builtin_type_int0.
	* gdbtypes.h (builtin_type_int0): Declare.
@
text
@d1900 2
a1901 1
  if (code == TYPE_CODE_STRUCT || code == TYPE_CODE_UNION)
d3148 3
@


1.73
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* acinclude.m4 (gcc_AC_CHECK_DECL, (gcc_AC_CHECK_DECL): Stolen
	from GCC's acinclude.m4.
	* configure.in: Check for getopt's delcaration.
	* aclocal.m4, config.in, configure: Re-generate.
	* main.c (error_init): Delete declaration.
	* defs.h (error_init): Declare.
	* rs6000-tdep.c (rs6000_fetch_pointer_argument): Make static.
	(rs6000_convert_from_func_ptr_addr): Make static.
	(_initialize_rs6000_tdep): Add declaration.
	* cli/cli-cmds.c (dont_repeat): Delete declaration.
	(show_commands, set_verbose, show_history): Delete declaration.
	* top.h (set_verbose): Add declaration.
	(show_history, set_history, show_commands): Add declaration.
	(do_restore_instream_cleanup): Add declaration.
	* objc-lang.c (specialcmp): Make static.
	(print_object_command): Make static.
	(find_objc_msgsend): Make static.
	(find_objc_msgcall_submethod_helper): Make static.
	(find_objc_msgcall_submethod): Make static.
	(_initialize_objc_language): Add declaration.
	(find_implementation_from_class): Make static.
	(find_implementation): Make static.
	* objc-exp.y (yylex): Delete lookup_struct_typedef declaration.
	* objc-lang.h (lookup_struct_typedef): Add declaration.
	* cli/cli-interp.c (_initialize_cli_interp): Add declaration.
	* cli/cli-script.c (clear_hook_in_cleanup): Make static.
	(do_restore_user_call_depth): Make static.
	(do_restore_instream_cleanup): Delete declaration.
	(dont_repeat): Delete declaration.
	* cli/cli-decode.c (add_abbrev_cmd): Delete function.
	* cli/cli-dump.c (_initialize_cli_dump): Add declaration.
	* reggroups.c (_initialize_reggroup): Add declaration.
	* cp-support.c (_initialize_cp_support): Add declaration.
	* cp-abi.c (_initialize_cp_abi): Add declaration.
	* hpacc-abi.c (_initialize_hpacc_abi): Add declaration.
	* gnu-v3-abi.c (gnuv3_baseclass_offset): Make static.
	(_initialize_gnu_v3_abi): Add declaration.
	* gnu-v2-abi.c (gnuv2_value_rtti_type): Make static.
	(_initialize_gnu_v2_abi): Add declaration.
	* frame-base.c (_initialize_frame_base): Add declaration.
	* doublest.c (floatformat_from_length): Make static.
	* frame-unwind.c (_initialize_frame_unwind): Add declaration.
	* frame.c (create_sentinel_frame): Make static.
	(_initialize_frame): Add declaration.
	* top.c (do_catch_errors): Make static.
	(gdb_rl_operate_and_get_next_completion): Make static.
	* typeprint.c: Include "typeprint.h".
	* sentinel-frame.c (sentinel_frame_prev_register): Make static.
	(sentinel_frame_this_id): Make static.
	* p-valprint.c (_initialize_pascal_valprint): Add declaration.
	* ui-out.c (make_cleanup_ui_out_begin_end): Delete function.
	* dwarf2-frame.c (dwarf2_frame_cache): Make static.
	* p-exp.y (push_current_type, pop_current_type): ISO C declaration.
	* dwarf2expr.h (dwarf_expr_context): ISO C declaration.
	* maint.c (maintenance_print_architecture): Make static.
	* signals/signals.c (_initialize_signals): Add declaration.
	* std-regs.c (_initialize_frame_reg): Add declaration.
	* jv-exp.y (push_variable): ISO C definition.
	(push_qualified_expression_name): Ditto.
	* memattr.c (_initialize_mem): Add declaration.
	* remote.c (remote_check_watch_resources): Make static.
	(remote_stopped_by_watchpoint): Make static.
	(remote_stopped_data_address): Make static.
	* d10v-tdep.c (nr_dmap_regs): Make static.
	(a0_regnum): Make static.
	(d10v_frame_unwind_cache): Make static.
	(d10v_frame_p): Make static.
	* osabi.c (show_osabi): Make static.
	(_initialize_gdb_osabi): Add extern declaration.
	* gdbtypes.c (make_qualified_type): Make static.
	(safe_parse_type): Make static.
	* macrocmd.c (_initialize_macrocmd): Add extern declaration.
	* macrotab.c (macro_bcache_free): Make static.
	* interps.c (interp_set_quiet): Make static.
	(interpreter_exec_cmd): Make static.
	* stack.h (select_frame_command): New file.
	* stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete function.
	(select_frame_command): Make global.
	* infcall.c: Include "infcall.h".
	* linespec.c: Include "linespec.h".
	* symfile.c (sections_overlap): Make static.
	* cp-support.h (cp_initialize_namespace): ISO C declaration.
	* charset.c (_initialize_charset): Add missing prototype.
	* regcache.c (init_legacy_regcache_descr): Make static.
	(do_regcache_xfree): Make static.
	(regcache_xfer_part): Make static.
	(_initialize_regcache): Add missing prototype.
	* breakpoint.c (parse_breakpoint_sals): Make static.
	(breakpoint_sals_to_pc): Make static.
	* interps.h (clear_interpreter_hooks): ISO C declaration.
	* Makefile.in (stack_h): Define.
	(stack.o, typeprint.o, mi-main.o): Update dependencies.
	(mi-cmd-stack.o, infcall.o, linespec.o): Update dependencies.

Index: mi/ChangeLog
2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* mi-parse.c (_initialize_mi_parse): Delete function.
	* mi-main.c: Include "mi-main.h".
	* mi-interp.c (_initialize_mi_interp): Add declaration.
	* mi-cmd-stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete extern declaration.
	(mi_cmd_stack_select_frame): Replace select_frame_command_wrapper
	with select_frame_command.
@
text
@d63 1
d3414 4
@


1.73.4.1
log
@2003-06-23  Andrew Cagney  <cagney@@redhat.com>

	* rs6000-tdep.c (rs6000_register_virtual_type): Add explict cases
	for 0 "int0" and 4 "int32" sized registers.
	* gdbtypes.c (builtin_type_int0): Define.
	(build_gdbtypes): Initialize builtin_type_int0.
	* gdbtypes.h (builtin_type_int0): Declare.
@
text
@a62 1
struct type *builtin_type_int0;
a3412 4
  builtin_type_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
@


1.72
log
@2003-05-14  Elena Zannoni  <ezannoni@@redhat.com>

	* symtab.h (enum domain_enum): Rename from namespace_enum.
	(UNDEF_DOMAIN, VAR_DOMAIN, STRUCT_DOMAIN, LABEL_DOMAIN,
	VARIABLES_DOMAIN, FUNCTIONS_DOMAIN, TYPES_DOMAIN, METHODS_DOMAIN):
	Rename from UNDEF_NAMESPACE, VAR_NAMESPACE, STRUCT_NAMESPACE,
	LABEL_NAMESPACE, VARIABLES_NAMESPACE, FUNCTIONS_NAMESPACE,
	TYPES_NAMESPACE, METHODS_NAMESPACE.
	(SYMBOL_NAMESPACE): Rename to SYMBOL_DOMAIN.
	(struct symbol, struct partial_symbol): Rename field
	'namespace_enum namespace' to 'domain_enum domain'.
	(PSYMBOL_NAMESPACE): Rename to PSYMBOL_DOMAIN.
	Delete old define kludge for namespace.

	* ada-exp.y, ada-lang.c, ada-lang.h, alpha-tdep.c, arm-tdep.c,
	blockframe.c, c-exp.y, c-valprint.c, coffread.c, dbxread.c,
	dwarf2read.c, dwarfread.c, f-exp.y, gdbtypes.c, gdbtypes.h,
	gnu-v3-abi.c, hppa-tdep.c, hpread.c, jv-exp.y, jv-lang.c,
	language.c, linespec.c, m2-exp.y, m3-nat.c, mdebugread.c,
	mips-tdep.c, nlmread.c, objc-exp.y, objc-lang.c, objfiles.c,
	p-exp.y, p-valprint.c, parse.c, printcmd.c, scm-lang.c, source.c,
	stabsread.c, stack.c, symfile.c, symfile.h, symmisc.c, symtab.c,
	valops.c, values.c, xcoffread.c, xstormy16-tdep.c: Replace all
	occurrences of the above.

2003-05-12  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-mi-cmd-stack.c (list_args_or_locals): Rename VAR_NAMESPACE to
	VAR_DOMAIN.
@
text
@d437 1
a437 1
struct type *
d1671 1
a1671 1
struct type *
@


1.71
log
@Move ``length'' from struct main_type to struct type.
@
text
@d1061 1
a1061 1
  sym = lookup_symbol (name, block, VAR_NAMESPACE, 0, (struct symtab **) NULL);
d1114 1
a1114 1
  sym = lookup_symbol (name, block, STRUCT_NAMESPACE, 0,
d1137 1
a1137 1
  sym = lookup_symbol (name, block, STRUCT_NAMESPACE, 0,
d1168 1
a1168 1
  sym = lookup_symbol (name, block, STRUCT_NAMESPACE, 0,
d1194 1
a1194 1
  sym = lookup_symbol (nam, block, VAR_NAMESPACE, 0, (struct symtab **) NULL);
d1389 1
a1389 1
	     TYPE_TAG_NAME, and look in STRUCT_NAMESPACE and/or VAR_NAMESPACE
d1397 1
a1397 1
	  sym = lookup_symbol (name, 0, STRUCT_NAMESPACE, 0,
d1433 1
a1433 1
         TYPE_TAG_NAME, and look in STRUCT_NAMESPACE and/or VAR_NAMESPACE
d1442 1
a1442 1
      sym = lookup_symbol (name, 0, STRUCT_NAMESPACE, 0, (struct symtab **) NULL);
@


1.71.16.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d1061 1
a1061 1
  sym = lookup_symbol (name, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1114 1
a1114 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1137 1
a1137 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1168 1
a1168 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1194 1
a1194 1
  sym = lookup_symbol (nam, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1389 1
a1389 1
	     TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
d1397 1
a1397 1
	  sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0,
d1433 1
a1433 1
         TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
d1442 1
a1442 1
      sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0, (struct symtab **) NULL);
@


1.70
log
@2003-02-04  David Carlton  <carlton@@math.stanford.edu>

	* gdb.texinfo (C@@t{++}): Recommend DWARF 2, then stabs+.
	(Variables): Recommend stabs+ and DWARF 2.
	(C plus plus expressions): Correct info about
	compiler versions, debug formats.
	(Contributors): Change 'DWARF2' to 'DWARF 2'.
	PR symtab/874.

2003-02-04  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/overload.exp: Test intToChar(1).
	* gdb.c++/overload.cc (intToChar): New.
	(main): Call intToChar.
@
text
@d472 3
d562 1
a562 1
  struct type *cv_chain, *as_chain, *ptr, *ref;
d565 16
@


1.69
log
@2003-01-17  Andrew Cagney  <ac131313@@redhat.com>

	* main.c (captured_main): Don't use PTR.
	* cp-valprint.c (cp_print_class_method): Replace STREQ with strcmp.
	* gdbtypes.c (lookup_primitive_typename): Ditto.
	(lookup_struct_elt_type): Ditto.
	* f-valprint.c (info_common_command): Ditto.
	(list_all_visible_commons): Ditto.
	* jv-typeprint.c (java_type_print_base): Ditto.
@
text
@d2594 1
a2594 1
		    return INTEGER_COERCION_BADNESS;	/* signed/unsigned char -> plain char */
d2607 1
a2607 1
			return INTEGER_COERCION_BADNESS;	/* unsigned long -> unsigned int */
d2613 1
a2613 1
			return INTEGER_COERCION_BADNESS;	/* signed long -> unsigned int */
d2626 1
a2626 1
		    return INTEGER_COERCION_BADNESS;
d2629 1
a2629 1
		return INTEGER_COERCION_BADNESS;
d2634 1
a2634 1
	    return INTEGER_COERCION_BADNESS;
d2656 1
a2656 1
	  return INTEGER_COERCION_BADNESS;
d2669 1
a2669 1
	  return INTEGER_COERCION_BADNESS;
d2674 1
a2674 1
	    return INTEGER_COERCION_BADNESS;
d2686 1
a2686 1
		return INTEGER_COERCION_BADNESS;
d2698 1
a2698 1
	    return INTEGER_COERCION_BADNESS;
d2711 1
a2711 1
	  return INTEGER_COERCION_BADNESS;
@


1.68
log
@2003-01-13  Elena Zannoni  <ezannoni@@redhat.com>

	* stabsread.h (process_later, resolve_cfront_continuation):
	Obsolete.
	Update copyright years.
	* buildsym.c (start_subfile): Obsolete comment pertinent to Cfront.
	Update copyright year.
	* dbxread.c(struct cont_elem): Obsolete.
	(process_later, process_now): Obsolete functions.
	(read_dbx_symtab, read_ofile_symtab): Obsolete cfront support.
	Update copyright year.
	* gdbtypes.c (INIT_EXTRA, ADD_EXTRA): Obsolete macros.
	(add_name, add_mangled_type, cfront_mangle_name): Obsolete functions.
	* mdebugread.c (parse_type): Obsolete comment pertinent to Cfront.
	(parse_partial_symbols): Obsolete cfront support.
	* stabsread.c
	(CFRONT_VISIBILITY_PRIVATE,CFRONT_VISIBILITY_PUBLIC): Obsolete
	macros.
	(get_substring, get_cfront_method_physname, msg_unknown_complaint,
	read_cfront_baseclasses, read_cfront_member_functions,
	resolve_cfront_continuation,read_cfront_static_fields,
	copy_cfront_struct_fields): Obsolete functions.
	(define_symbol, read_one_struct_field): Obsolete cfront support.
	* xcoffread.c (scan_xcoff_symtab): Obsolete CFront support.
	Update Copyright year.
@
text
@d1024 1
a1024 1
      if (STREQ (TYPE_NAME (**p), name))
d1231 1
a1231 1
    if (typename != NULL && STREQ (typename, name))
@


1.67
log
@Update copyright years.
@
text
@d131 3
a133 3
#if 0
static void cfront_mangle_name (struct type *, int, int);
#endif
d1461 187
a1647 187
/* New code added to support parsing of Cfront stabs strings */
#define INIT_EXTRA { pextras->len=0; pextras->str[0]='\0'; }
#define ADD_EXTRA(c) { pextras->str[pextras->len++]=c; }

static void
add_name (struct extra *pextras, char *n)
{
  int nlen;

  if ((nlen = (n ? strlen (n) : 0)) == 0)
    return;
  sprintf (pextras->str + pextras->len, "%d%s", nlen, n);
  pextras->len = strlen (pextras->str);
}

static void
add_mangled_type (struct extra *pextras, struct type *t)
{
  enum type_code tcode;
  int tlen, tflags;
  char *tname;

  tcode = TYPE_CODE (t);
  tlen = TYPE_LENGTH (t);
  tflags = TYPE_FLAGS (t);
  tname = TYPE_NAME (t);
  /* args of "..." seem to get mangled as "e" */

  switch (tcode)
    {
    case TYPE_CODE_INT:
      if (tflags == 1)
	ADD_EXTRA ('U');
      switch (tlen)
	{
	case 1:
	  ADD_EXTRA ('c');
	  break;
	case 2:
	  ADD_EXTRA ('s');
	  break;
	case 4:
	  {
	    char *pname;
	    if ((pname = strrchr (tname, 'l'), pname) && !strcmp (pname, "long"))
	      {
		ADD_EXTRA ('l');
	      }
	    else
	      {
		ADD_EXTRA ('i');
	      }
	  }
	  break;
	default:
	  {
	    complaint (&symfile_complaints, "Bad int type code length x%x",
		       tlen);
	  }
	}
      break;
    case TYPE_CODE_FLT:
      switch (tlen)
	{
	case 4:
	  ADD_EXTRA ('f');
	  break;
	case 8:
	  ADD_EXTRA ('d');
	  break;
	case 16:
	  ADD_EXTRA ('r');
	  break;
	default:
	  {
	    complaint (&symfile_complaints, "Bad float type code length x%x",
		       tlen);
	  }
	}
      break;
    case TYPE_CODE_REF:
      ADD_EXTRA ('R');
      /* followed by what it's a ref to */
      break;
    case TYPE_CODE_PTR:
      ADD_EXTRA ('P');
      /* followed by what it's a ptr to */
      break;
    case TYPE_CODE_TYPEDEF:
      {
	complaint (&symfile_complaints,
	           "Typedefs in overloaded functions not yet supported");
      }
      /* followed by type bytes & name */
      break;
    case TYPE_CODE_FUNC:
      ADD_EXTRA ('F');
      /* followed by func's arg '_' & ret types */
      break;
    case TYPE_CODE_VOID:
      ADD_EXTRA ('v');
      break;
    case TYPE_CODE_METHOD:
      ADD_EXTRA ('M');
      /* followed by name of class and func's arg '_' & ret types */
      add_name (pextras, tname);
      ADD_EXTRA ('F');		/* then mangle function */
      break;
    case TYPE_CODE_STRUCT:	/* C struct */
    case TYPE_CODE_UNION:	/* C union */
    case TYPE_CODE_ENUM:	/* Enumeration type */
      /* followed by name of type */
      add_name (pextras, tname);
      break;

      /* errors possible types/not supported */
    case TYPE_CODE_CHAR:
    case TYPE_CODE_ARRAY:	/* Array type */
    case TYPE_CODE_MEMBER:	/* Member type */
    case TYPE_CODE_BOOL:
    case TYPE_CODE_COMPLEX:	/* Complex float */
    case TYPE_CODE_UNDEF:
    case TYPE_CODE_SET:	/* Pascal sets */
    case TYPE_CODE_RANGE:
    case TYPE_CODE_STRING:
    case TYPE_CODE_BITSTRING:
    case TYPE_CODE_ERROR:
    default:
      {
	complaint (&symfile_complaints, "Unknown type code x%x", tcode);
      }
    }
  if (TYPE_TARGET_TYPE (t))
    add_mangled_type (pextras, TYPE_TARGET_TYPE (t));
}

#if 0
void
cfront_mangle_name (struct type *type, int i, int j)
{
  struct fn_field *f;
  char *mangled_name = gdb_mangle_name (type, i, j);

  f = TYPE_FN_FIELDLIST1 (type, i);	/* moved from below */

  /* kludge to support cfront methods - gdb expects to find "F" for 
     ARM_mangled names, so when we mangle, we have to add it here */
  if (ARM_DEMANGLING)
    {
      int k;
      char *arm_mangled_name;
      struct fn_field *method = &f[j];
      char *field_name = TYPE_FN_FIELDLIST_NAME (type, i);
      char *physname = TYPE_FN_FIELD_PHYSNAME (f, j);
      char *newname = type_name_no_tag (type);

      struct type *ftype = TYPE_FN_FIELD_TYPE (f, j);
      int nargs = TYPE_NFIELDS (ftype);		/* number of args */
      struct extra extras, *pextras = &extras;
      INIT_EXTRA

	if (TYPE_FN_FIELD_STATIC_P (f, j))	/* j for sublist within this list */
	ADD_EXTRA ('S')
	  ADD_EXTRA ('F')
	/* add args here! */
	  if (nargs <= 1)	/* no args besides this */
	  ADD_EXTRA ('v')
	    else
	  {
	    for (k = 1; k < nargs; k++)
	      {
		struct type *t;
		t = TYPE_FIELD_TYPE (ftype, k);
		add_mangled_type (pextras, t);
	      }
	  }
      ADD_EXTRA ('\0')
	printf ("add_mangled_type: %s\n", extras.str);	/* FIXME */
      xasprintf (&arm_mangled_name, "%s%s", mangled_name, extras.str);
      xfree (mangled_name);
      mangled_name = arm_mangled_name;
    }
}
#endif /* 0 */

#undef ADD_EXTRA
/* End of new code added to support parsing of Cfront stabs strings */
@


1.66
log
@	Fix PR gdb/872.
	* gdbtypes.c (init_type): Mark "char" as TYPE_FLAG_NOSIGN.
	(integer_types_same_name_p): New function.
	(rank_one_type): Use it.
	* stabsread.c (read_range_type): Mark "char" as TYPE_FLAG_NOSIGN.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
@


1.65
log
@2003-01-02  Andrew Cagney  <ac131313@@redhat.com>

	* valarith.c (value_binop): Delete obsolete code and comments.
	* configure.host: Ditto.
	* buildsym.h (make_blockvector): Ditto.
	* buildsym.c (make_blockvector): Ditto.
	* defs.h (enum language): Ditto.
	(chill_demangle): Ditto.
	* elfread.c (elf_symtab_read): Ditto.
	* dwarfread.c (CHILL_PRODUCER): Ditto.
	(set_cu_language): Ditto.
	(handle_producer): Ditto.
	* expprint.c (print_subexp): Ditto.
	* gdbtypes.c (chill_varying_type): Ditto.
	* gdbtypes.h (builtin_type_chill_bool): Ditto.
	(builtin_type_chill_char, builtin_type_chill_long): Ditto.
	(builtin_type_chill_ulong, builtin_type_chill_real): Ditto.
	(chill_varying_type): Ditto.
	* language.h (_LANG_chill): Ditto.
	* language.c (binop_result_type, integral_type): Ditto.
	(character_type, string_type, structured_type): Ditto.
	(lang_bool_type, binop_type_check): Ditto.
	* stabsread.h (os9k_stabs): Ditto.
	* stabsread.c (os9k_type_vector, dbx_lookup_type): Ditto.
	(define_symbol, read_type, read_struct_fields): Ditto.
	(read_array_type, read_enum_type, read_huge_number): Ditto.
	(read_range_type, start_stabs): Ditto.
	* symfile.c (init_filename_language_table): Ditto.
	(add_psymbol_with_dem_name_to_list): Ditto.
	* symtab.c (symbol_init_language_specific): Ditto.
	(symbol_init_demangled_name, symbol_demangled_name): Ditto.
	* symtab.h (struct general_symbol_info): Ditto.
	(SYMBOL_CHILL_DEMANGLED_NAME): Ditto.
	* typeprint.c (typedef_print): Ditto.
	* utils.c (fprintf_symbol_filtered): Ditto.
	* valops.c (value_cast, search_struct_field, value_slice): Delete
	obsolete code.
	(varying_to_slice): Delete function.
	* value.h (COERCE_VARYING_ARRAY): Delete obsolete macro contents.
	(varying_to_slice): Delete declaration.
	* MAINTAINERS: Update.
@
text
@d1877 3
d2447 37
d2600 5
a2604 3
		      if (!strcmp_iw (TYPE_NAME (parm), TYPE_NAME (arg)))
			return 0;	/* unsigned int -> unsigned int, or unsigned long -> unsigned long */
		      else if (!strcmp_iw (TYPE_NAME (arg), "int") && !strcmp_iw (TYPE_NAME (parm), "long"))
d2611 2
a2612 1
		      if (!strcmp_iw (TYPE_NAME (arg), "long") && !strcmp_iw (TYPE_NAME (parm), "int"))
d2620 1
a2620 1
		  if (!strcmp_iw (TYPE_NAME (parm), TYPE_NAME (arg)))
d2622 2
a2623 1
		  else if (!strcmp_iw (TYPE_NAME (arg), "int") && !strcmp_iw (TYPE_NAME (parm), "long"))
@


1.64
log
@Replace complain() with complaint().
@
text
@a2005 18
/* (OBSOLETE) Chill (OBSOLETE) varying string and arrays are
   represented as follows:

   struct { int __var_length; ELEMENT_TYPE[MAX_SIZE] __var_data};

   Return true if TYPE is such a (OBSOLETE) Chill (OBSOLETE) varying
   type. */

/* OBSOLETE int */
/* OBSOLETE chill_varying_type (struct type *type) */
/* OBSOLETE { */
/* OBSOLETE   if (TYPE_CODE (type) != TYPE_CODE_STRUCT */
/* OBSOLETE       || TYPE_NFIELDS (type) != 2 */
/* OBSOLETE       || strcmp (TYPE_FIELD_NAME (type, 0), "__var_length") != 0) */
/* OBSOLETE     return 0; */
/* OBSOLETE   return 1; */
/* OBSOLETE } */

@


1.63
log
@	* gdbarch.sh (ADDRESS_CLASS_TYPE_FLAGS_TO_NAME)
	(ADDRESS_CLASS_NAME_TO_TYPE_FLAGS): Use ``const char *'' instead of
	``char *'' for return and parameter types.
	* gdbarch.h, gdbarch.c: Regenerate.
	* gdbtypes.h, gdbtypes.c (address_space_int_to_name): Change
	return type from ``char *'' to ``const char *''.
	* c-typeprint.c (c_type_print_modifier): Make ``address_space_id''
	const.
@
text
@d1344 5
a1348 2
struct deprecated_complaint stub_noname_complaint =
{"stub type has NULL name", 0, 0};
d1375 1
a1375 1
	      complain (&stub_noname_complaint);
d1402 1
a1402 1
	  complain (&stub_noname_complaint);
d1420 1
a1420 1
	  complain (&stub_noname_complaint);
d1517 2
a1518 6

	    static struct deprecated_complaint msg =
	    {"Bad int type code length x%x\n", 0, 0};

	    complain (&msg, tlen);

d1536 2
a1537 3
	    static struct deprecated_complaint msg =
	    {"Bad float type code length x%x\n", 0, 0};
	    complain (&msg, tlen);
d1551 2
a1552 3
	static struct deprecated_complaint msg =
	{"Typedefs in overloaded functions not yet supported\n", 0, 0};
	complain (&msg);
d1590 1
a1590 3
	static struct deprecated_complaint msg =
	{"Unknown type code x%x\n", 0, 0};
	complain (&msg, tcode);
@


1.62
log
@2002-10-25  Andrew Cagney  <cagney@@redhat.com>

	* complaints.h (struct deprecated_complaint): Rename `struct
	complaint'.
	* complaints.c (complain): Update.
	* remote-vx68.c, remote-vxmips.c, remote-vxsparc.c: Delete
	incorrect comment indicating that "symfile.h" was being included
	for the `struct complaint' definition.
	* remote-vx.c: Update.
	* objc-lang.c: Update.
	* xcoffread.c: Update.
	* hpread.c: Update.
	* mdebugread.c: Update.
	* stabsread.c: Update.
	* dwarf2read.c: Update.
	* dwarfread.c: Update.
	* elfread.c: Update.
	* coffread.c: Update.
	* stabsread.h: Update.
	* dbxread.c: Update.
	* buildsym.c: Update.
	* gdbtypes.c: Update.
	* macrotab.c: Update.
@
text
@d419 1
a419 1
extern char *
@


1.61
log
@2002-10-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbtypes.c (address_space_name_to_int): Update.
	(address_space_int_to_name): Update.
	* gdbarch.sh (address_class_type_flags_to_name): Change to a pure
	multi-arch predicate.
	(address_class_name_to_type_flags): Ditto.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@d1344 1
a1344 1
struct complaint stub_noname_complaint =
d1515 1
a1515 1
	    static struct complaint msg =
d1537 1
a1537 1
	    static struct complaint msg =
d1553 1
a1553 1
	static struct complaint msg =
d1593 1
a1593 1
	static struct complaint msg =
@


1.60
log
@Address class support.
@
text
@d400 1
d407 4
a410 2
  else if (ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P ()
           && ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (space_identifier, &type_flags))
d422 1
d428 2
a429 2
           && ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P ())
    return ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (space_flag);
@


1.59
log
@        Fix PR gdb/778
        * gdbtypes.c (fill_in_vptr_fieldno): Call check_typedef
        before recursing.
        * gnu-v3-abi.c (gnuv3_virtual_fn_field): Check return value
        of fill_in_vptr_fieldno.
@
text
@d400 1
d406 3
d423 3
d475 3
a477 1
   This is for Harvard architectures. */
d484 2
a485 1
		    & ~(TYPE_FLAG_CODE_SPACE | TYPE_FLAG_DATA_SPACE))
d3152 8
@


1.59.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@a399 1
  int type_flags;
a404 3
  else if (ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P ()
           && ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (space_identifier, &type_flags))
    return type_flags;
a418 3
  else if ((space_flag & TYPE_FLAG_ADDRESS_CLASS_ALL)
           && ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P ())
    return ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (space_flag);
d468 1
a468 3
   The space attributes "code" and "data" are for Harvard architectures.
   The address space attributes are for architectures which have
   alternately sized pointers or pointers with alternate representations.  */
d475 1
a475 2
		    & ~(TYPE_FLAG_CODE_SPACE | TYPE_FLAG_DATA_SPACE
		        | TYPE_FLAG_ADDRESS_CLASS_ALL))
a3141 8
    }
  if (TYPE_ADDRESS_CLASS_1 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_1");
    }
  if (TYPE_ADDRESS_CLASS_2 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_2");
@


1.59.2.2
log
@	* gdbtypes.c (get_destructor_fn_field): Return obvious destructors
	based on method name.
@
text
@a1313 7
      if (TYPE_FN_FIELDLIST_NAME (t, i)[0] == '~')
	{
	  *method_indexp = i;
	  *field_indexp = 0;
	  return 1;
	}

@


1.59.2.3
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003
a62 1
struct type *builtin_type_int0;
d131 3
d149 1
a149 1
  struct type *type;
d230 1
a230 1
  struct type *ntype;	/* New type */
d297 1
a297 1
  struct type *ntype;	/* New type */
d359 1
a359 1
  struct type *ntype;	/* New type */
a399 1
  struct gdbarch *gdbarch = current_gdbarch;
d406 2
a407 4
  else if (gdbarch_address_class_name_to_type_flags_p (gdbarch)
           && gdbarch_address_class_name_to_type_flags (gdbarch,
							space_identifier,
							&type_flags))
d416 1
a416 1
const char *
a418 1
  struct gdbarch *gdbarch = current_gdbarch;
d424 2
a425 2
           && gdbarch_address_class_type_flags_to_name_p (gdbarch))
    return gdbarch_address_class_type_flags_to_name (gdbarch, space_flag);
d433 1
a433 1
static struct type *
a467 3
  /* Set length of new type to that of the original type.  */
  TYPE_LENGTH (ntype) = TYPE_LENGTH (type);

d504 2
a505 2
  struct type *ntype;	/* New type */
  struct type *tmp_type = type;	/* tmp type */
d555 1
a555 1
  struct type *chain;
a558 16
  /* The type length is not a part of the main type.  Update it for each
     type on the variant chain.  */
  chain = ntype;
  do {
    /* Assert that this element of the chain has no address-class bits
       set in its flags.  Such type variants might have type lengths
       which are supposed to be different from the non-address-class
       variants.  This assertion shouldn't ever be triggered because
       symbol readers which do construct address-class variants don't
       call replace_type().  */
    gdb_assert (TYPE_ADDRESS_CLASS_ALL (chain) == 0);

    TYPE_LENGTH (ntype) = TYPE_LENGTH (type);
    chain = TYPE_CHAIN (chain);
  } while (ntype != chain);

d572 1
a572 1
  struct type *mtype;
d999 1
a999 1
type_name_no_tag (const struct type *type)
d1020 1
a1020 1
      if (strcmp (TYPE_NAME (**p), name) == 0)
d1035 2
a1036 2
  struct symbol *sym;
  struct type *tmp;
d1038 1
a1038 1
  sym = lookup_symbol (name, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1089 1
a1089 1
  struct symbol *sym;
d1091 1
a1091 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1111 1
a1111 1
  struct symbol *sym;
d1114 1
a1114 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1143 1
a1143 1
  struct symbol *sym;
d1145 1
a1145 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1171 1
a1171 1
  sym = lookup_symbol (nam, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1227 1
a1227 1
    if (typename != NULL && strcmp (typename, name) == 0)
d1347 2
a1348 5
static void
stub_noname_complaint (void)
{
  complaint (&symfile_complaints, "stub type has NULL name");
}
d1370 1
a1370 1
	     TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
d1375 1
a1375 1
	      stub_noname_complaint ();
d1378 1
a1378 1
	  sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0,
d1402 1
a1402 1
	  stub_noname_complaint ();
d1414 1
a1414 1
         TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
d1420 1
a1420 1
	  stub_noname_complaint ();
d1423 1
a1423 1
      sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0, (struct symtab **) NULL);
d1461 196
d1660 1
a1660 1
static struct type *
d1867 1
a1867 1
  struct type *type;
d1885 1
a1885 5
  if (name && strcmp (name, "char") == 0)
    TYPE_FLAGS (type) |= TYPE_FLAG_NOSIGN;

  if (code == TYPE_CODE_STRUCT || code == TYPE_CODE_UNION
      || code == TYPE_CODE_NAMESPACE)
d1958 2
a1959 2
  struct type **typep;
  int nbytes;
d2014 18
d2071 1
a2071 1
  int i;
d2114 1
a2114 1
  int i;
d2143 1
a2143 1
  int i;
d2200 3
a2202 3
  struct vbase *tmp_vbase;
  struct vbase *tmp_vbase_2;
  int i;
d2237 2
a2238 2
  int i;
  struct vbase *tmp_vbase;
d2255 2
a2256 2
  int i;
  struct vbase *tmp_vbase;
d2284 2
a2285 2
  struct type *vbase;
  int i;
d2314 2
a2315 2
  struct type *vbase;
  int i, j;
a2469 37
/* Compare the names of two integer types, assuming that any sign
   qualifiers have been checked already.  We do it this way because
   there may be an "int" in the name of one of the types.  */

static int
integer_types_same_name_p (const char *first, const char *second)
{
  int first_p, second_p;

  /* If both are shorts, return 1; if neither is a short, keep checking.  */
  first_p = (strstr (first, "short") != NULL);
  second_p = (strstr (second, "short") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* Likewise for long.  */
  first_p = (strstr (first, "long") != NULL);
  second_p = (strstr (second, "long") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* Likewise for char.  */
  first_p = (strstr (first, "char") != NULL);
  second_p = (strstr (second, "char") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* They must both be ints.  */
  return 1;
}

d2580 1
a2580 1
		    return INTEGER_CONVERSION_BADNESS;	/* signed/unsigned char -> plain char */
d2586 3
a2588 5
		      /* unsigned int -> unsigned int, or unsigned long -> unsigned long */
		      if (integer_types_same_name_p (TYPE_NAME (parm), TYPE_NAME (arg)))
			return 0;
		      else if (integer_types_same_name_p (TYPE_NAME (arg), "int")
			       && integer_types_same_name_p (TYPE_NAME (parm), "long"))
d2591 1
a2591 1
			return INTEGER_CONVERSION_BADNESS;	/* unsigned long -> unsigned int */
d2595 2
a2596 3
		      if (integer_types_same_name_p (TYPE_NAME (arg), "long")
			  && integer_types_same_name_p (TYPE_NAME (parm), "int"))
			return INTEGER_CONVERSION_BADNESS;	/* signed long -> unsigned int */
d2603 1
a2603 1
		  if (integer_types_same_name_p (TYPE_NAME (parm), TYPE_NAME (arg)))
d2605 1
a2605 2
		  else if (integer_types_same_name_p (TYPE_NAME (arg), "int")
			   && integer_types_same_name_p (TYPE_NAME (parm), "long"))
d2608 1
a2608 1
		    return INTEGER_CONVERSION_BADNESS;
d2611 1
a2611 1
		return INTEGER_CONVERSION_BADNESS;
d2616 1
a2616 1
	    return INTEGER_CONVERSION_BADNESS;
d2638 1
a2638 1
	  return INTEGER_CONVERSION_BADNESS;
d2651 1
a2651 1
	  return INTEGER_CONVERSION_BADNESS;
d2656 1
a2656 1
	    return INTEGER_CONVERSION_BADNESS;
d2668 1
a2668 1
		return INTEGER_CONVERSION_BADNESS;
d2680 1
a2680 1
	    return INTEGER_CONVERSION_BADNESS;
d2693 1
a2693 1
	  return INTEGER_CONVERSION_BADNESS;
a3109 3
    case TYPE_CODE_NAMESPACE:
      printf_filtered ("(TYPE_CODE_NAMESPACE)");
      break;
a3375 4
  builtin_type_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
@


1.59.2.4
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d2 2
a3 2
   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003,
   2004 Free Software Foundation, Inc.
d130 2
d141 1
a141 1
   in that objfile's objfile_obstack.  Otherwise allocate the new type structure
d159 1
a159 1
      type = obstack_alloc (&objfile->objfile_obstack,
d162 1
a162 1
      TYPE_MAIN_TYPE (type) = obstack_alloc (&objfile->objfile_obstack,
d196 1
a196 1
      type = obstack_alloc (&TYPE_OBJFILE (oldtype)->objfile_obstack,
d1687 1
a1687 1
   of the string pointed to by name in the objfile_obstack for that objfile,
d1704 1
a1704 1
	obsavestring (name, strlen (name), &objfile->objfile_obstack);
d1805 1
a1805 1
	obstack_alloc (&objfile->objfile_obstack, nbytes);
@


1.58
log
@* gdbtypes.c (check_stub_method_group): Initialize found_stub to
zero.
@
text
@d1279 3
a1281 2
	  fill_in_vptr_fieldno (TYPE_BASECLASS (type, i));
	  if (TYPE_VPTR_FIELDNO (TYPE_BASECLASS (type, i)) >= 0)
d1283 2
a1284 4
	      TYPE_VPTR_FIELDNO (type)
		= TYPE_VPTR_FIELDNO (TYPE_BASECLASS (type, i));
	      TYPE_VPTR_BASETYPE (type)
		= TYPE_VPTR_BASETYPE (TYPE_BASECLASS (type, i));
@


1.58.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@d1279 2
a1280 3
	  struct type *baseclass = check_typedef (TYPE_BASECLASS (type, i));
	  fill_in_vptr_fieldno (baseclass);
	  if (TYPE_VPTR_FIELDNO (baseclass) >= 0)
d1282 4
a1285 2
	      TYPE_VPTR_FIELDNO (type) = TYPE_VPTR_FIELDNO (baseclass);
	      TYPE_VPTR_BASETYPE (type) = TYPE_VPTR_BASETYPE (baseclass);
@


1.58.2.2
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@a399 2
  struct gdbarch *gdbarch = current_gdbarch;
  int type_flags;
a404 5
  else if (gdbarch_address_class_name_to_type_flags_p (gdbarch)
           && gdbarch_address_class_name_to_type_flags (gdbarch,
							space_identifier,
							&type_flags))
    return type_flags;
a414 1
  struct gdbarch *gdbarch = current_gdbarch;
a418 3
  else if ((space_flag & TYPE_FLAG_ADDRESS_CLASS_ALL)
           && gdbarch_address_class_type_flags_to_name_p (gdbarch))
    return gdbarch_address_class_type_flags_to_name (gdbarch, space_flag);
d468 1
a468 3
   The space attributes "code" and "data" are for Harvard architectures.
   The address space attributes are for architectures which have
   alternately sized pointers or pointers with alternate representations.  */
d475 1
a475 2
		    & ~(TYPE_FLAG_CODE_SPACE | TYPE_FLAG_DATA_SPACE
		        | TYPE_FLAG_ADDRESS_CLASS_ALL))
a3141 8
    }
  if (TYPE_ADDRESS_CLASS_1 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_1");
    }
  if (TYPE_ADDRESS_CLASS_2 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_2");
@


1.58.2.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d1344 1
a1344 1
struct deprecated_complaint stub_noname_complaint =
d1515 1
a1515 1
	    static struct deprecated_complaint msg =
d1537 1
a1537 1
	    static struct deprecated_complaint msg =
d1553 1
a1553 1
	static struct deprecated_complaint msg =
d1593 1
a1593 1
	static struct deprecated_complaint msg =
@


1.58.2.4
log
@2002-11-24  David Carlton  <carlton@@bactrian.org>

	* Makefile.in (c-typeprint.o): Depend on gdb_assert_h.
	* c-typeprint.c: #include "gdb_assert.h"
	* gdbtypes.c (recursive_dump_type): Handle TYPE_CODE_NAMESPACE.
	* c-typeprint.c (c_type_print_varspec_prefix): Ditto.
	(c_type_print_varspec_suffix): Ditto.
	(c_type_print_base): Ditto.
	* typeprint.c (print_type_scalar): Ditto.
	* printcmd.c (print_formatted): Ditto.
	* language.c (structured_type): Ditto.
	* cp-support.c (cp_check_namespace_symbol): Allocate type via
	init_type.
	* gdbtypes.c (init_type): Handle TYPE_CODE_NAMESPACE.
	* valops.c (value_namespace_elt): Handle sym == NULL.

2002-11-24  David Carlton  <carlton@@bactrian.org>

	* gdb.c++/namespace.exp: Eliminate some of the single quotes, and
	duplicate some of the single quote tests without the quotes.
	Change "print E::ce" test.
	Add some ptype <namespace> tests.
	* carlton_runnamespace: Use different files for compiler with and
	without debug info.
@
text
@d1882 1
a1882 2
  if (code == TYPE_CODE_STRUCT || code == TYPE_CODE_UNION
      || code == TYPE_CODE_NAMESPACE)
a3105 3
      break;
    case TYPE_CODE_NAMESPACE:
      printf_filtered ("(TYPE_CODE_NAMESPACE)");
@


1.58.2.5
log
@2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (add_partial_enumeration): New function.
	(scan_partial_symbols): Call add_partial_enumeration.
	(locate_pdi_sibling): New function.
	(scan_partial_symbols): Call locate_pdi_sibling.  Get rid of
	nesting_level.
	(pdi_needs_namespace): New function.
	(add_partial_symbol): Add 'namespace' arg; calculate full name
	when appropriate.
	(scan_partial_symbols): Update calls to add_partial_symbol.
	(add_partial_enumeration): Ditto.
	(read_enumeration): Add processing_current_prefix to name when
	appropriate.
	(new_symbol): Set names of enumerators and typedefs appropriately
	if processing_has_namespace_info.
	* symtab.c (lookup_symbol_namespace): Rename 'namespace' argument
	to 'namespace_name'.
	* symtab.h: Ditto.
	* symtab.c (lookup_symbol_namespace): Delete FIXME comments; add a
	new one.
	(lookup_symbol_aux_file): New function.
	(lookup_symbol_aux): Delete FIXME comment.
	(lookup_symbol_aux): Don't search static block explicitly; delete
	FIXME comments.
	* valops.c (value_namespace_elt): Update call to
	lookup_symbol_namespace.
	* symtab.h: Update declaration for lookup_symbol_namespace.
	* symtab.c (lookup_symbol_namespace): Delete 'using' argument and
	add 'block' argument; get using directives via iterators.
	(lookup_symbol_aux_using_loop): Delete 'using' argument and add
	'block' argument.
	(lookup_symbol_aux_using): Don't calculate using directives.
	* block.c (block_using_iterator_first): New function.
	(block_using_iterator_next): Ditto.
	* block.h: Add comment.
	(struct block_using_iterator): New struct.
	Declare block_using_iterator_first, block_using_iterator_next.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (read_structure_scope): Set type name and
	processing_current_prefix appropriately.
	(new_symbol): Make sure that, in symbols associated to class
	types, the name includes appropriate namespaces.
	* buildsym.h: Rename processing_current_namespace to
	processing_current_prefix.
	* buildsym.c (finish_block): Ditto.
	* dwarf2read.c (psymtab_to_symtab_1): Ditto.
	(read_namespace): Ditto.  Also rename previous_namespace to
	previous_prefix.

	Now come a thousand and one const correctness fixes:
	* p-typeprint.c (pascal_print_type): Const.
	(pascal_type_print_method_args): Const.
	* p-lang.h: Const.
	* m2-typeprint.c (m2_print_type): Const.
	* valops.c (hand_function_call): Const.
	* jv-lang.c (java_primitive_type_from_name): Const.
	* jv-lang.h: Const.
	* jv-typeprint.c (java_print_type): Const.
	* language.c: (unk_lang_print_type): Const.
	* stack.c (frame_info): Const.
	* linespec.c (find_methods): Const.
	(find_method_name): Const
	* f-lang.h: Const.
	* f-typeprint.c (f_print_type): Const.
	* c-typeprint.c (c_print_type): Const.
	* c-lang.h: Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (lookup_primitive_typename): Const.
	* stack.c (print_frame): Const.
	(func_command): Delete pointless cast.
	* linespec.c (find_method_name): Const.
	* language.h: Const.
	* symfile.c (compare_psymbols): Const.
	* symtab.c (completion_list_add_name): Const.
	* breakpoint.c (break_at_finish_at_depth_command_1): Remove
	useless cast.
	(break_at_finish_command_1): Ditto.
	* typeprint.c (type_print): Const.
	* symtab.h: Const.
	* symtab.c (gdb_mangle_name): Const.
	(symbol_init_demangled_name): Const.
	(symbol_demangled_name): Const.
	* defs.h: Const.
	* printcmd.c (build_address_symbolic): Const.
	* valops.c (search_struct_method): Const.
	* cp-valprint.c (cp_is_vtbl_ptr_type): Const.
	(cp_print_value): Const.
	(cp_print_class_member): Const.
	* c-typeprint.c (cp_type_print_derivation_info): Const.
	(c_type_print_varspec_prefix): Const.
	(c_type_print_base): Const.
	* p-valprint.c (pascal_object_is_vtbl_ptr_type): Const.
	(pascal_object_print_value): Const.
	(pascal_object_print_class_member): Const.
	* p-typeprint.c (pascal_type_print_derivation_info): Const.
	(pascal_type_print_varspec_prefix): Const.
	(pascal_type_print_base): Const.
	* jv-typeprint.c (java_type_print_base): Const.
	* jv-lang.h (java_demangle_type_signature): Const.
	* jv-lang.c (java_demangle_type_signature): Const.
	(java_demangled_signature_length): Const.
	(java_demangled_signature_copy): Const.
	* jv-typeprint.c (java_type_print_derivation_info): Const.
	* jv-valprint.c (java_value_print): Const.
	(java_print_value_fields): Const.
	* jv-lang.c (is_object_type): Const.
	(evaluate_subexp_java): Const.
	* stabsread.c (read_cpp_abbrev): Const.
	(complain_about_struct_wipeout): Const.
	(cleanup_undefined_types): Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (add_name): Second arg const.
	(lookup_typename): Const.
	(lookup_unsigned_typename): Const.
	(lookup_signed_typename): Const.
	* linespec.c (find_methods): const char *class_name.
	* symtab.c (gdb_mangle_name): const char *newname.
	* valops.c (destructor_name_p): const char *dname.
	(search_struct_field): First arg const.
	* gdbtypes.c (check_typedef): const char *name (multiple places).
	(cfront_mangle_name): const char *newname.
	* gdbtypes.c (add_mangled_type): const char *tname.
	* valops.c (find_overload_match): const char *obj_type_name.
	* utils.c (gdb_print_host_address): Make first arg const.
	* defs.h: Declare first arg of gdb_print_host_address to be
	const.
	* valarith.c (find_size_for_pointer_math): const char *name.

2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc (main): Add marker comment.
	* gdb.c++/m-data.exp: Use marker comment instead of line numbers.
	* gdb.c++/m-data.cc: Delete superfluous namespace.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/m-static1.cc: Ditto.
	* carlton_runtest: Compare based on gdb.sum, not based on output.
	* carlton_runnamespace: Ditto.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Put tests for CClass.
	* gdb.c++/namespace.cc (C): Add CClass.
@
text
@d129 1
a129 1
static void add_name (struct extra *, const char *);
d1018 1
a1018 1
lookup_primitive_typename (const char *name)
d1037 1
a1037 1
lookup_typename (const char *name, struct block *block, int noerr)
d1063 1
a1063 1
lookup_unsigned_typename (const char *name)
d1073 1
a1073 1
lookup_signed_typename (const char *name)
d1357 1
a1357 1
	  const char *name;
d1395 1
a1395 1
      const char *name = type_name_no_tag (type);
d1409 1
a1409 1
      const char *name = type_name_no_tag (type);
d1463 1
a1463 1
add_name (struct extra *pextras, const char *n)
d1478 1
a1478 1
  const char *tname;
d1620 1
a1620 1
      const char *newname = type_name_no_tag (type);
@


1.58.2.6
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d419 1
a419 1
const char *
d1344 2
a1345 5
static void
stub_noname_complaint (void)
{
  complaint (&symfile_complaints, "stub type has NULL name");
}
d1372 1
a1372 1
	      stub_noname_complaint ();
d1399 1
a1399 1
	  stub_noname_complaint ();
d1417 1
a1417 1
	  stub_noname_complaint ();
d1514 6
a1519 2
	    complaint (&symfile_complaints, "Bad int type code length x%x",
		       tlen);
d1537 3
a1539 2
	    complaint (&symfile_complaints, "Bad float type code length x%x",
		       tlen);
d1553 3
a1555 2
	complaint (&symfile_complaints,
	           "Typedefs in overloaded functions not yet supported");
d1593 3
a1595 1
	complaint (&symfile_complaints, "Unknown type code x%x", tcode);
@


1.58.2.7
log
@2003-01-31  David Carlton  <carlton@@math.stanford.edu>

	From Jim Blandy  <jimb@@redhat.com>:

	Use a single, consistent representation for an empty minimal
	symbol table in an objfile.
	* objfiles.c (terminate_minimal_symbol_table): New function.
	(allocate_objfile): Call it.
	* objfiles.h (terminate_minimal_symbol_table): New declaration.
	(ALL_MSYMBOLS): No need to test whether (objfile)->msymbols is
	non-NULL.
	* minsyms.c (lookup_minimal_symbol_by_pc_section): To see whether
	objfile has minimal symbols, compare minimal_symbol_count to zero,
	instead of comparing msymbols with NULL.
	* objfiles.c (have_minimal_symbols): Same.
	* solib-sunos.c (solib_add_common_symbols): Call
	terminate_minimal_symbol_table.
	* symfile.c (reread_symbols): Same.

	* objfiles.h: Revert patch from 2003-01-27, to be replaced by
	similar patch from Jim Blandy.
	* objfiles.c (objfile_relocate): Ditto.
	* i386-linux-tdep.c (find_minsym_and_objfile): Ditto.
	* arm-linux-tdep.c (find_minsym_and_objfile): Ditto.
	* gdbtypes.h: Delete INTEGER_COERCION_BADNESS,
	FLOAT_COERCION_BADNESS.
	* gdbtypes.c (rank_one_type): Replace all uses of
	INTEGER_COERCION_BADNESS by INTEGER_CONVERSION_BADNESS.
	* valops.c (find_overload_match): Call cp_func_name.
	* cp-support.h: Declare cp_func_name.
	* cp-support.c (cp_func_name): New function.

2003-01-30  David Carlton  <carlton@@math.stanford.edu>

	* valops.c (find_overload_match): Move code into
	find_oload_champ_namespace.
	(find_oload_champ_namespace): New function, which immediately gets
	eviscerated and turned into a call to
	find_oload_champ_namespace_loop.
	(find_oload_champ_namespace_loop): New function.
	* symtab.c (make_symbol_overload_list): Move entire body into
	make_symbol_overload_list_qualified.
	(make_symbol_overload_list_qualified): New.
	(read_in_psymtabs): New.
	(make_symbol_overload_list_qualified): Rewrite.
	(make_symbol_overload_list_using): New.
	(lookup_symbol_namespace): Use alloca, not xmalloc.
	(make_symbol_overload_list): Put some memory management stuff back
	in.
@
text
@d2573 1
a2573 1
		    return INTEGER_CONVERSION_BADNESS;	/* signed/unsigned char -> plain char */
d2584 1
a2584 1
			return INTEGER_CONVERSION_BADNESS;	/* unsigned long -> unsigned int */
d2589 1
a2589 1
			return INTEGER_CONVERSION_BADNESS;	/* signed long -> unsigned int */
d2601 1
a2601 1
		    return INTEGER_CONVERSION_BADNESS;
d2604 1
a2604 1
		return INTEGER_CONVERSION_BADNESS;
d2609 1
a2609 1
	    return INTEGER_CONVERSION_BADNESS;
d2631 1
a2631 1
	  return INTEGER_CONVERSION_BADNESS;
d2644 1
a2644 1
	  return INTEGER_CONVERSION_BADNESS;
d2649 1
a2649 1
	    return INTEGER_CONVERSION_BADNESS;
d2661 1
a2661 1
		return INTEGER_CONVERSION_BADNESS;
d2673 1
a2673 1
	    return INTEGER_CONVERSION_BADNESS;
d2686 1
a2686 1
	  return INTEGER_CONVERSION_BADNESS;
@


1.58.2.8
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003
d131 3
a133 3
#if 0 /* OBSOLETE CFront */
// OBSOLETE static void cfront_mangle_name (struct type *, int, int);
#endif /* OBSOLETE CFront */
d1024 1
a1024 1
      if (strcmp (TYPE_NAME (**p), name) == 0)
d1231 1
a1231 1
    if (typename != NULL && strcmp (typename, name) == 0)
d1461 187
a1647 187
#if 0 /* OBSOLETE CFront */
// OBSOLETE  /* New code added to support parsing of Cfront stabs strings */
// OBSOLETE  #define INIT_EXTRA { pextras->len=0; pextras->str[0]='\0'; }
// OBSOLETE  #define ADD_EXTRA(c) { pextras->str[pextras->len++]=c; }

// OBSOLETE  static void
// OBSOLETE  add_name (struct extra *pextras, char *n)
// OBSOLETE  {
// OBSOLETE    int nlen;

// OBSOLETE    if ((nlen = (n ? strlen (n) : 0)) == 0)
// OBSOLETE      return;
// OBSOLETE    sprintf (pextras->str + pextras->len, "%d%s", nlen, n);
// OBSOLETE    pextras->len = strlen (pextras->str);
// OBSOLETE  }

// OBSOLETE  static void
// OBSOLETE  add_mangled_type (struct extra *pextras, struct type *t)
// OBSOLETE  {
// OBSOLETE    enum type_code tcode;
// OBSOLETE    int tlen, tflags;
// OBSOLETE    char *tname;

// OBSOLETE    tcode = TYPE_CODE (t);
// OBSOLETE    tlen = TYPE_LENGTH (t);
// OBSOLETE    tflags = TYPE_FLAGS (t);
// OBSOLETE    tname = TYPE_NAME (t);
// OBSOLETE    /* args of "..." seem to get mangled as "e" */

// OBSOLETE    switch (tcode)
// OBSOLETE      {
// OBSOLETE      case TYPE_CODE_INT:
// OBSOLETE        if (tflags == 1)
// OBSOLETE  	ADD_EXTRA ('U');
// OBSOLETE        switch (tlen)
// OBSOLETE  	{
// OBSOLETE  	case 1:
// OBSOLETE  	  ADD_EXTRA ('c');
// OBSOLETE  	  break;
// OBSOLETE  	case 2:
// OBSOLETE  	  ADD_EXTRA ('s');
// OBSOLETE  	  break;
// OBSOLETE  	case 4:
// OBSOLETE  	  {
// OBSOLETE  	    char *pname;
// OBSOLETE  	    if ((pname = strrchr (tname, 'l'), pname) && !strcmp (pname, "long"))
// OBSOLETE  	      {
// OBSOLETE  		ADD_EXTRA ('l');
// OBSOLETE  	      }
// OBSOLETE  	    else
// OBSOLETE  	      {
// OBSOLETE  		ADD_EXTRA ('i');
// OBSOLETE  	      }
// OBSOLETE  	  }
// OBSOLETE  	  break;
// OBSOLETE  	default:
// OBSOLETE  	  {
// OBSOLETE  	    complaint (&symfile_complaints, "Bad int type code length x%x",
// OBSOLETE  		       tlen);
// OBSOLETE  	  }
// OBSOLETE  	}
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_FLT:
// OBSOLETE        switch (tlen)
// OBSOLETE  	{
// OBSOLETE  	case 4:
// OBSOLETE  	  ADD_EXTRA ('f');
// OBSOLETE  	  break;
// OBSOLETE  	case 8:
// OBSOLETE  	  ADD_EXTRA ('d');
// OBSOLETE  	  break;
// OBSOLETE  	case 16:
// OBSOLETE  	  ADD_EXTRA ('r');
// OBSOLETE  	  break;
// OBSOLETE  	default:
// OBSOLETE  	  {
// OBSOLETE  	    complaint (&symfile_complaints, "Bad float type code length x%x",
// OBSOLETE  		       tlen);
// OBSOLETE  	  }
// OBSOLETE  	}
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_REF:
// OBSOLETE        ADD_EXTRA ('R');
// OBSOLETE        /* followed by what it's a ref to */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_PTR:
// OBSOLETE        ADD_EXTRA ('P');
// OBSOLETE        /* followed by what it's a ptr to */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_TYPEDEF:
// OBSOLETE        {
// OBSOLETE  	complaint (&symfile_complaints,
// OBSOLETE  	           "Typedefs in overloaded functions not yet supported");
// OBSOLETE        }
// OBSOLETE        /* followed by type bytes & name */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_FUNC:
// OBSOLETE        ADD_EXTRA ('F');
// OBSOLETE        /* followed by func's arg '_' & ret types */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_VOID:
// OBSOLETE        ADD_EXTRA ('v');
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_METHOD:
// OBSOLETE        ADD_EXTRA ('M');
// OBSOLETE        /* followed by name of class and func's arg '_' & ret types */
// OBSOLETE        add_name (pextras, tname);
// OBSOLETE        ADD_EXTRA ('F');		/* then mangle function */
// OBSOLETE        break;
// OBSOLETE      case TYPE_CODE_STRUCT:	/* C struct */
// OBSOLETE      case TYPE_CODE_UNION:	/* C union */
// OBSOLETE      case TYPE_CODE_ENUM:	/* Enumeration type */
// OBSOLETE        /* followed by name of type */
// OBSOLETE        add_name (pextras, tname);
// OBSOLETE        break;

// OBSOLETE        /* errors possible types/not supported */
// OBSOLETE      case TYPE_CODE_CHAR:
// OBSOLETE      case TYPE_CODE_ARRAY:	/* Array type */
// OBSOLETE      case TYPE_CODE_MEMBER:	/* Member type */
// OBSOLETE      case TYPE_CODE_BOOL:
// OBSOLETE      case TYPE_CODE_COMPLEX:	/* Complex float */
// OBSOLETE      case TYPE_CODE_UNDEF:
// OBSOLETE      case TYPE_CODE_SET:	/* Pascal sets */
// OBSOLETE      case TYPE_CODE_RANGE:
// OBSOLETE      case TYPE_CODE_STRING:
// OBSOLETE      case TYPE_CODE_BITSTRING:
// OBSOLETE      case TYPE_CODE_ERROR:
// OBSOLETE      default:
// OBSOLETE        {
// OBSOLETE  	complaint (&symfile_complaints, "Unknown type code x%x", tcode);
// OBSOLETE        }
// OBSOLETE      }
// OBSOLETE    if (TYPE_TARGET_TYPE (t))
// OBSOLETE      add_mangled_type (pextras, TYPE_TARGET_TYPE (t));
// OBSOLETE  }

// OBSOLETE  void
// OBSOLETE  cfront_mangle_name (struct type *type, int i, int j)
// OBSOLETE  {
// OBSOLETE    struct fn_field *f;
// OBSOLETE    char *mangled_name = gdb_mangle_name (type, i, j);

// OBSOLETE    f = TYPE_FN_FIELDLIST1 (type, i);	/* moved from below */

// OBSOLETE    /* kludge to support cfront methods - gdb expects to find "F" for 
// OBSOLETE       ARM_mangled names, so when we mangle, we have to add it here */
// OBSOLETE    if (ARM_DEMANGLING)
// OBSOLETE      {
// OBSOLETE        int k;
// OBSOLETE        char *arm_mangled_name;
// OBSOLETE        struct fn_field *method = &f[j];
// OBSOLETE        char *field_name = TYPE_FN_FIELDLIST_NAME (type, i);
// OBSOLETE        char *physname = TYPE_FN_FIELD_PHYSNAME (f, j);
// OBSOLETE        char *newname = type_name_no_tag (type);

// OBSOLETE        struct type *ftype = TYPE_FN_FIELD_TYPE (f, j);
// OBSOLETE        int nargs = TYPE_NFIELDS (ftype);		/* number of args */
// OBSOLETE        struct extra extras, *pextras = &extras;
// OBSOLETE        INIT_EXTRA

// OBSOLETE  	if (TYPE_FN_FIELD_STATIC_P (f, j))	/* j for sublist within this list */
// OBSOLETE  	ADD_EXTRA ('S')
// OBSOLETE  	  ADD_EXTRA ('F')
// OBSOLETE  	/* add args here! */
// OBSOLETE  	  if (nargs <= 1)	/* no args besides this */
// OBSOLETE  	  ADD_EXTRA ('v')
// OBSOLETE  	    else
// OBSOLETE  	  {
// OBSOLETE  	    for (k = 1; k < nargs; k++)
// OBSOLETE  	      {
// OBSOLETE  		struct type *t;
// OBSOLETE  		t = TYPE_FIELD_TYPE (ftype, k);
// OBSOLETE  		add_mangled_type (pextras, t);
// OBSOLETE  	      }
// OBSOLETE  	  }
// OBSOLETE        ADD_EXTRA ('\0')
// OBSOLETE  	printf ("add_mangled_type: %s\n", extras.str);	/* FIXME */
// OBSOLETE        xasprintf (&arm_mangled_name, "%s%s", mangled_name, extras.str);
// OBSOLETE        xfree (mangled_name);
// OBSOLETE        mangled_name = arm_mangled_name;
// OBSOLETE      }
// OBSOLETE  }

// OBSOLETE  #undef ADD_EXTRA
// OBSOLETE  /* End of new code added to support parsing of Cfront stabs strings */
#endif /* OBSOLETE CFront */
a1876 3
  if (name && strcmp (name, "char") == 0)
    TYPE_FLAGS (type) |= TYPE_FLAG_NOSIGN;

d2007 18
a2462 37
/* Compare the names of two integer types, assuming that any sign
   qualifiers have been checked already.  We do it this way because
   there may be an "int" in the name of one of the types.  */

static int
integer_types_same_name_p (const char *first, const char *second)
{
  int first_p, second_p;

  /* If both are shorts, return 1; if neither is a short, keep checking.  */
  first_p = (strstr (first, "short") != NULL);
  second_p = (strstr (second, "short") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* Likewise for long.  */
  first_p = (strstr (first, "long") != NULL);
  second_p = (strstr (second, "long") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* Likewise for char.  */
  first_p = (strstr (first, "char") != NULL);
  second_p = (strstr (second, "char") != NULL);
  if (first_p && second_p)
    return 1;
  if (first_p || second_p)
    return 0;

  /* They must both be ints.  */
  return 1;
}

d2579 3
a2581 5
		      /* unsigned int -> unsigned int, or unsigned long -> unsigned long */
		      if (integer_types_same_name_p (TYPE_NAME (parm), TYPE_NAME (arg)))
			return 0;
		      else if (integer_types_same_name_p (TYPE_NAME (arg), "int")
			       && integer_types_same_name_p (TYPE_NAME (parm), "long"))
d2588 1
a2588 2
		      if (integer_types_same_name_p (TYPE_NAME (arg), "long")
			  && integer_types_same_name_p (TYPE_NAME (parm), "int"))
d2596 1
a2596 1
		  if (integer_types_same_name_p (TYPE_NAME (parm), TYPE_NAME (arg)))
d2598 1
a2598 2
		  else if (integer_types_same_name_p (TYPE_NAME (arg), "int")
			   && integer_types_same_name_p (TYPE_NAME (parm), "long"))
@


1.58.2.9
log
@2003-02-11  David Carlton  <carlton@@math.stanford.edu>

	* valops.c (find_oload_champ): Add comment.
	(find_oload_champ_namespace_loop): Fix memory management.
	(find_oload_champ_namespace): Add comment.
	(find_overload_match): Free oload_syms, oload_champ_bv.
	* gdbtypes.c (rank_function): Add comment.
	* valops.c (find_oload_champ_namespace_loop): Allow num_fns to be
	zero.
	* symtab.c (lookup_partial_symbol): Use strcmp_iw_ordered.
	(lookup_block_symbol): Delete comment.
	* symfile.c (compare_psymbols): Use strcmp_iw_ordered.
	* defs.h: Declare strcmp_iw_ordered.
	* utils.c (strcmp_iw_ordered): New function.
@
text
@d2413 3
a2415 6
/* Rank a function by comparing its parameter types (PARMS, length
   NPARMS), to the types of an argument list (ARGS, length NARGS).
   Return a pointer to a badness vector. This has NARGS + 1
   entries.

   It is the caller's responsibility to free the return value.  */
@


1.58.2.10
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@a471 3
  /* Set length of new type to that of the original type.  */
  TYPE_LENGTH (ntype) = TYPE_LENGTH (type);

d559 1
a559 1
  struct type *chain;
a561 16

  /* The type length is not a part of the main type.  Update it for each
     type on the variant chain.  */
  chain = ntype;
  do {
    /* Assert that this element of the chain has no address-class bits
       set in its flags.  Such type variants might have type lengths
       which are supposed to be different from the non-address-class
       variants.  This assertion shouldn't ever be triggered because
       symbol readers which do construct address-class variants don't
       call replace_type().  */
    gdb_assert (TYPE_ADDRESS_CLASS_ALL (chain) == 0);

    TYPE_LENGTH (ntype) = TYPE_LENGTH (type);
    chain = TYPE_CHAIN (chain);
  } while (ntype != chain);
@


1.58.2.11
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d1061 1
a1061 1
  sym = lookup_symbol (name, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1114 1
a1114 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1137 1
a1137 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1168 1
a1168 1
  sym = lookup_symbol (name, block, STRUCT_DOMAIN, 0,
d1194 1
a1194 1
  sym = lookup_symbol (nam, block, VAR_DOMAIN, 0, (struct symtab **) NULL);
d1389 1
a1389 1
	     TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
d1397 1
a1397 1
	  sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0,
d1433 1
a1433 1
         TYPE_TAG_NAME, and look in STRUCT_DOMAIN and/or VAR_DOMAIN
d1442 1
a1442 1
      sym = lookup_symbol (name, 0, STRUCT_DOMAIN, 0, (struct symtab **) NULL);
@


1.58.2.12
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a62 1
struct type *builtin_type_int0;
d437 1
a437 1
static struct type *
d1671 1
a1671 1
static struct type *
a3419 4
  builtin_type_int0 =
    init_type (TYPE_CODE_INT, 0 / 8,
	       0,
	       "int0_t", (struct objfile *) NULL);
@


1.58.2.13
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d150 1
a150 1
  struct type *type;
d231 1
a231 1
  struct type *ntype;	/* New type */
d298 1
a298 1
  struct type *ntype;	/* New type */
d360 1
a360 1
  struct type *ntype;	/* New type */
d512 2
a513 2
  struct type *ntype;	/* New type */
  struct type *tmp_type = type;	/* tmp type */
d596 1
a596 1
  struct type *mtype;
d1023 1
a1023 1
type_name_no_tag (const struct type *type)
d1059 2
a1060 2
  struct symbol *sym;
  struct type *tmp;
d1113 1
a1113 1
  struct symbol *sym;
d1135 1
a1135 1
  struct symbol *sym;
d1167 1
a1167 1
  struct symbol *sym;
d1879 1
a1879 1
  struct type *type;
d1974 2
a1975 2
  struct type **typep;
  int nbytes;
d2069 1
a2069 1
  int i;
d2112 1
a2112 1
  int i;
d2141 1
a2141 1
  int i;
d2198 3
a2200 3
  struct vbase *tmp_vbase;
  struct vbase *tmp_vbase_2;
  int i;
d2235 2
a2236 2
  int i;
  struct vbase *tmp_vbase;
d2253 2
a2254 2
  int i;
  struct vbase *tmp_vbase;
d2282 2
a2283 2
  struct type *vbase;
  int i;
d2312 2
a2313 2
  struct type *vbase;
  int i, j;
@


1.58.2.14
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d132 3
d1480 188
@


1.58.2.15
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d130 2
@


1.57
log
@        * gdbtypes.c (check_stub_method): Make static.
        (check_stub_method_group): New function.
        * gdbtypes.h: Update prototypes.
        * cp-support.c: New file.
        * cp-support.h: New file.

        * stabsread.c: Include "cp-abi.h" and "cp-support.h".
        (update_method_name_from_physname): New function.
        (read_member_functions): Correct method names for operators
        and v3 constructors/destructors.  Separate v2 constructors and
        destructors.
        * Makefile.in (stabsread.o): Update dependencies.
        (SFILES): Add cp-support.c.
        (COMMON_OBS): Add cp-support.o.
        (cp_support_h, cp-support.o): Add.

        * cp-valprint.c (cp_print_class_method): Call
        check_stub_method_group instead of check_stub_method.  Remove
        extraneous QUITs.
        * p-valprint.c (pascal_object_print_class_method): Likewise.
        * valops.c (search_struct_method): Likewise.
        (find_method_list, value_struct_elt_for_reference): Likewise.
@
text
@d1796 1
a1796 1
  int j, found_stub;
@


1.56
log
@2002-08-20  Elena Zannoni  <ezannoni@@redhat.com>

	* gdbtypes.c (build_builtin_type_vec64): Add name to type.
	(build_builtin_type_vec64i): Ditto.
	(build_builtin_type_vec128): Ditto.
	(build_builtin_type_vec128i): Ditto.
@
text
@d1675 1
a1675 1
void
d1784 43
a3479 1

@


1.56.6.1
log
@        Fix PR gdb/778
        * gdbtypes.c (fill_in_vptr_fieldno): Call check_typedef
        before recursing.
        * gnu-v3-abi.c (gnuv3_virtual_fn_field): Check return value
        of fill_in_vptr_fieldno.
@
text
@d1279 2
a1280 3
	  struct type *baseclass = check_typedef (TYPE_BASECLASS (type, i));
	  fill_in_vptr_fieldno (baseclass);
	  if (TYPE_VPTR_FIELDNO (baseclass) >= 0)
d1282 4
a1285 2
	      TYPE_VPTR_FIELDNO (type) = TYPE_VPTR_FIELDNO (baseclass);
	      TYPE_VPTR_BASETYPE (type) = TYPE_VPTR_BASETYPE (baseclass);
@


1.55
log
@2002-08-10  Andrew Cagney  <cagney@@redhat.com>
            Elena Zannoni  <ezannoni@@redhat.com>
            Martin M. Hunt  <hunt@@redhat.com>

* gdbtypes.c (build_builtin_type_vec128): Set the vector bit.
(build_builtin_type_vec128i): Set the vector bit.
* gdbtypes.h (builtin_type_vec64, builtin_type_vec64i): Declare.
* gdbtypes.c (builtin_type_vec64, builtin_type_vec64i): Define.
(build_builtin_type_vec64): New function.
(build_builtin_type_vec64i): New function.
(build_gdbtypes): Initialize builtin_type_vec64 and
builtin_type_vec64i.
@
text
@d849 1
d877 1
d907 1
d927 1
@


1.54
log
@2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* NEWS: Menion that CHILL has been made obsolete.

* gdbtypes.c (chill_varying_type): Make chill references obsolete.
* gdbserver/Makefile.in: Ditto.
* stabsread.c (read_range_type): Ditto.
* gdbtypes.h: Ditto.
* language.c (binop_type_check): Ditto.
(binop_result_type): Ditto.
(integral_type): Ditto.
(character_type): Ditto.
(string_type): Ditto.
(boolean_type): Ditto.
(structured_type): Ditto.
(lang_bool_type): Ditto.
(binop_type_check): Ditto.
* language.h (_LANG_chill): Ditto.
* dwarfread.c (set_cu_language): Ditto.
* dwarfread.c (CHILL_PRODUCER): Ditto.
* dwarfread.c (handle_producer): Ditto.
* expression.h (enum exp_opcode): Ditto.
* eval.c: Ditto for comments.
* typeprint.c (typedef_print) [_LANG_chill]: Ditto.
* expprint.c (print_subexp): Ditto.
(print_subexp): Ditto.
* valops.c (value_cast): Ditto.
(search_struct_field): Ditto.
* value.h (COERCE_VARYING_ARRAY): Ditto.
* symfile.c (init_filename_language_table): Ditto.
(add_psymbol_with_dem_name_to_list): Ditto.
* valarith.c (value_binop): Ditto.
(value_neg): Ditto.
* valops.c (value_slice): Ditto.
* symtab.h (union language_specific): Ditto.
(SYMBOL_INIT_LANGUAGE_SPECIFIC): Ditto.
(SYMBOL_DEMANGLED_NAME): Ditto.
(SYMBOL_CHILL_DEMANGLED_NAME): Ditto.
* defs.h (enum language): Ditto.
* symtab.c (got_symtab): Ditto.
* utils.c (fprintf_symbol_filtered): Ditto.

* ch-typeprint.c: Make file obsolete.
* ch-valprint.c: Make file obsolete.
* ch-lang.h: Make file obsolete.
* ch-exp.c: Make file obsolete.
* ch-lang.c: Make file obsolete.

* Makefile.in (FLAGS_TO_PASS): Do not pass CHILL or CHILLFLAGS or
CHILL_LIB.
(TARGET_FLAGS_TO_PASS): Ditto.
(CHILLFLAGS): Obsolete.
(CHILL): Obsolete.
(CHILL_FOR_TARGET): Obsolete.
(CHILL_LIB): Obsolete.
(SFILES): Remove ch-exp.c, ch-lang.c, ch-typeprint.c and
ch-valprint.c.
(HFILES_NO_SRCDIR): Remove ch-lang.h.
(COMMON_OBS): Remove ch-valprint.o, ch-typeprint.o, ch-exp.o and
ch-lang.o.
(ch-exp.o, ch-lang.o, ch-typeprint.o, ch-valprint.o): Delete
targets.

2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* stabs.texinfo, gdb.texinfo, gdbint.texinfo: Obsolete references
to CHILL.

2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* Makefile.in (TARGET_FLAGS_TO_PASS): Remove CHILLFLAGS, CHILL,
CHILL_FOR_TARGET and CHILL_LIB.
* configure.in (configdirs): Remove gdb.chill.
* configure: Regenerate.
* lib/gdb.exp: Obsolete references to chill.
* gdb.fortran/types.exp: Ditto.
* gdb.fortran/exprs.exp: Ditto.
@
text
@d95 2
d824 56
d904 1
d923 1
d3387 3
a3389 1
  /* Vector types. */
@


1.53
log
@2002-06-14  Daniel Jacobowitz  <drow@@mvista.com>

        * gdbtypes.h (TYPE_FLAG_VARARGS): Update comment.
        (struct main_type): Remove arg_types member.  Update comments for
        struct field.
        (TYPE_ARG_TYPES): Remove.
        (TYPE_FN_FIELD_ARGS): Update.
        (smash_to_method_type): Update prototype.

        * c-typeprint.c (cp_type_print_method_args): Take method type
        instead of argument list.  Use new argument layout.  Simplify.
        (c_type_print_args): Use new argument layout.  Simplify.
        (c_type_print_base): Update call to cp_type_print_method_args.
        * dwarf2read.c (dwarf2_add_member_fn): Remove unneeded type
        argument; use die->type instead.  Update call to
        smash_to_method_type.
        (read_structure_scope): Update call to dwarf2_add_member_fn.
        * gdbtypes.c (allocate_stub_method): Update comment.
        (smash_to_method_type): Take new NARGS and VARARGS arguments.
        Use new argument layout.
        (check_stub_method): Use new argument layout.  Don't count
        void as an argument.
        (print_arg_types): Update comments.  Use new argument layout.
        (recursive_dump_type): Don't print arg_types member.
        * hpread.c (hpread_read_struct_type): Use new argument layout.
        (fixup_class_method_type): Likewise.
        (hpread_type_lookup): Likewise.
        * stabsread.c (read_type): Update calls to read_args and
        smash_to_method_type.
        (read_args): Use new argument layout.  Simplify.
        * valops.c (typecmp): Use new argument layout.  Update parameters
        and comments.  Simplify.
        (hand_function_call): Use new argument layout.
        (search_struct_method): Update call to typecmp.
        (find_overload_match): Use new argument layout.
@
text
@d1891 2
a1892 1
/* Chill varying string and arrays are represented as follows:
d1896 2
a1897 1
   Return true if TYPE is such a Chill varying type. */
d1899 9
a1907 9
int
chill_varying_type (struct type *type)
{
  if (TYPE_CODE (type) != TYPE_CODE_STRUCT
      || TYPE_NFIELDS (type) != 2
      || strcmp (TYPE_FIELD_NAME (type, 0), "__var_length") != 0)
    return 0;
  return 1;
}
@


1.52
log
@2002-05-27  Martin M. Hunt  <hunt@@redhat.com>

	* i386-tdep.c (i386_register_virtual_type): Return
	builtin_type_vec128i for SSE registers.

	* gdbtypes.h (builtin_type_vec128i): Declare.

	* gdbtypes.c (build_builtin_type_vec128i): New function.
	(builtin_type_v2_double, builtin_type_v4_int64): New types.
	(builtin_type_vec128i): New type for SSE2 128-bit registers.
	(build_gdbtypes): Initialize new builtin vector types.
	(_initialize_gdbtypes): Register new vector types with gdbarch.
@
text
@d133 1
a133 1
static void print_arg_types (struct type **, int);
a581 1
  /*  _ARG_TYPES (mtype) = unknown yet */
d902 2
a903 1
		      struct type *to_type, struct type **args)
d913 4
a916 1
  TYPE_ARG_TYPES (type) = args;
d1620 1
a1620 1
  struct type **argtypes;
d1653 3
a1655 2
  /* We need two more slots: one for the THIS pointer, and one for the
     NULL [...] or void [end of arglist].  */
d1657 4
a1660 2
  argtypes = (struct type **)
    TYPE_ALLOC (type, (argcount + 2) * sizeof (struct type *));
d1669 1
a1669 1
      argtypes[0] = lookup_pointer_type (type);
d1680 4
a1683 2
	      /* Avoid parsing of ellipsis, they will be handled below.  */
	      if (strncmp (argtypetext, "...", p - argtypetext) != 0)
d1685 1
a1685 1
		  argtypes[argcount] =
a1704 11
  if (p[-2] != '.')		/* Not '...' */
    {
      argtypes[argcount] = builtin_type_void;	/* List terminator */
    }
  else
    {
      argtypes[argcount] = NULL;	/* Ellist terminator */
    }

  xfree (demangled_name);

d1710 2
a1711 1
  TYPE_ARG_TYPES (mtype) = argtypes;
d1714 4
d2708 2
a2709 5
/* The args list is a strange beast.  It is either terminated by a NULL
   pointer for varargs functions, or by a pointer to a TYPE_CODE_VOID
   type for normal fixed argcount functions.  (FIXME someday)
   Also note the first arg should be the "this" pointer, we may not want to
   include it since we may get into a infinitely recursive situation. */
d2712 1
a2712 1
print_arg_types (struct type **args, int spaces)
d2716 4
a2719 8
      while (*args != NULL)
	{
	  recursive_dump_type (*args, spaces + 2);
	  if (TYPE_CODE (*args++) == TYPE_CODE_VOID)
	    {
	      break;
	    }
	}
d2764 3
a2766 1
	  print_arg_types (TYPE_FN_FIELD_ARGS (f, overload_idx), spaces);
a3107 8
    case TYPE_CODE_METHOD:
    case TYPE_CODE_FUNC:
      printfi_filtered (spaces, "arg_types ");
      gdb_print_host_address (TYPE_ARG_TYPES (type), gdb_stdout);
      puts_filtered ("\n");
      print_arg_types (TYPE_ARG_TYPES (type), spaces);
      break;

@


1.52.2.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d133 1
a133 1
static void print_arg_types (struct field *, int, int);
d582 1
d903 1
a903 2
		      struct type *to_type, struct field *args,
		      int nargs, int varargs)
d913 1
a913 4
  TYPE_FIELDS (type) = args;
  TYPE_NFIELDS (type) = nargs;
  if (varargs)
    TYPE_FLAGS (type) |= TYPE_FLAG_VARARGS;
d1617 1
a1617 1
  struct field *argtypes;
d1650 2
a1651 3
  /* If we read one argument and it was ``void'', don't count it.  */
  if (strncmp (argtypetext, "(void)", 6) == 0)
    argcount -= 1;
d1653 2
a1654 4
  /* We need one extra slot, for the THIS pointer.  */

  argtypes = (struct field *)
    TYPE_ALLOC (type, (argcount + 1) * sizeof (struct field));
d1663 1
a1663 1
      argtypes[0].type = lookup_pointer_type (type);
d1674 2
a1675 4
	      /* Avoid parsing of ellipsis, they will be handled below.
	         Also avoid ``void'' as above.  */
	      if (strncmp (argtypetext, "...", p - argtypetext) != 0
		  && strncmp (argtypetext, "void", p - argtypetext) != 0)
d1677 1
a1677 1
		  argtypes[argcount].type =
d1697 11
d1713 1
a1713 2
  TYPE_FIELDS (mtype) = argtypes;
  TYPE_NFIELDS (mtype) = argcount;
a1715 4
  if (p[-2] == '.')
    TYPE_FLAGS (mtype) |= TYPE_FLAG_VARARGS;

  xfree (demangled_name);
d2706 5
a2710 2
/* Note the first arg should be the "this" pointer, we may not want to
   include it since we may get into a infinitely recursive situation.  */
d2713 1
a2713 1
print_arg_types (struct field *args, int nargs, int spaces)
d2717 8
a2724 4
      int i;

      for (i = 0; i < nargs; i++)
	recursive_dump_type (args[i].type, spaces + 2);
d2769 1
a2769 3
	  print_arg_types (TYPE_FN_FIELD_ARGS (f, overload_idx),
			   TYPE_NFIELDS (TYPE_FN_FIELD_TYPE (f, overload_idx)),
			   spaces);
d3111 8
@


1.52.2.2
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d1891 1
a1891 2
/* (OBSOLETE) Chill (OBSOLETE) varying string and arrays are
   represented as follows:
d1895 1
a1895 2
   Return true if TYPE is such a (OBSOLETE) Chill (OBSOLETE) varying
   type. */
d1897 9
a1905 9
/* OBSOLETE int */
/* OBSOLETE chill_varying_type (struct type *type) */
/* OBSOLETE { */
/* OBSOLETE   if (TYPE_CODE (type) != TYPE_CODE_STRUCT */
/* OBSOLETE       || TYPE_NFIELDS (type) != 2 */
/* OBSOLETE       || strcmp (TYPE_FIELD_NAME (type, 0), "__var_length") != 0) */
/* OBSOLETE     return 0; */
/* OBSOLETE   return 1; */
/* OBSOLETE } */
@


1.52.2.3
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@a94 2
struct type *builtin_type_vec64;
struct type *builtin_type_vec64i;
a821 58
build_builtin_type_vec64 (void)
{
  /* Construct a type for the 64 bit registers.  The type we're
     building is this: */
#if 0
  union __gdb_builtin_type_vec64
  {
    int64_t uint64;
    float v2_float[2];
    int32_t v2_int32[2];
    int16_t v4_int16[4];
    int8_t v8_int8[8];
  };
#endif

  struct type *t;

  t = init_composite_type ("__gdb_builtin_type_vec64", TYPE_CODE_UNION);
  append_composite_type_field (t, "uint64", builtin_type_int64);
  append_composite_type_field (t, "v2_float", builtin_type_v2_float);
  append_composite_type_field (t, "v2_int32", builtin_type_v2_int32);
  append_composite_type_field (t, "v4_int16", builtin_type_v4_int16);
  append_composite_type_field (t, "v8_int8", builtin_type_v8_int8);

  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec64";
  return t;
}

static struct type *
build_builtin_type_vec64i (void)
{
  /* Construct a type for the 64 bit registers.  The type we're
     building is this: */
#if 0
  union __gdb_builtin_type_vec64i 
  {
    int64_t uint64;
    int32_t v2_int32[2];
    int16_t v4_int16[4];
    int8_t v8_int8[8];
  };
#endif

  struct type *t;

  t = init_composite_type ("__gdb_builtin_type_vec64i", TYPE_CODE_UNION);
  append_composite_type_field (t, "uint64", builtin_type_int64);
  append_composite_type_field (t, "v2_int32", builtin_type_v2_int32);
  append_composite_type_field (t, "v4_int16", builtin_type_v4_int16);
  append_composite_type_field (t, "v8_int8", builtin_type_v8_int8);

  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec64i";
  return t;
}

static struct type *
a845 2
  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec128";
a863 2
  TYPE_FLAGS (t) |= TYPE_FLAG_VECTOR;
  TYPE_NAME (t) = "builtin_type_vec128i";
d3327 1
a3327 3
  /* Vector types.  */
  builtin_type_vec64 = build_builtin_type_vec64 ();
  builtin_type_vec64i = build_builtin_type_vec64i ();
@


1.52.2.4
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d1675 1
a1675 1
static void
a1783 43
/* This is the external interface to check_stub_method, above.  This function
   unstubs all of the signatures for TYPE's METHOD_ID method name.  After
   calling this function TYPE_FN_FIELD_STUB will be cleared for each signature
   and TYPE_FN_FIELDLIST_NAME will be correct.

   This function unfortunately can not die until stabs do.  */

void
check_stub_method_group (struct type *type, int method_id)
{
  int len = TYPE_FN_FIELDLIST_LENGTH (type, method_id);
  struct fn_field *f = TYPE_FN_FIELDLIST1 (type, method_id);
  int j, found_stub = 0;

  for (j = 0; j < len; j++)
    if (TYPE_FN_FIELD_STUB (f, j))
      {
	found_stub = 1;
	check_stub_method (type, method_id, j);
      }

  /* GNU v3 methods with incorrect names were corrected when we read in
     type information, because it was cheaper to do it then.  The only GNU v2
     methods with incorrect method names are operators and destructors;
     destructors were also corrected when we read in type information.

     Therefore the only thing we need to handle here are v2 operator
     names.  */
  if (found_stub && strncmp (TYPE_FN_FIELD_PHYSNAME (f, 0), "_Z", 2) != 0)
    {
      int ret;
      char dem_opname[256];

      ret = cplus_demangle_opname (TYPE_FN_FIELDLIST_NAME (type, method_id),
				   dem_opname, DMGL_ANSI);
      if (!ret)
	ret = cplus_demangle_opname (TYPE_FN_FIELDLIST_NAME (type, method_id),
				     dem_opname, 0);
      if (ret)
	TYPE_FN_FIELDLIST_NAME (type, method_id) = xstrdup (dem_opname);
    }
}

d3437 1
@


1.52.2.5
log
@merge from mainline
@
text
@a399 2
  struct gdbarch *gdbarch = current_gdbarch;
  int type_flags;
a404 5
  else if (gdbarch_address_class_name_to_type_flags_p (gdbarch)
           && gdbarch_address_class_name_to_type_flags (gdbarch,
							space_identifier,
							&type_flags))
    return type_flags;
a414 1
  struct gdbarch *gdbarch = current_gdbarch;
a418 3
  else if ((space_flag & TYPE_FLAG_ADDRESS_CLASS_ALL)
           && gdbarch_address_class_type_flags_to_name_p (gdbarch))
    return gdbarch_address_class_type_flags_to_name (gdbarch, space_flag);
d468 1
a468 3
   The space attributes "code" and "data" are for Harvard architectures.
   The address space attributes are for architectures which have
   alternately sized pointers or pointers with alternate representations.  */
d475 1
a475 2
		    & ~(TYPE_FLAG_CODE_SPACE | TYPE_FLAG_DATA_SPACE
		        | TYPE_FLAG_ADDRESS_CLASS_ALL))
d1279 2
a1280 3
	  struct type *baseclass = check_typedef (TYPE_BASECLASS (type, i));
	  fill_in_vptr_fieldno (baseclass);
	  if (TYPE_VPTR_FIELDNO (baseclass) >= 0)
d1282 4
a1285 2
	      TYPE_VPTR_FIELDNO (type) = TYPE_VPTR_FIELDNO (baseclass);
	      TYPE_VPTR_BASETYPE (type) = TYPE_VPTR_BASETYPE (baseclass);
d1331 1
a1331 1
struct deprecated_complaint stub_noname_complaint =
d1502 1
a1502 1
	    static struct deprecated_complaint msg =
d1524 1
a1524 1
	    static struct deprecated_complaint msg =
d1540 1
a1540 1
	static struct deprecated_complaint msg =
d1580 1
a1580 1
	static struct deprecated_complaint msg =
a3142 8
    }
  if (TYPE_ADDRESS_CLASS_1 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_1");
    }
  if (TYPE_ADDRESS_CLASS_2 (type))
    {
      puts_filtered (" TYPE_FLAG_ADDRESS_CLASS_2");
@


1.51
log
@2002-05-14  Daniel Jacobowitz  <drow@@mvista.com>

        * gdbtypes.h: Update accessor macros to use TYPE_MAIN_TYPE.
        (TYPE_CONST, TYPE_VOLATILE, TYPE_CODE_SPACE, TYPE_DATA_SPACE): Use
        TYPE_INSTANCE_FLAGS.
        (struct main_type): New.
        (struct type): Move most members to struct main_type.  Change
        cv_type and as_type to new type_chain member.  Add instance_flags.
        (TYPE_MAIN_TYPE, TYPE_CHAIN, TYPE_INSTANCE_FLAGS): New macros.
        (TYPE_CV_TYPE, TYPE_AS_TYPE): Remove.
        (finish_cv_type): Remove prototype.
        * gdbtypes.c (alloc_type): Update comment.  Allocate TYPE_MAIN_TYPE.
        Set TYPE_CHAIN.
        (alloc_type_instance): New function.
        (smash_type): New function.
        (make_pointer_type, make_reference_type, make_function_type)
        (smash_to_member_type, smash_to_method_type): Call smash_type.
        (make_qualified_type): New function.
        (make_type_with_address_space): Call make_qualified_type.
        (make_cv_type): Likewise.
        (finish_cv_type): Remove unnecessary function.
        (replace_type): Update comment.  Copy TYPE_MAIN_TYPE.
        (recursive_dump_type): Dump TYPE_CHAIN and TYPE_INSTANCE_FLAGS;
        remove TYPE_CV_TYPE and TYPE_AS_TYPE.
        * c-typeprint.c (c_type_print_modifier): Use TYPE_INSTANCE_FLAGS.
        * dwarf2read.c (read_structure_scope): Don't call finish_cv_type.
        * hpread.c (hpread_read_struct_type): Likewise.
        * stabsread.c (read_struct_type): Likewise.

2002-05-14  Daniel Jacobowitz  <drow@@mvista.com>

        * gdb.base/maint.exp (maint print type): Update for new type
        structure.
@
text
@d76 1
d78 1
d96 1
d850 18
d3324 1
d3326 1
d3338 1
d3427 1
d3429 1
d3438 1
@


1.51.2.1
log
@merge from trunk
@
text
@a75 1
struct type *builtin_type_v2_double;
a76 1
struct type *builtin_type_v2_int64;
a93 1
struct type *builtin_type_vec128i;
d130 1
a130 1
static void print_arg_types (struct field *, int, int);
d579 1
a846 18
static struct type *
build_builtin_type_vec128i (void)
{
  /* 128-bit Intel SIMD registers */
  struct type *t;

  t = init_composite_type ("__gdb_builtin_type_vec128i", TYPE_CODE_UNION);
  append_composite_type_field (t, "v4_float", builtin_type_v4_float);
  append_composite_type_field (t, "v2_double", builtin_type_v2_double);
  append_composite_type_field (t, "v16_int8", builtin_type_v16_int8);
  append_composite_type_field (t, "v8_int16", builtin_type_v8_int16);
  append_composite_type_field (t, "v4_int32", builtin_type_v4_int32);
  append_composite_type_field (t, "v2_int64", builtin_type_v2_int64);
  append_composite_type_field (t, "uint128", builtin_type_int128);

  return t;
}

d882 1
a882 2
		      struct type *to_type, struct field *args,
		      int nargs, int varargs)
d892 1
a892 4
  TYPE_FIELDS (type) = args;
  TYPE_NFIELDS (type) = nargs;
  if (varargs)
    TYPE_FLAGS (type) |= TYPE_FLAG_VARARGS;
d1596 1
a1596 1
  struct field *argtypes;
d1629 2
a1630 5
  /* If we read one argument and it was ``void'', don't count it.  */
  if (strncmp (argtypetext, "(void)", 6) == 0)
    argcount -= 1;

  /* We need one extra slot, for the THIS pointer.  */
d1632 2
a1633 2
  argtypes = (struct field *)
    TYPE_ALLOC (type, (argcount + 1) * sizeof (struct field));
d1642 1
a1642 1
      argtypes[0].type = lookup_pointer_type (type);
d1653 2
a1654 4
	      /* Avoid parsing of ellipsis, they will be handled below.
	         Also avoid ``void'' as above.  */
	      if (strncmp (argtypetext, "...", p - argtypetext) != 0
		  && strncmp (argtypetext, "void", p - argtypetext) != 0)
d1656 1
a1656 1
		  argtypes[argcount].type =
d1676 11
d1692 1
a1692 2
  TYPE_FIELDS (mtype) = argtypes;
  TYPE_NFIELDS (mtype) = argcount;
a1694 4
  if (p[-2] == '.')
    TYPE_FLAGS (mtype) |= TYPE_FLAG_VARARGS;

  xfree (demangled_name);
d2685 5
a2689 2
/* Note the first arg should be the "this" pointer, we may not want to
   include it since we may get into a infinitely recursive situation.  */
d2692 1
a2692 1
print_arg_types (struct field *args, int nargs, int spaces)
d2696 8
a2703 4
      int i;

      for (i = 0; i < nargs; i++)
	recursive_dump_type (args[i].type, spaces + 2);
d2748 1
a2748 3
	  print_arg_types (TYPE_FN_FIELD_ARGS (f, overload_idx),
			   TYPE_NFIELDS (TYPE_FN_FIELD_TYPE (f, overload_idx)),
			   spaces);
d3090 8
a3302 1
  builtin_type_v2_double = init_vector_type (builtin_type_double, 2);
a3303 1
  builtin_type_v2_int64 = init_vector_type (builtin_type_int64, 2);
a3314 1
  builtin_type_vec128i = build_builtin_type_vec128i ();
a3402 1
  register_gdbarch_swap (&builtin_type_v2_double, sizeof (struct type *), NULL);
a3403 1
  register_gdbarch_swap (&builtin_type_v2_int64, sizeof (struct type *), NULL);
a3411 1
  register_gdbarch_swap (&builtin_type_vec128i, sizeof (struct type *), NULL);
@


1.50
log
@2002-05-13  Daniel Jacobowitz  <drow@@mvista.com>

        * ax-gdb.c (gen_sign_extend, gen_fetch, gen_usual_unary)
        (gen_cast, gen_scale, gen_add, gen_sub, gen_binop, gen_deref)
        (gen_address_of, gen_struct_ref, gen_repeat): Use type
        access macros.
        * c-typeprint.c (cp_type_print_method_args): Likewise.
        (c_type_print_args): Likewise.
        * d10v-tdep.c (d10v_push_arguments): Likewise.
        (d10v_extract_return_value): Likewise.
        * expprint.c (print_subexp): Likewise.
        * gdbtypes.c (lookup_primitive_typename): Likewise.
        (lookup_template_type, add_mangled_type, print_arg_types): Likewise.
        * gdbtypes.h (TYPE_UNSIGNED, TYPE_NOSIGN, TYPE_STUB)
        (TYPE_TARGET_STUB, TYPE_STATIC, TYPE_CONST, TYPE_VOLATILE)
        (TYPE_PROTOTYPED, TYPE_INCOMPLETE, TYPE_CODE_SPACE, TYPE_VARARGS)
        (TYPE_VECTOR): Likewise.
        * hpread.c (hpread_read_struct_type)
        (fix_static_member_physnames, fixup_class_method_type)
        (hpread_type_lookup): Likewise.
        * mdebugread.c (parse_symbol, parse_type): Likewise.
        * p-lang.c (is_pascal_string_type): Likewise.
        * valops.c (hand_function_call): Likewise.
        * x86-64-tdep.c (classify_argument): Likewise.

        * hpread.c (hpread_read_function_type)
        (hpread_read_doc_function_type): Call replace_type.
        * dstread.c (create_new_type): Delete.
        (decode_dst_structure, process_dst_function): Call alloc_type.
        Use type access macros.
@
text
@d138 2
a139 1
   in that objfile's type_obstack. */
d150 3
a152 1
      type = (struct type *) xmalloc (sizeof (struct type));
d156 5
a160 2
      type = (struct type *) obstack_alloc (&objfile->type_obstack,
					    sizeof (struct type));
d163 1
a163 1
  memset ((char *) type, 0, sizeof (struct type));
d170 1
a170 2
  TYPE_CV_TYPE (type) = type;	/* chain back to itself */
  TYPE_AS_TYPE (type) = type;	/* ditto */
d175 42
d252 1
a252 1
      memset ((char *) ntype, 0, sizeof (struct type));
d319 1
a319 1
      memset ((char *) ntype, 0, sizeof (struct type));
d368 1
a368 1
      memset ((char *) ntype, 0, sizeof (struct type));
d418 2
a419 5
/* Make an address-space-delimited variant of a type -- a type that
   is identical to the one supplied except that it has an address
   space attribute attached to it (such as "code" or "data").

   This is for Harvard architectures. */
d422 2
a423 1
make_type_with_address_space (struct type *type, int space_flag)
d429 1
a429 1
    if ((ntype->flags & space_flag) != 0)
d431 1
a431 1
    ntype = TYPE_AS_TYPE (ntype);
d434 9
a442 4
  /* Create a new, duplicate type. */
  ntype = alloc_type (TYPE_OBJFILE (type));
  /* Copy original type. */
  memcpy ((char *) ntype, (char *) type, sizeof (struct type));
d445 1
a445 2
     the new type; but if the original type is a pointer, the new type
     points to the same thing (so TYPE_TARGET_TYPE remains unchanged). */
a447 1
  TYPE_CV_TYPE (ntype) = ntype;
d449 6
a454 3
  /* Chain the new address-space-specific type to the old type. */
  ntype->as_type = type->as_type;
  type->as_type = ntype;
a455 2
  /* Now set the address-space flag, and return the new type. */
  ntype->flags |= space_flag;
d459 16
d493 2
a494 41
  ntype = TYPE_CV_TYPE (type);

  while (ntype != type)
    {
      if ((TYPE_CONST (ntype) == cnst) &&
	  (TYPE_VOLATILE (ntype) == voltl))
	{
	  if (typeptr == 0)
	    return ntype;
	  else if (*typeptr == 0)
	    {
	      *typeptr = ntype;	/* Tracking alloc, and we have new type.  */
	      return ntype;
	    }
	}
      tmp_type = ntype;
      ntype = TYPE_CV_TYPE (ntype);
    }

  if (typeptr == 0 || *typeptr == 0)	/* We'll need to allocate one.  */
    {
      ntype = alloc_type (TYPE_OBJFILE (type));
      if (typeptr)
	*typeptr = ntype;
    }
  else
    /* We have storage, but need to reset it.  */
    {
      ntype = *typeptr;
      objfile = TYPE_OBJFILE (ntype);
      /* memset ((char *) ntype, 0, sizeof (struct type)); */
      TYPE_OBJFILE (ntype) = objfile;
    }

  /* Copy original type */
  memcpy ((char *) ntype, (char *) type, sizeof (struct type));
  /* But zero out fields that shouldn't be copied */
  TYPE_POINTER_TYPE (ntype) = (struct type *) 0;	/* Need new pointer kind */
  TYPE_REFERENCE_TYPE (ntype) = (struct type *) 0;	/* Need new referene kind */
  TYPE_AS_TYPE (ntype) = ntype;		/* Need new address-space kind. */
  /* Note: TYPE_TARGET_TYPE can be left as is */
a495 1
  /* Set flags appropriately */
d497 1
a497 3
    TYPE_FLAGS (ntype) |= TYPE_FLAG_CONST;
  else
    TYPE_FLAGS (ntype) &= ~TYPE_FLAG_CONST;
d500 1
a500 24
    TYPE_FLAGS (ntype) |= TYPE_FLAG_VOLATILE;
  else
    TYPE_FLAGS (ntype) &= ~TYPE_FLAG_VOLATILE;

  /* Fix the chain of cv variants */
  TYPE_CV_TYPE (ntype) = type;
  TYPE_CV_TYPE (tmp_type) = ntype;

  return ntype;
}

/* When reading in a class type, we may have created references to
   cv-qualified versions of the type (in method arguments, for
   instance).  Update everything on the cv ring from the primary
   type TYPE.

   The only reason we do not need to do the same thing for address
   spaces is that type readers do not create address space qualified
   types.  */
void
finish_cv_type (struct type *type)
{
  struct type *ntype, *cv_type, *ptr_type, *ref_type;
  int cv_flags;
d502 1
a502 4
  gdb_assert (!TYPE_CONST (type) && !TYPE_VOLATILE (type));

  ntype = type;
  while ((ntype = TYPE_CV_TYPE (ntype)) != type)
d504 17
a520 2
      /* Save cv_flags.  */
      cv_flags = TYPE_FLAGS (ntype) & (TYPE_FLAG_VOLATILE | TYPE_FLAG_CONST);
d522 2
a523 3
      /* If any reference or pointer types were created, save them too.  */
      ptr_type = TYPE_POINTER_TYPE (ntype);
      ref_type = TYPE_REFERENCE_TYPE (ntype);
d525 1
a525 18
      /* Don't disturb the CV chain.  */
      cv_type = TYPE_CV_TYPE (ntype);

      /* Verify that we haven't added any address-space qualified types,
	 for the future.  */
      gdb_assert (ntype == TYPE_AS_TYPE (ntype));

      /* Copy original type */
      memcpy ((char *) ntype, (char *) type, sizeof (struct type));

      /* Restore everything.  */
      TYPE_POINTER_TYPE (ntype) = ptr_type;
      TYPE_REFERENCE_TYPE (ntype) = ref_type;
      TYPE_CV_TYPE (ntype) = cv_type;
      TYPE_FLAGS (ntype) = TYPE_FLAGS (ntype) | cv_flags;

      TYPE_AS_TYPE (ntype) = ntype;
    }
d528 3
a530 1
/* Replace the contents of ntype with the type *type.
d535 2
a536 7
   controlled.  For example, Daniel Jacobowitz has suggested moving
   the fields common to a set of c/v variants into their own object,
   which the variants would share.

   This function does not handle the replacement type being
   cv-qualified; it could be easily fixed to, but it would be better
   to just change the whole approach.  */
d542 1
a542 11
  cv_chain = TYPE_CV_TYPE (ntype);
  as_chain = TYPE_AS_TYPE (ntype);
  ptr = TYPE_POINTER_TYPE (ntype);
  ref = TYPE_REFERENCE_TYPE (ntype);

  *ntype = *type;

  TYPE_POINTER_TYPE (ntype) = ptr;
  TYPE_REFERENCE_TYPE (ntype) = ref;
  TYPE_CV_TYPE (ntype) = cv_chain;
  TYPE_AS_TYPE (ntype) = as_chain;
d544 3
a546 1
  finish_cv_type (ntype);
d865 1
a865 1
  memset ((char *) type, 0, sizeof (struct type));
d888 1
a888 1
  memset ((char *) type, 0, sizeof (struct type));
d2997 2
a2998 5
  printfi_filtered (spaces, "cv_type ");
  gdb_print_host_address (TYPE_CV_TYPE (type), gdb_stdout);
  printf_filtered ("\n");
  printfi_filtered (spaces, "as_type ");
  gdb_print_host_address (TYPE_AS_TYPE (type), gdb_stdout);
d3000 18
a3038 8
  if (TYPE_CONST (type))
    {
      puts_filtered (" TYPE_FLAG_CONST");
    }
  if (TYPE_VOLATILE (type))
    {
      puts_filtered (" TYPE_FLAG_VOLATILE");
    }
a3045 8
    }
  if (TYPE_CODE_SPACE (type))
    {
      puts_filtered (" TYPE_FLAG_CODE_SPACE");
    }
  if (TYPE_DATA_SPACE (type))
    {
      puts_filtered (" TYPE_FLAG_DATA_SPACE");
@


1.49
log
@2005-05-11  Daniel Jacobowitz  <drow@@mvista.com>
            Peter Schauer  <pes@@regent.e-technik.tu-muenchen.de>

        * Makefile.in: Update dependencies for valops.c.
        * valops.c: Include "gdb_assert.h".
        (typecmp): Skip THIS parameter to methods.
        (find_method_list): Remove static_memfuncp argument,
        update callers.  Check for stub methods.
        (find_value_oload_method_list): Don't set *static_memfuncp.
        (find_overload_match): Don't check for stub methods.  Assert
        that methods are not stubbed.  Handle static methods.
        (value_find_oload_method_list): Remove static_memfuncp argument.
        * gdbtypes.c (check_stub_method): Do not add THIS pointer
        to the argument list for static stub methods.
        * value.h (value_find_oload_method_list): Update prototype.
@
text
@d939 1
a939 1
      if (STREQ ((**p)->name, name))
d1084 1
a1084 1
  char *nam = (char *) alloca (strlen (name) + strlen (type->name) + 4);
d1087 1
a1087 1
  strcat (nam, type->name);
d1514 2
a1515 2
  if (t->target_type)
    add_mangled_type (pextras, t->target_type);
d2716 1
a2716 1
	  if ((*args++)->code == TYPE_CODE_VOID)
@


1.48
log
@2002-05-08  Elena Zannoni  <ezannoni@@redhat.com>

	* gdbtypes.c : Add new builtin type for 64 bit vectors.
        (build_gdbtypes): Build builtin_type_v2_float.
	(_initialize_gdbtypes): Register new builtin type.
@
text
@d1652 10
a1661 3
  /* FIXME: This is wrong for static member functions.  */
  argtypes[0] = lookup_pointer_type (type);
  argcount = 1;
a1702 2

  f = TYPE_FN_FIELDLIST1 (type, method_id);
@


1.47
log
@2002-05-06  Elena Zannoni  <ezannoni@@redhat.com>

	* gdbtypes.c (init_vector_type): New function.
	(build_builtin_type_vec128): Simplify the representation of SIMD
	registers.
	(build_gdbtypes): Initialize new builtin vector types.
	(_initialize_gdbtypes): Register new vector types with gdbarch.
	(builtin_type_v4_float, builtin_type_v4_int32,
	builtin_type_v8_int16, builtin_type_v16_int8,
	builtin_type_v2_int32, builtin_type_v4_int16,
	builtin_type_v8_int8): New (renamed) SIMD types.
@
text
@d81 1
d3321 1
d3420 1
@


1.46
log
@* gdbtypes.c (replace_type): Doc fix.
@
text
@d74 11
d824 12
d841 1
a841 1
  union __gdb_builtin_type_vec128
d843 5
a847 5
    struct __builtin_v16qi v16qi;
    struct __builtin_v8hi v8hi;
    struct __builtin_v4si v4si;
    struct __builtin_v4sf v4sf;
    uint128_t uint128;
d855 4
a858 4
  append_composite_type_field (t, "v4sf", builtin_type_v4sf);
  append_composite_type_field (t, "v4si", builtin_type_v4si);
  append_composite_type_field (t, "v8hi", builtin_type_v8hi);
  append_composite_type_field (t, "v16qi", builtin_type_v16qi);
d3314 10
d3325 1
a3325 2
  builtin_type_vec128
    = build_builtin_type_vec128 ();
d3414 7
@


1.45
log
@* stabsread.c (cleanup_undefined_types): Use replace_type, not memcpy.
(read_type): Doc fix.
* gdbtypes.c (replace_type): Doc fix.
@
text
@d524 10
a533 4
   When building recursive types, it is necessary to update a type's
   definition after people already have references to it.  The C
   language's concept of an `incomplete type' is an acknowledgement of
   this.  */
@


1.44
log
@2002-04-24  Elena Zannoni  <ezannoni@@redhat.com>

         * gdbtypes.h (TYPE_FLAG_VECTOR, TYPE_VECTOR): Define.
         * gdbtypes.c (recursive_dump_type): Output the vector flag.
         * dwarf2read.c (dwarf_attr_name): Handle new attribute for
         vectors.
         (read_array_type): Record the fact that this array type is really a
         vector (i.e. are passed in by value).
@
text
@d524 4
a527 4
   This function should not be necessary, but is due to quirks in the stabs
   reader.  This should go away.  It does not handle the replacement type
   being cv-qualified; it could be easily fixed to, but it should go away,
   remember?  */
@


1.43
log
@2002-04-19  Elena Zannoni  <ezannoni@@redhat.com>

        Fix PR gdb/471.
	* gdbtypes.c (init_simd_type): Rewrite using new functions.
	(build_builtin_type_vec128): Ditto..
	(append_composite_type_field): Fix calculation of type length in
	union case.
@
text
@d3034 7
@


1.42
log
@* gdbtypes.c (append_composite_type_field): New function.
(init_composite_type): New function.
* gdbtypes.h (append_composite_type_field): Declare.
(init_composite_type): Ditto.
@
text
@a779 1

d795 9
a803 19
  struct type *t;
  struct field *f;

  /* Build the field structure.  */
  f = xmalloc (sizeof (*f));
  memset (f, 0, sizeof (*f));
  f->loc.bitpos = 0;
  f->type = create_array_type (0, elt_type,
			       create_range_type (0, builtin_type_int,
						  0, n-1));
  f->name = elt_name;

  /* Build a struct type with that field.  */
  t = init_type (TYPE_CODE_STRUCT, n * TYPE_LENGTH (elt_type), 0, 0, 0);
  t->nfields = 1;
  t->fields = f;
  TYPE_TAG_NAME (t) = name;

  return t;
a822 18
  struct field *f;

  f = (struct field *) xcalloc (5, sizeof (*f));

  FIELD_TYPE (f[0]) = builtin_type_int128;
  FIELD_NAME (f[0]) = "uint128";

  FIELD_TYPE (f[1]) = builtin_type_v4sf;
  FIELD_NAME (f[1]) = "v4sf";

  FIELD_TYPE (f[2]) = builtin_type_v4si;
  FIELD_NAME (f[2]) = "v4si";

  FIELD_TYPE (f[3]) = builtin_type_v8hi;
  FIELD_NAME (f[3]) = "v8hi";

  FIELD_TYPE (f[4]) = builtin_type_v16qi;
  FIELD_NAME (f[4]) = "v16qi";
d824 6
a829 5
  /* Build a union type with those fields.  */
  t = init_type (TYPE_CODE_UNION, 16, 0, 0, 0);
  TYPE_NFIELDS (t) = 5;
  TYPE_FIELDS (t) = f;
  TYPE_TAG_NAME (t) = "__gdb_builtin_type_vec128";
d1756 1
a1756 1
      if (TYPE_LENGTH (t) > TYPE_LENGTH (field))
@


1.41
log
@	* gdbtypes.c (build_gdbtypes): Disable setting a specific float format
	on builtin float types.
@
text
@d1756 42
@


1.40
log
@2002-02-03  Daniel Jacobowitz  <drow@@mvista.com>

        * gdbtypes.c (init_simd_type): Use TYPE_TAG_NAME instead of
        accessing tag_name directly.
@
text
@d3156 9
d3166 1
d3171 1
d3173 1
d3178 1
d3180 1
@


1.39
log
@2002-02-01  Daniel Jacobowitz  <drow@@mvista.com>

        PR gdb/280
        * gdbtypes.c (replace_type): New function.
        * gdbtypes.h (replace_type): Add prototype.
        * stabsread.c (read_type): Use replace_type.
@
text
@d812 1
a812 1
  t->tag_name = name;
@


1.38
log
@Initialize the TYPE_FLOATFORMAT field of the h/w floating-point
builtin types.
@
text
@d522 26
@


1.37
log
@2002-01-20  Daniel Jacobowitz  <drow@@mvista.com>

	* buildsym.c: Update copyright years.
	* c-typeprint.c: Likewise.
	* dwarf2read.c: Likewise.
	* f-typeprint.c: Likewise.
	* gdbtypes.c: Likewise.
	* gdbtypes.h: Likewise.
	* hp-symtab-read.c: Likewise.
	* hpread.c: Likewise.
	* mdebugread.c: Likewise.
	* p-typeprint.c: Likewise.
@
text
@d3331 1
d3335 1
d3339 1
d3343 1
d3351 1
d3355 1
d3359 1
d3363 1
d3367 1
d3371 1
d3375 1
d3379 1
d3383 1
d3387 1
@


1.36
log
@2002-01-15  Elena Zannoni  <ezannoni@@redhat.com>

	[Based on work by Jim Blandy]

	* gdbtypes.h (builtin_type_v16qi, builtin_type_v8hi): Export.
	(builtin_type_vec128): Export.

	* gdbtypes.c (builtin_type_v16qi, builtin_type_v8hi): New SIMD
	types.
	(builtin_type_vec128): New builtin type for 128 bit vector
	registers.
	(build_gdbtypes): Initialize builtin_type_v16qi and
	builtin_type_v8hi. Create the vec128 register builtin type
	structure.
	(build_builtin_type_vec128): New function.
 	(_initialize_gdbtypes): Register builtin_type_v16qi and
	builtin_type_v8hi with gdbarch. Same for builtin_type_vec128.

	* rs6000-tdep.c (rs6000_register_virtual_type): Change type of
	AltiVec register to new builtin type.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000
@


1.35
log
@* gdbarch.sh (TARGET_CHAR_SIGNED): New macro.
* gdbarch.c, gdbarch.h: Regenerated.
* gdbtypes.c (build_gdbtypes): If TARGET_CHAR_SIGNED is zero,
set the TYPE_FLAG_UNSIGNED bit on the type.
* s390-tdep.c (s390_gdbarch_init): On the S/390, characters
are unsigned by default.
* rs6000-tdep.c (rs6000_gdbarch_init): Same for PowerPC and
RS6000.
@
text
@d76 1
d78 1
d81 1
d791 44
d3213 2
d3217 2
d3224 4
d3310 1
d3312 1
d3315 1
@


1.34
log
@Approved by Jim Blandy:

	2001-12-11  Fred Fish  <fnf@@redhat.com>
	* c-typeprint.c (c_type_print_base): Use type flags access macros
	to test bits.
	* ch-typeprint.c (chill_type_print_base): Ditto.
	* ch-valprint.c (chill_val_print): Ditto.
	* d10v-tdep.c (d10v_pointer_to_address): Ditto.
	* dwarf2read.c (dwarf2_add_member_fn): Ditto.
	* dwarfread.c (read_structure_scope): Ditto.
	* gdbtypes.c (create_range_type): Dittol
	(create_set_type): Ditto.
	(check_typedef): Ditto.
	* jv-typeprint.c (java_type_print_base): Ditto.
	* p-typeprint.c (pascal_type_print_base): Ditto
	* p-valprint.c (pascal_val_print): Ditto.
	* stabsread.c (read_cfront_member_functions): Ditto.
	(read_member_functions): Ditto.
	(cleanup_undefined_types): Ditto.
	* valprint.c (val_print): Ditto.
	* valops.c (hand_function_call): Remove is_prototyped
	variable and just use type flag test macro directly.
@
text
@d3032 2
a3033 1
	       TYPE_FLAG_NOSIGN,
@


1.33
log
@Approved by Jim Blandy:

	2001-12-11  Fred Fish  <fnf@@redhat.com>

	* gdbtypes.c (print_bound_type): New function.
	(recursive_dump_type): Print type struct code values
	TYPE_CODE_BITSTRING, TYPE_CODE_COMPLEX, TYPE_CODE_TEMPLATE,
	and TYPE_CODE_TEMPLATE_ARG.
	(recursive_dump_type): Print type struct members
	upper_bound_type, lower_bound_type, cv_type, and as_type.
	Also always print the tagname member, even when it is NULL.

	* testsuite/gdb.base/maint.exp: Update to match changes in
	type dumping code.
@
text
@d572 1
a572 1
  if (TYPE_FLAGS (index_type) & TYPE_FLAG_STUB)
d735 1
a735 1
  if (!(TYPE_FLAGS (domain_type) & TYPE_FLAG_STUB))
d1248 1
a1248 1
  else if ((TYPE_FLAGS (type) & TYPE_FLAG_STUB) && !currently_reading_symtab)
d1266 1
a1266 1
  if (TYPE_FLAGS (type) & TYPE_FLAG_TARGET_STUB)
d1271 1
a1271 1
      if (TYPE_FLAGS (target_type) & (TYPE_FLAG_STUB | TYPE_FLAG_TARGET_STUB))
@


1.32
log
@Approved by Jim Blandy:

	2001-12-09  Fred Fish  <fnf@@redhat.com>
	* gdbtypes.c (TYPE_FLAG_UNSIGNED, TYPE_FLAG_STUB): Use
	TYPE_UNSIGNED and TYPE_NOSIGN to determine when to print these
	rather than testing the bits directly.
	(TYPE_FLAG_NOSIGN, TYPE_FLAG_TARGET_STUB, TYPE_FLAG_STATIC,
	TYPE_FLAG_CONST, TYPE_FLAG_VOLATILE, TYPE_FLAG_PROTOTYPED,
	TYPE_FLAG_INCOMPLETE, TYPE_FLAG_CODE_SPACE, TYPE_FLAG_DATA_SPACE,
	TYPE_FLAG_VARARGS): Test for and print these bits as well.
@
text
@d2714 29
d2783 4
a2786 7
  if (TYPE_TAG_NAME (type) != NULL)
    {
      printfi_filtered (spaces, "tagname '%s' (",
			TYPE_TAG_NAME (type));
      gdb_print_host_address (TYPE_TAG_NAME (type), gdb_stdout);
      printf_filtered (")\n");
    }
d2829 3
d2850 3
d2856 6
d2868 8
d2891 6
@


1.31
log
@Approved by Jim Blandy:

	2001-12-09  Fred Fish  <fnf@@redhat.com>
	* gdbtypes.c (build_gdbtypes): For builtin_type_char, pass
	TYPE_FLAG_NOSIGN to init_type() rather than setting it after the
	type is created.
@
text
@d2847 1
a2847 1
  if (TYPE_FLAGS (type) & TYPE_FLAG_UNSIGNED)
d2851 5
a2855 1
  if (TYPE_FLAGS (type) & TYPE_FLAG_STUB)
d2858 36
@


1.30
log
@Approved by Jim Blandy:

	2001-12-09  Fred Fish  <fnf@@redhat.com>
	* gdbtypes.c (allocate_stub_method): Replace hand crafted type
	initialization with call to the init_type() function.
@
text
@d2940 1
a2940 1
	       0,
a2941 1
  TYPE_FLAGS (builtin_type_char) |= TYPE_FLAG_NOSIGN;
@


1.29
log
@        * gdbtypes.c (finish_cv_type): New function.
        (check_typedef): Remove ``register'' keyword from argument.
        Preserve const and volatile attributes across filling in
        opaque types.
        * gdbtypes.h (finish_cv_type): Add prototype.

        * hp-symtab-read.c (hpread_read_struct_type): Call finish_cv_type.
        * stabsread.c (read_struct_type): Likewise.
        * dwarf2read.c (read_structure_scope): Likewise.  Remove redundant
        assignment to die->type.
@
text
@d545 2
a546 1
  mtype = alloc_type (TYPE_OBJFILE (type));
a549 3
  TYPE_FLAGS (mtype) = TYPE_FLAG_STUB;
  TYPE_CODE (mtype) = TYPE_CODE_METHOD;
  TYPE_LENGTH (mtype) = 1;
@


1.28
log
@2001-11-14  Michael Snyder  <msnyder@@redhat.com>
	Add address space identifiers to expression language for types.
	* c-exp.y (space_identifier, cv_with_space_id,
	const_or_volatile_or_space_identifier_noopt,
	const_or_volatile_or_space_identifier): New terminals.
	(ptype): Accept const_or_volatile_or_space_identifier.
	(typebase): Accept const_or_volatile_or_space_identifier.
	* c-typeprint.c (c_type_print_cv_qualifier): Rename to
	c_type_print_modifier.  Handle address space modified types.
	* gdbtypes.h (TYPE_FLAG_CODE_SPACE, TYPE_FLAG_DATA_SPACE):
	New type flags.
	(struct type): Add new field as_type for addr-space qualified types.
	(TYPE_AS_TYPE): New macro, retrieves the chain of types that are
	identical to this one except for address-space qualification.
	* gdbtypes.c (alloc_type): Initialize new field 'as_type'.
	(address_space_name_to_int): New function.
	(address_space_int_to_name): New function.
	(make_type_with_address_space): New function.
	(make_cv_type): Handle as_type field of new struct type object.
	* parse.c (check_type_stack_depth): New function.
	(push_type_address_space): New function.
	(follow_types): Handle types with address-space qualifier.
	* parser-defs.h (enum type_pieces): Add enum tp_space_identifier.
@
text
@d39 1
d473 32
d506 2
d509 9
d1191 1
a1191 1
check_typedef (register struct type *type)
d1194 2
d1228 3
d1247 1
a1247 3
	{
	  memcpy ((char *) type, (char *) newtype, sizeof (struct type));
	}
d1265 1
a1265 3
	{
	  memcpy ((char *) type, (char *) SYMBOL_TYPE (sym), sizeof (struct type));
	}
@


1.27
log
@2001-11-13  Elena Zannoni  <ezannoni@@redhat.com>

	From Andrew Cagney <cagney@@redhat.com>:
	* gdbtypes.h (builtin_type_int128, builtin_type_uint128): Declare.
	* gdbtypes.c (_initialize_gdbtypes, build_gdbtypes): Initialize
	new builtin types.
@
text
@d149 1
d327 67
d451 1
@


1.26
log
@* gdbtypes.c (_initialize_gdbtypes): Set floating-point type for
builtin_type_i387_ext to floatformat_i387_ext.
@
text
@d70 2
d2936 8
a2956 1

d3047 2
@


1.25
log
@* gdbtypes.h (builtin_type_ieee_single_big)
(builtin_type_ieee_single_little, builtin_type_ieee_double_big)
(builtin_type_ieee_double_little)
(builtin_type_ieee_double_littlebyte_bigword)
(builtin_type_i387_ext, builtin_type_m68881_ext)
(builtin_type_i960_ext, builtin_type_m88110_ext)
(builtin_type_m88110_harris_ext, builtin_type_arm_ext_big)
(builtin_type_arm_ext_littlebyte_bigword)
(builtin_type_ia64_spill_big, builtin_type_ia64_spill_little)
(builtin_type_ia64_quad_big)
(builtin_type_ia64_quad_little): Declare.
* gdbtypes.c (builtin_type_ieee_single_big)
(builtin_type_ieee_single_little, builtin_type_ieee_double_big)
(builtin_type_ieee_double_little)
(builtin_type_ieee_double_littlebyte_bigword)
(builtin_type_i387_ext, builtin_type_m68881_ext)
(builtin_type_i960_ext, builtin_type_m88110_ext)
(builtin_type_m88110_harris_ext, builtin_type_arm_ext_big)
(builtin_type_arm_ext_littlebyte_bigword)
(builtin_type_ia64_spill_big, builtin_type_ia64_spill_little)
(builtin_type_ia64_quad_big)
(builtin_type_ia64_quad_little): Define.
(_initialize_gdbtypes): Initialize builtin floatformat types.
@
text
@d3070 1
@


1.24
log
@Add TYPE_FLOATFORMAT().
@
text
@d76 16
d3048 52
@


1.23
log
@* gdbtypes.h (builtin_type_void_data_ptr): Rename
builtin_type_ptr.
* gdbtypes.c (builtin_type_void_data_ptr): Update.
(build_gdbtypes): Update.
(_initialize_gdbtypes): Update.
* values.c (value_as_pointer): Update.
* utils.c (host_pointer_to_address): Update.
(address_to_host_pointer): Update.
@
text
@d2772 10
d2861 1
d2866 1
d2871 1
@


1.22
log
@* gdbtypes.h (builtin_type_void_func_ptr): New builtin type.
* gdbtypes.c (builtin_type_void_func_ptr): Define the variable.
(build_gdbtypes): Initialize it.
(_initialize_gdbtypes): Swap it.
@
text
@d76 1
a76 1
struct type *builtin_type_ptr;
d2959 1
a2959 1
  builtin_type_ptr = make_pointer_type (builtin_type_void, NULL);
d3014 1
a3014 1
  REGISTER_GDBARCH_SWAP (builtin_type_ptr);
@


1.22.2.1
log
@Typesystem work initial import.
Note that this currently isn't building, i'm in the middle of converting make_function_type/lookup_function_type
@
text
@d77 1
d90 1
a90 1
static void add_name (struct extra *, const char *);
d92 3
d101 1
a101 187
static struct type *
alloc_type_internal (struct objfile *objfile, unsigned int size)
{
  register struct type *type;
  if (objfile == NULL)
    {
      type = (struct type *) xmalloc (size);
    }
  else
    {
      type = (struct type *) obstack_alloc (&objfile->type_obstack,
					    size);
      OBJSTAT (objfile, n_types++);
    }
  memset ((char *) type, 0, size);
  return type;
}
struct function_type *
make_function_type (struct objfile *objfile, struct type *return_type, 
		     unsigned char num_args, struct argument_pair **pairs,
		     unsigned char is_varargs)
{
  struct type *new = 
    (struct type *) alloc_type_internal (objfile, 
					 sizeof (struct function_type));
  TYPE_CODE (new) = TYPE_CODE_FUNC;
  TYPE_LENGTH (new) = 1;
  FUNCTION_RETURN_VALUE (new) = return_type;
  FUNCTION_NUM_ARGUMENTS (new) = num_args;
  if (pairs != NULL)
     FUNCTION_ARGUMENTS (new) = *pairs;
  FUNCTION_IS_VARARGS (new) = is_varargs;
  return FUNCTION_TYPE_CAST (new);
}
struct enum_type *
make_enum_type (struct objfile *objfile,  unsigned int numvals, 
		struct enum_pair ** pairs)
{
  int i;
  struct type *new = (struct type *) alloc_type_internal (objfile, 
							  sizeof (struct enum_type));
  TYPE_CODE (new) = TYPE_CODE_ENUM;
  TYPE_LENGTH (new) = TARGET_INT_BIT / HOST_CHAR_BIT;
  ENUM_NUM_VALUES (new) = numvals;
  ENUM_VALUES (new) = *pairs;
  SIGNED_TYPE_SIGN (new) = ST_unsigned;
  for (i = 0; i < ENUM_NUM_VALUES (new); i++)
    if (ENUM_VALUE_VALUE (new, i) < 0)
      {
	SIGNED_TYPE_SIGN (new) = ST_signed;
	break;
      }
  
  return ENUM_TYPE_CAST (new);
}
struct array_type *
make_string_type (struct objfile *objfile, struct range_type *range_type)
{
  struct type *new = (struct type *) 
    make_array_type (objfile, *current_language->string_char_type, range_type);
  TYPE_CODE (new) = TYPE_CODE_STRING;
  return ARRAY_TYPE_CAST (new);
}
struct set_type *
make_set_type (struct objfile *objfile, struct range_type *range_type)
{
  struct type *new = (struct type *) 
    alloc_type_internal (objfile, sizeof (struct set_type));
  LONGEST bit_length;
  if (! TYPE_FLAGS (range_type) & TYPE_FLAG_STUB)
    {
      bit_length = 
	(RANGE_UPPER_BOUND (range_type))-(RANGE_LOWER_BOUND (range_type)) + 1;
      TYPE_LENGTH (new) = (bit_length + TARGET_CHAR_BIT - 1) / TARGET_CHAR_BIT;
    }
  TYPE_CODE (new) = TYPE_CODE_SET;
  SET_RANGE_TYPE (new) = range_type;
  return SET_TYPE_CAST (new);
}
struct array_type *
make_array_type (struct objfile *objfile, struct type *element_type, 
		 struct range_type *range_type)
{
  struct type *new = alloc_type_internal (objfile, sizeof (struct array_type));

  TYPE_CODE (new) = TYPE_CODE_ARRAY;
  ARRAY_ELEMENT_TYPE (new) = element_type;
  ARRAY_RANGE_TYPE (new) = range_type;
  TYPE_LENGTH (new) = TYPE_LENGTH (element_type) * 
    (RANGE_UPPER_BOUND (range_type) - RANGE_LOWER_BOUND (range_type) + 1);
  
  /* TYPEFIX - What to do here?  TYPE_FLAGS_TARGET_STUB seems wrong. */
  if (TYPE_LENGTH (new) == 0)
    /*
      error ("Need to handle zero length arrays properly!");
    */
	  TYPE_FLAGS (new) |= TYPE_FLAG_TARGET_STUB;
  return (ARRAY_TYPE_CAST (new));
}
struct range_type *
make_range_type (struct objfile *objfile,  struct type *index_type,
		 int lower_bound, int upper_bound)
{
  struct type *new = alloc_type_internal (objfile, sizeof (struct range_type));

  TYPE_CODE (new) = TYPE_CODE_RANGE;
  RANGE_UPPER_BOUND (new) = upper_bound;
  RANGE_LOWER_BOUND (new) = lower_bound;
  RANGE_INDEX_TYPE (new) = index_type;
  TYPE_LENGTH (new) = TYPE_LENGTH (check_typedef (index_type));
  return (RANGE_TYPE_CAST (new));
}
struct void_type *
make_void_type (struct objfile *objfile, const char *name)
{
  struct type *new = alloc_type_internal (objfile, sizeof (struct void_type));
  TYPE_CODE (new) = TYPE_CODE_VOID;
  TYPE_LENGTH (new) = 1;
  TYPE_NAME (new) = name;
  return VOID_TYPE_CAST (new);
}

struct boolean_type *
make_boolean_type (struct objfile *objfile, const char *name)
{
  struct type *new = alloc_type_internal (objfile, 
					  sizeof (struct boolean_type));
  TYPE_CODE (new) = TYPE_CODE_BOOL;
  TYPE_LENGTH (new) = 1;
  TYPE_NAME (new) = name;
  return BOOLEAN_TYPE_CAST (new);
}
  
struct character_type *
make_character_type (struct objfile *objfile, const char *name, 
		     unsigned int length, enum sign_type sign)
{
  struct type *new = alloc_type_internal (objfile, 
					  sizeof (struct character_type));
  TYPE_CODE (new) = TYPE_CODE_CHAR;
  TYPE_LENGTH(new) = length;
  TYPE_NAME(new) = name;
  SIGNED_TYPE_SIGN(new) = sign;
  return CHARACTER_TYPE_CAST (new);
}
struct integer_type *
make_integer_type (struct objfile *objfile, const char *name, 
		   unsigned int length, enum sign_type sign)
{
  struct type *new = alloc_type_internal (objfile, 
					  sizeof (struct integer_type));
  TYPE_CODE (new) = TYPE_CODE_INT;
  TYPE_LENGTH(new) = length;
  TYPE_NAME(new) = name;
  SIGNED_TYPE_SIGN(new) = sign;
  return INTEGER_TYPE_CAST (new);
}
struct pointer_type *
make_reference_type (struct objfile *objfile, struct type *target)
{
  struct type *new;
  
  if (TYPE_REFERENCE_TYPE (target) != NULL)
    return POINTER_TYPE_CAST (TYPE_REFERENCE_TYPE (target));
  
  new = alloc_type_internal (objfile, sizeof (struct pointer_type));
  TYPE_CODE (new) = TYPE_CODE_REF;
  TYPE_LENGTH (new) = TARGET_PTR_BIT / TARGET_CHAR_BIT;
  POINTER_TARGET_TYPE (new) = target;
  TYPE_REFERENCE_TYPE (target) = new;
  return POINTER_TYPE_CAST (new);
}
struct pointer_type *
make_pointer_type (struct objfile *objfile, struct type *target)
{
  struct type *new;

  if (TYPE_POINTER_TYPE (target) != NULL)
    return POINTER_TYPE_CAST (TYPE_POINTER_TYPE (target));

  new = alloc_type_internal (objfile, sizeof (struct pointer_type));
  TYPE_CODE (new) = TYPE_CODE_PTR;
  TYPE_LENGTH (new) = TARGET_PTR_BIT / TARGET_CHAR_BIT;
  POINTER_TARGET_TYPE (new) = target;
  TYPE_POINTER_TYPE (target) = new;
  return POINTER_TYPE_CAST (new);
}
d114 1
d116 1
d126 1
a126 7
  
  if (current_language->la_language == language_cplus)
    INIT_CPLUS_SPECIFIC (type);
  else if (current_language->la_language == language_fortran)
    INIT_FORTRAN_SPECIFIC (type);
  else
    INIT_CPLUS_SPECIFIC (type);
d129 1
a130 2
  TYPE_VPTR_FIELDNO (type) = -1;
  TYPE_VPTR_BASETYPE (type) = NULL;
d134 59
d199 55
a253 1
  return (struct type *)make_pointer_type (NULL, type);
d255 1
d261 1
a261 1
  return (struct type *)make_reference_type (NULL, type);
d263 1
a263 1
#if 0
d307 1
a307 1
#endif
d327 1
a327 1
  
d344 1
a344 1
  
d424 198
d635 1
a635 1
		const char *elt_name,
d645 2
a646 2
  f->type = (struct type *)make_array_type (NULL, elt_type,
			       make_range_type (NULL, builtin_type_int,
d648 2
a649 1
  TYPE_NAME (f->type) = elt_name;
d652 3
a654 3
  TYPE_NFIELDS(t) = 1;
  TYPE_FIELDS(t) = f;
  TYPE_TAG_NAME(t) = name;
a701 1
  ALLOCATE_CPLUS_STRUCT_TYPE (type);
d713 1
a713 1
const char *
d729 1
a729 1
lookup_primitive_typename (const char *name)
d735 1
a735 1
      if (STREQ (TYPE_NAME((**p)), name))
d748 1
a748 1
lookup_typename (const char *name, struct block *block, int noerr)
d758 3
a760 1
	return (tmp);
d762 3
a764 1
	return (NULL);
d766 3
a768 1
	error ("No type named %s.", name);
d774 1
a774 1
lookup_unsigned_typename (const char *name)
d784 1
a784 1
lookup_signed_typename (const char *name)
d810 1
d812 1
d814 1
d816 1
d844 1
a844 1
    if (TYPE_DECLARED_TYPE (t) == DT_union)
d863 1
d865 1
d867 1
d869 1
d877 1
a877 1
lookup_template_type (const char *name, struct type *type, struct block *block)
d880 1
a880 1
  char *nam = (char *) alloca (strlen (name) + strlen (TYPE_NAME(type)) + 4);
d883 1
a883 1
  strcat (nam, TYPE_NAME(type));
d889 1
d891 1
d893 1
d895 1
d901 4
a904 6
   TYPE can be either a struct or union, or a pointer or reference to
   a struct or union.  If it is a pointer or reference, its target
   type is automatically used. 
   Thus '.' and '->' are interchangable, as specified for the
   definitions of the expression element types STRUCTOP_STRUCT and
   STRUCTOP_PTR. 
d920 1
a920 1
      type = POINTER_TARGET_TYPE (type);
d970 1
d972 1
d999 1
a999 1
      
d1067 1
a1067 1
	  const char *name;
d1076 1
a1076 1
	  /* TYPEFIX: shouldn't we separately check the TYPE_NAME and the
a1086 2

	  /* TYPEFIX */
d1090 1
a1090 1
	    TYPE_TARGET_TYPE (type) = alloc_type (NULL);
d1100 1
a1100 3
  if (TYPE_IS_OPAQUE (type) 
      && opaque_type_resolution 
      && !currently_reading_symtab)
d1102 1
a1102 1
      const char *name = type_name_no_tag (type);
a1109 3

      /* TYPEFIX -- VERY VERY VERY VERY VERY BAD IDEA. NOT VALID AT
	 ALL ANYMORE. IT WAS A SUCKY IDEA THEN, TOO.*/
d1118 2
a1119 2
      const char *name = type_name_no_tag (type);
      /* TYPEFIX: shouldn't we separately check the TYPE_NAME and the
a1129 1
      /* TYPEFIX: VERY VERY VERY VERY VERY VERY VERY VERY bad */
d1131 3
a1133 1
	memcpy ((char *) type, (char *) SYMBOL_TYPE (sym), sizeof (struct type));
d1138 2
a1139 6
      struct range_type *range_type;
      struct type *target_type;
      if (TYPE_CODE (type) ==  TYPE_CODE_SET)
	target_type = check_typedef ((struct type *)SET_RANGE_TYPE (type));
      else
	target_type = check_typedef ((struct type *)ARRAY_RANGE_TYPE (type));
d1146 1
a1146 1
	       && (TYPE_CODE (range_type = ARRAY_RANGE_TYPE (type))
d1152 2
a1153 2
	    ((RANGE_UPPER_BOUND (range_type)
	      - RANGE_LOWER_BOUND (range_type)
d1174 1
a1174 1
add_name (struct extra *pextras, const char *n)
d1189 1
a1189 1
  const char *tname;
d1213 1
a1213 2
	    if ((pname = strrchr (tname, 'l'), pname) 
		&& !strcmp (pname, "long"))
d1225 3
a1227 2
	    static struct complaint msg = 
	      {"Bad int type code length x%x\n", 0, 0};
d1230 1
d1265 1
a1265 1
	  {"Typedefs in overloaded functions not yet supported\n", 0, 0};
d1289 1
d1304 2
a1305 1
	static struct complaint msg = {"Unknown type code x%x\n", 0, 0};
d1309 50
a1358 2
  if (TYPE_TARGET_TYPE(t))
    add_mangled_type (pextras, TYPE_TARGET_TYPE(t));
d1360 1
d1381 1
a1381 1
  
d1390 1
a1390 1
   
d1416 1
a1416 1
  
d1419 1
a1419 1
  
d1426 3
a1428 1
	depth += 1;
d1430 3
a1432 1
	depth -= 1;
d1434 4
a1437 2
	argcount += 1;
      
d1447 1
a1447 1
  /* TYPEFIX: This is wrong for static member functions.  */
d1469 3
a1471 1
	    depth += 1;
d1473 3
a1475 1
	    depth -= 1;
d1482 3
a1484 1
    argtypes[argcount] = builtin_type_void;	/* List terminator */
d1486 3
a1488 1
    argtypes[argcount] = NULL;	/* Ellist terminator */
d1495 1
a1495 1
  
a1503 13
const struct fortran_struct_type fortran_struct_default;

void
allocate_fortran_struct_type (struct type *type)
{
  if (!HAVE_FORTRAN_STRUCT (type))
    {
      TYPE_FORTRAN_SPECIFIC (type) = (struct fortran_struct_type *)
	TYPE_ALLOC (type, sizeof (struct fortran_struct_type));
      *(TYPE_FORTRAN_SPECIFIC (type)) = fortran_struct_default;
    }
}

a1513 1
      TYPE_VPTR_FIELDNO (type) = -1;
d1518 1
a1518 1
   
d1535 4
a1538 2
    TYPE_NAME (type) = obsavestring (name, strlen (name), 
				     &objfile->type_obstack);
d1540 4
a1543 2
    TYPE_NAME (type) = name;
  
d1546 4
a1549 4
  if (code == TYPE_CODE_ARRAY 
      && current_language->la_language == language_fortran)
    INIT_FORTRAN_SPECIFIC (type);

d1581 3
a1583 1
    error ("internal error - invalid fundamental type id %d", typeid);
d1602 1
d1604 1
d1608 1
a1608 1
/* Returns true for references and pointers */
d1612 1
d1616 2
a1617 2
     && (TYPE_CODE (t) == TYPE_CODE_PTR || TYPE_CODE (t) == TYPE_CODE_REF)    
     && TYPE_CODE (POINTER_TARGET_TYPE (t)) != TYPE_CODE_VOID);
d1668 1
a1668 1
  
d1826 1
a1826 3
  for (i = 0, tmp_vbase = current_vbase_list; 
       tmp_vbase != NULL; 
       i++, tmp_vbase = tmp_vbase->next)
d1831 1
a1831 2
  vbase_array = (struct type **) 
    xmalloc ((count + 1) * sizeof (struct type *));
d1833 1
a1833 3
  for (i = count - 1, tmp_vbase = current_vbase_list; 
       i >= 0; 
       i--, tmp_vbase = tmp_vbase->next)
d1860 1
a1860 3
  for (i = 0, tmp_vbase = current_vbase_list; 
       tmp_vbase != NULL; 
       i++, tmp_vbase = tmp_vbase->next)
d1884 1
a1884 3
  for (i = 0, tmp_vbase = current_vbase_list; 
       tmp_vbase != NULL; 
       tmp_vbase = tmp_vbase->next)
d1946 1
a1946 2
      if (!primary 
	  || (virtual_base_index_skip_primaries (vbase, primary) < 0))
d2036 6
a2041 4
    if (found_neg)
      return 1;		/* incomparable */
    else
      return 3;		/* A > B */
d2044 6
a2049 4
    if (found_neg)
      return 2;		/* A < B */
    else
      return 0;		/* A == B */
d2149 1
a2149 1
	  if (TYPE_CODE (POINTER_TARGET_TYPE (parm)) == TYPE_CODE_VOID)
d2152 1
a2152 1
	    return rank_one_type (POINTER_TARGET_TYPE (parm), POINTER_TARGET_TYPE (arg));
d2154 1
a2154 1
	  return rank_one_type (POINTER_TARGET_TYPE (parm), ARRAY_ELEMENT_TYPE (arg));
d2156 1
a2156 1
	  return rank_one_type (POINTER_TARGET_TYPE (parm), arg);
a2169 1
	  return rank_one_type (ARRAY_ELEMENT_TYPE (parm), POINTER_TARGET_TYPE (arg));
d2171 1
a2171 1
	  return rank_one_type (ARRAY_ELEMENT_TYPE (parm), ARRAY_ELEMENT_TYPE (arg));
d2179 1
a2179 1
	  return rank_one_type (parm, POINTER_TARGET_TYPE (arg));
a2368 3
	  /* If they have the same name, and are different, it's a violation of the ODR. */
	  if (!strcmp (TYPE_TAG_NAME (arg), TYPE_TAG_NAME (parm)))
	    return 0;
a2380 3
	  /* If they have the same name, and are different, it's a violation of the ODR. */
	  if (!strcmp (TYPE_NAME (arg), TYPE_NAME (parm)))
	    return 0;
d2464 1
a2464 1
	  if (TYPE_CODE((*args++)) == TYPE_CODE_VOID)
d2622 1
a2622 1
  gdb_print_host_address ((char *)TYPE_NAME (type), gdb_stdout);
a2702 1
#if TYPEFIX
a2705 1
#endif
d2717 1
a2717 3
  if (TYPE_CAN_BE_SIGNED (type))
  {
    if (TYPE_UNSIGNED (type))
d2719 1
a2719 1
      puts_filtered (" TYPE_UNSIGNED");
a2720 1
  }
d2747 3
d2751 3
a2753 6
  {
	  printfi_filtered (spaces, "vptr_basetype ");
	  gdb_print_host_address (TYPE_VPTR_BASETYPE (type), gdb_stdout);
	  puts_filtered ("\n");
	  recursive_dump_type (TYPE_VPTR_BASETYPE (type), spaces + 2);
  }
d2757 1
a2758 4
      break;
      
    case TYPE_CODE_METHOD:

d2799 4
a2802 1
    (struct type *)make_integer_type (NULL, "char", TARGET_CHAR_BIT / TARGET_CHAR_BIT, ST_nosign);
d2804 3
a2806 2
    (struct type *)make_character_type (NULL, "true character", TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       ST_signed);
d2808 7
a2814 4
    (struct type *)make_character_type (NULL, "signed char", TARGET_CHAR_BIT / TARGET_CHAR_BIT, ST_signed);
  builtin_type_unsigned_char = 
    (struct type *)make_character_type (NULL, "unsigned char", TARGET_CHAR_BIT / TARGET_CHAR_BIT, ST_unsigned);
  
d2816 3
a2818 1
    (struct type *)make_integer_type (NULL, "short", TARGET_SHORT_BIT / TARGET_CHAR_BIT, ST_signed);
d2820 3
a2822 1
    (struct type *)make_integer_type (NULL, "unsigned short", TARGET_SHORT_BIT / TARGET_CHAR_BIT, ST_unsigned);
d2824 3
a2826 1
    (struct type *)make_integer_type (NULL, "int", TARGET_INT_BIT / TARGET_CHAR_BIT, ST_signed);
d2828 3
a2830 1
    (struct type *)make_integer_type (NULL, "unsigned int", TARGET_INT_BIT / TARGET_CHAR_BIT, ST_unsigned);
d2832 3
a2834 1
    (struct type *)make_integer_type (NULL, "long", TARGET_LONG_BIT / TARGET_CHAR_BIT, ST_signed);
d2836 3
a2838 1
    (struct type *)make_integer_type (NULL, "unsigned long", TARGET_LONG_BIT / TARGET_CHAR_BIT, ST_unsigned);
d2840 3
a2842 1
    (struct type *)make_integer_type (NULL, "long long", TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT, ST_signed);
d2844 3
a2846 1
    (struct type *)make_integer_type (NULL, "unsigned long long", TARGET_LONG_LONG_BIT / TARGET_CHAR_BIT, ST_unsigned);
d2874 3
a2876 1
    (struct type *)make_integer_type (NULL, "int8_t", 8 / 8, ST_signed);
d2878 3
a2880 1
    (struct type *)make_integer_type (NULL, "uint8_t", 8 / 8, ST_unsigned);
d2882 3
a2884 1
    (struct type *)make_integer_type (NULL, "int16_t", 16 / 8, ST_signed);
d2886 3
a2888 1
    (struct type *)make_integer_type (NULL, "uint16_t", 16 / 8, ST_unsigned);
d2890 3
a2892 1
    (struct type *)make_integer_type (NULL, "int32_t", 32 / 8, ST_signed);
d2894 3
a2896 1
    (struct type *)make_integer_type (NULL, "uint32_t", 32 / 8, ST_unsigned);
d2898 3
a2900 1
    (struct type *)make_integer_type (NULL, "int64_t", 64 / 8, ST_signed);
d2902 3
a2904 1
    (struct type *)make_integer_type (NULL, "uint64_t", 64 / 8, ST_unsigned);
d2932 30
a2961 5
  /* NOTE: At present there is no way of differentiating between at
     target address and the target C language pointer type type even
     though the two can be different (cf d10v) */
  builtin_type_ptr = (struct type *)make_pointer_type (NULL, builtin_type_void);
  
d2963 3
a2965 2
    (struct type *)make_integer_type (NULL, "__CORE_ADDR", 
				      TARGET_ADDR_BIT / 8, ST_unsigned);
d2967 3
a2969 2
    (struct type *)make_integer_type (NULL, "__bfd_vma", 
				      TARGET_BFD_VMA_BIT / 8, ST_unsigned);
d3015 1
d3019 1
a3019 1
  
@


1.21
log
@Always initialize `p'.
@
text
@d77 1
d2932 27
a2958 3
  /* NOTE: At present there is no way of differentiating between at
     target address and the target C language pointer type type even
     though the two can be different (cf d10v) */
d2960 2
d3015 1
@


1.20
log
@(Changes from Daniel Berlin, with revisions by Jim Blandy.)

Abstract out operations specific to particular C++ ABI's, and
invoke them through a function table.  This removes the C++ ABI
dependencies scattered throughout the code, and allows us to
cleanly add support for new C++ ABI's.
* cp-abi.h, cp-abi.h, gnu-v2-abi.c, hpacc-abi.c: New files.
* c-typeprint.c, c-valprint.c, dbxread.c, eval.c, gdbtypes.c,
jv-typeprint.c, linespec.c, symtab.c, typeprint.c, valops.c:
#include "cp-abi.h".  These files all use functions now declared
there.
* symtab.h (OPNAME_PREFIX_P, VTBL_PREFIX_P, DESTRUCTOR_PREFIX_P):
Deleted.  These services are now provided by functions declared in
cp-abi.h.
* value.h (value_rtti_type, value_virtual_fn_field): Same.
* values.c (value_virtual_fn_field): Same, for this definition.
* valops.c (value_rtti_type): Same.
* c-typeprint.c (c_type_print_base): Use the functions from
"cp-abi.h", instead of the old macros, or hard-coded ABI-specific
tests.
* dbxread.c (record_minimal_symbol): Same.
* gdbtypes.c (get_destructor_fn_field, virtual_base_index,
virtual_base_index_skip_primaries): Same.
* jv-typeprint.c (java_type_print_base): Same.
* linespec.c (find_methods, decode_line_1): Same.
* symtab.c (gdb_mangle_name): Same.
* Makefile.in (SFILES): Add the new .c files mentioned above.
(cp_abi_h): New variable.
(COMMON_OBS): Add gnu-v2-abi.o, hpacc-abi.o, and cp-abi.o.
(cp-abi.o, gnu-v2-abi.o, hpacc-abi.o): New targets.
(c-typeprint.o, c-valprint.o, dbxread.o, eval.o, gdbtypes.o,
jv-typeprint.o, symtab.o, linespec.o, typeprint.o, valops.o): Add
dependency on $(cp_abi_h).
@
text
@d1413 2
@


1.19
log
@malloc() -> xmalloc.
Move malloc() decl to utils.c
@
text
@d38 1
d1031 1
a1031 1
	  if (DESTRUCTOR_PREFIX_P (TYPE_FN_FIELD_PHYSNAME (f, j)))
d1906 1
a1906 1
  vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[0];
d1911 1
a1911 1
      vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[++i];
d1940 1
a1940 1
  vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[0];
d1947 1
a1947 1
      vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[++i];
@


1.18
log
@2001-03-06  J.T. Conklin  <jtc@@redback.com>

        * symtab.h (decode_line_1): Removed declaration.

        * symfile.c (#include <assert.h>): Removed.

        * arch-utils.c (#include <ctype.h>): Removed.
        * c-typeprint.c: Likewise.
        * dbxread.c: Likewise.
        * gdbtypes.c: Likewise.
        * target.c: Likewise.
        * os9kread.c: Likewise.

        * c-valprint.c (#include "demangle.h"): Removed.
        * ch-typeprint.c: Likewise.
        * eval.c: Likewise.
        * f-typeprint.c: Likewise.
        * f-valprint.c: Likewise.
        * m2-typeprint.c: Likewise.
        * typeprint.c: Likewise.
        * p-typeprint.c: Likewise.
        * valarith.c: Likewise.
        * valprint.c: Likewise.

        * m2-typeprint.c (#include "gdb_string.h"): Removed.
        * nlmread.c: Likewise.

        * mdebugread.c (#include "gdb-stabs.h"): Removed.
        * minsyms.c: Likewise.
        * mipsread.c: Likewise.
        * nlmread.c: Likewise.

        * m2-typeprint.c (#include "obstack.h"): Removed.
        * m2-valprint.c: Likewise.

        * event-loop.c (#include <setjmp.h>): Removed.
@
text
@d1353 1
a1353 2
      arm_mangled_name = malloc (strlen (mangled_name) + extras.len);
      sprintf (arm_mangled_name, "%s%s", mangled_name, extras.str);
@


1.17
log
@Update/correct copyright notices.
@
text
@a1167 1
#include <ctype.h>
@


1.16
log
@Replace free() with xfree().
@
text
@d2 2
a3 1
   Copyright (C) 1992, 93, 94, 95, 96, 1998 Free Software Foundation, Inc.
@


1.15
log
@* remote.c (remote_write_bytes): Add default case to switch
initializing ``todo''. Ditto for ``nr_bytes''.
* top.c (catch_errors): Always initialize ``val''.
* solib.c (info_sharedlibrary_command): Handle bfd_get_arch_size
returning an unknown size.
* gdbtypes.c (count_virtual_fns): Always initialize ``vfuncs''.
* breakpoint.c (break_at_finish_at_depth_command_1): Initialise
extra_args to NULL.
(break_at_finish_command_1): Ditto.
@
text
@d1355 1
a1355 1
      free (mangled_name);
d1487 1
a1487 1
  free (demangled_name);
d1838 1
a1838 1
      free (tmp_vbase_2);
@


1.14
log
@
Corrected spelling in comment: extention-> to extension.
@
text
@d1989 2
@


1.13
log
@Fri Aug 25 12:11:21 2000  David Taylor  <taylor@@texas.cygnus.com>

	* symtab.c (search_symbols): Fix off by one error in index for
 	initializing variables ourtype, ourtype2, ourtype3, and ourtype4.
	(symtab_symbol_info): fix similar off by one error.

Fri Aug 25 12:03:15 2000  David Taylor  <taylor@@texas.cygnus.com>

	* gdbarch.sh (TARGET_ADDR_BIT): New macro for the number
	of bits in gdb's representation of a target address.
	* gdbarch.c, gdbarch.h: Regenerated.
	* gdbtypes.c (build_gdbtypes): Use TARGET_ADDR_BIT instead of
 	TARGET_PTR_BIT when initializing builtin_type_CORE_ADDR.
	* printcmd.c (print_address_numeric): Use TARGET_ADDR_BIT instead
 	of TARGET_PTR_BIT, because we're printing an address, not a pointer.
@
text
@d85 1
a85 1
  };				/* maximum extention is 128! FIXME */
@


1.12
log
@Protoization.
@
text
@d2932 1
a2932 1
    init_type (TYPE_CODE_INT, TARGET_PTR_BIT / 8,
@


1.11
log
@Cast integers into pointers before converting them into canonical
addresses.
@
text
@d104 1
a104 2
alloc_type (objfile)
     struct objfile *objfile;
d138 1
a138 3
make_pointer_type (type, typeptr)
     struct type *type;
     struct type **typeptr;
d194 1
a194 2
lookup_pointer_type (type)
     struct type *type;
d205 1
a205 3
make_reference_type (type, typeptr)
     struct type *type;
     struct type **typeptr;
d256 1
a256 2
lookup_reference_type (type)
     struct type *type;
d267 1
a267 3
make_function_type (type, typeptr)
     struct type *type;
     struct type **typeptr;
d300 1
a300 2
lookup_function_type (type)
     struct type *type;
d317 1
a317 5
make_cv_type (cnst, voltl, type, typeptr)
     int cnst;
     int voltl;
     struct type *type;
     struct type **typeptr;
d391 1
a391 3
lookup_member_type (type, domain)
     struct type *type;
     struct type *domain;
d407 1
a407 2
allocate_stub_method (type)
     struct type *type;
d431 2
a432 5
create_range_type (result_type, index_type, low_bound, high_bound)
     struct type *result_type;
     struct type *index_type;
     int low_bound;
     int high_bound;
d464 1
a464 3
get_discrete_bounds (type, lowp, highp)
     struct type *type;
     LONGEST *lowp, *highp;
d538 2
a539 4
create_array_type (result_type, element_type, range_type)
     struct type *result_type;
     struct type *element_type;
     struct type *range_type;
d580 1
a580 3
create_string_type (result_type, range_type)
     struct type *result_type;
     struct type *range_type;
d590 1
a590 3
create_set_type (result_type, domain_type)
     struct type *result_type;
     struct type *domain_type;
d668 2
a669 4
smash_to_member_type (type, domain, to_type)
     struct type *type;
     struct type *domain;
     struct type *to_type;
d691 2
a692 5
smash_to_method_type (type, domain, to_type, args)
     struct type *type;
     struct type *domain;
     struct type *to_type;
     struct type **args;
d711 1
a711 2
type_name_no_tag (type)
     register const struct type *type;
d726 1
a726 2
lookup_primitive_typename (name)
     char *name;
d745 1
a745 4
lookup_typename (name, block, noerr)
     char *name;
     struct block *block;
     int noerr;
d771 1
a771 2
lookup_unsigned_typename (name)
     char *name;
d781 1
a781 2
lookup_signed_typename (name)
     char *name;
d799 1
a799 3
lookup_struct (name, block)
     char *name;
     struct block *block;
d821 1
a821 3
lookup_union (name, block)
     char *name;
     struct block *block;
d853 1
a853 3
lookup_enum (name, block)
     char *name;
     struct block *block;
d874 1
a874 4
lookup_template_type (name, type, block)
     char *name;
     struct type *type;
     struct block *block;
d907 1
a907 4
lookup_struct_elt_type (type, name, noerr)
     struct type *type;
     char *name;
     int noerr;
d989 1
a989 2
fill_in_vptr_fieldno (type)
     struct type *type;
d1018 1
a1018 4
get_destructor_fn_field (t, method_indexp, field_indexp)
     struct type *t;
     int *method_indexp;
     int *field_indexp;
d1057 1
a1057 2
check_typedef (type)
     register struct type *type;
d1172 1
a1172 3
add_name (pextras, n)
     struct extra *pextras;
     char *n;
d1183 1
a1183 3
add_mangled_type (pextras, t)
     struct extra *pextras;
     struct type *t;
d1313 1
a1313 4
cfront_mangle_name (type, i, j)
     struct type *type;
     int i;
     int j;
d1399 1
a1399 4
check_stub_method (type, method_id, signature_id)
     struct type *type;
     int method_id;
     int signature_id;
d1504 1
a1504 2
allocate_cplus_struct_type (type)
     struct type *type;
d1522 2
a1523 6
init_type (code, length, flags, name, objfile)
     enum type_code code;
     int length;
     int flags;
     char *name;
     struct objfile *objfile;
d1572 1
a1572 3
lookup_fundamental_type (objfile, typeid)
     struct objfile *objfile;
     int typeid;
d1607 1
a1607 2
can_dereference (t)
     struct type *t;
d1618 1
a1618 2
is_integral_type (t)
     struct type *t;
d1637 1
a1637 2
chill_varying_type (type)
     struct type *type;
d1653 1
a1653 3
is_ancestor (base, dclass)
     struct type *base;
     struct type *dclass;
d1680 1
a1680 2
has_vtable (dclass)
     struct type *dclass;
d1722 1
a1722 2
primary_base_class (dclass)
     struct type *dclass;
d1754 1
a1754 2
virtual_base_list_aux (dclass)
     struct type *dclass;
d1812 1
a1812 2
virtual_base_list (dclass)
     struct type *dclass;
d1849 1
a1849 2
virtual_base_list_length (dclass)
     struct type *dclass;
d1867 1
a1867 2
virtual_base_list_length_skip_primaries (dclass)
     struct type *dclass;
d1896 1
a1896 3
virtual_base_index (base, dclass)
     struct type *base;
     struct type *dclass;
d1926 1
a1926 3
virtual_base_index_skip_primaries (base, dclass)
     struct type *base;
     struct type *dclass;
d1958 1
a1958 2
class_index_in_primary_list (dclass)
     struct type *dclass;
d1980 1
a1980 2
count_virtual_fns (dclass)
     struct type *dclass;
d2009 1
a2009 3
compare_badness (a, b)
     struct badness_vector *a;
     struct badness_vector *b;
d2052 1
a2052 5
rank_function (parms, nparms, args, nargs)
     struct type **parms;
     int nparms;
     struct type **args;
     int nargs;
d2093 1
a2093 3
rank_one_type (parm, arg)
     struct type *parm;
     struct type *arg;
d2424 1
a2424 3
print_bit_vector (bits, nbits)
     B_TYPE *bits;
     int nbits;
d2452 1
a2452 3
print_arg_types (args, spaces)
     struct type **args;
     int spaces;
d2468 1
a2468 3
dump_fn_fieldlists (type, spaces)
     struct type *type;
     int spaces;
d2531 1
a2531 3
print_cplus_stuff (type, spaces)
     struct type *type;
     int spaces;
d2582 1
a2582 3
recursive_dump_type (type, spaces)
     struct type *type;
     int spaces;
d2787 1
a2787 1
build_gdbtypes ()
d2944 1
a2944 1
_initialize_gdbtypes ()
@


1.10
log
@	* gdbtypes.c (is_ancestor): Infer type equivalence from name
	equivalence.
	(rank_one_type): Use strcmp instead of == to compare type names.
	Don't swap parm with arg when checking TYPE_CODE_REF types.
	* valops.c (find_overload_match): Fix indentation.  Compare
	parameter rankings to 0..9, 10..99, and 100+ instead of 0, 10,
	and 100.
@
text
@d182 3
a184 1
  /* pointers are unsigned */
d3039 1
a3039 4
  builtin_type_ptr =
    init_type (TYPE_CODE_INT, TARGET_PTR_BIT / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__ptr", (struct objfile *) NULL);
@


1.9
log
@PARAMS removal.
@
text
@d1739 3
d2212 2
a2213 1
  if (TYPE_NAME (parm) == TYPE_NAME (arg))
d2223 1
a2223 1
    return (rank_one_type (TYPE_TARGET_TYPE (arg), parm)
d2226 1
a2226 1
    return (rank_one_type (arg, TYPE_TARGET_TYPE (parm))
@


1.8
log
@C++ changes for 5.0, finally committed.
@
text
@d87 2
a88 2
static void add_name PARAMS ((struct extra *, char *));
static void add_mangled_type PARAMS ((struct extra *, struct type *));
d90 1
a90 1
static void cfront_mangle_name PARAMS ((struct type *, int, int));
d92 5
a96 5
static void print_bit_vector PARAMS ((B_TYPE *, int));
static void print_arg_types PARAMS ((struct type **, int));
static void dump_fn_fieldlists PARAMS ((struct type *, int));
static void print_cplus_stuff PARAMS ((struct type *, int));
static void virtual_base_list_aux PARAMS ((struct type * dclass));
d2888 1
a2888 1
static void build_gdbtypes PARAMS ((void));
d3048 1
a3048 1
extern void _initialize_gdbtypes PARAMS ((void));
@


1.7
log
@	* gdbtypes.c (safe_parse_type): New wrapper function to ignore
	error() during parse_and_eval_type().
	(check_stub_method): Call safe_parse_type instead of
	parse_and_eval_type().
	* wrapper.c (gdb_parse_and_eval_type): New wrapper function.
	(wrap_parse_and_eval_type): New support function.
	* wrapper.h (gdb_parse_and_eval_type): Prototype.
	(wrap_parse_and_eval_type): Prototype.
@
text
@d1487 1
a1487 1
      if (*p == '(')
d1491 1
a1491 1
      else if (*p == ')')
d1530 1
a1530 1
	  if (*p == '(')
d1534 1
a1534 1
	  else if (*p == ')')
d2201 10
@


1.6
log
@The set debug changes
@
text
@d36 1
d1426 24
d1524 1
a1524 1
		    parse_and_eval_type (argtypetext, p - argtypetext);
@


1.5
log
@FIx regression
@
text
@d78 1
a78 1

d2189 1
a2189 2

#ifdef DEBUG_OLOAD
d2191 2
a2192 7
  /* FIXME/FYI: cagney/2000-03-13: No need to #ifdef this sort of
     thing.  Instead add a command like ``set debug gdbtypes <int>''.
     (A predicate to this is the addition of the ``set debug''). Also,
     send the output to gdb_stderr and don't use printf. */
  printf ("------ Arg is %s [%d], parm is %s [%d]\n",
      TYPE_NAME (arg), TYPE_CODE (arg), TYPE_NAME (parm), TYPE_CODE (parm));
#endif
d3017 1
d3058 7
@


1.4
log
@From Daniel Berlin:
Fix C++ overloading, add support for seeing through references.
@
text
@d2139 2
a2140 2
  for (i = 1; i < min_len; i++)
    bv->rank[i] = rank_one_type (parms[i], args[i]);
@


1.3
log
@Revert: ``Fix C++ overload support, see through references''.
Change also contained numerous white-space changes.
@
text
@d997 1
a997 1
      if (t_field_name && STREQ (t_field_name, name))
d2139 2
a2140 2
  for (i = 1; i <= min_len; i++)
    bv->rank[i] = rank_one_type (parms[i - 1], args[i - 1]);
d2181 15
a2195 2
#if 0
  /* Debugging only */
d2262 1
a2262 1
		      if (!strcmp (TYPE_NAME (parm), TYPE_NAME (arg)))
d2264 1
a2264 1
		      else if (!strcmp (TYPE_NAME (arg), "int") && !strcmp (TYPE_NAME (parm), "long"))
d2271 1
a2271 1
		      if (!strcmp (TYPE_NAME (arg), "long") && !strcmp (TYPE_NAME (parm), "int"))
d2279 1
a2279 1
		  if (!strcmp (TYPE_NAME (parm), TYPE_NAME (arg)))
d2281 1
a2281 1
		  else if (!strcmp (TYPE_NAME (arg), "int") && !strcmp (TYPE_NAME (parm), "long"))
@


1.2
log
@Fix C++ overload support, see through references
@
text
@d413 1
a413 1
/* Allocate a stub method whose return type is TYPE.
d537 2
a538 2
	 TYPE_LENGTH (type) * TARGET_CHAR_BIT, which will not work
	 if TYPE_LENGTH (type) == sizeof (LONGEST). */
d682 1
a682 1
/* Smash TYPE to be a type of members of DOMAIN with type TO_TYPE.
d753 1
a753 1
/* Lookup a primitive type named NAME.
d942 1
a942 1
/* Given a type TYPE, lookup the type of the component of type named NAME.
d997 1
a997 1
      if (t_field_name && STREQ_IW (t_field_name, name))
d1048 1
a1048 1
	 virtual (and hence we cannot share the table pointer).  */
d1103 1
a1103 1
   This used to be coded as a macro, but I don't think it is called
d1171 3
a1173 3
	 TYPE_TAG_NAME, and look in STRUCT_NAMESPACE and/or VAR_NAMESPACE
	 as appropriate?  (this code was written before TYPE_NAME and
	 TYPE_TAG_NAME were separate).  */
d1381 1
a1381 1
  /* kludge to support cfront methods - gdb expects to find "F" for
d1696 1
a1696 1
/* Check whether BASE is an ancestor or base class or DCLASS
d1800 1
a1800 1
   Helper function for virtual_base_list().
d2139 2
a2140 2
  for (i = 1; i < min_len; i++)
    bv->rank[i] = rank_one_type (parms[i], args[i]);
d2181 1
a2181 7
  /* See through references, since we can almost make non-references references*/
  if (TYPE_CODE (arg) == TYPE_CODE_REF)
    return rank_one_type(TYPE_TARGET_TYPE(arg),parm) + REFERENCE_CONVERSION_BADNESS;
  if (TYPE_CODE (parm) == TYPE_CODE_REF)
    return rank_one_type(arg,TYPE_TARGET_TYPE(parm)) + REFERENCE_CONVERSION_BADNESS;

#ifdef DEBUG_OLOAD
d2236 1
a2236 1
		 signed and unsigned ints */
d2249 1
a2249 1
		      if (!strcmp_iw (TYPE_NAME (parm), TYPE_NAME (arg)))
d2251 1
a2251 1
		      else if (!strcmp_iw (TYPE_NAME (arg), "int") && !strcmp_iw (TYPE_NAME (parm), "long"))
d2258 1
a2258 1
		      if (!strcmp_iw (TYPE_NAME (arg), "long") && !strcmp_iw (TYPE_NAME (parm), "int"))
d2266 1
a2266 1
		  if (!strcmp_iw (TYPE_NAME (parm), TYPE_NAME (arg)))
d2268 1
a2268 1
		  else if (!strcmp_iw (TYPE_NAME (arg), "int") && !strcmp_iw (TYPE_NAME (parm), "long"))
d2830 2
a2831 2
	 the value.  Pick cplus_struct_type, even though we know it isn't
	 any particular one. */
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d42 1
d68 8
d80 5
a84 1
struct extra { char str[128]; int len; }; /* maximum extention is 128! FIXME */
d95 2
d112 1
a112 1
      type  = (struct type *) xmalloc (sizeof (struct type));
d116 2
a117 2
      type  = (struct type *) obstack_alloc (&objfile -> type_obstack,
					     sizeof (struct type));
d127 1
a127 1
  TYPE_CV_TYPE (type) = type;  /* chain back to itself */ 
d142 1
a142 1
  register struct type *ntype;		/* New type */
d147 1
a147 1
  if (ntype) 
d149 2
a150 2
      if (typeptr == 0)		
        return ntype;	/* Don't care about alloc, and have new type.  */
d152 1
a152 1
        {
d155 1
a155 1
        }
d164 2
a165 1
  else				/* We have storage, but need to reset it.  */
d183 1
a183 1
  
d197 1
a197 1
  return make_pointer_type (type, (struct type **)0);
d210 1
a210 1
  register struct type *ntype;		/* New type */
d215 1
a215 1
  if (ntype) 
d217 2
a218 2
      if (typeptr == 0)		
        return ntype;	/* Don't care about alloc, and have new type.  */
d220 1
a220 1
        {
d223 1
a223 1
        }
d232 2
a233 1
  else				/* We have storage, but need to reset it.  */
d249 1
a249 1
  
d262 1
a262 1
  return make_reference_type (type, (struct type **)0);
d275 1
a275 1
  register struct type *ntype;		/* New type */
d284 2
a285 1
  else				/* We have storage, but need to reset it.  */
d297 1
a297 1
  
d309 1
a309 1
  return make_function_type (type, (struct type **)0);
d330 2
a331 2
  register struct type *ntype;		 /* New type */
  register struct type *tmp_type = type; /* tmp type */
d339 10
a348 10
          (TYPE_VOLATILE (ntype) == voltl))
          {
            if (typeptr == 0)
              return ntype;
            else if (*typeptr == 0)
              {
                *typeptr = ntype;	/* Tracking alloc, and we have new type.  */
                return ntype;
              }
          }
d359 2
a360 1
  else				/* We have storage, but need to reset it.  */
d368 1
a368 1
  /* Copy original type */ 
d371 2
a372 2
  TYPE_POINTER_TYPE (ntype) = (struct type *) 0;    /* Need new pointer kind */
  TYPE_REFERENCE_TYPE (ntype) = (struct type *) 0;  /* Need new referene kind */
d377 1
a377 1
    TYPE_FLAGS (ntype) |=  TYPE_FLAG_CONST;
d379 1
a379 1
    TYPE_FLAGS (ntype) &=  ~TYPE_FLAG_CONST;
d382 1
a382 1
    TYPE_FLAGS (ntype) |=  TYPE_FLAG_VOLATILE;
d384 1
a384 1
    TYPE_FLAGS (ntype) &=  ~TYPE_FLAG_VOLATILE;
d413 1
a413 1
/* Allocate a stub method whose return type is TYPE.  
d467 2
a468 2
  TYPE_FIELD_TYPE (result_type, 0) = builtin_type_int;		/* FIXME */
  TYPE_FIELD_TYPE (result_type, 1) = builtin_type_int;		/* FIXME */
d470 1
a470 1
  if(low_bound >= 0)
d509 1
a509 1
	  if(*lowp >= 0)
d525 1
a525 1
      if (TYPE_LENGTH (type) > sizeof (LONGEST))  /* Too big */
d529 1
a529 1
	  *lowp = - (1 << (TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1));
d628 1
a628 1
  if (! (TYPE_FLAGS (domain_type) & TYPE_FLAG_STUB))
d638 1
a638 1
  if(low_bound >= 0)
d644 39
a682 1
/* Smash TYPE to be a type of members of DOMAIN with type TO_TYPE. 
d753 2
a754 2
/* Lookup a primitive type named NAME. 
   Return zero if NAME is not a primitive type.*/
d760 1
a760 1
   struct type ** const *p;
d762 8
a769 8
   for (p = current_language -> la_builtin_type_vector; *p != NULL; p++)
     {
       if (STREQ ((**p) -> name, name))
	 {
	   return (**p);
	 }
     }
   return (NULL); 
d865 1
a865 1
  struct type * t;
d873 1
a873 1
  t = SYMBOL_TYPE(sym);
d881 2
a882 2
  if (HAVE_CPLUS_STRUCT (t)) 
    if (TYPE_DECLARED_TYPE(t) == DECLARED_TYPE_UNION) 
d900 1
a900 1
  sym = lookup_symbol (name, block, STRUCT_NAMESPACE, 0, 
d923 1
a923 1
  char *nam = (char*) alloca(strlen(name) + strlen(type->name) + 4);
d927 1
a927 1
  strcat (nam, " >");	/* FIXME, extra space still introduced in gcc? */
d929 1
a929 1
  sym = lookup_symbol (nam, block, VAR_NAMESPACE, 0, (struct symtab **)NULL);
d942 1
a942 1
/* Given a type TYPE, lookup the type of the component of type named NAME.  
d956 1
a956 1
    int noerr;
d997 1
a997 1
      if (t_field_name && STREQ (t_field_name, name))
d1019 1
a1019 1
  
d1027 1
a1027 1
  return (struct type *)-1;	/* For lint */
d1103 1
a1103 1
   This used to be coded as a macro, but I don't think it is called 
d1107 1
a1107 1
  {"stub type has NULL name", 0, 0};
d1118 1
a1118 1
	  char* name;
d1136 1
a1136 1
	  sym = lookup_symbol (name, 0, STRUCT_NAMESPACE, 0, 
d1141 1
a1141 1
	    TYPE_TARGET_TYPE (type) = alloc_type (NULL);  /* TYPE_CODE_UNDEF */
d1149 2
a1150 2
     identifying them as stub types in the first place */ 
     
d1153 2
a1154 2
      char * name = type_name_no_tag (type);
      struct type * newtype;
d1167 1
a1167 1
  else if ((TYPE_FLAGS(type) & TYPE_FLAG_STUB) && ! currently_reading_symtab)
d1169 1
a1169 1
      char* name = type_name_no_tag (type);
d1183 1
a1183 1
	  memcpy ((char *)type, (char *)SYMBOL_TYPE(sym), sizeof (struct type));
d1193 2
a1194 1
	{ }
d1225 4
a1228 4
static void 
add_name(pextras,n) 
  struct extra * pextras;
  char * n; 
d1232 1
a1232 1
  if ((nlen = (n ? strlen(n) : 0))==0) 
d1234 2
a1235 2
  sprintf(pextras->str+pextras->len,"%d%s",nlen,n);
  pextras->len=strlen(pextras->str);
d1238 4
a1241 4
static void 
add_mangled_type(pextras,t) 
  struct extra * pextras;
  struct type * t;
d1245 1
a1245 1
  char * tname;
d1247 4
a1250 4
  tcode = TYPE_CODE(t);
  tlen = TYPE_LENGTH(t);
  tflags = TYPE_FLAGS(t);
  tname = TYPE_NAME(t);
d1253 1
a1253 1
  switch (tcode) 
d1255 69
a1323 62
      case TYPE_CODE_INT: 
        if (tflags==1)
          ADD_EXTRA('U');
        switch (tlen) 
          {
            case 1:
              ADD_EXTRA('c');
              break;
            case 2:
              ADD_EXTRA('s');
              break;
            case 4: 
              {
              char* pname;
              if ((pname=strrchr(tname,'l'),pname) && !strcmp(pname,"long"))
                ADD_EXTRA('l')
              else
                ADD_EXTRA('i')
              }
              break;
            default: 
              {
          
                static struct complaint msg = {"Bad int type code length x%x\n",0,0};
          
                complain (&msg, tlen);
          
              }
          }
        break;
      case TYPE_CODE_FLT: 
          switch (tlen) 
            {
              case 4:
                ADD_EXTRA('f');
                break;
              case 8:
                ADD_EXTRA('d');
                break;
              case 16:
                ADD_EXTRA('r');
                break;
              default: 
	 	{
                  static struct complaint msg = {"Bad float type code length x%x\n",0,0};
          	  complain (&msg, tlen);
            	}
      	      }
            break;
      case TYPE_CODE_REF:
        ADD_EXTRA('R');
        /* followed by what it's a ref to */
        break;
      case TYPE_CODE_PTR:
        ADD_EXTRA('P');
        /* followed by what it's a ptr to */
        break;
      case TYPE_CODE_TYPEDEF: 
        {
          static struct complaint msg = {"Typedefs in overloaded functions not yet supported\n",0,0};
          complain (&msg);
        }
d1327 1
a1327 1
      ADD_EXTRA('F');
d1331 1
a1331 1
      ADD_EXTRA('v');
d1334 1
a1334 1
      ADD_EXTRA('M');
d1336 2
a1337 2
      add_name(pextras,tname);
      ADD_EXTRA('F');  /* then mangle function */
d1339 3
a1341 3
    case TYPE_CODE_STRUCT: /* C struct */
    case TYPE_CODE_UNION:  /* C union */
    case TYPE_CODE_ENUM:   /* Enumeration type */
d1343 1
a1343 1
      add_name(pextras,tname);
d1346 4
a1349 4
    /* errors possible types/not supported */
    case TYPE_CODE_CHAR:              
    case TYPE_CODE_ARRAY:  /* Array type */
    case TYPE_CODE_MEMBER: /* Member type */
d1351 1
a1351 1
    case TYPE_CODE_COMPLEX:            /* Complex float */
d1353 2
a1354 2
    case TYPE_CODE_SET:                /* Pascal sets */
    case TYPE_CODE_RANGE:  
d1358 1
a1358 1
    default: 
d1360 3
a1362 2
        static struct complaint msg = {"Unknown type code x%x\n",0,0};
        complain (&msg, tcode);
d1366 1
a1366 1
    add_mangled_type(pextras,t->target_type);
d1371 1
a1371 1
cfront_mangle_name(type, i, j)
d1376 2
a1377 2
   struct fn_field *f;
   char *mangled_name = gdb_mangle_name (type, i, j);
d1379 1
a1379 1
   f = TYPE_FN_FIELDLIST1 (type, i);	/* moved from below */
d1381 15
a1395 15
   /* kludge to support cfront methods - gdb expects to find "F" for 
      ARM_mangled names, so when we mangle, we have to add it here */
   if (ARM_DEMANGLING) 
     {
	int k;
	char * arm_mangled_name;
	struct fn_field *method = &f[j];
	char *field_name = TYPE_FN_FIELDLIST_NAME (type, i);
        char *physname = TYPE_FN_FIELD_PHYSNAME (f, j);
        char *newname = type_name_no_tag (type);

        struct type *ftype = TYPE_FN_FIELD_TYPE (f, j);
	int nargs = TYPE_NFIELDS(ftype);	/* number of args */
	struct extra extras, * pextras = &extras;	
	INIT_EXTRA
d1398 2
a1399 2
	  ADD_EXTRA('S')
	ADD_EXTRA('F')
d1401 18
a1418 17
	if (nargs <= 1)				/* no args besides this */
		ADD_EXTRA('v')
	else {
	  for (k=1; k<nargs; k++) 
	    {
	      struct type * t;
	      t = TYPE_FIELD_TYPE(ftype,k);
	      add_mangled_type(pextras,t);
	    }
	}
	ADD_EXTRA('\0')
	printf("add_mangled_type: %s\n",extras.str); /* FIXME */
	arm_mangled_name = malloc(strlen(mangled_name)+extras.len);
        sprintf(arm_mangled_name,"%s%s",mangled_name,extras.str);
	free(mangled_name);
	mangled_name = arm_mangled_name;
     }
d1420 1
a1420 1
#endif	/* 0 */
d1488 1
a1488 1
  if (*p != ')')			/* () means no args, skip while */
d1499 1
a1499 1
		      parse_and_eval_type (argtypetext, p - argtypetext);
d1518 1
a1518 1
  if (p[-2] != '.')			/* Not '...' */
d1524 1
a1524 1
      argtypes[argcount] = NULL;		/* Ellist terminator */
d1529 1
a1529 1
  f = TYPE_FN_FIELDLIST1 (type, method_id);	
d1551 1
a1551 1
      *(TYPE_CPLUS_SPECIFIC(type)) = cplus_struct_default;
d1579 1
a1579 1
	obsavestring (name, strlen (name), &objfile -> type_obstack);
d1631 2
a1632 2
  
  if (objfile -> fundamental_types == NULL)
d1635 3
a1637 3
      objfile -> fundamental_types = (struct type **)
	obstack_alloc (&objfile -> type_obstack, nbytes);
      memset ((char *) objfile -> fundamental_types, 0, nbytes);
d1644 1
a1644 1
  typep = objfile -> fundamental_types + typeid;
d1665 14
d1696 1
a1696 1
/* Check whether BASE is an ancestor or base class or DCLASS 
d1704 2
a1705 2
  struct type * base;
  struct type * dclass;
d1708 1
a1708 1
  
d1730 1
a1730 1
  struct type * dclass;
d1737 1
a1737 1
  if (TYPE_CODE(dclass) != TYPE_CODE_CLASS)
d1739 1
a1739 1
  
d1741 5
a1745 5
  if (TYPE_FIELD_VIRTUAL_BITS(dclass))
    for (i=0; i < TYPE_N_BASECLASSES(dclass); i++)
      if (B_TST(TYPE_FIELD_VIRTUAL_BITS(dclass), i))
        return 1;
  
d1747 10
a1756 10
  if (TYPE_FN_FIELDLISTS(dclass))
    for (i=0; i < TYPE_NFN_FIELDS(dclass); i++)
      if (TYPE_FN_FIELD_VIRTUAL_P(TYPE_FN_FIELDLIST1(dclass, i), 0))
        return 1;

  /* Recurse on non-virtual bases to see if any of them needs a vtable */ 
  if (TYPE_FIELD_VIRTUAL_BITS(dclass))
    for (i=0; i < TYPE_N_BASECLASSES(dclass); i++)
      if ((!B_TST (TYPE_FIELD_VIRTUAL_BITS(dclass), i)) &&
	  (has_vtable (TYPE_FIELD_TYPE(dclass, i))))
d1758 2
a1759 2
  
  /* Well, maybe we don't need a virtual table */ 
d1764 1
a1764 1
 
d1767 1
a1767 1
  
d1773 1
a1773 1
  struct type * dclass;
d1781 1
a1781 1
  if (TYPE_CODE(dclass) != TYPE_CODE_CLASS)
d1784 4
a1787 4
  for (i=0; i < TYPE_N_BASECLASSES(dclass); i++)
    if (!TYPE_FIELD_VIRTUAL(dclass, i) &&
        has_vtable(TYPE_FIELD_TYPE(dclass, i)))
      return TYPE_FIELD_TYPE(dclass, i);
d1794 1
a1794 1
static struct vbase * current_vbase_list = NULL;
d1799 2
a1800 2
  
   Helper function for virtual_base_list(). 
d1804 1
a1804 1
struct vbase *
d1806 1
a1806 1
  struct type * dclass;
d1808 1
a1808 1
  struct vbase * tmp_vbase;
d1811 2
a1812 2
  if (TYPE_CODE(dclass) != TYPE_CODE_CLASS)
    return NULL;
d1817 1
a1817 1
      virtual_base_list_aux(TYPE_FIELD_TYPE(dclass, i));
d1820 25
a1844 25
      if (BASETYPE_VIA_VIRTUAL(dclass, i))
        {
          struct type * basetype = TYPE_FIELD_TYPE (dclass, i);
          
          /* Check if base already recorded */
          tmp_vbase = current_vbase_list;
          while (tmp_vbase)
            {
              if (tmp_vbase->vbasetype == basetype)
                break; /* found it */
              tmp_vbase = tmp_vbase->next;
            }

          if (!tmp_vbase) /* normal exit from loop */
            {
              /* Allocate new item for this virtual base */
              tmp_vbase = (struct vbase *) xmalloc (sizeof (struct vbase));

              /* Stick it on at the end of the list */
              tmp_vbase->vbasetype = basetype;
              tmp_vbase->next = current_vbase_list;
              current_vbase_list = tmp_vbase;
            }
        } /* if virtual */
    } /* for loop over bases */
d1852 1
a1852 1
  
d1856 1
a1856 1
   
d1859 1
a1859 1
  
d1865 1
a1865 1
  struct type * dclass;
d1867 2
a1868 2
  register struct vbase * tmp_vbase;
  register struct vbase * tmp_vbase_2;
d1871 1
a1871 1
  struct type ** vbase_array;
d1874 1
a1874 1
  virtual_base_list_aux(dclass);
d1876 1
a1876 1
  for (i=0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; i++, tmp_vbase = tmp_vbase->next)
d1881 1
a1881 1
  vbase_array = (struct type **) xmalloc((count + 1) * sizeof (struct type *));
d1883 1
a1883 1
  for (i=count -1, tmp_vbase = current_vbase_list; i >= 0; i--, tmp_vbase = tmp_vbase->next)
d1891 1
a1891 1
      free(tmp_vbase_2);
d1894 1
a1894 1
  
d1903 1
a1903 1
  struct type * dclass;
d1906 2
a1907 2
  register struct vbase * tmp_vbase;
  
d1909 1
a1909 1
  virtual_base_list_aux(dclass);
d1911 1
a1911 1
  for (i=0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; i++, tmp_vbase = tmp_vbase->next)
d1922 1
a1922 1
  struct type * dclass;
d1925 2
a1926 2
  register struct vbase * tmp_vbase;
  struct type * primary;
d1934 1
a1934 1
  virtual_base_list_aux(dclass);
d1936 1
a1936 1
  for (i=0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; tmp_vbase = tmp_vbase->next)
d1939 1
a1939 1
        continue;
d1951 3
a1953 3
virtual_base_index(base, dclass)
  struct type * base;
  struct type * dclass;
d1955 1
a1955 1
  register struct type * vbase;
d1958 2
a1959 2
  if ((TYPE_CODE(dclass) != TYPE_CODE_CLASS) ||
      (TYPE_CODE(base) != TYPE_CODE_CLASS))
d1963 1
a1963 1
  vbase = TYPE_VIRTUAL_BASE_LIST(dclass)[0];
d1967 2
a1968 2
        break;
      vbase = TYPE_VIRTUAL_BASE_LIST(dclass)[++i];
d1983 3
a1985 3
virtual_base_index_skip_primaries(base, dclass)
  struct type * base;
  struct type * dclass;
d1987 1
a1987 1
  register struct type * vbase;
d1989 1
a1989 1
  struct type * primary;
d1991 2
a1992 2
  if ((TYPE_CODE(dclass) != TYPE_CODE_CLASS) ||
      (TYPE_CODE(base) != TYPE_CODE_CLASS))
d1995 1
a1995 1
  primary = TYPE_RUNTIME_PTR(dclass) ? TYPE_PRIMARY_BASE(dclass) : NULL;
d1999 1
a1999 1
  vbase = TYPE_VIRTUAL_BASE_LIST(dclass)[0];
d2002 2
a2003 2
      if (!primary || (virtual_base_index_skip_primaries(vbase, primary) < 0))
        j++;
d2005 2
a2006 2
        break;
      vbase = TYPE_VIRTUAL_BASE_LIST(dclass)[++i];
d2018 1
a2018 1
  struct type * dclass;
d2020 1
a2020 1
  struct type * pbc; /* primary base class */
d2022 1
a2022 1
  /* Simply recurse on primary base */ 
d2041 1
a2041 1
  struct type * dclass;
d2043 2
a2044 4
  int base;     /* index for base classes */
  int fn, oi;   /* function and overloaded instance indices */
  
  int vfuncs;   /* count to return */ 
d2046 2
a2047 2
  /* recurse on bases that can share virtual table */ 
  struct type * pbc = primary_base_class (dclass);
d2050 1
a2050 1
  
d2054 1
a2054 1
        vfuncs++;
d2058 1
a2059 1

d2071 2
a2072 2
  struct badness_vector * a;
  struct badness_vector * b;
d2076 4
a2079 4
  short found_pos = 0;      /* any positives in c? */
  short found_neg = 0;      /* any negatives in c? */
  
  /* differing lengths => incomparable */ 
d2083 2
a2084 2
  /* Subtract b from a */ 
  for (i=0; i < a->length; i++)
d2088 1
a2088 1
        found_pos = 1;
d2090 1
a2090 1
        found_neg = 1;
d2096 1
a2096 1
        return 1; /* incomparable */ 
d2098 1
a2098 1
        return 3; /* A > B */ 
d2100 2
a2101 1
  else /* no positives */ 
d2104 1
a2104 1
        return 2; /* A < B */
d2106 1
a2106 1
        return 0; /* A == B */
d2116 4
a2119 4
  struct type ** parms;
  int nparms;
  struct type ** args;
  int nargs;
d2122 1
a2122 1
  struct badness_vector * bv;
d2126 1
a2126 1
  bv->length = nargs + 1; /* add 1 for the length-match rank */ 
d2131 1
a2131 1
   
d2139 2
a2140 2
  for (i=1; i <= min_len; i++)
    bv->rank[i] = rank_one_type (parms[i-1], args[i-1]);
d2142 2
a2143 2
  /* If more arguments than parameters, add dummy entries */ 
  for (i = min_len +1; i <= nargs; i++)
d2161 2
a2162 2
  struct type * parm;
  struct type * arg;
d2181 10
a2190 4
#if 0
  /* Debugging only */ 
  printf("------ Arg is %s [%d], parm is %s [%d]\n",
         TYPE_NAME (arg), TYPE_CODE (arg), TYPE_NAME (parm), TYPE_CODE (parm));
d2197 220
a2416 220
      case TYPE_CODE_PTR:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_PTR: 
              if (TYPE_CODE (TYPE_TARGET_TYPE (parm)) == TYPE_CODE_VOID)
                return VOID_PTR_CONVERSION_BADNESS;
              else
                return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
            case TYPE_CODE_ARRAY:
              return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
            case TYPE_CODE_FUNC:
              return rank_one_type (TYPE_TARGET_TYPE (parm), arg);
            case TYPE_CODE_INT:
            case TYPE_CODE_ENUM:
            case TYPE_CODE_CHAR:
            case TYPE_CODE_RANGE:
            case TYPE_CODE_BOOL:
              return POINTER_CONVERSION_BADNESS;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
      case TYPE_CODE_ARRAY:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_PTR:
            case TYPE_CODE_ARRAY:
              return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
      case TYPE_CODE_FUNC:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_PTR: /* funcptr -> func */
              return rank_one_type (parm, TYPE_TARGET_TYPE (arg));
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
      case TYPE_CODE_INT:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_INT:
              if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))
                {
                  /* Deal with signed, unsigned, and plain chars and
                     signed and unsigned ints */
                  if (TYPE_NOSIGN (parm))
                    {
                      /* This case only for character types */
                      if (TYPE_NOSIGN (arg))  /* plain char -> plain char */
                        return 0;
                      else
                        return INTEGER_COERCION_BADNESS; /* signed/unsigned char -> plain char */
                    }
                  else if (TYPE_UNSIGNED (parm))
                    {
                      if (TYPE_UNSIGNED (arg))
                        {
                          if (!strcmp (TYPE_NAME (parm), TYPE_NAME (arg))) 
                            return 0;  /* unsigned int -> unsigned int, or unsigned long -> unsigned long */
                          else if (!strcmp (TYPE_NAME (arg), "int") && !strcmp (TYPE_NAME (parm), "long"))
                            return INTEGER_PROMOTION_BADNESS; /* unsigned int -> unsigned long */
                          else
                            return INTEGER_COERCION_BADNESS; /* unsigned long -> unsigned int */ 
                        }
                      else
                        {
                          if (!strcmp (TYPE_NAME (arg), "long") && !strcmp (TYPE_NAME (parm), "int"))
                            return INTEGER_COERCION_BADNESS; /* signed long -> unsigned int */
                          else 
                            return INTEGER_CONVERSION_BADNESS; /* signed int/long -> unsigned int/long */ 
                        }
                    }
                  else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))
                    {
                      if (!strcmp (TYPE_NAME (parm), TYPE_NAME (arg)))
                        return 0;
                      else if (!strcmp (TYPE_NAME (arg), "int") && !strcmp (TYPE_NAME (parm), "long"))
                        return INTEGER_PROMOTION_BADNESS;
                      else
                        return INTEGER_COERCION_BADNESS;
                    }
                  else
                    return INTEGER_COERCION_BADNESS;
                }
              else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
                return INTEGER_PROMOTION_BADNESS;
              else
                return INTEGER_COERCION_BADNESS;
            case TYPE_CODE_ENUM:
            case TYPE_CODE_CHAR:
            case TYPE_CODE_RANGE:
            case TYPE_CODE_BOOL:
              return INTEGER_PROMOTION_BADNESS;
            case TYPE_CODE_FLT:
              return INT_FLOAT_CONVERSION_BADNESS;
            case TYPE_CODE_PTR:
              return NS_POINTER_CONVERSION_BADNESS;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_ENUM:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_INT:
            case TYPE_CODE_CHAR:
            case TYPE_CODE_RANGE:
            case TYPE_CODE_BOOL:
            case TYPE_CODE_ENUM:
              return INTEGER_COERCION_BADNESS;
            case TYPE_CODE_FLT:
              return INT_FLOAT_CONVERSION_BADNESS;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_CHAR:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_RANGE:
            case TYPE_CODE_BOOL:
            case TYPE_CODE_ENUM:
              return INTEGER_COERCION_BADNESS;
            case TYPE_CODE_FLT:
              return INT_FLOAT_CONVERSION_BADNESS;
            case TYPE_CODE_INT: 
              if (TYPE_LENGTH (arg) > TYPE_LENGTH (parm))
                return INTEGER_COERCION_BADNESS;
              else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
                return INTEGER_PROMOTION_BADNESS;
              /* >>> !! else fall through !! <<< */ 
            case TYPE_CODE_CHAR:
              /* Deal with signed, unsigned, and plain chars for C++
                 and with int cases falling through from previous case */
              if (TYPE_NOSIGN (parm))
                {
                  if (TYPE_NOSIGN (arg))
                    return 0;
                  else
                    return INTEGER_COERCION_BADNESS;
                }
              else if (TYPE_UNSIGNED (parm))
                {
                  if (TYPE_UNSIGNED (arg))
                    return 0;
                  else
                    return INTEGER_PROMOTION_BADNESS;
                }
              else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))
                return 0;
              else
                return INTEGER_COERCION_BADNESS;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_RANGE:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_INT:
            case TYPE_CODE_CHAR:
            case TYPE_CODE_RANGE:
            case TYPE_CODE_BOOL:
            case TYPE_CODE_ENUM:
              return INTEGER_COERCION_BADNESS;
            case TYPE_CODE_FLT:
              return INT_FLOAT_CONVERSION_BADNESS;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_BOOL:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_INT:
            case TYPE_CODE_CHAR:
            case TYPE_CODE_RANGE:
            case TYPE_CODE_ENUM:
            case TYPE_CODE_FLT:
            case TYPE_CODE_PTR:
              return BOOLEAN_CONVERSION_BADNESS;
            case TYPE_CODE_BOOL:
              return 0;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_FLT:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_FLT:
              if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
                return FLOAT_PROMOTION_BADNESS;
              else if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))
                return 0;
              else
                return FLOAT_CONVERSION_BADNESS;
            case TYPE_CODE_INT:
            case TYPE_CODE_BOOL:
            case TYPE_CODE_ENUM:
            case TYPE_CODE_RANGE:
            case TYPE_CODE_CHAR:
              return INT_FLOAT_CONVERSION_BADNESS;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_COMPLEX:
        switch (TYPE_CODE (arg))
          { /* Strictly not needed for C++, but... */
            case TYPE_CODE_FLT:
              return FLOAT_PROMOTION_BADNESS;
            case TYPE_CODE_COMPLEX:
              return 0;
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_STRUCT:
d2418 29
a2446 58
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_STRUCT:
              /* Check for derivation */
              if (is_ancestor (parm, arg))
                return BASE_CONVERSION_BADNESS;
              /* else fall through */
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_UNION:
        switch (TYPE_CODE (arg))
          {
            case TYPE_CODE_UNION:
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_MEMBER:
        switch (TYPE_CODE (arg))
          {
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_METHOD:
        switch (TYPE_CODE (arg))
          {
            
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_REF:
        switch (TYPE_CODE (arg))
          {
            
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }

        break;
      case TYPE_CODE_SET:
        switch (TYPE_CODE (arg))
          {
            /* Not in C++ */
            case TYPE_CODE_SET:
              return rank_one_type (TYPE_FIELD_TYPE (parm, 0), TYPE_FIELD_TYPE (arg, 0));
            default:
              return INCOMPATIBLE_TYPE_BADNESS;
          }
        break;
      case TYPE_CODE_VOID:
      default:  
        return INCOMPATIBLE_TYPE_BADNESS;
    } /* switch (TYPE_CODE (arg)) */
}
d2448 7
a2454 2
 
/* End of functions for overload resolution */ 
d2456 3
d2460 16
d2477 2
a2478 1
#if MAINTENANCE_CMDS
d2520 1
a2520 1
	  if ((*args++) -> code == TYPE_CODE_VOID)
d2538 1
a2538 1
  gdb_print_address (TYPE_FN_FIELDLISTS (type), gdb_stdout);
d2546 2
a2547 2
      gdb_print_address (TYPE_FN_FIELDLIST_NAME (type, method_idx),
			 gdb_stdout);
d2557 2
a2558 2
	  gdb_print_address (TYPE_FN_FIELD_PHYSNAME (f, overload_idx),
			     gdb_stdout);
d2561 1
a2561 1
	  gdb_print_address (TYPE_FN_FIELD_TYPE (f, overload_idx), gdb_stdout);
d2568 1
a2568 1
	  gdb_print_address (TYPE_FN_FIELD_ARGS (f, overload_idx), gdb_stdout);
d2573 2
a2574 2
	  gdb_print_address (TYPE_FN_FIELD_FCONTEXT (f, overload_idx),
			     gdb_stdout);
d2608 1
a2608 1
      gdb_print_address (TYPE_FIELD_VIRTUAL_BITS (type), gdb_stdout);
d2621 1
a2621 1
	  gdb_print_address (TYPE_FIELD_PRIVATE_BITS (type), gdb_stdout);
d2631 1
a2631 1
	  gdb_print_address (TYPE_FIELD_PROTECTED_BITS (type), gdb_stdout);
d2660 1
a2660 1
	= (struct type **)obstack_base (&dont_print_type_obstack);
d2662 2
a2663 2
      int i = (struct type **)obstack_next_free (&dont_print_type_obstack)
	- first_dont_print;
d2670 1
a2670 1
	      gdb_print_address (type, gdb_stdout);
d2680 1
a2680 1
  gdb_print_address (type, gdb_stdout);
d2684 1
a2684 1
  gdb_print_address (TYPE_NAME (type), gdb_stdout);
d2690 1
a2690 1
      gdb_print_address (TYPE_TAG_NAME (type), gdb_stdout);
d2696 63
a2758 63
      case TYPE_CODE_UNDEF:
        printf_filtered ("(TYPE_CODE_UNDEF)");
	break;
      case TYPE_CODE_PTR:
	printf_filtered ("(TYPE_CODE_PTR)");
	break;
      case TYPE_CODE_ARRAY:
	printf_filtered ("(TYPE_CODE_ARRAY)");
	break;
      case TYPE_CODE_STRUCT:
	printf_filtered ("(TYPE_CODE_STRUCT)");
	break;
      case TYPE_CODE_UNION:
	printf_filtered ("(TYPE_CODE_UNION)");
	break;
      case TYPE_CODE_ENUM:
	printf_filtered ("(TYPE_CODE_ENUM)");
	break;
      case TYPE_CODE_FUNC:
	printf_filtered ("(TYPE_CODE_FUNC)");
	break;
      case TYPE_CODE_INT:
	printf_filtered ("(TYPE_CODE_INT)");
	break;
      case TYPE_CODE_FLT:
	printf_filtered ("(TYPE_CODE_FLT)");
	break;
      case TYPE_CODE_VOID:
	printf_filtered ("(TYPE_CODE_VOID)");
	break;
      case TYPE_CODE_SET:
	printf_filtered ("(TYPE_CODE_SET)");
	break;
      case TYPE_CODE_RANGE:
	printf_filtered ("(TYPE_CODE_RANGE)");
	break;
      case TYPE_CODE_STRING:
	printf_filtered ("(TYPE_CODE_STRING)");
	break;
      case TYPE_CODE_ERROR:
	printf_filtered ("(TYPE_CODE_ERROR)");
	break;
      case TYPE_CODE_MEMBER:
	printf_filtered ("(TYPE_CODE_MEMBER)");
	break;
      case TYPE_CODE_METHOD:
	printf_filtered ("(TYPE_CODE_METHOD)");
	break;
      case TYPE_CODE_REF:
	printf_filtered ("(TYPE_CODE_REF)");
	break;
      case TYPE_CODE_CHAR:
	printf_filtered ("(TYPE_CODE_CHAR)");
	break;
      case TYPE_CODE_BOOL:
	printf_filtered ("(TYPE_CODE_BOOL)");
	break;
      case TYPE_CODE_TYPEDEF:
	printf_filtered ("(TYPE_CODE_TYPEDEF)");
	break;
      default:
	printf_filtered ("(UNKNOWN TYPE CODE)");
	break;
d2763 1
a2763 1
  gdb_print_address (TYPE_OBJFILE (type), gdb_stdout);
d2766 1
a2766 1
  gdb_print_address (TYPE_TARGET_TYPE (type), gdb_stdout);
d2773 1
a2773 1
  gdb_print_address (TYPE_POINTER_TYPE (type), gdb_stdout);
d2776 1
a2776 1
  gdb_print_address (TYPE_REFERENCE_TYPE (type), gdb_stdout);
d2789 1
a2789 1
  gdb_print_address (TYPE_FIELDS (type), gdb_stdout);
d2797 1
a2797 1
      gdb_print_address (TYPE_FIELD_TYPE (type, idx), gdb_stdout);
d2802 1
a2802 1
      gdb_print_address (TYPE_FIELD_NAME (type, idx), gdb_stdout);
d2810 1
a2810 1
  gdb_print_address (TYPE_VPTR_BASETYPE (type), gdb_stdout);
d2819 7
a2825 7
      case TYPE_CODE_METHOD:
      case TYPE_CODE_FUNC:
	printfi_filtered (spaces, "arg_types ");
	gdb_print_address (TYPE_ARG_TYPES (type), gdb_stdout);
	puts_filtered ("\n");
	print_arg_types (TYPE_ARG_TYPES (type), spaces);
	break;
d2827 6
a2832 6
      case TYPE_CODE_STRUCT:
	printfi_filtered (spaces, "cplus_stuff ");
	gdb_print_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
	puts_filtered ("\n");
	print_cplus_stuff (type, spaces);
	break;
d2834 12
a2845 12
      default:
	/* We have to pick one of the union types to be able print and test
	   the value.  Pick cplus_struct_type, even though we know it isn't
	   any particular one. */
	printfi_filtered (spaces, "type_specific ");
	gdb_print_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
	if (TYPE_CPLUS_SPECIFIC (type) != NULL)
	  {
	    printf_filtered (" (unknown data form)");
	  }
	printf_filtered ("\n");
	break;
a2851 3
#endif	/* MAINTENANCE_CMDS */


d2865 4
a2868 1
  
d2905 1
a2905 1
  builtin_type_unsigned_long_long = 
d2972 1
a2972 1
  /* Add user knob for controlling resolution of opaque types */ 
d2974 1
a2974 1
    (add_set_cmd ("opaque-type-resolution", class_support, var_boolean, (char *)&opaque_type_resolution,
d2980 29
d3017 39
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@a80 2
static void virtual_base_list_aux PARAMS ((struct type *dclass));

d1722 1
a1722 1
static void
d1724 1
a1724 1
     struct type * dclass;
d1730 1
a1730 1
    return;
d2393 4
d2768 3
@


1.1.1.3
log
@import gdb-1999-06-14 snapshot
@
text
@a2899 31

  /* FIXME - For the moment, handle types by swapping them in and out.
     Should be using the per-architecture data-pointer and a large
     struct. */
  register_gdbarch_swap (&builtin_type_void, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_char, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_short, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_int, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_long, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_long_long, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_signed_char, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_char, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_short, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_int, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_long, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_long_long, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_float, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_double, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_long_double, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_complex, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_double_complex, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_string, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_int8, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_uint8, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_int16, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_uint16, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_int32, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_uint32, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_int64, sizeof (struct type*), NULL);
  register_gdbarch_swap (&builtin_type_uint64, sizeof (struct type*), NULL);
  register_gdbarch_swap (NULL, 0, build_gdbtypes);
@


1.1.1.4
log
@import gdb-1999-06-21 snapshot
@
text
@a40 1
struct type *builtin_type_true_char;
d2780 1
a2780 4
  builtin_type_true_char = 
    init_type (TYPE_CODE_CHAR, TARGET_CHAR_BIT / TARGET_CHAR_BIT,
	       0,
	       "true character", (struct objfile *) NULL);
@


1.1.1.5
log
@import gdb-1999-07-07 pre reformat
@
text
@d1214 4
a1217 8
	      {
		ADD_EXTRA ('l');
	      }
	    else
	      {
		ADD_EXTRA ('i');
	      }
	      }
@


1.1.1.6
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d71 1
a71 5
struct extra
  {
    char str[128];
    int len;
  };				/* maximum extention is 128! FIXME */
d82 1
a82 1
static void virtual_base_list_aux PARAMS ((struct type * dclass));
d99 1
a99 1
      type = (struct type *) xmalloc (sizeof (struct type));
d103 2
a104 2
      type = (struct type *) obstack_alloc (&objfile->type_obstack,
					    sizeof (struct type));
d114 1
a114 1
  TYPE_CV_TYPE (type) = type;	/* chain back to itself */
d129 1
a129 1
  register struct type *ntype;	/* New type */
d134 1
a134 1
  if (ntype)
d136 2
a137 2
      if (typeptr == 0)
	return ntype;		/* Don't care about alloc, and have new type.  */
d139 1
a139 1
	{
d142 1
a142 1
	}
d151 1
a151 2
  else
    /* We have storage, but need to reset it.  */
d169 1
a169 1

d183 1
a183 1
  return make_pointer_type (type, (struct type **) 0);
d196 1
a196 1
  register struct type *ntype;	/* New type */
d201 1
a201 1
  if (ntype)
d203 2
a204 2
      if (typeptr == 0)
	return ntype;		/* Don't care about alloc, and have new type.  */
d206 1
a206 1
	{
d209 1
a209 1
	}
d218 1
a218 2
  else
    /* We have storage, but need to reset it.  */
d234 1
a234 1

d247 1
a247 1
  return make_reference_type (type, (struct type **) 0);
d260 1
a260 1
  register struct type *ntype;	/* New type */
d269 1
a269 2
  else
    /* We have storage, but need to reset it.  */
d281 1
a281 1

d293 1
a293 1
  return make_function_type (type, (struct type **) 0);
d314 2
a315 2
  register struct type *ntype;	/* New type */
  register struct type *tmp_type = type;	/* tmp type */
d323 10
a332 10
	  (TYPE_VOLATILE (ntype) == voltl))
	{
	  if (typeptr == 0)
	    return ntype;
	  else if (*typeptr == 0)
	    {
	      *typeptr = ntype;	/* Tracking alloc, and we have new type.  */
	      return ntype;
	    }
	}
d343 1
a343 2
  else
    /* We have storage, but need to reset it.  */
d351 1
a351 1
  /* Copy original type */
d354 2
a355 2
  TYPE_POINTER_TYPE (ntype) = (struct type *) 0;	/* Need new pointer kind */
  TYPE_REFERENCE_TYPE (ntype) = (struct type *) 0;	/* Need new referene kind */
d360 1
a360 1
    TYPE_FLAGS (ntype) |= TYPE_FLAG_CONST;
d362 1
a362 1
    TYPE_FLAGS (ntype) &= ~TYPE_FLAG_CONST;
d365 1
a365 1
    TYPE_FLAGS (ntype) |= TYPE_FLAG_VOLATILE;
d367 1
a367 1
    TYPE_FLAGS (ntype) &= ~TYPE_FLAG_VOLATILE;
d450 2
a451 2
  TYPE_FIELD_TYPE (result_type, 0) = builtin_type_int;	/* FIXME */
  TYPE_FIELD_TYPE (result_type, 1) = builtin_type_int;	/* FIXME */
d453 1
a453 1
  if (low_bound >= 0)
d492 1
a492 1
	  if (*lowp >= 0)
d508 1
a508 1
      if (TYPE_LENGTH (type) > sizeof (LONGEST))	/* Too big */
d512 1
a512 1
	  *lowp = -(1 << (TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1));
d520 2
a521 2
         TYPE_LENGTH (type) * TARGET_CHAR_BIT, which will not work
         if TYPE_LENGTH (type) == sizeof (LONGEST). */
d611 1
a611 1
  if (!(TYPE_FLAGS (domain_type) & TYPE_FLAG_STUB))
d621 1
a621 1
  if (low_bound >= 0)
d699 1
a699 1
   Return zero if NAME is not a primitive type. */
d705 1
a705 1
  struct type **const *p;
d707 8
a714 8
  for (p = current_language->la_builtin_type_vector; *p != NULL; p++)
    {
      if (STREQ ((**p)->name, name))
	{
	  return (**p);
	}
    }
  return (NULL);
d810 1
a810 1
  struct type *t;
d818 1
a818 1
  t = SYMBOL_TYPE (sym);
d826 2
a827 2
  if (HAVE_CPLUS_STRUCT (t))
    if (TYPE_DECLARED_TYPE (t) == DECLARED_TYPE_UNION)
d845 1
a845 1
  sym = lookup_symbol (name, block, STRUCT_NAMESPACE, 0,
d868 1
a868 1
  char *nam = (char *) alloca (strlen (name) + strlen (type->name) + 4);
d872 1
a872 1
  strcat (nam, " >");		/* FIXME, extra space still introduced in gcc? */
d874 1
a874 1
  sym = lookup_symbol (nam, block, VAR_NAMESPACE, 0, (struct symtab **) NULL);
d901 1
a901 1
     int noerr;
d964 1
a964 1

d972 1
a972 1
  return (struct type *) -1;	/* For lint */
d993 1
a993 1
         virtual (and hence we cannot share the table pointer).  */
d1052 1
a1052 1
{"stub type has NULL name", 0, 0};
d1063 1
a1063 1
	  char *name;
d1081 1
a1081 1
	  sym = lookup_symbol (name, 0, STRUCT_NAMESPACE, 0,
d1086 1
a1086 1
	    TYPE_TARGET_TYPE (type) = alloc_type (NULL);	/* TYPE_CODE_UNDEF */
d1094 2
a1095 2
     identifying them as stub types in the first place */

d1098 2
a1099 2
      char *name = type_name_no_tag (type);
      struct type *newtype;
d1112 1
a1112 1
  else if ((TYPE_FLAGS (type) & TYPE_FLAG_STUB) && !currently_reading_symtab)
d1114 1
a1114 1
      char *name = type_name_no_tag (type);
d1116 3
a1118 3
         TYPE_TAG_NAME, and look in STRUCT_NAMESPACE and/or VAR_NAMESPACE
         as appropriate?  (this code was written before TYPE_NAME and
         TYPE_TAG_NAME were separate).  */
d1128 1
a1128 1
	  memcpy ((char *) type, (char *) SYMBOL_TYPE (sym), sizeof (struct type));
d1138 1
a1138 2
	{
	}
d1169 4
a1172 4
static void
add_name (pextras, n)
     struct extra *pextras;
     char *n;
d1176 1
a1176 1
  if ((nlen = (n ? strlen (n) : 0)) == 0)
d1178 2
a1179 2
  sprintf (pextras->str + pextras->len, "%d%s", nlen, n);
  pextras->len = strlen (pextras->str);
d1182 4
a1185 4
static void
add_mangled_type (pextras, t)
     struct extra *pextras;
     struct type *t;
d1189 1
a1189 1
  char *tname;
d1191 4
a1194 4
  tcode = TYPE_CODE (t);
  tlen = TYPE_LENGTH (t);
  tflags = TYPE_FLAGS (t);
  tname = TYPE_NAME (t);
d1197 1
a1197 1
  switch (tcode)
d1199 15
a1213 15
    case TYPE_CODE_INT:
      if (tflags == 1)
	ADD_EXTRA ('U');
      switch (tlen)
	{
	case 1:
	  ADD_EXTRA ('c');
	  break;
	case 2:
	  ADD_EXTRA ('s');
	  break;
	case 4:
	  {
	    char *pname;
	    if ((pname = strrchr (tname, 'l'), pname) && !strcmp (pname, "long"))
d1221 44
a1264 47
	  }
	  break;
	default:
	  {

	    static struct complaint msg =
	    {"Bad int type code length x%x\n", 0, 0};

	    complain (&msg, tlen);

	  }
	}
      break;
    case TYPE_CODE_FLT:
      switch (tlen)
	{
	case 4:
	  ADD_EXTRA ('f');
	  break;
	case 8:
	  ADD_EXTRA ('d');
	  break;
	case 16:
	  ADD_EXTRA ('r');
	  break;
	default:
	  {
	    static struct complaint msg =
	    {"Bad float type code length x%x\n", 0, 0};
	    complain (&msg, tlen);
	  }
	}
      break;
    case TYPE_CODE_REF:
      ADD_EXTRA ('R');
      /* followed by what it's a ref to */
      break;
    case TYPE_CODE_PTR:
      ADD_EXTRA ('P');
      /* followed by what it's a ptr to */
      break;
    case TYPE_CODE_TYPEDEF:
      {
	static struct complaint msg =
	{"Typedefs in overloaded functions not yet supported\n", 0, 0};
	complain (&msg);
      }
d1268 1
a1268 1
      ADD_EXTRA ('F');
d1272 1
a1272 1
      ADD_EXTRA ('v');
d1275 1
a1275 1
      ADD_EXTRA ('M');
d1277 2
a1278 2
      add_name (pextras, tname);
      ADD_EXTRA ('F');		/* then mangle function */
d1280 3
a1282 3
    case TYPE_CODE_STRUCT:	/* C struct */
    case TYPE_CODE_UNION:	/* C union */
    case TYPE_CODE_ENUM:	/* Enumeration type */
d1284 1
a1284 1
      add_name (pextras, tname);
d1287 4
a1290 4
      /* errors possible types/not supported */
    case TYPE_CODE_CHAR:
    case TYPE_CODE_ARRAY:	/* Array type */
    case TYPE_CODE_MEMBER:	/* Member type */
d1292 1
a1292 1
    case TYPE_CODE_COMPLEX:	/* Complex float */
d1294 2
a1295 2
    case TYPE_CODE_SET:	/* Pascal sets */
    case TYPE_CODE_RANGE:
d1299 1
a1299 1
    default:
d1301 2
a1302 3
	static struct complaint msg =
	{"Unknown type code x%x\n", 0, 0};
	complain (&msg, tcode);
d1306 1
a1306 1
    add_mangled_type (pextras, t->target_type);
d1311 1
a1311 1
cfront_mangle_name (type, i, j)
d1316 2
a1317 2
  struct fn_field *f;
  char *mangled_name = gdb_mangle_name (type, i, j);
d1319 1
a1319 1
  f = TYPE_FN_FIELDLIST1 (type, i);	/* moved from below */
d1321 15
a1335 15
  /* kludge to support cfront methods - gdb expects to find "F" for 
     ARM_mangled names, so when we mangle, we have to add it here */
  if (ARM_DEMANGLING)
    {
      int k;
      char *arm_mangled_name;
      struct fn_field *method = &f[j];
      char *field_name = TYPE_FN_FIELDLIST_NAME (type, i);
      char *physname = TYPE_FN_FIELD_PHYSNAME (f, j);
      char *newname = type_name_no_tag (type);

      struct type *ftype = TYPE_FN_FIELD_TYPE (f, j);
      int nargs = TYPE_NFIELDS (ftype);		/* number of args */
      struct extra extras, *pextras = &extras;
      INIT_EXTRA
d1338 2
a1339 2
	ADD_EXTRA ('S')
	  ADD_EXTRA ('F')
d1341 17
a1357 18
	  if (nargs <= 1)	/* no args besides this */
	  ADD_EXTRA ('v')
	    else
	  {
	    for (k = 1; k < nargs; k++)
	      {
		struct type *t;
		t = TYPE_FIELD_TYPE (ftype, k);
		add_mangled_type (pextras, t);
	      }
	  }
      ADD_EXTRA ('\0')
	printf ("add_mangled_type: %s\n", extras.str);	/* FIXME */
      arm_mangled_name = malloc (strlen (mangled_name) + extras.len);
      sprintf (arm_mangled_name, "%s%s", mangled_name, extras.str);
      free (mangled_name);
      mangled_name = arm_mangled_name;
    }
d1359 1
a1359 1
#endif /* 0 */
d1427 1
a1427 1
  if (*p != ')')		/* () means no args, skip while */
d1438 1
a1438 1
		    parse_and_eval_type (argtypetext, p - argtypetext);
d1457 1
a1457 1
  if (p[-2] != '.')		/* Not '...' */
d1463 1
a1463 1
      argtypes[argcount] = NULL;	/* Ellist terminator */
d1468 1
a1468 1
  f = TYPE_FN_FIELDLIST1 (type, method_id);
d1490 1
a1490 1
      *(TYPE_CPLUS_SPECIFIC (type)) = cplus_struct_default;
d1518 1
a1518 1
	obsavestring (name, strlen (name), &objfile->type_obstack);
d1570 2
a1571 2

  if (objfile->fundamental_types == NULL)
d1574 3
a1576 3
      objfile->fundamental_types = (struct type **)
	obstack_alloc (&objfile->type_obstack, nbytes);
      memset ((char *) objfile->fundamental_types, 0, nbytes);
d1583 1
a1583 1
  typep = objfile->fundamental_types + typeid;
d1629 2
a1630 2
     struct type *base;
     struct type *dclass;
d1633 1
a1633 1

d1655 1
a1655 1
     struct type *dclass;
d1662 1
a1662 1
  if (TYPE_CODE (dclass) != TYPE_CODE_CLASS)
d1664 1
a1664 1

d1666 5
a1670 5
  if (TYPE_FIELD_VIRTUAL_BITS (dclass))
    for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
      if (B_TST (TYPE_FIELD_VIRTUAL_BITS (dclass), i))
	return 1;

d1672 10
a1681 3
  if (TYPE_FN_FIELDLISTS (dclass))
    for (i = 0; i < TYPE_NFN_FIELDS (dclass); i++)
      if (TYPE_FN_FIELD_VIRTUAL_P (TYPE_FN_FIELDLIST1 (dclass, i), 0))
d1683 2
a1684 9

  /* Recurse on non-virtual bases to see if any of them needs a vtable */
  if (TYPE_FIELD_VIRTUAL_BITS (dclass))
    for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
      if ((!B_TST (TYPE_FIELD_VIRTUAL_BITS (dclass), i)) &&
	  (has_vtable (TYPE_FIELD_TYPE (dclass, i))))
	return 1;

  /* Well, maybe we don't need a virtual table */
d1689 1
a1689 1

d1692 1
a1692 1

d1698 1
a1698 1
     struct type *dclass;
d1706 1
a1706 1
  if (TYPE_CODE (dclass) != TYPE_CODE_CLASS)
d1709 4
a1712 4
  for (i = 0; i < TYPE_N_BASECLASSES (dclass); i++)
    if (!TYPE_FIELD_VIRTUAL (dclass, i) &&
	has_vtable (TYPE_FIELD_TYPE (dclass, i)))
      return TYPE_FIELD_TYPE (dclass, i);
d1719 1
a1719 1
static struct vbase *current_vbase_list = NULL;
d1724 1
a1724 1

d1731 1
a1731 1
     struct type *dclass;
d1733 1
a1733 1
  struct vbase *tmp_vbase;
d1736 1
a1736 1
  if (TYPE_CODE (dclass) != TYPE_CODE_CLASS)
d1742 1
a1742 1
      virtual_base_list_aux (TYPE_FIELD_TYPE (dclass, i));
d1745 25
a1769 25
      if (BASETYPE_VIA_VIRTUAL (dclass, i))
	{
	  struct type *basetype = TYPE_FIELD_TYPE (dclass, i);

	  /* Check if base already recorded */
	  tmp_vbase = current_vbase_list;
	  while (tmp_vbase)
	    {
	      if (tmp_vbase->vbasetype == basetype)
		break;		/* found it */
	      tmp_vbase = tmp_vbase->next;
	    }

	  if (!tmp_vbase)	/* normal exit from loop */
	    {
	      /* Allocate new item for this virtual base */
	      tmp_vbase = (struct vbase *) xmalloc (sizeof (struct vbase));

	      /* Stick it on at the end of the list */
	      tmp_vbase->vbasetype = basetype;
	      tmp_vbase->next = current_vbase_list;
	      current_vbase_list = tmp_vbase;
	    }
	}			/* if virtual */
    }				/* for loop over bases */
d1777 1
a1777 1

d1781 1
a1781 1

d1784 1
a1784 1

d1790 1
a1790 1
     struct type *dclass;
d1792 2
a1793 2
  register struct vbase *tmp_vbase;
  register struct vbase *tmp_vbase_2;
d1796 1
a1796 1
  struct type **vbase_array;
d1799 1
a1799 1
  virtual_base_list_aux (dclass);
d1801 1
a1801 1
  for (i = 0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; i++, tmp_vbase = tmp_vbase->next)
d1806 1
a1806 1
  vbase_array = (struct type **) xmalloc ((count + 1) * sizeof (struct type *));
d1808 1
a1808 1
  for (i = count - 1, tmp_vbase = current_vbase_list; i >= 0; i--, tmp_vbase = tmp_vbase->next)
d1816 1
a1816 1
      free (tmp_vbase_2);
d1819 1
a1819 1

d1828 1
a1828 1
     struct type *dclass;
d1831 2
a1832 2
  register struct vbase *tmp_vbase;

d1834 1
a1834 1
  virtual_base_list_aux (dclass);
d1836 1
a1836 1
  for (i = 0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; i++, tmp_vbase = tmp_vbase->next)
d1847 1
a1847 1
     struct type *dclass;
d1850 2
a1851 2
  register struct vbase *tmp_vbase;
  struct type *primary;
d1859 1
a1859 1
  virtual_base_list_aux (dclass);
d1861 1
a1861 1
  for (i = 0, tmp_vbase = current_vbase_list; tmp_vbase != NULL; tmp_vbase = tmp_vbase->next)
d1864 1
a1864 1
	continue;
d1876 3
a1878 3
virtual_base_index (base, dclass)
     struct type *base;
     struct type *dclass;
d1880 1
a1880 1
  register struct type *vbase;
d1883 2
a1884 2
  if ((TYPE_CODE (dclass) != TYPE_CODE_CLASS) ||
      (TYPE_CODE (base) != TYPE_CODE_CLASS))
d1888 1
a1888 1
  vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[0];
d1892 2
a1893 2
	break;
      vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[++i];
d1908 3
a1910 3
virtual_base_index_skip_primaries (base, dclass)
     struct type *base;
     struct type *dclass;
d1912 1
a1912 1
  register struct type *vbase;
d1914 1
a1914 1
  struct type *primary;
d1916 2
a1917 2
  if ((TYPE_CODE (dclass) != TYPE_CODE_CLASS) ||
      (TYPE_CODE (base) != TYPE_CODE_CLASS))
d1920 1
a1920 1
  primary = TYPE_RUNTIME_PTR (dclass) ? TYPE_PRIMARY_BASE (dclass) : NULL;
d1924 1
a1924 1
  vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[0];
d1927 2
a1928 2
      if (!primary || (virtual_base_index_skip_primaries (vbase, primary) < 0))
	j++;
d1930 2
a1931 2
	break;
      vbase = TYPE_VIRTUAL_BASE_LIST (dclass)[++i];
d1943 1
a1943 1
     struct type *dclass;
d1945 1
a1945 1
  struct type *pbc;		/* primary base class */
d1947 1
a1947 1
  /* Simply recurse on primary base */
d1966 1
a1966 1
     struct type *dclass;
d1968 4
a1971 2
  int base;			/* index for base classes */
  int fn, oi;			/* function and overloaded instance indices */
d1973 2
a1974 4
  int vfuncs;			/* count to return */

  /* recurse on bases that can share virtual table */
  struct type *pbc = primary_base_class (dclass);
d1977 1
a1977 1

d1981 1
a1981 1
	vfuncs++;
d1985 1
a1987 1

d1998 2
a1999 2
     struct badness_vector *a;
     struct badness_vector *b;
d2003 4
a2006 4
  short found_pos = 0;		/* any positives in c? */
  short found_neg = 0;		/* any negatives in c? */

  /* differing lengths => incomparable */
d2010 2
a2011 2
  /* Subtract b from a */
  for (i = 0; i < a->length; i++)
d2015 1
a2015 1
	found_pos = 1;
d2017 1
a2017 1
	found_neg = 1;
d2023 1
a2023 1
	return 1;		/* incomparable */
d2025 1
a2025 1
	return 3;		/* A > B */
d2027 1
a2027 2
  else
    /* no positives */
d2030 1
a2030 1
	return 2;		/* A < B */
d2032 1
a2032 1
	return 0;		/* A == B */
d2042 4
a2045 4
     struct type **parms;
     int nparms;
     struct type **args;
     int nargs;
d2048 1
a2048 1
  struct badness_vector *bv;
d2052 1
a2052 1
  bv->length = nargs + 1;	/* add 1 for the length-match rank */
d2057 1
a2057 1

d2065 2
a2066 2
  for (i = 1; i <= min_len; i++)
    bv->rank[i] = rank_one_type (parms[i - 1], args[i - 1]);
d2068 2
a2069 2
  /* If more arguments than parameters, add dummy entries */
  for (i = min_len + 1; i <= nargs; i++)
d2087 2
a2088 2
     struct type *parm;
     struct type *arg;
d2108 3
a2110 3
  /* Debugging only */
  printf ("------ Arg is %s [%d], parm is %s [%d]\n",
      TYPE_NAME (arg), TYPE_CODE (arg), TYPE_NAME (parm), TYPE_CODE (parm));
d2117 220
a2336 220
    case TYPE_CODE_PTR:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_PTR:
	  if (TYPE_CODE (TYPE_TARGET_TYPE (parm)) == TYPE_CODE_VOID)
	    return VOID_PTR_CONVERSION_BADNESS;
	  else
	    return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
	case TYPE_CODE_ARRAY:
	  return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
	case TYPE_CODE_FUNC:
	  return rank_one_type (TYPE_TARGET_TYPE (parm), arg);
	case TYPE_CODE_INT:
	case TYPE_CODE_ENUM:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	  return POINTER_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
    case TYPE_CODE_ARRAY:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_PTR:
	case TYPE_CODE_ARRAY:
	  return rank_one_type (TYPE_TARGET_TYPE (parm), TYPE_TARGET_TYPE (arg));
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
    case TYPE_CODE_FUNC:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_PTR:	/* funcptr -> func */
	  return rank_one_type (parm, TYPE_TARGET_TYPE (arg));
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
    case TYPE_CODE_INT:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_INT:
	  if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))
	    {
	      /* Deal with signed, unsigned, and plain chars and
	         signed and unsigned ints */
	      if (TYPE_NOSIGN (parm))
		{
		  /* This case only for character types */
		  if (TYPE_NOSIGN (arg))	/* plain char -> plain char */
		    return 0;
		  else
		    return INTEGER_COERCION_BADNESS;	/* signed/unsigned char -> plain char */
		}
	      else if (TYPE_UNSIGNED (parm))
		{
		  if (TYPE_UNSIGNED (arg))
		    {
		      if (!strcmp (TYPE_NAME (parm), TYPE_NAME (arg)))
			return 0;	/* unsigned int -> unsigned int, or unsigned long -> unsigned long */
		      else if (!strcmp (TYPE_NAME (arg), "int") && !strcmp (TYPE_NAME (parm), "long"))
			return INTEGER_PROMOTION_BADNESS;	/* unsigned int -> unsigned long */
		      else
			return INTEGER_COERCION_BADNESS;	/* unsigned long -> unsigned int */
		    }
		  else
		    {
		      if (!strcmp (TYPE_NAME (arg), "long") && !strcmp (TYPE_NAME (parm), "int"))
			return INTEGER_COERCION_BADNESS;	/* signed long -> unsigned int */
		      else
			return INTEGER_CONVERSION_BADNESS;	/* signed int/long -> unsigned int/long */
		    }
		}
	      else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))
		{
		  if (!strcmp (TYPE_NAME (parm), TYPE_NAME (arg)))
		    return 0;
		  else if (!strcmp (TYPE_NAME (arg), "int") && !strcmp (TYPE_NAME (parm), "long"))
		    return INTEGER_PROMOTION_BADNESS;
		  else
		    return INTEGER_COERCION_BADNESS;
		}
	      else
		return INTEGER_COERCION_BADNESS;
	    }
	  else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
	    return INTEGER_PROMOTION_BADNESS;
	  else
	    return INTEGER_COERCION_BADNESS;
	case TYPE_CODE_ENUM:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	  return INTEGER_PROMOTION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	case TYPE_CODE_PTR:
	  return NS_POINTER_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_ENUM:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_INT:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	  return INTEGER_COERCION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_CHAR:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	  return INTEGER_COERCION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	case TYPE_CODE_INT:
	  if (TYPE_LENGTH (arg) > TYPE_LENGTH (parm))
	    return INTEGER_COERCION_BADNESS;
	  else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
	    return INTEGER_PROMOTION_BADNESS;
	  /* >>> !! else fall through !! <<< */
	case TYPE_CODE_CHAR:
	  /* Deal with signed, unsigned, and plain chars for C++
	     and with int cases falling through from previous case */
	  if (TYPE_NOSIGN (parm))
	    {
	      if (TYPE_NOSIGN (arg))
		return 0;
	      else
		return INTEGER_COERCION_BADNESS;
	    }
	  else if (TYPE_UNSIGNED (parm))
	    {
	      if (TYPE_UNSIGNED (arg))
		return 0;
	      else
		return INTEGER_PROMOTION_BADNESS;
	    }
	  else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))
	    return 0;
	  else
	    return INTEGER_COERCION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_RANGE:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_INT:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	  return INTEGER_COERCION_BADNESS;
	case TYPE_CODE_FLT:
	  return INT_FLOAT_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_BOOL:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_INT:
	case TYPE_CODE_CHAR:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_ENUM:
	case TYPE_CODE_FLT:
	case TYPE_CODE_PTR:
	  return BOOLEAN_CONVERSION_BADNESS;
	case TYPE_CODE_BOOL:
	  return 0;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_FLT:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_FLT:
	  if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))
	    return FLOAT_PROMOTION_BADNESS;
	  else if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))
	    return 0;
	  else
	    return FLOAT_CONVERSION_BADNESS;
	case TYPE_CODE_INT:
	case TYPE_CODE_BOOL:
	case TYPE_CODE_ENUM:
	case TYPE_CODE_RANGE:
	case TYPE_CODE_CHAR:
	  return INT_FLOAT_CONVERSION_BADNESS;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_COMPLEX:
      switch (TYPE_CODE (arg))
	{			/* Strictly not needed for C++, but... */
	case TYPE_CODE_FLT:
	  return FLOAT_PROMOTION_BADNESS;
	case TYPE_CODE_COMPLEX:
	  return 0;
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_STRUCT:
d2338 57
a2394 57
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_STRUCT:
	  /* Check for derivation */
	  if (is_ancestor (parm, arg))
	    return BASE_CONVERSION_BADNESS;
	  /* else fall through */
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_UNION:
      switch (TYPE_CODE (arg))
	{
	case TYPE_CODE_UNION:
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_MEMBER:
      switch (TYPE_CODE (arg))
	{
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_METHOD:
      switch (TYPE_CODE (arg))
	{

	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_REF:
      switch (TYPE_CODE (arg))
	{

	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}

      break;
    case TYPE_CODE_SET:
      switch (TYPE_CODE (arg))
	{
	  /* Not in C++ */
	case TYPE_CODE_SET:
	  return rank_one_type (TYPE_FIELD_TYPE (parm, 0), TYPE_FIELD_TYPE (arg, 0));
	default:
	  return INCOMPATIBLE_TYPE_BADNESS;
	}
      break;
    case TYPE_CODE_VOID:
    default:
      return INCOMPATIBLE_TYPE_BADNESS;
    }				/* switch (TYPE_CODE (arg)) */
d2397 2
a2398 2

/* End of functions for overload resolution */
d2440 1
a2440 1
	  if ((*args++)->code == TYPE_CODE_VOID)
d2580 1
a2580 1
      = (struct type **) obstack_base (&dont_print_type_obstack);
d2582 2
a2583 2
      int i = (struct type **) obstack_next_free (&dont_print_type_obstack)
      - first_dont_print;
d2616 63
a2678 63
    case TYPE_CODE_UNDEF:
      printf_filtered ("(TYPE_CODE_UNDEF)");
      break;
    case TYPE_CODE_PTR:
      printf_filtered ("(TYPE_CODE_PTR)");
      break;
    case TYPE_CODE_ARRAY:
      printf_filtered ("(TYPE_CODE_ARRAY)");
      break;
    case TYPE_CODE_STRUCT:
      printf_filtered ("(TYPE_CODE_STRUCT)");
      break;
    case TYPE_CODE_UNION:
      printf_filtered ("(TYPE_CODE_UNION)");
      break;
    case TYPE_CODE_ENUM:
      printf_filtered ("(TYPE_CODE_ENUM)");
      break;
    case TYPE_CODE_FUNC:
      printf_filtered ("(TYPE_CODE_FUNC)");
      break;
    case TYPE_CODE_INT:
      printf_filtered ("(TYPE_CODE_INT)");
      break;
    case TYPE_CODE_FLT:
      printf_filtered ("(TYPE_CODE_FLT)");
      break;
    case TYPE_CODE_VOID:
      printf_filtered ("(TYPE_CODE_VOID)");
      break;
    case TYPE_CODE_SET:
      printf_filtered ("(TYPE_CODE_SET)");
      break;
    case TYPE_CODE_RANGE:
      printf_filtered ("(TYPE_CODE_RANGE)");
      break;
    case TYPE_CODE_STRING:
      printf_filtered ("(TYPE_CODE_STRING)");
      break;
    case TYPE_CODE_ERROR:
      printf_filtered ("(TYPE_CODE_ERROR)");
      break;
    case TYPE_CODE_MEMBER:
      printf_filtered ("(TYPE_CODE_MEMBER)");
      break;
    case TYPE_CODE_METHOD:
      printf_filtered ("(TYPE_CODE_METHOD)");
      break;
    case TYPE_CODE_REF:
      printf_filtered ("(TYPE_CODE_REF)");
      break;
    case TYPE_CODE_CHAR:
      printf_filtered ("(TYPE_CODE_CHAR)");
      break;
    case TYPE_CODE_BOOL:
      printf_filtered ("(TYPE_CODE_BOOL)");
      break;
    case TYPE_CODE_TYPEDEF:
      printf_filtered ("(TYPE_CODE_TYPEDEF)");
      break;
    default:
      printf_filtered ("(UNKNOWN TYPE CODE)");
      break;
d2739 7
a2745 7
    case TYPE_CODE_METHOD:
    case TYPE_CODE_FUNC:
      printfi_filtered (spaces, "arg_types ");
      gdb_print_address (TYPE_ARG_TYPES (type), gdb_stdout);
      puts_filtered ("\n");
      print_arg_types (TYPE_ARG_TYPES (type), spaces);
      break;
d2747 6
a2752 6
    case TYPE_CODE_STRUCT:
      printfi_filtered (spaces, "cplus_stuff ");
      gdb_print_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
      puts_filtered ("\n");
      print_cplus_stuff (type, spaces);
      break;
d2754 12
a2765 12
    default:
      /* We have to pick one of the union types to be able print and test
         the value.  Pick cplus_struct_type, even though we know it isn't
         any particular one. */
      printfi_filtered (spaces, "type_specific ");
      gdb_print_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
      if (TYPE_CPLUS_SPECIFIC (type) != NULL)
	{
	  printf_filtered (" (unknown data form)");
	}
      printf_filtered ("\n");
      break;
d2785 1
a2785 1
  builtin_type_true_char =
d2825 1
a2825 1
  builtin_type_unsigned_long_long =
d2892 1
a2892 1
  /* Add user knob for controlling resolution of opaque types */
d2894 1
a2894 1
    (add_set_cmd ("opaque-type-resolution", class_support, var_boolean, (char *) &opaque_type_resolution,
d2912 26
a2937 26
  register_gdbarch_swap (&builtin_type_void, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_char, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_short, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_long_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_signed_char, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_char, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_short, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_int, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_unsigned_long_long, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_float, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_double, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_long_double, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_complex, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_double_complex, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_string, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int8, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint8, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int16, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint16, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int32, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint32, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_int64, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_uint64, sizeof (struct type *), NULL);
@


1.1.1.7
log
@import gdb-1999-07-19 snapshot
@
text
@a1618 14
int
is_integral_type (t)
     struct type *t;
{
  CHECK_TYPEDEF (t);
  return
    ((t != NULL)
     && ((TYPE_CODE(t) == TYPE_CODE_INT)
         || (TYPE_CODE(t) == TYPE_CODE_ENUM)
         || (TYPE_CODE(t) == TYPE_CODE_CHAR)
         || (TYPE_CODE(t) == TYPE_CODE_RANGE)
         || (TYPE_CODE(t) == TYPE_CODE_BOOL)));
}

@


1.1.1.8
log
@import gdb-1999-09-08 snapshot
@
text
@d1626 5
a1630 5
     && ((TYPE_CODE (t) == TYPE_CODE_INT)
	 || (TYPE_CODE (t) == TYPE_CODE_ENUM)
	 || (TYPE_CODE (t) == TYPE_CODE_CHAR)
	 || (TYPE_CODE (t) == TYPE_CODE_RANGE)
	 || (TYPE_CODE (t) == TYPE_CODE_BOOL)));
d1997 1
d1999 1
d2488 1
a2488 1
  gdb_print_host_address (TYPE_FN_FIELDLISTS (type), gdb_stdout);
d2496 2
a2497 2
      gdb_print_host_address (TYPE_FN_FIELDLIST_NAME (type, method_idx),
			      gdb_stdout);
d2507 2
a2508 2
	  gdb_print_host_address (TYPE_FN_FIELD_PHYSNAME (f, overload_idx),
				  gdb_stdout);
d2511 1
a2511 1
	  gdb_print_host_address (TYPE_FN_FIELD_TYPE (f, overload_idx), gdb_stdout);
d2518 1
a2518 1
	  gdb_print_host_address (TYPE_FN_FIELD_ARGS (f, overload_idx), gdb_stdout);
d2523 2
a2524 2
	  gdb_print_host_address (TYPE_FN_FIELD_FCONTEXT (f, overload_idx),
				  gdb_stdout);
d2558 1
a2558 1
      gdb_print_host_address (TYPE_FIELD_VIRTUAL_BITS (type), gdb_stdout);
d2571 1
a2571 1
	  gdb_print_host_address (TYPE_FIELD_PRIVATE_BITS (type), gdb_stdout);
d2581 1
a2581 1
	  gdb_print_host_address (TYPE_FIELD_PROTECTED_BITS (type), gdb_stdout);
d2620 1
a2620 1
	      gdb_print_host_address (type, gdb_stdout);
d2630 1
a2630 1
  gdb_print_host_address (type, gdb_stdout);
d2634 1
a2634 1
  gdb_print_host_address (TYPE_NAME (type), gdb_stdout);
d2640 1
a2640 1
      gdb_print_host_address (TYPE_TAG_NAME (type), gdb_stdout);
d2713 1
a2713 1
  gdb_print_host_address (TYPE_OBJFILE (type), gdb_stdout);
d2716 1
a2716 1
  gdb_print_host_address (TYPE_TARGET_TYPE (type), gdb_stdout);
d2723 1
a2723 1
  gdb_print_host_address (TYPE_POINTER_TYPE (type), gdb_stdout);
d2726 1
a2726 1
  gdb_print_host_address (TYPE_REFERENCE_TYPE (type), gdb_stdout);
d2739 1
a2739 1
  gdb_print_host_address (TYPE_FIELDS (type), gdb_stdout);
d2747 1
a2747 1
      gdb_print_host_address (TYPE_FIELD_TYPE (type, idx), gdb_stdout);
d2752 1
a2752 1
      gdb_print_host_address (TYPE_FIELD_NAME (type, idx), gdb_stdout);
d2760 1
a2760 1
  gdb_print_host_address (TYPE_VPTR_BASETYPE (type), gdb_stdout);
d2772 1
a2772 1
      gdb_print_host_address (TYPE_ARG_TYPES (type), gdb_stdout);
d2779 1
a2779 1
      gdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
d2789 1
a2789 1
      gdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), gdb_stdout);
@


1.1.1.9
log
@import gdb-1999-10-18 snapshot
@
text
@a67 1
struct type *builtin_type_v4sf;
a635 37

/* Construct and return a type of the form:
	struct NAME { ELT_TYPE ELT_NAME[N]; }
   We use these types for SIMD registers.  For example, the type of
   the SSE registers on the late x86-family processors is:
	struct __builtin_v4sf { float f[4]; }
   built by the function call:
	init_simd_type ("__builtin_v4sf", builtin_type_float, "f", 4)
   The type returned is a permanent type, allocated using malloc; it
   doesn't live in any objfile's obstack.  */
struct type *
init_simd_type (char *name,
		struct type *elt_type,
		char *elt_name,
		int n)
{
  struct type *t;
  struct field *f;

  /* Build the field structure.  */
  f = xmalloc (sizeof (*f));
  memset (f, 0, sizeof (*f));
  f->loc.bitpos = 0;
  f->type = create_array_type (0, elt_type,
			       create_range_type (0, builtin_type_int, 0, n));
  f->name = elt_name;

  /* Build a struct type with that field.  */
  t = init_type (TYPE_CODE_STRUCT, n * TYPE_LENGTH (elt_type), 0, 0, 0);
  t->nfields = 1;
  t->fields = f;
  t->tag_name = name;

  return t;
}


a2927 4

  /* Build SIMD types.  */
  builtin_type_v4sf
    = init_simd_type ("__builtin_v4sf", builtin_type_float, "f", 4);
a2965 1
  register_gdbarch_swap (&builtin_type_v4sf, sizeof (struct type *), NULL);
@


1.1.1.10
log
@import gdb-1999-11-01 snapshot
@
text
@d661 1
a661 2
			       create_range_type (0, builtin_type_int,
						  0, n-1));
@


1.1.1.11
log
@import gdb-1999-12-06 snapshot
@
text
@a68 4
struct type *builtin_type_v4si;
struct type *builtin_type_v8qi;
struct type *builtin_type_v4hi;
struct type *builtin_type_v2si;
d647 1
a647 1
static struct type *
a2970 8
  builtin_type_v4si
    = init_simd_type ("__builtin_v4si", builtin_type_int32, "f", 4);
  builtin_type_v8qi
    = init_simd_type ("__builtin_v8qi", builtin_type_int8, "f", 8);
  builtin_type_v4hi
    = init_simd_type ("__builtin_v4hi", builtin_type_int16, "f", 4);
  builtin_type_v2si
    = init_simd_type ("__builtin_v2si", builtin_type_int32, "f", 2);
a3009 4
  register_gdbarch_swap (&builtin_type_v4si, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v8qi, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v4hi, sizeof (struct type *), NULL);
  register_gdbarch_swap (&builtin_type_v2si, sizeof (struct type *), NULL);
@


1.1.1.12
log
@import gdb-1999-12-13 snapshot
@
text
@a72 3
struct type *builtin_type_ptr;
struct type *builtin_type_CORE_ADDR;
struct type *builtin_type_bfd_vma;
a2982 17

  /* Pointer/Address types. */
  /* NOTE: At present there is no way of differentiating between at
     target address and the target C language pointer type type even
     though the two can be different (cf d10v) */
  builtin_type_ptr =
    init_type (TYPE_CODE_INT, TARGET_PTR_BIT / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__ptr", (struct objfile *) NULL);
  builtin_type_CORE_ADDR =
    init_type (TYPE_CODE_INT, TARGET_PTR_BIT / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__CORE_ADDR", (struct objfile *) NULL);
  builtin_type_bfd_vma =
    init_type (TYPE_CODE_INT, TARGET_BFD_VMA_BIT / 8,
	       TYPE_FLAG_UNSIGNED,
	       "__bfd_vma", (struct objfile *) NULL);
a3025 3
  REGISTER_GDBARCH_SWAP (builtin_type_ptr);
  REGISTER_GDBARCH_SWAP (builtin_type_CORE_ADDR);
  REGISTER_GDBARCH_SWAP (builtin_type_bfd_vma);
@


