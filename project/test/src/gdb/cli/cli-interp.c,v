head	1.29;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.28
	gdb_7_6-2013-04-26-release:1.28
	gdb_7_6-branch:1.28.0.2
	gdb_7_6-2013-03-12-branchpoint:1.28
	gdb_7_5_1-2012-11-29-release:1.26
	gdb_7_5-2012-08-17-release:1.26
	gdb_7_5-branch:1.26.0.2
	gdb_7_5-2012-07-18-branchpoint:1.26
	gdb_7_4_1-2012-04-26-release:1.24.2.1
	gdb_7_4-2012-01-24-release:1.24.2.1
	gdb_7_4-branch:1.24.0.2
	gdb_7_4-2011-12-13-branchpoint:1.24
	gdb_7_3_1-2011-09-04-release:1.20
	gdb_7_3-2011-07-26-release:1.20
	gdb_7_3-branch:1.20.0.2
	gdb_7_3-2011-04-01-branchpoint:1.20
	gdb_7_2-2010-09-02-release:1.18
	gdb_7_2-branch:1.18.0.2
	gdb_7_2-2010-07-07-branchpoint:1.18
	gdb_7_1-2010-03-18-release:1.17
	gdb_7_1-branch:1.17.0.2
	gdb_7_1-2010-02-18-branchpoint:1.17
	gdb_7_0_1-2009-12-22-release:1.16
	gdb_7_0-2009-10-06-release:1.16
	gdb_7_0-branch:1.16.0.4
	gdb_7_0-2009-09-16-branchpoint:1.16
	arc-sim-20090309:1.14
	msnyder-checkpoint-072509-branch:1.16.0.2
	msnyder-checkpoint-072509-branchpoint:1.16
	arc-insight_6_8-branch:1.14.0.6
	arc-insight_6_8-branchpoint:1.14
	insight_6_8-branch:1.14.0.4
	insight_6_8-branchpoint:1.14
	reverse-20081226-branch:1.15.0.10
	reverse-20081226-branchpoint:1.15
	multiprocess-20081120-branch:1.15.0.8
	multiprocess-20081120-branchpoint:1.15
	reverse-20080930-branch:1.15.0.6
	reverse-20080930-branchpoint:1.15
	reverse-20080717-branch:1.15.0.4
	reverse-20080717-branchpoint:1.15
	msnyder-reverse-20080609-branch:1.15.0.2
	msnyder-reverse-20080609-branchpoint:1.15
	drow-reverse-20070409-branch:1.12.0.2
	drow-reverse-20070409-branchpoint:1.12
	gdb_6_8-2008-03-27-release:1.14
	gdb_6_8-branch:1.14.0.2
	gdb_6_8-2008-02-26-branchpoint:1.14
	gdb_6_7_1-2007-10-29-release:1.13
	gdb_6_7-2007-10-10-release:1.13
	gdb_6_7-branch:1.13.0.2
	gdb_6_7-2007-09-07-branchpoint:1.13
	insight_6_6-20070208-release:1.11
	gdb_6_6-2006-12-18-release:1.11
	gdb_6_6-branch:1.11.0.18
	gdb_6_6-2006-11-15-branchpoint:1.11
	insight_6_5-20061003-release:1.11
	gdb-csl-symbian-6_4_50_20060226-12:1.11
	gdb-csl-sourcerygxx-3_4_4-25:1.10
	nickrob-async-20060828-mergepoint:1.11
	gdb-csl-symbian-6_4_50_20060226-11:1.11
	gdb-csl-sourcerygxx-4_1-17:1.11
	gdb-csl-20060226-branch-local-2:1.11
	gdb-csl-sourcerygxx-4_1-14:1.11
	gdb-csl-sourcerygxx-4_1-13:1.11
	gdb-csl-sourcerygxx-4_1-12:1.11
	gdb-csl-sourcerygxx-3_4_4-21:1.11
	gdb_6_5-20060621-release:1.11
	gdb-csl-sourcerygxx-4_1-9:1.11
	gdb-csl-sourcerygxx-4_1-8:1.11
	gdb-csl-sourcerygxx-4_1-7:1.11
	gdb-csl-arm-2006q1-6:1.11
	gdb-csl-sourcerygxx-4_1-6:1.11
	gdb-csl-symbian-6_4_50_20060226-10:1.11
	gdb-csl-symbian-6_4_50_20060226-9:1.11
	gdb-csl-symbian-6_4_50_20060226-8:1.11
	gdb-csl-coldfire-4_1-11:1.11
	gdb-csl-sourcerygxx-3_4_4-19:1.11
	gdb-csl-coldfire-4_1-10:1.11
	gdb_6_5-branch:1.11.0.16
	gdb_6_5-2006-05-14-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-5:1.11
	nickrob-async-20060513-branch:1.11.0.14
	nickrob-async-20060513-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-4:1.11
	msnyder-reverse-20060502-branch:1.11.0.12
	msnyder-reverse-20060502-branchpoint:1.11
	gdb-csl-morpho-4_1-4:1.11
	gdb-csl-sourcerygxx-3_4_4-17:1.11
	readline_5_1-import-branch:1.11.0.10
	readline_5_1-import-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.11
	gdb-csl-symbian-20060226-branch:1.11.0.8
	gdb-csl-symbian-20060226-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.11
	msnyder-reverse-20060331-branch:1.11.0.6
	msnyder-reverse-20060331-branchpoint:1.11
	gdb-csl-available-20060303-branch:1.11.0.4
	gdb-csl-available-20060303-branchpoint:1.11
	gdb-csl-20060226-branch:1.11.0.2
	gdb-csl-20060226-branchpoint:1.11
	gdb_6_4-20051202-release:1.10
	msnyder-fork-checkpoint-branch:1.10.0.10
	msnyder-fork-checkpoint-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.10.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.10.0.6
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb-csl-arm-20051020-branch:1.10.0.4
	gdb-csl-arm-20051020-branchpoint:1.10
	msnyder-tracepoint-checkpoint-branch:1.10.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.10
	gdb-csl-arm-20050325-2005-q1b:1.9
	gdb-csl-arm-20050325-2005-q1a:1.9
	csl-arm-20050325-branch:1.9.0.2
	csl-arm-20050325-branchpoint:1.9
	gdb-post-i18n-errorwarning-20050211:1.9
	gdb-pre-i18n-errorwarning-20050211:1.9
	gdb_6_3-20041109-release:1.4
	gdb_6_3-branch:1.4.0.24
	gdb_6_3-20041019-branchpoint:1.4
	drow_intercu-merge-20040921:1.4
	drow_intercu-merge-20040915:1.4
	jimb-gdb_6_2-e500-branch:1.4.0.26
	jimb-gdb_6_2-e500-branchpoint:1.4
	gdb_6_2-20040730-release:1.4
	gdb_6_2-branch:1.4.0.22
	gdb_6_2-2004-07-10-gmt-branchpoint:1.4
	gdb_6_1_1-20040616-release:1.4
	gdb_6_1-2004-04-05-release:1.4
	drow_intercu-merge-20040402:1.4
	drow_intercu-merge-20040327:1.4
	ezannoni_pie-20040323-branch:1.4.0.20
	ezannoni_pie-20040323-branchpoint:1.4
	cagney_tramp-20040321-mergepoint:1.4
	cagney_tramp-20040309-branch:1.4.0.18
	cagney_tramp-20040309-branchpoint:1.4
	gdb_6_1-branch:1.4.0.16
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	drow_intercu-20040221-branch:1.4.0.14
	drow_intercu-20040221-branchpoint:1.4
	cagney_bfdfile-20040213-branch:1.4.0.12
	cagney_bfdfile-20040213-branchpoint:1.4
	drow-cplus-merge-20040208:1.4
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.10
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-branch:1.4.0.8
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.3.4.1
	kettenis_sparc-20030918-branch:1.4.0.6
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.4
	cagney_x86i386-20030821-branch:1.4.0.2
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.3
	gdb_6_0-branch:1.3.0.4
	gdb_6_0-2003-06-23-branchpoint:1.3
	jimb-ppc64-linux-20030613-branch:1.3.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.3
	cagney_convert-20030606-branch:1.2.0.28
	cagney_convert-20030606-branchpoint:1.2
	cagney_writestrings-20030508-branch:1.2.0.26
	cagney_writestrings-20030508-branchpoint:1.2
	jimb-ppc64-linux-20030528-branch:1.2.0.24
	jimb-ppc64-linux-20030528-branchpoint:1.2
	carlton_dictionary-20030523-merge:1.2
	cagney_fileio-20030521-branch:1.2.0.22
	cagney_fileio-20030521-branchpoint:1.2
	kettenis_i386newframe-20030517-mergepoint:1.2
	jimb-ppc64-linux-20030509-branch:1.2.0.20
	jimb-ppc64-linux-20030509-branchpoint:1.2
	kettenis_i386newframe-20030504-mergepoint:1.2
	carlton_dictionary-20030430-merge:1.2
	kettenis_i386newframe-20030419-branch:1.2.0.18
	kettenis_i386newframe-20030419-branchpoint:1.2
	carlton_dictionary-20030416-merge:1.2
	cagney_frameaddr-20030409-mergepoint:1.2
	kettenis_i386newframe-20030406-branch:1.2.0.16
	kettenis_i386newframe-20030406-branchpoint:1.2
	cagney_frameaddr-20030403-branchpoint:1.2
	cagney_frameaddr-20030403-branch:1.2.0.14
	cagney_framebase-20030330-mergepoint:1.2
	cagney_framebase-20030326-branch:1.2.0.12
	cagney_framebase-20030326-branchpoint:1.2
	cagney_lazyid-20030317-branch:1.2.0.10
	cagney_lazyid-20030317-branchpoint:1.2
	kettenis-i386newframe-20030316-mergepoint:1.2
	offbyone-20030313-branch:1.2.0.8
	offbyone-20030313-branchpoint:1.2
	kettenis-i386newframe-20030308-branch:1.2.0.6
	kettenis-i386newframe-20030308-branchpoint:1.2
	carlton_dictionary-20030305-merge:1.2
	cagney_offbyone-20030303-branch:1.2.0.4
	cagney_offbyone-20030303-branchpoint:1.2
	carlton_dictionary-branch:1.2.0.2
	carlton_dictionary-20030207-merge:1.2
	interps-20030202-branch:1.1.0.4
	kseitz_interps-20020528-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.29
date	2013.09.06.08.53.09;	author aburgess;	state Exp;
branches;
next	1.28;

1.28
date	2013.02.12.19.03.55;	author palves;	state Exp;
branches;
next	1.27;

1.27
date	2013.01.01.06.32.54;	author brobecke;	state Exp;
branches;
next	1.26;

1.26
date	2012.01.09.20.27.49;	author kseitz;	state Exp;
branches;
next	1.25;

1.25
date	2012.01.04.08.17.17;	author brobecke;	state Exp;
branches;
next	1.24;

1.24
date	2011.09.12.21.24.50;	author palves;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2011.08.04.19.10.13;	author palves;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.04.18.19.27;	author palves;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.04.18.13.05;	author tromey;	state Exp;
branches;
next	1.20;

1.20
date	2011.01.01.15.33.20;	author brobecke;	state Exp;
branches;
next	1.19;

1.19
date	2010.12.29.02.11.04;	author msnyder;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.17.19.28.12;	author msnyder;	state Exp;
branches;
next	1.17;

1.17
date	2010.01.01.07.31.47;	author brobecke;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.03.05.57.54;	author brobecke;	state Exp;
branches;
next	1.15;

1.15
date	2008.03.14.17.21.07;	author vprus;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.01.22.53.14;	author drow;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.23.18.08.47;	author brobecke;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.09.17.59.00;	author drow;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.17.22.40.17;	author eliz;	state Exp;
branches
	1.11.14.1;
next	1.10;

1.10
date	2005.04.26.05.03.39;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.14.22.59.36;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.14.18.55.32;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.13.23.31.17;	author msnyder;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.13.02.35.38;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.12.18.31.34;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.03.14.49.26;	author drow;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2003.06.08.18.27.14;	author cagney;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2003.02.06.05.30.17;	author cagney;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.05.29.20.03.15;	author kseitz;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.24.2.1
date	2012.01.06.04.43.32;	author brobecke;	state Exp;
branches;
next	;

1.11.14.1
date	2006.05.12.07.40.18;	author nickrob;	state Exp;
branches;
next	1.11.14.2;

1.11.14.2
date	2006.09.05.10.11.22;	author nickrob;	state Exp;
branches;
next	1.11.14.3;

1.11.14.3
date	2006.09.12.04.00.29;	author nickrob;	state Exp;
branches;
next	;

1.4.8.1
date	2003.12.14.20.27.34;	author drow;	state Exp;
branches;
next	;

1.3.4.1
date	2003.07.03.14.49.09;	author drow;	state Exp;
branches;
next	;

1.2.2.1
date	2003.02.07.19.17.54;	author carlton;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2003.06.27.21.50.14;	author carlton;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.08.05.17.13.16;	author carlton;	state Exp;
branches;
next	;

1.1.2.1
date	2002.05.29.20.03.15;	author kseitz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.06.19.19.01.21;	author kseitz;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.06.25.00.04.50;	author kseitz;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.07.25.17.15.55;	author kseitz;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2002.10.01.16.19.08;	author kseitz;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2002.11.04.21.43.51;	author ezannoni;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2002.11.04.22.08.26;	author ezannoni;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2002.11.04.22.47.26;	author ezannoni;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2002.11.04.22.58.25;	author ezannoni;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2002.11.04.23.27.31;	author ezannoni;	state Exp;
branches;
next	;

1.1.4.1
date	2003.02.03.06.02.45;	author cagney;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.02.04.07.02.36;	author cagney;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.02.04.16.52.10;	author cagney;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2003.02.04.19.59.02;	author cagney;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Give every interpreter a command_loop_proc.

  https://sourceware.org/ml/gdb-patches/2013-09/msg00179.html

gdb/ChangeLog

        * cli/cli-interp.c (_initialize_cli_interp): Add a
        command_loop_proc to interp_procs.
        * event-top.c (cli_command_loop): Change signature to match
        interp_command_loop_ftype.
        * event-top.h (cli_command_loop): Same.
        * interps.c (interp_new): Require every interpreter to have a
        command_loop_proc.
        (current_interp_command_loop): Just call the command_loop_proc on
        the current interpreter.
        * tui/tui-interp.c (_initialize_tui_interp): Add a
        command_loop_proc to interp_procs.
@
text
@/* CLI Definitions for GDB, the GNU debugger.

   Copyright (C) 2002-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "interps.h"
#include "event-top.h"
#include "ui-out.h"
#include "cli-out.h"
#include "top.h"		/* for "execute_command" */
#include "gdb_string.h"
#include "exceptions.h"

struct ui_out *cli_uiout;

/* These are the ui_out and the interpreter for the console
   interpreter.  */

/* Longjmp-safe wrapper for "execute_command".  */
static struct gdb_exception safe_execute_command (struct ui_out *uiout,
						  char *command, 
						  int from_tty);
/* These implement the cli out interpreter: */

static void *
cli_interpreter_init (struct interp *self, int top_level)
{
  return NULL;
}

static int
cli_interpreter_resume (void *data)
{
  struct ui_file *stream;

  /*sync_execution = 1; */

  /* gdb_setup_readline will change gdb_stdout.  If the CLI was
     previously writing to gdb_stdout, then set it to the new
     gdb_stdout afterwards.  */

  stream = cli_out_set_stream (cli_uiout, gdb_stdout);
  if (stream != gdb_stdout)
    {
      cli_out_set_stream (cli_uiout, stream);
      stream = NULL;
    }

  gdb_setup_readline ();

  if (stream != NULL)
    cli_out_set_stream (cli_uiout, gdb_stdout);

  return 1;
}

static int
cli_interpreter_suspend (void *data)
{
  gdb_disable_readline ();
  return 1;
}

/* Don't display the prompt if we are set quiet.  */
static int
cli_interpreter_display_prompt_p (void *data)
{
  if (interp_quiet_p (NULL))
    return 0;
  else
    return 1;
}

static struct gdb_exception
cli_interpreter_exec (void *data, const char *command_str)
{
  struct ui_file *old_stream;
  struct gdb_exception result;

  /* FIXME: cagney/2003-02-01: Need to const char *propogate
     safe_execute_command.  */
  char *str = strcpy (alloca (strlen (command_str) + 1), command_str);

  /* gdb_stdout could change between the time cli_uiout was
     initialized and now.  Since we're probably using a different
     interpreter which has a new ui_file for gdb_stdout, use that one
     instead of the default.

     It is important that it gets reset everytime, since the user
     could set gdb to use a different interpreter.  */
  old_stream = cli_out_set_stream (cli_uiout, gdb_stdout);
  result = safe_execute_command (cli_uiout, str, 1);
  cli_out_set_stream (cli_uiout, old_stream);
  return result;
}

static struct gdb_exception
safe_execute_command (struct ui_out *command_uiout, char *command, int from_tty)
{
  volatile struct gdb_exception e;
  struct ui_out *saved_uiout;

  /* Save and override the global ``struct ui_out'' builder.  */
  saved_uiout = current_uiout;
  current_uiout = command_uiout;

  TRY_CATCH (e, RETURN_MASK_ALL)
    {
      execute_command (command, from_tty);
    }

  /* Restore the global builder.  */
  current_uiout = saved_uiout;

  /* FIXME: cagney/2005-01-13: This shouldn't be needed.  Instead the
     caller should print the exception.  */
  exception_print (gdb_stderr, e);
  return e;
}

static struct ui_out *
cli_ui_out (struct interp *self)
{
  return cli_uiout;
}

/* Standard gdb initialization hook.  */
extern initialize_file_ftype _initialize_cli_interp; /* -Wmissing-prototypes */

void
_initialize_cli_interp (void)
{
  static const struct interp_procs procs = {
    cli_interpreter_init,	/* init_proc */
    cli_interpreter_resume,	/* resume_proc */
    cli_interpreter_suspend,	/* suspend_proc */
    cli_interpreter_exec,	/* exec_proc */
    cli_interpreter_display_prompt_p,	/* prompt_proc_p */
    cli_ui_out,			/* ui_out_proc */
    NULL,                       /* set_logging_proc */
    cli_command_loop            /* command_loop_proc */
  };
  struct interp *cli_interp;

  /* Create a default uiout builder for the CLI.  */
  cli_uiout = cli_out_new (gdb_stdout);
  cli_interp = interp_new (INTERP_CONSOLE, &procs);

  interp_add (cli_interp);
}
@


1.28
log
@Consistent use of (C) after "Copyright".

While writing the previous patch, I noticed that we're not consistent
with the (C) in the copyright header.  The maintainers manual prefers
having it, though also says it's optional.  We have over 10x more
files with (C) than without in gdb's code, so I spent a few minutes
grepping and fixing.  Funny enough, the testsuite has it backwards.
I'll leave that for another time.

gdb/
2013-02-12  Pedro Alves  <palves@@redhat.com>

	* amd64-darwin-tdep.c: Add (C) after Copyright.
	* cli/cli-cmds.h: Ditto.
	* cli/cli-decode.c: Ditto.
	* cli/cli-decode.h: Ditto.
	* cli/cli-dump.c: Ditto.
	* cli/cli-dump.h: Ditto.
	* cli/cli-interp.c: Ditto.
	* cli/cli-logging.c: Ditto.
	* cli/cli-script.c: Ditto.
	* cli/cli-script.h: Ditto.
	* cli/cli-setshow.c: Ditto.
	* cli/cli-setshow.h: Ditto.
	* cli/cli-utils.c: Ditto.
	* cli/cli-utils.h: Ditto.
	* config/alpha/nm-osf3.h: Ditto.
	* config/djgpp/djconfig.sh: Ditto.
	* config/i386/nm-fbsd.h: Ditto.
	* config/i386/nm-i386gnu.h: Ditto.
	* config/nm-linux.h: Ditto.
	* config/nm-nto.h: Ditto.
	* config/rs6000/nm-rs6000.h: Ditto.
	* config/sparc/nm-sol2.h: Ditto.
	* darwin-nat-info.c: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* gdb-demangle.h: Ditto.
	* i386-darwin-nat.c: Ditto.
	* i386-darwin-tdep.c: Ditto.
	* linux-fork.h: Ditto.
	* m32c-tdep.c: Ditto.
	* microblaze-linux-tdep.c: Ditto.
	* microblaze-rom.c: Ditto.
	* microblaze-tdep.c: Ditto.
	* microblaze-tdep.h: Ditto.
	* mips-linux-tdep.h: Ditto.
	* ppc-ravenscar-thread.c: Ditto.
	* ppc-ravenscar-thread.h: Ditto.
	* prologue-value.c: Ditto.
	* prologue-value.h: Ditto.
	* ravenscar-thread.c: Ditto.
	* ravenscar-thread.h: Ditto.
	* sparc-ravenscar-thread.c: Ditto.
	* sparc-ravenscar-thread.h: Ditto.
	* tilegx-linux-tdep.c: Ditto.
	* unwind_stop_reasons.def: Ditto.
	* windows-nat.h: Ditto.
	* xtensa-linux-tdep.c: Ditto.
	* xtensa-xtregs.c: Ditto.
	* regformats/regdat.sh: Ditto.
	* regformats/regdef.h: Ditto.

gdb/gdbserver/
2013-02-12  Pedro Alves  <palves@@redhat.com>

	* linux-xtensa-low.c: Ditto.
	* xtensa-xtregs.c: Ditto.
@
text
@d154 3
a156 1
    cli_ui_out			/* ui_out_proc */
@


1.27
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d3 1
a3 1
   Copyright (c) 2002-2013 Free Software Foundation, Inc.
@


1.26
log
@	* Makefile.in (SFILES): Remove wrapper.c.
	(HFILES_NO_SRCDIR): Remove wrapper.h.
	(COMMON_OBS): Remove wrapper.o.
	* cli/cli-interp.c: Don't inlude wrapper.h.
	* corelow.c: Likewise.
	(core_open): Replace gdb_target_find_new_threads with
	TRY_CATCH around target_find_new_threads.
	* eval.c (fetch_subexp_value): Likewise for value_fetch_lazy.
	* gdbtypes.c (safe_parse_type): Likewise for parse_and_eval_type.
	* varobj.c (varobj_create): Likewise for parse_exp_1 and
	evaluate_expression.
	(varobj_set_value): Likewise for evaluate_expression and
	value_assign.
	(install_new_variable): Likewise for value_fetch_lazy.
	(adjust_value_for_child_access): Likewise for value_ind.
	(c_describe_child): Likewise for value_subscript and
	value_ind.
	(c_value_of_root): Likewise for evaluate_expression.
	* wrapper.c: Remove.
	* wrapper.h: Remove.
@
text
@d3 1
a3 1
   Copyright (c) 2002-2003, 2007-2012 Free Software Foundation, Inc.
@


1.25
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a21 1
#include "wrapper.h"
@


1.24
log
@gdb/
2011-09-12  Pedro Alves  <pedro@@codesourcery.com>
	    Matt Rice  <ratmice@@gmail.com>

	PR gdb/13175

	* interps.c (struct interp) <interpreter_out>: Delete field.
	(interp_new): Remove the data and uiout parameters and adjust.
	(interp_set): Only set the current_uiout from the interpreter's
	uiout after initializing the interpreter.  Adjust call to
	init_proc.
	(interp_ui_out): Adjust to call procs->ui_out_proc.
	(interp_data, interp_name): New.
	* interps.h (interp_init_ftype): Add `self' parameter.
	(interp_ui_out_ftype): New typedef.
	(struct interp_procs) <ui_out_proc>: New method pointer.
	(interp_new): Remove the data and uiout parameters.
	(interp_data, interp_name): Declare.
	* tui/tui-interp.c (tui_init): Adjust prototype.
	(tui_ui_out): New.
	(_initialize_tui_interp): Install tui_ui_out.  Don't instanciate
	tui_out here.  Adjust call to interp_new.
	* tui/tui-io.c (tui_initialize_io): Don't set current_uiout here.
	* cli/cli-interp.c (cli_interpreter_init): Adjust prototype.
	(cli_ui_out): New.
	(_initialize_cli_interp): Install it.  Adjust call to interp_new.
	* mi/mi-common.h (struct mi_interp) <uiout>: New field.
	* mi/mi-interp.c (mi_interpreter_init): Adjust prototype.
	Initialize mi->uiout depending on the mi_version as extracted from
	the interpreter's name.
	(mi_ui_out): New.
	(_initialize_mi_interp): Install mi_ui_out.  Adjust calls to
	interp_new.  Don't allocate the ui_out's of the interpreters here.

gdb/testsuite/
2011-09-12  Matt Rice  <ratmice@@gmail.com>
	    Pedro Alves  <pedro@@codesourcery.com>

	PR gdb/13175

	* gdb.base/interp.exp: New tests.
	* gdb.base/interp.c: New file.
@
text
@d3 1
a3 2
   Copyright (c) 2002, 2003, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.24.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 1
   Copyright (c) 2002-2003, 2007-2012 Free Software Foundation, Inc.
@


1.23
log
@2011-08-04  Pedro Alves  <pedro@@codesourcery.com>

	* ui-out.h (uiout): Rename to ...
	(current_uiout): ... this.
	* ui-out.c (uiout): Rename to ...
	(current_uiout): ... this.
	* ada-lang.c (print_it_exception, print_one_exception)
	(print_mention_exception): Adjust.
	* breakpoint.c (watchpoint_check): Adjust.
	(print_breakpoint_location, print_one_breakpoint, breakpoint_1)
	(default_collect_info, watchpoints_info, print_one_catch_fork)
	(print_one_catch_vfork, print_one_catch_syscall)
	(print_one_catch_exec, mention, print_it_ranged_breakpoint)
	(print_one_ranged_breakpoint, print_mention_ranged_breakpoint)
	(print_it_watchpoint, print_mention_watchpoint)
	(print_it_masked_watchpoint, print_mention_masked_watchpoint)
	(print_it_exception_catchpoint, print_one_exception_catchpoint)
	(print_mention_exception_catchpoint, say_where, bkpt_print_it)
	(bkpt_print_mention, momentary_bkpt_print_it)
	(tracepoint_print_mention, update_static_tracepoint)
	(tracepoints_info, save_breakpoints): Adjust.
	* cli-out.c (field_separator): Adjust.
	* cp-abi.c (list_cp_abis, show_cp_abi_cmd): Adjust.
	* exceptions.c (catch_exceptions_with_msg, catch_errors): Adjust.
	* frame.c (get_current_frame): Adjust.
	* infcmd.c (run_command_1, print_return_value): Adjust.
	* inferior.c (inferior_command, info_inferiors_command): Adjust.
	* infrun.c (print_end_stepping_range_reason): Adjust.
	(print_signal_exited_reason, print_exited_reason): Adjust.
	(print_signal_received_reason, print_no_history_reason): Adjust.
	* interps.c (interp_set): Adjust.
	* osdata.c (info_osdata_command): Adjust.
	* progspace.c (maintenance_info_program_spaces_command): Adjust.
	* remote-fileio.c (remote_fileio_request): Adjust.
	* remote.c (show_remote_cmd): Adjust.
	* solib.c (info_sharedlibrary_command): Adjust.
	* source.c (print_source_lines_base): Adjust.
	* stack.c (print_stack_frame): Adjust.
	(do_gdb_disassembly, print_frame_info, print_frame): Adjust.
	* symfile-mem.c (add_vsyscall_page): Adjust.
	* symfile.c (load_progress, generic_load)
	(print_transfer_performance): Adjust.
	* thread.c (info_threads_command, restore_selected_frame)
	(thread_command): Adjust.
	* top.c (make_cleanup_restore_ui_file): Adjust.
	* tracepoint.c (tvariables_info_1, trace_status_mi, tfind_1)
	(print_one_static_tracepoint_marker): Adjust.
	* cli/cli-cmds.c (print_disassembly): Adjust.
	* cli/cli-decode.c (print_doc_line): Adjust.
	* cli/cli-interp.c (safe_execute_command): Adjust.
	* cli/cli-logging.c (set_logging_redirect, pop_output_files)
	(handle_redirections): Adjust.
	* cli/cli-script.c (show_user_1): Adjust.
	* cli/cli-setshow.c (do_setshow_command, cmd_show_list): Adjust.
	* mi/mi-cmd-break.c (breakpoint_notify): Adjust.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Adjust.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd, mi_cmd_env_path)
	(mi_cmd_env_dir): Adjust.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file)
	(print_partial_file_name, mi_cmd_file_list_exec_source_files): Adjust.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_depth, mi_cmd_stack_list_args)
	(list_args_or_locals): Adjust.
	* mi/mi-cmd-var.c (print_varobj, mi_cmd_var_create)
	(mi_cmd_var_delete, mi_cmd_var_set_format, mi_cmd_var_set_frozen)
	(mi_cmd_var_show_format, mi_cmd_var_info_num_children)
	(mi_cmd_var_list_children, mi_cmd_var_info_type)
	(mi_cmd_var_info_path_expression, mi_cmd_var_info_expression)
	(mi_cmd_var_show_attributes, mi_cmd_var_evaluate_expression)
	(mi_cmd_var_assign, mi_cmd_var_update, varobj_update_one): Adjust.
	* mi/mi-interp.c (mi_on_normal_stop): Adjust.
	* mi/mi-main.c (mi_cmd_gdb_exit, mi_cmd_thread_select)
	(mi_cmd_thread_list_ids, mi_cmd_thread_info, print_one_inferior)
	(list_available_thread_groups, mi_cmd_list_thread_groups)
	(mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values, get_register)
	(mi_cmd_data_evaluate_expression, mi_cmd_data_read_memory)
	(mi_cmd_data_read_memory_bytes, mi_cmd_list_features)
	(mi_cmd_list_target_features, mi_cmd_add_inferior)
	(mi_execute_command, mi_load_progress): Adjust.
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Adjust.
	* python/py-auto-load.c (print_script, info_auto_load_scripts):
	Adjust.
	* python/py-breakpoint.c (bppy_get_commands): Adjust.
	* tui/tui-interp.c (tui_command_loop): Adjust.
	* tui/tui-io.c (tui_setup_io, tui_initialize_io): Adjust.
@
text
@d43 1
a43 1
cli_interpreter_init (int top_level)
d138 5
d155 2
a156 1
    cli_interpreter_display_prompt_p	/* prompt_proc_p */
d162 1
a162 1
  cli_interp = interp_new (INTERP_CONSOLE, NULL, cli_uiout, &procs);
@


1.22
log
@2011-08-04  Pedro Alves  <pedro@@codesourcery.com>

	* exceptions.c (struct catcher): Remove saved_uiout field.
	(exceptions_state_mc_init): Remove the `func_uiout' parameter, and
	no longer save/resvore the global ui_out builder.
	(catch_exceptions_with_msg): Save/override/restore the global
	ui_out builder manually instead of relying on TRY_CATCH to do it.
	(catch_errors): Save/restore the global ui_out builder manually
	instead of relying on TRY_CATCH to do it.
	* exceptions.h (exceptions_state_mc_init): Remove the `func_uiout'
	parameter.
	(TRY_CATCH): Adjust.
	* cli/cli-interp.c (safe_execute_command): Save/override/restore
	the global ui_out builder manually instead of relying on TRY_CATCH
	to do it.
@
text
@d121 2
a122 2
  saved_uiout = uiout;
  uiout = command_uiout;
d130 1
a130 1
  uiout = saved_uiout;
@


1.21
log
@	* cli/cli-interp.c (struct captured_execute_command_args):
	Remove.
	(do_captured_execute_command): Remove.
	(safe_execute_command): Use TRY_CATCH.
	* cli/cli-script.c (struct wrapped_read_command_file_args):
	Remove.
	(wrapped_read_command_file): Remove.
	(script_from_file): Use TRY_CATCH.
	* exceptions.c (catch_exception): Remove.
	* exceptions.h (catch_exception): Remove.
	(deprecated_throw_reason): Update comment.
	* mi/mi-main.c (captured_mi_execute_command): Change 'data'
	argument to 'context'.
	(mi_execute_command): Use TRY_CATCH.
	* remote.c (struct start_remote_args): Remove.
	(remote_start_remote): Update; change arguments.
	(remote_open_1): Use TRY_CATCH.
@
text
@d115 1
a115 1
safe_execute_command (struct ui_out *uiout, char *command, int from_tty)
d118 5
d128 4
@


1.20
log
@run copyright.sh for 2011.
@
text
@a39 6
struct captured_execute_command_args
{
  char *command;
  int from_tty;
};

a113 9
static void
do_captured_execute_command (struct ui_out *uiout, void *data)
{
  struct captured_execute_command_args *args =
    (struct captured_execute_command_args *) data;

  execute_command (args->command, args->from_tty);
}

d117 1
a117 2
  struct gdb_exception e;
  struct captured_execute_command_args args;
d119 4
a122 4
  args.command = command;
  args.from_tty = from_tty;
  e = catch_exception (uiout, do_captured_execute_command, &args,
		       RETURN_MASK_ALL);
@


1.19
log
@2010-12-28  Michael Snyder  <msnyder@@vmware.com>

	* command.h: Comment clean-up.
	* cli/cli-cmds.c: Ditto.
	* cli/cli-cmds.h: Ditto.
	* cli/cli-decode.c: Ditto.
	* cli/cli-decode.h: Ditto.
	* cli/cli-dump.c: Ditto.
	* cli/cli-interp.c: Ditto.
	* cli/cli-logging.c: Ditto.
	* cli/cli-script.c: Ditto.
	* cli/cli-setshow.c: Ditto.
	* cli/cli-setshow.h: Ditto.
@
text
@d3 1
a3 1
   Copyright (c) 2002, 2003, 2007, 2008, 2009, 2010
@


1.18
log
@2010-05-17  Michael Snyder  <msnyder@@vmware.com>

	* cli/cli-cmds.c: White space.
	* cli/cli-decode.c: White space.
	* cli/cli-dump.c: White space.
	* cli/cli-interp.c: White space.
	* cli/cli-logging.c: White space.
	* cli/cli-script.c: White space.
	* cli/cli-setshow.c: White space.
@
text
@d33 2
a34 1
/* These are the ui_out and the interpreter for the console interpreter.  */
d38 2
a39 1
						  char *command, int from_tty);
d61 3
a63 2
  /* gdb_setup_readline will change gdb_stdout.  If the CLI was previously
     writing to gdb_stdout, then set it to the new gdb_stdout afterwards.  */
d107 4
a110 3
  /* gdb_stdout could change between the time cli_uiout was initialized
     and now. Since we're probably using a different interpreter which has
     a new ui_file for gdb_stdout, use that one instead of the default.
d112 2
a113 2
     It is important that it gets reset everytime, since the user could
     set gdb to use a different interpreter.  */
@


1.17
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d121 1
d130 1
@


1.16
log
@        Updated copyright notices for most files.
@
text
@d3 2
a4 1
   Copyright (c) 2002, 2003, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.15
log
@	Implement MI notification for new threads.
        * doc/observer.texi (new_thread): Document.
        * observer.sh: Forward declare struct thread_info.
        * thread.c (add_thread): Notify observer.

        * interps.h (interp_init_ftype): New parameter
        top_level.
        (interp_set): Likewise.
        (top_level_interpreter_data): Declare.
        * interps.c (interp_set): New parameter top_level.
        Pass it to interpreter's init function.  Remember
        top level interpreter.
        (interpreter_exec_cmd): Adjust.
        (top_level_interpreter_data): New.
        * main.c (captured_main): Pass 1 for top_level
        parameter of interp_set.
	* cli/cli-interp.c (cli_interpreter_init): New
        parameter top_level.
        * tui/tui-interp.c (tui_init): New parameter top_level.

        * mi/mi-interp.c (mi_new_thread): New.
        (mi_interpreter_init): If top level, register
        observer for new threads.

        * Makefile.in (mi-interp.o, thread.o): Update dependencies.
@
text
@d3 1
a3 1
   Copyright (c) 2002, 2003, 2007, 2008 Free Software Foundation, Inc.
@


1.14
log
@	Updated copyright notices for most files.
@
text
@d46 1
a46 1
cli_interpreter_init (void)
@


1.13
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d3 1
a3 1
   Copyright (c) 2002, 2003, 2007 Free Software Foundation, Inc.
@


1.12
log
@Copyright updates for 2007.
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d18 1
a18 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.11
log
@
	* cli/cli-utils.h:
	* cli/cli-utils.c:
	* cli/cli-setshow.h:
	* cli/cli-setshow.c:
	* cli/cli-script.h:
	* cli/cli-script.c:
	* cli/cli-logging.c:
	* cli/cli-interp.c:
	* cli/cli-dump.h:
	* cli/cli-dump.c:
	* cli/cli-decode.h:
	* cli/cli-decode.c:
	* cli/cli-cmds.h:
	* cli/cli-cmds.c: Add (c) after Copyright.  Update FSF address.
@
text
@d3 1
a3 1
   Copyright (c) 2002, 2003 Free Software Foundation, Inc.
@


1.11.14.1
log
@2006-05-13    Changes based on Apple GDB (CVS repository 5th Sept 2005)

	* async-nat-inferior.c, async-nat-inferior.h,
	* async-nat-sigthread.c, async-nat-sigthread.h: New files

	* linux-nat.c: Include async-nat-inferior.h.
	(linux_nat_wait): Add extra argument.  If target_can_async_p
	do something completely different.

	* interps.h (interp_set, interp_set_quiet): New externs.

	* interps.c (interp_set): Make asynchronous.
	(interp_set_quiet): Don't make static.
	(current_interp_command_loop): Call functions with new arguments.

	* target.h (target_wait): Add extra argument.
	(gdb_override_async, gdb_set_async_override) New externs.
	(target_can_async_p): Make conditional on gdb_override_async.

	* target.c (gdb_override_async): New variable.
	(gdb_set_async_override, do_restore_target_async_mask):
	New functions.
	(debug_to_wait): Add extra argument.

	* linux-thread-db.c (thread_db_wait): Add extra argument.

	* wrapper.h (safe_execute_command): Declare structure.

	* top.c (*deprecated_target_wait_hook): Add extra argument.
	(read_command_file): Make asynchronous.

	* remote.c (remote_wait, remote_async_wait): Add extra argument.

	* infrun.c: Include event-top.h
	(wait_for_inferior, fetch_inferior_event): Add extra argument to
	target_wait.
	(proceed): Set target_executing = 0.
	(handle_inferior_event): Call async_disable_stdin if async.

	* inf-ptrace.c: Include inf-loop.h, async-nat-inferior.h.
	(inf_ptrace_him): Create a signal thread.
	(inf_ptrace_wait): Add extra argument to target_wait.

	* inf-loop.c (inferior_event_handler, complete_execution):
	Changes for asynchronous operation (copied verbatim).

	* inf-child.c: Include async-nat-inferior.h.
	(inf_child_target): Use methods async_terminal_inferior
	and async_terminal_ours.

	* i386-linux-nat.c: Include inf-loop.h, async-nat-inferior.h.
	(i386_linux_resume): Call gdb_process_events and then
	async methods.

	* exec.c: Include event-loop.h, async-nat-inferior.h.
	(async_file_handler, standard_async, standard_is_async_p)
	(standard_can_async_p): New functions.
	(init_exec_ops): Initialise above methods.

	* event-top.h (cli_command_loop): Make argument void*.

	* event-top.c (display_gdb_prompt, async_enable_stdin)
	(async_disable_stdin, handle_sigint, async_request_quit)
	(gdb_setup_readline, _initialize_event_loop):
	Changes for asynchronous operation (copied verbatim).
	(cli_command_loop): Make argument void*.

	* event-loop.h (gdb_client_data): Move typedef to defs.h.
	(gdb_create_event): Declare.
	(event_handler_func): Move typedef from event-loop.c.

	* event-loop.c (use_poll): Set to 0.
	(gdb_queue_event, gdb_create_event): New functions.
	(async_queue_event): Don't make static.
	(create_file_event): Use gdb_create_event.
	(gdb_event): Change component from int to void*.
	(process_event, handle_file_event, handle_timer_event):
	Change according to gdb_event.
	(event_handler_func): Move typedef to event-loop.c.

	* defs.h: (gdb_mi_run_status, event_loop_p): New externs.
	(gdb_client_data): Move typedef from event-loop.h.
	(*deprecated_command_loop_hook): Make argument void*.
	(*deprecated_target_wait_hook): Add argument.

	* cli-out.h (cli_quoted_out_new): Declare.

	* cli-out.c (cli_quoted_out_new): New function.
	Include mi/mi-console.h.

	* cli/cli-interp.c: Include inferior.h, mi/mi-console.h.
	(safe_execute_command): Make static.
	(cli_interpreter_resume, cli_interpreter_exec):
	Make asynchronous.
	(cli_quoted_interpreter_resume): New function.
	(_initialize_cli_interp): Add li_command_loop to procs.
	Initialize the console-quoted interpreter.

	* tui/tui-hooks.c (tui_target_wait_hook): Add extra argument.

	* mi/mi-main.h (mi_dont_register_continuation)
	(current_command_token,  mi_interp, mi_interpreter_exec_continuation)
	(mi_continuation_arg): New externs.
	(mi_setup_continuation_arg): Declare.

	* mi/mi-main.c: Include wrapper.h.
	(struct mi_continuation_arg): New structure.
	(mi_interpreter_exec_continuation): Move to mi-interp.c.
	(mi_execute_async_cli_command)
	(mi_exec_async_cli_cmd_continuation): Make asynchronous.
	(mi_setup_continuation_arg): New function.

	* mi/mi-interp.c (mi_interpreter_exec_continuation):
	Move from mi-main.c
	(mi_cmd_interpreter_exec): Switch interpreters.  Make
	asynchronous.
	(mi1_command_loop, mi2_command_loop, mi3_command_loop):
	Make argument void*.

	* Makefile.in (async_nat_inferior_h, async_nat_sigthread_h):
	New variables.
	(gdb$(EXEEXT), $(TUI)$(EXEEXT)): Link with libpthread.
	(async-nat-inferior.o, async-nat-sigthread.o): New rules.
	(COMMON_OBS): Add above object files.
	(exec.o, i386-linux-nat.o, inf-ptrace.o, linux-nat.o):
	Update dependencies.

2006-05-13  Nick Roberts  <nickrob@@snap.net.nz>

	* main.c: (event_loop_p): Re-instate variable.
	(captured_main): Re-instate async/noasync option.
	(print_gdb_help): Describe option again.

	* exec.c(init_exec_ops): Only initialise async methods with async
	option.

	* inf-ptrace.c (inf_ptrace_him): Only reate a signal thread with
	async option.

	* README.async, TODO.async, PROBLEMS.async: New files.
@
text
@a28 2
#include "inferior.h"           /* for "sync_execution" */
#include "mi/mi-console.h"      /* for "mi_console_file_new" */
d37 2
a38 2
struct gdb_exception safe_execute_command (struct ui_out *uiout,
					   char *command, int from_tty);
d58 1
a58 1
  sync_execution = 1;
d98 1
d105 9
a113 11
  /* We don't need old_stream because we actually change the
     interpreters when we do interpreter exec, then swap them back.
     This code assumes that the interpreter is still the one that is
     exec'ing in the cli interpreter, and we are just faking it up.  */
  /* We want 
     the person who set the interpreter to get the uiout right for that
     according to their lights.  If you don't do that, then you can't share
     the cli_interpreter_exec between the console & console-quoted 
     interpreters.  */
  result = safe_execute_command (uiout, str, 1);

d125 1
a125 1
struct gdb_exception
a139 28
/* This is the only new function needed for the 
   console-quoted interpreter.  This outputs console text in 
   an mi-quoted form, so an mi-parser won't be fooled by spurious
   * at beginning of line goofs...  */

int
cli_quoted_interpreter_resume (void *data)
{
  static struct ui_file *quoted_stdout = NULL;
  static struct ui_file *quoted_stderr = NULL;

  sync_execution = 1;
  // print_frame_more_info_hook = 0;
  gdb_setup_readline ();
  if (quoted_stdout == NULL)
    {
      struct ui_file *raw_stdout;
      raw_stdout = stdio_fileopen (stdout);
      quoted_stdout = mi_console_file_new (raw_stdout, "~", '"');

      quoted_stderr = mi_console_file_new (raw_stdout, "&", '"');
    }
  gdb_stdout = quoted_stdout;
  gdb_stderr = quoted_stderr;
  gdb_stdlog = gdb_stderr;

  return 1;
}
d152 1
a152 3
    cli_interpreter_display_prompt_p,	/* prompt_proc_p */
    cli_command_loop,
    // cli_interpreter_complete
a155 14
  /* And here we initialize the console-quoted
     interpreter.  */
  static const struct interp_procs quoted_procs = {
    cli_interpreter_init,	/* init_proc */
    cli_quoted_interpreter_resume,	/* resume_proc */
    cli_interpreter_suspend,	/* suspend_proc */
    cli_interpreter_exec,	/* exec_proc */
    cli_interpreter_display_prompt_p,	/* prompt_proc_p */
    cli_command_loop,
    // cli_interpreter_complete
  };
  struct ui_out *tmp_ui_out;
  struct ui_file *raw_stdout;
  
a160 6

  raw_stdout = stdio_fileopen (stdout);
  tmp_ui_out = cli_quoted_out_new (raw_stdout);
  cli_interp = interp_new ("console-quoted", NULL, tmp_ui_out,
			   &quoted_procs);
  interp_add (cli_interp); /* second call */
@


1.11.14.2
log
@(_initialize_cli_interp): Change interpreter
names: console -> console-unquoted, console-quoted -> console
for backward compatiblity.
@
text
@d113 1
a113 1
     the cli_interpreter_exec between the console-unquoted & console 
d144 1
a144 1
   console interpreter.  This outputs console text in 
d189 1
a189 1
  /* And here we initialize the console
d205 1
a205 1
  cli_interp = interp_new ("console-unquoted", NULL, cli_uiout, &procs);
d211 1
a211 1
  cli_interp = interp_new (INTERP_CONSOLE, NULL, tmp_ui_out,
@


1.11.14.3
log
@(cli_interpreter_exec): Revert to version in
mainline but return exception_none.
@
text
@d100 1
a100 1
  struct ui_file *old_stream;
d106 12
a117 10
  /* gdb_stdout could change between the time cli_uiout was initialized
     and now. Since we're probably using a different interpreter which has
     a new ui_file for gdb_stdout, use that one instead of the default.

     It is important that it gets reset everytime, since the user could
     set gdb to use a different interpreter.  */
  old_stream = cli_out_set_stream (cli_uiout, gdb_stdout);
  safe_execute_command (cli_uiout, str, 1);
  cli_out_set_stream (cli_uiout, old_stream);
  return exception_none;
@


1.10
log
@2005-04-26  Andrew Cagney  <cagney@@gnu.org>

	Rename 'struct exception' to 'struct gdb_exception'.
	* wrapper.c: Update.
	* varobj.c: Update.
	* tui/tui-interp.c: Update.
	* remote.c: Update.
	* mi/mi-main.c: Update.
	* mi/mi-interp.c: Update.
	* linux-thread-db.c: Update.
	* interps.h: Update.
	* interps.c: Update.
	* exceptions.h: Update.
	* exceptions.c: Update.
	* dwarf2loc.c: Update.
	* cli/cli-interp.c: Update.
	* cli/cli-script.c: Update.
	* breakpoint.c: Update.
@
text
@d3 1
a3 1
   Copyright 2002, 2003 Free Software Foundation, Inc.
d19 2
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.9
log
@2005-01-14  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (exception_fprintf): Declare.
	(exception_print): Drop pre_print parameter.
	* mi/mi-main.c (mi_execute_command): Update exception_print call.
	* cli/cli-interp.c (safe_execute_command): Update exception_print
	call.
	* remote.c (remote_open_1): Instead of passing an error prefix to
	catch_exceptions, use catch_exceptions and exception_fprintf.
	(remote_start_remote): Change return type to void.
	* breakpoint.c (insert_bp_location): Instead of passing an error
	prefix to catch_exceptions, use catch_exceptions and
	exception_fprintf.
	(insert_catchpoint): Change return type to void.
	(break_command_1): Update exception_print call.
	* exceptions.c (exception_fprintf): New function.
	(print_exception): New function.
	(exception_print): Use print_exception.
@
text
@d37 2
a38 2
static struct exception safe_execute_command (struct ui_out *uiout,
					      char *command, int from_tty);
d95 1
a95 1
static struct exception
d99 1
a99 1
  struct exception result;
d125 1
a125 1
static struct exception
d128 1
a128 1
  struct exception e;
@


1.8
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-main.c (mi_execute_command): Print the exception.
	* cli/cli-interp.c (safe_execute_command): Print the exception.
	* exceptions.h (exception_print): Declare.
	* exceptions.c (struct catcher): Add field print_message.
	(catcher_init): Add parameter print_message, store in the catcher
	struct.
	(print_and_throw): Only print the message when print_message.
	(catch_exceptions_with_msg, catch_errors): Pass print_message=1 to
	catcher_init.
	(catch_exception): Pass print_message=0 to catcher_init.
@
text
@d136 1
a136 1
  exception_print (gdb_stderr, NULL, e);
@


1.7
log
@2005-01-13  Michael Snyder  <msnyder@@redhat.com>

	* cli/cli-interp.c: Tweak comments, per coding standard.
@
text
@d128 1
d132 6
a137 2
  return catch_exception (uiout, do_captured_execute_command, &args,
			  RETURN_MASK_ALL);
@


1.6
log
@2005-01-12  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.c (exception_none): New variable.
	* Makefile.in: Update dependencies.
	* interps.c: Include "exceptions.h".
	(interpreter_exec_cmd, interp_exec): Update to return "struct
	exception"
	* exceptions.h (no_exception): Declare.
	* tui/tui-interp.c (tui_exec): Update to return "struct exception"
	* mi/mi-interp.c: Include "exceptions.h".
	(mi_cmd_interpreter_exec, mi_interpreter_exec): Update to return
	'struct exception".
	* cli/cli-interp.c (cli_interpreter_exec, safe_execute_command)
	(do_captured_execute_command): Update to use catch_exception.
	* interps.h: Include "exceptions.h".
	(interp_exec_ftype, interp_exec): Return "struct exception".
@
text
@d34 1
a34 1
/* These are the ui_out and the interpreter for the console interpreter. */
d36 1
a36 1
/* Longjmp-safe wrapper for "execute_command" */
d110 1
a110 1
     set gdb to use a different interpreter. */
d136 1
a136 1
/* standard gdb initialization hook */
d151 1
a151 1
  /* Create a default uiout builder for the CLI. */
@


1.5
log
@2005-01-12  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (enum return_reason, RETURN_MASK)
	(RETURN_MASK_QUIT, RETURN_MASK_ERROR, RETURN_MASK_ALL)
	(return_mask, throw_exception, catch_exceptions_ftype)
	(catch_exceptions_with_msg, catch_errors_ftype, catch_errors)
	(catch_command_errors_ftype, catch_command_errors): Move to
	exceptions.h.
	* exceptions.c, exceptions.h: New files.
	* top.c: Do not include <setjmp.h>.
	(SIGJMP_BUF, SIGSETJMP, SIGLONGJMP, catch_return)
	(throw_exception, catcher, catch_exceptions)
	(catch_exceptions_with_msg, struct catch_errors_args)
	(do_catch_errors, catch_errors, struct captured_command_args)
	(do_captured_command, catch_command_errors): Move to exceptions.c.
	* wrapper.c, wince.c, win32-nat.c, utils.c: Include "exceptions.h".
	* tui/tui-interp.c, top.c, thread.c, symmisc.c: Ditto.
	* symfile-mem.c, stack.c, solib.c, rs6000-nat.c: Ditto.
	* remote-sds.c, remote-mips.c, remote-fileio.c: Ditto.
	* remote-e7000.c, objc-lang.c, ocd.c: Ditto.
	* remote.c, nto-procfs.c, monitor.c, mi/mi-main.c: Ditto.
	* main.c, m32r-rom.c, infrun.c, inf-loop.c: Ditto.
	* hppa-hpux-tdep.c, frame.c, event-top.c, event-loop.c: Ditto.
	* corelow.c, corefile.c, cli/cli-interp.c, breakpoint.c: Ditto.
	* ada-valprint.c, ada-lang.c: Ditto.
	* Makefile.in (HFILES_NO_SRCDIR, COMMON_OBS): Add exceptions.h and
	exceptions.o.  Update all dependencies.
@
text
@d37 2
a38 3
static int do_captured_execute_command (struct ui_out *uiout, void *data);
static enum gdb_rc safe_execute_command (struct ui_out *uiout, char *command,
					 int from_tty);
d95 1
a95 1
static int
a97 1
  int result;
d99 1
d117 1
a117 1
static int
a122 1
  return GDB_RC_OK;
d125 1
a125 1
static enum gdb_rc
d131 2
a132 2
  return catch_exceptions (uiout, do_captured_execute_command, &args,
			   NULL, RETURN_MASK_ALL);
@


1.4
log
@	* cli/cli-interp.c (cli_interpreter_resume): Update the
	cli_uiout's stream to gdb_stdout.
@
text
@d30 1
@


1.4.8.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.3
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* acinclude.m4 (gcc_AC_CHECK_DECL, (gcc_AC_CHECK_DECL): Stolen
	from GCC's acinclude.m4.
	* configure.in: Check for getopt's delcaration.
	* aclocal.m4, config.in, configure: Re-generate.
	* main.c (error_init): Delete declaration.
	* defs.h (error_init): Declare.
	* rs6000-tdep.c (rs6000_fetch_pointer_argument): Make static.
	(rs6000_convert_from_func_ptr_addr): Make static.
	(_initialize_rs6000_tdep): Add declaration.
	* cli/cli-cmds.c (dont_repeat): Delete declaration.
	(show_commands, set_verbose, show_history): Delete declaration.
	* top.h (set_verbose): Add declaration.
	(show_history, set_history, show_commands): Add declaration.
	(do_restore_instream_cleanup): Add declaration.
	* objc-lang.c (specialcmp): Make static.
	(print_object_command): Make static.
	(find_objc_msgsend): Make static.
	(find_objc_msgcall_submethod_helper): Make static.
	(find_objc_msgcall_submethod): Make static.
	(_initialize_objc_language): Add declaration.
	(find_implementation_from_class): Make static.
	(find_implementation): Make static.
	* objc-exp.y (yylex): Delete lookup_struct_typedef declaration.
	* objc-lang.h (lookup_struct_typedef): Add declaration.
	* cli/cli-interp.c (_initialize_cli_interp): Add declaration.
	* cli/cli-script.c (clear_hook_in_cleanup): Make static.
	(do_restore_user_call_depth): Make static.
	(do_restore_instream_cleanup): Delete declaration.
	(dont_repeat): Delete declaration.
	* cli/cli-decode.c (add_abbrev_cmd): Delete function.
	* cli/cli-dump.c (_initialize_cli_dump): Add declaration.
	* reggroups.c (_initialize_reggroup): Add declaration.
	* cp-support.c (_initialize_cp_support): Add declaration.
	* cp-abi.c (_initialize_cp_abi): Add declaration.
	* hpacc-abi.c (_initialize_hpacc_abi): Add declaration.
	* gnu-v3-abi.c (gnuv3_baseclass_offset): Make static.
	(_initialize_gnu_v3_abi): Add declaration.
	* gnu-v2-abi.c (gnuv2_value_rtti_type): Make static.
	(_initialize_gnu_v2_abi): Add declaration.
	* frame-base.c (_initialize_frame_base): Add declaration.
	* doublest.c (floatformat_from_length): Make static.
	* frame-unwind.c (_initialize_frame_unwind): Add declaration.
	* frame.c (create_sentinel_frame): Make static.
	(_initialize_frame): Add declaration.
	* top.c (do_catch_errors): Make static.
	(gdb_rl_operate_and_get_next_completion): Make static.
	* typeprint.c: Include "typeprint.h".
	* sentinel-frame.c (sentinel_frame_prev_register): Make static.
	(sentinel_frame_this_id): Make static.
	* p-valprint.c (_initialize_pascal_valprint): Add declaration.
	* ui-out.c (make_cleanup_ui_out_begin_end): Delete function.
	* dwarf2-frame.c (dwarf2_frame_cache): Make static.
	* p-exp.y (push_current_type, pop_current_type): ISO C declaration.
	* dwarf2expr.h (dwarf_expr_context): ISO C declaration.
	* maint.c (maintenance_print_architecture): Make static.
	* signals/signals.c (_initialize_signals): Add declaration.
	* std-regs.c (_initialize_frame_reg): Add declaration.
	* jv-exp.y (push_variable): ISO C definition.
	(push_qualified_expression_name): Ditto.
	* memattr.c (_initialize_mem): Add declaration.
	* remote.c (remote_check_watch_resources): Make static.
	(remote_stopped_by_watchpoint): Make static.
	(remote_stopped_data_address): Make static.
	* d10v-tdep.c (nr_dmap_regs): Make static.
	(a0_regnum): Make static.
	(d10v_frame_unwind_cache): Make static.
	(d10v_frame_p): Make static.
	* osabi.c (show_osabi): Make static.
	(_initialize_gdb_osabi): Add extern declaration.
	* gdbtypes.c (make_qualified_type): Make static.
	(safe_parse_type): Make static.
	* macrocmd.c (_initialize_macrocmd): Add extern declaration.
	* macrotab.c (macro_bcache_free): Make static.
	* interps.c (interp_set_quiet): Make static.
	(interpreter_exec_cmd): Make static.
	* stack.h (select_frame_command): New file.
	* stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete function.
	(select_frame_command): Make global.
	* infcall.c: Include "infcall.h".
	* linespec.c: Include "linespec.h".
	* symfile.c (sections_overlap): Make static.
	* cp-support.h (cp_initialize_namespace): ISO C declaration.
	* charset.c (_initialize_charset): Add missing prototype.
	* regcache.c (init_legacy_regcache_descr): Make static.
	(do_regcache_xfree): Make static.
	(regcache_xfer_part): Make static.
	(_initialize_regcache): Add missing prototype.
	* breakpoint.c (parse_breakpoint_sals): Make static.
	(breakpoint_sals_to_pc): Make static.
	* interps.h (clear_interpreter_hooks): ISO C declaration.
	* Makefile.in (stack_h): Define.
	(stack.o, typeprint.o, mi-main.o): Update dependencies.
	(mi-cmd-stack.o, infcall.o, linespec.o): Update dependencies.

Index: mi/ChangeLog
2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* mi-parse.c (_initialize_mi_parse): Delete function.
	* mi-main.c: Include "mi-main.h".
	* mi-interp.c (_initialize_mi_interp): Add declaration.
	* mi-cmd-stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete extern declaration.
	(mi_cmd_stack_select_frame): Replace select_frame_command_wrapper
	with select_frame_command.
@
text
@d56 2
d59 11
d71 4
@


1.3.4.1
log
@	* cli/cli-interp.c (cli_interpreter_resume): Update the
	cli_uiout's stream to gdb_stdout.
@
text
@a55 2
  struct ui_file *stream;

a56 11

  /* gdb_setup_readline will change gdb_stdout.  If the CLI was previously
     writing to gdb_stdout, then set it to the new gdb_stdout afterwards.  */

  stream = cli_out_set_stream (cli_uiout, gdb_stdout);
  if (stream != gdb_stdout)
    {
      cli_out_set_stream (cli_uiout, stream);
      stream = NULL;
    }

a57 4

  if (stream != NULL)
    cli_out_set_stream (cli_uiout, gdb_stdout);

@


1.2
log
@Add missing files from last commit :-(
@
text
@d121 2
@


1.2.2.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@@


1.2.2.2
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a120 2
extern initialize_file_ftype _initialize_cli_interp; /* -Wmissing-prototypes */

@


1.2.2.3
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a55 2
  struct ui_file *stream;

a56 11

  /* gdb_setup_readline will change gdb_stdout.  If the CLI was previously
     writing to gdb_stdout, then set it to the new gdb_stdout afterwards.  */

  stream = cli_out_set_stream (cli_uiout, gdb_stdout);
  if (stream != gdb_stdout)
    {
      cli_out_set_stream (cli_uiout, stream);
      stream = NULL;
    }

a57 4

  if (stream != NULL)
    cli_out_set_stream (cli_uiout, gdb_stdout);

@


1.1
log
@file cli-interp.c was initially added on branch kseitz_interps-20020528-branch.
@
text
@d1 138
@


1.1.4.1
log
@Merge kseitz_interps-20020528-branch.
@
text
@a0 137
/* CLI Definitions for GDB
   Copyright 2002 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "interps.h"
#include "wrapper.h"
#include "event-top.h"
#include "ui-out.h"
#include "cli-out.h"
#include "top.h"		/* for "execute_command" */
/* Prototypes for the CLI Interpreter functions */

static int cli_interpreter_init (void *data);
static int cli_interpreter_resume (void *data);
static int cli_interpreter_suspend (void *data);
static int cli_interpreter_exec (void *data, char *command_str);
static int cli_interpreter_display_prompt_p (void);

/* These are the ui_out and the interpreter for the console interpreter. */
static struct ui_out *cli_uiout;
static struct gdb_interpreter *cli_interp;

/* Longjmp-safe wrapper for "execute_command" */
static int do_captured_execute_command (struct ui_out *uiout, void *data);
static enum gdb_rc safe_execute_command (struct ui_out *uiout, char *command,
					 int from_tty);
struct captured_execute_command_args
{
  char *command;
  int from_tty;
};

/* These implement the cli out interpreter: */

static int
cli_interpreter_init (void *data)
{
  return 1;
}

static int
cli_interpreter_resume (void *data)
{
  /*sync_execution = 1;*/
  gdb_setup_readline ();
  return 1;
}

static int
cli_interpreter_suspend (void *data)
{
  gdb_disable_readline ();
  return 1;
}

/* Don't display the prompt if we are set quiet.  */
static int
cli_interpreter_display_prompt_p (void)
{
  if (gdb_interpreter_is_quiet_p (NULL))
    return 0;
  else
    return 1;
}

static int
cli_interpreter_exec (void *data, char *command_str)
{
  int result;
  struct ui_file *old_stream;

  /* gdb_stdout could change between the time cli_uiout was initialized
     and now. Since we're probably using a different interpreter which has
     a new ui_file for gdb_stdout, use that one instead of the default.
  
     It is important that it gets reset everytime, since the user could
     set gdb to use a different interpreter. */
  old_stream = cli_out_set_stream (cli_uiout, gdb_stdout);
  result = safe_execute_command (cli_uiout, command_str, 1);
  cli_out_set_stream (cli_uiout, old_stream);
  return result;
}

static int
do_captured_execute_command (struct ui_out *uiout, void *data)
{
  struct captured_execute_command_args *args =
    (struct captured_execute_command_args *) data;
  execute_command (args->command, args->from_tty);
  return GDB_RC_OK;
}

static enum gdb_rc
safe_execute_command (struct ui_out *uiout, char *command, int from_tty)
{
  struct captured_execute_command_args args;
  args.command = command;
  args.from_tty = from_tty;
  return catch_exceptions (uiout, do_captured_execute_command, &args,
			   NULL, RETURN_MASK_ALL);
}

/* standard gdb initialization hook */
void
_initialize_cli_interp (void)
{
  struct gdb_interpreter_procs procs = {
    cli_interpreter_init,	/* init_proc */
    cli_interpreter_resume,	/* resume_proc */
    cli_interpreter_suspend,	/* suspend_proc */
    cli_interpreter_exec,	/* exec_proc */
    cli_interpreter_display_prompt_p /* prompt_proc_p */
  };

  /* Create a default uiout builder for the CLI. */
  cli_uiout = cli_out_new (gdb_stdout);
  cli_interp = gdb_interpreter_new (GDB_INTERPRETER_CONSOLE, NULL, cli_uiout,
				    &procs);
  gdb_interpreter_add (cli_interp);
}
@


1.1.4.2
log
@Clean up.
@
text
@d28 1
d30 5
a34 1
struct ui_out *cli_uiout;
d37 2
d52 2
a53 2
static void *
cli_interpreter_init (void)
d55 1
a55 1
  return NULL;
d61 1
a61 1
  /*sync_execution = 1; */
d75 1
a75 1
cli_interpreter_display_prompt_p (void *data)
d77 1
a77 1
  if (interp_quiet_p (NULL))
d84 1
a84 1
cli_interpreter_exec (void *data, const char *command_str)
a88 5
  /* FIXME: cagney/2003-02-01: Need to const char *propogate
     safe_execute_command.  */
  char *str = alloca (strlen (command_str) + 1);
  strcpy (str, command_str);

d92 1
a92 1

d96 1
a96 1
  result = safe_execute_command (cli_uiout, str, 1);
a119 1

d124 1
a124 1
  static const struct interp_procs procs = {
d129 1
a129 1
    cli_interpreter_display_prompt_p	/* prompt_proc_p */
a130 1
  struct interp *cli_interp;
d134 3
a136 3
  cli_interp = interp_new (INTERP_CONSOLE, NULL, cli_uiout, &procs);

  interp_add (cli_interp);
@


1.1.4.3
log
@More cleanups.  Add `current_interp_command_loop()'.
@
text
@a27 1
#include "gdb_string.h"
d84 2
a85 1
  char *str = strcpy (alloca (strlen (command_str) + 1), command_str);
@


1.1.4.4
log
@Overhaul changelog entries.
@
text
@d1 2
a2 3
/* CLI Definitions for GDB, the GNU debugger.

   Copyright 2002, 2003 Free Software Foundation, Inc.
@


1.1.2.1
log
@Add files mentioned in yesterday's changelog. Oops.
@
text
@a0 114
/* CLI Definitions for GDB
   Copyright 2002 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "interps.h"
#include "wrapper.h"
#include "event-top.h"
#include "ui-out.h"
#include "cli-out.h"

/* Prototypes for the CLI Interpreter functions */

int cli_interpreter_init (void *data);
int cli_interpreter_resume (void *data);
int cli_interpreter_do_one_event (void *data);
int cli_interpreter_suspend (void *data);
int cli_interpreter_delete (void *data);
int cli_interpreter_exec (void *data, char *command_str);
int cli_interpreter_display_prompt (void *data, char *new_prompt);

/* These are the ui_out and the interpreter for the console interpreter. */
struct ui_out *cli_uiout;
struct gdb_interpreter *cli_interp;

/* These implement the cli out interpreter: */

int
cli_interpreter_init (void *data)
{
  return 1;
}

int
cli_interpreter_resume (void *data)
{
  /*sync_execution = 1;*/
  gdb_setup_readline ();
  return 1;
}

int
cli_interpreter_do_one_event (void *data)
{
  return 1;
}

int
cli_interpreter_suspend (void *data)
{
  gdb_disable_readline ();
  return 1;
}

int
cli_interpreter_delete (void *data)
{
  return 1;
}

int
cli_interpreter_display_prompt (void *data, char *new_prompt)
{
  if (gdb_interpreter_is_quiet (NULL))
    {
      return 1;
    }
  else
    {
      return 0;
    }
}

int
cli_interpreter_exec (void *data, char *command_str)
{
  return gdb_execute_command (uiout, command_str, 0);
}

/* standard gdb initialization hook */
void
_initialize_cli_interp (void)
{
  struct gdb_interpreter_procs procs = {
    cli_interpreter_init,	/* init_proc */
    cli_interpreter_resume,	/* resume_proc */
    cli_interpreter_do_one_event, /* do_one_event_proc */
    cli_interpreter_suspend,	/* suspend_proc */
    cli_interpreter_delete,	/* delete_proc */
    cli_interpreter_exec,	/* exec_proc */
    cli_interpreter_display_prompt /* prompt_proc */
  };

  cli_uiout = cli_out_new (gdb_stdout);
  cli_interp = gdb_new_interpreter (GDB_INTERPRETER_CONSOLE, NULL, cli_uiout,
				    &procs);
  gdb_add_interpreter (cli_interp);
}
@


1.1.2.2
log
@        * breakpoint.c (internal_breakpoint_number): Make static global.
        (condition_command): Add modify breakpoint event notification.
        (commands_command): Likewise.
        (create_internal_breakpoint): internal_breakpoint_number is now global.
        Add create breakpoint event notification.
        (create_fork_vfork_event_catchpoint): Likewise.
        (create_exec_event_catchpoint): Likewise.
        (mention): Remove FIXME and create breakpoint event.
        (create_breakpoints): Add create breakpoint event notification.
        (watch_command_1): Likewise.
        (create_exception_catchpoint): Likewise.
        (set_breakpoint_sal): Likewise.
        (set_ignore_count): Add modify breakopint event notification.

        * interps.h: Add GDB_INTERPRETER_MI1. GDB_INTERPRETER_MI will
        now be mi version 2.

        * cli/cli-interp.c (cli_uiout): Make static.
        (cli_interp): Make static.
        (cli_interpreter_exec): Use cli_uiout instead of uiout.
@
text
@d39 2
a40 2
static struct ui_out *cli_uiout;
static struct gdb_interpreter *cli_interp;
d93 1
a93 1
  return gdb_execute_command (cli_uiout, command_str, 0);
@


1.1.2.3
log
@        * cli/cli-interp.c (cli_interpreter_exec): Set the stream for the
        cli's uiout to gdb_stdout, which has probably changed from it's
        initialization. Restore the original stream when we're done executing
        in the interpreter.
@
text
@d93 1
a93 13
  int result;
  struct ui_file *old_stream;

  /* gdb_stdout could change between the time cli_uiout was initialized
     and now. Since we're probably using a different interpreter which has
     a new ui_file for gdb_stdout, use that one instead of the default.
  
     It is important that it gets reset everytime, since the user could
     set gdb to use a different interpreter. */
  old_stream = cli_out_set_stream (cli_uiout, gdb_stdout);
  result = gdb_execute_command (cli_uiout, command_str, 0);
  cli_out_set_stream (cli_uiout, old_stream);
  return result;
a109 1
  /* Create a default uiout builder for the CLI. */
@


1.1.2.4
log
@        * stack.c (frame_command): If the frame level changed, issue
        a selected_frame_level_changed event.
        (up_command): Add selected_frame_level_changed event;
        (down_command): Likewise.

        * gdb-events.sh: Add selected_frame_level_changed event.
        * gdb-events.c: Regenerate.
        * gdb-events.h: Regenerate.

        * stack.c (print_frame_info_base): Always set current_source_symtab
        and current_source_line.

        * cli/cli-interp.c (cli_interpreter_exec): Pass from_tty=1 to
        gdb_execute_command.
@
text
@d103 1
a103 1
  result = gdb_execute_command (cli_uiout, command_str, 1);
@


1.1.2.5
log
@        * interps.c (interpreter_exec_cmd): Remove mention of "mi" in
        error message.

        * cli/cli-interp.c (do_captured_execute_command): New function.
        (safe_execute_command): New function.
        * Makefile.in (cli-interp.c): Depend on top_h.
        * wrapper.c (do_captured_execute_command): Moved to cli/cli-interp.c.
        (gdb_execute_command): Removed.
        * wrapper.h (gdb_execute_command): Removed.
@
text
@d27 1
a27 1
#include "top.h"		/* for "execute_command" */
d30 7
a36 7
static int cli_interpreter_init (void *data);
static int cli_interpreter_resume (void *data);
static int cli_interpreter_do_one_event (void *data);
static int cli_interpreter_suspend (void *data);
static int cli_interpreter_delete (void *data);
static int cli_interpreter_exec (void *data, char *command_str);
static int cli_interpreter_display_prompt (void *data, char *new_prompt);
a41 10
/* Longjmp-safe wrapper for "execute_command" */
static int do_captured_execute_command (struct ui_out *uiout, void *data);
static enum gdb_rc safe_execute_command (struct ui_out *uiout, char *command,
					 int from_tty);
struct captured_execute_command_args
{
  char *command;
  int from_tty;
};

d44 1
a44 1
static int
d50 1
a50 1
static int
d58 1
a58 1
static int
d64 1
a64 1
static int
d71 1
a71 1
static int
d77 1
a77 1
static int
d90 1
a90 1
static int
d103 1
a103 1
  result = safe_execute_command (cli_uiout, command_str, 1);
a105 19
}

static int
do_captured_execute_command (struct ui_out *uiout, void *data)
{
  struct captured_execute_command_args *args =
    (struct captured_execute_command_args *) data;
  execute_command (args->command, args->from_tty);
  return GDB_RC_OK;
}

static enum gdb_rc
safe_execute_command (struct ui_out *uiout, char *command, int from_tty)
{
  struct captured_execute_command_args args;
  args.command = command;
  args.from_tty = from_tty;
  return catch_exceptions (uiout, do_captured_execute_command, &args,
			   NULL, RETURN_MASK_ALL);
@


1.1.2.6
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* interps.h (struct gdb_interpreter_procs): Remove do_one_event_proc.
	(interp_do_one_event_ftype): Delete.
	* interps.c (gdb_new_interpreter): Remove setup of do_one_event
	procedure.
	(interpreter_do_one_event): Delete.
	* event-loop.c (start_event_loop): Remove no-op call to
	interpreter_do_one_event.
	* cli/cli-interps.c: (cli_interpreter_do_one_event): Delete.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c (mi_interpreter_do_one_event): Remove.
@
text
@d32 1
d69 6
d144 1
@


1.1.2.7
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* cli/cli-interp.c (cli_interpreter_delete): Delete.
	(_initialize_cli_interp): Remove delete_proc.

	* interps.h (struct gdb_interpreter_procs): Remove delete_proc.
	(interp_delete_ftype): Delete.
	(gdb_delete_interpreter): Remove.

	* interps.c (gdb_delete_interpreter): Remove.
	(gdb_new_interpreter): Don't initialize delete_proc.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c mi_interpreter_delete): Remove.
	(_initialize_mi_interp): Remove mi_interpreter_delete.
@
text
@d33 1
d75 6
d138 1
@


1.1.2.8
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* event-top.c (display_gdb_prompt): Use
	gdb_interpreter_display_prompt_p.
	* cli/cli-interp.c (cli_interpreter_display_prompt_p): Rename from
	cli_interpreter_display_prompt and rewrite.
	(_initialize_cli_interp): New proc name is
	cli_interpreter_display_prompt_p.
	* interps.c (gdb_new_interpreter): Initialize prompt_proc_p
	instead of prompt_proc.
	(gdb_interpreter_display_prompt_p): Rewrite as a predicate.
	* interps.h (interp_prompt_ftype): Update typedef.
	(struct gdb_interpreter_procs): Rename prompt_proc to
	prompt_proc_p.
	(gdb_interpreter_display_prompt_p): Export this instead of old
	function.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c (_initialize_mi_interp): Use mi_interpreter_prompt_p
	instead of mi_interpreter_prompt.
	(mi_interpreter_prompt_p): Rename from mi_interpreter_prompt and
	rewrite.
@
text
@d34 1
a34 1
static int cli_interpreter_display_prompt_p (void);
a72 1
/* Don't display the prompt if we are set quiet.  */
d74 1
a74 1
cli_interpreter_display_prompt_p (void)
d77 3
a79 1
    return 0;
d81 3
a83 1
    return 1;
d132 1
a132 1
    cli_interpreter_display_prompt_p /* prompt_proc_p */
@


1.1.2.9
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* interps.h (gdb_interpreter_is_quiet_p): Rename from
	gdb_interpreter_is_quiet.
	* cli/cli-interp.c (cli_interpreter_display_prompt_p): Call
	gdb_interpreter_is_quiet_p.
	* interps.c (gdb_interpreter_is_quiet_p): Rename from
	gdb_interpreter_is_quiet.
	(gdb_set_interpreter): Call gdb_interpreter_is_quiet_p.
@
text
@d77 1
a77 1
  if (gdb_interpreter_is_quiet_p (NULL))
@


1.1.2.10
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* cli/cli-interp.c (_initialize_cli_interp): Call
	gdb_interpreter_new and gdb_interpreter_add.
	* top.c (gdb_init): Call gdb_interpreter_lookup.
	(gdb_init): Call gdb_interpreter_set.
	* interps.c (gdb_interpreter_new): Renamed from
	gdb_new_interpreter.
	(gdb_interpreter_add): Renamed from gdb_add_interpreter.
	(gdb_interpreter_set): Renamed from gdb_set_interpreter.
	(gdb_interpreter_lookup): Renamed from gdb_lookup_interpreter.
	(gdb_interpreter_current): Renamed from gdb_current_interpreter.
	Update all callers.
	* interps.h: Ditto.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c (mi_interpreter_resume): Ditto.
	(mi_cmd_interpreter_exec): Use gdb_interpreter_lookup.
	(_initialize_mi_interp): Use gdb_interpreter_new,
	gdb_interpreter_add.
	* mi-cmd-break.c (mi_cmd_break_insert): Use
	gdb_interpreter_current_is_named_p.
	(mi_cmd_break_watch): Ditto.
	* mi-events.c (mi_interp_stack_changed_hook): Ditto.
	(event_notify): Ditto.
	* mi-main.c (captured_mi_execute_command): Use
	gdb_interpreter_current_is_named_p.
	(mi_load_progress): Ditto.
@
text
@d134 1
a134 1
  cli_interp = gdb_interpreter_new (GDB_INTERPRETER_CONSOLE, NULL, cli_uiout,
d136 1
a136 1
  gdb_interpreter_add (cli_interp);
@


