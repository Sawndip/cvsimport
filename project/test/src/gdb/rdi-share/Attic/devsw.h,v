head	1.2;
access;
symbols
	gdb-csl-sourcerygxx-3_4_4-25:1.1.1.3
	gdb_6_4-20051202-release:1.1.1.3
	msnyder-fork-checkpoint-branch:1.1.1.3.0.100
	msnyder-fork-checkpoint-branchpoint:1.1.1.3
	gdb-csl-gxxpro-6_3-branch:1.1.1.3.0.98
	gdb-csl-gxxpro-6_3-branchpoint:1.1.1.3
	gdb_6_4-branch:1.1.1.3.0.96
	gdb_6_4-2005-11-01-branchpoint:1.1.1.3
	gdb-csl-arm-20051020-branch:1.1.1.3.0.94
	gdb-csl-arm-20051020-branchpoint:1.1.1.3
	msnyder-tracepoint-checkpoint-branch:1.1.1.3.0.92
	msnyder-tracepoint-checkpoint-branchpoint:1.1.1.3
	gdb-csl-arm-20050325-2005-q1b:1.1.1.3
	gdb-csl-arm-20050325-2005-q1a:1.1.1.3
	csl-arm-20050325-branch:1.1.1.3.0.90
	csl-arm-20050325-branchpoint:1.1.1.3
	gdb-post-i18n-errorwarning-20050211:1.1.1.3
	gdb-pre-i18n-errorwarning-20050211:1.1.1.3
	gdb_6_3-20041109-release:1.1.1.3
	gdb_6_3-branch:1.1.1.3.0.86
	gdb_6_3-20041019-branchpoint:1.1.1.3
	drow_intercu-merge-20040921:1.1.1.3
	drow_intercu-merge-20040915:1.1.1.3
	jimb-gdb_6_2-e500-branch:1.1.1.3.0.88
	jimb-gdb_6_2-e500-branchpoint:1.1.1.3
	gdb_6_2-20040730-release:1.1.1.3
	gdb_6_2-branch:1.1.1.3.0.84
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1.1.3
	gdb_6_1_1-20040616-release:1.1.1.3
	gdb_6_1-2004-04-05-release:1.1.1.3
	drow_intercu-merge-20040402:1.1.1.3
	drow_intercu-merge-20040327:1.1.1.3
	ezannoni_pie-20040323-branch:1.1.1.3.0.82
	ezannoni_pie-20040323-branchpoint:1.1.1.3
	cagney_tramp-20040321-mergepoint:1.1.1.3
	cagney_tramp-20040309-branch:1.1.1.3.0.80
	cagney_tramp-20040309-branchpoint:1.1.1.3
	gdb_6_1-branch:1.1.1.3.0.78
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1.1.3
	drow_intercu-20040221-branch:1.1.1.3.0.76
	drow_intercu-20040221-branchpoint:1.1.1.3
	cagney_bfdfile-20040213-branch:1.1.1.3.0.74
	cagney_bfdfile-20040213-branchpoint:1.1.1.3
	drow-cplus-merge-20040208:1.1.1.3
	carlton_dictionary-20040126-merge:1.1.1.3
	cagney_bigcore-20040122-branch:1.1.1.3.0.72
	cagney_bigcore-20040122-branchpoint:1.1.1.3
	drow-cplus-merge-20040113:1.1.1.3
	drow-cplus-merge-20031224:1.1.1.3
	drow-cplus-merge-20031220:1.1.1.3
	carlton_dictionary-20031215-merge:1.1.1.3
	drow-cplus-merge-20031214:1.1.1.3
	carlton-dictionary-20031111-merge:1.1.1.3
	gdb_6_0-2003-10-04-release:1.1.1.3
	kettenis_sparc-20030918-branch:1.1.1.3.0.70
	kettenis_sparc-20030918-branchpoint:1.1.1.3
	carlton_dictionary-20030917-merge:1.1.1.3
	ezannoni_pie-20030916-branchpoint:1.1.1.3
	ezannoni_pie-20030916-branch:1.1.1.3.0.68
	cagney_x86i386-20030821-branch:1.1.1.3.0.66
	cagney_x86i386-20030821-branchpoint:1.1.1.3
	carlton_dictionary-20030805-merge:1.1.1.3
	carlton_dictionary-20030627-merge:1.1.1.3
	gdb_6_0-branch:1.1.1.3.0.64
	gdb_6_0-2003-06-23-branchpoint:1.1.1.3
	jimb-ppc64-linux-20030613-branch:1.1.1.3.0.62
	jimb-ppc64-linux-20030613-branchpoint:1.1.1.3
	cagney_convert-20030606-branch:1.1.1.3.0.60
	cagney_convert-20030606-branchpoint:1.1.1.3
	cagney_writestrings-20030508-branch:1.1.1.3.0.58
	cagney_writestrings-20030508-branchpoint:1.1.1.3
	jimb-ppc64-linux-20030528-branch:1.1.1.3.0.56
	jimb-ppc64-linux-20030528-branchpoint:1.1.1.3
	carlton_dictionary-20030523-merge:1.1.1.3
	cagney_fileio-20030521-branch:1.1.1.3.0.54
	cagney_fileio-20030521-branchpoint:1.1.1.3
	kettenis_i386newframe-20030517-mergepoint:1.1.1.3
	jimb-ppc64-linux-20030509-branch:1.1.1.3.0.52
	jimb-ppc64-linux-20030509-branchpoint:1.1.1.3
	kettenis_i386newframe-20030504-mergepoint:1.1.1.3
	carlton_dictionary-20030430-merge:1.1.1.3
	kettenis_i386newframe-20030419-branch:1.1.1.3.0.50
	kettenis_i386newframe-20030419-branchpoint:1.1.1.3
	carlton_dictionary-20030416-merge:1.1.1.3
	cagney_frameaddr-20030409-mergepoint:1.1.1.3
	kettenis_i386newframe-20030406-branch:1.1.1.3.0.48
	kettenis_i386newframe-20030406-branchpoint:1.1.1.3
	cagney_frameaddr-20030403-branchpoint:1.1.1.3
	cagney_frameaddr-20030403-branch:1.1.1.3.0.46
	cagney_framebase-20030330-mergepoint:1.1.1.3
	cagney_framebase-20030326-branch:1.1.1.3.0.44
	cagney_framebase-20030326-branchpoint:1.1.1.3
	cagney_lazyid-20030317-branch:1.1.1.3.0.42
	cagney_lazyid-20030317-branchpoint:1.1.1.3
	kettenis-i386newframe-20030316-mergepoint:1.1.1.3
	offbyone-20030313-branch:1.1.1.3.0.40
	offbyone-20030313-branchpoint:1.1.1.3
	kettenis-i386newframe-20030308-branch:1.1.1.3.0.38
	kettenis-i386newframe-20030308-branchpoint:1.1.1.3
	carlton_dictionary-20030305-merge:1.1.1.3
	cagney_offbyone-20030303-branch:1.1.1.3.0.36
	cagney_offbyone-20030303-branchpoint:1.1.1.3
	carlton_dictionary-20030207-merge:1.1.1.3
	interps-20030203-mergepoint:1.1.1.3
	interps-20030202-branch:1.1.1.3.0.34
	interps-20030202-branchpoint:1.1.1.3
	cagney-unwind-20030108-branch:1.1.1.3.0.32
	cagney-unwind-20030108-branchpoint:1.1.1.3
	carlton_dictionary-20021223-merge:1.1.1.3
	gdb_5_3-2002-12-12-release:1.1.1.3
	carlton_dictionary-20021115-merge:1.1.1.3
	kseitz_interps-20021105-merge:1.1.1.3
	kseitz_interps-20021103-merge:1.1.1.3
	drow-cplus-merge-20021020:1.1.1.3
	drow-cplus-merge-20021025:1.1.1.3
	carlton_dictionary-20021025-merge:1.1.1.3
	carlton_dictionary-20021011-merge:1.1.1.3
	drow-cplus-branch:1.1.1.3.0.30
	drow-cplus-branchpoint:1.1.1.3
	kseitz_interps-20020930-merge:1.1.1.3
	carlton_dictionary-20020927-merge:1.1.1.3
	carlton_dictionary-branch:1.1.1.3.0.28
	carlton_dictionary-20020920-branchpoint:1.1.1.3
	gdb_5_3-branch:1.1.1.3.0.26
	gdb_5_3-2002-09-04-branchpoint:1.1.1.3
	kseitz_interps-20020829-merge:1.1.1.3
	cagney_sysregs-20020825-branch:1.1.1.3.0.24
	cagney_sysregs-20020825-branchpoint:1.1.1.3
	readline_4_3-import-branch:1.1.1.3.0.22
	readline_4_3-import-branchpoint:1.1.1.3
	gdb_5_2_1-2002-07-23-release:1.1.1.3
	kseitz_interps-20020528-branch:1.1.1.3.0.20
	kseitz_interps-20020528-branchpoint:1.1.1.3
	cagney_regbuf-20020515-branch:1.1.1.3.0.18
	cagney_regbuf-20020515-branchpoint:1.1.1.3
	jimb-macro-020506-branch:1.1.1.3.0.16
	jimb-macro-020506-branchpoint:1.1.1.3
	gdb_5_2-2002-04-29-release:1.1.1.3
	gdb_5_2-branch:1.1.1.3.0.14
	gdb_5_2-2002-03-03-branchpoint:1.1.1.3
	gdb_5_1_1-2002-01-24-release:1.1.1.3
	gdb_5_1_0_1-2002-01-03-release:1.1.1.3
	cygnus_cvs_20020108_pre:1.1.1.3
	gdb_5_1_0_1-2002-01-03-branch:1.1.1.3.0.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1.1.3
	gdb_5_1-2001-11-21-release:1.1.1.3
	gdb_s390-2001-09-26-branch:1.1.1.3.0.10
	gdb_s390-2001-09-26-branchpoint:1.1.1.3
	gdb_5_1-2001-07-29-branch:1.1.1.3.0.8
	gdb_5_1-2001-07-29-branchpoint:1.1.1.3
	dberlin-typesystem-branch:1.1.1.3.0.6
	dberlin-typesystem-branchpoint:1.1.1.3
	gdb-post-ptid_t-2001-05-03:1.1.1.3
	gdb-pre-ptid_t-2001-05-03:1.1.1.3
	insight-precleanup-2001-01-01:1.1.1.3
	gdb-post-protoization-2000-07-29:1.1.1.3
	gdb-pre-protoization-2000-07-29:1.1.1.3
	gdb-premipsmulti-2000-06-06-branch:1.1.1.3.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.3
	gdb-post-params-removal-2000-06-04:1.1.1.3
	gdb-pre-params-removal-2000-06-04:1.1.1.3
	gdb-post-params-removal-2000-05-28:1.1.1.3
	gdb-pre-params-removal-2000-05-28:1.1.1.3
	gdb_5_0-2000-05-19-release:1.1.1.3
	gdb_4_18_2-2000-05-18-release:1.1.1.3
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.3
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.3
	gdb_5_0-2000-04-10-branch:1.1.1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.3
	repo-unification-2000-02-06:1.1.1.3
	insight-2000-02-04:1.1.1.3
	gdb-2000-02-04:1.1.1.3
	gdb-2000-02-02:1.1.1.3
	gdb-2000-02-01:1.1.1.3
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2006.01.21.01.29.04;	author mmitchel;	state dead;
branches;
next	1.1;

1.1
date	99.04.16.01.34.27;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.27;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.11.02.04.44.26;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.01.06.03.06.50;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* Makefile.in (remote-rdi.o): Remove.
	(rdi-share/libangsd.a): Likewise.
	* README: Don't mention remote-rdi.c.
	* NEWS: Mention removal of rdi-share.
	* configure.ac: Don't configure rdi-share subdirectory.
	* remote-rdi.c: Remove.
	* config/arm/embed.mt (TDEPFILES): Remove remote-rdi.o.
	(TDEPLIBS): Remove rdi-share/libangsd.a.
	* rdi-share/Makefile.am: Remove.
	* rdi-share/Makefile.in: Likewise.
	* rdi-share/README.CYGNUS: Likewise.
	* rdi-share/aclocal.m4: Likewise.
	* rdi-share/adp.h: Likewise.
	* rdi-share/adperr.h: Likewise.
	* rdi-share/angel.h: Likewise.
	* rdi-share/angel_bytesex.c: Likewise.
	* rdi-share/angel_bytesex.h: Likewise.
	* rdi-share/angel_endian.h: Likewise.
	* rdi-share/ardi.c: Likewise.
	* rdi-share/ardi.h: Likewise.
	* rdi-share/armdbg.h: Likewise.
	* rdi-share/buffers.h: Likewise.
	* rdi-share/chandefs.h: Likewise.
	* rdi-share/channels.h: Likewise.
	* rdi-share/chanpriv.h: Likewise.
	* rdi-share/configure: Likewise.
	* rdi-share/configure.in: Likewise.
	* rdi-share/crc.c: Likewise.
	* rdi-share/crc.h: Likewise.
	* rdi-share/dbg_conf.h: Likewise.
	* rdi-share/dbg_cp.h: Likewise.
	* rdi-share/dbg_hif.h: Likewise.
	* rdi-share/dbg_rdi.h: Likewise.
	* rdi-share/devclnt.h: Likewise.
	* rdi-share/devices.h: Likewise.
	* rdi-share/devsw.c: Likewise.
	* rdi-share/devsw.h: Likewise.
	* rdi-share/drivers.c: Likewise.
	* rdi-share/drivers.h: Likewise.
	* rdi-share/etherdrv.c: Likewise.
	* rdi-share/ethernet.h: Likewise.
	* rdi-share/host.h: Likewise.
	* rdi-share/hostchan.c: Likewise.
	* rdi-share/hostchan.h: Likewise.
	* rdi-share/hsys.c: Likewise.
	* rdi-share/hsys.h: Likewise.
	* rdi-share/logging.c: Likewise.
	* rdi-share/logging.h: Likewise.
	* rdi-share/msgbuild.c: Likewise.
	* rdi-share/msgbuild.h: Likewise.
	* rdi-share/params.c: Likewise.
	* rdi-share/params.h: Likewise.
	* rdi-share/rx.c: Likewise.
	* rdi-share/rxtx.h: Likewise.
	* rdi-share/serdrv.c: Likewise.
	* rdi-share/serpardr.c: Likewise.
	* rdi-share/sys.h: Likewise.
	* rdi-share/tx.c: Likewise.
	* rdi-share/unixcomm.c: Likewise.
	* rdi-share/unixcomm.h: Likewise.
@
text
@/* 
 * Copyright (C) 1995 Advanced RISC Machines Limited. All rights reserved.
 * 
 * This software may be freely used, copied, modified, and distributed
 * provided that the above copyright notice is preserved in all copies of the
 * software.
 */

/* -*-C-*-
 *
 * $Revision: 1.2 $
 *     $Date: 1998/01/08 11:12:00 $
 *
 */
#ifndef angsd_devsw_h
#define angsd_devsw_h

#include "devclnt.h"
#include "adperr.h"
#include "drivers.h"

#ifndef __cplusplus
typedef struct Packet Packet;
typedef struct DevSWState DevSWState;
#endif

/*
 * the basic structure used for passing packets around
 */
struct Packet
{
    struct Packet *pk_next;             /* XXX first field in struct */
    unsigned int   pk_length;
    unsigned char *pk_buffer;
};

/*
 * control structure, used for maintaining device switcher state
 */
struct DevSWState
{
    unsigned int  ds_opendevchans;      /* bitmap of open device channels */

    /*
     * queue of packets read for the various device channels
     */
    Packet       *ds_readqueue[DC_NUM_CHANNELS];

    /*
     * structures for managing active read and write operations
     */
    Packet       *ds_nextreadpacket;
    DriverCall    ds_activeread;
    DriverCall    ds_activewrite;
};

#ifdef __cplusplus
    extern "C" {
#endif

/*
 *  Function: DevSW_AllocatePacket
 *   Purpose: Claim some memory to hold a struct Packet, and the buffer for
 *              that packet.
 *
 *    Params:
 *       Input: length  Size of the buffer in struct Packet.
 *
 *   Returns:
 *          OK: Pointer to the newly malloc()ed Packet.
 *       Error: NULL
 */
Packet *DevSW_AllocatePacket(const unsigned int length);

/*
 *  Function: DevSW_FreePacket
 *   Purpose: Free the memory associated with a struct Packet.
 *
 *  Pre-conditions The structure must have been originally claimed
 *                      via DevSW_AllocatePacket.
 *
 *    Params:
 *       Input: pk      The packet to be freed.
 *
 *   Returns: Nothing
 */
void DevSW_FreePacket(Packet *pk);

/*
 *  Function: DevSW_Open
 *   Purpose: Open the specified device driver
 *
 *    Params:
 *       Input: name    Identifies which device to open.  This can either be
 *                      a host specific identifier (e.g. "/dev/ttya",
 *                      "COM1:"), or a number which is used to refer to
 *                      `standard' interfaces, so "1" would be the first host
 *                      interface, "2" the second, and so on.
 *
 *              arg     Driver specific arguments.  For example, some serial
 *                      drivers accept speed and control arguments such as
 *                      "9600" or "19200/NO_BREAK".  These arguments are
 *                      completely free-form: it is the individual drivers
 *                      which do the necessary interpretation.
 *
 *              type    The type of packet the caller is interested in.  Only
 *                      one open is allowed for each type of packet.
 *
 *      In/Out: device  The device driver to open
 *
 *   Returns:
 *          OK: adp_ok
 *       Error: adp_device_open_failed
 *              adp_device_already_open
 *              adp_malloc_failure
 */
AdpErrs DevSW_Open(DeviceDescr *device, const char *name, const char *arg,
                   const DevChanID type);

/*
 *  Function: DevSW_Match
 *   Purpose: Minimal veneer for DeviceMatch
 *
 *    Params:
 *       Input: device  The device driver to match.
 *
 *              name    Identifies which device to open.  This can either be
 *                      a host specific identifier (e.g. "/dev/ttya",
 *                      "COM1:"), or a number which is used to refer to
 *                      `standard' interfaces, so "1" would be the first host
 *                      interface, "2" the second, and so on.
 *
 *              arg     Driver specific arguments.  For example, some serial
 *                      drivers accept speed and control arguments such as
 *                      "9600" or "19200/NO_BREAK".  These arguments are
 *                      completely free-form: it is the individual drivers
 *                      which do the necessary interpretation.
 *
 *   Returns:
 *          OK: adp_ok
 *       Error: adp_failed
 */
AdpErrs DevSW_Match(const DeviceDescr *device, const char *name,
                    const char *arg);

/*
 *  Function: DevSW_Close
 *   Purpose: Close the specified device driver. All packets of the type
 *              used by the caller held within the switching layer will
 *              be discarded.
 *
 *  Pre-conditions: Device must have been previously opened.
 *
 *    Params:
 *       Input: device  The device driver to close
 *
 *              type    The type of packet the caller was interested in.
 *
 *   Returns:
 *          OK: adp_ok
 *       Error: adp_device_not_open
 */
AdpErrs DevSW_Close(const DeviceDescr *device, const DevChanID type);

/*
 *  Function: DevSW_Read
 *   Purpose: Read a packet of appropriate type from the device driver
 *
 *    Params:
 *       Input: device  The device driver to read packet from.
 *
 *              type    The type of packet the caller is interested in.
 *
 *      Output: packet  Pointer to new packet (if one is available)
 *              NULL (if no complete packet is available)
 *
 *       Input: block   If TRUE, read may safely block for a short period
 *                      of time (say up to 20ms), to avoid high CPU load
 *                      whilst waiting for a reply.
 *                      If FALSE, read MUST NOT block.
 *
 *   Returns:
 *          OK: adp_ok
 *       Error: adp_bad_packet
 *
 * Post-conditions: The calling function is responsible for freeing the
 *                      resources used by the packet when it is no longer
 *                      needed.
 */
AdpErrs DevSW_Read(const DeviceDescr *device, const DevChanID type,
                   Packet **packet, bool block);

/*
 *  Function: DevSW_Write
 *   Purpose: Try to write a packet to the device driver.  The write will
 *              be bounced if another write is still in progress.
 *
 *    Params:
 *       Input: device  The device driver to write a packet to.
 *
 *              packet  The packet to be written.
 *
 *              type    The type to be assigned to the packet.
 *
 *   Returns:
 *          OK: adp_ok
 *       Error: adp_illegal_args
 *              adp_write_busy
 *
 * Post-conditions: The calling function retains "ownership" of the packet,
 *                      i.e. it is responsible for freeing the resources used
 *                      by the packet when it is no longer needed.
 */
AdpErrs DevSW_Write(const DeviceDescr *device, Packet *packet, DevChanID type);

/*
 *  Function: DevSW_FlushPendingWrite
 *   Purpose: If a write is in progress, give it a chance to finish.
 *
 *    Params:
 *       Input: device  The device driver to flush.
 *
 *   Returns:
 *              adp_ok           no pending write, or write flushed completely
 *              adp_write_busy   pending write not flushed completely
 */
AdpErrs DevSW_FlushPendingWrite(const DeviceDescr *device);

/*
 *  Function: DevSW_Ioctl
 *   Purpose: Perform miscellaneous control operations.  This is a minimal
 *              veneer to DeviceIoctl.
 *
 *    Params:
 *       Input: device  The device driver to control.
 *
 *              opcode  Reason code indicating the operation to perform.
 *
 *      In/Out: args    Pointer to opcode-sensitive arguments/result space.
 *
 *   Returns:
 *          OK: adp_ok
 *       Error: adp_failed
 */
AdpErrs DevSW_Ioctl(const DeviceDescr *device, const int opcode, void *args);

/*
 *  Function: DevSW_WriteFinished
 *   Purpose: Return TRUE if the active device has finished writing
 *              the last packet to be sent, or FALSE if a packet is still
 *              being transmitted.
 *
 *    Params:
 *       Input: device  The device driver to check.
 *
 *   Returns:
 *        TRUE: write finished or inactive
 *       FALSE: write in progress
 */
bool DevSW_WriteFinished(const DeviceDescr *device);

#ifdef __cplusplus
    }
#endif

#endif /* ndef angsd_devsw_h */

/* EOF devsw.h */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-11-01 snapshot
@
text
@d11 2
a12 2
 * $Revision: 1.3 $
 *     $Date: 1999/11/01 12:11:37 $
a261 7
      
/*
 * set filename and enable/disable logginf of ADP packets
 */
void DevSW_SetLogfile(const char *filename);
void DevSW_SetLogEnable(int logEnableFlag);
      
@


1.1.1.3
log
@import gdb-2000-01-05 snapshot
@
text
@d11 2
a12 2
 * $Revision: 1.4 $
 *     $Date: 2000/01/04 14:49:02 $
d163 1
a163 1
AdpErrs DevSW_Close(DeviceDescr *device, const DevChanID type);
@


