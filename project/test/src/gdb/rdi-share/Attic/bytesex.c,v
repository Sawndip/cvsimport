head	1.2;
access;
symbols
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	99.11.02.04.52.48;	author jsm;	state dead;
branches;
next	1.1;

1.1
date	99.04.16.01.34.27;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.27;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.2
log
@These files removed in gdb-19991101 snapshot.
@
text
@/* 
 * Copyright (C) 1995 Advanced RISC Machines Limited. All rights reserved.
 * 
 * This software may be freely used, copied, modified, and distributed
 * provided that the above copyright notice is preserved in all copies of the
 * software.
 */

/*
 * bytesex.c - Code to support byte-sex independence
 * Copyright: (C) 1991, Advanced RISC Machines Ltd., Cambridge, England.
 */

/*
 * RCS $Revision: 1.2 $
 * Checkin $Date: 1998/01/08 11:11:35 $
 */

#include "bytesex.h"

static int reversing_bytes = 0;

void bytesex_reverse(yes_or_no)
int yes_or_no;
{ reversing_bytes = yes_or_no;
}

int bytesex_reversing()
{
  return reversing_bytes;
}

int32 bytesex_hostval(v)
int32 v;
{ /* Return v with the same endian-ness as the host */
  /* This mess generates better ARM code than the more obvious mess */
  /* and may eventually peephole to optimal code...                 */
  if (reversing_bytes)
  { unsigned32 t;
    /* t = v ^ (v ror 16) */
    t = v ^ ((v << 16) | (((unsigned32)v) >> 16));
    t &= ~0xff0000;
    /* v = v ror 8 */
    v = (v << 24) | (((unsigned32)v) >> 8);
    v = v ^ (t >> 8);
  }
  return v;
}

int32 bytesex_hostval_16(v)
int32 v;
{
  if (reversing_bytes) {
    v = ((v >> 8) & 0xff) | ((v << 8) & 0xff00);
  }
  return v;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

