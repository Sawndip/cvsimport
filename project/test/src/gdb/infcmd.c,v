head	1.337;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.324
	gdb_7_6-2013-04-26-release:1.324
	gdb_7_6-branch:1.324.0.2
	gdb_7_6-2013-03-12-branchpoint:1.324
	gdb_7_5_1-2012-11-29-release:1.306.2.1
	gdb_7_5-2012-08-17-release:1.306
	gdb_7_5-branch:1.306.0.2
	gdb_7_5-2012-07-18-branchpoint:1.306
	gdb_7_4_1-2012-04-26-release:1.291.2.3
	gdb_7_4-2012-01-24-release:1.291.2.2
	gdb_7_4-branch:1.291.0.2
	gdb_7_4-2011-12-13-branchpoint:1.291
	gdb_7_3_1-2011-09-04-release:1.279
	gdb_7_3-2011-07-26-release:1.279
	gdb_7_3-branch:1.279.0.2
	gdb_7_3-2011-04-01-branchpoint:1.279
	gdb_7_2-2010-09-02-release:1.269
	gdb_7_2-branch:1.269.0.2
	gdb_7_2-2010-07-07-branchpoint:1.269
	gdb_7_1-2010-03-18-release:1.259
	gdb_7_1-branch:1.259.0.2
	gdb_7_1-2010-02-18-branchpoint:1.259
	gdb_7_0_1-2009-12-22-release:1.253
	gdb_7_0-2009-10-06-release:1.253
	gdb_7_0-branch:1.253.0.4
	gdb_7_0-2009-09-16-branchpoint:1.253
	arc-sim-20090309:1.169
	msnyder-checkpoint-072509-branch:1.253.0.2
	msnyder-checkpoint-072509-branchpoint:1.253
	arc-insight_6_8-branch:1.169.0.6
	arc-insight_6_8-branchpoint:1.169
	insight_6_8-branch:1.169.0.4
	insight_6_8-branchpoint:1.169
	reverse-20081226-branch:1.227.0.2
	reverse-20081226-branchpoint:1.227
	multiprocess-20081120-branch:1.223.0.2
	multiprocess-20081120-branchpoint:1.223
	reverse-20080930-branch:1.212.0.2
	reverse-20080930-branchpoint:1.212
	reverse-20080717-branch:1.195.0.2
	reverse-20080717-branchpoint:1.195
	msnyder-reverse-20080609-branch:1.183.0.2
	msnyder-reverse-20080609-branchpoint:1.183
	drow-reverse-20070409-branch:1.151.0.2
	drow-reverse-20070409-branchpoint:1.151
	gdb_6_8-2008-03-27-release:1.169
	gdb_6_8-branch:1.169.0.2
	gdb_6_8-2008-02-26-branchpoint:1.169
	gdb_6_7_1-2007-10-29-release:1.158
	gdb_6_7-2007-10-10-release:1.158
	gdb_6_7-branch:1.158.0.2
	gdb_6_7-2007-09-07-branchpoint:1.158
	insight_6_6-20070208-release:1.146.2.1
	gdb_6_6-2006-12-18-release:1.146.2.1
	gdb_6_6-branch:1.146.0.2
	gdb_6_6-2006-11-15-branchpoint:1.146
	insight_6_5-20061003-release:1.144
	gdb-csl-symbian-6_4_50_20060226-12:1.144.2.1.2.1
	gdb-csl-sourcerygxx-3_4_4-25:1.140.6.2
	nickrob-async-20060828-mergepoint:1.144
	gdb-csl-symbian-6_4_50_20060226-11:1.144.2.1.2.1
	gdb-csl-sourcerygxx-4_1-17:1.144.2.1
	gdb-csl-20060226-branch-local-2:1.144.2.1
	gdb-csl-sourcerygxx-4_1-14:1.144.2.1
	gdb-csl-sourcerygxx-4_1-13:1.144.2.1
	gdb-csl-sourcerygxx-4_1-12:1.144.2.1
	gdb-csl-sourcerygxx-3_4_4-21:1.144.2.1
	gdb_6_5-20060621-release:1.144
	gdb-csl-sourcerygxx-4_1-9:1.144.2.1
	gdb-csl-sourcerygxx-4_1-8:1.144.2.1
	gdb-csl-sourcerygxx-4_1-7:1.144.2.1
	gdb-csl-arm-2006q1-6:1.144.2.1
	gdb-csl-sourcerygxx-4_1-6:1.144.2.1
	gdb-csl-symbian-6_4_50_20060226-10:1.144.2.1.2.1
	gdb-csl-symbian-6_4_50_20060226-9:1.144.2.1.2.1
	gdb-csl-symbian-6_4_50_20060226-8:1.144.2.1.2.1
	gdb-csl-coldfire-4_1-11:1.144.2.1
	gdb-csl-sourcerygxx-3_4_4-19:1.144.2.1
	gdb-csl-coldfire-4_1-10:1.144.2.1
	gdb_6_5-branch:1.144.0.14
	gdb_6_5-2006-05-14-branchpoint:1.144
	gdb-csl-sourcerygxx-4_1-5:1.144.2.1
	nickrob-async-20060513-branch:1.144.0.12
	nickrob-async-20060513-branchpoint:1.144
	gdb-csl-sourcerygxx-4_1-4:1.144.2.1
	msnyder-reverse-20060502-branch:1.144.0.10
	msnyder-reverse-20060502-branchpoint:1.144
	gdb-csl-morpho-4_1-4:1.144.2.1
	gdb-csl-sourcerygxx-3_4_4-17:1.144.2.1
	readline_5_1-import-branch:1.144.0.8
	readline_5_1-import-branchpoint:1.144
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.144.2.1
	gdb-csl-symbian-20060226-branch:1.144.2.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.144.2.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.144.2.1
	msnyder-reverse-20060331-branch:1.144.0.6
	msnyder-reverse-20060331-branchpoint:1.144
	gdb-csl-available-20060303-branch:1.144.0.4
	gdb-csl-available-20060303-branchpoint:1.144
	gdb-csl-20060226-branch:1.144.0.2
	gdb-csl-20060226-branchpoint:1.144
	gdb_6_4-20051202-release:1.140
	msnyder-fork-checkpoint-branch:1.140.0.8
	msnyder-fork-checkpoint-branchpoint:1.140
	gdb-csl-gxxpro-6_3-branch:1.140.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.140
	gdb_6_4-branch:1.140.0.4
	gdb_6_4-2005-11-01-branchpoint:1.140
	gdb-csl-arm-20051020-branch:1.140.0.2
	gdb-csl-arm-20051020-branchpoint:1.140
	msnyder-tracepoint-checkpoint-branch:1.138.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.138
	gdb-csl-arm-20050325-2005-q1b:1.136
	gdb-csl-arm-20050325-2005-q1a:1.136
	csl-arm-20050325-branch:1.136.0.2
	csl-arm-20050325-branchpoint:1.136
	gdb-post-i18n-errorwarning-20050211:1.128
	gdb-pre-i18n-errorwarning-20050211:1.127
	gdb_6_3-20041109-release:1.123
	gdb_6_3-branch:1.123.0.2
	gdb_6_3-20041019-branchpoint:1.123
	drow_intercu-merge-20040921:1.123
	drow_intercu-merge-20040915:1.123
	jimb-gdb_6_2-e500-branch:1.118.0.6
	jimb-gdb_6_2-e500-branchpoint:1.118
	gdb_6_2-20040730-release:1.118
	gdb_6_2-branch:1.118.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.118
	gdb_6_1_1-20040616-release:1.105
	gdb_6_1-2004-04-05-release:1.105
	drow_intercu-merge-20040402:1.106
	drow_intercu-merge-20040327:1.106
	ezannoni_pie-20040323-branch:1.106.0.2
	ezannoni_pie-20040323-branchpoint:1.106
	cagney_tramp-20040321-mergepoint:1.105
	cagney_tramp-20040309-branch:1.105.0.6
	cagney_tramp-20040309-branchpoint:1.105
	gdb_6_1-branch:1.105.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.105
	drow_intercu-20040221-branch:1.105.0.2
	drow_intercu-20040221-branchpoint:1.105
	cagney_bfdfile-20040213-branch:1.104.0.2
	cagney_bfdfile-20040213-branchpoint:1.104
	drow-cplus-merge-20040208:1.104
	carlton_dictionary-20040126-merge:1.103
	cagney_bigcore-20040122-branch:1.101.0.2
	cagney_bigcore-20040122-branchpoint:1.101
	drow-cplus-merge-20040113:1.99
	drow-cplus-merge-20031224:1.99
	drow-cplus-merge-20031220:1.99
	carlton_dictionary-20031215-merge:1.99
	drow-cplus-merge-20031214:1.99
	carlton-dictionary-20031111-merge:1.98
	gdb_6_0-2003-10-04-release:1.82
	kettenis_sparc-20030918-branch:1.89.0.4
	kettenis_sparc-20030918-branchpoint:1.89
	carlton_dictionary-20030917-merge:1.89
	ezannoni_pie-20030916-branchpoint:1.89
	ezannoni_pie-20030916-branch:1.89.0.2
	cagney_x86i386-20030821-branch:1.86.0.2
	cagney_x86i386-20030821-branchpoint:1.86
	carlton_dictionary-20030805-merge:1.86
	carlton_dictionary-20030627-merge:1.82
	gdb_6_0-branch:1.82.0.2
	gdb_6_0-2003-06-23-branchpoint:1.82
	jimb-ppc64-linux-20030613-branch:1.81.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.81
	cagney_convert-20030606-branch:1.80.0.10
	cagney_convert-20030606-branchpoint:1.80
	cagney_writestrings-20030508-branch:1.80.0.8
	cagney_writestrings-20030508-branchpoint:1.80
	jimb-ppc64-linux-20030528-branch:1.80.0.6
	jimb-ppc64-linux-20030528-branchpoint:1.80
	carlton_dictionary-20030523-merge:1.80
	cagney_fileio-20030521-branch:1.80.0.4
	cagney_fileio-20030521-branchpoint:1.80
	kettenis_i386newframe-20030517-mergepoint:1.80
	jimb-ppc64-linux-20030509-branch:1.80.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.80
	kettenis_i386newframe-20030504-mergepoint:1.79
	carlton_dictionary-20030430-merge:1.79
	kettenis_i386newframe-20030419-branch:1.78.0.2
	kettenis_i386newframe-20030419-branchpoint:1.78
	carlton_dictionary-20030416-merge:1.78
	cagney_frameaddr-20030409-mergepoint:1.78
	kettenis_i386newframe-20030406-branch:1.76.0.4
	kettenis_i386newframe-20030406-branchpoint:1.76
	cagney_frameaddr-20030403-branchpoint:1.76
	cagney_frameaddr-20030403-branch:1.76.0.2
	cagney_framebase-20030330-mergepoint:1.75
	cagney_framebase-20030326-branch:1.75.0.10
	cagney_framebase-20030326-branchpoint:1.75
	cagney_lazyid-20030317-branch:1.75.0.8
	cagney_lazyid-20030317-branchpoint:1.75
	kettenis-i386newframe-20030316-mergepoint:1.75
	offbyone-20030313-branch:1.75.0.6
	offbyone-20030313-branchpoint:1.75
	kettenis-i386newframe-20030308-branch:1.75.0.4
	kettenis-i386newframe-20030308-branchpoint:1.75
	carlton_dictionary-20030305-merge:1.75
	cagney_offbyone-20030303-branch:1.75.0.2
	cagney_offbyone-20030303-branchpoint:1.75
	carlton_dictionary-20030207-merge:1.72
	interps-20030203-mergepoint:1.72
	interps-20030202-branch:1.72.0.2
	interps-20030202-branchpoint:1.72
	cagney-unwind-20030108-branch:1.69.0.2
	cagney-unwind-20030108-branchpoint:1.69
	carlton_dictionary-20021223-merge:1.69
	gdb_5_3-2002-12-12-release:1.54.6.2
	carlton_dictionary-20021115-merge:1.62
	kseitz_interps-20021105-merge:1.59
	kseitz_interps-20021103-merge:1.59
	drow-cplus-merge-20021020:1.57
	drow-cplus-merge-20021025:1.58
	carlton_dictionary-20021025-merge:1.58
	carlton_dictionary-20021011-merge:1.57
	drow-cplus-branch:1.57.0.2
	drow-cplus-branchpoint:1.57
	kseitz_interps-20020930-merge:1.56
	carlton_dictionary-20020927-merge:1.56
	carlton_dictionary-branch:1.55.0.2
	carlton_dictionary-20020920-branchpoint:1.55
	gdb_5_3-branch:1.54.0.6
	gdb_5_3-2002-09-04-branchpoint:1.54
	kseitz_interps-20020829-merge:1.54
	cagney_sysregs-20020825-branch:1.54.0.4
	cagney_sysregs-20020825-branchpoint:1.54
	readline_4_3-import-branch:1.54.0.2
	readline_4_3-import-branchpoint:1.54
	gdb_5_2_1-2002-07-23-release:1.41
	kseitz_interps-20020528-branch:1.46.0.6
	kseitz_interps-20020528-branchpoint:1.46
	cagney_regbuf-20020515-branch:1.46.0.4
	cagney_regbuf-20020515-branchpoint:1.46
	jimb-macro-020506-branch:1.46.0.2
	jimb-macro-020506-branchpoint:1.46
	gdb_5_2-2002-04-29-release:1.41
	gdb_5_2-branch:1.41.0.2
	gdb_5_2-2002-03-03-branchpoint:1.41
	gdb_5_1_1-2002-01-24-release:1.29.4.1
	gdb_5_1_0_1-2002-01-03-release:1.29.4.1
	cygnus_cvs_20020108_pre:1.36
	gdb_5_1_0_1-2002-01-03-branchpoint:1.29.4.1
	gdb_5_1_0_1-2002-01-03-branch:1.29.4.1.0.4
	gdb_5_1-2001-11-21-release:1.29.4.1
	gdb_s390-2001-09-26-branch:1.29.4.1.0.2
	gdb_s390-2001-09-26-branchpoint:1.29.4.1
	gdb_5_1-2001-07-29-branch:1.29.0.4
	gdb_5_1-2001-07-29-branchpoint:1.29
	dberlin-typesystem-branch:1.29.0.2
	dberlin-typesystem-branchpoint:1.29
	gdb-post-ptid_t-2001-05-03:1.27
	gdb-pre-ptid_t-2001-05-03:1.26
	insight-precleanup-2001-01-01:1.14
	gdb-post-protoization-2000-07-29:1.9
	gdb-pre-protoization-2000-07-29:1.8
	gdb-premipsmulti-2000-06-06-branch:1.7.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.7
	gdb-post-params-removal-2000-06-04:1.7
	gdb-pre-params-removal-2000-06-04:1.7
	gdb-post-params-removal-2000-05-28:1.7
	gdb-pre-params-removal-2000-05-28:1.6
	gdb_5_0-2000-05-19-release:1.3.2.1
	gdb_4_18_2-2000-05-18-release:1.3.2.1
	gdb_4_95_1-2000-05-11-snapshot:1.3.2.1
	gdb_4_95_0-2000-04-27-snapshot:1.3.2.1
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3
	repo-unification-2000-02-06:1.1.1.17
	insight-2000-02-04:1.1.1.17
	gdb-2000-02-04:1.1.1.17
	gdb-2000-02-02:1.1.1.17
	gdb-2000-02-01:1.1.1.16
	gdb-2000-01-31:1.1.1.16
	gdb-2000-01-26:1.1.1.15
	gdb-2000-01-24:1.1.1.15
	gdb-2000-01-17:1.1.1.15
	gdb-2000-01-10:1.1.1.15
	gdb-2000-01-05:1.1.1.14
	gdb-1999-12-21:1.1.1.14
	gdb-1999-12-13:1.1.1.13
	gdb-1999-12-07:1.1.1.13
	gdb-1999-12-06:1.1.1.13
	gdb-1999-11-16:1.1.1.12
	gdb-1999-11-08:1.1.1.12
	gdb-1999-11-01:1.1.1.11
	gdb-1999-10-25:1.1.1.11
	gdb-1999-10-18:1.1.1.11
	gdb-1999-10-11:1.1.1.11
	gdb-1999-10-04:1.1.1.11
	gdb-1999-09-28:1.1.1.10
	gdb-1999-09-21:1.1.1.9
	gdb-1999-09-13:1.1.1.9
	gdb-1999-09-08:1.1.1.9
	gdb-1999-08-30:1.1.1.9
	gdb-1999-08-23:1.1.1.9
	gdb-1999-08-16:1.1.1.9
	gdb-1999-08-09:1.1.1.9
	gdb-1999-08-02:1.1.1.8
	gdb-1999-07-26:1.1.1.8
	gdb-1999-07-19:1.1.1.8
	gdb-1999-07-12:1.1.1.7
	gdb-post-reformat-19990707:1.1.1.7
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.7
	gdb-pre-reformat-19990707:1.1.1.6
	gdb-1999-07-07:1.1.1.6
	gdb-1999-07-05:1.1.1.5
	gdb-1999-06-28:1.1.1.4
	gdb-1999-06-21:1.1.1.4
	gdb-1999-06-14:1.1.1.4
	gdb-1999-06-07:1.1.1.4
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.337
date	2013.10.02.16.15.44;	author palves;	state Exp;
branches;
next	1.336;

1.336
date	2013.09.30.11.50.11;	author luisgpm;	state Exp;
branches;
next	1.335;

1.335
date	2013.09.18.14.02.31;	author aburgess;	state Exp;
branches;
next	1.334;

1.334
date	2013.09.17.18.26.39;	author palves;	state Exp;
branches;
next	1.333;

1.333
date	2013.07.11.09.07.41;	author aburgess;	state Exp;
branches;
next	1.332;

1.332
date	2013.07.09.16.57.09;	author devans;	state Exp;
branches;
next	1.331;

1.331
date	2013.05.23.17.15.34;	author palves;	state Exp;
branches;
next	1.330;

1.330
date	2013.05.06.14.15.49;	author brobecke;	state Exp;
branches;
next	1.329;

1.329
date	2013.05.05.16.54.26;	author jkratoch;	state Exp;
branches;
next	1.328;

1.328
date	2013.04.10.14.10.35;	author palves;	state Exp;
branches;
next	1.327;

1.327
date	2013.04.08.20.18.11;	author tromey;	state Exp;
branches;
next	1.326;

1.326
date	2013.04.08.19.59.09;	author tromey;	state Exp;
branches;
next	1.325;

1.325
date	2013.03.13.18.34.53;	author palves;	state Exp;
branches;
next	1.324;

1.324
date	2013.03.07.21.57.29;	author kseitz;	state Exp;
branches;
next	1.323;

1.323
date	2013.02.14.04.00.16;	author qiyao;	state Exp;
branches;
next	1.322;

1.322
date	2013.01.31.18.37.37;	author aristovski;	state Exp;
branches;
next	1.321;

1.321
date	2013.01.16.14.44.03;	author qiyao;	state Exp;
branches;
next	1.320;

1.320
date	2013.01.01.06.32.45;	author brobecke;	state Exp;
branches;
next	1.319;

1.319
date	2012.12.18.19.31.17;	author tromey;	state Exp;
branches;
next	1.318;

1.318
date	2012.12.14.15.30.35;	author tromey;	state Exp;
branches;
next	1.317;

1.317
date	2012.11.30.14.35.50;	author qiyao;	state Exp;
branches;
next	1.316;

1.316
date	2012.11.12.21.59.06;	author brobecke;	state Exp;
branches;
next	1.315;

1.315
date	2012.11.09.19.57.59;	author tromey;	state Exp;
branches;
next	1.314;

1.314
date	2012.09.18.20.14.53;	author sergiodj;	state Exp;
branches;
next	1.313;

1.313
date	2012.09.17.07.15.48;	author jkratoch;	state Exp;
branches;
next	1.312;

1.312
date	2012.08.28.09.05.35;	author palves;	state Exp;
branches;
next	1.311;

1.311
date	2012.08.23.16.44.24;	author palves;	state Exp;
branches;
next	1.310;

1.310
date	2012.08.17.03.06.10;	author vapier;	state Exp;
branches;
next	1.309;

1.309
date	2012.08.15.01.59.42;	author vapier;	state Exp;
branches;
next	1.308;

1.308
date	2012.08.10.05.03.11;	author vapier;	state Exp;
branches;
next	1.307;

1.307
date	2012.07.19.12.48.15;	author qiyao;	state Exp;
branches;
next	1.306;

1.306
date	2012.06.29.22.46.44;	author devans;	state Exp;
branches
	1.306.2.1;
next	1.305;

1.305
date	2012.06.12.16.36.42;	author eliz;	state Exp;
branches;
next	1.304;

1.304
date	2012.05.24.16.51.34;	author palves;	state Exp;
branches;
next	1.303;

1.303
date	2012.05.24.16.39.09;	author palves;	state Exp;
branches;
next	1.302;

1.302
date	2012.05.16.14.35.05;	author macro;	state Exp;
branches;
next	1.301;

1.301
date	2012.03.27.19.08.36;	author palves;	state Exp;
branches;
next	1.300;

1.300
date	2012.03.01.21.13.58;	author palves;	state Exp;
branches;
next	1.299;

1.299
date	2012.02.29.14.52.44;	author jkratoch;	state Exp;
branches;
next	1.298;

1.298
date	2012.02.23.08.15.04;	author jkratoch;	state Exp;
branches;
next	1.297;

1.297
date	2012.02.15.19.13.13;	author tromey;	state Exp;
branches;
next	1.296;

1.296
date	2012.02.02.20.19.15;	author devans;	state Exp;
branches;
next	1.295;

1.295
date	2012.01.20.09.49.58;	author uweigand;	state Exp;
branches;
next	1.294;

1.294
date	2012.01.20.09.49.01;	author uweigand;	state Exp;
branches;
next	1.293;

1.293
date	2012.01.04.08.17.04;	author brobecke;	state Exp;
branches;
next	1.292;

1.292
date	2011.12.23.17.06.11;	author kpouget;	state Exp;
branches;
next	1.291;

1.291
date	2011.12.06.18.54.39;	author tromey;	state Exp;
branches
	1.291.2.1;
next	1.290;

1.290
date	2011.10.29.12.36.08;	author qiyao;	state Exp;
branches;
next	1.289;

1.289
date	2011.08.04.19.10.12;	author palves;	state Exp;
branches;
next	1.288;

1.288
date	2011.07.26.15.17.47;	author ppluzhnikov;	state Exp;
branches;
next	1.287;

1.287
date	2011.05.30.18.04.32;	author palves;	state Exp;
branches;
next	1.286;

1.286
date	2011.05.27.18.26.19;	author palves;	state Exp;
branches;
next	1.285;

1.285
date	2011.05.26.16.11.45;	author palves;	state Exp;
branches;
next	1.284;

1.284
date	2011.05.26.15.32.37;	author palves;	state Exp;
branches;
next	1.283;

1.283
date	2011.05.20.16.31.30;	author palves;	state Exp;
branches;
next	1.282;

1.282
date	2011.05.20.16.20.25;	author palves;	state Exp;
branches;
next	1.281;

1.281
date	2011.05.09.14.25.36;	author palves;	state Exp;
branches;
next	1.280;

1.280
date	2011.04.19.18.04.07;	author tromey;	state Exp;
branches;
next	1.279;

1.279
date	2011.03.22.14.39.40;	author palves;	state Exp;
branches;
next	1.278;

1.278
date	2011.02.28.23.37.07;	author msnyder;	state Exp;
branches;
next	1.277;

1.277
date	2011.01.31.15.16.59;	author tromey;	state Exp;
branches;
next	1.276;

1.276
date	2011.01.25.17.58.59;	author palves;	state Exp;
branches;
next	1.275;

1.275
date	2011.01.25.15.47.58;	author palves;	state Exp;
branches;
next	1.274;

1.274
date	2011.01.09.03.08.56;	author msnyder;	state Exp;
branches;
next	1.273;

1.273
date	2011.01.05.22.22.49;	author msnyder;	state Exp;
branches;
next	1.272;

1.272
date	2011.01.01.15.33.08;	author brobecke;	state Exp;
branches;
next	1.271;

1.271
date	2010.12.09.16.09.52;	author tromey;	state Exp;
branches;
next	1.270;

1.270
date	2010.11.28.04.31.24;	author jkratoch;	state Exp;
branches;
next	1.269;

1.269
date	2010.07.01.15.36.15;	author palves;	state Exp;
branches;
next	1.268;

1.268
date	2010.06.11.15.36.04;	author tromey;	state Exp;
branches;
next	1.267;

1.267
date	2010.05.14.21.25.51;	author msnyder;	state Exp;
branches;
next	1.266;

1.266
date	2010.05.06.19.14.08;	author msnyder;	state Exp;
branches;
next	1.265;

1.265
date	2010.04.09.03.00.57;	author shebs;	state Exp;
branches;
next	1.264;

1.264
date	2010.04.04.22.12.04;	author jkratoch;	state Exp;
branches;
next	1.263;

1.263
date	2010.03.25.20.48.53;	author tromey;	state Exp;
branches;
next	1.262;

1.262
date	2010.03.18.18.02.00;	author tromey;	state Exp;
branches;
next	1.261;

1.261
date	2010.03.18.13.21.36;	author palves;	state Exp;
branches;
next	1.260;

1.260
date	2010.03.18.01.09.26;	author shebs;	state Exp;
branches;
next	1.259;

1.259
date	2010.02.16.21.18.46;	author drow;	state Exp;
branches;
next	1.258;

1.258
date	2010.01.20.14.23.07;	author vprus;	state Exp;
branches;
next	1.257;

1.257
date	2010.01.08.22.52.03;	author jkratoch;	state Exp;
branches;
next	1.256;

1.256
date	2010.01.06.20.31.28;	author shebs;	state Exp;
branches;
next	1.255;

1.255
date	2010.01.01.07.31.36;	author brobecke;	state Exp;
branches;
next	1.254;

1.254
date	2009.10.19.09.51.41;	author palves;	state Exp;
branches;
next	1.253;

1.253
date	2009.07.02.21.57.27;	author palves;	state Exp;
branches;
next	1.252;

1.252
date	2009.07.02.17.21.06;	author uweigand;	state Exp;
branches;
next	1.251;

1.251
date	2009.07.02.17.12.25;	author uweigand;	state Exp;
branches;
next	1.250;

1.250
date	2009.06.28.00.20.22;	author drow;	state Exp;
branches;
next	1.249;

1.249
date	2009.06.24.16.41.30;	author uweigand;	state Exp;
branches;
next	1.248;

1.248
date	2009.06.17.18.43.24;	author uweigand;	state Exp;
branches;
next	1.247;

1.247
date	2009.06.17.18.35.33;	author uweigand;	state Exp;
branches;
next	1.246;

1.246
date	2009.06.17.06.17.32;	author muller;	state Exp;
branches;
next	1.245;

1.245
date	2009.06.07.16.46.48;	author palves;	state Exp;
branches;
next	1.244;

1.244
date	2009.05.24.21.06.53;	author devans;	state Exp;
branches;
next	1.243;

1.243
date	2009.05.23.16.17.15;	author jkratoch;	state Exp;
branches;
next	1.242;

1.242
date	2009.05.19.10.08.19;	author palves;	state Exp;
branches;
next	1.241;

1.241
date	2009.05.19.00.23.49;	author palves;	state Exp;
branches;
next	1.240;

1.240
date	2009.05.05.13.24.48;	author uweigand;	state Exp;
branches;
next	1.239;

1.239
date	2009.05.05.13.09.00;	author uweigand;	state Exp;
branches;
next	1.238;

1.238
date	2009.03.25.21.42.34;	author palves;	state Exp;
branches;
next	1.237;

1.237
date	2009.03.22.17.59.59;	author palves;	state Exp;
branches;
next	1.236;

1.236
date	2009.03.22.17.57.10;	author palves;	state Exp;
branches;
next	1.235;

1.235
date	2009.03.04.22.50.59;	author palves;	state Exp;
branches;
next	1.234;

1.234
date	2009.03.04.17.58.34;	author aristovski;	state Exp;
branches;
next	1.233;

1.233
date	2009.02.25.02.14.22;	author teawater;	state Exp;
branches;
next	1.232;

1.232
date	2009.02.14.15.24.42;	author vprus;	state Exp;
branches;
next	1.231;

1.231
date	2009.01.25.23.35.51;	author palves;	state Exp;
branches;
next	1.230;

1.230
date	2009.01.20.15.33.13;	author drow;	state Exp;
branches;
next	1.229;

1.229
date	2009.01.18.17.42.16;	author palves;	state Exp;
branches;
next	1.228;

1.228
date	2009.01.03.05.57.52;	author brobecke;	state Exp;
branches;
next	1.227;

1.227
date	2008.12.11.20.34.18;	author palves;	state Exp;
branches;
next	1.226;

1.226
date	2008.12.10.21.32.15;	author palves;	state Exp;
branches;
next	1.225;

1.225
date	2008.12.05.22.38.10;	author palves;	state Exp;
branches;
next	1.224;

1.224
date	2008.12.05.02.08.26;	author palves;	state Exp;
branches;
next	1.223;

1.223
date	2008.11.17.16.37.34;	author vprus;	state Exp;
branches
	1.223.2.1;
next	1.222;

1.222
date	2008.11.05.20.23.07;	author palves;	state Exp;
branches;
next	1.221;

1.221
date	2008.11.03.21.07.28;	author vprus;	state Exp;
branches;
next	1.220;

1.220
date	2008.11.03.14.01.27;	author palves;	state Exp;
branches;
next	1.219;

1.219
date	2008.10.30.10.07.16;	author schwab;	state Exp;
branches;
next	1.218;

1.218
date	2008.10.28.17.19.56;	author tromey;	state Exp;
branches;
next	1.217;

1.217
date	2008.10.27.12.43.24;	author palves;	state Exp;
branches;
next	1.216;

1.216
date	2008.10.24.20.38.26;	author palves;	state Exp;
branches;
next	1.215;

1.215
date	2008.10.23.23.11.21;	author palves;	state Exp;
branches;
next	1.214;

1.214
date	2008.10.17.23.39.32;	author palves;	state Exp;
branches;
next	1.213;

1.213
date	2008.10.17.19.43.46;	author msnyder;	state Exp;
branches;
next	1.212;

1.212
date	2008.09.22.15.20.08;	author palves;	state Exp;
branches
	1.212.2.1;
next	1.211;

1.211
date	2008.09.11.16.09.33;	author uweigand;	state Exp;
branches;
next	1.210;

1.210
date	2008.09.08.22.10.20;	author palves;	state Exp;
branches;
next	1.209;

1.209
date	2008.09.08.21.57.42;	author palves;	state Exp;
branches;
next	1.208;

1.208
date	2008.09.08.21.55.16;	author palves;	state Exp;
branches;
next	1.207;

1.207
date	2008.09.08.21.52.25;	author palves;	state Exp;
branches;
next	1.206;

1.206
date	2008.09.08.21.51.18;	author palves;	state Exp;
branches;
next	1.205;

1.205
date	2008.09.08.21.48.52;	author palves;	state Exp;
branches;
next	1.204;

1.204
date	2008.09.08.21.46.21;	author palves;	state Exp;
branches;
next	1.203;

1.203
date	2008.09.08.21.43.00;	author palves;	state Exp;
branches;
next	1.202;

1.202
date	2008.09.08.21.40.39;	author palves;	state Exp;
branches;
next	1.201;

1.201
date	2008.09.05.11.37.17;	author uweigand;	state Exp;
branches;
next	1.200;

1.200
date	2008.08.21.20.13.08;	author uweigand;	state Exp;
branches;
next	1.199;

1.199
date	2008.08.19.13.22.14;	author vprus;	state Exp;
branches;
next	1.198;

1.198
date	2008.08.14.01.39.24;	author palves;	state Exp;
branches;
next	1.197;

1.197
date	2008.08.09.12.15.10;	author uweigand;	state Exp;
branches;
next	1.196;

1.196
date	2008.07.26.10.23.56;	author vprus;	state Exp;
branches;
next	1.195;

1.195
date	2008.07.12.19.25.42;	author palves;	state Exp;
branches
	1.195.2.1;
next	1.194;

1.194
date	2008.07.12.19.07.38;	author palves;	state Exp;
branches;
next	1.193;

1.193
date	2008.07.12.17.10.59;	author vprus;	state Exp;
branches;
next	1.192;

1.192
date	2008.07.11.11.07.38;	author palves;	state Exp;
branches;
next	1.191;

1.191
date	2008.07.11.10.59.21;	author palves;	state Exp;
branches;
next	1.190;

1.190
date	2008.07.09.22.42.42;	author palves;	state Exp;
branches;
next	1.189;

1.189
date	2008.07.03.17.38.08;	author palves;	state Exp;
branches;
next	1.188;

1.188
date	2008.06.13.20.19.19;	author vprus;	state Exp;
branches;
next	1.187;

1.187
date	2008.06.10.10.23.53;	author vprus;	state Exp;
branches;
next	1.186;

1.186
date	2008.06.10.09.35.08;	author vprus;	state Exp;
branches;
next	1.185;

1.185
date	2008.06.10.09.32.05;	author vprus;	state Exp;
branches;
next	1.184;

1.184
date	2008.06.10.09.30.34;	author vprus;	state Exp;
branches;
next	1.183;

1.183
date	2008.05.21.17.54.23;	author brobecke;	state Exp;
branches
	1.183.2.1;
next	1.182;

1.182
date	2008.05.06.21.34.59;	author brobecke;	state Exp;
branches;
next	1.181;

1.181
date	2008.05.05.16.41.42;	author palves;	state Exp;
branches;
next	1.180;

1.180
date	2008.05.04.19.38.59;	author palves;	state Exp;
branches;
next	1.179;

1.179
date	2008.05.01.18.50.14;	author drow;	state Exp;
branches;
next	1.178;

1.178
date	2008.04.24.11.43.14;	author vprus;	state Exp;
branches;
next	1.177;

1.177
date	2008.04.24.11.13.44;	author vprus;	state Exp;
branches;
next	1.176;

1.176
date	2008.04.22.11.03.41;	author corinna;	state Exp;
branches;
next	1.175;

1.175
date	2008.04.17.00.25.01;	author tromey;	state Exp;
branches;
next	1.174;

1.174
date	2008.03.17.17.30.29;	author palves;	state Exp;
branches;
next	1.173;

1.173
date	2008.03.14.23.24.53;	author palves;	state Exp;
branches;
next	1.172;

1.172
date	2008.03.14.18.57.43;	author vprus;	state Exp;
branches;
next	1.171;

1.171
date	2008.02.28.17.43.47;	author tromey;	state Exp;
branches;
next	1.170;

1.170
date	2008.02.28.16.26.17;	author drow;	state Exp;
branches;
next	1.169;

1.169
date	2008.01.31.13.37.21;	author bauermann;	state Exp;
branches
	1.169.6.1;
next	1.168;

1.168
date	2008.01.29.22.47.19;	author drow;	state Exp;
branches;
next	1.167;

1.167
date	2008.01.29.21.11.24;	author brobecke;	state Exp;
branches;
next	1.166;

1.166
date	2008.01.11.13.34.14;	author deuling;	state Exp;
branches;
next	1.165;

1.165
date	2008.01.01.22.53.11;	author drow;	state Exp;
branches;
next	1.164;

1.164
date	2007.11.15.06.24.17;	author vprus;	state Exp;
branches;
next	1.163;

1.163
date	2007.11.15.06.14.26;	author vprus;	state Exp;
branches;
next	1.162;

1.162
date	2007.10.25.11.30.55;	author macro;	state Exp;
branches;
next	1.161;

1.161
date	2007.10.22.14.09.17;	author uweigand;	state Exp;
branches;
next	1.160;

1.160
date	2007.10.12.15.32.50;	author uweigand;	state Exp;
branches;
next	1.159;

1.159
date	2007.09.22.19.33.31;	author vprus;	state Exp;
branches;
next	1.158;

1.158
date	2007.09.04.01.38.07;	author palves;	state Exp;
branches;
next	1.157;

1.157
date	2007.09.04.01.12.18;	author palves;	state Exp;
branches;
next	1.156;

1.156
date	2007.08.23.18.08.35;	author brobecke;	state Exp;
branches;
next	1.155;

1.155
date	2007.06.09.13.42.15;	author uweigand;	state Exp;
branches;
next	1.154;

1.154
date	2007.05.31.17.32.21;	author uweigand;	state Exp;
branches;
next	1.153;

1.153
date	2007.05.31.17.00.06;	author uweigand;	state Exp;
branches;
next	1.152;

1.152
date	2007.04.18.07.21.33;	author denis;	state Exp;
branches;
next	1.151;

1.151
date	2007.03.27.23.01.00;	author palves;	state Exp;
branches
	1.151.2.1;
next	1.150;

1.150
date	2007.02.27.19.46.04;	author drow;	state Exp;
branches;
next	1.149;

1.149
date	2007.01.09.17.58.51;	author drow;	state Exp;
branches;
next	1.148;

1.148
date	2006.11.28.22.10.26;	author drow;	state Exp;
branches;
next	1.147;

1.147
date	2006.11.20.21.47.06;	author cagney;	state Exp;
branches;
next	1.146;

1.146
date	2006.10.27.22.23.20;	author schwab;	state Exp;
branches
	1.146.2.1;
next	1.145;

1.145
date	2006.09.21.13.54.02;	author drow;	state Exp;
branches;
next	1.144;

1.144
date	2006.01.27.20.05.27;	author brobecke;	state Exp;
branches
	1.144.2.1
	1.144.4.1
	1.144.6.1
	1.144.10.1
	1.144.12.1;
next	1.143;

1.143
date	2006.01.24.22.34.34;	author drow;	state Exp;
branches;
next	1.142;

1.142
date	2006.01.24.22.09.28;	author drow;	state Exp;
branches;
next	1.141;

1.141
date	2005.12.17.22.34.01;	author eliz;	state Exp;
branches;
next	1.140;

1.140
date	2005.08.17.15.08.33;	author kettenis;	state Exp;
branches
	1.140.2.1
	1.140.6.1;
next	1.139;

1.139
date	2005.07.06.14.54.33;	author bobbybrasko;	state Exp;
branches;
next	1.138;

1.138
date	2005.05.22.14.53.34;	author cagney;	state Exp;
branches;
next	1.137;

1.137
date	2005.05.12.20.21.17;	author kettenis;	state Exp;
branches;
next	1.136;

1.136
date	2005.03.08.22.17.34;	author mmitchel;	state Exp;
branches;
next	1.135;

1.135
date	2005.03.08.22.03.43;	author brobecke;	state Exp;
branches;
next	1.134;

1.134
date	2005.02.21.03.25.56;	author cagney;	state Exp;
branches;
next	1.133;

1.133
date	2005.02.15.15.49.10;	author cagney;	state Exp;
branches;
next	1.132;

1.132
date	2005.02.14.18.10.08;	author cagney;	state Exp;
branches;
next	1.131;

1.131
date	2005.02.14.14.37.37;	author cagney;	state Exp;
branches;
next	1.130;

1.130
date	2005.02.12.00.39.19;	author cagney;	state Exp;
branches;
next	1.129;

1.129
date	2005.02.11.18.13.50;	author cagney;	state Exp;
branches;
next	1.128;

1.128
date	2005.02.11.04.05.55;	author cagney;	state Exp;
branches;
next	1.127;

1.127
date	2005.02.02.00.20.04;	author cagney;	state Exp;
branches;
next	1.126;

1.126
date	2005.01.17.16.47.55;	author corinna;	state Exp;
branches;
next	1.125;

1.125
date	2005.01.14.00.48.32;	author msnyder;	state Exp;
branches;
next	1.124;

1.124
date	2004.10.29.20.23.08;	author cagney;	state Exp;
branches;
next	1.123;

1.123
date	2004.09.13.18.26.28;	author cagney;	state Exp;
branches;
next	1.122;

1.122
date	2004.09.11.10.24.47;	author hilfingr;	state Exp;
branches;
next	1.121;

1.121
date	2004.08.03.03.52.01;	author cagney;	state Exp;
branches;
next	1.120;

1.120
date	2004.08.03.00.57.26;	author cagney;	state Exp;
branches;
next	1.119;

1.119
date	2004.07.26.14.53.01;	author cagney;	state Exp;
branches;
next	1.118;

1.118
date	2004.06.29.06.39.06;	author corinna;	state Exp;
branches;
next	1.117;

1.117
date	2004.06.20.18.10.14;	author cagney;	state Exp;
branches;
next	1.116;

1.116
date	2004.06.13.17.05.55;	author cagney;	state Exp;
branches;
next	1.115;

1.115
date	2004.06.12.18.02.30;	author cagney;	state Exp;
branches;
next	1.114;

1.114
date	2004.06.09.20.42.29;	author cagney;	state Exp;
branches;
next	1.113;

1.113
date	2004.05.25.14.58.26;	author cagney;	state Exp;
branches;
next	1.112;

1.112
date	2004.05.24.23.48.25;	author brobecke;	state Exp;
branches;
next	1.111;

1.111
date	2004.05.12.22.19.02;	author cagney;	state Exp;
branches;
next	1.110;

1.110
date	2004.05.12.18.08.38;	author cagney;	state Exp;
branches;
next	1.109;

1.109
date	2004.05.08.23.02.10;	author kettenis;	state Exp;
branches;
next	1.108;

1.108
date	2004.04.28.16.36.25;	author cagney;	state Exp;
branches;
next	1.107;

1.107
date	2004.04.21.23.52.20;	author cagney;	state Exp;
branches;
next	1.106;

1.106
date	2004.03.23.16.45.01;	author drow;	state Exp;
branches;
next	1.105;

1.105
date	2004.02.14.17.26.35;	author cagney;	state Exp;
branches
	1.105.2.1;
next	1.104;

1.104
date	2004.01.26.20.52.10;	author cagney;	state Exp;
branches;
next	1.103;

1.103
date	2004.01.25.21.00.18;	author kettenis;	state Exp;
branches;
next	1.102;

1.102
date	2004.01.25.17.32.45;	author kettenis;	state Exp;
branches;
next	1.101;

1.101
date	2004.01.17.21.56.12;	author drow;	state Exp;
branches;
next	1.100;

1.100
date	2004.01.17.20.17.40;	author cagney;	state Exp;
branches;
next	1.99;

1.99
date	2003.11.22.22.15.23;	author cagney;	state Exp;
branches;
next	1.98;

1.98
date	2003.10.24.17.37.03;	author cagney;	state Exp;
branches;
next	1.97;

1.97
date	2003.10.20.15.38.02;	author cagney;	state Exp;
branches;
next	1.96;

1.96
date	2003.10.02.20.28.29;	author cagney;	state Exp;
branches;
next	1.95;

1.95
date	2003.10.02.04.40.58;	author cagney;	state Exp;
branches;
next	1.94;

1.94
date	2003.10.01.18.48.12;	author cagney;	state Exp;
branches;
next	1.93;

1.93
date	2003.09.30.19.12.18;	author cagney;	state Exp;
branches;
next	1.92;

1.92
date	2003.09.28.16.12.49;	author cagney;	state Exp;
branches;
next	1.91;

1.91
date	2003.09.21.01.26.44;	author cagney;	state Exp;
branches;
next	1.90;

1.90
date	2003.09.18.22.39.21;	author cagney;	state Exp;
branches;
next	1.89;

1.89
date	2003.09.16.18.56.35;	author cagney;	state Exp;
branches;
next	1.88;

1.88
date	2003.09.14.16.32.13;	author cagney;	state Exp;
branches;
next	1.87;

1.87
date	2003.09.13.21.31.33;	author cagney;	state Exp;
branches;
next	1.86;

1.86
date	2003.08.04.20.34.10;	author cagney;	state Exp;
branches;
next	1.85;

1.85
date	2003.07.31.23.41.25;	author msnyder;	state Exp;
branches;
next	1.84;

1.84
date	2003.07.30.20.59.10;	author msnyder;	state Exp;
branches;
next	1.83;

1.83
date	2003.07.07.14.36.58;	author cagney;	state Exp;
branches;
next	1.82;

1.82
date	2003.06.17.20.28.13;	author drow;	state Exp;
branches;
next	1.81;

1.81
date	2003.06.11.19.38.26;	author cagney;	state Exp;
branches;
next	1.80;

1.80
date	2003.05.08.18.46.48;	author cagney;	state Exp;
branches
	1.80.8.1;
next	1.79;

1.79
date	2003.04.21.16.48.39;	author cagney;	state Exp;
branches;
next	1.78;

1.78
date	2003.04.08.19.21.14;	author ezannoni;	state Exp;
branches
	1.78.2.1;
next	1.77;

1.77
date	2003.04.08.18.52.03;	author ezannoni;	state Exp;
branches;
next	1.76;

1.76
date	2003.04.01.14.38.49;	author cagney;	state Exp;
branches
	1.76.2.1;
next	1.75;

1.75
date	2003.03.01.17.03.19;	author cagney;	state Exp;
branches;
next	1.74;

1.74
date	2003.02.20.17.17.23;	author carlton;	state Exp;
branches;
next	1.73;

1.73
date	2003.02.20.00.01.05;	author carlton;	state Exp;
branches;
next	1.72;

1.72
date	2003.02.01.17.28.40;	author cagney;	state Exp;
branches;
next	1.71;

1.71
date	2003.01.18.15.55.52;	author cagney;	state Exp;
branches;
next	1.70;

1.70
date	2003.01.15.00.48.38;	author ezannoni;	state Exp;
branches;
next	1.69;

1.69
date	2002.12.13.16.26.02;	author cagney;	state Exp;
branches;
next	1.68;

1.68
date	2002.12.11.22.34.47;	author cagney;	state Exp;
branches;
next	1.67;

1.67
date	2002.12.09.03.30.44;	author cagney;	state Exp;
branches;
next	1.66;

1.66
date	2002.12.06.07.35.55;	author cagney;	state Exp;
branches;
next	1.65;

1.65
date	2002.12.03.12.25.11;	author schwab;	state Exp;
branches;
next	1.64;

1.64
date	2002.11.29.19.15.14;	author cagney;	state Exp;
branches;
next	1.63;

1.63
date	2002.11.24.19.48.12;	author cagney;	state Exp;
branches;
next	1.62;

1.62
date	2002.11.09.12.44.23;	author kettenis;	state Exp;
branches;
next	1.61;

1.61
date	2002.11.07.01.55.16;	author cagney;	state Exp;
branches;
next	1.60;

1.60
date	2002.11.05.20.52.44;	author cagney;	state Exp;
branches;
next	1.59;

1.59
date	2002.10.26.17.19.27;	author cagney;	state Exp;
branches;
next	1.58;

1.58
date	2002.10.24.21.02.53;	author ezannoni;	state Exp;
branches;
next	1.57;

1.57
date	2002.10.03.02.34.07;	author ezannoni;	state Exp;
branches
	1.57.2.1;
next	1.56;

1.56
date	2002.09.25.20.30.37;	author cagney;	state Exp;
branches;
next	1.55;

1.55
date	2002.09.10.23.28.54;	author cagney;	state Exp;
branches
	1.55.2.1;
next	1.54;

1.54
date	2002.08.21.16.34.09;	author cagney;	state Exp;
branches
	1.54.4.1
	1.54.6.1;
next	1.53;

1.53
date	2002.08.20.16.33.32;	author ezannoni;	state Exp;
branches;
next	1.52;

1.52
date	2002.08.16.00.27.45;	author cagney;	state Exp;
branches;
next	1.51;

1.51
date	2002.08.16.00.13.03;	author cagney;	state Exp;
branches;
next	1.50;

1.50
date	2002.08.15.23.41.20;	author cagney;	state Exp;
branches;
next	1.49;

1.49
date	2002.07.03.20.36.54;	author cagney;	state Exp;
branches;
next	1.48;

1.48
date	2002.06.25.18.38.57;	author cagney;	state Exp;
branches;
next	1.47;

1.47
date	2002.06.11.02.30.59;	author cagney;	state Exp;
branches;
next	1.46;

1.46
date	2002.04.23.03.00.57;	author thorpej;	state Exp;
branches
	1.46.4.1
	1.46.6.1;
next	1.45;

1.45
date	2002.04.21.20.23.33;	author cagney;	state Exp;
branches;
next	1.44;

1.44
date	2002.04.12.18.18.57;	author cagney;	state Exp;
branches;
next	1.43;

1.43
date	2002.03.28.01.35.55;	author msnyder;	state Exp;
branches;
next	1.42;

1.42
date	2002.03.06.06.28.33;	author cagney;	state Exp;
branches;
next	1.41;

1.41
date	2002.02.06.13.00.45;	author rearnsha;	state Exp;
branches;
next	1.40;

1.40
date	2002.02.05.04.37.21;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2002.01.29.03.08.25;	author cagney;	state Exp;
branches;
next	1.38;

1.38
date	2002.01.21.21.57.50;	author jimb;	state Exp;
branches;
next	1.37;

1.37
date	2002.01.17.22.15.17;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2002.01.05.04.30.17;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2001.11.27.03.09.44;	author tromey;	state Exp;
branches;
next	1.34;

1.34
date	2001.11.22.00.23.12;	author tromey;	state Exp;
branches;
next	1.33;

1.33
date	2001.11.10.21.34.56;	author cagney;	state Exp;
branches;
next	1.32;

1.32
date	2001.11.01.16.17.08;	author fnf;	state Exp;
branches;
next	1.31;

1.31
date	2001.10.01.18.11.19;	author cagney;	state Exp;
branches;
next	1.30;

1.30
date	2001.08.02.11.58.29;	author eliz;	state Exp;
branches;
next	1.29;

1.29
date	2001.06.11.16.05.25;	author eliz;	state Exp;
branches
	1.29.2.1
	1.29.4.1;
next	1.28;

1.28
date	2001.05.16.20.05.49;	author msnyder;	state Exp;
branches;
next	1.27;

1.27
date	2001.05.04.04.15.25;	author kevinb;	state Exp;
branches;
next	1.26;

1.26
date	2001.03.27.20.36.23;	author jtc;	state Exp;
branches;
next	1.25;

1.25
date	2001.03.21.16.42.38;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2001.03.13.23.31.13;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2001.03.06.08.21.08;	author kevinb;	state Exp;
branches;
next	1.22;

1.22
date	2001.02.19.11.47.16;	author eliz;	state Exp;
branches;
next	1.21;

1.21
date	2001.02.08.06.03.53;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2001.02.06.20.05.40;	author msnyder;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.31.01.24.01;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2001.01.27.00.43.25;	author fnasser;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.24.16.28.20;	author fnasser;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.18.16.11.22;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.12.09.45.57;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.15.01.01.47;	author kevinb;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.10.19.27.45;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.30.15.32.51;	author taylor;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.02.00.07.13;	author davea;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.01.14.48.00;	author ezannoni;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.30.01.48.25;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.06.20.58.33;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.28.01.12.27;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.22.09.02.23;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.15.05.54.02;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.19.07.51.26;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.30.18.54.28;	author msnyder;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.02.23.15.53.33;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.02;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.306.2.1
date	2012.09.17.07.17.27;	author jkratoch;	state Exp;
branches;
next	;

1.291.2.1
date	2011.12.23.17.55.20;	author kpouget;	state Exp;
branches;
next	1.291.2.2;

1.291.2.2
date	2012.01.06.04.43.16;	author brobecke;	state Exp;
branches;
next	1.291.2.3;

1.291.2.3
date	2012.02.23.08.18.38;	author jkratoch;	state Exp;
branches;
next	;

1.223.2.1
date	2008.11.21.02.31.57;	author shebs;	state Exp;
branches;
next	1.223.2.2;

1.223.2.2
date	2008.11.25.20.45.08;	author palves;	state Exp;
branches;
next	1.223.2.3;

1.223.2.3
date	2008.12.16.22.36.44;	author palves;	state Exp;
branches;
next	1.223.2.4;

1.223.2.4
date	2008.12.16.22.47.02;	author palves;	state Exp;
branches;
next	1.223.2.5;

1.223.2.5
date	2008.12.22.10.56.33;	author teawater;	state Exp;
branches;
next	;

1.212.2.1
date	2008.09.30.23.56.56;	author msnyder;	state Exp;
branches;
next	1.212.2.2;

1.212.2.2
date	2008.10.05.22.20.49;	author msnyder;	state Exp;
branches;
next	1.212.2.3;

1.212.2.3
date	2008.10.06.23.54.32;	author msnyder;	state Exp;
branches;
next	1.212.2.4;

1.212.2.4
date	2008.10.07.00.01.46;	author msnyder;	state Exp;
branches;
next	1.212.2.5;

1.212.2.5
date	2008.10.07.00.23.13;	author msnyder;	state Exp;
branches;
next	1.212.2.6;

1.212.2.6
date	2008.10.07.00.30.01;	author msnyder;	state Exp;
branches;
next	1.212.2.7;

1.212.2.7
date	2008.10.08.00.26.28;	author msnyder;	state Exp;
branches;
next	1.212.2.8;

1.212.2.8
date	2008.10.09.17.45.01;	author msnyder;	state Exp;
branches;
next	1.212.2.9;

1.212.2.9
date	2008.10.21.14.51.21;	author teawater;	state Exp;
branches;
next	;

1.195.2.1
date	2008.07.18.04.23.49;	author msnyder;	state Exp;
branches;
next	1.195.2.2;

1.195.2.2
date	2008.07.20.14.30.11;	author teawater;	state Exp;
branches;
next	1.195.2.3;

1.195.2.3
date	2008.10.06.23.52.33;	author msnyder;	state Exp;
branches;
next	1.195.2.4;

1.195.2.4
date	2008.10.07.00.02.00;	author msnyder;	state Exp;
branches;
next	1.195.2.5;

1.195.2.5
date	2008.10.07.00.22.55;	author msnyder;	state Exp;
branches;
next	1.195.2.6;

1.195.2.6
date	2008.10.07.00.30.20;	author msnyder;	state Exp;
branches;
next	1.195.2.7;

1.195.2.7
date	2008.10.08.00.26.49;	author msnyder;	state Exp;
branches;
next	;

1.183.2.1
date	2008.06.10.02.11.17;	author msnyder;	state Exp;
branches;
next	1.183.2.2;

1.183.2.2
date	2008.06.10.18.08.10;	author msnyder;	state Exp;
branches;
next	;

1.169.6.1
date	2009.09.11.04.45.46;	author amylaar;	state Exp;
branches;
next	;

1.151.2.1
date	2008.06.10.00.13.14;	author msnyder;	state Exp;
branches;
next	;

1.146.2.1
date	2006.11.20.21.58.51;	author cagney;	state Exp;
branches;
next	;

1.144.2.1
date	2006.04.03.00.47.39;	author drow;	state Exp;
branches
	1.144.2.1.2.1;
next	;

1.144.2.1.2.1
date	2006.04.12.18.11.39;	author drow;	state Exp;
branches;
next	;

1.144.4.1
date	2006.03.03.20.46.37;	author drow;	state Exp;
branches;
next	1.144.4.2;

1.144.4.2
date	2006.04.02.20.23.36;	author drow;	state Exp;
branches;
next	1.144.4.3;

1.144.4.3
date	2006.04.02.21.52.39;	author drow;	state Exp;
branches;
next	;

1.144.6.1
date	2006.03.31.21.00.13;	author msnyder;	state Exp;
branches;
next	;

1.144.10.1
date	2006.05.03.00.36.00;	author msnyder;	state Exp;
branches;
next	;

1.144.12.1
date	2006.08.28.06.12.31;	author nickrob;	state Exp;
branches;
next	;

1.140.2.1
date	2006.01.26.18.05.55;	author drow;	state Exp;
branches;
next	1.140.2.2;

1.140.2.2
date	2006.01.26.18.11.40;	author drow;	state Exp;
branches;
next	;

1.140.6.1
date	2006.01.26.18.10.22;	author drow;	state Exp;
branches;
next	1.140.6.2;

1.140.6.2
date	2006.01.26.18.11.52;	author drow;	state Exp;
branches;
next	;

1.105.2.1
date	2004.03.27.17.37.49;	author drow;	state Exp;
branches;
next	1.105.2.2;

1.105.2.2
date	2004.09.16.17.01.09;	author drow;	state Exp;
branches;
next	;

1.80.8.1
date	2003.06.03.20.54.37;	author cagney;	state Exp;
branches;
next	;

1.78.2.1
date	2003.05.04.11.37.43;	author kettenis;	state Exp;
branches;
next	1.78.2.2;

1.78.2.2
date	2003.05.18.09.44.13;	author kettenis;	state Exp;
branches;
next	;

1.76.2.1
date	2003.04.10.21.33.49;	author cagney;	state Exp;
branches;
next	;

1.57.2.1
date	2002.10.26.17.12.08;	author drow;	state Exp;
branches;
next	1.57.2.2;

1.57.2.2
date	2003.12.14.20.27.19;	author drow;	state Exp;
branches;
next	1.57.2.3;

1.57.2.3
date	2004.02.09.19.43.41;	author drow;	state Exp;
branches;
next	;

1.55.2.1
date	2002.09.27.20.03.06;	author carlton;	state Exp;
branches;
next	1.55.2.2;

1.55.2.2
date	2002.10.11.22.22.54;	author carlton;	state Exp;
branches;
next	1.55.2.3;

1.55.2.3
date	2002.10.18.23.42.58;	author carlton;	state Exp;
branches;
next	1.55.2.4;

1.55.2.4
date	2002.10.25.23.49.54;	author carlton;	state Exp;
branches;
next	1.55.2.5;

1.55.2.5
date	2002.11.15.19.18.49;	author carlton;	state Exp;
branches;
next	1.55.2.6;

1.55.2.6
date	2002.12.21.00.17.43;	author carlton;	state Exp;
branches;
next	1.55.2.7;

1.55.2.7
date	2002.12.23.19.38.30;	author carlton;	state Exp;
branches;
next	1.55.2.8;

1.55.2.8
date	2003.02.07.19.17.50;	author carlton;	state Exp;
branches;
next	1.55.2.9;

1.55.2.9
date	2003.03.06.00.56.29;	author carlton;	state Exp;
branches;
next	1.55.2.10;

1.55.2.10
date	2003.04.16.19.56.53;	author carlton;	state Exp;
branches;
next	1.55.2.11;

1.55.2.11
date	2003.05.01.00.46.50;	author carlton;	state Exp;
branches;
next	1.55.2.12;

1.55.2.12
date	2003.05.23.18.40.40;	author carlton;	state Exp;
branches;
next	1.55.2.13;

1.55.2.13
date	2003.06.27.21.49.58;	author carlton;	state Exp;
branches;
next	1.55.2.14;

1.55.2.14
date	2003.08.05.17.13.10;	author carlton;	state Exp;
branches;
next	1.55.2.15;

1.55.2.15
date	2003.09.17.21.28.22;	author carlton;	state Exp;
branches;
next	1.55.2.16;

1.55.2.16
date	2003.11.11.23.50.47;	author carlton;	state Exp;
branches;
next	1.55.2.17;

1.55.2.17
date	2003.12.16.00.00.37;	author carlton;	state Exp;
branches;
next	1.55.2.18;

1.55.2.18
date	2004.01.26.19.11.27;	author carlton;	state Exp;
branches;
next	;

1.54.4.1
date	2002.08.26.19.57.39;	author cagney;	state Exp;
branches;
next	1.54.4.2;

1.54.4.2
date	2002.08.29.03.25.04;	author cagney;	state Exp;
branches;
next	;

1.54.6.1
date	2002.09.10.23.30.45;	author cagney;	state Exp;
branches;
next	1.54.6.2;

1.54.6.2
date	2002.09.25.20.43.21;	author cagney;	state Exp;
branches;
next	;

1.46.4.1
date	2002.05.16.00.54.55;	author cagney;	state Exp;
branches;
next	1.46.4.2;

1.46.4.2
date	2002.05.16.19.08.00;	author cagney;	state Exp;
branches;
next	1.46.4.3;

1.46.4.3
date	2002.05.17.15.06.29;	author cagney;	state Exp;
branches;
next	1.46.4.4;

1.46.4.4
date	2002.06.15.16.42.52;	author cagney;	state Exp;
branches;
next	;

1.46.6.1
date	2002.06.20.01.32.37;	author kseitz;	state Exp;
branches;
next	1.46.6.2;

1.46.6.2
date	2002.07.22.21.46.59;	author kseitz;	state Exp;
branches;
next	1.46.6.3;

1.46.6.3
date	2002.08.30.22.52.44;	author kseitz;	state Exp;
branches;
next	1.46.6.4;

1.46.6.4
date	2002.10.01.00.46.09;	author kseitz;	state Exp;
branches;
next	1.46.6.5;

1.46.6.5
date	2002.11.04.00.17.31;	author ezannoni;	state Exp;
branches;
next	;

1.29.2.1
date	2001.07.06.19.17.00;	author dberlin;	state Exp;
branches;
next	;

1.29.4.1
date	2001.08.02.12.05.57;	author eliz;	state Exp;
branches;
next	;

1.3.2.1
date	2000.04.19.07.51.56;	author cagney;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.02;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.24.30;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.42.36;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.02.16;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.07.05.17.53.13;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.07.07.17.21.44;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.07.07.20.07.09;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.07.19.23.27.58;	author jsm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.08.09.21.33.33;	author jsm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.09.28.21.52.14;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	99.10.05.23.08.22;	author jsm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.11.09.01.23.04;	author jsm;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.12.07.03.56.01;	author jsm;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	99.12.22.21.45.04;	author jsm;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2000.01.11.03.07.19;	author jsm;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	2000.02.01.03.19.05;	author jsm;	state Exp;
branches;
next	1.1.1.17;

1.1.1.17
date	2000.02.03.04.14.31;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.337
log
@Print registers not saved in the frame as "<not saved>" instead of "<optimized out>".

Currently, in some scenarios, GDB prints <optimized out> when printing
outer frame registers.  An <optimized out> register is a confusing
concept.  What this really means is that the register is
call-clobbered, or IOW, not saved by the callee.  This patch makes GDB
say that instead.

Before patch:

 (gdb) p/x $rax $1 = <optimized out>
 (gdb) info registers rax
 rax            <optimized out>

After patch:

 (gdb) p/x $rax
 $1 = <not saved>
 (gdb) info registers rax
 rax            <not saved>

However, if for some reason the debug info describes a variable as
being in such a register (**), we still want to print <optimized out>
when printing the variable.  IOW, <not saved> is reserved for
inspecting registers at the machine level.  The patch uses
lval_register+optimized_out to encode the not saved registers, and
makes it so that optimized out variables always end up in
!lval_register values.

** See <https://sourceware.org/ml/gdb-patches/2012-08/msg00787.html>.
Current/recent enough GCC doesn't mark variables/arguments as being in
call-clobbered registers in the ranges corresponding to function
calls, while older GCCs did.  Newer GCCs will just not say where the
variable is, so GDB will end up realizing the variable is optimized
out.

frame_unwind_got_optimized creates not_lval optimized out registers,
so by default, in most cases, we'll see <optimized out>.

value_of_register is the function eval.c uses for evaluating
OP_REGISTER (again, $pc, etc.), and related bits.  It isn't used for
anything else.  This function makes sure to return lval_register
values.  The patch makes "info registers" and the MI equivalent use it
too.  I think it just makes a lot of sense, as this makes it so that
when printing machine registers ($pc, etc.), we go through a central
function.

We're likely to need a different encoding at some point, if/when we
support partially saved registers.  Even then, I think
value_of_register will still be the spot to tag the intention to print
machine register values differently.

value_from_register however may also return optimized out
lval_register values, so at a couple places where we're computing a
variable's location from a dwarf expression, we convert the resulting
value away from lval_register to a regular optimized out value.

Tested on x86_64 Fedora 17

gdb/
2013-10-02  Pedro Alves  <palves@@redhat.com>

	* cp-valprint.c (cp_print_value_fields): Adjust calls to
	val_print_optimized_out.
	* jv-valprint.c (java_print_value_fields): Likewise.
	* p-valprint.c (pascal_object_print_value_fields): Likewise.
	* dwarf2loc.c (dwarf2_evaluate_loc_desc_full)
	<DWARF_VALUE_REGISTER>: If the register was not saved, return a
	new optimized out value.
	* findvar.c (address_from_register): Likewise.
	* frame.c (put_frame_register): Tweak error string to say the
	register was not saved, rather than optimized out.
	* infcmd.c (default_print_one_register_info): Adjust call to
	val_print_optimized_out.  Use value_of_register instead of
	get_frame_register_value.
	* mi/mi-main.c (output_register): Use value_of_register instead of
	get_frame_register_value.
	* valprint.c (valprint_check_validity): Likewise.
	(val_print_optimized_out): New value parameter.  If the value is
	lval_register, print <not saved> instead.
	(value_check_printable, val_print_scalar_formatted): Adjust calls
	to val_print_optimized_out.
	* valprint.h (val_print_optimized_out): New value parameter.
	* value.c (struct value) <optimized_out>: Extend comment.
	(error_value_optimized_out): New function.
	(require_not_optimized_out): Use it.  Use a different string for
	lval_register values.
	* value.h (error_value_optimized_out): New declaration.
	* NEWS: Mention <not saved>.

gdb/testsuite/
2013-10-02  Pedro Alves  <palves@@redhat.com>

	* gdb.dwarf2/dw2-reg-undefined.exp <pattern_rax_rbx_rcx_print,
	pattern_rax_rbx_rcx_info>: Set to "<not saved>".
	* gdb.mi/mi-reg-undefined.exp (opt_out_pattern): Delete.
	(not_saved_pattern): New.
	Replace use of the former with the latter.

gdb/doc/
2013-10-02  Pedro Alves  <palves@@redhat.com>

	* gdb.texinfo (Registers): Expand description of saved registers
	in frames.  Explain <not saved>.
@
text
@/* Memory-access and commands for "inferior" process, for GDB.

   Copyright (C) 1986-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "arch-utils.h"
#include <signal.h>
#include "gdb_string.h"
#include "symtab.h"
#include "gdbtypes.h"
#include "frame.h"
#include "inferior.h"
#include "environ.h"
#include "value.h"
#include "gdbcmd.h"
#include "symfile.h"
#include "gdbcore.h"
#include "target.h"
#include "language.h"
#include "symfile.h"
#include "objfiles.h"
#include "completer.h"
#include "ui-out.h"
#include "event-top.h"
#include "parser-defs.h"
#include "regcache.h"
#include "reggroups.h"
#include "block.h"
#include "solib.h"
#include <ctype.h>
#include "gdb_assert.h"
#include "observer.h"
#include "target-descriptions.h"
#include "user-regs.h"
#include "exceptions.h"
#include "cli/cli-decode.h"
#include "gdbthread.h"
#include "valprint.h"
#include "inline-frame.h"
#include "tracepoint.h"
#include "inf-loop.h"
#include "continuations.h"
#include "linespec.h"
#include "cli/cli-utils.h"

/* Local functions: */

static void nofp_registers_info (char *, int);

static void print_return_value (struct value *function,
				struct type *value_type);

static void until_next_command (int);

static void until_command (char *, int);

static void path_info (char *, int);

static void path_command (char *, int);

static void unset_command (char *, int);

static void float_info (char *, int);

static void disconnect_command (char *, int);

static void unset_environment_command (char *, int);

static void set_environment_command (char *, int);

static void environment_info (char *, int);

static void program_info (char *, int);

static void finish_command (char *, int);

static void signal_command (char *, int);

static void jump_command (char *, int);

static void step_1 (int, int, char *);
static void step_once (int skip_subroutines, int single_inst,
		       int count, int thread);

static void next_command (char *, int);

static void step_command (char *, int);

static void run_command (char *, int);

static void run_no_args_command (char *args, int from_tty);

static void go_command (char *line_no, int from_tty);

static int strip_bg_char (char **);

void _initialize_infcmd (void);

#define ERROR_NO_INFERIOR \
   if (!target_has_execution) error (_("The program is not being run."));

/* Scratch area where string containing arguments to give to the
   program will be stored by 'set args'.  As soon as anything is
   stored, notice_args_set will move it into per-inferior storage.
   Arguments are separated by spaces.  Empty string (pointer to '\0')
   means no args.  */

static char *inferior_args_scratch;

/* Scratch area where 'set inferior-tty' will store user-provided value.
   We'll immediate copy it into per-inferior storage.  */

static char *inferior_io_terminal_scratch;

/* Pid of our debugged inferior, or 0 if no inferior now.
   Since various parts of infrun.c test this to see whether there is a program
   being debugged it should be nonzero (currently 3 is used) for remote
   debugging.  */

ptid_t inferior_ptid;

/* Address at which inferior stopped.  */

CORE_ADDR stop_pc;

/* Nonzero if stopped due to completion of a stack dummy routine.  */

enum stop_stack_kind stop_stack_dummy;

/* Nonzero if stopped due to a random (unexpected) signal in inferior
   process.  */

int stopped_by_random_signal;


/* Accessor routines.  */

/* Set the io terminal for the current inferior.  Ownership of
   TERMINAL_NAME is not transferred.  */

void 
set_inferior_io_terminal (const char *terminal_name)
{
  xfree (current_inferior ()->terminal);
  current_inferior ()->terminal = terminal_name ? xstrdup (terminal_name) : 0;
}

const char *
get_inferior_io_terminal (void)
{
  return current_inferior ()->terminal;
}

static void
set_inferior_tty_command (char *args, int from_tty,
			  struct cmd_list_element *c)
{
  /* CLI has assigned the user-provided value to inferior_io_terminal_scratch.
     Now route it to current inferior.  */
  set_inferior_io_terminal (inferior_io_terminal_scratch);
}

static void
show_inferior_tty_command (struct ui_file *file, int from_tty,
			   struct cmd_list_element *c, const char *value)
{
  /* Note that we ignore the passed-in value in favor of computing it
     directly.  */
  const char *inferior_io_terminal = get_inferior_io_terminal ();

  if (inferior_io_terminal == NULL)
    inferior_io_terminal = "";
  fprintf_filtered (gdb_stdout,
		    _("Terminal for future runs of program being debugged "
		      "is \"%s\".\n"), inferior_io_terminal);
}

char *
get_inferior_args (void)
{
  if (current_inferior ()->argc != 0)
    {
      char *n;

      n = construct_inferior_arguments (current_inferior ()->argc,
					current_inferior ()->argv);
      set_inferior_args (n);
      xfree (n);
    }

  if (current_inferior ()->args == NULL)
    current_inferior ()->args = xstrdup ("");

  return current_inferior ()->args;
}

/* Set the arguments for the current inferior.  Ownership of
   NEWARGS is not transferred.  */

void
set_inferior_args (char *newargs)
{
  xfree (current_inferior ()->args);
  current_inferior ()->args = newargs ? xstrdup (newargs) : NULL;
  current_inferior ()->argc = 0;
  current_inferior ()->argv = 0;
}

void
set_inferior_args_vector (int argc, char **argv)
{
  current_inferior ()->argc = argc;
  current_inferior ()->argv = argv;
}

/* Notice when `set args' is run.  */
static void
set_args_command (char *args, int from_tty, struct cmd_list_element *c)
{
  /* CLI has assigned the user-provided value to inferior_args_scratch.
     Now route it to current inferior.  */
  set_inferior_args (inferior_args_scratch);
}

/* Notice when `show args' is run.  */
static void
show_args_command (struct ui_file *file, int from_tty,
		   struct cmd_list_element *c, const char *value)
{
  /* Note that we ignore the passed-in value in favor of computing it
     directly.  */
  deprecated_show_value_hack (file, from_tty, c, get_inferior_args ());
}


/* Compute command-line string given argument vector.  This does the
   same shell processing as fork_inferior.  */
char *
construct_inferior_arguments (int argc, char **argv)
{
  char *result;

  if (STARTUP_WITH_SHELL)
    {
#ifdef __MINGW32__
      /* This holds all the characters considered special to the
	 Windows shells.  */
      char *special = "\"!&*|[]{}<>?`~^=;, \t\n";
      const char quote = '"';
#else
      /* This holds all the characters considered special to the
	 typical Unix shells.  We include `^' because the SunOS
	 /bin/sh treats it as a synonym for `|'.  */
      char *special = "\"!#$&*()\\|[]{}<>?'`~^; \t\n";
      const char quote = '\'';
#endif
      int i;
      int length = 0;
      char *out, *cp;

      /* We over-compute the size.  It shouldn't matter.  */
      for (i = 0; i < argc; ++i)
	length += 3 * strlen (argv[i]) + 1 + 2 * (argv[i][0] == '\0');

      result = (char *) xmalloc (length);
      out = result;

      for (i = 0; i < argc; ++i)
	{
	  if (i > 0)
	    *out++ = ' ';

	  /* Need to handle empty arguments specially.  */
	  if (argv[i][0] == '\0')
	    {
	      *out++ = quote;
	      *out++ = quote;
	    }
	  else
	    {
#ifdef __MINGW32__
	      int quoted = 0;

	      if (strpbrk (argv[i], special))
		{
		  quoted = 1;
		  *out++ = quote;
		}
#endif
	      for (cp = argv[i]; *cp; ++cp)
		{
		  if (*cp == '\n')
		    {
		      /* A newline cannot be quoted with a backslash (it
			 just disappears), only by putting it inside
			 quotes.  */
		      *out++ = quote;
		      *out++ = '\n';
		      *out++ = quote;
		    }
		  else
		    {
#ifdef __MINGW32__
		      if (*cp == quote)
#else
		      if (strchr (special, *cp) != NULL)
#endif
			*out++ = '\\';
		      *out++ = *cp;
		    }
		}
#ifdef __MINGW32__
	      if (quoted)
		*out++ = quote;
#endif
	    }
	}
      *out = '\0';
    }
  else
    {
      /* In this case we can't handle arguments that contain spaces,
	 tabs, or newlines -- see breakup_args().  */
      int i;
      int length = 0;

      for (i = 0; i < argc; ++i)
	{
	  char *cp = strchr (argv[i], ' ');
	  if (cp == NULL)
	    cp = strchr (argv[i], '\t');
	  if (cp == NULL)
	    cp = strchr (argv[i], '\n');
	  if (cp != NULL)
	    error (_("can't handle command-line "
		     "argument containing whitespace"));
	  length += strlen (argv[i]) + 1;
	}

      result = (char *) xmalloc (length);
      result[0] = '\0';
      for (i = 0; i < argc; ++i)
	{
	  if (i > 0)
	    strcat (result, " ");
	  strcat (result, argv[i]);
	}
    }

  return result;
}


/* This function detects whether or not a '&' character (indicating
   background execution) has been added as *the last* of the arguments ARGS
   of a command.  If it has, it removes it and returns 1.  Otherwise it
   does nothing and returns 0.  */
static int
strip_bg_char (char **args)
{
  char *p = NULL;

  p = strchr (*args, '&');

  if (p)
    {
      if (p == (*args + strlen (*args) - 1))
	{
	  if (strlen (*args) > 1)
	    {
	      do
		p--;
	      while (*p == ' ' || *p == '\t');
	      *(p + 1) = '\0';
	    }
	  else
	    *args = 0;
	  return 1;
	}
    }
  return 0;
}

/* Common actions to take after creating any sort of inferior, by any
   means (running, attaching, connecting, et cetera).  The target
   should be stopped.  */

void
post_create_inferior (struct target_ops *target, int from_tty)
{
  volatile struct gdb_exception ex;

  /* Be sure we own the terminal in case write operations are performed.  */ 
  target_terminal_ours ();

  /* If the target hasn't taken care of this already, do it now.
     Targets which need to access registers during to_open,
     to_create_inferior, or to_attach should do it earlier; but many
     don't need to.  */
  target_find_description ();

  /* Now that we know the register layout, retrieve current PC.  But
     if the PC is unavailable (e.g., we're opening a core file with
     missing registers info), ignore it.  */
  stop_pc = 0;
  TRY_CATCH (ex, RETURN_MASK_ERROR)
    {
      stop_pc = regcache_read_pc (get_current_regcache ());
    }
  if (ex.reason < 0 && ex.error != NOT_AVAILABLE_ERROR)
    throw_exception (ex);

  if (exec_bfd)
    {
      const unsigned solib_add_generation
	= current_program_space->solib_add_generation;

      /* Create the hooks to handle shared library load and unload
	 events.  */
      solib_create_inferior_hook (from_tty);

      if (current_program_space->solib_add_generation == solib_add_generation)
	{
	  /* The platform-specific hook should load initial shared libraries,
	     but didn't.  FROM_TTY will be incorrectly 0 but such solib
	     targets should be fixed anyway.  Call it only after the solib
	     target has been initialized by solib_create_inferior_hook.  */

	  if (info_verbose)
	    warning (_("platform-specific solib_create_inferior_hook did "
		       "not load initial shared libraries."));

	  /* If the solist is global across processes, there's no need to
	     refetch it here.  */
	  if (!gdbarch_has_global_solist (target_gdbarch ()))
	    solib_add (NULL, 0, target, auto_solib_add);
	}
    }

  /* If the user sets watchpoints before execution having started,
     then she gets software watchpoints, because GDB can't know which
     target will end up being pushed, or if it supports hardware
     watchpoints or not.  breakpoint_re_set takes care of promoting
     watchpoints to hardware watchpoints if possible, however, if this
     new inferior doesn't load shared libraries or we don't pull in
     symbols from any other source on this target/arch,
     breakpoint_re_set is never called.  Call it now so that software
     watchpoints get a chance to be promoted to hardware watchpoints
     if the now pushed target supports hardware watchpoints.  */
  breakpoint_re_set ();

  observer_notify_inferior_created (target, from_tty);
}

/* Kill the inferior if already running.  This function is designed
   to be called when we are about to start the execution of the program
   from the beginning.  Ask the user to confirm that he wants to restart
   the program being debugged when FROM_TTY is non-null.  */

static void
kill_if_already_running (int from_tty)
{
  if (! ptid_equal (inferior_ptid, null_ptid) && target_has_execution)
    {
      /* Bail out before killing the program if we will not be able to
	 restart it.  */
      target_require_runnable ();

      if (from_tty
	  && !query (_("The program being debugged has been started already.\n\
Start it from the beginning? ")))
	error (_("Program not restarted."));
      target_kill ();
    }
}

/* Implement the "run" command.  If TBREAK_AT_MAIN is set, then insert
   a temporary breakpoint at the begining of the main program before
   running the program.  */

static void
run_command_1 (char *args, int from_tty, int tbreak_at_main)
{
  char *exec_file;
  struct cleanup *old_chain;
  ptid_t ptid;
  struct ui_out *uiout = current_uiout;

  dont_repeat ();

  kill_if_already_running (from_tty);

  init_wait_for_inferior ();
  clear_breakpoint_hit_counts ();

  /* Clean up any leftovers from other runs.  Some other things from
     this function should probably be moved into target_pre_inferior.  */
  target_pre_inferior (from_tty);

  /* The comment here used to read, "The exec file is re-read every
     time we do a generic_mourn_inferior, so we just have to worry
     about the symbol file."  The `generic_mourn_inferior' function
     gets called whenever the program exits.  However, suppose the
     program exits, and *then* the executable file changes?  We need
     to check again here.  Since reopen_exec_file doesn't do anything
     if the timestamp hasn't changed, I don't see the harm.  */
  reopen_exec_file ();
  reread_symbols ();

  /* Insert the temporary breakpoint if a location was specified.  */
  if (tbreak_at_main)
    tbreak_command (main_name (), 0);

  exec_file = (char *) get_exec_file (0);

  if (non_stop && !target_supports_non_stop ())
    error (_("The target does not support running in non-stop mode."));

  /* We keep symbols from add-symbol-file, on the grounds that the
     user might want to add some symbols before running the program
     (right?).  But sometimes (dynamic loading where the user manually
     introduces the new symbols with add-symbol-file), the code which
     the symbols describe does not persist between runs.  Currently
     the user has to manually nuke all symbols between runs if they
     want them to go away (PR 2207).  This is probably reasonable.  */

  if (!args)
    {
      if (target_can_async_p ())
	async_disable_stdin ();
    }
  else
    {
      int async_exec = strip_bg_char (&args);

      /* If we get a request for running in the bg but the target
         doesn't support it, error out.  */
      if (async_exec && !target_can_async_p ())
	error (_("Asynchronous execution not supported on this target."));

      /* If we don't get a request of running in the bg, then we need
         to simulate synchronous (fg) execution.  */
      if (!async_exec && target_can_async_p ())
	{
	  /* Simulate synchronous execution.  */
	  async_disable_stdin ();
	}

      /* If there were other args, beside '&', process them.  */
      if (args)
	set_inferior_args (args);
    }

  if (from_tty)
    {
      ui_out_field_string (uiout, NULL, "Starting program");
      ui_out_text (uiout, ": ");
      if (exec_file)
	ui_out_field_string (uiout, "execfile", exec_file);
      ui_out_spaces (uiout, 1);
      /* We call get_inferior_args() because we might need to compute
	 the value now.  */
      ui_out_field_string (uiout, "infargs", get_inferior_args ());
      ui_out_text (uiout, "\n");
      ui_out_flush (uiout);
    }

  /* We call get_inferior_args() because we might need to compute
     the value now.  */
  target_create_inferior (exec_file, get_inferior_args (),
			  environ_vector (current_inferior ()->environment),
			  from_tty);

  /* We're starting off a new process.  When we get out of here, in
     non-stop mode, finish the state of all threads of that process,
     but leave other threads alone, as they may be stopped in internal
     events --- the frontend shouldn't see them as stopped.  In
     all-stop, always finish the state of all threads, as we may be
     resuming more than just the new process.  */
  if (non_stop)
    ptid = pid_to_ptid (ptid_get_pid (inferior_ptid));
  else
    ptid = minus_one_ptid;
  old_chain = make_cleanup (finish_thread_state_cleanup, &ptid);

  /* Pass zero for FROM_TTY, because at this point the "run" command
     has done its thing; now we are setting up the running program.  */
  post_create_inferior (&current_target, 0);

  /* Start the target running.  Do not use -1 continuation as it would skip
     breakpoint right at the entry point.  */
  proceed (regcache_read_pc (get_current_regcache ()), GDB_SIGNAL_0, 0);

  /* Since there was no error, there's no need to finish the thread
     states here.  */
  discard_cleanups (old_chain);
}

static void
run_command (char *args, int from_tty)
{
  run_command_1 (args, from_tty, 0);
}

static void
run_no_args_command (char *args, int from_tty)
{
  set_inferior_args ("");
}


/* Start the execution of the program up until the beginning of the main
   program.  */

static void
start_command (char *args, int from_tty)
{
  /* Some languages such as Ada need to search inside the program
     minimal symbols for the location where to put the temporary
     breakpoint before starting.  */
  if (!have_minimal_symbols ())
    error (_("No symbol table loaded.  Use the \"file\" command."));

  /* Run the program until reaching the main procedure...  */
  run_command_1 (args, from_tty, 1);
} 

static int
proceed_thread_callback (struct thread_info *thread, void *arg)
{
  /* We go through all threads individually instead of compressing
     into a single target `resume_all' request, because some threads
     may be stopped in internal breakpoints/events, or stopped waiting
     for its turn in the displaced stepping queue (that is, they are
     running && !executing).  The target side has no idea about why
     the thread is stopped, so a `resume_all' command would resume too
     much.  If/when GDB gains a way to tell the target `hold this
     thread stopped until I say otherwise', then we can optimize
     this.  */
  if (!is_stopped (thread->ptid))
    return 0;

  switch_to_thread (thread->ptid);
  clear_proceed_status ();
  proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 0);
  return 0;
}

static void
ensure_valid_thread (void)
{
  if (ptid_equal (inferior_ptid, null_ptid)
      || is_exited (inferior_ptid))
    error (_("Cannot execute this command without a live selected thread."));
}

/* If the user is looking at trace frames, any resumption of execution
   is likely to mix up recorded and live target data.  So simply
   disallow those commands.  */

static void
ensure_not_tfind_mode (void)
{
  if (get_traceframe_number () >= 0)
    error (_("Cannot execute this command while looking at trace frames."));
}

/* Throw an error indicating the current thread is running.  */

static void
error_is_running (void)
{
  error (_("Cannot execute this command while "
	   "the selected thread is running."));
}

/* Calls error_is_running if the current thread is running.  */

static void
ensure_not_running (void)
{
  if (is_running (inferior_ptid))
    error_is_running ();
}

void
continue_1 (int all_threads)
{
  ERROR_NO_INFERIOR;
  ensure_not_tfind_mode ();

  if (non_stop && all_threads)
    {
      /* Don't error out if the current thread is running, because
	 there may be other stopped threads.  */
      struct cleanup *old_chain;

      /* Backup current thread and selected frame.  */
      old_chain = make_cleanup_restore_current_thread ();

      iterate_over_threads (proceed_thread_callback, NULL);

      /* Restore selected ptid.  */
      do_cleanups (old_chain);
    }
  else
    {
      ensure_valid_thread ();
      ensure_not_running ();
      clear_proceed_status ();
      proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 0);
    }
}

/* continue [-a] [proceed-count] [&]  */
static void
continue_command (char *args, int from_tty)
{
  int async_exec = 0;
  int all_threads = 0;
  ERROR_NO_INFERIOR;

  /* Find out whether we must run in the background.  */
  if (args != NULL)
    async_exec = strip_bg_char (&args);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (async_exec && !target_can_async_p ())
    error (_("Asynchronous execution not supported on this target."));

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  if (args != NULL)
    {
      if (strncmp (args, "-a", sizeof ("-a") - 1) == 0)
	{
	  all_threads = 1;
	  args += sizeof ("-a") - 1;
	  if (*args == '\0')
	    args = NULL;
	}
    }

  if (!non_stop && all_threads)
    error (_("`-a' is meaningless in all-stop mode."));

  if (args != NULL && all_threads)
    error (_("Can't resume all threads and specify "
	     "proceed count simultaneously."));

  /* If we have an argument left, set proceed count of breakpoint we
     stopped at.  */
  if (args != NULL)
    {
      bpstat bs = NULL;
      int num, stat;
      int stopped = 0;
      struct thread_info *tp;

      if (non_stop)
	tp = find_thread_ptid (inferior_ptid);
      else
	{
	  ptid_t last_ptid;
	  struct target_waitstatus ws;

	  get_last_target_status (&last_ptid, &ws);
	  tp = find_thread_ptid (last_ptid);
	}
      if (tp != NULL)
	bs = tp->control.stop_bpstat;

      while ((stat = bpstat_num (&bs, &num)) != 0)
	if (stat > 0)
	  {
	    set_ignore_count (num,
			      parse_and_eval_long (args) - 1,
			      from_tty);
	    /* set_ignore_count prints a message ending with a period.
	       So print two spaces before "Continuing.".  */
	    if (from_tty)
	      printf_filtered ("  ");
	    stopped = 1;
	  }

      if (!stopped && from_tty)
	{
	  printf_filtered
	    ("Not stopped at any breakpoint; argument ignored.\n");
	}
    }

  if (from_tty)
    printf_filtered (_("Continuing.\n"));

  continue_1 (all_threads);
}

/* Record the starting point of a "step" or "next" command.  */

static void
set_step_frame (void)
{
  struct symtab_and_line sal;

  find_frame_sal (get_current_frame (), &sal);
  set_step_info (get_current_frame (), sal);
}

/* Step until outside of current statement.  */

static void
step_command (char *count_string, int from_tty)
{
  step_1 (0, 0, count_string);
}

/* Likewise, but skip over subroutine calls as if single instructions.  */

static void
next_command (char *count_string, int from_tty)
{
  step_1 (1, 0, count_string);
}

/* Likewise, but step only one instruction.  */

static void
stepi_command (char *count_string, int from_tty)
{
  step_1 (0, 1, count_string);
}

static void
nexti_command (char *count_string, int from_tty)
{
  step_1 (1, 1, count_string);
}

void
delete_longjmp_breakpoint_cleanup (void *arg)
{
  int thread = * (int *) arg;
  delete_longjmp_breakpoint (thread);
}

static void
step_1 (int skip_subroutines, int single_inst, char *count_string)
{
  int count = 1;
  struct cleanup *cleanups = make_cleanup (null_cleanup, NULL);
  int async_exec = 0;
  int thread = -1;

  ERROR_NO_INFERIOR;
  ensure_not_tfind_mode ();
  ensure_valid_thread ();
  ensure_not_running ();

  if (count_string)
    async_exec = strip_bg_char (&count_string);

  /* If we get a request for running in the bg but the target
     doesn't support it, error out.  */
  if (async_exec && !target_can_async_p ())
    error (_("Asynchronous execution not supported on this target."));

  /* If we don't get a request of running in the bg, then we need
     to simulate synchronous (fg) execution.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  count = count_string ? parse_and_eval_long (count_string) : 1;

  if (!single_inst || skip_subroutines)		/* Leave si command alone.  */
    {
      struct thread_info *tp = inferior_thread ();

      if (in_thread_list (inferior_ptid))
 	thread = pid_to_thread_id (inferior_ptid);

      set_longjmp_breakpoint (tp, get_frame_id (get_current_frame ()));

      make_cleanup (delete_longjmp_breakpoint_cleanup, &thread);
    }

  /* In synchronous case, all is well; each step_once call will step once.  */
  if (!target_can_async_p ())
    {
      for (; count > 0; count--)
	{
	  step_once (skip_subroutines, single_inst, count, thread);

	  if (!target_has_execution)
	    break;
	  else
	    {
	      struct thread_info *tp = inferior_thread ();

	      if (!tp->control.stop_step || !tp->step_multi)
		{
		  /* If we stopped for some reason that is not stepping
		     there are no further steps to make.  */
		  tp->step_multi = 0;
		  break;
		}
	    }
	}

      do_cleanups (cleanups);
    }
  else
    {
      /* In the case of an asynchronous target things get complicated;
	 do only one step for now, before returning control to the
	 event loop.  Let the continuation figure out how many other
	 steps we need to do, and handle them one at the time, through
	 step_once.  */
      step_once (skip_subroutines, single_inst, count, thread);

      /* We are running, and the continuation is installed.  It will
	 disable the longjmp breakpoint as appropriate.  */
      discard_cleanups (cleanups);
    }
}

struct step_1_continuation_args
{
  int count;
  int skip_subroutines;
  int single_inst;
  int thread;
};

/* Called after we are done with one step operation, to check whether
   we need to step again, before we print the prompt and return control
   to the user.  If count is > 1, we will need to do one more call to
   proceed(), via step_once().  Basically it is like step_once and
   step_1_continuation are co-recursive.  */
static void
step_1_continuation (void *args, int err)
{
  struct step_1_continuation_args *a = args;

  if (target_has_execution)
    {
      struct thread_info *tp;

      tp = inferior_thread ();
      if (!err
	  && tp->step_multi && tp->control.stop_step)
	{
	  /* There are more steps to make, and we did stop due to
	     ending a stepping range.  Do another step.  */
	  step_once (a->skip_subroutines, a->single_inst,
		     a->count - 1, a->thread);
	  return;
	}
      tp->step_multi = 0;
    }

  /* We either hit an error, or stopped for some reason that is
     not stepping, or there are no further steps to make.
     Cleanup.  */
  if (!a->single_inst || a->skip_subroutines)
    delete_longjmp_breakpoint (a->thread);
}

/* Do just one step operation.  This is useful to implement the 'step
   n' kind of commands.  In case of asynchronous targets, we will have
   to set up a continuation to be done after the target stops (after
   this one step).  For synch targets, the caller handles further
   stepping.  */

static void
step_once (int skip_subroutines, int single_inst, int count, int thread)
{
  struct frame_info *frame = get_current_frame ();

  if (count > 0)
    {
      /* Don't assume THREAD is a valid thread id.  It is set to -1 if
	 the longjmp breakpoint was not required.  Use the
	 INFERIOR_PTID thread instead, which is the same thread when
	 THREAD is set.  */
      struct thread_info *tp = inferior_thread ();

      clear_proceed_status ();
      set_step_frame ();

      if (!single_inst)
	{
	  CORE_ADDR pc;

	  /* Step at an inlined function behaves like "down".  */
	  if (!skip_subroutines
	      && inline_skipped_frames (inferior_ptid))
	    {
	      ptid_t resume_ptid;

	      /* Pretend that we've ran.  */
	      resume_ptid = user_visible_resume_ptid (1);
	      set_running (resume_ptid, 1);

	      step_into_inline_frame (inferior_ptid);
	      if (count > 1)
		step_once (skip_subroutines, single_inst, count - 1, thread);
	      else
		{
		  /* Pretend that we've stopped.  */
		  normal_stop ();

		  if (target_can_async_p ())
		    inferior_event_handler (INF_EXEC_COMPLETE, NULL);
		}
	      return;
	    }

	  pc = get_frame_pc (frame);
	  find_pc_line_pc_range (pc,
				 &tp->control.step_range_start,
				 &tp->control.step_range_end);

	  tp->control.may_range_step = 1;

	  /* If we have no line info, switch to stepi mode.  */
	  if (tp->control.step_range_end == 0 && step_stop_if_no_debug)
	    {
	      tp->control.step_range_start = tp->control.step_range_end = 1;
	      tp->control.may_range_step = 0;
	    }
	  else if (tp->control.step_range_end == 0)
	    {
	      const char *name;

	      if (find_pc_partial_function (pc, &name,
					    &tp->control.step_range_start,
					    &tp->control.step_range_end) == 0)
		error (_("Cannot find bounds of current function"));

	      target_terminal_ours ();
	      printf_filtered (_("Single stepping until exit from function %s,"
				 "\nwhich has no line number information.\n"),
			       name);
	    }
	}
      else
	{
	  /* Say we are stepping, but stop after one insn whatever it does.  */
	  tp->control.step_range_start = tp->control.step_range_end = 1;
	  if (!skip_subroutines)
	    /* It is stepi.
	       Don't step over function calls, not even to functions lacking
	       line numbers.  */
	    tp->control.step_over_calls = STEP_OVER_NONE;
	}

      if (skip_subroutines)
	tp->control.step_over_calls = STEP_OVER_ALL;

      tp->step_multi = (count > 1);
      proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 1);

      /* For async targets, register a continuation to do any
	 additional steps.  For sync targets, the caller will handle
	 further stepping.  */
      if (target_can_async_p ())
	{
	  struct step_1_continuation_args *args;

	  args = xmalloc (sizeof (*args));
	  args->skip_subroutines = skip_subroutines;
	  args->single_inst = single_inst;
	  args->count = count;
	  args->thread = thread;

	  add_intermediate_continuation (tp, step_1_continuation, args, xfree);
	}
    }
}


/* Continue program at specified address.  */

static void
jump_command (char *arg, int from_tty)
{
  struct gdbarch *gdbarch = get_current_arch ();
  CORE_ADDR addr;
  struct symtabs_and_lines sals;
  struct symtab_and_line sal;
  struct symbol *fn;
  struct symbol *sfn;
  int async_exec = 0;

  ERROR_NO_INFERIOR;
  ensure_not_tfind_mode ();
  ensure_valid_thread ();
  ensure_not_running ();

  /* Find out whether we must run in the background.  */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (async_exec && !target_can_async_p ())
    error (_("Asynchronous execution not supported on this target."));

  if (!arg)
    error_no_arg (_("starting address"));

  sals = decode_line_with_last_displayed (arg, DECODE_LINE_FUNFIRSTLINE);
  if (sals.nelts != 1)
    {
      error (_("Unreasonable jump request"));
    }

  sal = sals.sals[0];
  xfree (sals.sals);

  if (sal.symtab == 0 && sal.pc == 0)
    error (_("No source file has been specified."));

  resolve_sal_pc (&sal);	/* May error out.  */

  /* See if we are trying to jump to another function.  */
  fn = get_frame_function (get_current_frame ());
  sfn = find_pc_function (sal.pc);
  if (fn != NULL && sfn != fn)
    {
      if (!query (_("Line %d is not in `%s'.  Jump anyway? "), sal.line,
		  SYMBOL_PRINT_NAME (fn)))
	{
	  error (_("Not confirmed."));
	  /* NOTREACHED */
	}
    }

  if (sfn != NULL)
    {
      fixup_symbol_section (sfn, 0);
      if (section_is_overlay (SYMBOL_OBJ_SECTION (SYMBOL_OBJFILE (sfn), sfn)) &&
	  !section_is_mapped (SYMBOL_OBJ_SECTION (SYMBOL_OBJFILE (sfn), sfn)))
	{
	  if (!query (_("WARNING!!!  Destination is in "
			"unmapped overlay!  Jump anyway? ")))
	    {
	      error (_("Not confirmed."));
	      /* NOTREACHED */
	    }
	}
    }

  addr = sal.pc;

  if (from_tty)
    {
      printf_filtered (_("Continuing at "));
      fputs_filtered (paddress (gdbarch, addr), gdb_stdout);
      printf_filtered (".\n");
    }

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  clear_proceed_status ();
  proceed (addr, GDB_SIGNAL_0, 0);
}


/* Go to line or address in current procedure.  */
static void
go_command (char *line_no, int from_tty)
{
  if (line_no == (char *) NULL || !*line_no)
    printf_filtered (_("Usage: go <location>\n"));
  else
    {
      tbreak_command (line_no, from_tty);
      jump_command (line_no, from_tty);
    }
}


/* Continue program giving it specified signal.  */

static void
signal_command (char *signum_exp, int from_tty)
{
  enum gdb_signal oursig;
  int async_exec = 0;

  dont_repeat ();		/* Too dangerous.  */
  ERROR_NO_INFERIOR;
  ensure_not_tfind_mode ();
  ensure_valid_thread ();
  ensure_not_running ();

  /* Find out whether we must run in the background.  */
  if (signum_exp != NULL)
    async_exec = strip_bg_char (&signum_exp);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (async_exec && !target_can_async_p ())
    error (_("Asynchronous execution not supported on this target."));

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  if (!signum_exp)
    error_no_arg (_("signal number"));

  /* It would be even slicker to make signal names be valid expressions,
     (the type could be "enum $signal" or some such), then the user could
     assign them to convenience variables.  */
  oursig = gdb_signal_from_name (signum_exp);

  if (oursig == GDB_SIGNAL_UNKNOWN)
    {
      /* No, try numeric.  */
      int num = parse_and_eval_long (signum_exp);

      if (num == 0)
	oursig = GDB_SIGNAL_0;
      else
	oursig = gdb_signal_from_command (num);
    }

  if (from_tty)
    {
      if (oursig == GDB_SIGNAL_0)
	printf_filtered (_("Continuing with no signal.\n"));
      else
	printf_filtered (_("Continuing with signal %s.\n"),
			 gdb_signal_to_name (oursig));
    }

  clear_proceed_status ();
  proceed ((CORE_ADDR) -1, oursig, 0);
}

/* Continuation args to be passed to the "until" command
   continuation.  */
struct until_next_continuation_args
{
  /* The thread that was current when the command was executed.  */
  int thread;
};

/* A continuation callback for until_next_command.  */

static void
until_next_continuation (void *arg, int err)
{
  struct until_next_continuation_args *a = arg;

  delete_longjmp_breakpoint (a->thread);
}

/* Proceed until we reach a different source line with pc greater than
   our current one or exit the function.  We skip calls in both cases.

   Note that eventually this command should probably be changed so
   that only source lines are printed out when we hit the breakpoint
   we set.  This may involve changes to wait_for_inferior and the
   proceed status code.  */

static void
until_next_command (int from_tty)
{
  struct frame_info *frame;
  CORE_ADDR pc;
  struct symbol *func;
  struct symtab_and_line sal;
  struct thread_info *tp = inferior_thread ();
  int thread = tp->num;
  struct cleanup *old_chain;

  clear_proceed_status ();
  set_step_frame ();

  frame = get_current_frame ();

  /* Step until either exited from this function or greater
     than the current line (if in symbolic section) or pc (if
     not).  */

  pc = get_frame_pc (frame);
  func = find_pc_function (pc);

  if (!func)
    {
      struct bound_minimal_symbol msymbol = lookup_minimal_symbol_by_pc (pc);

      if (msymbol.minsym == NULL)
	error (_("Execution is not within a known function."));

      tp->control.step_range_start = SYMBOL_VALUE_ADDRESS (msymbol.minsym);
      tp->control.step_range_end = pc;
    }
  else
    {
      sal = find_pc_line (pc, 0);

      tp->control.step_range_start = BLOCK_START (SYMBOL_BLOCK_VALUE (func));
      tp->control.step_range_end = sal.end;
    }
  tp->control.may_range_step = 1;

  tp->control.step_over_calls = STEP_OVER_ALL;

  tp->step_multi = 0;		/* Only one call to proceed */

  set_longjmp_breakpoint (tp, get_frame_id (frame));
  old_chain = make_cleanup (delete_longjmp_breakpoint_cleanup, &thread);

  proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 1);

  if (target_can_async_p () && is_running (inferior_ptid))
    {
      struct until_next_continuation_args *cont_args;

      discard_cleanups (old_chain);
      cont_args = XNEW (struct until_next_continuation_args);
      cont_args->thread = inferior_thread ()->num;

      add_continuation (tp, until_next_continuation, cont_args, xfree);
    }
  else
    do_cleanups (old_chain);
}

static void
until_command (char *arg, int from_tty)
{
  int async_exec = 0;

  ERROR_NO_INFERIOR;
  ensure_not_tfind_mode ();
  ensure_valid_thread ();
  ensure_not_running ();

  /* Find out whether we must run in the background.  */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (async_exec && !target_can_async_p ())
    error (_("Asynchronous execution not supported on this target."));

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  if (arg)
    until_break_command (arg, from_tty, 0);
  else
    until_next_command (from_tty);
}

static void
advance_command (char *arg, int from_tty)
{
  int async_exec = 0;

  ERROR_NO_INFERIOR;
  ensure_not_tfind_mode ();
  ensure_valid_thread ();
  ensure_not_running ();

  if (arg == NULL)
    error_no_arg (_("a location"));

  /* Find out whether we must run in the background.  */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (async_exec && !target_can_async_p ())
    error (_("Asynchronous execution not supported on this target."));

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  until_break_command (arg, from_tty, 1);
}

/* Return the value of the result of a function at the end of a 'finish'
   command/BP.  */

struct value *
get_return_value (struct value *function, struct type *value_type)
{
  struct regcache *stop_regs = stop_registers;
  struct gdbarch *gdbarch;
  struct value *value;
  struct cleanup *cleanup = make_cleanup (null_cleanup, NULL);

  /* If stop_registers were not saved, use the current registers.  */
  if (!stop_regs)
    {
      stop_regs = regcache_dup (get_current_regcache ());
      make_cleanup_regcache_xfree (stop_regs);
    }

  gdbarch = get_regcache_arch (stop_regs);

  CHECK_TYPEDEF (value_type);
  gdb_assert (TYPE_CODE (value_type) != TYPE_CODE_VOID);

  /* FIXME: 2003-09-27: When returning from a nested inferior function
     call, it's possible (with no help from the architecture vector)
     to locate and return/print a "struct return" value.  This is just
     a more complicated case of what is already being done in the
     inferior function call code.  In fact, when inferior function
     calls are made async, this will likely be made the norm.  */

  switch (gdbarch_return_value (gdbarch, function, value_type,
  				NULL, NULL, NULL))
    {
    case RETURN_VALUE_REGISTER_CONVENTION:
    case RETURN_VALUE_ABI_RETURNS_ADDRESS:
    case RETURN_VALUE_ABI_PRESERVES_ADDRESS:
      value = allocate_value (value_type);
      gdbarch_return_value (gdbarch, function, value_type, stop_regs,
			    value_contents_raw (value), NULL);
      break;
    case RETURN_VALUE_STRUCT_CONVENTION:
      value = NULL;
      break;
    default:
      internal_error (__FILE__, __LINE__, _("bad switch"));
    }

  do_cleanups (cleanup);

  return value;
}

/* Print the result of a function at the end of a 'finish' command.  */

static void
print_return_value (struct value *function, struct type *value_type)
{
  struct value *value = get_return_value (function, value_type);
  struct ui_out *uiout = current_uiout;

  if (value)
    {
      struct value_print_options opts;
      struct ui_file *stb;
      struct cleanup *old_chain;

      /* Print it.  */
      stb = mem_fileopen ();
      old_chain = make_cleanup_ui_file_delete (stb);
      ui_out_text (uiout, "Value returned is ");
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d",
			record_latest_value (value));
      ui_out_text (uiout, " = ");
      get_no_prettyformat_print_options (&opts);
      value_print (value, stb, &opts);
      ui_out_field_stream (uiout, "return-value", stb);
      ui_out_text (uiout, "\n");
      do_cleanups (old_chain);
    }
  else
    {
      ui_out_text (uiout, "Value returned has type: ");
      ui_out_field_string (uiout, "return-type", TYPE_NAME (value_type));
      ui_out_text (uiout, ".");
      ui_out_text (uiout, " Cannot determine contents\n");
    }
}

/* Stuff that needs to be done by the finish command after the target
   has stopped.  In asynchronous mode, we wait for the target to stop
   in the call to poll or select in the event loop, so it is
   impossible to do all the stuff as part of the finish_command
   function itself.  The only chance we have to complete this command
   is in fetch_inferior_event, which is called by the event loop as
   soon as it detects that the target has stopped.  */

struct finish_command_continuation_args
{
  /* The thread that as current when the command was executed.  */
  int thread;
  struct breakpoint *breakpoint;
  struct symbol *function;
};

static void
finish_command_continuation (void *arg, int err)
{
  struct finish_command_continuation_args *a = arg;

  if (!err)
    {
      struct thread_info *tp = NULL;
      bpstat bs = NULL;

      if (!ptid_equal (inferior_ptid, null_ptid)
	  && target_has_execution
	  && is_stopped (inferior_ptid))
	{
	  tp = inferior_thread ();
	  bs = tp->control.stop_bpstat;
	}

      if (bpstat_find_breakpoint (bs, a->breakpoint) != NULL
	  && a->function != NULL)
	{
	  struct type *value_type;

	  value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (a->function));
	  if (!value_type)
	    internal_error (__FILE__, __LINE__,
			    _("finish_command: function has no target type"));

	  if (TYPE_CODE (value_type) != TYPE_CODE_VOID)
	    {
	      volatile struct gdb_exception ex;
	      struct value *func;

	      func = read_var_value (a->function, get_current_frame ());
	      TRY_CATCH (ex, RETURN_MASK_ALL)
		{
		  /* print_return_value can throw an exception in some
		     circumstances.  We need to catch this so that we still
		     delete the breakpoint.  */
		  print_return_value (func, value_type);
		}
	      if (ex.reason < 0)
		exception_print (gdb_stdout, ex);
	    }
	}

      /* We suppress normal call of normal_stop observer and do it
	 here so that the *stopped notification includes the return
	 value.  */
      if (bs != NULL && tp->control.proceed_to_finish)
	observer_notify_normal_stop (bs, 1 /* print frame */);
    }

  delete_breakpoint (a->breakpoint);
  delete_longjmp_breakpoint (a->thread);
}

static void
finish_command_continuation_free_arg (void *arg)
{
  xfree (arg);
}

/* finish_backward -- helper function for finish_command.  */

static void
finish_backward (struct symbol *function)
{
  struct symtab_and_line sal;
  struct thread_info *tp = inferior_thread ();
  CORE_ADDR pc;
  CORE_ADDR func_addr;

  pc = get_frame_pc (get_current_frame ());

  if (find_pc_partial_function (pc, NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__,
		    _("Finish: couldn't find function."));

  sal = find_pc_line (func_addr, 0);

  tp->control.proceed_to_finish = 1;
  /* Special case: if we're sitting at the function entry point,
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != pc)
    {
      struct frame_info *frame = get_selected_frame (NULL);
      struct gdbarch *gdbarch = get_frame_arch (frame);
      struct symtab_and_line sr_sal;

      /* Set a step-resume at the function's entry point.  Once that's
	 hit, we'll do one more step backwards.  */
      init_sal (&sr_sal);
      sr_sal.pc = sal.pc;
      sr_sal.pspace = get_frame_program_space (frame);
      insert_step_resume_breakpoint_at_sal (gdbarch,
					    sr_sal, null_frame_id);

      proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 0);
    }
  else
    {
      /* We're almost there -- we just need to back up by one more
	 single-step.  */
      tp->control.step_range_start = tp->control.step_range_end = 1;
      proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 1);
    }
}

/* finish_forward -- helper function for finish_command.  */

static void
finish_forward (struct symbol *function, struct frame_info *frame)
{
  struct frame_id frame_id = get_frame_id (frame);
  struct gdbarch *gdbarch = get_frame_arch (frame);
  struct symtab_and_line sal;
  struct thread_info *tp = inferior_thread ();
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  struct finish_command_continuation_args *cargs;
  int thread = tp->num;

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (gdbarch, sal,
					 get_stack_frame_id (frame),
                                         bp_finish);

  /* set_momentary_breakpoint invalidates FRAME.  */
  frame = NULL;

  old_chain = make_cleanup_delete_breakpoint (breakpoint);

  set_longjmp_breakpoint (tp, frame_id);
  make_cleanup (delete_longjmp_breakpoint_cleanup, &thread);

  /* We want stop_registers, please...  */
  tp->control.proceed_to_finish = 1;
  cargs = xmalloc (sizeof (*cargs));

  cargs->thread = thread;
  cargs->breakpoint = breakpoint;
  cargs->function = function;
  add_continuation (tp, finish_command_continuation, cargs,
                    finish_command_continuation_free_arg);
  proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 0);

  discard_cleanups (old_chain);
  if (!target_can_async_p ())
    do_all_continuations (0);
}

/* "finish": Set a temporary breakpoint at the place the selected
   frame will return to, then continue.  */

static void
finish_command (char *arg, int from_tty)
{
  struct frame_info *frame;
  struct symbol *function;

  int async_exec = 0;

  ERROR_NO_INFERIOR;
  ensure_not_tfind_mode ();
  ensure_valid_thread ();
  ensure_not_running ();

  /* Find out whether we must run in the background.  */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (async_exec && !target_can_async_p ())
    error (_("Asynchronous execution not supported on this target."));

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  if (arg)
    error (_("The \"finish\" command does not take any arguments."));

  frame = get_prev_frame (get_selected_frame (_("No selected frame.")));
  if (frame == 0)
    error (_("\"finish\" not meaningful in the outermost frame."));

  clear_proceed_status ();

  /* Finishing from an inline frame is completely different.  We don't
     try to show the "return value" - no way to locate it.  So we do
     not need a completion.  */
  if (get_frame_type (get_selected_frame (_("No selected frame.")))
      == INLINE_FRAME)
    {
      /* Claim we are stepping in the calling frame.  An empty step
	 range means that we will stop once we aren't in a function
	 called by that frame.  We don't use the magic "1" value for
	 step_range_end, because then infrun will think this is nexti,
	 and not step over the rest of this inlined function call.  */
      struct thread_info *tp = inferior_thread ();
      struct symtab_and_line empty_sal;

      init_sal (&empty_sal);
      set_step_info (frame, empty_sal);
      tp->control.step_range_start = get_frame_pc (frame);
      tp->control.step_range_end = tp->control.step_range_start;
      tp->control.step_over_calls = STEP_OVER_ALL;

      /* Print info on the selected frame, including level number but not
	 source.  */
      if (from_tty)
	{
	  printf_filtered (_("Run till exit from "));
	  print_stack_frame (get_selected_frame (NULL), 1, LOCATION, 0);
	}

      proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 1);
      return;
    }

  /* Ignore TAILCALL_FRAME type frames, they were executed already before
     entering THISFRAME.  */
  while (get_frame_type (frame) == TAILCALL_FRAME)
    frame = get_prev_frame (frame);

  /* Find the function we will return from.  */

  function = find_pc_function (get_frame_pc (get_selected_frame (NULL)));

  /* Print info on the selected frame, including level number but not
     source.  */
  if (from_tty)
    {
      if (execution_direction == EXEC_REVERSE)
	printf_filtered (_("Run back to call of "));
      else
	printf_filtered (_("Run till exit from "));

      print_stack_frame (get_selected_frame (NULL), 1, LOCATION, 0);
    }

  if (execution_direction == EXEC_REVERSE)
    finish_backward (function);
  else
    finish_forward (function, frame);
}


static void
program_info (char *args, int from_tty)
{
  bpstat bs;
  int num, stat;
  struct thread_info *tp;
  ptid_t ptid;

  if (!target_has_execution)
    {
      printf_filtered (_("The program being debugged is not being run.\n"));
      return;
    }

  if (non_stop)
    ptid = inferior_ptid;
  else
    {
      struct target_waitstatus ws;

      get_last_target_status (&ptid, &ws);
    }

  if (ptid_equal (ptid, null_ptid) || is_exited (ptid))
    error (_("Invalid selected thread."));
  else if (is_running (ptid))
    error (_("Selected thread is running."));

  tp = find_thread_ptid (ptid);
  bs = tp->control.stop_bpstat;
  stat = bpstat_num (&bs, &num);

  target_files_info ();
  printf_filtered (_("Program stopped at %s.\n"),
		   paddress (target_gdbarch (), stop_pc));
  if (tp->control.stop_step)
    printf_filtered (_("It stopped after being stepped.\n"));
  else if (stat != 0)
    {
      /* There may be several breakpoints in the same place, so this
         isn't as strange as it seems.  */
      while (stat != 0)
	{
	  if (stat < 0)
	    {
	      printf_filtered (_("It stopped at a breakpoint "
				 "that has since been deleted.\n"));
	    }
	  else
	    printf_filtered (_("It stopped at breakpoint %d.\n"), num);
	  stat = bpstat_num (&bs, &num);
	}
    }
  else if (tp->suspend.stop_signal != GDB_SIGNAL_0)
    {
      printf_filtered (_("It stopped with signal %s, %s.\n"),
		       gdb_signal_to_name (tp->suspend.stop_signal),
		       gdb_signal_to_string (tp->suspend.stop_signal));
    }

  if (!from_tty)
    {
      printf_filtered (_("Type \"info stack\" or \"info "
			 "registers\" for more information.\n"));
    }
}

static void
environment_info (char *var, int from_tty)
{
  if (var)
    {
      char *val = get_in_environ (current_inferior ()->environment, var);

      if (val)
	{
	  puts_filtered (var);
	  puts_filtered (" = ");
	  puts_filtered (val);
	  puts_filtered ("\n");
	}
      else
	{
	  puts_filtered ("Environment variable \"");
	  puts_filtered (var);
	  puts_filtered ("\" not defined.\n");
	}
    }
  else
    {
      char **vector = environ_vector (current_inferior ()->environment);

      while (*vector)
	{
	  puts_filtered (*vector++);
	  puts_filtered ("\n");
	}
    }
}

static void
set_environment_command (char *arg, int from_tty)
{
  char *p, *val, *var;
  int nullset = 0;

  if (arg == 0)
    error_no_arg (_("environment variable and value"));

  /* Find seperation between variable name and value.  */
  p = (char *) strchr (arg, '=');
  val = (char *) strchr (arg, ' ');

  if (p != 0 && val != 0)
    {
      /* We have both a space and an equals.  If the space is before the
         equals, walk forward over the spaces til we see a nonspace 
         (possibly the equals).  */
      if (p > val)
	while (*val == ' ')
	  val++;

      /* Now if the = is after the char following the spaces,
         take the char following the spaces.  */
      if (p > val)
	p = val - 1;
    }
  else if (val != 0 && p == 0)
    p = val;

  if (p == arg)
    error_no_arg (_("environment variable to set"));

  if (p == 0 || p[1] == 0)
    {
      nullset = 1;
      if (p == 0)
	p = arg + strlen (arg);	/* So that savestring below will work.  */
    }
  else
    {
      /* Not setting variable value to null.  */
      val = p + 1;
      while (*val == ' ' || *val == '\t')
	val++;
    }

  while (p != arg && (p[-1] == ' ' || p[-1] == '\t'))
    p--;

  var = savestring (arg, p - arg);
  if (nullset)
    {
      printf_filtered (_("Setting environment variable "
			 "\"%s\" to null value.\n"),
		       var);
      set_in_environ (current_inferior ()->environment, var, "");
    }
  else
    set_in_environ (current_inferior ()->environment, var, val);
  xfree (var);
}

static void
unset_environment_command (char *var, int from_tty)
{
  if (var == 0)
    {
      /* If there is no argument, delete all environment variables.
         Ask for confirmation if reading from the terminal.  */
      if (!from_tty || query (_("Delete all environment variables? ")))
	{
	  free_environ (current_inferior ()->environment);
	  current_inferior ()->environment = make_environ ();
	}
    }
  else
    unset_in_environ (current_inferior ()->environment, var);
}

/* Handle the execution path (PATH variable).  */

static const char path_var_name[] = "PATH";

static void
path_info (char *args, int from_tty)
{
  puts_filtered ("Executable and object file path: ");
  puts_filtered (get_in_environ (current_inferior ()->environment,
				 path_var_name));
  puts_filtered ("\n");
}

/* Add zero or more directories to the front of the execution path.  */

static void
path_command (char *dirname, int from_tty)
{
  char *exec_path;
  char *env;

  dont_repeat ();
  env = get_in_environ (current_inferior ()->environment, path_var_name);
  /* Can be null if path is not set.  */
  if (!env)
    env = "";
  exec_path = xstrdup (env);
  mod_path (dirname, &exec_path);
  set_in_environ (current_inferior ()->environment, path_var_name, exec_path);
  xfree (exec_path);
  if (from_tty)
    path_info ((char *) NULL, from_tty);
}


/* Print out the register NAME with value VAL, to FILE, in the default
   fashion.  */

static void
default_print_one_register_info (struct ui_file *file,
				 const char *name,
				 struct value *val)
{
  struct type *regtype = value_type (val);

  fputs_filtered (name, file);
  print_spaces_filtered (15 - strlen (name), file);

  if (!value_entirely_available (val))
    {
      fprintf_filtered (file, "*value not available*\n");
      return;
    }
  else if (value_optimized_out (val))
    {
      val_print_optimized_out (val, file);
      fprintf_filtered (file, "\n");
      return;
    }

  /* If virtual format is floating, print it that way, and in raw
     hex.  */
  if (TYPE_CODE (regtype) == TYPE_CODE_FLT
      || TYPE_CODE (regtype) == TYPE_CODE_DECFLOAT)
    {
      int j;
      struct value_print_options opts;
      const gdb_byte *valaddr = value_contents_for_printing (val);
      enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (regtype));

      get_user_print_options (&opts);
      opts.deref_ref = 1;

      val_print (regtype,
		 value_contents_for_printing (val),
		 value_embedded_offset (val), 0,
		 file, 0, val, &opts, current_language);

      fprintf_filtered (file, "\t(raw ");
      print_hex_chars (file, valaddr, TYPE_LENGTH (regtype), byte_order);
      fprintf_filtered (file, ")");
    }
  else
    {
      struct value_print_options opts;

      /* Print the register in hex.  */
      get_formatted_print_options (&opts, 'x');
      opts.deref_ref = 1;
      val_print (regtype,
		 value_contents_for_printing (val),
		 value_embedded_offset (val), 0,
		 file, 0, val, &opts, current_language);
      /* If not a vector register, print it also according to its
	 natural format.  */
      if (TYPE_VECTOR (regtype) == 0)
	{
	  get_user_print_options (&opts);
	  opts.deref_ref = 1;
	  fprintf_filtered (file, "\t");
	  val_print (regtype,
		     value_contents_for_printing (val),
		     value_embedded_offset (val), 0,
		     file, 0, val, &opts, current_language);
	}
    }

  fprintf_filtered (file, "\n");
}

/* Print out the machine register regnum.  If regnum is -1, print all
   registers (print_all == 1) or all non-float and non-vector
   registers (print_all == 0).

   For most machines, having all_registers_info() print the
   register(s) one per line is good enough.  If a different format is
   required, (eg, for MIPS or Pyramid 90x, which both have lots of
   regs), or there is an existing convention for showing all the
   registers, define the architecture method PRINT_REGISTERS_INFO to
   provide that format.  */

void
default_print_registers_info (struct gdbarch *gdbarch,
			      struct ui_file *file,
			      struct frame_info *frame,
			      int regnum, int print_all)
{
  int i;
  const int numregs = gdbarch_num_regs (gdbarch)
		      + gdbarch_num_pseudo_regs (gdbarch);

  for (i = 0; i < numregs; i++)
    {
      /* Decide between printing all regs, non-float / vector regs, or
         specific reg.  */
      if (regnum == -1)
	{
	  if (print_all)
	    {
	      if (!gdbarch_register_reggroup_p (gdbarch, i, all_reggroup))
		continue;
	    }
	  else
	    {
	      if (!gdbarch_register_reggroup_p (gdbarch, i, general_reggroup))
		continue;
	    }
	}
      else
	{
	  if (i != regnum)
	    continue;
	}

      /* If the register name is empty, it is undefined for this
         processor, so don't display anything.  */
      if (gdbarch_register_name (gdbarch, i) == NULL
	  || *(gdbarch_register_name (gdbarch, i)) == '\0')
	continue;

      default_print_one_register_info (file,
				       gdbarch_register_name (gdbarch, i),
				       value_of_register (i, frame));
    }
}

void
registers_info (char *addr_exp, int fpregs)
{
  struct frame_info *frame;
  struct gdbarch *gdbarch;

  if (!target_has_registers)
    error (_("The program has no registers now."));
  frame = get_selected_frame (NULL);
  gdbarch = get_frame_arch (frame);

  if (!addr_exp)
    {
      gdbarch_print_registers_info (gdbarch, gdb_stdout,
				    frame, -1, fpregs);
      return;
    }

  while (*addr_exp != '\0')
    {
      char *start;
      const char *end;

      /* Skip leading white space.  */
      addr_exp = skip_spaces (addr_exp);

      /* Discard any leading ``$''.  Check that there is something
         resembling a register following it.  */
      if (addr_exp[0] == '$')
	addr_exp++;
      if (isspace ((*addr_exp)) || (*addr_exp) == '\0')
	error (_("Missing register name"));

      /* Find the start/end of this register name/num/group.  */
      start = addr_exp;
      while ((*addr_exp) != '\0' && !isspace ((*addr_exp)))
	addr_exp++;
      end = addr_exp;

      /* Figure out what we've found and display it.  */

      /* A register name?  */
      {
	int regnum = user_reg_map_name_to_regnum (gdbarch, start, end - start);

	if (regnum >= 0)
	  {
	    /* User registers lie completely outside of the range of
	       normal registers.  Catch them early so that the target
	       never sees them.  */
	    if (regnum >= gdbarch_num_regs (gdbarch)
			  + gdbarch_num_pseudo_regs (gdbarch))
	      {
		struct value *regval = value_of_user_reg (regnum, frame);
		const char *regname = user_reg_map_regnum_to_name (gdbarch,
								   regnum);

		/* Print in the same fashion
		   gdbarch_print_registers_info's default
		   implementation prints.  */
		default_print_one_register_info (gdb_stdout,
						 regname,
						 regval);
	      }
	    else
	      gdbarch_print_registers_info (gdbarch, gdb_stdout,
					    frame, regnum, fpregs);
	    continue;
	  }
      }

      /* A register group?  */
      {
	struct reggroup *group;

	for (group = reggroup_next (gdbarch, NULL);
	     group != NULL;
	     group = reggroup_next (gdbarch, group))
	  {
	    /* Don't bother with a length check.  Should the user
	       enter a short register group name, go with the first
	       group that matches.  */
	    if (strncmp (start, reggroup_name (group), end - start) == 0)
	      break;
	  }
	if (group != NULL)
	  {
	    int regnum;

	    for (regnum = 0;
		 regnum < gdbarch_num_regs (gdbarch)
			  + gdbarch_num_pseudo_regs (gdbarch);
		 regnum++)
	      {
		if (gdbarch_register_reggroup_p (gdbarch, regnum, group))
		  gdbarch_print_registers_info (gdbarch,
						gdb_stdout, frame,
						regnum, fpregs);
	      }
	    continue;
	  }
      }

      /* Nothing matched.  */
      error (_("Invalid register `%.*s'"), (int) (end - start), start);
    }
}

static void
all_registers_info (char *addr_exp, int from_tty)
{
  registers_info (addr_exp, 1);
}

static void
nofp_registers_info (char *addr_exp, int from_tty)
{
  registers_info (addr_exp, 0);
}

static void
print_vector_info (struct ui_file *file,
		   struct frame_info *frame, const char *args)
{
  struct gdbarch *gdbarch = get_frame_arch (frame);

  if (gdbarch_print_vector_info_p (gdbarch))
    gdbarch_print_vector_info (gdbarch, file, frame, args);
  else
    {
      int regnum;
      int printed_something = 0;

      for (regnum = 0;
	   regnum < gdbarch_num_regs (gdbarch)
		    + gdbarch_num_pseudo_regs (gdbarch);
	   regnum++)
	{
	  if (gdbarch_register_reggroup_p (gdbarch, regnum, vector_reggroup))
	    {
	      printed_something = 1;
	      gdbarch_print_registers_info (gdbarch, file, frame, regnum, 1);
	    }
	}
      if (!printed_something)
	fprintf_filtered (file, "No vector information\n");
    }
}

static void
vector_info (char *args, int from_tty)
{
  if (!target_has_registers)
    error (_("The program has no registers now."));

  print_vector_info (gdb_stdout, get_selected_frame (NULL), args);
}

/* Kill the inferior process.  Make us have no inferior.  */

static void
kill_command (char *arg, int from_tty)
{
  /* FIXME:  This should not really be inferior_ptid (or target_has_execution).
     It should be a distinct flag that indicates that a target is active, cuz
     some targets don't have processes!  */

  if (ptid_equal (inferior_ptid, null_ptid))
    error (_("The program is not being run."));
  if (!query (_("Kill the program being debugged? ")))
    error (_("Not confirmed."));
  target_kill ();

  /* If we still have other inferiors to debug, then don't mess with
     with their threads.  */
  if (!have_inferiors ())
    {
      init_thread_list ();		/* Destroy thread info.  */

      /* Killing off the inferior can leave us with a core file.  If
	 so, print the state we are left in.  */
      if (target_has_stack)
	{
	  printf_filtered (_("In %s,\n"), target_longname);
	  print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC, 1);
	}
    }
  bfd_cache_close_all ();
}

/* Used in `attach&' command.  ARG is a point to an integer
   representing a process id.  Proceed threads of this process iff
   they stopped due to debugger request, and when they did, they
   reported a clean stop (GDB_SIGNAL_0).  Do not proceed threads
   that have been explicitly been told to stop.  */

static int
proceed_after_attach_callback (struct thread_info *thread,
			       void *arg)
{
  int pid = * (int *) arg;

  if (ptid_get_pid (thread->ptid) == pid
      && !is_exited (thread->ptid)
      && !is_executing (thread->ptid)
      && !thread->stop_requested
      && thread->suspend.stop_signal == GDB_SIGNAL_0)
    {
      switch_to_thread (thread->ptid);
      clear_proceed_status ();
      proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 0);
    }

  return 0;
}

static void
proceed_after_attach (int pid)
{
  /* Don't error out if the current thread is running, because
     there may be other stopped threads.  */
  struct cleanup *old_chain;

  /* Backup current thread and selected frame.  */
  old_chain = make_cleanup_restore_current_thread ();

  iterate_over_threads (proceed_after_attach_callback, &pid);

  /* Restore selected ptid.  */
  do_cleanups (old_chain);
}

/*
 * TODO:
 * Should save/restore the tty state since it might be that the
 * program to be debugged was started on this tty and it wants
 * the tty in some state other than what we want.  If it's running
 * on another terminal or without a terminal, then saving and
 * restoring the tty state is a harmless no-op.
 * This only needs to be done if we are attaching to a process.
 */

/* attach_command --
   takes a program started up outside of gdb and ``attaches'' to it.
   This stops it cold in its tracks and allows us to start debugging it.
   and wait for the trace-trap that results from attaching.  */

static void
attach_command_post_wait (char *args, int from_tty, int async_exec)
{
  char *exec_file;
  char *full_exec_path = NULL;
  struct inferior *inferior;

  inferior = current_inferior ();
  inferior->control.stop_soon = NO_STOP_QUIETLY;

  /* If no exec file is yet known, try to determine it from the
     process itself.  */
  exec_file = (char *) get_exec_file (0);
  if (!exec_file)
    {
      exec_file = target_pid_to_exec_file (ptid_get_pid (inferior_ptid));
      if (exec_file)
	{
	  /* It's possible we don't have a full path, but rather just a
	     filename.  Some targets, such as HP-UX, don't provide the
	     full path, sigh.

	     Attempt to qualify the filename against the source path.
	     (If that fails, we'll just fall back on the original
	     filename.  Not much more we can do...)  */

	  if (!source_full_path_of (exec_file, &full_exec_path))
	    full_exec_path = xstrdup (exec_file);

	  exec_file_attach (full_exec_path, from_tty);
	  symbol_file_add_main (full_exec_path, from_tty);
	}
    }
  else
    {
      reopen_exec_file ();
      reread_symbols ();
    }

  /* Take any necessary post-attaching actions for this platform.  */
  target_post_attach (ptid_get_pid (inferior_ptid));

  post_create_inferior (&current_target, from_tty);

  /* Install inferior's terminal modes.  */
  target_terminal_inferior ();

  if (async_exec)
    {
      /* The user requested an `attach&', so be sure to leave threads
	 that didn't get a signal running.  */

      /* Immediatelly resume all suspended threads of this inferior,
	 and this inferior only.  This should have no effect on
	 already running threads.  If a thread has been stopped with a
	 signal, leave it be.  */
      if (non_stop)
	proceed_after_attach (inferior->pid);
      else
	{
	  if (inferior_thread ()->suspend.stop_signal == GDB_SIGNAL_0)
	    {
	      clear_proceed_status ();
	      proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 0);
	    }
	}
    }
  else
    {
      /* The user requested a plain `attach', so be sure to leave
	 the inferior stopped.  */

      if (target_can_async_p ())
	async_enable_stdin ();

      /* At least the current thread is already stopped.  */

      /* In all-stop, by definition, all threads have to be already
	 stopped at this point.  In non-stop, however, although the
	 selected thread is stopped, others may still be executing.
	 Be sure to explicitly stop all threads of the process.  This
	 should have no effect on already stopped threads.  */
      if (non_stop)
	target_stop (pid_to_ptid (inferior->pid));

      /* Tell the user/frontend where we're stopped.  */
      normal_stop ();
      if (deprecated_attach_hook)
	deprecated_attach_hook ();
    }
}

struct attach_command_continuation_args
{
  char *args;
  int from_tty;
  int async_exec;
};

static void
attach_command_continuation (void *args, int err)
{
  struct attach_command_continuation_args *a = args;

  if (err)
    return;

  attach_command_post_wait (a->args, a->from_tty, a->async_exec);
}

static void
attach_command_continuation_free_args (void *args)
{
  struct attach_command_continuation_args *a = args;

  xfree (a->args);
  xfree (a);
}

void
attach_command (char *args, int from_tty)
{
  int async_exec = 0;
  struct cleanup *back_to = make_cleanup (null_cleanup, NULL);

  dont_repeat ();		/* Not for the faint of heart */

  if (gdbarch_has_global_solist (target_gdbarch ()))
    /* Don't complain if all processes share the same symbol
       space.  */
    ;
  else if (target_has_execution)
    {
      if (query (_("A program is being debugged already.  Kill it? ")))
	target_kill ();
      else
	error (_("Not killed."));
    }

  /* Clean up any leftovers from other runs.  Some other things from
     this function should probably be moved into target_pre_inferior.  */
  target_pre_inferior (from_tty);

  if (non_stop && !target_supports_non_stop ())
    error (_("Cannot attach to this target in non-stop mode"));

  if (args)
    {
      async_exec = strip_bg_char (&args);

      /* If we get a request for running in the bg but the target
         doesn't support it, error out.  */
      if (async_exec && !target_can_async_p ())
	error (_("Asynchronous execution not supported on this target."));
    }

  /* If we don't get a request of running in the bg, then we need
     to simulate synchronous (fg) execution.  */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
      make_cleanup ((make_cleanup_ftype *)async_enable_stdin, NULL);
    }

  target_attach (args, from_tty);

  /* Set up the "saved terminal modes" of the inferior
     based on what modes we are starting it with.  */
  target_terminal_init ();

  /* Set up execution context to know that we should return from
     wait_for_inferior as soon as the target reports a stop.  */
  init_wait_for_inferior ();
  clear_proceed_status ();

  if (non_stop)
    {
      /* If we find that the current thread isn't stopped, explicitly
	 do so now, because we're going to install breakpoints and
	 poke at memory.  */

      if (async_exec)
	/* The user requested an `attach&'; stop just one thread.  */
	target_stop (inferior_ptid);
      else
	/* The user requested an `attach', so stop all threads of this
	   inferior.  */
	target_stop (pid_to_ptid (ptid_get_pid (inferior_ptid)));
    }

  /* Some system don't generate traps when attaching to inferior.
     E.g. Mach 3 or GNU hurd.  */
  if (!target_attach_no_wait)
    {
      struct inferior *inferior = current_inferior ();

      /* Careful here.  See comments in inferior.h.  Basically some
	 OSes don't ignore SIGSTOPs on continue requests anymore.  We
	 need a way for handle_inferior_event to reset the stop_signal
	 variable after an attach, and this is what
	 STOP_QUIETLY_NO_SIGSTOP is for.  */
      inferior->control.stop_soon = STOP_QUIETLY_NO_SIGSTOP;

      if (target_can_async_p ())
	{
	  /* sync_execution mode.  Wait for stop.  */
	  struct attach_command_continuation_args *a;

	  a = xmalloc (sizeof (*a));
	  a->args = xstrdup (args);
	  a->from_tty = from_tty;
	  a->async_exec = async_exec;
	  add_inferior_continuation (attach_command_continuation, a,
				     attach_command_continuation_free_args);
	  discard_cleanups (back_to);
	  return;
	}

      wait_for_inferior ();
    }

  attach_command_post_wait (args, from_tty, async_exec);
  discard_cleanups (back_to);
}

/* We had just found out that the target was already attached to an
   inferior.  PTID points at a thread of this new inferior, that is
   the most likely to be stopped right now, but not necessarily so.
   The new inferior is assumed to be already added to the inferior
   list at this point.  If LEAVE_RUNNING, then leave the threads of
   this inferior running, except those we've explicitly seen reported
   as stopped.  */

void
notice_new_inferior (ptid_t ptid, int leave_running, int from_tty)
{
  struct cleanup* old_chain;
  int async_exec;

  old_chain = make_cleanup (null_cleanup, NULL);

  /* If in non-stop, leave threads as running as they were.  If
     they're stopped for some reason other than us telling it to, the
     target reports a signal != GDB_SIGNAL_0.  We don't try to
     resume threads with such a stop signal.  */
  async_exec = non_stop;

  if (!ptid_equal (inferior_ptid, null_ptid))
    make_cleanup_restore_current_thread ();

  switch_to_thread (ptid);

  /* When we "notice" a new inferior we need to do all the things we
     would normally do if we had just attached to it.  */

  if (is_executing (inferior_ptid))
    {
      struct inferior *inferior = current_inferior ();

      /* We're going to install breakpoints, and poke at memory,
	 ensure that the inferior is stopped for a moment while we do
	 that.  */
      target_stop (inferior_ptid);

      inferior->control.stop_soon = STOP_QUIETLY_REMOTE;

      /* Wait for stop before proceeding.  */
      if (target_can_async_p ())
	{
	  struct attach_command_continuation_args *a;

	  a = xmalloc (sizeof (*a));
	  a->args = xstrdup ("");
	  a->from_tty = from_tty;
	  a->async_exec = async_exec;
	  add_inferior_continuation (attach_command_continuation, a,
				     attach_command_continuation_free_args);

	  do_cleanups (old_chain);
	  return;
	}
      else
	wait_for_inferior ();
    }

  async_exec = leave_running;
  attach_command_post_wait ("" /* args */, from_tty, async_exec);

  do_cleanups (old_chain);
}

/*
 * detach_command --
 * takes a program previously attached to and detaches it.
 * The program resumes execution and will no longer stop
 * on signals, etc.  We better not have left any breakpoints
 * in the program or it'll die when it hits one.  For this
 * to work, it may be necessary for the process to have been
 * previously attached.  It *might* work if the program was
 * started via the normal ptrace (PTRACE_TRACEME).
 */

void
detach_command (char *args, int from_tty)
{
  dont_repeat ();		/* Not for the faint of heart.  */

  if (ptid_equal (inferior_ptid, null_ptid))
    error (_("The program is not being run."));

  query_if_trace_running (from_tty);

  disconnect_tracing ();

  target_detach (args, from_tty);

  /* If the solist is global across inferiors, don't clear it when we
     detach from a single inferior.  */
  if (!gdbarch_has_global_solist (target_gdbarch ()))
    no_shared_libraries (NULL, from_tty);

  /* If we still have inferiors to debug, then don't mess with their
     threads.  */
  if (!have_inferiors ())
    init_thread_list ();

  if (deprecated_detach_hook)
    deprecated_detach_hook ();
}

/* Disconnect from the current target without resuming it (leaving it
   waiting for a debugger).

   We'd better not have left any breakpoints in the program or the
   next debugger will get confused.  Currently only supported for some
   remote targets, since the normal attach mechanisms don't work on
   stopped processes on some native platforms (e.g. GNU/Linux).  */

static void
disconnect_command (char *args, int from_tty)
{
  dont_repeat ();		/* Not for the faint of heart.  */
  query_if_trace_running (from_tty);
  disconnect_tracing ();
  target_disconnect (args, from_tty);
  no_shared_libraries (NULL, from_tty);
  init_thread_list ();
  if (deprecated_detach_hook)
    deprecated_detach_hook ();
}

void 
interrupt_target_1 (int all_threads)
{
  ptid_t ptid;

  if (all_threads)
    ptid = minus_one_ptid;
  else
    ptid = inferior_ptid;
  target_stop (ptid);

  /* Tag the thread as having been explicitly requested to stop, so
     other parts of gdb know not to resume this thread automatically,
     if it was stopped due to an internal event.  Limit this to
     non-stop mode, as when debugging a multi-threaded application in
     all-stop mode, we will only get one stop event --- it's undefined
     which thread will report the event.  */
  if (non_stop)
    set_stop_requested (ptid, 1);
}

/* Stop the execution of the target while running in async mode, in
   the backgound.  In all-stop, stop the whole process.  In non-stop
   mode, stop the current thread only by default, or stop all threads
   if the `-a' switch is used.  */

/* interrupt [-a]  */
static void
interrupt_target_command (char *args, int from_tty)
{
  if (target_can_async_p ())
    {
      int all_threads = 0;

      dont_repeat ();		/* Not for the faint of heart.  */

      if (args != NULL
	  && strncmp (args, "-a", sizeof ("-a") - 1) == 0)
	all_threads = 1;

      if (!non_stop && all_threads)
	error (_("-a is meaningless in all-stop mode."));

      interrupt_target_1 (all_threads);
    }
}

static void
print_float_info (struct ui_file *file,
		  struct frame_info *frame, const char *args)
{
  struct gdbarch *gdbarch = get_frame_arch (frame);

  if (gdbarch_print_float_info_p (gdbarch))
    gdbarch_print_float_info (gdbarch, file, frame, args);
  else
    {
      int regnum;
      int printed_something = 0;

      for (regnum = 0;
	   regnum < gdbarch_num_regs (gdbarch)
		    + gdbarch_num_pseudo_regs (gdbarch);
	   regnum++)
	{
	  if (gdbarch_register_reggroup_p (gdbarch, regnum, float_reggroup))
	    {
	      printed_something = 1;
	      gdbarch_print_registers_info (gdbarch, file, frame, regnum, 1);
	    }
	}
      if (!printed_something)
	fprintf_filtered (file, "No floating-point info "
			  "available for this processor.\n");
    }
}

static void
float_info (char *args, int from_tty)
{
  if (!target_has_registers)
    error (_("The program has no registers now."));

  print_float_info (gdb_stdout, get_selected_frame (NULL), args);
}

static void
unset_command (char *args, int from_tty)
{
  printf_filtered (_("\"unset\" must be followed by the "
		     "name of an unset subcommand.\n"));
  help_list (unsetlist, "unset ", -1, gdb_stdout);
}

/* Implement `info proc' family of commands.  */

static void
info_proc_cmd_1 (char *args, enum info_proc_what what, int from_tty)
{
  struct gdbarch *gdbarch = get_current_arch ();

  if (!target_info_proc (args, what))
    {
      if (gdbarch_info_proc_p (gdbarch))
	gdbarch_info_proc (gdbarch, args, what);
      else
	error (_("Not supported on this target."));
    }
}

/* Implement `info proc' when given without any futher parameters.  */

static void
info_proc_cmd (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_MINIMAL, from_tty);
}

/* Implement `info proc mappings'.  */

static void
info_proc_cmd_mappings (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_MAPPINGS, from_tty);
}

/* Implement `info proc stat'.  */

static void
info_proc_cmd_stat (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_STAT, from_tty);
}

/* Implement `info proc status'.  */

static void
info_proc_cmd_status (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_STATUS, from_tty);
}

/* Implement `info proc cwd'.  */

static void
info_proc_cmd_cwd (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_CWD, from_tty);
}

/* Implement `info proc cmdline'.  */

static void
info_proc_cmd_cmdline (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_CMDLINE, from_tty);
}

/* Implement `info proc exe'.  */

static void
info_proc_cmd_exe (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_EXE, from_tty);
}

/* Implement `info proc all'.  */

static void
info_proc_cmd_all (char *args, int from_tty)
{
  info_proc_cmd_1 (args, IP_ALL, from_tty);
}

void
_initialize_infcmd (void)
{
  static struct cmd_list_element *info_proc_cmdlist;
  struct cmd_list_element *c = NULL;
  const char *cmd_name;

  /* Add the filename of the terminal connected to inferior I/O.  */
  add_setshow_filename_cmd ("inferior-tty", class_run,
			    &inferior_io_terminal_scratch, _("\
Set terminal for future runs of program being debugged."), _("\
Show terminal for future runs of program being debugged."), _("\
Usage: set inferior-tty /dev/pts/1"),
			    set_inferior_tty_command,
			    show_inferior_tty_command,
			    &setlist, &showlist);
  add_com_alias ("tty", "set inferior-tty", class_alias, 0);

  cmd_name = "args";
  add_setshow_string_noescape_cmd (cmd_name, class_run,
				   &inferior_args_scratch, _("\
Set argument list to give program being debugged when it is started."), _("\
Show argument list to give program being debugged when it is started."), _("\
Follow this command with any number of args, to be passed to the program."),
				   set_args_command,
				   show_args_command,
				   &setlist, &showlist);
  c = lookup_cmd (&cmd_name, setlist, "", -1, 1);
  gdb_assert (c != NULL);
  set_cmd_completer (c, filename_completer);

  c = add_cmd ("environment", no_class, environment_info, _("\
The environment to give the program, or one variable's value.\n\
With an argument VAR, prints the value of environment variable VAR to\n\
give the program being debugged.  With no arguments, prints the entire\n\
environment to be given to the program."), &showlist);
  set_cmd_completer (c, noop_completer);

  add_prefix_cmd ("unset", no_class, unset_command,
		  _("Complement to certain \"set\" commands."),
		  &unsetlist, "unset ", 0, &cmdlist);

  c = add_cmd ("environment", class_run, unset_environment_command, _("\
Cancel environment variable VAR for the program.\n\
This does not affect the program until the next \"run\" command."),
	       &unsetlist);
  set_cmd_completer (c, noop_completer);

  c = add_cmd ("environment", class_run, set_environment_command, _("\
Set environment variable value to give the program.\n\
Arguments are VAR VALUE where VAR is variable name and VALUE is value.\n\
VALUES of environment variables are uninterpreted strings.\n\
This does not affect the program until the next \"run\" command."),
	       &setlist);
  set_cmd_completer (c, noop_completer);

  c = add_com ("path", class_files, path_command, _("\
Add directory DIR(s) to beginning of search path for object files.\n\
$cwd in the path means the current working directory.\n\
This path is equivalent to the $PATH shell variable.  It is a list of\n\
directories, separated by colons.  These directories are searched to find\n\
fully linked executable files and separately compiled object files as \
needed."));
  set_cmd_completer (c, filename_completer);

  c = add_cmd ("paths", no_class, path_info, _("\
Current search path for finding object files.\n\
$cwd in the path means the current working directory.\n\
This path is equivalent to the $PATH shell variable.  It is a list of\n\
directories, separated by colons.  These directories are searched to find\n\
fully linked executable files and separately compiled object files as \
needed."),
	       &showlist);
  set_cmd_completer (c, noop_completer);

  add_prefix_cmd ("kill", class_run, kill_command,
		  _("Kill execution of program being debugged."),
		  &killlist, "kill ", 0, &cmdlist);

  add_com ("attach", class_run, attach_command, _("\
Attach to a process or file outside of GDB.\n\
This command attaches to another target, of the same type as your last\n\
\"target\" command (\"info files\" will show your target stack).\n\
The command may take as argument a process id or a device file.\n\
For a process id, you must have permission to send the process a signal,\n\
and it must have the same effective uid as the debugger.\n\
When using \"attach\" with a process id, the debugger finds the\n\
program running in the process, looking first in the current working\n\
directory, or (if not found there) using the source file search path\n\
(see the \"directory\" command).  You can also use the \"file\" command\n\
to specify the program, and to load its symbol table."));

  add_prefix_cmd ("detach", class_run, detach_command, _("\
Detach a process or file previously attached.\n\
If a process, it is no longer traced, and it continues its execution.  If\n\
you were debugging a file, the file is closed and gdb no longer accesses it."),
		  &detachlist, "detach ", 0, &cmdlist);

  add_com ("disconnect", class_run, disconnect_command, _("\
Disconnect from a target.\n\
The target will wait for another debugger to connect.  Not available for\n\
all targets."));

  c = add_com ("signal", class_run, signal_command, _("\
Continue program with the specified signal.\n\
Usage: signal SIGNAL\n\
The SIGNAL argument is processed the same as the handle command.\n\
\n\
An argument of \"0\" means continue the program without sending it a signal.\n\
This is useful in cases where the program stopped because of a signal,\n\
and you want to resume the program while discarding the signal."));
  set_cmd_completer (c, signal_completer);

  add_com ("stepi", class_run, stepi_command, _("\
Step one instruction exactly.\n\
Usage: stepi [N]\n\
Argument N means step N times (or till program stops for another \
reason)."));
  add_com_alias ("si", "stepi", class_alias, 0);

  add_com ("nexti", class_run, nexti_command, _("\
Step one instruction, but proceed through subroutine calls.\n\
Usage: nexti [N]\n\
Argument N means step N times (or till program stops for another \
reason)."));
  add_com_alias ("ni", "nexti", class_alias, 0);

  add_com ("finish", class_run, finish_command, _("\
Execute until selected stack frame returns.\n\
Usage: finish\n\
Upon return, the value returned is printed and put in the value history."));
  add_com_alias ("fin", "finish", class_run, 1);

  add_com ("next", class_run, next_command, _("\
Step program, proceeding through subroutine calls.\n\
Usage: next [N]\n\
Unlike \"step\", if the current source line calls a subroutine,\n\
this command does not enter the subroutine, but instead steps over\n\
the call, in effect treating it as a single source line."));
  add_com_alias ("n", "next", class_run, 1);
  if (xdb_commands)
    add_com_alias ("S", "next", class_run, 1);

  add_com ("step", class_run, step_command, _("\
Step program until it reaches a different source line.\n\
Usage: step [N]\n\
Argument N means step N times (or till program stops for another \
reason)."));
  add_com_alias ("s", "step", class_run, 1);

  c = add_com ("until", class_run, until_command, _("\
Execute until the program reaches a source line greater than the current\n\
or a specified location (same args as break command) within the current \
frame."));
  set_cmd_completer (c, location_completer);
  add_com_alias ("u", "until", class_run, 1);

  c = add_com ("advance", class_run, advance_command, _("\
Continue the program up to the given location (same form as args for break \
command).\n\
Execution will also stop upon exit from the current stack frame."));
  set_cmd_completer (c, location_completer);

  c = add_com ("jump", class_run, jump_command, _("\
Continue program being debugged at specified line or address.\n\
Usage: jump <location>\n\
Give as argument either LINENUM or *ADDR, where ADDR is an expression\n\
for an address to start at."));
  set_cmd_completer (c, location_completer);
  add_com_alias ("j", "jump", class_run, 1);

  if (xdb_commands)
    {
      c = add_com ("go", class_run, go_command, _("\
Usage: go <location>\n\
Continue program being debugged, stopping at specified line or \n\
address.\n\
Give as argument either LINENUM or *ADDR, where ADDR is an \n\
expression for an address to start at.\n\
This command is a combination of tbreak and jump."));
      set_cmd_completer (c, location_completer);
    }

  if (xdb_commands)
    add_com_alias ("g", "go", class_run, 1);

  add_com ("continue", class_run, continue_command, _("\
Continue program being debugged, after signal or breakpoint.\n\
Usage: continue [N]\n\
If proceeding from breakpoint, a number N may be used as an argument,\n\
which means to set the ignore count of that breakpoint to N - 1 (so that\n\
the breakpoint won't break until the Nth time it is reached).\n\
\n\
If non-stop mode is enabled, continue only the current thread,\n\
otherwise all the threads in the program are continued.  To \n\
continue all stopped threads in non-stop mode, use the -a option.\n\
Specifying -a and an ignore count simultaneously is an error."));
  add_com_alias ("c", "cont", class_run, 1);
  add_com_alias ("fg", "cont", class_run, 1);

  c = add_com ("run", class_run, run_command, _("\
Start debugged program.  You may specify arguments to give it.\n\
Args may include \"*\", or \"[...]\"; they are expanded using \"sh\".\n\
Input and output redirection with \">\", \"<\", or \">>\" are also \
allowed.\n\n\
With no arguments, uses arguments last specified (with \"run\" \
or \"set args\").\n\
To cancel previous arguments and run with no arguments,\n\
use \"set args\" without arguments."));
  set_cmd_completer (c, filename_completer);
  add_com_alias ("r", "run", class_run, 1);
  if (xdb_commands)
    add_com ("R", class_run, run_no_args_command,
	     _("Start debugged program with no arguments."));

  c = add_com ("start", class_run, start_command, _("\
Run the debugged program until the beginning of the main procedure.\n\
You may specify arguments to give to your program, just as with the\n\
\"run\" command."));
  set_cmd_completer (c, filename_completer);

  add_com ("interrupt", class_run, interrupt_target_command,
	   _("Interrupt the execution of the debugged program.\n\
If non-stop mode is enabled, interrupt only the current thread,\n\
otherwise all the threads in the program are stopped.  To \n\
interrupt all running threads in non-stop mode, use the -a option."));

  add_info ("registers", nofp_registers_info, _("\
List of integer registers and their contents, for selected stack frame.\n\
Register name as argument means describe only that register."));
  add_info_alias ("r", "registers", 1);

  if (xdb_commands)
    add_com ("lr", class_info, nofp_registers_info, _("\
List of integer registers and their contents, for selected stack frame.\n\
Register name as argument means describe only that register."));
  add_info ("all-registers", all_registers_info, _("\
List of all registers and their contents, for selected stack frame.\n\
Register name as argument means describe only that register."));

  add_info ("program", program_info,
	    _("Execution status of the program."));

  add_info ("float", float_info,
	    _("Print the status of the floating point unit\n"));

  add_info ("vector", vector_info,
	    _("Print the status of the vector unit\n"));

  add_prefix_cmd ("proc", class_info, info_proc_cmd,
		  _("\
Show /proc process information about any running process.\n\
Specify any process id, or use the program being debugged by default."),
		  &info_proc_cmdlist, "info proc ",
		  1/*allow-unknown*/, &infolist);

  add_cmd ("mappings", class_info, info_proc_cmd_mappings, _("\
List of mapped memory regions."),
	   &info_proc_cmdlist);

  add_cmd ("stat", class_info, info_proc_cmd_stat, _("\
List process info from /proc/PID/stat."),
	   &info_proc_cmdlist);

  add_cmd ("status", class_info, info_proc_cmd_status, _("\
List process info from /proc/PID/status."),
	   &info_proc_cmdlist);

  add_cmd ("cwd", class_info, info_proc_cmd_cwd, _("\
List current working directory of the process."),
	   &info_proc_cmdlist);

  add_cmd ("cmdline", class_info, info_proc_cmd_cmdline, _("\
List command line arguments of the process."),
	   &info_proc_cmdlist);

  add_cmd ("exe", class_info, info_proc_cmd_exe, _("\
List absolute filename for executable of the process."),
	   &info_proc_cmdlist);

  add_cmd ("all", class_info, info_proc_cmd_all, _("\
List all available /proc info."),
	   &info_proc_cmdlist);
}
@


1.336
log
@	* aarch64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* aix-thread.c (BUILD_THREAD, BUILD_LWP): Remove.
	Replace BUILD_THREAD with ptid_build.
	Replace BUILD_LWP with ptid_build.
	Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* alphabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* amd64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* amd64bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* arm-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* armnbsd-nat.c: Replace PIDGET with ptid_get_pid.
	* auxv.c: Likewise.
	* breakpoint.c: Likewise.
	* common/ptid.c (ptid_is_pid): Condense check for
	null_ptid and minus_one_ptid.
	(ptid_lwp_p): New function.
	(ptid_tid_p): New function.
	* common/ptid.h: Update comments for accessors.
	(ptid_lwp_p): New prototype.
	(ptid_tid_p): New prototype.
	* defs.h (PIDGET, TIDGET, MERGEPID): Do not define.
	* gcore.c: Replace PIDGET with ptid_get_pid.
	* gdbthread.h: Likewise.
	* gnu-nat.c: Likewise.
	* hppa-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* hppabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* hppanbsd-nat.c: Likewise.
	* i386-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* i386bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* ia64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	* infcmd.c: Likewise.
	* inferior.h: Likewise.
	* inflow.c: Likewise.
	* infrun.c: Likewise.
	* linux-fork.c: Likewise.
	* linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace GET_PID with ptid_get_pid.
	Replace is_lwp with ptid_lwp_p.
	Replace GET_LWP with ptid_get_lwp.
	Replace BUILD_LWP with ptid_build.
@
text
@d2038 1
a2038 1
      val_print_optimized_out (file);
d2145 1
a2145 1
				       get_frame_register_value (frame, i));
@


1.335
log
@Consistent display of "<optimized out>" for register values.

  https://sourceware.org/ml/gdb-patches/2013-08/msg00170.html

gdb/ChangeLog

        * infcmd.c (default_print_one_register_info): Add detection of
        optimized out values.
        (default_print_registers_info): Switch to using
        get_frame_register_value.

gdb/testsuite/ChangeLog

        * gdb.dwarf2/dw2-reg-undefined.exp: Change pattern for info
        register to "<optimized out>", and also print the registers.
@
text
@d2411 1
a2411 1
      exec_file = target_pid_to_exec_file (PIDGET (inferior_ptid));
d2436 1
a2436 1
  target_post_attach (PIDGET (inferior_ptid));
@


1.334
log
@PR gdb/15911: "info threads" changes the default source and line (for "break", "list")

"info threads" changes the default source for "break" and "list", to
whatever the location of the first/bottom thread in the thread list
is...

 (gdb) b start
 (gdb) c
 ...
 (gdb) list
 *lists "start"*
 (gdb) b 23
 Breakpoint 3 at 0x400614: file test.c, line 23.
 (gdb) info threads
   Id   Target Id         Frame
 * 2    Thread 0x7ffff7fcb700 (LWP 1760) "test" start (arg=0x0) at test.c:23
   1    Thread 0x7ffff7fcc740 (LWP 1748) "test" 0x000000323dc08e60 in pthread_join (threadid=140737353922304, thread_return=0x0) at pthread_join.c:93
 (gdb) b 23
 Breakpoint 4 at 0x323dc08d90: file pthread_join.c, line 23.
                                    ^^^^^^^^^^^^^^^
 (gdb) list
 93          lll_wait_tid (pd->tid);
 94
 95
 96        /* Restore cancellation mode.  */
 97        CANCEL_RESET (oldtype);
 98
 99        /* Remove the handler.  */
 100       pthread_cleanup_pop (0);
 101
 102

The issue is that print_stack_frame always sets the current sal to the
frame's sal.  print_frame_info (which print_stack_frame calls to do
most of the work) also sets the last displayed sal, but only if
print_what isn't LOCATION.  Now the call in question, from within
thread.c:print_thread_info, does pass in LOCATION as print_what, but
print_stack_frame doesn't have the same check print_frame_info has.
We could consider adding it, but setting these globals depending on
print_what isn't very clean, IMO.  What we have is two logically
distinct operations mixed in the same function(s):

  #1 - print frame, in the format specified by {print_what,
    print_level and print_args}.

  #2 - We're displaying a frame to the user, and I want the default
    sal to point here, because the program stopped here, or the user
    did some context-changing command (up, down, etc.).

So I added a new parameter to print_stack_frame & friends for point
#2, and went through all calls in the tree adjusting as necessary.

Tested on x86_64 Fedora 17.

gdb/
2013-09-17  Pedro Alves  <palves@@redhat.com>

	PR gdb/15911
	* ada-tasks.c (task_command_1): Adjust call to print_stack_frame.
	* bsd-kvm.c (bsd_kvm_open, bsd_kvm_proc_cmd, bsd_kvm_pcb_cmd):
	* corelow.c (core_open):
	* frame.h (print_stack_frame, print_frame_info): New
	'set_current_sal' parameter.
	* infcmd.c (finish_command, kill_command): Adjust call to
	print_stack_frame.
	* inferior.c (inferior_command): Likewise.
	* infrun.c (normal_stop): Likewise.
	* linux-fork.c (linux_fork_context): Likewise.
	* record-full.c (record_full_goto_entry, record_full_restore):
	Likewise.
	* remote-mips.c (common_open): Likewise.
	* stack.c (print_stack_frame): New 'set_current_sal' parameter.
	Use it.
	(print_frame_info): New 'set_current_sal' parameter.  Set the last
	displayed sal depending on the new paremeter instead of looking at
	print_what.
	(backtrace_command_1, select_and_print_frame, frame_command)
	(current_frame_command, up_command, down_command): Adjust call to
	print_stack_frame.
	* thread.c (print_thread_info, restore_selected_frame)
	(do_captured_thread_select): Adjust call to print_stack_frame.
	* tracepoint.c (tfind_1): Likewise.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_frame): Likewise.
	* mi/mi-interp.c (mi_on_normal_stop): Likewise.
	* mi/mi-main.c (mi_cmd_exec_return, mi_cmd_trace_find): Likewise.

	gdb/testsuite/
	* gdb.threads/info-threads-cur-sal-2.c: New file.
	* gdb.threads/info-threads-cur-sal.c: New file.
	* gdb.threads/info-threads-cur-sal.exp: New file.
@
text
@d2036 6
a2115 3
      struct type *regtype;
      struct value *val;

a2142 7
      regtype = register_type (gdbarch, i);
      val = allocate_value (regtype);

      /* Get the data in raw format.  */
      if (! deprecated_frame_register_read (frame, i, value_contents_raw (val)))
	mark_value_bytes_unavailable (val, 0, TYPE_LENGTH (value_type (val)));

d2145 1
a2145 1
				       val);
@


1.333
log
@Reuse print_hex_chars function.

http://sourceware.org/ml/gdb-patches/2013-07/msg00234.html

	* infcmd.c (default_print_one_register_info): Reuse code in
	print_hex_chars.
@
text
@d1768 1
a1768 1
	  print_stack_frame (get_selected_frame (NULL), 1, LOCATION);
d1793 1
a1793 1
      print_stack_frame (get_selected_frame (NULL), 1, LOCATION);
d2337 1
a2337 1
	  print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
@


1.332
log
@	* defs.h (enum val_prettyformat): Renamed from val_prettyprint.
	Enum values rename as well.  All uses updated.
	* valprint.h (value_print_options): Rename member pretty to
	pretty format.  Rename member prettyprint_arrays to
	prettyformat_arrays.  Rename member prettyprint_structs to
	prettyformat_structs.  All uses updated.
	(get_no_prettyformat_print_options): Renamed from
	get_raw_print_options.
	* valprint.c (get_no_prettyformat_print_options): Renamed from
	get_raw_print_options.  All callers updated.
	(show_prettyformat_structs): Renamed from show_prettyprint_structs.
	All callers updated.
	(show_prettyformat_arrays): Renamed from show_prettyprint_arrays.
	All callers updated.
	(_initialize_valprint): Improve help text for "set print pretty" and
	"set print arrays".

	testsuite/
	* gdb.base/default.exp: Update expected output of "show print array"
	and "show print pretty".
@
text
@d2055 2
a2056 11
      fprintf_filtered (file, "\t(raw 0x");
      for (j = 0; j < TYPE_LENGTH (regtype); j++)
	{
	  int idx;

	  if (byte_order == BFD_ENDIAN_BIG)
	    idx = j;
	  else
	    idx = TYPE_LENGTH (regtype) - 1 - j;
	  fprintf_filtered (file, "%02x", (unsigned char) valaddr[idx]);
	}
@


1.331
log
@range stepping: gdb

This patch teaches GDB to take advantage of target-assisted range
stepping.  It adds a new 'r ADDR1,ADDR2' action to vCont (vCont;r),
meaning, "step once, and keep stepping as long as the thread is in the
[ADDR1,ADDR2) range".

Rationale:

When user issues the "step" command on the following line of source,

   a = b + c + d * e - a;

GDB single-steps every single instruction until the program reaches a
new different line.  E.g., on x86_64, that line compiles to:

   0x08048434 <+65>:    mov    0x1c(%esp),%eax
   0x08048438 <+69>:    mov    0x30(%esp),%edx
   0x0804843c <+73>:    add    %eax,%edx
   0x0804843e <+75>:    mov    0x18(%esp),%eax
   0x08048442 <+79>:    imul   0x2c(%esp),%eax
   0x08048447 <+84>:    add    %edx,%eax
   0x08048449 <+86>:    sub    0x34(%esp),%eax
   0x0804844d <+90>:    mov    %eax,0x34(%esp)
   0x08048451 <+94>:    mov    0x1c(%esp),%eax

and the following is the RSP traffic between GDB and GDBserver:

 --> vCont;s:p2e13.2e13;c
 <-- T0505:68efffbf;04:30efffbf;08:3c840408;thread:p2e13.2e13;core:1;
 --> vCont;s:p2e13.2e13;c
 <-- T0505:68efffbf;04:30efffbf;08:3e840408;thread:p2e13.2e13;core:2;
 --> vCont;s:p2e13.2e13;c
 <-- T0505:68efffbf;04:30efffbf;08:42840408;thread:p2e13.2e13;core:2;
 --> vCont;s:p2e13.2e13;c
 <-- T0505:68efffbf;04:30efffbf;08:47840408;thread:p2e13.2e13;core:0;
 --> vCont;s:p2e13.2e13;c
 <-- T0505:68efffbf;04:30efffbf;08:49840408;thread:p2e13.2e13;core:0;
 --> vCont;s:p2e13.2e13;c
 <-- T0505:68efffbf;04:30efffbf;08:4d840408;thread:p2e13.2e13;core:0;
 --> vCont;s:p2e13.2e13;c
 <-- T0505:68efffbf;04:30efffbf;08:51840408;thread:p2e13.2e13;core:0;

IOW, a lot of roundtrips between GDB and GDBserver.

If we add a new command to the RSP, meaning "keep stepping and don't
report a stop until the program goes out of the [0x08048434,
0x08048451) address range", then the RSP traffic can be reduced down
to:

 --> vCont;r8048434,8048451:p2db0.2db0;c
 <-- T0505:68efffbf;04:30efffbf;08:51840408;thread:p2db0.2db0;core:1;

As number of packets is reduced dramatically, the performance of
stepping source lines is much improved.

In case something is wrong with range stepping on the stub side, the
debug info or even gdb, this adds a "set/show range-stepping" command
to be able to turn range stepping off.

gdb/
2013-05-23  Yao Qi  <yao@@codesourcery.com>
	    Pedro Alves  <palves@@redhat.com>

	* gdbthread.h (struct thread_control_state) <may_range_step>: New
	field.
	* infcmd.c (step_once, until_next_command): Enable range stepping.
	* infrun.c (displaced_step_prepare): Disable range stepping.
	(resume): Disable range stepping if stepping over a breakpoint or
	we have software watchpoints.  If range stepping is enabled,
	assert the thread is in the stepping range.
	(clear_proceed_status_thread): Clear may_range_step.
	(handle_inferior_event): Disable range stepping as soon as we know
	the thread that hit the event.  Re-enable it whenever we're going
	to step with a step range.
	* remote.c (struct vCont_action_support) <r>: New field.
	(use_range_stepping): New global.
	(remote_vcont_probe): Handle 'r' action.
	(append_resumption): Append an 'r' action if the thread may range
	step.
	(show_range_stepping): New function.
	(set_range_stepping): New function.
	(_initialize_remote): Call add_setshow_boolean_cmd to register the
	'set range-stepping' and 'show range-stepping' commands.
	* NEWS: Mention range stepping, the new vCont;r action, and the
	new "set/show range-stepping" commands.

gdb/doc/
2013-05-23  Yao Qi  <yao@@codesourcery.com>
	    Pedro Alves  <palves@@redhat.com>

	* gdb.texinfo (Packets): Document 'vCont;r'.
	(Continuing and Stepping): Document target-assisted range
	stepping, and the 'set range-stepping' and 'show range-stepping'
	commands.
@
text
@d1509 1
a1509 1
      get_raw_print_options (&opts);
@


1.330
log
@Reimplement shared library support on ppc-aix...

... using the target_so_ops framework.

gdb/ChangeLog:

        * target.h (TARGET_OBJECT_AIX_LIBRARIES): New target_object enum.
        * features/library-list-aix.dtd: New file.
        * solib-aix.h, solib-aix.c: New file.
        * rs6000-aix-tdep.c: #include "solib.h" and "solib-aix.h".
        (rs6000_find_toc_address_hook): Delete.
        (rs6000_push_dummy_call): Rewrite code setting the TOC value.
        (rs6000_aix_init_osabi): Register solib_aix_so_ops.
        * rs6000-nat.c: Remove "xcoffsolib.h" include.  Include
        "xml-utils.h".
        (map_vmap, vmap_exec, vmap_ldinfo, add_vmap, objfile_symbol_add)
        (vmap_symtab, fixup_breakpoints): Delete.
        (rs6000_xfer_shared_libraries): New function.
        (rs6000_xfer_partial): Add TARGET_OBJECT_AIX_LIBRARIES handling.
        (vmap_secs, bss_data_overlap, vmap_add_symbols): Delete.
        (xcoff_relocate_symtab, xcoff_relocate_core): Delete.
        (rs6000_ptrace_ldinfo, rs6000_core_ldinfo)
        (rs6000_xfer_shared_library): New function.
        (find_toc_address): Delete.
        (_initialize_rs6000_nat): Do not set rs6000_find_toc_address_hook.
        * rs6000-tdep.h (rs6000_find_toc_address_hook): Remove.
        * xcoffread.c (record_minimal_symbol): Reloate symbol address
        before creating minimal symbol.  Adjust function description
        accordingly.
        (scan_xcoff_symtab): Replace call to
        prim_record_minimal_symbol_and_info by call to
        record_minimal_symbol.
        (xcoff_symfile_offsets): Reimplement mostly as a wrapper
        around default_symfile_offsets.
        * configure.tgt: Add solib-aix.o to gdb_target_obs for
        powerpc-aix targets.
        * config/rs6000/nm-rs6000.h: Delete.
        * config/powerpc/aix.mh (NAT_FILE): Delete.
        (NATDEPFILES): Remove xcoffsolib.o.
        * Makefile.in (XMLFILES): Add library-list-aix.dtd.
        (ALL_TARGET_OBS): Add solib-aix.o.
        (HFILES_NO_SRCDIR): Remove xcoffsolib.h and
        config/rs6000/nm-rs6000.h.  Add solib-aix.h.
        (ALLDEPFILES): Add solib-aix.c.  Remove xcoffsolib.c.
        * xcoffsolib.h, xcoffsolib.c: Delete.

        * solib.c (reload_shared_libraries): Remove reference to
        SOLIB_CREATE_INFERIOR_HOOK.
        * breakpoint.c (handle_solib_event): Remove reference to SOLIB_ADD.
        (disable_breakpoints_in_shlibs): Remove reference to PC_SOLIB.
        (momentary_bkpt_re_set): Replace SOLIB_ADD by solib_add in
        comment.
        * corelow.c (deprecated_core_resize_section_table): Delete.
        * exec.c: Remove include of xcoffsolib.h".
        (map_vmap, vmap): Delete.
        (exec_close_1): Remove references to vmap.
        (exec_file_attach): Remove vmap handling code, and reference
        to DEPRECATED_IBM6000_TARGET.
        (bfdsec_to_vmap): Delete.
        (exec_files_info): Remove block of code handling VMAP.
        * infcmd.c (post_create_inferior): Remove reference to
        SOLIB_CREATE_INFERIOR_HOOK and SOLIB_ADD.
        * infrun.c (follow_exec): Remove reference to
        SOLIB_CREATE_INFERIOR_HOOK.
        * stack.c (print_frame): Remove reference to PC_SOLIB.
        * solib-dsbt.c (dsbt_current_sos): Adjust comment.
        (dsbt_relocate_main_executable): Likewise.
        * solib-frv.c (frv_current_sos): Likewise.

gdb/doc/ChangeLog:

        * gdbint.texinfo (Algorithms): Remove entries documenting
        DEPRECATED_IBM6000_TARGET, SOLIB_ADD, and
        SOLIB_CREATE_INFERIOR_HOOK.
@
text
@d1049 2
d1053 4
a1056 1
	    tp->control.step_range_start = tp->control.step_range_end = 1;
d1345 1
@


1.329
log
@gdb/
	* event-top.c (display_gdb_prompt): Call missing do_cleanups.
	* infcmd.c (get_return_value) <!stop_regs>: Do not overwrite CLEANUP.
	* symfile.c (symfile_bfd_open): New variable back_to.  Do not leave
	a stale cleanup.  Fix double free of NAME.
@
text
@a434 3
#ifdef SOLIB_CREATE_INFERIOR_HOOK
      SOLIB_CREATE_INFERIOR_HOOK (PIDGET (inferior_ptid));
#else
a435 1
#endif
d451 1
a451 7
	    {
#ifdef SOLIB_ADD
	      SOLIB_ADD (NULL, 0, target, auto_solib_add);
#else
	      solib_add (NULL, 0, target, auto_solib_add);
#endif
	    }
@


1.328
log
@make -gdb-exit call disconnect_tracing too, and don't lose history if the target errors on "quit"

Gareth mentions in PR gdb/15275:

 "The MI '-gdb-exit' command mi_cmd_gdb_exit() never calls disconnect_tracing()
 and therefore exits correctly."

It should, so to get out of tfind mode, as quit may detach instead of
kill, and we don't want to confuse the memory/register accesses
etc. of the detach process.  So we should push down the disconnect
tracing bits at least to quit_force.  But we can't as is, as that
would swallow the error thrown by answering "no" to:

  Trace is running but will stop on detach; detach anyway? (y or n)

So to address that, we split disconnect_tracing in two.  One part that
does the query, and another part that does the rest, and we make
quit_force call the latter.

Looking at quit_force, it does several things, some of which are a bit
independent of the others.  It first kills/detaches, and then writes
history, and then runs the final cleanups.  It seems better to me to
do each of these things even if the previous thing throws.  E.g., as
is, if something throws while detaching, then we skip writing history.

Tested on x86_64 Fedora 17.

gdb/
2013-04-10  Pedro Alves  <palves@@redhat.com>

	* cli/cli-cmds.c (quit_command): Call query_if_trace_running
	instead of disconnect_tracing.
	* infcmd.c (detach_command, disconnect_command): Call
	query_if_trace_running.  Adjust.
	* top.c: Include "tracepoint.h".
	(quit_target): Delete.  Contents moved ...
	(quit_force): ... here.  Wrap each stage of teardown in
	TRY_CATCH.  Call disconnect_tracing before detaching.
@
text
@d1455 1
a1455 1
      cleanup = make_cleanup_regcache_xfree (stop_regs);
@


1.327
log
@	PR symtab/8424:
	* blockframe.c (find_pc_partial_function_gnu_ifunc): Check
	SYMBOL_SECTION, not SYMBOL_OBJ_SECTION.
	* breakpoint.c (resolve_sal_pc): Update.
	* elfread.c (elf_gnu_ifunc_record_cache): Update.
	* findvar.c (struct minsym_lookup_data) <objfile>: New field.
	(minsym_lookup_iterator_cb): Use it.
	(default_read_var_value): Update.
	* hppa-hpux-tdep.c (hppa64_hpux_in_solib_call_trampoline):
	Update.
	* infcmd.c (jump_command): Update.
	* linespec.c (minsym_found): Update.
	* maint.c (maintenance_translate_address): Update.
	* minsyms.c (lookup_minimal_symbol_by_pc_section_1): Update.
	(prim_record_minimal_symbol_full): Don't set SYMBOL_OBJ_SECTION.
	* parse.c (write_exp_msymbol): Update.
	* printcmd.c (address_info): Update.
	* psymtab.c (find_pc_sect_psymbol): Update.
	(fixup_psymbol_section): Check SYMBOL_SECTION, not
	SYMBOL_OBJ_SECTION.
	(add_psymbol_to_bcache): Correctly initialize SYMBOL_SECTION.
	Don't initialize SYMBOL_OBJ_SECTION.
	* spu-tdep.c (spu_catch_start): Update.
	* stabsread.c (define_symbol): Don't set SYMBOL_SECTION.
	* symmisc.c (dump_msymbols, print_symbol): Update.
	* symtab.c (fixup_section): Don't set 'obj_section'.  Change
	how fallback section is computed.
	(fixup_symbol_section): Update.
	(find_pc_sect_symtab, find_function_start_sal, skip_prologue_sal):
	Update.
	(allocate_symbol, initialize_symbol, allocate_template_symbol):
	Initialize SYMBOL_SECTION.
	* symtab.h (struct general_symbol_info) <section>: Update comment.
	<obj_section>: Remove.
	(SYMBOL_OBJ_SECTION): Add 'objfile' argument.  Rewrite.
	(SYMBOL_OBJFILE): New macro.
@
text
@d2724 3
a2726 1
  disconnect_tracing (from_tty);
d2756 2
a2757 1
  disconnect_tracing (from_tty);
@


1.326
log
@	* minsyms.h (struct bound_minimal_symbol): New.
	(lookup_minimal_symbol_and_objfile): Return bound_minimal_symbol.
	Remove objfile argument.
	(lookup_minimal_symbol_by_pc_section, lookup_minimal_symbol_by_pc):
	Return bound_minimal_symbol.
	* minsyms.c (lookup_minimal_symbol_by_pc_1)
	(lookup_minimal_symbol_by_pc_section, lookup_minimal_symbol_by_pc):
	Return bound_minimal_symbol.
	(in_gnu_ifunc_stub): Update.
	(lookup_minimal_symbol_and_objfile): Return bound_minimal_symbol.
	Remove 'objfile_p' argument.
	(lookup_solib_trampoline_symbol_by_pc): Update.
	* ada-tasks.c, amd64-windows-tdep.c, arm-tdep.c,
	arm-wince-tdep.c, block.c, blockframe.c, breakpoint.c, btrace.c,
	c-valprint.c, dwarf2loc.c, elfread.c, frame.c, frv-tdep.c,
	glibc-tdep.c, gnu-v2-abi.c, gnu-v3-abi.c, hppa-hpux-tdep.c,
	i386-tdep.c, ia64-tdep.c, infcall.c, infcmd.c, jit.c,
	linux-fork.c, m32c-tdep.c, m68hc11-tdep.c, maint.c,
	mips-tdep.c, p-valprint.c, parse.c, ppc-linux-tdep.c,
	ppc-sysv-tdep.c, printcmd.c, rs6000-tdep.c, sh64-tdep.c,
	stack.c, symtab.c, tui/tui-disasm.c: Update.
@
text
@d1173 2
a1174 2
      if (section_is_overlay (SYMBOL_OBJ_SECTION (sfn)) &&
	  !section_is_mapped (SYMBOL_OBJ_SECTION (sfn)))
@


1.325
log
@Constify strings in tracepoint.c, lookup_cmd and the completers.

This is sort of a continuation of Keith's parse_exp_1 constification
patch.  It started out by undoing these bits:

  @@@@ -754,9 +754,12 @@@@ validate_actionline (char **line, struct
   	  tmp_p = p;
   	  for (loc = t->base.loc; loc; loc = loc->next)
   	    {
  -	      p = tmp_p;
  -	      exp = parse_exp_1 (&p, loc->address,
  +	      const char *q;
  +
  +	      q = tmp_p;
  +	      exp = parse_exp_1 (&q, loc->address,
   				 block_for_pc (loc->address), 1);
  +	      p = (char *) q;

and progressively making more things const upwards, fixing fallout,
rinse repeat, until GDB built again (--enable-targets=all).

That ended up constifying lookup_cmd/add_cmd and (lots of) friends,
and the completers.

I didn't try to constify the command hooks themselves, because I know
upfront there are commands that write to the command string argument,
and I think I managed to stop at a nice non-hacky split point already.

I think the only non-really-super-obvious changes are
tracepoint.c:validate_actionline, and tracepoint.c:trace_dump_actions.

The rest is just mostly about 'char *' => 'const char *', 'char **'=>
'const char **', and the occasional (e.g., deprecated_cmd_warning)
case of 'char **'=> 'const char *', where/when I noticed that nothing
actually cares about the pointer to pointer output.

Tested on x86_64 Fedora 17, native and gdbserver.

gdb/
2013-03-13  Pedro Alves  <palves@@redhat.com>

	* ada-lang.c (struct add_partial_datum) <text, text0, word>: Make
	fields const.
	(ada_make_symbol_completion_list): Make "text0" parameter const.
	* ax-gdb.c (agent_eval_command_one): Make "exp" parameter const.
	* breakpoint.c (condition_completer): Make "text" and "word"
	parameters const.  Adjust.
	(check_tracepoint_command): Adjust to validate_actionline
	prototype change.
	(catch_syscall_completer): Make "text" and "word" parameters
	const.
	* cli/cli-cmds.c (show_user): Make "comname" local const.
	(valid_command_p): Make "command" parameter const.
	(alias_command): Make "alias_prefix" and "command_prefix" locals
	const.
	* cli/cli-decode.c (add_cmd): Make "name" parameter const.
	(add_alias_cmd): Make "name" and "oldname" parameters const.
	Adjust.  No longer make copy of OLDNAME.
	(add_prefix_cmd, add_abbrev_prefix_cmd, add_set_or_show_cmd)
	(add_setshow_cmd_full, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_string_noescape_cmd)
	(add_setshow_optional_filename_cmd, add_setshow_integer_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd)
	(add_setshow_zuinteger_unlimited_cmd, add_setshow_zuinteger_cmd)
	(delete_cmd, add_info, add_info_alias, add_com, add_com_alias):
	Make "name" parameter const.
	(help_cmd): Rename "command" parameter to "arg".  New const local
	"command".
	(find_cmd): Make "command" parameter const.
	(lookup_cmd_1): Make "text" parameter pointer to const.  Adjust to
	deprecated_cmd_warning prototype change.
	(undef_cmd_error): Make "cmdtype" parameter const.
	(lookup_cmd): Make "line" parameter const.
	(deprecated_cmd_warning): Change type of "text" parameter to
	pointer to const char, from pointer to pointer to char.  Adjust.
	(lookup_cmd_composition): Make "text" parameter const.
	(complete_on_cmdlist, complete_on_enum): Make "text" and "word"
	parameters const.
	* cli/cli-decode.h (struct cmd_list_element) <name>: Make field
	const.
	* cli/cli-script.c (validate_comname): Make "tem" local const.
	(define_command): New const local "tem_c".  Use it in calls to
	lookup_cmd.
	(document_command): Make "tem" and "comfull" locals const.
	(show_user_1): Make "prefix" and "name" parameters const.
	* cli-script.h (show_user_1): Make "prefix" and "name" parameters
	const.
	* command.h (add_cmd, add_alias_cmd, add_prefix_cmd)
	(add_abbrev_prefix_cmd, completer_ftype, lookup_cmd, lookup_cmd_1)
	(deprecated_cmd_warning, lookup_cmd_composition, add_com)
	(add_com_alias, add_info, add_info_alias, complete_on_cmdlist)
	(complete_on_enum, add_setshow_enum_cmd)
	(add_setshow_auto_boolean_cmd, add_setshow_boolean_cmd)
	(add_setshow_filename_cmd, add_setshow_string_cmd)
	(add_setshow_string_noescape_cmd)
	(add_setshow_optional_filename_cmd, add_setshow_integer_cmd)
	(add_setshow_uinteger_cmd, add_setshow_zinteger_cmd)
	(add_setshow_zuinteger_cmd, add_setshow_zuinteger_unlimited_cmd):
	Change prototypes, constifying strings.
	* completer.c (noop_completer, filename_completer): Make "text"
	and "prefix" parameters const.
	(location_completer, expression_completer)
	(complete_line_internal): Make "text" and "prefix" parameters
	const and adjust.
	(command_completer, signal_completer): Make "text" and "prefix"
	parameters const.
	* completer.h (noop_completer, filename_completer)
	(expression_completer, location_completer, command_completer)
	(signal_completer): Change prototypes.
	* corefile.c (complete_set_gnutarget): Make "text" and "word"
	parameters const.
	* cp-abi.c (cp_abi_completer): Likewise.
	* expression.h (parse_expression_for_completion): Change
	prototype.
	* f-lang.c (f_make_symbol_completion_list): Make "text" and "word"
	parameters const.
	* infcmd.c (_initialize_infcmd): Make "cmd_name" local const.
	* infrun.c (handle_completer): Make "text" and "word" parameters
	const.
	* interps.c (interpreter_completer): Make "text" and "word"
	parameters const.
	* language.h (struct language_defn)
	<la_make_symbol_completion_list>: Make "text" and "word"
	parameters const.
	* parse.c (parse_exp_1): Move const hack to parse_exp_in_context.
	(parse_exp_in_context): Rename to ...
	(parse_exp_in_context_1): ... this.
	(parse_exp_in_context): Reimplement, with const hack from
	parse_exp_1.
	(parse_expression_for_completion): Make "string" parameter const.
	* printcmd.c (decode_format): Make "string_ptr" parameter pointer
	to pointer to const char.  Adjust.
	(print_command_1): Make "exp" parameter const.
	(output_command): Rename to ...
	(output_command_const): ... this.  Make "exp" parameter const.
	(output_command): Reimplement.
	(x_command): Adjust.
	(display_command): Rename "exp" parameter to "arg".  New "exp"
	local, const version of "arg".
	* python/py-auto-load.c (gdbpy_initialize_auto_load): Make
	"cmd_name" local const.
	* python/py-cmd.c (cmdpy_destroyer): Cast const away in xfree
	call.
	(cmdpy_completer): Make "text" and "word" parameters const.
	(gdbpy_parse_command_name): Make "prefix_text2" local const.
	* python/py-param.c (add_setshow_generic): Make "tmp_name" local
	const.
	* remote.c (_initialize_remote): Make "cmd_name" local const.
	* symtab.c (language_search_unquoted_string): Make "text" and "p"
	parameters const.  Adjust.
	(completion_list_add_fields): Make "sym_text", "text" and "word"
	parameters const.
	(struct add_name_data) <sym_text, text, word>: Make fields const.
	(default_make_symbol_completion_list_break_on): Make "text" and
	"word" parameters const.  Adjust locals.
	(default_make_symbol_completion_list)
	(make_symbol_completion_list, make_symbol_completion_type)
	(make_symbol_completion_list_fn): Make "text" and "word"
	parameters const.
	(make_file_symbol_completion_list): Make "text", "word" and
	"srcfile" parameters const.  Adjust locals.
	(add_filename_to_list): Make "text" and "word" parameters const.
	(struct add_partial_filename_data) <text, word>: Make fields
	const.
	(make_source_files_completion_list): Make "text" and "word"
	parameters const.
	* symtab.h (default_make_symbol_completion_list_break_on)
	(default_make_symbol_completion_list, make_symbol_completion_list)
	(make_symbol_completion_type enum type_code)
	(make_symbol_completion_list_fn make_file_symbol_completion_list)
	(make_source_files_completion_list): Change prototype.
	* top.c (execute_command): Adjust to pass pointer to pointer to
	const char to lookup_cmd, and to deprecated_cmd_warning prototype
	change.
	(set_verbose): Make "cmdname" local const.
	* tracepoint.c (decode_agent_options): Make "exp" parameter const,
	and adjust.
	(validate_actionline): Make "line" parameter a pointer to const
	char, and adjust.
	(encode_actions_1): Make "action_exp" local const, and adjust.
	(encode_actions): Adjust.
	(replace_comma): Delete.
	(trace_dump_actions): Make "action_exp" and "next_comma" locals
	const, and adjust.  Don't frob the action string while splitting
	it at commas.  Instead, make a copy of each split substring in
	turn.
	(trace_dump_command): Adjust to validate_actionline prototype
	change.
	* tracepoint.h (decode_agent_options, decode_agent_options)
	(encode_actions, validate_actionline): Change prototypes.
	* valprint.h (output_command): Delete declaration.
	(output_command_const): Declare.
	* value.c (function_destroyer): Cast const away in xfree call.
@
text
@d1335 1
a1335 1
      struct minimal_symbol *msymbol = lookup_minimal_symbol_by_pc (pc);
d1337 1
a1337 1
      if (msymbol == NULL)
d1340 1
a1340 1
      tp->control.step_range_start = SYMBOL_VALUE_ADDRESS (msymbol);
@


1.324
log
@	* breakpoint.c (catch_syscall_split_args): Use skip_spaces.
	(trace_pass_command): Likewise.
	* cli/cli-cmds.c: Include cli/cli-utils.h.
	(source_command): Use skip-spaces.
	(disassemble_command): Likewise.
	* findcmd.c: Include cli/cli-utils.h.
	(parse_find_args): Use skip_spaces.
	* go32-nat.c: Include cli/cli-utils.h.
	(go32_sldt): Use skip_spaces.
	(go32_sgdt): Likewise.
	(go32_sidt): Likewise.
	(go32_pde): Likewise.
	(go32_pte): Likewise.
	(go32_pte_for_address): Likewise.
	* infcmd.c: Include cli/cli-utils.h.
	(registers_info): Use skip_spaces.
	* linux-tdep.c (read_mapping): Use skip_spaces_const.
	(linux_info_proc): Likewise.
	* linux-thread-db.c: Include cli/cli-utils.h.
	(info_auto_load_libthread_db): Use skip_spaces_const.
	* m32r-rom.c: Include cli/cli-utils.h.
	(m32r_upload_command): Use skip_spaces.
	* maint.c: Include cli/cli-utils.h.
	(maintenance_translate_address): Use skip_spaces.
	* mi/mi-parse.c: Include cli/cli-utils.h.
	(mi_parse_argv): Use skip_spaces.
	(mi_parse): Likewise.
	* minsyms.c: Include cli/cli-utils.h.
	(msymbol_hash_iw): Use skip_spaces_const.
	* objc-lang.c: Include cli/cli-utils.h.
	(parse_selector): Use skip_spaces.
	(parse_method): Likewise.
	* python/python.c: Include cli/cli-utils.h.
	(python_interactive_command)[HAVE_PYTHON]: Use skip_spaces.
	(python_command)[HAVE_PYTHON]: Likewise.
	(python_interactive_command)[!HAVE_PYTHON]: Likewise.
	* remote-m32r-sdi.c: Include cli/cli-utils.h.
	(m32r_load): Use skip_spaces.
	* serial.c: Include cli/cli-utils.h.
	(serial_open): Use skip_spaces_const.
	* stack.c: Include cli/cli-utils.h.
	(parse_frame_specification_1): Use skip_spaces_const.
	* symfile.c: Include cli/cli-utils.h.
	(set_ext_lang_command): Use skip_spaces.
	* symtab.c: Include cli/cli-utils.h.
	(rbreak_command): Use skip_spaces.
	* thread.c (thread_name_command): Use skip_spaces.
	* tracepoint.c (validate_actionline): Use skip_spaces.
	(encode_actions_1): Likewise.
	(trace_find_range_command): Likewise.
	(trace_find_outside_command): Likewise.
	(trace_dump_actions): Likewise.
@
text
@d2941 1
a2941 1
  char *cmd_name;
@


1.323
log
@gdb/
	* infcmd.c (breakpoint_proceeded): Remove it.
@
text
@d59 1
d2189 2
a2190 6
      /* Keep skipping leading white space.  */
      if (isspace ((*addr_exp)))
	{
	  addr_exp++;
	  continue;
	}
@


1.322
log
@2013-01-31  Aleksandar Ristovski  <aristovski@@qnx.com>

	* charset.c (intermediate_encoding): Remove unused i.
	* completer.c (signal_completer): Remove unused i.
	* continuations.c (discard_my_continuations_1): Remove unused
	continuation_ptr.
	* corelow.c (core_close): Remove unuseD name.
	(get_core_siginfo): Remove unused pid.
	* cp-namespace.c (cp_lookup_symbol_imports_or_template): Remove unused
	i, cps.
	* dwarf2loc.c (dwarf2_compile_expr_to_ax): Remove unused base_offset.
	(loclist_describe_location): Remove unused first.
	* event-top.c (command_line_handler): Remove unused got_eof.
	* exec.c (exec_close_1): Remove unused need_symtab_cleanup.
	(resize_section_table): Remove unused old_value.
	* gdb_bfd.c (gdb_bfd_map_section): Remove unused header.
	* gnu-v3-abi.c (compute_vtable_size): Remove unused addr.
	* i386-tdep.c (i386_process_record): Remove unused rex.
	* infcmd.c (get_return_value): Remove unused uiout.
	* jv-lang.c (type_from_class): Remove unused is_array.
	* jv-valprint.c (java_val_print): Remove unused i.
	* linux-nat.c (linux_nat_stop_lwp): Remove unused ptid.
	* linux-thread-db.c (thread_db_find_new_threads_2): Remove unuseD pid.
	* m2-typeprint.c (m2_print_type): Remove unused code.
	* macroexp.c (get_character_constant): Remove unused body_start.
	(macro_stringify): Remove unused result.
	* objc-lang.c (find_methods): Remove unused gdbarch.
	* objfiles.c (filter_overlapping_sections): Remove unused abfd1, abfd2.
	* regcache.c (regcache_cooked_read): Remove unused gdbarch.
	* stack.c (print_frame_args): Remove unused summary.
	* thread.c (thread_apply_command): Remove unused p.
	* valarith.c (value_x_unop): Remove unused mangle_ptr.
	* valops.c (search_struct_method): Remove unused skip.
	* valprint.c (generic_val_print): Remove unused byte_order.
	* varobj.c (varobj_update): Remove unused changed.
	* cli/cli-cmds.c (complete_command): Remove unused next_item.
	(alias_command): Remove unused c.
	* mi/mi-cmd-catch.c (mi_catch_load_unload): Remove unused c.
	* mi/mi-main.c (mi_cmd_data_write_register_values): Remove unused
	format.
	(mi_cmd_data_write_memory): Remove unused word_format.
	(mi_cmd_data_write_memory_bytes): Remove unused r.
	* python/py-gdb-readline.c (gdbpy_readline_wrapper): Remove unused
	p_start, p_end.
	* python/python.c (_initialize_python): Remove unused cmd_name, cmd.
	* tui/tui-disasm.c (tui_set_disassem_content): Remove unused
	line_width.

Reference: http://sourceware.org/ml/gdb-patches/2013-01/msg00766.html
@
text
@a139 5
/* Flag indicating that a command has proceeded the inferior past the
   current breakpoint.  */

int breakpoint_proceeded;

@


1.321
log
@gdb/
	* infcmd.c (step_once): Don't check '!single_inst' as it was
	checked before.
@
text
@a1452 1
  struct ui_out *uiout = current_uiout;
@


1.320
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d1035 1
a1035 1
	  if (!skip_subroutines && !single_inst
@


1.319
log
@	* infcmd.c (all_registers_info, nexti_command, stepi_command)
	(continue_command, interrupt_target_command): Now static.
	(registers_info): Remove declaration.
	* inferior.h (all_registers_info, nexti_command, stepi_command)
	(continue_command, interrupt_target_command): Don't declare.
@
text
@d3 1
a3 1
   Copyright (C) 1986-2012 Free Software Foundation, Inc.
@


1.318
log
@gdb
        * NEWS: Mention "info proc" and core files.
        * corelow.c (core_info_proc): New function.
        (init_core_ops): Set to_info_proc.
        * gdbarch.c, gdbarch.h: Rebuild.
        * gdbarch.sh (core_info_proc): New method.
        * infcmd.c (info_proc_cmd_1): Invoke target_info_proc first.
        * linux-tdep.c (linux_core_info_proc_mappings)
        (linux_core_info_proc): New functions.
        (linux_find_memory_region_ftype): New typedef.
        (linux_find_memory_regions_full): New function, from
        linux_find_memory_regions.
        (struct linux_find_memory_regions_data): New.
        (linux_find_memory_regions_thunk): New function.
        (linux_find_memory_regions): Rewrite.
        (struct linux_make_mappings_data): New.
        (linux_make_mappings_callback)
        (linux_make_mappings_corefile_notes): New functions.
        (linux_make_corefile_notes): Call linux_make_mappings_corefile_notes.
        (linux_init_abi): Call set_gdbarch_core_info_proc.
        * target.c (target_info_proc): Return 'int'.
        * target.h (target_info_proc): Update.
gdb/doc
        * gdb.texinfo (SVR4 Process Information): Mention core files.
gdb/testsuite
        * gdb.base/info-proc.exp: Add core file tests.
bfd
        * elf.c (elfcore_grok_note) <NT_FILE>: New case.
@
text
@a59 14
/* Functions exported for general use, in inferior.h: */

void all_registers_info (char *, int);

void registers_info (char *, int);

void nexti_command (char *, int);

void stepi_command (char *, int);

void continue_command (char *, int);

void interrupt_target_command (char *args, int from_tty);

d745 1
a745 1
void
d864 1
a864 1
void
d870 1
a870 1
void
d2283 1
a2283 1
void
d2798 1
a2798 1
void
@


1.317
log
@gdb/
2012-11-30  Yao Qi  <yao@@codesourcery.com>

	* infrun.c (error_is_running, ensure_not_running): Move them
	to ...
	* infcmd.c (error_is_running, ensure_not_running): ... here.
	Make them 'static'.
	* inferior.h: Remove declarations of error_is_running and
	ensure_not_running.
@
text
@d2886 7
a2892 4
  if (gdbarch_info_proc_p (gdbarch))
    gdbarch_info_proc (gdbarch, args, what);
  else
    target_info_proc (args, what);
@


1.316
log
@rename frame_register_read into deprecated_frame_register_read.

gdb/ChangeLog:

        * frame.h (deprecated_frame_register_read): Renames
        frame_register_read.
        * frame.c (deprecated_frame_register_read): Renames
        frame_register_read.  Update all callers.
        * i386-tdep.c: Update all callers of frame_register_read.
        * infcmd.c: Likewise.
        * jit.c: Likewise.
        * mips-tdep.c: Likewise.
        * mt-tdep.c: Likewise.
        * sh64-tdep.c: Likewise.
@
text
@d711 18
@


1.315
log
@	* gdbarch.sh (target_gdbarch): Remove macro.
	(get_target_gdbarch): Rename to target_gdbarch.
	* gdbarch.c, gdbarch.h: Rebuild.
	* ada-tasks.c, aix-thread.c, amd64-linux-nat.c, arch-utils.c,
	arm-tdep.c, auxv.c, breakpoint.c, bsd-uthread.c, corefile.c,
	darwin-nat-info.c, dcache.c, dsrec.c, exec.c, fbsd-nat.c,
	filesystem.c, gcore.c, gnu-nat.c, i386-darwin-nat.c, i386-nat.c,
	ia64-vms-tdep.c, inf-ptrace.c, infcmd.c, jit.c, linux-nat.c,
	linux-tdep.c, linux-thread-db.c, m32r-rom.c, memattr.c,
	mep-tdep.c, microblaze-tdep.c, mips-linux-nat.c,
	mips-linux-tdep.c, mips-tdep.c, monitor.c, moxie-tdep.c,
	nto-procfs.c, nto-tdep.c, ppc-linux-nat.c, proc-service.c,
	procfs.c, progspace.c, ravenscar-thread.c, record.c,
	remote-m32r-sdi.c, remote-mips.c, remote-sim.c, remote.c,
	rl78-tdep.c, rs6000-nat.c, rx-tdep.c, s390-nat.c, sol-thread.c,
	solib-darwin.c, solib-dsbt.c, solib-frv.c, solib-ia64-hpux.c,
	solib-irix.c, solib-pa64.c, solib-som.c, solib-spu.c,
	solib-sunos.c, solib-svr4.c, solib.c, spu-linux-nat.c,
	spu-multiarch.c, spu-tdep.c, symfile-mem.c, symfile.c, symtab.c,
	target-descriptions.c, target.c, target.h, tracepoint.c,
	windows-nat.c, windows-tdep.c, xcoffsolib.c, cli/cli-dump.c,
	common/agent.c, mi/mi-interp.c, python/py-finishbreakpoint.c,
	python/py-inferior.c, python/python.c: Update.
@
text
@d2158 1
a2158 1
      if (! frame_register_read (frame, i, value_contents_raw (val)))
@


1.314
log
@gdb/ChangeLog:
2012-09-18  Sergio Durigan Junior  <sergiodj@@redhat.com>

	* infcmd.c (_initialize_infcmd): Register `j' as an alias for
	`jump'.

gdb/doc/ChangeLog:
2012-09-18  Sergio Durigan Junior  <sergiodj@@redhat.com>

	* gdb.texinfo (jump): Mention new alias `j' for `jump'.
@
text
@d472 1
a472 1
	  if (!gdbarch_has_global_solist (target_gdbarch))
d1842 1
a1842 1
		   paddress (target_gdbarch, stop_pc));
d2545 1
a2545 1
  if (gdbarch_has_global_solist (target_gdbarch))
d2735 1
a2735 1
  if (!gdbarch_has_global_solist (target_gdbarch))
@


1.313
log
@gdb/
	PR 14119
	* frame.c (skip_inlined_frames): Skip also TAILCALL_FRAME frames.
	(frame_pop): Drop also TAILCALL_FRAME frames.
	* infcmd.c (finish_command): Ignore also TAILCALL_FRAME frames.

gdb/testsuite/
	PR 14119
	* gdb.arch/amd64-tailcall-ret.S: New file.
	* gdb.arch/amd64-tailcall-ret.c: New file.
	* gdb.arch/amd64-tailcall-ret.exp: New file.
	* gdb.reverse/amd64-tailcall-reverse.S: New file.
	* gdb.reverse/amd64-tailcall-reverse.c: New file.
	* gdb.reverse/amd64-tailcall-reverse.exp: New file.
@
text
@d3107 1
@


1.312
log
@2012-08-28  Pedro Alves  <palves@@redhat.com>

	PR gdb/14428

	gdb/
	* infcmd.c (default_print_one_register_info): New, factored out
	from default_print_registers_info.
	(default_print_registers_info): Use it.  Mark value unavailable if
	necessary.
	(registers_info): Print user registers with
	default_print_one_register_info.

	gdb/testsuite/
	* gdb.base/pc-fp.exp: Adjust expected output of 'info registers pc fp'.
@
text
@d1780 5
@


1.311
log
@2012-08-23  Pedro Alves  <palves@@redhat.com>

	* infcmd.c (_initialize_infcmd) <signal command>: Fix typo in help
	string.
@
text
@d2018 78
a2148 4
      fputs_filtered (gdbarch_register_name (gdbarch, i), file);
      print_spaces_filtered (15 - strlen (gdbarch_register_name
					  (gdbarch, i)), file);

d2154 1
a2154 26
	{
	  fprintf_filtered (file, "*value not available*\n");
	  continue;
	}

      /* If virtual format is floating, print it that way, and in raw
         hex.  */
      if (TYPE_CODE (regtype) == TYPE_CODE_FLT
	  || TYPE_CODE (regtype) == TYPE_CODE_DECFLOAT)
	{
	  int j;
	  struct value_print_options opts;
	  const gdb_byte *valaddr = value_contents_for_printing (val);

	  get_user_print_options (&opts);
	  opts.deref_ref = 1;

	  val_print (regtype,
		     value_contents_for_printing (val),
		     value_embedded_offset (val), 0,
		     file, 0, val, &opts, current_language);

	  fprintf_filtered (file, "\t(raw 0x");
	  for (j = 0; j < register_size (gdbarch, i); j++)
	    {
	      int idx;
d2156 3
a2158 34
	      if (gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG)
		idx = j;
	      else
		idx = register_size (gdbarch, i) - 1 - j;
	      fprintf_filtered (file, "%02x", (unsigned char) valaddr[idx]);
	    }
	  fprintf_filtered (file, ")");
	}
      else
	{
	  struct value_print_options opts;

	  /* Print the register in hex.  */
	  get_formatted_print_options (&opts, 'x');
	  opts.deref_ref = 1;
	  val_print (regtype,
		     value_contents_for_printing (val),
		     value_embedded_offset (val), 0,
		     file, 0, val, &opts, current_language);
          /* If not a vector register, print it also according to its
             natural format.  */
	  if (TYPE_VECTOR (regtype) == 0)
	    {
	      get_user_print_options (&opts);
	      opts.deref_ref = 1;
	      fprintf_filtered (file, "\t");
	      val_print (regtype,
			 value_contents_for_printing (val),
			 value_embedded_offset (val), 0,
			 file, 0, val, &opts, current_language);
	    }
	}

      fprintf_filtered (file, "\n");
d2219 10
a2228 11
		struct value_print_options opts;
		struct value *val = value_of_user_reg (regnum, frame);

		printf_filtered ("%.*s: ", (int) (end - start), start);
		get_formatted_print_options (&opts, 'x');
		val_print_scalar_formatted (check_typedef (value_type (val)),
					    value_contents_for_printing (val),
					    value_embedded_offset (val),
					    val,
					    &opts, 0, gdb_stdout);
		printf_filtered ("\n");
@


1.310
log
@gdb: fix test failures after updating usage strings
@
text
@d3022 1
a3022 1
The SIGNAL arugment is processed the same as the handle command.\n\
@


1.309
log
@gdb: improve usage strings

This adds Usage strings to a bunch of commands, tweaks the grammar in a
few, and improves the help text for the handle command.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d3054 1
a3054 1
the call, in effect treating it as a single source line.)"));
@


1.308
log
@gdb: add completion handler for "handle" and "signal"

The command line completion has spoiled me.  Thus the lack of completion with
the "handle" command annoys me.  Patch!

This does a few things:
 - adds a VEC_merge helper
 - adds a generic signal completer
 - adds a completion handler for the "handle" command
 - sets the completion handler for the "signal" command

URL: http://sourceware.org/bugzilla/show_bug.cgi?id=10436
Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d3020 7
a3026 2
Continue program giving it signal specified by the argument.\n\
An argument of \"0\" means continue program without giving it a signal."));
d3031 2
a3032 1
Argument N means do this N times (or till program stops for another \
d3038 2
a3039 1
Argument N means do this N times (or till program stops for another \
d3045 1
d3051 4
a3054 4
Like the \"step\" command as long as subroutine calls do not happen;\n\
when they do, the call is treated as one instruction.\n\
Argument N means do this N times (or till program stops for another \
reason)."));
d3061 2
a3062 1
Argument N means do this N times (or till program stops for another \
d3081 1
d3103 1
@


1.307
log
@	* cli/cli-setshow.c (do_setshow_command): Handle case 'var_filename'
	and case 'var_optional_filename' together.
	* infcmd.c (_initialize_infcmd): Call add_setshow_string_noescape_cmd
	instead of add_setshow_optional_filename_cmd for setshow command
	'args'.  Set completer for 'set args'.

gdb/testsuite:

	* gdb.base/setshow.exp: Test 'set args ~'.
@
text
@d3019 1
a3019 1
  add_com ("signal", class_run, signal_command, _("\
d3022 1
@


1.306
log
@	* linespec.c: #include "stack.h".
	(decode_line_with_current_source): Moved here from symtab.c and
	renamed from decode_line_spec.  All callers updated.
	(decode_line_with_last_displayed): Moved here from breakpoint.c and
	renamed from decode_line_spec_1.  All callers updated.
	* linespec.h (decode_line_with_current_source): Move declaration here
	from symtab.h and renamed from decode_line_spec.
	(decode_line_with_last_displayed): Move declaration here from symtab.h
	and renamed from decode_line_spec_1.
	* macrocmd.c: #include "linespec.h".
	* symtab.c: Remove #include "linespec.h".
@
text
@d2921 1
d2934 3
a2936 2
  add_setshow_optional_filename_cmd ("args", class_run,
				     &inferior_args_scratch, _("\
d2940 6
a2945 3
				     set_args_command,
				     show_args_command,
				     &setlist, &showlist);
@


1.306.2.1
log
@gdb/
	PR 14119
	* frame.c (skip_inlined_frames): Skip also TAILCALL_FRAME frames.
	(frame_pop): Drop also TAILCALL_FRAME frames.
	* infcmd.c (finish_command): Ignore also TAILCALL_FRAME frames.

gdb/testsuite/
	PR 14119
	* gdb.arch/amd64-tailcall-ret.S: New file.
	* gdb.arch/amd64-tailcall-ret.c: New file.
	* gdb.arch/amd64-tailcall-ret.exp: New file.
	* gdb.reverse/amd64-tailcall-reverse.S: New file.
	* gdb.reverse/amd64-tailcall-reverse.c: New file.
	* gdb.reverse/amd64-tailcall-reverse.exp: New file.
@
text
@a1779 5
  /* Ignore TAILCALL_FRAME type frames, they were executed already before
     entering THISFRAME.  */
  while (get_frame_type (frame) == TAILCALL_FRAME)
    frame = get_prev_frame (frame);

@


1.305
log
@Fix quoting of special characters for the MinGW build.

 infcmd.c (construct_inferior_arguments) [__MINGW32__]: Quote
 special characters correctly for the Windows shells.  See
 http://sourceware.org/ml/gdb/2012-06/msg00047.html for the bug
 report.
 [!__MINGW32__]: Remove extra double quote character from special
 characters.
@
text
@d1143 1
a1143 1
  sals = decode_line_spec_1 (arg, DECODE_LINE_FUNFIRSTLINE);
@


1.304
log
@gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

gdb/gdbserver/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

include/gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        * gdb/signals.def: Replace TARGET_SIGNAL_ with GDB_SIGNAL_
	throughout.

sim/arm/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/avr/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/common/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/cr16/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/d10v/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/erc32/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/m32c/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/ppc/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/rl78/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/rx/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.
@
text
@d278 6
d287 3
a289 1
      char *special = "\"!#$&*()\\|[]{}<>?'\"`~^; \t\n";
d309 2
a310 2
	      *out++ = '\'';
	      *out++ = '\'';
d314 9
d330 1
a330 1
		      *out++ = '\'';
d332 1
a332 1
		      *out++ = '\'';
d336 3
d340 1
d345 4
@


1.303
log
@gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

gdb/gdbserver/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

include/gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

sim/common/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.
@
text
@d610 1
a610 1
  proceed (regcache_read_pc (get_current_regcache ()), TARGET_SIGNAL_0, 0);
d663 1
a663 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d711 1
a711 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d1067 1
a1067 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
d1178 1
a1178 1
  proceed (addr, TARGET_SIGNAL_0, 0);
d1235 1
a1235 1
  if (oursig == TARGET_SIGNAL_UNKNOWN)
d1241 1
a1241 1
	oursig = TARGET_SIGNAL_0;
d1248 1
a1248 1
      if (oursig == TARGET_SIGNAL_0)
d1333 1
a1333 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
d1625 1
a1625 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d1632 1
a1632 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
d1674 1
a1674 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d1751 1
a1751 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
d1831 1
a1831 1
  else if (tp->suspend.stop_signal != TARGET_SIGNAL_0)
d2317 1
a2317 1
   reported a clean stop (TARGET_SIGNAL_0).  Do not proceed threads
d2330 1
a2330 1
      && thread->suspend.stop_signal == TARGET_SIGNAL_0)
d2334 1
a2334 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d2431 1
a2431 1
	  if (inferior_thread ()->suspend.stop_signal == TARGET_SIGNAL_0)
d2434 1
a2434 1
	      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d2615 1
a2615 1
     target reports a signal != TARGET_SIGNAL_0.  We don't try to
@


1.302
log
@	gdb/
	* breakpoint.h (bp_location): Add related_address member.
	* inferior.h (get_return_value): Take a pointer to struct value
	instead of struct type for the function requested.
	* value.h (using_struct_return): Likewise.
	* gdbarch.sh (return_value): Take a pointer to struct value
	instead of struct type for the function requested.
	* breakpoint.c (set_breakpoint_location_function): Initialize
	related_address for bp_gnu_ifunc_resolver breakpoints.
	* elfread.c (elf_gnu_ifunc_resolver_return_stop): Pass the
	requested function's address to gdbarch_return_value.
	* eval.c (evaluate_subexp_standard): Pass the requested
	function's address to using_struct_return.
	* infcall.c (call_function_by_hand): Pass the requested
	function's address to using_struct_return and
	gdbarch_return_value.
	* infcmd.c (get_return_value): Take a pointer to struct value
	instead of struct type for the function requested.
	(print_return_value): Update accordingly.
	(finish_command_continuation): Likewise.
	* stack.c (return_command): Pass the requested function's
	address to using_struct_return and gdbarch_return_value.
	* value.c (using_struct_return): Take a pointer to struct value
	instead of struct type for the function requested.  Pass the
	requested function's address to gdbarch_return_value.
	* python/py-finishbreakpoint.c (finish_breakpoint_object):
	New function_value member, replacing function_type.
	(bpfinishpy_dealloc): Update accordingly.
	(bpfinishpy_pre_stop_hook): Likewise.
	(bpfinishpy_init): Likewise.  Record the requested function's
	address.
	* mips-tdep.c (mips_fval_reg): New enum.
	(mips_o32_push_dummy_call): For MIPS16 FP doubles do not swap
	words put in GP registers.
	(mips_o64_push_dummy_call): Update a comment.
	(mips_o32_return_value): Take a pointer to struct value instead
	of struct type for the function requested and use it to check if
	using the MIPS16 calling convention.  Return the designated
	general purpose registers for floating-point values returned in
	MIPS16 mode.
	(mips_o64_return_value): Likewise.
	* ppc-tdep.h (ppc_sysv_abi_return_value): Update prototype.
	(ppc_sysv_abi_broken_return_value): Likewise.
	(ppc64_sysv_abi_return_value): Likewise.
	* alpha-tdep.c (alpha_return_value): Take a pointer to struct
	value instead of struct type for the function requested.
	* amd64-tdep.c (amd64_return_value): Likewise.
	* amd64-windows-tdep.c (amd64_windows_return_value): Likewise.
	* arm-tdep.c (arm_return_value): Likewise.
	* avr-tdep.c (avr_return_value): Likewise.
	* bfin-tdep.c (bfin_return_value): Likewise.
	* cris-tdep.c (cris_return_value): Likewise.
	* frv-tdep.c (frv_return_value): Likewise.
	* h8300-tdep.c (h8300_return_value): Likewise.
	(h8300h_return_value): Likewise.
	* hppa-tdep.c (hppa32_return_value): Likewise.
	(hppa64_return_value): Likewise.
	* i386-tdep.c (i386_return_value): Likewise.
	* ia64-tdep.c (ia64_return_value): Likewise.
	* iq2000-tdep.c (iq2000_return_value): Likewise.
	* lm32-tdep.c (lm32_return_value): Likewise.
	* m32c-tdep.c (m32c_return_value): Likewise.
	* m32r-tdep.c (m32r_return_value): Likewise.
	* m68hc11-tdep.c (m68hc11_return_value): Likewise.
	* m68k-tdep.c (m68k_return_value): Likewise.
	(m68k_svr4_return_value): Likewise.
	* m88k-tdep.c (m88k_return_value): Likewise.
	* mep-tdep.c (mep_return_value): Likewise.
	* microblaze-tdep.c (microblaze_return_value): Likewise.
	* mn10300-tdep.c (mn10300_return_value): Likewise.
	* moxie-tdep.c (moxie_return_value): Likewise.
	* mt-tdep.c (mt_return_value): Likewise.
	* ppc-linux-tdep.c (ppc_linux_return_value): Likewise.
	* ppc-sysv-tdep.c (ppc_sysv_abi_return_value): Likewise.
	(ppc_sysv_abi_broken_return_value): Likewise.
	(ppc64_sysv_abi_return_value): Likewise.
	* ppcnbsd-tdep.c (ppcnbsd_return_value): Likewise.
	* rl78-tdep.c (rl78_return_value): Likewise.
	* rs6000-aix-tdep.c (rs6000_return_value): Likewise.
	* rx-tdep.c (rx_return_value): Likewise.
	* s390-tdep.c (s390_return_value): Likewise.
	* score-tdep.c (score_return_value): Likewise.
	* sh-tdep.c (sh_return_value_nofpu): Likewise.
	(sh_return_value_fpu): Likewise.
	* sh64-tdep.c (sh64_return_value): Likewise.
	* sparc-tdep.c (sparc32_return_value): Likewise.
	* sparc64-tdep.c (sparc64_return_value): Likewise.
	* spu-tdep.c (spu_return_value): Likewise.
	* tic6x-tdep.c (tic6x_return_value): Likewise.
	* v850-tdep.c (v850_return_value): Likewise.
	* vax-tdep.c (vax_return_value): Likewise.
	* xstormy16-tdep.c (xstormy16_return_value): Likewise.
	* xtensa-tdep.c (xtensa_return_value): Likewise.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.

	gdb/testsuite/
	* gdb.base/return-nodebug.exp: Also test float and double types.
@
text
@d1201 1
a1201 1
  enum target_signal oursig;
d1233 1
a1233 1
  oursig = target_signal_from_name (signum_exp);
d1243 1
a1243 1
	oursig = target_signal_from_command (num);
d1252 1
a1252 1
			 target_signal_to_name (oursig));
d1834 2
a1835 2
		       target_signal_to_name (tp->suspend.stop_signal),
		       target_signal_to_string (tp->suspend.stop_signal));
@


1.301
log
@2012-03-27  Pedro Alves  <palves@@redhat.com>

	Eliminate struct ui_stream.

	* ui-out.h (struct ui_stream): Delete.
	(ui_out_field_stream): Adjust prototype.
	(ui_out_stream_new, ui_out_stream_delete)
	(make_cleanup_ui_out_stream_delete): Delete declarations.
	* ui-out.c (ui_out_field_stream): Change prototype to take a
	ui_file instead of a ui_stream.  Adjust.
	(ui_out_stream_new, ui_out_stream_delete, do_stream_delete)
	(make_cleanup_ui_out_stream_delete): Delete.
	* breakpoint.c (print_breakpoint_location)
	(print_one_detail_ranged_breakpoint, print_it_watchpoint): Use
	ui_file/mem_fileopen instead of ui_stream/ui_out_stream_new.
	* disasm.c (dump_insns): Ditto.
	(do_mixed_source_and_assembly, do_assembly_only): Adjust
	prototype.
	(gdb_disassembly): Use ui_file/mem_fileopen instead of
	ui_stream/ui_out_stream_new.
	* infcmd.c (print_return_value): Ditto.
	* osdata.c (info_osdata_command): Don't allocate a local
	ui_stream.
	* stack.c (print_frame_arg, print_frame_args, print_frame): Use
	ui_file/mem_fileopen instead of ui_stream/ui_out_stream_new.
	* tracepoint.c (print_one_static_tracepoint_marker): Don't
	allocate a local ui_stream.
	* mi/mi-cmd-stack.c (list_arg_or_local): Use ui_file/mem_fileopen
	instead of ui_stream/ui_out_stream_new.
	(list_args_or_locals): Don't allocate a local ui_stream.
	* mi/mi-main.c (get_register, mi_cmd_data_evaluate_expression)
	(mi_cmd_data_read_memory): Use ui_file/mem_fileopen instead of
	ui_stream/ui_out_stream_new.
	* cli/cli-setshow.c (do_setshow_command): Ditto.
@
text
@d78 1
a78 1
static void print_return_value (struct type *func_type,
d1419 1
a1419 1
get_return_value (struct type *func_type, struct type *value_type)
d1446 1
a1446 1
  switch (gdbarch_return_value (gdbarch, func_type, value_type,
d1453 1
a1453 1
      gdbarch_return_value (gdbarch, func_type, value_type, stop_regs,
d1471 1
a1471 1
print_return_value (struct type *func_type, struct type *value_type)
d1473 1
a1473 1
  struct value *value = get_return_value (func_type, value_type);
d1551 1
d1553 1
d1559 1
a1559 1
		  print_return_value (SYMBOL_TYPE (a->function), value_type);
@


1.300
log
@2012-03-01  Pedro Alves  <palves@@redhat.com>

	* amd64-linux-tdep.c (amd64_linux_record_signal): Make static.
	* breakpoint.c (create_exception_master_breakpoint, trace_command)
	(ftrace_command, strace_command): Make static.
	* d-lang.c (_initialize_d_language): Declare.
	* dwarf2expr.c (_initialize_dwarf2expr): Declare.
	* dwarf2loc.c (_initialize_dwarf2loc):
	* dwarf2read.c (process_psymtab_comp_unit): Make static.
	* exec.c (exec_get_section_table): Make static.
	* i386-linux-tdep.c (i386_linux_record_signal): Make static.
	* infcmd.c (ensure_valid_thread, ensure_not_tfind_mode): Make static.
	* inferior.c (remove_inferior_command, add_inferior_command)
	(clone_inferior_command): Make static.
	* linux-nat.c (linux_nat_thread_address_space)
	(linux_nat_core_of_thread): Make static.
	* linux-tdep.c (_initialize_linux_tdep): Declare.
	* objc-lang.c (_initialize_objc_lang): Declare.
	* opencl-lang.c (builtin_opencl_type, opencl_language_arch_info):
	Make static.
	(_initialize_opencl_language): Declare.
	* record.c (_initialize_record): Declare.
	* remote.c (demand_private_info, remote_get_tib_address)
	(remote_supports_cond_tracepoints)
	(remote_supports_fast_tracepoints, remote_get_tracepoint_status):
	Make static.
	* skip.c (_initialize_step_skip): Declare.
	* symtab.c (skip_prologue_using_lineinfo): Make static.
	* tracepoint.c (delete_trace_state_variable)
	(trace_variable_command, delete_trace_variable_command)
	(get_uploaded_tsv, find_matching_tracepoint_location)
	(find_matching_tsv, create_tsv_from_upload, get_traceframe_info):
	Make static.
	* value.c (pack_unsigned_long): Make static.
	* varobj.c (varobj_ensure_python_env): Make static.
	* windows-tdep.c (_initialize_windows_tdep): Declare.
	* xml-syscall.c (make_cleanup_free_syscalls_info): Make static.
@
text
@a1473 2
  struct cleanup *old_chain;
  struct ui_stream *stb;
d1479 2
d1483 2
a1484 2
      stb = ui_out_stream_new (uiout);
      old_chain = make_cleanup_ui_out_stream_delete (stb);
d1490 1
a1490 1
      value_print (value, stb->stream, &opts);
@


1.299
log
@gdb/
	* arm-linux-tdep.c (arm_linux_copy_svc): Reset stale FRAME.
	* breakpoint.c (until_break_command): Likewise.
	* elfread.c (elf_gnu_ifunc_resolver_stop): Likewise.
	* infcall.c (call_function_by_hand): Likewise.
	* infcmd.c (finish_forward): Likewise.
	* infrun.c (insert_exception_resume_breakpoint): Likewise.
@
text
@d667 1
a667 1
void
d679 1
a679 1
void
@


1.298
log
@gdb/
	PR backtrace/13716
	* infcmd.c (finish_forward): New variable frame_id, initialize it, use
	it after set_momentary_breakpoint.
@
text
@d1655 3
@


1.297
log
@	PR gdb/12659:
	* infcmd.c (registers_info): Print just the current register's
	name.
gdb/testsuite
	* gdb.base/pc-fp.exp: Add "info register" tests.
@
text
@d1639 1
d1657 1
a1657 1
  set_longjmp_breakpoint (tp, get_frame_id (frame));
@


1.296
log
@	* blockframe.c (find_pc_partial_function_gnu_ifunc): Change type of
	"name" parameter to const char ** from char **.  All callers updated.
	(find_pc_partial_function): Ditto.
	(cache_pc_function_name): Change type to const char * from char *.
	* symtab.h ((find_pc_partial_function_gnu_ifunc): Update.
	(find_pc_partial_function): Update.
	* alpha-tdep.h (struct gdbarch_tdep, member pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	All uses updated.
	* arch-utils.c (generic_in_solib_return_trampoline): Change
	type of "name" parameter to const char * from char *.
	* arch-utils.h (generic_in_solib_return_trampoline): Update.
	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	* gdbarch.sh (in_solib_return_trampoline): Ditto.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* hppa-hpux-tdep.c (hppa_hpux_in_solib_return_trampoline): Update.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Update.
	* m32r-linux-tdep.c (m32r_linux_pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	* skip.c (skip_function_pc): Ditto.
	* sparc-sol2-tdep.c (sparc_sol2_pc_in_sigtramp): Ditto.
	* sparc-tdep.h (sparc_sol2_pc_in_sigtramp): Update.
	* sparc64fbsd-tdep.c (sparc64fbsd_pc_in_sigtramp): Ditto.
	* sparc64nbsd-tdep.c (sparc64nbsd_pc_in_sigtramp): Ditto.
	* sparc64obsd-tdep.c (sparc64obsd_pc_in_sigtramp): Ditto.
	* sparcnbsd-tdep.c (sparc32nbsd_pc_in_sigtramp): Ditto.
	* sparcobsd-tdep.c (sparc32obsd_pc_in_sigtramp): Ditto.
	* nbsd-tdep.c (nbsd_pc_in_sigtramp): Similary for "func_name".
	* nbsd-tdep.h (nbsd_pc_in_sigtramp): Update.
@
text
@d2173 1
a2173 1
		printf_filtered ("%s: ", start);
@


1.295
log
@	* gdbarch.sh (info_proc): New callback.
	* gdbarch.c, gdbarch.h: Regenerate.

	* infcmd.c (info_proc_cmd_1): Try gdbarch info_proc callback
	before falling back to the target info_proc callback.

	* linux-nat.c: Do not include "cli/cli-utils.h".
	(linux_nat_info_proc): Remove.
	(linux_target_install_ops): No longer install it.

	* linux-tdep.c: Include "cli/cli-utils.h" and <ctype.h>.
	(read_mapping): New function.
	(linux_info_proc): Likewise.
	(linux_init_abi): Install it.
@
text
@d1039 1
a1039 1
	      char *name;
@


1.294
log
@ChangeLog:

	* defs.h (enum info_proc_what): Moved here from linux-nat.c
	* infcmd.c: (info_proc_cmd_1): New function.
	(info_proc_cmd): New function, moved here from equivalent routine
	orignally in linux-nat.c.
	(info_proc_cmd_mappings): Likewise.
	(info_proc_cmd_stat): Likewise.
	(info_proc_cmd_status): Likewise.
	(info_proc_cmd_cwd): Likewise.
	(info_proc_cmd_cmdline): Likewise.
	(info_proc_cmd_exe): Likewise.
	(info_proc_cmd_all): Likewise.
	(_initialize_infcmd): Install "info proc" command and subcommands.

	* target.h (struct target_ops): Add to_info_proc.
	(target_info_proc): Add prototype.
	* target.c (target_info_proc): New function.

	* procfs.c (procfs_info_proc): Add prototype.
	(info_proc_cmd): Rename into ...
	(procfs_info_proc): ... this.  Update argument types as appropriate
	for a to_info_proc implementation.  Handle "what" argument.
	(procfs_target): Install procfs_info_proc.
	(_initialize_procfs): No longer install "info proc" command.

	* linux-nat.c: (enum info_proc_what): Remove.
	(linux_nat_info_proc_cmd_1): Rename into ...
	(linux_nat_info_proc): ... this.  Update argument types as appropriate
	for a to_info_proc implementation.
	(linux_nat_info_proc_cmd): Remove.
	(linux_nat_info_proc_cmd_mappings): Likewise.
	(linux_nat_info_proc_cmd_stat): Likewise.
	(linux_nat_info_proc_cmd_status): Likewise.
	(linux_nat_info_proc_cmd_cwd): Likewise.
	(linux_nat_info_proc_cmd_cmdline): Likewise.
	(linux_nat_info_proc_cmd_exe): Likewise.
	(linux_nat_info_proc_cmd_all): Likewise.
	(linux_target_install_ops): Install linux_nat_info_proc.
	(_initialize_linux_nat): No longer install "info proc" command
	and subcommands.

testsuite/ChangeLog:

	* gdb.base/info-proc.exp: Also run on remote targets.  Main
	"info proc" command is now always present; whether target supports
	actual info proc operation is detected when attempting to issue
	the command.
@
text
@d2813 6
a2818 1
  target_info_proc (args, what);
@


1.293
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2808 72
d2883 1
d3110 35
@


1.292
log
@	Introduce gdb.FinishBreakpoint in Python

	* Makefile.in (SUBDIR_PYTHON_OBS): Add py-finishbreakpoint.o.
	(SUBDIR_PYTHON_SRCS): Add python/py-finishbreakpoint.c.
	Add build rule for this file.
	* infcmd.c (print_return_value): Split to create get_return_value.
	(get_return_value): New function based on print_return_value. Handle
	case where stop_registers are not set.
	* inferior.h (get_return_value): New prototype.
	* python/py-breakpoint.c (bppy_pending_object): Make non-static.
	(gdbpy_breakpoint_created): Set is_py_finish_bp is necessary.
	(struct breakpoint_object): Move to python-internal.h
	(BPPY_REQUIRE_VALID): Likewise.
	(BPPY_SET_REQUIRE_VALID): Likewise.
	(gdbpy_breakpoint_created): Initialize is_finish_bp.
	(gdbpy_should_stop): Add  pre/post hooks before/after calling stop
	method.
	* python/python-internal.h (breakpoint_object_type): Add as extern.
	(bppy_pending_object): Likewise.
	(typedef struct breakpoint_object) Removed.
	(struct breakpoint_object): Moved from py-breakpoint.c.
	Add field is_finish_bp.
	(BPPY_REQUIRE_VALID): Moved from py-breakpoint.c.
	(BPPY_SET_REQUIRE_VALID): Likewise.
	(frame_object_to_frame_info): New prototype.
	(gdbpy_initialize_finishbreakpoints): New prototype.
	(bpfinishpy_is_finish_bp): Likewise.
	(bpfinishpy_pre_stop_hook): Likewise.
	(bpfinishpy_post_stop_hook): Likewise.
	* python/py-finishbreakpoint.c: New file.
	* python/py-frame.c(frame_object_to_frame_info): Make non-static and
	accept PyObject instead of frame_object.
	(frapy_is_valid): Don't cast to frame_object.
	(frapy_name): Likewise.
	(frapy_type): Likewise.
	(frapy_unwind_stop_reason): Likewise.
	(frapy_pc): Likewise.
	(frapy_block): Likewise.
	(frapy_function): Likewise.
	(frapy_older): Likewise.
	(frapy_newer): Likewise.
	(frapy_find_sal): Likewise.
	(frapy_read_var): Likewise.
	(frapy_select): Likewise.
	* python/python.c (gdbpy_is_stopped_at_finish_bp): New noop function.
	(_initialize_python): Add gdbpy_initialize_finishbreakpoints.
	* python/python.h: Include breakpoint.h
	(gdbpy_is_stopped_at_finish_bp): New prototype.

doc/
	* gdb.texinfo (Finish Breakpoints in Python): New subsection.
	(Python API): Add menu entry for Finish Breakpoints.

testsuite/
	* Makefile.in (EXECUTABLES): Add py-finish-breakpoint and
	py-finish-breakpoint2
	(MISCALLANEOUS): Add py-events-shlib.so and py-events-shlib-nodebug.so
	* gdb.python/py-breakpoint.exp (mult_line): Define and use variable
	instead of line number.
	* gdb.python/py-finish-breakpoint.c: New file.
	* gdb.python/py-finish-breakpoint.exp: New file.
	* gdb.python/py-finish-breakpoint.py: New file.
	* gdb.python/py-finish-breakpoint2.cc: New file.
	* gdb.python/py-finish-breakpoint2.exp: New file.
	* gdb.python/py-finish-breakpoint2.py: New file.
@
text
@d3 1
a3 3
   Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.291
log
@the "ambiguous linespec" series
gdb
2011-12-06  Joel Brobecker  <brobecker@@acacore.com>

        * language.h (struct language_defn): Add new component
        la_symbol_name_compare.
        * symfile.h (struct quick_symbol_functions): Update the profile
        of parameter "name_matcher" for the expand_symtabs_matching
        method.  Update the documentation accordingly.
        * ada-lang.h (ada_name_for_lookup): Add declaration.
        * ada-lang.c (ada_name_for_lookup): New function, extracted out
        from ada_iterate_over_symbols.
        (ada_iterate_over_symbols): Do not encode symbol name anymore.
        (ada_expand_partial_symbol_name): Adjust profile.
        (ada_language_defn): Add value for la_symbol_name_compare field.
        * linespec.c: #include "ada-lang.h".
        (iterate_name_matcher): Add language parameter. Replace call
        to strcmp_iw by call to language->la_symbol_name_compare.
        (decode_variable): Encode COPY if current language is Ada.
        * dwarf2read.c (dw2_expand_symtabs_matching): Adjust profile
        of name_matcher parameter.  Adjust call to name_matcher.
        * psymtab.c (expand_symtabs_matching_via_partial): Likewise.
        (expand_partial_symbol_names): Update profile of parameter "fun".
        * psymtab.h (expand_partial_symbol_names): Update profile of
        parameter "fun".
        * symtab.c (demangle_for_lookup): Update function documentation.
        (search_symbols_name_matches): Add language parameter.
        (expand_partial_symbol_name): Likewise.
        * c-lang.c (c_language_defn, cplus_language_defn)
        (asm_language_defn, minimal_language_defn): Add value for
        la_symbol_name_compare field.
        * d-lang.c (d_language_defn): Likewise.
        * f-lang.c (f_language_defn): Ditto.
        * jv-lang.c (java_language_defn): Ditto.
        * m2-lang.c (m2_language_defn): Ditto.
        * objc-lang.c (objc_language_defn): Ditto.
        * opencl-lang.c (opencl_language_defn): Ditto.
        * p-lang.c (pascal_language_defn): Ditto.
        * language.c (unknown_language_defn, auto_language_defn)
        (local_language_defn): Ditto.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* linespec.c (iterate_over_all_matching_symtabs): Use
	LA_ITERATE_OVER_SYMBOLS.
	(lookup_prefix_sym, add_matching_symbols_to_info): Likewise.
	(find_function_symbols, decode_variable): Remove Ada special
	case.
	* language.h (struct language_defn) <la_iterate_over_symbols>: New
	field.
	(LA_ITERATE_OVER_SYMBOLS): New macro.
	* language.c (unknown_language_defn, auto_language_defn)
	(local_language_defn): Update.
	* c-lang.c (c_language_defn, cplus_language_defn)
	(asm_language_defn, minimal_language_defn): Update.
	* d-lang.c (d_language_defn): Update.
	* f-lang.c (f_language_defn): Update.
	* jv-lang.c (java_language_defn): Update.
	* m2-lang.c (m2_language_defn): Update.
	* objc-lang.c (objc_language_defn): Update.
	* opencl-lang.c (opencl_language_defn): Update.
	* p-lang.c (pascal_language_defn): Update.
	* ada-lang.c (ada_iterate_over_symbols): New function.
	(ada_language_defn): Update.

2011-12-06  Tom Tromey  <tromey@@redhat.com>
	    Joel Brobecker  <brobecker@@acacore.com>

	PR breakpoints/13105, PR objc/8341, PR objc/8343, PR objc/8366,
	PR objc/8535, PR breakpoints/11657, PR breakpoints/11970,
	PR breakpoints/12023, PR breakpoints/12334, PR breakpoints/12856,
	PR shlibs/8929, PR shlibs/7393:
	* python/py-type.c (compare_maybe_null_strings): Rename from
	compare_strings.
	(check_types_equal): Update.
	* utils.c (compare_strings): New function.
	* tui/tui-winsource.c (tui_update_breakpoint_info): Update for
	location changes.
	* tracepoint.c (scope_info): Update.
	(trace_find_line_command): Use DECODE_LINE_FUNFIRSTLINE.
	* symtab.h (iterate_over_minimal_symbols)
	(iterate_over_some_symtabs, iterate_over_symtabs)
	(find_pcs_for_symtab_line, iterate_over_symbols)
	(demangle_for_lookup): Declare.
	(expand_line_sal): Remove.
	* symtab.c (iterate_over_some_symtabs, iterate_over_symtabs)
	(lookup_symtab_callback): New functions.
	(lookup_symtab): Rewrite.
	(demangle_for_lookup): New function, extract from
	lookup_symbol_in_language.
	(lookup_symbol_in_language): Use it.
	(iterate_over_symbols): New function.
	(find_line_symtab): Update.
	(find_pcs_for_symtab_line): New functions.
	(find_line_common): Add 'start' argument.
	(decode_line_spec): Update.  Change argument to 'flags', change
	interpretation.
	(append_expanded_sal): Remove.
	(append_exact_match_to_sals): Remove.
	(expand_line_sal): Remove.
	* symfile.h (struct quick_symbol_functions) <lookup_symtab>:
	Remove.
	<map_symtabs_matching_filename>: New field.
	* stack.c (func_command): Only look in the current program space.
	Use DECODE_LINE_FUNFIRSTLINE.
	* source.c (line_info): Set pspace on sal.  Check program space in
	the loop.  Use DECODE_LINE_LIST_MODE.
	(select_source_symtab): Use DECODE_LINE_FUNFIRSTLINE.
	* solib-target.c: Remove DEF_VEC_I(CORE_ADDR).
	* python/python.c (gdbpy_decode_line): Update.
	* psymtab.c (partial_map_expand_apply): New function.
	(partial_map_symtabs_matching_filename): Rename from
	lookup_partial_symbol.  Update arguments.
	(lookup_symtab_via_partial_symtab): Remove.
	(psym_functions): Update.
	* objc-lang.h (parse_selector, parse_method): Don't declare.
	(find_imps): Update.
	* objc-lang.c (parse_selector, parse_method): Now static.
	(find_methods): Change arguments.  Fill in a vector of symbol
	names.
	(uniquify_strings): New function.
	(find_imps): Change arguments.
	* minsyms.c (iterate_over_minimal_symbols): New function.
	* linespec.h (enum decode_line_flags): New.
	(struct linespec_sals): New.
	(struct linespec_result) <canonical>: Remove.
	<pre_expanded, addr_string, sals>: New fields.
	(destroy_linespec_result, make_cleanup_destroy_linespec_result)
	(decode_line_full): Declare.
	(decode_line_1): Update.
	* linespec.c (struct address_entry, struct linespec_state, struct
	collect_info): New types.
	(add_sal_to_sals_basic, add_sal_to_sals, hash_address_entry)
	(eq_address_entry, maybe_add_address): New functions.
	(total_number_of_methods): Remove.
	(iterate_name_matcher, iterate_over_all_matching_symtabs): New
	functions.
	(find_methods): Change arguments.  Don't canonicalize input.
	Simplify logic.
	(add_matching_methods, add_constructors)
	(build_canonical_line_spec): Remove.
	(filter_results, convert_results_to_lsals): New functions.
	(decode_line_2): Change arguments.  Rewrite for new data
	structures.
	(decode_line_internal): Rename from decode_line_1.  Change
	arguments.  Add cleanups.  Update for new data structures.
	(linespec_state_constructor, linespec_state_destructor)
	(decode_line_full, decode_line_1): New functions.
	(decode_indirect): Change arguments.  Update.
	(locate_first_half): Use skip_spaces.
	(decode_objc): Change arguments.  Update for new data structures.
	Simplify logic.
	(decode_compound): Change arguments.  Add cleanups.  Remove
	fallback code, replace with error.
	(struct decode_compound_collector): New type.
	(collect_one_symbol): New function.
	(lookup_prefix_sym): Change arguments.  Update.
	(compare_symbol_name, add_all_symbol_names_from_pspace)
	(find_superclass_methods ): New functions.
	(find_method): Rewrite.
	(struct symtab_collector): New type.
	(add_symtabs_to_list, collect_symtabs_from_filename): New
	functions.
	(symtabs_from_filename): Change API.  Rename from
	symtab_from_filename.
	(collect_function_symbols): New function.
	(find_function_symbols): Change API.  Rename from
	find_function_symbol.  Rewrite.
	(decode_all_digits): Change arguments.  Rewrite.
	(decode_dollar): Change arguments.  Use decode_variable.
	(decode_label): Change arguments.  Rewrite.
	(collect_symbols): New function.
	(minsym_found): Change arguments.  Rewrite.
	(check_minsym, search_minsyms_for_name)
	(add_matching_symbols_to_info): New function.
	(decode_variable): Change arguments.  Iterate over all symbols.
	(symbol_found): Remove.
	(symbol_to_sal): New function.
	(init_linespec_result, destroy_linespec_result)
	(cleanup_linespec_result, make_cleanup_destroy_linespec_result):
	New functions.
	(decode_digits_list_mode, decode_digits_ordinary): New functions.
	* dwarf2read.c (dw2_map_expand_apply): New function.
	(dw2_map_symtabs_matching_filename): Rename from
	dw2_lookup_symtab.  Change arguments.
	(dwarf2_gdb_index_functions): Update.
	* dwarf2loc.c: Remove DEF_VEC_I(CORE_ADDR).
	* defs.h (compare_strings): Declare.
	* cli/cli-cmds.c (compare_strings): Move to utils.c.
	(edit_command, list_command): Use DECODE_LINE_LIST_MODE.  Call
	filter_sals.
	(compare_symtabs, filter_sals): New functions.
	* breakpoint.h (struct bp_location) <line_number, source_file>:
	New fields.
	(struct breakpoint) <line_number, source_file>: Remove.
	<filter>: New field.
	* breakpoint.c (print_breakpoint_location, init_raw_breakpoint)
	(momentary_breakpoint_from_master, add_location_to_breakpoint):
	Update for changes to locations.
	(init_breakpoint_sal): Add 'filter' argument.  Set 'filter' on
	breakpoint.
	(create_breakpoint_sal): Add 'filter' argument.
	(remove_sal, expand_line_sal_maybe): Remove.
	(create_breakpoints_sal): Remove 'sals' argument.  Handle
	pre-expanded sals and the filter.
	(parse_breakpoint_sals): Use decode_line_full.
	(check_fast_tracepoint_sals): Use get_sal_arch.
	(create_breakpoint): Create a linespec_sals.  Update.
	(break_range_command): Use decode_line_full.  Update.
	(until_break_command): Update.
	(clear_command): Update match conditions for linespec.c changes.
	Use DECODE_LINE_LIST_MODE.
	(say_where): Update for changes to locations.
	(bp_location_dtor): Free 'source_file'.
	(base_breakpoint_dtor): Free 'filter'.  Don't free 'source_file'.
	(update_static_tracepoint): Update for changes to locations.
	(update_breakpoint_locations): Disable ranged breakpoint if too
	many locations match.  Update.
	(addr_string_to_sals): Use decode_line_full.  Resolve all sal
	PCs.
	(breakpoint_re_set_default): Don't call expand_line_sal_maybe.
	(decode_line_spec_1): Update.  Change argument name to 'flags',
	change interpretation.
	* block.h (block_containing_function): Declare.
	* block.c (block_containing_function): New function.
	* skip.c (skip_function_command): Update.
	(skip_re_set): Update.
	* infcmd.c (jump_command): Use DECODE_LINE_FUNFIRSTLINE.
	* mi/mi-main.c (mi_cmd_trace_find): Use DECODE_LINE_FUNFIRSTLINE.
	* NEWS: Add entry.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* elfread.c (elf_gnu_ifunc_resolver_return_stop): Allow
	breakpoint's pspace to be NULL.
	* breakpoint.h (struct breakpoint) <pspace>: Update comment.
	* breakpoint.c (init_raw_breakpoint): Conditionally set
	breakpoint's pspace.
	(init_breakpoint_sal): Don't set breakpoint's pspace.
	(prepare_re_set_context): Conditionally switch program space.
	(addr_string_to_sals): Check executing_startup on location's
	program space.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* breakpoint.h (enum enable_state) <bp_startup_disabled>: Remove.
	* breakpoint.c (should_be_inserted): Explicitly check if program
	space is executing startup.
	(describe_other_breakpoints): Update.
	(disable_breakpoints_before_startup): Change executing_startup
	earlier.  Remove loop.
	(enable_breakpoints_after_startup): Likewise.
	(init_breakpoint_sal): Don't use bp_startup_disabled.
	(create_breakpoint): Don't use bp_startup_disabled.
	(update_global_location_list): Use should_be_inserted.
	(bkpt_re_set): Update.
gdb/testsuite
2011-12-06  Joel Brobecker  <brobecker@@acacore.com>

        * gdb.ada/fullname_bp.exp: Add tests for other valid linespecs
        involving a fully qualified function name.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.ada/homonym.exp: Add three breakpoint tests.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.base/solib-weak.exp (do_test): Remove kfail.
	* gdb.trace/tracecmd.exp: Disable pending breakpoints earlier.
	* gdb.objc/objcdecode.exp: Update for output changes.
	* gdb.linespec/linespec.exp: New file.
	* gdb.linespec/lspec.cc: New file.
	* gdb.linespec/lspec.h: New file.
	* gdb.linespec/body.h: New file.
	* gdb.linespec/base/two/thefile.cc: New file.
	* gdb.linespec/base/one/thefile.cc: New file.
	* gdb.linespec/Makefile.in: New file.
	* gdb.cp/templates.exp (test_template_breakpoints): Update for
	output changes.
	* gdb.cp/re-set-overloaded.exp: Remove kfail.
	* gdb.cp/ovldbreak.exp: Update for output changes.  "all" test now
	makes one breakpoint.
	* gdb.cp/method2.exp (test_break): Update for output changes.
	* gdb.cp/mb-templates.exp: Update for output changes.
	* gdb.cp/mb-inline.exp: Update for output changes.
	* gdb.cp/mb-ctor.exp: Update for output changes.
	* gdb.cp/ovsrch.exp: Use fully-qualified names.
	* gdb.base/solib-symbol.exp: Run to main later.  Breakpoint now
	has multiple matches.
	* gdb.base/sepdebug.exp: Disable pending breakpoints.  Update for
	error message change.
	* gdb.base/list.exp (test_list_filename_and_number): Update for
	error message change.
	* gdb.base/break.exp: Disable pending breakpoints.  Update for
	output changes.
	* configure.ac: Add gdb.linespec.
	* configure: Rebuild.
	* Makefile.in (ALL_SUBDIRS): Add gdb.linespec.
gdb/doc
2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.texinfo (Set Breaks): Update for new behavior.
@
text
@d1417 2
a1418 1
/* Print the result of a function at the end of a 'finish' command.  */
d1420 2
a1421 2
static void
print_return_value (struct type *func_type, struct type *value_type)
d1423 2
a1424 3
  struct gdbarch *gdbarch = get_regcache_arch (stop_registers);
  struct cleanup *old_chain;
  struct ui_stream *stb;
d1427 10
d1455 1
a1455 1
      gdbarch_return_value (gdbarch, func_type, value_type, stop_registers,
d1465 15
@


1.291.2.1
log
@	Introduce gdb.FinishBreakpoint in Python

	* Makefile.in (SUBDIR_PYTHON_OBS): Add py-finishbreakpoint.o.
	(SUBDIR_PYTHON_SRCS): Add python/py-finishbreakpoint.c.
	Add build rule for this file.
	* infcmd.c (print_return_value): Split to create get_return_value.
	(get_return_value): New function based on print_return_value. Handle
	case where stop_registers are not set.
	* inferior.h (get_return_value): New prototype.
	* python/py-breakpoint.c (bppy_pending_object): Make non-static.
	(gdbpy_breakpoint_created): Set is_py_finish_bp is necessary.
	(struct breakpoint_object): Move to python-internal.h
	(BPPY_REQUIRE_VALID): Likewise.
	(BPPY_SET_REQUIRE_VALID): Likewise.
	(gdbpy_breakpoint_created): Initialize is_finish_bp.
	(gdbpy_should_stop): Add  pre/post hooks before/after calling stop
	method.
	* python/python-internal.h (breakpoint_object_type): Add as extern.
	(bppy_pending_object): Likewise.
	(typedef struct breakpoint_object) Removed.
	(struct breakpoint_object): Moved from py-breakpoint.c.
	Add field is_finish_bp.
	(BPPY_REQUIRE_VALID): Moved from py-breakpoint.c.
	(BPPY_SET_REQUIRE_VALID): Likewise.
	(frame_object_to_frame_info): New prototype.
	(gdbpy_initialize_finishbreakpoints): New prototype.
	(bpfinishpy_is_finish_bp): Likewise.
	(bpfinishpy_pre_stop_hook): Likewise.
	(bpfinishpy_post_stop_hook): Likewise.
	* python/py-finishbreakpoint.c: New file.
	* python/py-frame.c(frame_object_to_frame_info): Make non-static and
	accept PyObject instead of frame_object.
	(frapy_is_valid): Don't cast to frame_object.
	(frapy_name): Likewise.
	(frapy_type): Likewise.
	(frapy_unwind_stop_reason): Likewise.
	(frapy_pc): Likewise.
	(frapy_block): Likewise.
	(frapy_function): Likewise.
	(frapy_older): Likewise.
	(frapy_newer): Likewise.
	(frapy_find_sal): Likewise.
	(frapy_read_var): Likewise.
	(frapy_select): Likewise.
	* python/python.c (gdbpy_is_stopped_at_finish_bp): New noop function.
	(_initialize_python): Add gdbpy_initialize_finishbreakpoints.
	* python/python.h: Include breakpoint.h
	(gdbpy_is_stopped_at_finish_bp): New prototype.

doc/
	* gdb.texinfo (Finish Breakpoints in Python): New subsection.
	(Python API): Add menu entry for Finish Breakpoints.

testsuite/
	* Makefile.in (EXECUTABLES): Add py-finish-breakpoint and
	py-finish-breakpoint2
	(MISCALLANEOUS): Add py-events-shlib.so and py-events-shlib-nodebug.so
	* gdb.python/py-breakpoint.exp (mult_line): Define and use variable
	instead of line number.
	* gdb.python/py-finish-breakpoint.c: New file.
	* gdb.python/py-finish-breakpoint.exp: New file.
	* gdb.python/py-finish-breakpoint.py: New file.
	* gdb.python/py-finish-breakpoint2.cc: New file.
	* gdb.python/py-finish-breakpoint2.exp: New file.
	* gdb.python/py-finish-breakpoint2.py: New file.
@
text
@d1417 1
a1417 2
/* Return the value of the result of a function at the end of a 'finish'
   command/BP.  */
d1419 2
a1420 2
struct value *
get_return_value (struct type *func_type, struct type *value_type)
d1422 3
a1424 2
  struct regcache *stop_regs = stop_registers;
  struct gdbarch *gdbarch;
a1426 10
  struct cleanup *cleanup = make_cleanup (null_cleanup, NULL);

  /* If stop_registers were not saved, use the current registers.  */
  if (!stop_regs)
    {
      stop_regs = regcache_dup (get_current_regcache ());
      cleanup = make_cleanup_regcache_xfree (stop_regs);
    }

  gdbarch = get_regcache_arch (stop_regs);
d1445 1
a1445 1
      gdbarch_return_value (gdbarch, func_type, value_type, stop_regs,
a1454 15
  do_cleanups (cleanup);

  return value;
}

/* Print the result of a function at the end of a 'finish' command.  */

static void
print_return_value (struct type *func_type, struct type *value_type)
{
  struct value *value = get_return_value (func_type, value_type);
  struct cleanup *old_chain;
  struct ui_stream *stb;
  struct ui_out *uiout = current_uiout;

@


1.291.2.2
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 3
a5 1
   Copyright (C) 1986-2012 Free Software Foundation, Inc.
@


1.291.2.3
log
@gdb/
	PR backtrace/13716
	* infcmd.c (finish_forward): New variable frame_id, initialize it, use
	it after set_momentary_breakpoint.
@
text
@a1638 1
  struct frame_id frame_id = get_frame_id (frame);
d1656 1
a1656 1
  set_longjmp_breakpoint (tp, frame_id);
@


1.290
log
@gdb/
	* infcmd.c (disconnect_command): Call disconnect_tracing.
@
text
@d60 1
d1120 1
a1120 1
  sals = decode_line_spec_1 (arg, 1);
@


1.289
log
@2011-08-04  Pedro Alves  <pedro@@codesourcery.com>

	* ui-out.h (uiout): Rename to ...
	(current_uiout): ... this.
	* ui-out.c (uiout): Rename to ...
	(current_uiout): ... this.
	* ada-lang.c (print_it_exception, print_one_exception)
	(print_mention_exception): Adjust.
	* breakpoint.c (watchpoint_check): Adjust.
	(print_breakpoint_location, print_one_breakpoint, breakpoint_1)
	(default_collect_info, watchpoints_info, print_one_catch_fork)
	(print_one_catch_vfork, print_one_catch_syscall)
	(print_one_catch_exec, mention, print_it_ranged_breakpoint)
	(print_one_ranged_breakpoint, print_mention_ranged_breakpoint)
	(print_it_watchpoint, print_mention_watchpoint)
	(print_it_masked_watchpoint, print_mention_masked_watchpoint)
	(print_it_exception_catchpoint, print_one_exception_catchpoint)
	(print_mention_exception_catchpoint, say_where, bkpt_print_it)
	(bkpt_print_mention, momentary_bkpt_print_it)
	(tracepoint_print_mention, update_static_tracepoint)
	(tracepoints_info, save_breakpoints): Adjust.
	* cli-out.c (field_separator): Adjust.
	* cp-abi.c (list_cp_abis, show_cp_abi_cmd): Adjust.
	* exceptions.c (catch_exceptions_with_msg, catch_errors): Adjust.
	* frame.c (get_current_frame): Adjust.
	* infcmd.c (run_command_1, print_return_value): Adjust.
	* inferior.c (inferior_command, info_inferiors_command): Adjust.
	* infrun.c (print_end_stepping_range_reason): Adjust.
	(print_signal_exited_reason, print_exited_reason): Adjust.
	(print_signal_received_reason, print_no_history_reason): Adjust.
	* interps.c (interp_set): Adjust.
	* osdata.c (info_osdata_command): Adjust.
	* progspace.c (maintenance_info_program_spaces_command): Adjust.
	* remote-fileio.c (remote_fileio_request): Adjust.
	* remote.c (show_remote_cmd): Adjust.
	* solib.c (info_sharedlibrary_command): Adjust.
	* source.c (print_source_lines_base): Adjust.
	* stack.c (print_stack_frame): Adjust.
	(do_gdb_disassembly, print_frame_info, print_frame): Adjust.
	* symfile-mem.c (add_vsyscall_page): Adjust.
	* symfile.c (load_progress, generic_load)
	(print_transfer_performance): Adjust.
	* thread.c (info_threads_command, restore_selected_frame)
	(thread_command): Adjust.
	* top.c (make_cleanup_restore_ui_file): Adjust.
	* tracepoint.c (tvariables_info_1, trace_status_mi, tfind_1)
	(print_one_static_tracepoint_marker): Adjust.
	* cli/cli-cmds.c (print_disassembly): Adjust.
	* cli/cli-decode.c (print_doc_line): Adjust.
	* cli/cli-interp.c (safe_execute_command): Adjust.
	* cli/cli-logging.c (set_logging_redirect, pop_output_files)
	(handle_redirections): Adjust.
	* cli/cli-script.c (show_user_1): Adjust.
	* cli/cli-setshow.c (do_setshow_command, cmd_show_list): Adjust.
	* mi/mi-cmd-break.c (breakpoint_notify): Adjust.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Adjust.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd, mi_cmd_env_path)
	(mi_cmd_env_dir): Adjust.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file)
	(print_partial_file_name, mi_cmd_file_list_exec_source_files): Adjust.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_depth, mi_cmd_stack_list_args)
	(list_args_or_locals): Adjust.
	* mi/mi-cmd-var.c (print_varobj, mi_cmd_var_create)
	(mi_cmd_var_delete, mi_cmd_var_set_format, mi_cmd_var_set_frozen)
	(mi_cmd_var_show_format, mi_cmd_var_info_num_children)
	(mi_cmd_var_list_children, mi_cmd_var_info_type)
	(mi_cmd_var_info_path_expression, mi_cmd_var_info_expression)
	(mi_cmd_var_show_attributes, mi_cmd_var_evaluate_expression)
	(mi_cmd_var_assign, mi_cmd_var_update, varobj_update_one): Adjust.
	* mi/mi-interp.c (mi_on_normal_stop): Adjust.
	* mi/mi-main.c (mi_cmd_gdb_exit, mi_cmd_thread_select)
	(mi_cmd_thread_list_ids, mi_cmd_thread_info, print_one_inferior)
	(list_available_thread_groups, mi_cmd_list_thread_groups)
	(mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values, get_register)
	(mi_cmd_data_evaluate_expression, mi_cmd_data_read_memory)
	(mi_cmd_data_read_memory_bytes, mi_cmd_list_features)
	(mi_cmd_list_target_features, mi_cmd_add_inferior)
	(mi_execute_command, mi_load_progress): Adjust.
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Adjust.
	* python/py-auto-load.c (print_script, info_auto_load_scripts):
	Adjust.
	* python/py-breakpoint.c (bppy_get_commands): Adjust.
	* tui/tui-interp.c (tui_command_loop): Adjust.
	* tui/tui-io.c (tui_setup_io, tui_initialize_io): Adjust.
@
text
@d2682 1
@


1.288
log
@2011-07-26  Paul Pluzhnikov  <ppluzhnikov@@google.com>

	* progspace.h (struct program_space): Add solib_add_generation.
	* infcmd.c (post_create_inferior): Only call solib_add if not
	already done.
	* solib.c (solib_add): Increment solib_add_generation.
@
text
@d506 1
d1425 1
@


1.287
log
@2011-05-30  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* continuations.h (continuation_ftype): Add `err' parameter.
	Document parameters.
	(do_all_continuations, do_all_continuations_thread)
	(do_all_intermediate_continuations)
	(do_all_intermediate_continuations_thread)
	(do_all_inferior_continuations): Add `err' parameter.
	* continuations.c (do_my_continuations_1, do_my_continuations)
	(do_all_inferior_continuations, do_all_continuations_ptid)
	(do_all_continuations_thread_callback)
	(do_all_continuations_thread, do_all_continuations)
	(do_all_intermediate_continuations_thread_callback)
	(do_all_intermediate_continuations_thread)
	(do_all_intermediate_continuations): Add `err' parameter, and pass
	it down all the way to the continuations proper.
	* inf-loop.c (inferior_event_handler): If fetching an inferior
	event throws an error, don't pop the target, and still call the
	continuations, but with `err' set.  Adjust all other continuation
	calls.
	* breakpoint.c (until_break_command_continuation): Add `err'
	parameter.
	* infcmd.c (step_1_continuation): Add `err' parameter.  Don't
	issue another step if `err' is set.
	(struct until_next_continuation_args): New.
	(until_next_continuation): Add `err' parameter.  Adjust.
	(until_next_command): Adjust.
	(struct finish_command_continuation_args): Add `thread' field.
	(finish_command_continuation): Add `err' parameter.  Handle it.
	(finish_forward): Adjust.
	(attach_command_continuation): Add `err' parameter.  Handle it.
	* infrun.c (infrun_thread_stop_requested_callback): Adjust to
	cancel the continuations.
	* interps.c (interp_set): Adjust to cancel the continuations.
	* thread.c (clear_thread_inferior_resources): Adjust to cancel the
	continuations rather than discarding.
	(free_thread): Don't clear thread inferior resources here.
	(delete_thread_1): Do it here instead.  And do it before removing
	the thread from the threads list.  Tag the thread as exited before
	clearing thread inferior resources.
@
text
@d424 3
a433 12
    }

  /* If the solist is global across processes, there's no need to
     refetch it here.  */
  if (exec_bfd && !gdbarch_has_global_solist (target_gdbarch))
    {
      /* Sometimes the platform-specific hook loads initial shared
	 libraries, and sometimes it doesn't.  If it doesn't FROM_TTY will be
	 incorrectly 0 but such solib targets should be fixed anyway.  If we
	 made all the inferior hook methods consistent, this call could be
	 removed.  Call it only after the solib target has been initialized by
	 solib_create_inferior_hook.  */
d435 15
d451 1
a451 1
      SOLIB_ADD (NULL, 0, target, auto_solib_add);
d453 1
a453 1
      solib_add (NULL, 0, target, auto_solib_add);
d455 2
@


1.286
log
@2011-05-27  Pedro Alves  <pedro@@codesourcery.com>

	* defs.h (struct continuation, continuation_ftype)
	(continuation_free_arg_ftype, add_continuation)
	(do_all_continuations, do_all_continuations_thread)
	(discard_all_continuations, discard_all_continuations_thread)
	(add_intermediate_continuation, do_all_intermediate_continuations)
	(do_all_intermediate_continuations_thread)
	(discard_all_intermediate_continuations)
	(discard_all_intermediate_continuations_thread)
	(add_inferior_continuation, do_all_inferior_continuations)
	(discard_all_inferior_continuations): Move to ...
	* continuations.h: ... this new file.
	* breakpoint.c, continuations.c, event-top.c, inf-loop.c,
	infcmd.c, inferior.c, infrun.c, interps.c: Include
	continuations.h.
@
text
@d943 1
a943 1
step_1_continuation (void *args)
d952 2
a953 1
      if (tp->step_multi && tp->control.stop_step)
d964 3
a966 2
  /* We either stopped for some reason that is not stepping, or there
     are no further steps to make.  Cleanup.  */
d1251 8
d1262 1
a1262 1
until_next_continuation (void *arg)
d1264 1
a1264 1
  struct thread_info *tp = arg;
d1266 1
a1266 1
  delete_longjmp_breakpoint (tp->num);
d1329 2
d1332 4
a1335 1
      add_continuation (tp, until_next_continuation, tp, NULL);
d1476 1
a1476 2
   soon as it detects that the target has stopped.  This function is
   called via the cmd_continuation pointer.  */
d1480 2
d1487 1
a1487 1
finish_command_continuation (void *arg)
a1489 2
  struct thread_info *tp = NULL;
  bpstat bs = NULL;
d1491 1
a1491 3
  if (!ptid_equal (inferior_ptid, null_ptid)
      && target_has_execution
      && is_stopped (inferior_ptid))
d1493 2
a1494 3
      tp = inferior_thread ();
      bs = tp->control.stop_bpstat;
    }
d1496 7
a1502 4
  if (bpstat_find_breakpoint (bs, a->breakpoint) != NULL
      && a->function != NULL)
    {
      struct type *value_type;
d1504 4
a1507 4
      value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (a->function));
      if (!value_type)
	internal_error (__FILE__, __LINE__,
			_("finish_command: function has no target type"));
d1509 4
a1512 3
      if (TYPE_CODE (value_type) != TYPE_CODE_VOID)
	{
	  volatile struct gdb_exception ex;
d1514 1
a1514 1
	  TRY_CATCH (ex, RETURN_MASK_ALL)
d1516 11
a1526 4
	      /* print_return_value can throw an exception in some
		 circumstances.  We need to catch this so that we still
		 delete the breakpoint.  */
	      print_return_value (SYMBOL_TYPE (a->function), value_type);
a1527 2
	  if (ex.reason < 0)
	    exception_print (gdb_stdout, ex);
d1529 6
a1536 4
  /* We suppress normal call of normal_stop observer and do it here so
     that the *stopped notification includes the return value.  */
  if (bs != NULL && tp->control.proceed_to_finish)
    observer_notify_normal_stop (bs, 1 /* print frame */);
d1538 1
a1538 1
  delete_longjmp_breakpoint (inferior_thread ()->num);
d1629 1
d1638 1
a1638 1
    do_all_continuations ();
d2431 1
a2431 1
attach_command_continuation (void *args)
d2435 3
@


1.285
log
@2011-05-26  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* infcmd.c (finish_command): Allow async finish in reverse.
@
text
@d59 1
@


1.284
log
@2011-05-26  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* infcmd.c (finish_backward): Set a step-resume breakpoint at the
	function's entry point instead of a manually managed momentary
	breakpoint, and only ever issue one proceed call.
	* infrun.c (handle_inferior_event) <BPSTAT_WHAT_STEP_RESUME>: If
	doing a reverse-finish, switch to stepi mode, to do another step.
	(insert_step_resume_breakpoint_at_sal): Make public.
	(normal_stop): No need to save function value return registers if
	going reverse.
	* inferior.h (insert_step_resume_breakpoint_at_sal): Declare.

	gdb/testsuite/
	* gdb.reverse/finish-reverse-bkpt.exp: New test.
@
text
@a1641 4
  /* Don't try to async in reverse.  */
  if (async_exec && execution_direction == EXEC_REVERSE)
    error (_("Asynchronous 'finish' not supported in reverse."));

@


1.283
log
@2011-05-20  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* infcmd.c: Include "inf-loop.h".
	(step_once): When stepping into an inline subroutine, pretend the
	target has run.  If the target can async, switch the inferior
	event loop to INF_EXEC_COMPLETE.
	* inferior.h (user_visible_resume_ptid): Declare.
	* infrun.c (user_visible_resume_ptid): New function, factored out
	from `resume'.
	(resume): Use it.
	* mi/mi-main.c (mi_execute_async_cli_command): Remove assertion
	that the current thread is running.  Merge async and sync
	branches.
@
text
@a1530 2
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
a1532 1
  int back_up;
d1542 1
a1542 2
  /* We don't need a return value.  */
  tp->control.proceed_to_finish = 0;
d1556 9
a1565 9
      /* Set breakpoint and continue.  */
      breakpoint =
	set_momentary_breakpoint (gdbarch, sal,
				  get_stack_frame_id (frame),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done
         until we've done another reverse single-step.  */
      breakpoint_set_silent (breakpoint, 1);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
a1566 4
      /* We will be stopped when proceed returns.  */
      back_up = (bpstat_find_breakpoint (tp->control.stop_bpstat, breakpoint)
		 != NULL);
      do_cleanups (old_chain);
a1568 2
    back_up = 1;
  if (back_up)
d1570 2
a1571 3
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there --
	 we just need to back up by one more single-step.  */
a1574 1
  return;
@


1.282
log
@2011-05-20  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* infcmd.c (step_1): Simplify synchronous case.
@
text
@d58 1
d998 6
d1008 7
a1014 2
		/* Pretend that we've stopped.  */
		normal_stop ();
@


1.281
log
@2011-05-09  Pedro Alves  <pedro@@codesourcery.com>

	* inferior.h (wait_for_inferior): Remove `thread_exec_as_sigtrap'
	parameter.
	* infrun.c (proceed, start_remote): Adjust.
	(wait_for_inferior): Remove `thread_exec_as_sigtrap' parameter,
	and adjust to not handle it.
	* solib-irix.c (irix_solib_create_inferior_hook): Adjust.
	* solib-osf.c (osf_solib_create_inferior_hook): Adjust.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Adjust.
	* solib-svr4.c (svr4_solib_create_inferior_hook): Adjust.
	* windows-nat.c (do_initial_windows_stuff): Adjust.
	* infcmd.c (attach_command): Adjust.
	(notice_new_inferior): Adjust.
@
text
@a891 2
	  struct thread_info *tp;

d894 2
a895 3
	  if (target_has_execution
	      && !ptid_equal (inferior_ptid, null_ptid))
	    tp = inferior_thread ();
d897 2
a898 1
	    tp = NULL;
d900 7
a906 7
	  if (!tp || !tp->control.stop_step || !tp->step_multi)
	    {
	      /* If we stopped for some reason that is not stepping
		 there are no further steps to make.  */
	      if (tp)
		tp->step_multi = 0;
	      break;
@


1.280
log
@gdb
	* windows-tdep.c (windows_xfer_shared_library):
	* windows-nat.c (get_module_name, windows_make_so):
	* v850-tdep.c (v850_handle_pushm):
	* utils.c (null_cleanup, gdb_realpath):
	* ui-out.c (get_next_header):
	* tracepoint.c (clear_traceframe_info):
	* symtab.c (lookup_symtab):
	* serial.h (struct serial_ops):
	* mipsread.c (read_alphacoff_dynamic_symtab):
	* infcmd.c (print_return_value):
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address):
	* f-exp.y (parse_number):
	* exceptions.c (catch_exceptions):
	* dummy-frame.c (dummy_frame_this_id):
	* defs.h (struct cleanup):
	* breakpoint.c (disable_breakpoints_in_unloaded_shlib):
	* arm-tdep.c (arm_push_dummy_call):
	* amd64-tdep.h (amd64_collect_xsave):
	* amd64-tdep.c (amd64_collect_xsave):
	* alpha-tdep.c (alpha_heuristic_frame_unwind_cache):
	* README (typing): Remove duplicate words.
	* cli/cli-decode.c (lookup_cmd_composition): Add comma.
	* infrun.c (siginfo_value_read): Fix typo.
	* solib-frv.c (frv_fdpic_find_global_pointer): Likewise.
	* top.c (source_line_number): Add comma.
gdb/doc
	* gdbint.texinfo (Register Information Functions): Remove
	duplicate "the".
	* gdb.texinfo (Emacs): Remove duplicate "to".
	(GDB/MI Variable Objects): Remove duplicate "the".
	(General Query Packets): Likewise.
gdb/testsuite
	* gdb.mi/mi-nsmoribund.exp:
	* gdb.hp/gdb.objdbg/objdbg01.exp:
	* gdb.base/structs.exp (test_struct_returns):
	* gdb.base/call-sc.exp (test_scalar_returns):
	* gdb.base/bigcore.exp: Remove duplicate words.
gdb/gdbserver
	* win32-low.c (handle_load_dll): Remove duplicate "the".
@
text
@d2529 1
a2529 1
      wait_for_inferior (0);
d2593 1
a2593 1
	wait_for_inferior (0);
@


1.279
log
@	* infcmd.c (post_create_inferior): Ignore NOT_AVAILABLE_ERROR
	errors when reading the `stop_pc'.
	* printcmd.c (pc_prefix): Use get_frame_pc_if_available instead of
	get_frame_pc.
@
text
@d1397 1
a1397 1
     a more complicated case of what is already being done in in the
@


1.278
log
@2011-02-28  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c (_initialize_infcmd): Discard unused values.
@
text
@d398 2
d409 10
a418 2
  /* Now that we know the register layout, retrieve current PC.  */
  stop_pc = regcache_read_pc (get_current_regcache ());
@


1.277
log
@	* infcmd.c (finish_backward): Use breakpoint_set_silent.
	* python/py-breakpoint.c (bppy_set_silent): Use
	breakpoint_set_silent.
	(bppy_set_thread): Use breakpoint_set_thread.
	(bppy_set_task): Use breakpoint_set_task.
	* breakpoint.h (breakpoint_set_silent, breakpoint_set_thread)
	(breakpoint_set_task): Declare.
	(make_breakpoint_silent): Remove.
	* breakpoint.c (breakpoint_set_silent): New function.
	(breakpoint_set_thread): Likewise.
	(breakpoint_set_task): Likewise.
	(make_breakpoint_silent): Remove.
@
text
@d2910 1
a2910 1
  c = add_com ("continue", class_run, continue_command, _("\
d2944 2
a2945 2
  c = add_com ("interrupt", class_run, interrupt_target_command,
	       _("Interrupt the execution of the debugged program.\n\
@


1.276
log
@	* printcmd.c (print_formatted): Use val_print_scalar_formatted
	instead of print_scalar_formatted.
	(print_scalar_formatted): Don't handle 's' format strings here,
	and add an assertion that we never see such format here.
	* valprint.h (val_print_scalar_formatted): Declare.
	* valprint.c (val_print_scalar_formatted): New.
	* c-valprint.c (c_val_print): Use val_print_scalar_formatted
	instead of print_scalar_formatted.
	* jv-valprint.c (java_val_print): Ditto.
	* p-valprint.c (pascal_val_print): Ditto.
	* ada-valprint.c (ada_val_print_1): Ditto.
	* f-valprint.c (f_val_print): Ditto.
	* infcmd.c (registers_info): Ditto.
	* m2-valprint.c (m2_val_print): Ditto.
@
text
@d1548 1
a1548 1
      make_breakpoint_silent (breakpoint);
@


1.275
log
@	gdb/
	* infcmd.c (default_print_registers_info): Allocate values so to
	never pass a NULL value to val_print.
@
text
@d2113 5
a2117 3
		print_scalar_formatted (value_contents (val),
					check_typedef (value_type (val)),
					&opts, 0, gdb_stdout);
@


1.274
log
@2011-01-08  Michael Snyder  <msnyder@@vmware.com>

	* h8300-tdep.c: Comment cleanup, mostly periods and spaces.
	* hppa-hpux-tdep.c: Ditto.
	* hppa-linux-nat.c: Ditto.
	* hppa-linux-tdep.c: Ditto.
	* hppanbsd-tdep.c: Ditto.
	* hppa-tdep.c: Ditto.
	* hppa-tdep.h: Ditto.
	* hpux-thread.c: Ditto.
	* i386-cygwin-tdep.c: Ditto.
	* i386-darwin-nat.c: Ditto.
	* i386gnu-nat.c: Ditto.
	* i386-linux-nat.c: Ditto.
	* i386-linux-tdep.c: Ditto.
	* i386-nat.c: Ditto.
	* i386-nat.h: Ditto.
	* i386nbsd-tdep.c: Ditto.
	* i386-sol2-nat.c: Ditto.
	* i386-stub.c: Ditto.
	* i386-tdep.c: Ditto.
	* i386-tdep.h: Ditto.
	* i387-tdep.c: Ditto.
	* ia64-linux-nat.c: Ditto.
	* ia64-linux-tdep.c: Ditto.
	* ia64-tdep.c: Ditto.
	* infcall.c: Ditto.
	* infcall.h: Ditto.
	* infcmd.c: Ditto.
	* inferior.c: Ditto.
	* inferior.h: Ditto.
	* infloop.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* interps.c: Ditto.
	* interps.h: Ditto.
	* iq2000-tdep.c: Ditto.
	* irix5-nat.c: Ditto.
	* jit.c: Ditto.
	* jit.h: Ditto.
	* jv-exp.y: Ditto.
	* jv-lang.c: Ditto.
	* jv-lang.h: Ditto.
	* jv-typeprint.c: Ditto.
	* jv-valprint.c: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* linespec.c: Ditto.
	* linux-fork.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-thread-db.c: Ditto.
	* lm32-tdep.c: Ditto.
@
text
@a1944 1
  gdb_byte buffer[MAX_REGISTER_SIZE];
d1948 3
d1982 3
d1986 1
a1986 1
      if (! frame_register_read (frame, i, buffer))
d1994 2
a1995 2
      if (TYPE_CODE (register_type (gdbarch, i)) == TYPE_CODE_FLT
	  || TYPE_CODE (register_type (gdbarch, i)) == TYPE_CODE_DECFLOAT)
d1999 1
d2003 5
a2007 2
	  val_print (register_type (gdbarch, i), buffer, 0, 0,
		     file, 0, NULL, &opts, current_language);
d2018 1
a2018 1
	      fprintf_filtered (file, "%02x", (unsigned char) buffer[idx]);
d2029 4
a2032 2
	  val_print (register_type (gdbarch, i), buffer, 0, 0,
		     file, 0, NULL, &opts, current_language);
d2035 1
a2035 1
	  if (TYPE_VECTOR (register_type (gdbarch, i)) == 0)
d2040 4
a2043 2
	      val_print (register_type (gdbarch, i), buffer, 0, 0,
			 file, 0, NULL, &opts, current_language);
@


1.273
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d132 1
a132 1
   Arguments are separated by spaces. Empty string (pointer to '\0')
d168 1
a168 1
/* Accessor routines. */
d363 2
a364 2
   of a command. If it has, it removes it and returns 1. Otherwise it
   does nothing and returns 0. */
d476 1
a476 1
/* Implement the "run" command. If TBREAK_AT_MAIN is set, then insert
d535 1
a535 1
         doesn't support it, error out. */
d540 1
a540 1
         to simulate synchronous (fg) execution. */
d543 1
a543 1
	  /* Simulate synchronous execution */
d547 1
a547 1
      /* If there were other args, beside '&', process them. */
d656 1
a656 1
   is likely to mix up recorded and live target data. So simply
d703 1
a703 1
  /* Find out whether we must run in the background. */
d708 1
a708 1
     error out. */
d713 1
a713 1
     foreground, synchronously. */
d716 1
a716 1
      /* Simulate synchronous execution */
d851 1
a851 1
     doesn't support it, error out. */
d856 1
a856 1
     to simulate synchronous (fg) execution. */
d859 1
a859 1
      /* Simulate synchronous execution */
d865 1
a865 1
  if (!single_inst || skip_subroutines)		/* leave si command alone */
d929 3
a931 3
   to the user. If count is > 1, we will need to do one more call to
   proceed(), via step_once(). Basically it is like step_once and
   step_1_continuation are co-recursive. */
d1075 1
a1075 1
  /* Find out whether we must run in the background. */
d1080 1
a1080 1
     error out. */
d1099 1
a1099 1
  resolve_sal_pc (&sal);	/* May error out */
d1101 1
a1101 1
  /* See if we are trying to jump to another function. */
d1139 1
a1139 1
     foreground, synchronously. */
d1142 1
a1142 1
      /* Simulate synchronous execution */
d1151 1
a1151 1
/* Go to line or address in current procedure */
d1264 1
a1264 1
     not). */
d1315 1
a1315 1
  /* Find out whether we must run in the background. */
d1320 1
a1320 1
     error out. */
d1325 1
a1325 1
     foreground, synchronously. */
d1328 1
a1328 1
      /* Simulate synchronous execution */
d1440 1
a1440 1
   soon as it detects that the target has stopped. This function is
d1819 1
a1819 1
  /* Find seperation between variable name and value */
d1827 1
a1827 1
         (possibly the equals). */
d1847 1
a1847 1
	p = arg + strlen (arg);	/* So that savestring below will work */
d1851 1
a1851 1
      /* Not setting variable value to null */
d1890 1
a1890 1
/* Handle the execution path (PATH variable) */
d1913 1
a1913 1
  /* Can be null if path is not set */
d1925 1
a1925 1
/* Print out the machine register regnum. If regnum is -1, print all
d2206 1
a2206 1
     some targets don't have processes! */
d2218 1
a2218 1
      init_thread_list ();		/* Destroy thread info */
d2283 1
a2283 2
/*
   attach_command --
d2312 2
a2313 2
	     filename.  Not much more we can do...)
	   */
d2436 1
a2436 1
         doesn't support it, error out. */
d2445 1
a2445 1
      /* Simulate synchronous execution */
d2482 1
a2482 1
      /* Careful here. See comments in inferior.h.  Basically some
d2625 1
a2625 1
  dont_repeat ();		/* Not for the faint of heart */
d2667 1
a2667 1
      dont_repeat ();		/* Not for the faint of heart */
d2732 1
a2732 1
  /* add the filename of the terminal connected to inferior I/O */
@


1.272
log
@run copyright.sh for 2011.
@
text
@d109 2
a110 1
static void step_once (int skip_subroutines, int single_inst, int count, int thread);
d129 5
a133 4
/* Scratch area where string containing arguments to give to the program will be
   stored by 'set args'.  As soon as anything is stored, notice_args_set will
   move it into per-inferior storage.  Arguments are separated by spaces. Empty
   string (pointer to '\0') means no args.  */
d342 2
a343 1
	    error (_("can't handle command-line argument containing whitespace"));
d569 2
a570 1
			  environ_vector (current_inferior ()->environment), from_tty);
d652 1
a652 2
    error (_("\
Cannot execute this command without a live selected thread."));
d663 1
a663 2
    error (_("\
Cannot execute this command while looking at trace frames."));
d735 2
a736 2
    error (_("\
Can't resume all threads and specify proceed count simultaneously."));
d1016 3
a1018 3
	      printf_filtered (_("\
Single stepping until exit from function %s,\n\
which has no line number information.\n"), name);
d1120 2
a1121 1
	  if (!query (_("WARNING!!!  Destination is in unmapped overlay!  Jump anyway? ")))
d1755 2
a1756 2
	      printf_filtered (_("\
It stopped at a breakpoint that has since been deleted.\n"));
d1772 2
a1773 2
      printf_filtered (_("\
Type \"info stack\" or \"info registers\" for more information.\n"));
d1863 2
a1864 2
      printf_filtered (_("\
Setting environment variable \"%s\" to null value.\n"),
d1898 2
a1899 1
  puts_filtered (get_in_environ (current_inferior ()->environment, path_var_name));
d2706 2
a2707 2
	fprintf_filtered (file, "\
No floating-point info available for this processor.\n");
d2723 2
a2724 2
  printf_filtered (_("\
\"unset\" must be followed by the name of an unset subcommand.\n"));
d2783 2
a2784 1
fully linked executable files and separately compiled object files as needed."));
d2792 2
a2793 1
fully linked executable files and separately compiled object files as needed."),
d2831 2
a2832 1
Argument N means do this N times (or till program stops for another reason)."));
d2837 2
a2838 1
Argument N means do this N times (or till program stops for another reason)."));
d2850 2
a2851 1
Argument N means do this N times (or till program stops for another reason)."));
d2858 2
a2859 1
Argument N means do this N times (or till program stops for another reason)."));
d2864 2
a2865 1
or a specified location (same args as break command) within the current frame."));
d2870 2
a2871 1
Continue the program up to the given location (same form as args for break command).\n\
d2912 4
a2915 2
Input and output redirection with \">\", \"<\", or \">>\" are also allowed.\n\n\
With no arguments, uses arguments last specified (with \"run\" or \"set args\").\n\
@


1.271
log
@gdb
	PR c++/9593:
	* thread.c (clear_thread_inferior_resources): Call
	delete_longjmp_breakpoint.
	* infrun.c (handle_inferior_event): Handle exception breakpoints.
	(handle_inferior_event): Likewise.
	(insert_exception_resume_breakpoint): New function.
	(check_exception_resume): Likewise.
	* inferior.h (delete_longjmp_breakpoint_cleanup): Declare.
	* infcmd.c (delete_longjmp_breakpoint_cleanup): No longer static.
	(step_1): Set thread's initiating frame.
	(until_next_continuation): New function.
	(until_next_command): Support exception breakpoints.
	(finish_command_continuation): Delete longjmp breakpoint.
	(finish_forward): Support exception breakpoints.
	* gdbthread.h (struct thread_info) <initiating_frame>: New field.
	* breakpoint.h (enum bptype) <bp_exception, bp_exception_resume,
	bp_exception_master>: New constants.
	(struct bpstat_what) <is_longjmp>: New field.
	(set_longjmp_breakpoint): Update.
	* breakpoint.c (create_exception_master_breakpoint): New function.
	(update_breakpoints_after_exec): Handle bp_exception_master.  Call
	create_exception_master_breakpoint.
	(print_it_typical): Handle bp_exception_master, bp_exception.
	(bpstat_stop_status): Handle bp_exception_master.
	(bpstat_what): Handle bp_exception_master, bp_exception,
	bp_exception_resume.
	(bptype_string): Likewise.
	(print_one_breakpoint_location): Likewise.
	(allocate_bp_location): Likewise.
	(set_longjmp_breakpoint): Handle exception breakpoints.  Change
	interface.
	(delete_longjmp_breakpoint): Handle exception breakpoints.
	(mention): Likewise.
	(struct until_break_command_continuation_args) <thread_num>: New
	field.
	(until_break_command_continuation): Call
	delete_longjmp_breakpoint.
	(until_break_command): Support exception breakpoints.
	(delete_command): Likewise.
	(breakpoint_re_set_one): Likewise.
	(breakpoint_re_set): Likewise.
gdb/testuite
	* gdb.java/jnpe.java: New file.
	* gdb.java/jnpe.exp: New file.
	* gdb.cp/nextoverthrow.exp: New file.
	* gdb.cp/nextoverthrow.cc: New file.
@
text
@d5 1
a5 1
   2008, 2009, 2010 Free Software Foundation, Inc.
@


1.270
log
@gdb/
	Rename and move inferior_thread_state and inferior_status.
	* gdbthread.h (struct thread_control_state): New struct, move fields
	step_range_start, step_range_end, step_frame_id, step_stack_frame_id,
	trap_expected, proceed_to_finish, in_infcall, step_over_calls,
	stop_step and stop_bpstat here from struct thread_info.
	(struct thread_suspend_state): New struct, move field stop_signal here
	from struct thread_info.
	(struct thread_info): Move the fields above from this struct.
	* inferior.h: Move the inferior_thread_state and inferior_status
	declarations comment to their definitions at infrun.c.
	(struct inferior_control_state): New struct, move field stop_soon from
	struct inferior here.
	(struct inferior_suspend_state): New empty struct.
	(struct inferior): New fields control and suspend.  Move out field
	stop_soon.
	* infrun.c (struct inferior_thread_state): Rename to ...
	(infcall_suspend_state): ... here.  Replace field stop_signal by
	fields thread_suspend and inferior_suspend.
	(save_inferior_thread_state): Rename to ...
	(save_infcall_suspend_state): ... here.  New variable inf.  Update the
	code for new fields.
	(restore_inferior_thread_state): Rename to ...
	(restore_infcall_suspend_state): ... here.  New variable inf.  Update
	the code for new fields.
	(do_restore_inferior_thread_state_cleanup): Rename to ...
	(do_restore_infcall_suspend_state_cleanup): ... here.
	(make_cleanup_restore_inferior_thread_state): Rename to ...
	(make_cleanup_restore_infcall_suspend_state): ... here.
	(discard_inferior_thread_state): Rename to ...
	(discard_infcall_suspend_state): ... here.
	(get_inferior_thread_state_regcache): Rename to ...
	(get_infcall_suspend_state_regcache): ... here.
	(struct inferior_status): Rename to ...
	(struct infcall_control_state): ... here.  Replace fields
	step_range_start, step_range_end, step_frame_id, step_stack_frame_id,
	trap_expected, proceed_to_finish, in_infcall, step_over_calls,
	stop_step, stop_bpstat and stop_soon by fields thread_control and
	inferior_control.
	(save_inferior_status): Rename to ...
	(save_infcall_control_state): ... here.  Update the code for new
	fields.
	(restore_inferior_status): Rename to ...
	(restore_infcall_control_state): ... here.  Update the code for new
	fields.
	(do_restore_inferior_status_cleanup): Rename to ...
	(do_restore_infcall_control_state_cleanup): ... here.
	(make_cleanup_restore_inferior_status): Rename to ...
	(make_cleanup_restore_infcall_control_state): ... here.
	(discard_inferior_status): Rename to ...
	(discard_infcall_control_state): ... here.
	* alpha-tdep.c, breakpoint.c, dummy-frame.c, dummy-frame.h,
	exceptions.c, fbsd-nat.c, gdbthread.h, infcall.c, infcmd.c,
	inferior.c, inferior.h, infrun.c, linux-nat.c, mi/mi-interp.c,
	mips-tdep.c, procfs.c, solib-irix.c, solib-osf.c, solib-spu.c,
	solib-sunos.c, solib-svr4.c, thread.c, windows-nat.c: Update all the
	references to the moved fields and renamed functions.
@
text
@d825 1
a825 1
static void
d865 2
d870 1
a870 1
      set_longjmp_breakpoint (thread);
d1225 10
d1251 2
d1288 3
d1292 8
d1492 1
d1577 1
d1588 3
@


1.269
log
@	* breakpoint.c (update_watchpoint, _initialize_breakpoint): Remove
	unnecessary space in string.
	* filesystem.c (_initialize_filesystem): Ditto.
	* frame.c (_initialize_frame): Ditto.
	* infcmd.c (step_once): Ditto.
	* infrun.c (_initialize_infrun): Ditto.
	* linux-nat.c (linux_child_follow_fork): Ditto.
	* maint.c (maintenance_deprecate): Ditto.
	* memattr.c (_initialize_mem): Ditto.
	* mips-tdep.c (_initialize_mips_tdep): Ditto.
	* monitor.c (monitor_open): Ditto.
	* procfs.c (procfs_xfer_memory): Ditto.
	* reverse.c (bookmarks_info): Ditto.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Ditto.
	* stack.c (_initialize_stack): Ditto.
	* tracepoint.c (_initialize_tracepoint): Ditto.
	* xtensa-tdep.c (xtensa_supply_gregset,
	xtensa_regset_from_core_section): Ditto.
@
text
@d756 1
a756 1
	bs = tp->stop_bpstat;
d888 1
a888 1
	  if (!tp || !tp->stop_step || !tp->step_multi)
d938 1
a938 1
      if (tp->step_multi && tp->stop_step)
d996 2
a997 1
				 &tp->step_range_start, &tp->step_range_end);
d1000 3
a1002 3
	  if (tp->step_range_end == 0 && step_stop_if_no_debug)
	    tp->step_range_start = tp->step_range_end = 1;
	  else if (tp->step_range_end == 0)
d1007 2
a1008 2
					    &tp->step_range_start,
					    &tp->step_range_end) == 0)
d1020 1
a1020 1
	  tp->step_range_start = tp->step_range_end = 1;
d1025 1
a1025 1
	    tp->step_over_calls = STEP_OVER_NONE;
d1029 1
a1029 1
	tp->step_over_calls = STEP_OVER_ALL;
d1259 2
a1260 2
      tp->step_range_start = SYMBOL_VALUE_ADDRESS (msymbol);
      tp->step_range_end = pc;
d1266 2
a1267 2
      tp->step_range_start = BLOCK_START (SYMBOL_BLOCK_VALUE (func));
      tp->step_range_end = sal.end;
d1270 1
a1270 1
  tp->step_over_calls = STEP_OVER_ALL;
d1433 1
a1433 1
      bs = tp->stop_bpstat;
d1464 1
a1464 1
  if (bs != NULL && tp->proceed_to_finish)
d1497 1
a1497 1
  tp->proceed_to_finish = 0;
d1523 2
a1524 1
      back_up = bpstat_find_breakpoint (tp->stop_bpstat, breakpoint) != NULL;
d1534 1
a1534 1
      tp->step_range_start = tp->step_range_end = 1;
d1561 2
a1562 1
  tp->proceed_to_finish = 1;    /* We want stop_registers, please...  */
d1638 3
a1640 2
      tp->step_range_start = tp->step_range_end = get_frame_pc (frame);
      tp->step_over_calls = STEP_OVER_ALL;
d1706 1
a1706 1
  bs = tp->stop_bpstat;
d1712 1
a1712 1
  if (tp->stop_step)
d1730 1
a1730 1
  else if (tp->stop_signal != TARGET_SIGNAL_0)
d1733 2
a1734 2
		       target_signal_to_name (tp->stop_signal),
		       target_signal_to_string (tp->stop_signal));
d2213 1
a2213 1
      && thread->stop_signal == TARGET_SIGNAL_0)
d2263 1
a2263 1
  inferior->stop_soon = NO_STOP_QUIETLY;
d2315 1
a2315 1
	  if (inferior_thread ()->stop_signal == TARGET_SIGNAL_0)
d2454 1
a2454 1
      inferior->stop_soon = STOP_QUIETLY_NO_SIGSTOP;
d2517 1
a2517 1
      inferior->stop_soon = STOP_QUIETLY_REMOTE;
@


1.268
log
@gdb
	PR gdb/9977, PR exp/11636:
	* value.h (value_offset): Update.
	(struct lval_funcs) <check_validity>: New field.
	<copy_closure>: Make argument const.
	(value_computed_closure): Update.
	(value_contents_for_printing): Declare.
	(value_bits_valid): Likewise.
	(val_print): Likewise.
	(set_value_component_location): Update.
	(value_entirely_optimized_out): Declare.
	* value.c (value_offset): Argument now const.
	(require_not_optimized_out): New function.
	(value_contents_for_printing): New function.
	(value_contents_all): Call require_not_optimized_out.
	(value_contents): Likewise.
	(value_bits_valid): New function.
	(value_computed_closure): Argument now const.
	(set_value_component_location): Make 'whole' argument const.
	(value_entirely_optimized_out): New function.
	(value_bitsize): Argument now 'const'.
	(value_bitpos): Likewise.
	(value_type): Likewise.
	* valprint.h (val_print_array_elements): Update.
	* valprint.c (val_print): Add 'val' argument.  Use
	valprint_check_validity.
	(valprint_check_validity): New function.
	(value_check_printable): Use value_entirely_optimized_out.
	(common_val_print): Update.
	(value_print): Likewise.
	(val_print_array_elements): Add 'val' argument.
	* valops.c (value_fetch_lazy): Use value_contents_for_printing,
	value_bits_valid.  Reinit frame cache for lval_computed.
	* sh64-tdep.c (sh64_do_register): Update.
	* scm-valprint.c (scm_val_print): Add 'val' argument.
	* scm-lang.h (scm_val_print): Update.
	* python/python.h (apply_val_pretty_printer): Update.
	* python/py-prettyprint.c (apply_val_pretty_printer): Add 'val'
	argument.  Call set_value_component_location.
	* printcmd.c (print_scalar_formatted): Update.
	* p-valprint.c (pascal_val_print): Add 'val' argument.
	(pascal_object_print_value_fields): Likewise.
	(pascal_object_print_value): Likewise.
	(pascal_object_print_static_field): Update.
	* p-lang.h (pascal_val_print): Update.
	(pascal_object_print_value_fields): Update.
	* mt-tdep.c (mt_registers_info): Update.
	* mi/mi-main.c (get_register): Update.
	(mi_cmd_data_evaluate_expression): Use common_val_print.
	* m2-valprint.c (m2_print_array_contents): Add 'val' argument.
	(m2_print_unbounded_array): Likewise.
	(m2_val_print): Likewise.
	* m2-lang.h (m2_val_print): Update.
	* language.h (struct language_defn) <la_val_print>: Add 'val'
	argument.
	(LA_VAL_PRINT): Likewise.
	* language.c (unk_lang_val_print): Add 'val' argument.
	* jv-valprint.c (java_print_value_fields): Add 'val' argument.
	(java_val_print): Likewise.
	* jv-lang.h (java_val_print): Add 'val' argument.
	* infcmd.c (default_print_registers_info): Update.
	* f-valprint.c (f77_print_array_1): Add 'val' argument.
	(f77_print_array): Likewise.
	(f_val_print): Likewise.
	* f-lang.h (f_val_print): Add 'val' argument.
	* dwarf2loc.c (read_pieced_value): Use value_bitsize and
	value_bitpos.
	<DWARF_VALUE_OPTIMIZED_OUT>: Don't print warning.  Call
	set_value_optimized_out.
	(write_pieced_value): Use value_bitsize and value_bitpos.
	<default>: Don't exit loop.
	(check_pieced_value_validity): New function.
	(pieced_value_funcs): Reference check_pieced_value_validity,
	check_pieced_value_invalid.
	(copy_pieced_value_closure): Update.
	(check_pieced_value_bits): New function.
	(check_pieced_value_invalid): New function.
	* d-valprint.c (dynamic_array_type): Add 'val' argument.
	(d_val_print): Likewise.
	* d-lang.h (d_val_print): Update.
	* cp-valprint.c (cp_print_value_fields): Add 'val' argument.
	(cp_print_value_fields_rtti): Likewise.
	(cp_print_value): Likewise.
	(cp_print_static_field): Update.
	* c-valprint.c (c_val_print): Add 'val' argument.
	(c_value_print): Update.
	* c-lang.h (c_val_print): Update.
	(cp_print_value_fields): Likewise.
	(cp_print_value_fields_rtti): Likewise.
	* ada-valprint.c (struct ada_val_print_args): Remove.
	(val_print_packed_array_elements): Add 'val' argument.
	(ada_val_print): Likewise.  Rewrite.
	(ada_val_print_stub): Remove.
	(ada_val_print_array): Add 'val' argument.
	(ada_val_print_1): Likewise.
	(print_variant_part): Likewise.
	(ada_value_print): Update.
	(print_record): Add 'val' argument.
	(print_field_values): Likewise.
	* ada-lang.h (ada_val_print): Update.
gdb/testsuite
	PR gdb/9977, PR exp/11636::
	* gdb.dwarf2/pieces.exp (pieces_test_f3): Remove kfail.
	(pieces_test_f6): Update expected output.
@
text
@d1012 1
a1012 1
Single stepping until exit from function %s, \n\
@


1.267
log
@2010-05-14  Michael Snyder  <msnyder@@vmware.com>

	* infcall.c: White space.
	* inf-child.c: White space.
	* infcmd.c: White space.
	* inferior.c: White space.
	* inf-loop.c: White space.
	* inflow.c: White space.
	* inline-frame.c: White space.
	* interps.c: White space.
@
text
@d1960 1
a1960 1
		     file, 0, &opts, current_language);
d1983 1
a1983 2
		     file, 0, &opts,
		     current_language);
d1992 1
a1992 1
			 file, 0, &opts, current_language);
@


1.266
log
@2010-05-06  Michael Snyder  <msnyder@@vmware.com>

	* linespec.c (decode_compound): Delete unused variable.
	* dictionary.c (iterator_next_hashed): Delete unused variable.
	* infcall.c (call_function_by_hand): Delete unused variable.
	* infcmd.c (step_1): Delete unused variable.
	(registers_info): Delete unused variable.
	(attach_command): Delete unused variable.
	* infrun.c (follow_exec): Delete unused variable.
	(handle_step_into_function_backwards): Delete unused variable.
	(_initialize_infrun): Delete unused variable.
	* stack.c (parse_frame_specification_1): Delete unused variable.
	(frame_info): Delete unused variable.
	(backtrace_command_1): Delete unused variable.
	(catch_info): Delete unused variable.
@
text
@d200 1
d673 1
a673 1
        there may be other stopped threads.  */
d879 1
d973 1
d1004 1
d1632 1
d1692 1
d1746 1
d1764 1
d1872 1
d1966 1
d2049 1
d2078 1
d2092 1
d2355 1
d2363 1
d2601 1
@


1.265
log
@2010-04-08  Stan Shebs  <stan@@codesourcery.com>
	    Pedro Alves  <pedro@@codesourcery.com>

	* tracepoint.h (struct trace_status): New fields disconnected_tracing
	and circular_buffer.
	(disconnect_tracing): Rename from disconnect_or_stop_tracing.
	* tracepoint.c (trace_status_command): Display target's status for
	disconnected tracing and circular buffer.
	(disconnect_tracing): Rename from disconnect_or_stop_tracing, add
	query for non-disconnected-tracing case, remove the stop_tracing
	call.
	(tfile_open): Clear disconnected and circular buffer status.
	(trace_save): Save disconnected and circular buffer status.
	(parse_trace_status): Parse disconnected and circular buffer status,
	also recognize disconnected as a stop reason.
	* remote.c (remote_set_disconnected_tracing): Only set
	QTDisconnected if the remote end supports disconnected tracing.
	Warn otherwise, if trying to enable disconnected tracing.
	* infcmd.c (detach_command): Update disconnect_tracing call.
	* cli/cli-cmds.c (quit_command): Ditto.

	* gdb.texinfo (Tracepoint Packets): Describe disconn and circular
	trace status fields.
@
text
@a834 1
  struct frame_info *frame;
a1995 2
  int regnum, numregs;
  char *end;
a2355 2
  char *exec_file;
  char *full_exec_path = NULL;
@


1.264
log
@gdb/
	* infcmd.c (run_command_1): Call proceed with regcache_read_pc address.
	* config/djgpp/fnchange.lst: Add translation for break-entry.exp.

gdb/testsuite/
	* gdb.base/break-entry.exp: New.
@
text
@d2550 1
a2550 1
  disconnect_or_stop_tracing (from_tty);
@


1.263
log
@	PR gdb/11327, PR gdb/11328, PR breakpoints/11368:
	* infrun.c (handle_inferior_event): Change initialization of
	stop_stack_dummy.
	(handle_inferior_event): Change assignment to stop_stack_dummy.
	(normal_stop): Update use of stop_stack_dummy.
	(struct inferior_status) <stop_stack_dummy>: Change type.
	* inferior.h (stop_stack_dummy): Update.
	* infcmd.c (stop_stack_dummy): Change type.
	* infcall.c (cleanup_delete_std_terminate_breakpoint): New
	function.
	(call_function_by_hand): Call set_std_terminate_breakpoint.
	Rewrite std::terminate handling.
	* breakpoint.h (enum bptype) <bp_std_terminate,
	bp_std_terminate_master>: New.
	(enum stop_stack_kind): New.
	(struct bpstat_what) <call_dummy>: Change type.
	(set_std_terminate_breakpoint, delete_std_terminate_breakpoint):
	Declare.
	* breakpoint.c (create_std_terminate_master_breakpoint): New
	function.
	(update_breakpoints_after_exec): Handle bp_std_terminate_master.
	Call create_std_terminate_master_breakpoint.
	(print_it_typical): Handle new breakpoint kinds.
	(bpstat_stop_status): Handle bp_std_terminate_master.
	(bpstat_what): Correctly set call_dummy field.  Handle
	bp_std_terminate_master and bp_std_terminate.
	(print_one_breakpoint_location): Update.
	(allocate_bp_location): Update.
	(set_std_terminate_breakpoint): New function.
	(delete_std_terminate_breakpoint): Likewise.
	(create_thread_event_breakpoint): Update.
	(delete_command): Update.
	(breakpoint_re_set_one): Update.
	(breakpoint_re_set): Call create_std_terminate_master_breakpoint.
@
text
@d583 3
a585 2
  /* Start the target running.  */
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_0, 0);
@


1.262
log
@	* infcmd.c (finish_command_continuation): Wrap print_return_value
	in TRY_CATCH.
@
text
@d158 1
a158 1
int stop_stack_dummy;
@


1.261
log
@	gdb/
	* infcmd.c (until_command): Use ERROR_NO_INFERIOR.  Ensure there's
	a valid selected thread, and that it is not running.
	(advance_command): Ditto.
	(finish_command): Ditto.

	gdb/testsuite/
	* gdb.base/default.exp: Adjust.
@
text
@d1442 13
a1454 1
	print_return_value (SYMBOL_TYPE (a->function), value_type);
@


1.260
log
@2010-03-17 Stan Shebs  <stan@@codesourcery.com>

	* infcall.c: Include tracepoint.h.
	(call_function_by_hand): Disallow calls in tfind mode.
	* infcmd.c: Include tracepoint.h.
	(ensure_not_tfind_mode): New function.
	(continue_1): Call it.
	(step_1) Ditto.
	(jump_command): Ditto.
	(signal_command): Ditto.
	(advance_command): Ditto.
	(until_command): Ditto.
	(finish_command): Ditto.
	* tracepoint.h (disconnect_or_stop_tracing): Declare.
@
text
@d1277 1
a1277 3
  if (!target_has_execution)
    error (_("The program is not running."));

d1279 2
d1310 1
a1310 3
  if (!target_has_execution)
    error (_("The program is not running."));

d1312 2
d1568 1
d1570 2
a1595 2
  if (!target_has_execution)
    error (_("The program is not running."));
@


1.259
log
@	gdb/
	* infcmd.c (show_inferior_tty_command): Check for NULL.
	Correct output message.
@
text
@d57 1
a57 2

extern void disconnect_or_stop_tracing (int from_tty);
d650 12
d666 1
d840 1
d1062 1
d1165 1
d1280 2
d1313 2
d1568 2
@


1.258
log
@	Per-inferior args and tty and environment.

	* infcmd.c (inferior_args): Rename to ...
	(inferior_args_scratch): ... this.
	(inferior_io_terminal): Rename to ...
	(inferior_io_terminal_scratch): ... this.
	(inferior_argc, inferior_argv): Remove.
	(set_inferior_io_terminal, get_inferior_io_terminal): Store
	inside current_inferior().
	(set_inferior_tty_command, show_inferior_tty_command): New.
	(get_inferior_args, set_inferior_args): Store inside
	current_inferior().
	(notice_args_set): Likewise and rename to...
	(set_args_command): ... this.
	(set_inferior_args_vector): Likewise.
	(notice_args_read): Rename to...
	(show_args_command): ...new.
	(tty_command): Remove.
	(run_command_1): Don't free old args, as they are freed by
	set_inferior_arg now.
	(run_no_args_command): Likewise.
	(inferior_environ): Remove.
	(run_command_1): Use environment of the current inferior.
	(environment_info, set_environment_command)
	(unset_environment_command, path_info, path_command): Likewise.
	(_initialize_infcmd): Adjust for function and variable renames.
	Do not init inferior_environ.
	* inferior.h (set_inferior_arg): Adjust prototype.
	(struct inferior): New fields args, argc, argv, terminal, environment.
	(inferior_environ): Remove declaration.
	* inferior.c (free_inferior): Free new fields.
	(add_inferior_silent): Initialize 'environment' field.
	* main.c (captured_main): Set arguments only after the initial
	inferior has been created.  Set set_inferior_io_terminal,
	not tty_command.
	* mi/mi-main.c (mi_cmd_env_path): Use environment of the current
	inferior.
	(_initialize_mi_cmd_env): Adjust for disappearance of global
	inferior_environ.
	* solib.c (solib_find): Use environment of the current inferior.
@
text
@d200 3
d204 2
a205 3
		    _("argument list to give program being debugged when "
		      "it is started is %s"),
		    get_inferior_io_terminal ());
@


1.257
log
@gdb/
	Add from_tty to solib_create_inferior_hook.
	* infcmd.c (post_create_inferior): Move solib_add after
	solib_create_inferior_hook.  Pass from_tty to
	solib_create_inferior_hook.  Call solib_add and SOLIB_ADD with
	0 from_tty and comment why.
	* infrun.c (follow_exec): Pass from_tty solib_create_inferior_hook as 0.
	* linux-nat.c (linux_child_follow_fork): Likewise.
	* nto-procfs.c (procfs_post_attach, procfs_create_inferior): Likewise.
	* solib-darwin.c (darwin_solib_create_inferior_hook): New parameter
	from_tty.
	* solib-frv.c (frv_solib_create_inferior_hook): Likewise.
	* solib-irix.c (irix_solib_create_inferior_hook): Likewise.
	* solib-null.c (null_solib_create_inferior_hook): Likewise.
	* solib-osf.c (osf_solib_create_inferior_hook): Likewise.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Likewise.
	* solib-som.c (som_solib_create_inferior_hook): Likewise.
	* solib-spu.c (spu_solib_create_inferior_hook): New parameter from_tty.
	Pass it to svr4_so_ops.solib_create_inferior_hook.
	* solib-sunos.c (sunos_solib_create_inferior_hook): New parameter
	from_tty.
	* solib-svr4.c (enable_break): New parameter from_tty.  Pass it to
	solib_add.
	(svr4_solib_create_inferior_hook): New parameter from_tty.  Pass it to
	enable_break.
	* solib-target.c (solib_target_solib_create_inferior_hook): New
	parameter from_tty.
	* solib.c (solib_create_inferior_hook): New parameter from_tty.  Pass
	it to ops->solib_create_inferior_hook.
	(reload_shared_libraries): Pass from_tty to solib_create_inferior_hook.
	Move solib_add after solib_create_inferior_hook, call it now with
	from_tty as 0.  New comment there.
	* solib.h (solib_create_inferior_hook): New parameter from_tty.
	* solist.h (struct target_so_ops <solib_create_inferior_hook>):
	Likewise.
@
text
@d129 4
a132 2
/* String containing arguments to give to the program, separated by spaces.
   Empty string (pointer to '\0') means no args.  */
d134 1
a134 1
static char *inferior_args;
d136 2
a137 2
/* The inferior arguments as a vector.  If INFERIOR_ARGC is nonzero,
   then we must compute INFERIOR_ARGS from this (via the target).  */
d139 1
a139 6
static int inferior_argc;
static char **inferior_argv;

/* File name for default use for standard in/out in the inferior.  */

static char *inferior_io_terminal;
a165 4
/* Environment to use for running inferior,
   in format described in environ.h.  */

struct gdb_environ *inferior_environ;
d169 3
d175 2
a176 7
  if (inferior_io_terminal)
    xfree (inferior_io_terminal);

  if (!terminal_name)
    inferior_io_terminal = NULL;
  else
    inferior_io_terminal = xstrdup (terminal_name);
d182 22
a203 1
  return inferior_io_terminal;
d209 1
a209 1
  if (inferior_argc != 0)
d211 1
a211 1
      char *n, *old;
d213 4
a216 3
      n = construct_inferior_arguments (inferior_argc, inferior_argv);
      old = set_inferior_args (n);
      xfree (old);
d219 2
a220 2
  if (inferior_args == NULL)
    inferior_args = xstrdup ("");
d222 1
a222 1
  return inferior_args;
d225 4
a228 1
char *
d231 4
a234 7
  char *saved_args = inferior_args;

  inferior_args = newargs;
  inferior_argc = 0;
  inferior_argv = 0;

  return saved_args;
d240 2
a241 2
  inferior_argc = argc;
  inferior_argv = argv;
d246 1
a246 1
notice_args_set (char *args, int from_tty, struct cmd_list_element *c)
d248 3
a250 2
  inferior_argc = 0;
  inferior_argv = 0;
d255 2
a256 2
notice_args_read (struct ui_file *file, int from_tty,
		  struct cmd_list_element *c, const char *value)
a385 9
void
tty_command (char *file, int from_tty)
{
  if (file == 0)
    error_no_arg (_("terminal name for running target process"));

  set_inferior_io_terminal (file);
}

d544 1
a544 4
	{
          char *old_args = set_inferior_args (xstrdup (args));
          xfree (old_args);
	}
d564 1
a564 1
			  environ_vector (inferior_environ), from_tty);
d599 1
a599 2
  char *old_args = set_inferior_args (xstrdup (""));
  xfree (old_args);
d1703 1
a1703 1
      char *val = get_in_environ (inferior_environ, var);
d1720 1
a1720 1
      char **vector = environ_vector (inferior_environ);
d1785 1
a1785 1
      set_in_environ (inferior_environ, var, "");
d1788 1
a1788 1
    set_in_environ (inferior_environ, var, val);
d1801 2
a1802 2
	  free_environ (inferior_environ);
	  inferior_environ = make_environ ();
d1806 1
a1806 1
    unset_in_environ (inferior_environ, var);
d1817 1
a1817 1
  puts_filtered (get_in_environ (inferior_environ, path_var_name));
d1829 1
a1829 1
  env = get_in_environ (inferior_environ, path_var_name);
d1835 1
a1835 1
  set_in_environ (inferior_environ, path_var_name, exec_path);
d2650 1
a2650 1
			    &inferior_io_terminal, _("\
d2653 4
a2656 1
Usage: set inferior-tty /dev/pts/1"), NULL, NULL, &setlist, &showlist);
d2660 1
a2660 1
				     &inferior_args, _("\
d2664 2
a2665 2
				     notice_args_set,
				     notice_args_read,
a2861 3

  inferior_environ = make_environ ();
  init_environ (inferior_environ);
@


1.256
log
@	Support disconnected tracing.
	* infcmd.c (detach_command): Ask whether to stop tracing.
	* cli/cli-cmds.c (quit_command): Ditto.
	* breakpoint.h (struct breakpoint): New field number_on_target.
	* breakpoint.c (create_tracepoint_from_upload): New function.
	(get_tracepoint_by_number_on_target): New function.
	* remote.c (struct remote): New field disconnected_tracing.
	(remote_disconnected_tracing_feature): New function.
	(remote_protocol_features): Add DisconnectedTracing.
	(struct uploaded_tp): New struct.
	(uploaded_tps): New global.
	(get_uploaded_tp): New function.
	(find_matching_tracepoint): New function.
	(remote_get_tracing_state): New function.
	(remote_start_remote): Call it.
	* tracepoint.c (disconnected_tracing): New global.
	(trace_start_command): Initialize number_on_target.
	(stop_tracing): New function, split out from...
	(trace_stop_command): Call stop_tracing.
	(get_trace_status): New function, split out from...
	(trace_status_command): Call get_trace_status, add info on
	disconnection behavior.
	(disconnect_or_stop_tracing): New function.
	(finish_tfind_command): Translate from number on target.
	(trace_find_tracepoint_command): Translate to number on target.
	(send_disconnected_tracing_value): New function.
	(set_disconnected_tracing): New function.
	(_initialize_tracepoint): Add disconnected-tracing variable.
	* NEWS: Mention disconnected tracing.

	* gdb.texinfo (Starting and Stopping Trace Experiments): Document
	disconnected tracing.
	(Tracepoint Packets): Document new protocol.
@
text
@d400 11
d416 6
a421 4
	 libraries, and sometimes it doesn't.  Try to do so first, so
	 that we can add them with the correct value for FROM_TTY.
	 If we made all the inferior hook methods consistent,
	 this call could be removed.  */
d423 1
a423 12
      SOLIB_ADD (NULL, from_tty, target, auto_solib_add);
#else
      solib_add (NULL, from_tty, target, auto_solib_add);
#endif
    }

  if (exec_bfd)
    {
      /* Create the hooks to handle shared library load and unload
	 events.  */
#ifdef SOLIB_CREATE_INFERIOR_HOOK
      SOLIB_CREATE_INFERIOR_HOOK (PIDGET (inferior_ptid));
d425 1
a425 1
      solib_create_inferior_hook ();
@


1.255
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d58 2
d2510 2
@


1.254
log
@2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	Add base multi-executable/process support to GDB.

	gdb/
	* Makefile.in (SFILES): Add progspace.c.
	(COMMON_OBS): Add progspace.o.
	* progspace.h: New.
	* progspace.c: New.

	* breakpoint.h (struct bp_target_info) <placed_address_space>: New
	field.
	(struct bp_location) <pspace>: New field.
	(struct breakpoint) <pspace>: New field.
	(bpstat_stop_status, breakpoint_here_p)
	(moribund_breakpoint_here_p, breakpoint_inserted_here_p)
	(regular_breakpoint_inserted_here_p)
	(software_breakpoint_inserted_here_p, breakpoint_thread_match)
	(set_default_breakpoint): Adjust prototypes.
	(remove_breakpoints_pid, breakpoint_program_space_exit): Declare.
	(insert_single_step_breakpoint, deprecated_insert_raw_breakpoint):
	Adjust prototypes.
	* breakpoint.c (executing_startup): Delete.
	(default_breakpoint_sspace): New.
	(breakpoint_restore_shadows): Skip if the address space doesn't
	match.
	(update_watchpoint): Record the frame's program space in the
	breakpoint location.
	(insert_bp_location): Record the address space in target_info.
	Adjust to pass the symbol space to solib_name_from_address.
	(breakpoint_program_space_exit): New.
	(insert_breakpoint_locations): Switch the symbol space and thread
	when inserting breakpoints.  Don't insert breakpoints in a vfork
	parent waiting for vfork done if we're not attached to the vfork
	child.
	(remove_breakpoints_pid): New.
	(reattach_breakpoints): Switch to a thread of PID.  Ignore
	breakpoints of other symbol spaces.
	(create_internal_breakpoint): Store the symbol space in the sal.
	(create_longjmp_master_breakpoint): Iterate over all symbol
	spaces.
	(update_breakpoints_after_exec): Ignore breakpoints for other
	symbol spaces.
	(remove_breakpoint): Rename to ...
	(remove_breakpoint_1): ... this.  Pass the breakpoints symbol
	space to solib_name_from_address.
	(remove_breakpoint): New.
	(mark_breakpoints_out): Ignore breakpoints from other symbol
	spaces.
	(breakpoint_init_inferior): Ditto.
	(breakpoint_here_p): Add an address space argument and adjust to
	use breakpoint_address_match.
	(moribund_breakpoint_here_p): Ditto.
	(regular_breakpoint_inserted_here_p): Ditto.
	(breakpoint_inserted_here_p): Ditto.
	(software_breakpoint_inserted_here_p): Ditto.
	(breakpoint_thread_match): Ditto.
	(bpstat_check_location): Ditto.
	(bpstat_stop_status): Ditto.
	(print_breakpoint_location): If there's a location to print,
	switch the current symbol space.
	(print_one_breakpoint_location): Add `allflag' argument.
	(print_one_breakpoint): Ditto.	Adjust.
	(do_captured_breakpoint_query): Adjust.
	(breakpoint_1): Adjust.
	(breakpoint_has_pc): Also match the symbol space.
	(describe_other_breakpoints): Add a symbol space argument and
	adjust.
	(set_default_breakpoint): Add a symbol space argument.	Set
	default_breakpoint_sspace.
	(breakpoint_address_match): New.
	(check_duplicates_for): Add an address space argument, and adjust.
	(set_raw_breakpoint): Record the symbol space in the location and
	in the breakpoint.
	(set_longjmp_breakpoint): Skip longjmp master breakpoints from
	other symbol spaces.
	(remove_thread_event_breakpoints, remove_solib_event_breakpoints)
	(disable_breakpoints_in_shlibs): Skip breakpoints from other
	symbol spaces.
	(disable_breakpoints_in_unloaded_shlib): Match symbol spaces.
	(create_catchpoint): Set the symbol space in the sal.
	(disable_breakpoints_before_startup): Skip breakpoints from other
	symbol spaces.	Set executing_startup in the current symbol space.
	(enable_breakpoints_after_startup): Clear executing_startup in the
	current symbol space.  Skip breakpoints from other symbol spaces.
	(clone_momentary_breakpoint): Also copy the symbol space.
	(add_location_to_breakpoint): Set the location's symbol space.
	(bp_loc_is_permanent): Switch thread and symbol space.
	(create_breakpoint): Adjust.
	(expand_line_sal_maybe): Expand comment to mention symbol spaces.
	Switch thread and symbol space when reading memory.
	(parse_breakpoint_sals): Set the symbol space in the sal.
	(break_command_really): Ditto.
	(skip_prologue_sal): Switch and space.
	(resolve_sal_pc): Ditto.
	(watch_command_1): Record the symbol space in the sal.
	(create_ada_exception_breakpoint): Adjust.
	(clear_command): Adjust.  Match symbol spaces.
	(update_global_location_list): Use breakpoint_address_match.
	(breakpoint_re_set_one): Switch thread and space.
	(breakpoint_re_set): Save symbol space.
	(breakpoint_re_set_thread): Also reset the symbol space.
	(deprecated_insert_raw_breakpoint): Add an address space argument.
	Adjust.
	(insert_single_step_breakpoint): Ditto.
	(single_step_breakpoint_inserted_here_p): Ditto.
	(clear_syscall_counts): New.
	(_initialize_breakpoint): Install it as inferior_exit observer.

	* exec.h: Include "progspace.h".
	(exec_bfd, exec_bfd_mtime): New defines.
	(exec_close): Declare.
	* exec.c: Include "gdbthread.h" and "progspace.h".
	(exec_bfd, exec_bfd_mtime, current_target_sections_1): Delete.
	(using_exec_ops): New.
	(exec_close_1): Rename to exec_close, and make public.
	(exec_close): Rename to exec_close_1, and adjust all callers.  Add
	description.  Remove target sections and close executables from
	all program spaces.
	(exec_file_attach): Add comment.
	(add_target_sections): Check on `using_exec_ops' to check if the
	target should be pushed.
	(remove_target_sections): Only unpush the target if there are no
	more target sections in any symbol space.
	* gdbcore.h: Include "exec.h".
	(exec_bfd, exec_bfd_mtime): Remove declarations.

	* frame.h (get_frame_program_space, get_frame_address_space)
	(frame_unwind_program_space): Declare.
	* frame.c (struct frame_info) <pspace, aspace>: New fields.
	(create_sentinel_frame): Add program space argument.  Set the
	pspace and aspace fields of the frame object.
	(get_current_frame, create_new_frame): Adjust.
	(get_frame_program_space): New.
	(frame_unwind_program_space): New.
	(get_frame_address_space): New.
	* stack.c (print_frame_info): Adjust.
	(print_frame): Use the frame's program space.

	* gdbthread.h (any_live_thread_of_process): Declare.
	* thread.c (any_live_thread_of_process): New.
	(switch_to_thread): Switch the program space as well.
	(restore_selected_frame): Don't warn if trying to restore frame
	level 0.

	* inferior.h: Include "progspace.h".
	(detach_fork): Declare.
	(struct inferior) <removable, aspace, pspace>
	<vfork_parent, vfork_child, pending_detach>
	<waiting_for_vfork_done>: New fields.
	<terminal_info>: Remove field.
	<data, num_data>: New fields.
	(register_inferior_data, register_inferior_data_with_cleanup)
	(clear_inferior_data, set_inferior_data, inferior_data): Declare.
	(exit_inferior, exit_inferior_silent, exit_inferior_num_silent)
	(inferior_appeared): Declare.
	(find_inferior_pid): Typo.
	(find_inferior_id, find_inferior_for_program_space): Declare.
	(set_current_inferior, save_current_inferior, prune_inferiors)
	(number_of_inferiors): Declare.
	(inferior_list): Declare.
	* inferior.c: Include "gdbcore.h" and "symfile.h".
	(inferior_list): Make public.
	(delete_inferior_1): Always delete thread silently.
	(find_inferior_id): Make public.
	(current_inferior_): New.
	(current_inferior): Use it.
	(set_current_inferior): New.
	(restore_inferior): New.
	(save_current_inferior): New.
	(free_inferior): Free the per-inferior data.
	(add_inferior_silent): Allocate per-inferior data.
	Call inferior_appeared.
	(delete_threads_of_inferior): New.
	(delete_inferior_1): Adjust interface to take an inferior pointer.
	(delete_inferior): Adjust.
	(delete_inferior_silent): Adjust.
	(exit_inferior_1): New.
	(exit_inferior): New.
	(exit_inferior_silent): New.
	(exit_inferior_num_silent): New.
	(detach_inferior): Adjust.
	(inferior_appeared): New.
	(discard_all_inferiors): Adjust.
	(find_inferior_id): Make public.  Assert pid is not zero.
	(find_inferior_for_program_space): New.
	(have_inferiors): Check if we have any inferior with pid not zero.
	(have_live_inferiors): Go over all pushed targets looking for
	process_stratum.
	(prune_inferiors): New.
	(number_of_inferiors): New.
	(print_inferior): Add executable column.  Print vfork parent/child
	relationships.
	(inferior_command): Adjust to cope with not running inferiors.
	(remove_inferior_command): New.
	(add_inferior_command): New.
	(clone_inferior_command): New.
	(struct inferior_data): New.
	(struct inferior_data_registration): New.
	(struct inferior_data_registry): New.
	(inferior_data_registry): New.
	(register_inferior_data_with_cleanup): New.
	(register_inferior_data): New.
	(inferior_alloc_data): New.
	(inferior_free_data): New.
	(clear_inferior_data): New.
	(set_inferior_data): New.
	(inferior_data): New.
	(initialize_inferiors): New.
	(_initialize_inferiors): Register "add-inferior",
	"remove-inferior" and "clone-inferior" commands.

	* objfiles.h: Include "progspace.h".
	(struct objfile) <pspace>: New field.
	(symfile_objfile, object_files): Don't declare.
	(ALL_PSPACE_OBJFILES): New.
	(ALL_PSPACE_OBJFILES_SAFE): New.
	(ALL_OBJFILES, ALL_OBJFILES_SAFE): Adjust.
	(ALL_PSPACE_SYMTABS): New.
	(ALL_PRIMARY_SYMTABS): Adjust.
	(ALL_PSPACE_PRIMARY_SYMTABS): New.
	(ALL_PSYMTABS): Adjust.
	(ALL_PSPACE_PSYMTABS): New.
	* objfiles.c (object_files, symfile_objfile): Delete.
	(struct objfile_sspace_info): New.
	(objfiles_pspace_data): New.
	(objfiles_pspace_data_cleanup): New.
	(get_objfile_pspace_data): New.
	(objfiles_changed_p): Delete.
	(allocate_objfile): Set the objfile's program space.  Adjust to
	reference objfiles_changed_p in pspace data.
	(free_objfile): Adjust to reference objfiles_changed_p in pspace
	data.
	(objfile_relocate): Ditto.
	(update_section_map): Add pspace argument.  Adjust to iterate over
	objfiles in the passed in pspace.
	(find_pc_section): Delete sections and num_sections statics.
	Adjust to refer to program space's objfiles_changed_p.	Adjust to
	refer to sections and num_sections store in the objfile's pspace
	data.
	(objfiles_changed): Adjust to reference objfiles_changed_p in
	pspace data.
	(_initialize_objfiles): New.
	* linespec.c (decode_all_digits, decode_dollar): Set the sal's
	program space.
	* source.c (current_source_pspace): New.
	(get_current_source_symtab_and_line): Set the sal's program space.
	(set_current_source_symtab_and_line): Set current_source_pspace.
	(select_source_symtab): Ditto.	Use ALL_OBJFILES.
	(forget_cached_source_info): Iterate over all program spaces.
	* symfile.c (clear_symtab_users): Adjust.
	* symmisc.c (print_symbol_bcache_statistics): Iterate over all
	program spaces.
	(print_objfile_statistics): Ditto.
	(maintenance_print_msymbols): Ditto.
	(maintenance_print_objfiles): Ditto.
	(maintenance_info_symtabs): Ditto.
	(maintenance_info_psymtabs): Ditto.
	* symtab.h (SYMTAB_PSPACE): New.
	(struct symtab_and_line) <pspace>: New field.
	* symtab.c (init_sal): Clear the sal's program space.
	(find_pc_sect_symtab): Set the sal's program space.  Switch thread
	and space.
	(append_expanded_sal): Add program space argument.  Iterate over
	all program spaces.
	(expand_line_sal): Iterate over all program spaces.  Switch
	program space.

	* target.h (enum target_waitkind) <TARGET_WAITKIND_VFORK_DONE>: New.
	(struct target_ops) <to_thread_address_space>: New field.
	(target_thread_address_space): Define.
	* target.c (target_detach): Only remove breakpoints from the
	inferior we're detaching.
	(target_thread_address_space): New.

	* defs.h (initialize_progspace): Declare.
	* top.c (gdb_init): Call it.

	* solist.h (struct so_list) <sspace>: New field.
	* solib.h (struct program_space): Forward declare.
	(solib_name_from_address): Adjust prototype.
	* solib.c (so_list_head): Replace with a macro referencing the
	program space.
	(update_solib_list): Set the so's program space.
	(solib_name_from_address): Add a program space argument and adjust.

	* solib-svr4.c (struct svr4_info) <pid>: Delete field.
	<interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low>
	<interp_plt_sect_high>: New fields.
	(svr4_info_p, svr4_info): Delete.
	(solib_svr4_sspace_data): New.
	(get_svr4_info): Rewrite.
	(svr4_sspace_data_cleanup): New.
	(open_symbol_file_object): Adjust.
	(svr4_default_sos): Adjust.
	(svr4_fetch_objfile_link_map): Adjust.
	(interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low)
	(interp_plt_sect_high): Delete.
	(svr4_in_dynsym_resolve_code): Adjust.
	(enable_break): Adjust.
	(svr4_clear_solib): Revert bit that removed the svr4_info here,
	and reinstate clearing debug_base, debug_loader_offset_p,
	debug_loader_offset and debug_loader_name.
	(_initialize_svr4_solib): Register solib_svr4_pspace_data.  Don't
	install an inferior_exit observer anymore.

	* printcmd.c (struct display) <pspace>: New field.
	(display_command): Set the display's sspace.
	(do_one_display): Match the display's sspace.
	(display_uses_solib_p): Ditto.

	* linux-fork.c (detach_fork): Moved to infrun.c.
	(_initialize_linux_fork): Moved "detach-on-fork" command to
	infrun.c.
	* infrun.c (detach_fork): Moved from linux-fork.c.
	(proceed_after_vfork_done): New.
	(handle_vfork_child_exec_or_exit): New.
	(follow_exec_mode_replace, follow_exec_mode_keep)
	(follow_exec_mode_names, follow_exec_mode_string)
	(show_follow_exec_mode_string): New.
	(follow_exec): New.  Reinstate the mark_breakpoints_out call.
	Remove shared libraries before attaching new executable.  If user
	wants to keep the inferior, keep it.
	(displaced_step_fixup): Adjust to pass an address space to the
	breakpoints module.
	(resume): Ditto.
	(clear_proceed_status): In all-stop mode, always clear the proceed
	status of all threads.
	(prepare_to_proceed): Adjust to pass an address space to the
	breakpoints module.
	(proceed): Ditto.
	(adjust_pc_after_break): Ditto.
	(handle_inferior_event): When handling a process exit, switch the
	program space to the inferior's that had exited.  Call
	handle_vfork_child_exec_or_exit.  Adjust to pass an address space
	to the breakpoints module.  In non-stop mode, when following a
	fork and detach-fork is off, also resume the other branch.  Handle
	TARGET_WAITKIND_VFORK_DONE.  Set the program space in sals.
	(normal_stop): Prune inferiors.
	(_initialize_infrun): Install the new "follow-exec-mode" command.
	"detach-on-fork" moved here.

	* regcache.h (get_regcache_aspace): Declare.
	* regcache.c (struct regcache) <aspace>: New field.
	(regcache_xmalloc): Clear the aspace.
	(get_regcache_aspace): New.
	(regcache_cpy): Copy the aspace field.
	(regcache_cpy_no_passthrough): Ditto.
	(get_thread_regcache): Fetch the thread's address space from the
	target, and store it in the regcache.

	* infcall.c (call_function_by_hand): Set the sal's pspace.

	* arch-utils.c (default_has_shared_address_space): New.
	* arch-utils.h (default_has_shared_address_space): Declare.

	* gdbarch.sh (has_shared_address_space): New.
	* gdbarch.h, gdbarch.c: Regenerate.

	* linux-tdep.c: Include auxv.h, target.h, elf/common.h.
	(linux_has_shared_address_space): New.
	(_initialize_linux_tdep): Declare.

	* arm-tdep.c (arm_software_single_step): Pass the frame's address
	space to insert_single_step_breakpoint.
	* arm-linux-tdep.c (arm_linux_software_single_step): Pass the
	frame's pspace to breakpoint functions.
	* cris-tdep.c (crisv32_single_step_through_delay): Ditto.
	(cris_software_single_step): Ditto.
	* mips-tdep.c (deal_with_atomic_sequence): Add frame argument.
	Pass the frame's pspace to breakpoint functions.
	(mips_software_single_step): Adjust.
	(mips_single_step_through_delay): Adjust.
	* rs6000-aix-tdep.c (rs6000_software_single_step): Adjust.
	* rs6000-tdep.c (ppc_deal_with_atomic_sequence): Adjust.
	* solib-irix.c (enable_break): Adjust to pass the current frame's
	address space to breakpoint functions.
	* sparc-tdep.c (sparc_software_single_step): Ditto.
	* spu-tdep.c (spu_software_single_step): Ditto.
	* alpha-tdep.c (alpha_software_single_step): Ditto.
	* record.c (record_wait): Adjust to pass an address space to the
	breakpoints module.

	* fork-child.c (fork_inferior): Set the new inferior's program and
	address spaces.
	* inf-ptrace.c (inf_ptrace_follow_fork): Copy the parent's program
	and address spaces.
	(inf_ptrace_attach): Set the inferior's program and address spaces.
	* linux-nat.c: Include "solib.h".
	(linux_child_follow_fork): Manage parent and child's program and
	address spaces.	 Clone the parent's program space if necessary.
	Don't wait for the vfork to be done here.  Refuse to resume if
	following the vfork parent while leaving the child stopped.
	(resume_callback): Don't resume a vfork parent.
	(linux_nat_resume): Also check for pending events in the
	lp->waitstatus field.
	(linux_handle_extended_wait): Report TARGET_WAITKIND_VFORK_DONE
	events to the core.
	(stop_wait_callback): Don't wait for SIGSTOP on vfork parents.
	(cancel_breakpoint): Adjust.
	* linux-thread-db.c (thread_db_wait): Don't remove thread event
	breakpoints here.
	(thread_db_mourn_inferior): Don't mark breakpoints out here.
	Remove thread event breakpoints after mourning.
	* corelow.c: Include progspace.h.
	(core_open): Set the inferior's program and address spaces.
	* remote.c (remote_add_inferior): Set the new inferior's program
	and address spaces.
	(remote_start_remote): Update address spaces.
	(extended_remote_create_inferior_1): Don't init the thread list if
	we already debugging other inferiors.
	* darwin-nat.c (darwin_attach): Set the new inferior's program and
	address spaces.
	* gnu-nat.c (gnu_attach): Ditto.
	* go32-nat.c (go32_create_inferior): Ditto.
	* inf-ttrace.c (inf_ttrace_follow_fork, inf_ttrace_attach): Ditto.
	* monitor.c (monitor_open): Ditto.
	* nto-procfs.c (procfs_attach, procfs_create_inferior): Ditto.
	* procfs.c (do_attach): Ditto.
	* windows-nat.c (do_initial_windows_stuff): Ditto.

	* inflow.c (inferior_process_group)
	(terminal_init_inferior_with_pgrp, terminal_inferior,
	(terminal_ours_1, inflow_inferior_exit, copy_terminal_info)
	(child_terminal_info, new_tty_postfork, set_sigint_trap): Adjust
	to use per-inferior data instead of inferior->terminal_info.
	(inflow_inferior_data): New.
	(inflow_new_inferior): Delete.
	(inflow_inferior_data_cleanup): New.
	(get_inflow_inferior_data): New.

	* mi/mi-interp.c (mi_new_inferior): Rename to...
	(mi_inferior_appeared): ... this.
	(mi_interpreter_init): Adjust.

	* tui/tui-disasm.c: Include "progspace.h".
	(tui_set_disassem_content): Pass an address space to
	breakpoint_here_p.

	* NEWS: Mention multi-program debugging support.  Mention new
	commands "add-inferior", "clone-inferior", "remove-inferior",
	"maint info program-spaces", and new option "set
	follow-exec-mode".

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* observer.texi (new_inferior): Rename to...
	(inferior_appeared): ... this.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/testsuite/
	* gdb.base/foll-vfork.exp: Adjust to spell out "follow-fork".
	* gdb.base/foll-exec.exp: Adjust to expect a process id before
	"Executing new program".
	* gdb.base/foll-fork.exp: Adjust to spell out "follow-fork".
	* gdb.base/multi-forks.exp: Ditto.  Adjust to the inferior being
	left listed after having been killed.
	* gdb.base/attach.exp: Adjust to spell out "symbol-file".
	* gdb.base/maint.exp: Adjust test.

	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* gdb.multi/Makefile.in: New.
	* gdb.multi/base.exp: New.
	* gdb.multi/goodbye.c: New.
	* gdb.multi/hangout.c: New.
	* gdb.multi/hello.c: New.
	* gdb.multi/bkpt-multi-exec.c: New.
	* gdb.multi/bkpt-multi-exec.exp: New.
	* gdb.multi/crashme.c: New.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Inferiors): Rename node to ...
	(Inferiors and Programs): ... this.  Mention running multiple
	programs in the same debug session.
	<info inferiors>: Mention the new 'Executable' column if "info
	inferiors".  Update examples.  Document the "add-inferior",
	"clone-inferior", "remove-inferior" and "maint info
	program-spaces" commands.
	(Process): Rename node to...
	(Forks): ... this.  Document "set|show follow-exec-mode".
@
text
@d5 1
a5 1
   2008, 2009 Free Software Foundation, Inc.
@


1.253
log
@gdb/
2009-07-02  Pedro Alves  <pedro@@codesourcery.com>

	* linux-nat.c (linux_child_follow_fork): If we're staying attached
	to the child process, enable event reporting on it.  Don't handle
	checkpoints here.  Instead, add the child fork to the lwp thread
	and inferior lists without clobbering the previous inferior.  Let
	the thread_db layer learn about a new child process, even if
	following the parent.
	(linux_nat_switch_fork): Delete lwps of the current inferior only,
	instead of clearing the whole list.  Use thread_change_ptid to
	give the core the illusion the new checkpoint is still the same
	inferior.  Clear the register cache.
	(linux_handle_extended_wait): Handle checkpoints here.
	(linux_multi_process): Turn on.
	* linux-fork.c (struct fork_info) <pc>: Remove field.
	(init_fork_list): Do not delete the checkpoint from the inferior
	list (it is not there).
	(fork_load_infrun_state): Don't switch inferior_ptid here.  Pass
	the new checkpoint's ptid to linux_nat_switch_fork.
	(fork_save_infrun_state): Make static.  Don't stop the pc field of
	fork_info, it's gone.
	(linux_fork_mourn_inferior): Don't delete the checkpoint from the
	inferior list, it's not there.
	(linux_fork_detach): Ditto.
	(delete_fork_command): Replace mention of fork/checkpoint by
	checkpoint only.
	(detach_fork_command): Likewise.  Don't delete the checkpoint from
	the inferior list.
	(info_forks_command): Adjust.
	(restore_detach_fork): Delete.
	(checkpointing_pid): New.
	(linux_fork_checkpointing_p): New.
	(save_detach_fork): Delete.
	(checkpoint_command): Delete temp_detach_fork.  Don't remove
	breakpoints, that's a nop.  Store the pid of the process we're
	checkpointing, and use make_cleanup_restore_integer to restore it.
	Don't reinsert breakpoints here.
	(process_command, fork_command): Delete.
	(restart_command): Update comments to only mention checkpoints,
	not forks.
	(_initialize_linux_fork): Delete "fork", "process", "info forks"
	commands.
	* linux-fork.h (fork_save_infrun_state, fork_list): Delete
	declarations.
	(linux_fork_checkpointing_p): Declare.
	* cli/cli-cmds.c (killlist): New.
	* cli/cli-cmds.h (killlist): Declare.
	* gdbcmd.h (killlist): Declare.
	* inferior.c: Include "gdbthread.h".
	(detach_inferior_command, kill_inferior_command)
	(inferior_command): New.
	(info_inferiors_command): Allow specifying a specific inferior id.
	(_initialize_inferiors): Register "inferior", "kill inferior" and
	"detach inferior" commands.
	* infcmd.c (_initialize_infcmd): Make "kill" a prefix command.
	* gdbthread.h (any_thread_of_process): Declare.
	* thread.c (any_thread_of_process): New.

	* NEWS: Mention multi-inferior debugging.  Mention 'info
	inferiors', 'inferior', 'detach inferior' and 'kill inferior' as
	new commands.
	(Removed commands): New section, mentioning that 'info forks',
	'fork', 'process', 'delete fork' and 'detach fork' are now gone.

gdb/testsuite/
2009-07-02  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.base/multi-forks.exp: Only run detach-on-fork tests on
	linux.  Adjust to use "inferior", "info inferiors", "detach
	inferior" and "kill inferior" instead of "restart", "info fork",
	"detach fork" and "delete fork".
	* gdb.base/ending-run.exp: Spell out "info".
	* gdb.base/help.exp: Adjust to use test_prefix_command_help for
	the "kill" command.

gdb/doc/
2009-07-02  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo (Debugging multiple inferiors): Document the
	"inferior", "detach inferior" and "kill inferior" commands.
	(Debugging Programs with Multiple Processes): Adjust to mention
	generic "inferior" commands.  Delete mention of "detach fork" and
	"delete fork".  Cross reference to "Debugging multiple inferiors"
	section.
@
text
@a1517 2
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);

d1524 1
@


1.252
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d2701 3
a2703 2
  add_com ("kill", class_run, kill_command,
	   _("Kill execution of program being debugged."));
@


1.251
log
@	* breakpoint.h (struct breakpoint): New member GDBARCH.
	* breakpoint.c: Include "arch-utils.h".
	(set_raw_breakpoint_without_location): Add GDBARCH parameter.
	Use it to set breakpoint architecture.
	(set_raw_breakpoint): Add GDBARCH parameter.
	(create_internal_breakpoint): Likewise.
	(create_catchpoint): Likewise.
	(create_fork_vfork_event_catchpoint): Likewise.
	(create_breakpoint): Likewise.
	(create_breakpoints): Likewise.
	(break_command_really): Likewise.
	(create_ada_exception_breakpoint): Likewise.
	Update local callers to pass architecture:
	(create_internal_breakpoint): Update.
	(create_overlay_event_breakpoint): Update.
	(create_longjmp_master_breakpoint): Update.
	(create_thread_event_breakpoint): Update.
	(create_solib_event_breakpoint): Update.
	(create_catchpoint): Update.
	(create_fork_vfork_event_catchpoint): Update.
	(set_momentary_breakpoint): Update.
	(clone_momentary_breakpoint): Update.
	(create_breakpoint): Update.
	(create_breakpoints): Update.
	(break_command_really): Update.
	(break_command_1): Update.
	(set_breakpoint): Update.
	(watch_command_1): Update.
	(catch_fork_command_1): Update.
	(catch_exec_commnd_1): Update.
	(handle_gnu_v3_exceptions): Update.
	(create_ada_exception_breakpoint): Update.
	(catch_ada_exception_command): Update.
	(catch_assert_command): Update.
	(trace_command): Update.

	* breakpoint.h (struct bp_location): New member GDBARCH.
	* breakpoint.c (get_sal_arch): New function.
	(set_raw_breakpoint): Set location architecture.
	(add_location_to_breakpoint): Likewise.
	(clone_momentary_breakpoint): Likewise.
	(watch_command_1): Likewise.
	(update_watchpoint): Likewise.
	(bp_loc_is_permanent): Use location architecture instead of
	current_gdbarch.
	(adjust_breakpoint_address): Add GDBARCH parameter; use it
	instead of current_gdbarch.
	Update callers of adjust_breakpoint_address to pass
	breakpoint location architecture:
	(set_raw_breakpoint): Update.
	(watch_command_1): Update.

        * tracepoint.c: (collect_symbol): Add GDBARCH parameter, use instead
	of current_gdbarch.
	(add_local_symbols): Add GDBARCH parameter.  Pass to collect_symbol.
	(encode_actions): Pass tracepoint architecture to add_local_symbols
	(encode_actions): Use tracepoint architecture instead of
	current_gdbarch.  Pass it to add_local_symbols and collect_symbol.

	* breakpoint.h (struct breakpoint_ops): Replace last_addr parameter
	of print_one callback with last_loc.
	* breakpoint.c (print_one_breakpoint_location): Replace last_addr
	parameter with last_loc.
	(print_one_breakpoint): Likewise.
	(do_captured_breakpoint_query): Update call.
	(breakpoint_1): Pass last_loc instead of last_addr to
	print_one_breakpoint.  Pass last location architecture instead of
	current_gdbarch to set_next_address.
	Update all implementations of the print_one callback:
	* breakpoint.c (print_one_catch_fork): Update.
	(print_one_catch_vfork): Update.
	(print_one_catch_exec): Update.
	(print_one_exception_catchpoint): Update.
	* ada-lang.c (print_one_exception): Update.
	(print_one_catch_exception): Update.
	(print_one_catch_exception_unhandled): Update.
	(print_one_catch_assert): Update.

	* breakpoint.c (print_one_breakpoint_location): Add PRINT_ADDRESS_BITS
	parameter.  Use it instead of gdbarch_addr_bit (current_gdbarch).
	(print_one_breakpoint): Add PRINT_ADDRESS_BITS parameter and pass it
	to print_one_breakpoint_location.
	(breakpoint_address_bits): New function.
	(do_captured_breakpoint_query): Compute number of address bits to print
	and pass it to print_one_breakpoint.
	(breakpoint_1): Likewise.  Use it instead of current_gdbarch.

	* breakpoint.h (create_thread_event_breakpoint): Add GDBARCH.
	* breakpoint.c (create_thread_event_breakpoint): Likewise.
	Update callers to create_thread_event_breakpoint:
	* aix-thread.c (pd_enable): Update.
	* linux-thread-db.c (enable_thread_event): Update.

	* breakpoint.h (create_solib_event_breakpoint): Add GDBARCH.
	* breakpoint.c (create_solib_event_breakpoint): Likewise.
	Update callers to create_solib_event_breakpoint:
	* solib-frv.c (enable_break, enable_break2): Update.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Update.
	* solib-som.c (som_solib_create_inferior_hook): Update.
	* solib-darwin.c (darwin_solib_create_inferior_hook): Update.
	* solib-svr4.c (enable_break): Update.

	* breakpoint.h (insert_single_step_breakpoint): Add GDBARCH.
	* breakpoint.c (insert_single_step_breakpoint): Likewise.
	Update callers to insert_single_step_breakpoint:
	* alpha-tdep.c (alpha_software_single_step): Update.
	* arm-linux-tdep.c (arm_linux_software_single_step): Update.
	* arm-tdep.c (arm_software_single_step): Update.
	* cris-tdep.c (cris_software_single_step): Update.
	* rs6000-aix-tdep.c (rs6000_software_single_step): Update.
	* rs6000-tdep.c (ppc_deal_with_atomic_sequence): Update.
	* sparc-tdep.c (sparc_software_single_step): Update.
	* spu-tdep.c (spu_software_single_step): Update.
	* mips-tdep.c (deal_with_atomic_sequence): Add GDBARCH parameter.
	Pass it to insert_single_step_breakpoint.
	(mips_software_single_step): Pass architecture to
	deal_with_atomic_sequence and insert_single_step_breakpoint.

	* breakpoint.h (deprecated_insert_raw_breakpoint): Add GDBARCH.
	(deprecated_remove_raw_breakpoint): Likewise.
	* breakpoint.c (deprecated_insert_raw_breakpoint): Add GDBARCH.
	(deprecated_remove_raw_breakpoint): Likewise.
	Update callers to deprecated_insert_raw_breakpoint and
	deprecated_remove_raw_breakpoint:
	* breakpoint.c (single_step_gdbarch): New static variable.
	(insert_single_step_breakpoint): Pass GDBARCH parameter to
	deprecated_insert_raw_breakpoint.  Store it in single_step_gdbarch.
	(remove_single_step_breakpoints): Pass architecture stored in
	single_step_gdbarch to deprecated_remove_raw_breakpoint.
	* rs6000-nat.c (exec_one_dummy_insn): Update.
	* solib-irix.c (enable_break, disable_break): Update.
	* procfs.c (procfs_mourn_inferior): Update.
	(remove_dbx_link_breakpoint): Update.

	* breakpoint.h (set_breakpoint): Add GDBARCH parameter.
	(set_momentary_breakpoint, set_momentary_breakpoint_at_pc): Likewise.
	* breakpoint.c (set_breakpoint): Add GDBARCH parameter.
	(set_momentary_breakpoint, set_momentary_breakpoint_at_pc): Likewise.
	Update callers to set_breakpoint, set_momentary_breakpoint and
	set_momentary_breakpoint_at_pc:
	* breakpoint.c (set_momentary_breakpoint_at_pc): Update.
	(until_break_command): Update.
	* infcall.c (call_function_by_hand): Update.
	* infcmd.c (finish_backward, finish_forward): Update.
	* infrun.c (insert_step_resume_breakpoint_at_sal): Add GDBARCH
	parameter.  Pass it to set_momentary_breakpoint.
	(insert_longjmp_resume_breakpoint): Add GDBARCH parameter.
	Pass it to set_momentary_breakpoint_at_pc.
	(handle_inferior_event): Update.
	(insert_step_resume_breakpoint_at_frame): Update.
	(insert_step_resume_breakpoint_at_caller): Update..
	* mi/mi-cmd-break.c: Include "arch-utils.h".
	(mi_cmd_break_insert): Update.

	* target.h (struct target_ops): Add GDBARCH parameter to
	to_insert_breakpoint, to_remove_breakpoint, to_insert_hw_breakpoint,
	and to_remove_hw_breakpoint members.
	(target_insert_breakpoint, target_remove_breakpoint,
	target_insert_hw_breakpoint, target_remove_hw_breakpoint): Add GDBARCH
	parameter, pass to target routine.
	(memory_remove_breakpoint, memory_insert_breakpoint): Add GDBARCH
	parameter.
	* target.c (debug_to_insert_breakpoint, debug_to_remove_breakpoint,
	debug_to_insert_hw_breakpoint, debug_to_remove_hw_breakpoint): Add
	GDBARCH parameter, pass to target routine.
	(update_current_target): Update function signature.
	* breakpoint.c (insert_bp_location, remove_breakpoint,
	deprecated_insert_raw_breakpoint, deprecated_remove_raw_breakpoint):
	Pass architecture to target_ routines.
	Update all implementations of the target breakpoint routines to take
	GDBARCH parameter and use it instead of GDBARCH as appropriate:
	* corelow.c (ignore): Update.
	* exec.c (ignore): Update.
	* mem-break.c (memory_insert_breakpoint): Update.
	(memory_remove_breakpoint): Update.
	* monitor.c (monitor_insert_breakpoint): Update.
	(monitor_remove_breakpoint): Update.
	* record.c (record_insert_breakpoint): Update.
	(record_beneath_to_insert_breakpoint): Update.
	(record_remove_breakpoint): Update.
	(record_beneath_to_remove_breakpoint): Update.
	* remote.c (remote_insert_breakpoint): Update.
	(remote_remove_breakpoint): Update.
	(remote_insert_hw_breakpoint): Update.
	(remote_remove_hw_breakpoint): Update.
	* remote-m32r-sdi.c (m32r_insert_breakpoint): Update.
	(m32r_remove_breakpoint): Update.
	* remote-mips.c (mips_insert_breakpoint): Update.
	(mips_remove_breakpoint): Update.
	* i386-nat.c (i386_insert_hw_breakpoint): Update.
	(i386_remove_hw_breakpoint): Update.
	* nto-procfs.c (procfs_insert_breakpoint):  Update.
	(procfs_remove_breakpoint): Update.
	(procfs_insert_hw_breakpoint): Update.
	(procfs_remove_hw_breakpoint): Update.

doc/ChangeLog:

	* gdbint.texi (Examples of Use of @@code{ui_out} functions):
	Update example code extrated from breakpoint.c.
@
text
@d23 1
d1033 1
d1103 1
a1103 1
      fputs_filtered (paddress (addr), gdb_stdout);
d1660 2
a1661 1
  printf_filtered (_("Program stopped at %s.\n"), paddress (stop_pc));
@


1.250
log
@	gdb/
	* NEWS: Document inlined function support.
	* Makefile.in (SFILES): Add inline-frame.c.
	(COMMON_OBS): Add inline-frame.o.
	* block.c (contained_in): Rewrite to use lexical nesting.
	(block_linkage_function): Skip inlined function blocks.
	(block_inlined_p): New.
	* block.h (struct block): Update comment.
	(block_inlined_p): New prototype.
	* blockframe.c (get_frame_block): Handle inlined functions.
	(get_frame_function): Do not use block_linkage_function.
	(block_innermost_frame): Use get_frame_block and contained_in.
	* breakpoint.c (watchpoint_check): Remove extra reinit_frame_cache.
	Skip over inlined functions.  Simplify epilogue check.
	(bpstat_check_breakpoint_conditions): Use get_stack_frame_id.
	Update comments.
	(set_momentary_breakpoint): Only accept non-inlined frames.
	(watch_command_1): Use frame_unwind_caller_pc and
	frame_unwind_caller_id instead of get_prev_frame.
	(until_break_command): Likewise.  Use get_stack_frame_id.
	* buildsym.c (end_symtab): Set SYMBOL_SYMTAB for block functions.
	* dwarf2loc.c (dwarf_expr_frame_base): Use block_linkage_function.
	* dwarf2read.c (process_die): Handle DW_TAG_inlined_subroutine.
	(read_func_scope, new_symbol): Likewise.  Handle arguments specially
	for inlined functions without call site information.
	(inherit_abstract_dies): Allow tag mismatch for inlined subroutines.
	(die_specification): Treat DW_AT_abstract_origin as a specification.
	(read_type_die): Handle DW_TAG_inlined_subroutine.
	* frame-unwind.c (frame_unwind_init): Add inline_frame_unwind.
	* frame.c (fprint_frame_id): Print inline depth.
	(fprint_frame_type): Handle INLINE_FRAME and SENTINEL_FRAME.
	(skip_inlined_frames, get_stack_frame_id): New.
	(frame_unwind_caller_id): Use skip_inlined_frames.
	(frame_id_inlined_p): New.
	(frame_id_eq): Make the logic match the comments.  Add inline_depth
	check.
	(frame_id_inner): Handle inlined functions.
	(frame_unwind_pc): New function, copied from frame_unwind_caller_pc.
	(frame_unwind_caller_pc): Use skip_inlined_frames and frame_unwind_pc.
	(get_prev_frame_1): Check for inline frames.  Split out frame
	allocation to get_prev_frame_raw.
	(get_prev_frame_raw): New function.
	(get_prev_frame): Handle inline frames.
	(get_frame_pc): Use frame_unwind_pc.
	(get_frame_address_in_block): Skip inlined frames on both sides.
	(pc_notcurrent): Delete.
	(find_frame_sal): Rewrite to handle inline call sites.  Use
	get_frame_address_in_block.
	(deprecated_update_frame_pc_hack): Make static.
	* frame.h: Update comments.
	(struct frame_id): Add inline_depth.
	(enum frame_type): Add INLINE_FRAME.
	(frame_id_inlined_p, get_stack_frame_id): New prototypes.
	* gdbthread.h (struct thread_info): Add step_stack_frame_id field.
	* infcmd.c (set_step_frame): New function.
	(step_once): Use set_step_frame.  Handle inlined functions.
	(until_next_command): Use set_step_frame.
	(finish_backward), finish_forward): Use get_stack_frame_id.
	(finish_command): Support inlined functions.
	* inferior.h (set_step_info): New prototype.
	* infrun.c (RESUME_ALL): Use minus_one_ptid.
	(clear_proceed_status): Clear step_stack_frame_id.
	(init_wait_for_inferior): Call clear_inline_frame_state.
	(init_execution_control_state): Make static.
	(set_step_info): New function.
	(init_thread_stepping_state): Do not set the symtab or line here.
	(stepped_in_from): New function.
	(handle_inferior_event): Handle inlined functions.  Use set_step_info.
	(insert_step_resume_breakpoint_at_frame): Use get_stack_frame_id.
	(struct inferior_status): Add step_stack_frame_id.
	(save_inferior_status, restore_inferior_status): Save and restore
	step_stack_frame_id.
	* inline-frame.c, inline-frame.h: New files.
	* minsyms.c (prim_record_minimal_symbol_and_info): Use XCALLOC.
	* regcache.c (regcache_write_pc): Call reinit_frame_cache.
	* s390-tdep.c (s390_prologue_frame_unwind_cache): Handle INLINE_FRAME.
	* stack.c (frame_show_address): New.
	(print_frame_info, print_frame): Use it.
	(find_frame_funname): Use get_frame_function.  Handle inlined blocks.
	(frame_info): Mark inlined functions.
	(backtrace_command_1): Use get_current_user_frame.
	(print_frame_local_vars, print_frame_label_vars): Update comments.
	(return_command): Refuse inlined functions.
	* symtab.c (lookup_symbol_aux_local): Stop at inlined function
	boundaries.
	(find_function_start_sal): Avoid inlined functions.
	(completion_list_add_fields): New function.
	(default_make_symbol_completion_list): Use it.  Use block_static_block
	and block_global_block.  Check for inlined functions.
	(skip_prologue_using_sal): Avoid line number comparison across
	inlining.
	* symtab.h (struct symbol): Add is_inlined.
	(SYMBOL_INLINED): New.
	* target.c (target_resume): Call clear_inline_frame_state.
	* valops.c (value_of_variable): Check block_inlined_p.

	gdb/doc/
	* gdb.texinfo (Debugging Optimized Code): New chapter.
	(Compiling for Debugging): Reference it.  Move some
	text to the new section.

	gdb/testsuite/
	* gdb.base/break.exp: Add an XFAIL for gcc/36748.
	* gdb.cp/annota2.exp: Accept frames-invalid in more places.
	* gdb.opt/Makefile.in (EXECUTABLES): Update.
	* gdb.opt/clobbered-registers-O2.exp: Update to GPL v3.
	* gdb.opt/inline-bt.c, gdb.opt/inline-bt.exp,
	gdb.opt/inline-cmds.c, gdb.opt/inline-cmds.exp,
	gdb.opt/inline-locals.c, gdb.opt/inline-locals.exp,
	gdb.opt/inline-markers.c: New files.
	* lib/gdb.exp (skip_inline_frame_tests): New function.
	(skip_inline_var_tests): New function.
@
text
@d1464 3
d1469 2
a1470 2
	set_momentary_breakpoint (sal,
				  get_stack_frame_id (get_selected_frame (NULL)),
d1499 1
d1509 2
a1510 1
  breakpoint = set_momentary_breakpoint (sal, get_stack_frame_id (frame),
@


1.249
log
@	* breakpoint.h (set_longjmp_breakpoint): Add THREAD argument.
	(enum bptype): Add bp_longjmp_master.

	* breakpoint.c (create_longjmp_master_breakpoint): New function.
	(update_breakpoints_after_exec): Handle bp_longjmp_master
	breakpoints.  Call create_longjmp_master_breakpoint.
	(print_it_typical, bpstat_stop_status, bpstat_what,
	print_one_breakpoint_location, allocate_bp_location, mention,
	delete_command, breakpoint_re_set_one): Handle bp_longjmp_master.
	(breakpoint_re_set): Call create_longjmp_master_breakpoint.
	(create_longjmp_breakpoint): Delete.
	(set_longjmp_breakpoint): Add THREAD argument.  Reimplement
	to install momentary clones of bp_longjmp_master breakpoints.

	* infcmd.c (step_1): Pass thread to set_longjmp_breakpoint.
@
text
@d55 1
d762 11
d941 1
a941 1
  struct frame_info *frame;
d951 1
a951 3

      frame = get_current_frame ();
      tp->step_frame_id = get_frame_id (frame);
d957 13
d976 1
a976 3
	    {
	      tp->step_range_start = tp->step_range_end = 1;
	    }
d1212 1
a1241 1
  tp->step_frame_id = get_frame_id (frame);
d1467 1
a1467 1
				  get_frame_id (get_selected_frame (NULL)),
d1505 1
a1505 1
  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame),
d1568 30
@


1.248
log
@	* dummy-frame.c (deprecated_pc_in_call_dummy): Add GDBARCH parameter,
	use it instead of current_gdbarch.
	* frame.h (deprecated_pc_in_call_dummy): Add GDBARCH parameter.
	* arm-tdep.c (arm_skip_prologue): Pass architecture to
	deprecated_pc_in_call_dummy.

	* symtab.c (skip_prologue_using_sal): Add GDBARCH parameter.
	Use it instead of current_gdbarch.
	* symtab.h (skip_prologue_using_sal): Add GDBARCH parameter.
	* breakpoint.c (expand_line_sal_maybe): Pass architecture to
	skip_prologue_using_sal.
	* arm-tdep.c (skip_prologue_using_sal): Likewise.
	* lm32-tdep.c (lm32_skip_prologue): Likewise.
	* m32-tdep.c (m32c_skip_prologue): Likewise.
	* mips-tdep.c (mips_skip_prologue): Likewise.
	* moxie-tdep.c (moxie_skip_prologue): Likewise.
	* mt-tdep.c (mt_frame_unwind_cache): Likewise.
	* rs6000-tdep.c (rs6000_skip_prologue): Likewise.
	* frv-tdep.c (frv_analyze_prologue): Add GDBARCH parameter, pass
	it to skip_prologue_using_sal.  Update call sites ...
	(frv_skip_prologue, frv_frame_unwind_cache): ... here.

	* mn10300-tdep.c (struct mn10300_prologue): Add GDBARCH member.
	(check_for_saved): Use it instead of current_gdbarch.
	(mn10300_analyze_prologue): Set it.

	* value.c (using_struct_return): Add GDBARCH parameter.  Use it
	instead of current_gdbarch.
	* value.h (using_struct_return): Add GDBARCH parameter.
	* eval.c (evaluate_subexp_standard): Pass architecture to
	using_struct_return.
	* infcall.c (call_function_by_hand): Likewise.
	* stack.c (return_command): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.

	* symtab.c (in_prologue): Add GDBARCH parameter.  Use it instead of
	current_gdbarch.
	* symtab.h (in_prologue): Add GDBARCH parameter.
	* infrun.c (handle_inferior_event): Pass architecture to in_prologue.

	* eval.c (evaluate_subexp_standard): Use expression architecture
	instead of current_gdbarch.

	* c-lang.c (evaluate_subexp_c): Use expression architecture and
	language instead of current_gdbarch and current_language.

	* printcmd.c (do_one_display): Use expression architecture instead
	of current_gdbarch.

	* infcmd.c (print_return_value): Use architecture of stop_regcache
	instead of current_gdbarch.
	(print_vector_info, print_float_info): Remove GDBARCH argument,
	use frame architecture instead.
	(vector_info, float_info): Update calls.

	* objc-lang.c (objc_skip_trampoline): Use frame architecture
	instead of current_gdbarch.

	* parse.c (write_dollar_variable): Use parse architecture instead
	of current_gdbarch.

	* source.c (line_info): Use objfile architecture instead of
	current_gdbarch.

	* symtab.c (find_function_start_sal): Use gdbarch instead of
	current_gdbarch.
	(print_msymbol_info): Use objfile architecture instead of
	current_gdbarch.

	* valops.c (value_assign): Use frame architecture instead of
	current_gdbarch.
@
text
@d834 1
a834 1
      set_longjmp_breakpoint ();
@


1.247
log
@	* gdbarch.sh (construct_inferior_arguments): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* infcmd.c (get_inferior_args): Call construct_inferior_arguments
	directly instead of gdbarch_construct_inferior_arguments.
	(construct_inferior_arguments): Remove GDBARCH argument.
	* inferior.h (construct_inferior_arguments): Likewise.
@
text
@d1294 1
a1294 1
  struct gdbarch *gdbarch = current_gdbarch;
d2015 1
a2015 1
print_vector_info (struct gdbarch *gdbarch, struct ui_file *file,
d2018 2
d2049 1
a2049 2
  print_vector_info (current_gdbarch, gdb_stdout,
		     get_selected_frame (NULL), args);
d2532 1
a2532 1
print_float_info (struct gdbarch *gdbarch, struct ui_file *file,
d2535 2
d2567 1
a2567 2
  print_float_info (current_gdbarch, gdb_stdout, 
		    get_selected_frame (NULL), args);
@


1.246
log
@	* infcmd.c (post_create_inferior): Call breakpoint_re_set after target
	is pushed for watchpoint promotion to hardware watchpoint.
@
text
@d197 1
a197 2
      n = gdbarch_construct_inferior_arguments (current_gdbarch,
						inferior_argc, inferior_argv);
d249 1
a249 1
construct_inferior_arguments (struct gdbarch *gdbarch, int argc, char **argv)
@


1.245
log
@	* target.h (struct target_ops): Make to_has_all_memory,
	to_has_memory, to_has_stack, to_has_registers and to_has_execution
	methods instead of variables.
	(target_has_all_memory_1, target_has_memory_1, target_has_stack_1)
	(target_has_registers_1, target_has_execution_1): Declare
	functions.
	(target_has_all_memory): Rewrite to call target_has_all_memory_1.
	(target_has_memory): Rewrite to call target_has_memory_1.
	(target_has_stack): Rewrite to call target_has_all_stack_1.
	(target_has_registers): Rewrite to call target_has_registers_1.
	(target_has_execution): Rewrite to call target_has_execution_1.
	(default_child_has_all_memory, default_child_has_memory)
	(default_child_has_stack, default_child_has_registers)
	(default_child_has_execution): Declare.
	(target_mark_running, target_mark_exited): Delete declarations.
	* target.c (default_child_has_all_memory,
	default_child_has_memory, default_child_has_stack,
	default_child_has_registers, default_child_has_execution): New.
	(target_has_all_memory_1, target_has_memory_1, target_has_stack_1,
	target_has_registers_1, target_has_execution_1): New.
	(add_target): Default the to_has_all_memory, to_has_all_memory,
	to_has_memory, to_has_stack, to_has_registers and to_has_execution
	callbacks to return 0.
	(update_current_target): Do not inherit to_has_all_memory,
	to_has_memory, to_has_stack, to_has_registers or to_has_execution.
	(target_mark_running, target_mark_exited): Delete.
	(memory_xfer_partial): Adjust.
	(target_read_memory, target_write_memory, target_search_memory):
	Dispatch to the the top-most target, not the flattened
	current_target.
	(target_info): Adjust.
	(init_dummy_target): Install return_zero as callback for
	to_has_all_memory, to_has_memory, to_has_stack, to_has_registers,
	to_has_execution.
	(set_maintenance_target_async_permitted): Use have_live_inferiors
	instead of target_has_execution.
	* target-memory.c (target_write_memory_blocks): Dispatch memory
	writes to the the top-most target, not the flattened
	current_target.

	* breakpoint.c (insert_breakpoints): Don't check for
	target_has_execution here.
	(update_global_location_list): Check if there are live inferiors
	to debug instead of target_has_execution.
	* infcmd.c (kill_command, detach_command): Check if there are
	inferiors instead of target_has_execution.
	* inferior.h (have_live_inferiors): Declare.
	* inferior.c (have_live_inferiors): New.
	* infrun.c (normal_stop): Don't check for target_has_execution to
	finish the thread states.
	* thread.c (is_thread_state, is_stopped, is_exited, is_running)
	(any_running, is_executing): Remove checks for
	target_has_execution.
	* top.c (kill_or_detach): Don't try to kill core inferiors.
	(quit_target): Don't check for target_has_execution.

	* corelow.c (core_has_memory, core_has_stack, core_has_registers):
	New.
	(init_core_ops): Install core_has_memory, core_has_stack and
	core_has_registers.
	* exec.c (exec_has_memory): New.
	(init_exec_ops): Install exec_has_memory.
	* remote.c (remote_add_inferior): Don't call target_mark_running.
	(remote_start_remote): Don't call target_mark_exited or call
	target_mark_running.
	(remote_open_1): Use have_inferiors instead of
	target_has_execution.  Don't use target_mark_exited.
	(init_remote_ops): Install deafult_child_has_all_memory,
	default_child_has_memory, default_child_has_stack,
	default_child_has_registers, default_child_has_execution.
	* bsd-kvm.c (bsd_kvm_return_one): New.
	(bsd_kvm_add_target): Register bsd_kvm_return_one as
	to_has_memory, to_has_stack and to_has_registers callbacks.
	* remote-m32r-sdi.c (m32r_return_one): New.
	(init_m32r_ops): Register it.
	* inf-child.c (inf_child_target): Adjust to register
	default_child_has_all_memory, default_child_has_memory,
	default_child_has_stack, default_child_has_registers,
	default_child_has_execution callbacks.
	* gnu-nat.c (init_gnu_ops): Likewise.
	* go32-nat.c (init_go32_ops): Likewise.
	* hpux-thread.c (init_hpux_thread_ops): Likewise.
	* monitor.c (init_base_monitor_ops): Likewise.
	* nto-procfs.c (init_procfs_ops): Likewise.
	* remote-mips.c (_initialize_remote_mips): Likewise.
	* windows-nat.c (init_windows_ops): Likewise.
	* remote-sim.c (gdbsim_create_inferior): Don't use
	target_mark_running or target_mark_exited.
	(gdbsim_mourn_inferior): Don't call target_mark_exited.
	(init_gdbsim_ops): Adjust to register
	default_child_has_all_memory, default_child_has_memory,
	default_child_has_stack, default_child_has_registers,
	default_child_has_execution callbacks.

	* linux-nat.c (linux_nat_xfer_partial): If reading memory, and
	there's no inferior selected, defer to a lower stratum.
@
text
@d424 12
@


1.244
log
@gdb:
	Global renaming of find_thread_pid to find_thread_ptid.
	* gdbthread.h (find_thread_ptid): Renamed from find_thread_pid.
	* thread.c (find_thread_ptid): Renamed from find_thread_pid.
	All callers updated.
gdbserver:
	Global renaming of find_thread_pid to find_thread_ptid.
	* server.h (find_thread_ptid): Renamed from find_thread_pid.
	* inferiors.c (find_thread_ptid): Renamed from find_thread_pid.
	All callers updated.
@
text
@d2055 3
a2057 3
  /* If the current target interface claims there's still execution,
     then don't mess with threads of other processes.  */
  if (!target_has_execution)
d2445 3
a2447 3
  /* If the current target interface claims there's still execution,
     then don't mess with threads of other processes.  */
  if (!target_has_execution)
@


1.243
log
@gdb/
	Replace the savestring calls by xstrdup calls where possible.
	* breakpoint.c (condition_command, set_raw_breakpoint)
	(create_catchpoint, update_breakpoint_locations): Replace the
	savestring calls by xstrdup calls where possible.
	* buildsym.c (start_subfile, patch_subfile_names, record_debugformat)
	(record_producer): Likewise.
	* coffread.c (coff_start_symtab, complete_symtab): Likewise.
	* corefile.c (set_gnutarget): Likewise.
	* dbxread.c (add_new_header_file): Likewise.
	* demangle.c (set_demangling_command, set_demangling_style): Likewise.
	* event-top.c (push_prompt, pop_prompt, command_line_handler)
	(set_async_prompt): Likewise.
	* infcmd.c (set_inferior_io_terminal, attach_command_post_wait):
	Likewise.
	* language.c (set_language_command, _initialize_language): Likewise.
	* linespec.c (decode_line_2): Likewise.
	* rs6000-nat.c (add_vmap): Likewise.
	* top.c (set_prompt, init_history, init_main): Likewise.
	* tracepoint.c (stringify_collection_list): Likewise.
	* varobj.c (varobj_create): Remove variable expr_len.  Replace the
	savestring calls by xstrdup calls where possible.
	(value_of_root, c_name_of_variable, c_describe_child): Replace the
	savestring calls by xstrdup calls where possible.
	* xcoffread.c (complete_symtab): Likewise.
	* cli/cli-script.c (build_command_line, define_command): Likewise.
	* cli/cli-setshow.c (do_setshow_command): Likewise.
@
text
@d712 1
a712 1
	tp = find_thread_pid (inferior_ptid);
d719 1
a719 1
	  tp = find_thread_pid (last_ptid);
d1586 1
a1586 1
  tp = find_thread_pid (ptid);
@


1.242
log
@	* inflow.c (kill_command): Moved to infcmd.c.
	(_initialize_inflow): Don't add the "kill" command or clear
	inferior_ptid here.
	* infcmd.c (kill_command): Moved here from inflow.c.
	(_initialize_infcmd): Add the "kill" command here.
@
text
@d181 1
a181 1
    inferior_io_terminal = savestring (terminal_name, strlen (terminal_name));
d2157 1
a2157 1
	    full_exec_path = savestring (exec_file, strlen (exec_file));
@


1.241
log
@	* breakpoint.c (insert_breakpoints, breakpoint_init_inferior)
	(update_global_location_list): Use gdbarch_has_global_breakpoints
	instead of gdbarch_has_global_solist and
	target_supports_multi_process.
	* dicos-tdep.c (dicos_init_abi): Set
	gdbarch_has_global_breakpoints.
	* gdbarch.sh (has_global_solist): Update comment.
	(has_global_breakpoints): New.
	* remote.c (remote_start_remote): Use
	gdbarch_has_global_breakpoints instead of
	gdbarch_has_global_solist.
	* target.c (target_detach): Use gdbarch_has_global_breakpoints
	instead of gdbarch_has_global_solist.
	* infcmd.c (attach_command): Use gdbarch_has_global_solist instead
	of target_supports_multi_process.
@
text
@d2040 31
d2629 3
@


1.240
log
@	* inferior.h (read_pc, write_pc): Remove.
	* regcache.c (read_pc, write_pc): Remove.

	* infrun.c (displaced_step_fixup): Use regcache_read_pc instead
	of read_pc.
	(handle_inferior_event): Use regcache_read_pc instead of read_pc
	when determining value of stop_pc.  Replace subsequent uses of
	read_pc by inspecting already-retrieved stop_pc value.
	(keep_going): Use regcache_read_pc instead of read_pc.

	* breakpoint.c (watchpoint_check): Use current frame architecture
	and PC instead of current_gdbarch and read_pc ().
	* tracepoint.c (set_traceframe_context): Replace PC argument
	with FRAME argument.
	(trace_start_command, finish_tfind_command): Update calls.
	(finish_tfind_command): Compare frame IDs to identify transitions
	between frames.
	(trace_find_pc_command): Use regcache_read_pc instead of read_pc.
	* rs6000-nat.c (exec_one_dummy_insn): Pass in regcache instead
	of gdbarch.  Use regcache_read_pc and regcache_write_pc instead
	of read_pc and write_pc.
	(store_register): Make regcache argument non-const.  Update call
	to exec_one_dummy_insn.

	* thread.c (switch_to_thread): Use regcache_read_pc instead of read_pc.
	* infcmd.c (post_create_inferior): Likewise.
	* solib-darwin.c (darwin_solib_create_inferior_hook): Likewise.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Likewise.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Likewise.
	* solib-svr4.c (enable_break, svr4_relocate_main_executable): Likewise.
	* linux-fork.c (fork_load_infrun_state): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_push_dummy_code): Likewise.
	* record.c (record_wait): Likewise.
	* procfs.c (procfs_wait): Likewise.
	* remote-mips.c (common_open, mips_wait): Likewise.
	* remote-m32r-sdi.c (m32r_resume): Likewise.

	* symfile.c (generic_load): Use regcache_write_pc instead of write_pc.
	* monitor.c (monitor_create_inferior, monitor_load): Likewise.
	* m32r-rom.c (m32r_load, m32r_upload_command): Likewise.
	* remote-m32r-sdi.c (m32r_create_inferior, m32r_load): Likewise.
	* remote-mips.c (mips_create_inferior, mips_load): Likewise.

	* solib-darwin.c: Include "regcache.h".
	* solib-pa64.c: Include "regcache.h".
	* solib-svr4.c: Include "regcache.h.".

	* symfile.c: Do not mention read_pc or write_pc in comments.
	* dink32-rom.c: Likewise.
	* m32r-rom.c: Likewise.
	* mips-tdep.c: Likewise.
@
text
@d2223 3
a2225 2
  if (target_supports_multi_process ())
    /* Don't complain if we can be attached to multiple processes.  */
@


1.239
log
@	* fork-child.c (startup_inferior): Move setting stop_pc ...
	* infcmd.c (post_create_inferior): ... to here.
@
text
@d395 1
a395 1
  stop_pc = read_pc ();
@


1.238
log
@	* infrun.c (normal_stop): Use has_stack_frames instead of
	target_has_stack.
	* mi/mi-main.c (mi_execute_command): Avoid calling inferior_thread
	when there is no thread selected.
	(mi_cmd_execute): Don't special case commands that can run without
	a valid selected thread.
	* top.c (execute_command): Don't special case commands that can
	run without a valid selected thread.  Use has_stack_frames.
	* infcmd.c (ensure_valid_thread): New.
	(continue_1, step_1, jump_command, signal_command): Use it.
	(detach_command): Error out if there's no selected thread/inferior.
	* thread.c (print_thread_info): Allow having no thread selected.
	(switch_to_thread): Don't read the PC if there is no current thread.
	(do_restore_current_thread_cleanup): Don't record the current
	frame if there is no current thread.
	(make_cleanup_restore_current_thread): Don't read frame info if
	there is no selected thread.
	(_initialize_thread): Don't mark commands as
	"no_selected_thread_ok".
	* frame.c (get_current_frame): Error out if there is no valid
	selected thread.
	(has_stack_frames): Return false if there is no valid
	selected thread.
	* cli/cli-cmds.c (init_cli_cmds): Don't mark commands as
	"no_selected_thread_ok".
	* cli/cli-decode.c (set_cmd_no_selected_thread_ok)
	(get_cmd_no_selected_thread_ok): Delete.
	* cli/cli-decode.h (CMD_NO_SELECTED_THREAD_OK): Delete.
	(set_cmd_no_selected_thread_ok, get_cmd_no_selected_thread_ok):
	Delete declaration.
	* stack.c (get_selected_block): Use has_stack_frames.
@
text
@d394 3
@


1.237
log
@	* gdbthread.h (struct thread_info): Add in_infcall member.
	* infcall.c (run_inferior_call): Save, set and restore in_infcall.
	Remove reverences to suppress_resume_observer.  Refresh
	`call_thread' after returning from `proceed'.
	* infcmd.c (suppress_resume_observer): Delete.
	* inferior.h (suppress_resume_observer): Delete declaration.
	* mi/mi-interp.c (mi_on_resume): Suppress output while calling an
	inferior function.
	* thread.c (set_running): Remove references to
	suppress_resume_observer.
	* infrun.c (struct inferior_status): Add in_infcall member.
	(save_inferior_status): Save it.
	(restore_inferior_status): Restore it.
@
text
@d620 9
d649 1
d794 1
d1005 1
d1107 1
d2399 4
@


1.236
log
@	* infcall.c (run_inferior_call): Remove references to
	suppress_stop_observer.
	* infcmd.c (suppress_stop_observer): Delete.
	(finish_command_continuation): Remove NOTE.  Don't clear
	suppress_stop_observer anymore.
	(finish_command_continuation_free_arg): Likewise.
	(finish_forward): Remove references to suppress_stop_observer.
	Call normal_stop observer if we haven't already.
	* inferior.h (suppress_stop_observer): Delete.
	* infrun.c (normal_stop): When deciding to suppress the
	normal_stop observer, check for proceed_to_finish instead of
	suppress_stop_observer.
@
text
@a168 3

/* When set, no calls to target_resumed observer will be made.  */
int suppress_resume_observer = 0;
@


1.235
log
@	* inferior.h (notice_new_inferior): Declare.
	* infcmd.c (notice_new_inferior): New.
	* remote.c (remote_add_inferior, remote_add_thread): New.
	(notice_new_inferiors): Rename to...
	(remote_notice_new_inferior): ... this.  Add RUNNING argument.
	Use remote_add_thread instead of add_thread, passing it the
	RUNNING argument.  Add an inferior with remote_add_inferior.  If
	we just learned about an inferior, call notice_new_inferior.
	(record_currthread): Adjust.
	(remote_threads_info): Adjust to use remote_notice_new_inferior.
	(remote_start_remote, extended_remote_attach_1): Use remote_add_inferior.
	(process_stop_reply): Adjust.  Call remote_notice_new_inferior
	after handling expedited registers and watchpoint state.
	(extended_remote_create_inferior_1): Use remote_add_inferior.
@
text
@a171 2
/* When set, normal_stop will not call the normal_stop observer.  */
int suppress_stop_observer = 0;
d1347 1
a1347 1

d1353 4
a1356 1
    bs = inferior_thread ()->stop_bpstat;
d1373 3
a1375 7
     that that *stopped notification includes the return value.  */
  /* NOTE: This is broken in non-stop mode.  There is no guarantee the
     next stop will be in the same thread that we started doing a
     finish on.  This suppressing (or some other replacement means)
     should be a thread property.  */
  observer_notify_normal_stop (bs, 1 /* print frame */);
  suppress_stop_observer = 0;
a1381 3
  /* NOTE: See finish_command_continuation.  This would go away, if
     this suppressing is made a thread property.  */
  suppress_stop_observer = 0;
a1465 2
  make_cleanup_restore_integer (&suppress_stop_observer);
  suppress_stop_observer = 1;
@


1.234
log
@* infcmd.c (registers_info): Remove register number case.
@
text
@d2316 66
@


1.233
log
@2009-02-25  Hui Zhu  <teawater@@gmail.com>

	* cli/cli-script.c (define_command): Add _() to query.
	* gnu-nat.c (inf_validate_task_sc): Ditto.
	* infcmd.c (kill_if_already_running): Ditto.
	(jump_command): Ditto.
	(attach_command): Ditto.
	* inflow.c (kill_command): Ditto.
	* infrun.c (handle_command): Ditto.
	* maint.c (maintenance_dump_me): Ditto.
	* memattr.c (mem_delete_command): Ditto.
	* monitor.c (monitor_interrupt_query): Ditto.
	* nto-procfs.c (interrupt_query): Ditto.
	* printcmd.c (undisplay_command): Ditto.
	* remote-mips.c (mips_kill): Ditto.
	* remote.c (interrupt_query): Ditto.
	* solib-irix.c (irix_open_symbol_file_object): Ditto.
	* solib-osf.c (osf_open_symbol_file_object): Ditto.
	* solib-pa64.c (pa64_open_symbol_file_object): Ditto.
	* solib-som.c (som_open_symbol_file_object): Ditto.
	* solib-svr4.c (open_symbol_file_object): Ditto.
	* symfile.c (symbol_file_add_with_addrs_or_offsets): Ditto.
	* target.c (kill_or_be_killed): Ditto.
	* tracepoint.c (delete_trace_command): Ditto.
	* top.c (quit_confirm): Add _() to s that will be used
	in query.
@
text
@a1950 15
      /* A register number?  (how portable is this one?).  */
      {
	char *endptr;
	int regnum = strtol (start, &endptr, 0);
	if (endptr == end
	    && regnum >= 0
	    && regnum < gdbarch_num_regs (gdbarch)
			+ gdbarch_num_pseudo_regs (gdbarch))
	  {
	    gdbarch_print_registers_info (gdbarch, gdb_stdout,
					  frame, regnum, fpregs);
	    continue;
	  }
      }

@


1.232
log
@        Include frame information for *stopped due to CLI commands.

        * ada-tasks.c (ada_normal_stop_observer): Adjust prototype.
        * infcmd.c (finish_command_continuation): Pass '1' for
        'print_frame' parameter to the observer.
        * infrun.c (normal_stop): Don't print mi-specific information
        here. Pass 'stop_print_frame' to the 'print_frame' parameter
        of the observer.
        * mi/mi-interp.c (mi_on_normal_stop): Adjust prototype.
        If we need to print frame, and current uiout is not the MI one,
        print frame again.
@
text
@d444 2
a445 2
	  && !query ("The program being debugged has been started already.\n\
Start it from the beginning? "))
d1032 1
a1032 1
      if (!query ("Line %d is not in `%s'.  Jump anyway? ", sal.line,
d1046 1
a1046 1
	  if (!query ("WARNING!!!  Destination is in unmapped overlay!  Jump anyway? "))
d2238 1
a2238 1
      if (query ("A program is being debugged already.  Kill it? "))
@


1.231
log
@	* infcmd.c (program_info): Use paddress instead of casting stop_pc
	to unsigned long.
@
text
@d1377 1
a1377 1
  observer_notify_normal_stop (bs);
@


1.230
log
@	PR gdb/9346
	* infcmd.c (signal_command): Do not specify a resume PC.

	testsuite/
	PR gdb/9346
	* gdb.base/interrupt.c (sigint_handler): New.
	(main): Install a SIGINT handler if SIGNALS is defined.  Exit
	on error.
	* gdb.base/interrupt.exp: Define SIGNALS unless gdb,nosignals.
	Test "signal SIGINT".
@
text
@d1586 1
a1586 2
  printf_filtered (_("Program stopped at %s.\n"),
		   hex_string ((unsigned long) stop_pc));
@


1.229
log
@	PR gdb/9747:
	* gdbthread.h (finish_thread_state, finish_thread_state_cleanup):
	Declare.
	* thread.c (finish_thread_state, finish_thread_state_cleanup): New.
	* infrun.c (wait_for_inferior, fetch_inferior_event): If an error
	is thrown while handling an event, finish the thread state.
	(normal_stop): Use finish_thread_state cleanup.
	* infcmd.c (run_command_1): If an error is thrown while starting
	the inferior, finish the thread state.
@
text
@d1148 1
a1148 5
  /* "signal 0" should not get stuck if we are stopped at a breakpoint.
     FIXME: Neither should "signal foo" but when I tried passing
     (CORE_ADDR)-1 unconditionally I got a testsuite failure which I haven't
     tried to track down yet.  */
  proceed (oursig == TARGET_SIGNAL_0 ? (CORE_ADDR) -1 : stop_pc, oursig, 0);
@


1.228
log
@        Updated copyright notices for most files.
@
text
@d459 2
d549 12
d567 4
a572 1

@


1.227
log
@	* infcmd.c (step_1): Use step_once in the synchronous case too.
	(step_1_continuation): Wrap line.
	(step_once): Adjust comment.  Only install the continuation in
	async mode.
@
text
@d5 1
a5 1
   2008 Free Software Foundation, Inc.
@


1.226
log
@	* infcmd.c (until_next_command, finish_backward): Use get_frame_pc
	instead of read_pc.
@
text
@d802 1
a802 1
  /* In synchronous case, all is well, just use the regular for loop. */
d807 2
a808 2
	  struct thread_info *tp = inferior_thread ();
	  clear_proceed_status ();
d810 5
a814 2
	  frame = get_current_frame ();
	  tp->step_frame_id = get_frame_id (frame);
d816 1
a816 1
	  if (!single_inst)
d818 5
a822 18
	      CORE_ADDR pc;

	      pc = get_frame_pc (frame);
	      find_pc_line_pc_range (pc,
				     &tp->step_range_start, &tp->step_range_end);
	      if (tp->step_range_end == 0)
		{
		  char *name;
		  if (find_pc_partial_function (pc, &name,
						&tp->step_range_start,
						&tp->step_range_end) == 0)
		    error (_("Cannot find bounds of current function"));

		  target_terminal_ours ();
		  printf_filtered (_("\
Single stepping until exit from function %s, \n\
which has no line number information.\n"), name);
		}
a823 20
	  else
	    {
	      /* Say we are stepping, but stop after one insn whatever it does.  */
	      tp->step_range_start = tp->step_range_end = 1;
	      if (!skip_subroutines)
		/* It is stepi.
		   Don't step over function calls, not even to functions lacking
		   line numbers.  */
		tp->step_over_calls = STEP_OVER_NONE;
	    }

	  if (skip_subroutines)
	    tp->step_over_calls = STEP_OVER_ALL;

	  tp->step_multi = (count > 1);
	  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);

	  if (!target_has_execution
	      || !inferior_thread ()->stop_step)
	    break;
a826 1
      return;
a827 4
  /* In case of asynchronous target things get complicated, do only
     one step for now, before returning control to the event loop. Let
     the continuation figure out how many other steps we need to do,
     and handle them one at the time, through step_once(). */
d830 5
d836 1
d870 2
a871 1
	  step_once (a->skip_subroutines, a->single_inst, a->count - 1, a->thread);
d883 7
a889 8
/* Do just one step operation. If count >1 we will have to set up a
   continuation to be done after the target stops (after this one
   step). This is useful to implement the 'step n' kind of commands, in
   case of asynchronous targets. We had to split step_1 into two parts,
   one to be done before proceed() and one afterwards. This function is
   called in case of step n with n>1, after the first step operation has
   been completed.*/
static void 
a892 1
  struct step_1_continuation_args *args;
d950 15
a964 6
      args = xmalloc (sizeof (*args));
      args->skip_subroutines = skip_subroutines;
      args->single_inst = single_inst;
      args->count = count;
      args->thread = thread;
      add_intermediate_continuation (tp, step_1_continuation, args, xfree);
@


1.225
log
@	* infcmd.c (step_1, step_once): Look up the stepping range based
	on the current frame's PC, not on stop_pc.
@
text
@d1184 1
a1184 1
  pc = read_pc ();
d1408 1
d1412 3
a1414 2
  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
d1431 1
a1431 1
  if (sal.pc != read_pc ())
@


1.224
log
@	* infcmd.c (step_once): Remove dead code.
@
text
@d815 4
a818 1
	      find_pc_line_pc_range (stop_pc,
d823 1
a823 1
		  if (find_pc_partial_function (stop_pc, &name,
d938 4
a941 1
	  find_pc_line_pc_range (stop_pc,
d952 1
a952 1
	      if (find_pc_partial_function (stop_pc, &name,
@


1.223
log
@	Implement '-target-detach pid'.

        * infcmd.c (detach_command): Make nonstatic.
        * inferior.h (detach_command): Declare.
        * mi/mi-cmds.c (mi_cmds): Don't route -target-detach via CLI.
        * mi/mi-cmds.h (mi_cmd_target_detach): Declare.
        * mi/mi-main.c (find_thread_of_process, mi_cmd_target_detach): New.
@
text
@a930 2
      if (!frame)		/* Avoid coredump here.  Why tho? */
	error (_("No current frame"));
@


1.223.2.1
log
@2008-11-20  Stan Shebs  <stan@@codesourcery.com>

	Multi-process (primarily multi-exec) support.

	2008-10-14  Stan Shebs  <stan@@codesourcery.com>

	* blockframe.c (get_frame_block): Get inferior from frame.
	* block.c (block_for_pc_inf): New function.
	* block.h (block_for_pc_inf): Declare.
	* symfile.c (find_pc_inf_sect): New function.
	* symfile.h (find_pc_inf_sect): Declare.
	* symtab.c (find_pc_inf_line): New function.
	* symtab.h (find_pc_inf_line): Declare.
	* frame.c (struct frame_info) New field inferior.
	(fprint_frame_id): Display inferior.
	(get_frame_id): Set inferior_num from inferior.
	(frame_id_eq): Compare inferiors.
	(create_sentinel_frame): Set inferior.
	(create_new_frame): Copy inferior from sentinel.
	(get_prev_frame_raw): Copy inferior from next frame.
	(find_frame_sal): Use find_pc_inf_line.
	(get_frame_inferior): New function.
	* frame.h (struct frame_id): New field inferior_num.

	* breakpoint.c (expand_sals_by_inferiors): Copy section from input
	sal to expanded sals.
	* symtab.c (expand_line_sal): Ditto.

	2008-10-10  Stan Shebs  <stan@@codesourcery.com>

	* remote.c (discard_pending_stop_replies): Initialize prev.
	* infrun.c (infrun_thread_stop_requested): Ditto.

	2008-10-08  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (struct inferior): Rename environ field to inf_environ.
	* inferior.c (print_inferior): Ditto.

	2008-10-01  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (detach_fork): Declare here...
	* linux-fork.h (detach_fork): ...instead of here.
	* linux-fork.c (detach_fork): Move to...
	* infrun.c (detach_fork): ...here.
	* remote.c (detach_fork): Remove decl.

	2008-09-30  Stan Shebs  <stan@@codesourcery.com>

	* linespec.c (decode_line_1): Better default for one-exec case.
	* remote (remote_start_remote): Use the exec in the one-exec case.

	2008-09-29  Stan Shebs  <stan@@codesourcery.com>

	* infcmd.c (attach_command): If only one exec, assume it is the
	attached inferior's exec.
	(attach_command_post_wait): Set inferior's exec from
	the one that was found.
	* inf-ptrace.c (inf_ptrace_attach): Only report exec file if
	if there is just one present.
	(inf_ptrace_detach): Use inferior to get correct exec name.

	2008-09-29  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (print_inferior): Use exec short names, and drop
	unused address space display.

	2008-09-26  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.c (should_be_inserted): Test for no inferior.
	(clone_breakpoint_location): New function, broken out from...
	(update_breakpoint_inferiors): ...here, also tweak conditions
	for adding a location.
	(insert_breakpoint_location): Don't count non-running inferiors.
	(remove_breakpoint): Set tmp_inf.
	(print_one_breakpoint_location): Add allflag arg, use to always
	show inf.
	(print_one_breakpoint): Add allflag arg.
	(do_captured_breakpoint_query): Fix caller.
	(breakpoint_1): Ditto.
	* exec.c (create_exec): Save full pathname as exec name.
	(find_exec_by_name): Use find_exec_by_substr.
	* fork-child.c (fork_inferior): Warn if exec not found for new
	inferior.

	2008-09-25  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.c (should_be_inserted): Don't insert in inferiors
	that are not running.
	(update_breakpoint_inferiors): New function.
	(insert_breakpoints): Call it.
	(insert_breakpoint_locations): Don't insert in inferiors that are
	not running.
	(set_raw_breakpoint_without_location): Set trigger set from
	current itset here...
	(set_raw_breakpoint): Instead of here. Also add default fillins
	for the location's inferior.
	(add_location_to_breakpoint): Similarly.
	(expand_sals_by_inferiors): New function.
	(breakpoint_re_set_one): Call it.
	(resolve_sal_pc): Don't set sal inferior.
	* breakpoint.h (struct breakpoint): Remove exec field, never used.
	* inferior.h (inferior_list): Declare.
	* inferior.c (inferior_list): Make public.
	(add_inferior_to_itset): Auto-add inferiors after exec's inferior.
	(first_inferior_in_set): Check for zero-length vector.
	* exec.c (xfer_memory): Use tmp_inf as inferior if set.
	* infcmd.c (focus_command): Improve user feedback.
	* linespec.c (build_canonical_line_spec): Record exec name as part
	of canonical spec.
	(symbol_found): Canonicalize specs more.
	(decode_indirect): Revert rewrite from 2008-09-14.
	(decode_sharp): Use find_exec_by_substr, better error messages.
	* minsyms.c (lookup_minimal_symbol_in_exec): New function.
	(lookup_minimal_symbol_in_exec_1): New function, body of
	lookup_minimal_symbol.
	* symtab.h (lookup_minimal_symbol_in_exec): Declare.
	* symtab.c (find_function_start_sal): Set inferior to use.
	(append_expanded_sal): Return pointer to the new sal.
	* remote.c (remote_xfer_memory): Better parms to ptid_build, remove
	debug print.
	(remote_xfer_partial): Ditto.

	2008-09-22  Pedro Alves  <pedro@@codesourcery.com>

	* inferior.c (itset_member): Fix typo.

	2008-09-22  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (current_inf): Remove declaration.
	(tmp_inf): Declare.
	* inferior.c (current_inf): Remove.
	(tmp_inf): New global, hack to bypass passing inferior throughout
	target stack.
	(print_inferior): Don't report current_inf.
	(add_inferior_command): Don't use current_inf.
	(name_inferior_command): Use first inferior of current_itset.
	(update_itset): Handle NULL case.
	(add_inferior_itset): Recursively add all inferiors derived from
	an exec if the exec's own inferior is present.
	(first_inferior_in_set): New function.
	(free_inferior): Comment out until references cleared reliably.
	* infcmd.c (focus_command): Don't set current_inf.
	(get_inferior_args): Use first_inferior_in_set instead of
	current_inf.
	(set_inferior_args): Ditto.
	(set_inferior_args_vector): Ditto.
	(notice_args_set): Ditto.
	* breakpoint.c (insert_breakpoint_locations): Remove insertion test
	using current_inf, set tmp_inf.
	(reattach_breakpoints): Set tmp_inf.
	(bpstat_check_breakpoint_conditions): Test trigger set here...
	(bpstat_stop_status): ... instead of here.
	(bpstat_check_trigger_set): Add special case for exec's own
	inferior.
	(print_one_breakpoint_location): Also test for multiple inferiors
	before displaying location's inferior, flag trigger set with "i/t"
	instead of "focus".
	(check_duplicates): Pass location's inferior to...
	(check_duplicates_for): Add inferior arg and use.
	(set_raw_breakpoint): Override sal inferior with one from the
	trigger set.
	(add_location_to_breakpoint): Ditto.
	* remote.c (remote_xfer_memory): Switch inferiors if tmp_inf is
	set to something different from inferior_ptid.
	(remote_xfer_partial): Ditto.
	* top.c (execute_command): Always update the current itset.

	2008-09-19  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (set_inferior_exec): New function.
	(set_inferior_exec_command): New command.
	* inferior.h: Declare set_inferior_exec.
	* fork-child.c (fork_inferior): Set the inferior's exec.
	* remote.c (extended_remote_create_inferior_1): Ditto.
	gdb/doc/
	* gdb.texinfo (Debugging Multiple Programs): Describe set-exec.

	2008-09-18  Stan Shebs  <stan@@codesourcery.com>

	* target.c (target_resize_to_sections): Adjust execs' section
	tables too.

	2008-09-17  Stan Shebs  <stan@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Invoking GDB): Describe multiple program args.
	(File Options): Describe multi-program effects.
	(Multiple Programs): New section, multi-program debugging.
	(Forks): Rename section from "Processes".
	(Specify Location): Describe the #-syntax.
	(Variables): Describe the #-syntax.
	(Files): Describe add-file and add-exec-file.
	(Maintenance Commands): Describe maint print execs.

	2008-09-15  Stan Shebs  <stan@@codesourcery.com>

	* exec.c (addr_space_info_command): Don't try to display host address.

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* c-exp.y: (yylex): Accept '#' in identifiers.
	* linespec.c (decode_sharp): New function.
	(decode_line_1): Use it for #-syntax.
	(decode_indirect): Rewrite to accept exec arg and iterate over
	inferiors.
	(struct d_i_data): New struct for inferior iteration.
	(decode_indirect_callback): New function.
	(decode_variable): Pass in exec, use in symbol lookup.

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.h (struct bp_location): Add inferior field instead
	of address space field.
	* breakpoint.c (insert_breakpoint_locations): Only insert in
	appropriate inferior.
	(bpstat_check_trigger_set): New function.
	(bpstat_stop_status): Call it, check location's inferior also.
	(print_one_breakpoint_location): Report location's inferior.
	(set_raw_breakpoint): Set location inferior, clear an experiment.
	(add_location_to_breakpoint): Ditto.
	(expand_line_sal_maybe): Check for non-NULL original function.
	(resolve_sal_pc): Set sal inferior.
	(clear_command): Be careful to not clear anything twice.
	* symtab.h: Update declarations of symbol lookups.
	(struct symtab_and_line): Change address space to inferior field.
	* symtab.c (init_sal): Clear inferior field.
	(append_expanded_sal): Set inferior.
	(lookup_symbol_in_language_1): New function.
	(lookup_symbol_in_language): Call it.
	(lookup_symbol_in_exec_in_language): New function.
	(lookup_symbol): Detect #-syntax and find exec to use.
	(lookup_symbol_aux): Add exec argument and use it.
	(lookup_symbol_aux_symtabs): Ditto.
	(lookup_symbol_aux_psymtabs): Ditto.
	(basic_lookup_symbol_nonlocal): Ditto.
	(lookup_symbol_static): Ditto.
	(lookup_symbol_global): Ditto.
	* ada-lang.c (cp_lookup_symbol_nonlocal): Ditto.
	* cp-support.h (cp_lookup_symbol_nonlocal): Ditto.
	* cp-namespace.c (cp_lookup_symbol_nonlocal): Ditto.
	* language.h (struct language_defn): Ditto.
	* scm-valprint.c (scm_inferior_print): Add exec arg to
	lookup_symbol_global.
	* source.c (select_source_symtab): Use current_exec.
	* addrspace.h (struct addr_space): New field num.
	* exec.h (struct exec): New fields sections and sections_end.
	* exec.c (exec_file_attach_1): Set them from exec_ops, set
	inferior's address space name from exec.
	(find_exec_by_substr): New function.
	(build_section_table): Don't free old table.
	(print_section_info): Use exec's section table.
	(next_address_space_num): New global, numbering for address spaces.
	(new_address_space): Use it.
	(addr_space_info_command): Display it.
	* infcmd.c (set_current_exec): Set exec_ops section table.
	* inferior.h (update_itset): Declare.
	* inferior.c (add_inferior_silent): Set address space.
	(print_inferior): Display it.
	(number_of_inferiors): New function.
	(itset_member): New function.

	2008-09-04  Stan Shebs  <stan@@codesourcery.com>

	* corefile.c (close_exec_file): Remove #if 0 block.
	(validate_files): Use first_exec instead of exec_bfd.
	(get_exec_file): Ditto.
	* corelow.c (core_open): Ditto.
	* utils.c (string_to_core_addr): Ditto.
	* arch-utils.c (gdbarch_update_p): Ditto.
	* linux-thread-db.c (enable_thread_event): Ditto.
	(thread_db_get_thread_local_address ): Ditto.
	* exec.c (find_exec_by_name): Test short name also.
	(file_command): Set current exec.

	2008-09-03  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (add_threads_to_itset): Default to including all
	of an inferior's threads.

	2008-08-31  Stan Shebs  <stan@@codesourcery.com>

	Parsing for i/t sets.
	* inferior.h (struct itset_entry): New struct.
	(struct itset): Make thread lists be per-inferior, add parse state
	variables.
	* inferior.c: (add_inferior_command): Add error checking and
	confirmation.
	(remove_inferior_command): Update for itset restructuring.
	(new_itset): Don't pass in dynamic-ness, call parse_itset_spec.
	(update_itset): Similarly.
	(parse_itset_spec): New, parsing of itset spec.
	(parse_itset_list, parse_itset_range, etc): New.
	(make_itset_from_spec): Rewrite.
	(dump_itset): Rewrite to reflect itset structure.
	* infcmd.c (focus_command): Similarly.

	2008-08-25  Stan Shebs  <stan@@codesourcery.com>

	First part of multiprocess support.
	* Makefile.in (COMMON_OBS): Add inferior.o.
	* addrspace.h: New file.
	* breakpoints.h (struct bp_location): Add address space field.
	(struct breakpoint): Add trigger set and exec fields.
	* breakpoints.c (print_one_breakpoint_location): Display trigger
	set.
	(set_raw_breakpoint): Set trigger set from current itset.
	* corefile.c (reopen_exec_file): Rewrite for multiple execs.
	(get_exec_file): Add case for current_exec.
	* corelow.c (is_core_file): New function.
	(core_files_info): Pass additional arg to print_section_info.
	* exec.h (struct exec): New struct.
	* exec.c (execs): New global.
	(exec_bfd_mtime): Remove.
	(last_exec_created, current_exec, first_exec): New globals.
	(exec_close): Clear all exec objects.
	(exec_file_clear): Tweak user message.
	(exec_file_add): New function.
	(exec_file_attach_1): New function, body of exec_file_attach,
	plus new code to handle multiple execs.
	(exec_file_attach): Call it.
	(exec_file_update): New function.
	(create_exec, find_exec_by_name, number_of_execs): New functions.
	(exec_file_command): Rephrase query, set current exec.
	(add_exec_file_command): New command.
	(add_file_command): New command.
	(print_section_info): Add exec argument.
	(exec_files_info): Rewrite for multiple execs.
	(maintenance_print_execs): New function.
	(new_address_space): New function.
	(addr_space_info_command): New command.
	* gdbcore.h (exec_bfd_mtime): Remove decl.
	(exec_file_add): Declare.
	* infcmd.c: Include exec.h.
	(current_itset): New global.
	(set_current_exec): New function.
	(focus_command): New command.
	(get_inferior_args): Maybe get from the current inferior.
	(set_inferior_args): Also set in current inferior.
	(set_inferior_args_vector): Similarly.
	(notice_args_set): Similarly.
	(attach_command): Rephrase query.
	* inferior.h (struct inferior): New struct.
	(struct itset): New struct.
	* inferior.c: New file, management of multiple inferiors.
	* main.c (captured_main): Rewrite to allow multiple executables,
	pids, and corefiles on the command line.
	* maint.c (maintenance_info_sections): Rewrite for multiple execs.
	* objfiles.h (struct objfile): New field for exec.
	(ALL_OBJFILES_FOR_EXEC, ALL_PRIMARY_SYMTABS_FOR_EXEC,
	ALL_PSYMTABS_FOR_EXEC): New macros.
	* objfiles.c (allocate_objfile): Clear exec field.
	* solib.c (clear_solib): Use first_exec instead of exec_bfd.
	* source.c (select_source_symtab): Use ALL_OBJFILES_FOR_EXEC.
	(find_source_lines): Use mtime from exec.
	* symfile.c (syms_from_objfile): Don't clear objfile if multiple
	execs.
	(new_symfile_objfile): Get objfile's exec from last_exec_created.
	(symbol_file_clear): Rephrase messages.
	(reread_symbols): Update objfile's exec if necessary.
	* symmisc.c (dump_objfile): Dump objfile's exec also.
	(maintenance_print_objfiles): Report symfile_objfile.
	* symtab.h (struct symtab_and_line): Add address space field.
	* symtab.c (find_pc_sect_psymtab): Look for a plausible exec, and
	then use it.
	(lookup_symbol_aux_symtabs): Use current exec.
	(lookup_symbol_aux_symtabs): Ditto.
	(basic_lookup_transparent_type): Ditto.
	(find_pc_sect_symtab): Ditto.
	* target.h (print_section_info): Add arg to decl.
	* tui/tui-win.c: Rename "focus" command to "ffocus".

gdb/testsuite:

2008-11-20  Stan Shebs  <stan@@codesourcery.com>

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* gdb.gdb/selftest.exp: Update to reflect current sources.
	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* configure.ac (AC_OUTPUT): Add gdb.multi/Makefile.
	* configure: Regenerate.

	* gdb.multi/Makefile.in: New.
	* gdb.multi/hello.c, hangout.c, goodbye.c: New source files.
	* gdb.multi/base.exp: New file, basic multiprocess tests.

	2008-08-25  Stan Shebs  <stan@@codesourcery.com>

	* config/monitor.exp: Match on rephrased message.
	* gdb.base/attach.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* lib/gdb.exp: Ditto.
@
text
@a35 1
#include "exec.h"
a55 2
struct inferior *current_inf;

d174 1
a174 72

struct itset *current_itset = NULL;

void
set_current_exec (struct exec *exec)
{
  current_exec = exec;
  /* As a transitional step, copy exec properties into old crufty globals.  */
  exec_bfd = current_exec->ebfd;
  exec_ops.to_sections = current_exec->sections;
  exec_ops.to_sections_end = current_exec->sections_end;
  symfile_objfile = current_exec->objfile;
  clear_symtab_users ();
}

void
focus_command (char *spec, int from_tty)
{
  struct itset *itset;
  struct itset_entry *entry;
  struct inferior *inf;
  int ix;

  if (!spec)
    {
      if (current_itset)
	printf_filtered ("Focus is [%s]", current_itset->spec);
      else
	printf_filtered ("No focus has been set.");
      if (current_exec)
	printf_filtered (" (current exec is %s)", current_exec->name);
      else
	printf_filtered (" (no current exec)");
      printf_filtered ("\n");
      return;
    }

  itset = make_itset_from_spec (spec);

  if (itset_is_empty (itset))
    {
      error ("Cannot focus on an empty set, focus is unchanged");
      return;
    }

  current_itset = itset;

  /* For now, set a current exec from the first element of the focus
     set.  */
  entry = VEC_index (itset_entry, itset->inferiors, 0);
  inf = entry->inferior;
  if (VEC_length (itset_entry, itset->inferiors) > 1)
    warning ("%d inferiors in the current i/t set, using inf %d to get current exec",
	     VEC_length (itset_entry, itset->inferiors), inf->num);
  if (inf->exec)
    set_current_exec (inf->exec);
  /* (find first live thread?) */
  if (VEC_length (thread_p, entry->threads) > 1)
    warning ("%d threads for inferior %d in the current i/t set, switching to first",
	     VEC_length (thread_p, entry->threads), inf->num);
  if (VEC_length (thread_p, entry->threads) > 0)
    switch_to_thread ((VEC_index (thread_p, entry->threads, 0))->ptid);

  /* Confirm the choice of focus.  */
  printf_filtered ("New focus: ");
  dump_itset (current_itset);
  if (current_exec)
    printf_filtered ("Current exec is %s.\n", current_exec->name);
  else
    printf_filtered ("No current exec.\n");
}

a197 10
  struct inferior *inf;

  inf = first_inferior_in_set (current_itset);
  if (inf)
    {
      inferior_args = inf->args;
      inferior_argc = inf->argc;
      inferior_argv = inf->argv;
    }

a217 1
  struct inferior *inf;
a222 8
  inf = first_inferior_in_set (current_itset);
  if (inf)
    {
      inf->args = newargs;
      inf->argc = 0;
      inf->argv = 0;
    }

a228 2
  struct inferior *inf;

a230 8

  inf = first_inferior_in_set (current_itset);
  if (inf)
    {
      inf->argc = argc;
      inf->argv = argv;
    }

a236 2
  struct inferior *inf;

a238 8

  inf = first_inferior_in_set (current_itset);
  if (inf)
    {
      inf->args = xstrdup (inferior_args);
      inf->argc = 0;
      inf->argv = 0;
    }
a2117 1
  struct exec *exec;
d2241 1
a2241 4
      if ((number_of_execs () > 1)
	  ? query ("%d programs are being debugged already.  Kill them? ",
		   number_of_execs ())
	  : query ("A program is being debugged already.  Kill it? "))
a2330 13

  /* As a heuristic, if there is no exec assigned to the attached
     inferior, but only one exec known to GDB, guess that it is the
     exec for the the process just attached. (If GDB has guessed
     wrong, it will be up to the user to use set-exec to fix
     matters.)  */
  {
    struct inferior *inferior = current_inferior ();

    if (!inferior->exec && number_of_execs () == 1)
      set_inferior_exec (inferior, first_exec);
  }

a2480 3
  add_com ("focus", no_class, focus_command, _("\
Change the set of current inferiors/threads."));

@


1.223.2.2
log
@2008-11-25  Pedro Alves  <pedro@@codesourcery.com>

	2008-11-25  Pedro Alves  <pedro@@codesourcery.com>

	* linux-fork.c (detach_fork): Delete declaration.
	(_initialize_linux_fork): Move "set detach-on-fork"
	command to ...
	* infrun.c (_initialize_infrun): ... here.
	* inferior.h (detach_fork): Declare.

	2008-11-10  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (read_ptid): If we don't know about any inferior yet,
	use the pid of magic_null_ptid.
	(remote_start_remote): Don't set inferior_ptid to magic_null_ptid
	here.

	2008-10-14  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (remote_start_remote): Mask async mode while collecting
	the initial event, use notice_new_inferior.

	2008-10-12  Pedro Alves  <pedro@@codesourcery.com>

	* infcmd.c (attach_command_post_wait): Set the inferior exec here.
	(attach_command): Don't set the inferior exec here.
	(notice_new_inferior): New.
	* inferior.h (notice_new_inferior): Declare.
	* remote.c (notice_new_inferiors): Add `stopping' argument.  Add
	the inferior before adding the threads.  Call notice_new_inferior.
	(record_currthread): Adjust.
	(remote_threads_info): Add the inferior before adding the thread.
	Call notice_new_inferior.

	2008-10-09  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (notice_new_inferiors): If there's only one exec, set
	it in the new inferior.
	(set_thread): If setting the thread failed, assume the thread has
	terminated.

	2008-09-17  Pedro Alves  <pedro@@codesourcery.com>

	* inferior.c (delete_inferior_1): Free the inferior after freeing
	its threads.

	2008-09-16  Pedro Alves  <pedro@@codesourcery.com>

	* inferior.h (discard_all_inferiors): Declare.
	* inferior.c (delete_inferior): Rename to...
	(delete_inferior_1): ...this.  Add 'silent' argument.  If this
	inferior is has pid not zero, delete its threads.
	(delete_inferior): New, as wrapper around delete_inferior_1.
	(delete_inferior_by_pid_1): Reimplement.
	(discard_all_inferiors): New.

	2008-09-15  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (extended_remote_attach_1): Don't set target_attach_no_wait.

	2008-09-15  Pedro Alves  <pedro@@codesourcery.com>

	* frame.c (get_current_frame, has_stack_frames): Check for
	null_ptid.
	* top.c (execute_command): Likewise.

	2008-08-29  Pedro Alves  <pedro@@codesourcery.com>

	* inferior.c (have_real_inferiors): New.
	* inferior.h (have_real_inferiors): Declare.
	* remote.c (extended_remote_mourn_1): Use it.
	* top.c (quit_target): Use it.

	2008-08-28  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (parse_stop_reply): Handle Y;exec.

	2008-08-28  Pedro Alves  <pedro@@codesourcery.com>

	* infcmd.c (struct exec_file_attach_wrapper_args): New.
	(exec_file_attach_wrapper): New.
	(attach_command_post_wait): If there's a sysroot, prepend it to
	the target reported exec file path.  Continue attaching to the
	inferior event if attaching to the exec file fails.

	* remote.c (remote_pid_to_exec_file): Rebustify.  Expect
	"QExecFile:PID;" in the reply.

	2008-08-28  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (record_currthread): If setting the current thread to
	minus_one_ptid, don't pass that to the stub.
	(remote_parse_stop_reply): Handle 'Y' stop reply.
	(remote_wait_as): Likewise.  If remote process exited, invalidate
	the current thread.
	(remote_detach_pid): New.
	(remote_follow_fork): New.
	(init_remote_ops): Register it.

	2008-08-28  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (remote_pid_to_exec_file): New.
	(init_remote_ops): Register it.

	2008-08-28  Pedro Alves  <pedro@@codesourcery.com>

	* infcmd.c (kill_if_already_running): If target supports
	multi-process, allow multi-runs.

	2008-08-28  Pedro Alves  <pedro@@codesourcery.com>

	* remote.c (extended_remote_create_inferior_1): Don't clear the
	thread list.
@
text
@d556 2
a557 4
      if (!target_supports_multi_process ())
	{
	  if (from_tty
	      && !query ("The program being debugged has been started already.\n\
d559 2
a560 3
	    error (_("Program not restarted."));
	  target_kill ();
	}
a576 1
  /* This is bad.  */
a2208 17
struct exec_file_attach_wrapper_args
{
  char *path;
  int from_tty;
};

static int
exec_file_attach_wrapper (struct ui_out *ui_out, void *args)
{
  struct exec_file_attach_wrapper_args *a = args;

  exec_file_attach (a->path, a->from_tty);
  symbol_file_add_main (a->path, a->from_tty);

  return 0;
}

d2244 10
a2253 27
	  struct exec_file_attach_wrapper_args args;

	  if (gdb_sysroot && *gdb_sysroot)
	    {
	      char *name = xmalloc (strlen (gdb_sysroot)
				   + strlen (exec_file)
				   + 1);
	      strcpy (name, gdb_sysroot);
	      strcat (name, exec_file);
	      full_exec_path = name;
	    }
	  else
	    {
	      /* It's possible we don't have a full path, but rather just a
		 filename.  Some targets, such as HP-UX, don't provide the
		 full path, sigh.

		 Attempt to qualify the filename against the source path.
		 (If that fails, we'll just fall back on the original
		 filename.  Not much more we can do...)
	      */
	      if (!source_full_path_of (exec_file, &full_exec_path))
		full_exec_path = savestring (exec_file, strlen (exec_file));
	    }

	  args.path = full_exec_path;
	  args.from_tty = from_tty;
d2255 2
a2256 13
	  /* Don't let failing to find symbols prevent trying to
	     finish the attach.  */
	  catch_exceptions (uiout, exec_file_attach_wrapper, &args,
			    RETURN_MASK_ERROR);

	  /* Try to use the exec we (hopefully) just pulled in as the
	     inferior's exec.  */
	  if (!inferior->exec)
	    {
	      exec = find_exec_by_name (full_exec_path);
	      if (exec)
		set_inferior_exec (inferior, exec);
	    }
a2264 8
  /* As a heuristic, if there is no exec assigned to the attached
     inferior, but only one exec known to GDB, guess that it is the
     exec for the the process just attached. (If GDB has guessed
     wrong, it will be up to the user to use set-exec to fix
     matters.)  */
  if (!inferior->exec && number_of_execs () == 1)
    set_inferior_exec (inferior, first_exec);

d2278 1
a2278 1
      /* Immediately resume all suspended threads of this inferior,
a2397 2

  /* NOTE, NOTE, this is wrong in multi-process... */
d2449 7
a2455 21
}

/* We had just found out that the target was already attached to an
   inferior.  PTID points at a thread of this new inferior, that is
   the most likelly to be stopped right now, but not necessarily so.
   The new inferior has already been added to the inferior list at
   this point.  */

void
notice_new_inferior (ptid_t ptid, int stopping, int from_tty)
{
  struct cleanup* old_chain;
  struct inferior *inferior;
  int async_exec;

  old_chain = make_cleanup (null_cleanup, NULL);

  /* If in non-stop, leave threads as running as they were.  If
     they're stopped for some reason other than us telling it to, it
     should report a signal != TARGET_SIGNAL_0.  */
  async_exec = non_stop;
d2457 3
a2459 2
  if (!ptid_equal (inferior_ptid, null_ptid))
    make_cleanup_restore_current_thread ();
d2461 1
a2461 33
  switch_to_thread (ptid);

  inferior = current_inferior ();

  if (is_executing (inferior_ptid))
    {
      target_stop (inferior_ptid);

      if (!non_stop)
	inferior->stop_soon = STOP_QUIETLY_REMOTE;

      if (target_can_async_p ())
	{
	  /* sync_execution mode.  Wait for stop.  */
	  struct attach_command_continuation_args *a;

	  a = xmalloc (sizeof (*a));
	  a->args = xstrdup ("");
	  a->from_tty = from_tty;
	  a->async_exec = async_exec;
	  add_inferior_continuation (attach_command_continuation, a,
				     attach_command_continuation_free_args);

	  do_cleanups (old_chain);
	  return;
	}
      else
	wait_for_inferior (0);
    }

  attach_command_post_wait ("" /* args */, from_tty, !stopping);

  do_cleanups (old_chain);
@


1.223.2.3
log
@	Merge from head:
	2008-12-05  Pedro Alves  <pedro@@codesourcery.com>

	* infcmd.c (step_1, step_once): Look up the stepping range based
	on the current frame's PC, not on stop_pc.
@
text
@d932 1
a932 4
	      CORE_ADDR pc;

	      pc = get_frame_pc (frame);
	      find_pc_line_pc_range (pc,
d937 1
a937 1
		  if (find_pc_partial_function (pc, &name,
d1054 1
a1054 4
	  CORE_ADDR pc;

	  pc = get_frame_pc (frame);
	  find_pc_line_pc_range (pc,
d1065 1
a1065 1
	      if (find_pc_partial_function (pc, &name,
@


1.223.2.4
log
@	Merge from head:
	2008-12-11  Pedro Alves  <pedro@@codesourcery.com>

	* infcmd.c (step_1): Use step_once in the synchronous case too.
	(step_1_continuation): Wrap line.
	(step_once): Adjust comment.  Only install the continuation in
	async mode.
@
text
@d919 1
a919 1
  /* In synchronous case, all is well; each step_once call will step once.  */
d924 2
a925 2
	  struct thread_info *tp;
	  step_once (skip_subroutines, single_inst, count, thread);
d927 24
a950 3
	  if (target_has_execution
	      && !ptid_equal (inferior_ptid, null_ptid))
	    tp = inferior_thread ();
a951 3
	    tp = NULL;

	  if (!tp || !tp->stop_step || !tp->step_multi)
d953 7
a959 5
	      /* If we stopped for some reason that is not stepping
		 there are no further steps to make.  */
	      if (tp)
		tp->step_multi = 0;
	      break;
d961 10
d974 1
d976 4
a981 5
      /* In the case of an asynchronous target things get complicated;
	 do only one step for now, before returning control to the
	 event loop.  Let the continuation figure out how many other
	 steps we need to do, and handle them one at the time, through
	 step_once.  */
a982 1

d1016 1
a1016 2
	  step_once (a->skip_subroutines, a->single_inst,
		     a->count - 1, a->thread);
d1028 8
a1035 7
/* Do just one step operation.  This is useful to implement the 'step
   n' kind of commands.  In case of asynchronous targets, we will have
   to set up a continuation to be done after the target stops (after
   this one step).  For synch targets, the caller handles further
   stepping.  */

static void
d1039 1
d1099 6
a1104 15
      /* For async targets, register a continuation to do any
	 additional steps.  For sync targets, the caller will handle
	 further stepping.  */
      if (target_can_async_p ())
	{
	  struct step_1_continuation_args *args;

	  args = xmalloc (sizeof (*args));
	  args->skip_subroutines = skip_subroutines;
	  args->single_inst = single_inst;
	  args->count = count;
	  args->thread = thread;

	  add_intermediate_continuation (tp, step_1_continuation, args, xfree);
	}
@


1.223.2.5
log
@2008-12-22  Hui Zhu  <teawater@@gmail.com>

	* infcmd.c (focus_command): Fix memory leak.
@
text
@a221 2
  if (current_itset)
    xfree (current_itset);
@


1.222
log
@	* defs.h (add_inferior_continuation)
	(do_all_inferior_continuations)
	(discard_all_inferior_continuations): Declare.
	* utils.c (add_inferior_continuation)
	(do_all_inferior_continuations)
	(discard_all_inferior_continuations): New.
	* inferior.h (struct inferior) <continuations>: New field.
	* inferior.c (free_inferior): Discard all the inferior
	continuations.
	* inf-loop.c (inferior_event_handler): Do all current inferior
	continuations.
	* infcmd.c (attach_command): Register an inferior continuation
	instead of a thread continuation.
	* infrun.c (handle_inferior_event): If stop_soon is
	STOP_QUIETLY_NO_SIGSTOP, also expect a TARGET_SIGNAL_0.
@
text
@a88 2
static void detach_command (char *, int);

d2345 1
a2345 1
static void
@


1.221
log
@        Make attach_command exception-safe
        * infcmd.c (attach_command): Call async_enable_stdin
        if exception is thrown.
@
text
@d2323 2
a2324 3
	  add_continuation (inferior_thread (),
			    attach_command_continuation, a,
			    attach_command_continuation_free_args);
@


1.220
log
@	* remote.c (remote_start_remote): If the solib list is global,
	fetch libraries and insert breakpoints after connecting.
	* infcmd.c (post_create_inferior): If the solist is shared between
	inferiors, no need to refetch it on every new inferior.
	(detach_command): If the shared library list is shared between
	inferiors, then don't clear it on every inferior detach.
	* gdbarch.sh (has_global_solist): New.
	* i386-dicos-tdep.c (i386_dicos_init_abi): Set
	gdbarch_has_global_solist.
	* target.c (target_pre_inferior): If the shared library list is
	shared between inferiors, then don't clear it here, neither
	invalidate the memory regions or clear the target description.
	(target_detach): If the shared library list is shared between
	inferiors, then don't remove breakpoints from the target here.
	(target_disconnect): Comment.
	* solib.c (update_solib_list): Check for null_ptid.
	* breakpoint.c (insert_breakpoints, update_global_location_list):
	If the shared library list is shared between inferiors, insert
	breakpoints even if there's no execution.
	(breakpoint_init_inferior): If the shared library list is shared
	between inferiors, don't delete breakpoints or mark them
	uninserted here.

	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d2234 1
d2272 1
d2326 1
d2334 1
@


1.219
log
@	* infcmd.c (construct_inferior_arguments): Handle newlines
	specially.

testsuite/:
	* gdb.base/args.exp: Add tests for newlines.
@
text
@d401 3
a403 1
  if (exec_bfd)
d415 1
d417 2
d2349 5
a2353 1
  no_shared_libraries (NULL, from_tty);
@


1.218
log
@gdb
	* varobj.c (value_get_print_value): Include valprint.h.
	(value_get_print_value): Use get_formatted_print_options.
	* value.h (struct value_print_options): Declare.
	(value_print, val_print, common_val_print, val_print_string):
	Update.
	* value.c: Include valprint.h.
	(show_values): Use get_user_print_options.
	(show_convenience): Likewise.
	* valprint.h (prettyprint_arrays, prettyprint_structs): Don't
	declare.
	(struct value_print_options): New type.
	(vtblprint, unionprint, addressprint, objectprint, print_max,
	inspect_it, repeat_count_threshold, output_format,
	stop_print_at_null): Don't declare.
	(user_print_options, get_user_print_options,
	get_raw_print_options, get_formatted_print_options): Declare.
	(print_array_indexes_p): Don't declare.
	(maybe_print_array_index, val_print_array_elements): Update.
	* valprint.c (print_max): Remove.
	(user_print_options): New global.
	(get_user_print_options, get_raw_print_options,
	get_formatted_print_options): New functions.
	(print_array_indexes, repeat_count_threshold, stop_print_at_null,
	prettyprint_structs, prettyprint_arrays, unionprint,
	addressprint): Remove.
	(val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	(common_val_print): Likewise.
	(print_array_indexes_p): Remove.
	(maybe_print_array_index): Remove format, pretty arguments; add
	options.  Update.
	(val_print_array_elements): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(val_print_string): Add options argument.  Update.
	(_initialize_valprint): Use user_print_options.
	(output_format): Remove.
	(set_output_radix_1): Use user_print_options.
	* typeprint.c: Include valprint.h.
	(objectprint): Don't declare.
	(whatis_exp): Use get_user_print_options.
	* tui/tui-regs.c: Include valprint.h.
	(tui_register_format): Use get_formatted_print_options.
	* tracepoint.c: Include valprint.h.
	(addressprint): Don't declare.
	(trace_mention): Use get_user_print_options.
	(tracepoints_info): Likewise.
	* stack.c (print_frame_args): Use get_raw_print_options.
	(print_frame_info): Use get_user_print_options.
	(print_frame): Likewise.
	* sh64-tdep.c: Include valprint.h
	(sh64_do_register): Use get_formatted_print_options.
	* scm-valprint.c (scm_inferior_print): Remove format, deref_ref,
	pretty arguments; add options.
	(scm_scmlist_print): Likewise.  Update.
	(scm_scmval_print): Likewise.
	(scm_val_print): Likewise.
	(scm_value_print): Remove format, pretty arguments; add options.
	Update.
	* scm-lang.h (scm_value_print, scm_val_print, scm_scmval_print):
	Update.
	* scm-lang.c (scm_printstr): Add options argument.
	* python/python-value.c: Include valprint.h.
	(valpy_str): Use get_user_print_options.
	* printcmd.c: Include valprint.h.
	(addressprint): Don't declare.
	(inspect_it): Remove.
	(print_formatted): Remove format option; add options.  Update.
	(print_scalar_formatted): Likewise.
	(print_address_demangle): Use get_user_print_options.
	(do_examine): Use get_formatted_print_options.
	(print_command_1): Likewise.
	(output_command): Use get_formatted_print_options.
	(do_one_display): Likewise.
	(print_variable_value): Use get_user_print_options.
	* p-valprint.c (pascal_val_print): Remove format, deref_ref,
	pretty arguments; add options.  Update.
	(pascal_value_print): Remove format, pretty arguments; add
	options.  Update.
	(vtblprint, objectprint): Don't declare.
	(pascal_static_field_print): Remove.
	(pascal_object_print_value_fields): Remove format, pretty
	arguments; add options.  Update.
	(pascal_object_print_static_field): Likewise.
	(_initialize_pascal_valprint): Use user_print_options.  Update.
	* p-lang.h (pascal_val_print, pascal_value_print,
	pascal_printstr, pascal_object_print_value_fields): Update.
	(vtblprint, static_field_print): Don't declare.
	* p-lang.c (pascal_printstr): Add options argument.  Update.
	* objc-lang.c (objc_printstr): Add options argument.  Update.
	* mt-tdep.c: Include valprint.h.
	(mt_registers_info): Use get_raw_print_options.
	* mips-tdep.c: Include valprint.h.
	(mips_print_fp_register): Use get_formatted_print_options.
	(mips_print_register): Likewise.
	* mi/mi-main.c: Include valprint.h.
	(get_register): Use get_user_print_options.
	(mi_cmd_data_evaluate_expression): Likewise.
	(mi_cmd_data_read_memory): Use get_formatted_print_options.
	* mi/mi-cmd-stack.c: Include valprint.h.
	(list_args_or_locals): Use get_raw_print_options.
	* m2-valprint.c (print_function_pointer_address): Add addressprint
	argument.
	(m2_print_long_set): Remove format, pretty arguments.
	(m2_print_unbounded_array): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(print_unpacked_pointer): Remove format argument; add options.
	Now static.  Update.
	(print_variable_at_address): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(m2_print_array_contents): Likewise.
	(m2_val_print): Likewise.
	* m2-lang.h (m2_val_print): Update.
	* m2-lang.c (m2_printstr): Add options argument. Update.
	* language.h (struct value_print_options): Declare.
	(struct language_defn) <la_printstr>: Add options argument.
	<la_val_print>: Remove format, deref_ref, pretty argument; add
	options.
	<la_value_print>: Remove format, pretty arguments; add options.
	<la_print_array_index>: Likewise.
	(LA_VAL_PRINT, LA_VALUE_PRINT, LA_PRINT_STRING,
	LA_PRINT_ARRAY_INDEX): Update.
	(default_print_array_index): Update.
	* language.c (default_print_array_index): Remove format, pretty
	arguments; add options.  Update.
	(unk_lang_printstr): Add options argument.
	(unk_lang_val_print): Remove format, deref_ref, pretty arguments;
	add options.
	(unk_lang_value_print): Remove format, pretty arguments; add
	options.
	* jv-valprint.c (java_value_print): Remove format, pretty
	arguments; add options.  Update.
	(java_print_value_fields): Likewise.
	(java_val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	* jv-lang.h (java_val_print, java_value_print): Declare.
	* infcmd.c: Include valprint.h.
	(print_return_value): Use get_raw_print_options.
	(default_print_registers_info): Use get_user_print_options,
	get_formatted_print_options.
	(registers_info): Use get_formatted_print_options.
	* gdbtypes.h (struct value_print_options): Declare.
	(print_scalar_formatted): Update.
	* f-valprint.c (f77_print_array_1): Remove format, deref_ref,
	pretty arguments; add options.  Update.
	(f77_print_array): Likewise.
	(f_val_print): Likewise.
	* f-lang.h (f_val_print): Update.
	* f-lang.c (f_printstr): Add options argument.  Update.
	(c_value_print): Update declaration.
	* expprint.c: Include valprint.h.
	(print_subexp_standard): Use get_raw_print_options,
	get_user_print_options.
	* eval.c: Include valprint.h.
	(objectprint): Don't declare.
	(evaluate_subexp_standard): Use get_user_print_options.
	* cp-valprint.c (vtblprint, objectprint, static_field_print):
	Remove.
	(cp_print_value_fields): Remove format, pretty arguments; add
	options.  Update.
	(cp_print_value): Likewise.
	(cp_print_static_field): Likewise.
	(_initialize_cp_valprint): Use user_print_options.  Update.
	* c-valprint.c (print_function_pointer_address): Add addressprint
	argument.
	(c_val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	(c_value_print): Add options argument.  Update.
	* c-lang.h (c_val_print, c_value_print, c_printstr): Update.
	(vtblprint, static_field_print): Don't declare.
	(cp_print_value_fields): Update.
	* c-lang.c (c_printstr): Add options argument.  Update.
	* breakpoint.c: Include valprint.h.
	(addressprint): Don't declare.
	(watchpoint_value_print): Use get_user_print_options.
	(print_one_breakpoint_location): Likewise.
	(breakpoint_1, print_it_catch_fork, print_it_catch_vfork, mention,
	print_exception_catchpoint): Likewise.
	* auxv.c (fprint_target_auxv): Don't declare addressprint.  Use
	get_user_print_options.
	* ada-valprint.c (struct ada_val_print_args): Remove format,
	deref_ref, and pretty; add options.
	(print_optional_low_bound): Add options argument.
	(val_print_packed_array_elements): Remove format and pretty
	arguments; add options.  Update.
	(printstr): Add options argument.  Update.
	(ada_printstr): Likewise.
	(ada_val_print): Remove format, deref_ref, pretty arguments; add
	options argument.  Update.
	(ada_val_print_stub): Update.
	(ada_val_print_array): Remove format, deref_ref, pretty arguments;
	add options.  Update.
	(ada_val_print_1): Likewise.
	(print_variant_part): Likewise.
	(ada_value_print): Remove format, pretty arguments; add options.
	Update.
	(print_record): Likewise.
	(print_field_values): Likewise.
	* ada-lang.h (ada_val_print, ada_value_print, ada_printstr):
	Update.
	* ada-lang.c (ada_print_array_index): Add options argument; remove
	format and pretty arguments.
	(print_one_exception): Use get_user_print_options.
gdb/testsuite
	* gdb.base/exprs.exp (test_expr): Add enum formatting tests.
@
text
@d273 1
a273 1
	length += 2 * strlen (argv[i]) + 1 + 2 * (argv[i][0] == '\0');
d293 15
a307 3
		  if (strchr (special, *cp) != NULL)
		    *out++ = '\\';
		  *out++ = *cp;
@


1.217
log
@	* target.h (struct target_ops) <to_supports_multi_process>: New
	field.
	(target_supports_multi_process): New define.
	* target.c (update_current_target): Inherit and de_fault
	to_supports_multi_process.
	* infcmd.c (attach_command): Allow attaching to multiple processes
	if the target supports it.
	(detach_command): If the target claims there is still execution,
	don't clear the thread list.
	* remote.c (remote_supports_multi_process): New.
	(init_remote_ops): Register remote_supports_multi_process.
@
text
@d54 1
d1295 2
d1304 2
a1305 1
      value_print (value, stb->stream, 0, Val_no_prettyprint);
d1819 1
d1821 2
d1824 1
a1824 1
		     file, 0, 1, 0, Val_pretty_default, current_language);
d1840 2
d1843 2
d1846 2
a1847 1
		     file, 'x', 1, 0, Val_pretty_default, current_language);
d1852 2
d1856 1
a1856 1
			 file, 0, 1, 0, Val_pretty_default, current_language);
d1922 1
d1926 1
d1929 1
a1929 1
					'x', 0, gdb_stdout);
@


1.216
log
@	Remote non-stop mode support.

	* remote.c (pending_stop_reply): New.
	(struct remote_state) <non_stop_aware, support_vCont_t>: New
	fields.
	(remote_async_inferior_event_token)
	(remote_async_get_pending_events_token): New.
	(notice_new_inferiors): New, abstracted out from record_currthread.
	(record_currthread): Call it.
	(remote_threads_info): Default threads to running in non-stop
	mode.  In non-stop mode, only qfThreadInfo is supported.
	(remote_close): Discard all pending stop_replies.  Close the event
	sources.
	(set_stop_requested_callback): New.
	(remote_start_remote): Implement non-stop mode startup.  In
	all-stop, don't clear the thread list here.
	(remote_non_stop_feature): New.
	(remote_protocol_features): Add a "QNonStop" feature.
	(remote_open_1): Clear cached_wait_status and non_stop_aware.
	Clear the thread list here.
	(remote_detach_1): Discard pending stop replies of the process we
	detached from.
	(extended_remote_attach_1): Implement non-stop mode.
	(remote_vcont_probe): Recognize `vCont;t'.
	(remote_vcont_resume): Implement non-stop mode.
	(remote_resume): Don't set waiting_for_stop_reply in non-stop
	mode.
	(remote_stop_ns): New.
	(remote_stop): Rename to ...
	(remote_stop_as): ... this.  If we have a cached wait status,
	don't bother interrupting the remote.
	(remote_stop): Reimplement as wrapper around remote_stop_as and
	remote_stop_ns.
	(interrupt_query): Don't query in async mode.
	(struct cached_reg, cahed_reg_t): New.
	(struct stop_reply): New.
	(stop_reply_queue): New.
	(stop_reply_xmalloc, stop_reply_xfree)
	(discard_pending_stop_replies, do_stop_reply_xfree)
	(queued_stop_reply, push_stop_reply, peek_stop_reply)
	(remote_parse_stop_reply, remote_get_pending_stop_replies)
	(process_stop_reply): New.
	(remote_wait_ns): New.
	(remote_wait_as): Use remote_parse_stop_reply.  Invalidate the
	notion of current general thread is a process exit was reported.
	(remote_wait): Call remote_wait_ns in non-stop mode.
	(handle_notification): New.
	(putpkt_binary): Handle notifications.  Don't care for
	waiting_for_stop_reply in non-stop mode.
	(getpkt_sane): Rename to ...
	(getpkt_or_notif_sane_1): ... this.  Add `expecting_notif'
	argument.  Handle it.  Handle notifications.
	(getpkt_sane): Reimplement as wrapper around getpkt_or_notif_sane_1.
	(getpkt_or_notif_sane): New.
	(select_new_thread_callback): Check for exited state instead of
	comparing the ptid against minus_one_ptid.
	(extended_remote_create_inferior_1): Query the remote about the
	current thread.
	(remote_supports_non_stop): New.
	(init_remote_ops): Register it.
	(remote_async_inferior_event_handler): New.
	(remote_async_get_pending_events_handler): New.

	* infcmd.c (proceed_thread_callback): Comment.
	(proceed_after_attach_callback, proceed_after_attach): New.
	(attach_command_post_wait): In background attach, resume all
	threads, but only if they are unsignalled, and not explicitly
	stopped.  In foreground attach, in non-stop mode, make sure to
	stop all threads of the just attached to process.
	(attach_command): In non-stop mode: If doing a background attach,
	stop at least one thread.  If a foreground attach, stop all
	threads.
@
text
@d2204 4
a2207 1
  if (target_has_execution)
d2317 6
a2322 1
  init_thread_list ();
@


1.215
log
@gdb/
2008-10-23  Pedro Alves  <pedro@@codesourcery.com>

	* defs.h: Mention ptid_is_pid.
	* inferior.h (ptid_is_pid): Declare.
	* gdbthread.h (struct thread_info) <stop_requested>: New field.
	(set_stop_requested): Declare.
	* infcmd.c (interrupt_target_1): Call set_stop_requested.
	* infrun.c (clear_proceed_status): Clear stop_requested.
	(infrun_thread_stop_requested_callback,
	infrun_thread_stop_requested): New.
	(handle_inferior_event): If a TARGET_SIGNAL_TRAP is reported on a
	thread that had an explicit stop request, pretend we got a
	TARGET_SIGNAL_0.  Always stop if the thread had an explicit stop
	request.
	(print_stop_reason): In the SIGNAL_RECEIVED case, if we're not
	outputting to MI, and we got a TARGET_SIGNAL_0, print "# Stopped",
	instead of mentioning signal 0.
	(ptid_is_pid): New.
	* thread.c (set_stop_requested): New.

	* linux-nat.c (queued_waitpid): Rename to ...
	(queued_waitpid_1): ... this.  Add `peek' argument.  Handle it.
	(queued_waitpid): New, as wrapper to queued_waitpid_1.
	(push_waitpid): Push the SIGTRAP to the local event queue, to the
	kernel's.
	(send_sigint_callback): Delete.
	(linux_nat_stop_lwp): New.
	(linux_nat_stop): Use it.

gdb/doc/
2008-10-23  Pedro Alves  <pedro@@codesourcery.com>

	* observer.texi (thread_stop_requested): New.

gdb/testsuite/
2008-10-23  Pedro Alves  <pedro@@codesourcery.com>

	* lib/mi-support.exp (mi_expect_interrupt): Expect signal 0
	instead of SIGINT.
@
text
@d573 9
d2023 42
d2129 19
a2147 1
    proceed ((CORE_ADDR) -1, TARGET_SIGNAL_0, 0);
d2150 3
d2155 12
d2248 15
@


1.214
log
@	* infcmd.c (GO_USAGE): Delete.
	(go_command): Adjust.
@
text
@d2248 9
@


1.213
log
@2008-10-17  Michael Snyder  <msnyder@@vmware.com>
	Target interface for reverse debugging.
	* target.h (enum target_waitkind):
	Add new wait event, TARGET_WAITKIND_NO_HISTORY.
	(struct target_ops): New method to_can_execute_reverse.
	(target_can_execute_reverse): New macro.
	* target.c (update_current_target): Inherit to_can_execute_reverse.

	Remote interface for reverse debugging.
	* remote.c (remote_can_execute_reverse): New target method.
	(remote_resume): Check for reverse exec direction, and send
	appropriate command to target.
	(remote_wait_as): Check target response for NO_HISTORY status.
	Also check for empty reply (target doesn't understand "bs" or "bc).
	(remote_vcont_resume): Jump out if attempting reverse execution.

	Event handling interface for reverse debugging.
	* infrun.c (execution_direction): New state variable.
	(enum inferior_stop_reason): Add NO_HISTORY reason.
	(handle_inferior_event): Handle TARGET_WAITKIND_NO_HISTORY.
	Handle stepping over a function call in reverse.
	Handle stepping thru a line range in reverse.
	Handle setting a step-resume breakpoint in reverse.
	Handle stepping into a function in reverse.
	Handle stepping between line ranges in reverse.
	(print_stop_reason): Print reason for NO_HISTORY.
	(step_into_function): Rename to handle_step_into_function.
	(handle_step_into_function_backward): New function.
	(set_exec_direction_func, show_exec_direction_func): New funcs.
	(proceed): No need to singlestep over a breakpoint
	when resuming in reverse.

	* inferior.h (enum exec_direction_kind): New enum.
	(execution_direction): Export new execution state variable.

	* breakpoint.c (make_breakpoint_silent): New function.
	* breakpoint.h (make_breakpoint_silent): Export.
	* infcmd.c (finish_command): Check for reverse exec direction.
	(finish_backward): New function, handle finish cmd in reverse.

	User interface for reverse execution.
	* Makefile.in (reverse.c): New file.
	* reverse.c: New file.  User interface for reverse execution.
@
text
@a122 2
#define GO_USAGE   "Usage: go <location>\n"

d1056 1
a1056 1
    printf_filtered (GO_USAGE);
@


1.212
log
@	Make the stop_soon global be per-inferior instead.

	* infcmd.c (attach_command_post_wait): Adjust.
	(attach_command): Likewise.

	* inferior.h (stop_soon): Delete.
	(struct inferior): Add stop_soon member.

	* infrun.c (stop_soon): Delete.
	(clear_proceed_status, start_remote)
	(fetch_inferior_event, handle_inferior_event): Adjust.
	(signal_stop_state): Don't check stop_soon here.  Check in callers
	instead.
	(save_inferior_status, restore_inferior_status): Adjust.

	* linux-nat.c (linux_nat_resume, linux_nat_wait): Always pass
	signals to common code if starting up the inferior.

	* inferior.h (struct inferior_info): Added stop_soon member.
	* inferior.c (add_inferior) Clear stop_soon.

	* mips-tdep.c (heuristic_proc_start): Adjust.
	* nto-procfs.c (procfs_create_inferior): Adjust.
	* solib-irix.c (irix_solib_create_inferior_hook): Adjust.
	* solib-osf.c (osf_solib_create_inferior_hook): Adjust.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Adjust.
	* solib-svr4.c (svr4_solib_create_inferior_hook): Adjust.

	* win32-nat.c (do_initial_win32_stuff): Adjust.

	* alpha-tdep.c (alpha_heuristic_proc_start): Adjust.
@
text
@d1369 95
a1469 1
  struct symtab_and_line sal;
a1471 4
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  struct finish_command_continuation_args *cargs;
  struct thread_info *tp;
d1484 4
a1504 2
  tp = inferior_thread ();

a1506 7
  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);

  old_chain = make_cleanup_delete_breakpoint (breakpoint);

d1515 5
a1519 1
      printf_filtered (_("Run till exit from "));
d1523 4
a1526 15
  tp->proceed_to_finish = 1;	/* We want stop_registers, please...  */
  make_cleanup_restore_integer (&suppress_stop_observer);
  suppress_stop_observer = 1;
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);

  cargs = xmalloc (sizeof (*cargs));

  cargs->breakpoint = breakpoint;
  cargs->function = function;
  add_continuation (tp, finish_command_continuation, cargs,
		    finish_command_continuation_free_arg);

  discard_cleanups (old_chain);
  if (!target_can_async_p ())
    do_all_continuations ();
@


1.212.2.1
log
@2008-09-30  Michael Snyder  <msnyder@@vmware.com>

	* breakpoint.h (breakpoint_silence): Export.
	* breakpoint.c (breakpoint_silence): New function.
	* infcmd.c (finish_command): Check for reverse exec direction.
	(finish_backward): New function, handle finish cmd in reverse.
@
text
@a1371 2
static void finish_backwards (struct symbol *, struct thread_info *);

d1415 7
d1430 1
a1430 5
      if (target_get_execution_direction () == EXEC_REVERSE)
	printf_filtered ("Run back to call of ");
      else
	printf_filtered ("Run till exit from ");

a1433 15
  if (target_get_execution_direction () == EXEC_REVERSE)
    {
      /* Split off at this point.  */
      finish_backwards (function, tp);
      return;
    }

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), 
					 bp_finish);

  old_chain = make_cleanup_delete_breakpoint (breakpoint);

a1516 60

static void
finish_backwards (struct symbol *function, struct thread_info *tp)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;
  int back_up;

  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__,
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* TODO: Let's not worry about async until later.  */

  /* We don't need a return value.  */
  tp->proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point,
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != read_pc ())
    {
      /* Set breakpoint and continue.  */
      breakpoint =
	set_momentary_breakpoint (sal,
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns.  */
      back_up = bpstat_find_breakpoint (tp->stop_bpstat, breakpoint) != NULL;
      do_cleanups (old_chain);
    }
  else
    back_up = 1;
  if (back_up)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there --
	 we just need to back up by one more single-step.  */
      /* (Kludgy way of letting wait_for_inferior know...) */
      tp->step_range_start = tp->step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

@


1.212.2.2
log
@2008-10-05  Hui Zhu  <teawater@@gmail.com>

	* infcmd.c (kill_if_already_running): If record target is used,
	output special query.
	* infrun.c (use_displaced_stepping): Return false if record/replay.
	(proceed): Do not record state changes made by gdb in 'proceed'.
@
text
@a53 1
#include "record.h"
d429 2
a430 6
      if (from_tty)
	if (!query (RECORD_IS_USED ?
		    "The program being debugged has been started already,\n\
and is running in record/replay mode.  Do you want to abandon\n\
the recording and start the program from the beginning? " :
		    "The program being debugged has been started already.\n\
d432 1
a432 1
	  error (_("Program not restarted."));
@


1.212.2.3
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c: Minor function reordering.
@
text
@d748 1
d791 3
a793 1
	  tp->step_frame_id = get_frame_id (get_current_frame ());
d1156 2
a1183 1
  frame = get_current_frame ();
a1373 61
/* finish_backward -- helper function for finish_command.  */

static void
finish_backward (struct symbol *function, struct thread_info *tp)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;
  int back_up;

  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__,
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* TODO: Let's not worry about async until later.  */

  /* We don't need a return value.  */
  tp->proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point,
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != read_pc ())
    {
      /* Set breakpoint and continue.  */
      breakpoint =
	set_momentary_breakpoint (sal,
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns.  */
      back_up = bpstat_find_breakpoint (tp->stop_bpstat, breakpoint) != NULL;
      do_cleanups (old_chain);
    }
  else
    back_up = 1;
  if (back_up)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there --
	 we just need to back up by one more single-step.  */
      /* (Kludgy way of letting wait_for_inferior know...) */
      tp->step_range_start = tp->step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

d1377 2
d1441 1
a1441 1
      finish_backward (function, tp);
d1537 59
@


1.212.2.4
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c (finish_command): Use i18n macros.
@
text
@d1384 1
a1384 1
		    _("Finish: couldn't find function."));
d1486 1
a1486 1
	printf_filtered (_("Run back to call of "));
d1488 1
a1488 1
	printf_filtered (_("Run till exit from "));
@


1.212.2.5
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c (finish_command): Reject async in reverse.
@
text
@a1455 4
  /* Don't try to async in reverse.  */
  if (async_exec && target_get_execution_direction () == EXEC_REVERSE)
    error (_("Asynchronous 'finish' not supported in reverse."));

@


1.212.2.6
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* breakpoint.c (breakpoint_silence): Rename to make_breakpoint_silent.
	* breakpoint.h: Ditto.
	* infcmd.c (finish_backward): Call make_breakpoint_silent
	instead of breakpoint_silence.
@
text
@d1410 1
a1410 1
      make_breakpoint_silent (breakpoint);
@


1.212.2.7
log
@2008-10-07  Michael Snyder  <msnyder@@vmware.com>

	* target.h (to_set_exec_direction, to_get_exec_direction): Remove.
	(to_can_execute_reverse): New method.
	(enum exec_direction_kind): Move to inferior.h.
	* target.c (update_current_target): Inherit to_can_execute_reverse.
	Remove to_set_exec_direction, to_get_exec_direction.
	* inferior.h (enum exec_direction_kind): Move from target.h.

	* infrun.c (set_exec_direction_func): Move here from reverse.c.
	(show_exec_direction_func): Ditto.
	(proceed): Consult global execution_direction instead of
	target method.
	(handle_inferior_event): Ditto.

	* reverse.c (set_exec_direction_func): Move to infrun.c
	(show_exec_direction_func): Ditto.
	(exec_direction_default): Set infrun global variable.
	(exec_reverse_once): Consult infrun global direction variable.

	* infcmd.c (step_1): Consult infrun global direction variable.
	(step_once): Ditto.
	(until_next_command): Ditto.
	(finish_command): Ditto.

	* record.h (record_exec_direction): Delete.
	(RECORD_IS_REPLAY): Consult infrun global direction variable.

	* record.c: (record_wait_cleanups): Use infrun state variable.
	(record_wait): Ditto.
	(record_get_exec_direction, record_set_exec_direction): Remove.
	(record_can_execute_reverse): New target method.

	* remote.c (remote_resume): Use infrun state variable.
	(remote_get_exec_direction, remote_set_exec_direction): Remove.
	(remote_can_execute_reverse): New target method.
@
text
@d1457 1
a1457 1
  if (async_exec && execution_direction == EXEC_REVERSE)
d1489 1
a1489 1
      if (execution_direction == EXEC_REVERSE)
d1497 1
a1497 1
  if (execution_direction == EXEC_REVERSE)
@


1.212.2.8
log
@2008-10-09  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c (finish_forward): New function, abstracted from
	finish_command.
	(finish_command): Abstract out finish_forward for symmetry.
	* infrun.c (use_displaced_stepping): Add comment.
@
text
@d1373 1
a1373 1
finish_backward (struct symbol *function)
a1375 1
  struct thread_info *tp = inferior_thread ();
d1388 2
d1424 1
a1430 36
/* finish_forward -- helper function for finish_command.  */

static void
finish_forward (struct symbol *function, struct frame_info *frame)
{
  struct symtab_and_line sal;
  struct thread_info *tp = inferior_thread ();
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  struct finish_command_continuation_args *cargs;

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame),
                                         bp_finish);

  old_chain = make_cleanup_delete_breakpoint (breakpoint);

  tp->proceed_to_finish = 1;    /* We want stop_registers, please...  */
  make_cleanup_restore_integer (&suppress_stop_observer);
  suppress_stop_observer = 1;
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);

  cargs = xmalloc (sizeof (*cargs));

  cargs->breakpoint = breakpoint;
  cargs->function = function;
  add_continuation (tp, finish_command_continuation, cargs,
                    finish_command_continuation_free_arg);

  discard_cleanups (old_chain);
  if (!target_can_async_p ())
    do_all_continuations ();
}

d1437 1
d1440 4
d1477 2
d1498 29
a1526 3
    finish_backward (function);
  else
    finish_forward (function, frame);
@


1.212.2.9
log
@2008-10-19  Hui Zhu  <teawater@@gmail.com>

	* infcmd.c (kill_if_already_running): Remove process record
	warning code.
@
text
@d54 1
d430 6
a435 2
      if (from_tty
	  && !query ("The program being debugged has been started already.\n\
@


1.211
log
@	* fork-child.c (startup_inferior): Use target_wait and target_resume
	directly instead of calling wait_for_inferior / resume.

	* infcmd.c (kill_if_already_running): Do not call no_shared_libraries
	or init_wait_for_inferior.
	(run_command_1): Call init_wait_for_inferior.
@
text
@d1959 1
d1961 2
a1962 1
  stop_soon = NO_STOP_QUIETLY;
d2092 2
d2099 1
a2099 1
      stop_soon = STOP_QUIETLY_NO_SIGSTOP;
@


1.210
log
@	* inferior.h (context_switch_to): Delete.
	* infrun.c (context_switch): Don't save and load infrun state.
	(context_switch_to): Delete.

	* infcmd.c (proceed_thread_callback): Replace context_switch_to
	calls by switch_to_thread calls.

	* gdbthread.h (save_infrun_state, load_infrun_state): Delete.
	* thread.c (main_thread_state, main_thread_executing): Delete.
	(inferior_thread): Delete references to them.
	(add_thread_silent): Fix case where we're adding a thread with the
	same ptid as an exited thread.  Remove references to
	context-switching.
	(load_infrun_state, save_infrun_state): Delete.
	(thread_alive, is_thread_state, any_running, is_executing)
	(set_executing): Remove the special handling for targets that
	don't register any thread.
	(restore_current_thread, thread_apply_all_command)
	(do_captured_thread_select): Unconditionally call
	switch_to_thread.

	* mi/mi-main.c (mi_cmd_execute): Check for exited threads.
	Call switch_to_thread instead of context_switch_to.
@
text
@a433 2
      no_shared_libraries (NULL, from_tty);
      init_wait_for_inferior ();
d449 2
@


1.209
log
@	Remove global continuations in favour of a per-thread
	continuations.

	* gdbthread.h (struct thread_info): Add comments around
	continuations and intermediate_continuations.
	(save_infrun_state, load_infrun_state): Delete continuations and
	intermediate_continuations arguments.
	* infrun.c (fetch_inferior_event): Only call normal_stop if
	stop_soon is NO_STOP_QUIETLY.
	(context_switch): Don't context-switch the continuations.
	* thread.c (clear_thread_inferior_resources): Discard all
	continuations of the thread we're clearing.
	(save_infrun_state, load_infrun_state): Delete continuations and
	intermediate_continuations arguments, and the code referencing
	them.
	* utils.c: Include "gdbthread.h".
	(cmd_continuation, intermediate_continuation): Delete.
	(add_continuation): Add thread_info* argument.  Install the
	continuation on it.
	(restore_thread_cleanup): New.
	(do_all_continuations_ptid, do_all_continuations_thread_callback):
	New.
	(do_all_continuations): Reimplement.
	(discard_all_continuations_thread_callback,
	discard_all_continuations_thread): New.
	(discard_all_continuations): Reimplement.
	(add_intermediate_continuation): Add thread_info* argument.
	Install the continuation on it.
	(do_all_intermediate_continuations_thread_callback)
	(do_all_intermediate_continuations_thread): New.
	(do_all_intermediate_continuations): Reimplement.
	(discard_all_intermediate_continuations_thread_callback): New.
	(discard_all_intermediate_continuations_thread): New.
	(discard_all_intermediate_continuations): Reimplement.

	* breakpoint.c (until_break_command): Install the continuation on
	the current thread.

	* defs.h (cmd_continuation, intermediate_continuation): Delete.
	(struct thread_info): Forward declare.
	(add_continuation, add_intermediate_continuation): Add
	thread_info* argument.
	(do_all_continuations_thread, discard_all_continuations_thread)
	(do_all_intermediate_continuations_thread)
	(discard_all_intermediate_continuations_thread): Declare.
	* inf-loop.c (inferior_event_handler): In non-stop only run
	continuations on the thread that stopped.  In all-stop, run
	continuations on all threads.
	* infcmd.c (step_once, finish_command): Adjust.
@
text
@d578 1
a578 1
  context_switch_to (thread->ptid);
@


1.208
log
@	Remove the global stop_step in favour of a per-thread
	stop_step.

	* inferior.h (stop_step): Delete.

	* gdbthread.h (struct thread_info): Add comments to stop_step.
	(save_infrun_state, load_infrun_state): Remove stop_step argument.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	stop_step argument, and references to it.

	* infrun.c (clear_proceed_status): Clear stop_step.
	(fetch_inferior_event): Adjust.
	(context_switch): Don't context-switch stop_step.
	(handle_inferior_event): Adjust.
	(normal_stop): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* infcmd.c (stop_step): Delete.
	(step_1, step_1_continuation, step_once, until_next_command):
	Adjust.
@
text
@d950 1
a950 1
      inferior_thread ()->step_multi = (count > 1);
d958 1
a958 1
      add_intermediate_continuation (step_1_continuation, args, xfree);
d1443 1
a1443 1
  add_continuation (finish_command_continuation, cargs,
d2106 2
a2107 1
	  add_continuation (attach_command_continuation, a,
@


1.207
log
@	Remove the global step_multi in favour of a per-thread
	step_multi.

	* inferior.h (step_multi): Delete.
	* gdbthread.h (struct thread_info): Add comments around
	step_multi.
	(save_infrun_state, load_infrun_state): Remove step_multi
	parameter.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	step_multi argument, and references to it.
	* infcmd.c (step_multi): Delete.
	(step_1): Adjust.
	(step_1_continuation, until_next_command): Adjust.
	* infrun.c (fetch_inferior_event): Adjust.
	(context_switch): Don't context-switch step_multi.
	(print_stop_reason, normal_stop): Adjust.
@
text
@a158 4
/* Nonzero if stopped due to a step command.  */

int stop_step;

d825 2
a826 1
	  if (!stop_step)
d869 1
a869 1
      if (tp->step_multi && stop_step)
d1486 1
a1486 1
  if (stop_step)
@


1.206
log
@	Remove the global stop_signal in favour of a per-thread
	stop_signal.

	* inferior.h (stop_signal): Delete.
	* gdbthread.h (save_infrun_state, load_infrun_state): Remove
	stop_signal argument.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	stop_signal argument.  Don't reference it.

	* infcmd.c (stop_signal): Delete.
	(program_info): Adjust.
	* infrun.c (resume): Clear stop_signal.
	(proceed): Adjust.  Pass the last stop_signal to the thread we're
	resuming.
	(context_switch): Don't context-switch stop_signal.
	(handle_inferior_event, keep_going): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* fbsd-nat.c: Include "gdbthread.h".
	(find_signalled_thread, find_stop_signal): New.
	(fbsd_make_corefile_notes): Use it.
	* fork-child.c (startup_inferior): Adjust.

	* linux-nat.c (get_pending_status): Adjust.
	(linux_nat_do_thread_registers): Adjust.
	(find_signalled_thread, find_stop_signal): New.
	(linux_nat_do_thread_registers): Add stop_signal parameter.
	(struct linux_nat_corefile_thread_data): Add stop_signal member.
	(linux_nat_corefile_thread_callback): Pass stop_signal.
	(linux_nat_do_registers): Delete.
	(linux_nat_make_corefile_notes): Use find_stop_signal.  Assume
	there's always a thread.

	* procfs.c (find_signalled_thread, find_stop_signal): New.
	(find_stop_signal): New.
	(procfs_do_thread_registers): Add stop_signal parameter.
	(struct procfs_corefile_thread_data): Add stop_signal member.
	(procfs_corefile_thread_callback): Pass args->stop_signal.
	(procfs_make_note_section): Find the last stop_signal.

	* solib-irix.c: Include gdbthread.h.
	(irix_solib_create_inferior_hook): Adjust.
	* solib-osf.c: Include gdbthread.h.
	(osf_solib_create_inferior_hook): Adjust.
	* solib-sunos.c: Include gdbthread.h.
	(sunos_solib_create_inferior_hook): Adjust.
	* solib-svr4.c: Include gdbthread.h.
	(svr4_solib_create_inferior_hook): Adjust.

	* win32-nat.c (do_initial_win32_stuff): Adjust.
@
text
@a171 6
/* If stepping, nonzero means step count is > 1
   so don't print frame next time inferior stops
   if it stops due to stepping.  */

int step_multi;

d826 1
a826 1
	  step_multi = (count > 1);
d867 1
a867 1
  if (!step_multi || !stop_step)
d869 11
a879 5
      /* If we stopped for some reason that is not stepping there are
	 no further steps to make.  Cleanup.  */
      if (!a->single_inst || a->skip_subroutines)
	delete_longjmp_breakpoint (a->thread);
      step_multi = 0;
d881 5
a885 2
  else
    step_once (a->skip_subroutines, a->single_inst, a->count - 1, a->thread);
d953 1
a953 1
      step_multi = (count > 1);
d1184 1
a1184 1
  step_multi = 0;		/* Only one call to proceed */
@


1.205
log
@	* gdbthread.h (struct thread_info): Add comments around
	proceed_to_finish.
	(save_infrun_state, load_infrun_state): Remove proceed_to_finish
	argument.
	* thread.c (load_infrun_state, save_infrun_state): Delete
	proceed_to_finish argument and references to it.

	* infcall.c (call_function_by_hand): Adjust.
	* infcmd.c (finish_command): Adjust.
	* infrun.c (proceed_to_finish): Delete.
	(clear_proceed_status): Adjust.
	(context_switch): Don't context-switch proceed_to_finish.
	(normal_stop, save_inferior_status, restore_inferior_status):
	Adjust.
@
text
@a149 4
/* Last signal that the inferior received (why it stopped).  */

enum target_signal stop_signal;

d1504 1
a1504 1
  else if (stop_signal != TARGET_SIGNAL_0)
d1507 2
a1508 2
		       target_signal_to_name (stop_signal),
		       target_signal_to_string (stop_signal));
@


1.204
log
@	* inferior.h (stop_bpstat): Delete.

	* breakpoint.h (bpstat_do_actions): Remove bpstat* argument.

	* breakpoint.c (bpstat_do_actions): Rename to ...
	(bpstat_do_actions_1): ... this.  Make static.  Change return type
	to int.  Return true if a breakpoint proceeded.
	(bpstat_do_actions): New, as wrapper around bpstat_do_actions_1.
	(delete_breakpoint): Don't reference the global stop_bpstat; it's
	gone.

	* gdbthread.h (struct thread_info): Add stop_bpstat.
	(save_infrun_state, load_infrun_state): Remove stop_bpstat
	argument.
	* thread.c (load_infrun_state, save_infrun_state): Remove
	stop_bpstat argument, and the code referencing it.

	* infcall.c: Include "gdbthread.h".
	(call_function_by_hand): Adjust.
	* exceptions.c: Include "gdbthread.h".
	(throw_exception): Adjust.
	* infcmd.c (stop_bpstat): Delete.
	(continue_command): In all-stop, set the ignore count on the
	thread that reported the stop.  In non-stop, set it on the current
	thread.
	(finish_command_continuation): Adjust.
	(program_info): Adjust.
	* infrun.c (clear_proceed_status): Adjust.
	(context_switch): Don't context-switch stop_bpstat.
	(handle_inferior_event): Adjust.
	(normal_stop): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* inf-loop.c (inferior_event_handler): Remove parameter to
	bpstat_do_actions call.
	* top.c (command_loop): Remove parameter to bpstat_do_actions
	call.  Call it unconditionally.
	* event-top.c (command_handler): Ditto.
	* python/python.c (execute_gdb_command): Ditto.
@
text
@d1385 1
d1415 2
d1438 1
a1438 1
  proceed_to_finish = 1;	/* We want stop_registers, please...  */
@


1.203
log
@	* inferior.h (step_over_calls): Delete.

	* gdbthread.h (save_infrun_state, load_infrun_state): Remove
	step_over_calls argument.
	* thread.c (save_infrun_state, load_infrun_state): Remove
	step_over_calls argument.  Adjust.

	* infcmd.c (step_over_calls): Delete.
	(step_1): Adjust.
	* infrun.c (clear_proceed_status): Adjust.
	(context_switch): Don't context-switch step_over_calls.
	(handle_inferior_event, save_inferior_status)
	(restore_inferior_status): Adjust.
@
text
@a157 4
/* Chain containing status of breakpoint(s) that we have stopped at.  */

bpstat stop_bpstat;

d672 1
a672 1
      bpstat bs = stop_bpstat;
d675 14
d1332 8
a1339 1
  if (bpstat_find_breakpoint (stop_bpstat, a->breakpoint) != NULL
d1359 1
a1359 1
  observer_notify_normal_stop (stop_bpstat);
d1456 4
a1459 3
  bpstat bs = stop_bpstat;
  int num;
  int stat = bpstat_num (&bs, &num);
d1467 17
@


1.202
log
@	Remove context switching in favour of accessing thread_info fields
	directly.

	* infrun.c (stepping_over_breakpoint, step_resume_breakpoint):
	Delete.
	(struct thread_stepping_state): Delete.
	(gtss, tss): Delete.
	(follow_inferior_reset_breakpoints, follow_exec)
	(resume, clear_proceed_status): Adjust.
	(prev_pc): Delete.
	(proceed, start_remote, init_wait_for_inferior): Adjust.
	(struct execution_control_state): Add event_thread member.
	(delete_step_resume_breakpoint_callback)
	(delete_step_thread_step_resume_breakpoint)
	(delete_step_thread_step_resume_breakpoint_cleanup)
	(delete_step_thread_step_resume_breakpoint): New.
	(wait_for_inferior, init_execution_control_state): Use
	delete_step_thread_step_resume_breakpoint_cleanup.
	(wait_for_inferior): Set the event_thread.
	(fetch_inferior_event): Ditto.  Delete the step-resume breakpoint
	with delete_step_thread_step_resume_breakpoint.
	(init_thread_stepping_state): Change parameter type to
	thread_info.  Adjust.
	(context_switch): Don't context switch prev_pc,
	stepping_over_breakpoint, step_resume_breakpoint,
	step_range_start, step_range_end, step_frame_id,
	tss->stepping_over_breakpoint,
	tss->stepping_through_solib_after_catch,
	tss->stepping_through_solib_catchpoints, tss->current_line, or
	tss->current_symtab.
	(adjust_pc_after_break, handle_inferior_event)
	(currently_stepping, step_into_function)
	(insert_step_resume_breakpoint_at_sal)
	(insert_longjmp_resume_breakpoint, keep_going): Adjust.
	(clear_stepping_state): New.
	(normal_stop): Adjust.
	(save_inferior_status, restore_inferior_status): Adjust.

	* gdbthread.h (struct thread_info): Comments describing the
	members moved here.  Add step_after_step_resume_breakpoint.
	(delete_step_resume_breakpoint): Add thread_info argument.
	(save_infrun_state, load_infrun_state): Remove prev_pc,
	trap_expected, step_resume_breakpoint, step_range_start,
	step_range_end, step_frame_id, another_trap,
	stepping_through_solib_after_catch,
	stepping_through_solib_catchpoints, current_line and
	current_symtab function arguments.
	(inferior_thread): Declare.

	* thread.c (inferior_thread): New.
	(delete_step_resume_breakpoint): Add a thread_info parameter and
	rewrite.
	(load_infrun_state, save_infrun_state): Remove prev_pc,
	trap_expected, step_resume_breakpoint, step_range_start,
	step_range_end, step_frame_id, stepping_over_breakpoint,
	stepping_through_solib_after_catch,
	stepping_through_solib_catchpoints, current_line and
	current_symtab args.  Remove code referencing them.

	* infcmd.c (step_range_start, step_range_end, step_frame_id):
	Delete.
	(step_1, step_once, until_next_command): Adjust.

	* inferior.h (step_range_start, step_range_end, step_frame_id):
	Delete.

	* linux-nat.c (linux_child_follow_fork): If following the child,
	move the step state to it.  Adjust.
	* inf-ptrace.c (inf_ptrace_follow_fork): Ditto.
	* inf-ttrace.c (inf_ttrace_follow_fork): Ditto.
@
text
@a179 2
enum step_over_calls_kind step_over_calls;

d820 1
a820 1
		step_over_calls = STEP_OVER_NONE;
d824 1
a824 1
	    step_over_calls = STEP_OVER_ALL;
d938 1
a938 1
	    step_over_calls = STEP_OVER_NONE;
d942 1
a942 1
	step_over_calls = STEP_OVER_ALL;
d1172 1
a1172 1
  step_over_calls = STEP_OVER_ALL;
@


1.201
log
@	* breakpoint.h (struct bp_location): Change type of section
	member to "struct obj_section *".
	* tracepoint.h (struct tracepoint): Likewise.
	* symtab.h (struct general_symbol_info): Replace bfd_section
	member with obj_section.
	(struct symtab_and_line): Change type of section member to
	"struct obj_section *".
	(SYMBOL_BFD_SECTION): Remove macro, replace by ...
	(SYMBOL_OBJ_SECTION): ... this.

	* minsym.c (prim_record_minimal_symbol_and_info): Record symbol
	section as obj_section instead of bfd_section.

	* ada-lang.c (ada_decode_symbol): Use gsymbol->obj_section
	directly instead of looking of obj_section from bfd_section.

	* objfiles.h (find_pc_sect_section): Remove.
	* objfiles.c (find_pc_sect_section): Remove.
	(find_pc_section): Inline find_pc_sect_section code.

	* symfile.h (find_pc_overlay): Return struct obj_section *.
	(find_pc_mapped_section): Likewise.
	(section_is_overlay, section_is_mapped): Change type of section
	argument to struct obj_section *.
	(pc_in_mapped_range, pc_in_unmapped_range): Likewise.
	(overlay_mapped_address, overlay_unmapped_address): Likewise.
	(symbol_overlayed_address): Likewise.
	* symtab.h (symbol_overlayed_address): Likewise.
	* symfile.c (overlay_is_mapped): Remove.
	(section_is_mapped): Inline overlay_is_mapped code.  Update.
	(overlay_invalidate_all): Update.
	(section_is_overlay): Change section argument to type
	"struct obj_section *".  Use bfd_ methods.
	(pc_in_unmapped_range): Likewise.  Handle relocated sections.
	(pc_in_mapped_range): Likewise.  Handle relocated sections.
	(sections_overlap): Likewise.
	(overlay_unmapped_address): Likewise.
	(overlay_mapped_address): Likewise.
	(symbol_overlayed_address): Likewise.
	(find_pc_overlay): Return struct obj_section *.
	(find_pc_mapped_section): Likewise.
	(list_overlays_command): Update.
	(map_overlay_command, unmap_overlay_command): Update.
	(simple_overlay_update): Update.

	* block.h (blockvector_for_pc_sect): Change section argument
	to type "struct obj_section *".
	(block_for_pc_sect): Likewise.
	* block.c (blockvector_for_pc_sect): Change section argument
	to type "struct obj_section *".
	(block_for_pc_sect): Likewise.
	* symtab.h (find_pc_sect_function, find_pc_sect_psymtab,
	find_pc_sect_symtab, find_pc_sect_psymbol, find_pc_sect_line,
	lookup_minimal_symbol_by_pc_section, find_function_start_pc): Likewise.
	(matching_bfd_sections): Rename to ...
	(matching_obj_sections): ... this.  Update argument types.
	* blockframe.c (find_pc_sect_function): Likewise.
	* breakpoint.c (describe_other_breakpoints): Likewise.
	(breakpoint_has_pc, check_duplicates_for): Likewise.
	* minsyms.c (lookup_minimal_symbol_by_pc_section_1): Likewise.
	(lookup_minimal_symbol_by_pc_section): Likewise.
	* symtab.c (find_pc_sect_psymtab_closer): Likewise.
	(find_pc_sect_psymtab, find_pc_sect_psymbol, find_pc_sect_symtab,
	find_pc_sect_line, find_function_start_pc): Likewise.
	(matching_bfd_sections): Rename to ...
	(matching_obj_sections): ... this.  Update argument types.

	* blockframe.c (find_pc_partial_function): Update to section
	type changes.  No longer call find_pc_sect_section.
	(cache_pc_function_section): Change to type "struct obj_section *".
	* breakpoint.c (resolve_sal_pc): Update to section type changes.
	* exec.c (xfer_memory): Likewise.
	* findvar.c (read_var_value): Likewise.
	* infcmd.c (jump_command): Likewise.
	* linespec.c (minsym_found): Likewise.
	* maint.c (maintenance_translate_address): Likewise.
	* minsyms.c (lookup_minimal_symbol_by_pc_section_1): Likewise.
	(lookup_solib_trampoline_symbol_by_pc): Likewise.
	* parse.c (write_exp_msymbol): Likewise.
	* printcmd.c (build_address_symbolic): Likewise.
	(address_info, sym_info): Likewise.
	* symmisc.c (dump_msymbols, print_symbol): Likewise.
	* symtab.c (fixup_section): Likewise.
	(fixup_symbol_section, fixup_psymbol_section): Likewise.
	(find_pc_line, find_function_start_sal): Likewise.
	* target.c (memory_xfer_partial): Likewise.
	* hppa-hpux-tdep.c (hppa64_hpux_in_solib_call_trampoline): Likewise.
	* spu-tdep.c (spu_overlay_update): Likewise.
@
text
@a179 13
/* Range to single step within.
   If this is nonzero, respond to a single-step signal
   by continuing to step if the pc is in this range.  */

CORE_ADDR step_range_start;	/* Inclusive */
CORE_ADDR step_range_end;	/* Exclusive */

/* Stack frame address as of when stepping command was issued.
   This is how we know when we step into a subroutine call,
   and how to set the frame for the breakpoint used to step out.  */

struct frame_id step_frame_id;

d790 1
d794 1
a794 3
	  if (!frame)		/* Avoid coredump here.  Why tho? */
	    error (_("No current frame"));
	  step_frame_id = get_frame_id (frame);
d798 3
a800 2
	      find_pc_line_pc_range (stop_pc, &step_range_start, &step_range_end);
	      if (step_range_end == 0)
d803 3
a805 2
		  if (find_pc_partial_function (stop_pc, &name, &step_range_start,
						&step_range_end) == 0)
d817 1
a817 1
	      step_range_start = step_range_end = 1;
d896 5
d906 1
a906 1
      step_frame_id = get_frame_id (frame);
d910 2
a911 1
	  find_pc_line_pc_range (stop_pc, &step_range_start, &step_range_end);
d914 1
a914 1
	  if (step_range_end == 0 && step_stop_if_no_debug)
d916 1
a916 1
	      step_range_start = step_range_end = 1;
d918 1
a918 1
	  else if (step_range_end == 0)
d921 3
a923 2
	      if (find_pc_partial_function (stop_pc, &name, &step_range_start,
					    &step_range_end) == 0)
d935 1
a935 1
	  step_range_start = step_range_end = 1;
d1143 1
d1163 2
a1164 2
      step_range_start = SYMBOL_VALUE_ADDRESS (msymbol);
      step_range_end = pc;
d1170 2
a1171 2
      step_range_start = BLOCK_START (SYMBOL_BLOCK_VALUE (func));
      step_range_end = sal.end;
d1175 1
a1175 1
  step_frame_id = get_frame_id (frame);
@


1.200
log
@	* frame.h (frame_map_regnum_to_name): Remove prototype.
	(frame_map_name_to_regnum): Remove prototype.
	* frame.c (frame_map_regnum_to_name): Remove.
	(frame_map_name_to_regnum): Remove.
	(frame_unwind_register_value): Use user_reg_map_regnum_to_name
	instead of frame_map_regnum_to_name.
	* ax-gdb.c: Include "user-regs.h".
	(gen_expr): Use user_reg_map_name_to_regnum instead of
	frame_map_name_to_regnum.
	* eval.c:  Include "user-regs.h".
	(evaluate_subexp_standard): Use user_reg_map_name_to_regnum
	instead of frame_map_name_to_regnum.
	* infcmd.c (registers_info): Likewise.
	* parse.c: Include "user-regs.h".
	(write_dollar_variable): Use user_reg_map_name_to_regnum
	instead of frame_map_name_to_regnum.
	* tracepoint.c: Include "user-regs.h".
	(encode_actions): Use user_reg_map_name_to_regnum
	instead of frame_map_name_to_regnum.
	* valops.c: Include "user-regs.h".
	(value_fetch_lazy): Use user_reg_map_regnum_to_name instead
	of frame_map_regnum_to_name.
@
text
@d1021 2
a1022 2
      if (section_is_overlay (SYMBOL_BFD_SECTION (sfn)) &&
	  !section_is_mapped (SYMBOL_BFD_SECTION (sfn)))
@


1.199
log
@	Make sure target supports non-stop.
        * infcmd.c (run_command_1, attach_command): If non-stop mode
        is requested, verify the target supports it.
        * linux-nat.c (linux_nat_supports_non_stop): New.
        (linux_nat_add_target): Register the above.
        * target.c (find_default_supports_non_stop)
        (target_supports_non_stop): New.
        (init_dummy_target): Register find_default_supports_non_stop.
        * target.h (struct target_ops): New field to_supports_non_stop.
        (target_supports_non_stop): New.
@
text
@d1786 1
a1786 1
	int regnum = frame_map_name_to_regnum (frame, start, end - start);
@


1.198
log
@	* infcmd.c (continue_1): Add an ERROR_NO_INFERIOR call.
@
text
@d506 3
d2026 3
@


1.197
log
@	* target.c: Include "solib.h".
	(target_pre_inferior): Call no_shared_libraries.
	* infcmd.c (run_command_1): Do not call objfile_purge_solibs
	or clear_solib.
	(attach_command): Do not call clear_solib.
@
text
@d617 2
@


1.196
log
@	Kill cmd_async_ok.
        * cli/cli-decode.h (CMD_ASYNC_OK, set_cmd_async_ok)
        (get_cmd_async_ok): Remove.
        * cli/cli-decode.c (set_cmd_async_ok, get_cmd_async_ok): Remove.
        * cli/cli-cmds.c (init_cli_cmds): Don't use set_cmd_async_ok.
        * infcmd.c (_initialize_infcmd): Likewise.
        * thread.c (_initialize_thread): Likewise.
@
text
@a489 5
  /* Purge old solib objfiles. */
  objfile_purge_solibs ();

  clear_solib ();

a2020 18
  /* Clear out solib state. Otherwise the solib state of the previous
     inferior might have survived and is entirely wrong for the new
     target.  This has been observed on GNU/Linux using glibc 2.3. How
     to reproduce:

     bash$ ./foo&
     [1] 4711
     bash$ ./foo&
     [1] 4712
     bash$ gdb ./foo
     [...]
     (gdb) attach 4711
     (gdb) detach
     (gdb) attach 4712
     Cannot access memory at address 0xdeadbeef
  */
  clear_solib ();

@


1.195
log
@2008-07-12  Pedro Alves  <pedro@@codesourcery.com>

	Rewrite continuations internals on top of cleanups and plug
	continuation arguments leaks.

	* defs.h (struct continuation): Make it opaque.
	(add_continuation, add_intermediate_continuation): Drop the int
	argument of the continuation hook argument.  Add
	continuation_free_args argument.
	(do_all_continuations, do_all_intermediate_continuations): Drop
	the error_p argument.

	* utils.c (add_continuation): Drop the int argument of the
	continuation hook argument.  Add continuation_free_args argument.
	Reimplement on top of cleanups.
	(do_all_continuations): Drop error argument.  Reimplement on top
	of cleanups.
	(discard_all_continuations): Reimplement on top of cleanups.
	(add_intermediate_continuation): Drop the int argument of the
	continuation hook argument.  Add continuation_free_args argument.
	Reimplement on top of cleanups.
	(do_all_intermediate_continuations): Drop error argument.
	Reimplement on top of cleanups.
	(discard_all_intermediate_continuations): Reimplement on top of
	cleanups.

	* breakpoint.c (until_break_command_continuation): Drop error
	argument.  Add xfree as continuation argument deleter.

	* inf-loop.c (inferior_event_handler): On error, discard all
	continuations.  Adjust to new do_all_intermediate_continuations
	and do_all_continuations interfaces.

	* infcmd.c (step_1_continuation): Drop error_p argument.  Adjust.
	Pass xfree as continuation argument deleter.
	(finish_command_continuation): Drop error_p argument.  Adjust.
	(finish_command_continuation_free_arg): New.
	(finish_command): Pass finish_command_continuation_free_arg as
	continuation argument deleter.  Adjust to new do_all_continuations
	interfaces.
	(attach_command_continuation): Drop error_p argument.
	(attach_command_continuation_free_args): New.
	(attach_command): Pass attach_command_continuation_free_args as
	continuation argument deleter.

	* interps.c (interp_set): Adjust to new do_all_continuations
	interfaces.

	* event-top.c (stdin_event_handler): In error, also discard the
	intermediate continuations.
@
text
@a2392 1
  set_cmd_async_ok (c);
a2417 1
  set_cmd_async_ok (c);
@


1.195.2.1
log
@2008-07-17  Michael Snyder  <msnyder@@specifix.com>
	2006-05-02  Michael Snyder  <msnyder@@redhat.com>

	* Target interface for reverse execution.
	* target.h (enum target_waitkind):
	Add new wait event, TARGET_WAITKIND_NO_HISTORY.
	(enum exec_direction_kind): New enum.
	(struct target_ops): New methods to_set_execdir, to_get_execdir.
	* target.c (target_get_execdir): New generic method.
	(target_set_execdir): Ditto.
	* remote.c (remote_get_execdir, remote_set_execdir): New methods.
	(remote_vcont_resume): Jump out if attempting reverse execution.
	(remote_resume): Check for reverse exec direction, and send
	appropriate command to target.
	(remote_wait): Check target response for NO_HISTORY status.
	Also check for empty reply (target doesn't understand "bs" or "bc).
	(_initialize_remote): Add new methods to remote target vector.

	* breakpoint.h (breakpoint_silence): Export.
	* breakpoint.c (breakpoint_silence): New function.
	* infcmd.c (finish_command): Check for reverse exec direction.
	(finish_backward): New function, handle finish cmd in reverse.
	* infrun.c (enum inferior_stop_reason): Add NO_HISTORY reason.
	(handle_inferior_event): Handle TARGET_WAITKIND_NO_HISTORY.
	Handle stepping over a function call in reverse.
	Handle stepping thru a line range in reverse.
	Handle setting a step-resume breakpoint in reverse.
	Handle stepping into a function in reverse.
	Handle stepping between line ranges in reverse.
	(print_stop_reason): Print reason for NO_HISTORY.

	2006-03-31  Michael Snyder  <msnyder@@redhat.com>
	User interface for reverse execution.
	* Makefile.in (reverse.c): New file.
	* reverse.c: New file.  User interface for reverse execution.

	2007-04-18  Daniel Jacobowitz  <dan@@codesourcery.com>

	* infcmd.c (finish_backwards): Correct check for whether to back
	up after finishing.

	* arm-tdep.c (arm_scan_epilogue): New.
	(arm_make_prologue_cache): Use it.
	(arm_epilogue_unwind_sniffer): New.
	(arm_gdbarch_init): Register it.
@
text
@a1364 2
static void finish_backwards (struct symbol *);

d1405 7
d1420 1
a1420 5
      if (target_get_execution_direction () == EXEC_REVERSE)
	printf_filtered ("Run back to call of ");
      else
	printf_filtered ("Run till exit from ");

a1423 14
  if (target_get_execution_direction () == EXEC_REVERSE)
    {
      /* Split off at this point.  */
      finish_backwards (function);
      return;
    }

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);

  old_chain = make_cleanup_delete_breakpoint (breakpoint);

a1488 60

static void
finish_backwards (struct symbol *function)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;
  int back_up;

  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__,
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* Let's cheat and not worry about async until later.  */

  /* We don't need a return value.  */
  proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point,
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != read_pc ())
    {
      /* Set breakpoint and continue.  */
      breakpoint =
	set_momentary_breakpoint (sal,
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns.  */
      back_up = bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL;
      do_cleanups (old_chain);
    }
  else
    back_up = 1;
  if (back_up)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there --
	 we just need to back up by one more single-step.  */
      /* (Kludgy way of letting wait_for_inferior know...) */
      step_range_start = step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

@


1.195.2.2
log
@Add record target to GDB.
@
text
@a53 1
#include "record.h"
a192 6
/* Prev stack frame address of "step_frame_id".
   When GDB is in the reverse debug mode, it is used to make sure if inferior return to
   the prev function. */

struct frame_id step_prev_frame_id;

d462 2
a463 11
      if (RECORD_IS_USED)
        {
          if (from_tty
	      && !query ("The program being debugged and target record have been started already.\n\
Stop target record and start the program being debugged from the beginning? "))
	    error (_("Program not restarted."));
        }
      else
        {
          if (from_tty
	      && !query ("The program being debugged has been started already.\n\
d465 1
a465 2
	    error (_("Program not restarted."));
        }
a809 13
	  if (target_get_execution_direction () == EXEC_REVERSE)
	    {
	      frame = get_prev_frame (frame);
	      if (frame)
	        {
		  step_prev_frame_id = get_frame_id (frame);
	        }
	      else
	        {
		  step_prev_frame_id = null_frame_id;
	        }
	    }

a914 13
      if (target_get_execution_direction () == EXEC_REVERSE)
        {
          frame = get_prev_frame (frame);
          if (frame)
            {
              step_prev_frame_id = get_frame_id (frame);
            }
          else
            {
              step_prev_frame_id = null_frame_id;
            }
        }

a1180 13
  if (target_get_execution_direction () == EXEC_REVERSE)
    {
      frame = get_prev_frame (frame);
      if (frame)
        {
          step_prev_frame_id = get_frame_id (frame);
        }
      else
        {
	  step_prev_frame_id = null_frame_id;
        }
    }

@


1.195.2.3
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c: Minor function reordering.
@
text
@a1417 61
/* finish_backward -- helper function for finish_command.  */

static void
finish_backward (struct symbol *function)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;
  int back_up;

  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__,
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* Let's cheat and not worry about async until later.  */

  /* We don't need a return value.  */
  proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point,
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != read_pc ())
    {
      /* Set breakpoint and continue.  */
      breakpoint =
	set_momentary_breakpoint (sal,
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns.  */
      back_up = bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL;
      do_cleanups (old_chain);
    }
  else
    back_up = 1;
  if (back_up)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there --
	 we just need to back up by one more single-step.  */
      /* (Kludgy way of letting wait_for_inferior know...) */
      step_range_start = step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

d1421 2
d1482 1
a1482 1
      finish_backward (function);
d1559 59
@


1.195.2.4
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c (finish_command): Use i18n macros.
@
text
@d1432 1
a1432 1
		    _("Finish: couldn't find function."));
d1531 1
a1531 1
	printf_filtered (_("Run back to call of "));
d1533 1
a1533 1
	printf_filtered (_("Run till exit from "));
@


1.195.2.5
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* infcmd.c (finish_command): Reject async in reverse.
@
text
@a1502 4
  /* Don't try to async in reverse.  */
  if (async_exec && target_get_execution_direction () == EXEC_REVERSE)
    error (_("Asynchronous 'finish' not supported in reverse."));

@


1.195.2.6
log
@2008-10-06  Michael Snyder  <msnyder@@vmware.com>

	* breakpoint.c (breakpoint_silence): Rename to make_breakpoint_silent.
	* breakpoint.h: Ditto.
	* infcmd.c (finish_backward): Call make_breakpoint_silent
	instead of breakpoint_silence.
@
text
@d1458 1
a1458 1
      make_breakpoint_silent (breakpoint);
@


1.195.2.7
log
@2008-10-07  Michael Snyder  <msnyder@@vmware.com>

	* target.h (to_set_exec_direction, to_get_exec_direction): Remove.
	(to_can_execute_reverse): New method.
	(enum exec_direction_kind): Move to inferior.h.
	* target.c (update_current_target): Inherit to_can_execute_reverse.
	Remove to_set_exec_direction, to_get_exec_direction.
	* inferior.h (enum exec_direction_kind): Move from target.h.

	* infrun.c (set_exec_direction_func): Move here from reverse.c.
	(show_exec_direction_func): Ditto.
	(proceed): Consult global execution_direction instead of
	target method.
	(handle_inferior_event): Ditto.

	* reverse.c (set_exec_direction_func): Move to infrun.c
	(show_exec_direction_func): Ditto.
	(exec_direction_default): Set infrun global variable.
	(exec_reverse_once): Consult infrun global direction variable.

	* infcmd.c (step_1): Consult infrun global direction variable.
	(step_once): Ditto.
	(until_next_command): Ditto.
	(finish_command): Ditto.

	* record.h (record_exec_direction): Delete.
	(RECORD_IS_REPLAY): Consult infrun global direction variable.

	* record.c: (record_wait_cleanups): Use infrun state variable.
	(record_wait): Ditto.
	(record_get_exec_direction, record_set_exec_direction): Remove.
	(record_can_execute_reverse): New target method.

	* remote.c (remote_resume): Use infrun state variable.
	(remote_get_exec_direction, remote_set_exec_direction): Remove.
	(remote_can_execute_reverse): New target method.
@
text
@d827 1
a827 1
	  if (execution_direction == EXEC_REVERSE)
d945 1
a945 1
      if (execution_direction == EXEC_REVERSE)
d1224 1
a1224 1
  if (execution_direction == EXEC_REVERSE)
d1504 1
a1504 1
  if (async_exec && execution_direction == EXEC_REVERSE)
d1534 1
a1534 1
      if (execution_direction == EXEC_REVERSE)
d1542 1
a1542 1
  if (execution_direction == EXEC_REVERSE)
@


1.194
log
@	Replace struct continuation_args by void* and per command structs.

	* top.c (execute_command): Remove unused arg1 and arg2 locals.

	* breakpoint.c (struct until_break_command_continuation_args):
	New.
	(until_break_command_continuation): Take a void* instead of a
	continuations_arg.  Adjust.
	(until_break_command): Adjust to use struct
	until_break_command_continuation_args instead of struct
	continuation_arg.

	* infcmd.c (struct step_1_continuation_args): New.
	(step_1_continuation): Take a void* instead of a
	continuations_arg.  Adjust to use struct step_1_continuation_args.
	(step_once): Adjust to use struct step_1_continuation_args.

	(struct finish_command_continuation_args): New.
	(finish_command_continuation): Take a void* instead of a
	continuations_arg.  Adjust to use struct
	finish_command_continuation_args.
	(finish_command): Adjust to use struct
	finish_command_continuation_args.
	(struct attach_command_continuation_args): New.
	(attach_command_continuation): Take a void* instead of a
	continuations_arg.  Adjust to use struct
	attach_command_continuation_args.
	(attach_command): Adjust to use struct
	attach_command_continuation_args.

	* defs.h (struct continuation_arg): Delete.
	(struct continuation): Replace the struct continuation_arg*
	parameter of continuation_hook by a void*.  Replace "arg_list"
	member by a new "args" member with void* type.
	(add_continuation, add_intermediate_continuation): Replace struct
	continuation_arg type usages by void* usages.

	* utils.c (add_continuation, do_all_continuations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): Replace struct
	continuation_arg type usages by void* usages.  Pass "args" instead
	of "arg_list".
@
text
@a75 2
static void finish_command_continuation (void *args, int error_p);

a107 1
static void step_1_continuation (void *args, int error_p);
d877 1
a877 1
step_1_continuation (void *args, int error_p)
d881 1
a881 1
  if (error_p || !step_multi || !stop_step)
d883 2
a884 3
      /* We either hit an error, or stopped for some reason
	 that is not stepping, or there are no further steps
	 to make.  Cleanup.  */
d959 1
a959 1
      add_intermediate_continuation (step_1_continuation, args);
d1324 1
a1324 1
finish_command_continuation (void *arg, int error_p)
d1328 2
a1329 1
  if (!error_p)
d1331 1
a1331 4
      if (bpstat_find_breakpoint (stop_bpstat, a->breakpoint) != NULL
	  && a->function != NULL)
	{
	  struct type *value_type;
d1333 19
a1351 13
	  value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (a->function));
	  if (!value_type)
	    internal_error (__FILE__, __LINE__,
			    _("finish_command: function has no target type"));

	  if (TYPE_CODE (value_type) != TYPE_CODE_VOID)
	    print_return_value (SYMBOL_TYPE (a->function), value_type);
	}

      /* We suppress normal call of normal_stop observer and do it here so that
	 that *stopped notification includes the return value.  */
      observer_notify_normal_stop (stop_bpstat);
    }
d1353 5
d1359 1
a1359 1
  delete_breakpoint (a->breakpoint);
d1433 2
a1434 1
  add_continuation (finish_command_continuation, cargs);
d1438 1
a1438 1
    do_all_continuations (0);
d1991 1
a1991 1
attach_command_continuation (void *args, int error_p)
d1997 8
d2093 2
a2094 1
	  add_continuation (attach_command_continuation, a);
@


1.193
log
@	Implement -exec-continue/-exec-interrupt --all.
        * infcmd.c (continue_1): New, extracted from
        (continue_command): ...here.
        (interrupt_target_1): New, extracted from
        (interrupt_target_command): ...here.
        * inferior.h (continue_1, interrupt_target_1): New.
        * mi/mi-main.c (mi_cmd_exec_continue)
        (mi_cmd_exec_interrupt): Handle --all.
@
text
@d76 1
a76 2
static void finish_command_continuation (struct continuation_arg *, 
					 int error_p);
d110 1
a110 1
static void step_1_continuation (struct continuation_arg *arg, int error_p);
d866 8
d880 1
a880 1
step_1_continuation (struct continuation_arg *arg, int error_p)
d882 1
a882 9
  int count;
  int skip_subroutines;
  int single_inst;
  int thread;
      
  skip_subroutines = arg->data.integer;
  single_inst      = arg->next->data.integer;
  count            = arg->next->next->data.integer;
  thread           = arg->next->next->next->data.integer;
d889 2
a890 2
      if (!single_inst || skip_subroutines)
	delete_longjmp_breakpoint (thread);
d894 1
a894 1
    step_once (skip_subroutines, single_inst, count - 1, thread);
d906 1
a906 5
{ 
  struct continuation_arg *arg1; 
  struct continuation_arg *arg2;
  struct continuation_arg *arg3; 
  struct continuation_arg *arg4;
d908 1
d957 7
a963 17
      arg1 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg2 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg3 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg4 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg1->next = arg2;
      arg1->data.integer = skip_subroutines;
      arg2->next = arg3;
      arg2->data.integer = single_inst;
      arg3->next = arg4;
      arg3->data.integer = count;
      arg4->next = NULL;
      arg4->data.integer = thread;
      add_intermediate_continuation (step_1_continuation, arg1);
d1321 1
a1321 2
static void
finish_command_continuation (struct continuation_arg *arg, int error_p)
d1323 1
d1325 1
a1325 2
  struct breakpoint *breakpoint;
  struct cleanup *cleanups;
d1327 4
a1330 2
  breakpoint = (struct breakpoint *) arg->data.pointer;
  function = (struct symbol *) arg->next->data.pointer;
d1334 2
a1335 2
      if (bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL
	  && function != NULL)
d1338 2
a1339 2
	  
	  value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (function));
d1343 1
a1343 1
	  
d1345 1
a1345 1
	    print_return_value (SYMBOL_TYPE (function), value_type); 
d1354 1
a1354 1
  delete_breakpoint (breakpoint);
d1368 1
a1368 1
  struct continuation_arg *arg1, *arg2, *arg3;
d1424 6
a1429 10
  arg1 =
    (struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
  arg2 =
    (struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
  arg1->next = arg2;
  arg2->next = NULL;
  arg1->data.pointer = breakpoint;
  arg2->data.pointer = function;
  add_continuation (finish_command_continuation, arg1);
  
d1977 1
a1977 2
static void
attach_command_continuation (struct continuation_arg *arg, int error_p)
d1982 1
d1984 5
a1988 5
  args = (char *) arg->data.pointer;
  from_tty = arg->next->data.integer;
  async_exec = arg->next->next->data.integer;

  attach_command_post_wait (args, from_tty, async_exec);
d2073 1
a2073 1
	  struct continuation_arg *arg1, *arg2, *arg3;
d2075 5
a2079 13
	  arg1 =
	    (struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
	  arg2 =
	    (struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
	  arg3 =
	    (struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
	  arg1->next = arg2;
	  arg2->next = arg3;
	  arg3->next = NULL;
	  arg1->data.pointer = args;
	  arg2->data.integer = from_tty;
	  arg3->data.integer = async_exec;
	  add_continuation (attach_command_continuation, arg1);
@


1.192
log
@	Exited threads.

	* thread.c (enum thread_state): New.
	(thread_state main_thread_running): Delete, in favor of...
	(thread_state main_thread_state): ... this.  Update throughout.
	(clear_thread_inferior_resources): New, split from free_thread.
	(free_thread): Call clear_thread_inferior_resources.
	(init_thread_list): Set main thread to stopped state.
	(add_thread_silent): Take care of PTID reuses.
	(delete_thread): If deleting inferior_ptid or a thread with
	refcount > 0, mark it as exited, but still keep it in the list.
	Only notify of thread exits, if we haven't done so yet.
	(iterate_over_threads): Make it safe to delete threads while
	iterating over them.
	(do_captured_list_thread_ids): Don't account for exited threads.
	(thread_alive): Check for the THREAD_EXITED state, and don't set
	ptid to -1 on exited threads.
	(set_running): Update to account for extra possible states.
	(is_thread_state): New.
	(is_stopped, is_exited): New.
	(is_running): Implement in terms of is_thread_state.
	(any_running): Update.
	(print_thread_info): Update.  Account for exited threads.  Don't
	warn about missed frame restoring here, its done in the cleanup.
	(switch_to_thread): Don't read from a thread that has gone.
	(restore_current_thread): In non-stop mode, do a full context
	switch.
	(restore_selected_frame): Add a frame_level argument.  Rewrite.
	(struct current_thread_cleanup): Add selected_frame_level and
	was_stopped members.
	(do_restore_current_thread_cleanup): Check if thread was stopped
	and still is, and if the target has registers, stack and memory
	before restoring the selected frame.  Don't delete the cleanup
	argument here.
	(restore_current_thread_cleanup_dtor): New.
	(make_cleanup_restore_current_thread): Remove all arguments.
	Rewrite.
	(thread_apply_all_command): Update.  Prune threads.
	(thread_apply_command): Update.
	(thread_command): Account for currently selected exited thread.
	(do_captured_thread_select): Check for a running thread.  Prune
	threads.
	(_initialize_thread): Make "info threads", "thread", "thread
	apply", and "thread apply all" appliable without a selected thread.
	* gdbthread.h (struct thread_info): Replace running_ by state_.
	Add refcount.
	(is_exited, is_stopped): Declare.
	(make_cleanup_restore_current_thread): Remove all arguments.
	* infrun.c: Include "event-top.h".
	(fetch_inferior_event): In non-stop mode, restore selected thread
	and frame after handling the event and running breakpoint
	commands.  Display GDB prompt if needed.
	(normal_stop): In non-stop mode, don't print thread switching
	notice.
	* cli/cli-decode.c (set_cmd_no_selected_thread_ok)
	(get_cmd_no_selected_thread_ok): New.
	* cli/cli-decode.h (CMD_NO_SELECTED_THREAD_OK): New.
	(set_cmd_no_selected_thread_ok, get_cmd_no_selected_thread_ok):
	Declare.
	* cli/cli-cmds.c: Set "pwd", "help", "info", "show" as
	no-selected-thread ok.
	* top.c (execute_command): Check for non no-selected-thread-ok
	commands.
	* linux-nat.c (struct saved_ptids, threads_to_delete)
	(record_dead_thread, prune_lwps): Delete.
	(exit_lwp): Unconditionally delete thread.
	(linux_nat_resume): Remove prune_lwps call.
	* infcmd.c (proceed_thread_callback): Check if !is_stopped instead
	of is_running.  Adjust to make_cleanup_restore_current_thread
	interface change.
	* mi/mi-main.c (mi_cmd_execute): Only allow a few commands if the
	selected thread has exited.
	* inf-loop.c (inferior_event_handler): Don't display the prompt
	here.
	* varobj.c (c_value_of_root): Update.
	* defs.h (make_cleanup_dtor): Declare.
	* utils.c (make_cleanup_dtor): New.

	* Makefile.in (infrun.o): Depend on $(event_top_h).
@
text
@d623 25
d722 1
a722 20
  if (non_stop && all_threads)
    {
      /* Don't error out if the current thread is running, because
	 there may be other stopped threads.  */
      struct cleanup *old_chain;

      /* Backup current thread and selected frame.  */
      old_chain = make_cleanup_restore_current_thread ();

      iterate_over_threads (proceed_thread_callback, NULL);

      /* Restore selected ptid.  */
      do_cleanups (old_chain);
    }
  else
    {
      ensure_not_running ();
      clear_proceed_status ();
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
    }
d2155 11
a2176 1
      ptid_t ptid;
d2188 1
a2188 6
      if (all_threads)
	ptid = minus_one_ptid;
      else
	ptid = inferior_ptid;

      target_stop (ptid);
@


1.191
log
@	Add "continue -a" and "interrupt -a" options for non-stop mode.

	* infcmd.c (proceed_thread_callback, do_context_switch_to): New.
	(continue_command): Add "-a" option.
	(interrupt_target_command): Add "-a" option.
	(_initialize_infcmd): Add extend help of continue and interrupt
	command to mention the new "-a" option.  Mark "continue" async ok.
@
text
@d614 1
a614 1
  if (is_running (thread->ptid))
a698 3
      struct cleanup *old_chain;
      struct frame_id saved_frame_id;

d701 1
d704 1
a704 4
      if (!is_running (inferior_ptid))
	saved_frame_id = get_frame_id (get_selected_frame (NULL));
      else
	saved_frame_id = null_frame_id;
a705 1
      old_chain = make_cleanup_restore_current_thread (inferior_ptid, saved_frame_id);
@


1.190
log
@	Non-stop inferior control.

	* infrun.c (resume): In non-stop mode, always resume just one
	thread.
	(proceed): Don't call prepare_to_proceed in non-stop mode.
	(fetch_inferior_event): In non-stop mode, switch context before
	handling the event.
	(error_is_running, ensure_not_running): New.
	(handle_inferior_event): In non-stop mode: Mark only the event
	thread as stopped.  Require that the target module manages adding
	threads to the thread list.  Assert that there isn't a
	deferred_step_ptid set.  Don't switch to infwait_thread_hop_state.
	(normal_stop): Only mark not-running if inferior hasn't exited.
	In non-stop mode, only mark the event thread.

	* thread.c:Include "cli/cli-decode.h".
	(print_thread_info): Don't read from a running thread.
	Output "(running)" if thread is running.
	(switch_to_thread): Don't read stop_pc if thread is executing.
	(do_restore_current_thread_cleanup): Don't write to a running
	thread.
	(thread_apply_all_command): Don't read from a running thread.  In
	non-stop mode, do a full context-switch instead of just switching
	threads.
	(thread_apply_command): In non-stop mode, do a full context-switch
	instead of just switching threads.
	(do_captured_thread_select): Likewise.  Inform user if selected
	thread is running.
	(_initialize_thread): Mark "info threads" and "thread" and
	async_ok.

	* inf-loop.c (inferior_event_handler): In non-stop mode, don't
	unregister the target from the event loop.

	* infcmd.c (continue_command, step_1, jump_command)
	(signal_command): Ensure the selected thread isn't running.
	(interrupt_target_command): In non-stop mode, interrupt only the
	selected thread.

	* inferior.h (error_is_running, ensure_not_running): Declare.

	* target.h (struct target_ops): Add ptid argument to the to_stop
	member.
	(target_stop): Add ptid_t argument.

	* target.c (update_current_target): Add ptid argument to to_stop's
	type.
	(debug_to_stop): Add ptid_t argument.
	(debug_to_rcmd): Set to_stop_ptid.

	* remote.c (remote_stop): Add ptid_t argument.
	(async_remote_interrupt): Add inferior_ptid to target_stop.
	* inf-ptrace.c (inf_ptrace_stop): Add ptid argument.

	* Makefile.in (thread.o): Depend on $(cli_decode_h).
@
text
@d611 13
d625 1
a625 1
continue_command (char *proc_count_exp, int from_tty)
d628 1
a629 1
  ensure_not_running ();
d632 2
a633 2
  if (proc_count_exp != NULL)
    async_exec = strip_bg_char (&proc_count_exp);
d648 21
a668 3
  /* If have argument (besides '&'), set proceed count of breakpoint
     we stopped at.  */
  if (proc_count_exp != NULL)
d678 1
a678 1
			      parse_and_eval_long (proc_count_exp) - 1,
d697 16
a712 1
  clear_proceed_status ();
d714 9
a722 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d2156 5
a2160 1
   the backgound. */
d2166 3
d2171 13
a2183 1
      target_stop (inferior_ptid);
d2386 1
a2386 1
  add_com ("continue", class_run, continue_command, _("\
d2390 6
a2395 1
the breakpoint won't break until the Nth time it is reached)."));
d2398 1
d2420 4
a2423 1
	       _("Interrupt the execution of the debugged program."));
@


1.189
log
@	* config/i386/nm-cygwin.h (ATTACH_NO_WAIT): Delete.
	* config/i386/nm-i386gnu.h (ATTACH_NO_WAIT): Delete.

	* target.h (struct target_ops): Add to_attach_no_wait member.
	(target_attach_no_wait): New.
	* target.c (update_current_target): Inherit to_attach_no_wait.

	* infcmd.c: Replace ATTACH_NO_WAIT compile time check by
	target_attach_no_wait runtime check.

	* gnu-nat.c (init_gnu_ops): Set to_attach_no_wait in gnu_ops.
	* win32-nat.c (init_win32_ops): Set to_attach_no_wait in
	win32_ops.
@
text
@d616 1
d718 1
d941 1
d1042 1
d2109 2
a2110 1
      target_stop ();
@


1.188
log
@	Don't suppress *running when doing finish.
        * infcall.c (call_function_by_hand): Set both
        suppress_resume_observer and suppress_stop_observer.
        * infcmd.c (suppress_run_stop_observers): Split into...
        (suppress_resume_observer, suppress_stop_observer): ...those.
        (finish_command_continuation): Clear suppress_stop_observer.
        (finish_command): Set suppress_stop_observer.
        * inferior.h (suppress_run_stop_observers): Split into...
        (suppress_resume_observer, suppress_stop_observer): ...those.
        * infrun.c (normal_stop): Check for suppress_stop_observer.
        * thread.c (set_running): Check for suppress_resume_observer.
@
text
@d2018 15
a2032 8
  /* No traps are generated when attaching to inferior under Mach 3
     or GNU hurd.  */
#ifndef ATTACH_NO_WAIT
  /* Careful here. See comments in inferior.h.  Basically some OSes
     don't ignore SIGSTOPs on continue requests anymore.  We need a
     way for handle_inferior_event to reset the stop_signal variable
     after an attach, and this is what STOP_QUIETLY_NO_SIGSTOP is for.  */
  stop_soon = STOP_QUIETLY_NO_SIGSTOP;
d2034 15
a2048 4
  if (target_can_async_p ())
    {
      /* sync_execution mode.  Wait for stop.  */
      struct continuation_arg *arg1, *arg2, *arg3;
d2050 1
a2050 14
      arg1 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg2 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg3 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg1->next = arg2;
      arg2->next = arg3;
      arg3->next = NULL;
      arg1->data.pointer = args;
      arg2->data.integer = from_tty;
      arg3->data.integer = async_exec;
      add_continuation (attach_command_continuation, arg1);
      return;
a2052 3
  wait_for_inferior (0);
#endif

@


1.187
log
@	Implement *running.
        * Makefile.in: Update dependencies.
        * gdbthread.h (struct thread_info): New field
        running_.
        (set_running, is_running): New.
        * thread.c (set_running, is_running): New.
        * inferior.h (suppress_normal_stop_observer): Rename to...
        (suppress_run_stop_observers): ..this.
        * infcmd.c (suppress_normal_stop_observer): Rename to...
        (suppress_run_stop_observers): ..this.
        (finish_command_continuation, finish_command): Adjust.
        * infcall.c (call_function_by_hand): Adjust.
        * infrun.c (normal_stop): Call set_running.
        * target.c (target_resume): New.  Call set_running.
        * target.h (target_resume): Convert from macro to
        a function.

        * mi/mi-interp.c (mi_on_resume): New.
        (mi_interpreter_init): Register mi_on_resume.
@
text
@d210 4
a213 3
/* When set, normal_stop will not call the normal_stop observer.
   Resume observer likewise will not be called.  */
int suppress_run_stop_observers = 0;
d1308 1
a1308 1
  suppress_run_stop_observers = 0;
d1375 2
a1376 2
  make_cleanup_restore_integer (&suppress_run_stop_observers);
  suppress_run_stop_observers = 1;
@


1.186
log
@	Use observers to report stop events in MI.
        * mi/mi-interp.c (mi_on_normal_stop): New.
        (mi_interpreter_init): Register mi_on_normal_stop.
        (mi_interpreter_exec_continuation): Remove.
        (mi_cmd_interpreter_exec): Don't register the above.
        * mi/mi-main.c (captured_mi_execute_command): Don't care
        about sync_execution.
        (mi_execute_async_cli_command): Don't install continuation.  Don't
        print *stopped.
        (mi_exec_async_cli_cmd_continuation): Remove.
@
text
@d210 3
a212 2
/* When set, normal_stop will not call the normal_stop observer.  */
int suppress_normal_stop_observer = 0;
d1307 1
a1307 1
  suppress_normal_stop_observer = 0;
d1374 2
a1375 2
  make_cleanup_restore_integer (&suppress_normal_stop_observer);
  suppress_normal_stop_observer = 1;
@


1.185
log
@	Suppress normal stop observer when it's problematic.
        * inferior.h (suppress_normal_stop_observer): New.
        * infcall.c (call_function_by_hand): Disable stop events when
        doing function calls.
        * infmcd.c (suppress_normal_stop_observer): New.
        (finish_command_continuation): Call normal_stop observer
        explicitly.
        (finish_command): Disable stop events inside proceed.
        * infrun.c (normal_stop): Don't call normal stop observer if
        suppressed of if multi-step is in progress.
@
text
@d1386 1
a1386 4

  /* Do this only if not running asynchronously or if the target
     cannot do async execution.  Otherwise, complete this command when
     the target actually stops, in fetch_inferior_event.  */
@


1.184
log
@	Remove stale code.
        * infrun.c (finish_command): Don't pass cleanup
        to continuation.
        (finish_command_continuation): Don't grab cleanup from
        the passed data, as we don't use, and cannot, use it anyway.
@
text
@d209 3
d1300 4
d1306 1
d1373 2
@


1.183
log
@        * infcmd.c (_initialize_infcmd): Add new "fin" alias for "finish".
@
text
@a1280 1
  cleanups = (struct cleanup *) arg->next->next->data.pointer;
a1370 2
  arg3 =
    (struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
d1372 1
a1372 2
  arg2->next = arg3;
  arg3->next = NULL;
a1374 1
  arg3->data.pointer = old_chain;
@


1.183.2.1
log
@Reverse execution branch

2008-06-09  Michael Snyder  <msnyder@@specifix.com>
	2006-05-02  Michael Snyder  <msnyder@@redhat.com>

	* Target interface for reverse execution.
	* target.h (enum target_waitkind):
	Add new wait event, TARGET_WAITKIND_NO_HISTORY.
	(enum exec_direction_kind): New enum.
	(struct target_ops): New methods to_set_execdir, to_get_execdir.
	* target.c (target_get_execdir): New generic method.
	(target_set_execdir): Ditto.
	* remote.c (remote_get_execdir, remote_set_execdir): New methods.
	(remote_vcont_resume): Jump out if attempting reverse execution.
	(remote_resume): Check for reverse exec direction, and send
	appropriate command to target.
	(remote_wait): Check target response for NO_HISTORY status.
	Also check for empty reply (target doesn't understand "bs" or "bc).
	(_initialize_remote): Add new methods to remote target vector.

	* breakpoint.h (breakpoint_silence): Export.
	* breakpoint.c (breakpoint_silence): New function.
	* infcmd.c (finish_command): Check for reverse exec direction.
	(finish_backward): New function, handle finish cmd in reverse.
	* infrun.c (enum inferior_stop_reason): Add NO_HISTORY reason.
	(handle_inferior_event): Handle TARGET_WAITKIND_NO_HISTORY.
	Handle stepping over a function call in reverse.
	Handle stepping thru a line range in reverse.
	Handle setting a step-resume breakpoint in reverse.
	Handle stepping into a function in reverse.
	Handle stepping between line ranges in reverse.
	(print_stop_reason): Print reason for NO_HISTORY.

	2006-03-31  Michael Snyder  <msnyder@@redhat.com>
	User interface for reverse execution.
	* Makefile.in (reverse.c): New file.
	* reverse.c: New file.  User interface for reverse execution.
@
text
@a1305 2
static void finish_backwards (struct symbol *);

d1346 7
d1361 1
a1361 5
      if (target_get_execution_direction () == EXEC_REVERSE)
	printf_filtered ("Run back to call of ");
      else
	printf_filtered ("Run till exit from ");

a1364 14
  if (target_get_execution_direction () == EXEC_REVERSE)
    {
      /* Split off at this point.  */
      finish_backwards (function);
      return;
    }

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);

  old_chain = make_cleanup_delete_breakpoint (breakpoint);

a1437 60

static void
finish_backwards (struct symbol *function)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;
  int back_up;

  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__,
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* Let's cheat and not worry about async until later.  */

  /* We don't need a return value.  */
  proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point,
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != read_pc ())
    {
      /* Set breakpoint and continue.  */
      breakpoint =
	set_momentary_breakpoint (sal,
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns.  */
      do_cleanups (old_chain);
      back_up = bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL;
    }
  else
    back_up = 1;
  if (back_up)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there --
	 we just need to back up by one more single-step.  */
      /* (Kludgy way of letting wait_for_inferior know...) */
      step_range_start = step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

@


1.183.2.2
log
@2007-04-18  Daniel Jacobowitz  <dan@@codesourcery.com>

	* infcmd.c (finish_backwards): Correct check for whether to back
	up after finishing.
@
text
@d1494 1
a1495 1
      do_cleanups (old_chain);
@


1.182
log
@        * valprint.c (val_print): Add new language parameter and use it
        instead of using the current_language. Update calls to val_print
        throughout.
        (common_val_print): Add new langauge parameter and pass it to
        val_print.
        * value.h (struct language_defn): Add opaque declaration.
        (val_print, common_val_print): Update declarations.
        * stack.c (print_frame_args): Update call to common_val_print
        using the appropriate language.
        * mi/mi-cmd-stack.c (list_args_or_locals): Likewise.
        * c-valprint, f-valprint.c, m2-valprint.c, mt-tdep.c, infcmd.c,
        mi/mi-main.c, jv-valprint.c, ada-valprint.c, varobj.c, p-valprint.c,
        scm-valprint.c, cp-valprint.c, sh64-tdep.c, printcmd.c:
        #include "language.h" if necessary.
        Update calls to val_print and common_val_print.
        * Makefile.in (mt-tdep.o, sh64-tdep.o, mi-cmds.o, mi-main.o):
        Update dependencies.
@
text
@d2254 1
@


1.181
log
@	* infcmd.c (step_1): Put thread id on the stack to avoid possible
	NULL dereferencing.
@
text
@d1653 1
a1653 1
		     file, 0, 1, 0, Val_pretty_default);
d1671 1
a1671 1
		     file, 'x', 1, 0, Val_pretty_default);
d1678 1
a1678 1
			 file, 0, 1, 0, Val_pretty_default);
@


1.180
log
@gdb/
	* breakpoint.c (update_breakpoints_after_exec): Delete bp_longjmp
	and bp_longjmp_resume breakpoints.
	(breakpoint_address_is_meaningful): Claim bp_longjmp_resume as
	meaningful.
	(create_longjmp_breakpoint): Don't create bp_longjmp_resume
	breakpoints.  Create bp_longjmp breakpoints as momentary
	breakpoints.
	(enable_longjmp_breakpoint): Delete.
	(set_longjmp_breakpoint): New.
	(disable_longjmp_breakpoint): Delete.
	(delete_longjmp_breakpoint): New.
	(set_longjmp_resume_breakpoint): Delete.
	(set_momentary_breakpoint_at_pc): New.
	(breakpoint_re_set_one): Don't delete bp_longjmp and
	bp_longjmp_resume breakpoints.
	(breakpoint_re_set): Don't create longjmp and longjmp-resume
	breakpoints.

	* infrun.c (step_resume_breakpoint): Add comment.
	(struct execution_control_state): Delete handling_longjmp member.
	(init_execution_control_state). Don't clear handling_longjmp.
	(context_switch): Don't context switch handling_longjmp.
	(handle_inferior_event): If handling a bp_longjmp breakpoint,
	create a bp_longjmp_resume breakpoint, and set it as current
	step_resume_breakpoint, then step over the longjmp breakpoint.  If
	handling a bp_longjmp_resume breakpoint, don't delete the longjmp
	breakpoint, delete the longjmp-resume breakpoint, and stop
	stepping.
	(currently_stepping): Remove handling_longjmp from expression.
	(insert_step_resume_breakpoint_at_sal): Update comment.
	(insert_longjmp_resume_breakpoint): New.

	* breakpoint.h (set_momentary_breakpoint_at_pc): Declare.
	(enable_longjmp_breakpoint, disable_longjmp_breakpoint): Delete
	declarations.
	(set_longjmp_breakpoint, delete_longjmp_breakpoint): Declare.
	(set_longjmp_resume_breakpoint): Delete declaration.

	* gdbthread.h (save_infrun_state): Remove handling_longjmp
	parameter.
	(load_infrun_state): Delete *handling_longjmp parameter.
	* thread.c (save_infrun_state): Remove handling_longjmp parameter.
	Update body.
	(load_infrun_state): Delete *handling_longjmp parameter.  Update
	body.

	* infcmd.c (disable_longjmp_breakpoint_cleanup): Delete.
	(delete_longjmp_breakpoint_cleanup): New.
	(step_1): Call set_longjmp_breakpoint instead of
	enable_longjmp_breakpoint.  Use delete_longjmp_breakpoint_cleanup
	instead of disable_longjmp_breakpoint_cleanup when making cleanup.
	(step_1_continuation): Pass thread id in the continuation args to
	step_once.
	(step_once): Add thread parameter.  Pass thread id the the
	continuation.

gdb/testsuite/
	* gdb.cp/annota2.exp: Adjust to breakpoints invalidations at
	different times.
@
text
@d709 1
a709 1
  int *thread_p = NULL;
a732 3
      thread_p = xmalloc (sizeof (int));
      make_cleanup (xfree, thread_p);

d734 1
a734 3
 	*thread_p = pid_to_thread_id (inferior_ptid);
      else
 	*thread_p = -1;
d738 1
a738 1
      make_cleanup (delete_longjmp_breakpoint_cleanup, thread_p);
d799 1
a799 1
      step_once (skip_subroutines, single_inst, count, *thread_p);
a802 1
      xfree (thread_p);
@


1.179
log
@2008-05-01  Daniel Jacobowitz  <dan@@codesourcery.com>
	    Pedro Alves  <pedro@@codesourcery.com>

	Based on work by Jan Kratochvil <jan.kratochvil@@redhat.com> and Jeff
 	Johnston <jjohnstn@@redhat.com>.

	* NEWS: Mention attach to stopped process fix.
	* infcmd.c (detach_command, disconnect_command): Discard the thread
	list.
	* infrun.c (handle_inferior_event): Do not ignore non-SIGSTOP while
	attaching.  Use signal_stop_state.
	(signal_stop_state): Check stop_soon.
	* linux-nat.c (kill_lwp): Declare earlier.
	(pid_is_stopped, linux_nat_post_attach_wait): New.
	(lin_lwp_attach_lwp): Use linux_nat_post_attach_wait.  Update
	comments.
	(linux_nat_attach): Use linux_nat_post_attach_wait.
	(detach_callback, linux_nat_detach): Improve handling for signalled
	processes.
	(linux_nat_pid_to_str): Always print out the LWP ID if it differs
	from the process ID.
	* Makefile.in (infcmd.o): Update.

2008-05-01  Jan Kratochvil  <jan.kratochvil@@redhat.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb.threads/attach-into-signal.c, gdb.threads/attach-into-signal.exp,
	gdb.threads/attach-stopped.c, gdb.threads/attach-stopped.exp,
	gdb.threads/attachstop-mt.c, gdb.threads/attachstop-mt.exp: New.
@
text
@d110 1
a110 1
static void step_once (int skip_subroutines, int single_inst, int count);
d696 1
a696 1
disable_longjmp_breakpoint_cleanup (void *ignore)
d698 2
a699 1
  disable_longjmp_breakpoint ();
d709 1
d733 11
a743 2
      enable_longjmp_breakpoint ();
      make_cleanup (disable_longjmp_breakpoint_cleanup, 0 /*ignore*/);
d804 2
a805 2
      step_once (skip_subroutines, single_inst, count);
      /* We are running, and the contination is installed.  It will
d808 1
d823 1
d828 1
d836 1
a836 1
	disable_longjmp_breakpoint ();
d840 1
a840 1
    step_once (skip_subroutines, single_inst, count - 1);
d851 1
a851 1
step_once (int skip_subroutines, int single_inst, int count)
d856 1
d912 2
d918 1
a918 1
      arg3->next = NULL;
d920 2
@


1.178
log
@        * infcmd.c (step_1_continuation): Always disable longjmp
        breakpoint if we're not going to do another step.
@
text
@d53 1
d2054 1
d2073 1
@


1.177
log
@	exec_cleanup murder.
	* breakpoint.c (until_break_command_continuation): Add
	the 'error' parameter.  Directly delete the breakoint as
	opposed to running cleanups.
	(until_break_command): Install continuation only
	after starting the target.  Don't use exec cleanups,
	use ordinary cleanups.  Discard cleanups is successfully
	started the target in async mode.
	(make_cleanup_delete_breakpoint): Remove.
	* breakpoint.h (make_cleanup_delete_breakpoint): Remove
	declaration.
	* defs.h (do_exec_cleanups, make_exec_cleanup): Remove
	declarations.
	(struct continations): Add the 'error' parameter to the
	continuation_hook field.
	(add_continuation, do_all_continuations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): Add the 'error' parameter.
	* exceptions.c (throw_exception): Don't call do_exec_cleanups.
	* inf-loop.c (inferior_event_handler): Instead of calling
	discard_all_continuations, use do_all_continuations with 1 as
	'error' parameter.  Pass 0 as 'error' parameter in existing uses
	of discard_all_continuations.
	* infcmd.c (step_1): Do not use exec cleanup.  For async case, discard
	cleanups.
	(step_once): Install continuation only after resuming the target.
	(step_1_continuation): Disable longjmp breakpoint on error.
	(finish_command_continuation): Add the error parameter.  Delete
	the finish breakpoint directly, do not use cleanups.
	(finish_command): Do not use exec_cleanups. Always setup
	continuation.  For sync case, immediately run them.
	(attach_command_continuation): Add the error parameter.
	* infrun.c (fetch_inferior_event): Do not use exec cleanups to
	remove step_resume_breakpoint -- adjust delete it directly.
	* interps.c (interp_set): Adjust call to do_all_continations.
	* mi/mi-interp.c (mi_interpreter_exec_continuation): Do not
	do exec cleanups.
	* mi/mi-main.c (mi_cmd_target_select): Do not do exec
	cleanups.
	(mi_cmd_execute): Do not use exec_cleanup.
	(mi_execute_async_cli_command): Simplify the string concatenation
	logic.  Do no use exec cleanup.
	(mi_exec_async_cli_cmd_continuation): New parameter error.
	Free last_async_command.
	* top.c (command_line_handler_continuation): New parameter error.
	* utils.c (exec_cleanup_chain, make_exec_cleanup)
	(do_exec_cleanups): Remove.
	(add_continuation, do_all_continations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): New parameter error.
@
text
@d807 3
a809 11
  if (error_p)
    disable_longjmp_breakpoint ();
  else
    {
      int count;
      int skip_subroutines;
      int single_inst;
      
      skip_subroutines = arg->data.integer;
      single_inst      = arg->next->data.integer;
      count            = arg->next->next->data.integer;
d811 12
a822 5
      if (stop_step)
	step_once (skip_subroutines, single_inst, count - 1);
      else
	if (!single_inst || skip_subroutines)
	  disable_longjmp_breakpoint ();
d824 2
@


1.176
log
@doc/ChangeLog:
--------------

	* gdb.texinfo (Set SH Calling convention): New @@item.
	(Show SH Calling convention): Ditto.

ChangeLog:
----------

	* NEWS: Add information on calling convention and new SH CLI options.

	* sh-tdep.c (sh_cc_gcc): New static string.
	(sh_cc_renesas): Ditto.
	(sh_cc_enum): New static string array.
	(sh_active_calling_convention): New static string pointer denoting
	active user chosen ABI.
	(sh_is_renesas_calling_convention): New function to return function
	specific ABI, or user choice if necessary.
	(sh_use_struct_convention): Rename first argument and turn around its
	meaning.  Check for renesas ABI and return accordingly.
	(sh_use_struct_convention_nofpu): New function.
	(sh_next_flt_argreg): Get function type as third parameter.  Check
	for renesas ABI and choose floating registers accordingly.
	(sh_push_dummy_call_fpu): Check for ABI and choose argument slot and
	struct return slot accordingly.
	(sh_push_dummy_call_nofpu): Ditto.
	(sh_return_value_nofpu): Call sh_use_struct_convention_nofpu from here.
	Evaluate ABI and give to sh_use_struct_convention_nofpu.
	(sh_return_value_fpu):  Evaluate ABI and give to
	sh_use_struct_convention.
	(show_sh_command): New function.
	(set_sh_command): Ditto.
	(_initialize_sh_tdep): Initialize `set/show sh calling-convention
	CLI command.

	* gdbarch.sh (return_value): Add func_type argument.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Ditto.
	* eval.c (evaluate_subexp_standard): Rename local variable value_type to
	val_type so as not to collide with value_type function.  Call
	using_struct_return with additional function type argument.
	* infcall.c (call_function_by_hand): Call using_struct_return and
	gdbarch_return_value with additional function type argument.
	* infcmd.c (print_return_value): Take addition func_type argument.
	Call gdbarch_return_value with additional function type argument.
	(finish_command_continuation): Call print_return_value with additional
	function type argument.
	(finish_command): Ditto.
	* sparc-tdep.c (sparc32_push_dummy_code): Call using_struct_return with
	additional function type argument.
	* stack.c (return_command): Call using_struct_return and
	gdbarch_return_value with additional function type argument.
	* value.c (using_struct_return): Take additional function type argument.
	* value.h (using_struct_return): Accommodate declaration.
	* alpha-tdep.c (alpha_return_value): Add func_type argument.
	* amd64-tdep.c (amd64_return_value): Ditto.
	* arm-tdep.c (arm_return_value): Ditto.
	* avr-tdep.c (avr_return_value): Ditto.
	* cris-tdep.c (cris_return_value): Ditto.
	* frv-tdep.c (frv_return_value): Ditto.
	* h8300-tdep.c (h8300_return_value): Ditto.
	(h8300h_return_value): Ditto.
	* hppa-tdep.c (hppa32_return_value): Ditto.
	(hppa64_return_value): Ditto.
	* i386-tdep.c (i386_return_value): Ditto.
	* ia64-tdep.c (ia64_return_value): Ditto.
	* iq2000-tdep.c (iq2000_return_value): Ditto.
	* m32c-tdep.c (m32c_return_value): Ditto.
	* m32r-tdep.c (m32r_return_value): Ditto.
	* m68hc11-tdep.c (m68hc11_return_value): Ditto.
	* m68k-tdep.c (m68k_return_value): Ditto.
	(m68k_svr4_return_value): Ditto.
	* m88k-tdep.c  (m88k_return_value): Ditto.
	* mep-tdep.c (mep_return_value): Ditto.
	* mips-tdep.c (mips_eabi_return_value): Ditto.
	(mips_n32n64_return_value): Ditto.
	(mips_o32_return_value): Ditto.
	(mips_o64_return_value): Ditto.
	* mn10300-tdep.c (mn10300_return_value): Ditto.
	* mt-tdep.c (mt_return_value): Ditto.
	* ppc-linux-tdep.c (ppc_linux_return_value): Ditto.
	* ppc-sysv-tdep.c (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppc-tdep.h (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppcnbsd-tdep.c (ppcnbsd_return_value): Ditto.
	* rs6000-tdep.c (rs6000_return_value): Ditto.
	* s390-tdep.c (s390_return_value): Ditto.
	* score-tdep.c (score_return_value): Ditto.
	* sh-tdep.c (sh_return_value_nofpu): Ditto.
	(sh_return_value_fpu): Ditto.
	* sh64-tdep.c (sh64_return_value): Ditto.
	* sparc-tdep.c (sparc32_return_value): Ditto.
	* sparc64-tdep.c (sparc64_return_value): Ditto.
	* spu-tdep.c (spu_return_value): Ditto.
	* v850-tdep.c (v850_return_value): Ditto.
	* vax-tdep.c (vax_return_value): Ditto.
	* xstormy16-tdep.c (xstormy16_return_value): Ditto.
	* xtensa-tdep.c (xtensa_return_value): Ditto.

	* gdbtypes.h (struct type): Add calling_convention member.
	* dwarf2read.c (read_subroutine_type): Add calling convention read
	from DW_AT_calling_convention attribute to function type.
@
text
@d75 2
a76 1
static void finish_command_continuation (struct continuation_arg *);
d110 1
a110 1
static void step_1_continuation (struct continuation_arg *arg);
d705 1
a705 1
  struct cleanup *cleanups = 0;
d731 1
a731 4
      if (!target_can_async_p ())
	cleanups = make_cleanup (disable_longjmp_breakpoint_cleanup, 0 /*ignore*/);
      else
        make_exec_cleanup (disable_longjmp_breakpoint_cleanup, 0 /*ignore*/);
d783 1
a783 2
      if (!single_inst || skip_subroutines)
	do_cleanups (cleanups);
d792 4
a795 2
      if (target_can_async_p ())
	step_once (skip_subroutines, single_inst, count);
d805 1
a805 1
step_1_continuation (struct continuation_arg *arg)
d807 2
a808 10
  int count;
  int skip_subroutines;
  int single_inst;

  skip_subroutines = arg->data.integer;
  single_inst      = arg->next->data.integer;
  count            = arg->next->next->data.integer;

  if (stop_step)
    step_once (skip_subroutines, single_inst, count - 1);
d810 15
a824 2
    if (!single_inst || skip_subroutines)
      do_exec_cleanups (ALL_CLEANUPS);
d888 1
a901 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
d1258 1
a1258 1
finish_command_continuation (struct continuation_arg *arg)
d1268 1
a1268 2
  if (bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL
      && function != NULL)
d1270 13
a1282 9
      struct type *value_type;

      value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (function));
      if (!value_type)
	internal_error (__FILE__, __LINE__,
			_("finish_command: function has no target type"));

      if (TYPE_CODE (value_type) != TYPE_CODE_VOID)
	print_return_value (SYMBOL_TYPE (function), value_type); 
d1285 1
a1285 1
  do_exec_cleanups (cleanups);
d1336 1
a1336 4
  if (!target_can_async_p ())
    old_chain = make_cleanup_delete_breakpoint (breakpoint);
  else
    old_chain = make_exec_cleanup_delete_breakpoint (breakpoint);
d1353 13
a1365 22
  /* If running asynchronously and the target support asynchronous
     execution, set things up for the rest of the finish command to be
     completed later on, when gdb has detected that the target has
     stopped, in fetch_inferior_event.  
     Setup it only after proceed, so that if proceed throws, we don't
     set continuation.  */
  if (target_can_async_p ())
    {
      arg1 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg2 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg3 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg1->next = arg2;
      arg2->next = arg3;
      arg3->next = NULL;
      arg1->data.pointer = breakpoint;
      arg2->data.pointer = function;
      arg3->data.pointer = old_chain;
      add_continuation (finish_command_continuation, arg1);
    }
d1370 1
d1372 1
a1372 18
    {
      /* Did we stop at our breakpoint?  */
      if (bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL
	  && function != NULL)
	{
	  struct type *value_type;

	  value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (function));
	  if (!value_type)
	    internal_error (__FILE__, __LINE__,
			    _("finish_command: function has no target type"));

	  if (TYPE_CODE (value_type) != TYPE_CODE_VOID)
	    print_return_value (SYMBOL_TYPE (function), value_type); 
	}

      do_cleanups (old_chain);
    }
d1918 1
a1918 1
attach_command_continuation (struct continuation_arg *arg)
@


1.175
log
@	* cli/cli-decode.h (CMD_ASYNC_OK): New define.
	(set_cmd_async_ok, get_cmd_async_ok): Declare.
	* cli/cli-decode.c (set_cmd_async_ok): New function.
	(get_cmd_async_ok): New function.
	* cli/cli-cmds.c (init_cli_cmds): Mark "pwd", "help", "info", and
	"show" as async-ok.
	* top.c (execute_command): Use get_cmd_async_ok.
	* infcmd.c: Include cli/cli-decode.h.
	(_initialize_infcmd): Mark "interrupt" as async-ok.
	* Makefile.in (infcmd.o): Depend on cli_decode_h.
@
text
@d72 2
a73 1
static void print_return_value (struct type *value_type);
d1187 1
a1187 1
print_return_value (struct type *value_type)
d1204 2
a1205 1
  switch (gdbarch_return_value (gdbarch, value_type, NULL, NULL, NULL))
d1211 1
a1211 1
      gdbarch_return_value (gdbarch, value_type, stop_registers,
d1275 1
a1275 1
	print_return_value (value_type); 
d1389 1
a1389 1
	    print_return_value (value_type); 
@


1.174
log
@	* infcmd.c (attach_command_post_wait)
	(attach_command_continuation): New.
	(attach_command): Support background async execution, and async
	execution in synchronous mode.
@
text
@d52 1
d2330 3
a2332 2
  add_com ("interrupt", class_run, interrupt_target_command,
	   _("Interrupt the execution of the debugged program."));
@


1.173
log
@	* infcmd.c (jump_command): Postpone disabling stdin until after
	the possible query.
@
text
@d1878 71
d1954 1
d1988 18
a2024 3
  wait_for_inferior (0);
  stop_soon = NO_STOP_QUIETLY;
#endif
d2026 1
a2026 6
  /*
   * If no exec file is yet known, try to determine it from the
   * process itself.
   */
  exec_file = (char *) get_exec_file (0);
  if (!exec_file)
d2028 2
a2029 6
      exec_file = target_pid_to_exec_file (PIDGET (inferior_ptid));
      if (exec_file)
	{
	  /* It's possible we don't have a full path, but rather just a
	     filename.  Some targets, such as HP-UX, don't provide the
	     full path, sigh.
d2031 14
a2044 15
	     Attempt to qualify the filename against the source path.
	     (If that fails, we'll just fall back on the original
	     filename.  Not much more we can do...)
	   */
	  if (!source_full_path_of (exec_file, &full_exec_path))
	    full_exec_path = savestring (exec_file, strlen (exec_file));

	  exec_file_attach (full_exec_path, from_tty);
	  symbol_file_add_main (full_exec_path, from_tty);
	}
    }
  else
    {
      reopen_exec_file ();
      reread_symbols ();
d2047 2
a2048 10
  /* Take any necessary post-attaching actions for this platform.
   */
  target_post_attach (PIDGET (inferior_ptid));

  post_create_inferior (&current_target, from_tty);

  /* Install inferior's terminal modes.  */
  target_terminal_inferior ();

  normal_stop ();
d2050 1
a2050 2
  if (deprecated_attach_hook)
    deprecated_attach_hook ();
@


1.172
log
@	Async mode fixes.
        * Makefile.in (infcmd.o, inf-loop.o): Update dependencies.
        * breakpoint.c (bpstat_do_actions): In async mode,
        don't jump to top expecting stop_bpstat to be already
        updated.
        * event-loop.c (start_event_loop): Call async_enable_stdin
        on exception.
        * event-top.c (async_enable_stdin): Do nothing if sync_execution
        is not set.
        (command_handler): Do not setup continuation here.
        (command_line_handler_continuation): Move to...
        * top.c (command_line_handler_continuation): ... here.
        (execute_command): In async mode, register continuation.
        Don't check frame's language in running in async mode.
        * exceptions.c (throw_exception): Don't do exec_error_cleanups.
        * inf-loop.c (complete_execution): Inline into...
        (inferior_event_handler): ... here.  Clear target_executing before
        doing any cleanups.  Don't try to show prompt if the target was
        resumed.
        * infcmd.c (signal_command): Add support for async mode.
        (finish_command): Only add continuation if the target was
        successfully resumed.
        * remote.c (init_async_opts): Register to_get_thread_local_address
        handler.
        * mi/mi-interp.c (mi_cmd_interpreter_exec): Don't mess
        with sync_execution.
        * tui/tui-interp.c (tui_command_loop): Call async_enable_stdin
        on exception.
@
text
@a922 8
  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously. */
  if (!async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution */
      async_disable_stdin ();
    }

d976 8
@


1.171
log
@	* infcmd.c (notice_args_read): Print result of get_inferior_args.
@
text
@d51 1
d1009 1
d1014 17
d1343 3
d1349 3
a1351 1
     stopped, in fetch_inferior_event.  */
a1368 3
  proceed_to_finish = 1;	/* We want stop_registers, please...  */
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);

@


1.170
log
@	* infcmd.c (kill_if_already_running): Make static.  Use
	target_require_runnable.
	* target.c (target_require_runnable): New.
	* target.h (target_require_runnable): Declare.

	* gdb.texinfo (Starting): Mention always-running targets.
	(Target Commands): Add an anchor for load.
	(Connecting): Explain continue instead of run.
@
text
@d276 3
a278 3
  deprecated_show_value_hack (file, from_tty, c, value);
  /* Might compute the value.  */
  get_inferior_args ();
@


1.169
log
@2008-01-30  Luis Machado  <luisgpm@@br.ibm.com>
	    Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* infcmd.c (default_print_registers_info): Also print hex
	raw contents for TYPE_CODE_DECFLOAT registers.
	* ppc-tdep.h (gdbarch_tdep): Add ppc_dl0_regnum member.
	* rs6000-tdep.c (IS_DFP_PSEUDOREG): New macro.
	(rs6000_register_name): Add support for DFP pseudo-registers.
	(rs6000_pseudo_register_type): Likewise.
	rs6000_pseudo_register_reggroup_p): Likewise.
	(ppc_pseudo_register_read): New function.
	(ppc_pseudo_register_write): Likewise.
	(rs6000_pseudo_register_read): Likewise.
	(rs6000_pseudo_register_write): Likewise.
	(e500_pseudo_register_read): Move checks to
	rs6000_pseudo_register_read.
	(e500_pseudo_register_write): Move checks to
	rs6000_pseudo_register_write.
	(rs6000_gdbarch_init): Initialize tdep->ppc_dl0_regnum.  Install
	rs6000_pseudo_register_read and rs6000_pseudo_register_write
	in gdbarch if SPE or DFP is available.  Adjust gdbarch's
	num_pseudo_regs to account for DFP pseudo regs.
@
text
@d447 1
a447 1
void
d452 4
@


1.169.6.1
log
@gdb/insight for ARCompact (from Richard Stuckey)
@
text
@d1606 9
a1614 19
      {
        /* richards ARC 29/10/27 gdb bug: 9884
           call the gdbarch_register_name once only!
         */
        const char* name = gdbarch_register_name (gdbarch, i);

        /* If the register name is empty, it is undefined for this
           processor, so don't display anything.  */
        if (name == NULL || *name == '\0')
	  continue;

        fputs_filtered (name, file);

        /* richards ARC 29/9/08 gdb bug: 9885
           Some ARC register names are longer than 15 chars!
           There should be a gdbarch_max_register_name_length function
           which could be called here instead of using an integer literal.  */
        print_spaces_filtered (22 - strlen (name), file);
      }
@


1.168
log
@	* Makefile.in (symfile.o): Update.
	* NEWS: Mention exec tracing support.
	* inf-ttrace.c (inf_ttrace_wait): Return TARGET_WAITKIND_EXECD for
	exec events.
	* infcmd.c (kill_if_already_running, detach_command)
	(disconnect_command): Replace SOLIB_RESTART with no_shared_libraries.
	* infrun.c (MAY_FOLLOW_EXEC, may_follow_exec): Delete.
	(follow_exec): Do not check may_follow_exec.  Do not mourn and push
	targets.  Apply the sysroot path to the loaded executable.  Use
	no_shared_libraries.
	* linux-nat.c (linux_child_follow_fork): Print fork following
	messages if verbose.
	(kill_wait_callback): Kill again before waiting a second time.
	* symfile.c (symbol_file_clear): Replace SOLIB_RESTART with
	no_shared_libraries.

	* gdb.base/foll-exec.exp: Update header.  Skip on remote targets.
	Run on GNU/Linux.
	(do_exec_tests): Check for systems which do not support catchpoints.
	Do not match START.
	* gdb.base/foll-fork.exp: Update header.  Skip on remote targets.
	Run on GNU/Linux.  Enable verbose output.
	(check_fork_catchpoints): New.
	(explicit_fork_child_follow, catch_fork_child_follow)
	(tcatch_fork_parent_follow): Update expected messages.
	(do_fork_tests): Use check_fork_catchpoints.
	* gdb.base/foll-vfork.exp: Update header.  Skip on remote targets.
	Run on GNU/Linux.  Enable verbose output.
	(check_vfork_catchpoints): New.
	(vfork_parent_follow_to_bp, tcatch_vfork_then_child_follow): Update
	expected messages.
	(do_vfork_and_exec_tests): Use check_fork_catchpoints.
@
text
@d1625 2
a1626 1
      if (TYPE_CODE (register_type (gdbarch, i)) == TYPE_CODE_FLT)
@


1.167
log
@        * infrun.c (wait_for_inferior): Add treat_exec_as_sigtrap parameter
        and use it.
        (proceed, start_remote): Update call to wait_for_inferior.
        * inferior.h (wait_for_inferior): Update declaration.
        * fork-child.c, infcmd.c, solib-irix.c, solib-osf.c, solib-sunos.c,
        solib-svr4.c, win32-nat.c: Update calls to wait_for_inferior.
        * inf-ttrace.c (inf_ttrace_wait): Report TTEVT_EXEC events as
        TARGET_WAITKIND_EXECD instead of TARGET_WAITKIND_STOPPED.
@
text
@d457 1
a457 3
#if defined(SOLIB_RESTART)
      SOLIB_RESTART ();
#endif
d1975 1
a1975 3
#if defined(SOLIB_RESTART)
  SOLIB_RESTART ();
#endif
d1993 1
a1993 3
#if defined(SOLIB_RESTART)
  SOLIB_RESTART ();
#endif
@


1.166
log
@	* exec.c: #include "arch-utils.h"
	 (print_section_info): Use gdbarch_from_bfd to get at the
	current architecture. Replace current_gdbarch. Fix indention.
	Replace deprecated_print_address_numeric by paddress.
	* Makefile.in (exec.o) Add dependency to arch-utils.h.

	* valprint.c (val_print_string): Replace
	deprecated_print_address_numeric.
	* tracepoint.c (trace_mention, scope_info): Likewise.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1, print_symbol)
	(print_symbol, print_partial_symbols, maintenance_info_psymtabs)
	(maintenance_check_symtabs): Likewise.
	* symfile.c (list_overlays_command): Likewise.
	* stack.c (frame_info, print_block_frame_labels): Likewise.
	* printcmd.c (print_address, print_address_demangle)
	(address_info): Likewise.
	* corefile.c (memory_error): Likewise.
	* infcmd.c (jump_command): Likewise.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints)
	(mention, delete_breakpoint): Likewise.
	* c-valprint.c (print_function_pointer_address, c_val_print): Likewise.
	* dwarf2read.c (dump_die): Likewise.
	* ada-valprint.c (ada_val_print_1): Likewise.
	* f-valprint.c (f_val_print): Likewise.
	* linux-fork.c (info_forks_command): Likewise.
	* m32r-com.c (m32r_load_section, m32r_load)
	(m32r_upload_command): Likewise.

	* ui-out.c (ui_out_field_core_addr): Remove unnecessary comment.
@
text
@d1911 1
a1911 1
  wait_for_inferior ();
@


1.165
log
@	Updated copyright notices for most files.
@
text
@d977 1
a977 1
      deprecated_print_address_numeric (addr, 1, gdb_stdout);
@


1.164
log
@	Remove 'run_cleanup'.
	* defs.h (do_run_cleanups, make_run_cleanup): Remove
	declarations.
	* infcmd.c (run_command_1): Call clear_solib instead
	of do_run_cleanups.
	* jv-lang.c (java_rerun_cleanup): Remove, for lack of
	any use.
	* solib.c (solib_cleanup_queued, do_clear_solib): Remove.
	(update_solib_lib): Don't setup run cleanup.
	(no_shared_libraries): Call clear_solib, not do_clear_solib.
	* utils.c (run_cleanup_chain, make_run_cleanup)
	(do_run_cleanups): Remove.
@
text
@d4 2
a5 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
   Free Software Foundation, Inc.
@


1.163
log
@	Remove CLEAR_SOLIB use.
	* corelow.c (core_close): Don't check for CLEAR_SOLIB.
	* infcmd.c (attach_command): Likewise.
@
text
@d485 1
a485 1
  do_run_cleanups (NULL);
@


1.162
log
@PR exp/1926
* infcmd.c (registers_info): Check for a user register before
calling target's gdbarch_print_registers_info().  If found to be
so, extract the implicit value of user register and call
print_scalar_formatted().
* Makefile.in: (infcmd.o): Add $(user_regs_h).
@
text
@d1890 1
a1890 5
#ifdef CLEAR_SOLIB
      CLEAR_SOLIB ();
#else
      clear_solib ();
#endif
@


1.161
log
@2007-10-22  Markus Deuling  <deuling@@de.ibm.com>

	* infcmd.c (default_print_registers_info, print_return_value)
	(print_vector_info, print_float_info): Replace current_gdbarch by
	gdbarch.
	(registers_info): Use get_frame_arch to get at the current
	architecture by frame_info.
@
text
@d50 1
d1709 1
a1709 1
      
d1714 1
a1714 2
	int regnum = frame_map_name_to_regnum (frame,
					       start, end - start);
d1717 17
a1733 2
	    gdbarch_print_registers_info (gdbarch, gdb_stdout,
					  frame, regnum, fpregs);
d1737 1
a1737 1
	
@


1.160
log
@	* infcmd.c (print_return_value): Remove STRUCT_RETURN argument.
	(finish_command_continuation, finish_command): Adapt callers.
@
text
@d1186 1
a1186 1
      gdbarch_return_value (current_gdbarch, value_type, stop_registers,
d1580 2
a1581 2
  const int numregs = gdbarch_num_regs (current_gdbarch)
		      + gdbarch_num_pseudo_regs (current_gdbarch);
d1609 2
a1610 2
      if (gdbarch_register_name (current_gdbarch, i) == NULL
	  || *(gdbarch_register_name (current_gdbarch, i)) == '\0')
d1613 1
a1613 1
      fputs_filtered (gdbarch_register_name (current_gdbarch, i), file);
d1615 1
a1615 1
					  (current_gdbarch, i)), file);
d1626 1
a1626 1
      if (TYPE_CODE (register_type (current_gdbarch, i)) == TYPE_CODE_FLT)
d1630 1
a1630 1
	  val_print (register_type (current_gdbarch, i), buffer, 0, 0,
d1634 1
a1634 1
	  for (j = 0; j < register_size (current_gdbarch, i); j++)
d1637 1
a1637 1
	      if (gdbarch_byte_order (current_gdbarch) == BFD_ENDIAN_BIG)
d1640 1
a1640 1
		idx = register_size (current_gdbarch, i) - 1 - j;
d1648 1
a1648 1
	  val_print (register_type (current_gdbarch, i), buffer, 0, 0,
d1652 1
a1652 1
	  if (TYPE_VECTOR (register_type (current_gdbarch, i)) == 0)
d1655 1
a1655 1
	      val_print (register_type (current_gdbarch, i), buffer, 0, 0,
d1668 1
d1675 1
d1679 1
a1679 1
      gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
d1717 1
a1717 1
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
d1729 2
a1730 2
	    && regnum < gdbarch_num_regs (current_gdbarch)
			+ gdbarch_num_pseudo_regs (current_gdbarch))
d1732 1
a1732 1
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
d1741 1
a1741 1
	for (group = reggroup_next (current_gdbarch, NULL);
d1743 1
a1743 1
	     group = reggroup_next (current_gdbarch, group))
d1755 2
a1756 2
		 regnum < gdbarch_num_regs (current_gdbarch)
			  + gdbarch_num_pseudo_regs (current_gdbarch);
d1759 2
a1760 3
		if (gdbarch_register_reggroup_p (current_gdbarch, regnum,
						 group))
		  gdbarch_print_registers_info (current_gdbarch,
d1797 2
a1798 2
	   regnum < gdbarch_num_regs (current_gdbarch)
		    + gdbarch_num_pseudo_regs (current_gdbarch);
d2017 2
a2018 2
	   regnum < gdbarch_num_regs (current_gdbarch)
		    + gdbarch_num_pseudo_regs (current_gdbarch);
@


1.159
log
@	* breakpoint.c (do_restore_lang_radix_cleanup): Remove.
	(resolve_pending_breakpoint): Remove.
	(re_enable_breakpoints_in_shlibs): Remove.
	(unlink_locations_from_global_list): New.
	(update_breakpoint_locations): New.
	(breakpoint_re_set_one): Don't bail out on pending breakpoints.
	Use parse_condition and update_breakpoint_location to
	reset breakpoint.  Ignore 'symbol not found' error from
	decode_line_1.
	(breakpoint_re_set): Don't emit newline before the
	reason why breakpoint is not reset.
	(do_enable_breakpoint): Don't specially process pending
	breakpoints.
	(free_bp_location): New.
	(break_command_1): For pending breakpoints, initialize
	all fields of a sal with zeroes.
	* breakpoint.h (re_enable_breakpoints_in_shlibs): Remove.
	* infcmd.c (post_create_inferior): Don't call
	re_enable_breakpoints_in_shlibs.
	* infrun.c (handle_inferior_event): Likewise.
	* solib-irix.c (irix_solib_create_inferior_hook): Likewise.
	* solib-osf.c (osf_solib_create_inferior_hook): Likewise.
	* win32-nat.c (get_win32_debug_event): Likewise.
@
text
@d69 1
a69 1
static void print_return_value (int struct_return, struct type *value_type);
d1163 1
a1163 1
print_return_value (int struct_return, struct type *value_type)
a1242 2
      int struct_return;
      int gcc_compiled;
d1249 2
a1250 11
      if (TYPE_CODE (value_type) == TYPE_CODE_VOID)
	{
	  do_exec_cleanups (cleanups);
	  return;
	}

      CHECK_TYPEDEF (value_type);
      gcc_compiled = BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function));
      struct_return = using_struct_return (value_type, gcc_compiled);

      print_return_value (struct_return, value_type); 
a1354 2
	  int struct_return;
	  int gcc_compiled;
d1361 2
a1362 9
	  /* FIXME: Shouldn't we do the cleanups before returning?  */
	  if (TYPE_CODE (value_type) == TYPE_CODE_VOID)
	    return;

	  CHECK_TYPEDEF (value_type);
	  gcc_compiled = BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function));
	  struct_return = using_struct_return (value_type, gcc_compiled);

	  print_return_value (struct_return, value_type); 
@


1.158
log
@Revert accidentally committed hunk... Sorry.
@
text
@a435 4

      /* Enable any breakpoints which were disabled when the
	 underlying shared library was deleted.  */
      re_enable_breakpoints_in_shlibs ();
@


1.157
log
@	* infcmd.c (post_create_inferior): Update comment.
	(run_command_1): Always call post_create_inferior with 0 as
	from_tty.

	* i386-cygwin-tdep.h: New.
	* i386-cygwin-tdep.c: Include "i386-cygwin-tdep.h".
	(win32_xfer_shared_library): Make it extern.

	* win32-nat.c: Include gdb_obstack.h and xml-support.h and
	i386-cygwin-tdep.h.
	(win32_so_ops): Delete.
	(get_relocated_section_addrs): Delete.
	(solib_symbols_add): Delete.
	(register_loaded_dll): Delete.
	(win32_make_so): New.
	(handle_load_dll): Use win32_make_so.
	(win32_free_so): Free the passed in so.
	(win32_relocate_section_addresses): Delete.
	(win32_solib_create_inferior_hook): Delete.
	(handle_unload_dll): Don't add PE offset here.  Free so with
	win32_free_so instead of free_so.
	(win32_special_symbol_handling): Delete.
	(get_win32_debug_event): Remove unneeded calls.  Set state to
	TARGET_WAITKIND_LOADED on a dll unload.
	(do_initial_win32_stuff): Clear cygwin_load_start and
	cygwin_load_end.
	(map_code_section_args): Delete.
	(dll_code_sections_add): Delete.
	(core_section_load_dll_symbols): Delete.
	(win32_xfer_shared_libraries): New.
	(win32_current_sos): Delete.
	(win32_xfer_partial): New.
	(open_symbol_file_object): Delete.
	(in_dynsym_resolve_code): Delete.
	(init_win32_ops): Set win32_xfer_partial as to_xfer_partial member
	of win32_ops.  Remove win32_so_ops settings.  Don't set
	current_target_so_ops here.

	* Makefile.in (i386_cygwin_tdep_h): New variable.
	(i386-cygwin-tdep.o): Update dependencies.
	(win32-nat.o): Update dependencies.
@
text
@a1199 2
  stb = ui_out_stream_new (uiout);
  old_chain = make_cleanup_ui_out_stream_delete (stb);
d1203 2
d1212 1
a1215 1
      /* Just print the type.  */
d1217 3
a1219 3
      type_print (value_type, NULL, stb->stream, 0);
      ui_out_field_stream (uiout, "return-type", stb);
      ui_out_text (uiout, ". Cannot determine contents.\n");
a1220 1
  do_cleanups (old_chain);
@


1.156
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d420 3
a422 1
	 that we can add them with the correct value for FROM_TTY.  */
d563 3
a565 1
  post_create_inferior (&current_target, from_tty);
d1200 2
a1204 2
      stb = ui_out_stream_new (uiout);
      old_chain = make_cleanup_ui_out_stream_delete (stb);
a1211 1
      do_cleanups (old_chain);
d1215 1
d1217 3
a1219 3
      ui_out_field_string (uiout, "return-type", TYPE_NAME (value_type));
      ui_out_text (uiout, ".");
      ui_out_text (uiout, " Cannot determine contents\n");
d1221 1
@


1.155
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (REGISTER_NAME): Replace by gdbarch_register_name.
	* tracepoint.c (scope_info): Likewise.
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* sh-tdep.c (sh_register_reggroup_p): Likewise.
	* sh64-tdep.c (sh64_do_fp_register, sh64_do_register)
	(sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_reggroup_p): Likewise.
	* remote-sim.c (gdbsim_fetch_register): Likewise.
	* remote.c (packet_reg): Likewise (comment).
	* reggroups.c (default_register_reggroup_p): Likewise.
	* regcache.c (regcache_dump): Likewise.
	* printcmd.c (address_info): Likewise.
	* ppc-linux-nat.c (fetch_register, store_register): Likewise.
	* mt-dep.c (mt_registers_info): Likewise.
	* mn10300-tdep.c (mn10300_dwarf2_reg_to_regnum): Likewise (comment).
	* mips-tdep.c (mips_register_reggroup_p, mips_read_fp_register_single)
	(mips_read_fp_register_double, mips_print_fp_register)
	(mips_print_register, print_gp_register_row, mips_print_registers_info)
	(mips_register_sim_regno): Likewise.
	* m68klinux-nat.c (regmap, fetch_register, store_register): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_register)
	(inf_ptrace_store_register): Likewise.
	* infcmd.c (default_print_registers_info): Likewise.
	* ia64-linux-nat.c (ia64_linux_fetch_register)
	(ia64_linux_store_register): Likewise.
	* i386-linux-nat.c (fetch_register, store_register): Likewise.
	* i386gnu-nat.c (gnu_fetch_registers, gnu_store_registers): Likewise.
	* hppa-linux-nat.c (fetch_register, store_register): Likewise.
	* hppa-hpux-nat.c (hppa_hpux_fetch_register)
	(hppa_hpux_store_register): Likewise.
	* findvar.c (locate_var_value): Likewise.
	* dwarf2loc.c (locexpr_describe_location): Likewise.
	* dwarf2-frame.c (execute_cfa_program): Likewise.
	* arm-tdep.c (arm_push_dummy_call): Likewise.
	* arch-utils.c (legacy_register_sim_regno): Likewise.
	* alpha-tdep.c (alpha_register_reggroup_p): Likewise.
	* alpha-nat.c (fetch_osf_core_registers): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers, mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d20 1
a20 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.154
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (NUM_REGS): Replace by gdbarch_num_regs.
	* i386-tdep.c (i386_dbx_reg_to_regnum)
	(i386_svr4_reg_to_regnum): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_registers)
	(inf_ptrace_store_registers): Likewise.
	* corelow.c (get_core_registers): Likewise.
	* i386-linux-nat.c (supply_gregset, fill_gregset)
	(i386_linux_fetch_inferior_registers)
	(i386_linux_store_inferior_registers): Likewise.
	* remote.c (init_remote_state,packet_reg_from_regnum)
	(packet_reg_from_pnum,process_g_packet,remote_fetch_registers)
	(remote_prepare_to_store,store_registers_using_G)
	(remote_store_registers,remote_arch_state): Likewise.
	* tracepoint.c (encode_actions): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers,mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* tui/tui-regs.c (tui_show_register_group)
	(tui_show_register_group): Likewise.
	* xtensa-tdep.h (FP_ALIAS): Likewise.
	* xtensa-tdep.c (xtensa_register_name,xtensa_register_type)
	(xtensa_reg_to_regnum,xtensa_pseudo_register_read)
	(xtensa_pseudo_register_write,xtensa_register_reggroup_p): Likewise.
	* win32-nat.c (do_win32_fetch_inferior_registers)
	(do_win32_store_inferior_registers,fetch_elf_core_registers
	* user-regs.h: Likewise (comment).
	* user-regs.c (user_reg, user_reg_map_name_to_regnum): Likewise.
	* trad-frame.c (trad_frame_alloc_saved_regs): Likewise.
	* target-descriptions.h: Likewise (comment).
	* target-descriptions.c (tdesc_use_registers): Likewise (comment).
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* sh64-tdep.c (sh64_do_pseudo_register,sh64_print_register)
	(sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_sim_regno): Likewise.
	* rs6000-nat.c (fetch_register,store_register): Likewise.
	* remote-sim.c (one2one_register_sim_regno,gdbsim_fetch_register)
	(gdbsim_fetch_register,gdbsim_store_register): Likewise.
	* remote-mips.c (mips_fetch_registers,mips_store_registers): Likewise.
	* remote-m32r-sdi.c (m32r_fetch_registers)
	(m32r_store_registers): Likewise.
	* reggroups.c (default_register_reggroup_p): Likewise.
	* regcache.c (init_regcache_descr,register_size,regcache,regcache_save)
	(regcache_restore,regcache_dump): Likewise.
	* monitor.c (monitor_fetch_registers,monitor_store_registers): Likewise.
	* mips-tdep.c (mips_xfer_register,mips_register_name)
	(mips_register_reggroup_p,mips_pseudo_register_read)
	(mips_pseudo_register_write,mips_convert_register_p,mips_register_type)
	(mips_unwind_pc,mips_unwind_sp,mips_unwind_dummy_id,set_reg_offset)
	(mips16_scan_prologue,mips_insn16_frame_cache,reset_saved_regs)
	(mips32_scan_prologue,mips_insn32_frame_cache,read_next_frame_reg)
	(mips_n32n64_return_value,mips_o32_return_value,mips_o64_return_value)
	(print_gp_register_row,mips_print_registers_info)
	(mips_stab_reg_to_regnum,mips_dwarf_dwarf2_ecoff_reg_to_regnum)
	(mips_register_sim_regno): Likewise.
	* mips-linux-tdep.c (mips_linux_o32_sigframe_init)
	(mips_linux_n32n64_sigframe_init): Likewise.
	* mips-linux-nat.c (mips_linux_register_addr)
	(mips64_linux_register_addr): Likewise.
	* findvar.c (value_of_register): Likewise.
	* infcmd.c (default_print_registers_info,registers_info)
	(print_vector_info,print_float_info): Likewise.
	* mips64obsd-tdep.c (mips64obsd_sigframe_init): Likewise.
	* inf-child.c (inf_child_fetch_inferior_registers): Likewise.
	* m68k-tdep.c (m68k_dwarf_reg_to_regnum): Likewise.
	* m68hc11-tdep.c (m68hc11_frame_unwind_cache(: Likewise.
	* m32r-tdep.c (m32r_frame_unwind_cache): Likewise.
	* ia64-linux-nat.c (ia64_register_addr,ia64_cannot_fetch_register)
	(ia64_cannot_store_register,ia64_linux_fetch_registers)
	(ia64_linux_store_registers): Likewise.
	* hpux-thread.c (hpux_thread_fetch_registers)
	(hpux_thread_store_registers): Likewise.
	* h8300-tdep.c (E_PSEUDO_CCR_REGNUM,E_PSEUDO_EXR_REGNUM)
	(h8300_init_frame_cache,h8300_frame_cache,h8300_frame_prev_register)
	(h8300_register_type): Likewise.
	* dwarf2-frame.c (dwarf2_frame_cache)
	(dwarf2_frame_state_alloc_regs): Likewise.
	* cris-tdep.c (cris_register_size,cris_cannot_fetch_register)
	(cris_cannot_store_register,crisv32_cannot_fetch_register)
	(crisv32_cannot_store_register,cris_register_name): Likewise.
	* avr-tdep.c (avr_frame_unwind_cache): Likewise.
	* arch-utils.c (legacy_register_sim_regno)
	(legacy_virtual_frame_pointer): Likewise.
	* arm-tdep.c (arm_make_prologue_cache,arm_register_sim_regno):Likewise.
	* arm-tdep.h: Likewise (comment).
	* frv-tdep.c (frv_register_sim_regno): Likewise.
	* m68klinux-nat.c (old_fetch_inferior_registers)
	(old_store_inferior_registers): Likewise.
	* m32c-tdep.c (m32c_virtual_frame_pointer): Likewise.
	* irix5-nat.c (fetch_core_registers): Likewise.
	* hppa-tdep.c (hppa_frame_cache): Likewise.
	* hppa-linux-nat.c (hppa_linux_register_addr)
	(hppa_linux_fetch_inferior_registers)
	(hppa_linux_store_inferior_registers): Likewise.
	* hppa-hpux-nat.c (hppa_hpux_fetch_inferior_registers)
	(hppa_hpux_store_inferior_registers): Likewise.
	* amd64-nat.c (amd64_native_gregset_reg_offset)
	(amd64_supply_native_gregset,amd64_collect_native_gregset): Likewise.
	* dbug-rom.c (dbug_regname): Likewise.
	* m68hc11-tdep.c (m68hc11_frame_unwind_cache)
	(HARD_PAGE_REGNUM (comment)): Likewise.
	* gdbarch.sh (NUM_PSEUDO_REGS): Replace by gdbarch_num_pseudo_regs.
	* i386-tdep.c (i386_dbx_reg_to_regnum)
	(i386_svr4_reg_to_regnum): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers,mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
	* tui/tui-regs.c (tui_show_register_group): Likewise.
	* xtensa-tdep.h (FP_ALIAS): Likewise.
	* user-regs.h: Likewise (comment).
	* user-regs.c (user_reg, user_reg_map_name_to_regnum): Likewise.
	* trad-frame.c (trad_frame_alloc_saved_regs): Likewise.
	* target-descriptions.h: Likewise (comment).
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* sh64-tdep.c (sh64_print_register,sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_sim_regno): Likewise.
	* regcache.c (init_regcache_descr,register_size,regcache,regcache_save
	(regcache_restore,regcache_dump): Likewise.
	* mips-tdep.c (print_gp_register_row,mips_print_registers_info)
	(mips_dwarf_dwarf2_ecoff_reg_to_regnum)
	(mips_stab_reg_to_regnum): Likewise.
	* findvar.c (value_of_register): Likewise.
	* infcmd.c (default_print_registers_info,registers_info)
	(print_vector_info,print_float_info): Likewise.
	* m68k-tdep.c (m68k_dwarf_reg_to_regnum): Likewise.
	* h8300-tdep.c (h8300_register_type): Likewise.
	* dwarf2-frame.c (dwarf2_frame_cache): Likewise.
	* frame.h (SIZEOF_FRAME_SAVED_REGS): Likewise.
	* xtensa-tdep.c (xtensa_register_type,xtensa_reg_to_regnum)
	(xtensa_pseudo_register_read,xtensa_pseudo_register_write): Likewise.
	* parse.c: Remove comment.
	* gdbarch.c, gdbarch.h: Regenerate
@
text
@d1631 2
a1632 1
      if (REGISTER_NAME (i) == NULL || *(REGISTER_NAME (i)) == '\0')
d1635 3
a1637 2
      fputs_filtered (REGISTER_NAME (i), file);
      print_spaces_filtered (15 - strlen (REGISTER_NAME (i)), file);
@


1.153
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_BYTE_ORDER): Replace by gdbarch_byte_order.
	* ax-gdb.c (gen_bitfield_ref): Likewise.
	* mi/mi-main.c (get_register): Likewise.
	* findvar.c (default_value_from_register, extract_signed_integer)
	(extract_unsigned_integer, extract_long_unsigned_integer)
	(store_signed_integer, store_unsigned_integer): Likewise.
	* regcache.c (regcache_dump): Likewise.
	* value.c (lookup_internalvar, value_of_internalvar)
	(set_internalvar): Likewise.
	* defs.h: Likewise.
	* valprint.c (print_binary_chars, print_octal_chars)
	(print_decimal_chars, print_hex_chars, print_char_chars): Likewise.
	* infcmd.c (default_print_registers_info): Likewise.
	* arch-utils.c (selected_byte_order, show_endian): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* doublest.c (floatformat_from_length, floatformat_from_type)
	(extract_typed_floating, store_typed_floating): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d1602 2
a1603 1
  const int numregs = NUM_REGS + NUM_PSEUDO_REGS;
d1747 2
a1748 1
	    && regnum < NUM_REGS + NUM_PSEUDO_REGS)
d1772 4
a1775 1
	    for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
d1815 4
a1818 1
      for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
d2035 4
a2038 1
      for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
@


1.152
log
@2007-04-18  Denis Pilat  <denis.pilat@@st.com>

	* infcmd.c (post_create_inferior): Start with a call to
	target_terminal_ours().
@
text
@d1656 1
a1656 1
	      if (TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)
@


1.151
log
@	* breakpoint.c (bpstat_num): Add int *num parameter.
	* breakpoint.h (bpstat_num): Likewise.
	* infcmd.c (continue_command): Adjust to new bpstat_num
	interface.
	(program_info): Likewise.
@
text
@d409 3
@


1.151.2.1
log
@Daniel Jacobowitz' update to Michael Snyder's reverse debugging patches
@
text
@a1268 2
static void finish_backwards (struct symbol *);

d1309 10
d1327 1
a1327 5
      if (target_get_execution_direction () == EXEC_REVERSE)
	printf_filtered ("Run back to call of ");
      else
	printf_filtered ("Run till exit from ");

a1330 17
  if (target_get_execution_direction () == EXEC_REVERSE)
    {
      /* Split off at this point.  */
      finish_backwards (function);
      return;
    }

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);

  if (!target_can_async_p ())
    old_chain = make_cleanup_delete_breakpoint (breakpoint);
  else
    old_chain = make_exec_cleanup_delete_breakpoint (breakpoint);

a1386 60

static void
finish_backwards (struct symbol *function)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;
  int back_up;

  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__,
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* Let's cheat and not worry about async until later.  */

  /* We don't need a return value.  */
  proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point,
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != read_pc ())
    {
      /* Set breakpoint and continue.  */
      breakpoint =
	set_momentary_breakpoint (sal,
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns.  */
      back_up = bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL;
      do_cleanups (old_chain);
    }
  else
    back_up = 1;
  if (back_up)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there --
	 we just need to back up by one more single-step.  */
      /* (Kludgy way of letting wait_for_inferior know...) */
      step_range_start = step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

@


1.150
log
@	* frame.c (deprecated_selected_frame): Rename to...
	(selected_frame): ...this.  Make static.
	(get_selected_frame, select_frame): Update.
	* frame.h (deprected_select_frame): Delete.
	(deprecated_safe_get_selected_frame): Update comments.

	* breakpoint.c, cli/cli-cmds.c, f-valprint.c, infcmd.c, inflow.c,
	infrun.c, stack.c, tui/tui-disasm.c, tui/tui-source.c,
	tui/tui-winsource.c, valops.c, varobj.c, findvar.c, macroscope.c,
	parse.c, regcache.h, sh64-tdep.c, tui/tui-hooks.c, tui/tui-win.c,
	tui/tui.c: Replace references to deprecated_selected_frame.
@
text
@d625 17
a641 2
      int num = bpstat_num (&bs);
      if (num == 0 && from_tty)
a645 11
      while (num != 0)
	{
	  set_ignore_count (num,
			    parse_and_eval_long (proc_count_exp) - 1,
			    from_tty);
	  /* set_ignore_count prints a message ending with a period.
	     So print two spaces before "Continuing.".  */
	  if (from_tty)
	    printf_filtered ("  ");
	  num = bpstat_num (&bs);
	}
d1393 2
a1394 1
  int num = bpstat_num (&bs);
d1407 1
a1407 1
  else if (num != 0)
d1411 1
a1411 1
      while (num != 0)
d1413 1
a1413 1
	  if (num < 0)
d1420 1
a1420 1
	  num = bpstat_num (&bs);
@


1.149
log
@Copyright updates for 2007.
@
text
@a1297 2
  if (deprecated_selected_frame == NULL)
    error (_("No selected frame."));
d1299 1
a1299 1
  frame = get_prev_frame (deprecated_selected_frame);
d1317 1
a1317 1
  function = find_pc_function (get_frame_pc (deprecated_selected_frame));
d1678 1
d1684 1
a1684 2
  if (deprecated_selected_frame == NULL)
    error (_("No selected frame."));
d1689 1
a1689 1
				    deprecated_selected_frame, -1, fpregs);
d1722 1
a1722 1
	int regnum = frame_map_name_to_regnum (deprecated_selected_frame,
d1727 1
a1727 1
					  deprecated_selected_frame, regnum, fpregs);
d1741 1
a1741 1
					  deprecated_selected_frame, regnum, fpregs);
d1767 1
a1767 1
						gdb_stdout, deprecated_selected_frame,
a1794 5
  if (!target_has_registers)
    error (_("The program has no registers now."));
  if (deprecated_selected_frame == NULL)
    error (_("No selected frame."));

d1818 5
a1822 1
  print_vector_info (current_gdbarch, gdb_stdout, deprecated_selected_frame, args);
a2011 5
  if (!target_has_registers)
    error (_("The program has no registers now."));
  if (deprecated_selected_frame == NULL)
    error (_("No selected frame."));

d2036 3
d2040 1
a2040 1
		    deprecated_selected_frame, args);
@


1.148
log
@	* Makefile.in (SFILES): Add new and missed files.
	(target_descriptions_h): New.
	(COMMON_OBS): Add target-descriptions.o.
	(arch-utils.o, infcmd.o, remote.o, target.o): Update.
	(target-descriptions.o): New.
	* arch-utils.c (gdbarch_info_fill): Check for a target
	description.
	* target-descriptions.c, target-descriptions.h: New files.
	* gdbarch.sh: Add target_desc to info.  Declare it in gdbarch.h.
	Correct typos.
	(gdbarch_list_lookup_by_info): Check target_desc.
	* gdbarch.c, gdbarch.h: Regenerated.
	* target.c (update_current_target): Mention to_read_description.
	(target_pre_inferior): Call target_clear_description.
	(target_read_description): New.
	* target.h (struct target_ops): Add to_read_description.
	(target_read_description): New prototype.
	* infcmd.c (post_create_inferior): Call target_find_description.
	* remote.c (remote_open_1): Likewise.
	(extended_remote_create_inferior): Add a comment.
	(extended_remote_async_create_inferior): Likewise.
@
text
@d3 2
a4 2
   Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
@


1.147
log
@Index: ChangeLog
2006-11-20  Andrew Cagney  <cagney@@redhat.com>

	* linux-nat.h: Refer to GNU/Linux or Linux kernel.
	* linux-nat.c (lin_lwp_attach_lwp, linux_nat_thread_alive): Ditto.
	* infcmd.c (attach_command): Ditto.
	* hppa-linux-tdep.c (hppa_linux_regset): Ditto.
	* mn10300-linux-tdep.c: Ditto.  Update copyright year.
	* frv-linux-tdep.c: Ditto.  Update copyright year.
@
text
@d51 1
d409 6
@


1.146
log
@	* gdbcmd.h (detachlist): Declare.
	* infcmd.c (_initialize_infcmd): Define "detach" as prefix
	command.
	* linux-fork.c (_initialize_linux_fork): Rename
	"detach-checkpoint" to "detach checkpoint" and "detach-fork" to
	"detach fork".
	* cli/cli-cmds.c (detachlist): Define.
	(init_cmd_lists): Initialize it.
	* cli/cli-cmds.h (detachlist): Declare.

doc/:
	* gdb.texinfo (Processes): Rename "detach-fork" to "detach fork".

testsuite/:
	* gdb.base/multi-forks.exp: Use "detach fork" instead of
	"detach-fork".
@
text
@d1860 2
a1861 2
     target.  This has been observed on Linux using glibc 2.3. How to
     reproduce:
@


1.146.2.1
log
@Index: ChangeLog
2006-11-20  Andrew Cagney  <cagney@@redhat.com>

	* linux-nat.h: Refer to GNU/Linux or Linux kernel.
	* linux-nat.c (lin_lwp_attach_lwp, linux_nat_thread_alive): Ditto.
	* infcmd.c (attach_command): Ditto.
	* hppa-linux-tdep.c (hppa_linux_regset): Ditto.
	* mn10300-linux-tdep.c: Ditto.  Update copyright year.
	* frv-linux-tdep.c: Ditto.  Update copyright year.
@
text
@d1860 2
a1861 2
     target.  This has been observed on GNU/Linux using glibc 2.3. How
     to reproduce:
@


1.145
log
@gdb/
2006-09-21  Vladimir Prus  <vladimir@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>
	    Nathan Sidwell  <nathan@@codesourcery.com>

	* Makefile.in (SFILES): Add memory-map.c and xml-support.c.
	(memory_map_h, xml_support_h): New.
	(target_h): Add vec_h dependency.
	(COMMON_OBS): Add memory-map.o and xml-support.o.
	(memory-map.o, xml-support.o): New rules.
	(remote.o): Update.
	* exceptions.h (enum errors): Add XML_PARSE_ERROR.
	* infcmd.c (run_command_1, attach_command): Call target_pre_inferior.
	* memattr.c (default_mem_attrib): Initialize blocksize.
	(target_mem_region_list, mem_use_target)
	(target_mem_regions_valid, mem_region_cmp, mem_region_init)
	(require_user_regions, require_target_regions)
	(invalidate_target_mem_regions): New.
	(create_mem_region): Use mem_region_init.
	(mem_clear): Move higher.
	(lookup_mem_region): Use require_target_regions.
	(mem_command): Implement "mem auto".
	(mem_info_command): Handle target-supplied regions and flash
	attributes.
	(mem_enable_command, mem_disable_command, mem_delete_command): Use
	require_user_regions.
	(_initialize_mem): Mention "mem auto" in help.
	* memattr.h (enum mem_access_mode): Add MEM_FLASH.
	(struct mem_attrib): Add blocksize.
	(invalidate_target_mem_regions, mem_region_init, mem_region_cmp): New
	prototypes.
	* remote.c: Include "memory-map.h".
	(PACKET_qXfer_memory_map): New enum value.
	(remote_protocol_features): Add qXfer:memory-map:read.
	(remote_xfer_partial): Handle memory maps.
	(remote_memory_map): New.
	(init_remote_ops, init_remote_async_ops): Set to_memory_map.
	(_initialize_remote): Register qXfer:memory-map:read.
	* target.c (update_current_target): Mention to_memory_map.
	(target_memory_map, target_pre_inferior): New.
	(target_preopen): Call target_pre_inferior.
	* target.h: Include "vec.h".
	(enum target_object): Add TARGET_OBJECT_MEMORY_MAP.
	(struct target_ops): Add to_memory_map.
	(target_memory_map, target_pre_inferior): New prototypes.
	* memory-map.c, memory-map.h, xml-support.c, xml-support.h: New files.
gdb/doc/
2006-09-21  Vladimir Prus  <vladimir@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* gdb.texinfo (Memory Region Attributes): Mention target-supplied
	memory regions and "mem auto".
@
text
@d2126 1
a2126 1
  add_com ("detach", class_run, detach_command, _("\
d2129 2
a2130 1
you were debugging a file, the file is closed and gdb no longer accesses it."));
@


1.144
log
@        * infcmd.c (post_create_inferior): Fix copy/paste error introduced
        in the previous change.
@
text
@d471 4
d1854 4
@


1.144.12.1
log
@* linux-nat.c (linux_nat_attach, linux_nat_detach): Make attach/
detach work asynchronously.

* inf-ptrace.c (inf_ptrace_attach): Ditto.

* infcmd.c (attach_command): Ditto.

* inf-child.c (inf_child_target): Reset to_terminal_inferior/
to_terminal_ours to synchronous methods.

* async-nat-inferior.c (gdb_process_events): Don't poll for
exceptions.
(gdb_process_pending_event): Use pid_to_ptid.
(gdb_inferior_reset): Remove last_thread component.

* async-nat-inferior.h (struct gdb_inferior_status): Remove
last_thread component.
@
text
@d1890 3
a1892 6
  if (!target_can_async_p ())
    {
      stop_soon = STOP_QUIETLY_NO_SIGSTOP;
      wait_for_inferior ();
      stop_soon = NO_STOP_QUIETLY;
    }
@


1.144.10.1
log
@2006-05-02  Michael Snyder  <msnyder@@redhat.com>

	* breakpoint.h (breakpoint_silence): Export.
	* breakpoint.c (breakpoint_silence): New function.
	* infcmd.c (finish_command): Check for reverse exec direction.
	(finish_backward): New function, handle finish cmd in reverse.
	* infrun.c (enum inferior_stop_reason): Add NO_HISTORY reason.
	(handle_inferior_event): Handle TARGET_WAITKIND_NO_HISTORY.
	Handle stepping over a function call in reverse.
	Handle stepping thru a line range in reverse.
	Handle setting a step-resume breakpoint in reverse.
	Handle stepping into a function in reverse.
	Handle stepping between line ranges in reverse.
	(print_stop_reason): Print reason for NO_HISTORY.
@
text
@a1253 2
static void finish_backwards (struct symbol *);

d1296 10
d1314 1
a1314 5
      if (target_get_execdir () == EXEC_REVERSE)
	printf_filtered (_("Run backward to before call of "));
      else
	printf_filtered (_("Run till exit from "));

a1317 19
  if (target_get_execdir () == EXEC_REVERSE)
    {
      /* Split off at this point.  */
      if (async_exec)
	error (_("Asynchronous finish not supported in reverse mode."));
      finish_backwards (function);
      return;
    }

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);

  if (!target_can_async_p ())
    old_chain = make_cleanup_delete_breakpoint (breakpoint);
  else
    old_chain = make_exec_cleanup_delete_breakpoint (breakpoint);

a1373 58

static void
finish_backwards (struct symbol *function)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;

  if (find_pc_partial_function (get_frame_pc (get_selected_frame (NULL)),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__, 
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* Let's cheat and not worry about async until later.  */

  /* We don't need a return value.  */
  proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point, 
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != get_frame_pc (get_selected_frame (NULL)))
    {
      /* Set breakpoint and continue.  */
      breakpoint = 
	set_momentary_breakpoint (sal, 
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done 
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns,
         but we still need the breakpoint below.  */
    }
  if (breakpoint != NULL
      && bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there -- 
	 we just need to back up by one more single-step.  */
      do_cleanups (old_chain);
      /* (Kludgy way of letting wait_for_inferior know...) */
      step_range_start = step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

@


1.144.2.1
log
@Merge XML and VFP support to this branch.
@
text
@a50 3
#include "available.h"

#include "gdb_obstack.h"
a407 21
  /* The first thing we do after creating an inferior is update the
     architecture with information provided by the target.

     FIXME: In some cases we could do this after target_open
     instead; should we?  */
  if (gdbarch_available_features_support (current_gdbarch))
    {
      struct gdb_feature_set *features;
      struct obstack tmp_obstack;

      obstack_init (&tmp_obstack);
      features = target_available_features (target, &tmp_obstack);

      /* Switch to a new architecture.  We must call this even if
	 the target could not return features; if the previous
	 target could, we may have the wrong architecture selected.  */
      arch_set_available_features (features);

      obstack_free (&tmp_obstack, NULL);
    }

d1287 2
d1290 1
a1290 1
  frame = get_prev_frame (get_selected_frame (_("No selected frame.")));
d1308 1
a1308 1
  function = find_pc_function (get_frame_pc (get_selected_frame (NULL)));
d1674 2
d1680 1
a1680 2
				    get_selected_frame (_("No selected frame.")),
				    -1, fpregs);
d1713 1
a1713 1
	int regnum = frame_map_name_to_regnum (get_selected_frame (_("No selected frame.")),
d1718 1
a1718 1
					  get_selected_frame (NULL), regnum, fpregs);
d1732 1
a1732 1
					  get_selected_frame (NULL), regnum, fpregs);
d1758 1
a1758 1
						gdb_stdout, get_selected_frame (NULL),
d1788 2
d1814 1
a1814 1
  print_vector_info (current_gdbarch, gdb_stdout, get_selected_frame (NULL), args);
d2002 2
d2030 1
a2030 1
		    get_selected_frame (NULL), args);
@


1.144.2.1.2.1
log
@Add experimental support for SymbianOS-related protocol features.
@
text
@d2071 2
a2072 2
  add_setshow_string_cmd ("args", class_run,
			  &inferior_args, _("\
d2076 3
a2078 3
			  notice_args_set,
			  notice_args_read,
			  &setlist, &showlist);
@


1.144.6.1
log
@2006-03-31  Michael Snyder  <msnyder@@redhat.com>

	Execution interface for reverse execution.
	* breakpoint.c (breakpoint_silence): New function.
	* breakpoint.h (breakpoint_silence): Export.
	* infcmd.c (finish_command): Check for reverse exec direction.
	(finish_backward): New function, handle finish cmd in reverse.
	* infrun.c (enum inferior_stop_reason): Add NO_HISTORY reason.
	(handle_inferior_event): Handle TARGET_WAITKIND_NO_HISTORY.
	Handle stepping over a function call in reverse.
	Handle stepping thru a line range in reverse.
	Handle setting a step-resume breakpoint in reverse.
	Handle stepping into a function in reverse.
	Handle stepping between line ranges in reverse.
	(print_stop_reason): Print reason for NO_HISTORY.
@
text
@a1253 2
static void finish_backwards (struct symbol *);

d1296 10
d1314 1
a1314 5
      if (target_get_execution_direction () == EXEC_REVERSE)
	printf_filtered ("Run back to call of ");
      else
	printf_filtered ("Run till exit from ");

a1317 17
  if (target_get_execution_direction () == EXEC_REVERSE)
    {
      /* Split off at this point.  */
      finish_backwards (function);
      return;
    }

  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);

  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);

  if (!target_can_async_p ())
    old_chain = make_cleanup_delete_breakpoint (breakpoint);
  else
    old_chain = make_exec_cleanup_delete_breakpoint (breakpoint);

a1373 56

static void
finish_backwards (struct symbol *function)
{
  struct symtab_and_line sal;
  struct breakpoint *breakpoint;
  struct cleanup *old_chain;
  CORE_ADDR func_addr;

  if (find_pc_partial_function (get_frame_pc (get_current_frame ()),
				NULL, &func_addr, NULL) == 0)
    internal_error (__FILE__, __LINE__, 
		    "Finish: couldn't find function.");

  sal = find_pc_line (func_addr, 0);

  /* Let's cheat and not worry about async until later.  */

  /* We don't need a return value.  */
  proceed_to_finish = 0;
  /* Special case: if we're sitting at the function entry point, 
     then all we need to do is take a reverse singlestep.  We
     don't need to set a breakpoint, and indeed it would do us
     no good to do so.

     Note that this can only happen at frame #0, since there's
     no way that a function up the stack can have a return address
     that's equal to its entry point.  */

  if (sal.pc != read_pc ())
    {
      /* Set breakpoint and continue.  */
      breakpoint = 
	set_momentary_breakpoint (sal, 
				  get_frame_id (get_selected_frame (NULL)),
				  bp_breakpoint);
      /* Tell the breakpoint to keep quiet.  We won't be done 
         until we've done another reverse single-step.  */
      breakpoint_silence (breakpoint);
      old_chain = make_cleanup_delete_breakpoint (breakpoint);
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
      /* We will be stopped when proceed returns.  */
      do_cleanups (old_chain);
    }
  if (bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL)
    {
      /* If in fact we hit the step-resume breakpoint (and not
	 some other breakpoint), then we're almost there -- 
	 we just need to back up by one more single-step.  */
      /* (Kludgy way of letting wait_for_inferior know...) */
      step_range_start = step_range_end = 1;
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
    }
  return;
}

@


1.144.4.1
log
@Initial version of available features support.
@
text
@a50 3
#include "available.h"

#include "gdb_obstack.h"
a407 19
  /* The first thing we do after creating an inferior is update the
     architecture with information provided by the target.

     FIXME: In some cases we could do this after target_open
     instead; should we?  */
  if (gdbarch_available_features_support (current_gdbarch))
    {
      struct gdb_feature_set *features;
      struct obstack tmp_obstack;

      obstack_init (&tmp_obstack);
      features = target_available_features (target, &tmp_obstack);

      if (features)
	arch_set_available_features (features);

      obstack_free (&tmp_obstack, NULL);
    }

@


1.144.4.2
log
@Remove old features when switching architectures.
@
text
@d424 2
a425 4
      /* Switch to a new architecture.  We must call this even if
	 the target could not return features; if the previous
	 target could, we may have the wrong architecture selected.  */
      arch_set_available_features (features);
@


1.144.4.3
log
@Add a Debian patch that prevents some bogus "No selected frame" errors.
This needs to go to mainline separately.
@
text
@d1311 2
d1314 1
a1314 1
  frame = get_prev_frame (get_selected_frame (_("No selected frame.")));
d1332 1
a1332 1
  function = find_pc_function (get_frame_pc (get_selected_frame (NULL)));
d1698 2
d1704 1
a1704 2
				    get_selected_frame (_("No selected frame.")),
				    -1, fpregs);
d1737 1
a1737 1
	int regnum = frame_map_name_to_regnum (get_selected_frame (_("No selected frame.")),
d1742 1
a1742 1
					  get_selected_frame (NULL), regnum, fpregs);
d1756 1
a1756 1
					  get_selected_frame (NULL), regnum, fpregs);
d1782 1
a1782 1
						gdb_stdout, get_selected_frame (NULL),
d1812 2
d1838 1
a1838 1
  print_vector_info (current_gdbarch, gdb_stdout, get_selected_frame (NULL), args);
d2026 2
d2054 1
a2054 1
		    get_selected_frame (NULL), args);
@


1.143
log
@	PR gdb/1914
	* fork-child.c (fork_inferior): Don't call
	solib_create_inferior_hook.
	* infcmd.c (post_create_inferior): Call solib_add,
	solib_create_inferior_hook, and re_enable_breakpoints_in_shlibs.
	(attach_command): Don't call solib_add or
	re_enable_breakpoints_in_shlibs.  Call post_create_inferior
	instead.
	* remote.c (remote_open_1): Don't call solib_create_inferior_hook
	or observer_notify_inferior_created.  Call post_create_inferior
	instead.
	* corelow.c: Don't include "observer.h".
	(solib_add_stub): Deleted.
	(core_open): Don't call observer_notify_inferior_created or
	solib_add_stub.  Call post_create_inferior instead.
	* inf-ptrace.c: Don't include "observer.h".
	(inf_ptrace_attach): Don't call observer_notify_inferior_created.
	* inf-ttrace.c: Don't include "observer.h".
	(inf_ttrace_attach): Don't call observer_notify_inferior_created.
	* inferior.h (solib_create_inferior_hook): Remove redundant
	prototype.
	* inftarg.c: Don't include "observer.h".
	(child_attach): Don't call observer_notify_inferior_created.
	* Makefile.in: Update dependencies.
@
text
@d422 1
a422 1
      SOLIB_CREATE_INFERIOR_HOOK (pid);
@


1.142
log
@	* infcmd.c: Include "observer.h".
	(post_create_inferior): New function.
	(run_command_1): Call it.  Also call proceed.
	* inferior.h (post_create_inferior): New prototype.
	* Makefile.in (infcmd.o): Update.

	* gnu-nat.c (gnu_create_inferior): Don't call proceed.
	* go32-nat.c (go32_create_inferior): Likewise.
	* nto-procfs.c (procfs_create_inferior): Likewise.
	* procfs.c (procfs_create_inferior): Likewise.
	* remote-sim.c (gdbsim_create_inferior): Likewise.
	* remote.c (extended_remote_create_inferior)
	(extended_remote_async_create_inferior): Likewise.
	* win32-nat.c (win32_create_inferior): Likewise.
	* wince.c (child_create_inferior): Likewise.

	* monitor.c (monitor_create_inferior): Don't call proceed.
	Set the PC manually.
	* ocd.c (ocd_create_inferior): Likewise.
	* remote-e7000.c (e7000_create_inferior): Likewise.
	* remote-m32r-sdi.c (m32r_create_inferior): Likewise.
	* remote-mips.c (mips_create_inferior): Likewise.
	* remote-rdp.c (remote_rdp_create_inferior): Likewise.
	* remote-sds.c (sds_create_inferior): Likewise.
	* remote-st.c (st2000_create_inferior): Likewise.

	* inf-ptrace.c (inf_ptrace_create_inferior): Don't call
	proceed or observer_notify_inferior_created.
	* inf-ttrace.c (inf_ttrace_create_inferior): Likewise.
	* inftarg.c (child_create_inferior): Likewise.
@
text
@d408 24
a1925 8
#ifdef SOLIB_ADD
  /* Add shared library symbols from the newly attached process, if any.  */
  SOLIB_ADD ((char *) 0, from_tty, &current_target, auto_solib_add);
#else
  solib_add (NULL, from_tty, &current_target, auto_solib_add);
#endif
  re_enable_breakpoints_in_shlibs ();

d1930 2
@


1.141
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d4 1
a4 1
   1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
d50 1
d401 10
d524 5
@


1.140
log
@* infcmd.c (print_return_value): Move CHECK_TYPEDEF up.  Deal with
RETURN_VALUE_ABI_PRESERVED_ADDRESS.
@
text
@d3 1
a3 1
   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
d21 2
a22 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.140.6.1
log
@	Backport:
	2006-01-24  Daniel Jacobowitz  <dan@@codesourcery.com>

	* infcmd.c: Include "observer.h".
	(post_create_inferior): New function.
	(run_command_1): Call it.  Also call proceed.
	* inferior.h (post_create_inferior): New prototype.
	* Makefile.in (infcmd.o): Update.
...
@
text
@a49 1
#include "observer.h"
a399 10
/* Common actions to take after creating any sort of inferior, by any
   means (running, attaching, connecting, et cetera).  The target
   should be stopped.  */

void
post_create_inferior (struct target_ops *target, int from_tty)
{
  observer_notify_inferior_created (target, from_tty);
}

a512 5

  post_create_inferior (&current_target, from_tty);

  /* Start the target running.  */
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_0, 0);
@


1.140.6.2
log
@	Backport:
	2006-01-24  Daniel Jacobowitz  <dan@@codesourcery.com>

	PR gdb/1914
	* fork-child.c (fork_inferior): Don't call
	solib_create_inferior_hook.
	* infcmd.c (post_create_inferior): Call solib_add,
	solib_create_inferior_hook, and re_enable_breakpoints_in_shlibs.
	(attach_command): Don't call solib_add or
	re_enable_breakpoints_in_shlibs.  Call post_create_inferior
	instead.
...
@
text
@a407 24
  if (exec_bfd)
    {
      /* Sometimes the platform-specific hook loads initial shared
	 libraries, and sometimes it doesn't.  Try to do so first, so
	 that we can add them with the correct value for FROM_TTY.  */
#ifdef SOLIB_ADD
      SOLIB_ADD (NULL, from_tty, target, auto_solib_add);
#else
      solib_add (NULL, from_tty, target, auto_solib_add);
#endif

      /* Create the hooks to handle shared library load and unload
	 events.  */
#ifdef SOLIB_CREATE_INFERIOR_HOOK
      SOLIB_CREATE_INFERIOR_HOOK (pid);
#else
      solib_create_inferior_hook ();
#endif

      /* Enable any breakpoints which were disabled when the
	 underlying shared library was deleted.  */
      re_enable_breakpoints_in_shlibs ();
    }

d1902 8
a1913 2
  post_create_inferior (&current_target, from_tty);

@


1.140.2.1
log
@	Backport:
	2006-01-24  Daniel Jacobowitz  <dan@@codesourcery.com>

	* infcmd.c: Include "observer.h".
	(post_create_inferior): New function.
	(run_command_1): Call it.  Also call proceed.
	* inferior.h (post_create_inferior): New prototype.
	* Makefile.in (infcmd.o): Update.
...
@
text
@a49 1
#include "observer.h"
a399 10
/* Common actions to take after creating any sort of inferior, by any
   means (running, attaching, connecting, et cetera).  The target
   should be stopped.  */

void
post_create_inferior (struct target_ops *target, int from_tty)
{
  observer_notify_inferior_created (target, from_tty);
}

a512 5

  post_create_inferior (&current_target, from_tty);

  /* Start the target running.  */
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_0, 0);
@


1.140.2.2
log
@	Backport:
	2006-01-24  Daniel Jacobowitz  <dan@@codesourcery.com>

	PR gdb/1914
	* fork-child.c (fork_inferior): Don't call
	solib_create_inferior_hook.
	* infcmd.c (post_create_inferior): Call solib_add,
	solib_create_inferior_hook, and re_enable_breakpoints_in_shlibs.
	(attach_command): Don't call solib_add or
	re_enable_breakpoints_in_shlibs.  Call post_create_inferior
	instead.
...
@
text
@a407 24
  if (exec_bfd)
    {
      /* Sometimes the platform-specific hook loads initial shared
	 libraries, and sometimes it doesn't.  Try to do so first, so
	 that we can add them with the correct value for FROM_TTY.  */
#ifdef SOLIB_ADD
      SOLIB_ADD (NULL, from_tty, target, auto_solib_add);
#else
      solib_add (NULL, from_tty, target, auto_solib_add);
#endif

      /* Create the hooks to handle shared library load and unload
	 events.  */
#ifdef SOLIB_CREATE_INFERIOR_HOOK
      SOLIB_CREATE_INFERIOR_HOOK (pid);
#else
      solib_create_inferior_hook ();
#endif

      /* Enable any breakpoints which were disabled when the
	 underlying shared library was deleted.  */
      re_enable_breakpoints_in_shlibs ();
    }

d1902 8
a1913 2
  post_create_inferior (&current_target, from_tty);

@


1.139
log
@Index: gdb/ChangeLog
+2005-07-06  Bob Rossi  <bob@@brasko.net>
+
+	* fork-child.c (fork-inferior): Use accessor function for
+	inferior_io_terminal.
+	* infcmd.c (inferior_io_terminal): Make static.
+	(set_inferior_io_terminal): New function.
+	(get_inferior_io_terminal): Ditto.
+	(tty_command): Use accessor function.
+	(_initialize_infcmd): Add inferior_tty setshow variable.
+	(_initialize_infcmd): Remove tty command.
+	(_initialize_infcmd): Add a tty command that is an alias.
+	* inferior.h (set_inferior_io_terminal): New prototype.
+	(get_inferior_io_terminal): Ditto.
+	(new_tty_prefork): Add const qualifier to parameter.
+	* inflow.c (inferior_thisrun_terminal): Add const qualifier.
+	(new_tty_prefork): Add const qualifier to parameter.
+	* nto-procfs (procfs_create_inferior): Use accessor function.
+	(procfs_create_inferior): Add const qualifier to locals.
+	* win32-nat.c (child_create_inferior): Ditto.
+	* mi/mi-cmd-env.c (mi_cmd_inferior_tty_set): New function.
+	(mi_cmd_inferior_tty_set): Ditto.
+	* mi/mi-cmds.c (mi_cmds): Add inferior-tty-set and inferior-tty-show
+	* mi/mi-cmds.h (mi_cmd_inferior_tty_set): Add prototype.
+	(mi_cmd_inferior_tty_show): Ditto.

Index: gdb/doc/ChangeLog
+2005-07-06  Bob Rossi  <bob@@brasko.net>
+
+	* gdb.texinfo (GDB/MI Miscellaneous Commands): Add -inferior-tty-set
+	and -inferior-tty-show.
+	(Input/Output): Document "set/show inferior-tty" and tty alias.

Index: gdb/testsuite/ChangeLog
+2005-07-06  Bob Rossi  <bob@@brasko.net>
+
+	* gdb.mi/mi-basics.exp (test_setshow_inferior_tty): Test MI tty
+	command.
+	(Copyright): Update copyright.
@
text
@d1114 1
d1128 1
a1129 1
      CHECK_TYPEDEF (value_type);
@


1.138
log
@2005-05-22  Andrew Cagney  <cagney@@gnu.org>

	* frame.h (frame_register_unwind, frame_unwind_register)
	(get_frame_register, frame_register, put_frame_register)
	(get_frame_memory, safe_frame_unwind_memory)
	(frame_register_read): Use gdb_byte for byte buffer parameters.
	* trad-frame.h (trad_frame_get_register)
	(frame_get_prev_register): Ditto.
	* frame-unwind.h (frame_prev_register_ftype): Ditto.
	* frame.c (frame_pop, frame_register, frame_unwind_register)
	(get_frame_register, frame_unwind_register_signed)
	(frame_unwind_register_unsigned, frame_unwind_unsigned_register)
	(frame_register_read, get_frame_memory): Update.
	* trad-frame.c (trad_frame_get_prev_register): Update.
	(trad_frame_get_register): Update.
	* gdbcore.h (deprecated_read_memory_nobpt, read_memory): Ditto.
	* breakpoint.c (deprecated_read_memory_nobpt): Update.
	* corefile.c (read_memory): Update.
	* tramp-frame.c (tramp_frame_prev_register): Update.
	* valops.c (value_assign): Update.
	* sentinel-frame.c (sentinel_frame_prev_register): Update.
	* std-regs.c (value_of_builtin_frame_fp_reg)
	(value_of_builtin_frame_pc_reg): Update.
	* infcmd.c (default_print_registers_info): Update
	* dummy-frame.c (dummy_frame_prev_register): Update.
	* findvar.c (value_of_register, value_from_register): Update.
	* tui/tui-regs.c (tui_register_format, tui_get_register): Update.
	* mi/mi-main.c (register_changed_p, get_register): Update.
@
text
@d139 1
a139 1
char *inferior_io_terminal;
d206 18
d397 1
a397 1
  inferior_io_terminal = savestring (file, strlen (file));
d2009 1
a2009 1
  struct cmd_list_element *c;
d2011 7
a2017 3
  c = add_com ("tty", class_run, tty_command,
	       _("Set terminal for future runs of program being debugged."));
  set_cmd_completer (c, filename_completer);
@


1.137
log
@* solib.h (CLEAR_SOLIB, SOLIB_ADD)
(SOLIB_CREATE_INFERIOR_HOOK, SOLIB_REMOVE_INFERIOR_HOOK)
(SOLIB_IN_DYNAMIC_LINKER, SOLIB_RESTART)
(DISABLE_UNSETTABLE_BREAK, PC_SOLIB)
(IN_SOLIB_DYNSYM_RESOLVE_CODE): Remove defines and orphaned
comments.
* breakpoint.c: Include "solib.h".
(insert_bp_location) [!DISABLE_UNSETTABLE_BREAK]: Call
solib_address.
(remove_solib_event_breakpoints, create_solib_event_breakpoint)
(disable_breakpoints_in_shlibs)
(disable_breakpoints_in_unloaded_shlib)
(re_enable_breakpoints_in_shlibs): Compile if SOLIB_ADD isn't
defined. If PC_SOLIB isn't defined, call solib_address.
(_initialize_breakpoint): Unconditionally install observer.
* corelow.c: Include "solib.h".
[SOLIB_ADD] (solib_add_stub): Remove prototype.
(core_close) [!CLEAR_SOLIB]: Call clear_solib.
(solib_add_stub) [!SOLIB_ADD] Call solib_add.
(core_open): Unconditionally call solib_add_stub.
* fork-child.c: Include "solib.h".
(fork_inferior) [!SOLIB_CREATE_INFERIOR_HOOK]: Call
solib_create_inferior_hook.
* infcmd.c: Include "solib.h".
(attach_command) [!SOLIB_ADD]: Call shlib_rescan.  Unconditionally
call re_enable_breakpoints_in_shlibs.
* infrun.c: Include "solib.h".
(SOLIB_IN_SYNSYM_RESOLVE_CODE): Don't define if not already
defined.
(stop_on_solib_events, show_stop_on_solib_events): Include
unconditionally.
(follow_exec) [!SOLIB_CREATE_INFERIOR_HOOK]: Call
solib_create_inferior_hook.
(handle_inferior_event) [!SOLIB_ADD]: Call shlib_add.
[!IN_SOLIB_DYNSYM_RESOLVE_CODE]: Call in_solib_dynsym_resolve_code.
(_initialize_infrun): Unconditionally add "stop_on_solib-events"
command.
* remote.c: Include "solib.h".
(remote_open_1): Unconditionally call no_shared_libraries.
[!SOLIB_CREATE_INFERIOR_HOOK] Call solib_create_inferior_hook.
* stack.c: Include "solib.h".
(print_frame) [!PC_SOLIB] Call shlib_for_pc.
* xcoffsolib.c (no_shared_libraries): Remove function.
* Makefile.in (SFILES): Add solib.c.
(ALLDEPFILES): Remove solib.c.
(COMMON_OBS): Add solib.o.
(breakpoint.o, corelow.o, fork-chiled.o, infcmd.o, infrun.o)
(remote.o, stack.o): Update dependencies.
@
text
@d1527 1
a1527 1
  char buffer[MAX_REGISTER_SIZE];
@


1.136
log
@	* environ.h (struct environ): Rename to ...
	(struct gdb_environ): ... this.
	(make_environ): Update prototype.
	(free_environ): Likewise.
	(init_environ): Likewise.
	(get_in_environ): Likewise.
	(set_in_environ): Likewise.
	(unset_in_environ): Likewise.
	(environ_vector): Likewise.
	* environ.c (make_environ): Replace "struct environ" with "struct
	gdb_environ".
	(free_environ): Likewise.
	(init_environ): Likewise.
	(environ_vector): Likewise.
	(get_in_environ): Likewise.
	(set_in_environ): Likewise.
	(unset_in_environ): Likewise.
	* infcmd.c (inferior_environ): Likewise.
	* inferior.h (inferior_environ): Likewise.
@
text
@d47 1
d1809 2
d1870 3
a1873 1
#endif
@


1.135
log
@        * infcmd.c (run_command_1): New function, extracted from
        run_command.
        (run_command): Replace implementation by call to run_command_1.
        (start_command): Use run_command_1 to insert the temporary
        breakpoint and run the program. Remove code that's no longer
        needed, as already done at the proper time by run_command_1.
@
text
@d201 1
a201 1
struct environ *inferior_environ;
@


1.134
log
@2005-02-20  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (add_setshow_optional_filename_cmd): New
	function.
	* cli/cli-setshow.c (deprecated_show_value_hack)
	(do_setshow_command): Handle var_optional_filename.
	* command.h (enum var_types): Add var_optional_filename.
	(add_setshow_optional_filename_cmd): Declare.
	* infcmd.c (notice_args_read): Use.
@
text
@d403 4
d408 1
a408 1
run_command (char *args, int from_tty)
d432 4
d498 6
d523 2
a524 9
  /* If the inferior is already running, we want to ask the user if we
     should restart it or not before we insert the temporary breakpoint.
     This makes sure that this command doesn't have any side effect if
     the user changes its mind.  */
  kill_if_already_running (from_tty);

  /* Insert the temporary breakpoint, and run...  */
  tbreak_command (main_name (), 0);
  run_command (args, from_tty);
@


1.133
log
@2005-02-15  Andrew Cagney  <cagney@@gnu.org>

	Mark up add_com, add_info and add_prefix_cmd.
	* breakpoint.c, cp-support.c, dcache.c, dwarf2read.c: Update.
	* exec.c, f-valprint.c, frame.c, gcore.c, gnu-nat.c: Update.
	* go32-nat.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* kod.c, language.c, linux-nat.c, m32r-rom.c, macrocmd.c: Update.
	* maint.c, memattr.c, mips-tdep.c, nto-procfs.c, objc-lang.c: Update.
	* ocd.c, pa64solib.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote-e7000.c, remote-m32r-sdi.c, remote-mips.c: Update.
	* remote-sds.c, remote-sim.c, remote-st.c, remote-utils.c: Update.
	* remote.c, rs6000-tdep.c, ser-go32.c, serial.c: Update.
	* sh-tdep.c, solib.c, somsolib.c, source.c, stack.c: Update.
	* symfile.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, typeprint.c, utils.c, valprint.c: Update.
	* win32-nat.c, xcoffsolib.c, cli/cli-cmds.c, cli/cli-dump.c: Update.
	* cli/cli-logging.c, tui/tui-layout.c, tui/tui-regs.c: Update.
	* tui/tui-stack.c, tui/tui-win.c: Update.
@
text
@d253 2
a254 1
notice_args_read (char *args, int from_tty, struct cmd_list_element *c)
d256 1
d1985 8
a1992 9
  c = add_set_cmd ("args", class_run, var_string_noescape,
		   (char *) &inferior_args,
		   "Set argument list to give program being debugged when it is started.\n\
Follow this command with any number of args, to be passed to the program.",
		   &setlist);
  set_cmd_completer (c, filename_completer);
  set_cmd_sfunc (c, notice_args_set);
  c = deprecated_add_show_from_set (c, &showlist);
  set_cmd_sfunc (c, notice_args_read);
@


1.132
log
@2005-02-14  Andrew Cagney  <cagney@@gnu.org>

	Mark up add_cmd.
	* arch-utils.c, avr-tdep.c, breakpoint.c, corefile.c: Update.
	* cp-abi.c, cp-namespace.c, cp-support.c, dummy-frame.c: Update.
	* exec.c, gnu-nat.c, go32-nat.c, hppa-tdep.c, infcmd.c: Update.
	* infrun.c, interps.c, macrocmd.c, maint.c, memattr.c: Update.
	* mips-tdep.c, ocd.c, osabi.c, printcmd.c, regcache.c: Update.
	* reggroups.c, remote-fileio.c, remote-rdi.c, remote.c: Update.
	* sol-thread.c, source.c, stack.c, symfile-mem.c: Update.
	* symfile.c, thread.c, tracepoint.c, valprint.c, value.c: Update.
	* win32-nat.c, cli/cli-cmds.c, cli/cli-dump.c: Update.
	* cli/cli-logging.c, tui/tui-regs.c: Update.
@
text
@d1980 1
a1980 1
	       "Set terminal for future runs of program being debugged.");
d2001 1
a2001 1
		  "Complement to certain \"set\" commands.",
d2018 2
a2019 2
  c = add_com ("path", class_files, path_command,
	       "Add directory DIR(s) to beginning of search path for object files.\n\
d2023 1
a2023 1
fully linked executable files and separately compiled object files as needed.");
d2035 2
a2036 2
  add_com ("attach", class_run, attach_command,
	   "Attach to a process or file outside of GDB.\n\
d2046 1
a2046 1
to specify the program, and to load its symbol table.");
d2048 2
a2049 2
  add_com ("detach", class_run, detach_command,
	   "Detach a process or file previously attached.\n\
d2051 1
a2051 1
you were debugging a file, the file is closed and gdb no longer accesses it.");
d2053 2
a2054 2
  add_com ("disconnect", class_run, disconnect_command,
	   "Disconnect from a target.\n\
d2056 1
a2056 1
all targets.");
d2058 7
a2064 7
  add_com ("signal", class_run, signal_command,
	   "Continue program giving it signal specified by the argument.\n\
An argument of \"0\" means continue program without giving it a signal.");

  add_com ("stepi", class_run, stepi_command,
	   "Step one instruction exactly.\n\
Argument N means do this N times (or till program stops for another reason).");
d2067 3
a2069 3
  add_com ("nexti", class_run, nexti_command,
	   "Step one instruction, but proceed through subroutine calls.\n\
Argument N means do this N times (or till program stops for another reason).");
d2072 3
a2074 3
  add_com ("finish", class_run, finish_command,
	   "Execute until selected stack frame returns.\n\
Upon return, the value returned is printed and put in the value history.");
d2076 2
a2077 2
  add_com ("next", class_run, next_command,
	   "Step program, proceeding through subroutine calls.\n\
d2080 1
a2080 1
Argument N means do this N times (or till program stops for another reason).");
d2085 3
a2087 3
  add_com ("step", class_run, step_command,
	   "Step program until it reaches a different source line.\n\
Argument N means do this N times (or till program stops for another reason).");
d2090 3
a2092 3
  c = add_com ("until", class_run, until_command,
	       "Execute until the program reaches a source line greater than the current\n\
or a specified location (same args as break command) within the current frame.");
d2096 3
a2098 3
  c = add_com ("advance", class_run, advance_command,
	       "Continue the program up to the given location (same form as args for break command).\n\
Execution will also stop upon exit from the current stack frame.");
d2101 2
a2102 2
  c = add_com ("jump", class_run, jump_command,
	       "Continue program being debugged at specified line or address.\n\
d2104 1
a2104 1
for an address to start at.");
d2109 2
a2110 2
      c = add_com ("go", class_run, go_command,
		   "Usage: go <location>\n\
d2115 1
a2115 1
This command is a combination of tbreak and jump.");
d2122 2
a2123 2
  add_com ("continue", class_run, continue_command,
	   "Continue program being debugged, after signal or breakpoint.\n\
d2126 1
a2126 1
the breakpoint won't break until the Nth time it is reached).");
d2130 2
a2131 2
  c = add_com ("run", class_run, run_command,
	   "Start debugged program.  You may specify arguments to give it.\n\
d2136 1
a2136 1
use \"set args\" without arguments.");
d2141 1
a2141 1
	     "Start debugged program with no arguments.");
d2143 1
a2143 2
  c = add_com ("start", class_run, start_command,
               "\
d2146 1
a2146 1
\"run\" command.");
d2150 1
a2150 1
	   "Interrupt the execution of the debugged program.");
d2152 3
a2154 3
  add_info ("registers", nofp_registers_info,
	    "List of integer registers and their contents, for selected stack frame.\n\
Register name as argument means describe only that register.");
d2158 6
a2163 6
    add_com ("lr", class_info, nofp_registers_info,
	     "List of integer registers and their contents, for selected stack frame.\n\
  Register name as argument means describe only that register.");
  add_info ("all-registers", all_registers_info,
	    "List of all registers and their contents, for selected stack frame.\n\
Register name as argument means describe only that register.");
d2166 1
a2166 1
	    "Execution status of the program.");
d2169 1
a2169 1
	    "Print the status of the floating point unit\n");
d2172 1
a2172 1
	    "Print the status of the vector unit\n");
@


1.131
log
@2005-02-14  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (paddress): New function.
	* defs.h (paddress): Declare.
	* printcmd.c (deprecated_print_address_numeric): Rename
	print_address_numeric, call paddress.
	* valprint.c, ui-out.c, tui/tui-stack.c, tracepoint.c: Update.
	* symmisc.c, symfile.c stack.c, p-valprint.c, printcmd.c: Update.
	* maint.c, m32r-rom.c, infcmd.c, f-valprint.c, exec.c: Update.
	* dwarf2read.c, dve3900-rom.c, defs.h, c-valprint.c: Update.
	* corefile.c, cli/cli-cmds.c, breakpoint.c, annotate.c: Update.
	* ada-valprint.c: Update.
@
text
@d1993 2
a1994 3
  c = add_cmd
    ("environment", no_class, environment_info,
     "The environment to give the program, or one variable's value.\n\
d1997 1
a1997 1
environment to be given to the program.", &showlist);
d2004 3
a2006 3
  c = add_cmd ("environment", class_run, unset_environment_command,
	       "Cancel environment variable VAR for the program.\n\
This does not affect the program until the next \"run\" command.",
d2010 2
a2011 2
  c = add_cmd ("environment", class_run, set_environment_command,
	       "Set environment variable value to give the program.\n\
d2014 1
a2014 1
This does not affect the program until the next \"run\" command.",
d2026 2
a2027 2
  c = add_cmd ("paths", no_class, path_info,
	       "Current search path for finding object files.\n\
d2031 1
a2031 1
fully linked executable files and separately compiled object files as needed.",
@


1.130
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up some of printf_filtered and printf_unfiltered.
	* ada-lang.c, annotate.c, arch-utils.c, breakpoint.c: Update.
	* corelow.c, cp-namespace.c, cp-support.c, dcache.c: Update.
	* demangle.c, dsrec.c, dwarf2read.c, dwarfread.c: Update.
	* event-loop.c, event-top.c, exec.c, f-valprint.c: Update.
	* gdbtypes.c, inf-loop.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcmd.c, inflow.c, infrun.c, inftarg.c, language.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, maint.c: Update.
	* mdebugread.c, memattr.c, monitor.c, objc-lang.c: Update.
	* ocd.c, osabi.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote.c, solib-som.c, solib.c, somsolib.c, source.c: Update.
	* stack.c, symfile.c, symmisc.c, target.c, thread.c: Update.
	* top.c, utils.c, valprint.c, value.c, cli/cli-cmds.c: Update.
	* cli/cli-dump.c, cli/cli-logging.c, tui/tui-hooks.c: Update.
	* tui/tui-regs.c, tui/tui-win.c: Update.
@
text
@d892 1
a892 1
      print_address_numeric (addr, 1, gdb_stdout);
@


1.129
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up error_no_arg, query, perror_with_name, complaint, and
	internal_error.
	* breakpoint.c, cp-abi.c, cp-namespace.c, cp-support.c: Update.
	* cris-tdep.c, dbxread.c, dictionary.c, dsrec.c: Update.
	* dummy-frame.c, dve3900-rom.c, dwarf2-frame.c, dwarf2expr.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, event-loop.c: Update.
	* exceptions.c, exec.c, f-lang.c, findvar.c, fork-child.c: Update.
	* frame-unwind.c, frame.c, frv-linux-tdep.c, frv-tdep.c: Update.
	* gdb_assert.h, gdbarch.c, gdbtypes.c, gnu-nat.c: Update.
	* go32-nat.c, hppa-tdep.c, hppabsd-nat.c, hpread.c: Update.
	* i386-linux-nat.c, i386-nat.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386fbsd-nat.c, inf-ptrace.c, inf-ttrace.c, infcall.c: Update.
	* infcmd.c, inflow.c, infptrace.c, infrun.c, inftarg.c: Update.
	* interps.c, language.c, linespec.c, linux-nat.c: Update.
	* m32r-linux-nat.c, m68k-tdep.c, m68kbsd-nat.c: Update.
	* m68klinux-nat.c, m88kbsd-nat.c, macroexp.c, macroscope.c: Update.
	* macrotab.c, maint.c, mdebugread.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mips64obsd-nat.c: Update.
	* mipsnbsd-nat.c, mn10300-tdep.c, monitor.c, nto-procfs.c: Update.
	* objc-lang.c, objfiles.c, objfiles.h, ocd.c, osabi.c: Update.
	* parse.c, ppc-bdm.c, ppc-linux-nat.c, ppc-sysv-tdep.c: Update.
	* ppcnbsd-nat.c, ppcobsd-nat.c, printcmd.c, procfs.c: Update.
	* regcache.c, reggroups.c, remote-e7000.c, remote-mips.c: Update.
	* remote-rdp.c, remote-sds.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote.c, rs6000-nat.c, rs6000-tdep.c: Update.
	* s390-nat.c, s390-tdep.c, sentinel-frame.c, serial.c: Update.
	* sh-tdep.c, sh3-rom.c, sh64-tdep.c, shnbsd-nat.c: Update.
	* solib-aix5.c, solib-svr4.c, solib.c, source.c: Update.
	* sparc-nat.c, stabsread.c, stack.c, symfile.c, symtab.c: Update.
	* symtab.h, target.c, tracepoint.c, ui-file.c, ui-out.c: Update.
	* utils.c, valops.c, valprint.c, vax-nat.c, vaxbsd-nat.c: Update.
	* win32-nat.c, xcoffread.c, xstormy16-tdep.c: Update.
	* cli/cli-cmds.c, cli/cli-logging.c, cli/cli-script.c: Update.
	* cli/cli-setshow.c, mi/mi-cmd-break.c, mi/mi-cmds.c: Update.
	* mi/mi-console.c, mi/mi-getopt.c, mi/mi-out.c: Update.
	* tui/tui-file.c, tui/tui-interp.c: Update.
@
text
@d566 1
a566 1
    printf_filtered ("Continuing.\n");
d669 1
a669 1
		  printf_filtered ("\
d671 1
a671 1
which has no line number information.\n", name);
d774 1
a774 1
	      printf_filtered ("\
d776 1
a776 1
which has no line number information.\n", name);
d891 1
a891 1
      printf_filtered ("Continuing at ");
d947 1
a947 1
	printf_filtered ("Continuing with no signal.\n");
d949 1
a949 1
	printf_filtered ("Continuing with signal %s.\n",
d1245 1
a1245 1
      printf_filtered ("Run till exit from ");
d1315 1
a1315 1
      printf_filtered ("The program being debugged is not being run.\n");
d1320 1
a1320 1
  printf_filtered ("Program stopped at %s.\n",
d1323 1
a1323 1
    printf_filtered ("It stopped after being stepped.\n");
d1332 2
a1333 2
	      printf_filtered ("It stopped at a breakpoint that has ");
	      printf_filtered ("since been deleted.\n");
d1336 1
a1336 1
	    printf_filtered ("It stopped at breakpoint %d.\n", num);
d1342 1
a1342 1
      printf_filtered ("It stopped with signal %s, %s.\n",
d1349 2
a1350 2
      printf_filtered ("Type \"info stack\" or \"info registers\" ");
      printf_filtered ("for more information.\n");
d1438 3
a1440 2
      printf_filtered ("Setting environment variable ");
      printf_filtered ("\"%s\" to null value.\n", var);
d1969 2
a1970 2
  printf_filtered ("\"unset\" must be followed by the name of ");
  printf_filtered ("an unset subcommand.\n");
@


1.128
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@d374 1
a374 1
    error_no_arg ("terminal name for running target process");
d844 1
a844 1
    error_no_arg ("starting address");
d926 1
a926 1
    error_no_arg ("signal number");
d1054 1
a1054 1
    error_no_arg ("a location");
d1108 1
a1108 1
      internal_error (__FILE__, __LINE__, "bad switch");
d1164 1
a1164 1
			"finish_command: function has no target type");
d1289 1
a1289 1
			    "finish_command: function has no target type");
d1392 1
a1392 1
    error_no_arg ("environment variable and value");
d1416 1
a1416 1
    error_no_arg ("environment variable to set");
d1454 1
a1454 1
      if (!from_tty || query ("Delete all environment variables? "))
@


1.127
log
@2005-02-01  Andrew Cagney  <cagney@@gnu.org>

	* value.c (value_contents_all_raw)
	(value_contents_raw): New functions.
	* value.h (VALUE_CONTENTS_ALL_RAW, VALUE_CONTENTS_RAW): Delete.
	(value_contents_raw, value_contents_all_raw): Declare functions.
	(VALUE_CONTENTS, VALUE_CONTENTS_ALL): Update.
	* std-regs.c, valarith.c, valops.c, eval.c: Update.
	* tracepoint.c, findvar.c: Update.
@
text
@d123 1
a123 1
   if (!target_has_execution) error ("The program is not being run.");
d322 1
a322 1
	    error ("can't handle command-line argument containing whitespace");
d392 1
a392 1
	error ("Program not restarted.");
d448 1
a448 1
	error ("Asynchronous execution not supported on this target.");
d505 1
a505 1
    error ("No symbol table loaded.  Use the \"file\" command.");
d531 1
a531 1
    error ("Asynchronous execution not supported on this target.");
d625 1
a625 1
    error ("Asynchronous execution not supported on this target.");
d655 1
a655 1
	    error ("No current frame");
d666 1
a666 1
		    error ("Cannot find bounds of current function");
d754 1
a754 1
	error ("No current frame");
d771 1
a771 1
		error ("Cannot find bounds of current function");
d833 1
a833 1
    error ("Asynchronous execution not supported on this target.");
d849 1
a849 1
      error ("Unreasonable jump request");
d856 1
a856 1
    error ("No source file has been specified.");
d868 1
a868 1
	  error ("Not confirmed.");
d881 1
a881 1
	      error ("Not confirmed.");
d993 1
a993 1
	error ("Execution is not within a known function.");
d1020 1
a1020 1
    error ("The program is not running.");
d1029 1
a1029 1
    error ("Asynchronous execution not supported on this target.");
d1051 1
a1051 1
    error ("The program is not running.");
d1063 1
a1063 1
    error ("Asynchronous execution not supported on this target.");
d1204 1
a1204 1
    error ("Asynchronous execution not supported on this target.");
d1215 1
a1215 1
    error ("The \"finish\" command does not take any arguments.");
d1217 1
a1217 1
    error ("The program is not running.");
d1219 1
a1219 1
    error ("No selected frame.");
d1223 1
a1223 1
    error ("\"finish\" not meaningful in the outermost frame.");
d1603 1
a1603 1
    error ("The program has no registers now.");
d1605 1
a1605 1
    error ("No selected frame.");
d1631 1
a1631 1
	error ("Missing register name");
d1696 1
a1696 1
      error ("Invalid register `%.*s'", (int) (end - start), start);
d1717 1
a1717 1
    error ("The program has no registers now.");
d1719 1
a1719 1
    error ("No selected frame.");
d1777 1
a1777 1
	error ("Not killed.");
d1933 1
a1933 1
    error ("The program has no registers now.");
d1935 1
a1935 1
    error ("No selected frame.");
@


1.126
log
@	* infcmd.c (attach_command): Call CLEAR_SOLIB if available.
@
text
@d2 3
a4 2
   Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
d1102 1
a1102 1
			    VALUE_CONTENTS_RAW (value), NULL);
@


1.125
log
@2005-01-13  Michael Snyder  <msnyder@@redhat.com>

	* infcmd.c: Whitespace tweaks.
@
text
@d1779 20
@


1.124
log
@2004-10-29  Andrew Cagney  <cagney@@gnu.org>

	* frame.h (get_selected_frame): Add message parameter.
	* frame.c (get_selected_frame): Add and use message parameter.
	* stack.c (current_frame_command, return_command, locals_info)
	(catch_info, args_info, up_silently_base, down_silently_base): Use
	get_selected_frame with an explicit message.
	* thread.c, stack.c, sh-tdep.c, sh64-tdep.c: Update.
	* remote-rdp.c, remote-mips.c, remote-e7000.c: Update.
	* ocd.c, mi/mi-main.c, mi/mi-cmd-stack.c: Update.
	* infrun.c, inflow.c, infcmd.c, frame.c: Update.
	* findvar.c, eval.c, corelow.c, bsd-kvm.c: Update.
	* breakpoint.c: Update.
@
text
@d1866 1
a1866 1
  dont_repeat ();		/* Not for the faint of heart */
d1940 2
a1941 1
  print_float_info (current_gdbarch, gdb_stdout, deprecated_selected_frame, args);
@


1.123
log
@2004-09-13  Andrew Cagney  <cagney@@gnu.org>

	Eliminate event_loop_p, always has the value 1.
	* defs.h (event_loop_p): Delete macro.
	* breakpoint.c (until_break_command): Simplify.
	* utils.c (prompt_for_continue): Simplify.
	* tracepoint.c (read_actions): Simplify.
	* top.c (throw_exception, execute_command, gdb_readline_wrapper)
	(gdb_rl_operate_and_get_next, command_line_input, get_prompt)
	(set_prompt, init_main): Simplify.
	(init_signals, disconnect): Delete, unused.
	* remote.c (remote_async_resume)
	(extended_remote_async_create_inferior): Simplify.
	* mi/mi-interp.c (mi_input): Delete, unused.
	(mi_interpreter_resume, mi_command_loop): Simplify.
	* interps.c (current_interp_command_loop): Simplify.
	* infrun.c (proceed): Simplify.
	* infcmd.c (run_command, continue_command, step_1, jump_command)
	(until_command, advance_command, finish_command)
	(interrupt_target_command): Simplify.
	* event-top.c (gdb_setup_readline, gdb_disable_readline): Simplify.
@
text
@d1245 1
a1245 1
      print_stack_frame (get_selected_frame (), 1, LOCATION);
@


1.122
log
@* language.c (local_hex_format_custom): Remove.
(local_hex_string): Rename to hex_string, use C format, and move to
utils.c
(local_hex_string_custom): Rename to hex_string_custom and change
interface.  Now uses C format.  Move to utils.c
(local_octal_format_custom): Remove.
(local_decimal_format_custom): Remove.
(unknown_language_defn): Remove language-specific number
formatting entries.
(auto_language_defn): Ditto.
(local_language_defn): Ditto.
* language.h (struct language_format_info): Delete declaration.
(struct language_defn): Remove language_format_info fields
la_binary_format, la_octal_format, la_decimal_format, la_hex_format.
(local_binary_format): Remove macro.
(local_binary_format_prefix): Remove macro.
(local_binary_format_specifier): Remove macro.
(local_binary_format_suffix): Remove macro.
(local_octal_format): Remove macro.
(local_octal_format_prefix): Remove macro.
(local_octal_format_specifier): Remove macro.
(local_octal_format_suffix): Remove macro.
(local_decimal_format): Remove macro.
(local_decimal_format_prefix): Remove macro.
(local_decimal_format_specifier): Remove macro.
(local_decimal_format_suffix): Remove macro.
(local_hex_format): Remove macro.
(local_hex_format_prefix): Remove macro.
(local_hex_format_specifier): Remove macro.
(local_hex_format_suffix): Remove macro.
(local_decimal_format_custom): Remove.
(local_octal_format_custom): Remove.
(local_hex_format_custom): Remove.
(local_hex_string): Rename to hex_string and move to defs.h.
(local_hex_string_custom): Rename to hex_string_custom, change
interface, and move to defs.h.
* utils.c: (int_string): New function.
(hex_string): New function (from language.c).
(hex_string_custom): New function (from language.c).
(octal2str): New function.
(decimal2str): Add width parameter.
(paddr_u): Use new decimal2str interface.
(paddr_d): Ditto.
* defs.h (hex_string): Declare.
(hex_string_custom): Declare.
(int_string): Declare.
* printcmd.c (print_scalar_formatted): Remove localized binary
formatting.
* valprint.c (print_longest): Use int_string.
(print_floating): Use C hex format.
(print_hex_chars): Ditto.
(print_binary_chars): Remove language-specific formatting.
(print_octal_chars): Use C octal format.
(print_decimal_chars): Delocalize format.
(print_decimal): Remove.
* ada-lang.c (ada_language_defn): Remove language-specific number
formatting entries.
* p-lang.c (pascal_language_defn): Ditto.
* c-lang.c (c_language_defn): Ditto.
(cplus_language_defn): Ditto.
(asm_language_defn): Ditto.
(minimal_language_defn): Ditto.
* f-lang.c (f_language_defn): Ditto.
* jv-lang.c (java_language_defn): Ditto.
* m2-lang.c (m2_language_defn): Ditto.
* scm-lang.c (scm_language_defn): Ditto.
* objc-lang.c (objc_language_defn): Ditto.
* memattr.c (mem_info_command): Use renamed hex_string_custom with
new interface.
* pa64solib.c (pa64_sharedlibrary_info_command): Ditto.
* ui-out.c (ui_out_field_core_addr): Ditto.
* breakpoint.c (breakpoint_adjustment_warning): Ditto.
* exec.c (print_section_info): Ditto.
* i387-tdep.c (print_i387_status_word): Ditto.
(print_i387_control_word): Ditto.
(i387_print_float_info): Ditto.
* maint.c (maint_print_section_info): Ditto.
* solib.c (info_sharedlibrary_command): Ditto.
* somsolib.c (som_sharedlibrary_info_command): Ditto.
* symtab.c (print_msymbol_info): Ditto.
* tracepoint.c (tracepoints_info): Ditto.
* solib-frv.c (lm_base): Ditto.
(frv_current_sos): Ditto.
(enable_break2): Ditto.
(enable_break): Ditto.
* dbxread.c (read_dbx_symtab): Use renamed hex_string.
(process_one_symbol): Ditto.
* infcmd.c (program_info): Ditto.
* mdebugread.c (parse_partial_symbols): Ditto.
* symfile.c (add_symbol_file_command): Ditto.
* cli/cli-cmds.c (edit_command): Ditto.
(list_command): Ditto.
* infcall.c (call_function_by_hand): Ditto.
* remote-vx.c (vx_run_files_info): Ditto.
(vx_wait): Ditto.
(vx_attach): Ditto.
(vx_detach): Ditto.
(vx_kill): Ditto.
* aix-thread.c (pdc_symbol_addrs): Ditto.
(pdc_read_regs): Ditto.
(pdc_write_regs): Ditto.
(pdc_read_data): Ditto.
(pdc_write_data): Ditto.
* d10v-tdep.c (display_trace): Ditto.
* rs6000-nat.c (find_toc_address): Ditto.
* aix-thread.c: Don't include language.h.
* buildsym.c: Ditto.
* dbxread.c: Ditto.
* mdebugread.c: Ditto.
* rs6000-nat.c: Ditto.
* buildsym.c (make_blockvector): Use renamed hex_string.
@
text
@d437 1
a437 1
      if (event_loop_p && target_can_async_p ())
d446 1
a446 1
      if (event_loop_p && async_exec && !target_can_async_p ())
d451 1
a451 1
      if (event_loop_p && !async_exec && target_can_async_p ())
d529 1
a529 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d534 1
a534 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d623 1
a623 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d628 1
a628 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d639 1
a639 1
      if (!event_loop_p || !target_can_async_p ())
d646 1
a646 1
  if (!event_loop_p || !target_can_async_p ())
d704 1
a704 1
      if (event_loop_p && target_can_async_p ())
d831 1
a831 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d836 1
a836 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d1027 1
a1027 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d1032 1
a1032 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d1061 1
a1061 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d1066 1
a1066 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d1202 1
a1202 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d1207 1
a1207 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d1231 1
a1231 1
  if (!event_loop_p || !target_can_async_p ())
d1252 1
a1252 1
  if (event_loop_p && target_can_async_p ())
d1275 1
a1275 1
  if (!event_loop_p || !target_can_async_p ())
d1900 1
a1900 1
  if (event_loop_p && target_can_async_p ())
@


1.121
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_target_read_fp)
	(deprecated_frame_locals_address, deprecated_frame_args_address)
	(deprecated_frame_chain_valid, deprecated_frame_chain)
	(deprecated_init_extra_frame_info, deprecated_pop_frame)
	(deprecated_frame_init_saved_regs, deprecated_get_saved_register)
	(deprecated_do_registers_info, deprecated_init_frame_pc): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (deprecated_read_fp): Do not call
	DEPRECATED_TARGET_READ_FP_P.
	* infcmd.c (default_print_registers_info): Do not call
	DEPRECATED_DO_REGISTERS_INFO.
	* frame-base.c (default_frame_locals_address): Do not call
	DEPRECATED_FRAME_LOCALS_ADDRESS.
	(default_frame_args_address): Do not call
	DEPRECATED_FRAME_ARGS_ADDRESS.
@
text
@d1320 1
a1320 1
		   local_hex_string ((unsigned long) stop_pc));
@


1.120
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	Replace DEPRECATED_REGISTER_RAW_SIZE with register_size.
	* rs6000-tdep.c (rs6000_push_dummy_call)
	(rs6000_extract_return_value): Use register_size.
	* xstormy16-tdep.c (xstormy16_get_saved_register)
	(xstormy16_extract_return_value): Ditto.
	* valops.c (value_assign): Ditto.
	* v850ice.c (v850ice_fetch_registers, v850ice_store_registers):
	* v850-tdep.c (v850_extract_return_value): Ditto.
	* tracepoint.c (collect_symbol): Ditto.
	* target.c (debug_print_register): Ditto.
	* stack.c (frame_info): Ditto.
	* rs6000-nat.c (ARCH64, fetch_register, store_register): Ditto.
	* rom68k-rom.c (rom68k_supply_one_register): Ditto.
	* remote.c (struct packet_reg, remote_wait, remote_async_wait)
	(store_register_using_P): Ditto.
	* remote-vxmips.c (vx_read_register, vx_write_register): Ditto.
	* remote-sim.c (gdbsim_fetch_register, gdbsim_store_register): Ditto.
	* remote-mips.c (mips_wait, mips_fetch_registers): Ditto.
	* remote-e7000.c (fetch_regs_from_dump, sub2_from_pc): Ditto.
	* regcache.c (deprecated_read_register_bytes)
	(deprecated_write_register_bytes, read_register)
	(write_register): Ditto.
	* ppc-linux-nat.c (fetch_altivec_register, fetch_register)
	(supply_vrregset, store_altivec_register, fill_vrregset): Ditto.
	* monitor.c (monitor_supply_register, monitor_fetch_register)
	(monitor_store_register): Ditto.
	* mn10300-tdep.c (mn10300_pop_frame_regular)
	(mn10300_print_register): Ditto.
	* mipsv4-nat.c (fill_fpregset): Ditto.
	* mips-linux-tdep.c (supply_32bit_reg, fill_fpregset)
	(mips64_fill_fpregset): Ditto.
	* mi/mi-main.c (register_changed_p, get_register)
	(mi_cmd_data_write_register_values): Ditto.
	* lynx-nat.c (fetch_inferior_registers, store_inferior_registers):
	* irix5-nat.c (fill_gregset, fetch_core_registers):
	* infrun.c (write_inferior_status_register): Ditto.
	* infptrace.c (fetch_register, store_register): Ditto.
	* infcmd.c (default_print_registers_info): Ditto.
	* ia64-linux-nat.c (COPY_REG, fill_fpregset): Ditto.
	* ia64-aix-nat.c (COPY_REG, fill_gregset): Ditto.
	* i386gnu-nat.c (gnu_store_registers, fill): Ditto.
	* hpux-thread.c (hpux_thread_fetch_registers)
	(hpux_thread_store_registers): Ditto.
	* hppah-nat.c (store_inferior_registers, fetch_register):
	* findvar.c (value_from_register): Ditto.
	* dve3900-rom.c (fetch_bitmapped_register):
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* alpha-tdep.h: Ditto.
	* aix-thread.c (pd_enable, fill_sprs64, fill_sprs32): Ditto.
@
text
@a1516 6
  if (DEPRECATED_DO_REGISTERS_INFO_P ())
    {
      DEPRECATED_DO_REGISTERS_INFO (regnum, print_all);
      return;
    }

@


1.119
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (deprecated_add_show_from_set): Deprecate.
	* xcoffsolib.c (_initialize_xcoffsolib): Update.
	* wince.c (_initialize_wince): Update.
	* win32-nat.c (_initialize_win32_nat): Update.
	* varobj.c (_initialize_varobj): Update.
	* valops.c (_initialize_valops): Update.
	* utils.c (initialize_utils, initialize_utils): Update.
	* tui/tui-win.c (_initialize_tui_win): Update.
	* top.c (init_main): Update.
	* symfile.c (_initialize_symfile): Update.
	* source.c (_initialize_source): Update.
	* somsolib.c (_initialize_som_solib): Update.
	* solib.c (_initialize_solib): Update.
	* solib-frv.c (_initialize_frv_solib): Update.
	* serial.c (_initialize_serial): Update.
	* ser-go32.c (_initialize_ser_dos, _initialize_ser_dos): Update.
	* remote.c (_initialize_remote, _initialize_remote): Update.
	* remote-vx.c (_initialize_vx): Update.
	* remote-utils.c (_initialize_sr_support): Update.
	* remote-sds.c (_initialize_remote_sds): Update.
	* remote-mips.c (_initialize_remote_mips): Update.
	* remote-e7000.c (_initialize_remote_e7000): Update.
	* proc-api.c (_initialize_proc_api): Update.
	* printcmd.c: Update.
	* parse.c (_initialize_parse): Update.
	* pa64solib.c (_initialize_pa64_solib): Update.
	* p-valprint.c (_initialize_pascal_valprint): Update.
	* monitor.c (_initialize_remote_monitors): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* maint.c (_initialize_maint_cmds): Update.
	* lin-lwp.c (_initialize_lin_lwp): Update.
	* language.c (_initialize_language): Update.
	* kod.c (_initialize_kod): Update.
	* infrun.c (set_schedlock_func, _initialize_infrun): Update.
	* i386-tdep.c (_initialize_i386_tdep): Update.
	* gdbtypes.c (build_gdbtypes, _initialize_gdbtypes): Update.
	* gdbarch.sh: Update.
	* gdbarch.c: Re-generate.
	* gdb-events.sh: Update.
	* gdb-events.c: Re-generate.
	* frame.c (_initialize_frame): Update.
	* exec.c: Update.
	* demangle.c (_initialize_demangler): Update.
	* dcache.c (_initialize_dcache): Update.
	* cris-tdep.c (_initialize_cris_tdep, cris_version_update): Update.
	* cp-valprint.c (_initialize_cp_valprint): Update.
	* corefile.c (_initialize_core): Update.
	* command.h: Update.
	* cli/cli-decode.h: Update.
	* cli/cli-cmds.c (init_cli_cmds): Update.
	* charset.c (_initialize_charset): Update.
	* breakpoint.c (_initialize_breakpoint): Update.
	* arm-tdep.c (_initialize_arm_tdep_initialize_arm_tdep): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.
	* aix-thread.c (_initialize_aix_thread): Update.
@
text
@d1571 1
a1571 1
	  for (j = 0; j < DEPRECATED_REGISTER_RAW_SIZE (i); j++)
d1577 1
a1577 1
		idx = DEPRECATED_REGISTER_RAW_SIZE (i) - 1 - j;
@


1.118
log
@	* infcmd.c (attach_command): Move call to target_terminal_inferior
	behind loading symbol table.
@
text
@d1973 1
a1973 1
  c = add_show_from_set (c, &showlist);
@


1.117
log
@2004-06-20  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (RETURN_VALUE): Default to legacy_return_value.
	* gdbarch.h, gdbarch.c: Re-generate.
	* Makefile.in (arch-utils.o): Update dependencies.
	* values.c (using_struct_return): Move code calling
	USE_STRUCT_CONVENTION to legacy_return_value, simplify.
	* stack.c (return_command): Move code calling STORE_RETURN_VALUE
	to legacy_return_value, simplify.
	* infcmd.c (print_return_value): Move code calling
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS and EXTRACT_RETURN_VALUE
	to legacy_return_value, simplify.
	* infcall.c (call_function_by_hand): Move code calling
	EXTRACT_RETURN_VALUE to legacy_return_value, simplify.
	* arch-utils.c: Update copyright.  Include "gdbcore.h".
	(legacy_return_value): New function.
	* arch-utils.h: Update copyright.
	(legacy_return_value): Declare.
@
text
@a1790 3
  /* Install inferior's terminal modes.  */
  target_terminal_inferior ();

d1849 3
@


1.116
log
@2004-06-13  Andrew Cagney  <cagney@@gnu.org>

	* infcmd.c (print_return_value): Fix logic, allow
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS when struct_return.
@
text
@d1094 1
a1094 26
  if (gdbarch_return_value_p (gdbarch))
    {
      switch (gdbarch_return_value (gdbarch, value_type, NULL, NULL, NULL))
	{
	case RETURN_VALUE_REGISTER_CONVENTION:
	case RETURN_VALUE_ABI_RETURNS_ADDRESS:
	  value = allocate_value (value_type);
	  CHECK_TYPEDEF (value_type);
	  gdbarch_return_value (current_gdbarch, value_type, stop_registers,
				VALUE_CONTENTS_RAW (value), NULL);
	  break;
	case RETURN_VALUE_STRUCT_CONVENTION:
	  value = NULL;
	  break;
	default:
	  internal_error (__FILE__, __LINE__, "bad switch");
	}
    }
  else if (struct_return && DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
    {
      CORE_ADDR addr = DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (stop_registers);
      if (!addr)
	error ("Function return value unknown.");
      value = value_at (value_type, addr, NULL);
    }
  else
d1096 2
d1099 9
a1107 2
      EXTRACT_RETURN_VALUE (value_type, stop_registers,
			    VALUE_CONTENTS_RAW (value));
@


1.115
log
@2004-06-12  Andrew Cagney  <cagney@@gnu.org>

	* values.c (register_value_being_returned): Delete function.
	* infcmd.c (legacy_return_value): Delete function.
	* infcall.c (call_function_by_hand): Inline
	"register_value_being_returned", simplify.
	* values.c (using_struct_return): Update comment, refer to
	print_return_value instead of register_value_being_returned.
	* infcmd.c (print_return_value): Inline calls to
	register_value_being_returned and legacy_return_value.  Simplify.
@
text
@d1112 1
a1112 1
  else if (!struct_return && DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
@


1.114
log
@2004-06-09  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERT_TO_RAW)
	(DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL)
	(DEPRECATED_REGISTER_CONVERTIBLE): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (default_print_registers_info): Simplify.
	* findvar.c (value_of_register): Simplify.
	* mi/mi-main.c (get_register): Simplify.
	* arch-utils.c (legacy_convert_register_p): Always return 0.
	(legacy_register_to_value, legacy_value_to_register): Always call
	internal_error.
@
text
@a1074 35

static struct value *
legacy_return_value (int struct_return, struct type *value_type)
{
  struct value *value;

  if (!struct_return)
    {
      /* The return value can be found in the inferior's registers.  */
      return register_value_being_returned (value_type, stop_registers);
    }

  if (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
    {
      CORE_ADDR addr;

      addr = DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (stop_registers);
      if (!addr)
	error ("Function return value unknown.");
      return value_at (value_type, addr, NULL);
    }

  /* It is "struct return" yet the value is being extracted,
     presumably from registers, using EXTRACT_RETURN_VALUE.  This
     doesn't make sense.  Unfortunately, the legacy interfaces allowed
     this behavior.  Sigh!  */
  value = allocate_value (value_type);
  CHECK_TYPEDEF (value_type);
  /* If the function returns void, don't bother fetching the return
     value.  */
  EXTRACT_RETURN_VALUE (value_type, stop_registers,
			VALUE_CONTENTS_RAW (value));
  return value;
}

d1083 3
a1085 1
  struct value *value = NULL;
a1104 1

d1106 1
d1108 2
d1112 7
d1120 5
a1124 1
    value = legacy_return_value (struct_return, value_type);
@


1.113
log
@2004-05-25  Andrew Cagney  <cagney@@gnu.org>

	* target.h (struct target_ops): Add from_tty to
	to_create_inferior.
	(target_create_inferior, find_default_create_inferior): Update.
	* infcmd.c (run_command): Update.
	* wince.c (child_create_inferior): Update.
	* win32-nat.c (child_create_inferior): Update.
	* uw-thread.c (uw_thread_create_inferior): Update.
	* thread-db.c (thread_db_create_inferior): Update.
	* target.c (debug_to_create_inferior)
	(find_default_create_inferior): Update.
	(maybe_kill_then_create_inferior): Update.
	* sol-thread.c (sol_thread_create_inferior): Update.
	* remote.c (extended_remote_async_create_inferior)
	(extended_remote_create_inferior): Update.
	* remote-vx.c (vx_create_inferior): Update.
	* remote-st.c (st2000_create_inferior): Update.
	* remote-sim.c (gdbsim_create_inferior): Update.
	* remote-sds.c (sds_create_inferior): Update.
	* remote-rdp.c (remote_rdp_create_inferior): Update.
	* remote-rdi.c (arm_rdi_create_inferior): Update.
	* remote-m32r-sdi.c (m32r_create_inferior): Update.
	* remote-e7000.c (e7000_create_inferior): Update.
	* procfs.c (procfs_create_inferior): Update.
	* ocd.c (ocd_create_inferior): Update.
	* ocd.h (ocd_create_inferior): Update.
	* nto-procfs.c (procfs_create_inferior): Update.
	* monitor.c (monitor_create_inferior): Update.
	* lin-lwp.c (lin_lwp_create_inferior): Update.
	* inftarg.c (child_create_inferior): Update.
	* hpux-thread.c (hpux_thread_create_inferior): Update.
	* gnu-nat.c (gnu_create_inferior): Update.
@
text
@d1551 1
a1551 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
d1591 1
a1591 1
      if (! frame_register_read (frame, i, raw_buffer))
a1596 16
      /* FIXME: cagney/2002-08-03: This code shouldn't be necessary.
         The function frame_register_read() should have returned the
         pre-cooked register so no conversion is necessary.  */
      /* Convert raw data to virtual format if necessary.  */
      if (DEPRECATED_REGISTER_CONVERTIBLE_P ()
	  && DEPRECATED_REGISTER_CONVERTIBLE (i))
	{
	  DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (i, register_type (current_gdbarch, i),
				       raw_buffer, virtual_buffer);
	}
      else
	{
	  memcpy (virtual_buffer, raw_buffer,
		  DEPRECATED_REGISTER_VIRTUAL_SIZE (i));
	}

d1603 1
a1603 1
	  val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
d1614 1
a1614 1
	      fprintf_filtered (file, "%02x", (unsigned char) raw_buffer[idx]);
d1621 1
a1621 1
	  val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
d1628 1
a1628 1
	      val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
@


1.112
log
@        * infcmd.c (kill_if_already_running): New function, extracted
        from run_command().
        (run_command): Replace extracted code by call to
        kill_if_already_running().
        (start_command): New function.
        (_initialize_infcmd): Add "start" command.
@
text
@d482 1
a482 1
			  environ_vector (inferior_environ));
@


1.111
log
@2004-05-12  Andrew Cagney  <cagney@@redhat.com>

	* thread.c (load_infrun_state): Delete step_sp.
	* infrun.c (context_switch): Ditto.
	* inferior.h (step_sp): Ditto.
	* infcmd.c (step_sp, step_1, step_once, until_next_command): Ditto.
	* gdbthread.h (struct thread_info, save_infrun_state)
	(restore_infrun_state): Ditto.
@
text
@d378 7
a384 2
static void
run_command (char *args, int from_tty)
a385 4
  char *exec_file;

  dont_repeat ();

d398 6
d405 3
d494 23
d2179 7
@


1.110
log
@2004-05-12  Andrew Cagney  <cagney@@redhat.com>

	* infrun.c (adjust_pc_after_break): Rewrite decr logic,
	eliminate reference to step_sp.
	(struct execution_control_state, init_execution_control_state)
	(handle_inferior_event, keep_going): Delete update_step_sp and
	step_sp.
	* infcmd.c (step_sp): Note that variable is unused.
@
text
@a188 5
/* Our notion of the current stack pointer.  */
/* NOTE: cagney/2004-05-09: This variable is not used and should be
   garbage collected.  */
CORE_ADDR step_sp;

a622 1
	  step_sp = read_sp ();
a721 1
      step_sp = read_sp ();
a973 1
  step_sp = read_sp ();
@


1.109
log
@* defs.h (enum return_value_convention): Add
RETURN_VALUE_ABI_RETURNS_ADDRESS and
RETURN_VALUE_ABI_PRESERVES_ADDRESS.
* infcmd.c (legacy_return_value): New function.
(print_return_value): Rwerite to implement
RETURN_VALUE_ABI_RETURNS_ADDRESS.
* values.c (using_struct_return): Check for inequality to
RETURN_VALUE_REGISTER_CONVENTION instead of equality to
RETURN_VALUE_STRUCT_CONVENTION.
* i386-tdep.c (i386_return_value): Implement
RETURN_VALUE_ABI_RETURNS_ADDRESS.
@
text
@d190 2
a191 1

@


1.108
log
@2004-04-28  Andrew Cagney  <cagney@@redhat.com>

	* stack.c (print_stack_frame_stub): Delete declaration.
	(struct print_stack_frame_args, print_stack_frame)
	(print_frame_info, print_frame): Replace "source" with print what.
	Replace "print" with "print_level".  Replace "args" with
	"print_args".
	* frame.h (show_and_print_stack_frame, print_stack_frame)
	(print_frame_info): Update declarations.
	* stack.c (select_and_print_frame, frame_command)
	(current_frame_command, up_command, down_command): Update calls -
	use get_selected_frame, pass "enum print_what" for source, do not
	call frame_relative_level.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames): Ditto.
	* remote-rdp.c (remote_rdp_open): Ditto.
	* remote-mips.c (common_open): Ditto.
	* remote-e7000.c (e7000_start_remote): Ditto.
	* ocd.c (ocd_start_remote): Ditto.
	* mi/mi-main.c (mi_cmd_exec_return): Ditto.
	* infrun.c (normal_stop): Ditto.
	* inflow.c (kill_command): Ditto.
	* infcmd.c (finish_command): Ditto.
	* corelow.c (core_open): Ditto.
	* tracepoint.c (finish_tfind_command): Ditto.
	* thread.c (info_threads_command, info_threads_command)
	(restore_current_thread, do_captured_thread_select): Ditto.
	* ada-tasks.c (task_command): Ditto.
@
text
@d1050 34
d1089 1
d1092 1
a1092 1
  struct value *value;
a1093 8
  if (!struct_return)
    {
      /* The return value can be found in the inferior's registers.  */
      value = register_value_being_returned (value_type, stop_registers);
    }
  /* FIXME: cagney/2004-01-17: When both return_value and
     extract_returned_value_address are available, should use that to
     find the address of and then extract the returned value.  */
d1100 2
a1101 5
  else if (gdbarch_return_value_p (current_gdbarch))
    /* We cannot determine the contents of the structure because it is
       on the stack, and we don't know where, since we did not
       initiate the call, as opposed to the call_function_by_hand
       case.  */
d1103 1
a1103 19
      gdb_assert (gdbarch_return_value (current_gdbarch, value_type,
					NULL, NULL, NULL)
		  == RETURN_VALUE_STRUCT_CONVENTION);
      ui_out_text (uiout, "Value returned has type: ");
      ui_out_field_string (uiout, "return-type", TYPE_NAME (value_type));
      ui_out_text (uiout, ".");
      ui_out_text (uiout, " Cannot determine contents\n");
      return;
    }
  else
    {
      if (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
	{
	  CORE_ADDR addr = DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (stop_registers);
	  if (!addr)
	    error ("Function return value unknown.");
	  value = value_at (value_type, addr, NULL);
	}
      else
d1105 2
a1106 4
	  /* It is "struct return" yet the value is being extracted,
             presumably from registers, using EXTRACT_RETURN_VALUE.
             This doesn't make sense.  Unfortunately, the legacy
             interfaces allowed this behavior.  Sigh!  */
d1109 6
a1114 4
	  /* If the function returns void, don't bother fetching the
	     return value.  */
	  EXTRACT_RETURN_VALUE (value_type, stop_registers,
				VALUE_CONTENTS_RAW (value));
d1117 2
d1120 21
a1140 11
  /* Print it.  */
  stb = ui_out_stream_new (uiout);
  old_chain = make_cleanup_ui_out_stream_delete (stb);
  ui_out_text (uiout, "Value returned is ");
  ui_out_field_fmt (uiout, "gdb-result-var", "$%d",
		    record_latest_value (value));
  ui_out_text (uiout, " = ");
  value_print (value, stb->stream, 0, Val_no_prettyprint);
  ui_out_field_stream (uiout, "return-value", stb);
  ui_out_text (uiout, "\n");
  do_cleanups (old_chain);
@


1.107
log
@2004-04-21  Andrew Cagney  <cagney@@redhat.com>

	* annotate.h (deprecated_annotate_starting_hook)
	(deprecated_annotate_stopped_hook)
	(deprecated_annotate_exited_hook)
	(deprecated_annotate_signal_hook)
	(deprecated_annotate_signalled_hook): Deprecate.
	* tracepoint.h (deprecated_create_tracepoint_hook)
	(deprecated_delete_tracepoint_hook)
	(deprecated_modify_tracepoint_hook)
	(deprecated_trace_find_hook)
	(deprecated_trace_start_stop_hook): Deprecate.
	* target.h (deprecated_target_new_objfile_hook): Deprecate.
	* remote.h (deprecated_target_resume_hook)
	(deprecated_target_wait_loop_hook): Deprecate.
	* gdbcore.h (deprecated_exec_file_display_hook)
	(deprecated_file_changed_hook): Deprecate.
	* frame.h (deprecated_selected_frame_level_changed_hook): Deprecate.
	* defs.h (deprecated_modify_breakpoint_hook)
	(deprecated_command_loop_hook, deprecated_show_load_progress)
	(deprecated_print_frame_info_listing_hook)
	(deprecated_query_hook, deprecated_warning_hook)
	(deprecated_flush_hook, deprecated_create_breakpoint_hook)
	(deprecated_delete_breakpoint_hook)
	(deprecated_interactive_hook, deprecated_registers_changed_hook)
	(deprecated_readline_begin_hook, deprecated_readline_hook)
	(deprecated_readline_end_hook, deprecated_register_changed_hook)
	(deprecated_memory_changed_hook, deprecated_init_ui_hook)
	(deprecated_context_hook, deprecated_target_wait_hook)
	(deprecated_attach_hook, deprecated_detach_hook)
	(deprecated_call_command_hook, deprecated_set_hook)
	(deprecated_error_hook, deprecated_error_begin_hook)
	(deprecated_ui_load_progress_hook): Deprecate.
	* valops.c, uw-thread.c, utils.c, tui/tui-io.c: Update.
	* tui/tui-hooks.c, tracepoint.c, top.c, thread-db.c: Update.
	* target.c, symfile.c, stack.c, sol-thread.c, rs6000-nat.c: Update.
	* remote.c, remote-mips.c, regcache.c, mi/mi-interp.c: Update.
	* main.c, interps.c, infcmd.c, hpux-thread.c, frame.c: Update.
	* exec.c, dsrec.c, d10v-tdep.c, corefile.c, complaints.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, breakpoint.c: Update.
	* annotate.c, aix-thread.c: Update.
@
text
@d1237 1
a1237 2
      print_stack_frame (deprecated_selected_frame,
			 frame_relative_level (deprecated_selected_frame), 0);
@


1.106
log
@	* infcmd.c (attach_command): Reread symbols if we already have
	an exec file.
@
text
@d1864 2
a1865 2
  if (attach_hook)
    attach_hook ();
d1887 2
a1888 2
  if (detach_hook)
    detach_hook ();
d1907 2
a1908 2
  if (detach_hook)
    detach_hook ();
@


1.105
log
@2004-02-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERTIBLE): Add predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.c (deprecated_register_convertible_not): Delete.
	* arch-utils.h (deprecated_register_convertible_not): Delete.
	* mi/mi-main.c (get_register): Update.  Update copyright.
	* infcmd.c (default_print_registers_info): Update.
@
text
@d1846 5
@


1.105.2.1
log
@Merge mainline to intercu branch.
@
text
@a1845 5
  else
    {
      reopen_exec_file ();
      reread_symbols ();
    }
@


1.105.2.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d189 4
d382 6
a387 4
/* Kill the inferior if already running.  This function is designed
   to be called when we are about to start the execution of the program
   from the beginning.  Ask the user to confirm that he wants to restart
   the program being debugged when FROM_TTY is non-null.  */
a388 3
void
kill_if_already_running (int from_tty)
{
a400 6
}

static void
run_command (char *args, int from_tty)
{
  char *exec_file;
a401 3
  dont_repeat ();

  kill_if_already_running (from_tty);
d431 1
a431 1
      if (target_can_async_p ())
d440 1
a440 1
      if (async_exec && !target_can_async_p ())
d445 1
a445 1
      if (!async_exec && target_can_async_p ())
d476 1
a476 1
			  environ_vector (inferior_environ), from_tty);
a487 23
/* Start the execution of the program up until the beginning of the main
   program.  */

static void
start_command (char *args, int from_tty)
{
  /* Some languages such as Ada need to search inside the program
     minimal symbols for the location where to put the temporary
     breakpoint before starting.  */
  if (!have_minimal_symbols ())
    error ("No symbol table loaded.  Use the \"file\" command.");

  /* If the inferior is already running, we want to ask the user if we
     should restart it or not before we insert the temporary breakpoint.
     This makes sure that this command doesn't have any side effect if
     the user changes its mind.  */
  kill_if_already_running (from_tty);

  /* Insert the temporary breakpoint, and run...  */
  tbreak_command (main_name (), 0);
  run_command (args, from_tty);
} 

d500 1
a500 1
  if (async_exec && !target_can_async_p ())
d505 1
a505 1
  if (!async_exec && target_can_async_p ())
d594 1
a594 1
  if (async_exec && !target_can_async_p ())
d599 1
a599 1
  if (!async_exec && target_can_async_p ())
d610 1
a610 1
      if (!target_can_async_p ())
d617 1
a617 1
  if (!target_can_async_p ())
d627 1
d676 1
a676 1
      if (target_can_async_p ())
d727 1
d804 1
a804 1
  if (async_exec && !target_can_async_p ())
d809 1
a809 1
  if (!async_exec && target_can_async_p ())
d980 1
d1001 1
a1001 1
  if (async_exec && !target_can_async_p ())
d1006 1
a1006 1
  if (!async_exec && target_can_async_p ())
d1035 1
a1035 1
  if (async_exec && !target_can_async_p ())
d1040 1
a1040 1
  if (!async_exec && target_can_async_p ())
d1049 1
a1054 1
  struct gdbarch *gdbarch = current_gdbarch;
d1059 8
a1066 2
  gdb_assert (TYPE_CODE (value_type) != TYPE_CODE_VOID);

d1073 9
a1081 33

  switch (gdbarch_return_value (gdbarch, value_type, NULL, NULL, NULL))
    {
    case RETURN_VALUE_REGISTER_CONVENTION:
    case RETURN_VALUE_ABI_RETURNS_ADDRESS:
      value = allocate_value (value_type);
      CHECK_TYPEDEF (value_type);
      gdbarch_return_value (current_gdbarch, value_type, stop_registers,
			    VALUE_CONTENTS_RAW (value), NULL);
      break;
    case RETURN_VALUE_STRUCT_CONVENTION:
      value = NULL;
      break;
    default:
      internal_error (__FILE__, __LINE__, "bad switch");
    }

  if (value)
    {
      /* Print it.  */
      stb = ui_out_stream_new (uiout);
      old_chain = make_cleanup_ui_out_stream_delete (stb);
      ui_out_text (uiout, "Value returned is ");
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d",
			record_latest_value (value));
      ui_out_text (uiout, " = ");
      value_print (value, stb->stream, 0, Val_no_prettyprint);
      ui_out_field_stream (uiout, "return-value", stb);
      ui_out_text (uiout, "\n");
      do_cleanups (old_chain);
    }
  else
    {
d1086 24
d1111 12
d1194 1
a1194 1
  if (async_exec && !target_can_async_p ())
d1199 1
a1199 1
  if (!async_exec && target_can_async_p ())
d1223 1
a1223 1
  if (!target_can_async_p ())
d1237 2
a1238 1
      print_stack_frame (get_selected_frame (), 1, LOCATION);
d1245 1
a1245 1
  if (target_can_async_p ())
d1268 1
a1268 1
  if (!target_can_async_p ())
d1313 1
a1313 1
		   hex_string ((unsigned long) stop_pc));
d1508 8
a1515 1
  char buffer[MAX_REGISTER_SIZE];
d1549 1
a1549 1
      if (! frame_register_read (frame, i, buffer))
d1555 16
d1577 1
a1577 1
	  val_print (register_type (current_gdbarch, i), buffer, 0, 0,
d1581 1
a1581 1
	  for (j = 0; j < register_size (current_gdbarch, i); j++)
d1587 2
a1588 2
		idx = register_size (current_gdbarch, i) - 1 - j;
	      fprintf_filtered (file, "%02x", (unsigned char) buffer[idx]);
d1595 1
a1595 1
	  val_print (register_type (current_gdbarch, i), buffer, 0, 0,
d1602 1
a1602 1
	      val_print (register_type (current_gdbarch, i), buffer, 0, 0,
d1801 3
a1861 3
  /* Install inferior's terminal modes.  */
  target_terminal_inferior ();

d1864 2
a1865 2
  if (deprecated_attach_hook)
    deprecated_attach_hook ();
d1887 2
a1888 2
  if (deprecated_detach_hook)
    deprecated_detach_hook ();
d1907 2
a1908 2
  if (deprecated_detach_hook)
    deprecated_detach_hook ();
d1916 1
a1916 1
  if (target_can_async_p ())
d1983 1
a1983 1
  c = deprecated_add_show_from_set (c, &showlist);
a2136 7
  c = add_com ("start", class_run, start_command,
               "\
Run the debugged program until the beginning of the main procedure.\n\
You may specify arguments to give to your program, just as with the\n\
\"run\" command.");
  set_cmd_completer (c, filename_completer);

@


1.104
log
@2004-01-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (EXTRACT_STRUCT_VALUE_ADDRESS): Deprecate.  Add
	comments mentioning extract_returned_value_address.
	* infcmd.c (print_return_value): Update.  Add comments on
	extract_returned_value_address.
	* stack.c (return_command): Add comments on
	extract_returned_value_address.
	* values.c: Update comment.
	* m32r-tdep.c: Update comment.
	* sparc-tdep.c: Update comment.
	* ia64-tdep.c (ia64_use_struct_convention): Update comment.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* m68klinux-tdep.c (m68k_linux_init_abi): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

Index: doc/ChangeLog
2004-01-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	EXTRACT_STRUCT_VALUE_ADDRESS to
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@d1559 2
a1560 1
      if (DEPRECATED_REGISTER_CONVERTIBLE (i))
@


1.103
log
@* infcmd.c (print_return_value): Plug memory leak; delete
ui_stream object.  Rename argument `structure_return' to
`struct_return'.
@
text
@d1064 3
d1090 1
a1090 1
      if (EXTRACT_STRUCT_VALUE_ADDRESS_P ())
d1092 1
a1092 1
	  CORE_ADDR addr = EXTRACT_STRUCT_VALUE_ADDRESS (stop_registers);
@


1.102
log
@* infcmd.c (print_return_value): Wrap long lines.
(finish_command_continuation, finish_command): Remove unused
variable `funcaddr'.  Fix some coding-standards problems.
@
text
@d1053 1
a1053 1
print_return_value (int structure_return, struct type *value_type)
d1055 2
a1057 1
  static struct ui_stream *stb = NULL;
d1059 1
a1059 1
  if (!structure_return)
d1061 1
a1062 8
      stb = ui_out_stream_new (uiout);
      ui_out_text (uiout, "Value returned is ");
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d",
			record_latest_value (value));
      ui_out_text (uiout, " = ");
      value_print (value, stb->stream, 0, Val_no_prettyprint);
      ui_out_field_stream (uiout, "return-value", stb);
      ui_out_text (uiout, "\n");
a1106 8
      stb = ui_out_stream_new (uiout);
      ui_out_text (uiout, "Value returned is ");
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d",
			record_latest_value (value));
      ui_out_text (uiout, " = ");
      value_print (value, stb->stream, 0, Val_no_prettyprint);
      ui_out_field_stream (uiout, "return-value", stb);
      ui_out_text (uiout, "\n");
d1108 12
@


1.101
log
@	* breakpoint.c (must_shift_inst_regs): Delete.
	(bpstat_stop_status): Delete references to DECR_PC_AFTER_HW_BREAK
	and SHIFT_INST_REGS.
	* infcmd.c (step_1, step_1_continuation): Delete references to
	SHIFT_INST_REGS.
	* infrun.c (keep_going): Likewise.
	* target.h (DECR_PC_AFTER_HW_BREAK): Don't define.
	* config/i386/nm-i386.h (DECR_PC_AFTER_HW_BREAK): Likewise.
@
text
@d1050 2
a1051 1
/* Print the result of a function at the end of a 'finish' command. */
d1063 2
a1064 1
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", record_latest_value (value));
d1082 2
a1083 1
      gdb_assert (gdbarch_return_value (current_gdbarch, value_type, NULL, NULL, NULL)
d1115 2
a1116 1
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", record_latest_value (value));
d1125 9
a1133 8
   has stopped.  In asynchronous mode, we wait for the target to stop in
   the call to poll or select in the event loop, so it is impossible to
   do all the stuff as part of the finish_command function itself. The
   only chance we have to complete this command is in
   fetch_inferior_event, which is called by the event loop as soon as it
   detects that the target has stopped. This function is called via the
   cmd_continuation pointer. */
void
d1141 2
a1142 2
  function   = (struct symbol *)     arg->next->data.pointer;
  cleanups   = (struct cleanup *)    arg->next->next->data.pointer;
d1145 1
a1145 1
      && function != 0)
a1147 1
      CORE_ADDR funcaddr;
d1149 1
d1162 3
a1164 4
      funcaddr = BLOCK_START (SYMBOL_BLOCK_VALUE (function));

      struct_return = using_struct_return (check_typedef (value_type),
					   BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));
d1168 1
d1172 2
a1173 2
/* "finish": Set a temporary breakpoint at the place
   the selected frame will return to, then continue.  */
d1187 1
a1187 1
  /* Find out whether we must run in the background. */
d1192 1
a1192 1
     error out. */
d1197 1
a1197 1
     foreground, synchronously. */
d1200 1
a1200 1
      /* Simulate synchronous execution */
d1231 2
a1232 2
  /* Print info on the selected frame, including level number
     but not source.  */
d1243 1
a1243 1
     stopped, in fetch_inferior_event. */
d1261 1
a1261 1
  proceed_to_finish = 1;	/* We want stop_registers, please... */
d1265 2
a1266 2
     cannot do async execution. Otherwise, complete this command when
     the target actually stops, in fetch_inferior_event. */
d1269 1
a1269 2

      /* Did we stop at our breakpoint? */
d1271 1
a1271 1
	  && function != 0)
a1273 1
	  CORE_ADDR funcaddr;
d1275 1
d1282 1
a1282 1
	  /* FIXME: Shouldn't we do the cleanups before returning? */
d1286 3
a1288 5
	  funcaddr = BLOCK_START (SYMBOL_BLOCK_VALUE (function));

	  struct_return =
	    using_struct_return (check_typedef (value_type),
			BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));
d1292 1
d1297 1
@


1.100
log
@2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (print_return_value): Delete reference to
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
a663 7

	  /* FIXME: On nexti, this may have already been done (when we hit the
	     step resume break, I think).  Probably this should be moved to
	     wait_for_inferior (near the top).  */
#if defined (SHIFT_INST_REGS)
	  SHIFT_INST_REGS ();
#endif
d698 1
a698 9
    {
      /* FIXME: On nexti, this may have already been done (when we hit the
	 step resume break, I think).  Probably this should be moved to
	 wait_for_inferior (near the top).  */
#if defined (SHIFT_INST_REGS)
      SHIFT_INST_REGS ();
#endif
      step_once (skip_subroutines, single_inst, count - 1);
    }
@


1.99
log
@2003-11-22  Andrew Cagney  <cagney@@redhat.com>

	* hppa-tdep.c (hppa_value_returned_from_stack): Delete function.
	* config/pa/tm-hppa.h (hppa_value_returned_from_stack): Delete
	declaration.
	(DEPRECATED_VALUE_RETURNED_FROM_STACK): Delete macro.
	* infcall.c (call_function_by_hand): Delete #ifdef
	DEPRECATED_VALUE_RETURNED_FROM_STACK code.
	* infcmd.c (print_return_value): Ditto.
@
text
@a1111 8
      else if (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
	{
	  char *buf = deprecated_grub_regcache_for_registers (stop_registers);
	  CORE_ADDR addr = DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (buf);
	  if (!addr)
	    error ("Function return value unknown.");
	  value = value_at (value_type, addr, NULL);
	}
@


1.98
log
@Index: mi/ChangeLog
2003-10-24  Andrew Cagney  <cagney@@redhat.com>

	* tui-out.c: Fix "fortunatly"[sic].

Index: doc/ChangeLog
2003-10-24  Andrew Cagney  <cagney@@redhat.com>

	* annotate.texinfo: Fix "fortunatly"[sic].

2003-10-24  Andrew Cagney  <cagney@@redhat.com>

	* osabi.c (gdbarch_init_osabi): Fix typos, and "fortunatly"[sic].
	* PROBLEMS, arch-utils.c, cli-out.c, command.h: Ditto.
	* complaints.c, cris-tdep.c, disasm.c, dwarf2-frame.c: Ditto.
	* frame.c, frame.h, infcall.c, infcmd.c, infrun.c: Ditto.
	* kod.c, mips-tdep.c, regcache.c, regcache.h, remote.c: Ditto.
@
text
@d1089 1
a1089 7
#ifdef DEPRECATED_VALUE_RETURNED_FROM_STACK
#define DEPRECATED_VALUE_RETURNED_FROM_STACK_P 1
#else
#define DEPRECATED_VALUE_RETURNED_FROM_STACK_P 0
#endif
  else if (gdbarch_return_value_p (current_gdbarch)
	   || DEPRECATED_VALUE_RETURNED_FROM_STACK_P)
@


1.97
log
@2003-10-20  Andrew Cagney  <cagney@@redhat.com>

	* values.c (register_value_being_returned): Update comments.  Use
	"gdbarch_return_value" when available.
	(using_struct_return): Ditto.
	(set_return_value): Ditto.  Use "gdbarch_return_value" when
	available..  Print a warning, and not an error, when an unhandled
	return type is encountered.
	* infcmd.c: Include "gdb_assert.h".
	(print_return_value): When gdbarch_return_value_p, and using
	struct return, assume that the value is not available.
	* defs.h (return_value_convention): Define.
	* gdbarch.sh (gdbarch_return_value): New predicate method.
	* gdbarch.h, gdbarch.c: Re-generate
	* ppc-sysv-tdep.c (return_value_convention): Delete definition.

Index: doc/ChangeLog
2003-10-20  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	gdbarch_return_value.  Add cross references from
	USE_STRUCT_CONVENTION, EXTRACT_RETURN_VALUE, and
	STORE_RETURN_VALUE, and from/to EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@d1130 1
a1130 1
             This doesn't make sense.  Unfortunatly, the legacy
@


1.96
log
@2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_RAW_SIZE): Rename
	REGISTER_RAW_SIZE.
	* gdbarch.h, gdbarch.c: Re-generate.
	* aix-thread.c, alpha-tdep.h, arm-tdep.c, core-sol2.c: Update.
	* cris-tdep.c, dve3900-rom.c, findvar.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, ia64-tdep.c, infcmd.c, infptrace.c: Update.
	* infrun.c, irix5-nat.c, lynx-nat.c, mips-linux-tdep.c: Update.
	* mips-nat.c, mips-tdep.c, mipsv4-nat.c, mn10300-tdep.c: Update.
	* monitor.c, ns32k-tdep.c, ppc-linux-nat.c, regcache.c: Update.
	* remote-e7000.c, remote-mips.c, remote-sim.c: Update.
	* remote-vxmips.c, remote-vxsparc.c, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, rs6000-tdep.c, s390-tdep.c: Update.
	* sh64-tdep.c, sparc-nat.c, sparc-tdep.c, stack.c: Update.
	* target.c, tracepoint.c, v850-tdep.c, v850ice.c, valops.c: Update.
	* vax-tdep.c, vax-tdep.h, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-delta68.h, config/m68k/tm-vx68.h: Update.
	* config/sparc/tm-sparc.h, config/sparc/tm-sparclynx.h: Update.

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_RAW_SIZE to DEPRECATED_REGISTER_RAW_SIZE.
	* gdb.texinfo (Packets, Stop Reply Packets): Ditto.
	* gdbint.texinfo (Target Architecture Definition): Rename

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_RAW_SIZE to
	DEPRECATED_REGISTER_RAW_SIZE.
@
text
@d47 1
d1083 17
a1099 1
  else
d1101 2
a1102 12
      /* FIXME: 2003-09-27: When returning from a nested inferior
         function call, it's possible (with no help from the
         architecture vector) to locate and return/print a "struct
         return" value.  This is just a more complicated case of what
         is already being done in in the inferior function call code.
         In fact, when inferior function calls are made async, this
         will likely be made the norm.  */
      /* We cannot determine the contents of the structure because
	 it is on the stack, and we don't know where, since we did not
	 initiate the call, as opposed to the call_function_by_hand case */
#ifdef DEPRECATED_VALUE_RETURNED_FROM_STACK
      value = 0;
d1107 4
a1110 1
#else
a1145 1
#endif
@


1.95
log
@2003-10-01  Andrew Cagney  <cagney@@redhat.com>

	* value.h (register_value_being_returned): Declare.  Replace
	"value_being_returned".
	* infcall.c (call_function_by_hand): Use
	register_value_being_returned.
	* infcmd.c (print_return_value): Call
	"register_value_being_returned", handle struct return locally.
	* values.c (register_value_being_returned): New function.  Replace
	"value_being_returned".
@
text
@d1595 1
a1595 1
	  for (j = 0; j < REGISTER_RAW_SIZE (i); j++)
d1601 1
a1601 1
		idx = REGISTER_RAW_SIZE (i) - 1 - j;
@


1.94
log
@2003-10-01  Andrew Cagney  <cagney@@redhat.com>

	* infcall.c (call_function_by_hand): When STRUCT_RETURN, always
	use STRUCT_ADDR.  When not using "struct return convention", pass
	"0" to "value_being_returned".  Add FIXMEs.
	* infcmd.c (print_return_value): Pass an explicit 0/1 to
	value_being_returned.  Add comments.
	* values.c (value_being_returned): Add fixme.
	* hppa-tdep.c (hppa_extract_struct_value_address): Add FIXME.
	(hppa_value_returned_from_stack): Add FIXME.
@
text
@d1073 1
a1073 1
      value = value_being_returned (value_type, stop_registers, 0);
a1083 5
      /* FIXME: 2003-09-27: This code block should be handling the
         "use struct convention" case, and not the function
         value_being_returned.  This would allow the dramatic
         simplification of value_being_returned (perhaphs renamed to
         register_value_being_returned).  */
d1101 28
a1128 1
      value = value_being_returned (value_type, stop_registers, 1);
@


1.93
log
@2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_VIRTUAL_SIZE to
	DEPRECATED_REGISTER_VIRTUAL_SIZE.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_VIRTUAL_SIZE): Rename
	REGISTER_VIRTUAL_SIZE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* vax-tdep.h, sparc-tdep.c, regcache.h: Update.
	* regcache.c, mn10300-tdep.c, mips-tdep.c: Update.
	* infcmd.c, frame.c, findvar.c, cris-tdep.c: Update.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_VIRTUAL_SIZE to DEPRECATED_REGISTER_VIRTUAL_SIZE.
	(Target Architecture Definition):
@
text
@d1073 1
a1073 1
      value = value_being_returned (value_type, stop_registers, structure_return);
d1084 12
d1106 1
a1106 1
      value = value_being_returned (value_type, stop_registers, structure_return);
@


1.92
log
@2003-09-28  Andrew Cagney  <cagney@@redhat.com>

	* config/pa/tm-hppa.h (DEPRECATED_VALUE_RETURNED_FROM_STACK):
	Rename VALUE_RETURNED_FROM_STACK.
	* infcmd.c (print_return_value): Update.
	* infcall.c (call_function_by_hand): Update.
@
text
@d1548 1
a1548 1
		  REGISTER_VIRTUAL_SIZE (i));
@


1.91
log
@2003-09-20  Andrew Cagney  <cagney@@redhat.com>

	* breakpoint.c: Eliminate ARGSUSED.
	* buildsym.c, cli/cli-cmds.c, cli/cli-script.c: Ditto.
	* coffread.c, corelow.c, dwarf2read.c, event-top.c: Ditto.
	* exec.c, gcore.c, hpux-thread.c, infcmd.c, inflow.c: Ditto.
	* infrun.c, inftarg.c, maint.c, ocd.c, printcmd.c: Ditto.
	* procfs.c, regcache.c, remote-rdi.c, remote-sds.c: Ditto.
	* remote.c, sol-thread.c, source.c, stabsread.c: Ditto.
	* stack.c, symfile.c, target.c, top.c, typeprint.c: Ditto.
	* utils.c, v850ice.c, valprint.c, values.c, win32-nat.c: Ditto.
	* wince.c, remote-vx.c: Ditto.
@
text
@d1087 1
a1087 1
#ifdef VALUE_RETURNED_FROM_STACK
@


1.90
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* sparc-tdep.c (legacy_register_name): Delete function.
	* mips-tdep.c (mips_dump_tdep): Do not print REGISTER_NAME.
	(mips_gdbarch_init): Refer to MIPS_REGISTER_NAME in comments.
	* infcmd.c (gdb_register_name): Delete variable.
	* gdbarch.sh (SDB_REG_TO_REGNUM): Delete reference to
	REGISTER_NAME and "tm.h".
	* gdbarch.h, gdbarch.c: Regenerate.
	* dpx2-nat.c (regmap): Refer to REGISTER_NAME and not
	REGISTER_NAMES in comments.
	* remote-st.c (get_reg_name), i386b-nat.c (tregmap): Ditto.
	* m68klinux-nat.c (regmap): Ditto.

2003-09-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation on REGISTER_NAMES.
@
text
@a263 1
/* ARGSUSED */
a371 1
/* ARGSUSED */
a543 1
/* ARGSUSED */
a551 1
/* ARGSUSED */
a559 1
/* ARGSUSED */
a565 1
/* ARGSUSED */
a954 1
/* ARGSUSED */
a1279 1
/* ARGSUSED */
a1440 1
/* ARGSUSED */
a1897 1
/* ARGSUSED */
a1933 1
/* ARGSUSED */
@


1.89
log
@2003-09-16  Andrew Cagney  <cagney@@redhat.com>

	* buildsym.c: Remove more occurances of "register".
	* coffread.c, dbxread.c, dcache.c, dwarf2read.c: Ditto.
	* environ.c, eval.c, f-valprint.c, findvar.c: Ditto.
	* gdbtypes.c, gnu-v2-abi.c, h8300-tdep.c, hppa-tdep.c: Ditto.
	* infcmd.c, mdebugread.c, minsyms.c, mips-tdep.c: Ditto.
	* printcmd.c, remote-vx.c, sh-stub.c, sh-tdep.c: Ditto.
	* sh64-tdep.c, source.c, stabsread.c, stack.c: Ditto.
	* standalone.c, symfile.c, symmisc.c, symtab.c: Ditto.
	* utils.c, valops.c, values.c, xcoffread.c: Ditto.
@
text
@a1478 3
#ifdef REGISTER_NAMES
char *gdb_register_names[] = REGISTER_NAMES;
#endif
@


1.88
log
@2003-09-14  Andrew Cagney  <cagney@@redhat.com>

	* alpha-nat.c: Remove some occurances of "register".
	* alpha-tdep.c, arm-tdep.c, blockframe.c, breakpoint.c: Ditto.
	* buildsym.c, c-typeprint.c, c-valprint.c, coffread.c: Ditto.
	* corefile.c, cp-support.c, cp-valprint.c, cris-tdep.c: Ditto.
	* dbxread.c, dcache.c, dwarf2read.c, elfread.c: Ditto.
	* environ.c, eval.c, event-top.c, f-typeprint.c: Ditto.
	* f-valprint.c, findvar.c, frame.c, gdbtypes.c: Ditto.
	* h8300-tdep.c, hppa-tdep.c, hppab-nat.c, hppah-nat.c: Ditto.
	* hppam3-nat.c, hpread.c, ia64-aix-nat.c, ia64-linux-nat.c: Ditto.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Ditto.
	* infttrace.c, irix5-nat.c, jv-typeprint.c: Ditto.
	* jv-valprint.c, m68k-tdep.c, m68klinux-nat.c, main.c: Ditto.
	* mdebugread.c, minsyms.c, mips-linux-tdep.c: Ditto.
	* mips-nat.c, mips-tdep.c, mipsread.c, mipsv4-nat.c: Ditto.
	* ns32k-tdep.c, objfiles.c, p-typeprint.c: Ditto.
	* p-valprint.c, ppc-linux-nat.c, printcmd.c: Ditto.
	* remote-mips.c, remote-vx.c, rs6000-nat.c: Ditto.
	* rs6000-tdep.c, scm-exp.c, sh-tdep.c, sh64-tdep.c: Ditto.
	* solib.c, somread.c, source.c, sparc-tdep.c: Ditto.
	* stabsread.c, stack.c, standalone.c, symfile.c: Ditto.
	* symmisc.c, symtab.c, top.c, tracepoint.c: Ditto.
	* typeprint.c, utils.c, valarith.c, valops.c: Ditto.
	* values.c, vax-tdep.c, xcoffread.c: Ditto.
@
text
@d1340 1
a1340 1
      register char *val = get_in_environ (inferior_environ, var);
d1357 1
a1357 1
      register char **vector = environ_vector (inferior_environ);
@


1.87
log
@2003-09-13  Andrew Cagney  <cagney@@redhat.com>

	* values.c (using_struct_return): Delete "function" and "funcaddr"
	parameters.
	* value.h (using_struct_return): Update declaration.
	* infcmd.c (finish_command_continuation): Update.
	(finish_command): Update.
	* infcall.c (call_function_by_hand): Update.
	* eval.c (evaluate_subexp_standard): Update.
@
text
@d587 1
a587 1
  register int count = 1;
d809 1
a809 1
  register CORE_ADDR addr;
d1124 1
a1124 1
  register struct symbol *function;
d1167 2
a1168 2
  register struct frame_info *frame;
  register struct symbol *function;
d1369 1
a1369 1
  register char *p, *val, *var;
d1607 1
a1607 1
  register char *end;
@


1.86
log
@2003-08-04  Andrew Cagney  <cagney@@redhat.com>

	* reggroups.c (struct reggroup_el): Define.
	(struct reggroups): Delete field "nr_group".  Replace array
	"group" with a "first" to "last" linked list.
	(reggroups_init): Update.  Allocate using gdbarch's obstack.
	(reggroups_free): Delete function.
	(add_group): Update.  Add "el" parameter.
	(reggroup_add): Pass gdbarch obstack allocated space to add_group.
	(default_groups): Update.
	(reggroup_next): Replace reggroups.
	(reggroups_dump): Update.
	(_initialize_reggroup): Pass XMALLOC allocated space to add_group.
	* regcache.c (regcache_dump): Use reggroup_next instead of reggroups.
	* infcmd.c (registers_info): Use reggroup_next instead of reggroups.
@
text
@d1152 1
a1152 3
      struct_return = using_struct_return (value_of_variable (function, NULL),
					   funcaddr,
					   check_typedef (value_type),
d1278 1
a1278 3
	    using_struct_return (value_of_variable (function, NULL),
				 funcaddr,
				 check_typedef (value_type),
@


1.85
log
@2003-07-31  Michael Snyder  <msnyder@@redhat.com>

        * value.h, values.c, infcall.c,	infcmd.c: Revert 07-30	change,
        which is already covered by the	new frames infrastructure.
@
text
@d1680 4
a1683 4
	struct reggroup *const *group;
	for (group = reggroups (current_gdbarch);
	     (*group) != NULL;
	     group++)
d1688 1
a1688 1
	    if (strncmp (start, reggroup_name ((*group)), end - start) == 0)
d1691 1
a1691 1
	if ((*group) != NULL)
d1697 1
a1697 1
						 (*group)))
@


1.84
log
@2003-07-30  Michael Snyder  <msnyder@@redhat.com>

	* structs.h (value_being_returned): Add a struct_addr argument.
	* infcall.c (call_function_by_hand): Pass struct_addr to
	value_being_returned.
	* infcmd.c (print_return_value): Pass zero as struct_addr.
	* values.c (value_being_returned): If struct_addr is passed,
	use it instead of trying to recover it from the inferior.
@
text
@d1080 1
a1080 1
      value = value_being_returned (value_type, stop_registers, 0, 0);
d1083 1
a1083 2
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", 
			record_latest_value (value));
d1091 3
a1094 4
      /* We cannot determine the contents of the structure because it
	 is on the stack, and we don't know where, since we did not
	 initiate the call, as opposed to the call_function_by_hand
	 case.  */
d1101 1
a1101 2
      value = value_being_returned (value_type, stop_registers, 
				    structure_return, 0);
d1104 1
a1104 2
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", 
			record_latest_value (value));
@


1.83
log
@2003-07-07  Andrew Cagney  <cagney@@redhat.com>

	* expprint.c: Include "user-regs.h" instead of "frame.h".
	(print_subexp): Use user_reg_map_regnum_to_name, instead of
	frame_map_regnum_to_name.
	* frame.c: Include "user-regs.h" instead of "builtin-regs.h".
	(frame_map_name_to_regnum): Simplify, call
	user_reg_map_name_to_regnum.
	(frame_map_regnum_to_name): Simplify, call
	user_reg_map_regnum_to_name.
	(frame_register_unwind): Update.
	* std-regs.c: Include "user-regs.h" instead of "builtin-regs.h".
	(_initialize_frame_reg): Call user_reg_add_builtin.
	* findvar.c: Include "user-regs.h" instead of "builtin-regs.h".
	(value_of_register): Use value_of_user_reg.
	* eval.c (evaluate_subexp_standard): Update.
	* parse.c (write_dollar_variable): Update.
	* d10v-tdep.c (d10v_print_registers_info): Update.
	* infcmd.c (registers_info): Update.
	* Makefile.in (SFILES): Delete "builtin-regs.c", add "user-regs.c".
	(builtin_regs_h): Delete macro.
	(user_regs_h): Define.
	(COMMON_OBS): Delete "builtin-regs.o", add "user-regs.o".
	(builtin-regs.o): Delete target.
	(user-regs.o): Specify dependencies.
	(expprint.o): Update dependencies.
	(findvar.o): Update dependencies.
	(frame.o): Update dependencies.
	(std-regs.o): Update dependencies.
@
text
@d1080 1
a1080 1
      value = value_being_returned (value_type, stop_registers, structure_return);
d1083 2
a1084 1
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", record_latest_value (value));
a1091 3
      /* We cannot determine the contents of the structure because
	 it is on the stack, and we don't know where, since we did not
	 initiate the call, as opposed to the call_function_by_hand case */
d1093 4
d1103 2
a1104 1
      value = value_being_returned (value_type, stop_registers, structure_return);
d1107 2
a1108 1
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", record_latest_value (value));
@


1.82
log
@gdb/
        * NEWS: Mention gdbserver detach change and "disconnect" command.
        * infcmd.c (disconnect_command): New function.
        (_initialize_infcmd): Add ``disconnect'' command.
        * remote.c (remote_async_detach): Delete.
        (remote_detach): Merge remote_async_detach.
        (remote_disconnect): New.
        (init_remote_ops): Set to_disconnect.
        (init_remote_cisco_ops): Likewise.
        (init_remote_async_ops): Likewise.  Use remote_detach.
        * target.c (cleanup_target): Default to_disconnect.
        (update_current_target): Inherit to_disconnect.
        (target_disconnect, debug_to_disconnect): New functions.
        (setup_target_debug): Set to_disconnect.
        * target.h (struct target_ops): Add to_disconnect.
        (target_disconnect): Add prototype.
gdbserver/
	* linux-low.c: Move comment to linux_thread_alive where it belonged.
	(linux_detach_one_process, linux_detach): New functions.
	(linux_target_ops): Add linux_detach.
	* server.c (main): Handle 'D' packet.
	* target.h (struct target_ops): Add "detach" member.
	(detach_inferior): Define.
mi/
        * mi-cmds.c (mi_cmds): Add "-target-disconnect".
@
text
@d1654 2
a1655 1
	int regnum = frame_map_name_to_regnum (start, end - start);
@


1.81
log
@2003-06-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERTIBLE): Deprecate
	REGISTER_CONVERTIBLE.
	(DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL): Same.
	(DEPRECATED_REGISTER_CONVERT_TO_RAW): Same, make "from" constant.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.h (deprecated_register_convertible_not): Rename
	generic_register_convertible_not.
	* arch-utils.c (deprecated_register_convertible_not): Rename
	generic_register_convertible.
	(legacy_convert_register_p, legacy_register_to_value): Update.
	* sh-tdep.c (sh64_push_arguments): Update.
	* m68klinux-tdep.c (m68k_linux_extract_return_value): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_EXTRACT_RETURN_VALUE): Update.
	* m68klinux-tdep.c (m68k_linux_store_return_value): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_STORE_RETURN_VALUE): Update.
	* arch-utils.c (legacy_value_to_register): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	(rs6000_register_convert_to_raw): Make parameter "from" const.
	* mips-tdep.c (mips_gdbarch_init): Update.
	(mips_register_convert_to_raw): Make  parameter"virt_buf" const.
	* infcmd.c (default_print_registers_info): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	(ia64_register_convert_to_raw): Make parameter "from" const.
	* i386-tdep.c (i386_gdbarch_init): Update.
	(i386_register_convert_to_raw): Update.
@
text
@d84 2
d1881 20
d2038 5
@


1.80
log
@2003-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Add comments on MAX_REGISTER_SIZE.
	* gdbarch.h: Re-generate.
	* defs.h (MAX_REGISTER_VIRTUAL_SIZE): Delete macro.
	(legacy_max_register_virtual_size): Delete declaration.
	* infcmd.c (default_print_registers_info): Use MAX_REGISTER_SIZE.
	* d10v-tdep.c (d10v_print_registers_info): Ditto.
	* tracepoint.c (memrange_sortmerge): Ditto.
	* sparc-tdep.c (sparc_print_registers): Ditto.
	* regcache.c (legacy_max_register_virtual_size): Delete function.
@
text
@d1554 1
a1554 1
      if (REGISTER_CONVERTIBLE (i))
d1556 1
a1556 1
	  REGISTER_CONVERT_TO_VIRTUAL (i, register_type (current_gdbarch, i),
@


1.80.8.1
log
@Snap const char * mess.
@
text
@d50 1
a50 1
void all_registers_info (const char *, int);
d52 1
a52 1
void registers_info (const char *, int);
d54 1
a54 1
void nexti_command (const char *, int);
d56 1
a56 1
void stepi_command (const char *, int);
d58 1
a58 1
void continue_command (const char *, int);
d60 1
a60 1
void interrupt_target_command (const char *args, int from_tty);
d64 1
a64 1
static void nofp_registers_info (const char *, int);
d72 1
a72 1
static void until_command (const char *, int);
d74 1
a74 1
static void path_info (const char *, int);
d76 1
a76 1
static void path_command (const char *, int);
d78 1
a78 1
static void unset_command (const char *, int);
d80 1
a80 1
static void float_info (const char *, int);
d82 1
a82 1
static void detach_command (const char *, int);
d84 1
a84 1
static void unset_environment_command (const char *, int);
d86 1
a86 1
static void set_environment_command (const char *, int);
d88 1
a88 1
static void environment_info (const char *, int);
d90 1
a90 1
static void program_info (const char *, int);
d92 1
a92 1
static void finish_command (const char *, int);
d94 1
a94 1
static void signal_command (const char *, int);
d96 1
a96 1
static void jump_command (const char *, int);
d98 1
a98 1
static void step_1 (int, int, const char *);
d102 1
a102 1
static void next_command (const char *, int);
d104 1
a104 1
static void step_command (const char *, int);
d106 1
a106 1
static void run_command (const char *, int);
d108 1
a108 1
static void run_no_args_command (const char *args, int from_tty);
d110 1
a110 1
static void go_command (const char *line_no, int from_tty);
d112 1
a112 1
static int strip_bg_char (const char **);
d245 1
a245 1
notice_args_set (const char *args, int from_tty, struct cmd_list_element *c)
d253 1
a253 1
notice_args_read (const char *args, int from_tty, struct cmd_list_element *c)
d346 1
a346 1
strip_bg_char (const char **args)
d373 1
a373 1
tty_command (const char *file, int from_tty)
d382 1
a382 1
run_command (const char *args, int from_tty)
d480 1
a480 1
run_no_args_command (const char *args, int from_tty)
d488 1
a488 1
continue_command (const char *proc_count_exp, int from_tty)
d546 1
a546 1
step_command (const char *count_string, int from_tty)
d555 1
a555 1
next_command (const char *count_string, int from_tty)
d564 1
a564 1
stepi_command (const char *count_string, int from_tty)
d571 1
a571 1
nexti_command (const char *count_string, int from_tty)
d583 1
a583 1
step_1 (int skip_subroutines, int single_inst, const char *count_string)
d637 1
a637 1
		  const char *name;
d758 1
a758 1
	      const char *name;
d805 1
a805 1
jump_command (const char *arg, int from_tty)
d893 1
a893 1
go_command (const char *line_no, int from_tty)
d908 1
a908 1
signal_command (const char *signum_exp, int from_tty)
d1007 1
a1007 1
until_command (const char *arg, int from_tty)
d1038 1
a1038 1
advance_command (const char *arg, int from_tty)
d1164 1
a1164 1
finish_command (const char *arg, int from_tty)
d1291 1
a1291 1
program_info (const char *args, int from_tty)
d1338 1
a1338 1
environment_info (const char *var, int from_tty)
d1369 1
a1369 1
set_environment_command (const char *arg, int from_tty)
d1371 1
a1371 3
  const char *p;
  const char *val;
  char *var;
d1431 1
a1431 1
unset_environment_command (const char *var, int from_tty)
d1453 1
a1453 1
path_info (const char *args, int from_tty)
d1463 1
a1463 1
path_command (const char *dirname, int from_tty)
d1606 1
a1606 1
registers_info (const char *addr_exp, int fpregs)
d1625 1
a1625 1
      const char *start;
d1709 1
a1709 1
all_registers_info (const char *addr_exp, int from_tty)
d1715 1
a1715 1
nofp_registers_info (const char *addr_exp, int from_tty)
d1750 1
a1750 1
vector_info (const char *args, int from_tty)
d1773 1
a1773 1
attach_command (const char *args, int from_tty)
d1868 1
a1868 1
detach_command (const char *args, int from_tty)
d1882 1
a1882 1
interrupt_target_command (const char *args, int from_tty)
d1923 1
a1923 1
float_info (const char *args, int from_tty)
d1930 1
a1930 1
unset_command (const char *args, int from_tty)
@


1.79
log
@2003-04-21  Andrew Cagney  <cagney@@redhat.com>

	* infcall.c: New file.
	* infcall.h: New file.
	* valarith.c: Include "infcall.h".
	* scm-lang.c, objc-lang.cm, hppa-tdep.c, gcore.c: Ditto.
	* eval.c, ada-valprint.c, ada-lang.c: Ditto.
	* Makefile.in (valarith.o, scm-lang.o): Update dependencies.
	(objc-lang.o, hppa-tdep.o, gcore.o): Update dependencies.
	(eval.o, ada-valprint.o, ada-lang.o): Update dependencies.
	(SFILES): Add "infcall.c"
	(COMMON_OBS): Add "infcall.o".
	(infcall.o): Specify dependencies.
	* value.h (call_function_by_hand): Delete declaration.
	* inferior.h (run_stack_dummy): Delete declaration.
	* infcmd.c (breakpoint_auto_delete_contents): Move to "infcall.c".
	(run_stack_dummy): Move to "infcall.c", merged into
	call_function_by_hand.
	* valops.c (call_function_by_hand): Moved to "infcall.c".
	(find_function_addr, value_arg_coerce): Ditto.
	(unwindonsignal_p, coerce_float_to_double): Ditto.
	(_initialize_valops): Move "set/show coerce-float-to-double", and
	"set/show unwindonsignal" commands to "infcall.c".
	* v850-tdep.c, target.h: Update comments.
	* sparc-tdep.c (sparc_fix_call_dummy): Update comments.
	* sh-tdep.c (sh_init_extra_frame_info): Update comments.
	(sh64_init_extra_frame_info): Update comments.
	* mn10300-tdep.c: Update comments.
	* mcore-tdep.c (mcore_init_extra_frame_info): Update comments.
	* config/sparc/tm-sparc.h: Update comments.
	* breakpoint.h: Update comments.
	* avr-tdep.c (avr_init_extra_frame_info): Update comments.
	* arm-tdep.c: Update comment.
@
text
@d1503 2
a1504 2
  char *raw_buffer = alloca (MAX_REGISTER_RAW_SIZE);
  char *virtual_buffer = alloca (MAX_REGISTER_VIRTUAL_SIZE);
@


1.78
log
@2003-04-08  Elena Zannoni  <ezannoni@@redhat.com>

        * infrun.c (stop_soon): Rename from stop_soon_quietly.
	(struct inferior_status): Rename stop_soon_quietly field to stop_soon.
	(clear_proceed_status): Rename stop_soon_quietly to stop_soon.
	(start_remote): Ditto.
	(handle_inferior_event): Ditto.
	(save_inferior_status): Ditto.
	(restore_inferior_status): Ditto.
	* infcmd.c (attach_command): Ditto.
	* fork-child.c (startup_inferior): Ditto.
        * inferior.h (stop_soon): Rename from stop_soon_quietly.
	* alpha-tdep.c (heuristic_proc_start): Ditto.
	* mips-tdep.c (heuristic_proc_start): Ditto.
	* solib-svr4.c (svr4_solib_create_inferior_hook): Ditto.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Ditto.
	* solib-osf.c (osf_solib_create_inferior_hook): Ditto.
	* solib-irix.c (irix_solib_create_inferior_hook): Ditto.
	* remote-vx.c (vx_create_inferior): Ditto.
@
text
@a117 2
static void breakpoint_auto_delete_contents (void *);

a950 106
/* Call breakpoint_auto_delete on the current contents of the bpstat
   pointed to by arg (which is really a bpstat *).  */

static void
breakpoint_auto_delete_contents (void *arg)
{
  breakpoint_auto_delete (*(bpstat *) arg);
}


/* Execute a "stack dummy", a piece of code stored in the stack
   by the debugger to be executed in the inferior.

   To call: first, do PUSH_DUMMY_FRAME.
   Then push the contents of the dummy.  It should end with a breakpoint insn.
   Then call here, passing address at which to start the dummy.

   The contents of all registers are saved before the dummy frame is popped
   and copied into the buffer BUFFER.

   The dummy's frame is automatically popped whenever that break is hit.
   If that is the first time the program stops, run_stack_dummy
   returns to its caller with that frame already gone and returns 0.
   
   Otherwise, run_stack-dummy returns a non-zero value.
   If the called function receives a random signal, we do not allow the user
   to continue executing it as this may not work.  The dummy frame is poped
   and we return 1.
   If we hit a breakpoint, we leave the frame in place and return 2 (the frame
   will eventually be popped when we do hit the dummy end breakpoint).  */

int
run_stack_dummy (CORE_ADDR addr, struct regcache *buffer)
{
  struct cleanup *old_cleanups = make_cleanup (null_cleanup, 0);
  int saved_async = 0;
  struct breakpoint *bpt;
  struct symtab_and_line sal;

  /* Now proceed, having reached the desired place.  */
  clear_proceed_status ();

  init_sal (&sal);		/* initialize to zeroes */
  if (CALL_DUMMY_LOCATION == AT_ENTRY_POINT)
    {
      sal.pc = CALL_DUMMY_ADDRESS ();
    }
  else
    {
      /* If defined, CALL_DUMMY_BREAKPOINT_OFFSET is where we need to
	 put a breakpoint instruction.  If not, the call dummy already
	 has the breakpoint instruction in it.

	 ADDR IS THE ADDRESS of the call dummy plus the
	 CALL_DUMMY_START_OFFSET, so we need to subtract the
	 CALL_DUMMY_START_OFFSET.  */
      sal.pc = addr - CALL_DUMMY_START_OFFSET + CALL_DUMMY_BREAKPOINT_OFFSET;
    }
  sal.section = find_pc_overlay (sal.pc);
  
  {
    /* Set up a frame ID for the dummy frame so we can pass it to
       set_momentary_breakpoint.  We need to give the breakpoint a
       frame ID so that the breakpoint code can correctly re-identify
       the dummy breakpoint.  */
    struct frame_id frame = frame_id_build (read_fp (), sal.pc);
    /* Create a momentary breakpoint at the return address of the
       inferior.  That way it breaks when it returns.  */
    bpt = set_momentary_breakpoint (sal, frame, bp_call_dummy);
    bpt->disposition = disp_del;
  }

  /* If all error()s out of proceed ended up calling normal_stop (and
     perhaps they should; it already does in the special case of error
     out of resume()), then we wouldn't need this.  */
  make_cleanup (breakpoint_auto_delete_contents, &stop_bpstat);

  disable_watchpoints_before_interactive_call_start ();
  proceed_to_finish = 1;	/* We want stop_registers, please... */

  if (target_can_async_p ())
    saved_async = target_async_mask (0);

  proceed (addr, TARGET_SIGNAL_0, 0);

  if (saved_async)
    target_async_mask (saved_async);

  enable_watchpoints_after_interactive_call_stop ();

  discard_cleanups (old_cleanups);

  /* We can stop during an inferior call because a signal is received. */
  if (stopped_by_random_signal)
    return 1;
    
  /* We may also stop prematurely because we hit a breakpoint in the
     called routine. */
  if (!stop_stack_dummy)
    return 2;

  /* On normal return, the stack dummy has been popped already.  */
  regcache_cpy_no_passthrough (buffer, stop_registers);
  return 0;
}

@


1.78.2.1
log
@Merge from mainline.
@
text
@d118 2
d953 106
@


1.78.2.2
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d1503 2
a1504 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
@


1.77
log
@2003-04-08  Elena Zannoni  <ezannoni@@redhat.com>

	* infrun.c (stop_soon_quietly): Make it an enum, to better
	override the default behavior of handle_inferior_event.
	(clear_proceed_status): Update uses of stop_soon_quietly to
	reflect that it is now an enum.
	(start_remote): Ditto.
	(handle_inferior_event): Change logic a bit if stop_soon_quietly
	is set to handle the new GNU/Linux kernel behavior for
	attach/sigstop.  Update uses of stop_soon_quietly.
	* inferior.h (enum stop_kind): New enum.
	* infcmd.c (attach_command): Use STOP_QUIETLY_NO_SIGSTOP.
	Reset normal handle_inferior_event behavior, afterwards.
	* fork-child.c (startup_inferior): Update.
	* alpha-tdep.c (heuristic_proc_start): Update.
	* solib-svr4.c (svr4_solib_create_inferior_hook): Update.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Update.
	* solib-osf.c (osf_solib_create_inferior_hook): Update.
	* solib-irix.c (irix_solib_create_inferior_hook): Update.
	* remote-vx.c (vx_create_inferior): Update.
	* mips-tdep.c (heuristic_proc_start): Update.
@
text
@d1917 1
a1917 1
  stop_soon_quietly = STOP_QUIETLY_NO_SIGSTOP;
d1919 1
a1919 1
  stop_soon_quietly = NO_STOP_QUIETLY;
@


1.76
log
@2003-04-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_BREAKPOINT_OFFSET): Default to zero.
	(CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/sparc/tm-sp64.h (CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	(CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	* config/pa/tm-hppa64.h (CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	* inferior.h (CALL_DUMMY_BREAKPOINT_OFFSET_P): Delete.
	(CALL_DUMMY_BREAKPOINT_OFFSET): Delete.
	* infcmd.c (run_stack_dummy): Simplify assuming
	CALL_DUMMY_BREAKPOINT_OFFSET_P.
	* infrun.c (handle_inferior_event): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Do not set
	call_dummy_breakpoint_offset or call_dummy_breakpoint_offset_p.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
@
text
@d1913 5
a1917 1
  stop_soon_quietly = 1;
d1919 1
@


1.76.2.1
log
@Merge with mainline.
@
text
@d1913 1
a1913 5
  /* Careful here. See comments in inferior.h.  Basically some OSes
     don't ignore SIGSTOPs on continue requests anymore.  We need a
     way for handle_inferior_event to reset the stop_signal variable
     after an attach, and this is what STOP_QUIETLY_NO_SIGSTOP is for.  */
  stop_soon = STOP_QUIETLY_NO_SIGSTOP;
a1914 1
  stop_soon = NO_STOP_QUIETLY;
@


1.75
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* Makefile.in (ax-gdb.o): Update dependencies.
	* ax-gdb.c: Include "regcache.h".
	(gen_expr): Use register_type instead of REGISTER_VIRTUAL_TYPE.
	* findvar.c (value_of_register): Ditto.
	* infcmd.c (default_print_registers_info): Ditto.

Index: mi/ChangeLog
2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (get_register): Use register_type instead of
	REGISTER_VIRTUAL_TYPE.
@
text
@d989 2
d995 2
a996 1
  if (CALL_DUMMY_BREAKPOINT_OFFSET_P)
d998 12
a1009 37
      struct breakpoint *bpt;
      struct symtab_and_line sal;

      init_sal (&sal);		/* initialize to zeroes */
      if (CALL_DUMMY_LOCATION == AT_ENTRY_POINT)
	{
	  sal.pc = CALL_DUMMY_ADDRESS ();
	}
      else
	{
	  /* If defined, CALL_DUMMY_BREAKPOINT_OFFSET is where we need
	     to put a breakpoint instruction.  If not, the call dummy
	     already has the breakpoint instruction in it.

	     ADDR IS THE ADDRESS of the call dummy plus the
	     CALL_DUMMY_START_OFFSET, so we need to subtract the
	     CALL_DUMMY_START_OFFSET.  */
	  sal.pc = addr - CALL_DUMMY_START_OFFSET + CALL_DUMMY_BREAKPOINT_OFFSET;
	}
      sal.section = find_pc_overlay (sal.pc);

      {
	/* Set up a frame ID for the dummy frame so we can pass it to
	   set_momentary_breakpoint.  We need to give the breakpoint a
	   frame ID so that the breakpoint code can correctly
	   re-identify the dummy breakpoint.  */
	struct frame_id frame = frame_id_build (read_fp (), sal.pc);
	/* Create a momentary breakpoint at the return address of the
           inferior.  That way it breaks when it returns.  */
	bpt = set_momentary_breakpoint (sal, frame, bp_call_dummy);
	bpt->disposition = disp_del;
      }

      /* If all error()s out of proceed ended up calling normal_stop (and
         perhaps they should; it already does in the special case of error
         out of resume()), then we wouldn't need this.  */
      make_cleanup (breakpoint_auto_delete_contents, &stop_bpstat);
d1011 18
@


1.74
log
@2003-02-20  David Carlton  <carlton@@math.stanford.edu>

	* symtab.h (SYMBOL_PRINT_NAME): Rename from SYMBOL_SOURCE_NAME;
	expand comment.
	* ada-lang.c (user_select_syms, ada_finish_decode_line_1): Replace
	SYMBOL_PRINT_NAME with SYMBOL_SOURCE_NAME.
	* ada-typeprint.c (ada_typedef_print): Ditto.
	* ax-gdb.c (gen_var_ref): Ditto.
	* breakpoint.c (print_one_breakpoint): Ditto.
	* buildsym.c (finish_block): Ditto.
	* c-valprint.c (c_val_print): Ditto.
	* expprint.c (print_subexp): Ditto.
	* findvar.c (locate_var_value): Ditto.
	* infcmd.c (jump_command): Ditto.
	* linespec.c (decode_line_2, decode_compound): Ditto.
	* maint.c (maintenance_translate_address): Ditto.
	* objc-lang.c (compare_selectors, compare_classes): Ditto.
	* printcmd.c (build_address_symbolic, sym_info, print_frame_args):
	Ditto.
	* p-valprint.c (pascal_val_print): Ditto.
	* stabsread.c (define_symbol): Ditto.
	* stack.c (print_frame, frame_info, print_block_frame_locals)
	(print_frame_arg_vars, return_command): Ditto.
	* symfile.c (compare_symbols, compare_psymbols): Ditto.
	* symmisc.c (print_symbol): Ditto.
	* symtab.c (lookup_partial_symbol, lookup_block_symbol)
	(compare_search_syms, print_symbol_info, print_msymbol_info)
	(rbreak_command): Ditto.
	* tracepoint.c (tracepoints_info): Ditto.
	* typeprint.c (typedef_print): Ditto.
	* valops.c (value_of_variable, hand_function_call): Ditto.
	* cli/cli-cmds.c (edit_command, list_command): Ditto.
	* ada-typeprint.c: Update Copyright.
	* infcmd.c, objc-lang.c, p-valprint.c, symmisc.c: Ditto.
	* tracepoint.c, cli/cli-cmds.c: Ditto.
@
text
@d1668 1
a1668 1
	  REGISTER_CONVERT_TO_VIRTUAL (i, REGISTER_VIRTUAL_TYPE (i),
d1679 1
a1679 1
      if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (i)) == TYPE_CODE_FLT)
d1683 1
a1683 1
	  val_print (REGISTER_VIRTUAL_TYPE (i), virtual_buffer, 0, 0,
d1701 1
a1701 1
	  val_print (REGISTER_VIRTUAL_TYPE (i), virtual_buffer, 0, 0,
d1705 1
a1705 1
	  if (TYPE_VECTOR (REGISTER_VIRTUAL_TYPE (i)) == 0)
d1708 1
a1708 1
	      val_print (REGISTER_VIRTUAL_TYPE (i), virtual_buffer, 0, 0,
@


1.73
log
@2003-02-19  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (SFILES): Add block.c.
	(block_h): New.
	(COMMON_OBS): Add block.o.
	(block.o): New.
	(x86-64-tdep.o): Add $(block_h).
	(values.o, valops.o, tracepoint.o, symtab.o, symmisc.o, symfile.o)
	(stack.o, printcmd.o, p-exp.tab.o, parse.o, objfiles.o)
	(objc-exp.tab.o, objc-lang.o, nlmread.o, mips-tdep.o, mdebugread.o)
	(m2-exp.tab.o, linespec.o, jv-lang.o, jv-exp.tab.o, infcmd.o)
	(f-valprint.o, findvar.o, f-exp.tab.o, expprint.o, coffread.o)
	(c-exp.tab.o, buildsym.o, breakpoint.o, blockframe.o, ax-gdb.o)
	(alpha-tdep.o, ada-lang.o, ada-exp.tab.o, mi-cmd-stack.o): Ditto.
	* value.h: Add opaque declaration for struct block.
	* parser-defs.h, objc-lang.h, buildsym.h, breakpoint.h: Ditto.
	* ada-lang.h: Ditto.
	* x86-64-tdep.c: #include "block.h"
	* values.c, valops.c, tracepoint.c, symtab.c, symmisc.c: Ditto.
	* symfile.c, stack.c, printcmd.c, p-exp.y, parse.c: Ditto.
	* objfiles.c, objc-exp.y, objc-lang.c, nlmread.c: Ditto.
	* mips-tdep.c, mdebugread.c, m2-exp.y, linespec.c: Ditto.
	* jv-lang.c, jv-exp.y, infcmd.c, f-valprint.c: Ditto.
	* findvar.c, f-exp.y, expprint.c, coffread.c, c-exp.y: Ditto.
	* buildsym.c, breakpoint.c, blockframe.c, ax-gdb.c: Ditto.
	* alpha-tdep.c, ada-lang.c, ada-exp.y: Ditto.
	* blockframe.c (blockvector_for_pc_sect): Move to "block.c".
	(blockvector_for_pc, block_for_pc_sect, block_for_pc): Ditto.
	* symtab.c (block_function): Ditto.
	(contained_in): Ditto.
	* frame.h: Move block_for_pc and block_for_pc_sect declarations to
	block.h.  Add opaque declaration for struct block.
	* symtab.h: Move block_function and contained_in declarations to
	block.h.  Add opaque declarations for struct block, struct
	blockvector.
	(struct block): Move to block.h.
	(struct blockvector): Ditto.
	(BLOCK_START, BLOCK_END, BLOCK_FUNCTION, BLOCK_SUPERBLOCK)
	(BLOCK_GCC_COMPILED, BLOCK_HASHTABLE, BLOCK_NSYMS, BLOCK_SYM)
	(BLOCK_BUCKETS, BLOCK_BUCKET, BLOCK_HASHTABLE_SIZE)
	(ALL_BLOCK_SYMBOLS, BLOCK_SHOULD_SORT, BLOCKVECTOR_NBLOCKS)
	(BLOCKVECTOR_BLOCK, GLOBAL_BLOCK, STATIC_BLOCK, FIRST_LOCAL_BLOCK):
	Ditto.
	* block.c: New file.
	* block.h: New file.

2003-02-19  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c: #include "block.h"
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002
d858 1
a858 1
		  SYMBOL_SOURCE_NAME (fn)))
@


1.72
log
@2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* infcmd.c (print_float_info): Delete code conditional on
	FLOAT_INFO.
	* config/nm-lynx.h: Delete #undef FLOAT_INFO.  Update copyright.
	* config/m68k/nm-apollo68b.h: Ditto.
	* config/i386/tm-ptx.h (FLOAT_INFO): Delete.  Update copyright.
	* config/ns32k/nm-nbsd.h (FLOAT_INFO): Ditto.
	* config/i386/tm-symmetry.h (FLOAT_INFO): Ditto.

Index: doc/ChangeLog
2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	FLOAT_INFO.
@
text
@d45 1
@


1.71
log
@2003-01-18  Andrew Cagney  <ac131313@@redhat.com>

	* ada-valprint.c: Eliminate PTR.
	* breakpoint.c, corelow.c, cris-tdep.c, dbxread.c: Ditto.
	* defs.h, dve3900-rom.c, dwarf2read.c, dwarfread.c: Ditto.
	* exec.c, hppa-tdep.c, hpread.c, infcmd.c, mdebugread.c: Ditto.
	* objfiles.c, objfiles.h, ocd.c, remote-es.c: Ditto.
	* remote-mips.c, remote-sds.c, remote-vx.c: Ditto.
	* solib-svr4.c, solib.c, stack.c, symfile.c, symfile.h: Ditto.
	* symmisc.c, v850ice.c, xcoffread.c, cli/cli-script.c: Ditto.
@
text
@a2010 6
#ifdef FLOAT_INFO
#if GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL
#error "FLOAT_INFO defined in multi-arch"
#endif
      FLOAT_INFO;
#else
a2024 1
#endif
@


1.70
log
@2003-01-14  Elena Zannoni  <ezannoni@@redhat.com>

	* breakpoint.c (until_break_command): Add new argument.  Use it to
	decide whether to stop only at the current frame or not.
	* breakpoint.h (until_break_command): Update prototype.
 	* infcmd.c (until_command): Add new argument to until_break_command
	call.
	(advance_command): New function.
	(_initialize_infcmd): Update help string for 'until' command.
	Add new 'advance' command.
@
text
@d117 1
a117 1
static void breakpoint_auto_delete_contents (PTR);
d956 1
a956 1
breakpoint_auto_delete_contents (PTR arg)
@


1.69
log
@2002-12-13  Andrew Cagney  <ac131313@@redhat.com>

	* infcmd.c (run_stack_dummy): Create a frame ID directly and then
	pass that to set_momentary_breakpoint.  Move comments to where they
	belong.
	* frame.h (set_current_frame): Delete declaration.
	* frame.c (set_current_frame): Delete function.
@
text
@d1143 1
a1143 1
    until_break_command (arg, from_tty);
d1147 31
d2164 6
a2169 1
or a specified line or address or function (same args as break command).\n\
a2171 1
  add_com_alias ("u", "until", class_run, 1);
@


1.68
log
@2002-12-06  Andrew Cagney  <ac131313@@redhat.com>

	* breakpoint.h (struct breakpoint): Replace frame with frame_id.
	(set_momentary_breaokpoint): Replace `struct frame_info' parameter
	with `struct frame_id'.
	(set_longjmp_resume_breakpoint): Ditto.
	* infrun.c (handle_inferior_event): Update.
	* breakpoint.c (watch_command_1, until_break_command): Update.
	* infrun.c (handle_inferior_event, check_sigtramp2): Update.
	(handle_inferior_event, step_over_function): Update.
	* breakpoint.c (bpstat_stop_status, print_one_breakpoint): Update.
	(set_raw_breakpoint, set_longjmp_resume_breakpoint): Update.
	(set_momentary_breakpoint, deprecated_frame_in_dummy): Update.
	* infcmd.c (finish_command, run_stack_dummy): Update.
@
text
@d1004 7
d1015 11
a1025 20
      /* Set up a FRAME for the dummy frame so we can pass it to
         set_momentary_breakpoint.  We need to give the breakpoint a
         frame in case there is only one copy of the dummy (e.g.
         CALL_DUMMY_LOCATION == AFTER_TEXT_END).  */
      flush_cached_frames ();
      set_current_frame (create_new_frame (read_fp (), sal.pc));

      /* If defined, CALL_DUMMY_BREAKPOINT_OFFSET is where we need to put
         a breakpoint instruction.  If not, the call dummy already has the
         breakpoint instruction in it.

         addr is the address of the call dummy plus the CALL_DUMMY_START_OFFSET,
         so we need to subtract the CALL_DUMMY_START_OFFSET.  */
      /* FIXME: cagney/2002-12-01: Rather than pass in curent frame,
         why not just create, and then pass in a frame ID.  This would
         make it possible to eliminate set_current_frame().  */
      bpt = set_momentary_breakpoint (sal,
				      get_frame_id (get_current_frame ()),
				      bp_call_dummy);
      bpt->disposition = disp_del;
@


1.67
log
@2002-12-07  Andrew Cagney  <ac131313@@redhat.com>

	* f-valprint.c (info_common_command): Use get_frame_pc.
	* std-regs.c (value_of_builtin_frame_pc_reg): Ditto.
	* ax-gdb.c (agent_command): Ditto.
	* rs6000-tdep.c (rs6000_init_extra_frame_info): Ditto.
	(rs6000_pop_frame): Ditto.
	(rs6000_frameless_function_invocation): Ditto.
	(rs6000_frame_saved_pc, frame_get_saved_regs): Ditto.
	(frame_initial_stack_address, rs6000_frame_chain): Ditto.
	* macroscope.c (default_macro_scope): Ditto.
	* stack.c (print_frame_info_base): Ditto.
	(print_frame, frame_info, print_frame_label_vars): Ditto.
	(return_command, func_command, get_frame_language): Ditto.
	* infcmd.c (finish_command): Ditto.
	* dummy-frame.c (cached_find_dummy_frame): Ditto.
	* breakpoint.c (deprecated_frame_in_dummy): Ditto.
	(break_at_finish_at_depth_command_1): Ditto.
	(break_at_finish_command_1): Ditto.
	(until_break_command, get_catch_sals): Ditto.
	* blockframe.c (func_frame_chain_valid): Ditto.
	(frameless_look_for_prologue): Ditto.
	(frame_address_in_block, generic_func_frame_chain_valid): Ditto.
@
text
@d1021 3
d1025 1
a1025 1
				      get_current_frame (),
d1290 1
a1290 1
  breakpoint = set_momentary_breakpoint (sal, frame, bp_finish);
@


1.66
log
@2002-12-05  Andrew Cagney  <ac131313@@redhat.com>

	* gdbthread.h: Include "frame.h".
	(struct thread_info): Replace step_frame_address with
	step_frame_id.
	* inferior.h: Include "frame.h".
	(step_frame_id): Replace external variable step_frame_address.
	* gdbthread.h (save_infrun_state): Replace step_frame_address
	parameter with step_frame_id parameter.
	(load_infrun_state): Ditto.
	* Makefile.in (gdbthread_h, inferior_h): Add $(frame_h).
	* infcmd.c (step_frame_id, step_1, step_once): Update.
	* thread.c (load_infrun_state, save_infrun_state): Update.
	* infrun.c (clear_proceed_status, save_inferior_status): Update.
	(handle_inferior_event, step_over_function): Update.
	(normal_stop, context_switch, restore_inferior_status): Update.
	(struct inferior_status): Replace step_frame_address with
	step_frame_id.
@
text
@d1284 2
a1285 2
  sal = find_pc_line (frame->pc, 0);
  sal.pc = frame->pc;
d1296 1
a1296 1
  function = find_pc_function (deprecated_selected_frame->pc);
@


1.65
log
@	* infcmd.c (construct_inferior_arguments): Handle empty arguments.
@
text
@d185 1
a185 1
CORE_ADDR step_frame_address;
d630 1
a630 1
	  step_frame_address = get_frame_base (frame);
d745 1
a745 1
      step_frame_address = get_frame_base (frame);
d1108 1
a1108 1
  step_frame_address = get_frame_base (frame);
@


1.64
log
@2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* stack.c (selected_frame, select_frame): Move from here ...
	* frame.c (selected_frame, select_frame): ... to here.  Include
	"language.h".
	* Makefile.in (frame.o): Update dependencies.
	* frame.c (get_selected_frame): New function.
	* frame.h (get_selected_frame): Declare.
	(deprecated_selected_frame): Rename selected_frame.
	* ada-lang.c, ada-tasks.c, breakpoint.c, corelow.c: Update.
	* eval.c, f-valprint.c, findvar.c, frame.c, frame.h: Update.
	* h8300-tdep.c, h8500-tdep.c, hppa-tdep.c, infcmd.c: Update.
	* inflow.c, infrun.c, macroscope.c, mips-tdep.c: Update.
	* mn10300-tdep.c, ocd.c, regcache.h, remote-e7000.c: Update.
	* remote-mips.c, remote-rdp.c, sh-tdep.c, sparc-tdep.c: Update.
	* stack.c, thread.c, tracepoint.c, valops.c, varobj.c: Update.
	* z8k-tdep.c, cli/cli-cmds.c: Update.

Index: mi/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* mi/mi-cmd-stack.c, mi/mi-main.c: Update to use
	deprecated_selected_frame.

Index: tui/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* tui/tui-hooks.c: Update to use deprecated_selected_frame.
	* tui/tui.c, tui/tuiDisassem.c, tui/tuiRegs.c: Ditto.
	* tui/tuiSource.c, tui/tuiSourceWin.c, tui/tuiWin.c: Ditto.
@
text
@d281 1
a281 1
	length += 2 * strlen (argv[i]) + 1;
d291 2
a292 1
	  for (cp = argv[i]; *cp; ++cp)
d294 11
a304 3
	      if (strchr (special, *cp) != NULL)
		*out++ = '\\';
	      *out++ = *cp;
@


1.63
log
@2002-11-19  Andrew Cagney  <ac131313@@redhat.com>

	* frame.h (FRAME_FP): Delete macro.
	(get_frame_base): New function declaration.
	* frame.c (get_frame_base): New function.
	(get_frame_id): Use ->frame.
	(frame_find_by_id): Rewrite to use get_frame_id.
	* blockframe.c: Use get_frame_base instead of FRAME_FP.
	* cris-tdep.c, d10v-tdep.c, findvar.c, h8500-tdep.c: Ditto.
	* hppa-tdep.c, i386-tdep.c, infcmd.c, infrun.c: Ditto.
	* m68hc11-tdep.c, m68k-tdep.c, mcore-tdep.c, mips-tdep.c: Ditto.
	* mn10200-tdep.c, mn10300-tdep.c, rs6000-tdep.c: Ditto.
	* sh-tdep.c, sparc-tdep.c, stack.c, tracepoint.c: Ditto.
	* v850-tdep.c, valops.c, z8k-tdep.c: Ditto.
@
text
@d1266 1
a1266 1
  if (selected_frame == NULL)
d1269 1
a1269 1
  frame = get_prev_frame (selected_frame);
d1287 1
a1287 1
  function = find_pc_function (selected_frame->pc);
d1294 2
a1295 2
      print_stack_frame (selected_frame,
			 frame_relative_level (selected_frame), 0);
d1683 1
a1683 1
  if (selected_frame == NULL)
d1689 1
a1689 1
				    selected_frame, -1, fpregs);
d1726 1
a1726 1
					  selected_frame, regnum, fpregs);
d1740 1
a1740 1
					  selected_frame, regnum, fpregs);
d1766 1
a1766 1
						gdb_stdout, selected_frame,
d1796 1
a1796 1
  if (selected_frame == NULL)
d1822 1
a1822 1
  print_vector_info (current_gdbarch, gdb_stdout, selected_frame, args);
d1963 1
a1963 1
  if (selected_frame == NULL)
d1997 1
a1997 1
  print_float_info (current_gdbarch, gdb_stdout, selected_frame, args);
@


1.62
log
@* infcmd.c (print_vector_info, print_float_info): Move code that
checks whether the target has any registers and whether there is a
selected frame up, such that it is also used if a target provides
multi-arch definitions of these functions.
@
text
@d621 1
a621 1
	  step_frame_address = FRAME_FP (frame);
d736 1
a736 1
      step_frame_address = FRAME_FP (frame);
d1099 1
a1099 1
  step_frame_address = FRAME_FP (frame);
@


1.61
log
@2002-11-06  Andrew Cagney  <ac131313@@redhat.com>

	* infcmd.c: Include "reggroups.h" and <ctype.h>.
	(print_float_info): Print registers in float_reggroup.
	(print_vector_info): Print registers in vector_reggroup.
	(default_print_registers_info): When all, print registers in
	all_reggroup.  Otherwize, print registers in general_reggroup.
	(registers_info): Rewrite.  Add support for register groups.
	Eliminate a goto.
@
text
@d1794 5
a1805 5
      if (!target_has_registers)
	error ("The program has no registers now.");
      if (selected_frame == NULL)
	error ("No selected frame.");

d1961 5
a1977 5

      if (!target_has_registers)
	error ("The program has no registers now.");
      if (selected_frame == NULL)
	error ("No selected frame.");
@


1.60
log
@2002-11-05  Andrew Cagney  <ac131313@@redhat.com>

       * infcmd.c (default_print_registers_info): Do not call
       PRINT_REGISTER_HOOK.
@
text
@d44 2
d1588 1
a1588 1
	  if (!print_all)
d1590 1
a1590 1
	      if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (i)) == TYPE_CODE_FLT)
d1592 4
a1595 1
	      if (TYPE_VECTOR (REGISTER_VIRTUAL_TYPE (i)))
d1693 1
a1693 1
  do
d1695 12
d1709 7
d1717 2
a1718 14
      while (*end != '\0' && *end != ' ' && *end != '\t')
	++end;
      numregs = NUM_REGS + NUM_PSEUDO_REGS;

      regnum = frame_map_name_to_regnum (addr_exp, end - addr_exp);
      if (regnum >= 0)
	goto found;

      regnum = numregs;

      if (*addr_exp >= '0' && *addr_exp <= '9')
	regnum = atoi (addr_exp);	/* Take a number */
      if (regnum >= numregs)	/* Bad name, or bad number */
	error ("%.*s: invalid register", (int) (end - addr_exp), addr_exp);
d1720 52
a1771 3
    found:
      gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
				    selected_frame, regnum, fpregs);
d1773 2
a1774 3
      addr_exp = end;
      while (*addr_exp == ' ' || *addr_exp == '\t')
	++addr_exp;
a1775 1
  while (*addr_exp != '\0');
d1808 1
a1808 1
	  if (TYPE_VECTOR (REGISTER_VIRTUAL_TYPE (regnum)))
d1981 1
a1981 1
	  if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (regnum)) == TYPE_CODE_FLT)
@


1.59
log
@2002-10-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	definition of DO_REGISTERS_INFO.

2002-10-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_DO_REGISTERS_INFO): Rename
	DO_REGISTERS_INFO.
	gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (default_print_registers_info): Update reference.
	* mips-tdep.c (mips_gdbarch_init): Set deprecated_do_registers_info.
	(mips_dump_tdep): Do not print DO_REGISTERS_INFO.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
@
text
@a1665 6
      /* The SPARC wants to print even-numbered float regs as doubles
         in addition to printing them as floats.  */
#ifdef PRINT_REGISTER_HOOK
      PRINT_REGISTER_HOOK (i);
#endif

@


1.58
log
@2002-10-24  Elena Zannoni  <ezannoni@@redhat.com>

	* symtab.h (INIT_SAL): Delete macro.
	(init_sal): Export.
	* symtab.c (init_sal): New function.

	* ada-lang.c (ada_finish_decode_line_1): Change INIT_SAL macro
	to init_sal function call.
	(find_sal_from_funcs_and_line): Ditto.
	(all_sals_for_line): Ditto.
	* breakpoint.c (create_internal_breakpoint): Ditto.
	(create_fork_vfork_event_catchpoint): Ditto.
	(create_exec_event_catchpoint): Ditto.
	(parse_breakpoint_sals): Ditto.
	(watch_command_1): Ditto.
	(handle_gnu_4_16_catch_command): Ditto.
	(clear_command): Ditto.
	* hppa-tdep.c (child_enable_exception_callback): Ditto.
	* infcmd.c (run_stack_dummy): Ditto.
	* infrun.c (process_event_stop_test): Ditto.
	(check_sigtramp2): Ditto.
	(step_over_function): Ditto.
	* linespec.c (decode_line_2): Ditto.
	(decode_line_1): Ditto.
	* source.c (line_info): Ditto.
	* symtab.c (find_pc_sect_line): Ditto.
@
text
@d1574 1
a1574 2
  /* FIXME: cagney/2002-03-08: This should be deprecated.  */
  if (DO_REGISTERS_INFO_P ())
d1576 1
a1576 1
      DO_REGISTERS_INFO (regnum, print_all);
@


1.57
log
@2002-10-02  Elena Zannoni  <ezannoni@@redhat.com>

	* infcmd.c (interrupt_target_command_wrapper): Delete.
	(interrupt_target_command): Make non static.
	(nofp_registers_info): Make static.
	* stack.c (return_command_wrapper): Delete.
	(return_command): Make non static.
@
text
@d986 1
a986 1
      INIT_SAL (&sal);		/* initialize to zeroes */
@


1.57.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@d986 1
a986 1
      init_sal (&sal);		/* initialize to zeroes */
@


1.57.2.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
a43 4
#include "reggroups.h"
#include "block.h"
#include <ctype.h>
#include "gdb_assert.h"
a80 2
static void disconnect_command (char *, int);

d115 2
d183 1
a183 1
struct frame_id step_frame_id;
d261 1
d279 1
a279 1
	length += 2 * strlen (argv[i]) + 1 + 2 * (argv[i][0] == '\0');
d289 1
a289 7
	  /* Need to handle empty arguments specially.  */
	  if (argv[i][0] == '\0')
	    {
	      *out++ = '\'';
	      *out++ = '\'';
	    }
	  else
d291 3
a293 6
	      for (cp = argv[i]; *cp; ++cp)
		{
		  if (strchr (special, *cp) != NULL)
		    *out++ = '\\';
		  *out++ = *cp;
		}
d361 1
d534 1
d543 1
d552 1
d559 1
d575 1
a575 1
  int count = 1;
d619 1
a619 1
	  step_frame_id = get_frame_id (frame);
d734 1
a734 1
      step_frame_id = get_frame_id (frame);
d797 1
a797 1
  CORE_ADDR addr;
d846 1
a846 1
		  SYMBOL_PRINT_NAME (fn)))
d941 109
d1058 1
d1097 1
a1097 1
  step_frame_id = get_frame_id (frame);
d1131 1
a1131 1
    until_break_command (arg, from_tty, 0);
a1134 31

static void
advance_command (char *arg, int from_tty)
{
  int async_exec = 0;

  if (!target_has_execution)
    error ("The program is not running.");

  if (arg == NULL)
    error_no_arg ("a location");

  /* Find out whether we must run in the background.  */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (event_loop_p && async_exec && !target_can_async_p ())
    error ("Asynchronous execution not supported on this target.");

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (event_loop_p && !async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  until_break_command (arg, from_tty, 1);
}
d1146 1
a1146 1
      value = register_value_being_returned (value_type, stop_registers);
d1155 1
a1155 11
  /* FIXME: 2003-09-27: When returning from a nested inferior function
     call, it's possible (with no help from the architecture vector)
     to locate and return/print a "struct return" value.  This is just
     a more complicated case of what is already being done in in the
     inferior function call code.  In fact, when inferior function
     calls are made async, this will likely be made the norm.  */
  else if (gdbarch_return_value_p (current_gdbarch))
    /* We cannot determine the contents of the structure because it is
       on the stack, and we don't know where, since we did not
       initiate the call, as opposed to the call_function_by_hand
       case.  */
d1157 5
a1161 2
      gdb_assert (gdbarch_return_value (current_gdbarch, value_type, NULL, NULL, NULL)
		  == RETURN_VALUE_STRUCT_CONVENTION);
d1166 2
a1167 32
      return;
    }
  else
    {
      if (EXTRACT_STRUCT_VALUE_ADDRESS_P ())
	{
	  CORE_ADDR addr = EXTRACT_STRUCT_VALUE_ADDRESS (stop_registers);
	  if (!addr)
	    error ("Function return value unknown.");
	  value = value_at (value_type, addr, NULL);
	}
      else if (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
	{
	  char *buf = deprecated_grub_regcache_for_registers (stop_registers);
	  CORE_ADDR addr = DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (buf);
	  if (!addr)
	    error ("Function return value unknown.");
	  value = value_at (value_type, addr, NULL);
	}
      else
	{
	  /* It is "struct return" yet the value is being extracted,
             presumably from registers, using EXTRACT_RETURN_VALUE.
             This doesn't make sense.  Unfortunately, the legacy
             interfaces allowed this behavior.  Sigh!  */
	  value = allocate_value (value_type);
	  CHECK_TYPEDEF (value_type);
	  /* If the function returns void, don't bother fetching the
	     return value.  */
	  EXTRACT_RETURN_VALUE (value_type, stop_registers,
				VALUE_CONTENTS_RAW (value));
	}
d1175 1
d1190 1
a1190 1
  struct symbol *function;
d1218 3
a1220 1
      struct_return = using_struct_return (check_typedef (value_type),
d1235 2
a1236 2
  struct frame_info *frame;
  struct symbol *function;
d1264 1
a1264 1
  if (deprecated_selected_frame == NULL)
d1267 1
a1267 1
  frame = get_prev_frame (deprecated_selected_frame);
d1273 2
a1274 2
  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);
d1276 1
a1276 1
  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);
d1285 1
a1285 1
  function = find_pc_function (get_frame_pc (deprecated_selected_frame));
d1292 2
a1293 2
      print_stack_frame (deprecated_selected_frame,
			 frame_relative_level (deprecated_selected_frame), 0);
d1346 3
a1348 1
	    using_struct_return (check_typedef (value_type),
d1357 1
d1410 1
a1410 1
      char *val = get_in_environ (inferior_environ, var);
d1427 1
a1427 1
      char **vector = environ_vector (inferior_environ);
d1439 1
a1439 1
  char *p, *val, *var;
d1519 1
d1549 3
d1571 2
a1572 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
d1574 2
a1575 1
  if (DEPRECATED_DO_REGISTERS_INFO_P ())
d1577 1
a1577 1
      DEPRECATED_DO_REGISTERS_INFO (regnum, print_all);
d1587 1
a1587 1
	  if (print_all)
d1589 1
a1589 1
	      if (!gdbarch_register_reggroup_p (gdbarch, i, all_reggroup))
d1591 1
a1591 4
	    }
	  else
	    {
	      if (!gdbarch_register_reggroup_p (gdbarch, i, general_reggroup))
d1620 1
a1620 1
      if (DEPRECATED_REGISTER_CONVERTIBLE (i))
d1622 1
a1622 1
	  DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (i, register_type (current_gdbarch, i),
d1628 1
a1628 1
		  DEPRECATED_REGISTER_VIRTUAL_SIZE (i));
d1633 1
a1633 1
      if (TYPE_CODE (register_type (current_gdbarch, i)) == TYPE_CODE_FLT)
d1637 1
a1637 1
	  val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
d1641 1
a1641 1
	  for (j = 0; j < DEPRECATED_REGISTER_RAW_SIZE (i); j++)
d1647 1
a1647 1
		idx = DEPRECATED_REGISTER_RAW_SIZE (i) - 1 - j;
d1655 1
a1655 1
	  val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
d1659 1
a1659 1
	  if (TYPE_VECTOR (register_type (current_gdbarch, i)) == 0)
d1662 1
a1662 1
	      val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
d1667 6
d1681 1
a1681 1
  char *end;
d1685 1
a1685 1
  if (deprecated_selected_frame == NULL)
d1691 1
a1691 1
				    deprecated_selected_frame, -1, fpregs);
d1695 1
a1695 1
  while (*addr_exp != '\0')
a1696 12
      char *start;
      const char *end;

      /* Keep skipping leading white space.  */
      if (isspace ((*addr_exp)))
	{
	  addr_exp++;
	  continue;
	}

      /* Discard any leading ``$''.  Check that there is something
         resembling a register following it.  */
a1698 7
      if (isspace ((*addr_exp)) || (*addr_exp) == '\0')
	error ("Missing register name");

      /* Find the start/end of this register name/num/group.  */
      start = addr_exp;
      while ((*addr_exp) != '\0' && !isspace ((*addr_exp)))
	addr_exp++;
d1700 14
a1713 2
      
      /* Figure out what we've found and display it.  */
d1715 3
a1717 25
      /* A register name?  */
      {
	int regnum = frame_map_name_to_regnum (deprecated_selected_frame,
					       start, end - start);
	if (regnum >= 0)
	  {
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
					  deprecated_selected_frame, regnum, fpregs);
	    continue;
	  }
      }
	
      /* A register number?  (how portable is this one?).  */
      {
	char *endptr;
	int regnum = strtol (start, &endptr, 0);
	if (endptr == end
	    && regnum >= 0
	    && regnum < NUM_REGS + NUM_PSEUDO_REGS)
	  {
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
					  deprecated_selected_frame, regnum, fpregs);
	    continue;
	  }
      }
d1719 3
a1721 30
      /* A register group?  */
      {
	struct reggroup *group;
	for (group = reggroup_next (current_gdbarch, NULL);
	     group != NULL;
	     group = reggroup_next (current_gdbarch, group))
	  {
	    /* Don't bother with a length check.  Should the user
	       enter a short register group name, go with the first
	       group that matches.  */
	    if (strncmp (start, reggroup_name (group), end - start) == 0)
	      break;
	  }
	if (group != NULL)
	  {
	    int regnum;
	    for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
	      {
		if (gdbarch_register_reggroup_p (current_gdbarch, regnum,
						 group))
		  gdbarch_print_registers_info (current_gdbarch,
						gdb_stdout, deprecated_selected_frame,
						regnum, fpregs);
	      }
	    continue;
	  }
      }

      /* Nothing matched.  */
      error ("Invalid register `%.*s'", (int) (end - start), start);
d1723 1
a1741 5
  if (!target_has_registers)
    error ("The program has no registers now.");
  if (deprecated_selected_frame == NULL)
    error ("No selected frame.");

d1749 5
d1756 1
a1756 1
	  if (gdbarch_register_reggroup_p (gdbarch, regnum, vector_reggroup))
d1770 1
a1770 1
  print_vector_info (current_gdbarch, gdb_stdout, deprecated_selected_frame, args);
d1823 1
a1823 5
  /* Careful here. See comments in inferior.h.  Basically some OSes
     don't ignore SIGSTOPs on continue requests anymore.  We need a
     way for handle_inferior_event to reset the stop_signal variable
     after an attach, and this is what STOP_QUIETLY_NO_SIGSTOP is for.  */
  stop_soon = STOP_QUIETLY_NO_SIGSTOP;
a1824 1
  stop_soon = NO_STOP_QUIETLY;
a1891 20
/* Disconnect from the current target without resuming it (leaving it
   waiting for a debugger).

   We'd better not have left any breakpoints in the program or the
   next debugger will get confused.  Currently only supported for some
   remote targets, since the normal attach mechanisms don't work on
   stopped processes on some native platforms (e.g. GNU/Linux).  */

static void
disconnect_command (char *args, int from_tty)
{
  dont_repeat ();		/* Not for the faint of heart */
  target_disconnect (args, from_tty);
#if defined(SOLIB_RESTART)
  SOLIB_RESTART ();
#endif
  if (detach_hook)
    detach_hook ();
}

d1904 1
a1908 5
  if (!target_has_registers)
    error ("The program has no registers now.");
  if (deprecated_selected_frame == NULL)
    error ("No selected frame.");

d1913 6
d1922 5
d1929 1
a1929 1
	  if (gdbarch_register_reggroup_p (gdbarch, regnum, float_reggroup))
d1938 1
d1945 1
a1945 1
  print_float_info (current_gdbarch, gdb_stdout, deprecated_selected_frame, args);
d1948 1
a2036 5
  add_com ("disconnect", class_run, disconnect_command,
	   "Disconnect from a target.\n\
The target will wait for another debugger to connect.  Not available for\n\
all targets.");

d2071 2
a2072 1
or a specified location (same args as break command) within the current frame.");
a2074 5

  c = add_com ("advance", class_run, advance_command,
	       "Continue the program up to the given location (same form as args for break command).\n\
Execution will also stop upon exit from the current stack frame.");
  set_cmd_completer (c, location_completer);
@


1.57.2.3
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
d664 7
d705 9
a713 1
    step_once (skip_subroutines, single_inst, count - 1);
d1065 1
a1065 2
/* Print the result of a function at the end of a 'finish' command.  */

d1067 1
a1067 1
print_return_value (int struct_return, struct type *value_type)
a1068 2
  struct cleanup *old_chain;
  struct ui_stream *stb;
d1070 1
d1072 1
a1072 1
  if (!struct_return)
a1073 1
      /* The return value can be found in the inferior's registers.  */
d1075 7
a1082 3
  /* FIXME: cagney/2004-01-17: When both return_value and
     extract_returned_value_address are available, should use that to
     find the address of and then extract the returned value.  */
d1095 1
a1095 2
      gdb_assert (gdbarch_return_value (current_gdbarch, value_type,
					NULL, NULL, NULL)
d1105 1
a1105 1
      if (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
d1107 9
a1115 1
	  CORE_ADDR addr = DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (stop_registers);
d1133 7
a1140 12

  /* Print it.  */
  stb = ui_out_stream_new (uiout);
  old_chain = make_cleanup_ui_out_stream_delete (stb);
  ui_out_text (uiout, "Value returned is ");
  ui_out_field_fmt (uiout, "gdb-result-var", "$%d",
		    record_latest_value (value));
  ui_out_text (uiout, " = ");
  value_print (value, stb->stream, 0, Val_no_prettyprint);
  ui_out_field_stream (uiout, "return-value", stb);
  ui_out_text (uiout, "\n");
  do_cleanups (old_chain);
d1144 8
a1151 9
   has stopped.  In asynchronous mode, we wait for the target to stop
   in the call to poll or select in the event loop, so it is
   impossible to do all the stuff as part of the finish_command
   function itself.  The only chance we have to complete this command
   is in fetch_inferior_event, which is called by the event loop as
   soon as it detects that the target has stopped. This function is
   called via the cmd_continuation pointer.  */

static void
d1159 2
a1160 2
  function = (struct symbol *) arg->next->data.pointer;
  cleanups = (struct cleanup *) arg->next->next->data.pointer;
d1163 1
a1163 1
      && function != NULL)
d1166 1
a1167 1
      int gcc_compiled;
d1180 4
a1183 3
      CHECK_TYPEDEF (value_type);
      gcc_compiled = BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function));
      struct_return = using_struct_return (value_type, gcc_compiled);
a1186 1

d1190 2
a1191 2
/* "finish": Set a temporary breakpoint at the place the selected
   frame will return to, then continue.  */
d1205 1
a1205 1
  /* Find out whether we must run in the background.  */
d1210 1
a1210 1
     error out.  */
d1215 1
a1215 1
     foreground, synchronously.  */
d1218 1
a1218 1
      /* Simulate synchronous execution.  */
d1249 2
a1250 2
  /* Print info on the selected frame, including level number but not
     source.  */
d1261 1
a1261 1
     stopped, in fetch_inferior_event.  */
d1279 1
a1279 1
  proceed_to_finish = 1;	/* We want stop_registers, please...  */
d1283 2
a1284 2
     cannot do async execution.  Otherwise, complete this command when
     the target actually stops, in fetch_inferior_event.  */
d1287 2
a1288 1
      /* Did we stop at our breakpoint?  */
d1290 1
a1290 1
	  && function != NULL)
d1293 1
a1294 1
	  int gcc_compiled;
d1301 1
a1301 1
	  /* FIXME: Shouldn't we do the cleanups before returning?  */
d1305 5
a1309 3
	  CHECK_TYPEDEF (value_type);
	  gcc_compiled = BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function));
	  struct_return = using_struct_return (value_type, gcc_compiled);
a1312 1

a1316 1

@


1.56
log
@2002-09-25  Andrew Cagney  <cagney@@redhat.com>

	* frame.c: Include "gdb_string.h" and "builtin-regs.h".
	(frame_map_regnum_to_name): New function.
	(frame_map_name_to_regnum): New function.
	* frame.h (frame_map_name_to_regnum): Declare.
	(frame_map_regnum_to_name): Declare.
	* builtin-regs.c (builtin_reg_map_regnum_to_name): New function.
	* builtin-regs.h (builtin_reg_map_regnum_to_name): Declare.
	* parse.c: Do not include "builtin-regs.h".
	(target_map_name_to_register): Delete function.
	(write_dollar_variable): Use frame_map_name_to_regnum.
	* parser-defs.h (target_map_name_to_register): Delete declaration.
	* expprint.c: Include "frame.h".
	(print_subexp): Use frame_map_regnum_to_name.
	* eval.c (evaluate_subexp_standard): Use frame_map_regnum_to_name.
	* infcmd.c (registers_info): Use frame_map_name_to_regnum.

2002-09-25  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/pc-fp.exp, gdb.base/pc-fp.c: New test.
@
text
@d45 1
a45 3
/* Functions exported for general use: */

void nofp_registers_info (char *, int);
d51 8
d61 1
a61 1
void continue_command (char *, int);
a80 2
static void interrupt_target_command (char *args, int from_tty);

a98 4
void nexti_command (char *, int);

void stepi_command (char *, int);

d1732 1
a1732 1
void
a1893 1

a1894 6
interrupt_target_command_wrapper (char *args, int from_tty)
{
  interrupt_target_command (args, from_tty);
}

static void
@


1.55
log
@2002-09-10  Andrew Cagney  <cagney@@redhat.com>

	* infcmd.c (default_print_registers_info): Send all output to
	``file'' instead of ``gdb_stdout''.
@
text
@d1704 1
a1704 1
      regnum = target_map_name_to_register (addr_exp, end - addr_exp);
@


1.55.2.1
log
@Merge with mainline; tag is carlton_dictionary-20020927-merge
@
text
@d1704 1
a1704 1
      regnum = frame_map_name_to_regnum (addr_exp, end - addr_exp);
@


1.55.2.2
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@d45 3
a47 1
/* Functions exported for general use, in inferior.h: */
d53 1
a53 3
void nexti_command (char *, int);

void stepi_command (char *, int);
a56 6
void interrupt_target_command (char *args, int from_tty);

/* Local functions: */

static void nofp_registers_info (char *, int);

d75 2
d95 4
d1732 1
a1732 1
static void
d1894 1
d1896 6
@


1.55.2.3
log
@2002-10-18  David Carlton  <carlton@@math.stanford.edu>

	* Makefile.in (block_h): New variable.
	Updated dependencies to reflect it.
	* parse.c (parse_exp_1): Use BLOCK_START.
	#include "block.h"
	* p-exp.tab.c: Regenerated.
	* m2-exp.tab.c: Ditto.
	* jv-exp.tab.c: Ditto.
	* f-exp.tab.c: Ditto.
	* c-exp.tab.c: Ditto.
	* ada-exp.tab.c: Ditto.
	* ada-lang.c: #include "block.h"
	* p-exp.y: Ditto.
	* objc-exp.y: Ditto.
	* m2-exp.y: Ditto.
	* jv-exp.y: Ditto.
	* f-exp.y: Ditto.
	* c-exp.y: Ditto.
	* ada-exp.y: Ditto.
	* values.c: Ditto.
	* valops.c: Ditto.
	* tracepoint.c: Ditto.
	* symtab.c: Ditto.
	* symmisc.c: Ditto.
	* symfile.c: Ditto.
	* stack.c: Ditto.
	* printcmd.c: Ditto.
	* objfiles.c: Ditto.
	* objc-lang.c: Ditto.
	* nlmread.c: Ditto.
	* mips-tdep.c: Ditto.
	* mdebugread.c: Ditto.
	* linespec.c: Ditto.
	* jv-lang.c: Ditto.
	* infcmd.c: Ditto.
	* f-valprint.c: Ditto.
	* findvar.c: Ditto.
	* expprint.c: Ditto.
	* coffread.c: Ditto.
	* buildsym.c: Ditto.
	* breakpoint.c: Ditto.
	* blockframe.c: Ditto.
	* ax-gdb.c: Ditto.
	* alpha-tdep.c: Ditto.
	* block.h: New file.
	* symtab.h: Moved struct block, struct blockvector, and related
	macros and function declarations to block.h.
	* dwarf2read.c (process_die): Set processing_has_namespace_info if
	we run into DW_TAG_namespace, DW_TAG_imported_declaration, or
	DW_TAG_imported_module.
	New variable current_namespace.
	(psymtab_to_symtab_1): Set current_namespace to "".
	(dwarf2_name): New function.
	(dwarf2_add_member_fn): Get name via dwarf2_name.
	(read_typedef): Ditto.
	(read_file_scope): Ditto.
	(dwarf2_add_field): Ditto.
	(read_structure_scope): Ditto.
	(read_enumeration): Ditto.
	(dwarf2_extension): New function.
	(read_namespace): Set current_namespace correctly; also, if we're
	entering an anonymous namespace, add an appropriate using
	directive.
	* buildsym.c (start_symtab): Reset processing_has_namespace_info
	to 0.
	(add_symbol_to_list): Only scan for anonymous namespaces if
	!processing_has_namespace_info.
	* buildsym.h: Add new flag processing_has_namespace_info.

2002-10-18  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c: #include "block.h"
@
text
@a26 1
#include "block.h"
@


1.55.2.4
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d987 1
a987 1
      init_sal (&sal);		/* initialize to zeroes */
@


1.55.2.5
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@a44 2
#include "reggroups.h"
#include <ctype.h>
d1575 2
a1576 1
  if (DEPRECATED_DO_REGISTERS_INFO_P ())
d1578 1
a1578 1
      DEPRECATED_DO_REGISTERS_INFO (regnum, print_all);
d1588 1
a1588 1
	  if (print_all)
d1590 1
a1590 1
	      if (!gdbarch_register_reggroup_p (gdbarch, i, all_reggroup))
d1592 1
a1592 4
	    }
	  else
	    {
	      if (!gdbarch_register_reggroup_p (gdbarch, i, general_reggroup))
d1668 6
d1696 1
a1696 1
  while (*addr_exp != '\0')
a1697 12
      char *start;
      const char *end;

      /* Keep skipping leading white space.  */
      if (isspace ((*addr_exp)))
	{
	  addr_exp++;
	  continue;
	}

      /* Discard any leading ``$''.  Check that there is something
         resembling a register following it.  */
a1699 7
      if (isspace ((*addr_exp)) || (*addr_exp) == '\0')
	error ("Missing register name");

      /* Find the start/end of this register name/num/group.  */
      start = addr_exp;
      while ((*addr_exp) != '\0' && !isspace ((*addr_exp)))
	addr_exp++;
d1701 14
a1714 2
      
      /* Figure out what we've found and display it.  */
d1716 3
a1718 24
      /* A register name?  */
      {
	int regnum = frame_map_name_to_regnum (start, end - start);
	if (regnum >= 0)
	  {
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
					  selected_frame, regnum, fpregs);
	    continue;
	  }
      }
	
      /* A register number?  (how portable is this one?).  */
      {
	char *endptr;
	int regnum = strtol (start, &endptr, 0);
	if (endptr == end
	    && regnum >= 0
	    && regnum < NUM_REGS + NUM_PSEUDO_REGS)
	  {
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
					  selected_frame, regnum, fpregs);
	    continue;
	  }
      }
d1720 3
a1722 30
      /* A register group?  */
      {
	struct reggroup *const *group;
	for (group = reggroups (current_gdbarch);
	     (*group) != NULL;
	     group++)
	  {
	    /* Don't bother with a length check.  Should the user
	       enter a short register group name, go with the first
	       group that matches.  */
	    if (strncmp (start, reggroup_name ((*group)), end - start) == 0)
	      break;
	  }
	if ((*group) != NULL)
	  {
	    int regnum;
	    for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
	      {
		if (gdbarch_register_reggroup_p (current_gdbarch, regnum,
						 (*group)))
		  gdbarch_print_registers_info (current_gdbarch,
						gdb_stdout, selected_frame,
						regnum, fpregs);
	      }
	    continue;
	  }
      }

      /* Nothing matched.  */
      error ("Invalid register `%.*s'", (int) (end - start), start);
d1724 1
a1742 5
  if (!target_has_registers)
    error ("The program has no registers now.");
  if (selected_frame == NULL)
    error ("No selected frame.");

d1750 5
d1757 1
a1757 1
	  if (gdbarch_register_reggroup_p (gdbarch, regnum, vector_reggroup))
a1909 5
  if (!target_has_registers)
    error ("The program has no registers now.");
  if (selected_frame == NULL)
    error ("No selected frame.");

d1923 5
d1930 1
a1930 1
	  if (gdbarch_register_reggroup_p (gdbarch, regnum, float_reggroup))
@


1.55.2.6
log
@2002-12-20  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_minsyms): Don't call
	lookup_symbol_aux from within this.
	* values.c (value_static_field): lookup_symbol_linkage.
	(value_fn_field): lookup_symbol_linkage.
	* valops.c (value_struct_elt_for_reference): lookup_symbol_linkage.
	* blockframe.c (inside_main_func): lookup_symbol_linkage.
	* source.c (select_source_symtab): lookup_symbol_linkage.
	* nlmread.c (nlm_symfile_read): Call lookup_symbol_linkage.
	* nindy-tdep.c (nindy_frame_chain_valid): Call
	lookup_symbol_linkage.
	* linespec.c (count_methods): Call lookup_symbol_linkage.
	(add_matching_methods): Ditto.
	(add_constructors): Ditto.
	* hppa-tdep.c (find_stub_with_shl_get): Call
	lookup_symbol_linkage.  Delete symbol2.
	(initialize_hp_cxx_exception_support): Call lookup_symbol_linkage.
	* cli/cli-cmds.c (edit_command): SYMBOL_PRINT_NAME.
	(list_command): SYMBOL_PRINT_NAME.
	* valops.c (value_of_variable): SYMBOL_PRINT_NAME
	(hand_function_call): SYMBOL_PRINT_NAME.
	* typeprint.c (typedef_print): SYMBOL_PRINT_NAME.
	* tracepoint.c (tracepoints_info): SYMBOL_PRINT_NAME.
	* symtab.c (lookup_partial_symbol): SYMBOL_BEST_NAME.
	(compare_search_syms): SYMBOL_BEST_NAME.
	(print_symbol_info): SYMBOL_PRINT_NAME.
	(print_msymbol_info): SYMBOL_PRINT_NAME.
	(rbreak_command): SYMBOL_PRINT_NAME.
	* symmisc.c (print_symbol): SYMBOL_PRINT_NAME.
	* stack.c (print_frame): SYMBOL_PRINT_NAME.
	(frame_info): SYMBOL_PRINT_NAME.
	(print_block_frame_locals): SYMBOL_PRINT_NAME.
	(print_block_frame_labels): SYMBOL_PRINT_NAME.
	(print_frame_arg_vars): SYMBOL_PRINT_NAME.
	(return_command): SYMBOL_PRINT_NAME.
	* stabsread.c (define_symbol): SYMBOL_PRINT_NAME.
	* p-valprint.c (pascal_val_print): SYMBOL_PRINT_NAME.
	* printcmd.c (build_address_symbolic): SYMBOL_PRINT_NAME.
	(sym_info): SYMBOL_PRINT_NAME.
	(print_frame_args): SYMBOL_PRINT_NAME.
	* objc-lang.c (compare_selectors): SYMBOL_BEST_NAME.
	(compare_classes): SYMBOL_BEST_NAME.
	* maint.c (maintenance_translate_address): SYMBOL_PRINT_NAME.
	* linespec.c (find_method): SYMBOL_PRINT_NAME.
	(select_symbols): SYMBOL_PRINT_NAME.
	* infcmd.c (jump_command): SYMBOL_PRINT_NAME.
	* findvar.c (locate_var_value): SYMBOL_PRINT_NAME.
	* expprint.c (print_subexp): SYMBOL_PRINT_NAME.
	* c-valprint.c (c_val_print): SYMBOL_PRINT_NAME.
	* buildsym.c (finish_block): SYMBOL_PRINT_NAME.
	* breakpoint.c (print_one_breakpoint): SYMBOL_PRINT_NAME.
	* ax-gdb.c (gen_var_ref): SYMBOL_PRINT_NAME.
	* ada-typeprint.c (ada_typedef_print): SYMBOL_PRINT_NAME.
	* ada-lang.c (user_select_syms): Use SYMBOL_PRINT_NAME instead of
	SYMBOL_SOURCE_NAME.
	(user_select_syms):
	(ada_finish_decode_line_1): Use SYMBOL_BEST_NAME instead of
	SYMBOL_SOURCE_NAME.
	* symtab.h (SYMBOL_PRINT_NAME): Rename from SYMBOL_SOURCE_NAME.
	* symfile.c (compare_symbols): Use SYMBOL_BEST_NAME, not
	SYMBOL_SOURCE_NAME.
	(compare_psymbols): Ditto.
	* symtab.c (lookup_symbol_linkage): New function.
	* symtab.h: Declare lookup_symbol_linkage.
	* c-valprint.c (c_val_print): Call lookup_symbol_minsym.
	* symtab.c (lookup_symbol_aux_minsyms): Call minsym_static.
	* minsyms.c (minsym_static): New function.
	* symtab.h: Declare minsym_static.
	* symtab.c (lookup_symbol_minsym): New function.
	(search_symbols): Call lookup_symbol_minsym instead of
	lookup_symbol.
	(lookup_symbol_namespace): Don't take apart NAME.
	* symtab.h: Declare lookup_symbol_minsym.
	* printcmd.c (build_address_symbolic): Don't use old version of
	SYMBOL_LINKAGE_NAME.
	* symtab.c (lookup_block_symbol): Change mangled names to linkage
	name, and use SYMBOL_LINKAGE_NAME as appropriate.
	* symtab.h (SYMBOL_LINKAGE_NAME): New macro, with a different
	meaning from the old macro of the same name.  Also, add comments
	about proper uses of names.
@
text
@d849 1
a849 1
		  SYMBOL_PRINT_NAME (fn)))
@


1.55.2.7
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d186 1
a186 1
struct frame_id step_frame_id;
d282 1
a282 1
	length += 2 * strlen (argv[i]) + 1 + 2 * (argv[i][0] == '\0');
d292 1
a292 2
	  /* Need to handle empty arguments specially.  */
	  if (argv[i][0] == '\0')
d294 3
a296 11
	      *out++ = '\'';
	      *out++ = '\'';
	    }
	  else
	    {
	      for (cp = argv[i]; *cp; ++cp)
		{
		  if (strchr (special, *cp) != NULL)
		    *out++ = '\\';
		  *out++ = *cp;
		}
d622 1
a622 1
	  step_frame_id = get_frame_id (frame);
d737 1
a737 1
      step_frame_id = get_frame_id (frame);
a995 7
	  /* If defined, CALL_DUMMY_BREAKPOINT_OFFSET is where we need
	     to put a breakpoint instruction.  If not, the call dummy
	     already has the breakpoint instruction in it.

	     ADDR IS THE ADDRESS of the call dummy plus the
	     CALL_DUMMY_START_OFFSET, so we need to subtract the
	     CALL_DUMMY_START_OFFSET.  */
d1000 17
a1016 11
      {
	/* Set up a frame ID for the dummy frame so we can pass it to
	   set_momentary_breakpoint.  We need to give the breakpoint a
	   frame ID so that the breakpoint code can correctly
	   re-identify the dummy breakpoint.  */
	struct frame_id frame = frame_id_build (read_fp (), sal.pc);
	/* Create a momentary breakpoint at the return address of the
           inferior.  That way it breaks when it returns.  */
	bpt = set_momentary_breakpoint (sal, frame, bp_call_dummy);
	bpt->disposition = disp_del;
      }
d1100 1
a1100 1
  step_frame_id = get_frame_id (frame);
d1267 1
a1267 1
  if (deprecated_selected_frame == NULL)
d1270 1
a1270 1
  frame = get_prev_frame (deprecated_selected_frame);
d1276 2
a1277 2
  sal = find_pc_line (get_frame_pc (frame), 0);
  sal.pc = get_frame_pc (frame);
d1279 1
a1279 1
  breakpoint = set_momentary_breakpoint (sal, get_frame_id (frame), bp_finish);
d1288 1
a1288 1
  function = find_pc_function (get_frame_pc (deprecated_selected_frame));
d1295 2
a1296 2
      print_stack_frame (deprecated_selected_frame,
			 frame_relative_level (deprecated_selected_frame), 0);
d1684 1
a1684 1
  if (deprecated_selected_frame == NULL)
d1690 1
a1690 1
				    deprecated_selected_frame, -1, fpregs);
d1727 1
a1727 1
					  deprecated_selected_frame, regnum, fpregs);
d1741 1
a1741 1
					  deprecated_selected_frame, regnum, fpregs);
d1767 1
a1767 1
						gdb_stdout, deprecated_selected_frame,
d1797 1
a1797 1
  if (deprecated_selected_frame == NULL)
d1823 1
a1823 1
  print_vector_info (current_gdbarch, gdb_stdout, deprecated_selected_frame, args);
d1964 1
a1964 1
  if (deprecated_selected_frame == NULL)
d1998 1
a1998 1
  print_float_info (current_gdbarch, gdb_stdout, deprecated_selected_frame, args);
@


1.55.2.8
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d118 1
a118 1
static void breakpoint_auto_delete_contents (void *);
d957 1
a957 1
breakpoint_auto_delete_contents (void *arg)
d1144 1
a1144 1
    until_break_command (arg, from_tty, 0);
a1147 31

static void
advance_command (char *arg, int from_tty)
{
  int async_exec = 0;

  if (!target_has_execution)
    error ("The program is not running.");

  if (arg == NULL)
    error_no_arg ("a location");

  /* Find out whether we must run in the background.  */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out.  */
  if (event_loop_p && async_exec && !target_can_async_p ())
    error ("Asynchronous execution not supported on this target.");

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously.  */
  if (event_loop_p && !async_exec && target_can_async_p ())
    {
      /* Simulate synchronous execution.  */
      async_disable_stdin ();
    }

  until_break_command (arg, from_tty, 1);
}
d1981 6
d2001 1
d2134 2
a2135 1
or a specified location (same args as break command) within the current frame.");
a2137 5

  c = add_com ("advance", class_run, advance_command,
	       "Continue the program up to the given location (same form as args for break command).\n\
Execution will also stop upon exit from the current stack frame.");
  set_cmd_completer (c, location_completer);
@


1.55.2.9
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
d27 1
a45 1
#include "block.h"
d1668 1
a1668 1
	  REGISTER_CONVERT_TO_VIRTUAL (i, register_type (current_gdbarch, i),
d1679 1
a1679 1
      if (TYPE_CODE (register_type (current_gdbarch, i)) == TYPE_CODE_FLT)
d1683 1
a1683 1
	  val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
d1701 1
a1701 1
	  val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
d1705 1
a1705 1
	  if (TYPE_VECTOR (register_type (current_gdbarch, i)) == 0)
d1708 1
a1708 1
	      val_print (register_type (current_gdbarch, i), virtual_buffer, 0, 0,
@


1.55.2.10
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a988 2
  struct breakpoint *bpt;
  struct symtab_and_line sal;
d993 1
a993 2
  init_sal (&sal);		/* initialize to zeroes */
  if (CALL_DUMMY_LOCATION == AT_ENTRY_POINT)
d995 37
a1031 1
      sal.pc = CALL_DUMMY_ADDRESS ();
a1032 29
  else
    {
      /* If defined, CALL_DUMMY_BREAKPOINT_OFFSET is where we need to
	 put a breakpoint instruction.  If not, the call dummy already
	 has the breakpoint instruction in it.

	 ADDR IS THE ADDRESS of the call dummy plus the
	 CALL_DUMMY_START_OFFSET, so we need to subtract the
	 CALL_DUMMY_START_OFFSET.  */
      sal.pc = addr - CALL_DUMMY_START_OFFSET + CALL_DUMMY_BREAKPOINT_OFFSET;
    }
  sal.section = find_pc_overlay (sal.pc);
  
  {
    /* Set up a frame ID for the dummy frame so we can pass it to
       set_momentary_breakpoint.  We need to give the breakpoint a
       frame ID so that the breakpoint code can correctly re-identify
       the dummy breakpoint.  */
    struct frame_id frame = frame_id_build (read_fp (), sal.pc);
    /* Create a momentary breakpoint at the return address of the
       inferior.  That way it breaks when it returns.  */
    bpt = set_momentary_breakpoint (sal, frame, bp_call_dummy);
    bpt->disposition = disp_del;
  }

  /* If all error()s out of proceed ended up calling normal_stop (and
     perhaps they should; it already does in the special case of error
     out of resume()), then we wouldn't need this.  */
  make_cleanup (breakpoint_auto_delete_contents, &stop_bpstat);
d1917 1
a1917 5
  /* Careful here. See comments in inferior.h.  Basically some OSes
     don't ignore SIGSTOPs on continue requests anymore.  We need a
     way for handle_inferior_event to reset the stop_signal variable
     after an attach, and this is what STOP_QUIETLY_NO_SIGSTOP is for.  */
  stop_soon = STOP_QUIETLY_NO_SIGSTOP;
a1918 1
  stop_soon = NO_STOP_QUIETLY;
@


1.55.2.11
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@d118 2
d953 106
@


1.55.2.12
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d1503 2
a1504 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
@


1.55.2.13
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a83 2
static void disconnect_command (char *, int);

d1554 1
a1554 1
      if (DEPRECATED_REGISTER_CONVERTIBLE (i))
d1556 1
a1556 1
	  DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (i, register_type (current_gdbarch, i),
a1878 20
/* Disconnect from the current target without resuming it (leaving it
   waiting for a debugger).

   We'd better not have left any breakpoints in the program or the
   next debugger will get confused.  Currently only supported for some
   remote targets, since the normal attach mechanisms don't work on
   stopped processes on some native platforms (e.g. GNU/Linux).  */

static void
disconnect_command (char *args, int from_tty)
{
  dont_repeat ();		/* Not for the faint of heart */
  target_disconnect (args, from_tty);
#if defined(SOLIB_RESTART)
  SOLIB_RESTART ();
#endif
  if (detach_hook)
    detach_hook ();
}

a2015 5

  add_com ("disconnect", class_run, disconnect_command,
	   "Disconnect from a target.\n\
The target will wait for another debugger to connect.  Not available for\n\
all targets.");
@


1.55.2.14
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d1654 1
a1654 2
	int regnum = frame_map_name_to_regnum (deprecated_selected_frame,
					       start, end - start);
d1679 4
a1682 4
	struct reggroup *group;
	for (group = reggroup_next (current_gdbarch, NULL);
	     group != NULL;
	     group = reggroup_next (current_gdbarch, group))
d1687 1
a1687 1
	    if (strncmp (start, reggroup_name (group), end - start) == 0)
d1690 1
a1690 1
	if (group != NULL)
d1696 1
a1696 1
						 group))
@


1.55.2.15
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d587 1
a587 1
  int count = 1;
d809 1
a809 1
  CORE_ADDR addr;
d1124 1
a1124 1
  struct symbol *function;
d1152 3
a1154 1
      struct_return = using_struct_return (check_typedef (value_type),
d1169 2
a1170 2
  struct frame_info *frame;
  struct symbol *function;
d1280 3
a1282 1
	    using_struct_return (check_typedef (value_type),
d1344 1
a1344 1
      char *val = get_in_environ (inferior_environ, var);
d1361 1
a1361 1
      char **vector = environ_vector (inferior_environ);
d1373 1
a1373 1
  char *p, *val, *var;
d1611 1
a1611 1
  char *end;
@


1.55.2.16
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@a46 1
#include "gdb_assert.h"
d264 1
d373 1
d546 1
d555 1
d564 1
d571 1
d961 1
d1080 1
a1080 1
      value = register_value_being_returned (value_type, stop_registers);
d1089 1
a1089 17
  /* FIXME: 2003-09-27: When returning from a nested inferior function
     call, it's possible (with no help from the architecture vector)
     to locate and return/print a "struct return" value.  This is just
     a more complicated case of what is already being done in in the
     inferior function call code.  In fact, when inferior function
     calls are made async, this will likely be made the norm.  */
#ifdef DEPRECATED_VALUE_RETURNED_FROM_STACK
#define DEPRECATED_VALUE_RETURNED_FROM_STACK_P 1
#else
#define DEPRECATED_VALUE_RETURNED_FROM_STACK_P 0
#endif
  else if (gdbarch_return_value_p (current_gdbarch)
	   || DEPRECATED_VALUE_RETURNED_FROM_STACK_P)
    /* We cannot determine the contents of the structure because it is
       on the stack, and we don't know where, since we did not
       initiate the call, as opposed to the call_function_by_hand
       case.  */
d1091 5
a1095 2
      gdb_assert (gdbarch_return_value (current_gdbarch, value_type, NULL, NULL, NULL)
		  == RETURN_VALUE_STRUCT_CONVENTION);
d1100 2
a1101 32
      return;
    }
  else
    {
      if (EXTRACT_STRUCT_VALUE_ADDRESS_P ())
	{
	  CORE_ADDR addr = EXTRACT_STRUCT_VALUE_ADDRESS (stop_registers);
	  if (!addr)
	    error ("Function return value unknown.");
	  value = value_at (value_type, addr, NULL);
	}
      else if (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P ())
	{
	  char *buf = deprecated_grub_regcache_for_registers (stop_registers);
	  CORE_ADDR addr = DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS (buf);
	  if (!addr)
	    error ("Function return value unknown.");
	  value = value_at (value_type, addr, NULL);
	}
      else
	{
	  /* It is "struct return" yet the value is being extracted,
             presumably from registers, using EXTRACT_RETURN_VALUE.
             This doesn't make sense.  Unfortunately, the legacy
             interfaces allowed this behavior.  Sigh!  */
	  value = allocate_value (value_type);
	  CHECK_TYPEDEF (value_type);
	  /* If the function returns void, don't bother fetching the
	     return value.  */
	  EXTRACT_RETURN_VALUE (value_type, stop_registers,
				VALUE_CONTENTS_RAW (value));
	}
d1109 1
d1287 1
d1449 1
d1479 3
d1560 1
a1560 1
		  DEPRECATED_REGISTER_VIRTUAL_SIZE (i));
d1573 1
a1573 1
	  for (j = 0; j < DEPRECATED_REGISTER_RAW_SIZE (i); j++)
d1579 1
a1579 1
		idx = DEPRECATED_REGISTER_RAW_SIZE (i) - 1 - j;
d1910 1
d1947 1
@


1.55.2.17
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d1089 7
a1095 1
  else if (gdbarch_return_value_p (current_gdbarch))
@


1.55.2.18
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
d664 7
d705 9
a713 1
    step_once (skip_subroutines, single_inst, count - 1);
d1065 1
a1065 2
/* Print the result of a function at the end of a 'finish' command.  */

d1067 1
a1067 1
print_return_value (int struct_return, struct type *value_type)
a1068 2
  struct cleanup *old_chain;
  struct ui_stream *stb;
d1070 1
d1072 1
a1072 1
  if (!struct_return)
a1073 1
      /* The return value can be found in the inferior's registers.  */
d1075 7
d1095 1
a1095 2
      gdb_assert (gdbarch_return_value (current_gdbarch, value_type,
					NULL, NULL, NULL)
d1112 8
d1133 7
a1140 12

  /* Print it.  */
  stb = ui_out_stream_new (uiout);
  old_chain = make_cleanup_ui_out_stream_delete (stb);
  ui_out_text (uiout, "Value returned is ");
  ui_out_field_fmt (uiout, "gdb-result-var", "$%d",
		    record_latest_value (value));
  ui_out_text (uiout, " = ");
  value_print (value, stb->stream, 0, Val_no_prettyprint);
  ui_out_field_stream (uiout, "return-value", stb);
  ui_out_text (uiout, "\n");
  do_cleanups (old_chain);
d1144 8
a1151 9
   has stopped.  In asynchronous mode, we wait for the target to stop
   in the call to poll or select in the event loop, so it is
   impossible to do all the stuff as part of the finish_command
   function itself.  The only chance we have to complete this command
   is in fetch_inferior_event, which is called by the event loop as
   soon as it detects that the target has stopped. This function is
   called via the cmd_continuation pointer.  */

static void
d1159 2
a1160 2
  function = (struct symbol *) arg->next->data.pointer;
  cleanups = (struct cleanup *) arg->next->next->data.pointer;
d1163 1
a1163 1
      && function != NULL)
d1166 1
a1167 1
      int gcc_compiled;
d1180 4
a1183 3
      CHECK_TYPEDEF (value_type);
      gcc_compiled = BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function));
      struct_return = using_struct_return (value_type, gcc_compiled);
a1186 1

d1190 2
a1191 2
/* "finish": Set a temporary breakpoint at the place the selected
   frame will return to, then continue.  */
d1205 1
a1205 1
  /* Find out whether we must run in the background.  */
d1210 1
a1210 1
     error out.  */
d1215 1
a1215 1
     foreground, synchronously.  */
d1218 1
a1218 1
      /* Simulate synchronous execution.  */
d1249 2
a1250 2
  /* Print info on the selected frame, including level number but not
     source.  */
d1261 1
a1261 1
     stopped, in fetch_inferior_event.  */
d1279 1
a1279 1
  proceed_to_finish = 1;	/* We want stop_registers, please...  */
d1283 2
a1284 2
     cannot do async execution.  Otherwise, complete this command when
     the target actually stops, in fetch_inferior_event.  */
d1287 2
a1288 1
      /* Did we stop at our breakpoint?  */
d1290 1
a1290 1
	  && function != NULL)
d1293 1
a1294 1
	  int gcc_compiled;
d1301 1
a1301 1
	  /* FIXME: Shouldn't we do the cleanups before returning?  */
d1305 5
a1309 3
	  CHECK_TYPEDEF (value_type);
	  gcc_compiled = BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function));
	  struct_return = using_struct_return (value_type, gcc_compiled);
a1312 1

a1316 1

@


1.54
log
@2002-08-21  Andrew Cagney  <ac131313@@redhat.com>
* infcmd.c (default_print_registers_info): Replace
do_registers_info.
(registers_info): Use gdbarch_print_registers_info instead of
DO_REGISTERS_INFO.
* inferior.h (default_print_registers_info): Replace
do_registers_info.
* gdbarch.sh (PRINT_REGISTERS_INFO): New method.
(DO_REGISTERS_INFO): Change to a predicate function.
* gdbarch.h, gdbarch.c: Regenerate.

2002-08-21  Andrew Cagney  <ac131313@@redhat.com>
* gdbint.texinfo (Target Architecture Definition): Document
print_registers_info.  Note that DO_REGISTERS_INFO is deprecated.
@
text
@d1656 1
a1656 1
		     gdb_stdout, 'x', 1, 0, Val_pretty_default);
d1661 1
a1661 1
	      printf_filtered ("\t");
d1663 1
a1663 1
			 gdb_stdout, 0, 1, 0, Val_pretty_default);
@


1.54.6.1
log
@2002-09-10  Andrew Cagney  <cagney@@redhat.com>

	* infcmd.c (default_print_registers_info): Send all output to
	``file'' instead of ``gdb_stdout''.
@
text
@d1656 1
a1656 1
		     file, 'x', 1, 0, Val_pretty_default);
d1661 1
a1661 1
	      fprintf_filtered (file, "\t");
d1663 1
a1663 1
			 file, 0, 1, 0, Val_pretty_default);
@


1.54.6.2
log
@* frame.c: Include "gdb_string.h" and "builtin-regs.h".
(frame_map_regnum_to_name): New function.
(frame_map_name_to_regnum): New function.
* frame.h (frame_map_name_to_regnum): Declare.
(frame_map_regnum_to_name): Declare.
* builtin-regs.c (builtin_reg_map_regnum_to_name): New function.
* builtin-regs.h (builtin_reg_map_regnum_to_name): Declare.
* parse.c: Do not include "builtin-regs.h".
(target_map_name_to_register): Delete function.
(write_dollar_variable): Use frame_map_name_to_regnum.
* parser-defs.h (target_map_name_to_register): Delete declaration.
* expprint.c: Include "frame.h".
(print_subexp): Use frame_map_regnum_to_name.
* eval.c (evaluate_subexp_standard): Use frame_map_regnum_to_name.
* infcmd.c (registers_info): Use frame_map_name_to_regnum.

Testsuite:

* gdb.base/pc-fp.exp, gdb.base/pc-fp.c: New test.
@
text
@d1704 1
a1704 1
      regnum = frame_map_name_to_regnum (addr_exp, end - addr_exp);
@


1.54.4.1
log
@2002-08-26  Andrew Cagney  <ac131313@@redhat.com>

	* i386-tdep.c: Include "reggroups.h".
	(i386_register_reggroup_p): New function.
	(i386_add_reggroups, i386_init_reggroups): New function.
	(i386_gdbarch_init): Call i386_add_reggroups.  Set
	register_reggroup_p.
	(_initialize_i386_tdep): Call i386_init_reggroups.

	* infcmd.c: Include <ctype.h>.
	(registers_info): Rewrite.  Handle reggroups.
	(default_print_registers_info): Use gdbarch_register_reggroup_p.
	(print_float_info): Use gdbarch_register_reggroup_p.

	* regcache.c: Include "reggroups.h".
	(regcache_dump): Include the register groups in the ``maint print
	registers'' command.

	* infcmd.c: Include "regroup.h".
	(default_print_registers_info): Use gdbarch_register_reggroup_p.
	(print_float_info): Ditto.

	* gdbarch.sh: Include "reggroups.h".
	(register_reggroup_p): New method.
	(struct reggroup): Add opaque declaration.
	* gdbarch.h, gdbarch.c: Regenerate.

	* Makefile.in (SFILES): Add reggroups.c.
	(reggroups_h): Define.
	(COMMON_OBS): Add reggroups.o.
	(reggroups.o): Specify dependencies.
	(gdbarch.o, infcmd.o, i386-tdep.o): Update dependencies.

	* reggroups.c: New file.
	* reggroups.h: New file.
@
text
@a43 2
#include "reggroups.h"
#include <ctype.h>
d1589 1
a1589 1
	      if (gdbarch_register_reggroup_p (gdbarch, i, float_reggroup))
d1591 1
a1591 1
	      if (gdbarch_register_reggroup_p (gdbarch, i, vector_reggroup))
d1695 1
a1695 1
  while (*addr_exp != '\0')
a1696 11
      const char *start;
      const char *end;
      /* Keep skipping leading white space until something interesting
         is found.  */
      if (isspace ((*addr_exp)))
	{
	  addr_exp++;
	  continue;
	}

      /* Discard any ``$''.  There had better be something after it.  */
a1698 7
      if (isspace ((*addr_exp)) || (*addr_exp) == '\0')
	error ("Missing register name");

      /* Find the start/end of this register name/group.  */
      start = addr_exp;
      while ((*addr_exp) != '\0' && !isspace ((*addr_exp)))
	addr_exp++;
d1700 14
a1713 2
      
      /* Figure out what we've found, display it.  */
d1715 3
a1717 24
      /* A register name?  */
      {
	int regnum = target_map_name_to_register (addr_exp, end - start);
	if (regnum >= 0)
	  {
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
					  selected_frame, regnum, fpregs);
	    continue;
	  }
      }
	
      /* A register number?  (how portable is this one?).  */
      {
	char *endptr;
	int regnum = strtol (start, &endptr, 0);
	if (endptr == end
	    && regnum >= 0
	    && regnum < NUM_REGS + NUM_PSEUDO_REGS)
	  {
	    gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
					  selected_frame, regnum, fpregs);
	    continue;
	  }
      }
d1719 3
a1721 30
      /* A register group?  */
      {
	struct reggroup *const *group;
	for (group = reggroups (current_gdbarch);
	     (*group) != NULL;
	     group++)
	  {
	    if (strncmp (start, reggroup_name ((*group)), end - start) == 0)
	      break;
	  }
	if ((*group) != NULL)
	  {
	    /* Don't bother with a length check.  If the user enters
	       just part of a register group's name, go with the first
	       matching one.  */
	    int regnum;
	    for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
	      {
		if (gdbarch_register_reggroup_p (current_gdbarch, regnum,
						 (*group)))
		  gdbarch_print_registers_info (current_gdbarch,
						gdb_stdout, selected_frame,
						regnum, fpregs);
	      }
	    continue;
	  }
      }

      /* Nothing matched.  */
      error ("Invalid register `%.*s'", (int) (end - start), start);
d1723 1
a1723 1

d1936 1
a1936 1
	  if (gdbarch_register_reggroup_p (gdbarch, regnum, float_reggroup))
@


1.54.4.2
log
@2002-08-28  Andrew Cagney  <ac131313@@redhat.com>

	* infcmd.c (registers_info): Pass start, instead of addr_exp, to
	target_map_name_to_register.
	(default_print_registers_info): Use all_reggroup and
	general_reggroup to decide if all, general registers should be
	displayed.
	* i386-tdep.c (i386_register_reggroup_p): Move mxcsr to SSE group.
@
text
@d1589 7
a1595 6
	  if (print_all && !gdbarch_register_reggroup_p (gdbarch, i,
							 all_reggroup))
	    continue;
	  if (!print_all && !gdbarch_register_reggroup_p (gdbarch, i,
							  general_reggroup))
	    continue;
d1699 1
a1699 1
      char *start;
d1725 1
a1725 1
	int regnum = target_map_name_to_register (start, end - start);
@


1.53
log
@2002-08-20  Elena Zannoni  <ezannoni@@redhat.com>

	* infcmd.c (do_registers_info): Print vector registers in hex
	format only.
	(print_vector_info): Check that printing registers
	makes sense.
	(print_float_info): Ditto.
@
text
@d1553 2
a1554 2
   registers (all == 1) or all non-float and non-vector registers (all
   == 0).
d1557 5
a1561 5
   register(s) one per line is good enough. If a different format
   is required, (eg, for MIPS or Pyramid 90x, which both have
   lots of regs), or there is an existing convention for showing
   all the registers, define the macro DO_REGISTERS_INFO(regnum, fp)
   to provide that format.  */
d1564 16
a1579 6
do_registers_info (int regnum, int print_all)
{
  register int i;
  int numregs = NUM_REGS + NUM_PSEUDO_REGS;
  char *raw_buffer = (char*) alloca (MAX_REGISTER_RAW_SIZE);
  char *virtual_buffer = (char*) alloca (MAX_REGISTER_VIRTUAL_SIZE);
d1606 2
a1607 2
      fputs_filtered (REGISTER_NAME (i), gdb_stdout);
      print_spaces_filtered (15 - strlen (REGISTER_NAME (i)), gdb_stdout);
d1610 1
a1610 1
      if (! frame_register_read (selected_frame, i, raw_buffer))
d1612 1
a1612 1
	  printf_filtered ("*value not available*\n");
d1616 3
d1631 2
a1632 1
      /* If virtual format is floating, print it that way, and in raw hex.  */
d1635 1
a1635 1
	  register int j;
d1638 1
a1638 1
		     gdb_stdout, 0, 1, 0, Val_pretty_default);
d1640 1
a1640 1
	  printf_filtered ("\t(raw 0x");
d1643 6
a1648 3
	      register int idx = TARGET_BYTE_ORDER == BFD_ENDIAN_BIG ? j
	      : REGISTER_RAW_SIZE (i) - 1 - j;
	      printf_filtered ("%02x", (unsigned char) raw_buffer[idx]);
d1650 1
a1650 1
	  printf_filtered (")");
d1673 1
a1673 1
      printf_filtered ("\n");
d1690 2
a1691 1
      DO_REGISTERS_INFO (-1, fpregs);
d1716 2
a1717 1
      DO_REGISTERS_INFO (regnum, fpregs);
a1758 1
#if 0
a1759 3
#else
	      do_registers_info (regnum, 1);
#endif
a1938 1
#if 0
a1939 3
#else
	      do_registers_info (regnum, 1);
#endif
@


1.52
log
@2002-08-15  Andrew Cagney  <ac131313@@redhat.com>

* infcmd.c (vector_info): New function.
(_initialize_infcmd): Add command "info vector".
(print_vector_info): New function.

* gdbarch.sh (PRINT_VECTOR_INFO): New method
* gdbarch.h, gdbarch.c: Regenerate.

Index: doc/ChangeLog
2002-08-15  Andrew Cagney  <ac131313@@redhat.com>

* gdbint.texinfo (Target Architecture Definition): Document
PRINT_VECTOR_INFO.
* gdb.texinfo (Vector Unit): Document "info vectors" command.
@
text
@a1634 1
      /* Else print as integer in hex and in decimal.  */
d1637 1
d1640 8
a1647 3
	  printf_filtered ("\t");
	  val_print (REGISTER_VIRTUAL_TYPE (i), virtual_buffer, 0, 0,
		     gdb_stdout, 0, 1, 0, Val_pretty_default);
d1729 6
d1913 6
@


1.51
log
@2002-08-15  Andrew Cagney  <ac131313@@redhat.com>

* infcmd.c (do_registers_info): Rename parameter ``fpregs'' to
``print_all''.  Only print vector registers when ``print_all''.
@
text
@d1713 33
d2118 3
@


1.50
log
@2002-08-15  Andrew Cagney  <ac131313@@redhat.com>
* gdbarch.sh (PRINT_FLOAT_INFO): Change to a predicate method.
Add `args' parameter.
* gdbarch.h, gdbarch.c: Regenerate.

* arm-tdep.c (arm_print_float_info): Add the parameter `args'.

* infcmd.c (float_info): Call print_float_info.
(print_float_info): New function.  By default, print the
floating-point registers.

* arch-utils.h (default_print_float_info): Delete declaration.
* arch-utils.c (default_print_float_info): Delete function.
@
text
@d1552 3
a1554 3
/* Print out the machine register regnum. If regnum is -1,
   print all registers (fpregs == 1) or all non-float registers
   (fpregs == 0).
d1564 1
a1564 1
do_registers_info (int regnum, int fpregs)
d1573 2
a1574 1
      /* Decide between printing all regs, nonfloat regs, or specific reg.  */
d1577 7
a1583 2
	  if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (i)) == TYPE_CODE_FLT && !fpregs)
	    continue;
@


1.49
log
@* infcmd.c (print_return_value): Remove compatibility code calling
deprecated_grub_regcache_for_registers.

* values.c: Include "regcache.h".
(value_being_returned): Update.  Use
deprecated_grub_regcache_for_registers to extract the register
buffer address.
* value.h (value_being_returned): Change ``retbuf'' parameter to a
``struct regcache''.
* Makefile.in (values.o): Add dependency on $(regcache_h).

* inferior.h (run_stack_dummy): Change type of second parameter to
a ``struct regcache''.
* valops.c (hand_function_call): Change type of retbuf to ``struct
regcache''.  Allocate using regcache_xmalloc, clean using
make_cleanup_regcache_xfree.
* infcmd.c (run_stack_dummy): Update.  Use
regcache_cpu_no_passthrough instead of memcpy to copy the buffer.

* regcache.c (do_regcache_xfree): New function.
(make_cleanup_regcache_xfree): New function.
* regcache.h (make_cleanup_regcache_xfree): Declare.
@
text
@d1848 2
a1849 1
float_info (char *addr_exp, int from_tty)
d1851 35
a1885 1
  gdbarch_print_float_info (current_gdbarch, gdb_stdout, selected_frame);
@


1.48
log
@* infrun.c (stop_registers): Change variable's type to ``struct
regcache'''.
(xmalloc_inferior_status): Delete function.
(free_inferior_status): Delete function.
(normal_stop): Use regcache_cpy.
(struct inferior_status): Change type of fields ``stop_registers''
and ``registers'' to ``struct regcache''.
(write_inferior_status_register): Use regcache_write.
(save_inferior_status): Instead of calling
xmalloc_inferior_status, allocate the inf_status buffer directly.
Use regcache_dup_no_passthrough and regcache_dup to save the
buffers.
(restore_inferior_status): Use regcache_xfree and regcache_cpy.
Replace the stop_registers regcache instead of overriding it.  Use
regcache_xfree.  Instead of calling free_inferior_status, xfree
the buffer directly.
(discard_inferior_status): Use regcache_xfree.  Instead of calling
free_inferior_status, xfree the buffer directly.
(build_infrun): Use regcache_xmalloc.
(_initialize_infrun): Delete redundant call to build_infrun.
* Makefile.in (infcmd.o): Add $(regcache_h).
* infcmd.c: Include "regcache.h".
(run_stack_dummy): Use deprecated_grub_regcache_for_registers to
obtain the address of `stop_registers' register buffer.
(print_return_value): Ditto.
* inferior.h (struct regcache): Add opaque declaration.
(stop_registers): Change variable's declared type to ``struct
regcache''.
@
text
@d43 1
a43 2

#include "regcache.h"	/* for deprecated_grub_regcache_for_registers().  */
d973 1
a973 1
run_stack_dummy (CORE_ADDR addr, char *buffer)
d1046 1
a1046 3

  memcpy (buffer, deprecated_grub_regcache_for_registers (stop_registers),
	  REGISTER_BYTES);
a1145 1
#if 0
a1146 7
#else
      /* FIXME: cagney/2002-06-22: Function value_being_returned()
         should take a regcache as a parameter.  */
      value = value_being_returned
	(value_type, deprecated_grub_regcache_for_registers (stop_registers),
	 structure_return);
#endif
a1166 1
#if 0
a1167 7
#else
      /* FIXME: cagney/2002-06-22: Function value_being_returned()
         should take a regcache as a parameter.  */
      value = value_being_returned
	(value_type, deprecated_grub_regcache_for_registers (stop_registers),
	 structure_return);
#endif
@


1.47
log
@Make print_float_info() multi-arch pure.  Add ui_file and frame parameters.
@
text
@d44 2
d1048 2
a1049 1
  memcpy (buffer, stop_registers, REGISTER_BYTES);
d1149 1
d1151 7
d1178 1
d1180 7
@


1.46
log
@* findvar.c (extract_signed_integer): Cast printf argument
to suppress format warning.
(extract_unsigned_integer): Likewise.
* infcmd.c (registers_info): Likewise.
* top.c (get_prompt_1): Likewise.
* valops.c (value_assign): Likewise.
* valprint.c (print_decimal): Likewise.
@
text
@d1850 1
a1850 1
  PRINT_FLOAT_INFO ();
@


1.46.6.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d1850 1
a1850 1
  gdbarch_print_float_info (current_gdbarch, gdb_stdout, selected_frame);
@


1.46.6.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@a42 1
#include "regcache.h"
d972 1
a972 1
run_stack_dummy (CORE_ADDR addr, struct regcache *buffer)
d1045 2
a1046 1
  regcache_cpy_no_passthrough (buffer, stop_registers);
@


1.46.6.3
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d1552 3
a1554 3
/* Print out the machine register regnum. If regnum is -1, print all
   registers (print_all == 1) or all non-float and non-vector
   registers (print_all == 0).
d1557 5
a1561 5
   register(s) one per line is good enough.  If a different format is
   required, (eg, for MIPS or Pyramid 90x, which both have lots of
   regs), or there is an existing convention for showing all the
   registers, define the architecture method PRINT_REGISTERS_INFO to
   provide that format.  */
d1564 6
a1569 16
default_print_registers_info (struct gdbarch *gdbarch,
			      struct ui_file *file,
			      struct frame_info *frame,
			      int regnum, int print_all)
{
  int i;
  const int numregs = NUM_REGS + NUM_PSEUDO_REGS;
  char *raw_buffer = alloca (MAX_REGISTER_RAW_SIZE);
  char *virtual_buffer = alloca (MAX_REGISTER_VIRTUAL_SIZE);

  /* FIXME: cagney/2002-03-08: This should be deprecated.  */
  if (DO_REGISTERS_INFO_P ())
    {
      DO_REGISTERS_INFO (regnum, print_all);
      return;
    }
d1573 1
a1573 2
      /* Decide between printing all regs, non-float / vector regs, or
         specific reg.  */
d1576 2
a1577 7
	  if (!print_all)
	    {
	      if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (i)) == TYPE_CODE_FLT)
		continue;
	      if (TYPE_VECTOR (REGISTER_VIRTUAL_TYPE (i)))
		continue;
	    }
d1590 2
a1591 2
      fputs_filtered (REGISTER_NAME (i), file);
      print_spaces_filtered (15 - strlen (REGISTER_NAME (i)), file);
d1594 1
a1594 1
      if (! frame_register_read (frame, i, raw_buffer))
d1596 1
a1596 1
	  fprintf_filtered (file, "*value not available*\n");
a1599 3
      /* FIXME: cagney/2002-08-03: This code shouldn't be necessary.
         The function frame_register_read() should have returned the
         pre-cooked register so no conversion is necessary.  */
d1612 1
a1612 2
      /* If virtual format is floating, print it that way, and in raw
         hex.  */
d1615 1
a1615 1
	  int j;
d1618 1
a1618 1
		     file, 0, 1, 0, Val_pretty_default);
d1620 1
a1620 1
	  fprintf_filtered (file, "\t(raw 0x");
d1623 3
a1625 6
	      int idx;
	      if (TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)
		idx = j;
	      else
		idx = REGISTER_RAW_SIZE (i) - 1 - j;
	      fprintf_filtered (file, "%02x", (unsigned char) raw_buffer[idx]);
d1627 1
a1627 1
	  fprintf_filtered (file, ")");
d1629 1
a1631 1
	  /* Print the register in hex.  */
d1634 3
a1636 8
          /* If not a vector register, print it also according to its
             natural format.  */
	  if (TYPE_VECTOR (REGISTER_VIRTUAL_TYPE (i)) == 0)
	    {
	      printf_filtered ("\t");
	      val_print (REGISTER_VIRTUAL_TYPE (i), virtual_buffer, 0, 0,
			 gdb_stdout, 0, 1, 0, Val_pretty_default);
	    }
d1645 1
a1645 1
      fprintf_filtered (file, "\n");
d1662 1
a1662 2
      gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
				    selected_frame, -1, fpregs);
d1687 1
a1687 2
      gdbarch_print_registers_info (current_gdbarch, gdb_stdout,
				    selected_frame, regnum, fpregs);
a1706 35

static void
print_vector_info (struct gdbarch *gdbarch, struct ui_file *file,
		   struct frame_info *frame, const char *args)
{
  if (gdbarch_print_vector_info_p (gdbarch))
    gdbarch_print_vector_info (gdbarch, file, frame, args);
  else
    {
      int regnum;
      int printed_something = 0;

      if (!target_has_registers)
	error ("The program has no registers now.");
      if (selected_frame == NULL)
	error ("No selected frame.");

      for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
	{
	  if (TYPE_VECTOR (REGISTER_VIRTUAL_TYPE (regnum)))
	    {
	      printed_something = 1;
	      gdbarch_print_registers_info (gdbarch, file, frame, regnum, 1);
	    }
	}
      if (!printed_something)
	fprintf_filtered (file, "No vector information\n");
    }
}

static void
vector_info (char *args, int from_tty)
{
  print_vector_info (current_gdbarch, gdb_stdout, selected_frame, args);
}
d1848 1
a1848 38
print_float_info (struct gdbarch *gdbarch, struct ui_file *file,
		  struct frame_info *frame, const char *args)
{
  if (gdbarch_print_float_info_p (gdbarch))
    gdbarch_print_float_info (gdbarch, file, frame, args);
  else
    {
#ifdef FLOAT_INFO
#if GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL
#error "FLOAT_INFO defined in multi-arch"
#endif
      FLOAT_INFO;
#else
      int regnum;
      int printed_something = 0;

      if (!target_has_registers)
	error ("The program has no registers now.");
      if (selected_frame == NULL)
	error ("No selected frame.");

      for (regnum = 0; regnum < NUM_REGS + NUM_PSEUDO_REGS; regnum++)
	{
	  if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (regnum)) == TYPE_CODE_FLT)
	    {
	      printed_something = 1;
	      gdbarch_print_registers_info (gdbarch, file, frame, regnum, 1);
	    }
	}
      if (!printed_something)
	fprintf_filtered (file, "\
No floating-point info available for this processor.\n");
#endif
    }
}

static void
float_info (char *args, int from_tty)
d1850 1
a1850 1
  print_float_info (current_gdbarch, gdb_stdout, selected_frame, args);
a2043 3

  add_info ("vector", vector_info,
	    "Print the status of the vector unit\n");
@


1.46.6.4
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d1656 1
a1656 1
		     file, 'x', 1, 0, Val_pretty_default);
d1661 1
a1661 1
	      fprintf_filtered (file, "\t");
d1663 1
a1663 1
			 file, 0, 1, 0, Val_pretty_default);
d1704 1
a1704 1
      regnum = frame_map_name_to_regnum (addr_exp, end - addr_exp);
@


1.46.6.5
log
@merge from mainline
@
text
@d45 3
a47 1
/* Functions exported for general use, in inferior.h: */
d53 1
a53 3
void nexti_command (char *, int);

void stepi_command (char *, int);
a56 6
void interrupt_target_command (char *args, int from_tty);

/* Local functions: */

static void nofp_registers_info (char *, int);

d75 2
d95 4
d986 1
a986 1
      init_sal (&sal);		/* initialize to zeroes */
d1574 2
a1575 1
  if (DEPRECATED_DO_REGISTERS_INFO_P ())
d1577 1
a1577 1
      DEPRECATED_DO_REGISTERS_INFO (regnum, print_all);
d1732 1
a1732 1
static void
d1894 1
d1896 6
@


1.46.4.1
log
@regbuf
@
text
@a42 1
#include "regbuf.h"
d972 1
a972 1
run_stack_dummy (CORE_ADDR addr, struct regbuf **buffer)
d1045 2
a1046 1
  *buffer = regbuf_dup (stop_registers);
@


1.46.4.2
log
@regbuf->regcache
@
text
@d43 1
a43 1
#include "regcache.h"
d973 1
a973 1
run_stack_dummy (CORE_ADDR addr, struct regcache **buffer)
d1046 1
a1046 1
  *buffer = regcache_dup (stop_registers);
@


1.46.4.3
log
@introduce regcache_move.
Fix cases where normal vs no_passthroug copies didn't reflect the old code.
@
text
@d1046 1
a1046 1
  *buffer = regcache_dup_no_passthrough (stop_registers);
@


1.46.4.4
log
@merge from trunk
@
text
@d1850 1
a1850 1
  gdbarch_print_float_info (current_gdbarch, gdb_stdout, selected_frame);
@


1.45
log
@* frame.h (selected_frame_level): Document as deprecated.
(frame_relative_level): Declare.
* stack.c (frame_relative_level): New function.
(selected_frame_level): Document as deprecated.
(select_frame): Do not set the selected_frame_level.

* stack.c (frame_info, record_selected_frame): Update.
(frame_command, current_frame_command): Update.
(up_silently_base, up_command, down_silently_base): Update.
(down_command): Update.
* inflow.c (kill_command): Update.
* tracepoint.c (finish_tfind_command): Update.
* corelow.c (core_open): Update.
* thread.c (info_threads_command): Update.
(do_captured_thread_select): Update.
* infcmd.c (finish_command): Update.
* breakpoint.c (insert_breakpoints, do_enable_breakpoint): Update.
@
text
@d1684 1
a1684 1
	error ("%.*s: invalid register", end - addr_exp, addr_exp);
@


1.44
log
@* defs.h (read_relative_register_raw_bytes): Delete declaration.
* frame.c (frame_register_read): New function.  Return non-zero on
success.
(read_relative_register_raw_bytes_for_frame): Delete.
(read_relative_register_raw_bytes): Delete.
* frame.h (frame_register_read): Declare.
* d30v-tdep.c: Update Copyright.  Use frame_register_read.
* sh-tdep.c: Ditto.
* infcmd.c (do_registers_info): Ditto.
* hppa-tdep.c: Ditto.
* rs6000-tdep.c: Ditto.
* h8500-tdep.c: Ditto.
* mips-tdep.c: Ditto.
* h8300-tdep.c: Ditto.
* z8k-tdep.c: Ditto.
@
text
@d1292 2
a1293 1
      print_stack_frame (selected_frame, selected_frame_level, 0);
@


1.43
log
@2002-03-27  Michael Snyder  <msnyder@@redhat.com>

	* breakpoint.c (_initialize_breakpoint): Clean up help string.
	* infcmd.c (_initialize_infcmd): Ditto.
	* language.c (_initialize_language): Ditto.
	* symfile.c (_initialize_symfile): Ditto.
	* top.c (_init_main): Ditto.
	* cli/cli-cmds.c (init_cli_cmds): Ditto.
@
text
@d1593 1
a1593 1
      if (read_relative_register_raw_bytes (i, raw_buffer))
@


1.42
log
@* cli/cli-decode.c (set_cmd_completer): New function.
* command.h (set_cmd_completer): Declare.
* cli/cli-decode.h (set_cmd_completer): Ditto.

* breakpoint.c (_initialize_breakpoint): Use set_cmd_completer.
* cli/cli-cmds.c (init_cli_cmds): Ditto.
* win32-nat.c (_initialize_inftarg): Ditto.
* remote-rdi.c (_initialize_remote_rdi): Ditto.
* proc-api.c (_initialize_proc_api): Ditto.
* hppa-tdep.c (_initialize_hppa_tdep): Ditto.
* source.c (_initialize_source): Ditto.
* exec.c (_initialize_exec): Ditto.
* solib.c (_initialize_solib): Ditto.
* top.c (init_main): Ditto.
* tracepoint.c (_initialize_tracepoint): Ditto.
* symfile.c (_initialize_symfile): Ditto.
* printcmd.c (_initialize_printcmd): Ditto.
* infcmd.c (_initialize_infcmd): Ditto.
* corefile.c (_initialize_core): Ditto.
@
text
@d1889 1
a1889 1
		  "Complement to certain \"set\" commands",
@


1.41
log
@* gdbarch.sh (PRINT_FLOAT_INFO): Add rule.
* gdbarch.c gdbarch.h: Regenerate.
* arch-utils.c (default_print_float_info): New function.
* arch-utils.h (default_print_float_info): Prototype it.
* infcmd.c (float_info): Call PRINT_FLOAT_INFO.
* doc/gdbint.texinfo (FLOAT_INFO): Mark as deprecated.
(PRINT_FLOAT_INFO): Document it.

* arm-tdep.c (arm_print_float_info): Renamed from arm_float_info.
* config/arm/tm-arm.h (FLOAT_INFO): Delete.
(PRINT_FLOAT_INFO): Define.
@
text
@d1868 1
a1868 1
  c->completer = filename_completer;
d1875 1
a1875 1
  c->completer = filename_completer;
d1886 1
a1886 1
  c->completer = noop_completer;
d1896 1
a1896 1
  c->completer = noop_completer;
d1904 1
a1904 1
  c->completer = noop_completer;
d1912 1
a1912 1
  c->completer = filename_completer;
d1921 1
a1921 1
  c->completer = noop_completer;
d1977 1
a1977 1
  c->completer = location_completer;
d1984 1
a1984 1
  c->completer = location_completer;
d1995 1
a1995 1
      c->completer = location_completer;
d2016 1
a2016 1
  c->completer = filename_completer;
@


1.40
log
@* cli/cli-decode.c (do_cfunc, set_cmd_cfunc): New functions.
(do_sfunc, set_cmd_sfunc): New functions.

* command.h (struct cmd_list_element): Add field func.
* cli/cli-decode.h (struct cmd_list_element): Ditto.
* command.h (set_cmd_sfunc, set_cmd_cfunc): Declare.
* cli/cli-decode.h: Ditto.

* cli/cli-decode.c (help_cmd): Test for func not cfunc/sfunc.
(help_all, help_cmd_list): Ditto.
(find_cmd, complete_on_cmdlist): Ditto.
* top.c (execute_command): Ditto.

* cli/cli-setshow.c (do_setshow_command): Call func instead of
function.sfunc.

* infcmd.c (notice_args_read): Fix function signature.

* cli/cli-cmds.c (init_cli_cmds): Use set_cmd_sfunc.
* cli/cli-decode.c (add_set_cmd): Ditto.
* utils.c (initialize_utils): Ditto.
* maint.c (_initialize_maint_cmds): Ditto.
* infrun.c (_initialize_infrun): Ditto.
* demangle.c (_initialize_demangler): Ditto.
* remote.c (add_packet_config_cmd): Ditto.
* mips-tdep.c (_initialize_mips_tdep): Ditto.
* cris-tdep.c (_initialize_cris_tdep): Ditto.
* proc-api.c (_initialize_proc_api): Ditto.
* kod.c (_initialize_kod): Ditto.
* valprint.c (_initialize_valprint): Ditto.
* top.c (init_main): Ditto.
* infcmd.c (_initialize_infcmd): Ditto.
* corefile.c (_initialize_core): Ditto.
* arm-tdep.c (_initialize_arm_tdep): Ditto.
* arch-utils.c (initialize_current_architecture): Ditto.
(_initialize_gdbarch_utils): Ditto.
* alpha-tdep.c (_initialize_alpha_tdep): Ditto.

* cli/cli-decode.c (add_cmd): Use set_cmd_cfunc.
* wince.c (_initialize_inftarg): Ditto.
* symfile.c (_initialize_symfile): Ditto.
* mips-tdep.c (_initialize_mips_tdep): Ditto.
* language.c (_initialize_language): Ditto.
* arc-tdep.c (_initialize_arc_tdep): Ditto.
@
text
@d1849 1
a1849 5
#ifdef FLOAT_INFO
  FLOAT_INFO;
#else
  printf_filtered ("No floating point info available for this processor.\n");
#endif
@


1.39
log
@* config/vax/tm-vax.h (INVALID_FLOAT): Move macro from here...
* vax-tdep.c (INVALID_FLOAT): To here.  Document why it is broken.

* rs6000-tdep.c (rs6000_do_registers_info): Delete code wrapped in
#ifdef INVALID_FLOAT.
* infcmd.c (do_registers_info): Ditto.
* values.c (unpack_double): Ditto.  Add comment.

* config/ns32k/tm-umax.h (INVALID_FLOAT): Delete macro that was
already commented out.
@
text
@d251 1
a251 1
notice_args_read (struct cmd_list_element *c)
d1880 1
a1880 1
  c->function.sfunc = notice_args_set;
d1882 1
a1882 1
  c->pre_show_hook = notice_args_read;
@


1.38
log
@* infcmd.c (run_command): Check that the `exec' target layer's BFD
is up-to-date before running the program, not just when a program
exits.

* testsuite/gdb.base/reread.exp: Check that GDB properly re-reads the
executable file when it changes while no inferior is running.
@
text
@d1616 2
a1617 7
#ifdef INVALID_FLOAT
	  if (INVALID_FLOAT (virtual_buffer, REGISTER_VIRTUAL_SIZE (i)))
	    printf_filtered ("<invalid float>");
	  else
#endif
	    val_print (REGISTER_VIRTUAL_TYPE (i), virtual_buffer, 0, 0,
		       gdb_stdout, 0, 1, 0, Val_pretty_default);
@


1.37
log
@Remove else clause to #if UI_OUT.
@
text
@a391 2
  exec_file = (char *) get_exec_file (0);

d397 8
a404 2
  /* The exec file is re-read every time we do a generic_mourn_inferior, so
     we just have to worry about the symbol file.  */
d406 2
@


1.36
log
@s/BIG_ENDIAN/BFD_ENDIAN_BIG/
@
text
@d3 1
a3 1
   1996, 1997, 1998, 1999, 2000, 2001
a39 1
#ifdef UI_OUT
a40 1
#endif
a442 1
#ifdef UI_OUT
a452 11
#else
      puts_filtered ("Starting program: ");
      if (exec_file)
	puts_filtered (exec_file);
      puts_filtered (" ");
      /* We call get_inferior_args() because we might need to compute
	 the value now.  */
      puts_filtered (get_inferior_args ());
      puts_filtered ("\n");
      gdb_flush (gdb_stdout);
#endif
a1135 1
#ifdef UI_OUT
a1136 1
#endif /* UI_OUT */
a1140 1
#ifdef UI_OUT
a1147 5
#else /* UI_OUT */
      printf_filtered ("Value returned is $%d = ", record_latest_value (value));
      value_print (value, gdb_stdout, 0, Val_no_prettyprint);
      printf_filtered ("\n");
#endif /* UI_OUT */
a1155 1
#ifdef UI_OUT
a1159 4
#else /* UI_OUT */
      printf_filtered ("Value returned has type: %s.", TYPE_NAME (value_type));
      printf_filtered (" Cannot determine contents\n");
#endif /* UI_OUT */
a1161 1
#ifdef UI_OUT
a1168 5
#else
      printf_filtered ("Value returned is $%d = ", record_latest_value (value));
      value_print (value, gdb_stdout, 0, Val_no_prettyprint);
      printf_filtered ("\n");
#endif
d1827 1
a1827 1
#ifdef UI_OUT
d1833 1
a1833 1
#endif
@


1.35
log
@	* NEWS: Update for --args.
	* infcmd.c (construct_inferior_arguments): Moved from ...
	* fork-child.c: ... here.
@
text
@d1654 1
a1654 1
	      register int idx = TARGET_BYTE_ORDER == BIG_ENDIAN ? j
@


1.34
log
@	Fix for PR gdb/209, PR gdb/156:
	* gdbarch.c, gdbarch.h: Rebuilt.
	* gdbarch.sh: Added `construct_inferior_arguments'.
	* cli/cli-decode.h (cmd_list_element): Added pre_show_hook.
	Typo fix.
	* cli/cli-setshow.c (do_setshow_command): Call the pre_show_hook.
	* infcmd.c (_initialize_infcmd): Set sfunc on `set args' command.
	(inferior_argc, inferior_argv): New globals.
	(notice_args_set): New function.
	(set_inferior_args): Clear inferior_argc and inferior_argv.
	(set_inferior_args_vector): New function.
	(get_inferior_args): Handle inferior argument vector.
	(run_command): Use get_inferior_args().
	(notice_args_read): New function.
	(_initialize_infcmd): Don't call set_inferior_args.
	* command.h: Typo fix.
	(cmd_list_element): Added pre_show_hook.
	* main.c (captured_main): Added --args option.
	(print_gdb_help): Document --args.
	* inferior.h (construct_inferior_arguments): Declare.
	(set_inferior_args_vector): Likewise.
	* fork-child.c (construct_inferior_arguments): New function.
@
text
@d260 71
@


1.33
log
@s/value_ptr/struct value */
@
text
@d126 6
d208 13
d230 2
d236 25
d380 3
a382 1
      ui_out_field_string (uiout, "infargs", inferior_args);
d390 3
a392 1
      puts_filtered (inferior_args);
d398 3
a400 1
  target_create_inferior (exec_file, inferior_args,
a1839 1
  add_show_from_set (c, &showlist);
d1841 3
a2008 1
  set_inferior_args (xstrdup (""));	/* Initially no args */
@


1.32
log
@Approved by kev@@cygnus.com
ChangeLog entry:

	2001-11-01  Fred Fish  <fnf@@redhat.com>

	* coff-solib.c (coff_solib_add): Add new readsyms arg.
	* irix5-nat.c (solib_add): Ditto.
	* osfsolib.c (solib_add): Ditto.
	* pa64solib.c (pa64_solib_add): Ditto.
	* pa64solib.c (add_to_solist): Ditto.
	* pa64solib.c (read_dld_descriptor): Ditto.
	* solib.c (solib_add): Ditto.
	* somsolib.c (som_solib_add): Ditto.
	* win32-nat.c (child_solib_add): Ditto.
	* xcoffsolib.c (solib_add): Ditto.

	* coff-solib.h (coff_solib_add): Add new readsyms arg to prototype.
	* pa64solib.c (add_to_solist): Ditto.
	* pa64solib.c (read_dld_descriptor): Ditto.
	* pa64solib.h (pa64_solib_add): Ditto.
	* solib.h (solib_add): Ditto.
	* somsolib.h (som_solib_add): Ditto.
	* config/i386/tm-cygwin.h (child_solib_add): Ditto.

	* coff-solib.c (coff_solib_add):  If readsyms is zero don't read
	symbols but do any other needed work for shared libs.
	* irix5-nat.c: Ditto.
	* osfsolib.c (solib_add): Ditto.
	* solib.c (solib_add): Ditto.
	* win32-nat.c (child_solib_add): Ditto.
	* xcoffsolib.c (solib_add): Ditto.

	* irix5-nat.c (sharedlibrary_command): Pass 1 as readsyms to
	solib_add to force reading of shared library symbols.
	* osfsolib.c (sharedlibrary_command;): Ditto.
	* pa64solib.c (pa64_solib_sharedlibrary_command): Ditto.
	* solib.c (sharedlibrary_command): Ditto.
	* somsolib.c (som_solib_sharedlibrary_command): Ditto.
	* xcoffsolib.c (sharedlibrary_command): Ditto.

	* coff-solib.c (coff_solib_create_inferior_hook): Call solib_add
	unconditionally with auto_solib_add.
	* irix5-nat.c (solib_create_inferior_hook): Ditto.
	* osfsolib.c (solib_create_inferior_hook): Ditto.
	* solib.c (solib_create_inferior_hook): Ditto.
	* solib-osf.c (osf_solib_create_inferior_hook): Ditto.
	* solib-svr4.c (enable_break): Ditto.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Ditto.

	* corelow.c (solib_add_stub): Add auto_solib_add to args passed
	via SOLIB_ADD.
	* sol-thread.c (sol_thread_attach): Ditto.
	* config/rs6000/nm-rs6000.h (SOLIB_ADD): Ditto.

	* infcmd.c (attach_command): Remove auto_solib_add decl.
	Call SOLIB_ADD directly with auto_solib_add.
	* infrun.c (handle_inferior_event): Ditto.

	* coff-solib.h (SOLIB_ADD): Add readsyms arg.
	* pa64solib.h (SOLIB_ADD): Ditto.
	* solib.h (SOLIB_ADD): Ditto.
	* somsolib.h (SOLIB_ADD): Ditto.
	* config/i386/tm-cygwin.h (SOLIB_ADD): Ditto.

	* fork-child.c (clone_and_follow_inferior): Remove unused
	auto_solib_add decl.

	* pa64solib.c (pa64_solib_add): Call add_to_solist with readsyms.
	(read_dld_descriptor): Ditto.
	(pa64_solib_add): Call read_dld_descriptor with	readsyms.
	(pa64_solib_in_dynamic_linker): Ditto.

	* corelow.c (symfile.h): Need this for auto_solib_add declaration.
	* sol-thread.c (symfile.h): Ditto.

Approved by eliz@@is.elta.co.il
doc/ChangeLog entry:

	2001-11-01  Fred Fish  <fnf@@redhat.com>

	* gdbint.texinfo (SOLIB_ADD): Document additional new
	"readsyms" arg.
@
text
@d1026 1
a1026 1
  register value_ptr value;
@


1.31
log
@* infcmd.c (do_registers_info): Delete code dumping large
registers.  Handled by val_print.
@
text
@a1635 4
#ifdef SOLIB_ADD
  extern int auto_solib_add;
#endif

d1697 3
a1699 6
  if (auto_solib_add)
    {
      /* Add shared library symbols from the newly attached process, if any.  */
      SOLIB_ADD ((char *) 0, from_tty, &current_target);
      re_enable_breakpoints_in_shlibs ();
    }
@


1.30
log
@	The following changes avoid polluting global namespace with the
	`enable' and `disable' identifiers, because some platforms define
	in their system headers symbols with global scope that go by those
	names.

	* breakpoint.h (enum enable_state): Rename from `enum enable'.
	Also rename all the enum members to have the "bp_" prefix.
	(struct breakpoint): Rename the `enable' member to `enable_state'.
	(enum bpdisp): Rename all members to have the "disp_" prefix.

	* breakpoint.c: All users of `enum enable' and `enum bpdisp'
	changed.
	(args_for_catchpoint_enable): Rename the `enable' member to
	`enable_p'.  All users changed.

	* tracepoint.h (enum enable): Remove.
	(struct tracepoint): The member `enabled' is now `int enabled_p'.

	* tracepoint.c: All users of the `enabled' member changed.

	* printcmd.c (struct display): The `status' member is now an int.

	* memattr.h (struct mem_region): Rename the `status' member to
	`enabled_p'.
	(enum enable): Remove.

	* memattr.c: Change all users of the `status' member of struct
	mem_region to use `enabled_p' instead.

	* infcmd.c (run_stack_dummy): Use disp_del instead of del.

	* go32-nat.c: Remove the kludgey work-around for conflicts between
	<dos.h> and "breakpoint.h".
	* tui/tuiSourceWin.c: Use disp_del instead of del.

	* tui/tuiSource.c: Use disp_del instead of del.

	* tui/tuiDisassem.c: Use disp_del instead of del.
@
text
@a1536 12

/* FIXME!  val_print probably can handle all of these cases now...  */

      /* Else if virtual format is too long for printf,
         print in hex a byte at a time.  */
      else if (REGISTER_VIRTUAL_SIZE (i) > (int) sizeof (long))
	{
	  register int j;
	  printf_filtered ("0x");
	  for (j = 0; j < REGISTER_VIRTUAL_SIZE (i); j++)
	    printf_filtered ("%02x", (unsigned char) virtual_buffer[j]);
	}
@


1.29
log
@	* completer.c (gdb_completer_loc_break_characters): New variable.
	(line_completion_function): If we are completing on locations,
	back up the start of word pointer past all characters which can
	appear in a location spec.
	(location_completer): New function.

	* completer.h: Add prototype for location_completer.

	* symtab.c (make_source_files_completion_list)
	(add_filename_to_list, not_interesting_fname): New functions.
	(filename_seen): New function, body extracted from
	output_source_filename.
	(output_source_filename): Call filename_seen to check if the file
	was already printed.
	(make_symbol_completion_list): If TEXT includes a
	double-quoted string, return an empty list, not NULL.
	(make_file_symbol_completion_list): New function, similar to
	make_symbol_completion_list but with an additional argument
	SRCFILE.

	* symtab.h (make_file_symbol_completion_list)
	(make_source_files_completion_list): Add prototypes.

	* breakpoint.c (_initialize_breakpoint): Make location_completer
	be the completion function for all commands which set breakpoints
	and watchpoints.
	(top-level): #include "completer.h".

	* tracepoint.c (_initialize_tracepoint): Make location_completer
	be the completion function for the "trace" command.
	(top-level): #include "completer.h".

	* printcmd.c (_initialize_printcmd): Make location_completer be
	the completion function for the "print", "inspect", "call", and
	"disassemble" commands.
	(top-level): #include "completer.h".

	* infcmd.c (_initialize_infcmd): Make location_completer be the
	completion function for the "go", "jump", and "until" commands.
	(top-level): #include "completer.h".
@
text
@d897 1
a897 1
      bpt->disposition = del;
@


1.29.4.1
log
@	The following changes avoid polluting global namespace with the
	`enable' and `disable' identifiers, because some platforms define
	in their system headers symbols with global scope that go by those
	names.

	* breakpoint.h (enum enable_state): Rename from `enum enable'.
	Also rename all the enum members to have the "bp_" prefix.
	(struct breakpoint): Rename the `enable' member to `enable_state'.
	(enum bpdisp): Rename all members to have the "disp_" prefix.

	* breakpoint.c: All users of `enum enable' and `enum bpdisp'
	changed.
	(args_for_catchpoint_enable): Rename the `enable' member to
	`enable_p'.  All users changed.

	* tracepoint.h (enum enable): Remove.
	(struct tracepoint): The member `enabled' is now `int enabled_p'.

	* tracepoint.c: All users of the `enabled' member changed.

	* printcmd.c (struct display): The `status' member is now an int.

	* memattr.h (struct mem_region): Rename the `status' member to
	`enabled_p'.
	(enum enable): Remove.

	* memattr.c: Change all users of the `status' member of struct
	mem_region to use `enabled_p' instead.

	* infcmd.c (run_stack_dummy): Use disp_del instead of del.

	* go32-nat.c: Remove the kludgey work-around for conflicts between
	<dos.h> and "breakpoint.h".

	* tui/tuiSourceWin.c: Use disp_del instead of del.

	* tui/tuiSource.c: Use disp_del instead of del.

	* tui/tuiDisassem.c: Use disp_del instead of del.
@
text
@d897 1
a897 1
      bpt->disposition = disp_del;
@


1.29.2.1
log
@Typesystem work initial import.
Note that this currently isn't building, i'm in the middle of converting make_function_type/lookup_function_type
@
text
@a44 1
#include "completer.h"
d1708 1
a1708 1
	  symbol_file_command(full_exec_path, from_tty);
@


1.28
log
@2001-05-16  Michael Snyder  <msnyder@@redhat.com>

	* infcmd.c (do_registers_info): Move alloca outside of loop.
@
text
@d39 1
d1798 2
a1799 2
  c= add_com ("tty", class_run, tty_command,
	      "Set terminal for future runs of program being debugged.");
d1903 2
a1904 2
  add_com ("until", class_run, until_command,
	   "Execute until the program reaches a source line greater than the current\n\
d1907 1
d1910 2
a1911 2
  add_com ("jump", class_run, jump_command,
	   "Continue program being debugged at specified line or address.\n\
d1914 1
d1917 3
a1919 2
    add_com ("go", class_run, go_command,
	     "Usage: go <location>\n\
d1925 2
@


1.27
log
@Phase 1 of the ptid_t changes.
@
text
@d1470 2
a1474 3
      char *raw_buffer = (char*) alloca (MAX_REGISTER_RAW_SIZE);
      char *virtual_buffer = (char*) alloca (MAX_REGISTER_VIRTUAL_SIZE);

@


1.26
log
@* arch-utils.c (#include "gdbthread.h"): Removed.
(#include "symfile.h"): Removed.
(XMALLOC): Removed unused macro.
* breakpoint.c (tbreak_command): Removed local declaration.
(awatch_command, do_enable_breakpoint, set_breakpoint_count):
Remove duplicate declarations.
(bpstat_should_step, bpstat_have_active_hw_watchpoints)
(remove_solib_event_breakpoints): Fix indentation botch.
* c-typeprint.c (#include "command.h"): Removed.
(#include "gdbcmd.h"): Removed.
* ch-exp.c (ch_terminal_match_float_literal, parse_expr)
(parse_primval, parse_untyped_expr, parse_opt_untyped_expr):
Removed duplicate declarations.
* ch-typeprint.c (#include "command.h"): Removed.
(#include "gdbcmd.h"): Removed.
* corefile.c (#include "frame.h"): Removed
(#include "symfile.h"): Removed.
(#include "language.h"): Removed.
* dbxread.c (#include "command.h"): Removed.
* environ.c (#include "gdbcore.h"): Removed.
* event-loop.c (#include "top.h"): Removed.
* f-typeprint.c (#include "command.h"): Removed.
(#include "gdbcmd.h"): Removed.
(#include "language.h"): Removed.
(#include "typeprint.h"): Removed.
(#include "frame.h"): Removed.
* gdbtypes.h (print_type_scalar): Removed declaration.
* infcmd.c (#include "completer.h"): Removed.
* language.c (#include "frame.h"): Removed.
* m2-typeprint.c (#include "command.h"): Removed.
(#include "gdbcmd.h"): Removed.
(#include "language.h"): Removed.
* m2-valprint.c (#include "valprint.h"): Removed.
* p-typeprint.c (#include "command.h"): Removed.
(#include "gdbcmd.h"): Removed.
* p-valprint.c (#include "typeprint.h"): Removed.
* parse.c (#include "linespec.h"): Removed.
* regcache.c (#include "frame.h"): Removed.
* remote.c (#include "frame.h"): Removed.
(getpkt_sane): Make static.
* source.c (#include "completer.h"): Removed.
* stack.c (#include "symfile.h"): Removed.
(#include "objfiles.h"): Removed.
* symfile.c (#include "completer.h"): Removed.
* tracepoint.c (#include "completer.h"): Removed.
* values.c (#include "frame.h"): Removed.
* varobj.c (#include "valprint.h"): Removed.
* wrapper.c (#include "frame.h"): Removed.

* memattr.c (create_mem_region): Removed unused variable.
* remote-nrom.c: Removed spurious semicolon after init_nrom_ops.
-------------------------------------------------------------------
@
text
@d134 1
a134 1
int inferior_pid;
d261 1
a261 1
  if (inferior_pid != 0 && target_has_execution)
d1693 1
a1693 1
      exec_file = target_pid_to_exec_file (inferior_pid);
d1723 1
a1723 1
  target_post_attach (inferior_pid);
@


1.25
log
@* frame.h (SIZEOF_FRAME_SAVED_REGS): Report an error if macro
already defined.

From 2000-08-25 Stephane Carrez <Stephane.Carrez@@worldnet.fr>:
* stabsread.c (define_symbol): A parameter ('R'), a local ('r'),
or a reference ('a') can be in a pseudo register.
* infcmd.c (do_registers_info): Must take into account the pseudo
registers to print their value.
(registers_info): Likewise.
* stack.c (frame_info): Likewise.
* frame.h (SIZEOF_FRAME_SAVED_REGS): Save the pseudo registers.
@
text
@a43 1
#include "completer.h"
@


1.24
log
@Eliminate ARCH_NUM_REGS.
@
text
@d1470 1
a1470 1
  int numregs = NUM_REGS;
d1594 1
a1594 1
      numregs = NUM_REGS;
@


1.23
log
@Update/correct copyright notices.
@
text
@d1470 1
a1470 1
  int numregs = ARCH_NUM_REGS;
d1594 1
a1594 1
      numregs = ARCH_NUM_REGS;
@


1.22
log
@	* demangle.c (demangling_style_names): New variable.
	(_initialize_demangler): Fill demangling_style_names with the
	names of known demangling styles from libiberty_demanglers[].  Use
	add_set_enum_cmd instead of add_set_cmd, to get completion on
	demangling style names.

	* proc-api.c (_initialize_proc_api): Make `procfs-file' use
	file-name completion.

	* remote-rdi.c (_initialize_remote_rdi): Ditto for `rdilogfile'.

	* solib.c (_initialize_solib): Ditto for `solib-search-path' and
	`solib-absolute-prefix'.

	* tracepoint.c (_initialize_tracepoint): Ditto for
	`save-tracepoints'.

	* win32-nat.c (_initialize_inftarg): Ditto for `dll-symbols'.

	* cli/cli-cmds.c (init_cli_cmds): Make `shell' and `make' use
	file-name completion.

	* infcmd.c (_initialize_infcmd): Make the following commands use
	the file-name completer: `tty', `args', `path', `paths', and
	`run'.
@
text
@d2 2
a3 1
   Copyright 1986, 87, 88, 89, 91, 92, 95, 96, 1998, 1999, 2001
@


1.21
log
@Add __FILE__ and __LINE__ parameter to internal_error() /
internal_verror().
@
text
@d43 1
d1798 7
a1804 7
  add_com ("tty", class_run, tty_command,
	   "Set terminal for future runs of program being debugged.");

  add_show_from_set
    (add_set_cmd ("args", class_run, var_string_noescape,
		  (char *) &inferior_args,
		  "Set argument list to give program being debugged when it is started.\n\
d1806 3
a1808 2
		  &setlist),
     &showlist);
d1836 2
a1837 2
  add_com ("path", class_files, path_command,
	   "Add directory DIR(s) to beginning of search path for object files.\n\
d1842 1
d1934 1
a1934 1
  add_com ("run", class_run, run_command,
d1941 1
@


1.20
log
@2001-02-06  Michael Snyder  <msnyder@@makita.cygnus.com>
	Submitted by Paul Hilfinger (hilfingr@@gnat.com)
	and Andrei Petrov (and@@genesyslab.com).
	* findvar.c: Buffers of size MAX_REGISTER_RAW_SIZE or REGISTER_BYTES
	must be allocated dynamically, since these are no longer constants.
	* infcmd.c: Ditto.
	* regcache.c: Ditto.
	* remote.c: Ditto.
	* sol-thread.c: Ditto.
	* valops.c: Ditto.
	* config/sparc/sun4sol2.mh (MH_CFLAGS): Add -I/usr/include/v9, as a
	work-around for a missing Sun header file in solaris for sparc64.
@
text
@d1109 2
a1110 1
	internal_error ("finish_command: function has no target type");
d1237 2
a1238 1
	    internal_error ("finish_command: function has no target type");
@


1.19
log
@Replace strsave() with xstrdup().
@
text
@d1470 2
a1471 2
      char raw_buffer[MAX_REGISTER_RAW_SIZE];
      char virtual_buffer[MAX_REGISTER_VIRTUAL_SIZE];
@


1.18
log
@2001-01-26  Fernando Nasser  <fnasser@@redhat.com>

        Fix double parsing of filenames passed as command line arguments
        to GDB (causes weird handling of escape characters).
        Also, remove dependencies on the CLI from libgdb.
        * call-cmds.h: Remove declaration of exec_file_command().
        * gdbcore.h: Remove declaration of exec_file_command().
        Add declarations for exec_open() and exec_file_clear().
        * symfile.h: Add declarations for symbol_file_add_main() and
        symbol_file_clear().
        * exec.c (exec_open): New function. Implements to_open for exec
        targets.
        (exec_file_clear): New function. Makes GDB forget about a previously
        specified executable file.
        (exec_file_attach): Move parsing of arguments from here ...
        (exec_file_command): ... to here.
        (init_exec_ops): Use exec_open(), not exec_file_command() to
        implement to_open for exec targets.
        * symfile.c (symbol_file_add_main): New function. Call symbol_file_add()        with default values.  Used when the file name has already been parsed.
        (symbol_file_clear): New function. Makes GDB forget about previously
        read symbols.
        (symbol_file_command): Call the above function instead of inline code.
        * main.c: Include "symfile.h" and "gdbcore.h" instead of the deprecated
        "call-cmds.h".
        (captured_main): Call exec_file_attach() and symbol_file_add_main()
        instead of exec_file_command() and symbol_file_command().
        (captured_main): Add comment.
        * corefile.c: Include "symfile.h".
        (core_file_command): Call symbol_file_add_main() instead of
        symbol_file_command().
        (reopen_exec_file): Call exec_open() instead of exec_file_command().
        * infcmd.c: Include "symfile.h".
        (attach_command): Call symbol_file_add_main() instead of
        symbol_file_command().
        * infrun.c: Remove comment about the inclusion of "symfile.h",
        not any longer appropriate.
        (follow_exec): Call symbol_file_add_main() instead of
        symbol_file_command().
        * remote-es.c: Include "symfile.h".
        (es1800_load): Call symbol_file_add_main() instead of
        symbol_file_command().
        * remote-vx.c: Remove comment about the inclusion of "symfile.h",
        not any longer appropriate.
        (vx-wait): Call symbol_file_add_main() instead of
        symbol_file_command().
        * solib-svr4.c (open_symbol_file_object): Call symbol_file_add_main()
        instead of symbol_file_command().
        * v850ice.c (ice_file): Call exec_open(), exec_file_attach() and
        symbol_file_add_main() instead of exec_file_command() and
        symbol_file_command().
        * Makefile.in: Update dependencies.
@
text
@d2 1
a2 1
   Copyright 1986, 87, 88, 89, 91, 92, 95, 96, 1998, 1999
d1439 1
a1439 1
  exec_path = strsave (env);
@


1.17
log
@2001-01-24  Fernando Nasser  <fnasser@@redhat.com>

        * infcmd.c (get_inferior_args, set_inferior_args): Accessor functions
        for the inferior program arguments.
        (run_command, run_no_args_command, init_infcmd)): Use accessor
        functions to set the inferior program arguments.
        * inferior.h: Add definitions to the accessor functions above.
@
text
@d32 1
d1705 1
a1705 1
	  symbol_file_command (full_exec_path, from_tty);
@


1.16
log
@* infcmd.c (print_return_value): Restore another space lost by
switch to UIOUT. ``$NN='' should be ``$NN =''.
@
text
@d194 17
a299 1
      char *cmd;
d318 2
a319 3
	  cmd = concat ("set args ", args, NULL);
	  make_cleanup (xfree, cmd);
	  execute_command (cmd, from_tty);
d353 2
a354 2
  execute_command ("set args", from_tty);
  run_command ((char *) NULL, from_tty);
d1962 1
a1962 1
  inferior_args = savestring ("", 1);	/* Initially no args */
@


1.15
log
@Restore missing space lost when switching to UI_OUT.
@
text
@d1052 1
a1052 1
      ui_out_text (uiout, "= ");
@


1.14
log
@Replace free() with xfree().
@
text
@d1020 1
a1020 1
      ui_out_text (uiout, "= ");
@


1.13
log
@* inferior.h (step_over_calls_kind): New enum to clarify values in
step_over_calls.
* infcmd.c (step_over_calls): Change definition.
(step_1): Use new enum values in relation to step_over_calls.
(step_once): Ditto.
(until_next_command): Ditto.
* infrun.c (clear_proceed_status): Ditto.
(handle_inferior_event): Ditto.
* inferior.h (step_stop_if_no_debug): New variable.
* infrun.c (step_stop_if_no_debug): Declare.
(handle_inferior_event): Stop the step command if we entered a function without
line info.
(_initialize_infrun): New command 'set step-mode' to control the step command.
* infcmd.c (step_once): Switch to stepi mode if there is no line info
(and switching is enabled).
@
text
@d303 1
a303 1
	  make_cleanup (free, cmd);
d699 1
a699 1
  free ((PTR) sals.sals);
d1378 1
a1378 1
  free (var);
d1426 1
a1426 1
  free (exec_path);
@


1.12
log
@	* eval.c (parse_and_eval_long): New function.
	* value.h: Declare it.

	* breakpoint.c (breakpoints_info, maintenance_info_breakpoints):
	Call parse_and_eval_long, not parse_and_eval_address.
	* command.c (do_setshow_command): Ditto.
	* infcmd.c (step_1, signal_command, continue_command): Ditto.
	* infrun.c (signals_info): Ditto.
	* stack.c (set_backtrace_limit_command, backtrace_command_1,
	up_silently_base, down_silently_base): Ditto.
	* tracepoints.c (tracepoints_info, trace_find_command,
 	trace_find_tracepoint_command): Ditto.
	* valprint.c (set_radix): Ditto.
	* values.c (show_values): Ditto.
@
text
@d181 1
a181 5
/* 1 means step over all subroutine calls.
   0 means don't step over calls (used by stepi).
   -1 means step over calls to undebuggable functions.  */

int step_over_calls;
d512 1
a512 1
		step_over_calls = 0;
d516 1
a516 1
	    step_over_calls = 1;
d606 7
a612 1
	  if (step_range_end == 0)
d633 1
a633 1
	    step_over_calls = 0;
d637 1
a637 1
	step_over_calls = 1;
d963 1
a963 1
  step_over_calls = 1;
@


1.11
log
@Corrected spelling error in comment: continaution ->continuation.
@
text
@d384 1
a384 1
			    parse_and_eval_address (proc_count_exp) - 1,
d468 1
a468 1
  count = count_string ? parse_and_eval_address (count_string) : 1;
d780 1
a780 1
      int num = parse_and_eval_address (signum_exp);
@


1.10
log
@2000-08-01  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * gdbarch.sh: Multiarch DO_REGISTERS_INFO macro.
        * gdbarch.h, gdbarch.c: Regenerate.
        * infcmd.c (do_registers_info): Make not static and
        unconditionalize.
        * inferior.h (do_registers_info): Export.
@
text
@d1070 1
a1070 1
   cmd_continaution pointer. */
@


1.9
log
@Protoization.
@
text
@a74 4
#if !defined (DO_REGISTERS_INFO)
static void do_registers_info (int, int);
#endif

d1444 1
a1444 5
#if !defined (DO_REGISTERS_INFO)

#define DO_REGISTERS_INFO(regnum, fp) do_registers_info(regnum, fp)

static void
a1546 1
#endif /* no DO_REGISTERS_INFO.  */
@


1.8
log
@* infcmd.c (attach_command): Move "stop_soon_quietly" setting inside
ATTACH_NO_WAIT conditional since we are not about to stop soon if we're not
calling wait_for_inferior.
@
text
@d208 1
a208 2
strip_bg_char (args)
     char **args;
d235 1
a235 3
tty_command (file, from_tty)
     char *file;
     int from_tty;
d244 1
a244 3
run_command (args, from_tty)
     char *args;
     int from_tty;
d344 1
a344 3
run_no_args_command (args, from_tty)
     char *args;
     int from_tty;
d352 1
a352 3
continue_command (proc_count_exp, from_tty)
     char *proc_count_exp;
     int from_tty;
d410 1
a410 3
step_command (count_string, from_tty)
     char *count_string;
     int from_tty;
d419 1
a419 3
next_command (count_string, from_tty)
     char *count_string;
     int from_tty;
d428 1
a428 3
stepi_command (count_string, from_tty)
     char *count_string;
     int from_tty;
d435 1
a435 3
nexti_command (count_string, from_tty)
     char *count_string;
     int from_tty;
d447 1
a447 4
step_1 (skip_subroutines, single_inst, count_string)
     int skip_subroutines;
     int single_inst;
     char *count_string;
d561 1
a561 2
step_1_continuation (arg)
     struct continuation_arg *arg;
d663 1
a663 3
jump_command (arg, from_tty)
     char *arg;
     int from_tty;
d751 1
a751 3
go_command (line_no, from_tty)
     char *line_no;
     int from_tty;
d766 1
a766 3
signal_command (signum_exp, from_tty)
     char *signum_exp;
     int from_tty;
d813 1
a813 2
breakpoint_auto_delete_contents (arg)
     PTR arg;
d841 1
a841 3
run_stack_dummy (addr, buffer)
     CORE_ADDR addr;
     char *buffer;
d929 1
a929 2
until_next_command (from_tty)
     int from_tty;
d975 1
a975 3
until_command (arg, from_tty)
     char *arg;
     int from_tty;
d1076 1
a1076 2
finish_command_continuation (arg)
     struct continuation_arg *arg;
d1119 1
a1119 3
finish_command (arg, from_tty)
     char *arg;
     int from_tty;
d1244 1
a1244 3
program_info (args, from_tty)
     char *args;
     int from_tty;
d1291 1
a1291 3
environment_info (var, from_tty)
     char *var;
     int from_tty;
d1322 1
a1322 3
set_environment_command (arg, from_tty)
     char *arg;
     int from_tty;
d1384 1
a1384 3
unset_environment_command (var, from_tty)
     char *var;
     int from_tty;
d1406 1
a1406 3
path_info (args, from_tty)
     char *args;
     int from_tty;
d1416 1
a1416 3
path_command (dirname, from_tty)
     char *dirname;
     int from_tty;
d1453 1
a1453 3
do_registers_info (regnum, fpregs)
     int regnum;
     int fpregs;
d1558 1
a1558 3
registers_info (addr_exp, fpregs)
     char *addr_exp;
     int fpregs;
d1605 1
a1605 3
all_registers_info (addr_exp, from_tty)
     char *addr_exp;
     int from_tty;
d1611 1
a1611 3
nofp_registers_info (addr_exp, from_tty)
     char *addr_exp;
     int from_tty;
d1634 1
a1634 3
attach_command (args, from_tty)
     char *args;
     int from_tty;
d1731 1
a1731 3
detach_command (args, from_tty)
     char *args;
     int from_tty;
d1746 1
a1746 3
interrupt_target_command_wrapper (args, from_tty)
     char *args;
     int from_tty;
d1752 1
a1752 3
interrupt_target_command (args, from_tty)
     char *args;
     int from_tty;
d1763 1
a1763 3
float_info (addr_exp, from_tty)
     char *addr_exp;
     int from_tty;
d1774 1
a1774 3
unset_command (args, from_tty)
     char *args;
     int from_tty;
d1782 1
a1782 1
_initialize_infcmd ()
@


1.7
log
@PARAMS removal.
@
text
@a1723 1
  stop_soon_quietly = 1;
d1728 1
@


1.6
log
@Purge (almost) make_cleanup_func.
@
text
@d45 1
a45 1
void nofp_registers_info PARAMS ((char *, int));
d47 1
a47 1
void all_registers_info PARAMS ((char *, int));
d49 1
a49 1
void registers_info PARAMS ((char *, int));
d53 1
a53 1
void continue_command PARAMS ((char *, int));
d57 1
a57 1
static void finish_command_continuation PARAMS ((struct continuation_arg *));
d59 1
a59 1
static void until_next_command PARAMS ((int));
d61 1
a61 1
static void until_command PARAMS ((char *, int));
d63 1
a63 1
static void path_info PARAMS ((char *, int));
d65 1
a65 1
static void path_command PARAMS ((char *, int));
d67 1
a67 1
static void unset_command PARAMS ((char *, int));
d69 1
a69 1
static void float_info PARAMS ((char *, int));
d71 1
a71 1
static void detach_command PARAMS ((char *, int));
d76 1
a76 1
static void do_registers_info PARAMS ((int, int));
d79 1
a79 1
static void unset_environment_command PARAMS ((char *, int));
d81 1
a81 1
static void set_environment_command PARAMS ((char *, int));
d83 1
a83 1
static void environment_info PARAMS ((char *, int));
d85 1
a85 1
static void program_info PARAMS ((char *, int));
d87 1
a87 1
static void finish_command PARAMS ((char *, int));
d89 1
a89 1
static void signal_command PARAMS ((char *, int));
d91 1
a91 1
static void jump_command PARAMS ((char *, int));
d93 1
a93 1
static void step_1 PARAMS ((int, int, char *));
d97 1
a97 1
void nexti_command PARAMS ((char *, int));
d99 1
a99 1
void stepi_command PARAMS ((char *, int));
d101 1
a101 1
static void next_command PARAMS ((char *, int));
d103 1
a103 1
static void step_command PARAMS ((char *, int));
d105 1
a105 1
static void run_command PARAMS ((char *, int));
d107 1
a107 1
static void run_no_args_command PARAMS ((char *args, int from_tty));
d109 1
a109 1
static void go_command PARAMS ((char *line_no, int from_tty));
d111 1
a111 1
static int strip_bg_char PARAMS ((char **));
d113 1
a113 1
void _initialize_infcmd PARAMS ((void));
d117 1
a117 1
static void breakpoint_auto_delete_contents PARAMS ((PTR));
@


1.5
log
@Cleanup delete_breakpoint cleanups.
@
text
@d458 6
d498 1
a498 2
	cleanups = make_cleanup ((make_cleanup_func) disable_longjmp_breakpoint,
				 0);
d500 1
a500 1
        make_exec_cleanup ((make_cleanup_func) disable_longjmp_breakpoint, 0);
@


1.4
log
@From Peter Schauer: Add `info r' alias for `info registers'.
@
text
@d1197 1
a1197 1
    old_chain = make_cleanup ((make_cleanup_func) delete_breakpoint, breakpoint);
d1199 1
a1199 1
    old_chain = make_exec_cleanup ((make_cleanup_func) delete_breakpoint, breakpoint);
@


1.3
log
@2000-03-30  Michael Snyder  <msnyder@@cleaver.cygnus.com>

        * defs.h (struct continuation_arg): make 'data' a union, to avoid
        casting problems when int and pointer are not the  same size.
        * event-top.c (command_handler): use data as a union.
        (command_line_handler_continuation): ditto.
        * infcmd.c (step_1_continuation): use data as a union.  Re-indent.
        (step_once): ditto.  (finish_command_continuation): ditto.
        (finish_command): ditto.
        * breakpoint.c (until_break_command): use data as a union.
        (until_break_command_continuation): ditto.
        * utils.c (add_intermediate_continuation): fix typo in comment.
@
text
@d2001 1
@


1.3.2.1
log
@From Peter Schauer: Add `info r' alias for `info registers'.
@
text
@a2000 1
  add_info_alias ("r", "registers", 1);
@


1.2
log
@2000-02-23  Fernando Nasser  <fnasser@@cygnus.com>

        * infcmd.c (run_stack_dummy): Do not pop frame on random signal.
        * valops.c (_initialize_valops): Add command "set unwindonsignal".
        (hand_function_call): Test for unwind_on_signal and act accordingly.
@
text
@d579 13
a591 13
 int count;
 int skip_subroutines;
 int single_inst;

 skip_subroutines = (int) arg->data;
 single_inst = (int) (arg->next)->data;
 count = (int) ((arg->next)->next)->data;

 if (stop_step)
   {
     /* FIXME: On nexti, this may have already been done (when we hit the
	step resume break, I think).  Probably this should be moved to
	wait_for_inferior (near the top).  */
d593 1
a593 1
     SHIFT_INST_REGS ();
d595 5
a599 5
     step_once (skip_subroutines, single_inst, count - 1);
   }
 else
   if (!single_inst || skip_subroutines)
     do_exec_cleanups (ALL_CLEANUPS);
d665 1
a665 1
      arg1->data = (PTR) skip_subroutines;
d667 1
a667 1
      arg2->data = (PTR) single_inst;
d669 1
a669 1
      arg3->data = (PTR) count;
d1111 3
a1113 3
  breakpoint = (struct breakpoint *) arg->data;
  function = (struct symbol *) (arg->next)->data;
  cleanups = (struct cleanup *) (arg->next->next)->data;
d1228 3
a1230 3
      arg1->data = (PTR) breakpoint;
      arg2->data = (PTR) function;
      arg3->data = (PTR) old_chain;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1986, 87, 88, 89, 91, 92, 95, 96, 1998 
d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d37 5
d55 4
d73 2
d94 2
d107 6
a116 1
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET
a117 1
#endif
d172 2
a173 2
CORE_ADDR step_range_start; /* Inclusive */
CORE_ADDR step_range_end; /* Exclusive */
d201 32
a233 1

d257 2
a258 2
      if (
	  !query ("The program being debugged has been started already.\n\
d289 6
a294 1
  if (args)
d297 22
a318 3
      cmd = concat ("set args ", args, NULL);
      make_cleanup (free, cmd);
      execute_command (cmd, from_tty);
d323 3
a325 1
      puts_filtered("Starting program: ");
d327 12
a338 4
	puts_filtered(exec_file);
      puts_filtered(" ");
      puts_filtered(inferior_args);
      puts_filtered("\n");
d340 1
d353 2
a354 2
  execute_command("set args", from_tty);
  run_command((char *)NULL, from_tty);
d356 1
a357 1

d363 1
d366 16
a381 1
  /* If have argument, set proceed count of breakpoint we stopped at.  */
d383 2
d466 1
d469 17
d488 1
a488 1
  if (!single_inst || skip_subroutines) /* leave si command alone */
d490 6
a495 3
      enable_longjmp_breakpoint();
      cleanups = make_cleanup ((make_cleanup_func) disable_longjmp_breakpoint, 
                               0);
d498 120
a617 1
  for (; count > 0; count--)
d622 1
a622 1
      if (!frame)			/* Avoid coredump here.  Why tho? */
d627 1
a627 1
      if (! single_inst)
d658 13
a671 9
      if (! stop_step)
	break;

      /* FIXME: On nexti, this may have already been done (when we hit the
	 step resume break, I think).  Probably this should be moved to
	 wait_for_inferior (near the top).  */
#if defined (SHIFT_INST_REGS)
      SHIFT_INST_REGS();
#endif
d673 1
a674 3
  if (!single_inst || skip_subroutines)
    do_cleanups(cleanups);
}
d688 1
d692 17
d719 1
a719 1
  free ((PTR)sals.sals);
d724 1
a724 1
  resolve_sal_pc (&sal);			/* May error out */
d739 1
a739 1
  if (sfn != NULL) 
d742 1
a742 1
      if (section_is_overlay (SYMBOL_BFD_SECTION (sfn)) && 
a752 1

d765 1
a766 1

d769 1
a769 1
go_command(line_no, from_tty)
d773 2
a774 2
  if (line_no == (char *)NULL || !*line_no)
    printf_filtered(GO_USAGE);
d777 2
a778 2
      tbreak_command(line_no, from_tty);
      jump_command(line_no, from_tty);
d781 1
a782 1

a833 2
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET

d838 1
a838 1
  breakpoint_auto_delete (*(bpstat *)arg);
a840 1
#endif	/* CALL_DUMMY_BREAKPOINT_OFFSET */
d855 7
a861 6
   Otherwise, run_stack-dummy returns 1 (the frame will eventually be popped
   when we do hit that breakpoint).  */

/* DEBUG HOOK:  4 => return instead of letting the stack dummy run.  */

static int stack_dummy_testing = 0;
d866 1
a866 1
     char buffer[REGISTER_BYTES];
d869 1
d873 2
a874 1
  if (stack_dummy_testing & 4)
d876 36
a911 2
      POP_FRAME;
      return(0);
a912 37
#ifdef CALL_DUMMY_BREAKPOINT_OFFSET
  {
    struct breakpoint *bpt;
    struct symtab_and_line sal;

    INIT_SAL (&sal);	/* initialize to zeroes */
#if CALL_DUMMY_LOCATION != AT_ENTRY_POINT
    sal.pc = addr - CALL_DUMMY_START_OFFSET + CALL_DUMMY_BREAKPOINT_OFFSET;
#else
    sal.pc = CALL_DUMMY_ADDRESS ();
#endif
    sal.section = find_pc_overlay (sal.pc);

    /* Set up a FRAME for the dummy frame so we can pass it to
       set_momentary_breakpoint.  We need to give the breakpoint a
       frame in case there is only one copy of the dummy (e.g.
       CALL_DUMMY_LOCATION == AFTER_TEXT_END).  */
    flush_cached_frames ();
    set_current_frame (create_new_frame (read_fp (), sal.pc));

    /* If defined, CALL_DUMMY_BREAKPOINT_OFFSET is where we need to put
       a breakpoint instruction.  If not, the call dummy already has the
       breakpoint instruction in it.

       addr is the address of the call dummy plus the CALL_DUMMY_START_OFFSET,
       so we need to subtract the CALL_DUMMY_START_OFFSET.  */
    bpt = set_momentary_breakpoint (sal,
				    get_current_frame (),
				    bp_call_dummy);
    bpt->disposition = del;

    /* If all error()s out of proceed ended up calling normal_stop (and
       perhaps they should; it already does in the special case of error
       out of resume()), then we wouldn't need this.  */
    make_cleanup (breakpoint_auto_delete_contents, &stop_bpstat);
  }
#endif /* CALL_DUMMY_BREAKPOINT_OFFSET.  */
d916 4
d921 4
d929 6
d936 1
a936 1
    return 1;
d938 1
a938 1
  /* On return, the stack dummy has been popped already.  */
d940 1
a940 1
  memcpy (buffer, stop_registers, sizeof stop_registers);
d961 1
a961 1
 
d972 1
a972 1
  
d976 1
a976 1
      
d979 1
a979 1
      
d986 1
a986 1
      
d990 1
a990 1
  
d996 1
a996 1
  
d1000 1
a1000 1
static void 
d1005 2
d1009 18
d1033 111
d1157 20
d1196 4
a1199 1
  old_chain = make_cleanup ((make_cleanup_func) delete_breakpoint, breakpoint);
d1213 22
a1234 1
  proceed_to_finish = 1;		/* We want stop_registers, please... */
d1237 4
a1240 3
  /* Did we stop at our breakpoint? */
  if (bpstat_find_breakpoint(stop_bpstat, breakpoint) != NULL
      && function != 0)
a1241 4
      struct type *value_type;
      register value_ptr val;
      CORE_ADDR funcaddr;
      int struct_return;
d1243 23
a1265 6
      value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (function));
      if (!value_type)
	fatal ("internal: finish_command: function has no target type");
      
      if (TYPE_CODE (value_type) == TYPE_CODE_VOID)
	return;
d1267 3
a1269 35
      funcaddr = BLOCK_START (SYMBOL_BLOCK_VALUE (function));

      struct_return = using_struct_return (value_of_variable (function, NULL),

				   funcaddr,
				   check_typedef (value_type),
		BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));

      if (!struct_return)
      {
        val = value_being_returned (value_type, stop_registers, struct_return);
        printf_filtered ("Value returned is $%d = ", record_latest_value (val));
        value_print (val, gdb_stdout, 0, Val_no_prettyprint);
        printf_filtered ("\n");
      }
      else
      {
       /* elz: we cannot determine the contents of the structure because
	  it is on the stack, and we don't know where, since we did not
	  initiate the call, as opposed to the call_function_by_hand case */
#ifdef VALUE_RETURNED_FROM_STACK
          val = 0;
          printf_filtered ("Value returned has type: %s.", 
			   TYPE_NAME (value_type));
          printf_filtered (" Cannot determine contents\n");
#else
          val = value_being_returned (value_type, stop_registers, 
				      struct_return);
          printf_filtered ("Value returned is $%d = ", 
			   record_latest_value (val));
          value_print (val, gdb_stdout, 0, Val_no_prettyprint);
          printf_filtered ("\n");
#endif
       
      }
a1270 1
  do_cleanups(old_chain);
d1276 2
a1277 2
    char *args;
    int from_tty;
d1281 1
a1281 1
  
d1290 1
a1290 1
		   local_hex_string((unsigned long) stop_pc));
d1296 1
a1296 1
	 isn't as strange as it seems.  */
d1374 2
a1375 2
	 equals, walk forward over the spaces til we see a nonspace 
	 (possibly the equals). */
d1381 1
a1381 1
	 take the char following the spaces.  */
d1405 2
a1406 1
  while (p != arg && (p[-1] == ' ' || p[-1] == '\t')) p--;
d1428 1
a1428 1
	 Ask for confirmation if reading from the terminal.  */
d1473 1
a1473 1
    path_info ((char *)NULL, from_tty);
d1475 1
a1476 1

d1489 1
a1489 1
   to provide that format.  */  
d1509 10
a1518 7
      if (regnum == -1) {
	if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (i)) == TYPE_CODE_FLT && !fpregs)
	  continue;
      } else {
        if (i != regnum)
	  continue;
      }
d1521 1
a1521 1
	 processor, so don't display anything.  */
a1535 1
#ifdef REGISTER_CONVERTIBLE
d1542 4
a1545 3
#endif
	memcpy (virtual_buffer, raw_buffer,
		REGISTER_VIRTUAL_SIZE (i));
d1564 2
a1565 2
		: REGISTER_RAW_SIZE (i) - 1 - j;
	      printf_filtered ("%02x", (unsigned char)raw_buffer[idx]);
d1573 1
a1573 1
	 print in hex a byte at a time.  */
d1579 1
a1579 1
	    printf_filtered ("%02x", (unsigned char)virtual_buffer[j]);
d1588 1
a1588 1
		     gdb_stdout,   0, 1, 0, Val_pretty_default);
d1592 1
a1592 1
	 in addition to printing them as floats.  */
a1601 2
extern int target_map_name_to_register PARAMS ((char *, int));

d1617 1
a1617 1
      DO_REGISTERS_INFO(-1, fpregs);
d1622 1
a1622 1
    {      
d1631 1
a1631 1
      if (regnum >= 0) 
d1637 2
a1638 2
	regnum = atoi (addr_exp);		/* Take a number */
      if (regnum >= numregs)		/* Bad name, or bad number */
d1641 2
a1642 2
found:
      DO_REGISTERS_INFO(regnum, fpregs);
d1647 2
a1648 1
    } while (*addr_exp != '\0');
d1666 1
a1667 1

d1693 2
a1694 2
  char *  exec_file;
  char *  full_exec_path = NULL;
d1696 1
a1696 1
  dont_repeat ();			/* Not for the faint of heart */
d1732 15
a1746 13
  if (! exec_file) {
    exec_file = target_pid_to_exec_file (inferior_pid);
    if (exec_file) {
     /* It's possible we don't have a full path, but rather just a
         filename.  Some targets, such as HP-UX, don't provide the
         full path, sigh.

         Attempt to qualify the filename against the source path.
         (If that fails, we'll just fall back on the original
         filename.  Not much more we can do...)
         */
      if (!source_full_path_of (exec_file, &full_exec_path))
        full_exec_path = savestring (exec_file, strlen (exec_file));
d1748 3
a1750 2
      exec_file_attach (full_exec_path, from_tty);
      symbol_file_command (full_exec_path, from_tty);
a1751 1
  }
d1757 1
a1757 1
      SOLIB_ADD ((char *)0, from_tty, &current_target);
d1763 1
a1763 1
     */
d1767 3
d1788 1
a1788 1
  dont_repeat ();			/* Not for the faint of heart */
d1793 25
d1848 1
a1848 1
  
d1853 3
a1855 3
    (add_set_cmd ("args", class_run, var_string_noescape, 
		  (char *)&inferior_args,
"Set argument list to give program being debugged when it is started.\n\
d1871 1
a1871 1
  
d1873 1
a1873 1
	      "Cancel environment variable VAR for the program.\n\
d1875 1
a1875 1
	   &unsetlist);
d1883 1
a1883 1
	   &setlist);
d1885 1
a1885 1
 
d1887 1
a1887 1
       "Add directory DIR(s) to beginning of search path for object files.\n\
d1894 1
a1894 1
	    "Current search path for finding object files.\n\
d1902 2
a1903 2
 add_com ("attach", class_run, attach_command,
 	   "Attach to a process or file outside of GDB.\n\
d1945 1
a1945 1
    add_com_alias("S", "next", class_run, 1);
d1953 1
a1953 1
"Execute until the program reaches a source line greater than the current\n\
d1957 1
a1957 1
  
d1963 3
a1965 2
  add_com ("go", class_run, go_command,
	   "Usage: go <location>\n\
d1971 1
d1973 1
a1973 1
    add_com_alias("g", "g", class_run, 1);
d1993 4
a1996 1
         "Start debugged program with no arguments.");
d1999 1
a1999 1
    "List of integer registers and their contents, for selected stack frame.\n\
d2003 2
a2004 2
    add_com("lr", class_info, nofp_registers_info,
    "List of integer registers and their contents, for selected stack frame.\n\
d2007 1
a2007 1
    "List of all registers and their contents, for selected stack frame.\n\
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d97 1
d99 1
d573 2
d582 1
d607 1
a607 1
     char *buffer;
d618 37
a654 39
  if (CALL_DUMMY_BREAKPOINT_OFFSET_P)
    {
      struct breakpoint *bpt;
      struct symtab_and_line sal;
      
      INIT_SAL (&sal);	/* initialize to zeroes */
      if (CALL_DUMMY_LOCATION == AT_ENTRY_POINT)
	{
	  sal.pc = CALL_DUMMY_ADDRESS ();
	}
      else
	{
	  sal.pc = addr - CALL_DUMMY_START_OFFSET + CALL_DUMMY_BREAKPOINT_OFFSET;
	}
      sal.section = find_pc_overlay (sal.pc);
      
      /* Set up a FRAME for the dummy frame so we can pass it to
	 set_momentary_breakpoint.  We need to give the breakpoint a
	 frame in case there is only one copy of the dummy (e.g.
	 CALL_DUMMY_LOCATION == AFTER_TEXT_END).  */
      flush_cached_frames ();
      set_current_frame (create_new_frame (read_fp (), sal.pc));
      
      /* If defined, CALL_DUMMY_BREAKPOINT_OFFSET is where we need to put
	 a breakpoint instruction.  If not, the call dummy already has the
	 breakpoint instruction in it.
	 
	 addr is the address of the call dummy plus the CALL_DUMMY_START_OFFSET,
	 so we need to subtract the CALL_DUMMY_START_OFFSET.  */
      bpt = set_momentary_breakpoint (sal,
				      get_current_frame (),
				      bp_call_dummy);
      bpt->disposition = del;
      
      /* If all error()s out of proceed ended up calling normal_stop (and
	 perhaps they should; it already does in the special case of error
	 out of resume()), then we wouldn't need this.  */
      make_cleanup (breakpoint_auto_delete_contents, &stop_bpstat);
    }
d668 1
a668 1
  memcpy (buffer, stop_registers, REGISTER_BYTES);
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d506 1
a506 1
go_command (line_no, from_tty)
d511 1
a511 1
    printf_filtered (GO_USAGE);
d514 2
a515 2
      tbreak_command (line_no, from_tty);
      jump_command (line_no, from_tty);
d1499 2
a1500 3
  if (xdb_commands)
    add_com ("go", class_run, go_command,
	     "Usage: go <location>\n\
a1505 1

d1507 1
a1507 1
    add_com_alias("g", "go", class_run, 1);
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@a92 4
static void run_no_args_command PARAMS ((char *args, int from_tty));

static void go_command PARAMS ((char *line_no, int from_tty));

d1101 1
d1108 3
a1110 4
	{
	  memcpy (virtual_buffer, raw_buffer,
		  REGISTER_VIRTUAL_SIZE (i));
	}
d1166 2
@


1.1.1.5
log
@import gdb-1999-07-05 snapshot
@
text
@a35 1
#include "event-loop.h"
a48 2
static void finish_command_continuation PARAMS ((struct continuation_arg *));

a96 2
static int strip_bg_char PARAMS ((char **));

a186 29
/* This function detects whether or not a '&' character (indicating
   background execution) has been added as *the last* of the arguments ARGS
   of a command. If it has, it removes it and returns 1. Otherwise it
   does nothing and returns 0. */
static int 
strip_bg_char (args)
     char **args;
{
  char *p = NULL;

  if (p = strchr (*args, '&'))
    {
      if (p == (*args + strlen (*args) - 1))
	{
	  if (strlen (*args) >1)
	    {
	      do
		p--;
	      while (*p == ' ' || *p == '\t');
	      *(p + 1) = '\0';
	    }
	  else
	    *args = 0;
	  return 1;
	}
    }
  return 0;
}

d242 1
a242 3
  if (!args)
    sync_execution = 1;
  else
d245 3
a247 22
      int async_exec = strip_bg_char (&args);

      /* If we get a request for running in the bg but the target
         doesn't support it, error out. */
      if (async_p && async_exec && !target_has_async)
	error ("Asynchronous execution not supported on this target.");

      /* If we don't get a request of running in the bg, then we need
	 to simulate synchronous (fg) execution. */
      if (async_p && !async_exec && target_has_async)
	{
	  /* Simulate synchronous execution */
	  sync_execution = 1;
	}

      /* If there were other args, beside '&', process them. */
      if (args)
	{
	  cmd = concat ("set args ", args, NULL);
	  make_cleanup (free, cmd);
	  execute_command (cmd, from_tty);
	}
a280 1
  int async_exec = 0; 
d283 1
a283 3
  /* Find out whether we must run in the background. */
  if (proc_count_exp != NULL)
    async_exec = strip_bg_char (&proc_count_exp);
a284 15
  /* If we must run in the background, but the target can't do it,
     error out. */
  if (async_p && async_exec && !target_has_async)
    error ("Asynchronous execution not supported on this target.");

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously. */
  if (async_p && !async_exec && target_has_async)
    { 
      /* Simulate synchronous execution */
      sync_execution = 1;
    }

  /* If have argument (besides '&'), set proceed count of breakpoint
     we stopped at.  */
d366 1
a366 2
  int async_exec = 0;
  
a367 17

  if (count_string)
    async_exec = strip_bg_char (&count_string);
      
  /* If we get a request for running in the bg but the target
     doesn't support it, error out. */
  if (async_p && async_exec && !target_has_async)
    error ("Asynchronous execution not supported on this target.");

  /* If we don't get a request of running in the bg, then we need
     to simulate synchronous (fg) execution. */
  if (async_p && !async_exec && target_has_async)
    {
      /* Simulate synchronous execution */
      sync_execution = 1;
    }

d446 1
a446 2
  int async_exec = 0;
 
a448 17
  /* Find out whether we must run in the background. */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out. */
  if (async_p && async_exec && !target_has_async)
    error ("Asynchronous execution not supported on this target.");

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously. */
  if (async_p && !async_exec && target_has_async)
    { 
      /* Simulate synchronous execution */
      sync_execution = 1;
    }

d493 1
a733 2
  int async_exec = 0;

a735 18

  /* Find out whether we must run in the background. */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out. */
  if (async_p && async_exec && !target_has_async)
    error ("Asynchronous execution not supported on this target.");

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously. */
  if (async_p && !async_exec && target_has_async)
    { 
      /* Simulate synchronous execution */
      sync_execution = 1;
    }

a741 76

/* Stuff that needs to be done by the finish command after the target
   has stopped.  In asynchronous mode, we wait for the target to stop in
   the call to poll or select in the event loop, so it is impossible to
   do all the stuff as part of the finish_command function itself. The
   only chance we have to complete this command is in
   fetch_inferior_event, which is called by the event loop as soon as it
   detects that the target has stopped. This function is called via the
   cmd_continaution pointer. */
void
finish_command_continuation (arg)
     struct continuation_arg *arg;
{
  register struct symbol *function;
  struct breakpoint *breakpoint;
  
  breakpoint = (struct breakpoint *) arg->data;
  function = (struct symbol *) (arg->next)->data;

  if (bpstat_find_breakpoint(stop_bpstat, breakpoint) != NULL
      && function != 0)
    {
      struct type *value_type;
      register value_ptr val;
      CORE_ADDR funcaddr;
      int struct_return;

      value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (function));
      if (!value_type)
	fatal ("internal: finish_command: function has no target type");
      
      if (TYPE_CODE (value_type) == TYPE_CODE_VOID)
	{
	  do_exec_cleanups (ALL_CLEANUPS);
	  return;
	}

      funcaddr = BLOCK_START (SYMBOL_BLOCK_VALUE (function));

      struct_return = using_struct_return (value_of_variable (function, NULL),

				   funcaddr,
				   check_typedef (value_type),
		BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));

      if (!struct_return)
      {
        val = value_being_returned (value_type, stop_registers, struct_return);
        printf_filtered ("Value returned is $%d = ", record_latest_value (val));
        value_print (val, gdb_stdout, 0, Val_no_prettyprint);
        printf_filtered ("\n");
      }
      else
      {
       /* We cannot determine the contents of the structure because
	  it is on the stack, and we don't know where, since we did not
	  initiate the call, as opposed to the call_function_by_hand case */
#ifdef VALUE_RETURNED_FROM_STACK
          val = 0;
          printf_filtered ("Value returned has type: %s.", 
			   TYPE_NAME (value_type));
          printf_filtered (" Cannot determine contents\n");
#else
          val = value_being_returned (value_type, stop_registers, 
				      struct_return);
          printf_filtered ("Value returned is $%d = ", 
			   record_latest_value (val));
          value_print (val, gdb_stdout, 0, Val_no_prettyprint);
          printf_filtered ("\n");
#endif
       
      }
    }
  do_exec_cleanups (ALL_CLEANUPS);
}

a754 20
  struct continuation_arg *arg1, *arg2;

  int async_exec = 0;

  /* Find out whether we must run in the background. */
  if (arg != NULL)
    async_exec = strip_bg_char (&arg);

  /* If we must run in the background, but the target can't do it,
     error out. */
  if (async_p && async_exec && !target_has_async)
    error ("Asynchronous execution not supported on this target.");

  /* If we are not asked to run in the bg, then prepare to run in the
     foreground, synchronously. */
  if (async_p && !async_exec && target_has_async)
    { 
      /* Simulate synchronous execution */
      sync_execution = 1;
    }
d774 1
a774 4
  if (!async_p || !target_has_async)
    old_chain = make_cleanup ((make_cleanup_func) delete_breakpoint, breakpoint);
  else
    make_exec_cleanup ((make_cleanup_func) delete_breakpoint, breakpoint);
a787 17
  /* If running asynchronously and the target support asynchronous
     execution, set things up for the rest of the finish command to be
     completed later on, when gdb has detected that the target has
     stopped, in fetch_inferior_event. */
  if (async_p && target_has_async)
    {
      arg1 = 
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg2 = 
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg1->next = arg2;
      arg2->next = NULL;
      arg1->data = (PTR) breakpoint;
      arg2->data = (PTR) function;
      add_continuation (finish_command_continuation, arg1);
    }

d791 15
a805 5
  /* Do this only if not running asynchronously or if the target
     cannot do async execution. Otherwise, complete this command when
     the target actually stops, in fetch_inferior_event.*/
    if (!async_p || !target_has_async)
      {
d807 1
a807 16
	/* Did we stop at our breakpoint? */
	if (bpstat_find_breakpoint(stop_bpstat, breakpoint) != NULL
	    && function != 0)
	  {
	    struct type *value_type;
	    register value_ptr val;
	    CORE_ADDR funcaddr;
	    int struct_return;

	    value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (function));
	    if (!value_type)
	      fatal ("internal: finish_command: function has no target type");

	    /* FIXME: Shouldn't we do the cleanups before returning? */
	    if (TYPE_CODE (value_type) == TYPE_CODE_VOID)
	      return;
d809 1
a809 1
	    funcaddr = BLOCK_START (SYMBOL_BLOCK_VALUE (function));
a810 2
	    struct_return = 
	      using_struct_return (value_of_variable (function, NULL),
d813 1
a813 1
				   BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));
d815 12
a826 15
	    if (!struct_return)
	      {
		val = 
		  value_being_returned (value_type, stop_registers, struct_return);
		printf_filtered ("Value returned is $%d = ", 
				 record_latest_value (val));
		value_print (val, gdb_stdout, 0, Val_no_prettyprint);
		printf_filtered ("\n");
	      }
	    else
	      {
		/* We cannot determine the contents of the structure
		   because it is on the stack, and we don't know
		   where, since we did not initiate the call, as
		   opposed to the call_function_by_hand case */
d828 4
a831 4
		val = 0;
		printf_filtered ("Value returned has type: %s.", 
				 TYPE_NAME (value_type));
		printf_filtered (" Cannot determine contents\n");
d833 8
a840 10
		val = value_being_returned (value_type, stop_registers, 
					    struct_return);
		printf_filtered ("Value returned is $%d = ", 
				 record_latest_value (val));
		value_print (val, gdb_stdout, 0, Val_no_prettyprint);
		printf_filtered ("\n");
#endif       
	      }
	  }
	do_cleanups(old_chain);
d842 2
a1357 14
/* Stop the execution of the target while running in async mode, in
   the backgound. */
static void
interrupt_target_command (args, from_tty)
     char *args;
     int from_tty;
{
  if (async_p && target_has_async)
    {
      dont_repeat ();			/* Not for the faint of heart */
      target_stop ();
    }
}

a1531 3

  add_com ("interrupt", class_run, interrupt_target_command,
	   "Interrupt the execution of the debugged program.");
@


1.1.1.6
log
@import gdb-1999-07-07 pre reformat
@
text
@d201 2
a202 4
  
  p = strchr (*args, '&');
  
  if (p)
@


1.1.1.7
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d161 2
a162 2
CORE_ADDR step_range_start;	/* Inclusive */
CORE_ADDR step_range_end;	/* Exclusive */
d190 1
a191 1

d196 1
a196 1
static int
d201 1
a201 1

d203 1
a203 1

d208 1
a208 1
	  if (strlen (*args) > 1)
d247 1
a247 1
	   !query ("The program being debugged has been started already.\n\
d291 1
a291 1
         to simulate synchronous (fg) execution. */
d309 1
a309 1
      puts_filtered ("Starting program: ");
d311 4
a314 4
	puts_filtered (exec_file);
      puts_filtered (" ");
      puts_filtered (inferior_args);
      puts_filtered ("\n");
d328 2
a329 2
  execute_command ("set args", from_tty);
  run_command ((char *) NULL, from_tty);
d331 1
a332 1

d338 1
a338 1
  int async_exec = 0;
d353 1
a353 1
    {
d387 1
a387 1
  proceed ((CORE_ADDR) - 1, TARGET_SIGNAL_DEFAULT, 0);
d442 1
a442 1

d447 1
a447 1

d463 1
a463 1
  if (!single_inst || skip_subroutines)		/* leave si command alone */
d465 3
a467 3
      enable_longjmp_breakpoint ();
      cleanups = make_cleanup ((make_cleanup_func) disable_longjmp_breakpoint,
			       0);
d475 1
a475 1
      if (!frame)		/* Avoid coredump here.  Why tho? */
d480 1
a480 1
      if (!single_inst)
d511 2
a512 2
      proceed ((CORE_ADDR) - 1, TARGET_SIGNAL_DEFAULT, 1);
      if (!stop_step)
d516 2
a517 2
         step resume break, I think).  Probably this should be moved to
         wait_for_inferior (near the top).  */
d519 1
a519 1
      SHIFT_INST_REGS ();
d524 1
a524 1
    do_cleanups (cleanups);
d540 1
a540 1

d555 1
a555 1
    {
d570 1
a570 1
  free ((PTR) sals.sals);
d575 1
a575 1
  resolve_sal_pc (&sal);	/* May error out */
d590 1
a590 1
  if (sfn != NULL)
d593 1
a593 1
      if (section_is_overlay (SYMBOL_BFD_SECTION (sfn)) &&
d616 1
a617 1

d624 1
a624 1
  if (line_no == (char *) NULL || !*line_no)
d632 1
a633 1

d679 1
a679 1
  proceed (oursig == TARGET_SIGNAL_0 ? (CORE_ADDR) - 1 : stop_pc, oursig, 0);
d689 1
a689 1
  breakpoint_auto_delete (*(bpstat *) arg);
d725 1
a725 1
      return (0);
d731 2
a732 2

      INIT_SAL (&sal);		/* initialize to zeroes */
d742 1
a742 1

d744 3
a746 3
         set_momentary_breakpoint.  We need to give the breakpoint a
         frame in case there is only one copy of the dummy (e.g.
         CALL_DUMMY_LOCATION == AFTER_TEXT_END).  */
d749 1
a749 1

d751 5
a755 5
         a breakpoint instruction.  If not, the call dummy already has the
         breakpoint instruction in it.

         addr is the address of the call dummy plus the CALL_DUMMY_START_OFFSET,
         so we need to subtract the CALL_DUMMY_START_OFFSET.  */
d760 1
a760 1

d762 2
a763 2
         perhaps they should; it already does in the special case of error
         out of resume()), then we wouldn't need this.  */
d800 1
a800 1

d811 1
a811 1

d815 1
a815 1

d818 1
a818 1

d825 1
a825 1

d829 1
a829 1

d835 2
a836 2

  proceed ((CORE_ADDR) - 1, TARGET_SIGNAL_DEFAULT, 1);
d839 1
a839 1
static void
d861 1
a861 1
    {
d887 1
a887 1

d891 1
a891 1
  if (bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL
d902 1
a902 1

d913 3
a915 3
					   funcaddr,
					   check_typedef (value_type),
			BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));
d918 6
a923 6
	{
	  val = value_being_returned (value_type, stop_registers, struct_return);
	  printf_filtered ("Value returned is $%d = ", record_latest_value (val));
	  value_print (val, gdb_stdout, 0, Val_no_prettyprint);
	  printf_filtered ("\n");
	}
d925 4
a928 4
	{
	  /* We cannot determine the contents of the structure because
	     it is on the stack, and we don't know where, since we did not
	     initiate the call, as opposed to the call_function_by_hand case */
d930 2
a931 2
	  val = 0;
	  printf_filtered ("Value returned has type: %s.",
d933 1
a933 1
	  printf_filtered (" Cannot determine contents\n");
d935 1
a935 1
	  val = value_being_returned (value_type, stop_registers,
d937 1
a937 1
	  printf_filtered ("Value returned is $%d = ",
d939 2
a940 2
	  value_print (val, gdb_stdout, 0, Val_no_prettyprint);
	  printf_filtered ("\n");
d942 2
a943 2

	}
d977 1
a977 1
    {
d1023 1
a1023 1
      arg1 =
d1025 1
a1025 1
      arg2 =
d1034 2
a1035 2
  proceed_to_finish = 1;	/* We want stop_registers, please... */
  proceed ((CORE_ADDR) - 1, TARGET_SIGNAL_DEFAULT, 0);
d1039 44
a1082 44
     the target actually stops, in fetch_inferior_event. */
  if (!async_p || !target_has_async)
    {

      /* Did we stop at our breakpoint? */
      if (bpstat_find_breakpoint (stop_bpstat, breakpoint) != NULL
	  && function != 0)
	{
	  struct type *value_type;
	  register value_ptr val;
	  CORE_ADDR funcaddr;
	  int struct_return;

	  value_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (function));
	  if (!value_type)
	    fatal ("internal: finish_command: function has no target type");

	  /* FIXME: Shouldn't we do the cleanups before returning? */
	  if (TYPE_CODE (value_type) == TYPE_CODE_VOID)
	    return;

	  funcaddr = BLOCK_START (SYMBOL_BLOCK_VALUE (function));

	  struct_return =
	    using_struct_return (value_of_variable (function, NULL),
				 funcaddr,
				 check_typedef (value_type),
			BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));

	  if (!struct_return)
	    {
	      val =
		value_being_returned (value_type, stop_registers, struct_return);
	      printf_filtered ("Value returned is $%d = ",
			       record_latest_value (val));
	      value_print (val, gdb_stdout, 0, Val_no_prettyprint);
	      printf_filtered ("\n");
	    }
	  else
	    {
	      /* We cannot determine the contents of the structure
	         because it is on the stack, and we don't know
	         where, since we did not initiate the call, as
	         opposed to the call_function_by_hand case */
d1084 4
a1087 4
	      val = 0;
	      printf_filtered ("Value returned has type: %s.",
			       TYPE_NAME (value_type));
	      printf_filtered (" Cannot determine contents\n");
d1089 11
a1099 11
	      val = value_being_returned (value_type, stop_registers,
					  struct_return);
	      printf_filtered ("Value returned is $%d = ",
			       record_latest_value (val));
	      value_print (val, gdb_stdout, 0, Val_no_prettyprint);
	      printf_filtered ("\n");
#endif
	    }
	}
      do_cleanups (old_chain);
    }
d1105 2
a1106 2
     char *args;
     int from_tty;
d1110 1
a1110 1

d1119 1
a1119 1
		   local_hex_string ((unsigned long) stop_pc));
d1125 1
a1125 1
         isn't as strange as it seems.  */
d1203 2
a1204 2
         equals, walk forward over the spaces til we see a nonspace 
         (possibly the equals). */
d1210 1
a1210 1
         take the char following the spaces.  */
d1234 1
a1234 2
  while (p != arg && (p[-1] == ' ' || p[-1] == '\t'))
    p--;
d1256 1
a1256 1
         Ask for confirmation if reading from the terminal.  */
d1301 1
a1301 1
    path_info ((char *) NULL, from_tty);
d1303 1
a1304 1

d1317 1
a1317 1
   to provide that format.  */
d1337 7
a1343 10
      if (regnum == -1)
	{
	  if (TYPE_CODE (REGISTER_VIRTUAL_TYPE (i)) == TYPE_CODE_FLT && !fpregs)
	    continue;
	}
      else
	{
	  if (i != regnum)
	    continue;
	}
d1346 1
a1346 1
         processor, so don't display anything.  */
d1389 2
a1390 2
	      : REGISTER_RAW_SIZE (i) - 1 - j;
	      printf_filtered ("%02x", (unsigned char) raw_buffer[idx]);
d1398 1
a1398 1
         print in hex a byte at a time.  */
d1404 1
a1404 1
	    printf_filtered ("%02x", (unsigned char) virtual_buffer[j]);
d1413 1
a1413 1
		     gdb_stdout, 0, 1, 0, Val_pretty_default);
d1417 1
a1417 1
         in addition to printing them as floats.  */
d1442 1
a1442 1
      DO_REGISTERS_INFO (-1, fpregs);
d1447 1
a1447 1
    {
d1456 1
a1456 1
      if (regnum >= 0)
d1462 2
a1463 2
	regnum = atoi (addr_exp);	/* Take a number */
      if (regnum >= numregs)	/* Bad name, or bad number */
d1466 2
a1467 2
    found:
      DO_REGISTERS_INFO (regnum, fpregs);
d1472 1
a1472 2
    }
  while (*addr_exp != '\0');
d1490 1
a1491 1

d1517 2
a1518 2
  char *exec_file;
  char *full_exec_path = NULL;
d1520 1
a1520 1
  dont_repeat ();		/* Not for the faint of heart */
d1556 13
a1568 15
  if (!exec_file)
    {
      exec_file = target_pid_to_exec_file (inferior_pid);
      if (exec_file)
	{
	  /* It's possible we don't have a full path, but rather just a
	     filename.  Some targets, such as HP-UX, don't provide the
	     full path, sigh.

	     Attempt to qualify the filename against the source path.
	     (If that fails, we'll just fall back on the original
	     filename.  Not much more we can do...)
	   */
	  if (!source_full_path_of (exec_file, &full_exec_path))
	    full_exec_path = savestring (exec_file, strlen (exec_file));
d1570 2
a1571 3
	  exec_file_attach (full_exec_path, from_tty);
	  symbol_file_command (full_exec_path, from_tty);
	}
d1573 1
d1579 1
a1579 1
      SOLIB_ADD ((char *) 0, from_tty, &current_target);
d1585 1
a1585 1
   */
d1607 1
a1607 1
  dont_repeat ();		/* Not for the faint of heart */
d1623 1
a1623 1
      dont_repeat ();		/* Not for the faint of heart */
d1656 1
a1656 1

d1661 3
a1663 3
    (add_set_cmd ("args", class_run, var_string_noescape,
		  (char *) &inferior_args,
		  "Set argument list to give program being debugged when it is started.\n\
d1679 1
a1679 1

d1681 1
a1681 1
	       "Cancel environment variable VAR for the program.\n\
d1683 1
a1683 1
	       &unsetlist);
d1691 1
a1691 1
	       &setlist);
d1693 1
a1693 1

d1695 1
a1695 1
	   "Add directory DIR(s) to beginning of search path for object files.\n\
d1702 1
a1702 1
	       "Current search path for finding object files.\n\
d1710 2
a1711 2
  add_com ("attach", class_run, attach_command,
	   "Attach to a process or file outside of GDB.\n\
d1753 1
a1753 1
    add_com_alias ("S", "next", class_run, 1);
d1761 1
a1761 1
	   "Execute until the program reaches a source line greater than the current\n\
d1765 1
a1765 1

d1781 1
a1781 1
    add_com_alias ("g", "go", class_run, 1);
d1801 1
a1801 1
	     "Start debugged program with no arguments.");
d1807 1
a1807 1
	    "List of integer registers and their contents, for selected stack frame.\n\
d1811 2
a1812 2
    add_com ("lr", class_info, nofp_registers_info,
	     "List of integer registers and their contents, for selected stack frame.\n\
d1815 1
a1815 1
	    "List of all registers and their contents, for selected stack frame.\n\
@


1.1.1.8
log
@import gdb-1999-07-19 snapshot
@
text
@d247 2
a248 2
      if (from_tty
	  && !query ("The program being debugged has been started already.\n\
@


1.1.1.9
log
@import gdb-1999-08-09 snapshot
@
text
@d2 1
a2 1
   Copyright 1986, 87, 88, 89, 91, 92, 95, 96, 1998, 1999
a37 1
#include "parser-defs.h"
a66 2
static void interrupt_target_command (char *args, int from_tty);

d710 4
d723 5
a727 1

d902 1
a902 1
	internal_error ("finish_command: function has no target type");
d1055 1
a1055 1
	    internal_error ("finish_command: function has no target type");
@


1.1.1.10
log
@import gdb-1999-09-28 snapshot
@
text
@a37 1
#include "event-top.h"
d283 1
a283 4
    {
      if (event_loop_p && target_can_async_p ())
	async_disable_stdin ();
    }
d291 1
a291 1
      if (event_loop_p && async_exec && !target_can_async_p ())
d296 1
a296 1
      if (event_loop_p && !async_exec && target_can_async_p ())
d299 1
a299 1
	  async_disable_stdin ();
d351 1
a351 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d356 1
a356 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d359 1
a359 1
      async_disable_stdin ();
d454 1
a454 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d459 1
a459 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d462 1
a462 1
      async_disable_stdin ();
d553 1
a553 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d558 1
a558 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d561 1
a561 1
      async_disable_stdin ();
d851 1
a851 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d856 1
a856 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d859 1
a859 1
      async_disable_stdin ();
d967 1
a967 1
  if (event_loop_p && async_exec && !target_can_async_p ())
d972 1
a972 1
  if (event_loop_p && !async_exec && target_can_async_p ())
d975 1
a975 1
      async_disable_stdin ();
d996 1
a996 1
  if (!event_loop_p || !target_can_async_p ())
d1017 1
a1017 1
  if (event_loop_p && target_can_async_p ())
d1036 1
a1036 1
  if (!event_loop_p || !target_can_async_p ())
a1591 3

  if (attach_hook)
    attach_hook ();
a1614 2
  if (detach_hook)
    detach_hook ();
d1624 1
a1624 1
  if (event_loop_p && target_can_async_p ())
@


1.1.1.11
log
@import gdb-1999-10-04 snapshot
@
text
@d37 1
d395 1
a395 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
d519 1
a519 1
      proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
d687 1
a687 1
  proceed (oursig == TARGET_SIGNAL_0 ? (CORE_ADDR) -1 : stop_pc, oursig, 0);
d836 1
a836 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);
d1035 1
a1035 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
@


1.1.1.12
log
@import gdb-1999-11-08 snapshot
@
text
@a51 2
static void print_return_value (int struct_return, struct type *value_type);

a871 31
/* Print the result of a function at the end of a 'finish' command. */
static void
print_return_value (int structure_return, struct type *value_type)
{
  register value_ptr value;

  if (!structure_return)
    {
      value = value_being_returned (value_type, stop_registers, structure_return);
      printf_filtered ("Value returned is $%d = ", record_latest_value (value));
      value_print (value, gdb_stdout, 0, Val_no_prettyprint);
      printf_filtered ("\n");
    }
  else
    {
      /* We cannot determine the contents of the structure because
	 it is on the stack, and we don't know where, since we did not
	 initiate the call, as opposed to the call_function_by_hand case */
#ifdef VALUE_RETURNED_FROM_STACK
      value = 0;
      printf_filtered ("Value returned has type: %s.", TYPE_NAME (value_type));
      printf_filtered (" Cannot determine contents\n");
#else
      value = value_being_returned (value_type, stop_registers, structure_return);
      printf_filtered ("Value returned is $%d = ", record_latest_value (value));
      value_print (value, gdb_stdout, 0, Val_no_prettyprint);
      printf_filtered ("\n");
#endif
    }
}

d894 1
d911 1
d914 1
a914 1
					   BLOCK_GCC_COMPILED (SYMBOL_BLOCK_VALUE (function)));
d916 27
a942 1
      print_return_value (struct_return, value_type); 
d1047 1
d1067 29
a1095 1
	  print_return_value (struct_return, value_type); 
@


1.1.1.13
log
@import gdb-1999-12-06 snapshot
@
text
@a90 2
static void step_once (int skip_subroutines, int single_inst, int count);
static void step_1_continuation (struct continuation_arg *arg);
d475 2
a476 76
      if (!event_loop_p || !target_can_async_p ())
	cleanups = make_cleanup ((make_cleanup_func) disable_longjmp_breakpoint,
				 0);
      else
	make_exec_cleanup ((make_cleanup_func) disable_longjmp_breakpoint, 0);
    }

  /* In synchronous case, all is well, just use the regular for loop. */
  if (!event_loop_p || !target_can_async_p ())
    {
      for (; count > 0; count--)
	{
	  clear_proceed_status ();

	  frame = get_current_frame ();
	  if (!frame)		/* Avoid coredump here.  Why tho? */
	    error ("No current frame");
	  step_frame_address = FRAME_FP (frame);
	  step_sp = read_sp ();

	  if (!single_inst)
	    {
	      find_pc_line_pc_range (stop_pc, &step_range_start, &step_range_end);
	      if (step_range_end == 0)
		{
		  char *name;
		  if (find_pc_partial_function (stop_pc, &name, &step_range_start,
						&step_range_end) == 0)
		    error ("Cannot find bounds of current function");

		  target_terminal_ours ();
		  printf_filtered ("\
Single stepping until exit from function %s, \n\
which has no line number information.\n", name);
		}
	    }
	  else
	    {
	      /* Say we are stepping, but stop after one insn whatever it does.  */
	      step_range_start = step_range_end = 1;
	      if (!skip_subroutines)
		/* It is stepi.
		   Don't step over function calls, not even to functions lacking
		   line numbers.  */
		step_over_calls = 0;
	    }

	  if (skip_subroutines)
	    step_over_calls = 1;

	  step_multi = (count > 1);
	  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 1);

	  if (!stop_step)
	    break;

	  /* FIXME: On nexti, this may have already been done (when we hit the
	     step resume break, I think).  Probably this should be moved to
	     wait_for_inferior (near the top).  */
#if defined (SHIFT_INST_REGS)
	  SHIFT_INST_REGS ();
#endif
	}

      if (!single_inst || skip_subroutines)
	do_cleanups (cleanups);
      return;
    }
  /* In case of asynchronous target things get complicated, do only
     one step for now, before returning control to the event loop. Let
     the continuation figure out how many other steps we need to do,
     and handle them one at the time, through step_once(). */
  else
    {
      if (event_loop_p && target_can_async_p ())
	step_once (skip_subroutines, single_inst, count);
a477 46
}

/* Called after we are done with one step operation, to check whether
   we need to step again, before we print the prompt and return control
   to the user. If count is > 1, we will need to do one more call to
   proceed(), via step_once(). Basically it is like step_once and
   step_1_continuation are co-recursive. */
static void
step_1_continuation (arg)
     struct continuation_arg *arg;
{
 int count;
 int skip_subroutines;
 int single_inst;

 skip_subroutines = (int) arg->data;
 single_inst = (int) (arg->next)->data;
 count = (int) ((arg->next)->next)->data;

 if (stop_step)
   {
     /* FIXME: On nexti, this may have already been done (when we hit the
	step resume break, I think).  Probably this should be moved to
	wait_for_inferior (near the top).  */
#if defined (SHIFT_INST_REGS)
     SHIFT_INST_REGS ();
#endif
     step_once (skip_subroutines, single_inst, count - 1);
   }
 else
   if (!single_inst || skip_subroutines)
     do_exec_cleanups (ALL_CLEANUPS);
}

/* Do just one step operation. If count >1 we will have to set up a
   continuation to be done after the target stops (after this one
   step). This is useful to implement the 'step n' kind of commands, in
   case of asynchronous targets. We had to split step_1 into two parts,
   one to be done before proceed() and one afterwards. This function is
   called in case of step n with n>1, after the first step operation has
   been completed.*/
static void 
step_once (int skip_subroutines, int single_inst, int count) 
{ 
  struct continuation_arg *arg1; struct continuation_arg *arg2;
  struct continuation_arg *arg3; struct frame_info *frame;
d479 1
a479 1
  if (count > 0)
a519 13
      arg1 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg2 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg3 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
      arg1->next = arg2;
      arg1->data = (PTR) skip_subroutines;
      arg2->next = arg3;
      arg2->data = (PTR) single_inst;
      arg3->next = NULL;
      arg3->data = (PTR) count;
      add_intermediate_continuation (step_1_continuation, arg1);
d521 9
d531 3
a534 1

@


1.1.1.14
log
@import gdb-1999-12-21 snapshot
@
text
@a847 1
  int saved_async = 0;
a893 4

  if (target_can_async_p ())
    saved_async = target_async_mask (0);

a894 4

  if (saved_async)
    target_async_mask (saved_async);

@


1.1.1.15
log
@import gdb-2000-01-10 snapshot
@
text
@d481 1
a481 1
        make_exec_cleanup ((make_cleanup_func) disable_longjmp_breakpoint, 0);
d596 1
a596 1
step_once (int skip_subroutines, int single_inst, int count)
d598 2
a599 4
  struct continuation_arg *arg1; 
  struct continuation_arg *arg2;
  struct continuation_arg *arg3; 
  struct frame_info *frame;
a1051 1
  struct cleanup *cleanups;
a1054 1
  cleanups = (struct cleanup *) (arg->next->next)->data;
d1069 1
a1069 1
	  do_exec_cleanups (cleanups);
d1082 1
a1082 1
  do_exec_cleanups (cleanups);
d1098 1
a1098 1
  struct continuation_arg *arg1, *arg2, *arg3;
d1140 1
a1140 1
    old_chain = make_exec_cleanup ((make_cleanup_func) delete_breakpoint, breakpoint);
a1163 2
      arg3 =
	(struct continuation_arg *) xmalloc (sizeof (struct continuation_arg));
d1165 1
a1165 2
      arg2->next = arg3;
      arg3->next = NULL;
a1167 1
      arg3->data = (PTR) old_chain;
@


1.1.1.16
log
@import gdb-2000-01-31 snapshot
@
text
@d841 2
a842 7
   
   Otherwise, run_stack-dummy returns a non-zero value.
   If the called function receives a random signal, we do not allow the user
   to continue executing it as this may not work.  The dummy frame is poped
   and we return 1.
   If we hit a breakpoint, we leave the frame in place and return 2 (the frame
   will eventually be popped when we do hit the dummy end breakpoint).  */
a909 14
  if (stopped_by_random_signal)
    {
      /* If the inferior execution fails we need to restore our
         stack.  It is not done by proceed() in this case. */
      /* Pop the empty frame that contains the stack dummy.
         POP_FRAME ends with a setting of the current frame, so we
         can use that next. */
      POP_FRAME;
      return 1;
    }
    
  /* We may also stop prematurely because we hit a breakpoint in the
     called routine.  We do not pop the frame as the user may wish
     to single step or continue from there. */
d911 1
a911 1
    return 2;
d913 1
a913 1
  /* On normal return, the stack dummy has been popped already.  */
@


1.1.1.17
log
@import gdb-2000-02-02 snapshot
@
text
@a36 3
#ifdef UI_OUT
#include "ui-out.h"
#endif
a319 10
#ifdef UI_OUT
      ui_out_field_string (uiout, NULL, "Starting program");
      ui_out_text (uiout, ": ");
      if (exec_file)
	ui_out_field_string (uiout, "execfile", exec_file);
      ui_out_spaces (uiout, 1);
      ui_out_field_string (uiout, "infargs", inferior_args);
      ui_out_text (uiout, "\n");
      ui_out_flush (uiout);
#else
a326 1
#endif
a1032 3
#ifdef UI_OUT
  static struct ui_stream *stb = NULL;
#endif /* UI_OUT */
a1036 9
#ifdef UI_OUT
      stb = ui_out_stream_new (uiout);
      ui_out_text (uiout, "Value returned is ");
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", record_latest_value (value));
      ui_out_text (uiout, "= ");
      value_print (value, stb->stream, 0, Val_no_prettyprint);
      ui_out_field_stream (uiout, "return-value", stb);
      ui_out_text (uiout, "\n");
#else /* UI_OUT */
a1039 1
#endif /* UI_OUT */
a1047 6
#ifdef UI_OUT
      ui_out_text (uiout, "Value returned has type: ");
      ui_out_field_string (uiout, "return-type", TYPE_NAME (value_type));
      ui_out_text (uiout, ".");
      ui_out_text (uiout, " Cannot determine contents\n");
#else /* UI_OUT */
a1049 1
#endif /* UI_OUT */
a1051 9
#ifdef UI_OUT
      stb = ui_out_stream_new (uiout);
      ui_out_text (uiout, "Value returned is ");
      ui_out_field_fmt (uiout, "gdb-result-var", "$%d", record_latest_value (value));
      ui_out_text (uiout, "= ");
      value_print (value, stb->stream, 0, Val_no_prettyprint);
      ui_out_field_stream (uiout, "return-value", stb);
      ui_out_text (uiout, "\n");
#else
a1055 1
#endif
a1762 9
#ifdef UI_OUT
void
interrupt_target_command_wrapper (args, from_tty)
     char *args;
     int from_tty;
{
  interrupt_target_command (args, from_tty);
}
#endif
@


